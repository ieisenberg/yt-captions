[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "first of all thank you thank you everyone for coming here today it's a pleasure to be speaking to you today my",
    "start": "3870",
    "end": "11070"
  },
  {
    "text": "name is Victor I'm a software engineer and new bank and where I work mostly",
    "start": "11070",
    "end": "16410"
  },
  {
    "text": "with back-end services dealing with financial logic today we're going to talk about real-time financials with",
    "start": "16410",
    "end": "23009"
  },
  {
    "text": "micro services and functional programming so first of all for those of",
    "start": "23009",
    "end": "28290"
  },
  {
    "start": "26000",
    "end": "53000"
  },
  {
    "text": "you who don't know what new bank does we're a financial services Brazilian",
    "start": "28290",
    "end": "33420"
  },
  {
    "text": "financial services company we're essentially building a digital bank from scratch in Brazil and today our main",
    "start": "33420",
    "end": "41879"
  },
  {
    "text": "product is a credit card this 100% controlled by a mobile app and we've had over nine million people request this",
    "start": "41879",
    "end": "48659"
  },
  {
    "text": "credit card since our launch in late 2014 and even though we're in a",
    "start": "48659",
    "end": "56100"
  },
  {
    "start": "53000",
    "end": "107000"
  },
  {
    "text": "financial services company we really think of ourselves as a tech company and it's part of our DNA it's essentially",
    "start": "56100",
    "end": "62670"
  },
  {
    "text": "our core competences technology software engineering and the big question in the",
    "start": "62670",
    "end": "68880"
  },
  {
    "text": "early days was how can we leverage software engineering to gain a competitive edge all over these",
    "start": "68880",
    "end": "75240"
  },
  {
    "text": "well-established big experienced banks that were already in this market and one",
    "start": "75240",
    "end": "82380"
  },
  {
    "text": "thing that we figured was the best way first to accomplish this was to keep on moving forward to be able to adapt",
    "start": "82380",
    "end": "88920"
  },
  {
    "text": "quickly to be able to all not never be afraid of adding new functionalities at a new code to prod so from the early",
    "start": "88920",
    "end": "95940"
  },
  {
    "text": "days we really built our systems around continuous delivery we thought that that was one of the key",
    "start": "95940",
    "end": "102660"
  },
  {
    "text": "components of what would make us a strong company and be able to compete in the market so naturally with continuous",
    "start": "102660",
    "end": "109890"
  },
  {
    "text": "delivery we came to the conclusion that we should build from scratch from the very beginning in a microservices",
    "start": "109890",
    "end": "116340"
  },
  {
    "text": "architecture because you know as we you know we've taught over today and the",
    "start": "116340",
    "end": "122100"
  },
  {
    "text": "microservices talks we know that we can",
    "start": "122100",
    "end": "127200"
  },
  {
    "text": "deploy new services fairly easy there you know you can have a continuous integration system that I deploy new",
    "start": "127200",
    "end": "133890"
  },
  {
    "text": "features new services or that really couldn't been concerned about breaking the rest of my system if you if you do",
    "start": "133890",
    "end": "140370"
  },
  {
    "text": "it right you should get some decoupling so you're never really afraid of replacing a new service killing",
    "start": "140370",
    "end": "146640"
  },
  {
    "text": "something off you're never really too afraid of making these changes and you also get this hole bounded by context",
    "start": "146640",
    "end": "153990"
  },
  {
    "text": "concepts that allows for separate teams to be developing separate features at",
    "start": "153990",
    "end": "159300"
  },
  {
    "text": "the same time and be able to get that surprise without really depending on",
    "start": "159300",
    "end": "164670"
  },
  {
    "text": "anyone else so this is these are really features key features for us to be able to compete adapt and scale our business",
    "start": "164670",
    "end": "173280"
  },
  {
    "text": "to the point that we really wanted so since the beginning this is how we built",
    "start": "173280",
    "end": "178350"
  },
  {
    "text": "our architecture and it turned out that the key question that arose was what",
    "start": "178350",
    "end": "185820"
  },
  {
    "start": "181000",
    "end": "200000"
  },
  {
    "text": "happens when we need to combine data from across all these separate services and especially what happens if you",
    "start": "185820",
    "end": "193290"
  },
  {
    "text": "needed that to do that in real time so this is the problem that I want to talk",
    "start": "193290",
    "end": "199350"
  },
  {
    "text": "about today so before we do that let's take a quick step back so you guys have a little more context of what a service",
    "start": "199350",
    "end": "205260"
  },
  {
    "start": "200000",
    "end": "270000"
  },
  {
    "text": "and new bank looks like especially a service that deals with financial logic so the first thing is that it's written",
    "start": "205260",
    "end": "212550"
  },
  {
    "text": "closure which is a functional programming language built on the JVM we're gonna have producers and consumers",
    "start": "212550",
    "end": "218070"
  },
  {
    "text": "Turkey Africa and Kefka is essentially the way that we do most of our asynchronous event-driven integrations",
    "start": "218070",
    "end": "225209"
  },
  {
    "text": "between services most rights actually come through for Kafka we get",
    "start": "225209",
    "end": "231239"
  },
  {
    "text": "persistence with DES Tomic what's the bit which is the database we use for each of these services and I'll get I'll",
    "start": "231239",
    "end": "236910"
  },
  {
    "text": "explain a little more how the atomic works in the next slide and we have REST",
    "start": "236910",
    "end": "242580"
  },
  {
    "text": "API s that are mostly used for other services to access data and for actually",
    "start": "242580",
    "end": "248190"
  },
  {
    "text": "the mobile clients also accident data and business logic from each of these services and all of these you know every",
    "start": "248190",
    "end": "256620"
  },
  {
    "text": "service you know everything is running on AWS on to a ZZZ with configure skill code immutable infra horizontally",
    "start": "256620",
    "end": "263310"
  },
  {
    "text": "scalable Charlotte by customers each of these topics could really merit I'll talk on their own so won't really dive",
    "start": "263310",
    "end": "269610"
  },
  {
    "text": "deep into that so out of all the technologies that we use I guess state onyx is the one in",
    "start": "269610",
    "end": "274890"
  },
  {
    "text": "that's the least familiar to to most people so just briefly explain how it",
    "start": "274890",
    "end": "280320"
  },
  {
    "text": "works so you can think of des tonic as immutable append only database which means that",
    "start": "280320",
    "end": "286980"
  },
  {
    "text": "I'm never gonna update a value in my database I'm never gonna overwrite anything I'm only gonna be asserting new facts so you",
    "start": "286980",
    "end": "294510"
  },
  {
    "text": "can one simple way to think about it it's that essentially it's a database that works like get and get I'm never",
    "start": "294510",
    "end": "301110"
  },
  {
    "text": "gonna actually erase a line I'm only gonna say do not consider this line as of this commit from down now on consider",
    "start": "301110",
    "end": "309300"
  },
  {
    "text": "this new line so the idea is that you can always you know I will not never",
    "start": "309300",
    "end": "316230"
  },
  {
    "text": "change my data I can always look back and had snapshots that what the data looked like looked like at each point in",
    "start": "316230",
    "end": "322650"
  },
  {
    "text": "time so you have this very strong from you know from you have this really",
    "start": "322650",
    "end": "327990"
  },
  {
    "text": "strong audit trail by default which is very powerful in financial services in",
    "start": "327990",
    "end": "333480"
  },
  {
    "text": "general if you need to be a system of record in any way and the atomic is also",
    "start": "333480",
    "end": "339720"
  },
  {
    "text": "acid on right so atomic consistent isolating durable so it's a really a database that that's focused on this",
    "start": "339720",
    "end": "346050"
  },
  {
    "text": "immutable data model as well as very high consistency so if you are in more",
    "start": "346050",
    "end": "353790"
  },
  {
    "text": "interested in to you know learn more about the atomic I highly recommend talk for from other new bank engineers that's",
    "start": "353790",
    "end": "360510"
  },
  {
    "text": "exploring for hidden super powers of the atomic is available online I should check it out so going back to our",
    "start": "360510",
    "end": "367380"
  },
  {
    "start": "365000",
    "end": "427000"
  },
  {
    "text": "problem today we have about 90 services a new bank every couple of weeks we have",
    "start": "367380",
    "end": "373410"
  },
  {
    "text": "new services we kill off new other services and the key problem was that in",
    "start": "373410",
    "end": "381060"
  },
  {
    "text": "a credit card business a lot of the business logic and a lot of the hard questions that we need to answer depend",
    "start": "381060",
    "end": "387960"
  },
  {
    "text": "on data from across all these separate services so let's just think about some questions that a credit card business",
    "start": "387960",
    "end": "394080"
  },
  {
    "text": "needs to answer should i authorize a purchase should i block a card should I",
    "start": "394080",
    "end": "399120"
  },
  {
    "text": "charge interest what's the late balance what does a customer owe me and these clearly",
    "start": "399120",
    "end": "404700"
  },
  {
    "text": "and on the purchases the customers made the payments you know any chargebacks",
    "start": "404700",
    "end": "410580"
  },
  {
    "text": "that is had interest currencies just to name a few and each of these entities",
    "start": "410580",
    "end": "416180"
  },
  {
    "text": "reside on separate services and their own databases so I need to pull data",
    "start": "416180",
    "end": "422760"
  },
  {
    "text": "from all these places together to be able to answer these questions and you",
    "start": "422760",
    "end": "428250"
  },
  {
    "text": "know to make matters worse we actually show these hard to calculate numbers in real time to our customers that's",
    "start": "428250",
    "end": "434670"
  },
  {
    "text": "actually a big part of our value proposition is the idea that we can show in real time what your finances with new",
    "start": "434670",
    "end": "441840"
  },
  {
    "text": "bank looks like and you know new bank means new in Portuguese means naked or",
    "start": "441840",
    "end": "448230"
  },
  {
    "text": "transparent so it's really idea that want to be transparent and show the data to the customer these aggregates as best",
    "start": "448230",
    "end": "453990"
  },
  {
    "text": "as possible and naturally because these numbers are were spread out on separate",
    "start": "453990",
    "end": "460200"
  },
  {
    "text": "databases separate services and they're very hard to get to on the first thing that happened was that we ended up not",
    "start": "460200",
    "end": "467310"
  },
  {
    "text": "having long canonical definition of what these numbers look like and naturally",
    "start": "467310",
    "end": "472650"
  },
  {
    "text": "what ends up happening is that you create ad hoc definitions of what these numbers actually are either by analysts",
    "start": "472650",
    "end": "479130"
  },
  {
    "text": "doing analysis or their models or even engineers in different services trying",
    "start": "479130",
    "end": "484410"
  },
  {
    "text": "to replicate the same data in different ways with slightly different definitions and this is very very dangerous",
    "start": "484410",
    "end": "491610"
  },
  {
    "text": "and because you end up with this analysis versus operational definition",
    "start": "491610",
    "end": "497460"
  },
  {
    "text": "gap so if can you can imagine that if they have an analyst that's gonna be evaluating the the the called corrects a",
    "start": "497460",
    "end": "504570"
  },
  {
    "text": "collections strategy how well a collection strategy is working how can he determine that it's going",
    "start": "504570",
    "end": "510750"
  },
  {
    "text": "well or not if he can't guarantee that the definition of his definition of what the customer owes us is the same",
    "start": "510750",
    "end": "517590"
  },
  {
    "text": "definition that the collections service is going to be looking at and because",
    "start": "517590",
    "end": "523590"
  },
  {
    "text": "these were the most important numbers that we had and these were the numbers that you know all of our stakeholders",
    "start": "523590",
    "end": "529080"
  },
  {
    "text": "cared about our investors our customers our analysts and especially our regulators the central bank we needed to",
    "start": "529080",
    "end": "537030"
  },
  {
    "text": "do something better for them and the first thing we thought about was well how do how do we now we need to",
    "start": "537030",
    "end": "543980"
  },
  {
    "text": "find a way to create this canonical definition for these numbers and what's the best way to represent this data the",
    "start": "543980",
    "end": "550100"
  },
  {
    "text": "first thing we thought about it was the canonical way of representing financial information is essentially a balance",
    "start": "550100",
    "end": "557360"
  },
  {
    "start": "551000",
    "end": "628000"
  },
  {
    "text": "sheet or accounting in general and there are some benefits to that and the first one and I think the most important one",
    "start": "557360",
    "end": "563990"
  },
  {
    "text": "is that you can now using accounting you can apply this generally accepted",
    "start": "563990",
    "end": "569600"
  },
  {
    "text": "accounting principles so no longer are these balances are matter of an analyst opinion or the CFOs opinion or software",
    "start": "569600",
    "end": "576560"
  },
  {
    "text": "engineers opinion of what that number should look like now I can apply these briefs of principles and I have this",
    "start": "576560",
    "end": "581709"
  },
  {
    "text": "verifiable unbiased version of what the number should look like you get conservation of money by default",
    "start": "581709",
    "end": "588560"
  },
  {
    "text": "so every credit should have a debit so I'm never gonna be just creating money out of thin air I'm not gonna be",
    "start": "588560",
    "end": "593570"
  },
  {
    "text": "destroying value of nowhere I always have the traceability of how the money is moving around and lastly which was",
    "start": "593570",
    "end": "602510"
  },
  {
    "text": "really nice for our architecture at the time was that accounting is essentially",
    "start": "602510",
    "end": "608300"
  },
  {
    "text": "one of the original events or systems you only really care about a log of credits and debits and the balance which",
    "start": "608300",
    "end": "614959"
  },
  {
    "text": "is the number you're going to be looking at just a calculated value on top all day and this event source property",
    "start": "614959",
    "end": "620089"
  },
  {
    "text": "really fit really well with the way we are event driven through Kafka",
    "start": "620089",
    "end": "625760"
  },
  {
    "text": "integrations between services so let's briefly look at what this accounting",
    "start": "625760",
    "end": "632060"
  },
  {
    "start": "628000",
    "end": "795000"
  },
  {
    "text": "model looks like we have a book account a book accounts there's nothing more than an entity there's going to be",
    "start": "632060",
    "end": "637700"
  },
  {
    "text": "aggregating credits and debits and the book accounts gonna have a type and these types are essentially the names",
    "start": "637700",
    "end": "643370"
  },
  {
    "text": "that we give to the balances the numbers that these metrics that we're looking at so a cash balance a prepaid balance the",
    "start": "643370",
    "end": "649790"
  },
  {
    "text": "late balance currently omit receivables payables and so on you can have an entry",
    "start": "649790",
    "end": "655910"
  },
  {
    "text": "an entry is nothing more than just one representation of an amount a credit",
    "start": "655910",
    "end": "661790"
  },
  {
    "text": "account a debit account in a post date and the post date we say that it's the",
    "start": "661790",
    "end": "667370"
  },
  {
    "text": "business relevant date so it's not when I doubt about a payment is not when I",
    "start": "667370",
    "end": "673800"
  },
  {
    "text": "transacted that payments of the database it's when the payment was actually made by the customer",
    "start": "673800",
    "end": "679139"
  },
  {
    "text": "so it's this business timeline concept update and then you get the balance the",
    "start": "679139",
    "end": "684990"
  },
  {
    "text": "balance is just the cumulative sum of all the entries for a book account and these three entities are essentially the",
    "start": "684990",
    "end": "690959"
  },
  {
    "text": "the you know the core of accounting revolve around these three entities but",
    "start": "690959",
    "end": "697110"
  },
  {
    "text": "a new bank we thought that we could add a few more to add essentially metadata for analysis and",
    "start": "697110",
    "end": "703230"
  },
  {
    "text": "traceability to how we you know we're gonna deal with with this model so we also included a movement the concept of",
    "start": "703230",
    "end": "710399"
  },
  {
    "text": "a movement so if you think of an event a payment arriving or a purchase arriving you're actually not gonna just create",
    "start": "710399",
    "end": "717720"
  },
  {
    "text": "one credit and one debit into accounts are actually gonna be moving money around for several several different accounts at the same time and a movement",
    "start": "717720",
    "end": "724680"
  },
  {
    "text": "is just a way for you to group together the same events that happen because of",
    "start": "724680",
    "end": "730319"
  },
  {
    "text": "the same cathica event so it's just a grouping of a collection of entries and",
    "start": "730319",
    "end": "737660"
  },
  {
    "text": "carrying the metadata related to the original event so you can think of a",
    "start": "737660",
    "end": "742889"
  },
  {
    "text": "movement as a mapping one two one one kafka event two one database transaction",
    "start": "742889",
    "end": "747959"
  },
  {
    "text": "with a lot of metadata related to both of these actions and lastly we have this",
    "start": "747959",
    "end": "754079"
  },
  {
    "text": "concept of a meta entity the meta interest is just a reference for a for the original original entity that it",
    "start": "754079",
    "end": "761249"
  },
  {
    "text": "lives in some other database that were originated this this movement so just a",
    "start": "761249",
    "end": "766620"
  },
  {
    "text": "way for us to have the audit trail to trace back all these entries where do they come from what what's you know",
    "start": "766620",
    "end": "772230"
  },
  {
    "text": "everything's related to it in the original service what do they look like so this is essentially the model that we",
    "start": "772230",
    "end": "777720"
  },
  {
    "text": "want to create and I recommend to anyone that's gonna be building anything with",
    "start": "777720",
    "end": "783360"
  },
  {
    "text": "accounting to read algebraic models for accounting system those systems because it gives you a very rigorous view of",
    "start": "783360",
    "end": "790459"
  },
  {
    "text": "accounting it's very helpful when you're building software around that so you",
    "start": "790459",
    "end": "797579"
  },
  {
    "start": "795000",
    "end": "809000"
  },
  {
    "text": "know our conclusion was we're gonna create this double entry accounting service we know our model we you know",
    "start": "797579",
    "end": "803149"
  },
  {
    "text": "make sense what what we'll actually the dataflow how would that look like",
    "start": "803149",
    "end": "810380"
  },
  {
    "start": "809000",
    "end": "859000"
  },
  {
    "text": "so the the goals that we had was that the first thing is that it should be event-driven via caca",
    "start": "810380",
    "end": "817980"
  },
  {
    "text": "because the great thing about this is that we can just plug in so they already existing topics that we had we wouldn't",
    "start": "817980",
    "end": "823620"
  },
  {
    "text": "need to change anything on the other services and I can just use those topics to create my new stage and start",
    "start": "823620",
    "end": "828960"
  },
  {
    "text": "collecting data for my new balances that I wanted to use in my operation as an analysis and so on I needed high availability so these",
    "start": "828960",
    "end": "837840"
  },
  {
    "text": "numbers for them to be used both in operations both and analysis so showed",
    "start": "837840",
    "end": "844020"
  },
  {
    "text": "it to my customer shows to other services and use it for my models I needed this to be highly available",
    "start": "844020",
    "end": "849870"
  },
  {
    "text": "otherwise I would never get this - we know my customers only analysis could be",
    "start": "849870",
    "end": "854940"
  },
  {
    "text": "looking at this number and I would still have this analytical operational gap and",
    "start": "854940",
    "end": "861000"
  },
  {
    "start": "859000",
    "end": "923000"
  },
  {
    "text": "since you is it needs to be highly available naturally you're going to lose some consistency and we accepted that",
    "start": "861000",
    "end": "867540"
  },
  {
    "text": "trade-off is like we're consciously gonna give away some consistency here for this availability but we need to",
    "start": "867540",
    "end": "875670"
  },
  {
    "text": "make sure that we have traceability we only can only be inconsistent if we have",
    "start": "875670",
    "end": "881850"
  },
  {
    "text": "enough information to understand why when and how we were inconsistent and",
    "start": "881850",
    "end": "888420"
  },
  {
    "text": "the idea that we also needed to have a very strong audit trail for this because",
    "start": "888420",
    "end": "893820"
  },
  {
    "text": "if I can measure my inconsistencies I can take action to fix what I calculated because of stale data incorrect data or",
    "start": "893820",
    "end": "900690"
  },
  {
    "text": "at least at the very least it can evaluate the costs of these",
    "start": "900690",
    "end": "906090"
  },
  {
    "text": "inconsistencies what decisions that actually make wrong because of these inconsistencies and it needs to be",
    "start": "906090",
    "end": "912870"
  },
  {
    "text": "resilient to distributed system craziness so a system going down ordering concurrency bugs and other",
    "start": "912870",
    "end": "920070"
  },
  {
    "text": "services and so we need to have some sort of resilience built into it so the",
    "start": "920070",
    "end": "925080"
  },
  {
    "start": "923000",
    "end": "1031000"
  },
  {
    "text": "actual flow and we call it the ideal flow because it's the one that we thought if it held the world would look like and it's like oh this is what",
    "start": "925080",
    "end": "931200"
  },
  {
    "text": "perfectly this is someone look like if we are had these services publishing messages -",
    "start": "931200",
    "end": "937330"
  },
  {
    "text": "Kafka in separate topics new purchase new new payment so on would grab these",
    "start": "937330",
    "end": "943000"
  },
  {
    "text": "events and we you know in our new service would just apply a function of",
    "start": "943000",
    "end": "949090"
  },
  {
    "text": "the payload of the event and transform that to this new model and the key thing",
    "start": "949090",
    "end": "956020"
  },
  {
    "text": "is that if you if I can transform my original event to this entries movement",
    "start": "956020",
    "end": "963400"
  },
  {
    "text": "model accounting model just with the with the payload of that event then I have a great set of properties and well",
    "start": "963400",
    "end": "972070"
  },
  {
    "text": "if everything is okay I'm gonna transact cut to the very base but the biggest thing is that if I'm just looking at the",
    "start": "972070",
    "end": "977980"
  },
  {
    "text": "event I no longer care about mutable state so I'm not accessing the database",
    "start": "977980",
    "end": "983110"
  },
  {
    "text": "I'm not doing gets on other services like I only care about the event payload and because of that event ordering",
    "start": "983110",
    "end": "990700"
  },
  {
    "text": "doesn't matter so if an event happens before the other and didn't expect that it doesn't matter also its threat safe",
    "start": "990700",
    "end": "998260"
  },
  {
    "text": "if I have concurrency you know I'm not gonna I'm it's not gonna be a problem I can just have many many threads running",
    "start": "998260",
    "end": "1004620"
  },
  {
    "text": "at the same time because it's not modifying the same state that it's reading because well it's not reading",
    "start": "1004620",
    "end": "1009630"
  },
  {
    "text": "any state so in the end with this all you really needed to worry about to get",
    "start": "1009630",
    "end": "1016590"
  },
  {
    "text": "consistency is that you needed to guarantee that all events are consumed and naturally you want to want them to",
    "start": "1016590",
    "end": "1023190"
  },
  {
    "text": "be consumed at a fast enough quickly enough so that the the time between the event happening at us knowing about this",
    "start": "1023190",
    "end": "1029970"
  },
  {
    "text": "you know escapes to a minimum so let's look at an actual example of this flow",
    "start": "1029970",
    "end": "1036120"
  },
  {
    "start": "1031000",
    "end": "1343000"
  },
  {
    "text": "so let's say we have a customer with a current limit of a thousand he eyes he makes the purchase of a hundred eyes a",
    "start": "1036120",
    "end": "1043079"
  },
  {
    "text": "eyes by the ways of Brazilian currency and you have an a so the amount of the",
    "start": "1043080",
    "end": "1049320"
  },
  {
    "text": "purchase one hundred has interchange is one hell and one interchange is essentially one of the ways that we make",
    "start": "1049320",
    "end": "1054480"
  },
  {
    "text": "money we get for every transaction we get a percentage of that of that purchase and this is how you know most",
    "start": "1054480",
    "end": "1061260"
  },
  {
    "text": "of credit cards in the world work we charge that in that amounts to the merchant this arrives that our",
    "start": "1061260",
    "end": "1067850"
  },
  {
    "text": "servus the wintery service and then we applying just a function of the purchase we're gonna first recognize a receivable",
    "start": "1067850",
    "end": "1074180"
  },
  {
    "text": "when a payable of a hundred eyes and then we're gonna reduce the limits under her eyes we're gonna recognize but our",
    "start": "1074180",
    "end": "1080690"
  },
  {
    "text": "revenue and then all of these the list of the entries are gonna it's a movement",
    "start": "1080690",
    "end": "1088370"
  },
  {
    "text": "and all of that is going to be transacted at once in the database so you're never going to have just one of the entries",
    "start": "1088370",
    "end": "1093680"
  },
  {
    "text": "existing at any point time so it's one atomic transaction and the final balance",
    "start": "1093680",
    "end": "1099020"
  },
  {
    "text": "is end up with you have a current limit of nine hundred its receivables of 100 pay payable of ninety nine and some",
    "start": "1099020",
    "end": "1105470"
  },
  {
    "text": "revenue of one hell and well great we finally arrived at the balances that we",
    "start": "1105470",
    "end": "1111530"
  },
  {
    "text": "wanted so if I just listen to all the events that I care about they all have these properties that uh that I",
    "start": "1111530",
    "end": "1117020"
  },
  {
    "text": "considered so it's all I can only I can always translate they events to these",
    "start": "1117020",
    "end": "1122570"
  },
  {
    "text": "movements just as a function of that event I'll eventually get to the balances that I need and can just get my",
    "start": "1122570",
    "end": "1129110"
  },
  {
    "text": "information from this service from now on and I'm sure you're thinking well yeah that's great and all but there are",
    "start": "1129110",
    "end": "1135080"
  },
  {
    "text": "so many ways this can go wrong in a distributed system and that's very much true we can't guarantee consistencies",
    "start": "1135080",
    "end": "1141410"
  },
  {
    "text": "and there are so many ways that this can go wrong in our name a few but the key",
    "start": "1141410",
    "end": "1146540"
  },
  {
    "text": "thing is that we can measure it and we would model out to measure these inconsistencies so the first thing that",
    "start": "1146540",
    "end": "1152300"
  },
  {
    "text": "can happen is well a service any other services publishing to cathica might",
    "start": "1152300",
    "end": "1157670"
  },
  {
    "text": "have some downtime I go down for any type of reason and obviously we need the tooling and the",
    "start": "1157670",
    "end": "1162770"
  },
  {
    "text": "monitoring around you know figuring out when the service is up or not any having",
    "start": "1162770",
    "end": "1168080"
  },
  {
    "text": "the tooling around you know making sure that it goes back up as soon as possible this this is just the tooling that",
    "start": "1168080",
    "end": "1174920"
  },
  {
    "text": "you're gonna need for any microt service architecture but in addition to that what we have is we have the concept of",
    "start": "1174920",
    "end": "1181820"
  },
  {
    "text": "the post h versus produced at timestamps so i know when something happened in the real world you know no one actually left",
    "start": "1181820",
    "end": "1188870"
  },
  {
    "text": "my original service so knowing that if I have for example post date that was",
    "start": "1188870",
    "end": "1194500"
  },
  {
    "text": "yesterday but the produced that it was just today I know that for some reason that purchase",
    "start": "1194500",
    "end": "1201170"
  },
  {
    "text": "took one day to be processed by may purchase system and publish so I know that there's a gap between my post date",
    "start": "1201170",
    "end": "1208580"
  },
  {
    "text": "and my produce that that created some level of inconsistency in because of the",
    "start": "1208580",
    "end": "1213950"
  },
  {
    "text": "service downtime we can have cat collab so also just like over the service",
    "start": "1213950",
    "end": "1220400"
  },
  {
    "text": "downtime you need to monitor this or you need to have the tooling around knowing when you not being able to consume all",
    "start": "1220400",
    "end": "1226160"
  },
  {
    "text": "the all the messages that are produced I mean you'd have the tooling around you know increasing partitions spinning new",
    "start": "1226160",
    "end": "1233930"
  },
  {
    "text": "instances to add parallelism for you to consume those messages but you were eventually going to have some lag and",
    "start": "1233930",
    "end": "1240200"
  },
  {
    "text": "you can measure that just by consuming the just by comparing the produced at versus consumed at timestamps of this",
    "start": "1240200",
    "end": "1247040"
  },
  {
    "text": "flow and each of these dates are actually stored within that movement entity these are the metadata part of",
    "start": "1247040",
    "end": "1253010"
  },
  {
    "text": "the metadata that was further and then lastly you have processing time it's not",
    "start": "1253010",
    "end": "1258380"
  },
  {
    "text": "enough for the our service to learn about the this event it also needs two transactions actually the database and",
    "start": "1258380",
    "end": "1266060"
  },
  {
    "text": "because any request that happens between you know me finding that out and actually transaction the database is",
    "start": "1266060",
    "end": "1271940"
  },
  {
    "text": "gonna have some stale data and I can evaluate this just by comparing to consume that with the the transaction",
    "start": "1271940",
    "end": "1279290"
  },
  {
    "text": "time to beat a transaction instance that you get by default with the atomic the atomic has a time stamp for each fact",
    "start": "1279290",
    "end": "1286370"
  },
  {
    "text": "that's asserted to the database so now well we got our numbers we've found a",
    "start": "1286370",
    "end": "1292730"
  },
  {
    "text": "way to at least know when we're in consistence and we can take action on top of that so I can if I find out that",
    "start": "1292730",
    "end": "1298790"
  },
  {
    "text": "I if I consume a message that there's a very big gap between produced at or consumed at I can let the world know I",
    "start": "1298790",
    "end": "1305180"
  },
  {
    "text": "can you know for a specific customer they had stale data for a while I can react to that or at the very least I can feed the this",
    "start": "1305180",
    "end": "1313280"
  },
  {
    "text": "data into my models and understand the reasons why I'm getting consistent data and the costs of these decisions and",
    "start": "1313280",
    "end": "1321380"
  },
  {
    "text": "this flow would be very nice but the key problem is that this approach of only",
    "start": "1321380",
    "end": "1329750"
  },
  {
    "text": "having a pure function of the event payload to create this model won't always work and as this and as soon as you start",
    "start": "1329750",
    "end": "1336830"
  },
  {
    "text": "having to look at states to create these entries then you have you know whole nother level of complexities so let me",
    "start": "1336830",
    "end": "1344270"
  },
  {
    "start": "1343000",
    "end": "1351000"
  },
  {
    "text": "just give you a very quick example of this stateful flow that we call so a flow that requires us to look at mutable",
    "start": "1344270",
    "end": "1350570"
  },
  {
    "text": "state let's look at that same customer that made a hundred eyes purchase some",
    "start": "1350570",
    "end": "1356690"
  },
  {
    "start": "1351000",
    "end": "1439000"
  },
  {
    "text": "time has passed and now he's late he didn't pay his bill on time so that a hundred has became a hundred has late",
    "start": "1356690",
    "end": "1362900"
  },
  {
    "text": "balance now Q thankfully faint makes a payment of 150 hats which which the",
    "start": "1362900",
    "end": "1373700"
  },
  {
    "text": "first thing we do is we need to amortize that debt when you reduce that late balance and immediately we see that well",
    "start": "1373700",
    "end": "1380810"
  },
  {
    "text": "I can't just reduce my late balance by 150 I can't be negative late I can't",
    "start": "1380810",
    "end": "1387890"
  },
  {
    "text": "have someone owing me a negative amount it's actually me owing them that I'm out so naturally because of the accounting",
    "start": "1387890",
    "end": "1394580"
  },
  {
    "text": "principles that we have that's not the book account that there should be you know have that balance something else",
    "start": "1394580",
    "end": "1400700"
  },
  {
    "text": "has different properties so we can't we need to look at the state for that then",
    "start": "1400700",
    "end": "1407270"
  },
  {
    "text": "we increase back the limit to one hundred eyes and then we finally assign those fifty eyes to the prepaid balance",
    "start": "1407270",
    "end": "1413150"
  },
  {
    "text": "which right should work which is where it should reside and the final balance",
    "start": "1413150",
    "end": "1418310"
  },
  {
    "text": "is that the current limits back to a thousand we have cash 150 and now the",
    "start": "1418310",
    "end": "1423320"
  },
  {
    "text": "prepaid balance of fifty and everything else didn't change so if you look at the prepaid balance final prepaid balance is",
    "start": "1423320",
    "end": "1431000"
  },
  {
    "text": "a direct function of the initial weight balance so yeah so now these are the",
    "start": "1431000",
    "end": "1441290"
  },
  {
    "text": "adapters that I'm that it's gonna go convert the events to my model they're not just a function of the payload",
    "start": "1441290",
    "end": "1447440"
  },
  {
    "text": "they're also a function of the current balances and because of that the first",
    "start": "1447440",
    "end": "1453740"
  },
  {
    "text": "thing I need to do is I need to make sure that these balances don't change during the calculation right I need to",
    "start": "1453740",
    "end": "1458750"
  },
  {
    "text": "apply some sort of lock I can do that you know in the database I can do that via cat can partition keys partition by",
    "start": "1458750",
    "end": "1466190"
  },
  {
    "text": "customer ID there's several ways can approach this the key thing is that these balances can change while you're",
    "start": "1466190",
    "end": "1474290"
  },
  {
    "text": "calculating your entries and then because of the properties of accounting",
    "start": "1474290",
    "end": "1480380"
  },
  {
    "text": "and these balances any movement in the past will affect the balances from every",
    "start": "1480380",
    "end": "1485510"
  },
  {
    "text": "day from that point forward so it's not enough for me to make sure that I didn't break anything on the dates of that",
    "start": "1485510",
    "end": "1492440"
  },
  {
    "text": "movement the business post date of that movement I need to check if I didn't break anything from that point forward",
    "start": "1492440",
    "end": "1497500"
  },
  {
    "text": "so it makes things a lot more complex and one thing that I mean we needed to",
    "start": "1497500",
    "end": "1504440"
  },
  {
    "text": "make sure is that when you can't allow for our data to be corrupted because of ordering of events essentially we need",
    "start": "1504440",
    "end": "1511400"
  },
  {
    "text": "to be able to guarantee all the properties that the pure function of the payload flow the ideal flow had we need",
    "start": "1511400",
    "end": "1518600"
  },
  {
    "text": "to guarantee those same properties when we look at state so the first four the first two problems I mean they're",
    "start": "1518600",
    "end": "1525710"
  },
  {
    "text": "annoying but there are ways to work around them for the second two I think it's more interesting to talk about we",
    "start": "1525710",
    "end": "1532280"
  },
  {
    "text": "started using invariants so what are invariants in various are essentially",
    "start": "1532280",
    "end": "1537490"
  },
  {
    "start": "1535000",
    "end": "1590000"
  },
  {
    "text": "properties that should hold true at all times and when we talk about accounting",
    "start": "1537490",
    "end": "1543800"
  },
  {
    "text": "essentially these properties have to do with the balances on each book account so some balances balances can't coexist",
    "start": "1543800",
    "end": "1549770"
  },
  {
    "text": "I can't be both late and prepaid someone can't owe me money while I at the same",
    "start": "1549770",
    "end": "1556430"
  },
  {
    "text": "time old them money some balances can't be negative so I can't have a negative",
    "start": "1556430",
    "end": "1561740"
  },
  {
    "text": "cash balance it makes the does it make sense also some balances can't be positive so",
    "start": "1561740",
    "end": "1568010"
  },
  {
    "text": "I can't have a revenue of credit loss and because we're using generally",
    "start": "1568010",
    "end": "1574250"
  },
  {
    "text": "accepted accounting principles these aren't a matter of opinion either I can",
    "start": "1574250",
    "end": "1579470"
  },
  {
    "text": "just look up what a balance and what the properties of what a book account should look like and just mimic that and",
    "start": "1579470",
    "end": "1586760"
  },
  {
    "text": "establish those properties explicitly so let's look at this state fulfill what it",
    "start": "1586760",
    "end": "1593120"
  },
  {
    "start": "1590000",
    "end": "1801000"
  },
  {
    "text": "looks like and how did we manage the stateful flow to be very very similar to",
    "start": "1593120",
    "end": "1598880"
  },
  {
    "text": "the original flow the same properties as the ideal flow so let's get that initial balance of 100",
    "start": "1598880",
    "end": "1604610"
  },
  {
    "text": "pies let's not worry about the the current limits for this example just to keep things simple we still have the cat",
    "start": "1604610",
    "end": "1611960"
  },
  {
    "text": "cat topics still have the event but now the way I'm going to convert that it's",
    "start": "1611960",
    "end": "1617630"
  },
  {
    "text": "not just a function of the payload it's also a function of the database and that when I say it's a function of the",
    "start": "1617630",
    "end": "1623570"
  },
  {
    "text": "database at new bank we explicitly pass the database as arguments through every function called that it's going to",
    "start": "1623570",
    "end": "1629630"
  },
  {
    "text": "access it and we essentially pass in this time stamped immutable version of",
    "start": "1629630",
    "end": "1637160"
  },
  {
    "text": "the database and with a Tomic it's really cool because if I know my function call if I know the arguments",
    "start": "1637160",
    "end": "1643370"
  },
  {
    "text": "and my database is immutable you know I know when I call that function I get this very nice time series debugging",
    "start": "1643370",
    "end": "1650059"
  },
  {
    "text": "property that I can always recreate that states and understand why something broke so before we actually pass on our",
    "start": "1650059",
    "end": "1657559"
  },
  {
    "text": "database as an argument to that function I'm gonna first check the databases invalid state because if it's no already",
    "start": "1657559",
    "end": "1663620"
  },
  {
    "text": "in an invalid state it should stop right there Vedas corrupted need a migration I",
    "start": "1663620",
    "end": "1669530"
  },
  {
    "text": "need to fix this somehow but if it's okay I pass that on then I'm gonna",
    "start": "1669530",
    "end": "1675410"
  },
  {
    "text": "create my movement and with one entry and the entry here I'm gonna create it's",
    "start": "1675410",
    "end": "1681530"
  },
  {
    "text": "gonna be removing taking money 150 guys from late and putting it to cash and",
    "start": "1681530",
    "end": "1688750"
  },
  {
    "text": "then I check and I essentially with the atomic one one of the cool things we can",
    "start": "1688750",
    "end": "1694250"
  },
  {
    "text": "also do is we can have this in memory a fake version of database that pretends to transact things so I can just do a",
    "start": "1694250",
    "end": "1703000"
  },
  {
    "text": "pass on this database with pretended that I actually transacted this movement what does this database look like and I",
    "start": "1703000",
    "end": "1710210"
  },
  {
    "text": "can fetch that new database this in memory No exploratory database and use that put",
    "start": "1710210",
    "end": "1717080"
  },
  {
    "text": "that in as an argument to my functions and check is this database valid now and",
    "start": "1717080",
    "end": "1722620"
  },
  {
    "text": "we know that it's not there are invariant violations on the violation",
    "start": "1722620",
    "end": "1728330"
  },
  {
    "text": "here is that I'm gonna have a negative balance I'm taking 150 eyes from this late balance so I'm gonna get a negative",
    "start": "1728330",
    "end": "1734720"
  },
  {
    "text": "balance version I get these violations and I applied them to a function that's gonna try to",
    "start": "1734720",
    "end": "1740660"
  },
  {
    "text": "fix it and the way we fix it is essentially by adding more entries to that movement and the way so we add this",
    "start": "1740660",
    "end": "1749179"
  },
  {
    "text": "new entry of moving money from increasing prepaid and increasing late and we call these new entries",
    "start": "1749179",
    "end": "1755900"
  },
  {
    "text": "Corrections and then we use this movement and again plug that into the",
    "start": "1755900",
    "end": "1761360"
  },
  {
    "text": "the check which you plug that into this like fake database in memory exploratory",
    "start": "1761360",
    "end": "1767210"
  },
  {
    "text": "database and we check again are there any other violations if there are other violations I'll keep that loop for I",
    "start": "1767210",
    "end": "1773809"
  },
  {
    "text": "don't know 20 tries and if I can't fix it I'll throw an exception but if I can't fix it I'm gonna transact that to",
    "start": "1773809",
    "end": "1781010"
  },
  {
    "text": "the database and then I end up you know after the correction I end up with the",
    "start": "1781010",
    "end": "1786710"
  },
  {
    "text": "final correct state so by doing all of this it's a way that I can guarantee the",
    "start": "1786710",
    "end": "1792980"
  },
  {
    "text": "same properties the same original properties that that ideal flow of the pure function had obviously there was",
    "start": "1792980",
    "end": "1802610"
  },
  {
    "start": "1801000",
    "end": "1806000"
  },
  {
    "text": "some a lot of challenges getting this to prod and actually using this so the first one the most important one is that",
    "start": "1802610",
    "end": "1810669"
  },
  {
    "start": "1806000",
    "end": "1831000"
  },
  {
    "text": "this fixing variant logic is extremely complex so figuring out all the",
    "start": "1810669",
    "end": "1819110"
  },
  {
    "text": "invariants that we needed to define and especially the find ways were fixing these violations in ways that it",
    "start": "1819110",
    "end": "1825169"
  },
  {
    "text": "wouldn't introduce new violations was very hard so I took a long time for us to figure this out we quickly realized",
    "start": "1825169",
    "end": "1833720"
  },
  {
    "text": "that bugs and other services would generate incorrect entries or it could you know could affect our database and",
    "start": "1833720",
    "end": "1839270"
  },
  {
    "text": "we need to find ways to to monitor that and the tooling around fixing any problems that we had they Tomic is great",
    "start": "1839270",
    "end": "1846679"
  },
  {
    "text": "we love the atomic we love the way deals with this audit trail we love how we use",
    "start": "1846679",
    "end": "1852260"
  },
  {
    "text": "it to explore data to pretend that we had transactions in check the database is valid we love everything about it",
    "start": "1852260",
    "end": "1858140"
  },
  {
    "text": "saved us over and over again but the Atomics indexing is really only tested",
    "start": "1858140",
    "end": "1864409"
  },
  {
    "text": "until 10 billion fats and after that amount of data you're gonna get you know",
    "start": "1864409",
    "end": "1869600"
  },
  {
    "text": "indexing slows down you're gonna get some back pressure your transaction time you know transacting database",
    "start": "1869600",
    "end": "1877100"
  },
  {
    "text": "transactions gonna take more time you're gonna build lag and not gonna have the throughput needed to really continue",
    "start": "1877100",
    "end": "1883100"
  },
  {
    "text": "using the database so we need to keep it small and atomic isn't the best option",
    "start": "1883100",
    "end": "1889880"
  },
  {
    "text": "for analytical workload so this model this transactional model immutable model is not the best for analytical work",
    "start": "1889880",
    "end": "1897110"
  },
  {
    "text": "workload especially when you're dealing with aggregates but we you know thankfully if we found ways around each",
    "start": "1897110",
    "end": "1904280"
  },
  {
    "text": "of these challenges so the first one to fix to figure out this this complexity of all these invariant violations and",
    "start": "1904280",
    "end": "1912200"
  },
  {
    "start": "1905000",
    "end": "2119000"
  },
  {
    "text": "how to fix them we started using generative testing for those of you who don't know genetic testing is instead of",
    "start": "1912200",
    "end": "1918200"
  },
  {
    "text": "in you might know as property based testing as well is instead of me explicitly saying what the input to a",
    "start": "1918200",
    "end": "1926390"
  },
  {
    "text": "function what the expected output of that function would look like I'll just write a function that describes a",
    "start": "1926390",
    "end": "1932720"
  },
  {
    "text": "property that should always hold true and as you can imagine these properties",
    "start": "1932720",
    "end": "1938390"
  },
  {
    "text": "that should always hold true are the same properties that we want to guarantee in prod there's a very nice way for mapping the the way you actually",
    "start": "1938390",
    "end": "1945860"
  },
  {
    "text": "create these generative tests and since you don't care about is since this",
    "start": "1945860",
    "end": "1952010"
  },
  {
    "text": "property should hold true at all at all times you don't really care about the input so you can actually just generate",
    "start": "1952010",
    "end": "1959690"
  },
  {
    "text": "random input apply that and just make sure that after you just throw a bunch of randomly generated input the",
    "start": "1959690",
    "end": "1965840"
  },
  {
    "text": "property's still true so we had these random we have these generators that",
    "start": "1965840",
    "end": "1971720"
  },
  {
    "text": "generate from our schemas these events with random numbers random orderings and so on random dates and the one thing",
    "start": "1971720",
    "end": "1980270"
  },
  {
    "text": "that we we took away from this process is that we should embed the least amount of domain logic assumptions into the",
    "start": "1980270",
    "end": "1986990"
  },
  {
    "text": "generative test because with a distributed system all your assumptions",
    "start": "1986990",
    "end": "1992270"
  },
  {
    "text": "of what your business look looks like just go out the door one example that we",
    "start": "1992270",
    "end": "1997280"
  },
  {
    "text": "always used to say and if we were very wrong when we said it was you're never gonna have a purchase cancellation",
    "start": "1997280",
    "end": "2003490"
  },
  {
    "text": "before you actually have the purchase well if you have a distributed system and your purchase cancellation service",
    "start": "2003490",
    "end": "2010299"
  },
  {
    "text": "is a separate service from your your purchase recognition service you might actually find out about the cancellation",
    "start": "2010299",
    "end": "2015520"
  },
  {
    "text": "before you find out about the purchase and if you embed that assumption into",
    "start": "2015520",
    "end": "2021669"
  },
  {
    "text": "your testing you're not going to be exploring all the chaos that can arise with all these things that can happen in",
    "start": "2021669",
    "end": "2027250"
  },
  {
    "text": "ways that you've never expected so yeah we found this the hard way so this is",
    "start": "2027250",
    "end": "2034149"
  },
  {
    "text": "enclosure this is what the generative testing looks like yeah a lot of",
    "start": "2034149",
    "end": "2040480"
  },
  {
    "text": "parenthesis closure is like that but you can just see that essentially for all",
    "start": "2040480",
    "end": "2046360"
  },
  {
    "text": "inputs and in this case the inputs are one account so the customer accounts in",
    "start": "2046360",
    "end": "2052148"
  },
  {
    "text": "a list of events and these events are just randomly generated in this case just purchases and payments so a list of",
    "start": "2052149",
    "end": "2058868"
  },
  {
    "text": "purchases and payments I'm gonna make sure that the function and the function",
    "start": "2058869",
    "end": "2064510"
  },
  {
    "text": "is I'm gonna get my database they Tomic I'm gonna save all consume all these",
    "start": "2064510",
    "end": "2070530"
  },
  {
    "text": "these events and the accounts save them to the database get what the database look like after I transact those",
    "start": "2070530",
    "end": "2077589"
  },
  {
    "text": "entities and then check if the property that I care about so with invariant I'm",
    "start": "2077589",
    "end": "2082868"
  },
  {
    "text": "looking at is still true in this case the properties the balances are positive so you can run you know a quick check of",
    "start": "2082869",
    "end": "2089260"
  },
  {
    "text": "five hundred trials so I can you know even add more than that and make sure",
    "start": "2089260",
    "end": "2094839"
  },
  {
    "text": "that that very never broke with all that randomly generated an input if it didn't",
    "start": "2094839",
    "end": "2099940"
  },
  {
    "text": "break great result is true but if it did break it's gonna return to me a minimal case that when that property broke and I",
    "start": "2099940",
    "end": "2108609"
  },
  {
    "text": "can look at it and understand how my fixing violations logic went wrong and",
    "start": "2108609",
    "end": "2114520"
  },
  {
    "text": "iterate on that to make sure that that property will always will true so for",
    "start": "2114520",
    "end": "2121680"
  },
  {
    "start": "2119000",
    "end": "2250000"
  },
  {
    "text": "monitoring and you know figuring out how other services will interact with with this double-entry service we needed to",
    "start": "2121680",
    "end": "2127810"
  },
  {
    "text": "create this monitoring and replay history tooling so the first thing that we need to do to we cared about is that",
    "start": "2127810",
    "end": "2133390"
  },
  {
    "text": "we need to make sure that we Pat didn't have any events that were missing and this is you know essentially",
    "start": "2133390",
    "end": "2140540"
  },
  {
    "text": "a batch job that were a big query that would make sure that every event before",
    "start": "2140540",
    "end": "2145820"
  },
  {
    "text": "a certain point in time in all the other databases were recognized in my double",
    "start": "2145820",
    "end": "2151670"
  },
  {
    "text": "entry service so yeah we just run essentially a query for that if all the",
    "start": "2151670",
    "end": "2160220"
  },
  {
    "text": "events are there great if they're not I need to find a way to republish these events so essentially all the services",
    "start": "2160220",
    "end": "2167330"
  },
  {
    "text": "have endpoints to replay all the messages that it did produce or it",
    "start": "2167330",
    "end": "2173000"
  },
  {
    "text": "should have produced the nice thing about this is that with the atomic I can actually reproduce that message with the",
    "start": "2173000",
    "end": "2179810"
  },
  {
    "text": "exact payload and metadata as it went out the first time because it can always Traverse back in time and look at what",
    "start": "2179810",
    "end": "2186530"
  },
  {
    "text": "that entity looked like at that point in time and just recreate that event with the same metadata and payload so I'm",
    "start": "2186530",
    "end": "2193520"
  },
  {
    "text": "never actually losing information and then we you know the other problem that",
    "start": "2193520",
    "end": "2200240"
  },
  {
    "text": "we had is that if the database is actually ever corrupted and you'll find a way to erase it and start over and the",
    "start": "2200240",
    "end": "2206750"
  },
  {
    "text": "nice thing about this is that we have this endpoint that retract to all entries so essentially reset the business timeline but we don't reset the",
    "start": "2206750",
    "end": "2214640"
  },
  {
    "text": "database timeline which means that if I have a corrupted database and I want to",
    "start": "2214640",
    "end": "2219950"
  },
  {
    "text": "you know make sure that it stopped that I'll retract all the entries from this point back republish all the events",
    "start": "2219950",
    "end": "2227420"
  },
  {
    "text": "recreate the new new new database but the fact that at one point in time the",
    "start": "2227420",
    "end": "2232640"
  },
  {
    "text": "state of bases had corrupted incorrect entries is not lost on me I can always Traverse back in history and look at",
    "start": "2232640",
    "end": "2237920"
  },
  {
    "text": "that database before that retraction and see those entries are still there so the nice thing about this is that I don't no",
    "start": "2237920",
    "end": "2243710"
  },
  {
    "text": "longer need to choose between having having an audit trail and having data that's easy to work with easy to to get",
    "start": "2243710",
    "end": "2249590"
  },
  {
    "text": "your head around well the problem with the atomic we need to keep it small so",
    "start": "2249590",
    "end": "2254630"
  },
  {
    "start": "2250000",
    "end": "2332000"
  },
  {
    "text": "we started shouting by customer and we need to make sure that we could shard",
    "start": "2254630",
    "end": "2260540"
  },
  {
    "text": "the database by customer and the easy thing about this is still to make sure that we no had no entries that was we're",
    "start": "2260540",
    "end": "2266180"
  },
  {
    "text": "moving money around book accounts owned by different customers because it was just very hard to shard",
    "start": "2266180",
    "end": "2271470"
  },
  {
    "text": "if we did if we did it so any peer to peer interaction is just going to be to",
    "start": "2271470",
    "end": "2276509"
  },
  {
    "text": "other events instead instead of just one moving money between the two so we did that from the beginning very easy to",
    "start": "2276509",
    "end": "2282329"
  },
  {
    "text": "shop by customer you can chart you could even have one database per customer if you wanted but even if you had this one",
    "start": "2282329",
    "end": "2288390"
  },
  {
    "text": "database per customer as time goes by is still the database is going to grow to infinity because well he's always adding",
    "start": "2288390",
    "end": "2294059"
  },
  {
    "text": "more data to that hopefully transacting you a lot of money and paying back to us so we also need to shard by time and",
    "start": "2294059",
    "end": "2301220"
  },
  {
    "text": "with accounting we have a very nice way of representing the previous database and the end state of the previous",
    "start": "2301220",
    "end": "2307410"
  },
  {
    "text": "database just the final balances for every book account so the final balances for the previous time shard is the",
    "start": "2307410",
    "end": "2313559"
  },
  {
    "text": "initial balances for your time shard from there on out and because it's it's",
    "start": "2313559",
    "end": "2318749"
  },
  {
    "text": "easy and necessary we were sharding our databases by time fairly often so every couple of months",
    "start": "2318749",
    "end": "2323970"
  },
  {
    "text": "we're always charting it and to keep it small keep a very very small working set",
    "start": "2323970",
    "end": "2329700"
  },
  {
    "text": "for performance purposes for analytical",
    "start": "2329700",
    "end": "2334920"
  },
  {
    "start": "2332000",
    "end": "2388000"
  },
  {
    "text": "workload we actually had we came up with an ETL solution so we essentially we get",
    "start": "2334920",
    "end": "2341430"
  },
  {
    "text": "the immutable data immutable logs from date from the atomic we extract those",
    "start": "2341430",
    "end": "2347670"
  },
  {
    "text": "logs save them on s3 pivot them to tables because tables are easier and",
    "start": "2347670",
    "end": "2353489"
  },
  {
    "text": "better for analytical workload with spark save those tables on us three then",
    "start": "2353489",
    "end": "2358559"
  },
  {
    "text": "we apply functions and generate the balances and not just that we can actually retrieve metadata from all the",
    "start": "2358559",
    "end": "2365190"
  },
  {
    "text": "other services because we have them stored in the service so retrieve that metadata create new tables first to map",
    "start": "2365190",
    "end": "2371009"
  },
  {
    "text": "out all the entries how they relate to to the original services metadata also with spark and then we load them up to",
    "start": "2371009",
    "end": "2377339"
  },
  {
    "text": "redshift and let redshift do its magic we also make it accessible through meta",
    "start": "2377339",
    "end": "2382769"
  },
  {
    "text": "base which is a bi tool for easier access for the data so the result is",
    "start": "2382769",
    "end": "2389730"
  },
  {
    "start": "2388000",
    "end": "2423000"
  },
  {
    "text": "that we have this real-time balance sheet per customer with a lot of",
    "start": "2389730",
    "end": "2396390"
  },
  {
    "text": "metadata that you can essentially you know have a very clear view of how each customer or each group across",
    "start": "2396390",
    "end": "2402780"
  },
  {
    "text": "is affecting your business if you look up there you're gonna see balance sheets",
    "start": "2402780",
    "end": "2409170"
  },
  {
    "text": "per user in the middle are gonna see aggregates Purdue day and download by",
    "start": "2409170",
    "end": "2414210"
  },
  {
    "text": "creation month so when we started we open the account for the customer understand how each of these groups",
    "start": "2414210",
    "end": "2420450"
  },
  {
    "text": "interact in different way and when we end up with two timelines we have the",
    "start": "2420450",
    "end": "2426960"
  },
  {
    "start": "2423000",
    "end": "2475000"
  },
  {
    "text": "first timelines the actual database timeline so what did we know at which point in time and if you look at a",
    "start": "2426960",
    "end": "2434700"
  },
  {
    "text": "specific point in time we also have the business timeline which is the you know",
    "start": "2434700",
    "end": "2440220"
  },
  {
    "text": "business relevant official version of what what the world looked like in our opinion at that point in time and it's",
    "start": "2440220",
    "end": "2446850"
  },
  {
    "text": "it's also feeds into our modeling because it doesn't really matter what we",
    "start": "2446850",
    "end": "2453030"
  },
  {
    "text": "know or what we eventually found out knowing the gap between you know what we",
    "start": "2453030",
    "end": "2458730"
  },
  {
    "text": "think now and what we thought when we actually make the decision this is very important very important in key to map",
    "start": "2458730",
    "end": "2465210"
  },
  {
    "text": "out in your in our machine learning models so this really as a whole layer of power and audit trail capacities to",
    "start": "2465210",
    "end": "2472470"
  },
  {
    "text": "this service so what we like about this is that well we finally were capable",
    "start": "2472470",
    "end": "2478800"
  },
  {
    "text": "creating these canonical definitions of our most important numbers we now have",
    "start": "2478800",
    "end": "2485190"
  },
  {
    "text": "financial analysis applied at the customer level and in real time we have",
    "start": "2485190",
    "end": "2490770"
  },
  {
    "text": "this consistency traceability so we can take action on the inconsistencies if you want to or at the very least you can",
    "start": "2490770",
    "end": "2497070"
  },
  {
    "text": "price how that's affecting our business these invariants that we created provide",
    "start": "2497070",
    "end": "2502350"
  },
  {
    "text": "a whole set of safety nets for our business make sure that everything's",
    "start": "2502350",
    "end": "2508080"
  },
  {
    "text": "consistent everything makes sense incorrect invalid generative tests finds",
    "start": "2508080",
    "end": "2513300"
  },
  {
    "text": "real bugs in ways that no other tool that I know of can find which is so it's",
    "start": "2513300",
    "end": "2518490"
  },
  {
    "text": "super powerful I highly recommend anyone working in distributed systems to start doing some kind of generative tests and",
    "start": "2518490",
    "end": "2525150"
  },
  {
    "text": "you fall in love with it I'm sure when we have this ability to replay history",
    "start": "2525150",
    "end": "2530880"
  },
  {
    "text": "without losing data so you don't need to choose between audit trails and data that you can get your head around",
    "start": "2530880",
    "end": "2536610"
  },
  {
    "text": "so that's very very nice Sharda buh-bye customer and buy time so it's scalable",
    "start": "2536610",
    "end": "2542610"
  },
  {
    "text": "and it's also extensible to other financial products and the good thing",
    "start": "2542610",
    "end": "2548400"
  },
  {
    "text": "about this is that not all financial products actually required the staple flow you can get away with the pure",
    "start": "2548400",
    "end": "2555330"
  },
  {
    "text": "function of the event flow which makes think makes things a lot easier and this",
    "start": "2555330",
    "end": "2561330"
  },
  {
    "start": "2560000",
    "end": "3215000"
  },
  {
    "text": "is all I have for you guys today thank you very much and any questions sorry in",
    "start": "2561330",
    "end": "2577350"
  },
  {
    "text": "which way so so the ETL part of our",
    "start": "2577350",
    "end": "2586440"
  },
  {
    "text": "system that I'm probably not the best person to talk about it's our data infrared works that deals with that so",
    "start": "2586440",
    "end": "2593130"
  },
  {
    "text": "maybe I can I can give you the information for that and we can talk to them so yes I'm sure you can do this",
    "start": "2593130",
    "end": "2607890"
  },
  {
    "text": "with other databases we like the atomic I we like immutability in general we",
    "start": "2607890",
    "end": "2613500"
  },
  {
    "text": "think it's very easy to get your head around it's a lot easier to handle the",
    "start": "2613500",
    "end": "2619710"
  },
  {
    "text": "complexities of domains and how things can interact have it also adds this",
    "start": "2619710",
    "end": "2624960"
  },
  {
    "text": "embedded audit trail by default so you don't need to worry about you know making mistakes we think it's very hard",
    "start": "2624960",
    "end": "2630990"
  },
  {
    "text": "for you to have this replay history property have this without some sort of",
    "start": "2630990",
    "end": "2637020"
  },
  {
    "text": "immutable database but I'm sure there are ways we can still get that with other databases as well we just just",
    "start": "2637020",
    "end": "2643950"
  },
  {
    "text": "like the atomic did that from you know by default",
    "start": "2643950",
    "end": "2648170"
  },
  {
    "text": "I'm sorry to hear that",
    "start": "2653069",
    "end": "2656970"
  },
  {
    "text": "yeah",
    "start": "2669569",
    "end": "2672569"
  },
  {
    "text": "so yeah we're going for the asset transaction in the situation we don't want the database to ever be in a state",
    "start": "2681390",
    "end": "2689620"
  },
  {
    "text": "that creates an invalid somehow is I don't actually ever want the database to",
    "start": "2689620",
    "end": "2696130"
  },
  {
    "text": "be in breaking any violations at any point in time so if I just prevent the",
    "start": "2696130",
    "end": "2701500"
  },
  {
    "text": "transaction to happen before and make sure that I fix before actually transacting I can't see that always my",
    "start": "2701500",
    "end": "2707710"
  },
  {
    "text": "database will not be breaking those those violations yeah right so fight I",
    "start": "2707710",
    "end": "2716400"
  },
  {
    "text": "ever only persist valid events then you",
    "start": "2716400",
    "end": "2723820"
  },
  {
    "text": "have an exception and it's gonna be a dead letter that on Kafka we need to mainly understand why that there was a",
    "start": "2723820",
    "end": "2731350"
  },
  {
    "text": "you know inconsistency there and why we're creating this invalid state and usually I mean after you come we get to",
    "start": "2731350",
    "end": "2740100"
  },
  {
    "text": "stable in prod and we figure out you know with generative tests all the",
    "start": "2740100",
    "end": "2746080"
  },
  {
    "text": "violations that we can have and how to fix them you know we're not breaking anything else we shouldn't have that",
    "start": "2746080",
    "end": "2751480"
  },
  {
    "text": "but until then essentially we get manual input first to analyze and create new",
    "start": "2751480",
    "end": "2756580"
  },
  {
    "text": "rules so that I can just replay the same message and then finally convert to a valid state",
    "start": "2756580",
    "end": "2764070"
  },
  {
    "text": "well there's a finite yeah it's I mean",
    "start": "2773440",
    "end": "2779089"
  },
  {
    "text": "it there are dangers to that yes but not",
    "start": "2779089",
    "end": "2784549"
  },
  {
    "text": "having played out a big problem yet",
    "start": "2784549",
    "end": "2789849"
  },
  {
    "text": "of generative test runs that we do so when we introduce new invariants and in violation logic we we run thousands and",
    "start": "2803160",
    "end": "2810930"
  },
  {
    "text": "thousands of thousands of runs for four that says to actually get through the pipeline we're gonna do hundred runs",
    "start": "2810930",
    "end": "2819320"
  },
  {
    "text": "usually hundreds in the of runs to make sure that it's okay the key thing is",
    "start": "2819320",
    "end": "2825000"
  },
  {
    "text": "that once you're actually introducing new code and new logic we want to stress that and we actually run I don't like",
    "start": "2825000",
    "end": "2831600"
  },
  {
    "text": "five thousand ten thousand times",
    "start": "2831600",
    "end": "2835970"
  },
  {
    "text": "we not yet we didn't really I mean there",
    "start": "2848000",
    "end": "2855870"
  },
  {
    "text": "are concerns and I guess the the thing is like we we don't have too many events per second for the same customer the the",
    "start": "2855870",
    "end": "2864540"
  },
  {
    "text": "level of number of events that we have the the frequency of these events are",
    "start": "2864540",
    "end": "2870450"
  },
  {
    "text": "not huge as in for example algo trading or anything like that",
    "start": "2870450",
    "end": "2875550"
  },
  {
    "text": "so we you know it's actually we gonna have purchases that aren't going to happen you know once or twice three",
    "start": "2875550",
    "end": "2882090"
  },
  {
    "text": "times a day for the same customer so that level of possible inconsistencies",
    "start": "2882090",
    "end": "2887990"
  },
  {
    "text": "will not be super significant for the business logic you can just you know",
    "start": "2887990",
    "end": "2893190"
  },
  {
    "text": "okay I really only care about you know every second it should be correct you know every that that that's the level of",
    "start": "2893190",
    "end": "2901320"
  },
  {
    "text": "correctness that we really care about today if we apply this to probably",
    "start": "2901320",
    "end": "2906630"
  },
  {
    "text": "anything that has more events more frequent events then definitely something that we need be concerned",
    "start": "2906630",
    "end": "2913609"
  },
  {
    "text": "yeah well for that I think we the way we'd handle that is just making sure",
    "start": "2922700",
    "end": "2929030"
  },
  {
    "text": "that we have this immutable infrastructure that we're just spinning with configures code we're spinning new",
    "start": "2929030",
    "end": "2934940"
  },
  {
    "text": "services always with the same configuration and we're never gonna be updating reconfiguring our system and it",
    "start": "2934940",
    "end": "2941780"
  },
  {
    "text": "can essentially through that gap guarantee that I'm gonna have this same",
    "start": "2941780",
    "end": "2948440"
  },
  {
    "text": "version of all my services up and running with the same you know configurations and since we're deploying",
    "start": "2948440",
    "end": "2955160"
  },
  {
    "text": "a lot usually the the same instance won't really be there for more than I",
    "start": "2955160",
    "end": "2961040"
  },
  {
    "text": "don't know one day or two it's very hard to get in a weird state like that",
    "start": "2961040",
    "end": "2967690"
  },
  {
    "text": "usually when we actually have these random way in the past numbers is",
    "start": "2967690",
    "end": "2973100"
  },
  {
    "text": "actually customer service agents making incorrect input for the post dates and",
    "start": "2973100",
    "end": "2978110"
  },
  {
    "text": "we figured that out with also looking at the data and saying well this broke some invariance because now we need to",
    "start": "2978110",
    "end": "2983150"
  },
  {
    "text": "recalculate all these numbers or have all these entries that essentially rewrote history while that's strange we",
    "start": "2983150",
    "end": "2989630"
  },
  {
    "text": "can look at that",
    "start": "2989630",
    "end": "2992170"
  },
  {
    "text": "it's so we get it's a it's a unique database per shard it's and it's going",
    "start": "2998850",
    "end": "3006750"
  },
  {
    "text": "to be available to essentially yeah you're gonna have one database one service that's gonna be accessing",
    "start": "3006750",
    "end": "3014160"
  },
  {
    "text": "many databases one per charter customer but each database is essentially just one transact or one instance of that",
    "start": "3014160",
    "end": "3021180"
  },
  {
    "text": "database yeah so we do end up because",
    "start": "3021180",
    "end": "3035580"
  },
  {
    "text": "I'm I'm now getting some data from the database and modifying those balances we have this optimistic lock strategy with",
    "start": "3035580",
    "end": "3044130"
  },
  {
    "text": "the atomic I can the atomic is actually single threaded but the way that's one",
    "start": "3044130",
    "end": "3049200"
  },
  {
    "text": "of the ways that he's doing the acid part of the transaction we so we",
    "start": "3049200",
    "end": "3055200"
  },
  {
    "text": "essentially should say these balances these this accounts that I'm consuming today at this point in time he can't",
    "start": "3055200",
    "end": "3062910"
  },
  {
    "text": "have changed can't have a different balance from the point I started to the point I'm actually transacting and when",
    "start": "3062910",
    "end": "3069840"
  },
  {
    "text": "I'm actually checking that I'm checking that within the trans actor which is a single threaded process they're carrying",
    "start": "3069840",
    "end": "3075390"
  },
  {
    "text": "can guarantee that you know if if nothing changed I can just can con transact and if changed I need to",
    "start": "3075390",
    "end": "3081450"
  },
  {
    "text": "recalculate everything again and start from from scratch another thing that helps is because are we're we don't have",
    "start": "3081450",
    "end": "3090030"
  },
  {
    "text": "any cross customer entries I can actually use cafe partition keys to make",
    "start": "3090030",
    "end": "3095550"
  },
  {
    "text": "sure that for the same customer the same thread is gonna be picked up because it's gonna be partition by customer ID",
    "start": "3095550",
    "end": "3101400"
  },
  {
    "text": "so that's also another layer of a safe see that we get with with that",
    "start": "3101400",
    "end": "3109280"
  },
  {
    "text": "mm-hmm",
    "start": "3115020",
    "end": "3118020"
  },
  {
    "text": "so the out-of-order events well how do they happen so they happen because other",
    "start": "3121800",
    "end": "3128470"
  },
  {
    "text": "services are publishing messages in so one of the ways it happens is because",
    "start": "3128470",
    "end": "3133869"
  },
  {
    "text": "we're plugged into other financial systems of record so for example one of",
    "start": "3133869",
    "end": "3139750"
  },
  {
    "text": "the ways that we recognize payments is that I'm gonna communicate with a bank that's gonna recognize the payments in",
    "start": "3139750",
    "end": "3146859"
  },
  {
    "text": "the you know in our in our system and this Bank is gonna let us know like oh this payment happened and since I",
    "start": "3146859",
    "end": "3155589"
  },
  {
    "text": "actually pay Minh didn't come from me the dependent came from the outside world and maybe he won't just won't send",
    "start": "3155589",
    "end": "3162460"
  },
  {
    "text": "me a batch of these payments for some bug on their system and on the purchase side I deal with MasterCard and that",
    "start": "3162460",
    "end": "3169839"
  },
  {
    "text": "they can also do the same kind of kinds of things so if all the events were",
    "start": "3169839",
    "end": "3174849"
  },
  {
    "text": "originated actually in our system then we could have stronger ordering guarantees which can be more consistent",
    "start": "3174849",
    "end": "3180220"
  },
  {
    "text": "with that but we don't and actually what the terrible thing is that all payments",
    "start": "3180220",
    "end": "3185280"
  },
  {
    "text": "in Brazil the way your work actually happened in the past I always find out about them yeah one business day after",
    "start": "3185280",
    "end": "3193540"
  },
  {
    "text": "they actually happened and sometimes more depending on how the guy actually paid made the payment so ordering is not",
    "start": "3193540",
    "end": "3199780"
  },
  {
    "text": "there's no way for me to guarantee ordering the way we operate today now fortunately anything else thank you very",
    "start": "3199780",
    "end": "3212079"
  },
  {
    "text": "much [Applause]",
    "start": "3212079",
    "end": "3217239"
  }
]