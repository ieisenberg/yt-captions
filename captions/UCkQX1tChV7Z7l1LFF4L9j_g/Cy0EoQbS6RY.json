[
  {
    "text": "it was 2014 when I joined Airbnb the engineering was a lot smaller than about",
    "start": "3889",
    "end": "10400"
  },
  {
    "text": "90 people small enough to fit on one side of one floor and one building",
    "start": "10400",
    "end": "16030"
  },
  {
    "text": "during my first week there I heard the sound of a gong amid throughout the hallways I then saw engineers scrambling",
    "start": "16030",
    "end": "23810"
  },
  {
    "text": "towards their desks it turns out we hit the gong whenever the site went down",
    "start": "23810",
    "end": "29680"
  },
  {
    "text": "because a majority of our engineers at the time were working in our monolithic application they wanted to help debug",
    "start": "30220",
    "end": "36500"
  },
  {
    "text": "this incident now in 2018 just four years later we have over a thousand",
    "start": "36500",
    "end": "43100"
  },
  {
    "text": "engineers at Airbnb we spread across multiple floors buildings and cities my",
    "start": "43100",
    "end": "49910"
  },
  {
    "text": "name is Jessica and I am an X monolith engineer I currently work on our core",
    "start": "49910",
    "end": "60770"
  },
  {
    "text": "services team building out the infrastructure for our migration I'll be discussing how Airbnb managed to grow",
    "start": "60770",
    "end": "67009"
  },
  {
    "text": "its team by over 10x in the past four years by redesigning its technical architecture I'll begin with describing",
    "start": "67009",
    "end": "75770"
  },
  {
    "text": "how our life was with the monolith and then go into how we experienced growing pains as our engineering team expanded",
    "start": "75770",
    "end": "83500"
  },
  {
    "text": "I'll cover some of the service design principles we wanted to have with creating services and then how we began",
    "start": "83500",
    "end": "91130"
  },
  {
    "text": "migrating I'll end with some of the best practices we developed along the way and",
    "start": "91130",
    "end": "97900"
  },
  {
    "text": "share some of the results we've had so far our Ruby on Rails monolith is known",
    "start": "97900",
    "end": "106130"
  },
  {
    "text": "as monorail a monolith is a single tier unit that's responsible for both",
    "start": "106130",
    "end": "112310"
  },
  {
    "text": "server-side and client-side functionality this means that the Model View and controller layers are together",
    "start": "112310",
    "end": "118549"
  },
  {
    "text": "in a single repository and monoliths are really easy to get started with they're",
    "start": "118549",
    "end": "125600"
  },
  {
    "text": "a great place for small teams to start and iterate quickly there's a client",
    "start": "125600",
    "end": "131730"
  },
  {
    "text": "that would make a call to the monolithic application and I would call the database directly in 2014 one of my new",
    "start": "131730",
    "end": "142019"
  },
  {
    "text": "hire tasks was to add a feature to acquire a guest to send a message to a",
    "start": "142019",
    "end": "147480"
  },
  {
    "text": "host this involved a few components and involved accessing the model getting the",
    "start": "147480",
    "end": "154170"
  },
  {
    "text": "host first name and saving a message it involved modifying the view template a",
    "start": "154170",
    "end": "160860"
  },
  {
    "text": "little bit tell your host hello it also involved modifying our controller",
    "start": "160860",
    "end": "167310"
  },
  {
    "text": "endpoint to add some basic server-side validation and together the Model View",
    "start": "167310",
    "end": "173880"
  },
  {
    "text": "and controller changes were made within monorail our application was simple",
    "start": "173880",
    "end": "181620"
  },
  {
    "text": "enough that our developer infrastructure projects were done on a volunteer basis or in hackathons we had a volunteer sis",
    "start": "181620",
    "end": "188700"
  },
  {
    "text": "ops engineers who voluntarily were on call for the entire Airbnb site",
    "start": "188700",
    "end": "195290"
  },
  {
    "text": "engineers were fairly productive and happy life seems simple so why did we",
    "start": "196549",
    "end": "204000"
  },
  {
    "text": "decide to migrate why spend the time to invest and the engineering manpower to",
    "start": "204000",
    "end": "210180"
  },
  {
    "text": "move away into a different technical architecture this talk will also be",
    "start": "210180",
    "end": "215670"
  },
  {
    "text": "describing animals that migrate birds migrate and the Arctic Tern has the",
    "start": "215670",
    "end": "222329"
  },
  {
    "text": "greatest migration path of 1.5 million miles in its lifetime that's like going from here to the moon and back three",
    "start": "222329",
    "end": "228989"
  },
  {
    "text": "times for us we were about to begin our million mile journey from migrating for",
    "start": "228989",
    "end": "234810"
  },
  {
    "text": "the monolith to micro sources microservices can theoretically have",
    "start": "234810",
    "end": "241950"
  },
  {
    "text": "well encapsulated modules or v services inside of them but a certain point they",
    "start": "241950",
    "end": "247139"
  },
  {
    "text": "become difficult to scale as they do not enforce such encapsulation at Airbnb we",
    "start": "247139",
    "end": "254730"
  },
  {
    "text": "begin to experience tight coupling between the modules as our engineering team grew larger modules began to assume",
    "start": "254730",
    "end": "262409"
  },
  {
    "text": "too many responsibilities and became highly dependent on one another as a",
    "start": "262409",
    "end": "268419"
  },
  {
    "text": "range engineering team continue to grow so do the spaghetti entanglement of our monorail code it became harder to debug",
    "start": "268419",
    "end": "275830"
  },
  {
    "text": "navigate and deploy monorail and became a source of Engineers frustration our",
    "start": "275830",
    "end": "285509"
  },
  {
    "text": "lines of code in Mario began to go as well and it shaped similarly as our",
    "start": "285509",
    "end": "291850"
  },
  {
    "text": "engineering teams growth we were adding more features to her monorail but we had a single database which meant these",
    "start": "291850",
    "end": "298449"
  },
  {
    "text": "additional dependencies were making our database less reliable we began to feel",
    "start": "298449",
    "end": "303520"
  },
  {
    "text": "these growing pains around the 2015 time",
    "start": "303520",
    "end": "308490"
  },
  {
    "text": "then we had over 200 engineers we were deploying 200 commits to hermanas row to",
    "start": "308910",
    "end": "316599"
  },
  {
    "text": "production every day however we were experiencing around 15 hours on average",
    "start": "316599",
    "end": "322840"
  },
  {
    "text": "of time where Armada was blocked we couldn't deploy due to revert or roll",
    "start": "322840",
    "end": "328240"
  },
  {
    "text": "backs let's look at that checkout page",
    "start": "328240",
    "end": "333250"
  },
  {
    "text": "again why don't we did a rerun in 2014 so this page got a revamp but now there",
    "start": "333250",
    "end": "340270"
  },
  {
    "text": "are many teams with different features on this single page ownership and accountability were difficult because",
    "start": "340270",
    "end": "347010"
  },
  {
    "text": "there are many different components part of a single feature we tried to add a",
    "start": "347010",
    "end": "352930"
  },
  {
    "text": "get level part to add the required",
    "start": "352930",
    "end": "360490"
  },
  {
    "text": "reviewers on the file or directory' level which helped a little bit but then",
    "start": "360490",
    "end": "366180"
  },
  {
    "text": "our modules and files became big as well this message module now became over 400",
    "start": "366180",
    "end": "373360"
  },
  {
    "text": "contributors and thousands of lines we",
    "start": "373360",
    "end": "378970"
  },
  {
    "text": "began to see more incidents it was not uncommon for an engineer to make a",
    "start": "378970",
    "end": "384400"
  },
  {
    "text": "change and what they thought was localized to their feature but then it ended up breaking something unrelated",
    "start": "384400",
    "end": "391620"
  },
  {
    "text": "our deploy trains became slower as well on the magnitude of hours",
    "start": "391620",
    "end": "397439"
  },
  {
    "text": "I personally like to deploy my monorail changes in the morning before the other",
    "start": "397439",
    "end": "402749"
  },
  {
    "text": "engineers woke up and gone to the office this reduced my chance of having merged conflicts are dealing with other",
    "start": "402749",
    "end": "408929"
  },
  {
    "text": "people's reverts but overall engineers were getting frustrated and monorail",
    "start": "408929",
    "end": "414599"
  },
  {
    "text": "deploys for a huge pain point and decreasing our developers productivity",
    "start": "414599",
    "end": "421159"
  },
  {
    "text": "so we look towards service-oriented architecture or SOA as a possible",
    "start": "422569",
    "end": "427709"
  },
  {
    "text": "solution to help alleviate our pain SOA is a network of loosely coupled services",
    "start": "427709",
    "end": "434599"
  },
  {
    "text": "the client will instead go through some API gateway and they make calls out to",
    "start": "434599",
    "end": "440550"
  },
  {
    "text": "various services each service can be built and deployed independently and",
    "start": "440550",
    "end": "447089"
  },
  {
    "text": "scaled separately as well ownership within a service is a lot clearer as its",
    "start": "447089",
    "end": "453329"
  },
  {
    "text": "defined within the supported services API requests to be services can be made",
    "start": "453329",
    "end": "458849"
  },
  {
    "text": "in parallel this seemed to be a promising solution to the pains that we",
    "start": "458849",
    "end": "464039"
  },
  {
    "text": "were feeling if we look back at that checkout page now with an SOA lens we",
    "start": "464039",
    "end": "471809"
  },
  {
    "text": "might have a home service a reservation service a messaging service you could",
    "start": "471809",
    "end": "478439"
  },
  {
    "text": "have a home's demand service a business travel service cancellation service so now this is looking like a ton of",
    "start": "478439",
    "end": "484019"
  },
  {
    "text": "services and a different type of spaghetti mess but we had faith that we",
    "start": "484019",
    "end": "491759"
  },
  {
    "text": "could give it a shot as I'm sure many of you and the audience have experienced",
    "start": "491759",
    "end": "497189"
  },
  {
    "text": "successful migrations from a monolith to micro sources so of other companies such",
    "start": "497189",
    "end": "502259"
  },
  {
    "text": "as uber Twitter Amazon Netflix so we were confident that it was our turn to",
    "start": "502259",
    "end": "508319"
  },
  {
    "text": "give us a shot we wanted to start with a",
    "start": "508319",
    "end": "514018"
  },
  {
    "text": "key set of shared understanding and design principles for building services penguins migrate and when they do the",
    "start": "514019",
    "end": "522120"
  },
  {
    "text": "various colonies have a shared understanding of where to go and meet",
    "start": "522120",
    "end": "527160"
  },
  {
    "text": "same time we wanted our engineers to have a shared understanding of how to",
    "start": "527160",
    "end": "532709"
  },
  {
    "text": "build services in a standardized way so we could help scale them quicker the",
    "start": "532709",
    "end": "539879"
  },
  {
    "text": "first of these principles was that services should own both reads and",
    "start": "539879",
    "end": "545910"
  },
  {
    "text": "writes to their own data this means if multiple services are interested in a",
    "start": "545910",
    "end": "551670"
  },
  {
    "text": "certain data set they must go through the gatekeeper services API to access that data this principle helps with data",
    "start": "551670",
    "end": "559949"
  },
  {
    "text": "consistency as well as encapsulation and isolation services should address a",
    "start": "559949",
    "end": "568769"
  },
  {
    "text": "specific concern we wanted to avoid going from a monolith breaking it apart",
    "start": "568769",
    "end": "574589"
  },
  {
    "text": "we're putting so much functionality in another service that it becomes the new monolith we also wanted to avoid going",
    "start": "574589",
    "end": "581490"
  },
  {
    "text": "from monolith breaking it apart into many smaller services and now we have a poly lip so somewhere in the middle is",
    "start": "581490",
    "end": "588089"
  },
  {
    "text": "where we're trying to go for where a service had a large enough scope but was still focused and did not duplicate",
    "start": "588089",
    "end": "596189"
  },
  {
    "text": "other services functionality this was important because in monorail files had",
    "start": "596189",
    "end": "603089"
  },
  {
    "text": "access to many other files and it was easy to share code in that way but it was also easy for dependencies to happen",
    "start": "603089",
    "end": "609810"
  },
  {
    "text": "instead when we break this apart into services instead of duplicating code in",
    "start": "609810",
    "end": "614939"
  },
  {
    "text": "various services we wanted to develop shared services and shared libraries",
    "start": "614939",
    "end": "621230"
  },
  {
    "text": "another design principle we came up with was that data mutations should publish",
    "start": "622850",
    "end": "629490"
  },
  {
    "text": "via standard events this came from looking at our code base and seeing",
    "start": "629490",
    "end": "635309"
  },
  {
    "text": "Monteiro had a lot of callback methods in them callbacks are hooks that are",
    "start": "635309",
    "end": "641449"
  },
  {
    "text": "executed during various parts of an objects crud lifecycle for example if I",
    "start": "641449",
    "end": "648149"
  },
  {
    "text": "were to book in home on Airbnb once the reservation transaction is completed",
    "start": "648149",
    "end": "654629"
  },
  {
    "text": "then we mark the homes availability as busy for those dates",
    "start": "654629",
    "end": "660350"
  },
  {
    "text": "breaking this apart into services meant we can no longer use rails callback methods instead we developed spinal tap",
    "start": "660350",
    "end": "667790"
  },
  {
    "text": "which is open source but Airbnb spinal tap is a change data capture service it",
    "start": "667790",
    "end": "674240"
  },
  {
    "text": "listens to various changes on databases and then publishes them to a standard",
    "start": "674240",
    "end": "679430"
  },
  {
    "text": "queue in our case we use Kafka other services can then listen for the",
    "start": "679430",
    "end": "685520"
  },
  {
    "text": "standard event consume it and react accordingly such as applying business logic or modifying their own data so",
    "start": "685520",
    "end": "696170"
  },
  {
    "text": "with their principles in hand we sought out to get started with actual implementation but some of our initial",
    "start": "696170",
    "end": "702380"
  },
  {
    "text": "ideas were not the ones that we ended up going with our ideas evolved over time",
    "start": "702380",
    "end": "708190"
  },
  {
    "text": "monarch butterflies migrate and they have an interesting migration path",
    "start": "708190",
    "end": "713720"
  },
  {
    "text": "because their migration cycle is longer than any one butterfly's lifespan this",
    "start": "713720",
    "end": "720500"
  },
  {
    "text": "means the butterfly that starts migration is not the one that ends migration similarly our initial services",
    "start": "720500",
    "end": "728510"
  },
  {
    "text": "that we built are not considered the poster child's right now we've learned some mistakes",
    "start": "728510",
    "end": "734480"
  },
  {
    "text": "and have developed best practices along the way when beginning we wanted to",
    "start": "734480",
    "end": "742430"
  },
  {
    "text": "start with something that was crucial to Airbnb that was part of our core product at the time Airbnb was focused on homes",
    "start": "742430",
    "end": "750550"
  },
  {
    "text": "so we decided to pick the homes data model as the first service to take out",
    "start": "750550",
    "end": "756230"
  },
  {
    "text": "and put into its own service the home's data model was accessed by almost every",
    "start": "756230",
    "end": "763010"
  },
  {
    "text": "feature in Airbnb so if we could pull this out of the monolith and make it its own micro service it gave us confidence",
    "start": "763010",
    "end": "768320"
  },
  {
    "text": "that we could continue tackling the rest of the model some of our first attempts",
    "start": "768320",
    "end": "776330"
  },
  {
    "text": "to break apart the monolith started with looking at the various call sites in",
    "start": "776330",
    "end": "781450"
  },
  {
    "text": "monorail for which our homes data was accessed this was an attempt to consider",
    "start": "781450",
    "end": "789050"
  },
  {
    "text": "replacing each of these methods with a service call to our home service bogum pond looked",
    "start": "789050",
    "end": "794060"
  },
  {
    "text": "we found that there were thousands of such call sites so it's not possible for us to manually go through each one and",
    "start": "794060",
    "end": "800300"
  },
  {
    "text": "change it to a service RPC instead we",
    "start": "800300",
    "end": "805820"
  },
  {
    "text": "looked a layer deeper and considered applying Ruby meta programming to overwrite these data access methods",
    "start": "805820",
    "end": "812530"
  },
  {
    "text": "instead of changing the thousands of call sites code would overwrite these methods with areas that we call or",
    "start": "812530",
    "end": "819680"
  },
  {
    "text": "service however we encountered difficulty with relations with other",
    "start": "819680",
    "end": "827000"
  },
  {
    "text": "service other models and breaking apart the joins is difficult so we went one",
    "start": "827000",
    "end": "832550"
  },
  {
    "text": "layer deeper and looked into active record active record has some access",
    "start": "832550",
    "end": "838610"
  },
  {
    "text": "methods this one for example home-start find by host ID and then gets translated",
    "start": "838610",
    "end": "844370"
  },
  {
    "text": "into an active like record wrapper which is a ruby library that implements read",
    "start": "844370",
    "end": "850310"
  },
  {
    "text": "and write access to business objects that get persisted to a relational database the active record translates",
    "start": "850310",
    "end": "857870"
  },
  {
    "text": "that method into a raw sequel query select star from homes where host ID",
    "start": "857870",
    "end": "862940"
  },
  {
    "text": "equals for that raw sequel query gets sent to an active record adapter layer",
    "start": "862940",
    "end": "868280"
  },
  {
    "text": "and by default for us it was a my sequel adapter that sent the query directly to",
    "start": "868280",
    "end": "873830"
  },
  {
    "text": "the database instead we wanted to change",
    "start": "873830",
    "end": "880340"
  },
  {
    "text": "this by writing a custom adapter and this custom adapter created a query object so if we expand it to what this",
    "start": "880340",
    "end": "888050"
  },
  {
    "text": "query object is we broke apart the raw sequel query into components there is a",
    "start": "888050",
    "end": "894530"
  },
  {
    "text": "type the query type in this case is select there's a table name homes and",
    "start": "894530",
    "end": "899870"
  },
  {
    "text": "the filter where the host ID is equal to four it also supplies the fields of",
    "start": "899870",
    "end": "905330"
  },
  {
    "text": "interest we could then map this query object to a request object from the",
    "start": "905330",
    "end": "913280"
  },
  {
    "text": "query type and the table we're able to know that we're interested in loading",
    "start": "913280",
    "end": "918350"
  },
  {
    "text": "homes data to fill out that end point the filters and the fields can then help",
    "start": "918350",
    "end": "924560"
  },
  {
    "text": "fill out the request body so now with this query object and custom",
    "start": "924560",
    "end": "930529"
  },
  {
    "text": "adapter instead of going directly to the database we could create a request object and send that to our home service",
    "start": "930529",
    "end": "938779"
  },
  {
    "text": "the home service would then read from the database this may seem like a",
    "start": "938779",
    "end": "945830"
  },
  {
    "text": "roundabout way to get data but it provided us a few things by doing the",
    "start": "945830",
    "end": "951110"
  },
  {
    "text": "active record adapter at the lowest level were able to capture the raw sequel patterns ensuring that we create",
    "start": "951110",
    "end": "957529"
  },
  {
    "text": "a flexible enough API on our service to support the use cases that Montero had it also gave us proof that we didn't no",
    "start": "957529",
    "end": "965480"
  },
  {
    "text": "need to go to the thousands of call sites and manually change them to service our pcs by having it at the",
    "start": "965480",
    "end": "971750"
  },
  {
    "text": "bottom layer this allowed product engineers to continue with their interactions of the active record methods and not need to",
    "start": "971750",
    "end": "978529"
  },
  {
    "text": "change a workflow while under the hood we were calling our new service we",
    "start": "978529",
    "end": "987710"
  },
  {
    "text": "wanted to build out these services but ensure that they could talk to each other interact in a certain pattern",
    "start": "987710",
    "end": "995380"
  },
  {
    "text": "jellyfish have an interesting migration pattern that they interact with the",
    "start": "995380",
    "end": "1000580"
  },
  {
    "text": "sunlight falling in a specific direction from east to west we wanted our services",
    "start": "1000580",
    "end": "1006730"
  },
  {
    "text": "to interact with specific direction as well to have a strict flow of dependencies and this begins with the",
    "start": "1006730",
    "end": "1015460"
  },
  {
    "text": "service requests originating at our clients in the interim the clients",
    "start": "1015460",
    "end": "1021730"
  },
  {
    "text": "request would be routed to our monorail application and that would send the",
    "start": "1021730",
    "end": "1027280"
  },
  {
    "text": "request to our service network the future was to go through an API gateway",
    "start": "1027280",
    "end": "1033819"
  },
  {
    "text": "as well and then send that to our service network",
    "start": "1033819",
    "end": "1038550"
  },
  {
    "text": "starting at the bottom of the service network we have different service types",
    "start": "1039710",
    "end": "1044860"
  },
  {
    "text": "the data service as mentioned before is the gatekeeper to their own data only",
    "start": "1044860",
    "end": "1051860"
  },
  {
    "text": "that service can read and write to its data set a layer on top of that is the",
    "start": "1051860",
    "end": "1058670"
  },
  {
    "text": "drive data source this reads from both the data service as well as its own derive store combines this applies",
    "start": "1058670",
    "end": "1065810"
  },
  {
    "text": "business logic and then it can be shared among multiple product contexts the",
    "start": "1065810",
    "end": "1074570"
  },
  {
    "text": "highest level service is a presentation service this reads from the data service",
    "start": "1074570",
    "end": "1080360"
  },
  {
    "text": "as well as the derived data service to synthesize information that is shown to the user in our product as you begin to",
    "start": "1080360",
    "end": "1091040"
  },
  {
    "text": "build out more of these initial services we realize the need for an additional type of service this middle tier service",
    "start": "1091040",
    "end": "1100550"
  },
  {
    "text": "serves as a layer for the shared validation logic for products to read and write to a particular data source we",
    "start": "1100550",
    "end": "1108320"
  },
  {
    "text": "didn't want to bloat our data service with product business logic so instead",
    "start": "1108320",
    "end": "1113420"
  },
  {
    "text": "we put it into this separate utility service let's look at an example from",
    "start": "1113420",
    "end": "1121430"
  },
  {
    "text": "the checkout page there are many data services involved in that feature including the reservation data service",
    "start": "1121430",
    "end": "1129350"
  },
  {
    "text": "and the home state of service they each read from their own separate isolated",
    "start": "1129350",
    "end": "1135880"
  },
  {
    "text": "databases that those service are the only ones that have access to a home's",
    "start": "1135880",
    "end": "1142220"
  },
  {
    "text": "demand derived data service hydrates from these service perhaps it wants the",
    "start": "1142220",
    "end": "1148430"
  },
  {
    "text": "reservation dates are the location of the home and it combines this with its",
    "start": "1148430",
    "end": "1153530"
  },
  {
    "text": "own data store some offline booking trend statistics and then can combine",
    "start": "1153530",
    "end": "1158630"
  },
  {
    "text": "these together to find out it's a statistic such as what is the likelihood of your home being booked for the",
    "start": "1158630",
    "end": "1163790"
  },
  {
    "text": "certain date and that would be shown to the user so the checkout page gets data",
    "start": "1163790",
    "end": "1170510"
  },
  {
    "text": "from the homes derive data service the home state of service and the reservation service say I do book the",
    "start": "1170510",
    "end": "1178490"
  },
  {
    "text": "reservation that means we're going to write to our reservation model this goes",
    "start": "1178490",
    "end": "1184940"
  },
  {
    "text": "through the reservation validation middle-tier service having the shared",
    "start": "1184940",
    "end": "1190399"
  },
  {
    "text": "logic of how to validate rights to the reservation data with all these theories",
    "start": "1190399",
    "end": "1201019"
  },
  {
    "text": "and mine we wanted to set out implement but ensure that we didn't break anything along the way so we were cautiously",
    "start": "1201019",
    "end": "1208039"
  },
  {
    "text": "comparing for differences between our monorail and our services walruses are",
    "start": "1208039",
    "end": "1214519"
  },
  {
    "text": "migratory animals and they have two different ways that they migrate one is",
    "start": "1214519",
    "end": "1219919"
  },
  {
    "text": "they swim to their and migration location and the other is floating on ice sheets for us we wanted to compare",
    "start": "1219919",
    "end": "1228139"
  },
  {
    "text": "two different ways of accessing the same information one through the monorail and to their service and we start with reads",
    "start": "1228139",
    "end": "1237580"
  },
  {
    "text": "reads our item potent which means that we can issue multiple identical requests",
    "start": "1237580",
    "end": "1243889"
  },
  {
    "text": "and we'll have the same effect as issuing a single request we compare our",
    "start": "1243889",
    "end": "1249259"
  },
  {
    "text": "reads from the street path a the existing path of the monorail go into the database against our read path be",
    "start": "1249259",
    "end": "1257119"
  },
  {
    "text": "going through our service and we put this dual read behind a gate that's",
    "start": "1257119",
    "end": "1262369"
  },
  {
    "text": "configurable in an admin UI tool this is really important for us because it",
    "start": "1262369",
    "end": "1268669"
  },
  {
    "text": "allows us to ramp up or completely turn off a feature without meaning to make a",
    "start": "1268669",
    "end": "1274909"
  },
  {
    "text": "code change review and deploy it instead if we can do it simply with a click of a button we begin the comparisons for this",
    "start": "1274909",
    "end": "1283940"
  },
  {
    "text": "dual read starting with one percent of traffic we look for mismatches between",
    "start": "1283940",
    "end": "1289549"
  },
  {
    "text": "the responses of the to lead paths and adjust them along the way once the comparisons are clean we then",
    "start": "1289549",
    "end": "1297619"
  },
  {
    "text": "ramp up the production traffic going through these to read paths we do this slowly going from 5% to 10%",
    "start": "1297619",
    "end": "1306470"
  },
  {
    "text": "to 25% 50 and then 100 each step",
    "start": "1306470",
    "end": "1311509"
  },
  {
    "text": "comparing weighting and comparing again well at a hundred percent we wait some",
    "start": "1311509",
    "end": "1318200"
  },
  {
    "text": "more so it's important to get enough traffic to ensure that the various",
    "start": "1318200",
    "end": "1324320"
  },
  {
    "text": "access patterns are covered and to ensure that your service can handle hunt percent of the load that monorail was",
    "start": "1324320",
    "end": "1331100"
  },
  {
    "text": "supporting once the comparisons at a hundred percent are clean we can then",
    "start": "1331100",
    "end": "1339169"
  },
  {
    "text": "switch over to move all of our reads through our data service rights are a",
    "start": "1339169",
    "end": "1348409"
  },
  {
    "text": "little bit different because we can't duel right to the same database so instead we write two separate database",
    "start": "1348409",
    "end": "1355299"
  },
  {
    "text": "say we have the monolith already hooked up to a presentation service and the",
    "start": "1355299",
    "end": "1360320"
  },
  {
    "text": "presentation service is writing to the production database now we want to",
    "start": "1360320",
    "end": "1366649"
  },
  {
    "text": "introduce a middle to your service and pull out some of that validation logic from the presentation service we call",
    "start": "1366649",
    "end": "1372860"
  },
  {
    "text": "this right path B and we compare it by having the middle tier service write to",
    "start": "1372860",
    "end": "1378799"
  },
  {
    "text": "a separate shadow database the middle tier service can then issue strongly",
    "start": "1378799",
    "end": "1384799"
  },
  {
    "text": "consistent reads against the production database and the shadow database compare the responses to look for any mismatches",
    "start": "1384799",
    "end": "1392740"
  },
  {
    "text": "similar process this is behind a UI configurable gate we ramp up slowly wait",
    "start": "1392740",
    "end": "1399259"
  },
  {
    "text": "out a hundred percent and once all the comparisons are clean then we switch over to moving all of our rights through",
    "start": "1399259",
    "end": "1406549"
  },
  {
    "text": "this write validation middle tier service this may seem like we took a lot",
    "start": "1406549",
    "end": "1414049"
  },
  {
    "text": "of careful steps but we further increment our migration process at",
    "start": "1414049",
    "end": "1420470"
  },
  {
    "text": "Airbnb we have a value for a democratic deploys this is where we empower each",
    "start": "1420470",
    "end": "1426649"
  },
  {
    "text": "engineer to be responsible for testing their own change and deploying it to production we don't have a centralized",
    "start": "1426649",
    "end": "1433669"
  },
  {
    "text": "ops team to do this for us it's a responsibility of each engineer because monorail deploys were a big pain",
    "start": "1433669",
    "end": "1441100"
  },
  {
    "text": "point we wanted to move teams as quickly as possible to services so they can get the benefits of the separate build and",
    "start": "1441100",
    "end": "1447279"
  },
  {
    "text": "deploy process this meant that we wanted to build services and allow production",
    "start": "1447279",
    "end": "1453820"
  },
  {
    "text": "traffic to go through them even if they were in an incomplete State so one way",
    "start": "1453820",
    "end": "1459520"
  },
  {
    "text": "that a service could be incomplete is that not all the endpoints are ready but that's okay because we migrated one",
    "start": "1459520",
    "end": "1465610"
  },
  {
    "text": "endpoint at a time this allows us to unblock other clients who are interested",
    "start": "1465610",
    "end": "1472899"
  },
  {
    "text": "in that one endpoint and give us time to bill out other functionality for that service for example I work on the user",
    "start": "1472899",
    "end": "1480820"
  },
  {
    "text": "service and when we first made this micro service we only had one end point load users and only had one",
    "start": "1480820",
    "end": "1488289"
  },
  {
    "text": "functionality it fetched users from our one my sequel table by ID this may not",
    "start": "1488289",
    "end": "1494080"
  },
  {
    "text": "seem like very much but an unblocked 10 other services within the first few months giving them the ability to",
    "start": "1494080",
    "end": "1500649"
  },
  {
    "text": "continue working while we added additional functionality and data sources to the user service we also",
    "start": "1500649",
    "end": "1509440"
  },
  {
    "text": "migrated on a per attribute level today we have a presentation service and it",
    "start": "1509440",
    "end": "1515409"
  },
  {
    "text": "accepts some production traffic if it's interested in ten attributes that it",
    "start": "1515409",
    "end": "1521200"
  },
  {
    "text": "needs to show to the user but say only three of them are ready we'll get those three attributes that are already",
    "start": "1521200",
    "end": "1527289"
  },
  {
    "text": "migrated into the SOA network and then fetch the remaining seven for monorail",
    "start": "1527289",
    "end": "1533909"
  },
  {
    "text": "this allows all teams including the presentation service to get production traffic and have smaller change sets",
    "start": "1533909",
    "end": "1540940"
  },
  {
    "text": "while they're building out their services so remember that gong that we",
    "start": "1540940",
    "end": "1548169"
  },
  {
    "text": "used to hit when the site went down well even though we did all these precautionary steps the ghan was hit a",
    "start": "1548169",
    "end": "1554380"
  },
  {
    "text": "few times in the beginning but it's okay we've learned from our stakes and often",
    "start": "1554380",
    "end": "1559570"
  },
  {
    "text": "the first services tend to have some rough patches from our learnings we",
    "start": "1559570",
    "end": "1566470"
  },
  {
    "text": "developed best practices wildebeests have a dangerous migration path they've developed a best practice",
    "start": "1566470",
    "end": "1574490"
  },
  {
    "text": "to keep their young safe by putting them in the center of the herd while they migrate",
    "start": "1574490",
    "end": "1580450"
  },
  {
    "text": "similarly we wanted to create best practices to keep our services safe alive functional and able to scale so we",
    "start": "1580450",
    "end": "1592100"
  },
  {
    "text": "focused on standardizing service building and ensuring consistency across our services we did this through the",
    "start": "1592100",
    "end": "1600980"
  },
  {
    "text": "usage of frameworks which auto generate code for us having standard testing and",
    "start": "1600980",
    "end": "1607429"
  },
  {
    "text": "deployment processes that utilized replayed traffic replay production",
    "start": "1607429",
    "end": "1612799"
  },
  {
    "text": "traffic is when a client makes a request to our production service and then we take a copy of that and send it to other",
    "start": "1612799",
    "end": "1618919"
  },
  {
    "text": "targets that we can use internally observability it was important that we",
    "start": "1618919",
    "end": "1626059"
  },
  {
    "text": "had a standard way to look at the health and functionality of each of our services digging into these more an",
    "start": "1626059",
    "end": "1634580"
  },
  {
    "text": "engineer would create a service because ultimately they want to support some sort of business logic but then they",
    "start": "1634580",
    "end": "1642409"
  },
  {
    "text": "need to add an endpoint to expose this to clients at Airbnb we support both",
    "start": "1642409",
    "end": "1649730"
  },
  {
    "text": "Java and Ruby as first-class language services now that we have our clients we",
    "start": "1649730",
    "end": "1658009"
  },
  {
    "text": "may need to add additional information such as server Diagnostics metrics data",
    "start": "1658009",
    "end": "1665899"
  },
  {
    "text": "validation resilience on both the client and the server side error handling and",
    "start": "1665899",
    "end": "1672700"
  },
  {
    "text": "for Ruby some type checking now that our service is in production we want to",
    "start": "1672700",
    "end": "1679039"
  },
  {
    "text": "ensure that we have a dashboard alerts and easy runbook documentation so other engineers know how to use the service",
    "start": "1679039",
    "end": "1688059"
  },
  {
    "text": "this is beginning to seem like a lot of work just to Ravin the one business logic so instead we invested in creating",
    "start": "1688059",
    "end": "1696619"
  },
  {
    "text": "a service framework team their responsibility was to create solutions to help build our sir",
    "start": "1696619",
    "end": "1702470"
  },
  {
    "text": "in an automated way so that engineers could focus on the actual functionality of a service not creating all the",
    "start": "1702470",
    "end": "1708889"
  },
  {
    "text": "boilerplate to do this they use an IDL or interface description language and",
    "start": "1708889",
    "end": "1715759"
  },
  {
    "text": "picked thrift so now an engineer can",
    "start": "1715759",
    "end": "1721220"
  },
  {
    "text": "focus on the business logic without needing to manually write all of the Java Ruby and client code the idea",
    "start": "1721220",
    "end": "1728629"
  },
  {
    "text": "though would do this boilerplate for us and allow us to do this in a standardized way so before when we were",
    "start": "1728629",
    "end": "1740059"
  },
  {
    "text": "coding services it was difficult and engineers didn't really want to do it they'd rather stay in monolith",
    "start": "1740059",
    "end": "1745070"
  },
  {
    "text": "because it took weeks to just get a service boilerplate running we had to",
    "start": "1745070",
    "end": "1750289"
  },
  {
    "text": "deploy code and three different repositories in the correct order just to get the basics of a service running",
    "start": "1750289",
    "end": "1758740"
  },
  {
    "text": "once the service is running we needed to maintain both the Java and the Ruby clients manually otherwise there would",
    "start": "1759580",
    "end": "1766610"
  },
  {
    "text": "be inconsistencies between the two but now with our service frameworks we get a",
    "start": "1766610",
    "end": "1771919"
  },
  {
    "text": "lot of this auto-generated for us for free the API is clear defined in a",
    "start": "1771919",
    "end": "1777289"
  },
  {
    "text": "thrift file where any engineer can go to an ideal service and know the endpoints it supports now with a click of a button",
    "start": "1777289",
    "end": "1786350"
  },
  {
    "text": "we're able to create ruby gem clients instead of having to manually type the",
    "start": "1786350",
    "end": "1792169"
  },
  {
    "text": "bubi client we just click deploy ruby gem and it looks at the ideal configuration and generates a client for",
    "start": "1792169",
    "end": "1798710"
  },
  {
    "text": "us here's an example of what our thrift looks like we might have some requests",
    "start": "1798710",
    "end": "1806480"
  },
  {
    "text": "represented as a thrift struct it takes in some strongly typed data which was",
    "start": "1806480",
    "end": "1813710"
  },
  {
    "text": "important for us due to the Ruby and Java inconsistencies we can specify that",
    "start": "1813710",
    "end": "1819409"
  },
  {
    "text": "a field is required or optional and a response is similarly defined as if",
    "start": "1819409",
    "end": "1825440"
  },
  {
    "text": "their struct",
    "start": "1825440",
    "end": "1827950"
  },
  {
    "text": "endpoints are defined in our thrift files as well we can specify a response",
    "start": "1831470",
    "end": "1837840"
  },
  {
    "text": "type and some struct and the name of the endpoint we then could specify the",
    "start": "1837840",
    "end": "1845130"
  },
  {
    "text": "request struct that it takes in as input and then what exceptions it throws we",
    "start": "1845130",
    "end": "1855899"
  },
  {
    "text": "can add additional annotations in our IDL as well such as accepting replay traffic or has rate limiters and our",
    "start": "1855899",
    "end": "1866820"
  },
  {
    "text": "testing deploying process benefited from the IDL as well previously there was an",
    "start": "1866820",
    "end": "1872159"
  },
  {
    "text": "element of uncertainty when creating a service a lot of the testing was done manually such as curling or clicking",
    "start": "1872159",
    "end": "1878639"
  },
  {
    "text": "around in the UI to trigger a request to our service instead of the let's hope",
    "start": "1878639",
    "end": "1885000"
  },
  {
    "text": "for the best mentality we now have a more structured pre-production process with replayed traffic as a center of it",
    "start": "1885000",
    "end": "1892470"
  },
  {
    "text": "all starting from the local development",
    "start": "1892470",
    "end": "1898830"
  },
  {
    "text": "we support services and our local dev to ensure that we can test our code and its",
    "start": "1898830",
    "end": "1904200"
  },
  {
    "text": "dependencies before needing to merge and deploy once our code is chain is",
    "start": "1904200",
    "end": "1909620"
  },
  {
    "text": "approved we can then merge into staging and staging is a pre-production",
    "start": "1909620",
    "end": "1915600"
  },
  {
    "text": "environment that utilizes the replay traffic it takes a copy of the production traffic and sends it to",
    "start": "1915600",
    "end": "1921360"
  },
  {
    "text": "staging our staging services then interact with other staging services as well so we have a whole network of",
    "start": "1921360",
    "end": "1928429"
  },
  {
    "text": "services before going to production this allows us to determine if we broken up",
    "start": "1928429",
    "end": "1933870"
  },
  {
    "text": "any of our downstream or upstream services before pushing it to prod",
    "start": "1933870",
    "end": "1940130"
  },
  {
    "text": "Diffie is a really cool tool open-source by Twitter and allows us to compare the",
    "start": "1940460",
    "end": "1946139"
  },
  {
    "text": "responses from staging with our new code against production with the last known good code so let's take a detour and",
    "start": "1946139",
    "end": "1953100"
  },
  {
    "text": "dive into Diffie if he takes replay traffic as input",
    "start": "1953100",
    "end": "1960160"
  },
  {
    "text": "and sends it to three targets one being staging with the new code two being",
    "start": "1960160",
    "end": "1965980"
  },
  {
    "text": "primary running the old code which is on production and three secondary running the old code which the exact same code",
    "start": "1965980",
    "end": "1972520"
  },
  {
    "text": "as primary we then compare the responses of the two comparing staging and primary",
    "start": "1972520",
    "end": "1980470"
  },
  {
    "text": "we get raw response differences and then we compare primary against secondary and",
    "start": "1980470",
    "end": "1987250"
  },
  {
    "text": "these differences we consider as non deterministic noise as primary and",
    "start": "1987250",
    "end": "1992350"
  },
  {
    "text": "secondary are running the exact same services we filter out the noise and",
    "start": "1992350",
    "end": "1998260"
  },
  {
    "text": "we're left with the response differences that can be attributed to the change",
    "start": "1998260",
    "end": "2003510"
  },
  {
    "text": "that was just introduced on staging this has been really helpful for our team to",
    "start": "2003510",
    "end": "2009270"
  },
  {
    "text": "ensure that we haven't broken any of the existing functionality or if we were",
    "start": "2009270",
    "end": "2014490"
  },
  {
    "text": "doing a bug fist that a change was reflected in the responses Diffie is not",
    "start": "2014490",
    "end": "2020970"
  },
  {
    "text": "an SOA specific tool but is much more practical to use when the service",
    "start": "2020970",
    "end": "2026070"
  },
  {
    "text": "supports a much smaller and point set and the engineers working on them are",
    "start": "2026070",
    "end": "2031110"
  },
  {
    "text": "fewer as well so from a monorail perspective if we were to use Diffie there would be thousands of endpoints",
    "start": "2031110",
    "end": "2036570"
  },
  {
    "text": "and because the code was so entangled it would be hard to debug but with each service we have a standard process where",
    "start": "2036570",
    "end": "2042840"
  },
  {
    "text": "Diffie is included before moving to production once we've gotten enough",
    "start": "2042840",
    "end": "2050460"
  },
  {
    "text": "traffic on Diffie and are comfortable to move forward we then move to canary and then from canary which is a single",
    "start": "2050460",
    "end": "2057780"
  },
  {
    "text": "instance of production we move on to the rest of the production fleet",
    "start": "2057780",
    "end": "2062929"
  },
  {
    "text": "observability has got a lot of benefits from our standard frameworks as well",
    "start": "2064220",
    "end": "2069860"
  },
  {
    "text": "previously service owners were responsible for defining their own",
    "start": "2069860",
    "end": "2075149"
  },
  {
    "text": "metrics and dashboards and this ended up being done in a non-standard way alerts",
    "start": "2075150",
    "end": "2081210"
  },
  {
    "text": "were inconsistent or incomplete but now with our IDL auto-generating a lot of",
    "start": "2081210",
    "end": "2088139"
  },
  {
    "text": "code for us gives us template of metrics that we don't even need to define it's all done in the generated template framework for us with",
    "start": "2088140",
    "end": "2096649"
  },
  {
    "text": "these template and metrics we get templated dashboards as well and the IDL",
    "start": "2096650",
    "end": "2102860"
  },
  {
    "text": "allows for annotations for alerts we can specify the threshold right there in the",
    "start": "2102860",
    "end": "2108650"
  },
  {
    "text": "IDL file for example we can do the p95 latency what is too high of a latency or",
    "start": "2108650",
    "end": "2115070"
  },
  {
    "text": "what is too high of an error rate what is too low of a queries per second arc UPS all of them that IDL file here's an",
    "start": "2115070",
    "end": "2123680"
  },
  {
    "text": "example of one of our standard graphs all we need to do is change the",
    "start": "2123680",
    "end": "2129410"
  },
  {
    "text": "drop-down to be the name of our service and the rest of the graphs get populated for us because each IDL service has the",
    "start": "2129410",
    "end": "2137930"
  },
  {
    "text": "same graph it's really easy for us to get a good overview of the health and functionality of each service during an",
    "start": "2137930",
    "end": "2144620"
  },
  {
    "text": "incident this seems like a lot of work",
    "start": "2144620",
    "end": "2150560"
  },
  {
    "text": "so how is the migration going so far humpback whales have the longest",
    "start": "2150560",
    "end": "2157310"
  },
  {
    "text": "migration path of all mammals similarly the urban bee migration path",
    "start": "2157310",
    "end": "2162680"
  },
  {
    "text": "is long and we're not quite done yet we're actually in the early stages but",
    "start": "2162680",
    "end": "2169340"
  },
  {
    "text": "we've seen a lot of great results so far we've on-boarded over 250 services using",
    "start": "2169340",
    "end": "2177140"
  },
  {
    "text": "our IDL framework we support over a thousand endpoints with these IDL",
    "start": "2177140",
    "end": "2183080"
  },
  {
    "text": "services and we've seen some great results in terms of improved build and",
    "start": "2183080",
    "end": "2190460"
  },
  {
    "text": "deploy times instead of hours in Montero we now have deploys on the order of",
    "start": "2190460",
    "end": "2196430"
  },
  {
    "text": "minutes within services we're seeing fewer reverts as well with help which",
    "start": "2196430",
    "end": "2202160"
  },
  {
    "text": "helps out with the deploy train time decrease service ownership is much",
    "start": "2202160",
    "end": "2207800"
  },
  {
    "text": "clearer and there are fewer engineers working on a service so we are stepping on each other's toes as much we're",
    "start": "2207800",
    "end": "2215180"
  },
  {
    "text": "seeing bug fixes be done quicker and we're able to meet our SLA faster and",
    "start": "2215180",
    "end": "2221510"
  },
  {
    "text": "we've also seen some interesting results in terms of latency SOA itself is not a reason to do four",
    "start": "2221510",
    "end": "2229320"
  },
  {
    "text": "performance gains but because we were in a ruby monarch lip it was single-threaded",
    "start": "2229320",
    "end": "2235020"
  },
  {
    "text": "we moved a lot of our services into Java which is multi-threaded giving us the",
    "start": "2235020",
    "end": "2240510"
  },
  {
    "text": "ability to benefit from parallelization of requests this help lower our latency",
    "start": "2240510",
    "end": "2245790"
  },
  {
    "text": "a lot our search page is three times faster and a home description page is",
    "start": "2245790",
    "end": "2252750"
  },
  {
    "text": "over ten times faster last year we had around 800 engineers",
    "start": "2252750",
    "end": "2260010"
  },
  {
    "text": "and we're doing 3,000 deploys a week this is about one every three and a half minutes now we've increased to around a",
    "start": "2260010",
    "end": "2267869"
  },
  {
    "text": "thousand engineers but we're doing 10,000 deploys a week this is about one every minute so we're able to get",
    "start": "2267869",
    "end": "2273869"
  },
  {
    "text": "engineers code out to production faster and more reliably previously we had our",
    "start": "2273869",
    "end": "2282900"
  },
  {
    "text": "product engineers focused on front-end and user interface type features and",
    "start": "2282900",
    "end": "2288090"
  },
  {
    "text": "they were separated from our infrastructure engineers who worked on back-end and some services but now all",
    "start": "2288090",
    "end": "2295260"
  },
  {
    "text": "teams are service owners we've abolished our on-call rotation the SIS ups and",
    "start": "2295260",
    "end": "2301920"
  },
  {
    "text": "instead we have per team on call each team is responsible for their own services and keeping them alive and",
    "start": "2301920",
    "end": "2308820"
  },
  {
    "text": "functional we go back to that check out",
    "start": "2308820",
    "end": "2314609"
  },
  {
    "text": "page there are still a lot of services on there we have multiple data services",
    "start": "2314609",
    "end": "2320400"
  },
  {
    "text": "and multiple Drive data services to top",
    "start": "2320400",
    "end": "2325770"
  },
  {
    "text": "it off we have a check out presentation service that reads from all of them but if I were to make a similar change now I",
    "start": "2325770",
    "end": "2332820"
  },
  {
    "text": "would make it only in the checkout presentation service I had to be able to go to the message data service look at",
    "start": "2332820",
    "end": "2339720"
  },
  {
    "text": "its IDL file and know how to call its API or the connector Struck's",
    "start": "2339720",
    "end": "2345950"
  },
  {
    "text": "but I'd like to caution that even though it may seem great s or it may not be for",
    "start": "2347030",
    "end": "2353280"
  },
  {
    "text": "everyone it has a lot of drawbacks a monolith is a great place to start",
    "start": "2353280",
    "end": "2358670"
  },
  {
    "text": "especially for a small team with quick iteration development SOA introduces",
    "start": "2358670",
    "end": "2365690"
  },
  {
    "text": "distributed services this means that multiple network requests are required",
    "start": "2365690",
    "end": "2370820"
  },
  {
    "text": "whereas previously just one to the monolith each network request is a",
    "start": "2370820",
    "end": "2376460"
  },
  {
    "text": "potential for higher latency or failure consistency becomes difficult when we",
    "start": "2376460",
    "end": "2384290"
  },
  {
    "text": "spread across multiple databases and services observability becomes harder",
    "start": "2384290",
    "end": "2390410"
  },
  {
    "text": "and we may need to instrument distributed tracing service",
    "start": "2390410",
    "end": "2397940"
  },
  {
    "text": "orchestration becomes complex as well with SOA we needed to onboard engineers",
    "start": "2397940",
    "end": "2403610"
  },
  {
    "text": "to learn to be service owners and maintain their own clusters the Airbnb we started with ec2 but as we're",
    "start": "2403610",
    "end": "2410810"
  },
  {
    "text": "building out more services we're beginning to see scaling problems so we're moving towards using kubernetes",
    "start": "2410810",
    "end": "2418329"
  },
  {
    "text": "SOA is a high investment cost you can see there are a lot of tooling and additional frameworks that are needed",
    "start": "2420430",
    "end": "2426800"
  },
  {
    "text": "and having clear documentation is helpful as well because there's going to be hundreds of services instead of that",
    "start": "2426800",
    "end": "2433280"
  },
  {
    "text": "one monolith but from SOA migration it's",
    "start": "2433280",
    "end": "2440180"
  },
  {
    "text": "working out for us be prepared for a long commitment and journey and ensure",
    "start": "2440180",
    "end": "2446600"
  },
  {
    "text": "you don't break functionality along the way by comparing slowly carefully and piecemeal focus on the standardization",
    "start": "2446600",
    "end": "2455570"
  },
  {
    "text": "of services especially prioritizing frameworks tools and documentation so",
    "start": "2455570",
    "end": "2464630"
  },
  {
    "text": "look both ways before you begin Airbnb is having a positive experience so far",
    "start": "2464630",
    "end": "2470770"
  },
  {
    "text": "thank you for listening to our Mauritian story you",
    "start": "2470770",
    "end": "2476839"
  }
]