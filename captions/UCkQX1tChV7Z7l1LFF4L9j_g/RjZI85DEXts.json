[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": "so I do want it just for the record c-sharp is a 21st century language I think we came out in the year 2000 so we",
    "start": "4120",
    "end": "11290"
  },
  {
    "text": "just make it anything and and talking about my background I was actually",
    "start": "11290",
    "end": "16660"
  },
  {
    "text": "involved in Java generics for a while as well and one of my co-conspirators is in",
    "start": "16660",
    "end": "22630"
  },
  {
    "text": "the audience today so I'm very very happy to see that Phil Wadler he's his",
    "start": "22630",
    "end": "27849"
  },
  {
    "text": "parts were more successful than mine anyway so so quickly moving on to to",
    "start": "27849",
    "end": "33520"
  },
  {
    "text": "c-sharp there's this it's a survey that stackoverflow do every year and it",
    "start": "33520",
    "end": "40900"
  },
  {
    "text": "probably that probably all sorts of caveats about you know grains of salt that you should take the data with but",
    "start": "40900",
    "end": "46030"
  },
  {
    "text": "as long as they're in in my favor I consider this the ground truth so I just",
    "start": "46030",
    "end": "52330"
  },
  {
    "text": "want to quickly this not so yes it is to brag a little bit but it's also to say like c-sharp is sending interesting",
    "start": "52330",
    "end": "58810"
  },
  {
    "text": "situation in the in the market today it's one of the according again to this and other sources it's one of those top",
    "start": "58810",
    "end": "64658"
  },
  {
    "text": "five programming languages in terms of usage and so it has despite having been",
    "start": "64659",
    "end": "71079"
  },
  {
    "text": "mostly on Windows for most of its life it's it's succeeded in penetrating quite",
    "start": "71079",
    "end": "76329"
  },
  {
    "text": "far into the market and now being cross-platform in earnest both in terms of development environment and target",
    "start": "76329",
    "end": "82569"
  },
  {
    "text": "environment that's the certainty the sky's the limit here of course Java is still up there that",
    "start": "82569",
    "end": "89140"
  },
  {
    "text": "must be must be those Java wildcards that are that are keeping it head so but",
    "start": "89140",
    "end": "95679"
  },
  {
    "text": "other than that they also measure the most loved languages and the way they do that I think is these they say like the",
    "start": "95679",
    "end": "101950"
  },
  {
    "start": "100000",
    "end": "273000"
  },
  {
    "text": "percentage of users of the language who would like to keep using it thank you very much and and so this is sort of a",
    "start": "101950",
    "end": "108520"
  },
  {
    "text": "this is the place for the smaller languages to get a chance to shine like the with very devoted followers and the",
    "start": "108520",
    "end": "114789"
  },
  {
    "text": "thing I'm essentially the thing I'm proud of is that we're even on the top 10 with c-sharp here it's it's it's one of the most loved languages so we're on",
    "start": "114789",
    "end": "121029"
  },
  {
    "text": "both of those and but it also kind of it",
    "start": "121029",
    "end": "126219"
  },
  {
    "text": "challenges us as the stewards of this language to to try to keep it that way",
    "start": "126219",
    "end": "131890"
  },
  {
    "text": "like once you get appreciation you hate loosing it right so we kind of we need to keep getting that reaffirmation",
    "start": "131890",
    "end": "137440"
  },
  {
    "text": "that fix of appreciation there so not",
    "start": "137440",
    "end": "143380"
  },
  {
    "text": "particularly for that reason but we we thought about what is what is it that",
    "start": "143380",
    "end": "148420"
  },
  {
    "text": "make people like C sharp and we don't actually know we don't have hard data",
    "start": "148420",
    "end": "154750"
  },
  {
    "text": "but one of the things that we've always done that seems to keep working is that we've we started out looking a little",
    "start": "154750",
    "end": "162340"
  },
  {
    "text": "bit like some other languages that were around at the time to just be very vague about it and but we've sort of taken a",
    "start": "162340",
    "end": "171280"
  },
  {
    "text": "very aggressive stance on involving the language as we went and if anybody was here for you probably a lot of you were",
    "start": "171280",
    "end": "177010"
  },
  {
    "text": "here for the previous talk about go in a sense we have sort of the opposite evolution strategy of go in that we are",
    "start": "177010",
    "end": "183850"
  },
  {
    "text": "very eager to keep the language fresh if you will to keep it up-to-date with SS",
    "start": "183850",
    "end": "189550"
  },
  {
    "text": "challenges and and the sort of domain of",
    "start": "189550",
    "end": "195040"
  },
  {
    "text": "software development changes we want to keep C sharp moving along and B and be a",
    "start": "195040",
    "end": "201640"
  },
  {
    "text": "good choice for for those new challenges as well as when programming languages around us evolve and come up with new",
    "start": "201640",
    "end": "207610"
  },
  {
    "text": "ideas we want to see we want to borrow some of those good ideas into the language and and evolve the the",
    "start": "207610",
    "end": "214870"
  },
  {
    "text": "development experience so that means that we're there's always a scale between not doing enough in your",
    "start": "214870",
    "end": "222340"
  },
  {
    "text": "language and eventually you probably become a dinosaur you become a language that people are maintaining code in but",
    "start": "222340",
    "end": "228850"
  },
  {
    "text": "they're not starting many new projects in it and if you add too much to the language then you might die the the",
    "start": "228850",
    "end": "235239"
  },
  {
    "text": "death of of a thousand cuts like you'll be some behemoth that people can't",
    "start": "235239",
    "end": "240580"
  },
  {
    "text": "really use anymore either way your language can just run out of steam because the foundational principles no",
    "start": "240580",
    "end": "248170"
  },
  {
    "text": "longer apply sorry you know out of business but we're very much on the let's evolve aggressively kind of side",
    "start": "248170",
    "end": "254440"
  },
  {
    "text": "let's try to be a state-of-the-art language for development for for like professional developers and that's let's",
    "start": "254440",
    "end": "261100"
  },
  {
    "text": "push the envelope and sometimes lets us be the ones that push the state of the art not just keep up with it and so",
    "start": "261100",
    "end": "268930"
  },
  {
    "text": "that's sort of to lead into what this talk is about too because instead of talking about oh what's new and c-sharp 7.2 as opposed to",
    "start": "268930",
    "end": "276940"
  },
  {
    "start": "273000",
    "end": "340000"
  },
  {
    "text": "C sharp 7 find one and all that stuff I assume many of you aren't actually c-sharp programmers to begin with actually let's let's do a poll how many",
    "start": "276940",
    "end": "283480"
  },
  {
    "text": "people here are c-sharp developers okay that was actually a lot but you see like",
    "start": "283480",
    "end": "289810"
  },
  {
    "text": "that's just because you're such a popular programming languages no there's no bias in the room I'm sure so ok who",
    "start": "289810",
    "end": "296620"
  },
  {
    "text": "who did not put up their hand before ok so ok had more than a smattering so I I",
    "start": "296620",
    "end": "306580"
  },
  {
    "text": "kind of wanted to not just do the what's the next in c-sharp but but give a little bit of where do we think we're",
    "start": "306580",
    "end": "313300"
  },
  {
    "text": "headed slightly longer to him hopefully with some things that are interesting even if you are not about to write your",
    "start": "313300",
    "end": "319870"
  },
  {
    "text": "next t-shirt project or consider adopting the language just just more than the fun side so we're looking at",
    "start": "319870",
    "end": "328150"
  },
  {
    "text": "some of those problems that have been dogging us for years and years and years and here's one the the null problem that",
    "start": "328150",
    "end": "335500"
  },
  {
    "text": "we all face that's actually you know let's go and let's go and throw an",
    "start": "335500",
    "end": "340600"
  },
  {
    "text": "exception so um I have a fund with no",
    "start": "340600",
    "end": "345990"
  },
  {
    "text": "program here this program has a bug I am creating a person with the first name",
    "start": "345990",
    "end": "352600"
  },
  {
    "text": "and a last name I asked for the length of the middle name the implementation of",
    "start": "352600",
    "end": "357850"
  },
  {
    "text": "that takes the middle name and grabs a length of it and returns it it's completely straightforward and yet of",
    "start": "357850",
    "end": "363160"
  },
  {
    "text": "course as you probably suspected if we",
    "start": "363160",
    "end": "368430"
  },
  {
    "text": "if we run this program we will immediately get an exception and I'll",
    "start": "368430",
    "end": "373840"
  },
  {
    "text": "reference exception because hey the guy didn't have a middle name was null okay well that sucks how many people in here",
    "start": "373840",
    "end": "380530"
  },
  {
    "text": "actually like getting retinol reference exceptions there's one down there is",
    "start": "380530",
    "end": "386500"
  },
  {
    "text": "that because it helps you find your bugs you I couldn't even hear that but",
    "start": "386500",
    "end": "394980"
  },
  {
    "text": "okay it's alright that's always someone who wants to be interesting and and you",
    "start": "395689",
    "end": "402479"
  },
  {
    "text": "are sir you are so the the problem is",
    "start": "402479",
    "end": "409050"
  },
  {
    "text": "obvious right but if there's no single place in the code that's to blame that's always a problem with that kind of",
    "start": "409050",
    "end": "414419"
  },
  {
    "text": "feature like every reference type in in the language just like in most other",
    "start": "414419",
    "end": "420240"
  },
  {
    "text": "object going to languages at least every object type allows nulls and who's to",
    "start": "420240",
    "end": "426119"
  },
  {
    "text": "blame the one who put the null in there the one who didn't check that it was there before they took it out that's",
    "start": "426119",
    "end": "432089"
  },
  {
    "text": "that's the kind of problem that that has been dogging us for years of course there are there are programming",
    "start": "432089",
    "end": "438719"
  },
  {
    "start": "438000",
    "end": "504000"
  },
  {
    "text": "languages that don't have this kind of problem so if we go back to the to the",
    "start": "438719",
    "end": "447059"
  },
  {
    "text": "slides here the you know lots of functional programming languages for instance they don't have a null problem",
    "start": "447059",
    "end": "452639"
  },
  {
    "text": "they don't have a this concept of null that can go into every type they have maybe they have discriminated unions",
    "start": "452639",
    "end": "458610"
  },
  {
    "text": "that describe an option type that can be either nothing or none or whatever they",
    "start": "458610",
    "end": "466860"
  },
  {
    "text": "call it or it can be it can be some of tea or tea some type and so they have a",
    "start": "466860",
    "end": "475669"
  },
  {
    "text": "type construct that means that you can clearly distinguish by by the thing",
    "start": "475669",
    "end": "482159"
  },
  {
    "text": "whether it's null and not but you're also forced to whenever you want to consume an option you're forced to do a",
    "start": "482159",
    "end": "487769"
  },
  {
    "text": "pattern match on it or some kind of check and and go down either one route or the other depending on whether it's",
    "start": "487769",
    "end": "492930"
  },
  {
    "text": "the summer and all this the language just by construction does not allow you to dereference and nothing so so that's",
    "start": "492930",
    "end": "501479"
  },
  {
    "text": "kind of nice unfortunately we already we already have a language here and we",
    "start": "501479",
    "end": "507059"
  },
  {
    "start": "504000",
    "end": "603000"
  },
  {
    "text": "already have a lot of code we have like billions of lines of code they're doing they're dealing with us already and so",
    "start": "507059",
    "end": "513630"
  },
  {
    "text": "we can't just go and say oh let's do null differently that's not a solution for c-sharp and honestly in many lands",
    "start": "513630",
    "end": "521459"
  },
  {
    "text": "of languages it probably would be a good fit anyway so but there's something we",
    "start": "521459",
    "end": "527819"
  },
  {
    "text": "can learn from it which is that there's an expression of intent like immediately when you declare a type you say whether it's a tea or an option",
    "start": "527819",
    "end": "534390"
  },
  {
    "text": "of tea in those discriminated union terms or you say that you could sort of imagine expressing whether this",
    "start": "534390",
    "end": "541350"
  },
  {
    "text": "particular thing this variable of this return type of whatever whether it's supposed to be NOLA not right express",
    "start": "541350",
    "end": "546660"
  },
  {
    "text": "your intent and you're already sort of halfway there now you know who to blame right that's the thing from before if",
    "start": "546660",
    "end": "552630"
  },
  {
    "text": "you have expressed your intent with the thing then either it's being abused on the one side or the other side like",
    "start": "552630",
    "end": "558180"
  },
  {
    "text": "either you send a null that wasn't supposed to be there or you do reference the null that that wasn't supposed to be",
    "start": "558180",
    "end": "563610"
  },
  {
    "text": "there that you hadn't checked for right so expression of intent then enforcement of that intent that those should be the",
    "start": "563610",
    "end": "569970"
  },
  {
    "text": "components of a solution to this and and yes we have this challenge it has to be within an existing language there all",
    "start": "569970",
    "end": "576060"
  },
  {
    "text": "these billions of lines of code they're actually probably millions of those billions of lines have been actually",
    "start": "576060",
    "end": "581310"
  },
  {
    "text": "probably tested and and are actually probably null safe and so we don't want to have a solution that goes over all",
    "start": "581310",
    "end": "589050"
  },
  {
    "text": "your code and says it is all wrong you have to rewrite everything it has to be one that is gentle with existing code",
    "start": "589050",
    "end": "595860"
  },
  {
    "text": "and fits well with what people do today to deal with nulls okay so that's that's",
    "start": "595860",
    "end": "602550"
  },
  {
    "text": "what we're going to try to do so to the",
    "start": "602550",
    "end": "608040"
  },
  {
    "start": "603000",
    "end": "653000"
  },
  {
    "text": "expression of intent thing first there's",
    "start": "608040",
    "end": "613140"
  },
  {
    "text": "one approach you could take to say okay the the object types in c-sharp reference types the they're already dead",
    "start": "613140",
    "end": "619500"
  },
  {
    "text": "like too bad man they they just they're just inherently wrong they're legacy so",
    "start": "619500",
    "end": "626460"
  },
  {
    "text": "we can't get rid of them so let's introduce two new kinds of types let's introduce the nut inaudible reference types and the properly safely nullable",
    "start": "626460",
    "end": "633270"
  },
  {
    "text": "reference types and then there's these legacy ones in the middle and then you get some something like this where you",
    "start": "633270",
    "end": "639030"
  },
  {
    "text": "you annotate everything I don't think",
    "start": "639030",
    "end": "644910"
  },
  {
    "text": "the yellow markups and the bold would be in your in your source but other than",
    "start": "644910",
    "end": "650280"
  },
  {
    "text": "that and and that doesn't really that's not really feel like a good solution because it over emphasizes it kind of",
    "start": "650280",
    "end": "661440"
  },
  {
    "start": "653000",
    "end": "694000"
  },
  {
    "text": "leaves the good syntax the one that doesn't have the one that doesn't swear at you it leaves that for",
    "start": "661440",
    "end": "666570"
  },
  {
    "text": "the things that you're supposed to no longer do which is to be unsafely nullable in the old-fashioned way the legacy way and it also means that all",
    "start": "666570",
    "end": "674400"
  },
  {
    "text": "existing code you get no help like it's just existing code is dead in the water until you go in and start doctoring it",
    "start": "674400",
    "end": "680400"
  },
  {
    "text": "and and swearing all over your code with punctuation you get nothing from the",
    "start": "680400",
    "end": "685590"
  },
  {
    "text": "future so while this might immediately feel like the safe route to take it's also the useless route so we're not",
    "start": "685590",
    "end": "692880"
  },
  {
    "text": "going to do that so what we want to do instead is to assume that when you don't",
    "start": "692880",
    "end": "701130"
  },
  {
    "start": "694000",
    "end": "736000"
  },
  {
    "text": "say otherwise you don't mean no okay so yep there's some code out there that",
    "start": "701130",
    "end": "707970"
  },
  {
    "text": "doesn't follow those guidelines and then when you do me know you put a question mark on it on the type and now it's a",
    "start": "707970",
    "end": "715680"
  },
  {
    "text": "nullable thing okay express our intent god we now repurposed existing syntax to",
    "start": "715680",
    "end": "721650"
  },
  {
    "text": "mean something new we now set string without annotation that means none nullable string",
    "start": "721650",
    "end": "728820"
  },
  {
    "text": "we like the syntax if we were designing c-sharp from scratch this is certainly",
    "start": "728820",
    "end": "734130"
  },
  {
    "text": "the kind of syntax we would like but now the question of enforcement comes up",
    "start": "734130",
    "end": "739460"
  },
  {
    "start": "736000",
    "end": "863000"
  },
  {
    "text": "enforcement has to it has to do things do two things essentially has to protect",
    "start": "739460",
    "end": "745560"
  },
  {
    "text": "none all types from nulls so you say it's not null let's not put nulls in there and it has to protect the nulls",
    "start": "745560",
    "end": "751800"
  },
  {
    "text": "that are there and are allowed to be there from being the referenced at least without being checked first that there",
    "start": "751800",
    "end": "759150"
  },
  {
    "text": "weren't actually not okay but because we repurposing existing syntax this has to be an optional check like so we",
    "start": "759150",
    "end": "765150"
  },
  {
    "text": "essentially we want some checks that you can consume turn on and say now start",
    "start": "765150",
    "end": "772190"
  },
  {
    "text": "start enforcing this on my code and see where it leads me and that should hopefully be that should hopefully lead",
    "start": "772190",
    "end": "778710"
  },
  {
    "text": "you down a path where if you a few questions and a patient's later you're in a good spot and a few fixings of bugs",
    "start": "778710",
    "end": "785490"
  },
  {
    "text": "which is the whole like the whole point is this has to be useful an existing code it has to flag things that weren't",
    "start": "785490",
    "end": "792750"
  },
  {
    "text": "flag before so just for backwards compatibility it has to be something and you turn on when you're ready to be",
    "start": "792750",
    "end": "797970"
  },
  {
    "text": "told that the code did you have today isn't good enough also because it's",
    "start": "797970",
    "end": "804960"
  },
  {
    "text": "optional like it can't affect the semantics of the language in any significant way can really only be about giving you warnings must do a good job",
    "start": "804960",
    "end": "812670"
  },
  {
    "text": "with existing code I kind of set that already and it unfortunately can't be",
    "start": "812670",
    "end": "819030"
  },
  {
    "text": "exhaustive it can't give you guarantees so this is this is one major concession like we're saying this is not about",
    "start": "819030",
    "end": "825660"
  },
  {
    "text": "guaranteeing that your code is null bug free this is about maybe an 80/20 right",
    "start": "825660",
    "end": "831270"
  },
  {
    "text": "you get maybe 80% of your of your null reference exception bugs you get those",
    "start": "831270",
    "end": "836400"
  },
  {
    "text": "at compile time there'll be some left and there'll be places where we deliberately we're either way we just that we can't do the right thing right",
    "start": "836400",
    "end": "843200"
  },
  {
    "text": "thing in terms of correct or we won't because it's too inconvenient in terms",
    "start": "843200",
    "end": "848250"
  },
  {
    "text": "of existing code or even in terms of the new code you have to write and we'll see examples of that so I'm going to let me",
    "start": "848250",
    "end": "855690"
  },
  {
    "text": "see yes I'm going to go back to that slide and switch over to a prototype we",
    "start": "855690",
    "end": "862710"
  },
  {
    "text": "have of that's actually the code I was in before the fun with null a prototype",
    "start": "862710",
    "end": "868110"
  },
  {
    "start": "863000",
    "end": "958000"
  },
  {
    "text": "we have of a compiler that does these things so let's see it fix our bug there",
    "start": "868110",
    "end": "873240"
  },
  {
    "text": "are warnings in this code but that's because they're warnings in this code this is a person class declaration okay",
    "start": "873240",
    "end": "879300"
  },
  {
    "text": "so I I'm starting out I have two",
    "start": "879300",
    "end": "885330"
  },
  {
    "text": "constructors I have one that takes all three of the first middle and last names I have one that takes just two of them",
    "start": "885330",
    "end": "890850"
  },
  {
    "text": "because middle name is optional but I'm getting a warning here so this might be",
    "start": "890850",
    "end": "896070"
  },
  {
    "text": "existing code you have today I'm getting a warning saying hey you have an unknowable property called middle name",
    "start": "896070",
    "end": "902280"
  },
  {
    "text": "which is not being initialized oh well I guess I can initialize it let me in",
    "start": "902280",
    "end": "909780"
  },
  {
    "text": "issue let me Oh interesting I don't get",
    "start": "909780",
    "end": "915540"
  },
  {
    "text": "to write code today as I said a",
    "start": "915540",
    "end": "922020"
  },
  {
    "text": "prototype why don't we just sneak on out of here and I think of",
    "start": "922020",
    "end": "929449"
  },
  {
    "text": "thing to say well it starts up again this prototype little secret not too",
    "start": "929449",
    "end": "938179"
  },
  {
    "text": "secret I guess room is big the prototype goes public couple of days from now and",
    "start": "938179",
    "end": "946929"
  },
  {
    "text": "so you also get to nut type code",
    "start": "946929",
    "end": "951459"
  },
  {
    "text": "there you go see works now just restart so let's initialize the middle name to",
    "start": "953649",
    "end": "961429"
  },
  {
    "start": "958000",
    "end": "1011000"
  },
  {
    "text": "null so you see what the warning was good right it told you everything that",
    "start": "961429",
    "end": "968149"
  },
  {
    "text": "you declared that is that is supposed to be none nullable well it's null by default so if you don't initialize it",
    "start": "968149",
    "end": "974359"
  },
  {
    "text": "somewhere it's going to stay null and whoever creates you is gonna get",
    "start": "974359",
    "end": "979730"
  },
  {
    "text": "something with a null in it that you'd say said wasn't gonna be there so okay I'm gonna initialize it then now of",
    "start": "979730",
    "end": "986629"
  },
  {
    "text": "course I get another error saying you can't so I help so that one warning went away but this one says hey you can't put",
    "start": "986629",
    "end": "991790"
  },
  {
    "text": "null in an unknowable thing well guess what this is probably a point where you realize if not before okay let's go and",
    "start": "991790",
    "end": "998149"
  },
  {
    "text": "annotate this gate it's actually supposed to be no I actually want to advertise to my consumers that they",
    "start": "998149",
    "end": "1003579"
  },
  {
    "text": "might risk running into a null here great I've done that all my warnings have gone away so happy now no I'm not",
    "start": "1003579",
    "end": "1013629"
  },
  {
    "start": "1011000",
    "end": "1038000"
  },
  {
    "text": "happy now because now that I've entertained my class correctly now I",
    "start": "1013629",
    "end": "1019989"
  },
  {
    "text": "start getting morning's in the consuming code saying yo bud you are taking a",
    "start": "1019989",
    "end": "1026230"
  },
  {
    "text": "nullable thing and assigning it into an unknowable thing you might want to think about that okay yo bud your",
    "start": "1026230",
    "end": "1039668"
  },
  {
    "start": "1038000",
    "end": "1078000"
  },
  {
    "text": "dereferencing and nullable reference type you might want to think about that",
    "start": "1039669",
    "end": "1045209"
  },
  {
    "text": "okay so so here you might go so um what I need to do here this is where okay so",
    "start": "1045209",
    "end": "1051669"
  },
  {
    "text": "this way it comes in we're fitting in with what people do today is important so the so what I need to do now is to",
    "start": "1051669",
    "end": "1057279"
  },
  {
    "text": "convince the compiler that this thing is not actually null when I do reference it I can't",
    "start": "1057279",
    "end": "1062980"
  },
  {
    "text": "this right here because it is actually sometimes null okay so I have to make it so that it isn't one way to and the",
    "start": "1062980",
    "end": "1069460"
  },
  {
    "text": "compiler is then going to actually do a flow analysis on my code and see if it can figure out that the thing is null",
    "start": "1069460",
    "end": "1075730"
  },
  {
    "text": "and let me do it so if I say if middle name is null return zero for instance so",
    "start": "1075730",
    "end": "1086320"
  },
  {
    "start": "1078000",
    "end": "1163000"
  },
  {
    "text": "I just have a default implementation there you see the warning goes away right flow analysis said yes you're the",
    "start": "1086320",
    "end": "1091450"
  },
  {
    "text": "referencing a Nile bowl a nullable thing here but you can't get here if it's null so I'm fine with it okay so this is code",
    "start": "1091450",
    "end": "1098500"
  },
  {
    "text": "this is correct code that you might have written before and so if if your code",
    "start": "1098500",
    "end": "1103630"
  },
  {
    "text": "was already doing the right thing you wouldn't get a warning right this is how we try to make the feature non-intrusive to existing code if you are already good",
    "start": "1103630",
    "end": "1110520"
  },
  {
    "text": "nine times nine times out of ten the the thing won't won't complain of course",
    "start": "1110520",
    "end": "1118660"
  },
  {
    "text": "there are other ways that you can you can fix it's pretty pretty much up to you I could another thing I could do is",
    "start": "1118660",
    "end": "1124390"
  },
  {
    "text": "I could assign to middle name here I could assign it the empty string now I",
    "start": "1124390",
    "end": "1129910"
  },
  {
    "text": "can get down here even if it was null before but again the compiler can see it's not null now like regardless of",
    "start": "1129910",
    "end": "1135429"
  },
  {
    "text": "which path it uses to come down here it won't be known when it gets here or you can there are the paths you can take we",
    "start": "1135429",
    "end": "1142270"
  },
  {
    "text": "can also use the we can use the questioned operator which is sort of no",
    "start": "1142270",
    "end": "1147760"
  },
  {
    "text": "conditional it says if that thing is is not null dereference otherwise make the",
    "start": "1147760",
    "end": "1153760"
  },
  {
    "text": "whole thing null but now the whole thing is nullable int so I could go and make you know I could go push that out to the",
    "start": "1153760",
    "end": "1159610"
  },
  {
    "text": "to the caller and now give give the error to them and so on you know I can push it around the way or",
    "start": "1159610",
    "end": "1164860"
  },
  {
    "start": "1163000",
    "end": "1238000"
  },
  {
    "text": "I can say I can use the null coalescing operator and say if that whole thing",
    "start": "1164860",
    "end": "1170590"
  },
  {
    "text": "isn't is is null return zero instead okay so all of these are ways I can fix",
    "start": "1170590",
    "end": "1176679"
  },
  {
    "text": "the problem that are valid were valid before a valid today and that the compiler realizes yeah good job okay so",
    "start": "1176679",
    "end": "1183010"
  },
  {
    "text": "it helps you'd help me find my bug help me fix it helped me realize where I",
    "start": "1183010",
    "end": "1188290"
  },
  {
    "text": "should annotate my types in my API so so that's that's the that's the purpose of this thing okay with me so far",
    "start": "1188290",
    "end": "1196650"
  },
  {
    "text": "so as long as you are not as you don't mind like getting pushed around a little bit in your existing code and fixing",
    "start": "1196840",
    "end": "1204460"
  },
  {
    "text": "some warnings again there are only warnings you you can you can find a lot",
    "start": "1204460",
    "end": "1209679"
  },
  {
    "text": "of those bugs before they happen in production which you know according to",
    "start": "1209679",
    "end": "1214799"
  },
  {
    "text": "Tony Hoare who who claims who proudly",
    "start": "1214799",
    "end": "1220120"
  },
  {
    "text": "claims inventor ship of the null pointer the he calls it his billion dollar",
    "start": "1220120",
    "end": "1227169"
  },
  {
    "text": "mistake in in talks which you should go and see and at least here we got some of",
    "start": "1227169",
    "end": "1232960"
  },
  {
    "text": "those billion dollars back right in that some of those null references don't happen now there are ways in which let's",
    "start": "1232960",
    "end": "1243120"
  },
  {
    "start": "1238000",
    "end": "1273000"
  },
  {
    "text": "fix this back to having a problem there ways in which you can fix it that don't that the compiler can't realize like we",
    "start": "1243120",
    "end": "1249909"
  },
  {
    "text": "could say if string that is null or empty it's a helper method and string takes",
    "start": "1249909",
    "end": "1258340"
  },
  {
    "text": "the middle name then return zero okay",
    "start": "1258340",
    "end": "1265570"
  },
  {
    "text": "well first of all that one should probably be fixed to take a nullable a noble string itself otherwise asking the",
    "start": "1265570",
    "end": "1272860"
  },
  {
    "text": "question is kind of dumb but also the compiler can't see that this actually doesn't all check for us it's another",
    "start": "1272860",
    "end": "1279490"
  },
  {
    "start": "1273000",
    "end": "1349000"
  },
  {
    "text": "function somewhere so we might need to think about other ways we're not going to do intro interprocedural analysis",
    "start": "1279490",
    "end": "1286240"
  },
  {
    "text": "here that's just too crazy but we might think about some ways that we can tweak we can like say and a given method",
    "start": "1286240",
    "end": "1291450"
  },
  {
    "text": "checks give an argument for null something like that we'll have to think about whether we can refine it but the",
    "start": "1291450",
    "end": "1296830"
  },
  {
    "text": "main thing is regardless of how much we refine it there's going to be times where you're smarter than the compiler",
    "start": "1296830",
    "end": "1302440"
  },
  {
    "text": "you know it's not null even though the compiler knows it doesn't know that it's not null and so for that ladies and",
    "start": "1302440",
    "end": "1308980"
  },
  {
    "text": "gentlemen we give you the damnit operator or that I know what I'm doing",
    "start": "1308980",
    "end": "1316899"
  },
  {
    "text": "operators it's a nicer version of that which we haven't decided on a name I",
    "start": "1316899",
    "end": "1322450"
  },
  {
    "text": "think maybe it's called to sort of the null absolving of the the null forgiving",
    "start": "1322450",
    "end": "1328000"
  },
  {
    "text": "operator or something like that essentially it says if you if it's a postfix operator you put it on an",
    "start": "1328000",
    "end": "1333470"
  },
  {
    "text": "expression that might that the compiler thinks might be no and you essentially take the warning away saying I know what",
    "start": "1333470",
    "end": "1339020"
  },
  {
    "text": "I'm doing don't worry so I can do that here but then I take responsibility essentially I'm back in the old times",
    "start": "1339020",
    "end": "1346010"
  },
  {
    "text": "where it was my problem okay so finally",
    "start": "1346010",
    "end": "1351050"
  },
  {
    "start": "1349000",
    "end": "1408000"
  },
  {
    "text": "you know that I talked about those places where we can't help you or we don't want to help you so an example of",
    "start": "1351050",
    "end": "1359630"
  },
  {
    "text": "where we probably should help you I'm taking the let's again go back to the",
    "start": "1359630",
    "end": "1365480"
  },
  {
    "text": "code from before I'm taking the the middle name here and I'm putting into a local variable that's because of some limitations in the prototype right now",
    "start": "1365480",
    "end": "1371660"
  },
  {
    "text": "but I should really be able to just say you do not have a local variable here and just say if peed on middle name",
    "start": "1371660",
    "end": "1379370"
  },
  {
    "text": "asked directly Peter if I could spell here appeared a middle name equals null",
    "start": "1379370",
    "end": "1385130"
  },
  {
    "text": "and all those things and then just say Peter the middle name down here as well I peed middle name so I should be able",
    "start": "1385130",
    "end": "1392360"
  },
  {
    "text": "to just as I was tracking a local variable before I should also be able to",
    "start": "1392360",
    "end": "1397790"
  },
  {
    "text": "track like dotted chains like these right say I I get out the Piton middle",
    "start": "1397790",
    "end": "1402920"
  },
  {
    "text": "name was null up here and then I left out so down here it won't be and so on I",
    "start": "1402920",
    "end": "1408320"
  },
  {
    "start": "1408000",
    "end": "1453000"
  },
  {
    "text": "can't do that yet but when I can which is the intention then there's going to",
    "start": "1408320",
    "end": "1414620"
  },
  {
    "text": "be this whole thing about what are the things that invalidate our assumptions",
    "start": "1414620",
    "end": "1419630"
  },
  {
    "text": "about a dotted chain what if I assigned one of the things in the dotted chain assigned something else well then",
    "start": "1419630",
    "end": "1425360"
  },
  {
    "text": "probably whatever I thought about the null ability of something further down the chain is invalidated and I can easily discover that from the compiler",
    "start": "1425360",
    "end": "1431630"
  },
  {
    "text": "but if I call a method with P Who am I to know if that method changes P or not",
    "start": "1431630",
    "end": "1438410"
  },
  {
    "text": "I can't really know so either I can be super defensive and then all the code in the world that does this which is",
    "start": "1438410",
    "end": "1443660"
  },
  {
    "text": "probably many millions of lines of code will get warnings all over the place or I'm forgiving and that means there would",
    "start": "1443660",
    "end": "1450080"
  },
  {
    "text": "be null bugs that I don't catch but we generally err on the side of being forgiving another thing let's say I have",
    "start": "1450080",
    "end": "1456650"
  },
  {
    "start": "1453000",
    "end": "1493000"
  },
  {
    "text": "a string array so actually can I",
    "start": "1456650",
    "end": "1463320"
  },
  {
    "text": "[Music] yeah let's say I have a string or a SS",
    "start": "1463350",
    "end": "1473380"
  },
  {
    "text": "here that is a new string every time that thing is going to be full of nulls",
    "start": "1473380",
    "end": "1480190"
  },
  {
    "text": "I'm creating an array it's full of nulls yet I said it was an array of string not an array of string",
    "start": "1480190",
    "end": "1486610"
  },
  {
    "text": "question mark so and you see I'm not",
    "start": "1486610",
    "end": "1493000"
  },
  {
    "start": "1493000",
    "end": "1530000"
  },
  {
    "text": "giving a warning on this that's just because that will be too inconvenient right yes I should really want whenever",
    "start": "1493000",
    "end": "1498100"
  },
  {
    "text": "you create an array of string I should really give a warning but that'll be like every array you're creating in the",
    "start": "1498100",
    "end": "1503260"
  },
  {
    "text": "whole world will now have a warning and we just don't want to do that to you and also how would we discover that you've",
    "start": "1503260",
    "end": "1510970"
  },
  {
    "text": "that you went and overrode all those nulls like would you some kind of fancy analysis check that you wrote to all the",
    "start": "1510970",
    "end": "1517540"
  },
  {
    "text": "indices and like we can't do that statically like we just not going to go there we're just going to leave that",
    "start": "1517540",
    "end": "1523330"
  },
  {
    "text": "alone and I'm sorry you're gonna have to still deal with those yourself that's your 10% that we don't fix okay so I",
    "start": "1523330",
    "end": "1531810"
  },
  {
    "start": "1530000",
    "end": "1553000"
  },
  {
    "text": "think that was what I had to say about nulls so this one we are working",
    "start": "1531810",
    "end": "1539020"
  },
  {
    "text": "actively on it's um let's go to the let's go to the",
    "start": "1539020",
    "end": "1544120"
  },
  {
    "text": "projection sorry projection went away let's project again so I think the next",
    "start": "1544120",
    "end": "1554860"
  },
  {
    "start": "1553000",
    "end": "1599000"
  },
  {
    "text": "major version of c-sharp will have this we're giving it out in prototype now so people can try it on that code basis and",
    "start": "1554860",
    "end": "1560020"
  },
  {
    "text": "come and tell us this part is too annoying this part is too forgiving and we can kind of fiddle and adjust find",
    "start": "1560020",
    "end": "1566110"
  },
  {
    "text": "out maybe the top ten refinements that we need to deal with common scenarios",
    "start": "1566110",
    "end": "1571360"
  },
  {
    "text": "maybe like the is null or empty or the first or default or whatever all those",
    "start": "1571360",
    "end": "1577270"
  },
  {
    "text": "things that have weird behavior to try pattern there things there where we",
    "start": "1577270",
    "end": "1583810"
  },
  {
    "text": "might want to help you more and and do some fiddly things right on the whole",
    "start": "1583810",
    "end": "1589950"
  },
  {
    "text": "that's kind of where we headed so any of you pick up that prototype couple days and and tell us what you",
    "start": "1589950",
    "end": "1596660"
  },
  {
    "text": "think that'd be great okay so that was one thing now I want to change gears",
    "start": "1596660",
    "end": "1602720"
  },
  {
    "start": "1599000",
    "end": "1627000"
  },
  {
    "text": "completely and happy that Phil is here today so let's actually go back to the",
    "start": "1602720",
    "end": "1613160"
  },
  {
    "text": "code before we before well on this slide I just I did all that work to get back to the slide and now I'm just going back",
    "start": "1613160",
    "end": "1619820"
  },
  {
    "text": "let's go back to some different code now let's go back to the same code let's go back to the same code okay so you notice",
    "start": "1619820",
    "end": "1628100"
  },
  {
    "start": "1627000",
    "end": "1650000"
  },
  {
    "text": "here that I have a half of this in my declaration of this method here so it",
    "start": "1628100",
    "end": "1635960"
  },
  {
    "text": "could it could be just a parameter but this year makes it an extension method which means that I can call it as an",
    "start": "1635960",
    "end": "1641929"
  },
  {
    "text": "instance method on Miguel up here I kind of glossed over this before this has been in c-sharp for almost a decade",
    "start": "1641929",
    "end": "1647630"
  },
  {
    "text": "this is extension methods so it's really great because I can have a declaration",
    "start": "1647630",
    "end": "1652910"
  },
  {
    "start": "1650000",
    "end": "1753000"
  },
  {
    "text": "here that extends the type that was over there that I didn't own pretends that it has some instance members that it didn't",
    "start": "1652910",
    "end": "1659630"
  },
  {
    "text": "actually wasn't declared with great that's actually fabulous from a from a",
    "start": "1659630",
    "end": "1665840"
  },
  {
    "text": "software engineering perspective it means that there all kinds of dependencies that I don't need to have and it gives me independent",
    "start": "1665840",
    "end": "1674960"
  },
  {
    "text": "extensibility but in a very limited way right I can only do it on method methods",
    "start": "1674960",
    "end": "1680480"
  },
  {
    "text": "I can't do it with properties or anything else and it's declared with this awful hack that there's a static",
    "start": "1680480",
    "end": "1686000"
  },
  {
    "text": "method that has an extra modifier on its first parameter saying that this first parameter can actually pretend that it's",
    "start": "1686000",
    "end": "1691850"
  },
  {
    "text": "a receiver and this syntactic hack if you will I kind of I we've regretted",
    "start": "1691850",
    "end": "1699679"
  },
  {
    "text": "that for a long time I think because it meant that there was no clear syntactic path to extend the declaration syntax to",
    "start": "1699679",
    "end": "1708860"
  },
  {
    "text": "have extensions of other kinds of members could only be done for methods if you want to do extension properties",
    "start": "1708860",
    "end": "1715250"
  },
  {
    "text": "well properties don't I get you know static properties don't have a first a first parameter that you can annotate",
    "start": "1715250",
    "end": "1721700"
  },
  {
    "text": "you could invent a syntax for giving them one but yeah we actually went pretty far down that path in c-sharp for",
    "start": "1721700",
    "end": "1727190"
  },
  {
    "text": "and then we had to all out because it was yucky and so we've been struggling with this for a",
    "start": "1727190",
    "end": "1733309"
  },
  {
    "text": "long time and eventually I think the realist realization comes - yeah okay we bet we went into a dead end we can't",
    "start": "1733309",
    "end": "1739700"
  },
  {
    "text": "push through the wall that's at the end of it let's actually back out and come up with some other declaration syntax instead and that's what that's what that",
    "start": "1739700",
    "end": "1747710"
  },
  {
    "text": "slide was about that's what extension everything is about so the idea we find",
    "start": "1747710",
    "end": "1755419"
  },
  {
    "start": "1753000",
    "end": "1825000"
  },
  {
    "text": "it quite powerful that this piece of source code here can from the point of",
    "start": "1755419",
    "end": "1760519"
  },
  {
    "text": "view of sort of scope based from point of view of the ones who can see the declarations down here that thing up",
    "start": "1760519",
    "end": "1766909"
  },
  {
    "text": "there has to sext remembers right its scope based extension based on the static scope okay that thing is here",
    "start": "1766909",
    "end": "1775250"
  },
  {
    "text": "that means I know more about the type than it they need new so that's very",
    "start": "1775250",
    "end": "1781340"
  },
  {
    "text": "useful you can imagine static or instance members of different kinds methods properties constructors even",
    "start": "1781340",
    "end": "1789259"
  },
  {
    "text": "just pretty and this this new declaration syntax here just sort of makes it look like it's a type declaration it's sort of like you were",
    "start": "1789259",
    "end": "1796250"
  },
  {
    "text": "actually creating a derived class a subclass but you're not your so you have access",
    "start": "1796250",
    "end": "1802279"
  },
  {
    "text": "to this to talk about the the person object itself and and the whole syntax",
    "start": "1802279",
    "end": "1807620"
  },
  {
    "text": "looks as if it's much it's a much more full syntax for this stuff but it's a new kind of declaration that looks like",
    "start": "1807620",
    "end": "1813440"
  },
  {
    "text": "a type declaration but it's different so that gives extra expressiveness and",
    "start": "1813440",
    "end": "1818450"
  },
  {
    "text": "you can imagine that we can rewrite this under the hood to do the right things whenever let's actually let's compact",
    "start": "1818450",
    "end": "1825950"
  },
  {
    "text": "all that declaration take the comments out and see usage right so now I'm creating a person match Torgerson using",
    "start": "1825950",
    "end": "1834620"
  },
  {
    "text": "the extension constructor that makes him a student of Tony Hoare I wish I really wish I believed Li become a student of",
    "start": "1834620",
    "end": "1842570"
  },
  {
    "text": "Tony Hoare in my trying to deal with the nulls and with your Tony so this is all",
    "start": "1842570",
    "end": "1848929"
  },
  {
    "text": "dreamland but okay and I can I can access the property get my supervisor out which is Tony Hoare I could actually",
    "start": "1848929",
    "end": "1858019"
  },
  {
    "text": "change my supervisor to be filled water if I want it and you know access things",
    "start": "1858019",
    "end": "1866000"
  },
  {
    "text": "in access static members on person as if they were declared a static members in person as well they're the whole",
    "start": "1866000",
    "end": "1873110"
  },
  {
    "text": "collection of students so that's very nice I think that would be a good improvement in and of itself I might do this as soon as the next major release",
    "start": "1873110",
    "end": "1878330"
  },
  {
    "text": "if we can get all our ducks in a row but I think part of the interesting thing",
    "start": "1878330",
    "end": "1885140"
  },
  {
    "text": "here is where could this lead next what is the bigger thing that this could lead",
    "start": "1885140",
    "end": "1890240"
  },
  {
    "text": "to now we talked about the software engineering principle of saying more about existing types there are actually",
    "start": "1890240",
    "end": "1896090"
  },
  {
    "text": "other languages that do very interesting things with that Haskell is one of them well Haskell has what's called type",
    "start": "1896090",
    "end": "1902960"
  },
  {
    "text": "classes which lets you essentially say declare I kind of think of it as an",
    "start": "1902960",
    "end": "1908510"
  },
  {
    "text": "interface but that's very wobbly I'd say",
    "start": "1908510",
    "end": "1914150"
  },
  {
    "text": "that that thing up there actually implements this interface over here as well and here's how so imagine that we",
    "start": "1914150",
    "end": "1921110"
  },
  {
    "text": "have an interface I student that's declared independently a person and person doesn't know anything about it",
    "start": "1921110",
    "end": "1926180"
  },
  {
    "text": "maybe it's declared together with professor right they kind of belong together and that's an interface that I",
    "start": "1926180",
    "end": "1931370"
  },
  {
    "text": "can put on different things in the old-fashioned way but I can also as I'm extending students with members I could",
    "start": "1931370",
    "end": "1938090"
  },
  {
    "text": "also say that from my point of view in this scope over here person implements I",
    "start": "1938090",
    "end": "1943250"
  },
  {
    "text": "student it implements that interface and I highlight it two of the two of the",
    "start": "1943250",
    "end": "1949610"
  },
  {
    "text": "extension methods that help it do so these are witnesses in in Haskell speak to the how these explain how person",
    "start": "1949610",
    "end": "1958760"
  },
  {
    "text": "implements I student right and the third one the name is actually in person itself right so that's that's implicitly",
    "start": "1958760",
    "end": "1966350"
  },
  {
    "text": "implemented by a person itself so now we took a big step further and we actually",
    "start": "1966350",
    "end": "1973160"
  },
  {
    "text": "allowed a an existing type to assume a",
    "start": "1973160",
    "end": "1979100"
  },
  {
    "text": "new type and and also be able to be used a type that's also able to be used as a",
    "start": "1979100",
    "end": "1986480"
  },
  {
    "text": "constraint and generics and the old type being supplied to that as long as we're in the scope where all this is known so",
    "start": "1986480",
    "end": "1994340"
  },
  {
    "text": "I think that can that can give some serious expressiveness so I want to show a more",
    "start": "1994340",
    "end": "2001000"
  },
  {
    "text": "type classy example and this one assumes this one so let's just say that we're",
    "start": "2001000",
    "end": "2007179"
  },
  {
    "text": "doing this with interfaces it might actually not be that we might be that we can't do it with interfaces but well I think we'll try to push on it",
    "start": "2007179",
    "end": "2012850"
  },
  {
    "text": "we might need a separate abstraction mechanism just assume let's say that we we push on interfaces so they can also",
    "start": "2012850",
    "end": "2018400"
  },
  {
    "text": "express abstractly the requirement to have some static members not just instance ones this is saying that",
    "start": "2018400",
    "end": "2026320"
  },
  {
    "text": "whichever class implements this has to have a static property that gives you a",
    "start": "2026320",
    "end": "2031809"
  },
  {
    "text": "zero value of some T that we're parameterised over and it has a plus",
    "start": "2031809",
    "end": "2036870"
  },
  {
    "text": "operation on those so that's a that's a",
    "start": "2036870",
    "end": "2041980"
  },
  {
    "text": "group in math speak and T what's that do",
    "start": "2041980",
    "end": "2047860"
  },
  {
    "text": "I need negation in a group as well yeah you're right what is this M oh no sorry yeah yeah thank you so it's not a group",
    "start": "2047860",
    "end": "2054840"
  },
  {
    "text": "but it's close enough yeah for",
    "start": "2054840",
    "end": "2061388"
  },
  {
    "text": "presentation purposes I deliberately whatever so now I want to go say that",
    "start": "2061389",
    "end": "2073080"
  },
  {
    "start": "2072000",
    "end": "2131000"
  },
  {
    "text": "and that it's the existing hints that are at the core of the language they're actually they were sent a mono ID where",
    "start": "2073080",
    "end": "2081010"
  },
  {
    "text": "the zero value is zero and and the plus",
    "start": "2081010",
    "end": "2087190"
  },
  {
    "text": "operator is inherited from from int itself and just means plus okay",
    "start": "2087190",
    "end": "2093310"
  },
  {
    "text": "but actually you could you could implement mono in a different way over int I'm put it on the slide you could",
    "start": "2093310",
    "end": "2099040"
  },
  {
    "text": "also have int are also a monoid over multiplication so you could instead have",
    "start": "2099040",
    "end": "2104200"
  },
  {
    "text": "said you could have rewired may be using some syntax plus on the on the group to",
    "start": "2104200",
    "end": "2113140"
  },
  {
    "text": "mean multiplication on the on the actual int and now we get into like what kind of shadowing do we want under stuff and",
    "start": "2113140",
    "end": "2119770"
  },
  {
    "text": "then and then zero would mean one because that's a zero that's a neutral element under multiple",
    "start": "2119770",
    "end": "2127050"
  },
  {
    "text": "so I make something doing this extending thing again and then I can once I can do",
    "start": "2127050",
    "end": "2132360"
  },
  {
    "start": "2131000",
    "end": "2295000"
  },
  {
    "text": "that then we can get to this thing that all many of us languages have been struggling with for awhile which is",
    "start": "2132360",
    "end": "2138630"
  },
  {
    "text": "proper abstraction over numeric over numeric algorithms right how do you",
    "start": "2138630",
    "end": "2145280"
  },
  {
    "text": "abstract over numeric Ness in a way that's expressive enough that you can write an algorithm using all the",
    "start": "2145280",
    "end": "2152700"
  },
  {
    "text": "operators and everything beautifully yet it applies to anything numeric from from",
    "start": "2152700",
    "end": "2158880"
  },
  {
    "text": "intz all the way up to matrices and and",
    "start": "2158880",
    "end": "2166160"
  },
  {
    "text": "tensors and all those like bigger things complex numbers and whatnot and as long",
    "start": "2166160",
    "end": "2173460"
  },
  {
    "text": "as they have certain operations right they can be represented by one of these super interfaces so I think that that in",
    "start": "2173460",
    "end": "2181050"
  },
  {
    "text": "here also lies the possibility to move into that kind of expressiveness",
    "start": "2181050",
    "end": "2186180"
  },
  {
    "text": "essentially the the language was stealing from here is is ultimately Haskell and there are several languages",
    "start": "2186180",
    "end": "2192300"
  },
  {
    "text": "that that are pushing in that direction one way or another there's some real expressiveness there and a there the",
    "start": "2192300",
    "end": "2198030"
  },
  {
    "text": "challenge honestly the two challenges here one is to massage it all deeply",
    "start": "2198030",
    "end": "2205080"
  },
  {
    "text": "enough into the language that it feels natural in c-sharp and let go so many",
    "start": "2205080",
    "end": "2210330"
  },
  {
    "text": "things we do many things we steal like pattern matching that we already stole going to continue to steal more of takes",
    "start": "2210330",
    "end": "2217200"
  },
  {
    "text": "a lot of massaging a lot of design work to make it feel like oh that's just so",
    "start": "2217200",
    "end": "2222690"
  },
  {
    "text": "c-sharp it just really isn't when you see it in its f sharp for meit's haskell form or whatever and we'd have to do",
    "start": "2222690",
    "end": "2229770"
  },
  {
    "text": "something similar here the other thing is to make sure that this is performant at runtime like this is efficient we probably if we want to use interfaces",
    "start": "2229770",
    "end": "2236160"
  },
  {
    "text": "for this we certainly need to add to the runtime to be able to express to make",
    "start": "2236160",
    "end": "2242130"
  },
  {
    "text": "interfaces more expressive if we don't want to use interfaces then it's actually a prototype from Microsoft",
    "start": "2242130",
    "end": "2248310"
  },
  {
    "text": "Research in Cambridge people were working with there that has a variant",
    "start": "2248310",
    "end": "2253380"
  },
  {
    "text": "efficient implementation of type classes on top of the existing CLR runtime which",
    "start": "2253380",
    "end": "2259140"
  },
  {
    "text": "is they use some fabulous tricks that I might share over drinks if you pay the",
    "start": "2259140",
    "end": "2265140"
  },
  {
    "text": "drinks so so that's extension everything",
    "start": "2265140",
    "end": "2270150"
  },
  {
    "text": "I think that was ever no that's here's the last bit of it is call just to bring it all together right called the generic",
    "start": "2270150",
    "end": "2276900"
  },
  {
    "text": "method on an array of intz in a place where we know where we have a witness to",
    "start": "2276900",
    "end": "2281940"
  },
  {
    "text": "the fact that intz are actually one of these things and type infer that it's",
    "start": "2281940",
    "end": "2287640"
  },
  {
    "text": "int that we're talking about and it all kind of flows through so that would be a",
    "start": "2287640",
    "end": "2294810"
  },
  {
    "text": "cool place to go I can talk a little bit about async streams as well that's a",
    "start": "2294810",
    "end": "2300720"
  },
  {
    "start": "2295000",
    "end": "2326000"
  },
  {
    "text": "third thing that we're looking at also probably for the next major release it's a little less futuristic but hopefully",
    "start": "2300720",
    "end": "2309600"
  },
  {
    "text": "it's still a little bit interesting too so let's switch back to code I don't",
    "start": "2309600",
    "end": "2315390"
  },
  {
    "text": "actually have a I don't have a prototype of it but I can I feel like can better explain it you know you know coding",
    "start": "2315390",
    "end": "2322410"
  },
  {
    "text": "context so where so many of you know",
    "start": "2322410",
    "end": "2328200"
  },
  {
    "start": "2326000",
    "end": "2373000"
  },
  {
    "text": "c-sharp and you know about async the the language support for asynchrony some of",
    "start": "2328200",
    "end": "2334140"
  },
  {
    "text": "you were here before at the previous talk where we heard about some of the",
    "start": "2334140",
    "end": "2341310"
  },
  {
    "text": "clashes between event-driven a callback based programming on the one hand and",
    "start": "2341310",
    "end": "2346520"
  },
  {
    "text": "multi-threaded programming on the other hand and we we kind of at some point we",
    "start": "2346520",
    "end": "2353940"
  },
  {
    "text": "took a swipe at more like unifying those two things where we think that the from",
    "start": "2353940",
    "end": "2361920"
  },
  {
    "text": "it from a software development perspective the real killer of the event based side is the callbacks callback",
    "start": "2361920",
    "end": "2368340"
  },
  {
    "text": "callback suck man they really just they're really just terrible and and we",
    "start": "2368340",
    "end": "2373770"
  },
  {
    "start": "2373000",
    "end": "2419000"
  },
  {
    "text": "can we can remind ourselves why they're terrible here I have a have an implementation a very an async",
    "start": "2373770",
    "end": "2378960"
  },
  {
    "text": "implementation of Fibonacci because it takes some computing power so they so it runs it on a separate thread could be",
    "start": "2378960",
    "end": "2386700"
  },
  {
    "text": "imagine that it's a more realistic example right and in the old fashioned way you know I'm calling Fibonacci with",
    "start": "2386700",
    "end": "2393120"
  },
  {
    "text": "the uber and the argument but also with a callback to say what to do with the",
    "start": "2393120",
    "end": "2399720"
  },
  {
    "text": "result when you when you've got it and this sucks this super sucks because I",
    "start": "2399720",
    "end": "2404940"
  },
  {
    "text": "have to decide right here where I call it I have to decide what to do next I have to pass that along right away and",
    "start": "2404940",
    "end": "2410990"
  },
  {
    "text": "if I want to do something asynchronous on top of that result I kind of get nested lambdas all the way out to the",
    "start": "2410990",
    "end": "2417870"
  },
  {
    "text": "right side of the screen so there's a better way of doing that which is to use",
    "start": "2417870",
    "end": "2424910"
  },
  {
    "start": "2419000",
    "end": "2696000"
  },
  {
    "text": "JavaScript calls promises what you know in the literature sometimes called",
    "start": "2424910",
    "end": "2430560"
  },
  {
    "text": "futures it's not exactly the same but close enough as long as fuel doesn't call me out and in for whatever reason",
    "start": "2430560",
    "end": "2438480"
  },
  {
    "text": "we call them tasks in the.net framework so this this this first-class representation of the outcome the",
    "start": "2438480",
    "end": "2444930"
  },
  {
    "text": "eventual outcome of this thing right so I have another version of Fibonacci that just takes a number and returns me a",
    "start": "2444930",
    "end": "2450750"
  },
  {
    "text": "tasks that represents the result I will eventually get and then I can go to that task and I can do things with it",
    "start": "2450750",
    "end": "2459660"
  },
  {
    "text": "I can have an algebra over tasks I can have multiple of them and I can I can call them a helper function to get a",
    "start": "2459660",
    "end": "2467190"
  },
  {
    "text": "task for when all of these have completed or when the first completes and so on so I can do high-level things with them as a first-class object and",
    "start": "2467190",
    "end": "2473400"
  },
  {
    "text": "eventually when I want to do other things than just when I want to get back out of tasks world I have to do",
    "start": "2473400",
    "end": "2479100"
  },
  {
    "text": "something with callbacks but I can do it later so I can say continue with and then give it a lambda I can and what it",
    "start": "2479100",
    "end": "2486540"
  },
  {
    "text": "gives me as a task and I can take that task and and do the right line that I",
    "start": "2486540",
    "end": "2496380"
  },
  {
    "text": "did before right line of 30 and now I'm good but I could also instead of if I",
    "start": "2496380",
    "end": "2503190"
  },
  {
    "text": "want to do something asynchronous instead of doing it inside and getting nesting I can also oh sorry I get back",
    "start": "2503190",
    "end": "2508770"
  },
  {
    "text": "from this continue with I get another task representing the completion of that of that follow-up work that I can then",
    "start": "2508770",
    "end": "2515370"
  },
  {
    "text": "do a continue with and chain things and many people know this from programming JavaScript as well so it's better but it",
    "start": "2515370",
    "end": "2521940"
  },
  {
    "text": "still sucks because it doesn't look like I'm writing a program it looks like I'm chaining together call Bax because i am and that sucks and so",
    "start": "2521940",
    "end": "2528750"
  },
  {
    "text": "in in c-sharp finally we went and said you know what that's a better way of doing this where the compiler rewrites",
    "start": "2528750",
    "end": "2535950"
  },
  {
    "text": "your code to the callback based code for you and and you can just wait in syntax",
    "start": "2535950",
    "end": "2546000"
  },
  {
    "text": "and compiler rewrites that into a state machine and and signs up the right callbacks and everything and now because",
    "start": "2546000",
    "end": "2554280"
  },
  {
    "text": "the thing I didn't get into when I had the other syntax and one of the big things there's it's how do you how do",
    "start": "2554280",
    "end": "2560849"
  },
  {
    "text": "you write structured code right you have you have a for loop you want to do",
    "start": "2560849",
    "end": "2566400"
  },
  {
    "text": "things one at a time a synchronously in the for loop okay well now I have to turn the for loop inside out and somehow",
    "start": "2566400",
    "end": "2572160"
  },
  {
    "text": "make call a helper function that can that can change things together in a for loop I want to do error handling",
    "start": "2572160",
    "end": "2578099"
  },
  {
    "text": "actually let's go back to it it's it's sufficiently hideous so I'm calling",
    "start": "2578099",
    "end": "2583410"
  },
  {
    "text": "Fibonacci if I call it with a negative number the maybe the method",
    "start": "2583410",
    "end": "2588510"
  },
  {
    "text": "catches that and throws an exception before it spawns the asynchronous work right so the call to Fibonacci itself",
    "start": "2588510",
    "end": "2595500"
  },
  {
    "text": "throws an exception if I call it with a negative number just this argument checking right there but maybe I call it",
    "start": "2595500",
    "end": "2600570"
  },
  {
    "text": "with a large number and after it returned to me it returned attached to",
    "start": "2600570",
    "end": "2606420"
  },
  {
    "text": "me it runs into an overflow there's another kind of exception okay so in that case the exception won't come back",
    "start": "2606420",
    "end": "2613980"
  },
  {
    "text": "out of the call because the call already finished but it'll come back out of the task it's represented in the task the",
    "start": "2613980",
    "end": "2619710"
  },
  {
    "text": "task might have an it has an exception in here if if things went wrong or actually if I get the result I never I",
    "start": "2619710",
    "end": "2627690"
  },
  {
    "text": "just said 30 there I cheated that's test a result this would if there",
    "start": "2627690",
    "end": "2633599"
  },
  {
    "text": "was an exception this would actually throw so now if you want to handle I have to both put a try around the big thing and and I also have to put a try",
    "start": "2633599",
    "end": "2641520"
  },
  {
    "text": "inside or I need to have some kind of a special error thing that I do wanna is",
    "start": "2641520",
    "end": "2648540"
  },
  {
    "text": "it's just a mess and everybody gets everybody you to sir and madam you get",
    "start": "2648540",
    "end": "2653670"
  },
  {
    "text": "your error handling wrong when you do this it's impossible okay so just do await you",
    "start": "2653670",
    "end": "2660510"
  },
  {
    "text": "saya wait that thing and all the exceptions come out here and so I just",
    "start": "2660510",
    "end": "2667410"
  },
  {
    "text": "need a single triblock what did I do wrong oh yeah because I'm not in an",
    "start": "2667410",
    "end": "2676950"
  },
  {
    "text": "async oh yeah that's too bad and we'll deal with that in a second but I can",
    "start": "2676950",
    "end": "2682020"
  },
  {
    "text": "catch exception here and do things you know so I can catch I get back to proper",
    "start": "2682020",
    "end": "2687300"
  },
  {
    "text": "error handling yes and I need my I need my main method to be async we can do that now Asif see sheriff 7-eleven so",
    "start": "2687300",
    "end": "2696930"
  },
  {
    "start": "2696000",
    "end": "2722000"
  },
  {
    "text": "acing is good we have five minutes left right so I will say I probably won't",
    "start": "2696930",
    "end": "2702600"
  },
  {
    "text": "have much time for questions I won't have any but this an ask me anything at I think 255 in waterfront CDE where you",
    "start": "2702600",
    "end": "2714210"
  },
  {
    "text": "can literally ask me anything I can't promise I'll answer anything but not",
    "start": "2714210",
    "end": "2720330"
  },
  {
    "text": "everything but okay so that's good so so what we did was language integrate and",
    "start": "2720330",
    "end": "2726210"
  },
  {
    "text": "get things right back to what they should look like so all that was a long reminder to say what about asynchronous",
    "start": "2726210",
    "end": "2733470"
  },
  {
    "text": "streams where you don't you know you don't have one value coming at you later but you have a continuous stream like an",
    "start": "2733470",
    "end": "2739920"
  },
  {
    "text": "event stream or a large set of data that you're downloading that comes at you and",
    "start": "2739920",
    "end": "2746580"
  },
  {
    "text": "chunks over time over the network or whatever people write whole like big",
    "start": "2746580",
    "end": "2753870"
  },
  {
    "text": "things based on asynchronous streams and the problem with those is well they're",
    "start": "2753870",
    "end": "2761880"
  },
  {
    "text": "often written so the really bad ones are like back to the old call back based where as soon as you ask for the stream",
    "start": "2761880",
    "end": "2770340"
  },
  {
    "text": "you immediately have to sign up a callback to deal with it and then there are the better ones like I observable and reactive framework I have I",
    "start": "2770340",
    "end": "2778260"
  },
  {
    "text": "observable up here which is again a first-class representation of the stream",
    "start": "2778260",
    "end": "2785040"
  },
  {
    "text": "right so you have an object you can walk up to and say hey I'm interested in you you can subscribe to it and that's a lot",
    "start": "2785040",
    "end": "2792840"
  },
  {
    "text": "better because you separating and you can again you have a first-class object you can do an algebra on you can you can combine streams in",
    "start": "2792840",
    "end": "2799819"
  },
  {
    "text": "various ways at the high level and so on at the end of the day though somebody has to subscribe to get to do something",
    "start": "2799819",
    "end": "2805760"
  },
  {
    "text": "actual with the actual things that come out the other end of your complicated set of pipes okay and subscribe",
    "start": "2805760",
    "end": "2811490"
  },
  {
    "start": "2811000",
    "end": "2839000"
  },
  {
    "text": "subscription means you have to provide it an I observer and I'm sorry about an i observer it's still a call back it's a",
    "start": "2811490",
    "end": "2821119"
  },
  {
    "text": "complex call back in this case it's like something that implements a method that or an interface that has three methods",
    "start": "2821119",
    "end": "2826369"
  },
  {
    "text": "and what do I do when things complete what do I do when there's an error and what do I do when I just got the next one but it's still callback I'm sorry so",
    "start": "2826369",
    "end": "2833450"
  },
  {
    "text": "there's still callback based you program still a long way around so could we eliminate that somehow and in order to",
    "start": "2833450",
    "end": "2839990"
  },
  {
    "start": "2839000",
    "end": "2969000"
  },
  {
    "text": "do that we've been looking at simply how do we language integrate normal like",
    "start": "2839990",
    "end": "2846430"
  },
  {
    "text": "synchronous streams and collections well we do that just by what in c-sharp is",
    "start": "2846430",
    "end": "2852230"
  },
  {
    "text": "called an anion eMobile and in java it's",
    "start": "2852230",
    "end": "2857299"
  },
  {
    "text": "called an iterable just because we always try to have different names you",
    "start": "2857299",
    "end": "2862579"
  },
  {
    "text": "could just do the same really let's create an eye async and new mobile that returns an eye a sync enumerate or",
    "start": "2862579",
    "end": "2869450"
  },
  {
    "text": "and I a sync and numerate or the only oh",
    "start": "2869450",
    "end": "2875589"
  },
  {
    "text": "sorry about that there we are I sing a new Maria Torre the only thing that's different about it",
    "start": "2875589",
    "end": "2881930"
  },
  {
    "text": "maybe is that the move next method the thing that gets the next element is async so let's call it move next async",
    "start": "2881930",
    "end": "2888410"
  },
  {
    "text": "and wrap it in a task and now we have an",
    "start": "2888410",
    "end": "2893450"
  },
  {
    "text": "async refine in a mobile pattern the good thing about the normal pattern as",
    "start": "2893450",
    "end": "2899690"
  },
  {
    "text": "opposed to the the other one is that there's no callbacks inside here or rather there are callbacks but those are",
    "start": "2899690",
    "end": "2905930"
  },
  {
    "text": "the callbacks that sit on the task and we know how to deal with those we can await those right so we push the",
    "start": "2905930",
    "end": "2911660"
  },
  {
    "text": "callbacks out of the way and now we just have to make an asynchronous version of for each I'm not going to do it but an",
    "start": "2911660",
    "end": "2917059"
  },
  {
    "text": "asynchronous version of for each that expands just like the foreach today it's a while loop over the enumerator asking",
    "start": "2917059",
    "end": "2925099"
  },
  {
    "text": "and waiting move next async instead of just as move next and the pattern is exactly the",
    "start": "2925099",
    "end": "2931940"
  },
  {
    "text": "same so it's actually so this way it becomes simple to integrate to integrate",
    "start": "2931940",
    "end": "2938950"
  },
  {
    "text": "asynchronous streams into the language and then we need to figure out how to bridge between all the observables out",
    "start": "2938950",
    "end": "2944180"
  },
  {
    "text": "there and so on but that's a that's a more complex problem I'm told now to stop so I want to say to you",
    "start": "2944180",
    "end": "2951590"
  },
  {
    "text": "thank you very much let's skip that one if you want to see more go to our github",
    "start": "2951590",
    "end": "2956720"
  },
  {
    "text": "design site or go to the dotnet blog which often has language stuff on it and",
    "start": "2956720",
    "end": "2962090"
  },
  {
    "text": "come ask me at the AMA and go have lunch thank you very much",
    "start": "2962090",
    "end": "2967330"
  },
  {
    "text": "[Applause]",
    "start": "2967330",
    "end": "2970550"
  }
]