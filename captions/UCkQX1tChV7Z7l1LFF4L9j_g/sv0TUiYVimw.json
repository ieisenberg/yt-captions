[
  {
    "start": "0",
    "end": "134000"
  },
  {
    "text": "thanks Arthur thanks for having me guys so as sasha said my name is les hommes",
    "start": "16010",
    "end": "22380"
  },
  {
    "text": "CTO co-founder storm paths why am i up here talking to you guys why should you",
    "start": "22380",
    "end": "27900"
  },
  {
    "text": "listen to me well first of all you shouldn't you should go out do your own research the world of security is very",
    "start": "27900",
    "end": "34760"
  },
  {
    "text": "interesting and there's lots of opinions but you want to be careful about the information you get so always do your",
    "start": "34760",
    "end": "41149"
  },
  {
    "text": "your checks and your resource you know verification but I'm going to do my best to not steer you guys wrong as a",
    "start": "41149",
    "end": "47700"
  },
  {
    "text": "testament to that I'm the code are the project founder and and project lead on",
    "start": "47700",
    "end": "55820"
  },
  {
    "text": "apache shiro which is the security framework for the java virtual machine founded and fostered by the Apache",
    "start": "55820",
    "end": "63329"
  },
  {
    "text": "Software Foundation I'm also on the j ee application security group which is a new jsr spec that's being formulated",
    "start": "63329",
    "end": "69810"
  },
  {
    "text": "right now that will be available in GAE e8 and it really takes a lot of ideas",
    "start": "69810",
    "end": "75149"
  },
  {
    "text": "from Shiro and spring security and codifies them into a framework that'll be part of the JVM moving forward which",
    "start": "75149",
    "end": "81450"
  },
  {
    "text": "is pretty cool storm path who are we we are fundamentally an authentication and user",
    "start": "81450",
    "end": "88619"
  },
  {
    "text": "management API were built for developers our primary customers are those that",
    "start": "88619",
    "end": "95429"
  },
  {
    "text": "have applications they are building and deploying to the public Internet so all of the security breaches and the",
    "start": "95429",
    "end": "101609"
  },
  {
    "text": "frustrations that companies like Sony and and all these other companies might have had we solve those problems",
    "start": "101609",
    "end": "106889"
  },
  {
    "text": "password reset email verification integration with the secure identity stores we automate all that so you don't",
    "start": "106889",
    "end": "112859"
  },
  {
    "text": "have to build any of the stuff in your apps anymore we are a security team at",
    "start": "112859",
    "end": "118020"
  },
  {
    "text": "our heart so we do a lot of stuff with cryptography secure data stores you can",
    "start": "118020",
    "end": "123869"
  },
  {
    "text": "do SSO across your applications but you can basically think of us as a specialized dressed JSON API micro",
    "start": "123869",
    "end": "129899"
  },
  {
    "text": "service if you will for Identity Management so what are we going to talk about today there's kind of a decent",
    "start": "129899",
    "end": "138989"
  },
  {
    "start": "134000",
    "end": "134000"
  },
  {
    "text": "amount of material and then the slide doesn't really indicate it as such but I'm going to kind of break this",
    "start": "138989",
    "end": "144480"
  },
  {
    "text": "presentation down into maybe two or three sections the first half of the part patient is really about the problems",
    "start": "144480",
    "end": "150580"
  },
  {
    "text": "that you kind of come up across in building secure web applications and also the techniques that we've used to",
    "start": "150580",
    "end": "157330"
  },
  {
    "text": "date you know how cookies are used some of the problems around cross-site scripting attacks cross-site request",
    "start": "157330",
    "end": "163420"
  },
  {
    "text": "forgery attacks and how to mitigate those or at least how to do that well with what we know today session IDs are",
    "start": "163420",
    "end": "170470"
  },
  {
    "text": "often as back-end Java people we talk that's usually the primary go-to mechanism that we have for storing",
    "start": "170470",
    "end": "175840"
  },
  {
    "text": "authentication States so we'll talk about sessions and session IDs and some challenges with that and then we'll talk",
    "start": "175840",
    "end": "181000"
  },
  {
    "text": "about a new approach that has been pretty prevalent over the last 18 months or so it's quickly becoming sort of a de",
    "start": "181000",
    "end": "188740"
  },
  {
    "text": "facto standard for identity assertions and authentication for modern web apps especially around single page",
    "start": "188740",
    "end": "194950"
  },
  {
    "text": "applications or spas and mobile apps so we'll talk about what token authentication is how it solves those",
    "start": "194950",
    "end": "200770"
  },
  {
    "text": "problems and also how to do some of these things and a best practices kind of way and then finally I'll finish out",
    "start": "200770",
    "end": "206680"
  },
  {
    "text": "the night with a demo that actually shows these these principles being executed within a real application and",
    "start": "206680",
    "end": "213970"
  },
  {
    "text": "I'll do that showing an oauth2 example so let's get into it",
    "start": "213970",
    "end": "220260"
  },
  {
    "start": "220000",
    "end": "220000"
  },
  {
    "text": "security concerns for modern web apps some of the issues that you have to worry about when trying to solve or deal",
    "start": "220260",
    "end": "227710"
  },
  {
    "start": "224000",
    "end": "224000"
  },
  {
    "text": "with security problems is that a lot of apps today are single page apps and mobile apps and these are what are",
    "start": "227710",
    "end": "232810"
  },
  {
    "text": "called untrusted clients and they're untrusted because they run in a runtime",
    "start": "232810",
    "end": "238120"
  },
  {
    "text": "environment that you as a server or application developer don't have control over my JavaScript applications can be",
    "start": "238120",
    "end": "244720"
  },
  {
    "text": "accessed via the developer console you can change data or state client-side apps on Android and iOS can be",
    "start": "244720",
    "end": "251320"
  },
  {
    "text": "decompiled so you can't embed things in there like API key secret values or user",
    "start": "251320",
    "end": "256480"
  },
  {
    "text": "passwords that's never a safe thing to do so these are this that's why they call these things untrusted clients now",
    "start": "256480",
    "end": "263410"
  },
  {
    "text": "when you want to support these things and browser-based apps you want to prevent malicious code from executing so",
    "start": "263410",
    "end": "268870"
  },
  {
    "text": "we'll talk about some examples of what that is and how it works you want to make sure that your user credentials",
    "start": "268870",
    "end": "274270"
  },
  {
    "text": "that you accept from your users like if they enter in a username and password on your web app and they hit enter you want",
    "start": "274270",
    "end": "279400"
  },
  {
    "text": "to make sure those credentials stay secure you want to keep your user secure you want to secure your endpoints we'll talk",
    "start": "279400",
    "end": "285370"
  },
  {
    "text": "about how to do that a little bit and then one of the things that's kind of interesting is for single page apps or",
    "start": "285370",
    "end": "291040"
  },
  {
    "text": "any app for that matter you want to expose access control rules to that client or that code base to let the",
    "start": "291040",
    "end": "297400"
  },
  {
    "text": "client know what the user is allowed to do you know can they add a user can they delete a user can they see this image",
    "start": "297400",
    "end": "302890"
  },
  {
    "text": "can they not see this image you want to be able to do that in a convenient way so when we talk about malicious code",
    "start": "302890",
    "end": "310420"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "what do I mean here in the in the context of this presentation we're going to talk about the the two kind of major",
    "start": "310420",
    "end": "317380"
  },
  {
    "text": "concerns cross-site scripting attacks in xsrf attacks these things are real",
    "start": "317380",
    "end": "325470"
  },
  {
    "text": "they're a big deal they happen a lot on the web on a daily basis we're not going to jump too deep into",
    "start": "325470",
    "end": "332170"
  },
  {
    "text": "some of the definitions of what these things are I highly recommend that you guys go to the O s website and you kind",
    "start": "332170",
    "end": "339340"
  },
  {
    "text": "of do some reading they will explain everything in detail but an XSS attack",
    "start": "339340",
    "end": "344650"
  },
  {
    "text": "at a very high level is a malicious user or attacker can enter in their own",
    "start": "344650",
    "end": "351100"
  },
  {
    "text": "JavaScript code into your JavaScript based application by using form fields",
    "start": "351100",
    "end": "356590"
  },
  {
    "text": "as typically how this is done so they might you guys are familiar with sequel injection you know you want to escape your values or parameterize them before",
    "start": "356590",
    "end": "363250"
  },
  {
    "text": "they go to the database the same is true of Web Apps if you have user enter data in a form field you want to encode it",
    "start": "363250",
    "end": "369070"
  },
  {
    "text": "first before you interpret it to make sure that you don't just run it blindly so that they can inject code so as an",
    "start": "369070",
    "end": "376960"
  },
  {
    "text": "example there's a little demo that I'm going to see if I can can execute for you guys this is a little demo that you",
    "start": "376960",
    "end": "385990"
  },
  {
    "text": "can run let's see if I can get out a get out of here in a sandbox environment",
    "start": "385990",
    "end": "394080"
  },
  {
    "text": "here we go so this is a little sandbox environment this is safe to run if you guys want to test this out it's not going to hurt anything on your on your",
    "start": "394080",
    "end": "400330"
  },
  {
    "text": "browser but the next this this is an actual demo of what an XSS attack looks like in real life so let's say I go to a",
    "start": "400330",
    "end": "408040"
  },
  {
    "text": "search engine or any form field for that matter and I type in you know hi and I hit Search it's going to run the code",
    "start": "408040",
    "end": "415780"
  },
  {
    "text": "or it's going to run the search and the server in this case it says up no results found you know try again but if",
    "start": "415780",
    "end": "421660"
  },
  {
    "text": "I was a malicious attacker I might do something like this where I can enter in a script a JavaScript snippet in this",
    "start": "421660",
    "end": "428620"
  },
  {
    "text": "case I'm just doing an alert and if I hit the formfield submission see the",
    "start": "428620",
    "end": "435280"
  },
  {
    "text": "JavaScript pop up it actually ran the code that I entered in the form field right that's a really bad thing from a security perspective because this could",
    "start": "435280",
    "end": "442030"
  },
  {
    "text": "have injected code into the Dom and that code can then do whatever it wants to it can access your Dom structure can make",
    "start": "442030",
    "end": "448480"
  },
  {
    "text": "HTTP requests without you knowing about it this is not a good thing so this is",
    "start": "448480",
    "end": "453640"
  },
  {
    "text": "what an actual XSS attack looks like in real life and there are sophisticated script tools",
    "start": "453640",
    "end": "458770"
  },
  {
    "text": "that allow you to kind of automate this across various websites but we don't want this to happen so how do you deal",
    "start": "458770",
    "end": "465280"
  },
  {
    "text": "with that how do you how do you protect your web application from these kinds of",
    "start": "465280",
    "end": "470560"
  },
  {
    "text": "attacks so there are ways to protect yourself basically good yes can you wait",
    "start": "470560",
    "end": "478360"
  },
  {
    "text": "to the end of the presentation is it ok wait read everything you see on the sauce page right these guys are going to",
    "start": "478360",
    "end": "484720"
  },
  {
    "text": "tell you a lot of how these things occur how to protect yourselves against them and best of all they have a nice little",
    "start": "484720",
    "end": "489970"
  },
  {
    "text": "cheat sheet that you can see via this URL that allows you to figure out the",
    "start": "489970",
    "end": "494979"
  },
  {
    "text": "best ways of protecting yourself in applications and these this is a language agnostic or at least it focuses on JavaScript solution set to help you",
    "start": "494979",
    "end": "502300"
  },
  {
    "text": "protect your apps this basically boils down to escaping content so when a user",
    "start": "502300",
    "end": "508300"
  },
  {
    "text": "enters in data in the form field you want to escape content make sure that you use an escaping library that does",
    "start": "508300",
    "end": "513640"
  },
  {
    "text": "this for you don't don't don't try to create the parser yourself HTML has a lot of weird",
    "start": "513640",
    "end": "521650"
  },
  {
    "text": "ancillary rules and conditionals and use cases use a well-known trusted parser",
    "start": "521650",
    "end": "527050"
  },
  {
    "text": "for this to escape the content for you all wasp has one out of the box that they that you can use download for free",
    "start": "527050",
    "end": "533530"
  },
  {
    "text": "it's open source it's really really well done highly recommend using that you know we really don't recommend that you",
    "start": "533530",
    "end": "538990"
  },
  {
    "text": "roll your own pretty risky to do so um so the takeaway is escape user input",
    "start": "538990",
    "end": "546720"
  },
  {
    "text": "so what else can you do in addition to that certain spa frameworks like angular",
    "start": "549250",
    "end": "555029"
  },
  {
    "text": "and I think ember to a certain degree do a lot of this work for you right you can prevent Dom manipulation by escaping",
    "start": "555029",
    "end": "561910"
  },
  {
    "text": "user input and they have sometimes automatic you know value readers that can do this stuff for you that said you",
    "start": "561910",
    "end": "569019"
  },
  {
    "text": "shouldn't trust it 100 percent read up on it see how it works and and make sure that it's doing exactly what you need",
    "start": "569019",
    "end": "574620"
  },
  {
    "text": "but you know do your due diligence in this in this case we also want to secure",
    "start": "574620",
    "end": "582610"
  },
  {
    "start": "579000",
    "end": "579000"
  },
  {
    "text": "user credentials traditionally we've done this by using sessions and session IDs so the idea is that the user enters",
    "start": "582610",
    "end": "589899"
  },
  {
    "text": "in a username and password they hit submit that data goes to your server you resolve that in a yes or no answer",
    "start": "589899",
    "end": "596079"
  },
  {
    "text": "however you you're doing that and then a lot of times you'll take the the result",
    "start": "596079",
    "end": "601569"
  },
  {
    "text": "the authentication result and you'll store it in an HTTP session that's the pretty common thing that most of us do",
    "start": "601569",
    "end": "606790"
  },
  {
    "text": "is Java developers things like Tomcat and JE frameworks they do the stuff automatically it's not really you know",
    "start": "606790",
    "end": "612250"
  },
  {
    "text": "have to think about it that much it just kind of happens automatically but the thing to keep in mind here is that when",
    "start": "612250",
    "end": "618970"
  },
  {
    "text": "Tomcat does this it's setting it almost always setting the cookie sometimes URL rewriting that's not as prevalent and",
    "start": "618970",
    "end": "625259"
  },
  {
    "text": "this is okay as long as cookies are being set correctly and you're setting the cookies in the right manner and",
    "start": "625259",
    "end": "632980"
  },
  {
    "text": "you're utilizing them effectively authentication tokens can be better and of course that's the whole point of this",
    "start": "632980",
    "end": "639220"
  },
  {
    "text": "presentation but we'll see we'll see how in a little bit so cookies what do we",
    "start": "639220",
    "end": "644350"
  },
  {
    "text": "need to know about cookies in order to keep these things secure so this is the",
    "start": "644350",
    "end": "651069"
  },
  {
    "start": "645000",
    "end": "645000"
  },
  {
    "text": "common flow that we're used to as Java back-end developers somebody's going to post a form to a login and then the",
    "start": "651069",
    "end": "657790"
  },
  {
    "text": "result is at 200 ok or some other success status code and a cookies going to be set in this diagram it's a session",
    "start": "657790",
    "end": "665019"
  },
  {
    "text": "equals some random string but in the Java world this is almost always a J session ID value and so that cookie is",
    "start": "665019",
    "end": "672160"
  },
  {
    "text": "set and then the browser on future requests will send that cookie back to the server via the cookie header so if",
    "start": "672160",
    "end": "679329"
  },
  {
    "text": "you set the cookie under the domain that the user accesses then the browser",
    "start": "679329",
    "end": "685660"
  },
  {
    "text": "will automatically send that back to the server and it will know based on the session ID who that user is and this is",
    "start": "685660",
    "end": "695560"
  },
  {
    "text": "okay traditionally you know if you want to talk about API endpoints instead of",
    "start": "695560",
    "end": "701079"
  },
  {
    "start": "697000",
    "end": "697000"
  },
  {
    "text": "just browsers traditionally you use such an ID cookies to handle that as well so you go to the session ID you get the",
    "start": "701079",
    "end": "707889"
  },
  {
    "text": "session ID you look up the HTTP session and from there you can get your account identity and you know who the user is",
    "start": "707889",
    "end": "713699"
  },
  {
    "text": "frameworks like Shiro and spring automate a lot of this stuff for you especially with how to resolve accounts",
    "start": "713699",
    "end": "719860"
  },
  {
    "text": "and how do you persist that state after a login attempt they automate a lot of that stuff so definitely recommend using",
    "start": "719860",
    "end": "727029"
  },
  {
    "text": "these frameworks if you're not but",
    "start": "727029",
    "end": "732160"
  },
  {
    "start": "732000",
    "end": "732000"
  },
  {
    "text": "session IDs don't really solve this particular issue of exposing access control rules to the client all right",
    "start": "732160",
    "end": "739120"
  },
  {
    "text": "session ID you can use it to go find information out and go look up data in your database and send it back to the",
    "start": "739120",
    "end": "744639"
  },
  {
    "text": "client and a lot of times you'll see web applications they have a /me URI or slash profile or something like that or",
    "start": "744639",
    "end": "751899"
  },
  {
    "text": "slash access controller you know whatever it is at some endpoint based on the current user will give you back a",
    "start": "751899",
    "end": "757720"
  },
  {
    "text": "list of what that user is allowed to do sometimes that's being done that way and then the client side can read that list",
    "start": "757720",
    "end": "764589"
  },
  {
    "text": "and then turn on or off certain features in the user interface this still requires session state but again we",
    "start": "764589",
    "end": "771939"
  },
  {
    "text": "think access tokens are better and we'll show you how so let's dig into some",
    "start": "771939",
    "end": "777250"
  },
  {
    "text": "cookie stuff a little bit more from a security perspective cookies are okay",
    "start": "777250",
    "end": "782620"
  },
  {
    "text": "actually if you use them correctly and if you you you would you understand some",
    "start": "782620",
    "end": "788410"
  },
  {
    "text": "certain conditions that need to be met it's important to know that cookies can be easily compromised by",
    "start": "788410",
    "end": "794980"
  },
  {
    "text": "man-in-the-middle attacks and so if you utilize a website and you log in over",
    "start": "794980",
    "end": "801009"
  },
  {
    "text": "HTTP you know TLS and then you downgrade it to a non secure connection that same",
    "start": "801009",
    "end": "806949"
  },
  {
    "text": "session ID is now snoopeh bulb I anyone sniffing network traffic traffic whether",
    "start": "806949",
    "end": "812380"
  },
  {
    "text": "you're the airport or coffee shop anyone can take that ID value then start using it to pretend that",
    "start": "812380",
    "end": "819100"
  },
  {
    "text": "there you session IDs can be thought of as a bearer token of sorts will cover bearer tokens in a little bit but they",
    "start": "819100",
    "end": "826810"
  },
  {
    "text": "can be intercepted by men of the middle attacks and then used to assume the identity associated with that session ID",
    "start": "826810",
    "end": "832570"
  },
  {
    "text": "cookie so oh and also cross-site request forgery attacks are very real issues",
    "start": "832570",
    "end": "840100"
  },
  {
    "text": "when using cookies for user identity assertions and we'll dig into both of these",
    "start": "840100",
    "end": "846600"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "so man-in-the-middle attack I just kind of hinted at it you know it's someone listening on the wire between the client",
    "start": "846600",
    "end": "853180"
  },
  {
    "text": "and the server and they'll be able to see a cookie value and take that value and then maybe use it themselves by",
    "start": "853180",
    "end": "858339"
  },
  {
    "text": "setting the cookie header to initiate attacks or assume the identity of",
    "start": "858339",
    "end": "863649"
  },
  {
    "text": "someone they're not allowed to so it's really important to use HTTPS Everywhere like I had mentioned once you log into a",
    "start": "863649",
    "end": "870550"
  },
  {
    "text": "website it's never okay or once you log in over HTTPS it is never okay to downgrade to an on htps scenario if",
    "start": "870550",
    "end": "877750"
  },
  {
    "text": "you're using cookies to represent user identity this is a really bad thing it happens all the time",
    "start": "877750",
    "end": "883060"
  },
  {
    "text": "never ever downgrade your security connection until the user logs out but",
    "start": "883060",
    "end": "890079"
  },
  {
    "text": "it's important that you use TLS everywhere on internal networks too so just because it's secure going into your infrastructure doesn't mean it's going",
    "start": "890079",
    "end": "896019"
  },
  {
    "text": "to stay that way you know if you have unencrypted connections across various back-end services those are potentially",
    "start": "896019",
    "end": "902680"
  },
  {
    "text": "open up open to attack vectors and even if nobody in your team or your product",
    "start": "902680",
    "end": "908860"
  },
  {
    "text": "you know is doing anything malicious sometimes those values can be logged they can be saved to files those files",
    "start": "908860",
    "end": "914230"
  },
  {
    "text": "are inherently putting backup storage that storage could be compromised if it's not as secure as your production",
    "start": "914230",
    "end": "919750"
  },
  {
    "text": "system so interesting tidbit I think something like 75 or 80% of all password attacks are based on my sequel dump",
    "start": "919750",
    "end": "926110"
  },
  {
    "text": "files that are safe to backup storage right so you might think your my sequel online database is super secure and it",
    "start": "926110",
    "end": "932560"
  },
  {
    "text": "may and it might be but your backup may not be and that's actually the largest attack vector for password cracking is",
    "start": "932560",
    "end": "938260"
  },
  {
    "text": "my sequel dumps so be aware of about backup strategies you know these things",
    "start": "938260",
    "end": "944620"
  },
  {
    "text": "are set as headers so if you log headers specifically you know cooking headers those could end up in a log file so",
    "start": "944620",
    "end": "950350"
  },
  {
    "text": "be aware that so that's made in the middle I should also note that a TLS or",
    "start": "950350",
    "end": "957070"
  },
  {
    "text": "HTTPS is not a panacea it does not solve all scenarios a lot of people think if I",
    "start": "957070",
    "end": "963670"
  },
  {
    "text": "just have TLS on my website I'm good to go that is not true if you're in a coffee",
    "start": "963670",
    "end": "969370"
  },
  {
    "text": "shop and you connect to an untrusted Wi-Fi access point that access point can acts can serve as a certificate",
    "start": "969370",
    "end": "977080"
  },
  {
    "text": "authority and anytime you do a website request they can just automatically give you a certificate and just say yes this",
    "start": "977080",
    "end": "984130"
  },
  {
    "text": "is the valid certificate of the site you're trying to access and you think you have a direct connection to your your final destination",
    "start": "984130",
    "end": "989730"
  },
  {
    "text": "that's exploitable right so you'll have a TLS connection to the to the Wi-Fi",
    "start": "989730",
    "end": "994840"
  },
  {
    "text": "access point and they'll take your data see it and re-encrypt it and send it out the wire to the real online the real",
    "start": "994840",
    "end": "1000660"
  },
  {
    "text": "destination there acting as a man-in-the-middle attack er so TLS is not a guaranteed solution it's pretty",
    "start": "1000660",
    "end": "1006930"
  },
  {
    "text": "good most of the time but it's not perfect so just just be careful about that and you could if you want to talk about",
    "start": "1006930",
    "end": "1013620"
  },
  {
    "start": "1011000",
    "end": "1011000"
  },
  {
    "text": "after the presentation strategies around that let me know but I'm not going to cover end-to-end security in this",
    "start": "1013620",
    "end": "1020370"
  },
  {
    "text": "particular talk cross-site request forgery what do I mean by that",
    "start": "1020370",
    "end": "1026689"
  },
  {
    "text": "so CSRF attack occurs when a malicious website or email or basically any any",
    "start": "1026690",
    "end": "1032430"
  },
  {
    "text": "media mechanism that performs an on it unwanted action on behalf of the user",
    "start": "1032430",
    "end": "1039480"
  },
  {
    "text": "without the user knowing about it so that's really a big mouthful to illustrate the following let's assume",
    "start": "1039480",
    "end": "1048030"
  },
  {
    "text": "that I am a bad guy and you've logged",
    "start": "1048030",
    "end": "1053340"
  },
  {
    "text": "into a legitimate web site you're an end-user you've logged into a legitimate web site legitimate user name password",
    "start": "1053340",
    "end": "1059810"
  },
  {
    "text": "validation everything's good maybe this is your bank for example and",
    "start": "1059810",
    "end": "1066240"
  },
  {
    "text": "everything's fine a cookie is set because you've created a session so now that cookie is in your browser if you",
    "start": "1066240",
    "end": "1073290"
  },
  {
    "text": "then go visit another website a malicious website or an email and you don't know or you don't know the origin",
    "start": "1073290",
    "end": "1081090"
  },
  {
    "text": "of that email and you click a link on the email what happens in this case is that the",
    "start": "1081090",
    "end": "1086280"
  },
  {
    "text": "user will click on this link and it will be executed and sent to the server",
    "start": "1086280",
    "end": "1092240"
  },
  {
    "text": "identified your website or the bank's website in this particular example and",
    "start": "1092240",
    "end": "1097560"
  },
  {
    "text": "if the bank had no additional protection around this URL it could actually transfer that money to to a certain",
    "start": "1097560",
    "end": "1104580"
  },
  {
    "text": "account somewhere granted this is a contrived example right banks don't do this kind of stuff but it shows you how",
    "start": "1104580",
    "end": "1110220"
  },
  {
    "text": "these things can actually occur in the wild and the reason why this is okay or right why these attacks exist and",
    "start": "1110220",
    "end": "1116880"
  },
  {
    "text": "they're successful is that the attacker can't see the cookie right the cookie",
    "start": "1116880",
    "end": "1122130"
  },
  {
    "text": "perd browser domain policies is only sent to the server that set the cookie",
    "start": "1122130",
    "end": "1128100"
  },
  {
    "text": "so the attacker can't see it but because that request is going to the same server",
    "start": "1128100",
    "end": "1133980"
  },
  {
    "text": "that set the cookie the browser says I'm just going to give you the cookie and if your server just trusts it this is up I",
    "start": "1133980",
    "end": "1139620"
  },
  {
    "text": "got a good session ID the the session has a user that I know about I'm just going to trust the request that's a",
    "start": "1139620",
    "end": "1146580"
  },
  {
    "text": "problem because you've you've implicitly authenticated that request based on the session alone with no additional",
    "start": "1146580",
    "end": "1152490"
  },
  {
    "text": "information this is a real problem this happens a lot there are similar attack vectors around",
    "start": "1152490",
    "end": "1160350"
  },
  {
    "text": "images so a lot of times you guys use Gmail and you see that Gmail sends an email but it won't show you images in it",
    "start": "1160350",
    "end": "1165660"
  },
  {
    "text": "it's because that image might be associated with an attacker that's doing trying to doing something suspicious and",
    "start": "1165660",
    "end": "1171870"
  },
  {
    "text": "just showing the image will send a request to the server so they'll disable that by default so that you only need to",
    "start": "1171870",
    "end": "1178350"
  },
  {
    "text": "show images from trusted websites for example to avoid some of these types of attacks so this is the attack vector how",
    "start": "1178350",
    "end": "1186530"
  },
  {
    "text": "do we protect ourselves against it and there's three common solutions around this one is is called the synchronizer",
    "start": "1186530",
    "end": "1194310"
  },
  {
    "text": "token approach there's another one called double submit cookie and then finally you can do origin header checks",
    "start": "1194310",
    "end": "1199350"
  },
  {
    "text": "and we'll cover each one of these now so the synchronizer token approach works",
    "start": "1199350",
    "end": "1206370"
  },
  {
    "start": "1201000",
    "end": "1201000"
  },
  {
    "text": "like this let's say that I am a travel agency and my user tries to get a list",
    "start": "1206370",
    "end": "1211470"
  },
  {
    "text": "of flights and they get back a list and then they want to click ok by you know I'm going to a trip around the world is going to be",
    "start": "1211470",
    "end": "1216899"
  },
  {
    "text": "awesome and the user thinks that this is or believes that this is your site and",
    "start": "1216899",
    "end": "1221909"
  },
  {
    "text": "everything's okay and when they hit by it's going to send a post to a",
    "start": "1221909",
    "end": "1226950"
  },
  {
    "text": "particular URI now if you look inside of the forum you'll notice that there's this hidden form field called CSRF token",
    "start": "1226950",
    "end": "1234179"
  },
  {
    "text": "and this post will include that value into the request that goes into the",
    "start": "1234179",
    "end": "1241200"
  },
  {
    "text": "server and the idea here is that the token value itself is unique and it's",
    "start": "1241200",
    "end": "1247470"
  },
  {
    "text": "specific to the service that's rendering the webpage so it's a dynamically generated web page and only that server",
    "start": "1247470",
    "end": "1254519"
  },
  {
    "text": "knows about that value a lot of people will store these CSRF tokens in the HTTP session and then it's okay as long as",
    "start": "1254519",
    "end": "1261239"
  },
  {
    "text": "that value doesn't leave the the web server so as long as the client never sees this value beyond or rather if it's",
    "start": "1261239",
    "end": "1267330"
  },
  {
    "text": "not stored anywhere outside of the server then you're okay and this will",
    "start": "1267330",
    "end": "1274799"
  },
  {
    "text": "work so that on the submit the server will check yes this this token I know about it I generated it it can use",
    "start": "1274799",
    "end": "1281129"
  },
  {
    "text": "things like digital signatures to make sure that it's untampered and hasn't changed but the point is that the server",
    "start": "1281129",
    "end": "1287190"
  },
  {
    "text": "can verify that this token is present on the post now an attacker wanting to do a",
    "start": "1287190",
    "end": "1292470"
  },
  {
    "text": "CSRF attack will try to do the same thing maybe they'll create a little you know form that says go ahead and and by",
    "start": "1292470",
    "end": "1299039"
  },
  {
    "text": "you know trip around the world and send some money um when they click that",
    "start": "1299039",
    "end": "1304499"
  },
  {
    "text": "button this is going to fail because they don't know what that random value is inside of the HTTP session right",
    "start": "1304499",
    "end": "1311700"
  },
  {
    "text": "whenever they render their their fake-looking page for a phishing attack they don't have that token value so when",
    "start": "1311700",
    "end": "1319019"
  },
  {
    "text": "they hit when the user clicks buy it will send a post to the correct web server your your web server in this case",
    "start": "1319019",
    "end": "1326009"
  },
  {
    "text": "but it won't have the the CSRF token value because it can't generate a random",
    "start": "1326009",
    "end": "1331830"
  },
  {
    "text": "value that matches something that is known to your application so this is called a synchronizer token you can use",
    "start": "1331830",
    "end": "1339869"
  },
  {
    "text": "the same value in an HTP session and just use that same exact value over and over again I'm a little more paranoid",
    "start": "1339869",
    "end": "1345059"
  },
  {
    "text": "when I do this for my web apps and the frameworks I build these are nonces basically numbers used once and so as",
    "start": "1345059",
    "end": "1351660"
  },
  {
    "text": "soon as they're consumed they're immediately gone and then the very next time the page is rendered a brand new token exists so that prevents replay",
    "start": "1351660",
    "end": "1359040"
  },
  {
    "text": "attacks which is always a nice thing because it's never used more than once",
    "start": "1359040",
    "end": "1364850"
  },
  {
    "start": "1364000",
    "end": "1364000"
  },
  {
    "text": "there are some considerations around this approach it requires coordination from your rendering layer so if you're a",
    "start": "1364850",
    "end": "1371610"
  },
  {
    "text": "server that generates HTML it's not a big deal because the server and the client here are effectively in the same",
    "start": "1371610",
    "end": "1378210"
  },
  {
    "text": "process it does require you to store tokens in data stores or caches so",
    "start": "1378210",
    "end": "1383820"
  },
  {
    "text": "whether it's a no sequel store or distributed cache you still have to store this state in somewhere and so at",
    "start": "1383820",
    "end": "1390750"
  },
  {
    "text": "scale that can be a difficult challenge because you either have to put it in a clustered format and make sure that if",
    "start": "1390750",
    "end": "1397260"
  },
  {
    "text": "nodes die the token still available the user doesn't see repercussions of died servers or dead servers but there are",
    "start": "1397260",
    "end": "1406380"
  },
  {
    "text": "some engineering challenges with the stuff at scale one of the difficulties is that this is very difficult to do",
    "start": "1406380",
    "end": "1412440"
  },
  {
    "text": "with single page applications because single page apps are pre-compiled they're static right a lot of times",
    "start": "1412440",
    "end": "1418380"
  },
  {
    "text": "you'll use something like Bower to generate a compiled minified gzipped version of your app that is not",
    "start": "1418380",
    "end": "1425760"
  },
  {
    "text": "participating in the randomly generated forms right those are all pre-built so",
    "start": "1425760",
    "end": "1431360"
  },
  {
    "text": "you can't it's harder it's a lot harder to use the synchronizer token approach with spa's and another thing should be",
    "start": "1431360",
    "end": "1440310"
  },
  {
    "text": "really kind of pointed out is that this only works with post requests because",
    "start": "1440310",
    "end": "1445320"
  },
  {
    "text": "it's something that the server has to initiate before it's submitted back to the server so a pro tip in i guess along",
    "start": "1445320",
    "end": "1451800"
  },
  {
    "text": "with that thought is that you should never ever ever manipulate server state with gets ever like it's always a",
    "start": "1451800",
    "end": "1457020"
  },
  {
    "text": "security risk to enable that not only that but if you do that it kind of breaks the item potent nature of gets as",
    "start": "1457020",
    "end": "1464460"
  },
  {
    "text": "mandated by the HTTP spec that's a whole nother talk so I won't go down that road so if you if for single page apps and",
    "start": "1464460",
    "end": "1472370"
  },
  {
    "text": "pre-compiled mobile clients if that's not a great approach you know double",
    "start": "1472370",
    "end": "1478800"
  },
  {
    "text": "submit cookies might be this a pro we'll submit two cookies usually one is",
    "start": "1478800",
    "end": "1486940"
  },
  {
    "text": "a session ID cookie what we've been talking about the other one is typically a random value of some sort and they",
    "start": "1486940",
    "end": "1493779"
  },
  {
    "text": "could both be sent as cookies to the server the issue with this particular",
    "start": "1493779",
    "end": "1501730"
  },
  {
    "text": "angle or this particular solution is that the cookies are based on the browser same origin policy again only",
    "start": "1501730",
    "end": "1508809"
  },
  {
    "text": "sent back to the browser that set the cookies and you kind of again you can't really",
    "start": "1508809",
    "end": "1514749"
  },
  {
    "text": "rely on that because of the cross-site request forgery things that we've seen",
    "start": "1514749",
    "end": "1520019"
  },
  {
    "text": "but you can set a cookie value as a custom header when it goes into the server and so I'll show you what that",
    "start": "1520019",
    "end": "1526960"
  },
  {
    "text": "looks like this helps alleviate the cross-site request forgery issue so same",
    "start": "1526960",
    "end": "1533409"
  },
  {
    "text": "thing we're going to send a post to a login page for an example and this time on the outbound response we're going to set two cookies one is our normal",
    "start": "1533409",
    "end": "1539799"
  },
  {
    "text": "session cookie or J session ID if you want to look at it that way another one in this case is the CSRF ID token that",
    "start": "1539799",
    "end": "1547419"
  },
  {
    "text": "is also set as a separate cookie but you might be thinking you know hey setting",
    "start": "1547419",
    "end": "1553570"
  },
  {
    "text": "one cookie is still vulnerable to CSRF attacks why is setting two cookies any better and in the answer is because in",
    "start": "1553570",
    "end": "1561509"
  },
  {
    "text": "this approach one of those two values specifically the CSRF ID token is set by",
    "start": "1561509",
    "end": "1568059"
  },
  {
    "text": "your clients javascript to set a header on the outbound requests into the server",
    "start": "1568059",
    "end": "1573119"
  },
  {
    "text": "right browsers won't do that automatically your JavaScript has to be able to manipulate the header and so yes",
    "start": "1573119",
    "end": "1579100"
  },
  {
    "text": "the cookies will be sent back to the server no matter what but the server can reject the request if it doesn't see the",
    "start": "1579100",
    "end": "1584679"
  },
  {
    "text": "custom header that it expects to see with the value that was set as the cookie and so if you guys remember with",
    "start": "1584679",
    "end": "1592299"
  },
  {
    "text": "cross or same-origin policies and browsers HT ava's crypt based on HTML",
    "start": "1592299",
    "end": "1598570"
  },
  {
    "text": "from a different domain is not allowed to set custom headers on a request unless those custom headers are approved",
    "start": "1598570",
    "end": "1604179"
  },
  {
    "text": "by a cross origin request policy for the browser so this effectively eliminates",
    "start": "1604179",
    "end": "1609639"
  },
  {
    "text": "that that attack vector because because malicious scripts can't set custom headers",
    "start": "1609639",
    "end": "1615310"
  },
  {
    "text": "so that's really really nice the custom",
    "start": "1615310",
    "end": "1621170"
  },
  {
    "start": "1617000",
    "end": "1617000"
  },
  {
    "text": "header could be whatever you want you can call it whatever you want it's not there's no RFC standard for this so it's whatever you guys feel is relevant the",
    "start": "1621170",
    "end": "1629360"
  },
  {
    "text": "issue with this though is it's still vulnerable to cross-site scripting attacks so as I mentioned before if your app is susceptible to XSS attacks then",
    "start": "1629360",
    "end": "1637190"
  },
  {
    "text": "somebody can inject malicious script into your browser and that can take can look at any value that comes back from",
    "start": "1637190",
    "end": "1643610"
  },
  {
    "text": "the server so cookie values what have you or at least non secure cookie values and then takes that value and can send",
    "start": "1643610",
    "end": "1649760"
  },
  {
    "text": "it off to their server if they wanted to and then they could take that and Forge your request back in your server because they they can set the header from you",
    "start": "1649760",
    "end": "1656360"
  },
  {
    "text": "know a reverse proxy for example so this double submit cookie thing is valid you",
    "start": "1656360",
    "end": "1662750"
  },
  {
    "text": "just have to be super careful to make sure that you encode user content so as long as you're doing that it's a good",
    "start": "1662750",
    "end": "1667850"
  },
  {
    "text": "solution one of the ones I like the most is the origin header check it doesn't",
    "start": "1667850",
    "end": "1673580"
  },
  {
    "text": "require additional cookies cookie values browsers by default will send the origin",
    "start": "1673580",
    "end": "1679280"
  },
  {
    "text": "header well all browsers except for IE 8 but I don't know anybody who really tries to build for that anymore",
    "start": "1679280",
    "end": "1684770"
  },
  {
    "text": "but anything better than IE 8 and any other major major modern browser will automatically send the origin header on",
    "start": "1684770",
    "end": "1690560"
  },
  {
    "text": "an outbound request to the server and JavaScript clients are not allowed to set this header at all no matter where",
    "start": "1690560",
    "end": "1696950"
  },
  {
    "text": "well I think you might be able to do it if it's in the same origin policy but I think that's on by default for every",
    "start": "1696950",
    "end": "1702350"
  },
  {
    "text": "major browser for the for the origin that initiative that served the HTML",
    "start": "1702350",
    "end": "1708880"
  },
  {
    "text": "it's always the value of the page initiating the request so again this",
    "start": "1708880",
    "end": "1714050"
  },
  {
    "text": "can't be hacked via browser j/s you know compromised JavaScript runtime can't set",
    "start": "1714050",
    "end": "1721100"
  },
  {
    "text": "the header maliciously and there is no special key that can be intercepted and",
    "start": "1721100",
    "end": "1727730"
  },
  {
    "text": "used in a reverse proxy for example but reverse proxies you know malicious",
    "start": "1727730",
    "end": "1733760"
  },
  {
    "text": "reverse proxies can set headers in any format they want so that is one potential caveat with this particular",
    "start": "1733760",
    "end": "1741110"
  },
  {
    "text": "approach or actually with any of these approaches so I just want to be clear that the strategies that we're talking about are specifically around",
    "start": "1741110",
    "end": "1746440"
  },
  {
    "text": "browser-based security models service can almost do anything that they want okay so we talked about some",
    "start": "1746440",
    "end": "1755820"
  },
  {
    "text": "client-side stuff what about the server-side issues let's say that our session ID cookies are secure we're not",
    "start": "1755820",
    "end": "1762090"
  },
  {
    "text": "susceptible to XSS attacks we're not susceptible to CSRF attacks and I still use a session ID cooking that's fine",
    "start": "1762090",
    "end": "1768000"
  },
  {
    "text": "there's there's no real problems with that but they're all there are some",
    "start": "1768000",
    "end": "1773309"
  },
  {
    "start": "1770000",
    "end": "1770000"
  },
  {
    "text": "problems it's not perfect so one of the issues with session IDs is that they're opaque they're just pointers there you can't",
    "start": "1773309",
    "end": "1779970"
  },
  {
    "text": "look at a little session ID string and get any inherent value out of it you can't look at it and say oh this",
    "start": "1779970",
    "end": "1785370"
  },
  {
    "text": "person's allowed to do X or they're not allowed to do Y you know it's just an opaque value that's just a pointer to",
    "start": "1785370",
    "end": "1790380"
  },
  {
    "text": "some state somewhere one of the other issues with session IDs is as",
    "start": "1790380",
    "end": "1795920"
  },
  {
    "text": "micro-service architectures are becoming more more popular and SOA architectures",
    "start": "1795920",
    "end": "1801270"
  },
  {
    "text": "are becoming more prevalent each of",
    "start": "1801270",
    "end": "1806970"
  },
  {
    "text": "these random services kind of might need to know about user identity and as a result they'll have to dereference that",
    "start": "1806970",
    "end": "1812190"
  },
  {
    "text": "session ID you know hey given this ID what users associated with it and the more services that you have the more",
    "start": "1812190",
    "end": "1818610"
  },
  {
    "text": "times that you have to do that so you might need to then build a dereferencing service just to figure out who's associated with that session ID and that",
    "start": "1818610",
    "end": "1824309"
  },
  {
    "text": "causes its own set of problems and maybe a bottleneck in the architecture because",
    "start": "1824309",
    "end": "1832260"
  },
  {
    "text": "they're opaque clients can't look at them and find value in them you know we I had mentioned this just a second ago",
    "start": "1832260",
    "end": "1838679"
  },
  {
    "text": "but if I'm a JavaScript app I can't look at a session ID cookie and do anything with it doesn't help me as a JavaScript",
    "start": "1838679",
    "end": "1844050"
  },
  {
    "text": "developer to do anything meaningful but the biggest reason why sessions are an issue especially at scale is that",
    "start": "1844050",
    "end": "1850530"
  },
  {
    "text": "sessions equate to server state you know",
    "start": "1850530",
    "end": "1855840"
  },
  {
    "text": "the more and more server state you have the more you have to synchronize it the more you have to distribute it in the cluster you have to make it",
    "start": "1855840",
    "end": "1861390"
  },
  {
    "text": "fault-tolerant you know you don't want your user executing requests one minute and then the next minute you don't know who they are anymore",
    "start": "1861390",
    "end": "1867059"
  },
  {
    "text": "it's a terrible user experience so if you use sessions and you store user identities in sessions or other relevant",
    "start": "1867059",
    "end": "1872370"
  },
  {
    "text": "data in the session you still you have to deal with this this distributed state issue and at scale again this poses real",
    "start": "1872370",
    "end": "1879870"
  },
  {
    "text": "engineering problems so guys like Facebook or Google or you know they try to avoid this at all costs you don't want it it's",
    "start": "1879870",
    "end": "1888780"
  },
  {
    "text": "not a fun problem to deal with when you hit scale so you're hitting the server you're looking upstate on every request",
    "start": "1888780",
    "end": "1895070"
  },
  {
    "text": "no fun so token authentication say answer to",
    "start": "1895070",
    "end": "1901110"
  },
  {
    "text": "everything right maybe maybe not but token authentication is a sort of a",
    "start": "1901110",
    "end": "1908010"
  },
  {
    "text": "modern approach based on everything we just talked about but this is sort of the second part of the presentation where we talked about all the things",
    "start": "1908010",
    "end": "1913710"
  },
  {
    "text": "that we've been doing the last five to ten years and now how token authentication can maybe augment some of the strategies to get better results so",
    "start": "1913710",
    "end": "1920790"
  },
  {
    "start": "1920000",
    "end": "1920000"
  },
  {
    "text": "what do I mean when I say token authentication authentication I think",
    "start": "1920790",
    "end": "1926580"
  },
  {
    "text": "it's always important to clarify a lot of people have different meanings what it means when I say authentication I mean the process of verifying or proving",
    "start": "1926580",
    "end": "1935280"
  },
  {
    "text": "the authenticity of a particular client or end-user so it's the process of",
    "start": "1935280",
    "end": "1941100"
  },
  {
    "text": "proving that a user is who they say they are right that's that's what I mean by authentication in this case what's a",
    "start": "1941100",
    "end": "1947130"
  },
  {
    "text": "token a token is really anything you want to be in most cases it's a self-contained singular kind of chunk of",
    "start": "1947130",
    "end": "1955050"
  },
  {
    "text": "information that can be used maybe as a lookup mechanism as a pointer maybe",
    "start": "1955050",
    "end": "1960210"
  },
  {
    "text": "there's some other intrinsic value in it but it I I mean a token in the broad",
    "start": "1960210",
    "end": "1965520"
  },
  {
    "text": "sense of the word in this case but there's this really cool thing out if",
    "start": "1965520",
    "end": "1971610"
  },
  {
    "start": "1967000",
    "end": "1967000"
  },
  {
    "text": "you guys haven't seen it yet called JSON web tokens JWT is very quickly becoming",
    "start": "1971610",
    "end": "1977940"
  },
  {
    "text": "sort of the de facto standard for token based implementations across the web because it satisfies the needs of the",
    "start": "1977940",
    "end": "1986520"
  },
  {
    "text": "two definitions that I gave a second ago but it doesn't a very easy convenient format that most people can understand",
    "start": "1986520",
    "end": "1992910"
  },
  {
    "text": "it's easy to parse and construct but a JSON web token is a URL safe compact and",
    "start": "1992910",
    "end": "1998850"
  },
  {
    "text": "self-contained string so it's you are all safe because of the coding that's",
    "start": "1998850",
    "end": "2004460"
  },
  {
    "text": "part of the specification it's compact it's supposed to be very small the",
    "start": "2004460",
    "end": "2010040"
  },
  {
    "text": "amount of data that's in and then base64 encoded it's not supposed to be a whole chunk of huge chunk of data and it's",
    "start": "2010040",
    "end": "2015350"
  },
  {
    "text": "self-contained it's come pletely independent of anything else you can look at a JWT and and get meaning",
    "start": "2015350",
    "end": "2021950"
  },
  {
    "text": "and value in it without having to hit another service potentially but the",
    "start": "2021950",
    "end": "2027710"
  },
  {
    "text": "string is opaque and and it can be used as a token like any other string token",
    "start": "2027710",
    "end": "2032900"
  },
  {
    "text": "previously one thing I'll note is that a big reason why starting become like a de",
    "start": "2032900",
    "end": "2037910"
  },
  {
    "text": "facto standard is that while oh aw - and JWT are completely orthogonal",
    "start": "2037910",
    "end": "2043000"
  },
  {
    "text": "specifications they have no dependencies on each other a lot of people who build oauth2 implementations end up using JWT",
    "start": "2043000",
    "end": "2049460"
  },
  {
    "text": "s as the token mechanism in their JWT service or excuse me in their OAuth",
    "start": "2049460",
    "end": "2054710"
  },
  {
    "text": "service so oo authors a protocol does use tokens but they don't specify in the OAuth spec or two spec what those tokens",
    "start": "2054710",
    "end": "2061790"
  },
  {
    "text": "should look like and what format they should be in or anything so it's up to the aw - implementer to choose whatever",
    "start": "2061790",
    "end": "2067250"
  },
  {
    "text": "they want and so most people these days are using J WTS as their token choice",
    "start": "2067250",
    "end": "2073000"
  },
  {
    "text": "one of the cool things about J WTS is that their strings so you can store them",
    "start": "2073000",
    "end": "2078830"
  },
  {
    "text": "in cookies and then that can give you a lot of power and flexibility but it",
    "start": "2078830",
    "end": "2084350"
  },
  {
    "text": "should be pointed out that all those cookie rules still apply so you have to",
    "start": "2084350",
    "end": "2089360"
  },
  {
    "text": "protect against CSRF attacks and XSS attacks but it's still a very powerful",
    "start": "2089360",
    "end": "2095990"
  },
  {
    "text": "thing to have a JWT in a cookie and I'll talk a little bit maybe a little bit later about how that can be beneficial",
    "start": "2095990",
    "end": "2102680"
  },
  {
    "text": "outside of OAuth because it is a string and it is a self-contained compact",
    "start": "2102680",
    "end": "2109790"
  },
  {
    "text": "representation just like a session ID used to be or are they they are you can",
    "start": "2109790",
    "end": "2116390"
  },
  {
    "text": "replace such an IDs entirely with J WTS because it's just a string and so is a session ID you can do the same exact",
    "start": "2116390",
    "end": "2123740"
  },
  {
    "text": "thing with a JWT that you have with normal session IDs but they give you",
    "start": "2123740",
    "end": "2129950"
  },
  {
    "text": "some more power more more more value and",
    "start": "2129950",
    "end": "2134960"
  },
  {
    "text": "I'll break it down and explain how that's possible or why but this is what a JWT looks like in the wild it's just",
    "start": "2134960",
    "end": "2141290"
  },
  {
    "text": "an ugly string there's nothing special about it but if you look closely there",
    "start": "2141290",
    "end": "2146600"
  },
  {
    "text": "are two periods in this representation one of the top-line upper right and one",
    "start": "2146600",
    "end": "2154010"
  },
  {
    "text": "on the second-to-last line on the bottom left and those two periods are delimiter",
    "start": "2154010",
    "end": "2162440"
  },
  {
    "text": "x' and so you can break a JWT up into constituent parts why is it like that",
    "start": "2162440",
    "end": "2173140"
  },
  {
    "text": "that's odd bear with me a second did it work yeah",
    "start": "2173140",
    "end": "2179450"
  },
  {
    "text": "it worked so okay so there's a JWT split by the two periods as delimiters and",
    "start": "2179450",
    "end": "2186110"
  },
  {
    "text": "when you look at these these these parts independently the the first part first chunk is called the header the second",
    "start": "2186110",
    "end": "2192860"
  },
  {
    "text": "part is called the body otherwise known as the claims often and you'll see why they're called claims in a minute",
    "start": "2192860",
    "end": "2198580"
  },
  {
    "text": "followed by a cryptographic signature and this is all base 64 encoded",
    "start": "2198580",
    "end": "2204290"
  },
  {
    "text": "basically for URL encoded to be URL safe so if I took these chunks and they",
    "start": "2204290",
    "end": "2210500"
  },
  {
    "text": "base64 decoded them as any JW client could you kind of get in all the good",
    "start": "2210500",
    "end": "2217070"
  },
  {
    "text": "stuff inside so the header is its own little JSON object that tells you some information about what the body is like",
    "start": "2217070",
    "end": "2223340"
  },
  {
    "text": "in this case we're indicating that it's a JWT by the type header and then the",
    "start": "2223340",
    "end": "2229040"
  },
  {
    "text": "algorithm in this case says this is a JWT that has been digitally signed using the H max sha-256 algorithm so based on",
    "start": "2229040",
    "end": "2238190"
  },
  {
    "text": "the header you know how to treat the body and whether or not to trust it based on a crypto signature in the body",
    "start": "2238190",
    "end": "2245120"
  },
  {
    "text": "is filled with some data basically assertions is S stands for issuer I'll",
    "start": "2245120",
    "end": "2254660"
  },
  {
    "text": "just jump into that the cryptographic signature is just a randomly generated by to rate it has no no intrinsic",
    "start": "2254660",
    "end": "2260120"
  },
  {
    "text": "meaning but the issuer field is basically who created the token who is",
    "start": "2260120",
    "end": "2265970"
  },
  {
    "text": "responsible for generating the token exp indicates when that token expires often",
    "start": "2265970",
    "end": "2274160"
  },
  {
    "text": "you will want to have expiration times on your tokens you don't want necessarily users to stay logged in for",
    "start": "2274160",
    "end": "2279920"
  },
  {
    "text": "forever there's a lot of good security reasons for that I should note that as a Java crew here",
    "start": "2279920",
    "end": "2288410"
  },
  {
    "text": "expiration is indicated in value it's the number of seconds since epoch not",
    "start": "2288410",
    "end": "2293970"
  },
  {
    "text": "the number of milliseconds so that kind of throws you off if you're trying to set these values yourself sub is the",
    "start": "2293970",
    "end": "2299849"
  },
  {
    "text": "subject basically the entity for whom",
    "start": "2299849",
    "end": "2304950"
  },
  {
    "text": "this this token is about or who it's",
    "start": "2304950",
    "end": "2310589"
  },
  {
    "text": "representing basically the subject basically a user and this could be you",
    "start": "2310589",
    "end": "2316859"
  },
  {
    "text": "know any kind of format any identifier user ID URL it's up to you guys and a",
    "start": "2316859",
    "end": "2322619"
  },
  {
    "text": "lot of times you'll see people throw in this notion of scope into the into the",
    "start": "2322619",
    "end": "2328980"
  },
  {
    "text": "JWT I should mention that scope itself is not a JWT reserved keyword it's not",
    "start": "2328980",
    "end": "2334020"
  },
  {
    "text": "part of the specification but a lot of people add that to indicate what that subject is allowed to do so it's",
    "start": "2334020",
    "end": "2340710"
  },
  {
    "text": "basically saying here's a list of permissions that this subject is permitted to do while using this particular application so awesome so we",
    "start": "2340710",
    "end": "2350880"
  },
  {
    "text": "have this nice structured mechanism of representing data that's valuable to the application whereas the session ID",
    "start": "2350880",
    "end": "2357210"
  },
  {
    "text": "itself didn't this is nice because it's implicitly trusted because it's",
    "start": "2357210",
    "end": "2363599"
  },
  {
    "text": "cryptographically signed how many people here don't understand what digital",
    "start": "2363599",
    "end": "2369299"
  },
  {
    "text": "signatures are how they work and it's okay if you don't because sometimes the stuff gets kind of hairy so okay so a",
    "start": "2369299",
    "end": "2374869"
  },
  {
    "text": "cryptographic signature is a way of digitally verifying that data has not",
    "start": "2374869",
    "end": "2381960"
  },
  {
    "text": "been tampered with right you should be able to compute a value think of sending",
    "start": "2381960",
    "end": "2387089"
  },
  {
    "text": "some data into a black box with a verification key of some sort could be",
    "start": "2387089",
    "end": "2392220"
  },
  {
    "text": "public could be private and the output of that value or the output of that black box is yes this matches the",
    "start": "2392220",
    "end": "2399150"
  },
  {
    "text": "expected conditions or the or I don't understand this value it's been changed and it shouldn't have been changed so",
    "start": "2399150",
    "end": "2405809"
  },
  {
    "text": "it's a way to verify the integrity of a data payload and almost all JWT s are",
    "start": "2405809",
    "end": "2412710"
  },
  {
    "text": "cryptographically signed they don't have to be but and practice almost everyone uses sign",
    "start": "2412710",
    "end": "2418430"
  },
  {
    "text": "JWT s using a server private key and that allows the server to validate came",
    "start": "2418430",
    "end": "2428240"
  },
  {
    "text": "back in no one's changed it no one has manipulated the value the server can can trust that no one's try to inject their",
    "start": "2428240",
    "end": "2435319"
  },
  {
    "text": "own data and changed values and stuff so digital signatures are used for data integrity they can also be used for",
    "start": "2435319",
    "end": "2441500"
  },
  {
    "text": "authenticity but that's technically called a message authentication code it's a little different but JWT s are",
    "start": "2441500",
    "end": "2449540"
  },
  {
    "text": "structured as we saw there's a there's the claims body you can have user name or user excuse me name value pairs so",
    "start": "2449540",
    "end": "2455420"
  },
  {
    "text": "you can put whatever you need in them and as you saw with the scope attribute you can inform clients about what the",
    "start": "2455420",
    "end": "2461420"
  },
  {
    "text": "user is allowed to do basically set up permissions and that's really nice because clients can inspect these values",
    "start": "2461420",
    "end": "2467660"
  },
  {
    "text": "and turn on or off features in the user interface right they don't have to have a lot of these round-trip HTTP requests",
    "start": "2467660",
    "end": "2473510"
  },
  {
    "text": "back to the server to say can they do this can they do that can they do this now I should be very clear that's",
    "start": "2473510",
    "end": "2480559"
  },
  {
    "text": "convenient for the user interface but the server should always verify whether or not a user has permission to do",
    "start": "2480559",
    "end": "2486890"
  },
  {
    "text": "something at the time that request is made right this is just a useful mechanism for clients but it's not",
    "start": "2486890",
    "end": "2492500"
  },
  {
    "text": "authoritative the server should always have the authoritative answer on what's allowed or not it's just a convenience",
    "start": "2492500",
    "end": "2497630"
  },
  {
    "text": "mechanism but the big thing here is that it's stateless because it's",
    "start": "2497630",
    "end": "2502760"
  },
  {
    "text": "self-contained and has its own data you don't have to have server sessions at all all right the information that's",
    "start": "2502760",
    "end": "2508130"
  },
  {
    "text": "relevant to your server can be encapsulated in the JWT so when that JWT is sent by a client or a browser into",
    "start": "2508130",
    "end": "2514640"
  },
  {
    "text": "your server you can unpack the JWT verify the cryptographic signature to make sure no one's changed it and then",
    "start": "2514640",
    "end": "2521390"
  },
  {
    "text": "you can just trust the data that's inside of it now I want to be super careful here JWT and signatures do not",
    "start": "2521390",
    "end": "2529460"
  },
  {
    "text": "guarantee confidentiality so you don't want to store secure sensitive data in a JWT that's",
    "start": "2529460",
    "end": "2537710"
  },
  {
    "text": "signed right anybody including clients can decrypt it not decrypt it but unpack it and see what those values are so you",
    "start": "2537710",
    "end": "2546290"
  },
  {
    "text": "don't want to have things like passwords or anything like that stored in it you know Social Security numbers or things like that but it's okay to have",
    "start": "2546290",
    "end": "2552900"
  },
  {
    "text": "things like user identifier z' and things that are generally seen is not not secure in and of themselves and if",
    "start": "2552900",
    "end": "2559140"
  },
  {
    "text": "that's good enough for your app you can use it and completely get rid of sessions and you completely avoid server state for identity assertions which is",
    "start": "2559140",
    "end": "2567059"
  },
  {
    "text": "awesome so these sound awesome and perfect and a silver bullet but they're",
    "start": "2567059",
    "end": "2575280"
  },
  {
    "text": "not there's always kind of a catch to everything one of the interesting things",
    "start": "2575280",
    "end": "2580589"
  },
  {
    "text": "about JSON web tokens in this manner and this is true of OAuth 2 how off - it does it is that just the fact that a",
    "start": "2580589",
    "end": "2587579"
  },
  {
    "text": "client has the token and gives it to you means that there's an implicit trust from the client to the server there's no",
    "start": "2587579",
    "end": "2595530"
  },
  {
    "text": "additional message authenticity guaranteed to be verified or confidentiality the fact that somebody",
    "start": "2595530",
    "end": "2602069"
  },
  {
    "text": "has the token right it's a bearer right whoever has that information is considered the bearer and when they send",
    "start": "2602069",
    "end": "2607740"
  },
  {
    "text": "it it's called a bearer token for that reason that's implicitly trusted there's no additional security guarantees beyond",
    "start": "2607740",
    "end": "2614280"
  },
  {
    "text": "that a lot of people assume that just because it's TLS based they're good to go and for a lot of apps that is true",
    "start": "2614280",
    "end": "2620040"
  },
  {
    "text": "like social apps like Facebook you know Facebook doesn't expose credit card numbers and stuff about your account so",
    "start": "2620040",
    "end": "2626490"
  },
  {
    "text": "it's not a big deal if if some of that information is isn't perfectly locked down so part of the issue with this",
    "start": "2626490",
    "end": "2634559"
  },
  {
    "text": "implicit trust is how long is it token good for you know maybe it expires in 30 minutes maybe it expires longer than",
    "start": "2634559",
    "end": "2642839"
  },
  {
    "text": "that there's this notion especially an OAuth called refresh tokens on how you can exchange a refresh token and get",
    "start": "2642839",
    "end": "2649319"
  },
  {
    "text": "back a new access token that's valid for another period of time for a given window and Refresh tokens unfortunately",
    "start": "2649319",
    "end": "2655980"
  },
  {
    "text": "my kind of time to talk about them tonight but the issue with refresh tokens and access tokens there's always this kind of sliding window about how",
    "start": "2655980",
    "end": "2663000"
  },
  {
    "text": "long the existing access token is valid for before it's no longer valid since you're not using server state to",
    "start": "2663000",
    "end": "2668849"
  },
  {
    "text": "maintain that anymore the you know and you can use these two things to to change your windows depending on the",
    "start": "2668849",
    "end": "2674579"
  },
  {
    "text": "security requirements for your application you know a bank might want to window five minutes whereas Facebook's is actually like 180 days so",
    "start": "2674579",
    "end": "2681119"
  },
  {
    "text": "it really depends on your app there's no one-size solution for this stuff if you do use them in",
    "start": "2681119",
    "end": "2686820"
  },
  {
    "text": "cookies I had mentioned you still have to secure them and as I mentioned a second ago",
    "start": "2686820",
    "end": "2692340"
  },
  {
    "text": "JW T's by default are not encrypted so you can't store sensitive data in their JW t however it does have so when a JWT",
    "start": "2692340",
    "end": "2700710"
  },
  {
    "text": "is signed it is called a JW s according to their specification JW t as a spec",
    "start": "2700710",
    "end": "2706350"
  },
  {
    "text": "also supports encryption like aes-256 GCM kind of encryption that's called a JW e if you use",
    "start": "2706350",
    "end": "2713880"
  },
  {
    "text": "encryption so those are secure and can contain sensitive information you can",
    "start": "2713880",
    "end": "2719190"
  },
  {
    "text": "send it out of the server but most people don't use it for that because they only need to store user IDs and stuff like that and maybe lists of",
    "start": "2719190",
    "end": "2725790"
  },
  {
    "text": "permissions so just be aware of those issues if you start using JW TS but",
    "start": "2725790",
    "end": "2733230"
  },
  {
    "text": "weird Java group we want to know how you can do this in Java and I'm gonna use this opportunity to plug j JW T because",
    "start": "2733230",
    "end": "2741510"
  },
  {
    "start": "2736000",
    "end": "2736000"
  },
  {
    "text": "I built it so it's awesome um but I",
    "start": "2741510",
    "end": "2746970"
  },
  {
    "text": "think it's awesome but you know check it out there's a lot of other decent",
    "start": "2746970",
    "end": "2752040"
  },
  {
    "text": "libraries out there too for the JVM but I'm going to show you some code examples using this this library to show you how",
    "start": "2752040",
    "end": "2758520"
  },
  {
    "text": "easy it is to create JD bootys in Java this works on Android as well by the way",
    "start": "2758520",
    "end": "2763740"
  },
  {
    "text": "so JJ JJ WT as a library works on both Android n and Java server side so in",
    "start": "2763740",
    "end": "2772200"
  },
  {
    "text": "this case I'm going to create my JWT compact string write the one with the two periods in it and I'm going to set some fields I'm",
    "start": "2772200",
    "end": "2778770"
  },
  {
    "text": "going to set an issuer field the subject I'm going to set an expiration time notice that takes in an maybe you can't",
    "start": "2778770",
    "end": "2784920"
  },
  {
    "text": "tell it's not obvious it will take in a normal Java data object and do the millisecond second conversion for you",
    "start": "2784920",
    "end": "2790440"
  },
  {
    "text": "you have to worry about that and then in this case I'm putting some non-standard",
    "start": "2790440",
    "end": "2795780"
  },
  {
    "text": "JWT data in there in this case the scope because again that's not a reserved word and JWT and it just uses normal map",
    "start": "2795780",
    "end": "2802800"
  },
  {
    "text": "semantics key values and then I'm going to sign it with H max sha-256 using an",
    "start": "2802800",
    "end": "2809220"
  },
  {
    "text": "encryption key that I created and then I'm going to run the compact function so this is a nice fluent builder in",
    "start": "2809220",
    "end": "2816410"
  },
  {
    "text": "faced to create these things in the JVM technically one one set of chaining",
    "start": "2816410",
    "end": "2823310"
  },
  {
    "text": "calls so that's how you create a JWT and then like I said you can sort in the",
    "start": "2823310",
    "end": "2828770"
  },
  {
    "text": "cookie or send it out you know and it's part of a response but how do you verify",
    "start": "2828770",
    "end": "2834620"
  },
  {
    "text": "it once this goes out to the world how do you make sure that when it comes back it's still it's you can trust it and of",
    "start": "2834620",
    "end": "2841490"
  },
  {
    "text": "course the library allows you to do assertions as well so you can set up a parser you know specify the signature",
    "start": "2841490",
    "end": "2848420"
  },
  {
    "text": "key and you parse what they call like as I said acclaims jws so claims are is",
    "start": "2848420",
    "end": "2854180"
  },
  {
    "text": "that specific type of body it's a jws because it has this that you're expecting it to have a signature",
    "start": "2854180",
    "end": "2859310"
  },
  {
    "text": "so just calling this line of code will give you back the JWT and if it doesn't",
    "start": "2859310",
    "end": "2865130"
  },
  {
    "text": "throw an exception you're good you know you know that the values safe and that you can trust it if it does throw an",
    "start": "2865130",
    "end": "2871010"
  },
  {
    "text": "exception well there's all sorts of other exceptions so signature exception means clearly you shouldn't trust trust",
    "start": "2871010",
    "end": "2876380"
  },
  {
    "text": "it because it didn't have a signature or the signature is invalid there's other things like expired exceptions or premature exceptions if",
    "start": "2876380",
    "end": "2882170"
  },
  {
    "text": "you receive the token before it's supposed to be used all these kind of conditions are kind of built into the library but assuming no errors it's kind",
    "start": "2882170",
    "end": "2889790"
  },
  {
    "text": "of like a one line code experience but highly recommend this one thing I am kind of happy to report there was a with",
    "start": "2889790",
    "end": "2898040"
  },
  {
    "text": "various JWT libraries on the web maybe like a month and a half ago there was a snazzy little attack vector where people",
    "start": "2898040",
    "end": "2906110"
  },
  {
    "text": "were using public public private RSA keys to generate digitally signed JW TS",
    "start": "2906110",
    "end": "2915260"
  },
  {
    "text": "but they took the RSA public key and use it as an H mat key right in the server when it would get it some of these",
    "start": "2915260",
    "end": "2921710"
  },
  {
    "text": "libraries just trusted that this public key was a valid H Mac signing key and they would use it and yes of course the",
    "start": "2921710",
    "end": "2928670"
  },
  {
    "text": "signatures matched because they were using the key with an improper algorithm this happened with a lot of libraries on",
    "start": "2928670",
    "end": "2935150"
  },
  {
    "text": "the net JJ WT did not suffer from that issue so we put a lot of effort and thought around the security around how to use",
    "start": "2935150",
    "end": "2941450"
  },
  {
    "text": "this and it was nice that that none of our users got nabbed by that issue so",
    "start": "2941450",
    "end": "2947780"
  },
  {
    "text": "that's how you do it in code but how does this translate to an HTTP",
    "start": "2947780",
    "end": "2953480"
  },
  {
    "text": "service right we're talking about browsers or rest clients what what does this look like from an HTTP exchange",
    "start": "2953480",
    "end": "2961400"
  },
  {
    "text": "perspective so I'm going to show one example in this example assumes that we",
    "start": "2961400",
    "end": "2967070"
  },
  {
    "text": "have a single page JavaScript application like an angular app talking to your API server so it's your app",
    "start": "2967070",
    "end": "2973040"
  },
  {
    "text": "talking to your API server what does this exchange look like and I'm going to use OAuth 2 as the example protocol here",
    "start": "2973040",
    "end": "2979550"
  },
  {
    "text": "a lot of times I talk to people about OAuth 2 and you know the I start glazing back because oh there's all this",
    "start": "2979550",
    "end": "2985880"
  },
  {
    "text": "complexity and all this other stuff and there's some truth to that Oh F 2 is",
    "start": "2985880",
    "end": "2991250"
  },
  {
    "text": "kind of an uber spec but for this particular use case you're going to see how very simple a lot can be if you can",
    "start": "2991250",
    "end": "2998480"
  },
  {
    "text": "ignore a lot of the stuff around it that causes frustration so this is an example",
    "start": "2998480",
    "end": "3004960"
  },
  {
    "text": "of a request I want to obtain a token that represents an authenticated user",
    "start": "3004960",
    "end": "3011410"
  },
  {
    "text": "and so in this scenario the user has entered in their username and password",
    "start": "3011410",
    "end": "3017020"
  },
  {
    "text": "into a login form you know in my single page app and they hit the submit button and that username and password goes into",
    "start": "3017020",
    "end": "3023590"
  },
  {
    "text": "my REST API server or just HTTP server and at this endpoint o auth token as",
    "start": "3023590",
    "end": "3030790"
  },
  {
    "text": "long as it's a it's got an origin header set as long as the content type is URL",
    "start": "3030790",
    "end": "3036040"
  },
  {
    "text": "form encoded content and it's got these three parameters that's all that's",
    "start": "3036040",
    "end": "3043120"
  },
  {
    "text": "required for a username password based authentication in OAuth so they have this mandate you have to have a",
    "start": "3043120",
    "end": "3049090"
  },
  {
    "text": "parameter called grant type to tell the OAuth implementation what type of authentication is occurring is is a username a password based or is an API",
    "start": "3049090",
    "end": "3055540"
  },
  {
    "text": "key based and the username password scenario they call that grant type just the password grant type so as long as",
    "start": "3055540",
    "end": "3061870"
  },
  {
    "text": "you have the grant past the password grant type and set a username and password pair that's all that's",
    "start": "3061870",
    "end": "3067390"
  },
  {
    "text": "necessary for the OAuth implementation to generate a valid token and send it out and so the idea here is that the",
    "start": "3067390",
    "end": "3074650"
  },
  {
    "text": "client side app is exchanging a user entered username and password and they're getting back a token in response",
    "start": "3074650",
    "end": "3080170"
  },
  {
    "text": "and that's really valuable because that means that the users credentials",
    "start": "3080170",
    "end": "3085370"
  },
  {
    "text": "the password is only exposed for a very small amount of time right they're not the client side app isn't keeping the",
    "start": "3085370",
    "end": "3091460"
  },
  {
    "text": "password in memory and resubmitting on every HTTP request end of the rest api right that'd be kind of opening up",
    "start": "3091460",
    "end": "3097690"
  },
  {
    "text": "attack vectors around cross-site scripting and other issues so it's nice if you can limit the window that the",
    "start": "3097690",
    "end": "3104090"
  },
  {
    "text": "password is exposed and sent over the network tripping over the network so when I submit this token request",
    "start": "3104090",
    "end": "3110260"
  },
  {
    "start": "3108000",
    "end": "3108000"
  },
  {
    "text": "assuming that the username and password match the expected credentials then the",
    "start": "3110260",
    "end": "3116210"
  },
  {
    "text": "OAuth server can just return a JSON response notice the cache control and",
    "start": "3116210",
    "end": "3121610"
  },
  {
    "text": "pragma headers are set you don't want this cached anywhere in HP caching servers or or proxy servers and then",
    "start": "3121610",
    "end": "3128450"
  },
  {
    "text": "they could set this access token you know what the token type is when the expiration is this this is all codified",
    "start": "3128450",
    "end": "3135230"
  },
  {
    "text": "by the oauth2 spec but the really important and easy thing to kind of recognize is that the uh Nexus",
    "start": "3135230",
    "end": "3140780"
  },
  {
    "text": "underscore token I have unfortunately represented with an ellipsis but it's just a JWT in this case right it's just",
    "start": "3140780",
    "end": "3147890"
  },
  {
    "text": "a string that conforms to the JWT spec that we had before so great so I've",
    "start": "3147890",
    "end": "3155750"
  },
  {
    "text": "exchanged a username and password now I've gotten back a token what do I do with it how do i how do i leverage that token for future requests and the answer",
    "start": "3155750",
    "end": "3163640"
  },
  {
    "start": "3161000",
    "end": "3161000"
  },
  {
    "text": "is that the client implementation can just use the the bearer header this is",
    "start": "3163640",
    "end": "3169670"
  },
  {
    "text": "specified in the OAuth spec where they set the authorization header yeah authorization header and they choose an",
    "start": "3169670",
    "end": "3175940"
  },
  {
    "text": "HTTP scheme called bearer the actual word bear followed by some white space followed by the JWT and that's all it's",
    "start": "3175940",
    "end": "3182870"
  },
  {
    "text": "necessary for the server to get that JWT and then verify the digital signature",
    "start": "3182870",
    "end": "3190040"
  },
  {
    "text": "make sure it hasn't been tampered with and then it can get all the data inside of it so it's really not much different",
    "start": "3190040",
    "end": "3196250"
  },
  {
    "text": "than the cookie scenario because you're still getting a JWT it's still done via",
    "start": "3196250",
    "end": "3202640"
  },
  {
    "text": "header and the authorization header can be set by JavaScript clients in the same",
    "start": "3202640",
    "end": "3208220"
  },
  {
    "text": "origin policy but this is this is a very easy kind of flow you got the token you're just sending it back on the",
    "start": "3208220",
    "end": "3213890"
  },
  {
    "text": "bearer header there's nothing crazy or special about this interestingly the same token end point",
    "start": "3213890",
    "end": "3220130"
  },
  {
    "start": "3219000",
    "end": "3219000"
  },
  {
    "text": "can be used for API key authentication too so let's say I'm using an API key",
    "start": "3220130",
    "end": "3225829"
  },
  {
    "text": "not a username password you know API key could be thought of it's kind of like a username and password but way more cryptographically",
    "start": "3225829",
    "end": "3231839"
  },
  {
    "text": "secure and there's other properties around API keys that tend to be better for machine to machine communication but",
    "start": "3231839",
    "end": "3238230"
  },
  {
    "text": "you can do the same thing in this case you see we're setting a grant type of client credential is not password and",
    "start": "3238230",
    "end": "3243440"
  },
  {
    "text": "we're setting an API key ID and our excuse me a client ID and a client secret same endpoint the only thing",
    "start": "3243440",
    "end": "3251579"
  },
  {
    "text": "that's different is the grant type and so that server implementation can change its logic based on the grant type it's very simple it's not this is not too",
    "start": "3251579",
    "end": "3259020"
  },
  {
    "text": "complicated stuff there are a lot of",
    "start": "3259020",
    "end": "3264780"
  },
  {
    "text": "complicated things about OAuth 2 but at least for the authentication flow it's not that difficult I will kind of",
    "start": "3264780",
    "end": "3271260"
  },
  {
    "text": "mention that oh aw thisreally it was originally designed Oh F 2 was originally designed for what I call a",
    "start": "3271260",
    "end": "3276329"
  },
  {
    "text": "three party workflow or they call this three-legged OAuth where you have an end user you have your own server your",
    "start": "3276329",
    "end": "3282900"
  },
  {
    "text": "website you have something like Facebook right there's three parties involved in an identity verification flow and this",
    "start": "3282900",
    "end": "3289410"
  },
  {
    "text": "we're not doing that at all it's just my spa talking to my app Roth and all of",
    "start": "3289410",
    "end": "3295050"
  },
  {
    "text": "the other fringes around want the authorization endpoint who can do what is way overkill it's not necessary the only thing you really care about is",
    "start": "3295050",
    "end": "3301140"
  },
  {
    "text": "exchanging the username and password for a token that I can use on subsequent requests so people kind of get confused",
    "start": "3301140",
    "end": "3309480"
  },
  {
    "text": "about oh I'm only do an API key authentication or I don't understand this Oh auth stuff and how do I get it to work with Facebook and github and",
    "start": "3309480",
    "end": "3315510"
  },
  {
    "text": "it's not really relevant you you can because it's a new respect you can pick and choose the things that you find",
    "start": "3315510",
    "end": "3321030"
  },
  {
    "text": "relevant for your use case the difficulty is then wading through the spec and figuring out which which is relevant for your use case okay so",
    "start": "3321030",
    "end": "3329780"
  },
  {
    "text": "that's an example of how this stuff works at an API level I'm gonna show you",
    "start": "3329780",
    "end": "3336480"
  },
  {
    "text": "guys a quick little demo that I wrote if the computer cooperates so for some",
    "start": "3336480",
    "end": "3343859"
  },
  {
    "text": "reason the CPU seems to be pegged and it's not it's not really going to you guys would be waiting for a while",
    "start": "3343859",
    "end": "3349680"
  },
  {
    "text": "for each one of these things to occur so I guess I'll have to postpone the demo or maybe I can show you guys up here if you're curious about seeing what this",
    "start": "3349680",
    "end": "3355920"
  },
  {
    "text": "stuff looks like all I was going to show you is I have a simple spring boot application that I wrote that all it",
    "start": "3355920",
    "end": "3361049"
  },
  {
    "text": "does is the exact token authentication exchange so I'm using HTTP ie as a command line client to submit an OAuth",
    "start": "3361049",
    "end": "3368430"
  },
  {
    "text": "request using grant type and username and password and then an OAuth token is submitted back and then I take that JWT",
    "start": "3368430",
    "end": "3374609"
  },
  {
    "text": "and I just set it as the authorization header when I execute the next request and you'll see instead of hello world you'll see hello less right because it",
    "start": "3374609",
    "end": "3381329"
  },
  {
    "text": "knows who I am and then it's able to render a view based on a known identity",
    "start": "3381329",
    "end": "3386549"
  },
  {
    "text": "so because it is going haywire apologize I won't be able to show it but I am happy to open floor up for questions yes",
    "start": "3386549",
    "end": "3396890"
  },
  {
    "text": "the third party scenario with mobile banking what do you mean handle it in what way",
    "start": "3399019",
    "end": "3405799"
  },
  {
    "text": "the third party scenario is really relevant if the user excuse me let's say",
    "start": "3408269",
    "end": "3415739"
  },
  {
    "text": "that the the identity source of truth is",
    "start": "3415739",
    "end": "3421019"
  },
  {
    "text": "Amazon for what better Facebook right they claim that they're their identity",
    "start": "3421019",
    "end": "3426690"
  },
  {
    "text": "source of truth and your I don't know maybe you are the bank and you want the user to login with Facebook the bank has",
    "start": "3426690",
    "end": "3433709"
  },
  {
    "text": "to open up a pop-up window or do a redirect to send the user to Facebook and then Facebook asks the user hey Bank",
    "start": "3433709",
    "end": "3441329"
  },
  {
    "text": "of America wants to see your email address in your first name and last name are you going to allow this and if you",
    "start": "3441329",
    "end": "3446489"
  },
  {
    "text": "say yes they create an identity assertion a JWT and redirect but that",
    "start": "3446489",
    "end": "3452910"
  },
  {
    "text": "user back to your website with that identity assertion and then that assertion is verified it's sent back",
    "start": "3452910",
    "end": "3458759"
  },
  {
    "text": "into your server as Bank of America and then Bank of America has what they call",
    "start": "3458759",
    "end": "3463829"
  },
  {
    "text": "an out-of-band connection direct between the bank and Amazon and they'll take that token or that assertion and send it",
    "start": "3463829",
    "end": "3470670"
  },
  {
    "text": "to Amazon and Amazon says okay this is the assertion it's valid it does represent this user so now here's the",
    "start": "3470670",
    "end": "3476789"
  },
  {
    "text": "data that the user has given you permission access and then you can trust that that user has effectively logged in",
    "start": "3476789",
    "end": "3482790"
  },
  {
    "text": "through Facebook so I want to be super careful that is not single sign-on",
    "start": "3482790",
    "end": "3487980"
  },
  {
    "text": "that's what I call delegated authentication right single sign-on is a different ballgame it's very easy to get",
    "start": "3487980",
    "end": "3495900"
  },
  {
    "text": "the two confused but but that's how that would work in the three party scenario does it you know any other questions yes",
    "start": "3495900",
    "end": "3504240"
  },
  {
    "text": "a recommended Java library for doing",
    "start": "3504240",
    "end": "3513390"
  },
  {
    "text": "auth and stuff well there's there's a couple of them so Shiro does not yet do",
    "start": "3513390",
    "end": "3519690"
  },
  {
    "text": "it but it will be part of the to Dido spring security kind of does it but it doesn't in via delegating these other",
    "start": "3519690",
    "end": "3525859"
  },
  {
    "text": "libraries and from what I've heard it's kind of complicated and difficult to use I can't I'm bummed because I can't demo",
    "start": "3525859",
    "end": "3533640"
  },
  {
    "text": "with this but storm path we have a library that automates all this stuff you literally drop in your class path especially with",
    "start": "3533640",
    "end": "3539700"
  },
  {
    "text": "the spring boot up and it fires up and the OAuth token endpoints there your login pages there your registration pages there you have to build any of",
    "start": "3539700",
    "end": "3545790"
  },
  {
    "text": "that stuff so clearly I'm biased I highly recommend that you at least try that out because it is free to use so it's no no sweat - to give it an",
    "start": "3545790",
    "end": "3552690"
  },
  {
    "text": "evaluation but we automate all that stuff but maybe more interestingly is that all of our SDKs are Apache - open",
    "start": "3552690",
    "end": "3561300"
  },
  {
    "text": "sourced so if you want to see how we're doing it you just go look at the source code and get him any other questions yes",
    "start": "3561300",
    "end": "3570589"
  },
  {
    "text": "well yes it would happen on your machine but as you saw when I entered in the like in the Google example and I typed",
    "start": "3570589",
    "end": "3576930"
  },
  {
    "text": "in the script that gave the alert hello world that JavaScript is now executing",
    "start": "3576930",
    "end": "3582089"
  },
  {
    "text": "in your browser in the context of your Dom right and that JavaScript it maybe",
    "start": "3582089",
    "end": "3587940"
  },
  {
    "text": "it wasn't alert maybe it was something that sends an HTTP request after reading all the cookies that you have on your",
    "start": "3587940",
    "end": "3593069"
  },
  {
    "text": "machine and then sending it off to my website so I can steal your identity from the website that you're currently on right that's really the danger and",
    "start": "3593069",
    "end": "3600810"
  },
  {
    "text": "cross-site scripting attacks is once you get once the the JavaScript code",
    "start": "3600810",
    "end": "3606180"
  },
  {
    "text": "executes in the context of that Dom environment it can do whatever it wants to the at least the JavaScript",
    "start": "3606180",
    "end": "3612190"
  },
  {
    "text": "engine allows and it could run as natively as any other script that you loaded from your website so it could be",
    "start": "3612190",
    "end": "3618310"
  },
  {
    "text": "very dangerous and depending on what the script does whether it sends a lot sending off a request or snooping around",
    "start": "3618310",
    "end": "3623980"
  },
  {
    "text": "your data you know maybe it waits for a certain page to be loaded so that it can see your credit card information",
    "start": "3623980",
    "end": "3629619"
  },
  {
    "text": "you know like yes it the attack only affects you as an individual but it could it could do a lot of damage that",
    "start": "3629619",
    "end": "3637240"
  },
  {
    "text": "make sense so the in both generating a",
    "start": "3637240",
    "end": "3643599"
  },
  {
    "text": "JWT and looking at a JWT if you're using signatures which everyone really should",
    "start": "3643599",
    "end": "3649540"
  },
  {
    "text": "be if one when dealing with identity assertions the Builder needs the key so",
    "start": "3649540",
    "end": "3655180"
  },
  {
    "text": "that when it spits out the string it can create the signature that's appended number you know the three parts that",
    "start": "3655180",
    "end": "3661510"
  },
  {
    "text": "third part is the signature that it sends along with the rest of the data as",
    "start": "3661510",
    "end": "3666640"
  },
  {
    "text": "part of the JWT now what the server does is let's say the serve the client sends",
    "start": "3666640",
    "end": "3672339"
  },
  {
    "text": "it into a server the server will then look at the whole JWT and it kind of takes that signature and chops it off",
    "start": "3672339",
    "end": "3678369"
  },
  {
    "text": "and kind of saves it for reference and then it looks at the first two parts and it looks at the signature algorithm and",
    "start": "3678369",
    "end": "3685000"
  },
  {
    "text": "there anything else as well as maybe an identifier as to what signature key was used to create it and it will repeat the",
    "start": "3685000",
    "end": "3690880"
  },
  {
    "text": "process of what the client did it'll it'll take all that data base 64 encode it send it through the signature and",
    "start": "3690880",
    "end": "3697839"
  },
  {
    "text": "then it checks is the signature that the client sent the same thing is what I calculated if the two are identical you",
    "start": "3697839",
    "end": "3704109"
  },
  {
    "text": "can guarantee that the payload hasn't been changed right so whoever creates the JWT has to sign it and send it you",
    "start": "3704109",
    "end": "3711550"
  },
  {
    "text": "know and then the receiver needs to verify the signature is the same as they compute it compared to what they",
    "start": "3711550",
    "end": "3716920"
  },
  {
    "text": "received from the sender and if those two match then hasn't been tampered with in transit now that doesn't mean that",
    "start": "3716920",
    "end": "3723670"
  },
  {
    "text": "hasn't been seen by third party it just means that no one's changed the payload yeah any other question Jess no so the",
    "start": "3723670",
    "end": "3732099"
  },
  {
    "text": "question is is with regards to JWT is it meant for any other third party API or is it meant",
    "start": "3732099",
    "end": "3737800"
  },
  {
    "text": "just from my client to my server right the question and the answer is no it can be used for any protocol anywhere that",
    "start": "3737800",
    "end": "3744250"
  },
  {
    "text": "needs to do any type of assertion it doesn't even have to be an identity assertion any client or server that",
    "start": "3744250",
    "end": "3751910"
  },
  {
    "text": "understands the JWT concept and can do signature verification or decryption if",
    "start": "3751910",
    "end": "3756920"
  },
  {
    "text": "it's encrypted can find value in this approach not necessarily so the example",
    "start": "3756920",
    "end": "3763580"
  },
  {
    "text": "I was showing you was using H Mac as a signature algorithm and H Mac requires a private key that's not shared with",
    "start": "3763580",
    "end": "3769190"
  },
  {
    "text": "anyone else so in that world the server generates the JWT sends it the client and the client has to send it back",
    "start": "3769190",
    "end": "3774940"
  },
  {
    "text": "unchanged and the client will use the same private key to verify JWT also",
    "start": "3774940",
    "end": "3779990"
  },
  {
    "text": "supports public private key cryptography where the server can generate a key and send it out and the public key can be",
    "start": "3779990",
    "end": "3786440"
  },
  {
    "text": "used to verify it right and the public key could be used to create a signature and sent it in and verified with the",
    "start": "3786440",
    "end": "3792470"
  },
  {
    "text": "private key so you can use it in that public private key exchange kind of",
    "start": "3792470",
    "end": "3797570"
  },
  {
    "text": "mechanism images and assets absolutely",
    "start": "3797570",
    "end": "3805310"
  },
  {
    "text": "and that's usually typically ok like most JWT s are less than 512 bytes to 1k",
    "start": "3805310",
    "end": "3812840"
  },
  {
    "text": "and they don't materially impact a lot of the requests that go out a lot of",
    "start": "3812840",
    "end": "3818210"
  },
  {
    "text": "them can be to 300 bytes you know so it's not as long as the quantity of data you store in the JWT you get your work",
    "start": "3818210",
    "end": "3824690"
  },
  {
    "text": "done is relatively slow or small it's way more efficient than having to cluster sessions for example yeah so it",
    "start": "3824690",
    "end": "3832040"
  },
  {
    "text": "does add some network overhead for sure but I think the trade-off is that you don't have to worry about server state",
    "start": "3832040",
    "end": "3837230"
  },
  {
    "text": "and that allows you to scale way better than otherwise yes so the question is is",
    "start": "3837230",
    "end": "3843920"
  },
  {
    "text": "that using OAuth 2 with mobile clients they have refresh tokens that acquire new tokens new access tokens you know if",
    "start": "3843920",
    "end": "3850880"
  },
  {
    "text": "you have a single page application could you use them in the same way right what",
    "start": "3850880",
    "end": "3855890"
  },
  {
    "text": "I recommend it um yes I would actually recommend it as long as you're using",
    "start": "3855890",
    "end": "3863330"
  },
  {
    "text": "HTTPS Everywhere right and you're so I'm a security nut right so like TLS is not",
    "start": "3863330",
    "end": "3870890"
  },
  {
    "text": "as I mentioned not a panacea and so one of the things a lot of people don't understand or or recognize with SSL is",
    "start": "3870890",
    "end": "3878150"
  },
  {
    "text": "that it's a network layer Network layer protocol right so if I have data that's",
    "start": "3878150",
    "end": "3883880"
  },
  {
    "text": "in my app tier and it goes down the application stack to the operating system down to the network here and then",
    "start": "3883880",
    "end": "3889520"
  },
  {
    "text": "across the network and then out of that up the application step into the other app these two parts are not protected at",
    "start": "3889520",
    "end": "3895670"
  },
  {
    "text": "all by TLS only the network transmission is so if either machine has a virus or a",
    "start": "3895670",
    "end": "3901040"
  },
  {
    "text": "bug or trojan that data is still susceptible to inspection and infiltration my TLS doesn't protect at",
    "start": "3901040",
    "end": "3907280"
  },
  {
    "text": "all against that scenario so the only way to protect n2n is to use message level encryption like a jwe that",
    "start": "3907280",
    "end": "3914180"
  },
  {
    "text": "guarantees nothing in or out on the way down or across the network can be intercepted so I would recommend the",
    "start": "3914180",
    "end": "3921680"
  },
  {
    "text": "mechanism you're talking about depending on the security profile of the application being built if it's a banking app probably wouldn't do it if",
    "start": "3921680",
    "end": "3928280"
  },
  {
    "text": "it's a social app I have no problem with that so it really depends on on your app",
    "start": "3928280",
    "end": "3933500"
  },
  {
    "text": "like yeah does that answer your question yes so the question is is that a high",
    "start": "3933500",
    "end": "3940400"
  },
  {
    "text": "level can we talk about a migration path between existing session mechanisms to a",
    "start": "3940400",
    "end": "3945740"
  },
  {
    "text": "JWT based solution this is actually it's",
    "start": "3945740",
    "end": "3950750"
  },
  {
    "text": "actually not that difficult so you can actually use both concurrently because the container Tomcat for example will",
    "start": "3950750",
    "end": "3958310"
  },
  {
    "text": "translate that session ID and make it available as an HTTP session automatically if you set up like a",
    "start": "3958310",
    "end": "3964160"
  },
  {
    "text": "servlet filter that will start inspecting these tokens as they come in then you can do the identity assertion",
    "start": "3964160",
    "end": "3970250"
  },
  {
    "text": "at that level and then set it maybe as a request attribute like the user account and that will just follow the request during its during its execution and then",
    "start": "3970250",
    "end": "3979220"
  },
  {
    "text": "so that allows you I think to migrate from one to the other one of the other things that I like to do to in those",
    "start": "3979220",
    "end": "3984560"
  },
  {
    "text": "scenarios and I think you know Shiro has a solution for this is for the servlet",
    "start": "3984560",
    "end": "3990410"
  },
  {
    "text": "API I'll put in a servlet filter at the top of the stack that wraps the httpservletrequest and it prevents",
    "start": "3990410",
    "end": "3996140"
  },
  {
    "text": "anyone from calling yet session or get session true or just get session without any arguments and that will guarantee",
    "start": "3996140",
    "end": "4001960"
  },
  {
    "text": "that anything below the stack that tries to do that will throw an exception because that means that somebody's trying to create server state and they",
    "start": "4001960",
    "end": "4007630"
  },
  {
    "text": "shouldn't be allowed to do that and so that's one of the nicest ways to catch yourself and any code",
    "start": "4007630",
    "end": "4012859"
  },
  {
    "text": "that you might have missed or forgotten about because it'll show up as an exception that you can catch hopefully an integration testing so that that's",
    "start": "4012859",
    "end": "4019489"
  },
  {
    "text": "probably the cleanest easiest way to support that and then as long as your servlet filter mechanism so storm path",
    "start": "4019489",
    "end": "4026450"
  },
  {
    "text": "and shear like storm paths stuff is all based on several filters will do all this resolution before it ever gets here your your controller your MVC",
    "start": "4026450",
    "end": "4034130"
  },
  {
    "text": "controllers such that you can call requests I get account and it just works because our filter executed before it got to your controller so that's why we",
    "start": "4034130",
    "end": "4041180"
  },
  {
    "text": "do it and that's why I'd probably recommend to do it because it worked fine for us any other questions um the",
    "start": "4041180",
    "end": "4051769"
  },
  {
    "text": "question is do we work with clients on migration scenarios the answer is yes if",
    "start": "4051769",
    "end": "4057049"
  },
  {
    "text": "they're going to be using storm path in their products deck yeah most definitely",
    "start": "4057049",
    "end": "4062349"
  },
  {
    "text": "we help try to automate all the OAuth flows because our back-end team is a is",
    "start": "4062349",
    "end": "4068869"
  },
  {
    "text": "a very senior Java level team we and if",
    "start": "4068869",
    "end": "4074299"
  },
  {
    "text": "any of our customers using any of our Java integrations those are always very easy for us to support we also have for",
    "start": "4074299",
    "end": "4081049"
  },
  {
    "text": "each language we support we have an on staff dedicated employee that is an expert in that respective community so",
    "start": "4081049",
    "end": "4086779"
  },
  {
    "text": "they can we have a job you know Ruby guy who knows that stuff like the back of his hand and he'll facilitate with that",
    "start": "4086779",
    "end": "4091910"
  },
  {
    "text": "kind of integration so but if you're a Java back-end we have a whole swath of",
    "start": "4091910",
    "end": "4097460"
  },
  {
    "text": "people that that that help on those kind of things it's pretty easy for us to support thanks for your time guys",
    "start": "4097460",
    "end": "4106088"
  },
  {
    "text": "you",
    "start": "4107569",
    "end": "4109630"
  }
]