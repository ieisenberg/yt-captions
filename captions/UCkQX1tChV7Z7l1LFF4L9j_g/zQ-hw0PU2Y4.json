[
  {
    "text": "alright so I'm ready is everyone it's",
    "start": "0",
    "end": "3410"
  },
  {
    "text": "449 scheduled for 445 so this talk is",
    "start": "3410",
    "end": "7290"
  },
  {
    "text": "designed to be a really quick overview",
    "start": "7290",
    "end": "8790"
  },
  {
    "text": "of doing something that's at least",
    "start": "8790",
    "end": "10170"
  },
  {
    "text": "minimally complex to be interesting with",
    "start": "10170",
    "end": "12389"
  },
  {
    "text": "a co streams I've done a few and like",
    "start": "12389",
    "end": "14580"
  },
  {
    "text": "where I spent a lot of time getting into",
    "start": "14580",
    "end": "16049"
  },
  {
    "text": "how akka stream works and then I just",
    "start": "16049",
    "end": "17400"
  },
  {
    "text": "like oh here's how you parse a CSV file",
    "start": "17400",
    "end": "19470"
  },
  {
    "text": "as a stream and no one really cares",
    "start": "19470",
    "end": "21390"
  },
  {
    "text": "about that they can do that in a lot of",
    "start": "21390",
    "end": "22650"
  },
  {
    "text": "simpler ways so for this talk I'm going",
    "start": "22650",
    "end": "24689"
  },
  {
    "text": "to build a really small web socket or",
    "start": "24689",
    "end": "26840"
  },
  {
    "text": "WebSocket server that just accepts web",
    "start": "26840",
    "end": "28949"
  },
  {
    "text": "socket connections publishes all of the",
    "start": "28949",
    "end": "30929"
  },
  {
    "text": "WebSocket messages received via that",
    "start": "30929",
    "end": "32520"
  },
  {
    "text": "connection to Kafka via a single stream",
    "start": "32520",
    "end": "35430"
  },
  {
    "text": "and this is something you might use if",
    "start": "35430",
    "end": "37469"
  },
  {
    "text": "you want to collect metrics from your",
    "start": "37469",
    "end": "39300"
  },
  {
    "text": "front-end pages from JavaScript or",
    "start": "39300",
    "end": "40710"
  },
  {
    "text": "something and yeah so it originally",
    "start": "40710",
    "end": "43590"
  },
  {
    "text": "counted it under 100 lines of code every",
    "start": "43590",
    "end": "45660"
  },
  {
    "text": "factor it a bit move stuff out to",
    "start": "45660",
    "end": "46950"
  },
  {
    "text": "classes if you counted all the important",
    "start": "46950",
    "end": "48840"
  },
  {
    "text": "bits and still wouldn't be but don't",
    "start": "48840",
    "end": "50219"
  },
  {
    "text": "hold me to that right so first akka",
    "start": "50219",
    "end": "53070"
  },
  {
    "text": "streams right not going to go over all",
    "start": "53070",
    "end": "54539"
  },
  {
    "text": "of it the basics it's built on top of",
    "start": "54539",
    "end": "56850"
  },
  {
    "text": "akka uses actors to actually run stream",
    "start": "56850",
    "end": "59460"
  },
  {
    "text": "processing graph nodes it's uses the",
    "start": "59460",
    "end": "61379"
  },
  {
    "text": "reactor stream standard that something",
    "start": "61379",
    "end": "63059"
  },
  {
    "text": "people from type save Twitter Netflix",
    "start": "63059",
    "end": "65189"
  },
  {
    "text": "other companies have been working on",
    "start": "65189",
    "end": "66530"
  },
  {
    "text": "might like fingers crossed get added to",
    "start": "66530",
    "end": "68970"
  },
  {
    "text": "the Java standard library it's really",
    "start": "68970",
    "end": "71040"
  },
  {
    "text": "big initiative the whole point is that a",
    "start": "71040",
    "end": "72720"
  },
  {
    "text": "lot of people use it you'll have a lot",
    "start": "72720",
    "end": "74040"
  },
  {
    "text": "of interoperability by using it so you",
    "start": "74040",
    "end": "76590"
  },
  {
    "text": "can use streams of kafka messages",
    "start": "76590",
    "end": "78090"
  },
  {
    "text": "streams of messages over WebSocket you",
    "start": "78090",
    "end": "80159"
  },
  {
    "text": "can do high-level I oh you can write a",
    "start": "80159",
    "end": "81479"
  },
  {
    "text": "server that's just basically a",
    "start": "81479",
    "end": "83450"
  },
  {
    "text": "transformer first but that consumes a",
    "start": "83450",
    "end": "86880"
  },
  {
    "text": "stream of HTTP requests and produces a",
    "start": "86880",
    "end": "89790"
  },
  {
    "text": "stream of HTTP results you can do",
    "start": "89790",
    "end": "91829"
  },
  {
    "text": "low-level network i oh you can actually",
    "start": "91829",
    "end": "93299"
  },
  {
    "text": "just stream over a socket UDP TCP you",
    "start": "93299",
    "end": "96420"
  },
  {
    "text": "can stream to the input or output stream",
    "start": "96420",
    "end": "98909"
  },
  {
    "text": "of a process you can work with the files",
    "start": "98909",
    "end": "100560"
  },
  {
    "text": "with or sorry without processes like you",
    "start": "100560",
    "end": "103259"
  },
  {
    "text": "can actually call grep and like throw a",
    "start": "103259",
    "end": "104970"
  },
  {
    "text": "bunch of strings at it and have it",
    "start": "104970",
    "end": "106110"
  },
  {
    "text": "filter it if you need to do so or you",
    "start": "106110",
    "end": "108299"
  },
  {
    "text": "can create just a little runnable that",
    "start": "108299",
    "end": "110430"
  },
  {
    "text": "mimics grep rapping over the input",
    "start": "110430",
    "end": "113100"
  },
  {
    "text": "stream and cruising to the output stream",
    "start": "113100",
    "end": "115409"
  },
  {
    "text": "of the java process and you can work",
    "start": "115409",
    "end": "117960"
  },
  {
    "text": "with files like I said but you can also",
    "start": "117960",
    "end": "119610"
  },
  {
    "text": "work with s3 local files in both cases",
    "start": "119610",
    "end": "122040"
  },
  {
    "text": "they're just streams of bytes right one",
    "start": "122040",
    "end": "123990"
  },
  {
    "text": "of the cool thing about cool things",
    "start": "123990",
    "end": "125070"
  },
  {
    "text": "about akka streams is that you can sort",
    "start": "125070",
    "end": "126390"
  },
  {
    "text": "of abstract / exactly what's happening",
    "start": "126390",
    "end": "128310"
  },
  {
    "text": "you just have a source that produces a",
    "start": "128310",
    "end": "130259"
  },
  {
    "text": "stream of elements of some type you have",
    "start": "130259",
    "end": "132000"
  },
  {
    "text": "a sink that consumes elements of some",
    "start": "132000",
    "end": "133620"
  },
  {
    "text": "you have a flow that transforms now",
    "start": "133620",
    "end": "135599"
  },
  {
    "text": "elements of some type and some other",
    "start": "135599",
    "end": "137310"
  },
  {
    "text": "type etc right so let's get started so",
    "start": "137310",
    "end": "141230"
  },
  {
    "text": "here's the goal like I said many web",
    "start": "141230",
    "end": "144239"
  },
  {
    "text": "socket connections single kafka topics",
    "start": "144239",
    "end": "146280"
  },
  {
    "text": "something that consumes all of those",
    "start": "146280",
    "end": "148019"
  },
  {
    "text": "streams of messages and here's the event",
    "start": "148019",
    "end": "150690"
  },
  {
    "text": "class that will will be working with",
    "start": "150690",
    "end": "152790"
  },
  {
    "text": "well I've emitted all the serialization",
    "start": "152790",
    "end": "154470"
  },
  {
    "text": "deserialization boilerplate but we both",
    "start": "154470",
    "end": "156360"
  },
  {
    "text": "basically both be using or be using JSON",
    "start": "156360",
    "end": "158879"
  },
  {
    "text": "in both cases so over the wire from web",
    "start": "158879",
    "end": "161220"
  },
  {
    "text": "sockets it's pretty simple right json is",
    "start": "161220",
    "end": "163230"
  },
  {
    "text": "the native format of javascript so we'll",
    "start": "163230",
    "end": "164640"
  },
  {
    "text": "just be taking events in that format",
    "start": "164640",
    "end": "166079"
  },
  {
    "text": "then we publishing them to Kafka in the",
    "start": "166079",
    "end": "168329"
  },
  {
    "text": "same format JSON that's a lot simpler we",
    "start": "168329",
    "end": "170700"
  },
  {
    "text": "don't need to work with Avro protobuf",
    "start": "170700",
    "end": "172470"
  },
  {
    "text": "thrift although we could and that will",
    "start": "172470",
    "end": "174420"
  },
  {
    "text": "just help us reach do that stuff so",
    "start": "174420",
    "end": "177480"
  },
  {
    "text": "boilerplate as always right so we're",
    "start": "177480",
    "end": "180269"
  },
  {
    "text": "working with an actor system first",
    "start": "180269",
    "end": "181769"
  },
  {
    "text": "that's where we're going to get the",
    "start": "181769",
    "end": "183090"
  },
  {
    "text": "actual actors in which we run the akka",
    "start": "183090",
    "end": "184500"
  },
  {
    "text": "stream streams will be using the",
    "start": "184500",
    "end": "187109"
  },
  {
    "text": "dispatcher from that as an execution",
    "start": "187109",
    "end": "188670"
  },
  {
    "text": "context and the new thing the thing that",
    "start": "188670",
    "end": "191280"
  },
  {
    "text": "you probably don't recognize we'll be",
    "start": "191280",
    "end": "192659"
  },
  {
    "text": "using a materializer that takes the act",
    "start": "192659",
    "end": "194849"
  },
  {
    "text": "akka actor system as an implicit",
    "start": "194849",
    "end": "197819"
  },
  {
    "text": "parameter and it uses that when you give",
    "start": "197819",
    "end": "200280"
  },
  {
    "text": "it a blueprint describing your stream",
    "start": "200280",
    "end": "201959"
  },
  {
    "text": "processing graph and these are all",
    "start": "201959",
    "end": "203760"
  },
  {
    "text": "immutable functional composable etc",
    "start": "203760",
    "end": "205950"
  },
  {
    "text": "blueprints it will create a actual",
    "start": "205950",
    "end": "208950"
  },
  {
    "text": "running stream processing graph using",
    "start": "208950",
    "end": "210510"
  },
  {
    "text": "the actor system right so these will",
    "start": "210510",
    "end": "213180"
  },
  {
    "text": "always be in scope if you wonder how",
    "start": "213180",
    "end": "214889"
  },
  {
    "text": "something's working and it doesn't seem",
    "start": "214889",
    "end": "216629"
  },
  {
    "text": "to have all the context required it's",
    "start": "216629",
    "end": "218400"
  },
  {
    "text": "probably pulling Zhan the end from this",
    "start": "218400",
    "end": "219660"
  },
  {
    "text": "implicit context right so first we're",
    "start": "219660",
    "end": "222540"
  },
  {
    "text": "going to need some service to publish",
    "start": "222540",
    "end": "223680"
  },
  {
    "text": "the kafka obviously we need to publish",
    "start": "223680",
    "end": "225209"
  },
  {
    "text": "the messages received by a WebSocket to",
    "start": "225209",
    "end": "227129"
  },
  {
    "text": "Kafka we're also going to want to look",
    "start": "227129",
    "end": "228900"
  },
  {
    "text": "at Kafka and make sure the messages get",
    "start": "228900",
    "end": "230250"
  },
  {
    "text": "there and later we'll be doing a little",
    "start": "230250",
    "end": "231720"
  },
  {
    "text": "low testing so I had some trouble",
    "start": "231720",
    "end": "234540"
  },
  {
    "text": "getting everything working with a screen",
    "start": "234540",
    "end": "236790"
  },
  {
    "text": "size this is most of this is boilerplate",
    "start": "236790",
    "end": "240449"
  },
  {
    "text": "though really so published for example",
    "start": "240449",
    "end": "243780"
  },
  {
    "text": "it creates a sink using the reactive",
    "start": "243780",
    "end": "246989"
  },
  {
    "text": "Kafka library and just sort of abstracts",
    "start": "246989",
    "end": "249930"
  },
  {
    "text": "over a lot of like the producer",
    "start": "249930",
    "end": "250980"
  },
  {
    "text": "properties and wraps incoming messages",
    "start": "250980",
    "end": "253470"
  },
  {
    "text": "in producer message of E which is just",
    "start": "253470",
    "end": "256229"
  },
  {
    "text": "the class used for messages that are",
    "start": "256229",
    "end": "258840"
  },
  {
    "text": "produced that holds various metadata",
    "start": "258840",
    "end": "260220"
  },
  {
    "text": "keys etc and it can serialize anything",
    "start": "260220",
    "end": "263460"
  },
  {
    "text": "that has an implicit type of rights so",
    "start": "263460",
    "end": "265590"
  },
  {
    "text": "that's just used by play JSON to say",
    "start": "265590",
    "end": "267389"
  },
  {
    "text": "I know how to turn in an instance of",
    "start": "267389",
    "end": "269009"
  },
  {
    "text": "type T into a JSON object and then vice",
    "start": "269009",
    "end": "272159"
  },
  {
    "text": "versa for consume anything that can be",
    "start": "272159",
    "end": "274409"
  },
  {
    "text": "read from json it can be read from Kafka",
    "start": "274409",
    "end": "276840"
  },
  {
    "text": "and there's a little more boilerplate",
    "start": "276840",
    "end": "278939"
  },
  {
    "text": "there with consumer properties the topic",
    "start": "278939",
    "end": "280830"
  },
  {
    "text": "from which we read messages the group ID",
    "start": "280830",
    "end": "282629"
  },
  {
    "text": "under which we read messages",
    "start": "282629",
    "end": "284310"
  },
  {
    "text": "deserializer etc right so I've also",
    "start": "284310",
    "end": "288180"
  },
  {
    "text": "added some little ascii art graphs that",
    "start": "288180",
    "end": "290310"
  },
  {
    "text": "are designed to show for what these",
    "start": "290310",
    "end": "293159"
  },
  {
    "text": "different stream processing graph",
    "start": "293159",
    "end": "294389"
  },
  {
    "text": "components look like at the conceptual",
    "start": "294389",
    "end": "296159"
  },
  {
    "text": "level so publish events from the kafka",
    "start": "296159",
    "end": "298169"
  },
  {
    "text": "client you can see there that's a sink",
    "start": "298169",
    "end": "301349"
  },
  {
    "text": "it consumes events objects of the event",
    "start": "301349",
    "end": "304650"
  },
  {
    "text": "type that it showed you earlier",
    "start": "304650",
    "end": "305419"
  },
  {
    "text": "publishes them to Kafka and consume",
    "start": "305419",
    "end": "308099"
  },
  {
    "text": "events it is a source it consumes events",
    "start": "308099",
    "end": "311039"
  },
  {
    "text": "from Kafka and amidst them to be used by",
    "start": "311039",
    "end": "314400"
  },
  {
    "text": "some other component in the stream",
    "start": "314400",
    "end": "315509"
  },
  {
    "text": "processing graph now these aren't",
    "start": "315509",
    "end": "317310"
  },
  {
    "text": "runnable graphs yet they're just",
    "start": "317310",
    "end": "319050"
  },
  {
    "text": "components of graphs you notice they",
    "start": "319050",
    "end": "320879"
  },
  {
    "text": "have like hanging inputs or outputs we",
    "start": "320879",
    "end": "323370"
  },
  {
    "text": "won't be able to actually use these to",
    "start": "323370",
    "end": "324900"
  },
  {
    "text": "create a running stream processing graph",
    "start": "324900",
    "end": "326629"
  },
  {
    "text": "so ideally we could just for every",
    "start": "326629",
    "end": "331409"
  },
  {
    "text": "incoming WebSocket connection and",
    "start": "331409",
    "end": "332849"
  },
  {
    "text": "connect it to publish events but that",
    "start": "332849",
    "end": "335550"
  },
  {
    "text": "would be very inefficient because then",
    "start": "335550",
    "end": "336870"
  },
  {
    "text": "for every connection we would have to",
    "start": "336870",
    "end": "338490"
  },
  {
    "text": "create one Kafka producer there'd be a",
    "start": "338490",
    "end": "340800"
  },
  {
    "text": "lot of wasted resources there so we're",
    "start": "340800",
    "end": "343139"
  },
  {
    "text": "going to do instead is use source Q",
    "start": "343139",
    "end": "346560"
  },
  {
    "text": "right so it's very simple trait all it",
    "start": "346560",
    "end": "350399"
  },
  {
    "text": "is is something that can be offered",
    "start": "350399",
    "end": "351569"
  },
  {
    "text": "elements of type T returns a future",
    "start": "351569",
    "end": "353520"
  },
  {
    "text": "boolean true if the element was added to",
    "start": "353520",
    "end": "355949"
  },
  {
    "text": "the queue false if it wasn't fails if",
    "start": "355949",
    "end": "357689"
  },
  {
    "text": "the underlying the thing underlying the",
    "start": "357689",
    "end": "359399"
  },
  {
    "text": "queue has failed so we're going to do",
    "start": "359399",
    "end": "361500"
  },
  {
    "text": "we're going to create a Kafka publisher",
    "start": "361500",
    "end": "363750"
  },
  {
    "text": "graph that consumes element by element",
    "start": "363750",
    "end": "365550"
  },
  {
    "text": "spice or skew and that publishes them to",
    "start": "365550",
    "end": "368310"
  },
  {
    "text": "Kafka then we're going to run that graph",
    "start": "368310",
    "end": "370250"
  },
  {
    "text": "this is also snipped slightly off anyway",
    "start": "370250",
    "end": "374669"
  },
  {
    "text": "this is the same as the publish events",
    "start": "374669",
    "end": "378149"
  },
  {
    "text": "that you saw earlier righty right right",
    "start": "378149",
    "end": "380310"
  },
  {
    "text": "there and right so what that does is it",
    "start": "380310",
    "end": "383969"
  },
  {
    "text": "constructs a buffer size 1024 if it",
    "start": "383969",
    "end": "387449"
  },
  {
    "text": "overflows we'll use a back pressure",
    "start": "387449",
    "end": "388589"
  },
  {
    "text": "strategy and connects that Q by that",
    "start": "388589",
    "end": "392129"
  },
  {
    "text": "buffer to the kafka so you can see the",
    "start": "392129",
    "end": "394379"
  },
  {
    "text": "ASCII art graph here source Q event",
    "start": "394379",
    "end": "396750"
  },
  {
    "text": "messages or events go from the source q2",
    "start": "396750",
    "end": "399149"
  },
  {
    "text": "Kafka with",
    "start": "399149",
    "end": "400260"
  },
  {
    "text": "as part of the source Q source right so",
    "start": "400260",
    "end": "404010"
  },
  {
    "text": "then as I said you can't see that here",
    "start": "404010",
    "end": "406500"
  },
  {
    "text": "cuz it's yes so this creates a runnable",
    "start": "406500",
    "end": "409830"
  },
  {
    "text": "graph so this is very similar to a",
    "start": "409830",
    "end": "411570"
  },
  {
    "text": "process in Bruno's earlier talk sort of",
    "start": "411570",
    "end": "415440"
  },
  {
    "text": "or more like a task but anyway it's a",
    "start": "415440",
    "end": "417840"
  },
  {
    "text": "thing that can be run that gets you a",
    "start": "417840",
    "end": "419310"
  },
  {
    "text": "source q Levin more like a task actually",
    "start": "419310",
    "end": "421820"
  },
  {
    "text": "so then in the next line we run it we",
    "start": "421820",
    "end": "424590"
  },
  {
    "text": "use the aqha streams materializer",
    "start": "424590",
    "end": "427640"
  },
  {
    "text": "implicitly and we get a source cube",
    "start": "427640",
    "end": "430410"
  },
  {
    "text": "because that's the materialization",
    "start": "430410",
    "end": "432120"
  },
  {
    "text": "parameter of the runnable graph so we've",
    "start": "432120",
    "end": "435060"
  },
  {
    "text": "created we've defined a graph blueprint",
    "start": "435060",
    "end": "437040"
  },
  {
    "text": "that looks like this then we've run it",
    "start": "437040",
    "end": "438390"
  },
  {
    "text": "to get our actual source q we're going",
    "start": "438390",
    "end": "439980"
  },
  {
    "text": "to be throwing things in that source",
    "start": "439980",
    "end": "440970"
  },
  {
    "text": "queue to publish elements from web",
    "start": "440970",
    "end": "442710"
  },
  {
    "text": "sockets and I'll explain what that's",
    "start": "442710",
    "end": "444690"
  },
  {
    "text": "necessary later right so first we want",
    "start": "444690",
    "end": "447660"
  },
  {
    "text": "to sink that will write every element it",
    "start": "447660",
    "end": "449190"
  },
  {
    "text": "consumes to the source Q we do that by",
    "start": "449190",
    "end": "451710"
  },
  {
    "text": "just taking a flow of event mapping over",
    "start": "451710",
    "end": "454170"
  },
  {
    "text": "it with map async which takes a function",
    "start": "454170",
    "end": "456330"
  },
  {
    "text": "from t2 fuge from a to future be in this",
    "start": "456330",
    "end": "458910"
  },
  {
    "text": "case we're just using source to offer",
    "start": "458910",
    "end": "460440"
  },
  {
    "text": "and then using n then to register",
    "start": "460440",
    "end": "463590"
  },
  {
    "text": "listener basically because if that",
    "start": "463590",
    "end": "464730"
  },
  {
    "text": "returns false that means your message",
    "start": "464730",
    "end": "467010"
  },
  {
    "text": "has not been and queued and we could",
    "start": "467010",
    "end": "468600"
  },
  {
    "text": "also fail based on this but that's for",
    "start": "468600",
    "end": "471570"
  },
  {
    "text": "this I've chosen just to do this and",
    "start": "471570",
    "end": "474380"
  },
  {
    "text": "yeah so we can also add throttles",
    "start": "474380",
    "end": "477030"
  },
  {
    "text": "buffers etc to the queue writer for",
    "start": "477030",
    "end": "479430"
  },
  {
    "text": "example to throttle the amount of",
    "start": "479430",
    "end": "480690"
  },
  {
    "text": "messages published by any WebSocket",
    "start": "480690",
    "end": "482370"
  },
  {
    "text": "connection per minute for again for",
    "start": "482370",
    "end": "484380"
  },
  {
    "text": "simplicity that hasn't been done and we",
    "start": "484380",
    "end": "486300"
  },
  {
    "text": "take that map async currently flow and",
    "start": "486300",
    "end": "489030"
  },
  {
    "text": "connected to a sink that just ignores an",
    "start": "489030",
    "end": "491280"
  },
  {
    "text": "incoming elements because we don't",
    "start": "491280",
    "end": "492900"
  },
  {
    "text": "really care about the boolean values",
    "start": "492900",
    "end": "494190"
  },
  {
    "text": "except in that they indicate that a",
    "start": "494190",
    "end": "496590"
  },
  {
    "text": "message was not added to the buffer",
    "start": "496590",
    "end": "498030"
  },
  {
    "text": "right so this point have created a sink",
    "start": "498030",
    "end": "501000"
  },
  {
    "text": "that consumes elements of type event and",
    "start": "501000",
    "end": "503910"
  },
  {
    "text": "public the source q events and correct",
    "start": "503910",
    "end": "506610"
  },
  {
    "text": "so next thing we need to do we need to",
    "start": "506610",
    "end": "508890"
  },
  {
    "text": "parse messages that arrive via web",
    "start": "508890",
    "end": "510240"
  },
  {
    "text": "socket so for that we have a flow of",
    "start": "510240",
    "end": "512099"
  },
  {
    "text": "message that's the representation of",
    "start": "512099",
    "end": "514200"
  },
  {
    "text": "WebSocket messages it can be binary it",
    "start": "514200",
    "end": "516419"
  },
  {
    "text": "can be taxed in both cases they can be",
    "start": "516419",
    "end": "517950"
  },
  {
    "text": "stricter streaming so we're just really",
    "start": "517950",
    "end": "520409"
  },
  {
    "text": "interested in strict text messages and",
    "start": "520410",
    "end": "522360"
  },
  {
    "text": "for anything else we've chosen just to",
    "start": "522360",
    "end": "524039"
  },
  {
    "text": "ignore them and here you can see parse",
    "start": "524040",
    "end": "526590"
  },
  {
    "text": "messages just uses the JSON parser to",
    "start": "526590",
    "end": "528540"
  },
  {
    "text": "turn these text messages",
    "start": "528540",
    "end": "530170"
  },
  {
    "text": "into JSON into events and then gets them",
    "start": "530170",
    "end": "533079"
  },
  {
    "text": "it'll throw an exception if the parsing",
    "start": "533079",
    "end": "534700"
  },
  {
    "text": "fails so this graph component it's a",
    "start": "534700",
    "end": "537070"
  },
  {
    "text": "flow from message to event will be",
    "start": "537070",
    "end": "539410"
  },
  {
    "text": "composing that with our sink of a bend",
    "start": "539410",
    "end": "541750"
  },
  {
    "text": "and some other stuff that we haven't",
    "start": "541750",
    "end": "542829"
  },
  {
    "text": "seen right so here's where we do this a",
    "start": "542829",
    "end": "544870"
  },
  {
    "text": "lot of the composition so using flow",
    "start": "544870",
    "end": "547630"
  },
  {
    "text": "from sinking source all that does is",
    "start": "547630",
    "end": "549850"
  },
  {
    "text": "just take a seemingly disconnected sink",
    "start": "549850",
    "end": "551800"
  },
  {
    "text": "and source combine them to make a flow",
    "start": "551800",
    "end": "553329"
  },
  {
    "text": "and sup and that flow contains parsed",
    "start": "553329",
    "end": "557050"
  },
  {
    "text": "messages and then source cute all right",
    "start": "557050",
    "end": "558880"
  },
  {
    "text": "so anything every message coming into",
    "start": "558880",
    "end": "560800"
  },
  {
    "text": "that flow what we said to parse messages",
    "start": "560800",
    "end": "562660"
  },
  {
    "text": "and then send to the source q sink and",
    "start": "562660",
    "end": "565660"
  },
  {
    "text": "then there's source top maybe which",
    "start": "565660",
    "end": "568000"
  },
  {
    "text": "never actually emits anything that's you",
    "start": "568000",
    "end": "569829"
  },
  {
    "text": "is just to keep the connection open on",
    "start": "569829",
    "end": "571180"
  },
  {
    "text": "the other side right it's now we need a",
    "start": "571180",
    "end": "575019"
  },
  {
    "text": "flow to handle incoming requests that's",
    "start": "575019",
    "end": "576670"
  },
  {
    "text": "routes seems like I've got about eight",
    "start": "576670",
    "end": "579279"
  },
  {
    "text": "more minutes but it should be enough so",
    "start": "579279",
    "end": "581920"
  },
  {
    "text": "all it does this is a bit of spray",
    "start": "581920",
    "end": "584620"
  },
  {
    "text": "routing dsl stuff that's not really",
    "start": "584620",
    "end": "586269"
  },
  {
    "text": "that's kind of out of scope for the talk",
    "start": "586269",
    "end": "587529"
  },
  {
    "text": "but there's an implicit converter from",
    "start": "587529",
    "end": "589000"
  },
  {
    "text": "that to a flow of HTTP request to HTTP",
    "start": "589000",
    "end": "592240"
  },
  {
    "text": "response and we're just using that as I",
    "start": "592240",
    "end": "594490"
  },
  {
    "text": "said earlier to create basically a",
    "start": "594490",
    "end": "595660"
  },
  {
    "text": "server that's really just a flow from",
    "start": "595660",
    "end": "597160"
  },
  {
    "text": "request to response so we run that then",
    "start": "597160",
    "end": "599829"
  },
  {
    "text": "we get our server that is passed to HTML",
    "start": "599829",
    "end": "602680"
  },
  {
    "text": "button handle and the reason we have to",
    "start": "602680",
    "end": "605290"
  },
  {
    "text": "use the source queue and all this",
    "start": "605290",
    "end": "606220"
  },
  {
    "text": "complicated stuff instead of just",
    "start": "606220",
    "end": "607390"
  },
  {
    "text": "creating a more complex graph that",
    "start": "607390",
    "end": "609130"
  },
  {
    "text": "handles merging is because we don't",
    "start": "609130",
    "end": "610660"
  },
  {
    "text": "actually have control over the",
    "start": "610660",
    "end": "611800"
  },
  {
    "text": "materialization of the of the WebSocket",
    "start": "611800",
    "end": "614350"
  },
  {
    "text": "handler flow it's this method this",
    "start": "614350",
    "end": "617110"
  },
  {
    "text": "method provided back HTTP response to",
    "start": "617110",
    "end": "620529"
  },
  {
    "text": "any requests to the ws path with an",
    "start": "620529",
    "end": "623709"
  },
  {
    "text": "attempt to promote that to a WebSocket",
    "start": "623709",
    "end": "625240"
  },
  {
    "text": "connection using the website handler",
    "start": "625240",
    "end": "627310"
  },
  {
    "text": "flow to handle every message right and",
    "start": "627310",
    "end": "629829"
  },
  {
    "text": "I'm just using a simple front end page",
    "start": "629829",
    "end": "631269"
  },
  {
    "text": "all that does is send one thing per",
    "start": "631269",
    "end": "634290"
  },
  {
    "text": "second to one test message with a random",
    "start": "634290",
    "end": "636730"
  },
  {
    "text": "client ID and a timestamp and Kafka",
    "start": "636730",
    "end": "639880"
  },
  {
    "text": "listener that I'll be running in",
    "start": "639880",
    "end": "641740"
  },
  {
    "text": "parallel that just logs the messages",
    "start": "641740",
    "end": "644170"
  },
  {
    "text": "from Kafka rights so we're running the",
    "start": "644170",
    "end": "647440"
  },
  {
    "text": "streaming upload server and we're",
    "start": "647440",
    "end": "650019"
  },
  {
    "text": "running the kafka listener and I also",
    "start": "650019",
    "end": "653769"
  },
  {
    "text": "ran the street the load test in the",
    "start": "653769",
    "end": "655389"
  },
  {
    "text": "background so there's some messages and",
    "start": "655389",
    "end": "656620"
  },
  {
    "text": "Kafka hasn't seen yet let's hit",
    "start": "656620",
    "end": "658449"
  },
  {
    "text": "localhost a few times and so the page is",
    "start": "658449",
    "end": "663220"
  },
  {
    "text": "incredibly send",
    "start": "663220",
    "end": "664000"
  },
  {
    "text": "it doesn't actually have anything except",
    "start": "664000",
    "end": "667090"
  },
  {
    "text": "JavaScript but you can see on the",
    "start": "667090",
    "end": "669220"
  },
  {
    "text": "console that is repeatedly sending",
    "start": "669220",
    "end": "670840"
  },
  {
    "text": "messages and you can also see on Kafka",
    "start": "670840",
    "end": "674890"
  },
  {
    "text": "that it is repeatedly receiving messages",
    "start": "674890",
    "end": "677220"
  },
  {
    "text": "so the purpose of the load test though",
    "start": "677220",
    "end": "679720"
  },
  {
    "text": "is like this is this is kind of cool",
    "start": "679720",
    "end": "681280"
  },
  {
    "text": "right like I made like a toy project I'm",
    "start": "681280",
    "end": "682900"
  },
  {
    "text": "kind of wanted to I was curious to see",
    "start": "682900",
    "end": "684850"
  },
  {
    "text": "how many how many concurrent connections",
    "start": "684850",
    "end": "686830"
  },
  {
    "text": "that could handle like whether this is",
    "start": "686830",
    "end": "688360"
  },
  {
    "text": "something that I would like use demo",
    "start": "688360",
    "end": "690910"
  },
  {
    "text": "something or whether this is something",
    "start": "690910",
    "end": "692500"
  },
  {
    "text": "that could actually stand up to like",
    "start": "692500",
    "end": "693910"
  },
  {
    "text": "production loads so this load tester it",
    "start": "693910",
    "end": "698170"
  },
  {
    "text": "uses it uses the WebSocket client flow",
    "start": "698170",
    "end": "705430"
  },
  {
    "text": "also provided back HTTP I've emitted the",
    "start": "705430",
    "end": "707830"
  },
  {
    "text": "full load tester code and this actually",
    "start": "707830",
    "end": "710290"
  },
  {
    "text": "is going to be running for a few minutes",
    "start": "710290",
    "end": "711580"
  },
  {
    "text": "so it's the perfect time to ask",
    "start": "711580",
    "end": "713650"
  },
  {
    "text": "questions you can see here that this log",
    "start": "713650",
    "end": "715750"
  },
  {
    "text": "shows all the web socket connections",
    "start": "715750",
    "end": "717220"
  },
  {
    "text": "that have been accepted and here it will",
    "start": "717220",
    "end": "719350"
  },
  {
    "text": "log how many messages send and how many",
    "start": "719350",
    "end": "721600"
  },
  {
    "text": "are received right so this is kind of my",
    "start": "721600",
    "end": "723670"
  },
  {
    "text": "experiment and fitting a more complex",
    "start": "723670",
    "end": "725380"
  },
  {
    "text": "thing at a lightning talk and glossing",
    "start": "725380",
    "end": "726880"
  },
  {
    "text": "over a lot of how it actually works or",
    "start": "726880",
    "end": "728740"
  },
  {
    "text": "the deeper things about how akka streams",
    "start": "728740",
    "end": "732010"
  },
  {
    "text": "work how materializes work what",
    "start": "732010",
    "end": "734650"
  },
  {
    "text": "questions do people have is there",
    "start": "734650",
    "end": "735940"
  },
  {
    "text": "anything I cried so here we can see it",
    "start": "735940",
    "end": "737830"
  },
  {
    "text": "said 600 5536 events and received 600",
    "start": "737830",
    "end": "742300"
  },
  {
    "text": "5536 events so the load test sends",
    "start": "742300",
    "end": "745330"
  },
  {
    "text": "messages via web socket to the server",
    "start": "745330",
    "end": "747250"
  },
  {
    "text": "and then listens to Kafka for those",
    "start": "747250",
    "end": "749350"
  },
  {
    "text": "messages and upon receiving all of them",
    "start": "749350",
    "end": "751330"
  },
  {
    "text": "terminates so we can see like it was",
    "start": "751330",
    "end": "753910"
  },
  {
    "text": "able to send six sixty thousand messages",
    "start": "753910",
    "end": "756460"
  },
  {
    "text": "within a reasonably short time span not",
    "start": "756460",
    "end": "758710"
  },
  {
    "text": "just like one or two I believe I have",
    "start": "758710",
    "end": "761200"
  },
  {
    "text": "about four minutes left if anyone has",
    "start": "761200",
    "end": "763390"
  },
  {
    "text": "any questions anything i lost over that",
    "start": "763390",
    "end": "765550"
  },
  {
    "text": "I shouldn't have so either I did really",
    "start": "765550",
    "end": "771339"
  },
  {
    "text": "well or no one understood what I was",
    "start": "771339",
    "end": "772360"
  },
  {
    "text": "talking about cool",
    "start": "772360",
    "end": "773950"
  },
  {
    "text": "you",
    "start": "773950",
    "end": "776010"
  }
]