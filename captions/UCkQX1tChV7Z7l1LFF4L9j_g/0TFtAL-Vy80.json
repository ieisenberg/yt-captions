[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "18600"
  },
  {
    "text": "so this is basically a survey of module",
    "start": "18600",
    "end": "21600"
  },
  {
    "text": "systems in various programming languages",
    "start": "21600",
    "end": "24240"
  },
  {
    "text": "and some of the things that I've noticed",
    "start": "24240",
    "end": "25760"
  },
  {
    "text": "about them being kind of a um a language",
    "start": "25760",
    "end": "29720"
  },
  {
    "text": "go uru if I dare say or at least a",
    "start": "29720",
    "end": "32719"
  },
  {
    "text": "polyglot",
    "start": "32719",
    "end": "35320"
  },
  {
    "text": "um",
    "start": "35320",
    "end": "37559"
  },
  {
    "text": "and what I want to start with is",
    "start": "37559",
    "end": "39680"
  },
  {
    "text": "basically what is a module all about",
    "start": "39680",
    "end": "41920"
  },
  {
    "start": "40000",
    "end": "40000"
  },
  {
    "text": "what does that mean um not every",
    "start": "41920",
    "end": "43879"
  },
  {
    "text": "language has a syntax which says module",
    "start": "43879",
    "end": "46360"
  },
  {
    "text": "and so what are we talking about if we",
    "start": "46360",
    "end": "48840"
  },
  {
    "text": "say module and there's kind of a a super",
    "start": "48840",
    "end": "52840"
  },
  {
    "text": "Warf kind of effect here linguistic",
    "start": "52840",
    "end": "55199"
  },
  {
    "text": "relativity because what you think a",
    "start": "55199",
    "end": "56879"
  },
  {
    "text": "module is is certainly influenced by the",
    "start": "56879",
    "end": "59280"
  },
  {
    "text": "languages that you know um just like",
    "start": "59280",
    "end": "62160"
  },
  {
    "text": "what types what you think about types is",
    "start": "62160",
    "end": "64119"
  },
  {
    "text": "influenced by the languages that you've",
    "start": "64119",
    "end": "65518"
  },
  {
    "text": "had experience with um and so if you",
    "start": "65519",
    "end": "68000"
  },
  {
    "text": "tell a c programmer that you're doing",
    "start": "68000",
    "end": "69360"
  },
  {
    "text": "these fancy things with types they'll",
    "start": "69360",
    "end": "70799"
  },
  {
    "text": "think you're kind of crazy um but uh so",
    "start": "70799",
    "end": "75520"
  },
  {
    "text": "what is a module I think there are three",
    "start": "75520",
    "end": "76920"
  },
  {
    "text": "things to look at maybe the simplest is",
    "start": "76920",
    "end": "79840"
  },
  {
    "text": "that it's just about separate",
    "start": "79840",
    "end": "80920"
  },
  {
    "text": "compilation right I want to have my",
    "start": "80920",
    "end": "83560"
  },
  {
    "text": "program broken into units that can be",
    "start": "83560",
    "end": "86159"
  },
  {
    "text": "compiled separately or in a dynamic",
    "start": "86159",
    "end": "88479"
  },
  {
    "text": "language maybe even loaded separately um",
    "start": "88479",
    "end": "92399"
  },
  {
    "text": "when you when you import them second",
    "start": "92399",
    "end": "95079"
  },
  {
    "text": "it's about namespace management which is",
    "start": "95079",
    "end": "96840"
  },
  {
    "text": "a pretty simple idea but it's extremely",
    "start": "96840",
    "end": "100560"
  },
  {
    "text": "important and third maybe the the",
    "start": "100560",
    "end": "102799"
  },
  {
    "text": "richest area is that it's about",
    "start": "102799",
    "end": "105399"
  },
  {
    "text": "abstraction and one element of",
    "start": "105399",
    "end": "108280"
  },
  {
    "text": "abstraction is just hiding right just",
    "start": "108280",
    "end": "110399"
  },
  {
    "text": "concealing things but also abstraction",
    "start": "110399",
    "end": "112840"
  },
  {
    "text": "means",
    "start": "112840",
    "end": "113840"
  },
  {
    "text": "parameterization and so we'll look at",
    "start": "113840",
    "end": "115680"
  },
  {
    "text": "both kinds of um abstraction so I'm",
    "start": "115680",
    "end": "119159"
  },
  {
    "text": "going to start out with that um",
    "start": "119159",
    "end": "122759"
  },
  {
    "text": "programming language that's kind of the",
    "start": "122759",
    "end": "124640"
  },
  {
    "text": "lingua franka and um known as a Bastion",
    "start": "124640",
    "end": "128759"
  },
  {
    "text": "of modularity c",
    "start": "128759",
    "end": "132520"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "um so in C a module if you want to call",
    "start": "132520",
    "end": "136920"
  },
  {
    "text": "it that and maybe you can use scare",
    "start": "136920",
    "end": "138599"
  },
  {
    "text": "quotes a module is basically just a file",
    "start": "138599",
    "end": "141560"
  },
  {
    "text": "and several languages have this approach",
    "start": "141560",
    "end": "143720"
  },
  {
    "text": "that a file is a module um in some",
    "start": "143720",
    "end": "147680"
  },
  {
    "text": "languages you can have files you can",
    "start": "147680",
    "end": "150000"
  },
  {
    "text": "have modules which are not files but all",
    "start": "150000",
    "end": "152360"
  },
  {
    "text": "files are you know it goes both ways um",
    "start": "152360",
    "end": "155599"
  },
  {
    "text": "and the other interesting thing that c",
    "start": "155599",
    "end": "157280"
  },
  {
    "text": "does that we don't always see in",
    "start": "157280",
    "end": "160200"
  },
  {
    "text": "languages is this idea of separating",
    "start": "160200",
    "end": "162159"
  },
  {
    "text": "declarations from definitions so that",
    "start": "162159",
    "end": "165040"
  },
  {
    "text": "you can have an interface um a h file",
    "start": "165040",
    "end": "168840"
  },
  {
    "text": "and then have um an implementation in a",
    "start": "168840",
    "end": "172120"
  },
  {
    "text": "C file and that's something that Java",
    "start": "172120",
    "end": "174720"
  },
  {
    "text": "more or less abandoned but some other",
    "start": "174720",
    "end": "177400"
  },
  {
    "text": "languages try to keep some distinction",
    "start": "177400",
    "end": "179519"
  },
  {
    "text": "there to so that's the separate",
    "start": "179519",
    "end": "182000"
  },
  {
    "text": "compilation component what about",
    "start": "182000",
    "end": "183760"
  },
  {
    "text": "namespace Management in C do we have",
    "start": "183760",
    "end": "186040"
  },
  {
    "start": "184000",
    "end": "184000"
  },
  {
    "text": "anything well basically all that you can",
    "start": "186040",
    "end": "187840"
  },
  {
    "text": "do for namespace management is don't",
    "start": "187840",
    "end": "190159"
  },
  {
    "text": "export stuff by making it static within",
    "start": "190159",
    "end": "193840"
  },
  {
    "text": "whatever module or file that it that",
    "start": "193840",
    "end": "195560"
  },
  {
    "text": "it's in and that's that's what you get",
    "start": "195560",
    "end": "199799"
  },
  {
    "text": "um when we move to C++ of course",
    "start": "199799",
    "end": "202480"
  },
  {
    "text": "namespaces are something that got a lot",
    "start": "202480",
    "end": "204440"
  },
  {
    "text": "richer with",
    "start": "204440",
    "end": "205640"
  },
  {
    "text": "C++ and so we have indeed Syntax for",
    "start": "205640",
    "end": "208840"
  },
  {
    "text": "namespaces that can enclose things we",
    "start": "208840",
    "end": "211200"
  },
  {
    "text": "can import them we can import just",
    "start": "211200",
    "end": "212720"
  },
  {
    "text": "particular members we can rename them",
    "start": "212720",
    "end": "214680"
  },
  {
    "text": "which I actually didn't know but I found",
    "start": "214680",
    "end": "217080"
  },
  {
    "text": "that um and then we've got this scope",
    "start": "217080",
    "end": "219519"
  },
  {
    "text": "operator that can reach in just like a",
    "start": "219519",
    "end": "221319"
  },
  {
    "text": "DOT operator in more modern",
    "start": "221319",
    "end": "223760"
  },
  {
    "text": "languages um so namespace Management in",
    "start": "223760",
    "end": "226280"
  },
  {
    "text": "C++ is fairly Rich um what about",
    "start": "226280",
    "end": "230439"
  },
  {
    "text": "abstraction and hiding so just in pure C",
    "start": "230439",
    "end": "234439"
  },
  {
    "text": "there's this pattern this technique for",
    "start": "234439",
    "end": "236480"
  },
  {
    "text": "doing abstract data types where you can",
    "start": "236480",
    "end": "238840"
  },
  {
    "text": "declare",
    "start": "238840",
    "end": "240239"
  },
  {
    "text": "um an opaque type declaration you just",
    "start": "240239",
    "end": "242560"
  },
  {
    "text": "say struct stack and you don't know you",
    "start": "242560",
    "end": "244360"
  },
  {
    "text": "don't say what it is but that's okay as",
    "start": "244360",
    "end": "246720"
  },
  {
    "text": "long as you only refer to pointers to it",
    "start": "246720",
    "end": "249560"
  },
  {
    "text": "then we don't have to know what its",
    "start": "249560",
    "end": "251079"
  },
  {
    "text": "members are what size or shape it is um",
    "start": "251079",
    "end": "254400"
  },
  {
    "text": "so that's a kind of opaque type",
    "start": "254400",
    "end": "255880"
  },
  {
    "text": "declaration you could even say it's a",
    "start": "255880",
    "end": "257720"
  },
  {
    "text": "fancy existential type um you can make",
    "start": "257720",
    "end": "261519"
  },
  {
    "text": "an analogy except it breaks down pretty",
    "start": "261519",
    "end": "263720"
  },
  {
    "text": "fast but but there's also this trick of",
    "start": "263720",
    "end": "265320"
  },
  {
    "text": "using void star to say that this is just",
    "start": "265320",
    "end": "267960"
  },
  {
    "text": "some pointer and we don't care what it",
    "start": "267960",
    "end": "270080"
  },
  {
    "text": "is and so generics work that way in in",
    "start": "270080",
    "end": "273759"
  },
  {
    "text": "C in C++ we of course have templates um",
    "start": "273759",
    "end": "278680"
  },
  {
    "start": "277000",
    "end": "277000"
  },
  {
    "text": "as much as I've tried to forget about",
    "start": "278680",
    "end": "280400"
  },
  {
    "text": "them",
    "start": "280400",
    "end": "282160"
  },
  {
    "text": "um and that is more like a real uh",
    "start": "282160",
    "end": "286759"
  },
  {
    "text": "Universal quantifier a real um",
    "start": "286759",
    "end": "289080"
  },
  {
    "text": "abstraction of a type um except that",
    "start": "289080",
    "end": "293320"
  },
  {
    "text": "it's not really type checked in advance",
    "start": "293320",
    "end": "295800"
  },
  {
    "text": "it's type checked once you instantiate",
    "start": "295800",
    "end": "298080"
  },
  {
    "text": "it and so that makes templates a lot",
    "start": "298080",
    "end": "301720"
  },
  {
    "text": "more fussy I would say um",
    "start": "301720",
    "end": "306160"
  },
  {
    "text": "and the eror messages are horrible um",
    "start": "306160",
    "end": "309919"
  },
  {
    "text": "they they certainly make scalas type",
    "start": "309919",
    "end": "311400"
  },
  {
    "text": "errors look look concise and",
    "start": "311400",
    "end": "314680"
  },
  {
    "text": "understandable",
    "start": "314680",
    "end": "316400"
  },
  {
    "text": "um so so that's type abstraction in",
    "start": "316400",
    "end": "320400"
  },
  {
    "text": "C++ there's other kinds of hiding",
    "start": "320400",
    "end": "323199"
  },
  {
    "text": "besides type abstraction and of course",
    "start": "323199",
    "end": "325880"
  },
  {
    "start": "324000",
    "end": "324000"
  },
  {
    "text": "in most objectoriented languages we have",
    "start": "325880",
    "end": "327600"
  },
  {
    "text": "classes which have private members",
    "start": "327600",
    "end": "329720"
  },
  {
    "text": "private is a form of access control",
    "start": "329720",
    "end": "332160"
  },
  {
    "text": "that's a kind of hiding um so that's",
    "start": "332160",
    "end": "334759"
  },
  {
    "text": "that's useful and then there's another",
    "start": "334759",
    "end": "337479"
  },
  {
    "text": "common technique which we can call",
    "start": "337479",
    "end": "338919"
  },
  {
    "text": "privacy via subsumption which is a fancy",
    "start": "338919",
    "end": "341680"
  },
  {
    "text": "name but it just means that your private",
    "start": "341680",
    "end": "344240"
  },
  {
    "text": "stuff doesn't really have to be marked",
    "start": "344240",
    "end": "345800"
  },
  {
    "text": "private if your interface is such that",
    "start": "345800",
    "end": "349039"
  },
  {
    "text": "it doesn't have any private stuff but",
    "start": "349039",
    "end": "350600"
  },
  {
    "text": "all the real work happens in some",
    "start": "350600",
    "end": "352000"
  },
  {
    "text": "implementation class which is derived",
    "start": "352000",
    "end": "354440"
  },
  {
    "text": "from that or implements that or or",
    "start": "354440",
    "end": "356720"
  },
  {
    "text": "whatever your terminology is so although",
    "start": "356720",
    "end": "360000"
  },
  {
    "text": "these things are not marked private I'm",
    "start": "360000",
    "end": "361440"
  },
  {
    "text": "not going to get access to them as long",
    "start": "361440",
    "end": "362759"
  },
  {
    "text": "as I'm only seeing them at the super",
    "start": "362759",
    "end": "365520"
  },
  {
    "text": "class level um struct and class are",
    "start": "365520",
    "end": "368720"
  },
  {
    "text": "interchangeable in C++ it turns out you",
    "start": "368720",
    "end": "370960"
  },
  {
    "text": "know the only difference between class",
    "start": "370960",
    "end": "372199"
  },
  {
    "text": "and struct is that a struct is by",
    "start": "372199",
    "end": "374720"
  },
  {
    "text": "default public and a class is by default",
    "start": "374720",
    "end": "378039"
  },
  {
    "text": "private but other than that you can you",
    "start": "378039",
    "end": "380720"
  },
  {
    "text": "can do this but this is a common",
    "start": "380720",
    "end": "383080"
  },
  {
    "text": "technique in object orent languages",
    "start": "383080",
    "end": "384479"
  },
  {
    "text": "anyway to to have uh an interface class",
    "start": "384479",
    "end": "386960"
  },
  {
    "text": "and an implementation class um",
    "start": "386960",
    "end": "389919"
  },
  {
    "text": "so that's um C++ now we're going to move",
    "start": "389919",
    "end": "392599"
  },
  {
    "text": "into um",
    "start": "392599",
    "end": "394800"
  },
  {
    "text": "hcll and look at some of the same ideas",
    "start": "394800",
    "end": "399039"
  },
  {
    "text": "but what's interesting about hcll is",
    "start": "399039",
    "end": "401919"
  },
  {
    "text": "that as far as modules go it's not very",
    "start": "401919",
    "end": "405080"
  },
  {
    "text": "sophisticated uh the hascal module",
    "start": "405080",
    "end": "407199"
  },
  {
    "text": "system is mainly About namespace",
    "start": "407199",
    "end": "410639"
  },
  {
    "text": "Management um so you can do things like",
    "start": "410639",
    "end": "414000"
  },
  {
    "text": "up here I say I've got a module and they",
    "start": "414000",
    "end": "415759"
  },
  {
    "text": "can be nested which which is useful um",
    "start": "415759",
    "end": "419560"
  },
  {
    "text": "this is the set of definitions that I'm",
    "start": "419560",
    "end": "422039"
  },
  {
    "text": "exporting so I can limit what I export",
    "start": "422039",
    "end": "425440"
  },
  {
    "text": "um and then I can import things I can do",
    "start": "425440",
    "end": "429039"
  },
  {
    "text": "Imports where I only import certain",
    "start": "429039",
    "end": "431319"
  },
  {
    "text": "elements from there I can do some",
    "start": "431319",
    "end": "433599"
  },
  {
    "text": "renames or qualified Imports like that",
    "start": "433599",
    "end": "436560"
  },
  {
    "text": "um so you can do um namespace management",
    "start": "436560",
    "end": "440599"
  },
  {
    "text": "with these but they don't get you a",
    "start": "440599",
    "end": "442120"
  },
  {
    "text": "whole lot else um and",
    "start": "442120",
    "end": "445800"
  },
  {
    "text": "then the other major thing in in hasell",
    "start": "445800",
    "end": "448800"
  },
  {
    "text": "is type classes right and so our type",
    "start": "448800",
    "end": "451000"
  },
  {
    "start": "450000",
    "end": "450000"
  },
  {
    "text": "classes modules well um I went too fast",
    "start": "451000",
    "end": "456000"
  },
  {
    "text": "uh type classes are very interesting",
    "start": "456000",
    "end": "457800"
  },
  {
    "text": "they can do lots of great things um they",
    "start": "457800",
    "end": "459960"
  },
  {
    "text": "do a a kind of namespace management in",
    "start": "459960",
    "end": "462199"
  },
  {
    "text": "the sense that they do overloading right",
    "start": "462199",
    "end": "464240"
  },
  {
    "text": "it's like a principled overloading",
    "start": "464240",
    "end": "465759"
  },
  {
    "text": "mechanism this is an example from um",
    "start": "465759",
    "end": "469080"
  },
  {
    "text": "quick check which is the randomized",
    "start": "469080",
    "end": "471479"
  },
  {
    "text": "testing library for hll um and this was",
    "start": "471479",
    "end": "475720"
  },
  {
    "text": "pretty neat the first time I saw it",
    "start": "475720",
    "end": "477879"
  },
  {
    "text": "definitely that you can define a class",
    "start": "477879",
    "end": "481039"
  },
  {
    "text": "arbitrary that allows you to generate",
    "start": "481039",
    "end": "483199"
  },
  {
    "text": "values of arbitrary types um and I",
    "start": "483199",
    "end": "486720"
  },
  {
    "text": "haven't said what gen is but you just",
    "start": "486720",
    "end": "488400"
  },
  {
    "text": "it's something where you can pull values",
    "start": "488400",
    "end": "489759"
  },
  {
    "text": "out of it um so you can Define that for",
    "start": "489759",
    "end": "493639"
  },
  {
    "text": "all the base types like Boolean and",
    "start": "493639",
    "end": "495199"
  },
  {
    "text": "integers and so forth and you have you",
    "start": "495199",
    "end": "496800"
  },
  {
    "text": "have random uh values of those types and",
    "start": "496800",
    "end": "499919"
  },
  {
    "text": "then you define these",
    "start": "499919",
    "end": "501400"
  },
  {
    "text": "derived type classes so that if I have",
    "start": "501400",
    "end": "504960"
  },
  {
    "text": "um an instance of arbitrary for A and B",
    "start": "504960",
    "end": "508360"
  },
  {
    "text": "which are type parameters then I can",
    "start": "508360",
    "end": "510240"
  },
  {
    "text": "generate pairs of A and B of course just",
    "start": "510240",
    "end": "512039"
  },
  {
    "text": "by pairing them together um and there",
    "start": "512039",
    "end": "514959"
  },
  {
    "text": "are all kinds of definitions of that in",
    "start": "514959",
    "end": "516680"
  },
  {
    "text": "in quick",
    "start": "516680",
    "end": "517719"
  },
  {
    "text": "check so that's a kind of overloading",
    "start": "517719",
    "end": "521839"
  },
  {
    "text": "and then I can do a kind of abstraction",
    "start": "521839",
    "end": "524320"
  },
  {
    "text": "based on these type classes so any",
    "start": "524320",
    "end": "527040"
  },
  {
    "text": "function could have basically for all",
    "start": "527040",
    "end": "529399"
  },
  {
    "text": "Alpha for all types so that they",
    "start": "529399",
    "end": "532600"
  },
  {
    "text": "Implement these two type classes then I",
    "start": "532600",
    "end": "535720"
  },
  {
    "text": "can implement this",
    "start": "535720",
    "end": "537880"
  },
  {
    "text": "function um",
    "start": "537880",
    "end": "540040"
  },
  {
    "text": "so that's",
    "start": "540040",
    "end": "541720"
  },
  {
    "text": "um are they modules I I'm a little",
    "start": "541720",
    "end": "545519"
  },
  {
    "text": "hesitant to to call that a module but",
    "start": "545519",
    "end": "547760"
  },
  {
    "text": "but it has some of those uh some of",
    "start": "547760",
    "end": "550760"
  },
  {
    "text": "those",
    "start": "550760",
    "end": "552560"
  },
  {
    "text": "features the next language I want to",
    "start": "552560",
    "end": "554560"
  },
  {
    "text": "look at is the one I've spent the most",
    "start": "554560",
    "end": "557480"
  },
  {
    "text": "time in and that's ml especially",
    "start": "557480",
    "end": "559800"
  },
  {
    "text": "standard ml it's is quite an old book",
    "start": "559800",
    "end": "562560"
  },
  {
    "text": "now but I still think there's some ideas",
    "start": "562560",
    "end": "564320"
  },
  {
    "text": "in ml uh module system that are pretty",
    "start": "564320",
    "end": "567079"
  },
  {
    "text": "interesting and in case they're not",
    "start": "567079",
    "end": "569480"
  },
  {
    "text": "known I'll I'll show you some some",
    "start": "569480",
    "end": "571440"
  },
  {
    "text": "examples of that uh so the first thing",
    "start": "571440",
    "end": "574640"
  },
  {
    "text": "that we do this kind of gets back to",
    "start": "574640",
    "end": "577240"
  },
  {
    "text": "what I said about C where you've got a",
    "start": "577240",
    "end": "578880"
  },
  {
    "text": "distinction between declarations and",
    "start": "578880",
    "end": "581200"
  },
  {
    "text": "definitions right and so signatures are",
    "start": "581200",
    "end": "583800"
  },
  {
    "text": "a way to just have",
    "start": "583800",
    "end": "585279"
  },
  {
    "text": "Declarations of types and",
    "start": "585279",
    "end": "588480"
  },
  {
    "text": "values um so that like for example",
    "start": "588480",
    "end": "592560"
  },
  {
    "text": "here's a collection signature where I",
    "start": "592560",
    "end": "594320"
  },
  {
    "text": "Define a type T which is parameterized",
    "start": "594320",
    "end": "596680"
  },
  {
    "text": "by a in ml the um",
    "start": "596680",
    "end": "599839"
  },
  {
    "text": "type parameters are type operators are",
    "start": "599839",
    "end": "603200"
  },
  {
    "text": "postfix so in Scola this would be T",
    "start": "603200",
    "end": "606000"
  },
  {
    "text": "brackets a and here it's",
    "start": "606000",
    "end": "608279"
  },
  {
    "text": "at um so this collection has a value",
    "start": "608279",
    "end": "612279"
  },
  {
    "text": "empty and a function is empty that",
    "start": "612279",
    "end": "614480"
  },
  {
    "text": "returns a",
    "start": "614480",
    "end": "615480"
  },
  {
    "text": "bullion and we can Define all kinds of",
    "start": "615480",
    "end": "617680"
  },
  {
    "text": "signatures like that you can mix and",
    "start": "617680",
    "end": "620360"
  },
  {
    "text": "include signatures and other signatures",
    "start": "620360",
    "end": "622440"
  },
  {
    "text": "like this okay so I Define a Q and then",
    "start": "622440",
    "end": "625120"
  },
  {
    "text": "a deck which is a double-ended Q um",
    "start": "625120",
    "end": "627959"
  },
  {
    "text": "includes collection and then it can have",
    "start": "627959",
    "end": "630240"
  },
  {
    "text": "structures nested um structures within",
    "start": "630240",
    "end": "633720"
  },
  {
    "text": "it that match certain signatures so the",
    "start": "633720",
    "end": "637079"
  },
  {
    "text": "double-ended Q has you know a front side",
    "start": "637079",
    "end": "639720"
  },
  {
    "text": "where you can NQ and DQ and a rear side",
    "start": "639720",
    "end": "641399"
  },
  {
    "text": "where you can do the",
    "start": "641399",
    "end": "642560"
  },
  {
    "text": "same um so those are some examples of",
    "start": "642560",
    "end": "646600"
  },
  {
    "text": "just",
    "start": "646600",
    "end": "647680"
  },
  {
    "text": "specifying uh the values or the",
    "start": "647680",
    "end": "650720"
  },
  {
    "text": "functions that that are available or",
    "start": "650720",
    "end": "653760"
  },
  {
    "text": "should be",
    "start": "653760",
    "end": "655360"
  },
  {
    "text": "available so next what I do is go to the",
    "start": "655360",
    "end": "658000"
  },
  {
    "text": "definition side and and that's called a",
    "start": "658000",
    "end": "659639"
  },
  {
    "text": "structure so structures are just nested",
    "start": "659639",
    "end": "662240"
  },
  {
    "text": "collections of definitions and they can",
    "start": "662240",
    "end": "665880"
  },
  {
    "text": "be constrained by signatur so up here I",
    "start": "665880",
    "end": "668120"
  },
  {
    "text": "Define a structured deck which is",
    "start": "668120",
    "end": "671560"
  },
  {
    "text": "constrained by the signature deck on the",
    "start": "671560",
    "end": "673440"
  },
  {
    "text": "previous slide and this actually is an",
    "start": "673440",
    "end": "675639"
  },
  {
    "text": "opaque signature match which basically",
    "start": "675639",
    "end": "678200"
  },
  {
    "text": "provides a form of abstraction it means",
    "start": "678200",
    "end": "680760"
  },
  {
    "text": "that",
    "start": "680760",
    "end": "682480"
  },
  {
    "text": "this definition of t as a pair of lists",
    "start": "682480",
    "end": "686560"
  },
  {
    "text": "won't leak out of this structure it's",
    "start": "686560",
    "end": "688440"
  },
  {
    "text": "constrained",
    "start": "688440",
    "end": "689480"
  },
  {
    "text": "uh to to stay private inside there and",
    "start": "689480",
    "end": "692560"
  },
  {
    "text": "you can't rely on it being a pair of",
    "start": "692560",
    "end": "694720"
  },
  {
    "text": "lists from",
    "start": "694720",
    "end": "696519"
  },
  {
    "text": "outside so that's a very important form",
    "start": "696519",
    "end": "699040"
  },
  {
    "text": "of hiding and then we can Define some of",
    "start": "699040",
    "end": "701480"
  },
  {
    "text": "the functions we can Define",
    "start": "701480",
    "end": "702600"
  },
  {
    "text": "substructures and and so on okay so if",
    "start": "702600",
    "end": "707399"
  },
  {
    "text": "the ml module system was just about",
    "start": "707399",
    "end": "709519"
  },
  {
    "text": "signatures and structures it wouldn't",
    "start": "709519",
    "end": "711040"
  },
  {
    "text": "look all that different from what I",
    "start": "711040",
    "end": "713120"
  },
  {
    "text": "showed you in C um where you have",
    "start": "713120",
    "end": "715800"
  },
  {
    "text": "declarations and definitions and you can",
    "start": "715800",
    "end": "717440"
  },
  {
    "text": "have abstract types in C but what makes",
    "start": "717440",
    "end": "720079"
  },
  {
    "text": "it a little fancier is the next thing",
    "start": "720079",
    "end": "721920"
  },
  {
    "text": "which is called funs and",
    "start": "721920",
    "end": "724680"
  },
  {
    "text": "funs are basically structures that are",
    "start": "724680",
    "end": "727920"
  },
  {
    "text": "parameterized by other structures",
    "start": "727920",
    "end": "731079"
  },
  {
    "text": "um so in this example uh just in case",
    "start": "731079",
    "end": "734760"
  },
  {
    "text": "you're familiar with the name funter",
    "start": "734760",
    "end": "736199"
  },
  {
    "text": "from categor are or from ascol or Scala",
    "start": "736199",
    "end": "738720"
  },
  {
    "text": "Zed or something the name kind of comes",
    "start": "738720",
    "end": "740839"
  },
  {
    "text": "from the same place but it doesn't",
    "start": "740839",
    "end": "741959"
  },
  {
    "text": "really mean the same thing this doesn't",
    "start": "741959",
    "end": "744120"
  },
  {
    "text": "refer to um the applicative funter kind",
    "start": "744120",
    "end": "748440"
  },
  {
    "text": "of thing certain operations it's just",
    "start": "748440",
    "end": "750720"
  },
  {
    "text": "it's just a name for functions of",
    "start": "750720",
    "end": "752880"
  },
  {
    "text": "structures um so what we do here is",
    "start": "752880",
    "end": "756440"
  },
  {
    "text": "Define a funter with the name test deck",
    "start": "756440",
    "end": "759920"
  },
  {
    "text": "and it can take any structure any module",
    "start": "759920",
    "end": "762880"
  },
  {
    "text": "D which satisfies the deck interface and",
    "start": "762880",
    "end": "766680"
  },
  {
    "text": "then we can Define whatever we want",
    "start": "766680",
    "end": "768199"
  },
  {
    "text": "based on that right so in this case I",
    "start": "768199",
    "end": "771120"
  },
  {
    "text": "might Define a particular q and then go",
    "start": "771120",
    "end": "773680"
  },
  {
    "text": "through and run some tests on it and",
    "start": "773680",
    "end": "775079"
  },
  {
    "text": "make sure that it works the way I expect",
    "start": "775079",
    "end": "777199"
  },
  {
    "text": "or whatever um",
    "start": "777199",
    "end": "780160"
  },
  {
    "text": "and then to actually instantiate that",
    "start": "780160",
    "end": "783079"
  },
  {
    "text": "funter a little bit like instantiating",
    "start": "783079",
    "end": "784839"
  },
  {
    "text": "templates in C++ but it works better is",
    "start": "784839",
    "end": "788760"
  },
  {
    "text": "to what I will do is take the funter",
    "start": "788760",
    "end": "791360"
  },
  {
    "text": "test deck and then pass in whatever",
    "start": "791360",
    "end": "793560"
  },
  {
    "text": "implementation of decks that I want and",
    "start": "793560",
    "end": "795880"
  },
  {
    "text": "so if I've got three different",
    "start": "795880",
    "end": "797120"
  },
  {
    "text": "implementations that match this same",
    "start": "797120",
    "end": "798839"
  },
  {
    "text": "signature I can just generate three",
    "start": "798839",
    "end": "801680"
  },
  {
    "text": "different um output structures based on",
    "start": "801680",
    "end": "804800"
  },
  {
    "text": "that and all of them will be capable of",
    "start": "804800",
    "end": "806399"
  },
  {
    "text": "testing the different implementations",
    "start": "806399",
    "end": "808959"
  },
  {
    "text": "the deck generically right so that's",
    "start": "808959",
    "end": "812079"
  },
  {
    "text": "kind of a a valuable idea to to be able",
    "start": "812079",
    "end": "814880"
  },
  {
    "text": "to program at the level of structures",
    "start": "814880",
    "end": "818160"
  },
  {
    "text": "where we have um essentially functions",
    "start": "818160",
    "end": "822040"
  },
  {
    "text": "that can take in all these definitions",
    "start": "822040",
    "end": "824160"
  },
  {
    "text": "and create new definitions based on",
    "start": "824160",
    "end": "827160"
  },
  {
    "text": "those",
    "start": "827160",
    "end": "829279"
  },
  {
    "start": "829000",
    "end": "829000"
  },
  {
    "text": "um this leads to a style that a lot of",
    "start": "829279",
    "end": "831880"
  },
  {
    "text": "ml programmers adopt um which we call",
    "start": "831880",
    "end": "835680"
  },
  {
    "text": "fzed style or heavily funed style or",
    "start": "835680",
    "end": "838560"
  },
  {
    "text": "something something like that and what",
    "start": "838560",
    "end": "840240"
  },
  {
    "text": "we're doing there is that for most",
    "start": "840240",
    "end": "842920"
  },
  {
    "text": "dependencies between structures so it's",
    "start": "842920",
    "end": "844800"
  },
  {
    "text": "very common to have a a module need to",
    "start": "844800",
    "end": "847440"
  },
  {
    "text": "refer to another module and maybe those",
    "start": "847440",
    "end": "849199"
  },
  {
    "text": "both refer to other modules and so on in",
    "start": "849199",
    "end": "851480"
  },
  {
    "text": "most cases what you could do is lift",
    "start": "851480",
    "end": "854959"
  },
  {
    "text": "those dependencies up and make them",
    "start": "854959",
    "end": "856839"
  },
  {
    "text": "funter parameters okay and now your",
    "start": "856839",
    "end": "859600"
  },
  {
    "text": "module is basically closed with respect",
    "start": "859600",
    "end": "862000"
  },
  {
    "text": "to any other structures that it would",
    "start": "862000",
    "end": "864240"
  },
  {
    "text": "depend on it only depends on signatures",
    "start": "864240",
    "end": "866560"
  },
  {
    "text": "for example and you don't have to do",
    "start": "866560",
    "end": "868160"
  },
  {
    "text": "this it's just a style that that some",
    "start": "868160",
    "end": "870519"
  },
  {
    "text": "people adopt so this is some code",
    "start": "870519",
    "end": "873279"
  },
  {
    "text": "approximately from uh from the SML",
    "start": "873279",
    "end": "876199"
  },
  {
    "text": "compiler itself and what it does is",
    "start": "876199",
    "end": "881519"
  },
  {
    "text": "um these are of course the body of the",
    "start": "881519",
    "end": "884399"
  },
  {
    "text": "funter is missing because it would take",
    "start": "884399",
    "end": "885839"
  },
  {
    "text": "up much more than a slide um but this",
    "start": "885839",
    "end": "889279"
  },
  {
    "text": "compile funter takes a code generator",
    "start": "889279",
    "end": "891720"
  },
  {
    "text": "module which is machine specific and",
    "start": "891720",
    "end": "895759"
  },
  {
    "text": "generate some kind of other compiler",
    "start": "895759",
    "end": "897680"
  },
  {
    "text": "interface and then what we're doing here",
    "start": "897680",
    "end": "900160"
  },
  {
    "text": "is basically putting together the reppel",
    "start": "900160",
    "end": "902519"
  },
  {
    "text": "for SML a re of Val print Loop that we",
    "start": "902519",
    "end": "905519"
  },
  {
    "text": "can interact with and so we sort of",
    "start": "905519",
    "end": "908639"
  },
  {
    "text": "Stack these abstractions together such",
    "start": "908639",
    "end": "911079"
  },
  {
    "text": "that",
    "start": "911079",
    "end": "912480"
  },
  {
    "text": "um well you you can kind of match up the",
    "start": "912480",
    "end": "915079"
  },
  {
    "text": "signatures here except that compile zero",
    "start": "915079",
    "end": "918480"
  },
  {
    "text": "and top compile are not exactly the same",
    "start": "918480",
    "end": "920639"
  },
  {
    "text": "but one subsumes the other so it still",
    "start": "920639",
    "end": "923839"
  },
  {
    "text": "matches um",
    "start": "923839",
    "end": "926880"
  },
  {
    "text": "so to look at the instantiation of it",
    "start": "926880",
    "end": "930040"
  },
  {
    "text": "basically we take some code generator",
    "start": "930040",
    "end": "932920"
  },
  {
    "text": "that's machine specific for whatever",
    "start": "932920",
    "end": "934920"
  },
  {
    "text": "architecture and wrap that to create the",
    "start": "934920",
    "end": "937920"
  },
  {
    "text": "full compiler and then create the reval",
    "start": "937920",
    "end": "941120"
  },
  {
    "text": "print loop from it and an interactive",
    "start": "941120",
    "end": "943600"
  },
  {
    "text": "top level that we get out of that and um",
    "start": "943600",
    "end": "947319"
  },
  {
    "text": "you can reinstantiate these things lots",
    "start": "947319",
    "end": "949560"
  },
  {
    "text": "of ways of course if you want to do",
    "start": "949560",
    "end": "951079"
  },
  {
    "text": "cross compiles then you can substitute",
    "start": "951079",
    "end": "953639"
  },
  {
    "text": "in different um different machine",
    "start": "953639",
    "end": "957399"
  },
  {
    "text": "specifications there different Cod code",
    "start": "957399",
    "end": "959000"
  },
  {
    "text": "generators um of course cross compiling",
    "start": "959000",
    "end": "962639"
  },
  {
    "text": "is something that the ml compiler is",
    "start": "962639",
    "end": "964199"
  },
  {
    "text": "good at but it's not something you want",
    "start": "964199",
    "end": "966000"
  },
  {
    "text": "to do at the read eval print level um",
    "start": "966000",
    "end": "969360"
  },
  {
    "text": "because you couldn't actually eval",
    "start": "969360",
    "end": "972800"
  },
  {
    "text": "um maybe you can you can read and ship",
    "start": "972800",
    "end": "975360"
  },
  {
    "text": "it to some other computer and eval it um",
    "start": "975360",
    "end": "979519"
  },
  {
    "text": "so this is the fzed style in in ml and",
    "start": "979519",
    "end": "983639"
  },
  {
    "text": "it's something that I think is worth",
    "start": "983639",
    "end": "986000"
  },
  {
    "text": "looking at and and doing perhaps in",
    "start": "986000",
    "end": "989079"
  },
  {
    "text": "Scala um yeah it's it's very",
    "start": "989079",
    "end": "993279"
  },
  {
    "text": "similar and I'm going to show",
    "start": "993279",
    "end": "995959"
  },
  {
    "text": "um I'm going to show just some examples",
    "start": "995959",
    "end": "998720"
  },
  {
    "text": "of ways to think of",
    "start": "998720",
    "end": "1001560"
  },
  {
    "text": "parameterizing um different sorts of",
    "start": "1001560",
    "end": "1003920"
  },
  {
    "text": "algorithms and and such to get",
    "start": "1003920",
    "end": "1006360"
  },
  {
    "text": "modularity um and yeah that's so Scala I",
    "start": "1006360",
    "end": "1010560"
  },
  {
    "text": "think you can do much much more with",
    "start": "1010560",
    "end": "1012519"
  },
  {
    "text": "with traits than than you can do with",
    "start": "1012519",
    "end": "1014279"
  },
  {
    "text": "functors although there are some",
    "start": "1014279",
    "end": "1016079"
  },
  {
    "text": "interesting differences one difference",
    "start": "1016079",
    "end": "1017800"
  },
  {
    "text": "is um in ml there's a notion of of Link",
    "start": "1017800",
    "end": "1020720"
  },
  {
    "text": "time and basically these um these funter",
    "start": "1020720",
    "end": "1025839"
  },
  {
    "text": "applications um happen before runtime so",
    "start": "1025839",
    "end": "1030959"
  },
  {
    "text": "um your compiler goes along and it's",
    "start": "1030959",
    "end": "1032600"
  },
  {
    "text": "going to actually execute all of the",
    "start": "1032600",
    "end": "1034438"
  },
  {
    "text": "funter applications if there's code that",
    "start": "1034439",
    "end": "1036240"
  },
  {
    "text": "gets run it gets run before the normal",
    "start": "1036240",
    "end": "1039079"
  },
  {
    "text": "runtime and so this gives you a kind of",
    "start": "1039079",
    "end": "1041600"
  },
  {
    "text": "rudimentary staging that you can do",
    "start": "1041600",
    "end": "1045400"
  },
  {
    "text": "um and in in schola we won't have that",
    "start": "1045400",
    "end": "1049400"
  },
  {
    "text": "the any uh classes or objects you're",
    "start": "1049400",
    "end": "1052240"
  },
  {
    "text": "using in this way will be evaluated when",
    "start": "1052240",
    "end": "1055240"
  },
  {
    "text": "they're evaluated later on um so that",
    "start": "1055240",
    "end": "1058600"
  },
  {
    "text": "part of it is more",
    "start": "1058600",
    "end": "1060480"
  },
  {
    "text": "Dynamic so let's just look at um some",
    "start": "1060480",
    "end": "1063640"
  },
  {
    "text": "scholar code I was playing with I um I",
    "start": "1063640",
    "end": "1067600"
  },
  {
    "text": "created a little data type for a",
    "start": "1067600",
    "end": "1070520"
  },
  {
    "text": "directed graph and this is kind of I I",
    "start": "1070520",
    "end": "1074400"
  },
  {
    "text": "might call it a double decker trait or a",
    "start": "1074400",
    "end": "1076919"
  },
  {
    "text": "double decker interface um because I'm",
    "start": "1076919",
    "end": "1079919"
  },
  {
    "text": "I'm used to ml and I guess it's just a",
    "start": "1079919",
    "end": "1082280"
  },
  {
    "text": "factory pattern right that I've got",
    "start": "1082280",
    "end": "1084520"
  },
  {
    "text": "these operations on a graph which is at",
    "start": "1084520",
    "end": "1086360"
  },
  {
    "text": "the inner trait and then I can create it",
    "start": "1086360",
    "end": "1088120"
  },
  {
    "text": "as well but that gives me more like what",
    "start": "1088120",
    "end": "1089960"
  },
  {
    "text": "we have in ml for signatures because the",
    "start": "1089960",
    "end": "1092440"
  },
  {
    "text": "signatures are not dependent on having a",
    "start": "1092440",
    "end": "1094600"
  },
  {
    "text": "self type or something but but here I",
    "start": "1094600",
    "end": "1096760"
  },
  {
    "text": "you split them into those two",
    "start": "1096760",
    "end": "1098600"
  },
  {
    "text": "parts um so here's here's my director",
    "start": "1098600",
    "end": "1102960"
  },
  {
    "text": "graph signature and",
    "start": "1102960",
    "end": "1105240"
  },
  {
    "text": "then this is mutable um",
    "start": "1105240",
    "end": "1109080"
  },
  {
    "text": "for which I apologize but I",
    "start": "1109080",
    "end": "1111960"
  },
  {
    "text": "um I don't want to show off functional",
    "start": "1111960",
    "end": "1114280"
  },
  {
    "text": "programming chops right now so that's",
    "start": "1114280",
    "end": "1116919"
  },
  {
    "text": "that's it uh but when we go to represent",
    "start": "1116919",
    "end": "1119440"
  },
  {
    "text": "this and implement this you can think of",
    "start": "1119440",
    "end": "1120840"
  },
  {
    "start": "1120000",
    "end": "1120000"
  },
  {
    "text": "different ways to represent graphs um",
    "start": "1120840",
    "end": "1124120"
  },
  {
    "text": "and so the famous ones from computer",
    "start": "1124120",
    "end": "1127360"
  },
  {
    "text": "science textbook might be that we can",
    "start": "1127360",
    "end": "1129480"
  },
  {
    "text": "use an adjacency list or an adjacency",
    "start": "1129480",
    "end": "1131600"
  },
  {
    "text": "Matrix and of course maybe the list has",
    "start": "1131600",
    "end": "1134280"
  },
  {
    "text": "better space performance for um sparse",
    "start": "1134280",
    "end": "1138679"
  },
  {
    "text": "graphs and so forth they're different",
    "start": "1138679",
    "end": "1140240"
  },
  {
    "text": "trade-offs but in general what we can do",
    "start": "1140240",
    "end": "1142200"
  },
  {
    "text": "is look at this is just a map um a",
    "start": "1142200",
    "end": "1145080"
  },
  {
    "text": "Vertex to to vertex to Edge whatever the",
    "start": "1145080",
    "end": "1147559"
  },
  {
    "text": "data types are for these things um and",
    "start": "1147559",
    "end": "1151600"
  },
  {
    "text": "so the first the first map will take our",
    "start": "1151600",
    "end": "1154720"
  },
  {
    "text": "vertices here or maybe the the rows and",
    "start": "1154720",
    "end": "1158039"
  },
  {
    "text": "the second map is about the columns or",
    "start": "1158039",
    "end": "1160520"
  },
  {
    "text": "maybe it's a list but what we can do is",
    "start": "1160520",
    "end": "1162840"
  },
  {
    "text": "be completely generic in which kinds of",
    "start": "1162840",
    "end": "1164840"
  },
  {
    "text": "maps we want to use in each case so",
    "start": "1164840",
    "end": "1167880"
  },
  {
    "start": "1166000",
    "end": "1166000"
  },
  {
    "text": "here's an analog of a functor that we",
    "start": "1167880",
    "end": "1170600"
  },
  {
    "text": "could do where um there's kind of a lot",
    "start": "1170600",
    "end": "1174520"
  },
  {
    "text": "of type code at the top but what I'm",
    "start": "1174520",
    "end": "1176960"
  },
  {
    "text": "doing is creating a directed graph",
    "start": "1176960",
    "end": "1178919"
  },
  {
    "text": "implementation using the mutable map",
    "start": "1178919",
    "end": "1181760"
  },
  {
    "text": "Factory twice and the first map is going",
    "start": "1181760",
    "end": "1184360"
  },
  {
    "text": "to give me that that first level and the",
    "start": "1184360",
    "end": "1186120"
  },
  {
    "text": "second map's going to give me the second",
    "start": "1186120",
    "end": "1187480"
  },
  {
    "text": "level and later on we can decide what",
    "start": "1187480",
    "end": "1190640"
  },
  {
    "text": "those should be right but then I can do",
    "start": "1190640",
    "end": "1192640"
  },
  {
    "text": "my graph implementation based on that",
    "start": "1192640",
    "end": "1195039"
  },
  {
    "text": "and the representation will just start",
    "start": "1195039",
    "end": "1196600"
  },
  {
    "text": "off with an empty map",
    "start": "1196600",
    "end": "1198799"
  },
  {
    "text": "of the first kind um so we can Implement",
    "start": "1198799",
    "end": "1204600"
  },
  {
    "text": "graphs where essentially the entire data",
    "start": "1204600",
    "end": "1207960"
  },
  {
    "text": "structure is outsourced to to these",
    "start": "1207960",
    "end": "1209880"
  },
  {
    "text": "other um these other uh mutable map um",
    "start": "1209880",
    "end": "1216520"
  },
  {
    "text": "representations and so we're just uh",
    "start": "1216520",
    "end": "1220200"
  },
  {
    "text": "relying on that to build our own notion",
    "start": "1220200",
    "end": "1223159"
  },
  {
    "text": "of a",
    "start": "1223159",
    "end": "1224080"
  },
  {
    "text": "graph and then we can instantiate that",
    "start": "1224080",
    "end": "1226960"
  },
  {
    "start": "1226000",
    "end": "1226000"
  },
  {
    "text": "that functor",
    "start": "1226960",
    "end": "1228840"
  },
  {
    "text": "using whatever um types of maps that we",
    "start": "1228840",
    "end": "1231880"
  },
  {
    "text": "want and so something like an adjacency",
    "start": "1231880",
    "end": "1233960"
  },
  {
    "text": "list might have a hashmap for the first",
    "start": "1233960",
    "end": "1236159"
  },
  {
    "text": "one and a list map for the second one or",
    "start": "1236159",
    "end": "1238840"
  },
  {
    "text": "if you use two hash Maps then it's a",
    "start": "1238840",
    "end": "1240440"
  },
  {
    "text": "little bit more like um an adjacency",
    "start": "1240440",
    "end": "1243080"
  },
  {
    "text": "Matrix I suppose or at least that's the",
    "start": "1243080",
    "end": "1245840"
  },
  {
    "text": "analogy I'm going for but we don't have",
    "start": "1245840",
    "end": "1248280"
  },
  {
    "text": "to rewrite any code right it's just the",
    "start": "1248280",
    "end": "1250080"
  },
  {
    "text": "same uh representation I mean the same",
    "start": "1250080",
    "end": "1254200"
  },
  {
    "text": "logic the same implementation but we're",
    "start": "1254200",
    "end": "1256039"
  },
  {
    "text": "substituting in essential parts of that",
    "start": "1256039",
    "end": "1258559"
  },
  {
    "text": "data structure to get different",
    "start": "1258559",
    "end": "1260440"
  },
  {
    "text": "SpaceTime characteristics right the next",
    "start": "1260440",
    "end": "1263720"
  },
  {
    "text": "thing I wanted to be able to do is take",
    "start": "1263720",
    "end": "1265880"
  },
  {
    "text": "some more inspir inspiration from C++",
    "start": "1265880",
    "end": "1269039"
  },
  {
    "start": "1266000",
    "end": "1266000"
  },
  {
    "text": "and C++ programmers have this um maybe",
    "start": "1269039",
    "end": "1273600"
  },
  {
    "text": "it's a fantasy or maybe just a desire",
    "start": "1273600",
    "end": "1275520"
  },
  {
    "text": "that that we can have algorithms that",
    "start": "1275520",
    "end": "1278520"
  },
  {
    "text": "are implemented independent of whatever",
    "start": "1278520",
    "end": "1280559"
  },
  {
    "text": "representations you want to use um and",
    "start": "1280559",
    "end": "1283720"
  },
  {
    "text": "so algorithm is part of the standard",
    "start": "1283720",
    "end": "1286200"
  },
  {
    "text": "template library and I wanted to do",
    "start": "1286200",
    "end": "1288360"
  },
  {
    "text": "something a little bit along those lines",
    "start": "1288360",
    "end": "1291039"
  },
  {
    "start": "1290000",
    "end": "1290000"
  },
  {
    "text": "um so here's an implementation of graph",
    "start": "1291039",
    "end": "1293679"
  },
  {
    "text": "search as a functor you know using the",
    "start": "1293679",
    "end": "1297600"
  },
  {
    "text": "analogy to ml um where I can define a",
    "start": "1297600",
    "end": "1301400"
  },
  {
    "text": "search but a lot of the way that I do",
    "start": "1301400",
    "end": "1304960"
  },
  {
    "text": "the search can be outsourced to these",
    "start": "1304960",
    "end": "1307000"
  },
  {
    "text": "other signatures or other modules that I",
    "start": "1307000",
    "end": "1309880"
  },
  {
    "text": "will instantiate at some point right so",
    "start": "1309880",
    "end": "1312840"
  },
  {
    "text": "to do a search I need a work list to",
    "start": "1312840",
    "end": "1314679"
  },
  {
    "text": "decide what to do next or to keep track",
    "start": "1314679",
    "end": "1316640"
  },
  {
    "text": "of where I am and and that work list can",
    "start": "1316640",
    "end": "1319520"
  },
  {
    "text": "be some other um signature that I just",
    "start": "1319520",
    "end": "1323520"
  },
  {
    "text": "defined somewhere else and then I need a",
    "start": "1323520",
    "end": "1325360"
  },
  {
    "text": "set to keep track of which ones I've",
    "start": "1325360",
    "end": "1326880"
  },
  {
    "text": "visited and um so I can use the mutable",
    "start": "1326880",
    "end": "1329880"
  },
  {
    "text": "set Factory to get to get",
    "start": "1329880",
    "end": "1333400"
  },
  {
    "text": "that so here's here's the trait for that",
    "start": "1333400",
    "end": "1335919"
  },
  {
    "start": "1335000",
    "end": "1335000"
  },
  {
    "text": "work list work list is just something",
    "start": "1335919",
    "end": "1338120"
  },
  {
    "text": "that um might be empty or I can put",
    "start": "1338120",
    "end": "1341279"
  },
  {
    "text": "something or take something again it's",
    "start": "1341279",
    "end": "1342880"
  },
  {
    "text": "mutable um and I can create one so it's",
    "start": "1342880",
    "end": "1346200"
  },
  {
    "text": "the factory and the the uh",
    "start": "1346200",
    "end": "1348720"
  },
  {
    "text": "ADT Al together like",
    "start": "1348720",
    "end": "1350760"
  },
  {
    "text": "that so that's a work list Signature and",
    "start": "1350760",
    "end": "1353840"
  },
  {
    "text": "of course my work list could be",
    "start": "1353840",
    "end": "1355039"
  },
  {
    "start": "1355000",
    "end": "1355000"
  },
  {
    "text": "implemented a variety of different ways",
    "start": "1355039",
    "end": "1356919"
  },
  {
    "text": "one way might just be to use a stack so",
    "start": "1356919",
    "end": "1360600"
  },
  {
    "text": "here's a simple way with traits to build",
    "start": "1360600",
    "end": "1363559"
  },
  {
    "text": "a a last in first out object that uh",
    "start": "1363559",
    "end": "1366919"
  },
  {
    "text": "extends worklist signature and um to put",
    "start": "1366919",
    "end": "1371200"
  },
  {
    "text": "a new object you push to take it you pop",
    "start": "1371200",
    "end": "1373360"
  },
  {
    "text": "but you can do the same thing with a",
    "start": "1373360",
    "end": "1374400"
  },
  {
    "text": "fifo right to put you NQ to take you DQ",
    "start": "1374400",
    "end": "1378159"
  },
  {
    "text": "and both of these Implement my work list",
    "start": "1378159",
    "end": "1380880"
  },
  {
    "text": "Signature so then it becomes very",
    "start": "1380880",
    "end": "1382919"
  },
  {
    "text": "flexible to have different algorithms",
    "start": "1382919",
    "end": "1385159"
  },
  {
    "text": "that arise from different um choices for",
    "start": "1385159",
    "end": "1388440"
  },
  {
    "text": "these so breath for search is basically",
    "start": "1388440",
    "end": "1391320"
  },
  {
    "text": "My Graph Search where I just plug in a",
    "start": "1391320",
    "end": "1393320"
  },
  {
    "text": "fifo and depth first search where I plug",
    "start": "1393320",
    "end": "1395880"
  },
  {
    "text": "in a a stack instead and you um you get",
    "start": "1395880",
    "end": "1400720"
  },
  {
    "text": "a lot of flexibility out of that so",
    "start": "1400720",
    "end": "1403960"
  },
  {
    "text": "that's a very simple example but it it",
    "start": "1403960",
    "end": "1406320"
  },
  {
    "text": "reminds me of the way that we do things",
    "start": "1406320",
    "end": "1408320"
  },
  {
    "text": "in ml so I just wanted to kind of show",
    "start": "1408320",
    "end": "1410320"
  },
  {
    "text": "you what that looks like",
    "start": "1410320",
    "end": "1413520"
  },
  {
    "text": "um here's just an example of it running",
    "start": "1413520",
    "end": "1416799"
  },
  {
    "text": "I I drew a little graph and I I",
    "start": "1416799",
    "end": "1418880"
  },
  {
    "text": "implemented it even this example is",
    "start": "1418880",
    "end": "1422799"
  },
  {
    "text": "um parameterized by the graph",
    "start": "1422799",
    "end": "1425880"
  },
  {
    "text": "representation so you can create this",
    "start": "1425880",
    "end": "1427559"
  },
  {
    "text": "whether it's the The Matrix or the set",
    "start": "1427559",
    "end": "1429520"
  },
  {
    "text": "you create the same graph and then you",
    "start": "1429520",
    "end": "1432640"
  },
  {
    "text": "can run breadth for search or depth for",
    "start": "1432640",
    "end": "1434640"
  },
  {
    "text": "search either way um and this this",
    "start": "1434640",
    "end": "1438320"
  },
  {
    "text": "produces the path that it took to get to",
    "start": "1438320",
    "end": "1440960"
  },
  {
    "text": "in in reverse order but the path it took",
    "start": "1440960",
    "end": "1442679"
  },
  {
    "text": "to get to the uh the",
    "start": "1442679",
    "end": "1444600"
  },
  {
    "text": "node okay so now I just like to step",
    "start": "1444600",
    "end": "1448799"
  },
  {
    "text": "back a little bit and make a bit of a",
    "start": "1448799",
    "end": "1451039"
  },
  {
    "text": "point about modularity in general um it",
    "start": "1451039",
    "end": "1455279"
  },
  {
    "text": "seems to me",
    "start": "1455279",
    "end": "1457120"
  },
  {
    "text": "that a lot of the fancier um ways to",
    "start": "1457120",
    "end": "1462120"
  },
  {
    "text": "modularize and reuse code start out in",
    "start": "1462120",
    "end": "1464760"
  },
  {
    "text": "untyped languages um and then we",
    "start": "1464760",
    "end": "1469840"
  },
  {
    "text": "eventually once they prove useful and we",
    "start": "1469840",
    "end": "1472559"
  },
  {
    "text": "understand them we eventually find ways",
    "start": "1472559",
    "end": "1474039"
  },
  {
    "text": "to give them types and so traits came",
    "start": "1474039",
    "end": "1477960"
  },
  {
    "text": "from um similar mechanisms have been",
    "start": "1477960",
    "end": "1481640"
  },
  {
    "text": "proposed but uh but this paper is about",
    "start": "1481640",
    "end": "1484399"
  },
  {
    "text": "traits and small talk and there are",
    "start": "1484399",
    "end": "1486279"
  },
  {
    "text": "older systems um flavors was a kind of",
    "start": "1486279",
    "end": "1489640"
  },
  {
    "text": "mixin that made it into common lisp",
    "start": "1489640",
    "end": "1492640"
  },
  {
    "text": "object system and there are lots of um",
    "start": "1492640",
    "end": "1495480"
  },
  {
    "text": "ideas here but the what they have in",
    "start": "1495480",
    "end": "1497279"
  },
  {
    "text": "common is that they're not really",
    "start": "1497279",
    "end": "1498919"
  },
  {
    "text": "concerned about types the way that we",
    "start": "1498919",
    "end": "1501120"
  },
  {
    "text": "are in Scala so um there's a a way in",
    "start": "1501120",
    "end": "1506159"
  },
  {
    "text": "which we can look to for inspiration at",
    "start": "1506159",
    "end": "1510440"
  },
  {
    "text": "the um less well typed languages maybe",
    "start": "1510440",
    "end": "1513960"
  },
  {
    "text": "to to find ways to do modular",
    "start": "1513960",
    "end": "1516799"
  },
  {
    "text": "developments um and here",
    "start": "1516799",
    "end": "1519399"
  },
  {
    "text": "is a popular SL Infamous blog post by uh",
    "start": "1519399",
    "end": "1523960"
  },
  {
    "text": "galad braa that types are antim modular",
    "start": "1523960",
    "end": "1527080"
  },
  {
    "text": "which I don't NE necessarily disagree",
    "start": "1527080",
    "end": "1528720"
  },
  {
    "text": "with um and he's he's a proponent of",
    "start": "1528720",
    "end": "1532320"
  },
  {
    "text": "some of some of these systems as well so",
    "start": "1532320",
    "end": "1534840"
  },
  {
    "text": "uh basically well you can read that",
    "start": "1534840",
    "end": "1538360"
  },
  {
    "text": "later Point um and then here from the",
    "start": "1538360",
    "end": "1541279"
  },
  {
    "text": "C++ reference manual there's a quote it",
    "start": "1541279",
    "end": "1544520"
  },
  {
    "text": "it wasn't obvious how to combine the C++",
    "start": "1544520",
    "end": "1546880"
  },
  {
    "text": "strong static type checking with a",
    "start": "1546880",
    "end": "1549480"
  },
  {
    "text": "scheme flexible enough to support",
    "start": "1549480",
    "end": "1551720"
  },
  {
    "text": "mixins uh used in some lisp dialects so",
    "start": "1551720",
    "end": "1554880"
  },
  {
    "text": "what that's basically what they're",
    "start": "1554880",
    "end": "1556320"
  },
  {
    "text": "saying is that okay we have temp temp",
    "start": "1556320",
    "end": "1557760"
  },
  {
    "text": "plates and templates can do some fancy",
    "start": "1557760",
    "end": "1559360"
  },
  {
    "text": "things but we don't really know how to",
    "start": "1559360",
    "end": "1561919"
  },
  {
    "text": "type them still um and so what I think",
    "start": "1561919",
    "end": "1565200"
  },
  {
    "text": "is is valuable about Scala is that we",
    "start": "1565200",
    "end": "1567880"
  },
  {
    "text": "have ways to um to type check this stuff",
    "start": "1567880",
    "end": "1571480"
  },
  {
    "text": "there is one thing I found just last",
    "start": "1571480",
    "end": "1572960"
  },
  {
    "text": "night I wasn't aware of this system",
    "start": "1572960",
    "end": "1575120"
  },
  {
    "text": "before um but this is an account of",
    "start": "1575120",
    "end": "1577559"
  },
  {
    "text": "traits in a specification language that",
    "start": "1577559",
    "end": "1581000"
  },
  {
    "text": "goes back to I think this is 1985 or so",
    "start": "1581000",
    "end": "1584720"
  },
  {
    "text": "um and although it's a specification",
    "start": "1584720",
    "end": "1587080"
  },
  {
    "text": "language not a programming language",
    "start": "1587080",
    "end": "1588679"
  },
  {
    "text": "there there clearly are type in there's",
    "start": "1588679",
    "end": "1591960"
  },
  {
    "text": "type information here and I'm not sure",
    "start": "1591960",
    "end": "1595320"
  },
  {
    "text": "how or how well it was type checked and",
    "start": "1595320",
    "end": "1597440"
  },
  {
    "text": "that kind of thing but um it's something",
    "start": "1597440",
    "end": "1599559"
  },
  {
    "text": "I would like to look into more because",
    "start": "1599559",
    "end": "1601039"
  },
  {
    "text": "it seems",
    "start": "1601039",
    "end": "1602279"
  },
  {
    "text": "to be an earlier instance of typed trait",
    "start": "1602279",
    "end": "1606320"
  },
  {
    "text": "like things that I had never known about",
    "start": "1606320",
    "end": "1609200"
  },
  {
    "text": "before all right thank",
    "start": "1609200",
    "end": "1612040"
  },
  {
    "text": "[Applause]",
    "start": "1612040",
    "end": "1616180"
  },
  {
    "text": "you",
    "start": "1616600",
    "end": "1619600"
  },
  {
    "text": "[Music]",
    "start": "1619700",
    "end": "1624470"
  }
]