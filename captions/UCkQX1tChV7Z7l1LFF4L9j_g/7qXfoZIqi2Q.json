[
  {
    "text": "this talk is called effective job of a third edition keeping it effective and",
    "start": "4050",
    "end": "9830"
  },
  {
    "text": "the talk is all about the new edition of my book which is now available at Amazon",
    "start": "9830",
    "end": "17160"
  },
  {
    "text": "or you know your your favorite brick-and-mortar bookstore if you can still find one the book has one new",
    "start": "17160",
    "end": "24090"
  },
  {
    "text": "chapter it's got 14 new items two of the old items were retired because they were no longer interesting and every single",
    "start": "24090",
    "end": "32310"
  },
  {
    "text": "existing item was thoroughly revised every piece of code in the book was revised to use new idioms and new",
    "start": "32310",
    "end": "38820"
  },
  {
    "text": "constructs here's how Java has kind of evolved from when the first edition was",
    "start": "38820",
    "end": "45780"
  },
  {
    "text": "released the first edition was in 2001 the book was 232 pages and it covered the language as it existed at the time",
    "start": "45780",
    "end": "52199"
  },
  {
    "text": "Java 4 which was kind of the original language plus anonymous classes asserts a few other things the second edition",
    "start": "52199",
    "end": "58739"
  },
  {
    "text": "was released seven years later in 2008 and the book grew to 315 pages because",
    "start": "58739",
    "end": "65430"
  },
  {
    "text": "the language had grown you know principally in Java 5 but a little bit in Java 6 it got generic synonyms for",
    "start": "65430",
    "end": "70650"
  },
  {
    "text": "each autoboxing varargs and so forth the concurrency oodles and that that",
    "start": "70650",
    "end": "76830"
  },
  {
    "text": "additions served us well for you know almost another decade but it was getting kind of moldy about the time that",
    "start": "76830",
    "end": "83400"
  },
  {
    "text": "lambdas and streams were added the language in Java 9 so the third edition covers lambdas streams optionals the",
    "start": "83400",
    "end": "89460"
  },
  {
    "text": "default methods that were added the interfaces try with resources which was added in Java 7 and modules that's a lot",
    "start": "89460",
    "end": "97680"
  },
  {
    "text": "of stuff I always wanted effective Java to be a little book and it used to be a",
    "start": "97680",
    "end": "103800"
  },
  {
    "text": "little book but you know when you have a big language you can't write a little book so it's grown to be a bigger book",
    "start": "103800",
    "end": "111630"
  },
  {
    "text": "of course I cannot cover all the new stuff in this talk so I'm restricting",
    "start": "111630",
    "end": "116820"
  },
  {
    "text": "the coverage to lambdas and streams and I can't even cover all of that if you",
    "start": "116820",
    "end": "121890"
  },
  {
    "text": "look at these five topics I'm going to be covering today you'll see each one has a number after it and that number is",
    "start": "121890",
    "end": "127830"
  },
  {
    "text": "the item corresponding to the material I hope to make it through all five but if",
    "start": "127830",
    "end": "133980"
  },
  {
    "text": "I can't I'll cut the fifth one and that means you know I'll move I'll try not to lose anyone first thing",
    "start": "133980",
    "end": "141239"
  },
  {
    "text": "I'm gonna talk about is why you should prefer lambdas to anonymous classes and",
    "start": "141239",
    "end": "146400"
  },
  {
    "text": "I wasn't kidding when I said I'm gonna go from board to board all right so historically you used anonymous inner",
    "start": "146400",
    "end": "152580"
  },
  {
    "text": "class instance creation expressions for your function objects so if you needed to let's say sort a collection of words",
    "start": "152580",
    "end": "159599"
  },
  {
    "text": "you according to string link rather than alphabetical order you would have to pass in a comparator",
    "start": "159599",
    "end": "165120"
  },
  {
    "text": "which took two strings and returned a negative numbers here or a positive number the first one was shorter than",
    "start": "165120",
    "end": "170670"
  },
  {
    "text": "same length or longer than the first and this was the best way to do it you know you would basically create a new",
    "start": "170670",
    "end": "176849"
  },
  {
    "text": "comparator of string whose compare method took two strings and returned to integer compare of s1 length as two",
    "start": "176849",
    "end": "184019"
  },
  {
    "text": "lengths and you know that was great as far as it went it was adequate for the classic object-oriented design patterns",
    "start": "184019",
    "end": "191160"
  },
  {
    "text": "that we learned in the Gang of Four book such a strategy and command but you know",
    "start": "191160",
    "end": "197280"
  },
  {
    "text": "you couldn't do everything with it and now there's a better way now you can use",
    "start": "197280",
    "end": "202500"
  },
  {
    "text": "lambdas and here's a new piece of code that does exactly the same thing we say collection stuff sort of words and this",
    "start": "202500",
    "end": "209459"
  },
  {
    "text": "time instead of passing in that anonymous class instance we just have a lambda takes two strings and returns the",
    "start": "209459",
    "end": "216900"
  },
  {
    "text": "result of : compare method on the two strings you know that's great but we can do better at the same time as they added",
    "start": "216900",
    "end": "224880"
  },
  {
    "text": "that they added compare construction methods and this by the way assumes that we've done a static import so I can",
    "start": "224880",
    "end": "232560"
  },
  {
    "text": "which which I advise you all to do you know there's no question as to what I'm talking about and it reads much better",
    "start": "232560",
    "end": "239010"
  },
  {
    "text": "so now instead of you know explicitly passing in a lambda you can just say",
    "start": "239010",
    "end": "246739"
  },
  {
    "text": "comparing int of string length which means gives me a comparator that compares the int that I get by invoking",
    "start": "246739",
    "end": "253950"
  },
  {
    "text": "the length method from string on the given strings so you know that's even",
    "start": "253950",
    "end": "259530"
  },
  {
    "text": "nicer and more over these comparator construction methods do something wonderful for you they guarantee that",
    "start": "259530",
    "end": "265560"
  },
  {
    "text": "the comparators that you get will actually obey the comparator construct which is a fairly complicated contra",
    "start": "265560",
    "end": "271950"
  },
  {
    "text": "so you should pretty much always use these compare our construction methods when you can but wait there's more you",
    "start": "271950",
    "end": "278640"
  },
  {
    "text": "can do even better than that they also added using these interface default",
    "start": "278640",
    "end": "285360"
  },
  {
    "text": "methods they added a sort method to the list interface so you can simply say words dots support sorry",
    "start": "285360",
    "end": "292470"
  },
  {
    "text": "words dot sort comparing int of string length and the lovely thing about this is it reads like English now sort the",
    "start": "292470",
    "end": "299100"
  },
  {
    "text": "words comparing the int that is the length of the strings isn't that marvelous so that's that's what you",
    "start": "299100",
    "end": "306540"
  },
  {
    "text": "should do now that you can it looks beautiful but how does it work there's a lot of magic to make all of this work",
    "start": "306540",
    "end": "313410"
  },
  {
    "text": "and under the hood the way it works is type inference you know so when the",
    "start": "313410",
    "end": "319410"
  },
  {
    "text": "program says hey sort words and be passing this lambda s 1 s 2 returns",
    "start": "319410",
    "end": "324810"
  },
  {
    "text": "ended up compare of S one's length with s 2 s length what's really going on is you know it there's a type cast to",
    "start": "324810",
    "end": "334020"
  },
  {
    "text": "comparator of string you know yeah you have to tell it make me an object of type comparator of string and you have",
    "start": "334020",
    "end": "339870"
  },
  {
    "text": "to tell it that these arguments s1 and s2 are in fact strings but the compiler figures it all out for you how does it",
    "start": "339870",
    "end": "345720"
  },
  {
    "text": "do it it doesn't using type inference and how does type inference work the best way to think about type inference",
    "start": "345720",
    "end": "352050"
  },
  {
    "text": "is that type inference is magic it's like too complicated really seriously the point is the rules to type inference",
    "start": "352050",
    "end": "359850"
  },
  {
    "text": "are so complicated they take up a whole chapter in the Java language specification and it is a very complex",
    "start": "359850",
    "end": "365580"
  },
  {
    "text": "very technical very mathematical chapter it's it's in excess of 60 pages just out",
    "start": "365580",
    "end": "371160"
  },
  {
    "text": "of curiosity and and don't be embarrassed how many people have actually read that chapter in its entirety so in this audience one and",
    "start": "371160",
    "end": "379800"
  },
  {
    "text": "that's about what I expected and I'll bet you're like a compiler engineer or something like that you okay the really",
    "start": "379800",
    "end": "385770"
  },
  {
    "text": "confused did it help solve your confusion at all good good so basically the people who it was",
    "start": "385770",
    "end": "392760"
  },
  {
    "text": "designed for the people who have to implement compilers that actually have to do the type inference it's extraordinarily complex and no one knows",
    "start": "392760",
    "end": "399750"
  },
  {
    "text": "how it works and that's okay the right way to deal with this is just assume the compiler will be able",
    "start": "399750",
    "end": "404910"
  },
  {
    "text": "figure it out you know write down the the lambda that you want and if the compiler can't figure it out",
    "start": "404910",
    "end": "411090"
  },
  {
    "text": "it will at you it will give you an error message and tell you why it couldn't figure it out and you'll say okay I got to add a little bit of type",
    "start": "411090",
    "end": "418080"
  },
  {
    "text": "information here you add the type information and then you're good to go again so that's that's the way you",
    "start": "418080",
    "end": "424140"
  },
  {
    "text": "should deal with the magic of type inference here's a caveat regarding type inference in order for type inference to",
    "start": "424140",
    "end": "431550"
  },
  {
    "text": "actually work it needs the generic information so in the previous edition of this book I told you hey never use",
    "start": "431550",
    "end": "438420"
  },
  {
    "text": "raw types don't say list say list up string because if you just say list you lose all the benefits of generics you",
    "start": "438420",
    "end": "444450"
  },
  {
    "text": "know you won't get compile time type checking you won't get type safety your program can burrow up blow up at runtime",
    "start": "444450",
    "end": "450030"
  },
  {
    "text": "it can compute wrong results but now it's even worse the third edition says it even more strongly it says hey if you",
    "start": "450030",
    "end": "457050"
  },
  {
    "text": "use raw types you won't be able to use lambdas because they won't be able to infer the types and the lambdas just",
    "start": "457050",
    "end": "462780"
  },
  {
    "text": "won't compile so at this point the usage of raw types should be considered strictly verboten the rule for when to",
    "start": "462780",
    "end": "469890"
  },
  {
    "text": "use raw types is don't the the implication of that the summary is that",
    "start": "469890",
    "end": "475950"
  },
  {
    "text": "you have to understand generics in order to use lambdas you simply can't use lambdas without generics so do you guys",
    "start": "475950",
    "end": "482669"
  },
  {
    "text": "remember this old chestnut this this old program yeah I'm gonna this is a long section so I'll I'll share my time with",
    "start": "482669",
    "end": "489210"
  },
  {
    "text": "the people on the side of the room so you guys by any chance remember this program which is in previous editions and effective Java which basically is an",
    "start": "489210",
    "end": "496950"
  },
  {
    "text": "enumerated type representing an arithmetic operation you know why the plus minus times are",
    "start": "496950",
    "end": "502020"
  },
  {
    "text": "divided by and it has like an abstract method out in the ANU mand then constant specific class bodies where each in",
    "start": "502020",
    "end": "509190"
  },
  {
    "text": "constant provides its own implementation of the apply method in order to do the correct thing so that the the plus",
    "start": "509190",
    "end": "515810"
  },
  {
    "text": "constant does addition the minus constant subtraction times multiplication and divide does division",
    "start": "515810",
    "end": "521460"
  },
  {
    "text": "you guys remember that show of hands I just have curiosity well a bunch of you but anyway so you if you could give",
    "start": "521460",
    "end": "528480"
  },
  {
    "text": "different behavior to each anoon constants by having the constant",
    "start": "528480",
    "end": "534530"
  },
  {
    "text": "override an abstract method that declared India knew itself and I thought",
    "start": "534530",
    "end": "540340"
  },
  {
    "text": "this was pretty cool I liked it but it turns out you can do way better now in that book I also said that you should",
    "start": "540340",
    "end": "547900"
  },
  {
    "text": "prefer sort of constant specific data to constant specific class bodies this is a",
    "start": "547900",
    "end": "555010"
  },
  {
    "text": "this is a sledgehammer this is a power tool well I think I mixed my metaphors this is a chainsaw this is a power tool",
    "start": "555010",
    "end": "561610"
  },
  {
    "text": "and you shouldn't use a power tool and a hand tool is called for ideally you would just pass in a piece of data to",
    "start": "561610",
    "end": "567160"
  },
  {
    "text": "describe the different behavior and now you can easily do it here's how the code looks see now instead of simply passing",
    "start": "567160",
    "end": "574120"
  },
  {
    "text": "in the symbol so that it prints out properly I pass it the symbol and the operation and the operation here is just",
    "start": "574120",
    "end": "580300"
  },
  {
    "text": "a lambda so for plus I pass in given x and y I return the sum of X and y you know X comma Y goes to X plus y and",
    "start": "580300",
    "end": "586960"
  },
  {
    "text": "similarly for all the four others so now I don't need to have any abstract methods in the outer class that is in",
    "start": "586960",
    "end": "595390"
  },
  {
    "text": "the name itself instead I simply have an apply method has the same signature as the previous one did and it returns op",
    "start": "595390",
    "end": "601660"
  },
  {
    "text": "apply as double X comma Y and what is",
    "start": "601660",
    "end": "607330"
  },
  {
    "text": "that really doing well if you look at the type of op you will see it is a",
    "start": "607330",
    "end": "613180"
  },
  {
    "text": "double binary operator and that is one of the standard functional pipes",
    "start": "613180",
    "end": "618340"
  },
  {
    "text": "provided by Java you know in order to make these lambdas work in a language",
    "start": "618340",
    "end": "625240"
  },
  {
    "text": "that doesn't provide sort of functional types at the language level like a type",
    "start": "625240",
    "end": "630900"
  },
  {
    "text": "representing you know a method that takes two in send returns a double since",
    "start": "630900",
    "end": "636310"
  },
  {
    "text": "the language doesn't have that they just provided a whole bunch of types we'll discuss them later which are the standard functional types and in this",
    "start": "636310",
    "end": "641650"
  },
  {
    "text": "case the one that perfectly does what we need is double binary operator which is an operator that takes two doubles and returns a double and this simply takes a",
    "start": "641650",
    "end": "648640"
  },
  {
    "text": "double you know so this guy is a double binary operator that is all of four of the lambdas that are passed in and you",
    "start": "648640",
    "end": "654460"
  },
  {
    "text": "can apply it simply by calling apply as double and we're done so now there's a much nicer way to do",
    "start": "654460",
    "end": "660130"
  },
  {
    "text": "what we used to have to do in a sort of a nasty way so I've already know Amazon",
    "start": "660130",
    "end": "665580"
  },
  {
    "text": "instead of anonymous classes but shouldn't you use lambdas well lambda",
    "start": "665580",
    "end": "671600"
  },
  {
    "text": "lack names and they lack documentation right when you have a lambda all you see is a gob of code in the middle of your",
    "start": "671600",
    "end": "677839"
  },
  {
    "text": "code that's fine if your lambda is self-explanatory if it's short and sweet so if it fits on",
    "start": "677839",
    "end": "684230"
  },
  {
    "text": "a line great but they should rarely exceed a few lines because if you have a",
    "start": "684230",
    "end": "689600"
  },
  {
    "text": "bunch of code you know being passed in and you look at it and you can't figure out what it does then you can't figure",
    "start": "689600",
    "end": "695089"
  },
  {
    "text": "out what the code including it does either and you're in bad shape if alignment would be too long or",
    "start": "695089",
    "end": "700190"
  },
  {
    "text": "complex there's an easy way out you should all know this trick extract the",
    "start": "700190",
    "end": "705709"
  },
  {
    "text": "lambda to a separate named method and then use a method reference to that method instead of a lambda and once you",
    "start": "705709",
    "end": "712069"
  },
  {
    "text": "have a named method you can name its parameters you can give its parameters types you can you know describe the",
    "start": "712069",
    "end": "718430"
  },
  {
    "text": "semantics of the method you can put comments inside the method and it's not",
    "start": "718430",
    "end": "723560"
  },
  {
    "text": "like you've blown up the code by putting all this stuff in line so lambdas are good only when you're actually passing a",
    "start": "723560",
    "end": "729980"
  },
  {
    "text": "small amount of code and and lambdas haven't completely killed anonymous",
    "start": "729980",
    "end": "735800"
  },
  {
    "text": "classes there are still a couple uses for them first of all lambdas require a",
    "start": "735800",
    "end": "740990"
  },
  {
    "text": "functional interface which is basically a an interface that has a single",
    "start": "740990",
    "end": "746089"
  },
  {
    "text": "abstract method one interface one abstract method what if you have an interface with two abstract methods you",
    "start": "746089",
    "end": "752420"
  },
  {
    "text": "know and that there are something like that you can't describe that with a lambda so you'll need to use an anonymous class instance or what if you",
    "start": "752420",
    "end": "758810"
  },
  {
    "text": "have something that isn't an interface what if you have something like timer task that is an abstract class you can't",
    "start": "758810",
    "end": "764630"
  },
  {
    "text": "create an instance of an abstract class with a lambda so those are times when you'll still need anonymous classes and",
    "start": "764630",
    "end": "770180"
  },
  {
    "text": "finally and this is a tricky one but it's very very important lambdas",
    "start": "770180",
    "end": "775550"
  },
  {
    "text": "cannot access themselves if you say this from inside a lambda what does it refer",
    "start": "775550",
    "end": "781519"
  },
  {
    "text": "to yell it out if you know come on you",
    "start": "781519",
    "end": "786829"
  },
  {
    "text": "guys know you're just bashful enclosing instance absolutely so the point is it",
    "start": "786829",
    "end": "792110"
  },
  {
    "text": "doesn't refer to the lambda itself it refers to the instance in which the lambda occurs and that's usually what",
    "start": "792110",
    "end": "800180"
  },
  {
    "text": "you want but it isn't always what you want and in the case for example a callback suppose you're registering a",
    "start": "800180",
    "end": "809100"
  },
  {
    "text": "callback and that callback needs to eventually remove itself needs to deregister itself it needs to talk about",
    "start": "809100",
    "end": "815009"
  },
  {
    "text": "itself it needs the vist pointer and a lambda can't get the this pointer to itself so you simply can't use a lambda",
    "start": "815009",
    "end": "821519"
  },
  {
    "text": "there that's another case we have to use an anonymous class instance or do other gymnastics all right next section is I'm",
    "start": "821519",
    "end": "830939"
  },
  {
    "text": "gonna stay here for the beginning of this section Oh is there a screen over there - sorry cameraman fairness to",
    "start": "830939",
    "end": "836430"
  },
  {
    "text": "audiences all right so right you should also prefer method references",
    "start": "836430",
    "end": "843480"
  },
  {
    "text": "to lambdas lambda generally speaking but not always lambdas are sick synced right",
    "start": "843480",
    "end": "849569"
  },
  {
    "text": "lambdas are these nice little things but metals so here's an example where you",
    "start": "849569",
    "end": "854879"
  },
  {
    "text": "know I'm taking in a map and I'm making a frequency table this one line it's",
    "start": "854879",
    "end": "860699"
  },
  {
    "text": "kind of an amazing thing makes a frequency well you had to do repeatedly",
    "start": "860699",
    "end": "865740"
  },
  {
    "text": "to make a frequency table but anyway the thing is that what I'm doing here is I have a lambda inside and because I'm",
    "start": "865740",
    "end": "872519"
  },
  {
    "text": "short on time I won't discuss the details of this but I have a lambda that takes two variables called count and",
    "start": "872519",
    "end": "877559"
  },
  {
    "text": "increment increment in this case being one and returns count plus increments so it adds one to count that's nice but how",
    "start": "877559",
    "end": "884730"
  },
  {
    "text": "about just saying integer sum I'm just saying the sum method on the integer class which is a pre-existing method",
    "start": "884730",
    "end": "891720"
  },
  {
    "text": "that takes two capital i integers and returns the capital i integer that is there some right so that's that's you",
    "start": "891720",
    "end": "898259"
  },
  {
    "text": "know even easier or even easier to read and even shorter and the more parameters",
    "start": "898259",
    "end": "903360"
  },
  {
    "text": "you have the bigger a win it is to use a method reference instead of a lambda and the reason that is is that basically the",
    "start": "903360",
    "end": "910319"
  },
  {
    "text": "lambda actually has to list each parameter explicitly whereas the method reference lists none of them so if",
    "start": "910319",
    "end": "916829"
  },
  {
    "text": "you've got you know eight parameters a method reference is a lot shorter than a lambda but if you do use a lambda you do",
    "start": "916829",
    "end": "924899"
  },
  {
    "text": "get another opportunity to do documentation in this case we have a count the previous count associated with",
    "start": "924899",
    "end": "930300"
  },
  {
    "text": "this key and the increment the amount to be added to that count there's no such documentation here so sometimes you're",
    "start": "930300",
    "end": "936750"
  },
  {
    "text": "better off using the lam because you get the opportunity to name these parameters but if you do use the",
    "start": "936750",
    "end": "942230"
  },
  {
    "text": "lambda name the parameters carefully because it's a wasted opportunity for documentation if you don't hello",
    "start": "942230",
    "end": "948410"
  },
  {
    "text": "wouldn't it be terrible to didn't work for you okay so occasionally lambdas are even more succinctly method references",
    "start": "948410",
    "end": "955790"
  },
  {
    "text": "are succeeding so for example suppose you have a short method name in a long class name it's a lot easier to just say",
    "start": "955790",
    "end": "963250"
  },
  {
    "text": "hey take no arguments and call action",
    "start": "963250",
    "end": "968290"
  },
  {
    "text": "than it is to pass a method reference to gosh this class name is humongous : :",
    "start": "968290",
    "end": "974060"
  },
  {
    "text": "action and and moreover I would argue that the lambda is also more self explanatory because it makes clear that",
    "start": "974060",
    "end": "981890"
  },
  {
    "text": "action is in scope at the point of invocation right that action is defined in this class whereas if you forget that",
    "start": "981890",
    "end": "988310"
  },
  {
    "text": "the class name is gosh this class name is humongous then if you use that method reference it could be referring to something",
    "start": "988310",
    "end": "993350"
  },
  {
    "text": "elsewhere so you know that the bottom line is there are no hard and fast rules",
    "start": "993350",
    "end": "998750"
  },
  {
    "text": "for when to use the laminate and when to use a method reference you should use whichever one is shorter and clearer lambdas can be function factories as",
    "start": "998750",
    "end": "1006610"
  },
  {
    "text": "well I'm not gonna I would run out of time if I discuss this one but there are there are you know the language provides",
    "start": "1006610",
    "end": "1012580"
  },
  {
    "text": "a function factory called function identity that returns the identity function and it turns out you're better",
    "start": "1012580",
    "end": "1017770"
  },
  {
    "text": "off typically just saying a lambda that takes X and gives X you know because it's absolutely clear what this means",
    "start": "1017770",
    "end": "1023440"
  },
  {
    "text": "whereas people might not know about this well you have a method reference or function Factory you know the",
    "start": "1023440",
    "end": "1028990"
  },
  {
    "text": "documentation is elsewhere and you have to go chase it down alright now there are five kinds of method references most",
    "start": "1028990",
    "end": "1036428"
  },
  {
    "text": "people only use one of the five well one of the five but only they don't know all",
    "start": "1036429",
    "end": "1041949"
  },
  {
    "text": "of them it's really important to know all of them all of them are useful so one of them is a static method reference",
    "start": "1041949",
    "end": "1047709"
  },
  {
    "text": "which is just a reference to a static method like integer colon colon parseint is the the parseint method on an integer",
    "start": "1047709",
    "end": "1052929"
  },
  {
    "text": "you can do a bound method reference those turn out to be extraordinarily useful and with a bound method reference",
    "start": "1052929",
    "end": "1058750"
  },
  {
    "text": "what you can do is you can provide an object on which the method reference",
    "start": "1058750",
    "end": "1064990"
  },
  {
    "text": "will always be invoked but so in this",
    "start": "1064990",
    "end": "1070330"
  },
  {
    "text": "case the the example here I use a bound method reference to kind of capture the value",
    "start": "1070330",
    "end": "1078820"
  },
  {
    "text": "returned by instant dot now and in one really short expression I have a meth a",
    "start": "1078820",
    "end": "1087010"
  },
  {
    "text": "method reference that returns true if a given time is after the time at which",
    "start": "1087010",
    "end": "1092610"
  },
  {
    "text": "the bound method reference was evaluated so these things are pretty powerful I'm a big fan of bound method references",
    "start": "1092610",
    "end": "1099270"
  },
  {
    "text": "unbound method references basically take an instance method but add the instance",
    "start": "1099270",
    "end": "1105550"
  },
  {
    "text": "as an additional parameter to that lambda so you've got one more sort of",
    "start": "1105550",
    "end": "1111310"
  },
  {
    "text": "artificial parameter that isn't in the method declaration and then class and",
    "start": "1111310",
    "end": "1117040"
  },
  {
    "text": "array constructors both have method references and those are very useful as object factories if you need to pass in",
    "start": "1117040",
    "end": "1123700"
  },
  {
    "text": "a factory to something just pass in a pointer - or I should say a reference to a constructor and you can also pass in a",
    "start": "1123700",
    "end": "1130300"
  },
  {
    "text": "ray constructor so like in cone cone new is something that takes a single value",
    "start": "1130300",
    "end": "1136210"
  },
  {
    "text": "which is the length of area to be constructed a single int value and returns an int array of that length so",
    "start": "1136210",
    "end": "1142840"
  },
  {
    "text": "that's all the different kinds of method references know them and use them all so the bottom line is that almost anything you can do with a lambda you can do with",
    "start": "1142840",
    "end": "1150700"
  },
  {
    "text": "the method reference and vice versa so you should always use whichever one is clearer and more succinct typically",
    "start": "1150700",
    "end": "1157120"
  },
  {
    "text": "that's method references but not always so use your best judgment and the best part of this all is you can change your",
    "start": "1157120",
    "end": "1163360"
  },
  {
    "text": "mind later and the reason you can change your mind later is this is just an implementation detail this does not affect the API one way or another",
    "start": "1163360",
    "end": "1171520"
  },
  {
    "text": "all right so next section is called favour standard functional interfaces so",
    "start": "1171520",
    "end": "1180090"
  },
  {
    "text": "because you know as I mentioned before the language provides a whole bunch of these new standard functional interfaces",
    "start": "1180090",
    "end": "1186330"
  },
  {
    "text": "you know I gave an example before of the one that took two doubles and returns a double so let me give you an example",
    "start": "1186330",
    "end": "1192610"
  },
  {
    "text": "where you might want to use one before lambda is the template method pattern was common a template method pattern is",
    "start": "1192610",
    "end": "1200080"
  },
  {
    "text": "do you got who knows the Gang of Four template method pattern raise your hands well some of you but not all of you so",
    "start": "1200080",
    "end": "1206290"
  },
  {
    "text": "the idea basically is that you had a class which you kind of specialized by",
    "start": "1206290",
    "end": "1211690"
  },
  {
    "text": "overriding an abstract method or a method that was you know did nothing and",
    "start": "1211690",
    "end": "1216940"
  },
  {
    "text": "acted like an abstract method so an example of a template method pattern would be the linked hash map class where",
    "start": "1216940",
    "end": "1224020"
  },
  {
    "text": "you can override a method called remove eldest entry and that that method is",
    "start": "1224020",
    "end": "1229270"
  },
  {
    "text": "called every time you insert something into the map with the the newest thing it's just sorry not with with the oldest",
    "start": "1229270",
    "end": "1236200"
  },
  {
    "text": "entry as a parameter and it gets a chance to decide whether to kick it out of the map or not whether to evict it",
    "start": "1236200",
    "end": "1241450"
  },
  {
    "text": "and this lets you write cache as easily like for instance if you override the method with something that just returns",
    "start": "1241450",
    "end": "1246700"
  },
  {
    "text": "current map size is greater than some maximum size 57 then you have a cache and LRU cache that just keeps the last",
    "start": "1246700",
    "end": "1253990"
  },
  {
    "text": "57 entries that were added to the map so that is the template method pattern in action but now you're better off using",
    "start": "1253990",
    "end": "1259930"
  },
  {
    "text": "the strategy pattern you can you can basically instead of extending a class and overriding a method you simply pass",
    "start": "1259930",
    "end": "1267670"
  },
  {
    "text": "the method into the constructor as a little bit of behavior so in this case it's that that eviction method the",
    "start": "1267670",
    "end": "1274060"
  },
  {
    "text": "remove Elvis entry method becomes instead of an abstract method on a superclass it's a parameter to a",
    "start": "1274060",
    "end": "1280810"
  },
  {
    "text": "constructor this isn't actually in Java now this is kind of pretend the way it would be who were writing the class now",
    "start": "1280810",
    "end": "1287610"
  },
  {
    "text": "you could have a linked hash map constructor that took our eldest entry removal function which is a function",
    "start": "1287610",
    "end": "1294280"
  },
  {
    "text": "that gets the eldest entry and returns true if you should kick it out false if you should leave it in and as defined",
    "start": "1294280",
    "end": "1302590"
  },
  {
    "text": "here I've actually defined an interface for this eldest entry removal function where it has a single method called",
    "start": "1302590",
    "end": "1307870"
  },
  {
    "text": "remove that takes a map from K to V and a map entry from K to V that's an",
    "start": "1307870",
    "end": "1315570"
  },
  {
    "text": "unnecessary functional interface it's ugly you don't need to define this interface you should use one of the",
    "start": "1315570",
    "end": "1321370"
  },
  {
    "text": "standard of functional interfaces instead which one should you use well",
    "start": "1321370",
    "end": "1326710"
  },
  {
    "text": "let's see the one that you should use is oh I forget and I'm gonna move on",
    "start": "1326710",
    "end": "1334600"
  },
  {
    "text": "because because time this is a shorter",
    "start": "1334600",
    "end": "1339679"
  },
  {
    "text": "short version of this talk then that I've given before but anyway so so Java has 43 standard functional interfaces",
    "start": "1339679",
    "end": "1345529"
  },
  {
    "text": "which is quite a few it's like you know here they are on the slides pretty scary right how can you possibly remember all",
    "start": "1345529",
    "end": "1352159"
  },
  {
    "text": "of these things well it's hard you can't really remember them per se but luckily",
    "start": "1352159",
    "end": "1357200"
  },
  {
    "text": "there's a lot of structure to these 43 things you can see that I've bold-faced a few of them a consumer of tea is",
    "start": "1357200",
    "end": "1363230"
  },
  {
    "text": "something that takes a tea and gives back nothing at each teas so for example you'd pass one of those as the body of a",
    "start": "1363230",
    "end": "1368539"
  },
  {
    "text": "loop and you just apply the loop body to each of the the t's it sort of consumes",
    "start": "1368539",
    "end": "1373759"
  },
  {
    "text": "them all function from T to R as a function that takes a T returns and our",
    "start": "1373759",
    "end": "1379999"
  },
  {
    "text": "predicate of T is something that takes a T and returns true or false supplier of T is something that takes nothing and",
    "start": "1379999",
    "end": "1388009"
  },
  {
    "text": "returns T's and if you remember all of these you can actually go and and finally a unary operator of T is",
    "start": "1388009",
    "end": "1395090"
  },
  {
    "text": "something that takes a T and returns another T you know so for example let's",
    "start": "1395090",
    "end": "1400190"
  },
  {
    "text": "say you're a operators on integer would be like negate or absolute value or something like that okay so basically",
    "start": "1400190",
    "end": "1407990"
  },
  {
    "text": "the idea is if you only remember the bold-faced ones and you learn the structure then you can figure out all",
    "start": "1407990",
    "end": "1415009"
  },
  {
    "text": "the others when you need them and in my book in the corresponding essay to this",
    "start": "1415009",
    "end": "1420320"
  },
  {
    "text": "I basically describe the structure well enough that I think that if you read it a couple times you'll always be able to",
    "start": "1420320",
    "end": "1425720"
  },
  {
    "text": "come up with the other one when you need it unless you're giving a talk so there",
    "start": "1425720",
    "end": "1433460"
  },
  {
    "text": "there are the six basic ones written out and we've got sort of examples of each",
    "start": "1433460",
    "end": "1438799"
  },
  {
    "text": "so string that to lowercase is a unary operator turns a string into its lowercase equivalent big integer add is",
    "start": "1438799",
    "end": "1446149"
  },
  {
    "text": "a binary operator takes to begin udders and returns they're some collection is empty is a predicate it takes a",
    "start": "1446149",
    "end": "1452179"
  },
  {
    "text": "collection returns true if and only if the collection is empty arrays dot as list is a function from T to R that",
    "start": "1452179",
    "end": "1460100"
  },
  {
    "text": "basically takes an array of T and returns a list of T and let's see",
    "start": "1460100",
    "end": "1469129"
  },
  {
    "text": "instant Kong Co now is a supplier I guess of date time you know",
    "start": "1469129",
    "end": "1475150"
  },
  {
    "text": "just returns the you call with no arguments and returns the current time and finally system got outside print",
    "start": "1475150",
    "end": "1480910"
  },
  {
    "text": "lenders consumer of TNA takes an arbitrary T and it prints it out and",
    "start": "1480910",
    "end": "1486070"
  },
  {
    "text": "heats it does you know prints it so there you go so what are the advantage why should you use these standard",
    "start": "1486070",
    "end": "1492430"
  },
  {
    "text": "functional interfaces well not just because I say so first of all it makes your API is easier to learn by reducing",
    "start": "1492430",
    "end": "1497950"
  },
  {
    "text": "the conceptual surface area you don't have to learn all these new little you know at jump types in order to use the",
    "start": "1497950",
    "end": "1503200"
  },
  {
    "text": "enclosing type because it's taking advantage of the knowledge that you already have also it provides many interoperability benefits these",
    "start": "1503200",
    "end": "1509530"
  },
  {
    "text": "functional types aren't just kind of you know random things some of them provide",
    "start": "1509530",
    "end": "1518010"
  },
  {
    "text": "methods to combine to do other interesting things with with other",
    "start": "1518010",
    "end": "1523780"
  },
  {
    "text": "elements of themselves so you know a good example is predicate is great because predicate has one method that takes another predicate and returns the",
    "start": "1523780",
    "end": "1530860"
  },
  {
    "text": "predicate that is the the end another one that returns something that is the",
    "start": "1530860",
    "end": "1538090"
  },
  {
    "text": "or of the two predicates and then there's one that returns not of the given predicate and given that you can do those by stacking them up you can get",
    "start": "1538090",
    "end": "1544930"
  },
  {
    "text": "arbitrary boolean compounds of existing predicates to form new predicates so that's that's a pretty powerful thing in",
    "start": "1544930",
    "end": "1552700"
  },
  {
    "text": "our linked hashmap example there we go I don't know why I put this all the way",
    "start": "1552700",
    "end": "1558280"
  },
  {
    "text": "over here but anyway remember I said it was coming up a bi predicate that is binary predicate a predicate that takes",
    "start": "1558280",
    "end": "1564640"
  },
  {
    "text": "two arguments whose first type is a map from K to V and whose second type is a",
    "start": "1564640",
    "end": "1570100"
  },
  {
    "text": "map entry from k2 B should be used in place of our eldest enter a removal function which was a strawman i told you",
    "start": "1570100",
    "end": "1576730"
  },
  {
    "text": "when i put it in there that you really didn't need it and shouldn't have it when shouldn't you use a standard",
    "start": "1576730",
    "end": "1582280"
  },
  {
    "text": "functional interface it turns out that there is there are absolutely times when it's wrong to use them well you can't",
    "start": "1582280",
    "end": "1588670"
  },
  {
    "text": "use one when none of the standard interfaces apply there are only 43 of them and you know 43 is not infinite if",
    "start": "1588670",
    "end": "1595000"
  },
  {
    "text": "you've got three or more arguments or it just doesn't fit into any of those patterns then you have to make your own",
    "start": "1595000",
    "end": "1600730"
  },
  {
    "text": "interface but sometimes there are cases where an existing",
    "start": "1600730",
    "end": "1605830"
  },
  {
    "text": "standard functional interface could be used and yet you shouldn't use it let's consider the case of comparator of T it",
    "start": "1605830",
    "end": "1611769"
  },
  {
    "text": "is structurally identical to an to int by that is binary function of T T but it",
    "start": "1611769",
    "end": "1620919"
  },
  {
    "text": "seems clear that it would've been wrong if the Java API is said to into by function of T T everywhere where they",
    "start": "1620919",
    "end": "1627549"
  },
  {
    "text": "say comparator that that can't be right can it no why not well several reasons",
    "start": "1627549",
    "end": "1635820"
  },
  {
    "text": "comparator is used all over the place and every time you see comparator you",
    "start": "1635820",
    "end": "1642489"
  },
  {
    "text": "know aha he's passing a sort order on two things the name you know is short",
    "start": "1642489",
    "end": "1648220"
  },
  {
    "text": "and sweet and provides useful information also there are very strong requirements I want constitutes a valid",
    "start": "1648220",
    "end": "1654940"
  },
  {
    "text": "comparator not every you know to in the by function is a comparator in order to be a comparator it has to be a total",
    "start": "1654940",
    "end": "1664330"
  },
  {
    "text": "ordering on its arguments which means it has to you know obey certain algebraic constraints and that is the general",
    "start": "1664330",
    "end": "1670869"
  },
  {
    "text": "contract of comparator you can look it up in the specs and by implementing comparator you are saying you what you",
    "start": "1670869",
    "end": "1679179"
  },
  {
    "text": "are guaranteeing to the system that you are actually obeying all of these constraints and an interface lets you do",
    "start": "1679179",
    "end": "1686289"
  },
  {
    "text": "that that is a special purpose new interface lets you do that you can sort of for each of the methods in the",
    "start": "1686289",
    "end": "1691330"
  },
  {
    "text": "interface which is only one in the case of a functional interface you can basically give a contract of what that",
    "start": "1691330",
    "end": "1697450"
  },
  {
    "text": "method is required to do just as the comparator interface does also you can",
    "start": "1697450",
    "end": "1703570"
  },
  {
    "text": "you can put you know useful default methods on your own interfaces so comparators just like predicates have",
    "start": "1703570",
    "end": "1710799"
  },
  {
    "text": "all sorts of useful operations and they have these static methods the comparator construction methods that I told you",
    "start": "1710799",
    "end": "1716799"
  },
  {
    "text": "about afterwards so you can basically load up your interface with power tools when you're writing your own interface",
    "start": "1716799",
    "end": "1722549"
  },
  {
    "text": "which don't exist necessarily on these standard functional interfaces so you",
    "start": "1722549",
    "end": "1729070"
  },
  {
    "text": "know this basically gives you a recipe for figuring out when you should write your own functional interface an",
    "start": "1729070",
    "end": "1735009"
  },
  {
    "text": "interface should you have one or more of these characteristics that comparator it should be commonly used it should",
    "start": "1735009",
    "end": "1741940"
  },
  {
    "text": "have a good descriptive name it should have a strong contract associated with valid instances of it and it could",
    "start": "1741940",
    "end": "1750400"
  },
  {
    "text": "benefit from the existence of default methods or static methods if you know a number of those four things are true",
    "start": "1750400",
    "end": "1757000"
  },
  {
    "text": "such that on balance you think it deserves its own interface then write your own interface even if there's a",
    "start": "1757000",
    "end": "1763600"
  },
  {
    "text": "pre-existing standard functional interface but if you choose to do that it is incredibly important that you",
    "start": "1763600",
    "end": "1769360"
  },
  {
    "text": "remember this a standard function sorry a functional interface is an interface",
    "start": "1769360",
    "end": "1775900"
  },
  {
    "text": "and you have to design all your interfaces very very carefully interfaces are the most fragile things",
    "start": "1775900",
    "end": "1781870"
  },
  {
    "text": "in your whole design if you get an interface wrong you know it's like all of the pre-existing implementations that",
    "start": "1781870",
    "end": "1788320"
  },
  {
    "text": "interface everything kind of has to live with it pretty much forever even though we now have the ability to add methods",
    "start": "1788320",
    "end": "1795490"
  },
  {
    "text": "to interfaces using defaults if you make a mistake in defining an interface your life will become a living hell so if",
    "start": "1795490",
    "end": "1802299"
  },
  {
    "text": "you're designing your own functional interface make sure you get it right all",
    "start": "1802299",
    "end": "1807429"
  },
  {
    "text": "right so the fourth of five sections and I should check out when my stopping time is here I've been at it for thirty",
    "start": "1807429",
    "end": "1814570"
  },
  {
    "text": "minutes I think I think we'll be okay all right so use streams judiciously so",
    "start": "1814570",
    "end": "1821950"
  },
  {
    "text": "the quick review how many people here are sort of experienced stream programmers so a lot but not everyone I",
    "start": "1821950",
    "end": "1829690"
  },
  {
    "text": "will go over this slide but I'll do it quickly um so what is this what is a stream it's basically just a whole bunch",
    "start": "1829690",
    "end": "1836080"
  },
  {
    "text": "of data objects from a collection or an array or some sort of input device in sequence doesn't say where they come",
    "start": "1836080",
    "end": "1841750"
  },
  {
    "text": "from but it's like a whole bunch of objects in sequence for bulk data processing and you do that bulk data",
    "start": "1841750",
    "end": "1848020"
  },
  {
    "text": "processing using what is called a stream pipeline a pipeline has three things it",
    "start": "1848020",
    "end": "1853390"
  },
  {
    "text": "has exactly one stream generator that is a data source that somehow returns a stream over a given type a bunch of",
    "start": "1853390",
    "end": "1861700"
  },
  {
    "text": "instances of a type and then you have zero or more intermediate stream operations the intermediate stream",
    "start": "1861700",
    "end": "1867100"
  },
  {
    "text": "operations take a stream of one type and return a stream of either the same type or another type so they basically do",
    "start": "1867100",
    "end": "1873040"
  },
  {
    "text": "some transformation on the stream they negate all the objects so they take the sums of",
    "start": "1873040",
    "end": "1878590"
  },
  {
    "text": "the prefixes you know they just do something to the data you can repeatedly do stuff do stuff do stuff",
    "start": "1878590",
    "end": "1884770"
  },
  {
    "text": "to data you know business context they typically think about you know whatever like if there are customer accounts you",
    "start": "1884770",
    "end": "1891010"
  },
  {
    "text": "might get the amount that they're in in arrears and if it's more than a certain amount you could generate you know some",
    "start": "1891010",
    "end": "1897070"
  },
  {
    "text": "sort of well the generator is the last part there's one final operation at the end of the stream after you do all these intermediate transformations then you",
    "start": "1897070",
    "end": "1903940"
  },
  {
    "text": "take the results of the transformation which is still a tree a stream of tea and you consume it you do something with",
    "start": "1903940",
    "end": "1910000"
  },
  {
    "text": "it and typically you turn it into something else so you might just print",
    "start": "1910000",
    "end": "1915010"
  },
  {
    "text": "it out as in turn it into you know some some text on a screen or in a GUI or you",
    "start": "1915010",
    "end": "1922030"
  },
  {
    "text": "could turn it into a collection there are things called collectors which are a standard set of terminal stream operations which turn streams into",
    "start": "1922030",
    "end": "1929410"
  },
  {
    "text": "appropriate collections and this supports what they call mostly functional data processing it's kind of",
    "start": "1929410",
    "end": "1934570"
  },
  {
    "text": "like you know functional programming except not not necessarily all the way there it also enables painless",
    "start": "1934570",
    "end": "1939730"
  },
  {
    "text": "parallelism you can just say dot parallel on your stream and all of a sudden as if by wizardry this dream",
    "start": "1939730",
    "end": "1945340"
  },
  {
    "text": "execute in parallel and you may or may not see a performance improvement more",
    "start": "1945340",
    "end": "1950380"
  },
  {
    "text": "on that in section 5 so here's a little example suppose you want to compute the first 20 Mersenne primes to review for",
    "start": "1950380",
    "end": "1958870"
  },
  {
    "text": "people who aren't math majors a Mersenne number is a number of the form 2 to the P plus 1 power of 2 sorry minus 1 power",
    "start": "1958870",
    "end": "1965560"
  },
  {
    "text": "of 2 minus 1 is a Mersenne number and if the exponent P is a prime some of these",
    "start": "1965560",
    "end": "1972580"
  },
  {
    "text": "Mersenne numbers are in fact primes and those are called Mersenne Prime's so 2 to the 0 is 1 minus 1 is 0 that's not a",
    "start": "1972580",
    "end": "1978220"
  },
  {
    "text": "Mersenne prime but 2 to the 1 is 2 let's do 2 squared is 4 minus 1 is 3 which is",
    "start": "1978220",
    "end": "1983560"
  },
  {
    "text": "prime 2 cubed is 8 minus 1 is 7 which is prime so you know 3 & 7 are Mersenne",
    "start": "1983560",
    "end": "1989590"
  },
  {
    "text": "primes and it turns out that there are a bunch of Mersenne Prime's which got mathematicians very excited you know",
    "start": "1989590",
    "end": "1995140"
  },
  {
    "text": "back in the 1500s but then they realized that not all these Mersenne numbers were",
    "start": "1995140",
    "end": "2000480"
  },
  {
    "text": "Prime's and you know anyway it's still interesting from a number theoretic perspective so suppose as I said that we",
    "start": "2000480",
    "end": "2007020"
  },
  {
    "text": "want to print the first 20 it turns out that it's very easy to do that using streams so here's how we're gonna do it first",
    "start": "2007020",
    "end": "2012120"
  },
  {
    "text": "we're going to write a method that returns a stream of all the primes whoa",
    "start": "2012120",
    "end": "2017490"
  },
  {
    "text": "you may say a stream of all the primes how can you do that that's infinitely long well it is but the lovely thing",
    "start": "2017490",
    "end": "2024570"
  },
  {
    "text": "about streams is they're evaluated lazily right you know you basically you pull data out of a stream every time you",
    "start": "2024570",
    "end": "2031020"
  },
  {
    "text": "need another item from it you say give me the next item they say this happens under the covers this is done by the stream processing",
    "start": "2031020",
    "end": "2036860"
  },
  {
    "text": "library and so that means it's perfectly okay to have a stream whose length is",
    "start": "2036860",
    "end": "2042120"
  },
  {
    "text": "infinite so in this case this is a simple little one-line function here called primes actually returns a stream",
    "start": "2042120",
    "end": "2048030"
  },
  {
    "text": "of all the primes and how does it look it returns stream iterate that is a static factory method in stream that",
    "start": "2048030",
    "end": "2056129"
  },
  {
    "text": "generates a stream and the first thing you pass in is the initial value of the stream so the first thing we were",
    "start": "2056130",
    "end": "2061409"
  },
  {
    "text": "returning is big integer dot - I'm assuming we've statically imported all the big integer stuff because it makes",
    "start": "2061410",
    "end": "2067770"
  },
  {
    "text": "these examples fit on a slide so the first thing we return is - and the next one we return is the result of applying",
    "start": "2067770",
    "end": "2074100"
  },
  {
    "text": "big integer dot next probable prime to the previous thing so if you call next probable prime on 2 you get 3 if you",
    "start": "2074100",
    "end": "2080850"
  },
  {
    "text": "caught on through you get 5 on 5 you get 7 you know on 7 you get I guess 11 and",
    "start": "2080850",
    "end": "2086280"
  },
  {
    "text": "so forth basically this just is a a stream that runs through all of the primes but we don't want all the primes",
    "start": "2086280",
    "end": "2092340"
  },
  {
    "text": "we want all the Mersenne primes so how do I convert the this stream into a",
    "start": "2092340",
    "end": "2098730"
  },
  {
    "text": "stream of the Mersenne primes well first I map each of the primes to 2 to the",
    "start": "2098730",
    "end": "2106530"
  },
  {
    "text": "value 2 2 to that power and I subtract 1 right so that gets me the Mersenne number not Mersenne prime but Mersenne",
    "start": "2106530",
    "end": "2113250"
  },
  {
    "text": "number corresponding to that prime and then I filter the Mersenne numbers using",
    "start": "2113250",
    "end": "2118950"
  },
  {
    "text": "more send out is probable prime of 50 I apologise for 50 I apologize twice first I apologize because it's a magic number",
    "start": "2118950",
    "end": "2125520"
  },
  {
    "text": "in this program magic numbers are bad but the real apology is I wrote this API and you never should have had to pass it",
    "start": "2125520",
    "end": "2131910"
  },
  {
    "text": "in the first place you know so double my bad but anyway this thing here is just a",
    "start": "2131910",
    "end": "2138810"
  },
  {
    "text": "predicate that returns true it that's passed in is probably Prime we're probably in this case means certainly",
    "start": "2138810",
    "end": "2144720"
  },
  {
    "text": "it'll return true if it's prime otherwise it'll return false and then dot limit 20 just says and give me only",
    "start": "2144720",
    "end": "2150690"
  },
  {
    "text": "the first elements first 20 elements on this stream once you hit 20 stop right so if you",
    "start": "2150690",
    "end": "2156840"
  },
  {
    "text": "look at this thing the the stream generator here is the invocation of",
    "start": "2156840",
    "end": "2162660"
  },
  {
    "text": "primes and then I have an intermediate operation to map them to the Mersenne numbers another intermediate operation",
    "start": "2162660",
    "end": "2168930"
  },
  {
    "text": "to filter them or send numbers to Mersenne Prime's another intermediate operation to throw away everything after",
    "start": "2168930",
    "end": "2175770"
  },
  {
    "text": "the 20th and then finally I have a terminal operation which is the for each operation that simply applies a consumer",
    "start": "2175770",
    "end": "2183090"
  },
  {
    "text": "to every element of the stream and in this case the elements of the Mersenne primes and the consumer that I apply is system dot out dot print one so this",
    "start": "2183090",
    "end": "2189750"
  },
  {
    "text": "little four line program does in fact print the first twenty Mersenne primes great right so there's your introduction",
    "start": "2189750",
    "end": "2195660"
  },
  {
    "text": "to streams and let's see here now that's part of I'm wondering about time let me",
    "start": "2195660",
    "end": "2202170"
  },
  {
    "text": "how much time do I have left I'm gonna go check thirteen minutes all right so",
    "start": "2202170",
    "end": "2211260"
  },
  {
    "text": "I'm gonna rush a little over this section because I want you to enjoy the final section because it's fun",
    "start": "2211260",
    "end": "2216780"
  },
  {
    "text": "but anyway so here's an iterative approach to computing all the anagram groups in a dictionary you know in an",
    "start": "2216780",
    "end": "2223230"
  },
  {
    "text": "anagram is when two words are the same letters in a different order like stop and Potts and opts so if you want to",
    "start": "2223230",
    "end": "2228810"
  },
  {
    "text": "compute all the anagram groups in a dictionary the best way to do it is to",
    "start": "2228810",
    "end": "2234240"
  },
  {
    "text": "make a map which maps every words alpha gram you alphabetize the letters in the",
    "start": "2234240",
    "end": "2240150"
  },
  {
    "text": "word and you map the alpha gram to a set of all the words sharing an alpha gram",
    "start": "2240150",
    "end": "2246330"
  },
  {
    "text": "so for example you know t.o.p s",
    "start": "2246330",
    "end": "2251360"
  },
  {
    "text": "well it's that's o p st honest all of those things all of the anagrams have",
    "start": "2251720",
    "end": "2257880"
  },
  {
    "text": "the same alpha gram that is my alphabetize any of these things it basically permits the letter into the",
    "start": "2257880",
    "end": "2263430"
  },
  {
    "text": "same order which is alphabetical order all right so if you look at this program what does it do you know I get a I have",
    "start": "2263430",
    "end": "2269760"
  },
  {
    "text": "a file it's called dictionary a minimum group size that I'm interested in and then a map from the alpha gram to",
    "start": "2269760",
    "end": "2278589"
  },
  {
    "text": "the set of strings that are the anagrams of that alpha gram then I make a scanner over the dictionary notice that I'm",
    "start": "2278589",
    "end": "2284650"
  },
  {
    "text": "doing it using one of these try with resources try with resources is great",
    "start": "2284650",
    "end": "2290050"
  },
  {
    "text": "you should always use it but I'm not talking about it today and then while there's anything left in",
    "start": "2290050",
    "end": "2295119"
  },
  {
    "text": "the scanner so I'm reading all the words in the dictionary one at a time I get the next word out of the dictionary and",
    "start": "2295119",
    "end": "2301329"
  },
  {
    "text": "I call computer absent this is a new method and it's wonderful it basically looks something up in the map and either",
    "start": "2301329",
    "end": "2309400"
  },
  {
    "text": "returns what it found so if there's already an anagram group for that alpha gram it just returns it or it invokes on",
    "start": "2309400",
    "end": "2318069"
  },
  {
    "text": "a method that's passed in typically a lambda and returns that so in this case if there's a you know we get we ultimate",
    "start": "2318069",
    "end": "2324069"
  },
  {
    "text": "eyes the word look it up and if there's already a set we simply return that set and otherwise there was no set so we",
    "start": "2324069",
    "end": "2329890"
  },
  {
    "text": "return a nutri set right so either way we get a set and then we simply add the word to that set so we basically",
    "start": "2329890",
    "end": "2336040"
  },
  {
    "text": "accumulate the all the words in the dictionary into the appropriate sets of",
    "start": "2336040",
    "end": "2341230"
  },
  {
    "text": "anagrams and then when we're all done we iterate over all of these anagram groups",
    "start": "2341230",
    "end": "2347589"
  },
  {
    "text": "and if the size of a group what's the minimum group size that we'll ever see in here by the way one exactly if",
    "start": "2347589",
    "end": "2355060"
  },
  {
    "text": "something has no anagrams we'll see one but anyway if it's big enough if it's bigger than mini group size which was passed in to a command line of this",
    "start": "2355060",
    "end": "2360730"
  },
  {
    "text": "program then we printed out both the group size and the group that's it so",
    "start": "2360730",
    "end": "2366790"
  },
  {
    "text": "it's kind of neat right this is I love this about the collections API that this program which takes something like a whole chapter in in the STL guide is one",
    "start": "2366790",
    "end": "2374800"
  },
  {
    "text": "slide using collections and here's the helper function to alphabetize a word it's totally straightforward you dump",
    "start": "2374800",
    "end": "2381099"
  },
  {
    "text": "the string into a car a car or a sword it using arrays dot sort and then you return a new string whose characters are",
    "start": "2381099",
    "end": "2386920"
  },
  {
    "text": "those characters and that's it that will actually run so suppose you want to do it all with streams and lambdas how does",
    "start": "2386920",
    "end": "2394180"
  },
  {
    "text": "it look it looks like this it looks incredibly ugly it's unreadable and because I'm rushing we're not even gonna",
    "start": "2394180",
    "end": "2399280"
  },
  {
    "text": "look at it at all I'll just say you don't want to do it this way this is an example of streams gone crazy this is an",
    "start": "2399280",
    "end": "2405819"
  },
  {
    "text": "example something that's to stream me for its own good and so what do you do does that",
    "start": "2405819",
    "end": "2412009"
  },
  {
    "text": "mean you should you should do it the old way the answer is no there's a happy medium here it is look at this nice short little program let's let's",
    "start": "2412009",
    "end": "2418670"
  },
  {
    "text": "actually go over it a line at a time and because I want to finish in the middle I'm gonna do that over here sorry guys",
    "start": "2418670",
    "end": "2423799"
  },
  {
    "text": "um so a first line we say hey you know get the the file path that is described",
    "start": "2423799",
    "end": "2432109"
  },
  {
    "text": "by the first argument so that'll the argument will be like you know slash whatever my dictionary anyway then get",
    "start": "2432109",
    "end": "2438589"
  },
  {
    "text": "the minimum group size from the second argument and then try on a stream which",
    "start": "2438589",
    "end": "2444170"
  },
  {
    "text": "we get like long files dot lines of dictionary so files dot lines is a wonderful thing that you should all know about it basically returns a stream of",
    "start": "2444170",
    "end": "2451400"
  },
  {
    "text": "strings which are all of the lines in the given file ain't that great it's much easier to process files with",
    "start": "2451400",
    "end": "2457189"
  },
  {
    "text": "streams than it was before and then for each of the words we collect the word",
    "start": "2457189",
    "end": "2463869"
  },
  {
    "text": "grouping it by the function that we get by alphabetizing the word so in essence the alphabetize the word and you collect",
    "start": "2463869",
    "end": "2471259"
  },
  {
    "text": "it and that actually gives you the stream that you want I mean that you're done that line after you do that you",
    "start": "2471259",
    "end": "2477380"
  },
  {
    "text": "already have a stream from you know which is basically is a sorry you don't",
    "start": "2477380",
    "end": "2485359"
  },
  {
    "text": "have a stream you have a collection which Maps you from the alpha gram to the anagram group and then we call dot",
    "start": "2485359",
    "end": "2492589"
  },
  {
    "text": "values so that gives us you know I've thrown away the alphabetized words",
    "start": "2492589",
    "end": "2498679"
  },
  {
    "text": "because I don't need those all I near are the groups so now I have basically a collection of groups and then I make",
    "start": "2498679",
    "end": "2505130"
  },
  {
    "text": "another stream out of that right so I went from stream to collection back to Street this is a stream of the anagram",
    "start": "2505130",
    "end": "2510410"
  },
  {
    "text": "groups and I filter based on the group size of the group size greater than the minimum I let it pass otherwise I don't",
    "start": "2510410",
    "end": "2515929"
  },
  {
    "text": "and finally I call for each for all the ones that are sufficiently large",
    "start": "2515929",
    "end": "2522859"
  },
  {
    "text": "I invoke this method which basically prints out the group size and the group so that's it you know now takes only",
    "start": "2522859",
    "end": "2529519"
  },
  {
    "text": "half a slide what used to take a full slide and I think it's you know it's pretty gorgeous um",
    "start": "2529519",
    "end": "2534769"
  },
  {
    "text": "notice by the way that I'm still calling alphabetize of word why am i doing that",
    "start": "2534769",
    "end": "2540200"
  },
  {
    "text": "well the reason is that streams don't offer direct support for chars it would",
    "start": "2540200",
    "end": "2546230"
  },
  {
    "text": "be really ugly and confusing if I tried to do this using streams I do in that",
    "start": "2546230",
    "end": "2552290"
  },
  {
    "text": "first ugly example and you can go back to it in the slides if you want to see how it looks but don't do it it's more difficult to read it's more difficult to",
    "start": "2552290",
    "end": "2557960"
  },
  {
    "text": "write and it's probably slower if you don't believe that you shouldn't use streams on characters I got a little puzzler for you here it is so I have a",
    "start": "2557960",
    "end": "2565819"
  },
  {
    "text": "program here it has the string hello world and then it calls dot chars which",
    "start": "2565819",
    "end": "2571609"
  },
  {
    "text": "returns a stream of the chars in the world word the string and then for each",
    "start": "2571609",
    "end": "2577190"
  },
  {
    "text": "of these chars I call system dot out dot print so what do you guys think it prints ASCII characters what would chat",
    "start": "2577190",
    "end": "2584839"
  },
  {
    "text": "see ASCII characters hello world this program looks for all the world like it",
    "start": "2584839",
    "end": "2590750"
  },
  {
    "text": "should print out hello world but what does it actually print out this garbage why does it print out this garbage",
    "start": "2590750",
    "end": "2598750"
  },
  {
    "text": "because of chars this thing called chars on a string actually returns a stream of",
    "start": "2598750",
    "end": "2605690"
  },
  {
    "text": "int because there is no such thing as a stream of char you know the library would have been too big and too",
    "start": "2605690",
    "end": "2611569"
  },
  {
    "text": "complicated if they had had strings on every primitive type so they just picked the most important ones which are you",
    "start": "2611569",
    "end": "2618230"
  },
  {
    "text": "know in sand doubles and Long's and you have streams of those and if you're not one of those well sorry you use the best",
    "start": "2618230",
    "end": "2623960"
  },
  {
    "text": "major type and if you want it to actually print out the right thing then",
    "start": "2623960",
    "end": "2631700"
  },
  {
    "text": "what you have to do is you have to cast but int back to a char before you do the",
    "start": "2631700",
    "end": "2638569"
  },
  {
    "text": "print so this version actually prints hello world so the moral here is that strings are really only for in long and",
    "start": "2638569",
    "end": "2644359"
  },
  {
    "text": "double the rest of the parameters are missing so just don't use your strings for string processing so here's a",
    "start": "2644359",
    "end": "2650510"
  },
  {
    "text": "conundrum and this one I want to do really quickly but we have two different methods each of which return like all of",
    "start": "2650510",
    "end": "2660290"
  },
  {
    "text": "the elements from Group a map you know so cross product with an element from Group B so basically suppose I want",
    "start": "2660290",
    "end": "2667490"
  },
  {
    "text": "every possible card in a deck I can just iterate over all the suits iterate over",
    "start": "2667490",
    "end": "2673069"
  },
  {
    "text": "all the and then add to the resulting deck a new card of suit comma rank you've all seen that before I thought",
    "start": "2673069",
    "end": "2678490"
  },
  {
    "text": "it's a standard nested loop below it I had the stream equivalent where I get a stream of the suit values and then I",
    "start": "2678490",
    "end": "2685120"
  },
  {
    "text": "flat map it using a mapping from the suit to a stream of the rank values and then I map that to a mapping from the",
    "start": "2685120",
    "end": "2693070"
  },
  {
    "text": "rank to a new card of suit comma rank so we have a nested lambda here we have the flat map construct here in fact it's a",
    "start": "2693070",
    "end": "2699670"
  },
  {
    "text": "doubly nested lambda what we're doing is something called currying if you're into functional programming so my question",
    "start": "2699670",
    "end": "2706420"
  },
  {
    "text": "for you guys is which one of these two things is better which is the better way to get a deck of cards to get a",
    "start": "2706420",
    "end": "2712060"
  },
  {
    "text": "cross-product of a Cartesian product of two sets do you prefer the iterative one",
    "start": "2712060",
    "end": "2718740"
  },
  {
    "text": "yeah so we got maybe a third of you do you prefer the the you know streaming",
    "start": "2718740",
    "end": "2725110"
  },
  {
    "text": "one oh God just a few of you so most of you aren't answering anyway I do not",
    "start": "2725110",
    "end": "2730630"
  },
  {
    "text": "think either of the answer is necessarily correct I think it depends on who you're working with if you're like hardcore functional",
    "start": "2730630",
    "end": "2736060"
  },
  {
    "text": "programmers by all means use the second one you know if you will come from a",
    "start": "2736060",
    "end": "2741210"
  },
  {
    "text": "more procedural universe use the first one without a doubt everyone can understand the first one you know the",
    "start": "2741210",
    "end": "2747310"
  },
  {
    "text": "second one may be a little bit shorter and it may be more comfortable for you there's no correct answer here do what feels right all right so the bottom line",
    "start": "2747310",
    "end": "2755050"
  },
  {
    "text": "is streams are great for many things but they're not a panacea when you first learn you might want to convert everything to streams but don't do it",
    "start": "2755050",
    "end": "2760900"
  },
  {
    "text": "you may make a short code shorter but it sure as hell won't make it clearer so exercise good judgment properly used",
    "start": "2760900",
    "end": "2767950"
  },
  {
    "text": "streams can make your programs both shorter and clearer most programs of any",
    "start": "2767950",
    "end": "2773680"
  },
  {
    "text": "length will combine iteration and streaming you still need both of them and you need the judgment to know when",
    "start": "2773680",
    "end": "2779500"
  },
  {
    "text": "to use which and if you buy my book I'll teach you as best I can it's not always clear at the outset",
    "start": "2779500",
    "end": "2785680"
  },
  {
    "text": "which to use so often what you have to do is just code it up and see which works better all right one last very",
    "start": "2785680",
    "end": "2791110"
  },
  {
    "text": "short section so remember that Mersenne prime program that I showed you one section back when I run it on my quad",
    "start": "2791110",
    "end": "2800830"
  },
  {
    "text": "core desktop machine it runs in 12 and a half seconds that's pretty good",
    "start": "2800830",
    "end": "2807440"
  },
  {
    "text": "right you know because it's 20 Mersenne problems they get pretty darn long by the time you get to the 20th 112 seconds",
    "start": "2807440",
    "end": "2812510"
  },
  {
    "text": "let's suppose I run it in parallel I just had dot peril how long do you think it will take to run sixty seconds so you",
    "start": "2812510",
    "end": "2822200"
  },
  {
    "text": "think it'll be longer by a factor of five could could be the same time though how many people think about the same",
    "start": "2822200",
    "end": "2828170"
  },
  {
    "text": "time so about the same time maybe half of you how many people think shorter",
    "start": "2828170",
    "end": "2833540"
  },
  {
    "text": "that you still actually buy you something maybe an eighth of you all right so here's what it does it turns out that",
    "start": "2833540",
    "end": "2841369"
  },
  {
    "text": "it runs very very slowly after half an hour I gave up and my room was considerably hotter like all eight cores",
    "start": "2841369",
    "end": "2848329"
  },
  {
    "text": "I started all four cores eight hyper threads of my machine had been pumping away for half an hour and it blew a lot",
    "start": "2848329",
    "end": "2855140"
  },
  {
    "text": "of hot air into my room but it didn't print out anything so what happened why did it run so slowly it turns out that",
    "start": "2855140",
    "end": "2861829"
  },
  {
    "text": "the streams library has no idea how to paralyze that program and all of the heuristics fail miserably even in the",
    "start": "2861829",
    "end": "2869119"
  },
  {
    "text": "best case it turns out that a stream the dot powell isn't likely to run well over",
    "start": "2869119",
    "end": "2874609"
  },
  {
    "text": "a stream that you got using streamed iterate or if you use limit and this one",
    "start": "2874609",
    "end": "2879650"
  },
  {
    "text": "does both it uses iterate to get the thing and then limit to say oh I only",
    "start": "2879650",
    "end": "2884990"
  },
  {
    "text": "need the first 20 and this absolutely isn't the best case this is the Coupe de Grasse the thing about you know like",
    "start": "2884990",
    "end": "2894190"
  },
  {
    "text": "calculating Mersenne primes is that each one takes as long as the sum of all the",
    "start": "2894190",
    "end": "2899359"
  },
  {
    "text": "previous ones to calculate right so basically calculating one more doubles the run time and it turns out that the",
    "start": "2899359",
    "end": "2906050"
  },
  {
    "text": "ordinary heuristics say well we don't know how many calculates so we'll just calculate a bunch and you know then we'll trim it down to what we needed if",
    "start": "2906050",
    "end": "2912500"
  },
  {
    "text": "you calculate even one more you've doubled the time so you're just dead and the moral here is do not use dot",
    "start": "2912500",
    "end": "2919579"
  },
  {
    "text": "parallel indiscriminately only use it if you have reason to believe it will make your program run faster when does it",
    "start": "2919579",
    "end": "2925670"
  },
  {
    "text": "work well well it works well do I have like two more minutes or one more minute or something timekeeper one minute okay",
    "start": "2925670",
    "end": "2932390"
  },
  {
    "text": "so it works well if the set is predictably slipstream is particularly splittable and if you use an appropriate",
    "start": "2932390",
    "end": "2939380"
  },
  {
    "text": "terminal operation and you know happy ending to this story is here's something to calculate PI of n the",
    "start": "2939380",
    "end": "2946290"
  },
  {
    "text": "number of primes less than n take 31 seconds on my machine if I parallel eyes it it runs in you know 9.2 seconds which",
    "start": "2946290",
    "end": "2956280"
  },
  {
    "text": "is three point seven times as fast on a 4 processor machine so I'm basically getting linear speed-up so if you use",
    "start": "2956280",
    "end": "2961830"
  },
  {
    "text": "parallel appropriately and that is very very very rarely then it can actually make things fast but parallel is very",
    "start": "2961830",
    "end": "2968280"
  },
  {
    "text": "dangerous it's merely an optimization don't use it unless you think it's going to help alright in conclusion Java is",
    "start": "2968280",
    "end": "2973530"
  },
  {
    "text": "now larger and more complex than it ever was before that's a bad thing it is now a multi paradigm language in",
    "start": "2973530",
    "end": "2979800"
  },
  {
    "text": "the words of be honest truth strip and now you have to know not just how to use",
    "start": "2979800",
    "end": "2985080"
  },
  {
    "text": "the features but which of the competing features to use lambdas and streams can be a big win but only if you use them",
    "start": "2985080",
    "end": "2991230"
  },
  {
    "text": "judiciously with great power comes great responsibility here's the book if you want to buy it if",
    "start": "2991230",
    "end": "2997500"
  },
  {
    "text": "you use this code block nine nine one you'll save 35% at informant calm it",
    "start": "2997500",
    "end": "3004130"
  },
  {
    "text": "should say yeah but also check out Amazon because I think that might be cheaper if you got questions asked me",
    "start": "3004130",
    "end": "3009230"
  },
  {
    "text": "outside thank you very much",
    "start": "3009230",
    "end": "3012430"
  }
]