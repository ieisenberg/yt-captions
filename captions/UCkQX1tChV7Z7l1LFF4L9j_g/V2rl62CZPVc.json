[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "2579"
  },
  {
    "text": "hi I'm I'm Josh seret um I'm one of the Nerds at typ safe that works on Scala uh",
    "start": "17840",
    "end": "23800"
  },
  {
    "text": "I wrote a book on Scala that should be released soon um it's amazing how long",
    "start": "23800",
    "end": "29160"
  },
  {
    "text": "it takes to release pie a book uh it's called scal in depth um it does not covert uh but that's what we'll be",
    "start": "29160",
    "end": "35800"
  },
  {
    "text": "talking about tonight so this talk is geared to to give you an introduction to",
    "start": "35800",
    "end": "42200"
  },
  {
    "start": "38000",
    "end": "141000"
  },
  {
    "text": "the concepts behind spt how it works um why you have keys why you have these",
    "start": "42200",
    "end": "48559"
  },
  {
    "text": "initial eyes and tasks and that sort of thing and uh the general concepts behind how you construct to build an SBT and",
    "start": "48559",
    "end": "55719"
  },
  {
    "text": "then we're going to go over a few examples of cookbook like things for how you can do some complicated stuff in",
    "start": "55719",
    "end": "60960"
  },
  {
    "text": "your own build um so the basics first off um inbt",
    "start": "60960",
    "end": "67960"
  },
  {
    "text": "you define a build by creating a uh Scola file in the project directory um",
    "start": "67960",
    "end": "74040"
  },
  {
    "text": "you import SBT and you extend the build class um inside of the build class you",
    "start": "74040",
    "end": "81720"
  },
  {
    "text": "define a whole bunch of projects the projects can be local or they can be remote spt can actually um materialize",
    "start": "81720",
    "end": "89640"
  },
  {
    "text": "project projects from git and build them inside of a Sandbox for you and you can",
    "start": "89640",
    "end": "94880"
  },
  {
    "text": "depend on them and uh add settings to them and all sorts of craziness um I actually use this a lot it's not a it's",
    "start": "94880",
    "end": "102320"
  },
  {
    "text": "more a more advanced thing but it it is very handy um projects are a sequence of",
    "start": "102320",
    "end": "109920"
  },
  {
    "text": "settings so again if we look at this build project projects are made up of",
    "start": "109920",
    "end": "116360"
  },
  {
    "text": "settings a setting is a key and initialization pair right so a key is a",
    "start": "116360",
    "end": "123360"
  },
  {
    "text": "name an initialization is um you know like a value or something that computes",
    "start": "123360",
    "end": "128520"
  },
  {
    "text": "a value so we'll get into that more but this is the essential structure of spt everything in spt hinges on this basic",
    "start": "128520",
    "end": "135360"
  },
  {
    "text": "concept build project settings",
    "start": "135360",
    "end": "140879"
  },
  {
    "text": "okay here's an example build um I might start pointing this way yeah nice I like",
    "start": "140879",
    "end": "147800"
  },
  {
    "start": "141000",
    "end": "297000"
  },
  {
    "text": "that all right so um here I I Define an object my build I've",
    "start": "147800",
    "end": "154280"
  },
  {
    "text": "defined one project called um Scala awesoms um this project is located uh if",
    "start": "154280",
    "end": "162000"
  },
  {
    "text": "I move this um in the current directory so uh although my build file is in a",
    "start": "162000",
    "end": "167920"
  },
  {
    "text": "projectb build. Scala file the uh root directory is considered the root of the",
    "start": "167920",
    "end": "173120"
  },
  {
    "text": "project that's what that dot refers to um and when I Define a project there is",
    "start": "173120",
    "end": "178640"
  },
  {
    "text": "a settings uh method that I can call on projects to add settings to the defaults okay SBT",
    "start": "178640",
    "end": "187360"
  },
  {
    "text": "comes out of the box with a whole bunch of default settings that should do the right thing for a lot of Open Source projects it may not do the right thing",
    "start": "187360",
    "end": "194360"
  },
  {
    "text": "for you or it might not have enough so you have to add",
    "start": "194360",
    "end": "199400"
  },
  {
    "text": "configuration and that's what this uh method does what I'm doing here is I'm setting the organization in the name for",
    "start": "199400",
    "end": "205599"
  },
  {
    "text": "those of us from Maven like me uh organization is group ID and name I",
    "start": "205599",
    "end": "210959"
  },
  {
    "text": "believe is name so anyway uh you can also specify version and things there um",
    "start": "210959",
    "end": "217840"
  },
  {
    "text": "this next method call here is a dependson method call I'm using a little bit of uh simplified syntax to make this",
    "start": "217840",
    "end": "223760"
  },
  {
    "text": "fit on the slide well so this is the opening part of that settings call here's the closing part um just so",
    "start": "223760",
    "end": "229840"
  },
  {
    "text": "you're aware of how that flows um anyway so I'm depending on another project arm",
    "start": "229840",
    "end": "235640"
  },
  {
    "text": "this is a project this is a uh a subtle hint that I wrote another uh project",
    "start": "235640",
    "end": "240720"
  },
  {
    "text": "that is actually useful anyway scy arm it's there's the GitHub URL right I'm",
    "start": "240720",
    "end": "246640"
  },
  {
    "text": "defining this as root project root project is a special um",
    "start": "246640",
    "end": "252319"
  },
  {
    "text": "class inbt uh that denotes that this the the URI that I reference here or the file",
    "start": "252319",
    "end": "258799"
  },
  {
    "text": "that I reference here is has its own build and when you pull this in you need to pull in that other build as well um",
    "start": "258799",
    "end": "265320"
  },
  {
    "text": "so I'm literally pulling down things out of GitHub uh compiling the project for arm and then I",
    "start": "265320",
    "end": "274360"
  },
  {
    "text": "am attaching this as a dependency to scyla awesome project I can even do more",
    "start": "274360",
    "end": "279600"
  },
  {
    "text": "things like um you know append settings and change the config that I've pulled in um but that's that's more advanced um",
    "start": "279600",
    "end": "287039"
  },
  {
    "text": "the basic is that if you want to depend via Source in spt it's possible um the",
    "start": "287039",
    "end": "294160"
  },
  {
    "text": "the yeah the whole system kind of scales that way the core of spt is is the setting a",
    "start": "294160",
    "end": "301759"
  },
  {
    "start": "297000",
    "end": "364000"
  },
  {
    "text": "setting is a key and an initialization um you saw earlier in this build that I",
    "start": "301759",
    "end": "307240"
  },
  {
    "text": "set name and then I have this funny colon equals method and then a value",
    "start": "307240",
    "end": "312880"
  },
  {
    "text": "right so keys are um objects in Scala I",
    "start": "312880",
    "end": "317960"
  },
  {
    "text": "am referencing name from the spt dokeys object here I have imported sp. keys.",
    "start": "317960",
    "end": "324800"
  },
  {
    "text": "uncore name is a member of keys um I'm following a colon equals method which",
    "start": "324800",
    "end": "332400"
  },
  {
    "text": "takes a key and takes an initialization value on the right hand side Associates them and becomes a setting okay so in",
    "start": "332400",
    "end": "340360"
  },
  {
    "text": "spt all settings are I have a key I have some sort of assignment operator that",
    "start": "340360",
    "end": "346560"
  },
  {
    "text": "determines uh exactly how I'm going to associate an initialization value and then on the right hand side I have an",
    "start": "346560",
    "end": "352280"
  },
  {
    "text": "initialization value okay that's how everything in spt operates there are",
    "start": "352280",
    "end": "357520"
  },
  {
    "text": "several types of these there are bajillion types of keys and initializations are up to you know what",
    "start": "357520",
    "end": "363120"
  },
  {
    "text": "you write so um key types we have three key",
    "start": "363120",
    "end": "369000"
  },
  {
    "start": "364000",
    "end": "538000"
  },
  {
    "text": "types we have a setting key um it's confusing that we call these settings",
    "start": "369000",
    "end": "374560"
  },
  {
    "text": "and we also have setting keys but anyway setting keys are things that when the build loads and we resolve dependencies",
    "start": "374560",
    "end": "382039"
  },
  {
    "text": "and and run the initialization then that setting is done it's kind of like defining a value in Scala right that",
    "start": "382039",
    "end": "388520"
  },
  {
    "text": "value is initialized and doesn't change unless we reload the build um so settings are things like name version",
    "start": "388520",
    "end": "395080"
  },
  {
    "text": "organization um and they're supposed to stay the same uh tasks are things that",
    "start": "395080",
    "end": "400240"
  },
  {
    "text": "are recomputed every time you run them in the build so a task is something like compile um when I run compile I need to",
    "start": "400240",
    "end": "407479"
  },
  {
    "text": "go look at your Source figure out what's changed compile uh compile that code and then you know return some result um and",
    "start": "407479",
    "end": "416479"
  },
  {
    "text": "then there are also input keys for example spt has a run main um input key",
    "start": "416479",
    "end": "423560"
  },
  {
    "text": "uh run main basically takes user input in the S spt console uses that to",
    "start": "423560",
    "end": "429319"
  },
  {
    "text": "generate a task which then runs okay so an input key is a task",
    "start": "429319",
    "end": "435560"
  },
  {
    "text": "generator um anyway I hope I'm not going too fast with some of that stuff it hopefully",
    "start": "435560",
    "end": "442599"
  },
  {
    "text": "it'll a little bit this will be a little bit more apparent when we hit assignments",
    "start": "442599",
    "end": "447759"
  },
  {
    "text": "um as far as how I can can assign things I have a direct assignment um for for",
    "start": "447759",
    "end": "454039"
  },
  {
    "text": "the name key which is a setting I can use that colon equals and have a value",
    "start": "454039",
    "end": "459280"
  },
  {
    "text": "on the right hand side that assigns to the name right so that's a setting that will set it to name no matter what was",
    "start": "459280",
    "end": "465560"
  },
  {
    "text": "there previously name will now be Foo after that setting takes place okay uh I",
    "start": "465560",
    "end": "471560"
  },
  {
    "text": "can have a dependent setting this little uh Das Das equal or less than less than",
    "start": "471560",
    "end": "477879"
  },
  {
    "text": "equals operator is dependent setting so what this what this says is",
    "start": "477879",
    "end": "484960"
  },
  {
    "text": "um set organization to a value where you take the current value of",
    "start": "484960",
    "end": "491240"
  },
  {
    "text": "name and run this code this function or",
    "start": "491240",
    "end": "496520"
  },
  {
    "text": "this function against the value that was in name so I'm taking the existing name and I'm adding com. jeret and then the",
    "start": "496520",
    "end": "503280"
  },
  {
    "text": "name right after that so it' be com. J something um and that's what my organization should be right so um one",
    "start": "503280",
    "end": "510759"
  },
  {
    "text": "thing you notice is that organization is dependent on the value in name so in spt",
    "start": "510759",
    "end": "516760"
  },
  {
    "text": "a project is made up of a sequence of settings okay if we go back to that build",
    "start": "516760",
    "end": "523240"
  },
  {
    "text": "file I defined a setting here and I Define a setting here now in organization I can depend on the the",
    "start": "523240",
    "end": "530200"
  },
  {
    "text": "value of name and then have an initialization that depends on that using that less than less than equals um",
    "start": "530200",
    "end": "536200"
  },
  {
    "text": "what SBT does is it will actually f discover that organization has a",
    "start": "536200",
    "end": "541839"
  },
  {
    "start": "538000",
    "end": "555000"
  },
  {
    "text": "dependency on name okay when spt starts up it takes all of your sequences or all",
    "start": "541839",
    "end": "547519"
  },
  {
    "text": "all your sequence of settings it kind of tries to compress them all down as much as it can okay",
    "start": "547519",
    "end": "555279"
  },
  {
    "text": "um I can have uh the the name actually depend on the previous name using the",
    "start": "555279",
    "end": "561320"
  },
  {
    "text": "syntax so I can say name less than less than equals name apply right and so what",
    "start": "561320",
    "end": "567399"
  },
  {
    "text": "that what that does is it looks for the previously set name in this my sequence of settings and changes the value okay",
    "start": "567399",
    "end": "575399"
  },
  {
    "text": "so the the settings in the build are kind of SP spt falls through",
    "start": "575399",
    "end": "582600"
  },
  {
    "text": "them okay and and figures out values and does things as you make a build it's a little bit um complicated to think about",
    "start": "582600",
    "end": "589600"
  },
  {
    "text": "right um but essentially things flow down right we get this linear sequence of settings um spt figures out all our",
    "start": "589600",
    "end": "597200"
  },
  {
    "text": "dependencies and then it can tell us what our dependenc these are so when it's done with all this initialization",
    "start": "597200",
    "end": "602880"
  },
  {
    "text": "umt can tell me that hey um name depends on or organization depends on name name",
    "start": "602880",
    "end": "609760"
  },
  {
    "text": "depends on something else that sort of thing um and it does so",
    "start": "609760",
    "end": "615320"
  },
  {
    "start": "615000",
    "end": "728000"
  },
  {
    "text": "because of how this setting works right this name. apply all",
    "start": "615320",
    "end": "620800"
  },
  {
    "text": "right um another thing I can do when I assign things is this Library",
    "start": "620800",
    "end": "625959"
  },
  {
    "text": "dependencies key right library dependencies is a sequence of libraries to depend on so there are two special",
    "start": "625959",
    "end": "632600"
  },
  {
    "text": "operators I can use called plus equals and plus plus equals um where I can put",
    "start": "632600",
    "end": "637959"
  },
  {
    "text": "a uh either a library on the right hand side or a sequence of libraries on the right hand side and it will append them",
    "start": "637959",
    "end": "644079"
  },
  {
    "text": "to the previous value so remember how I said you can have less than less than equals on a previous value um this code",
    "start": "644079",
    "end": "650760"
  },
  {
    "text": "is akin to um let's",
    "start": "650760",
    "end": "656880"
  },
  {
    "text": "uh sorry should prepared this come",
    "start": "656880",
    "end": "664440"
  },
  {
    "text": "on so if I were to write um can you guys can you guys see what uh let me make",
    "start": "677040",
    "end": "683600"
  },
  {
    "text": "this scroll down okay so if I were to write um",
    "start": "683600",
    "end": "689399"
  },
  {
    "text": "setting of library",
    "start": "689399",
    "end": "695279"
  },
  {
    "text": "dependencies of library dependencies right so I'm relying on the previous",
    "start": "696560",
    "end": "702040"
  },
  {
    "text": "version of myself actually it's apply um and then I'm adding a new library",
    "start": "702040",
    "end": "707880"
  },
  {
    "text": "right so let's say l was a library um what this is doing is I'm taking I'm setting the new version the",
    "start": "707880",
    "end": "714320"
  },
  {
    "text": "new value of library dependencies to be equal to the old value of Library dependencies um",
    "start": "714320",
    "end": "719839"
  },
  {
    "text": "and I'm applying this transformation function on it okay that transformation function takes the old sequence and adds",
    "start": "719839",
    "end": "726279"
  },
  {
    "text": "a new library that is shorthand for or that is long hand of",
    "start": "726279",
    "end": "733399"
  },
  {
    "start": "728000",
    "end": "768000"
  },
  {
    "text": "this the plus equals operator all it's doing is it's taking the previous value of the setting and it's appending",
    "start": "733399",
    "end": "739399"
  },
  {
    "text": "something to that sequence the Plus+ equals is appending an entire sequence",
    "start": "739399",
    "end": "744680"
  },
  {
    "text": "to the previous value so um it's a handy way way to to append junk to sequences",
    "start": "744680",
    "end": "752720"
  },
  {
    "text": "there's a lot of sequences in a build tool yeah Library dependencies happens to be a a the the key is a sequence of",
    "start": "752720",
    "end": "760839"
  },
  {
    "text": "uh projects right so when I Define keys I don't think I showed this setting Keys",
    "start": "760839",
    "end": "767040"
  },
  {
    "text": "task Keys input keys keys are defined with a type and that type is the value",
    "start": "767040",
    "end": "773320"
  },
  {
    "start": "768000",
    "end": "779000"
  },
  {
    "text": "that's returned when I evaluate that that setting right so um",
    "start": "773320",
    "end": "780160"
  },
  {
    "start": "779000",
    "end": "788000"
  },
  {
    "text": "the name key has a type of string it expects a string on the right hand side that it's going to compute um the",
    "start": "780160",
    "end": "788320"
  },
  {
    "text": "library dependencies key is a has a type of a sequence of LI or dependencies",
    "start": "788320",
    "end": "795160"
  },
  {
    "text": "sequence of library dependencies right um that are the actual type in SBT is module ID so uh yeah when you define a",
    "start": "795160",
    "end": "803000"
  },
  {
    "text": "setting you you also Define a type associated with that setting um when we get to the examples in the cookbook uh a",
    "start": "803000",
    "end": "809399"
  },
  {
    "text": "lot of that will become a little bit more clear um so that that's actually the basics of of spt everything is we we",
    "start": "809399",
    "end": "817959"
  },
  {
    "text": "Define a build with a set of projects we Define a big sequence of settings spt falls through and tries to collapse all",
    "start": "817959",
    "end": "824320"
  },
  {
    "text": "these things and figure out dependencies for us and then when we type something into the spt command line it is one of",
    "start": "824320",
    "end": "830240"
  },
  {
    "text": "these key names so name you can inside of spt type",
    "start": "830240",
    "end": "837720"
  },
  {
    "text": "um name and or actually I can type show name because I have to type show to have it",
    "start": "837720",
    "end": "843959"
  },
  {
    "text": "return stuff this is the xbt extras plugin is the the setting for name right I can I can show any of these settings",
    "start": "843959",
    "end": "850959"
  },
  {
    "text": "if I type show compile it's going to look kind of stupid um but it's going to compile the project and then it's going",
    "start": "850959",
    "end": "856959"
  },
  {
    "text": "to show me the output of compiler of compile the output of compile is this analysis object of like what changed in",
    "start": "856959",
    "end": "863320"
  },
  {
    "text": "your source code and it doesn't have a two- string method so you're just going to see like analysis um you know know at",
    "start": "863320",
    "end": "870000"
  },
  {
    "text": "and then some hash code because it doesn't have anything useful to it oh actually no it looks like it might",
    "start": "870000",
    "end": "877399"
  },
  {
    "text": "yeah okay so it wasn't useless there we go it told us how many Scala sources and",
    "start": "877399",
    "end": "883240"
  },
  {
    "text": "classes and things changed um right so any any setting we can type in the",
    "start": "883240",
    "end": "888360"
  },
  {
    "text": "console show and then that you know key value it will go execute it and tell us",
    "start": "888360",
    "end": "893920"
  },
  {
    "text": "what the result of that value was okay um SP spt has",
    "start": "893920",
    "end": "900440"
  },
  {
    "start": "896000",
    "end": "1045000"
  },
  {
    "text": "scope um keys can have different values in different Scopes so this is where",
    "start": "900440",
    "end": "906199"
  },
  {
    "text": "things get a little bit more confusing before I had name and I can set name you",
    "start": "906199",
    "end": "911720"
  },
  {
    "text": "know equals instead of spt extras I can set it to Josh and",
    "start": "911720",
    "end": "917160"
  },
  {
    "text": "now if I type name I see Josh right um there are scope scope are things like um",
    "start": "917160",
    "end": "926399"
  },
  {
    "text": "I want to take a set of settings and I want to Define um how to compile scalla code right um",
    "start": "926399",
    "end": "933079"
  },
  {
    "text": "how to compile scalla code doesn't change whether or not I'm building my tests whether not I'm building the",
    "start": "933079",
    "end": "938160"
  },
  {
    "text": "actual project whether or not I'm building my unit tests or or integration tests unit tests whatever it's the same",
    "start": "938160",
    "end": "944440"
  },
  {
    "text": "building scy code is the same for all of those um it's just a matter of getting the right settings into that you know",
    "start": "944440",
    "end": "950759"
  },
  {
    "text": "sequence of tasks that run so in spt we have something called scope where we can take a series of settings and move them",
    "start": "950759",
    "end": "958279"
  },
  {
    "text": "into a scope so in spt there is a a definition for",
    "start": "958279",
    "end": "963560"
  },
  {
    "text": "how you compile Scola code we take that that sequence of settings and we move it into a compile scope and that's how we",
    "start": "963560",
    "end": "969880"
  },
  {
    "text": "compile your main projects we take that sequence of settings we move it into a test scope the exact same sequence and",
    "start": "969880",
    "end": "976839"
  },
  {
    "text": "now it can build your test code um so the the way that we reference this in",
    "start": "976839",
    "end": "982880"
  },
  {
    "text": "SBT is there's a syntax it's in so we would call sources in compile",
    "start": "982880",
    "end": "989720"
  },
  {
    "text": "um refer to the sources sequence of files that will get compiled when you",
    "start": "989720",
    "end": "996519"
  },
  {
    "text": "compile the main project sources in test are the sequence of sources that are compiled for your unit tests it's so",
    "start": "996519",
    "end": "1004319"
  },
  {
    "text": "scope is essentially a way of scoping these keys so they refer to a particular um you know flow and you can Define",
    "start": "1004319",
    "end": "1011720"
  },
  {
    "text": "different flows scope should be reserved for big flows right like if I'm uh",
    "start": "1011720",
    "end": "1018360"
  },
  {
    "text": "compiling Scala is an excellent example um there's a lot of different settings and things for to configure Scala you",
    "start": "1018360",
    "end": "1024079"
  },
  {
    "text": "need to do your Scala C options you need to pick a bunch of sources you might have compiler plugins you have Library",
    "start": "1024079",
    "end": "1030319"
  },
  {
    "text": "dependencies there's a lot of settings that go into that so you can Define in",
    "start": "1030319",
    "end": "1036079"
  },
  {
    "text": "your build one one sequence of settings and reuse it for every every time you",
    "start": "1036079",
    "end": "1041558"
  },
  {
    "text": "need to compile scalla code if um okay the other thing is that configurations",
    "start": "1041559",
    "end": "1048160"
  },
  {
    "start": "1045000",
    "end": "1294000"
  },
  {
    "text": "can extend from other configurations in a sort of O way so uh the test config I",
    "start": "1048160",
    "end": "1054240"
  },
  {
    "text": "believe extends from the compiler config so if I Define a setting that relies on",
    "start": "1054240",
    "end": "1060000"
  },
  {
    "text": "something in the test configuration and that doesn't exist it will look for something in the compiler configuration",
    "start": "1060000",
    "end": "1066919"
  },
  {
    "text": "before giving up so that's what extends does it will go down that hierarchy in the config looking for keys um",
    "start": "1066919",
    "end": "1075960"
  },
  {
    "text": "yeah so uh uh right keys can also be scoped by a",
    "start": "1075960",
    "end": "1083280"
  },
  {
    "text": "task so this is a very interesting um addition in SBT uh the the the one that",
    "start": "1083280",
    "end": "1090039"
  },
  {
    "text": "I know that's specifically done with this um SBT will generate a jar file for your sources it will generate a jar file",
    "start": "1090039",
    "end": "1097440"
  },
  {
    "text": "for your classes um the binary and it will generate a jar file for um your Scala docs right and those are those are",
    "start": "1097440",
    "end": "1106480"
  },
  {
    "text": "the the package um command can do that there is a mapping key a",
    "start": "1106480",
    "end": "1112760"
  },
  {
    "text": "mapping key uh in uh in spt is a sequence of file to string um tuples",
    "start": "1112760",
    "end": "1121919"
  },
  {
    "text": "right so mappings is essentially I have a set of files and I have a set of locations that I want them to exist in",
    "start": "1121919",
    "end": "1128280"
  },
  {
    "text": "in the resulting jar file and I want to reuse that key every time I need to do something relating to mappings right uh",
    "start": "1128280",
    "end": "1135840"
  },
  {
    "text": "or where I map things to go into a jar um so to do that spt uh actually can",
    "start": "1135840",
    "end": "1142960"
  },
  {
    "text": "scope things by a task as well um",
    "start": "1142960",
    "end": "1148120"
  },
  {
    "text": "package bin is a task that is the task that will package up your jar and all your classes so mappings in compile",
    "start": "1148120",
    "end": "1155240"
  },
  {
    "text": "comma package bin refers to all of the class files um that will go into your",
    "start": "1155240",
    "end": "1161200"
  },
  {
    "text": "jar and the resulting location in your jar not just your class files it's also your resources right it's everything",
    "start": "1161200",
    "end": "1167039"
  },
  {
    "text": "that gets packaged in your deployment jar um mappings in compile package doc",
    "start": "1167039",
    "end": "1174400"
  },
  {
    "text": "refers to all of the HTML files and CSS files and things that end up in your",
    "start": "1174400",
    "end": "1180200"
  },
  {
    "text": "Java do or sorry scaladoc jar um which I believe is called Java do because maven's fun um they don't want us to",
    "start": "1180200",
    "end": "1187440"
  },
  {
    "text": "rename it uh if I want to look at these things in spt um if I type",
    "start": "1187440",
    "end": "1195840"
  },
  {
    "text": "mappings um it's going to tell me that I don't have any I don't actually have any mappings but I",
    "start": "1195840",
    "end": "1202520"
  },
  {
    "text": "have something to find for compile mappings um actually hold",
    "start": "1202520",
    "end": "1208760"
  },
  {
    "text": "on yeah I don't have anything defined for compile mappings either because it's defined specifically for package bin so",
    "start": "1208760",
    "end": "1215200"
  },
  {
    "text": "if I show my mappings for package bin uh it's going to resolve the internet and",
    "start": "1215200",
    "end": "1220679"
  },
  {
    "text": "then build my code and then um it's kind of hard to see here but these are two pools this is uh my a class file the um",
    "start": "1220679",
    "end": "1230799"
  },
  {
    "text": "the late build project class file and then uh where it's supposed to be",
    "start": "1230799",
    "end": "1236480"
  },
  {
    "text": "installed so here's a decent example here that's hard to see template build tap. class goes under template template",
    "start": "1236480",
    "end": "1243559"
  },
  {
    "text": "build tap. class um that's the the key value parings for mappings and you can",
    "start": "1243559",
    "end": "1248840"
  },
  {
    "text": "see how I reference it inside of the SBT console is the config comes first then a colon then the",
    "start": "1248840",
    "end": "1257559"
  },
  {
    "text": "key and then the the task it's scoped by so if I run this for package um Source",
    "start": "1257559",
    "end": "1264480"
  },
  {
    "text": "we'll see a different set of files it's a lot less because there's only like two source files in this",
    "start": "1264480",
    "end": "1271080"
  },
  {
    "text": "package um right so so scope is possibly the one the most confusing thing in SBT",
    "start": "1271080",
    "end": "1278320"
  },
  {
    "text": "um applying you know values to Keys once you get the feel of it is really easy scope is where the complication comes in",
    "start": "1278320",
    "end": "1285480"
  },
  {
    "text": "because when I'm trying to figure out how to add something into like the resulting jar file I need to set it in",
    "start": "1285480",
    "end": "1293159"
  },
  {
    "text": "the right scope so it's not just enough to add it to the mappings key I have to",
    "start": "1293159",
    "end": "1298360"
  },
  {
    "start": "1294000",
    "end": "1465000"
  },
  {
    "text": "add it to the mappings in compile package bin key right so how do I",
    "start": "1298360",
    "end": "1304120"
  },
  {
    "text": "know uh what which which key to use inbt there's an inspect command anything I do",
    "start": "1304120",
    "end": "1311159"
  },
  {
    "text": "in spt I can inspect um the inspect command tells me the compile task",
    "start": "1311159",
    "end": "1318120"
  },
  {
    "text": "returns the type spt Inc analysis that's the value that it returns when you run it um",
    "start": "1318120",
    "end": "1325440"
  },
  {
    "text": "it provides it has a description it tells you where it's defined right so who who provides this uh this task and",
    "start": "1325440",
    "end": "1332480"
  },
  {
    "text": "it tells you what it depends on so it only has two dependencies compile inputs",
    "start": "1332480",
    "end": "1337520"
  },
  {
    "text": "is a key um that actually Aggregates a whole bunch of information about",
    "start": "1337520",
    "end": "1342640"
  },
  {
    "text": "compiling so that's not just your sources it's also your flags and that sort of thing um and then streams",
    "start": "1342640",
    "end": "1348080"
  },
  {
    "text": "streams are your that's that's your logging uh in spt anyway if I if I need",
    "start": "1348080",
    "end": "1353720"
  },
  {
    "text": "to deconstruct what settings I need to um configure uh I can use inspect to",
    "start": "1353720",
    "end": "1361640"
  },
  {
    "text": "look at where everything is um yeah can you talk a little bit about",
    "start": "1361640",
    "end": "1368120"
  },
  {
    "text": "what streams are streams uh okay so spt whenever you run",
    "start": "1368120",
    "end": "1374559"
  },
  {
    "text": "a task any sort of task um spt will log everything that happens um and it won't",
    "start": "1374559",
    "end": "1380919"
  },
  {
    "text": "necessarily show it to you um like when I ran that you know it showed showed the",
    "start": "1380919",
    "end": "1386480"
  },
  {
    "text": "result when I ran package it showed the result of mappings but it didn't actually show me the output of the scaly",
    "start": "1386480",
    "end": "1392400"
  },
  {
    "text": "compiler so in the Target directory of SBT there's a streams directory that has",
    "start": "1392400",
    "end": "1398320"
  },
  {
    "text": "all of your logs um the streams class or the streams key inbt is a way to access",
    "start": "1398320",
    "end": "1404840"
  },
  {
    "text": "the logger so inside of a task if I ever need to access logging I can depend on",
    "start": "1404840",
    "end": "1410600"
  },
  {
    "text": "streams and I will get an instance of it and I can make use of it um we'll cover that later later I think uh right the",
    "start": "1410600",
    "end": "1419200"
  },
  {
    "text": "other interesting thing about inspect is I get my reverse dependencies so these are things that depend on me so if you",
    "start": "1419200",
    "end": "1424919"
  },
  {
    "text": "want to know who's using a key um to know if it's safe to change it you can check your reverse dependencies and it",
    "start": "1424919",
    "end": "1431080"
  },
  {
    "text": "will show you um for example compile products um depends on compile so",
    "start": "1431080",
    "end": "1437120"
  },
  {
    "text": "compile products is the thing that that's or sorry discovered main classes is the thing that spt uses when it sends",
    "start": "1437120",
    "end": "1443720"
  },
  {
    "text": "you a prompt of like when you type run um and it asks you what main class you",
    "start": "1443720",
    "end": "1449760"
  },
  {
    "text": "would like to run um discovered main classes is the key that computes that um and it makes use of compile so uh if you",
    "start": "1449760",
    "end": "1456919"
  },
  {
    "text": "want to inspect what's happening int there's an inspect command to dig into all these keys and their",
    "start": "1456919",
    "end": "1463159"
  },
  {
    "text": "dependencies um yeah so that is scope we're going to talk a little bit about",
    "start": "1463159",
    "end": "1468840"
  },
  {
    "start": "1465000",
    "end": "1557000"
  },
  {
    "text": "initialization so a setting key has a",
    "start": "1468840",
    "end": "1474080"
  },
  {
    "text": "type associated with it right a name is associated with strings names can only take instances of strings there is a",
    "start": "1474080",
    "end": "1480960"
  },
  {
    "text": "class called initialize um initialize is a um it kind",
    "start": "1480960",
    "end": "1486640"
  },
  {
    "text": "of wraps a function of no arguments that generates a t Okay um task",
    "start": "1486640",
    "end": "1494480"
  },
  {
    "text": "Keys take an initialize of a task so so what spt does during startup is it takes",
    "start": "1494480",
    "end": "1501640"
  },
  {
    "text": "all of your settings it takes all of these initializes it looks at all the dependencies it calculates um this huge dependency graph from these initialize",
    "start": "1501640",
    "end": "1508960"
  },
  {
    "text": "and it will actually grab values for settings remember we said they're calculated once on when the build is",
    "start": "1508960",
    "end": "1515039"
  },
  {
    "text": "loaded we actually get the raw T and place it into the setting um for these",
    "start": "1515039",
    "end": "1520240"
  },
  {
    "text": "task Keys we we generate a task the task is a function that will be computed later so yes initialize is a function",
    "start": "1520240",
    "end": "1527039"
  },
  {
    "text": "that generates a function that would be run later um so deferred work um any key",
    "start": "1527039",
    "end": "1534240"
  },
  {
    "text": "reference can be converted directly to an initialize so if I want to set the name to the value in organization I",
    "start": "1534240",
    "end": "1541240"
  },
  {
    "text": "create a setting like this um so Keys automatically become initialized um",
    "start": "1541240",
    "end": "1547320"
  },
  {
    "text": "initialize is an applicative functor we'll go into those a little bit um but",
    "start": "1547320",
    "end": "1552600"
  },
  {
    "text": "if you notice um in this code we've been showing there's an app method on here",
    "start": "1552600",
    "end": "1560480"
  },
  {
    "start": "1557000",
    "end": "1588000"
  },
  {
    "text": "apply is from initialize apply allows you to take an initialize of a certain type and",
    "start": "1560480",
    "end": "1567279"
  },
  {
    "text": "transform it using a function so name becomes an initialize of string right so",
    "start": "1567279",
    "end": "1573679"
  },
  {
    "text": "I have something that will give me a string and I am transforming it by a function into something else you can",
    "start": "1573679",
    "end": "1579120"
  },
  {
    "text": "think of initialize as a pseudo collection of one thing right and I have",
    "start": "1579120",
    "end": "1584559"
  },
  {
    "text": "all of my apply map those sort of methods on it um what's weird is that",
    "start": "1584559",
    "end": "1590200"
  },
  {
    "start": "1588000",
    "end": "1678000"
  },
  {
    "text": "initialized task of T it is very inconvenient to have to have um to to",
    "start": "1590200",
    "end": "1596480"
  },
  {
    "text": "Nest inside to task so SP spt has a way for you to map directly on the T rather",
    "start": "1596480",
    "end": "1603600"
  },
  {
    "text": "than having to know that you're dealing with tasks and not just initialize a t",
    "start": "1603600",
    "end": "1609000"
  },
  {
    "text": "um right sobt uses uh a concept called applicative functors um to allow you to",
    "start": "1609000",
    "end": "1616880"
  },
  {
    "text": "um access t or initialize or or task T the T inside of initialized task T um similarly in",
    "start": "1616880",
    "end": "1624559"
  },
  {
    "text": "the build to construct these initialized values that get applied to settings um",
    "start": "1624559",
    "end": "1631240"
  },
  {
    "text": "so here's a little digression we're going to cover a little bit uh a very um base level of applicative functors for",
    "start": "1631240",
    "end": "1638000"
  },
  {
    "text": "you um so imagine that I have a method called get connection uh it looks very",
    "start": "1638000",
    "end": "1643799"
  },
  {
    "text": "similar to what's on driver manager and imagine I have a bunch of option that I've got from user input that may",
    "start": "1643799",
    "end": "1650919"
  },
  {
    "text": "or may not be there so I have an option of string for URL user and password is an array of character",
    "start": "1650919",
    "end": "1657720"
  },
  {
    "text": "um so what I would like to do is I would like to make use of URL user and password to create a connection right um",
    "start": "1657720",
    "end": "1666720"
  },
  {
    "text": "however each one of those is inside of an option and get connection takes the raw types it doesn't take an option of",
    "start": "1666720",
    "end": "1672720"
  },
  {
    "text": "string it takes a string for user right I need to get inside of there um so one",
    "start": "1672720",
    "end": "1678840"
  },
  {
    "start": "1678000",
    "end": "1860000"
  },
  {
    "text": "option I can that's kind of a pun I can use is I can use a four expression and I",
    "start": "1678840",
    "end": "1684240"
  },
  {
    "text": "can rip the values out of URL user and password right so the for expression",
    "start": "1684240",
    "end": "1690080"
  },
  {
    "text": "will pull each value out and then I yield a git connection of those values",
    "start": "1690080",
    "end": "1695840"
  },
  {
    "text": "and I will have an option of connection so using four expressions in Scala is a way to pull those values out of the",
    "start": "1695840",
    "end": "1701279"
  },
  {
    "text": "container right that's what four expressions are all about um the downside is like this is not not",
    "start": "1701279",
    "end": "1708679"
  },
  {
    "text": "applicative and there's a reason why we care about applicative four expressions are sequential okay I have to pull the",
    "start": "1708679",
    "end": "1717720"
  },
  {
    "text": "value out of URL first if it exists right then I'll will pull the value out of user if that exists then I'll pull",
    "start": "1717720",
    "end": "1723480"
  },
  {
    "text": "the value out of password but at at uh at the top level I don't know until I've",
    "start": "1723480",
    "end": "1729559"
  },
  {
    "text": "pulled the value out of URL if I'll run any of the rest of this function right",
    "start": "1729559",
    "end": "1734799"
  },
  {
    "text": "so if I were to inspect the dependencies of um the resulting option right if let's",
    "start": "1734799",
    "end": "1741640"
  },
  {
    "text": "say I had something that calculated dependencies I wouldn't actually know that user and password are dependencies",
    "start": "1741640",
    "end": "1750159"
  },
  {
    "text": "of the resulting um connection because that fun these functions that",
    "start": "1750159",
    "end": "1756440"
  },
  {
    "text": "run here underneath only happen um when I try to extract from URL so it's unsafe",
    "start": "1756440",
    "end": "1762960"
  },
  {
    "text": "to try to discover the dependencies I actually have to run the code um because",
    "start": "1762960",
    "end": "1768159"
  },
  {
    "text": "of the way that those methods are defined essentially a four expression in Scala this code this four expression",
    "start": "1768159",
    "end": "1776159"
  },
  {
    "text": "turns into this code we're calling flat map on an option and we have a function",
    "start": "1776159",
    "end": "1783240"
  },
  {
    "text": "that takes the location of the option and perform some value right that's all",
    "start": "1783240",
    "end": "1788600"
  },
  {
    "text": "that this guy knows he he has no way of knowing that there are other dependencies involved here right he he",
    "start": "1788600",
    "end": "1795399"
  },
  {
    "text": "just has a function that returns an option and he's going to flatten that sucker out",
    "start": "1795399",
    "end": "1800799"
  },
  {
    "text": "um inside of there I have a user flat map you know that doesn't actually this this user flat map never gets called if",
    "start": "1800799",
    "end": "1807919"
  },
  {
    "text": "URL was um was available so uh flatmap is not ideal for a build",
    "start": "1807919",
    "end": "1814760"
  },
  {
    "text": "tool right when we're talking about initialized values if I'm talking about making a dependency on compiling my",
    "start": "1814760",
    "end": "1820600"
  },
  {
    "text": "tests and compiling um my uh my source code uh actually a better example is if",
    "start": "1820600",
    "end": "1826799"
  },
  {
    "text": "if it's running my tests and running my integration test and I want to do those two operations in parallel right um flat",
    "start": "1826799",
    "end": "1833919"
  },
  {
    "text": "map will not let me do that because I have to extract the results of running",
    "start": "1833919",
    "end": "1838960"
  },
  {
    "text": "the test first before I can run the function that will extract the results",
    "start": "1838960",
    "end": "1844080"
  },
  {
    "text": "of running my um you know integration tests right so I can't do the two things in parallel they have to be sequential",
    "start": "1844080",
    "end": "1851120"
  },
  {
    "text": "you have to get the result of the one before you can run the other so um four Expressions flat map these are",
    "start": "1851120",
    "end": "1857320"
  },
  {
    "text": "sequential type operations um so what what we'd rather do is we would rather",
    "start": "1857320",
    "end": "1864159"
  },
  {
    "start": "1860000",
    "end": "1950000"
  },
  {
    "text": "use um what's called the applicative funter concept so that we can get this",
    "start": "1864159",
    "end": "1869440"
  },
  {
    "text": "um we can figure out all the dependencies initially and we can pull their values in parallel right that's",
    "start": "1869440",
    "end": "1876480"
  },
  {
    "text": "that's a key tobt is that when it evaluates tasks it will try to do um it will try to paralyze everything it can",
    "start": "1876480",
    "end": "1883279"
  },
  {
    "text": "so we need a dependency graph we can't have a sequential thing of things to run um",
    "start": "1883279",
    "end": "1889080"
  },
  {
    "text": "so what we do is we take the get connection method and we Curry it if you're familiar with",
    "start": "1889080",
    "end": "1894559"
  },
  {
    "text": "currying we take uh we take a function of many arguments and instead of instead",
    "start": "1894559",
    "end": "1901279"
  },
  {
    "text": "of taking in many arguments we take one so we take in the first string and we return a",
    "start": "1901279",
    "end": "1907679"
  },
  {
    "text": "function that will take in the next argument and return a function that takes in the third argument and finally",
    "start": "1907679",
    "end": "1915279"
  },
  {
    "text": "returns the connection so we're defining a function that returns a function that returns a function that returns a",
    "start": "1915279",
    "end": "1920799"
  },
  {
    "text": "function however many arguments we have that's how many functions we end up returning uh and that's",
    "start": "1920799",
    "end": "1926840"
  },
  {
    "text": "currying um in Scola there's a very easy way to do that you take whatever method you have you use this little underscore",
    "start": "1926840",
    "end": "1934279"
  },
  {
    "text": "operator to turn it to turn a method into a function and then you call the curried method on the function and it",
    "start": "1934279",
    "end": "1940200"
  },
  {
    "text": "will automatically give you this you know uh function that returns a function",
    "start": "1940200",
    "end": "1945399"
  },
  {
    "text": "returns a function Etc okay so we now have this this crazy big function",
    "start": "1945399",
    "end": "1951919"
  },
  {
    "start": "1950000",
    "end": "2038000"
  },
  {
    "text": "now um I have uh I have my curried connection right it it does exactly what",
    "start": "1951919",
    "end": "1959360"
  },
  {
    "text": "I want I Define the first part of uh my transformation as taking the URL and",
    "start": "1959360",
    "end": "1966320"
  },
  {
    "text": "mapping this carried function so what this does is I take a function that takes a string it returns this big old",
    "start": "1966320",
    "end": "1973840"
  },
  {
    "text": "function and um I map it against the URL so now I've passed in the first value to",
    "start": "1973840",
    "end": "1981519"
  },
  {
    "text": "that CED function and I get back the rest and I end up with an option of um",
    "start": "1981519",
    "end": "1988320"
  },
  {
    "text": "the rest of the function right so I have an option of a function so the the",
    "start": "1988320",
    "end": "1993919"
  },
  {
    "text": "continuation of the git connection is inside of this option what's handy here",
    "start": "1993919",
    "end": "1999519"
  },
  {
    "text": "is because I called map here um this this option can remember that it was",
    "start": "1999519",
    "end": "2006240"
  },
  {
    "text": "created from the first URL object right I can remember my",
    "start": "2006240",
    "end": "2012679"
  },
  {
    "text": "dependency now I would love to have a way to take this option of a function",
    "start": "2012679",
    "end": "2018559"
  },
  {
    "text": "and to take um to take my user which was a string and take the string in the user",
    "start": "2018559",
    "end": "2024360"
  },
  {
    "text": "option and put it in here and do it in such a way that I can remember that that string came from the user option",
    "start": "2024360",
    "end": "2031519"
  },
  {
    "text": "right um the way that I do that is through an applicative functor so an",
    "start": "2031519",
    "end": "2037919"
  },
  {
    "text": "applicative functor is a very simple interface um I have a holder of some",
    "start": "2037919",
    "end": "2043840"
  },
  {
    "start": "2038000",
    "end": "2186000"
  },
  {
    "text": "type and I want a I want an apply method on applicative right so this is the",
    "start": "2043840",
    "end": "2049158"
  },
  {
    "text": "applicative method it will take a value um of the holder it will take a function",
    "start": "2049159",
    "end": "2055720"
  },
  {
    "text": "that's inside of the holder and it will apply that function to this one and return me a new holder and it can do it",
    "start": "2055720",
    "end": "2062000"
  },
  {
    "text": "in such a way that I can remember where I came from and keep track of my dependencies right I can can",
    "start": "2062000",
    "end": "2068200"
  },
  {
    "text": "parallelize the computation of a and uh",
    "start": "2068200",
    "end": "2073440"
  },
  {
    "text": "well yeah of A and B essentially later all",
    "start": "2073440",
    "end": "2078638"
  },
  {
    "text": "right so if I Define this applicative um and I make use of it um I'm simplifying",
    "start": "2078639",
    "end": "2085839"
  },
  {
    "text": "here I'm pretending that I've implicitly enriched option with an applicative",
    "start": "2085839",
    "end": "2091040"
  },
  {
    "text": "method um that just calls applicatives apply okay so that's that's a",
    "start": "2091040",
    "end": "2096358"
  },
  {
    "text": "simplification here but now I can say I can take this first option of the",
    "start": "2096359",
    "end": "2101880"
  },
  {
    "text": "continuation I can call user applicative first now since I have I have user and I",
    "start": "2101880",
    "end": "2108119"
  },
  {
    "text": "have first this resulting option can remember that it came not only from URL",
    "start": "2108119",
    "end": "2114079"
  },
  {
    "text": "because up here we're using map it can remember that it came from user right it's not hidden at runtime this this all",
    "start": "2114079",
    "end": "2120640"
  },
  {
    "text": "happens at um during the initialization I'd never have to extract any of these",
    "start": "2120640",
    "end": "2126640"
  },
  {
    "text": "options um to to call this applicative method I can remember my dependencies as",
    "start": "2126640",
    "end": "2132599"
  },
  {
    "text": "I chain through okay um there is no point where we have to look at the",
    "start": "2132599",
    "end": "2138200"
  },
  {
    "text": "result of one of these transformation functions we can just uh make use of them directly uh yes so we do the same",
    "start": "2138200",
    "end": "2144839"
  },
  {
    "text": "thing with password and now we have um we have the exact same result so what's",
    "start": "2144839",
    "end": "2150720"
  },
  {
    "text": "the big deal right they kind of look the same password applicative user applicative",
    "start": "2150720",
    "end": "2156520"
  },
  {
    "text": "URL map get Curry or we use flat maps and Maps well the big deal is the fact",
    "start": "2156520",
    "end": "2163200"
  },
  {
    "text": "again that these are functions that I need to pull the value out of URL to",
    "start": "2163200",
    "end": "2168880"
  },
  {
    "text": "figure out what the rest of the dependencies are I can't do I can't parallelize the computation um anbt",
    "start": "2168880",
    "end": "2175160"
  },
  {
    "text": "that's that's critical so that is why we use the supplicative style um and and",
    "start": "2175160",
    "end": "2180319"
  },
  {
    "text": "that's why you're going to see like apply and and some interesting things in spt um right so flat map is runtime",
    "start": "2180319",
    "end": "2190799"
  },
  {
    "start": "2186000",
    "end": "2299000"
  },
  {
    "text": "dependency um yeah so here's a fun one inside a flat map right I can write an",
    "start": "2190880",
    "end": "2197960"
  },
  {
    "text": "is and I can return one value of an",
    "start": "2197960",
    "end": "2203119"
  },
  {
    "text": "option or another depending on this ISR and there's no way for me to know what",
    "start": "2203119",
    "end": "2209400"
  },
  {
    "text": "the dependency uh for the connection initialize is without knowing what ISR",
    "start": "2209400",
    "end": "2218160"
  },
  {
    "text": "is right if I run that function I get if I run that function with ISR as true or",
    "start": "2218160",
    "end": "2224440"
  },
  {
    "text": "as yeah this should be a Boolean sorry um if is is prod is true I'm going to",
    "start": "2224440",
    "end": "2230720"
  },
  {
    "text": "get back one version of this dependency uh tree where it relies on prod URL and",
    "start": "2230720",
    "end": "2236560"
  },
  {
    "text": "if it's false I get a different one that relies on dev URL and the only way that I could um know what all the",
    "start": "2236560",
    "end": "2243000"
  },
  {
    "text": "dependencies are um ahead of time is to exhaustively send every potential value",
    "start": "2243000",
    "end": "2250400"
  },
  {
    "text": "uh of uh ISR into the function get all the results and look at all the potential dependencies right so SBT",
    "start": "2250400",
    "end": "2258359"
  },
  {
    "text": "supports flatmap on initialize we do support it okay you can use four",
    "start": "2258359",
    "end": "2263839"
  },
  {
    "text": "Expressions however you can't parallelize with them we can't figure out the dependencies ahead of time we",
    "start": "2263839",
    "end": "2270200"
  },
  {
    "text": "can't do dependency analysis and warn you if you have any sort of missing um Val missing initialized fields we can't",
    "start": "2270200",
    "end": "2278280"
  },
  {
    "text": "parallelize your build um it's not a good idea to use flatmap inbt unless you",
    "start": "2278280",
    "end": "2284359"
  },
  {
    "text": "have no choice there are some cases where you absolutely have to um if you run into one of those cases please email",
    "start": "2284359",
    "end": "2290720"
  },
  {
    "text": "me because I'm really interested to know what that is um I haven't Mark has seen one and I have not seen any",
    "start": "2290720",
    "end": "2298599"
  },
  {
    "text": "okay so spt has an applicative DSL now I showed before this this uh simple you",
    "start": "2298599",
    "end": "2305560"
  },
  {
    "start": "2299000",
    "end": "2314000"
  },
  {
    "text": "know password user URL applicative applicative map um that's all well and",
    "start": "2305560",
    "end": "2311920"
  },
  {
    "text": "good but there's a lot of magic behind the scenes that make it somewhat hard to make use of in Sp spt we have it right",
    "start": "2311920",
    "end": "2318160"
  },
  {
    "start": "2314000",
    "end": "2360000"
  },
  {
    "text": "on tupal okay from any tupal I can put all my keys into a tupal and call",
    "start": "2318160",
    "end": "2324119"
  },
  {
    "text": "apply and then give it a function and this is an applicative funter it will take all of these Keys it will know what",
    "start": "2324119",
    "end": "2330920"
  },
  {
    "text": "those keys are keep track of the dependencies and create me a new initialize where um it runs this method",
    "start": "2330920",
    "end": "2337760"
  },
  {
    "text": "meod against the values inside of those initialized and creates a new um initialize so this is the the the",
    "start": "2337760",
    "end": "2345079"
  },
  {
    "text": "applicative DSL for SP spt again you really want to use this all the time because you will get",
    "start": "2345079",
    "end": "2352240"
  },
  {
    "text": "parallelized builds um spt has actually really good ability to parallelize how",
    "start": "2352240",
    "end": "2358160"
  },
  {
    "text": "it computes things um now here's the the annoying part is uh if we have an",
    "start": "2358160",
    "end": "2365680"
  },
  {
    "start": "2360000",
    "end": "2410000"
  },
  {
    "text": "initialize of task right right um apply will work against um initialized T's Map",
    "start": "2365680",
    "end": "2373319"
  },
  {
    "text": "works against initialized task of T's so if I want a task that will generate a",
    "start": "2373319",
    "end": "2378560"
  },
  {
    "text": "connection instead of generating one at build load I have to use map Instead",
    "start": "2378560",
    "end": "2384680"
  },
  {
    "text": "This is a common point of confusion inbt if I'm dealing with tasks and I have dependencies I use map if I'm dealing",
    "start": "2384680",
    "end": "2391960"
  },
  {
    "text": "with settings or setting keys I use apply okay it's it's frustrating but there's a",
    "start": "2391960",
    "end": "2399400"
  },
  {
    "text": "um there's some type inference issues where if we didn't do it this way you would have to apply a lot of um type",
    "start": "2399400",
    "end": "2405839"
  },
  {
    "text": "parameters and that's not nobody likes type parameters so here's here's a cookbook",
    "start": "2405839",
    "end": "2411520"
  },
  {
    "start": "2410000",
    "end": "2637000"
  },
  {
    "text": "we're going to cover a little bit of of features and how you do things within SBT um and hopefully this will clarify",
    "start": "2411520",
    "end": "2417560"
  },
  {
    "text": "some of the points I made earlier um all right so if I want to test in spt so I",
    "start": "2417560",
    "end": "2424319"
  },
  {
    "text": "take my Awesomes project um everything has to have a z in it by the way when you use spt just so you know has to end",
    "start": "2424319",
    "end": "2431880"
  },
  {
    "text": "in a z um Library dependencies I can I can throw this Library dependencies key",
    "start": "2431880",
    "end": "2439200"
  },
  {
    "text": "plus equals and then put a module right this is the module ID syntax in Sp spt",
    "start": "2439200",
    "end": "2445240"
  },
  {
    "text": "um it is it is a maven dependency this is the group this is the name and this",
    "start": "2445240",
    "end": "2451280"
  },
  {
    "text": "is the version and then this percentage here defines the config where that",
    "start": "2451280",
    "end": "2457720"
  },
  {
    "text": "dependency will be made available right so there is a correlation between configurations and Library dependencies",
    "start": "2457720",
    "end": "2465680"
  },
  {
    "text": "um and it it's somewhat loose so this test means when I run test compile that",
    "start": "2465680",
    "end": "2471920"
  },
  {
    "text": "Library will be available it will not be available when I run compile compile",
    "start": "2471920",
    "end": "2477560"
  },
  {
    "text": "right for my production code it will not be available when I run integration compile unless integration extends from",
    "start": "2477560",
    "end": "2484960"
  },
  {
    "text": "test Okay so that whole um config uh extends thing is",
    "start": "2484960",
    "end": "2492040"
  },
  {
    "text": "is somewhat important here um and and that's what this last percentage equals if you don't see a",
    "start": "2492040",
    "end": "2498640"
  },
  {
    "text": "percentage test everything defaults to being available at compile time so by default that that would be compile um",
    "start": "2498640",
    "end": "2506640"
  },
  {
    "text": "the last thing is there are two uh there are two little squiggles there",
    "start": "2506640",
    "end": "2512240"
  },
  {
    "text": "percentage signs um spt has the ability to cross deploy against multip Scala",
    "start": "2512240",
    "end": "2517720"
  },
  {
    "text": "versions um it added this when Scala had um binary incompatible releases for",
    "start": "2517720",
    "end": "2524119"
  },
  {
    "text": "every version not just major um so this was a way to get around that so if you",
    "start": "2524119",
    "end": "2529319"
  },
  {
    "text": "wanted to release something for Scala 2.82 and 2.81 you had to release in this fashion nowadays if you want to release",
    "start": "2529319",
    "end": "2535920"
  },
  {
    "text": "for 282 and 291 that's what you use this for as well um because Scala has binary",
    "start": "2535920",
    "end": "2541520"
  },
  {
    "text": "compatible in 2.9x series you can make use of things compiled in 2.9 .0 in",
    "start": "2541520",
    "end": "2548400"
  },
  {
    "text": "2.9.1 so it gets a little more confusing to do that uh um to make things work now",
    "start": "2548400",
    "end": "2555880"
  },
  {
    "text": "uh that should be fixed shortly but um that's that's what the little percent",
    "start": "2555880",
    "end": "2561319"
  },
  {
    "text": "percent is yes so uh in some of the libraries I noticed uh provided provided",
    "start": "2561319",
    "end": "2569240"
  },
  {
    "text": "as the fourth parameter without qus yes what does that mean okay so provided is",
    "start": "2569240",
    "end": "2574440"
  },
  {
    "text": "similar to um I'm trying to remember I think it's the same in Maven provided means I need you to download this jar I",
    "start": "2574440",
    "end": "2582680"
  },
  {
    "text": "need this jar available to build but where I'm deploying that jar will be provided so",
    "start": "2582680",
    "end": "2589800"
  },
  {
    "text": "if somebody makes use of me do not download this jar so it's actually a handy way if you want to have support so",
    "start": "2589800",
    "end": "2596119"
  },
  {
    "text": "let's say I'm making a new testing Library um and I like scolar test so I want to have Scala test support in my",
    "start": "2596119",
    "end": "2602119"
  },
  {
    "text": "new testing Library I can depend on Scola test with a provided",
    "start": "2602119",
    "end": "2607760"
  },
  {
    "text": "um tag here and then when I deploy my code people can make use of my library",
    "start": "2607760",
    "end": "2613720"
  },
  {
    "text": "without needing to download Scola test but if they explicitly declare it um then they can make use of all that",
    "start": "2613720",
    "end": "2619520"
  },
  {
    "text": "scolar test code I have in the jar so it's it's a handy way to have like extensions inside of your jar that",
    "start": "2619520",
    "end": "2625839"
  },
  {
    "text": "people can make use of um if they have the right dependencies granted if they try to instantiate that class and they",
    "start": "2625839",
    "end": "2631240"
  },
  {
    "text": "don't have scalla test it'll blow up so be warned but that's what provided means",
    "start": "2631240",
    "end": "2637599"
  },
  {
    "start": "2637000",
    "end": "2890000"
  },
  {
    "text": "okay um that should not be highlighted anymore if I want to Define functional",
    "start": "2637599",
    "end": "2643319"
  },
  {
    "text": "tests um what I can do is I can to find a new configuration called fun because",
    "start": "2643319",
    "end": "2649400"
  },
  {
    "text": "functional tests are fun um and I can extend the test configuration right so I will get all of my testing libraries in",
    "start": "2649400",
    "end": "2655359"
  },
  {
    "text": "my functional um testing settings and then here's the special syntax right",
    "start": "2655359",
    "end": "2660960"
  },
  {
    "text": "here in config fun test which is the same value here as that fun config",
    "start": "2660960",
    "end": "2668359"
  },
  {
    "text": "grab the spt defaults test settings um if you've never seen this in Scala",
    "start": "2668359",
    "end": "2673640"
  },
  {
    "text": "before this is how you take a sequence and use it in a variable arguments method it's uh just a little bit of",
    "start": "2673640",
    "end": "2680680"
  },
  {
    "text": "sugar that you have to memorize um right so in config fun test this takes all my test settings and moves them into the",
    "start": "2680680",
    "end": "2690240"
  },
  {
    "text": "fun test config so now I will have fun colon test that I can call inside of SBT",
    "start": "2690240",
    "end": "2697599"
  },
  {
    "text": "and it will run everything it will compile everything in fun colon sources",
    "start": "2697599",
    "end": "2703599"
  },
  {
    "text": "and run them okay I can depend on specs and put it in the fun",
    "start": "2703599",
    "end": "2710599"
  },
  {
    "text": "configuration and it will only be used for my functional tests so I can use Scola test for unit",
    "start": "2710599",
    "end": "2716640"
  },
  {
    "text": "test and specs for functional tests um that really should be Scala check because I I like Scala check for",
    "start": "2716640",
    "end": "2721760"
  },
  {
    "text": "functional tests anyway um right so Library dependencies plus",
    "start": "2721760",
    "end": "2728160"
  },
  {
    "text": "equals specs um Source directory in fun test here's where I'm setting a",
    "start": "2728160",
    "end": "2734359"
  },
  {
    "text": "different Source directory in fun test I'm making use of the default Source directory and adding a functional to it",
    "start": "2734359",
    "end": "2741359"
  },
  {
    "text": "right so what that will do is you know how there's a source main Scala that by default has all of your Scala source",
    "start": "2741359",
    "end": "2747640"
  },
  {
    "text": "files in Maven well it's also the true int and there's a source test Java that",
    "start": "2747640",
    "end": "2752839"
  },
  {
    "text": "has all your unit testing by doing this I've changed the functional testing code to be in Source functional Scala because",
    "start": "2752839",
    "end": "2762359"
  },
  {
    "text": "I've moved the source directory for functional tests and that's what this in",
    "start": "2762359",
    "end": "2768000"
  },
  {
    "text": "does it changes the scope of that setting that I'm applying and I'm making use of a setting in a different",
    "start": "2768000",
    "end": "2775359"
  },
  {
    "text": "scope so yeah one more um so the one",
    "start": "2775359",
    "end": "2781079"
  },
  {
    "text": "thing because you're defining a new fun test an extension test then automatically should fun test have all",
    "start": "2781079",
    "end": "2786680"
  },
  {
    "text": "of the test settings so it's a little confusing why they're being Reed well",
    "start": "2786680",
    "end": "2792000"
  },
  {
    "text": "yeah so the there's a difference the um if I extend from test and I try to make",
    "start": "2792000",
    "end": "2797720"
  },
  {
    "text": "use of a setting and I can't find it it will look in test settings right but the setting doesn't",
    "start": "2797720",
    "end": "2806359"
  },
  {
    "text": "exist so the setting doesn't exist but if I look for the setting I will look in its parent if I can't find it so in the",
    "start": "2806359",
    "end": "2813640"
  },
  {
    "text": "console if I were to write fun colon test just from doing this that that",
    "start": "2813640",
    "end": "2819240"
  },
  {
    "text": "setting doesn't exist right if I have another setting that depends on funon test it can substitute test colon",
    "start": "2819240",
    "end": "2827319"
  },
  {
    "text": "test okay so that that's that's the difference there is you actually have to",
    "start": "2827319",
    "end": "2833160"
  },
  {
    "text": "if you want the tasks to be available at runtime they have to be um you have to move them and copy them right they have",
    "start": "2833160",
    "end": "2839720"
  },
  {
    "text": "to be exist but if this default. test settings um has dependencies on things",
    "start": "2839720",
    "end": "2845839"
  },
  {
    "text": "that um dependencies on keys so if it depends like let's say sources is not",
    "start": "2845839",
    "end": "2851359"
  },
  {
    "text": "part of default. test settings it's it's uh defined in another default um when I go to look up fund colon sources it will",
    "start": "2851359",
    "end": "2859240"
  },
  {
    "text": "look up the task uh it won't find the task so it'll look up the task in test colon sources right and test colon",
    "start": "2859240",
    "end": "2865720"
  },
  {
    "text": "sources happens to depend on Fu bar that sort of thing um so you have to be",
    "start": "2865720",
    "end": "2871880"
  },
  {
    "text": "careful but uh the way that spt defines these defaults um they're they're pretty complete you know so if you if you move",
    "start": "2871880",
    "end": "2878680"
  },
  {
    "text": "default. test settings you will get all of them um anyway so I hope I answered that to",
    "start": "2878680",
    "end": "2887680"
  },
  {
    "text": "good uh right all right so if I let's say I want to generate some",
    "start": "2887680",
    "end": "2893160"
  },
  {
    "start": "2890000",
    "end": "3145000"
  },
  {
    "text": "code and I want it to be included in in compilation right so code generation is",
    "start": "2893160",
    "end": "2898440"
  },
  {
    "text": "is fun uh there's always times where you have to generate a little bit of code and it's handy um in this case I Define",
    "start": "2898440",
    "end": "2904920"
  },
  {
    "text": "a template um of object properties def name and then name so let's say I want a",
    "start": "2904920",
    "end": "2910280"
  },
  {
    "text": "Scala properties object that I can put you know values into at build time and",
    "start": "2910280",
    "end": "2916079"
  },
  {
    "text": "then rely on them in my build to make use of them um instead of using a properties file I want it statically",
    "start": "2916079",
    "end": "2922440"
  },
  {
    "text": "enforced um so I create my template I create a generate properties file method",
    "start": "2922440",
    "end": "2928240"
  },
  {
    "text": "this is just scholar code okay I'm making use of some SBT apis but this is",
    "start": "2928240",
    "end": "2934160"
  },
  {
    "text": "just a scalar method um I take I create a a file object that takes the",
    "start": "2934160",
    "end": "2940440"
  },
  {
    "text": "directory and but underneath the directory will create a build properties. Scala file okay the",
    "start": "2940440",
    "end": "2946400"
  },
  {
    "text": "directory is passed in here um I write the",
    "start": "2946400",
    "end": "2951920"
  },
  {
    "text": "file to the file I write the string where I replace all instances of that",
    "start": "2951920",
    "end": "2958160"
  },
  {
    "text": "name with the name that I'm passed in okay so if I wanted to have a bunch of",
    "start": "2958160",
    "end": "2963319"
  },
  {
    "text": "other things in the property I'd have to have a bunch of other methods I might maybe I have a map of things that I",
    "start": "2963319",
    "end": "2968400"
  },
  {
    "text": "write anyway the point is I'm generating a scolar file and I'm using io. write to write it and I return a sequence of",
    "start": "2968400",
    "end": "2976760"
  },
  {
    "text": "files here generate properties file is going to return that sequence",
    "start": "2976760",
    "end": "2982359"
  },
  {
    "text": "um okay so now um in my",
    "start": "2982359",
    "end": "2989040"
  },
  {
    "text": "project in the configuration of compile right I add a source",
    "start": "2989040",
    "end": "2994799"
  },
  {
    "text": "generator a source generator Ator is a key in Scala of um something that will",
    "start": "2994799",
    "end": "3002960"
  },
  {
    "text": "um it's it's a uh it's a task that generates a sequence of files okay so",
    "start": "3002960",
    "end": "3008599"
  },
  {
    "text": "what I'm doing is I'm calling plus equals and adding a new sequence of files to the existing sequence of files",
    "start": "3008599",
    "end": "3015520"
  },
  {
    "text": "um so Source generators by spt are automatically run um before comp before",
    "start": "3015520",
    "end": "3021599"
  },
  {
    "text": "Scala compilation so um if I if I need to do any sort of code generation",
    "start": "3021599",
    "end": "3027280"
  },
  {
    "text": "I can uh attach a new source generator um by taking my dependencies",
    "start": "3027280",
    "end": "3033720"
  },
  {
    "text": "here using my applicative map call because this is a task and passing the",
    "start": "3033720",
    "end": "3040040"
  },
  {
    "text": "values of those settings into this method okay so this is all just scolar",
    "start": "3040040",
    "end": "3048000"
  },
  {
    "text": "code um right now if I wanted to change the",
    "start": "3048000",
    "end": "3053079"
  },
  {
    "text": "source generators used for testing let's say I wanted to automatically generate test file files um the only thing I",
    "start": "3053079",
    "end": "3058280"
  },
  {
    "text": "would need to change here is do Source generators in test plus equals okay and",
    "start": "3058280",
    "end": "3063599"
  },
  {
    "text": "that would generate test source files that only are used in test",
    "start": "3063599",
    "end": "3068799"
  },
  {
    "text": "situations okay so that's that's kind of a advanced hook that's automatically",
    "start": "3068799",
    "end": "3073839"
  },
  {
    "text": "provided for us from spt we didn't have to write any of that any of the magic to make sure that the the source is",
    "start": "3073839",
    "end": "3079280"
  },
  {
    "text": "generated and added to the sources listt will use the source generators appropriately question so last I you see",
    "start": "3079280",
    "end": "3086960"
  },
  {
    "text": "that oh uh right so that's that's old school um you you actually only need",
    "start": "3086960",
    "end": "3093480"
  },
  {
    "text": "plus equals here you don't need the less sorry uh in spt",
    "start": "3093480",
    "end": "3101040"
  },
  {
    "text": "010 um we had less plus equals which was the exact same thing as plus equals uh",
    "start": "3101040",
    "end": "3106839"
  },
  {
    "text": "except one worked on settings and one worked on tasks now you only need plus equals so just just pretend that that's",
    "start": "3106839",
    "end": "3111880"
  },
  {
    "text": "plus equals sorry okay um yeah and so Source generators I'm adding a task that",
    "start": "3111880",
    "end": "3117960"
  },
  {
    "text": "will generate a properties file right this is a function that takes in some",
    "start": "3117960",
    "end": "3124079"
  },
  {
    "text": "inputs and generates a sequence of files um this here is an initialize of a",
    "start": "3124079",
    "end": "3130559"
  },
  {
    "text": "sequence of files and I'm adding that sequence of files to or that task",
    "start": "3130559",
    "end": "3135880"
  },
  {
    "text": "sequence of files to the source generator's tasks okay it's a little uh",
    "start": "3135880",
    "end": "3141280"
  },
  {
    "text": "I should have written out more types for you but you know it's Scala anyway okay",
    "start": "3141280",
    "end": "3147040"
  },
  {
    "start": "3145000",
    "end": "3254000"
  },
  {
    "text": "um I can Define setting chains so let's say I want to Define coverage tests I want my coverage tests to be different",
    "start": "3147040",
    "end": "3153280"
  },
  {
    "text": "than my my tests I want that that entire flow to be separate I can define a new",
    "start": "3153280",
    "end": "3160119"
  },
  {
    "text": "config for coverage but I can have it depend on all of the sources that are in",
    "start": "3160119",
    "end": "3165720"
  },
  {
    "text": "my regular old tests so I automatically make use of all my unit tests and my coverage tests but if I needed something",
    "start": "3165720",
    "end": "3171359"
  },
  {
    "text": "else if I needed some more sources or some other different settings I can append",
    "start": "3171359",
    "end": "3177400"
  },
  {
    "text": "to that setting right so the first thing I have to do is make sure that uh my sources and",
    "start": "3177400",
    "end": "3184960"
  },
  {
    "text": "coverage rely on the sources and test and then I can append values to it afterwards and so this will take the",
    "start": "3184960",
    "end": "3190599"
  },
  {
    "text": "final value of the sources and test and then add stuff so it's it's a really handy way to um uh actually where I make",
    "start": "3190599",
    "end": "3199559"
  },
  {
    "text": "use of this I have a a native packager plugin right so I want to Def find um a",
    "start": "3199559",
    "end": "3204839"
  },
  {
    "text": "way to deploy software on Linux so I Define a base set of things like put",
    "start": "3204839",
    "end": "3211359"
  },
  {
    "text": "this shell script in the user bin file or user bin directory put uh these jar",
    "start": "3211359",
    "end": "3216680"
  },
  {
    "text": "files under user share Java wherever the heck it is right um and I I Define those",
    "start": "3216680",
    "end": "3223000"
  },
  {
    "text": "in uh mappings in Linux right then I have specific extensions for auntu and",
    "start": "3223000",
    "end": "3230000"
  },
  {
    "text": "for Debian where I can add like a DB and change log file I can add like a RPM",
    "start": "3230000",
    "end": "3235280"
  },
  {
    "text": "file for Red Hat that's sort of thing and it makes use of the defaults for Linux and then I have extensions for the",
    "start": "3235280",
    "end": "3242240"
  },
  {
    "text": "specific configs that I'm using later right it's a very very slick trick to",
    "start": "3242240",
    "end": "3247920"
  },
  {
    "text": "have some sort of Base config that people can extend and add to",
    "start": "3247920",
    "end": "3253119"
  },
  {
    "text": "um all right now let's say I needed to find a new task int this is a lot of people want to make use of this one",
    "start": "3253119",
    "end": "3259520"
  },
  {
    "start": "3254000",
    "end": "3430000"
  },
  {
    "text": "thing I will say I'm covering this late in the talk because normally you don't need to generate new tasks um if you",
    "start": "3259520",
    "end": "3266520"
  },
  {
    "text": "need to generate new tasks you might be doing something uh brand new in spt and it might be plugin worthy okay so first",
    "start": "3266520",
    "end": "3273599"
  },
  {
    "text": "thing I have to do is Define a key to define a key there's this task key um",
    "start": "3273599",
    "end": "3280520"
  },
  {
    "text": "object with an apply method um and I give it a return type the return type for this task is going to be unit and I",
    "start": "3280520",
    "end": "3287559"
  },
  {
    "text": "give it the key a name and I give it a description if I were to actually use",
    "start": "3287559",
    "end": "3292680"
  },
  {
    "text": "name I'm going to get an exception at runtime spt is going to tell me I already know",
    "start": "3292680",
    "end": "3299000"
  },
  {
    "text": "of something called name and it doesn't return unit so you can't construct this",
    "start": "3299000",
    "end": "3304359"
  },
  {
    "text": "because we're going to end up with type issues at runtime right but I can call it",
    "start": "3304359",
    "end": "3309920"
  },
  {
    "text": "something like perhaps Foo convention is if I Define a new key the name here",
    "start": "3309920",
    "end": "3317280"
  },
  {
    "text": "which is the one used in the console should be the same okay so when I look",
    "start": "3317280",
    "end": "3322720"
  },
  {
    "text": "at the console and I type compile uh um which just compiled everything that is the name of a task",
    "start": "3322720",
    "end": "3330000"
  },
  {
    "text": "key and I if I go into spt dokeys file I will",
    "start": "3330000",
    "end": "3335839"
  },
  {
    "text": "find a configuration that looks like this and is called compile right so I",
    "start": "3335839",
    "end": "3341160"
  },
  {
    "text": "can uh reference these directly all right so after I defin my key I Define a",
    "start": "3341160",
    "end": "3346640"
  },
  {
    "text": "method that will execute my task and has my dependencies now someone asked about",
    "start": "3346640",
    "end": "3352319"
  },
  {
    "text": "streams most tasks should take in this value task streams that has a set of",
    "start": "3352319",
    "end": "3357880"
  },
  {
    "text": "logs you're going to make use of okay umbt defines a setting that just gives",
    "start": "3357880",
    "end": "3364400"
  },
  {
    "text": "you access to stuff they have there's a bunch of them in spt if I want to know what spt version I'm using I can depend",
    "start": "3364400",
    "end": "3370680"
  },
  {
    "text": "on the spt version key if I want the log files I depend on what's called streams",
    "start": "3370680",
    "end": "3376760"
  },
  {
    "text": "and then I can write to any log file I want um yeah so if I'm defining a task",
    "start": "3376760",
    "end": "3383480"
  },
  {
    "text": "where I want to log I depend on this task streams so that's what dofu here is",
    "start": "3383480",
    "end": "3388559"
  },
  {
    "text": "um and I'm also taking in a name then I wire my",
    "start": "3388559",
    "end": "3393880"
  },
  {
    "text": "dependencies with my function to create an initialize and I put the whole thing",
    "start": "3393880",
    "end": "3399559"
  },
  {
    "text": "into a setting okay so here I'm taking name and streams the keys I'm using that",
    "start": "3399559",
    "end": "3406480"
  },
  {
    "text": "applicative syntax to take to then push them into the method and this will generate a unit an initialize of unit",
    "start": "3406480",
    "end": "3414520"
  },
  {
    "text": "initialize of task of unit which which I then apply to the fu key okay so this is",
    "start": "3414520",
    "end": "3420520"
  },
  {
    "text": "how I'm defining tasks this right here is how everything in spt is wired if",
    "start": "3420520",
    "end": "3426280"
  },
  {
    "text": "you're going to look at spt defaults um that's how it all works all right so",
    "start": "3426280",
    "end": "3431559"
  },
  {
    "start": "3430000",
    "end": "3599000"
  },
  {
    "text": "let's say I want to create a zip distribution so um I have a project and",
    "start": "3431559",
    "end": "3437599"
  },
  {
    "text": "I want to zip up a whole bunch of stuff to send to people and they can just you know open it up and run something I'm",
    "start": "3437599",
    "end": "3442839"
  },
  {
    "text": "going to make use of the my mappings key um first thing I'm going to do is create a config for it so that I have a new",
    "start": "3442839",
    "end": "3449160"
  },
  {
    "text": "name space um the next thing I'm going to do is create a method called make zip",
    "start": "3449160",
    "end": "3454559"
  },
  {
    "text": "disc this uh ZIP disc takes a mappings which is a sequence of file to string",
    "start": "3454559",
    "end": "3459760"
  },
  {
    "text": "pairs right this is um that whole mappings concept I have a file and I have a location in the zip that that",
    "start": "3459760",
    "end": "3466039"
  },
  {
    "text": "file should reside um and then I take a directory where the zip should uh be be",
    "start": "3466039",
    "end": "3472440"
  },
  {
    "text": "generated so first thing I do if the directory doesn't exist I make it right",
    "start": "3472440",
    "end": "3479119"
  },
  {
    "text": "next thing I um create a new file object for the location so this is going to be",
    "start": "3479119",
    "end": "3484400"
  },
  {
    "text": "called my project release latest and then I use spt's IO class and call zip",
    "start": "3484400",
    "end": "3491039"
  },
  {
    "text": "and I pass in mappings and the resulting zip file and it will zip everything up for me",
    "start": "3491039",
    "end": "3496680"
  },
  {
    "text": "um and then I return the zip file so now in in the disc config",
    "start": "3496680",
    "end": "3505559"
  },
  {
    "text": "configuration I Define a set of settings I set my mappings to sequence empty first so I",
    "start": "3505559",
    "end": "3511720"
  },
  {
    "text": "have an empty set of mappings um I set my mappings in package bin",
    "start": "3511720",
    "end": "3518480"
  },
  {
    "text": "compile uh sorry I take the package bin compile result so package bin is a task",
    "start": "3518480",
    "end": "3524359"
  },
  {
    "text": "that packages up my jar um and the result of that task is a",
    "start": "3524359",
    "end": "3530240"
  },
  {
    "text": "file which I then map to the main jar file right so I'm taking",
    "start": "3530240",
    "end": "3537039"
  },
  {
    "text": "I'm taking the the task that generates the file running the task getting the",
    "start": "3537039",
    "end": "3542640"
  },
  {
    "text": "resulting file creating a tuple of that file to the location on disk right and",
    "start": "3542640",
    "end": "3548760"
  },
  {
    "text": "then I'm appending that to my mappings so it's a little bit a little bit complicated but that's essentially what",
    "start": "3548760",
    "end": "3553839"
  },
  {
    "text": "this line is doing is I'm appending one mapping I'm appending this jar should be called main. jar I do the same thing",
    "start": "3553839",
    "end": "3561400"
  },
  {
    "text": "with my docs right and I call them docs. jar and then finally I uh I Define my",
    "start": "3561400",
    "end": "3570760"
  },
  {
    "text": "package bin in the disc configuration to take those mappings to take the base",
    "start": "3570760",
    "end": "3578920"
  },
  {
    "text": "directory the base directory is the the the directory of your project um and",
    "start": "3578920",
    "end": "3584839"
  },
  {
    "text": "then I call magzip dis the function so it's going to get those mappings of",
    "start": "3584839",
    "end": "3590880"
  },
  {
    "text": "sequence of files from this setting and apply it there okay so",
    "start": "3590880",
    "end": "3598039"
  },
  {
    "text": "inbt the uh the confusing parts right are the fact that you're dealing inside",
    "start": "3599000",
    "end": "3604520"
  },
  {
    "text": "of these initialized tasks the fact that when I write a method I have to know what all these existing keys are and",
    "start": "3604520",
    "end": "3609880"
  },
  {
    "text": "their types so when you use spt um I recommend writing helper",
    "start": "3609880",
    "end": "3615000"
  },
  {
    "text": "methods for everything you want to do so I know that I want to do Foo I'm going to write a method that takes in some",
    "start": "3615000",
    "end": "3620200"
  },
  {
    "text": "inputs and does f then I have to look through uh I have to run um I have to",
    "start": "3620200",
    "end": "3627079"
  },
  {
    "text": "look through keys. scal and look for the appropriate keys and figure out how to map the settings in the build into my",
    "start": "3627079",
    "end": "3633720"
  },
  {
    "text": "method to make the thing run right then I I can inspect those settings and",
    "start": "3633720",
    "end": "3640680"
  },
  {
    "text": "figure out who is configure them whether or not they're there and set them if they're not set and finally um there's a",
    "start": "3640680",
    "end": "3648440"
  },
  {
    "text": "thing called console project console project will dump you into a scholar",
    "start": "3648440",
    "end": "3654680"
  },
  {
    "text": "reppel that is live against your build file so that you can run all the methods",
    "start": "3654680",
    "end": "3661319"
  },
  {
    "text": "you've defined in your build file you can call all your keys and uh interact with SBT calling methods directly",
    "start": "3661319",
    "end": "3668200"
  },
  {
    "text": "against the core of it um and the most important thing is if you need help with",
    "start": "3668200",
    "end": "3674400"
  },
  {
    "text": "spt you should ask um it takes a while to get into it uh because there are a",
    "start": "3674400",
    "end": "3680720"
  },
  {
    "text": "lot of default Keys a lot of default flows happening in spt and if you want",
    "start": "3680720",
    "end": "3685760"
  },
  {
    "text": "to to do something odds are that flow that you need to accomplish already has a hook and you just need to find the",
    "start": "3685760",
    "end": "3692520"
  },
  {
    "text": "right place to put something so the simple build tool at googlegroups.com has a lot of people who are really into",
    "start": "3692520",
    "end": "3698480"
  },
  {
    "text": "this build tool um and can help you find the right location I may not be one of them uh I'm usually one of the ones",
    "start": "3698480",
    "end": "3704240"
  },
  {
    "text": "asking uh but uh after a while you learn uh you learn where things are and um to",
    "start": "3704240",
    "end": "3711000"
  },
  {
    "text": "be honest once you learn this build tool you can take your build and turn it into a plugin",
    "start": "3711000",
    "end": "3716640"
  },
  {
    "text": "um that others can use in almost zero time um so it's it's amazing how",
    "start": "3716640",
    "end": "3722520"
  },
  {
    "text": "flexible it is and how uh efficient your code becomes for your build it does take",
    "start": "3722520",
    "end": "3728680"
  },
  {
    "text": "a little while to get into figuring out what all this means how to use it that",
    "start": "3728680",
    "end": "3734160"
  },
  {
    "text": "sort of thing so I will I mean obviously from this talk you can see that it's um",
    "start": "3734160",
    "end": "3740039"
  },
  {
    "text": "the code is somewhat tur and there's a lot of meat behind it",
    "start": "3740039",
    "end": "3745480"
  },
  {
    "text": "there's not a lot of code behind it it's a very very simple system once you understand the fundamental concepts um",
    "start": "3745480",
    "end": "3753079"
  },
  {
    "text": "but those concepts are not the easiest to grasp initially so um if you're if you're interested inbt um you know feel",
    "start": "3753079",
    "end": "3760680"
  },
  {
    "text": "free to go to the website you know email me ask we'll help you out with whatever uh whatever questions you have uh it's a",
    "start": "3760680",
    "end": "3767319"
  },
  {
    "text": "really great build tool once you get into it um so I encourage you to try it out I gu we get to say thank you thank",
    "start": "3767319",
    "end": "3775640"
  },
  {
    "text": "you than [Music]",
    "start": "3775640",
    "end": "3788969"
  }
]