[
  {
    "text": "this thing where I have my speaker notes on my phone and I can hit a button and the slides Advance that's not going to work at all so I'm going to be awkwardly",
    "start": "520",
    "end": "6640"
  },
  {
    "text": "going back to them oh my god it worked all right yes web apps",
    "start": "6640",
    "end": "12200"
  },
  {
    "text": "everyone uh so hello uh my name is lorri I am the CTO of npm and in case anybody",
    "start": "12200",
    "end": "17800"
  },
  {
    "text": "is confused I am not the famous npm guy the famous npm guy is Isaac and I am just the guy that he picked to run his",
    "start": "17800",
    "end": "24519"
  },
  {
    "text": "engineering and what are we talking about today this is a talk not about how to write node code because there's a",
    "start": "24519",
    "end": "30320"
  },
  {
    "text": "fair number of those at this at this conference this is a talk uh about how to what I do is I run a really popular",
    "start": "30320",
    "end": "37120"
  },
  {
    "text": "web service that is consists of dozens and dozens of node apps uh and this is a talk about how to do that it's about how",
    "start": "37120",
    "end": "43160"
  },
  {
    "text": "to run the whole system uh not just how to write one particular piece of software in node uh and specifically",
    "start": "43160",
    "end": "49160"
  },
  {
    "text": "it's about service oriented architecture or SOA uh which is the architectural pattern that we use at npm and we are",
    "start": "49160",
    "end": "55600"
  },
  {
    "text": "big fans of SOA so specifically what I'm going to be talking about is SOA is in",
    "start": "55600",
    "end": "60960"
  },
  {
    "text": "casee you're unaware of it uh why I think you should use it why you should do it in node specifically why is node",
    "start": "60960",
    "end": "67240"
  },
  {
    "text": "good at this stuff how to do it properly and a case study of how we use npm at uh",
    "start": "67240",
    "end": "73600"
  },
  {
    "text": "we use SOA at npm because we've been doing it for two years now and we've picked up some you know tips about what",
    "start": "73600",
    "end": "79880"
  },
  {
    "text": "we think works and what we think doesn't my hope is that by End by the end of this you'll understand why we like it and have a pretty good idea of how to",
    "start": "79880",
    "end": "86200"
  },
  {
    "text": "apply it yourself but first a quick confession uh which is that yesterday I had a whole",
    "start": "86200",
    "end": "92240"
  },
  {
    "text": "different talk and at around 4:00 I had a really interesting conversation with my VP Eng and I was like I should do",
    "start": "92240",
    "end": "97880"
  },
  {
    "text": "that instead uh so I threw out the middle half of this talk and and replaced it with a completely new talk",
    "start": "97880",
    "end": "103560"
  },
  {
    "text": "so it's somewhat unrehearsed uh I think you'll like it better than the old talk but be",
    "start": "103560",
    "end": "109840"
  },
  {
    "text": "warned so what is SOA uh it's a design pattern somewhat formerly it is a design",
    "start": "109840",
    "end": "115280"
  },
  {
    "text": "pattern in which the logical components of an application are separated into standalone servic that communicate via",
    "start": "115280",
    "end": "121280"
  },
  {
    "text": "defined protocols uh much less formally it means splitting your app up so it runs on lots of",
    "start": "121280",
    "end": "127080"
  },
  {
    "text": "boxes as this is as in this drastically oversimplified diagram here on the left you've got the more traditional",
    "start": "127080",
    "end": "132360"
  },
  {
    "text": "monolithic thing you've got one big machine and everything's happening on that big machine and this is the sort of platonic ideal of the SOA where every",
    "start": "132360",
    "end": "138760"
  },
  {
    "text": "single thing that is happening is happening on its own box uh usually the protocol that these things are speaking",
    "start": "138760",
    "end": "143959"
  },
  {
    "text": "to each other is HTTP but it can be anything it can be you know Thrift or AO or or uh buffers or whatever the",
    "start": "143959",
    "end": "151400"
  },
  {
    "text": "hell uh to dip into slightly academic terminology just for a second an SOA is",
    "start": "151400",
    "end": "157120"
  },
  {
    "text": "an example of a dist of a distributed system and distributed systems have some really interesting properties uh the",
    "start": "157120",
    "end": "163360"
  },
  {
    "text": "first is concurrency concurrency meaning that there are many actions happening interleaved with each other not",
    "start": "163360",
    "end": "169000"
  },
  {
    "text": "necessarily in parallel with each other although that can happen as well and there is no Global clock which means",
    "start": "169000",
    "end": "174760"
  },
  {
    "text": "that actions can be happening at different speeds in different parts of the of the system and you cannot guarant",
    "start": "174760",
    "end": "179840"
  },
  {
    "text": "guarantee that things that happen in one order will always happen in that order uh the third crucial uh crucial",
    "start": "179840",
    "end": "187440"
  },
  {
    "text": "attribute of them is that they is that they have independent components uh and Independence means not just that they're",
    "start": "187440",
    "end": "193519"
  },
  {
    "text": "on separate machines but uh that a failure in one part of the system does not create failures in other parts of",
    "start": "193519",
    "end": "198879"
  },
  {
    "text": "the system it is very easy to move your giant monolithic application into lots and lots of boxes and have it still be a",
    "start": "198879",
    "end": "204319"
  },
  {
    "text": "monolith it will still you know if the front door fails everything else will fail then it's not really a distributed system it's just a really big",
    "start": "204319",
    "end": "211720"
  },
  {
    "text": "monolith uh and these are super interesting properties for a web service and as we'll see we lead they lead",
    "start": "211720",
    "end": "217120"
  },
  {
    "text": "directly to the advantages of an SOA you may also have heard of a pattern called microservices uh there is a difference",
    "start": "217120",
    "end": "223760"
  },
  {
    "text": "between SOA and microservices and that is that one takes much longer to say",
    "start": "223760",
    "end": "229519"
  },
  {
    "text": "uh other than that there's no real difference there are that they are the same thing uh they are small focused",
    "start": "229519",
    "end": "234560"
  },
  {
    "text": "surfaces talking to each other over the network uh and if you think that there is some big difference between them that I miss feel free to put your hand up in",
    "start": "234560",
    "end": "241079"
  },
  {
    "text": "the QA QA uh section and be that person uh but for this talk I'm going to be",
    "start": "241079",
    "end": "247239"
  },
  {
    "text": "using them interchangeably and you can consider them interchangeable terms",
    "start": "247239",
    "end": "252280"
  },
  {
    "text": "so am I going too fast or too slow this is a thing about being unrehearsed so let's talk about why SOA",
    "start": "252280",
    "end": "258720"
  },
  {
    "text": "is a good idea there are two types of reasons that I like SOA the first are technical architectural reasons and the",
    "start": "258720",
    "end": "264280"
  },
  {
    "text": "second are organizational human reasons let's do the technical ones first the tech the first technical Advantage is",
    "start": "264280",
    "end": "271160"
  },
  {
    "text": "resource efficiency imagine you have this big monolithic app that does all",
    "start": "271160",
    "end": "276199"
  },
  {
    "text": "sorts of stuff uh but it's mostly getting one type of request it's getting this one red request over and",
    "start": "276199",
    "end": "281880"
  },
  {
    "text": "over to run it needs to have everything that it can do in memory but it's really only doing one of those things so even",
    "start": "281880",
    "end": "289240"
  },
  {
    "text": "though you're only using you know those four bits of the of your software you have to use all of your memory you can only fit four of these processes into",
    "start": "289240",
    "end": "296000"
  },
  {
    "text": "memory at the same time if you instead run a microservice that does only that thing you can in this imaginary box that",
    "start": "296000",
    "end": "302199"
  },
  {
    "text": "I have drawn on the screen fit twice as many processes into exactly the same amount of Hardware with no change to",
    "start": "302199",
    "end": "307759"
  },
  {
    "text": "what you're doing other than a change in your architecture uh this is obviously a",
    "start": "307759",
    "end": "313000"
  },
  {
    "text": "stupidly oversimplified version of this principle uh but you know take me at my",
    "start": "313000",
    "end": "318280"
  },
  {
    "text": "word when I say that this works whether or not your your constrained resource is memory or disk or processor or network",
    "start": "318280",
    "end": "323800"
  },
  {
    "text": "or whatever it is the next technical Advantage is cost efficiency by splitting your functions",
    "start": "323800",
    "end": "330880"
  },
  {
    "text": "into separate machines you can buy Hardware that is specialized to those purposes so if you need High memory or",
    "start": "330880",
    "end": "336479"
  },
  {
    "text": "high CPU or high dis space whatever and it also means that you can scale the hot",
    "start": "336479",
    "end": "342039"
  },
  {
    "text": "part of your application without wasting money if you have you know seven services that make up your machine and",
    "start": "342039",
    "end": "347360"
  },
  {
    "text": "one of them is your front door and your front door gets 10,000 requests per second but one of them is your login service and your login service gets you",
    "start": "347360",
    "end": "353160"
  },
  {
    "text": "know one or two requests per minute you don't if you're in a monolith you have to buy you know 10,000 request per",
    "start": "353160",
    "end": "359639"
  },
  {
    "text": "second worth of boxes and you've scaled everything suddenly your login server can do 10,000 requests per second but it doesn't need to in in an SOA you can",
    "start": "359639",
    "end": "366479"
  },
  {
    "text": "just take the hot part of your application and scale that which means that there's less risk because you're scaling only that part and you don't",
    "start": "366479",
    "end": "372520"
  },
  {
    "text": "have to think about what happens when you scale your login server and it also means that you're just spending less money doing",
    "start": "372520",
    "end": "377759"
  },
  {
    "text": "it uh you can also tune your redundancy so again with that front page example",
    "start": "377759",
    "end": "383319"
  },
  {
    "text": "you never want your front page to be down you always want your front page to be up so you're going to buy tons and tons of those boxes and you're going to",
    "start": "383319",
    "end": "388400"
  },
  {
    "text": "make sure that they're multiply redundant such that a failure of one of them doesn't take yourself down but your marketing Pages you're probably not so",
    "start": "388400",
    "end": "394919"
  },
  {
    "text": "worried you're probably okay with your marketing Pages having 98% up time and maybe you know half an hour to restore them if they go away so you run your you",
    "start": "394919",
    "end": "403000"
  },
  {
    "text": "know you run dozens of servers for your homepage but only one server for your marketing origin server and again you're saving money you're saving time because",
    "start": "403000",
    "end": "409000"
  },
  {
    "text": "you don't have to solve the complicated problems of high availability for a marketing server the next technical Advantage is",
    "start": "409000",
    "end": "416400"
  },
  {
    "text": "robustness uh remember I said in the formal definition that that service oriented architecture means a failure in",
    "start": "416400",
    "end": "421520"
  },
  {
    "text": "one part of your system is isolated from the other parts that's really great for robustness it means that if the intern",
    "start": "421520",
    "end": "427560"
  },
  {
    "text": "makes a bad deploy to one service it doesn't take down your whole application if if in a monolith if you know the",
    "start": "427560",
    "end": "433000"
  },
  {
    "text": "intern made a bad deploy and was suddenly throwing a fatal exception all the way up through the stack your whole app would be down your whole company",
    "start": "433000",
    "end": "438039"
  },
  {
    "text": "would just halt but in a service oriented architecture only the thing that they were messing with that day is down and it's probably not the most",
    "start": "438039",
    "end": "444080"
  },
  {
    "text": "crucial thing in your application because you gave it to the intern uh so at most it's going to take",
    "start": "444080",
    "end": "450720"
  },
  {
    "text": "down one service and that's cool uh and robustness also applies at the hardware level which is just simple math assume",
    "start": "450720",
    "end": "457000"
  },
  {
    "text": "that you are using the world's worst hardware and it has a 1% chance of failure on any given day which is significantly worse than any actual",
    "start": "457000",
    "end": "463879"
  },
  {
    "text": "Hardware the and imagine you have a hundred of these boxes the chances of all of those boxes failing at the same",
    "start": "463879",
    "end": "469879"
  },
  {
    "text": "time is this gigantic number which I enjoy printing out it's basically zero uh but the chance of one box",
    "start": "469879",
    "end": "477000"
  },
  {
    "text": "failing on any given day is exactly 100% you will definitely be have lose one box per day with this 1% Hardware because",
    "start": "477000",
    "end": "483360"
  },
  {
    "text": "you have 100 of them uh so this means two things first it means that you need redundancy in a service oriented",
    "start": "483360",
    "end": "489560"
  },
  {
    "text": "architecture you can't have only one kind of any service up because the chances of you losing that thing are",
    "start": "489560",
    "end": "495039"
  },
  {
    "text": "pretty high uh or if you don't care about it being down you can but the second is",
    "start": "495039",
    "end": "500960"
  },
  {
    "text": "that you need to be really good at replacing Hardware because when replacing Hardware when you have five boxes is a thing you do every couple of",
    "start": "500960",
    "end": "506840"
  },
  {
    "text": "months and it's okay if you have to relearn how to do it and you're like oh where are our app servers we don't even remember but in a service oriented",
    "start": "506840",
    "end": "513399"
  },
  {
    "text": "architecture this becomes not a daily thing not even with you know the world's crappiest Hardware it becomes like a weekly thing probably so you have to",
    "start": "513399",
    "end": "520719"
  },
  {
    "text": "automate the hell out of your deploys otherwise you're going to spend all of your time doing that uh but the payoff is that you",
    "start": "520719",
    "end": "527360"
  },
  {
    "text": "basically you know all of these things are a lot of work but the payoff is that you'll basically never be down you'll be this thing which is really cool since uh",
    "start": "527360",
    "end": "534320"
  },
  {
    "text": "prior to 2014 npm would go down for hours at a time if it went down at like",
    "start": "534320",
    "end": "539760"
  },
  {
    "text": "you know 10 at night we wouldn't notice until the next morning and so it would be down for 8 hours uh which was great",
    "start": "539760",
    "end": "545440"
  },
  {
    "text": "for our reputation uh but as of 2014 when we actually formed a company and started doing this uh npms registry up",
    "start": "545440",
    "end": "551519"
  },
  {
    "text": "time has been 99.998% uh which is 10 minutes per year",
    "start": "551519",
    "end": "557519"
  },
  {
    "text": "uh it's probably going to go down right now as a result of me making this boast and a talk um another simple but invaluable",
    "start": "557519",
    "end": "565720"
  },
  {
    "text": "Advantage is debug ability uh it's really simple it's it's it's seems like an obvious thing but because only one",
    "start": "565720",
    "end": "572480"
  },
  {
    "text": "one box only ever has one service you know that if that box is in trouble that service is in trouble and vice versa you",
    "start": "572480",
    "end": "578399"
  },
  {
    "text": "know if there's something weird happening on that box it can only be that service that's causing it you've eliminated a whole step in your",
    "start": "578399",
    "end": "585120"
  },
  {
    "text": "debugging so their services are easier to debug for that reason but once you get into",
    "start": "585120",
    "end": "590720"
  },
  {
    "text": "the service because the services are themselves simpler the services themselves are also easier to debug",
    "start": "590720",
    "end": "595920"
  },
  {
    "text": "because there's just less to them they're smaller there's only a certain amount of unique code in each service because they're each doing something very simple so debuging it is usually",
    "start": "595920",
    "end": "602800"
  },
  {
    "text": "pretty simple you're like oh there's 200 lines of code and this one you know has a semicolon in the wrong",
    "start": "602800",
    "end": "608399"
  },
  {
    "text": "place but strangely even despite those technical advantages which I like the real advantage of a service oriented",
    "start": "608839",
    "end": "614880"
  },
  {
    "text": "architecture for us and I think probably for you uh isn't about the technology it is about the organization that builds",
    "start": "614880",
    "end": "621160"
  },
  {
    "text": "the technology if you've ever heard of Conway's law Conway's law says that software reflects the structure of the",
    "start": "621160",
    "end": "628079"
  },
  {
    "text": "organization that built it so if you have a small fast lean team you will tend to produce small fast lean software",
    "start": "628079",
    "end": "634440"
  },
  {
    "text": "and if your team is you know an eight-way Byzantine fudal War uh then you'll have you know windows or",
    "start": "634440",
    "end": "640160"
  },
  {
    "text": "something uh but the reverse can also be true you can structure your software such that it",
    "start": "640160",
    "end": "647000"
  },
  {
    "text": "demands that teams be in in an efficient structure you can demand that you can demand that your software is built in a",
    "start": "647000",
    "end": "652839"
  },
  {
    "text": "way that makes for efficient teams so the first organizational",
    "start": "652839",
    "end": "657959"
  },
  {
    "text": "Advantage uh is simp that simpler systems are simpler each individual service is a",
    "start": "657959",
    "end": "664240"
  },
  {
    "text": "small isolated domain of understanding uh it has limited limited and easily understood inputs and outputs uh and",
    "start": "664240",
    "end": "671320"
  },
  {
    "text": "that makes it the make makes the whole service easier to fit into one human brain and that's really important because the human brain the size of a",
    "start": "671320",
    "end": "678440"
  },
  {
    "text": "human brain the capacity of a human brain is one of the hard and immovable limits of software development you cannot make a system that is larger than",
    "start": "678440",
    "end": "685720"
  },
  {
    "text": "one human brain without things going rapidly off the rails uh which is not a rails dig but it should have",
    "start": "685720",
    "end": "691639"
  },
  {
    "text": "me so because your services are smaller you can give those services to smaller teams and that is important because",
    "start": "691639",
    "end": "697959"
  },
  {
    "text": "communication within a group is another one of those unfixable pre people problems in in software development that",
    "start": "697959",
    "end": "703200"
  },
  {
    "text": "we cannot get rid of uh so imagine you've got this team of five people",
    "start": "703200",
    "end": "708240"
  },
  {
    "text": "ABCDE and uh communication within this group is not n it is not the number of",
    "start": "708240",
    "end": "713839"
  },
  {
    "text": "people in the group it is not even n s or n factorial it is basically Infinity you can easily imagine imagine a has to",
    "start": "713839",
    "end": "720160"
  },
  {
    "text": "talk to B and C uh and then they talk to D and E and they discover that e had some information that that a didn't have",
    "start": "720160",
    "end": "726120"
  },
  {
    "text": "before so e goes back to a and a talks to C again and then B is like oh I was sick that day and I missed it and suddenly everyone is angry and",
    "start": "726120",
    "end": "733000"
  },
  {
    "text": "confused and this will go on for a little while and eventually the information will ping pong back and forth and you know maybe a day later",
    "start": "733000",
    "end": "738480"
  },
  {
    "text": "everyone will reach equilibrium and suddenly everything will be happy again but if your team is bigger than this if your team is even twice the size that",
    "start": "738480",
    "end": "745680"
  },
  {
    "text": "basically never stops if you've been part of a a 50 person engineering team and I really hope you haven't you will",
    "start": "745680",
    "end": "750839"
  },
  {
    "text": "understand what I mean when I say that the the anger and confusion is basically continuous uh there's no way to get a",
    "start": "750839",
    "end": "757440"
  },
  {
    "text": "team of that many people all on the same page all at the same time it just can't be done there's only 24 hours in a day",
    "start": "757440",
    "end": "762480"
  },
  {
    "text": "to be talking to people so the smaller your team the more likely you are to eventually reach equilibrium and",
    "start": "762480",
    "end": "768399"
  },
  {
    "text": "actually be able to get things done without getting people very angry and upset so because teams smaller teams",
    "start": "768399",
    "end": "775000"
  },
  {
    "text": "have better communication they can move faster but there's not only that uh because working to get because that team",
    "start": "775000",
    "end": "781160"
  },
  {
    "text": "is working together on a smaller system because they can fit it all into their brain at the same time they will have a",
    "start": "781160",
    "end": "786320"
  },
  {
    "text": "better sense of ownership if the team feels they own the code and they can fit the whole system into their brain uh",
    "start": "786320",
    "end": "791720"
  },
  {
    "text": "they're going to be more Fearless about refactoring they're going to be faster at debugging they're going to write more comprehensive tests and they're just",
    "start": "791720",
    "end": "798199"
  },
  {
    "text": "going to be writing better software we are better at writing smaller software so the solution there is not to find",
    "start": "798199",
    "end": "803760"
  },
  {
    "text": "some magical way of writing big software it's to make sure our software never gets big so that is the flythrough part of",
    "start": "803760",
    "end": "811160"
  },
  {
    "text": "why SOA is great and this is where we are entering unknown territory because this is where I threw out the rest of the talk that I'd written yesterday uh",
    "start": "811160",
    "end": "818079"
  },
  {
    "text": "because in the previous version I was just talking about all the pitfalls of SOA and the things you need to avoid and I was like that seems like a real Downer",
    "start": "818079",
    "end": "824279"
  },
  {
    "text": "to go out on the talk with so how about instead I say what I think you should do to actually make this SOA work for you",
    "start": "824279",
    "end": "829839"
  },
  {
    "text": "what are the things that we found that worked and the things that we found to avoid uh but before I go into that I",
    "start": "829839",
    "end": "835839"
  },
  {
    "text": "said at the beginning that node is particularly good at SOA and why is that so firstly and most obviously node",
    "start": "835839",
    "end": "842839"
  },
  {
    "text": "is just good at web services when Ryan doal invented node tiny web services were exactly what he had in mind they",
    "start": "842839",
    "end": "849160"
  },
  {
    "text": "native to node it's what node expects you to do if you're not doing anything else you know the the hello world in",
    "start": "849160",
    "end": "855000"
  },
  {
    "text": "node is like build a web server that prints hello world uh and node is really great if your if",
    "start": "855000",
    "end": "862519"
  },
  {
    "text": "your workload looks like a web app if your workload is is highly concurrent and IO bound uh then you're really going",
    "start": "862519",
    "end": "869440"
  },
  {
    "text": "then you're going to be really good uh you're going to be writing node that is really working with the grain node is",
    "start": "869440",
    "end": "875320"
  },
  {
    "text": "really good at being high concurrent in iob Bound because that is what we were trying to solve at the time and that is a perfect fit for an",
    "start": "875320",
    "end": "882040"
  },
  {
    "text": "SOA and the next reason is node's cultural pattern of creating small and simple modules that we use together in",
    "start": "882040",
    "end": "888399"
  },
  {
    "text": "other languages because libraries are hard to use you tend to get these big kitchen syn libraries only two or three",
    "start": "888399",
    "end": "893639"
  },
  {
    "text": "of them per project and they do a bunch of stuff uh which means that you know per my example earlier have a lot of",
    "start": "893639",
    "end": "899600"
  },
  {
    "text": "stuff in memory all the time that's not doing anything it's just sitting there up using resources for no reason so",
    "start": "899600",
    "end": "904759"
  },
  {
    "text": "simpler modules that do only the thing you want mean really fantastic efficiency but finally the big reason is",
    "start": "904759",
    "end": "911839"
  },
  {
    "text": "that shared logic is easy in node and the reason that shared logic is easy in node is because not to you know toot my",
    "start": "911839",
    "end": "918240"
  },
  {
    "text": "own hor or anything because of npm and because of the node module loader so part of the reason that node",
    "start": "918240",
    "end": "925040"
  },
  {
    "text": "has small modules is because small modules are easy in node and the reason small mod modules are easy in no is",
    "start": "925040",
    "end": "930160"
  },
  {
    "text": "because of npm and the module loader and the way that they were run they were built at the same time with the",
    "start": "930160",
    "end": "935639"
  },
  {
    "text": "expectation that they would both be there npm puts stuff into the node modules folder in a pattern that the",
    "start": "935639",
    "end": "941160"
  },
  {
    "text": "module loader is expecting and the module loader loads stuff out of that uh out of that structure on dis in exactly",
    "start": "941160",
    "end": "947959"
  },
  {
    "text": "the way that npm was expecting it to and they work hand in hand and that is a unique feature of the node runtime system no other runtime system was built",
    "start": "947959",
    "end": "955199"
  },
  {
    "text": "with the expectation that a package manager would be there package managers were an after thought or a secondary",
    "start": "955199",
    "end": "960480"
  },
  {
    "text": "feature of every other runtime so people often credit npm with this",
    "start": "960480",
    "end": "966279"
  },
  {
    "text": "idea that npm eliminates dependency hell but it doesn't the node module loader eliminates dependency hell and npm just",
    "start": "966279",
    "end": "972399"
  },
  {
    "text": "sort of helps uh but because you can load multiple",
    "start": "972399",
    "end": "978560"
  },
  {
    "text": "versions of the same Library into memory at the same time with a node module loader it means the dependency held doesn't happen and that means that you",
    "start": "978560",
    "end": "984800"
  },
  {
    "text": "can be Fearless about including as many libraries with all of their sub dependencies as you want because you",
    "start": "984800",
    "end": "989880"
  },
  {
    "text": "know they're not going to fight with each other because it's literally impossible for them to fight with each other in node it just can't",
    "start": "989880",
    "end": "996160"
  },
  {
    "text": "happen so because of all of that node and npm let people share libraries frictionlessly uh but you still have",
    "start": "996160",
    "end": "1002800"
  },
  {
    "text": "little bits of internal logic not all everything that you publish not every module is a global module that you want to share with the world so if you have",
    "start": "1002800",
    "end": "1010000"
  },
  {
    "text": "stuff within your company that you want to keep within your company but you still want it to be a module because you want to share it within different parts of your SOA uh then npm has always let",
    "start": "1010000",
    "end": "1018399"
  },
  {
    "text": "you doing do this using private git repositories you can just set your dependency to be a git repo and it will",
    "start": "1018399",
    "end": "1023440"
  },
  {
    "text": "pull it down uh but in the last year uh we have introduced npm organizations",
    "start": "1023440",
    "end": "1028480"
  },
  {
    "text": "those let teams of let you create teams of people within the npm registry and share modules privately to only that",
    "start": "1028480",
    "end": "1034438"
  },
  {
    "text": "team uh that is really great for smaller companies but if you're a bigger Enterprise company and you want to use your internal signin or you have really",
    "start": "1034439",
    "end": "1041760"
  },
  {
    "text": "strict security requirements or you have strict licensing requirements about which types of software you can use uh",
    "start": "1041760",
    "end": "1047360"
  },
  {
    "text": "then we built npm onite uh which I'm going to talk about very briefly later which will do that stuff",
    "start": "1047360",
    "end": "1052520"
  },
  {
    "text": "for you so it's all very well me telling you that you should build Ana because it's",
    "start": "1052520",
    "end": "1058559"
  },
  {
    "text": "great and that you should build it in node because node is great at SAS but how exactly so like I said we spent two",
    "start": "1058559",
    "end": "1063880"
  },
  {
    "text": "years building a a SOA and node and we've picked up a few things that I thought would be useful to share and",
    "start": "1063880",
    "end": "1069600"
  },
  {
    "text": "they apply at the application Level at the architectural level and not the operational",
    "start": "1069600",
    "end": "1074679"
  },
  {
    "text": "level the first application Level principle is isolation you should isolate your data sources",
    "start": "1074679",
    "end": "1081000"
  },
  {
    "text": "each data source should be talking to exactly one service you should not trust your services to respect each other's",
    "start": "1081000",
    "end": "1086559"
  },
  {
    "text": "data Integrity because that usually doesn't work out especially when you have a big team that are fighting with each",
    "start": "1086559",
    "end": "1091640"
  },
  {
    "text": "other uh so if you do that if you set one service per data source how do you",
    "start": "1091640",
    "end": "1097440"
  },
  {
    "text": "square that with the idea that your service should have only one task your service should be as simple as possible what if I have two types of tasks that",
    "start": "1097440",
    "end": "1103799"
  },
  {
    "text": "require the same data source and the way to get around that is to be rigorous about splitting the dat",
    "start": "1103799",
    "end": "1109720"
  },
  {
    "text": "uh the example that I use is if you have two services that both need to talk to the data source but their functions are",
    "start": "1109720",
    "end": "1115200"
  },
  {
    "text": "not really aligned but one of them is editing and writing to the data source and one of them is only reading to the data source you don't really need them",
    "start": "1115200",
    "end": "1120440"
  },
  {
    "text": "to be talking to the same data source you can create a mirror or a copy of the first data source and have one service talking to that and one service talking",
    "start": "1120440",
    "end": "1126880"
  },
  {
    "text": "to the other you can just have replication or some other form of uh copying to make that happen which has other advantages which I'm going to talk",
    "start": "1126880",
    "end": "1133200"
  },
  {
    "text": "about in a bit uh and another hard lesson we've learned",
    "start": "1133200",
    "end": "1138600"
  },
  {
    "text": "in an environment that has 17 services that is what makes up the registry uh is that those Services need to be",
    "start": "1138600",
    "end": "1144559"
  },
  {
    "text": "consistently designed or you will send your whole life confused you'll be constantly going oh how did we invent",
    "start": "1144559",
    "end": "1150120"
  },
  {
    "text": "logging in this one and how did how does this one find its configuration and how does this one remember who the user is",
    "start": "1150120",
    "end": "1156120"
  },
  {
    "text": "so you should be logging consistently not just the requests but the results of those requests logging failures is great",
    "start": "1156120",
    "end": "1162520"
  },
  {
    "text": "but logging success is important because if your node application crashes and all you've seen is a request and nothing",
    "start": "1162520",
    "end": "1168240"
  },
  {
    "text": "after it that looks like that looks like success because nothing happened you didn't see a failure get logged but what",
    "start": "1168240",
    "end": "1173360"
  },
  {
    "text": "actually happened was a terrible type of failure where it was such a big failure that it didn't even manage to log of failure uh because Success is Not merely",
    "start": "1173360",
    "end": "1180720"
  },
  {
    "text": "the absence of failure uh and speaking of that we have developed really strong opinions about",
    "start": "1180720",
    "end": "1186280"
  },
  {
    "text": "how error handling should work if your service doesn't know what to do if it gets into a corner that you weren't",
    "start": "1186280",
    "end": "1191520"
  },
  {
    "text": "expecting if the programmer was like this can never happen your program should crash that is what it should do",
    "start": "1191520",
    "end": "1197679"
  },
  {
    "text": "uh and it shouldn't just crash and your whole service should go down a parent process should be watching it for crashes and restarting it as soon as it",
    "start": "1197679",
    "end": "1204080"
  },
  {
    "text": "crashes because that is the best kind of recovery any kind of recovery where you're like all right well it crashed so we're going to have an exception Handler",
    "start": "1204080",
    "end": "1210440"
  },
  {
    "text": "at the top and we're going to try and recover State and put things back to how they were and start again it is doomed to failure because if you could expect",
    "start": "1210440",
    "end": "1217159"
  },
  {
    "text": "how it was going to fail it wouldn't have failed that way so by definition the only way the only reason you're",
    "start": "1217159",
    "end": "1222240"
  },
  {
    "text": "going to be hitting a crash bug is if something really weird is going on and you won't expect what that weird way so",
    "start": "1222240",
    "end": "1228440"
  },
  {
    "text": "you won't be recovering accurately from that state so instead just crash because then your program will start again and",
    "start": "1228440",
    "end": "1234039"
  },
  {
    "text": "it will start again from a known state it will start again from the beginning and go okay this is 0 Z I know how to go",
    "start": "1234039",
    "end": "1239320"
  },
  {
    "text": "from here obviously if you have you know if you've designed a system that just crashes all the time and restarts all",
    "start": "1239320",
    "end": "1244880"
  },
  {
    "text": "the time that leads to a situation where you can just be like oh we didn't realize it crashed 300 times a second",
    "start": "1244880",
    "end": "1250200"
  },
  {
    "text": "and that was fine so you need to put some men some monitoring and some metrics around that you should need to know how often your service is",
    "start": "1250200",
    "end": "1256320"
  },
  {
    "text": "restarting itself so that you can check if you've got a crash bug uh but most importantly your",
    "start": "1256320",
    "end": "1262520"
  },
  {
    "text": "services must share logic I said that that was easy uh so your logging should be a module",
    "start": "1262520",
    "end": "1270039"
  },
  {
    "text": "your monitoring should be a module how you load configuration should be a module they don't have to be a global module that somebody else wrote If you",
    "start": "1270039",
    "end": "1276440"
  },
  {
    "text": "need to do something weird and specific to yourself or you just need you know you just have your own requirements for doing that make it your own private",
    "start": "1276440",
    "end": "1282600"
  },
  {
    "text": "module but it should be a module and the code that is part of your service should be only the code that is unique to that",
    "start": "1282600",
    "end": "1289520"
  },
  {
    "text": "service the smaller you can keep the volume of unique code in your service the easier it's going to be to debug I",
    "start": "1289520",
    "end": "1296240"
  },
  {
    "text": "was talking at the beginning about how it's only 200 lines a lot of our services are only 200 lines and that's",
    "start": "1296240",
    "end": "1301919"
  },
  {
    "text": "great it doesn't mean that we've you know been proplate with our number of services it means that we can debug things with one screen of code which is",
    "start": "1301919",
    "end": "1308039"
  },
  {
    "text": "super useful so the less unique code the easier to debug and the easier to",
    "start": "1308039",
    "end": "1314080"
  },
  {
    "text": "understand and next we come to the architectural principles uh first and foremost get used to being asynchronous",
    "start": "1314080",
    "end": "1321559"
  },
  {
    "text": "uh many fewer things need to be uh instantaneous than you believe you do not need to be transactional about",
    "start": "1321559",
    "end": "1327440"
  },
  {
    "text": "everything be as eventually consistent as you can possibly get away with uh use",
    "start": "1327440",
    "end": "1332760"
  },
  {
    "text": "Q's liberally both for input and for output we use couchdb which turns our entire database into basically an event",
    "start": "1332760",
    "end": "1339360"
  },
  {
    "text": "queue uh which is basically the only thing that couchdb is good at uh and",
    "start": "1339360",
    "end": "1345120"
  },
  {
    "text": "that's a incredibly useful pattern that I'm going to talk about in a second and you should also be handling back pressure when a downstream service says",
    "start": "1345120",
    "end": "1351960"
  },
  {
    "text": "that it is too busy to absorb your request right now your Upstream service should be able to cue those up back off",
    "start": "1351960",
    "end": "1357799"
  },
  {
    "text": "and say okay I'll start sending these again when you're",
    "start": "1357799",
    "end": "1361919"
  },
  {
    "text": "ready because your architecture is distributed and networks are inherently flaky things you need to expect that and",
    "start": "1362880",
    "end": "1369000"
  },
  {
    "text": "you need to handle that you need to detect a network timeout you need to detect a network hang you can't just",
    "start": "1369000",
    "end": "1374480"
  },
  {
    "text": "assume that everything is going to work the way it's supposed to you have to expect that sometimes you know Amazon's",
    "start": "1374480",
    "end": "1379600"
  },
  {
    "text": "going to have a hiccup and this thing that you thought was an open TCP connection is just going to hang for 60 seconds you're going to be like all",
    "start": "1379600",
    "end": "1384679"
  },
  {
    "text": "right I need to drop this because nothing has happened so and when you've done those things you need to recover automatically",
    "start": "1384679",
    "end": "1390640"
  },
  {
    "text": "you need to retry automatically you need and once you're doing that you need to avoid thundering herds which is when you",
    "start": "1390640",
    "end": "1396640"
  },
  {
    "text": "have dozens of boxes that rely on a service all of which have seen that that service has gone away and when that service comes back up they go oh thank",
    "start": "1396640",
    "end": "1403000"
  },
  {
    "text": "God and they all jump on it at the same time and it goes down again they have to be backing off they have to be expecting",
    "start": "1403000",
    "end": "1408240"
  },
  {
    "text": "that there's going to be other services around competing for the same resource so you should also be failing",
    "start": "1408240",
    "end": "1415400"
  },
  {
    "text": "softly can you serve stale cached content if your service is down a lot of the time you can and if you can you",
    "start": "1415400",
    "end": "1421120"
  },
  {
    "text": "should you should fail safely if your authentication service is down but there's some class of things that it",
    "start": "1421120",
    "end": "1426320"
  },
  {
    "text": "does that don't require any authentication its failure mode should be well this doesn't require authentication anyway so I'm just not",
    "start": "1426320",
    "end": "1432320"
  },
  {
    "text": "going to ask the authentication Service it's down I'm just going to go merily on serving this public content",
    "start": "1432320",
    "end": "1440080"
  },
  {
    "text": "and the last architectural thing is that a distributed system has race conditions it will have lots and lots of race",
    "start": "1440080",
    "end": "1445520"
  },
  {
    "text": "conditions anything that can happen out of order will happen out of order uh and stuff that usually takes one second will",
    "start": "1445520",
    "end": "1451440"
  },
  {
    "text": "take 40 seconds unexpectedly sometimes people will try to publish the same version of the same package at the same",
    "start": "1451440",
    "end": "1457159"
  },
  {
    "text": "time from 30 different boxes that was a thing we were like when we designed the system we were like no one's ever going to do that it's no problem that there's",
    "start": "1457159",
    "end": "1462640"
  },
  {
    "text": "a raise condition about that half no no people were doing exactly the same publish from 30 machines at the same",
    "start": "1462640",
    "end": "1468200"
  },
  {
    "text": "time time because that was their build farm and every single box in their build farm would try to publish the package at the same time we were like you can't do",
    "start": "1468200",
    "end": "1474799"
  },
  {
    "text": "that you can only do one public one package publish of one version and the other 29 are going to fail and they were like we don't care which one we like",
    "start": "1474799",
    "end": "1482080"
  },
  {
    "text": "okay I guess we have to handle that now uh but the problem with race conditions is that there's no magic bullet there's",
    "start": "1482080",
    "end": "1487960"
  },
  {
    "text": "no there's no piece of advice I can give you it's like ah and this will mean that you never run into race conditions the only you can do with race conditions is",
    "start": "1487960",
    "end": "1493679"
  },
  {
    "text": "be aware that it's nearly always going to be a race condition finally there are the",
    "start": "1493679",
    "end": "1499440"
  },
  {
    "text": "operational lessons we learned uh your configuration should have a central source of Truth we tried it every other",
    "start": "1499440",
    "end": "1505799"
  },
  {
    "text": "way before we tried that way and all of the other ones sucked we use etcd to save our configuration data etcd is",
    "start": "1505799",
    "end": "1512000"
  },
  {
    "text": "itself a distributed system so we cram all of our distributed information to this other distributed system and hope that those programmers were better at",
    "start": "1512000",
    "end": "1517679"
  },
  {
    "text": "distributed systems than we were uh and your services should pick up that configuration at deploy time not at",
    "start": "1517679",
    "end": "1524559"
  },
  {
    "text": "startup time and definitely not at restart time your your service should only change its configuration when you",
    "start": "1524559",
    "end": "1529960"
  },
  {
    "text": "were explicitly expecting it to because any kind of system where you can push configuration to all of your machines",
    "start": "1529960",
    "end": "1535320"
  },
  {
    "text": "you're going to accidentally create a bad configuration and you're going to destroy all of your machines at the same time a distributed system doesn't work",
    "start": "1535320",
    "end": "1542600"
  },
  {
    "text": "if the components don't fail independently and if you have a system with where all of your services are constantly getting pushed configuration",
    "start": "1542600",
    "end": "1549039"
  },
  {
    "text": "or they're occasionally pulling for configuration then you've created a single point of failure that is your configuration and getting it wrong will",
    "start": "1549039",
    "end": "1555240"
  },
  {
    "text": "take out all of your services at the same time so uh as I mentioned earlier deployment",
    "start": "1555240",
    "end": "1563600"
  },
  {
    "text": "in SOA is constant it's no longer this thing you do once in a while it's this thing that you do every day whether you",
    "start": "1563600",
    "end": "1569000"
  },
  {
    "text": "want to or not boxes are going to fail frequently so you need to automate the hell out of your deploys uh we use anible to do uh to automate our software",
    "start": "1569000",
    "end": "1576559"
  },
  {
    "text": "deployments and we are moving to terraform to do the hardware deployment as well which is a really cool system so now you can just say Okay this system",
    "start": "1576559",
    "end": "1583559"
  },
  {
    "text": "exists on a box of this size and it has all of this software on it and I'm going to hit a button and it's going to create the whole box and put all of the",
    "start": "1583559",
    "end": "1589240"
  },
  {
    "text": "software on it and Plum it into place with all of the networking which is super cool and eliminates a whole class",
    "start": "1589240",
    "end": "1594520"
  },
  {
    "text": "of job at npm uh we also find Canary extremely",
    "start": "1594520",
    "end": "1599840"
  },
  {
    "text": "useful that is where you deploy new code to production but only for 2 to 3% of traffic uh because you have code and",
    "start": "1599840",
    "end": "1607279"
  },
  {
    "text": "you've tested your code but you tend to test code with the data that you were expecting you test code with the data that you thought would be uh that you",
    "start": "1607279",
    "end": "1613760"
  },
  {
    "text": "thought would be there and the problem with production traffic is that people do really really weird things in production people are like yeah I know",
    "start": "1613760",
    "end": "1620880"
  },
  {
    "text": "that you're the your npm but I was expecting a maven repository so I'm going to send you thousands of requests for Java files and see what happens we",
    "start": "1620880",
    "end": "1627120"
  },
  {
    "text": "used to throw a lot of 500s for uh misconfigured copies of artifactory which for some reason thought that we",
    "start": "1627120",
    "end": "1632919"
  },
  {
    "text": "were a maven repository um so putting that putting the canary in",
    "start": "1632919",
    "end": "1639559"
  },
  {
    "text": "for for 2 to 3% of traffic it means that deploys take longer because we have to sit the canary there for 24 hours to",
    "start": "1639559",
    "end": "1645320"
  },
  {
    "text": "make sure that nothing really weird happens but it means that if we've done a crap deploy the worst that can happen is we temporarily inconvenience 2% of",
    "start": "1645320",
    "end": "1651960"
  },
  {
    "text": "our users and the other 90% of our 98% of our users don't notice that we did that terrible",
    "start": "1651960",
    "end": "1658159"
  },
  {
    "text": "deploy and there's one other trap which we found it crucial to avoid is cold starts uh this was the uh when GitHub",
    "start": "1658399",
    "end": "1666080"
  },
  {
    "text": "went down last week for two hours this was the problem that they were having if all of your services are down can you",
    "start": "1666080",
    "end": "1672159"
  },
  {
    "text": "bring all of your services back up that sounds like you should be able to do it right but once you're running a really",
    "start": "1672159",
    "end": "1677480"
  },
  {
    "text": "distributed system where there's tons and tons of boxes you get used to them being there and you begin to optimize",
    "start": "1677480",
    "end": "1682720"
  },
  {
    "text": "for the case of deploying one new service inside the SE of other services so you what GitHub did is they ended up",
    "start": "1682720",
    "end": "1689120"
  },
  {
    "text": "with a service that was relying on its reddest servers to already be up so that it could start its application server",
    "start": "1689120",
    "end": "1695000"
  },
  {
    "text": "but instead there was a power failure that took everything down at the same time and so the Reddit server couldn't come up and the application couldn't",
    "start": "1695000",
    "end": "1700559"
  },
  {
    "text": "server couldn't come up because reddis wasn't there and redus was relying on the application server to be there to be able to come back up and that is why",
    "start": "1700559",
    "end": "1706679"
  },
  {
    "text": "they were down for 2 hours cuz they had to to fix that so uh to solve this problem for us there",
    "start": "1706679",
    "end": "1712679"
  },
  {
    "text": "is a tiny little copy of the registry which exists only to allow the registry to deploy itself because if the registry",
    "start": "1712679",
    "end": "1718320"
  },
  {
    "text": "is down you can't install the node modules that make up the registry so there's a tiny little registry that only deploys the registry and it's sat there",
    "start": "1718320",
    "end": "1725279"
  },
  {
    "text": "for two years and it's been used exactly once in that two years but that one time was extremely",
    "start": "1725279",
    "end": "1732200"
  },
  {
    "text": "important the next thing is metrics metrics are crucial to running an SOA uh because there's so much more of your",
    "start": "1732200",
    "end": "1738399"
  },
  {
    "text": "system to understand and and it can fail in so many more ways so over time new",
    "start": "1738399",
    "end": "1744120"
  },
  {
    "text": "hotpots are going to emerge services that Ed to be fast are going to slowly slow down as new code is added uh the or",
    "start": "1744120",
    "end": "1750320"
  },
  {
    "text": "the performance characteristics will change in other ways so you need to capture everything that is going on in your system uh like request sources and",
    "start": "1750320",
    "end": "1757480"
  },
  {
    "text": "frequency and size and your response types and their size and how fast they happen and just every type of event that",
    "start": "1757480",
    "end": "1763480"
  },
  {
    "text": "you can think of that happens in your system you should just be throwing it at some kind of metric server and once",
    "start": "1763480",
    "end": "1768519"
  },
  {
    "text": "you've got all of these metrics you should be doing stuff with them and you should be doing stuff with them in advance you should be creating realtime",
    "start": "1768519",
    "end": "1774360"
  },
  {
    "text": "dashboards and real-time dashboards feels like this sort of enterpris thing that nobody really needs but the fastest",
    "start": "1774360",
    "end": "1780760"
  },
  {
    "text": "form of debugging is to be able to pull up a dashboard of graphs and go whoa that one has a huge spike in it that",
    "start": "1780760",
    "end": "1785840"
  },
  {
    "text": "wasn't there yesterday what is that Spike that is how we debug stuff about half of the time we're like oh one of",
    "start": "1785840",
    "end": "1791880"
  },
  {
    "text": "the one of the pretty pictures is really weird looking today that must be the bug",
    "start": "1791880",
    "end": "1797039"
  },
  {
    "text": "so you can do it that way you can do it just by visual inspection but if you if you really want to get fancy you can",
    "start": "1797039",
    "end": "1803080"
  },
  {
    "text": "start putting monitoring around the normal values of your metrics you can say this is the range in which this",
    "start": "1803080",
    "end": "1808320"
  },
  {
    "text": "metric usually exists and I'm just going to trigger alert as soon as it drifts out of that you don't have to wait for the system to actually",
    "start": "1808320",
    "end": "1814799"
  },
  {
    "text": "fail so that is all of the stuff that we learned about running an S SOA and how to run an SOA well and I figured that",
    "start": "1814799",
    "end": "1820880"
  },
  {
    "text": "showing you how that actually works uh in npm uh is a good idea uh but I left",
    "start": "1820880",
    "end": "1826399"
  },
  {
    "text": "it until last in case the rest of the was over time which it seems it's not quite yet I have like seven more minutes",
    "start": "1826399",
    "end": "1833519"
  },
  {
    "text": "right uh so what is npm you'd think I'd have",
    "start": "1833519",
    "end": "1838559"
  },
  {
    "text": "had to cover that first but you all sort of you know winging it npm is this thing in the cloud uh npm is four things npm",
    "start": "1838559",
    "end": "1845880"
  },
  {
    "text": "is npm the CLI the command line client that you run every day npm is the registry the public registry at",
    "start": "1845880",
    "end": "1851120"
  },
  {
    "text": "registry. npm.org which is where the client downloads and publishes the packages uh and it's uh npm the website",
    "start": "1851120",
    "end": "1858039"
  },
  {
    "text": "which we call dubdub uh which is the primary npm website where everybody reads packages and documentation and",
    "start": "1858039",
    "end": "1863600"
  },
  {
    "text": "then it's R and then there's npm on-site which is a tiny copy of npm which runs inside the firewall of of of big and",
    "start": "1863600",
    "end": "1870240"
  },
  {
    "text": "hopefully price insensitive corporations uh fun fact we did a poll",
    "start": "1870240",
    "end": "1875720"
  },
  {
    "text": "yesterday and found that something like 21% of npm users think that npm just",
    "start": "1875720",
    "end": "1880799"
  },
  {
    "text": "downloads stuff from GitHub all the time uh so if you're one of those people now",
    "start": "1880799",
    "end": "1886320"
  },
  {
    "text": "you know we run a bunch of servers and they have the tarballs on them and that is what npm is doing it's downloading them from us I kind of want want to run",
    "start": "1886320",
    "end": "1893720"
  },
  {
    "text": "like a follow-up poll which is like what do you think all of these people I hired do like do you think they all run the",
    "start": "1893720",
    "end": "1899039"
  },
  {
    "text": "website because the website's not nearly as good as 27 people would would expect uh but back to the architecture",
    "start": "1899039",
    "end": "1907559"
  },
  {
    "text": "what may not be immediately obvious from those four things is that they're actually really one big thing they are a",
    "start": "1907559",
    "end": "1913360"
  },
  {
    "text": "single gigantic service oriented architecture which shared services and shared logic",
    "start": "1913360",
    "end": "1918399"
  },
  {
    "text": "and I can show you how that works this is the simple version uh you can see users talking to the CLI on the website",
    "start": "1918399",
    "end": "1924200"
  },
  {
    "text": "both the CLI and the website us are CDN the CLI and the website both use the registry on-site users hit their own",
    "start": "1924200",
    "end": "1930399"
  },
  {
    "text": "copy of on-site and onsite itself talks to the registry here is the less simple",
    "start": "1930399",
    "end": "1936639"
  },
  {
    "text": "version I should be honest that this diagram is meant to be deliberately confusing its file name is show uh",
    "start": "1936639",
    "end": "1944000"
  },
  {
    "text": "it is accurate but it's not even complete uh there's actually more stuff than this in this diagram because we tacked on a couple more uh worldwide",
    "start": "1944000",
    "end": "1950600"
  },
  {
    "text": "servers recently and there's a couple Services I didn't picture uh but I can break it down for you first is the",
    "start": "1950600",
    "end": "1956000"
  },
  {
    "text": "CLI it's sort of arguable whether you can consider a command line client to be part of a service oriented architecture",
    "start": "1956000",
    "end": "1961600"
  },
  {
    "text": "because it's not a server right uh but the reason I do is because there is shared logic there's not as much shared",
    "start": "1961600",
    "end": "1967799"
  },
  {
    "text": "logic as we would hope in fact basically the only thing that is shared between the CLI and anything else is the bit that validates what is the valid name of",
    "start": "1967799",
    "end": "1973919"
  },
  {
    "text": "a package but it is shared everywhere it's the command line client thinks it the website thinks it the registry thinks it",
    "start": "1973919",
    "end": "1981159"
  },
  {
    "text": "uh and also the C is the largest consumer of the registry so when you're thinking of creating contracts between",
    "start": "1981159",
    "end": "1986799"
  },
  {
    "text": "the services and your service oriented architecture you have to think what is the CLI going to do uh the most complicated portion of",
    "start": "1986799",
    "end": "1993919"
  },
  {
    "text": "our of our architecture is the registry uh in simplified form it looks like this",
    "start": "1993919",
    "end": "1999399"
  },
  {
    "text": "with the bottom cut off uh there's a CDN that does a ton of caching which is why everything is nice and fast uh and all",
    "start": "1999399",
    "end": "2005559"
  },
  {
    "text": "of the cach misses go to our front door service which is essentially a router the front door calls the off web service",
    "start": "2005559",
    "end": "2012000"
  },
  {
    "text": "uh to authenticate every request and a lot of interactions with the registry are Anonymous uh so that's often very",
    "start": "2012000",
    "end": "2017440"
  },
  {
    "text": "simple I was saying earlier that if you can get away with it just don't talk to your authentication Service and that is what we do for 99% of requests 99% of",
    "start": "2017440",
    "end": "2023880"
  },
  {
    "text": "requests are for packages that are obviously public and will always be public so we just don't bother to talk to our authentication Service which",
    "start": "2023880",
    "end": "2029600"
  },
  {
    "text": "means that it's our reliability is good and our Hardware requirements for that service are really low uh behind the off service is the",
    "start": "2029600",
    "end": "2037840"
  },
  {
    "text": "Access Control list which if you're not a public package it's like which of the users is allowed to see this and further",
    "start": "2037840",
    "end": "2042880"
  },
  {
    "text": "behind that is the license API which is if you are a paid customer can you have you actually paid for all of this stuff",
    "start": "2042880",
    "end": "2048320"
  },
  {
    "text": "that we're doing for you continuing our lightning registry store uh our lightning registry tour",
    "start": "2048320",
    "end": "2054720"
  },
  {
    "text": "rather is the delightfully named validate and store service which as you imagine uh validates and stores packages",
    "start": "2054720",
    "end": "2061079"
  },
  {
    "text": "it stores them in two places in the binary store and the metadata store depending whether it's the package Json or the actual binary file uh",
    "start": "2061079",
    "end": "2068679"
  },
  {
    "text": "and the binary stores are literally just you know computers with very large hard drives we went with lots of other",
    "start": "2068679",
    "end": "2074560"
  },
  {
    "text": "complicated ways that you can do that and we were eventually like you know file systems are really great and they're really efficient let's just cram everything onto a file system and put a",
    "start": "2074560",
    "end": "2081240"
  },
  {
    "text": "lot of replication and backups in there and see if see if everything works and it does uh if you're installing a",
    "start": "2081240",
    "end": "2086760"
  },
  {
    "text": "package then it's just going to go straight to the binary store and pull it straight out of there and send it through to the CDN without talking to",
    "start": "2086760",
    "end": "2092158"
  },
  {
    "text": "anything else tacked on to the right you will see that there's a set of servic which are",
    "start": "2092159",
    "end": "2098320"
  },
  {
    "text": "relatively recent Edition called the followers uh I said that we use couchdb as an event queue and this is the",
    "start": "2098320",
    "end": "2103960"
  },
  {
    "text": "followers are what are using couch TB as an event queue they basically listen for every single publish event every change",
    "start": "2103960",
    "end": "2109599"
  },
  {
    "text": "to happen that happens to every package on the registry and they look for things whatever those things are that are",
    "start": "2109599",
    "end": "2115240"
  },
  {
    "text": "important to that service so there's one uh called the credentials follower which is unpacking packages and seeing if you",
    "start": "2115240",
    "end": "2121160"
  },
  {
    "text": "accidentally left your password inside the package or an off token of some kind this used to be a big problem with the registry there were lots of people who",
    "start": "2121160",
    "end": "2127280"
  },
  {
    "text": "were accidentally had dot files inside of their packages that had all of their credentials uh and now that doesn't",
    "start": "2127280",
    "end": "2133640"
  },
  {
    "text": "happen anymore if the credentials follower finds that you've accidentally leaked your tokens it unpublish the package and it sends you an email going",
    "start": "2133640",
    "end": "2140040"
  },
  {
    "text": "hey you did that thing that was pretty dumb uh there's also a tarball follower",
    "start": "2140040",
    "end": "2145960"
  },
  {
    "text": "like I said we're a really distributed system and we had this problem which is that if you publish a package that package needs to go to all of the",
    "start": "2145960",
    "end": "2151839"
  },
  {
    "text": "servers worldwide which meant that publishes the more worldwide uh points of presence we added the slower the the",
    "start": "2151839",
    "end": "2157720"
  },
  {
    "text": "Publishers got because it had to copy them not just to you it had to copy them to you know the west coast and the east coast and Australia and Asia Pac uh so",
    "start": "2157720",
    "end": "2165079"
  },
  {
    "text": "the tball followers how we fix that the Tarbell follower lets you publish to just one of the locals whichever one",
    "start": "2165079",
    "end": "2170240"
  },
  {
    "text": "you're closest to and then the Tarbell follower listens for that event and copies it to all the other ones uh that",
    "start": "2170240",
    "end": "2175640"
  },
  {
    "text": "creates obviously a race condition where it's possible for somebody in Asia Pac to ask for something that hasn't yet reached Asia Pac uh and we use some",
    "start": "2175640",
    "end": "2182040"
  },
  {
    "text": "fallover logic in the CDN to go if you can't find it there try all of the other servers first uh doing that made the registry",
    "start": "2182040",
    "end": "2189000"
  },
  {
    "text": "publishes twice as fast which was a pretty cool cool thing to have done two weeks",
    "start": "2189000",
    "end": "2194160"
  },
  {
    "text": "ago nearly out of time next is the website and this is where SOA really begins to pay off because there's almost",
    "start": "2194160",
    "end": "2199440"
  },
  {
    "text": "nothing new here everything else here you've seen before the only new things are the registry API and elastic search these are two new followers uh the",
    "start": "2199440",
    "end": "2206520"
  },
  {
    "text": "registry API is following everything in the in the database and it's turning it into a relational registry because couch",
    "start": "2206520",
    "end": "2211920"
  },
  {
    "text": "is not a very good database it's really only good at being an event queue so you can't really query it very efficiently",
    "start": "2211920",
    "end": "2217240"
  },
  {
    "text": "but relational databases they're really good at being queried so we copy everything into a relational database and that is what serves the website uh",
    "start": "2217240",
    "end": "2224040"
  },
  {
    "text": "the other one is elastic search elastic search is another database optimized for search and there's a follower that fills",
    "start": "2224040",
    "end": "2229640"
  },
  {
    "text": "it up with stuff without having to do a direct copy all the time I'm going to go a little bit faster now uh finally",
    "start": "2229640",
    "end": "2235800"
  },
  {
    "text": "there's npm onsite and this is where I get really happy about s SOA because npm onsite is literally a copy of the",
    "start": "2235800",
    "end": "2241560"
  },
  {
    "text": "registry architecture it's exactly the same Services exactly the same code just crammed down into a couple of Docker",
    "start": "2241560",
    "end": "2247119"
  },
  {
    "text": "containers and deployed wherever it is that you want it to be uh which is great because it means that when our customers",
    "start": "2247119",
    "end": "2253319"
  },
  {
    "text": "find problems in npm onsite we fix them there and suddenly the whole registry works better and vice versa when we fix something in the global registry npm",
    "start": "2253319",
    "end": "2259560"
  },
  {
    "text": "onsite works really well and it also means that we can be super confident about the scaling abilities of npm",
    "start": "2259560",
    "end": "2264960"
  },
  {
    "text": "onsite because until your corporation is as big as all of the other JavaScript developers in the world npm onite is",
    "start": "2264960",
    "end": "2271720"
  },
  {
    "text": "going to be able to handle your load there's a couple other cool things going on that I'm probably going to skip",
    "start": "2271720",
    "end": "2277760"
  },
  {
    "text": "through because I'm pretty much out of time I think uh so some takeaway messages UHA is",
    "start": "2277760",
    "end": "2284720"
  },
  {
    "text": "pretty neat not is pretty good at SOA you too can be really good at SOA and npm is pretty neat thank you very",
    "start": "2284720",
    "end": "2291180"
  },
  {
    "text": "[Applause]",
    "start": "2291180",
    "end": "2301150"
  },
  {
    "text": "much",
    "start": "2301760",
    "end": "2304760"
  }
]