[
  {
    "start": "0",
    "end": "228000"
  },
  {
    "text": "good morning",
    "start": "4640",
    "end": "7200"
  },
  {
    "text": "and welcome uh thank you for joining us to hear our talk about pragmatism which is rampant at stalin bank by way of introduction",
    "start": "10719",
    "end": "18640"
  },
  {
    "text": "um starling was founded by our ceo ann bowdan in 2014 in reaction to the banking",
    "start": "18640",
    "end": "24640"
  },
  {
    "text": "crisis and believed and continues to believe now that customers need to be treated",
    "start": "24640",
    "end": "29760"
  },
  {
    "text": "fairly to be empowered and that building a bank on modern technology is the best way to achieve this martin and",
    "start": "29760",
    "end": "37360"
  },
  {
    "text": "i started within about a month of each other four years ago as then of a very small team just two of",
    "start": "37360",
    "end": "44320"
  },
  {
    "text": "a couple of engineers and i'm now practice lead for web technologies which makes me responsible for anything",
    "start": "44320",
    "end": "50719"
  },
  {
    "text": "that runs in the browser and how it gets there ideally quickly and securely",
    "start": "50719",
    "end": "58879"
  },
  {
    "text": "uh and i'm martin i'm engineering lead for core banking where i deal with services at the heart",
    "start": "58879",
    "end": "64478"
  },
  {
    "text": "of the bank involving finance treasury credit fraud",
    "start": "64479",
    "end": "69680"
  },
  {
    "text": "and to achieve anne's mission starling has always been a really customer and delivery focused",
    "start": "69680",
    "end": "75840"
  },
  {
    "text": "organization and that has translated into a pretty pragmatic engineering culture",
    "start": "75840",
    "end": "81119"
  },
  {
    "text": "um dan and i we sit at sort of opposite ends of the technology stack but we thought it'd be really interesting to talk to you today about actually how",
    "start": "81119",
    "end": "88640"
  },
  {
    "text": "similar many things are across those two different areas if you dig a little beneath the surface",
    "start": "88640",
    "end": "94720"
  },
  {
    "text": "so we're going to start by talking about with some ideas some some theory we'll",
    "start": "94720",
    "end": "99759"
  },
  {
    "text": "talk about complexity a bit about relational modelling uh functions projections and that will mainly give us a bit of a",
    "start": "99759",
    "end": "106399"
  },
  {
    "text": "language to help explain how we think about our systems and then we're going to",
    "start": "106399",
    "end": "111600"
  },
  {
    "text": "use that language to describe a couple of slightly more practical examples there's a web guy over here he's going",
    "start": "111600",
    "end": "117040"
  },
  {
    "text": "to talk to us about um how that theory applies in the web stack and i'm going to try and do the same in",
    "start": "117040",
    "end": "122479"
  },
  {
    "text": "my neck of the woods talk about the banking ledger and how we push data around our platform and then",
    "start": "122479",
    "end": "128160"
  },
  {
    "text": "we'll sum up by talking a bit about some of starling's engineering principles",
    "start": "128160",
    "end": "133599"
  },
  {
    "text": "so i want to start off by talking about complexity to think a little bit about what makes",
    "start": "133599",
    "end": "138959"
  },
  {
    "text": "building systems difficult and what makes that difficulty",
    "start": "138959",
    "end": "144160"
  },
  {
    "text": "become harder the longer you are building these systems and the distinction i want to introduce",
    "start": "144160",
    "end": "149599"
  },
  {
    "text": "was suggested by fred brooks in a very famous 1986 paper called no silver bullet it's the third time i've seen",
    "start": "149599",
    "end": "155200"
  },
  {
    "text": "that up on on slides at qcon this year the bit we're interested in is the subtitle which is",
    "start": "155200",
    "end": "160800"
  },
  {
    "text": "essence an accident in software engineering and so brooks distinguished between",
    "start": "160800",
    "end": "167519"
  },
  {
    "text": "essential tasks the essential is the system that you're building as it exists in a sort of",
    "start": "167519",
    "end": "173519"
  },
  {
    "text": "idealized world if you didn't have to worry about the technical constraints",
    "start": "173519",
    "end": "179519"
  },
  {
    "text": "what of your system would be left it's a form of complexity that you could never remove or you would be left with no working",
    "start": "179519",
    "end": "185760"
  },
  {
    "text": "system at all it's the data and it's the the logic at the heart of the system and it's",
    "start": "185760",
    "end": "190959"
  },
  {
    "text": "declarative it's the what not the how",
    "start": "190959",
    "end": "195440"
  },
  {
    "text": "on the other hand the accidental is how you get that system running whether you're poking holes in a punch",
    "start": "196080",
    "end": "202000"
  },
  {
    "text": "card or writing assembly code or deploying an ec2 instance in aws using cloud formation",
    "start": "202000",
    "end": "208959"
  },
  {
    "text": "accidental is definitely a slightly odd word here but what brooks is trying to get us to think about is how",
    "start": "208959",
    "end": "214159"
  },
  {
    "text": "much time and effort are we spending defining what the software should do for",
    "start": "214159",
    "end": "219599"
  },
  {
    "text": "the customer solving real problems versus persuading a machine to push some bits around to actually",
    "start": "219599",
    "end": "225760"
  },
  {
    "text": "execute that stuff and we can think of complexity as a sort",
    "start": "225760",
    "end": "231040"
  },
  {
    "start": "228000",
    "end": "228000"
  },
  {
    "text": "of a spectrum on the left we have the core of the system we can never remove as i say won't do anything",
    "start": "231040",
    "end": "236640"
  },
  {
    "text": "usefu the system won't do anything useful without it and we can divide that into state or data and a wrapper of logic or business",
    "start": "236640",
    "end": "245360"
  },
  {
    "text": "rules and as we move to the right we can think about accidental complexity",
    "start": "245360",
    "end": "250799"
  },
  {
    "text": "and without the accidental part the system won't execute",
    "start": "250799",
    "end": "256238"
  },
  {
    "text": "so a certain amount of that we classify is useful we almost certainly need it to build a useful and a performance",
    "start": "256560",
    "end": "262320"
  },
  {
    "text": "system however we want to make sure we don't drift too far along into the useless complexity",
    "start": "262320",
    "end": "267600"
  },
  {
    "text": "that's that adds no value to the system but it has lots and lots of costs and it can take on at least two forms we",
    "start": "267600",
    "end": "273680"
  },
  {
    "text": "can talk about under investment in our system might cause us to expend a load of effort",
    "start": "273680",
    "end": "279520"
  },
  {
    "text": "on boilerplate on wrestling abstractions that are no longer fit for purpose",
    "start": "279520",
    "end": "285280"
  },
  {
    "text": "and on the other side maybe there's over investment or over engineering our systems we create these high up front build",
    "start": "285280",
    "end": "291520"
  },
  {
    "text": "costs probably some long-term maintenance in the hope of some future gain and productivity",
    "start": "291520",
    "end": "296800"
  },
  {
    "text": "and as you move along the spectrum you have to ask the question like how much accidental complexity",
    "start": "296800",
    "end": "301919"
  },
  {
    "text": "are you willing and able to give to accept given your particular context given your business",
    "start": "301919",
    "end": "307360"
  },
  {
    "text": "uh giving you a strategy giving the stage of your growth and perhaps we can think of pragmatism as avoiding some of the temptations that",
    "start": "307360",
    "end": "314560"
  },
  {
    "text": "lurk to the right side of this spectrum choosing and moving with care",
    "start": "314560",
    "end": "320960"
  },
  {
    "text": "so what exactly is essential complexity what does it look like if you're actually building systems",
    "start": "321680",
    "end": "326880"
  },
  {
    "text": "for a living dan and i love this quote from rich hickey the godfather of closure",
    "start": "326880",
    "end": "332639"
  },
  {
    "text": "it doesn't really matter what language you use data is really the foundation of the system and for many of us who",
    "start": "332639",
    "end": "340240"
  },
  {
    "text": "build data centric systems we could argue we would argue that um you can think of essential complexity",
    "start": "340240",
    "end": "347039"
  },
  {
    "text": "as more or less as data modelling there'll be lots of other things to consider shortly down we'll go into some",
    "start": "347039",
    "end": "353199"
  },
  {
    "text": "of them but for now we can think of modeling the data our system will store as actually the best way of getting to",
    "start": "353199",
    "end": "358479"
  },
  {
    "text": "grips with that essential complexity it's a simple it's an effective tool for",
    "start": "358479",
    "end": "364000"
  },
  {
    "text": "the team to think through the problems it faces and what i'm really talking about",
    "start": "364000",
    "end": "369680"
  },
  {
    "start": "367000",
    "end": "367000"
  },
  {
    "text": "is a team standing around a whiteboard drawing boxes it's a focus on the domain gives us half",
    "start": "369680",
    "end": "375919"
  },
  {
    "text": "a chance of actually sharing a discussion about the problems that we're solving that effective communication is",
    "start": "375919",
    "end": "382080"
  },
  {
    "text": "obviously essential so finding this clear simple syntax whatever it is allows everyone to contribute to the",
    "start": "382080",
    "end": "388240"
  },
  {
    "text": "discussion to challenge to improve the solution no matter what level of expertise",
    "start": "388240",
    "end": "394479"
  },
  {
    "text": "and i acknowledge this is really really simple stuff but when as a community we spend so much",
    "start": "394479",
    "end": "399520"
  },
  {
    "text": "time focused on the complexity of our cloud deployments on the subtleties of your favorite",
    "start": "399520",
    "end": "404800"
  },
  {
    "text": "programming languages syntax it does serve occasionally to remind ourselves that at the core",
    "start": "404800",
    "end": "410000"
  },
  {
    "text": "this is a job about creative thinking about finding simple mental models to understand",
    "start": "410000",
    "end": "417360"
  },
  {
    "text": "the problems that we are solving and the solutions once you have those we'd argue that quite a lot of the code actually kind of",
    "start": "417440",
    "end": "423680"
  },
  {
    "text": "writes itself and so the team keeps talking challenging this model we've come up",
    "start": "423680",
    "end": "429520"
  },
  {
    "text": "with i like to think of sort of flexing the model as you're looking at it stretching it to see how it responds to a bit of",
    "start": "429520",
    "end": "435039"
  },
  {
    "text": "strain from a few different angles imagine how it would handle some future requirement think about scenarios",
    "start": "435039",
    "end": "440639"
  },
  {
    "text": "maybe where a cardinality you've drawn on the board might not longer make sense if we introduced",
    "start": "440639",
    "end": "446400"
  },
  {
    "text": "some new concept so you're trying to identify concept entities that you might have missed or or conflated and we think really",
    "start": "446400",
    "end": "453199"
  },
  {
    "text": "carefully about time so we're drawing this as a snapshot but the data you're stored is stored over a",
    "start": "453199",
    "end": "458479"
  },
  {
    "text": "period of time arrives over a period of time and so you'll probably want to ensure also that as you look back on the system",
    "start": "458479",
    "end": "464800"
  },
  {
    "text": "you know what state that system was in you can reproduce it you can and you should often store event model data in a",
    "start": "464800",
    "end": "471440"
  },
  {
    "text": "relational database that you don't need every entity to share the share the same generic data type to store",
    "start": "471440",
    "end": "477759"
  },
  {
    "text": "an event-based model and it might feel a little bit like upfront design you're",
    "start": "477759",
    "end": "482800"
  },
  {
    "text": "spending quite a lot of time on the stage but the cost of iterating at this point in the process is so cheap",
    "start": "482800",
    "end": "488560"
  },
  {
    "text": "it's like a form of really efficient prototyping and the idea is obviously not",
    "start": "488560",
    "end": "493919"
  },
  {
    "text": "necessarily to support all those future requirements we don't even have to create all the tables the the thing is to think deeply",
    "start": "493919",
    "end": "500240"
  },
  {
    "text": "about the problem [Applause] i'm not going to ask any interview",
    "start": "500240",
    "end": "506479"
  },
  {
    "start": "503000",
    "end": "503000"
  },
  {
    "text": "questions about boyce codd but what i'm really talking about here is the process of normalization in relational database",
    "start": "506479",
    "end": "512560"
  },
  {
    "text": "design questions that you ask yourself in the hope that the model might survive a little bit of future change when ed",
    "start": "512560",
    "end": "519680"
  },
  {
    "text": "garcon described relational modeling in this 1970 paper he he advocated for this concept of data",
    "start": "519680",
    "end": "526720"
  },
  {
    "text": "independence it's a clear separation of the application program",
    "start": "526720",
    "end": "531920"
  },
  {
    "text": "from the physical representation of the data it's accessing on disk",
    "start": "531920",
    "end": "537839"
  },
  {
    "text": "and describe this problem of access path dependence so it's a problem we still see today all over the place so",
    "start": "537839",
    "end": "543440"
  },
  {
    "text": "document databases are really useful in many contexts but the code that operates against them",
    "start": "543440",
    "end": "548880"
  },
  {
    "text": "needs to have a pretty intimate knowledge of the structure of the data as it sits in the database and probably the structure of many versions of that",
    "start": "548880",
    "end": "555440"
  },
  {
    "text": "data if you're updating on read for example rest apis have a similar property",
    "start": "555440",
    "end": "561279"
  },
  {
    "text": "note the popularity of talks on graphql appearing now at qcon",
    "start": "561279",
    "end": "566560"
  },
  {
    "text": "even breaking a system into microservices in each case you're forcing yourself to collapse this",
    "start": "566560",
    "end": "572080"
  },
  {
    "text": "multi-dimensional space down along a single dimension which you",
    "start": "572080",
    "end": "577200"
  },
  {
    "text": "happen to deem more important than the others at that point in time and inevitably there will be",
    "start": "577200",
    "end": "582320"
  },
  {
    "text": "other contexts and will wish in those contexts that we chose in the different dimension",
    "start": "582320",
    "end": "587440"
  },
  {
    "text": "so the key thing here is to think about uh is that the data is stored without the knowledge of the",
    "start": "587440",
    "end": "593200"
  },
  {
    "text": "path from which it is accessed we're pulling that out of the data itself so that we can add it back in other",
    "start": "593200",
    "end": "598720"
  },
  {
    "text": "parts of the system uh where we think it's more appropriate",
    "start": "598720",
    "end": "604240"
  },
  {
    "text": "we use postgres as our relational database management system with postgres we've started to move along the right of",
    "start": "604240",
    "end": "610800"
  },
  {
    "text": "that spectrum beyond the essential data into the essential logic and even to the accidental",
    "start": "610800",
    "end": "616640"
  },
  {
    "text": "the sql gives us this data independence it's that declarative language through which we can choose on a query",
    "start": "616640",
    "end": "624399"
  },
  {
    "text": "by query basis which dimension which access path we want to pick for the data",
    "start": "624399",
    "end": "629760"
  },
  {
    "text": "and it lets us define constraints which is incredibly important for us it allows us to create this sort of declarative barrier",
    "start": "629760",
    "end": "635920"
  },
  {
    "text": "facts are only stored if they are true according to the predicates or the rules that we define up front the system",
    "start": "635920",
    "end": "641120"
  },
  {
    "text": "enforces the rules so you don't need every developer to do so although you obviously rely on them",
    "start": "641120",
    "end": "646800"
  },
  {
    "text": "to write the rules themselves",
    "start": "646800",
    "end": "650399"
  },
  {
    "text": "so excuse me martin has talked a lot about the importance of solid relational core",
    "start": "656640",
    "end": "662560"
  },
  {
    "text": "in implementing the essential state of the system and he started us on this journey into our system's essential logic",
    "start": "662560",
    "end": "668880"
  },
  {
    "text": "by committing to using postgres with its views and constraints",
    "start": "668880",
    "end": "674160"
  },
  {
    "text": "but we're only so far along the spectrum halfway along the logic section it's not a system yet",
    "start": "674160",
    "end": "681600"
  },
  {
    "text": "unless our customers are willing to log into a psql console and get to grips with our data model and",
    "start": "681600",
    "end": "686959"
  },
  {
    "text": "check their balance as martin has said just now our data model is perhaps complex",
    "start": "686959",
    "end": "692880"
  },
  {
    "text": "through banning nulls and updates we've forced ourselves to thoroughly model time and change and that means we have a",
    "start": "692880",
    "end": "698959"
  },
  {
    "text": "lot of tables so perhaps even for a very sophisticated customer well-versed in sql we have so many relations through this",
    "start": "698959",
    "end": "705600"
  },
  {
    "text": "careful upfront future-proof flexible design that it really would be a nightmare to check your balance or get",
    "start": "705600",
    "end": "710720"
  },
  {
    "text": "the tax done at the last year so now we need to build this stuff for customers and for our operations",
    "start": "710720",
    "end": "717680"
  },
  {
    "text": "teams to do their jobs retractably and it's in this business logic layer that we add back in",
    "start": "717680",
    "end": "723600"
  },
  {
    "text": "the access path that cod removed the data exposed to a customer via mobile",
    "start": "723600",
    "end": "728800"
  },
  {
    "text": "is very different to that exposed to fraud personnel in ops so this business logic it views and",
    "start": "728800",
    "end": "735360"
  },
  {
    "text": "projects a dimension of the relational core from postgres appropriate to a customer or an operative",
    "start": "735360",
    "end": "741040"
  },
  {
    "text": "here is where your differing user needs are expressed and indeed your security model could be implemented",
    "start": "741040",
    "end": "747600"
  },
  {
    "text": "and doing so is a joy adding to the data independence provided by the relational core so i'm talking about how to survive",
    "start": "747600",
    "end": "755440"
  },
  {
    "text": "building and maintaining your essential logic without getting tied up and straying too",
    "start": "755440",
    "end": "760880"
  },
  {
    "text": "far over to the right side of the complexity spectrum and i'm going to draw on the works of ben mosely and peter marks",
    "start": "760880",
    "end": "767040"
  },
  {
    "text": "to help me do it these guys wrote the awesome out of the tarpit paper in 2006 which i highly highly recommend",
    "start": "767040",
    "end": "773519"
  },
  {
    "text": "everybody reading if you haven't already they build on brooks's complexity dichotomy and one thing they do quite early on in",
    "start": "773519",
    "end": "779760"
  },
  {
    "text": "this paper is they sort of review programming languages how they relate to the modern software crisis",
    "start": "779760",
    "end": "785360"
  },
  {
    "text": "how they relate to complexity and they cover object-oriented programming as an example of the imperative style",
    "start": "785360",
    "end": "792079"
  },
  {
    "text": "functional programming and logic programming is the more declarative style and they say that the latter logic",
    "start": "792079",
    "end": "798240"
  },
  {
    "text": "programming is really the holy grail for expressing your essential business logic in such a way that it describes what is",
    "start": "798240",
    "end": "804959"
  },
  {
    "text": "the side of the system rather than how the system should work they actually settle on the",
    "start": "804959",
    "end": "810800"
  },
  {
    "text": "recommendation of functional programming though and i suppose as haskell developers that's perhaps unsurprising",
    "start": "810800",
    "end": "818639"
  },
  {
    "text": "so but hang on yeah you use java so i want to be clear that the paper it didn't directly influence engineering",
    "start": "818639",
    "end": "824399"
  },
  {
    "text": "and styling but it does give us a really good language to talk about software systems and it explains",
    "start": "824399",
    "end": "829519"
  },
  {
    "text": "really well some of the most critical engineering principles that we follow so yes our services are written in java",
    "start": "829519",
    "end": "834880"
  },
  {
    "text": "our business logic but what is a function anyway right it's a transformation some data comes in",
    "start": "834880",
    "end": "841519"
  },
  {
    "text": "some data goes out ideally nothing else happens no other dependencies wrapped up or hidden within the function",
    "start": "841519",
    "end": "847760"
  },
  {
    "text": "no side effects no sending an email no notification or making a call out to another service",
    "start": "847760",
    "end": "852880"
  },
  {
    "text": "over http just the domain and a range nice and simple like in maths",
    "start": "852880",
    "end": "858639"
  },
  {
    "text": "so we have this distributed system written with java well-known strongly typed imperative oap language",
    "start": "858639",
    "end": "865600"
  },
  {
    "text": "but from like 100 feet up each one of our services is actually really just a collection of pure",
    "start": "865600",
    "end": "871279"
  },
  {
    "text": "functions or compositions or pipelines of pure functions data in through http at the top",
    "start": "871279",
    "end": "877600"
  },
  {
    "text": "transformed in services and written to the data store or data in from the data store transformed in",
    "start": "877600",
    "end": "883199"
  },
  {
    "text": "services and up and out as json over http and every step of the pipeline is",
    "start": "883199",
    "end": "889839"
  },
  {
    "text": "declarative the data lives in postgres derived data lives in progress postgres 2 defined in sql and at the bottom of our",
    "start": "889839",
    "end": "898399"
  },
  {
    "text": "java stack here's a java interface annotated with some sql java interfaces and annotations",
    "start": "898399",
    "end": "903760"
  },
  {
    "text": "are declarative sql is declarative so now",
    "start": "903760",
    "end": "908880"
  },
  {
    "text": "now this data is in the form of a mutable object a java object perhaps a mutable collection of java objects which may be transformed with",
    "start": "908880",
    "end": "915680"
  },
  {
    "text": "functions applied to java streams and then off it goes as json over the wire",
    "start": "915680",
    "end": "922320"
  },
  {
    "text": "and libraries like jackson mean that the transformation is cross-cutting and declarative and libraries like jax rs allow us to",
    "start": "922320",
    "end": "928720"
  },
  {
    "text": "bind a java interface to http declaratively we use rest easy because it",
    "start": "928720",
    "end": "934240"
  },
  {
    "text": "automatically generates http clients from annotated http server interfaces",
    "start": "934240",
    "end": "939519"
  },
  {
    "text": "so there's a ton of awesome declarative stuff out there in java land if you keep it stateless you keep it",
    "start": "939519",
    "end": "945600"
  },
  {
    "text": "immutable and then you stay in the safe space away from the right hand side of the complexity spectrum",
    "start": "945600",
    "end": "952000"
  },
  {
    "start": "951000",
    "end": "951000"
  },
  {
    "text": "so ben and peter in this paper they go on to propose the hypothetical architecture called frp",
    "start": "952000",
    "end": "957199"
  },
  {
    "text": "functional relational programming shares an acronym with functional reactive programming but it's different",
    "start": "957199",
    "end": "962480"
  },
  {
    "text": "um they sort of pose this as a solution to the modern software crisis and it consists of a central state down",
    "start": "962480",
    "end": "970000"
  },
  {
    "text": "on the bottom right essential but this is your relational core the heart of the system",
    "start": "970000",
    "end": "975120"
  },
  {
    "text": "essential logic ways of producing derived data transforming data like creating views in",
    "start": "975120",
    "end": "981519"
  },
  {
    "text": "your rdbms executing pure functions it's part relational part functional um you need integrity constraints",
    "start": "981519",
    "end": "988000"
  },
  {
    "text": "they're in your dbms and there's these things called feeders and observers interfaces through which relations are created and",
    "start": "988000",
    "end": "994800"
  },
  {
    "text": "you get your data in interfaces through which your data is projected you get your data out to customers",
    "start": "994800",
    "end": "1000079"
  },
  {
    "text": "a mobile app or perhaps um to that other reporting system that your boss needs for his daily dose of mi",
    "start": "1000079",
    "end": "1007279"
  },
  {
    "text": "but learning to classify these systems in terms of this complexity spectrum or diagrams like this one",
    "start": "1007279",
    "end": "1014240"
  },
  {
    "text": "um it means we can start to divide and conquer and ben and peter advise us to avoid and separate so",
    "start": "1014240",
    "end": "1021040"
  },
  {
    "text": "avoid is what we've spent most of our time so far talking about stripping away anything",
    "start": "1021040",
    "end": "1027280"
  },
  {
    "text": "essential stripping it back to only the essential state and behavior for example out of the tarp it says that",
    "start": "1027280",
    "end": "1033280"
  },
  {
    "text": "we should avoid mutable state in our business logic because mutable state is accidental complexity",
    "start": "1033280",
    "end": "1039360"
  },
  {
    "text": "avoiding things in general it means thinking very carefully about which costs we want to pay",
    "start": "1039360",
    "end": "1046720"
  },
  {
    "text": "everything that you don't manage to avoid might cost you something so always always question whether now is",
    "start": "1046720",
    "end": "1052400"
  },
  {
    "text": "the right time um when will we see the benefits are we doing this for the right reasons am i just padding my cv you're going to",
    "start": "1052400",
    "end": "1059200"
  },
  {
    "text": "come up with so many ideas you're going to see so many talks you're going to read lots of blogs and tweets and you",
    "start": "1059200",
    "end": "1064320"
  },
  {
    "text": "can't do or use them all styling i think we work really hard to avoid complexity so",
    "start": "1064320",
    "end": "1070799"
  },
  {
    "text": "some of us take a daily dose of healthy skepticism separation it turns out that we can't",
    "start": "1070799",
    "end": "1077200"
  },
  {
    "text": "really avoid all complexity accidental or otherwise and so separation is this technique we can use",
    "start": "1077200",
    "end": "1082640"
  },
  {
    "text": "to reduce the potential cost of taking on useful accidental complexity when you separate things you have to",
    "start": "1082640",
    "end": "1089280"
  },
  {
    "text": "wrap up and share cross-cutting concerns to get the benefits of consistency by wrapping up cross-cutting concerns",
    "start": "1089280",
    "end": "1095919"
  },
  {
    "text": "expressing them declaratively and applying them consistently we're able to think more about what is desired of the",
    "start": "1095919",
    "end": "1102320"
  },
  {
    "text": "system than how it works and by wrapping up cross-cutting concerns we make we make our services",
    "start": "1102320",
    "end": "1107600"
  },
  {
    "text": "homogenous and consistent uh so like at starling you probably won't find uh that one team one day will go off and",
    "start": "1107600",
    "end": "1113919"
  },
  {
    "text": "write a service and haskell both being huge fans of closure uh martin and i we find this a bit tough",
    "start": "1113919",
    "end": "1119120"
  },
  {
    "text": "actually but as i say we work hard at avoiding heterogeneity in our systems consistent services also kind of",
    "start": "1119120",
    "end": "1126400"
  },
  {
    "text": "promotes or allows consistent infrastructure which can then also be automated declarative through tools like",
    "start": "1126400",
    "end": "1132320"
  },
  {
    "text": "terraform so observers and feeders these like",
    "start": "1132320",
    "end": "1138240"
  },
  {
    "text": "they're like an instance of separation they implement separation and separation isn't really a it's not a new idea it's been around for a while",
    "start": "1138240",
    "end": "1145120"
  },
  {
    "text": "um it happens on another access the separation of read and write bertrand meyer in the 80s",
    "start": "1145120",
    "end": "1152000"
  },
  {
    "text": "coined the term cqs command query separation and it's about placing reads and write",
    "start": "1152000",
    "end": "1157520"
  },
  {
    "text": "operations in separate methods on your objects queries have to be referentially transparent they must produce no side",
    "start": "1157520",
    "end": "1164880"
  },
  {
    "text": "effects they must really merely return data greg young took a little bit further with",
    "start": "1164880",
    "end": "1169919"
  },
  {
    "text": "command query responsibility segregation cqrs wherein rights and reads are placed in",
    "start": "1169919",
    "end": "1175679"
  },
  {
    "text": "separate objects separating read and write it creates space for a range of architectures and",
    "start": "1175679",
    "end": "1182080"
  },
  {
    "text": "patterns like the option to have multiple rebuttals granted potentially at a cost",
    "start": "1182080",
    "end": "1187280"
  },
  {
    "text": "of accidental complexity through things like synchronization the time lag and eventual consistency",
    "start": "1187280",
    "end": "1192400"
  },
  {
    "text": "but this allows the physical scaling of read and write to occur asymmetrically which is both realistic",
    "start": "1192400",
    "end": "1198080"
  },
  {
    "text": "and pragmatic so we've done quite a lot of papers in",
    "start": "1198080",
    "end": "1203360"
  },
  {
    "text": "theory now for some examples martin's the core banking and database he kind of guy in case you hadn't",
    "start": "1203360",
    "end": "1208400"
  },
  {
    "text": "noticed he's back in a bit but i'm here right now and i'm the web guy so here it goes um so at starting we use react it's a",
    "start": "1208400",
    "end": "1215520"
  },
  {
    "text": "very well-known javascript library often thought of as the view layer for single page applications",
    "start": "1215520",
    "end": "1220799"
  },
  {
    "text": "we can define react at a high level in some formal sounding terms by saying that it encourages developers",
    "start": "1220799",
    "end": "1226640"
  },
  {
    "text": "to write a pure set of functions over the domain of your system state your business and user state into the",
    "start": "1226640",
    "end": "1233200"
  },
  {
    "text": "range of the dom and you might go on to say that your browser is a function over the domain of the dom",
    "start": "1233200",
    "end": "1238240"
  },
  {
    "text": "into the range of pixels on your monitor uh react it brings together functional",
    "start": "1238240",
    "end": "1243760"
  },
  {
    "text": "and reactive programming patterns and it raises the consideration of state to the forefront of your developer's mind by offering you",
    "start": "1243760",
    "end": "1250080"
  },
  {
    "text": "two kinds of data props which are values your component",
    "start": "1250080",
    "end": "1255200"
  },
  {
    "text": "receives from the outside and state which your component manages",
    "start": "1255200",
    "end": "1260840"
  },
  {
    "text": "itself by avoiding state and side effects",
    "start": "1260840",
    "end": "1267440"
  },
  {
    "text": "by programming in a functional style and using immutable data structures your entire system gains this property",
    "start": "1267440",
    "end": "1273039"
  },
  {
    "text": "of referential transparency which is a great aid to informal reasoning",
    "start": "1273039",
    "end": "1278799"
  },
  {
    "text": "so this is where every expression expression can be replaced with is a value without changing the program's behavior that's your sort of",
    "start": "1279280",
    "end": "1285919"
  },
  {
    "text": "definition of referential transparency and what it means is that you have a function foo and every time you give it two and it gives you back four and it",
    "start": "1285919",
    "end": "1292880"
  },
  {
    "text": "didn't send you an email um so functional programming it shortens the brain",
    "start": "1292880",
    "end": "1298720"
  },
  {
    "text": "to code gap and i think that's more important than anything else when you and your teams are all reading back each other's code",
    "start": "1298720",
    "end": "1306000"
  },
  {
    "text": "at least 10 times more often than you're writing it redux it's another thing we use at",
    "start": "1306000",
    "end": "1312559"
  },
  {
    "text": "starling it's a predictable state container for javascript applications a state management tool if you will and it's in no way coupled",
    "start": "1312559",
    "end": "1319039"
  },
  {
    "text": "to react out of the box but it's very common to use it paired it has a single global state",
    "start": "1319039",
    "end": "1325120"
  },
  {
    "text": "store which can be an immutable data structure and i think it should be an immutable data structure it formalizes the",
    "start": "1325120",
    "end": "1331520"
  },
  {
    "text": "change in state through actions which describe a request to change state",
    "start": "1331520",
    "end": "1336720"
  },
  {
    "text": "it notifies subscribers when the store has changed and you can only change the store by these things called reducers",
    "start": "1336720",
    "end": "1342720"
  },
  {
    "text": "which you supply as a pure function of state and an action and you must yield a new state so redux assumes",
    "start": "1342720",
    "end": "1351440"
  },
  {
    "text": "that you won't mutate your state anywhere else other than inside this function which you have provided as a reducer so the store is a database",
    "start": "1351440",
    "end": "1359679"
  },
  {
    "text": "it's more than a database it's uh it's an immutable data structure if you use an immutable data structure there then it's a value right and that gives",
    "start": "1359679",
    "end": "1366000"
  },
  {
    "text": "you this unparalleled capability in the debugging space there are echoes",
    "start": "1366000",
    "end": "1371120"
  },
  {
    "text": "of cqs like separation here c commands they're like events but they",
    "start": "1371120",
    "end": "1377600"
  },
  {
    "text": "carry intent they're immutable and these are akin to actions in redux cue queries these are things like",
    "start": "1377600",
    "end": "1383520"
  },
  {
    "text": "selectors or cursors lenses and zippers um any pure functional technique for",
    "start": "1383520",
    "end": "1389679"
  },
  {
    "text": "reintroducing modularity over and navigating your global and mutable state purely",
    "start": "1389679",
    "end": "1395039"
  },
  {
    "text": "without side effects and as declaratively logically composably as possible",
    "start": "1395039",
    "end": "1403200"
  },
  {
    "text": "so react helps us avoid and separate it forces us to think about values and state to treat them differently to",
    "start": "1403200",
    "end": "1409120"
  },
  {
    "text": "handle them explicitly it separates us from the mutable world of dom and event handlers",
    "start": "1409120",
    "end": "1414240"
  },
  {
    "text": "and redux helps us avoid and separate it it provides this middleware stack in which we can place our side affecting",
    "start": "1414240",
    "end": "1419919"
  },
  {
    "text": "code and deal with the outside world like network calls separated from the rest of your otherwise rational reasonable pure",
    "start": "1419919",
    "end": "1426000"
  },
  {
    "text": "functional program we chose react redux an immutable js because they each do one thing well",
    "start": "1426000",
    "end": "1432080"
  },
  {
    "text": "they each stand alone they can pose well with other things that do one thing well and each of these are simple and they",
    "start": "1432080",
    "end": "1437440"
  },
  {
    "text": "stay simple when composed together which gives us gives rise to understandability this excellent",
    "start": "1437440",
    "end": "1442799"
  },
  {
    "text": "informal reasoning this impact analysis and debuggability things that compose easily are easily",
    "start": "1442799",
    "end": "1450000"
  },
  {
    "text": "pulled back apart and this gives rise to changeability these support growth the growth of your products complexity",
    "start": "1450000",
    "end": "1455679"
  },
  {
    "text": "the growth of your teams the number of committers working in the same space this is a screenshot of one of the apps",
    "start": "1455679",
    "end": "1461760"
  },
  {
    "text": "i look after it's a we call it the management portal um and it's built on this this web stack",
    "start": "1461760",
    "end": "1467200"
  },
  {
    "text": "it's it's simple we adopted it really early four years ago it's a simple architecture and it served the original",
    "start": "1467200",
    "end": "1473440"
  },
  {
    "text": "single engineer muggins here very well but what i find really pleasing is that it hasn't really changed in four years",
    "start": "1473440",
    "end": "1479679"
  },
  {
    "text": "um the architecture the tools changed a lot but now we've got like 80. i think it",
    "start": "1479679",
    "end": "1485760"
  },
  {
    "text": "was 96 committers at the last count um so back then we had no",
    "start": "1485760",
    "end": "1491039"
  },
  {
    "text": "customers now we've got over a million back then we had an operations function and now we have heading towards a thousand people on board um",
    "start": "1491039",
    "end": "1497440"
  },
  {
    "text": "most of whom use this application day in day out to service the needs of our customers the bank as a business and",
    "start": "1497440",
    "end": "1503279"
  },
  {
    "text": "of course the regulator so react redux immutable js can i claim",
    "start": "1503279",
    "end": "1510000"
  },
  {
    "text": "it's an frp implementation it's definitely functional programming it's probably reactive programming but is it",
    "start": "1510000",
    "end": "1515120"
  },
  {
    "text": "relational no not quite probably not yet but for many of you out there and i think perhaps for us in the future",
    "start": "1515120",
    "end": "1522080"
  },
  {
    "text": "i think the missing piece from this collection of libraries to implement an frp-like architecture",
    "start": "1522080",
    "end": "1527200"
  },
  {
    "text": "the tools like graphql through graphql web clients which for years have been",
    "start": "1527200",
    "end": "1533200"
  },
  {
    "text": "sort of tied to prefabricated rest apis they reattain the power to query to achieve data and dependence at",
    "start": "1533200",
    "end": "1540400"
  },
  {
    "text": "starling we lay out our sort of homogeneous services as http accessible projections",
    "start": "1540400",
    "end": "1545520"
  },
  {
    "text": "of relational uh data and we have cross-functional teams so together by and large this usually results in apis that",
    "start": "1545520",
    "end": "1551840"
  },
  {
    "text": "actually are fit for purpose i don't need any more queryability than i already have lucky me for now the graphql is very",
    "start": "1551840",
    "end": "1558320"
  },
  {
    "text": "much on the radar and so is functional relational programming",
    "start": "1558320",
    "end": "1563760"
  },
  {
    "text": "thanks so so we've talked a bit about work",
    "start": "1568840",
    "end": "1575039"
  },
  {
    "text": "complexity we've talked about how we model and store data independently of the access path",
    "start": "1575039",
    "end": "1580720"
  },
  {
    "text": "then add that access path back later in elsewhere as projections or functions of",
    "start": "1580720",
    "end": "1586480"
  },
  {
    "text": "this relational core dan's explained a bit about how that applies in his area i'm going to try and",
    "start": "1586480",
    "end": "1591840"
  },
  {
    "text": "do the same um in my area in a sort of view of a something",
    "start": "1591840",
    "end": "1597360"
  },
  {
    "text": "sort of hypothetical ledger um that is pretty close to what we do um and hopefully show along the way a",
    "start": "1597360",
    "end": "1603919"
  },
  {
    "text": "little bit of the accidental complexity you might find in our system as i say the data models and everything",
    "start": "1603919",
    "end": "1609840"
  },
  {
    "text": "i've just sketched them out there in no way they're a resemblance particularly to what we what we run in production or anything",
    "start": "1609840",
    "end": "1617440"
  },
  {
    "start": "1613000",
    "end": "1613000"
  },
  {
    "text": "so a bank really is just an accounting machine so we'll start by just thinking a little bit about what a business's accounts",
    "start": "1617440",
    "end": "1624159"
  },
  {
    "text": "really are in the language we've covered so far you can think of them as really a projection",
    "start": "1624159",
    "end": "1630960"
  },
  {
    "text": "of all of that businesses financially impacting data a function a sort of function that takes as input all of that historically",
    "start": "1630960",
    "end": "1637520"
  },
  {
    "text": "modeled detailed relations that we came up with in front of the whiteboard",
    "start": "1637520",
    "end": "1642720"
  },
  {
    "text": "and it transforms them into a unified into a simple data structure i've drawn some t",
    "start": "1642720",
    "end": "1648720"
  },
  {
    "text": "accounts which is what you draw on white boards with finance departments when you're building a bank we've got",
    "start": "1648720",
    "end": "1654320"
  },
  {
    "text": "debits and credits made as postings intellectual accounts",
    "start": "1654320",
    "end": "1659919"
  },
  {
    "text": "we group those postings into sets called journals which are the numbers",
    "start": "1659919",
    "end": "1665039"
  },
  {
    "text": "joining the the postings together the sum of those add up to zero so the ledger as a whole always add up adds up to zero which",
    "start": "1665039",
    "end": "1671600"
  },
  {
    "text": "apparently is quite important and then uh a ledger is immutable which is also",
    "start": "1671600",
    "end": "1676880"
  },
  {
    "text": "reasonably important though you can and you do post immutable adjustments by distinguishing",
    "start": "1676880",
    "end": "1683200"
  },
  {
    "text": "the posted timestamp when the event landed in the ledger from the value timestamp",
    "start": "1683200",
    "end": "1689600"
  },
  {
    "text": "now assuming that you stored enough data in your data model you could actually kind of think of a",
    "start": "1689840",
    "end": "1695279"
  },
  {
    "text": "company's account as little more than a query over these really diverse set of financially significant",
    "start": "1695279",
    "end": "1702799"
  },
  {
    "text": "events that flow through our system that essential state of our system expressed through",
    "start": "1702799",
    "end": "1708640"
  },
  {
    "text": "a set of facts or relations transaction settlement messages from",
    "start": "1708640",
    "end": "1713760"
  },
  {
    "text": "mastercard or visa payment networks in and outbound messages representing bank transfers in",
    "start": "1713760",
    "end": "1719279"
  },
  {
    "text": "faster payment service or sepa and in each case we store lots and lots",
    "start": "1719279",
    "end": "1724399"
  },
  {
    "text": "of detail so that we can keep track of everything from an operational perspective",
    "start": "1724399",
    "end": "1730080"
  },
  {
    "text": "we can switch your card transaction and the feed from pending to settled we know when we need to settle with a",
    "start": "1730080",
    "end": "1736640"
  },
  {
    "text": "particular payment network for how much uh which customer payments have been settled as part of that batch and so on",
    "start": "1736640",
    "end": "1743520"
  },
  {
    "text": "but the finance team doesn't care about all that detail their domain looks at the business from",
    "start": "1743520",
    "end": "1749520"
  },
  {
    "text": "30 000 feet up and so to represent these relations uh",
    "start": "1749520",
    "end": "1754720"
  },
  {
    "text": "in the accounts they all first need to need to be transformed so that they share the same",
    "start": "1754720",
    "end": "1759760"
  },
  {
    "text": "data type so we go from this diverse detailed individual lots of individual representations into this simple generic",
    "start": "1759760",
    "end": "1766799"
  },
  {
    "text": "unified data model in the ledger we're purposely throwing away the detail in order to see the wood for the trees",
    "start": "1766799",
    "end": "1774559"
  },
  {
    "text": "now if we're talking essential versus accidental complexity then the way i've described that the",
    "start": "1774640",
    "end": "1779840"
  },
  {
    "text": "ledger is actually on the accidental side because you could actually construct this crazy query",
    "start": "1779840",
    "end": "1786640"
  },
  {
    "text": "you could represent the ledger postings from this underlying complex data model",
    "start": "1786640",
    "end": "1792799"
  },
  {
    "text": "it would be a bit of a beast of course involving the union of dozens of different relations all projected",
    "start": "1792799",
    "end": "1799279"
  },
  {
    "text": "into these ledger postings and it would be pretty unmaintainable it would be represented",
    "start": "1799279",
    "end": "1807360"
  },
  {
    "text": "in code so you would run the very real risk that a future change to that code a bug that you might introduce could",
    "start": "1807360",
    "end": "1813679"
  },
  {
    "text": "rewrite history and you violate this property of immutability",
    "start": "1813679",
    "end": "1819760"
  },
  {
    "text": "and so at this point we start to think about denormalization we're going to store the ledger tables",
    "start": "1819760",
    "end": "1825039"
  },
  {
    "text": "effectively as simplified copies of those raw underlying underlying facts",
    "start": "1825039",
    "end": "1831600"
  },
  {
    "text": "for the sake of illustration i've drawn out some logical data model model might look like it's obviously a",
    "start": "1831840",
    "end": "1837440"
  },
  {
    "text": "pretty uh basic and weak model that i was trying to illustrate really that is i've got a sort of payments domain card",
    "start": "1837440",
    "end": "1844000"
  },
  {
    "text": "domain treasury and fx lots and lots of complicated detail and everything joins in",
    "start": "1844000",
    "end": "1849200"
  },
  {
    "text": "the middle to this simple ledger model in the center",
    "start": "1849200",
    "end": "1856320"
  },
  {
    "text": "and you've all been to the microservices talks here at qcon i'm sure this year and for the last many",
    "start": "1859279",
    "end": "1866320"
  },
  {
    "text": "years and so i won't spend too much time talking about the why but although i've drawn this as a sort of i drew it as a",
    "start": "1866320",
    "end": "1872000"
  },
  {
    "text": "monolithic big system-wide domain if you imagine of hundreds of tables",
    "start": "1872000",
    "end": "1877600"
  },
  {
    "text": "all joining into the ledger in reality we have good reasons to break our system up",
    "start": "1877600",
    "end": "1882799"
  },
  {
    "text": "and we break it up into about 30 odd services there's an element of conway's law here",
    "start": "1882799",
    "end": "1888960"
  },
  {
    "text": "allowing teams to own their services to control their releases there's also an element of domain-driven",
    "start": "1888960",
    "end": "1894799"
  },
  {
    "text": "design so by allowing the domains of the system to diverge and to grow independently",
    "start": "1894799",
    "end": "1900559"
  },
  {
    "text": "based on the expertise of the particular team owning that system but but why do we land on about 30 services",
    "start": "1900559",
    "end": "1906640"
  },
  {
    "text": "so where does that granularity come from well firstly we follow our strategical",
    "start": "1906640",
    "end": "1912799"
  },
  {
    "text": "self-contained systems if you're going to break the bank up into many different services we feel that",
    "start": "1912799",
    "end": "1920240"
  },
  {
    "text": "they should be able to run those services independently of each other we're trying to reduce the blast radius",
    "start": "1920240",
    "end": "1926559"
  },
  {
    "text": "of errors here to stop a problem in one service taking down others and that means minimizing",
    "start": "1926559",
    "end": "1933440"
  },
  {
    "text": "synchronous calls between separate services if each of those services is allowed to",
    "start": "1933440",
    "end": "1939360"
  },
  {
    "text": "talk to a few others then you're quickly in danger of building this distributed monolith this network of expensive and",
    "start": "1939360",
    "end": "1945919"
  },
  {
    "text": "brittle calls in which any error can quickly cascade throughout the system",
    "start": "1945919",
    "end": "1952320"
  },
  {
    "text": "using self-contained systems also means that each service has its own database",
    "start": "1952720",
    "end": "1959200"
  },
  {
    "start": "1959000",
    "end": "1959000"
  },
  {
    "text": "we've talked repeatedly about the importance of relational modelling now i've drawn some teal boxes here which are supposed to represent some imaginary",
    "start": "1961440",
    "end": "1968320"
  },
  {
    "text": "systems and each of a self-contained system that is dividing my domain up into many",
    "start": "1968320",
    "end": "1973840"
  },
  {
    "text": "different services each with its own database now i've gone and cut my",
    "start": "1973840",
    "end": "1978960"
  },
  {
    "text": "database into loads of parts i can't write nice queries across them i can't enforce constraints across those",
    "start": "1978960",
    "end": "1985279"
  },
  {
    "text": "records so what's going on what have i done well of course it's all about trade-offs",
    "start": "1985279",
    "end": "1990960"
  },
  {
    "text": "um to gain the benefit in one area you pay the price elsewhere we want to gain the benefits of",
    "start": "1990960",
    "end": "1997760"
  },
  {
    "text": "self-contained systems of these multiple services and we give up a bit",
    "start": "1997760",
    "end": "2002960"
  },
  {
    "text": "of that simple consistent modeling but we don't want to go all the way we don't want to give it all up",
    "start": "2002960",
    "end": "2008000"
  },
  {
    "text": "there's definitely a role for for reconciliation but as a bank consistency is obviously really",
    "start": "2008000",
    "end": "2013679"
  },
  {
    "text": "important to us so given what i've described how do we go about maintaining",
    "start": "2013679",
    "end": "2019600"
  },
  {
    "text": "that consistency in the face of this destruction of our lovely neat model",
    "start": "2019600",
    "end": "2026398"
  },
  {
    "text": "so i've drawn up here my service boundaries going right through the middle of some entities and those entities are",
    "start": "2027279",
    "end": "2034880"
  },
  {
    "text": "effectively shared across across services so each piece of data in",
    "start": "2034880",
    "end": "2040640"
  },
  {
    "text": "the system has a home it has a it is owned by one part of the system as its primary",
    "start": "2040640",
    "end": "2046480"
  },
  {
    "text": "owner so we might have a finance message uh being something related to card and cards domain you have",
    "start": "2046480",
    "end": "2052320"
  },
  {
    "text": "uh a payment perhaps created by the payment service something to do with fx down at the bottom",
    "start": "2052320",
    "end": "2057679"
  },
  {
    "text": "right the in each at each of those domains you have a rich set of uh set of um",
    "start": "2057679",
    "end": "2064240"
  },
  {
    "text": "historically modeled events but one of them is going to be the one that is pushed across",
    "start": "2064240",
    "end": "2069440"
  },
  {
    "text": "uh into the ledger and we see this as a sort of form of",
    "start": "2069440",
    "end": "2075839"
  },
  {
    "text": "event sourcing from its home and one service data is pushed into other services where it",
    "start": "2075839",
    "end": "2081760"
  },
  {
    "text": "becomes joined into the relational model of that service we've reduced the",
    "start": "2081760",
    "end": "2087280"
  },
  {
    "text": "surface area of how these different services connect detailed model on one side simplified domain specific model within",
    "start": "2087280",
    "end": "2095200"
  },
  {
    "text": "the particular ledger service that i might have drawn here",
    "start": "2095200",
    "end": "2099280"
  },
  {
    "start": "2098000",
    "end": "2098000"
  },
  {
    "text": "and we're pushing data rather than doing remote procedure call or anything like that because we we want to minimize the amount of",
    "start": "2100400",
    "end": "2106400"
  },
  {
    "text": "transformation that happens across the data across this this barrier this bridge",
    "start": "2106400",
    "end": "2112720"
  },
  {
    "text": "we might send a subset of the columns or filter it out but we're really trying to avoid having a complicated dependency on",
    "start": "2113920",
    "end": "2119280"
  },
  {
    "text": "some piece of code that happens to execute that is versioned in github and changes otherwise i won't know what's the",
    "start": "2119280",
    "end": "2124880"
  },
  {
    "text": "representation of this particular card uh a transaction on the other side",
    "start": "2124880",
    "end": "2131440"
  },
  {
    "text": "so um this part of the system has been we've described in the past as a ditto architecture",
    "start": "2131440",
    "end": "2136800"
  },
  {
    "text": "and do add important things to others and on the consumer side of that we ensure that the receiving service here",
    "start": "2136800",
    "end": "2142960"
  },
  {
    "text": "the ledger the the end points receiving those messages are idempotent we can replay",
    "start": "2142960",
    "end": "2149920"
  },
  {
    "text": "the message as many times we like it will it will land once so that means you can handle errors by repeatedly replaying",
    "start": "2149920",
    "end": "2156560"
  },
  {
    "text": "you just keep throwing it over the over the fence and when you know it's stuck you stop trying",
    "start": "2156560",
    "end": "2162640"
  },
  {
    "text": "on the producer side we've gone through a few different iterations and implementations of this and it's definitely as i said to",
    "start": "2163680",
    "end": "2170400"
  },
  {
    "text": "show a little bit of the accidental complexity we sort of narrowed it to this thin channel or hopefully thin channel across",
    "start": "2170400",
    "end": "2176400"
  },
  {
    "text": "these entities being pushed through the system but the implementation we use now is is",
    "start": "2176400",
    "end": "2182960"
  },
  {
    "text": "based on postgres a feature called pg notify which allows where postgres is notifying our",
    "start": "2182960",
    "end": "2189520"
  },
  {
    "text": "java services through the jdbc connection when a record is inserted into the database",
    "start": "2189520",
    "end": "2195920"
  },
  {
    "text": "so that means that in the same database transaction we're able to commit a piece of data a record representing a",
    "start": "2195920",
    "end": "2202640"
  },
  {
    "text": "transaction together with another record representing the command of pushing that piece of data into",
    "start": "2202640",
    "end": "2209599"
  },
  {
    "text": "another service and so we can delegate that consistency of pushing the data across",
    "start": "2209599",
    "end": "2215440"
  },
  {
    "text": "the boundary to a postgres transaction management we don't need to worry about complicated two-phase commits or expensive",
    "start": "2215440",
    "end": "2222079"
  },
  {
    "text": "distributed locking or synchronization technology and it's worked pretty well for us",
    "start": "2222079",
    "end": "2227760"
  },
  {
    "text": "though it's definitely as i say it's part of the system that will continue to evolve and improve um i'd like for a start for it to be",
    "start": "2227760",
    "end": "2234640"
  },
  {
    "text": "much more declarative so there's less pushing more declaring that i need to subscribe to a particular type of event",
    "start": "2234640",
    "end": "2243839"
  },
  {
    "text": "so why don't you just use kafka i hear you ask well for a start at the beginning we were",
    "start": "2243839",
    "end": "2250400"
  },
  {
    "text": "unwilling to take on what we considered this inessential complexity early on we would",
    "start": "2250400",
    "end": "2255760"
  },
  {
    "text": "sacrifice a lot of developer productivity requiring everyone to run this complex piece of technology as well as needing",
    "start": "2255760",
    "end": "2262240"
  },
  {
    "text": "to build up the expertise in production and we had so much to do delivering features getting stuff done",
    "start": "2262240",
    "end": "2267599"
  },
  {
    "text": "for the business and we also couldn't see immediately what the what benefit it would bring",
    "start": "2267599",
    "end": "2273280"
  },
  {
    "text": "because we still had to worry about the consistency guarantees we still got to make sure that the data crosses barrier",
    "start": "2273280",
    "end": "2279680"
  },
  {
    "text": "and so we still have to implement that stuff i described before kafka obviously improving",
    "start": "2279680",
    "end": "2285440"
  },
  {
    "text": "rapidly they've got exactly one semantics and so on um i'm sure a lot of our concerns have",
    "start": "2285440",
    "end": "2291920"
  },
  {
    "text": "been addressed and i can sort of see a use case where if we increase the number of um the",
    "start": "2291920",
    "end": "2297119"
  },
  {
    "text": "number of uh consumers uh that we were pushing data to or we had a use case we were regularly",
    "start": "2297119",
    "end": "2303359"
  },
  {
    "text": "playing replaying large sways of the data then we would could introduce the broker in the middle to take the load off the",
    "start": "2303359",
    "end": "2309599"
  },
  {
    "text": "of the source system but a better option for us might actually be logical replication which is a postgres",
    "start": "2309599",
    "end": "2315599"
  },
  {
    "text": "feature and postgres actually exposes the writer head log",
    "start": "2315599",
    "end": "2321119"
  },
  {
    "text": "within the database and that's the log of changes that the database records",
    "start": "2321119",
    "end": "2326160"
  },
  {
    "text": "as it's storing the data and you're able to effectively subscribe",
    "start": "2326160",
    "end": "2332240"
  },
  {
    "text": "to that and also specify the format how the format in which you consume that",
    "start": "2332240",
    "end": "2338000"
  },
  {
    "text": "piece of data the client can be another postgres database as in traditional",
    "start": "2338000",
    "end": "2343599"
  },
  {
    "text": "replication but it can also be a service you can write a java client to consume this right ahead log effectively or the",
    "start": "2343599",
    "end": "2349839"
  },
  {
    "text": "logical logical replication log",
    "start": "2349839",
    "end": "2355839"
  },
  {
    "text": "and so that allows us to turn this place orientated data store into an event producer",
    "start": "2355920",
    "end": "2363119"
  },
  {
    "text": "and it's effectively the solution i've spent a bit of time describing before we get to keep our consistency guarantees",
    "start": "2363440",
    "end": "2368720"
  },
  {
    "text": "and the transaction boundaries with a lot less moving parts than running a big separate cluster",
    "start": "2368720",
    "end": "2375920"
  },
  {
    "text": "so as i say this architecture will continue to evolve over time so",
    "start": "2375920",
    "end": "2383200"
  },
  {
    "text": "you've seen a bit of the theory we presented at the start how it translates into real life engineering at starling in the",
    "start": "2383200",
    "end": "2389760"
  },
  {
    "text": "web in the vault where i live and",
    "start": "2389760",
    "end": "2394880"
  },
  {
    "text": "we start to wrap things up now by thinking a little bit about stalling's engineering principles and what",
    "start": "2394880",
    "end": "2400000"
  },
  {
    "text": "pragmatism means to us",
    "start": "2400000",
    "end": "2403838"
  },
  {
    "text": "so on greg's track today you're going to see quite a few fintechs all solving really",
    "start": "2405599",
    "end": "2411599"
  },
  {
    "text": "similar problems",
    "start": "2411599",
    "end": "2414800"
  },
  {
    "text": "but we've all had very very different journeys but so why is that well software engineering really is no",
    "start": "2416640",
    "end": "2422480"
  },
  {
    "text": "surprise a long series of trade-offs there's no single right answer and the questions we're asking",
    "start": "2422480",
    "end": "2428319"
  },
  {
    "text": "are changing every day so we're really engaged as engineers in the art of compromise",
    "start": "2428319",
    "end": "2434319"
  },
  {
    "text": "the orchestration of compromise lots and lots of small decisions which in some define the journey that we we take",
    "start": "2434319",
    "end": "2442079"
  },
  {
    "text": "but if we exist in this state of constant compromise what is it that stops us",
    "start": "2442319",
    "end": "2447520"
  },
  {
    "text": "undertaking some myopic random walk through this forest of options of opportunities of choices",
    "start": "2447520",
    "end": "2454960"
  },
  {
    "text": "well the compromises we make are through decisions and those decisions are",
    "start": "2454960",
    "end": "2460000"
  },
  {
    "text": "hopefully grounded on a principled foundation and it's those principles which give purpose and they give direction",
    "start": "2460000",
    "end": "2466560"
  },
  {
    "text": "to the compromises we make and thereby determine the system that we actually end up building",
    "start": "2466560",
    "end": "2473440"
  },
  {
    "text": "rampant pragmatism it's what we call the talk but what is pragmatism so one one definition is that",
    "start": "2478640",
    "end": "2484880"
  },
  {
    "text": "it's an approach that evaluates theories or beliefs in terms of the success of their practical application",
    "start": "2484880",
    "end": "2490640"
  },
  {
    "text": "so your theory and experience inform what you believe and then you can apply your beliefs practically",
    "start": "2490640",
    "end": "2497680"
  },
  {
    "text": "and then we experience building systems running systems being on call for systems smashing your mobile phone and pagerduty",
    "start": "2497680",
    "end": "2504800"
  },
  {
    "text": "rings we evaluate it constantly right we figure out what to keep what to tweak",
    "start": "2504800",
    "end": "2510319"
  },
  {
    "text": "what to throw away so pragmatism uh is a feedback loop right it's navigating the world with your eyes open",
    "start": "2510319",
    "end": "2517040"
  },
  {
    "text": "and moving deliberately and what we call architecture as software engineers is",
    "start": "2517040",
    "end": "2522960"
  },
  {
    "text": "really just the result of some people placing some bets um on what they think needs to be easy",
    "start": "2522960",
    "end": "2528000"
  },
  {
    "text": "to change later and uh what doesn't so we did this four years ago we started with a blank canvas",
    "start": "2528000",
    "end": "2534720"
  },
  {
    "text": "and we made up some principles and we made up some high-level aims that we thought were going to help us win at life um we said things like",
    "start": "2534720",
    "end": "2541680"
  },
  {
    "text": "developers must love the experience of building this thing and things like problems in production",
    "start": "2541680",
    "end": "2546880"
  },
  {
    "text": "must not affect the entire system their blast radius must be limited and so you place these bets and you close",
    "start": "2546880",
    "end": "2552960"
  },
  {
    "text": "some stuff off and you leave some stuff open you mix and pour some concrete over there and you place some lightweight",
    "start": "2552960",
    "end": "2558640"
  },
  {
    "text": "eco-friendly mature furniture made out of hemp over there but for sure",
    "start": "2558640",
    "end": "2565440"
  },
  {
    "text": "for us as a startup back then with a small team but big ideas data was always going to change",
    "start": "2565440",
    "end": "2570480"
  },
  {
    "text": "and as a bank looking after your money and regulated the highest degree in the finance world",
    "start": "2570480",
    "end": "2575520"
  },
  {
    "text": "we knew it had to add up it has to be consistent so we placed a couple of bets to allow our data to change easily",
    "start": "2575520",
    "end": "2581119"
  },
  {
    "text": "without compromising consistency obviously we chose a relational model as",
    "start": "2581119",
    "end": "2586240"
  },
  {
    "text": "opposed to a graph or document or object model and we place emphasis on the acid properties of transactions",
    "start": "2586240",
    "end": "2592560"
  },
  {
    "text": "within our services we think these were good bets however we learned a few things about",
    "start": "2592560",
    "end": "2597680"
  },
  {
    "text": "betting along the way so a few words of warning pieces of advice be aware that these bets decisions and compromises you",
    "start": "2597680",
    "end": "2605040"
  },
  {
    "text": "might make in the spirit of pragmatism they can produce artifacts artifactuals have gravity and momentum",
    "start": "2605040",
    "end": "2612000"
  },
  {
    "text": "they can be big they could last in other words concrete is a little bit harder to break",
    "start": "2612000",
    "end": "2617040"
  },
  {
    "text": "up than hemp so be guided by principles explicit or implicit and i'll talk more about ours",
    "start": "2617040",
    "end": "2622160"
  },
  {
    "text": "in a moment be kind by be guided by experience or the experienced among you and place your bets on what will or will",
    "start": "2622160",
    "end": "2628720"
  },
  {
    "text": "not be expensive to change so how can we help ourselves make good bets",
    "start": "2628720",
    "end": "2634240"
  },
  {
    "start": "2630000",
    "end": "2630000"
  },
  {
    "text": "and i think that bets plus principles yields an architecture let's say you've got a you've got a",
    "start": "2634240",
    "end": "2639520"
  },
  {
    "text": "choice option a and option b you can put your spectacles on and perhaps",
    "start": "2639520",
    "end": "2644800"
  },
  {
    "text": "become less myofic and reduce the risk of this decision by testing a and b against your principles",
    "start": "2644800",
    "end": "2650560"
  },
  {
    "text": "you can ask how a affects develop productivity what about b so these principles make",
    "start": "2650560",
    "end": "2655839"
  },
  {
    "text": "your bets less of a gamble so what other principles have we established at starling what other bets",
    "start": "2655839",
    "end": "2661359"
  },
  {
    "text": "did we place as engineers well first and foremost we optimize for developer productivity",
    "start": "2661359",
    "end": "2667520"
  },
  {
    "text": "i can run the whole thing on my laptop granted it's a beast of a laptop but i can do that and i can run a raft",
    "start": "2667520",
    "end": "2673839"
  },
  {
    "text": "of simulators at the same time representing external dependencies like the faster payments network or the swift network",
    "start": "2673839",
    "end": "2679520"
  },
  {
    "text": "such like that now i've never experienced this quite like this before anywhere else",
    "start": "2679520",
    "end": "2686079"
  },
  {
    "text": "before joining starling not to this extent not to this scale and not to this effect i genuinely believe that this this on its",
    "start": "2686079",
    "end": "2692560"
  },
  {
    "text": "own this principle of optimizing for developer productivity is what allowed us to basically build this and go live in about a year with a",
    "start": "2692560",
    "end": "2698720"
  },
  {
    "text": "handful of engineers and since then while we've been growing rapidly",
    "start": "2698720",
    "end": "2704400"
  },
  {
    "text": "we build and empower cross-functional teams requiring of them minimal process and i think these things",
    "start": "2704400",
    "end": "2710880"
  },
  {
    "text": "keep us focused moving fast and unhampered so we also strive for understandability",
    "start": "2710880",
    "end": "2718560"
  },
  {
    "text": "or perhaps better changeability or even better low risk changeability we have these 30 services and they're",
    "start": "2718560",
    "end": "2724480"
  },
  {
    "text": "written in java and they're in a mono repo so i get to open them in my ide all in one go",
    "start": "2724480",
    "end": "2729839"
  },
  {
    "text": "press ctrl alt h and see how the data flows through my entire system both within the service and across a",
    "start": "2729839",
    "end": "2736640"
  },
  {
    "text": "network boundary into another service and this this yields easy static analysis and informal reasoning",
    "start": "2736640",
    "end": "2743040"
  },
  {
    "text": "and these help me to make the right kind of change we also preach a little bit thou shalt write code for future you",
    "start": "2743040",
    "end": "2750319"
  },
  {
    "text": "your colleague to a left who you respect martin and the guy who's on call",
    "start": "2750319",
    "end": "2756880"
  },
  {
    "text": "so in practice this looks like simple stuff that i hope we all know about already things like changing your stuff",
    "start": "2756880",
    "end": "2762000"
  },
  {
    "text": "incrementally so that you have small short-lived branches and tractable pr's and then since your features going to be",
    "start": "2762000",
    "end": "2767440"
  },
  {
    "text": "spread out across pr's engage a few people in the sort of medium-term review of these features",
    "start": "2767440",
    "end": "2772720"
  },
  {
    "text": "across those pr's be kind communicate and do unto others as you have then do",
    "start": "2772720",
    "end": "2778319"
  },
  {
    "text": "unto you really simple stuff um yeah simplicity consistency we we believe in",
    "start": "2778319",
    "end": "2784720"
  },
  {
    "text": "in these two things and all of our stateless services um are composed of just a handful of common",
    "start": "2784720",
    "end": "2791599"
  },
  {
    "text": "tokens they all communicate externally and internally through http apis they may or may not have demon",
    "start": "2791599",
    "end": "2797359"
  },
  {
    "text": "background processes or scheduled jobs and they all persist state to their own transactional uh relational data store",
    "start": "2797359",
    "end": "2804319"
  },
  {
    "text": "homogeneous services uh homogeneous infrastructure and we sort of wrap up cross-guide concerns and apply them consistently",
    "start": "2804319",
    "end": "2810240"
  },
  {
    "text": "across those services we limit dependencies in two ways both within our programming language so",
    "start": "2810240",
    "end": "2816400"
  },
  {
    "text": "our palmer file our palm xml yes we still use maven it doesn't have thousands and thousands of dependencies and we carefully manage",
    "start": "2816400",
    "end": "2823119"
  },
  {
    "text": "the dependencies between our services too why all this care or restriction even because simple and",
    "start": "2823119",
    "end": "2829839"
  },
  {
    "text": "consistent is understandable and changeable when we were a young and small team we",
    "start": "2829839",
    "end": "2835440"
  },
  {
    "text": "could all do everything we could switch and pivot and keep pace we had a lot of finance and banking domain to learn and that was",
    "start": "2835440",
    "end": "2841760"
  },
  {
    "text": "hard enough the development had to be fast we had to be able to take it for granted and while we've been growing",
    "start": "2841760",
    "end": "2847359"
  },
  {
    "text": "this has also been very useful for onboarding new engineers getting them up to speed quickly",
    "start": "2847359",
    "end": "2853838"
  },
  {
    "text": "so hopefully that has given you a bit of an overview of how we interpret pragmatism at stalling back",
    "start": "2857680",
    "end": "2864079"
  },
  {
    "text": "i'm certain that we will continue to grow and change and we will move further",
    "start": "2864079",
    "end": "2869119"
  },
  {
    "text": "along that spectrum of complexity right we'll take on more complicated tools we'll hire teams",
    "start": "2869119",
    "end": "2874160"
  },
  {
    "text": "to manage them um we'll continue to denormalize our data and i can't wait to tell my boss",
    "start": "2874160",
    "end": "2879920"
  },
  {
    "text": "that i definitely need to build a distributed database for a start but we will continue to focus",
    "start": "2879920",
    "end": "2887200"
  },
  {
    "text": "on the essential on data on our customers and on delivery we're",
    "start": "2887200",
    "end": "2894880"
  },
  {
    "text": "as an industry quite obsessed with accidental complexity and i like shiny tools as much as the",
    "start": "2894880",
    "end": "2900480"
  },
  {
    "text": "next person but you really do have to think carefully about the costs of the choices you're making and whether they're appropriate",
    "start": "2900480",
    "end": "2906400"
  },
  {
    "text": "in your context don't let some sense of tech status anxiety cause you to make choices",
    "start": "2906400",
    "end": "2912160"
  },
  {
    "text": "that are not appropriate to your business now not many companies actually have the",
    "start": "2912160",
    "end": "2917760"
  },
  {
    "text": "tech challenges of a google or facebook and i bet that you would not be willing to accept a lot",
    "start": "2917760",
    "end": "2923599"
  },
  {
    "text": "of the compromises that they've been perfectly happy to make but know also when to make want to take",
    "start": "2923599",
    "end": "2929119"
  },
  {
    "text": "that leap of faith tackle the next big problem address that big the bit of tech debt that you've built up by the time you get to that point",
    "start": "2929119",
    "end": "2935920"
  },
  {
    "text": "you'll have all the context to make the decision and to do the right thing so we won't stand up here and tell you",
    "start": "2935920",
    "end": "2942319"
  },
  {
    "text": "particularly what choices are best for you you all the talks are here you can watch them yourselves weigh up the costs",
    "start": "2942319",
    "end": "2948319"
  },
  {
    "text": "of the bets that you are making and as vicky boyka says you may not actually need kafka or kubernetes right now perhaps the",
    "start": "2948319",
    "end": "2955200"
  },
  {
    "text": "price is too high then again they're powerful they're exciting technologies",
    "start": "2955200",
    "end": "2960800"
  },
  {
    "text": "so maybe it's not and you do you decide so thanks very much that is",
    "start": "2960800",
    "end": "2968160"
  },
  {
    "text": "all we have for you um have a look at our recruitment page if you're interested in",
    "start": "2968160",
    "end": "2973599"
  },
  {
    "text": "the sound of any of this um we did a lot of research on uh whilst figuring out this talk so",
    "start": "2973599",
    "end": "2981839"
  },
  {
    "text": "if you download the slides a bunch of interesting papers that we've some of which you mentioned some of which we didn't even get to mention",
    "start": "2981839",
    "end": "2987599"
  },
  {
    "text": "so thank you very much",
    "start": "2987599",
    "end": "2994720"
  }
]