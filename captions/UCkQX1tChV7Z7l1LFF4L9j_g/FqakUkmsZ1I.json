[
  {
    "text": "uh thank you all for coming my name is Doug Hawkins I work on the Java virtual",
    "start": "359",
    "end": "6600"
  },
  {
    "text": "machine at a company called ail systems as he said we are known for historically our",
    "start": "6600",
    "end": "13440"
  },
  {
    "text": "Java appliance which was a custombuilt machine to just run Java fast with lots of cores we've since switched to",
    "start": "13440",
    "end": "20880"
  },
  {
    "text": "targeting x86 directly uh but we still shoot for big",
    "start": "20880",
    "end": "26080"
  },
  {
    "text": "Java applications we support presently a terabyte of Heap with very little paws",
    "start": "26080",
    "end": "32558"
  },
  {
    "text": "uh soon it will be two terabytes of Heap I actually don't work on the GC so",
    "start": "32559",
    "end": "39000"
  },
  {
    "text": "oddly enough despite the fact that we're known for GC I'm not going to really talk about it I'm going to talk about",
    "start": "39000",
    "end": "44719"
  },
  {
    "text": "the Justin Time compiler what I actually work on is our ready now technology for",
    "start": "44719",
    "end": "50960"
  },
  {
    "text": "low latency Java applications think high frequency Traders and getting rid of the tiny",
    "start": "50960",
    "end": "58120"
  },
  {
    "text": "pauses that are left over after you we've solved the GC pauses but I understand that most of you",
    "start": "58120",
    "end": "66119"
  },
  {
    "text": "don't run Zing that's our high-end one but we also have an open jdk offering",
    "start": "66119",
    "end": "72280"
  },
  {
    "text": "Zulu and open jdk is pretty much like hotspot so I'm just going to stick to",
    "start": "72280",
    "end": "77600"
  },
  {
    "text": "hotspot since that's what most of you are probably using and frankly the techniques are pretty much the same",
    "start": "77600",
    "end": "83759"
  },
  {
    "text": "regardless of which VM we're talking about there's slight differences but they're not really important to the talk",
    "start": "83759",
    "end": "88880"
  },
  {
    "text": "overall at a high level the goal for today is to",
    "start": "88880",
    "end": "95200"
  },
  {
    "text": "just understand the hotspot life cycle hotspot as you know has an",
    "start": "95200",
    "end": "100560"
  },
  {
    "text": "interpreter unlike say C and we start off running our Java by code in The Interpreter the classic VMS",
    "start": "100560",
    "end": "108880"
  },
  {
    "text": "or as I like to call them the Antiquated VMS just had an interpreter and Java 1",
    "start": "108880",
    "end": "114320"
  },
  {
    "text": "one1 ran dreadfully slow think Ruby or python",
    "start": "114320",
    "end": "121840"
  },
  {
    "text": "I'm sorry they just have an interpreter we also in hotspot now",
    "start": "122960",
    "end": "129080"
  },
  {
    "text": "profile so we follow your program around seeing what it's doing and seeing if we can use those assumptions it's not all",
    "start": "129080",
    "end": "136319"
  },
  {
    "text": "that different than say Branch prediction in Hardware we actually do Branch prediction just in the",
    "start": "136319",
    "end": "143840"
  },
  {
    "text": "VM all that's fed into the Justin Time compiler and the just time compiler",
    "start": "143840",
    "end": "151040"
  },
  {
    "text": "because it's in a managed environment can do things that your average CR or C++ compiler cannot",
    "start": "151040",
    "end": "157760"
  },
  {
    "text": "yes um yes so in the newer VM with tiered compilation you have profiling",
    "start": "157760",
    "end": "163680"
  },
  {
    "text": "some in The Interpreter and then also some more in C1 depending on the mode",
    "start": "163680",
    "end": "169000"
  },
  {
    "text": "you are in whether it's only tier four of C1 actually does profiling so yes we",
    "start": "169000",
    "end": "176080"
  },
  {
    "text": "will get there",
    "start": "176080",
    "end": "179519"
  },
  {
    "text": "the details will follow and we may de optimize because we",
    "start": "181360",
    "end": "188319"
  },
  {
    "text": "can actually speculate that something will be true and if it turns out not to be true we can correct it a CR C++",
    "start": "188319",
    "end": "195040"
  },
  {
    "text": "compiler cannot do that that turns out to be really important to making a",
    "start": "195040",
    "end": "200319"
  },
  {
    "text": "dynamic language run well and yes I count Java as a dynamic",
    "start": "200319",
    "end": "206480"
  },
  {
    "text": "language but more specifically my goal is actually to get you to understand this piece of code or at least what the",
    "start": "207760",
    "end": "214159"
  },
  {
    "text": "compiler is going to do to it it's array list for each add in Java 8 so hey it's",
    "start": "214159",
    "end": "220000"
  },
  {
    "text": "new and cool it takes a function object we Loop over the size of the array and pass each",
    "start": "220000",
    "end": "228799"
  },
  {
    "text": "element to the array or to the function that's",
    "start": "228799",
    "end": "234040"
  },
  {
    "text": "it like really we're going to spend an hour talking about five lines of code",
    "start": "234040",
    "end": "240920"
  },
  {
    "text": "yes yes we are there is that much here I assure",
    "start": "240920",
    "end": "246640"
  },
  {
    "text": "you now the actual implementation turns out to be this there's some stuff here for the mod",
    "start": "246640",
    "end": "254040"
  },
  {
    "text": "count which is to do concurrent modification exceptions but the more interesting part is these local",
    "start": "254040",
    "end": "259880"
  },
  {
    "text": "variables at the top they have done that for a reason it's just going to take us a while to get there and understand",
    "start": "259880",
    "end": "268319"
  },
  {
    "text": "why we're going to going have to understand a bunch of things we're going to have to understand Dynamic",
    "start": "268400",
    "end": "274080"
  },
  {
    "text": "compilation when it kicks in what kind of static optimizations the compiler does what kind of speculative",
    "start": "274080",
    "end": "280600"
  },
  {
    "text": "optimizations a jvm does something about interprocedural analysis and if we're going to do",
    "start": "280600",
    "end": "287360"
  },
  {
    "text": "spective optimizations we're also going to have to have a way to fix our speculations and that's the",
    "start": "287360",
    "end": "292960"
  },
  {
    "text": "deoptimization so we're going to see all of that in those five lines",
    "start": "292960",
    "end": "301120"
  },
  {
    "text": "and my real goal in this is just to get you to understand how hotspot thinks about your",
    "start": "302720",
    "end": "307759"
  },
  {
    "text": "code the compiler is really honestly not that smart and there are ways to trip it",
    "start": "307759",
    "end": "315320"
  },
  {
    "text": "up and I want you to understand what it does what kind of analyses it does so you can work with it rather than against",
    "start": "315320",
    "end": "322479"
  },
  {
    "text": "it working against it is likely not a winning strategy a compiler will go and",
    "start": "322479",
    "end": "328400"
  },
  {
    "text": "second guess what you're doing it will say ah you did that that's kind of a weird way to do this I'm going to do it",
    "start": "328400",
    "end": "334560"
  },
  {
    "text": "that way instead it will do this I'm going to",
    "start": "334560",
    "end": "339600"
  },
  {
    "text": "stay within the area that you actually has some influence and can help the",
    "start": "339600",
    "end": "347080"
  },
  {
    "text": "compiler all right first when does hotspot",
    "start": "348000",
    "end": "353600"
  },
  {
    "text": "jet this does actually change it's changed very significantly in Java 8 it",
    "start": "353600",
    "end": "359680"
  },
  {
    "text": "was an option available in Java 7 but we'll take a simple piece of",
    "start": "359680",
    "end": "365919"
  },
  {
    "text": "code here are I have a random a array of ins of size",
    "start": "366319",
    "end": "373720"
  },
  {
    "text": "1,00 I'm going to do a crappy way of benchmarking it by having a for loop",
    "start": "373720",
    "end": "379240"
  },
  {
    "text": "from I to 0 to 500 I'm going to take the Nano time",
    "start": "379240",
    "end": "384400"
  },
  {
    "text": "inside and I'm going to sum up the values this Benchmark could easily go",
    "start": "384400",
    "end": "391520"
  },
  {
    "text": "south but it's enough to illustrate the",
    "start": "391520",
    "end": "396638"
  },
  {
    "text": "point this is the program we're running and there it starts off in this",
    "start": "405240",
    "end": "413800"
  },
  {
    "text": "55,000 is range That's The Interpreter it quickly sort of improves",
    "start": "413800",
    "end": "419599"
  },
  {
    "text": "to around 20,000 nond gets a little better and then",
    "start": "419599",
    "end": "425360"
  },
  {
    "text": "finally it drops down to usually around 2 or 3,000",
    "start": "425360",
    "end": "431240"
  },
  {
    "text": "NS there are some GC pauses in here not from the sum obviously but from the io",
    "start": "431240",
    "end": "437639"
  },
  {
    "text": "which is building strings why it's not a very good way to do a",
    "start": "437639",
    "end": "444400"
  },
  {
    "text": "benchmark there are code references down in the corner I will post everything online",
    "start": "444720",
    "end": "450479"
  },
  {
    "text": "as soon as meetups file upload is working again it was not working today uh and you can go look at each of",
    "start": "450479",
    "end": "456919"
  },
  {
    "text": "these and run them yourself they're also all annotated with the VM plags you might want to run them with now if we",
    "start": "456919",
    "end": "463759"
  },
  {
    "text": "just go and plot this you get this there's this huge GC spike it kind of dominates the",
    "start": "463759",
    "end": "470800"
  },
  {
    "text": "graph if I put it on the log scale then you can actually start to see the jit",
    "start": "470800",
    "end": "476039"
  },
  {
    "text": "Behavior there are these values at the very beginning that are in The Interpreter the first Justus in time",
    "start": "476039",
    "end": "482400"
  },
  {
    "text": "compiler kicks in numbers get a little bit better and then the other Jus in time compiler kicks in and they drop",
    "start": "482400",
    "end": "489360"
  },
  {
    "text": "even further they could theoretically in this case actually drop all the way to zero",
    "start": "489360",
    "end": "496080"
  },
  {
    "text": "because I'm actually not using the result of sum and the compiler can do dead code",
    "start": "496080",
    "end": "502960"
  },
  {
    "text": "elimination didn't happen in this Benchmark there are plenty of benchmarks where it does happen you can easily to",
    "start": "502960",
    "end": "510199"
  },
  {
    "text": "yourself you can also see that if you were trying to Benchmark this and you Benchmark the wrong",
    "start": "510199",
    "end": "516518"
  },
  {
    "text": "phase you would get completely skewed numbers if you Benchmark at the very beginning for a short period of time",
    "start": "516519",
    "end": "522000"
  },
  {
    "text": "you're getting Only The Interpreter your values will be disproportionately high if you care about warm-up then you maybe",
    "start": "522000",
    "end": "528399"
  },
  {
    "text": "you want to do that but that's usually not what people want you really want it to reach a stady state to get to the",
    "start": "528399",
    "end": "535680"
  },
  {
    "text": "second jet if it hasn't done that it kind kind of doesn't matter because well that",
    "start": "535680",
    "end": "542200"
  },
  {
    "text": "method's ice cold to be",
    "start": "542200",
    "end": "545399"
  },
  {
    "text": "honest now hotspot and pretty much most Justin time compilers at this point are",
    "start": "547640",
    "end": "554640"
  },
  {
    "text": "method Justin time compilers they compile whole methods the alternative is what's called",
    "start": "554640",
    "end": "561880"
  },
  {
    "text": "a trace jit where you kind of draw a line through the hot path like this if only goes this way I'm only going to",
    "start": "561880",
    "end": "567640"
  },
  {
    "text": "evaluate that part and it can actually carry across methods those do exist that's what Android uses for dovic",
    "start": "567640",
    "end": "574880"
  },
  {
    "text": "that's what a lot of the JavaScript engines used to use but they've increasingly gone to",
    "start": "574880",
    "end": "580760"
  },
  {
    "text": "being meth jits I'm not going to explain why but",
    "start": "580760",
    "end": "587120"
  },
  {
    "text": "basically it's pretty simple to make a method jit work you just say if a method's been called a lot it's probably",
    "start": "587120",
    "end": "594959"
  },
  {
    "text": "hot that's it you have a counter how many times it been called let's compile",
    "start": "594959",
    "end": "601720"
  },
  {
    "text": "that there is more to hotspot than that if I ran that program from before",
    "start": "601720",
    "end": "609360"
  },
  {
    "text": "with this flag dxx colon print compilation which you can use on a production",
    "start": "609360",
    "end": "616240"
  },
  {
    "text": "VM you'll see this sort of output somewhere around the 67th iteration",
    "start": "616240",
    "end": "623040"
  },
  {
    "text": "sum it will do a just in time compilation of sum and then then it does another one at",
    "start": "623040",
    "end": "630560"
  },
  {
    "text": "the 75th now the way you read this is the",
    "start": "630560",
    "end": "637760"
  },
  {
    "text": "left column is the time since the VM started in",
    "start": "637760",
    "end": "642920"
  },
  {
    "text": "milliseconds the next column over is a compilation ID they're just assigned",
    "start": "643040",
    "end": "648639"
  },
  {
    "text": "sequentially the actual sequential assignment varies a little bit if you were using Java 6 which is end of life",
    "start": "648639",
    "end": "655720"
  },
  {
    "text": "and you should not be using but it may not look exactly like",
    "start": "655720",
    "end": "661399"
  },
  {
    "text": "this and it definitely won't look like this unless you're using Java 8 which has this extra tier",
    "start": "661399",
    "end": "669320"
  },
  {
    "text": "column now we know there are two tiers of jits so why does it say",
    "start": "669320",
    "end": "676560"
  },
  {
    "text": "three we'll get to that then we have the method",
    "start": "676560",
    "end": "681839"
  },
  {
    "text": "name one of them has this number after it and a percent before it and then a little bit later we see",
    "start": "681839",
    "end": "689720"
  },
  {
    "text": "one at tier four as you can imagine that's the step after",
    "start": "689720",
    "end": "695880"
  },
  {
    "text": "three and these roughly correspond to where the numbers get better when to",
    "start": "695880",
    "end": "701519"
  },
  {
    "text": "actually put them on the graph the tier three compilations happen about here",
    "start": "701519",
    "end": "706560"
  },
  {
    "text": "which is very close to where it got better the tier four compilations happen here and there's a bit of Jitter but",
    "start": "706560",
    "end": "712920"
  },
  {
    "text": "then it starts to settle down and get better still MH",
    "start": "712920",
    "end": "720200"
  },
  {
    "text": "so it's pretty common to have two jits so she asked why we have two",
    "start": "724920",
    "end": "732760"
  },
  {
    "text": "jits um in part it's out of a historical",
    "start": "732760",
    "end": "738279"
  },
  {
    "text": "accident there were two different hotspot VMS up until Java 7 there was",
    "start": "738279",
    "end": "744440"
  },
  {
    "text": "the client VM and the server VM and they had two different",
    "start": "744440",
    "end": "749720"
  },
  {
    "text": "Jets designed for two different goals the client VM was designed for swing",
    "start": "749720",
    "end": "756920"
  },
  {
    "text": "applications which I know is what everyone here is writing yeah but it's designed for",
    "start": "756920",
    "end": "764920"
  },
  {
    "text": "warmup because no one likes staring at the eclipse splash screen we wanted our",
    "start": "764920",
    "end": "770160"
  },
  {
    "text": "applications to launch quickly if we're just launching an application we don't want to sit there and",
    "start": "770160",
    "end": "776199"
  },
  {
    "text": "wait but after that let's be honest we're plotting slow humans we don't",
    "start": "776199",
    "end": "783120"
  },
  {
    "text": "barely notice a 100 millisecond delay it's really like a UI guideline you need to respond in one tenth of a second so",
    "start": "783120",
    "end": "791920"
  },
  {
    "text": "we don't really need to run all that fast after all most of the time the application just sitting there like are",
    "start": "791920",
    "end": "796959"
  },
  {
    "text": "you going to move the mouse come on move it click come on click I'm",
    "start": "796959",
    "end": "804279"
  },
  {
    "text": "bored now the server VM was designed for exactly the opposite thing",
    "start": "804279",
    "end": "810000"
  },
  {
    "text": "we're not restarting this program very often their Ops Department doesn't",
    "start": "810000",
    "end": "816440"
  },
  {
    "text": "really care so much that it takes web logic three days to start right they just start it three days",
    "start": "816440",
    "end": "823079"
  },
  {
    "text": "before it needs to launch or okay 15 minutes and that's not a big",
    "start": "823079",
    "end": "831120"
  },
  {
    "text": "deal because it's just going to be up all day or days but it could be serving many",
    "start": "831120",
    "end": "837600"
  },
  {
    "text": "plotting L slow humans in which case we'd like it to go fast so",
    "start": "837600",
    "end": "842839"
  },
  {
    "text": "that when this human's not doing anything we can do something for that other human or worse it's serving a whole bunch of",
    "start": "842839",
    "end": "849279"
  },
  {
    "text": "other machines and then speed is of the essence so one was designed to launch",
    "start": "849279",
    "end": "856160"
  },
  {
    "text": "quickly compile quickly but run slowly one the other one was designed to start",
    "start": "856160",
    "end": "861880"
  },
  {
    "text": "slowly compile slowly but run fast and then of course someone said huh",
    "start": "861880",
    "end": "869560"
  },
  {
    "text": "they do two different things that sound complimentary maybe we could put them together and that's what tiered",
    "start": "869560",
    "end": "875880"
  },
  {
    "text": "compilation is it does exist in other forms if you",
    "start": "875880",
    "end": "881480"
  },
  {
    "text": "look at any JavaScript engine all of them have some form of tiered",
    "start": "881480",
    "end": "886560"
  },
  {
    "text": "compilation you usually have a relatively unsophisticated compiler first this is true in V8 it's true in",
    "start": "886560",
    "end": "894680"
  },
  {
    "text": "JavaScript core it's true in whatever Firefox is calling their monkey now um",
    "start": "894680",
    "end": "902120"
  },
  {
    "text": "and then you have an optimizing tier or maybe two uh JavaScript core actually",
    "start": "902120",
    "end": "907880"
  },
  {
    "text": "now has four tiers an interpreter a not so smart compiler a moderately smart",
    "start": "907880",
    "end": "913639"
  },
  {
    "text": "compiler and a smart",
    "start": "913639",
    "end": "916680"
  },
  {
    "text": "compiler okay let's try to be a little more specific about when we",
    "start": "921920",
    "end": "927600"
  },
  {
    "text": "jet now I could show you what the thresholds are you could actually do this yourself you just go to ja type",
    "start": "927600",
    "end": "934480"
  },
  {
    "text": "Java dxx colon plus print Flags final and it will tell you all of the values",
    "start": "934480",
    "end": "941240"
  },
  {
    "text": "the VM has decided to use on the piece of Hardware you're running it",
    "start": "941240",
    "end": "946319"
  },
  {
    "text": "on now it may choose different values on a different piece of Hardware but you can do this if you then",
    "start": "946319",
    "end": "954120"
  },
  {
    "text": "GP for threshold you'll find these this doesn't tell you a whole heck",
    "start": "954120",
    "end": "959600"
  },
  {
    "text": "of a lot there are some new ones for tiered compilation in Java 8 and there are some",
    "start": "959600",
    "end": "965240"
  },
  {
    "text": "other ones that don't have tier on them for Java 7 and",
    "start": "965240",
    "end": "969839"
  },
  {
    "text": "earlier what those thresholds correspond to are counters there is an invocation",
    "start": "971079",
    "end": "976639"
  },
  {
    "text": "counter for the method as I already said but there is another one one that's a",
    "start": "976639",
    "end": "983519"
  },
  {
    "text": "little more specific to hotspot it's less common in other Jets there is a",
    "start": "983519",
    "end": "989079"
  },
  {
    "text": "back Edge counter or more simply put a loop counter every time you go around a",
    "start": "989079",
    "end": "994120"
  },
  {
    "text": "loop it adds one there is one counter for the whole method no matter how many Loops it",
    "start": "994120",
    "end": "1001440"
  },
  {
    "text": "has we don't have room for all those counters we just have one for all the loops and we increment",
    "start": "1001839",
    "end": "1010519"
  },
  {
    "text": "it and well just by law of averages the loop that we go around a lot will",
    "start": "1010639",
    "end": "1016480"
  },
  {
    "text": "probably be the one where the counter goes over its thresholding right this Loop is used nine times out",
    "start": "1016480",
    "end": "1022480"
  },
  {
    "text": "of 10 that one's used one time out of 10 well most of the time the counter will trip in the right Loop if it doesn't",
    "start": "1022480",
    "end": "1028959"
  },
  {
    "text": "we'll try again later so we can use that to compile hot",
    "start": "1028959",
    "end": "1034720"
  },
  {
    "text": "methods and hot Loops there's still another problem what",
    "start": "1034720",
    "end": "1039880"
  },
  {
    "text": "if I have a method that's used a little bit like say array list for each I call",
    "start": "1039880",
    "end": "1046360"
  },
  {
    "text": "it sometimes but it takes a function object and our array list contains a",
    "start": "1046360",
    "end": "1051840"
  },
  {
    "text": "couple thousand items so we have a moderately hot method with a moderately",
    "start": "1051840",
    "end": "1057440"
  },
  {
    "text": "hot Loop shouldn't we compile that we still",
    "start": "1057440",
    "end": "1062480"
  },
  {
    "text": "have instructions that we're using just the same number of times and the answer is yes there is a",
    "start": "1062480",
    "end": "1068640"
  },
  {
    "text": "compile threshold that is actually when the invocation and back Edge counter together exceed some number so there's",
    "start": "1068640",
    "end": "1076159"
  },
  {
    "text": "an invocation threshold if you're over that you can compile the method there's a back Edge threshold if you're over",
    "start": "1076159",
    "end": "1082000"
  },
  {
    "text": "that you compile the loop and then there's the compile threshold which is a combination of the two where again you",
    "start": "1082000",
    "end": "1088320"
  },
  {
    "text": "compile the method so hotspot is not just a method",
    "start": "1088320",
    "end": "1095720"
  },
  {
    "text": "jet it is also a loop jet as far as I know this is not true of most of the",
    "start": "1095720",
    "end": "1100760"
  },
  {
    "text": "JavaScript engines now hotspot calls this loop",
    "start": "1100760",
    "end": "1107520"
  },
  {
    "text": "jitting on replacement the reason it calls it that",
    "start": "1107520",
    "end": "1112760"
  },
  {
    "text": "is because you have to imagine what the VM is doing it has a bunch of interpreter",
    "start": "1112760",
    "end": "1118240"
  },
  {
    "text": "frames on the stack mid running this method on the top",
    "start": "1118240",
    "end": "1124640"
  },
  {
    "text": "of the stack we decide oh you have a hot Loop maybe I should jit you but you're",
    "start": "1124640",
    "end": "1131039"
  },
  {
    "text": "in the middle of running so now we have to rep make a new",
    "start": "1131039",
    "end": "1136919"
  },
  {
    "text": "compilation the layout of the interpreter and the compiled frame are not the same so you have to copy all the",
    "start": "1136919",
    "end": "1143919"
  },
  {
    "text": "data from The Interpreter frame into your new compiled frame and then throw The Interpreter",
    "start": "1143919",
    "end": "1150120"
  },
  {
    "text": "frame away and put the compiled frame on the top of the stack to do this so",
    "start": "1150120",
    "end": "1155200"
  },
  {
    "text": "you're replacing a stack frame that's why it's called on stack replacement and you can do it in reverse as well that is",
    "start": "1155200",
    "end": "1163360"
  },
  {
    "text": "actually important to being able to do the optimization and to me that's another",
    "start": "1163360",
    "end": "1168960"
  },
  {
    "text": "form of on stack replacement hotspot only calls Loop compilations on stack",
    "start": "1168960",
    "end": "1176000"
  },
  {
    "text": "replacement and now the tiers we saw tiers three and tier",
    "start": "1178880",
    "end": "1184640"
  },
  {
    "text": "four what happens to tier one and two now we don't use those most of the",
    "start": "1184640",
    "end": "1192480"
  },
  {
    "text": "time rather than just taking going from interpreter to C1 to C2 that is",
    "start": "1193200",
    "end": "1199200"
  },
  {
    "text": "interpreter to the client compiler to the server compiler the scheme is slightly more",
    "start": "1199200",
    "end": "1207039"
  },
  {
    "text": "complicated there are five tiers tier zero is The",
    "start": "1207159",
    "end": "1214760"
  },
  {
    "text": "Interpreter tier four is C2 that's usually the end goal that's the server",
    "start": "1214760",
    "end": "1220360"
  },
  {
    "text": "compiler the one that's fast C1 is our intermediate Waypoint",
    "start": "1220360",
    "end": "1229320"
  },
  {
    "text": "and tiers one two and three are all",
    "start": "1229320",
    "end": "1233840"
  },
  {
    "text": "C1 why it all does the same optimizations every time well that's",
    "start": "1237559",
    "end": "1244200"
  },
  {
    "text": "probably mostly true well the reason is it does extra levels of data Gathering to get from The",
    "start": "1244200",
    "end": "1251360"
  },
  {
    "text": "Interpreter to say tier three we pass a threshold",
    "start": "1251360",
    "end": "1258320"
  },
  {
    "text": "in tier three we also have to have counters so that we know when we pass the threshold to go to tier",
    "start": "1261840",
    "end": "1268679"
  },
  {
    "text": "4 but C2 is what is called a speculative",
    "start": "1269360",
    "end": "1275640"
  },
  {
    "text": "profile guided optimizing compiler it needs data about what the",
    "start": "1275640",
    "end": "1283039"
  },
  {
    "text": "program is doing down to an individual instruction level sometimes well",
    "start": "1283039",
    "end": "1289799"
  },
  {
    "text": "branches call sites but quite a few",
    "start": "1289799",
    "end": "1295200"
  },
  {
    "text": "places that's expensive that adds 30% to the execution",
    "start": "1295200",
    "end": "1300640"
  },
  {
    "text": "overhead of C1 it's",
    "start": "1300640",
    "end": "1305000"
  },
  {
    "text": "non-trivial now when the application is starting up C2 could be very busy this is when",
    "start": "1305919",
    "end": "1313679"
  },
  {
    "text": "almost all jet activity occurs right like jet happens at the beginning",
    "start": "1313679",
    "end": "1319279"
  },
  {
    "text": "and then it pretty much stops if you have a well- behaved",
    "start": "1319279",
    "end": "1325039"
  },
  {
    "text": "system and so at the beginning C2 is busy and it may not be able to get to us",
    "start": "1326559",
    "end": "1332240"
  },
  {
    "text": "and so if it can't get to our compilation any time soon because its queue is really",
    "start": "1332240",
    "end": "1337799"
  },
  {
    "text": "long is it worth paying the 30% execution overhead right away",
    "start": "1337799",
    "end": "1344880"
  },
  {
    "text": "no so in that case when we go from the inter interpreter to C1 will",
    "start": "1344880",
    "end": "1350840"
  },
  {
    "text": "say well it'd be nice if we could go and get the data for C2 but C2 is busy so",
    "start": "1350840",
    "end": "1357320"
  },
  {
    "text": "let's just go to tier two instead which has to have counters so that we know when to go from",
    "start": "1357320",
    "end": "1363880"
  },
  {
    "text": "two to three to then get the data to then give to C2 tier",
    "start": "1363880",
    "end": "1369400"
  },
  {
    "text": "four but it's much less overhead than having counters and instruction level",
    "start": "1369400",
    "end": "1375480"
  },
  {
    "text": "profiling okay what about tier",
    "start": "1375480",
    "end": "1382080"
  },
  {
    "text": "one it is for trivial",
    "start": "1382080",
    "end": "1387200"
  },
  {
    "text": "methods there are certain things that C1 is perfectly good at C2 has all sorts of",
    "start": "1387679",
    "end": "1393960"
  },
  {
    "text": "crazy fancy Loop optimizations that we're going to get to",
    "start": "1393960",
    "end": "1399120"
  },
  {
    "text": "but say something like the object Constructor it's a single bite it is a",
    "start": "1399120",
    "end": "1404919"
  },
  {
    "text": "return this is not a terribly hard thing to compile no matter how smart your compiler",
    "start": "1404919",
    "end": "1411520"
  },
  {
    "text": "is so rather than burning our C2 Budget on things like that what will",
    "start": "1411520",
    "end": "1418559"
  },
  {
    "text": "happen is you'll start off in zero you go to C1 in tier three or tier two and",
    "start": "1418559",
    "end": "1425799"
  },
  {
    "text": "it will say hm that wasn't very",
    "start": "1425799",
    "end": "1430720"
  },
  {
    "text": "hard and I don't need any more information to do this so I'm just going to instantaneously recompile into here",
    "start": "1430880",
    "end": "1439400"
  },
  {
    "text": "one which is C1 without any overhead no counters no instruction level",
    "start": "1439400",
    "end": "1446919"
  },
  {
    "text": "profiling The Hope here is that for trivial methods C1 tier one is just as good as",
    "start": "1449240",
    "end": "1457200"
  },
  {
    "text": "C2 tier 4 so your in goals are four and",
    "start": "1457200",
    "end": "1463480"
  },
  {
    "text": "one it probably sounds a little strange but that is the case",
    "start": "1463480",
    "end": "1470039"
  },
  {
    "text": "and if you looked really hard at the print compilation output you'd find a line somewhere in there that says this",
    "start": "1474440",
    "end": "1481240"
  },
  {
    "text": "compile from before got made not",
    "start": "1481240",
    "end": "1486399"
  },
  {
    "text": "entrant that's not saying that it was compiled again that's actually saying I'm done with that",
    "start": "1487480",
    "end": "1492559"
  },
  {
    "text": "compilation I'm going to lock out anyone using that compile again at the very",
    "start": "1492559",
    "end": "1498440"
  },
  {
    "text": "beginning of every compilation there's a check that says should I actually be",
    "start": "1498440",
    "end": "1503760"
  },
  {
    "text": "used if no okay kick the caller",
    "start": "1503760",
    "end": "1508760"
  },
  {
    "text": "out the reason this exists is so that we can do a lock free cach",
    "start": "1509720",
    "end": "1515720"
  },
  {
    "text": "invalidation the caller will actually cach the address of the compiled piece",
    "start": "1515720",
    "end": "1522279"
  },
  {
    "text": "of code after it's gone through finding the Callie method and then finding out",
    "start": "1522279",
    "end": "1527679"
  },
  {
    "text": "that it's already been and compiled and now we would like to get",
    "start": "1527679",
    "end": "1533760"
  },
  {
    "text": "the callers to move to a new better version but we don't want to have to",
    "start": "1533760",
    "end": "1540399"
  },
  {
    "text": "stop the world take a big lock to do that so we automically block access at a",
    "start": "1540399",
    "end": "1547200"
  },
  {
    "text": "hardware level with a single update at the beginning of this so that the new call will be forced to go back to the",
    "start": "1547200",
    "end": "1554200"
  },
  {
    "text": "call dispatcher and then the call dispatcher will reroute through the method and find",
    "start": "1554200",
    "end": "1559679"
  },
  {
    "text": "that there is a new better compile so the transition doesn't",
    "start": "1559679",
    "end": "1565880"
  },
  {
    "text": "actually incur a stop the world pause there are things that incur stop the",
    "start": "1565880",
    "end": "1570919"
  },
  {
    "text": "world pauses we will get to",
    "start": "1570919",
    "end": "1574799"
  },
  {
    "text": "those now the basic mechanisms of this they haven't changed very much to be",
    "start": "1577640",
    "end": "1584440"
  },
  {
    "text": "honest other than this introduction of tiered in Java 8 but tiered is still a work in progress",
    "start": "1584440",
    "end": "1592480"
  },
  {
    "text": "it was on by default ever so briefly in Java 7 until Oracle realized it made one",
    "start": "1592480",
    "end": "1598120"
  },
  {
    "text": "of their own programs slower and turn it back off again now they've turned it on again by",
    "start": "1598120",
    "end": "1605559"
  },
  {
    "text": "default in Java 8 but if you actually look at what the thresholds are from an",
    "start": "1605559",
    "end": "1611279"
  },
  {
    "text": "early Java 8 release to a later Java 8 release it's changed they're still tuning this",
    "start": "1611279",
    "end": "1620200"
  },
  {
    "text": "for the most part unless you had a really gnarly warm-up problem you wouldn't care the only thing you really",
    "start": "1620200",
    "end": "1626880"
  },
  {
    "text": "need to know is that hotspot finds hotspots that's where the name comes from both methods and",
    "start": "1626880",
    "end": "1636679"
  },
  {
    "text": "Loops okay that's a cursory explanation of how the jit actually kicks in",
    "start": "1638720",
    "end": "1647919"
  },
  {
    "text": "so what does it do and I only really care about the server compiler that's actually where",
    "start": "1648279",
    "end": "1654360"
  },
  {
    "text": "most of the effort towards optimizing goes because that's our end goal there",
    "start": "1654360",
    "end": "1659919"
  },
  {
    "text": "is some work going into C1 because it's our end goal for things that are",
    "start": "1659919",
    "end": "1665200"
  },
  {
    "text": "classified as trivial methods and C2 is as I said a profile",
    "start": "1665200",
    "end": "1674240"
  },
  {
    "text": "guided optimizing compiler that speculates we're going to have to see what all",
    "start": "1674240",
    "end": "1679440"
  },
  {
    "text": "those things are so weet turning to for",
    "start": "1679440",
    "end": "1685240"
  },
  {
    "text": "each the first thing that compounds the work for Java's compiler is we have to",
    "start": "1686159",
    "end": "1691679"
  },
  {
    "text": "put in safety checks I'm actually going to switch from",
    "start": "1691679",
    "end": "1697600"
  },
  {
    "text": "using array list for each to a sort of theoretical array stream for each because then I don't have to deal",
    "start": "1697600",
    "end": "1705360"
  },
  {
    "text": "with this size here I have to use this this element data length which is actually easier for the",
    "start": "1705360",
    "end": "1712919"
  },
  {
    "text": "compiler you think it looks harder it's actually",
    "start": "1712919",
    "end": "1718159"
  },
  {
    "text": "easier now we put in all the safety checks first we have this element data",
    "start": "1718240",
    "end": "1726480"
  },
  {
    "text": "length well before we can do that we first have to check is this null okay that's obviously not the case but if it",
    "start": "1726480",
    "end": "1733600"
  },
  {
    "text": "were some other variable than this we'd have to check it all right right then we",
    "start": "1733600",
    "end": "1739880"
  },
  {
    "text": "have to check is this element data is it null then we can check the",
    "start": "1739880",
    "end": "1747120"
  },
  {
    "text": "length theoretically we have to do the same thing inside before we can actually",
    "start": "1747120",
    "end": "1752480"
  },
  {
    "text": "access an element of the array we have to check this we have to check the element data and we have to do our",
    "start": "1752480",
    "end": "1759120"
  },
  {
    "text": "balance checking have to say is I less than zero then we have to throw an array",
    "start": "1759120",
    "end": "1764200"
  },
  {
    "text": "index out of bounds exception is I greater than or equal to this element data length we'd also have to throw an",
    "start": "1764200",
    "end": "1771360"
  },
  {
    "text": "exception and we have to check if our function object our action is null as",
    "start": "1771360",
    "end": "1777880"
  },
  {
    "text": "well yeah it's the compiler's job to get rid of all this and it's your job not to",
    "start": "1777880",
    "end": "1784679"
  },
  {
    "text": "screw it up all right this equals",
    "start": "1784679",
    "end": "1793159"
  },
  {
    "text": "null If This Were null we already threw a null pointer exception we before we called this method that can't happen",
    "start": "1793159",
    "end": "1801240"
  },
  {
    "text": "those two checks are gone",
    "start": "1801240",
    "end": "1804440"
  },
  {
    "text": "excellent now we're going to look at the balance check I less than",
    "start": "1807159",
    "end": "1812679"
  },
  {
    "text": "zero the compiler will go I starts at zero I is incremented by a positive",
    "start": "1812679",
    "end": "1821480"
  },
  {
    "text": "one does that mean that I has to be between zero and int Max no",
    "start": "1821480",
    "end": "1828480"
  },
  {
    "text": "because we could wrap okay in C++ that's okay in C++",
    "start": "1828480",
    "end": "1834960"
  },
  {
    "text": "there are no semantics as to what whether there's overflow or not it's allowed to assume that doesn't",
    "start": "1834960",
    "end": "1841679"
  },
  {
    "text": "happen instead in Java what we have to do is say well this element data length that's",
    "start": "1841679",
    "end": "1848799"
  },
  {
    "text": "an array and arrays can only have positive",
    "start": "1848799",
    "end": "1857639"
  },
  {
    "text": "link between zero and int Max so we can constrain I to a value between zero and",
    "start": "1857639",
    "end": "1866279"
  },
  {
    "text": "int Max and I guess those should have been greater than or equal to less than or equal to so I cannot be less than",
    "start": "1866279",
    "end": "1874919"
  },
  {
    "text": "zero this is actually done through a type system inside of the",
    "start": "1874919",
    "end": "1880080"
  },
  {
    "text": "compiler the cruel joke about statically compiled languages is we don't care",
    "start": "1880080",
    "end": "1885440"
  },
  {
    "text": "about your types the Java B code actually doesn't store a lot of the type information we deduce it by looking at",
    "start": "1885440",
    "end": "1892960"
  },
  {
    "text": "the right hand side and figuring it out is that sound like any other languages",
    "start": "1892960",
    "end": "1898159"
  },
  {
    "text": "you know yes so it's we're just being mean we're making you type it we don't even use it we're going to ReDiscover",
    "start": "1898159",
    "end": "1905320"
  },
  {
    "text": "our own more precise type information",
    "start": "1905320",
    "end": "1909638"
  },
  {
    "text": "anyway now the upper bound check the first step is to actually do what's called",
    "start": "1913639",
    "end": "1920360"
  },
  {
    "text": "canonicalization so we take that I greater than or equal to the element data length and we turn it into not I less",
    "start": "1920360",
    "end": "1929000"
  },
  {
    "text": "than the element data length how is this",
    "start": "1929000",
    "end": "1934600"
  },
  {
    "text": "better it's better because now the compiler can see oh I already checked",
    "start": "1935120",
    "end": "1941399"
  },
  {
    "text": "that up here",
    "start": "1941399",
    "end": "1944760"
  },
  {
    "text": "and so it has this common sub expression where it can say well if I'm inside the loop I less than the element data length",
    "start": "1949320",
    "end": "1956279"
  },
  {
    "text": "must be true otherwise we're not in the loop so now not true okay well that's",
    "start": "1956279",
    "end": "1964120"
  },
  {
    "text": "false so we don't have to throw an",
    "start": "1964120",
    "end": "1968360"
  },
  {
    "text": "exception good we've gotten rid of most of the checks now you might think for our array",
    "start": "1970200",
    "end": "1977440"
  },
  {
    "text": "stream where our element data must is probably an array that doesn't change we just",
    "start": "1977440",
    "end": "1982480"
  },
  {
    "text": "assign it to be final well we could just go ahead and grab the length out from the very",
    "start": "1982480",
    "end": "1987880"
  },
  {
    "text": "beginning right this sounds better then we don't have to look it up again or we",
    "start": "1987880",
    "end": "1994000"
  },
  {
    "text": "don't have to look at we Le less IND Direction every time we do a lookup around the loop no no that confuses the heck out of",
    "start": "1994000",
    "end": "2000960"
  },
  {
    "text": "the compiler it's like now this length and this element data length I don't",
    "start": "2000960",
    "end": "2006279"
  },
  {
    "text": "know that they're related unless I look all the way back here and",
    "start": "2006279",
    "end": "2011519"
  },
  {
    "text": "it's a method so it's only looking at this and now you've confused it and it",
    "start": "2011519",
    "end": "2017760"
  },
  {
    "text": "actually has to work harder it will still get rid of the check but it has to work harder to do it",
    "start": "2017760",
    "end": "2025840"
  },
  {
    "text": "it has to add one extra check outside the loop to make this work and it only works some of the",
    "start": "2025840",
    "end": "2031000"
  },
  {
    "text": "time and that's new I think in late Java 7 so you'd think something like pulling",
    "start": "2031000",
    "end": "2038039"
  },
  {
    "text": "the size out would be better for the compiler it can actually",
    "start": "2038039",
    "end": "2043440"
  },
  {
    "text": "backfire okay now we're left with a bunch of null",
    "start": "2046200",
    "end": "2051520"
  },
  {
    "text": "checks have this element data equals null outside the loop we have it again inside the loop and we have action",
    "start": "2051879",
    "end": "2059480"
  },
  {
    "text": "equals null inside the loop what could we do about those",
    "start": "2059480",
    "end": "2066838"
  },
  {
    "text": "now you'd think the first one that's required what could we possibly do to optimize",
    "start": "2069159",
    "end": "2075679"
  },
  {
    "text": "that and you'd say well the second one we just didn't through all this minations of determining bounds of ey",
    "start": "2075679",
    "end": "2082520"
  },
  {
    "text": "and deciding whether or not it was okay can't we do something similar for this element data we could assume that it's",
    "start": "2082520",
    "end": "2089760"
  },
  {
    "text": "non-null from the check above sounds good hard to",
    "start": "2089760",
    "end": "2095839"
  },
  {
    "text": "do and then actually equals null well that's required that's the first",
    "start": "2095839",
    "end": "2102839"
  },
  {
    "text": "check what are we going to be able to do about",
    "start": "2102839",
    "end": "2106480"
  },
  {
    "text": "that and this is where things start to get fun the first check the one outside",
    "start": "2108200",
    "end": "2113480"
  },
  {
    "text": "the loop we absolutely cannot get rid of it it is required we have to do the",
    "start": "2113480",
    "end": "2118520"
  },
  {
    "text": "safety check we have to throw a null pointer exception rather than segv because that's much much better",
    "start": "2118520",
    "end": "2128119"
  },
  {
    "text": "well does that mean we have to do the equivalent of checking if it's null and then having a branch and then creating",
    "start": "2130720",
    "end": "2137079"
  },
  {
    "text": "an exception object and no no no no no no no no no no no none of",
    "start": "2137079",
    "end": "2142400"
  },
  {
    "text": "that what we actually do is we just say um let's say RSI",
    "start": "2142400",
    "end": "2149400"
  },
  {
    "text": "that's where we've loaded elements let's say length as at offset",
    "start": "2149400",
    "end": "2154720"
  },
  {
    "text": "8 y we just access it",
    "start": "2154720",
    "end": "2159640"
  },
  {
    "text": "now what happens at a hardware level if you access a null pointer you seg",
    "start": "2160200",
    "end": "2166800"
  },
  {
    "text": "fault but this is a managed environment we thought of this we have",
    "start": "2166800",
    "end": "2173319"
  },
  {
    "text": "installed a Segal Handler yeah so knowing that the branch",
    "start": "2173319",
    "end": "2181359"
  },
  {
    "text": "the check and Branch would be expensive we said you know the hardware already does this why are we H making it work",
    "start": "2181359",
    "end": "2187800"
  },
  {
    "text": "extra hard to do it we'll just use the memory trapping operations to do it as",
    "start": "2187800",
    "end": "2192960"
  },
  {
    "text": "long as it's improbable this isn't so bad so you just dreference the value",
    "start": "2192960",
    "end": "2200319"
  },
  {
    "text": "your thread seg fals you go to the signal Handler and the VM says Ah I meant throw a no",
    "start": "2200319",
    "end": "2207440"
  },
  {
    "text": "pointer exception this is how it",
    "start": "2207440",
    "end": "2213359"
  },
  {
    "text": "works now trapping through Hardware back into the OS and then back into userland",
    "start": "2213760",
    "end": "2219680"
  },
  {
    "text": "is not terribly fast this is not a good strategy if nlls",
    "start": "2219680",
    "end": "2226440"
  },
  {
    "text": "are common this is a good strategy if nlls are uncommon we are counting on you",
    "start": "2226440",
    "end": "2232480"
  },
  {
    "text": "being competent otherwise this will",
    "start": "2232480",
    "end": "2239040"
  },
  {
    "text": "backfire but we've accounted for that too before I move on to the next slide",
    "start": "2239040",
    "end": "2246119"
  },
  {
    "text": "to just horrify you a little a little bit further the way stop the world works in the VM is it's a Cooperative multi-threading",
    "start": "2246119",
    "end": "2254960"
  },
  {
    "text": "system all the threads have to periodically check hey does the GC want me to",
    "start": "2254960",
    "end": "2260000"
  },
  {
    "text": "stop the way that's actually done is by reading a memory address and that is",
    "start": "2260000",
    "end": "2266440"
  },
  {
    "text": "it you see where this is going you read the memory address if the",
    "start": "2266440",
    "end": "2272440"
  },
  {
    "text": "GC doesn't want you to stop that page of memory is mapped and you just walk right",
    "start": "2272440",
    "end": "2277960"
  },
  {
    "text": "over it if the GC wants you to stop it unms",
    "start": "2277960",
    "end": "2283119"
  },
  {
    "text": "the page of memory when you get to the memory read your thread segals and excellent you've stopped so once every",
    "start": "2283119",
    "end": "2291119"
  },
  {
    "text": "Java thread has seg faled we've stop the world now we can do a garbage",
    "start": "2291119",
    "end": "2297760"
  },
  {
    "text": "collection but what do we do if you know nlls actually happen",
    "start": "2302200",
    "end": "2309119"
  },
  {
    "text": "well we detect that problem we're profiling whether or not",
    "start": "2309440",
    "end": "2316400"
  },
  {
    "text": "you are a good Java programmer or whether this piece of java code is good",
    "start": "2316400",
    "end": "2322359"
  },
  {
    "text": "we're assuming it's good from the start we're assuming nulls don't happen that's our",
    "start": "2322359",
    "end": "2328359"
  },
  {
    "text": "speculation and if I start showing a piece of java code nulls it'll give me a few chances",
    "start": "2329200",
    "end": "2337079"
  },
  {
    "text": "so I have this piece of code I have a main it calls a hot method",
    "start": "2342880",
    "end": "2348359"
  },
  {
    "text": "passes it to string hello all the hot method does is call Hash code I do this 20,000 times so that",
    "start": "2348359",
    "end": "2355520"
  },
  {
    "text": "it'll get just in time compiled I'm turning off tiered compilation and leaving print",
    "start": "2355520",
    "end": "2361119"
  },
  {
    "text": "compilation on so we have a little less noise and then the jet runs in a",
    "start": "2361119",
    "end": "2367440"
  },
  {
    "text": "background thread and I want to make sure the compilation is done before I start showing it NES so I sleep for 5",
    "start": "2367440",
    "end": "2373839"
  },
  {
    "text": "seconds that's enough time I could turn on blocking compilation I didn't feel like",
    "start": "2373839",
    "end": "2381599"
  },
  {
    "text": "it then after the sleep after the compile I start looping from 0 to 10",
    "start": "2381599",
    "end": "2389640"
  },
  {
    "text": "showing it nulls up until now it's never seen a",
    "start": "2389640",
    "end": "2394880"
  },
  {
    "text": "null it's assuming this isn't going to happen",
    "start": "2394880",
    "end": "2399319"
  },
  {
    "text": "so our output is this we first get a",
    "start": "2403480",
    "end": "2408119"
  },
  {
    "text": "compilation of hot method never having seen a null and then I show it one null not a",
    "start": "2409079",
    "end": "2415680"
  },
  {
    "text": "big deal I show it a second null not a big deal third null and it's",
    "start": "2415680",
    "end": "2422680"
  },
  {
    "text": "deciding no no no no no no you do not know what you're doing apparently nlls",
    "start": "2422680",
    "end": "2428079"
  },
  {
    "text": "are a regular thing for you I am going to make this method not entrant it",
    "start": "2428079",
    "end": "2433440"
  },
  {
    "text": "doesn't have a better one yet it's just saying this one doesn't work for",
    "start": "2433440",
    "end": "2438960"
  },
  {
    "text": "you what I thought was going to be true is not",
    "start": "2438960",
    "end": "2444079"
  },
  {
    "text": "true and then you go back to The Interpreter it will subsequently learn",
    "start": "2445280",
    "end": "2452160"
  },
  {
    "text": "from its mistake and stop trusting you",
    "start": "2452160",
    "end": "2458079"
  },
  {
    "text": "so as before with tiered we lock out a compilation and new",
    "start": "2458079",
    "end": "2464520"
  },
  {
    "text": "callers well they don't have anywhere to go so they go to The",
    "start": "2464520",
    "end": "2471400"
  },
  {
    "text": "Interpreter they do what's called a bail to interpreter and The Interpreter is many",
    "start": "2471400",
    "end": "2477440"
  },
  {
    "text": "many many orders of magnitude slower than the Jus in time compiled code you",
    "start": "2477440",
    "end": "2483480"
  },
  {
    "text": "don't really want to spend a lot of time there",
    "start": "2483480",
    "end": "2488040"
  },
  {
    "text": "in the meantime it's also learned from its mistake and it recompiles in the",
    "start": "2488640",
    "end": "2493839"
  },
  {
    "text": "background and makes another one and then it switches to using that if I kept running this it would not keep making a",
    "start": "2493839",
    "end": "2502040"
  },
  {
    "text": "method not entr it would do another compile and then it would stay",
    "start": "2502040",
    "end": "2509039"
  },
  {
    "text": "in this has some interesting implications to a large extent the VM",
    "start": "2509960",
    "end": "2515319"
  },
  {
    "text": "starts optimistic assuming things are going to go",
    "start": "2515319",
    "end": "2521839"
  },
  {
    "text": "well and it drives slowly into a pessimistic state so if you had a long running",
    "start": "2521839",
    "end": "2529119"
  },
  {
    "text": "server application and some user gave you a piece of data on Tuesday that caused the",
    "start": "2529119",
    "end": "2535119"
  },
  {
    "text": "null well that's not a problem when they do it again on Thursday that's not a problem either",
    "start": "2535119",
    "end": "2541800"
  },
  {
    "text": "when they do it again the next Monday then your system may slow down and it",
    "start": "2541800",
    "end": "2546839"
  },
  {
    "text": "will come back up again but not quite as fast as",
    "start": "2546839",
    "end": "2551838"
  },
  {
    "text": "before eventually the compilation may get evicted if it's not really getting used but that doesn't happen too often",
    "start": "2553880",
    "end": "2562000"
  },
  {
    "text": "okay so we could actually make all these null checks better but if we could",
    "start": "2562000",
    "end": "2567839"
  },
  {
    "text": "totally eliminate them that would be even better",
    "start": "2567839",
    "end": "2572240"
  },
  {
    "text": "still you would think we should be able to do some sort of common sub expression or type reasoning about this element",
    "start": "2573599",
    "end": "2581160"
  },
  {
    "text": "data equals null right it's n not null outside the loop if it was null we threw",
    "start": "2581160",
    "end": "2587160"
  },
  {
    "text": "a null pointer exception we're not in the loop and we're done but this requires knowing that all",
    "start": "2587160",
    "end": "2594040"
  },
  {
    "text": "the parts of that don't change that requires knowing that null doesn't change okay that's easy that",
    "start": "2594040",
    "end": "2600559"
  },
  {
    "text": "requires knowing that this doesn't change that's sort of easy modulo the",
    "start": "2600559",
    "end": "2606359"
  },
  {
    "text": "fact that the garbage collector may move this somewhere else but that's beside the",
    "start": "2606359",
    "end": "2612160"
  },
  {
    "text": "point this element data doesn't change that's a bit",
    "start": "2612160",
    "end": "2619000"
  },
  {
    "text": "harder the actual easy case is the action",
    "start": "2619839",
    "end": "2626359"
  },
  {
    "text": "variable it's easy because it's a local variable it cannot be changed by another",
    "start": "2626480",
    "end": "2633800"
  },
  {
    "text": "thread or even another method on the stack it's very easy to reason about its",
    "start": "2633800",
    "end": "2641640"
  },
  {
    "text": "properties okay what are you g to",
    "start": "2643200",
    "end": "2648640"
  },
  {
    "text": "do we're going to do this it's an optimization called Loop",
    "start": "2648640",
    "end": "2654400"
  },
  {
    "text": "peeling the idea is let's not do one Loop let's split it into multiple Loops",
    "start": "2654400",
    "end": "2662119"
  },
  {
    "text": "or multiple fragments of a loop",
    "start": "2662119",
    "end": "2667119"
  },
  {
    "text": "hotspot will actually break your Loops into a pre-loop a body Loop and a",
    "start": "2667880",
    "end": "2674000"
  },
  {
    "text": "postloop here we're just going to do a simple pre-loop of one",
    "start": "2674599",
    "end": "2679680"
  },
  {
    "text": "iteration so we say if I is less than zero I is equal Zer so if zero is less",
    "start": "2679680",
    "end": "2687079"
  },
  {
    "text": "than the element data length then we go and do the first iteration on that",
    "start": "2687079",
    "end": "2692160"
  },
  {
    "text": "iteration well we still have to check element data we still have to check action is",
    "start": "2692160",
    "end": "2700040"
  },
  {
    "text": "null but after that for the remaining one to however many in iterations we've",
    "start": "2700040",
    "end": "2706520"
  },
  {
    "text": "checked action if it was null nobody changes it we've already thrown a null pointer",
    "start": "2706520",
    "end": "2713040"
  },
  {
    "text": "exception if it's not null it has to be not null it's a local variable it stays that",
    "start": "2713040",
    "end": "2718319"
  },
  {
    "text": "way we can get rid of that check now this element data can it be",
    "start": "2718319",
    "end": "2726480"
  },
  {
    "text": "changed by another thread absolutely do we care if you're the compiler the answer",
    "start": "2726480",
    "end": "2733680"
  },
  {
    "text": "is no don't care you didn't tell me that it was a",
    "start": "2733680",
    "end": "2738880"
  },
  {
    "text": "synchronized variable I don't care I'm allowed to assume it doesn't",
    "start": "2738880",
    "end": "2746880"
  },
  {
    "text": "change so then we get to say okay pull element data out into a local",
    "start": "2753440",
    "end": "2759400"
  },
  {
    "text": "variable after all in Hardware you have to pull everything into a register to work with it anyway so conceptually you",
    "start": "2759400",
    "end": "2766240"
  },
  {
    "text": "always have to work with local variables there's no way around",
    "start": "2766240",
    "end": "2771599"
  },
  {
    "text": "this then ah that shouldn't have been element data link sorry you check if element data is null okay that goes away",
    "start": "2772920",
    "end": "2780559"
  },
  {
    "text": "and that one goes away because we are now assuming we",
    "start": "2780559",
    "end": "2785680"
  },
  {
    "text": "don't care if another thread ch changes it this should terrify you a little",
    "start": "2785680",
    "end": "2793760"
  },
  {
    "text": "bit now you think this is great for your array and it",
    "start": "2794119",
    "end": "2799200"
  },
  {
    "text": "is but the compiler doesn't care whether your variable is an array or say a",
    "start": "2799200",
    "end": "2805760"
  },
  {
    "text": "Boolean involved in some coordination protocol if you have shared data equal",
    "start": "2805760",
    "end": "2812440"
  },
  {
    "text": "something and Shar done equal to true in some producer thread",
    "start": "2812440",
    "end": "2817880"
  },
  {
    "text": "you're hoping that the other thread actually sees that Shar done became true from false after you've set the",
    "start": "2818760",
    "end": "2825559"
  },
  {
    "text": "data well shared done isn't equal any different than element data it's just",
    "start": "2825559",
    "end": "2831599"
  },
  {
    "text": "another variable inside the loop that we want to say doesn't",
    "start": "2831599",
    "end": "2836720"
  },
  {
    "text": "change so we can say local done is equal to Shar done oh if that's false we'll",
    "start": "2837119",
    "end": "2844319"
  },
  {
    "text": "just spin indefinitely this is perfectly",
    "start": "2844319",
    "end": "2849839"
  },
  {
    "text": "legal it's the same optimization just applied in terrifying",
    "start": "2850599",
    "end": "2857760"
  },
  {
    "text": "situation if you want this to work you have to make Shar done volatile and then",
    "start": "2857760",
    "end": "2863280"
  },
  {
    "text": "it actually has to check every single time it's not allowed to ever turn one",
    "start": "2863280",
    "end": "2868800"
  },
  {
    "text": "load multiple loads into a single",
    "start": "2868800",
    "end": "2873280"
  },
  {
    "text": "load this is also still wrong for other reasons in that the producer thread can be reordered as well the",
    "start": "2874599",
    "end": "2881200"
  },
  {
    "text": "volatile fixes that too but that's for the concurrency",
    "start": "2881200",
    "end": "2888680"
  },
  {
    "text": "talks okay so we're good",
    "start": "2890040",
    "end": "2895119"
  },
  {
    "text": "no single threaded side effects are still a problem what I have to maintain your",
    "start": "2895119",
    "end": "2903240"
  },
  {
    "text": "single-threaded semantics you didn't say you wanted multi-threaded semantics so that's irrelevant but single-threaded",
    "start": "2903240",
    "end": "2909000"
  },
  {
    "text": "semantics we must maintain why is that a problem it's a",
    "start": "2909000",
    "end": "2914400"
  },
  {
    "text": "problem because of this accept call could accept change element",
    "start": "2914400",
    "end": "2921079"
  },
  {
    "text": "data could it somehow would have a reference to the array list or the array stream and add something to it",
    "start": "2921079",
    "end": "2927599"
  },
  {
    "text": "absolutely it could terrifyingly enough even the equals call inside of a ray list index",
    "start": "2927599",
    "end": "2934520"
  },
  {
    "text": "of could do that I hope we all agree that's a bad idea but it could and the compiler is",
    "start": "2934520",
    "end": "2942799"
  },
  {
    "text": "obliged to allow you to do such things if you want",
    "start": "2942799",
    "end": "2949400"
  },
  {
    "text": "to and so it has to say at both of these calls element data could change you",
    "start": "2949400",
    "end": "2956880"
  },
  {
    "text": "could have added to the array list and if you did",
    "start": "2956880",
    "end": "2961960"
  },
  {
    "text": "that well it's not the same object anymore maybe I I had to dynamically",
    "start": "2961960",
    "end": "2967640"
  },
  {
    "text": "grow the array and I had to create a new one and replace it so it's not Loop",
    "start": "2967640",
    "end": "2972760"
  },
  {
    "text": "invariant it changed and if we were talking about the size well the size could have definitely",
    "start": "2972760",
    "end": "2980318"
  },
  {
    "text": "changed darn but you're like oh this is array",
    "start": "2981280",
    "end": "2988400"
  },
  {
    "text": "stream not array list we said the element data is",
    "start": "2988400",
    "end": "2994680"
  },
  {
    "text": "final yeah yep that sounds promising but there's",
    "start": "2994680",
    "end": "3001160"
  },
  {
    "text": "reflection reflection can change final variables and the compiler is obliged to",
    "start": "3001160",
    "end": "3006960"
  },
  {
    "text": "allow you to do this even though you",
    "start": "3006960",
    "end": "3013240"
  },
  {
    "text": "shouldn't there is work going on right now to make this better to trust Final",
    "start": "3013680",
    "end": "3021079"
  },
  {
    "text": "on certain types of classes like oh the character array inside of a string",
    "start": "3021079",
    "end": "3028640"
  },
  {
    "text": "yeah we can't do that today so our way of solving this is to",
    "start": "3028760",
    "end": "3033960"
  },
  {
    "text": "just say strings are special everything else the other choice is we have to have",
    "start": "3033960",
    "end": "3041000"
  },
  {
    "text": "a way to say oh you used reflection for that field okay I can't do that anymore",
    "start": "3041000",
    "end": "3047880"
  },
  {
    "text": "and de optimize and fix it so we assume that you're not going to be do something bad but if you do we have to correct it",
    "start": "3047880",
    "end": "3055960"
  },
  {
    "text": "that is the direction things are",
    "start": "3055960",
    "end": "3059359"
  },
  {
    "text": "going so what are we left with we have to prove that this call has no side",
    "start": "3064119",
    "end": "3072119"
  },
  {
    "text": "effects we have to do some form of interprocedural optimization we have to actually look inside of action and see",
    "start": "3072119",
    "end": "3079960"
  },
  {
    "text": "what it's doing maybe it doesn't modify our array list I hope",
    "start": "3079960",
    "end": "3088078"
  },
  {
    "text": "and in hotspot the only form of interprocedural optimization is",
    "start": "3088280",
    "end": "3094680"
  },
  {
    "text": "inlining inlining is conceptually quite simple we copy and paste the call E I.E",
    "start": "3099480",
    "end": "3108000"
  },
  {
    "text": "action accept into the caller for each that's it you should not",
    "start": "3108000",
    "end": "3116240"
  },
  {
    "text": "copy and paste your code this is the compiler's job and it does it quite well I assure",
    "start": "3116240",
    "end": "3122720"
  },
  {
    "text": "you now the nominal explanation of why inlining is a good thing is if we have something like print",
    "start": "3123559",
    "end": "3131599"
  },
  {
    "text": "the square of nine you can imagine what square is it's you know x x",
    "start": "3131599",
    "end": "3138160"
  },
  {
    "text": "x a single multiply and the amount of effort we'd expend putting things on the",
    "start": "3138160",
    "end": "3143799"
  },
  {
    "text": "stack doing a multiply and taking it back off the stack is disproportional to the",
    "start": "3143799",
    "end": "3148920"
  },
  {
    "text": "multiply that is true and so we would inline it and we'd",
    "start": "3148920",
    "end": "3156000"
  },
  {
    "text": "say it's 9 * 9 and then we'd apply the simplest optimization you can possibly",
    "start": "3156000",
    "end": "3161480"
  },
  {
    "text": "imagine constant folding and say you know 9 * 9 is 81 and then we wouldn't have a call or a",
    "start": "3161480",
    "end": "3170040"
  },
  {
    "text": "multiply and that's good",
    "start": "3170040",
    "end": "3174680"
  },
  {
    "text": "I'll show you it is good we'll actually Benchmark this we're going to use a tool",
    "start": "3177680",
    "end": "3184000"
  },
  {
    "text": "called the Java measurement harness it is actually what Oracle Oracle created this to Benchmark the VM we use it as",
    "start": "3184000",
    "end": "3190599"
  },
  {
    "text": "well at a and it basically let you write benchmarks as junit tests",
    "start": "3190599",
    "end": "3199680"
  },
  {
    "text": "and increase the font",
    "start": "3216880",
    "end": "3220680"
  },
  {
    "text": "size that looks big enough",
    "start": "3231040",
    "end": "3235640"
  },
  {
    "text": "okay so rather than writing test methods you",
    "start": "3237880",
    "end": "3244680"
  },
  {
    "text": "write Benchmark methods and I'm going to Loop over an",
    "start": "3244680",
    "end": "3251400"
  },
  {
    "text": "array of element data in this case it's actually an in Array that I set up as a final",
    "start": "3251400",
    "end": "3258400"
  },
  {
    "text": "variable and I'm going to go through that and I'm going to pass it to some consumption",
    "start": "3262440",
    "end": "3268200"
  },
  {
    "text": "method in this case the consumption method is easy to resolve it is",
    "start": "3268200",
    "end": "3275400"
  },
  {
    "text": "static we know exactly which method we're calling it's that one it's",
    "start": "3275400",
    "end": "3282000"
  },
  {
    "text": "static and it just accumulates a",
    "start": "3282359",
    "end": "3286558"
  },
  {
    "text": "sum and with jmh I can actually tell it inline this method or don't",
    "start": "3288880",
    "end": "3297240"
  },
  {
    "text": "and see what the effects of that are and I can write multiple Benchmark",
    "start": "3297240",
    "end": "3302799"
  },
  {
    "text": "methods so I could do a c style loop I could pull it out into a local",
    "start": "3302799",
    "end": "3308000"
  },
  {
    "text": "variable assuming that it doesn't change or I could just use the enhanced",
    "start": "3308000",
    "end": "3313839"
  },
  {
    "text": "style",
    "start": "3313839",
    "end": "3316200"
  },
  {
    "text": "one going to run this Benchmark now the way jmh actually works",
    "start": "3320280",
    "end": "3326319"
  },
  {
    "text": "works is it uses Maven and it uses a plugin into your compiler to create a",
    "start": "3326319",
    "end": "3331799"
  },
  {
    "text": "wrapper class that takes care of all the bench marking problems that you would otherwise have it makes sure that that",
    "start": "3331799",
    "end": "3339200"
  },
  {
    "text": "method is hot that we're measuring the C2 phase the server execution phase of",
    "start": "3339200",
    "end": "3344799"
  },
  {
    "text": "the method and not The Interpreter phase and it actually runs it inside of",
    "start": "3344799",
    "end": "3351359"
  },
  {
    "text": "a loop and it runs for long enough to be significant time measurement is not that",
    "start": "3351359",
    "end": "3358680"
  },
  {
    "text": "easy so the main thing is you want it to reach a steady state it'll actually print out standard",
    "start": "3359200",
    "end": "3365319"
  },
  {
    "text": "deviation and it's going to have to fill some Quantum of time so the question was what is",
    "start": "3365319",
    "end": "3371640"
  },
  {
    "text": "significant like on Windows traditionally the clock would only report 16 millisecond accuracy so you",
    "start": "3371640",
    "end": "3377440"
  },
  {
    "text": "couldn't measure something less than 16 milliseconds unless you just ran it a whole bunch of times and then averaged it out a tool like jmh will do that for",
    "start": "3377440",
    "end": "3385039"
  },
  {
    "text": "you and it does it in a way where I'm not writing the loop myself so I don't have",
    "start": "3385039",
    "end": "3392119"
  },
  {
    "text": "to worry about the compiler accidentally exploting other loop optimizations and completely skewing my",
    "start": "3392119",
    "end": "3399520"
  },
  {
    "text": "Benchmark so you use Maven you have to use it create it with an archetype it builds a Target",
    "start": "3401839",
    "end": "3411680"
  },
  {
    "text": "jar that's in the Target direct I'm sorry a Ben marks jar in the Target",
    "start": "3412880",
    "end": "3419520"
  },
  {
    "text": "directory and now we're running I have instructed it to use",
    "start": "3440359",
    "end": "3445640"
  },
  {
    "text": "fewer iterations than it would like to it wants to actually do 10 warmup",
    "start": "3445640",
    "end": "3450920"
  },
  {
    "text": "iterations 10 measurement iterations and it wants to do that 10 times it wants to Fork the VM 10 times because the profile",
    "start": "3450920",
    "end": "3459280"
  },
  {
    "text": "data may vary from one run to the next did I mention that the counters aren't updated",
    "start": "3459280",
    "end": "3466400"
  },
  {
    "text": "atomically they're inaccurate having accurate counts would be too expensive we don't do",
    "start": "3466640",
    "end": "3474520"
  },
  {
    "text": "that yeah they're close",
    "start": "3474920",
    "end": "3480880"
  },
  {
    "text": "enough and for this particular case it didn't actually matter how I wrote my",
    "start": "3483960",
    "end": "3491200"
  },
  {
    "text": "loop I could do the C style loop I could pull it out into local",
    "start": "3494359",
    "end": "3500319"
  },
  {
    "text": "variable or I could use the enhanced Loop it doesn't actually matter",
    "start": "3500319",
    "end": "3506799"
  },
  {
    "text": "but if I tell it not to in line which I did over here on another",
    "start": "3506799",
    "end": "3513240"
  },
  {
    "text": "tab the results are a bit different obviously the numbers are higher this is the overhead of the call",
    "start": "3513240",
    "end": "3520720"
  },
  {
    "text": "it's non-trivial that is a lot of the optimization from",
    "start": "3520720",
    "end": "3526000"
  },
  {
    "text": "inlining but you'll also notice that the C style Loop actually",
    "start": "3526799",
    "end": "3532440"
  },
  {
    "text": "now differs from the other two the C style Loop",
    "start": "3532440",
    "end": "3539280"
  },
  {
    "text": "differs because without the inlining in",
    "start": "3539280",
    "end": "3545599"
  },
  {
    "text": "place after the call to consume you have to assume that element",
    "start": "3550359",
    "end": "3555440"
  },
  {
    "text": "data could have changed and reload it you can still do a lot of other",
    "start": "3555440",
    "end": "3560920"
  },
  {
    "text": "optimizations just from the fact that nothing changes from the four line to the line after that where you access the",
    "start": "3560920",
    "end": "3566240"
  },
  {
    "text": "element data but after the call you have to start over",
    "start": "3566240",
    "end": "3571480"
  },
  {
    "text": "again if you've already put it into a local variable well you put it into a local",
    "start": "3573400",
    "end": "3580079"
  },
  {
    "text": "variable we're allowed to assume the local variable can't change and that's what you wanted to use if you access",
    "start": "3580079",
    "end": "3586000"
  },
  {
    "text": "Heap we have to assume that it could change and so you end up with this deviation",
    "start": "3586000",
    "end": "3593599"
  },
  {
    "text": "so what's the performance characteristics of going to Heap versus local",
    "start": "3599760",
    "end": "3605400"
  },
  {
    "text": "um so I'm not too concerned that the",
    "start": "3605400",
    "end": "3610520"
  },
  {
    "text": "accesses are going to be all that different I mean the stack will probably be might be a little",
    "start": "3610520",
    "end": "3616720"
  },
  {
    "text": "faster yeah but it's more about the trouble the compiler can go to to prove",
    "start": "3616720",
    "end": "3624160"
  },
  {
    "text": "that stuff on the Heap doesn't change versus is what it has to do for locals locals it's just it knows you've told it",
    "start": "3624160",
    "end": "3631640"
  },
  {
    "text": "it has a very limited scope over after after over which it must look and then",
    "start": "3631640",
    "end": "3637319"
  },
  {
    "text": "it's all the optimizations that follow you know like in many cases it won't",
    "start": "3637319",
    "end": "3642520"
  },
  {
    "text": "make any difference but in a few it could make a dramatic difference I'm actually looking",
    "start": "3642520",
    "end": "3648359"
  },
  {
    "text": "at one right now where it's a 100%",
    "start": "3648359",
    "end": "3652720"
  },
  {
    "text": "difference it's the difference in a benchmark running in 55 seconds versus 110",
    "start": "3654440",
    "end": "3661240"
  },
  {
    "text": "seconds so it could be",
    "start": "3661359",
    "end": "3665200"
  },
  {
    "text": "gigantic so why did the enhanced for Loop Do Well turns out it's not just",
    "start": "3684200",
    "end": "3692200"
  },
  {
    "text": "sugar it actually creates a local variable it's not quite the same",
    "start": "3692200",
    "end": "3700000"
  },
  {
    "text": "thing as the C style Loop accessing the member variable directly it actually",
    "start": "3700000",
    "end": "3705400"
  },
  {
    "text": "first puts the member variable into a local variable which the compiler gets to determine doesn't change",
    "start": "3705400",
    "end": "3713160"
  },
  {
    "text": "so returning to this just to terrify you further if you had a call inside of your",
    "start": "3720599",
    "end": "3727440"
  },
  {
    "text": "Loop if it gets doesn't get inlined your code works because you have to reload after",
    "start": "3727440",
    "end": "3734480"
  },
  {
    "text": "the call if you're unlucky enough that your method does get",
    "start": "3734480",
    "end": "3740599"
  },
  {
    "text": "inlined then it doesn't work because we're allowed to assume it doesn't",
    "start": "3740599",
    "end": "3747760"
  },
  {
    "text": "change and different compilers will make different choices and can even change their mind",
    "start": "3747760",
    "end": "3754400"
  },
  {
    "text": "so good luck finding your concurrency problems",
    "start": "3754400",
    "end": "3762000"
  },
  {
    "text": "yeah okay there is a bad joke about what the",
    "start": "3762960",
    "end": "3770119"
  },
  {
    "text": "similarities are between Java and JavaScript it's like car is to carpet",
    "start": "3770119",
    "end": "3777000"
  },
  {
    "text": "from my perspective they're actually substantially similar they both rely heavily on",
    "start": "3777000",
    "end": "3783559"
  },
  {
    "text": "Dynamic calls this is very different than C or",
    "start": "3783559",
    "end": "3789599"
  },
  {
    "text": "C++ where that's not the",
    "start": "3789599",
    "end": "3793720"
  },
  {
    "text": "case in C++ you have to mark a call is virtual if it's going to be a dynamic call in Java we decided that's the",
    "start": "3796039",
    "end": "3804160"
  },
  {
    "text": "default and if that's going to be your default you better be good at",
    "start": "3804160",
    "end": "3810200"
  },
  {
    "text": "it I was reading something recently I think it was a Forbes article that was suggesting if you took your average Java",
    "start": "3810200",
    "end": "3817720"
  },
  {
    "text": "program C++ program and rewrote it in Java it would run three times slower the caveat was if you took your",
    "start": "3817720",
    "end": "3825279"
  },
  {
    "text": "average Java program and reun it rewrote it in C++ it would run three times",
    "start": "3825279",
    "end": "3831240"
  },
  {
    "text": "slower because the Java program is probably using a lot of dynamic calls which the jvm turns out to be very good",
    "start": "3831240",
    "end": "3838160"
  },
  {
    "text": "at and a C++ compiler is",
    "start": "3838160",
    "end": "3842920"
  },
  {
    "text": "not okay so why is this hard well it's hard because it's not a",
    "start": "3846079",
    "end": "3852279"
  },
  {
    "text": "static call we don't know what you're calling how many implementations of",
    "start": "3852279",
    "end": "3859200"
  },
  {
    "text": "equals are there are we going to inline every single one of them",
    "start": "3859200",
    "end": "3867520"
  },
  {
    "text": "no that's not going to work but this is a profile guided",
    "start": "3869279",
    "end": "3875279"
  },
  {
    "text": "compiler we can do some interesting",
    "start": "3875279",
    "end": "3879599"
  },
  {
    "text": "things this turns out to be so important that the VM has four separate",
    "start": "3881279",
    "end": "3888319"
  },
  {
    "text": "ways to get rid of dynamic calls a backup for the backup for the",
    "start": "3888319",
    "end": "3893720"
  },
  {
    "text": "backup yes",
    "start": "3893720",
    "end": "3897640"
  },
  {
    "text": "yeah so we could do it through static analysis we could say oh we don't care about your left-and side type but we see",
    "start": "3899520",
    "end": "3906520"
  },
  {
    "text": "that the new object was this therefore we follow that type all the way through we know that from the point from",
    "start": "3906520",
    "end": "3912240"
  },
  {
    "text": "creation to the point to use it's some specific type we don't have to do a dynamic",
    "start": "3912240",
    "end": "3917599"
  },
  {
    "text": "call a C++ compiler could do that",
    "start": "3917599",
    "end": "3923160"
  },
  {
    "text": "we could also make some sort of close World assumption you could say that method is virtual but looking at all the",
    "start": "3925799",
    "end": "3932680"
  },
  {
    "text": "classes you ever use there's only one",
    "start": "3932680",
    "end": "3938359"
  },
  {
    "text": "implementation that must be the one you're using theoretically a C++ compiler could",
    "start": "3938359",
    "end": "3944599"
  },
  {
    "text": "do that then if that didn't work we could",
    "start": "3944599",
    "end": "3951599"
  },
  {
    "text": "say well we're going to run it a bunch of times and we're just going to keep keep track of what happened and it turns",
    "start": "3951599",
    "end": "3957839"
  },
  {
    "text": "out that site only used two types we can do",
    "start": "3957839",
    "end": "3964119"
  },
  {
    "text": "that and we could make sure a method is never overridden and we could just say that's",
    "start": "3964119",
    "end": "3973079"
  },
  {
    "text": "fine we have all of these I'm going to talk to you about two of",
    "start": "3973240",
    "end": "3978359"
  },
  {
    "text": "them the close World assumption hotspot calls this class",
    "start": "3978359",
    "end": "3984640"
  },
  {
    "text": "hierarchy analysis or cha the idea is I have a function object",
    "start": "3984640",
    "end": "3991839"
  },
  {
    "text": "it has an apply method right now you've only loaded the",
    "start": "3991839",
    "end": "3998960"
  },
  {
    "text": "square class that's it in my Clos world of what you've done",
    "start": "3998960",
    "end": "4005880"
  },
  {
    "text": "so far that's the only type of function that",
    "start": "4005880",
    "end": "4010558"
  },
  {
    "text": "exists now forgetting the fact that classes in Java are lazy loaded we could always load another class that does have",
    "start": "4012799",
    "end": "4019680"
  },
  {
    "text": "one of these methods or heck you could just make a class out of thin",
    "start": "4019680",
    "end": "4024400"
  },
  {
    "text": "air then what would we do oh and you are making classes out of thin air I promise",
    "start": "4025079",
    "end": "4031760"
  },
  {
    "text": "you lambdas make classes out of thin air reflection makes classes out of thin air",
    "start": "4031760",
    "end": "4037680"
  },
  {
    "text": "XML transforms make class out of thin air I'm sure one of those ways you are making classes",
    "start": "4037680",
    "end": "4045838"
  },
  {
    "text": "let's look at one case I have my square and I compiled this Loop by",
    "start": "4051760",
    "end": "4059559"
  },
  {
    "text": "running it 20,000 times and then sleeping I can ask the VM to tell me",
    "start": "4059559",
    "end": "4065559"
  },
  {
    "text": "what it inlined I can run print",
    "start": "4065559",
    "end": "4073119"
  },
  {
    "text": "compilation with a flag call unlock diagnostic VM options which lets me use",
    "start": "4073119",
    "end": "4078359"
  },
  {
    "text": "a whole bunch of other things and print inlining now print inlining by default",
    "start": "4078359",
    "end": "4085640"
  },
  {
    "text": "will inter leave output from multiple compiles happening at the same time so it's also a good idea to turn off",
    "start": "4085640",
    "end": "4092599"
  },
  {
    "text": "background compilation I didn't show that in the slide well you'll get some output like",
    "start": "4092599",
    "end": "4100480"
  },
  {
    "text": "this you'll see that our monomorphic apply function which is just a wrapper around",
    "start": "4100480",
    "end": "4106719"
  },
  {
    "text": "the functions apply did in fact inline",
    "start": "4106719",
    "end": "4111480"
  },
  {
    "text": "Square now the main method which is the loop inside of main also inlined the",
    "start": "4113679",
    "end": "4119000"
  },
  {
    "text": "apply method it actually can see the creation and inline",
    "start": "4119000",
    "end": "4125640"
  },
  {
    "text": "Square so the latter last one is done statically but the first one is done",
    "start": "4125640",
    "end": "4131400"
  },
  {
    "text": "based on this close World assumption",
    "start": "4131400",
    "end": "4136318"
  },
  {
    "text": "now when this happens curiously enough the compiled do code does not",
    "start": "4139000",
    "end": "4146520"
  },
  {
    "text": "check the type of the function it just says yeah must be a",
    "start": "4146520",
    "end": "4151679"
  },
  {
    "text": "square oh it's square right now it has to be square must always be a",
    "start": "4151679",
    "end": "4156758"
  },
  {
    "text": "square how are we going to detect when something else shows",
    "start": "4156759",
    "end": "4162159"
  },
  {
    "text": "up if the compilation cannot detect the problem itself s what do you",
    "start": "4162159",
    "end": "4170120"
  },
  {
    "text": "do well let me show",
    "start": "4172159",
    "end": "4176359"
  },
  {
    "text": "you so this is our program with comp tiered compilation turned off print",
    "start": "4191679",
    "end": "4197440"
  },
  {
    "text": "compilation turned on and a couple more things for",
    "start": "4197440",
    "end": "4202360"
  },
  {
    "text": "fun what it is doing it is using a square it is calling not one apply",
    "start": "4204320",
    "end": "4211600"
  },
  {
    "text": "wrapper function but eight of them waiting for them all to",
    "start": "4211600",
    "end": "4217480"
  },
  {
    "text": "compile and then I just sort of subtly hint that you know maybe there's another",
    "start": "4217480",
    "end": "4223800"
  },
  {
    "text": "type of function in the world maybe don't actually need to use it just yeah there might be",
    "start": "4223800",
    "end": "4232880"
  },
  {
    "text": "one okay so all eight get compiled that makes sense what is",
    "start": "4235960",
    "end": "4243120"
  },
  {
    "text": "that you can see the de optimize and before we even print out square root",
    "start": "4253320",
    "end": "4258760"
  },
  {
    "text": "which happens here eight methods simultaneously made not",
    "start": "4258760",
    "end": "4265600"
  },
  {
    "text": "entrant why well they can't detect their mistake so as soon as this class is",
    "start": "4266440",
    "end": "4273760"
  },
  {
    "text": "loaded they're wrong potentially we don't know so they all have to",
    "start": "4273760",
    "end": "4280760"
  },
  {
    "text": "die and they all have to die now atom",
    "start": "4280760",
    "end": "4285800"
  },
  {
    "text": "Al and the only way to kill eight in things atomically is they stop the world",
    "start": "4285800",
    "end": "4294040"
  },
  {
    "text": "pause so those extra flags were actually telling the VM to print out the other",
    "start": "4296760",
    "end": "4302080"
  },
  {
    "text": "types of stop the world pauses other than garbage collection one of which is this type of",
    "start": "4302080",
    "end": "4310639"
  },
  {
    "text": "deoptimization and that's what this is this is is that deoptimization",
    "start": "4310679",
    "end": "4316719"
  },
  {
    "text": "occurring uh yeah it's also turning on bias locking up",
    "start": "4316719",
    "end": "4323280"
  },
  {
    "text": "above yep so this is a stop the world pause it's order in based on code size",
    "start": "4324880",
    "end": "4330280"
  },
  {
    "text": "of all your methods that it has to",
    "start": "4330280",
    "end": "4335600"
  },
  {
    "text": "kill and when it occurs not only does the world stop all the methods are",
    "start": "4339480",
    "end": "4345760"
  },
  {
    "text": "locked out new calls have to bail back to the interpreter but all returning",
    "start": "4345760",
    "end": "4351639"
  },
  {
    "text": "calls also have to bail back to The",
    "start": "4351639",
    "end": "4356280"
  },
  {
    "text": "Interpreter you can imagine what effect this would have it can be",
    "start": "4358080",
    "end": "4365280"
  },
  {
    "text": "bad part of my work is about getting rid of these I was very happy because in my latest release on one system my the last",
    "start": "4365280",
    "end": "4372480"
  },
  {
    "text": "in the system in the previous release the last one of these happens 75 minutes into the run under my new release it",
    "start": "4372480",
    "end": "4378520"
  },
  {
    "text": "happens 75 seconds into the run so that's an improvement far more",
    "start": "4378520",
    "end": "4386679"
  },
  {
    "text": "predictable okay that works if you only have one type and it turns out it works better",
    "start": "4388639",
    "end": "4397080"
  },
  {
    "text": "than you would think this actually holds a great deal",
    "start": "4397080",
    "end": "4403960"
  },
  {
    "text": "of the time 50% of call sites I",
    "start": "4403960",
    "end": "4409639"
  },
  {
    "text": "don't after that we go to profiling The Interpreter and C1 in tier",
    "start": "4409639",
    "end": "4418320"
  },
  {
    "text": "4 are gathering data at a call site about what types are actually used at this call site you use two one",
    "start": "4418320",
    "end": "4427040"
  },
  {
    "text": "type at that call site you used two types at that call site you used three",
    "start": "4427040",
    "end": "4432639"
  },
  {
    "text": "types it's doing this among tracking other things it",
    "start": "4432639",
    "end": "4439520"
  },
  {
    "text": "tracks Branch probabilities so we can get rid of branches and exception tracking and the frequency of the calls",
    "start": "4439520",
    "end": "4445000"
  },
  {
    "text": "and all these sorts of things but this is the one that matters",
    "start": "4445000",
    "end": "4450600"
  },
  {
    "text": "most so after that fails we have our stop the world",
    "start": "4451239",
    "end": "4457080"
  },
  {
    "text": "pause we're still using Square quite a bit so it adds a check that says hey if",
    "start": "4457080",
    "end": "4464560"
  },
  {
    "text": "the function is a square let's just use the inline code else do what is called",
    "start": "4464560",
    "end": "4470480"
  },
  {
    "text": "an uncommon trap this is a bail back to The",
    "start": "4470480",
    "end": "4477040"
  },
  {
    "text": "Interpreter part of the reason is if a second type shows up we'd like to know",
    "start": "4477040",
    "end": "4482199"
  },
  {
    "text": "it and inline it too so after",
    "start": "4482199",
    "end": "4488960"
  },
  {
    "text": "that after we've inlined one type we'll inline a second type",
    "start": "4488960",
    "end": "4496360"
  },
  {
    "text": "using another type check and then we'll have an else condition that's still an uncommon",
    "start": "4496360",
    "end": "4501840"
  },
  {
    "text": "trap and only after we've seen a third type will we just give up and",
    "start": "4501840",
    "end": "4507239"
  },
  {
    "text": "say use an actual Dynamic",
    "start": "4507239",
    "end": "4511440"
  },
  {
    "text": "call now you might wonder if you're only going to inline up to two types and that's as many as the",
    "start": "4513600",
    "end": "4520400"
  },
  {
    "text": "VM does why after you've done two types don't you just put a dynamic call here",
    "start": "4520400",
    "end": "4525960"
  },
  {
    "text": "in the else Branch well if we put a call there then",
    "start": "4525960",
    "end": "4531320"
  },
  {
    "text": "we have to worry about arbitrary memory",
    "start": "4531320",
    "end": "4535400"
  },
  {
    "text": "effects then we have side effects inside of Loops again that could be bad oras if we only",
    "start": "4536400",
    "end": "4543159"
  },
  {
    "text": "have to worry about two types we can fully analyze it and maybe we get to keep",
    "start": "4543159",
    "end": "4549400"
  },
  {
    "text": "it so we could actually go through an example where you use two functions you",
    "start": "4552440",
    "end": "4558679"
  },
  {
    "text": "invalidate the stop the closed World assumption you recompile again it doops",
    "start": "4558679",
    "end": "4564719"
  },
  {
    "text": "again to add to get rid of that assumption then",
    "start": "4564719",
    "end": "4569960"
  },
  {
    "text": "you've specialized for the one type A doops when it sees a second",
    "start": "4569960",
    "end": "4575280"
  },
  {
    "text": "type you add it specializes for that it doops again when it sees a third",
    "start": "4575280",
    "end": "4581840"
  },
  {
    "text": "type and that's it so this one call could actually de",
    "start": "4581840",
    "end": "4587639"
  },
  {
    "text": "optimize four times it has the stop the world one to break the Clos World",
    "start": "4587639",
    "end": "4593320"
  },
  {
    "text": "assumption another one to go to two types another one to go to three types",
    "start": "4593320",
    "end": "4598600"
  },
  {
    "text": "and if your receiver was ever actually null we de optimize for that too oh times three times",
    "start": "4598600",
    "end": "4606440"
  },
  {
    "text": "so yeah we try really hard to make this",
    "start": "4606440",
    "end": "4611639"
  },
  {
    "text": "work so it's solved we fixed array list for each well no the problem with array list",
    "start": "4611920",
    "end": "4621000"
  },
  {
    "text": "for each is it takes a function object the whole point of it is that you could pass",
    "start": "4621000",
    "end": "4626080"
  },
  {
    "text": "it lots of different functions it's guaranteed that you're going to use more than three at least",
    "start": "4626080",
    "end": "4633159"
  },
  {
    "text": "it's highly likely and so we're not going to be able to inline this and we are going to have",
    "start": "4633159",
    "end": "4640560"
  },
  {
    "text": "to worry about the fact that element data could change or size could change",
    "start": "4640560",
    "end": "4646840"
  },
  {
    "text": "unless the person who wrote it says no compiler you don't have to worry about",
    "start": "4648080",
    "end": "4654239"
  },
  {
    "text": "that the array list for each contract actually says the function is not allowed to change the array",
    "start": "4654239",
    "end": "4661159"
  },
  {
    "text": "list the compiler cannot know that but the person who made the contract for the",
    "start": "4661159",
    "end": "4666960"
  },
  {
    "text": "API he can and so they've just said you know compiler was going to work really hard",
    "start": "4666960",
    "end": "4673440"
  },
  {
    "text": "to pull all those things out and into local variables so they could do all these other cool optimizations let's",
    "start": "4673440",
    "end": "4679400"
  },
  {
    "text": "just do that so it can still do that even though this call is going to be megamorph it's going to use more than",
    "start": "4679400",
    "end": "4685639"
  },
  {
    "text": "three types and that's what they've",
    "start": "4685639",
    "end": "4690360"
  },
  {
    "text": "done so is the goal accomplished no I have not finished talking about the five lines of code in an hour I could",
    "start": "4690920",
    "end": "4698520"
  },
  {
    "text": "continue talking about loop unrolling loop Swit UNS switching vectorization",
    "start": "4698520",
    "end": "4703960"
  },
  {
    "text": "all these sorts of things I didn't even tell you how all this interacts with the garbage collector heck I didn't even tell you how we",
    "start": "4703960",
    "end": "4709800"
  },
  {
    "text": "handle this. size we use an uncommon trap what a",
    "start": "4709800",
    "end": "4715920"
  },
  {
    "text": "surprise what you're probably starting to get a sense of is well optimization",
    "start": "4718159",
    "end": "4723679"
  },
  {
    "text": "is um an optimization problem and I mean that in the sense of",
    "start": "4723679",
    "end": "4729040"
  },
  {
    "text": "it's like traveling salesmen it's not entirely clear whether you should go to that City next or that City",
    "start": "4729040",
    "end": "4735320"
  },
  {
    "text": "next and screwing up one of those will drastically change the",
    "start": "4735320",
    "end": "4740560"
  },
  {
    "text": "outcome it it's not easy I don't really know how to write a",
    "start": "4740560",
    "end": "4745960"
  },
  {
    "text": "good compiler compilers are honestly just pattern matchers we're big regexes if",
    "start": "4745960",
    "end": "4752159"
  },
  {
    "text": "we're being honest we apply a whole bunch of",
    "start": "4752159",
    "end": "4757239"
  },
  {
    "text": "urtic that we hope only help and don't hurt that's all we really",
    "start": "4757239",
    "end": "4763360"
  },
  {
    "text": "do if you you give it things that are hard like having to prove that this call",
    "start": "4763360",
    "end": "4769120"
  },
  {
    "text": "doesn't have memory effects in a hot location it may fail and performance will",
    "start": "4769120",
    "end": "4776400"
  },
  {
    "text": "suffer what compilers don't like is weird",
    "start": "4777400",
    "end": "4782520"
  },
  {
    "text": "code what's weird well I don't know it's whatever one of you does who",
    "start": "4782520",
    "end": "4790040"
  },
  {
    "text": "that you think is a good idea and the rest of you don't think is a good idea because how do we go about optimizing we",
    "start": "4790040",
    "end": "4795760"
  },
  {
    "text": "just run a whole bunch of programs and we see hey a whole bunch of programs are doing that maybe we should work on it",
    "start": "4795760",
    "end": "4802239"
  },
  {
    "text": "you over there by yourself doing something special yeah you're over there buing Yourself by doing something special you get special",
    "start": "4802239",
    "end": "4810600"
  },
  {
    "text": "treatment we don't really like big methods in fact there is actually a cuto",
    "start": "4810760",
    "end": "4817360"
  },
  {
    "text": "off where the VM will refuse to jit a method it's 8,000 bytes I have seen a",
    "start": "4817360",
    "end": "4822400"
  },
  {
    "text": "system that hit this level it is not fun that was the hot method in the",
    "start": "4822400",
    "end": "4828199"
  },
  {
    "text": "system don't worry it wasn't an issue because it already had over 100 arguments then that also won't cause it",
    "start": "4828199",
    "end": "4833960"
  },
  {
    "text": "to",
    "start": "4833960",
    "end": "4836120"
  },
  {
    "text": "jit it also doesn't actually really like native methods because a native method is a",
    "start": "4840239",
    "end": "4846639"
  },
  {
    "text": "black box it's a call it can't seethrough and it's going to have to give up on",
    "start": "4846639",
    "end": "4852760"
  },
  {
    "text": "optimizations if you have a crap interpreter python Ruby",
    "start": "4852760",
    "end": "4858840"
  },
  {
    "text": "absolutely go to native code it's so much faster but if you have",
    "start": "4858840",
    "end": "4864960"
  },
  {
    "text": "a jet and you can fully analyze all the way through like you know ppie then you're",
    "start": "4864960",
    "end": "4873520"
  },
  {
    "text": "good there are exceptions system array copy direct bite buffers those sorts of things have special handling by the VM",
    "start": "4873520",
    "end": "4881320"
  },
  {
    "text": "but you have to know what they are so what the compiler really likes is",
    "start": "4881320",
    "end": "4886880"
  },
  {
    "text": "just normal code whatever that means it will second",
    "start": "4886880",
    "end": "4892840"
  },
  {
    "text": "guess you if you write abnormal code it likes small methods it will glue them together to find what is most valuable",
    "start": "4892840",
    "end": "4900800"
  },
  {
    "text": "I've actually seen a compilation that inlined 350",
    "start": "4900800",
    "end": "4907400"
  },
  {
    "text": "methods you do not want to write the equivalent of a 350 methods glued together that will well not jit",
    "start": "4907719",
    "end": "4916520"
  },
  {
    "text": "it likes local variables and it likes immutability that doesn't mean you",
    "start": "4917280",
    "end": "4922880"
  },
  {
    "text": "actually need to make your local variables final that's not actually in the bik code so don't worry about",
    "start": "4922880",
    "end": "4928760"
  },
  {
    "text": "it okay I hope you've got a sense for how all this actually fits",
    "start": "4928800",
    "end": "4935639"
  },
  {
    "text": "together and if you want more information well Java 1 actually had",
    "start": "4935639",
    "end": "4940920"
  },
  {
    "text": "some very good talks and a redditor kindly actually went and marked the minutes where each",
    "start": "4940920",
    "end": "4946920"
  },
  {
    "text": "Talk starts that they live streamed so there was an introduction to jvm Performance and another one on",
    "start": "4946920",
    "end": "4953920"
  },
  {
    "text": "improving the performance of your applications which show some of the same things and a lot more on profilers and",
    "start": "4953920",
    "end": "4961840"
  },
  {
    "text": "everything that's wrong with them and if you just want to keep going",
    "start": "4961840",
    "end": "4967480"
  },
  {
    "text": "deeper well you basically have to go read the blogs of jvm developers we're not very good about",
    "start": "4967480",
    "end": "4974520"
  },
  {
    "text": "writing this stuff down um so nitan wart is my colleague",
    "start": "4974520",
    "end": "4982840"
  },
  {
    "text": "and Alexi shiev is the performance Zar at Oracle he actually wrote",
    "start": "4982840",
    "end": "4988760"
  },
  {
    "text": "jmh basically just go read anything Alexi has ever written and if you found tiered",
    "start": "4988760",
    "end": "4995239"
  },
  {
    "text": "compilation interesting that was done by eor veresov so you can go check out his",
    "start": "4995239",
    "end": "5000560"
  },
  {
    "text": "stuff as well and if you want to poke it yourself",
    "start": "5000560",
    "end": "5006000"
  },
  {
    "text": "and you don't want to remember all these Arcane VM Flags there is a gooey put together by a",
    "start": "5006000",
    "end": "5012520"
  },
  {
    "text": "guy in London named Chris nulan called jit watch which will actually show you what got compiled it will show you a",
    "start": "5012520",
    "end": "5020480"
  },
  {
    "text": "three panel view of source code versus bike code versus assembly code and highlight what got inlined or didn't get",
    "start": "5020480",
    "end": "5027840"
  },
  {
    "text": "inlined uh he's working on showing you uncommon traps and things like that so",
    "start": "5027840",
    "end": "5035920"
  },
  {
    "text": "all right I hope you learned something if you have any questions please feel free to",
    "start": "5036000",
    "end": "5042840"
  },
  {
    "text": "ask yeah I mean the good thing about open jdk right now is it's not that",
    "start": "5044239",
    "end": "5049920"
  },
  {
    "text": "different from Oracle hotspot um they don't yeah they are",
    "start": "5049920",
    "end": "5057199"
  },
  {
    "text": "that's increasingly changing because they're changing some of the thresholds and so forth to things that they think",
    "start": "5057199",
    "end": "5062560"
  },
  {
    "text": "are better and not necessarily putting all those back but the bigger thing is just they're adding tooling that they",
    "start": "5062560",
    "end": "5068360"
  },
  {
    "text": "want you to pay for in the form of java Mission Control",
    "start": "5068360",
    "end": "5073440"
  },
  {
    "text": "fortunately you know the Twitter's Netflix's of the world are contributing changes back to make it easier to follow",
    "start": "5073440",
    "end": "5080520"
  },
  {
    "text": "what's going on inside the VM for profilers and those sorts of tools so that's nice and those are in open",
    "start": "5080520",
    "end": "5087880"
  },
  {
    "text": "jdk as for actually getting one to accept your optimization changes or anything like that yeah probably good",
    "start": "5087880",
    "end": "5097000"
  },
  {
    "text": "luck so the question was whether I could recommend a book that was any better on",
    "start": "5100880",
    "end": "5106960"
  },
  {
    "text": "compilers that's not written in mathematical jargon than only a PhD and compilers could understand",
    "start": "5106960",
    "end": "5113360"
  },
  {
    "text": "um sadly uh not really and that's actually kind of why I do this talk I",
    "start": "5113360",
    "end": "5120000"
  },
  {
    "text": "think it's sort of sad that the compiler phds sit around in a corner talking to to themselves and not to their end users",
    "start": "5120000",
    "end": "5126320"
  },
  {
    "text": "who actually you know use the compiler and I think if you just",
    "start": "5126320",
    "end": "5131360"
  },
  {
    "text": "understand a little bit about what the compiler does then you can work with it rather than against it but they just",
    "start": "5131360",
    "end": "5136600"
  },
  {
    "text": "want to go talk in the corner about their Crazy polyhedral Loop optimizations and that doesn't really help the end users um so no not really",
    "start": "5136600",
    "end": "5146880"
  },
  {
    "text": "and once you get into the spective Ops I don't know of a book that even tries to cover it so you're pretty much stuck",
    "start": "5146880",
    "end": "5153159"
  },
  {
    "text": "with the blogs of em developers and well we mostly talk to each other",
    "start": "5153159",
    "end": "5159159"
  },
  {
    "text": "too so C does take a bit of a different approach in that they don't have an",
    "start": "5163159",
    "end": "5170480"
  },
  {
    "text": "interpreter I haven't looked at what C does a great deal I mean obviously they made some choices that make conservative",
    "start": "5170480",
    "end": "5177520"
  },
  {
    "text": "compilation of front a little bit easier because they actually do have a virtual keyword so Dynamic dispatch is the",
    "start": "5177520",
    "end": "5185360"
  },
  {
    "text": "default which sort of steers people in a slightly different",
    "start": "5185360",
    "end": "5190840"
  },
  {
    "text": "direction they do have profiling capabilities but I haven't followed a",
    "start": "5190840",
    "end": "5197880"
  },
  {
    "text": "great deal on exactly what they're doing so I can't really say um",
    "start": "5197880",
    "end": "5205360"
  }
]