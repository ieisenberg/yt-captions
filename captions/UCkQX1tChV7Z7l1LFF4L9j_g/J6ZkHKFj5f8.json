[
  {
    "start": "0",
    "end": "78000"
  },
  {
    "text": "[Music]",
    "start": "460",
    "end": "9370"
  },
  {
    "text": "so earlier this morning in his keynote",
    "start": "13799",
    "end": "16760"
  },
  {
    "text": "Steve mentioned physics for physics",
    "start": "16760",
    "end": "18640"
  },
  {
    "text": "majes and this talk is going to be very",
    "start": "18640",
    "end": "21039"
  },
  {
    "text": "much like that because in order to",
    "start": "21039",
    "end": "23119"
  },
  {
    "text": "understand how Ranger Quest were you'll",
    "start": "23119",
    "end": "24960"
  },
  {
    "text": "first need to understand the innards of",
    "start": "24960",
    "end": "27240"
  },
  {
    "text": "HTP 1.1 so the h 1.1 spec was ratified",
    "start": "27240",
    "end": "31880"
  },
  {
    "text": "in June 1989 as RFC",
    "start": "31880",
    "end": "34800"
  },
  {
    "text": "2616 now it was specifically designed to",
    "start": "34800",
    "end": "37559"
  },
  {
    "text": "address various issues with",
    "start": "37559",
    "end": "40920"
  },
  {
    "text": "caching persistent connections and",
    "start": "40920",
    "end": "43520"
  },
  {
    "text": "so-called incomplete HTP 1.0",
    "start": "43520",
    "end": "46120"
  },
  {
    "text": "implementations what's intriguing is",
    "start": "46120",
    "end": "48399"
  },
  {
    "text": "that despite having been a standard",
    "start": "48399",
    "end": "50360"
  },
  {
    "text": "since 1999 the most popular web proxy in",
    "start": "50360",
    "end": "54280"
  },
  {
    "text": "existence squid doesn't actually support",
    "start": "54280",
    "end": "57199"
  },
  {
    "text": "this implementation HP fully they're",
    "start": "57199",
    "end": "59320"
  },
  {
    "text": "still working on adding HP 1.1 support",
    "start": "59320",
    "end": "63160"
  },
  {
    "text": "and preliminary support was only",
    "start": "63160",
    "end": "64799"
  },
  {
    "text": "introduced last year so it's amazing how",
    "start": "64799",
    "end": "67600"
  },
  {
    "text": "far this technology has progressed and",
    "start": "67600",
    "end": "69880"
  },
  {
    "text": "yet we still need to keep in mind that",
    "start": "69880",
    "end": "71720"
  },
  {
    "text": "many of the Technologies we depend on",
    "start": "71720",
    "end": "74360"
  },
  {
    "text": "like proxies and caches have yet to",
    "start": "74360",
    "end": "77000"
  },
  {
    "text": "catch up so I'll go ahead and briefly go",
    "start": "77000",
    "end": "80799"
  },
  {
    "start": "78000",
    "end": "135000"
  },
  {
    "text": "over the HTP request response model in",
    "start": "80799",
    "end": "83840"
  },
  {
    "text": "the most basic model the client",
    "start": "83840",
    "end": "85640"
  },
  {
    "text": "initiates the request and the server",
    "start": "85640",
    "end": "88200"
  },
  {
    "text": "corresponding provides a response",
    "start": "88200",
    "end": "90960"
  },
  {
    "text": "now what's important to note is that",
    "start": "90960",
    "end": "92799"
  },
  {
    "text": "there's not necessarily a direct",
    "start": "92799",
    "end": "94479"
  },
  {
    "text": "connection between a client and a server",
    "start": "94479",
    "end": "96840"
  },
  {
    "text": "rather it's a chain that includes a set",
    "start": "96840",
    "end": "98600"
  },
  {
    "text": "of intermediaries these intermediaries",
    "start": "98600",
    "end": "100680"
  },
  {
    "text": "can include proxies which are basically",
    "start": "100680",
    "end": "102560"
  },
  {
    "text": "forwarding agents that rewrite the",
    "start": "102560",
    "end": "104439"
  },
  {
    "text": "request in some way and forward it to",
    "start": "104439",
    "end": "106320"
  },
  {
    "text": "its final",
    "start": "106320",
    "end": "107479"
  },
  {
    "text": "recipient gateways which translate an",
    "start": "107479",
    "end": "110640"
  },
  {
    "text": "HTP message to the server's underlying",
    "start": "110640",
    "end": "112759"
  },
  {
    "text": "protocol something that can understand",
    "start": "112759",
    "end": "114640"
  },
  {
    "text": "in case the server doesn't understand",
    "start": "114640",
    "end": "116719"
  },
  {
    "text": "HTP and finally tunnels which we can use",
    "start": "116719",
    "end": "119960"
  },
  {
    "text": "use in order to translate requests from",
    "start": "119960",
    "end": "122320"
  },
  {
    "text": "one endpoint to another without the",
    "start": "122320",
    "end": "125200"
  },
  {
    "text": "entity having full knowledge of what its",
    "start": "125200",
    "end": "127240"
  },
  {
    "text": "contents are",
    "start": "127240",
    "end": "129399"
  },
  {
    "text": "basically an entity doesn't need to",
    "start": "129399",
    "end": "131959"
  },
  {
    "text": "understand HTP in order to relay certain",
    "start": "131959",
    "end": "135040"
  },
  {
    "start": "135000",
    "end": "267000"
  },
  {
    "text": "requests so I'm sure most of you are",
    "start": "135040",
    "end": "137760"
  },
  {
    "text": "familiar with node.js this is how we go",
    "start": "137760",
    "end": "140000"
  },
  {
    "text": "about with creating a basic HTP server",
    "start": "140000",
    "end": "142000"
  },
  {
    "text": "in it as you can see every HTP",
    "start": "142000",
    "end": "144640"
  },
  {
    "text": "connection involves an exchange of",
    "start": "144640",
    "end": "146440"
  },
  {
    "text": "messages between the requ between the",
    "start": "146440",
    "end": "149120"
  },
  {
    "text": "client and server or the request in",
    "start": "149120",
    "end": "150760"
  },
  {
    "text": "response so here we've got a symbol",
    "start": "150760",
    "end": "153200"
  },
  {
    "text": "Handler that for every incoming request",
    "start": "153200",
    "end": "156040"
  },
  {
    "text": "writes a 200 okay response we'll be",
    "start": "156040",
    "end": "158120"
  },
  {
    "text": "talking about the various response codes",
    "start": "158120",
    "end": "159560"
  },
  {
    "text": "later implements a content type of text",
    "start": "159560",
    "end": "162319"
  },
  {
    "text": "plane and a Content length of 13 and",
    "start": "162319",
    "end": "165080"
  },
  {
    "text": "then we send the actual body along so",
    "start": "165080",
    "end": "169280"
  },
  {
    "text": "HTP is very much an application Level",
    "start": "169280",
    "end": "171959"
  },
  {
    "text": "protocol which means that it has to have",
    "start": "171959",
    "end": "174000"
  },
  {
    "text": "an underlying transfer protocol and in",
    "start": "174000",
    "end": "176159"
  },
  {
    "text": "the case of HTP this transfer protocol",
    "start": "176159",
    "end": "178519"
  },
  {
    "text": "is TCP so this is how we can create a",
    "start": "178519",
    "end": "181519"
  },
  {
    "text": "simple TCP client in node to emulate",
    "start": "181519",
    "end": "184720"
  },
  {
    "text": "something like telnet or neat now it's",
    "start": "184720",
    "end": "186760"
  },
  {
    "text": "important to not that node has its own",
    "start": "186760",
    "end": "188640"
  },
  {
    "text": "facilities for retrieving hcp requests",
    "start": "188640",
    "end": "191720"
  },
  {
    "text": "we're just creating a TCP client so that",
    "start": "191720",
    "end": "193920"
  },
  {
    "text": "we can actually inspect the raw HP",
    "start": "193920",
    "end": "196159"
  },
  {
    "text": "messages being sent back and forth so",
    "start": "196159",
    "end": "198480"
  },
  {
    "text": "requests are initiated by the client and",
    "start": "198480",
    "end": "200799"
  },
  {
    "text": "as you can see there are two lines that",
    "start": "200799",
    "end": "203560"
  },
  {
    "text": "I write to the socket the first one is",
    "start": "203560",
    "end": "206319"
  },
  {
    "text": "the method the URL the HTP version any",
    "start": "206319",
    "end": "209799"
  },
  {
    "text": "heads which are not specifying and",
    "start": "209799",
    "end": "211680"
  },
  {
    "text": "finally the body which we're not",
    "start": "211680",
    "end": "213239"
  },
  {
    "text": "specifying here either as you can see we",
    "start": "213239",
    "end": "215480"
  },
  {
    "text": "need to dilit these various Fields with",
    "start": "215480",
    "end": "218519"
  },
  {
    "text": "a crlf or a carriage return followed by",
    "start": "218519",
    "end": "220920"
  },
  {
    "text": "a line feed character so if we actually",
    "start": "220920",
    "end": "223680"
  },
  {
    "text": "run this code you'll see that it prints",
    "start": "223680",
    "end": "225519"
  },
  {
    "text": "out something like this the first line",
    "start": "225519",
    "end": "228080"
  },
  {
    "text": "is the status line that contains the",
    "start": "228080",
    "end": "230680"
  },
  {
    "text": "version of the HTP a response code and a",
    "start": "230680",
    "end": "233480"
  },
  {
    "text": "human readable reason phrase which",
    "start": "233480",
    "end": "235879"
  },
  {
    "text": "debuggers and which debuggers can use in",
    "start": "235879",
    "end": "238599"
  },
  {
    "text": "order to ascertain what precisely",
    "start": "238599",
    "end": "240640"
  },
  {
    "text": "occurred any headers that are sent along",
    "start": "240640",
    "end": "243959"
  },
  {
    "text": "with the message in this case you can",
    "start": "243959",
    "end": "245400"
  },
  {
    "text": "see the content type and content length",
    "start": "245400",
    "end": "247000"
  },
  {
    "text": "that we sent as well as some other",
    "start": "247000",
    "end": "248680"
  },
  {
    "text": "headers that node inserts automatically",
    "start": "248680",
    "end": "250439"
  },
  {
    "text": "for us and then the actual body itself",
    "start": "250439",
    "end": "254680"
  },
  {
    "text": "so the body is optional as I",
    "start": "254680",
    "end": "256720"
  },
  {
    "text": "demonstrated in the previous slide and",
    "start": "256720",
    "end": "258720"
  },
  {
    "text": "actually needs to be omitted for for",
    "start": "258720",
    "end": "260479"
  },
  {
    "text": "certain types of requests and responses",
    "start": "260479",
    "end": "262800"
  },
  {
    "text": "so this is an under the hood look at",
    "start": "262800",
    "end": "264720"
  },
  {
    "text": "what an HTTP message looks like so there",
    "start": "264720",
    "end": "268000"
  },
  {
    "start": "267000",
    "end": "319000"
  },
  {
    "text": "are also various status codes that HTP",
    "start": "268000",
    "end": "270800"
  },
  {
    "text": "implements the 100 level is primarily",
    "start": "270800",
    "end": "273639"
  },
  {
    "text": "informational 200 success is the one",
    "start": "273639",
    "end": "275919"
  },
  {
    "text": "that we're most familiar with and 206 in",
    "start": "275919",
    "end": "278960"
  },
  {
    "text": "particular is one that we'll be looking",
    "start": "278960",
    "end": "280600"
  },
  {
    "text": "at in more detail later as it involves a",
    "start": "280600",
    "end": "283120"
  },
  {
    "text": "response for a partial G request we'll",
    "start": "283120",
    "end": "285479"
  },
  {
    "text": "cover what that means later as well",
    "start": "285479",
    "end": "286800"
  },
  {
    "text": "don't worry a 300",
    "start": "286800",
    "end": "289360"
  },
  {
    "text": "level response which means that some",
    "start": "289360",
    "end": "292160"
  },
  {
    "text": "further action is needed by the client",
    "start": "292160",
    "end": "294520"
  },
  {
    "text": "and 400 and 500 for various errors",
    "start": "294520",
    "end": "297280"
  },
  {
    "text": "either a client error meaning there was",
    "start": "297280",
    "end": "299120"
  },
  {
    "text": "something wrong the request that the",
    "start": "299120",
    "end": "300320"
  },
  {
    "text": "client sent up or a server error meaning",
    "start": "300320",
    "end": "302919"
  },
  {
    "text": "that the server can fulfill an",
    "start": "302919",
    "end": "304440"
  },
  {
    "text": "apparently a valid request what's",
    "start": "304440",
    "end": "306680"
  },
  {
    "text": "important to keep in mind is that these",
    "start": "306680",
    "end": "308680"
  },
  {
    "text": "are completely extensible so clients",
    "start": "308680",
    "end": "311000"
  },
  {
    "text": "don't need to necessarily understand the",
    "start": "311000",
    "end": "312600"
  },
  {
    "text": "full range of HTP status codes they only",
    "start": "312600",
    "end": "315880"
  },
  {
    "text": "need to understand the five",
    "start": "315880",
    "end": "318680"
  },
  {
    "text": "categories so now now that we've looked",
    "start": "318680",
    "end": "321600"
  },
  {
    "start": "319000",
    "end": "383000"
  },
  {
    "text": "at status codes let's have a look at HB",
    "start": "321600",
    "end": "323720"
  },
  {
    "text": "headers this is the fully exhausted list",
    "start": "323720",
    "end": "327560"
  },
  {
    "text": "of HTP headers as defined by the spec",
    "start": "327560",
    "end": "330039"
  },
  {
    "text": "obviously we're not going to go through",
    "start": "330039",
    "end": "331199"
  },
  {
    "text": "all of them but we are going to look at",
    "start": "331199",
    "end": "333240"
  },
  {
    "text": "some in the general request response and",
    "start": "333240",
    "end": "336360"
  },
  {
    "text": "envy categories so General headers are",
    "start": "336360",
    "end": "338919"
  },
  {
    "text": "applicable to request and response",
    "start": "338919",
    "end": "340639"
  },
  {
    "text": "messages regardless of the entity being",
    "start": "340639",
    "end": "342560"
  },
  {
    "text": "transferred so for example transfer",
    "start": "342560",
    "end": "345360"
  },
  {
    "text": "encoding can be implemented on either",
    "start": "345360",
    "end": "347240"
  },
  {
    "text": "the request or response it doesn't",
    "start": "347240",
    "end": "349120"
  },
  {
    "text": "matter and the H Char will handle that",
    "start": "349120",
    "end": "351639"
  },
  {
    "text": "accordingly request headers are ones",
    "start": "351639",
    "end": "353919"
  },
  {
    "text": "that can be sent only on the request",
    "start": "353919",
    "end": "355880"
  },
  {
    "text": "response headers can only be sent on the",
    "start": "355880",
    "end": "357720"
  },
  {
    "text": "response and entities apply to to a",
    "start": "357720",
    "end": "360039"
  },
  {
    "text": "particular body that we transmit again",
    "start": "360039",
    "end": "362440"
  },
  {
    "text": "regardless of request or response so",
    "start": "362440",
    "end": "365319"
  },
  {
    "text": "this talk is going to be about range",
    "start": "365319",
    "end": "366720"
  },
  {
    "text": "transfers and if you notice there's a",
    "start": "366720",
    "end": "368800"
  },
  {
    "text": "confusing Bevy of various names if range",
    "start": "368800",
    "end": "373120"
  },
  {
    "text": "range except",
    "start": "373120",
    "end": "374479"
  },
  {
    "text": "ranges content type content length and",
    "start": "374479",
    "end": "377479"
  },
  {
    "text": "transfer encoding versus content",
    "start": "377479",
    "end": "379160"
  },
  {
    "text": "encoding we'll go ahead and look at",
    "start": "379160",
    "end": "380720"
  },
  {
    "text": "these in a bit more detail and try to",
    "start": "380720",
    "end": "382160"
  },
  {
    "text": "disate between them so first up is",
    "start": "382160",
    "end": "384759"
  },
  {
    "start": "383000",
    "end": "475000"
  },
  {
    "text": "encoding which is a prerequisite for",
    "start": "384759",
    "end": "386479"
  },
  {
    "text": "properly",
    "start": "386479",
    "end": "387680"
  },
  {
    "text": "supporting partial range request",
    "start": "387680",
    "end": "390680"
  },
  {
    "text": "so in this case what let's look at what",
    "start": "390680",
    "end": "393160"
  },
  {
    "text": "happens if you omit content length",
    "start": "393160",
    "end": "395479"
  },
  {
    "text": "recall that when I when I show you the",
    "start": "395479",
    "end": "397599"
  },
  {
    "text": "example of the HTP response message we",
    "start": "397599",
    "end": "400800"
  },
  {
    "text": "had a defined content length on it with",
    "start": "400800",
    "end": "403199"
  },
  {
    "text": "a simple body now if you omit that",
    "start": "403199",
    "end": "405759"
  },
  {
    "text": "content length node will automatically",
    "start": "405759",
    "end": "407560"
  },
  {
    "text": "send a response header called transfer",
    "start": "407560",
    "end": "409560"
  },
  {
    "text": "encoding chunked and as you can see",
    "start": "409560",
    "end": "411800"
  },
  {
    "text": "we've got two additional characters in",
    "start": "411800",
    "end": "413560"
  },
  {
    "text": "our body these characters if you look at",
    "start": "413560",
    "end": "417120"
  },
  {
    "text": "them closely are actually hex siiz",
    "start": "417120",
    "end": "419120"
  },
  {
    "text": "indicator that indicate the size of a",
    "start": "419120",
    "end": "421199"
  },
  {
    "text": "particular chunk this is a particularly",
    "start": "421199",
    "end": "423720"
  },
  {
    "text": "powerful feature of HG 1.1 and node",
    "start": "423720",
    "end": "426360"
  },
  {
    "text": "that's called chunk transfer coding and",
    "start": "426360",
    "end": "428599"
  },
  {
    "text": "we can verify that those are indeed",
    "start": "428599",
    "end": "430319"
  },
  {
    "text": "hacks by looking at the output so for",
    "start": "430319",
    "end": "432199"
  },
  {
    "text": "instance if you do parcent D and 16",
    "start": "432199",
    "end": "434800"
  },
  {
    "text": "you'll see that it equals 13 which is",
    "start": "434800",
    "end": "437039"
  },
  {
    "text": "inde the size of the first chunk the",
    "start": "437039",
    "end": "439240"
  },
  {
    "text": "second chunk is simply a zero byte chunk",
    "start": "439240",
    "end": "442759"
  },
  {
    "text": "that node SS along to signify the end of",
    "start": "442759",
    "end": "444759"
  },
  {
    "text": "the response so the htb spec prohibits",
    "start": "444759",
    "end": "448280"
  },
  {
    "text": "mixing trans en coding chunked and in",
    "start": "448280",
    "end": "450759"
  },
  {
    "text": "defined content length you cannot stream",
    "start": "450759",
    "end": "452919"
  },
  {
    "text": "chunks for a response that already has",
    "start": "452919",
    "end": "455440"
  },
  {
    "text": "the fixed length so once again node",
    "start": "455440",
    "end": "458039"
  },
  {
    "text": "handles this all transparently for you",
    "start": "458039",
    "end": "459919"
  },
  {
    "text": "so you never need to actually think or",
    "start": "459919",
    "end": "461759"
  },
  {
    "text": "worry about it node however does not",
    "start": "461759",
    "end": "463720"
  },
  {
    "text": "Implement range requests natively but",
    "start": "463720",
    "end": "465840"
  },
  {
    "text": "you can use a third party library to do",
    "start": "465840",
    "end": "468400"
  },
  {
    "text": "that so we'll be looking at more detail",
    "start": "468400",
    "end": "470599"
  },
  {
    "text": "into how these work behind the scenes",
    "start": "470599",
    "end": "473080"
  },
  {
    "text": "and why they're important to",
    "start": "473080",
    "end": "474960"
  },
  {
    "text": "implement next let's look at content",
    "start": "474960",
    "end": "477240"
  },
  {
    "start": "475000",
    "end": "520000"
  },
  {
    "text": "type and content encoding content type",
    "start": "477240",
    "end": "479919"
  },
  {
    "text": "refers to the media type of the entity",
    "start": "479919",
    "end": "481800"
  },
  {
    "text": "itself whatever we're sending in the",
    "start": "481800",
    "end": "483319"
  },
  {
    "text": "body whereas content encoding generally",
    "start": "483319",
    "end": "486039"
  },
  {
    "text": "refers to something like compression",
    "start": "486039",
    "end": "487759"
  },
  {
    "text": "that requires additional",
    "start": "487759",
    "end": "489720"
  },
  {
    "text": "encoding also note that transfer",
    "start": "489720",
    "end": "492039"
  },
  {
    "text": "encoding which I which I covered before",
    "start": "492039",
    "end": "494240"
  },
  {
    "text": "is different than content coding",
    "start": "494240",
    "end": "496120"
  },
  {
    "text": "transfer and coding is specific to the",
    "start": "496120",
    "end": "498440"
  },
  {
    "text": "server it's mean it's known as hop by",
    "start": "498440",
    "end": "501680"
  },
  {
    "text": "hop and it's only meaningful for one",
    "start": "501680",
    "end": "503599"
  },
  {
    "text": "particular and Link in that request",
    "start": "503599",
    "end": "506039"
  },
  {
    "text": "response chain whereas content and",
    "start": "506039",
    "end": "508680"
  },
  {
    "text": "coding is applicable to the end itself",
    "start": "508680",
    "end": "511720"
  },
  {
    "text": "and is end to end in other words it's",
    "start": "511720",
    "end": "513959"
  },
  {
    "text": "sent up from the client to the server or",
    "start": "513959",
    "end": "516919"
  },
  {
    "text": "vice versa it persists throughout the",
    "start": "516919",
    "end": "518599"
  },
  {
    "text": "entire",
    "start": "518599",
    "end": "519479"
  },
  {
    "text": "chain so let's have a look at some of",
    "start": "519479",
    "end": "522399"
  },
  {
    "start": "520000",
    "end": "630000"
  },
  {
    "text": "the the next element in the HP status",
    "start": "522399",
    "end": "525000"
  },
  {
    "text": "line which are methods I'm sure we've",
    "start": "525000",
    "end": "527399"
  },
  {
    "text": "all seen these",
    "start": "527399",
    "end": "529320"
  },
  {
    "text": "basic Methods at some point in our",
    "start": "529320",
    "end": "531760"
  },
  {
    "text": "careers get and head are the most basic",
    "start": "531760",
    "end": "534480"
  },
  {
    "text": "of them according to the spec every",
    "start": "534480",
    "end": "536680"
  },
  {
    "text": "single HD server has to support these at",
    "start": "536680",
    "end": "539000"
  },
  {
    "text": "a minimum it can support others if needs",
    "start": "539000",
    "end": "541279"
  },
  {
    "text": "to but get and head are the absolute",
    "start": "541279",
    "end": "543079"
  },
  {
    "text": "minimum again node handles these",
    "start": "543079",
    "end": "545279"
  },
  {
    "text": "transparently for us now get requests",
    "start": "545279",
    "end": "547800"
  },
  {
    "text": "are interesting they can either be",
    "start": "547800",
    "end": "550279"
  },
  {
    "text": "conditional which Steve covered in Keo",
    "start": "550279",
    "end": "552600"
  },
  {
    "text": "earlier and a report for caching or they",
    "start": "552600",
    "end": "554800"
  },
  {
    "text": "can be partial which is what we'll be",
    "start": "554800",
    "end": "556360"
  },
  {
    "text": "talking about with range requests so",
    "start": "556360",
    "end": "558880"
  },
  {
    "text": "both help with caching there's no need",
    "start": "558880",
    "end": "560920"
  },
  {
    "text": "to download data that the client already",
    "start": "560920",
    "end": "563000"
  },
  {
    "text": "has or just doesn't care about and these",
    "start": "563000",
    "end": "566720"
  },
  {
    "text": "mechanisms allow us to transparently",
    "start": "566720",
    "end": "568480"
  },
  {
    "text": "circumvent that",
    "start": "568480",
    "end": "569880"
  },
  {
    "text": "so put actually sorry about that so put",
    "start": "569880",
    "end": "573560"
  },
  {
    "text": "indicates a modification to an existing",
    "start": "573560",
    "end": "576279"
  },
  {
    "text": "resource so unlike post which is right",
    "start": "576279",
    "end": "579160"
  },
  {
    "text": "before it put refers to a URI that's",
    "start": "579160",
    "end": "581360"
  },
  {
    "text": "already in existence and as a result of",
    "start": "581360",
    "end": "583839"
  },
  {
    "text": "that this means that with put we can",
    "start": "583839",
    "end": "585800"
  },
  {
    "text": "actually do partial uploads as well I'll",
    "start": "585800",
    "end": "588880"
  },
  {
    "text": "cover that momentarily but that's an",
    "start": "588880",
    "end": "592440"
  },
  {
    "text": "interesting distinction that we see",
    "start": "592440",
    "end": "593920"
  },
  {
    "text": "between post and put so the next time",
    "start": "593920",
    "end": "596880"
  },
  {
    "text": "you're reading about rest API and we",
    "start": "596880",
    "end": "598959"
  },
  {
    "text": "curious about where post post inut comes",
    "start": "598959",
    "end": "601279"
  },
  {
    "text": "in post refers to some sort of abstract",
    "start": "601279",
    "end": "604480"
  },
  {
    "text": "resource that's going to handle whatever",
    "start": "604480",
    "end": "606120"
  },
  {
    "text": "data you give it whereas put just",
    "start": "606120",
    "end": "609279"
  },
  {
    "text": "handles the exist what literally the URI",
    "start": "609279",
    "end": "613240"
  },
  {
    "text": "that you give it and then there are some",
    "start": "613240",
    "end": "614839"
  },
  {
    "text": "more obscure lunch like like options",
    "start": "614839",
    "end": "617040"
  },
  {
    "text": "which are used for cross origin resource",
    "start": "617040",
    "end": "618800"
  },
  {
    "text": "sharing cores there's a w3c spec about",
    "start": "618800",
    "end": "621519"
  },
  {
    "text": "that and Trace and connect which are",
    "start": "621519",
    "end": "623880"
  },
  {
    "text": "really obscure and which we're not going",
    "start": "623880",
    "end": "625880"
  },
  {
    "text": "to get into at all because they should",
    "start": "625880",
    "end": "627600"
  },
  {
    "text": "only be aware of by the implementation",
    "start": "627600",
    "end": "631000"
  },
  {
    "start": "630000",
    "end": "730000"
  },
  {
    "text": "so we've now reached our destination of",
    "start": "631000",
    "end": "634320"
  },
  {
    "text": "ranges first of all there are different",
    "start": "634320",
    "end": "637279"
  },
  {
    "text": "headers that are set depending on",
    "start": "637279",
    "end": "638560"
  },
  {
    "text": "whether you're doing a request or",
    "start": "638560",
    "end": "640160"
  },
  {
    "text": "response in a request we need to set the",
    "start": "640160",
    "end": "642880"
  },
  {
    "text": "range header or an if range header if we",
    "start": "642880",
    "end": "645079"
  },
  {
    "text": "want to do a conditional request",
    "start": "645079",
    "end": "647240"
  },
  {
    "text": "remember just like doing conditional",
    "start": "647240",
    "end": "649000"
  },
  {
    "text": "gets we can also do conditional partial",
    "start": "649000",
    "end": "651399"
  },
  {
    "text": "get requests so it's interesting how it",
    "start": "651399",
    "end": "653200"
  },
  {
    "text": "looks out and then there's the conent",
    "start": "653200",
    "end": "655079"
  },
  {
    "text": "range header which applies to a",
    "start": "655079",
    "end": "656160"
  },
  {
    "text": "particular entity and that a request can",
    "start": "656160",
    "end": "658120"
  },
  {
    "text": "actually send if we're uploading partial",
    "start": "658120",
    "end": "660040"
  },
  {
    "text": "content so again really",
    "start": "660040",
    "end": "662920"
  },
  {
    "text": "useful whereas for a response we can",
    "start": "662920",
    "end": "665440"
  },
  {
    "text": "send any number of headers down the",
    "start": "665440",
    "end": "667440"
  },
  {
    "text": "first one is accept ranges this is",
    "start": "667440",
    "end": "669560"
  },
  {
    "text": "merely an advisory header that tells the",
    "start": "669560",
    "end": "671720"
  },
  {
    "text": "client hey I support ranges so you can",
    "start": "671720",
    "end": "674680"
  },
  {
    "text": "feel free to make partial requests and",
    "start": "674680",
    "end": "677240"
  },
  {
    "text": "I'll fulfill them now because this is an",
    "start": "677240",
    "end": "679720"
  },
  {
    "text": "advisor header servers aren't hard to",
    "start": "679720",
    "end": "681519"
  },
  {
    "text": "send it so you could have a server that",
    "start": "681519",
    "end": "683720"
  },
  {
    "text": "doesn't send an Exel range request and a",
    "start": "683720",
    "end": "685839"
  },
  {
    "text": "client will attempt to make the request",
    "start": "685839",
    "end": "687519"
  },
  {
    "text": "anyway and fail or you can have a",
    "start": "687519",
    "end": "689880"
  },
  {
    "text": "misconfigured server that doesn't",
    "start": "689880",
    "end": "691200"
  },
  {
    "text": "support ranges and yet sends down this",
    "start": "691200",
    "end": "693200"
  },
  {
    "text": "header anyway so this header is purely",
    "start": "693200",
    "end": "695320"
  },
  {
    "text": "advisory and doesn't guarantee support",
    "start": "695320",
    "end": "697160"
  },
  {
    "text": "of anything but it's considered to be",
    "start": "697160",
    "end": "699200"
  },
  {
    "text": "good practice to send along anyway",
    "start": "699200",
    "end": "701839"
  },
  {
    "text": "content range and content length are",
    "start": "701839",
    "end": "703560"
  },
  {
    "text": "important when you're doing partial",
    "start": "703560",
    "end": "705320"
  },
  {
    "text": "range requests content range in this",
    "start": "705320",
    "end": "707480"
  },
  {
    "text": "case refers to the bytes that you're",
    "start": "707480",
    "end": "709360"
  },
  {
    "text": "extracting a particular file whereas",
    "start": "709360",
    "end": "711519"
  },
  {
    "text": "content length refers to the actual size",
    "start": "711519",
    "end": "714040"
  },
  {
    "text": "of the chunk that you're extracting",
    "start": "714040",
    "end": "715839"
  },
  {
    "text": "these are obviously required because you",
    "start": "715839",
    "end": "717360"
  },
  {
    "text": "cannot do chunked transfers",
    "start": "717360",
    "end": "719800"
  },
  {
    "text": "or partial content except in one very",
    "start": "719800",
    "end": "722240"
  },
  {
    "text": "interesting case that we'll go ahead and",
    "start": "722240",
    "end": "723639"
  },
  {
    "text": "cover later and then date and the",
    "start": "723639",
    "end": "725920"
  },
  {
    "text": "caching headers are as you'd expect for",
    "start": "725920",
    "end": "728519"
  },
  {
    "text": "every other get",
    "start": "728519",
    "end": "729720"
  },
  {
    "text": "request so let's look at the Syntax for",
    "start": "729720",
    "end": "733519"
  },
  {
    "start": "730000",
    "end": "840000"
  },
  {
    "text": "the range header that are requested sent",
    "start": "733519",
    "end": "735440"
  },
  {
    "text": "up so you get the first 500 bytes you",
    "start": "735440",
    "end": "738279"
  },
  {
    "text": "you specify the unit which in this case",
    "start": "738279",
    "end": "740320"
  },
  {
    "text": "is B the only unit that specs actually",
    "start": "740320",
    "end": "742800"
  },
  {
    "text": "recognize and then a range of 0 to 4.99",
    "start": "742800",
    "end": "746360"
  },
  {
    "text": "remember that bite range positions are",
    "start": "746360",
    "end": "748320"
  },
  {
    "text": "zero based and inclusive so the first",
    "start": "748320",
    "end": "750920"
  },
  {
    "text": "500 bytes is by our bytes 0499 if you",
    "start": "750920",
    "end": "754720"
  },
  {
    "text": "want to get the next 500 bytes just",
    "start": "754720",
    "end": "756519"
  },
  {
    "text": "specify the index range so 500 through",
    "start": "756519",
    "end": "760120"
  },
  {
    "text": "99 now there's an interesting Syntax for",
    "start": "760120",
    "end": "762880"
  },
  {
    "text": "specifying the last 500 bites for the",
    "start": "762880",
    "end": "766040"
  },
  {
    "text": "first type of syntax you can simply omit",
    "start": "766040",
    "end": "768600"
  },
  {
    "text": "the beginning byte range and this will",
    "start": "768600",
    "end": "771600"
  },
  {
    "text": "function as a negative sign basically",
    "start": "771600",
    "end": "774000"
  },
  {
    "text": "you're specifying that you want to get",
    "start": "774000",
    "end": "775320"
  },
  {
    "text": "500 bytes from the end of the file so",
    "start": "775320",
    "end": "778519"
  },
  {
    "text": "this is useful when you don't actually",
    "start": "778519",
    "end": "780160"
  },
  {
    "text": "know the starting bite offset or you",
    "start": "780160",
    "end": "782399"
  },
  {
    "text": "don't fully know how large the file is",
    "start": "782399",
    "end": "784519"
  },
  {
    "text": "and you'll trust the server to take care",
    "start": "784519",
    "end": "786279"
  },
  {
    "text": "of that or you can use the standard",
    "start": "786279",
    "end": "788360"
  },
  {
    "text": "syntax and just omit the ending so say",
    "start": "788360",
    "end": "791360"
  },
  {
    "text": "in a file full of um a th000 bytes or",
    "start": "791360",
    "end": "794959"
  },
  {
    "text": "10,000 by you can do 9500 through the",
    "start": "794959",
    "end": "798639"
  },
  {
    "text": "file so that's implied you can also",
    "start": "798639",
    "end": "802800"
  },
  {
    "text": "specify non-contiguous ranges so you",
    "start": "802800",
    "end": "806040"
  },
  {
    "text": "separate them with commas and you have a",
    "start": "806040",
    "end": "808839"
  },
  {
    "text": "special syntax that provides them and",
    "start": "808839",
    "end": "811680"
  },
  {
    "text": "there is a way that you can configure",
    "start": "811680",
    "end": "814240"
  },
  {
    "text": "the server to handle those and respond",
    "start": "814240",
    "end": "816399"
  },
  {
    "text": "appropriately which we'll talk about",
    "start": "816399",
    "end": "817600"
  },
  {
    "text": "later there's an excellent node Library",
    "start": "817600",
    "end": "819839"
  },
  {
    "text": "written by TJ hollich called rang parser",
    "start": "819839",
    "end": "822760"
  },
  {
    "text": "that does the handw that does the Dirty",
    "start": "822760",
    "end": "825079"
  },
  {
    "text": "Work of parsing these ranges for you and",
    "start": "825079",
    "end": "827000"
  },
  {
    "text": "giving you back an array of the",
    "start": "827000",
    "end": "828560"
  },
  {
    "text": "different values so you can go ahead and",
    "start": "828560",
    "end": "830800"
  },
  {
    "text": "npm install that required in your app",
    "start": "830800",
    "end": "832680"
  },
  {
    "text": "and use it for pars range requests",
    "start": "832680",
    "end": "835240"
  },
  {
    "text": "teachers library is also used in Express",
    "start": "835240",
    "end": "837279"
  },
  {
    "text": "and connect which transparently handles",
    "start": "837279",
    "end": "839160"
  },
  {
    "text": "these range requests for us so we've",
    "start": "839160",
    "end": "841639"
  },
  {
    "start": "840000",
    "end": "962000"
  },
  {
    "text": "looked at the request side of things",
    "start": "841639",
    "end": "843120"
  },
  {
    "text": "with the range request header let's look",
    "start": "843120",
    "end": "845040"
  },
  {
    "text": "at the content range header the syntax",
    "start": "845040",
    "end": "847560"
  },
  {
    "text": "of the content range header can only",
    "start": "847560",
    "end": "849320"
  },
  {
    "text": "specify one particular range sorry no",
    "start": "849320",
    "end": "851680"
  },
  {
    "text": "UNC continguous ranges here and has to",
    "start": "851680",
    "end": "853759"
  },
  {
    "text": "contain absolute by positions it's a lot",
    "start": "853759",
    "end": "856199"
  },
  {
    "text": "more strict which means that we can use",
    "start": "856199",
    "end": "857800"
  },
  {
    "text": "a simple regular expression to pars it",
    "start": "857800",
    "end": "859839"
  },
  {
    "text": "and I'll show you an example of that",
    "start": "859839",
    "end": "861480"
  },
  {
    "text": "later so a Content range is only",
    "start": "861480",
    "end": "864000"
  },
  {
    "text": "syntactically invalid if the last bite",
    "start": "864000",
    "end": "866120"
  },
  {
    "text": "value is less than the first bite value",
    "start": "866120",
    "end": "868160"
  },
  {
    "text": "you can't have in values or if you give",
    "start": "868160",
    "end": "871079"
  },
  {
    "text": "it a range value that's greater than the",
    "start": "871079",
    "end": "872839"
  },
  {
    "text": "length so for syntactically invalid",
    "start": "872839",
    "end": "875360"
  },
  {
    "text": "content ranges the client if you're",
    "start": "875360",
    "end": "878320"
  },
  {
    "text": "sending down a response from server the",
    "start": "878320",
    "end": "880839"
  },
  {
    "text": "client ignores the header and any",
    "start": "880839",
    "end": "883680"
  },
  {
    "text": "content that you send along with it so",
    "start": "883680",
    "end": "885759"
  },
  {
    "text": "it's a really bad idea to send down",
    "start": "885759",
    "end": "887720"
  },
  {
    "text": "mform headers in general with or you run",
    "start": "887720",
    "end": "891360"
  },
  {
    "text": "the risk of your client totally ignoring",
    "start": "891360",
    "end": "893279"
  },
  {
    "text": "everything you send",
    "start": "893279",
    "end": "894800"
  },
  {
    "text": "down",
    "start": "894800",
    "end": "896920"
  },
  {
    "text": "so the syntax Remains the Same same for",
    "start": "896920",
    "end": "899639"
  },
  {
    "text": "retrieving the next 500 bytes for",
    "start": "899639",
    "end": "901720"
  },
  {
    "text": "retrieving all except the first 500 and",
    "start": "901720",
    "end": "904079"
  },
  {
    "text": "for the last ones so as you can see it's",
    "start": "904079",
    "end": "906600"
  },
  {
    "text": "a very strict subset of the syntax used",
    "start": "906600",
    "end": "909839"
  },
  {
    "text": "by the range request so there is a",
    "start": "909839",
    "end": "913320"
  },
  {
    "text": "particular air conditioner the server",
    "start": "913320",
    "end": "914680"
  },
  {
    "text": "can send down 416 if the range request",
    "start": "914680",
    "end": "918440"
  },
  {
    "text": "isn't valid so for invalid range",
    "start": "918440",
    "end": "921199"
  },
  {
    "text": "requests the way that the Ser purpose",
    "start": "921199",
    "end": "923360"
  },
  {
    "text": "them is only if it's unsatisfiable so if",
    "start": "923360",
    "end": "926040"
  },
  {
    "text": "you give it a range outside of the",
    "start": "926040",
    "end": "927920"
  },
  {
    "text": "actual file size if you give it a",
    "start": "927920",
    "end": "931199"
  },
  {
    "text": "syntactically invalid range then it gets",
    "start": "931199",
    "end": "933519"
  },
  {
    "text": "ignored so HP does implement some",
    "start": "933519",
    "end": "937040"
  },
  {
    "text": "nice conditions around that to help you",
    "start": "937040",
    "end": "939839"
  },
  {
    "text": "in case you do end up sending down in",
    "start": "939839",
    "end": "941720"
  },
  {
    "text": "our request headers there's also a",
    "start": "941720",
    "end": "943720"
  },
  {
    "text": "special type of response with the as",
    "start": "943720",
    "end": "945360"
  },
  {
    "text": "risk the 416 response that you can send",
    "start": "945360",
    "end": "947880"
  },
  {
    "text": "out if the request range isn't",
    "start": "947880",
    "end": "949440"
  },
  {
    "text": "unsatisfiable and again clients like",
    "start": "949440",
    "end": "951680"
  },
  {
    "text": "browsers and the built-in no jfest",
    "start": "951680",
    "end": "953839"
  },
  {
    "text": "module know how to handle this",
    "start": "953839",
    "end": "955319"
  },
  {
    "text": "transparently so you're safe in work of",
    "start": "955319",
    "end": "957360"
  },
  {
    "text": "ever having to worry about this",
    "start": "957360",
    "end": "959440"
  },
  {
    "text": "but it's interesting nonetheless to look",
    "start": "959440",
    "end": "961000"
  },
  {
    "text": "at how this occurs behind the scenes I",
    "start": "961000",
    "end": "963360"
  },
  {
    "start": "962000",
    "end": "1181000"
  },
  {
    "text": "mentioned noncontiguous ranges earlier",
    "start": "963360",
    "end": "965360"
  },
  {
    "text": "and it's an",
    "start": "965360",
    "end": "966519"
  },
  {
    "text": "interesting topic because what you end",
    "start": "966519",
    "end": "968959"
  },
  {
    "text": "up sending down is actually a me is",
    "start": "968959",
    "end": "972040"
  },
  {
    "text": "actually a m message with a content type",
    "start": "972040",
    "end": "974880"
  },
  {
    "text": "of multi-art bite ranges these look like",
    "start": "974880",
    "end": "978279"
  },
  {
    "text": "email messages form uploads and any",
    "start": "978279",
    "end": "980360"
  },
  {
    "text": "other type of multipart uploads",
    "start": "980360",
    "end": "982440"
  },
  {
    "text": "basically boundaries",
    "start": "982440",
    "end": "984560"
  },
  {
    "text": "separated a boundary delimited string",
    "start": "984560",
    "end": "987279"
  },
  {
    "text": "with the cont with the request the data",
    "start": "987279",
    "end": "989560"
  },
  {
    "text": "in between so you can use this for",
    "start": "989560",
    "end": "991279"
  },
  {
    "text": "binary values as an example this is the",
    "start": "991279",
    "end": "994720"
  },
  {
    "text": "request for for the RFC 2616 text file",
    "start": "994720",
    "end": "999040"
  },
  {
    "text": "which defines HP",
    "start": "999040",
    "end": "1000680"
  },
  {
    "text": "1.1 and there is one more thing that I'd",
    "start": "1000680",
    "end": "1003399"
  },
  {
    "text": "like to cover and that is partial part",
    "start": "1003399",
    "end": "1004920"
  },
  {
    "text": "requests I mentioned earlier that by its",
    "start": "1004920",
    "end": "1007160"
  },
  {
    "text": "nature put rather than post can accept",
    "start": "1007160",
    "end": "1009680"
  },
  {
    "text": "range requests so because the URI",
    "start": "1009680",
    "end": "1011720"
  },
  {
    "text": "references the actual entity that you're",
    "start": "1011720",
    "end": "1013600"
  },
  {
    "text": "modifying rather than some abstract",
    "start": "1013600",
    "end": "1015480"
  },
  {
    "text": "resource that takes care of handlings",
    "start": "1015480",
    "end": "1017160"
  },
  {
    "text": "for you so if the server doesn't support",
    "start": "1017160",
    "end": "1020199"
  },
  {
    "text": "these then it just responds to simple",
    "start": "1020199",
    "end": "1021839"
  },
  {
    "text": "501 again standard HTP semantics but",
    "start": "1021839",
    "end": "1025240"
  },
  {
    "text": "cont it uses the content range header",
    "start": "1025240",
    "end": "1027959"
  },
  {
    "text": "which if you recall is an entity header",
    "start": "1027959",
    "end": "1030280"
  },
  {
    "text": "that can be sent up with either of the",
    "start": "1030280",
    "end": "1031678"
  },
  {
    "text": "request or response whenever you have",
    "start": "1031679",
    "end": "1033199"
  },
  {
    "text": "some kind of body so in node we can",
    "start": "1033199",
    "end": "1036120"
  },
  {
    "text": "actually use streams and regular and",
    "start": "1036120",
    "end": "1038918"
  },
  {
    "text": "combination of streams and regular",
    "start": "1038919",
    "end": "1040079"
  },
  {
    "text": "expressions in order to parse any upload",
    "start": "1040079",
    "end": "1043558"
  },
  {
    "text": "basically we check for the request",
    "start": "1043559",
    "end": "1044880"
  },
  {
    "text": "method if it's put then we look for the",
    "start": "1044880",
    "end": "1046678"
  },
  {
    "text": "content R header we then run regular",
    "start": "1046679",
    "end": "1049280"
  },
  {
    "text": "expression for the con header as I",
    "start": "1049280",
    "end": "1051400"
  },
  {
    "text": "mentioned because it's so strict it's",
    "start": "1051400",
    "end": "1053240"
  },
  {
    "text": "it's trivial to write right existes for",
    "start": "1053240",
    "end": "1055360"
  },
  {
    "text": "it if you see it then we simply pipe the",
    "start": "1055360",
    "end": "1059320"
  },
  {
    "text": "input of the request into whatever right",
    "start": "1059320",
    "end": "1062000"
  },
  {
    "text": "stream Target we create and specify a",
    "start": "1062000",
    "end": "1064200"
  },
  {
    "text": "start offset as well as Flags so the",
    "start": "1064200",
    "end": "1066880"
  },
  {
    "text": "flags in this case are particularly",
    "start": "1066880",
    "end": "1068400"
  },
  {
    "text": "important r+ means that we're opening",
    "start": "1068400",
    "end": "1070240"
  },
  {
    "text": "the file for reading and writing this is",
    "start": "1070240",
    "end": "1072280"
  },
  {
    "text": "important because if you want to insert",
    "start": "1072280",
    "end": "1073799"
  },
  {
    "text": "data in the middle of the file you want",
    "start": "1073799",
    "end": "1075280"
  },
  {
    "text": "to do so without obliterating the",
    "start": "1075280",
    "end": "1077240"
  },
  {
    "text": "existing file contents which is what",
    "start": "1077240",
    "end": "1079960"
  },
  {
    "text": "create right stream will do by default",
    "start": "1079960",
    "end": "1081720"
  },
  {
    "text": "or if you have WR only mode enabled so",
    "start": "1081720",
    "end": "1084400"
  },
  {
    "text": "it's very easy to get this to a node and",
    "start": "1084400",
    "end": "1086559"
  },
  {
    "text": "especially with the power of",
    "start": "1086559",
    "end": "1088360"
  },
  {
    "text": "streams so finally let's look at some",
    "start": "1088360",
    "end": "1090720"
  },
  {
    "text": "use cases the very first one is resuming",
    "start": "1090720",
    "end": "1093799"
  },
  {
    "text": "interrupted downloads if for whatever",
    "start": "1093799",
    "end": "1096440"
  },
  {
    "text": "reason the download goes wrong your",
    "start": "1096440",
    "end": "1098120"
  },
  {
    "text": "connection drops whatever your client",
    "start": "1098120",
    "end": "1100120"
  },
  {
    "text": "can easily pick up on it and this is",
    "start": "1100120",
    "end": "1102080"
  },
  {
    "text": "true as true for downloading a regular",
    "start": "1102080",
    "end": "1104919"
  },
  {
    "text": "static HTML Pages as it is for",
    "start": "1104919",
    "end": "1106799"
  },
  {
    "text": "downloading media types which brings to",
    "start": "1106799",
    "end": "1109120"
  },
  {
    "text": "my next point and that is retrieving",
    "start": "1109120",
    "end": "1110960"
  },
  {
    "text": "large media files so if you're familiar",
    "start": "1110960",
    "end": "1113320"
  },
  {
    "text": "with the htl 5 Audio or video element",
    "start": "1113320",
    "end": "1115799"
  },
  {
    "text": "you can",
    "start": "1115799",
    "end": "1116919"
  },
  {
    "text": "actually it actually uses this behind",
    "start": "1116919",
    "end": "1119480"
  },
  {
    "text": "the scenes in order to retrieve that",
    "start": "1119480",
    "end": "1121400"
  },
  {
    "text": "file so and this avoids you having to",
    "start": "1121400",
    "end": "1124280"
  },
  {
    "text": "download wasteful data that the client",
    "start": "1124280",
    "end": "1126320"
  },
  {
    "text": "will never meet for instance let's say",
    "start": "1126320",
    "end": "1127960"
  },
  {
    "text": "you're watching a YouTube video and you",
    "start": "1127960",
    "end": "1129480"
  },
  {
    "text": "want to skip right to the middle of it",
    "start": "1129480",
    "end": "1131400"
  },
  {
    "text": "your client doesn't have to retrieve the",
    "start": "1131400",
    "end": "1133559"
  },
  {
    "text": "first half of the video and waste",
    "start": "1133559",
    "end": "1135200"
  },
  {
    "text": "bandwidth and waste this cach space in",
    "start": "1135200",
    "end": "1138120"
  },
  {
    "text": "order to retrieve it it can just make AR",
    "start": "1138120",
    "end": "1140720"
  },
  {
    "text": "range request for that particular part",
    "start": "1140720",
    "end": "1142760"
  },
  {
    "text": "and then buffer it as you continue",
    "start": "1142760",
    "end": "1144320"
  },
  {
    "text": "watching the video the next use case are",
    "start": "1144320",
    "end": "1146840"
  },
  {
    "text": "download accelerators again you can open",
    "start": "1146840",
    "end": "1149039"
  },
  {
    "text": "multiple Connections in parallel and",
    "start": "1149039",
    "end": "1151080"
  },
  {
    "text": "then once the file finishes downloading",
    "start": "1151080",
    "end": "1152600"
  },
  {
    "text": "you Stitch it together and finally you",
    "start": "1152600",
    "end": "1154919"
  },
  {
    "text": "can have much more granular caching for",
    "start": "1154919",
    "end": "1157039"
  },
  {
    "text": "whichever file types you end up",
    "start": "1157039",
    "end": "1158480"
  },
  {
    "text": "downloading so on that note I know that",
    "start": "1158480",
    "end": "1161120"
  },
  {
    "text": "was a really quick primer we have just a",
    "start": "1161120",
    "end": "1162840"
  },
  {
    "text": "few minutes left so I'd like to thank",
    "start": "1162840",
    "end": "1164799"
  },
  {
    "text": "you for your time and turn over to any",
    "start": "1164799",
    "end": "1166480"
  },
  {
    "text": "questions may have okay perfect perfect",
    "start": "1166480",
    "end": "1169559"
  },
  {
    "text": "well thanks very much",
    "start": "1169559",
    "end": "1173240"
  },
  {
    "text": "[Music]",
    "start": "1175170",
    "end": "1183640"
  }
]