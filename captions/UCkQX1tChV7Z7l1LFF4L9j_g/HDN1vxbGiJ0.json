[
  {
    "text": "[Music]",
    "start": "3370",
    "end": "8719"
  },
  {
    "text": "um one thing that always amazes me",
    "start": "8719",
    "end": "10960"
  },
  {
    "text": "whenever I teach a class or give a",
    "start": "10960",
    "end": "13559"
  },
  {
    "text": "presentation I know it's kind of a",
    "start": "13559",
    "end": "15080"
  },
  {
    "text": "Murphy's Law kind of thing but I always",
    "start": "15080",
    "end": "17000"
  },
  {
    "text": "find some subtle",
    "start": "17000",
    "end": "19039"
  },
  {
    "text": "bug that baffles me for moments I",
    "start": "19039",
    "end": "21240"
  },
  {
    "text": "figured out yesterday my trouble with",
    "start": "21240",
    "end": "22960"
  },
  {
    "text": "Doc tests while yie and I worked on it",
    "start": "22960",
    "end": "25279"
  },
  {
    "text": "afterward and you remember how I had a",
    "start": "25279",
    "end": "26840"
  },
  {
    "text": "doc test and like it said inconsistent",
    "start": "26840",
    "end": "29439"
  },
  {
    "text": "indentation",
    "start": "29439",
    "end": "30759"
  },
  {
    "text": "at the beginning like I indented it all",
    "start": "30759",
    "end": "32398"
  },
  {
    "text": "and I was like I don't remember having",
    "start": "32399",
    "end": "33640"
  },
  {
    "text": "this trouble with dock test like it's",
    "start": "33640",
    "end": "34920"
  },
  {
    "text": "not really that picky on your leading",
    "start": "34920",
    "end": "37320"
  },
  {
    "text": "spes and whatnot",
    "start": "37320",
    "end": "39399"
  },
  {
    "text": "um I apparently haven't made dock",
    "start": "39399",
    "end": "43559"
  },
  {
    "text": "tests that check for the presence of an",
    "start": "43559",
    "end": "45920"
  },
  {
    "text": "embedded new line or at least not",
    "start": "45920",
    "end": "49000"
  },
  {
    "text": "anytime recently so Yi was trying to",
    "start": "49000",
    "end": "52760"
  },
  {
    "text": "make some dock tests",
    "start": "52760",
    "end": "54320"
  },
  {
    "text": "herself successfully I might add",
    "start": "54320",
    "end": "59160"
  },
  {
    "text": "and what was tripping me",
    "start": "62239",
    "end": "64920"
  },
  {
    "text": "up was my embedded new",
    "start": "64920",
    "end": "68200"
  },
  {
    "text": "line and the reason it was tripping me",
    "start": "68200",
    "end": "70320"
  },
  {
    "text": "up is because there's",
    "start": "70320",
    "end": "72280"
  },
  {
    "text": "essentially double",
    "start": "72280",
    "end": "74799"
  },
  {
    "text": "execution of this",
    "start": "74799",
    "end": "78200"
  },
  {
    "text": "string and I think I understand now",
    "start": "79439",
    "end": "81960"
  },
  {
    "text": "what's going on but if you're normally",
    "start": "81960",
    "end": "83640"
  },
  {
    "text": "going to specify a literal slashin",
    "start": "83640",
    "end": "87040"
  },
  {
    "text": "character in a string you can just say",
    "start": "87040",
    "end": "89000"
  },
  {
    "text": "slash in",
    "start": "89000",
    "end": "90840"
  },
  {
    "text": "I have a",
    "start": "90840",
    "end": "93399"
  },
  {
    "text": "string that's",
    "start": "93399",
    "end": "96000"
  },
  {
    "text": "embedded inside another",
    "start": "96000",
    "end": "99759"
  },
  {
    "text": "string right this is in triple",
    "start": "99759",
    "end": "102560"
  },
  {
    "text": "quotes So the python dock test module",
    "start": "102560",
    "end": "105880"
  },
  {
    "text": "takes my doc test and reads it as a",
    "start": "105880",
    "end": "108439"
  },
  {
    "text": "string at which point it evaluates slash",
    "start": "108439",
    "end": "111079"
  },
  {
    "text": "in and puts in a literal new line",
    "start": "111079",
    "end": "112920"
  },
  {
    "text": "character",
    "start": "112920",
    "end": "115039"
  },
  {
    "text": "there it then tries to run my test and",
    "start": "115039",
    "end": "118360"
  },
  {
    "text": "says",
    "start": "118360",
    "end": "120000"
  },
  {
    "text": "I have a console line that looks like",
    "start": "120000",
    "end": "121360"
  },
  {
    "text": "format line and I'm expecting to get",
    "start": "121360",
    "end": "123039"
  },
  {
    "text": "back opening",
    "start": "123039",
    "end": "124719"
  },
  {
    "text": "quotes return and a closing quote is",
    "start": "124719",
    "end": "127640"
  },
  {
    "text": "down on the next",
    "start": "127640",
    "end": "130160"
  },
  {
    "text": "line which it doesn't",
    "start": "130160",
    "end": "133800"
  },
  {
    "text": "like so I had to double quote my slash",
    "start": "135040",
    "end": "137800"
  },
  {
    "text": "in and as soon as I did that all the",
    "start": "137800",
    "end": "140519"
  },
  {
    "text": "non-helpful error messages about leading",
    "start": "140519",
    "end": "142519"
  },
  {
    "text": "indentation in spaces went away yeah so",
    "start": "142519",
    "end": "145920"
  },
  {
    "text": "if you've",
    "start": "145920",
    "end": "146840"
  },
  {
    "text": "done if you've done this if you've done",
    "start": "146840",
    "end": "149200"
  },
  {
    "text": "um string SL in strings uh maybe I",
    "start": "149200",
    "end": "151239"
  },
  {
    "text": "should explain that too if you've done",
    "start": "151239",
    "end": "153040"
  },
  {
    "text": "uh Escape characters in strings if you",
    "start": "153040",
    "end": "154959"
  },
  {
    "text": "want to embed a literal slash a",
    "start": "154959",
    "end": "157599"
  },
  {
    "text": "backslash in a string and you're using",
    "start": "157599",
    "end": "160360"
  },
  {
    "text": "backslash as your string escaping you",
    "start": "160360",
    "end": "163640"
  },
  {
    "text": "have to escape your backslash so two",
    "start": "163640",
    "end": "166159"
  },
  {
    "text": "backslashes in a row would be",
    "start": "166159",
    "end": "168480"
  },
  {
    "text": "interpreted as one single",
    "start": "168480",
    "end": "171000"
  },
  {
    "text": "backslash so the first time it's",
    "start": "171000",
    "end": "172920"
  },
  {
    "text": "evaluated the dock test module now gets",
    "start": "172920",
    "end": "175480"
  },
  {
    "text": "this and",
    "start": "175480",
    "end": "176400"
  },
  {
    "text": "sees ABC sln which is what I wanted to",
    "start": "176400",
    "end": "179879"
  },
  {
    "text": "to pass it and it evaluates that string",
    "start": "179879",
    "end": "183159"
  },
  {
    "text": "so it's because the string is evaluated",
    "start": "183159",
    "end": "184840"
  },
  {
    "text": "twice and actually when I I had to do a",
    "start": "184840",
    "end": "186760"
  },
  {
    "text": "quick Google search to see what the heck",
    "start": "186760",
    "end": "188080"
  },
  {
    "text": "was going on and lots of people",
    "start": "188080",
    "end": "189480"
  },
  {
    "text": "complaining about having control R",
    "start": "189480",
    "end": "191319"
  },
  {
    "text": "control t or control n in their doc test",
    "start": "191319",
    "end": "193560"
  },
  {
    "text": "and it's like ah right I get it there's",
    "start": "193560",
    "end": "195040"
  },
  {
    "text": "two executions of this string basically",
    "start": "195040",
    "end": "198640"
  },
  {
    "text": "so um a little trip me up and it points",
    "start": "198640",
    "end": "200959"
  },
  {
    "text": "to something I did know about doc test",
    "start": "200959",
    "end": "203159"
  },
  {
    "text": "which is in general you should condition",
    "start": "203159",
    "end": "205319"
  },
  {
    "text": "your output to be as simple as possible",
    "start": "205319",
    "end": "207720"
  },
  {
    "text": "um Danny was asking me about order of",
    "start": "207720",
    "end": "210439"
  },
  {
    "text": "dicks he was printing out his keys and",
    "start": "210439",
    "end": "212920"
  },
  {
    "text": "noting that it was always in the same",
    "start": "212920",
    "end": "213920"
  },
  {
    "text": "order but it was kind of a unusual order",
    "start": "213920",
    "end": "216000"
  },
  {
    "text": "no logical reason for it and dicks are",
    "start": "216000",
    "end": "218120"
  },
  {
    "text": "unordered so if you have a function that",
    "start": "218120",
    "end": "219519"
  },
  {
    "text": "returns dicks and you're checking the",
    "start": "219519",
    "end": "220519"
  },
  {
    "text": "return value in your dock test your doc",
    "start": "220519",
    "end": "222760"
  },
  {
    "text": "test might fail you have the right keys",
    "start": "222760",
    "end": "224599"
  },
  {
    "text": "and values they're just not in the same",
    "start": "224599",
    "end": "226360"
  },
  {
    "text": "order and there's no way to guarantee",
    "start": "226360",
    "end": "227959"
  },
  {
    "text": "that they would be in the same order and",
    "start": "227959",
    "end": "230000"
  },
  {
    "text": "in cases like that I might see that I",
    "start": "230000",
    "end": "232640"
  },
  {
    "text": "have the right Keys sorting the list",
    "start": "232640",
    "end": "235519"
  },
  {
    "text": "first um but in general doc test should",
    "start": "235519",
    "end": "237599"
  },
  {
    "text": "have really simple output formats",
    "start": "237599",
    "end": "241720"
  },
  {
    "text": "so let's talk about new stuff",
    "start": "241959",
    "end": "244959"
  },
  {
    "text": "today um so we're ped I I mentioned",
    "start": "244959",
    "end": "247599"
  },
  {
    "text": "we're skipping regular Expressions I'm",
    "start": "247599",
    "end": "249560"
  },
  {
    "text": "probably going to come back and talk",
    "start": "249560",
    "end": "250519"
  },
  {
    "text": "about um the option parser module",
    "start": "250519",
    "end": "252439"
  },
  {
    "text": "because it's such a useful module which",
    "start": "252439",
    "end": "254519"
  },
  {
    "text": "is section 11 I use opop parse all the",
    "start": "254519",
    "end": "257639"
  },
  {
    "text": "time um but I'll probably leave that for",
    "start": "257639",
    "end": "260359"
  },
  {
    "text": "a lab section and let those of you who",
    "start": "260359",
    "end": "262280"
  },
  {
    "text": "are still working on getting your Labs",
    "start": "262280",
    "end": "263800"
  },
  {
    "text": "uh up to spec more or less get them up",
    "start": "263800",
    "end": "265759"
  },
  {
    "text": "to spec and those of you who are done",
    "start": "265759",
    "end": "266919"
  },
  {
    "text": "and twiddling your thumbs can go ahead",
    "start": "266919",
    "end": "268960"
  },
  {
    "text": "and put an par front end um on your",
    "start": "268960",
    "end": "273600"
  },
  {
    "text": "program so we are actually at 12 and",
    "start": "273800",
    "end": "277240"
  },
  {
    "text": "we've already talked about some of the",
    "start": "277240",
    "end": "278880"
  },
  {
    "text": "items of 12 um or sorry we're at",
    "start": "278880",
    "end": "282560"
  },
  {
    "text": "11 wrong direction 13 I get the right",
    "start": "282560",
    "end": "285280"
  },
  {
    "text": "number here we're at 13 it's a section",
    "start": "285280",
    "end": "287160"
  },
  {
    "text": "entitled functional programming we've",
    "start": "287160",
    "end": "288440"
  },
  {
    "text": "talked about some of the items in",
    "start": "288440",
    "end": "289680"
  },
  {
    "text": "functional the functional programming",
    "start": "289680",
    "end": "291600"
  },
  {
    "text": "section chiefly uh functions as objects",
    "start": "291600",
    "end": "295560"
  },
  {
    "text": "and we haven't talked about functions we",
    "start": "295560",
    "end": "297520"
  },
  {
    "text": "haven't talked about objects and classes",
    "start": "297520",
    "end": "300280"
  },
  {
    "text": "um in any definite form yet we're going",
    "start": "300280",
    "end": "302160"
  },
  {
    "text": "to do that hopefully by the end of the",
    "start": "302160",
    "end": "303759"
  },
  {
    "text": "day um but it's just worth pointing out",
    "start": "303759",
    "end": "307160"
  },
  {
    "text": "that everything in Python is an",
    "start": "307160",
    "end": "310880"
  },
  {
    "text": "object everything every type in Python",
    "start": "310880",
    "end": "314720"
  },
  {
    "text": "may have methods and attributes and",
    "start": "314720",
    "end": "317759"
  },
  {
    "text": "functions do in",
    "start": "317759",
    "end": "319880"
  },
  {
    "text": "fact have methods and",
    "start": "319880",
    "end": "323479"
  },
  {
    "text": "attributes we've talked about the fact",
    "start": "326960",
    "end": "329280"
  },
  {
    "text": "that they're first class citizens um and",
    "start": "329280",
    "end": "331639"
  },
  {
    "text": "that means that you can pass them as",
    "start": "331639",
    "end": "333080"
  },
  {
    "text": "variables when you pass functions to",
    "start": "333080",
    "end": "335479"
  },
  {
    "text": "other functions it's called higher order",
    "start": "335479",
    "end": "338160"
  },
  {
    "text": "programming kind of composing things uh",
    "start": "338160",
    "end": "341160"
  },
  {
    "text": "by units and we've done a couple little",
    "start": "341160",
    "end": "344000"
  },
  {
    "text": "examples of that I think almost",
    "start": "344000",
    "end": "345759"
  },
  {
    "text": "everybody's done the filter example",
    "start": "345759",
    "end": "348080"
  },
  {
    "text": "we're going to look at that again with",
    "start": "348080",
    "end": "349240"
  },
  {
    "text": "sorting today um and then this is going",
    "start": "349240",
    "end": "351919"
  },
  {
    "text": "to be applied to your lab so 13.3 if you",
    "start": "351919",
    "end": "355360"
  },
  {
    "text": "want to take a look at that um I can't",
    "start": "355360",
    "end": "358160"
  },
  {
    "text": "remember who it is that I was helping",
    "start": "358160",
    "end": "359199"
  },
  {
    "text": "with the lab and I noted that the",
    "start": "359199",
    "end": "360919"
  },
  {
    "text": "builtin sort method on a list was kind",
    "start": "360919",
    "end": "364479"
  },
  {
    "text": "of annoying because it was an in place",
    "start": "364479",
    "end": "366120"
  },
  {
    "text": "operation and so I couldn't chain",
    "start": "366120",
    "end": "368160"
  },
  {
    "text": "anything on",
    "start": "368160",
    "end": "371240"
  },
  {
    "text": "it there's also a built-in",
    "start": "374400",
    "end": "379479"
  },
  {
    "text": "sorted which has the same signature as",
    "start": "381479",
    "end": "383960"
  },
  {
    "text": "the method but it returns a",
    "start": "383960",
    "end": "387360"
  },
  {
    "text": "copy and we can use both of these um",
    "start": "387360",
    "end": "390680"
  },
  {
    "text": "python has good support for sorting and",
    "start": "390680",
    "end": "392560"
  },
  {
    "text": "it sorting is even kind of somewhat",
    "start": "392560",
    "end": "395840"
  },
  {
    "text": "intelligent so if I make myself a list",
    "start": "395840",
    "end": "399639"
  },
  {
    "text": "of",
    "start": "399639",
    "end": "400560"
  },
  {
    "text": "numbers and let's do this in descending",
    "start": "400560",
    "end": "405039"
  },
  {
    "text": "order people have seen the range",
    "start": "410400",
    "end": "412160"
  },
  {
    "text": "function before it's a start and a stop",
    "start": "412160",
    "end": "414400"
  },
  {
    "text": "and it does take a third parameter which",
    "start": "414400",
    "end": "417039"
  },
  {
    "text": "is like the stepwise parameter in um",
    "start": "417039",
    "end": "421319"
  },
  {
    "text": "indexing",
    "start": "421319",
    "end": "423800"
  },
  {
    "text": "lists I can sort I could",
    "start": "425800",
    "end": "430759"
  },
  {
    "text": "also yeah so there the built-in reverse",
    "start": "443479",
    "end": "446599"
  },
  {
    "text": "um now I've got a list of letters",
    "start": "446599",
    "end": "450319"
  },
  {
    "text": "and again if I do a",
    "start": "450319",
    "end": "452720"
  },
  {
    "text": "sort python is sorting them in",
    "start": "452720",
    "end": "455199"
  },
  {
    "text": "alphabetical",
    "start": "455199",
    "end": "458199"
  },
  {
    "text": "format and I could reverse",
    "start": "459080",
    "end": "462720"
  },
  {
    "text": "them but sometimes we have more complex",
    "start": "463080",
    "end": "465599"
  },
  {
    "text": "data structures um what if I had two PS",
    "start": "465599",
    "end": "471039"
  },
  {
    "text": "how do you think python sorted my",
    "start": "497199",
    "end": "500319"
  },
  {
    "text": "tups it's looking at the by default",
    "start": "507000",
    "end": "509639"
  },
  {
    "text": "looking at the first key in any iterable",
    "start": "509639",
    "end": "513440"
  },
  {
    "text": "and using it to sort so I've got a list",
    "start": "513440",
    "end": "515320"
  },
  {
    "text": "of Tes and they're sorted in ascending",
    "start": "515320",
    "end": "518680"
  },
  {
    "text": "numeric order by the first key but what",
    "start": "518680",
    "end": "521120"
  },
  {
    "text": "if I really wanted to sort them by the",
    "start": "521120",
    "end": "522560"
  },
  {
    "text": "second",
    "start": "522560",
    "end": "524919"
  },
  {
    "text": "key so yeah you can designate that and",
    "start": "525600",
    "end": "528160"
  },
  {
    "text": "how you designate that is pass a",
    "start": "528160",
    "end": "530640"
  },
  {
    "text": "function to the parameter key and the",
    "start": "530640",
    "end": "534720"
  },
  {
    "text": "function accepts the item that is being",
    "start": "534720",
    "end": "537360"
  },
  {
    "text": "sorted and returns the",
    "start": "537360",
    "end": "540760"
  },
  {
    "text": "value that you're wanting to sort",
    "start": "540760",
    "end": "545320"
  },
  {
    "text": "so does that make sense to people I",
    "start": "583920",
    "end": "586440"
  },
  {
    "text": "defined a function that's called Funk",
    "start": "586440",
    "end": "588680"
  },
  {
    "text": "and it accepts what does it",
    "start": "588680",
    "end": "591600"
  },
  {
    "text": "accept if I printed X inside my function",
    "start": "591600",
    "end": "594640"
  },
  {
    "text": "what would",
    "start": "594640",
    "end": "595560"
  },
  {
    "text": "print so X1 is the second value but X",
    "start": "595560",
    "end": "598839"
  },
  {
    "text": "itself",
    "start": "598839",
    "end": "599839"
  },
  {
    "text": "is the whole Tuple this function is",
    "start": "599839",
    "end": "602200"
  },
  {
    "text": "being called by the sort function and",
    "start": "602200",
    "end": "604959"
  },
  {
    "text": "being passed each item",
    "start": "604959",
    "end": "607160"
  },
  {
    "text": "successively in my",
    "start": "607160",
    "end": "609640"
  },
  {
    "text": "iterable and it's figuring out what",
    "start": "609640",
    "end": "613160"
  },
  {
    "text": "value should represent each item",
    "start": "613160",
    "end": "617519"
  },
  {
    "text": "right so each thing that it's",
    "start": "646519",
    "end": "649160"
  },
  {
    "text": "passed is a",
    "start": "649160",
    "end": "651480"
  },
  {
    "text": "tuple it's a list of",
    "start": "651480",
    "end": "654160"
  },
  {
    "text": "tupples so I'm not looping at all and",
    "start": "654160",
    "end": "657120"
  },
  {
    "text": "basically you can think about these",
    "start": "657120",
    "end": "658480"
  },
  {
    "text": "sorts of approaches",
    "start": "658480",
    "end": "660079"
  },
  {
    "text": "as doing away with the",
    "start": "660079",
    "end": "662519"
  },
  {
    "text": "loop again if you think about how I",
    "start": "662519",
    "end": "664639"
  },
  {
    "text": "could do this manually how could I how",
    "start": "664639",
    "end": "666519"
  },
  {
    "text": "could I make this sort workout manually",
    "start": "666519",
    "end": "668040"
  },
  {
    "text": "how would you write this if you weren't",
    "start": "668040",
    "end": "669079"
  },
  {
    "text": "going to use uh the sort function and",
    "start": "669079",
    "end": "672000"
  },
  {
    "text": "let's not bother to do it in place",
    "start": "672000",
    "end": "673440"
  },
  {
    "text": "because that gets more complicated let's",
    "start": "673440",
    "end": "675120"
  },
  {
    "text": "make a new list that's sorted Noe so",
    "start": "675120",
    "end": "678040"
  },
  {
    "text": "what's being passed into Funk each time",
    "start": "678040",
    "end": "680760"
  },
  {
    "text": "is each item in the list right and each",
    "start": "680760",
    "end": "683360"
  },
  {
    "text": "item happens to be t a tuple right and",
    "start": "683360",
    "end": "688279"
  },
  {
    "text": "return what",
    "start": "688279",
    "end": "691240"
  },
  {
    "text": "and what it's",
    "start": "691480",
    "end": "693959"
  },
  {
    "text": "returning is the value that should be",
    "start": "694480",
    "end": "696680"
  },
  {
    "text": "compared to do the",
    "start": "696680",
    "end": "699880"
  },
  {
    "text": "Sorting which is the second parameter in",
    "start": "699880",
    "end": "701760"
  },
  {
    "text": "the Tuple and if you if I did this",
    "start": "701760",
    "end": "704000"
  },
  {
    "text": "instead",
    "start": "704000",
    "end": "707000"
  },
  {
    "text": "that still works right I'm passing in a",
    "start": "725680",
    "end": "728160"
  },
  {
    "text": "string so each time oh and I'm sorry I'm",
    "start": "728160",
    "end": "730680"
  },
  {
    "text": "probably cutting off on your um",
    "start": "730680",
    "end": "734639"
  },
  {
    "text": "monitors so it still works I made a list",
    "start": "736680",
    "end": "739320"
  },
  {
    "text": "that has strings all my strings have at",
    "start": "739320",
    "end": "741680"
  },
  {
    "text": "least two entries",
    "start": "741680",
    "end": "745000"
  },
  {
    "text": "they could have however many but they",
    "start": "750120",
    "end": "751560"
  },
  {
    "text": "need two because I'm looking at the",
    "start": "751560",
    "end": "752639"
  },
  {
    "text": "second",
    "start": "752639",
    "end": "754920"
  },
  {
    "text": "one and it has them sorted in ascending",
    "start": "762120",
    "end": "764399"
  },
  {
    "text": "order by the second",
    "start": "764399",
    "end": "766920"
  },
  {
    "text": "key and again if you think about how",
    "start": "766920",
    "end": "768839"
  },
  {
    "text": "you'd write this yourself you'd probably",
    "start": "768839",
    "end": "770760"
  },
  {
    "text": "start",
    "start": "770760",
    "end": "772399"
  },
  {
    "text": "out well we could do it in place and use",
    "start": "772399",
    "end": "775440"
  },
  {
    "text": "a stupid sorting algorithm like a bubble",
    "start": "775440",
    "end": "777519"
  },
  {
    "text": "sort but it's going to involve a for",
    "start": "777519",
    "end": "779680"
  },
  {
    "text": "Loop and probably another for Loop",
    "start": "779680",
    "end": "782040"
  },
  {
    "text": "inside",
    "start": "782040",
    "end": "784360"
  },
  {
    "text": "it to iterate over all the items",
    "start": "785000",
    "end": "787360"
  },
  {
    "text": "comparing them to one",
    "start": "787360",
    "end": "788920"
  },
  {
    "text": "another and instead we know what value",
    "start": "788920",
    "end": "791800"
  },
  {
    "text": "it is that we want to get and python has",
    "start": "791800",
    "end": "793600"
  },
  {
    "text": "a really good really smart built-in",
    "start": "793600",
    "end": "796079"
  },
  {
    "text": "sorting algorithm so why don't we just",
    "start": "796079",
    "end": "798320"
  },
  {
    "text": "figure out how to extract the value we",
    "start": "798320",
    "end": "799720"
  },
  {
    "text": "want and hand it back to the Sorting",
    "start": "799720",
    "end": "801040"
  },
  {
    "text": "algorithm how about",
    "start": "801040",
    "end": "804560"
  },
  {
    "text": "dicks for",
    "start": "808120",
    "end": "812079"
  },
  {
    "text": "I actually have no idea how python is",
    "start": "842720",
    "end": "844600"
  },
  {
    "text": "sorting dicks by default although it",
    "start": "844600",
    "end": "847240"
  },
  {
    "text": "wouldn't surprise me if it's by the",
    "start": "847240",
    "end": "849399"
  },
  {
    "text": "actual string representation of the dict",
    "start": "849399",
    "end": "852560"
  },
  {
    "text": "which yeah looks like it would work it",
    "start": "852560",
    "end": "854920"
  },
  {
    "text": "can't rely on the first",
    "start": "854920",
    "end": "857759"
  },
  {
    "text": "key because there is no implied order to",
    "start": "857759",
    "end": "860560"
  },
  {
    "text": "Keys like it did with",
    "start": "860560",
    "end": "864040"
  },
  {
    "text": "tuples but we could do our same sort of",
    "start": "864040",
    "end": "866720"
  },
  {
    "text": "thing",
    "start": "866720",
    "end": "869720"
  },
  {
    "text": "and write a function that",
    "start": "877800",
    "end": "879800"
  },
  {
    "text": "takes a",
    "start": "879800",
    "end": "882000"
  },
  {
    "text": "dictionary and extracts the value we",
    "start": "882000",
    "end": "884279"
  },
  {
    "text": "want somehow and here we even have",
    "start": "884279",
    "end": "887240"
  },
  {
    "text": "heterogeneous dictionaries where the key",
    "start": "887240",
    "end": "889759"
  },
  {
    "text": "is a different name",
    "start": "889759",
    "end": "893319"
  },
  {
    "text": "so I'll do something",
    "start": "905040",
    "end": "907240"
  },
  {
    "text": "dumb like",
    "start": "907240",
    "end": "910480"
  },
  {
    "text": "that Keys is a",
    "start": "920560",
    "end": "924120"
  },
  {
    "text": "function and I can sort by the value in",
    "start": "927560",
    "end": "930360"
  },
  {
    "text": "this case it's a dict that only had one",
    "start": "930360",
    "end": "931720"
  },
  {
    "text": "key so I just grabbed the first key even",
    "start": "931720",
    "end": "933880"
  },
  {
    "text": "though that's a dumb thing to do since",
    "start": "933880",
    "end": "935000"
  },
  {
    "text": "there is no implied order but hey if",
    "start": "935000",
    "end": "936800"
  },
  {
    "text": "there's only one key then that key is",
    "start": "936800",
    "end": "938639"
  },
  {
    "text": "always guaranteed guaranteed to be the",
    "start": "938639",
    "end": "940440"
  },
  {
    "text": "first",
    "start": "940440",
    "end": "941759"
  },
  {
    "text": "key so I keep on writing these little",
    "start": "941759",
    "end": "944319"
  },
  {
    "text": "functions",
    "start": "944319",
    "end": "946800"
  },
  {
    "text": "here and that especially when they're",
    "start": "948399",
    "end": "951279"
  },
  {
    "text": "kind of oneline functions that seems",
    "start": "951279",
    "end": "953959"
  },
  {
    "text": "like Overkill python lets you Nest",
    "start": "953959",
    "end": "957040"
  },
  {
    "text": "functions so that kind of cuts down on",
    "start": "957040",
    "end": "958319"
  },
  {
    "text": "the Clutter if it didn't let you Nest",
    "start": "958319",
    "end": "959920"
  },
  {
    "text": "functions you might write a program and",
    "start": "959920",
    "end": "962000"
  },
  {
    "text": "say you have like 10 different sorts",
    "start": "962000",
    "end": "963680"
  },
  {
    "text": "different places in your code you'd have",
    "start": "963680",
    "end": "965199"
  },
  {
    "text": "10 different little oneline functions at",
    "start": "965199",
    "end": "967880"
  },
  {
    "text": "the top of your code someplace that are",
    "start": "967880",
    "end": "969440"
  },
  {
    "text": "sort of you know the end user isn't",
    "start": "969440",
    "end": "971680"
  },
  {
    "text": "supposed to call them they're just",
    "start": "971680",
    "end": "973920"
  },
  {
    "text": "little tiny bits of logic and they're",
    "start": "973920",
    "end": "975319"
  },
  {
    "text": "not anywhere near where they were",
    "start": "975319",
    "end": "976639"
  },
  {
    "text": "defined just kind of confusing clutter",
    "start": "976639",
    "end": "978680"
  },
  {
    "text": "so nested functions lets us sort of",
    "start": "978680",
    "end": "980319"
  },
  {
    "text": "address that from a um coding style and",
    "start": "980319",
    "end": "982959"
  },
  {
    "text": "hygiene point of view so I can Define",
    "start": "982959",
    "end": "985560"
  },
  {
    "text": "these functions right where they're used",
    "start": "985560",
    "end": "990240"
  },
  {
    "text": "but even that kind of bugs people why do",
    "start": "990240",
    "end": "992480"
  },
  {
    "text": "I have to like deaf and give it a name",
    "start": "992480",
    "end": "995800"
  },
  {
    "text": "and it's really only like could I just",
    "start": "995800",
    "end": "997240"
  },
  {
    "text": "pass the statement that I want to",
    "start": "997240",
    "end": "998600"
  },
  {
    "text": "execute more or less and in fact you can",
    "start": "998600",
    "end": "1002000"
  },
  {
    "text": "so python supports in very limited form",
    "start": "1002000",
    "end": "1006240"
  },
  {
    "text": "Anonymous",
    "start": "1006240",
    "end": "1008800"
  },
  {
    "text": "functions it does so by a keyword and",
    "start": "1009800",
    "end": "1013240"
  },
  {
    "text": "some new syntax the keyword is Lambda so",
    "start": "1013240",
    "end": "1016839"
  },
  {
    "text": "you thought things reminded you of list",
    "start": "1016839",
    "end": "1018120"
  },
  {
    "text": "before they really do",
    "start": "1018120",
    "end": "1021839"
  },
  {
    "text": "now and the syntax",
    "start": "1024160",
    "end": "1028240"
  },
  {
    "text": "is",
    "start": "1029039",
    "end": "1031000"
  },
  {
    "text": "Lambda my parameter list no",
    "start": "1031000",
    "end": "1036120"
  },
  {
    "text": "parenthesis so I'll say",
    "start": "1036120",
    "end": "1039678"
  },
  {
    "text": "x and a",
    "start": "1039839",
    "end": "1042000"
  },
  {
    "text": "single python",
    "start": "1042000",
    "end": "1044880"
  },
  {
    "text": "statement whose value will be returned",
    "start": "1044880",
    "end": "1047520"
  },
  {
    "text": "from my Anonymous function no return",
    "start": "1047520",
    "end": "1049720"
  },
  {
    "text": "statement",
    "start": "1049720",
    "end": "1052159"
  },
  {
    "text": "necessary so what did I just do I have a",
    "start": "1058880",
    "end": "1061840"
  },
  {
    "text": "variable Funk and it's of type function",
    "start": "1061840",
    "end": "1065960"
  },
  {
    "text": "its name is",
    "start": "1065960",
    "end": "1067400"
  },
  {
    "text": "Lambda it doesn't really have a name I",
    "start": "1067400",
    "end": "1070039"
  },
  {
    "text": "have a variable pointing at it right now",
    "start": "1070039",
    "end": "1071559"
  },
  {
    "text": "but I wouldn't have",
    "start": "1071559",
    "end": "1072840"
  },
  {
    "text": "to it's a function that accepts a single",
    "start": "1072840",
    "end": "1075559"
  },
  {
    "text": "argument X and returns",
    "start": "1075559",
    "end": "1079600"
  },
  {
    "text": "the first key of X there's no return",
    "start": "1079600",
    "end": "1082360"
  },
  {
    "text": "statement there's no parentheses it's on",
    "start": "1082360",
    "end": "1085080"
  },
  {
    "text": "a single line I can't have multiple",
    "start": "1085080",
    "end": "1087840"
  },
  {
    "text": "statements it's extremely limited but",
    "start": "1087840",
    "end": "1090039"
  },
  {
    "text": "it's extremely useful for situations",
    "start": "1090039",
    "end": "1092960"
  },
  {
    "text": "like what is X right",
    "start": "1092960",
    "end": "1095919"
  },
  {
    "text": "now let's get one of our earlier X's",
    "start": "1095919",
    "end": "1099679"
  },
  {
    "text": "like that",
    "start": "1099679",
    "end": "1102039"
  },
  {
    "text": "one I can just Define it in line",
    "start": "1104440",
    "end": "1109519"
  },
  {
    "text": "and I really should give it different",
    "start": "1122320",
    "end": "1123760"
  },
  {
    "text": "parameter Nam so I'm not you know",
    "start": "1123760",
    "end": "1126159"
  },
  {
    "text": "confusing",
    "start": "1126159",
    "end": "1127960"
  },
  {
    "text": "everybody this makes a good test though",
    "start": "1127960",
    "end": "1130360"
  },
  {
    "text": "this",
    "start": "1130360",
    "end": "1132320"
  },
  {
    "text": "x",
    "start": "1132320",
    "end": "1134679"
  },
  {
    "text": "has nothing to do with that X this x is",
    "start": "1134679",
    "end": "1138880"
  },
  {
    "text": "the parameter name to a function and",
    "start": "1138880",
    "end": "1140960"
  },
  {
    "text": "it'll actually be one of the rows of X",
    "start": "1140960",
    "end": "1143159"
  },
  {
    "text": "so just like before I was defining a",
    "start": "1143159",
    "end": "1144559"
  },
  {
    "text": "separate function that accepted a single",
    "start": "1144559",
    "end": "1147799"
  },
  {
    "text": "item from my iterable and returned the",
    "start": "1147799",
    "end": "1150679"
  },
  {
    "text": "first index to allow it to be sorted",
    "start": "1150679",
    "end": "1153840"
  },
  {
    "text": "I've now defined an inline",
    "start": "1153840",
    "end": "1156520"
  },
  {
    "text": "function it has no name I'm just",
    "start": "1156520",
    "end": "1159120"
  },
  {
    "text": "assigning it directly as a parameter to",
    "start": "1159120",
    "end": "1162080"
  },
  {
    "text": "the sort",
    "start": "1162080",
    "end": "1163480"
  },
  {
    "text": "function it has a very short function",
    "start": "1163480",
    "end": "1165919"
  },
  {
    "text": "body that doesn't even have a return",
    "start": "1165919",
    "end": "1167080"
  },
  {
    "text": "statement in it it just evaluat the",
    "start": "1167080",
    "end": "1169080"
  },
  {
    "text": "expression it sees and returns that",
    "start": "1169080",
    "end": "1171320"
  },
  {
    "text": "value so no so this Lambda form there is",
    "start": "1171320",
    "end": "1174440"
  },
  {
    "text": "no def associated with",
    "start": "1174440",
    "end": "1176679"
  },
  {
    "text": "it um and how can I get to now that",
    "start": "1176679",
    "end": "1180840"
  },
  {
    "text": "function that I just passed to",
    "start": "1180840",
    "end": "1183360"
  },
  {
    "text": "sort I",
    "start": "1183360",
    "end": "1185520"
  },
  {
    "text": "can't I have no name for it I didn't",
    "start": "1185520",
    "end": "1188280"
  },
  {
    "text": "bind any variable to it I didn't put a",
    "start": "1188280",
    "end": "1191440"
  },
  {
    "text": "tag on",
    "start": "1191440",
    "end": "1192559"
  },
  {
    "text": "it so you it's actually hopefully",
    "start": "1192559",
    "end": "1196280"
  },
  {
    "text": "simpler to read this",
    "start": "1196280",
    "end": "1199679"
  },
  {
    "text": "statement I'm calling the sort",
    "start": "1199679",
    "end": "1202120"
  },
  {
    "text": "function and key is a parameter that",
    "start": "1202120",
    "end": "1205200"
  },
  {
    "text": "accepts a function and I've just defined",
    "start": "1205200",
    "end": "1207280"
  },
  {
    "text": "an anonymous function right here if I",
    "start": "1207280",
    "end": "1210360"
  },
  {
    "text": "instead said",
    "start": "1210360",
    "end": "1212280"
  },
  {
    "text": "here x.",
    "start": "1212280",
    "end": "1216280"
  },
  {
    "text": "sort key equals my",
    "start": "1217840",
    "end": "1221799"
  },
  {
    "text": "sort",
    "start": "1221799",
    "end": "1223210"
  },
  {
    "text": "[Music]",
    "start": "1223210",
    "end": "1225200"
  },
  {
    "text": "function and I'm going to get a syntax",
    "start": "1225200",
    "end": "1227000"
  },
  {
    "text": "there because I haven't defined that",
    "start": "1227000",
    "end": "1228159"
  },
  {
    "text": "well that's a little more",
    "start": "1228159",
    "end": "1229320"
  },
  {
    "text": "straightforward than that you know that",
    "start": "1229320",
    "end": "1230360"
  },
  {
    "text": "I'm passing a sort function but you have",
    "start": "1230360",
    "end": "1232240"
  },
  {
    "text": "no idea how that sort function is",
    "start": "1232240",
    "end": "1234559"
  },
  {
    "text": "implemented and it might be further up",
    "start": "1234559",
    "end": "1236640"
  },
  {
    "text": "in the page it might be imported from",
    "start": "1236640",
    "end": "1238240"
  },
  {
    "text": "another Library you don't know anything",
    "start": "1238240",
    "end": "1239520"
  },
  {
    "text": "about",
    "start": "1239520",
    "end": "1240760"
  },
  {
    "text": "it here I've actually defined my sort",
    "start": "1240760",
    "end": "1244640"
  },
  {
    "text": "function right there in line and you can",
    "start": "1244640",
    "end": "1246640"
  },
  {
    "text": "see what it is doing right where it's",
    "start": "1246640",
    "end": "1249120"
  },
  {
    "text": "used you can you can have more input",
    "start": "1249120",
    "end": "1251960"
  },
  {
    "text": "parameters but you can only have one",
    "start": "1251960",
    "end": "1255080"
  },
  {
    "text": "single python statement as the function",
    "start": "1255080",
    "end": "1257600"
  },
  {
    "text": "body it can be a complex statement okay",
    "start": "1257600",
    "end": "1261200"
  },
  {
    "text": "of some kind which means you can use",
    "start": "1261200",
    "end": "1263400"
  },
  {
    "text": "logical ands and ERS you can use",
    "start": "1263400",
    "end": "1265400"
  },
  {
    "text": "parentheses you can use some of the",
    "start": "1265400",
    "end": "1267039"
  },
  {
    "text": "tricks we'll talk about today",
    "start": "1267039",
    "end": "1270759"
  }
]