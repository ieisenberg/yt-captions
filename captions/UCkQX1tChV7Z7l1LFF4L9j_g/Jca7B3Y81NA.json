[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "welcome to my talk I'm Josh along the spring developer advocate for spring",
    "start": "11240",
    "end": "16289"
  },
  {
    "text": "source today we're gonna talk about a spring naturally spring 3:1 and I've also got some content related to this",
    "start": "16289",
    "end": "22230"
  },
  {
    "text": "some of the other projects the and ciliary projects besides spring core if you have questions please feel free to",
    "start": "22230",
    "end": "28710"
  },
  {
    "text": "ask as we go it's quite literally small enough that I could go to each one of your laptops and stare of your shoulders",
    "start": "28710",
    "end": "33780"
  },
  {
    "text": "and answer questions that can be good for us I have written some books on",
    "start": "33780",
    "end": "38910"
  },
  {
    "start": "37000",
    "end": "111000"
  },
  {
    "text": "spring not all of them good but I drew I do try here's two of them working on",
    "start": "38910",
    "end": "44579"
  },
  {
    "text": "Cloud Foundry in action for Manning right now and it's actually got a whole bunch of stuff related to the spring projects it's about building spring",
    "start": "44579",
    "end": "51030"
  },
  {
    "text": "applications for the cloud it happens to be tangentially about boundary between",
    "start": "51030",
    "end": "56399"
  },
  {
    "text": "you and me this is just a little secret since there's only a few of us here just a handful I have written five books I'm",
    "start": "56399",
    "end": "62850"
  },
  {
    "text": "working on my fifth book now but I don't know why people buy them that's the secret I'm not sure why they buy them you don't",
    "start": "62850",
    "end": "68909"
  },
  {
    "text": "need to the spring project documentation has always been very very good so if you check out spring sourcefed org there's a",
    "start": "68909",
    "end": "75000"
  },
  {
    "text": "lot of great documentation that's second to none and and in particular that rule",
    "start": "75000",
    "end": "80909"
  },
  {
    "text": "book should go to spring source data agra fort / rue it's free we give it away I got a rally to go open source on",
    "start": "80909",
    "end": "87210"
  },
  {
    "text": "the book so yeah anyway that's me take down that email take that in that",
    "start": "87210",
    "end": "92460"
  },
  {
    "text": "Twitter handle if you have questions complaints comments please feel free to reach out to me after the talk I'm more",
    "start": "92460",
    "end": "98790"
  },
  {
    "text": "than happy to answer questions if you for some reason leave this room more confused than when you came in that's",
    "start": "98790",
    "end": "104369"
  },
  {
    "text": "your recourse right there that email okay I don't be happy to give it you at any point in the presentation so we're here for very",
    "start": "104369",
    "end": "113790"
  },
  {
    "start": "111000",
    "end": "211000"
  },
  {
    "text": "common refrains right we're here for very common reasons which is we're using spring and we're using it to solve",
    "start": "113790",
    "end": "119670"
  },
  {
    "text": "interesting problems and the problems that people typically solve with it are many fold right you've got the",
    "start": "119670",
    "end": "125460"
  },
  {
    "text": "productivity problems and you've got problems that are solved by frameworks and libraries and you've got your",
    "start": "125460",
    "end": "131099"
  },
  {
    "text": "application that sits on top of that but very very salient Lee we have a very",
    "start": "131099",
    "end": "136350"
  },
  {
    "text": "diverse sort of ecosystem of target platforms today right so a lot of people how many of you've been using spring",
    "start": "136350",
    "end": "142500"
  },
  {
    "text": "them in just show of hands how many of you have been using spring for five years okay so you kind of remember I",
    "start": "142500",
    "end": "147900"
  },
  {
    "text": "mean I've been using spring since it came out and I can remember hearing",
    "start": "147900",
    "end": "154400"
  },
  {
    "text": "these ideal sort of discussions about how spring could help it engendered portability in your applications right",
    "start": "154400",
    "end": "161220"
  },
  {
    "text": "and so if you're using spring back in 2003 it meant you could get away from web the web spheres of the world",
    "start": "161220",
    "end": "167010"
  },
  {
    "text": "and get on to lighter more agile more scalable little platforms like Tomcat you know lightweight application servers",
    "start": "167010",
    "end": "173070"
  },
  {
    "text": "well nowadays we're hearing that same sort of migration that Exodus we're",
    "start": "173070",
    "end": "179310"
  },
  {
    "text": "seeing that same sort of thing from application servers in general to more cloudy platforms like like cloud foundry",
    "start": "179310",
    "end": "185490"
  },
  {
    "text": "of course and other as well so the the nature of our applications has changed a lot the architecture has changed a lot",
    "start": "185490",
    "end": "191820"
  },
  {
    "text": "and having a shim underneath your code underneath your application that lets you move portably and cleanly to adapt",
    "start": "191820",
    "end": "199020"
  },
  {
    "text": "to these different types of architectures is more important than ever right because the cloud doesn't look very much like anything that we had",
    "start": "199020",
    "end": "205710"
  },
  {
    "text": "before whereas Tomcat kind of looked like something we had before we've also",
    "start": "205710",
    "end": "210870"
  },
  {
    "text": "got bigger data right how many of you doing something with big data no sequel or not only is equal yeah it's here to",
    "start": "210870",
    "end": "217290"
  },
  {
    "start": "211000",
    "end": "287000"
  },
  {
    "text": "stay we can't ignore it it's something that's gonna be part of what we're doing for the foreseeable future",
    "start": "217290",
    "end": "222390"
  },
  {
    "text": "and for good reason right this is a good problem this is a great problem we have too much data used to be that we",
    "start": "222390",
    "end": "228360"
  },
  {
    "text": "couldn't get enough data right we couldn't have we didn't have enough meaningful insight into the the data of our application the data of our users",
    "start": "228360",
    "end": "234390"
  },
  {
    "text": "the data of our domains nowadays it seems like it's coming out of our pores all we got to do is collect it and",
    "start": "234390",
    "end": "239760"
  },
  {
    "text": "dealing with that efficiently and effectively is a very very big problem pun intended so we have environments",
    "start": "239760",
    "end": "246750"
  },
  {
    "text": "like Redis and MongoDB that are very very popular today we have distributed data caches like Jim how many of using",
    "start": "246750",
    "end": "253770"
  },
  {
    "text": "Jim fire eh cache or coherence or you know something right if there's a",
    "start": "253770",
    "end": "258840"
  },
  {
    "text": "there's caches out there right now designed again to solve these very sorts of problems",
    "start": "258840",
    "end": "264440"
  },
  {
    "text": "and of course in that space there's a speck days are 107 which has been dormant hitherto dormant since the",
    "start": "264510",
    "end": "272270"
  },
  {
    "text": "inception of that jsr like five six years ago and it isn't it is now seeing",
    "start": "272270",
    "end": "278070"
  },
  {
    "text": "a resurgence a new uptake and they're redeveloping it or they're reinvesting energy in developing it and of course",
    "start": "278070",
    "end": "283650"
  },
  {
    "text": "spring will have support for that you know we also have a very wide variety of",
    "start": "283650",
    "end": "288780"
  },
  {
    "start": "287000",
    "end": "373000"
  },
  {
    "text": "clients do you guys remember when the whole world was you know the whole problem that we faced as developers was",
    "start": "288780",
    "end": "294750"
  },
  {
    "text": "making things work on Internet Explorer 6 and Netscape 4 in the desktop browser",
    "start": "294750",
    "end": "300240"
  },
  {
    "text": "and that was it everything else was sort of why would you care you know who cares about some sort of imaginary tablet that",
    "start": "300240",
    "end": "305820"
  },
  {
    "text": "looks like it comes from Star Trek who cares about some sort of smartphone that we hadn't seen yet you know it's just",
    "start": "305820",
    "end": "311490"
  },
  {
    "text": "Internet Explorer 6 and Netscape 4 well things have gotten a lot more painful since then right back I would kill to",
    "start": "311490",
    "end": "317280"
  },
  {
    "text": "have those same problems of just trying to make things work on just those two browsers nowadays you've got to make your application you've got to expose",
    "start": "317280",
    "end": "323610"
  },
  {
    "text": "your application not just to your your web browsers not just your desktop web browsers of which there are at least four right you got Safari Chrome Firefox",
    "start": "323610",
    "end": "330360"
  },
  {
    "text": "and oh yeah Internet Explorer you've also got these portable sort of form",
    "start": "330360",
    "end": "336900"
  },
  {
    "text": "factor devices these small form factor devices like the tablets and the phones and so on and all those have their own",
    "start": "336900",
    "end": "342480"
  },
  {
    "text": "sort of quirks and compatibility problems so we're definitely facing a different landscape when it comes to",
    "start": "342480",
    "end": "347640"
  },
  {
    "text": "delivery of client technologies how many of you just so I know we're not two-step",
    "start": "347640",
    "end": "354600"
  },
  {
    "text": "how many of you are using JSF come on in a minute we all tried it once in college you you guys oh yeah good you know it's",
    "start": "354600",
    "end": "366000"
  },
  {
    "text": "still it's still out there like the dinosaurs you know but eventually some comments gonna come down and we'll see",
    "start": "366000",
    "end": "371690"
  },
  {
    "text": "um so okay this is the sort of the oldest slide I've ever had this is my",
    "start": "371690",
    "end": "377070"
  },
  {
    "start": "373000",
    "end": "522000"
  },
  {
    "text": "favorite slide it's been it's been around this is the new 2010's version of this slide but it's still the same slide",
    "start": "377070",
    "end": "382350"
  },
  {
    "text": "basically I've just happened to have fancy vector gradients now it's been it's evolved like I have you notice that",
    "start": "382350",
    "end": "387900"
  },
  {
    "text": "my belt buckle has adopted with the years this slide has been around since",
    "start": "387900",
    "end": "393600"
  },
  {
    "text": "day one we've had some version of the slide for many years it describes the three pillars on which Spring Framework itself is built right",
    "start": "393600",
    "end": "400110"
  },
  {
    "text": "so we've always said that with these three different things plus good documentation we can provide solutions",
    "start": "400110",
    "end": "407010"
  },
  {
    "text": "and the pillars are very important first of all you have of course dependency injection the Spring Framework itself",
    "start": "407010",
    "end": "413490"
  },
  {
    "text": "provides dependency injection it's a form of information hiding right so at runtime you don't know about the",
    "start": "413490",
    "end": "419220"
  },
  {
    "text": "characteristics of the specific implementation you're using you build code according to certain baseline usually interfaces in Java and that",
    "start": "419220",
    "end": "426900"
  },
  {
    "text": "contract is all that you have to care about you don't care about what implementation you have it run time and",
    "start": "426900",
    "end": "432060"
  },
  {
    "text": "that makes it very easy to move your application from test to production to unit testing to etc right we also try",
    "start": "432060",
    "end": "438570"
  },
  {
    "text": "and provide wherever possible aspect oriented programming aspect oriented programming lets you change the behavior",
    "start": "438570",
    "end": "445290"
  },
  {
    "text": "of objects declaratively without actually touching the code this is very powerful right because we can now apply",
    "start": "445290",
    "end": "451590"
  },
  {
    "text": "services in a generic fashion to all your objects so transaction management is a very common example but logging and",
    "start": "451590",
    "end": "458070"
  },
  {
    "text": "auditing and filtering and things like that right that's very powerful so we make that available and make that a key",
    "start": "458070",
    "end": "464160"
  },
  {
    "text": "part of the framework as well and then finally where we can't solve problems",
    "start": "464160",
    "end": "469380"
  },
  {
    "text": "using regular dependency injection and pojos and where we cannot solve the problem using aspect oriented",
    "start": "469380",
    "end": "474870"
  },
  {
    "text": "programming we provide libraries objects that you have to compile your code against so now you have a dependency on",
    "start": "474870",
    "end": "481110"
  },
  {
    "text": "the Spring Framework but wherever possible we try and make those dependencies as useful as possible right",
    "start": "481110",
    "end": "486750"
  },
  {
    "text": "so if you're going to use them we want them to be the most useful thing you could ever imagine using right at some",
    "start": "486750",
    "end": "492120"
  },
  {
    "text": "point you're gonna have to tie or tie yourself to some sort of API but let it at least be productive let it at least be efficient and then all those things",
    "start": "492120",
    "end": "500160"
  },
  {
    "text": "taking together don't mean anything if there's no good documentation on how to use it if there's no guidance right so",
    "start": "500160",
    "end": "506580"
  },
  {
    "text": "the Spring Framework has been it's always been about good code coupled with good documentation and good",
    "start": "506580",
    "end": "512539"
  },
  {
    "text": "dissemination of information so if you check out spring starter org there's a lot of resources that'll help you get",
    "start": "512539",
    "end": "518969"
  },
  {
    "text": "started right like I said okay so that's sort of the background today we're gonna",
    "start": "518969",
    "end": "525180"
  },
  {
    "start": "522000",
    "end": "536000"
  },
  {
    "text": "talk about spring 3:1 if we have time we'll look at some of the to one stuff and the spring data stuff and spring security but you know I",
    "start": "525180",
    "end": "531240"
  },
  {
    "text": "holy and completely doubt we'll get there we'll try though um how many how",
    "start": "531240",
    "end": "537300"
  },
  {
    "text": "many of you have looked at spring three one so far some of the new bits which version of Springer you guys using two",
    "start": "537300",
    "end": "543420"
  },
  {
    "text": "five two five two oh three oh okay three",
    "start": "543420",
    "end": "551249"
  },
  {
    "text": "oh good so three oh is sort of the that's starting to become the the curve right",
    "start": "551249",
    "end": "556499"
  },
  {
    "text": "it's there's a long cuz a long curve between upgrade iterations so we see a lot of people working on two five and of",
    "start": "556499",
    "end": "563249"
  },
  {
    "text": "course now they're steadily migrating to three oh and three one of course now that three one is out three one was",
    "start": "563249",
    "end": "570660"
  },
  {
    "text": "debut it was released last November after about a year and a half of betas releases so it's a very very well tested",
    "start": "570660",
    "end": "577199"
  },
  {
    "text": "well integrated release and if you have any plans to upgrade just skip three and go to three one because it really is the",
    "start": "577199",
    "end": "583980"
  },
  {
    "text": "conceptually complete iteration it's the one that makes most ends in of itself it it feels whole you know there's a lot of",
    "start": "583980",
    "end": "591149"
  },
  {
    "text": "new features there's environment the environment abstraction and profiles of course Java based configuration which got a major overhaul in this release the",
    "start": "591149",
    "end": "600179"
  },
  {
    "text": "test framework itself has been adopted to support the Java based configuration and the environment abstraction we've",
    "start": "600179",
    "end": "606360"
  },
  {
    "text": "introduced a cache abstraction which is one of my personal little favorite features we've introduced partial not",
    "start": "606360",
    "end": "612209"
  },
  {
    "text": "done yet but we're still working on it we've been Drew's partial support for servlet three the support that will mean",
    "start": "612209",
    "end": "617549"
  },
  {
    "text": "the most for most people anyway we've introduced that we've upgraded the spring MVC engine to support new",
    "start": "617549",
    "end": "623759"
  },
  {
    "text": "features we added support for JPA and hibernate for and corpse 2.0 and Java 7",
    "start": "623759",
    "end": "628949"
  },
  {
    "text": "so Java 7 actually debuted last July I think you guys might remember and of",
    "start": "628949",
    "end": "634619"
  },
  {
    "text": "course spring was released a few months after that so it was one of the first enterprise it was the first enterprise technology that was available that had",
    "start": "634619",
    "end": "641429"
  },
  {
    "text": "support where appropriate for Java and Java 7 specific features this is not to say that you need Java 7 to use spring 3",
    "start": "641429",
    "end": "648990"
  },
  {
    "text": "1 it's just that if it's available at runtime we detect that and they can take advantage of it for for things like the",
    "start": "648990",
    "end": "654509"
  },
  {
    "text": "thread pools okay so as we go through this I'm gonna",
    "start": "654509",
    "end": "660350"
  },
  {
    "start": "658000",
    "end": "722000"
  },
  {
    "text": "work in terms of a little application I built I hesitate to introduce it now but just so we have a common background this",
    "start": "660350",
    "end": "668000"
  },
  {
    "text": "is my little spring 3:1 application I built it on it's got a whole bunch of little features including some of the",
    "start": "668000",
    "end": "673490"
  },
  {
    "text": "stuff we're gonna talk about here today you can get it at github comm ford slash cloud foundry - samples and it's the",
    "start": "673490",
    "end": "679820"
  },
  {
    "text": "spring MVC hibernate template basically it's just a simple application I started it up but I didn't have a time",
    "start": "679820",
    "end": "687440"
  },
  {
    "text": "to test it so cross your fingers demo",
    "start": "687440",
    "end": "692930"
  },
  {
    "text": "fail that's okay good we need to spring ABC 3-1 good ah so",
    "start": "692930",
    "end": "708500"
  },
  {
    "text": "there's that good okay the application itself is not all that interesting but",
    "start": "708500",
    "end": "714440"
  },
  {
    "text": "you can see it's a very sort of generic database centric application we'll go",
    "start": "714440",
    "end": "721700"
  },
  {
    "text": "through the code though so first things first the environment abstraction this is one of those things that was introduced inside of spring 3:1 it is",
    "start": "721700",
    "end": "727760"
  },
  {
    "start": "722000",
    "end": "848000"
  },
  {
    "text": "basically a way to ask in a programmatic way the spring container for information",
    "start": "727760",
    "end": "734510"
  },
  {
    "text": "about the environment in which your application is running so you can ask you're gonna say okay you know I need",
    "start": "734510",
    "end": "741589"
  },
  {
    "text": "property files how many of you use the property placeholder resolution mechanism inside of the Spring Framework right you can parameterize your",
    "start": "741589",
    "end": "747950"
  },
  {
    "text": "configuration based on property files previously people have wanted to do things like well you know how can I make",
    "start": "747950",
    "end": "754400"
  },
  {
    "text": "that property resolved to dev random you know I want entropy application I don't want this to be predictable or I want",
    "start": "754400",
    "end": "760339"
  },
  {
    "text": "this to come out of J&I or you know I've got a I've got a rat going crazy in the back lab and he needs to whatever he",
    "start": "760339",
    "end": "766370"
  },
  {
    "text": "runs I want a new password changed you know or something I don't know so having that plug ability SPI is very important",
    "start": "766370",
    "end": "771550"
  },
  {
    "text": "and that is facilitated through this new environment spi these these abstractions",
    "start": "771550",
    "end": "777260"
  },
  {
    "text": "right the idea is that you have these beans you might have one set of beans we you know you might have one to the beans",
    "start": "777260",
    "end": "783740"
  },
  {
    "text": "that's used in production another set of being that's used in test I mean if you guys have created different types of",
    "start": "783740",
    "end": "790230"
  },
  {
    "text": "being groupings different config files and then you switched out the files based on the environment you're in right very common sort of idiom very common",
    "start": "790230",
    "end": "797760"
  },
  {
    "text": "sort of practice and this feature codifies that right it makes it a",
    "start": "797760",
    "end": "802910"
  },
  {
    "text": "first-class citizen inside the spring framework it at practice it just means",
    "start": "802910",
    "end": "813210"
  },
  {
    "text": "that you have an object called the environment object that you can inject right and you can ask that object",
    "start": "813210",
    "end": "819390"
  },
  {
    "text": "questions like I need a property and I want that property resolved against some sort of custom property SBI property",
    "start": "819390",
    "end": "825540"
  },
  {
    "text": "resolution SPI that's the property resolver interface so if you plug that",
    "start": "825540",
    "end": "830940"
  },
  {
    "text": "in you can control how properties themselves are resolved and it also means you can ask what profile is my",
    "start": "830940",
    "end": "838470"
  },
  {
    "text": "spring context running in am i running in tests am i running in production am i running in dev you know you can ask",
    "start": "838470",
    "end": "843960"
  },
  {
    "text": "questions about that through that environment object using the definitions",
    "start": "843960",
    "end": "850380"
  },
  {
    "start": "848000",
    "end": "975000"
  },
  {
    "text": "the profiles themselves looks kind of like this right this is what it looks like in the XML normally you have a an",
    "start": "850380",
    "end": "856770"
  },
  {
    "text": "XML document and then at the top you'll have a beans element and then below that you'll have beans individual bean",
    "start": "856770",
    "end": "863040"
  },
  {
    "text": "definitions with this new profile support you can actually nest beans declarations inside of your your",
    "start": "863040",
    "end": "870150"
  },
  {
    "text": "outermost beans tag so these are actually nested you can imagine one more beans tag at the top of the document and",
    "start": "870150",
    "end": "876240"
  },
  {
    "text": "one more at the bottom wrapping these two different chunks the beans that are inside of the beans declaration are",
    "start": "876240",
    "end": "883080"
  },
  {
    "text": "grouped together inside of a profile so they are only active if that profile is",
    "start": "883080",
    "end": "888450"
  },
  {
    "text": "active right so you have to say do you have to tell spring somehow that I want all the beans that are in my production",
    "start": "888450",
    "end": "894030"
  },
  {
    "text": "profile to be active otherwise it's as though you didn't register the beans at all right they're there they're hidden",
    "start": "894030",
    "end": "900840"
  },
  {
    "text": "they're transparent to the Container questions on that okay so you can see",
    "start": "900840",
    "end": "907410"
  },
  {
    "text": "here we've got a production profile and an embedded profile in production we've got a proper data source pointing to",
    "start": "907410",
    "end": "913110"
  },
  {
    "text": "some sort of resource that we've got configured using property placeholder properties and then for our embedded",
    "start": "913110",
    "end": "919290"
  },
  {
    "text": "integration tests or unit sorry unit test scenario we've got a little in-memory embedded database that we spin up in",
    "start": "919290",
    "end": "925370"
  },
  {
    "text": "tests against right so all you got to do when you move this application is switch which profile is active and then the",
    "start": "925370",
    "end": "931610"
  },
  {
    "text": "different data source is alive notice that both beans both data sources produce an object of type datasource",
    "start": "931610",
    "end": "938870"
  },
  {
    "text": "javac steps equal that data sources yeah well gets it so the question is how do you trigger the profile and we'll look",
    "start": "938870",
    "end": "944660"
  },
  {
    "text": "at that in just a second there's a few different ways you know the result is",
    "start": "944660",
    "end": "950750"
  },
  {
    "text": "that you have two different beans that both produce the type of javac subsequent data source just like with regular spring if you created two beans",
    "start": "950750",
    "end": "956839"
  },
  {
    "text": "of the same type and gave them both the same ID and you activated both profiles you would get a conflict right you can't",
    "start": "956839",
    "end": "963410"
  },
  {
    "text": "have two beans of the same type an ID in spring in regular spring it's it's also true if you activate both profiles at",
    "start": "963410",
    "end": "968990"
  },
  {
    "text": "the same time you'll get a conflict so be wary there is analogous support for",
    "start": "968990",
    "end": "978380"
  },
  {
    "start": "975000",
    "end": "1004000"
  },
  {
    "text": "profiles using the annotations right in the Java configuration so you can use the add profile annotation on Java",
    "start": "978380",
    "end": "985279"
  },
  {
    "text": "configuration classes we'll look at that in a second and you can use that also on individual beans that you annotate this type this",
    "start": "985279",
    "end": "991490"
  },
  {
    "text": "approach is probably I wouldn't do that I wouldn't I wouldn't use the profile beans on individual beat on individual",
    "start": "991490",
    "end": "998240"
  },
  {
    "text": "components right better to keep that inside the configuration but we'll look at it anyway there's a couple of",
    "start": "998240",
    "end": "1004870"
  },
  {
    "text": "supported out-of-the-box idioms for activating profiles generically you can set a system property so dDOT's bring",
    "start": "1004870",
    "end": "1012040"
  },
  {
    "text": "that profiles that active equals and then a comment delimited list of the profiles that you want to enable so",
    "start": "1012040",
    "end": "1017320"
  },
  {
    "text": "production comma you know my data center one or whatever I mean you can set up",
    "start": "1017320",
    "end": "1022390"
  },
  {
    "text": "you can set up whatever you want this is one way to do it it's a convenience the",
    "start": "1022390",
    "end": "1027610"
  },
  {
    "text": "right way to do it is actually to get a reference to the application context a pointer to that application context and",
    "start": "1027610",
    "end": "1033730"
  },
  {
    "text": "then from there you can get a reference to the environment and then set the active profile programmatically so if you have some sort of decision that",
    "start": "1033730",
    "end": "1040418"
  },
  {
    "text": "needs to be made before you can activate a profile you can make that decision no problem and in fact in a web environment",
    "start": "1040419",
    "end": "1046110"
  },
  {
    "text": "where you don't have you know in a web environment spring boots itself up as part of the servlet as part as part of",
    "start": "1046110",
    "end": "1052150"
  },
  {
    "text": "the dispatcher servlet initialization in that environment you actually have a callback class they get to run right before the",
    "start": "1052150",
    "end": "1059410"
  },
  {
    "text": "application context is you know brought into life and in that in that scenario",
    "start": "1059410",
    "end": "1064510"
  },
  {
    "text": "you can actually write your programmatic logic for activating certain profiles and so on before the container starts",
    "start": "1064510",
    "end": "1070360"
  },
  {
    "text": "registering beans let's see okay so we",
    "start": "1070360",
    "end": "1076990"
  },
  {
    "text": "saw that let's see let's go through the Java based configuration and then we'll",
    "start": "1076990",
    "end": "1082000"
  },
  {
    "start": "1077000",
    "end": "1085000"
  },
  {
    "text": "look at both of these examples I mean you guys some of you said you're using",
    "start": "1082000",
    "end": "1087730"
  },
  {
    "start": "1085000",
    "end": "1150000"
  },
  {
    "text": "spring three oh okay spring trio debuted Java based configuration Java based configuration",
    "start": "1087730",
    "end": "1094780"
  },
  {
    "text": "itself is something that a lot we've had support for in in a separate project called Spring Java config and that was",
    "start": "1094780",
    "end": "1102250"
  },
  {
    "text": "available as a standalone project for many many years now it's available baked into the core of the framework right the",
    "start": "1102250",
    "end": "1108460"
  },
  {
    "text": "idea is that you have XML for defining beans and then before we've had support for scattering annotations on your",
    "start": "1108460",
    "end": "1114820"
  },
  {
    "text": "different classes to have spring collect sweep up the beans and then register them for you right but there was kind of",
    "start": "1114820",
    "end": "1122080"
  },
  {
    "text": "a space there still for one other solution right a something that had the",
    "start": "1122080",
    "end": "1127630"
  },
  {
    "text": "best of both worlds you wanted the static type safety of the Java and annotations but you also wanted the",
    "start": "1127630",
    "end": "1132640"
  },
  {
    "text": "single resource that you could consult to see the world view of your all your beans right so Java configuration feels",
    "start": "1132640",
    "end": "1138970"
  },
  {
    "text": "that niche it provides the ability to define all the beans in your in your application in one place using Java we",
    "start": "1138970",
    "end": "1149710"
  },
  {
    "text": "have in three one introduced support for things that you could do before using",
    "start": "1149710",
    "end": "1155230"
  },
  {
    "text": "xml namespace declarations right so for example in spring 3 oh and before if you",
    "start": "1155230",
    "end": "1160750"
  },
  {
    "text": "wanted to turn on transaction management it's as simple as saying TX colon annotation - driven in the XML right one",
    "start": "1160750",
    "end": "1167230"
  },
  {
    "text": "little line turns on the feature spring has always been you have to opt in you",
    "start": "1167230",
    "end": "1172299"
  },
  {
    "text": "have to say I want this service I want this behavior we don't we don't make a lot of assumptions about how you want your beans to behave at runtime so we",
    "start": "1172299",
    "end": "1179559"
  },
  {
    "text": "have all these great little features that are one mine away when you turn them on they apply to the beans that are",
    "start": "1179559",
    "end": "1185110"
  },
  {
    "text": "in your application context where appropriate you know and they provide a lot of features a lot of functionality",
    "start": "1185110",
    "end": "1190419"
  },
  {
    "text": "but you still have to turn them on so one thing that was kind of missing from our original support for Java configuration was an",
    "start": "1190419",
    "end": "1197410"
  },
  {
    "text": "annotation Java centric way of turning on these features right once you've turned them on they're very easy to use",
    "start": "1197410",
    "end": "1203440"
  },
  {
    "text": "they're just declarative you know the lamentation based things let's see so",
    "start": "1203440",
    "end": "1209380"
  },
  {
    "text": "we've done that we've provided these little you know switches these little enabling annotations for lots of the",
    "start": "1209380",
    "end": "1215620"
  },
  {
    "text": "things that you would have used XML before before like transaction management and scheduling in the spring MVC container and so on so here's an",
    "start": "1215620",
    "end": "1223510"
  },
  {
    "text": "example of a Java configuration class this is a sort of you know very",
    "start": "1223510",
    "end": "1229690"
  },
  {
    "start": "1224000",
    "end": "1527000"
  },
  {
    "text": "interesting very plain sort of the configuration class the first thing to notice is that it's a regular Java class",
    "start": "1229690",
    "end": "1234760"
  },
  {
    "text": "that has at configuration at the top and configuration is a special type of",
    "start": "1234760",
    "end": "1239800"
  },
  {
    "text": "component by this for the Spring Framework right when spring sees add configuration on the class it treats",
    "start": "1239800",
    "end": "1245890"
  },
  {
    "text": "that like a an artifact from which it can draw information about your beans remember according to spring all your",
    "start": "1245890",
    "end": "1252940"
  },
  {
    "text": "beans are the same thing at the same at the end of the day when all your beans are managed by the spring container doesn't matter how they got in there",
    "start": "1252940",
    "end": "1258820"
  },
  {
    "text": "right it doesn't matter if you used annotations on your component classes it doesn't matter if you used XML or the groovy bean builder or or or namespaces",
    "start": "1258820",
    "end": "1266680"
  },
  {
    "text": "or anything or Java config right they all end up in the same big bag of beans at runtime so this is just one more way",
    "start": "1266680",
    "end": "1273730"
  },
  {
    "text": "of telling spring about which objects you want it to manage right so we have a configuration class this is the Java",
    "start": "1273730",
    "end": "1280750"
  },
  {
    "text": "version of an XML file right this is not a business class itself this is configuration when when spring sees the",
    "start": "1280750",
    "end": "1287410"
  },
  {
    "text": "add configuration annotation it'll sift through the class it'll create the class and then sift through it looking for all",
    "start": "1287410",
    "end": "1293950"
  },
  {
    "text": "the methods that have at bean on it when it sees at bean it's going to invoke the",
    "start": "1293950",
    "end": "1299020"
  },
  {
    "text": "method and then create that bean for you know get the reason we get the return object and then store that in the",
    "start": "1299020",
    "end": "1304960"
  },
  {
    "text": "context just like if you had done a bean bean declaration in the XML so in this",
    "start": "1304960",
    "end": "1310630"
  },
  {
    "text": "case we have at bean public platform transaction manager TX manager the ID of",
    "start": "1310630",
    "end": "1316390"
  },
  {
    "text": "the bean in this case is TX manager it's the name of the method the type of the bean in this case the class is platform",
    "start": "1316390",
    "end": "1323110"
  },
  {
    "text": "transaction manager which spring can get at one time based on the return value of the method and you can see that because",
    "start": "1323110",
    "end": "1330049"
  },
  {
    "text": "it's just a regular method you can do whatever you want to set it up there's no you know you're no longer beholden to",
    "start": "1330049",
    "end": "1335380"
  },
  {
    "text": "rules about you know one you have to have a no argument constructor for example you know that stuff you can do",
    "start": "1335380",
    "end": "1341929"
  },
  {
    "text": "whatever you want you can initialize the mean however you need to so you have the ability to use the full power of the Java language inside these methods",
    "start": "1341929",
    "end": "1347720"
  },
  {
    "text": "construct the object however you want and then return that and have spring manage that with the same guarantees it",
    "start": "1347720",
    "end": "1353270"
  },
  {
    "text": "would give any bean that you registered in the XML you can see here also we have",
    "start": "1353270",
    "end": "1359120"
  },
  {
    "text": "interdependence between beans right we've got the platform transaction measure the platform transaction manager",
    "start": "1359120",
    "end": "1365540"
  },
  {
    "text": "itself depends on the hibernate sorry on the session factory right so the session",
    "start": "1365540",
    "end": "1370820"
  },
  {
    "text": "factory is a a bean that we would specify as a reference in the XML right can you imagine that a bean you've got a",
    "start": "1370820",
    "end": "1376490"
  },
  {
    "text": "property and then it says ref and it references the ID of some of the bean in this case and to do the same thing we",
    "start": "1376490",
    "end": "1383000"
  },
  {
    "text": "just call the method call a method that creates the other bean and spring will automatically intercept that call cache",
    "start": "1383000",
    "end": "1390980"
  },
  {
    "text": "the result and then configure it and then return that value once it's been",
    "start": "1390980",
    "end": "1396590"
  },
  {
    "text": "run through the lifecycle promises of the of the container so you have the same semantics as if you were using the",
    "start": "1396590",
    "end": "1402380"
  },
  {
    "text": "XML if you call that if you call session factory a hundred times you still just",
    "start": "1402380",
    "end": "1407630"
  },
  {
    "text": "get the same object it doesn't get recreated a hundred times it's just the same cached object that has been given",
    "start": "1407630",
    "end": "1412910"
  },
  {
    "text": "all the lifecycle callbacks and everything right with me on this okay",
    "start": "1412910",
    "end": "1420130"
  },
  {
    "text": "let's see the other thing we've done is that we've wherever possible we've introduced cleaner ways of building",
    "start": "1420130",
    "end": "1426770"
  },
  {
    "text": "complex objects right and the spring container we've historically used factory beans factory beans are a way of",
    "start": "1426770",
    "end": "1433240"
  },
  {
    "text": "codifying how to create objects we've hidden you know we've hidden the recipe",
    "start": "1433240",
    "end": "1439490"
  },
  {
    "text": "for creating a complex object inside of a factory bean that's the value of that pattern well now that you're using Java and",
    "start": "1439490",
    "end": "1447500"
  },
  {
    "text": "using just Java config sometimes it's easier to use more elegant more succinct",
    "start": "1447500",
    "end": "1453049"
  },
  {
    "text": "approaches like the Builder pattern so here we have a local session factory builder which you can chain together and then in",
    "start": "1453049",
    "end": "1459690"
  },
  {
    "text": "one line build yourself a hibernate session factory right so we provide those objects where we're",
    "start": "1459690",
    "end": "1465390"
  },
  {
    "text": "appropriate you know the other thing to notice and this is the thing that has",
    "start": "1465390",
    "end": "1470580"
  },
  {
    "text": "changed since the introduction of 3oh is we've added these annotations to enable some of those features I was talking",
    "start": "1470580",
    "end": "1476490"
  },
  {
    "text": "about so in this case I want all the beans in my spring configuration class to have transaction management applied",
    "start": "1476490",
    "end": "1483480"
  },
  {
    "text": "to it right so I've added at enable transaction management on the",
    "start": "1483480",
    "end": "1488520"
  },
  {
    "text": "configuration class that annotation turns on transaction management for all",
    "start": "1488520",
    "end": "1493620"
  },
  {
    "text": "the other beans and making my context this is the same as if I was using TX : annotation driven in the XML right so",
    "start": "1493620",
    "end": "1500940"
  },
  {
    "text": "you can see here I wouldn't need the XML at all you'll also note that in this",
    "start": "1500940",
    "end": "1506490"
  },
  {
    "text": "case we don't have to specify a transaction manager attribute or an attitude you know an option for the",
    "start": "1506490",
    "end": "1512760"
  },
  {
    "text": "annotation because this type safe so at runtime we can just pick the platform transaction manager out of the defined",
    "start": "1512760",
    "end": "1519330"
  },
  {
    "text": "beans right you don't need the annotation you don't need to specify it directly another big feature another",
    "start": "1519330",
    "end": "1528120"
  },
  {
    "start": "1527000",
    "end": "1614000"
  },
  {
    "text": "thing that's got another kind of an upgrade is the test support so we introduced contexts we introduced",
    "start": "1528120",
    "end": "1534450"
  },
  {
    "text": "profiles and that's only only useful if you can now test it right so the next",
    "start": "1534450",
    "end": "1539670"
  },
  {
    "text": "thing is ok when I'm running my unit test I want to be able to specify which profile is active when I run my tests so",
    "start": "1539670",
    "end": "1546929"
  },
  {
    "text": "that the write beans are active during my tests so here I have an annotation I have at active profiles on my unit test",
    "start": "1546929",
    "end": "1553320"
  },
  {
    "text": "this is just the standard spring test framework right there's test running framework that we've had since 2-5 where",
    "start": "1553320",
    "end": "1560130"
  },
  {
    "text": "you specify the context configuration and you specify what kind of test runner",
    "start": "1560130",
    "end": "1565740"
  },
  {
    "text": "you would like right so you can this is a spring mechanism that works for both test ng and for JN and for you're",
    "start": "1565740",
    "end": "1572820"
  },
  {
    "text": "specifying that you want a certain type of application context in this case we want an annotation application context",
    "start": "1572820",
    "end": "1580260"
  },
  {
    "text": "and we're specifying that the application context should look at these configuration classes instead of an XML",
    "start": "1580260",
    "end": "1586410"
  },
  {
    "text": "file we're saying look at these Java config classes right and then at the bottom we're saying I want this profile to be active",
    "start": "1586410",
    "end": "1593659"
  },
  {
    "text": "right so the beans that are defined inside those configuration classes only if they have an ad profile on them that",
    "start": "1593659",
    "end": "1600830"
  },
  {
    "text": "says dev or if they have no profile annotation on them at all that's filling",
    "start": "1600830",
    "end": "1605929"
  },
  {
    "text": "it those lonely beans that'll be active questions on that one okay let's so",
    "start": "1605929",
    "end": "1613759"
  },
  {
    "text": "let's actually see what that looks like in practice here we've covered it quite a few things already can you guys see",
    "start": "1613759",
    "end": "1622309"
  },
  {
    "text": "this in the back yeah no no this is an",
    "start": "1622309",
    "end": "1633379"
  },
  {
    "text": "addition too so you can still use XML that's not going anywhere it's very much a very good idea to use if you want to absolutely and you know",
    "start": "1633379",
    "end": "1641869"
  },
  {
    "text": "the ideas that it's just a strategy right it's just one more way of solving the problem based on your tastes so if you want to use the classpath xml",
    "start": "1641869",
    "end": "1648409"
  },
  {
    "text": "application context and you want to specify an XML file as the argument for that class Pathak's of my application",
    "start": "1648409",
    "end": "1654080"
  },
  {
    "text": "context more power to you man awesome rock on you know we just happen to have other ways of doing it now so you have",
    "start": "1654080",
    "end": "1660110"
  },
  {
    "text": "an annotation config application context that takes as its inputs Java classes",
    "start": "1660110",
    "end": "1665289"
  },
  {
    "text": "and those Java classes are annotated with that configuration like we saw so it's just one more way of telling spring",
    "start": "1665289",
    "end": "1671210"
  },
  {
    "text": "the metadata that it needs to be able to do the things that it does for you right one more input let's see so so here's a",
    "start": "1671210",
    "end": "1685220"
  },
  {
    "text": "couple here's a simple actually kind of a simple application the idea is that this is an application that has a data",
    "start": "1685220",
    "end": "1690289"
  },
  {
    "text": "source there we go it's got the same sort of it's got the",
    "start": "1690289",
    "end": "1697429"
  },
  {
    "text": "same sort of things you'd think you'd expect most applications to have right I have a data source I have a definition",
    "start": "1697429",
    "end": "1702799"
  },
  {
    "text": "that needs a data source I'm trying to build a platform transaction manager which manages transaction management in",
    "start": "1702799",
    "end": "1708230"
  },
  {
    "text": "spring it's a it's the feature that lets you write code in a transactional way",
    "start": "1708230",
    "end": "1714549"
  },
  {
    "text": "agnostic of the underlying transactional resource so if you're using hibernate or JTA or JPA or JDO or",
    "start": "1714549",
    "end": "1722210"
  },
  {
    "text": "you know regular JDBC it's all wrapped up by the platform transaction manager SPI right you just specify the right",
    "start": "1722210",
    "end": "1728690"
  },
  {
    "text": "type and then in your code you can just say add transactional add transactional on the methods and they get",
    "start": "1728690",
    "end": "1733970"
  },
  {
    "text": "automatically they automatically delegate to the correct instance of the platform transaction manager configured",
    "start": "1733970",
    "end": "1739490"
  },
  {
    "text": "in your context common thing just reiterating it for now the hibernate",
    "start": "1739490",
    "end": "1745070"
  },
  {
    "text": "transaction management needs a pointer to a session factory so you can see I'm using Java config here when I call this",
    "start": "1745070",
    "end": "1750650"
  },
  {
    "text": "guy session factory it calls this method over here and then here I'm building a",
    "start": "1750650",
    "end": "1756460"
  },
  {
    "text": "map for properties and I'm then I'm building a local session factory builder and passing in the datasource adding my",
    "start": "1756460",
    "end": "1762640"
  },
  {
    "text": "annotated hibernate you know JPA classes and then building the session factor itself right you can see here I've got",
    "start": "1762640",
    "end": "1770870"
  },
  {
    "text": "an injected reference to another class a type data source configuration right so",
    "start": "1770870",
    "end": "1777740"
  },
  {
    "text": "now that I have this ability to use Java I might as well take advantage of some of the flexibility that it gives me right like object orientation and in",
    "start": "1777740",
    "end": "1785180"
  },
  {
    "text": "hierarchies and you know etc so here I've got an interface and the interface",
    "start": "1785180",
    "end": "1791050"
  },
  {
    "text": "defines methods that have the objects that I need in my application because I",
    "start": "1791050",
    "end": "1796460"
  },
  {
    "text": "intend to run this application in different environments I need to have that extracted out right so I know that",
    "start": "1796460",
    "end": "1802130"
  },
  {
    "text": "I need a working definition for a cache manager I know that I need a working definition for a data source and I know",
    "start": "1802130",
    "end": "1807560"
  },
  {
    "text": "that I need certain hibernate specific properties based on the kind of environment I'm running in so I've",
    "start": "1807560",
    "end": "1813320"
  },
  {
    "text": "extracted that responsibility out into this little interface and I've created a couple of different implementations of",
    "start": "1813320",
    "end": "1818750"
  },
  {
    "text": "the interface right so here's my local data source implementation based on a",
    "start": "1818750",
    "end": "1824920"
  },
  {
    "text": "profile right so it's got at profile local and it implements data source configuration and it provides a data",
    "start": "1824920",
    "end": "1831680"
  },
  {
    "text": "source right here using an embedded database and it provides a local cache manager using you know using a regular",
    "start": "1831680",
    "end": "1838340"
  },
  {
    "text": "cache we'll just look at that in a minute in memory cache and I've got my little hibernate property is set here to",
    "start": "1838340",
    "end": "1845120"
  },
  {
    "text": "set up the database and so on so that that is one version of this interface again I'm just I'm just declaring a",
    "start": "1845120",
    "end": "1851900"
  },
  {
    "text": "dependency on that interface it's a configuration class expect one of the implementations to be",
    "start": "1851900",
    "end": "1857360"
  },
  {
    "text": "active I can specify one for development one for production etc here's the cloudy",
    "start": "1857360",
    "end": "1863660"
  },
  {
    "text": "version in that same interface so again at configuration class but the profiles",
    "start": "1863660",
    "end": "1868820"
  },
  {
    "text": "now cloud and I've specified another I specified another type of data source",
    "start": "1868820",
    "end": "1873890"
  },
  {
    "text": "but this time I'm looking at my data source from there's the Cloud Foundry context I'm actually dynamically",
    "start": "1873890",
    "end": "1880220"
  },
  {
    "text": "creating the data source itself instead of creating an in-memory data source I'm looking it up from some sort of external resource you might look up the data",
    "start": "1880220",
    "end": "1887090"
  },
  {
    "text": "source from Jane di in production you might look at it from some other place that's managed you know I also need a",
    "start": "1887090",
    "end": "1893630"
  },
  {
    "text": "more heavy-duty cache manager so here I'm actually relying on Redis this code will only run on a cloud right it's not",
    "start": "1893630",
    "end": "1900320"
  },
  {
    "text": "gonna run locally whoops or at all if I need that there and I've changed the properties here right so",
    "start": "1900320",
    "end": "1906980"
  },
  {
    "text": "again at runtime based on the active profile only one implementation this",
    "start": "1906980",
    "end": "1912350"
  },
  {
    "text": "interface is going to be available and it'll be injected into my services configuration and then from there I can",
    "start": "1912350",
    "end": "1919760"
  },
  {
    "text": "call data source configuration dot contributed session factory properties I can call data source configuration data",
    "start": "1919760",
    "end": "1926690"
  },
  {
    "text": "source and I can call oh well that's it",
    "start": "1926690",
    "end": "1931700"
  },
  {
    "text": "and then and then the other thing it does that contribute to cache manager to the context so you have all these beans defined conditionally based on the",
    "start": "1931700",
    "end": "1938510"
  },
  {
    "text": "active profile because I'm relying on certain declarative services like transaction management and like caching",
    "start": "1938510",
    "end": "1945350"
  },
  {
    "text": "I've got at enable caching and an act enabled transaction management that turns on these features for the beans in",
    "start": "1945350",
    "end": "1951680"
  },
  {
    "text": "my configuration right ok questions on",
    "start": "1951680",
    "end": "1959390"
  },
  {
    "start": "1959000",
    "end": "2039000"
  },
  {
    "text": "that one Kristen's on any of that stuff ok a new feature that we have in the",
    "start": "1959390",
    "end": "1967520"
  },
  {
    "text": "spring 3 one and this one this one is you know probably the least interesting",
    "start": "1967520",
    "end": "1974480"
  },
  {
    "text": "feature ever I mean you guys might like it it's pretty cool it's nice it's just so small and adorable but I give it a",
    "start": "1974480",
    "end": "1982160"
  },
  {
    "text": "slide anyway cuz it's awesome the idea is that you have you've had historically this P colon namespace",
    "start": "1982160",
    "end": "1988290"
  },
  {
    "text": "this P : property namespace and how many of you have used that by the way the P",
    "start": "1988290",
    "end": "1993570"
  },
  {
    "text": "namespace if you write your typical beam definitions in spring you have to say beam class equals whatever and then you",
    "start": "1993570",
    "end": "1999420"
  },
  {
    "text": "say ID equals you know foo and then you have property and then name equals you",
    "start": "1999420",
    "end": "2004940"
  },
  {
    "text": "know age and then value equals whatever and then property equals whatever and then it's a trend so you have these stanzas of property elements underneath",
    "start": "2004940",
    "end": "2012380"
  },
  {
    "text": "each beam tag well if we're honest with ourselves that could be more succinctly",
    "start": "2012380",
    "end": "2017570"
  },
  {
    "text": "written as one element with attributes instead of inner elements right so",
    "start": "2017570",
    "end": "2023420"
  },
  {
    "text": "instead of saying being and then property property property you can just say beam and then P : age and P : name",
    "start": "2023420",
    "end": "2031550"
  },
  {
    "text": "etc and you just P : name equals and then you said the value of the of the property that's good for properties and",
    "start": "2031550",
    "end": "2038510"
  },
  {
    "text": "you know a lot of people have used it it's very elegant but there has been a a",
    "start": "2038510",
    "end": "2043570"
  },
  {
    "start": "2039000",
    "end": "2104000"
  },
  {
    "text": "clamoring people have cried murder they want something bigger and better for",
    "start": "2043570",
    "end": "2048980"
  },
  {
    "text": "constructors and who can blame them so with 3-1 we debuted the constructor",
    "start": "2048980",
    "end": "2055970"
  },
  {
    "text": "namespace the constructor namespace provides the constructor support for what the P namespace didn't inside of",
    "start": "2055970",
    "end": "2062780"
  },
  {
    "text": "previous releases right so now if you have a constructor and you want a way of using that constructor inline inside",
    "start": "2062780",
    "end": "2070639"
  },
  {
    "text": "your beam definitions inside the definitions in your XML you can just use the C namespace write a small note this",
    "start": "2070640",
    "end": "2078560"
  },
  {
    "text": "feature requires that your code be turned on with debugging symbols activate it right which most the time it",
    "start": "2078560",
    "end": "2084379"
  },
  {
    "text": "is going to be anyway but you know just a note okay so finally okay so the cash",
    "start": "2084380",
    "end": "2091909"
  },
  {
    "text": "abstraction this is one of my personal favorite features it's got so much applicable application and a lot of",
    "start": "2091910",
    "end": "2098780"
  },
  {
    "text": "people are doing today that it wouldn't surprise me if it's one of your favorite features as well as we talked about",
    "start": "2098780",
    "end": "2105140"
  },
  {
    "start": "2104000",
    "end": "2203000"
  },
  {
    "text": "earlier whenever we can we try and provide useful abstractions on top of otherwise sort of disparate technology",
    "start": "2105140",
    "end": "2112340"
  },
  {
    "text": "surface areas right so for example transaction management is one of those places where spring provides an immense value by unifying the api's and",
    "start": "2112340",
    "end": "2119960"
  },
  {
    "text": "providing a common facilitating abstract right another one is cashing right how",
    "start": "2119960",
    "end": "2125540"
  },
  {
    "text": "many of you've got some sort of pattern in your code where you do some sort of expensive computation check a resource",
    "start": "2125540",
    "end": "2131270"
  },
  {
    "text": "if the value comes back then you stick it in the cache and then check that cache and all subsequent lookups for",
    "start": "2131270",
    "end": "2138020"
  },
  {
    "text": "that same method right it's a very common ATM we've I'm sure done the the dance is only in different times in our",
    "start": "2138020",
    "end": "2144590"
  },
  {
    "text": "code but the thing of it is that's a very common idiom there's no reason you",
    "start": "2144590",
    "end": "2151250"
  },
  {
    "text": "should have to rewrite it each time just like you shouldn't have to rewrite transaction management it's something that a lot of us are going to do many",
    "start": "2151250",
    "end": "2157250"
  },
  {
    "text": "many times per application it's something that is also imminently suited to aspect oriented programming you know",
    "start": "2157250",
    "end": "2164510"
  },
  {
    "text": "it can be extracted out as an aspect and then applied across all your objects you know in a one quick one clean stroke",
    "start": "2164510",
    "end": "2171410"
  },
  {
    "text": "right so the cache manager API and the cache abstraction provide that ability the idea is that you have the cache",
    "start": "2171410",
    "end": "2178190"
  },
  {
    "text": "manager implementations and those abstract away knowledge about backing caches like gem fire like Redis like",
    "start": "2178190",
    "end": "2185090"
  },
  {
    "text": "coherence like you know eh cache etc and then you have the cache objects which",
    "start": "2185090",
    "end": "2190760"
  },
  {
    "text": "you can also get references to right and the cache objects are they represent individual regions in which objects live",
    "start": "2190760",
    "end": "2196850"
  },
  {
    "text": "inside the cache as I mentioned earlier",
    "start": "2196850",
    "end": "2202460"
  },
  {
    "text": "this this is increasingly important nowadays because we're seeing caches being made available as a very common",
    "start": "2202460",
    "end": "2208010"
  },
  {
    "start": "2203000",
    "end": "2360000"
  },
  {
    "text": "default in different technologies particularly in the cloud you're seeing people adopt things like Redis how many",
    "start": "2208010",
    "end": "2213470"
  },
  {
    "text": "of you guys have heard of Redis it's a it's a small little project very very",
    "start": "2213470",
    "end": "2219980"
  },
  {
    "text": "you know quaint some very small websites are starting to use it how many of you have heard of Stack Overflow ok yeah",
    "start": "2219980",
    "end": "2226430"
  },
  {
    "text": "they're using it for example you know few billion requests not nothing big nothing you know the right mom about",
    "start": "2226430",
    "end": "2232520"
  },
  {
    "text": "everything but still it's getting out there you know and so people are starting to use these technologies because they need serious scale we all",
    "start": "2232520",
    "end": "2239840"
  },
  {
    "text": "know what happens when you push Oracle too hard you've never seen a more expensive fall in your life you know so",
    "start": "2239840",
    "end": "2246860"
  },
  {
    "text": "caching is a very very valuable thing this is the thing that'll save the databases I think",
    "start": "2246860",
    "end": "2253660"
  },
  {
    "text": "it's okay so we introduced the caching support in 3-1 good awesome we've already got several different",
    "start": "2253680",
    "end": "2258950"
  },
  {
    "text": "implementations that you can use out of the box for each cache and for the Java that you told about maps and for Redis",
    "start": "2258950",
    "end": "2264359"
  },
  {
    "text": "and so on other projects like spring data Redis provide implementations for which that's the the reddest",
    "start": "2264359",
    "end": "2270089"
  },
  {
    "text": "implementation the gem fire implementation comes swings was from string data gem fire other projects out",
    "start": "2270089",
    "end": "2275400"
  },
  {
    "text": "there in the in the open-source community also provide implementations so how many of you are using infini span",
    "start": "2275400",
    "end": "2281210"
  },
  {
    "text": "from the the JBoss guys it's a pretty neat little cash and they actually have",
    "start": "2281210",
    "end": "2287670"
  },
  {
    "text": "an implementation the cache manager spi as well right there's other like hazel cast I think has one as well I mean",
    "start": "2287670",
    "end": "2292799"
  },
  {
    "text": "there's just a lot of different implementations being provided already by third-party people right",
    "start": "2292799",
    "end": "2298109"
  },
  {
    "text": "and additionally spring is spring is the",
    "start": "2298109",
    "end": "2303329"
  },
  {
    "text": "first enterprise technology to provide support for Jace r107 right so will have it will have once",
    "start": "2303329",
    "end": "2310680"
  },
  {
    "text": "that spec goes final once it's solid it'll be supporting spring 3 2 which",
    "start": "2310680",
    "end": "2316230"
  },
  {
    "text": "should debut long before Java EE 7 right so you'll have a they'll have the ability to access all these JSON 107",
    "start": "2316230",
    "end": "2323010"
  },
  {
    "text": "supporting cache implementations again again with a little bit of chagrin before the rest of the the w7 stack so",
    "start": "2323010",
    "end": "2334890"
  },
  {
    "text": "one common use case is okay like I just showed you I showed you one version of a cache that relies on just Java dot util",
    "start": "2334890",
    "end": "2341160"
  },
  {
    "text": "dot map in memory for my testing but then when I'm in production I want to delegate to Redis right",
    "start": "2341160",
    "end": "2347010"
  },
  {
    "text": "how would you achieve that in a real application well profiles happens to be a great use for that right you can",
    "start": "2347010",
    "end": "2352710"
  },
  {
    "text": "specify that this is one definition for one environment and one for another so",
    "start": "2352710",
    "end": "2358619"
  },
  {
    "text": "here's kind of some examples right it's very simple you say at enable caching in your configuration class or you use the",
    "start": "2358619",
    "end": "2364279"
  },
  {
    "start": "2360000",
    "end": "2509000"
  },
  {
    "text": "XML namespace you say cache colon annotations driven and you define a cache manager like we did and then in",
    "start": "2364279",
    "end": "2371700"
  },
  {
    "text": "your domain code your component code you can just annotate your methods right and",
    "start": "2371700",
    "end": "2377339"
  },
  {
    "text": "it would take your interfaces if you want but you annotate the methods that return you dem potent values so it's",
    "start": "2377339",
    "end": "2384390"
  },
  {
    "text": "we've all done the factorial example where you memorize the return value of a",
    "start": "2384390",
    "end": "2390390"
  },
  {
    "text": "of a computation so each input is gonna be a constant output so you might as well just cache it and not bother",
    "start": "2390390",
    "end": "2395670"
  },
  {
    "text": "recomputing each time right to use that to use this annotation for that kind of",
    "start": "2395670",
    "end": "2401610"
  },
  {
    "text": "thing it's pretty easy you can actually do add cashable and then whenever somebody invokes load owner the result",
    "start": "2401610",
    "end": "2409440"
  },
  {
    "text": "the owner object will be cached in the backing cache store that we talked about they you know managed by that cache",
    "start": "2409440",
    "end": "2415020"
  },
  {
    "text": "manager so if you have eh cache it'll get stored in the edge cache for you the key will be computed based on the",
    "start": "2415020",
    "end": "2422730"
  },
  {
    "text": "arguments to the method so you can imagine a common scenario look up my customer by its ID",
    "start": "2422730",
    "end": "2428750"
  },
  {
    "text": "well once I've looked it up I don't wanna look it up again and again I want to cache the result it's probably not gonna change the only time I want to",
    "start": "2428750",
    "end": "2435000"
  },
  {
    "text": "look it up again is when the customer object itself has changed in which case I want to expire the records right so",
    "start": "2435000",
    "end": "2441870"
  },
  {
    "text": "here I've got an ID that's the key and then the owner itself is going to be stored in the cache you can specify",
    "start": "2441870",
    "end": "2448950"
  },
  {
    "text": "condition so you can use this spring expression language to conditionally",
    "start": "2448950",
    "end": "2454110"
  },
  {
    "text": "stipulate that certain beans should be used at certain times right or should be cashed based on some conditions and you",
    "start": "2454110",
    "end": "2460290"
  },
  {
    "text": "can do anything and this is just kind of a silly example but the spring expression language is like how many of",
    "start": "2460290",
    "end": "2466380"
  },
  {
    "text": "you guys have used the JSF expression language okay now imagine if that had support for it most things you wanted to",
    "start": "2466380",
    "end": "2472680"
  },
  {
    "text": "do how many of you've used the jennipher expression language but then also said no screw it I need to use the JBoss expression language because it's got",
    "start": "2472680",
    "end": "2478920"
  },
  {
    "text": "more power or I want to use something completely different like there's like what's that other one that used to be so",
    "start": "2478920",
    "end": "2484860"
  },
  {
    "text": "popular that's in tape estrella ogl you know more powerful expression language so the spring expression",
    "start": "2484860",
    "end": "2490440"
  },
  {
    "text": "language is a very large superset of most of those it's got a lot of power so you can actually call methods on this on these beans you can access environment",
    "start": "2490440",
    "end": "2497670"
  },
  {
    "text": "variables you can access static methods etc so you can do anything you want in that expression language to make the decision based on whether it being",
    "start": "2497670",
    "end": "2503820"
  },
  {
    "text": "should be accessed very easy right so here's an example of that in this case",
    "start": "2503820",
    "end": "2508890"
  },
  {
    "text": "here I'm saying if the argument name has a length that's less than 10 characters",
    "start": "2508890",
    "end": "2514040"
  },
  {
    "start": "2509000",
    "end": "2567000"
  },
  {
    "text": "then cache the result I don't know why that's in a useful case but whatever you know",
    "start": "2514040",
    "end": "2519470"
  },
  {
    "text": "otherwise don't cash it so you can get really fancy based on the rules there's no there's no it's not either-or right",
    "start": "2519470",
    "end": "2527110"
  },
  {
    "text": "and of course the for every time you put an object in there's probably some useful scenario where you want to take",
    "start": "2527110",
    "end": "2532130"
  },
  {
    "text": "the object out right like Bill Cosby I put you I brought you into this world I can take you out so at Cash evict tell",
    "start": "2532130",
    "end": "2539030"
  },
  {
    "text": "spring that whatever somebody calls this method you want to delete the corresponding entry in the cache when it",
    "start": "2539030",
    "end": "2544040"
  },
  {
    "text": "evict it from the cache alright so you've got support for caching and then I'm caching based on the same rules by",
    "start": "2544040",
    "end": "2550790"
  },
  {
    "text": "the way same same key resolution algorithm the the parameters to the",
    "start": "2550790",
    "end": "2555950"
  },
  {
    "text": "method themselves become used in the creation of a key that has looked that is used to look up the object and then",
    "start": "2555950",
    "end": "2561020"
  },
  {
    "text": "delete it let's see here I have in my",
    "start": "2561020",
    "end": "2568940"
  },
  {
    "text": "little example here services very very",
    "start": "2568940",
    "end": "2576440"
  },
  {
    "text": "centered a simple pedestrian example I've got a bunch of methods here that returned data right and I want them",
    "start": "2576440",
    "end": "2582710"
  },
  {
    "text": "stored in the customers region here I'm specifying which region in the cache to use because it's just annotations you",
    "start": "2582710",
    "end": "2588710"
  },
  {
    "text": "can you actually use a static private final constant if you want you don't have to retype that in each time in this",
    "start": "2588710",
    "end": "2594680"
  },
  {
    "text": "case the region itself is just a string customers so if you don't specify the region you know you need to specify a",
    "start": "2594680",
    "end": "2602390"
  },
  {
    "text": "region basically see it's more useful and this is a good way to do it instead of repeating the string each time so you",
    "start": "2602390",
    "end": "2609740"
  },
  {
    "text": "can see I've got customer get customer buy ID I specify the key as the ID and",
    "start": "2609740",
    "end": "2614780"
  },
  {
    "text": "then I'm storing the result I've got cache evict on my delete customer method right and same thing for",
    "start": "2614780",
    "end": "2622190"
  },
  {
    "text": "cache evict I've got the update customers method here but here I've got a special case here I've got multiple",
    "start": "2622190",
    "end": "2628130"
  },
  {
    "text": "parameters and I only want the first one to be consulted because remember before I stored the objects by key based on its",
    "start": "2628130",
    "end": "2635000"
  },
  {
    "text": "ID well when the spring when spring sees the update customer method it's gonna create the key based on ID first name",
    "start": "2635000",
    "end": "2641570"
  },
  {
    "text": "last name in the birthday which I don't want that would be there's no value in the cache that matches that that a that",
    "start": "2641570",
    "end": "2647300"
  },
  {
    "text": "composite right so you can specify that spring should only consult the first parameter the ID parameter right",
    "start": "2647300",
    "end": "2654550"
  },
  {
    "text": "so you can actually get you can get very very fine-grained control over which parameters are used in creating the composite key and so on any questions on",
    "start": "2654550",
    "end": "2662230"
  },
  {
    "text": "that before I continue okay so another",
    "start": "2662230",
    "end": "2671230"
  },
  {
    "start": "2671000",
    "end": "2725000"
  },
  {
    "text": "big part of this the spring 3 1 release was the support for servlet 3o the initial support for serve the 3 all the",
    "start": "2671230",
    "end": "2679000"
  },
  {
    "text": "rest some of the more exotic support that most people aren't using anyway yet",
    "start": "2679000",
    "end": "2684210"
  },
  {
    "text": "will be available in spring 3 too and there's already early access releases and I that you can get if you look at",
    "start": "2684210",
    "end": "2690430"
  },
  {
    "text": "the blood that Springs from stroke you can see people talking about the new features in spring 3 2 and the spring",
    "start": "2690430",
    "end": "2697210"
  },
  {
    "text": "MVC support for asynchronous processing and spring 3 2 already so show of hands",
    "start": "2697210",
    "end": "2702850"
  },
  {
    "text": "how many of you guys using Tomcat something like it ok cool Tomcat 6 crickets 7 yeah ok",
    "start": "2702850",
    "end": "2712900"
  },
  {
    "text": "how many of you guys are using GlassFish I just I just say that to be nice I",
    "start": "2712900",
    "end": "2718870"
  },
  {
    "text": "don't think it was using it but it's always nice to ask let's try it again how many of you guys have met somebody",
    "start": "2718870",
    "end": "2725050"
  },
  {
    "text": "who once knew somebody who once used or maybe looked at or downloaded a class fish once even went if you did it once",
    "start": "2725050",
    "end": "2730660"
  },
  {
    "text": "that's enough anybody ok um well I tried",
    "start": "2730660",
    "end": "2736750"
  },
  {
    "text": "anyway the point is these these containers have servlet 3.0 support 3.0 is actually pretty awesome and the",
    "start": "2736750",
    "end": "2743170"
  },
  {
    "text": "servlet 3 stuff is looking really good you know it codifies a lot of the stuff that was previously baked as as sort of",
    "start": "2743170",
    "end": "2750570"
  },
  {
    "text": "extensions to these containers you know out-of-band extension that you could use if you wanted to but they",
    "start": "2750570",
    "end": "2756460"
  },
  {
    "text": "weren't part of the servlet container themselves by default certainly not part of any spec and we've embraced those",
    "start": "2756460",
    "end": "2764830"
  },
  {
    "text": "features wherever possible so one big part of that is setup for XML free web",
    "start": "2764830",
    "end": "2771430"
  },
  {
    "text": "apps right how many of you I mean you guys are doing web programming with Java I imagine show of hand yeah so you've",
    "start": "2771430",
    "end": "2777250"
  },
  {
    "text": "done a web that XML or 2 or 10 or 1,000 web that XML itself is sort of this I",
    "start": "2777250",
    "end": "2783850"
  },
  {
    "text": "mean the specs make you use XML a lot you know and spring has always been about choice so it's nice to see them finally",
    "start": "2783850",
    "end": "2790870"
  },
  {
    "text": "embracing that the servlet 3oh stuff doesn't require you to use web that XML right",
    "start": "2790870",
    "end": "2797170"
  },
  {
    "start": "2796000",
    "end": "3043000"
  },
  {
    "text": "and so we've embraced that we actually provide support for using completely Java centric completely XML free web",
    "start": "2797170",
    "end": "2805030"
  },
  {
    "text": "applications the idea is that you register a component that implement Aged implements the servlet container it",
    "start": "2805030",
    "end": "2811720"
  },
  {
    "text": "works with spring support for the servlet container initializer SPI right in servlet Rio and whenever spring sees",
    "start": "2811720",
    "end": "2818800"
  },
  {
    "text": "these beans it'll launch them and then it gives you a callback and a pointer to the to the servlet context and then from",
    "start": "2818800",
    "end": "2826300"
  },
  {
    "text": "there you can programmatically register servlets and filters and all that stuff just like you would with web that XML",
    "start": "2826300",
    "end": "2831850"
  },
  {
    "text": "but it's in Java code so you have the same ability as you did before to programmatically build this kind of stuff you know let's look over that",
    "start": "2831850",
    "end": "2840460"
  },
  {
    "text": "actually so this is",
    "start": "2840460",
    "end": "2847710"
  },
  {
    "text": "just swing application context initial either now in this example no because",
    "start": "2850339",
    "end": "2862160"
  },
  {
    "text": "this is supposed to run on yeah let's go different one github.com",
    "start": "2862160",
    "end": "2867219"
  },
  {
    "text": "so our config let's see if that has it",
    "start": "2883170",
    "end": "2887670"
  },
  {
    "text": "yeah there we go",
    "start": "2894740",
    "end": "2900150"
  },
  {
    "text": "that's what I'm looking for so here's a very simple completely XML free sort of",
    "start": "2900150",
    "end": "2906660"
  },
  {
    "text": "a web application built on spring 3 1 and using servlet Rio and all that stuff so again if you looked at a lot of what",
    "start": "2906660",
    "end": "2912420"
  },
  {
    "text": "we've done so far we created a hibernate we set up hibernate earlier hibernate had no XML at all right we set up just completely",
    "start": "2912420",
    "end": "2919350"
  },
  {
    "text": "in Java we're setting up a web application here again no XML at all we could have used",
    "start": "2919350",
    "end": "2925050"
  },
  {
    "text": "JPA that we wouldn't have required to XML in basically spring through when is",
    "start": "2925050",
    "end": "2930120"
  },
  {
    "text": "the only enterprise technology that lets you completely avoid XML if you want to you know it's kind of very it's very",
    "start": "2930120",
    "end": "2936120"
  },
  {
    "text": "very easy to write clean applications quickly",
    "start": "2936120",
    "end": "2940310"
  },
  {
    "text": "where did I put it mmm can't find a good reference to it",
    "start": "2946299",
    "end": "2953990"
  },
  {
    "text": "okay anyway bless you I'll find a good",
    "start": "2953990",
    "end": "2960290"
  },
  {
    "text": "example but the basic eights you can write web that XML free versions of your spring applications no problem at all it's very easy we also have support for",
    "start": "2960290",
    "end": "2967940"
  },
  {
    "text": "sir I mean in server 3 oh we've what's up yeah this is all three one as well",
    "start": "2967940",
    "end": "2975020"
  },
  {
    "text": "right in server three oh we've exposed we support now whenever possible they've",
    "start": "2975020",
    "end": "2980960"
  },
  {
    "text": "the file upload to support the part API the servlet part multi-part API is",
    "start": "2980960",
    "end": "2986720"
  },
  {
    "text": "inside of serve with fail basically how many of you guys have used Commons file upload yeah okay it's an old standby",
    "start": "2986720",
    "end": "2992810"
  },
  {
    "text": "right spring is very smart when spring MVC gets started up when you have the app enable web MVC spring starts up and",
    "start": "2992810",
    "end": "2999620"
  },
  {
    "text": "it detects the presence of comments file upload on the class path and if it's there then you can automatically submit",
    "start": "2999620",
    "end": "3006150"
  },
  {
    "text": "form data with files in it to a spring MVC controller and the controller will",
    "start": "3006150",
    "end": "3011890"
  },
  {
    "text": "accept it as a parameter and it'll automatically marshal it for an object that you can get access to right like a",
    "start": "3011890",
    "end": "3017260"
  },
  {
    "text": "multi-part my object whatever and you can pick it pick that object apart and get the file name and get the input stream and all that stuff",
    "start": "3017260",
    "end": "3023020"
  },
  {
    "text": "well now if it detects servlet three Oh file upload support it'll also support it there and you don't need common file",
    "start": "3023020",
    "end": "3028990"
  },
  {
    "text": "upload anymore right so in both cases it's to you if you just have the support available it's just transparent your",
    "start": "3028990",
    "end": "3034900"
  },
  {
    "text": "file uploads will automatically work you can create your controllers with you know all that stuff no problem oh here",
    "start": "3034900",
    "end": "3041530"
  },
  {
    "text": "we go here's the web app web application initializer that I was trying to show you guys are here if you create a class like this and put it your class path",
    "start": "3041530",
    "end": "3049210"
  },
  {
    "start": "3043000",
    "end": "3086000"
  },
  {
    "text": "somewhere spring will detect it when spring starts up and then it'll it'll give you a call back and you can",
    "start": "3049210",
    "end": "3055510"
  },
  {
    "text": "actually create through annotation config web application context set the packages to scan register configuration",
    "start": "3055510",
    "end": "3062050"
  },
  {
    "text": "classes and then register that as a listener right so here we've got the context loader listener you could also",
    "start": "3062050",
    "end": "3067870"
  },
  {
    "text": "register servlet context add dispatcher servlet you know you're gonna add a servlet you could add the spring filters",
    "start": "3067870",
    "end": "3073840"
  },
  {
    "text": "and so on right all from Java so this is in lieu of instead of web dead XML okay",
    "start": "3073840",
    "end": "3080590"
  },
  {
    "text": "so completely XML for you in shipping NBC we've also added",
    "start": "3080590",
    "end": "3086260"
  },
  {
    "text": "support for things like the flash scope and we've also very very extensively",
    "start": "3086260",
    "end": "3093099"
  },
  {
    "text": "sort of reworked the internals of spring MVC some of the stuff you won't care about for the very large 80% 90% case",
    "start": "3093099",
    "end": "3099849"
  },
  {
    "text": "right but we've also made it so that you can plug in different types of behavior",
    "start": "3099849",
    "end": "3106030"
  },
  {
    "text": "based on the return values of controller methods and based on the arguments of those controller methods so how many of",
    "start": "3106030",
    "end": "3111369"
  },
  {
    "text": "you are using spring MVC ok yeah so if you're using spring ABC are using the annotation centric stuff where you have",
    "start": "3111369",
    "end": "3117640"
  },
  {
    "text": "the annotations you see at request mapping and so on those the return values of those methods used to be kind",
    "start": "3117640",
    "end": "3125440"
  },
  {
    "text": "of a it was baked in what would happen based on the return value and only the spring framework itself could extend",
    "start": "3125440",
    "end": "3130720"
  },
  {
    "text": "that now there's an SPI so if you want to handle the return type of a controller method and different way that",
    "start": "3130720",
    "end": "3136900"
  },
  {
    "text": "the framework then then the framework Rd provides this is your hook same thing for the parameters right so it's just",
    "start": "3136900",
    "end": "3142540"
  },
  {
    "text": "about extensibility you probably won't need it but it's nice to know it's there and then we've also added support for",
    "start": "3142540",
    "end": "3148300"
  },
  {
    "text": "the flash map stuff flash map is kind of a common case how many you know you",
    "start": "3148300",
    "end": "3154060"
  },
  {
    "text": "submit something to a forum you want to do something with the results and you need to keep the value a crop across the",
    "start": "3154060",
    "end": "3161770"
  },
  {
    "text": "redirect right it's a very common where you you do a submit you get a value and then you redirect to some other resource",
    "start": "3161770",
    "end": "3167320"
  },
  {
    "text": "so that way if they hit the back button it won't resubmit the form right but you want that data to persist beyond the",
    "start": "3167320",
    "end": "3175390"
  },
  {
    "text": "redirect well by default that doesn't happen right by default spring MVC and everything else basically forgets about",
    "start": "3175390",
    "end": "3181839"
  },
  {
    "text": "that data once you've done a redirect the context is lost so a common pattern is to stick that in the session and then",
    "start": "3181839",
    "end": "3188950"
  },
  {
    "text": "redirect and then pluck it out of the session once you're on that on that redirected page that's called a flash",
    "start": "3188950",
    "end": "3194290"
  },
  {
    "text": "scope right you want something to live just once one you want it to live for one redirect and no longer and that has",
    "start": "3194290",
    "end": "3200500"
  },
  {
    "text": "become we've added support for that as it's just a regular scope now so you can say that this value will live during",
    "start": "3200500",
    "end": "3206920"
  },
  {
    "text": "post and then it'll also survive the redirect we've added support we saw this",
    "start": "3206920",
    "end": "3212710"
  },
  {
    "text": "earlier ways to add support for persistence that XML free JPA right so",
    "start": "3212710",
    "end": "3219520"
  },
  {
    "text": "you can use JPA too and you can use hibernate for and threes you know as appropriate and create nice clean Java",
    "start": "3219520",
    "end": "3226210"
  },
  {
    "text": "centric versions of these API is if you want to work with them we've also made it easy to setup JPA itself without the",
    "start": "3226210",
    "end": "3232619"
  },
  {
    "text": "persistence on XML and you can take full advantage of all these different new features and JPA to hibernate for",
    "start": "3232619",
    "end": "3241420"
  },
  {
    "start": "3241000",
    "end": "3298000"
  },
  {
    "text": "hibernate 4.1 and i think is like the current one maybe it's for two now but basically spring 3 one shipped all of",
    "start": "3241420",
    "end": "3248859"
  },
  {
    "text": "like three days we were tracking hibernate for during its gestation and as soon as it was GA we were ready to go",
    "start": "3248859",
    "end": "3255070"
  },
  {
    "text": "GA because we had tracked it so this is the first easy way to use hibernate you",
    "start": "3255070",
    "end": "3261070"
  },
  {
    "text": "know we've also updated the court api how many of you guys are using job scheduling systems like quartz or BMC or",
    "start": "3261070",
    "end": "3266800"
  },
  {
    "text": "auto SACEUR cron or something those are great but Spring has for the last three",
    "start": "3266800",
    "end": "3273490"
  },
  {
    "text": "and a half years had a very nice integration in the core framework itself where you just say at scheduled and then",
    "start": "3273490",
    "end": "3279430"
  },
  {
    "text": "you provide a cron expression or an interval or a fixed rate and it'll automatically run that code on a you know periodically for you but if you",
    "start": "3279430",
    "end": "3286420"
  },
  {
    "text": "want to use quartz 2.0 then there's now support for that in spring core as well that mirrors it looks very similar to",
    "start": "3286420",
    "end": "3291550"
  },
  {
    "text": "the support we've always had for one for right I mentioned Java SE 7 again it's",
    "start": "3291550",
    "end": "3298390"
  },
  {
    "start": "3298000",
    "end": "3377000"
  },
  {
    "text": "not required but if it's there we try and make the best use of it we try and take advantage of it so for example the",
    "start": "3298390",
    "end": "3303849"
  },
  {
    "text": "fork/join framework which can be very useful for some very different kinds of computations computations that are",
    "start": "3303849",
    "end": "3310180"
  },
  {
    "text": "basically if they if they can be done in Lisp using MapReduce they could probably be done in the fork/join framework",
    "start": "3310180",
    "end": "3316089"
  },
  {
    "text": "inside of java SE 7 it's very nice very natural and there's now a task executor integration on top of that the the",
    "start": "3316089",
    "end": "3322630"
  },
  {
    "text": "spring thread pool SP is mapped to that nicely we take advantage of JDBC for one",
    "start": "3322630",
    "end": "3327970"
  },
  {
    "text": "if it's available in our in our code 3.2",
    "start": "3327970",
    "end": "3335230"
  },
  {
    "text": "is on its way you can already see release candidates and stuff like that sort of trickling out and people talking",
    "start": "3335230",
    "end": "3341020"
  },
  {
    "text": "about the new features in general three one is a nice arrangement of",
    "start": "3341020",
    "end": "3346690"
  },
  {
    "text": "technologies a lot of the ideas that were start in three Oh kind of find their completion in three one if you're",
    "start": "3346690",
    "end": "3352060"
  },
  {
    "text": "looking at if you're on to 5x and you're looking to upgrade skip three oh just go straight to three one it is a drop-in",
    "start": "3352060",
    "end": "3358210"
  },
  {
    "text": "replacement as always you know and three two will be even cooler",
    "start": "3358210",
    "end": "3363940"
  },
  {
    "text": "thanks guys",
    "start": "3363940",
    "end": "3366660"
  }
]