[
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "15740"
  },
  {
    "text": "I'm Zach Jackson today I'm here to talk to you about module Federation a mechanism for at",
    "start": "15740",
    "end": "22080"
  },
  {
    "text": "runtime code distribution so what is the motivation behind module",
    "start": "22080",
    "end": "28260"
  },
  {
    "text": "Federation why did we even build it well it mostly came from personal experience",
    "start": "28260",
    "end": "34280"
  },
  {
    "text": "sharing code is not easy depending on your scale it can even be",
    "start": "34280",
    "end": "40260"
  },
  {
    "text": "unprofitable the feedback loop for engineering is often quite laborious and",
    "start": "40260",
    "end": "45480"
  },
  {
    "text": "slow so what I'm really looking for here is some kind of system that allows parts of",
    "start": "45480",
    "end": "52680"
  },
  {
    "text": "an application to be built and deployed independently I'd like to make orchestration and",
    "start": "52680",
    "end": "59399"
  },
  {
    "text": "self-formation simple and intuitive I'd like the ability to be able to share",
    "start": "59399",
    "end": "64739"
  },
  {
    "text": "vendor code without the loss of individual flexibility I don't really want to introduce",
    "start": "64739",
    "end": "71240"
  },
  {
    "text": "performance hits page reloads or a lot of bandwidth overhead that would",
    "start": "71240",
    "end": "77460"
  },
  {
    "text": "generally have a drawback on the user experience so let's set the stage here module",
    "start": "77460",
    "end": "83580"
  },
  {
    "text": "Federation is ideal for developing one or more applications involving multiple",
    "start": "83580",
    "end": "88799"
  },
  {
    "text": "teams this could be UI components logical functionality middleware or even",
    "start": "88799",
    "end": "94799"
  },
  {
    "text": "just server code or side effects these parts can be shared and developed",
    "start": "94799",
    "end": "100979"
  },
  {
    "text": "by independent teams I want little to no coordination between",
    "start": "100979",
    "end": "107040"
  },
  {
    "text": "different teams or domains",
    "start": "107040",
    "end": "112280"
  },
  {
    "text": "so let's understand what the problem is with the Technologies we have today sharing code is painful and a laborious",
    "start": "113040",
    "end": "120240"
  },
  {
    "text": "process existing options often have limitations that we do end up hitting",
    "start": "120240",
    "end": "126659"
  },
  {
    "text": "as an example we have native esm but that requires preloading it only",
    "start": "126659",
    "end": "133080"
  },
  {
    "text": "works with esm it has a pretty high round trip time",
    "start": "133080",
    "end": "138420"
  },
  {
    "text": "and the sharing mechanism is pretty inflexible native esm usually depends on the",
    "start": "138420",
    "end": "146640"
  },
  {
    "text": "ability to share code based on the assets path if you have multiple applications with",
    "start": "146640",
    "end": "154920"
  },
  {
    "text": "different folder structures and asset path structures the chances are you might not be able to",
    "start": "154920",
    "end": "161099"
  },
  {
    "text": "Leverage The reusability that esm has",
    "start": "161099",
    "end": "166260"
  },
  {
    "text": "overall esm is close but I believe that it still needs some form of an",
    "start": "166260",
    "end": "173040"
  },
  {
    "text": "orchestration head and this is where the webpack runtime really comes into play",
    "start": "173040",
    "end": "179400"
  },
  {
    "text": "if we look at a single build there are challenges there as well",
    "start": "179400",
    "end": "184440"
  },
  {
    "text": "it's slow any change that you make requires a full rebuild",
    "start": "184440",
    "end": "190980"
  },
  {
    "text": "so that feedback loop and monolithic structure really does get in the way at",
    "start": "190980",
    "end": "196379"
  },
  {
    "text": "scale we do have something from previous versions of a webpack which was also a",
    "start": "196379",
    "end": "204000"
  },
  {
    "text": "little bit hit and miss and that was the dll and externals",
    "start": "204000",
    "end": "210900"
  },
  {
    "text": "plugins dlls or externals also have a few drawbacks there's a single point of",
    "start": "210900",
    "end": "217379"
  },
  {
    "text": "failure everything has to be synchronously loaded up front regardless of if you use",
    "start": "217379",
    "end": "224340"
  },
  {
    "text": "it or not and it requires a lot of coordination and manual labor",
    "start": "224340",
    "end": "231180"
  },
  {
    "text": "just to deal with it also does not support something like multiple versions which makes it very",
    "start": "231180",
    "end": "237900"
  },
  {
    "text": "challenging to depend on a centralized single point of failure system where you",
    "start": "237900",
    "end": "244379"
  },
  {
    "text": "have to be very tactical about how you can upgrade your dependency sets across",
    "start": "244379",
    "end": "250019"
  },
  {
    "text": "multiple applications so what we really are looking for here",
    "start": "250019",
    "end": "257340"
  },
  {
    "text": "is good build performance something that has good web performance",
    "start": "257340",
    "end": "264360"
  },
  {
    "text": "a solution for sharing dependencies we need something that's a little easier",
    "start": "264360",
    "end": "271020"
  },
  {
    "text": "and more intuitive in general and what we're kind of looking for is something similar to npm meets Edge site",
    "start": "271020",
    "end": "280500"
  },
  {
    "text": "includes but without the overhead that comes with these approaches",
    "start": "280500",
    "end": "286340"
  },
  {
    "text": "the existing trade-offs that we make without module Federation are usually going to reveal themselves",
    "start": "288600",
    "end": "296160"
  },
  {
    "text": "in the form of operational overhead complexity or annoying development and",
    "start": "296160",
    "end": "303479"
  },
  {
    "text": "release cycle not to mention all the additional infrastructure you would need outside of your code base to stitch an",
    "start": "303479",
    "end": "310800"
  },
  {
    "text": "application together and this is where module Federation",
    "start": "310800",
    "end": "318419"
  },
  {
    "text": "comes into Focus I believe that module Federation or at",
    "start": "318419",
    "end": "323699"
  },
  {
    "text": "least the technology behind it is an inevitability for the future of web",
    "start": "323699",
    "end": "328860"
  },
  {
    "text": "Technologies so what exactly is module Federation",
    "start": "328860",
    "end": "337139"
  },
  {
    "text": "the easiest way to describe it would be a similar concept to Apollo's graphql",
    "start": "337139",
    "end": "343259"
  },
  {
    "text": "Federation but it's applied to webpack modules for",
    "start": "343259",
    "end": "349199"
  },
  {
    "text": "an environment agnostic Universal software distribution pattern",
    "start": "349199",
    "end": "356280"
  },
  {
    "text": "there's a few terms that we often use when we talk about Federated",
    "start": "356280",
    "end": "361680"
  },
  {
    "text": "applications the first one is something that we call the host the host is considered the",
    "start": "361680",
    "end": "369539"
  },
  {
    "text": "consuming webpack build usually it's the first one that's initialized during an",
    "start": "369539",
    "end": "374699"
  },
  {
    "text": "application load we also have something called a remote a remote refers to a separate build",
    "start": "374699",
    "end": "382259"
  },
  {
    "text": "where part of it is being consumed by a host",
    "start": "382259",
    "end": "388080"
  },
  {
    "text": "we have something called bi-directional hosts which is a combination of a host and a",
    "start": "388080",
    "end": "396000"
  },
  {
    "text": "remote application where it can consume or be consumed which would allow it to",
    "start": "396000",
    "end": "402900"
  },
  {
    "text": "work as a standalone application for individual development environments",
    "start": "402900",
    "end": "408600"
  },
  {
    "text": "or allow it to work as a remote where parts of it can be consumed into other",
    "start": "408600",
    "end": "415160"
  },
  {
    "text": "Standalone web applications the last one that we have is a newer",
    "start": "415160",
    "end": "421800"
  },
  {
    "text": "term and we were usually referred to it as omnidirectional hosts",
    "start": "421800",
    "end": "427139"
  },
  {
    "text": "the idea behind an omnidirectional host is it's kind of a combination of all of",
    "start": "427139",
    "end": "433500"
  },
  {
    "text": "the above it's a host that behaves both like a host and a remote at the same time",
    "start": "433500",
    "end": "440280"
  },
  {
    "text": "meaning when a omnidirectional host first boots it is not aware if it is the",
    "start": "440280",
    "end": "446880"
  },
  {
    "text": "host application or not omnidirectionality allows webpack to",
    "start": "446880",
    "end": "452460"
  },
  {
    "text": "negotiate the dependency supply chain at runtime between everything connected",
    "start": "452460",
    "end": "458940"
  },
  {
    "text": "to the Federated Network then determine which dependency is the",
    "start": "458940",
    "end": "464099"
  },
  {
    "text": "best one to vend to the host itself as well as share across the other remote",
    "start": "464099",
    "end": "470699"
  },
  {
    "text": "applications too so what exactly are the goals of module Federation",
    "start": "470699",
    "end": "477720"
  },
  {
    "text": "one I would like Dynamic sharing of the node modules at runtime with version",
    "start": "477720",
    "end": "485099"
  },
  {
    "text": "support I really want team autonomy deploy Independence and I want to avoid",
    "start": "485099",
    "end": "492300"
  },
  {
    "text": "something that I refer to as the double deploy a double deploy usually is that process",
    "start": "492300",
    "end": "499020"
  },
  {
    "text": "of if this was an npm package you would have to apply the changes to the npm",
    "start": "499020",
    "end": "505020"
  },
  {
    "text": "package publish that package go to the consuming repo",
    "start": "505020",
    "end": "510240"
  },
  {
    "text": "install the package update then open a pull request and push or",
    "start": "510240",
    "end": "516839"
  },
  {
    "text": "deploy that to some ephemeral environment to see your change",
    "start": "516839",
    "end": "522419"
  },
  {
    "text": "hence why we call it a double deploy you have to release two things in order to",
    "start": "522419",
    "end": "528300"
  },
  {
    "text": "see one change if you have more than just one application this double deploy",
    "start": "528300",
    "end": "535080"
  },
  {
    "text": "convention starts to get really out of hand imagine you had something like a header",
    "start": "535080",
    "end": "540660"
  },
  {
    "text": "and you had eight microfrontins or independent applications independent experiences but",
    "start": "540660",
    "end": "547800"
  },
  {
    "text": "they all generally use the same navigation UI I would first have to release a copy of",
    "start": "547800",
    "end": "554700"
  },
  {
    "text": "the nav and I would have to open pull requests to each individual code base",
    "start": "554700",
    "end": "560760"
  },
  {
    "text": "and then create a merge train to merge each one independently this is not a very scalable solution",
    "start": "560760",
    "end": "567600"
  },
  {
    "text": "especially if you're trying to have a consistent experience across the",
    "start": "567600",
    "end": "573839"
  },
  {
    "text": "applications synchronizing a package update everywhere all at once is not easy to do",
    "start": "573839",
    "end": "582740"
  },
  {
    "text": "another goal that I want is the ability to import feature code which is exposed",
    "start": "583200",
    "end": "589380"
  },
  {
    "text": "from another team's application I want to be able to coordinate efficiently at runtime and not at build",
    "start": "589380",
    "end": "597480"
  },
  {
    "text": "time and that is really where module Federation stands out for most of the other approaches with things such as",
    "start": "597480",
    "end": "604140"
  },
  {
    "text": "dlls or externals it's all coordinating this at build time",
    "start": "604140",
    "end": "611700"
  },
  {
    "text": "what I really want is the ability to dynamically coordinate dependency trees",
    "start": "611700",
    "end": "616920"
  },
  {
    "text": "and code sharing at runtime",
    "start": "616920",
    "end": "621980"
  },
  {
    "text": "in addition to those first set of goals what do I actually need to make module",
    "start": "625800",
    "end": "631019"
  },
  {
    "text": "Federation something that's viable one is redundancy",
    "start": "631019",
    "end": "638160"
  },
  {
    "text": "I need to make sure that I have multiple backup copies that convined any of their",
    "start": "638160",
    "end": "644100"
  },
  {
    "text": "code to anyone else connected to the network I would like the capability to create",
    "start": "644100",
    "end": "650579"
  },
  {
    "text": "self-healing applications where webpack has mechanisms that would",
    "start": "650579",
    "end": "655800"
  },
  {
    "text": "allow me to automatically roll back to previous parts of the graph in the event",
    "start": "655800",
    "end": "661440"
  },
  {
    "text": "of a failure when designed well it should be extremely hard to knock one of these",
    "start": "661440",
    "end": "668940"
  },
  {
    "text": "applications offline I also still want the ability to have",
    "start": "668940",
    "end": "676560"
  },
  {
    "text": "version code on the dependencies and on the remotes",
    "start": "676560",
    "end": "681779"
  },
  {
    "text": "themselves from another build while versioning is great there are also",
    "start": "681779",
    "end": "688140"
  },
  {
    "text": "going to be times where I want the opposite and I would like to always have the Evergreen code",
    "start": "688140",
    "end": "694260"
  },
  {
    "text": "where it's always up to date always have the latest copy on the next execution or",
    "start": "694260",
    "end": "700140"
  },
  {
    "text": "invocation of that environment lastly I'm really looking for a good",
    "start": "700140",
    "end": "706920"
  },
  {
    "text": "developer experience I want it to be easy to share code and work in isolation without impacting",
    "start": "706920",
    "end": "714240"
  },
  {
    "text": "performance page reloads or degrading the user's experience",
    "start": "714240",
    "end": "721079"
  },
  {
    "text": "in summary what I'm really trying to build here is something that just works",
    "start": "721079",
    "end": "728640"
  },
  {
    "text": "with several approaches in the past we often find any code sharing options that",
    "start": "728640",
    "end": "735600"
  },
  {
    "text": "we come across to usually be limited to a specific environment such as userland",
    "start": "735600",
    "end": "742380"
  },
  {
    "text": "and if we want to try and apply some code sharing technique to another",
    "start": "742380",
    "end": "748019"
  },
  {
    "text": "environment we usually would have to have a separate mechanism in order to achieve some",
    "start": "748019",
    "end": "755040"
  },
  {
    "text": "similar solution so what I'm really looking for here is distribution of software that works",
    "start": "755040",
    "end": "762420"
  },
  {
    "text": "everywhere Works across any compute primitive in any environment such as node the browser",
    "start": "762420",
    "end": "770040"
  },
  {
    "text": "electron react native I'm looking for Simplicity with little",
    "start": "770040",
    "end": "776519"
  },
  {
    "text": "to no learning curve I don't want to have to learn a whole framework or be locked into framework",
    "start": "776519",
    "end": "783660"
  },
  {
    "text": "specific patterns and I really want to leverage the known ways of working with code today",
    "start": "783660",
    "end": "792380"
  },
  {
    "text": "so the real question is how simple is it let's take a look at configuring an app",
    "start": "793079",
    "end": "800040"
  },
  {
    "text": "that's going to utilize and consume a Federated module",
    "start": "800040",
    "end": "806660"
  },
  {
    "text": "these are two separate repositories two separate applications we have",
    "start": "810120",
    "end": "815639"
  },
  {
    "text": "application a and we have application B inside of there I can see that",
    "start": "815639",
    "end": "822480"
  },
  {
    "text": "application a has a remote referenced as application B",
    "start": "822480",
    "end": "828240"
  },
  {
    "text": "application B is going to expose button and drop down",
    "start": "828240",
    "end": "833639"
  },
  {
    "text": "I'm also going to opt into sharing some additional dependencies where some of",
    "start": "833639",
    "end": "839279"
  },
  {
    "text": "them can support multiple versions and other ones such as react or react Dom I",
    "start": "839279",
    "end": "845339"
  },
  {
    "text": "really need it to be a Singleton in order to ensure that we don't have any tearing of state or context between",
    "start": "845339",
    "end": "851760"
  },
  {
    "text": "these individual applications now that you've seen what the",
    "start": "851760",
    "end": "857940"
  },
  {
    "text": "configuration looks like let's see what the consumption of Federated code would look like",
    "start": "857940",
    "end": "864300"
  },
  {
    "text": "so what you're going to see here is a code snippet from application a",
    "start": "864300",
    "end": "870300"
  },
  {
    "text": "to demonstrate how flexible module Federation is I'm consuming the button",
    "start": "870300",
    "end": "876360"
  },
  {
    "text": "as a dynamic import from application B but I'm going to consume the drop down",
    "start": "876360",
    "end": "882380"
  },
  {
    "text": "statically and synchronously from application b as well",
    "start": "882380",
    "end": "887639"
  },
  {
    "text": "as you can see in the jsx here my Dynamic import is using react lazy",
    "start": "887639",
    "end": "893040"
  },
  {
    "text": "wrapped around a suspense boundary but my drop down is just standard jsx",
    "start": "893040",
    "end": "899399"
  },
  {
    "text": "what's really cool about this is you can require asynchronous code distributed and coordinated at runtime",
    "start": "899399",
    "end": "906839"
  },
  {
    "text": "and I can do so in a synchronous or asynchronous manner",
    "start": "906839",
    "end": "913220"
  },
  {
    "text": "now that you know a little bit about module Federation when should we actually utilize the",
    "start": "914279",
    "end": "920220"
  },
  {
    "text": "technology there are a couple categories that it fits quite nicely into one of them being",
    "start": "920220",
    "end": "926820"
  },
  {
    "text": "Global components these could be your headers Footers General Chrome or shell of your",
    "start": "926820",
    "end": "934560"
  },
  {
    "text": "application they're typically Global and they're a very good first candidate if you're",
    "start": "934560",
    "end": "940920"
  },
  {
    "text": "looking to Federate something it's also very good for features where",
    "start": "940920",
    "end": "946800"
  },
  {
    "text": "it is owned by another team authored by another team",
    "start": "946800",
    "end": "951839"
  },
  {
    "text": "or be consumed by other teams applications that are not strictly owned",
    "start": "951839",
    "end": "957480"
  },
  {
    "text": "by the team providing that feature in the first place",
    "start": "957480",
    "end": "963139"
  },
  {
    "text": "it's also very useful for horizontal enablement so if we think about the",
    "start": "963180",
    "end": "968459"
  },
  {
    "text": "platform team your analytics personalization a b tests all of those",
    "start": "968459",
    "end": "974399"
  },
  {
    "text": "type of things usually would require sticking JavaScript outside the scope of",
    "start": "974399",
    "end": "981180"
  },
  {
    "text": "the internal application which causes a lot of limitations especially if we think about analytics",
    "start": "981180",
    "end": "987360"
  },
  {
    "text": "or a B tests if I can't integrate as a first class piece of software inside of",
    "start": "987360",
    "end": "993480"
  },
  {
    "text": "the react tree I'm usually having to overwrite the Dom with a very primitive",
    "start": "993480",
    "end": "999000"
  },
  {
    "text": "a B test that can't really hook into State context or any other of the react",
    "start": "999000",
    "end": "1004880"
  },
  {
    "text": "life cycle hooks and the last one would be systems migration",
    "start": "1004880",
    "end": "1010940"
  },
  {
    "text": "and there's a couple different ways where you could see this show up based on the patterns that you're trying",
    "start": "1010940",
    "end": "1017480"
  },
  {
    "text": "to use one of them is the Losa architecture which stands for lots of small",
    "start": "1017480",
    "end": "1024620"
  },
  {
    "text": "applications losses systems generally depend on mounting several small parts of an",
    "start": "1024620",
    "end": "1031280"
  },
  {
    "text": "application onto independent Dom nodes under their own react render trees or",
    "start": "1031280",
    "end": "1037640"
  },
  {
    "text": "whatever other framework you might be using module Federation is not specific to react",
    "start": "1037640",
    "end": "1043760"
  },
  {
    "text": "it's also very useful for standard microfrontins in whatever way shape or form",
    "start": "1043760",
    "end": "1049160"
  },
  {
    "text": "that you choose to design them it also offers the opportunity for",
    "start": "1049160",
    "end": "1054980"
  },
  {
    "text": "polylithic architecture versus a monolithic architecture in a polyleth",
    "start": "1054980",
    "end": "1062840"
  },
  {
    "text": "it is really a modular monolith where pieces can be interchanged easily but",
    "start": "1062840",
    "end": "1069860"
  },
  {
    "text": "the application as a whole still behaves in a monolithic manner it's just not",
    "start": "1069860",
    "end": "1075740"
  },
  {
    "text": "deployed in a monolithic manner there's also the good old-fashioned",
    "start": "1075740",
    "end": "1082700"
  },
  {
    "text": "Strangler pattern to get rid of a legacy system and there's a couple ways where Federation could be very handy one way",
    "start": "1082700",
    "end": "1089480"
  },
  {
    "text": "is you could Federate your updated application code into the Legacy system",
    "start": "1089480",
    "end": "1096200"
  },
  {
    "text": "and slowly strangle it out that way the other approach could be that you make",
    "start": "1096200",
    "end": "1101299"
  },
  {
    "text": "the Legacy system Federated and you start building in the new modern",
    "start": "1101299",
    "end": "1108940"
  },
  {
    "text": "platform that you've got and what you do is you import",
    "start": "1108940",
    "end": "1115340"
  },
  {
    "text": "pieces of the Legacy monolith as needed into your new development environment",
    "start": "1115340",
    "end": "1120679"
  },
  {
    "text": "which completely reverses the Strangler pattern instead of taking new and putting it into Old we could take old",
    "start": "1120679",
    "end": "1127820"
  },
  {
    "text": "and pull it into new and strangle it out slowly that way",
    "start": "1127820",
    "end": "1133220"
  },
  {
    "text": "there's also very unique Advantage here for multi-threaded computing especially",
    "start": "1133220",
    "end": "1138260"
  },
  {
    "text": "in node.js but we have also been able to make this work with web workers in the",
    "start": "1138260",
    "end": "1144320"
  },
  {
    "text": "browser since you have a Federated application that's exposing functionality inside of",
    "start": "1144320",
    "end": "1151580"
  },
  {
    "text": "a worker on the browser or server I could hand off any specific part of my",
    "start": "1151580",
    "end": "1158059"
  },
  {
    "text": "application to another thread to handle processing seamlessly",
    "start": "1158059",
    "end": "1164620"
  },
  {
    "text": "in order to get the most out of module Federation we do need to design software",
    "start": "1165679",
    "end": "1172700"
  },
  {
    "text": "in a slightly different way considering that this is a very different Paradigm",
    "start": "1172700",
    "end": "1178340"
  },
  {
    "text": "to the traditional ways we've always had the build and deploy software it also requires some new paradigms on how do we",
    "start": "1178340",
    "end": "1186559"
  },
  {
    "text": "actually just build code that's designed to work in a at runtime orchestrated",
    "start": "1186559",
    "end": "1193280"
  },
  {
    "text": "environment component level ownership really tries to",
    "start": "1193280",
    "end": "1199000"
  },
  {
    "text": "establish a pattern of software that shifts as much responsibility to the",
    "start": "1199000",
    "end": "1205039"
  },
  {
    "text": "component as possible how this would usually show up is",
    "start": "1205039",
    "end": "1212539"
  },
  {
    "text": "as something I refer to as a smart component where instead of having a page container",
    "start": "1212539",
    "end": "1219919"
  },
  {
    "text": "that does all the data fetching and all the business logic and passes all of",
    "start": "1219919",
    "end": "1225140"
  },
  {
    "text": "this data to dumb components we reverse this process a little bit and we say",
    "start": "1225140",
    "end": "1230960"
  },
  {
    "text": "let's have Smart components and dumb pages these smart components should be",
    "start": "1230960",
    "end": "1236660"
  },
  {
    "text": "able to work in a near Standalone Manner and they should also remain self-sustaining",
    "start": "1236660",
    "end": "1244100"
  },
  {
    "text": "we also want to really focus on co-location we want the code to be well organized",
    "start": "1244100",
    "end": "1251299"
  },
  {
    "text": "easy to understand maintainable and in general reduce the fragility",
    "start": "1251299",
    "end": "1257480"
  },
  {
    "text": "when you have a smart page and dumb component what generally ends up happening is all of the page logic",
    "start": "1257480",
    "end": "1264799"
  },
  {
    "text": "starts to get bunched up in that page container this can introduce risks and challenges",
    "start": "1264799",
    "end": "1271100"
  },
  {
    "text": "to scale because if you need something like let's say inventory",
    "start": "1271100",
    "end": "1276919"
  },
  {
    "text": "what exactly is driving the API call and the data transformations to retrieve",
    "start": "1276919",
    "end": "1282980"
  },
  {
    "text": "inventory and Supply it to a specific component if it's inside of the page and the page",
    "start": "1282980",
    "end": "1290480"
  },
  {
    "text": "is feeding data to several components this could end up being pretty hard to untangle and actually understand",
    "start": "1290480",
    "end": "1297640"
  },
  {
    "text": "what feeds what data if somebody doesn't fully understand the",
    "start": "1297640",
    "end": "1303559"
  },
  {
    "text": "data flow and they alter some piece of your query or the shape of data you",
    "start": "1303559",
    "end": "1309320"
  },
  {
    "text": "could risk impacting the stability of your code base",
    "start": "1309320",
    "end": "1314380"
  },
  {
    "text": "we really want Loosely coupled code and I mean this is even before module",
    "start": "1316039",
    "end": "1322100"
  },
  {
    "text": "Federation came along loose coupling and modularity has always been something",
    "start": "1322100",
    "end": "1328280"
  },
  {
    "text": "that's been encouraged with module Federation though it really gives us",
    "start": "1328280",
    "end": "1334280"
  },
  {
    "text": "a strong reason to use Loosely coupled code and to build things more in that",
    "start": "1334280",
    "end": "1339559"
  },
  {
    "text": "pattern if things are Loosely coupled you could almost independently mount it",
    "start": "1339559",
    "end": "1346039"
  },
  {
    "text": "and when this component is mounted or rendered it would more or less just work",
    "start": "1346039",
    "end": "1351260"
  },
  {
    "text": "making it very portable whether it's module Federation npm or just a monorepo",
    "start": "1351260",
    "end": "1359539"
  },
  {
    "text": "with some Sim links the loose coupling of the code",
    "start": "1359539",
    "end": "1365960"
  },
  {
    "text": "means that it could fetch its own data be self-sustaining regardless of",
    "start": "1365960",
    "end": "1372200"
  },
  {
    "text": "distribution patterns the last area that we really want to",
    "start": "1372200",
    "end": "1379159"
  },
  {
    "text": "think about with component level ownership is the ownership portion what are the ownership boundaries and when do",
    "start": "1379159",
    "end": "1386299"
  },
  {
    "text": "they apply and that is something you really want to Choose Wisely because",
    "start": "1386299",
    "end": "1391880"
  },
  {
    "text": "you need to understand where does the scope of what one team owns",
    "start": "1391880",
    "end": "1397520"
  },
  {
    "text": "ends and where does the scope of what another team owns begins",
    "start": "1397520",
    "end": "1403580"
  },
  {
    "text": "with clear ownership boundaries in place it makes it a lot easier to maintain an",
    "start": "1403580",
    "end": "1409220"
  },
  {
    "text": "application and split it up so that the responsibilities of components owned by",
    "start": "1409220",
    "end": "1416000"
  },
  {
    "text": "certain teams is resilient easily known and doesn't have a lot of bindings or",
    "start": "1416000",
    "end": "1422900"
  },
  {
    "text": "data dependencies associated with the page itself the one thing that I would caution is",
    "start": "1422900",
    "end": "1430880"
  },
  {
    "text": "beware of granularity component level ownership is very nice but",
    "start": "1430880",
    "end": "1438020"
  },
  {
    "text": "you don't need to make it super granular this is again where understanding the",
    "start": "1438020",
    "end": "1443720"
  },
  {
    "text": "boundary of ownership is important an example of being too granular could be",
    "start": "1443720",
    "end": "1449299"
  },
  {
    "text": "making a title use component level ownership there's no need for it to do that",
    "start": "1449299",
    "end": "1455960"
  },
  {
    "text": "but let's take something like purchase attributes of a product page where it's",
    "start": "1455960",
    "end": "1463340"
  },
  {
    "text": "a decently sized feature and it handles several responsibilities",
    "start": "1463340",
    "end": "1469340"
  },
  {
    "text": "that may be owned by a different work stream it might need to get inventory",
    "start": "1469340",
    "end": "1474559"
  },
  {
    "text": "get sizes colors price anything like that it's very easy",
    "start": "1474559",
    "end": "1481940"
  },
  {
    "text": "to draw those ownership boundaries or boxes around who owns what and that's",
    "start": "1481940",
    "end": "1486980"
  },
  {
    "text": "really what I would suggest is trying to break it up into what is a complete feature or Zone on the page and whose",
    "start": "1486980",
    "end": "1495020"
  },
  {
    "text": "responsibility is that who owns that who works on it that would be the primary place where",
    "start": "1495020",
    "end": "1501620"
  },
  {
    "text": "you would want to implement something such as component level ownership",
    "start": "1501620",
    "end": "1507100"
  },
  {
    "text": "with component level ownership a question starts to emerge about what's",
    "start": "1508340",
    "end": "1514159"
  },
  {
    "text": "the difference between a micro front end and something that uses",
    "start": "1514159",
    "end": "1519559"
  },
  {
    "text": "component level ownership especially in a module Federation world",
    "start": "1519559",
    "end": "1525679"
  },
  {
    "text": "a micro front end is a pretty loose term these days and it's meant several things as the years have gone by",
    "start": "1525679",
    "end": "1533779"
  },
  {
    "text": "a microfrontin can be small it can be large it could be whole user flows you know",
    "start": "1533779",
    "end": "1541520"
  },
  {
    "text": "there's not really a good boundary on well what exactly is the scope of a",
    "start": "1541520",
    "end": "1547100"
  },
  {
    "text": "micro front end with component level ownership what we're looking for is almost a hybrid between a normal react",
    "start": "1547100",
    "end": "1554059"
  },
  {
    "text": "component and a micro front end the granularity here can be friend and",
    "start": "1554059",
    "end": "1560960"
  },
  {
    "text": "foe you don't want to Federate everything or make everything a micro front end it",
    "start": "1560960",
    "end": "1567080"
  },
  {
    "text": "just doesn't make sense a micro front end is usually mounted",
    "start": "1567080",
    "end": "1573159"
  },
  {
    "text": "utilizing some form of serialized communication bus",
    "start": "1573159",
    "end": "1578860"
  },
  {
    "text": "or browser events or network stitching to kind of assemble these independent",
    "start": "1579200",
    "end": "1586640"
  },
  {
    "text": "parts of an application Federated components on the other hand",
    "start": "1586640",
    "end": "1591740"
  },
  {
    "text": "can coexist in a single application tree they could also be used for a",
    "start": "1591740",
    "end": "1598520"
  },
  {
    "text": "traditional micro front end where you mount several pieces of an application onto independent Dom nodes",
    "start": "1598520",
    "end": "1605900"
  },
  {
    "text": "but the key here is really that level of flexibility if I want to hook into react",
    "start": "1605900",
    "end": "1612620"
  },
  {
    "text": "context and I want a micro front end like resilience Independence autonomy",
    "start": "1612620",
    "end": "1620179"
  },
  {
    "text": "component level ownership and module Federation really marry the two together",
    "start": "1620179",
    "end": "1626360"
  },
  {
    "text": "in ways that it's just not been possible to do in the past",
    "start": "1626360",
    "end": "1631880"
  },
  {
    "text": "to go into a little bit more detail here what Federated components offer Us in",
    "start": "1631880",
    "end": "1638000"
  },
  {
    "text": "comparison is you can pass functions you could share context you can inherit and compose from",
    "start": "1638000",
    "end": "1646039"
  },
  {
    "text": "class-based components but it's designed to behave in a",
    "start": "1646039",
    "end": "1652100"
  },
  {
    "text": "self-sustaining manner it's modeled Loosely on microfront and concepts with",
    "start": "1652100",
    "end": "1658039"
  },
  {
    "text": "an effort to remove the drawbacks that would usually come with micro front ends",
    "start": "1658039",
    "end": "1663919"
  },
  {
    "text": "as we think about them today what we do want from the micro front end",
    "start": "1663919",
    "end": "1670039"
  },
  {
    "text": "Concept in general is if something breaks we don't want it to crash the",
    "start": "1670039",
    "end": "1675080"
  },
  {
    "text": "entire application component level ownership and module Federation give us these type of",
    "start": "1675080",
    "end": "1681620"
  },
  {
    "text": "capabilities so it can all exist in a single app tree go through a single render pass but it",
    "start": "1681620",
    "end": "1691100"
  },
  {
    "text": "can avoid crashing the entire application in the event that one of these components fails for whatever",
    "start": "1691100",
    "end": "1697460"
  },
  {
    "text": "reason the components themselves can be",
    "start": "1697460",
    "end": "1704299"
  },
  {
    "text": "self-sustaining as I said but we also don't want to lock other teams in to",
    "start": "1704299",
    "end": "1711500"
  },
  {
    "text": "something that they can't really plug into or recompose in ways that might make sense",
    "start": "1711500",
    "end": "1717140"
  },
  {
    "text": "so while we have this concept of a self-sustaining smart component we also",
    "start": "1717140",
    "end": "1722419"
  },
  {
    "text": "want to expose the base Primitives that make up the smart component that allow",
    "start": "1722419",
    "end": "1727700"
  },
  {
    "text": "teams to utilize it through module Federation in multiple different ways",
    "start": "1727700",
    "end": "1734480"
  },
  {
    "text": "The Primitives that I really tend to expose most often is the data element whether it's a graphql",
    "start": "1734480",
    "end": "1742580"
  },
  {
    "text": "fragment a fetch call or any other kind of data fetching",
    "start": "1742580",
    "end": "1748940"
  },
  {
    "text": "system I would treat as a independent export inside of the file",
    "start": "1748940",
    "end": "1755960"
  },
  {
    "text": "I would also still want access to the dumb component where it doesn't fetch any data on its own it just expects",
    "start": "1755960",
    "end": "1763220"
  },
  {
    "text": "props to be sent to it and it will render based on those props",
    "start": "1763220",
    "end": "1768260"
  },
  {
    "text": "and then of course I still want to export out a smart component because the majority of use cases would likely be",
    "start": "1768260",
    "end": "1775399"
  },
  {
    "text": "teams aren't really going to be passing a whole lot of data to Smart components",
    "start": "1775399",
    "end": "1781940"
  },
  {
    "text": "that are owned by other teams",
    "start": "1781940",
    "end": "1785500"
  },
  {
    "text": "so where exactly should we use module Federation",
    "start": "1787940",
    "end": "1794480"
  },
  {
    "text": "and knowing where to use it is just as important as knowing when with some",
    "start": "1794480",
    "end": "1799940"
  },
  {
    "text": "slight nuances between the two the one big thing that always stands out to me is exposing arbitrary code can",
    "start": "1799940",
    "end": "1809000"
  },
  {
    "text": "lead to brittle systems leveraging Federated modules along well-defined ownership boundaries is",
    "start": "1809000",
    "end": "1816260"
  },
  {
    "text": "generally the safest bet federating modules should be strategic",
    "start": "1816260",
    "end": "1821360"
  },
  {
    "text": "and have patterns or contracts that are relatively standardized across an",
    "start": "1821360",
    "end": "1827299"
  },
  {
    "text": "organization I'm a big fan of Conway's law and Conway's law essentially states",
    "start": "1827299",
    "end": "1833360"
  },
  {
    "text": "that a code base will more or less represent the organizational structure at a",
    "start": "1833360",
    "end": "1840919"
  },
  {
    "text": "company that works fine most of the time but if",
    "start": "1840919",
    "end": "1846200"
  },
  {
    "text": "everything operates under a Conway's law type structure it starts to break down",
    "start": "1846200",
    "end": "1851360"
  },
  {
    "text": "when you have shared components or horizontal components or horizontal",
    "start": "1851360",
    "end": "1856700"
  },
  {
    "text": "enablement teams where the code base is unable to mimic the organizational structure of a",
    "start": "1856700",
    "end": "1863960"
  },
  {
    "text": "business because some of that software is used across multiple different teams",
    "start": "1863960",
    "end": "1869059"
  },
  {
    "text": "yet still owned by an individual delivery team",
    "start": "1869059",
    "end": "1874220"
  },
  {
    "text": "so module Federation is extremely useful for being able to break out of Conway's law when needed",
    "start": "1874220",
    "end": "1882460"
  },
  {
    "text": "so let's see an example of component level ownership just to kind of tie",
    "start": "1883880",
    "end": "1889340"
  },
  {
    "text": "everything together here this would be the before and what we",
    "start": "1889340",
    "end": "1895159"
  },
  {
    "text": "would have is a product display page it accepts some props that would come",
    "start": "1895159",
    "end": "1900440"
  },
  {
    "text": "from a data fetch or a container and we would pass some of that",
    "start": "1900440",
    "end": "1906380"
  },
  {
    "text": "information into a component that we're going to call purchase attributes",
    "start": "1906380",
    "end": "1912880"
  },
  {
    "text": "this kind of structure is very dependent on the data supplied by the host system",
    "start": "1913279",
    "end": "1920299"
  },
  {
    "text": "which means that it could introduce fragility if purchase attributes was say",
    "start": "1920299",
    "end": "1926419"
  },
  {
    "text": "Federated if the data changes in any way it could break the component or if the component",
    "start": "1926419",
    "end": "1933919"
  },
  {
    "text": "changes in any way and the data pipeline has not been updated inside of the host",
    "start": "1933919",
    "end": "1939200"
  },
  {
    "text": "system it could also break the component so what we want to really do here is try",
    "start": "1939200",
    "end": "1945500"
  },
  {
    "text": "to limit the blast radius and surface area of what kind of API we expose to",
    "start": "1945500",
    "end": "1951760"
  },
  {
    "text": "consuming teams the after when we've implemented",
    "start": "1951760",
    "end": "1958399"
  },
  {
    "text": "something like component level ownership would look more like this the product",
    "start": "1958399",
    "end": "1964520"
  },
  {
    "text": "page would get less information really what we would want purchase",
    "start": "1964520",
    "end": "1969799"
  },
  {
    "text": "attributes to know is a very small API scope such as what's the product ID and",
    "start": "1969799",
    "end": "1977720"
  },
  {
    "text": "maybe what's the selected color of the product that was chosen with something like that it's a lot",
    "start": "1977720",
    "end": "1984440"
  },
  {
    "text": "harder to actually break a component because that surface area and all of",
    "start": "1984440",
    "end": "1990380"
  },
  {
    "text": "those data bindings are not really depending on the parent page the parent page is dumb and all it does is provides",
    "start": "1990380",
    "end": "1998779"
  },
  {
    "text": "some very simple hints to a Smart component and the smart component can",
    "start": "1998779",
    "end": "2005799"
  },
  {
    "text": "use those hints as instructions on what it should do if we drill one in let's see what",
    "start": "2005799",
    "end": "2013720"
  },
  {
    "text": "component level ownership actually looks like when we look at it on a component itself",
    "start": "2013720",
    "end": "2019179"
  },
  {
    "text": "so in here you can see I've got the three export rule in place the first",
    "start": "2019179",
    "end": "2024399"
  },
  {
    "text": "thing that I expose here is the data utility it accepts one argument which is",
    "start": "2024399",
    "end": "2029620"
  },
  {
    "text": "the product ID and it can go out fetch the product data",
    "start": "2029620",
    "end": "2035140"
  },
  {
    "text": "and return it as Json the second attribute that I'm going to expose here is the actual purchase",
    "start": "2035140",
    "end": "2042519"
  },
  {
    "text": "attributes component itself but the dumb component what that one expects is",
    "start": "2042519",
    "end": "2049599"
  },
  {
    "text": "you give it props and it will render the nice reason about having these",
    "start": "2049599",
    "end": "2055960"
  },
  {
    "text": "things split up is maintainability becomes quite easy if you want to know how purchase attributes works all you",
    "start": "2055960",
    "end": "2063099"
  },
  {
    "text": "need to do is go to the purchase attributes component and you can easily find what feeds it data how does it work",
    "start": "2063099",
    "end": "2071440"
  },
  {
    "text": "what does it accept and the last thing that I would export out of here would be the smart component",
    "start": "2071440",
    "end": "2077919"
  },
  {
    "text": "which is really just a combination of the data utility and the dumb component",
    "start": "2077919",
    "end": "2083618"
  },
  {
    "text": "together and now what I end up with is the Smart purchase attributes component and the",
    "start": "2083619",
    "end": "2091118"
  },
  {
    "text": "only kind of contract that I have with the host system is I expect it to receive a prop that has the product ID",
    "start": "2091119",
    "end": "2099099"
  },
  {
    "text": "in it if they send me that prop which I would consider a hint",
    "start": "2099099",
    "end": "2105040"
  },
  {
    "text": "this component server or client side will fetch its own data and pass that",
    "start": "2105040",
    "end": "2111940"
  },
  {
    "text": "data into the dump component",
    "start": "2111940",
    "end": "2116099"
  },
  {
    "text": "I want to take it one step further here we've got component level ownership",
    "start": "2117160",
    "end": "2122920"
  },
  {
    "text": "which is really useful for any kind of organizational structure",
    "start": "2122920",
    "end": "2129460"
  },
  {
    "text": "especially if we look forward at the future of say react 18 where we're going",
    "start": "2129460",
    "end": "2134680"
  },
  {
    "text": "to be getting native async data support out the box",
    "start": "2134680",
    "end": "2139839"
  },
  {
    "text": "component level ownership is geared toward the future while still offering some kind of solution for what we have",
    "start": "2139839",
    "end": "2146980"
  },
  {
    "text": "today if we combine module Federation and component level ownership together",
    "start": "2146980",
    "end": "2152920"
  },
  {
    "text": "there's still one additional step that I usually prefer to put in place",
    "start": "2152920",
    "end": "2158560"
  },
  {
    "text": "I call this extra step the proxy module the idea being I don't want to expose",
    "start": "2158560",
    "end": "2166060"
  },
  {
    "text": "arbitrary pieces of the code base to other applications to consume",
    "start": "2166060",
    "end": "2171640"
  },
  {
    "text": "that could become risky it would also be harder to find what does an application",
    "start": "2171640",
    "end": "2177820"
  },
  {
    "text": "or team expose that we can consume with a proxy object or proxy module",
    "start": "2177820",
    "end": "2185800"
  },
  {
    "text": "what we're really going to do is import the actual base feature from some code",
    "start": "2185800",
    "end": "2191380"
  },
  {
    "text": "base inside of that teams application wrap it in a function and then export it",
    "start": "2191380",
    "end": "2199599"
  },
  {
    "text": "back out wrapped around this proxy function",
    "start": "2199599",
    "end": "2204880"
  },
  {
    "text": "what this lets me do is create very easy intuitive ways to",
    "start": "2204880",
    "end": "2212260"
  },
  {
    "text": "create contracts to create tests to guarantee that the component adjustments",
    "start": "2212260",
    "end": "2218920"
  },
  {
    "text": "or rewrite that I've done to purchase attributes internally does not break the",
    "start": "2218920",
    "end": "2224440"
  },
  {
    "text": "contract expected under the proxy export that would be exposed out of that team",
    "start": "2224440",
    "end": "2230800"
  },
  {
    "text": "via module Federation if it does break that contract because",
    "start": "2230800",
    "end": "2236680"
  },
  {
    "text": "it is proxied out we have the opportunity where we could take the existing contract and transform the data",
    "start": "2236680",
    "end": "2245140"
  },
  {
    "text": "into the new shape that our purchase attributes component might anticipate",
    "start": "2245140",
    "end": "2250300"
  },
  {
    "text": "under the hood so it gives us a little bit more future proofing",
    "start": "2250300",
    "end": "2255400"
  },
  {
    "text": "it also is really useful because now we have a very simple way to create local unit tests where you can still test that",
    "start": "2255400",
    "end": "2263020"
  },
  {
    "text": "purchase attributes works but you have another file where you can go and actually test that if I Supply the",
    "start": "2263020",
    "end": "2270579"
  },
  {
    "text": "agreed upon contract to this proxy module it will still render and return",
    "start": "2270579",
    "end": "2276820"
  },
  {
    "text": "the desired functionality we are already anticipating",
    "start": "2276820",
    "end": "2282119"
  },
  {
    "text": "now that we've gone over module Federation and component level ownership",
    "start": "2284260",
    "end": "2289300"
  },
  {
    "text": "let's kind of tie this all back together next JS is a very popular framework and",
    "start": "2289300",
    "end": "2298359"
  },
  {
    "text": "it's also not really good at microfront ends I think in general any server-side",
    "start": "2298359",
    "end": "2304119"
  },
  {
    "text": "rendered application tends to be quite tricky to create a",
    "start": "2304119",
    "end": "2309220"
  },
  {
    "text": "microfronted pattern out of you either have to depend on stitching layers or",
    "start": "2309220",
    "end": "2314380"
  },
  {
    "text": "infrastructure or ingresses to kind of Bounce the traffic to the right",
    "start": "2314380",
    "end": "2320020"
  },
  {
    "text": "application and if you're trying to just change a component or something like that",
    "start": "2320020",
    "end": "2325780"
  },
  {
    "text": "you pretty much have to npm install it because when you go granular enough",
    "start": "2325780",
    "end": "2332440"
  },
  {
    "text": "there's not really a good way to stitch an individual component into another",
    "start": "2332440",
    "end": "2337900"
  },
  {
    "text": "application and server side render it so the first thing that we're going to",
    "start": "2337900",
    "end": "2342940"
  },
  {
    "text": "see is this is the consumer I'm importing other component from independent remote this is independent remote currently it",
    "start": "2342940",
    "end": "2351160"
  },
  {
    "text": "says hello qcon London we're going to change this component",
    "start": "2351160",
    "end": "2358660"
  },
  {
    "text": "we're going to commit it and we're going to deploy this repo out",
    "start": "2358660",
    "end": "2364359"
  },
  {
    "text": "to production independently we can now see that it is in the process",
    "start": "2364359",
    "end": "2369880"
  },
  {
    "text": "of building and I come back to the page I still see",
    "start": "2369880",
    "end": "2377800"
  },
  {
    "text": "my old content I refresh it I now have the new content in here",
    "start": "2377800",
    "end": "2384160"
  },
  {
    "text": "and if you check it out it was last deployed 13 minutes ago versus the",
    "start": "2384160",
    "end": "2389859"
  },
  {
    "text": "independent remote which was deployed one minute ago if I look in the HTML of",
    "start": "2389859",
    "end": "2395320"
  },
  {
    "text": "this checkout application you can see that HTML is there with the updated code",
    "start": "2395320",
    "end": "2401760"
  },
  {
    "text": "that.serverside and client-side rendered why this is really powerful and what you",
    "start": "2401760",
    "end": "2408760"
  },
  {
    "text": "might not have really seen or noticed in that video is that home page or landing page that you",
    "start": "2408760",
    "end": "2416079"
  },
  {
    "text": "saw it's not just a page with a header and a home page body content",
    "start": "2416079",
    "end": "2423040"
  },
  {
    "text": "that page doesn't actually exist in the checkout application itself the header",
    "start": "2423040",
    "end": "2429760"
  },
  {
    "text": "part comes from a independently deployed repo and uses module Federation to pull the",
    "start": "2429760",
    "end": "2436720"
  },
  {
    "text": "navigation in to this checkout application the body content or the home page that",
    "start": "2436720",
    "end": "2442900"
  },
  {
    "text": "was there doesn't exist in the checkout app either it's actually using module Federation as",
    "start": "2442900",
    "end": "2449320"
  },
  {
    "text": "well and it's pulling that runtime through a software stream into this checkout application",
    "start": "2449320",
    "end": "2456040"
  },
  {
    "text": "performing the data Fetch and the server or client-side render and hydration",
    "start": "2456040",
    "end": "2462339"
  },
  {
    "text": "as well the content that we just changed our little hello qcon London component",
    "start": "2462339",
    "end": "2470980"
  },
  {
    "text": "is Federated inside of the home page content itself",
    "start": "2470980",
    "end": "2478300"
  },
  {
    "text": "which means that the checkout application is using module Federation",
    "start": "2478300",
    "end": "2483520"
  },
  {
    "text": "to pull in the home page body and the home page body is using module",
    "start": "2483520",
    "end": "2489339"
  },
  {
    "text": "Federation to pull in another application's hello component",
    "start": "2489339",
    "end": "2494980"
  },
  {
    "text": "so this also works with circular Imports and nested remotes without sacrificing",
    "start": "2494980",
    "end": "2502020"
  },
  {
    "text": "round-trip time hydration mismatches or anything else",
    "start": "2502020",
    "end": "2508300"
  },
  {
    "text": "in a traditional world I would usually have to take the hello component",
    "start": "2508300",
    "end": "2513579"
  },
  {
    "text": "package it on npm publish it to npm go to the home application",
    "start": "2513579",
    "end": "2520180"
  },
  {
    "text": "I would have to install the hello component into the home application",
    "start": "2520180",
    "end": "2526240"
  },
  {
    "text": "publish that to npm as well then go over to my checkout application or shell",
    "start": "2526240",
    "end": "2532960"
  },
  {
    "text": "and install the latest copy of the home page",
    "start": "2532960",
    "end": "2538720"
  },
  {
    "text": "so it would require at least 20 minutes of work to actually",
    "start": "2538720",
    "end": "2544540"
  },
  {
    "text": "get the change propagated through all the applications that we need to in order for it to show up the",
    "start": "2544540",
    "end": "2552099"
  },
  {
    "text": "way that we just saw it in a module Federation World however it",
    "start": "2552099",
    "end": "2557440"
  },
  {
    "text": "took 56 seconds to propagate across all applications at all layers without any",
    "start": "2557440",
    "end": "2565060"
  },
  {
    "text": "other coordination required from anybody else in short it really gives us that just",
    "start": "2565060",
    "end": "2572440"
  },
  {
    "text": "works feel and that really wraps up my talk on",
    "start": "2572440",
    "end": "2577540"
  },
  {
    "text": "module Federation and to be honest this is really just the beginning you can imagine what's going to come next now",
    "start": "2577540",
    "end": "2584800"
  },
  {
    "text": "that we have server-side rendering client-side rendering we have react native support we even have webassembly",
    "start": "2584800",
    "end": "2592420"
  },
  {
    "text": "support for polyglot at runtime orchestration",
    "start": "2592420",
    "end": "2597579"
  },
  {
    "text": "some of the things that we're going to look at doing in the future is making the entire npm registry available via",
    "start": "2597579",
    "end": "2604900"
  },
  {
    "text": "module Federation and my ultimate goal is to try and create a world where we",
    "start": "2604900",
    "end": "2610599"
  },
  {
    "text": "still have a resilient system that can be versioned but does not require",
    "start": "2610599",
    "end": "2617400"
  },
  {
    "text": "redeployment or software installations in order to retrieve updates thank you",
    "start": "2617400",
    "end": "2624880"
  },
  {
    "text": "for listening and I hope you enjoy the rest of this conference",
    "start": "2624880",
    "end": "2630060"
  },
  {
    "text": "thanks Zach for the talk I hope that was uh insightful as uh for me okay yeah we",
    "start": "2632339",
    "end": "2638560"
  },
  {
    "text": "see the first appreciation so thank you uh do you have any question for Zach and",
    "start": "2638560",
    "end": "2645280"
  },
  {
    "text": "in the meantime I will ask for a personal question okay I'm just Guru Zach so",
    "start": "2645280",
    "end": "2651460"
  },
  {
    "text": "um obviously as you mentioned in your talk there are different ways that you you can use much Federation uh I would",
    "start": "2651460",
    "end": "2658780"
  },
  {
    "text": "like I would like to ask you one question but with two answers so the first one is",
    "start": "2658780",
    "end": "2664300"
  },
  {
    "text": "um what is the craziest implementation that you see for much Federation and",
    "start": "2664300",
    "end": "2669819"
  },
  {
    "text": "instead which one uh is the most useful one from from your perspective",
    "start": "2669819",
    "end": "2676060"
  },
  {
    "text": "okay I guess the craziest one that I've seen is um using Federation inside of",
    "start": "2676060",
    "end": "2681760"
  },
  {
    "text": "cars to actually control the microcontrollers um so that when teams need to deploy",
    "start": "2681760",
    "end": "2688420"
  },
  {
    "text": "updates to the cars themselves to you know controlling the various onboard systems of the vehicles they can do it",
    "start": "2688420",
    "end": "2694420"
  },
  {
    "text": "at run they can do it at run time so whenever the car next starts the application instead of having to do firmware updates",
    "start": "2694420",
    "end": "2700960"
  },
  {
    "text": "you just boot the system and it automatically has the latest stuff I've seen a similar kind of thing done to",
    "start": "2700960",
    "end": "2707200"
  },
  {
    "text": "popular game consoles that most of us probably own where the Bluetooth controllers and all the services for",
    "start": "2707200",
    "end": "2713440"
  },
  {
    "text": "running the game console are using the same thing to avoid having to do firmware updates to your game consoles",
    "start": "2713440",
    "end": "2719859"
  },
  {
    "text": "the most useful like scenario that I've come across I would say is probably on",
    "start": "2719859",
    "end": "2726040"
  },
  {
    "text": "the back inside for something like hexagonal architectures so with Federation working on node.js it offers",
    "start": "2726040",
    "end": "2732640"
  },
  {
    "text": "a very different kind of design pattern where we can do something like um",
    "start": "2732640",
    "end": "2739240"
  },
  {
    "text": "uh automatic rollbacks or hot reloading of the production servers without having to tear them down or have multiple",
    "start": "2739240",
    "end": "2745599"
  },
  {
    "text": "instances of something out there so if I want to say for hexagonal architecture",
    "start": "2745599",
    "end": "2751240"
  },
  {
    "text": "on the back end it's super helpful because I can create high density Computing models if I have a",
    "start": "2751240",
    "end": "2756400"
  },
  {
    "text": "multi-threaded Lambda or container I don't need to deploy each service out to another container but I could use",
    "start": "2756400",
    "end": "2762640"
  },
  {
    "text": "Federation stream the code from these individual deploys into a single container and once that container is",
    "start": "2762640",
    "end": "2769839"
  },
  {
    "text": "under too much load I can still Shard them back out and just go over the network to another container which can",
    "start": "2769839",
    "end": "2775480"
  },
  {
    "text": "repeat the same process so you can dynamically you know expand and contract these systems",
    "start": "2775480",
    "end": "2781900"
  },
  {
    "text": "um and they're usually very fast because everything that you need would be in memory if I can just pull the API into",
    "start": "2781900",
    "end": "2787599"
  },
  {
    "text": "process and use in-memory communication it's typically more resilient and faster than going over the network",
    "start": "2787599",
    "end": "2795040"
  },
  {
    "text": "makes sense uh I don't see other questions but I have another one",
    "start": "2795040",
    "end": "2800579"
  },
  {
    "text": "considering that uh We Are Holy here um I'm interested so towards the end you",
    "start": "2800579",
    "end": "2805960"
  },
  {
    "text": "were sharing what are the opportunities and the future of much Federation uh do you reckon that much Federation would be",
    "start": "2805960",
    "end": "2813880"
  },
  {
    "text": "uh implemented not only the JavaScript work like I don't know Java or other",
    "start": "2813880",
    "end": "2819640"
  },
  {
    "text": "solution uh maybe HTML even or css who knows uh that he is using uh the same",
    "start": "2819640",
    "end": "2826540"
  },
  {
    "text": "logic at least yeah so one thing I didn't really uh cover well in in the in the talk was",
    "start": "2826540",
    "end": "2833859"
  },
  {
    "text": "that Federation works with anything webpack can understand so it's not just JavaScript limited it can be images it",
    "start": "2833859",
    "end": "2840640"
  },
  {
    "text": "could be CSS side effects webassembly pretty much anything that can be processed during the webpack build can",
    "start": "2840640",
    "end": "2847119"
  },
  {
    "text": "be distributed and consumed in any way uh what I have seen on the polyglot side",
    "start": "2847119",
    "end": "2852280"
  },
  {
    "text": "is um you know having something like a hexagonal backend where it's node orchestrated so it's powered by",
    "start": "2852280",
    "end": "2858460"
  },
  {
    "text": "Federation but through the port flow we'll be pulling in say the Java uh",
    "start": "2858460",
    "end": "2863500"
  },
  {
    "text": "payments processing and as we need to process a payment I can stream the Java application in there execute Java code",
    "start": "2863500",
    "end": "2869800"
  },
  {
    "text": "pass that then to say something in Python so on and so forth so it's definitely not limited to Java it's",
    "start": "2869800",
    "end": "2875980"
  },
  {
    "text": "limited to what can webpack compile as a whole anything that you can import and successfully build you can distribute",
    "start": "2875980",
    "end": "2882040"
  },
  {
    "text": "however you want through Federation to any other thing that can consume it okay fantastic so it's time to wrap up now uh",
    "start": "2882040",
    "end": "2889720"
  },
  {
    "text": "thank you very much for following uh this session and the front-end track I hope that you find insightful and maybe",
    "start": "2889720",
    "end": "2896380"
  },
  {
    "text": "you have some actionable items that you can use tomorrow when you go back to uh the office uh now if you want to if you",
    "start": "2896380",
    "end": "2903460"
  },
  {
    "text": "have any questions for Zach or if you want to know more about much Federation or restock uh follow us in the uh",
    "start": "2903460",
    "end": "2909940"
  },
  {
    "text": "breakout session thank you very much",
    "start": "2909940",
    "end": "2913859"
  },
  {
    "text": "[Music] thank you",
    "start": "2916260",
    "end": "2922079"
  }
]