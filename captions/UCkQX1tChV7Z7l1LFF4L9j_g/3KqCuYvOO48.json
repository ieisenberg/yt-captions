[
  {
    "text": "[Music]",
    "start": "1990",
    "end": "14789"
  },
  {
    "text": "I'm incredibly excited to be speaking to all of you today about ecmascript 6 the",
    "start": "15519",
    "end": "21080"
  },
  {
    "text": "next major revision of the standard that covers JavaScript along with some other programming languages so let's go ahead",
    "start": "21080",
    "end": "28439"
  },
  {
    "text": "and get started at W3 con one of the things I said was that every technology had a story behind it and this",
    "start": "28439",
    "end": "35600"
  },
  {
    "text": "particular worldview was imparted upon me by Faruk atess about a year ago I was watching him speak at hl5 Devcon uh as",
    "start": "35600",
    "end": "43239"
  },
  {
    "text": "it turns out and um so faruko is the modernizer is the developer of modernizer he is also a an amazing open",
    "start": "43239",
    "end": "50440"
  },
  {
    "text": "web Advocate and one of the thing and his uh presentation was about the beauty",
    "start": "50440",
    "end": "55640"
  },
  {
    "text": "of constraints and specifically embracing them in software design",
    "start": "55640",
    "end": "61000"
  },
  {
    "text": "and the way that he presented it in this type of frame story was particularly engaging because a lot of times when you",
    "start": "61000",
    "end": "68880"
  },
  {
    "text": "see at particular technology the only context you have is the final product you don't necessarily have the story",
    "start": "68880",
    "end": "75439"
  },
  {
    "text": "that's surrounding it you haven't seen all the decisions that made to the that",
    "start": "75439",
    "end": "80720"
  },
  {
    "text": "resulted in the way that that technology was designed and a lot of times it's very difficult to be able to grasp why",
    "start": "80720",
    "end": "87159"
  },
  {
    "text": "we have a particular version of a feature or why something ended up being the way it did and without uh having",
    "start": "87159",
    "end": "95280"
  },
  {
    "text": "this frame story very few decisions make sense now ecmascript 6 has had a very",
    "start": "95280",
    "end": "101159"
  },
  {
    "text": "long and torturous road that I'll cover before we delve into some of the features and it's not been without its",
    "start": "101159",
    "end": "107360"
  },
  {
    "text": "fair share of controversy there are developers who have wanted to get started with EOS script 6 but have a few",
    "start": "107360",
    "end": "112880"
  },
  {
    "text": "qualms either about the syntax or about some of the features and without",
    "start": "112880",
    "end": "118680"
  },
  {
    "text": "understanding the story who can blame them it's very difficult I think to be able to make an to step back and make an",
    "start": "118680",
    "end": "124680"
  },
  {
    "text": "objective assessment about the value of a feature when you don't have the the",
    "start": "124680",
    "end": "129840"
  },
  {
    "text": "full context for its emergence and so what I wanted to do today was to briefly cover how osri 6 became the language",
    "start": "129840",
    "end": "138239"
  },
  {
    "text": "that it is today and some of the interesting challenges that it's faced on along this road will then proceed",
    "start": "138239",
    "end": "144560"
  },
  {
    "text": "with a deep dive into some of my favorite parts of the language now the talk is titled OS six the refined parts",
    "start": "144560",
    "end": "151920"
  },
  {
    "text": "and I think this idea of refinements is very key to the next iteration language there are a lot of major features in it",
    "start": "151920",
    "end": "158879"
  },
  {
    "text": "everything from classes and modules to entirely new syntaxes for doing the",
    "start": "158879",
    "end": "164000"
  },
  {
    "text": "common operations that we as programmers work on every day and I wanted to step",
    "start": "164000",
    "end": "169800"
  },
  {
    "text": "back um and give some of these smaller features some of the highlights because",
    "start": "169800",
    "end": "174840"
  },
  {
    "text": "features like classes and modules I think either many of you have heard of or they're going to rece receive the",
    "start": "174840",
    "end": "180480"
  },
  {
    "text": "most coverage as soon as they're released and so what I wanted to do today was to Showcase some of those",
    "start": "180480",
    "end": "186440"
  },
  {
    "text": "features that might not be that world changing at first glance but that will nonetheless make it a lot easier for you",
    "start": "186440",
    "end": "192640"
  },
  {
    "text": "to write bits of code that you do so JavaScript by itself is by most accounts",
    "start": "192640",
    "end": "200599"
  },
  {
    "text": "the world's most popular programming language because every browser made today uh and certainly all the major",
    "start": "200599",
    "end": "207000"
  },
  {
    "text": "browsers ship with a JavaScript interpreter and the barrier to entry for it is incredibly low all you need to do",
    "start": "207000",
    "end": "213519"
  },
  {
    "text": "to get started with JavaScript is just open up the dev console and begin typing away and thanks to the recent uh",
    "start": "213519",
    "end": "220360"
  },
  {
    "text": "incredible growth in the frontend tooling Community there are a it's easier than ever to get started building",
    "start": "220360",
    "end": "226480"
  },
  {
    "text": "apps of increasingly complex scale but JavaScript isn't just for the front end anymore of course node.js",
    "start": "226480",
    "end": "233000"
  },
  {
    "text": "has made has completely changed the applications of JavaScript on the server",
    "start": "233000",
    "end": "238280"
  },
  {
    "text": "as well and note has a wide variety of uses you can use it everything from tooling to uh uh rudimentary chat",
    "start": "238280",
    "end": "246920"
  },
  {
    "text": "servers or your typical HTTP servers and now build databases all aart thanks to",
    "start": "246920",
    "end": "252239"
  },
  {
    "text": "level DB movement so JavaScript is incredibly versatile it's everywhere how",
    "start": "252239",
    "end": "257919"
  },
  {
    "text": "are we going to move it forward because we can't break backward compatibility with some of the existing standards with",
    "start": "257919",
    "end": "264040"
  },
  {
    "text": "with some of the existing code that's out there today we've tried doing that in past efforts and the results haven't",
    "start": "264040",
    "end": "269440"
  },
  {
    "text": "been good so ecmascript 6 is an attempt to learn from some of those mistakes as well and to focus on getting some of the",
    "start": "269440",
    "end": "277039"
  },
  {
    "text": "refinements write so that developers can continue using the code that they write today and not have to worry about it",
    "start": "277039",
    "end": "282880"
  },
  {
    "text": "breaking when a new redition of language comes out so let's begin with a story",
    "start": "282880",
    "end": "288479"
  },
  {
    "text": "our story starts in 1995 with an engineer at Netscape Communications",
    "start": "288479",
    "end": "293680"
  },
  {
    "text": "Corporation named Brendan Ike uh Brendan Ike was tasked with uh develop a new",
    "start": "293680",
    "end": "300400"
  },
  {
    "text": "client side scripting language to complement the latest and greatest technology that sun built at the time",
    "start": "300400",
    "end": "307080"
  },
  {
    "text": "which was Java now Java was perhaps the best way to create interactive immersive",
    "start": "307080",
    "end": "312960"
  },
  {
    "text": "experiences again 1995 but Java code Java applets didn't",
    "start": "312960",
    "end": "318880"
  },
  {
    "text": "MH very well with the remainder of the page they could perform some basic introspection into their environment but",
    "start": "318880",
    "end": "324319"
  },
  {
    "text": "they didn't have access to every element on the page or or um have any type of",
    "start": "324319",
    "end": "329759"
  },
  {
    "text": "meaningful interactivity with them uh similarly for small bits of interactivity so in uh say menus or",
    "start": "329759",
    "end": "337479"
  },
  {
    "text": "basic client side validation it was simply unreasonable to expect that users would wait while the while your browser",
    "start": "337479",
    "end": "345680"
  },
  {
    "text": "downloaded a Java applet over a 28.8 bit dialup connection again mid90s and then",
    "start": "345680",
    "end": "353120"
  },
  {
    "text": "wait for the Java plugin to kick in and for the Java runtime environment to start up that wasn't the way that",
    "start": "353120",
    "end": "358160"
  },
  {
    "text": "developers were going to do things but at the same time this Allure of having Java as a write once run everywhere",
    "start": "358160",
    "end": "365199"
  },
  {
    "text": "language was very appealing and so it was important to have a client side",
    "start": "365199",
    "end": "370599"
  },
  {
    "text": "scripting language to complement that now uh Brendan named his original creation live script it was subsequently",
    "start": "370599",
    "end": "377440"
  },
  {
    "text": "renamed to mocha and then in a lastage attempt to capitalize upon the marketing surrounding Java it became known as",
    "start": "377440",
    "end": "384199"
  },
  {
    "text": "JavaScript and we've been we've all been confused by the name ever since now jav",
    "start": "384199",
    "end": "389680"
  },
  {
    "text": "script though quickly eclipsed its uh distant and rather confusingly named cousin and was then picked up by",
    "start": "389680",
    "end": "395800"
  },
  {
    "text": "Microsoft and implemented in the latest iteration of its browser which at the time was inter Explorer 3 but because",
    "start": "395800",
    "end": "403000"
  },
  {
    "text": "there was no definitive specification for JavaScript at the time Microsoft did the only thing that any good engineering",
    "start": "403000",
    "end": "409319"
  },
  {
    "text": "company would invariably do they reverse engineered Netscape supplementations and without that formal spec of course",
    "start": "409319",
    "end": "416199"
  },
  {
    "text": "different key differences arose and about a year later in 1996 Netscape",
    "start": "416199",
    "end": "421840"
  },
  {
    "text": "Microsoft and a Consortium of other companies stepped forward and decided to submit the version of JavaScript to the",
    "start": "421840",
    "end": "429240"
  },
  {
    "text": "ecma the European computer manufacturers Association and the result of this was",
    "start": "429240",
    "end": "436120"
  },
  {
    "text": "the emergence of a standard called ecmascript now nobody had particularly cared for the name ecmascript uh uh",
    "start": "436120",
    "end": "442199"
  },
  {
    "text": "brandan Ike was once known to refer to it as that it sounded like a skin disease it was an it was really this",
    "start": "442199",
    "end": "448720"
  },
  {
    "text": "verbose tedious trade name that was only used to protect against uh trademarks and to have some kind of distinguished",
    "start": "448720",
    "end": "455280"
  },
  {
    "text": "name for the standard but nonetheless uh JavaScript and jscript continued to",
    "start": "455280",
    "end": "460400"
  },
  {
    "text": "evolve and emerge and soon there was a second edition of the language that was published primarily for uh bringing it",
    "start": "460400",
    "end": "466599"
  },
  {
    "text": "into compliance with exist existing International standards but things became interesting in 1999 with the",
    "start": "466599",
    "end": "472960"
  },
  {
    "text": "emergence of the Third Edition of ecmascript now it included features that today we'd find today we couldn't think",
    "start": "472960",
    "end": "480080"
  },
  {
    "text": "of JavaScript without them things like regular expressions or TR catch before this point exception handing JavaScript",
    "start": "480080",
    "end": "486400"
  },
  {
    "text": "was easy meaning that there wasn't any if your script through a runtime exception your browser would stop",
    "start": "486400",
    "end": "492159"
  },
  {
    "text": "executing it that's it there was no granular exception handling things like the instance of operator uh additional",
    "start": "492159",
    "end": "498199"
  },
  {
    "text": "Loops uh array and object literals these are all fundamentals that we would",
    "start": "498199",
    "end": "503479"
  },
  {
    "text": "consider that we would be we couldn't write our JavaScript applications without them and",
    "start": "503479",
    "end": "510039"
  },
  {
    "text": "and equiscript 3 was also built to anticipate future growth with an upcoming fourth edition of the of the",
    "start": "510039",
    "end": "516440"
  },
  {
    "text": "standard but things didn't quite work out the way that the EA had intended in",
    "start": "516440",
    "end": "521719"
  },
  {
    "text": "late 2004 early 2005 the EA the uh working group responsible for innovating",
    "start": "521719",
    "end": "527839"
  },
  {
    "text": "the language within tc39 with within the ecma named tc39 just short for technical",
    "start": "527839",
    "end": "533800"
  },
  {
    "text": "committee 39 had decided to attempt to assimilate some of the featur features",
    "start": "533800",
    "end": "539760"
  },
  {
    "text": "that macromedia had developed in its dialect of ecmascript called action script so whereas JavaScript was a",
    "start": "539760",
    "end": "545720"
  },
  {
    "text": "relatively conservative departure from ecmascript again primarily due to the naming and some U Netscape and later",
    "start": "545720",
    "end": "552160"
  },
  {
    "text": "Milla specific extensions ecmascript really extended the JavaScript language",
    "start": "552160",
    "end": "557200"
  },
  {
    "text": "in several key ways it introduced classes and modules packages name spaces",
    "start": "557200",
    "end": "562959"
  },
  {
    "text": "optional static typing type annotations and this doesn't really look like the JavaScript that we write today so what",
    "start": "562959",
    "end": "570200"
  },
  {
    "text": "happened in between there around in late 2005 there was there was a movement that",
    "start": "570200",
    "end": "576720"
  },
  {
    "text": "would change everything on the web and this was Ajax suddenly with the emergence of libraries like prototype",
    "start": "576720",
    "end": "583760"
  },
  {
    "text": "Dojo Moi kit Rico name many names which have since gone by it was very easy",
    "start": "583760",
    "end": "591200"
  },
  {
    "text": "suddenly to build complex interactive apps that's not to say that developers hadn't been building these kinds of",
    "start": "591200",
    "end": "596720"
  },
  {
    "text": "applications before but rather that at this point it became mainstream and with",
    "start": "596720",
    "end": "602720"
  },
  {
    "text": "the incredible growth in the J community at the time it was in an incredibly difficult proposition to go to",
    "start": "602720",
    "end": "608880"
  },
  {
    "text": "developers and say that in a year's time or in two years the code they were writing would break easar 4 was not",
    "start": "608880",
    "end": "615760"
  },
  {
    "text": "intended to be Backward Compatible initially in fact some of the key one of",
    "start": "615760",
    "end": "621000"
  },
  {
    "text": "the key goals of the language was to uh fix some of the issues that had",
    "start": "621000",
    "end": "626800"
  },
  {
    "text": "cropped up in the past but now with W with developers continuing to build",
    "start": "626800",
    "end": "632000"
  },
  {
    "text": "existing code on top of it it really wasn't practical to create a backward incompatable version of the language so",
    "start": "632000",
    "end": "638000"
  },
  {
    "text": "ecmascript 4 the The Proposal was eventually cancelled the only hint of it is um looking at the various",
    "start": "638000",
    "end": "644600"
  },
  {
    "text": "specification versions and seeing that there was no ecmascript 4 released on um the EC's website in fact there is no",
    "start": "644600",
    "end": "652160"
  },
  {
    "text": "official specification floating around Fort because it was never finalized until that point and the technical",
    "start": "652160",
    "end": "657560"
  },
  {
    "text": "committee went back to their drawing board and decided how do we innovate the language but in a way that's Backward",
    "start": "657560",
    "end": "663560"
  },
  {
    "text": "Compatible and in with the code that developers are writing today and so in",
    "start": "663560",
    "end": "669680"
  },
  {
    "text": "2009 uh they released the fifth edition of the ecmascript standard the fifth edition was a relatively conservative",
    "start": "669680",
    "end": "676440"
  },
  {
    "text": "departure from the Third Edition it provided some nicer uh Syntax for Getters and Setters the only major",
    "start": "676440",
    "end": "683279"
  },
  {
    "text": "syntactic Edition that wasn't a codification of an existing defao standard it provided some object",
    "start": "683279",
    "end": "689480"
  },
  {
    "text": "reflection methods array extras that had existed in Firefox since Firefox version 2 so not a lot of particularly in",
    "start": "689480",
    "end": "697360"
  },
  {
    "text": "interesting surface changes but under the hood it tightened down a lot of internal semantics it became a much more",
    "start": "697360",
    "end": "704279"
  },
  {
    "text": "precise strict and unambiguous standard on top of which the tc39 could continue",
    "start": "704279",
    "end": "709920"
  },
  {
    "text": "to innovate and build other language features and that brings us to where we are today in",
    "start": "709920",
    "end": "717360"
  },
  {
    "text": "2013 with in two the ecmascript 6 specification is scheduled for is",
    "start": "717360",
    "end": "723240"
  },
  {
    "text": "scheduled to be released by the end of this year in December and it has a lot of features in it but if you look at",
    "start": "723240",
    "end": "729600"
  },
  {
    "text": "this list a few of features jump out things like classes modules block scope",
    "start": "729600",
    "end": "734639"
  },
  {
    "text": "iterators a lot of these features did make their debut in easp 4 in the cancel",
    "start": "734639",
    "end": "740240"
  },
  {
    "text": "fourth edition but whereas previously there were nice to have features that could be assimilated from other other",
    "start": "740240",
    "end": "746519"
  },
  {
    "text": "languages now there's been an eye toward making them mesh very well with existing code that developers are writing the",
    "start": "746519",
    "end": "753000"
  },
  {
    "text": "technical committee looked at a lot of look at the common patterns that developers are using and try to figure",
    "start": "753000",
    "end": "758920"
  },
  {
    "text": "out what are some what are some solutions that would best be adopted at the language level and so what I'm and a",
    "start": "758920",
    "end": "767440"
  },
  {
    "text": "lot of these we we don't have time today to cover nearly all all these features in detail but I wanted to give you just",
    "start": "767440",
    "end": "774480"
  },
  {
    "text": "a quick introduction to them so that hopefully you could see a feature that strikes you and you might find a way to",
    "start": "774480",
    "end": "780920"
  },
  {
    "text": "use it in your application the goal here is to provide some practical syntax that you can get started with today and we'll",
    "start": "780920",
    "end": "787920"
  },
  {
    "text": "go ahead and the other point of course of ecmascript 6 is to build a foundation",
    "start": "787920",
    "end": "794279"
  },
  {
    "text": "for future visions of the language ospt 7 has a lot of features planned for it things like a rethinking of the",
    "start": "794279",
    "end": "800560"
  },
  {
    "text": "concurrency model of the language as well as features like object. observe now these features are ones that would",
    "start": "800560",
    "end": "807440"
  },
  {
    "text": "still be fantastic to have in the current iteration of language but there just wasn't enough time to build them",
    "start": "807440",
    "end": "813440"
  },
  {
    "text": "right it was tc39 needs to get this version of the specification out the door so that developers can start using",
    "start": "813440",
    "end": "820560"
  },
  {
    "text": "these new features and then at a later time once the proposals are finalized subsequent versions of the language will",
    "start": "820560",
    "end": "826040"
  },
  {
    "text": "be released so ecmascript 6 is both a codification of existing patterns and a",
    "start": "826040",
    "end": "831560"
  },
  {
    "text": "platform that continues the trend by es5 to allow to allow future Innovations in",
    "start": "831560",
    "end": "837279"
  },
  {
    "text": "the language and we'll go and begin by starting to talk starting to talk about generators which are an interesting",
    "start": "837279",
    "end": "843880"
  },
  {
    "text": "pattern and that tie nicely with the theme that'll be furthered in es7 with uh the new concurrency model a",
    "start": "843880",
    "end": "851759"
  },
  {
    "text": "generator is a form of a co-routine so what's a cortine a cortine is nothing",
    "start": "851759",
    "end": "857079"
  },
  {
    "text": "more than a construct that allows you to suspend and resume execution of a particular function at multiple",
    "start": "857079",
    "end": "863759"
  },
  {
    "text": "locations now it's important to note that suspending does not mean blocking I think there's been uh some",
    "start": "863759",
    "end": "869880"
  },
  {
    "text": "misconceptions about looking at this and seeing that a generator will automatically block your code so that nothing else can run and that's actually",
    "start": "869880",
    "end": "876759"
  },
  {
    "text": "not the case at all it's a generator is generators have three multiple uh three",
    "start": "876759",
    "end": "883279"
  },
  {
    "text": "patterns that you should know about there's the new yield statement which suspends execution of the function",
    "start": "883279",
    "end": "890440"
  },
  {
    "text": "there's a next method that the resulting generate object haves that allows you to resume execution and then there's a",
    "start": "890440",
    "end": "897279"
  },
  {
    "text": "throw method that allows you to propagate an exception to the parent function and have it be thrown at the",
    "start": "897279",
    "end": "902759"
  },
  {
    "text": "position of that yield expression so we'll go ahead and begin by looking uh",
    "start": "902759",
    "end": "908320"
  },
  {
    "text": "at generators through a simple Fibonacci Sequence example um H how many of you know Angus scroll or have followed some",
    "start": "908320",
    "end": "915279"
  },
  {
    "text": "of his blog articles okay there is a fantastic series that he's written about if Hemingway wrote JavaScript and he",
    "start": "915279",
    "end": "921959"
  },
  {
    "text": "covers how various uh fed literary figures would tackle uh writing the Fibonacci function in JavaScript and",
    "start": "921959",
    "end": "928519"
  },
  {
    "text": "this is the generator this is the Plain Jane generator version of that there are ways that we can make this a bit more",
    "start": "928519",
    "end": "934959"
  },
  {
    "text": "fancy but we'll just look at the basics so the first thing you'll notice about this function is that we have the",
    "start": "934959",
    "end": "942000"
  },
  {
    "text": "regular function keybo but with an asterisk after it that's an indication that this function is actually a",
    "start": "942000",
    "end": "948279"
  },
  {
    "text": "generator function the reason we need it is because the yield keyword that allows you to yield a particular value is",
    "start": "948279",
    "end": "955160"
  },
  {
    "text": "actually not a reserved word in the current in ospt 5 and earlier so there",
    "start": "955160",
    "end": "961240"
  },
  {
    "text": "needs to be a way to distinguish a regular function body which can freely use yield as an identifier from any",
    "start": "961240",
    "end": "967199"
  },
  {
    "text": "other uh type of from uh from a generator function in which this has a special meaning so you can see that here",
    "start": "967199",
    "end": "973759"
  },
  {
    "text": "we're initializing two values uh uh two variables previous and current this is using an example of the destructuring",
    "start": "973759",
    "end": "980279"
  },
  {
    "text": "assignment syntax we'll cover that in this presentation as well because it's also one of my absolute favorite features in the language and then we",
    "start": "980279",
    "end": "987120"
  },
  {
    "text": "enter this infinite Loop now if we were ex if this were not a generator function",
    "start": "987120",
    "end": "992240"
  },
  {
    "text": "if we were if we were to execute this function outright what would happen is that our interpreter would would see",
    "start": "992240",
    "end": "997800"
  },
  {
    "text": "this function and set up a stack set up a stack frame for it uh set up any um an execution context to which you could",
    "start": "997800",
    "end": "1003959"
  },
  {
    "text": "bind variables and begin executing it and because they have an infinite Loop in it that function would never stop",
    "start": "1003959",
    "end": "1009959"
  },
  {
    "text": "right it would consume all of your CPU and there would be no way to get out of it short of either Force quitting your",
    "start": "1009959",
    "end": "1015079"
  },
  {
    "text": "browser or uh killing your process in the case of node but a generator is",
    "start": "1015079",
    "end": "1020600"
  },
  {
    "text": "different a generator indicates the engine that we don't want to immediately execute and evaluate this function in",
    "start": "1020600",
    "end": "1026120"
  },
  {
    "text": "its entirety what we do is we is the engine will continue executing each line",
    "start": "1026120",
    "end": "1031280"
  },
  {
    "text": "as normal but then it Encounters this yield statement and the yield statement is meant to uh is meant to take the",
    "start": "1031280",
    "end": "1039558"
  },
  {
    "text": "current state of the function so whatever in this case whatever bit of State we want to pass it and gives it to",
    "start": "1039559",
    "end": "1045240"
  },
  {
    "text": "a resulting generator object so when we invoke the Fibonacci fun function we're not going to get any the return value",
    "start": "1045240",
    "end": "1051760"
  },
  {
    "text": "that we get is not going to be the final return value since it's an infinite Loop or an example of an infinite sequence",
    "start": "1051760",
    "end": "1058000"
  },
  {
    "text": "there isn't a return value that we have instead we'll get back is this generator object that allows us to interact with",
    "start": "1058000",
    "end": "1064760"
  },
  {
    "text": "the internal state of the generator and as I mentioned in the previous slide those two that generate object has two",
    "start": "1064760",
    "end": "1070679"
  },
  {
    "text": "interesting methods on it next and Thro so where you you can also see that",
    "start": "1070679",
    "end": "1076360"
  },
  {
    "text": "there is a way for that function to pass back any state that we want to modify so if I",
    "start": "1076360",
    "end": "1082760"
  },
  {
    "text": "didn't have this I have this line saying um declaring this is reset variable uh",
    "start": "1082760",
    "end": "1088039"
  },
  {
    "text": "taking it and then using it to reset the state of the generator if if the um",
    "start": "1088039",
    "end": "1094720"
  },
  {
    "text": "parameter that's passed is a truthy value now there is no reason there's no reason for me to uh need to capture",
    "start": "1094720",
    "end": "1101520"
  },
  {
    "text": "this uh to capture this information I could just have a yield statement used directly without any assignment to it",
    "start": "1101520",
    "end": "1108280"
  },
  {
    "text": "and in that case the function just continue yielding Fibonacci numbers but being able to pass back values to the",
    "start": "1108280",
    "end": "1114159"
  },
  {
    "text": "generator is quite interesting as we'll see soon so you can see though that",
    "start": "1114159",
    "end": "1119880"
  },
  {
    "text": "yield also return and by allowing us to modify the state of the generator we",
    "start": "1119880",
    "end": "1127000"
  },
  {
    "text": "can we we can use it to uh follow up some additional patterns so here's an",
    "start": "1127000",
    "end": "1133760"
  },
  {
    "text": "example of using a Fibonacci function you see that we get back a generator and when we call next on the generator B",
    "start": "1133760",
    "end": "1140640"
  },
  {
    "text": "basically to step to the next instruction the code we get back this Tuple of containing a value property and",
    "start": "1140640",
    "end": "1146520"
  },
  {
    "text": "a done property the done property is always a Boolean value that indicates whether the generator has finished",
    "start": "1146520",
    "end": "1152480"
  },
  {
    "text": "executing because we're in an infinite Loop uh to generate an infinite sequence the done property in this case will",
    "start": "1152480",
    "end": "1158280"
  },
  {
    "text": "never be true it'll it'll always be false because there will always be more items to consume so you can see that we",
    "start": "1158280",
    "end": "1163840"
  },
  {
    "text": "call next ones and we get the value one we call next again and we get the value",
    "start": "1163840",
    "end": "1168880"
  },
  {
    "text": "to the third element of the Fibonacci sequence but then we pass back this parameter called true in it which is",
    "start": "1168880",
    "end": "1176120"
  },
  {
    "text": "then assimilated by that generator function and bound to the is reset variable we because is reset is now",
    "start": "1176120",
    "end": "1181960"
  },
  {
    "text": "truthy value this indicates to the generator that we want to reset its state back to the beginning and finally",
    "start": "1181960",
    "end": "1188600"
  },
  {
    "text": "there's a way that we can have it throw an exception let's say that we give an error object with an exceptional condition that yield statement will be",
    "start": "1188600",
    "end": "1195960"
  },
  {
    "text": "transformed you can think of it as that yield statement being transformed into a throw and then once that exception is",
    "start": "1195960",
    "end": "1202000"
  },
  {
    "text": "thrown it's propagated until the first until the first um uh catch block that",
    "start": "1202000",
    "end": "1208320"
  },
  {
    "text": "catches it and halals the exception appropriately but Fibonacci numbers aren't particularly interesting right",
    "start": "1208320",
    "end": "1214280"
  },
  {
    "text": "unless you're Angus writing another blog post or unless you want to write a Fibonacci server Benchmark for nodejs",
    "start": "1214280",
    "end": "1221080"
  },
  {
    "text": "you'll rarely want to use a Fibonacci sequence in your production application but this ability to suspend execution of",
    "start": "1221080",
    "end": "1228760"
  },
  {
    "text": "function has some interesting applications namely what if the caller of next and throw could resume execution",
    "start": "1228760",
    "end": "1236039"
  },
  {
    "text": "when an asynchronous function completed how many of you know what's coming",
    "start": "1236039",
    "end": "1241360"
  },
  {
    "text": "next no one yet awesome",
    "start": "1241360",
    "end": "1247039"
  },
  {
    "text": "promises yes but the point is is that promises are just one pattern for",
    "start": "1247120",
    "end": "1253240"
  },
  {
    "text": "facilitating programming and the reason I picked them is for facilitating a synchronous program and the reason I",
    "start": "1253240",
    "end": "1258919"
  },
  {
    "text": "picked them as an example is because A promise is meant to parallel asynchronous Cod is meant to make syn",
    "start": "1258919",
    "end": "1266880"
  },
  {
    "text": "asynchronous code parallel the synchronous variant and a synchronous function can do one of two things it can",
    "start": "1266880",
    "end": "1272520"
  },
  {
    "text": "either return a value or it can throw an exception so and as you saw with",
    "start": "1272520",
    "end": "1278400"
  },
  {
    "text": "generators we can either pass back values to the parent generator function or we can have it throw an exception at",
    "start": "1278400",
    "end": "1284679"
  },
  {
    "text": "that current position and have it be caught by a catch block so the library",
    "start": "1284679",
    "end": "1289840"
  },
  {
    "text": "that I'm going to be using for this example is Chris Cowell's Q library but",
    "start": "1289840",
    "end": "1295400"
  },
  {
    "text": "that's not the only library that works with generators if you're using node uh TJ hallway Chuck Vision media has",
    "start": "1295400",
    "end": "1302000"
  },
  {
    "text": "published a library called Co which you can look at on GitHub that's built entirely around generators and it",
    "start": "1302000",
    "end": "1307279"
  },
  {
    "text": "supports both promises and thks so if the concept of promises looks confusing or you just don't want to use it and",
    "start": "1307279",
    "end": "1314039"
  },
  {
    "text": "there are valid use cases for not wanting to use that pattern you can still have the benefit of generator and have a return special funks instead the",
    "start": "1314039",
    "end": "1321279"
  },
  {
    "text": "read Mees are incredibly comprehensive and Willow and will take you through setting up your generator objects but",
    "start": "1321279",
    "end": "1327960"
  },
  {
    "text": "let's look at an example of using uh Q to uh to um map asynchronous operations",
    "start": "1327960",
    "end": "1335760"
  },
  {
    "text": "you can see that in imagine that this is some kind of Handler in some kind of Route Handler in our business logic I'm",
    "start": "1335760",
    "end": "1341440"
  },
  {
    "text": "using the happy JS framework uh in node how many of you have used happy or are familiar with it okay so it's it's a",
    "start": "1341440",
    "end": "1348799"
  },
  {
    "text": "regular HP framework it um allows you to you can access the request payload you can access the request body at in",
    "start": "1348799",
    "end": "1355080"
  },
  {
    "text": "request payload and you can have your Handler execute uh some code and then",
    "start": "1355080",
    "end": "1360480"
  },
  {
    "text": "return a response that then gets sent out to the client so what we're doing here is we're defining a create account",
    "start": "1360480",
    "end": "1366760"
  },
  {
    "text": "function and at first what we want to do is let's say that our our our post body",
    "start": "1366760",
    "end": "1372200"
  },
  {
    "text": "has two Fields a name and address and we want to enforce the uniqueness constraint so that an account cannot",
    "start": "1372200",
    "end": "1378039"
  },
  {
    "text": "have Mo so that an account can only be associated with one address so the first thing we do is we have we call a get by",
    "start": "1378039",
    "end": "1386039"
  },
  {
    "text": "address method imagine that account is an abstract model class that we've invented and then we have it we give it",
    "start": "1386039",
    "end": "1391919"
  },
  {
    "text": "the address and then we wait for this async operation another way to think of the yield keyword in this particular",
    "start": "1391919",
    "end": "1398320"
  },
  {
    "text": "instance is overloading it to mean weight so we have this account object",
    "start": "1398320",
    "end": "1404000"
  },
  {
    "text": "and let's say that our account object is promise aware it returns a promise that Q can consume and then at some point at at a later",
    "start": "1404000",
    "end": "1411799"
  },
  {
    "text": "point it retrieves the account model or throws an exception if that add if that account was missing so if the response",
    "start": "1411799",
    "end": "1419080"
  },
  {
    "text": "code is 40 is not 404 then we want to rethrow it right it could mean that a",
    "start": "1419080",
    "end": "1424200"
  },
  {
    "text": "connection it could mean that we had a connection error it could mean that we passed it an invalid address there are",
    "start": "1424200",
    "end": "1429279"
  },
  {
    "text": "multiple use cases for that and then we can have another Handler catch it and return a nicely formatted error message",
    "start": "1429279",
    "end": "1435200"
  },
  {
    "text": "to the client if the response code is a 404 though that that's what we want in this case because that means that our",
    "start": "1435200",
    "end": "1441559"
  },
  {
    "text": "address is actually unique so and at this point just to confirm if we did get",
    "start": "1441559",
    "end": "1446799"
  },
  {
    "text": "an account back it means that we don't it means that we don't have a unique address and that we need to uh throw an",
    "start": "1446799",
    "end": "1452679"
  },
  {
    "text": "error and somehow inform the user that the address is already in use now if we don't have an account yet then we create",
    "start": "1452679",
    "end": "1459320"
  },
  {
    "text": "it we create we construct our model class we update it with the payload properties and then we make another",
    "start": "1459320",
    "end": "1464760"
  },
  {
    "text": "yield call that allows us to save the account in the background now remember I mentioned earlier that promises do not",
    "start": "1464760",
    "end": "1472000"
  },
  {
    "text": "that suspending execution does not mean blocking the thread so we have our Handler in this so we have our route",
    "start": "1472000",
    "end": "1478360"
  },
  {
    "text": "Handler in this case and our server can continue uh handling other requests and looking up say in this case uh",
    "start": "1478360",
    "end": "1485039"
  },
  {
    "text": "fulfilling other account registrations and when a particular and once a request",
    "start": "1485039",
    "end": "1490679"
  },
  {
    "text": "uh resolves we're able to continue executing through this generator function until the end so",
    "start": "1490679",
    "end": "1499600"
  },
  {
    "text": "that was so that's an example of a programing pattern that you can use in your code and that doesn't require you",
    "start": "1499600",
    "end": "1505480"
  },
  {
    "text": "to make significant changes as I mentioned with Co it's very easy to adapt existing programming patterns in",
    "start": "1505480",
    "end": "1511000"
  },
  {
    "text": "node to make them work but now let's move on to talking about the collections API in ecmascript 6 ecmascript 6 gives",
    "start": "1511000",
    "end": "1518480"
  },
  {
    "text": "you four new collection types A map a set a week map and a new one that's been",
    "start": "1518480",
    "end": "1524440"
  },
  {
    "text": "added recently called a week set and collections address some of the pain points about manipulating data in",
    "start": "1524440",
    "end": "1530559"
  },
  {
    "text": "JavaScript currently the only two data structures that you really have are arrays and objects or the two fundamental data structures on top of",
    "start": "1530559",
    "end": "1537279"
  },
  {
    "text": "which you can build your own abstractions but the big benefit of using a collection is that all of them",
    "start": "1537279",
    "end": "1542760"
  },
  {
    "text": "finally support sublinear lookup times this means that you can have real sets and real maps that are that have any key",
    "start": "1542760",
    "end": "1550799"
  },
  {
    "text": "assigned to any value right the one of the weaknesses of javascript's objects model is that all keys are strings",
    "start": "1550799",
    "end": "1557520"
  },
  {
    "text": "currently which means that if you wanted to store if you want to associate a key with a value you would be restricted to",
    "start": "1557520",
    "end": "1563120"
  },
  {
    "text": "using a string identifier or it would be just cast to a string and then produce unexpected results so with collections",
    "start": "1563120",
    "end": "1569720"
  },
  {
    "text": "you get sublinear lookup times of uh of for regular objects it's incredibly it's",
    "start": "1569720",
    "end": "1577120"
  },
  {
    "text": "an incredibly convenient pattern the other point is that maps and sets have a predictable enumeration order if you use",
    "start": "1577120",
    "end": "1583039"
  },
  {
    "text": "a foreign Loop over a regular JavaScript object that order is actually implementation dependent there's nothing",
    "start": "1583039",
    "end": "1589000"
  },
  {
    "text": "guaranteeing that iteration order so with we can't change that because we can't break existing Behavior with",
    "start": "1589000",
    "end": "1594279"
  },
  {
    "text": "libraries but we can at least uh develop new collection types that enforce a particular enumeration order an example",
    "start": "1594279",
    "end": "1601320"
  },
  {
    "text": "of sets is that you can remove duplicates in linear time currently one of the only way to really have a a set",
    "start": "1601320",
    "end": "1609600"
  },
  {
    "text": "in JavaScript or to uniquify an array is to construct a new array iterate over",
    "start": "1609600",
    "end": "1615000"
  },
  {
    "text": "one forward uh push elements into your results array and then every time you encounter an element in that original",
    "start": "1615000",
    "end": "1621440"
  },
  {
    "text": "you iterate over the results array so n n sare complexity in order to uh",
    "start": "1621440",
    "end": "1626960"
  },
  {
    "text": "retrieve in order to create a unique set but because we have real sets now rather",
    "start": "1626960",
    "end": "1632559"
  },
  {
    "text": "than using AR that rather than arrays that just happen to contain unique values it's incredibly easy to write uh",
    "start": "1632559",
    "end": "1640240"
  },
  {
    "text": "to write a function that unique ifies a set in a single line and that accomplishes it much more efficiently",
    "start": "1640240",
    "end": "1647440"
  },
  {
    "text": "and finally weak maps and weak sets can use weak references to allow for garbage collection maps and sets have strongly",
    "start": "1647440",
    "end": "1654120"
  },
  {
    "text": "held references so this means that while that object is holding on to a reference for a particular item it can't be",
    "start": "1654120",
    "end": "1661000"
  },
  {
    "text": "garbage collected now this so this can be painful say for example when you're",
    "start": "1661000",
    "end": "1666320"
  },
  {
    "text": "developing an element storage engine uh jquery's element storage engine Associates a uh identifies every element",
    "start": "1666320",
    "end": "1673159"
  },
  {
    "text": "with a unique uh append a unique identifier to every key just to use",
    "start": "1673159",
    "end": "1678360"
  },
  {
    "text": "jQuery is an example and then uses that as a lookup table in an object literal to associate some data with it the",
    "start": "1678360",
    "end": "1684720"
  },
  {
    "text": "problem is when that element goes away that data is kept around in memory and or if you're just holding on to those",
    "start": "1684720",
    "end": "1690840"
  },
  {
    "text": "references by default even when you've removed an element from the Dom there's still that one copy left of it you're",
    "start": "1690840",
    "end": "1697159"
  },
  {
    "text": "holding a reference to it and until you either explicitly clear that reference until you explicit clear that",
    "start": "1697159",
    "end": "1703480"
  },
  {
    "text": "reference there is no way to for the garbage collector to be able to collect it",
    "start": "1703480",
    "end": "1708919"
  },
  {
    "text": "so let's write a leak free element storage engine using weak Maps jQuery",
    "start": "1708919",
    "end": "1714399"
  },
  {
    "text": "actually has a clear migration path for this which is one which is one of the",
    "start": "1714399",
    "end": "1719600"
  },
  {
    "text": "reasons why at picked weak Maps use this example because they work incredibly well for being able to take an object in",
    "start": "1719600",
    "end": "1725799"
  },
  {
    "text": "this case an element see if it exists in our weak map and then assign some storage to it now for our storage engine",
    "start": "1725799",
    "end": "1732200"
  },
  {
    "text": "we're using a regular map we're not using a weak map because we want to keep that element data around so this is an",
    "start": "1732200",
    "end": "1739240"
  },
  {
    "text": "implementation of the store function that allows us that will allow us to give it an element some key which can be",
    "start": "1739240",
    "end": "1745640"
  },
  {
    "text": "any object remember now that we have real maps and a value to associate with it we then make sure that the element is",
    "start": "1745640",
    "end": "1752960"
  },
  {
    "text": "in our storage map and then simply set its name and value appropriately so we",
    "start": "1752960",
    "end": "1758080"
  },
  {
    "text": "can use the same pattern for retrieving and deleting keys and again because we're using a weak map the ele once the",
    "start": "1758080",
    "end": "1766240"
  },
  {
    "text": "element is garbage collected uh the all of the associate element data for it will be deleted so you're not uh leaking",
    "start": "1766240",
    "end": "1773360"
  },
  {
    "text": "memory and preventing your garbage collector from running to collect all these Phantom references that you still have references to so weak maps are",
    "start": "1773360",
    "end": "1781440"
  },
  {
    "text": "ideal for use as a global private data store you can have a single application or a or a node module use a weak map to",
    "start": "1781440",
    "end": "1789640"
  },
  {
    "text": "store a lot of private data without incurring any excessive memory usage but there's another even better solution for",
    "start": "1789640",
    "end": "1797480"
  },
  {
    "text": "storing private data directly on an object and those are symbols symbols",
    "start": "1797480",
    "end": "1803120"
  },
  {
    "text": "give you unique private object property names and they're a memory efficient",
    "start": "1803120",
    "end": "1808240"
  },
  {
    "text": "alternative to the revealing module pattern right if you uh today information hiding in JavaScript isn't",
    "start": "1808240",
    "end": "1813640"
  },
  {
    "text": "very practical you either need to prefix your um properties with a leading underscore which says this property may",
    "start": "1813640",
    "end": "1820159"
  },
  {
    "text": "change later but does nothing to prevent users from actually using it or or you",
    "start": "1820159",
    "end": "1825440"
  },
  {
    "text": "have to use the revealing module pattern and create a closure for every single instance that you create and that is",
    "start": "1825440",
    "end": "1831440"
  },
  {
    "text": "incredibly wasteful for memory so now information hiding I is not necessarily",
    "start": "1831440",
    "end": "1837159"
  },
  {
    "text": "something that's information hiding can be important because it allows you to move",
    "start": "1837159",
    "end": "1843000"
  },
  {
    "text": "your public API forward right you can change your underlying API as much as you want and as long as the public API",
    "start": "1843000",
    "end": "1849159"
  },
  {
    "text": "Remains the Same users code uh users can migrate to the latest version of your library and keep using it without being",
    "start": "1849159",
    "end": "1856240"
  },
  {
    "text": "none the wiser that you had any underlying changes to it and symbols allow you to have that private data so",
    "start": "1856240",
    "end": "1862720"
  },
  {
    "text": "that you can store as much data as you need to on your objects and not have to worry",
    "start": "1862720",
    "end": "1868080"
  },
  {
    "text": "about uh users modifying it in unexpected ways and then encountering issues when they upgrade and their code",
    "start": "1868080",
    "end": "1874840"
  },
  {
    "text": "breaks to accomplish the use of symbols versus regular strings for keys the",
    "start": "1874840",
    "end": "1880120"
  },
  {
    "text": "square bracket operator that you would use for accessing JavaScript proper name has actually been upgraded to",
    "start": "1880120",
    "end": "1885399"
  },
  {
    "text": "distinguish between symbols and strings now it can't be upgraded to distinguished between strings than any other type of object because there are",
    "start": "1885399",
    "end": "1891760"
  },
  {
    "text": "developers that are relying on that behavior but symbols are a new type so we can change it and make this one",
    "start": "1891760",
    "end": "1898840"
  },
  {
    "text": "modification a good example of this is an O client let's say that you're writing o client implementation there",
    "start": "1898840",
    "end": "1905240"
  },
  {
    "text": "are three uh particular bits of information that an off client instance have has to keep track of the base URI",
    "start": "1905240",
    "end": "1912320"
  },
  {
    "text": "the client ID also called the consumer key and the and a shared secret also called the consumer secret now o",
    "start": "1912320",
    "end": "1919440"
  },
  {
    "text": "requests are particularly interesting because every request has to be signed there's a signature base string you",
    "start": "1919440",
    "end": "1924559"
  },
  {
    "text": "construct with the base URI and uh the token the token identifier and then you",
    "start": "1924559",
    "end": "1930080"
  },
  {
    "text": "sign it with a with a pair of shared secrets so you don't want users coming in or you don't want to give this to",
    "start": "1930080",
    "end": "1936440"
  },
  {
    "text": "untrusted code so that it can modify values and then have your request completely fail because you overriding",
    "start": "1936440",
    "end": "1942919"
  },
  {
    "text": "instance parameters so what this allows you to do is to have guaranteed private storage you just store the baseuri the",
    "start": "1942919",
    "end": "1949399"
  },
  {
    "text": "client identifier and the secret as private names and here you construct a new request you construct a new instance",
    "start": "1949399",
    "end": "1956480"
  },
  {
    "text": "of a request object imagine that request lives in it in a separate file that returns a signed request with the given",
    "start": "1956480",
    "end": "1963360"
  },
  {
    "text": "credentials so again it's a it's a clean way to allow you to attach bits of data",
    "start": "1963360",
    "end": "1968880"
  },
  {
    "text": "to your objects without worrying that users might take it and modify it come to depend on it and then you can't ever",
    "start": "1968880",
    "end": "1975399"
  },
  {
    "text": "deprecate it or move your API forward the next pattern that I'd like to cover is destructuring assignment",
    "start": "1975399",
    "end": "1981399"
  },
  {
    "text": "destructuring assignment is one of my absolute favorite patterns and it's been around since Firefox 2 early 2004 so",
    "start": "1981399",
    "end": "1988600"
  },
  {
    "text": "it's been a long time coming in arriving at this language and it makes it possible to extract data from arrays and",
    "start": "1988600",
    "end": "1995279"
  },
  {
    "text": "objects using a uh syntax that mirrors the construction of those objects right",
    "start": "1995279",
    "end": "2000960"
  },
  {
    "text": "so I'll I'll show you an example on the next slide that illustrates kind of what I",
    "start": "2000960",
    "end": "2006039"
  },
  {
    "text": "mean the other use case for Destruction assignment is that you can now swap variables without ever needing to incur",
    "start": "2006039",
    "end": "2012279"
  },
  {
    "text": "the use of a temporary variable so no more VAR TMP equals a and then swapping b and a there's no there's no need to",
    "start": "2012279",
    "end": "2019399"
  },
  {
    "text": "use that pattern you can also now parse complex structures in a single statement",
    "start": "2019399",
    "end": "2024720"
  },
  {
    "text": "and this makes it possible for objects to return or this makes possible for functions to return complex structures",
    "start": "2024720",
    "end": "2031480"
  },
  {
    "text": "that can then be dereferenced in in one go and now it it also makes multiple",
    "start": "2031480",
    "end": "2037000"
  },
  {
    "text": "return values or things you consider multiple return values either as part of an object and array a lot more meaningful right previously if you if",
    "start": "2037000",
    "end": "2044159"
  },
  {
    "text": "your function returned an object you would then have to manually dreference the fields no longer and finally",
    "start": "2044159",
    "end": "2050240"
  },
  {
    "text": "destructuring assignment has a Syntax for allowing you to specify default values for arguments one of the uh",
    "start": "2050240",
    "end": "2055919"
  },
  {
    "text": "previous syntaxes had a feature uh called reputations that has been removed from the specification but default",
    "start": "2055919",
    "end": "2062919"
  },
  {
    "text": "values are a nice compromise or a nice feature that that that have that has",
    "start": "2062919",
    "end": "2068158"
  },
  {
    "text": "made their debut in the end and you can use this for simulating named arguments",
    "start": "2068159",
    "end": "2074040"
  },
  {
    "text": "OSP 6 does not have formal named arguments but you can use the syntax to approximate them and I'll show how you",
    "start": "2074040",
    "end": "2079760"
  },
  {
    "text": "can do that first some rudimentary examples of Destruction assignment the first one is importing two functions",
    "start": "2079760",
    "end": "2085800"
  },
  {
    "text": "parse and string fi from adjacent object and now by writing so you can see that the syntax here mirrors it quite mirrors",
    "start": "2085800",
    "end": "2093720"
  },
  {
    "text": "the construction of the object quite nicely if you were constructing any other object you would use the braces",
    "start": "2093720",
    "end": "2099160"
  },
  {
    "text": "and then keys in order to indicate the property names and now you can dreference them in much the same way",
    "start": "2099160",
    "end": "2105880"
  },
  {
    "text": "it's very symmetrical the second pattern shows you an example of executing a regular expression on a string and then",
    "start": "2105880",
    "end": "2112920"
  },
  {
    "text": "pulling those values out so in this case we're taking a US style formatted phone number and then matching it on some",
    "start": "2112920",
    "end": "2119520"
  },
  {
    "text": "phone perhaps one that the user gives us but we also have a nonparticipating caption group at the beginning that",
    "start": "2119520",
    "end": "2126320"
  },
  {
    "text": "surrounds the area code so the area code is optional and in this case if the user doesn't specify the area code if they",
    "start": "2126320",
    "end": "2132480"
  },
  {
    "text": "just specify a number directly then we want the area code to default to 415 San",
    "start": "2132480",
    "end": "2138280"
  },
  {
    "text": "Francisco and this is the syntax that you use for default assignments just uh provide the identifier with an equal",
    "start": "2138280",
    "end": "2145040"
  },
  {
    "text": "sign and then the default value that you want to use I should also emphasize that destructure assignment only currently",
    "start": "2145040",
    "end": "2151440"
  },
  {
    "text": "works on objects so if you Tred to destructure null or undefined then or even a primitive you would have it would",
    "start": "2151440",
    "end": "2158839"
  },
  {
    "text": "throw an exception think of how JavaScript works today if you try to access a property of a null or undefined",
    "start": "2158839",
    "end": "2164680"
  },
  {
    "text": "value it'll throw an exception so this the same design dist persists the third",
    "start": "2164680",
    "end": "2170400"
  },
  {
    "text": "example is reversing the r of two parameters and let's look at the last one last one is interesting this is",
    "start": "2170400",
    "end": "2176800"
  },
  {
    "text": "actually a full function definition in ecmascript 6 using the new Arrow syntax",
    "start": "2176800",
    "end": "2183160"
  },
  {
    "text": "what we're doing is we're defining a get headers function that takes a node Style request object and the um in node each",
    "start": "2183160",
    "end": "2191079"
  },
  {
    "text": "request object represents an HP request and it has a property on it called headers that contains those HTP request",
    "start": "2191079",
    "end": "2197920"
  },
  {
    "text": "headers so what we're doing in this case is just simply pulling those headers from the function again you didn't",
    "start": "2197920",
    "end": "2203599"
  },
  {
    "text": "necessarily need to write a function for this but I just wanted to show you how you can use destruction assignment in as",
    "start": "2203599",
    "end": "2210880"
  },
  {
    "text": "part of an argument and for and now that you have Arrow functions you can create these incredibly compact expressions",
    "start": "2210880",
    "end": "2218680"
  },
  {
    "text": "so let's look at an a more complex example to uh destructuring an",
    "start": "2218680",
    "end": "2224160"
  },
  {
    "text": "entire uh an entire object of information let's say that you get this data back from uh from your server it uh",
    "start": "2224160",
    "end": "2230640"
  },
  {
    "text": "comes down the wire is Json you deserialize it and then you want to print out information about TS Elliott's",
    "start": "2230640",
    "end": "2236720"
  },
  {
    "text": "poem Rap City on a windy night so in this case uh tslot is the first element",
    "start": "2236720",
    "end": "2241760"
  },
  {
    "text": "in our poets array the Cy is Ezra pound we don't care about him for now but um and uh rapson Woody Knight is the second",
    "start": "2241760",
    "end": "2249800"
  },
  {
    "text": "element of Elliot's work so you can see that we have an array of two elements um this array contains two objects with a",
    "start": "2249800",
    "end": "2256400"
  },
  {
    "text": "name and works properties and works is itself an array with containing objects with title and date properties that's",
    "start": "2256400",
    "end": "2263520"
  },
  {
    "text": "quite a complex nested structure and you might be and in current lout even though",
    "start": "2263520",
    "end": "2269440"
  },
  {
    "text": "it's very semantic and explicit you might be tempted not to use something that's this intricate just to avoid",
    "start": "2269440",
    "end": "2275960"
  },
  {
    "text": "having to D reference it when you parse it but now it's incredibly easy to do that we have this variable declaration here",
    "start": "2275960",
    "end": "2282319"
  },
  {
    "text": "and we're dereferencing the first element of our of our poet's aray in this case um Elliot we're taking the",
    "start": "2282319",
    "end": "2289119"
  },
  {
    "text": "value of the name property and assigning it to the author variable so the example",
    "start": "2289119",
    "end": "2295000"
  },
  {
    "text": "I was showing previously was dependent on if both the object and the variable that you want to bind a property to have",
    "start": "2295000",
    "end": "2301720"
  },
  {
    "text": "the same name you can also uh pull them from different names so you can take the name property and assign it to an author",
    "start": "2301720",
    "end": "2308000"
  },
  {
    "text": "variable we're also um notice that we're also going into the works array we're",
    "start": "2308000",
    "end": "2313040"
  },
  {
    "text": "using an illusion which signifies that we want to omit the first element in structuring and take the second one",
    "start": "2313040",
    "end": "2318720"
  },
  {
    "text": "which is Rap City then we we uh then bind that up into a template string um",
    "start": "2318720",
    "end": "2325079"
  },
  {
    "text": "I'll talk about template strings in a bit because they're also incredibly useful features in language so we're",
    "start": "2325079",
    "end": "2330520"
  },
  {
    "text": "using this we're writing out the title of the poem and its publication date and the author and just like that that in",
    "start": "2330520",
    "end": "2337800"
  },
  {
    "text": "two lines we've parsed this complex structure that our server has sent us so it's a pattern that I think will make",
    "start": "2337800",
    "end": "2343560"
  },
  {
    "text": "writing this kind of code incredibly convenient also the default parameter",
    "start": "2343560",
    "end": "2348599"
  },
  {
    "text": "syntax is useful in a in an API like nodes request module nodes request module can accept an options argument",
    "start": "2348599",
    "end": "2355280"
  },
  {
    "text": "that has all these different options you can send the request you can set the method the query string the headers the",
    "start": "2355280",
    "end": "2360640"
  },
  {
    "text": "payload either specified as a form or as Json number of Max redirects whether you use cookies and these are just ones that",
    "start": "2360640",
    "end": "2366760"
  },
  {
    "text": "would fit on the slide there is a plethora of options you can pass to it but before but it can get very tedious",
    "start": "2366760",
    "end": "2374319"
  },
  {
    "text": "to have to reference them from within the function and writing default uh parameter and writing default values for",
    "start": "2374319",
    "end": "2380920"
  },
  {
    "text": "every one of these parameters the method is get if it's unspecified if it is specified then use whatever the user",
    "start": "2380920",
    "end": "2386040"
  },
  {
    "text": "passed in it's Madness uh writing that there are if if you use a library like",
    "start": "2386040",
    "end": "2392359"
  },
  {
    "text": "um low daser underscore it has a defaults method that can accomplish this but now you have a a language level",
    "start": "2392359",
    "end": "2398400"
  },
  {
    "text": "construct that allows you to specify default parameters uh you can also see that in",
    "start": "2398400",
    "end": "2404240"
  },
  {
    "text": "addition to providing default object Properties or um makeshift name parameters we have default parameters so",
    "start": "2404240",
    "end": "2410319"
  },
  {
    "text": "if you don't specify a UR a request URI it becomes just the empty string now in",
    "start": "2410319",
    "end": "2415400"
  },
  {
    "text": "this case um no uh the request module will throw an exception when it finds that because the empty string is not a",
    "start": "2415400",
    "end": "2421119"
  },
  {
    "text": "valid URI but it's a conv but it illustrates the example of being able to",
    "start": "2421119",
    "end": "2426480"
  },
  {
    "text": "provide multiple of being provide multiple default values for functions again these are features that other languages have had for some time and",
    "start": "2426480",
    "end": "2433000"
  },
  {
    "text": "that we're now getting in JavaScript that will allow us to make our apis more expressive rather than simply have to",
    "start": "2433000",
    "end": "2439680"
  },
  {
    "text": "reimplement this code repeatedly in userland logic or have some third party Library handle",
    "start": "2439680",
    "end": "2445040"
  },
  {
    "text": "this um on the line of destructuring assignment on know destructuring assignment is also the shorthand syntax",
    "start": "2445040",
    "end": "2452160"
  },
  {
    "text": "and there are two forms of shorthand Syntax for initializers and Method definitions the first one I wanted to",
    "start": "2452160",
    "end": "2457359"
  },
  {
    "text": "show you is for object initializers in this example we have two variables name and occupation uh and then we're",
    "start": "2457359",
    "end": "2464599"
  },
  {
    "text": "constructing object from them with name and occupation properties that are bound to those to the",
    "start": "2464599",
    "end": "2471200"
  },
  {
    "text": "variables uh to the values of these two variables but that's a bit redundant",
    "start": "2471200",
    "end": "2476359"
  },
  {
    "text": "right we have we we already have the name and occupation variables that are sufficiently descriptive and only to",
    "start": "2476359",
    "end": "2482640"
  },
  {
    "text": "have to redeclare them again as property names and as values that's",
    "start": "2482640",
    "end": "2487960"
  },
  {
    "text": "uh too much typing so what we would do is we can cut down on this um and and",
    "start": "2487960",
    "end": "2494160"
  },
  {
    "text": "just define a person as containing the name and occupation variables so the",
    "start": "2494160",
    "end": "2500240"
  },
  {
    "text": "values of these variables will be assigned to the property names will be assign to the property values and the",
    "start": "2500240",
    "end": "2505720"
  },
  {
    "text": "names of these variables will become those property names so these two examples produce an identical result but",
    "start": "2505720",
    "end": "2512400"
  },
  {
    "text": "you can see how much it cuts down on on repetition the second syntax I wanted to",
    "start": "2512400",
    "end": "2518560"
  },
  {
    "text": "cover are method definitions and in this example I'm showing you both a shorthand",
    "start": "2518560",
    "end": "2523839"
  },
  {
    "text": "meth definition and some other uh parts of the ecmascript API we already covered template literals Getters were actually",
    "start": "2523839",
    "end": "2529720"
  },
  {
    "text": "present in ecmascript 5 I'll uh illustrate how I'll illustrate how the shorthand",
    "start": "2529720",
    "end": "2537160"
  },
  {
    "text": "syntax meshes nicely with them and we also have a Setter syntax that uses a new API method but let's look at our",
    "start": "2537160",
    "end": "2544200"
  },
  {
    "text": "definition of the speak method this does look like uh valid JavaScript right",
    "start": "2544200",
    "end": "2549359"
  },
  {
    "text": "where's the property name there isn't one we also don't have the function keyword instead the uh function name in",
    "start": "2549359",
    "end": "2556040"
  },
  {
    "text": "this case speak serves as a serves as an indicator that you want to uh declare a",
    "start": "2556040",
    "end": "2561280"
  },
  {
    "text": "method so this syntax Works within object literals and it allows you cut down on typing one of the criticisms",
    "start": "2561280",
    "end": "2567960"
  },
  {
    "text": "that JavaScript has received is that despite being a functional language and while allowing to declare",
    "start": "2567960",
    "end": "2573119"
  },
  {
    "text": "object-oriented forms it's incredibly verbose for both right you have to you have this function keyword that you need",
    "start": "2573119",
    "end": "2578760"
  },
  {
    "text": "to type out and if you want to bind a property to an object you have to use that property explicitly and then name",
    "start": "2578760",
    "end": "2585200"
  },
  {
    "text": "the function again it's it's needlessly repetitious and os6 fixes this by giving",
    "start": "2585200",
    "end": "2590880"
  },
  {
    "text": "us this lovely shorthand form the next two features I wanted to cover work best in unison first up is Spread spread",
    "start": "2590880",
    "end": "2598920"
  },
  {
    "text": "allows you to expand the value of an array of arguments without altering the this context you can think of it as a",
    "start": "2598920",
    "end": "2604760"
  },
  {
    "text": "better function prototype apply but but function apply has some weaknesses namely it can't be used out of the box",
    "start": "2604760",
    "end": "2612160"
  },
  {
    "text": "with Constructors what you have to do in that case is to create is to Define your own intermediate Constructor call",
    "start": "2612160",
    "end": "2618520"
  },
  {
    "text": "function apply on that and then it doesn't work on Native objects and it's a mass so it now so we now have a Syntax",
    "start": "2618520",
    "end": "2625760"
  },
  {
    "text": "for unpacking an array of arguments and applying it for instantiating both uh for instantiating a Constructor or for",
    "start": "2625760",
    "end": "2633559"
  },
  {
    "text": "calling a regular method it's also a great Syntax for merging arrays and array like objects as well as casting",
    "start": "2633559",
    "end": "2640400"
  },
  {
    "text": "any object with a length property an array like object into a real array I'll show you some examples of the syntax",
    "start": "2640400",
    "end": "2647800"
  },
  {
    "text": "rest is the uh is spread's counterpart it provides this natural Syntax for",
    "start": "2647800",
    "end": "2652920"
  },
  {
    "text": "vartic functions and it's a nice replacement for the arguments object currently the JavaScript arguments",
    "start": "2652920",
    "end": "2657960"
  },
  {
    "text": "object is array like in that has a length property and numeric indices but",
    "start": "2657960",
    "end": "2663559"
  },
  {
    "text": "it's not an array you can't call array methods on it you either have to you need to convert it into array or",
    "start": "2663559",
    "end": "2669720"
  },
  {
    "text": "just use a regular for Loop over it and arguments can be quite magical let's say that you have nested functions because",
    "start": "2669720",
    "end": "2676520"
  },
  {
    "text": "it's a because arguments is local to a particular function you can't reference say apparent functions arguments",
    "start": "2676520",
    "end": "2682400"
  },
  {
    "text": "variable so rest allows you to work around that it also always returns an",
    "start": "2682400",
    "end": "2688200"
  },
  {
    "text": "array even when parameters are omitted so let's say that you have a function that can accept any number of arguments",
    "start": "2688200",
    "end": "2694559"
  },
  {
    "text": "and you just don't give it any at all that was um the value of the rest parameter is going to be an empty array",
    "start": "2694559",
    "end": "2700559"
  },
  {
    "text": "not undefined not null nothing that you can't accidentally try to error it over and then have a throw an exception uh",
    "start": "2700559",
    "end": "2706520"
  },
  {
    "text": "rest is also only valid as the last parameter of function if some of you have used Coffey script this might be",
    "start": "2706520",
    "end": "2713000"
  },
  {
    "text": "this might be rather odd because Coffey skirt allows you to specify a rest parameter anywhere within the arguments list uh this is primarily done so that",
    "start": "2713000",
    "end": "2720000"
  },
  {
    "text": "you don't have to uh worry about collisions between rest parameters that need to be soaked up in an array and",
    "start": "2720000",
    "end": "2725800"
  },
  {
    "text": "then optional trailing AR so let's look at a comprehensive example",
    "start": "2725800",
    "end": "2731040"
  },
  {
    "text": "that kind of puts all this together this is a function that takes a node style request object and parses the",
    "start": "2731040",
    "end": "2737520"
  },
  {
    "text": "authorization header as a uh Bas as um basic authentication so basic",
    "start": "2737520",
    "end": "2742720"
  },
  {
    "text": "authentication is the string basic followed by a space and then the base 64 encoded username password concatenated",
    "start": "2742720",
    "end": "2749280"
  },
  {
    "text": "with a colon so what we're doing in this case is we're taking we're using um the",
    "start": "2749280",
    "end": "2754359"
  },
  {
    "text": "destructuring assignment syntax to extract the authorization header immediately right in the top of our function we then uh parse the scheme and",
    "start": "2754359",
    "end": "2762000"
  },
  {
    "text": "the components there can only be one component or so if the scheme isn't basic or you have multiple uh space",
    "start": "2762000",
    "end": "2768880"
  },
  {
    "text": "separated tokens in that header then it's invalid we return null immediately we then take those components and then",
    "start": "2768880",
    "end": "2774960"
  },
  {
    "text": "in node uh decode them as base 64 and convert it to a utf8 string that we can",
    "start": "2774960",
    "end": "2781119"
  },
  {
    "text": "parse we then check if it contains a colon character contains is a new convenient string method in ecmascript 6",
    "start": "2781119",
    "end": "2788440"
  },
  {
    "text": "so no more string index of a value is greater than equal to1 or using the uh",
    "start": "2788440",
    "end": "2793680"
  },
  {
    "text": "leading Tilda the bitwise not to uh coers the two zero so no you no longer",
    "start": "2793680",
    "end": "2799160"
  },
  {
    "text": "need to do that you have the contains method you we then execute a pattern over those credentials and we use name",
    "start": "2799160",
    "end": "2805720"
  },
  {
    "text": "and password default to the empty string if they're not provided so we parse this header and we return this object for us",
    "start": "2805720",
    "end": "2812839"
  },
  {
    "text": "and then you you can take that and your application can then authenticate the use so this looks very javascrip right there",
    "start": "2812839",
    "end": "2820520"
  },
  {
    "text": "are a lot of syntactic additions to it but if you were looking at this you would be able to recognize it as JavaScript I think this is where a case",
    "start": "2820520",
    "end": "2827400"
  },
  {
    "text": "where ecmascript 6 really shines in giving you this um syntax that extends upon existing patterns but that still",
    "start": "2827400",
    "end": "2834319"
  },
  {
    "text": "retains the familiarity of the language so the next concept are TAG template",
    "start": "2834319",
    "end": "2840119"
  },
  {
    "text": "literals which you've seen throughout this talk uh uh template literals are backtick Del Limited multi-line strings",
    "start": "2840119",
    "end": "2847599"
  },
  {
    "text": "with embedded Expressions within them and those and they're kind of useful because we can pass handlers that can",
    "start": "2847599",
    "end": "2854040"
  },
  {
    "text": "perform additional string processing on it now by default being able to do string interpolation is kind of useful",
    "start": "2854040",
    "end": "2860480"
  },
  {
    "text": "right it's it's nice to be able to not have to do manual string in catenation but what we can also do is because we",
    "start": "2860480",
    "end": "2867240"
  },
  {
    "text": "have a because this Handler has access to both the raw string components that were used to build up the templ leral as",
    "start": "2867240",
    "end": "2874119"
  },
  {
    "text": "well as any Expressions that were interpolated in them we can build our own extensible templating languages on",
    "start": "2874119",
    "end": "2879800"
  },
  {
    "text": "top of this it also makes it easy to do contextual escaping now on this next slide where I show a simple HTML escaper",
    "start": "2879800",
    "end": "2887000"
  },
  {
    "text": "I don't have a be cont it's not context to wear sadly but what what we're doing",
    "start": "2887000",
    "end": "2892559"
  },
  {
    "text": "is we have an our template our tag template helper sorry has a object that",
    "start": "2892559",
    "end": "2899680"
  },
  {
    "text": "has an object that we give it uh values it's an array that has a raw property and then we're soaking up the remaining",
    "start": "2899680",
    "end": "2906200"
  },
  {
    "text": "substitution which get which get past as vartic arguments we're then iterating over uh each raw value uh checking to",
    "start": "2906200",
    "end": "2913880"
  },
  {
    "text": "make sure that we're still within the bounds of our substitution and then interpolating those substitutions since",
    "start": "2913880",
    "end": "2920319"
  },
  {
    "text": "this is an HTML escaper what we're doing is we're taking those uh is we're taking one of those substitutions and we're",
    "start": "2920319",
    "end": "2925720"
  },
  {
    "text": "replacing the Amper sand angle brackets and quilt characters now in in a this is",
    "start": "2925720",
    "end": "2931720"
  },
  {
    "text": "the rudimentary version of The Escape function that's implemented by most popular libraries and as you can see uh",
    "start": "2931720",
    "end": "2937760"
  },
  {
    "text": "here at the bottom we can we have an input called name say some untrusted",
    "start": "2937760",
    "end": "2943040"
  },
  {
    "text": "user input like uh containing a script element and then what we can do is we prefix the Handler function to the tag",
    "start": "2943040",
    "end": "2950079"
  },
  {
    "text": "template literal so that gives us back a string with its contents escaped and you could use this to build a context",
    "start": "2950079",
    "end": "2956359"
  },
  {
    "text": "sensitive HTML escaper right there are different escaping um escaping uh rules",
    "start": "2956359",
    "end": "2961799"
  },
  {
    "text": "for attributes versus element contents or let's say that you wanted to allow users to specify some HTM tags but not",
    "start": "2961799",
    "end": "2967440"
  },
  {
    "text": "others this can also be incredibly useful if you're writing if if you're working with a database that allows you",
    "start": "2967440",
    "end": "2973440"
  },
  {
    "text": "to pass query strings um for instance U at Black Pearl where I work we use the",
    "start": "2973440",
    "end": "2979000"
  },
  {
    "text": "dat we use the Cassandra database which uses a query language called cql so anytime you interpolate query uh you",
    "start": "2979000",
    "end": "2986160"
  },
  {
    "text": "interpolate untrusted user data into a query string you have the potential for injections in this case no SQL",
    "start": "2986160",
    "end": "2992640"
  },
  {
    "text": "injections oddly enough but Cassandra has a lot of escaping rules as to how uh",
    "start": "2992640",
    "end": "2998720"
  },
  {
    "text": "as to how it interpolates those values and now you can pass in those now you",
    "start": "2998720",
    "end": "3003839"
  },
  {
    "text": "can pass in the input and then have it be escaped based on the surrounding",
    "start": "3003839",
    "end": "3008960"
  },
  {
    "text": "context so something that at first glance doesn't seem T seems like a",
    "start": "3008960",
    "end": "3014119"
  },
  {
    "text": "useful syntactic convenience but it has quite a few broad applications another feature is block",
    "start": "3014119",
    "end": "3020359"
  },
  {
    "text": "scope this is one that I think a lot of us have heard about that we've been excited about and that it's one of the",
    "start": "3020359",
    "end": "3026040"
  },
  {
    "text": "uh more confus using points for people who are first coming into the language so the fact that VAR is actually a scope",
    "start": "3026040",
    "end": "3032440"
  },
  {
    "text": "to a particular function or the global scope rather than scope to within a block so block scope with let and const",
    "start": "3032440",
    "end": "3039839"
  },
  {
    "text": "which is the constant version of the constant version of let gives us uh real",
    "start": "3039839",
    "end": "3046160"
  },
  {
    "text": "block scoping semantics and gives us real constants they cannot be reassigned once they've been declared let also",
    "start": "3046160",
    "end": "3053240"
  },
  {
    "text": "introduce these meaningful semantics for blocks currently you can have a bare block in JavaScript but it's not very",
    "start": "3053240",
    "end": "3059160"
  },
  {
    "text": "useful you can't uh inter there's nothing that you can accomplish within",
    "start": "3059160",
    "end": "3064720"
  },
  {
    "text": "it that can be done by simply removing those braces now that now that we have L",
    "start": "3064720",
    "end": "3069839"
  },
  {
    "text": "though it actually allows us to use those blocks in uh in meaningful ways",
    "start": "3069839",
    "end": "3075000"
  },
  {
    "text": "function declarations are also Now supported within blocks so uh previously this was an error in eare 5 um and",
    "start": "3075000",
    "end": "3082400"
  },
  {
    "text": "earlier now this is a standardized syntax that you can use to effect",
    "start": "3082400",
    "end": "3087799"
  },
  {
    "text": "so one of the most popular examples to use uh when introducing people to the",
    "start": "3087799",
    "end": "3092880"
  },
  {
    "text": "problem with um the with Lex with the non- Lex space VAR keyword is this idea",
    "start": "3092880",
    "end": "3098839"
  },
  {
    "text": "of declaring functions within a loop right because that variable gets hoisted to the containing scope um It'll point",
    "start": "3098839",
    "end": "3105760"
  },
  {
    "text": "it'll reflect the very last value at the end of the loop in this case let's say that we're writing a Dom library and",
    "start": "3105760",
    "end": "3111000"
  },
  {
    "text": "we're defining two methods get width and get height and we're discriminating on whether to use width or height based on",
    "start": "3111000",
    "end": "3116920"
  },
  {
    "text": "an index uh or based on the current value of the counter variable a rather contrived example but the uh fact",
    "start": "3116920",
    "end": "3125240"
  },
  {
    "text": "remains that if you were to call get width on it because width was the first element which then was overwritten by",
    "start": "3125240",
    "end": "3131079"
  },
  {
    "text": "height remember that variable got uh that variable got hoisted it means that both get width and get height will",
    "start": "3131079",
    "end": "3137280"
  },
  {
    "text": "return the height of the element that's not what you want and there are various work rounds you can use you can uh",
    "start": "3137280",
    "end": "3143160"
  },
  {
    "text": "declare your own closure within Loop uh just using immedately invoked function expression you can also um use weird",
    "start": "3143160",
    "end": "3149799"
  },
  {
    "text": "workarounds with width or using the catch block of a tri catch statement just exploiting some semantics in the",
    "start": "3149799",
    "end": "3155440"
  },
  {
    "text": "specification those aren't very workable and they will increase lines of code that you have to write what's the es6",
    "start": "3155440",
    "end": "3162599"
  },
  {
    "text": "solution to this one change change the VAR to a lat and now you have real block",
    "start": "3162599",
    "end": "3167760"
  },
  {
    "text": "scoping and get width and get height will return the correct values that's really all there is to it so some",
    "start": "3167760",
    "end": "3174640"
  },
  {
    "text": "gotchas with the syntax though first of all you uh because blocks now",
    "start": "3174640",
    "end": "3180799"
  },
  {
    "text": "have meaning attempting to declare a let attempting to declare a let or constant",
    "start": "3180799",
    "end": "3186960"
  },
  {
    "text": "binding within a block that within an implicit block is a syntax error they",
    "start": "3186960",
    "end": "3192880"
  },
  {
    "text": "actually have to be nested within real blocks uh the second example here is a syntax error because we're redeclaring",
    "start": "3192880",
    "end": "3198400"
  },
  {
    "text": "the constant right and this is what you want uh in if you try to reassign the value of a constant things are aren't",
    "start": "3198400",
    "end": "3206200"
  },
  {
    "text": "quite is explicit um there they will it'll silently fail in non-strict mode in strict mode it will throw an",
    "start": "3206200",
    "end": "3212400"
  },
  {
    "text": "exception so in both cases you have real constants that immediately alert you if you're trying to do something that you",
    "start": "3212400",
    "end": "3218200"
  },
  {
    "text": "didn't anticipate earlier also the last example is uh variable um variable",
    "start": "3218200",
    "end": "3224520"
  },
  {
    "text": "bindings with the VAR keyword have to be different from let and const bindings uh you can't declare a variable and have it",
    "start": "3224520",
    "end": "3230760"
  },
  {
    "text": "Shadow a constant or or a constant or a let declaration that will immediately",
    "start": "3230760",
    "end": "3236079"
  },
  {
    "text": "throw a syntax error and the final bit that I'd like to cover are Arrow function Arrow functions",
    "start": "3236079",
    "end": "3244040"
  },
  {
    "text": "are a convenient Syntax for declaring uh for declaring lambdas uh",
    "start": "3244040",
    "end": "3250240"
  },
  {
    "text": "it's something I mentioned earlier that one of the criticism that's been leveled against JavaScript is the fact that for",
    "start": "3250240",
    "end": "3256000"
  },
  {
    "text": "being a functionally influenced language it has an awfully verose function declaration syntax let's fix that so in",
    "start": "3256000",
    "end": "3262520"
  },
  {
    "text": "this case I'm calling the filter method uh filtering out the value and then retrieving just the odd numbers from an",
    "start": "3262520",
    "end": "3268680"
  },
  {
    "text": "array of five uh five numbers in them and as you can see I don't have to put any parentheses around a around the",
    "start": "3268680",
    "end": "3275280"
  },
  {
    "text": "first argument I can just uh simply declare the value uh the uh the arrow symbol and then the expression and this",
    "start": "3275280",
    "end": "3282760"
  },
  {
    "text": "expression is implicitly returned also if you have that kind of",
    "start": "3282760",
    "end": "3287960"
  },
  {
    "text": "structure just a single value expression you don't have to surround it in blocks",
    "start": "3287960",
    "end": "3293119"
  },
  {
    "text": "uh to show you what you can though and this example uh rather contrived one for which I apologize uh illustrates that",
    "start": "3293119",
    "end": "3300160"
  },
  {
    "text": "nicely what we're doing is we're declaring a function without any parameters right arrow functions can you",
    "start": "3300160",
    "end": "3306839"
  },
  {
    "text": "you can only omit the parentheses if you have one argument if you have no arguments or more than one you have to",
    "start": "3306839",
    "end": "3312520"
  },
  {
    "text": "provide the parentheses there's been some discussion in the past as to whether to allow you to uh use bare",
    "start": "3312520",
    "end": "3319079"
  },
  {
    "text": "arrows directly so if you don't have any arguments you don't have to uh put uh the pair of parentheses this function",
    "start": "3319079",
    "end": "3325319"
  },
  {
    "text": "then returns an object object we're wrapping it in parentheses to disambiguate it from the blocks that has",
    "start": "3325319",
    "end": "3330480"
  },
  {
    "text": "a two- string method our two string method accepts no arguments at all but then has a block that has an explicit",
    "start": "3330480",
    "end": "3336880"
  },
  {
    "text": "return right in this case the return is implicit since we now have a single expression here we don't have to add the",
    "start": "3336880",
    "end": "3343319"
  },
  {
    "text": "return statement but it is definitely possible to do that and in the cases of having a um an error function with",
    "start": "3343319",
    "end": "3349520"
  },
  {
    "text": "multiple blocks it's actually required and then if we take this object that has a two string method and we in if we take",
    "start": "3349520",
    "end": "3356680"
  },
  {
    "text": "this function that returns an object with two string method and invoke it we can uh obtain the value by casting into",
    "start": "3356680",
    "end": "3362960"
  },
  {
    "text": "a string",
    "start": "3362960",
    "end": "3369960"
  },
  {
    "text": "correct uh no so in this case we're iterating we're iterating over the values",
    "start": "3371799",
    "end": "3379720"
  },
  {
    "text": "so the even number oh I see what you're asking okay",
    "start": "3382960",
    "end": "3388680"
  },
  {
    "text": "yeah so we don't need to zero in JavaScript is considered to be a falsy",
    "start": "3388680",
    "end": "3393760"
  },
  {
    "text": "value so in this case any so in this case uh any number modulo 2 is going to",
    "start": "3393760",
    "end": "3399079"
  },
  {
    "text": "be zero and zero gets CED to false the filter method uh invokes this function",
    "start": "3399079",
    "end": "3404559"
  },
  {
    "text": "and then it um it uses it uh does a simple Boolean cast on the return value",
    "start": "3404559",
    "end": "3411039"
  },
  {
    "text": "so we don't have to um explicitly return true or false we can return something that's falsy so uh empty string zero",
    "start": "3411039",
    "end": "3417480"
  },
  {
    "text": "null undefined um or we can just have it or we can use the implicit cast does that",
    "start": "3417480",
    "end": "3424880"
  },
  {
    "text": "uh answer a question okay all righty um Arrow functions are also interesting in",
    "start": "3424880",
    "end": "3430640"
  },
  {
    "text": "they mirror the semantics of bound functions uh in practice this means that they're equivalent to calling function",
    "start": "3430640",
    "end": "3435920"
  },
  {
    "text": "prototype bind on a particular method um they this means that they don't have a prototype and they can't be instantiated",
    "start": "3435920",
    "end": "3443000"
  },
  {
    "text": "as Constructors trying to do that will be a type error so just something to be aware of from the syntax so we went",
    "start": "3443000",
    "end": "3450079"
  },
  {
    "text": "incredibly fast today I'm uh really sorry for not not being able to spend more time on some of these or being able",
    "start": "3450079",
    "end": "3456079"
  },
  {
    "text": "to talk about some of the other fantastic features that we have but I think the thrust of this talk has been",
    "start": "3456079",
    "end": "3461880"
  },
  {
    "text": "that there is something in the language for absolutely everyone there's a new convenient shorthand syntax to cut down",
    "start": "3461880",
    "end": "3467960"
  },
  {
    "text": "repetition there's uh improvements for tooling there are new data structures there are improvements to modularity of",
    "start": "3467960",
    "end": "3473799"
  },
  {
    "text": "classes and modules and there are core refin so when can you get your hands on some",
    "start": "3473799",
    "end": "3479440"
  },
  {
    "text": "of these features Firefox and Firefox Aurora have supported many of these features in fact firefox's",
    "start": "3479440",
    "end": "3485760"
  },
  {
    "text": "implementations since the beginning have been one of The Inspirations for ospt 6 they're also available in chromium and",
    "start": "3485760",
    "end": "3492000"
  },
  {
    "text": "chrome by enabling the enable experimental JavaScript option in about fla and now in node you can start up",
    "start": "3492000",
    "end": "3499000"
  },
  {
    "text": "node with the harmony flag that allows you access to early Harmony features uh",
    "start": "3499000",
    "end": "3504200"
  },
  {
    "text": "a lot of these are if you're interested in whether particular environments support those uh features uh kangax Yuri",
    "start": "3504200",
    "end": "3511240"
  },
  {
    "text": "zv has an excellent table uh of various implementations and the um and the",
    "start": "3511240",
    "end": "3517960"
  },
  {
    "text": "features that they support but there's one more thing you can't expect your users to be able to uh",
    "start": "3517960",
    "end": "3525119"
  },
  {
    "text": "enable those experimental features if you're targeting toward developers then yes definitely in fact it's uh quite",
    "start": "3525119",
    "end": "3531960"
  },
  {
    "text": "likely that those developers will have already enabled those experimental features and if you're running node it's easy to pass Flags to your server",
    "start": "3531960",
    "end": "3538440"
  },
  {
    "text": "process but your user can't navigate to a page and then see that we wanted to we wanted to make our experience very good",
    "start": "3538440",
    "end": "3545079"
  },
  {
    "text": "for developers so to do so because of that we decided to um only opt into ecmascript 6 which is reasonable in and",
    "start": "3545079",
    "end": "3551920"
  },
  {
    "text": "of itself but in order to do this you have to go through these steps to enable experimental flags and if you go to",
    "start": "3551920",
    "end": "3556960"
  },
  {
    "text": "about Flags in chromium there's this big warning at the top that says enable these at your own risk and so when users",
    "start": "3556960",
    "end": "3564319"
  },
  {
    "text": "are going to this and they're and they see every single indication that they should not be doing this it's very very",
    "start": "3564319",
    "end": "3570480"
  },
  {
    "text": "difficult kind of to retain their attention and they'll probably leave if even if they take the time to read",
    "start": "3570480",
    "end": "3576680"
  },
  {
    "text": "through that um through the instructions they'll probably leave once they realize just what is you're asking them to do so",
    "start": "3576680",
    "end": "3582880"
  },
  {
    "text": "there are a couple of ways that you can experiment and use a transpiler uh building on languages like Coffey script",
    "start": "3582880",
    "end": "3588200"
  },
  {
    "text": "or typescript to compile ecmascript 6 code or anticipated ecmascript six",
    "start": "3588200",
    "end": "3593640"
  },
  {
    "text": "editions to ecmascript 5 code uh the first one that I have up here is one that I particularly enjoy it is not",
    "start": "3593640",
    "end": "3599640"
  },
  {
    "text": "actually a transpiler it is a virtual machine that's implemented in existing",
    "start": "3599640",
    "end": "3604760"
  },
  {
    "text": "ospt 5 so it provides a full runtime that allows you to experiment with ecmascript 6 uh once you've if you're if",
    "start": "3604760",
    "end": "3612599"
  },
  {
    "text": "you're interested in actually taking uh or writing ecmascript 6 code and converting it to ospt 5 you can use the",
    "start": "3612599",
    "end": "3618640"
  },
  {
    "text": "excellent Tracer compiler that's provided by Google and finally if you use browserify in node to package your",
    "start": "3618640",
    "end": "3625640"
  },
  {
    "text": "asset there's a great extension to it called es6 ify that uses Tracer under the hood",
    "start": "3625640",
    "end": "3631160"
  },
  {
    "text": "to compile ecmascript 6 files and serve them down to the client and in that's in",
    "start": "3631160",
    "end": "3636400"
  },
  {
    "text": "a syntax that's compatible with existing EOS 5 efforts um I'll be uh posting these slides afterward as well so if you",
    "start": "3636400",
    "end": "3643280"
  },
  {
    "text": "uh haven't caught some I see some of you trying to write down the URLs if you haven't caught the URLs here then I'll",
    "start": "3643280",
    "end": "3649839"
  },
  {
    "text": "I'll be able to post them then you can access them there so I think at this point it's in uh ecmascript 6 is growing",
    "start": "3649839",
    "end": "3658039"
  },
  {
    "text": "incredibly quickly and it's a wonderful opportunity to be able to be uh to be",
    "start": "3658039",
    "end": "3664760"
  },
  {
    "text": "able to follow the language as it as it develops now what are some if you like",
    "start": "3664760",
    "end": "3669799"
  },
  {
    "text": "to be involved in uh watching the language uh proceed you can either follow the es discuss account on Twitter",
    "start": "3669799",
    "end": "3676280"
  },
  {
    "text": "it's maintained by Dominic denola who's been very active in the ecmascript 6 um",
    "start": "3676280",
    "end": "3681640"
  },
  {
    "text": "uh efforts he's also the author of the promises specification that I mentioned earlier you can also catch up at es.org",
    "start": "3681640",
    "end": "3687960"
  },
  {
    "text": "uh Forbes Lindsay has built a wonderful front end to the es discuss mailing list that allows you to uh parse some of the",
    "start": "3687960",
    "end": "3695640"
  },
  {
    "text": "messages in detail if you're interested and on that note I'd like to thank you",
    "start": "3695640",
    "end": "3700839"
  },
  {
    "text": "all for",
    "start": "3700839",
    "end": "3703200"
  },
  {
    "text": "coming",
    "start": "3707559",
    "end": "3710559"
  }
]