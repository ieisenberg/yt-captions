[
  {
    "text": "[Music]",
    "start": "1100",
    "end": "9679"
  },
  {
    "text": "um my talk from a lambda lift to an event driven architecture let's take a look what we are actually talking about",
    "start": "9679",
    "end": "15920"
  },
  {
    "text": "right so first I'm going giving you a little of introduction also Danny did",
    "start": "15920",
    "end": "20960"
  },
  {
    "text": "that already um and then we are going to explore okay what is actually lender right um maybe all of you know it or not",
    "start": "20960",
    "end": "29279"
  },
  {
    "text": "but we first going to introduce that term what it is actually and then we are",
    "start": "29279",
    "end": "34640"
  },
  {
    "text": "going to reflect on how can we maybe a little bit do a little bit better so to",
    "start": "34640",
    "end": "40960"
  },
  {
    "text": "be honest this is more like the journey uh we at seammens did like the three",
    "start": "40960",
    "end": "46079"
  },
  {
    "text": "past years so where we started u building our systems and how we build",
    "start": "46079",
    "end": "52239"
  },
  {
    "text": "them today and to showcase that I got then brought three three different",
    "start": "52239",
    "end": "57440"
  },
  {
    "text": "projects and of course in the end we're going to wrap it up so who am I i'm Leo",
    "start": "57440",
    "end": "63039"
  },
  {
    "text": "danny said it all solutions architect here with Seammen's involved with AWS and mostly into serverless stuff so",
    "start": "63039",
    "end": "70479"
  },
  {
    "text": "that's also why we're going to talk uh today about mostly serverless",
    "start": "70479",
    "end": "76439"
  },
  {
    "text": "architectures and when it comes to an architecture as a solutions architect we always aim for the best solution right",
    "start": "76439",
    "end": "83200"
  },
  {
    "text": "around optimal way it's like it's supposed to cost nothing it's go supposed to scale high right and back",
    "start": "83200",
    "end": "90640"
  },
  {
    "text": "then this is what our architecture looked like so this is when you get started with AWS when you get started",
    "start": "90640",
    "end": "97200"
  },
  {
    "text": "with serverless architectures this is probably what you first is going to see",
    "start": "97200",
    "end": "102560"
  },
  {
    "text": "when you get started right we have an Amazon API gateway AWS Lambda and Amazon DB Dynamob and they are great right",
    "start": "102560",
    "end": "111360"
  },
  {
    "text": "serverless services and all good but there's no lambda lift yet or what is a",
    "start": "111360",
    "end": "117200"
  },
  {
    "text": "lambda lift so to discover the lender lift we actually have to zoom in a bit",
    "start": "117200",
    "end": "122640"
  },
  {
    "text": "in the lambda function and what we would do or the lender is more like a word",
    "start": "122640",
    "end": "128800"
  },
  {
    "text": "combination of lambda because AWS lambda is our compute platform and a monolith",
    "start": "128800",
    "end": "134080"
  },
  {
    "text": "because we are building monoliths and we would do something like this so we have our favorite NodeJS framework in our",
    "start": "134080",
    "end": "141599"
  },
  {
    "text": "case NestJS and there you just um define your your REST API right so your routes",
    "start": "141599",
    "end": "147920"
  },
  {
    "text": "in this case we have a post route for like orders we want to create new orders and then you do all your stuffing code",
    "start": "147920",
    "end": "154800"
  },
  {
    "text": "so that's like how we traditionally build servers and it's all good but this time we say okay we don't want to deploy",
    "start": "154800",
    "end": "160800"
  },
  {
    "text": "it on premise we just put it in the lambda function and there you get the lambda lift and with each of those",
    "start": "160800",
    "end": "168000"
  },
  {
    "text": "solutions there are trade-offs right so with the lambda lift there's advantages so when you're talking about AWS Lambda",
    "start": "168000",
    "end": "176000"
  },
  {
    "text": "you soon get to experience like cold starts and that is because on an initial",
    "start": "176000",
    "end": "183080"
  },
  {
    "text": "invocation AWS actually has to download your source code files because before it's able to execute it and that time is",
    "start": "183080",
    "end": "191760"
  },
  {
    "text": "referred to as a cold start but then every subsequent invocation of the same lambda function you don't have that cold",
    "start": "191760",
    "end": "197680"
  },
  {
    "text": "start anymore because the source code files are already there right and of course it's easy to get started because",
    "start": "197680",
    "end": "204159"
  },
  {
    "text": "we already built maybe you already built that server for an on-remise use case um and now you want to leverage the all the",
    "start": "204159",
    "end": "211120"
  },
  {
    "text": "advantages of the cloud so with very little let's say glue code you can",
    "start": "211120",
    "end": "216480"
  },
  {
    "text": "actually manage to migrate your existing applications to the cloud but of course",
    "start": "216480",
    "end": "221840"
  },
  {
    "text": "every solution ships with advantages and disadvantages and some disadvantages are",
    "start": "221840",
    "end": "228000"
  },
  {
    "text": "that even though you have less cold starts because it's all in a single lender function your cold starts tend to",
    "start": "228000",
    "end": "236159"
  },
  {
    "text": "take longer why is that you're bundling all in one bundle right that bundle is",
    "start": "236159",
    "end": "241599"
  },
  {
    "text": "bigger because everything is in there therefore it takes longer and with this type of architecture right we have a",
    "start": "241599",
    "end": "247920"
  },
  {
    "text": "rest API we have the Lambda function and our database uh we only have synchronous",
    "start": "247920",
    "end": "253519"
  },
  {
    "text": "um invocation of course that's efficient for many use cases and there's nothing wrong with that at all but of course as",
    "start": "253519",
    "end": "260400"
  },
  {
    "text": "things grow right those projects we're building those applications they're evolving we we see new requirements",
    "start": "260400",
    "end": "267040"
  },
  {
    "text": "coming in over and over again it might is a limit and in the case of AWS Lambda you actually have a hard limit you",
    "start": "267040",
    "end": "273840"
  },
  {
    "text": "cannot avoid um that means like your bundle size your your uploading is a",
    "start": "273840",
    "end": "280080"
  },
  {
    "text": "maximum of 50 megabytes zipped and 250 megabytes unzipped so if you hit that limit you're really in trouble and you",
    "start": "280080",
    "end": "286160"
  },
  {
    "text": "need to rearchitect your solutions to somehow circumvent that and of course",
    "start": "286160",
    "end": "292400"
  },
  {
    "text": "the big monolith disadvantage you have a single bottleneck so even you're using",
    "start": "292400",
    "end": "298360"
  },
  {
    "text": "AWS you're scaling you have tremendous scaling cap capabilities but if you",
    "start": "298360",
    "end": "304960"
  },
  {
    "text": "introduce a bug that avoids your server to start it will break that lambda",
    "start": "304960",
    "end": "310560"
  },
  {
    "text": "function it will break your application but with that in mind we can already um",
    "start": "310560",
    "end": "317919"
  },
  {
    "text": "or yeah we have one more thing like that's actually an own AWS has its own take on the landlift um so that's",
    "start": "317919",
    "end": "325039"
  },
  {
    "text": "nothing I come came up with and when we zoom in on the very on the very",
    "start": "325039",
    "end": "332919"
  },
  {
    "text": "whoops top left we actually see it's an anti- pattern",
    "start": "332919",
    "end": "338840"
  },
  {
    "text": "so that raises the question okay are we now like doing everything wrong is it or",
    "start": "338840",
    "end": "346000"
  },
  {
    "text": "are we supposed to do better and like one quote on the very bottom I really like because I felt when I read that",
    "start": "346000",
    "end": "353199"
  },
  {
    "text": "really much related it definitely increases the cognitive burden for developers at least it was um that was",
    "start": "353199",
    "end": "360400"
  },
  {
    "text": "the case for us because if you if you go back to the um to the lender lift itself",
    "start": "360400",
    "end": "368639"
  },
  {
    "text": "if you imagine this right uh we have here the product service we don't have any error handling right so what is",
    "start": "368639",
    "end": "375199"
  },
  {
    "text": "going supposed to happen if we fail to create an order are we rolling back we should like unreserve the product again",
    "start": "375199",
    "end": "381600"
  },
  {
    "text": "all those things are not handled and now if you imagine those four lines of codes with tremendous try catch blocks",
    "start": "381600",
    "end": "388960"
  },
  {
    "text": "That's what causes the cognitive burden and with that we successfully",
    "start": "388960",
    "end": "394720"
  },
  {
    "text": "introduced like the lambda lift and as we will do with lender lift in all subsequent projects I'm going to bring",
    "start": "394720",
    "end": "400960"
  },
  {
    "text": "with you today we are going to think about okay why have we used it in first place and what have we learned by",
    "start": "400960",
    "end": "407919"
  },
  {
    "text": "applying those and in our case we used it because we just did not know any",
    "start": "407919",
    "end": "413360"
  },
  {
    "text": "better like three years ago that was mostly like the start of our cloud journey We had them deployed as like",
    "start": "413360",
    "end": "420880"
  },
  {
    "text": "very fast and it worked it scales it works and you're happy but again you",
    "start": "420880",
    "end": "429039"
  },
  {
    "text": "have those trade-offs you have to have those trade-offs in mind and again like",
    "start": "429039",
    "end": "434960"
  },
  {
    "text": "the replatforming case if you have already a REST server running somewhere it's an easy way to migrate to the cloud",
    "start": "434960",
    "end": "442800"
  },
  {
    "text": "but what have we learned well the whole cold start thingy right",
    "start": "442800",
    "end": "448560"
  },
  {
    "text": "so you want to know the implication it ships with so it's a trade-off do I want to have like multiple faster cold starts",
    "start": "448560",
    "end": "456160"
  },
  {
    "text": "or do I accept or do I want only one cold start or like less cold starts but",
    "start": "456160",
    "end": "461360"
  },
  {
    "text": "I accept that a single cold start might take longer to spin up and of course",
    "start": "461360",
    "end": "467199"
  },
  {
    "text": "what we just said it's like a cognitive burden or can become a cognitive burden of course not all monoliths are um",
    "start": "467199",
    "end": "474960"
  },
  {
    "text": "referring to all monoliths but speaking how it was for us and we had like that single bottleneck and that's of course",
    "start": "474960",
    "end": "481039"
  },
  {
    "text": "something to avoid and that actually brings us to our first project I want to",
    "start": "481039",
    "end": "486400"
  },
  {
    "text": "share with you today and we called it coin and the scope of that coin project",
    "start": "486400",
    "end": "493120"
  },
  {
    "text": "is to actually inform fellow seams employees about their stock options and",
    "start": "493120",
    "end": "500000"
  },
  {
    "text": "like equity plans they're eligible and once a year as a ZUS employee you can",
    "start": "500000",
    "end": "505759"
  },
  {
    "text": "subscribe for one of those plans and then you you're fine right so it's",
    "start": "505759",
    "end": "511560"
  },
  {
    "text": "mostlyformational web app but also then you're allocating like your options through that web app and we want to",
    "start": "511560",
    "end": "518560"
  },
  {
    "text": "learn right so we we learned lender lift it's okay but maybe we can do a little bit better so let's take a look how we",
    "start": "518560",
    "end": "525200"
  },
  {
    "text": "built it and that looks very famili similar what we already got right So we",
    "start": "525200",
    "end": "530959"
  },
  {
    "text": "only swapped out like the uh the Dynamob like the NoSQL database of Amazon with",
    "start": "530959",
    "end": "536160"
  },
  {
    "text": "an Aurora instance like Aurora is like the relational database comes in",
    "start": "536160",
    "end": "542080"
  },
  {
    "text": "different flavors we used Postgress SQL but to actually get the difference we",
    "start": "542080",
    "end": "547680"
  },
  {
    "text": "have to zoom in because now we would again have like an API gateway endpoint",
    "start": "547680",
    "end": "553120"
  },
  {
    "text": "a lambda function reader and writer instance from the Aurora but we would have multiple instances of those right",
    "start": "553120",
    "end": "560480"
  },
  {
    "text": "and we would start calling the microservices so now we have a absolutely fine architecture right so we",
    "start": "560480",
    "end": "566560"
  },
  {
    "text": "eliminated our single bottleneck the lambda function and we deploy it to production on a Friday and go home and",
    "start": "566560",
    "end": "573839"
  },
  {
    "text": "are satisfied right so that's what we do um but turns out on the Monday you go",
    "start": "573839",
    "end": "580399"
  },
  {
    "text": "back to office and then you realize oh wait a second we actually not only have",
    "start": "580399",
    "end": "586560"
  },
  {
    "text": "a few clients like HR is actually in on an annual basis running email campaigns",
    "start": "586560",
    "end": "593360"
  },
  {
    "text": "informing all 300,000 eligible seammens employees hey dear Seaman's employees",
    "start": "593360",
    "end": "599279"
  },
  {
    "text": "now please go to coin and allocate your stock options so what's going to happen",
    "start": "599279",
    "end": "604320"
  },
  {
    "text": "we are having a lot of clients causing a lot of traffic on our API gateways so that's fine right we're using serverless",
    "start": "604320",
    "end": "611920"
  },
  {
    "text": "technologies that's why we used them in first place because we are expecting that peaky uh that peaky workload so API",
    "start": "611920",
    "end": "619600"
  },
  {
    "text": "gateway I think it has a quot about 10,000 requests a second so that's okay",
    "start": "619600",
    "end": "624880"
  },
  {
    "text": "a lambda function also right they spin up multiple instances that's okay but",
    "start": "624880",
    "end": "631200"
  },
  {
    "text": "each lambda function which spins up right on invocation to serve the high amount of requests is attempting to",
    "start": "631200",
    "end": "638160"
  },
  {
    "text": "connect to the database and we still have a single writer and a single reader",
    "start": "638160",
    "end": "645760"
  },
  {
    "text": "so of course what's going to happen we are trying to open multiple connections",
    "start": "645760",
    "end": "651200"
  },
  {
    "text": "and we will just overload the database and we fail to serve our requests so",
    "start": "651200",
    "end": "656959"
  },
  {
    "text": "what we what we accomplished we got rid of our compute bottleneck but we",
    "start": "656959",
    "end": "663600"
  },
  {
    "text": "successfully introduced a database bottleneck so how can we circumvent that",
    "start": "663600",
    "end": "669440"
  },
  {
    "text": "so first thing you actually want to do is uh you want to use a so-called like RDS proxy and that thing what what it's",
    "start": "669440",
    "end": "678000"
  },
  {
    "text": "meant for is it is actually taking care of those multiple connections so this",
    "start": "678000",
    "end": "683279"
  },
  {
    "text": "component allows is in the end on connection pool or the AWS solution for",
    "start": "683279",
    "end": "689200"
  },
  {
    "text": "connection pooling um for your database instances but still we had many still",
    "start": "689200",
    "end": "695839"
  },
  {
    "text": "many requests right it was a very read heavy application um we then could also",
    "start": "695839",
    "end": "701839"
  },
  {
    "text": "swap out like a single reader and introduce a so-called Aurora autoscaling",
    "start": "701839",
    "end": "707120"
  },
  {
    "text": "um group um autoscaling yeah and what it does is it lets you track a certain",
    "start": "707120",
    "end": "713680"
  },
  {
    "text": "metric for instance database CPU load and then based on that metric add",
    "start": "713680",
    "end": "719839"
  },
  {
    "text": "additional readers to your database cluster and with that we eventually",
    "start": "719839",
    "end": "725440"
  },
  {
    "text": "managed to serve uh all requests and survive the annual seammen's email",
    "start": "725440",
    "end": "731760"
  },
  {
    "text": "campaign and all seammen's employees got happy that they could allocate their options so that's for the first",
    "start": "731760",
    "end": "739360"
  },
  {
    "text": "application give me just a",
    "start": "739360",
    "end": "742880"
  },
  {
    "text": "second so again why would you use it it's again replatforming thing right",
    "start": "745000",
    "end": "751200"
  },
  {
    "text": "we still have like smaller lander lifts but still somewhat the same we still only have um synchronous um execution",
    "start": "751200",
    "end": "760240"
  },
  {
    "text": "and we already managed to decouple parts from the from the on the compute side",
    "start": "760240",
    "end": "766480"
  },
  {
    "text": "right but what have you learned do not use a single bottleneck",
    "start": "766480",
    "end": "772240"
  },
  {
    "text": "as a database obvious some it sounds stupid like when I'm talking about that it sounds obvious but it was not obvious",
    "start": "772240",
    "end": "778639"
  },
  {
    "text": "back then um and it's again with the small lambda list it's the same thing you have the trade-off of the cold",
    "start": "778639",
    "end": "784320"
  },
  {
    "text": "starts um you should be aware of I would not say it's a problem but you should know the implications that ship with uh",
    "start": "784320",
    "end": "791600"
  },
  {
    "text": "it ships with and of course with the database single database is a bottleneck but if you have that and if it's in an",
    "start": "791600",
    "end": "800399"
  },
  {
    "text": "AWS Aurora uh make sure you want to use an RDS proxy if you have multiple",
    "start": "800399",
    "end": "806760"
  },
  {
    "text": "connections and if that's not sufficient introduce like the autoscaling so that's why we go to the to the cloud provider",
    "start": "806760",
    "end": "813519"
  },
  {
    "text": "in first place right because we want them to do the scaling for us and that actually leads us to the second",
    "start": "813519",
    "end": "821279"
  },
  {
    "text": "project I want to um I want to share with you like after we eventually",
    "start": "821279",
    "end": "828639"
  },
  {
    "text": "um managed to to to deliver coin we got",
    "start": "828639",
    "end": "834160"
  },
  {
    "text": "a new project and it's called DVM like it's the digital visit management the",
    "start": "834160",
    "end": "839800"
  },
  {
    "text": "abbre abbreviation for that and what you do with that um as we've seen seammens",
    "start": "839800",
    "end": "846079"
  },
  {
    "text": "right we have like a lot of business partners we want to get involved we want to get in touch we want to do business and we want to invite them because we",
    "start": "846079",
    "end": "852720"
  },
  {
    "text": "want to show what is seaman's capable of doing right so we have new um new consu",
    "start": "852720",
    "end": "858079"
  },
  {
    "text": "facilities new factories like industry 4.0 like we have those showcases and for",
    "start": "858079",
    "end": "864079"
  },
  {
    "text": "instance I want to say okay let's invite the whole info queue uh attendees to a",
    "start": "864079",
    "end": "870560"
  },
  {
    "text": "seaman site and then I'm going to show you what we can all do and this tool allows me to plan that so I can schedule",
    "start": "870560",
    "end": "877360"
  },
  {
    "text": "meetings i can schedule tours through our factories you get QR codes so that you get through the gates so as you can",
    "start": "877360",
    "end": "884519"
  },
  {
    "text": "imagine I should not be a um I should not be capable to just schedule a",
    "start": "884519",
    "end": "890320"
  },
  {
    "text": "meeting or such a tour for I don't know 100 people there should be an approval process right so probably my manager",
    "start": "890320",
    "end": "897199"
  },
  {
    "text": "wants to know what Leo is is planning on this event on this conference um and so",
    "start": "897199",
    "end": "903440"
  },
  {
    "text": "we have this is a lot of approval a lot of states a lot of um management needed and that's actually a screenshot um of a",
    "start": "903440",
    "end": "910880"
  },
  {
    "text": "first version of a state machine we had for all those approvals and you can even imagine like one of those small small",
    "start": "910880",
    "end": "918240"
  },
  {
    "text": "boxes even unfolds in its own state machine so it's a lot to consider right",
    "start": "918240",
    "end": "923920"
  },
  {
    "text": "you have different factories different interfaces all over the place and you somehow want to manage it right so we",
    "start": "923920",
    "end": "930399"
  },
  {
    "text": "need to build an approval uh workflow and the good thing AWS got got us",
    "start": "930399",
    "end": "936079"
  },
  {
    "text": "covered when it comes to approval workflows uh namely AWS step functions",
    "start": "936079",
    "end": "942000"
  },
  {
    "text": "step functions is like the I refer to it as the workflow engine that AWS provides",
    "start": "942000",
    "end": "947199"
  },
  {
    "text": "for us so what you can do is you can define a workflow so in this example we",
    "start": "947199",
    "end": "952880"
  },
  {
    "text": "have like the start and the end right and we have like a single action we want to emit an event to Amazon event bridge",
    "start": "952880",
    "end": "961120"
  },
  {
    "text": "so the event bus and usually when you just normally",
    "start": "961120",
    "end": "966240"
  },
  {
    "text": "in invoke such a step function it does all the steps you're defining right",
    "start": "966240",
    "end": "972000"
  },
  {
    "text": "writing something to the database an additional API call putting",
    "start": "972000",
    "end": "977440"
  },
  {
    "text": "an event to event bridge and in the end it will succeed and like the execution is done however there's like this wait",
    "start": "977440",
    "end": "984480"
  },
  {
    "text": "for callback mechanism i want to introduce you a bit more in depth because with that enabled if we think",
    "start": "984480",
    "end": "990639"
  },
  {
    "text": "about um having like an event we can link that step function to an event bus",
    "start": "990639",
    "end": "996639"
  },
  {
    "text": "so whenever an event occurs that step function starts right so now usually we",
    "start": "996639",
    "end": "1002959"
  },
  {
    "text": "emit the event again on event bus and we end however with that waitful call back mechan",
    "start": "1002959",
    "end": "1009079"
  },
  {
    "text": "mechanism we actually emit still that event but we pause the step function so",
    "start": "1009079",
    "end": "1016639"
  },
  {
    "text": "we don't finish the step function just yet we pause it and that event that was",
    "start": "1016639",
    "end": "1022240"
  },
  {
    "text": "emitted that includes a token and now we're waiting right but what you",
    "start": "1022240",
    "end": "1029120"
  },
  {
    "text": "will usually do is you subscribe another listener in this case a lambda function",
    "start": "1029120",
    "end": "1035038"
  },
  {
    "text": "to that event including the token and now you want to have that lambda",
    "start": "1035039",
    "end": "1041199"
  },
  {
    "text": "function to save the token to a database because now we are waiting right we are waiting for an approval I don't know is",
    "start": "1041199",
    "end": "1047438"
  },
  {
    "text": "leo allowed to invite all the u all the people to the next sement site yes or no",
    "start": "1047439",
    "end": "1052799"
  },
  {
    "text": "we don't know and of course like you know when have you asked your manager the last time for an approval",
    "start": "1052799",
    "end": "1058799"
  },
  {
    "text": "maybe for vacation to come here to this conference right um it can take some",
    "start": "1058799",
    "end": "1064000"
  },
  {
    "text": "time right um so the good thing about this type of workflow is until you're or",
    "start": "1064000",
    "end": "1071520"
  },
  {
    "text": "while you're waiting for the approval you actually you actually are build like um",
    "start": "1071520",
    "end": "1078240"
  },
  {
    "text": "almost nothing as infrastructure costs the only thing you build for is a little",
    "start": "1078240",
    "end": "1083360"
  },
  {
    "text": "bit of storage right because you store the token within a within a database but you have no compute costs because the",
    "start": "1083360",
    "end": "1090160"
  },
  {
    "text": "step function is paused event bridge is like the serverless event bus so if there are no events no costs same goes",
    "start": "1090160",
    "end": "1096880"
  },
  {
    "text": "for the lambda function but then the when the um when the when you're",
    "start": "1096880",
    "end": "1103520"
  },
  {
    "text": "approved right when I'm approved to to show you the next sement site um we",
    "start": "1103520",
    "end": "1109840"
  },
  {
    "text": "again have an event on the event bus lambda function listening to that reading the token from the database and",
    "start": "1109840",
    "end": "1116720"
  },
  {
    "text": "then finally submitting the token back to the step functions API and just now",
    "start": "1116720",
    "end": "1124559"
  },
  {
    "text": "once that approval was granted the step function would continue and in this case",
    "start": "1124559",
    "end": "1130880"
  },
  {
    "text": "it finishes but of course now you could do everything else right any subsequent",
    "start": "1130880",
    "end": "1136240"
  },
  {
    "text": "things like sending out emails for confirmation of the approval those would be usual like the usual subsequent steps",
    "start": "1136240",
    "end": "1143039"
  },
  {
    "text": "you want to do and with that in mind we actually can take a look how we built",
    "start": "1143039",
    "end": "1148240"
  },
  {
    "text": "our architecture so we again right we want to do like microservices now we",
    "start": "1148240",
    "end": "1153760"
  },
  {
    "text": "have learned right don't use a single bottleneck don't use database a single bottleneck so now we moved um databases",
    "start": "1153760",
    "end": "1160720"
  },
  {
    "text": "to each microser so each microser has its own database and also microser just",
    "start": "1160720",
    "end": "1166000"
  },
  {
    "text": "to visualize that it's not only an lambda function API get it can have multiple components like cues additional",
    "start": "1166000",
    "end": "1172480"
  },
  {
    "text": "listeners so on and so forth um and then of course we have event bridge for our",
    "start": "1172480",
    "end": "1179200"
  },
  {
    "text": "choreography so now we can actually communicate as in an asynchronous",
    "start": "1179200",
    "end": "1184400"
  },
  {
    "text": "fashion right and then the counterpart orchestration we're using step functions",
    "start": "1184400",
    "end": "1190400"
  },
  {
    "text": "for that and in our case we put that step function in a scope we call like",
    "start": "1190400",
    "end": "1196080"
  },
  {
    "text": "the orchestration service um but we'll see how that turned",
    "start": "1196080",
    "end": "1201880"
  },
  {
    "text": "out and now again we can think of why have we used it right why did we choose",
    "start": "1201880",
    "end": "1208720"
  },
  {
    "text": "such a type of architecture ure so first of all asynchronous communication right so everything is asynchronous so we want",
    "start": "1208720",
    "end": "1216320"
  },
  {
    "text": "to also be able to implement those those requirements and also for us like this",
    "start": "1216320",
    "end": "1221520"
  },
  {
    "text": "whole event driven those event- driven mindset was also closely aligned how we",
    "start": "1221520",
    "end": "1227440"
  },
  {
    "text": "actually think or how we would receive the requirements because it usually was okay when a booking was approved please",
    "start": "1227440",
    "end": "1236080"
  },
  {
    "text": "send out an email to the following stakeholders when the catering",
    "start": "1236080",
    "end": "1241720"
  },
  {
    "text": "is is scheduled then we need to feed that back to some other channel right so",
    "start": "1241720",
    "end": "1248400"
  },
  {
    "text": "it's actually always those requirements naturally were like um defined with like",
    "start": "1248400",
    "end": "1255520"
  },
  {
    "text": "okay when something happens please do something else and for us it turned out that was actually quite nice and aligned",
    "start": "1255520",
    "end": "1262240"
  },
  {
    "text": "with this event driven with this event driven approach we more like managed to",
    "start": "1262240",
    "end": "1268240"
  },
  {
    "text": "decouple our our systems right so if microser now fails only that single",
    "start": "1268240",
    "end": "1274159"
  },
  {
    "text": "feature or micros microser failed and not our whole application so that's a huge benefit of course and the whole um",
    "start": "1274159",
    "end": "1282240"
  },
  {
    "text": "step function to implement the orchestration also huge benefit um to do",
    "start": "1282240",
    "end": "1288159"
  },
  {
    "text": "so like what have we learned we need to plan for observability because now",
    "start": "1288159",
    "end": "1293919"
  },
  {
    "text": "suddenly we have dozens of microservices dozens of lambda function functions listening and step functions and other",
    "start": "1293919",
    "end": "1300080"
  },
  {
    "text": "pieces and components as synchronously somehow interacting with each other and we want",
    "start": "1300080",
    "end": "1306640"
  },
  {
    "text": "to keep track what's going on right uh so that's like a big big lesson because",
    "start": "1306640",
    "end": "1311919"
  },
  {
    "text": "maybe you're submitting some event to some microser over here but some subsequent microser horribly fails and",
    "start": "1311919",
    "end": "1319440"
  },
  {
    "text": "you want to know that actually that event caused like the downstream failure",
    "start": "1319440",
    "end": "1325120"
  },
  {
    "text": "so that's a big big thing big lesson learned we have because in the end like it blew up and then we were like okay we",
    "start": "1325120",
    "end": "1331200"
  },
  {
    "text": "have no idea why um so you want to actually trace what what's going on in",
    "start": "1331200",
    "end": "1336400"
  },
  {
    "text": "your system and it's it's again one big step function we introduced right we",
    "start": "1336400",
    "end": "1342720"
  },
  {
    "text": "have this orchestration service it's not a good thing like similar how the initial lambda monolith",
    "start": "1342720",
    "end": "1349840"
  },
  {
    "text": "was like an okayish idea we want to break things up we want to put them in",
    "start": "1349840",
    "end": "1355520"
  },
  {
    "text": "different scopes and also it was hard for us from a mental model because We",
    "start": "1355520",
    "end": "1362159"
  },
  {
    "text": "have in this application we orchestrating not only bookings we're orchestration factory onboarding users",
    "start": "1362159",
    "end": "1367840"
  },
  {
    "text": "onboarding and many many things and then we were like okay where should we put that piece we doing orchestration so it",
    "start": "1367840",
    "end": "1375679"
  },
  {
    "text": "should go in this orchestration service right but actually it's heavily related to a user right so maybe it should go to",
    "start": "1375679",
    "end": "1383120"
  },
  {
    "text": "in the scope of a user service so that's what I um why we I would not do that",
    "start": "1383120",
    "end": "1390159"
  },
  {
    "text": "again like creating its own orchestra ation service because that at some point did not align well with with our mental",
    "start": "1390159",
    "end": "1397080"
  },
  {
    "text": "model and the last one is actually a tricky one um within AWS um especially",
    "start": "1397080",
    "end": "1404480"
  },
  {
    "text": "with this um serverless um event processing solutions",
    "start": "1404480",
    "end": "1411520"
  },
  {
    "text": "let's call it that way like namely event bridge like the event bus but also SQS where you can cue different events and",
    "start": "1411520",
    "end": "1418000"
  },
  {
    "text": "process them um they they all have a so-called delivery",
    "start": "1418000",
    "end": "1423799"
  },
  {
    "text": "policy and when you look it up for certain service the delivery policy for",
    "start": "1423799",
    "end": "1429120"
  },
  {
    "text": "most services is at least once so that does mean not zero",
    "start": "1429120",
    "end": "1436120"
  },
  {
    "text": "times mostly one time but it can be also two times and if you remember like what",
    "start": "1436120",
    "end": "1443280"
  },
  {
    "text": "I showed when I walked you through the step function part right that was triggered by an event emitted by the",
    "start": "1443280",
    "end": "1448320"
  },
  {
    "text": "event bus and now what happens if you have two events two step functions start",
    "start": "1448320",
    "end": "1453679"
  },
  {
    "text": "trying to do the same thing like that's caused side effects um you cannot",
    "start": "1453679",
    "end": "1459600"
  },
  {
    "text": "imagine or it's like a huge like you",
    "start": "1459600",
    "end": "1464919"
  },
  {
    "text": "it yeah it's like hard to hard to describe it's hard to grasp but it's uh it's a mess let's put it this way like",
    "start": "1464919",
    "end": "1471360"
  },
  {
    "text": "you don't want to debug uh those kind of side effects and we maybe see with the",
    "start": "1471360",
    "end": "1477600"
  },
  {
    "text": "final and last architecture how you can actually deal with with duplicated events and that leads us to the to the",
    "start": "1477600",
    "end": "1485520"
  },
  {
    "text": "last architecture I brought with me Okay it's it's called MDLA um AB an",
    "start": "1485520",
    "end": "1492960"
  },
  {
    "text": "abbreviation for my digital lab assistant uh we built that for our seaman's healthiness colleagues and what",
    "start": "1492960",
    "end": "1501279"
  },
  {
    "text": "problem are we trying to solve it's in the end it's a customer portal so if you're customer of semen healthers you",
    "start": "1501279",
    "end": "1508000"
  },
  {
    "text": "buy your favorite medical device uh but then of course different things can fail",
    "start": "1508000",
    "end": "1514720"
  },
  {
    "text": "it does not get shipped it's damaged it has the wrong color um I don't know any",
    "start": "1514720",
    "end": "1521760"
  },
  {
    "text": "it's broken whatsoever and in that case you usually uh contact your healthiness",
    "start": "1521760",
    "end": "1528640"
  },
  {
    "text": "contact but to somehow streamline this in a more structured manner we built",
    "start": "1528640",
    "end": "1534720"
  },
  {
    "text": "like MDLA and when I said like those duplicated events can become a mess",
    "start": "1534720",
    "end": "1541919"
  },
  {
    "text": "there's actually a concept that allows us to take care of that and that's namely item potency and the definition",
    "start": "1541919",
    "end": "1549600"
  },
  {
    "text": "I've looked up here is that item potency is like the capacity of an of an",
    "start": "1549600",
    "end": "1556520"
  },
  {
    "text": "application to component to identify repeated events prevented duplicate inconsistent or lost",
    "start": "1556520",
    "end": "1563480"
  },
  {
    "text": "data clear right next slide let me free rephrase that um we learned those",
    "start": "1563480",
    "end": "1570400"
  },
  {
    "text": "duplicate events those they can happen right that's not good um but we want to know when they arise and then we want to",
    "start": "1570400",
    "end": "1577840"
  },
  {
    "text": "treat that pro treat them properly and handle them and that's what it potency is about so I've brought an example",
    "start": "1577840",
    "end": "1585360"
  },
  {
    "text": "right so let's say we have a lambda function and we're trying to insert a new record a new row within our database",
    "start": "1585360",
    "end": "1592559"
  },
  {
    "text": "so now when we um have duplicated events we would insert two records so that's",
    "start": "1592559",
    "end": "1597840"
  },
  {
    "text": "obviously not a good thing so what you now do instead of directly um instead of",
    "start": "1597840",
    "end": "1604600"
  },
  {
    "text": "directly um inserting that event you want to somehow identify that event",
    "start": "1604600",
    "end": "1610000"
  },
  {
    "text": "right um so either you have like your own ID that ident uniquely identifies an",
    "start": "1610000",
    "end": "1616080"
  },
  {
    "text": "event or you could think of like hashing the whole event to get a unique identifier and then before you put it in",
    "start": "1616080",
    "end": "1622960"
  },
  {
    "text": "the database you actually want to look up that event ID in a so-called control",
    "start": "1622960",
    "end": "1628640"
  },
  {
    "text": "table so in this case could be some cheap Dynamo DB table um and then you",
    "start": "1628640",
    "end": "1633679"
  },
  {
    "text": "have two cases right either the event does not exist in a control database so we know okay we have not processed that",
    "start": "1633679",
    "end": "1641039"
  },
  {
    "text": "event already so we are safe to put it in the in the original database and then",
    "start": "1641039",
    "end": "1648159"
  },
  {
    "text": "finally also have to update the control table and the other case right so we",
    "start": "1648159",
    "end": "1653600"
  },
  {
    "text": "already have processed that event so we will hit within we get a hit in our",
    "start": "1653600",
    "end": "1659039"
  },
  {
    "text": "control database um and then we know okay we already processed that event so",
    "start": "1659039",
    "end": "1664720"
  },
  {
    "text": "what should we do most of the time you don't want to do anything you just drop",
    "start": "1664720",
    "end": "1669919"
  },
  {
    "text": "that event and because you know you already did that and with that in mind",
    "start": "1669919",
    "end": "1675440"
  },
  {
    "text": "we can actually take a look how we built MDLA so lessons learned right we don't",
    "start": "1675440",
    "end": "1682799"
  },
  {
    "text": "want to do its own orchestration service therefore we put like step functions in each microser where needed um we would",
    "start": "1682799",
    "end": "1689760"
  },
  {
    "text": "again have like multiple microservices so microser allowed to communicate with each other right uh so",
    "start": "1689760",
    "end": "1696000"
  },
  {
    "text": "we usually would have um client credentials for each micros service so we have an authorization in place again",
    "start": "1696000",
    "end": "1703440"
  },
  {
    "text": "have like event bridge but for asynchronous communication but what I",
    "start": "1703440",
    "end": "1709919"
  },
  {
    "text": "did not mention actually is it's fairly tedious for clients to connect to all of",
    "start": "1709919",
    "end": "1715840"
  },
  {
    "text": "our microservices right so we have dozens or even hundreds uh of",
    "start": "1715840",
    "end": "1723159"
  },
  {
    "text": "microservices and we don't want the clients to connect to each microser right aggregate data across micro that's",
    "start": "1723159",
    "end": "1729520"
  },
  {
    "text": "very tedious is so instead what we introduced in this project is so-called",
    "start": "1729520",
    "end": "1735440"
  },
  {
    "text": "gateway service it's again an API gateway with a lambda function and we",
    "start": "1735440",
    "end": "1740960"
  },
  {
    "text": "would this time deploy it in a private subnets and",
    "start": "1740960",
    "end": "1747120"
  },
  {
    "text": "that's why uh because then we can create so-called interface endpoints and assign",
    "start": "1747120",
    "end": "1753679"
  },
  {
    "text": "those downstream microservices so-called resource um resource policies and with",
    "start": "1753679",
    "end": "1760000"
  },
  {
    "text": "that we switched like this client credentials or offflow",
    "start": "1760000",
    "end": "1765919"
  },
  {
    "text": "uh in exchange that with AWS IM so the AWS",
    "start": "1765919",
    "end": "1771640"
  },
  {
    "text": "um authorization um yeah service so to say and that of",
    "start": "1771640",
    "end": "1778080"
  },
  {
    "text": "course right that's why we choose the cloud provider we want to um pass on like uh the responsibility right so",
    "start": "1778080",
    "end": "1785760"
  },
  {
    "text": "because we don't want to keep track of our secrets and so on and so forth so that's why we chose um we chose to",
    "start": "1785760",
    "end": "1793840"
  },
  {
    "text": "implement it in this Okay and with that we actually unveiled the last",
    "start": "1793840",
    "end": "1798960"
  },
  {
    "text": "architecture but again why did we choose it um all the previous benefits right so",
    "start": "1798960",
    "end": "1806320"
  },
  {
    "text": "we entered like this rabbit hole of event- driven architectures so of course all those advantages apply and in this",
    "start": "1806320",
    "end": "1813840"
  },
  {
    "text": "case we we really benefited from those private API gateways because it we",
    "start": "1813840",
    "end": "1818880"
  },
  {
    "text": "switched out like our custom authorization mechanism and leveraged",
    "start": "1818880",
    "end": "1824480"
  },
  {
    "text": "like what AWS already provides for us and of course the whole client",
    "start": "1824480",
    "end": "1829840"
  },
  {
    "text": "connections with with the gateway service um but lessons learned I cannot",
    "start": "1829840",
    "end": "1834960"
  },
  {
    "text": "stress it out enough it's again observability observability observability um you want to start",
    "start": "1834960",
    "end": "1840080"
  },
  {
    "text": "tracing like uh X-ray is the AWS service to do to do so but you of course can",
    "start": "1840080",
    "end": "1846000"
  },
  {
    "text": "also use um open tele open telemetry um I think it's called um and again uh",
    "start": "1846000",
    "end": "1854399"
  },
  {
    "text": "those private APIs this was kind of uh both like a benefit why we you wanted to use it but we to be honest we uh we",
    "start": "1854399",
    "end": "1861039"
  },
  {
    "text": "discovered it on the way so it was also a lesson learned for us and with the step functions that's actually an",
    "start": "1861039",
    "end": "1867760"
  },
  {
    "text": "interesting one because you can actually version your step functions and assign",
    "start": "1867760",
    "end": "1873200"
  },
  {
    "text": "different aliases for them and that's actually a very neat feature because that allows you to publish new versions",
    "start": "1873200",
    "end": "1880640"
  },
  {
    "text": "new adapted workflows without breaking anything uh anything old right so that",
    "start": "1880640",
    "end": "1886960"
  },
  {
    "text": "ensures you some backward uh compatibility because imagine you have like your approval workflow it's it's",
    "start": "1886960",
    "end": "1892720"
  },
  {
    "text": "running right you're waiting for approval but now you you're changing the overall process is you're deploying a new step function and like how would you",
    "start": "1892720",
    "end": "1899919"
  },
  {
    "text": "do that right you have to still wait until like the old workflows um succeeded so with that you can actually",
    "start": "1899919",
    "end": "1907039"
  },
  {
    "text": "um have like m run multiple versions of your step function",
    "start": "1907039",
    "end": "1913240"
  },
  {
    "text": "simultaneously and with that we can actually wrap it up so we started with a fairly",
    "start": "1913240",
    "end": "1920120"
  },
  {
    "text": "simple with a very simple architecture like D serverless architecture when it",
    "start": "1920120",
    "end": "1925519"
  },
  {
    "text": "comes to AWS with first API gateway a similar lambda function where we have all our code inside and a database we",
    "start": "1925519",
    "end": "1932640"
  },
  {
    "text": "switched it up right we changed that bottleneck compute bottleneck in favor of a database bottleneck um then we",
    "start": "1932640",
    "end": "1940960"
  },
  {
    "text": "discovered like step functions to actually implement approval workflows which then allowed us to implement a",
    "start": "1940960",
    "end": "1947519"
  },
  {
    "text": "more complex system with a lot of uh orchestration going on such as like the digital visit management and then with",
    "start": "1947519",
    "end": "1954159"
  },
  {
    "text": "the final um architecture with MDL we we implemented our handlers in an item",
    "start": "1954159",
    "end": "1960880"
  },
  {
    "text": "potent way so we are checking have we processed an event already or not and with that we eventually build more",
    "start": "1960880",
    "end": "1968720"
  },
  {
    "text": "resilient architectures and that was more like the journey we've taken",
    "start": "1968720",
    "end": "1976200"
  },
  {
    "text": "and I'm looking forward for your questions thank [Applause]",
    "start": "1976200",
    "end": "1984200"
  },
  {
    "text": "you well one one one uh one question I have or one uh please use like the InfoQ",
    "start": "1984200",
    "end": "1992640"
  },
  {
    "text": "app and let me know what you think about the talk uh a lot of green smileys uh no",
    "start": "1992640",
    "end": "1999039"
  },
  {
    "text": "just let me know i really appreciate if you take some minutes to give me some feedback",
    "start": "1999039",
    "end": "2004799"
  },
  {
    "text": "hi Leo thanks so much for a great talk um I had a question about your last uh",
    "start": "2004799",
    "end": "2010159"
  },
  {
    "text": "you know the best of the best architecture that you built uh can you go back in a slide sure",
    "start": "2010159",
    "end": "2018278"
  },
  {
    "text": "this one so you introduced the lambda function that is going to be um taking",
    "start": "2018320",
    "end": "2025039"
  },
  {
    "text": "in all the requests coming from the users so did you make your architecture",
    "start": "2025039",
    "end": "2030600"
  },
  {
    "text": "synchronous by in the end of the day so is your lambda function waiting on the",
    "start": "2030600",
    "end": "2036159"
  },
  {
    "text": "process to complete you mean the very the very first one yes that very first",
    "start": "2036159",
    "end": "2041360"
  },
  {
    "text": "part and a consequent question is this your new bottleneck yes it is a very",
    "start": "2041360",
    "end": "2047360"
  },
  {
    "text": "good question yes it is um yes and we are um like things we are elaborating um",
    "start": "2047360",
    "end": "2055760"
  },
  {
    "text": "right now is to use like first of all why we did we do that right we we learned that already single lambda",
    "start": "2055760",
    "end": "2062398"
  },
  {
    "text": "bottleneck it's a bad thing we want to avoid that in this case we are not doing",
    "start": "2062399",
    "end": "2067679"
  },
  {
    "text": "like the heavy business logic in there we aggregating across multiple services",
    "start": "2067679",
    "end": "2073040"
  },
  {
    "text": "so of course there's the risk um to have the single bottle but in our case we",
    "start": "2073040",
    "end": "2078158"
  },
  {
    "text": "accepted that risk because back in the time we've been good at building small",
    "start": "2078159",
    "end": "2083440"
  },
  {
    "text": "lambda lifts so we built a small lambda lift obviously right how would it do things today like there are different",
    "start": "2083440",
    "end": "2090800"
  },
  {
    "text": "solutions you could tackle it right so one would be for instance or what also we are investigating is for instance",
    "start": "2090800",
    "end": "2097680"
  },
  {
    "text": "using apps sync like that's the uh graphql like the managed allows you to",
    "start": "2097680",
    "end": "2103760"
  },
  {
    "text": "build um graphql APIs and it's also fully serverless uh service managed by",
    "start": "2103760",
    "end": "2109200"
  },
  {
    "text": "AWS right and then you would get rid of your bottleneck but that obviously Yes",
    "start": "2109200",
    "end": "2114400"
  },
  {
    "text": "very good catch again a bottleneck but in this case we accepted that risk it's",
    "start": "2114400",
    "end": "2119680"
  },
  {
    "text": "an intended bottleneck yeah thanks",
    "start": "2119680",
    "end": "2125160"
  },
  {
    "text": "um one question more towards the application side like uh one issue that",
    "start": "2125160",
    "end": "2131520"
  },
  {
    "text": "I was always found with this the serverless architectures is the unit testing because the whole application is",
    "start": "2131520",
    "end": "2138240"
  },
  {
    "text": "interdependent on the on calling boto tree and then you to properly test it you need to have it cloud so how did you",
    "start": "2138240",
    "end": "2145760"
  },
  {
    "text": "solve the unit testing issues I don't know whether I fully understand your question but like all the",
    "start": "2145760",
    "end": "2152400"
  },
  {
    "text": "application layers like all our controllers all our lambda function code we would unit test",
    "start": "2152400",
    "end": "2160520"
  },
  {
    "text": "um so yeah for example lambda is going to call uh event bridge or it's going to",
    "start": "2160520",
    "end": "2166400"
  },
  {
    "text": "call uh do you have like some mocks for for that that yeah so best case scenario I",
    "start": "2166400",
    "end": "2173680"
  },
  {
    "text": "would love to say that we're doing it all in a fully automated way and we build up whole test environments within",
    "start": "2173680",
    "end": "2180960"
  },
  {
    "text": "our CICD environment do our end to end test and then tear it all down but maybe",
    "start": "2180960",
    "end": "2186720"
  },
  {
    "text": "at some point but we don't do that right now what we do instead is at least locally um we use local stack um so",
    "start": "2186720",
    "end": "2194480"
  },
  {
    "text": "that's like a framework or a tooling that allows you to emulate some AWS",
    "start": "2194480",
    "end": "2200240"
  },
  {
    "text": "environment and then you can at least locally um you can locally start u your",
    "start": "2200240",
    "end": "2206320"
  },
  {
    "text": "AWS services um within our CI/CD integration we run unit tests we do",
    "start": "2206320",
    "end": "2211560"
  },
  {
    "text": "linting and we do some integration tests where we mock like databases because",
    "start": "2211560",
    "end": "2216960"
  },
  {
    "text": "like for Dynamo DB there exists a docker image of course also for Postgress SQL and those relational databases so we spin",
    "start": "2216960",
    "end": "2223839"
  },
  {
    "text": "those up but yes like event bridge or like those other managed or proprietary",
    "start": "2223839",
    "end": "2231119"
  },
  {
    "text": "um AWS service we just mock them away in our tests so there's a not full end",
    "start": "2231119",
    "end": "2237280"
  },
  {
    "text": "toend tests but at least from the application layer to the database layer thanks",
    "start": "2237280",
    "end": "2244920"
  },
  {
    "text": "um so we we don't use AWS in uh in our",
    "start": "2247839",
    "end": "2252960"
  },
  {
    "text": "case but uh generally we have uh huge volume APIs that that are going to the",
    "start": "2252960",
    "end": "2259680"
  },
  {
    "text": "database for data and normally this data is uh they are very large so uh we we",
    "start": "2259680",
    "end": "2267359"
  },
  {
    "text": "cue the request to the database but what if the containers receive the requests",
    "start": "2267359",
    "end": "2273280"
  },
  {
    "text": "and they are willing to accept the request but then when the data is",
    "start": "2273280",
    "end": "2278480"
  },
  {
    "text": "processed in the database these results are coming back to the container and",
    "start": "2278480",
    "end": "2284160"
  },
  {
    "text": "then the container basically is having problem and there is no probably queuing",
    "start": "2284160",
    "end": "2289839"
  },
  {
    "text": "there is a queueing mechanism when the requests go to the database but what if",
    "start": "2289839",
    "end": "2296079"
  },
  {
    "text": "the uh reverse uh queueing is there a way to cue also the response that comes",
    "start": "2296079",
    "end": "2302960"
  },
  {
    "text": "from the database i not sure whether fully understood the",
    "start": "2302960",
    "end": "2308560"
  },
  {
    "text": "question but you're asking whether we can cue like we're sending a request to the database and you're asking whether we can cue or speed the response",
    "start": "2308560",
    "end": "2317359"
  },
  {
    "text": "definitely there is or there is a way to do that you had to build it right so",
    "start": "2317359",
    "end": "2322960"
  },
  {
    "text": "when you from your lambda function from your compute environment you send the request to the database you get a result",
    "start": "2322960",
    "end": "2329119"
  },
  {
    "text": "and then you just can save that result somewhere um so I don't see anything",
    "start": "2329119",
    "end": "2336480"
  },
  {
    "text": "that would like restrict you from doing so but I have to admit I don't fully understand like the use case or um yeah",
    "start": "2336480",
    "end": "2344800"
  },
  {
    "text": "thanks maybe we can take it there sure we can discuss it offline let's say you have a big monolith and you want to",
    "start": "2344800",
    "end": "2351280"
  },
  {
    "text": "split it up how small should a small piece be should it be just one rest",
    "start": "2351280",
    "end": "2356720"
  },
  {
    "text": "endpoint or one entire domain and a very good question uh we asked that",
    "start": "2356720",
    "end": "2363520"
  },
  {
    "text": "question ourselves a lot because we have a lot of monoliths we're trying to refactor and the unsatisfying answer is of course",
    "start": "2363520",
    "end": "2370960"
  },
  {
    "text": "it depends like there is no like hard um",
    "start": "2370960",
    "end": "2376079"
  },
  {
    "text": "rule that you say okay if your lambda function code bundle size exceeds a",
    "start": "2376079",
    "end": "2381280"
  },
  {
    "text": "certain threshold you're doing it wrong um however there are like methods like",
    "start": "2381280",
    "end": "2387280"
  },
  {
    "text": "domain driven design um and stuff like that that allow you to to define the",
    "start": "2387280",
    "end": "2394000"
  },
  {
    "text": "scope or what are suitable scopes of your microservices and then",
    "start": "2394000",
    "end": "2399640"
  },
  {
    "text": "um then you will like naturally see okay where to put which part so there are",
    "start": "2399640",
    "end": "2406320"
  },
  {
    "text": "methods um to build or to get started with those event- driven architectures",
    "start": "2406320",
    "end": "2413720"
  },
  {
    "text": "next question if you have an Lambda which only contains of one REST endpoint",
    "start": "2413760",
    "end": "2418800"
  },
  {
    "text": "do you really then still use like an entire rest framework like Flask and",
    "start": "2418800",
    "end": "2424960"
  },
  {
    "text": "doesn't that create obviously you don't need that go ahead you you don't need that and that also like the question we",
    "start": "2424960",
    "end": "2430880"
  },
  {
    "text": "had in the beginning right we have again a lambda lift and having like that single point of failure what you also",
    "start": "2430880",
    "end": "2437040"
  },
  {
    "text": "can do is to have a single lambda function for all your rest uh rest",
    "start": "2437040",
    "end": "2442160"
  },
  {
    "text": "endpoints so your I don't know get orders endpoint invokes a dedicated",
    "start": "2442160",
    "end": "2448160"
  },
  {
    "text": "lambda function but also like your post uh orders endpoint invokes another lambda function so with that you would",
    "start": "2448160",
    "end": "2455119"
  },
  {
    "text": "also eliminate that bottleneck across your three uh",
    "start": "2455119",
    "end": "2460160"
  },
  {
    "text": "different versions of application you're always stuck with lambda functions have you ever evaluated going for uh for",
    "start": "2460160",
    "end": "2467280"
  },
  {
    "text": "something like Kubernetes uh at at least the very beginning you had this one fat lambda and then you know with Kubernetes",
    "start": "2467280",
    "end": "2473680"
  },
  {
    "text": "you could have run that the part with autoscaling you get similar functionality why did you stick with lambda because we have absolutely no",
    "start": "2473680",
    "end": "2480560"
  },
  {
    "text": "idea of Kubernetes to be honest simple as that so we do like when we have like",
    "start": "2480560",
    "end": "2486720"
  },
  {
    "text": "lambda also has its limits right so certain payload limits you can you can pass through when we would hit those",
    "start": "2486720",
    "end": "2492960"
  },
  {
    "text": "limits of course we need either we can refactor our our application so that it",
    "start": "2492960",
    "end": "2498560"
  },
  {
    "text": "fits um or we would then opt in for a provision solution such as AWS ECS like",
    "start": "2498560",
    "end": "2506240"
  },
  {
    "text": "that's the uh container service um so then we would go like more into this",
    "start": "2506240",
    "end": "2511440"
  },
  {
    "text": "image based but Kubernetes to be honest was never an option for",
    "start": "2511440",
    "end": "2518240"
  },
  {
    "text": "Hi um my question is about your second project uh you you mentioned uh like",
    "start": "2518480",
    "end": "2525040"
  },
  {
    "text": "having u multiply microservices and those microservices having their their",
    "start": "2525040",
    "end": "2531599"
  },
  {
    "text": "databases right um so um should we in this kind of solution should we measure",
    "start": "2531599",
    "end": "2538640"
  },
  {
    "text": "uh infra infrastructural costs with the benefits of this kind of architecture um",
    "start": "2538640",
    "end": "2545440"
  },
  {
    "text": "and the second um question related to this topic is um should the data be",
    "start": "2545440",
    "end": "2552160"
  },
  {
    "text": "written uh synchronously to those databases",
    "start": "2552160",
    "end": "2557200"
  },
  {
    "text": "uh like to answer your your first question like whether having like a single database over multiple ones yes",
    "start": "2557200",
    "end": "2563920"
  },
  {
    "text": "definitely that's going to cost your uh that's going to increase your uh your your bill um but there it's again it's a",
    "start": "2563920",
    "end": "2571760"
  },
  {
    "text": "trade-off can also build such a micros service environment with having a single database but then again it's it's up to",
    "start": "2571760",
    "end": "2579920"
  },
  {
    "text": "you whether you are accepting that risk to have that single single bottleneck to",
    "start": "2579920",
    "end": "2585359"
  },
  {
    "text": "have that single point of failure so as we did with this architecture right now we also have that single bottleneck but",
    "start": "2585359",
    "end": "2591200"
  },
  {
    "text": "we accept the risk it's more about um awareness and making",
    "start": "2591200",
    "end": "2599280"
  },
  {
    "text": "um conscious decisions like there is when I talked in the beginning like the optimal architecture right so with all",
    "start": "2599280",
    "end": "2607359"
  },
  {
    "text": "your questions right that's not the optimal architecture so that's what we consider a good like an optimal in a",
    "start": "2607359",
    "end": "2615760"
  },
  {
    "text": "local optimum right there's no global optimal solution for that so it's always",
    "start": "2615760",
    "end": "2621680"
  },
  {
    "text": "um a decision you have to take and you might want to repeat your second question i have forgotten about uh the",
    "start": "2621680",
    "end": "2628000"
  },
  {
    "text": "second question was about writing data to those databases should this be",
    "start": "2628000",
    "end": "2633359"
  },
  {
    "text": "synchronous uh to uh or or should you just know where you wrote the specific",
    "start": "2633359",
    "end": "2641280"
  },
  {
    "text": "um data and while reading extract data from that specific database so again",
    "start": "2641280",
    "end": "2648560"
  },
  {
    "text": "like there's no global like recommendation or like general recommendation like if you for instance",
    "start": "2648560",
    "end": "2655440"
  },
  {
    "text": "rely on transactions when you're writing then of course you want to do that in a synchronous fashion right um but if you",
    "start": "2655440",
    "end": "2662560"
  },
  {
    "text": "I don't know some inserts taking ages right and then why why don't offload",
    "start": "2662560",
    "end": "2669200"
  },
  {
    "text": "that to a downstream process so again I'm sorry uh it depends thank",
    "start": "2669200",
    "end": "2678319"
  },
  {
    "text": "Yeah hello um you said that uh the Lambda processes an an event at least",
    "start": "2679520",
    "end": "2684800"
  },
  {
    "text": "once um in case that your lambda like have multiple transactions uh then do do you need to",
    "start": "2684800",
    "end": "2692400"
  },
  {
    "text": "implement like a roll back mechanism outside of the lambda or how would you advise to manage uh so you're asking",
    "start": "2692400",
    "end": "2700560"
  },
  {
    "text": "where to handle those duplicated events whether we want to do this mh in the lambda or before um I would say or",
    "start": "2700560",
    "end": "2709760"
  },
  {
    "text": "personally I would recommend to build all your handlers in a resilient and",
    "start": "2709760",
    "end": "2716000"
  },
  {
    "text": "potent way because you never know right so generally speaking you want to",
    "start": "2716000",
    "end": "2721440"
  },
  {
    "text": "protect your system let's call it that right if if you would like consider like this whole AWS cloud is your system like",
    "start": "2721440",
    "end": "2727920"
  },
  {
    "text": "you only want um correct data enter your system but",
    "start": "2727920",
    "end": "2733520"
  },
  {
    "text": "there's like events there are the services right so you cannot avoid it and just like to be sure and there's",
    "start": "2733520",
    "end": "2739359"
  },
  {
    "text": "also like tooling how you can implement um that in an item potent way uh so in",
    "start": "2739359",
    "end": "2744800"
  },
  {
    "text": "case of AWS or with lambda functions you can use the uh lambda power tools and",
    "start": "2744800",
    "end": "2751040"
  },
  {
    "text": "this is like a very lightweight package which does it all for you only have to",
    "start": "2751040",
    "end": "2756480"
  },
  {
    "text": "pass in like your control table and then it's like a like a small wrapper and",
    "start": "2756480",
    "end": "2761520"
  },
  {
    "text": "then you're kind of safe so there's tooling out there generally speaking I'd recommend you build it all um in an",
    "start": "2761520",
    "end": "2769200"
  },
  {
    "text": "unimportant way because it will it's just more resilient and like it's uh very little",
    "start": "2769200",
    "end": "2776319"
  },
  {
    "text": "overhead to implement it then I have another one so in terms of",
    "start": "2776319",
    "end": "2783920"
  },
  {
    "text": "migration of existing uh systems to serverless architectures there is any",
    "start": "2783920",
    "end": "2789599"
  },
  {
    "text": "way to migrate just part of it let's say you take your graphql and then you put",
    "start": "2789599",
    "end": "2794640"
  },
  {
    "text": "API gateway in front or you take one domain and create a lambda function for",
    "start": "2794640",
    "end": "2799839"
  },
  {
    "text": "that domain or how is it to migrate existing systems to a serverless",
    "start": "2799839",
    "end": "2805760"
  },
  {
    "text": "architecture um that's a very good question uh we also have a lot of cases where we have",
    "start": "2805760",
    "end": "2811040"
  },
  {
    "text": "to do that so we have running on prem applications somewhere deep down the",
    "start": "2811040",
    "end": "2816400"
  },
  {
    "text": "seaman's internet and we want to do um elevate them to the cloud and of course if you have a complex system you cannot",
    "start": "2816400",
    "end": "2822800"
  },
  {
    "text": "do it all at once but again you want to and it's it's about like you should",
    "start": "2822800",
    "end": "2829280"
  },
  {
    "text": "probably have some kind of road map right because it could be easier to like migrate the whole monolith to the cloud",
    "start": "2829280",
    "end": "2836720"
  },
  {
    "text": "and then like within the cloud do refactoring try to identify y domains",
    "start": "2836720",
    "end": "2842560"
  },
  {
    "text": "try to identify service boundaries and then um migrate it but of course also",
    "start": "2842560",
    "end": "2848000"
  },
  {
    "text": "this is like a step-by-step process and what we usually would do is we would",
    "start": "2848000",
    "end": "2853520"
  },
  {
    "text": "have like a connection from our on-rem data center to the cloud environment um",
    "start": "2853520",
    "end": "2859280"
  },
  {
    "text": "so there are different options how you can do that with probably any cloud provider and then you just allow them to",
    "start": "2859280",
    "end": "2865440"
  },
  {
    "text": "communicate and then you can move part by part to the cloud",
    "start": "2865440",
    "end": "2870880"
  },
  {
    "text": "thank you uh is there is there any other question we have time for one more before we go",
    "start": "2870880",
    "end": "2876160"
  },
  {
    "text": "if somebody has one okay last question",
    "start": "2876160",
    "end": "2884119"
  },
  {
    "text": "um yeah modeling in state machines and events can be bit tricky have you had any experience with uh when how do you",
    "start": "2884480",
    "end": "2890880"
  },
  {
    "text": "handle when they come the events come out of order sorry can you repeat that like if the",
    "start": "2890880",
    "end": "2896720"
  },
  {
    "text": "events arrive out of order not in the intended U order that you expect suppose you",
    "start": "2896720",
    "end": "2903040"
  },
  {
    "text": "model a physical system with a state machine to to be honest in our use cases we don't rely on event ordering um so we",
    "start": "2903040",
    "end": "2910960"
  },
  {
    "text": "just don't have that requirement that we process all events um in the same order",
    "start": "2910960",
    "end": "2917119"
  },
  {
    "text": "so that does not apply for at least for us but what you could do like again like",
    "start": "2917119",
    "end": "2922960"
  },
  {
    "text": "AWS got your back on that like there are different tools how to enforce or keep ordering of your events for instance",
    "start": "2922960",
    "end": "2930079"
  },
  {
    "text": "using a certain type of queue first in first out queue stuff like that that way",
    "start": "2930079",
    "end": "2935839"
  },
  {
    "text": "you could ensure um processing all your events is the event bridge guaranteed to",
    "start": "2935839",
    "end": "2941280"
  },
  {
    "text": "deliver the events in the order they were published i think they do best effort ordering again with the same",
    "start": "2941280",
    "end": "2948880"
  },
  {
    "text": "thing with the at least once right um so if you rely on strict ordering this",
    "start": "2948880",
    "end": "2954880"
  },
  {
    "text": "might not be sufficient for your use case yeah okay thanks [Music]",
    "start": "2954880",
    "end": "2970310"
  }
]