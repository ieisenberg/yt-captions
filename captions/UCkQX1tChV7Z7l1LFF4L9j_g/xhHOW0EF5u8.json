[
  {
    "text": "everybody thank you for coming everybody hear me okay all right wonderful so this",
    "start": "3960",
    "end": "11400"
  },
  {
    "text": "talk is called how to test infrastructure code I will go through some automated testing practices that we",
    "start": "11400",
    "end": "17130"
  },
  {
    "text": "found for tools like terraformed docker packer kubernetes there will be a lot of",
    "start": "17130",
    "end": "23699"
  },
  {
    "text": "code so get ready to read code this is a hands-on I'll try to run some of the",
    "start": "23699",
    "end": "28769"
  },
  {
    "text": "code we'll see how that goes but first I'm gonna start with a bit of an observation something I've noticed",
    "start": "28769",
    "end": "35310"
  },
  {
    "text": "about the DevOps industry Ops sis admin's whatever you want to call them and that is that we're all living in a",
    "start": "35310",
    "end": "43170"
  },
  {
    "text": "bit of a world of fear this is this is the predominant emotion that I'm seeing",
    "start": "43170",
    "end": "48330"
  },
  {
    "text": "from most of the people that I work with they're just living in fear fear of things like outages fear of security",
    "start": "48330",
    "end": "56490"
  },
  {
    "text": "breaches and data loss and just generally fear of change just people",
    "start": "56490",
    "end": "62010"
  },
  {
    "text": "constantly afraid to change things because they don't know how late they're gonna be up how bad it's gonna be or I just terrified and we know what fear",
    "start": "62010",
    "end": "70950"
  },
  {
    "text": "leads to right fear leads to anger anger leads to hate hate leads to suffering",
    "start": "70950",
    "end": "75980"
  },
  {
    "text": "you know the great scrum master Yoda taught us these lessons and we all know",
    "start": "75980",
    "end": "82320"
  },
  {
    "text": "what suffering leads to write you know elites the things like this right",
    "start": "82320",
    "end": "89390"
  },
  {
    "text": "this this sort of thing I saw this one on Twitter I love this I think it's pretty amazing",
    "start": "92670",
    "end": "99930"
  },
  {
    "text": "how many of have you had this sort of feeling right you're typing along and",
    "start": "103799",
    "end": "108880"
  },
  {
    "text": "sudden you're like oh no oh you just feel it like deep inside your writer if",
    "start": "108880",
    "end": "114850"
  },
  {
    "text": "you don't like the the Star Wars memes we can do your you know maybe Harry Potter is your preferred one that sort",
    "start": "114850",
    "end": "120700"
  },
  {
    "text": "of thing usually after you ran RM RF in the wrong place or draw up table so most",
    "start": "120700",
    "end": "128530"
  },
  {
    "text": "teams seem to deal with this in two ways one a lot of drinking and smoking and",
    "start": "128530",
    "end": "135390"
  },
  {
    "text": "number two deploying less and less frequently right it's scary it's terrifying so you just avoid it and you",
    "start": "135390",
    "end": "141760"
  },
  {
    "text": "do it less and less often unfortunately both of these solutions just make the problem much much worse right your",
    "start": "141760",
    "end": "148120"
  },
  {
    "text": "releases get drunker but also they get bigger there's more risk this actually",
    "start": "148120",
    "end": "153250"
  },
  {
    "text": "makes the whole problem a lot worse and then you end up in this sort of the world right sixty percent of the time it works every",
    "start": "153250",
    "end": "159519"
  },
  {
    "text": "time right so I don't want to live in that kind of world right I think there's a better way to",
    "start": "159519",
    "end": "165069"
  },
  {
    "text": "deal with this constant state of fear and that is automated testing now I want to make the claim that this is gonna",
    "start": "165069",
    "end": "170920"
  },
  {
    "text": "solve all the problems in the world it's gonna make all your fears go away but mid tests do have one very interesting",
    "start": "170920",
    "end": "177609"
  },
  {
    "text": "impact and when you see teams that do a good job with it this is exactly what you see which is instead of fear you",
    "start": "177609",
    "end": "183519"
  },
  {
    "text": "start to see confidence that's what tests are about tests are not about proving that your code works they're not",
    "start": "183519",
    "end": "190450"
  },
  {
    "text": "some perfect thing that says yeah everything's great they are about confidence it's about emotion it's about how you feel about making those changes",
    "start": "190450",
    "end": "197200"
  },
  {
    "text": "and that's really important because you can fight fear with confidence that's really the key so we do mostly know how",
    "start": "197200",
    "end": "207849"
  },
  {
    "text": "to write automated tests for application code if you have an app built in Ruby or go or Python or any of these",
    "start": "207849",
    "end": "212859"
  },
  {
    "text": "general-purpose languages we more or less know how to test these things but how do you test infrastructure code if",
    "start": "212859",
    "end": "219639"
  },
  {
    "text": "you have a whole pile of terraform code how do you know that the infrastructure deploys works the way you expect it to",
    "start": "219639",
    "end": "225700"
  },
  {
    "text": "or if you have a pile of kubernetes code how do you know that the way it deploys",
    "start": "225700",
    "end": "230950"
  },
  {
    "text": "your services is the way you actually need it to work how do you test these things so that's",
    "start": "230950",
    "end": "236560"
  },
  {
    "text": "the goal to talk I'll share with you some ideas some insights on how to test with some of these tools and we will",
    "start": "236560",
    "end": "243400"
  },
  {
    "text": "look at a whole bunch of code and hopefully by the end of it you'll at least have some ideas of you know how to sleep better at night how to be a little",
    "start": "243400",
    "end": "249880"
  },
  {
    "text": "less afraid I am Evgeny Berkman also go by the nickname",
    "start": "249880",
    "end": "254950"
  },
  {
    "text": "Jim which most people find a little easier to pronounce I don't why I put a picture of myself into my own slide deck",
    "start": "254950",
    "end": "260440"
  },
  {
    "text": "because I'm standing right here anyway I'm the co-founder of a company called grunt work and this is where a lot of",
    "start": "260440",
    "end": "267280"
  },
  {
    "text": "this automated testing experience comes from a grunt work we built a library of hundreds of thousands of lines of",
    "start": "267280",
    "end": "273550"
  },
  {
    "text": "reusable code for terraform in kubernetes and docker etc and it's used in production by hundreds of companies",
    "start": "273550",
    "end": "279610"
  },
  {
    "text": "and the way our tiny company is able to maintain them all of that code and keep it working as the whole world around us",
    "start": "279610",
    "end": "285010"
  },
  {
    "text": "is changing is through a lot of automated testing so we spend a lot of time thinking about this I'm also the",
    "start": "285010",
    "end": "291550"
  },
  {
    "text": "author of a couple books there's terraform up and running that's actually the old cover I need to update",
    "start": "291550",
    "end": "297640"
  },
  {
    "text": "this slide as well second edition is out yeah go get it and hello startup which",
    "start": "297640",
    "end": "303010"
  },
  {
    "text": "also talks a lot about the software delivery process so here is what we're",
    "start": "303010",
    "end": "308260"
  },
  {
    "text": "gonna talk about today we're gonna look at the various testing techniques that are out there for infrastructure code",
    "start": "308260",
    "end": "314710"
  },
  {
    "text": "look at static analysis unit testing integration testing end-to-end testing and these are loose categorizations some",
    "start": "314710",
    "end": "321850"
  },
  {
    "text": "people become very religious about what each of these terms means just these are more a helpful mental model to navigate",
    "start": "321850",
    "end": "328210"
  },
  {
    "text": "the space alright so we've got a lots covered we get started with static",
    "start": "328210",
    "end": "333340"
  },
  {
    "text": "analysis and the idea here is you want to be able to test your code without actually running the code or in the case",
    "start": "333340",
    "end": "339940"
  },
  {
    "text": "of infrastructure code without actually deploying anything for real that's the goal of static analysis look at my code don't run it tell me if there's a bug or",
    "start": "339940",
    "end": "347290"
  },
  {
    "text": "if there's some sort of issue and there's a few categories in here again",
    "start": "347290",
    "end": "352510"
  },
  {
    "text": "these are not perfect groupings there's some overlap between them just a useful mental model for navigating here so the",
    "start": "352510",
    "end": "359050"
  },
  {
    "text": "first one are the compilers the parsers the interpreters for whatever language you're using and so the idea is these",
    "start": "359050",
    "end": "365590"
  },
  {
    "text": "things are checking your tax the structure of your code the very basic thing you know does it compile is",
    "start": "365590",
    "end": "371210"
  },
  {
    "text": "this valid yamo HCL go whatever light is release and so there's a variety of",
    "start": "371210",
    "end": "377180"
  },
  {
    "text": "these tools I don't know how well you can read some of the smaller text in the back but I'll go through this really",
    "start": "377180",
    "end": "383210"
  },
  {
    "text": "quick so for example for terraform you have the terraform validate command I'll show you a really quick example of that",
    "start": "383210",
    "end": "390460"
  },
  {
    "text": "well that's intriguing one of my screens updated the other did not hold on okay I",
    "start": "393130",
    "end": "399500"
  },
  {
    "text": "might have to exit the show to make that work all right there we go okay so I'm in here I have a little bit of terraform",
    "start": "399500",
    "end": "405290"
  },
  {
    "text": "code we'll deal with what the code is in a minute looks like this nothing fancy using a",
    "start": "405290",
    "end": "410840"
  },
  {
    "text": "very simple module and in here I can run the validate command and it tells me",
    "start": "410840",
    "end": "417320"
  },
  {
    "text": "everything looks good and then if I mess up the code like I make some silly typos in here and I run terraform valid again",
    "start": "417320",
    "end": "423980"
  },
  {
    "text": "it will give me an error alright so that is a very very basic level of testing",
    "start": "423980",
    "end": "429260"
  },
  {
    "text": "that you can do for your code scan it tell me if the variables that I'm referencing are actually defined tell me",
    "start": "429260",
    "end": "434480"
  },
  {
    "text": "if the syntax is valid I missed a curly brace there's similar commands for Packer and in the kubernetes world cube",
    "start": "434480",
    "end": "440870"
  },
  {
    "text": "control has a dry run and a validate flag that you can add that'll do something pretty similar alright moving",
    "start": "440870",
    "end": "448070"
  },
  {
    "text": "one level up from that you want to catch not just syntactic issues but also common mistakes so there's a whole",
    "start": "448070",
    "end": "455690"
  },
  {
    "text": "series of these tools by the way these slides will be available after the talk so don't worry about all these links",
    "start": "455690",
    "end": "461750"
  },
  {
    "text": "should be easier for you to grab so there's a whole series of these tools so for terraform there's contest which",
    "start": "461750",
    "end": "467300"
  },
  {
    "text": "actually works with more than just terraform terraform validate TF lint etc a whole bunch of these tools that will",
    "start": "467300",
    "end": "472490"
  },
  {
    "text": "read your code statically analyze it and try to catch common errors one of the kind of idiomatic examples these tools",
    "start": "472490",
    "end": "479060"
  },
  {
    "text": "give you is you have a security group that allows all inbound traffic in other words a firewall that's way too open so",
    "start": "479060",
    "end": "485180"
  },
  {
    "text": "something like that can be caught using tools like this and a lot of cases so these are good to plug into your CI CD",
    "start": "485180",
    "end": "490970"
  },
  {
    "text": "pipeline they run in seconds they're going to catch a bunch of common mistakes which again is better than having no testing at all third group",
    "start": "490970",
    "end": "499420"
  },
  {
    "text": "which don't have a good name for I'll just call it dry run here we actually are gonna execute the code but we're not",
    "start": "499420",
    "end": "506930"
  },
  {
    "text": "going to deploy anything it's not gonna have any effect on the real world so we are running the code a little bit here",
    "start": "506930",
    "end": "512180"
  },
  {
    "text": "so it's a kind of an in-between between static analysis and unit testing and we're going to give some sort of a plan",
    "start": "512180",
    "end": "518870"
  },
  {
    "text": "output and be able to analyze that so in the terraform world there's some nice",
    "start": "518870",
    "end": "523880"
  },
  {
    "text": "equivalents of this so there's actually a terraform plan command that I can run here so on this module I can run my plan",
    "start": "523880",
    "end": "535580"
  },
  {
    "text": "command but this little thing at the front this is just how I thoughts gate to AWS basically ignore that this is the",
    "start": "535580",
    "end": "541520"
  },
  {
    "text": "actual command terraform plan if I run that it'll make some API calls and it'll",
    "start": "541520",
    "end": "546800"
  },
  {
    "text": "tell me what the code is going to do without actually changing anything in the world so here's my plan output it",
    "start": "546800",
    "end": "552830"
  },
  {
    "text": "shows me that it's going to deploy some lambda function some API gateway stuff etc etc and you can analyze this plan as",
    "start": "552830",
    "end": "559640"
  },
  {
    "text": "a form of testing so there's some tools that help you with that for example in",
    "start": "559640",
    "end": "566240"
  },
  {
    "text": "the terraform world there's hash record Sentinel and terraform compliance both of them can run terraform plan and",
    "start": "566240",
    "end": "571370"
  },
  {
    "text": "statically analyze that thing and catch again a bunch of common errors in a static way in kubernetes world there's a",
    "start": "571370",
    "end": "579200"
  },
  {
    "text": "server dry run I think this is an alpha feature actually it's pretty new which will actually take your gamal and your",
    "start": "579200",
    "end": "585080"
  },
  {
    "text": "configuration and send it to the api server that server will process it it just won't save the results and so it's",
    "start": "585080",
    "end": "591650"
  },
  {
    "text": "not going to affect the world but again this is a good way to check it does my code more or less function to any extent",
    "start": "591650",
    "end": "598090"
  },
  {
    "text": "so those are quick little overview of the static analysis tools what's nice",
    "start": "598090",
    "end": "603440"
  },
  {
    "text": "about them they run fast easy to use you don't have to learn a whole bunch of stuff but the downside is they're very",
    "start": "603440",
    "end": "610520"
  },
  {
    "text": "limited in the kinds of errors they can catch so if you're not doing any infrastructure testing at all at least",
    "start": "610520",
    "end": "616430"
  },
  {
    "text": "add static analysis it really just takes a few minutes of your time and it will catch a bunch of these common mistakes but if you can do a little more let's do",
    "start": "616430",
    "end": "624350"
  },
  {
    "text": "a little more so that's where unit testing comes in now we're going to get a little more advanced so the idea with",
    "start": "624350",
    "end": "630500"
  },
  {
    "text": "unit testing is you want to be able to test as the name implies a single unit of your code in isolation so in",
    "start": "630500",
    "end": "638410"
  },
  {
    "text": "this section we're going to go through a few things we'll introduce the basics of unit testing I'll then show a couple",
    "start": "638410",
    "end": "643990"
  },
  {
    "text": "examples for two different types of infrastructure code so to look at Tara Forman doc and kubernetes and then we'll talk about cleanup so the basics first",
    "start": "643990",
    "end": "653380"
  },
  {
    "text": "thing to understand about unit testing is what's a unit I've had a lot of people come up to me and say hey I have",
    "start": "653380",
    "end": "658980"
  },
  {
    "text": "50,000 lines of code deploys this enormous infrastructure how do i unit test it well you don't",
    "start": "658980",
    "end": "664660"
  },
  {
    "text": "that's not a unit unit testing with general-purpose languages is on a single method or a single class the equivalent",
    "start": "664660",
    "end": "672340"
  },
  {
    "text": "with infrastructure code is going to be a single module whatever module means and the language and tools you're using so your infrastructure should be broken",
    "start": "672340",
    "end": "679360"
  },
  {
    "text": "up into a bunch of small pieces if it's not that's actually step one to being",
    "start": "679360",
    "end": "684580"
  },
  {
    "text": "able to unit test it if you right now have a terraform file or CloudFormation or any other language with 50,000 lines",
    "start": "684580",
    "end": "691030"
  },
  {
    "text": "of code that's an anti-pattern break it up into a bunch of small standalone pieces and one of the many advantages you'll get is",
    "start": "691030",
    "end": "698110"
  },
  {
    "text": "you can unit test those pieces okay next thing is with app code when you're",
    "start": "698110",
    "end": "704860"
  },
  {
    "text": "testing those units when you're testing a single method or class you can typically isolate away the rest of the",
    "start": "704860",
    "end": "710620"
  },
  {
    "text": "outside world right all of your databases file system web services you isolate them and you can test just the",
    "start": "710620",
    "end": "716200"
  },
  {
    "text": "unit by itself which is good because then you can test very quickly and it's this tests are gonna be nice and stable",
    "start": "716200",
    "end": "721980"
  },
  {
    "text": "but if you actually go look at most infrastructure code so here's some terraform code what's this code doing",
    "start": "721980",
    "end": "727960"
  },
  {
    "text": "all it's doing is talking to the outside world that's 99% of what your code is doing whether it's kubernetes",
    "start": "727960",
    "end": "734290"
  },
  {
    "text": "CloudFormation AWS that's all it really does is talk to the outside world if you try to isolate the outside world there's",
    "start": "734290",
    "end": "740830"
  },
  {
    "text": "really nothing left to test so the only real way to test infrastructure code",
    "start": "740830",
    "end": "746080"
  },
  {
    "text": "beyond static analysis is by deploying it to a real environment whatever",
    "start": "746080",
    "end": "751510"
  },
  {
    "text": "environment you happen to be using there might be AWS for Google Cloud it might be your kubernetes cluster you actually",
    "start": "751510",
    "end": "756880"
  },
  {
    "text": "have to deploy because that's what the code does if you're executing it a deployment is the result so key takeaway",
    "start": "756880",
    "end": "763390"
  },
  {
    "text": "there is no pure unit testing for infrastructure code in the way that you might think of it for application code which means your test",
    "start": "763390",
    "end": "772220"
  },
  {
    "text": "strategy looks a little more like this you're going to deploy the infrastructure to a real environment",
    "start": "772220",
    "end": "777579"
  },
  {
    "text": "you're going to validate that the infrastructure works and I'll show you a few examples how to do that and then at",
    "start": "777579",
    "end": "782959"
  },
  {
    "text": "the end of the test you under ploy the infrastructure again so really again",
    "start": "782959",
    "end": "787970"
  },
  {
    "text": "this is where the terminology cuts gets kind of messy this is more of an integration test but we're testing one",
    "start": "787970",
    "end": "793040"
  },
  {
    "text": "unit one module so I prefer to just stick with a word unit test and just think of it that way now there's a bunch",
    "start": "793040",
    "end": "799970"
  },
  {
    "text": "of tools that can help you implement this strategy not a comprehensive list this is just some of the more popular ones some of them will do the deploy and",
    "start": "799970",
    "end": "808100"
  },
  {
    "text": "undeploy steps for you some of them expect you to do the deploy and unn deploy outside of the tool",
    "start": "808100",
    "end": "813410"
  },
  {
    "text": "yourself so terror tests for example can do deploy a nun deploy can do validation and it integrates with a whole bunch of",
    "start": "813410",
    "end": "819620"
  },
  {
    "text": "tools including terraform and kubernetes and docker but there's a bunch of other tools some that are specific to terraform some that are specific to",
    "start": "819620",
    "end": "826639"
  },
  {
    "text": "checking servers so definitely check these out all the links are going to be or are in the slide deck and you'll have",
    "start": "826639",
    "end": "831920"
  },
  {
    "text": "access to that soon in this talk we're mostly going to use terror tests but",
    "start": "831920",
    "end": "837019"
  },
  {
    "text": "just bear in mind that these the same technique will work with pretty much any tool all right so let's try to write a",
    "start": "837019",
    "end": "844579"
  },
  {
    "text": "unit test here the sample code so this",
    "start": "844579",
    "end": "849800"
  },
  {
    "text": "talk has a bunch of sample code there's some terraform code some kubernetes and the automated tests for it I don't know",
    "start": "849800",
    "end": "855529"
  },
  {
    "text": "that that's the best length I should have gone with a slightly shorter link it's in the grunt work io org",
    "start": "855529",
    "end": "861860"
  },
  {
    "text": "it's called infrastructures code testing talk I'll tweet this one out it'll be in the slide deck so all the code I'm showing you here you can check it out",
    "start": "861860",
    "end": "867740"
  },
  {
    "text": "after the talk and one of the things you'll find in that sample code is a simple little hello world application",
    "start": "867740",
    "end": "873949"
  },
  {
    "text": "that we can test so let me actually deploy that little application now takes",
    "start": "873949",
    "end": "880130"
  },
  {
    "text": "about 30 seconds I don't want to sitting staring at the screen so let me run by",
    "start": "880130",
    "end": "887680"
  },
  {
    "text": "there we go all right so I'm just going to deploy this thing in the background and then I'll walk through the code and",
    "start": "887680",
    "end": "894740"
  },
  {
    "text": "show you what this thing is actually doing yes okay so here's the hello world app it's",
    "start": "894740",
    "end": "901880"
  },
  {
    "text": "terraform code looks a little bit like this very simple code that's really all there is to it it's using a module to",
    "start": "901880",
    "end": "908210"
  },
  {
    "text": "deploy a service application so for the purposes of an example I'm using a Tobias lambda and API gateway here just",
    "start": "908210",
    "end": "915290"
  },
  {
    "text": "cuz they deploy quickly so the talk goes faster if I do this this module lives in the same repo here it is if you're",
    "start": "915290",
    "end": "922010"
  },
  {
    "text": "interested in the code it's does more or less what you expect to play lambda function create an iamb role for a",
    "start": "922010",
    "end": "927470"
  },
  {
    "text": "deploy api gateway etc and this code also outputs the URL of this little",
    "start": "927470",
    "end": "933230"
  },
  {
    "text": "endpoint at the end and what we're actually running in Italy is lambda is some JavaScript code and this is",
    "start": "933230",
    "end": "939830"
  },
  {
    "text": "basically the the hello world example so it just says hello world and returns a 200 okay it's a really simple piece of",
    "start": "939830",
    "end": "946220"
  },
  {
    "text": "code it's deployed in the background I can now copy and paste this URL run curl",
    "start": "946220",
    "end": "952520"
  },
  {
    "text": "on it hit enter and there we go we've got our nice hello world so this is a",
    "start": "952520",
    "end": "958520"
  },
  {
    "text": "nice thing for us the test and play around with here during the talk let me actually undo ploy it now just so I",
    "start": "958520",
    "end": "964400"
  },
  {
    "text": "don't forget about that but what you're notice is what I'm doing right now is I'm manually testing this thing right",
    "start": "964400",
    "end": "971120"
  },
  {
    "text": "what did I do deploy validate and now here I'm doing the unemployed so we're",
    "start": "971120",
    "end": "976370"
  },
  {
    "text": "gonna actually write a unit test that does exactly these steps but automatically in code so let's see what",
    "start": "976370",
    "end": "982730"
  },
  {
    "text": "that looks like I'll skip ahead here and I'll walk through what the code does in",
    "start": "982730",
    "end": "987800"
  },
  {
    "text": "the slide deck and then I'll show you the actual code snippet in a second we'll run it and see if it works so",
    "start": "987800",
    "end": "993760"
  },
  {
    "text": "since we're using tear tests tear test is a go library we're gonna write the tests and go if you don't know go don't",
    "start": "993760",
    "end": "1000040"
  },
  {
    "text": "panic not a hard language and not critical to understand everything about the talk it's more of the concept just to get",
    "start": "1000040",
    "end": "1005500"
  },
  {
    "text": "your mind just to get the mindset right so we create a hello world app test go",
    "start": "1005500",
    "end": "1011380"
  },
  {
    "text": "and this is the basic structure of the test and I'll walk through this line by line so this is actually almost the",
    "start": "1011380",
    "end": "1018130"
  },
  {
    "text": "entire unit test so the first thing we do is we say okay here are my options for running terraform my code lives in",
    "start": "1018130",
    "end": "1025660"
  },
  {
    "text": "this examples hello world app folder I then use a tear test function this terraform",
    "start": "1025660",
    "end": "1032410"
  },
  {
    "text": "dot in it and apply to run terraform in it and tear from apply so this will actually deploy into my AWS account I'm",
    "start": "1032410",
    "end": "1040360"
  },
  {
    "text": "then going to validate that the code is working and I'll show you the contents of that in just a second and then at the",
    "start": "1040360",
    "end": "1046270"
  },
  {
    "text": "end of the test we're gonna run terraform destroy so this defer if you're not familiar with go defer basically says run this before",
    "start": "1046270",
    "end": "1053740"
  },
  {
    "text": "the function exits no matter how it exits so even if the test fails it'll always run Toofer similar to a try",
    "start": "1053740",
    "end": "1058870"
  },
  {
    "text": "finally or a ensure in other languages so that's a test apply validate destroy",
    "start": "1058870",
    "end": "1065170"
  },
  {
    "text": "that's really what we're doing the validate isn't particularly complicated we're using a tear test helper to read",
    "start": "1065170",
    "end": "1071980"
  },
  {
    "text": "that URL output and then we're using another helper to make HTTP requests to",
    "start": "1071980",
    "end": "1077860"
  },
  {
    "text": "that output and we're looking for a two hundred okay that says hello world and we're gonna retry it a few times because",
    "start": "1077860",
    "end": "1083680"
  },
  {
    "text": "the deployment is asynchronous so it's not guaranteed to be up and running the second apply finishes so that's the",
    "start": "1083680",
    "end": "1089800"
  },
  {
    "text": "whole test let me run it really quickly it'll take about 30 seconds to run so",
    "start": "1089800",
    "end": "1096040"
  },
  {
    "text": "I'll jump into the test folder run go",
    "start": "1096040",
    "end": "1101380"
  },
  {
    "text": "test this is our hello world unit test here and I'll let that thing run in the",
    "start": "1101380",
    "end": "1108070"
  },
  {
    "text": "background for about 30 seconds let's look a little more at the code so what",
    "start": "1108070",
    "end": "1113740"
  },
  {
    "text": "I'm actually running here is here's my test folder here's hello world app unit test here's the go code and it's pretty",
    "start": "1113740",
    "end": "1120430"
  },
  {
    "text": "much identical to what I showed you in the slide deck there's one little piece that I'll explain in a few minutes but",
    "start": "1120430",
    "end": "1126130"
  },
  {
    "text": "the rest is exactly as I said terraforming in and apply validate destroy and the validate basically reads",
    "start": "1126130",
    "end": "1132460"
  },
  {
    "text": "the output and does a bunch of HTTP requests in a retry loop speaking of",
    "start": "1132460",
    "end": "1137950"
  },
  {
    "text": "HTTP requests the reason we're using HTTP is the infrastructure I'm deploying",
    "start": "1137950",
    "end": "1144220"
  },
  {
    "text": "here is a web service so it makes sense to validate it by making HTTP requests but of course you might be deploying",
    "start": "1144220",
    "end": "1150010"
  },
  {
    "text": "other types of infrastructure and there's different ways to validate those so for example if you're running a",
    "start": "1150010",
    "end": "1155230"
  },
  {
    "text": "server that's not running any not listening on any port then you might want to validate it by SSA tching to",
    "start": "1155230",
    "end": "1161710"
  },
  {
    "text": "that server and a whole bunch of properties and terror testa's ways to do that in spec all",
    "start": "1161710",
    "end": "1166800"
  },
  {
    "text": "those other tools they're really good at that if you're running a cloud service you might want to use the cloud api's to",
    "start": "1166800",
    "end": "1172080"
  },
  {
    "text": "verify that it works if you're deploying a database you might want to run sequel queries etc so just bear in mind that validation is very used case specific",
    "start": "1172080",
    "end": "1179240"
  },
  {
    "text": "but for the purposes of this talk it'll just always be HTTP requests so running",
    "start": "1179240",
    "end": "1184320"
  },
  {
    "text": "tests you authenticate to whatever environment you're deploying to in this case I'm with indicating to AWS and then",
    "start": "1184320",
    "end": "1189840"
  },
  {
    "text": "you run the go test command to actually kick off the test suite and so if I jump back to the terminal it should be done",
    "start": "1189840",
    "end": "1196500"
  },
  {
    "text": "running the tests yay that's always good to see the word pass took about 35",
    "start": "1196500",
    "end": "1201660"
  },
  {
    "text": "seconds and if we the log output unfortunate is hard to read because the font size is kind of wrapping around but",
    "start": "1201660",
    "end": "1209040"
  },
  {
    "text": "if you dig through here you'll see that the test ran a tear for a minute then it",
    "start": "1209040",
    "end": "1214410"
  },
  {
    "text": "ran terraform apply here's the terraform apply log output it deployed the",
    "start": "1214410",
    "end": "1219930"
  },
  {
    "text": "serverless app ran terraform output to fetch the URL it then started making",
    "start": "1219930",
    "end": "1225360"
  },
  {
    "text": "HTTP requests got the response it expected when terraform destroy and voila in 30 seconds I can now check that",
    "start": "1225360",
    "end": "1233010"
  },
  {
    "text": "this module is working the way I expect to I can run this after every single commit and that's huge because I just",
    "start": "1233010",
    "end": "1240240"
  },
  {
    "text": "went from a bot pile of code that maybe works maybe doesn't who knows well I guess our users will find out too I can",
    "start": "1240240",
    "end": "1246270"
  },
  {
    "text": "test this after every single commit to this code alright so that is the unit",
    "start": "1246270",
    "end": "1253200"
  },
  {
    "text": "testing example for for terraform and",
    "start": "1253200",
    "end": "1258750"
  },
  {
    "text": "just to make the point that this is not something specific to terraform let's do a unit test for something a little different so we're going to look at some",
    "start": "1258750",
    "end": "1264930"
  },
  {
    "text": "docker and kubernetes code here as well so let me jump back into my IDE the",
    "start": "1264930",
    "end": "1270720"
  },
  {
    "text": "sample code is in that same repo so up here we have our docker kubernetes",
    "start": "1270720",
    "end": "1275880"
  },
  {
    "text": "example and there's really just two files one is a docker file and this defines a really simple docker image for",
    "start": "1275880",
    "end": "1283320"
  },
  {
    "text": "a really simple hello world server in the real world this would be your Ruby app your java application whatever it is",
    "start": "1283320",
    "end": "1288900"
  },
  {
    "text": "that you're building but for this talk it's just a really simple hello world server and the other thing in here is this blob",
    "start": "1288900",
    "end": "1296480"
  },
  {
    "text": "of yam oh this is used with kubernetes it defines a deployment if you don't use kubernetes this is basically a way to",
    "start": "1296480",
    "end": "1301789"
  },
  {
    "text": "say hey I have this docker container over here I want to deploy one copy of it and I want to stick a load balancer",
    "start": "1301789",
    "end": "1308660"
  },
  {
    "text": "in front of it that will listen on port 8080 so deploy the thing put a load balancer so I can access the thing so I",
    "start": "1308660",
    "end": "1316760"
  },
  {
    "text": "can run this thing as well I'll show you how I test this thing manually first and then we'll write the automated test for",
    "start": "1316760",
    "end": "1322400"
  },
  {
    "text": "it so I'll jump into the examples folder first thing to do is build my docker",
    "start": "1322400",
    "end": "1328010"
  },
  {
    "text": "image so you can do that with the docker build command and that will run pretty",
    "start": "1328010",
    "end": "1333080"
  },
  {
    "text": "quick because it's all coming from cache I run this before if you're running it from scratch it takes 30 seconds to a",
    "start": "1333080",
    "end": "1338179"
  },
  {
    "text": "minute so that created this a docker image that I can now deploy to a kubernetes cluster and I can oppose any",
    "start": "1338179",
    "end": "1345590"
  },
  {
    "text": "kubernetes cluster I want to one running in AWS or in GCP if you have the latest",
    "start": "1345590",
    "end": "1350750"
  },
  {
    "text": "docker for desktop app kubernetes is actually built-in you have one running on your own computer or you can push a",
    "start": "1350750",
    "end": "1356960"
  },
  {
    "text": "button to turn it on which is pretty neat because I can also now test with kubernetes completely locally so what I",
    "start": "1356960",
    "end": "1365299"
  },
  {
    "text": "can do is I can run cube control apply on that deployment yellow file I hit",
    "start": "1365299",
    "end": "1372919"
  },
  {
    "text": "enter and that thing will deploy my service so we can see if that worked we can go fetch the pods so there's my",
    "start": "1372919",
    "end": "1379760"
  },
  {
    "text": "container it's now in running status and that I can do get services and there's",
    "start": "1379760",
    "end": "1385610"
  },
  {
    "text": "the service in front of it that's that little load balancer you can see it's external IP as localhost and it's listening on port 8080 which means I can",
    "start": "1385610",
    "end": "1393110"
  },
  {
    "text": "now curl 8080 and get a nice little hello world so okay we got a little darker example it's",
    "start": "1393110",
    "end": "1399980"
  },
  {
    "text": "running kubernetes and then of course at the end we can also delete it by running the cube",
    "start": "1399980",
    "end": "1405260"
  },
  {
    "text": "control delete command all right so that's how I test manually how would I test the exact same thing with a unit",
    "start": "1405260",
    "end": "1410809"
  },
  {
    "text": "test and automated test as you can probably guess the structure is gonna look very very similar to what we just",
    "start": "1410809",
    "end": "1416120"
  },
  {
    "text": "did for the terraform unit testing so I'll walk through it again in the slide deck so we created docker",
    "start": "1416120",
    "end": "1423350"
  },
  {
    "text": "kubernetes tests go and that's the basic structure of the test I'll go through it so the first",
    "start": "1423350",
    "end": "1431200"
  },
  {
    "text": "thing we do is build the docker image and I'll show you the contents of that method in just a moment then we say ok",
    "start": "1431200",
    "end": "1438040"
  },
  {
    "text": "the kubernetes deployment is defined in this file I want to authenticate to my",
    "start": "1438040",
    "end": "1443050"
  },
  {
    "text": "kubernetes kubernetes cluster and I'm just using all the defaults which means it'll just use whatever my computer is",
    "start": "1443050",
    "end": "1448690"
  },
  {
    "text": "logged into which is the kubernetes running locally we were on Cube control apply using a tear test helper we",
    "start": "1448690",
    "end": "1455200"
  },
  {
    "text": "validate I'll show you the contents of that in a sec and then at the end of the test using that defer keyword we run",
    "start": "1455200",
    "end": "1460450"
  },
  {
    "text": "cube control delete so there's no magic right all I'm doing is taking the exact same steps I was doing manually and",
    "start": "1460450",
    "end": "1466330"
  },
  {
    "text": "we're just writing them down in code and the value tear test brings is just to give you a bunch of nice helper methods",
    "start": "1466330",
    "end": "1471460"
  },
  {
    "text": "for doing this but you can find similar helpful methods or write them by yourself so let's look at the two",
    "start": "1471460",
    "end": "1477970"
  },
  {
    "text": "functions I mentioned this is the build docker image function it's using another tear test helper this docker dot build",
    "start": "1477970",
    "end": "1484330"
  },
  {
    "text": "and it's basically just telling it where the docker file is located and what to tag it with not particularly complicated",
    "start": "1484330",
    "end": "1490480"
  },
  {
    "text": "and then the validate function looks very similar we wait until the services",
    "start": "1490480",
    "end": "1496990"
  },
  {
    "text": "available basically kubernetes is completely asynchronous so it can take a few seconds to actually deploy depending",
    "start": "1496990",
    "end": "1503230"
  },
  {
    "text": "on the cluster you're using then we start making HTTP requests to this thing just like we did with the hello world",
    "start": "1503230",
    "end": "1508840"
  },
  {
    "text": "app and the way we get the URL for a kubernetes service is to basically automate those steps I showed you with",
    "start": "1508840",
    "end": "1515350"
  },
  {
    "text": "you know Cube control get pods get services I just put that into this method so there's a get service and a",
    "start": "1515350",
    "end": "1521680"
  },
  {
    "text": "get service endpoint method so to run",
    "start": "1521680",
    "end": "1526960"
  },
  {
    "text": "this test you will authenticate to some kubernetes cluster as I said I'm already authenticated to the one running locally",
    "start": "1526960",
    "end": "1533020"
  },
  {
    "text": "and so at this point I can just run that test let's do that",
    "start": "1533020",
    "end": "1539580"
  },
  {
    "text": "just go test and there it is kubernetes",
    "start": "1539580",
    "end": "1547230"
  },
  {
    "text": "hit enter and this test should run very very quickly because it's all running",
    "start": "1547230",
    "end": "1552970"
  },
  {
    "text": "locally so hopefully there we go ok so that took a grand total of four",
    "start": "1552970",
    "end": "1558160"
  },
  {
    "text": "points nine seconds and what did the test do well the test built my docker image so",
    "start": "1558160",
    "end": "1563419"
  },
  {
    "text": "you can see the output there it's all running from cache so that runs especially fast then it configures cubed",
    "start": "1563419",
    "end": "1569149"
  },
  {
    "text": "control it ran cube control apply you can see it started making HTTP requests",
    "start": "1569149",
    "end": "1574610"
  },
  {
    "text": "and actually the first one failed because kubernetes is asynchronous that's why we do it in a retry loop but",
    "start": "1574610",
    "end": "1580039"
  },
  {
    "text": "after another try or two it succeeded and then it cleaned everything up again at the end of the test so again in five",
    "start": "1580039",
    "end": "1586010"
  },
  {
    "text": "seconds you can now add this even as a pre-commit hook if you really wanted to or after every commit you can check if",
    "start": "1586010",
    "end": "1592460"
  },
  {
    "text": "these kubernetes configurations you're writing not just that there's syntactically valid which is good to do with static analysis but that they",
    "start": "1592460",
    "end": "1598580"
  },
  {
    "text": "actually deploy a working service the way you expect to and the code by the",
    "start": "1598580",
    "end": "1605539"
  },
  {
    "text": "way so I showed you the code in the slide deck but the actual code for that test is very similar build docker image",
    "start": "1605539",
    "end": "1610669"
  },
  {
    "text": "here's our space I skip the name spacing thing I'll come back to that a little",
    "start": "1610669",
    "end": "1616100"
  },
  {
    "text": "bit and then basically here does cube control apply delete alright so that is",
    "start": "1616100",
    "end": "1626090"
  },
  {
    "text": "unit testing a lot of people see this in their ike is that it like that there's",
    "start": "1626090",
    "end": "1633710"
  },
  {
    "text": "no magic there's no just like magical thing that does this for me and no that's it you're just automating the things you would have done manually",
    "start": "1633710",
    "end": "1638899"
  },
  {
    "text": "that's the basis of unit testing infrastructure code you deploy it for real but for me this is well worth it",
    "start": "1638899",
    "end": "1645110"
  },
  {
    "text": "right because right now would these unit tests I have a lot of confidence in this code I know that if somebody changes the",
    "start": "1645110",
    "end": "1651110"
  },
  {
    "text": "code and does something silly these tests will almost certainly fail and will catch it before it makes it to",
    "start": "1651110",
    "end": "1656990"
  },
  {
    "text": "production so that's worth a little bit of work I'll mention one more thing about unit testing which is cleaning up",
    "start": "1656990",
    "end": "1662210"
  },
  {
    "text": "after those tests so especially tests for terraform CloudFormation things like",
    "start": "1662210",
    "end": "1667370"
  },
  {
    "text": "that they're spinning up and tearing down all sorts of resources in your google cloud AWS Azure counts for",
    "start": "1667370",
    "end": "1674120"
  },
  {
    "text": "example we have one repo that deploys the elasticsearch stack the elk & elk cluster and after every commit that",
    "start": "1674120",
    "end": "1681350"
  },
  {
    "text": "spends up something like fifteen elk clusters and various configurations pokes at them for a while and it tears them all",
    "start": "1681350",
    "end": "1686539"
  },
  {
    "text": "that's a lot of infrastructure after every single commit so you definitely",
    "start": "1686539",
    "end": "1692509"
  },
  {
    "text": "want to have a completely separate sandbox account for automated testing so don't use production I hope that's",
    "start": "1692509",
    "end": "1698899"
  },
  {
    "text": "self-evident but you might not even want to use some of your existing staging or dev accounts where human beings are",
    "start": "1698899",
    "end": "1705079"
  },
  {
    "text": "using it just because of the volume of infrastructure that's gonna be coming up and down will be pretty annoying so we",
    "start": "1705079",
    "end": "1710479"
  },
  {
    "text": "usually have a completely isolated account used solely for automated testing and there's one other reason to",
    "start": "1710479",
    "end": "1716179"
  },
  {
    "text": "do that which is has to do with cleanup so the tests that I showed you",
    "start": "1716179",
    "end": "1721369"
  },
  {
    "text": "they all run terraform destroy or cube controlled deletes they all do clean up after themselves but occasionally that",
    "start": "1721369",
    "end": "1727369"
  },
  {
    "text": "fails right you might have a bug in your test somebody might hit control-c something might crash so you don't want",
    "start": "1727369",
    "end": "1733069"
  },
  {
    "text": "a whole bunch of stuff left over in your testing account so there are some tools out there that can clean everything up",
    "start": "1733069",
    "end": "1738679"
  },
  {
    "text": "and it's really nice you know that the tool for example is called cloud nuke don't run it in production but if you",
    "start": "1738679",
    "end": "1744709"
  },
  {
    "text": "have a dedicated testing account that's a good place to run something like that all right so you can run these as a cron",
    "start": "1744709",
    "end": "1752089"
  },
  {
    "text": "job and just clean up stuff every day okay so that's unit testing let me see",
    "start": "1752089",
    "end": "1758359"
  },
  {
    "text": "how I'm doing on time all right let's move along to integration testing so",
    "start": "1758359",
    "end": "1763909"
  },
  {
    "text": "they do with integration testing is just because your individual units seem to be working doesn't mean that they're gonna",
    "start": "1763909",
    "end": "1769339"
  },
  {
    "text": "work to when you put them together and so that's what you want to find out with integration testing and I'll show you just one example of integration testing",
    "start": "1769339",
    "end": "1776509"
  },
  {
    "text": "and once you see it you'll see the structures more or less identical to what we've already talked about so",
    "start": "1776509",
    "end": "1782059"
  },
  {
    "text": "there's not a whole lotta new to learn the basics approach we used was more or less identical and then we'll talk about",
    "start": "1782059",
    "end": "1788269"
  },
  {
    "text": "a few other things with parallelism and test stages and retries okay so here's",
    "start": "1788269",
    "end": "1794059"
  },
  {
    "text": "an example from that same repo where we have two modules that we want to test and see if they work together correctly",
    "start": "1794059",
    "end": "1799489"
  },
  {
    "text": "we have one called proxy app and we have one called web service so I'll show you",
    "start": "1799489",
    "end": "1805669"
  },
  {
    "text": "the code for those these are using basically the exact same module so",
    "start": "1805669",
    "end": "1812389"
  },
  {
    "text": "there's nothing really new here they're using that same serverless app module the only difference is web service",
    "start": "1812389",
    "end": "1817579"
  },
  {
    "text": "instead of a plain hello world it tries to pretend that it's some kind of a back-end web service that your",
    "start": "1817579",
    "end": "1822980"
  },
  {
    "text": "company relies on and it returns a little blob of JSON instead and then proxy app very similar thing again",
    "start": "1822980",
    "end": "1831170"
  },
  {
    "text": "another little service application the code that it's running will proxy a URL",
    "start": "1831170",
    "end": "1836360"
  },
  {
    "text": "so you pass in the URL you want it to proxy as an environment variable it'll make an HTTP request to it and then",
    "start": "1836360",
    "end": "1842720"
  },
  {
    "text": "forward along the results so you can sort of think of this as one of these as a front-end application one of these is",
    "start": "1842720",
    "end": "1847970"
  },
  {
    "text": "back-end and you want to make sure they work together correctly so how are we going to test these things well the",
    "start": "1847970",
    "end": "1855980"
  },
  {
    "text": "first thing to note is the proxy application has an input variable which is how you tell it what URL you want it",
    "start": "1855980",
    "end": "1862220"
  },
  {
    "text": "to proxy and our web service has an output variable which is its URL so we",
    "start": "1862220",
    "end": "1868010"
  },
  {
    "text": "want to proxy that URL that's our goal so we're gonna write a thing called proxy app test another go file and",
    "start": "1868010",
    "end": "1875170"
  },
  {
    "text": "here's the structure so hopefully you're starting to get used to this approach and going through it line by line you'll",
    "start": "1875170",
    "end": "1881450"
  },
  {
    "text": "see there's really nothing new here we're gonna configure our web service and I'll show you what this is doing but",
    "start": "1881450",
    "end": "1886730"
  },
  {
    "text": "it's that same terraformed options thing from before we're gonna run terraform in it and apply to deploy the web service",
    "start": "1886730",
    "end": "1893170"
  },
  {
    "text": "then we're going to configure the proxy application passing it information from",
    "start": "1893170",
    "end": "1898370"
  },
  {
    "text": "the web service so this is really the only new thing here is we're passing information from one to the other and I'll show you these methods in just a",
    "start": "1898370",
    "end": "1904550"
  },
  {
    "text": "sec then we're gonna run terror from apply to deploy the proxy application we're gonna validate it works and then",
    "start": "1904550",
    "end": "1911480"
  },
  {
    "text": "at the end of the test in defer we're gonna run terraform destroy on each of those modules so exact same structure",
    "start": "1911480",
    "end": "1917240"
  },
  {
    "text": "apply validate destroyed looking at those methods here's config web service it's just",
    "start": "1917240",
    "end": "1924500"
  },
  {
    "text": "returning one of those terraformed options structs it says that's where my code lives here's the slightly new thing",
    "start": "1924500",
    "end": "1930740"
  },
  {
    "text": "which is config proxy app so this thing is also returning a terraformed options with one new thing it's going to read in",
    "start": "1930740",
    "end": "1937790"
  },
  {
    "text": "the URL output from the web service and it's going to pass it as an input",
    "start": "1937790",
    "end": "1943040"
  },
  {
    "text": "variable to the proxy application so here we're chaining one modules outputs",
    "start": "1943040",
    "end": "1948350"
  },
  {
    "text": "into the inputs of another module just by passing them along using whatever variables those modules support",
    "start": "1948350",
    "end": "1955129"
  },
  {
    "text": "the validate method is completely identical to the hello world one it's just doing a bunch of HTTP requests the",
    "start": "1955129",
    "end": "1961289"
  },
  {
    "text": "only difference is if looking for a blob of JSON in the response instead of plain text so we can run the integration tests",
    "start": "1961289",
    "end": "1969169"
  },
  {
    "text": "the code for it by the way is right here so it's exactly as I said config the web",
    "start": "1969169",
    "end": "1976379"
  },
  {
    "text": "service run apply config the proxy app run apply validate and then at the end of the test to run destroy a couple",
    "start": "1976379",
    "end": "1982019"
  },
  {
    "text": "times if we run that test let's see",
    "start": "1982019",
    "end": "1987990"
  },
  {
    "text": "where's our proxy app that's the one I will let that run in the background this",
    "start": "1987990",
    "end": "1996059"
  },
  {
    "text": "will take a little bit longer and that's actually an important point so that's running in the background and it'll take",
    "start": "1996059",
    "end": "2001789"
  },
  {
    "text": "a few minutes to run all told that's important integration tests in infrastructure code",
    "start": "2001789",
    "end": "2008149"
  },
  {
    "text": "as you might expect to take longer than unit tests just like everywhere else and they can actually take a lot longer so",
    "start": "2008149",
    "end": "2013340"
  },
  {
    "text": "I'm testing these really simple hello world lambda functions that deploy quickly but if you're deploying a",
    "start": "2013340",
    "end": "2019940"
  },
  {
    "text": "database that could take 20 minutes just by itself so these tests can take longer so what do you do about that so there's",
    "start": "2019940",
    "end": "2025759"
  },
  {
    "text": "a couple things you can do to speed things up one is run your tests in parallel this of course doesn't make any",
    "start": "2025759",
    "end": "2031580"
  },
  {
    "text": "individual tests faster but at least your whole test suite is only as slow as the slowest test rather than everything",
    "start": "2031580",
    "end": "2037909"
  },
  {
    "text": "running sequentially and that's useful because these tests can take a while",
    "start": "2037909",
    "end": "2043748"
  },
  {
    "text": "telling tests to run in parallel and go is really easy you just add T parallel",
    "start": "2043869",
    "end": "2049819"
  },
  {
    "text": "to the top of any test function and then when you run go test all of those tests that have that will run in parallel and",
    "start": "2049819",
    "end": "2057050"
  },
  {
    "text": "so if you go back and look at the actual test code in this example repo you'll see that every test has T parallel as",
    "start": "2057050",
    "end": "2064250"
  },
  {
    "text": "the very first line of code in the test there is one gotcha though which is you",
    "start": "2064250",
    "end": "2073429"
  },
  {
    "text": "could run into resource conflicts if you're not thoughtful about this so here's what I mean by that your modules",
    "start": "2073429",
    "end": "2080000"
  },
  {
    "text": "whatever it is that you're testing your infrastructure code is creating resources so for example here we're",
    "start": "2080000",
    "end": "2085368"
  },
  {
    "text": "creating an iamb role and a security group in AWS and those resources might have names and in this",
    "start": "2085369",
    "end": "2091620"
  },
  {
    "text": "case aw actually requires that I am roles and security groups the name has to be unique so if you hard code the",
    "start": "2091620",
    "end": "2097680"
  },
  {
    "text": "name into your code and you run two tests in parallel and they both try to use the same name you're going to get a",
    "start": "2097680",
    "end": "2103650"
  },
  {
    "text": "conflict and the tests will fail so what you need to do is you need to namespace",
    "start": "2103650",
    "end": "2109620"
  },
  {
    "text": "all of your resources in other words provide a way to override the default name so that you can set it to something",
    "start": "2109620",
    "end": "2115710"
  },
  {
    "text": "unique at test time so I'll just show you a couple real-world examples of that",
    "start": "2115710",
    "end": "2120890"
  },
  {
    "text": "if we go look at our service app that module I've been using you can see it",
    "start": "2120890",
    "end": "2126900"
  },
  {
    "text": "creates a lambda function and the name it sets to this input variable and it does the same thing with the IAM role",
    "start": "2126900",
    "end": "2133080"
  },
  {
    "text": "and basically all the other named resources are the name is configurable and then when we're using that code so",
    "start": "2133080",
    "end": "2139740"
  },
  {
    "text": "if we go look at our hello world app we set the name to var name which has a",
    "start": "2139740",
    "end": "2145230"
  },
  {
    "text": "default but at test time we're gonna override that default so this is the one piece that I hadn't shown you before if",
    "start": "2145230",
    "end": "2152400"
  },
  {
    "text": "you look we pass in a name variable in our tests which we set to include this",
    "start": "2152400",
    "end": "2159450"
  },
  {
    "text": "unique identifier and so there's a little function and terror test that basically generates a six character",
    "start": "2159450",
    "end": "2165120"
  },
  {
    "text": "string as something like 56 billion possible combinations it's a randomized value so this gives you a pretty good",
    "start": "2165120",
    "end": "2171270"
  },
  {
    "text": "chance that two names are not going to conflict so if you override all of the",
    "start": "2171270",
    "end": "2176910"
  },
  {
    "text": "names and all of your test code with something that's pseudo-random in here then you're gonna avoid these resource",
    "start": "2176910",
    "end": "2182520"
  },
  {
    "text": "conflicts what's interesting is this isn't just useful for testing you should actually get into the habit of",
    "start": "2182520",
    "end": "2187740"
  },
  {
    "text": "namespacing resources anyway because you might want to deploy two copies of the server less app in a single environment",
    "start": "2187740",
    "end": "2192960"
  },
  {
    "text": "or across multiple environments and so being able to namespace things is useful for production code anyway we do",
    "start": "2192960",
    "end": "2199800"
  },
  {
    "text": "something similar for kubernetes as well which is kubernetes actually has a first class concept of namespaces and so at",
    "start": "2199800",
    "end": "2206880"
  },
  {
    "text": "test time we generate a randomly named namespace and we deploy all of our code",
    "start": "2206880",
    "end": "2212610"
  },
  {
    "text": "into that namespace to ensure that this does not conflict with anything else that happens to be in the same Cooper",
    "start": "2212610",
    "end": "2217890"
  },
  {
    "text": "name cluster so namespacing very very important in general but especially for",
    "start": "2217890",
    "end": "2223119"
  },
  {
    "text": "automated tests that run in parallel alright one more concept that's pretty",
    "start": "2223119",
    "end": "2228819"
  },
  {
    "text": "useful to know about our test stages so if we take a look at this proxy app",
    "start": "2228819",
    "end": "2235329"
  },
  {
    "text": "integration test there's really five steps five stages in that test we deploy",
    "start": "2235329",
    "end": "2240819"
  },
  {
    "text": "a web service and the proxy app then we validate the proxy app and we unemploy it and then we had to play the other",
    "start": "2240819",
    "end": "2246789"
  },
  {
    "text": "thing now in the CI environment you need to run all of these steps that make sense but when you're coding locally",
    "start": "2246789",
    "end": "2253180"
  },
  {
    "text": "especially when you're first writing this test you might want to be able to iterate on just some inner portion of this thing like maybe you're working out",
    "start": "2253180",
    "end": "2260289"
  },
  {
    "text": "how to validate the app correctly you just want to be able to rerun the validate step over and over and over again and you don't want to run the rest",
    "start": "2260289",
    "end": "2266499"
  },
  {
    "text": "of the stuff but as the code is written initially you don't really have a choice and that's a problem because all those",
    "start": "2266499",
    "end": "2272650"
  },
  {
    "text": "other steps have a lot of overhead you might want to run the validate step that takes seconds but the test will force",
    "start": "2272650",
    "end": "2279009"
  },
  {
    "text": "you to pay five to ten minutes of overhead for every single test run so like it's very annoying so you can work",
    "start": "2279009",
    "end": "2285519"
  },
  {
    "text": "around that whatever test tool you're using ideally supports this idea of test stages so here's what it looks like I'm",
    "start": "2285519",
    "end": "2293739"
  },
  {
    "text": "not going to run this one I'll just kind of walk through the code really quickly in the interest of time so this was our original test structure we're deploying",
    "start": "2293739",
    "end": "2299349"
  },
  {
    "text": "the web service the proxy app and validating what we're gonna do is we're gonna basically wrap those in functions",
    "start": "2299349",
    "end": "2305759"
  },
  {
    "text": "so it's the same thing there's a deploy their deploy web service deploy proxy app and validate but you'll see there's",
    "start": "2305759",
    "end": "2312099"
  },
  {
    "text": "this new thing called stage using that just as an alias so the code actually fits on the slide and I basically wrap",
    "start": "2312099",
    "end": "2318789"
  },
  {
    "text": "all the code with this little function all the actual deployment code moves into these named functions and each",
    "start": "2318789",
    "end": "2325749"
  },
  {
    "text": "stage has a name and you can name it whatever you want as long as it's unique and the point of doing this is now if I",
    "start": "2325749",
    "end": "2333759"
  },
  {
    "text": "have a stage called foo I can tell terror tests to skip that stage just by setting an environment variable that's a",
    "start": "2333759",
    "end": "2339999"
  },
  {
    "text": "skip foo equals whatever you can set it to any value so here's how you might use this you might run that integration test",
    "start": "2339999",
    "end": "2346869"
  },
  {
    "text": "and the very first time you run it you tell it to skip the clean up steps and so when you run the test it's",
    "start": "2346869",
    "end": "2353289"
  },
  {
    "text": "going to run deploy web service deploy the proxy app it's gonna run validate but it's not going to clean anything up so those services will keep running in",
    "start": "2353289",
    "end": "2359980"
  },
  {
    "text": "the background so now you can rerun the test you can skip the deployment steps as well and so the next time you run the",
    "start": "2359980",
    "end": "2366970"
  },
  {
    "text": "test it's just gonna run the validate step over and over again and that takes seconds rather than minutes so this",
    "start": "2366970",
    "end": "2374470"
  },
  {
    "text": "allows you to iterate locally much much much much faster you can also make changes manually you can inspect things",
    "start": "2374470",
    "end": "2379869"
  },
  {
    "text": "you can debug things it's basically as if you're pausing the test in the middle that's really what we're doing with just",
    "start": "2379869",
    "end": "2385450"
  },
  {
    "text": "some environment variables and then when you're done you can basically clean everything up again and you're done so",
    "start": "2385450",
    "end": "2391619"
  },
  {
    "text": "test stages are very very useful the one thing you have to do to make them work besides wrapping your code in functions",
    "start": "2391619",
    "end": "2397059"
  },
  {
    "text": "is since we're running these tests in separate processes right we're running",
    "start": "2397059",
    "end": "2402369"
  },
  {
    "text": "go test over and over again those are separate processes if two stages need to share data they can't just pass it in",
    "start": "2402369",
    "end": "2408700"
  },
  {
    "text": "memory like they were doing before because separate processes so whatever data you need to pass which is usually",
    "start": "2408700",
    "end": "2415359"
  },
  {
    "text": "just like these terraform options things you just need to write it to disk and read it from disk so for example the",
    "start": "2415359",
    "end": "2421269"
  },
  {
    "text": "deploy web service code will store the terraform options into the temp folder and there's a helper to do that so it's",
    "start": "2421269",
    "end": "2427059"
  },
  {
    "text": "a one-liner and then the cleanup web service code needs those terraform options to know what to clean up it's",
    "start": "2427059",
    "end": "2432250"
  },
  {
    "text": "gonna read it from disk and so that allows you to have these completely independent test stages and if you want",
    "start": "2432250",
    "end": "2437680"
  },
  {
    "text": "to see the real version of that grab that repo and in here there's the integration tests with stages and so",
    "start": "2437680",
    "end": "2444250"
  },
  {
    "text": "here here it is here's my deploy step another deploy step validate you can see each of these is wrapped in this test",
    "start": "2444250",
    "end": "2450789"
  },
  {
    "text": "stage thing and they're all loading and saving various things to disk I will",
    "start": "2450789",
    "end": "2457599"
  },
  {
    "text": "personally tell you that this simple like basically a hack has helped me keep",
    "start": "2457599",
    "end": "2462730"
  },
  {
    "text": "my sanity some of these tests take a really long time and the ability to rerun pieces in seconds rather than",
    "start": "2462730",
    "end": "2469000"
  },
  {
    "text": "waiting 20 minutes is huge it's incredibly incredibly valuable all right one other pro tip has to do with retries",
    "start": "2469000",
    "end": "2476009"
  },
  {
    "text": "another thing we learned from long experience is infrastructure in the real world can fail for a whole bunch of",
    "start": "2476009",
    "end": "2482319"
  },
  {
    "text": "reasons intermittent reasons I don't mean bugs in your code but just things like easy to gave you a bad instance or there was",
    "start": "2482319",
    "end": "2489290"
  },
  {
    "text": "a brief outage somewhere or some intermittent issue of that sort and if you don't do anything about it",
    "start": "2489290",
    "end": "2494330"
  },
  {
    "text": "then your tests can become very flaky they will basically fail for reasons that have nothing to do with actual bugs",
    "start": "2494330",
    "end": "2499370"
  },
  {
    "text": "in your code and so the easiest solution for this is to add retries you already",
    "start": "2499370",
    "end": "2504530"
  },
  {
    "text": "saw that the HTTP requests and terror tests we were doing those in a retry loop but you can actually do retry loops",
    "start": "2504530",
    "end": "2510620"
  },
  {
    "text": "all over your code and some of them are natively supported by terror tests so in",
    "start": "2510620",
    "end": "2515630"
  },
  {
    "text": "that terraform options thing in addition to saying where your code lives in addition to passing variables you can also say hey if you see an error that",
    "start": "2515630",
    "end": "2522290"
  },
  {
    "text": "looks like this this is actually a very common error you hit with terraform these TLS handshake timeouts are very",
    "start": "2522290",
    "end": "2527630"
  },
  {
    "text": "frustrating you can basically say retry up to three times with three seconds per retry and this will make your tests much",
    "start": "2527630",
    "end": "2533810"
  },
  {
    "text": "more stable all right one more category of tests to talk about which is end-to-end testing the idea",
    "start": "2533810",
    "end": "2542720"
  },
  {
    "text": "here as the name implies is to test everything together but how do you actually do that right if",
    "start": "2542720",
    "end": "2548960"
  },
  {
    "text": "you have a big complicated infrastructure how do you actually test that end-to-end you could try to use the",
    "start": "2548960",
    "end": "2554840"
  },
  {
    "text": "exact same strategy I've been showing you this whole talk deploy everything from scratch validate undeploy but",
    "start": "2554840",
    "end": "2560930"
  },
  {
    "text": "that's not a very common way to do end-to-end testing and the reason for that has to do with this little test",
    "start": "2560930",
    "end": "2566810"
  },
  {
    "text": "pyramid so a static analysis unit tested bottom integration tests end-to-end tests so the thing about this pyramid is",
    "start": "2566810",
    "end": "2573710"
  },
  {
    "text": "as you go up the pyramid the cost to write the tests how brittle the test is",
    "start": "2573710",
    "end": "2579380"
  },
  {
    "text": "and how long it takes to run goes up very very very quickly so these are some really rough numbers obviously it",
    "start": "2579380",
    "end": "2585890"
  },
  {
    "text": "depends on your particular use cases but typically static analysis runs in seconds unit tests in a low number of",
    "start": "2585890",
    "end": "2592670"
  },
  {
    "text": "minutes integration tests take more minutes and to end tests from scratch",
    "start": "2592670",
    "end": "2597920"
  },
  {
    "text": "take hours most architectures even if completely automated to deploy them completely from scratch can take hours",
    "start": "2597920",
    "end": "2604550"
  },
  {
    "text": "and to test them and then undeploy them at the end so that's unfortunately too slow the other issue is brittleness and",
    "start": "2604550",
    "end": "2612560"
  },
  {
    "text": "you can actually see this by doing a little bit of math so assume that some resource you're",
    "start": "2612560",
    "end": "2618560"
  },
  {
    "text": "deploying ec2 instance database whatever it is has a one in a thousand chance of some random intermittent flaky error I",
    "start": "2618560",
    "end": "2626119"
  },
  {
    "text": "don't know if this isn't exactly accurate stat but it's probably somewhere in the ballpark and so you can",
    "start": "2626119",
    "end": "2631310"
  },
  {
    "text": "do the math and do a little probability calculation and see what are the odds of a test failing for flaky reasons based",
    "start": "2631310",
    "end": "2638660"
  },
  {
    "text": "on how much stuff you're deploying in that test so if you have a unit test and it's deploying just a handful of",
    "start": "2638660",
    "end": "2644359"
  },
  {
    "text": "resources about ten and each one of those has a one in a thousand chance of failing then when you have ten of them",
    "start": "2644359",
    "end": "2650680"
  },
  {
    "text": "your chances of failure go up to one percent if you're deploying fifty resources in an integration test the",
    "start": "2650680",
    "end": "2657319"
  },
  {
    "text": "chance that you get some kind of a flaky or intermittent error is around five percent and if you try to deploy your",
    "start": "2657319",
    "end": "2662599"
  },
  {
    "text": "entire architecture which has hundreds of resources I mean we're talking 40% 50% chance of just some some things",
    "start": "2662599",
    "end": "2668780"
  },
  {
    "text": "somewhere hitting that one in a thousand chance so you can work around 1% and 5%",
    "start": "2668780",
    "end": "2674599"
  },
  {
    "text": "with just retries that's what the retries help you overcome but there's nothing you can do if if if 40% of the",
    "start": "2674599",
    "end": "2681440"
  },
  {
    "text": "time your tests are failing for flaky reasons that's gonna be very very painful and so unfortunately doing an 10",
    "start": "2681440",
    "end": "2687589"
  },
  {
    "text": "testing from scratch tends to be just too slow and brittle in the current world to be useful so the real way to do",
    "start": "2687589",
    "end": "2693650"
  },
  {
    "text": "antenna testing is incremental e and what I mean by that is you set up a",
    "start": "2693650",
    "end": "2699200"
  },
  {
    "text": "persistent test environment so you deploy everything from scratch which will take hours and become annoying but",
    "start": "2699200",
    "end": "2704780"
  },
  {
    "text": "you do that once and you leave it running and then whenever you go and update one of your modules you roll out",
    "start": "2704780",
    "end": "2711800"
  },
  {
    "text": "the changes to just that module so this is what your commit hooks are doing they're not deploying everything from",
    "start": "2711800",
    "end": "2717170"
  },
  {
    "text": "scratch they're actually just updating an existent architecture with each change and then validating then you can",
    "start": "2717170",
    "end": "2722839"
  },
  {
    "text": "run in spec or whatever you want to validate that things are still working as expected and so this will be",
    "start": "2722839",
    "end": "2728930"
  },
  {
    "text": "approximately the same as unit testing or integration testing it's not going to take that long it'll be reasonably stable and it'll actually give you a lot",
    "start": "2728930",
    "end": "2735650"
  },
  {
    "text": "of value in seeing that your entire stack is actually working and to end and as a bonus you can test not only that",
    "start": "2735650",
    "end": "2742520"
  },
  {
    "text": "the thing works after the deployment but you can actually write a test that tests of the deployment itself for example one",
    "start": "2742520",
    "end": "2748819"
  },
  {
    "text": "very important thing is is my deployment zero downtime or every time I roll out a kubernetes service to my users get you",
    "start": "2748819",
    "end": "2755400"
  },
  {
    "text": "know 500 errors for five minutes so you can actually test that you can we have a whole bunch of automated tests around exactly that so this is a really nice",
    "start": "2755400",
    "end": "2762450"
  },
  {
    "text": "way to do end to end testing all right so wrapping things up here's a kind of",
    "start": "2762450",
    "end": "2769320"
  },
  {
    "text": "overview of all the testing techniques I talked about apologies for the small font on this slide I'll go over it and",
    "start": "2769320",
    "end": "2774900"
  },
  {
    "text": "summarize really quickly basically static analysis it's fast it's easy to learn really don't need to do deploy any",
    "start": "2774900",
    "end": "2782070"
  },
  {
    "text": "real resources you should use it the only downside is it's very limited in a",
    "start": "2782070",
    "end": "2787590"
  },
  {
    "text": "kind of errors it catches and just because my static analysis past doesn't give me that much confidence than my",
    "start": "2787590",
    "end": "2793230"
  },
  {
    "text": "code works so if you're doing nothing at least do static analysis but don't stop there",
    "start": "2793230",
    "end": "2798750"
  },
  {
    "text": "unit tests tend to run fast enough they take a low number of minutes mostly",
    "start": "2798750",
    "end": "2804150"
  },
  {
    "text": "stable if you do retries and they give you a lot of confidence that the individual built individual building blocks that you're using work as",
    "start": "2804150",
    "end": "2810450"
  },
  {
    "text": "expected downside is you do have to deploy real resources and you do have to write some real code integration tests",
    "start": "2810450",
    "end": "2816750"
  },
  {
    "text": "pretty similar the only real difference is that they are even slower which is a bummer so you're gonna have fewer of",
    "start": "2816750",
    "end": "2822810"
  },
  {
    "text": "those and then end-to-end tests similar thing but if you do them from scratch",
    "start": "2822810",
    "end": "2828390"
  },
  {
    "text": "they're way too slow and brittle so do them incrementally and then they'll have similar trade-offs to unit tests and",
    "start": "2828390",
    "end": "2833640"
  },
  {
    "text": "integration tests so which ones should you use correct answers of course all of",
    "start": "2833640",
    "end": "2839190"
  },
  {
    "text": "them they all catch different types of bugs and you're going to use them roughly in this proportion that's",
    "start": "2839190",
    "end": "2845130"
  },
  {
    "text": "actually why it's a pyramid you want to have a whole bunch of unit tests and static analysis catch as many bugs as you can at that layer then a smaller",
    "start": "2845130",
    "end": "2852570"
  },
  {
    "text": "number of integration tests and a very small number of high-value end-to-end tests so wrap it up infrastructure code",
    "start": "2852570",
    "end": "2859920"
  },
  {
    "text": "is scary when it doesn't have tests in fact I've heard that's actually the definition of legacy code is any code",
    "start": "2859920",
    "end": "2866100"
  },
  {
    "text": "that doesn't have automated tests and so you can fight that fear you can build",
    "start": "2866100",
    "end": "2871110"
  },
  {
    "text": "some confidence in your life by writing some automated tests thank you very much",
    "start": "2871110",
    "end": "2876559"
  },
  {
    "text": "you",
    "start": "2876559",
    "end": "2878619"
  }
]