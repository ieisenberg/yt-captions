[
  {
    "text": "hi my name is Seth lad and welcome to",
    "start": "440",
    "end": "1800"
  },
  {
    "text": "this episode of Dart tips today we talk",
    "start": "1800",
    "end": "3439"
  },
  {
    "text": "about Constructors fun fact you can",
    "start": "3439",
    "end": "5200"
  },
  {
    "text": "build a Constructor in Dart that",
    "start": "5200",
    "end": "6520"
  },
  {
    "text": "controls which object instance is",
    "start": "6520",
    "end": "8760"
  },
  {
    "text": "returned there's lots of cool features",
    "start": "8760",
    "end": "10480"
  },
  {
    "text": "with Constructors and dart so let's get",
    "start": "10480",
    "end": "13340"
  },
  {
    "text": "[Music]",
    "start": "13340",
    "end": "17279"
  },
  {
    "text": "started Constructors are responsible for",
    "start": "17279",
    "end": "19560"
  },
  {
    "text": "building and returning an instance of a",
    "start": "19560",
    "end": "21279"
  },
  {
    "text": "class let's start by looking at the",
    "start": "21279",
    "end": "22800"
  },
  {
    "text": "constructors everyone is familiar with",
    "start": "22800",
    "end": "24519"
  },
  {
    "text": "what we call generative Constructors",
    "start": "24519",
    "end": "26519"
  },
  {
    "text": "here's an example not a lot of surprises",
    "start": "26519",
    "end": "28760"
  },
  {
    "text": "here the name of the Constructor matches",
    "start": "28760",
    "end": "30240"
  },
  {
    "text": "the name of the class but whoo there's a",
    "start": "30240",
    "end": "32000"
  },
  {
    "text": "lot of repetition the word name is",
    "start": "32000",
    "end": "34040"
  },
  {
    "text": "repeated three times in the Constructor",
    "start": "34040",
    "end": "35760"
  },
  {
    "text": "alone surely we can do better and indeed",
    "start": "35760",
    "end": "38040"
  },
  {
    "text": "we can check this out if the",
    "start": "38040",
    "end": "40320"
  },
  {
    "text": "constructor's argument's name is the",
    "start": "40320",
    "end": "42399"
  },
  {
    "text": "same as a field you can prepend the",
    "start": "42399",
    "end": "44280"
  },
  {
    "text": "argument with this dot this is just",
    "start": "44280",
    "end": "46520"
  },
  {
    "text": "syntactic sugar for the longer form",
    "start": "46520",
    "end": "48360"
  },
  {
    "text": "this.name equals name and this.",
    "start": "48360",
    "end": "50280"
  },
  {
    "text": "fluffiness equals fluffiness less typing",
    "start": "50280",
    "end": "52680"
  },
  {
    "text": "is always a good",
    "start": "52680",
    "end": "54160"
  },
  {
    "text": "thing use the new keyword to create a",
    "start": "54160",
    "end": "56480"
  },
  {
    "text": "new instance of a class here's an",
    "start": "56480",
    "end": "58239"
  },
  {
    "text": "example of calling Constructor with",
    "start": "58239",
    "end": "59559"
  },
  {
    "text": "argument a new instance of fluffy bunny",
    "start": "59559",
    "end": "61800"
  },
  {
    "text": "is created with both name and fluffiness",
    "start": "61800",
    "end": "63600"
  },
  {
    "text": "set of course the last parameter 0.72",
    "start": "63600",
    "end": "66439"
  },
  {
    "text": "isn't exactly obvious luckily",
    "start": "66439",
    "end": "68880"
  },
  {
    "text": "Constructors can use optional parameters",
    "start": "68880",
    "end": "70520"
  },
  {
    "text": "just like functions and methods here's",
    "start": "70520",
    "end": "72200"
  },
  {
    "text": "an example now it's a bit easier to read",
    "start": "72200",
    "end": "74880"
  },
  {
    "text": "and understand that last parameter if",
    "start": "74880",
    "end": "77360"
  },
  {
    "text": "your class does not explicitly Define a",
    "start": "77360",
    "end": "79200"
  },
  {
    "text": "Constructor a default Constructor is",
    "start": "79200",
    "end": "81040"
  },
  {
    "text": "provided for you here's an example of a",
    "start": "81040",
    "end": "83079"
  },
  {
    "text": "point class with two fields and no",
    "start": "83079",
    "end": "84680"
  },
  {
    "text": "explicit Constructor the default",
    "start": "84680",
    "end": "86520"
  },
  {
    "text": "Constructor has zero arguments and",
    "start": "86520",
    "end": "88320"
  },
  {
    "text": "invokes the no argument Constructor of",
    "start": "88320",
    "end": "90200"
  },
  {
    "text": "its super class I now want to show you",
    "start": "90200",
    "end": "92119"
  },
  {
    "text": "one of my favorite features of Dart name",
    "start": "92119",
    "end": "94079"
  },
  {
    "text": "Constructors first some background in",
    "start": "94079",
    "end": "96360"
  },
  {
    "text": "traditionally statically typed languages",
    "start": "96360",
    "end": "98000"
  },
  {
    "text": "you can overload methods by the types of",
    "start": "98000",
    "end": "100000"
  },
  {
    "text": "parameters passed to those methods",
    "start": "100000",
    "end": "102040"
  },
  {
    "text": "because Dart is optionally typed you",
    "start": "102040",
    "end": "103600"
  },
  {
    "text": "can't overload methods based on type",
    "start": "103600",
    "end": "105560"
  },
  {
    "text": "which isn't a big deal because you can",
    "start": "105560",
    "end": "107040"
  },
  {
    "text": "just create differently named methods",
    "start": "107040",
    "end": "108920"
  },
  {
    "text": "traditionally though you were stuck with",
    "start": "108920",
    "end": "110560"
  },
  {
    "text": "a single name for the Constructor the",
    "start": "110560",
    "end": "112560"
  },
  {
    "text": "name of the class often had to match the",
    "start": "112560",
    "end": "114399"
  },
  {
    "text": "name of the Constructor and thus you",
    "start": "114399",
    "end": "116200"
  },
  {
    "text": "wouldn't have been able to create",
    "start": "116200",
    "end": "117920"
  },
  {
    "text": "multiple Constructors the designers of",
    "start": "117920",
    "end": "119920"
  },
  {
    "text": "the dart language realized this and",
    "start": "119920",
    "end": "121280"
  },
  {
    "text": "introduced name Constructors as a way to",
    "start": "121280",
    "end": "123200"
  },
  {
    "text": "allow you to Define multiple different",
    "start": "123200",
    "end": "125159"
  },
  {
    "text": "Constructors for a class here's an",
    "start": "125159",
    "end": "127680"
  },
  {
    "text": "example of name Constructors at work",
    "start": "127680",
    "end": "129440"
  },
  {
    "text": "notice how the new keyword is still used",
    "start": "129440",
    "end": "131760"
  },
  {
    "text": "I really like name Constructors because",
    "start": "131760",
    "end": "133360"
  },
  {
    "text": "they provide an easyto read call site",
    "start": "133360",
    "end": "135040"
  },
  {
    "text": "and they clearly State their intention",
    "start": "135040",
    "end": "137080"
  },
  {
    "text": "in this case both Constructors take a",
    "start": "137080",
    "end": "138720"
  },
  {
    "text": "string and it's obvious how the strings",
    "start": "138720",
    "end": "140560"
  },
  {
    "text": "will be",
    "start": "140560",
    "end": "141519"
  },
  {
    "text": "used one nice feature of the dart",
    "start": "141519",
    "end": "143519"
  },
  {
    "text": "language is that all final fields are",
    "start": "143519",
    "end": "145239"
  },
  {
    "text": "fully initialized before the this handle",
    "start": "145239",
    "end": "147440"
  },
  {
    "text": "is available in other words final Fields",
    "start": "147440",
    "end": "149560"
  },
  {
    "text": "must be set before the Constructor body",
    "start": "149560",
    "end": "151680"
  },
  {
    "text": "is run to calculate and set the value of",
    "start": "151680",
    "end": "154120"
  },
  {
    "text": "final Fields you can use an initializer",
    "start": "154120",
    "end": "156040"
  },
  {
    "text": "list here's an example the initializers",
    "start": "156040",
    "end": "158680"
  },
  {
    "text": "after the colon are the initializer list",
    "start": "158680",
    "end": "161560"
  },
  {
    "text": "the this handle is not available in the",
    "start": "161560",
    "end": "163280"
  },
  {
    "text": "initializer list because at this point",
    "start": "163280",
    "end": "164879"
  },
  {
    "text": "the object is not yet created here point",
    "start": "164879",
    "end": "167360"
  },
  {
    "text": "is immutable because all fields are",
    "start": "167360",
    "end": "169040"
  },
  {
    "text": "final setting X and Y is straightforward",
    "start": "169040",
    "end": "171840"
  },
  {
    "text": "the distance from origin field must be",
    "start": "171840",
    "end": "173920"
  },
  {
    "text": "calculated but it is final so we can't",
    "start": "173920",
    "end": "176239"
  },
  {
    "text": "calculate it and set it in the",
    "start": "176239",
    "end": "177400"
  },
  {
    "text": "Constructor body because this is an",
    "start": "177400",
    "end": "179879"
  },
  {
    "text": "available in the initializer list you",
    "start": "179879",
    "end": "181319"
  },
  {
    "text": "can't call instance methods in the",
    "start": "181319",
    "end": "183120"
  },
  {
    "text": "initializer list however top level",
    "start": "183120",
    "end": "185319"
  },
  {
    "text": "functions like square root shown here",
    "start": "185319",
    "end": "187120"
  },
  {
    "text": "and static methods are okay to",
    "start": "187120",
    "end": "189560"
  },
  {
    "text": "use speaking of initializer list we can",
    "start": "189560",
    "end": "192319"
  },
  {
    "text": "now talk about calling superclass",
    "start": "192319",
    "end": "193920"
  },
  {
    "text": "Constructors as you can see here you can",
    "start": "193920",
    "end": "196159"
  },
  {
    "text": "place the call to the superclasses",
    "start": "196159",
    "end": "197760"
  },
  {
    "text": "Constructor in the initializer list it's",
    "start": "197760",
    "end": "200000"
  },
  {
    "text": "important to understand that all field",
    "start": "200000",
    "end": "201560"
  },
  {
    "text": "initializers are run before Constructor",
    "start": "201560",
    "end": "203560"
  },
  {
    "text": "bodies are run this means that the",
    "start": "203560",
    "end": "205319"
  },
  {
    "text": "Constructor body of the super class",
    "start": "205319",
    "end": "206959"
  },
  {
    "text": "isn't run until all fields from both the",
    "start": "206959",
    "end": "208640"
  },
  {
    "text": "subclass and the super class are",
    "start": "208640",
    "end": "210280"
  },
  {
    "text": "initialized we recommend that you place",
    "start": "210280",
    "end": "212360"
  },
  {
    "text": "the call to the super Constructor at the",
    "start": "212360",
    "end": "214000"
  },
  {
    "text": "end of the initializer list to make the",
    "start": "214000",
    "end": "216040"
  },
  {
    "text": "order more",
    "start": "216040",
    "end": "217360"
  },
  {
    "text": "clear if you don't explicitly call a",
    "start": "217360",
    "end": "219560"
  },
  {
    "text": "super Constructor a Constructor will",
    "start": "219560",
    "end": "221000"
  },
  {
    "text": "call the default no our Constructor of",
    "start": "221000",
    "end": "222799"
  },
  {
    "text": "its super class in this case when you",
    "start": "222799",
    "end": "224400"
  },
  {
    "text": "create a new fluffy bunny you'll see in",
    "start": "224400",
    "end": "226000"
  },
  {
    "text": "Bunny and then in fluffy if the",
    "start": "226000",
    "end": "228120"
  },
  {
    "text": "superclass does not have a default noar",
    "start": "228120",
    "end": "230200"
  },
  {
    "text": "Constructor you will need to explicitly",
    "start": "230200",
    "end": "232040"
  },
  {
    "text": "call a Constructor from the super class",
    "start": "232040",
    "end": "234519"
  },
  {
    "text": "we've so far seen many examples of what",
    "start": "234519",
    "end": "236159"
  },
  {
    "text": "we call generative Constructors these",
    "start": "236159",
    "end": "237680"
  },
  {
    "text": "traditional Constructors create a new",
    "start": "237680",
    "end": "239239"
  },
  {
    "text": "instance of the surrounding class and",
    "start": "239239",
    "end": "240720"
  },
  {
    "text": "return it while familiar generative",
    "start": "240720",
    "end": "242439"
  },
  {
    "text": "Constructors are a bit limiting modular",
    "start": "242439",
    "end": "244480"
  },
  {
    "text": "and composable software applications",
    "start": "244480",
    "end": "246000"
  },
  {
    "text": "require more flexible ways to build and",
    "start": "246000",
    "end": "247959"
  },
  {
    "text": "return objects and entire Suites of",
    "start": "247959",
    "end": "249799"
  },
  {
    "text": "design patterns have popped up to",
    "start": "249799",
    "end": "251319"
  },
  {
    "text": "compensate for traditional Constructor",
    "start": "251319",
    "end": "253159"
  },
  {
    "text": "shortcomings one popular pattern is the",
    "start": "253159",
    "end": "255319"
  },
  {
    "text": "factory pattern with examples in many",
    "start": "255319",
    "end": "257000"
  },
  {
    "text": "Frameworks or toolkits however without",
    "start": "257000",
    "end": "259440"
  },
  {
    "text": "native language support for the factory",
    "start": "259440",
    "end": "260959"
  },
  {
    "text": "pattern most implementations have to",
    "start": "260959",
    "end": "262440"
  },
  {
    "text": "implement it with combinations of static",
    "start": "262440",
    "end": "264280"
  },
  {
    "text": "methods and or utility classes while",
    "start": "264280",
    "end": "266759"
  },
  {
    "text": "this works it exposes the pattern to the",
    "start": "266759",
    "end": "268400"
  },
  {
    "text": "consumers of the code luckily the",
    "start": "268400",
    "end": "270240"
  },
  {
    "text": "designers of Dart added the factory",
    "start": "270240",
    "end": "271880"
  },
  {
    "text": "pattern right into the language with",
    "start": "271880",
    "end": "273639"
  },
  {
    "text": "dart's Factory Constructors you can",
    "start": "273639",
    "end": "275120"
  },
  {
    "text": "natively use the factory pattern and",
    "start": "275120",
    "end": "276759"
  },
  {
    "text": "make it appear like a regular",
    "start": "276759",
    "end": "278039"
  },
  {
    "text": "Constructor one great use case for",
    "start": "278039",
    "end": "279880"
  },
  {
    "text": "factory Constructors is to return",
    "start": "279880",
    "end": "281199"
  },
  {
    "text": "objects from a cache here's the code",
    "start": "281199",
    "end": "283360"
  },
  {
    "text": "notice how the Constructor is declared",
    "start": "283360",
    "end": "284840"
  },
  {
    "text": "as a factory Constructor inside the",
    "start": "284840",
    "end": "286720"
  },
  {
    "text": "Constructor body the cache is checked",
    "start": "286720",
    "end": "288400"
  },
  {
    "text": "and if the symbol exists it is returned",
    "start": "288400",
    "end": "290240"
  },
  {
    "text": "else a new symbol is created added to",
    "start": "290240",
    "end": "292160"
  },
  {
    "text": "the cache and then return using this",
    "start": "292160",
    "end": "294720"
  },
  {
    "text": "class is easy because there's no special",
    "start": "294720",
    "end": "296280"
  },
  {
    "text": "syntax to use a factory Constructor get",
    "start": "296280",
    "end": "298360"
  },
  {
    "text": "a new instance with new",
    "start": "298360",
    "end": "300320"
  },
  {
    "text": "both X and also X point to the same",
    "start": "300320",
    "end": "302680"
  },
  {
    "text": "object so they are identical because the",
    "start": "302680",
    "end": "304759"
  },
  {
    "text": "user of the class doesn't know the",
    "start": "304759",
    "end": "306000"
  },
  {
    "text": "Constructor is really a factory the",
    "start": "306000",
    "end": "307680"
  },
  {
    "text": "original author of the code is free to",
    "start": "307680",
    "end": "309240"
  },
  {
    "text": "refactor regular Constructors into",
    "start": "309240",
    "end": "310960"
  },
  {
    "text": "Factory Constructors without forcing",
    "start": "310960",
    "end": "312680"
  },
  {
    "text": "clients to change their code in other",
    "start": "312680",
    "end": "314680"
  },
  {
    "text": "words start with the generative",
    "start": "314680",
    "end": "316080"
  },
  {
    "text": "Constructor and if you later change to a",
    "start": "316080",
    "end": "318039"
  },
  {
    "text": "factory Constructor no one needs to know",
    "start": "318039",
    "end": "320319"
  },
  {
    "text": "here's another cool fact about Factory",
    "start": "320319",
    "end": "321720"
  },
  {
    "text": "Constructors they can even return",
    "start": "321720",
    "end": "323319"
  },
  {
    "text": "instances that are subclasses of the",
    "start": "323319",
    "end": "325120"
  },
  {
    "text": "surrounding class what other",
    "start": "325120",
    "end": "326520"
  },
  {
    "text": "Constructors can control what type of",
    "start": "326520",
    "end": "328120"
  },
  {
    "text": "object is returned I think that is very",
    "start": "328120",
    "end": "330120"
  },
  {
    "text": "cool so remember kids while Dart might",
    "start": "330120",
    "end": "332080"
  },
  {
    "text": "look like your friendly neighborhood",
    "start": "332080",
    "end": "333160"
  },
  {
    "text": "structured language it has productive",
    "start": "333160",
    "end": "334720"
  },
  {
    "text": "features like tur field initialization",
    "start": "334720",
    "end": "336720"
  },
  {
    "text": "name Constructors and Factory",
    "start": "336720",
    "end": "338600"
  },
  {
    "text": "Constructors thanks for watching my name",
    "start": "338600",
    "end": "340639"
  },
  {
    "text": "is Seth lad and as we say here on Dart",
    "start": "340639",
    "end": "342039"
  },
  {
    "text": "tips stay sharp click here to subscribe",
    "start": "342039",
    "end": "344520"
  },
  {
    "text": "to our channel for more episodes of Dart",
    "start": "344520",
    "end": "346160"
  },
  {
    "text": "tips we appreciate any thoughts you",
    "start": "346160",
    "end": "347720"
  },
  {
    "text": "might have for the series please leave",
    "start": "347720",
    "end": "349160"
  },
  {
    "text": "them in the comments below if you have",
    "start": "349160",
    "end": "351199"
  },
  {
    "text": "any additional questions about Dart",
    "start": "351199",
    "end": "352680"
  },
  {
    "text": "please drop by stack Overflow where Dart",
    "start": "352680",
    "end": "354400"
  },
  {
    "text": "experts are standing by to help you out",
    "start": "354400",
    "end": "356080"
  },
  {
    "text": "see you next time",
    "start": "356080",
    "end": "359240"
  }
]