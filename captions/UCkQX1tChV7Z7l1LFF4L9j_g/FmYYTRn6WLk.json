[
  {
    "text": "uh all right I think we're GNA get",
    "start": "359",
    "end": "3880"
  },
  {
    "text": "started uh so my name is uh adbert Chang",
    "start": "3880",
    "end": "7799"
  },
  {
    "text": "I'm a software engineer at box and today",
    "start": "7799",
    "end": "10480"
  },
  {
    "text": "I wanted to talk to you guys about uh",
    "start": "10480",
    "end": "12679"
  },
  {
    "text": "checked complexity with time to",
    "start": "12679",
    "end": "13960"
  },
  {
    "text": "Simplicity and essentially what I'm",
    "start": "13960",
    "end": "15559"
  },
  {
    "text": "trying to say here is uh I was looking",
    "start": "15559",
    "end": "17760"
  },
  {
    "text": "for a way to",
    "start": "17760",
    "end": "19400"
  },
  {
    "text": "build uh to structure my programs in a",
    "start": "19400",
    "end": "21840"
  },
  {
    "text": "way that was that was compositional and",
    "start": "21840",
    "end": "23480"
  },
  {
    "text": "at the very bottom layer was was sort of",
    "start": "23480",
    "end": "25519"
  },
  {
    "text": "foundational building blocks that we",
    "start": "25519",
    "end": "27080"
  },
  {
    "text": "could trust and it it wasn't like a a",
    "start": "27080",
    "end": "29240"
  },
  {
    "text": "big mess I was looking for something",
    "start": "29240",
    "end": "30519"
  },
  {
    "text": "very simple and foundational and then we",
    "start": "30519",
    "end": "32279"
  },
  {
    "text": "would build more and more complex things",
    "start": "32279",
    "end": "33960"
  },
  {
    "text": "on top of",
    "start": "33960",
    "end": "35320"
  },
  {
    "text": "it and so uh this talk was sort of",
    "start": "35320",
    "end": "38239"
  },
  {
    "text": "inspired when I first started",
    "start": "38239",
    "end": "40840"
  },
  {
    "text": "programming an industry where I saw a",
    "start": "40840",
    "end": "42640"
  },
  {
    "text": "lot of people create all these objects",
    "start": "42640",
    "end": "45680"
  },
  {
    "text": "and uh they would talk about things like",
    "start": "45680",
    "end": "48079"
  },
  {
    "text": "abstraction and encapsulation and and",
    "start": "48079",
    "end": "50360"
  },
  {
    "text": "information hiding and then when they",
    "start": "50360",
    "end": "52440"
  },
  {
    "text": "went to go test their program I would",
    "start": "52440",
    "end": "54120"
  },
  {
    "text": "see them mock out like so many things",
    "start": "54120",
    "end": "56160"
  },
  {
    "text": "just so they could they wouldn't have to",
    "start": "56160",
    "end": "57800"
  },
  {
    "text": "like reach out to a database when they",
    "start": "57800",
    "end": "59199"
  },
  {
    "text": "test or or send something over to",
    "start": "59199",
    "end": "60719"
  },
  {
    "text": "network when they test and so this",
    "start": "60719",
    "end": "62399"
  },
  {
    "text": "seemed kind of backwards to me because",
    "start": "62399",
    "end": "63879"
  },
  {
    "text": "if your code is modular enough it seems",
    "start": "63879",
    "end": "66280"
  },
  {
    "text": "in principle you would be able to just",
    "start": "66280",
    "end": "68400"
  },
  {
    "text": "inject or swap out the component you're",
    "start": "68400",
    "end": "70720"
  },
  {
    "text": "trying to test and you wouldn't very",
    "start": "70720",
    "end": "72560"
  },
  {
    "text": "rarely have ever have to mock",
    "start": "72560",
    "end": "74720"
  },
  {
    "text": "anything and so when I was looking",
    "start": "74720",
    "end": "76560"
  },
  {
    "text": "around a lot of people were uh telling",
    "start": "76560",
    "end": "78920"
  },
  {
    "text": "me that I should check out this thing",
    "start": "78920",
    "end": "80000"
  },
  {
    "text": "called ml modules uh so standard ML and",
    "start": "80000",
    "end": "82200"
  },
  {
    "text": "oaml have this notion of they have a",
    "start": "82200",
    "end": "84320"
  },
  {
    "text": "special module system that is fairly",
    "start": "84320",
    "end": "86680"
  },
  {
    "text": "just really highly regarded uh",
    "start": "86680",
    "end": "88720"
  },
  {
    "text": "especially by uh Rob Harper and uh so I",
    "start": "88720",
    "end": "92159"
  },
  {
    "text": "I spent a few months looking into",
    "start": "92159",
    "end": "94000"
  },
  {
    "text": "looking and learning and writing some",
    "start": "94000",
    "end": "96079"
  },
  {
    "text": "standard ml camel and I realized one of",
    "start": "96079",
    "end": "98960"
  },
  {
    "text": "the big things uh that's really related",
    "start": "98960",
    "end": "100720"
  },
  {
    "text": "to what I was looking for uh was code",
    "start": "100720",
    "end": "103399"
  },
  {
    "text": "and concept reuse I would like to be",
    "start": "103399",
    "end": "105280"
  },
  {
    "text": "able to uh and so in the context of that",
    "start": "105280",
    "end": "107439"
  },
  {
    "text": "mocking thing I would like to be able to",
    "start": "107439",
    "end": "108600"
  },
  {
    "text": "structure my program around uh the fact",
    "start": "108600",
    "end": "111560"
  },
  {
    "text": "that it depends on X Y and Z and then I",
    "start": "111560",
    "end": "113280"
  },
  {
    "text": "should be able to take that entire",
    "start": "113280",
    "end": "115159"
  },
  {
    "text": "program tell it for production I want to",
    "start": "115159",
    "end": "117439"
  },
  {
    "text": "use this live database this live Network",
    "start": "117439",
    "end": "120119"
  },
  {
    "text": "live whatever and then for testing I",
    "start": "120119",
    "end": "121920"
  },
  {
    "text": "should be able to easily swap in a",
    "start": "121920",
    "end": "123640"
  },
  {
    "text": "testing thing without having to rely on",
    "start": "123640",
    "end": "125600"
  },
  {
    "text": "anything like mocking or anything that",
    "start": "125600",
    "end": "127799"
  },
  {
    "text": "that messes with",
    "start": "127799",
    "end": "131039"
  },
  {
    "text": "uh with like the runtime stuff stuff",
    "start": "131040",
    "end": "134280"
  },
  {
    "text": "that's very",
    "start": "134280",
    "end": "135640"
  },
  {
    "text": "simple and uh this this also led me down",
    "start": "135640",
    "end": "139360"
  },
  {
    "text": "to explore other other approaches so uh",
    "start": "139360",
    "end": "141879"
  },
  {
    "text": "ml modules was a big one for me uh type",
    "start": "141879",
    "end": "144080"
  },
  {
    "text": "classes was were also a big one for me",
    "start": "144080",
    "end": "145720"
  },
  {
    "text": "and general just functions and",
    "start": "145720",
    "end": "147480"
  },
  {
    "text": "functional programming and things and as",
    "start": "147480",
    "end": "149280"
  },
  {
    "text": "I learned more functional programming I",
    "start": "149280",
    "end": "150760"
  },
  {
    "text": "learned about pure functions uh",
    "start": "150760",
    "end": "153040"
  },
  {
    "text": "composing effects rying uh errors and",
    "start": "153040",
    "end": "156319"
  },
  {
    "text": "and side effects as values I realized",
    "start": "156319",
    "end": "158360"
  },
  {
    "text": "that this allowed me to reuse the same",
    "start": "158360",
    "end": "160599"
  },
  {
    "text": "not only the same code but also the same",
    "start": "160599",
    "end": "163959"
  },
  {
    "text": "Concepts and uh at the very bottom layer",
    "start": "163959",
    "end": "166959"
  },
  {
    "text": "I realized that a lot of this the the",
    "start": "166959",
    "end": "168920"
  },
  {
    "text": "benefits I was getting was due to uh",
    "start": "168920",
    "end": "171599"
  },
  {
    "text": "having an expressive type system and so",
    "start": "171599",
    "end": "173280"
  },
  {
    "text": "that's going to form form the the rest",
    "start": "173280",
    "end": "175640"
  },
  {
    "text": "of this talk is I'm going to walk",
    "start": "175640",
    "end": "176720"
  },
  {
    "text": "through a bunch of uh type system",
    "start": "176720",
    "end": "179200"
  },
  {
    "text": "features that's has that uh other",
    "start": "179200",
    "end": "181120"
  },
  {
    "text": "languages may or may not have and show",
    "start": "181120",
    "end": "183080"
  },
  {
    "text": "some examples of where I found those",
    "start": "183080",
    "end": "185239"
  },
  {
    "text": "features to be",
    "start": "185239",
    "end": "187400"
  },
  {
    "text": "useful uh so there's going to be a lot",
    "start": "187400",
    "end": "189159"
  },
  {
    "text": "of code in this talk and as I was making",
    "start": "189159",
    "end": "191319"
  },
  {
    "text": "these slides I know I tend to iterate on",
    "start": "191319",
    "end": "193519"
  },
  {
    "text": "slides a lot and I wanted to make sure",
    "start": "193519",
    "end": "195040"
  },
  {
    "text": "whatever code I showed was valid code I",
    "start": "195040",
    "end": "197560"
  },
  {
    "text": "didn't want people to be able to like",
    "start": "197560",
    "end": "199280"
  },
  {
    "text": "copy and paste my code and then have it",
    "start": "199280",
    "end": "200879"
  },
  {
    "text": "not compile and so I ended up making",
    "start": "200879",
    "end": "203120"
  },
  {
    "text": "these slides andark JS which lets you",
    "start": "203120",
    "end": "205400"
  },
  {
    "text": "write your slides and mark down and",
    "start": "205400",
    "end": "207519"
  },
  {
    "text": "these are actually compiled uh so all",
    "start": "207519",
    "end": "209319"
  },
  {
    "text": "the code you today is going to be has",
    "start": "209319",
    "end": "211159"
  },
  {
    "text": "been compiled against scol 211 cat4 kind",
    "start": "211159",
    "end": "213760"
  },
  {
    "text": "projector O7 uh using Tut and so Tut is",
    "start": "213760",
    "end": "216519"
  },
  {
    "text": "a tool by uh Rob Norris which basically",
    "start": "216519",
    "end": "219640"
  },
  {
    "text": "takes markdown files and makes sure that",
    "start": "219640",
    "end": "221680"
  },
  {
    "text": "all the code blocks you put in there",
    "start": "221680",
    "end": "223239"
  },
  {
    "text": "compile against a specific version so",
    "start": "223239",
    "end": "225640"
  },
  {
    "text": "all code you see today at least",
    "start": "225640",
    "end": "228799"
  },
  {
    "text": "compiles so uh to start things off we",
    "start": "228799",
    "end": "231239"
  },
  {
    "text": "we'll start relatively simple uh sort of",
    "start": "231239",
    "end": "233920"
  },
  {
    "text": "uh necessary tools when we do functional",
    "start": "233920",
    "end": "235760"
  },
  {
    "text": "programming is the ability to use",
    "start": "235760",
    "end": "237280"
  },
  {
    "text": "functions as",
    "start": "237280",
    "end": "238519"
  },
  {
    "text": "values and so we we sort of had",
    "start": "238519",
    "end": "241640"
  },
  {
    "text": "functions because we wanted to be able",
    "start": "241640",
    "end": "242959"
  },
  {
    "text": "to reuse some some sort of comp uh some",
    "start": "242959",
    "end": "246959"
  },
  {
    "text": "yeah basically some computation we don't",
    "start": "246959",
    "end": "248360"
  },
  {
    "text": "want to write the same computation over",
    "start": "248360",
    "end": "249680"
  },
  {
    "text": "and over so we had functions and then",
    "start": "249680",
    "end": "251079"
  },
  {
    "text": "we'll just pass necessary parameters",
    "start": "251079",
    "end": "253079"
  },
  {
    "text": "through the functions and the functions",
    "start": "253079",
    "end": "254680"
  },
  {
    "text": "would do the the work that we needed and",
    "start": "254680",
    "end": "257400"
  },
  {
    "text": "so we might start off by writing a",
    "start": "257400",
    "end": "258840"
  },
  {
    "text": "function that just doubles all the",
    "start": "258840",
    "end": "260079"
  },
  {
    "text": "integers in the list and that's that's",
    "start": "260079",
    "end": "261959"
  },
  {
    "text": "fine that's relatively simple and then",
    "start": "261959",
    "end": "264199"
  },
  {
    "text": "we say all right now we're going to add",
    "start": "264199",
    "end": "265320"
  },
  {
    "text": "50 to each element of the list and the",
    "start": "265320",
    "end": "267880"
  },
  {
    "text": "code ends up being pretty much the same",
    "start": "267880",
    "end": "269280"
  },
  {
    "text": "safe for uh that one part where you",
    "start": "269280",
    "end": "271840"
  },
  {
    "text": "actually apply the function to to the",
    "start": "271840",
    "end": "274199"
  },
  {
    "text": "element and then and then you recurse uh",
    "start": "274199",
    "end": "276800"
  },
  {
    "text": "and so if you don't have function as",
    "start": "276800",
    "end": "277960"
  },
  {
    "text": "values you end up or or doing something",
    "start": "277960",
    "end": "280280"
  },
  {
    "text": "kind of strange like having a class that",
    "start": "280280",
    "end": "282120"
  },
  {
    "text": "emulates first class function uh you end",
    "start": "282120",
    "end": "284759"
  },
  {
    "text": "up having to rewrite functions with the",
    "start": "284759",
    "end": "286800"
  },
  {
    "text": "similar structure and so once you have",
    "start": "286800",
    "end": "288840"
  },
  {
    "text": "functions as values uh and I think this",
    "start": "288840",
    "end": "291080"
  },
  {
    "text": "is relatively well-known Scala you begin",
    "start": "291080",
    "end": "293080"
  },
  {
    "text": "achieving a higher degree of cod ruse",
    "start": "293080",
    "end": "294759"
  },
  {
    "text": "you don't have to keep writing the same",
    "start": "294759",
    "end": "296240"
  },
  {
    "text": "thing uh over and over again",
    "start": "296240",
    "end": "299960"
  },
  {
    "text": "and to go further with this uh skull",
    "start": "299960",
    "end": "302800"
  },
  {
    "text": "also has Type parameters and this is uh",
    "start": "302800",
    "end": "305800"
  },
  {
    "text": "Java has generics uh C++ kind of has",
    "start": "305800",
    "end": "308160"
  },
  {
    "text": "this with uh with templates and it's the",
    "start": "308160",
    "end": "311320"
  },
  {
    "text": "same problem right it's a similar",
    "start": "311320",
    "end": "312680"
  },
  {
    "text": "problem but from a from a different",
    "start": "312680",
    "end": "313919"
  },
  {
    "text": "angle we write so you want to",
    "start": "313919",
    "end": "315240"
  },
  {
    "text": "concatenate two lists and we say we have",
    "start": "315240",
    "end": "317360"
  },
  {
    "text": "but we don't let's pretend we don't have",
    "start": "317360",
    "end": "318479"
  },
  {
    "text": "type parameters and we want to",
    "start": "318479",
    "end": "319600"
  },
  {
    "text": "concatenate a two list of strings so you",
    "start": "319600",
    "end": "322080"
  },
  {
    "text": "write it and then you say now I want to",
    "start": "322080",
    "end": "323479"
  },
  {
    "text": "concat to list of inss but you can't",
    "start": "323479",
    "end": "325039"
  },
  {
    "text": "reuse the old one because the inner",
    "start": "325039",
    "end": "326720"
  },
  {
    "text": "thing is different and so you rewrite",
    "start": "326720",
    "end": "328960"
  },
  {
    "text": "pretty much the exact same code and with",
    "start": "328960",
    "end": "331039"
  },
  {
    "text": "typ parameters they essentially allow",
    "start": "331039",
    "end": "332680"
  },
  {
    "text": "you to abstract out irrelevant",
    "start": "332680",
    "end": "334520"
  },
  {
    "text": "information right stuff that is not",
    "start": "334520",
    "end": "336199"
  },
  {
    "text": "essential to uh the algorithm itself and",
    "start": "336199",
    "end": "341199"
  },
  {
    "text": "allows you to Once You' expected out of",
    "start": "341199",
    "end": "343039"
  },
  {
    "text": "way that gives you a wider surface a",
    "start": "343039",
    "end": "345960"
  },
  {
    "text": "wider surface area for what uh client",
    "start": "345960",
    "end": "348199"
  },
  {
    "text": "code can call your function so instead",
    "start": "348199",
    "end": "350479"
  },
  {
    "text": "of saying we're going to concatenate two",
    "start": "350479",
    "end": "352720"
  },
  {
    "text": "lists of inss and we only going to work",
    "start": "352720",
    "end": "354240"
  },
  {
    "text": "on end we're going to say we don't care",
    "start": "354240",
    "end": "355680"
  },
  {
    "text": "about the fact that it's an end towards",
    "start": "355680",
    "end": "357120"
  },
  {
    "text": "a string or a double or whatever we just",
    "start": "357120",
    "end": "358800"
  },
  {
    "text": "care that these two things are lists and",
    "start": "358800",
    "end": "361039"
  },
  {
    "text": "and we'll work off",
    "start": "361039",
    "end": "362960"
  },
  {
    "text": "that and yeah you can uh with that you",
    "start": "362960",
    "end": "365479"
  },
  {
    "text": "can you can pass in a variety of types",
    "start": "365479",
    "end": "367880"
  },
  {
    "text": "so that again gives us a degree of code",
    "start": "367880",
    "end": "369880"
  },
  {
    "text": "reuse and then we can combine these two",
    "start": "369880",
    "end": "372520"
  },
  {
    "text": "features to have uh parametric",
    "start": "372520",
    "end": "375000"
  },
  {
    "text": "polymorphism and also functions as",
    "start": "375000",
    "end": "376759"
  },
  {
    "text": "values to give us uh really cool and",
    "start": "376759",
    "end": "379880"
  },
  {
    "text": "really reusable things and so one of the",
    "start": "379880",
    "end": "382199"
  },
  {
    "text": "the things I learned when I started",
    "start": "382199",
    "end": "383360"
  },
  {
    "text": "functional programming is that uh this",
    "start": "383360",
    "end": "385800"
  },
  {
    "text": "full R function which sort of at a",
    "start": "385800",
    "end": "387840"
  },
  {
    "text": "glance looks strange the type signatures",
    "start": "387840",
    "end": "389759"
  },
  {
    "text": "looks uh a little complex but it's very",
    "start": "389759",
    "end": "393759"
  },
  {
    "text": "it's highly reusable to the sense that",
    "start": "393759",
    "end": "395560"
  },
  {
    "text": "you can Implement an incredible amount",
    "start": "395560",
    "end": "397960"
  },
  {
    "text": "of list functions I believe all the list",
    "start": "397960",
    "end": "400160"
  },
  {
    "text": "functions purely in terms of uh fold",
    "start": "400160",
    "end": "402639"
  },
  {
    "text": "rate and so that was that was really",
    "start": "402639",
    "end": "405080"
  },
  {
    "text": "cool to see so this is just with",
    "start": "405080",
    "end": "406440"
  },
  {
    "text": "function as values and and type",
    "start": "406440",
    "end": "410039"
  },
  {
    "text": "parameters uh so to go slightly deeper",
    "start": "410360",
    "end": "414000"
  },
  {
    "text": "into type parameters you can think about",
    "start": "414000",
    "end": "416240"
  },
  {
    "text": "type parameters as uh like Universal",
    "start": "416240",
    "end": "418759"
  },
  {
    "text": "quantification and logic uh basically",
    "start": "418759",
    "end": "421199"
  },
  {
    "text": "when you when you have a type parameter",
    "start": "421199",
    "end": "422680"
  },
  {
    "text": "you can say so to apply here in the",
    "start": "422680",
    "end": "424680"
  },
  {
    "text": "trait it says for for any a you give me",
    "start": "424680",
    "end": "427840"
  },
  {
    "text": "uh I will produce you an a right and",
    "start": "427840",
    "end": "429400"
  },
  {
    "text": "this is essentially you can choose any a",
    "start": "429400",
    "end": "431759"
  },
  {
    "text": "you want and if you choose an INT if you",
    "start": "431759",
    "end": "433160"
  },
  {
    "text": "choose a double if you choose string",
    "start": "433160",
    "end": "434720"
  },
  {
    "text": "whatever I can satisfy because I don't",
    "start": "434720",
    "end": "436720"
  },
  {
    "text": "care about what a you choose my my",
    "start": "436720",
    "end": "439000"
  },
  {
    "text": "function or my implication Works",
    "start": "439000",
    "end": "440360"
  },
  {
    "text": "regardless of whatever a you may",
    "start": "440360",
    "end": "443039"
  },
  {
    "text": "choose uh you can contrast this with uh",
    "start": "443039",
    "end": "446000"
  },
  {
    "text": "existential quantification right uh and",
    "start": "446000",
    "end": "448599"
  },
  {
    "text": "the and corresponding two types there's",
    "start": "448599",
    "end": "450520"
  },
  {
    "text": "uh existentially Quantified types uh and",
    "start": "450520",
    "end": "453360"
  },
  {
    "text": "this manifests itself two ways in Scola",
    "start": "453360",
    "end": "455599"
  },
  {
    "text": "the one I'm going to talk about now is",
    "start": "455599",
    "end": "457080"
  },
  {
    "text": "in the form of type members and here",
    "start": "457080",
    "end": "459520"
  },
  {
    "text": "instead of saying for all a my my",
    "start": "459520",
    "end": "462000"
  },
  {
    "text": "function hold you're saying there exists",
    "start": "462000",
    "end": "463759"
  },
  {
    "text": "some a uh that I'm not going to tell you",
    "start": "463759",
    "end": "466960"
  },
  {
    "text": "but there exists some a such that uh my",
    "start": "466960",
    "end": "469759"
  },
  {
    "text": "function works and so from this from",
    "start": "469759",
    "end": "472080"
  },
  {
    "text": "this angle it becomes not you choose any",
    "start": "472080",
    "end": "474280"
  },
  {
    "text": "a you want it's I have chosen an A and",
    "start": "474280",
    "end": "476639"
  },
  {
    "text": "you don't know what it is and what uh",
    "start": "476639",
    "end": "479159"
  },
  {
    "text": "and so so here we see when we try to do",
    "start": "479159",
    "end": "480599"
  },
  {
    "text": "the same thing we did in the previous",
    "start": "480599",
    "end": "482479"
  },
  {
    "text": "slide uh you can't do it right because",
    "start": "482479",
    "end": "485479"
  },
  {
    "text": "you're saying you're asserting that the",
    "start": "485479",
    "end": "487159"
  },
  {
    "text": "A and there is an INT and you but the",
    "start": "487159",
    "end": "489159"
  },
  {
    "text": "type Checker sees that well it's",
    "start": "489159",
    "end": "490520"
  },
  {
    "text": "abstract I can't I can't guarantee you",
    "start": "490520",
    "end": "492479"
  },
  {
    "text": "that uh that a is ever going to be an",
    "start": "492479",
    "end": "494800"
  },
  {
    "text": "INT so it doesn't work and this sort of",
    "start": "494800",
    "end": "498360"
  },
  {
    "text": "leads to the idea that existential",
    "start": "498360",
    "end": "500280"
  },
  {
    "text": "quantification",
    "start": "500280",
    "end": "502039"
  },
  {
    "text": "is information hiding right You' you",
    "start": "502039",
    "end": "504960"
  },
  {
    "text": "have something that's uh that's relevant",
    "start": "504960",
    "end": "507680"
  },
  {
    "text": "to to your algorithm or to your comp",
    "start": "507680",
    "end": "509479"
  },
  {
    "text": "computation but it's something that they",
    "start": "509479",
    "end": "511440"
  },
  {
    "text": "should not have to know about at least",
    "start": "511440",
    "end": "512719"
  },
  {
    "text": "they should not know about the concrete",
    "start": "512719",
    "end": "514440"
  },
  {
    "text": "form of",
    "start": "514440",
    "end": "515880"
  },
  {
    "text": "it and uh we can we can see an example",
    "start": "515880",
    "end": "519159"
  },
  {
    "text": "for it is so the example I have is stack",
    "start": "519159",
    "end": "521039"
  },
  {
    "text": "and so we have two sort of type types uh",
    "start": "521039",
    "end": "523599"
  },
  {
    "text": "in play here one is a universally",
    "start": "523599",
    "end": "525480"
  },
  {
    "text": "Quantified a which is known to you this",
    "start": "525480",
    "end": "527360"
  },
  {
    "text": "is something that you you do want to",
    "start": "527360",
    "end": "528800"
  },
  {
    "text": "care about right because you want if you",
    "start": "528800",
    "end": "530120"
  },
  {
    "text": "have a stack of int you want to know",
    "start": "530120",
    "end": "531480"
  },
  {
    "text": "that the stack contains an in so it can",
    "start": "531480",
    "end": "533600"
  },
  {
    "text": "be universally Quantified but the",
    "start": "533600",
    "end": "535880"
  },
  {
    "text": "representation of the stack you should",
    "start": "535880",
    "end": "537200"
  },
  {
    "text": "not care about right I've given you some",
    "start": "537200",
    "end": "538880"
  },
  {
    "text": "API and you should be working against",
    "start": "538880",
    "end": "540600"
  },
  {
    "text": "that API you should never actually",
    "start": "540600",
    "end": "542680"
  },
  {
    "text": "depend on what Implement what uh",
    "start": "542680",
    "end": "545360"
  },
  {
    "text": "implementation the stack is using so we",
    "start": "545360",
    "end": "547880"
  },
  {
    "text": "exponentially quantify over uh the",
    "start": "547880",
    "end": "550720"
  },
  {
    "text": "representation and so uh as an example",
    "start": "550720",
    "end": "554440"
  },
  {
    "text": "if we take this sort of Stack module uh",
    "start": "554440",
    "end": "557600"
  },
  {
    "text": "as as a parameter we can push we know",
    "start": "557600",
    "end": "559760"
  },
  {
    "text": "that it's an in so we can push one two",
    "start": "559760",
    "end": "561600"
  },
  {
    "text": "three against empty but what we can't do",
    "start": "561600",
    "end": "564040"
  },
  {
    "text": "is sort of say well I bet the stack is",
    "start": "564040",
    "end": "566120"
  },
  {
    "text": "as a list on a cover so I'm going to",
    "start": "566120",
    "end": "567760"
  },
  {
    "text": "just push one onto the supposed St 2",
    "start": "567760",
    "end": "569920"
  },
  {
    "text": "list 2 3 4 and the type Checker will be",
    "start": "569920",
    "end": "571880"
  },
  {
    "text": "like no you can't do that because for",
    "start": "571880",
    "end": "573600"
  },
  {
    "text": "the same reason as before it doesn't",
    "start": "573600",
    "end": "574959"
  },
  {
    "text": "know what uh representation you're going",
    "start": "574959",
    "end": "577079"
  },
  {
    "text": "to use right because it's existentially",
    "start": "577079",
    "end": "579120"
  },
  {
    "text": "Quantified and so what this allows you",
    "start": "579120",
    "end": "581839"
  },
  {
    "text": "to do",
    "start": "581839",
    "end": "583160"
  },
  {
    "text": "is uh prevent the the type is still",
    "start": "583160",
    "end": "586680"
  },
  {
    "text": "exposed in the sense that people can get",
    "start": "586680",
    "end": "588519"
  },
  {
    "text": "a hold of a value of that type and this",
    "start": "588519",
    "end": "590120"
  },
  {
    "text": "is what empty gives us but they are not",
    "start": "590120",
    "end": "592200"
  },
  {
    "text": "allowed to do anything with that type",
    "start": "592200",
    "end": "594320"
  },
  {
    "text": "day you don't allow them to do and I've",
    "start": "594320",
    "end": "596480"
  },
  {
    "text": "used this before to uh in a similar way",
    "start": "596480",
    "end": "599480"
  },
  {
    "text": "but to but this also enforces that they",
    "start": "599480",
    "end": "603040"
  },
  {
    "text": "never depend on implementation detail",
    "start": "603040",
    "end": "604680"
  },
  {
    "text": "they don't care about and so I should be",
    "start": "604680",
    "end": "606000"
  },
  {
    "text": "able to take a completely different",
    "start": "606000",
    "end": "607800"
  },
  {
    "text": "implementation of stack and then give",
    "start": "607800",
    "end": "609600"
  },
  {
    "text": "them that and their code will all work",
    "start": "609600",
    "end": "611200"
  },
  {
    "text": "because they've never they've never like",
    "start": "611200",
    "end": "613399"
  },
  {
    "text": "leveraged the fact that the",
    "start": "613399",
    "end": "614560"
  },
  {
    "text": "representation under my BLS I can change",
    "start": "614560",
    "end": "616160"
  },
  {
    "text": "it to like a vector someday and their",
    "start": "616160",
    "end": "617959"
  },
  {
    "text": "code will still",
    "start": "617959",
    "end": "620480"
  },
  {
    "text": "work uh moving on to a different type",
    "start": "620640",
    "end": "623240"
  },
  {
    "text": "system feature I'm going to talk about",
    "start": "623240",
    "end": "625000"
  },
  {
    "text": "uh kinds and higher kinds uh so to give",
    "start": "625000",
    "end": "629040"
  },
  {
    "text": "AEF brief introduction you can sort of",
    "start": "629040",
    "end": "630360"
  },
  {
    "text": "think about kinds as the type of types",
    "start": "630360",
    "end": "633640"
  },
  {
    "text": "uh and one way I think I heard Daniel",
    "start": "633640",
    "end": "635560"
  },
  {
    "text": "put it once was uh types areed values as",
    "start": "635560",
    "end": "637720"
  },
  {
    "text": "kinds are the types and you and we",
    "start": "637720",
    "end": "641000"
  },
  {
    "text": "usually uh talk about kinds in in this",
    "start": "641000",
    "end": "643399"
  },
  {
    "text": "notation we use a star and you can read",
    "start": "643399",
    "end": "645040"
  },
  {
    "text": "it as type and so the things the the",
    "start": "645040",
    "end": "647760"
  },
  {
    "text": "kind that everyone's sort of familiar",
    "start": "647760",
    "end": "648959"
  },
  {
    "text": "with is just a plain type and it's a",
    "start": "648959",
    "end": "650560"
  },
  {
    "text": "Concrete type that you can you can have",
    "start": "650560",
    "end": "652200"
  },
  {
    "text": "a value of so it's integer character a",
    "start": "652200",
    "end": "654600"
  },
  {
    "text": "list of in",
    "start": "654600",
    "end": "655760"
  },
  {
    "text": "whatever and then you can have type",
    "start": "655760",
    "end": "657600"
  },
  {
    "text": "Constructors or unary type Constructors",
    "start": "657600",
    "end": "659360"
  },
  {
    "text": "that given a type uh will give you a",
    "start": "659360",
    "end": "661720"
  },
  {
    "text": "type so list Vector future you give it",
    "start": "661720",
    "end": "664680"
  },
  {
    "text": "an INT and it will give you a future of",
    "start": "664680",
    "end": "666120"
  },
  {
    "text": "in or you give it a string and it'll",
    "start": "666120",
    "end": "667480"
  },
  {
    "text": "give you a vector of string the given",
    "start": "667480",
    "end": "669839"
  },
  {
    "text": "type it will give you a concrete type",
    "start": "669839",
    "end": "671720"
  },
  {
    "text": "and then you can imagine the same thing",
    "start": "671720",
    "end": "672800"
  },
  {
    "text": "for binary uh for binary types and three",
    "start": "672800",
    "end": "676240"
  },
  {
    "text": "area types and so",
    "start": "676240",
    "end": "677839"
  },
  {
    "text": "on and so this leads us to higher kind",
    "start": "677839",
    "end": "680480"
  },
  {
    "text": "of types uh something that not many",
    "start": "680480",
    "end": "682600"
  },
  {
    "text": "languages support and as far as I know",
    "start": "682600",
    "end": "684920"
  },
  {
    "text": "uh the languages that are in use in",
    "start": "684920",
    "end": "687240"
  },
  {
    "text": "Industry today that do support this are",
    "start": "687240",
    "end": "688880"
  },
  {
    "text": "probably just Scola and has uh and",
    "start": "688880",
    "end": "691720"
  },
  {
    "text": "essentially how kind of types are types",
    "start": "691720",
    "end": "693279"
  },
  {
    "text": "that abstract over type",
    "start": "693279",
    "end": "694959"
  },
  {
    "text": "Constructors and so as an example uh so",
    "start": "694959",
    "end": "698480"
  },
  {
    "text": "these are often used in the context of",
    "start": "698480",
    "end": "700519"
  },
  {
    "text": "of type classes and as an example we",
    "start": "700519",
    "end": "702720"
  },
  {
    "text": "have this idea say of of a funter which",
    "start": "702720",
    "end": "704760"
  },
  {
    "text": "abstracts over a type Constructor and if",
    "start": "704760",
    "end": "707200"
  },
  {
    "text": "you look at the kind uh that I wrote",
    "start": "707200",
    "end": "708959"
  },
  {
    "text": "there the kind is given a a type",
    "start": "708959",
    "end": "712040"
  },
  {
    "text": "Constructor I will give you a concrete",
    "start": "712040",
    "end": "714200"
  },
  {
    "text": "type right and so funter there let's see",
    "start": "714200",
    "end": "717639"
  },
  {
    "text": "if my mouse works yeah so it takes a",
    "start": "717639",
    "end": "720279"
  },
  {
    "text": "type Constructor and and then it has the",
    "start": "720279",
    "end": "722680"
  },
  {
    "text": "map method on it this is distinct uh",
    "start": "722680",
    "end": "724920"
  },
  {
    "text": "from if we like say move the a up here",
    "start": "724920",
    "end": "726839"
  },
  {
    "text": "because then you would have to Define",
    "start": "726839",
    "end": "728680"
  },
  {
    "text": "like the instance for a if we set F was",
    "start": "728680",
    "end": "731480"
  },
  {
    "text": "uh list and then we set a is we would",
    "start": "731480",
    "end": "734040"
  },
  {
    "text": "have a different instance of it for a",
    "start": "734040",
    "end": "735360"
  },
  {
    "text": "list of int list of string list of",
    "start": "735360",
    "end": "736839"
  },
  {
    "text": "double and so on uh whereas if we're",
    "start": "736839",
    "end": "738680"
  },
  {
    "text": "able to just parameterize over the type",
    "start": "738680",
    "end": "740320"
  },
  {
    "text": "Constructor then we're saying uh this we",
    "start": "740320",
    "end": "743480"
  },
  {
    "text": "fix f2b list and then we make map",
    "start": "743480",
    "end": "745519"
  },
  {
    "text": "parametric entirely over A and B for any",
    "start": "745519",
    "end": "747480"
  },
  {
    "text": "choice of A and B that you choose and so",
    "start": "747480",
    "end": "749800"
  },
  {
    "text": "this gives us essentially generics of a",
    "start": "749800",
    "end": "751600"
  },
  {
    "text": "higher kind right gives you a higher",
    "start": "751600",
    "end": "753480"
  },
  {
    "text": "degree of being able to abstract in your",
    "start": "753480",
    "end": "756040"
  },
  {
    "text": "code uh and as a sort of example uh",
    "start": "756040",
    "end": "759199"
  },
  {
    "text": "because every all the code in here has",
    "start": "759199",
    "end": "761160"
  },
  {
    "text": "been run through a",
    "start": "761160",
    "end": "762720"
  },
  {
    "text": "compiler uh I have to finded a funter",
    "start": "762720",
    "end": "765240"
  },
  {
    "text": "that just given to list so it's not a",
    "start": "765240",
    "end": "767279"
  },
  {
    "text": "list of in or a list of string it's just",
    "start": "767279",
    "end": "768760"
  },
  {
    "text": "the list type Constructor and I have an",
    "start": "768760",
    "end": "770760"
  },
  {
    "text": "actual type",
    "start": "770760",
    "end": "772360"
  },
  {
    "text": "back and this allows us to achieve uh",
    "start": "772360",
    "end": "775320"
  },
  {
    "text": "something really",
    "start": "775320",
    "end": "777440"
  },
  {
    "text": "essentially having just like plain the",
    "start": "777440",
    "end": "780800"
  },
  {
    "text": "the pl the the plain Universal",
    "start": "780800",
    "end": "782399"
  },
  {
    "text": "quantification that we saw before it",
    "start": "782399",
    "end": "784440"
  },
  {
    "text": "gets us things like L concat uh",
    "start": "784440",
    "end": "786839"
  },
  {
    "text": "reversing of a list or whatever but",
    "start": "786839",
    "end": "788800"
  },
  {
    "text": "being able to now talk about higher",
    "start": "788800",
    "end": "790839"
  },
  {
    "text": "kinded types to be able to abstract over",
    "start": "790839",
    "end": "792959"
  },
  {
    "text": "type Constructors gives us an a very",
    "start": "792959",
    "end": "795519"
  },
  {
    "text": "large degree of code reuse and so I",
    "start": "795519",
    "end": "798199"
  },
  {
    "text": "don't want to get too much into detail",
    "start": "798199",
    "end": "799720"
  },
  {
    "text": "here but here uh we we're saying we have",
    "start": "799720",
    "end": "802600"
  },
  {
    "text": "a list of a and then we have a function",
    "start": "802600",
    "end": "804320"
  },
  {
    "text": "that goes from a to some G of B right",
    "start": "804320",
    "end": "806720"
  },
  {
    "text": "where g g is free here or is universally",
    "start": "806720",
    "end": "810000"
  },
  {
    "text": "Quantified here such that g uh has this",
    "start": "810000",
    "end": "812880"
  },
  {
    "text": "instance and and so essentially this",
    "start": "812880",
    "end": "814880"
  },
  {
    "text": "instance is give it it abstracts over",
    "start": "814880",
    "end": "817399"
  },
  {
    "text": "things that given two independent values",
    "start": "817399",
    "end": "820399"
  },
  {
    "text": "in the same context you're able to to",
    "start": "820399",
    "end": "822160"
  },
  {
    "text": "take those things and combine them",
    "start": "822160",
    "end": "823639"
  },
  {
    "text": "together so you can imagine it's future",
    "start": "823639",
    "end": "826279"
  },
  {
    "text": "uh where you zip the future together or",
    "start": "826279",
    "end": "827839"
  },
  {
    "text": "it's list where you concatenate or",
    "start": "827839",
    "end": "829680"
  },
  {
    "text": "option where uh you combine them only",
    "start": "829680",
    "end": "832160"
  },
  {
    "text": "when they're both",
    "start": "832160",
    "end": "833720"
  },
  {
    "text": "sum uh and so we write this function",
    "start": "833720",
    "end": "835800"
  },
  {
    "text": "once and for all against a list of a and",
    "start": "835800",
    "end": "838320"
  },
  {
    "text": "then for some sort of uh",
    "start": "838320",
    "end": "841199"
  },
  {
    "text": "G and we can use this in the context of",
    "start": "841199",
    "end": "844639"
  },
  {
    "text": "option where our G becomes an option and",
    "start": "844639",
    "end": "846759"
  },
  {
    "text": "so let's say we try to pars an INT and",
    "start": "846759",
    "end": "848240"
  },
  {
    "text": "then when we give it a list of",
    "start": "848240",
    "end": "850040"
  },
  {
    "text": "everything in we get if we pars all the",
    "start": "850040",
    "end": "852480"
  },
  {
    "text": "in successfully we get a sum of the list",
    "start": "852480",
    "end": "854519"
  },
  {
    "text": "of results if anything fails then we",
    "start": "854519",
    "end": "856480"
  },
  {
    "text": "just get none back and that's just",
    "start": "856480",
    "end": "857680"
  },
  {
    "text": "behavior of of options uh applicative",
    "start": "857680",
    "end": "860560"
  },
  {
    "text": "instance that same exact function allows",
    "start": "860560",
    "end": "863040"
  },
  {
    "text": "us to uh essentially do sort of like a",
    "start": "863040",
    "end": "866360"
  },
  {
    "text": "fork join thing where we take each",
    "start": "866360",
    "end": "868320"
  },
  {
    "text": "element of the list Fork off a",
    "start": "868320",
    "end": "869720"
  },
  {
    "text": "computation and then eventually collect",
    "start": "869720",
    "end": "871759"
  },
  {
    "text": "all those so we we Fork off many Futures",
    "start": "871759",
    "end": "874000"
  },
  {
    "text": "and we were able to collect all those",
    "start": "874000",
    "end": "875680"
  },
  {
    "text": "Futures uh into a single list and IND di",
    "start": "875680",
    "end": "879519"
  },
  {
    "text": "exact same function can also be used uh",
    "start": "879519",
    "end": "882000"
  },
  {
    "text": "with list and many other uh many other",
    "start": "882000",
    "end": "885040"
  },
  {
    "text": "data types to do a variety of things and",
    "start": "885040",
    "end": "886639"
  },
  {
    "text": "I've I've only written Traverse list",
    "start": "886639",
    "end": "888000"
  },
  {
    "text": "once and in fact you can further",
    "start": "888000",
    "end": "890279"
  },
  {
    "text": "abstract make that more abstract where",
    "start": "890279",
    "end": "892040"
  },
  {
    "text": "you don't uh fix it to be list you can",
    "start": "892040",
    "end": "894199"
  },
  {
    "text": "fix it to be a different uh type",
    "start": "894199",
    "end": "895680"
  },
  {
    "text": "Constructor but uh I won't get into that",
    "start": "895680",
    "end": "900720"
  },
  {
    "text": "today and uh the last thing I wanted to",
    "start": "900720",
    "end": "903720"
  },
  {
    "text": "talk about was embedded dsls and I think",
    "start": "903720",
    "end": "906480"
  },
  {
    "text": "uh over the past two three years uh the",
    "start": "906480",
    "end": "909519"
  },
  {
    "text": "idea of embedded dsls and specifically",
    "start": "909519",
    "end": "911839"
  },
  {
    "text": "encoding using uh freeone ads has been",
    "start": "911839",
    "end": "915399"
  },
  {
    "text": "uh pretty popular and essentially the",
    "start": "915399",
    "end": "917279"
  },
  {
    "text": "idea is you build an a of of a DSL that",
    "start": "917279",
    "end": "920440"
  },
  {
    "text": "your your domain is in so maybe you're",
    "start": "920440",
    "end": "922000"
  },
  {
    "text": "writing a DSL for database access you're",
    "start": "922000",
    "end": "925360"
  },
  {
    "text": "writing a DSL for talking uh to H",
    "start": "925360",
    "end": "929839"
  },
  {
    "text": "DP and the the core idea the thing that",
    "start": "929839",
    "end": "932360"
  },
  {
    "text": "lets you reuse code a lot is it's",
    "start": "932360",
    "end": "934880"
  },
  {
    "text": "separating the structure from of your",
    "start": "934880",
    "end": "937360"
  },
  {
    "text": "your program from the actual",
    "start": "937360",
    "end": "939839"
  },
  {
    "text": "interpretation and you can think of it",
    "start": "939839",
    "end": "941560"
  },
  {
    "text": "sort of as like a mini program inside",
    "start": "941560",
    "end": "943040"
  },
  {
    "text": "your program right inside you have like",
    "start": "943040",
    "end": "944759"
  },
  {
    "text": "this small program that knows how to",
    "start": "944759",
    "end": "946040"
  },
  {
    "text": "talk to a database and only to a data",
    "start": "946040",
    "end": "947759"
  },
  {
    "text": "and that's all it knows how to do and it",
    "start": "947759",
    "end": "949319"
  },
  {
    "text": "lives inside your your actual program",
    "start": "949319",
    "end": "951199"
  },
  {
    "text": "the source file that you're",
    "start": "951199",
    "end": "952839"
  },
  {
    "text": "writing and then you can pass all these",
    "start": "952839",
    "end": "954959"
  },
  {
    "text": "acts around in your program not never",
    "start": "954959",
    "end": "956920"
  },
  {
    "text": "actually interpreting them you just have",
    "start": "956920",
    "end": "958199"
  },
  {
    "text": "a bunch of these data types these values",
    "start": "958199",
    "end": "959880"
  },
  {
    "text": "these structures describing what you",
    "start": "959880",
    "end": "961120"
  },
  {
    "text": "want to do uh and you don't actually",
    "start": "961120",
    "end": "963279"
  },
  {
    "text": "interpret them until like the very end",
    "start": "963279",
    "end": "964839"
  },
  {
    "text": "of your",
    "start": "964839",
    "end": "966079"
  },
  {
    "text": "program and the usual encodings of this",
    "start": "966079",
    "end": "968720"
  },
  {
    "text": "uh come up in like free monad free",
    "start": "968720",
    "end": "970360"
  },
  {
    "text": "applicative and finally taglist and uh",
    "start": "970360",
    "end": "973680"
  },
  {
    "text": "because there's been so many examples of",
    "start": "973680",
    "end": "976199"
  },
  {
    "text": "free monad and free applicatives there's",
    "start": "976199",
    "end": "978000"
  },
  {
    "text": "there's countless number of talks and",
    "start": "978000",
    "end": "979639"
  },
  {
    "text": "and documentation around that I decided",
    "start": "979639",
    "end": "981800"
  },
  {
    "text": "today that I was going to show uh or run",
    "start": "981800",
    "end": "983880"
  },
  {
    "text": "through briefly to fin the taglist",
    "start": "983880",
    "end": "985519"
  },
  {
    "text": "approach of of doing an eded",
    "start": "985519",
    "end": "987720"
  },
  {
    "text": "DSL so so we can start by so the example",
    "start": "987720",
    "end": "991440"
  },
  {
    "text": "I'm going to do is basically a read",
    "start": "991440",
    "end": "992680"
  },
  {
    "text": "write something that can read uh read",
    "start": "992680",
    "end": "994839"
  },
  {
    "text": "something maybe off console maybe off a",
    "start": "994839",
    "end": "997199"
  },
  {
    "text": "file maybe off a list and it's something",
    "start": "997199",
    "end": "999079"
  },
  {
    "text": "that can write write something so it has",
    "start": "999079",
    "end": "1001560"
  },
  {
    "text": "two things I can do and then I I have",
    "start": "1001560",
    "end": "1003319"
  },
  {
    "text": "the demone ad there to say that",
    "start": "1003319",
    "end": "1005160"
  },
  {
    "text": "essentially to capture the fact that",
    "start": "1005160",
    "end": "1006759"
  },
  {
    "text": "maybe you want to write something that",
    "start": "1006759",
    "end": "1007959"
  },
  {
    "text": "we read so to to capture the dependency",
    "start": "1007959",
    "end": "1010000"
  },
  {
    "text": "between the two possible dependency or",
    "start": "1010000",
    "end": "1012880"
  },
  {
    "text": "bindings and then so that's going to the",
    "start": "1012880",
    "end": "1015160"
  },
  {
    "text": "that's going to act as our interpreter",
    "start": "1015160",
    "end": "1017519"
  },
  {
    "text": "and then we're going to write uh another",
    "start": "1017519",
    "end": "1019160"
  },
  {
    "text": "data type called RW uh that when given",
    "start": "1019160",
    "end": "1023199"
  },
  {
    "text": "an interpreter will actually produce or",
    "start": "1023199",
    "end": "1025600"
  },
  {
    "text": "run the run the effect right so you can",
    "start": "1025600",
    "end": "1027760"
  },
  {
    "text": "imagine you have a a read write",
    "start": "1027760",
    "end": "1029839"
  },
  {
    "text": "structure or an A but it hasn't been",
    "start": "1029839",
    "end": "1032400"
  },
  {
    "text": "interpreted yet and so nothing has",
    "start": "1032400",
    "end": "1033880"
  },
  {
    "text": "actually happened it purely a stor",
    "start": "1033880",
    "end": "1036480"
  },
  {
    "text": "structure and uh you can define a moon",
    "start": "1036480",
    "end": "1039038"
  },
  {
    "text": "ad for it uh by virtue of basically",
    "start": "1039039",
    "end": "1042038"
  },
  {
    "text": "delegating all the work to uh The",
    "start": "1042039",
    "end": "1044400"
  },
  {
    "text": "Interpreter but again the RW data type",
    "start": "1044400",
    "end": "1047880"
  },
  {
    "text": "is not interpreted yet",
    "start": "1047880",
    "end": "1049919"
  },
  {
    "text": "and then you define some smart uh some",
    "start": "1049919",
    "end": "1051919"
  },
  {
    "text": "smart Constructors that correspond to uh",
    "start": "1051919",
    "end": "1054360"
  },
  {
    "text": "the evaluator you have so here we have",
    "start": "1054360",
    "end": "1055919"
  },
  {
    "text": "read which doesn't take any parameters",
    "start": "1055919",
    "end": "1057840"
  },
  {
    "text": "and just gives us a string and then we",
    "start": "1057840",
    "end": "1059720"
  },
  {
    "text": "can write which given a string we we'll",
    "start": "1059720",
    "end": "1062080"
  },
  {
    "text": "presumably write it and won't have any",
    "start": "1062080",
    "end": "1063919"
  },
  {
    "text": "meaningful value to return to",
    "start": "1063919",
    "end": "1065760"
  },
  {
    "text": "you and so we similarly we have the read",
    "start": "1065760",
    "end": "1068240"
  },
  {
    "text": "and write smart Constructors that",
    "start": "1068240",
    "end": "1069400"
  },
  {
    "text": "construct uh RW",
    "start": "1069400",
    "end": "1071960"
  },
  {
    "text": "instances and so we can construct a",
    "start": "1071960",
    "end": "1073840"
  },
  {
    "text": "program that says we're going to read",
    "start": "1073840",
    "end": "1075440"
  },
  {
    "text": "we're going to read something bind to X",
    "start": "1075440",
    "end": "1076919"
  },
  {
    "text": "we're going to read something bind to Y",
    "start": "1076919",
    "end": "1078440"
  },
  {
    "text": "we're going concatenate those two",
    "start": "1078440",
    "end": "1079720"
  },
  {
    "text": "strings that we just read and then we're",
    "start": "1079720",
    "end": "1080919"
  },
  {
    "text": "going to write that back out and so this",
    "start": "1080919",
    "end": "1083280"
  },
  {
    "text": "returns immediately this doesn't do",
    "start": "1083280",
    "end": "1084400"
  },
  {
    "text": "anything",
    "start": "1084400",
    "end": "1085880"
  },
  {
    "text": "again uh and so we have this RW unit",
    "start": "1085880",
    "end": "1088559"
  },
  {
    "text": "that has no meaning",
    "start": "1088559",
    "end": "1091640"
  },
  {
    "text": "whatsoever and then we can write uh an",
    "start": "1091640",
    "end": "1094080"
  },
  {
    "text": "interpreter for that using the console",
    "start": "1094080",
    "end": "1097440"
  },
  {
    "text": "uh so so ID or it is sort of uh and at",
    "start": "1097440",
    "end": "1101679"
  },
  {
    "text": "least encoding here is is defined as",
    "start": "1101679",
    "end": "1103360"
  },
  {
    "text": "just a type Alias where type ID of a is",
    "start": "1103360",
    "end": "1105679"
  },
  {
    "text": "just a itself so it's essenti you can",
    "start": "1105679",
    "end": "1108440"
  },
  {
    "text": "think of it as the the every any plane",
    "start": "1108440",
    "end": "1111760"
  },
  {
    "text": "value you have right ID of int is just",
    "start": "1111760",
    "end": "1113600"
  },
  {
    "text": "equal to int ID of list of string is",
    "start": "1113600",
    "end": "1115440"
  },
  {
    "text": "just list of",
    "start": "1115440",
    "end": "1116760"
  },
  {
    "text": "string uh and then to read you use the",
    "start": "1116760",
    "end": "1119159"
  },
  {
    "text": "standard use standard in to write you",
    "start": "1119159",
    "end": "1121120"
  },
  {
    "text": "just print line it and so we have an",
    "start": "1121120",
    "end": "1123039"
  },
  {
    "text": "interpreter now and we take the program",
    "start": "1123039",
    "end": "1124840"
  },
  {
    "text": "we had before and we can run it against",
    "start": "1124840",
    "end": "1126640"
  },
  {
    "text": "the standard IO interpreter and then",
    "start": "1126640",
    "end": "1128200"
  },
  {
    "text": "it'll it'll read two things off of",
    "start": "1128200",
    "end": "1129760"
  },
  {
    "text": "console and then it'll it'll print into",
    "start": "1129760",
    "end": "1132559"
  },
  {
    "text": "console uh we can also Define a",
    "start": "1132559",
    "end": "1134559"
  },
  {
    "text": "different evaluator which uses uh the",
    "start": "1134559",
    "end": "1136720"
  },
  {
    "text": "state Monet which uh I capture it here",
    "start": "1136720",
    "end": "1140000"
  },
  {
    "text": "as two list of strings one of the list",
    "start": "1140000",
    "end": "1141600"
  },
  {
    "text": "of strings will contain uh everything",
    "start": "1141600",
    "end": "1145360"
  },
  {
    "text": "that's going to be fed in so each time I",
    "start": "1145360",
    "end": "1146880"
  },
  {
    "text": "ask for each time it read something I'm",
    "start": "1146880",
    "end": "1148799"
  },
  {
    "text": "going to give it one element off the",
    "start": "1148799",
    "end": "1149919"
  },
  {
    "text": "input list and each time I write",
    "start": "1149919",
    "end": "1151000"
  },
  {
    "text": "something I'm just going to uh",
    "start": "1151000",
    "end": "1152240"
  },
  {
    "text": "concatenate it uh or or prepend it to",
    "start": "1152240",
    "end": "1155480"
  },
  {
    "text": "the output list and then you're able to",
    "start": "1155480",
    "end": "1157960"
  },
  {
    "text": "read and write by sort of uh by just",
    "start": "1157960",
    "end": "1160840"
  },
  {
    "text": "passing in a new state and the result of",
    "start": "1160840",
    "end": "1162440"
  },
  {
    "text": "what happens when you read something or",
    "start": "1162440",
    "end": "1163720"
  },
  {
    "text": "what happens when you write",
    "start": "1163720",
    "end": "1165400"
  },
  {
    "text": "something and that exact program that we",
    "start": "1165400",
    "end": "1168120"
  },
  {
    "text": "had before the one that I to find like",
    "start": "1168120",
    "end": "1169640"
  },
  {
    "text": "two or three slides back can be run",
    "start": "1169640",
    "end": "1171640"
  },
  {
    "text": "against a dis interpreter and what so",
    "start": "1171640",
    "end": "1175679"
  },
  {
    "text": "this part just gives us uh an instance",
    "start": "1175679",
    "end": "1177679"
  },
  {
    "text": "of state that's now expecting tell me",
    "start": "1177679",
    "end": "1179120"
  },
  {
    "text": "what the initial state is and then I'll",
    "start": "1179120",
    "end": "1180760"
  },
  {
    "text": "run all your instructions against that",
    "start": "1180760",
    "end": "1183159"
  },
  {
    "text": "state and here I'm giving it this",
    "start": "1183159",
    "end": "1185159"
  },
  {
    "text": "initial State over",
    "start": "1185159",
    "end": "1187320"
  },
  {
    "text": "here and uh so we can take that exact",
    "start": "1187320",
    "end": "1189880"
  },
  {
    "text": "same program and run it against a",
    "start": "1189880",
    "end": "1191039"
  },
  {
    "text": "completely different interpreter and now",
    "start": "1191039",
    "end": "1193320"
  },
  {
    "text": "we're able to and see you see here uh",
    "start": "1193320",
    "end": "1196760"
  },
  {
    "text": "because it only read twice it didn't",
    "start": "1196760",
    "end": "1198159"
  },
  {
    "text": "actually read these two but it did it",
    "start": "1198159",
    "end": "1199720"
  },
  {
    "text": "did read these first two and then uh it",
    "start": "1199720",
    "end": "1202039"
  },
  {
    "text": "wrote hello any Scola to the",
    "start": "1202039",
    "end": "1205159"
  },
  {
    "text": "end uh and so we're taking that exact",
    "start": "1205159",
    "end": "1207240"
  },
  {
    "text": "same program and running it against a",
    "start": "1207240",
    "end": "1208360"
  },
  {
    "text": "completely different interpreter and so",
    "start": "1208360",
    "end": "1209520"
  },
  {
    "text": "you can imagine if you pass around a",
    "start": "1209520",
    "end": "1210799"
  },
  {
    "text": "bunch of these uh these ests around your",
    "start": "1210799",
    "end": "1213039"
  },
  {
    "text": "program at the very end of your program",
    "start": "1213039",
    "end": "1214919"
  },
  {
    "text": "you can say all right now for production",
    "start": "1214919",
    "end": "1216280"
  },
  {
    "text": "use we're going to run against this",
    "start": "1216280",
    "end": "1218120"
  },
  {
    "text": "interpreter and for testing use we're",
    "start": "1218120",
    "end": "1219320"
  },
  {
    "text": "going to run against this interpreter",
    "start": "1219320",
    "end": "1220600"
  },
  {
    "text": "and you can make sure everything is",
    "start": "1220600",
    "end": "1222919"
  },
  {
    "text": "good and to uh in summary uh plain",
    "start": "1222919",
    "end": "1227559"
  },
  {
    "text": "functions just allow you to read use",
    "start": "1227559",
    "end": "1228840"
  },
  {
    "text": "computation stuff that uh is fairly",
    "start": "1228840",
    "end": "1230799"
  },
  {
    "text": "common functions as values allow us to",
    "start": "1230799",
    "end": "1233039"
  },
  {
    "text": "write very highly generic combinators so",
    "start": "1233039",
    "end": "1235120"
  },
  {
    "text": "stuff like fold right stuff like map",
    "start": "1235120",
    "end": "1236480"
  },
  {
    "text": "flat map uh type parameters allows to",
    "start": "1236480",
    "end": "1239400"
  },
  {
    "text": "abstract away unnecessary details so you",
    "start": "1239400",
    "end": "1241799"
  },
  {
    "text": "don't care if it's a list of int or a",
    "start": "1241799",
    "end": "1243200"
  },
  {
    "text": "list of string when you reverse",
    "start": "1243200",
    "end": "1244880"
  },
  {
    "text": "it uh abstract time MERS allow you to",
    "start": "1244880",
    "end": "1247320"
  },
  {
    "text": "enforce the hiding of irrelevant detail",
    "start": "1247320",
    "end": "1249280"
  },
  {
    "text": "detail that sort of will still be",
    "start": "1249280",
    "end": "1250760"
  },
  {
    "text": "exposed but you don't actually want them",
    "start": "1250760",
    "end": "1252320"
  },
  {
    "text": "to know what it is higher kinds",
    "start": "1252320",
    "end": "1255799"
  },
  {
    "text": "essentially allow you for higher order",
    "start": "1255799",
    "end": "1257159"
  },
  {
    "text": "of extraction being able to extract over",
    "start": "1257159",
    "end": "1259080"
  },
  {
    "text": "things that uh you otherwise would not",
    "start": "1259080",
    "end": "1260840"
  },
  {
    "text": "be able",
    "start": "1260840",
    "end": "1262039"
  },
  {
    "text": "to and uh writing all these Ed edsl such",
    "start": "1262039",
    "end": "1265919"
  },
  {
    "text": "that you separate the structure from the",
    "start": "1265919",
    "end": "1267159"
  },
  {
    "text": "interpretation allows you to run the",
    "start": "1267159",
    "end": "1269320"
  },
  {
    "text": "exact same structure against a variety",
    "start": "1269320",
    "end": "1271559"
  },
  {
    "text": "of",
    "start": "1271559",
    "end": "1273320"
  },
  {
    "text": "interpreters and so some of the stuff",
    "start": "1273320",
    "end": "1275520"
  },
  {
    "text": "that I found was really useful when I",
    "start": "1275520",
    "end": "1276960"
  },
  {
    "text": "was uh writing or learning about this",
    "start": "1276960",
    "end": "1280279"
  },
  {
    "text": "were two related papers which",
    "start": "1280279",
    "end": "1281679"
  },
  {
    "text": "essentially talk they start from uh a",
    "start": "1281679",
    "end": "1284559"
  },
  {
    "text": "very plain Lambda calculus and then they",
    "start": "1284559",
    "end": "1286520"
  },
  {
    "text": "they slowly add on more and more type",
    "start": "1286520",
    "end": "1288080"
  },
  {
    "text": "system features and show how uh what",
    "start": "1288080",
    "end": "1290559"
  },
  {
    "text": "degrees of abstraction and polymorphism",
    "start": "1290559",
    "end": "1292440"
  },
  {
    "text": "and reuse you can get as you add more",
    "start": "1292440",
    "end": "1294279"
  },
  {
    "text": "things and there was also a really good",
    "start": "1294279",
    "end": "1296240"
  },
  {
    "text": "talk by Edward KT I think last year",
    "start": "1296240",
    "end": "1298960"
  },
  {
    "text": "that's on YouTube uh talking about how",
    "start": "1298960",
    "end": "1301400"
  },
  {
    "text": "you can achieve also a lot of code reuse",
    "start": "1301400",
    "end": "1303240"
  },
  {
    "text": "by using type",
    "start": "1303240",
    "end": "1304919"
  },
  {
    "text": "classes that's all I have",
    "start": "1304919",
    "end": "1309399"
  }
]