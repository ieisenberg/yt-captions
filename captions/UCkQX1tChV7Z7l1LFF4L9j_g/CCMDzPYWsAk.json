[
  {
    "text": "uh so my twitter handle is jim double underscore golf and that's purely because that twitter",
    "start": "4640",
    "end": "9760"
  },
  {
    "text": "handle there wasn't jim underscore golf available at the time but also i've now heard that underscore is is no longer an allowed variable name",
    "start": "9760",
    "end": "16800"
  },
  {
    "text": "in java so i think we'll keep the double underscore so a little bit about me before we get",
    "start": "16800",
    "end": "22400"
  },
  {
    "text": "started i'm a university graduate from warwick and i was really interested in compilers",
    "start": "22400",
    "end": "28480"
  },
  {
    "text": "and performance and that was kind of it that was where it ended um and then i started work going to the",
    "start": "28480",
    "end": "34239"
  },
  {
    "text": "london java community and i did a variety of different things in the ljc uh one of those was helped to",
    "start": "34239",
    "end": "40160"
  },
  {
    "text": "design and test jsr 310 which is the date time library and i was also a developer and a trainer",
    "start": "40160",
    "end": "46800"
  },
  {
    "text": "for a couple of years and whilst i was doing that i met someone called ben evans and some of you may have been in his session earlier on",
    "start": "46800",
    "end": "52960"
  },
  {
    "text": "today and we wrote this book together called optimizing java so through the connections the ljc you",
    "start": "52960",
    "end": "58480"
  },
  {
    "text": "kind of went back and yeah wrote something that was really an interest in mine it was it was a really cool book too to work on",
    "start": "58480",
    "end": "65920"
  },
  {
    "text": "my day job i work on api gateways and do things with api platforms at morgan stanley and i'm also an occasional maven hacker",
    "start": "65920",
    "end": "73119"
  },
  {
    "text": "as well so if you see various banter around maven and gradle on twitter that's why",
    "start": "73119",
    "end": "78960"
  },
  {
    "text": "so what about this talk it's actually been some excellent talks about growl vm and how it works for",
    "start": "78960",
    "end": "85119"
  },
  {
    "text": "natively creating images and compiling images and getting really good startup times i'm going to try and take it from a",
    "start": "85119",
    "end": "90799"
  },
  {
    "text": "slightly different perspective so we're going to try and look at this from the existing jvm that we use today",
    "start": "90799",
    "end": "96960"
  },
  {
    "text": "and that we know about today and we're going to look at the different pieces that are involved in the story",
    "start": "96960",
    "end": "102159"
  },
  {
    "text": "of executing java and where growl and ahead of time compilation comes in to start to complement that",
    "start": "102159",
    "end": "109119"
  },
  {
    "text": "so this is the area that we spend most of our time writing java source code and not many",
    "start": "109119",
    "end": "115040"
  },
  {
    "text": "people use java c anymore it's hidden away behind all the build tools that we use but fundamentally you're creating a",
    "start": "115040",
    "end": "121759"
  },
  {
    "text": "class fault so let's use a really simple example and this is what's going to kind of run",
    "start": "121759",
    "end": "127040"
  },
  {
    "text": "through through the talk we're going to use a very noisy hello world okay so there's not too much java code",
    "start": "127040",
    "end": "133120"
  },
  {
    "text": "to understand in here and i think the point was made earlier in the containers talk it doesn't necessarily have to be java",
    "start": "133120",
    "end": "139360"
  },
  {
    "text": "to benefit from a lot of the performance benefits at the vm level that we will talk about",
    "start": "139360",
    "end": "144800"
  },
  {
    "text": "so i have a public static void main which says print int and it does that",
    "start": "144800",
    "end": "150480"
  },
  {
    "text": "one million times and in printing i print out to error hello world and number okay so there's there's a",
    "start": "150480",
    "end": "157440"
  },
  {
    "text": "couple of things in there some people who have played around with this kind of thing before we'll be able to spot why i'm doing that but i'll kind of get",
    "start": "157440",
    "end": "163840"
  },
  {
    "text": "into the reason for that being so verbose as we go through so you take your java",
    "start": "163840",
    "end": "169760"
  },
  {
    "text": "source code you run java c and you get a class file now you can inspect what the contents of",
    "start": "169760",
    "end": "176480"
  },
  {
    "text": "the class file using java p now we're not going to go into that in too much detail in this talk there's some good",
    "start": "176480",
    "end": "181920"
  },
  {
    "text": "good sort of things on bytecode and if you're in ben's talk earlier you may have had enough byte code for one day we'll see so inside hello world you see",
    "start": "181920",
    "end": "189519"
  },
  {
    "text": "the first thing that's happened is is java c has effectively added a default constructor",
    "start": "189519",
    "end": "194720"
  },
  {
    "text": "so the default constructor running an invoke special on the object in it so that's something that java javascript has added for you into",
    "start": "194720",
    "end": "202159"
  },
  {
    "text": "your class the next thing is the main and there's lots of different like bytecode examples here where we've got",
    "start": "202159",
    "end": "208319"
  },
  {
    "text": "load the integer store it do compare against a million if it's if it's less than a million",
    "start": "208319",
    "end": "213599"
  },
  {
    "text": "carry on going and invoke static i know we still have go to's so you know all the time when we thought we got rid",
    "start": "213599",
    "end": "218879"
  },
  {
    "text": "of go to's there they're still there um the point of this slide is to really kind of",
    "start": "218879",
    "end": "223920"
  },
  {
    "text": "show you that java c as a tool it doesn't do very much right it just takes your code and",
    "start": "223920",
    "end": "229280"
  },
  {
    "text": "converts it to byte code there's not a lot of magic compilation that's going on behind the scenes like there would be",
    "start": "229280",
    "end": "235200"
  },
  {
    "text": "if you run something like gcc we will look at the printing method",
    "start": "235200",
    "end": "240799"
  },
  {
    "text": "because this is kind of curious and this is something that that ben also points out that's the disadvantage of going last all the things that you've",
    "start": "240799",
    "end": "246799"
  },
  {
    "text": "got i want to point out some of my showing you already so we get hold of the print stream and we do an invoke dynamic on something",
    "start": "246799",
    "end": "253519"
  },
  {
    "text": "called make and cat with constants so that's going on behind the scenes and then we invoke the virtual function and",
    "start": "253519",
    "end": "259519"
  },
  {
    "text": "print line two to print out the the new variable so that's kind of curious because if we were to take that away and look at the",
    "start": "259519",
    "end": "265919"
  },
  {
    "text": "same example in java 8 you'd actually see different byte code being created for the same example",
    "start": "265919",
    "end": "272320"
  },
  {
    "text": "so um if you're actually looking into the bytecode for java 8 you'll see we're creating a new string builder",
    "start": "272320",
    "end": "278479"
  },
  {
    "text": "we're correct we're then loading in the hello world and we're invoking the ad respectively on on string builder so",
    "start": "278479",
    "end": "285919"
  },
  {
    "text": "this is kind of weird like how many people in here have done the kind of like the plus operator inside a for loop and the first thing",
    "start": "285919",
    "end": "291919"
  },
  {
    "text": "you've seen in a code review is oh you should replace that with a string builder because string builders are better there because they're better",
    "start": "291919",
    "end": "297919"
  },
  {
    "text": "performance and they'll kind of you know you'll only create one object and you won't have lots of strings floating around",
    "start": "297919",
    "end": "303280"
  },
  {
    "text": "well that's kind of weird now because that just doesn't hold true at all and where you potentially would get better performance from like eight nine",
    "start": "303280",
    "end": "310080"
  },
  {
    "text": "plus you know you kind of maybe you've limited yourself so there isn't much that goes on in java c but as the",
    "start": "310080",
    "end": "315759"
  },
  {
    "text": "platform evolves you know there's different things that will will actually appear here",
    "start": "315759",
    "end": "321360"
  },
  {
    "text": "so we've got our class file so everything that happens outside the jvm we now want to effectively get it into",
    "start": "322080",
    "end": "328000"
  },
  {
    "text": "our environment so we use something called the class loader okay so this is the bit we'll talk about next",
    "start": "328000",
    "end": "333759"
  },
  {
    "text": "um the class loader plays an important part in our story because it's generally not known what's",
    "start": "333759",
    "end": "340320"
  },
  {
    "text": "going to happen when the jvm starts up okay so in java classes are loaded just",
    "start": "340320",
    "end": "346160"
  },
  {
    "text": "before they're needed and you've probably seen this when you've seen a class not found exception",
    "start": "346160",
    "end": "352320"
  },
  {
    "text": "no class defined error or maybe you don't see that because your build tool is amazing and it hides that away from",
    "start": "352320",
    "end": "357440"
  },
  {
    "text": "you i see a lot of last no we still see that i can still see that coming out so what happens is that class file it",
    "start": "357440",
    "end": "363919"
  },
  {
    "text": "gets mapped into a class object with a k and this is the this is the c plus representation and the instance methods",
    "start": "363919",
    "end": "371039"
  },
  {
    "text": "are held in the class v table and then you get static variables that initialize what initialized once",
    "start": "371039",
    "end": "376319"
  },
  {
    "text": "and held in the instance class with a k again so we'll you know that's kind of an interesting representation",
    "start": "376319",
    "end": "382319"
  },
  {
    "text": "the main thing that we're doing here then is taking what was in in effect of your class file and mapping it",
    "start": "382319",
    "end": "387520"
  },
  {
    "text": "mapping it into what is effectively like a cache of your methods and your static data",
    "start": "387520",
    "end": "393360"
  },
  {
    "text": "that you'll then run in interpreted mode now one way i want to try and show you that",
    "start": "393360",
    "end": "399039"
  },
  {
    "text": "class loading is a little bit magical is actually by writing a custom class loader this is something that you can do",
    "start": "399039",
    "end": "405199"
  },
  {
    "text": "there's various different implementations that people have of this and hopefully",
    "start": "405199",
    "end": "411039"
  },
  {
    "text": "this will all work fine live demos and all um so this is something i've got on github happy to tap to use it and play around",
    "start": "411039",
    "end": "417120"
  },
  {
    "text": "with it if you like it does a couple of things there's a couple of weird things actually",
    "start": "417120",
    "end": "422319"
  },
  {
    "text": "and this is deliberate because i used to use this to teach java class loaders so what what the functionality is you",
    "start": "422319",
    "end": "428080"
  },
  {
    "text": "take a java file and you drag it into the classes folder and inside",
    "start": "428080",
    "end": "433199"
  },
  {
    "text": "the class loader it uses some of the tooling to actually run java c from inside the java process so",
    "start": "433199",
    "end": "439919"
  },
  {
    "text": "it takes the java file it compiles it to a class file and then it loads it into your system",
    "start": "439919",
    "end": "445120"
  },
  {
    "text": "so it cannot know anything about the class that's the thing i try to get across you can't know anything about it so let's have a look",
    "start": "445120",
    "end": "453039"
  },
  {
    "text": "we'll hit play okay let's move that slightly",
    "start": "453039",
    "end": "459440"
  },
  {
    "text": "my clicking skills are off today okay and i've set up this watch it's watching the file and i've put some reflection code in",
    "start": "461039",
    "end": "467759"
  },
  {
    "text": "here of course because it wouldn't be a java demo about a little bit of reflection uh so we do demo",
    "start": "467759",
    "end": "473199"
  },
  {
    "text": "and class not found okay so we've if you haven't seen one of those there's your first one i'm sure sure that's definitely been seen before",
    "start": "473199",
    "end": "479360"
  },
  {
    "text": "and what i'm going to do is i'm going to take this demo.java file which is just effectively get a returns 42 and a setter and i'm",
    "start": "479360",
    "end": "487120"
  },
  {
    "text": "going to copy that into this classes folder here cannot paste selected elements okay well let's just try and drag it then",
    "start": "487120",
    "end": "494319"
  },
  {
    "text": "cool and",
    "start": "494319",
    "end": "498879"
  },
  {
    "text": "if this has worked which is looking like it might not do now oh there we go yes end of the day laptop's slow",
    "start": "499759",
    "end": "506560"
  },
  {
    "text": "everything's running so i need a new mac if anybody's watching wants to buy me one and it's going i've attempted to load",
    "start": "506560",
    "end": "512399"
  },
  {
    "text": "demo.java what is this thing and then it's compiled it to a class file and now the class is loaded",
    "start": "512399",
    "end": "518000"
  },
  {
    "text": "and so if i go in here and type in demo i can now see that i've got get a and set a",
    "start": "518000",
    "end": "523440"
  },
  {
    "text": "now i showed this in as an example in a presentation and somebody said cool so that means i can write java code",
    "start": "523440",
    "end": "529519"
  },
  {
    "text": "and put it into the jvm runtime and nobody will know anything about it from production controls it's like",
    "start": "529519",
    "end": "534640"
  },
  {
    "text": "maybe we want to step away from that slightly um i know as you can see it's really just created the dot class file so",
    "start": "534640",
    "end": "541279"
  },
  {
    "text": "java c it's not that smart you can you can use it in lots of smart ways but there's more to the story and",
    "start": "541279",
    "end": "547120"
  },
  {
    "text": "actually the biggest part of the java story starts after class loaders",
    "start": "547120",
    "end": "553680"
  },
  {
    "text": "interpreting so this is actually if you were to go to a talk 20 years ago maybe a bit longer about",
    "start": "553839",
    "end": "560240"
  },
  {
    "text": "java you'd probably be in one of the talks where why java is really slow okay and this is where this it kind of got its reputation",
    "start": "560240",
    "end": "566399"
  },
  {
    "text": "for being quite slow was that it was originally just an interpreted language",
    "start": "566399",
    "end": "571839"
  },
  {
    "text": "lots of work has gone on in in the background to sort of improve that performance and we'll talk about some of those techniques",
    "start": "571839",
    "end": "578399"
  },
  {
    "text": "um as we go along so initially your byte code fully interpreted okay and i'm gonna i'm",
    "start": "578399",
    "end": "584880"
  },
  {
    "text": "gonna say fully interpreted now because there's so many options to change that behavior but in the",
    "start": "584880",
    "end": "589920"
  },
  {
    "text": "default jit compile java jvm is it's not there's fully interpreted by code to start with",
    "start": "589920",
    "end": "596000"
  },
  {
    "text": "now you have this conversion of instructions to machine instructions which uses a template interpreter and",
    "start": "596000",
    "end": "602160"
  },
  {
    "text": "there was a great talk by someone called alex blewett um about hotspot under the hood uh which which",
    "start": "602160",
    "end": "607440"
  },
  {
    "text": "goes into a lot of detail if you're interested in how to take bicone instructions and convert them into instructions on the fly now the idea is",
    "start": "607440",
    "end": "616160"
  },
  {
    "text": "is that you don't spend time compiling code that you only use the one one or two times and think of",
    "start": "616160",
    "end": "622000"
  },
  {
    "text": "traditional applications like spring where when you start the application it's doing lots of reflection it's kind",
    "start": "622000",
    "end": "627040"
  },
  {
    "text": "of trying to boot up your application a lot of those methods maybe just used a handful of time a handful of times",
    "start": "627040",
    "end": "633360"
  },
  {
    "text": "so there's maybe not not any benefit to compiling them at the beginning i will talk about you know the benefits",
    "start": "633360",
    "end": "638959"
  },
  {
    "text": "you get from compiling everything up front versus at runtime as we get through this talk there is kind of a",
    "start": "638959",
    "end": "644399"
  },
  {
    "text": "you know there's a trade-off as of everything there's there's no free lunch now what interpreting allows us to do is",
    "start": "644399",
    "end": "651120"
  },
  {
    "text": "it allows us to monitor the behavior of our application and make decisions on how we're going to compile",
    "start": "651120",
    "end": "657839"
  },
  {
    "text": "and how we're going to apply some critical optimizations which are going to improve the performance of our java code",
    "start": "657839",
    "end": "665040"
  },
  {
    "text": "cool that's where it gets interesting because we've got this information so",
    "start": "665040",
    "end": "670560"
  },
  {
    "text": "what do we do with it well there's a thing called the jit compiler so what the jig compiler does or c2 compiler if we're going to be",
    "start": "670560",
    "end": "677519"
  },
  {
    "text": "specific for the hotspot example um it observes the code as it's been executing and",
    "start": "677519",
    "end": "682720"
  },
  {
    "text": "please don't confuse this with like complicated profilings there's lots of profiling that exists this is purely tracing through like the",
    "start": "682720",
    "end": "688560"
  },
  {
    "text": "invocations that you've done it captures some various different counts um and then you trigger a compilation when you meet",
    "start": "688560",
    "end": "695040"
  },
  {
    "text": "a threshold so everything is done on a method by method level and we'll kind of explore that through one of the examples that",
    "start": "695040",
    "end": "701279"
  },
  {
    "text": "we'll look at and essentially you're trying to find the hot points in your application where",
    "start": "701279",
    "end": "706880"
  },
  {
    "text": "you'll benefit from potentially bringing some of the bytecode together eliminating some pieces before when you actually bring",
    "start": "706880",
    "end": "712000"
  },
  {
    "text": "out your compiled instruction at the end so utilizing that profile is really key",
    "start": "712000",
    "end": "719839"
  },
  {
    "text": "like at the beginning as we've just seen with that example java doesn't necessarily know anything about what you're trying to do",
    "start": "719839",
    "end": "725440"
  },
  {
    "text": "and that's intentional because you know things that pull in from anywhere you don't it genuinely doesn't know and",
    "start": "725440",
    "end": "731360"
  },
  {
    "text": "we want to emit essentially our machine code instructions to replace the byte code that we started up with so applications",
    "start": "731360",
    "end": "738720"
  },
  {
    "text": "running byte code has been interpreted something's been used a lot you take that to one side you asynchronously",
    "start": "738720",
    "end": "744560"
  },
  {
    "text": "dispatch it onto another thread and say compile me this method and it goes in the background it compiles it",
    "start": "744560",
    "end": "749839"
  },
  {
    "text": "and when it's ready it'll do some pointer swiddling and it'll replace that in the running in the running application",
    "start": "749839",
    "end": "755920"
  },
  {
    "text": "so at the moment or at least kind of historically our main option for jit compilation has been the c2 compiler",
    "start": "755920",
    "end": "762959"
  },
  {
    "text": "okay which is the second level of compilation so we're talking about server mode compilation um and it's implemented in c plus plus",
    "start": "762959",
    "end": "770800"
  },
  {
    "text": "okay so a lot of when we're talking about java and it being slow it's you know the main so the engine that's doing all the",
    "start": "770800",
    "end": "776560"
  },
  {
    "text": "compilation uh historically has been written in c plus plus but there are challenges with c plus",
    "start": "776560",
    "end": "783920"
  },
  {
    "text": "plus now got to kind of like paint a little bit of a picture here because you know we've got we've got quite far",
    "start": "783920",
    "end": "789360"
  },
  {
    "text": "with what we have but what kind of things do we see when we try and build c plus plus maybe from 20 years ago as an",
    "start": "789360",
    "end": "795040"
  },
  {
    "text": "example well you've got this problem that is unsafe okay so if you've um",
    "start": "795040",
    "end": "800160"
  },
  {
    "text": "if you've ever worked with c plus plus and you kind of like go and you accidentally reference something or you",
    "start": "800160",
    "end": "805760"
  },
  {
    "text": "you've removed something you end up in a situation where you get a segmentation fault okay i'm not going to say you don't get those in",
    "start": "805760",
    "end": "812079"
  },
  {
    "text": "java because i certainly remember times that when you do and actually that's probably down to like partly the unsafe nature",
    "start": "812079",
    "end": "818480"
  },
  {
    "text": "of the language behind the scenes and partly that's because there's a mixture of the pointers that are used in c plus",
    "start": "818480",
    "end": "824800"
  },
  {
    "text": "and within the compiler and what we call an ordinary object pointer or an oop and that's what's used to represent an",
    "start": "824800",
    "end": "830959"
  },
  {
    "text": "object instance in c plus plus that's actually allocated in java essentially so it means it's",
    "start": "830959",
    "end": "836160"
  },
  {
    "text": "managed by uh the garbage collector okay so if it's managed by the garbage collector and you then go and delete it and then java",
    "start": "836160",
    "end": "842399"
  },
  {
    "text": "tries to delete it things go really bad now this dialect of c plus is also",
    "start": "842399",
    "end": "849199"
  },
  {
    "text": "legacy now this this is just for the recording this isn't say c plus plus legacy because um i know straw stroke quite well and",
    "start": "849199",
    "end": "855760"
  },
  {
    "text": "he'll probably tell me off for that but what i what i mean by legacy is is this dialect it's very difficult to maintain",
    "start": "855760",
    "end": "860959"
  },
  {
    "text": "and it's it's not kind of like modern c plus plus 11 14 17. it's it's much much sort of older than that",
    "start": "860959",
    "end": "867199"
  },
  {
    "text": "and there is actually custom memory allocation and mallet processes have been written in the background for for the libraries",
    "start": "867199",
    "end": "874240"
  },
  {
    "text": "and again the legacy kind of points to the user of trying to take those two languages and put them together",
    "start": "874240",
    "end": "880480"
  },
  {
    "text": "also the tooling is a little bit tricky with c plus plus and especially this old dialect as well and that kind of combines to make it",
    "start": "880480",
    "end": "886880"
  },
  {
    "text": "difficult to make changes so what we're actually saying is a story that happened 20 years ago",
    "start": "886880",
    "end": "892399"
  },
  {
    "text": "when we started using java in the first place like a lot of these problems that we were talking about on the slide",
    "start": "892399",
    "end": "898079"
  },
  {
    "text": "was you know java was always this blue color language to replace c plus plus um or sort of help with those",
    "start": "898079",
    "end": "903440"
  },
  {
    "text": "those problems that weren't needing uh deterministic performance okay and actually now we've got the similar",
    "start": "903440",
    "end": "909120"
  },
  {
    "text": "problems inside uh the jvm itself so the one thing to say is though you",
    "start": "909120",
    "end": "915360"
  },
  {
    "text": "know it's been built upon over 20 years it's really awesome piece of engineering um but now there's a couple of other",
    "start": "915360",
    "end": "920800"
  },
  {
    "text": "things like when we originally had java and the jvm it was all about java there are so many other dynamic",
    "start": "920800",
    "end": "925920"
  },
  {
    "text": "languages that are running now on the jvm that you know kind of changes the story a little bit and some of the stuff that",
    "start": "925920",
    "end": "931199"
  },
  {
    "text": "we you know want to be able to alter it becomes very difficult so the other side of this is that java's",
    "start": "931199",
    "end": "936880"
  },
  {
    "text": "now fast enough to be a compiler in its own right which is also kind of cool",
    "start": "936880",
    "end": "942319"
  },
  {
    "text": "so how do we get this into the application i mean it's still is this great we've got this uh we've got a c2 compiler but what do we",
    "start": "942959",
    "end": "949120"
  },
  {
    "text": "do here and this is where and this idea of the jvm compiler interface comes in so the jvm",
    "start": "949120",
    "end": "956320"
  },
  {
    "text": "compiler interface is a mechanism that allows you to replace the compiler",
    "start": "956320",
    "end": "962000"
  },
  {
    "text": "within the jvm all right so this is kind of where we can now potentially use you know either the c plus one or we can use",
    "start": "962000",
    "end": "968639"
  },
  {
    "text": "something written in java okay so that's where we start to see a bit of a difference in the story that we wouldn't have had if i was",
    "start": "968639",
    "end": "974480"
  },
  {
    "text": "presenting this three or four years ago so what does the jvm compiler interface",
    "start": "974480",
    "end": "979920"
  },
  {
    "text": "actually do well it gives you access to vm structures so that the compiler can see",
    "start": "979920",
    "end": "985040"
  },
  {
    "text": "things like the fields the methods and that profile information that you've captured and then it gives you a mechanism which",
    "start": "985040",
    "end": "991600"
  },
  {
    "text": "you can use to install the code that you compile using the compiler now it's kind of interesting because when you start to think about",
    "start": "991600",
    "end": "997839"
  },
  {
    "text": "well what is a compiler what is it what does the interface actually look like and fundamentally it's a method that",
    "start": "997839",
    "end": "1004160"
  },
  {
    "text": "takes a byte stream and returns a byte stream so its interface is kind of simple but what it does behind the scenes is then",
    "start": "1004160",
    "end": "1010000"
  },
  {
    "text": "you know fairly fairly fairly interesting and what the idea is is that you're producing you know machine code at the method",
    "start": "1010000",
    "end": "1016240"
  },
  {
    "text": "level and there's the use of jep261 as well the modules to kind of do some of the security and isolation",
    "start": "1016240",
    "end": "1022079"
  },
  {
    "text": "parts especially with the growl implementation so kind of the security becomes an interesting point when you start saying",
    "start": "1022079",
    "end": "1028000"
  },
  {
    "text": "i'm going to just plug in some code and run it on java that's for obvious reasons",
    "start": "1028000",
    "end": "1033839"
  },
  {
    "text": "so what about growl okay so growl is kind of an interesting and again like",
    "start": "1033839",
    "end": "1039360"
  },
  {
    "text": "i say we've been looking at growlers of vm what i'm going to show you is we're actually going to debug through some compiler code so you can see the the",
    "start": "1039360",
    "end": "1046400"
  },
  {
    "text": "part of growl that we use here which is the basically grail compiler to generate um effectively these machine",
    "start": "1046400",
    "end": "1052640"
  },
  {
    "text": "code instructions now it fundamentally like in terms of how the jit compilation is working it's not",
    "start": "1052640",
    "end": "1059200"
  },
  {
    "text": "doing anything super revolutionary like the structure uh you may have heard like the term c of nodes and the idea that you take",
    "start": "1059200",
    "end": "1065200"
  },
  {
    "text": "effectively a graph that represents your your program as it's running and then you provide you so you do",
    "start": "1065200",
    "end": "1070400"
  },
  {
    "text": "optimizations to that graph essentially and then you take the output graph and emit that that into actually the actual",
    "start": "1070400",
    "end": "1075919"
  },
  {
    "text": "machine code itself so it uses a combination of what's actually going on what does a profile look like it runs",
    "start": "1075919",
    "end": "1082000"
  },
  {
    "text": "for a series of phases and then you end up with your output output code which is",
    "start": "1082000",
    "end": "1087039"
  },
  {
    "text": "a lot quicker than being interpreted okay now implementing a jit in java is",
    "start": "1087039",
    "end": "1092799"
  },
  {
    "text": "actually a fairly compelling story you've got language level safety and expressions and it's pretty easy to",
    "start": "1092799",
    "end": "1097919"
  },
  {
    "text": "debug which i'm hopefully going to show you it's quite easy to debug but we'll see how the demo goes there's lots of really good tools and",
    "start": "1097919",
    "end": "1104160"
  },
  {
    "text": "great ide support because ultimately it's using all of the java stuff that you probably use for your day-to-day",
    "start": "1104160",
    "end": "1109840"
  },
  {
    "text": "development so how do you get started with this okay so if you if you wanted to do i'm going",
    "start": "1109840",
    "end": "1116640"
  },
  {
    "text": "to write a post on on all the different steps that you you would have to take um but effectively there's a command",
    "start": "1116640",
    "end": "1122240"
  },
  {
    "text": "line tool for graph called mx now what the mx tool does is it effectively allows you to run",
    "start": "1122240",
    "end": "1128320"
  },
  {
    "text": "builds of the graph compiler in the example that i'm using so i've pulled in the growl vm project",
    "start": "1128320",
    "end": "1133919"
  },
  {
    "text": "locally onto my laptop and i'm working specifically as i mentioned within that compiler sort of",
    "start": "1133919",
    "end": "1139280"
  },
  {
    "text": "area what you can do then is you can run mx build which will build you the graph compiler and give you effectively a jar",
    "start": "1139280",
    "end": "1145919"
  },
  {
    "text": "file and you can also use the ide in it and if you're going to do the debugging stuff that just makes it super easy",
    "start": "1145919",
    "end": "1152640"
  },
  {
    "text": "and then what you can do is you can run my mx minus dvm so what this is basically saying is i",
    "start": "1152640",
    "end": "1158640"
  },
  {
    "text": "want to run a vm and i want you to install effectively the graph compiler that's",
    "start": "1158640",
    "end": "1164320"
  },
  {
    "text": "local so you'll actually see then it replace and put it in i'm not going to run through all those steps",
    "start": "1164320",
    "end": "1169679"
  },
  {
    "text": "in the demo because it's it's not it's my laptop's holder it's not the fastest of things to get working and so i've got a bunch",
    "start": "1169679",
    "end": "1176640"
  },
  {
    "text": "of options of course so i'm unlocking the experimental vm option i'm going to enable the jvm",
    "start": "1176640",
    "end": "1184160"
  },
  {
    "text": "compiler interface and i'm going to use the jvm compiler interface as well so that's going to give me essentially the jit running in growl so",
    "start": "1184160",
    "end": "1191360"
  },
  {
    "text": "if you were to run that on open jdk 13 you would be running the gel sorry the growl uh the",
    "start": "1191360",
    "end": "1196640"
  },
  {
    "text": "the compiler in the background because that's all kind of like shipping with java now",
    "start": "1196640",
    "end": "1201679"
  },
  {
    "text": "and actually just to limit the scope of what we're doing i'm going to say i only want to compile",
    "start": "1201679",
    "end": "1208320"
  },
  {
    "text": "hello world and system error print line okay and there's a reason for that and i'm going",
    "start": "1208320",
    "end": "1213600"
  },
  {
    "text": "to show you why that happens when when we finish doing the debug i'm also passing in a parameter to say",
    "start": "1213600",
    "end": "1219440"
  },
  {
    "text": "dump out everything that growl is doing and that's for another tool that we'll look at too so there is a tool that also ships it's",
    "start": "1219440",
    "end": "1225440"
  },
  {
    "text": "an oracle enterprise tool called ideal graph visualizer and this allows you to observe the compilation",
    "start": "1225440",
    "end": "1232000"
  },
  {
    "text": "sea of nodes at the different phases that you go through so we're going to explore something",
    "start": "1232000",
    "end": "1237600"
  },
  {
    "text": "called inlining okay and if you've not heard of inlining before um in c plus plus there's a",
    "start": "1237600",
    "end": "1243039"
  },
  {
    "text": "keyword called inline and it is kind of like up to the compiler whether it starts to pull things in together",
    "start": "1243039",
    "end": "1248640"
  },
  {
    "text": "the inlining keyword in java is sorry the inlining mechanism in java is different to supplying a keyword it's different to",
    "start": "1248640",
    "end": "1254960"
  },
  {
    "text": "the inline keyword as well and what it does is it allows you to explore the current execution chain",
    "start": "1254960",
    "end": "1260960"
  },
  {
    "text": "and look at opportunities to bring those methods together so if you think about what happens in",
    "start": "1260960",
    "end": "1266000"
  },
  {
    "text": "our example we call printing that moves up the stack frame pointer it has to have all the locals the return",
    "start": "1266000",
    "end": "1272559"
  },
  {
    "text": "addresses and the parameters and then when we call print line it does the same again so you end up invoking and expanding your stack frame",
    "start": "1272559",
    "end": "1279440"
  },
  {
    "text": "and then when you when you come back you essentially collapse those away so looking for opportunities to inline is",
    "start": "1279440",
    "end": "1284720"
  },
  {
    "text": "one of the biggest performance wins that you can get in a java application",
    "start": "1284720",
    "end": "1290640"
  },
  {
    "text": "and then effectively you end up with the bytecode all all chunked together the machine code that comes out of it all chunked together",
    "start": "1290640",
    "end": "1296640"
  },
  {
    "text": "so let's have a look and we'll step through some of this",
    "start": "1296640",
    "end": "1300559"
  },
  {
    "text": "okay so i'm going to fire up this debug example it just has exactly the same output that's on the slides just so i",
    "start": "1302720",
    "end": "1309360"
  },
  {
    "text": "don't end up typing something completely wrong and it's now waiting for my ide to connect",
    "start": "1309360",
    "end": "1315039"
  },
  {
    "text": "so i'm just going to go over to intellij and into here um just so you just so you know the",
    "start": "1315039",
    "end": "1320720"
  },
  {
    "text": "growl compiler doesn't have lots of arbitrary system.out.printlines in that's me adding things into here just to kind of",
    "start": "1320720",
    "end": "1326799"
  },
  {
    "text": "like show us an example so um this is the first thing so i've got a compilation request so the jvm has",
    "start": "1326799",
    "end": "1332320"
  },
  {
    "text": "gone oh there's something interesting here for you to compile and we can see down at the bottom that that's the printing",
    "start": "1332320",
    "end": "1337840"
  },
  {
    "text": "function so the printing function is is being is effectively the one that we're looking at and if we look at our bigger display and",
    "start": "1337840",
    "end": "1344720"
  },
  {
    "text": "output that's that's effectively what's happening there so we can start to have a look and we'll just spend a couple of minutes exploring",
    "start": "1344720",
    "end": "1350880"
  },
  {
    "text": "this just so you can get an idea of how you can go in and actually just debug the compiler",
    "start": "1350880",
    "end": "1356559"
  },
  {
    "text": "so we can step into the compile method and what really happens then is there's a bunch of uh there's a bunch of sort of",
    "start": "1356559",
    "end": "1362159"
  },
  {
    "text": "startup that goes on so we have a check to see um if you know if it's if we're shutting down we grab hold of",
    "start": "1362159",
    "end": "1369120"
  },
  {
    "text": "the method we kind of wrap up the task inside of inside a compilation task",
    "start": "1369120",
    "end": "1374159"
  },
  {
    "text": "um we do some setup and some debug and then eventually we get down to actually running the compilation",
    "start": "1374159",
    "end": "1379520"
  },
  {
    "text": "so if we actually look at the thread monitoring on the left here you can see that i'm in the jvmci compiler thread",
    "start": "1379520",
    "end": "1385520"
  },
  {
    "text": "so this is separate to the essentially the running application so it will be paused obviously in the background while i'm doing this because",
    "start": "1385520",
    "end": "1391120"
  },
  {
    "text": "it's just debug mode and but if you run your application normally other things would still be it would still be being interpreted even",
    "start": "1391120",
    "end": "1397360"
  },
  {
    "text": "though you're asking for it to be compiled so you can have a look in here we grab",
    "start": "1397360",
    "end": "1403280"
  },
  {
    "text": "hold of the uh runtime compiler so we kind of could step through this a little bit um it has a look to see if this is on",
    "start": "1403280",
    "end": "1409280"
  },
  {
    "text": "stack replacement if it's on stack replacement that means you're in a look first time there we go that's the best",
    "start": "1409280",
    "end": "1416400"
  },
  {
    "text": "demo i've ever done the the sellotapes only only last for like three days exactly",
    "start": "1416400",
    "end": "1422500"
  },
  {
    "text": "[Laughter] um cool cool i think it's just the heat coming off my laptop probably has melted",
    "start": "1422500",
    "end": "1428240"
  },
  {
    "text": "the tape at the back there um so okay cool so we go through here and",
    "start": "1428240",
    "end": "1433520"
  },
  {
    "text": "we're just effectively creating the the wrapper for running this compilation um we'll just go into this next piece",
    "start": "1433520",
    "end": "1440000"
  },
  {
    "text": "because we start to get to something a little bit more interesting uh we'll skip over this part",
    "start": "1440000",
    "end": "1446960"
  },
  {
    "text": "into the actual compiler okay so this is where we start to see the first part of what i was talking about",
    "start": "1446960",
    "end": "1453760"
  },
  {
    "text": "so the first thing that happens is we create that graph so the the idea of the graph that's",
    "start": "1453760",
    "end": "1458880"
  },
  {
    "text": "basically the bar the the byte code and how it all connects together so we grab hold of that that's the first",
    "start": "1458880",
    "end": "1464480"
  },
  {
    "text": "thing we do it takes a little bit of a while to to process that piece um we get a compilation result and then",
    "start": "1464480",
    "end": "1470159"
  },
  {
    "text": "we can go into the actual compilation uh here so the thing that's interesting then is uh the actual",
    "start": "1470159",
    "end": "1476080"
  },
  {
    "text": "the actual compilation phase and i'm not going to go we'll just look at inlining in detail and not kind of the pieces",
    "start": "1476080",
    "end": "1481120"
  },
  {
    "text": "around it um but here you can see that there are the main things that actually get processed so you've got this idea of",
    "start": "1481120",
    "end": "1486880"
  },
  {
    "text": "sweets and the compilation suites are the different effectively the different phases that we're going to go through so",
    "start": "1486880",
    "end": "1492880"
  },
  {
    "text": "we've got this idea of high tier mid tier and low tier and i'll show you a slide that will kind of expand out on what each of those",
    "start": "1492880",
    "end": "1499200"
  },
  {
    "text": "things do we have our profiling info so that's the profile information that we we mentioned",
    "start": "1499200",
    "end": "1505120"
  },
  {
    "text": "that it needs in order to actually do the compilation and then we've got some some options here as well so you",
    "start": "1505120",
    "end": "1511520"
  },
  {
    "text": "actually see that if we step through this it effectively goes through and it applies all the different phases",
    "start": "1511520",
    "end": "1516880"
  },
  {
    "text": "so actually if you go into your id and just type in phase you'll see all the different phases that are there so the one that i've kind of highlighted",
    "start": "1516880",
    "end": "1523440"
  },
  {
    "text": "for us for us to look at is going to be the inlining phase now the interesting thing here is is that",
    "start": "1523440",
    "end": "1528960"
  },
  {
    "text": "before we go to the inlining phase there's two things that are happening there's this idea of front-end compilation and back-end so the",
    "start": "1528960",
    "end": "1535200"
  },
  {
    "text": "front-end compilation is basically taking that sea of nodes and canonicalizing it applying all the",
    "start": "1535200",
    "end": "1540880"
  },
  {
    "text": "optimizations and then you get the nice tree that's what you want to compile effectively and then the back",
    "start": "1540880",
    "end": "1545919"
  },
  {
    "text": "end emitter is what then converts it into the target platform that you've got running so for me that will be the amd mac one",
    "start": "1545919",
    "end": "1553039"
  },
  {
    "text": "essentially so if we go on we'll see that we get into inlining data",
    "start": "1553039",
    "end": "1559120"
  },
  {
    "text": "and that's that's actually the inside the inlining phase so you can go and have a look at the phases and what they're doing",
    "start": "1559120",
    "end": "1566320"
  },
  {
    "text": "we can we can have a look through this and see what actually goes on so we go into um effectively looking and",
    "start": "1566320",
    "end": "1572640"
  },
  {
    "text": "traversing through the different nodes that are available so we we asked if um something was inlined as a ball to check",
    "start": "1572640",
    "end": "1578640"
  },
  {
    "text": "but the actual is kind of interesting all of the behavior is within the actual data node itself which is the",
    "start": "1578640",
    "end": "1584799"
  },
  {
    "text": "inlining data which is kind of you know nice and encapsulated and all those other good things that we wanted",
    "start": "1584799",
    "end": "1589919"
  },
  {
    "text": "to see so if we pop into here we can have a look and we can see that it basically",
    "start": "1589919",
    "end": "1594960"
  },
  {
    "text": "goes through and it captures what the current invocation is um and as we go as we go through this function",
    "start": "1594960",
    "end": "1601120"
  },
  {
    "text": "we'll see that it asks if i should go into the next invoke so what you end up doing is going through having a look",
    "start": "1601120",
    "end": "1607760"
  },
  {
    "text": "and then you capture why capture what the call site holder is and then what the invoke target was as",
    "start": "1607760",
    "end": "1613520"
  },
  {
    "text": "well and if you've got some info as part of this if you get inline info then you can potentially look at doing",
    "start": "1613520",
    "end": "1619679"
  },
  {
    "text": "the inlining okay so what i'll do is i'll just press play here and just to allow it to go through and we'll",
    "start": "1619679",
    "end": "1626640"
  },
  {
    "text": "just have a quick look at the output we're omitting the back end there and it installs it into the code cache",
    "start": "1626640",
    "end": "1633279"
  },
  {
    "text": "and that's just returning out and then we're actually going to look at the hello main just very briefly",
    "start": "1633279",
    "end": "1638320"
  },
  {
    "text": "so what we can see here is then is that we step through each of the different phases we looked at print line we looked",
    "start": "1638320",
    "end": "1644480"
  },
  {
    "text": "at print in but we made a decision not too effectively in line at this stage okay so that decision is kind of an",
    "start": "1644480",
    "end": "1650399"
  },
  {
    "text": "interesting one because it's going to probably have more effect if we inline it directly into main rather than trying to do some inlining",
    "start": "1650399",
    "end": "1656640"
  },
  {
    "text": "here also the other thing that's interesting is print line itself can't be inlined so it's kind of going well i can't do",
    "start": "1656640",
    "end": "1662000"
  },
  {
    "text": "anything at this stage now one of the things that you're seeing here you might be wondering where's all the rest of the stuff",
    "start": "1662000",
    "end": "1668159"
  },
  {
    "text": "and because i've told the compiler to limit to just those two things it's not actually going along the print",
    "start": "1668159",
    "end": "1674320"
  },
  {
    "text": "line chain which has a load of other buffers and other things that we could in line i'll show you that in a second",
    "start": "1674320",
    "end": "1680960"
  },
  {
    "text": "so if we jump back over through this then and we're just going to skip through the compilation pieces uh we end up in a situation where we",
    "start": "1680960",
    "end": "1688480"
  },
  {
    "text": "actually have something that we can in line and it's essentially what you get is it goes through it can do the inline",
    "start": "1688480",
    "end": "1695360"
  },
  {
    "text": "and then it will start to to process that and output the effect of the corresponding byte code so you get the decision then from the",
    "start": "1695360",
    "end": "1701760"
  },
  {
    "text": "policy that it should in line and then behind the scenes it actually goes in it canonicalizes the nodes and",
    "start": "1701760",
    "end": "1708080"
  },
  {
    "text": "then pulls all effectively all of that graph or all of that chain and methods together um i can't remember i think i've left",
    "start": "1708080",
    "end": "1714320"
  },
  {
    "text": "the last debug in but if not we'll return to the slides um which kind of shows you the the byte the sorry the machine code",
    "start": "1714320",
    "end": "1722840"
  },
  {
    "text": "itself let's see if it's there okay so the this is where we're",
    "start": "1722840",
    "end": "1727919"
  },
  {
    "text": "emitting the back end um so we can have a look at uh",
    "start": "1727919",
    "end": "1734480"
  },
  {
    "text": "whereabouts are we yeah so you can see there we've got the amd64 uh that's the hotspot back end and and",
    "start": "1734480",
    "end": "1740799"
  },
  {
    "text": "we can if we step through that we should be able to see the compilation result",
    "start": "1740799",
    "end": "1746320"
  },
  {
    "text": "and inside here you can see all things like the source mapping the data section itself which has got",
    "start": "1746320",
    "end": "1751600"
  },
  {
    "text": "inside it all of the different pieces so you can actually go in and you can go and look at all those things and it's kind of quite nice",
    "start": "1751600",
    "end": "1758559"
  },
  {
    "text": "however you know i should i should have started this by saying you probably won't want to do this that often so you probably may just want to see what",
    "start": "1758559",
    "end": "1764080"
  },
  {
    "text": "decisions the compiler has made behind the scenes and what we'll have a look at",
    "start": "1764080",
    "end": "1769279"
  },
  {
    "text": "is i have another script in here which does the example inline which is kind of without",
    "start": "1769279",
    "end": "1776159"
  },
  {
    "text": "i've taken off the compilation limit so it's going to go through and effectively run run the whole thing",
    "start": "1776159",
    "end": "1782000"
  },
  {
    "text": "so if we do example inline and we pipe that into a less",
    "start": "1782000",
    "end": "1787120"
  },
  {
    "text": "then what we will see is that you actually have um maybe i'll",
    "start": "1787120",
    "end": "1794320"
  },
  {
    "text": "just make it slightly smaller so it fits you'll see that actually you",
    "start": "1794320",
    "end": "1799600"
  },
  {
    "text": "start to invoke a lot more from so you've got main you've got print stream and you can see that that affected that list going down",
    "start": "1799600",
    "end": "1805840"
  },
  {
    "text": "now what's kind of interesting um if you run this with effectively no",
    "start": "1805840",
    "end": "1811520"
  },
  {
    "text": "limits turned on so i've not got any i've turned off like don't just compile this stuff just go go knock yourself out you actually",
    "start": "1811520",
    "end": "1818080"
  },
  {
    "text": "start to see something quite interesting so you end up in a situation where",
    "start": "1818080",
    "end": "1823200"
  },
  {
    "text": "all these kind of odd things start to get compiled so you can see um i said they're not really that odd because we're familiar with them in java",
    "start": "1823200",
    "end": "1829760"
  },
  {
    "text": "but i certainly didn't have any hash maps in my application okay so what's going on there and",
    "start": "1829760",
    "end": "1834880"
  },
  {
    "text": "actually if i go have a look and see if there is any hello world um there's nothing it still might",
    "start": "1834880",
    "end": "1840080"
  },
  {
    "text": "decided to inline things but that's for something else so the reason why this is happening and the reason why you see all this",
    "start": "1840080",
    "end": "1846559"
  },
  {
    "text": "is because growl is actually compiling itself so one of the things that you sometimes see when you're using grail",
    "start": "1846559",
    "end": "1852399"
  },
  {
    "text": "as a compiler as a jit compiler because it's in java obviously it's interpreted and if it's interpreted you need to compile it to",
    "start": "1852399",
    "end": "1859200"
  },
  {
    "text": "make it quicker so what does it compiles it well it compiles itself so you end up with this kind of slow down at the beginning while",
    "start": "1859200",
    "end": "1865200"
  },
  {
    "text": "the compiler is compiling itself and actually it never got to compiling hello world for me because it ran out of time and the",
    "start": "1865200",
    "end": "1871360"
  },
  {
    "text": "program had finished interpreting and so what just just to kind of not keep you hanging around",
    "start": "1871360",
    "end": "1877200"
  },
  {
    "text": "i actually have this one where i just increased the thing to 10 million so when you go to 10 million and you go",
    "start": "1877200",
    "end": "1882960"
  },
  {
    "text": "and have a look then eventually we do actually get our hello world and you start to see",
    "start": "1882960",
    "end": "1888880"
  },
  {
    "text": "all of the different pieces getting pulled in so you've got um things like actually good strength and",
    "start": "1888880",
    "end": "1894159"
  },
  {
    "text": "cat helper string size mixed length um there's you've got the probabilities or all of those get folded",
    "start": "1894159",
    "end": "1900159"
  },
  {
    "text": "in so that's kind of cool but you know you do pay this cost of having to to start up because it's java right it's",
    "start": "1900159",
    "end": "1906320"
  },
  {
    "text": "slow at least when it's not compiled and that's the key we've growl uh with growers are compiler sorry and",
    "start": "1906320",
    "end": "1912480"
  },
  {
    "text": "there are going to be some tricks uh that we can look at that kind of maybe make that trade-off",
    "start": "1912480",
    "end": "1918240"
  },
  {
    "text": "um a little bit easier for you okay so the debug went quite well we",
    "start": "1918240",
    "end": "1923919"
  },
  {
    "text": "lost a sign for q con at the front but generally we're getting there and it's about it's t-minus 20 minutes to",
    "start": "1923919",
    "end": "1929120"
  },
  {
    "text": "beer so that's always a good thing so what what do these phases look like well we i mentioned we have this high",
    "start": "1929120",
    "end": "1934559"
  },
  {
    "text": "tier mid tier and low tier you can actually go and step into those we're going to focus on the height here",
    "start": "1934559",
    "end": "1939760"
  },
  {
    "text": "and one of the things i'm planning to write is an exploration in more detail into",
    "start": "1939760",
    "end": "1944799"
  },
  {
    "text": "each of these phases and actually stepping through some of the graphs that you can see um i will show you the graph that came out",
    "start": "1944799",
    "end": "1951120"
  },
  {
    "text": "of the application when we go back out of this and so we've kind of looked at inlining there's a",
    "start": "1951120",
    "end": "1956480"
  },
  {
    "text": "couple of other optimizations that are worth knowing about and we'll explore those now",
    "start": "1956480",
    "end": "1961519"
  },
  {
    "text": "one thing that's interesting is you'll see that you have a lot of canonicalization phases that happen just to kind of rebalance the tree into",
    "start": "1961519",
    "end": "1967919"
  },
  {
    "text": "a format that is known before it kind of goes through the phases and you'll also see dead code elimination starts to feature twice",
    "start": "1967919",
    "end": "1974880"
  },
  {
    "text": "and dead code elimination is really interesting so what dead code elimination does it's not kind of like",
    "start": "1974880",
    "end": "1980159"
  },
  {
    "text": "when you've written something in java and it goes you can just delete that because you did something stupid it's a lot more around",
    "start": "1980159",
    "end": "1986080"
  },
  {
    "text": "the idea that while at runtime you made you maybe never need that branch of code right and if you were to",
    "start": "1986080",
    "end": "1991360"
  },
  {
    "text": "compile that or you may never use that method as another example and if you compile that it would potentially make your",
    "start": "1991360",
    "end": "1996799"
  },
  {
    "text": "application or your compiled part of your application much bigger than it needs to be now um alex did a great talk yesterday",
    "start": "1996799",
    "end": "2003360"
  },
  {
    "text": "yesterday about low-level optimizations at cpu and what you can sometimes get with by pushing in a new",
    "start": "2003360",
    "end": "2009279"
  },
  {
    "text": "function that you didn't know about is you can change the way in which your application profiles so it's kind of nice that you what you",
    "start": "2009279",
    "end": "2015519"
  },
  {
    "text": "see in java is that anything you're not using anything that's irrelevant any kind of branches",
    "start": "2015519",
    "end": "2020559"
  },
  {
    "text": "that you don't need will be will be removed and that removing of branches it decreases branch prediction all these",
    "start": "2020559",
    "end": "2026720"
  },
  {
    "text": "other things so it actually ends up having a really good effect on your overall application and you can do this twice",
    "start": "2026720",
    "end": "2032000"
  },
  {
    "text": "once at the beginning and then once when you've kind of done some of the other factors later so again this is determined at runtime",
    "start": "2032000",
    "end": "2038559"
  },
  {
    "text": "it's determined by that that profiling information and that's why that profiling information is so key another one is unrolling loops",
    "start": "2038559",
    "end": "2047519"
  },
  {
    "text": "so loops themselves they require um back branching and branch prediction as well as the actual overhead of doing",
    "start": "2047519",
    "end": "2053919"
  },
  {
    "text": "the the counting and everything else so what if you could unroll those and kind of you know make your application",
    "start": "2053919",
    "end": "2059520"
  },
  {
    "text": "simpler so when you use an int and you iterate over a for loop you can actually take that for loop and",
    "start": "2059520",
    "end": "2065440"
  },
  {
    "text": "when you compile it you can remove all of the iteration and just lay the code out effectively linearly so you end up with",
    "start": "2065440",
    "end": "2071440"
  },
  {
    "text": "like all of the instructions just together and that kind of then removes a lot of the different kind of like",
    "start": "2071440",
    "end": "2077040"
  },
  {
    "text": "having to back branch having to your application or cpu prediction having to work really really hard the other thing you can",
    "start": "2077040",
    "end": "2083520"
  },
  {
    "text": "remove is safe point checks so save point checks are triggered within the jvm when it's looking to do things like gc for instance",
    "start": "2083520",
    "end": "2090000"
  },
  {
    "text": "and it will always do that when your application's in this sort of safe state so the save points also have a big",
    "start": "2090000",
    "end": "2095760"
  },
  {
    "text": "overhead and if you can remove those that's a good thing so there's a little benchmark here this",
    "start": "2095760",
    "end": "2101440"
  },
  {
    "text": "is this is straight out of optimizing java um where if you are running an int through the same code",
    "start": "2101440",
    "end": "2106560"
  },
  {
    "text": "basically it's the same thing but it's using an intern along you end up with a throughput of 2400 operations per second",
    "start": "2106560",
    "end": "2114560"
  },
  {
    "text": "whereas if you're using a long that kind of drops off to one four six nine so you kind of lose a lot of performance there",
    "start": "2114560",
    "end": "2119680"
  },
  {
    "text": "just by how you how you create your loops um i was talking to a guy called chris newland about loop unrolling i was kind of i'm",
    "start": "2119680",
    "end": "2126800"
  },
  {
    "text": "not really sure i mean i see the benefit with the benchmark but how complicated can it get and he was saying that he'd actually seen a",
    "start": "2126800",
    "end": "2132880"
  },
  {
    "text": "double nested for loop that was doing ray tracing that had actually been loop unrolled so there can be some really kind of heavy",
    "start": "2132880",
    "end": "2138720"
  },
  {
    "text": "things that he gets down to doing now escape analysis is a really",
    "start": "2138720",
    "end": "2143760"
  },
  {
    "text": "interesting one as well so escape analysis itself was introduced in versions of java 6 so it's been",
    "start": "2143760",
    "end": "2149920"
  },
  {
    "text": "around for a little while now and it analyzes code to check",
    "start": "2149920",
    "end": "2154960"
  },
  {
    "text": "if an object ever leaves the scope of the method or is stored within some global variable now the nice thing about escape analysis",
    "start": "2154960",
    "end": "2161839"
  },
  {
    "text": "is it kind of goes back to that age-old interview question of in java where do you allocate an object",
    "start": "2161839",
    "end": "2168800"
  },
  {
    "text": "and obviously yeah you could you could just say heap and you're probably about 80 percent right",
    "start": "2168800",
    "end": "2174240"
  },
  {
    "text": "but now there's so much more of a story to that and what escape analysis does if the object is small enough is they'll",
    "start": "2174240",
    "end": "2179599"
  },
  {
    "text": "actually stack allocate that object so going back to like the c plus plus style of automatic memory management",
    "start": "2179599",
    "end": "2185040"
  },
  {
    "text": "once the stack frame goes away the object goes away now sounds why would you want to do that",
    "start": "2185040",
    "end": "2190079"
  },
  {
    "text": "well one of the biggest subsystems in the jvm is gc and if gc is under pressure as it often",
    "start": "2190079",
    "end": "2195359"
  },
  {
    "text": "is by lots of objects that are created and actually lose reference and die quite quickly you end up having to do",
    "start": "2195359",
    "end": "2200880"
  },
  {
    "text": "more gc cycles so if you can stop putting the objects there you can potentially prevent the",
    "start": "2200880",
    "end": "2205920"
  },
  {
    "text": "gc cycles and obviously going on from that interview question now you can talk about valhalla and other things as well",
    "start": "2205920",
    "end": "2211119"
  },
  {
    "text": "because that makes the makes the conversation even more interesting uh if you're in an interview",
    "start": "2211119",
    "end": "2216400"
  },
  {
    "text": "so it's kind of again it's it's a nice optimization that most people just got for free and one of the things i've certainly",
    "start": "2216400",
    "end": "2222480"
  },
  {
    "text": "taken away from this conference is the the more you're on the latest version of java the more performance benefits you're getting",
    "start": "2222480",
    "end": "2228079"
  },
  {
    "text": "essentially for free now the other one that's kind of inherent in java and if",
    "start": "2228079",
    "end": "2233520"
  },
  {
    "text": "you if you worked in c plus plus uh you'll have seen this idea as well is this idea of when you",
    "start": "2233520",
    "end": "2238960"
  },
  {
    "text": "call a function in java the function is always virtual and what i mean by that is",
    "start": "2238960",
    "end": "2244160"
  },
  {
    "text": "because it's an oo language it has to look up where the corresponding implementation is and this is because",
    "start": "2244160",
    "end": "2250079"
  },
  {
    "text": "java is an oo language by default object is always at the root you always have to kind of look up to",
    "start": "2250079",
    "end": "2255119"
  },
  {
    "text": "see where the function you want to invoke lives now if it in in c plus by the way you can do static binding which means",
    "start": "2255119",
    "end": "2261680"
  },
  {
    "text": "it's there and it just calls the function at the memory address directly there isn't this intermediate lookup",
    "start": "2261680",
    "end": "2267119"
  },
  {
    "text": "now hotspot because we do that all the time in java it really well one thing you want to do is optimize that away if you don't want",
    "start": "2267119",
    "end": "2273440"
  },
  {
    "text": "levels of indirection that's you know where as soon as you're indirecting a pointer you're losing like locality it's kind of difficult to do",
    "start": "2273440",
    "end": "2279760"
  },
  {
    "text": "things with so what hotspot does is it's able to look at the v table structure which is a data",
    "start": "2279760",
    "end": "2285680"
  },
  {
    "text": "structure which does effectively pointing to implementations and if once it's done it the first time it can actually collapse that to be a",
    "start": "2285680",
    "end": "2292079"
  },
  {
    "text": "direct call so you can just go it's over there because i can infer that from the way your application is running",
    "start": "2292079",
    "end": "2297760"
  },
  {
    "text": "now it's kind of interesting again because it requires the idea of tracing and sometimes it",
    "start": "2297760",
    "end": "2303119"
  },
  {
    "text": "gets this wrong so class loading and the magical features of class loading mean that you can end up in a situation",
    "start": "2303119",
    "end": "2309440"
  },
  {
    "text": "where that's an optimistic optimization essentially but what the jvm can also do which i kind of like about the jvm",
    "start": "2309440",
    "end": "2315599"
  },
  {
    "text": "is if it realizes that it's done something that's no longer a decent optimization it can revert back to interpreting and",
    "start": "2315599",
    "end": "2322480"
  },
  {
    "text": "recompile within your application itself so you know there is kind of like it has a back out if it's not sure",
    "start": "2322480",
    "end": "2328720"
  },
  {
    "text": "now the other thing that you can also do is biomorphic dispatch so if there are two effectively two call sites it's able to do that",
    "start": "2328720",
    "end": "2334880"
  },
  {
    "text": "uh once you get to megamorphic um things start to you know you lose optimization there you you can't there's there's",
    "start": "2334880",
    "end": "2341440"
  },
  {
    "text": "diminishing returns as you go through people have worked on trying out trimorphic as well and there's a there's",
    "start": "2341440",
    "end": "2346960"
  },
  {
    "text": "a great blog post i tweeted yesterday about that goes into this in a lot of detail",
    "start": "2346960",
    "end": "2352960"
  },
  {
    "text": "so what happens then is your emitted code your effectively your machine code it gets output into the code cache right",
    "start": "2352960",
    "end": "2359920"
  },
  {
    "text": "and then what happens as you're as you're running through is it replaces the interpreted running uh application and as i mentioned the",
    "start": "2359920",
    "end": "2366960"
  },
  {
    "text": "other thing that's kind of key here is there's also this idea of on stack replacement so if you're interpreting and if you think about it",
    "start": "2366960",
    "end": "2372960"
  },
  {
    "text": "most java applications are running in some form of loop because otherwise it would just stop so",
    "start": "2372960",
    "end": "2378240"
  },
  {
    "text": "the idea is is that if your main function is busy like it is in hello world there then you want to be able to replace the",
    "start": "2378240",
    "end": "2384160"
  },
  {
    "text": "main interpreted loop with a compiled one and that's where on stack replacement comes in to actually be able to replace",
    "start": "2384160",
    "end": "2389680"
  },
  {
    "text": "the code that's being interpreted with the compiled target so that's all really cool right that's that's all",
    "start": "2389680",
    "end": "2396160"
  },
  {
    "text": "nice um there's a bit of a bigger story that's starting to emerge as well aot so ahead",
    "start": "2396160",
    "end": "2402560"
  },
  {
    "text": "of time compilation so what i've been telling you here is it's really great to do jit",
    "start": "2402560",
    "end": "2407599"
  },
  {
    "text": "because when we do jit we have all the information about how our application is working and what it's doing okay but it comes at",
    "start": "2407599",
    "end": "2414880"
  },
  {
    "text": "a cost you've got slow startup time okay or you actually often have a spike of memory",
    "start": "2414880",
    "end": "2420319"
  },
  {
    "text": "usage at the beginning of your application while you're creating all those temporaries to wire up spring or whatever else",
    "start": "2420319",
    "end": "2426000"
  },
  {
    "text": "and so that slow startup time and that heist peaking memory if you're",
    "start": "2426000",
    "end": "2432560"
  },
  {
    "text": "running on something like cloud it might not be the factor that you want to actually optimize for and this is where you start to get into",
    "start": "2432560",
    "end": "2438640"
  },
  {
    "text": "a trade-off of saying well git's really cool if for long-running applications but it has slow startup and",
    "start": "2438640",
    "end": "2444319"
  },
  {
    "text": "actually aot is pretty good in cases where my application runs in a almost like in a consistent way so what",
    "start": "2444319",
    "end": "2451119"
  },
  {
    "text": "could we do here well we can actually use ahead of time compilation as well",
    "start": "2451119",
    "end": "2457040"
  },
  {
    "text": "so we can use aot plus jit okay so we've seen in some of the",
    "start": "2457040",
    "end": "2463200"
  },
  {
    "text": "talks about growl vm how you can supply a profile of your application",
    "start": "2463200",
    "end": "2468240"
  },
  {
    "text": "you can do the com effectively try and do some uh better optimizations there inside the jvm itself there is a tool",
    "start": "2468240",
    "end": "2474400"
  },
  {
    "text": "called jaotc so the java ahead of time compiler it",
    "start": "2474400",
    "end": "2479599"
  },
  {
    "text": "was not designed to be uh said in a presentation i think that's deliberate um and it is used to generate",
    "start": "2479599",
    "end": "2485520"
  },
  {
    "text": "the target code um for either a class or a module okay so we'll talk about",
    "start": "2485520",
    "end": "2490640"
  },
  {
    "text": "that in a second and the idea is is that the jvm itself it treats the aot as being an extension to the code cache",
    "start": "2490640",
    "end": "2498400"
  },
  {
    "text": "so what you can do is you can stuff in pre-compiled either classes or pre-compiled modules",
    "start": "2498400",
    "end": "2503839"
  },
  {
    "text": "into the jvm and still benefit from jit okay so there's a couple of different things that you could potentially do there",
    "start": "2503839",
    "end": "2509440"
  },
  {
    "text": "now someone asked a great question when i gave this presentation in new york like ah what about if somebody tries to",
    "start": "2509440",
    "end": "2514880"
  },
  {
    "text": "give you something that's not it's it doesn't work like it maybe it's some random code or maybe it just wasn't compiled in the",
    "start": "2514880",
    "end": "2521520"
  },
  {
    "text": "same way and the way in which you compile aot code is is quite specific and what it does is it actually has like",
    "start": "2521520",
    "end": "2527520"
  },
  {
    "text": "a fingerprinting technique which looks at the fingerprint on the class essentially and it looks at the one that you've got",
    "start": "2527520",
    "end": "2532800"
  },
  {
    "text": "currently that's running and it compares them and if they're different it won't be able to use that effectively at runtime",
    "start": "2532800",
    "end": "2538640"
  },
  {
    "text": "and it will reject it and go back to interpreters so the j j aotc tool",
    "start": "2538640",
    "end": "2544880"
  },
  {
    "text": "it takes a class file and it gives you effectively a shared object so like in this example so in this",
    "start": "2544880",
    "end": "2550240"
  },
  {
    "text": "example i'm just doing a very simple hello world i'm outputting it to lib hello world.so and then i have to use",
    "start": "2550240",
    "end": "2556240"
  },
  {
    "text": "experimental vm options aot library pass it the iot library and say hello",
    "start": "2556240",
    "end": "2561440"
  },
  {
    "text": "world okay now this slide makes it look really cool and that works fine um but when you compile these things you",
    "start": "2561440",
    "end": "2567520"
  },
  {
    "text": "usually have to indicate what vm you use sorry what gc you're using there's that's one option",
    "start": "2567520",
    "end": "2573280"
  },
  {
    "text": "and some you have to supplement it with other types of flags that you have as well at runtime so it becomes a really big inconsistent",
    "start": "2573280",
    "end": "2579680"
  },
  {
    "text": "potential inconsistency between what you compile and what you run so obviously the first thing we go is well that sounds like java c",
    "start": "2579680",
    "end": "2585920"
  },
  {
    "text": "where's my build tool and actually build tool support for this it's not it's not there yet okay so if",
    "start": "2585920",
    "end": "2591599"
  },
  {
    "text": "you wanted to do a mixture of saying i'd like to compile this module but run run the jvm as you normally would",
    "start": "2591599",
    "end": "2597280"
  },
  {
    "text": "there's no maven plugin that does that so something i'm experimenting with at the moment i mentioned kind of comes",
    "start": "2597280",
    "end": "2603920"
  },
  {
    "text": "back to the beginning of the talk where one of the things i'd like to do is hack around on apache maven and so i'm actually working on a plugin at the",
    "start": "2603920",
    "end": "2610240"
  },
  {
    "text": "moment for jaotc that will enable you to kind of do that consistent rebuild and run with the ship with shared objects and mix it in",
    "start": "2610240",
    "end": "2617359"
  },
  {
    "text": "with that kind of ahead of time and and sort of jit compilation as well so there's always a trade-off",
    "start": "2617359",
    "end": "2623200"
  },
  {
    "text": "like obviously these things you kind of have to balance them out and you'll probably have to like try and find a balance between what makes sense",
    "start": "2623200",
    "end": "2629839"
  },
  {
    "text": "to be ahead of time compiled maybe it's the stuff that you use at startup versus what you want to like kind of",
    "start": "2629839",
    "end": "2635200"
  },
  {
    "text": "leave to be essentially jittered okay so the bigger picture so we talked",
    "start": "2635200",
    "end": "2642079"
  },
  {
    "text": "a lot about the jvm how it works how it gets interpreted and everything else and garbage collection is something we",
    "start": "2642079",
    "end": "2647680"
  },
  {
    "text": "haven't really talked about much in this talk other than there is garbage collection you need to think about it",
    "start": "2647680",
    "end": "2653119"
  },
  {
    "text": "now when it comes to actually looking to see if your application is performant a lot of the reasons why i give this",
    "start": "2653119",
    "end": "2658640"
  },
  {
    "text": "talk is purely out of compiler interest and just because i like fiddling around and showing what's going on inside the jvm",
    "start": "2658640",
    "end": "2664880"
  },
  {
    "text": "if you have a performance issue please don't start there there are other places that you your time will be better looking into",
    "start": "2664880",
    "end": "2671599"
  },
  {
    "text": "so looking at like the overall profile of your application almost you know most of the problems",
    "start": "2671599",
    "end": "2677440"
  },
  {
    "text": "that you have with performance are going to be network database io based related so look at",
    "start": "2677440",
    "end": "2682720"
  },
  {
    "text": "those first and then the other thing is like what are you deploying on and obviously cloud starts to complicate that story a little",
    "start": "2682720",
    "end": "2689119"
  },
  {
    "text": "bit so just before we go into the acknowledgements i'll just show you the igv torture so you can see it and you",
    "start": "2689119",
    "end": "2695280"
  },
  {
    "text": "could actually see the a bunch of stuff that it was it was throwing out there as we were going through so you can actually have a",
    "start": "2695280",
    "end": "2701040"
  },
  {
    "text": "look at what like the high tier tree looks like after it's done and then what it kind of simplifies down to",
    "start": "2701040",
    "end": "2706319"
  },
  {
    "text": "say simplify still pretty complicated um probably looking at printing makes a little bit more sense because it's a",
    "start": "2706319",
    "end": "2711920"
  },
  {
    "text": "little bit smaller so yeah i'll send the link out to this because probably better yeah you play",
    "start": "2711920",
    "end": "2717599"
  },
  {
    "text": "around with it and debug it and have a look yourselves so um before we go into any questions",
    "start": "2717599",
    "end": "2722800"
  },
  {
    "text": "a couple of acknowledgements um chris seaton had a really excellent write-up about growl as a jit",
    "start": "2722800",
    "end": "2728960"
  },
  {
    "text": "and some of the stuff on there has aged a little bit and that's the purpose of the blog post that i'm going to write so if you wanted",
    "start": "2728960",
    "end": "2734319"
  },
  {
    "text": "to pick this up that will probably be the best place to start and thank ben evans for you know",
    "start": "2734319",
    "end": "2739839"
  },
  {
    "text": "teaching me a lot of this stuff and being patient with me when i didn't know anything um and anna did a lot of the graphics on",
    "start": "2739839",
    "end": "2745359"
  },
  {
    "text": "here uh martine for for sort of running the track and alex for for running the track as well",
    "start": "2745359",
    "end": "2750400"
  },
  {
    "text": "uh the graveyard and open jdk teams like this is you know this is pretty awesome technology like just in general",
    "start": "2750400",
    "end": "2756319"
  },
  {
    "text": "uh alex blue thanks for reviewing all of my slides and hopefully picking out any of the errors that i did and we ran this in the new york java",
    "start": "2756319",
    "end": "2762880"
  },
  {
    "text": "user group last last week as well to give it a trial run cool so thanks for listening i hope you",
    "start": "2762880",
    "end": "2768560"
  },
  {
    "text": "have a great evening",
    "start": "2768560",
    "end": "2774400"
  },
  {
    "text": "so we've got about five minutes for questions if anyone has anything that they want to ask him",
    "start": "2774400",
    "end": "2780160"
  },
  {
    "text": "is there any work on taking the code cache uh from an existing running jvm and then",
    "start": "2785680",
    "end": "2792240"
  },
  {
    "text": "using it as uh ahead of time compiler yeah so certainly um from what we've",
    "start": "2792240",
    "end": "2798560"
  },
  {
    "text": "heard of i guess in different talks as well specifically with the um like growl vm you can supply a profile",
    "start": "2798560",
    "end": "2805359"
  },
  {
    "text": "to the head of a head of time compiler so you can kind of make some better decisions about the compilation that it",
    "start": "2805359",
    "end": "2810960"
  },
  {
    "text": "does and there's also within i think some of the other jvms as well like there's an ability",
    "start": "2810960",
    "end": "2816079"
  },
  {
    "text": "to effectively uh dump the profiling information that you get from the running vm and you can supply that into some of the",
    "start": "2816079",
    "end": "2822800"
  },
  {
    "text": "different tools i haven't experimented that on that with jaotc yet but i'm pretty",
    "start": "2822800",
    "end": "2828800"
  },
  {
    "text": "sure there is support for that across a lot of the tool chain so i know for example openj9 does it um which is",
    "start": "2828800",
    "end": "2834000"
  },
  {
    "text": "another jvm hey anyone else have a question",
    "start": "2834000",
    "end": "2839599"
  },
  {
    "text": "just to the front here alex thanks",
    "start": "2839599",
    "end": "2844640"
  },
  {
    "text": "um i have two questions actually so it seems that oracle now essentially has",
    "start": "2844640",
    "end": "2850559"
  },
  {
    "text": "two different jbms or two different jit compilers uh how do they compare feature wise in terms of",
    "start": "2850559",
    "end": "2856800"
  },
  {
    "text": "optimizations they can do maybe performance-wise in steady state obviously",
    "start": "2856800",
    "end": "2862160"
  },
  {
    "text": "okay that that's a good question so it's so certainly the jvm as a subs as an ecosystem at least within the",
    "start": "2862160",
    "end": "2868559"
  },
  {
    "text": "scope of this talk is the same the difference is the plugable jit compiler so you've got an option of",
    "start": "2868559",
    "end": "2873599"
  },
  {
    "text": "hotspot or you've got an option of growl and one of the things that you sort of see again with with hotspot because it's kind of",
    "start": "2873599",
    "end": "2879440"
  },
  {
    "text": "in c plus plus it doesn't need to recompile you will probably see faster startup times from from from hotspot we've grown the",
    "start": "2879440",
    "end": "2886480"
  },
  {
    "text": "things that start to become quite interesting is more of the dynamic languages that run on the jvm that don't necessarily",
    "start": "2886480",
    "end": "2892240"
  },
  {
    "text": "have like techniques around boxing so things like that where previously you would have been slow you could",
    "start": "2892240",
    "end": "2897280"
  },
  {
    "text": "potentially get better benefits from being able to you know write phases that are accustomed to that particular language for for example",
    "start": "2897280",
    "end": "2904000"
  },
  {
    "text": "um i'm going to air quote where i've heard this wrong because i can't remember exactly where it was but some some scholar",
    "start": "2904000",
    "end": "2909599"
  },
  {
    "text": "sort of applications running on the jvm have seen like in the order of 30 to 40 percent improvements by using growl so yeah",
    "start": "2909599",
    "end": "2917440"
  },
  {
    "text": "probably twitter actually yeah yeah yes um do you know if oracle has any plans to kill one even well obviously which one",
    "start": "2917440",
    "end": "2924800"
  },
  {
    "text": "or probably hotspot i would say they're supplementary technologies but i don't work for oracle and i'm not not 100 i",
    "start": "2924800",
    "end": "2930400"
  },
  {
    "text": "couldn't say what was in their plans i reckon that crystal ball they'll probably they'll at least be around for the next",
    "start": "2930400",
    "end": "2935839"
  },
  {
    "text": "couple of years because i think you know the the actual the hotspot project it's you know the aim of this talk is to show",
    "start": "2935839",
    "end": "2941440"
  },
  {
    "text": "some of the new experimental stuff i think we have to bear in mind that a lot of the applications that we run are super fast as a result of hotspot",
    "start": "2941440",
    "end": "2948319"
  },
  {
    "text": "and a lot of the stuff we talked about today is still under experimental mode yeah and the second",
    "start": "2948319",
    "end": "2953599"
  },
  {
    "text": "question do you know what happened to excel search jet i was a",
    "start": "2953599",
    "end": "2958640"
  },
  {
    "text": "excel searcher they were developing ahead of time compiler and uh they have stopped around the time that",
    "start": "2958640",
    "end": "2965680"
  },
  {
    "text": "grail has been announced i don't know i'm afraid sorry thank you",
    "start": "2965680",
    "end": "2970960"
  },
  {
    "text": "okay i think we're out of time which means it's beer o'clock but before we do please let's thank again jim",
    "start": "2970960",
    "end": "2976000"
  },
  {
    "text": "thanks guys",
    "start": "2976000",
    "end": "2980640"
  }
]