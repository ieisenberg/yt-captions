[
  {
    "start": "0",
    "end": "84000"
  },
  {
    "text": "my name is Heather Miller I'm a PhD student at EPFL Uh I work with uh Martin Oderski uh on a bunch of scholar related",
    "start": "7839",
    "end": "15280"
  },
  {
    "text": "projects Um I know a lot of you from lots of different things I mean documentation and otherwise Um so it's",
    "start": "15280",
    "end": "22800"
  },
  {
    "text": "nice to see lots of you Uh for those of you I've never met before hope to meet you Uh so today I'm going to talk about",
    "start": "22800",
    "end": "30080"
  },
  {
    "text": "um uh Scala's type system a little bit talk about some things that seem to be sort of buzzwords in this world Um the",
    "start": "30080",
    "end": "37120"
  },
  {
    "text": "the the talk it it's it's pretty ambitious I had you know promised I",
    "start": "37120",
    "end": "42719"
  },
  {
    "text": "would talk a little bit about the type system in general I talk about uh things like type level programming and type classes things that people like to talk",
    "start": "42719",
    "end": "48320"
  },
  {
    "text": "about and use maybe everybody else doesn't understand them And then also I mentioned dependent types because well",
    "start": "48320",
    "end": "53440"
  },
  {
    "text": "in academia this has been sort of research for about 20 years or so uh it's what lots of people are doing in",
    "start": "53440",
    "end": "58879"
  },
  {
    "text": "type systems and suddenly in the last few years people are using them you know in in developer land and people like",
    "start": "58879",
    "end": "64720"
  },
  {
    "text": "Miles Sabin have uh libraries which do stuff with dependent types uh and I don't think people really understand",
    "start": "64720",
    "end": "70400"
  },
  {
    "text": "what this stuff is or what it means So um I wanted to sort of give people some some sort of clarification or you know",
    "start": "70400",
    "end": "77920"
  },
  {
    "text": "some sort of highle picture of what all this stuff is and how how it fits together So um originally my idea was",
    "start": "77920",
    "end": "84640"
  },
  {
    "start": "84000",
    "end": "84000"
  },
  {
    "text": "well uh a lot of people talk about these things in scholar type system and that it's so powerful and wonderful",
    "start": "84640",
    "end": "91079"
  },
  {
    "text": "Um and I think a lot of the time people think it's like this scary thing as well",
    "start": "91079",
    "end": "96240"
  },
  {
    "text": "because it's difficult to define It can do so many things It's so complicated Nobody knows really like how to to to",
    "start": "96240",
    "end": "101600"
  },
  {
    "text": "approach it And I I want to change that I want us to to to give you a happier nicer picture of of what the the type",
    "start": "101600",
    "end": "109439"
  },
  {
    "text": "system can do for you or what it is really It's something that's kind of automagical that can help you keep",
    "start": "109439",
    "end": "115280"
  },
  {
    "text": "things sort of tidy and super type- safe and protected Um and I I hope to say",
    "start": "115280",
    "end": "120719"
  },
  {
    "text": "that it can be helpful if you know how to use it That's my goal kind of in this whole presentation Um or Josh actually",
    "start": "120719",
    "end": "126399"
  },
  {
    "text": "Yeah I realized that this is a good analogy too because it's like you know well probably helpful probably",
    "start": "126399",
    "end": "132080"
  },
  {
    "text": "intelligent I'm sure that's probably protective So this is probably like down my new um like you know mascot for the",
    "start": "132080",
    "end": "138879"
  },
  {
    "text": "type system I think But anyway uh so if you're one of these people who like",
    "start": "138879",
    "end": "144319"
  },
  {
    "text": "types a lot and like type level programming and are into type systems this talk probably is not exactly for",
    "start": "144319",
    "end": "149599"
  },
  {
    "text": "you because I want to just give a lot of highle intuitions and sort of like stitch stuff together to tell you how",
    "start": "149599",
    "end": "155120"
  },
  {
    "text": "sort of things are related that you might have heard of Uh so I think that everybody can get a little bit out of the talk though and like I said my aim",
    "start": "155120",
    "end": "161920"
  },
  {
    "text": "is intuition for how how basically to give people more than just Scala's type system is powerful to sort of show you",
    "start": "161920",
    "end": "168319"
  },
  {
    "text": "exactly what I think that means So I'm I broke this talk into three chunks I'm going to just kind of run through the",
    "start": "168319",
    "end": "175040"
  },
  {
    "text": "type system a little bit so if I start using some words you know what I'm talking about Uh I'm gonna talk about",
    "start": "175040",
    "end": "181360"
  },
  {
    "text": "sort of some of the powerful patterns uh that that the type system and other things like implicit conversions and",
    "start": "181360",
    "end": "187200"
  },
  {
    "text": "whatnot enable Uh and then I'm going to go into the world of like sci-fi and",
    "start": "187200",
    "end": "192560"
  },
  {
    "text": "talk about dependent types a little bit what they are Um so yeah first let's",
    "start": "192560",
    "end": "198800"
  },
  {
    "text": "talk about uh Kala's type system And like I said whirlwind tour and I'm gonna",
    "start": "198800",
    "end": "204879"
  },
  {
    "text": "uh skip several things that I mean I just I mean if you if you actually know the the the n the number of of sort of",
    "start": "204879",
    "end": "211840"
  },
  {
    "text": "constructs in Scala's type system it would be ridiculous for someone to try and cover them all in 30 or 40 minutes",
    "start": "211840",
    "end": "217440"
  },
  {
    "text": "in sufficient insufficient detail Uh and what you can't see down here is infix types and self types I I just don't have",
    "start": "217440",
    "end": "223519"
  },
  {
    "text": "time to talk about them uh but what I will cover um basically to tell you what",
    "start": "223519",
    "end": "228959"
  },
  {
    "text": "scholars predefined types are how to define your own types talk about uh you know what it means to have a",
    "start": "228959",
    "end": "234319"
  },
  {
    "text": "parameterized or a generic type variance and bounds uh and then actually the cool things um which are abstract type",
    "start": "234319",
    "end": "241360"
  },
  {
    "text": "members you'll find at the very end of this talk are super ridiculously powerful um existential types which man",
    "start": "241360",
    "end": "247840"
  },
  {
    "text": "aren't that powerful as you'll find uh I'll just you know show you some higher kind of types",
    "start": "247840",
    "end": "253280"
  },
  {
    "text": "and and and and and structural types and refinement types Um so the obligatory I",
    "start": "253280",
    "end": "258400"
  },
  {
    "text": "have to show this if if I'm going to talk about Scala's type system Everything is a subclass of any and",
    "start": "258400",
    "end": "264800"
  },
  {
    "text": "everything is a super is a is a and sorry nothing which you can't see uh is",
    "start": "264800",
    "end": "270400"
  },
  {
    "text": "is a subclass of everything as well right Uh yeah nothing that's good actually I don't know the slide the",
    "start": "270400",
    "end": "276639"
  },
  {
    "text": "thing seems to be poorly fit for the screen Anyway um and the hierarchy is",
    "start": "276639",
    "end": "281759"
  },
  {
    "text": "broken into two pieces one side has all of the the value like things Thank",
    "start": "281759",
    "end": "289120"
  },
  {
    "text": "you So on the left side everything that that extends from any val which itself",
    "start": "289880",
    "end": "294960"
  },
  {
    "text": "extends from any these are all value types These are all things like primitives or things we like to think of kind of as primitives like Scala's unit",
    "start": "294960",
    "end": "301440"
  },
  {
    "text": "type which is like void Uh and then you have everything else on the other side and this is the",
    "start": "301440",
    "end": "306639"
  },
  {
    "text": "skull universe Your program lives somewhere in the middle of all of this So these things are given to you Then",
    "start": "306639",
    "end": "312720"
  },
  {
    "start": "309000",
    "end": "309000"
  },
  {
    "text": "you can make your own types How do you do that Well you declare a a trait or",
    "start": "312720",
    "end": "319680"
  },
  {
    "text": "Yeah thanks You have a you you define a you declare you have a through class declarations or trait declarations Uh or",
    "start": "319680",
    "end": "327520"
  },
  {
    "text": "you can you can create a type by defining one using this type keyword that you might have seen and make a type",
    "start": "327520",
    "end": "334120"
  },
  {
    "text": "member Those are the two main ways to to sort of you know sum up types from",
    "start": "334120",
    "end": "339440"
  },
  {
    "text": "nowhere Another way to make a type is by combining other types So you can uh make a compound type or refined type A",
    "start": "339440",
    "end": "345759"
  },
  {
    "text": "refined type which is compound type is basically the union of two types and a refined type is sort of you know fudging",
    "start": "345759",
    "end": "352720"
  },
  {
    "text": "a type that already exists And I'll show you that later So these are the ways you can make types Um parameterize types So",
    "start": "352720",
    "end": "360639"
  },
  {
    "start": "355000",
    "end": "355000"
  },
  {
    "text": "type parameterization uh is basically generics It allows you to write things that are fully generic like classes and",
    "start": "360639",
    "end": "367759"
  },
  {
    "text": "traits and other things like that Um and um",
    "start": "367759",
    "end": "373560"
  },
  {
    "text": "uh so the the point the points that I wanted to make here are that you can uh basically add constraints to these",
    "start": "374360",
    "end": "381440"
  },
  {
    "text": "things You can use uh this notion of variance or this notion of bounds to to",
    "start": "381440",
    "end": "387560"
  },
  {
    "text": "to put to to control sort of what what can be passed into a a class or or or",
    "start": "387560",
    "end": "395199"
  },
  {
    "text": "what a type instruction or a class will take can take So you might not want you know well I'll give you an example but",
    "start": "395199",
    "end": "402160"
  },
  {
    "text": "uh to start to start with with one of these things variance I'm sure lots of you have have heard of this before uh",
    "start": "402160",
    "end": "408080"
  },
  {
    "text": "the idea is that if you have uh something like a trait box that's totally generic a class tool and a class",
    "start": "408080",
    "end": "415919"
  },
  {
    "text": "hammer that extends tool uh we don't know ne we know that hammer extends tool",
    "start": "415919",
    "end": "422080"
  },
  {
    "text": "uh but we don't know uh if I have a box of tools if that is also a box of",
    "start": "422080",
    "end": "427360"
  },
  {
    "text": "hammers or what what relationship they have And this is what variance does It basically says well on the on the very",
    "start": "427360",
    "end": "433199"
  },
  {
    "text": "left here coariance is sort of the same as is is sort of the forward direction like you would think Uh if if if hammer",
    "start": "433199",
    "end": "439599"
  },
  {
    "text": "is a subclass of tool then a box of tools I'm sorry box of hammers is a subclass of a box of tools Um",
    "start": "439599",
    "end": "446560"
  },
  {
    "text": "contravariance is the opposite Uh so uh yeah as you can see and then finally",
    "start": "446560",
    "end": "453280"
  },
  {
    "text": "there's there's invariance Uh and that's that's when there's there's no relationship at all And that's that's the default in Scala So if you ever",
    "start": "453280",
    "end": "460080"
  },
  {
    "text": "wanted to if you just assumed covariance you'd have to add a type parameter or you have to add an a variance annotation",
    "start": "460080",
    "end": "466080"
  },
  {
    "text": "to your type parameter this little plus symbol Um because by default it the",
    "start": "466080",
    "end": "471440"
  },
  {
    "text": "skull compiler assumes there's no relationship between a box of tool and a box of hammer So you can control some things that you",
    "start": "471440",
    "end": "478479"
  },
  {
    "text": "do with your with you know with with these things called variance uh annotations and uh then you have this",
    "start": "478479",
    "end": "486240"
  },
  {
    "text": "other thing called these other things called bounds which you can actually put all over the place uh on uh you know uh",
    "start": "486240",
    "end": "493680"
  },
  {
    "text": "on type members and and and whatnot uh in in the the uh you can you can put a",
    "start": "493680",
    "end": "499840"
  },
  {
    "text": "bound on a type parameter inside of a like with this generic thing here And basically um you have upper and lower",
    "start": "499840",
    "end": "507280"
  },
  {
    "text": "bounds in this trait uh box here You you basically say that you'll take any type",
    "start": "507280",
    "end": "512560"
  },
  {
    "text": "T that is uh tool or one of its that is is is bounded by by tool So you can take",
    "start": "512560",
    "end": "520880"
  },
  {
    "text": "yeah uh and then and then the other way around for for for the upper bounds So",
    "start": "520880",
    "end": "526320"
  },
  {
    "text": "you you know so um and then yeah so back to the whole thing how this fits into the whole hierarchy All types have an",
    "start": "526320",
    "end": "532640"
  },
  {
    "text": "upper bound of any and a lower bound of nothing So uh you can think of the Scala compiler automatically adding these",
    "start": "532640",
    "end": "538320"
  },
  {
    "text": "things for you Um but yeah so you guys already know that I I'm sure if you're",
    "start": "538320",
    "end": "544640"
  },
  {
    "text": "here the whole point of showing you that was to say well Java kind of already does all that stuff too except maybe",
    "start": "544640",
    "end": "550560"
  },
  {
    "text": "with type the type members thing Um but otherwise uh you know that's that's more or less",
    "start": "550560",
    "end": "556720"
  },
  {
    "text": "the same What I want to try and show you with you know this entire talk is that",
    "start": "556720",
    "end": "562080"
  },
  {
    "text": "Scola gives you a lot of a lot more control over type checking in your programs than than than than just these",
    "start": "562080",
    "end": "569920"
  },
  {
    "text": "these few things right So um it's it it's uh yeah this is where it gets",
    "start": "569920",
    "end": "576000"
  },
  {
    "start": "575000",
    "end": "575000"
  },
  {
    "text": "interesting So the first thing um that I wanted to talk about like I said in this whole list was was abstract type members",
    "start": "576000",
    "end": "582600"
  },
  {
    "text": "So a type member uh you can see it here in this class person Uh you have an",
    "start": "582600",
    "end": "590000"
  },
  {
    "text": "abstract type member pet Um and I mean it's just it's a type where we don't",
    "start": "590000",
    "end": "596399"
  },
  {
    "text": "really know what it is Um and it sounds pretty basic but uh the whole idea is",
    "start": "596399",
    "end": "602160"
  },
  {
    "text": "that you can sort of in superasses leave these type parameters abstract and make",
    "start": "602160",
    "end": "609040"
  },
  {
    "text": "them concrete and subasses So we can do that in this this class Susan here Class",
    "start": "609040",
    "end": "614560"
  },
  {
    "text": "Susan extends person uh and you can we can make concrete this abstract type",
    "start": "614560",
    "end": "621200"
  },
  {
    "text": "parameter It's now a concrete type parameter but or type member Um and we can make it a cat right Um and",
    "start": "621200",
    "end": "630160"
  },
  {
    "text": "sort of you can think of that actually as as being the same as as parameterization So if I wanted to uh do",
    "start": "630160",
    "end": "636560"
  },
  {
    "text": "the same thing like you would do in a langu like just in in in Java or something um you would do something like",
    "start": "636560",
    "end": "641760"
  },
  {
    "text": "this You would pass pet as a as a type parameter to person Uh",
    "start": "641760",
    "end": "650000"
  },
  {
    "text": "what this supposed to be class yes okay no I'm sorry So all right of course",
    "start": "650279",
    "end": "656640"
  },
  {
    "text": "person has to have to have to take a type parameter has to be changed I'm sorry I totally forgot So uh you can then take class Susan and extend uh",
    "start": "656640",
    "end": "663760"
  },
  {
    "text": "Susan with Oh man this is messed up It's supposed to have supposed to have cat but no that's right That's fine It's",
    "start": "663760",
    "end": "670720"
  },
  {
    "text": "fine Oh my god Like I said I'm a little frazzled today Please And jet lag Ah",
    "start": "670720",
    "end": "675839"
  },
  {
    "text": "okay Yes So this is fine So basically my my argument is that these two things are the same Um and and actually one thing",
    "start": "675839",
    "end": "682240"
  },
  {
    "text": "that's kind of funny I think this I don't know the name of the paper Uh I I saw it a little while ago Martin wrote a",
    "start": "682240",
    "end": "688800"
  },
  {
    "text": "paper with like I think it was Phil Wadler or somebody about um this this sort of thing with type parameters and",
    "start": "688800",
    "end": "695720"
  },
  {
    "text": "and abstract type members and things like that and okay you know how what what what is what is better what is",
    "start": "695720",
    "end": "702320"
  },
  {
    "text": "better you know and he found that they did some huge empirical study actually and they found that um of course as as",
    "start": "702320",
    "end": "707920"
  },
  {
    "text": "the number of parameters increases sort of the complexity sort of of your code ends up kind of exploding and you know",
    "start": "707920",
    "end": "713279"
  },
  {
    "text": "things are left tractable with uh with abstract type members instead of you know making some huge thing that has",
    "start": "713279",
    "end": "719320"
  },
  {
    "text": "20,000 type parameters in it Um and it's really funny It's like some some like um",
    "start": "719320",
    "end": "725360"
  },
  {
    "text": "some paper that was at a very good conference in like the 90s or something It's quite quite funny So anyway the point is that um this you'll find later",
    "start": "725360",
    "end": "733120"
  },
  {
    "text": "that this this these this these abstract type members are are pretty powerful because we'll we'll see that we'll see",
    "start": "733120",
    "end": "739279"
  },
  {
    "text": "that it's possible using them to subsume a lot of other sort of things in Scola's type system Uh so anyway the takeaway",
    "start": "739279",
    "end": "747600"
  },
  {
    "text": "that that uh that I'd like you to walk away with about abstract type members is that you can you can uh still achieve",
    "start": "747600",
    "end": "755120"
  },
  {
    "text": "the same level of abstraction without the verbosity of type parameters and having to keep track of where you're passing these things",
    "start": "755120",
    "end": "761720"
  },
  {
    "start": "760000",
    "end": "760000"
  },
  {
    "text": "Um which leads me to actually ex existential types Um a lot of people I don't think know",
    "start": "761720",
    "end": "768720"
  },
  {
    "text": "what existential existential types are because they don't see them very often um in and a lot of you know day-to-day",
    "start": "768720",
    "end": "776160"
  },
  {
    "text": "code Um but the idea is pretty simple behind them Uh the idea is that we want",
    "start": "776160",
    "end": "783360"
  },
  {
    "text": "to be able to still compile some piece of code where we don't necessarily know what one of the component types of",
    "start": "783360",
    "end": "790000"
  },
  {
    "text": "something is going to be Um so",
    "start": "790000",
    "end": "795440"
  },
  {
    "text": "uh so an ex yeah an existential type includes references to to it can have value members but usually abstract types",
    "start": "795880",
    "end": "803760"
  },
  {
    "text": "uh that we don't that we know exist somewhere in our program but we don't really know at the time when we write this one bit thing what specifically t",
    "start": "803760",
    "end": "811120"
  },
  {
    "text": "is going to be So um that's that's sort of the intuitive idea and and sort of",
    "start": "811120",
    "end": "816399"
  },
  {
    "text": "the the key notion here is that you can leave some parts of your program unknown and still type check ite different",
    "start": "816399",
    "end": "822040"
  },
  {
    "text": "implementations for those for those unknown parts So this little code snippet here doesn't actually do",
    "start": "822040",
    "end": "827639"
  },
  {
    "text": "anything Um it just illust I mean you know you you might look at it and think well it it doesn't make any sense",
    "start": "827639",
    "end": "833760"
  },
  {
    "text": "because I have no idea you know I have no idea what what T is that this compiles and farm has has doesn't have",
    "start": "833760",
    "end": "839920"
  },
  {
    "text": "to know anything about about fruit or anything else and it's all it's all fine You could pass you know something like",
    "start": "839920",
    "end": "845680"
  },
  {
    "text": "you could or apple whatever which could be this t and you can still pass that in",
    "start": "845680",
    "end": "850720"
  },
  {
    "text": "and and and it's all it's all fine Um sort of the the the takeaway here is",
    "start": "850720",
    "end": "856000"
  },
  {
    "text": "that um the thing that people like about existential types is that uh you can fully decouple implementation details",
    "start": "856000",
    "end": "862160"
  },
  {
    "text": "from types uh and this is why people in ML and languages like ML they like",
    "start": "862160",
    "end": "868560"
  },
  {
    "text": "existential types very much Um",
    "start": "868560",
    "end": "874120"
  },
  {
    "start": "869000",
    "end": "869000"
  },
  {
    "text": "so on to the next construct in in in the type system that people like to talk",
    "start": "874120",
    "end": "879920"
  },
  {
    "text": "about uh higher kind of types So you have to in order to understand what a higher kind of type is you have to first",
    "start": "879920",
    "end": "886000"
  },
  {
    "text": "know um what a type constructor is So a type constructor is is is here in this",
    "start": "886000",
    "end": "892639"
  },
  {
    "text": "on the left hand side here Uh this parameterized type that you see down here defines actually a type constructor",
    "start": "892639",
    "end": "898639"
  },
  {
    "text": "So Q of T is a type constructor and it can be used to construct instances of lots of different things So a Q of int Q",
    "start": "898639",
    "end": "904800"
  },
  {
    "text": "of string a Q of Q of int Um and a higher kind of type is one that",
    "start": "904800",
    "end": "911440"
  },
  {
    "text": "abstracts over those over over those things those type constructors uh and uh so there you you know you can",
    "start": "911440",
    "end": "920399"
  },
  {
    "text": "have two different two different forms of them in Scala So this is I think most often people see form number one where",
    "start": "920399",
    "end": "926720"
  },
  {
    "text": "you just see it all together Uh C is a higher kind of type since it abstracts over the the M type constructor and it's",
    "start": "926720",
    "end": "932720"
  },
  {
    "text": "kind of all in line Uh and another one is actually where you have a type constructor uh defined as an abstract uh",
    "start": "932720",
    "end": "939519"
  },
  {
    "text": "abstract member Uh so here D in this case is a higher kind of type since it abstracts over callback which itself is",
    "start": "939519",
    "end": "946800"
  },
  {
    "text": "a type constructor So really the the big idea behind higher kind of types here is",
    "start": "946800",
    "end": "951920"
  },
  {
    "text": "that you can abstract over common abstractions So you can abstract over things like container types and if you've looked at the uh this the Scola",
    "start": "951920",
    "end": "960160"
  },
  {
    "text": "like just the the architecture of the Scola standard collection library you'll see you'll see a lot of this happening",
    "start": "960160",
    "end": "966600"
  },
  {
    "text": "Um the la the last sort of interesting variety of types I'm going",
    "start": "966600",
    "end": "973040"
  },
  {
    "text": "to talk about uh are refinement types and structural types Um these things are",
    "start": "973040",
    "end": "979199"
  },
  {
    "text": "different Um but I'm going to really talk about refinement types right now Uh a refinement type refineses something",
    "start": "979199",
    "end": "985600"
  },
  {
    "text": "that already exists uh by by adding new members or doing something new to it",
    "start": "985600",
    "end": "993800"
  },
  {
    "text": "so um",
    "start": "995199",
    "end": "1000399"
  },
  {
    "text": "actually yeah this is I'm sorry I told you I had",
    "start": "1004920",
    "end": "1012000"
  },
  {
    "text": "this this funny problem and these are some old examples that I thought I had gotten rid",
    "start": "1012000",
    "end": "1018120"
  },
  {
    "text": "of So anyway um",
    "start": "1018120",
    "end": "1023880"
  },
  {
    "text": "what okay so they can be I they can be structural",
    "start": "1023880",
    "end": "1030400"
  },
  {
    "text": "but the I'm going to talk just only about the last example here um where we have something uh C",
    "start": "1030400",
    "end": "1038319"
  },
  {
    "text": "uh which uh has a field uh age of type int and we can actually refine that and",
    "start": "1038319",
    "end": "1047678"
  },
  {
    "text": "create uh and add an additional field to it by by just doing it like this here by",
    "start": "1047679",
    "end": "1053600"
  },
  {
    "text": "making concrete this field and then uh adding another field and calling it name",
    "start": "1053600",
    "end": "1058880"
  },
  {
    "text": "Um the second the the the the middle example here comes from uh comes from",
    "start": "1058880",
    "end": "1065200"
  },
  {
    "text": "the SC the scholar or sort of similar to what you might have seen if you ever read the programming and scholar book by",
    "start": "1065200",
    "end": "1072280"
  },
  {
    "text": "Martin Um yeah so yeah refined types can be",
    "start": "1072280",
    "end": "1078799"
  },
  {
    "text": "used wherever a type can occur They're not just for instantiating one-off types So you can use them in line as well was the point that I wanted to make there",
    "start": "1078799",
    "end": "1086679"
  },
  {
    "text": "Um but yeah so I guess the idea is that you can sort of have duct typing uh but",
    "start": "1086679",
    "end": "1092480"
  },
  {
    "text": "totally totally static rather than what they do in languages and other in",
    "start": "1092480",
    "end": "1098480"
  },
  {
    "text": "dynamic languages Yep Shoot Sorry",
    "start": "1098480",
    "end": "1105880"
  },
  {
    "text": "So in other words you got Xal and then well that's just this is so",
    "start": "1112720",
    "end": "1117840"
  },
  {
    "text": "this is a new a totally new a totally new type that gets defined So what are you ask you're asking who can see x is c",
    "start": "1117840",
    "end": "1125840"
  },
  {
    "text": "val Well this is a stupid example I mean",
    "start": "1125840",
    "end": "1132400"
  },
  {
    "text": "there's nothing like this isn't this isn't meant to like you can't I don't I don't intend for you to actually use this This is just saying \"Hey you can",
    "start": "1132400",
    "end": "1138480"
  },
  {
    "text": "add a field to something.\" No you can add a field but it sounds like to me what you want to do you want to delete the type Yeah Uh",
    "start": "1138480",
    "end": "1146000"
  },
  {
    "text": "because then you would get the refine Yeah that's that's that's true Yeah Yeah So I'm sorry This is again a side effect",
    "start": "1146000",
    "end": "1152120"
  },
  {
    "text": "of of sort of a disaster that happened this morning Um and and that's why this",
    "start": "1152120",
    "end": "1158880"
  },
  {
    "text": "slide and that slide are in there I'm sorry I tried to fix these before I could got I got here But anyway",
    "start": "1158880",
    "end": "1165799"
  },
  {
    "text": "um my goal was to give you some convincing examples of things that you",
    "start": "1165799",
    "end": "1171200"
  },
  {
    "text": "could do in Scola that you couldn't do in a language like Java where in Java you can think of the type system is",
    "start": "1171200",
    "end": "1176640"
  },
  {
    "text": "giving you a way of enforcing different shapes uh and and you know making sure",
    "start": "1176640",
    "end": "1182000"
  },
  {
    "text": "different sets of shapes go into different interfaces uh and it checks that you know thing that these different",
    "start": "1182000",
    "end": "1188000"
  },
  {
    "text": "shapes are correct and that they're being passed around in the right way So it's kind of like like like this this",
    "start": "1188000",
    "end": "1193280"
  },
  {
    "text": "childhood game where you know you want to put a square peg in a square hole round peg and a round hole But and Scala",
    "start": "1193280",
    "end": "1200080"
  },
  {
    "text": "uh has all these other things like these these these things like u higher kinds which like I said they let you abstract",
    "start": "1200080",
    "end": "1206960"
  },
  {
    "text": "over type constructors and all kinds of other things So you can build abstractions on top of abstractions and",
    "start": "1206960",
    "end": "1212000"
  },
  {
    "text": "then you can uh do all kinds of things with with um you know uh these type",
    "start": "1212000",
    "end": "1217760"
  },
  {
    "text": "members and you can uh refine things and you can make new types all over the place Uh and you can combine them to do",
    "start": "1217760",
    "end": "1224240"
  },
  {
    "text": "all kinds of different things and as I show you in a minute um you can even do a lot of type level stuff that will",
    "start": "1224240",
    "end": "1230960"
  },
  {
    "text": "transform some types to new types Um so so I haven't quite gotten there but just",
    "start": "1230960",
    "end": "1237360"
  },
  {
    "text": "sort of some of these preliminaries Uh ideally uh well I'm trying to trying to",
    "start": "1237360",
    "end": "1243840"
  },
  {
    "text": "argue make Scola a little bit stronger of a language It's more like having a",
    "start": "1243840",
    "end": "1248960"
  },
  {
    "text": "like one of these these toys that are more reconfigurable And clearly oops sorry",
    "start": "1248960",
    "end": "1256159"
  },
  {
    "text": "And clearly like a transformer toy is more fun to play with than",
    "start": "1256159",
    "end": "1262760"
  },
  {
    "text": "a brick in a box toy Anyway um so some of the stuff that",
    "start": "1262760",
    "end": "1270240"
  },
  {
    "text": "Scola enables I can talk about a lot of things Um but uh I I you know wanted to sort",
    "start": "1270240",
    "end": "1281320"
  },
  {
    "text": "of prune it down to a few things that I think are are pretty important Uh so everybody has heard of type classes Most",
    "start": "1281320",
    "end": "1287919"
  },
  {
    "text": "people know what they are by now A couple years ago people didn't really seem to widely use them or understand",
    "start": "1287919",
    "end": "1293919"
  },
  {
    "text": "them But um now they're more popular I think it's not so hard to convince people that they're useful Uh type level",
    "start": "1293919",
    "end": "1299679"
  },
  {
    "text": "programming is is something that's been around for a while And you know generic programming and all of these things have",
    "start": "1299679",
    "end": "1305679"
  },
  {
    "text": "been around for a little bit Um and I'm not so sure it's there that you know in in in a lot of communities it's very",
    "start": "1305679",
    "end": "1312480"
  },
  {
    "text": "well understood what that means specifically Uh and then there's uh some stuff called materialization or what",
    "start": "1312480",
    "end": "1318080"
  },
  {
    "text": "Eugene and I like to call materialization which is another another form of kind of generic programming and all of this is sort of type directed Um",
    "start": "1318080",
    "end": "1324960"
  },
  {
    "text": "and so we we we sort of use the type system to do very rich things that that",
    "start": "1324960",
    "end": "1330799"
  },
  {
    "text": "enable like a lot of flexibility and and eliminate boilerplate and all kinds of things So the first thing I want to talk",
    "start": "1330799",
    "end": "1337919"
  },
  {
    "text": "about um are type classes So what are they Um what are they for I guess if you",
    "start": "1337919",
    "end": "1343520"
  },
  {
    "text": "don't know what they are they're uh they allow retrofitting types with interfaces So even something that that is is is",
    "start": "1343520",
    "end": "1350480"
  },
  {
    "start": "1349000",
    "end": "1349000"
  },
  {
    "text": "final and you can't change you can add methods to it Um and in Haskell they're actually built into the language but in",
    "start": "1350480",
    "end": "1356640"
  },
  {
    "text": "Scalar they're they're a popular sort of type based pattern uh which itself is based on on this notion of",
    "start": "1356640",
    "end": "1364360"
  },
  {
    "text": "implicits So just to give you a quick definition of what they are uh a type",
    "start": "1364360",
    "end": "1369679"
  },
  {
    "text": "class is a generic trait Um so here we can use ordering Uh we have uh this is",
    "start": "1369679",
    "end": "1377679"
  },
  {
    "text": "actually an ordering in the standard library This is just a dummy ordering but uh this is the type class for that",
    "start": "1377679",
    "end": "1384400"
  },
  {
    "text": "So this defines the actual interface and you could have some method compare in it",
    "start": "1384400",
    "end": "1390480"
  },
  {
    "text": "Um which compares two things and gives you an int should probably give you the thing but",
    "start": "1390679",
    "end": "1396760"
  },
  {
    "text": "okay Uh so and a type class instance which you can have you you can have one type class and many type class instances",
    "start": "1396760",
    "end": "1402799"
  },
  {
    "text": "A type class instance uh is itself exists as as an implicit which",
    "start": "1402799",
    "end": "1408640"
  },
  {
    "text": "provides an implementation for that interface Um and it's an implicit so",
    "start": "1408640",
    "end": "1413760"
  },
  {
    "text": "that sort of the wiring gets done automatically Uh so if you wanted to define uh one that that um uh ordered",
    "start": "1413760",
    "end": "1424159"
  },
  {
    "text": "integers you could define it this way where you have uh some implicit object and it extends your your ordering type",
    "start": "1424159",
    "end": "1431760"
  },
  {
    "text": "class uh and then you implement you know your your compare method however it means to have that",
    "start": "1431760",
    "end": "1437960"
  },
  {
    "text": "implemented Um and that's sort of the shape",
    "start": "1437960",
    "end": "1444600"
  },
  {
    "text": "Um so you could also have um you can also",
    "start": "1444600",
    "end": "1451520"
  },
  {
    "text": "express constraints and and and you know provide suitable implementations for those Um one way of doing that is uh",
    "start": "1451520",
    "end": "1459919"
  },
  {
    "text": "with this this notion of a uh of an evidence parameter So you can basically require a certain type class uh in",
    "start": "1459919",
    "end": "1466960"
  },
  {
    "text": "something like normal like a a sort method um and have this you know more or less be completely invisible to the user",
    "start": "1466960",
    "end": "1473279"
  },
  {
    "text": "So uh for example if I have a a sequence I would I would like to know how to",
    "start": "1473279",
    "end": "1479679"
  },
  {
    "text": "perhaps uh you know have some notion of ordering maybe in any you know in",
    "start": "1479679",
    "end": "1485120"
  },
  {
    "text": "whatever I do with it Um I'm sorry I I need a notion of ordering for I'm sorry",
    "start": "1485120",
    "end": "1490640"
  },
  {
    "text": "implementation of sort So in this example uh the ordering an instance of",
    "start": "1490640",
    "end": "1496159"
  },
  {
    "text": "ordering for sequences So imagine that there was one for sequences um uh",
    "start": "1496159",
    "end": "1504000"
  },
  {
    "text": "uh would be uh implicitly found in scope uh and and used it can be used in the",
    "start": "1504000",
    "end": "1510559"
  },
  {
    "text": "imple in the in the concrete implementation of the sort method in any way Um so uh this evidence parameter",
    "start": "1510559",
    "end": "1517120"
  },
  {
    "text": "provides a concrete implementation of of that type class for whatever the type is that you end up passing to to sort Um",
    "start": "1517120",
    "end": "1523600"
  },
  {
    "text": "and and a short a shorthand way of doing it is by using what's called a contextbound which is kind of confusing",
    "start": "1523600",
    "end": "1529919"
  },
  {
    "text": "because it's got a name and it's something else but really it does the same exact thing as as what we write up",
    "start": "1529919",
    "end": "1535279"
  },
  {
    "text": "here this implicit evidence ordering thing just it gets rewritten uh like if you write you know sort t colon ordering",
    "start": "1535279",
    "end": "1542080"
  },
  {
    "text": "it gets rewritten to this this implicit evidence thing by the compiler",
    "start": "1542080",
    "end": "1548039"
  },
  {
    "text": "um and uh yeah so that's the basic idea of type classes so you can you can uh",
    "start": "1548039",
    "end": "1555039"
  },
  {
    "text": "you know use them as constraints and things that you implement uh and you can uh and you can yeah sort you can",
    "start": "1555039",
    "end": "1563279"
  },
  {
    "text": "basically use or you can also oh yeah um so the next thing that I think is",
    "start": "1563279",
    "end": "1569440"
  },
  {
    "start": "1566000",
    "end": "1566000"
  },
  {
    "text": "pretty important and interesting is uh this notion of type level",
    "start": "1569440",
    "end": "1574679"
  },
  {
    "text": "programming Uh so the the basic idea behind type level programming is that",
    "start": "1574679",
    "end": "1580000"
  },
  {
    "text": "you do computation with types at compile time in the compiler So given some input type some",
    "start": "1580000",
    "end": "1589120"
  },
  {
    "text": "or some types uh at compilation time you do some computation to have an output",
    "start": "1589120",
    "end": "1596440"
  },
  {
    "text": "type Um and and the way you do that is you take two steps Uh you define a type",
    "start": "1596440",
    "end": "1602559"
  },
  {
    "text": "level function which can take all kinds of forms and be all kinds of different things Um and",
    "start": "1602559",
    "end": "1610080"
  },
  {
    "text": "then you need to apply that function during typeeing And I'll show you in an example in a",
    "start": "1610080",
    "end": "1616120"
  },
  {
    "text": "second Um but yeah in in real life there's a lightweight use of some type computation in this can build from",
    "start": "1616120",
    "end": "1622960"
  },
  {
    "text": "pattern in scholars collections Um so one one common way so if you want",
    "start": "1622960",
    "end": "1630720"
  },
  {
    "text": "to create this this type function um one common way to do it is to uh use",
    "start": "1630720",
    "end": "1638480"
  },
  {
    "text": "implicits which can be implicit values or or de uh you know implicit defs all",
    "start": "1638480",
    "end": "1644880"
  },
  {
    "text": "kinds of things and the example I'm going to show you is going to be a bunch of implicit values uh but you can use them for defining relationships between",
    "start": "1644880",
    "end": "1650720"
  },
  {
    "text": "types um and so here here in this little example I mean again this is a small",
    "start": "1650720",
    "end": "1656000"
  },
  {
    "text": "example The idea my my my goal is just to give you intuition Um but in this",
    "start": "1656000",
    "end": "1662240"
  },
  {
    "text": "example the idea is that uh like we have we want to just figure out a mapping from from country to city",
    "start": "1662240",
    "end": "1670000"
  },
  {
    "text": "uh or capital city rather So um our goal",
    "start": "1670000",
    "end": "1675039"
  },
  {
    "text": "is to actually do this little this very stupid little mapping computation at compile time Um but people might",
    "start": "1675039",
    "end": "1682080"
  },
  {
    "text": "normally do this you know at runtime right Um so here we have so so in in this class",
    "start": "1682080",
    "end": "1690960"
  },
  {
    "text": "has capital has two uh two type parameters uh one has to be a country",
    "start": "1690960",
    "end": "1696000"
  },
  {
    "text": "and one has to be a city as you can see uh and uh you can think of the the type",
    "start": "1696000",
    "end": "1701440"
  },
  {
    "text": "level function that we're trying to implement as as you know the the input being the country and the output being",
    "start": "1701440",
    "end": "1706720"
  },
  {
    "text": "the city Um and you know we in this case have a bunch of implicit values that in",
    "start": "1706720",
    "end": "1714720"
  },
  {
    "text": "scope that um do this mapping for us basically and sort of the magic part uh",
    "start": "1714720",
    "end": "1721840"
  },
  {
    "text": "of I mean this seems pretty straightforward but the the part that's actually kind of interesting is that in",
    "start": "1721840",
    "end": "1727679"
  },
  {
    "text": "this this uh this deflookup capital method",
    "start": "1727679",
    "end": "1733279"
  },
  {
    "text": "um this this has uh this this this this out this this return type here C uh is",
    "start": "1733279",
    "end": "1739760"
  },
  {
    "text": "calculated by the compiler So that's going to be the actual like value uh if",
    "start": "1739760",
    "end": "1745120"
  },
  {
    "text": "you want to call it a value but that like that's what we want that's what the compiler is going to figure out for us",
    "start": "1745120",
    "end": "1750399"
  },
  {
    "text": "So um you know you take as as implicit parameter uh has capital which like",
    "start": "1750399",
    "end": "1757120"
  },
  {
    "text": "these things are floating around in scope and if I provide um if I if I provide as a type uh the the the the",
    "start": "1757120",
    "end": "1765760"
  },
  {
    "text": "country where I'd like to look up the capital So in this case uh val C equals lookup capital France right here Um it",
    "start": "1765760",
    "end": "1773440"
  },
  {
    "text": "tells the compiler basically uh uh you know to it triggers look uh it",
    "start": "1773440",
    "end": "1780240"
  },
  {
    "text": "it triggers implicit search and uh and and which itself is is inter intertwined",
    "start": "1780240",
    "end": "1786320"
  },
  {
    "text": "with type inference and it figures out the the return type to be uh Paris So um",
    "start": "1786320",
    "end": "1793600"
  },
  {
    "text": "it's a it's a small stupid example but I mean if you want to think of it like your type is a value uh then this is a",
    "start": "1793600",
    "end": "1800159"
  },
  {
    "text": "way to do some very trivial computation but computation nonetheless um at at",
    "start": "1800159",
    "end": "1806000"
  },
  {
    "text": "comp compile time So the type checker calls our our type function and computes the the",
    "start": "1806000",
    "end": "1812480"
  },
  {
    "text": "capital of France Oh I I guess what I didn't say though is the way that you should apply these things uh",
    "start": "1812480",
    "end": "1818600"
  },
  {
    "text": "is well by by using uh an implicit",
    "start": "1818600",
    "end": "1824799"
  },
  {
    "text": "parameter for example in this case to trigger this implicit this implicit search which is sort of the type level",
    "start": "1824799",
    "end": "1829840"
  },
  {
    "text": "function Um so uh type level computation uh is",
    "start": "1829840",
    "end": "1837360"
  },
  {
    "start": "1832000",
    "end": "1832000"
  },
  {
    "text": "used all over the place Um not super widespread but used nonetheless So as I",
    "start": "1837360",
    "end": "1842799"
  },
  {
    "text": "mentioned can build from is one example uh where you know at compile time",
    "start": "1842799",
    "end": "1847919"
  },
  {
    "text": "sometimes frustratingly uh the compiler tries to figure out what the best the",
    "start": "1847919",
    "end": "1853200"
  },
  {
    "text": "best result type of like if you call some combinator on some collection uh tries to figure out what you should get",
    "start": "1853200",
    "end": "1859360"
  },
  {
    "text": "back Um and it you know that's something that you could think of as being totally",
    "start": "1859360",
    "end": "1865039"
  },
  {
    "text": "like a compile time type level thing right it's like doing computations at at at compile time",
    "start": "1865039",
    "end": "1871520"
  },
  {
    "text": "Um and then another another use case uh are phantom types",
    "start": "1871520",
    "end": "1877240"
  },
  {
    "text": "um which uh phantom types can be thought of as as types that exist only at compile time So they add additional",
    "start": "1877240",
    "end": "1883600"
  },
  {
    "text": "checks but they don't have a runtime representation themselves And you can uh using this sort of type level approach",
    "start": "1883600",
    "end": "1890640"
  },
  {
    "text": "you can you know for example make a list uh or a collection or something and",
    "start": "1890640",
    "end": "1896640"
  },
  {
    "text": "track the length of it at compile time And one one situation where this would be could",
    "start": "1896640",
    "end": "1903039"
  },
  {
    "text": "be useful is when you need to to zip two lists together or two two collections",
    "start": "1903039",
    "end": "1908080"
  },
  {
    "text": "together and want to make sure you want to make sure at compile you want to reject the code at compile time if they don't have if they're nonsensical and",
    "start": "1908080",
    "end": "1914320"
  },
  {
    "text": "they have different lengths So this is one example where you could use something like a phantom type",
    "start": "1914320",
    "end": "1920039"
  },
  {
    "text": "Um so uh the the my favorite uh use case",
    "start": "1920039",
    "end": "1926080"
  },
  {
    "text": "sort of or favorite thing about about using types in a powerful way is is uh",
    "start": "1926080",
    "end": "1931360"
  },
  {
    "text": "this this notion of of materialization Um Eugene likes materialization a lot as",
    "start": "1931360",
    "end": "1938000"
  },
  {
    "text": "well I know that for sure Um so materialization is",
    "start": "1938000",
    "end": "1943559"
  },
  {
    "text": "uh is all about trying to get rid of boilerplate when you are defining type",
    "start": "1943559",
    "end": "1948799"
  },
  {
    "text": "classes So if you wanted to uh have something be parameterized by a bunch of",
    "start": "1948799",
    "end": "1954559"
  },
  {
    "text": "a bunch of different types you have to basically write these type class instances for every type uh that you're",
    "start": "1954559",
    "end": "1960159"
  },
  {
    "text": "interested in uh uh having a type class instance for So if I wanted an ordering",
    "start": "1960159",
    "end": "1965760"
  },
  {
    "text": "of string or an ordering of something else um not all the time but sometimes uh you would you know you have to just",
    "start": "1965760",
    "end": "1971679"
  },
  {
    "text": "write all these different type class instances out Um and uh sometimes uh you can you",
    "start": "1971679",
    "end": "1978799"
  },
  {
    "start": "1973000",
    "end": "1973000"
  },
  {
    "text": "can make uh a generic function or gener I'm sorry a gen a generic implicit def",
    "start": "1978799",
    "end": "1986080"
  },
  {
    "text": "return a type class for some range of types And that can help by reducing boilerplate But sometimes you there's",
    "start": "1986080",
    "end": "1992640"
  },
  {
    "text": "just no way to use a an implicit generic sort of function",
    "start": "1992640",
    "end": "1998200"
  },
  {
    "text": "um to to to to abstract over sort of the the the the tedium of writing type class",
    "start": "1998200",
    "end": "2004080"
  },
  {
    "text": "instances So in those cases uh I mean this is like you know for example we can't abstract over all possible types",
    "start": "2004080",
    "end": "2010480"
  },
  {
    "text": "that a generic could take And I mean this is uh for example in this",
    "start": "2010480",
    "end": "2015600"
  },
  {
    "text": "serialization framework that that uh Eugene and Phil perpar and I worked on",
    "start": "2015600",
    "end": "2021519"
  },
  {
    "text": "um of course there's no way to know every possible type that you are going to uh you know need to generate",
    "start": "2021519",
    "end": "2029519"
  },
  {
    "text": "serializers for So uh in these cases uh we use uh macros actually to to help us",
    "start": "2029519",
    "end": "2037519"
  },
  {
    "text": "So um we basically just combine uh macros and and implicits",
    "start": "2037519",
    "end": "2044720"
  },
  {
    "text": "um you know in order to prevent there from being a growing number of implicit vals uh that that define or implicit",
    "start": "2044720",
    "end": "2052638"
  },
  {
    "text": "vowels that are basically your your type class instances Um and so in in the case of",
    "start": "2052639",
    "end": "2059599"
  },
  {
    "text": "serialization uh you would make a uh an implicit an implicit uh uh def like this",
    "start": "2059599",
    "end": "2066560"
  },
  {
    "text": "gen Pickler uh which itself uh is implemented by a macro and the way the m",
    "start": "2066560",
    "end": "2071839"
  },
  {
    "text": "like the way you do materialization is this macro uh inspects the type the type arguments So in this case it would",
    "start": "2071839",
    "end": "2077679"
  },
  {
    "text": "inspect this this t thing does something that corresponds to",
    "start": "2077679",
    "end": "2082960"
  },
  {
    "text": "sort of the logic of what it should do uh but you know evaluate to a type class",
    "start": "2082960",
    "end": "2088638"
  },
  {
    "text": "instance uh in the end Um and so that's sort of",
    "start": "2088639",
    "end": "2093760"
  },
  {
    "text": "the the intuition I hope it's hope it's pretty clear Um and then sort of like",
    "start": "2093760",
    "end": "2099599"
  },
  {
    "text": "the last last thing I wanted to sort of briefly uh like hopscotch over is uh is",
    "start": "2099599",
    "end": "2107520"
  },
  {
    "text": "dependent types I don't know if anybody's heard of these things before in the world Um I'm not going to give",
    "start": "2107520",
    "end": "2114720"
  },
  {
    "text": "you an academic treatment of them I want again my my goal is to try and be a little bit intuitive Um so I want to",
    "start": "2114720",
    "end": "2122640"
  },
  {
    "text": "tell you first what dependent types are in general Um there's a lot of languages",
    "start": "2122640",
    "end": "2128079"
  },
  {
    "text": "on the planet like Idris and and uh Agda and and Epigram and a bunch of",
    "start": "2128079",
    "end": "2134480"
  },
  {
    "text": "things that are you know fully dependently typed languages Um and and you might have heard okay well there are",
    "start": "2134480",
    "end": "2140240"
  },
  {
    "text": "dependent types in Scala um I mean my sav does a lot with these dependent types um what does that have to do with",
    "start": "2140240",
    "end": "2147520"
  },
  {
    "text": "the other thing and then also we have this notion of dot and which you might have heard of which is Martin's new",
    "start": "2147520",
    "end": "2153200"
  },
  {
    "text": "experimental compiler um and stands for dot is a cute little nickname which",
    "start": "2153200",
    "end": "2159119"
  },
  {
    "text": "stands for uh dot which itself is an acronym for dependent object types so these things all have the word dependent",
    "start": "2159119",
    "end": "2165200"
  },
  {
    "text": "in them are they related actually well we'll see So um just to give you an idea of",
    "start": "2165200",
    "end": "2171359"
  },
  {
    "text": "what a real dependent type is a full spectrum dependent type uh the idea is that uh types well actually oh oh I lost",
    "start": "2171359",
    "end": "2180960"
  },
  {
    "text": "I lost a transition Um so types depend on values I had this big thing So types",
    "start": "2180960",
    "end": "2187520"
  },
  {
    "text": "depend on values uh and and what that means is that uh in the type you can",
    "start": "2187520",
    "end": "2192880"
  },
  {
    "text": "include a logical proposition uh which says something about what the",
    "start": "2192880",
    "end": "2198160"
  },
  {
    "text": "values of those types should take right so um it gets a little bit complicated",
    "start": "2198160",
    "end": "2204960"
  },
  {
    "text": "because I'll I'll show you but a little example in a language called is this here",
    "start": "2204960",
    "end": "2211720"
  },
  {
    "text": "um the goal of this little thing here is to define a subset type which is kind of",
    "start": "2211720",
    "end": "2218320"
  },
  {
    "text": "like a refinement Um it's to to so so think of Z as an",
    "start": "2218320",
    "end": "2224200"
  },
  {
    "text": "integer and we want to make a new kind of Z Uh but we want to make uh Z star",
    "start": "2224200",
    "end": "2230880"
  },
  {
    "text": "only apply for things that aren't zero and Z z plus is uh things that are",
    "start": "2230880",
    "end": "2238560"
  },
  {
    "text": "are greater than zero Um so these this thing here this x",
    "start": "2238560",
    "end": "2244640"
  },
  {
    "text": "greater than zero is this logical proposition that you want to attach",
    "start": "2244640",
    "end": "2249920"
  },
  {
    "text": "right to the type that says something about the values that the that the type",
    "start": "2249920",
    "end": "2255440"
  },
  {
    "text": "can be represented in It's kind of a simple like example Um",
    "start": "2255440",
    "end": "2261599"
  },
  {
    "text": "another example that you might have heard of is being able to figure out at the type level whether or not you're",
    "start": "2261599",
    "end": "2268240"
  },
  {
    "text": "going to call head on an empty list These are things where values and types we can try to intertwine them and and",
    "start": "2268240",
    "end": "2274560"
  },
  {
    "text": "sort of make programs that know a little bit more It gets a little bit tricky though um because this is all based on",
    "start": "2274560",
    "end": "2280480"
  },
  {
    "text": "logic uh and so values of types have to contain proofs that these propositions are true",
    "start": "2280480",
    "end": "2287480"
  },
  {
    "text": "Um but another example uh is that of a of a binary tree Say we want to ensure",
    "start": "2287480",
    "end": "2294960"
  },
  {
    "text": "that whenever we make an update to that tree uh we want to make sure that it's balanced Um and so with dependent types",
    "start": "2294960",
    "end": "2301040"
  },
  {
    "text": "you could you know we can do that by having some kind of logical property attached to the data type Uh and it",
    "start": "2301040",
    "end": "2309359"
  },
  {
    "text": "could look something like this But this is just yeah and that's that I mean it's just another little example where they",
    "start": "2309359",
    "end": "2315359"
  },
  {
    "text": "could you could consider them useful but there's a a small caveat sounds really great sounds like you can um you know",
    "start": "2315359",
    "end": "2322160"
  },
  {
    "text": "get rid of a lot of runtime errors by having dependent types because you know any boundary conditions or anything else",
    "start": "2322160",
    "end": "2327200"
  },
  {
    "text": "you can try to find a way to get rid of Uh however because uh you",
    "start": "2327200",
    "end": "2335359"
  },
  {
    "text": "know so yeah the idea is that you're mixing values and types uh but you need",
    "start": "2335400",
    "end": "2341359"
  },
  {
    "text": "proofs about these properties as well um which means that a a dynamically typed",
    "start": "2341359",
    "end": "2347920"
  },
  {
    "text": "dependently typed programming language uh can also be should also be able to be used as some type of logic So um in",
    "start": "2347920",
    "end": "2355760"
  },
  {
    "text": "order and in order for logic to be consistent we need to require we need all kinds of very interesting requirements like you know um programs",
    "start": "2355760",
    "end": "2362880"
  },
  {
    "text": "have to be total uh they can't crash or they can't they can't ever they can't",
    "start": "2362880",
    "end": "2369040"
  },
  {
    "text": "allow non-termination which in a real programming language is is not yes is there a reason that's a more serious",
    "start": "2369040",
    "end": "2376200"
  },
  {
    "text": "problem than not because I mean that that case is true regardless of yeah so",
    "start": "2376200",
    "end": "2382079"
  },
  {
    "text": "so the reason the reason why is is so so I'm not quite sure like what you're asking",
    "start": "2382079",
    "end": "2388280"
  },
  {
    "text": "Um so in order for so so everything is based on like logic and proofs right so",
    "start": "2388280",
    "end": "2394880"
  },
  {
    "text": "u in order to prove anything you you have to generally you know not get in a",
    "start": "2394880",
    "end": "2400079"
  },
  {
    "text": "caught in a situation where stuff doesn't terminate right and so if people are using um if if people are using",
    "start": "2400079",
    "end": "2406320"
  },
  {
    "text": "these programming languages to do the things that they do in them they need to they need that the programs not terminate because typically what they're",
    "start": "2406320",
    "end": "2412800"
  },
  {
    "text": "doing is um well like I was going to say in the next slide um proving theorems Uh",
    "start": "2412800",
    "end": "2418800"
  },
  {
    "text": "these languages are proving theorems Um",
    "start": "2418800",
    "end": "2424599"
  },
  {
    "text": "so the due to these caveats uh it's not really like you know you just you just",
    "start": "2424599",
    "end": "2430960"
  },
  {
    "text": "it just will not compile You cannot write something that doesn't terminate basically So um these caveats I'm sorry",
    "start": "2430960",
    "end": "2437839"
  },
  {
    "start": "2436000",
    "end": "2436000"
  },
  {
    "text": "do these caveats fully dependently typeed languages have a tendency to be useful for theorem proving and uh that's",
    "start": "2437839",
    "end": "2444320"
  },
  {
    "text": "popular in in the world of verification where um uh you know you've got some",
    "start": "2444320",
    "end": "2450079"
  },
  {
    "text": "closed world program and you want to just ensure that it's correct make correctly making decisions So I mean lot",
    "start": "2450079",
    "end": "2456640"
  },
  {
    "text": "there's uh infinity research and verification of compilers and and",
    "start": "2456640",
    "end": "2461680"
  },
  {
    "text": "there's even this JSERT which certifies a JavaScript",
    "start": "2461680",
    "end": "2466839"
  },
  {
    "text": "interpreter but anyway the point is that that um a subset it's a subset it also",
    "start": "2466839",
    "end": "2473040"
  },
  {
    "text": "verified the specification and all these other things but that's what these languages are used for um because of these these sort of um aspects of their",
    "start": "2473040",
    "end": "2480880"
  },
  {
    "text": "design it makes it difficult to write a web server in them right you just Sorry",
    "start": "2480880",
    "end": "2487000"
  },
  {
    "text": "Um so that brings me to Scala Well what the hell does that have to do with Scala Actually not very much Um because",
    "start": "2487000",
    "end": "2495359"
  },
  {
    "text": "we have dependent types but they're not the same kind You can't just attach an arbitrary uh um proposition in logic to",
    "start": "2495359",
    "end": "2502720"
  },
  {
    "text": "our types and and do anything with them I mean these are all just based on paths usually right Um and you have these",
    "start": "2502720",
    "end": "2509200"
  },
  {
    "text": "dependent method types as well uh which you might have run into And I'm running a little bit low on time Um but this I'm",
    "start": "2509200",
    "end": "2517680"
  },
  {
    "start": "2512000",
    "end": "2512000"
  },
  {
    "text": "just going to give you the gist of this Um so you can use these dependent types to have a a type safe key value store Um",
    "start": "2517680",
    "end": "2525200"
  },
  {
    "text": "where if you have for example in this uh this class do I have a mouse No Okay Um",
    "start": "2525200",
    "end": "2533680"
  },
  {
    "text": "in this class awesome DB um you have this valid data map where you your key",
    "start": "2533680",
    "end": "2540319"
  },
  {
    "text": "you have a key value uh a key and and a value and your value is represented as",
    "start": "2540319",
    "end": "2546280"
  },
  {
    "text": "any and you want to you know reject things at compile time if if you know",
    "start": "2546280",
    "end": "2552400"
  },
  {
    "text": "you you people are passing in the wrong wrong values Sure Uh and basically the",
    "start": "2552400",
    "end": "2557920"
  },
  {
    "text": "idea is that you can use um you can use sort of nesting of objects and these",
    "start": "2557920",
    "end": "2563440"
  },
  {
    "text": "dependent types these these dependent these these types that are are dependent on on this nesting and on these paths to",
    "start": "2563440",
    "end": "2570880"
  },
  {
    "text": "ensure that uh you always you know you get compilation errors over over a bunch",
    "start": "2570880",
    "end": "2576640"
  },
  {
    "text": "of you know weird runtime errors So um the idea uh in few seconds is that um if",
    "start": "2576640",
    "end": "2585040"
  },
  {
    "text": "you for example uh in this object keys you want to create uh a new key a new key with where its value is a string or",
    "start": "2585040",
    "end": "2593119"
  },
  {
    "text": "its value is an int uh you can do that So we know statically that this should always be an int Uh and you can set it",
    "start": "2593119",
    "end": "2599040"
  },
  {
    "text": "in this data store thing down here set keys.fu uh 23 in your in your in your",
    "start": "2599040",
    "end": "2605440"
  },
  {
    "text": "new DB thing um and you can get it and it gives you more type information than",
    "start": "2605440",
    "end": "2610480"
  },
  {
    "text": "just any it knows that it's an int Um and of course if you try to pass u you",
    "start": "2610480",
    "end": "2616880"
  },
  {
    "text": "know a string to the thing where we know it should be an int it doesn't compile Um so with a traditional key value store",
    "start": "2616880",
    "end": "2622560"
  },
  {
    "text": "you can insert values of the wrong type but path dependent types help us enforce that the type specified in each key",
    "start": "2622560",
    "end": "2628240"
  },
  {
    "text": "always match the corresponding value So um I I'll I'll wrap up Um but these",
    "start": "2628240",
    "end": "2635119"
  },
  {
    "text": "things are are actually taken to some real level of utility in languages I'm sorry in libraries like Miles shaven",
    "start": "2635119",
    "end": "2641839"
  },
  {
    "text": "miles my haven shapeless library Um and uh yeah I didn't I didn't I",
    "start": "2641839",
    "end": "2648400"
  },
  {
    "start": "2645000",
    "end": "2645000"
  },
  {
    "text": "didn't get to how this relates to but um basically",
    "start": "2648400",
    "end": "2653480"
  },
  {
    "text": "uh is a research compiler which which um experiments with these with with uh",
    "start": "2653480",
    "end": "2660400"
  },
  {
    "text": "which it basically does projections to try and simplify Scala's type system by",
    "start": "2660400",
    "end": "2666079"
  },
  {
    "text": "um by representing more things as like abstract types and stuff like that You don't lose anything You don't lose",
    "start": "2666079",
    "end": "2671839"
  },
  {
    "text": "language features you just end up finding ways to represent them with a smaller subset Um and and and dot",
    "start": "2671839",
    "end": "2679680"
  },
  {
    "text": "dependent object types is is actually just a calculus Uh and and these things like I said have nothing to do with",
    "start": "2679680",
    "end": "2684960"
  },
  {
    "text": "really uh like coaul and and ada and these other languages But I can stop there",
    "start": "2684960",
    "end": "2692319"
  },
  {
    "text": "Yes But uh you don't it's just a type checker right now It's no there's no you",
    "start": "2692319",
    "end": "2697760"
  },
  {
    "text": "can't like compile anything into anything that you can use You can uh if you but there's I don't even think you",
    "start": "2697760",
    "end": "2704800"
  },
  {
    "text": "can pretty print trees that come out of it yet Okay Um Martin has been working on it for a year now Uh and he has",
    "start": "2704800",
    "end": "2712240"
  },
  {
    "text": "successfully uh compiled the Scallo compiler and whatnot with it and a number of things that are not trivial Um",
    "start": "2712240",
    "end": "2719440"
  },
  {
    "text": "but he's he's a type checker kind of guy He's not a backend person So now we're trying to figure out how to reuse parts",
    "start": "2719440",
    "end": "2726400"
  },
  {
    "text": "of the c you know pieces of the current Scola compiler's back end to hook that up to do and to see if we can you know",
    "start": "2726400",
    "end": "2733680"
  },
  {
    "text": "compile all the way through any arbitrary Scola program",
    "start": "2733680",
    "end": "2740440"
  },
  {
    "text": "It's on GitHub Yeah But you just can't do anything with it I mean un you can",
    "start": "2740880",
    "end": "2748920"
  },
  {
    "text": "Yep So structural typing has made I don't know what the current status is",
    "start": "2749040",
    "end": "2754079"
  },
  {
    "text": "Have some performance impacts Yeah If you do that uh can you talk anything about the output of that Uh and if any",
    "start": "2754079",
    "end": "2761119"
  },
  {
    "text": "of these other uh aspects of the type system have any other kind of similar performance consider the only thing the",
    "start": "2761119",
    "end": "2767680"
  },
  {
    "text": "only thing in the type system that that you know incurs a cost is using an actual structural type because that",
    "start": "2767680",
    "end": "2773440"
  },
  {
    "text": "makes these reflective calls uh which uh I believe at least Daniel Spwack at one",
    "start": "2773440",
    "end": "2778640"
  },
  {
    "text": "point figured out how you could get rid of this reflective call Um but uh",
    "start": "2778640",
    "end": "2784160"
  },
  {
    "text": "otherwise um as far as I know I don't none of these other type none of these other uh like type system constructs or",
    "start": "2784160",
    "end": "2791359"
  },
  {
    "text": "features or whatever they don't do anything else at compile time It's all totally static So you don't have to I'm sorry don't do anything else at runtime",
    "start": "2791359",
    "end": "2797520"
  },
  {
    "text": "It's all totally static So I I I don't think there are any other sort of type",
    "start": "2797520",
    "end": "2802720"
  },
  {
    "text": "system performance things other than the compiler is slow Nothing at runtime",
    "start": "2802720",
    "end": "2808680"
  },
  {
    "text": "Um yes Yeah I was just wondering",
    "start": "2809359",
    "end": "2817640"
  },
  {
    "text": "what kind of strategies do you use",
    "start": "2822960",
    "end": "2830440"
  },
  {
    "text": "uh from a high level How so You're going to make",
    "start": "2832800",
    "end": "2839200"
  },
  {
    "text": "Yeah So um like I can uh so so I mean I guess pickling is is a pretty",
    "start": "2843119",
    "end": "2848880"
  },
  {
    "text": "straightforward example in that like you have this pickle method uh which you want to have implemented and you know",
    "start": "2848880",
    "end": "2854319"
  },
  {
    "text": "that you want you know to take in some arbitrary type and that you want to emit you know an array of bytes for example",
    "start": "2854319",
    "end": "2860319"
  },
  {
    "text": "So you have that much shape information Um and basically you you know you want",
    "start": "2860319",
    "end": "2865359"
  },
  {
    "text": "to be able to figure out how to serialize different instances or",
    "start": "2865359",
    "end": "2871200"
  },
  {
    "text": "different types of objects or whatever So the macro itself would be kind of going around and and traversing like",
    "start": "2871200",
    "end": "2876720"
  },
  {
    "text": "this this object and figuring out what it is and then figuring out how to to to",
    "start": "2876720",
    "end": "2881800"
  },
  {
    "text": "to you know implement the stuff in that type class instance But the whole point",
    "start": "2881800",
    "end": "2887280"
  },
  {
    "text": "is you should be able to pass any arbitrary type to it and then macro does all of the sort of static work of you",
    "start": "2887280",
    "end": "2893240"
  },
  {
    "text": "know stuff that's not so simple and and yeah and then you can make that macro",
    "start": "2893240",
    "end": "2899200"
  },
  {
    "text": "implicit and then the pattern applies to code generation basically is the observation if it's if that's clear I",
    "start": "2899200",
    "end": "2905920"
  },
  {
    "text": "hope it's clear Okay But yeah I think I think uh we're over time so",
    "start": "2905920",
    "end": "2914000"
  },
  {
    "text": "thanks [Applause]",
    "start": "2914000",
    "end": "2923889"
  }
]