[
  {
    "start": "0",
    "end": "101000"
  },
  {
    "text": "[Music]",
    "start": "2020",
    "end": "14789"
  },
  {
    "text": "so the title of this presentation is hanging up on callbacks more than just float control with ecmascript 6",
    "start": "16840",
    "end": "22439"
  },
  {
    "text": "generators I came up with the title of this presentation and I was so pleased with myself that I shared it with all my",
    "start": "22439",
    "end": "27640"
  },
  {
    "text": "co-workers was like you're done with callback you're hanging up on them right and they all gave me the same face that",
    "start": "27640",
    "end": "34160"
  },
  {
    "text": "you guys are giving me right now so I probably got to change the title of this thing anyways um if you can't be",
    "start": "34160",
    "end": "40280"
  },
  {
    "text": "bothered to like sit here and watch me talk about generators um you can see a bunch of working demos of ecmascript 6",
    "start": "40280",
    "end": "47000"
  },
  {
    "text": "generators in action assuming you have a web browser that uh implements generators as they currently exist in",
    "start": "47000",
    "end": "53280"
  },
  {
    "text": "the es6 specification the draft specification um so if you got a newer Firefox or Chrome Canary you you just go",
    "start": "53280",
    "end": "60280"
  },
  {
    "text": "to this Earl and play around with stuffff and ignore everything I'm about to say um well first of all how many of you",
    "start": "60280",
    "end": "66080"
  },
  {
    "text": "have worked with generators in JavaScript already yeah couple people all right",
    "start": "66080",
    "end": "71920"
  },
  {
    "text": "what about fibers in nodland no yeah all right awesome okay",
    "start": "71920",
    "end": "77360"
  },
  {
    "text": "well you guys know everything you can go home now and I'll talk to everybody else um by me developer at Carbon 5 I",
    "start": "77360",
    "end": "83600"
  },
  {
    "text": "live in Los Angeles right now I'm originally from Seattle I like to tell that to people when I come up to San Francisco so they don't think I'm like a",
    "start": "83600",
    "end": "89000"
  },
  {
    "text": "lame La person um these slides suck but basically I'm I'm an aging hipster I live in Venice so",
    "start": "89000",
    "end": "95720"
  },
  {
    "text": "you know wear tide pants right H schal um so what am I going to talk about up here other than just stand around tell",
    "start": "95720",
    "end": "101560"
  },
  {
    "start": "101000",
    "end": "101000"
  },
  {
    "text": "jokes this this is sort of the uh this is what I would say is like common",
    "start": "101560",
    "end": "106880"
  },
  {
    "text": "practice in JavaScript land um we've got some nested callbacks we've got some",
    "start": "106880",
    "end": "112079"
  },
  {
    "text": "Plumbing of error messages from different different event excuse me different asynchronous callbacks it's a",
    "start": "112079",
    "end": "118560"
  },
  {
    "text": "mess um look at this code think about the kind of code that",
    "start": "118560",
    "end": "124479"
  },
  {
    "text": "you write and wonder to yourself like can we do any better well the answer to the question is yes we can do better",
    "start": "124479",
    "end": "131800"
  },
  {
    "text": "it's about turning that code into something that looks like this these two pieces of code functionally are",
    "start": "131800",
    "end": "139680"
  },
  {
    "text": "identical we're performing some asynchronous operations we're doing a let's just",
    "start": "139680",
    "end": "145840"
  },
  {
    "text": "assume that the implementation of this get function issues an HP get to/ Fu and post issues an HP request to bar we",
    "start": "145840",
    "end": "152840"
  },
  {
    "text": "still have the single threaded event loop we're doing some Plumbing of exceptions back to some centralized",
    "start": "152840",
    "end": "157879"
  },
  {
    "text": "error handling but we can do it in a whole lot less lines and it's a whole lot less gross so this is going to be",
    "start": "157879",
    "end": "164440"
  },
  {
    "text": "about generators this is going to be about making this dream your reality so really what is all about um",
    "start": "164440",
    "end": "170280"
  },
  {
    "start": "169000",
    "end": "169000"
  },
  {
    "text": "it is my position that programming around asynchronous callbacks is hard it's harder than it really needs to be",
    "start": "170280",
    "end": "176440"
  },
  {
    "text": "but because of the uh concurrency model provided to us by the browsers and and also uh in nodland it's just something",
    "start": "176440",
    "end": "183799"
  },
  {
    "text": "that we've become accustomed to doing ecmascript 6 the draft specification talks about generators which uh I will",
    "start": "183799",
    "end": "191159"
  },
  {
    "text": "demonstrate alleviate some of the pain that you're experiencing programming around a synchronous callback today um",
    "start": "191159",
    "end": "196959"
  },
  {
    "text": "I'll show you how to leverage these generators to move from writing your code in continuation passing style which would be like asking the computer to do",
    "start": "196959",
    "end": "203480"
  },
  {
    "text": "something and then at the same time passing it uh instructions for what to do next call back uh to direct style",
    "start": "203480",
    "end": "209080"
  },
  {
    "text": "programming which is what you're going to see in like python or Ruby or all these other programming languages where",
    "start": "209080",
    "end": "214120"
  },
  {
    "text": "you can do you know x equals get to some Earl and you don't move down to the next line until that operation is completed",
    "start": "214120",
    "end": "221000"
  },
  {
    "text": "without losing all of the magic of the single-threaded JavaScript uh event Loops that you love and know",
    "start": "221000",
    "end": "227040"
  },
  {
    "text": "today okay so in order to talk about how awesome generators are I need to enumerate some of the things that I",
    "start": "227040",
    "end": "232239"
  },
  {
    "text": "think suck about working with asynchronous callbacks um it is my position that it is a non-trivial amount",
    "start": "232239",
    "end": "238879"
  },
  {
    "text": "of effort to follow the path of execution through a program that is written leveraging heavily asynchronous",
    "start": "238879",
    "end": "244879"
  },
  {
    "text": "callbacks if you write JavaScript all the time you sort of just become numb to this pain but people coming into the",
    "start": "244879",
    "end": "250159"
  },
  {
    "text": "language uh from Ruby python Java whatever have to wrap their head around some of the strange things that they're",
    "start": "250159",
    "end": "256320"
  },
  {
    "text": "seeing they do things like this we've all done this the first time that we",
    "start": "256320",
    "end": "261600"
  },
  {
    "text": "started writing JavaScript um we're issuing an HP request to slash token we're using the result of that to issue",
    "start": "261600",
    "end": "268400"
  },
  {
    "text": "an HP request to SL profile using that token so we're doing two asynchronous things in series and then when we",
    "start": "268400",
    "end": "273919"
  },
  {
    "text": "finally get that last result what we would like to do is output the profile name to the console we all know because",
    "start": "273919",
    "end": "280960"
  },
  {
    "text": "we're awesome JavaScript people that we have to put that in there and all this nesting is somewhat significant and",
    "start": "280960",
    "end": "286720"
  },
  {
    "text": "these nested functions imply in order of operations um that you can't get by simply going top to bottom that kind of",
    "start": "286720",
    "end": "294840"
  },
  {
    "text": "sucks I will also demonstrate that handling exceptions across event Loops tick event Loop tix is a pain so um I",
    "start": "294840",
    "end": "302759"
  },
  {
    "start": "302000",
    "end": "302000"
  },
  {
    "text": "showed you this in the first example um look at this code look at this code and",
    "start": "302759",
    "end": "307919"
  },
  {
    "text": "think about what it's doing here so assume that this call to Su li. getet dat is a synchronous operation so the",
    "start": "307919",
    "end": "316000"
  },
  {
    "text": "synchronous operation being what it is I can catch errors with a simple TR catch block that is built into the language",
    "start": "316000",
    "end": "321720"
  },
  {
    "text": "right that's that's good but if I have errors that arise inside of the",
    "start": "321720",
    "end": "326800"
  },
  {
    "text": "callbacks uh excuse me if I have errors that are given to me um as a result of some asynchronous",
    "start": "326800",
    "end": "332600"
  },
  {
    "text": "operation and I want to handle those things in the same way I have to Plum that error back to some centralized uh",
    "start": "332600",
    "end": "339199"
  },
  {
    "text": "exception handling mechanism by virtue of a closure that's kind of a bummer you can alleviate some of this pain by using",
    "start": "339199",
    "end": "345080"
  },
  {
    "text": "promises but it's a whole lot of moving stuff around to try to handle the fact that you can't uh reli you can't easily",
    "start": "345080",
    "end": "352240"
  },
  {
    "text": "trap um you can't easily catch errors that arise across different ticks of of",
    "start": "352240",
    "end": "357840"
  },
  {
    "text": "the event Loop that's a bummer I think we can do better than that so as I was mentioning the Su lib get data if an",
    "start": "357840",
    "end": "364919"
  },
  {
    "text": "error arises from the call to get data or something you know inside of that a synchronous operation I can use Tri",
    "start": "364919",
    "end": "371080"
  },
  {
    "text": "catch which is built into the languages excuse me built into the language it'll pump it back to this on error function",
    "start": "371080",
    "end": "376520"
  },
  {
    "text": "that I've got at the top but if anything happens here I have to pass this stuff up via closure because they uh they're",
    "start": "376520",
    "end": "383919"
  },
  {
    "text": "not happening in the same tick of the event Loop that this Tri catch uh is is",
    "start": "383919",
    "end": "389840"
  },
  {
    "text": "uh is being invoked last thing I want to talk about um async flow control is hard um it",
    "start": "389840",
    "end": "396960"
  },
  {
    "text": "becomes easier when you use some libraries like promises or when you use async uh but it's harder than it needs",
    "start": "396960",
    "end": "403080"
  },
  {
    "text": "to be and if you want to do it in just regular JavaScript um you're going to have some problems of legibility so",
    "start": "403080",
    "end": "410400"
  },
  {
    "start": "407000",
    "end": "407000"
  },
  {
    "text": "looking at this code uh who can tell me what it's doing at a high level",
    "start": "410400",
    "end": "416440"
  },
  {
    "text": "anybody trade faces okay I'll give you a hint it's doing two things at the same time it's issuing this request to get",
    "start": "416440",
    "end": "423599"
  },
  {
    "text": "token and it's issuing a request to get key and when both of those things are done then we're going to issue a post to",
    "start": "423599",
    "end": "430039"
  },
  {
    "text": "off and then after that's done then we're going to redirect to dashboard and what I'm trying to demonstrate here is",
    "start": "430039",
    "end": "435319"
  },
  {
    "text": "doing two things uh concurrently and then something else and then something else in series so there's all sorts of",
    "start": "435319",
    "end": "443560"
  },
  {
    "text": "lame stuff I have to do I got this laser pointer that helps me Point there's all this lame stuff I have to do to make the call back to this request know about if",
    "start": "443560",
    "end": "451280"
  },
  {
    "text": "this thing is done such that we move on to login we can alleviate some of this pain by using promises but it's still a",
    "start": "451280",
    "end": "457960"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "lot of code um it's a little easier to understand especially if you're familiar with promises API but the same sort of",
    "start": "457960",
    "end": "464360"
  },
  {
    "text": "thing is happening I'm doing two things concurrently and then I'm doing two things in series we can use async to do",
    "start": "464360",
    "end": "470360"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "this but my God look at all that code it's totally it's it's verbose it's",
    "start": "470360",
    "end": "476360"
  },
  {
    "text": "explicit but that is a lot of code and I think that we can totally do way better",
    "start": "476360",
    "end": "481840"
  },
  {
    "text": "than that using generators okay so what are generators",
    "start": "481840",
    "end": "487240"
  },
  {
    "text": "um I'm not going to read all that to you but generators are essentially functions that can suspend Midway through their",
    "start": "487240",
    "end": "492639"
  },
  {
    "text": "function body so we're used to functions that you enter at the top and you exit out of the bottom um they either return",
    "start": "492639",
    "end": "497919"
  },
  {
    "text": "something explicitly or they return the implicit uh undefined but generator functions are different and that you can",
    "start": "497919",
    "end": "505639"
  },
  {
    "text": "re-enter them in the middle why that is interesting we'll talk about a second um",
    "start": "505639",
    "end": "511199"
  },
  {
    "text": "you may be rolling your eyes when I'm talking about ecmascript 6 because you have to support i7 or whatever thing you",
    "start": "511199",
    "end": "516200"
  },
  {
    "text": "have to do in your miserable job but uh you can use some of these features in ecmascript 5 compliant browsers today as",
    "start": "516200",
    "end": "523680"
  },
  {
    "text": "long as you're willing to transpile with Google Tracer or if you're building some rad admin tool and you can use one of",
    "start": "523680",
    "end": "529240"
  },
  {
    "text": "these newer browsers like Firefox 27 I'm not sure how far back you have to go with Firefox before you uh get support",
    "start": "529240",
    "end": "534920"
  },
  {
    "text": "for these apis but I'm using Firefox 27 it's working today Chrome con AR will",
    "start": "534920",
    "end": "540040"
  },
  {
    "text": "work and you can use this stuff in node right now as of node 011 with the",
    "start": "540040",
    "end": "545079"
  },
  {
    "text": "harmony flag so you can actually start using this stuff okay so generators I talked a lot",
    "start": "545079",
    "end": "551320"
  },
  {
    "text": "about how they're awesome I'm going to show you the syntax um and we'll slowly move from like the hello world of",
    "start": "551320",
    "end": "556839"
  },
  {
    "text": "generators into something that will enable you to write uh real code in your applications today using this direct",
    "start": "556839",
    "end": "562920"
  },
  {
    "text": "style that I've been talking about okay so the hello world of generator functions is an iterator",
    "start": "562920",
    "end": "569880"
  },
  {
    "text": "um there's some interesting syntax here uh well first of all let me back up what we're going to do here is we're going to Output the Fibonacci sequence of numbers",
    "start": "569880",
    "end": "578040"
  },
  {
    "text": "um instead of having to generate some huge chunk of Fibonacci Sequence excuse me some huge chunk of the infinitely",
    "start": "578040",
    "end": "584680"
  },
  {
    "start": "580000",
    "end": "580000"
  },
  {
    "text": "long range of Fibonacci sequence numbers we're only going to generate them one at a time so in order to do that we're",
    "start": "584680",
    "end": "590000"
  },
  {
    "text": "going to use generator it's got some interesting syntax that you may or may not have seen before first thing to note",
    "start": "590000",
    "end": "595760"
  },
  {
    "text": "is the asterisk after function that designate that denotes not that this function that we're talking about here",
    "start": "595760",
    "end": "601240"
  },
  {
    "text": "is a generator function which behaves fundamentally in a different way than a regular uh function that you used to in",
    "start": "601240",
    "end": "606440"
  },
  {
    "text": "JavaScript the other new word you're going to see here is yield um which can",
    "start": "606440",
    "end": "611800"
  },
  {
    "text": "only be found inside of generator functions so imagine the code on the",
    "start": "611800",
    "end": "616880"
  },
  {
    "text": "left is uh is the definition of Fibonacci Sequence and then you know if you moved this chunk of code underneath",
    "start": "616880",
    "end": "622079"
  },
  {
    "text": "it it's all the same program um I just couldn't fit it all in the screen top to bottom so we'll see how the caller and",
    "start": "622079",
    "end": "628680"
  },
  {
    "text": "the call E sort of bounce back and forth giving control uh depending on the state of the generator function okay so first",
    "start": "628680",
    "end": "636000"
  },
  {
    "text": "thing we're going to do we're going to invoke our generator function that is going to return a generator object which",
    "start": "636000",
    "end": "643440"
  },
  {
    "text": "we're going to store in this variable seq that has not executed the body that",
    "start": "643440",
    "end": "649320"
  },
  {
    "text": "we haven't started executing the code in the function body yet we just initialized this generator function now we have a hook to this thing called a",
    "start": "649320",
    "end": "655560"
  },
  {
    "text": "generator object so the next thing we're going to do is we're going to call next and next is going to start uh evaluating",
    "start": "655560",
    "end": "663320"
  },
  {
    "text": "the code in the body of the generator function um from where we left where we left off in this case uh at the very top",
    "start": "663320",
    "end": "670480"
  },
  {
    "text": "of the function so we're going to do our variable declaration we're going to do some assignment a equals 0 b equals 1 C",
    "start": "670480",
    "end": "676160"
  },
  {
    "text": "equals 0 we're going to hit this while we're going to go into the while block and we're going to continue evaluating",
    "start": "676160",
    "end": "682120"
  },
  {
    "text": "code until we hit a yield um if this were not a generator function and you did not have a yield there this would",
    "start": "682120",
    "end": "688399"
  },
  {
    "text": "just be an infinite Loop right I've got like while true and uh as we know while true will just keep going until",
    "start": "688399",
    "end": "694399"
  },
  {
    "text": "something makes it stop generator functions are a little different we're evaluating into this while loop we hit",
    "start": "694399",
    "end": "699680"
  },
  {
    "text": "this yield keyword we evaluate the right side the expression found on the right side of the yield keyword and then we",
    "start": "699680",
    "end": "706519"
  },
  {
    "text": "suspend the generator function so we do not move down to the next line which",
    "start": "706519",
    "end": "712000"
  },
  {
    "text": "does this assignment C equals a b you know B CB and all that other good stuff",
    "start": "712000",
    "end": "717120"
  },
  {
    "text": "so we evaluate as I mentioned we evaluate the right side side of this yield function and we suspend giving control back to the caller and what we",
    "start": "717120",
    "end": "724000"
  },
  {
    "text": "yield this expression on the right side of yield will be made available as a property of the object that we return so",
    "start": "724000",
    "end": "731360"
  },
  {
    "text": "using substitution just you know as a thought you know exercise a was equal to zero the first time around so when we",
    "start": "731360",
    "end": "738000"
  },
  {
    "text": "yielded control from the generator function back to our regular code the value of a substitutes in for value on",
    "start": "738000",
    "end": "745480"
  },
  {
    "text": "the right hand side so then we move down to the next function uh excuse me the next line we call next and we reenter",
    "start": "745480",
    "end": "752199"
  },
  {
    "text": "our generator function immediately after uh the yield point so not at the end of",
    "start": "752199",
    "end": "758199"
  },
  {
    "text": "the line but like immediately after this expression a right here on the right so",
    "start": "758199",
    "end": "764279"
  },
  {
    "text": "then we move down to do this uh this um assignment Cal a AAL B Bal C plus b",
    "start": "764279",
    "end": "770000"
  },
  {
    "text": "moving to the next uh the next um number in the Fibonacci sequence we go back to",
    "start": "770000",
    "end": "776040"
  },
  {
    "text": "this while true which is still true and then we hit our yield Point once again",
    "start": "776040",
    "end": "781600"
  },
  {
    "text": "freezing the generator function giving control back to the caller and returning the value of a which is then available",
    "start": "781600",
    "end": "789639"
  },
  {
    "text": "via the value property of the return object here so using substitution you can see that we now have one you can",
    "start": "789639",
    "end": "795440"
  },
  {
    "text": "kind of see where I'm going here with this you can mentally map we're going to do the Fibonacci sequence of numbers and",
    "start": "795440",
    "end": "800600"
  },
  {
    "text": "you can sort of see how we're bouncing back and forth between the generator function and the code that uh is",
    "start": "800600",
    "end": "807160"
  },
  {
    "text": "invoking the next method on on the generator object that it's got a hook to so I realize this example is a little",
    "start": "807160",
    "end": "813959"
  },
  {
    "text": "lame but it's fun it is important to understand the very basics of this thing or you'll get totally lost when we get",
    "start": "813959",
    "end": "819600"
  },
  {
    "text": "into the more complex examples later so visualizing multiple entry points the",
    "start": "819600",
    "end": "825199"
  },
  {
    "start": "822000",
    "end": "822000"
  },
  {
    "text": "Fibonacci sequence is awesome but we can get a little more complex visualizing",
    "start": "825199",
    "end": "831399"
  },
  {
    "text": "what I was talking about where you're re-entering a program not at the end of the line not at the beginning of the top but somewhere some at the like the end",
    "start": "831399",
    "end": "838360"
  },
  {
    "text": "of an expression so okay looking at this code I bet somebody can guess let's just assume",
    "start": "838360",
    "end": "844440"
  },
  {
    "text": "that log is an alias for console.log can somebody tell me and I'm not going to keep going until someone tells me what",
    "start": "844440",
    "end": "850720"
  },
  {
    "text": "is going to be output in the console when I evaluate this code right here you",
    "start": "850720",
    "end": "856399"
  },
  {
    "text": "have five minutes come on somebody Brave huh a all right yeah what do you",
    "start": "856399",
    "end": "866079"
  },
  {
    "text": "got Matt 100 you are going to see something like",
    "start": "866079",
    "end": "873360"
  },
  {
    "text": "a hundred all right that was good we'll keep going with this you're",
    "start": "873360",
    "end": "881079"
  },
  {
    "text": "fired okay so we saw before that the first thing you're going to do with your generator function is you're going to",
    "start": "881079",
    "end": "886519"
  },
  {
    "text": "invoke it which is going to give you back this generator object which has these methods next and so on and so",
    "start": "886519",
    "end": "891680"
  },
  {
    "text": "forth on there so first step invoke po generator we get a hook back to the generator uh object which we then store",
    "start": "891680",
    "end": "898639"
  },
  {
    "text": "in very variable G next line we're going to call the next method which is going to start evaluation of the code in the",
    "start": "898639",
    "end": "904880"
  },
  {
    "text": "PO generator function body from top to bottom so the first thing we do uh we're going to declare the variable result",
    "start": "904880",
    "end": "912160"
  },
  {
    "text": "then we are going to keep evaluating code on the right hand side obeying the order of operations that the language enforces",
    "start": "912160",
    "end": "919000"
  },
  {
    "text": "and we're going to find this first yield keyword so not not both of them but just the first one we're going to evaluate",
    "start": "919000",
    "end": "925880"
  },
  {
    "text": "the expression on the right hand side of yield and we're going to suspend the how generator function which makes the ve",
    "start": "925880",
    "end": "932360"
  },
  {
    "text": "makes the value that we yield as the result of evaluating that expression on the right hand side of yield available",
    "start": "932360",
    "end": "937600"
  },
  {
    "text": "to the caller so at this point substitution the string a is now output",
    "start": "937600",
    "end": "943959"
  },
  {
    "text": "to the console it's important to note that this PO generator function is now suspended it's in a suspended State um",
    "start": "943959",
    "end": "950839"
  },
  {
    "text": "you can read the ecmascript 6 specification that talks about the different states that functions can be in but generator functions uh introduce",
    "start": "950839",
    "end": "957560"
  },
  {
    "text": "a new state which is supended which this function is in right now okay so next",
    "start": "957560",
    "end": "964240"
  },
  {
    "text": "thing we're going to do is we're going to move down to the next line parentheses enforcing an order of operations it's going to ensure that",
    "start": "964240",
    "end": "970040"
  },
  {
    "text": "we're going to call next first before we output anything to the console the interesting thing that you're seeing",
    "start": "970040",
    "end": "975279"
  },
  {
    "text": "here which we didn't see in the iterator example before is that now instead of just receiving values from the generator",
    "start": "975279",
    "end": "981319"
  },
  {
    "text": "function we're going to pass something to it so we're going to pass the number 10 from our caller to the generator",
    "start": "981319",
    "end": "988639"
  },
  {
    "text": "function the call E and what that's going to do is it's going to take this value and it's going to essentially",
    "start": "988639",
    "end": "994399"
  },
  {
    "text": "insert it immediately at the point in which we suspended the generator function before then we're going to continue",
    "start": "994399",
    "end": "1001279"
  },
  {
    "text": "evaluating because now the generator function is back in an active State we're going to hit our next yield point",
    "start": "1001279",
    "end": "1006480"
  },
  {
    "text": "which is going to send b or make B available back to uh the caller and",
    "start": "1006480",
    "end": "1011680"
  },
  {
    "text": "suspend once again so a substitution you now have a and",
    "start": "1011680",
    "end": "1017560"
  },
  {
    "text": "b the caller has control generator function is suspended so you can sort of",
    "start": "1017560",
    "end": "1023360"
  },
  {
    "text": "see where I'm going with this we call next passing two which substitutes two in at the point where we suspended the",
    "start": "1023360",
    "end": "1030400"
  },
  {
    "text": "generator function before and then since there are no more yields we're going to continue down until we hit a return",
    "start": "1030400",
    "end": "1037000"
  },
  {
    "text": "statement so we're going to do some assignment we're going to evaluate math.pow which raises 10 the^ of two",
    "start": "1037000",
    "end": "1043120"
  },
  {
    "text": "thank you Matt we're going to store that in the variable called result and then we're going to return it which makes it",
    "start": "1043120",
    "end": "1049000"
  },
  {
    "text": "available as the property value of the return object that we're going to get from our call to next so it's kind of a",
    "start": "1049000",
    "end": "1056000"
  },
  {
    "text": "trip right A B 100 you can see how we're bouncing back and forth between the generator function and the caller yeah",
    "start": "1056000",
    "end": "1062559"
  },
  {
    "text": "what's up you didn't put a Andes yes you can yield whatever you",
    "start": "1062559",
    "end": "1071360"
  },
  {
    "text": "want it could be undefined uh A and B are there mostly to illustrate the back and forth sort of nature of this",
    "start": "1071360",
    "end": "1080559"
  },
  {
    "text": "if the generator function is uh done I forget the the name of the state but if",
    "start": "1084640",
    "end": "1090640"
  },
  {
    "text": "the generator function is done you'll get an exception raised when you attempt to uh tell it to resume again because it",
    "start": "1090640",
    "end": "1097799"
  },
  {
    "text": "can't do anything else there's like a finished State I believe is what it's called in the ecmascript 6",
    "start": "1097799",
    "end": "1103200"
  },
  {
    "text": "specification all right I'm going to keep cruising because I know you guys want to get to your 15 seconds of Fame",
    "start": "1103200",
    "end": "1109200"
  },
  {
    "text": "okay so generators in the real world uh Fibonacci Sequence number generators are",
    "start": "1109200",
    "end": "1114280"
  },
  {
    "text": "awesome raising 10 to the^ of two is really cool but like we build real stuff that we got to get paid to do so how",
    "start": "1114280",
    "end": "1120640"
  },
  {
    "text": "does this stuff apply to your job right um I talked about how uh using",
    "start": "1120640",
    "end": "1126559"
  },
  {
    "start": "1125000",
    "end": "1125000"
  },
  {
    "text": "asynchronous callbacks it's kind of a pain in the butt especially for a new developer to follow the path of execution through a code that relies",
    "start": "1126559",
    "end": "1133280"
  },
  {
    "text": "heavily on asynchronous callbacks this is what I showed before with a slight modification still doing our request to",
    "start": "1133280",
    "end": "1140120"
  },
  {
    "start": "1137000",
    "end": "1137000"
  },
  {
    "text": "get token we're still doing our request to get profile we're doing these things in series and then we output to the",
    "start": "1140120",
    "end": "1145360"
  },
  {
    "text": "console uh your name is you know Billy Bob or whatever using generators we can clean",
    "start": "1145360",
    "end": "1151840"
  },
  {
    "text": "this up a little bit if what we really want to do is communicate that we're doing two operations uh excuse me three",
    "start": "1151840",
    "end": "1157760"
  },
  {
    "text": "operations in series there's no need to do this uh nesting of callbacks like",
    "start": "1157760",
    "end": "1163039"
  },
  {
    "text": "you're accustomed to in regular old JavaScript land these two pieces of code functionally do do the same thing do the",
    "start": "1163039",
    "end": "1170200"
  },
  {
    "text": "get to token first do the get to profile Second and then output this stuff to the console use as generator functions to do",
    "start": "1170200",
    "end": "1177760"
  },
  {
    "text": "that we'll we'll talk a little bit about it in the next slide something you're seeing here for the first time is this",
    "start": "1177760",
    "end": "1182799"
  },
  {
    "text": "sync function and this function does uh it reduces some of the boiler plate that you have to do in order to suspend and",
    "start": "1182799",
    "end": "1189120"
  },
  {
    "text": "resume and pass values around um there are a variety of libraries out there right now that already provide this",
    "start": "1189120",
    "end": "1194919"
  },
  {
    "text": "functionality for you uh gen run is one of them",
    "start": "1194919",
    "end": "1200000"
  },
  {
    "text": "Co corre I think is another one if you Googled like generator rapper libraries",
    "start": "1200000",
    "end": "1205120"
  },
  {
    "text": "for JavaScript today there are a ton of them out there the reason that I'm talking about sync which is something",
    "start": "1205120",
    "end": "1210919"
  },
  {
    "text": "that we'll Implement in this conversation today is just so you can see how you can write a very small",
    "start": "1210919",
    "end": "1216080"
  },
  {
    "text": "amount of code to get this uh direct style programming feel which you're going to see here so",
    "start": "1216080",
    "end": "1223840"
  },
  {
    "text": "sync sync takes a generator function in this case it was an anonymous generator",
    "start": "1223840",
    "end": "1228880"
  },
  {
    "text": "function you can tell it's got the Little Star there it is going to",
    "start": "1228880",
    "end": "1234120"
  },
  {
    "text": "immediately invoke the generator function which gets you back that generator object what it's going to do",
    "start": "1234120",
    "end": "1240360"
  },
  {
    "text": "is it's going to pass a function it's going to pass this function called resume and then it's going to",
    "start": "1240360",
    "end": "1245960"
  },
  {
    "text": "immediately call next which is going to start evaluating the generator function from top to bottom the interesting thing",
    "start": "1245960",
    "end": "1251600"
  },
  {
    "text": "about this resume function that we're passing the generator is that we can pass that function as the call back to",
    "start": "1251600",
    "end": "1257799"
  },
  {
    "text": "our asynchronous operations and when they are done they via a closure will",
    "start": "1257799",
    "end": "1263799"
  },
  {
    "text": "restart our generator function passing whatever value they got from their asynchronous",
    "start": "1263799",
    "end": "1269799"
  },
  {
    "text": "operation does that make sense you can see this resume is passed to the generator function and I just passed",
    "start": "1269799",
    "end": "1275360"
  },
  {
    "text": "this resume function onto uh my asynchronous operations as their callback function I cheated a little bit",
    "start": "1275360",
    "end": "1282799"
  },
  {
    "text": "in this presentation the signature to resume uh follows the node style error",
    "start": "1282799",
    "end": "1288200"
  },
  {
    "text": "first the return value uh syntax I kept going with the browser examples that I've got here because it serves us talk",
    "start": "1288200",
    "end": "1294159"
  },
  {
    "text": "really well but uh many of the libraries I'm talking about like gen run and Jenny will uh handle this more intelligently",
    "start": "1294159",
    "end": "1300640"
  },
  {
    "text": "for you but ultimately what they do is they pass a gener excuse me they pass a function which will allow you to resume",
    "start": "1300640",
    "end": "1305960"
  },
  {
    "text": "the generator function that your code is running in okay so uh I talked about how much of",
    "start": "1305960",
    "end": "1312200"
  },
  {
    "text": "a pain in the butet is to Plum exceptions around across different ticks of the event Loop generators have an",
    "start": "1312200",
    "end": "1317400"
  },
  {
    "text": "answer to that as well um in the first example I showed you that the TR catch only works with code",
    "start": "1317400",
    "end": "1325360"
  },
  {
    "start": "1320000",
    "end": "1320000"
  },
  {
    "text": "that could raise an error excuse me raise an exception uh on the same tick of the event Loop that the tri catch",
    "start": "1325360",
    "end": "1330880"
  },
  {
    "text": "block uh was evaluated which doesn't do us any good if we want to raise an error from inside an asynchronous call back",
    "start": "1330880",
    "end": "1337520"
  },
  {
    "text": "and handle it in the same place unless we do this like lame Plumbing of error messages through",
    "start": "1337520",
    "end": "1344240"
  },
  {
    "text": "closures with generators you can use Tri catch which is built into the language",
    "start": "1344240",
    "end": "1349440"
  },
  {
    "text": "right like built into the language to handle the exceptions that are raised from the result of evaluating",
    "start": "1349440",
    "end": "1356039"
  },
  {
    "text": "synchronous code as well as asynchronous code kind of interesting right you don't",
    "start": "1356039",
    "end": "1361480"
  },
  {
    "text": "get that with regular JavaScript the way that it works with a slight modification to our sync function is that we can",
    "start": "1361480",
    "end": "1370360"
  },
  {
    "text": "instead of resuming the generator function faulting in a value we can resume the generator function",
    "start": "1370360",
    "end": "1375480"
  },
  {
    "text": "immediately raising an error at the point that it's suspended so assuming that let's say my call to post bar rais",
    "start": "1375480",
    "end": "1383080"
  },
  {
    "text": "an error or rather like an error that I want to Rea like happened I can easily",
    "start": "1383080",
    "end": "1388640"
  },
  {
    "text": "resume the generator function calling rays which immediately after this yield",
    "start": "1388640",
    "end": "1393720"
  },
  {
    "start": "1393000",
    "end": "1393000"
  },
  {
    "text": "excuse me immediately after the yield and its expression we will raise an exception which we can then catch in the",
    "start": "1393720",
    "end": "1399480"
  },
  {
    "text": "tri catch block that is built into the language the last thing I want to talk",
    "start": "1399480",
    "end": "1405159"
  },
  {
    "text": "about is uh async flow control um I showed some examples of using promises",
    "start": "1405159",
    "end": "1410360"
  },
  {
    "text": "and the async library and also just vanilla JavaScript to do some things in parallel and then a couple things in",
    "start": "1410360",
    "end": "1416520"
  },
  {
    "text": "series um the syntax was a little brutal but we just sort of learned to accept it and that's you know what we what we",
    "start": "1416520",
    "end": "1423679"
  },
  {
    "text": "we're just kind of customed to it we don't have to do it anymore as I said this is the old school way of doing it",
    "start": "1423679",
    "end": "1429320"
  },
  {
    "start": "1425000",
    "end": "1425000"
  },
  {
    "text": "this is the new school way of doing it new school I'm totally La um so what",
    "start": "1429320",
    "end": "1434880"
  },
  {
    "text": "we're doing here just like in this prior example where we're getting token and we're getting key and then when we're",
    "start": "1434880",
    "end": "1440159"
  },
  {
    "text": "done with both of those operations we move on to posting to off and then doing this redirect we can do this and much",
    "start": "1440159",
    "end": "1446760"
  },
  {
    "text": "fewer lines of code much less clutter and it's pretty clear what we're doing I",
    "start": "1446760",
    "end": "1453159"
  },
  {
    "text": "had to put this array on two lines to fit it in the slides but the API looks",
    "start": "1453159",
    "end": "1459200"
  },
  {
    "text": "pretty clean in my opinion you'll notice that there's been a modification to uh",
    "start": "1459200",
    "end": "1464760"
  },
  {
    "text": "the function that I'm pass excuse me the the mod ification to the function that I'm passing my Anonymous generator",
    "start": "1464760",
    "end": "1471320"
  },
  {
    "text": "function that enables us to do some things like uh handle multiple operations concurrently um I won't show",
    "start": "1471320",
    "end": "1477559"
  },
  {
    "text": "the implementation of this but if you look at my GitHub uh I'm GitHub laser",
    "start": "1477559",
    "end": "1482840"
  },
  {
    "text": "with an S um I've got a super trivial implementation of this but basically what's going on here is get and get to",
    "start": "1482840",
    "end": "1490520"
  },
  {
    "text": "token and post to key happen at the same time when they're done the generator function resumes and then the variable",
    "start": "1490520",
    "end": "1497320"
  },
  {
    "text": "data hold holds an array with two things in it first thing is a result of get token second thing is a result of post a",
    "start": "1497320",
    "end": "1504120"
  },
  {
    "text": "key then uh in Ser you know as the next thing in this series of things I want to",
    "start": "1504120",
    "end": "1509159"
  },
  {
    "text": "do I do a post to off passing the data that I got from both of those two",
    "start": "1509159",
    "end": "1514440"
  },
  {
    "text": "asynchronous operations when that is done I have o uh holding the variable o",
    "start": "1514440",
    "end": "1519559"
  },
  {
    "text": "holding the result of this post to O and then I moved down to window.location.href changing the the",
    "start": "1519559",
    "end": "1525760"
  },
  {
    "text": "Earl and passing whatever I got back from post to off so it's pretty clear to differentiate between the things that",
    "start": "1525760",
    "end": "1531000"
  },
  {
    "text": "you want to do uh concurrently and the things you want to do in series it looks very similar to something that you're",
    "start": "1531000",
    "end": "1536080"
  },
  {
    "text": "going to find in a programming language that typically uses the direct style like Java python whatever um only you're",
    "start": "1536080",
    "end": "1542159"
  },
  {
    "text": "not losing any of the power of the single threaded event Loop you're just suspending the generator function until this asynchronous operation completes",
    "start": "1542159",
    "end": "1551039"
  },
  {
    "text": "theum so the resumer argument notice instead of just passing this thing dumbly along as the call back to these",
    "start": "1551039",
    "end": "1557039"
  },
  {
    "text": "asynchronous operations I'm actually invoking it here um that is a modification I had to make to sync",
    "start": "1557039",
    "end": "1563080"
  },
  {
    "text": "basically what it does is every time you call it it increments a counter and then",
    "start": "1563080",
    "end": "1568159"
  },
  {
    "text": "when the generator function suspends and gives control to um the sync function",
    "start": "1568159",
    "end": "1575000"
  },
  {
    "text": "the sync function Waits until the counter has been decremented which happens when each one of these",
    "start": "1575000",
    "end": "1580720"
  },
  {
    "text": "asynchronous operations complet when all of the count when the counters have been decremented back to zero then it knows",
    "start": "1580720",
    "end": "1586760"
  },
  {
    "text": "that it can resume the generator function passing back whatever array of stuff uh it has as a result of all these",
    "start": "1586760",
    "end": "1592760"
  },
  {
    "text": "asynchronous operations um it's something like I don't know like 20 lines of code or something like that but",
    "start": "1592760",
    "end": "1598440"
  },
  {
    "text": "if you see me after um after the presentation I'll give you a link to uh to where you can see that in action but",
    "start": "1598440",
    "end": "1604000"
  },
  {
    "text": "it basically reduces to just incrementing a counter and not progressing to the next bit of code until that counter has been decremented",
    "start": "1604000",
    "end": "1610960"
  },
  {
    "text": "which happens when these asynchronous operations complete yeah what's up",
    "start": "1610960",
    "end": "1617440"
  },
  {
    "text": "can you kill a pending yield action um I don't think so if I understand your",
    "start": "1627880",
    "end": "1635840"
  },
  {
    "text": "question um the answer is no uh but it's",
    "start": "1635840",
    "end": "1641279"
  },
  {
    "text": "possible we could talk afterwards and see like if you have a specific example um but uh to kill",
    "start": "1641279",
    "end": "1648679"
  },
  {
    "text": "I don't know how you would do that in fact I don't think you can do that okay so takeaways walk through all",
    "start": "1648679",
    "end": "1656159"
  },
  {
    "start": "1654000",
    "end": "1654000"
  },
  {
    "text": "this code um I talked about direct Style versus continuation passing style coding a lot using generators enables you to",
    "start": "1656159",
    "end": "1662039"
  },
  {
    "text": "write direct style coding without losing any of the awesomeness of the single threaded event Loop that you use and",
    "start": "1662039",
    "end": "1667240"
  },
  {
    "text": "love in the JavaScript runtimes you're programming against today um you can already use these features in Canary you",
    "start": "1667240",
    "end": "1673679"
  },
  {
    "text": "can already use these features in uh certain builds of Firefox you can already use these features in browsers",
    "start": "1673679",
    "end": "1679240"
  },
  {
    "text": "that implement the es5 specification as long as you're fine with the transpile step if you're using copy script you're",
    "start": "1679240",
    "end": "1684440"
  },
  {
    "text": "already doing some transpilation right now it's not that big of a deal to go you know plug in another piece into that",
    "start": "1684440",
    "end": "1689600"
  },
  {
    "text": "pipeline if you really want to try some of these features in your browsers in your applications today uh is my",
    "start": "1689600",
    "end": "1694720"
  },
  {
    "text": "position that their adoption will dramatically change the shape of the asynchronous JavaScript code that we're",
    "start": "1694720",
    "end": "1699799"
  },
  {
    "text": "writing I think um the syntax uh is easy",
    "start": "1699799",
    "end": "1705799"
  },
  {
    "text": "enough to understand that it will make JavaScript accessible to people that otherwise bang their head against the",
    "start": "1705799",
    "end": "1711080"
  },
  {
    "text": "wall trying to understand the asynchronous nature of these run times this totally redu well doesn't totally",
    "start": "1711080",
    "end": "1716559"
  },
  {
    "text": "reduce that pain but it really helps to alleviate a lot of that pain I encourage you to go experiment check out that es6",
    "start": "1716559",
    "end": "1722519"
  },
  {
    "text": "dg. Heroku app.com if you want to see some working examples from the stuff that I've talked about today uh I want",
    "start": "1722519",
    "end": "1728799"
  },
  {
    "text": "to give some acknowledgement to Toby ho Tim Caswell and Andy Wingo on the V8 team these these fellows have excellent",
    "start": "1728799",
    "end": "1735640"
  },
  {
    "text": "blog articles and have been talking about generators and JavaScript for a long time back into the uh JavaScript 17",
    "start": "1735640",
    "end": "1742320"
  },
  {
    "text": "Mozilla days I don't know which several years ago um Andy Wingo also has an excellent uh blog article that he wrote",
    "start": "1742320",
    "end": "1749679"
  },
  {
    "text": "about ecmascript 6 gener excuse me generator performance in V8 so if you're going to like give me a stump the",
    "start": "1749679",
    "end": "1755880"
  },
  {
    "text": "speaker type question and ask me about performance and generators I'll just point to that link and tell you to go",
    "start": "1755880",
    "end": "1761559"
  },
  {
    "text": "forth and read um follow me on Twitter lerus GitHub laser like I said es6 gen",
    "start": "1761559",
    "end": "1767799"
  },
  {
    "text": "her app.com for working uh working code you can look at the source obviously Aeron Swinson hey.com presentations",
    "start": "1767799",
    "end": "1775039"
  },
  {
    "text": "generators if you want to get hook to these slides and step through that weird like bouncing back and forth between the",
    "start": "1775039",
    "end": "1780360"
  },
  {
    "text": "generator and the callar stuff yourself um I blog at Carbon 5 for carbon 5 and",
    "start": "1780360",
    "end": "1786279"
  },
  {
    "text": "myself and you you can find it blog. carbon.com authorin thanks",
    "start": "1786279",
    "end": "1794760"
  },
  {
    "text": "do you have any good questions yes yes would you",
    "start": "1800399",
    "end": "1807000"
  },
  {
    "text": "over um if you yeah sure yeah I think so",
    "start": "1807080",
    "end": "1812760"
  },
  {
    "text": "oh yeah sorry right so the question was would you recommend this over nodes async module I presume you're talking",
    "start": "1812760",
    "end": "1817840"
  },
  {
    "text": "about the async the JavaScript async library um yeah I find that uh as long",
    "start": "1817840",
    "end": "1823640"
  },
  {
    "text": "as I am programming um for a runtime that's going to support this API I have",
    "start": "1823640",
    "end": "1829679"
  },
  {
    "text": "really enjoyed um using this API instead of async which has been my go-to I've been resisting promises forever using",
    "start": "1829679",
    "end": "1836679"
  },
  {
    "text": "the async because I find that its API is um pretty easy to understand this I",
    "start": "1836679",
    "end": "1842600"
  },
  {
    "text": "think goes a step further as long as your runtime is going to support it yeah what's up um that's an",
    "start": "1842600",
    "end": "1850320"
  },
  {
    "text": "interesting question your stack traces look pretty weird uh with these generator functions um so the answer is",
    "start": "1850320",
    "end": "1858519"
  },
  {
    "text": "it depends um you have to do a little bit of extra work some of these libraries that provide this functionality that I showed with sync",
    "start": "1858519",
    "end": "1865000"
  },
  {
    "text": "actually do some interesting things when you're running in like what they call debug mode which will make the stack traces uh legible um but out of the box",
    "start": "1865000",
    "end": "1873240"
  },
  {
    "text": "stack traces can look pretty weird I think that um I mean the ecas script 6 specification is still in a draft state",
    "start": "1873240",
    "end": "1879720"
  },
  {
    "text": "so I would imagine that uh when that is no longer in a draft State and browsers are really starting to put a lot of",
    "start": "1879720",
    "end": "1885960"
  },
  {
    "text": "effort into building these generators apis uh that you will see uh you'll see",
    "start": "1885960",
    "end": "1891440"
  },
  {
    "text": "a better we you'll be better enabled to debug these things than you are right now given their sort of like beta esque",
    "start": "1891440",
    "end": "1899960"
  },
  {
    "text": "nature yeah I I was just reading the uh",
    "start": "1900480",
    "end": "1905600"
  },
  {
    "text": "Andy's blog because I wanted to prepare myself for this question when I was in front of you all and he said something",
    "start": "1905600",
    "end": "1912039"
  },
  {
    "text": "which is always like my go-to when uh folks are talking about performance in web applications um which is to say that",
    "start": "1912039",
    "end": "1919799"
  },
  {
    "text": "you're probably going to be sitting around waiting on iO so the tiny amount of time that you're going to spend uh if",
    "start": "1919799",
    "end": "1926799"
  },
  {
    "text": "if there is any additional CPU time that you're going to be spending working with generators is probably going to be",
    "start": "1926799",
    "end": "1932440"
  },
  {
    "text": "trivial relative to the amount of time you're going to be spending waiting on iO I realize that's a totally lame like handwavy question or excuse me hand wavy",
    "start": "1932440",
    "end": "1939600"
  },
  {
    "text": "uh answer but specifically Andy goes into the details of um doing a problem",
    "start": "1939600",
    "end": "1945039"
  },
  {
    "text": "without using generators and doing a problem with generators and he found that the difference between his implementation a and implementation B",
    "start": "1945039",
    "end": "1950919"
  },
  {
    "text": "was a matter of like tens of milliseconds um you'd have to look into his actual test to like find out if",
    "start": "1950919",
    "end": "1957039"
  },
  {
    "text": "that's a number that means anything to you but I totally ignore that problem um given the benefit of legibility uh that",
    "start": "1957039",
    "end": "1965480"
  },
  {
    "text": "this these apis like afford developers like walking into projects um where I've written code over over the regular",
    "start": "1965480",
    "end": "1972440"
  },
  {
    "text": "asynchronous stuff that I've been writing for eight or 10 years or whatever cool thank you very much",
    "start": "1972440",
    "end": "1979840"
  },
  {
    "text": "than",
    "start": "1980919",
    "end": "1983919"
  }
]