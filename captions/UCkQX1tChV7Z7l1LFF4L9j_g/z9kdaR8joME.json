[
  {
    "start": "0",
    "end": "859000"
  },
  {
    "text": "let's talk about some more types so the types we've covered so far today we have our basic immutable types talk about",
    "start": "11900",
    "end": "20340"
  },
  {
    "text": "numbers instant floats bullion's true and false strings which are immutable",
    "start": "20340",
    "end": "27359"
  },
  {
    "text": "lists which are mutable and all the various operations we can perform on lists there's a related there's actually",
    "start": "27359",
    "end": "35550"
  },
  {
    "text": "two related types to lists that are really close similar syntax and some",
    "start": "35550",
    "end": "40649"
  },
  {
    "text": "dramatically different functionality one of them is tuples and that's kind of the next section that's 5.4 in that PDF",
    "start": "40649",
    "end": "48000"
  },
  {
    "text": "section 5.4 and a tuple is basically just an immutable list so list you can",
    "start": "48000",
    "end": "57239"
  },
  {
    "text": "change items in a list tuples you can't change items in a tuple to create a tuple that's it you've got one and the",
    "start": "57239",
    "end": "64739"
  },
  {
    "text": "syntax for it is a comma separated list",
    "start": "64739",
    "end": "70610"
  },
  {
    "text": "and you'll notice when I type in a comma separated list and hit enter it prints",
    "start": "70610",
    "end": "76140"
  },
  {
    "text": "it out with parentheses the parentheses are optional for declaring tuples but you can think about the parentheses as",
    "start": "76140",
    "end": "81450"
  },
  {
    "text": "replacing brackets and Python uses all parentheses for lots of things so the",
    "start": "81450",
    "end": "86880"
  },
  {
    "text": "context determines their their meaning and parentheses are potentially confusing the only time parentheses are",
    "start": "86880",
    "end": "93360"
  },
  {
    "text": "required is if you want to make a even",
    "start": "93360",
    "end": "99509"
  },
  {
    "text": "then I'm not regarded Omega one tuple a trailing comma is required because there's no there's no sense what just",
    "start": "99509",
    "end": "106229"
  },
  {
    "text": "three would mean besides the value of three and three inside parentheses doesn't get you a tuple either gotta",
    "start": "106229",
    "end": "112890"
  },
  {
    "text": "have a trailing comma aside from that your parentheses are optional your",
    "start": "112890",
    "end": "119700"
  },
  {
    "text": "values can be whatever and it supports",
    "start": "119700",
    "end": "126590"
  },
  {
    "text": "similar operations as lists",
    "start": "126590",
    "end": "131119"
  },
  {
    "text": "but it's immutable so why do we want immutable lists why aren't we happy with",
    "start": "139180",
    "end": "144290"
  },
  {
    "text": "just lists any thoughts yeah so there's",
    "start": "144290",
    "end": "150079"
  },
  {
    "text": "a little bit of a sense of constants here and the next data type that we talked about dicks needs to use",
    "start": "150079",
    "end": "157430"
  },
  {
    "text": "immutable values only as its keys and when we have lists and we want to use",
    "start": "157430",
    "end": "163220"
  },
  {
    "text": "lists as keys we need to convert them to tuples tuples are returned lots of",
    "start": "163220",
    "end": "170780"
  },
  {
    "text": "places instead of lists because they're slightly more lightweight we talked at",
    "start": "170780",
    "end": "176030"
  },
  {
    "text": "the very beginning about ID and looking at the memory usage of variables and lists every list is unique because it's",
    "start": "176030",
    "end": "183639"
  },
  {
    "text": "mutable since tuples are immutable you can create a very large number of",
    "start": "183639",
    "end": "188780"
  },
  {
    "text": "similar tuples and not use it very much memory because each identical tuple is actually going to end up in turn to the",
    "start": "188780",
    "end": "194209"
  },
  {
    "text": "same memory location so there's some performance advantages occasionally and lots of the standard built-in functions",
    "start": "194209",
    "end": "201260"
  },
  {
    "text": "return tuples so let's look at a few of those like lists you can create two",
    "start": "201260",
    "end": "207680"
  },
  {
    "text": "poles with parentheses I wonder now you can create an empty tuple don't know why",
    "start": "207680",
    "end": "214639"
  },
  {
    "text": "you do that just like empty brackets you can also use the built-in function tuple",
    "start": "214639",
    "end": "220599"
  },
  {
    "text": "and you can pass the built-in function a",
    "start": "220599",
    "end": "226000"
  },
  {
    "text": "value to be converted to a tuple in this case a list and it'll return you a tuple and you can use tuples to do things like",
    "start": "226150",
    "end": "234019"
  },
  {
    "text": "variable reassignment anybody ever done",
    "start": "234019",
    "end": "241190"
  },
  {
    "text": "an interview question we have to swap the contents of variables like a really basic programming kind of thing I found",
    "start": "241190",
    "end": "247849"
  },
  {
    "text": "lets you say just that and the sin tax",
    "start": "247849",
    "end": "254930"
  },
  {
    "text": "implications of this swap are that on",
    "start": "254930",
    "end": "260810"
  },
  {
    "text": "the left-hand side we implicit we have parenthesis and this is a tuple and on",
    "start": "260810",
    "end": "267800"
  },
  {
    "text": "the right-hand side we implicitly have parenthesis and this is a tuple and Python will do",
    "start": "267800",
    "end": "272870"
  },
  {
    "text": "poople unpacking there's no list unpacking there is tuple unpacking so tuple unpacking",
    "start": "272870",
    "end": "280389"
  },
  {
    "text": "if you know how many items you have in a tuple and it's immutable see not the way",
    "start": "293289",
    "end": "299080"
  },
  {
    "text": "about having changed you can go ahead and expand those into the implicit tuple",
    "start": "299080",
    "end": "304389"
  },
  {
    "text": "on the left-hand side of the equation and my first second third variables got filled with the first second and third values in the tuple and from pythons",
    "start": "304389",
    "end": "312189"
  },
  {
    "text": "perspective it's just creating a new tuple on the left-hand side is an implicit tuple there it is but it's",
    "start": "312189",
    "end": "322539"
  },
  {
    "text": "immutable and useless memory and Python",
    "start": "322539",
    "end": "327939"
  },
  {
    "text": "does a few special things with it and we've already seen one tuple anybody",
    "start": "327939",
    "end": "333009"
  },
  {
    "text": "remember",
    "start": "333009",
    "end": "335520"
  },
  {
    "text": "when we wanted to loop through an array and we want to both the index and the value of what function do we use it was",
    "start": "350010",
    "end": "356050"
  },
  {
    "text": "built in somebody said enumerate and if",
    "start": "356050",
    "end": "370240"
  },
  {
    "text": "you schools and if you look at this",
    "start": "370240",
    "end": "379150"
  },
  {
    "text": "expression implicitly there is a tuple there and I could in fact put",
    "start": "379150",
    "end": "385030"
  },
  {
    "text": "parentheses around it because the enumerate function is returning a single",
    "start": "385030",
    "end": "390670"
  },
  {
    "text": "value each time you have to return a single value on a four for loop but that single value is a tuple and we can",
    "start": "390670",
    "end": "396190"
  },
  {
    "text": "automatically unpack it we could also do this to prove it I'm catching a single",
    "start": "396190",
    "end": "407950"
  },
  {
    "text": "value and printing that single value and a single value is a tuple with the index",
    "start": "407950",
    "end": "414490"
  },
  {
    "text": "in the value of the current position in the list so tuple unpacking is just shorthand expanding that tuple into two",
    "start": "414490",
    "end": "421900"
  },
  {
    "text": "variables and it's convenient it's mostly using loops but you will occasionally use it for like variable reassignment make sense of people can",
    "start": "421900",
    "end": "431350"
  },
  {
    "text": "you keep yes you can keep tuples and lists it does not so the tuple is",
    "start": "431350",
    "end": "438640"
  },
  {
    "text": "immutable in the sense that it is a list of variables and it will not change",
    "start": "438640",
    "end": "444280"
  },
  {
    "text": "which variables each position is bound to but if one of the variables in it",
    "start": "444280",
    "end": "449350"
  },
  {
    "text": "itself is mutable you can still access and change that variable you won't be able to do it directly actually you",
    "start": "449350",
    "end": "457570"
  },
  {
    "text": "could do it directly",
    "start": "457570",
    "end": "460230"
  },
  {
    "text": "parenthesis vs brackets so square parentheses is always a list and",
    "start": "466020",
    "end": "476009"
  },
  {
    "text": "parentheses which are optional are a tuple square brackets are lists I",
    "start": "476009",
    "end": "483879"
  },
  {
    "text": "converted a list to a tuple with a tuple",
    "start": "483879",
    "end": "489189"
  },
  {
    "text": "function and it accepts an iterable and makes it creates a tuple out of it but",
    "start": "489189",
    "end": "495009"
  },
  {
    "text": "that's just an input function just like i did this list and gave it a string that's an iterable and it creates a list",
    "start": "495009",
    "end": "501550"
  },
  {
    "text": "out of the individual characters of the string and if it as long as it knows how to iterate over the object it can create",
    "start": "501550",
    "end": "507039"
  },
  {
    "text": "a list or tuple from it and I just use the built-in type function which returns",
    "start": "507039",
    "end": "518260"
  },
  {
    "text": "you the type of the variable you pass it",
    "start": "518260",
    "end": "523050"
  },
  {
    "text": "and when we get to OOP we'll talk a little bit more about why you generally",
    "start": "523500",
    "end": "528550"
  },
  {
    "text": "don't need to do that sort of thing in Python nondestructive so pop and into a",
    "start": "528550",
    "end": "536620"
  },
  {
    "text": "pop and insert don't work on a tuple because you can't take something out of a two bullets immutable so the and",
    "start": "536620",
    "end": "547019"
  },
  {
    "text": "remove insert I think that's everything",
    "start": "547019",
    "end": "553680"
  },
  {
    "text": "there's a pen depend won't work count would work extend does not work int index would work insert doesn't that",
    "start": "556920",
    "end": "564130"
  },
  {
    "text": "work pop does not work remove does not work and no reverse on sort the well the",
    "start": "564130",
    "end": "574180"
  },
  {
    "text": "next data type is dictionaries lists and tuples are both kind of used for the same thing there's an implicit order and",
    "start": "574180",
    "end": "579790"
  },
  {
    "text": "it's positionally indexed what you care about is what position things are at or maybe you just care about their order if",
    "start": "579790",
    "end": "584980"
  },
  {
    "text": "you want something to be sorted you might put it in the list to sort it the next type we also dereference but it's a",
    "start": "584980",
    "end": "591790"
  },
  {
    "text": "key value store python calls them dicks the ICT which is short for dictionary",
    "start": "591790",
    "end": "598030"
  },
  {
    "text": "a the languages might call it like a hash or hash map and the distinction syntactically here is that we're going",
    "start": "598030",
    "end": "604930"
  },
  {
    "text": "to use curly braces so square brackets are lists parentheses or tuples curly",
    "start": "604930",
    "end": "612460"
  },
  {
    "text": "braces are dicks and dicks can be created in a couple different ways one",
    "start": "612460",
    "end": "618040"
  },
  {
    "text": "way is the syntax we've been using which is key value pairs just like we created",
    "start": "618040",
    "end": "630250"
  },
  {
    "text": "lists with just their appropriate braces and tuples with just their appropriate",
    "start": "630250",
    "end": "635440"
  },
  {
    "text": "braces we can create dictionaries with",
    "start": "635440",
    "end": "641140"
  },
  {
    "text": "just our appropriate braces some other",
    "start": "641140",
    "end": "647260"
  },
  {
    "text": "languages the keys don't have to be quoted in Python both the key and value has to be quoted if there are literals",
    "start": "647260",
    "end": "653950"
  },
  {
    "text": "if they're string literals and what can",
    "start": "653950",
    "end": "660550"
  },
  {
    "text": "we do with dicks dicks don't support the concept of positional indexing so I get",
    "start": "660550",
    "end": "670510"
  },
  {
    "text": "a kir when I say X 0 because there is no key 0 I could make a key 0 but it's not",
    "start": "670510",
    "end": "679600"
  },
  {
    "text": "a position it's just a key you index",
    "start": "679600",
    "end": "687220"
  },
  {
    "text": "them just like you do list with square brackets not with curly braces and you",
    "start": "687220",
    "end": "693940"
  },
  {
    "text": "specify the key it returns the value there's obviously no slicing notation there's no sense of order there is no",
    "start": "693940",
    "end": "700420"
  },
  {
    "text": "sort or reverse for dictionaries it's just a key value store it's a table",
    "start": "700420",
    "end": "707770"
  },
  {
    "text": "lookup it's a hashmap look up yeah the underlying the underlying implementation is a hashmap we talked about in for",
    "start": "707770",
    "end": "717100"
  },
  {
    "text": "lists determine the presence of something rather than using index you",
    "start": "717100",
    "end": "722260"
  },
  {
    "text": "could just say if one in",
    "start": "722260",
    "end": "727230"
  },
  {
    "text": "and the same thing is true for dicks in",
    "start": "729910",
    "end": "734980"
  },
  {
    "text": "except that it's checking by default keys not values",
    "start": "734980",
    "end": "741520"
  },
  {
    "text": "so it printed true the first time it's looking at the the keys not at the values when you say in and there isn't",
    "start": "763670",
    "end": "771620"
  },
  {
    "text": "very many convenient idioms for searching through the values of a dictionary dictionaries are for storing",
    "start": "771620",
    "end": "778610"
  },
  {
    "text": "keys and you're interested in the values of the values associated with a particular key and we can also create",
    "start": "778610",
    "end": "785360"
  },
  {
    "text": "dicks with the built-in function and this is just like we did with the list in this case it's a comma separated",
    "start": "785360",
    "end": "791330"
  },
  {
    "text": "list of parameters and I don't need to put quotes around my keys",
    "start": "791330",
    "end": "802060"
  },
  {
    "text": "so you can use the dicta function function instead and while I like square braces from my lists sometimes dick is",
    "start": "813529",
    "end": "821300"
  },
  {
    "text": "less typing than curly braces for initializing dictionaries you can despite the fact that there's no order",
    "start": "821300",
    "end": "827480"
  },
  {
    "text": "you can loop over dictionaries you might want to do something on every member of a dictionary so it still makes sense to",
    "start": "827480",
    "end": "833389"
  },
  {
    "text": "loop over a dictionary yes there's no no",
    "start": "833389",
    "end": "842480"
  },
  {
    "text": "convenient built-in idiom to look for a value well here's the thing so let's",
    "start": "842480",
    "end": "859879"
  },
  {
    "start": "859000",
    "end": "941000"
  },
  {
    "text": "look at the built-in methods of the dick type the first function of great",
    "start": "859879",
    "end": "866029"
  },
  {
    "text": "interest is items and items is returning",
    "start": "866029",
    "end": "871430"
  },
  {
    "text": "me tuples of the key and the value keys",
    "start": "871430",
    "end": "880040"
  },
  {
    "text": "will return me just a list of the keys if you really want to look and see if a",
    "start": "880040",
    "end": "886879"
  },
  {
    "text": "value is in you can look at values and it gives you just a list of the values so if you really wanted to search through the values of the dictionary you",
    "start": "886879",
    "end": "892879"
  },
  {
    "text": "could search through its values list that tells you that it's there it doesn't tell you that it has a",
    "start": "892879",
    "end": "899269"
  },
  {
    "text": "particular key there's no way to go from X values back to figure out which key",
    "start": "899269",
    "end": "904899"
  },
  {
    "text": "corresponds but again in general you're not so much interested in what are my values i might but what are my",
    "start": "904899",
    "end": "910730"
  },
  {
    "text": "keys if you're really interested in a list of values and searching through them you're probably gonna use a list",
    "start": "910730",
    "end": "916459"
  },
  {
    "text": "instead",
    "start": "916459",
    "end": "918759"
  },
  {
    "text": "oh yeah so let's let's talk about that",
    "start": "922040",
    "end": "933500"
  },
  {
    "text": "that's a good question um statements are single line statements by default right if I say x is equal to and then I hit",
    "start": "933500",
    "end": "941240"
  },
  {
    "start": "941000",
    "end": "1003000"
  },
  {
    "text": "enter I can't put five on the next line it's a syntax error there are some exceptions one of the exceptions is",
    "start": "941240",
    "end": "947329"
  },
  {
    "text": "pretty much anytime there is a starting brace curly bracket parentheses square brace so i can say x is equal to and",
    "start": "947329",
    "end": "960220"
  },
  {
    "text": "that's valid notice that's on two lines",
    "start": "960220",
    "end": "965709"
  },
  {
    "text": "this is valid it's in a function call net surrounded by parentheses so Python knows that I'm not done specifying that",
    "start": "975070",
    "end": "983080"
  },
  {
    "text": "function call",
    "start": "983080",
    "end": "985710"
  },
  {
    "text": "and you can format as you like so as",
    "start": "997180",
    "end": "1003420"
  },
  {
    "start": "1003000",
    "end": "1126000"
  },
  {
    "text": "long as you're inside of some containing parentheses curly brackets square brackets you can use multi line and I",
    "start": "1003420",
    "end": "1010980"
  },
  {
    "text": "said earlier that if statements don't require parentheses for the condition one of the common uses you'll see with",
    "start": "1010980",
    "end": "1016920"
  },
  {
    "text": "actual parentheses is because you've got several conditions and you need to break it up on the multiple lines but you",
    "start": "1016920",
    "end": "1021990"
  },
  {
    "text": "can't do without adding the parentheses so if x and y and z and you could assume",
    "start": "1021990",
    "end": "1030180"
  },
  {
    "text": "that those were all really long conditionals that's a legal statement",
    "start": "1030180",
    "end": "1036079"
  },
  {
    "text": "and the parentheses only syntactical implication there is basically to",
    "start": "1036080",
    "end": "1042089"
  },
  {
    "text": "convert that whole thing into a single line statement even though it spans multiple lines",
    "start": "1042090",
    "end": "1049039"
  },
  {
    "text": "so iterating over dictionaries still have a dictionary I still do when we",
    "start": "1057700",
    "end": "1065150"
  },
  {
    "text": "iterated over lists we got the value I",
    "start": "1065150",
    "end": "1072260"
  },
  {
    "text": "just did a simple iteration using for value in list what am I going to get it",
    "start": "1072260",
    "end": "1078860"
  },
  {
    "text": "here",
    "start": "1078860",
    "end": "1081130"
  },
  {
    "text": "I get the keys dictionaries were interested primarily in keys if I wanted to iterate over a dictionary and print",
    "start": "1088179",
    "end": "1094389"
  },
  {
    "text": "the actual values I'd have to",
    "start": "1094389",
    "end": "1099999"
  },
  {
    "text": "dereference my dictionary inside my loop with the key that I've got and as we've",
    "start": "1099999",
    "end": "1108429"
  },
  {
    "text": "noticed I could always do",
    "start": "1108429",
    "end": "1112950"
  },
  {
    "text": "items which returns two tuples or lists explicitly over values or keys to get",
    "start": "1125919",
    "end": "1131899"
  },
  {
    "start": "1126000",
    "end": "1166000"
  },
  {
    "text": "just the values are just the keys but the default is the iterate over keys so",
    "start": "1131899",
    "end": "1137239"
  },
  {
    "text": "let's do a couple things in terms of labs and you can get these two new data types go back to your classmates file",
    "start": "1137239",
    "end": "1145909"
  },
  {
    "text": "and go ahead and copy it to classmates one save it as a new file so we can go",
    "start": "1145909",
    "end": "1153259"
  },
  {
    "text": "back in time we have a bunch of iterations of the classmates file it'll get more impressive gradually if you're",
    "start": "1153259",
    "end": "1158539"
  },
  {
    "text": "already fluent in some sort of source control you can go ahead and ease get or bzr or whatever to revision it but",
    "start": "1158539",
    "end": "1163849"
  },
  {
    "text": "otherwise just copy it to a new name and right now you have a classmate's file that has a list of all the first names",
    "start": "1163849",
    "end": "1170509"
  },
  {
    "start": "1166000",
    "end": "1197000"
  },
  {
    "text": "of all the students and prints them out in your new classmates file go ahead and",
    "start": "1170509",
    "end": "1176059"
  },
  {
    "text": "delete the list slicing samples and let's store first last name and roll of",
    "start": "1176059",
    "end": "1184639"
  },
  {
    "text": "each person in class so you're going to have a list of three tuples first name",
    "start": "1184639",
    "end": "1191869"
  },
  {
    "text": "last name and roll and let's go ahead",
    "start": "1191869",
    "end": "1198019"
  },
  {
    "start": "1197000",
    "end": "1346000"
  },
  {
    "text": "and loop through our list of tuples and print out hello first name last name is a roll and by roland just thinking like",
    "start": "1198019",
    "end": "1206389"
  },
  {
    "text": "teacher and students",
    "start": "1206389",
    "end": "1209200"
  },
  {
    "text": "you",
    "start": "1242740",
    "end": "1244800"
  },
  {
    "text": "I should probably make you do a little research to get acquainted but",
    "start": "1292840",
    "end": "1299429"
  },
  {
    "text": "and why don't I give you one more specification which is let's use a string formatting to print out our",
    "start": "1326020",
    "end": "1333720"
  },
  {
    "text": "information",
    "start": "1335610",
    "end": "1338610"
  },
  {
    "text": "and it's worth noting my editor helps me by automatically indenting things right",
    "start": "1345030",
    "end": "1351140"
  },
  {
    "start": "1346000",
    "end": "1426000"
  },
  {
    "text": "but there's no syntactic requirement to have that list of tuples on multiple",
    "start": "1351140",
    "end": "1357000"
  },
  {
    "text": "lines there's no syntactic requirement to have the space at the beginning right",
    "start": "1357000",
    "end": "1365670"
  },
  {
    "text": "there but I just have it lined up so that the structure of the data structure",
    "start": "1365670",
    "end": "1371190"
  },
  {
    "text": "is pretty apparent this is a list of rows and each line is a row and would be",
    "start": "1371190",
    "end": "1377600"
  },
  {
    "text": "it's a little bit confusing to say okay when do I have open parentheses close parentheses comma outside the",
    "start": "1377600",
    "end": "1382950"
  },
  {
    "text": "parentheses all that if I Jam them all together the much more confusing the way it is it's pretty obvious if I leave off",
    "start": "1382950",
    "end": "1388830"
  },
  {
    "text": "an opening or closing parenthesis or leave off a trailing comma it's pretty easy to scan a Python also allows you to",
    "start": "1388830",
    "end": "1395220"
  },
  {
    "text": "leave trailing commas in lists and tuples and a lot of people like to end",
    "start": "1395220",
    "end": "1405950"
  },
  {
    "text": "their list with a trailing comma since it just means if you ever go to add an",
    "start": "1405950",
    "end": "1412410"
  },
  {
    "text": "additional line do your data structure come back to edit it you start on the next line and you've already got the comma there if you start on the next",
    "start": "1412410",
    "end": "1418590"
  },
  {
    "text": "line half the time you forget the comma if there wasn't one in the first time through complains so everybody has that",
    "start": "1418590",
    "end": "1427140"
  },
  {
    "start": "1426000",
    "end": "1524000"
  },
  {
    "text": "that far of the classmates file working look like store a list of tuples you're",
    "start": "1427140",
    "end": "1433110"
  },
  {
    "text": "printing out the rolls okay so let's start making our program slightly",
    "start": "1433110",
    "end": "1438180"
  },
  {
    "text": "interactive and let's change our data",
    "start": "1438180",
    "end": "1444720"
  },
  {
    "text": "types once again so let's use dicks so right now you're storing a list of",
    "start": "1444720",
    "end": "1451380"
  },
  {
    "text": "tuples let's store a dict for your classmates and let's key it by the",
    "start": "1451380",
    "end": "1457500"
  },
  {
    "text": "classmates first name so the value of the dictionary can continue to be a 32",
    "start": "1457500",
    "end": "1463680"
  },
  {
    "text": "pool if you like but the key is going to be the first name and go ahead and get",
    "start": "1463680",
    "end": "1470850"
  },
  {
    "text": "it to print out all the names again so you can have a loop over a dictionary and retrieve the values from the dictionary and then the next step is",
    "start": "1470850",
    "end": "1477540"
  },
  {
    "text": "we're going to put ourselves in an infinite loop and get some input from the user and that",
    "start": "1477540",
    "end": "1485420"
  },
  {
    "text": "input is going to be a first name and if the first name exists we're going to print it out so a couple of new concepts",
    "start": "1485420",
    "end": "1494940"
  },
  {
    "text": "to dig into",
    "start": "1494940",
    "end": "1498769"
  },
  {
    "text": "meet the built-in function raw input so you won't use this a ton but something",
    "start": "1523820",
    "end": "1529250"
  },
  {
    "start": "1524000",
    "end": "1571000"
  },
  {
    "text": "for quick and dirty scripts it's useful raw input takes a string it prints the",
    "start": "1529250",
    "end": "1535250"
  },
  {
    "text": "string out to standard out reads from standard in until the user hits the enter key and returns you whatever the",
    "start": "1535250",
    "end": "1542750"
  },
  {
    "text": "user typed so I say answer equals raw input and I noted you typically leave us",
    "start": "1542750",
    "end": "1548180"
  },
  {
    "text": "space if you don't leave that space your cursor is blinking right up against the end of your screen and I'll type",
    "start": "1548180",
    "end": "1554360"
  },
  {
    "text": "something hit enter and answer is the variable that I was storing the return value from raw but an answer has what it",
    "start": "1554360",
    "end": "1561890"
  },
  {
    "text": "is that I typed and the other thing will",
    "start": "1561890",
    "end": "1570830"
  },
  {
    "text": "introduce here is the idea of an infinite loop so lots of GUI programming and a lot of program that uses",
    "start": "1570830",
    "end": "1577460"
  },
  {
    "start": "1571000",
    "end": "1673000"
  },
  {
    "text": "interactivity will frequently have a main event loop and if you use a GUI tool kit of some kind it'll usually",
    "start": "1577460",
    "end": "1582830"
  },
  {
    "text": "provide the event loop for you and you're basically doing event based programming in that case you just respond to certain conditions I can be",
    "start": "1582830",
    "end": "1589010"
  },
  {
    "text": "quite that sophisticated here but we are going to do an infinite loop or almost",
    "start": "1589010",
    "end": "1598820"
  },
  {
    "text": "infinite loop we'll start out with an infinite loop",
    "start": "1598820",
    "end": "1602350"
  },
  {
    "text": "and I have an error on line 7 i'm",
    "start": "1644710",
    "end": "1653720"
  },
  {
    "text": "missing comma and that's not related to",
    "start": "1653720",
    "end": "1674000"
  },
  {
    "text": "the present returns is just a formatting issue so if i don't put that space i take a space out it still works exactly",
    "start": "1674000",
    "end": "1679700"
  },
  {
    "text": "the same but my crews are kind of right up against and like let's say you ended with a question mark that looks kind of",
    "start": "1679700",
    "end": "1687740"
  },
  {
    "text": "weird when i answer so all i was noting is it's a typical formatting thing and",
    "start": "1687740",
    "end": "1692809"
  },
  {
    "text": "leave a space at the end or several spaces at the end yep so if you notice i",
    "start": "1692809",
    "end": "1703460"
  },
  {
    "text": "have a never terminating program now it's while true and true never changes it's prompting for input and whatever I",
    "start": "1703460",
    "end": "1713030"
  },
  {
    "text": "type it echoes back to me",
    "start": "1713030",
    "end": "1716860"
  },
  {
    "text": "slightly interactive a raw input and your never-ending program i'm using",
    "start": "1723230",
    "end": "1728580"
  },
  {
    "text": "control-c to break and control see your control d will break for you depending",
    "start": "1728580",
    "end": "1733710"
  },
  {
    "text": "on your OS as well once you have a never-ending loop we'll talk about how to make a slightly nicer exit loop",
    "start": "1733710",
    "end": "1742220"
  },
  {
    "text": "so this is good everybody's trying to define some dictionaries and bumping into several edge cases so your keys",
    "start": "1770980",
    "end": "1777610"
  },
  {
    "start": "1771000",
    "end": "1975000"
  },
  {
    "text": "have to be quoted and this is slightly confusing some of the languages know that your keys are going to be strings",
    "start": "1777610",
    "end": "1782980"
  },
  {
    "text": "and so they don't force you to put quotes around them Python will actually let you use a variety of dictionary types for keys so you do have to specify",
    "start": "1782980",
    "end": "1789309"
  },
  {
    "text": "quotes if you want your keys to be strings and also as we've discussed",
    "start": "1789309",
    "end": "1801309"
  },
  {
    "text": "there's two ways to initialize dictionaries and it's actually more than two ways the way we're doing it was with",
    "start": "1801309",
    "end": "1807220"
  },
  {
    "text": "braces and then it's a key a colon and a",
    "start": "1807220",
    "end": "1813490"
  },
  {
    "text": "value of some kind which in our case is a tuple right that's one way to get a",
    "start": "1813490",
    "end": "1819130"
  },
  {
    "text": "dict another way is with the built-in data function dict creates elements of",
    "start": "1819130",
    "end": "1825640"
  },
  {
    "text": "type in this case you use key it doesn't have to be quoted because it's actually a parameter to a function they",
    "start": "1825640",
    "end": "1837700"
  },
  {
    "text": "exist",
    "start": "1837700",
    "end": "1840120"
  },
  {
    "text": "which will get you the same thing the dict function will also take confusingly",
    "start": "1851840",
    "end": "1857200"
  },
  {
    "text": "lists of 22 polls",
    "start": "1857200",
    "end": "1861309"
  },
  {
    "text": "and it will use the first sorry",
    "start": "1868140",
    "end": "1875930"
  },
  {
    "text": "item in each tuple as the key and the second as the value you can initialize a",
    "start": "1878760",
    "end": "1885160"
  },
  {
    "text": "dictionary if you have a list of two tuples and it is actually semi common",
    "start": "1885160",
    "end": "1891370"
  },
  {
    "text": "for converting back and forth between data types but for the moment stick with curly braces quoted keys colon and our",
    "start": "1891370",
    "end": "1900429"
  },
  {
    "text": "value",
    "start": "1900429",
    "end": "1902760"
  },
  {
    "text": "doesn't matter you're specifying a string so you can use single quote double quote triple quote doesn't matter",
    "start": "1915910",
    "end": "1922160"
  },
  {
    "text": "we're specifying string keys if you leave the quotes off it needs to be a valid variable or it needs to be another",
    "start": "1922160",
    "end": "1928370"
  },
  {
    "text": "basic type so people should be maybe on a step two most people have got a",
    "start": "1928370",
    "end": "1934640"
  },
  {
    "text": "dictionary stored they can loop over it and print it so step two is get input from the user and print out the student",
    "start": "1934640",
    "end": "1940700"
  },
  {
    "text": "record if it exists and let's do a",
    "start": "1940700",
    "end": "1946580"
  },
  {
    "text": "couple things about getting values from dictionaries how do i test and see if a",
    "start": "1946580",
    "end": "1952130"
  },
  {
    "text": "first name is a key in my dictionary",
    "start": "1952130",
    "end": "1955450"
  },
  {
    "text": "okay so I have an answer that semi and I have a dictionary that's badly filled out and doesn't have Simeon in it how do",
    "start": "1974220",
    "end": "1981490"
  },
  {
    "start": "1975000",
    "end": "2086000"
  },
  {
    "text": "i tell if that answer is in my dictionary and therefore there's something for me to retrieve sweet so",
    "start": "1981490",
    "end": "1988960"
  },
  {
    "text": "yeah the in operator works great and",
    "start": "1988960",
    "end": "1995100"
  },
  {
    "text": "it's false there's a couple of other methods if I just directly dereference",
    "start": "1995100",
    "end": "2000750"
  },
  {
    "text": "the dictionary it'll raise an exception if the key doesn't exist it's a key",
    "start": "2000750",
    "end": "2007770"
  },
  {
    "text": "error exception and we don't know yet how to handle exceptions other will get there dictionaries provide a convenience",
    "start": "2007770",
    "end": "2016200"
  },
  {
    "text": "method called get and get functions just like dereferencing does with a couple of",
    "start": "2016200",
    "end": "2028620"
  },
  {
    "text": "exceptions one is no exception thrown",
    "start": "2028620",
    "end": "2037500"
  },
  {
    "text": "and the other is you can provide a default value to be returned instead of",
    "start": "2037500",
    "end": "2042620"
  },
  {
    "text": "none which is what's returned by default if it doesn't find the key so you could",
    "start": "2042620",
    "end": "2051510"
  },
  {
    "text": "say if dick get answer and that's the",
    "start": "2051510",
    "end": "2059128"
  },
  {
    "text": "same thing as saying none as the default",
    "start": "2059129",
    "end": "2065179"
  },
  {
    "text": "but if for some reason you were interested in some default for instance",
    "start": "2065179",
    "end": "2070530"
  },
  {
    "text": "if you wanted to quit whenever the key wasn't found",
    "start": "2070530",
    "end": "2075619"
  },
  {
    "text": "in this case might if is successful because it gets back a default value",
    "start": "2078480",
    "end": "2083618"
  },
  {
    "text": "quit even though the key wasn't found operators and probably people are guessing and finding out that their",
    "start": "2083619",
    "end": "2089648"
  },
  {
    "text": "guesses work out pretty well but we talked about the Equality operator",
    "start": "2089649",
    "end": "2094810"
  },
  {
    "text": "before so if the variable on the left",
    "start": "2094810",
    "end": "2103420"
  },
  {
    "text": "hand side is the same as the variable on the right hand side in some sense then it returns true we didn't talk about the",
    "start": "2103420",
    "end": "2109150"
  },
  {
    "text": "not equals operator which in Python is the exclamation the bang equals it's",
    "start": "2109150",
    "end": "2117700"
  },
  {
    "text": "false in this case because a really is equal to be the value of a really is equal to B and I saw a few people trying",
    "start": "2117700",
    "end": "2128279"
  },
  {
    "text": "which doesn't actually work since not is basically just a boolean inverter",
    "start": "2128430",
    "end": "2136170"
  },
  {
    "text": "not requires a single value not a dual operator so this statement on line 8",
    "start": "2152059",
    "end": "2159819"
  },
  {
    "text": "order of execution is a equal equal B gets evaluated to a single boolean which is true not true is evaluated and not",
    "start": "2159819",
    "end": "2169130"
  },
  {
    "text": "true just flips it to false and it's cast a boolean which it didn't need to be so not equals is the logical not",
    "start": "2169130",
    "end": "2179059"
  },
  {
    "text": "equals operator and earlier we were doing less than and greater than operators for numbers and is also less",
    "start": "2179059",
    "end": "2186319"
  },
  {
    "text": "than or equal greater than or equal just kind of like you'd expect so debugging",
    "start": "2186319",
    "end": "2195680"
  },
  {
    "text": "tools while you're writing your code there's a module called pretty print P",
    "start": "2195680",
    "end": "2203059"
  },
  {
    "text": "print and it has a function pretty print",
    "start": "2203059",
    "end": "2211059"
  },
  {
    "text": "that will nicely format whatever data structure it gets in some probably",
    "start": "2211059",
    "end": "2216319"
  },
  {
    "text": "program or logical format",
    "start": "2216319",
    "end": "2221799"
  },
  {
    "text": "in this case it isn't splitting it up by lines",
    "start": "2239859",
    "end": "2244200"
  },
  {
    "text": "it's the identical output let's try with some longer",
    "start": "2248890",
    "end": "2253990"
  },
  {
    "text": "okay so until i get to 80 characters why it is not going to split that up into multiple streams but preprint can accept",
    "start": "2307730",
    "end": "2314570"
  },
  {
    "text": "arguments to say how the formatting should happen",
    "start": "2314570",
    "end": "2319540"
  },
  {
    "text": "if I really needed less than 80 characters what you sort of do you have a narrow console",
    "start": "2337390",
    "end": "2343480"
  },
  {
    "text": "yes with a colon at the end printer for",
    "start": "2366489",
    "end": "2375950"
  },
  {
    "text": "print value sorry yeah right value and notice that that's printing the keys so",
    "start": "2375950",
    "end": "2383420"
  },
  {
    "text": "if you want to print the actual value that stored you need to print X brackets value I could have done the same tour on",
    "start": "2383420",
    "end": "2390499"
  },
  {
    "start": "2388000",
    "end": "2492000"
  },
  {
    "text": "strings that we did on lists which is look at all the built-in methods on a string type and there's a bunch of nice",
    "start": "2390499",
    "end": "2397130"
  },
  {
    "text": "formatting methods that will get you you know half the way to having to break out reg ex is so for instance just checking",
    "start": "2397130",
    "end": "2404089"
  },
  {
    "text": "to see if its digits or if it's alphanumeric there's some things built in like that or has spaces there's lower",
    "start": "2404089",
    "end": "2410479"
  },
  {
    "text": "and upper what to do what you think they would X is a lowercase string right now",
    "start": "2410479",
    "end": "2417999"
  },
  {
    "text": "there's even",
    "start": "2418509",
    "end": "2421599"
  },
  {
    "text": "as it just title this title title case which will capitalize the first letter",
    "start": "2425070",
    "end": "2430380"
  },
  {
    "text": "of any word which kind of peaceful and you Lee right now is checking for a particular character and she doesn't",
    "start": "2430380",
    "end": "2436950"
  },
  {
    "text": "want to check and see if it's uppercase or lowercase so she can just say if",
    "start": "2436950",
    "end": "2443030"
  },
  {
    "text": "answer got lower that gets you a lowercase string bracket 0 that gives",
    "start": "2443030",
    "end": "2450900"
  },
  {
    "text": "you the first character in that string as long as it is a string that'll work",
    "start": "2450900",
    "end": "2456720"
  },
  {
    "text": "out and let's",
    "start": "2456720",
    "end": "2459650"
  },
  {
    "text": "and it is kind of nice most of the there's a lot of chaining possibilities I thought lets me go ahead and just",
    "start": "2472170",
    "end": "2478770"
  },
  {
    "text": "append the indexing operator right on the end of that function call yes there",
    "start": "2478770",
    "end": "2485040"
  },
  {
    "text": "so there is no char type and Python there's only string a single length string is still string so yeah so lists",
    "start": "2485040",
    "end": "2494130"
  },
  {
    "start": "2492000",
    "end": "2707000"
  },
  {
    "text": "if we wanted to add something to list we could use like a pen you can append or insert or whatever for dicks",
    "start": "2494130",
    "end": "2501588"
  },
  {
    "text": "update takes another and copies all those values which is sometimes useful but you just want to add one",
    "start": "2509260",
    "end": "2515860"
  },
  {
    "text": "entry it's by bracket assignment so just",
    "start": "2515860",
    "end": "2522700"
  },
  {
    "text": "like a dereference to get the value out i can dereference to set the value and",
    "start": "2522700",
    "end": "2532290"
  },
  {
    "text": "if the key is there it's updated yep one",
    "start": "2532290",
    "end": "2540370"
  },
  {
    "text": "more data type that's kind of list like is the set data type set does not have",
    "start": "2540370",
    "end": "2547420"
  },
  {
    "text": "its own kind of braces just because we ran out of them we've got the parentheses for tuples got square brackets for lists and we've got the",
    "start": "2547420",
    "end": "2553570"
  },
  {
    "text": "curly braces for dicks we have no more bracket kind of things on our keyboard although you know now that I say that",
    "start": "2553570",
    "end": "2559630"
  },
  {
    "text": "angle brackets are severely underutilized but then we'd be pearl um so we can only make sets with a set dict",
    "start": "2559630",
    "end": "2569470"
  },
  {
    "text": "and the set accepts a list",
    "start": "2569470",
    "end": "2576450"
  },
  {
    "text": "what differentiates sets from what is",
    "start": "2586609",
    "end": "2591799"
  },
  {
    "text": "the name set do for you anybody know anything about sets doesn't make you",
    "start": "2591799",
    "end": "2602779"
  },
  {
    "text": "think of like you know sixth grade math problems with Venn diagrams and mutually exclusive sets and things like that so",
    "start": "2602779",
    "end": "2608450"
  },
  {
    "text": "sets lists you can store anything you want in a list it can be heterogeneous objects you can have a list that's 50 s",
    "start": "2608450",
    "end": "2616069"
  },
  {
    "text": "asset is a unique list there's no",
    "start": "2616069",
    "end": "2621920"
  },
  {
    "text": "implied ordering to a set there's no sense of sorting a set but you can then",
    "start": "2621920",
    "end": "2627019"
  },
  {
    "text": "use set type operations on a set so the",
    "start": "2627019",
    "end": "2632869"
  },
  {
    "text": "first time this looked like we got exactly what we expected the second time",
    "start": "2632869",
    "end": "2638660"
  },
  {
    "text": "you'll notice I have a set that accepts a list with a repeating element and my",
    "start": "2638660",
    "end": "2644690"
  },
  {
    "text": "resulting set only has that element one time so it's throwing out duplicates in",
    "start": "2644690",
    "end": "2649970"
  },
  {
    "text": "my list when it's constructed and you cannot index into sets because there's",
    "start": "2649970",
    "end": "2659029"
  },
  {
    "text": "no sense of order in sets and that's actually kind of inherent two sets as a mathematical property it's an unordered",
    "start": "2659029",
    "end": "2664670"
  },
  {
    "text": "collection but you can do with sets our compare sets to do things like the",
    "start": "2664670",
    "end": "2671150"
  },
  {
    "text": "intersection of two sets or what is exclusively in the left or right set so",
    "start": "2671150",
    "end": "2678410"
  },
  {
    "text": "let's construct ourselves some sets",
    "start": "2678410",
    "end": "2682088"
  },
  {
    "text": "I have two sets we can use the built-in set functions and I'm going to do a and",
    "start": "2699720",
    "end": "2706109"
  },
  {
    "text": "dot to see the list of functions I've got here in ipython and some of these",
    "start": "2706109",
    "end": "2711869"
  },
  {
    "start": "2707000",
    "end": "3137000"
  },
  {
    "text": "are kind of obvious like ad and clear and copy difference accepts another set",
    "start": "2711869",
    "end": "2720540"
  },
  {
    "text": "and a difference be gives me everything that exists in a that does not exist in",
    "start": "2720540",
    "end": "2729300"
  },
  {
    "text": "B and I can also shortcut that by using the minus operator to run the difference",
    "start": "2729300",
    "end": "2737130"
  },
  {
    "text": "function on two sets and notice that difference with sets is not commutative",
    "start": "2737130",
    "end": "2743000"
  },
  {
    "text": "B minus a gives me everything that's in B is not an a the answers are not the same there's also intersection which",
    "start": "2743000",
    "end": "2755670"
  },
  {
    "text": "gives me the list of things that's in both sets",
    "start": "2755670",
    "end": "2761000"
  },
  {
    "text": "and I don't remember if there's a shortcut for intersection and it doesn't",
    "start": "2768280",
    "end": "2774610"
  },
  {
    "text": "look like it and there's also actually",
    "start": "2774610",
    "end": "2781990"
  },
  {
    "text": "there is that's right",
    "start": "2781990",
    "end": "2784860"
  },
  {
    "text": "ampersand which ampersand by itself in some languages is used for logical ends but more frequently for boolean and in",
    "start": "2790480",
    "end": "2798220"
  },
  {
    "text": "Python it is only a boolean and which is a bit flipping operation that you",
    "start": "2798220",
    "end": "2803560"
  },
  {
    "text": "probably won't have to use very often it's overridden in some end-user classes",
    "start": "2803560",
    "end": "2809350"
  },
  {
    "text": "to give you a logical and sense so it's",
    "start": "2809350",
    "end": "2816670"
  },
  {
    "text": "intersection there's also a symmetric difference and if I don't talk about",
    "start": "2816670",
    "end": "2827560"
  },
  {
    "text": "symmetric difference did for me",
    "start": "2827560",
    "end": "2830850"
  },
  {
    "text": "right so everything that's not in the intersection of the sets the stuff that's only in the left one or only in",
    "start": "2842220",
    "end": "2848589"
  },
  {
    "text": "the right one but nothing that's in both and that has another bit shifting",
    "start": "2848589",
    "end": "2856299"
  },
  {
    "text": "operation that shifting operator overloaded in real usage I rarely use",
    "start": "2856299",
    "end": "2862059"
  },
  {
    "text": "things like symmetric difference I do some ties use intersection what I mostly use sets for is the common problem of I",
    "start": "2862059",
    "end": "2869349"
  },
  {
    "text": "have a list find me the unique elements in the list you might have rid read in a",
    "start": "2869349",
    "end": "2877240"
  },
  {
    "text": "whole bunch of numbers and you just want to know how many unique items were there",
    "start": "2877240",
    "end": "2884250"
  },
  {
    "text": "for unique items I convert my list to a set which throws out all the duplicates",
    "start": "2886589",
    "end": "2893710"
  },
  {
    "text": "and then I can still take the length of a set and that's how many unique items I",
    "start": "2893710",
    "end": "2900280"
  },
  {
    "text": "have the most common use along with sets",
    "start": "2900280",
    "end": "2908650"
  },
  {
    "text": "there's a couple of new built-ins we could talk about one is one that will give you fits from time to time I think",
    "start": "2908650",
    "end": "2915579"
  },
  {
    "text": "it's the built-in called zip and zip has nothing to do with compression zip is",
    "start": "2915579",
    "end": "2923589"
  },
  {
    "text": "for transitioning tuples and what you usually see zip demo dad's like if you",
    "start": "2923589",
    "end": "2930190"
  },
  {
    "text": "to two examples of zip what you usually hear zip explained as is taking two",
    "start": "2930190",
    "end": "2936609"
  },
  {
    "text": "lists and returning a 2-tuple with the I",
    "start": "2936609",
    "end": "2942760"
  },
  {
    "text": "a--the pair from each list I think that's the explanation that's on python org so let's look at that one",
    "start": "2942760",
    "end": "2950700"
  },
  {
    "text": "okay so this is what a lot of people will use zip for I have two lists a and B and zip accepts the two lists and for",
    "start": "2980339",
    "end": "2989130"
  },
  {
    "text": "each position it returns me the value at that position as a tuple so I have the",
    "start": "2989130",
    "end": "2995039"
  },
  {
    "text": "first value in my resulting list is a 2-tuple that has 0 and 60 being the",
    "start": "2995039",
    "end": "3000440"
  },
  {
    "text": "first position in the first list and six being the first position in the second list and so forth and you will actually",
    "start": "3000440",
    "end": "3007039"
  },
  {
    "text": "use zip like that occasionally I think a more intuitive explanation of zip is zip",
    "start": "3007039",
    "end": "3013160"
  },
  {
    "text": "accepts lists that represent rows of data and it returns a list where each",
    "start": "3013160",
    "end": "3020359"
  },
  {
    "text": "entry represents columns of data and I actually use it for that quite often so",
    "start": "3020359",
    "end": "3029660"
  },
  {
    "text": "let's also define see",
    "start": "3029660",
    "end": "3033038"
  },
  {
    "text": "and if I wanted the first if I wanted the second column out of my data I have",
    "start": "3050650",
    "end": "3055870"
  },
  {
    "text": "a bunch of input rose and I want the second column because I zip a B and C",
    "start": "3055870",
    "end": "3062250"
  },
  {
    "text": "and grab the first position in the resulting row and that's this column",
    "start": "3063120",
    "end": "3074310"
  },
  {
    "text": "seems somehow more intuitive to me so it",
    "start": "3075540",
    "end": "3082000"
  },
  {
    "text": "throws away the extra elements the resulting list of columns only has as",
    "start": "3082000",
    "end": "3088150"
  },
  {
    "text": "many columns as the shortest and the iterators package has a couple of additional zip extensions that let you",
    "start": "3088150",
    "end": "3094540"
  },
  {
    "text": "do things like filling a default value go to the longest one so let's go ahead",
    "start": "3094540",
    "end": "3104470"
  },
  {
    "text": "and use zip right away and sets by",
    "start": "3104470",
    "end": "3112900"
  },
  {
    "text": "saving your classmates file as a new file classmates three would be appropriate and go ahead and print out",
    "start": "3112900",
    "end": "3119410"
  },
  {
    "text": "all the unique roles in your database as your first order of operation so you've",
    "start": "3119410",
    "end": "3125950"
  },
  {
    "text": "got a list of people in the room they all have a role assigned with them print",
    "start": "3125950",
    "end": "3131920"
  },
  {
    "text": "out a list of unique roles no repetition in the roles you do not have to change",
    "start": "3131920",
    "end": "3138700"
  },
  {
    "text": "your data format at all for this which",
    "start": "3138700",
    "end": "3146260"
  },
  {
    "text": "just means no duplication in your list of roles so not roles that only have one corresponding but don't print out a list",
    "start": "3146260",
    "end": "3153160"
  },
  {
    "text": "that says student student student student instructor fern alyssa says student and instructor which is a hint",
    "start": "3153160",
    "end": "3158710"
  },
  {
    "text": "that i want you to get a list of all the roles and convert it to a set which will throw away any duplicates and print out",
    "start": "3158710",
    "end": "3165970"
  },
  {
    "text": "the set so do people have a clear idea of how it is that they would solve this",
    "start": "3165970",
    "end": "3172030"
  },
  {
    "text": "last little Nutcracker okay so that's good i'm trying to make you do something",
    "start": "3172030",
    "end": "3178050"
  },
  {
    "text": "so that when we introduce an additional piece of syntax tomorrow it'll seem like the solution to a problem",
    "start": "3178050",
    "end": "3183569"
  },
  {
    "text": "and it really does turn out to be the solution to a problem but let's solve this ourselves together first in the",
    "start": "3183569",
    "end": "3189630"
  },
  {
    "text": "slightly awkward way that we have to do it right now and then we're gonna take a break since it's three and I've been",
    "start": "3189630",
    "end": "3195089"
  },
  {
    "text": "forgetting and then when we come back we're going to talk about functions for a little bit so data I have a data",
    "start": "3195089",
    "end": "3202739"
  },
  {
    "text": "structure like everybody else has pretty much right now names it has it's a dictionary it's indexed by first name",
    "start": "3202739",
    "end": "3208739"
  },
  {
    "text": "and has a 3-2 pole with the first last name and roll of each student I want to",
    "start": "3208739",
    "end": "3215940"
  },
  {
    "text": "get a list of the unique roles so I want",
    "start": "3215940",
    "end": "3222119"
  },
  {
    "text": "to use set at some point and since what I want is kind of a column in my data",
    "start": "3222119",
    "end": "3227609"
  },
  {
    "text": "I'm tempted to use zip to retrieve that column if I want to use a zip that means",
    "start": "3227609",
    "end": "3234719"
  },
  {
    "text": "i need to retrieve the rose first and I could do this name's Danny that's a row",
    "start": "3234719",
    "end": "3251299"
  },
  {
    "text": "that's two rows",
    "start": "3254010",
    "end": "3257120"
  },
  {
    "text": "explicitly get the rose I can just do",
    "start": "3262850",
    "end": "3270060"
  },
  {
    "text": "names values and that gives the three",
    "start": "3270060",
    "end": "3275760"
  },
  {
    "text": "rows for me so names is a dict dicks have a variety of ways to retrieve their",
    "start": "3275760",
    "end": "3282300"
  },
  {
    "text": "contents there's keys which we return a list of keys values with return a list",
    "start": "3282300",
    "end": "3289320"
  },
  {
    "text": "of values which in this case happen to be tuples items which returns tuples of",
    "start": "3289320",
    "end": "3300420"
  },
  {
    "text": "key value pairs let's use values and",
    "start": "3300420",
    "end": "3306330"
  },
  {
    "text": "with values I have the rose that I want I need to pass them to zip and the only",
    "start": "3306330",
    "end": "3316890"
  },
  {
    "text": "way I know how to do that right now is let's go ahead and say Rose equals names",
    "start": "3316890",
    "end": "3324510"
  },
  {
    "text": "values so there's my rose",
    "start": "3324510",
    "end": "3331100"
  },
  {
    "text": "is explicitly specify each list that I'm passing the zip and zip returns columns",
    "start": "3337460",
    "end": "3345200"
  },
  {
    "text": "right so it returns a column with his",
    "start": "3345200",
    "end": "3350300"
  },
  {
    "text": "first names a calm its last name on a",
    "start": "3350300",
    "end": "3356869"
  },
  {
    "text": "column I want which is students so let's get that column now I've got a tuple of",
    "start": "3356869",
    "end": "3365390"
  },
  {
    "text": "just of just the roles and I could convert that one to a set and back to a",
    "start": "3365390",
    "end": "3374420"
  },
  {
    "text": "list get a list of unique instructors",
    "start": "3374420",
    "end": "3382480"
  },
  {
    "text": "that's a lot of functionality packed into one line with wakeham any parentheses and there's a really ugly",
    "start": "3382720",
    "end": "3388910"
  },
  {
    "text": "Kluge in there which is how can I do this if I have more rows like I have to pass each row 2 zip explicitly what if",
    "start": "3388910",
    "end": "3397609"
  },
  {
    "text": "my list of names had five and since I'm going to add a name I don't know how many it has each time how can I handle",
    "start": "3397609",
    "end": "3404810"
  },
  {
    "text": "that case we're going to answer that tomorrow today we're going to take a",
    "start": "3404810",
    "end": "3410089"
  },
  {
    "text": "break first and then we're going to talk about functions and functions and function and handling pythons very",
    "start": "3410089",
    "end": "3417020"
  },
  {
    "text": "sophisticated function and argument handling is the answer to the question and let's go out and take a break grab",
    "start": "3417020",
    "end": "3422660"
  },
  {
    "text": "yourself some coffee or snacks in case I nobody else gave you the welcoming speech have that out there there's a",
    "start": "3422660",
    "end": "3428150"
  },
  {
    "text": "fridge with juice and you know sodas and water and whatnot feel free there's some snacks out there there's still some",
    "start": "3428150",
    "end": "3433460"
  },
  {
    "text": "pastries left in this morning there's some snacks and bags Gorp whatever so feel free",
    "start": "3433460",
    "end": "3440170"
  },
  {
    "text": "you",
    "start": "3442060",
    "end": "3444120"
  }
]