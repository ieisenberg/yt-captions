[
  {
    "text": "well good morning everybody and now the parts you've all been waiting for",
    "start": "8570",
    "end": "13980"
  },
  {
    "text": "the better parts so we're gonna start with with this guy Antoine de",
    "start": "13980",
    "end": "23490"
  },
  {
    "text": "saint-exupery a famous aviator and writer brilliant writer he is best",
    "start": "23490",
    "end": "30390"
  },
  {
    "text": "remembered for having written with the little prince which is one of those wonderful children's books that isn't",
    "start": "30390",
    "end": "35550"
  },
  {
    "text": "really a children's book great bit of writing but he wrote other books as well and they were all brilliant and in one",
    "start": "35550",
    "end": "42090"
  },
  {
    "text": "of them in particular he writes this sentence it seems that perfection is",
    "start": "42090",
    "end": "47399"
  },
  {
    "text": "obtained not when there is nothing more to add but when there is nothing more to subtract absolutely brilliant I've seen",
    "start": "47399",
    "end": "55199"
  },
  {
    "text": "this quote used over and over to describe engineering architecture design",
    "start": "55199",
    "end": "60870"
  },
  {
    "text": "anything which combines creativity and discipline he was talking about the design of airplanes but it seems to talk",
    "start": "60870",
    "end": "68670"
  },
  {
    "text": "about all kinds of things and I think it applies especially to software because of the requirement for programs to be",
    "start": "68670",
    "end": "75090"
  },
  {
    "text": "perfect we have a greater requirement for perfection than any other craft and",
    "start": "75090",
    "end": "80900"
  },
  {
    "text": "he gives us some wonderful insight as to how to attain that perfection I think it",
    "start": "80900",
    "end": "87119"
  },
  {
    "text": "also has applied well to programming languages and the idea is that we can",
    "start": "87119",
    "end": "92820"
  },
  {
    "text": "make programming languages more perfect by removing their imperfections and that's what I call the principle of the",
    "start": "92820",
    "end": "100079"
  },
  {
    "text": "good parts which is if a feature is sometimes useful and sometimes dangerous",
    "start": "100079",
    "end": "106409"
  },
  {
    "text": "and if there is a better option than always use the better option I think",
    "start": "106409",
    "end": "112049"
  },
  {
    "text": "this is obviously true a lot of people don't they say you know I don't want to",
    "start": "112049",
    "end": "118500"
  },
  {
    "text": "use a better option which really doesn't make sense but",
    "start": "118500",
    "end": "124340"
  },
  {
    "text": "there's a lot of that out there and and I think it comes from a fundamental misunderstanding we are not paid to use",
    "start": "124340",
    "end": "131780"
  },
  {
    "text": "every feature of the language at the end of the project there isn't a manager with a clipboard saying you'd use a with",
    "start": "131780",
    "end": "137630"
  },
  {
    "text": "statement did you leave out any semicolons did you use commas as operators do you know we're paid to",
    "start": "137630",
    "end": "146810"
  },
  {
    "text": "write programs that work well and are free of error free of error wait a",
    "start": "146810",
    "end": "152420"
  },
  {
    "text": "minute when did that become part of the deal it has always been part of the deal it's just we attained it so rarely it's",
    "start": "152420",
    "end": "159680"
  },
  {
    "text": "easy to forget that it's the first requirement so the the good parts I",
    "start": "159680",
    "end": "165800"
  },
  {
    "text": "wrote a book about it a few years ago applied to JavaScript and remarkably it",
    "start": "165800",
    "end": "170840"
  },
  {
    "text": "is still a best-seller in its category which is extremely rare for software books software books often become",
    "start": "170840",
    "end": "177320"
  },
  {
    "text": "obsolete before they're printed and so to still be current years later is it's kind of amazing and it's because what I",
    "start": "177320",
    "end": "184010"
  },
  {
    "text": "identified as good parts actually are good parts and and so the even though the language has gone through a couple",
    "start": "184010",
    "end": "189800"
  },
  {
    "text": "of divisions since then it is still relevant now it's surprisingly controversial",
    "start": "189800",
    "end": "195530"
  },
  {
    "text": "there are a lot of arguments against the good parts and I'd like to go through some of these quickly the first argument",
    "start": "195530",
    "end": "201110"
  },
  {
    "text": "is well that's just a matter of opinion it turns out it's not if you look at",
    "start": "201110",
    "end": "206690"
  },
  {
    "text": "programming from the perspective of what can we do",
    "start": "206690",
    "end": "212590"
  },
  {
    "text": "in order to drive our error rate to zero what kind of discipline do we have to bring to the craft in order to get zero",
    "start": "212590",
    "end": "219280"
  },
  {
    "text": "errors then you have to go to the good parts because taking unnecessary chances",
    "start": "219280",
    "end": "226540"
  },
  {
    "text": "removes you from getting to perfection I have the privilege of being the",
    "start": "226540",
    "end": "232000"
  },
  {
    "text": "maintainer of jslint and I receive bug reports from people from all over the",
    "start": "232000",
    "end": "237520"
  },
  {
    "text": "world things like we spent two weeks chasing down some obscure bug which was caused by someone missed typing a period",
    "start": "237520",
    "end": "244420"
  },
  {
    "text": "as an equal sign and that turned out to be syntactically equal and nobody saw it looking at the code and just cost us a",
    "start": "244420",
    "end": "250810"
  },
  {
    "text": "lot of time and money could jslint find stuff like that and the next edition of",
    "start": "250810",
    "end": "255970"
  },
  {
    "text": "jslint will so but there's a cost of that and that is that there are certain silly expressions that which you cannot",
    "start": "255970",
    "end": "263110"
  },
  {
    "text": "use because they alias to these things which don't go wrong very often but when",
    "start": "263110",
    "end": "268480"
  },
  {
    "text": "they do go wrong they really hurt you so if you've always followed jeaious Lintz advice you will never experience those",
    "start": "268480",
    "end": "276010"
  },
  {
    "text": "problems that's not a matter of opinion that is a fact every feature of the",
    "start": "276010",
    "end": "282550"
  },
  {
    "text": "language is an essential tool you can't take away the tools that I need to do my work I'm not proposing taking anything",
    "start": "282550",
    "end": "288460"
  },
  {
    "text": "away from you I'm actually giving you a better way to use the language by taking out the parts that are problematic it is",
    "start": "288460",
    "end": "295690"
  },
  {
    "text": "easier to write good programs and ultimately that's what you want I have a",
    "start": "295690",
    "end": "301510"
  },
  {
    "text": "right to use every feature ok the conversation has changed and we're no longer talking about what's the best way",
    "start": "301510",
    "end": "307000"
  },
  {
    "text": "to write programs we're now talking about my rights and ultimately this argument degenerates into I have a right",
    "start": "307000",
    "end": "315370"
  },
  {
    "text": "to write crap and I don't care I mean this is not an",
    "start": "315370",
    "end": "321490"
  },
  {
    "text": "interesting argument what's more important is you have responsibility to",
    "start": "321490",
    "end": "326530"
  },
  {
    "text": "write stuff which is good and that's more important I need the freedom to express myself I",
    "start": "326530",
    "end": "333669"
  },
  {
    "text": "want people to look at my code and go wow I need to reduce my keystrokes this",
    "start": "333669",
    "end": "343720"
  },
  {
    "text": "is a really common one because we imagine that we spend most of our time typing to deter and if we could just",
    "start": "343720",
    "end": "350080"
  },
  {
    "text": "figure out a way to leave out some of the keystrokes that'll improve our productivity turns out typing is not",
    "start": "350080",
    "end": "355750"
  },
  {
    "text": "where we spend most of our time we spend most of our time gazing into the abyss saying my god what have I done if you",
    "start": "355750",
    "end": "365380"
  },
  {
    "text": "can reduce that time you're gonna be more efficient if I could propose a way that I can increase the number of",
    "start": "365380",
    "end": "371260"
  },
  {
    "text": "keystrokes by a factor of 10 and cut your errors in half that would be a huge win unfortunately I can't give you that",
    "start": "371260",
    "end": "379000"
  },
  {
    "text": "advice but you know that that shows the the proportionality here and it's an",
    "start": "379000",
    "end": "385479"
  },
  {
    "text": "insult to suggest that I would ever make a mistake with a dangerous feature again",
    "start": "385479",
    "end": "391240"
  },
  {
    "text": "weird we're way off topic now and there's a good reason those features",
    "start": "391240",
    "end": "396460"
  },
  {
    "text": "were added to the language and this is absolutely false so let me tell you a story so Brendan",
    "start": "396460",
    "end": "404590"
  },
  {
    "text": "Eich the brilliant guy who invented JavaScript put in a double equal operator which did type coercion before",
    "start": "404590",
    "end": "411910"
  },
  {
    "text": "it does the comparison which means that sometimes will give you a false positive answer which is bad because false",
    "start": "411910",
    "end": "418960"
  },
  {
    "text": "positives are confusing and can cause bugs and he recognized that he made a mistake now he wasn't the only one to",
    "start": "418960",
    "end": "425410"
  },
  {
    "text": "make that mistake PHP has that error and it lots of other languages did it so it's but he's smart enough to figure out",
    "start": "425410",
    "end": "431980"
  },
  {
    "text": "that it wasn't right so when the language began at standardization he went to the Standards Committee and said",
    "start": "431980",
    "end": "437320"
  },
  {
    "text": "now's the time to fix it in fact I've already made the fix in Netscape and the",
    "start": "437320",
    "end": "442960"
  },
  {
    "text": "fix made the code smaller and made the language run a little faster so this is a really good thing to do and the",
    "start": "442960",
    "end": "449500"
  },
  {
    "text": "committee said no we're not going to fix it we're going to keep it wrong because of",
    "start": "449500",
    "end": "454810"
  },
  {
    "text": "legacy issues and they offered instead a compromise we'll put in the correct",
    "start": "454810",
    "end": "461740"
  },
  {
    "text": "operator and we'll call it triple equal yeah",
    "start": "461740",
    "end": "468450"
  },
  {
    "text": "and we're stuck with that so I recommend always use triple equal double equal was",
    "start": "468510",
    "end": "473740"
  },
  {
    "text": "not put into the language for a good reason so Brendan talks about foot guns",
    "start": "473740",
    "end": "479070"
  },
  {
    "text": "the foot gun is a feature of a language that you use to shoot yourself in the foot so yet got away and he regrets that",
    "start": "479070",
    "end": "490330"
  },
  {
    "text": "he put so many foot guns into JavaScript and he admonishes the committee that",
    "start": "490330",
    "end": "495400"
  },
  {
    "text": "maintains a language from time to time let's not put in too many more because they're people who go all right yeah I",
    "start": "495400",
    "end": "502600"
  },
  {
    "text": "almost always miss it's great watch",
    "start": "502600",
    "end": "506970"
  },
  {
    "text": "there's the fantasy of infallibility you see this a lot especially in younger",
    "start": "508380",
    "end": "513969"
  },
  {
    "text": "programmers that my skills are so awesome I can just do crazy stuff and it'll it well it'll work enough and then",
    "start": "513970",
    "end": "521380"
  },
  {
    "text": "it's great and then there's a futility of thoughtlessness you find this especially among old guys it's never",
    "start": "521380",
    "end": "528670"
  },
  {
    "text": "worked it's never gonna work why do we even try you know Justin so two very very",
    "start": "528670",
    "end": "536510"
  },
  {
    "text": "different attitudes indicating two very different life experiences but they both end in the same place that is danger",
    "start": "536510",
    "end": "544610"
  },
  {
    "text": "driven development so one of the things that makes the scheduling of software so",
    "start": "544610",
    "end": "551779"
  },
  {
    "text": "difficult or the management of software so difficult is the difficulty of scheduling so when we're scheduling we",
    "start": "551779",
    "end": "558980"
  },
  {
    "text": "have to estimate how much time is gonna take to write the code and that's really hard we don't know how to do that we",
    "start": "558980",
    "end": "565370"
  },
  {
    "text": "guess and sometimes I guesses are off by not too much and sometimes they're off by a whole lot but then there's an init",
    "start": "565370",
    "end": "572870"
  },
  {
    "text": "an additional time you have to be concerned with the time it takes that to make the code work right this should be",
    "start": "572870",
    "end": "580519"
  },
  {
    "text": "zero right because you should write it and should work but often time B is",
    "start": "580519",
    "end": "585560"
  },
  {
    "text": "bigger than time a sometimes time B is infinite and that happens when the code",
    "start": "585560",
    "end": "593149"
  },
  {
    "text": "is finished but the project is canceled before it's made to work and that that",
    "start": "593149",
    "end": "599360"
  },
  {
    "text": "happens way too often so if you're doing anything in a to try to save time which",
    "start": "599360",
    "end": "605630"
  },
  {
    "text": "adds more time to B you're doing it wrong okay we we want to make be as",
    "start": "605630",
    "end": "611600"
  },
  {
    "text": "small as possible sometimes when people in a hurry they think well we'll just write sloppy stuff because it's quick",
    "start": "611600",
    "end": "617959"
  },
  {
    "text": "because we just have to go on except they forget you still have to make it",
    "start": "617959",
    "end": "623690"
  },
  {
    "text": "work and it's much easier to make it work you can make it work much faster if",
    "start": "623690",
    "end": "629000"
  },
  {
    "text": "you write it well you should always take the time to code well even when you're in a hurry especially when you in a hurry so we've",
    "start": "629000",
    "end": "636350"
  },
  {
    "text": "got a new edition of the language coming out the 6th edition and it's going to",
    "start": "636350",
    "end": "644600"
  },
  {
    "text": "have some good stuff in it there's some new good parts being added to the language I'm really happy about this I'd",
    "start": "644600",
    "end": "649940"
  },
  {
    "text": "like to share some of them with you the first one the best one is proper tail calls this is something we learn to do",
    "start": "649940",
    "end": "656329"
  },
  {
    "text": "with scheme back at MIT in the 70s and finally this idea is getting it too",
    "start": "656329",
    "end": "661800"
  },
  {
    "text": "script with this feature JavaScript finally becomes a real functional programming language and it's really",
    "start": "661800",
    "end": "668070"
  },
  {
    "text": "simple all that happens is if the last thing a function does is return the",
    "start": "668070",
    "end": "673589"
  },
  {
    "text": "result of calling another function or or itself it works with recursion to then",
    "start": "673589",
    "end": "679170"
  },
  {
    "text": "the compiler instead of generating a call return sequence will generate a jump and a jump is a little bit faster",
    "start": "679170",
    "end": "686519"
  },
  {
    "text": "than a subroutine call so that's good but more important it can reuse the activation record so it doesn't have to",
    "start": "686519",
    "end": "692640"
  },
  {
    "text": "allocate memory every time it calls a function which enables whole new kinds",
    "start": "692640",
    "end": "698100"
  },
  {
    "text": "of programming like continuation passing style which is an incredibly powerful form which we could not use until now so",
    "start": "698100",
    "end": "706950"
  },
  {
    "text": "this will be my most favorite new feature of the language next one is the",
    "start": "706950",
    "end": "712500"
  },
  {
    "text": "ellipsis operator which gives us a much better way of dealing with functions",
    "start": "712500",
    "end": "718170"
  },
  {
    "text": "with a variable number of arguments in the past we had to use the arguments array which was really awful an awful",
    "start": "718170",
    "end": "724829"
  },
  {
    "text": "awful thing so here you see two versions of the curry function the first one is written in the es6 style the second one",
    "start": "724829",
    "end": "731070"
  },
  {
    "text": "is written in the es3 style it's just appallingly awful it's just",
    "start": "731070",
    "end": "736430"
  },
  {
    "text": "ridiculously bad there's lots of stuff going on in that function that has nothing to do with curry it's just noise",
    "start": "736430",
    "end": "743040"
  },
  {
    "text": "because of MIS design in arguments whereas in the new one you just say dot",
    "start": "743040",
    "end": "748410"
  },
  {
    "text": "dot dot any place you want to indicate and lots of things could happen there I'm just just brilliant I love this this",
    "start": "748410",
    "end": "754890"
  },
  {
    "text": "is my second most favorite feature it doesn't allow us to do anything that we couldn't do before but it allows for",
    "start": "754890",
    "end": "761490"
  },
  {
    "text": "some things to happen in a much better way we're gonna have modules in the language which are great historically",
    "start": "761490",
    "end": "768720"
  },
  {
    "text": "the biggest problem in JavaScript was the global object javascript doesn't have any kind of linker and so that",
    "start": "768720",
    "end": "775800"
  },
  {
    "text": "common namespace is where everything collides but that turns out to be a huge problem for reliability and for security",
    "start": "775800",
    "end": "783000"
  },
  {
    "text": "so we're getting modules now this is the new module system is much better than",
    "start": "783000",
    "end": "788850"
  },
  {
    "text": "the crappy require stuff that we have in common Jay yes this is really good it's inherently asynchronous that",
    "start": "788850",
    "end": "794590"
  },
  {
    "text": "it's great so that'll be good we've got a new let statement which works just",
    "start": "794590",
    "end": "801280"
  },
  {
    "text": "like the old var statement except that it will respect block scope so",
    "start": "801280",
    "end": "806290"
  },
  {
    "text": "JavaScript in the past never had block scope had only had function scope which isn't bad because you can write good",
    "start": "806290",
    "end": "812260"
  },
  {
    "text": "programs with function scope the problem was there are a lot of people coming to javascript from java and the syntax of",
    "start": "812260",
    "end": "819520"
  },
  {
    "text": "the languages are very very similar you know so they assume that scoping works the same way and it doesn't and so they",
    "start": "819520",
    "end": "827230"
  },
  {
    "text": "write stuff which is wrong because they're confused about how the language actually works and confusion leads to",
    "start": "827230",
    "end": "834190"
  },
  {
    "text": "bugs and so with the new let statement they will not be confused anymore and",
    "start": "834190",
    "end": "839980"
  },
  {
    "text": "I'm all for eliminating confusion from the world we've got D structuring which",
    "start": "839980",
    "end": "846610"
  },
  {
    "text": "is another feature which is not going to allow us to do anything that we couldn't do before but it provides a convenience",
    "start": "846610",
    "end": "853620"
  },
  {
    "text": "reduces the number of keystrokes for doing certain kinds of things which is completely unimportant what's more",
    "start": "853620",
    "end": "859840"
  },
  {
    "text": "important is that it can improve readability for certain patterns of certain idioms and and that's a",
    "start": "859840",
    "end": "865000"
  },
  {
    "text": "worthwhile thing I'll show you an example of this a little bit later then we've got week maps week maps I",
    "start": "865000",
    "end": "872320"
  },
  {
    "text": "think are the worst named feature in the history of programming languages it's an even worse worst name than proper Kayle",
    "start": "872320",
    "end": "880660"
  },
  {
    "text": "calls it's the way objects should always worked in JavaScript an object is a",
    "start": "880660",
    "end": "887860"
  },
  {
    "text": "container of key value pairs and JavaScript requires that all of the keys",
    "start": "887860",
    "end": "893140"
  },
  {
    "text": "be strings it turns out that was a mistake it should have been a key could",
    "start": "893140",
    "end": "898840"
  },
  {
    "text": "be any value that would be much more powerful we tried to fix it but we",
    "start": "898840",
    "end": "904930"
  },
  {
    "text": "couldn't because there are crappy programs out on the web which assume the bad behavior and so objects are always",
    "start": "904930",
    "end": "911110"
  },
  {
    "text": "going to be broken so instead we're adding a second kind of object which",
    "start": "911110",
    "end": "916180"
  },
  {
    "text": "unfortunately is called weak map so and that's a problem because nobody wants to",
    "start": "916180",
    "end": "921310"
  },
  {
    "text": "put anything weak in their program right",
    "start": "921310",
    "end": "925020"
  },
  {
    "text": "but it's really good and and this is a powerful fundamental thing it allows us",
    "start": "926669",
    "end": "931749"
  },
  {
    "text": "to write programs that we cannot write efficiently in the current language so that's a good thing there are lots of",
    "start": "931749",
    "end": "938739"
  },
  {
    "text": "other features being added to the language you have a huge number of features being added to the language not",
    "start": "938739",
    "end": "944289"
  },
  {
    "text": "all of them are going to be good some of them haven't proven themselves yet things like generators I'm thinking",
    "start": "944289",
    "end": "950799"
  },
  {
    "text": "probably are not worth the trouble you know there are lots of stuff coming in",
    "start": "950799",
    "end": "955839"
  },
  {
    "text": "but there's one thing which I am certain is a bad part a very terribly bad part and that is the new class syntax this",
    "start": "955839",
    "end": "963579"
  },
  {
    "text": "was the most requested new feature in the language and the requests mostly came from frustrated Java developers who",
    "start": "963579",
    "end": "971679"
  },
  {
    "text": "are now having to write in JavaScript because that's where the jobs are and they're hating it and they don't want to",
    "start": "971679",
    "end": "976809"
  },
  {
    "text": "have to learn how to do this stuff correctly so can you please give us classes and they're not really getting",
    "start": "976809",
    "end": "982539"
  },
  {
    "text": "classes they're getting syntactic sugar on top of the prototypal system so it",
    "start": "982539",
    "end": "989350"
  },
  {
    "text": "looks like classes but it works kind of differently and so there's confusion and you know where that goes but worse than",
    "start": "989350",
    "end": "996039"
  },
  {
    "text": "that it turns out the best way to use this language is to think about functions functional programming is so",
    "start": "996039",
    "end": "1003449"
  },
  {
    "text": "powerful and so wonderful it's so expressive and if you're stuck in this class thing you will never figure it out",
    "start": "1003449",
    "end": "1010069"
  },
  {
    "text": "you know you're always always going to be stuck in this class thing which turns out is really hard it's unnecessarily",
    "start": "1010069",
    "end": "1016529"
  },
  {
    "text": "hard and difficult and error-prone and the people who are going to be using class will go to their graves never",
    "start": "1016529",
    "end": "1024089"
  },
  {
    "text": "knowing how miserable they were",
    "start": "1024089",
    "end": "1027709"
  },
  {
    "text": "here's a new feature that kind of straddles the fence it's got some good news and some bad news it's a new way of",
    "start": "1031209",
    "end": "1037370"
  },
  {
    "text": "writing functions with the fat arrow operator unfortunately it looks a lot like an equality operator so I expect",
    "start": "1037370",
    "end": "1043760"
  },
  {
    "text": "we'll see some confusion there you know get a little dyslexic it's gonna go bad in unexpected ways and and the whole",
    "start": "1043760",
    "end": "1052880"
  },
  {
    "text": "point is to eliminate the function word there were people who complained function is too hard to type go there's",
    "start": "1052880",
    "end": "1060980"
  },
  {
    "text": "this new thing now called keyboard macros you know just to know it's too much to read okay so um so we got this",
    "start": "1060980",
    "end": "1069770"
  },
  {
    "text": "thing so here we've gotta exists here we've got an example we're gonna pass it",
    "start": "1069770",
    "end": "1075680"
  },
  {
    "text": "a name and it's going to return an object in which the ID property has that",
    "start": "1075680",
    "end": "1081800"
  },
  {
    "text": "name that's pretty nice except this code fails in es6 this code is instead going",
    "start": "1081800",
    "end": "1087590"
  },
  {
    "text": "to return undefined it and it's not going to return the new object so they",
    "start": "1087590",
    "end": "1093860"
  },
  {
    "text": "could have gotten it right they chose not to get it right and so you know you're gonna get screwed with this",
    "start": "1093860",
    "end": "1099320"
  },
  {
    "text": "someday so watch out so I've been looking at you know I figured out how to",
    "start": "1099320",
    "end": "1106820"
  },
  {
    "text": "make languages better by making them smaller and I'm still looking at at the whole language trying to figure out how",
    "start": "1106820",
    "end": "1113270"
  },
  {
    "text": "can I remove the imperfections you know make it small or make it good make it more perfect because I want a perfect",
    "start": "1113270",
    "end": "1120050"
  },
  {
    "text": "language and so I've been reconsidering what I recommended as the good parts so",
    "start": "1120050",
    "end": "1126740"
  },
  {
    "text": "in the book I recommended not using new and I still subscribe to that new I think was a problem I recommended using",
    "start": "1126740",
    "end": "1132890"
  },
  {
    "text": "object.create instead which is the the fundamental prototype ol operator which",
    "start": "1132890",
    "end": "1140240"
  },
  {
    "text": "makes a new object that inherits from an old object and I managed to get it added",
    "start": "1140240",
    "end": "1145640"
  },
  {
    "text": "to es5 just so that I could use it okay so I was really happy about that but",
    "start": "1145640",
    "end": "1151970"
  },
  {
    "text": "thank you so I was really surprised when I noticed that I've stopped using object",
    "start": "1151970",
    "end": "1157970"
  },
  {
    "text": "I create and the reason was that I stopped using this if you're not using this then",
    "start": "1157970",
    "end": "1164960"
  },
  {
    "text": "there's not much value in using object.create turns out there are a lot of reasons to not use this one is it makes the",
    "start": "1164960",
    "end": "1172040"
  },
  {
    "text": "language really hard to talk about you know which this are you talking about you know this stinks with what what",
    "start": "1172040",
    "end": "1179060"
  },
  {
    "text": "state it's it's like programming it's pair programming with Abbot and Costello it's just really cool and this has all",
    "start": "1179060",
    "end": "1188390"
  },
  {
    "text": "sorts of really weird properties everything is statically bound in JavaScript except for this which is",
    "start": "1188390",
    "end": "1193820"
  },
  {
    "text": "dynamically bound and so there are security errors and other kinds of errors which come from the weird behavior of this a few years ago there",
    "start": "1193820",
    "end": "1201380"
  },
  {
    "text": "were a number of researchers who were trying to figure out how to turn JavaScript into a safe language there were number of projects like FPGAs at",
    "start": "1201380",
    "end": "1208610"
  },
  {
    "text": "Facebook there was the web sandbox at Microsoft there was the caja project at Google my own ad safe project and others",
    "start": "1208610",
    "end": "1216830"
  },
  {
    "text": "and we're all trying to figure out how to make a safe subset so we could have third-party code run with our code",
    "start": "1216830",
    "end": "1222500"
  },
  {
    "text": "without compromising us and one of the really hard problems and doing that is",
    "start": "1222500",
    "end": "1227930"
  },
  {
    "text": "dealing with this because if you have a method this gets bound to the object of",
    "start": "1227930",
    "end": "1234020"
  },
  {
    "text": "interest and everything's good but if you call that same method as a function this is now bound to the global object",
    "start": "1234020",
    "end": "1240170"
  },
  {
    "text": "which compromises all of your security and how do you deal with that and what the other projects did was they had",
    "start": "1240170",
    "end": "1246290"
  },
  {
    "text": "compilers which would rewrite the JavaScript into a much bigger program",
    "start": "1246290",
    "end": "1251480"
  },
  {
    "text": "that had runtime checking and indirection to prevent that from happening and one of the consequences of",
    "start": "1251480",
    "end": "1258440"
  },
  {
    "text": "that was the transformed program was much slower and so they had trouble getting adoption my approach instead was",
    "start": "1258440",
    "end": "1266120"
  },
  {
    "text": "I can't figure out how to make this safe so I'm gonna make it illegal so if if there's a this in the third-party code",
    "start": "1266120",
    "end": "1272690"
  },
  {
    "text": "it doesn't get in the system so that that turned out to be really easy I could do a static validation and",
    "start": "1272690",
    "end": "1278630"
  },
  {
    "text": "determine if we don't allow the code or not and my assumption was or the problem",
    "start": "1278630",
    "end": "1284990"
  },
  {
    "text": "with that is that the percentage of existing code on the web that would pass ad safe was a zero you know there's no",
    "start": "1284990",
    "end": "1291440"
  },
  {
    "text": "existing code we'll pass because everybody is using this but my hypothesis was if you remove",
    "start": "1291440",
    "end": "1297410"
  },
  {
    "text": "this from JavaScript what you have left is still a very nice functional programming language and that's all you",
    "start": "1297410",
    "end": "1304460"
  },
  {
    "text": "need to do programming so to determine that that was true I started writing in that dialect and I was very surprised to",
    "start": "1304460",
    "end": "1312320"
  },
  {
    "text": "discover that it was not a hardship it made things easier I was enjoying programming much more things were just",
    "start": "1312320",
    "end": "1319730"
  },
  {
    "text": "working and going together really nicely so so I stopped using this entirely I",
    "start": "1319730",
    "end": "1326890"
  },
  {
    "text": "stopped using null one of the problems with JavaScript is it has to bottom",
    "start": "1326890",
    "end": "1331940"
  },
  {
    "text": "values null and undefined and they are not the same they're kind of the same and some people treat them as though",
    "start": "1331940",
    "end": "1338390"
  },
  {
    "text": "they're interchangeable but they're not they have weird characteristics which causes confusion and you know where that",
    "start": "1338390",
    "end": "1344600"
  },
  {
    "text": "goes so I decided well I will only want to use one of them and I want to stop",
    "start": "1344600",
    "end": "1349850"
  },
  {
    "text": "using the other one so which one do you choose and I decided to go with undefined for two reasons one it's the",
    "start": "1349850",
    "end": "1358280"
  },
  {
    "text": "value that the language itself uses so if you have a missing parameter or an",
    "start": "1358280",
    "end": "1365120"
  },
  {
    "text": "undefined property and an object that's the value of the system uses so that makes sense the other is that there's a",
    "start": "1365120",
    "end": "1371690"
  },
  {
    "text": "terrible error and type of related to null that typeof null identifies it as",
    "start": "1371690",
    "end": "1377810"
  },
  {
    "text": "an object which is wrong terribly wrong and that problem is never going to get",
    "start": "1377810",
    "end": "1383120"
  },
  {
    "text": "fixed so if you never use null then that error never will affect you and that's a",
    "start": "1383120",
    "end": "1389570"
  },
  {
    "text": "good thing so I recommend we should stop using null to I also stopped relying on the false eval use Java scripts faulty",
    "start": "1389570",
    "end": "1397040"
  },
  {
    "text": "values are the empty string the number zero nan null and undefined and the",
    "start": "1397040",
    "end": "1403850"
  },
  {
    "text": "reason it does that is to look like C that C is an under typed language and it",
    "start": "1403850",
    "end": "1410080"
  },
  {
    "text": "will it can do simple zero checks which can also look for things like null",
    "start": "1410080",
    "end": "1416870"
  },
  {
    "text": "terminators on strings and null pointers and stuff like that and JavaScript wanted to provide that same kind of",
    "start": "1416870",
    "end": "1423320"
  },
  {
    "text": "convenience but the behavior of the no objects is",
    "start": "1423320",
    "end": "1428470"
  },
  {
    "text": "weird and leads to bugs you know sometimes you have a zero passing it to something we expected undefined and it",
    "start": "1428470",
    "end": "1433929"
  },
  {
    "text": "caused programs to get lost and so I recommend not depending on that anymore so now if I want to determine if",
    "start": "1433929",
    "end": "1440740"
  },
  {
    "text": "something is undefined I say triple equal undefined I don't depend on the fall see check I don't",
    "start": "1440740",
    "end": "1448389"
  },
  {
    "text": "recommend using for loops a while ago I was trying to teach beginners how to do",
    "start": "1448389",
    "end": "1454389"
  },
  {
    "text": "programming and they really struggled with the for statement because it's got these three clauses in it that are",
    "start": "1454389",
    "end": "1459970"
  },
  {
    "text": "separated by commas or semicolons and there there's no identification as to which is which and they were constantly",
    "start": "1459970",
    "end": "1467110"
  },
  {
    "text": "getting confused what initializes what's the because it didn't make any sense to them why it",
    "start": "1467110",
    "end": "1472990"
  },
  {
    "text": "looked like that and you probably enjoyed that too when you were first",
    "start": "1472990",
    "end": "1479350"
  },
  {
    "text": "learning the for statement but in the years you've gotten used to it but it really is weird and and their errors",
    "start": "1479350",
    "end": "1486820"
  },
  {
    "text": "associated with for and and so I've stopped using it and es5 we got these wonderful new methods attached to arrays",
    "start": "1486820",
    "end": "1493690"
  },
  {
    "text": "like for each and map I use all of those now exclusively I don't use for",
    "start": "1493690",
    "end": "1500169"
  },
  {
    "text": "statements anymore I don't use for in something we got in es5 was object keys",
    "start": "1500169",
    "end": "1506470"
  },
  {
    "text": "which returns a string or an array of strings and so with that you don't need",
    "start": "1506470",
    "end": "1512470"
  },
  {
    "text": "for in you don't have the problem of that foreign has of iterating through",
    "start": "1512470",
    "end": "1518169"
  },
  {
    "text": "the inherited methods you know things you usually don't want to be seeing so it's a much more reliable way to do",
    "start": "1518169",
    "end": "1524019"
  },
  {
    "text": "programming ef6 will have proper tail calls as I said before and at that point",
    "start": "1524019",
    "end": "1529899"
  },
  {
    "text": "I will stop using a while so here is our",
    "start": "1529899",
    "end": "1535570"
  },
  {
    "text": "two versions of the repeat function the repeat function takes a function and calls it over and over again until it",
    "start": "1535570",
    "end": "1541000"
  },
  {
    "text": "returns undefined the first one is written with a loop the second one is written with tail",
    "start": "1541000",
    "end": "1547059"
  },
  {
    "text": "recursion in es6 these will both run at the same speed so there's no longer",
    "start": "1547059",
    "end": "1554710"
  },
  {
    "text": "penalty for using recursion for loops of the substitution so when he",
    "start": "1554710",
    "end": "1561789"
  },
  {
    "text": "has six finally comes out with tail recursion that's where I'm going I'm not gonna be using loops anymore so I think",
    "start": "1561789",
    "end": "1570309"
  },
  {
    "text": "a lot about the next language what's the next plan which gonna be there's got to be a next language because if it turns",
    "start": "1570309",
    "end": "1576460"
  },
  {
    "text": "out that javascript is the last language that would be really sad wouldn't it I mean we got to do better for our kids",
    "start": "1576460",
    "end": "1583000"
  },
  {
    "text": "you know we got to leave him something better and you know how will we recognize the next language when it",
    "start": "1583000",
    "end": "1589720"
  },
  {
    "text": "occurs it serve like waiting for the Messiah how will we know you know what are the signs and I'd hear a lot of",
    "start": "1589720",
    "end": "1595960"
  },
  {
    "text": "prophets running around saying it's here it's dark you know it's not dark it's",
    "start": "1595960",
    "end": "1601000"
  },
  {
    "text": "it's Python it was here all along no it's not pipe eyelids it it's something",
    "start": "1601000",
    "end": "1607570"
  },
  {
    "text": "else but how will we know and the only thing I'm confident of is that when it finally arrives we will reject it out of",
    "start": "1607570",
    "end": "1613900"
  },
  {
    "text": "hand completely it's because programmers",
    "start": "1613900",
    "end": "1619330"
  },
  {
    "text": "are as emotional and irrational as normal people now we think that's not",
    "start": "1619330",
    "end": "1624580"
  },
  {
    "text": "true we think because we're the ambassador's to the computer we are totally logical and rational and we are",
    "start": "1624580",
    "end": "1630940"
  },
  {
    "text": "not we're we're just like everybody else we're just not aware of how much we are like everybody else so here's the",
    "start": "1630940",
    "end": "1638500"
  },
  {
    "text": "evidence it took a generation to agree that high level languages were a good idea back",
    "start": "1638500",
    "end": "1644409"
  },
  {
    "text": "when people were struggling with machine language Fortran was trying to lift us out of the muck and the people who were",
    "start": "1644409",
    "end": "1650740"
  },
  {
    "text": "down of the muck said leave us alone we like it in the muck and you know it took",
    "start": "1650740",
    "end": "1656860"
  },
  {
    "text": "a long time it took a generation to agree that go-to was a bad idea Dijkstra published his letter in the C",
    "start": "1656860",
    "end": "1664000"
  },
  {
    "text": "ACM in 68 and we argued violently passionately for two decades about",
    "start": "1664000",
    "end": "1671890"
  },
  {
    "text": "whether or not we should do that whether we should get rid of the go-to it took a generation to agree that objects were a",
    "start": "1671890",
    "end": "1678039"
  },
  {
    "text": "good idea objects we're a good idea we're best expressed in small talk ad",
    "start": "1678039",
    "end": "1683620"
  },
  {
    "text": "which is maybe the best designed programming language in history",
    "start": "1683620",
    "end": "1689610"
  },
  {
    "text": "at one point the industry had to decide we want to go with small talk or do we",
    "start": "1689700",
    "end": "1696040"
  },
  {
    "text": "want to go with C++ and the decision was made by people who did not understand",
    "start": "1696040",
    "end": "1702160"
  },
  {
    "text": "object-oriented programming and we are still stuck with that legacy almost all",
    "start": "1702160",
    "end": "1708040"
  },
  {
    "text": "of our languages since C++ have followed from from that genetics and have always",
    "start": "1708040",
    "end": "1714460"
  },
  {
    "text": "gotten it wrong one of a few exceptions is Ruby which still went back to the",
    "start": "1714460",
    "end": "1720070"
  },
  {
    "text": "original small talk and and gets at least that part of it right and it took",
    "start": "1720070",
    "end": "1727000"
  },
  {
    "text": "two generations to agree that lambdas were a good idea lambdas were perfected in the scheme language was an important",
    "start": "1727000",
    "end": "1733510"
  },
  {
    "text": "discovery an important breakthrough and like all the important discoveries the industry took absolutely no notice of it",
    "start": "1733510",
    "end": "1739360"
  },
  {
    "text": "and this one took not one generation but two generations before it finally got to",
    "start": "1739360",
    "end": "1745060"
  },
  {
    "text": "the mainstream anybody know which language was the first to bring this idea to the mainstream anyone JavaScript",
    "start": "1745060",
    "end": "1752290"
  },
  {
    "text": "this never got to the mainstream not within miles of it",
    "start": "1752290",
    "end": "1757560"
  },
  {
    "text": "so the reason these things take so long is because we don't change minds I mean",
    "start": "1758200",
    "end": "1765110"
  },
  {
    "text": "once stuff gets in there wrong it's really rare that that ever gets fixed",
    "start": "1765110",
    "end": "1771100"
  },
  {
    "text": "and so it ends up we wait for a whole generation to retire or die before we",
    "start": "1771100",
    "end": "1779450"
  },
  {
    "text": "can get consensus on the good idea we imagine our mythology tells us that",
    "start": "1779450",
    "end": "1784970"
  },
  {
    "text": "someone discovers something and we all move on it and that's not how it happens the thing is discovered and 20 years",
    "start": "1784970",
    "end": "1791240"
  },
  {
    "text": "later maybe we'll move on to it so I remember when the go-to thing was",
    "start": "1791240",
    "end": "1797360"
  },
  {
    "text": "happening you know there was this loud debate argument going on all the time I need to go to a central tool it's how I",
    "start": "1797360",
    "end": "1803900"
  },
  {
    "text": "think it's how I express myself I need it it's so much more efficient I got all these reasons for why I got to have the",
    "start": "1803900",
    "end": "1809780"
  },
  {
    "text": "go-to and I understand what you're saying except I don't understand what you're saying and I gotta have my go-to",
    "start": "1809780",
    "end": "1814910"
  },
  {
    "text": "and that went on literally for 20 years and then one day it was kind of quiet",
    "start": "1814910",
    "end": "1820850"
  },
  {
    "text": "and we looked around said are they gone can we get rid of go to now yeah we got",
    "start": "1820850",
    "end": "1827750"
  },
  {
    "text": "rid of it and we've never missed it right and it's hard in retrospect to understand what were people getting so",
    "start": "1827750",
    "end": "1833270"
  },
  {
    "text": "upset about because you know we're doing fine without go to all of the predictions about you know the end of",
    "start": "1833270",
    "end": "1839210"
  },
  {
    "text": "the world and all of that happening when the go-to is go away never happened so I'm thinking about the next language and",
    "start": "1839210",
    "end": "1847940"
  },
  {
    "text": "you can define I think you should divide languages into two categories systems",
    "start": "1847940",
    "end": "1853820"
  },
  {
    "text": "languages and application languages the system languages want to be very low level it's what you would write kernels",
    "start": "1853820",
    "end": "1860420"
  },
  {
    "text": "and device drivers and memory managers that kind of stuff you know low level",
    "start": "1860420",
    "end": "1866240"
  },
  {
    "text": "stuff and everything else should be written in application languages we want to get above the metal get a two-place",
    "start": "1866240",
    "end": "1872420"
  },
  {
    "text": "to a greater abstraction where we get more leverage and more safety and we",
    "start": "1872420",
    "end": "1878660"
  },
  {
    "text": "need new languages in both categories the dominant systems language today is",
    "start": "1878660",
    "end": "1883790"
  },
  {
    "text": "still C which comes from the early 70s you know we have lost the ability to innovate in systems languages",
    "start": "1883790",
    "end": "1891159"
  },
  {
    "text": "we're doing more innovation in application languages but not enough and",
    "start": "1891159",
    "end": "1896630"
  },
  {
    "text": "in some of our languages I think get this division law for example I think",
    "start": "1896630",
    "end": "1901639"
  },
  {
    "text": "the biggest design error in Java was it couldn't decide if it want to be a systems language or an application",
    "start": "1901639",
    "end": "1906710"
  },
  {
    "text": "language and because of its confusion you end up with things like the",
    "start": "1906710",
    "end": "1911779"
  },
  {
    "text": "requirement to use threads at the application level which is irresponsible",
    "start": "1911779",
    "end": "1917049"
  },
  {
    "text": "so so in application languages they're almost all object oriented today which",
    "start": "1917049",
    "end": "1923809"
  },
  {
    "text": "is good because objects are good and they're basically two schools there's a classical school and the prototypal",
    "start": "1923809",
    "end": "1929600"
  },
  {
    "text": "school and most of our languages are classical a few are prototypal",
    "start": "1929600",
    "end": "1934730"
  },
  {
    "text": "javascript being with the principal one of those and it turns out the prototypal",
    "start": "1934730",
    "end": "1941299"
  },
  {
    "text": "school has a lot of advantages compared to the classical school in classical programming when you're designing a new",
    "start": "1941299",
    "end": "1947570"
  },
  {
    "text": "system you have to do a classification you have to look at all of the objects you're going to have in your system and",
    "start": "1947570",
    "end": "1953120"
  },
  {
    "text": "see how they're related and then you have to build a taxonomy in which you figure out how all the classes are",
    "start": "1953120",
    "end": "1959539"
  },
  {
    "text": "related what's going to inherit from what what's going to implement what and that's usually done at the time in the",
    "start": "1959539",
    "end": "1967309"
  },
  {
    "text": "project when you have the least understanding about how the objects are going to work which means-- means",
    "start": "1967309",
    "end": "1972950"
  },
  {
    "text": "invariably you get it wrong you just don't have enough information enough experience to get it right so you make",
    "start": "1972950",
    "end": "1978769"
  },
  {
    "text": "up taxonomy which is wrong and that gets built into the hierarchy and that wrongness finds itself leaking into the",
    "start": "1978769",
    "end": "1986600"
  },
  {
    "text": "new layers as you put them on top and you also find that you're wishing you had multiple inheritance because things",
    "start": "1986600",
    "end": "1993019"
  },
  {
    "text": "are not composing correctly because you've got these mistakes in the taxonomy and so you're",
    "start": "1993019",
    "end": "2000669"
  },
  {
    "text": "living with this system which is broken and that adds a lot of friction slows you down and eventually gets so bad you",
    "start": "2000669",
    "end": "2006730"
  },
  {
    "text": "decide we have to refactor now that means you go through the whole system and rip the whole thing apart and try to",
    "start": "2006730",
    "end": "2012519"
  },
  {
    "text": "put it together right but that's really dangerous and there's a really good chance it's not going to come back",
    "start": "2012519",
    "end": "2017590"
  },
  {
    "text": "together and it's scary and that's an inevitable part of classical programming it doesn't happen when you're working in",
    "start": "2017590",
    "end": "2024950"
  },
  {
    "text": "a prototypal system and I try to explain this to Java guys and we tell them you",
    "start": "2024950",
    "end": "2030170"
  },
  {
    "text": "know we don't have to do this refactoring and they go wow that's amazing except you still have to do the",
    "start": "2030170",
    "end": "2035930"
  },
  {
    "text": "taxonomy right you're still gonna be no we don't do the taxonomy you don't do that go wow you still do the taxonomy",
    "start": "2035930",
    "end": "2043210"
  },
  {
    "text": "they can't imagine that there's any way you can do it without doing all the",
    "start": "2043210",
    "end": "2048320"
  },
  {
    "text": "stuff that they've ever done and it turns out you don't when you eliminate those the classical dependencies a whole",
    "start": "2048320",
    "end": "2055190"
  },
  {
    "text": "lot of work vanishes you just make an object and if it turned out well you make another one that's just like it and",
    "start": "2055190",
    "end": "2061610"
  },
  {
    "text": "you customize it and you're done it's so much easier so I used to think that the",
    "start": "2061610",
    "end": "2068330"
  },
  {
    "text": "important breakthrough that we got from JavaScript was prototypal inheritance the major benefit it gives you is memory",
    "start": "2068330",
    "end": "2075169"
  },
  {
    "text": "conservation the advantage that we have using object create over object copy is",
    "start": "2075169",
    "end": "2081679"
  },
  {
    "text": "that we have less memory allocated to each object that may have made sense in",
    "start": "2081679",
    "end": "2088908"
  },
  {
    "text": "1995 but it doesn't today Moore's laws continued to crank on memory capacity",
    "start": "2088909",
    "end": "2094280"
  },
  {
    "text": "you now have gigabytes of RAM in your pocket it's so worrying about how many",
    "start": "2094280",
    "end": "2100310"
  },
  {
    "text": "bytes get allocated to an object is just not worth thinking about anymore it was a complete waste of time",
    "start": "2100310",
    "end": "2105830"
  },
  {
    "text": "unless you're making millions of instances of a class you don't want to be doing that and I think if you're",
    "start": "2105830",
    "end": "2111650"
  },
  {
    "text": "making millions of instances you don't want to be working in JavaScript I think you want to be working in a better",
    "start": "2111650",
    "end": "2116960"
  },
  {
    "text": "language but it comes with a cost so one",
    "start": "2116960",
    "end": "2122210"
  },
  {
    "text": "of the costs is confusion we now have own properties and inherited properties which sometimes act the same and",
    "start": "2122210",
    "end": "2129110"
  },
  {
    "text": "sometimes don't and that difference can be a confusion confusion can lead to",
    "start": "2129110",
    "end": "2134270"
  },
  {
    "text": "bugs that's a bad thing one thing it can provide is retroactive heredity where",
    "start": "2134270",
    "end": "2140750"
  },
  {
    "text": "you can change what an object inherits after it's been constructed I have not",
    "start": "2140750",
    "end": "2146300"
  },
  {
    "text": "found a good use for that and there are lots of obvious terribly bad uses for",
    "start": "2146300",
    "end": "2152240"
  },
  {
    "text": "that you know it is also performance inhibiting that modern JavaScript engines go very",
    "start": "2152240",
    "end": "2158869"
  },
  {
    "text": "fast by making assumptions about the shape of objects but when it comes to",
    "start": "2158869",
    "end": "2164240"
  },
  {
    "text": "the prototype chain they have to be pessimistic because the prototype can change at any time without warning and",
    "start": "2164240",
    "end": "2170810"
  },
  {
    "text": "so that is slowing down execution so I used to think that the really important",
    "start": "2170810",
    "end": "2177710"
  },
  {
    "text": "idea we got from JavaScript was prototypal inheritance I don't think so anymore I now think Java scripts gift to",
    "start": "2177710",
    "end": "2184220"
  },
  {
    "text": "humanity was class free object writer programming I think that is a brilliant",
    "start": "2184220",
    "end": "2190820"
  },
  {
    "text": "idea which is best expressed in JavaScript and has and was not previously expressed in any other",
    "start": "2190820",
    "end": "2196339"
  },
  {
    "text": "language so I've got a couple minutes let me see if I can demonstrate this",
    "start": "2196339",
    "end": "2202220"
  },
  {
    "text": "idea so you all remember block scope we've got the let statement now which lets you have blocks here we've got two",
    "start": "2202220",
    "end": "2208849"
  },
  {
    "text": "blocks the inner block can see the variables of the outer block but the outer block cannot see into the inner",
    "start": "2208849",
    "end": "2214280"
  },
  {
    "text": "block and in JavaScript we can do the same thing with nested functions so the",
    "start": "2214280",
    "end": "2219470"
  },
  {
    "text": "outer function cannot see the inner function stuff but the inner function can see the outer function stuff and we",
    "start": "2219470",
    "end": "2224930"
  },
  {
    "text": "can express this as a set diagram here we've got the set of the variables that",
    "start": "2224930",
    "end": "2230180"
  },
  {
    "text": "the outer function can see that's the set of variables that the inner function can see you can see that set encloses",
    "start": "2230180",
    "end": "2236839"
  },
  {
    "text": "the other set and that's why this idea is called closure which is a really",
    "start": "2236839",
    "end": "2241880"
  },
  {
    "text": "unfortunate name I wish we call it something else because most people think closure means retribution or vengeance",
    "start": "2241880",
    "end": "2247310"
  },
  {
    "text": "you know I've been victimized button gave me some closure it's gonna feel good you know yeah it's not so anyway",
    "start": "2247310",
    "end": "2255290"
  },
  {
    "text": "this took a long time to get to the main stream because the language guys couldn't figure out how to deal with",
    "start": "2255290",
    "end": "2261440"
  },
  {
    "text": "this case what if the inner function survives the invocation of the outer function you know when we call the outer",
    "start": "2261440",
    "end": "2267440"
  },
  {
    "text": "function we allocate an A on the stack and we return the inner function we pop",
    "start": "2267440",
    "end": "2273589"
  },
  {
    "text": "the a off the stack but then we call the yellow function it needs access to the a and it's not there anymore it turned out",
    "start": "2273589",
    "end": "2282140"
  },
  {
    "text": "it was easy stop using stocks just put it on a heap if you've got a good garbage collector it's better anyway so that's what we do",
    "start": "2282140",
    "end": "2288859"
  },
  {
    "text": "now and and it works so this is how I'm going to be making objects from now on I've got a constructor function I'm",
    "start": "2288859",
    "end": "2296119"
  },
  {
    "text": "going to pass in a specification object this makes a lot more sense than passing in a bunch of parameters because your",
    "start": "2296119",
    "end": "2304940"
  },
  {
    "text": "users don't have to remember what order they go in and you can add new properties in the future and remove old",
    "start": "2304940",
    "end": "2312499"
  },
  {
    "text": "ones that you don't need anymore it's much more flexible I'm using the new destructuring syntax to initialize my",
    "start": "2312499",
    "end": "2320799"
  },
  {
    "text": "variables so I'm going to be creating member variables which will get initial",
    "start": "2320799",
    "end": "2326690"
  },
  {
    "text": "values from the specification object so this is this means the same thing as let",
    "start": "2326690",
    "end": "2333460"
  },
  {
    "text": "member equal spec dot member and I can put as many names as I want inside the",
    "start": "2333460",
    "end": "2338869"
  },
  {
    "text": "curly braces separated by commas and it will make all of those variables and initialize them from values from the",
    "start": "2338869",
    "end": "2344119"
  },
  {
    "text": "object I can use the same notation for doing inheritance so I can call another",
    "start": "2344119",
    "end": "2350390"
  },
  {
    "text": "constructor and it's going to return an object full of methods and I can then",
    "start": "2350390",
    "end": "2355779"
  },
  {
    "text": "copy those methods into individual variables and in fact I can call as many",
    "start": "2355779",
    "end": "2362720"
  },
  {
    "text": "of these constructors as I want so I can get multiple inheritance I can get aspects I can it's a very flexible",
    "start": "2362720",
    "end": "2367759"
  },
  {
    "text": "pattern I'm then gonna create my member functions my methods and these will",
    "start": "2367759",
    "end": "2374539"
  },
  {
    "text": "close over the member variables over the other methods over the methods we're",
    "start": "2374539",
    "end": "2380119"
  },
  {
    "text": "making an accession object it does not use this no this is anywhere then the",
    "start": "2380119",
    "end": "2386599"
  },
  {
    "text": "most interesting thing I'm going to produce an object going out which contains all of the public methods for",
    "start": "2386599",
    "end": "2393529"
  },
  {
    "text": "this object and we have some new notation in the language where instead",
    "start": "2393529",
    "end": "2400970"
  },
  {
    "text": "of saying method : method and other : other I can simply say method , other so",
    "start": "2400970",
    "end": "2407410"
  },
  {
    "text": "if the thing you're you're outputting is a variable with the same name as the property you don't have to save the",
    "start": "2407410",
    "end": "2413960"
  },
  {
    "text": "thing twice and then I'm freezing that whole thing which makes the object immutable which makes it",
    "start": "2413960",
    "end": "2420520"
  },
  {
    "text": "impervious to tampering I worry a lot about security in particular because I'm working at a company that moves a lot of",
    "start": "2420520",
    "end": "2427630"
  },
  {
    "text": "money through the internet and so I'm worrying about security all the time and making objects which are immutable",
    "start": "2427630",
    "end": "2434940"
  },
  {
    "text": "really really helps also future JavaScript engines are going to be able",
    "start": "2434940",
    "end": "2440080"
  },
  {
    "text": "to optimize that because there are special properties of immutable objects because you know they're never going to",
    "start": "2440080",
    "end": "2445810"
  },
  {
    "text": "change there are lots of interesting optimizations that are possible",
    "start": "2445810",
    "end": "2451319"
  },
  {
    "text": "originally we had this idea that we have something that looks like a pascal record which contains a bunch of",
    "start": "2451619",
    "end": "2458950"
  },
  {
    "text": "properties and then we associate methods which act upon those properties so we've got functions and data and the same",
    "start": "2458950",
    "end": "2465190"
  },
  {
    "text": "thing I think that was an important transition step but it shouldn't have been the final step I think instead that",
    "start": "2465190",
    "end": "2473920"
  },
  {
    "text": "or what I'm doing now is I have an object containing only methods and it is",
    "start": "2473920",
    "end": "2479830"
  },
  {
    "text": "frozen and then I've got objects which contain only data which are hidden",
    "start": "2479830",
    "end": "2485440"
  },
  {
    "text": "behind those methods and that's a unique pattern that we only find in JavaScript",
    "start": "2485440",
    "end": "2491020"
  },
  {
    "text": "and I now believe that that is the most effective way to use the language so I",
    "start": "2491020",
    "end": "2496900"
  },
  {
    "text": "am afraid I'm out of time so we have to stop here so thank you everybody and good night",
    "start": "2496900",
    "end": "2503940"
  },
  {
    "text": "you",
    "start": "2507069",
    "end": "2509130"
  }
]