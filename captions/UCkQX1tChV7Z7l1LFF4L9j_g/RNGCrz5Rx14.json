[
  {
    "text": "how do view people out there using node like at work right now yay I found the node people at the fancy",
    "start": "3950",
    "end": "12230"
  },
  {
    "text": "server conference I'm really happy thanks all for coming how many people are using our doing primarily front-end",
    "start": "12230",
    "end": "18350"
  },
  {
    "text": "JavaScript stuff in your work lots of people - great so if you're not",
    "start": "18350",
    "end": "23540"
  },
  {
    "text": "using node on a daily basis some of the things I talked about today will still be useful as long as you're doing",
    "start": "23540",
    "end": "28880"
  },
  {
    "text": "JavaScript things and so I hope that you find this useful I'm really excited to to dive on into it so my talks called",
    "start": "28880",
    "end": "36800"
  },
  {
    "text": "building scalable and dependable JavaScript applications like she said showing how to use node and JavaScript",
    "start": "36800",
    "end": "42410"
  },
  {
    "text": "responsibly the way that I'm gonna start this is by talking about a bug that we had a PayPal on I work on the send money",
    "start": "42410",
    "end": "48440"
  },
  {
    "text": "team primarily about a year ago and I'm gonna call it the mystery of the missing stack trace you will see why in a second",
    "start": "48440",
    "end": "55520"
  },
  {
    "text": "so normally when you have a crashing node how many raise your hand if you've had your node servers crashed in",
    "start": "55520",
    "end": "61250"
  },
  {
    "text": "production before yeah a lot of people this is a common problem with node and",
    "start": "61250",
    "end": "66500"
  },
  {
    "text": "it's kind of like normal and okay but it's also not so okay so it looks like",
    "start": "66500",
    "end": "71990"
  },
  {
    "text": "this it looks kind of like this you'll have some sort of stack trace and that's",
    "start": "71990",
    "end": "77270"
  },
  {
    "text": "fine but it went at PayPal when we get a crash on our servers they'll send us an",
    "start": "77270",
    "end": "82280"
  },
  {
    "text": "email you'll say okay we we pulled this out of your air log after your crash they'll send us an email tell me what",
    "start": "82280",
    "end": "87590"
  },
  {
    "text": "server crash and how many times it's crashed works pretty well but in this",
    "start": "87590",
    "end": "92689"
  },
  {
    "text": "particular bug in particular case the emails were empty there was nothing there we had no idea why our app was",
    "start": "92689",
    "end": "99619"
  },
  {
    "text": "failing or where it was failing and so I want you to stop and think for a second you know your servers crashing you have",
    "start": "99619",
    "end": "107090"
  },
  {
    "text": "no stack trace and no information what do you do anyone throw out ideas what do you got perfect that's exactly what I",
    "start": "107090",
    "end": "115880"
  },
  {
    "text": "was thinking at the time too I was just like what can we do so you know we can look at a disco and the working code we",
    "start": "115880",
    "end": "123799"
  },
  {
    "text": "can like try to find other logs like maybe there's nothing in the air log but there may be some other log that has some secret information for us I don't",
    "start": "123799",
    "end": "131209"
  },
  {
    "text": "know system metrics might be helpful so if you see our CPU spiking or memories going crazy that could be",
    "start": "131209",
    "end": "137690"
  },
  {
    "text": "telling of a certain type of problem typical JavaScript answer you can just console that log everything and of",
    "start": "137690",
    "end": "145100"
  },
  {
    "text": "course there's like fancy techniques post-mortem debugging heap dumps this kind of stuff it's more advanced it's",
    "start": "145100",
    "end": "151820"
  },
  {
    "text": "less common but it's pretty helpful so anyway we tried some of these things in this particular case we ended up we",
    "start": "151820",
    "end": "157430"
  },
  {
    "text": "looked at the Dybbuk ode there wasn't anything obvious like we couldn't see anything that should have been wrong but",
    "start": "157430",
    "end": "163330"
  },
  {
    "text": "looking at the access logs is really telling so we noticed that shortly before the app restarted there was that",
    "start": "163330",
    "end": "170480"
  },
  {
    "text": "we were hitting this this page our request money page and there was no again like we couldn't figure out why",
    "start": "170480",
    "end": "176240"
  },
  {
    "text": "the request money page is being so evil and it couldn't reproduce it very easily but once we were able to at least narrow",
    "start": "176240",
    "end": "182000"
  },
  {
    "text": "down the where we were able to start thinking harder about the why so once we once we have that in mind okay this is",
    "start": "182000",
    "end": "187610"
  },
  {
    "text": "what's failing we started diving into the code we found some funny stuff and we tried it first like commenting",
    "start": "187610",
    "end": "193400"
  },
  {
    "text": "out things consoled out logging things you know the really tried and true JavaScript debugging techniques and none",
    "start": "193400",
    "end": "199010"
  },
  {
    "text": "of that worked finally we started putting on our thinking caps and thinking a little bit harder about the code so let me walk you through this",
    "start": "199010",
    "end": "205400"
  },
  {
    "text": "handle request function we have so when people are requesting money we have a lot of important logic and then we send",
    "start": "205400",
    "end": "212690"
  },
  {
    "text": "back a request ID saying okay your request is complete and then we have this funny thing at the bottom and this",
    "start": "212690",
    "end": "218060"
  },
  {
    "text": "is for me I'm always obsessed with patterns and code smells and things that are like not the normal way we do things",
    "start": "218060",
    "end": "223820"
  },
  {
    "text": "and this is really weird to me because usually after like a res that's end or res that render a res that Jason we're",
    "start": "223820",
    "end": "229850"
  },
  {
    "text": "done we don't do anything else but for some reason we have this bright idea that to say okay after the request is",
    "start": "229850",
    "end": "236450"
  },
  {
    "text": "totally successful we're gonna if the user if we're sending to a known sender or requesting from a known sender like",
    "start": "236450",
    "end": "243410"
  },
  {
    "text": "an existing PayPal user we're gonna opt them into this special experience we're gonna we're gonna do a little bit of",
    "start": "243410",
    "end": "248989"
  },
  {
    "text": "extra work there and this you know again this code hadn't really changed there's",
    "start": "248989",
    "end": "254420"
  },
  {
    "text": "nothing in the diff that looked particularly suspicious but we figured it just seems so wrong so we dove into",
    "start": "254420",
    "end": "260570"
  },
  {
    "text": "it a little bit more and I want to just dive into this function so we have our opt-in to experiment function takes in",
    "start": "260570",
    "end": "267680"
  },
  {
    "text": "the sender ID we then decrypt that we are encrypted I guess it's our decrypted ID sorry about that and then we we add",
    "start": "267680",
    "end": "275340"
  },
  {
    "text": "that we take that ID we pass it to the add user call and if there's an error we",
    "start": "275340",
    "end": "281789"
  },
  {
    "text": "call our special log or function to log the response from the service ok this is",
    "start": "281789",
    "end": "288300"
  },
  {
    "text": "here's the thing folks you were probably thinking I don't know looks fine right",
    "start": "288300",
    "end": "293310"
  },
  {
    "text": "well anyone know what's wrong with this code son what was that",
    "start": "293310",
    "end": "301310"
  },
  {
    "text": "no the other code is good everything else is fine yeah rez is here maybe it",
    "start": "301310",
    "end": "309449"
  },
  {
    "text": "doesn't exist ok fair enough good good intuition here what was that",
    "start": "309449",
    "end": "316639"
  },
  {
    "text": "hey ok ok this is where things are getting interesting turns out we had",
    "start": "317240",
    "end": "323400"
  },
  {
    "text": "recently changed our decrypt function to return a promise here's the thing about about DIF and github and all this when",
    "start": "323400",
    "end": "331710"
  },
  {
    "text": "things change we can't track like the other things that changed very well so we see like nothing changed in this",
    "start": "331710",
    "end": "337800"
  },
  {
    "text": "function we're fine but it turns out someone changed decrypt somewhere else and for a number of",
    "start": "337800",
    "end": "342960"
  },
  {
    "text": "reasons the way that we had mocking set up on this service our test didn't fail they just kept working because we know we're only testing the happy path oops",
    "start": "342960",
    "end": "349530"
  },
  {
    "text": "it happens but it was really annoying and this bug was like three days me and my colleagues were like trying to figure",
    "start": "349530",
    "end": "356159"
  },
  {
    "text": "this out cuz it was crashing all the time it was driving a soul so mad so the",
    "start": "356159",
    "end": "361560"
  },
  {
    "text": "decrypt function was updated to return a promise which is cool adduser of course expects a string and then problem number",
    "start": "361560",
    "end": "368190"
  },
  {
    "text": "two this log function which is this thing I wrote four years ago was like the first thing I did at PayPal I'm like",
    "start": "368190",
    "end": "374280"
  },
  {
    "text": "our luvs are ugly I want to pretty print our logs with fancy formatting so I added some fancy formatting but it only",
    "start": "374280",
    "end": "379620"
  },
  {
    "text": "expects like a little error message and like a little stack trace and maybe like a service code or something it's gonna",
    "start": "379620",
    "end": "385590"
  },
  {
    "text": "make it look really nice but then the thing is I'm logging reds which is the",
    "start": "385590",
    "end": "391289"
  },
  {
    "text": "HTTP response object and that if you're not familiar with that has this many",
    "start": "391289",
    "end": "396389"
  },
  {
    "text": "properties I tried like like I tried print all of them and I had to like not",
    "start": "396389",
    "end": "401849"
  },
  {
    "text": "include all of the images because it started making keynotes and a lot of these things they they point to each other they're like all",
    "start": "401849",
    "end": "408600"
  },
  {
    "text": "these like internal dependencies pointing at the other one so if you have like this really rudimentary log function that you wrote like in an hour",
    "start": "408600",
    "end": "414960"
  },
  {
    "text": "for fun because it didn't seem like a big deal it will just go over every single one and basically infinitely loop",
    "start": "414960",
    "end": "420960"
  },
  {
    "text": "and it turns out it ended up taking about 45 seconds before the thing completely just destroyed our server and",
    "start": "420960",
    "end": "426840"
  },
  {
    "text": "the process monitor eventually just killed that process oops we make a lot of mistakes in JavaScript but this bug",
    "start": "426840",
    "end": "434610"
  },
  {
    "text": "really taught me a lot it got me really excited about making less mistakes in JavaScript and so I kind of got a few",
    "start": "434610",
    "end": "441630"
  },
  {
    "text": "ideas and really the inspiration from this talk came from this bug so one we need a better static analysis it would",
    "start": "441630",
    "end": "447180"
  },
  {
    "text": "be cool if we had the programming like the the code the build tools the CI",
    "start": "447180",
    "end": "452700"
  },
  {
    "text": "someone else could tell me this was broken because before production that would be cool too many better debugging",
    "start": "452700",
    "end": "458580"
  },
  {
    "text": "tools throwing up like console dot log garbage in production like this is not this is not good programming third like",
    "start": "458580",
    "end": "466650"
  },
  {
    "text": "consistent way to handle errors we sort of had a pattern like I had the fancy logger and stuff but we need I'll show",
    "start": "466650",
    "end": "472320"
  },
  {
    "text": "you some specific ideas of how we can handle errors consistently so that they're they're done better and then our",
    "start": "472320",
    "end": "477960"
  },
  {
    "text": "logging and monitoring I mean you know you can tell this is a bit amateur hour everything I described here and hopefully since then we've learned to do",
    "start": "477960",
    "end": "484980"
  },
  {
    "text": "a better job and I'll show you how to do that today first we're going to talk about flow type inyou so how many of you",
    "start": "484980",
    "end": "490530"
  },
  {
    "text": "are using either typescript or flow okay I will say about a third of people here",
    "start": "490530",
    "end": "496590"
  },
  {
    "text": "I will try and convince you now that it's a good idea type checking could have caught that bug with two lines of",
    "start": "496590",
    "end": "502380"
  },
  {
    "text": "code two lines and it took me three days me and a colleague we just waiting three",
    "start": "502380",
    "end": "507660"
  },
  {
    "text": "days trying all sorts of stuff trying to figure everything out and when I realized we could have caught this so simply I rythms like I'm not gonna not",
    "start": "507660",
    "end": "515280"
  },
  {
    "text": "I'm not gonna not add types to anything that I care about not breaking because it's so simple so let me show you this",
    "start": "515280",
    "end": "522060"
  },
  {
    "text": "code we were often to experiment function we just need to tell it there's this encrypted ID which is actually the",
    "start": "522060",
    "end": "527460"
  },
  {
    "text": "decrypted ID should be a string okay not very hard colon string not so bad you",
    "start": "527460",
    "end": "533220"
  },
  {
    "text": "know people are like I hate it it's like not JavaScript syntax it's like it's a metadata some metadata it's not so bad it doesn't",
    "start": "533220",
    "end": "540899"
  },
  {
    "text": "feel bad especially when it saves me days of time and then the second thing is our decrypt function we just need to",
    "start": "540899",
    "end": "545970"
  },
  {
    "text": "tell it that it returns a promise that's all we have to do not so bad once again and if we do those things then Flo will",
    "start": "545970",
    "end": "551970"
  },
  {
    "text": "say hey cannot assign decrypt to encrypt ID because promise is not a string it's so nice that wasn't very hard and so I",
    "start": "551970",
    "end": "559199"
  },
  {
    "text": "will challenge you and encourage you to start looking at types in JavaScript if your applications if you don't want them",
    "start": "559199",
    "end": "564899"
  },
  {
    "text": "to crash especially on the node side I know there's a bit of hesitation around things like well what about I don't want",
    "start": "564899",
    "end": "572760"
  },
  {
    "text": "to use Babel or I don't want to transpile bla bla bla it's like I don't know I don't want maps to crash so I'm willing to try some tools that will make",
    "start": "572760",
    "end": "579300"
  },
  {
    "text": "my things work better as far as bat-like flow vs. typescript any flow people here",
    "start": "579300",
    "end": "586250"
  },
  {
    "text": "okay nobody's using flow oh wait one person what's your name",
    "start": "586250",
    "end": "592880"
  },
  {
    "text": "okay whatever that's fine I'm not selling you or anything it's cool I like",
    "start": "593510",
    "end": "599639"
  },
  {
    "text": "I was going to say flow and types routes are great flow has gotten a lot of flack for bad error messages they recently",
    "start": "599639",
    "end": "605670"
  },
  {
    "text": "shipped a new version with better error messages but use whatever like they're both great both of them I think are equally good maybe I have slightly",
    "start": "605670",
    "end": "611880"
  },
  {
    "text": "different pros and cons but they're both like miles better than normal JavaScript when it comes to having built-in static",
    "start": "611880",
    "end": "618120"
  },
  {
    "text": "analysis good stuff so again I'll show you a little example of how to add some some types to your JavaScript and",
    "start": "618120",
    "end": "624570"
  },
  {
    "text": "hopefully get you feeling ok with the idea again we just don't want you feeling uncomfortable with things that",
    "start": "624570",
    "end": "630029"
  },
  {
    "text": "are going to make your app better so check this out I have this eat donut and you'll notice at the bottom the",
    "start": "630029",
    "end": "636390"
  },
  {
    "text": "parameters order is switched so I'm sending the person's second or first in the donut second they should be the",
    "start": "636390",
    "end": "642810"
  },
  {
    "text": "other way around no big deal so if I want to start adding flow to this I'm gonna add a little flow comment thing and then I can say donut should be a",
    "start": "642810",
    "end": "649890"
  },
  {
    "text": "donut person should be a person of course it doesn't know what that is yet so then I have to say type donut equals",
    "start": "649890",
    "end": "655949"
  },
  {
    "text": "here's like a flow style enum so I can just say a donut means a one of these three strings maple chocolate or glaze I",
    "start": "655949",
    "end": "661860"
  },
  {
    "text": "know there are other Donuts okay I'm familiar with the ones I live in Portland we have a lot of donuts in",
    "start": "661860",
    "end": "666870"
  },
  {
    "text": "Portland it's very common to have donuts there they're very good but for the purpose of the example I only want to",
    "start": "666870",
    "end": "672000"
  },
  {
    "text": "show three kinds of donuts for a person you can just use a normal is six class and it's like it'll use that but if you",
    "start": "672000",
    "end": "678690"
  },
  {
    "text": "want it to work a little bit better you can add and say the name the name instance variable is type string it's",
    "start": "678690",
    "end": "686700"
  },
  {
    "text": "not so bad and if I do those things then flows smart enough to say a person is not a doughnut it works very well it's",
    "start": "686700",
    "end": "693000"
  },
  {
    "text": "smart Jessica likes all my jokes I love this so much she's the best track host if you ever are going to be speaking get her to be",
    "start": "693000",
    "end": "699630"
  },
  {
    "text": "your track oh so you'll be incredibly supportive it I am really grateful so let's talk about linters for a second how many people are using es Lintz in",
    "start": "699630",
    "end": "705720"
  },
  {
    "text": "your code what about like any any other linter tools people are using like that they're",
    "start": "705720",
    "end": "710880"
  },
  {
    "text": "pretty excited about standard okay standard is actually based on the east ways so that's that's perfect standard",
    "start": "710880",
    "end": "717960"
  },
  {
    "text": "it's great love standard contributed a bit on standard before so i had previous",
    "start": "717960",
    "end": "723300"
  },
  {
    "text": "to having this whole terrible bug that made me obsessed with types and javascript I was like really a big fan",
    "start": "723300",
    "end": "729150"
  },
  {
    "text": "of es lint and linting and I want to show you one of the like architecture challenges of winter so I'm going to",
    "start": "729150",
    "end": "735600"
  },
  {
    "text": "give you a super quick overview of how linting works in JavaScript and how many",
    "start": "735600",
    "end": "740910"
  },
  {
    "text": "of you have written a custom excellent rule before yes yes that guy that's so",
    "start": "740910",
    "end": "748290"
  },
  {
    "text": "cool okay this is my favorite thing is writing custom you insolent rules and if you would have caught me like three years ago I was doing is going around",
    "start": "748290",
    "end": "753900"
  },
  {
    "text": "giving talks about how to write custom es lint rules and how Hasty's work and all this stuff's really exciting but for",
    "start": "753900",
    "end": "759630"
  },
  {
    "text": "for today I will tell you about this if you have an excellent look at your code it's gonna go through each javascript",
    "start": "759630",
    "end": "764910"
  },
  {
    "text": "file that you pass it okay it passes that through a parser ACORN converts that to a syntax tree you know abstracts",
    "start": "764910",
    "end": "770850"
  },
  {
    "text": "index tree it's just like a big JavaScript object that has all sorts of metadata and information about what your",
    "start": "770850",
    "end": "776790"
  },
  {
    "text": "code is doing so it'll say these are all the statements and functions and things and here's are all the parameters it's",
    "start": "776790",
    "end": "782250"
  },
  {
    "text": "just like a giant javascript definition of of what's happening your code and",
    "start": "782250",
    "end": "788250"
  },
  {
    "text": "then it's not will pass that to all of those rules and each rule just takes in",
    "start": "788250",
    "end": "794160"
  },
  {
    "text": "one of those trees so syntax trees again that JavaScript objects and like queries it and says hmm okay how many parameters",
    "start": "794160",
    "end": "800730"
  },
  {
    "text": "are in each function is each function taken and maybe they've gone over what",
    "start": "800730",
    "end": "805810"
  },
  {
    "text": "limit and you can write a rule in insolent in five lines of code like the pret like max params that rule that says",
    "start": "805810",
    "end": "811810"
  },
  {
    "text": "you can only have like three parameters to a function or whatever you can write that rule in in literally like maybe",
    "start": "811810",
    "end": "817540"
  },
  {
    "text": "seven lines of code they're very very small very compact it's an amazing architecture but it has this huge huge",
    "start": "817540",
    "end": "823029"
  },
  {
    "text": "flaw which is that linters only think about one file at a time now you're",
    "start": "823029",
    "end": "828250"
  },
  {
    "text": "probably thinking hmmm that sounds fine I don't know I don't think about two files at the same time but you do see",
    "start": "828250",
    "end": "833740"
  },
  {
    "text": "you think about them because when you're pulling in another file you care what that file is bringing in to to the other",
    "start": "833740",
    "end": "840130"
  },
  {
    "text": "file so type systems are a lot smarter they think about your whole JavaScript",
    "start": "840130",
    "end": "846070"
  },
  {
    "text": "ecosystem at the same time let's look at the flow this is like really bad diagram of flows architecture and I never asked",
    "start": "846070",
    "end": "852339"
  },
  {
    "text": "anyone that works on flow if it's actually how it works it's my understanding but I think for the point it should be acceptable",
    "start": "852339",
    "end": "857950"
  },
  {
    "text": "so flow basically reads all your JavaScript files it looks in your node modules folder it looks under your",
    "start": "857950",
    "end": "863320"
  },
  {
    "text": "covers it looks in your shoes and your closets it grabs all the JavaScript it grabs JSON files that you can find it",
    "start": "863320",
    "end": "869470"
  },
  {
    "text": "does like it's kind of annoying at how much it tries to to read into everything",
    "start": "869470",
    "end": "874540"
  },
  {
    "text": "and then it pulls out all the types relationships and the information you know that file is it's gonna be",
    "start": "874540",
    "end": "880060"
  },
  {
    "text": "exporting a function that returns a string or that variable is set to a number so I'm just going to assume that",
    "start": "880060",
    "end": "886120"
  },
  {
    "text": "you want that to always be a number it does a lot of type inference it takes all this information and sticks it in",
    "start": "886120",
    "end": "891520"
  },
  {
    "text": "this like graph database server running on your computer so if you if you're using flow its",
    "start": "891520",
    "end": "897190"
  },
  {
    "text": "having like six servers running in the background of your computer all the time having all this information about all",
    "start": "897190",
    "end": "902710"
  },
  {
    "text": "the types in your whole JavaScript world and then oh sorry then when you go into a",
    "start": "902710",
    "end": "907980"
  },
  {
    "text": "particular javascript file it will it will consult that graph and say okay",
    "start": "907980",
    "end": "913839"
  },
  {
    "text": "you're pulling in this function from that file yeah well that is going to give you this type of variable so it's",
    "start": "913839",
    "end": "919930"
  },
  {
    "text": "able to make really intelligent decisions about about types and how you're your correctly or incorrectly",
    "start": "919930",
    "end": "925930"
  },
  {
    "text": "using them it's much more powerful than a linter so so I think they're both really helpful and I started wondering",
    "start": "925930",
    "end": "932260"
  },
  {
    "text": "like could a linter have helped us with this mystery bug what do y'all think would a linter have been good enough to",
    "start": "932260",
    "end": "937570"
  },
  {
    "text": "solve this problem okay I see people shaking their head but they're like you wouldn't ask the",
    "start": "937570",
    "end": "943130"
  },
  {
    "text": "question unless you probably already are gonna have some kind of tricky answer so here's the thing you can do something",
    "start": "943130",
    "end": "948860"
  },
  {
    "text": "like I could say well there's some code smells here and I can live for that so like I could say don't ever I could",
    "start": "948860",
    "end": "955580"
  },
  {
    "text": "really easily write a rule in insulin that says I don't have any statements after I call res that send or res dot",
    "start": "955580",
    "end": "960680"
  },
  {
    "text": "render okay that's that's something you can do pretty easily I can also write a custom rule that said hey if you're using that logger dot log function you",
    "start": "960680",
    "end": "967640"
  },
  {
    "text": "know you know make sure that the variable isn't res I mean these are kind of like I'm grasping at straws here like",
    "start": "967640",
    "end": "973670"
  },
  {
    "text": "I could I could write a rule a specific rule for my team and this is something I do a lot actually if I notice that my",
    "start": "973670",
    "end": "979910"
  },
  {
    "text": "team is making the same mistake like more than one time more than two times if I'm making them estate same mistake",
    "start": "979910",
    "end": "985970"
  },
  {
    "text": "over and over again I can very easily write a custom you eeeyah slant rule that says hey let's not make this",
    "start": "985970",
    "end": "991160"
  },
  {
    "text": "mistake anymore and then that that bug ceases to exist in our system so so lint",
    "start": "991160",
    "end": "996200"
  },
  {
    "text": "a still has a place and I'll just tell you we actually use es lint to enforce that people use flow type so there's",
    "start": "996200",
    "end": "1002800"
  },
  {
    "text": "kind of this weird nature they're all kind of friends all these different tools we also use pretty room for styles we're not using ES lint to do our style",
    "start": "1002800",
    "end": "1010120"
  },
  {
    "text": "checking which is I think the 95 percent reason people use es lint we're actually using you know flow to check our types",
    "start": "1010120",
    "end": "1017500"
  },
  {
    "text": "baseline to check for other bugs and custom rules that we write and then prettier to format all our files for us",
    "start": "1017500",
    "end": "1024240"
  },
  {
    "text": "that's a lot of stuff that's a lot of static analysis but I think it's really good and I think everyone needs to",
    "start": "1024240",
    "end": "1029438"
  },
  {
    "text": "uplevel in their static analysis skills and even if you're to get away from this and say I still hate types we'll get better eslint because you can do some",
    "start": "1029439",
    "end": "1035500"
  },
  {
    "text": "great stuff with it now unfortunately even you know despite all of that wonderful amazing stuff that",
    "start": "1035500",
    "end": "1042188"
  },
  {
    "text": "we have there we still get bugs in our code which is really depressing and that's why I want to talk a little bit",
    "start": "1042189",
    "end": "1047589"
  },
  {
    "text": "about debugging now I'm curious out there does anyone have any like secret good",
    "start": "1047589",
    "end": "1052780"
  },
  {
    "text": "debugging skills like for production debugging in node what are you people using anything like good out there what",
    "start": "1052780",
    "end": "1062590"
  },
  {
    "text": "is it crow okay yeah so there's basically this",
    "start": "1062590",
    "end": "1068580"
  },
  {
    "text": "is a great great point the silence I think proves the point the debugging node and production is really difficult",
    "start": "1068580",
    "end": "1074220"
  },
  {
    "text": "and so everyone kind of has heard probably about when node six came out",
    "start": "1074220",
    "end": "1079770"
  },
  {
    "text": "they they announced this support for using the chrome debugger oh sorry",
    "start": "1079770",
    "end": "1085770"
  },
  {
    "text": "basically that yeah they announced support for using the chrome debugger and so it was pretty cool you could call",
    "start": "1085770",
    "end": "1091410"
  },
  {
    "text": "no - - inspect or no - - debug or whatever the flag was and it'll open up this debugger and you can do debugging",
    "start": "1091410",
    "end": "1097740"
  },
  {
    "text": "the similar way you do debugging on the web and it works for node and of course there had been previously other tools for that but there was sort of limited",
    "start": "1097740",
    "end": "1104010"
  },
  {
    "text": "what node a came out with which as far as I know I've never heard anyone talk about it before it just sort of like one",
    "start": "1104010",
    "end": "1110430"
  },
  {
    "text": "of my colleagues Jameis Charles stumbled on this is we were struggling with debugging at PayPal the last couple months and he figured out that there's",
    "start": "1110430",
    "end": "1116940"
  },
  {
    "text": "this new inspector module and the inspector module allows programmatic access to the v8 debugger from node so",
    "start": "1116940",
    "end": "1124740"
  },
  {
    "text": "within my app I can actually poke into that v8 inspector not and turn it on and",
    "start": "1124740",
    "end": "1131160"
  },
  {
    "text": "off or even manipulated in other ways programmatically it's really powerful so first thing we did is we set up this",
    "start": "1131160",
    "end": "1136590"
  },
  {
    "text": "debug mode so on any of our staging servers we have this special route if you just added slash debug at the end we",
    "start": "1136590",
    "end": "1143190"
  },
  {
    "text": "can just turn on chrome dev tools on our staging servers not anything local but something on a staging server that we're",
    "start": "1143190",
    "end": "1148740"
  },
  {
    "text": "testing on we just click like connect to chrome dev tools and then we add our host name into our chrome dev tools and",
    "start": "1148740",
    "end": "1154320"
  },
  {
    "text": "it will allow us to do all sorts of cool stuff like set breakpoints and pause on",
    "start": "1154320",
    "end": "1161520"
  },
  {
    "text": "line cut exceptions pause on caught exceptions and you could even do do",
    "start": "1161520",
    "end": "1167580"
  },
  {
    "text": "other things like when it does get caught you can see there's a really good stack trace like a normal node stack",
    "start": "1167580",
    "end": "1172830"
  },
  {
    "text": "trace looks like this there's just a few lines it sort of has this async barrier so any time you do a set timeout or",
    "start": "1172830",
    "end": "1179130"
  },
  {
    "text": "process that next pick anything you do a sync and note your stack trace basically usually gets cut off well with chrome",
    "start": "1179130",
    "end": "1185220"
  },
  {
    "text": "dev tools you get this really really nice long stack trace as you can see on the right there and it shows like",
    "start": "1185220",
    "end": "1190530"
  },
  {
    "text": "exactly what route had been called and all this stuff it's really powerful you can even do let's see by any other store",
    "start": "1190530",
    "end": "1197370"
  },
  {
    "text": "you can even hot reload your files our process for updating our stages",
    "start": "1197370",
    "end": "1202809"
  },
  {
    "text": "right now PayPal or historically has been pretty rough you'd have to go create a new build send that up to a",
    "start": "1202809",
    "end": "1208149"
  },
  {
    "text": "stage it could take you know half an hour just to do a new debug build and that's something that we're just sort of used to but with this I can hot reload a",
    "start": "1208149",
    "end": "1214600"
  },
  {
    "text": "change on stage immediately in seconds it's amazing and as soon as we got this working Jamis and I threw this thing together",
    "start": "1214600",
    "end": "1221499"
  },
  {
    "text": "for hackathon we won the prize hooray and the people were super impressed and we're like we need to put this on production today and yeah you can't do",
    "start": "1221499",
    "end": "1229269"
  },
  {
    "text": "that actually for for to at least really good reasons one imagine you're having",
    "start": "1229269",
    "end": "1234609"
  },
  {
    "text": "like 50 people coming to hit your app and you're like oh we'll just pause on this breakpoint and just wreck all those",
    "start": "1234609",
    "end": "1240340"
  },
  {
    "text": "people's connections that's not gonna work and two we're having like random",
    "start": "1240340",
    "end": "1245830"
  },
  {
    "text": "engineers just peeking with the pause on production be like hmm what financial information is coming through our system right now like we can't do that either",
    "start": "1245830",
    "end": "1251859"
  },
  {
    "text": "so we talked to our improv people our security people everyone was like there's no way you're not allowed to use",
    "start": "1251859",
    "end": "1257139"
  },
  {
    "text": "this stuff we're like but the experience is so hard right now like debugging like this will be amazing and we'll be able",
    "start": "1257139",
    "end": "1262809"
  },
  {
    "text": "to catch bugs and we'll be able to fix things and like I can update something they're like you can't have random people just like hot reloading code and",
    "start": "1262809",
    "end": "1269259"
  },
  {
    "text": "our production server whenever handling financial data like you can't do it so it was really like you know I sort of",
    "start": "1269259",
    "end": "1275139"
  },
  {
    "text": "gutted because I'm like we figured out like the cool futuristic way to do debugging and know that no one is using",
    "start": "1275139",
    "end": "1281259"
  },
  {
    "text": "and it turns out we can't actually do that which is depressing but I will say",
    "start": "1281259",
    "end": "1286299"
  },
  {
    "text": "there is something good that is that you can do so along with the inspector",
    "start": "1286299",
    "end": "1291669"
  },
  {
    "text": "module call is something called inspector dot session now you're thinking what is that I will tell you so",
    "start": "1291669",
    "end": "1298269"
  },
  {
    "text": "with inspector that session you can open up a session into the v8 debugger from",
    "start": "1298269",
    "end": "1304629"
  },
  {
    "text": "your app now before you don't be opening that session from your dev tools on your",
    "start": "1304629",
    "end": "1310059"
  },
  {
    "text": "computer but here you're actually opening it from your app and your app can communicate and get all the debugging information that was maybe",
    "start": "1310059",
    "end": "1316570"
  },
  {
    "text": "going into chrome dev tools but you can just get it in your app and do interesting things with it and this we can actually do in a controlled way",
    "start": "1316570",
    "end": "1323049"
  },
  {
    "text": "without some of the security and other implications that we had of just letting engineers just hit pause breakpoints in",
    "start": "1323049",
    "end": "1329409"
  },
  {
    "text": "a production server let me just do I'm not gonna like go into it forever because you gonna have to look this up and do a",
    "start": "1329409",
    "end": "1334780"
  },
  {
    "text": "little bit of digging yourself but imagine you create your new in session you connect you",
    "start": "1334780",
    "end": "1340540"
  },
  {
    "text": "you then have to say I want to be able to use the runtime and the debugger it's kind of a weird protocol but it's just",
    "start": "1340540",
    "end": "1346090"
  },
  {
    "text": "whatever your chrome dev tools is doing under the hood anyway then you can say oh I want those fancy async stack traces",
    "start": "1346090",
    "end": "1351280"
  },
  {
    "text": "so you can set a sink call stack depths so all the sudden instead of getting your four lines you can get you know a",
    "start": "1351280",
    "end": "1357040"
  },
  {
    "text": "sink stack traces that will let you be a mega fast debugger and then you could say set on set pauses on exceptions you",
    "start": "1357040",
    "end": "1363550"
  },
  {
    "text": "can give it all exceptions on caught exceptions whatever you want and then when the when the debugger pauses you",
    "start": "1363550",
    "end": "1369790"
  },
  {
    "text": "get access to the call frames the reason the async tacked stacktrace all these variables you can do all sorts",
    "start": "1369790",
    "end": "1375700"
  },
  {
    "text": "of stuff with there's all sorts of documentation there's this dev tools protocol viewer that you can look at the",
    "start": "1375700",
    "end": "1380980"
  },
  {
    "text": "docs it's kind of like Java Docs style maybe that's popular among enterprise-e",
    "start": "1380980",
    "end": "1386500"
  },
  {
    "text": "folks I don't know but it's pretty easy to read and it's very helpful information and with it I was able to",
    "start": "1386500",
    "end": "1392320"
  },
  {
    "text": "quickly throw together this so we've got our default node error message on top and down on the bottom was like I will",
    "start": "1392320",
    "end": "1399580"
  },
  {
    "text": "say ten or twelve lines of code I was able to both reproduce the original",
    "start": "1399580",
    "end": "1404830"
  },
  {
    "text": "stack trace which is at the bottom and then add all the cool async stack trace bits in a format that basically looks",
    "start": "1404830",
    "end": "1410290"
  },
  {
    "text": "like that so here's the use case for this imagine our servers are crashing and I'm really sad maybe I can go turn",
    "start": "1410290",
    "end": "1416920"
  },
  {
    "text": "on just hit a special route or have some way to turn on like verbose verbose",
    "start": "1416920",
    "end": "1422650"
  },
  {
    "text": "crash logs okay I just want to enable them temporarily or enable them on a specific box so I turn on this verbose",
    "start": "1422650",
    "end": "1428470"
  },
  {
    "text": "crash logs and now any time the server is about to crash it spits up all this good information so I can actually",
    "start": "1428470",
    "end": "1434020"
  },
  {
    "text": "figure out where it happened faster than the three-day benchmark I set the first time we had a really bad crash attack so",
    "start": "1434020",
    "end": "1440140"
  },
  {
    "text": "I'm pumped about this thing we haven't started doing this in production yet we are using other stuff in staging but I'm",
    "start": "1440140",
    "end": "1446230"
  },
  {
    "text": "really convinced that this is going to open up a lot of cool doors for us you know we're also you looking at in solid",
    "start": "1446230",
    "end": "1452230"
  },
  {
    "text": "and some of these other tools but I actually think this is the way forward and we've talked with some folks on the v8 team who told us that it won't slow",
    "start": "1452230",
    "end": "1458800"
  },
  {
    "text": "down our app to to start hooking into some of this stuff because it's already built in it already has like all those",
    "start": "1458800",
    "end": "1464530"
  },
  {
    "text": "hooks are being called anyway so in general it's not going to add a lot of overhead though we'll sing to benchmark it and test it to make sure",
    "start": "1464530",
    "end": "1471450"
  },
  {
    "text": "final point on this you need to find the debugging approach that works for you and your team console dot log doesn't",
    "start": "1471450",
    "end": "1477280"
  },
  {
    "text": "cut it you need something better here's a suggestion check out this inspector module maybe there's something else",
    "start": "1477280",
    "end": "1482799"
  },
  {
    "text": "they'll work for you but be ready before the bugs start coming to figure out how you're gonna do bug them when they come",
    "start": "1482799",
    "end": "1488440"
  },
  {
    "text": "again okay oh that's a lot I'm just gonna pause because I'm kind of worn out talking too much any questions or",
    "start": "1488440",
    "end": "1493960"
  },
  {
    "text": "anything any comments on that section I want something yeah do we use tools like",
    "start": "1493960",
    "end": "1505480"
  },
  {
    "text": "apt on dynamics sorry what's that Jessica yeah yeah do we use tools like",
    "start": "1505480",
    "end": "1511090"
  },
  {
    "text": "afternoons yeah we've explored using after Amex and in fact have had some success with it personally I like tools",
    "start": "1511090",
    "end": "1519580"
  },
  {
    "text": "that are really JavaScript focused so like I mentioned we're also looking at install it right now and install it has",
    "start": "1519580",
    "end": "1525250"
  },
  {
    "text": "a lot of like heaped on some performance profiling stuff it's really good tool but I haven't found anything better than",
    "start": "1525250",
    "end": "1530830"
  },
  {
    "text": "what I showed you for just everyday debugging like crashes and the types of things I deal with anything else any",
    "start": "1530830",
    "end": "1537610"
  },
  {
    "text": "other questions alright so we covered basically how to debug when unexpected",
    "start": "1537610",
    "end": "1542919"
  },
  {
    "text": "errors happen what I want to talk about now is how we do with those expected errors so you know like you're you have",
    "start": "1542919",
    "end": "1549039"
  },
  {
    "text": "an API but someone didn't send the right type of parameters or you're hitting a service and the service is down like",
    "start": "1549039",
    "end": "1555130"
  },
  {
    "text": "these things we know these things they happen there we can expect them but we need a plan for those expected errors",
    "start": "1555130",
    "end": "1561039"
  },
  {
    "text": "the way that I'm going to demonstrate this is is with the way that we're currently using async await and how we're hooking that into our error",
    "start": "1561039",
    "end": "1566980"
  },
  {
    "text": "handling I think it's really nice and it will be hopefully something new and exciting for you how many of you are",
    "start": "1566980",
    "end": "1572320"
  },
  {
    "text": "using async away in your node apps today Oh wonderful so many people then you",
    "start": "1572320",
    "end": "1577419"
  },
  {
    "text": "probably already may have discovered this stuff the good thing is I'm not going to talk a bunch about how async away it works I'm just gonna go quickly",
    "start": "1577419",
    "end": "1582970"
  },
  {
    "text": "into the stuff we're doing for error handling hopefully it will be helpful quick recap so an async function in",
    "start": "1582970",
    "end": "1590020"
  },
  {
    "text": "JavaScript and this is available in node 8 so if you're using node 8 you can just use this stuff without a transpiler if you're using something earlier you",
    "start": "1590020",
    "end": "1595210"
  },
  {
    "text": "can use babel an async function is basically the same as a normal function",
    "start": "1595210",
    "end": "1600340"
  },
  {
    "text": "that just always are to promise so if you have a sing function get number and return for it's",
    "start": "1600340",
    "end": "1605740"
  },
  {
    "text": "basically identical to this function get number return promise that resolve for so just remember if I'm using an async",
    "start": "1605740",
    "end": "1611800"
  },
  {
    "text": "function it always returns a promise now here's the interesting thing the same",
    "start": "1611800",
    "end": "1617230"
  },
  {
    "text": "goes for errors so if you throw or have an error inside of an async function that gets converted into a rejected",
    "start": "1617230",
    "end": "1622720"
  },
  {
    "text": "promise so it's just like promises under the hood everywhere so these two examples are basically",
    "start": "1622720",
    "end": "1628120"
  },
  {
    "text": "equivalent I can throw in an async function or I can return a rejected promise essentially the same thing now if you throw in normal callback land",
    "start": "1628120",
    "end": "1635230"
  },
  {
    "text": "JavaScript your app of law but in async land in an async await land you're",
    "start": "1635230",
    "end": "1640780"
  },
  {
    "text": "pretty safe because it just returns a rejected promise and you can handle that promise later so we've sort of",
    "start": "1640780",
    "end": "1646570"
  },
  {
    "text": "discovered and I think it's something we discovered but we've been using lately this pattern that we're call async middleware pattern cuz I was like I want",
    "start": "1646570",
    "end": "1654070"
  },
  {
    "text": "to use async await I want to figure out how to use it but we're using Express and we're using kind of typical Express",
    "start": "1654070",
    "end": "1660070"
  },
  {
    "text": "middleware so we're like how do I merge those two worlds they're very different worlds so the first thing that we did is",
    "start": "1660070",
    "end": "1666160"
  },
  {
    "text": "we started just saying okay like let's just have a sinc functions and then I can say for example if i if i converted",
    "start": "1666160",
    "end": "1672370"
  },
  {
    "text": "our get users for ID function from a callback to a promise based function I can just await that function now get",
    "start": "1672370",
    "end": "1678940"
  },
  {
    "text": "users will pause until the users come back from that service and then I can",
    "start": "1678940",
    "end": "1684070"
  },
  {
    "text": "render this up I think it's really really clean compared to the way we were writing callback JavaScript but I'm not here to talk about how async/await makes",
    "start": "1684070",
    "end": "1691090"
  },
  {
    "text": "your apps clean I'm here to talk about how to do error handling with it so here's the problem if there's an error and get users for ID the errors will",
    "start": "1691090",
    "end": "1697929"
  },
  {
    "text": "bubble up to the top no problem but but we don't actually catch the error so down at the bottom in our Express side",
    "start": "1697929",
    "end": "1705340"
  },
  {
    "text": "Express is going to get this unhandled rejection and it will crash so we have",
    "start": "1705340",
    "end": "1712120"
  },
  {
    "text": "to do something about that so after playing around this for a while and realizing oh we're crashing all over the place even though I'm telling everyone",
    "start": "1712120",
    "end": "1717640"
  },
  {
    "text": "like hey better error handling with async await it just magically bubbles it turns out it's not all magic you have to",
    "start": "1717640",
    "end": "1723850"
  },
  {
    "text": "add some error handling or a catch somewhere so we we did this thing we",
    "start": "1723850",
    "end": "1729280"
  },
  {
    "text": "made this little handle error function I'll walk you through it it's like it's not very hard but it's it's kind of interesting so",
    "start": "1729280",
    "end": "1735970"
  },
  {
    "text": "first you pass in your async middleware or your async route to that function you",
    "start": "1735970",
    "end": "1741310"
  },
  {
    "text": "then returned sort of a standard middleware that rec res next function signature and then when that middleware",
    "start": "1741310",
    "end": "1748090"
  },
  {
    "text": "is gets called you you execute your async middleware and the only special",
    "start": "1748090",
    "end": "1754210"
  },
  {
    "text": "thing you have to do is catch any error so it'll call your async middleware and then if those throw it'll catch the",
    "start": "1754210",
    "end": "1759550"
  },
  {
    "text": "error and pass it to the like Express error handler so that sort of makes",
    "start": "1759550",
    "end": "1765520"
  },
  {
    "text": "sense I see like one head dog I'm just gonna call it good",
    "start": "1765520",
    "end": "1770520"
  },
  {
    "text": "so then you have to wrap your route so here's the problem though if you forget to wrap your routes with it like we do",
    "start": "1770620",
    "end": "1776410"
  },
  {
    "text": "like let's say we had get users that that had it wrapped and then we add an authenticate method which was also",
    "start": "1776410",
    "end": "1782890"
  },
  {
    "text": "asynchronous we're like oh that's that's fine and but no it's not fine it will",
    "start": "1782890",
    "end": "1788140"
  },
  {
    "text": "also crash so this became this problem like this whack-a-mole problem like okay someone added a new async router we",
    "start": "1788140",
    "end": "1793630"
  },
  {
    "text": "converted this new flow to async await and we forgot to wrap with their handle error handler thing and very quickly",
    "start": "1793630",
    "end": "1800260"
  },
  {
    "text": "realize like this is not a good plan like I have created a monster here like I thought that it was gonna be so nice",
    "start": "1800260",
    "end": "1806380"
  },
  {
    "text": "and so perfect and everything was gonna be easy but actually it's not easy when when things crash and it's very",
    "start": "1806380",
    "end": "1811480"
  },
  {
    "text": "difficult to trace why and it was very sad so we need to make it easy for the engineers to do the right thing with",
    "start": "1811480",
    "end": "1817150"
  },
  {
    "text": "regard to dealing with errors so that's when we figured out what we could do instead of making users wrap the routes",
    "start": "1817150",
    "end": "1824050"
  },
  {
    "text": "in like an error handler or add try catch all over the place you can actually like hijack the the Express",
    "start": "1824050",
    "end": "1832960"
  },
  {
    "text": "like the the Express like apt-get F dot use",
    "start": "1832960",
    "end": "1838270"
  },
  {
    "text": "at the post all those methods and just up add async support directly into those",
    "start": "1838270",
    "end": "1844060"
  },
  {
    "text": "methods there's a huge thread on the Express j/s like issues page where people like add support for promises or",
    "start": "1844060",
    "end": "1850840"
  },
  {
    "text": "async middleware and they're like we don't really want to maintain this we don't care we're never gonna do it we're",
    "start": "1850840",
    "end": "1856060"
  },
  {
    "text": "never gonna do it more or less and so a lot of people have come up with things like this like this one expressjs async",
    "start": "1856060",
    "end": "1862930"
  },
  {
    "text": "errors which will just patch the express to support async a sink middlewares and this is what we",
    "start": "1862930",
    "end": "1869740"
  },
  {
    "text": "do we don't use this particular module we've written our own in-house but it works super well so now people can throw",
    "start": "1869740",
    "end": "1874930"
  },
  {
    "text": "however they want and it'll just be caught really nicely the other side to this the other side to this error",
    "start": "1874930",
    "end": "1881260"
  },
  {
    "text": "handling I don't know the other sites of this coin I don't know what it is but but but the other part of it that I want",
    "start": "1881260",
    "end": "1887410"
  },
  {
    "text": "to discuss is custom error classes this is something else that we use a lot that I think is really effective I'll show you how it works together so with with",
    "start": "1887410",
    "end": "1894490"
  },
  {
    "text": "async/await we can do something like a sync function get card and if you don't",
    "start": "1894490",
    "end": "1900070"
  },
  {
    "text": "have the parameters if you're missing a parameter we can throw a new error missing ID this is actually fairly clean and unlike in normal callback land node",
    "start": "1900070",
    "end": "1908860"
  },
  {
    "text": "this won't crash this will be properly handled and caught and it works pretty well but we've sort of moved to",
    "start": "1908860",
    "end": "1914590"
  },
  {
    "text": "something like this instead of calling new error will have a new parameter or just whatever custom error type that we create and that parameter can",
    "start": "1914590",
    "end": "1921010"
  },
  {
    "text": "encapsulate some special logic that allow us to do really interesting things let me show an example so here I have my",
    "start": "1921010",
    "end": "1927550"
  },
  {
    "text": "parameter class with es6 classes it's super easy for us to just say parameter extends error then it just gets all the",
    "start": "1927550",
    "end": "1933640"
  },
  {
    "text": "built-in error stuff very easily it's nice before when you were doing this with like old JavaScript es5 it was",
    "start": "1933640",
    "end": "1940960"
  },
  {
    "text": "like lots of weird lots of weird objects I'll create and stuff we don't do anything anymore this is really cool and",
    "start": "1940960",
    "end": "1947350"
  },
  {
    "text": "then I just call super missing parameter field name I passed in the second one",
    "start": "1947350",
    "end": "1952720"
  },
  {
    "text": "error captures that trace is is actually not essential but it'll help us have a slightly cleaner stack trace because it",
    "start": "1952720",
    "end": "1958930"
  },
  {
    "text": "already extends air it's gonna have a stack trace anyway but this will clean it up and in some ways and then let's",
    "start": "1958930",
    "end": "1964510"
  },
  {
    "text": "say we want to add a status code to this now you're probably thinking why would I add a status code to an error object well it's a parameter error and so",
    "start": "1964510",
    "end": "1970270"
  },
  {
    "text": "missing parameters you might want to give that a status code 400 there's probably like a better status code this is just an example so then in my like",
    "start": "1970270",
    "end": "1977020"
  },
  {
    "text": "default Express error handler I can say something like let status code equals air dot status code or just the default",
    "start": "1977020",
    "end": "1982480"
  },
  {
    "text": "500 if I don't have one and then I pass that along pass in the error message or you know whatever obviously we could do",
    "start": "1982480",
    "end": "1989230"
  },
  {
    "text": "something fancier if you want now you're saying you could probably think I don't need a custom error to do that like sure you could ask people to write this like",
    "start": "1989230",
    "end": "1996250"
  },
  {
    "text": "let air equals new error error dot status code equals 400 throw and a lot of people do stuff like that",
    "start": "1996250",
    "end": "2002749"
  },
  {
    "text": "but I find it's just way cleaner to encapsulate that inside a customary class it works pretty well so check it",
    "start": "2002749",
    "end": "2009169"
  },
  {
    "text": "out those two things combined have worked really well for us so using async/await just throwing errors feeling really good",
    "start": "2009169",
    "end": "2014749"
  },
  {
    "text": "about doing that and then using custom error classes to I don't know make it a",
    "start": "2014749",
    "end": "2019879"
  },
  {
    "text": "little bit easier to encapsulate stuff so we use those air classes to handle localization of error messages because we have PayPal supports a lot of",
    "start": "2019879",
    "end": "2026299"
  },
  {
    "text": "countries so we've got it we've got to do that at some point so we wrap that into our our base air class and it works",
    "start": "2026299",
    "end": "2031700"
  },
  {
    "text": "pretty well so yeah that's a little bit about errors any question about about handling",
    "start": "2031700",
    "end": "2038269"
  },
  {
    "text": "expected errors async/await anything like that before I move on good I'm glad you're on questions that means",
    "start": "2038269",
    "end": "2044419"
  },
  {
    "text": "I'm doing a super good job explaining it so I've gone over a lot of stuff so far",
    "start": "2044419",
    "end": "2051378"
  },
  {
    "text": "I want to talk now about client-side errors how many of you are doing client-side monitoring in your apps or",
    "start": "2051379",
    "end": "2056599"
  },
  {
    "text": "client-side error monitoring a couple people hopefully by the end of this",
    "start": "2056599",
    "end": "2061940"
  },
  {
    "text": "you'll all be completely convinced so this is very important thing to do so when you're when you're handling well",
    "start": "2061940",
    "end": "2069559"
  },
  {
    "text": "first of all why is this important if you look at this example here's an example of our send money page that I",
    "start": "2069559",
    "end": "2074868"
  },
  {
    "text": "work on someone trying to click it and they're getting an error how many times",
    "start": "2074869",
    "end": "2080118"
  },
  {
    "text": "are our users out there trying to do something on our page and it doesn't work but we never hear about it because",
    "start": "2080119",
    "end": "2085549"
  },
  {
    "text": "most of our server most of our monitoring and logging like at PayPal it's all set up by our server people who",
    "start": "2085549",
    "end": "2090950"
  },
  {
    "text": "are thinking very much about what status codes are coming in and you know what what's happening on our servers and",
    "start": "2090950",
    "end": "2096440"
  },
  {
    "text": "what's the load like on the servers they're not thinking about what's happening to our clients but if a customer client can't can't click on",
    "start": "2096440",
    "end": "2101990"
  },
  {
    "text": "something it'll never send an ajax call it'll never necessarily fail in our in",
    "start": "2101990",
    "end": "2108619"
  },
  {
    "text": "any way that we can measure that on our end the actual error is hiding right there in the user's dev tools which",
    "start": "2108619",
    "end": "2115790"
  },
  {
    "text": "they're never going to open in a million years I guarantee it they don't know what's wrong and so one of the big",
    "start": "2115790",
    "end": "2121940"
  },
  {
    "text": "things I worked on in the last year was trying to really figure out how to solve",
    "start": "2121940",
    "end": "2126980"
  },
  {
    "text": "this problem how do we how can we get information about what's failing in our clients and how can we get that in to us",
    "start": "2126980",
    "end": "2132829"
  },
  {
    "text": "in an ash away--so browsers ship this thing called window Don error it's well understood",
    "start": "2132829",
    "end": "2137860"
  },
  {
    "text": "now most browsers support actually sending an error object with stacktrace and all that good stuff but because the",
    "start": "2137860",
    "end": "2143990"
  },
  {
    "text": "the implementations are different across browsers usually your strategy is you listen for window Donaire you clean up",
    "start": "2143990",
    "end": "2149660"
  },
  {
    "text": "that data and then you can like post that to your server with Ajax or this navigator that's in beacon or however",
    "start": "2149660",
    "end": "2155150"
  },
  {
    "text": "you want to do it and then like you'll see at the bottom we're using graph on ax to just sort of graph how how that",
    "start": "2155150",
    "end": "2161980"
  },
  {
    "text": "how that changes over time and kibana if we want to like dive in and like look at stack traces and all that so if we have",
    "start": "2161980",
    "end": "2167990"
  },
  {
    "text": "a lot of different tools for for monitoring and we finally put client-side errors in there so this is",
    "start": "2167990",
    "end": "2173210"
  },
  {
    "text": "this is the mystery part okay so we added client-side monitoring on our team we figured out the there's some tricks",
    "start": "2173210",
    "end": "2179150"
  },
  {
    "text": "to it by the way if you want to get it to work and your your codes on a CDN you have to use cores on your script tags it's for it to be able to read the stack",
    "start": "2179150",
    "end": "2186230"
  },
  {
    "text": "traces there's some funky stuff once we got that working though we deployed some code a couple weeks later and we noticed",
    "start": "2186230",
    "end": "2191870"
  },
  {
    "text": "this big spike huge spike like thousands more errors or hundreds more errors",
    "start": "2191870",
    "end": "2197200"
  },
  {
    "text": "during our deploy and initially we're thinking okay okay this is so good",
    "start": "2197200",
    "end": "2203000"
  },
  {
    "text": "actually like we're amazing because we figured out that like our new system for",
    "start": "2203000",
    "end": "2209060"
  },
  {
    "text": "tracking errors is working like I mean I was taking credit for because I know I didn't build the code that was crashing",
    "start": "2209060",
    "end": "2214430"
  },
  {
    "text": "like I was building the part that was tracking the errors and and alerted us to the problem so I was really proud of",
    "start": "2214430",
    "end": "2220160"
  },
  {
    "text": "myself and then we actually looked into the bug and it wasn't as cut and dry as",
    "start": "2220160",
    "end": "2227090"
  },
  {
    "text": "it first seemed so here's the problem the bug looks something like this unexpected token angled bracket in JSON",
    "start": "2227090",
    "end": "2234110"
  },
  {
    "text": "at position 0 anyone know what that is trying to parse HTML okay why would this",
    "start": "2234110",
    "end": "2243080"
  },
  {
    "text": "be happening let's assume I could never reproduce this outside of a deploy event why is this habit ride we saw this is",
    "start": "2243080",
    "end": "2250940"
  },
  {
    "text": "the error message why this isn't make sense and we can reproduce the route a hundred times locally or on production environment yes yes yes so so",
    "start": "2250940",
    "end": "2261380"
  },
  {
    "text": "essentially essentially I'll tell you what happened something like that we're not getting the",
    "start": "2261380",
    "end": "2267350"
  },
  {
    "text": "data correctly we have a lot of servers right PayPal like the send money app has between 200 and 400 servers running it's",
    "start": "2267350",
    "end": "2274520"
  },
  {
    "text": "no not they're not all taking live traffic but we're like ready for for massive scale so we have a bunch of servers out there there are spread",
    "start": "2274520",
    "end": "2280280"
  },
  {
    "text": "across different data centers when we deploy we sort of go like half the data",
    "start": "2280280",
    "end": "2285770"
  },
  {
    "text": "center and then the rest and then we sort of pause and say like okay is everything looking good and then we",
    "start": "2285770",
    "end": "2292040"
  },
  {
    "text": "carry on with our deploy process we go to another data center we start rolling out we could have keep checking things",
    "start": "2292040",
    "end": "2297620"
  },
  {
    "text": "complete that data center and move on here's the problem for us that we didn't know before that leads to a situation",
    "start": "2297620",
    "end": "2305380"
  },
  {
    "text": "where your UI code by becoming from server version a and your server code",
    "start": "2305380",
    "end": "2311900"
  },
  {
    "text": "might be coming from server with version B of the code base and so in this particular case oh and by the way our",
    "start": "2311900",
    "end": "2318890"
  },
  {
    "text": "sessions are sticky per data center so if they're sticky for a particular server we'd be safe but because they're sticking for data center there's a",
    "start": "2318890",
    "end": "2324830"
  },
  {
    "text": "chance that a data center has half code a and half code B and so we're getting the UI code from one so the UI code is",
    "start": "2324830",
    "end": "2331250"
  },
  {
    "text": "saying hit this route hit this JSON route and it's hitting that route and it's getting a 404 it's returning an",
    "start": "2331250",
    "end": "2336350"
  },
  {
    "text": "HTML message and that message is trying to trying to parse that JSON and it's failing here's the part that really",
    "start": "2336350",
    "end": "2342200"
  },
  {
    "text": "stung me because I was so proud that at least we had at least I build that the the error handling thing so at least I",
    "start": "2342200",
    "end": "2348020"
  },
  {
    "text": "was able to detect the problem well here's the issue here's when we decided to roll back it's that yellow line the",
    "start": "2348020",
    "end": "2354440"
  },
  {
    "text": "process of deploying or rolling back both triggered the same bug so it wasn't actually the the issue wasn't actually",
    "start": "2354440",
    "end": "2361640"
  },
  {
    "text": "that anything was wrong in our code the problem was that the the deploy process was hurting our customers now we were",
    "start": "2361640",
    "end": "2368600"
  },
  {
    "text": "never monitoring this before so we didn't realize that anytime you rolled out with a breaking Ajax change we were",
    "start": "2368600",
    "end": "2374150"
  },
  {
    "text": "hurting a bunch of customers any customers using those change routes could potentially be affected you know",
    "start": "2374150",
    "end": "2379850"
  },
  {
    "text": "and it turns out like whether we going forward or backward the the process is still basically exactly the same so that",
    "start": "2379850",
    "end": "2387440"
  },
  {
    "text": "was a pretty interesting learning experience a frustrating one we talked to everyone who saying we need to change our deploy process everything's terrible",
    "start": "2387440",
    "end": "2393860"
  },
  {
    "text": "and they said well don't you know you're supposed to write backwards-compatible code every time you deploy like I never",
    "start": "2393860",
    "end": "2399050"
  },
  {
    "text": "heard of that before I never thought of that before because I never worked on a system with 200 servers that took you know so long to roll out across all",
    "start": "2399050",
    "end": "2405349"
  },
  {
    "text": "these boxes apparently our service people had are always been doing this but the node people were used to doing things in a",
    "start": "2405349",
    "end": "2411320"
  },
  {
    "text": "different way we just hadn't considered it before it was a fun bug so we learned",
    "start": "2411320",
    "end": "2416660"
  },
  {
    "text": "a bunch of stuff from this obviously UI monitoring is a huge blind spot there's probably better tools than writing one",
    "start": "2416660",
    "end": "2422119"
  },
  {
    "text": "in house there's track j/s and other tools out there I highly recommend if you care about like not hurting your",
    "start": "2422119",
    "end": "2429650"
  },
  {
    "text": "customers to to check it out and of course like think about how the deploy",
    "start": "2429650",
    "end": "2435109"
  },
  {
    "text": "process is affecting your users we didn't know until we had this this UI",
    "start": "2435109",
    "end": "2440420"
  },
  {
    "text": "monitoring in place that it was affecting our users every single time we deployed it was hurting our users we",
    "start": "2440420",
    "end": "2445940"
  },
  {
    "text": "didn't realize that or every time we deployed with a breaking a breaking change like that and and of course like",
    "start": "2445940",
    "end": "2451730"
  },
  {
    "text": "one thing that this really made us think is that maybe we should actually think hard about separating our UI and server",
    "start": "2451730",
    "end": "2456770"
  },
  {
    "text": "deploys we'd always kind of been like no we're no team we're we're sort of the front end of the front end and the back end of the front end all at the same",
    "start": "2456770",
    "end": "2462829"
  },
  {
    "text": "time and maybe there's actually some nice thought into saying like let's let's version or api's and let's do that",
    "start": "2462829",
    "end": "2469579"
  },
  {
    "text": "on the node side and let's have our our our UI code deploy independently so we're still kind of discussing the best",
    "start": "2469579",
    "end": "2476480"
  },
  {
    "text": "way to handle deploys of our front-end assets but I don't know I just some food",
    "start": "2476480",
    "end": "2482089"
  },
  {
    "text": "for thought I hope that gets you thinking about maybe this is happening to you or maybe you're already preventing this in some way I don't know",
    "start": "2482089",
    "end": "2487990"
  },
  {
    "text": "so let's let's conclude this long-winded",
    "start": "2487990",
    "end": "2493180"
  },
  {
    "text": "discussion about building dependable and scalable node app so it's just a few points that I'd like to emphasize the",
    "start": "2493180",
    "end": "2500270"
  },
  {
    "text": "first one use static analysis especially types types really help to catch those bugs early but if you are really don't",
    "start": "2500270",
    "end": "2507380"
  },
  {
    "text": "like types at least get really comfortable with es line not just for style rules but understand how to build custom rules so that if you see a bug",
    "start": "2507380",
    "end": "2513589"
  },
  {
    "text": "happen in your app you can make sure that bug doesn't ever happen again the next thing is have a plan for",
    "start": "2513589",
    "end": "2519319"
  },
  {
    "text": "debugging I presented one plan or one strategy but there might be a different strategy that works for you and your team it depends but but at least have a",
    "start": "2519319",
    "end": "2526160"
  },
  {
    "text": "plan in place before the bugs are coming so that you know what you're gonna do how you can quickly get the information you need to solve that problem three",
    "start": "2526160",
    "end": "2534650"
  },
  {
    "text": "have a consistent approach for air handling I really feel like this is important errors happen in our apps all the time and most of them are expected",
    "start": "2534650",
    "end": "2540529"
  },
  {
    "text": "errors so figure out how to be prepared for those expected errors document the process okay if we have an error we",
    "start": "2540529",
    "end": "2546440"
  },
  {
    "text": "always call back with an error object that looks something like this shape just just have a plan so that every",
    "start": "2546440",
    "end": "2553130"
  },
  {
    "text": "single time and again when you have we have a pattern that you want to enforce you can write a lint rule to say we're",
    "start": "2553130",
    "end": "2558799"
  },
  {
    "text": "only gonna accept errors that happen in this way or however you want to do it it makes it easy to enforce and it makes it",
    "start": "2558799",
    "end": "2564799"
  },
  {
    "text": "easy for code reviews to say hey I don't think you're doing this the right way if you have a consistent approach of course",
    "start": "2564799",
    "end": "2570259"
  },
  {
    "text": "make sure to access all to all the logs the first bug I was talking about at the very beginning of this thing was what",
    "start": "2570259",
    "end": "2578180"
  },
  {
    "text": "was the the missing stack trace turns out I only found this out like a couple weeks ago this back trace when our error",
    "start": "2578180",
    "end": "2585559"
  },
  {
    "text": "crashes because of a resource limitation which is what's happening the server was spinning the process monitor p.m. to",
    "start": "2585559",
    "end": "2591410"
  },
  {
    "text": "that we have actually closes that process and the stack trace for that lives in the PM 2 logs not in the app",
    "start": "2591410",
    "end": "2598069"
  },
  {
    "text": "logs I didn't know that before but it turns out there's a bunch of other logs other than the app logs that might have",
    "start": "2598069",
    "end": "2603440"
  },
  {
    "text": "useful information for your app so make sure that you know like where everything is what information you might need and",
    "start": "2603440",
    "end": "2608930"
  },
  {
    "text": "do your best to have hopefully your system will correlate and put all that stuff together and finally don't forget",
    "start": "2608930",
    "end": "2614630"
  },
  {
    "text": "about those client-side errors they're pretty important they can speak volumes to what customer what pain your customers are experiencing and they can",
    "start": "2614630",
    "end": "2620749"
  },
  {
    "text": "help you build of course better better apps on the server side thank you very much",
    "start": "2620749",
    "end": "2626580"
  },
  {
    "text": "[Applause]",
    "start": "2626580",
    "end": "2630429"
  }
]