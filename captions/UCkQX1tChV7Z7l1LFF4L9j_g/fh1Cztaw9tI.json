[
  {
    "text": "hi my name is Seth lad and welcome to",
    "start": "240",
    "end": "1800"
  },
  {
    "text": "Dart tips fun little fact the dart",
    "start": "1800",
    "end": "3679"
  },
  {
    "text": "language spec doesn't mention the word",
    "start": "3679",
    "end": "5080"
  },
  {
    "text": "array but fret not my happy dartisans",
    "start": "5080",
    "end": "7319"
  },
  {
    "text": "Dart is many ways to store and retrieve",
    "start": "7319",
    "end": "9280"
  },
  {
    "text": "collections of objects out of the box",
    "start": "9280",
    "end": "11280"
  },
  {
    "text": "Dart supports four types of collections",
    "start": "11280",
    "end": "13200"
  },
  {
    "text": "with full featured apis lists Maps cues",
    "start": "13200",
    "end": "16520"
  },
  {
    "text": "and sets unordered ordered Random Access",
    "start": "16520",
    "end": "19520"
  },
  {
    "text": "or buy a key you'll find it in Dart core",
    "start": "19520",
    "end": "21480"
  },
  {
    "text": "libraries let's get",
    "start": "21480",
    "end": "24519"
  },
  {
    "text": "[Music]",
    "start": "24530",
    "end": "27760"
  },
  {
    "text": "started first a bit of taxonomy the root",
    "start": "27760",
    "end": "30599"
  },
  {
    "text": "of darts collection classes start at",
    "start": "30599",
    "end": "32439"
  },
  {
    "text": "iterable an object that implements",
    "start": "32439",
    "end": "34440"
  },
  {
    "text": "iterable exposes readon access to a",
    "start": "34440",
    "end": "36960"
  },
  {
    "text": "group of items The Collection class",
    "start": "36960",
    "end": "39160"
  },
  {
    "text": "extends iterable adding the ability to",
    "start": "39160",
    "end": "41239"
  },
  {
    "text": "add and remove items the rubber hits the",
    "start": "41239",
    "end": "43559"
  },
  {
    "text": "road with the list set and Q which",
    "start": "43559",
    "end": "45520"
  },
  {
    "text": "Implement collection you can see that",
    "start": "45520",
    "end": "47680"
  },
  {
    "text": "map doesn't extend or Implement",
    "start": "47680",
    "end": "49160"
  },
  {
    "text": "collection but it's an honorary member",
    "start": "49160",
    "end": "50920"
  },
  {
    "text": "of the useful collection type",
    "start": "50920",
    "end": "52800"
  },
  {
    "text": "classes we'll talk about each collection",
    "start": "52800",
    "end": "55079"
  },
  {
    "text": "class in turn but let's start at the top",
    "start": "55079",
    "end": "57079"
  },
  {
    "text": "iterable just for illustration here's an",
    "start": "57079",
    "end": "59440"
  },
  {
    "text": "example of generating an iterable series",
    "start": "59440",
    "end": "61320"
  },
  {
    "text": "of five numbers 0 through four most of",
    "start": "61320",
    "end": "64080"
  },
  {
    "text": "the time you'll iterate through actual",
    "start": "64080",
    "end": "65518"
  },
  {
    "text": "collection objects but it's cool to know",
    "start": "65519",
    "end": "67119"
  },
  {
    "text": "you can generate a pure iterable",
    "start": "67119",
    "end": "69520"
  },
  {
    "text": "object we're talking about iterable here",
    "start": "69520",
    "end": "71880"
  },
  {
    "text": "so let's iterate iterable objects play",
    "start": "71880",
    "end": "74040"
  },
  {
    "text": "nicely with four in Loops because they",
    "start": "74040",
    "end": "76000"
  },
  {
    "text": "can generate iterators here's an example",
    "start": "76000",
    "end": "78119"
  },
  {
    "text": "of a 4in loop using an",
    "start": "78119",
    "end": "80079"
  },
  {
    "text": "iterable you could think of the 4in code",
    "start": "80079",
    "end": "82560"
  },
  {
    "text": "as syntactic sugar for this code notice",
    "start": "82560",
    "end": "85079"
  },
  {
    "text": "how a new iterator is created and move",
    "start": "85079",
    "end": "87079"
  },
  {
    "text": "next is called for every iteration the",
    "start": "87079",
    "end": "89320"
  },
  {
    "text": "current value Val from the iterator is",
    "start": "89320",
    "end": "90960"
  },
  {
    "text": "accessed and printed I don't know about",
    "start": "90960",
    "end": "92960"
  },
  {
    "text": "you but I find the 4in version easier to",
    "start": "92960",
    "end": "95000"
  },
  {
    "text": "read still it's nice to know what's",
    "start": "95000",
    "end": "96880"
  },
  {
    "text": "happening under the hood an iterable",
    "start": "96880",
    "end": "99799"
  },
  {
    "text": "object can do much more than just",
    "start": "99799",
    "end": "101399"
  },
  {
    "text": "iterate through items iterable defines",
    "start": "101399",
    "end": "103840"
  },
  {
    "text": "very useful methods for filtering",
    "start": "103840",
    "end": "105640"
  },
  {
    "text": "searching transforming reducing and more",
    "start": "105640",
    "end": "108840"
  },
  {
    "text": "here are a few examples the last two",
    "start": "108840",
    "end": "111200"
  },
  {
    "text": "examples where and map illustrate",
    "start": "111200",
    "end": "113680"
  },
  {
    "text": "iterable lazy application of chaining",
    "start": "113680",
    "end": "116320"
  },
  {
    "text": "for example in the last example map",
    "start": "116320",
    "end": "118479"
  },
  {
    "text": "returns a new iterable without actually",
    "start": "118479",
    "end": "120960"
  },
  {
    "text": "running the mapping operation this means",
    "start": "120960",
    "end": "123719"
  },
  {
    "text": "the actual doubling operation doesn't",
    "start": "123719",
    "end": "125560"
  },
  {
    "text": "take effect until two list is called",
    "start": "125560",
    "end": "127719"
  },
  {
    "text": "which actually performs the iteration",
    "start": "127719",
    "end": "129280"
  },
  {
    "text": "and Stuffs the results in a list there",
    "start": "129280",
    "end": "131480"
  },
  {
    "text": "are many more methods on iterable and I",
    "start": "131480",
    "end": "133520"
  },
  {
    "text": "encourage you to check out the docs to",
    "start": "133520",
    "end": "135040"
  },
  {
    "text": "learn more let's move on to some",
    "start": "135040",
    "end": "136720"
  },
  {
    "text": "collection classes while the iterable",
    "start": "136720",
    "end": "138879"
  },
  {
    "text": "interface defines readon behaviors on a",
    "start": "138879",
    "end": "140879"
  },
  {
    "text": "group of items The Collection class",
    "start": "140879",
    "end": "142440"
  },
  {
    "text": "extends iterable with the ability to add",
    "start": "142440",
    "end": "144480"
  },
  {
    "text": "and remove items list set and queue are",
    "start": "144480",
    "end": "147120"
  },
  {
    "text": "all collections so let's start with list",
    "start": "147120",
    "end": "149400"
  },
  {
    "text": "the list class is an ordered collection",
    "start": "149400",
    "end": "151080"
  },
  {
    "text": "of items with zerob based index",
    "start": "151080",
    "end": "152920"
  },
  {
    "text": "retrieval in other words if you're",
    "start": "152920",
    "end": "154560"
  },
  {
    "text": "looking for arrays they are Mas rating",
    "start": "154560",
    "end": "156400"
  },
  {
    "text": "as lists here is some example code that",
    "start": "156400",
    "end": "159040"
  },
  {
    "text": "uses list note that you can declare list",
    "start": "159040",
    "end": "161360"
  },
  {
    "text": "in two ways using the Constructor from",
    "start": "161360",
    "end": "163239"
  },
  {
    "text": "the list class or using the square",
    "start": "163239",
    "end": "164920"
  },
  {
    "text": "bracket literal remember that lists",
    "start": "164920",
    "end": "167159"
  },
  {
    "text": "Implement collection which extend",
    "start": "167159",
    "end": "168760"
  },
  {
    "text": "iterable so a list can be filtered",
    "start": "168760",
    "end": "170400"
  },
  {
    "text": "transformed and more you can see here an",
    "start": "170400",
    "end": "172680"
  },
  {
    "text": "example of filtering the list for only",
    "start": "172680",
    "end": "174400"
  },
  {
    "text": "items that start with the letter A it's",
    "start": "174400",
    "end": "177280"
  },
  {
    "text": "important to know that accessing an",
    "start": "177280",
    "end": "178760"
  },
  {
    "text": "index that is out of bound sounds throws",
    "start": "178760",
    "end": "180560"
  },
  {
    "text": "a range error Dart doesn't keep on",
    "start": "180560",
    "end": "182599"
  },
  {
    "text": "trucking it tells you right away that",
    "start": "182599",
    "end": "184480"
  },
  {
    "text": "something is wrong keeping with an",
    "start": "184480",
    "end": "186680"
  },
  {
    "text": "ordered theme let's now look at Q's like",
    "start": "186680",
    "end": "189120"
  },
  {
    "text": "list a q is an ordered collection unlike",
    "start": "189120",
    "end": "191720"
  },
  {
    "text": "list however a q is optimized for",
    "start": "191720",
    "end": "194080"
  },
  {
    "text": "addition or removal from either end of",
    "start": "194080",
    "end": "196080"
  },
  {
    "text": "the collection the trade-off is that",
    "start": "196080",
    "end": "197879"
  },
  {
    "text": "there is no index access to elements in",
    "start": "197879",
    "end": "199720"
  },
  {
    "text": "a queue use a queue if you need to",
    "start": "199720",
    "end": "202159"
  },
  {
    "text": "efficiently add or remove items from the",
    "start": "202159",
    "end": "203959"
  },
  {
    "text": "head or tail of a collection a Q and",
    "start": "203959",
    "end": "206879"
  },
  {
    "text": "dark can be treated like a first in",
    "start": "206879",
    "end": "208400"
  },
  {
    "text": "first out or last in first out data",
    "start": "208400",
    "end": "210920"
  },
  {
    "text": "structure here is some example code that",
    "start": "210920",
    "end": "213040"
  },
  {
    "text": "uses a que notice the add first remove",
    "start": "213040",
    "end": "215879"
  },
  {
    "text": "first and add last remove last methods a",
    "start": "215879",
    "end": "219000"
  },
  {
    "text": "que is efficient because it doesn't",
    "start": "219000",
    "end": "220319"
  },
  {
    "text": "allocate a whole new data structure when",
    "start": "220319",
    "end": "222040"
  },
  {
    "text": "new items are added or removed from the",
    "start": "222040",
    "end": "223799"
  },
  {
    "text": "head or tail sometimes you don't care",
    "start": "223799",
    "end": "226280"
  },
  {
    "text": "about maintaining order but you do care",
    "start": "226280",
    "end": "228040"
  },
  {
    "text": "about ensuring there's one and only one",
    "start": "228040",
    "end": "229920"
  },
  {
    "text": "item in a collection in contrast to",
    "start": "229920",
    "end": "232120"
  },
  {
    "text": "lists and cues which are ordered and",
    "start": "232120",
    "end": "233920"
  },
  {
    "text": "allow duplicate items a set is unordered",
    "start": "233920",
    "end": "236680"
  },
  {
    "text": "and does not allow any duplicate items",
    "start": "236680",
    "end": "239280"
  },
  {
    "text": "here's some example code that uses a set",
    "start": "239280",
    "end": "241480"
  },
  {
    "text": "notice how the length of the set is two",
    "start": "241480",
    "end": "243720"
  },
  {
    "text": "even though I called add three times",
    "start": "243720",
    "end": "246280"
  },
  {
    "text": "also notied the intersection method",
    "start": "246280",
    "end": "247920"
  },
  {
    "text": "which returns a new set containing only",
    "start": "247920",
    "end": "250040"
  },
  {
    "text": "the items that are found in this set and",
    "start": "250040",
    "end": "252000"
  },
  {
    "text": "another",
    "start": "252000",
    "end": "252959"
  },
  {
    "text": "collection finally let's look at the map",
    "start": "252959",
    "end": "255439"
  },
  {
    "text": "class Maps known as dictionaries or hash",
    "start": "255439",
    "end": "257959"
  },
  {
    "text": "maps in other languages contain key",
    "start": "257959",
    "end": "259959"
  },
  {
    "text": "value pairs Maps associate keys to",
    "start": "259959",
    "end": "262440"
  },
  {
    "text": "objects for easy retrieval they're great",
    "start": "262440",
    "end": "264320"
  },
  {
    "text": "for fast access to arbitrary objects if",
    "start": "264320",
    "end": "266440"
  },
  {
    "text": "you know the key keys must be unique and",
    "start": "266440",
    "end": "269039"
  },
  {
    "text": "cannot be null",
    "start": "269039",
    "end": "271039"
  },
  {
    "text": "here's some example code that uses map",
    "start": "271039",
    "end": "273160"
  },
  {
    "text": "you can see how Maps work great with",
    "start": "273160",
    "end": "274639"
  },
  {
    "text": "their literal values don't be fooled",
    "start": "274639",
    "end": "276600"
  },
  {
    "text": "though Maps aren't like JavaScript",
    "start": "276600",
    "end": "278199"
  },
  {
    "text": "objects in Dart only objects that",
    "start": "278199",
    "end": "280080"
  },
  {
    "text": "implement the map interface can be",
    "start": "280080",
    "end": "281639"
  },
  {
    "text": "treated as a map of particular notice",
    "start": "281639",
    "end": "284120"
  },
  {
    "text": "put if absent which will call a function",
    "start": "284120",
    "end": "286280"
  },
  {
    "text": "and insert its result only if the key",
    "start": "286280",
    "end": "288160"
  },
  {
    "text": "does not exist in the map D ships with",
    "start": "288160",
    "end": "291400"
  },
  {
    "text": "four main collection types lists cues",
    "start": "291400",
    "end": "293919"
  },
  {
    "text": "sets and Maps as honorable mentioned",
    "start": "293919",
    "end": "296520"
  },
  {
    "text": "each has their own trade-offs and",
    "start": "296520",
    "end": "297919"
  },
  {
    "text": "optimizations to help you keep them",
    "start": "297919",
    "end": "299759"
  },
  {
    "text": "straight here's a handy way to look at",
    "start": "299759",
    "end": "301840"
  },
  {
    "text": "them if you need key value pairs there's",
    "start": "301840",
    "end": "304800"
  },
  {
    "text": "one option map if you need to contain",
    "start": "304800",
    "end": "307199"
  },
  {
    "text": "unique items set is your only option",
    "start": "307199",
    "end": "309960"
  },
  {
    "text": "this leaves two ordered collections list",
    "start": "309960",
    "end": "312039"
  },
  {
    "text": "and Q lists are great for arbitrary",
    "start": "312039",
    "end": "314199"
  },
  {
    "text": "access to items anywhere in the",
    "start": "314199",
    "end": "315479"
  },
  {
    "text": "collection but changing their size can",
    "start": "315479",
    "end": "317320"
  },
  {
    "text": "be costly cues are great if you only",
    "start": "317320",
    "end": "319840"
  },
  {
    "text": "operate on the head or tail of the",
    "start": "319840",
    "end": "321280"
  },
  {
    "text": "collection but there's no efficient way",
    "start": "321280",
    "end": "322840"
  },
  {
    "text": "to access a specific element in the",
    "start": "322840",
    "end": "324560"
  },
  {
    "text": "middle of the",
    "start": "324560",
    "end": "325800"
  },
  {
    "text": "collection lists sets and cues are",
    "start": "325800",
    "end": "328800"
  },
  {
    "text": "iterable which means you can filter",
    "start": "328800",
    "end": "330520"
  },
  {
    "text": "transform search and chain them you can",
    "start": "330520",
    "end": "333120"
  },
  {
    "text": "find these collection classes and more",
    "start": "333120",
    "end": "334759"
  },
  {
    "text": "in the dark core libraries which are",
    "start": "334759",
    "end": "336400"
  },
  {
    "text": "bundled in Every dart SDK and editor",
    "start": "336400",
    "end": "338560"
  },
  {
    "text": "release there's a lot more functionality",
    "start": "338560",
    "end": "340759"
  },
  {
    "text": "than these classes we barely scratch the",
    "start": "340759",
    "end": "342639"
  },
  {
    "text": "surface I encourage you to dig into the",
    "start": "342639",
    "end": "344560"
  },
  {
    "text": "API docs to learn more thanks for",
    "start": "344560",
    "end": "347199"
  },
  {
    "text": "watching my name is Seth lad and as we",
    "start": "347199",
    "end": "348639"
  },
  {
    "text": "say here on Dart tips stay sharp click",
    "start": "348639",
    "end": "351039"
  },
  {
    "text": "here to subscribe to our channel for",
    "start": "351039",
    "end": "352360"
  },
  {
    "text": "more episodes of Dart tips we appreciate",
    "start": "352360",
    "end": "354360"
  },
  {
    "text": "any thoughts you might have for the",
    "start": "354360",
    "end": "355440"
  },
  {
    "text": "series please leave them in the comments",
    "start": "355440",
    "end": "357160"
  },
  {
    "text": "below if you have any additional",
    "start": "357160",
    "end": "358800"
  },
  {
    "text": "questions about Dart please drop by",
    "start": "358800",
    "end": "360440"
  },
  {
    "text": "stack Overflow where Dart experts are",
    "start": "360440",
    "end": "362039"
  },
  {
    "text": "standing by to help you out see you next",
    "start": "362039",
    "end": "363759"
  },
  {
    "text": "time",
    "start": "363759",
    "end": "366400"
  }
]