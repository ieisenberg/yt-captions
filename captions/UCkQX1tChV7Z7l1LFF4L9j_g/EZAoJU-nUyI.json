[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "so welcome everyone welcome back from lunch I hope it was delicious uh my name is Dave",
    "start": "9599",
    "end": "16000"
  },
  {
    "text": "Smith and uh what we're going to talk about here this afternoon is uh mastering the Android Touch system so uh",
    "start": "16000",
    "end": "22960"
  },
  {
    "start": "18000",
    "end": "18000"
  },
  {
    "text": "before we get started just a little bit about myself uh my I said my name is Dave I work for double Encore a company",
    "start": "22960",
    "end": "29640"
  },
  {
    "start": "23000",
    "end": "23000"
  },
  {
    "text": "based out of Denver that does contract Android development um and I primarily focus on ROM customization and uh",
    "start": "29640",
    "end": "37399"
  },
  {
    "text": "Android embedded applications there um and do basically uh application development or customization of the",
    "start": "37399",
    "end": "43840"
  },
  {
    "text": "system images for different clients that we have in that regard uh in a previous life I was an electrical engineer I used",
    "start": "43840",
    "end": "49960"
  },
  {
    "text": "to develop radio links uh for oil and gas monitoring before I got into Mobile uh and I am also the co-author of",
    "start": "49960",
    "end": "56160"
  },
  {
    "text": "Android recipes from apress so uh if I remember correctly aess has a booth in",
    "start": "56160",
    "end": "61280"
  },
  {
    "text": "the exhibit hall so take that to me and what you will they might have copies of my books",
    "start": "61280",
    "end": "66759"
  },
  {
    "text": "there okay so what are we going to talk about today uh what we're going to talk about is we're going to look through",
    "start": "66759",
    "end": "72600"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "sort of the the look at an overview of the Android touch framework so give you",
    "start": "72600",
    "end": "77880"
  },
  {
    "text": "an idea of how touches flow through your applications and how Android handles all of those events um then we'll kind of",
    "start": "77880",
    "end": "84720"
  },
  {
    "text": "look at the apis that are available to you as monitoring and interacting with this process",
    "start": "84720",
    "end": "90520"
  },
  {
    "text": "uh and then ways that you can Implement Custom Touch interaction inside of your apps uh as well as the pieces of the",
    "start": "90520",
    "end": "97040"
  },
  {
    "text": "framework that are available for you to sort of assist you in this",
    "start": "97040",
    "end": "102520"
  },
  {
    "text": "process okay so let's go ahead and start with how Android deals with touch okay",
    "start": "102520",
    "end": "107920"
  },
  {
    "text": "so every event that comes from the touch screen on the device into your",
    "start": "107920",
    "end": "113240"
  },
  {
    "text": "application is wrapped up in one of these motion events now the motion event",
    "start": "113240",
    "end": "118479"
  },
  {
    "text": "uh essentially provides you all the information that you need associated with each event as to what the event",
    "start": "118479",
    "end": "124840"
  },
  {
    "text": "action was uh as well as any additional metadata that may be necessary such as the it touches location the number of",
    "start": "124840",
    "end": "131920"
  },
  {
    "text": "fingers that were on the screen at the time uh you know the the actual event time itself anything that you might need",
    "start": "131920",
    "end": "138480"
  },
  {
    "text": "to process that information and and use that inside of your application now",
    "start": "138480",
    "end": "144400"
  },
  {
    "text": "there's there's a number of primary useful actions and by their name you can probably figure F out what they are but",
    "start": "144400",
    "end": "151239"
  },
  {
    "text": "just to kind of give you a basic idea so there's action down and action up those are the primary actions when the first",
    "start": "151239",
    "end": "158280"
  },
  {
    "text": "pointer or finger comes in contact with the screen and then is released uh action move is an event that is",
    "start": "158280",
    "end": "165000"
  },
  {
    "text": "happening as that pointer is dragging around the screen uh actions pointer",
    "start": "165000",
    "end": "170360"
  },
  {
    "text": "down and up will be seen for secondary or additional fingers or pointers as",
    "start": "170360",
    "end": "176280"
  },
  {
    "text": "they come in contact with the screen so these are what you will see and what you'll need to look for when you're dealing with",
    "start": "176280",
    "end": "181920"
  },
  {
    "text": "multi-touch uh and then finally action cancel which will come up in a couple of special cases that we'll see as we're",
    "start": "181920",
    "end": "188319"
  },
  {
    "text": "moving forward uh that has to do primarily with when events are initially handled by one View and then that is",
    "start": "188319",
    "end": "194799"
  },
  {
    "text": "transferred over to another uh the primary thing to keep in mind and you'll see this theme sort of",
    "start": "194799",
    "end": "201879"
  },
  {
    "text": "come in and out is that Android really defines a single gesture as all the",
    "start": "201879",
    "end": "206959"
  },
  {
    "text": "events that happen between an action down event and an action up so the action down is sort of the",
    "start": "206959",
    "end": "213159"
  },
  {
    "text": "initialization of any new gesture that you would be handling in your application and a basically the state",
    "start": "213159",
    "end": "220879"
  },
  {
    "text": "that is maintained through that gesture through all the different move events and things like that uh is then",
    "start": "220879",
    "end": "226319"
  },
  {
    "text": "terminated on action up and that sort of resets the whole game and starts over so you'll see that theme kind of come",
    "start": "226319",
    "end": "232360"
  },
  {
    "text": "through a couple different times all right so how do these things",
    "start": "232360",
    "end": "237640"
  },
  {
    "text": "actually flow through your application so for every event that is generated by the hardware and the underlying",
    "start": "237640",
    "end": "244319"
  },
  {
    "text": "framework uh they're first dispatched to your application's activity so whatever",
    "start": "244319",
    "end": "249599"
  },
  {
    "text": "the foreground activity is or the top level uh inside of your application that",
    "start": "249599",
    "end": "254720"
  },
  {
    "text": "activity will receive the touch event before any other component inside of your application okay and it will do",
    "start": "254720",
    "end": "260799"
  },
  {
    "text": "that by the framework calling the dispatch touch event method on that activity so I I first point this out to",
    "start": "260799",
    "end": "268479"
  },
  {
    "text": "say that if for whatever reason reason in your application you need to gain knowledge of or get get understanding of",
    "start": "268479",
    "end": "276039"
  },
  {
    "text": "touch events before anything else in your application does the very first opportunity you have at all to see a",
    "start": "276039",
    "end": "283160"
  },
  {
    "text": "touch event is the dispatch touch event method on activity so you can override that method and inspect those motion",
    "start": "283160",
    "end": "289880"
  },
  {
    "text": "events there now I wouldn't necessarily recommend doing a whole lot with them other than just monitoring them because",
    "start": "289880",
    "end": "295759"
  },
  {
    "text": "they have a long way to go still through the framework but this is the first method that will ever be called and then",
    "start": "295759",
    "end": "301479"
  },
  {
    "text": "at that point these events are going to Traverse their way down from the activity down through your view",
    "start": "301479",
    "end": "306800"
  },
  {
    "text": "hierarchy from the top down so they're going to start at the activity in the window level and it will be first",
    "start": "306800",
    "end": "312440"
  },
  {
    "text": "delivered to the root view of whatever your content View group is and then that view group's job is to deliver it to its",
    "start": "312440",
    "end": "319360"
  },
  {
    "text": "child views and if those are view groups to their child views and all the way down the tree till we get to the bottom",
    "start": "319360",
    "end": "325160"
  },
  {
    "text": "and then if necessary Traverse those back up okay so the way that this works",
    "start": "325160",
    "end": "331080"
  },
  {
    "text": "is the events will flow through your application until such point that one of",
    "start": "331080",
    "end": "336160"
  },
  {
    "text": "the views declares that it is interested in that event and wants to know more about the rest of the gesture okay now",
    "start": "336160",
    "end": "342919"
  },
  {
    "text": "the way the framework does this is that the ontouch event methods that each view or View group has returns a Boolean",
    "start": "342919",
    "end": "349400"
  },
  {
    "text": "value and so as a as an implementor of a custom view or you know some other piece",
    "start": "349400",
    "end": "355479"
  },
  {
    "text": "of the view hierarchy your application can return true from this method to",
    "start": "355479",
    "end": "361000"
  },
  {
    "text": "declare interest in that particular gesture and at that point the framework has found a view that it is that is",
    "start": "361000",
    "end": "367160"
  },
  {
    "text": "interested in the touch and it will stop that responder chain but essentially if you if a touch event manages to go all",
    "start": "367160",
    "end": "374120"
  },
  {
    "text": "the way down the view hierarchy and not find a single view that is interested in that touch it will start to walk back up",
    "start": "374120",
    "end": "380720"
  },
  {
    "text": "the hierarchy until it gets all the way back to the activity okay now that may",
    "start": "380720",
    "end": "385840"
  },
  {
    "text": "make a little more sense when you see sort of a visualization of it here a little bit in an example but the kind of",
    "start": "385840",
    "end": "391440"
  },
  {
    "text": "core the core thing to come away with that is if you are trying to do any",
    "start": "391440",
    "end": "396599"
  },
  {
    "text": "Custom Touch handling the action down event is something that your view or",
    "start": "396599",
    "end": "401960"
  },
  {
    "text": "your View group needs to return true for if you are interested in that event or",
    "start": "401960",
    "end": "407880"
  },
  {
    "text": "any event after that fact because if you don't declare interest in action down there's a very good chance you may not",
    "start": "407880",
    "end": "414479"
  },
  {
    "text": "see another touch event at all at that point for efficiency reasons they don't",
    "start": "414479",
    "end": "419840"
  },
  {
    "text": "uh once a particular view has declared interest and has returned true that is",
    "start": "419840",
    "end": "425599"
  },
  {
    "text": "the effective destination for all the other emotion events for the remainder of that gesture okay and again that",
    "start": "425599",
    "end": "432919"
  },
  {
    "text": "might make more sense when you actually see it in visualization um but as I mentioned the",
    "start": "432919",
    "end": "438520"
  },
  {
    "start": "437000",
    "end": "437000"
  },
  {
    "text": "the way that this hierarchy basically works is that they will Traverse down through the views and view groups uh by",
    "start": "438520",
    "end": "444639"
  },
  {
    "text": "individually calling the dispatch methods of each so the dis The View group will dispatch it to the The View",
    "start": "444639",
    "end": "450199"
  },
  {
    "text": "and so on and so forth uh and then as they walk back up it's the ontouch event",
    "start": "450199",
    "end": "455800"
  },
  {
    "text": "methods that get called so effectively the the dispatch methods go on the way down and on touch on the way back up",
    "start": "455800",
    "end": "463639"
  },
  {
    "text": "so what some of you may have done this before and I know I'd made this mistake before that there is an ontouch event",
    "start": "463639",
    "end": "470080"
  },
  {
    "text": "method on activity and thinking well activity is the top level value on touch event is probably the place where I want",
    "start": "470080",
    "end": "476520"
  },
  {
    "text": "to monitor for touches if I want to see them first it turns out the exact opposite is true if you monitor for",
    "start": "476520",
    "end": "483159"
  },
  {
    "text": "touch events in the activities on touch event method that is the last place that a touch event will end up and in many",
    "start": "483159",
    "end": "489840"
  },
  {
    "text": "cases it may not show up there at all because if a touch event is consumed by",
    "start": "489840",
    "end": "495000"
  },
  {
    "text": "some view lower down in the tree that's where it stops so anything after that on the way back up won't be called at all",
    "start": "495000",
    "end": "502599"
  },
  {
    "text": "okay just something to keep in mind uh additionally we do have the ability to either monitor or interact with touch",
    "start": "502599",
    "end": "509720"
  },
  {
    "text": "events without having to subass views or view groups by way of what's known as an ontouch listener uh an ontouch listeners",
    "start": "509720",
    "end": "517080"
  },
  {
    "text": "method behaves very similar to the ontouch event of a view in that you still have the ability to return true",
    "start": "517080",
    "end": "523399"
  },
  {
    "text": "from that method to consume those events and you'll see how we can use that a little bit to our advantage in certain",
    "start": "523399",
    "end": "528760"
  },
  {
    "text": "use cases okay so we'll just kind of walk through the specifics of what's really",
    "start": "528760",
    "end": "535000"
  },
  {
    "text": "happening so as I mentioned we start with activity so when the dispatch touch event method is is called on activity",
    "start": "535000",
    "end": "540600"
  },
  {
    "text": "which is always the first thing to happen the activity dispatches that event to the root view which in probably",
    "start": "540600",
    "end": "547600"
  },
  {
    "text": "almost all cases is actually a View group or some sort of a layout so the job of uh the activity is to call the",
    "start": "547600",
    "end": "555440"
  },
  {
    "text": "dispatch touch event method of that View group and then the view groups will call the dispatch touch event method of their",
    "start": "555440",
    "end": "561839"
  },
  {
    "text": "children but we'll look at that there in just a second and then on touch event on the activity will be the end of that",
    "start": "561839",
    "end": "567800"
  },
  {
    "text": "chain if there are no other views throughout this entire process that say they want that event okay now the view",
    "start": "567800",
    "end": "575519"
  },
  {
    "text": "case is a little is a little bit simpler and certainly simpler than View group uh the dispatch touch event method inside",
    "start": "575519",
    "end": "581760"
  },
  {
    "text": "of just a regular old view uh really only has two jobs the first thing that will happen is it will check to see",
    "start": "581760",
    "end": "588079"
  },
  {
    "text": "whether or not a touch listener has been registered on that view and if it has it will check with the listener first to",
    "start": "588079",
    "end": "594320"
  },
  {
    "text": "see if it wants to consume that event if the touch listener does not consume the event or if there isn't one attached",
    "start": "594320",
    "end": "601680"
  },
  {
    "text": "then the ontouch event method of that view gets called and if it doesn't return true there it's going to pass it",
    "start": "601680",
    "end": "607640"
  },
  {
    "text": "back up the hierarchy okay so there's really only these two places on a traditional view view group is a little",
    "start": "607640",
    "end": "614240"
  },
  {
    "text": "bit more complex for a couple reasons first it has child views to manage so it's responsible for actually going",
    "start": "614240",
    "end": "621519"
  },
  {
    "text": "through and iterating through its child views to determine which one of those views may possibly want this event",
    "start": "621519",
    "end": "627920"
  },
  {
    "text": "that's all actually managed inside of View group if you were to look at the source code for View group you would see it doing this inside of its dispatch",
    "start": "627920",
    "end": "633880"
  },
  {
    "text": "touch event method but effectively what it's doing is evaluating based on the touch location which child views",
    "start": "633880",
    "end": "641360"
  },
  {
    "text": "actually represent that location so what which child views have their bounds inside this touch so that might be",
    "start": "641360",
    "end": "648320"
  },
  {
    "text": "considered relevant to that view and if there are more than one for instance if they're you know overlapping at all or",
    "start": "648320",
    "end": "654399"
  },
  {
    "text": "something like that it will iterate through those children in reverse order so basically in the the reverse order",
    "start": "654399",
    "end": "660600"
  },
  {
    "text": "that they were added to the View group they will be uh given the opportunity to process that event by dispatching it to",
    "start": "660600",
    "end": "667279"
  },
  {
    "text": "First this child view and then to the next child view assuming the first one didn't consume the event okay so this is",
    "start": "667279",
    "end": "673639"
  },
  {
    "text": "all happening inside of The View group additionally view groups have the ability to uh intercept or steal touch",
    "start": "673639",
    "end": "680320"
  },
  {
    "text": "events from their children so there's also this secondary method um called on",
    "start": "680320",
    "end": "685639"
  },
  {
    "text": "intercept touch event that is constantly monitoring all of these events as they're flowing through the View group",
    "start": "685639",
    "end": "691040"
  },
  {
    "text": "as well for the purpose is that at any given time based on what the gesture becomes The View group may want to stop",
    "start": "691040",
    "end": "698120"
  },
  {
    "text": "delivering those events to whatever child view was originally consuming them and start process them by itself the",
    "start": "698120",
    "end": "704959"
  },
  {
    "text": "primary use case for this or that the one you're probably all familiar with is scrolling so if for instance a scroll",
    "start": "704959",
    "end": "710920"
  },
  {
    "text": "view may have several child views inside of it that need to be interactive you know if I have buttons inside my scroll",
    "start": "710920",
    "end": "716839"
  },
  {
    "text": "view I need to be able to tap those and actually register those click events on the child views but as soon as the",
    "start": "716839",
    "end": "722320"
  },
  {
    "text": "finger starts moving in a scrolling motion it's the scroll views job to now process those touch events so that it",
    "start": "722320",
    "end": "727720"
  },
  {
    "text": "can scroll the content and the way that it does that is using this intercept mechanism so effectively The View group",
    "start": "727720",
    "end": "734320"
  },
  {
    "text": "is watching all of those touches even as they're being delivered to the different children but once that gesture turns",
    "start": "734320",
    "end": "740320"
  },
  {
    "text": "into a drag it's going to trigger an intercept and start processing all of those directly itself and so as a as a",
    "start": "740320",
    "end": "747880"
  },
  {
    "text": "developer you can sort of work with the same process by again monitoring the events in on intercept and as soon as",
    "start": "747880",
    "end": "754800"
  },
  {
    "text": "you return true from that start processing the events yourself in your layout or whatever custom layout You're",
    "start": "754800",
    "end": "760760"
  },
  {
    "text": "Building as opposed to passing them down to the Views okay now 90% of what we're",
    "start": "760760",
    "end": "766399"
  },
  {
    "text": "talking about is just what happens in the framework this is not something that you have to necessarily consistently",
    "start": "766399",
    "end": "772160"
  },
  {
    "text": "manage yourself just because you create a new View group you just have to be mindful of how this works because there",
    "start": "772160",
    "end": "778199"
  },
  {
    "text": "are things you can do to screw this up if you start consuming events for reasons that you maybe don't need them",
    "start": "778199",
    "end": "784959"
  },
  {
    "text": "okay now there is this sort of additional flag that we can use on a View group to interrupt this process so",
    "start": "784959",
    "end": "793279"
  },
  {
    "text": "in general the touch flow is such that parent views are responsible for monitoring and dispatching the views to",
    "start": "793279",
    "end": "799519"
  },
  {
    "text": "their CH child views and at the same time determining at any given point if",
    "start": "799519",
    "end": "804560"
  },
  {
    "text": "that that uh gesture is more interesting to the parent view and take over control",
    "start": "804560",
    "end": "809720"
  },
  {
    "text": "of it there are possibly cases where the child view needs to ensure that the",
    "start": "809720",
    "end": "815720"
  },
  {
    "text": "parent view either temporarily or permanently is not able to intercept touch okay now in order in order to do",
    "start": "815720",
    "end": "824000"
  },
  {
    "text": "that we have this mouthful method down here called request disallow touch",
    "start": "824000",
    "end": "829959"
  },
  {
    "text": "intercept so is this what we're looking at right there they should be they should be on",
    "start": "829959",
    "end": "836839"
  },
  {
    "text": "the slide site yes absolutely if not I can make sure afterwards that they're posted so request disallow touch",
    "start": "836839",
    "end": "843920"
  },
  {
    "text": "intercept is a method that you call on that parent view and basically just has a flag that you pass through and that",
    "start": "843920",
    "end": "850639"
  },
  {
    "text": "effectively blocks The View group from being able to intercept that gesture",
    "start": "850639",
    "end": "855880"
  },
  {
    "text": "okay so for whatever reason in that scrolling example you had some custom view that also needed to process sort of",
    "start": "855880",
    "end": "862160"
  },
  {
    "text": "a drag event but it was inside of that scrolling container then you may temporarily want to deal with uh that",
    "start": "862160",
    "end": "869519"
  },
  {
    "text": "gesture and not allow the scroll view to intercept so you would set this flag for a period um and then clear it again now",
    "start": "869519",
    "end": "876480"
  },
  {
    "text": "the thing to realize about this flag is by default it's only set for the current gesture so if I if I call request",
    "start": "876480",
    "end": "883639"
  },
  {
    "text": "disallow touch intercept on my parent uh as I'm moving my finger around when the",
    "start": "883639",
    "end": "888759"
  },
  {
    "text": "action up is fired and a new action down comes in it's a new gesture and that flag is autoc cleared anyway so if",
    "start": "888759",
    "end": "895680"
  },
  {
    "text": "you're if you're needing to do this you're having to do it on a gesture by gesture basis it's not just some Global flag you can say don't ever inter my",
    "start": "895680",
    "end": "902079"
  },
  {
    "text": "touches and expect it to be that way the entire time okay and I have an example of this where you can kind of try to see",
    "start": "902079",
    "end": "908000"
  },
  {
    "text": "where it's it's useful uh in general this is probably something you want to use with care because it starts to sort",
    "start": "908000",
    "end": "914880"
  },
  {
    "text": "of it starts to turn the tables and have the child views start to control what the parent does when the design of the",
    "start": "914880",
    "end": "920880"
  },
  {
    "text": "framework is really whenever possible to force the parent views to control and manage what's going down to the children",
    "start": "920880",
    "end": "927320"
  },
  {
    "text": "okay just keep that in mind all right so let's look at a uh a",
    "start": "927320",
    "end": "933199"
  },
  {
    "start": "928000",
    "end": "928000"
  },
  {
    "text": "slightly more visual example of this which might make this a little bit more clear than just seeing it all in",
    "start": "933199",
    "end": "938480"
  },
  {
    "text": "words so the first example that I have just a very simple activity with a frame",
    "start": "938480",
    "end": "943720"
  },
  {
    "text": "layout inside of it and just a plain old ignorant view so you know this view is not clickable focusable anything like",
    "start": "943720",
    "end": "950519"
  },
  {
    "text": "that it's just a view has a background on it so when the user comes in if they were to touch their finger down on that",
    "start": "950519",
    "end": "955920"
  },
  {
    "text": "view this is essentially the chain of calls that you would see happen Okay so",
    "start": "955920",
    "end": "961199"
  },
  {
    "text": "we would start at the activity level over here and then that would be",
    "start": "961199",
    "end": "967120"
  },
  {
    "text": "dispatched down to the frame layout by calling its dispatch touch event method and then finally down to the view now",
    "start": "967120",
    "end": "973839"
  },
  {
    "text": "this view but inherently cares nothing about touch so by default its ontouch",
    "start": "973839",
    "end": "979000"
  },
  {
    "text": "event is going to return false and so that will get chained back up to the",
    "start": "979000",
    "end": "984040"
  },
  {
    "text": "frame layout which will then gets its ontouch event method called and again it doesn't care so all finally we end up",
    "start": "984040",
    "end": "991839"
  },
  {
    "text": "back with the activities on touch event method okay so with if a if a finger",
    "start": "991839",
    "end": "997440"
  },
  {
    "text": "comes down and no views are interested in this this is one of those cases where you actually would see the event in on",
    "start": "997440",
    "end": "1003839"
  },
  {
    "text": "touch event of the activity but you might unknowingly think that that meant you saw it their first when actually you",
    "start": "1003839",
    "end": "1009040"
  },
  {
    "text": "saw it their last okay then when they decide to lift their",
    "start": "1009040",
    "end": "1015680"
  },
  {
    "text": "finger though something quite different happens again because because the none of those views in the hierarchy tried to",
    "start": "1015680",
    "end": "1022120"
  },
  {
    "text": "consume action down the framework's going to just be a little bit more efficient and say okay none of you care",
    "start": "1022120",
    "end": "1028000"
  },
  {
    "text": "about these events I'm not going to continue to deliver them to you so all subsequent move events and the the",
    "start": "1028000",
    "end": "1033520"
  },
  {
    "text": "terminating up event of that gesture will simply go from the activities dispatch directly into activity on Touch",
    "start": "1033520",
    "end": "1040038"
  },
  {
    "text": "won't pass through any of the other views okayed by The",
    "start": "1040039",
    "end": "1046640"
  },
  {
    "text": "View correct and you'll see that in the next example so in this example I've changed it just a little bit slightly to",
    "start": "1046640",
    "end": "1052880"
  },
  {
    "start": "1049000",
    "end": "1049000"
  },
  {
    "text": "use one of these very very old Froyo looking buttons so in this case if that same",
    "start": "1052880",
    "end": "1058799"
  },
  {
    "text": "finger comes in and touches a button which is by default clickable and focusable and is going to return true",
    "start": "1058799",
    "end": "1065640"
  },
  {
    "text": "from its on touch event method then the touch flow of the initial down looks very different it still is going to go",
    "start": "1065640",
    "end": "1072440"
  },
  {
    "text": "through the activity View group and view dispatch chain but the view is going to return true from ontouch so so the",
    "start": "1072440",
    "end": "1079000"
  },
  {
    "text": "ontouch event method of the frame layout and subsequently the one on activity will never be called okay so this is",
    "start": "1079000",
    "end": "1085679"
  },
  {
    "text": "where I see a source of a lot of questions on stack Overflow where people start looking it on the untouch event in",
    "start": "1085679",
    "end": "1092159"
  },
  {
    "text": "activity and saying all my touch events aren't here I don't know where they're going and it turns out it's because the ones that are consumed by other views",
    "start": "1092159",
    "end": "1099039"
  },
  {
    "text": "will never show up there okay question what if you",
    "start": "1099039",
    "end": "1105679"
  },
  {
    "text": "if you if you do set a click listener or a touch listener",
    "start": "1116280",
    "end": "1121440"
  },
  {
    "text": "and then",
    "start": "1139039",
    "end": "1142120"
  },
  {
    "text": "as the the remaining events in that gesture yes so all the moves and UPS the",
    "start": "1144520",
    "end": "1149919"
  },
  {
    "text": "next down starts all over again so that's that's that bounding of the",
    "start": "1149919",
    "end": "1155039"
  },
  {
    "text": "gesture that I'm talking about it's really important to say that everything with down starts over and that's why Down's the most important Gest right",
    "start": "1155039",
    "end": "1163480"
  },
  {
    "text": "right that's correct okay so then in this case when you move",
    "start": "1163480",
    "end": "1168679"
  },
  {
    "text": "move your finger around on the button and then lift it all of those events follow the same path okay so all those",
    "start": "1168679",
    "end": "1174840"
  },
  {
    "text": "other events from move to up to all that you know you stick multiple other fingers down whatever the case is um",
    "start": "1174840",
    "end": "1180360"
  },
  {
    "text": "activity View group and view that goes all the way back down to that button and stops there yes The Intercept still",
    "start": "1180360",
    "end": "1186159"
  },
  {
    "text": "still gets CL yes so I'm not showing that here but on the frame layout side on intercept is receiving these they're",
    "start": "1186159",
    "end": "1193720"
  },
  {
    "text": "passing through there as well it from the the tou from the correct so you're",
    "start": "1193720",
    "end": "1198880"
  },
  {
    "text": "really good at showing my next example before I get there because the next one is if I modify this to now have a scroll",
    "start": "1198880",
    "end": "1205000"
  },
  {
    "start": "1200000",
    "end": "1200000"
  },
  {
    "text": "view instead of a frame layout okay so in this case we're going to have the same gesture where that finger comes in",
    "start": "1205000",
    "end": "1211840"
  },
  {
    "text": "and drops down so this looks the same as the button so the the initial touch is",
    "start": "1211840",
    "end": "1217000"
  },
  {
    "text": "going to come down to the button button's going to consume it and it's going to stop there but now when the",
    "start": "1217000",
    "end": "1222679"
  },
  {
    "text": "finger moves the button around as scrolling inside of the container and then lifts It Up The View group which is",
    "start": "1222679",
    "end": "1229280"
  },
  {
    "text": "the scroll view as soon as that gesture looks like a scroll and we'll talk about how it does that um it's at that exact",
    "start": "1229280",
    "end": "1236760"
  },
  {
    "text": "point the on intercept touch event method of the scroll view returns true and as soon as they return true from",
    "start": "1236760",
    "end": "1243280"
  },
  {
    "text": "that method this dispatch chain has changed completely and now all of these pieces go straight from the dispatch",
    "start": "1243280",
    "end": "1250600"
  },
  {
    "text": "method of scroll view into the on touch event method of scroll view they don't go anywhere near the button they just",
    "start": "1250600",
    "end": "1256600"
  },
  {
    "text": "jump right over that piece yes um the events of the the parameters of the event and I'm",
    "start": "1256600",
    "end": "1265120"
  },
  {
    "text": "talking about the XY position it happen is translated for every view to it",
    "start": "1265120",
    "end": "1270880"
  },
  {
    "text": "relative coordinates yes so the job of the View group is always to translate the XY to be relative to the parent and",
    "start": "1270880",
    "end": "1277000"
  },
  {
    "text": "this happens for every for every single one yes that's correct",
    "start": "1277000",
    "end": "1282880"
  },
  {
    "text": "sure so they they still go through the dispatch method of The View group because the view group's job is to",
    "start": "1295760",
    "end": "1301600"
  },
  {
    "text": "dispatch them to the children so what what changes when on intercept returns true is that view group's dispatch just",
    "start": "1301600",
    "end": "1307720"
  },
  {
    "text": "simply delivers it directly to on touch of The View group not to the dispatch of any of the children",
    "start": "1307720",
    "end": "1315158"
  },
  {
    "text": "call the only one that skipped is this function this function is still part of",
    "start": "1332960",
    "end": "1338480"
  },
  {
    "text": "the dispatch chain well so the again we didn't really",
    "start": "1338480",
    "end": "1346159"
  },
  {
    "text": "talk about this but the return value of dispatch is based on the return value of the child right so the return value this",
    "start": "1346159",
    "end": "1353200"
  },
  {
    "text": "all this is all a nested call so you know dispatch calls dispatch calls dispatch and then the return values all",
    "start": "1353200",
    "end": "1358360"
  },
  {
    "text": "bubble back up so what dispatch returns based on what that method is calling",
    "start": "1358360",
    "end": "1363640"
  },
  {
    "text": "inside so in in the first case the return value of View group dispatch in",
    "start": "1363640",
    "end": "1369919"
  },
  {
    "text": "this case is based on what this views on touch event returned um it the real work",
    "start": "1369919",
    "end": "1376520"
  },
  {
    "text": "of dispatch touch event is to route where the touches should go because dispatch is what's called by the the",
    "start": "1376520",
    "end": "1382039"
  },
  {
    "text": "higher level view like this view calls dispatch on this View and then that method's job is to say okay now that",
    "start": "1382039",
    "end": "1387520"
  },
  {
    "text": "I've got this event where do I put it and once it's been intercepted I hand it directly to my method not to a child",
    "start": "1387520",
    "end": "1393760"
  },
  {
    "text": "that's the difference that make sense okay",
    "start": "1393760",
    "end": "1399640"
  },
  {
    "text": "question coordinates scroll offet no they do not",
    "start": "1399640",
    "end": "1405240"
  },
  {
    "text": "there are separate parameters on scroll or on any View scroll X and scroll y so depending on how you do your scrolling",
    "start": "1405240",
    "end": "1412440"
  },
  {
    "text": "um and we actually have a scrolling example and the way I'll be doing it they modify a scroll X and scroll y",
    "start": "1412440",
    "end": "1418440"
  },
  {
    "text": "parameters separate from the individual XY of the view question",
    "start": "1418440",
    "end": "1425960"
  },
  {
    "text": "you mean you mean like relative to the content yes cont sure so that's the difference in those parameters right so",
    "start": "1445240",
    "end": "1451880"
  },
  {
    "text": "when you the when touch events are received in that container view the XY value is relative to the frame layout",
    "start": "1451880",
    "end": "1458360"
  },
  {
    "text": "itself and in order to offset those for your content you need to uh essentially",
    "start": "1458360",
    "end": "1464480"
  },
  {
    "text": "do do the math of offsetting the scroll X and scroll y but the the part of having those routed to",
    "start": "1464480",
    "end": "1471760"
  },
  {
    "text": "individual child views is done for you so for instance if I have a button and you you'll see it work in an example but",
    "start": "1471760",
    "end": "1478159"
  },
  {
    "text": "if I have a button that's way off screen and I scroll it onto screen I don't have to massage the touch events for them to",
    "start": "1478159",
    "end": "1484000"
  },
  {
    "text": "get to the button the framework does that for me as long as I use their scrolling mechanism okay that might make more",
    "start": "1484000",
    "end": "1490159"
  },
  {
    "text": "sense when you see it yeah so on intercept is only a",
    "start": "1490159",
    "end": "1496840"
  },
  {
    "text": "calleded until it returns true at that point it's never called again that's absolutely",
    "start": "1496840",
    "end": "1502760"
  },
  {
    "text": "true okay let's move on here so the last thing on this slide just real quick the",
    "start": "1502760",
    "end": "1508039"
  },
  {
    "text": "the last piece that happens which is kind of important is that the button",
    "start": "1508039",
    "end": "1513159"
  },
  {
    "text": "receives an action cancel at this point okay now the reason that it's given a cancel is because it was initially",
    "start": "1513159",
    "end": "1519720"
  },
  {
    "text": "handling this gesture as soon as the the button was first touched it received the action down and maybe even a first first",
    "start": "1519720",
    "end": "1526679"
  },
  {
    "text": "couple of those move events but but then all of a sudden that touch was stolen away from it so in order to notify the",
    "start": "1526679",
    "end": "1531880"
  },
  {
    "text": "button that it's not going to be getting any more events in this gesture it's sent an action cancel instead so in many",
    "start": "1531880",
    "end": "1538600"
  },
  {
    "text": "cases cancel and up end up being handled together um at least for the purposes of",
    "start": "1538600",
    "end": "1543799"
  },
  {
    "text": "terminating what you were doing with your gesture detection because they tend to mean almost the same thing to your",
    "start": "1543799",
    "end": "1548960"
  },
  {
    "text": "view is there a question yeah so I guess along those lines then if",
    "start": "1548960",
    "end": "1555360"
  },
  {
    "text": "you basically",
    "start": "1555360",
    "end": "1559360"
  },
  {
    "text": "yes yeah I mean technically I guess you could say down is what really resets it and up in cancel you kind of just look",
    "start": "1561960",
    "end": "1568279"
  },
  {
    "text": "at as cousins of the same event to terminate whatever you're doing in the view",
    "start": "1568279",
    "end": "1574799"
  },
  {
    "text": "okay yeah based on The prevor View child",
    "start": "1574799",
    "end": "1583520"
  },
  {
    "text": "can",
    "start": "1589520",
    "end": "1592520"
  },
  {
    "text": "thisle why does it on touch event in the activity good",
    "start": "1595520",
    "end": "1600640"
  },
  {
    "text": "question uh the reason is and this may not always be true it just using a basic",
    "start": "1600640",
    "end": "1605960"
  },
  {
    "text": "scroll View and a basic button that's what ends up happening because the scroll view is using those events to uh",
    "start": "1605960",
    "end": "1612279"
  },
  {
    "text": "scroll the content around but its on tet event is actually not returning true so",
    "start": "1612279",
    "end": "1617520"
  },
  {
    "text": "they end up still flowing all the way through it's just monitoring and monitoring them and acting on them but it never actually consumes them you",
    "start": "1617520",
    "end": "1624440"
  },
  {
    "text": "could do that I mean you could inside of a custom view consume all those events to keep them from going up but just the",
    "start": "1624440",
    "end": "1630679"
  },
  {
    "text": "way the framework implements it that's not the case okay yes so after The View group decid to",
    "start": "1630679",
    "end": "1638600"
  },
  {
    "text": "intercept the touch can parent decide",
    "start": "1638600",
    "end": "1643960"
  },
  {
    "text": "later can can uh so you're talking about like three levels here so if if the midlevel View group intercepts touch",
    "start": "1645360",
    "end": "1651919"
  },
  {
    "text": "from its child can the parent still intercept from it absolutely same yeah",
    "start": "1651919",
    "end": "1658039"
  },
  {
    "text": "at any time um it's it's a oneshot thing though we'll talk a little bit more about that",
    "start": "1658039",
    "end": "1663600"
  },
  {
    "text": "because it's it's something that a parent can do at any time on a child but once they make that decision they can't go back on it okay and that might make",
    "start": "1663600",
    "end": "1670399"
  },
  {
    "text": "more sense in a second all right so just a couple additional pieces here about doing",
    "start": "1670399",
    "end": "1676919"
  },
  {
    "text": "custom touch handling so if you if you want to handle discrete motion events for all the touch that's going on in",
    "start": "1676919",
    "end": "1683279"
  },
  {
    "text": "these views then there's really kind of two options for you you can either create a subass of a viewer View group",
    "start": "1683279",
    "end": "1688600"
  },
  {
    "text": "so that you can override the ontouch event method or in some cases of a View group on intercept as well or you can",
    "start": "1688600",
    "end": "1696960"
  },
  {
    "text": "simply provide externally an ontouch listener and do some of your touch event handling in there now they're not",
    "start": "1696960",
    "end": "1703159"
  },
  {
    "text": "exactly equivalent but they're equivalent enough that in most cases you can probably do one or the other interchangeably",
    "start": "1703159",
    "end": "1708919"
  },
  {
    "text": "okay um as far as consuming events we've sort of talked about this already but just to kind of hammer it home if you",
    "start": "1708919",
    "end": "1715760"
  },
  {
    "text": "are interested in any action events even if action down isn't explicitly what you",
    "start": "1715760",
    "end": "1721039"
  },
  {
    "text": "care about you do care about action down you want to return true from that event so that subsequent events will be given",
    "start": "1721039",
    "end": "1727360"
  },
  {
    "text": "to your view um right this is this is even true if",
    "start": "1727360",
    "end": "1732679"
  },
  {
    "text": "say you're developing A View group um because if if you're developing A View group that isn't truly interested in the",
    "start": "1732679",
    "end": "1739120"
  },
  {
    "text": "individual touch Events maybe it's doing scrolling or some other type of monitoring you can't rely on one of your",
    "start": "1739120",
    "end": "1745159"
  },
  {
    "text": "child views to consume the the event for you to expect that you'll continue to get the rest of them so like as a View",
    "start": "1745159",
    "end": "1751399"
  },
  {
    "text": "group if you see that event in ontouch it's because no other child views dealt with it and you're probably going to",
    "start": "1751399",
    "end": "1757039"
  },
  {
    "text": "have to at least consume action down or this whole chain is going to be over for you as",
    "start": "1757039",
    "end": "1763519"
  },
  {
    "text": "wellend and you don't",
    "start": "1764919",
    "end": "1770039"
  },
  {
    "text": "no it's going to return false the only ones that will will be things like scroll view or something that has some Behavior where touch is involved but",
    "start": "1774080",
    "end": "1781120"
  },
  {
    "text": "just a general container it's going to return false just like a dumb view",
    "start": "1781120",
    "end": "1787000"
  },
  {
    "text": "okay all right so those pieces are there uh next thing that I want to talk to you about is anybody familiar with the view",
    "start": "1787000",
    "end": "1793120"
  },
  {
    "text": "configuration class whoa nobody",
    "start": "1793120",
    "end": "1799600"
  },
  {
    "text": "okay cool view configuration is your friend when you're doing custom touch handling um view configuration houses a",
    "start": "1799600",
    "end": "1806919"
  },
  {
    "text": "large number and growing of constants that are used by the framework and you should be using in your applications to",
    "start": "1806919",
    "end": "1814000"
  },
  {
    "text": "create a consistent Behavior with handling touch okay most of these have to do with touch there's a couple of",
    "start": "1814000",
    "end": "1820200"
  },
  {
    "text": "them in there that are for drawing and different things but uh for the most part these are touchbased constants so",
    "start": "1820200",
    "end": "1825679"
  },
  {
    "text": "just a couple of the more important ones but this is by no means all of them uh the first one that I want to point out",
    "start": "1825679",
    "end": "1831000"
  },
  {
    "text": "to you is get Scaled touch slop so these are all methods that you call on view configuration your view configuration",
    "start": "1831000",
    "end": "1837559"
  },
  {
    "text": "has a an accessor instance that takes a context and then you can call all these methods from there uh but get scale",
    "start": "1837559",
    "end": "1843279"
  },
  {
    "text": "touch slop is probably one of my favorite names for a method but effectively touchs slop is a defined",
    "start": "1843279",
    "end": "1850600"
  },
  {
    "text": "value that you should compare uh touch events against to make a determination",
    "start": "1850600",
    "end": "1856080"
  },
  {
    "text": "of when the the touch event has gone from a simple tap to a drag okay so this",
    "start": "1856080",
    "end": "1862080"
  },
  {
    "text": "is one of those things where and you can play around with this and there's even an example in here if you want to play around with it on your device but uh if",
    "start": "1862080",
    "end": "1868880"
  },
  {
    "text": "by just in general if you were to log every motion event that went through your view just by putting your finger on",
    "start": "1868880",
    "end": "1875519"
  },
  {
    "text": "the screen and trying to hold it as still as you possibly can you'll notice that even as still as you can be you'll",
    "start": "1875519",
    "end": "1882000"
  },
  {
    "text": "get a ton of movie events coming through because your finger is a very blunt object compared to trying to turn that",
    "start": "1882000",
    "end": "1888519"
  },
  {
    "text": "into a single Pixel location on the screen so even just some variation in it",
    "start": "1888519",
    "end": "1893880"
  },
  {
    "text": "trying to figure out where your finger actually is the move events will jump around like crazy just from the the",
    "start": "1893880",
    "end": "1899320"
  },
  {
    "text": "slightest Twitches in your finger okay so the the touch slop is used and it's used internally this is how they",
    "start": "1899320",
    "end": "1905600"
  },
  {
    "text": "determine when scroll views should start scrolling and things like that is they compare those distances traveled against",
    "start": "1905600",
    "end": "1912519"
  },
  {
    "text": "the touch slop constant okay so if you're doing scrolling or something uh",
    "start": "1912519",
    "end": "1917679"
  },
  {
    "text": "where you're having to do all the math yourself like we're doing everything fully custom then touch slop is something you're going to want to use as",
    "start": "1917679",
    "end": "1923760"
  },
  {
    "text": "that check uh there are fling velocity checks so there's actually a minimum and a maximum fling velocity a fling is uh",
    "start": "1923760",
    "end": "1932080"
  },
  {
    "text": "this idea of your finger scrolling across the screen and then lifting quickly before stopping it's how you",
    "start": "1932080",
    "end": "1938159"
  },
  {
    "text": "would you know a fling gesture is how you would do um animated scrolling you know you fling the scroll loot list and it continues to animate for a while",
    "start": "1938159",
    "end": "1945240"
  },
  {
    "text": "that's because the gesture you didn't stop your finger before you lifted it and the the framework considers that a",
    "start": "1945240",
    "end": "1952159"
  },
  {
    "text": "fling and there is a minimum velocity that you need to check against if to be",
    "start": "1952159",
    "end": "1957600"
  },
  {
    "text": "consistent with the platform you start animating scrolling when the gesture goes a certain velocity there's also a",
    "start": "1957600",
    "end": "1963919"
  },
  {
    "text": "maximum velocity um so that if it's above something although I don't think I've ever been able to effectively",
    "start": "1963919",
    "end": "1970200"
  },
  {
    "text": "trigger that myself uh that you should also check for the upper bound uh the next one is scaled paging touch slop",
    "start": "1970200",
    "end": "1978120"
  },
  {
    "text": "this is what they use in view pager so there is actually a separate slop constant for what they refer to as",
    "start": "1978120",
    "end": "1984200"
  },
  {
    "text": "horizontal paging touch as opposed to you know standard just regular scrolling touch now that doesn't mean that",
    "start": "1984200",
    "end": "1990080"
  },
  {
    "text": "everything horizontal uses this because horizontal scroll view uses regular slop checks this is really only used in",
    "start": "1990080",
    "end": "1996679"
  },
  {
    "text": "paging cases like view pager and the primary reason that they have two different constants is to allow basic",
    "start": "1996679",
    "end": "2003159"
  },
  {
    "text": "things like a scroll view inside of a view pager to work well so that there's a on the two axes there's basically a",
    "start": "2003159",
    "end": "2010240"
  },
  {
    "text": "different slot check so that it's easier for one of those to win when you're going up versus sideways okay and on",
    "start": "2010240",
    "end": "2016679"
  },
  {
    "text": "most platforms the other nice thing about these constants is these are all scaled for you so you don't have to try",
    "start": "2016679",
    "end": "2022000"
  },
  {
    "text": "and pick some random set of pixels to use as your slop check which is obviously 16 pixels on this screen is a",
    "start": "2022000",
    "end": "2028600"
  },
  {
    "text": "lot different than 16 pixels on my phone so these are just like any other density independent thing that you're trying to",
    "start": "2028600",
    "end": "2034159"
  },
  {
    "text": "do in your UI these are all scaled for you by device density so that they match the screen you're on",
    "start": "2034159",
    "end": "2042039"
  },
  {
    "text": "okay all right so then just a couple other things if if what you're trying to",
    "start": "2043480",
    "end": "2048800"
  },
  {
    "text": "achieve is touch forwarding so let me give you an example that's probably not",
    "start": "2048800",
    "end": "2054040"
  },
  {
    "text": "a good one but uh let's say you had two buttons side by side in a layout and your objective goal was every time the",
    "start": "2054040",
    "end": "2061118"
  },
  {
    "text": "user touches this button on the left we want the events to actually go to this button on the right so you know I'm",
    "start": "2061119",
    "end": "2066839"
  },
  {
    "text": "touching here but I'm click clicking over here it's probably a better use case for that but that's the easiest one to describe uh the best way to do this",
    "start": "2066839",
    "end": "2074839"
  },
  {
    "text": "and I I mentioned this because often times people will think the easiest way is to take the touch events from one and",
    "start": "2074839",
    "end": "2080000"
  },
  {
    "text": "just manually call on touch event on the other button technically that works a little bit but you're kind of",
    "start": "2080000",
    "end": "2086158"
  },
  {
    "text": "circumventing all the rest of this responder chain stuff the dispatch methods of these views do a lot more",
    "start": "2086159",
    "end": "2092839"
  },
  {
    "text": "than just process internally you know whether the view is pressed and whether they consume the event and stuff like",
    "start": "2092839",
    "end": "2098240"
  },
  {
    "text": "that I mean even just in a basic view dispatch also handles whether there's a listener there and things like that so",
    "start": "2098240",
    "end": "2104000"
  },
  {
    "text": "if you're going to forward events from one view to another what you really want to do is do the same thing the framework",
    "start": "2104000",
    "end": "2109400"
  },
  {
    "text": "does take that motion event and call dispatch on the other View and that will",
    "start": "2109400",
    "end": "2114560"
  },
  {
    "text": "allow you to effectively reroute the dispatch chain but in a more proper way",
    "start": "2114560",
    "end": "2121839"
  },
  {
    "text": "okay all right and then just some additional things about on intercept we've sort of talked about these already",
    "start": "2121839",
    "end": "2127240"
  },
  {
    "text": "but you know if you want to if you want to do your own intercepts then you'll subass View group so that you can",
    "start": "2127240",
    "end": "2132760"
  },
  {
    "text": "override this method and the way that on intercept works is effectively for every event that's dispatched to The View",
    "start": "2132760",
    "end": "2138880"
  },
  {
    "text": "group it will be passed into on intercept first and as long as that method continues to return false those",
    "start": "2138880",
    "end": "2145880"
  },
  {
    "text": "events will just flow through the normal chain and be dispatched down to child views and all that stuff the moment that",
    "start": "2145880",
    "end": "2153200"
  },
  {
    "text": "returns true those events stop going down to child views and are immediate imediately delivered into the ontouch",
    "start": "2153200",
    "end": "2159720"
  },
  {
    "text": "event for the remainder of the gesture okay and that's not something you can go back on so as a View group if you decide",
    "start": "2159720",
    "end": "2165960"
  },
  {
    "text": "you want to start intercepting touch events from your children you're doing it for the rest of the gesture you can't",
    "start": "2165960",
    "end": "2171319"
  },
  {
    "text": "just take a couple of them and then hand them back okay so you have to commit to that decision once you do it for the",
    "start": "2171319",
    "end": "2177640"
  },
  {
    "text": "remainder of the gesture okay so just a couple things to",
    "start": "2177640",
    "end": "2183560"
  },
  {
    "start": "2181000",
    "end": "2181000"
  },
  {
    "text": "be aware of whenever possible oh you have a question yeah I have a question about",
    "start": "2183560",
    "end": "2189079"
  },
  {
    "text": "forwarding the touch to different button sure for example we have to translate the coordinates of the the touch to be",
    "start": "2189079",
    "end": "2197200"
  },
  {
    "text": "able to actually it to the other I'm only Heming and haing on the words have to um you",
    "start": "2197200",
    "end": "2204640"
  },
  {
    "text": "you can and probably should in most cases question is going to Buble back to you the view if you share the same par",
    "start": "2204640",
    "end": "2212200"
  },
  {
    "text": "the view is going to Bubble it back to you because the coordinates point to your location yeah so in the example",
    "start": "2212200",
    "end": "2217359"
  },
  {
    "text": "that I have that does touch for forwarding I am translating The View coordinates and you'll see how the what",
    "start": "2217359",
    "end": "2222960"
  },
  {
    "text": "that behavior affects but that may not be what you want to happen um if you but I can also describe to you at that time",
    "start": "2222960",
    "end": "2230119"
  },
  {
    "text": "what would happen if you didn't translate them because it's a slightly different behavior that may or may not be",
    "start": "2230119",
    "end": "2235200"
  },
  {
    "text": "desirable so that's why I say I'm not sure about have to but we'll talk more about that in a minute okay so uh when",
    "start": "2235200",
    "end": "2242760"
  },
  {
    "text": "you're overwriting the ontouch event method in a view my recommendation to you is that if you're only doing this",
    "start": "2242760",
    "end": "2248960"
  },
  {
    "text": "because you want to handle maybe one or two specific events you know maybe you're you're curious about when the",
    "start": "2248960",
    "end": "2254160"
  },
  {
    "text": "touch comes in or maybe you just want to see when it moves a certain distance or some of that basic stuff but you're not",
    "start": "2254160",
    "end": "2259640"
  },
  {
    "text": "really trying to handle everything whenever possible call through to the super rather than trying to handle all",
    "start": "2259640",
    "end": "2266240"
  },
  {
    "text": "of these action events yourself and coming up with the right way to do that specifically with Vue the ontouch event",
    "start": "2266240",
    "end": "2272240"
  },
  {
    "text": "method internally does a lot of stuff maintaining State you know all of the view flag that are set for this is now",
    "start": "2272240",
    "end": "2279119"
  },
  {
    "text": "pressed that changes the drawable View and all of those things that's done inside view and if you don't call Super",
    "start": "2279119",
    "end": "2285040"
  },
  {
    "text": "you're going to lose that functionality and you're probably not going to be very happy when you don't know why um so in",
    "start": "2285040",
    "end": "2290839"
  },
  {
    "text": "general what I kind of recommend is you'll sort of have just a basic check for maybe the two or three event types",
    "start": "2290839",
    "end": "2296119"
  },
  {
    "text": "you're interested in and then if it's not one of those events rather than returning true or false explicitly just",
    "start": "2296119",
    "end": "2302079"
  },
  {
    "text": "return a call through to Super okay um action move we talked about",
    "start": "2302079",
    "end": "2307599"
  },
  {
    "text": "protect those with slot checks you know if if you're interested in moves or actually detecting when a finger is",
    "start": "2307599",
    "end": "2313599"
  },
  {
    "text": "truly moving then you need to evaluate those movie events against a slop check and I'll show you what that looks like",
    "start": "2313599",
    "end": "2320640"
  },
  {
    "text": "okay um and always handle action cancel um in most cases handle action cancel",
    "start": "2320640",
    "end": "2325800"
  },
  {
    "text": "and action up exactly the same way um but if for whatever reason there is a",
    "start": "2325800",
    "end": "2330839"
  },
  {
    "text": "difference between when the user lifts their finger and when those events are stolen away from your view you can",
    "start": "2330839",
    "end": "2336400"
  },
  {
    "text": "handle them separately but in most cases I usually just have them as almost if it's this or this cancel up reset the",
    "start": "2336400",
    "end": "2342200"
  },
  {
    "text": "view all that stuff and don't intercept events until you're ready to take them",
    "start": "2342200",
    "end": "2348079"
  },
  {
    "start": "2348000",
    "end": "2348000"
  },
  {
    "text": "all all right just a couple additional notes on multi-touch so uh if you're if",
    "start": "2348280",
    "end": "2353960"
  },
  {
    "text": "you're doing custom touch handling and you want to deal specifically with multi-touch events um just some",
    "start": "2353960",
    "end": "2359240"
  },
  {
    "text": "additional pieces that are available on motion event so there's nothing really special about dealing with multi-touch",
    "start": "2359240",
    "end": "2365480"
  },
  {
    "text": "over single touch in terms of the methods called by the framework or anything like that there that additional",
    "start": "2365480",
    "end": "2371440"
  },
  {
    "text": "metadata is just available to you on each one of the motion events so the motion events themselves will still come",
    "start": "2371440",
    "end": "2377680"
  },
  {
    "text": "through dispatch and on touch and on intercept and all that the difference will be that the the pointer count",
    "start": "2377680",
    "end": "2383720"
  },
  {
    "text": "that's reported will be greater than one so you know as I bring more fingers onto the screen the get pointer count method",
    "start": "2383720",
    "end": "2390200"
  },
  {
    "text": "for each event will read however many of those are currently being tracked by the device and that that you may at some",
    "start": "2390200",
    "end": "2396680"
  },
  {
    "text": "point hit a link you know most of the devices especially like the Nexus devices that we're carrying and stuff like that are able to",
    "start": "2396680",
    "end": "2403040"
  },
  {
    "text": "handle you know basically all the touch points on your finger and maybe more um so you can get that value up to five six",
    "start": "2403040",
    "end": "2409920"
  },
  {
    "text": "whatever but there may still be devices in the market that can't really get you more than two or three so you may start",
    "start": "2409920",
    "end": "2415960"
  },
  {
    "text": "getting to the point where as you add more fingers it just reports events like the last finger you touched is now moved",
    "start": "2415960",
    "end": "2421920"
  },
  {
    "text": "over here rather than adding a new one because you've hit the maximum number of pointers it can actually detect and",
    "start": "2421920",
    "end": "2427560"
  },
  {
    "text": "there are Market filters for that I don't have them in the slides but they're easy enough to find on the developer site uh there are Market",
    "start": "2427560",
    "end": "2433680"
  },
  {
    "text": "filters for touchscreen type that have to do with the number of multi-touch points that device can support So for",
    "start": "2433680",
    "end": "2440680"
  },
  {
    "text": "whatever reason if you're you wanted to have a gesture that required all five fingers then you could filter s pass a",
    "start": "2440680",
    "end": "2447520"
  },
  {
    "text": "filter that that particular device touchscreen supports the what I believe is the jazzz hands filter meaning that",
    "start": "2447520",
    "end": "2453960"
  },
  {
    "text": "it has uh the ability to handle that many touch points okay uh for multi-touch if you're",
    "start": "2453960",
    "end": "2460680"
  },
  {
    "text": "interested in when those events actually come down and come back up that's where that action pointer up and down come",
    "start": "2460680",
    "end": "2467000"
  },
  {
    "text": "from so action up and down will always be fired when the first finger hits the screen but as soon as I hit number two",
    "start": "2467000",
    "end": "2473359"
  },
  {
    "text": "number three number four each of those events will fire off with a pointer down or pointer up until we're back to one",
    "start": "2473359",
    "end": "2480319"
  },
  {
    "text": "finger and then the last one will be the action up okay and as part of this each",
    "start": "2480319",
    "end": "2485839"
  },
  {
    "text": "individual finger or point will be given an index and an ID that you can use to",
    "start": "2485839",
    "end": "2491200"
  },
  {
    "text": "track them throughout the gesture okay now the the difference between the two is a pointer ID is stable and index is",
    "start": "2491200",
    "end": "2498720"
  },
  {
    "text": "not okay so in that example where I have three fingers that I push down on my",
    "start": "2498720",
    "end": "2504319"
  },
  {
    "text": "screen here you know those are pointer 01 and two and they're also index 01 and two but as soon as I lift that second",
    "start": "2504319",
    "end": "2511280"
  },
  {
    "text": "finger I put down now these pointers are still zero and two for their ID but the indices become 0 and one so that the",
    "start": "2511280",
    "end": "2518760"
  },
  {
    "text": "index is more related to how many are there and iterating through them the ID is the stable value for as that pointer",
    "start": "2518760",
    "end": "2525359"
  },
  {
    "text": "is tracking around the screen so that you can determine you know if they lift up a finger what should I do now and",
    "start": "2525359",
    "end": "2531400"
  },
  {
    "text": "often times what you'll see with the framework is if you go to three fingers and then down to two and it's like a scale gesture or something along those",
    "start": "2531400",
    "end": "2537880"
  },
  {
    "text": "lines it will just transfer the events that were on the latest pointer to whatever the next one is at that index",
    "start": "2537880",
    "end": "2543280"
  },
  {
    "text": "or something along those lines but it could be application specific",
    "start": "2543280",
    "end": "2548720"
  },
  {
    "start": "2549000",
    "end": "2549000"
  },
  {
    "text": "okay um another thing to be aware of which may or may not affect your application is event",
    "start": "2550599",
    "end": "2557000"
  },
  {
    "text": "batching so by default when you get all of these motion events into your views or in your",
    "start": "2557000",
    "end": "2563359"
  },
  {
    "text": "application you're not actually getting every single one okay events and this is",
    "start": "2563359",
    "end": "2568760"
  },
  {
    "text": "really only true for action move but uh as the finger is moving around the screen the movie events that are",
    "start": "2568760",
    "end": "2574640"
  },
  {
    "text": "actually delivered to you are happening in back PES so there are significantly more events being generated by the",
    "start": "2574640",
    "end": "2581040"
  },
  {
    "text": "hardware and the kernel driver and all those pieces than what actually get bubbled up into calls in dispatch and on",
    "start": "2581040",
    "end": "2587480"
  },
  {
    "text": "touch event but that doesn't mean those points are lost so effectively the way that this looks to your application is",
    "start": "2587480",
    "end": "2593599"
  },
  {
    "text": "every time a motion event is fired and you get that call back the most recent",
    "start": "2593599",
    "end": "2599160"
  },
  {
    "text": "of that event batch is what you're looking at when you make a request of get me the X and Y location of this",
    "start": "2599160",
    "end": "2604920"
  },
  {
    "text": "touch and all of those things what you're looking at is the latest event in that batch but if for whatever reason",
    "start": "2604920",
    "end": "2610800"
  },
  {
    "text": "you need every single event that was generated by the hardware you know maybe you're trying to construct a path or",
    "start": "2610800",
    "end": "2616319"
  },
  {
    "text": "whatever the case is and you you want to make sure that every single point that's available to you you can use um you can",
    "start": "2616319",
    "end": "2622400"
  },
  {
    "text": "use these historical methods on motion event and it will return to you the XY",
    "start": "2622400",
    "end": "2627440"
  },
  {
    "text": "event time you know all the metadata that's available for the single event but for every single previous event in",
    "start": "2627440",
    "end": "2633520"
  },
  {
    "text": "that batch and it will also tell you for each motion event how many there are so that you know how far you have to look",
    "start": "2633520",
    "end": "2639200"
  },
  {
    "text": "back okay um just a little bit about hover",
    "start": "2639200",
    "end": "2645480"
  },
  {
    "start": "2642000",
    "end": "2642000"
  },
  {
    "text": "events these are not super useful in general but just to be aware of that they exist they they're not",
    "start": "2645480",
    "end": "2651119"
  },
  {
    "text": "significantly different from touch events uh they were they've been around since Ice Cream Sandwich I think slide",
    "start": "2651119",
    "end": "2656920"
  },
  {
    "text": "says 14 so we'll trust that um there there are basically just additional events that you might see inside of a",
    "start": "2656920",
    "end": "2663559"
  },
  {
    "text": "motion event so the actions for hover enter and exit and move uh is what you",
    "start": "2663559",
    "end": "2669000"
  },
  {
    "text": "might see as the action value of one of these uh motion event objects but it's the same object otherwise it gets passed",
    "start": "2669000",
    "end": "2675480"
  },
  {
    "text": "into the Callback now the difference between a hover and a traditional touch event hover events are think of them as",
    "start": "2675480",
    "end": "2681760"
  },
  {
    "text": "they're designed for things like a pointing device uh maybe like a smart pen device or something along those",
    "start": "2681760",
    "end": "2687400"
  },
  {
    "text": "lines if uh or my best example is a mouse you know if you were to plug a mouse into your Android tablet then as",
    "start": "2687400",
    "end": "2694280"
  },
  {
    "text": "that pointing device hovers over the view even though you didn't click on it those are what generate hover events so",
    "start": "2694280",
    "end": "2701119"
  },
  {
    "text": "the pointing device is actually over the view but it's not what the same as you would consider a touch or a press and so",
    "start": "2701119",
    "end": "2707559"
  },
  {
    "text": "at that point those enter and exit as it moves over or move as it's moving around",
    "start": "2707559",
    "end": "2712640"
  },
  {
    "text": "inside those bounds will be generated and called back to your application now the only additional piece here is they",
    "start": "2712640",
    "end": "2719200"
  },
  {
    "text": "won't go through the same call back methods so you won't get these through on touch event you'll get them through a",
    "start": "2719200",
    "end": "2724680"
  },
  {
    "text": "separate method called on generic motion event but other than that the object you're given is exactly the same it's a motion",
    "start": "2724680",
    "end": "2731720"
  },
  {
    "text": "event with x y and all that stuff correct so they're two separate",
    "start": "2731720",
    "end": "2737960"
  },
  {
    "text": "callbacks on touch event for the Taps and uh on motion event for these motions now let's go back to the example of the",
    "start": "2737960",
    "end": "2744800"
  },
  {
    "text": "mouse let's say as I hover the mouse over the button those hover events are generated to on generic motion as soon",
    "start": "2744800",
    "end": "2751079"
  },
  {
    "text": "as I click the button that's going to be an ontouch event just like a finger okay so at some point that way that behavior",
    "start": "2751079",
    "end": "2757880"
  },
  {
    "text": "is consistent it's just for these additional actions there okay and just another thing to keep in mind if you're",
    "start": "2757880",
    "end": "2763119"
  },
  {
    "text": "playing around with this stuff by default none of the dables in the hollow",
    "start": "2763119",
    "end": "2768160"
  },
  {
    "text": "themes and other pieces that are part of the framework have hover States so as you're toggling as you may be playing",
    "start": "2768160",
    "end": "2774440"
  },
  {
    "text": "around and trying to toggle hover States on your buttons don't expect it to change visibility or anything like that",
    "start": "2774440",
    "end": "2780520"
  },
  {
    "text": "like it does when you press it the framework doesn't add any visual States for this stuff it does have the ability",
    "start": "2780520",
    "end": "2786200"
  },
  {
    "text": "for you to do so there is a a state action hover that you could put in a selector just like a state pressed or a",
    "start": "2786200",
    "end": "2792960"
  },
  {
    "text": "state selected or focused or something like that but by default those aren't set to anything on the system themes",
    "start": "2792960",
    "end": "2801599"
  },
  {
    "text": "yes no no that type of information is not exposed to the framework um and to be honest even the capabilities of the",
    "start": "2806960",
    "end": "2813599"
  },
  {
    "text": "screen uh as far as say how many touch points it supports is not something that's available at runtime to the",
    "start": "2813599",
    "end": "2819880"
  },
  {
    "text": "application at best the only capabilities you have is to put inside of your manifest a filter defining what",
    "start": "2819880",
    "end": "2827000"
  },
  {
    "text": "type of touchcreen you require and those those aren't even at the level of capacitive resistive they're simply",
    "start": "2827000",
    "end": "2832480"
  },
  {
    "text": "based on touch point you know can can I only support one can I support I think it's one two and five or five or more",
    "start": "2832480",
    "end": "2838400"
  },
  {
    "text": "something like that so if you need if you need the capability based on max number of pointers you can put that in",
    "start": "2838400",
    "end": "2843760"
  },
  {
    "text": "your manifest but any other metadata about the hardware capability is not in the API at least not",
    "start": "2843760",
    "end": "2851240"
  },
  {
    "text": "today okay so Custom Touch handling is interesting it's a lot of math and it",
    "start": "2851240",
    "end": "2857280"
  },
  {
    "start": "2852000",
    "end": "2852000"
  },
  {
    "text": "can be a lot of fun and it may be what you need but there are simpler ways to do a lot of this stuff and we'd like to",
    "start": "2857280",
    "end": "2863400"
  },
  {
    "text": "look at those because that may that may be a smarter approach for many applications okay so there are a lot of",
    "start": "2863400",
    "end": "2869200"
  },
  {
    "text": "touch handlers that are already built into the framework for us you know some of these we've probably used a million times over I mean how many of us haven't",
    "start": "2869200",
    "end": "2875559"
  },
  {
    "text": "used an onclick listener um or an on a longclick listener uh we've talked a little bit about touch listener already",
    "start": "2875559",
    "end": "2881760"
  },
  {
    "text": "being something you could use to monitor or consume touch events uh without having to subass scroll listeners or the",
    "start": "2881760",
    "end": "2888480"
  },
  {
    "text": "onscroll changed method of views you know if if you're just interested in some of these more common basic features",
    "start": "2888480",
    "end": "2894920"
  },
  {
    "text": "you probably don't have to go all the way down to start monitoring uh on intercept and on touch event just to get",
    "start": "2894920",
    "end": "2901000"
  },
  {
    "text": "that information okay in addition to that we have these things called gesture detectors that allow us to monitor some",
    "start": "2901000",
    "end": "2908160"
  },
  {
    "text": "additional more common things like Scrolls and flings uh so that we If all we're doing is implementing a custom",
    "start": "2908160",
    "end": "2914240"
  },
  {
    "text": "scrolling view or something along those lines we again don't have to do all the math of all the touches we can let the",
    "start": "2914240",
    "end": "2919599"
  },
  {
    "text": "framework do that for us uh additionally there's a scale gesture detector which",
    "start": "2919599",
    "end": "2924760"
  },
  {
    "text": "um they refer to it as the detector for the scale gesture but it's a pinch Zoom",
    "start": "2924760",
    "end": "2931040"
  },
  {
    "text": "they just can't call it that but it's it's effectively when you put two fingers on the screen and monitor",
    "start": "2931040",
    "end": "2936119"
  },
  {
    "text": "whether they get close together or farther apart that just your detector is for that specific purpose",
    "start": "2936119",
    "end": "2941720"
  },
  {
    "text": "yes on fling can you attach it to a button so that you can do flings on",
    "start": "2941720",
    "end": "2948280"
  },
  {
    "text": "different so all these it's a great lead in because basically all these en these",
    "start": "2948280",
    "end": "2953319"
  },
  {
    "text": "detectors are are math engines okay so the the way that they work is in your application you instantiate one and then",
    "start": "2953319",
    "end": "2959640"
  },
  {
    "text": "it's your job from the ontouch event method or however you're doing it in your custom view to feed the detector",
    "start": "2959640",
    "end": "2965920"
  },
  {
    "text": "with these events as they come in okay so at the the gesture detector is simply handed every motion event that you get",
    "start": "2965920",
    "end": "2972559"
  },
  {
    "text": "inside of your application and then it tells you when one of these other events occur and at that point it's up to you",
    "start": "2972559",
    "end": "2978799"
  },
  {
    "text": "what you do with that information so these are simply taking the input in doing the computation and saying oh",
    "start": "2978799",
    "end": "2985440"
  },
  {
    "text": "we're now scrolling or we're now flinging or we're now doing this and then if you want to animate a button",
    "start": "2985440",
    "end": "2990720"
  },
  {
    "text": "based on that or whatever the case may be inside these callback methods you could write the code to do that but",
    "start": "2990720",
    "end": "2996119"
  },
  {
    "text": "there there's no direct link between those still need to",
    "start": "2996119",
    "end": "3001119"
  },
  {
    "text": "inter yeah you need to override the method but rather than checking all the actions and doing all the math you just",
    "start": "3001960",
    "end": "3007960"
  },
  {
    "text": "hand it off to this and listen for the call back so they're they're just the computation in piece it's just help yeah",
    "start": "3007960",
    "end": "3014000"
  },
  {
    "text": "basically MH okay uh some of the other disadvantages of this uh you see that",
    "start": "3014000",
    "end": "3021200"
  },
  {
    "text": "there's a lot of methods here for common things like even just basic on down um as well as single Taps and Scrolls and",
    "start": "3021200",
    "end": "3027040"
  },
  {
    "text": "flings there is no method on gist detector for on up or on cancel um and",
    "start": "3027040",
    "end": "3032240"
  },
  {
    "text": "this can be a little bit difficult if you need the up or cancel event to do something with whatever your custom view",
    "start": "3032240",
    "end": "3037359"
  },
  {
    "text": "is you know I mentioned before that if you're manually say changing the visual state of your view based on Direct touch",
    "start": "3037359",
    "end": "3044680"
  },
  {
    "text": "event interaction and you're relying on getting up or cancel to say reset the drawable state or make it look like it's",
    "start": "3044680",
    "end": "3050680"
  },
  {
    "text": "not pressed anymore um if you're using gesture detector they're not going to give you those call backs they're using",
    "start": "3050680",
    "end": "3055839"
  },
  {
    "text": "all that information internally to know when gestures end but they're not going to provide that to you as a method call",
    "start": "3055839",
    "end": "3062240"
  },
  {
    "text": "so again because we mentioned that it's your job to feed the detector you may have to check some of those specific",
    "start": "3062240",
    "end": "3067920"
  },
  {
    "text": "edge cases outside of it before you feed the events in yes is",
    "start": "3067920",
    "end": "3074400"
  },
  {
    "text": "there rotation you mean like this kind of rotation no although I have an example of how you can do",
    "start": "3074400",
    "end": "3080240"
  },
  {
    "text": "it so you'll see kind of the basic idea there's not one built into the framework",
    "start": "3080240",
    "end": "3085599"
  },
  {
    "text": "but it's a simple enough gesture to uh to implement with custom handling so",
    "start": "3085599",
    "end": "3091440"
  },
  {
    "text": "okay good questions um yeah okay so that's a piece all right the last thing",
    "start": "3091440",
    "end": "3096760"
  },
  {
    "start": "3095000",
    "end": "3095000"
  },
  {
    "text": "that I want to talk to you about before we go look at some of the demos is uh this guy called touch delegate has",
    "start": "3096760",
    "end": "3102359"
  },
  {
    "text": "anybody in the room heard of touch delegate before let alone used it that's pretty good usually I get two so touch",
    "start": "3102359",
    "end": "3110280"
  },
  {
    "text": "delegate is a is a neat little secret in the framework it's actually been around since 1.0 um but it's it's kind had",
    "start": "3110280",
    "end": "3117160"
  },
  {
    "text": "varying degrees of use over time but it's it's a good thing to have in your back pocket uh touch delegate basically",
    "start": "3117160",
    "end": "3122319"
  },
  {
    "text": "has one single function um its job is to allow a parent view and and it's not to",
    "start": "3122319",
    "end": "3128960"
  },
  {
    "text": "say this is the only way you could use it but this is really what it was designed for um it's to designed to allow a parent view to define a specific",
    "start": "3128960",
    "end": "3136480"
  },
  {
    "text": "touch Zone and inside of that zone forward all touch events to a child view",
    "start": "3136480",
    "end": "3142880"
  },
  {
    "text": "okay the the reason behind it was was think of the idea like a list view item",
    "start": "3142880",
    "end": "3149040"
  },
  {
    "text": "that has a very small icon that has is uh is too small to actually have a touchable area um but you want people to",
    "start": "3149040",
    "end": "3156160"
  },
  {
    "text": "be able to tap on it so the the concept was as the parent view of that list view",
    "start": "3156160",
    "end": "3162000"
  },
  {
    "text": "item you could Define a touch delegate that was a larger rectangle around the view itself and forward all of those",
    "start": "3162000",
    "end": "3169839"
  },
  {
    "text": "events from that rectangle into that teeny tiny view okay now there may be other reasons even inside of a parent",
    "start": "3169839",
    "end": "3176200"
  },
  {
    "text": "child relationship where it makes use of uh and makes sense to do that but that's",
    "start": "3176200",
    "end": "3181720"
  },
  {
    "text": "the that's kind of the reason it was added to the framework and is the original design there in a lot of cases you can sometimes get away with doing",
    "start": "3181720",
    "end": "3188119"
  },
  {
    "text": "the same thing by just making the view itself larger even though the view display isn't larger like an image view",
    "start": "3188119",
    "end": "3193920"
  },
  {
    "text": "can be bigger than its actual content but not all views can do that so it may depend on what the view type is and you",
    "start": "3193920",
    "end": "3199839"
  },
  {
    "text": "may not be able to use that kind of a solution um just to give you kind of a basic idea there's some pseudo code down",
    "start": "3199839",
    "end": "3205880"
  },
  {
    "text": "here and you'll see it again uh in the example but you know the basic idea is you have a parent view a child view and",
    "start": "3205880",
    "end": "3212119"
  },
  {
    "text": "some touch area that's defined as erect and the parent view you just simply say set touch delegate and you uh initialize",
    "start": "3212119",
    "end": "3219280"
  },
  {
    "text": "one of these delegates with that area and the reference to the child view and then inside of it what touch delegate",
    "start": "3219280",
    "end": "3224920"
  },
  {
    "text": "does is for every touch event that comes into that view it checks to see if it's in the bounds of the wct and if it does",
    "start": "3224920",
    "end": "3230599"
  },
  {
    "text": "it massages the coordinates a little bit and forwards it down to the view okay yes is that what happens when when I",
    "start": "3230599",
    "end": "3236920"
  },
  {
    "text": "click on a very small thing it launches a child dialog kind of thing",
    "start": "3236920",
    "end": "3243559"
  },
  {
    "text": "with two or three choices like Suppose there are three very small choices right",
    "start": "3243559",
    "end": "3249200"
  },
  {
    "text": "20 small choices and I click on one so I mean the all we're really talking about here is how it's helping process the",
    "start": "3249200",
    "end": "3255040"
  },
  {
    "text": "touch so if it's at all used in this process it might be to forward your the",
    "start": "3255040",
    "end": "3260799"
  },
  {
    "text": "events from the finger to be picked up by that button what the reaction of that is as far as displaying any type of view",
    "start": "3260799",
    "end": "3267319"
  },
  {
    "text": "contents is completely separate okay all right let's go look at the",
    "start": "3267319",
    "end": "3275520"
  },
  {
    "text": "demos okay we're going to see if I can be really cool and put my disce on the",
    "start": "3283480",
    "end": "3289599"
  },
  {
    "text": "display",
    "start": "3289599",
    "end": "3292599"
  },
  {
    "text": "hey look at that okay so this is the example",
    "start": "3303480",
    "end": "3310200"
  },
  {
    "text": "application that uh that we have I have on my GitHub and we'll be looking through the sample code for so you know",
    "start": "3310200",
    "end": "3316200"
  },
  {
    "text": "if you have it or you want to follow a longer case U that's fine with me so the uh the move logger example I might go",
    "start": "3316200",
    "end": "3322359"
  },
  {
    "text": "through at the end because I kind of really have to show you that on the screen here but the this this first example here basically just defines two",
    "start": "3322359",
    "end": "3329960"
  },
  {
    "text": "touch zones inside of this view the top Zone uh will log every touch event that",
    "start": "3329960",
    "end": "3336160"
  },
  {
    "text": "it receives and does no checking of any kind okay and so this is the one where I",
    "start": "3336160",
    "end": "3341440"
  },
  {
    "text": "can put my finger down I can try and hold it as steady as I can or just kind of look at what's going on and then the",
    "start": "3341440",
    "end": "3347119"
  },
  {
    "text": "log you'll see just move events go like crazy whereas on this bottom piece here",
    "start": "3347119",
    "end": "3352640"
  },
  {
    "text": "if I touch down here that has protected by a slop check so you know you can see that the difference being when I hold my",
    "start": "3352640",
    "end": "3359599"
  },
  {
    "text": "finger still I won't be getting any events until I kind of start to move it a little bit and then they'll start to",
    "start": "3359599",
    "end": "3364799"
  },
  {
    "text": "show up okay so that's what's going on here in this first example and if I",
    "start": "3364799",
    "end": "3372400"
  },
  {
    "text": "switch back to the log you can sort of see that in",
    "start": "3372400",
    "end": "3377680"
  },
  {
    "text": "action see if I can make this more visible",
    "start": "3380079",
    "end": "3385039"
  },
  {
    "text": "and there is it picking up my",
    "start": "3386760",
    "end": "3393079"
  },
  {
    "text": "log oh I don't have this device connected so I'll have to show you that one separately because I can't be on HDMI and USB at the same time never",
    "start": "3393079",
    "end": "3401640"
  },
  {
    "text": "mind all right so let's look at a more interesting",
    "start": "3404160",
    "end": "3408440"
  },
  {
    "text": "one all right so this next example which is the touch listener is fairly basic but but what I have here at the top is",
    "start": "3412000",
    "end": "3417799"
  },
  {
    "text": "just a basic checkbox and then a radio group okay and what I'm going to do in this example is I'm going to take the",
    "start": "3417799",
    "end": "3423760"
  },
  {
    "text": "value of the check box and using a touch listener I'm going to determine whether or not the box is checked whether I",
    "start": "3423760",
    "end": "3429400"
  },
  {
    "text": "should lock out touches from coming into my radio group okay so it's just sort of",
    "start": "3429400",
    "end": "3434559"
  },
  {
    "text": "a dynamic way of controlling the response of the radio group you know as as I the way it is here I can touch on",
    "start": "3434559",
    "end": "3440280"
  },
  {
    "text": "any of these elements and they get selected you know Behavior you'd expect then as soon as I check that box box I",
    "start": "3440280",
    "end": "3447760"
  },
  {
    "text": "can now go through and press all of these and they will not change at all",
    "start": "3447760",
    "end": "3452799"
  },
  {
    "text": "and what's actually happening is I've set a touch listener on side on the radio group there and whenever the box",
    "start": "3452799",
    "end": "3460880"
  },
  {
    "text": "is checked it's returning true to consume those events before the radio group has an opportunity to process them",
    "start": "3460880",
    "end": "3470520"
  },
  {
    "text": "okay so that one is touch",
    "start": "3474520",
    "end": "3480760"
  },
  {
    "text": "intercept so it's just a very basic activity NOP that's not it touch",
    "start": "3480760",
    "end": "3488000"
  },
  {
    "text": "listener with that checkbox and then my uh my selections here so what I've done is I've set the",
    "start": "3488000",
    "end": "3494880"
  },
  {
    "text": "touch listener of each of those elements to be this activity here so I didn't have to subass anything to work with",
    "start": "3494880",
    "end": "3500559"
  },
  {
    "text": "this and the touch listener just has this ontouch method that will tell me the view that this event is is",
    "start": "3500559",
    "end": "3506280"
  },
  {
    "text": "associated with and the event itself and all we're doing here is simply returning",
    "start": "3506280",
    "end": "3511880"
  },
  {
    "text": "whether or not the lock box is checked so when that value is checked my touch",
    "start": "3511880",
    "end": "3517079"
  },
  {
    "text": "listener returns true for every event regardless of what it is and since the listener is always checked before the",
    "start": "3517079",
    "end": "3524000"
  },
  {
    "text": "local ontouch event of that view for every view that has this listener attached those views will never see",
    "start": "3524000",
    "end": "3530599"
  },
  {
    "text": "those events or at least they'll never see them in the method to which they can process them so it's effectively quick",
    "start": "3530599",
    "end": "3536440"
  },
  {
    "text": "way of locking these touch events temporarily out of the view",
    "start": "3536440",
    "end": "3542520"
  },
  {
    "text": "okay all",
    "start": "3543440",
    "end": "3546599"
  },
  {
    "text": "right so then I'll do the next two together but this first one is a touch delegate so what I have here is just a",
    "start": "3548480",
    "end": "3554559"
  },
  {
    "text": "very basic uh you know it's going to be a custom layout but the the entire screen here is a is a large single",
    "start": "3554559",
    "end": "3561400"
  },
  {
    "text": "layout that has one child view inside of it which is that checkbox and if I click the check boox it will check but in",
    "start": "3561400",
    "end": "3567839"
  },
  {
    "text": "addition if I click anywhere else on this view it will also check and uncheck the check box okay so what I have here",
    "start": "3567839",
    "end": "3575079"
  },
  {
    "text": "is I've set up a rectangle for the entire size of The View group and set that as the touch Delegate for the",
    "start": "3575079",
    "end": "3581280"
  },
  {
    "text": "checkbox so that no matter where I touch as long as it's inside that wct the touch uh the checkbox will get that",
    "start": "3581280",
    "end": "3587440"
  },
  {
    "text": "information okay in addition I'll show you at the same time this touch forwarding example which is the same",
    "start": "3587440",
    "end": "3594680"
  },
  {
    "text": "basic idea but rather than using touch delegate I'm manually receiving those events changing their coordinates and",
    "start": "3594680",
    "end": "3601039"
  },
  {
    "text": "passing them forward to the button by just manually calling dispatch okay and so it's the same behavior you know you",
    "start": "3601039",
    "end": "3607319"
  },
  {
    "text": "can it's easier to see with the without KitKat because it was blue before but the U the button highlights with each",
    "start": "3607319",
    "end": "3613640"
  },
  {
    "text": "individual touch no matter where I put my finger okay now the interesting thing about that and this starts to explain",
    "start": "3613640",
    "end": "3620240"
  },
  {
    "text": "the difference between moving the coordinates and not moving them um for instance if I put my finger here as I",
    "start": "3620240",
    "end": "3626160"
  },
  {
    "text": "slide my finger it still looks like or the button still thinks it's highlighted because as I move that it thinks that",
    "start": "3626160",
    "end": "3632200"
  },
  {
    "text": "the finger is you know relatively off to this side or off to this side until I go far enough away which is the same",
    "start": "3632200",
    "end": "3638079"
  },
  {
    "text": "behavior I would have if I actually click the button um if you're trying to get more of a just a touch down and",
    "start": "3638079",
    "end": "3644880"
  },
  {
    "text": "touch up approach and you don't want it to still detect when you move around like that if you don't massage the",
    "start": "3644880",
    "end": "3651280"
  },
  {
    "text": "coordinates and you just leave them as they are then the initial down will still highlight the button because it at",
    "start": "3651280",
    "end": "3657880"
  },
  {
    "text": "at the action down it doesn't check where it is it just assumes that if down was delivered to it it should do",
    "start": "3657880",
    "end": "3663079"
  },
  {
    "text": "something with it but as soon as it gets the first move event it will immediately UNH highlight because it thinks that",
    "start": "3663079",
    "end": "3668680"
  },
  {
    "text": "that first move is way off in somewhere else so depending on what you're looking for you may or may not you may want to",
    "start": "3668680",
    "end": "3675240"
  },
  {
    "text": "do something different with the coordinates too that what touch delegate actually does is it regardless of the",
    "start": "3675240",
    "end": "3680359"
  },
  {
    "text": "event it always sets the XY to the dead center of the delegate view so you can move around all day long and it looks to",
    "start": "3680359",
    "end": "3685880"
  },
  {
    "text": "to the view like you're not moving at all so that's another option you can set them to whatever you want but that's",
    "start": "3685880",
    "end": "3691440"
  },
  {
    "text": "couple different things you can do my question was two butons go back to ini example siblings",
    "start": "3691440",
    "end": "3700400"
  },
  {
    "text": "on the same par and you're calling delegate dispatch touch event on the par",
    "start": "3700400",
    "end": "3707839"
  },
  {
    "text": "M if you not changing the coordinat the par is not going to Bubble Up the the tou P to yourself because",
    "start": "3707839",
    "end": "3716039"
  },
  {
    "text": "is coordinates are in your area well here let me let me describe that this way because it's the parent job to",
    "start": "3716039",
    "end": "3722039"
  },
  {
    "text": "change the coordinates so the only difference is whether one button versus the other knows that that event is",
    "start": "3722039",
    "end": "3727839"
  },
  {
    "text": "inside of its bounds okay so like this is we'll do the forwarding one first and then go back to the delegate but so this",
    "start": "3727839",
    "end": "3734240"
  },
  {
    "text": "is just a basic View group that extends frame layout um that doesn't really have a whole lot in it I I'm returning true",
    "start": "3734240",
    "end": "3740599"
  },
  {
    "text": "all the time for on intercept there's not really much purpose for that but just so that if if any of my child views",
    "start": "3740599",
    "end": "3747440"
  },
  {
    "text": "basically to not give any child view the opportunity to get the touch first I'm going to forward them all myself right",
    "start": "3747440",
    "end": "3753400"
  },
  {
    "text": "uh and so then in the ontouch event method we get a reference to that child",
    "start": "3753400",
    "end": "3758520"
  },
  {
    "text": "view and then for each touch event we take the uh for the initial",
    "start": "3758520",
    "end": "3764599"
  },
  {
    "text": "event we figure out where that is and we just save that value off and then for each subsequent event there is this",
    "start": "3764599",
    "end": "3771960"
  },
  {
    "text": "method called offset location on the touch event that we just take what the current touch coordinate is change it by",
    "start": "3771960",
    "end": "3779000"
  },
  {
    "text": "the Delta between that and our initial event so that the offsets always look the same relative to the first down and",
    "start": "3779000",
    "end": "3784680"
  },
  {
    "text": "that's why no matter where I go it's relative to where I start so the button thinks it's still in there but this is",
    "start": "3784680",
    "end": "3790359"
  },
  {
    "text": "done by the parent view as nothing to do with the views",
    "start": "3790359",
    "end": "3795000"
  },
  {
    "text": "themselves okay and then the touch delegate we look at the way that works it's the same basic idea we've got this",
    "start": "3797119",
    "end": "3802680"
  },
  {
    "text": "frame layout here this custom View and when the uh when the view starts up in",
    "start": "3802680",
    "end": "3808839"
  },
  {
    "text": "this case we don't we're not like adding the child view through XML or anything like that I just make this checkbox and",
    "start": "3808839",
    "end": "3814480"
  },
  {
    "text": "add it as a as a child view um now the interesting thing here is in order to",
    "start": "3814480",
    "end": "3819920"
  },
  {
    "text": "determine what size I want that wct to be I have to wait until the view",
    "start": "3819920",
    "end": "3825200"
  },
  {
    "text": "actually has a measured size okay you know when I when I instantiate this view it has no size because Android measures",
    "start": "3825200",
    "end": "3832160"
  },
  {
    "text": "in layouts views later on in the process um so even though I've added the view",
    "start": "3832160",
    "end": "3837799"
  },
  {
    "text": "here I can't do any of the touch delegate stuff right away so instead what I'm waiting to do U and I could do",
    "start": "3837799",
    "end": "3843559"
  },
  {
    "text": "this in two places I I typically do this in on size changed um but you could do it in on measure as well um but inside",
    "start": "3843559",
    "end": "3849920"
  },
  {
    "text": "of the on measure callback which is what the The View group will receive when the framework wants to give it a size and",
    "start": "3849920",
    "end": "3856279"
  },
  {
    "text": "say how big should you be on screen um so at that point once the super implementation measures where it's going",
    "start": "3856279",
    "end": "3862960"
  },
  {
    "text": "to be as the size of my display screen there then I can generate this rectangle for the bounds of my touch forwarding",
    "start": "3862960",
    "end": "3870400"
  },
  {
    "text": "which is really just from 0 to the measured width and height of this view now that I've measured myself um and",
    "start": "3870400",
    "end": "3876680"
  },
  {
    "text": "then I can instantiate that touch delegate to say inside the bounds forward everything to that",
    "start": "3876680",
    "end": "3882400"
  },
  {
    "text": "button and then call set touch delegate on the parent okay so this is setting up",
    "start": "3882400",
    "end": "3887680"
  },
  {
    "text": "that CH that relationship between the parent child view using a touch delegate to do all the forwarding for me and the",
    "start": "3887680",
    "end": "3893279"
  },
  {
    "text": "only difference here is that it doesn't matter where I touch or how I drag my finger the coordinates that the checkbox",
    "start": "3893279",
    "end": "3900680"
  },
  {
    "text": "receives will always be for every event dead center of that view basically it's",
    "start": "3900680",
    "end": "3906039"
  },
  {
    "text": "just whatever the width and height of that view is divided by two and that's how delegate changes its location before it does it so delegate is actually doing",
    "start": "3906039",
    "end": "3912520"
  },
  {
    "text": "the same thing as we did here just in a special case under the hood",
    "start": "3912520",
    "end": "3919400"
  },
  {
    "text": "okay all right let's do",
    "start": "3921599",
    "end": "3927559"
  },
  {
    "text": "this one all right so the next two I'll show you together as well this is an example",
    "start": "3927559",
    "end": "3935200"
  },
  {
    "text": "of a two-dimensional scroll view so what I what I've basically created here is a View group that we can stick child views",
    "start": "3935200",
    "end": "3942160"
  },
  {
    "text": "inside of and if those views are just completely huge we can scroll you know in both directions to pan all the way",
    "start": "3942160",
    "end": "3948240"
  },
  {
    "text": "around the content right so and I you can see that I can fling this and it animates and I can you know scroll it",
    "start": "3948240",
    "end": "3954839"
  },
  {
    "text": "stops at the bounce in both directions and all that stuff but these are these are all buttons and if I tap them the",
    "start": "3954839",
    "end": "3960440"
  },
  {
    "text": "buttons are still clickable right so I'm not stealing all the events just when necessary",
    "start": "3960440",
    "end": "3966520"
  },
  {
    "text": "okay then I have a second example that's very similar to that that's the same visual Behavior using just a single",
    "start": "3966520",
    "end": "3973079"
  },
  {
    "text": "large image um but in this case what we're implementing is we're doing all of this same code with a gesture detector",
    "start": "3973079",
    "end": "3980599"
  },
  {
    "text": "okay so it's the same basic functionality that we end up with in both cases but you can see how much more",
    "start": "3980599",
    "end": "3985839"
  },
  {
    "text": "or less code is required to do that whether you do it all yourself or you do it with the gesture detector",
    "start": "3985839",
    "end": "3993200"
  },
  {
    "text": "okay come back to this one let's do the gesture first first okay and then I'm",
    "start": "3998920",
    "end": "4004960"
  },
  {
    "text": "going to quickly walk you through it's not really relevant to touch but I want you to know what you're looking at if you go back over the sample code later",
    "start": "4004960",
    "end": "4010559"
  },
  {
    "text": "there's a bunch of code in this view to do the scrolling piece um which is only",
    "start": "4010559",
    "end": "4016319"
  },
  {
    "text": "Loosely coupled to the touch interaction so but we'll see what that is so um as we're scrolling down here notice the",
    "start": "4016319",
    "end": "4022400"
  },
  {
    "text": "first thing that I do is get that slop constant when the view is initialized so that I can do those checks for the",
    "start": "4022400",
    "end": "4028039"
  },
  {
    "text": "dragging okay these uh the next few methods are",
    "start": "4028039",
    "end": "4034640"
  },
  {
    "text": "specifically related to the scrolling piece so the I'm overwriting these two methods on View group called measure",
    "start": "4034640",
    "end": "4040880"
  },
  {
    "text": "child and measure child with margins uh in most view groups like The Frame layout that we're using here uh by",
    "start": "4040880",
    "end": "4047920"
  },
  {
    "text": "default they don't allow their children to be larger than themselves and they always Force constrain them to be at",
    "start": "4047920",
    "end": "4053839"
  },
  {
    "text": "least the same size or smaller so we're overwriting this method which is the same thing that scroll view does this is",
    "start": "4053839",
    "end": "4060200"
  },
  {
    "text": "actually just stolen from how scroll views implementation is done uh we're overriding these so that the child views",
    "start": "4060200",
    "end": "4067000"
  },
  {
    "text": "can be allowed to be measured larger than their parent container if they want to be and all all we're really doing is",
    "start": "4067000",
    "end": "4073400"
  },
  {
    "text": "changing their measure specs to be specified um if you have other specific questions about how view measurement and",
    "start": "4073400",
    "end": "4079920"
  },
  {
    "text": "stuff works I might refer you to the custom view session this morning look at those slides or maybe we can answer some other questions offline on that um but",
    "start": "4079920",
    "end": "4086880"
  },
  {
    "text": "that's all these are doing then these next two methods compute scroll and scroll two these are methods on any view",
    "start": "4086880",
    "end": "4093119"
  },
  {
    "text": "or View group that you can use to scroll content around so you don't have to you know do custom drawing or anything like",
    "start": "4093119",
    "end": "4099159"
  },
  {
    "text": "that you can just scroll a view by calling this scroll to method and it generates those scroll offsets to draw",
    "start": "4099159",
    "end": "4105838"
  },
  {
    "text": "the content at a different place okay uh now compute scroll is used in the animated side of things um using this",
    "start": "4105839",
    "end": "4112798"
  },
  {
    "text": "object called a a scroller I won't go in too much detail on that but a scroller is basically just a math engine to",
    "start": "4112799",
    "end": "4118238"
  },
  {
    "text": "animate your flings and then compute scroll is a repeated callback that the framework gives you so that you can",
    "start": "4118239",
    "end": "4123640"
  },
  {
    "text": "continue to animate um so again if you have more questions on that we can talk about that later uh and but our our",
    "start": "4123640",
    "end": "4129640"
  },
  {
    "text": "scroll two is being overridden simply so that we can clamp at the the edges of the content so I know when to stop",
    "start": "4129640",
    "end": "4134960"
  },
  {
    "text": "allowing scrolling not based on you know even if they keep trying to go the other",
    "start": "4134960",
    "end": "4140238"
  },
  {
    "text": "direction helper method for animating the fling but the real interesting stuff is",
    "start": "4140239",
    "end": "4145880"
  },
  {
    "text": "down here so in order to do that touch interaction to detect the scroll to",
    "start": "4145880",
    "end": "4150920"
  },
  {
    "text": "detect the flame to do all of those I'm just using a gesture detector okay so the gesture detector I'm overwriting",
    "start": "4150920",
    "end": "4156880"
  },
  {
    "text": "three methods I'm paying attention to on down uh essentially so that as I fling",
    "start": "4156880",
    "end": "4162560"
  },
  {
    "text": "if I touch my finger during the animation it should immediately stop it should abort whatever it's been doing which is what the framework does as well",
    "start": "4162560",
    "end": "4169440"
  },
  {
    "text": "um so just getting that same behavior is we just run that abort animation method on that animated",
    "start": "4169440",
    "end": "4175480"
  },
  {
    "text": "scrolling engine then we have onfling and on scroll so these two methods get called",
    "start": "4175480",
    "end": "4181880"
  },
  {
    "text": "well on fling gets called at the moment that you lift your finger and there's some velocity behind it and that tells",
    "start": "4181880",
    "end": "4188278"
  },
  {
    "text": "the it tells you as an application developer that you should start that animation so we're calling that fling",
    "start": "4188279",
    "end": "4193520"
  },
  {
    "text": "helper method which triggers the animation on the scroller uh the onscroll this one's",
    "start": "4193520",
    "end": "4200280"
  },
  {
    "text": "going to get called a lot so as you're dragging your finger for all these minuscule Deltas as you're dragging",
    "start": "4200280",
    "end": "4206320"
  },
  {
    "text": "you'll get on scroll on scroll on scroll on scroll okay so we don't have to do the math of figuring out when we've",
    "start": "4206320",
    "end": "4213400"
  },
  {
    "text": "moved this distance or which direction we've moved it does all that for us uh we just have to pass those into this",
    "start": "4213400",
    "end": "4219520"
  },
  {
    "text": "scroll by method which again is a method of view I don't have to write anything special I just tell the view to scroll its contents BAS based on how far we",
    "start": "4219520",
    "end": "4226080"
  },
  {
    "text": "moved we have to do any math or anything like that just take that distance hand it to the view okay scr scroll it as the",
    "start": "4226080",
    "end": "4233719"
  },
  {
    "text": "animated piece for flings this is all right on view call scroll it's going to call the",
    "start": "4233719",
    "end": "4239760"
  },
  {
    "text": "scroll two method that we have up here yes",
    "start": "4239760",
    "end": "4245440"
  },
  {
    "text": "okay so and then in order to trigger this thing we have some implementations",
    "start": "4245440",
    "end": "4251360"
  },
  {
    "text": "in uh on intercept and on touch events start with ontouch event ontouch event",
    "start": "4251360",
    "end": "4257120"
  },
  {
    "text": "is pretty simple for each event that I get I forward it to the detector in the story it does all the other math for me",
    "start": "4257120",
    "end": "4264400"
  },
  {
    "text": "to do that work um on intercept I have to do a little work because I don't want to do this for every touch event I only",
    "start": "4264400",
    "end": "4270040"
  },
  {
    "text": "want to do it once we've started dragging once we started dragging I want all the events to go through my detector",
    "start": "4270040",
    "end": "4275560"
  },
  {
    "text": "but I still want to be able to click the buttons and stuff like that so I'm checking against basically action down",
    "start": "4275560",
    "end": "4280920"
  },
  {
    "text": "and action move to say that when the finger goes down I need to figure out where that was",
    "start": "4280920",
    "end": "4286159"
  },
  {
    "text": "and then for every move event I need to check the Delta between my initial touch point and where I am now against that",
    "start": "4286159",
    "end": "4292400"
  },
  {
    "text": "slot value that's all there really is to a slop check but it makes a huge difference in the the user experience of",
    "start": "4292400",
    "end": "4299239"
  },
  {
    "text": "what you're trying to do with your touch okay all right so flip that over",
    "start": "4299239",
    "end": "4307480"
  },
  {
    "text": "to the two-dimensional scroll view I have a little question yeah so",
    "start": "4307480",
    "end": "4314040"
  },
  {
    "text": "I'm a bit confused why do we have",
    "start": "4314040",
    "end": "4318480"
  },
  {
    "text": "toou them well so they they serve different purposes right so the the",
    "start": "4319199",
    "end": "4324880"
  },
  {
    "text": "ontouch event is reporting to the framework that this event and subsequent events in the gesture you as a view want",
    "start": "4324880",
    "end": "4331320"
  },
  {
    "text": "to handle on intercept is saying that as a View group you want to take this",
    "start": "4331320",
    "end": "4336440"
  },
  {
    "text": "current gesture being handled by someone else and start handling it yourself so they have slightly different",
    "start": "4336440",
    "end": "4342880"
  },
  {
    "text": "use cases and un intercept is only available on View group just simple views don't have that ability it's just",
    "start": "4342880",
    "end": "4348320"
  },
  {
    "text": "that view groups can intercept touches from any of their children uh using by returning true from that particular",
    "start": "4348320",
    "end": "4354320"
  },
  {
    "text": "method so on intercept is more of a redirection of an existing gesture whereas on touch is more about consuming",
    "start": "4354320",
    "end": "4360560"
  },
  {
    "text": "events as part of the gesture you're currently working with okay all right so all the code up",
    "start": "4360560",
    "end": "4366600"
  },
  {
    "text": "to this point is exactly the same in the previous one as we have here uh the only difference here is now we have to manage",
    "start": "4366600",
    "end": "4373480"
  },
  {
    "text": "a lot of this ourselves so we have classes like a velocity tracker these are all part of the framework but",
    "start": "4373480",
    "end": "4379800"
  },
  {
    "text": "velocity trackers are used so that we can do the math of determining for each individual touch event whether or not",
    "start": "4379800",
    "end": "4386239"
  },
  {
    "text": "that velocity is worth detecting as a fling um so for each uh individual event",
    "start": "4386239",
    "end": "4392440"
  },
  {
    "text": "inside of on intercept and then further down inside of on touch we're constantly tracking these values by calling add",
    "start": "4392440",
    "end": "4399360"
  },
  {
    "text": "movement on the velocity tracker so velocity tracker is just another one of those math engines so that for each of",
    "start": "4399360",
    "end": "4405199"
  },
  {
    "text": "event it can tell me at any given time what is the velocity of the finger and then for in cases like when",
    "start": "4405199",
    "end": "4411560"
  },
  {
    "text": "we get to action up if we need to determine what the current velocity is",
    "start": "4411560",
    "end": "4417360"
  },
  {
    "text": "and figure out if we should call that a fling okay so now we're doing a fling check against those minmax velocity",
    "start": "4417360",
    "end": "4423440"
  },
  {
    "text": "values but uh velocity tracker gives us that information now notice this is a",
    "start": "4423440",
    "end": "4428639"
  },
  {
    "text": "case where up and cancel are different because I don't want to also start a fling if the uh an if the action event",
    "start": "4428639",
    "end": "4434840"
  },
  {
    "text": "was canceled only if it truly was a lift of the finger okay and the same thing for dragging we",
    "start": "4434840",
    "end": "4441639"
  },
  {
    "text": "have to do those same slop checks on dragging but then once the dragging occurs we have to do the calculation of",
    "start": "4441639",
    "end": "4447679"
  },
  {
    "text": "the Deltas our myself and then Place those inside the reference of scroll by",
    "start": "4447679",
    "end": "4453120"
  },
  {
    "text": "okay so it's the same basic net effect but the difference between using a detector and doing it ourselves is we",
    "start": "4453120",
    "end": "4458560"
  },
  {
    "text": "have to track all these State values and we have to do all the mathematics ourselves to pass into these scroll and",
    "start": "4458560",
    "end": "4464159"
  },
  {
    "text": "fling operations when to actually begin the drawing and",
    "start": "4464159",
    "end": "4469520"
  },
  {
    "text": "change it would be an up yeah it wouldn't know the difference between that and just leaving the screen",
    "start": "4471480",
    "end": "4478120"
  },
  {
    "text": "otherwise okay go quickly through this last one because we're basically out of",
    "start": "4478120",
    "end": "4484280"
  },
  {
    "text": "time okay so the last one that I'm going to show you is this multi-touch",
    "start": "4484280",
    "end": "4491679"
  },
  {
    "text": "example my tablet went to sleep okay so this last one that I've got is",
    "start": "4491679",
    "end": "4498600"
  },
  {
    "text": "an image View and if I put two fingers down I can rotate",
    "start": "4498600",
    "end": "4505520"
  },
  {
    "text": "it if I put three fingers down I can zoom",
    "start": "4505520",
    "end": "4511000"
  },
  {
    "text": "it okay it's a fairly simple",
    "start": "4511280",
    "end": "4515800"
  },
  {
    "text": "example there we go okay so that implementation is done",
    "start": "4520880",
    "end": "4526440"
  },
  {
    "text": "inside of a custom view that's just a subass of image view so I'm I'm in this case what I'm relying on is uh the fact",
    "start": "4526440",
    "end": "4534120"
  },
  {
    "text": "that image view can do all the image scaling for me U image view has a scaling Mode called Matrix and I can",
    "start": "4534120",
    "end": "4539760"
  },
  {
    "text": "apply any rotation Zoom scale whatever I'd like to in image and image view just by applying that math to a matrix and",
    "start": "4539760",
    "end": "4545639"
  },
  {
    "text": "then telling it use this and it will scale the image for me so I'm using that behavior and then adding in the touch",
    "start": "4545639",
    "end": "4551639"
  },
  {
    "text": "pieces so again when we construct The View I'm going to have one of those scale gesture detectors for the pinch",
    "start": "4551639",
    "end": "4556760"
  },
  {
    "text": "Zoom stuff uh and then I'm going to do the other ones myself then I and I'm going to create this Matrix that I apply",
    "start": "4556760",
    "end": "4562520"
  },
  {
    "text": "all the mathematics too so here we're using onze changed the",
    "start": "4562520",
    "end": "4567679"
  },
  {
    "text": "onze changed is called once the view has been laid out and measured and we know what its size is going to be so it's",
    "start": "4567679",
    "end": "4573440"
  },
  {
    "text": "kind of like one step after on measure um but at this point I can determine",
    "start": "4573440",
    "end": "4578520"
  },
  {
    "text": "where to place my image so that it's centered by default Matrix scaling puts it in the top left and I wanted to start",
    "start": "4578520",
    "end": "4583719"
  },
  {
    "text": "with it centered so we do a little bit of math to figure out where Center is and translate our Matrix the first",
    "start": "4583719",
    "end": "4589440"
  },
  {
    "text": "time we also set that pivot point which we'll use in the rotation then the the scale gesture",
    "start": "4589440",
    "end": "4596199"
  },
  {
    "text": "detector has a call back just like the other one does which is currently folded",
    "start": "4596199",
    "end": "4601360"
  },
  {
    "text": "there we go uh in a method called on scale so on scale the nice thing about the detector is it does the math of",
    "start": "4601360",
    "end": "4607840"
  },
  {
    "text": "telling me this distance between uh are my fingers moving farther apart or coming closer together and it does that",
    "start": "4607840",
    "end": "4613920"
  },
  {
    "text": "with a scale factor so the scale factor is essentially just a little bit more than one like 1.1 1.2 As you move this",
    "start": "4613920",
    "end": "4620480"
  },
  {
    "text": "way and a little bit less than one as you move this way and if you move faster it will be a you know larger number on",
    "start": "4620480",
    "end": "4626639"
  },
  {
    "text": "one side or the other so we can sort of take that scale factor and again I can just pass it straight into my Matrix",
    "start": "4626639",
    "end": "4632480"
  },
  {
    "text": "here to do the image scaling piece whenever the scale gesture has been detected okay so that's how the pinch",
    "start": "4632480",
    "end": "4637840"
  },
  {
    "text": "Zoom is working it's just those few lines of code and we'll come back to the rotation",
    "start": "4637840",
    "end": "4643360"
  },
  {
    "text": "in a second uh in on touch event I'm validating how many pointers I have on",
    "start": "4643360",
    "end": "4648719"
  },
  {
    "text": "the screen so if I have three fingers that's when I do I pass them to the scale detector and we get the zooming",
    "start": "4648719",
    "end": "4654880"
  },
  {
    "text": "effect if I have two on the screen I'm going to do my manual rotation calculation and if it's anything other",
    "start": "4654880",
    "end": "4661280"
  },
  {
    "text": "than that I'm just going to ignore this event okay so that this is where I return super not false right I I want to",
    "start": "4661280",
    "end": "4666600"
  },
  {
    "text": "make sure that everything else works as normal okay so the the rotation event is",
    "start": "4666600",
    "end": "4672320"
  },
  {
    "text": "really just a bunch of math you know where we figure out based on the the touch events of pointers zero and one",
    "start": "4672320",
    "end": "4678760"
  },
  {
    "text": "which are my two fingers you know basically where are the X and Y locations at any given time um do a",
    "start": "4678760",
    "end": "4684320"
  },
  {
    "text": "little bit of tangent math to figure out what that angle is and then once we know the angle in degrees I can post that as",
    "start": "4684320",
    "end": "4691320"
  },
  {
    "text": "a rotate to my Matrix okay done and anytime we update this Matrix we just",
    "start": "4691320",
    "end": "4698600"
  },
  {
    "text": "set it back to the image View and that tells the image view to update redraw and put it in the new place okay",
    "start": "4698600",
    "end": "4706760"
  },
  {
    "text": "all right so that's all I've got for you folks thank you for spending your afternoon with me I'm happy to hang",
    "start": "4711480",
    "end": "4716840"
  },
  {
    "text": "around if there's any other questions but I'll just say thank you now um feel free to contact me on Twitter app.net",
    "start": "4716840",
    "end": "4721960"
  },
  {
    "text": "go+ thanks you very much",
    "start": "4721960",
    "end": "4726440"
  }
]