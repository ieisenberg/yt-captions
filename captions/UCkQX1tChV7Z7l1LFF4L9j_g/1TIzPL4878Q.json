[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "all right so yep as Chris is saying I'm Tolly McMullen you can find me on",
    "start": "3879",
    "end": "9219"
  },
  {
    "text": "Twitter right here that's you being a felon if you disagree with the things that I say you can feel free to yell at me you can actually just yell at me",
    "start": "9219",
    "end": "15130"
  },
  {
    "text": "regardless I'm actually totally fine with that and I do work for this company and the the CTO of fastly and yeah if",
    "start": "15130",
    "end": "23859"
  },
  {
    "text": "you like the things that we're that I'm going to be describing here this is interesting to you you should feel free to come up and talk to me afterward we",
    "start": "23859",
    "end": "29319"
  },
  {
    "text": "are always looking for very skilled distributed system to people okay okay",
    "start": "29319",
    "end": "35020"
  },
  {
    "start": "35000",
    "end": "35000"
  },
  {
    "text": "what's up mm I figured you know the first day of Q con SF we would start",
    "start": "35020",
    "end": "41350"
  },
  {
    "text": "like nice and slow have a gentle high level you know description of distributed systems I'm just kidding",
    "start": "41350",
    "end": "47890"
  },
  {
    "text": "we're gonna build a gnarly distributed system together so this talk is kind of my response to what I see as like the",
    "start": "47890",
    "end": "54970"
  },
  {
    "start": "48000",
    "end": "48000"
  },
  {
    "text": "two types of distributed systems talks right you either end up usually having",
    "start": "54970",
    "end": "60550"
  },
  {
    "text": "talks about theory without implementation which is so useful in its own right or you have implementation",
    "start": "60550",
    "end": "67060"
  },
  {
    "text": "without theory where it's because they're often describing like okay we tie this technology to this technology",
    "start": "67060",
    "end": "72429"
  },
  {
    "text": "and bam distributed system which is also useful if you're trying to figure out like the practicalities of things but I",
    "start": "72429",
    "end": "78009"
  },
  {
    "text": "rarely find one that actually tries to bridge the gap between those two so this is my attempt to do that so we're gonna",
    "start": "78009",
    "end": "83049"
  },
  {
    "text": "have plenty of theory but we're also going to talk about some specific technologies we're gonna design a system",
    "start": "83049",
    "end": "89079"
  },
  {
    "text": "that involves cluster membership fault detection rendezvous hashing gossip and",
    "start": "89079",
    "end": "94450"
  },
  {
    "text": "Ciardi T's and I have 45 minutes to do it so we should probably get started so",
    "start": "94450",
    "end": "101200"
  },
  {
    "start": "100000",
    "end": "100000"
  },
  {
    "text": "start with the project itself right like you can talk about all these things in theory or in practice but like if you",
    "start": "101200",
    "end": "106329"
  },
  {
    "text": "don't actually talk about something that is like real it kind of loses a lot of meetings so the project we're going to",
    "start": "106329",
    "end": "113049"
  },
  {
    "text": "talk about is kind of specific to fastly but a lot of the principles still apply to other things so if you're not",
    "start": "113049",
    "end": "119859"
  },
  {
    "text": "familiar with what fastly does we're essentially like a middleman we're a proxy in a one way of putting it anyway",
    "start": "119859",
    "end": "128770"
  },
  {
    "text": "right we sit in between your users and your origin servers and so we try to do",
    "start": "128770",
    "end": "134260"
  },
  {
    "text": "things there at that middle layer that you could necessarily do at any other individual place in the network right so really in",
    "start": "134260",
    "end": "141849"
  },
  {
    "text": "in like the lowest possible terms you know you take a request from an end user here on the left and it sends it through",
    "start": "141849",
    "end": "148959"
  },
  {
    "text": "to the origin server on the right easy enough but really is of course is it",
    "start": "148959",
    "end": "155170"
  },
  {
    "text": "actually just one server on the right right most cuts most cut most of our customers have many servers whole clusters of servers datacenters sometimes right and",
    "start": "155170",
    "end": "162010"
  },
  {
    "text": "so really we're talking about a much larger number and so really what we're talking about is like load balancing of",
    "start": "162010",
    "end": "167469"
  },
  {
    "text": "some kind so individual requests come from the user and make it routed to one or a different origin server easy enough",
    "start": "167469",
    "end": "175299"
  },
  {
    "text": "right but here's where this project actually comes in if you're doing load balancing",
    "start": "175299",
    "end": "180579"
  },
  {
    "text": "of course you need some way of detecting when one of those servers is gone instead in some way or another so we",
    "start": "180579",
    "end": "188079"
  },
  {
    "text": "need some way of making sure that this doesn't happen yeah I have a lot of",
    "start": "188079",
    "end": "194169"
  },
  {
    "text": "animations in this talk we of course want to be able to route around like",
    "start": "194169",
    "end": "199329"
  },
  {
    "text": "individual failures in our customers origin servers race we need health some idea of Health some idea of health",
    "start": "199329",
    "end": "204400"
  },
  {
    "text": "checks but the problem is actually a little gnarlier than that we can't just health check everything because of",
    "start": "204400",
    "end": "211030"
  },
  {
    "text": "course it's not just one data center that we're talking about we have many data centers there we go",
    "start": "211030",
    "end": "219479"
  },
  {
    "text": "right so we have many data centers here and the trick with this is that the idea",
    "start": "219479",
    "end": "226269"
  },
  {
    "text": "of health and health checking in the distributed system like this really depends on your perspective within the",
    "start": "226269",
    "end": "231939"
  },
  {
    "text": "network so from each of these from the perspective of each of the individual",
    "start": "231939",
    "end": "237849"
  },
  {
    "text": "data centers different origins may appear to be up or down right the route",
    "start": "237849",
    "end": "243400"
  },
  {
    "text": "that you take through the internets has a great effect on the health the appeard health right it's all about perspective",
    "start": "243400",
    "end": "249400"
  },
  {
    "text": "and vantage point inside the network right okay so essentially we're designing a system that does health",
    "start": "249400",
    "end": "255219"
  },
  {
    "text": "checks but it needs to operate on a per datacenter basis that actually makes it easier right because that means that we're not having to share information",
    "start": "255219",
    "end": "261430"
  },
  {
    "text": "between multiple different data centers great ok but of course it gets a little",
    "start": "261430",
    "end": "266560"
  },
  {
    "text": "bit more complicated even each of these data centers isn't of",
    "start": "266560",
    "end": "271590"
  },
  {
    "text": "course a single server each of these data centers actually has many servers in them anywhere between 4 and 64",
    "start": "271590",
    "end": "278010"
  },
  {
    "text": "sometimes 128 servers in each of our data centers right and the trouble is",
    "start": "278010",
    "end": "285710"
  },
  {
    "text": "you of course can't do health checks from every single server that's just called a DDoS if we were health checking",
    "start": "285710",
    "end": "293669"
  },
  {
    "text": "let's say you had your health check set up at like once every second and we were health checking from every one of our servers that would mean you're getting",
    "start": "293669",
    "end": "298889"
  },
  {
    "text": "thousands of requests for a second right so instead what we really want what we really want is to be able to assume that",
    "start": "298889",
    "end": "306240"
  },
  {
    "text": "all the servers in one of our data centers actually have the same perspective in the network right and so",
    "start": "306240",
    "end": "311639"
  },
  {
    "text": "what we really want to do is say like ok only one of our servers within each data",
    "start": "311639",
    "end": "316800"
  },
  {
    "text": "center should be doing health checks on your origins ok now we have a distributed systems problem because of",
    "start": "316800",
    "end": "324120"
  },
  {
    "text": "course oh right of course sorry one of the other troubles with this is",
    "start": "324120",
    "end": "329880"
  },
  {
    "text": "that just due to like sheer asynchrony in the network and also like the design of our particular network not every",
    "start": "329880",
    "end": "335580"
  },
  {
    "text": "server in every data center has the same view of which origins exist or don't",
    "start": "335580",
    "end": "340710"
  },
  {
    "text": "exist at any one time right even if it just looking at the asynchrony of the",
    "start": "340710",
    "end": "345990"
  },
  {
    "text": "network if you deploy a new server you say hey fastly I have this new server sitting here we can't put a lock over",
    "start": "345990",
    "end": "351960"
  },
  {
    "text": "the entire system and say ok we're going to hold on everybody stop we're gonna like deploy a new server now right so",
    "start": "351960",
    "end": "357690"
  },
  {
    "text": "like it'll arrive at different servers at different moments right and so for individual like like minutes seconds",
    "start": "357690",
    "end": "365010"
  },
  {
    "text": "sometimes you know different servers may have a different view of which origins exist in which do not ok",
    "start": "365010",
    "end": "371669"
  },
  {
    "text": "now it's even more complicated ok so essentially what we're talking about",
    "start": "371669",
    "end": "380070"
  },
  {
    "text": "here is we need a way to distribute work right we need a way to essentially decide on ownership which server which",
    "start": "380070",
    "end": "387300"
  },
  {
    "text": "one of our servers which one of our nodes is going to take ownership of doing health checks for each individual",
    "start": "387300",
    "end": "392520"
  },
  {
    "text": "origin server again ideally we'll only have one inside each look inside each",
    "start": "392520",
    "end": "398340"
  },
  {
    "text": "data center doing this so we need to distribute this work them in order to share and then we need",
    "start": "398340",
    "end": "404520"
  },
  {
    "text": "to share the information that they're learning from doing these health checks with all the other servers in the data",
    "start": "404520",
    "end": "410460"
  },
  {
    "text": "centers this making sense so far good ok great but of course we also have to deal with",
    "start": "410460",
    "end": "416160"
  },
  {
    "text": "server failures on our side if an individual server inside one of our data centers fails we need to make sure that",
    "start": "416160",
    "end": "422220"
  },
  {
    "text": "the work that that server was doing is taken over by someone else ok great so",
    "start": "422220",
    "end": "430070"
  },
  {
    "text": "what we're talking about here is 50-plus data centers spread around the world anywhere between 4 and 64 sometimes more",
    "start": "430070",
    "end": "437370"
  },
  {
    "text": "servers in each data center talking about thousands of servers then and we're also talking about tens of",
    "start": "437370",
    "end": "443010"
  },
  {
    "text": "thousands of origin servers that we're worrying about health checking all right so to recap the system that we're going",
    "start": "443010",
    "end": "450840"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "to design is something that keeps track of origin health per data center and make sure that regardless of our servers",
    "start": "450840",
    "end": "458430"
  },
  {
    "text": "failures there is someone always doing health checks of your origin servers ok",
    "start": "458430",
    "end": "464330"
  },
  {
    "text": "system needs to handle server failures gracefully needs to stay in sync as much as possible or at the very least be",
    "start": "464330",
    "end": "471360"
  },
  {
    "text": "deterministic when it does go out of sync and ideally again only having one server health checking each origin",
    "start": "471360",
    "end": "477300"
  },
  {
    "text": "server per datacenter ok everybody still with me cool",
    "start": "477300",
    "end": "483180"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "all right so like we'll start about one possible solution to this we could use a",
    "start": "483180",
    "end": "488669"
  },
  {
    "start": "484000",
    "end": "484000"
  },
  {
    "text": "system like at CD or console a zookeeper these are what you might describe as I",
    "start": "488669",
    "end": "494970"
  },
  {
    "text": "imagine most of the people in the room here I've heard of like the cap theorem right see AP this is the whole idea",
    "start": "494970",
    "end": "500100"
  },
  {
    "text": "behind like ok if you if you have partitions in your network what you do you can only choose between consistency",
    "start": "500100",
    "end": "507090"
  },
  {
    "text": "and availability right you can't have both so essentially in the case of like",
    "start": "507090",
    "end": "515310"
  },
  {
    "text": "console or at CB or zookeeper what we're talking about here is this idea of atomic broadcast the idea is that like",
    "start": "515310",
    "end": "521010"
  },
  {
    "text": "it's a fully consistent system and if there are say partitions that happen inside your data center it means that",
    "start": "521010",
    "end": "527670"
  },
  {
    "text": "that system may in fact stop right which is great in some ways right because it",
    "start": "527670",
    "end": "533550"
  },
  {
    "text": "means that we could apply a total order to every event happens in the system which would be great it would make this whole thing a",
    "start": "533550",
    "end": "539010"
  },
  {
    "text": "lot easier but my argument is that in this case also because this would be a boring talk if I was just like use",
    "start": "539010",
    "end": "544890"
  },
  {
    "start": "543000",
    "end": "543000"
  },
  {
    "text": "console it might in my opinion this is",
    "start": "544890",
    "end": "549899"
  },
  {
    "text": "actually too strong of consistency for this particular application in other",
    "start": "549899",
    "end": "555690"
  },
  {
    "text": "words in the presence of partitions we are going to attempt to choose availability right console chooses",
    "start": "555690",
    "end": "561720"
  },
  {
    "text": "consistency our system is going to choose availability so what we're essentially talking about in this case",
    "start": "561720",
    "end": "567810"
  },
  {
    "text": "is some form of eventual consistency great but really really the thing that",
    "start": "567810",
    "end": "574080"
  },
  {
    "start": "574000",
    "end": "574000"
  },
  {
    "text": "we care about the thing that we actually care about here is this idea of forward progress we want to be assured that",
    "start": "574080",
    "end": "580700"
  },
  {
    "text": "regardless of what happens inside our network inside our data centers that each individual server there regardless",
    "start": "580700",
    "end": "587370"
  },
  {
    "text": "of whether or not it can talk to the other servers we want to make sure that it can always make forward progress another way of looking at this is to say",
    "start": "587370",
    "end": "593430"
  },
  {
    "text": "that in the case of like a system or network failure of some kind I would much prefer for us to do two health",
    "start": "593430",
    "end": "600720"
  },
  {
    "text": "checks against your Oregon servers than to do zero health checks that make sense so obviously you know this this is kind",
    "start": "600720",
    "end": "609450"
  },
  {
    "text": "of the idea of like coordination avoidance right obviously we need to communicate I mean you coordinate in some way but we",
    "start": "609450",
    "end": "615930"
  },
  {
    "text": "want to make sure that that communication that protocol that we design can't block forward progress on any individual node all right a great",
    "start": "615930",
    "end": "624540"
  },
  {
    "text": "paper on this particular thing is coordination coordination avoidance in database systems by the lake venerable",
    "start": "624540",
    "end": "631080"
  },
  {
    "text": "Peter Bayliss and Joseph Heller Stein and so on so the question is really like if we can't just like rub some raft or",
    "start": "631080",
    "end": "637200"
  },
  {
    "text": "paxos on the problem like what can we do what guarantees can we continue to make",
    "start": "637200",
    "end": "642320"
  },
  {
    "text": "regardless of that we can't rely on ordering and atomicity to solve our problems which is what linearize ability",
    "start": "642320",
    "end": "648990"
  },
  {
    "text": "our CP type system would give you we need to decide which invariants we need",
    "start": "648990",
    "end": "654149"
  },
  {
    "text": "in which we don't so okay let's talk about ownership so just a recap again",
    "start": "654149",
    "end": "664170"
  },
  {
    "start": "659000",
    "end": "659000"
  },
  {
    "text": "this is the idea that we need to spread work around and handle failures when it",
    "start": "664170",
    "end": "669180"
  },
  {
    "text": "occurs okay so how many people here have heard about rendezvous hashing Wow only",
    "start": "669180",
    "end": "677790"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "a few neat I'm happy to like help so rendezvous hashing was invented at the",
    "start": "677790",
    "end": "684150"
  },
  {
    "text": "university of michigan in 1986 it was actually invented like concurrently with consistent hashing which I imagine a lot",
    "start": "684150",
    "end": "690930"
  },
  {
    "text": "more people in the room know about it solves the same problem but in like a significantly different way and it's",
    "start": "690930",
    "end": "696720"
  },
  {
    "text": "like good in different circumstances so what what it basically just looks like",
    "start": "696720",
    "end": "702029"
  },
  {
    "text": "is this it's actually really it's really really straightforward so H is just a",
    "start": "702029",
    "end": "708540"
  },
  {
    "text": "hash function simple enough any hash function probably want to choose a good one I don't know if s then here is what",
    "start": "708540",
    "end": "716970"
  },
  {
    "text": "we're talking about is the set of live servers the servers that we care about within a particular data center the Oh",
    "start": "716970",
    "end": "723029"
  },
  {
    "text": "in this case is the thing that we are hashing right so in this case it's an Origin server that we're deciding on the",
    "start": "723029",
    "end": "728520"
  },
  {
    "text": "owner of and what we out of this is a weight or priority so what this ends up",
    "start": "728520",
    "end": "735540"
  },
  {
    "text": "looking like is that if I go and I pass an Origin into this and I iterate",
    "start": "735540",
    "end": "741000"
  },
  {
    "text": "through this hash function for every server in one of our data centers what you end up with is an ordered list you",
    "start": "741000",
    "end": "747120"
  },
  {
    "text": "end up with a prioritized list of which server should own a particular origin",
    "start": "747120",
    "end": "752750"
  },
  {
    "text": "this makes sense right so yeah that's the whole idea here is that like for any",
    "start": "752750",
    "end": "758459"
  },
  {
    "text": "individual organ server we want to have a prioritized list so we know that if",
    "start": "758459",
    "end": "764190"
  },
  {
    "text": "this server is up if the server a or B is up that one is the one that should out it if it's down",
    "start": "764190",
    "end": "769529"
  },
  {
    "text": "here's the next one in the list that should own it okay so",
    "start": "769529",
    "end": "774959"
  },
  {
    "text": "let's talk about failure detection then all right so if we're gonna communicate",
    "start": "774959",
    "end": "781529"
  },
  {
    "start": "777000",
    "end": "777000"
  },
  {
    "text": "in a cluster or move work around in the cluster we need to know who is in the cluster who is out of the cluster who is",
    "start": "781529",
    "end": "789150"
  },
  {
    "text": "alive and who is dead at any particular moment right",
    "start": "789150",
    "end": "794029"
  },
  {
    "text": "yeah nice so one of the ways that that",
    "start": "794810",
    "end": "800690"
  },
  {
    "text": "people have started doing this lately one of the more popular failure detectors is the swim fare detector this",
    "start": "800690",
    "end": "806600"
  },
  {
    "text": "is like become one of the more popular ones over the last few years and so like guys let's walk through roughly like",
    "start": "806600",
    "end": "812450"
  },
  {
    "text": "very high level how this works so the idea here is that every so often",
    "start": "812450",
    "end": "818740"
  },
  {
    "text": "servers that are in a data center you know they wake up and they say hmm okay I know that the server used to be here",
    "start": "818740",
    "end": "825410"
  },
  {
    "text": "my pier used to be here and so I'll wake up and I'll say okay hey are you up",
    "start": "825410",
    "end": "833080"
  },
  {
    "text": "right and that server responds and is like yeah I'm up great",
    "start": "833080",
    "end": "839180"
  },
  {
    "text": "okay cool now we know that that server is up and server one in this case but then broadcast that around the network and say hey three is still alive",
    "start": "839180",
    "end": "845720"
  },
  {
    "text": "everything is cool keep moving on the other hand sometimes what had since is",
    "start": "845720",
    "end": "851210"
  },
  {
    "text": "that server one will say hey you up server three doesn't respond and nothing",
    "start": "851210",
    "end": "856610"
  },
  {
    "text": "happens so the idea with swim is that swim then says hey two and four can you",
    "start": "856610",
    "end": "862910"
  },
  {
    "text": "check on three maybe there's just like a little communication blip between us I can't quite tell if it's up right now right and so then three is checked by",
    "start": "862910",
    "end": "873050"
  },
  {
    "text": "two and four three responds four says yeah it's totally still up everything's cool and then of course you have like",
    "start": "873050",
    "end": "880100"
  },
  {
    "text": "the example the down server where we do the same thing three never responds and",
    "start": "880100",
    "end": "885890"
  },
  {
    "text": "we know that it's dead right so that's like it's actually a really simple",
    "start": "885890",
    "end": "891440"
  },
  {
    "text": "protocol it's hard to get like all the little fiddly bits of it totally correct so I wouldn't recommend actually just",
    "start": "891440",
    "end": "897320"
  },
  {
    "text": "going out and trying to implement swim if you're actually trying to make a production system and said you can use something like member list so member",
    "start": "897320",
    "end": "903890"
  },
  {
    "start": "902000",
    "end": "902000"
  },
  {
    "text": "list is a house record project the whole idea here is that it's just a way of determining what is in it like which",
    "start": "903890",
    "end": "910550"
  },
  {
    "text": "servers are still alive at any one particular moment that's the whole idea behind failure detectors veteran techs",
    "start": "910550",
    "end": "916700"
  },
  {
    "text": "are actually like a totally fascinating area of distributed systems which I totally recommend reading about we",
    "start": "916700",
    "end": "921770"
  },
  {
    "text": "probably don't have time to go into it right now so so for our example system here we're just going to use member list great that",
    "start": "921770",
    "end": "928310"
  },
  {
    "text": "gives us an easy way to like achieve this fault detection thing that we need to achieve",
    "start": "928310",
    "end": "933699"
  },
  {
    "text": "okay so we have a way of load balancing",
    "start": "933699",
    "end": "938810"
  },
  {
    "start": "936000",
    "end": "936000"
  },
  {
    "text": "using rendezvous hashing we have a way of determining ownership also using rendezvous hashing will you swim be a",
    "start": "938810",
    "end": "945649"
  },
  {
    "text": "member list for failure detection and cluster management but of course we also need a way to communicate",
    "start": "945649",
    "end": "950829"
  },
  {
    "text": "hmm everyone here is probably at least a little familiar with the concept of",
    "start": "950829",
    "end": "956839"
  },
  {
    "text": "gossip right periodically each server decides to send messages that it has",
    "start": "956839",
    "end": "963620"
  },
  {
    "text": "like that has received from other servers or that it has generated itself and it chooses other service that random within the network and says hey here's",
    "start": "963620",
    "end": "970220"
  },
  {
    "text": "what I know or possibly it says hey what do you know please tell me things so this is kind of",
    "start": "970220",
    "end": "978019"
  },
  {
    "text": "the idea behind like push versus pull and gossip another way of doing gossip",
    "start": "978019",
    "end": "983209"
  },
  {
    "start": "979000",
    "end": "979000"
  },
  {
    "text": "is that pool system where instead of saying like here's my messages like a fire-and-forget type of thing and said what you do is say hey what do you have",
    "start": "983209",
    "end": "989750"
  },
  {
    "text": "please tell me things there's advantages and disadvantages to both so push as you",
    "start": "989750",
    "end": "996050"
  },
  {
    "text": "might expect like if you're pushing you know that you're immediately getting your messages out and so when you look",
    "start": "996050",
    "end": "1001810"
  },
  {
    "text": "at like the growth rates of message delivery and they push based gossip system what you see is a huge spike at",
    "start": "1001810",
    "end": "1008079"
  },
  {
    "text": "the beginning and then it slowly levels out until it gets to every server in the network pool on the other hand is a",
    "start": "1008079",
    "end": "1015220"
  },
  {
    "text": "totally different piece what pool does is instead of again instead of saying like here fire-and-forget you're waiting for",
    "start": "1015220",
    "end": "1020860"
  },
  {
    "text": "someone to ask you about your messages right and so if you look at the growth rate of a pool based gossip system what",
    "start": "1020860",
    "end": "1027910"
  },
  {
    "text": "you end up seeing is that for a little while your message doesn't get around to anybody and then eventually someone asks",
    "start": "1027910",
    "end": "1034298"
  },
  {
    "text": "you and suddenly as soon as it starts to grow it starts to grow rapidly it hits every server really quickly so it ends",
    "start": "1034299",
    "end": "1040600"
  },
  {
    "text": "up being this like they are both log n time but they get there in a slightly different way so in our particular case",
    "start": "1040600",
    "end": "1047678"
  },
  {
    "text": "for this particular application we're gonna go with a pool based system and I will try to explain why as we get into",
    "start": "1047679",
    "end": "1054370"
  },
  {
    "text": "like a later part of the talk but for now just now we're gonna go with gossip it's gonna be a pool based system okay",
    "start": "1054370",
    "end": "1060100"
  },
  {
    "text": "so yes convergence okay so again we're",
    "start": "1060100",
    "end": "1069280"
  },
  {
    "start": "1064000",
    "end": "1064000"
  },
  {
    "text": "making an eventually consistent system we're gonna use rendezvous hashing for it for load balancing and ownership",
    "start": "1069280",
    "end": "1074290"
  },
  {
    "text": "we're gonna use swim for failure detection we're gonna use some form of some form of gossip for communication",
    "start": "1074290",
    "end": "1079660"
  },
  {
    "text": "and so that's actually much of the infrastructure of our system right that's actually a lot of like the actual",
    "start": "1079660",
    "end": "1085030"
  },
  {
    "text": "lake or guts of it like gossip better detection okay great but we still need to talk about how we keep everything in",
    "start": "1085030",
    "end": "1092110"
  },
  {
    "text": "sync how we know that the system will converge in some way I guess essentially what we're talking",
    "start": "1092110",
    "end": "1099640"
  },
  {
    "text": "about is we need to design the protocol right so okay so let's talk about convergence like this is the idea of",
    "start": "1099640",
    "end": "1105430"
  },
  {
    "text": "like knowing that regardless of like which way the messages arrive when they arrive like who is up and who is down",
    "start": "1105430",
    "end": "1111460"
  },
  {
    "text": "that eventually the system every node will converge to the same set of values okay how so how do we do that so going",
    "start": "1111460",
    "end": "1123370"
  },
  {
    "text": "back to like the eventual consistency decision that we made early on we can actually do better than just a like",
    "start": "1123370",
    "end": "1129070"
  },
  {
    "text": "basic weak eventual consistency rather than again so going back to like",
    "start": "1129070",
    "end": "1134860"
  },
  {
    "text": "linearize ability and like one of those CP type systems which assign a total",
    "start": "1134860",
    "end": "1139990"
  },
  {
    "text": "order to events a total order meaning essentially that like anything that happens in a CP system you know they're",
    "start": "1139990",
    "end": "1146680"
  },
  {
    "text": "like this event happened before or after any other event there's no non determinism in there so with causality",
    "start": "1146680",
    "end": "1153270"
  },
  {
    "text": "the idea is that we assign a partial order to events so what does that mean",
    "start": "1153270",
    "end": "1159240"
  },
  {
    "text": "it allows us to say that some events happened before or happened after other",
    "start": "1159240",
    "end": "1165340"
  },
  {
    "text": "events but it also allows us to say that some events actually just happened at the same time so one could think of it",
    "start": "1165340",
    "end": "1171400"
  },
  {
    "text": "as like much more consistent with how the world actually works right like that our universe is a lot more causally",
    "start": "1171400",
    "end": "1178000"
  },
  {
    "text": "consistent than it is like linearizable so let's look at an example of this",
    "start": "1178000",
    "end": "1184290"
  },
  {
    "text": "let's say we have we have two actors here we have Jack and we have Joe great",
    "start": "1184290",
    "end": "1189790"
  },
  {
    "text": "so Jack and Joe are just trying to decide what they're going to eat for lunch",
    "start": "1189790",
    "end": "1195260"
  },
  {
    "text": "Jack suggests let's have arugula grates Jack then says okay arugula tells Jill I",
    "start": "1195260",
    "end": "1203600"
  },
  {
    "text": "have decided upon arugula Jill on the other hand is like you know what I don't",
    "start": "1203600",
    "end": "1209900"
  },
  {
    "text": "like arugula I like burgers Jill wants burgers and so what happens is in this case we know that arugula happened",
    "start": "1209900",
    "end": "1218000"
  },
  {
    "text": "before burgers so essentially this is going okay when Jill made the decision",
    "start": "1218000",
    "end": "1223880"
  },
  {
    "text": "burgers she already knew that Jack had said arugula great so we know that the",
    "start": "1223880",
    "end": "1231470"
  },
  {
    "text": "burgers event happened before I'm sorry the arugula then happened before burgers event so Jill then replicates",
    "start": "1231470",
    "end": "1237169"
  },
  {
    "text": "that back to Jack and Jack is like now I don't think so that's I don't want burgers I instead one calzone great well",
    "start": "1237169",
    "end": "1244400"
  },
  {
    "text": "while at the same time Jill is like actually I changed my mind",
    "start": "1244400",
    "end": "1249679"
  },
  {
    "text": "I don't want burgers I actually want a doll okay great so in this case what we can say is that",
    "start": "1249679",
    "end": "1255380"
  },
  {
    "text": "burgers happen before calzone and burgers also happen before doll however as we replicate those messages back and",
    "start": "1255380",
    "end": "1262309"
  },
  {
    "text": "forth to each other we now realize that calzone didn't happen before doll and doll didn't",
    "start": "1262309",
    "end": "1267470"
  },
  {
    "text": "happen before calzone they are in fact concurrent with each other and so that is the example of lunch based causality",
    "start": "1267470",
    "end": "1275799"
  },
  {
    "text": "okay so now that we have like some basis for like when we're talking about causality let's talk about something",
    "start": "1276340",
    "end": "1281600"
  },
  {
    "text": "that's related let's talk about lattices so lattices",
    "start": "1281600",
    "end": "1287330"
  },
  {
    "start": "1283000",
    "end": "1283000"
  },
  {
    "text": "are data structure a mathematical concept of some kind and specifically in",
    "start": "1287330",
    "end": "1294020"
  },
  {
    "text": "this case what we're talking about if you wanted to look this up later or read about it more is a what's called a joined semi lattice so what that means",
    "start": "1294020",
    "end": "1301790"
  },
  {
    "text": "is essentially it's a data structure a concept of some kind upon which you can always apply what's called a least upper",
    "start": "1301790",
    "end": "1308030"
  },
  {
    "text": "bound aka a join aka emerge function right so what it's saying is that if you have two",
    "start": "1308030",
    "end": "1314990"
  },
  {
    "text": "lattices to join semi lattices there is always a merge function that you can apply to them okay let's talk about what",
    "start": "1314990",
    "end": "1322250"
  },
  {
    "text": "that means so lettuces start from a root or a bottom",
    "start": "1322250",
    "end": "1328240"
  },
  {
    "text": "value despite the fact that our dot is at the top here and from that empty value if you are like operating on this",
    "start": "1328240",
    "end": "1334870"
  },
  {
    "text": "thing if you have two different three different actors that are operating on this lattice they can diverge right but",
    "start": "1334870",
    "end": "1342220"
  },
  {
    "text": "the thing is those branches no matter how much they diverge can always be merged back together in some way again",
    "start": "1342220",
    "end": "1348220"
  },
  {
    "text": "no matter how much how much time has passed they can always be like brought back together at least two of them can",
    "start": "1348220",
    "end": "1354040"
  },
  {
    "text": "always be merged so and then of course they can diverge again after that okay",
    "start": "1354040",
    "end": "1360010"
  },
  {
    "text": "so let's go back to causality turns out lattices are super useful for modeling",
    "start": "1360010",
    "end": "1365620"
  },
  {
    "start": "1362000",
    "end": "1362000"
  },
  {
    "text": "causality for reasons that you can probably already see and specifically in",
    "start": "1365620",
    "end": "1371230"
  },
  {
    "start": "1371000",
    "end": "1371000"
  },
  {
    "text": "this case what we're talking about is a concept called version vectors the idea behind version vectors well",
    "start": "1371230",
    "end": "1377170"
  },
  {
    "text": "actually let's just let's just walk through an example of a version vectors scenario okay so in this case let's say",
    "start": "1377170",
    "end": "1384100"
  },
  {
    "text": "we have three servers we have s 1 we have s 2 and we have s 3 right s1 has an",
    "start": "1384100",
    "end": "1391180"
  },
  {
    "text": "event of some kind in this case maybe it's doing a health check for instance",
    "start": "1391180",
    "end": "1396240"
  },
  {
    "text": "ok so s 1 increments it's it's",
    "start": "1396240",
    "end": "1401590"
  },
  {
    "text": "individual index in that version vector so we have three nodes we have three indexes we have three slots in our",
    "start": "1401590",
    "end": "1407740"
  },
  {
    "text": "version vector s one is going to increment one because an event happened right that's one can then replicate that",
    "start": "1407740",
    "end": "1416020"
  },
  {
    "text": "down to s 2 and now s 2 sees ok I have seen s one's events from there we can",
    "start": "1416020",
    "end": "1423760"
  },
  {
    "text": "then go ok well we have more events that are occurring right so in this case s 2 has its own event and so now it's",
    "start": "1423760",
    "end": "1430090"
  },
  {
    "text": "version vectors 1 1 0 because it has seen s 1 s event and also has its own event meanwhile s 3 at the bottom hasn't",
    "start": "1430090",
    "end": "1437500"
  },
  {
    "text": "seen any of these so it is just incrementing its own then of course we",
    "start": "1437500",
    "end": "1442660"
  },
  {
    "text": "can merge these back together from s 3 to s 2 and now s 2 knows that it has",
    "start": "1442660",
    "end": "1447790"
  },
  {
    "text": "seen the events from every other node so that's the whole idea behind version vectors right so this gives us a way of",
    "start": "1447790",
    "end": "1454180"
  },
  {
    "text": "tracking causality gives us a way of seeing like this thing happened before this other things in this particular case given that s3",
    "start": "1454180",
    "end": "1462190"
  },
  {
    "text": "hadn't actually seen any of the other events that occurred on the other parts of the system its event is concurrent",
    "start": "1462190",
    "end": "1469179"
  },
  {
    "text": "with all of the other ones and you can determine that based on that version vector and so of course it continues on",
    "start": "1469179",
    "end": "1477360"
  },
  {
    "text": "and so it turns out that you can actually model this exactly the way that",
    "start": "1477360",
    "end": "1483549"
  },
  {
    "text": "you model lattices so again if you have your root value there at the bottom zero zero zero for our version vector it can",
    "start": "1483549",
    "end": "1490059"
  },
  {
    "text": "diverge it can merge and it can continue merging there and then of course diverge",
    "start": "1490059",
    "end": "1496659"
  },
  {
    "text": "again this making sense cool so one way",
    "start": "1496659",
    "end": "1505960"
  },
  {
    "text": "of applying lattices to distributed systems problems is through this idea of CR DTS and so what we're gonna design",
    "start": "1505960",
    "end": "1513190"
  },
  {
    "text": "next is actually what's called a coordination free distributed map it's a CR DT map of some kind okay so we",
    "start": "1513190",
    "end": "1521799"
  },
  {
    "start": "1515000",
    "end": "1515000"
  },
  {
    "text": "need a data structure that we can replicate that it respects causality in our case and is guaranteed to always",
    "start": "1521799",
    "end": "1528309"
  },
  {
    "text": "converge so again CR DT map great okay what it looks like",
    "start": "1528309",
    "end": "1536500"
  },
  {
    "text": "is something like this this goes back to like when we were talking about before with our pool based gossip system so",
    "start": "1536500",
    "end": "1542350"
  },
  {
    "text": "what we're gonna do is say okay when one node wants to exchange state with another node it wakes up and it gets its",
    "start": "1542350",
    "end": "1550600"
  },
  {
    "text": "own version it looks at its own version its own version vector and it says hey here's what I have seen this is my",
    "start": "1550600",
    "end": "1556000"
  },
  {
    "text": "summary of the causal context I have seen so far in our distributed system",
    "start": "1556000",
    "end": "1561039"
  },
  {
    "text": "and it's going to take its version vector it C realizes it and it sends it out over the network and my prototype of",
    "start": "1561039",
    "end": "1567460"
  },
  {
    "text": "the system it actually just uses HTTP it could use really anything any way that you want to communicate between them so",
    "start": "1567460",
    "end": "1573340"
  },
  {
    "text": "what it does is it sends this version and it gives a way of summarizing it says like okay I have seen up to this",
    "start": "1573340",
    "end": "1580629"
  },
  {
    "text": "particular cut in our causal time so what that does is it allows the know",
    "start": "1580629",
    "end": "1587230"
  },
  {
    "text": "that is communicating with to come up with a delta that node also has its own",
    "start": "1587230",
    "end": "1592240"
  },
  {
    "text": "set its own set of like operations that is seen like these two nodes are operating independently one sends its version this",
    "start": "1592240",
    "end": "1598840"
  },
  {
    "text": "one can then take that version and go okay I know that you have seen all these things let me show you everything that's",
    "start": "1598840",
    "end": "1604150"
  },
  {
    "text": "newer that I have seen great so it constructs its Delta it sends it back",
    "start": "1604150",
    "end": "1610270"
  },
  {
    "text": "and then the first node can just merge it because again this Delta that we're",
    "start": "1610270",
    "end": "1615909"
  },
  {
    "text": "operating on is actually a lattice so it can always be merged back together with whatever state that node has pretty cool",
    "start": "1615909",
    "end": "1623970"
  },
  {
    "text": "so this is again called a deltas oh yes this is actually not just a regular CR",
    "start": "1623970",
    "end": "1630250"
  },
  {
    "start": "1626000",
    "end": "1626000"
  },
  {
    "text": "TT map what we're talking about in this case is a Delta si R DT map because it's not exchanging the entire state each",
    "start": "1630250",
    "end": "1636039"
  },
  {
    "text": "time it's actually exchanging Delta's which are themselves a lattice okay so",
    "start": "1636039",
    "end": "1643620"
  },
  {
    "text": "let's just look at code it's actually like surprisingly easy to do this so",
    "start": "1643890",
    "end": "1649179"
  },
  {
    "text": "this particular project was written and go so what we're talking about in this case is actually just a very simple thing so we have our shared map at the",
    "start": "1649179",
    "end": "1656409"
  },
  {
    "text": "top that we're going to exchange back and forth with each other that shared map has its like actual underlying",
    "start": "1656409",
    "end": "1661480"
  },
  {
    "text": "storage and it actually has a version vector that goes along with it so it",
    "start": "1661480",
    "end": "1666490"
  },
  {
    "text": "remembers what its current state looks like a summary of its current state each of the shared map records includes its",
    "start": "1666490",
    "end": "1673029"
  },
  {
    "text": "value but it also includes what's called a version vector dot so where a version",
    "start": "1673029",
    "end": "1678039"
  },
  {
    "text": "vector includes like is a way of summarizing the entire state a version vector dot is a way of saying this is",
    "start": "1678039",
    "end": "1685090"
  },
  {
    "text": "one particular event so a version vector dot in this case is actually just a couple of a server ID and an event",
    "start": "1685090",
    "end": "1692320"
  },
  {
    "text": "number right so it doesn't give you the full causal context but it says it tells you where in that cause of context this",
    "start": "1692320",
    "end": "1698500"
  },
  {
    "text": "one particular value came from okay so again what we're gonna do is for our",
    "start": "1698500",
    "end": "1706539"
  },
  {
    "text": "delta c r dt map the first step is easy we just take our version vector we serialize it we send it over the wire",
    "start": "1706539",
    "end": "1712360"
  },
  {
    "text": "great now when our chosen gasa partner",
    "start": "1712360",
    "end": "1718149"
  },
  {
    "text": "receives that particular message what it will do it goes through each record in the map and it says okay",
    "start": "1718149",
    "end": "1725680"
  },
  {
    "text": "did this version vector happened before this particular event which based on the",
    "start": "1725680",
    "end": "1734500"
  },
  {
    "text": "fact that you have this version vector that contains a summary of every possible event that occurred in the past and you have the individual event that",
    "start": "1734500",
    "end": "1741580"
  },
  {
    "text": "this value came from we have a really easy way of saying okay did this event happen later or did it happen",
    "start": "1741580",
    "end": "1747850"
  },
  {
    "text": "concurrently with it if either of those are true we know that that other node didn't actually see this event yet so it",
    "start": "1747850",
    "end": "1753400"
  },
  {
    "text": "gives us a way of deciding which things to put into our Delta great so yes if",
    "start": "1753400",
    "end": "1761200"
  },
  {
    "text": "the version happened before our individual record or is concurrent with it we add it to the Delta great that's it that's actually all we do then we",
    "start": "1761200",
    "end": "1767620"
  },
  {
    "text": "send the Delta back and then the merge",
    "start": "1767620",
    "end": "1772720"
  },
  {
    "text": "function here is actually slightly more complicated but really not not that bad",
    "start": "1772720",
    "end": "1778050"
  },
  {
    "text": "the idea here is that we go through each record in the Delta and if the dot",
    "start": "1778230",
    "end": "1783520"
  },
  {
    "text": "associated with the record still happened before our version back there because again remember like when we're talking about sending things over the",
    "start": "1783520",
    "end": "1789130"
  },
  {
    "text": "network the state on each node may have changed since we actually sent the message right so now we need to go through and go like okay maybe we",
    "start": "1789130",
    "end": "1795220"
  },
  {
    "text": "actually already got this message so cool we're going to zero go through each record in the Delta see if it happened",
    "start": "1795220",
    "end": "1802090"
  },
  {
    "text": "before our version if it did then we skip it because we know we already got that or we saw something later than it",
    "start": "1802090",
    "end": "1808350"
  },
  {
    "text": "and then we check and see like okay was",
    "start": "1808350",
    "end": "1813580"
  },
  {
    "text": "our version of this value older if it was older great we merge it all right",
    "start": "1813580",
    "end": "1818920"
  },
  {
    "text": "but then of course we need some way of determining what to do if they're",
    "start": "1818920",
    "end": "1824050"
  },
  {
    "text": "concurrent right because causality doesn't give us a total order it gives us a partial order so we still need we",
    "start": "1824050",
    "end": "1830080"
  },
  {
    "text": "haven't actually solved the problem of how to merge these records together if they can flicked with each other so what",
    "start": "1830080",
    "end": "1837250"
  },
  {
    "text": "is that little sparkle that we're gonna use there this actually brings us straight back to rendezvous fashion so",
    "start": "1837250",
    "end": "1844270"
  },
  {
    "text": "rendezvous hashing gives us that way of breaking a tie in this case there's many",
    "start": "1844270",
    "end": "1849340"
  },
  {
    "text": "ways to break ties in like Delta C Rd T's or C or D T's in general but in this particular case for this particular",
    "start": "1849340",
    "end": "1854530"
  },
  {
    "text": "application rendezvous hashing actually ends up being perfect for us",
    "start": "1854530",
    "end": "1859539"
  },
  {
    "text": "it's actually probably probably my like favorite part of this little system is that not only does rendezvous hashing let us decide on ownership for a",
    "start": "1859539",
    "end": "1865899"
  },
  {
    "text": "particular origin server a piece of work it also lets us break ties deterministically so when a node sees",
    "start": "1865899",
    "end": "1872169"
  },
  {
    "text": "that its own operation has been usurped by some other node it knows oh I should",
    "start": "1872169",
    "end": "1877960"
  },
  {
    "text": "probably stop doing work on this particular origin server because someone else is a higher priority to me and",
    "start": "1877960",
    "end": "1883090"
  },
  {
    "text": "they've already done the work for it so it lets us not only determine tiebreaking but also deterministically",
    "start": "1883090",
    "end": "1888429"
  },
  {
    "text": "determine ownership of a particularly thing which is pretty cool so again what",
    "start": "1888429",
    "end": "1894429"
  },
  {
    "text": "we have now design we have built a delta state CR dt map it was easier than we probably expected it to be",
    "start": "1894429",
    "end": "1901359"
  },
  {
    "start": "1895000",
    "end": "1895000"
  },
  {
    "text": "it's coordination free but it's always guarantee but it's guaranteed to always converge to a deterministic state so",
    "start": "1901359",
    "end": "1907210"
  },
  {
    "text": "like no matter what order these messages are delivered in no matter how long a node has been like out of sync it will",
    "start": "1907210",
    "end": "1913450"
  },
  {
    "text": "always when it gets the messages come back to the exact same state as any node in the rest of the system what's pretty",
    "start": "1913450",
    "end": "1919960"
  },
  {
    "text": "cool so that's all actually based on this paper which is actually a really",
    "start": "1919960",
    "end": "1925419"
  },
  {
    "text": "short really like digestible paper based out of like the one of the Portuguese universities has been doing fantastic",
    "start": "1925419",
    "end": "1931239"
  },
  {
    "text": "work on this and in that paper you can actually see this like directly right we",
    "start": "1931239",
    "end": "1938139"
  },
  {
    "text": "receive a version vector we've generated Delta when we receive a delta we merge it and we periodically randomly pool",
    "start": "1938139",
    "end": "1945580"
  },
  {
    "text": "in other words gossip right so this is a great example as well like I like the",
    "start": "1945580",
    "end": "1950889"
  },
  {
    "text": "system but it's also like a beautiful example of applying academic research to a problem right this is like it's just",
    "start": "1950889",
    "end": "1955929"
  },
  {
    "text": "one to one mapping basically okay so at",
    "start": "1955929",
    "end": "1961179"
  },
  {
    "text": "the end of this like we've actually achieved all the goals that we wanted to in this particular little system without",
    "start": "1961179",
    "end": "1966609"
  },
  {
    "text": "applying a CP system without applying any linearize ability the system is entirely causally causally consistent",
    "start": "1966609",
    "end": "1973149"
  },
  {
    "text": "and every node can still always make forward progress great okay",
    "start": "1973149",
    "end": "1980759"
  },
  {
    "text": "so we've used rendezvous hashing we've used swim we have a causally ordered pool based gossip communication system",
    "start": "1980759",
    "end": "1987249"
  },
  {
    "text": "and we're using CRT T's so a great question that one might",
    "start": "1987249",
    "end": "1992360"
  },
  {
    "text": "is why is a CTO of a kind of like a company that is primarily known for content delivery up here talking about",
    "start": "1992360",
    "end": "1998720"
  },
  {
    "text": "this why do I care about this one thing I actually do care about is this concept of edge computing the reason I care",
    "start": "1998720",
    "end": "2007390"
  },
  {
    "start": "2003000",
    "end": "2003000"
  },
  {
    "text": "about this is because it's a lot like we could do so much more in like widely distributed edge based scenarios than we",
    "start": "2007390",
    "end": "2014320"
  },
  {
    "text": "do today another way of like describing like edge computing which is like a very marketing",
    "start": "2014320",
    "end": "2020080"
  },
  {
    "text": "word is actually just saying coordination free distributed systems if you're talking about an edge compute",
    "start": "2020080",
    "end": "2025690"
  },
  {
    "start": "2021000",
    "end": "2021000"
  },
  {
    "text": "distributed system really what you're saying is that I have a whole bunch of nodes and I can't keep them in sync at",
    "start": "2025690",
    "end": "2031720"
  },
  {
    "text": "all times I can't do a CP based edge computing system it doesn't make any sense so it turns out that like all of",
    "start": "2031720",
    "end": "2039669"
  },
  {
    "text": "the research that has been going on for decades in coordination free distributed systems applies directly to edge",
    "start": "2039669",
    "end": "2046000"
  },
  {
    "text": "computing scenarios so why why haven't",
    "start": "2046000",
    "end": "2052179"
  },
  {
    "text": "why hasn't this like caught on more why aren't we doing more of these like crazy like not fully consistent but still",
    "start": "2052179",
    "end": "2058419"
  },
  {
    "text": "achieving the users goals distributed systems obviously they're harder sure",
    "start": "2058419",
    "end": "2064020"
  },
  {
    "text": "but I would argue that one of the things that holds us back is the prevalence of this idea and developers Minds",
    "start": "2064020",
    "end": "2070030"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "single system image single system images is basically an abstraction it says that",
    "start": "2070030",
    "end": "2075280"
  },
  {
    "text": "in the distributed system regardless of the number of nodes that were running it on regardless of where they are around",
    "start": "2075280",
    "end": "2080888"
  },
  {
    "text": "the world we should provide an interface to our users that appears to be one",
    "start": "2080889",
    "end": "2086740"
  },
  {
    "text": "system you see this in like distributed databases all the time the idea is that",
    "start": "2086740",
    "end": "2092050"
  },
  {
    "text": "they want to hide the fact that it's actually running across hundreds of nodes from you and instead like appear",
    "start": "2092050",
    "end": "2097780"
  },
  {
    "text": "to just be like one individual computer another way of describing single system",
    "start": "2097780",
    "end": "2103660"
  },
  {
    "text": "image is essentially to say that the system is linearizable meaning that to an outside observer it",
    "start": "2103660",
    "end": "2109450"
  },
  {
    "text": "appears that if that every single event has a specific order for any of two",
    "start": "2109450",
    "end": "2114820"
  },
  {
    "text": "events you can definitively say that one of them happened before the other but as we're talking about earlier that's not",
    "start": "2114820",
    "end": "2120070"
  },
  {
    "text": "really how like the world and the universe actually work causal consistency is actually like a farmer",
    "start": "2120070",
    "end": "2126170"
  },
  {
    "text": "far more like accurate way of looking at how things happen in the real world but",
    "start": "2126170",
    "end": "2131450"
  },
  {
    "text": "it is sometimes trickier and that's not the way we think about things necessarily as we're designing systems I",
    "start": "2131450",
    "end": "2137030"
  },
  {
    "text": "think it's like it's our attempts at applying the single system image idea",
    "start": "2137030",
    "end": "2142540"
  },
  {
    "text": "that actually like leads us to bad hacky failure prone and distributed systems",
    "start": "2142540",
    "end": "2147829"
  },
  {
    "text": "designs and so when it comes to like edge computing this idea of single system image just straight up doesn't",
    "start": "2147829",
    "end": "2153530"
  },
  {
    "text": "work you can't do that it's not realistic to hide the fact that your program is actually running across many",
    "start": "2153530",
    "end": "2159140"
  },
  {
    "text": "many nodes all simultaneously so as I was preparing this talk I was reminded",
    "start": "2159140",
    "end": "2165200"
  },
  {
    "text": "that a friend had actually written an article specifically about this it's called a certain tendency of the database community which is like the",
    "start": "2165200",
    "end": "2172190"
  },
  {
    "text": "shadiest title I have ever seen in a toggle so what we've walked through",
    "start": "2172190",
    "end": "2177200"
  },
  {
    "text": "today is like ah God okay actually so what what he says here is that we posit",
    "start": "2177200",
    "end": "2182450"
  },
  {
    "text": "that striving for distributed systems that provides single system image semantics is fundamentally flawed and at",
    "start": "2182450",
    "end": "2187970"
  },
  {
    "text": "odds with how systems operate in the real world so what we've walked through today is an example of like an entirely",
    "start": "2187970",
    "end": "2196030"
  },
  {
    "text": "coordination free distributed system that still maintains the requirements and the invariants that we set out to",
    "start": "2196030",
    "end": "2202700"
  },
  {
    "text": "achieve early on without having to use strong consistency linearize ability or",
    "start": "2202700",
    "end": "2208670"
  },
  {
    "text": "single system image so ultimately what I'm saying here is that like this stuff isn't as hard as we often believe it to",
    "start": "2208670",
    "end": "2214910"
  },
  {
    "text": "be it is so hard and it's tricky and like if you get it wrong it's really harder to bug but like what we need here",
    "start": "2214910",
    "end": "2221119"
  },
  {
    "text": "we need new metaphors because we have the single system image idea like it's a great metaphor for a certain type of",
    "start": "2221119",
    "end": "2227299"
  },
  {
    "text": "distributed system we don't have one for these types of systems that I'm talking about today there is no easy way to say",
    "start": "2227299",
    "end": "2234109"
  },
  {
    "text": "this is what I like I'm imagining the system is going to do when you do",
    "start": "2234109",
    "end": "2239750"
  },
  {
    "text": "metaphors we need to intuition for these types of things right we've all been building systems for a long time using",
    "start": "2239750",
    "end": "2245630"
  },
  {
    "text": "this idea of single system image and what we're what we're lacking is the intuition to build systems like this we",
    "start": "2245630",
    "end": "2253520"
  },
  {
    "text": "also need more tools and frameworks for this so that's all I got for you thank",
    "start": "2253520",
    "end": "2259819"
  },
  {
    "text": "you [Applause]",
    "start": "2259819",
    "end": "2265280"
  }
]