[
  {
    "text": "[Music]",
    "start": "210",
    "end": "28480"
  },
  {
    "text": "out that computer programs are the most complicated things that human makes",
    "start": "28480",
    "end": "33640"
  },
  {
    "text": "humans do not make anything that's more complicated than computer programs and it's kind of amazing that we're able to",
    "start": "33640",
    "end": "38800"
  },
  {
    "text": "do this at all uh computer programs are very difficult to make",
    "start": "38800",
    "end": "43879"
  },
  {
    "text": "um um and so there was uh and that was recognized very early so there was an idea that we should employ artificial",
    "start": "43879",
    "end": "50600"
  },
  {
    "text": "intelligence since a computer works something like a brain If we could program computers to think then they",
    "start": "50600",
    "end": "58160"
  },
  {
    "text": "could write our programs for us um that turned out not to work artificial intelligence has done some",
    "start": "58160",
    "end": "63760"
  },
  {
    "text": "amazing things you know computers can now play chess pretty well and they can even play Jeopardy but you can't give a",
    "start": "63760",
    "end": "71159"
  },
  {
    "text": "set of requirements and some user interviews to a computer and ask it to write a program that's not something",
    "start": "71159",
    "end": "77200"
  },
  {
    "text": "they're able to do and so we're still writing computer programs by hand the",
    "start": "77200",
    "end": "82400"
  },
  {
    "text": "the way has always been done and so it's a very difficult very labor intensive",
    "start": "82400",
    "end": "87520"
  },
  {
    "text": "process the number one tool we have for for developing computer programs is the programming language which helps us to",
    "start": "87520",
    "end": "94880"
  },
  {
    "text": "work at a higher level of abstraction which give amplifies our abilities allows us to do more and there are a",
    "start": "94880",
    "end": "100799"
  },
  {
    "text": "large number of programming languages available to us and one of the most surprising of those is",
    "start": "100799",
    "end": "106439"
  },
  {
    "text": "Javascript one of the things that makes programming so difficult is that Perfection is required we need more",
    "start": "106439",
    "end": "112880"
  },
  {
    "text": "perfection in the development of programming than in anything else that humans do and humans are not good at",
    "start": "112880",
    "end": "118920"
  },
  {
    "text": "perfection um the reason it needs to be per perfect is because of the contract that we have",
    "start": "118920",
    "end": "124119"
  },
  {
    "text": "with the computer that if the program is not perfect in every detail then the",
    "start": "124119",
    "end": "130000"
  },
  {
    "text": "computer has license to do the worst possible thing at the worst possible",
    "start": "130000",
    "end": "135360"
  },
  {
    "text": "time and will be free of blame all of the blame will to the",
    "start": "135360",
    "end": "142560"
  },
  {
    "text": "programmer um so because of this um there is a importance for to be perfect",
    "start": "142560",
    "end": "150959"
  },
  {
    "text": "and we're not and it's hard um and because we know it's so hard in some",
    "start": "150959",
    "end": "156800"
  },
  {
    "text": "cases we don't even try anymore so we know that we will not hold on to a program and and refine it and polish it",
    "start": "156800",
    "end": "164640"
  },
  {
    "text": "until it is perfect because we know it will never be finished so instead we release programs much too early in a",
    "start": "164640",
    "end": "171480"
  },
  {
    "text": "very unfinished State a very imperfect State and just hope which seems",
    "start": "171480",
    "end": "176760"
  },
  {
    "text": "completely irrational but at this moment that is the state of the art so programming um it it's hard to",
    "start": "176760",
    "end": "185280"
  },
  {
    "text": "understand how we're able to do it because we are hunters and gatherers there's been no human evolution since",
    "start": "185280",
    "end": "191280"
  },
  {
    "text": "the uh Paleolithic Age so there's no explanation for why we're able to do this um we use the head obviously",
    "start": "191280",
    "end": "199080"
  },
  {
    "text": "because um programs are about managing State and we keep all that state and all the relationships and all the models in",
    "start": "199080",
    "end": "204519"
  },
  {
    "text": "our head and you have to keep it there in order to to render something into a program but we can't actually describe",
    "start": "204519",
    "end": "210560"
  },
  {
    "text": "how we write programs there's not an algorithm which says how we do it you know some partly we're doing things",
    "start": "210560",
    "end": "216879"
  },
  {
    "text": "bottom up sometimes we're doing things uh top down sometimes we're doing things inside out outside in we're constantly",
    "start": "216879",
    "end": "224280"
  },
  {
    "text": "changing our strategies as we're um honing in on how to express a problem in",
    "start": "224280",
    "end": "230560"
  },
  {
    "text": "terms of something which can be executed by a computer we don't know how we do that but we do it and it's amazing and I",
    "start": "230560",
    "end": "238079"
  },
  {
    "text": "think maybe it's because of the gut but there's something about how the gut Works in relationship with the head",
    "start": "238079",
    "end": "243760"
  },
  {
    "text": "which allows us to have these amazing flashes of insight which make programming possible so we could not",
    "start": "243760",
    "end": "249360"
  },
  {
    "text": "program without the gut now I have absolutely no evidence to support that",
    "start": "249360",
    "end": "255359"
  },
  {
    "text": "statement but my gut tells me it's true so I believe",
    "start": "255359",
    "end": "260400"
  },
  {
    "text": "it now one of the things that makes programming difficult is also the gut um the gut cannot do arithmetic and it is",
    "start": "260400",
    "end": "268240"
  },
  {
    "text": "very confused about numbers the gut considers a lot to be to have a greater weight than all and it considers not",
    "start": "268240",
    "end": "276039"
  },
  {
    "text": "very much and none to be equivalent and so it's very easy for the gut to come up",
    "start": "276039",
    "end": "281080"
  },
  {
    "text": "with um wrong ideas about things particularly in the management of risk",
    "start": "281080",
    "end": "286120"
  },
  {
    "text": "and much of what we're doing is risk management as we're making tradeoffs to try to approach perfection in a very",
    "start": "286120",
    "end": "292039"
  },
  {
    "text": "imperfect practice and the gut gets things wrong and so managing the gut",
    "start": "292039",
    "end": "297880"
  },
  {
    "text": "turns out to be an important part of what we do which brings us to JavaScript so",
    "start": "297880",
    "end": "303440"
  },
  {
    "text": "JavaScript is an amazing programming language it was developed in about 10 days by Brandon Ike who's a brilliant",
    "start": "303440",
    "end": "309360"
  },
  {
    "text": "man uh 10 days is way too short a time to develop an Implement a programming",
    "start": "309360",
    "end": "314560"
  },
  {
    "text": "language uh which is what he did and his company to its shame released the language into the wild without ever",
    "start": "314560",
    "end": "321199"
  },
  {
    "text": "having written enough code to determine if the language actually worked which was ridiculous which is why",
    "start": "321199",
    "end": "327919"
  },
  {
    "text": "there's no longer a Netscape",
    "start": "327919",
    "end": "331600"
  },
  {
    "text": "but surprisingly uh so it's not surprising that there are bad parts in the language because it was never tested",
    "start": "333520",
    "end": "339520"
  },
  {
    "text": "um and there are a lot of really bad things in the language the surprise is",
    "start": "339520",
    "end": "344560"
  },
  {
    "text": "that there are good things in the language some of the most brilliant ideas in the history programming languages found their way into this one",
    "start": "344560",
    "end": "351080"
  },
  {
    "text": "and so JavaScript is successful not because it was the language of the browser it was actually the second language of the browser it's successful",
    "start": "351080",
    "end": "358680"
  },
  {
    "text": "because it worked it there is Brilliance in this language and you can use that Brilliance to write good",
    "start": "358680",
    "end": "364680"
  },
  {
    "text": "programs um now because it has these bad parts the bad parts can really trip you up and and it's hard to be perfect when",
    "start": "364680",
    "end": "372039"
  },
  {
    "text": "you're building things out of bad parts so to help myself in writing JavaScript I wrote a program in JavaScript called",
    "start": "372039",
    "end": "378440"
  },
  {
    "text": "JS lint which um understands the good parts in fact has taught me an enormous",
    "start": "378440",
    "end": "384080"
  },
  {
    "text": "amount about how the good parts work and and what they are um and we'll identify",
    "start": "384080",
    "end": "389280"
  },
  {
    "text": "the bad parts and by conforming just to the good parts you can write better programs and it's available at JS",
    "start": "389280",
    "end": "395000"
  },
  {
    "text": "lin.com everybody's using it right because everybody wants to be writing good programs and it comes with a warning JS",
    "start": "395000",
    "end": "402919"
  },
  {
    "text": "lint will hurt your feelings and this is true um and I have felt it I have felt JS Lin's wrath and and I understand why",
    "start": "402919",
    "end": "410759"
  },
  {
    "text": "I get the enormous number of letters that I do from people saying JS hurt my feelings you know can you make it stop",
    "start": "410759",
    "end": "416440"
  },
  {
    "text": "doing that um and you know after a few years of that I started to wonder well why is",
    "start": "416440",
    "end": "422800"
  },
  {
    "text": "that I mean it's it calls itself a code Quality Tool so you're only there's no",
    "start": "422800",
    "end": "428720"
  },
  {
    "text": "reason for you to use it except that you want to make your programs better so you explicitly run it and and it gives you a",
    "start": "428720",
    "end": "436319"
  },
  {
    "text": "report and the idea is that you take advantage of its advice and it'll make your programs better and instead people",
    "start": "436319",
    "end": "442560"
  },
  {
    "text": "get angry and hurt and they start to cry and and why is that you know why aren't they saying oh thank you JS ly for",
    "start": "442560",
    "end": "448919"
  },
  {
    "text": "pointing out that I could make things better in this way and it has to do with the interaction between the gut and the",
    "start": "448919",
    "end": "455080"
  },
  {
    "text": "head so and these questions can have an impact on programming style um so you",
    "start": "455080",
    "end": "462000"
  },
  {
    "text": "might have seen me talk about this before where where does the curly brace go should it go on the left or on the right when Ken Thompson designed the B",
    "start": "462000",
    "end": "468479"
  },
  {
    "text": "language and then uh Richie did the um C language they put them on the right just",
    "start": "468479",
    "end": "474599"
  },
  {
    "text": "seemed like a place to go but immediately there are people in their lab who said no they should go and the",
    "start": "474599",
    "end": "480360"
  },
  {
    "text": "left um and I'm sure they argued about it for a couple of days and then they decided leave us out of this argument we",
    "start": "480360",
    "end": "486520"
  },
  {
    "text": "don't care you know put it put on whatever side you want you know this is a stupid argument",
    "start": "486520",
    "end": "491879"
  },
  {
    "text": "and it's a stupid argument because there is not a right answer there is not a compelling reason for why one side",
    "start": "491879",
    "end": "497639"
  },
  {
    "text": "should be preferred to the other but some there are some things everybody can agree on is we should all be consistent",
    "start": "497639",
    "end": "504400"
  },
  {
    "text": "you should always put them on the same side because it looks stupid if you put them on the wrong side and generally you",
    "start": "504400",
    "end": "510080"
  },
  {
    "text": "can get everybody to agree that everybody should do it the way you do it right I mean you're doing it right and",
    "start": "510080",
    "end": "515320"
  },
  {
    "text": "everybody else is doing it wrong like what's wrong with those people um you know so if you have someone who who's",
    "start": "515320",
    "end": "521560"
  },
  {
    "text": "always put them on the left and he goes to work at a shop where you put them on the right and people say you got to put him on the right now he'll start to cry",
    "start": "521560",
    "end": "529000"
  },
  {
    "text": "and he'll start coming up with all these reasons for why that's wrong it should go on the left and the reasons don't",
    "start": "529000",
    "end": "534279"
  },
  {
    "text": "make any sense at all because there's not a good reason to preer prefer one side to another but there is a good re",
    "start": "534279",
    "end": "540880"
  },
  {
    "text": "reason to be consistent it's sort of like driving cars there's not a good reason for why we should drive on the",
    "start": "540880",
    "end": "546200"
  },
  {
    "text": "right or on the left but there's a good reason for us to all be on the same side and this is kind of like that um",
    "start": "546200",
    "end": "553480"
  },
  {
    "text": "and Thompson and Richie did us a disservice in not picking aide um and",
    "start": "553480",
    "end": "559200"
  },
  {
    "text": "it's many many decades later and we still don't know what the right answer is um except for JavaScript and in",
    "start": "559200",
    "end": "565519"
  },
  {
    "text": "JavaScript there is a right answer and that is you got to put them on the right because sometimes you're going to have a",
    "start": "565519",
    "end": "571040"
  },
  {
    "text": "return statement in which you're going to return the value of an object literal and if you put the curly brace on the left it will fail in the worst possible",
    "start": "571040",
    "end": "578720"
  },
  {
    "text": "way and that's a bad thing so if you put the curly braces on the right always you",
    "start": "578720",
    "end": "584079"
  },
  {
    "text": "will never experience this problem and that's a nice problem to never experience and the if you look at in",
    "start": "584079",
    "end": "590880"
  },
  {
    "text": "terms of the trade-off the cost of putting the curly brace on the right compared to put them on the left is zero",
    "start": "590880",
    "end": "597560"
  },
  {
    "text": "the benefit is there's this really nasty design error in JavaScript that you completely avoid that's a nice",
    "start": "597560",
    "end": "604920"
  },
  {
    "text": "tradeoff so um prefer forms that are error resistant now once after",
    "start": "604920",
    "end": "611000"
  },
  {
    "text": "explaining this I had someone come up to me and say you know from now on on return statements I'm always going to",
    "start": "611000",
    "end": "616279"
  },
  {
    "text": "put them on the right but the rest of the time I'm going to put them on the left so um so JavaScript has a switch",
    "start": "616279",
    "end": "625399"
  },
  {
    "text": "statement this was copied after uh be's switch statement which was modeled after the Fortran computed go-to statement um",
    "start": "625399",
    "end": "633800"
  },
  {
    "text": "we determined that um the go-to statement was harmful um most of you are too young to remember that debate we",
    "start": "633800",
    "end": "639880"
  },
  {
    "text": "actually spent 20 years arguing about whether we should use goto or not it it turned out we shouldn't um and and so we",
    "start": "639880",
    "end": "648240"
  },
  {
    "text": "don't use it anymore but it still survives in the switch statement and there's a problem with the switch",
    "start": "648240",
    "end": "653279"
  },
  {
    "text": "statement in that um you can have one case which falls through into another case and one day I um in the early days",
    "start": "653279",
    "end": "660440"
  },
  {
    "text": "of jslint someone wrote to me and said you know there's this hazard in the in the switch statement sometimes a fall",
    "start": "660440",
    "end": "665920"
  },
  {
    "text": "through is unintentional but it's really hard to see it reading the code and that can lead to errors and I WR I thought",
    "start": "665920",
    "end": "671720"
  },
  {
    "text": "about it I thought very deeply and I wrote back and said yeah i' I've seen that happen but um there's this really",
    "start": "671720",
    "end": "679200"
  },
  {
    "text": "nice thing where if you can get all of your um cases synchronized and they fall through into each other it's like a",
    "start": "679200",
    "end": "686040"
  },
  {
    "text": "waterfall it's beautiful and you've got this great thing and it's so efficient and and nice and yeah I have seen the",
    "start": "686040",
    "end": "692959"
  },
  {
    "text": "error um but it hardly ever happens and so but and you get this other things so I think I'm not going to warn about that",
    "start": "692959",
    "end": "699320"
  },
  {
    "text": "I think that's actually a good practice the next day the same guy wrote to me and he said I found a bug in JS lint",
    "start": "699320",
    "end": "705480"
  },
  {
    "text": "said oh great so I threw it in the debugger and it turned out yeah you know where this is",
    "start": "705480",
    "end": "710920"
  },
  {
    "text": "going I had a switch statement that was falling through and in that moment I achieved",
    "start": "710920",
    "end": "717160"
  },
  {
    "text": "enlightenment CU it turns out um we're constantly",
    "start": "717160",
    "end": "723320"
  },
  {
    "text": "making mistakes that's what we do we spend most of our time making mistakes and then trying to chase them down and",
    "start": "723320",
    "end": "728440"
  },
  {
    "text": "correct them we imagine we spend most of our time power typing know I'm typing in curly braces and semicolons and stuff",
    "start": "728440",
    "end": "734160"
  },
  {
    "text": "I'm getting work done but no we spend most of our time looking into the abyss asking my god what have I",
    "start": "734160",
    "end": "742399"
  },
  {
    "text": "done trying to make sense out of this puddle of confusion and turn it back into a working program and some how we",
    "start": "743120",
    "end": "749519"
  },
  {
    "text": "black that out because I think if we obsessed on that we would never we would leave that's one of the reasons I think",
    "start": "749519",
    "end": "755600"
  },
  {
    "text": "why rational people don't do programming I used to think that everybody should learn programming this",
    "start": "755600",
    "end": "761839"
  },
  {
    "text": "is a an amazing thing you know turning teaching a machine how to do stuff that",
    "start": "761839",
    "end": "766920"
  },
  {
    "text": "teaches you so much about the world that you're living in I used to think everybody should learn programming I don't think that anymore I think there",
    "start": "766920",
    "end": "773360"
  },
  {
    "text": "needs to be something really seriously wrong with you in order to do programming",
    "start": "773360",
    "end": "779519"
  },
  {
    "text": "um so anyway um I'm um this was an",
    "start": "779839",
    "end": "785199"
  },
  {
    "text": "occasion where I could not ignore or or black out the the mistake that I had made you know it was so humiliating so",
    "start": "785199",
    "end": "792480"
  },
  {
    "text": "embarrassing that I had to recognize that I had made a fundamental mistake know so what was my mistake I said that",
    "start": "792480",
    "end": "799320"
  },
  {
    "text": "hardly ever happens which is the way the gut says it happens um the gut's bad at",
    "start": "799320",
    "end": "806000"
  },
  {
    "text": "arithmetic and will uh get things like like this fundamentally wrong and so",
    "start": "806000",
    "end": "811360"
  },
  {
    "text": "that becomes part of your working assumptions and if you have any logical system in which you have false",
    "start": "811360",
    "end": "816720"
  },
  {
    "text": "assumptions then you can very easily get incorrect results and we know that about logic and that is how we work um and so",
    "start": "816720",
    "end": "824600"
  },
  {
    "text": "in order to achieve Perfection we need to be aware of our own processes and understand where our deeply held beliefs",
    "start": "824600",
    "end": "832040"
  },
  {
    "text": "are coming from are they actually rational or are they based on false assumptions which um are formed by the",
    "start": "832040",
    "end": "839959"
  },
  {
    "text": "gut which really doesn't understand what we're doing here so a good style can help us produce",
    "start": "839959",
    "end": "846240"
  },
  {
    "text": "better programs style should not be about personal preference or self-expression we're not trying to be e",
    "start": "846240",
    "end": "851839"
  },
  {
    "text": "comings when we're writing programs it should be about communicating clearly what the program is going to do not just",
    "start": "851839",
    "end": "857680"
  },
  {
    "text": "to the machine but to ourselves because ultimately um if we don't understand what the program is doing it's",
    "start": "857680",
    "end": "864720"
  },
  {
    "text": "defective so we can find examples of this in in literary Style the Romans wrote Latin all in uppercase",
    "start": "864720",
    "end": "871600"
  },
  {
    "text": "with no word breaks or punctuation and they were able to read this stuff fine um even though there can",
    "start": "871600",
    "end": "877759"
  },
  {
    "text": "be ambiguities like in the third line you could read that as now or DB reeks you know so it's a little bit",
    "start": "877759",
    "end": "884480"
  },
  {
    "text": "harder to parse this stuff to to make sense out of it but they were doing it and this worked fine until Constantine",
    "start": "884480",
    "end": "891079"
  },
  {
    "text": "established Christianity as the state religion of Rome and they had a need to start sending holy texts all over the",
    "start": "891079",
    "end": "897880"
  },
  {
    "text": "empire which meant they had to copy a lot of stuff and they didn't have the originals they had copies of copies of",
    "start": "897880",
    "end": "904880"
  },
  {
    "text": "copies and they found that no two copies agreed um in fact every time they made a",
    "start": "904880",
    "end": "911639"
  },
  {
    "text": "copy they introduced new errors and this was a problem because they were now claiming their Authority based on the",
    "start": "911639",
    "end": "917680"
  },
  {
    "text": "word and nobody was sure what exactly the word was um so uh medieval copyists",
    "start": "917680",
    "end": "924360"
  },
  {
    "text": "introduced uh lowercase or minuscule word breaks and punctuation and this turned out uh to be very effective in",
    "start": "924360",
    "end": "931600"
  },
  {
    "text": "helping reduce the error rate uh it was so effective that Gutenberg adopted",
    "start": "931600",
    "end": "937079"
  },
  {
    "text": "their conventions when he developed printing with movable type and we still use it today all writing uses these same",
    "start": "937079",
    "end": "944639"
  },
  {
    "text": "conventions that were developed by these people in the Middle Ages because it works because it makes text clearer um",
    "start": "944639",
    "end": "950600"
  },
  {
    "text": "and so there are conventions in the way we write which in no way limit our creativity the creativity in writing",
    "start": "950600",
    "end": "957720"
  },
  {
    "text": "comes from choosing the right words and putting them in the right order it's not about where you put the spaces around",
    "start": "957720",
    "end": "962800"
  },
  {
    "text": "your punctuation so good use of style can help reduce occurrence of errors and",
    "start": "962800",
    "end": "969639"
  },
  {
    "text": "that's true in in writing and I think it's also true in programming programs must communicate clearly with people um",
    "start": "969639",
    "end": "977040"
  },
  {
    "text": "there are some programmers I've talked to who still don't understand this they think that it's only about communicating",
    "start": "977040",
    "end": "982959"
  },
  {
    "text": "with the machine if they can convince the machine to do what they want to do they've done their job um but that's not",
    "start": "982959",
    "end": "989040"
  },
  {
    "text": "true particularly as we get more and more agile as programs are never finished um and you can expect",
    "start": "989040",
    "end": "996040"
  },
  {
    "text": "everything that you write will eventually be worked on by somebody else uh or possibly by Future you who does",
    "start": "996040",
    "end": "1003079"
  },
  {
    "text": "not un remember why you did what you did in the first place it's much more important that the thing serve as a",
    "start": "1003079",
    "end": "1010079"
  },
  {
    "text": "medium of communication to other human beings so the elements of good composition um can apply to programs as",
    "start": "1010079",
    "end": "1018120"
  },
  {
    "text": "well as to written stuff uh for example in in using commas convention we've had",
    "start": "1018120",
    "end": "1023160"
  },
  {
    "text": "for um centuries is that you put the space after the comma not before um to",
    "start": "1023160",
    "end": "1028959"
  },
  {
    "text": "the extent where that makes sense in programming languages um unless there's a compelling reason to do something else",
    "start": "1028959",
    "end": "1034558"
  },
  {
    "text": "I I think that's a practice to continue uh now in some cases uh",
    "start": "1034559",
    "end": "1040079"
  },
  {
    "text": "programming languages need to be much more precise than than human languages",
    "start": "1040079",
    "end": "1045400"
  },
  {
    "text": "there have been attempts at at creating programming languages which look like English Eng um and mostly they fail just",
    "start": "1045400",
    "end": "1051080"
  },
  {
    "text": "because they're not exact enough so programming languages um are different",
    "start": "1051080",
    "end": "1056720"
  },
  {
    "text": "but there are similarities um but um we we introduce other kinds of ambiguities",
    "start": "1056720",
    "end": "1063320"
  },
  {
    "text": "we'll use parents in some case as a a prefix operator in other cases as an infix operator um and it's clearer if",
    "start": "1063320",
    "end": "1072000"
  },
  {
    "text": "we're using parents indicate um invocation that uh we use adjacency and",
    "start": "1072000",
    "end": "1078400"
  },
  {
    "text": "in all of other cases parents should not be adjacent with other text with other letters um and and so that leads to",
    "start": "1078400",
    "end": "1086200"
  },
  {
    "text": "style rules in order to help distinguish which things are function inv vacations and which things are",
    "start": "1086200",
    "end": "1093240"
  },
  {
    "text": "not um JavaScript has um a width statement which was intended to make it",
    "start": "1093240",
    "end": "1099120"
  },
  {
    "text": "easier to to get values from deeply nested um objects but it has a problem",
    "start": "1099120",
    "end": "1106240"
  },
  {
    "text": "in its definition um and so should be avoided so here I've got a WID statement and I",
    "start": "1106240",
    "end": "1112080"
  },
  {
    "text": "will tell you that it will expand into one of these four statements in the Box",
    "start": "1112080",
    "end": "1117720"
  },
  {
    "text": "um can anybody guess which one it's going to be depends yeah it depends",
    "start": "1117720",
    "end": "1124520"
  },
  {
    "text": "there's not a correct answer it's a trick question it could be any of them in fact every time the statement",
    "start": "1124520",
    "end": "1130080"
  },
  {
    "text": "executes it could be a different one of them so there's no way you can read a program that has within it and be",
    "start": "1130080",
    "end": "1135919"
  },
  {
    "text": "confident that you can predict what it's going to do um that's just way too dangerous since",
    "start": "1135919",
    "end": "1141600"
  },
  {
    "text": "I'm I'm trying to be perfect and I'm trying to communicate well what my program does constructs which cannot be",
    "start": "1141600",
    "end": "1148760"
  },
  {
    "text": "correctly interpreted should be avoided now there's some people who tell me but with is so useful you can do so many",
    "start": "1148760",
    "end": "1155480"
  },
  {
    "text": "amazing things with it and I I agree that's true I'm not saying it isn't useful I'm saying there's never a case",
    "start": "1155480",
    "end": "1161520"
  },
  {
    "text": "where it isn't confusing and confusion must be avoided we cannot be perfect when we're confused",
    "start": "1161520",
    "end": "1169840"
  },
  {
    "text": "JavaScript has this terrible um double equal operator which does type coercion and because it does type coercion it can",
    "start": "1169840",
    "end": "1176400"
  },
  {
    "text": "get false positives and that's a bad thing because it makes it difficult to reason about programs fortunately it has",
    "start": "1176400",
    "end": "1182880"
  },
  {
    "text": "a triple equal operator which always does the right thing you don't get the false positives so I recommend always",
    "start": "1182880",
    "end": "1189039"
  },
  {
    "text": "use triple equal never use double equal sometimes people will ask me well",
    "start": "1189039",
    "end": "1194440"
  },
  {
    "text": "there's this occasion where double equal actually does exactly what I want um should I use that in that case and I",
    "start": "1194440",
    "end": "1201559"
  },
  {
    "text": "recommend no um because the reader of the program is not going to know um did",
    "start": "1201559",
    "end": "1208240"
  },
  {
    "text": "you choose the right operator in this case because most uses of double equal look like errors and you don't want to",
    "start": "1208240",
    "end": "1214679"
  },
  {
    "text": "be writing programs that that look like errors so I recommend never use double equal it's just not worth",
    "start": "1214679",
    "end": "1220360"
  },
  {
    "text": "it if there's a feature of a language that is sometimes problematic and if it can be replaced by another feature that",
    "start": "1220360",
    "end": "1225960"
  },
  {
    "text": "is more reliable then always use the more reliable feature this is a good trade-off it comes at no",
    "start": "1225960",
    "end": "1232880"
  },
  {
    "text": "cost a new feature in JavaScript is multi-line string literals uh this was something that was borrowed from other",
    "start": "1232880",
    "end": "1239080"
  },
  {
    "text": "languages I don't like this feature for a couple of reasons one is it breaks indentation the continuation has to",
    "start": "1239080",
    "end": "1246360"
  },
  {
    "text": "start at the left margin um but usually we'll have text which is um nested",
    "start": "1246360",
    "end": "1252720"
  },
  {
    "text": "several levels because it's in blocks and functions and and objects and that nesting is important for understanding",
    "start": "1252720",
    "end": "1259039"
  },
  {
    "text": "the structure of the thing that we're building and that structure is broken by this statement so I don't like the",
    "start": "1259039",
    "end": "1264919"
  },
  {
    "text": "statement um but also there's a syntactic hazard in it so here we've got",
    "start": "1264919",
    "end": "1270000"
  },
  {
    "text": "two statements one of them is correct the other is an obvious error can anybody spot the",
    "start": "1270000",
    "end": "1275440"
  },
  {
    "text": "error after the yeah exactly there's a space",
    "start": "1275440",
    "end": "1282000"
  },
  {
    "text": "it's obvious once it's pointed out but I don't want to be using forms",
    "start": "1288640",
    "end": "1295440"
  },
  {
    "text": "that are indistinguishable from common errors I want my programs to be more obviously correct and so I don't use",
    "start": "1295440",
    "end": "1302520"
  },
  {
    "text": "this avoid forms that are difficult to distinguish from common errors uh JavaScript has or all",
    "start": "1302520",
    "end": "1309760"
  },
  {
    "text": "programming languages have scope scope controls the visibility and uh longevity",
    "start": "1309760",
    "end": "1315679"
  },
  {
    "text": "of variables scope is a really useful thing most languages have block scope um",
    "start": "1315679",
    "end": "1320880"
  },
  {
    "text": "JavaScript doesn't JavaScript only has function scope now it turns out you can write good programs just using function",
    "start": "1320880",
    "end": "1327200"
  },
  {
    "text": "scope um the problem with JavaScript is it has syntax which looks exactly like the syntax of block scoped languages so",
    "start": "1327200",
    "end": "1334480"
  },
  {
    "text": "people come to JavaScript from other languages think that it has function or it has block scope it doesn't that can",
    "start": "1334480",
    "end": "1342039"
  },
  {
    "text": "cause them to write things which will be uh incorrect so as a result of that I",
    "start": "1342039",
    "end": "1348159"
  },
  {
    "text": "recommend recommend programming in JavaScript knowing that it does not have block scope using techniques which favor",
    "start": "1348159",
    "end": "1355000"
  },
  {
    "text": "a language that only has function scope so declare all of your variables at the top of a function declare all of your",
    "start": "1355000",
    "end": "1360880"
  },
  {
    "text": "functions before you call them it turns out these things will happen anyway so you might as well respect that so that",
    "start": "1360880",
    "end": "1367559"
  },
  {
    "text": "the person who's going to read your program is more likely to correctly interpret what your program is going to",
    "start": "1367559",
    "end": "1373240"
  },
  {
    "text": "do make your programs look like what they do",
    "start": "1373240",
    "end": "1378600"
  },
  {
    "text": "um the place that causes people the most difficulty is the induction variable on for",
    "start": "1378600",
    "end": "1384440"
  },
  {
    "text": "Loops U they they might understand that they should put all the variables on top um but they it's just too hard for this",
    "start": "1384440",
    "end": "1392120"
  },
  {
    "text": "one you know I got to put the variable in the loop um but it makes a program read wrong because the variable I is not",
    "start": "1392120",
    "end": "1399559"
  },
  {
    "text": "scoped to the loop it's scoped to the whole function um so there cases where you could have uh nested Loops which can",
    "start": "1399559",
    "end": "1406840"
  },
  {
    "text": "interfere with each other or if you're uh creating functions inside of the loop",
    "start": "1406840",
    "end": "1411880"
  },
  {
    "text": "um they're going to uh capture the wrong value of the variable and that's a problem those are",
    "start": "1411880",
    "end": "1417640"
  },
  {
    "text": "errors um and the argument I I get about uh why you shouldn't rewrite this is",
    "start": "1417640",
    "end": "1423559"
  },
  {
    "text": "this is how I would write it in Java I say write in the language you're writing",
    "start": "1423559",
    "end": "1430279"
  },
  {
    "text": "it now someday JavaScript is going to have a let operator which does respect block scope and and in that case it the",
    "start": "1430279",
    "end": "1438080"
  },
  {
    "text": "the advice changes um the advice would be declare your variables um in the",
    "start": "1438080",
    "end": "1443120"
  },
  {
    "text": "nested or in the innermost scope at the place where it's first use that's good advice in a block scoped language that's",
    "start": "1443120",
    "end": "1449960"
  },
  {
    "text": "the worst advice in a function scoped language so WR in the right language um I see stuff like this a lot",
    "start": "1449960",
    "end": "1457760"
  },
  {
    "text": "um where um one of the mistakes in the design of B andc was that it allowed for",
    "start": "1457760",
    "end": "1463120"
  },
  {
    "text": "leaving the uh uh the curly braces out in the consequence of an if for a while",
    "start": "1463120",
    "end": "1470200"
  },
  {
    "text": "um and so a statement uh like this",
    "start": "1470200",
    "end": "1475799"
  },
  {
    "text": "um looks like it means what the second line means but it actually means what the third line means so anytime you have",
    "start": "1475799",
    "end": "1482159"
  },
  {
    "text": "a program which appears to be one thing but is actually other that's an opportunity for introducing bugs so my",
    "start": "1482159",
    "end": "1489399"
  },
  {
    "text": "advice is always put the curly braces in uh they make your program much more",
    "start": "1489399",
    "end": "1494799"
  },
  {
    "text": "resilient it's much easier for someone else who's going to have to maintain your program to understand how to modify it without breaking",
    "start": "1494799",
    "end": "1501000"
  },
  {
    "text": "it and the complaint I hear about that is well that costs two",
    "start": "1501000",
    "end": "1506240"
  },
  {
    "text": "characters and you have to go so",
    "start": "1506240",
    "end": "1512240"
  },
  {
    "text": "hard two characters cost nothing there's no cost in that and the value is enormous it makes your program much more",
    "start": "1514279",
    "end": "1520720"
  },
  {
    "text": "resilient much more likely that it's going to survive into the future this is a really good tradeoff always put the",
    "start": "1520720",
    "end": "1526399"
  },
  {
    "text": "curly braces in um as our processes become more agile our coding must be",
    "start": "1526399",
    "end": "1531559"
  },
  {
    "text": "more resilient and putting the curly braces in does make your code more resilient this one is really",
    "start": "1531559",
    "end": "1537919"
  },
  {
    "text": "controversial the Plus+ operator was added to B and C in order to increment",
    "start": "1537919",
    "end": "1544279"
  },
  {
    "text": "pointers uh we have since uh discovered that pointer arithmetic is a bad thing",
    "start": "1544279",
    "end": "1550559"
  },
  {
    "text": "um and so we don't see that in any modern languages except for C++ which",
    "start": "1550559",
    "end": "1555840"
  },
  {
    "text": "was named after this m misfeature",
    "start": "1555840",
    "end": "1560080"
  },
  {
    "text": "um we we still have Plus+ though in all of our languages um and now it serves",
    "start": "1562039",
    "end": "1567760"
  },
  {
    "text": "the purpose of adding one to a variable which is not a big deal um there's",
    "start": "1567760",
    "end": "1573480"
  },
  {
    "text": "another form called plus equal 1 which does the same thing which costs one extra",
    "start": "1573480",
    "end": "1578880"
  },
  {
    "text": "character um so Plus+ has been implicated in buffer overruns and other",
    "start": "1578880",
    "end": "1585440"
  },
  {
    "text": "security hazards uh one of the problems with it is um I I know a problem with it",
    "start": "1585440",
    "end": "1591120"
  },
  {
    "text": "in my own practice is if I'm using Plus+ I cannot resist trying to squeeze as",
    "start": "1591120",
    "end": "1596200"
  },
  {
    "text": "much as possible into one statement I'll try to take a whole function that's worth of code and just squeeze and",
    "start": "1596200",
    "end": "1601880"
  },
  {
    "text": "squeeze and squeeze until I get it into one statement and that turns out to be about the stupidest thing you can",
    "start": "1601880",
    "end": "1607279"
  },
  {
    "text": "do um because looking at in terms of trade-offs the uh benefit of having",
    "start": "1607279",
    "end": "1612799"
  },
  {
    "text": "squeezed all that code into one statement there is no benefit to that um",
    "start": "1612799",
    "end": "1617960"
  },
  {
    "text": "and the cost is enormous because your code is now much more complicated much more difficult to understand much more",
    "start": "1617960",
    "end": "1624039"
  },
  {
    "text": "likely to be disguising security bugs um I do not trust myself to use this",
    "start": "1624039",
    "end": "1630039"
  },
  {
    "text": "operator because if I ever use it once then I start doing that and I start making really bad choices so I always",
    "start": "1630039",
    "end": "1637080"
  },
  {
    "text": "use plus equal one never the other and I hear people complain about that like I",
    "start": "1637080",
    "end": "1643080"
  },
  {
    "text": "should be able to write x++ cuz it means exactly the same thing and it's one",
    "start": "1643080",
    "end": "1648360"
  },
  {
    "text": "character or less and and like that's important and it's not important and not",
    "start": "1648360",
    "end": "1654039"
  },
  {
    "text": "only that it's wrong because it's not equivalent to um plus equal 1 plus plus",
    "start": "1654039",
    "end": "1660200"
  },
  {
    "text": "X is equivalent to plus equal 1 so whenever I see a program in which these things are being used interchangeably I",
    "start": "1660200",
    "end": "1666799"
  },
  {
    "text": "have to wonder does this guy know the difference between pre-increment and post-increment and I have to look at",
    "start": "1666799",
    "end": "1672360"
  },
  {
    "text": "every Plus+ in his program and ask did he get it wrong because it's a really easy transposition to get wrong and it",
    "start": "1672360",
    "end": "1679440"
  },
  {
    "text": "produces a really subtle off by one error I can't have any confidence in the code So reading that code becomes much",
    "start": "1679440",
    "end": "1686159"
  },
  {
    "text": "more difficult recently I was re reviewing something and I saw",
    "start": "1686159",
    "end": "1692440"
  },
  {
    "text": "this now if the original code had said plus equal 1 it would have been really easy to change it to plus equal 2 but it",
    "start": "1694080",
    "end": "1700960"
  },
  {
    "text": "was originally um plus plus X so he added another",
    "start": "1700960",
    "end": "1706519"
  },
  {
    "text": "one I think or or maybe it was just a copy paste error I don't know um I don't",
    "start": "1706519",
    "end": "1712399"
  },
  {
    "text": "know what he was trying to do um all I know is it looks stupid and it's probably",
    "start": "1712399",
    "end": "1718440"
  },
  {
    "text": "wrong so for no cost by adopting a more rigorous style many classes of Errors",
    "start": "1718440",
    "end": "1723799"
  },
  {
    "text": "can be automatically avoided so here's another common error",
    "start": "1723799",
    "end": "1732279"
  },
  {
    "text": "um uh we've got the first statement um which looks like the third statement but",
    "start": "1732279",
    "end": "1738640"
  },
  {
    "text": "actually does what the second statement does um again you don't want to be using",
    "start": "1738640",
    "end": "1743960"
  },
  {
    "text": "forms which look like common errors um this is something I see in JavaScript the pretty much all the",
    "start": "1743960",
    "end": "1750840"
  },
  {
    "text": "problems we've seen up until now are common to all of the C languages um with and and this one are unique to",
    "start": "1750840",
    "end": "1757039"
  },
  {
    "text": "JavaScript um so I've seen people using this thinking it means what the second",
    "start": "1757039",
    "end": "1762519"
  },
  {
    "text": "line says but it actually means what the third line says so if I see this in a",
    "start": "1762519",
    "end": "1767640"
  },
  {
    "text": "program the only thing I know for sure is that the programmer was incompetent but",
    "start": "1767640",
    "end": "1772799"
  },
  {
    "text": "beyond that trying to understand what he intended to do I'm not sure um so I",
    "start": "1772799",
    "end": "1778480"
  },
  {
    "text": "recommend avoiding these kinds of ambiguous forms right in a way that clearly communicates your",
    "start": "1778480",
    "end": "1785440"
  },
  {
    "text": "intent programming is the most complicated thing that humans do computer programs must be perfect and",
    "start": "1785440",
    "end": "1792399"
  },
  {
    "text": "humans are not good at perfect um so um designing a programming",
    "start": "1792399",
    "end": "1798640"
  },
  {
    "text": "style demands discipline it's not selecting features because they're liked or pretty or familiar or shiny it's",
    "start": "1798640",
    "end": "1805080"
  },
  {
    "text": "choosing features because they will reduce our error rate as ultimately that's the only thing that",
    "start": "1805080",
    "end": "1811640"
  },
  {
    "text": "matters um the JS lint style was driven by the need to automatically detect",
    "start": "1811640",
    "end": "1816960"
  },
  {
    "text": "errors um I when I started JS lint I had no idea where the program was going to",
    "start": "1816960",
    "end": "1822360"
  },
  {
    "text": "go um but over the years it has taught me an enormous amount about JavaScript and about program in style um in looking",
    "start": "1822360",
    "end": "1830159"
  },
  {
    "text": "at the forms that were available in the language and trying to determine um if they were being used",
    "start": "1830159",
    "end": "1835840"
  },
  {
    "text": "correctly um there are many um forms in JavaScript which can be used correctly",
    "start": "1835840",
    "end": "1841559"
  },
  {
    "text": "but often are used incorrectly and I tried to figure out the difference and I",
    "start": "1841559",
    "end": "1847399"
  },
  {
    "text": "couldn't I could not find automatic rules which told me when wi was being used well when eval was being used well",
    "start": "1847399",
    "end": "1854679"
  },
  {
    "text": "so ultimately I was forced to conclude that forms that can h defects should themselves be considered defects because",
    "start": "1854679",
    "end": "1862159"
  },
  {
    "text": "ultimately we're trying to get the defects out so there will be bugs uh there will",
    "start": "1862159",
    "end": "1867720"
  },
  {
    "text": "always be bugs I'm not promising that I can eliminate all bugs what I'm trying to do is shave the odds in your favor um",
    "start": "1867720",
    "end": "1874600"
  },
  {
    "text": "anything we can do to reduce our error rates will make us more effective in what we do so the approach I've taken with JS",
    "start": "1874600",
    "end": "1882159"
  },
  {
    "text": "lint is language subsetting uh it's been said only a Madman would use all of C++",
    "start": "1882159",
    "end": "1888120"
  },
  {
    "text": "it can also be said only a Madman would use C++ I'm not going to debate that point this morning um despite its",
    "start": "1888120",
    "end": "1895480"
  },
  {
    "text": "obvious uh",
    "start": "1895480",
    "end": "1898919"
  },
  {
    "text": "truthiness yeah so in conclusion uh good style is good for",
    "start": "1901600",
    "end": "1906880"
  },
  {
    "text": "your gut thank you and good night",
    "start": "1906880",
    "end": "1911320"
  },
  {
    "text": "uh so I think we have a few minutes for questions so if you can raise your hand and and shout it out and and I'll try to",
    "start": "1921799",
    "end": "1926880"
  },
  {
    "text": "repeat your question yeah yeah so what do I think about JavaScript being the Assembly Language for the web this was a",
    "start": "1926880",
    "end": "1932880"
  },
  {
    "text": "role we never anticipated um I I I don't call it the Assembly",
    "start": "1932880",
    "end": "1938720"
  },
  {
    "text": "Language I call the virtual machine of the web but you know essentially the same thing I always thought the virtual machine of the web was going to be the",
    "start": "1938720",
    "end": "1944799"
  },
  {
    "text": "Java virtual machine um but we're now finding that Google is translating Java",
    "start": "1944799",
    "end": "1949960"
  },
  {
    "text": "into JavaScript so it can run everywhere wow that that's amazing and so there's",
    "start": "1949960",
    "end": "1955360"
  },
  {
    "text": "now pressure on JavaScript to be a better platform for a better compilation",
    "start": "1955360",
    "end": "1961480"
  },
  {
    "text": "Target um and so we're trying to do that without compromising the language for its intended purposes so let me give you",
    "start": "1961480",
    "end": "1968559"
  },
  {
    "text": "an example of one of the uh trade-offs we're looking at JavaScript has a small",
    "start": "1968559",
    "end": "1973760"
  },
  {
    "text": "set of of um Loop and and structured programming",
    "start": "1973760",
    "end": "1980880"
  },
  {
    "text": "uh things like if and while and for if you if you have a language which has a different set of controls than",
    "start": "1980880",
    "end": "1987360"
  },
  {
    "text": "JavaScript it's really hard to translate your program into JavaScript or to to translate it efficiently um so there's",
    "start": "1987360",
    "end": "1995360"
  },
  {
    "text": "been interest in adding go-to to the language so that you could then synthesize your own control operators",
    "start": "1995360",
    "end": "2001639"
  },
  {
    "text": "and that would make so much sense if all it's intended to be is um a target language",
    "start": "2001639",
    "end": "2008559"
  },
  {
    "text": "um what I'm certain will happen is that anytime we put a bad feature into the language people will find it the problem",
    "start": "2008559",
    "end": "2015080"
  },
  {
    "text": "with bad features isn't that they're useless it's that they're dangerous they're all too often useful uh so",
    "start": "2015080",
    "end": "2022080"
  },
  {
    "text": "someone will tweet somewhere hey I put a go-to in my program and it's going faster and then suddenly all the Geeks",
    "start": "2022080",
    "end": "2028240"
  },
  {
    "text": "are going to start putting go-to in their program it took us 20 years to get rid of it the first time um and it would",
    "start": "2028240",
    "end": "2035639"
  },
  {
    "text": "take us another 20 years to get rid of it again uh we don't want to be responsible for that um we're trying to",
    "start": "2035639",
    "end": "2041159"
  },
  {
    "text": "to move things forward um so there's always going to be this tension between",
    "start": "2041159",
    "end": "2046240"
  },
  {
    "text": "JavaScript as a language itself which is actually a brilliant language and people should learn how to use it and then the",
    "start": "2046240",
    "end": "2052919"
  },
  {
    "text": "people who don't want to learn how to use it and would rather be using a different language but because their language isn't popular um they have to",
    "start": "2052919",
    "end": "2060720"
  },
  {
    "text": "turn into JavaScript so they can run it everywhere you know so it it's hard when we're going to have to deal with that",
    "start": "2060720",
    "end": "2066720"
  },
  {
    "text": "another example is um uh integers JavaScript got integers right which is",
    "start": "2066720",
    "end": "2072760"
  },
  {
    "text": "basically it there's an error in almost all programming languages that if you have two numbers which are greater than",
    "start": "2072760",
    "end": "2078919"
  },
  {
    "text": "zero and add them together you can get a result which is smaller than either of those numbers that's",
    "start": "2078919",
    "end": "2085158"
  },
  {
    "text": "insane but you know Fortran had it C has it Java has it C has it",
    "start": "2085159",
    "end": "2092440"
  },
  {
    "text": "and mostly people haven't figured out that's a stupid thing um and so they want us to have it um there are people",
    "start": "2092440",
    "end": "2099040"
  },
  {
    "text": "who want to convert C into JavaScript and there are errors in C programs",
    "start": "2099040",
    "end": "2105160"
  },
  {
    "text": "because of the wrapping around of integers and they'd like us to be able to easily and efficiently replicate",
    "start": "2105160",
    "end": "2110359"
  },
  {
    "text": "those errors when they get translated into JavaScript and I don't know so it's it's",
    "start": "2110359",
    "end": "2117200"
  },
  {
    "text": "it's hard to be ahead of the pack I mean there are a couple of places where JavaScript is smarter than the other languages and there's this pressure on",
    "start": "2117200",
    "end": "2123720"
  },
  {
    "text": "JavaScript to get dumbed down in order to make it more like everything else uh one last question uh yeah what's my",
    "start": "2123720",
    "end": "2132359"
  },
  {
    "text": "uh take on JS hint so JS hint is a version of JS lint uh which allows you to turn off more and more of the",
    "start": "2132359",
    "end": "2139160"
  },
  {
    "text": "warnings um there are a lot of stupid people in the world and I think it's great that there's a tool like that for",
    "start": "2139160",
    "end": "2146520"
  },
  {
    "text": "[Applause] them okay so that's it I'm out of",
    "start": "2148140",
    "end": "2153680"
  },
  {
    "text": "time thank you [Applause] [Music]",
    "start": "2153680",
    "end": "2168349"
  }
]