[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "this is a pretty cool first time that",
    "start": "7760",
    "end": "10440"
  },
  {
    "text": "we've had something like this out in",
    "start": "10440",
    "end": "11880"
  },
  {
    "text": "Denver been out the Denver quite a few",
    "start": "11880",
    "end": "13559"
  },
  {
    "text": "times is actually out here last month",
    "start": "13559",
    "end": "14960"
  },
  {
    "text": "for phosphor G the big geospatial open",
    "start": "14960",
    "end": "18359"
  },
  {
    "text": "source conference and I actually gave",
    "start": "18359",
    "end": "21090"
  },
  {
    "text": "this presentation there so if any of you",
    "start": "21090",
    "end": "22619"
  },
  {
    "text": "guys were at foss4g out here in Denver",
    "start": "22619",
    "end": "25260"
  },
  {
    "text": "last month it's the same presentation I",
    "start": "25260",
    "end": "27330"
  },
  {
    "text": "added two more slides but other than",
    "start": "27330",
    "end": "28949"
  },
  {
    "text": "that same I was pleasantly surprised at",
    "start": "28949",
    "end": "32910"
  },
  {
    "text": "phosphor G the number of post Christ",
    "start": "32910",
    "end": "35340"
  },
  {
    "text": "users that were here so there were 700",
    "start": "35340",
    "end": "36899"
  },
  {
    "text": "post quest users here in Denver last",
    "start": "36899",
    "end": "39210"
  },
  {
    "text": "month it was pretty pretty amazing being",
    "start": "39210",
    "end": "41250"
  },
  {
    "text": "here what are going to talk about is",
    "start": "41250",
    "end": "43670"
  },
  {
    "text": "scaling postgres using a product called",
    "start": "43670",
    "end": "46890"
  },
  {
    "text": "startup it's an open source product that",
    "start": "46890",
    "end": "50160"
  },
  {
    "text": "lets you scale postgres beyond a single",
    "start": "50160",
    "end": "53430"
  },
  {
    "text": "server starting up Who am I i'm the",
    "start": "53430",
    "end": "56940"
  },
  {
    "start": "55000",
    "end": "55000"
  },
  {
    "text": "founder of a company called cirrus",
    "start": "56940",
    "end": "58710"
  },
  {
    "text": "technologies focusing on consulting in",
    "start": "58710",
    "end": "61649"
  },
  {
    "text": "the cloud space mainly around databases",
    "start": "61649",
    "end": "65250"
  },
  {
    "text": "in the cloud moving people who have been",
    "start": "65250",
    "end": "67740"
  },
  {
    "text": "in an enterprise data center into a",
    "start": "67740",
    "end": "69479"
  },
  {
    "text": "cloud environment before that I was the",
    "start": "69479",
    "end": "72150"
  },
  {
    "text": "chief architect over at enterprisedb",
    "start": "72150",
    "end": "73670"
  },
  {
    "text": "spent a number of years adding Oracle",
    "start": "73670",
    "end": "76590"
  },
  {
    "text": "compatibility to postgres so we've got a",
    "start": "76590",
    "end": "79049"
  },
  {
    "text": "very deep understanding of the internals",
    "start": "79049",
    "end": "81240"
  },
  {
    "text": "of postgres now most of the co-organizer",
    "start": "81240",
    "end": "83640"
  },
  {
    "text": "of the New York City postgres users",
    "start": "83640",
    "end": "85860"
  },
  {
    "text": "group so we have about 300 members there",
    "start": "85860",
    "end": "87869"
  },
  {
    "text": "now regular monthly meetings it's I",
    "start": "87869",
    "end": "90659"
  },
  {
    "text": "encourage you to do that doing that here",
    "start": "90659",
    "end": "93270"
  },
  {
    "text": "too for you folks who are local here in",
    "start": "93270",
    "end": "94890"
  },
  {
    "text": "Denver there is a Denver users group",
    "start": "94890",
    "end": "96750"
  },
  {
    "text": "start attending those meetings as are",
    "start": "96750",
    "end": "99270"
  },
  {
    "text": "there it's it's a great community as you",
    "start": "99270",
    "end": "101579"
  },
  {
    "text": "get in order to get to talk to other",
    "start": "101579",
    "end": "104399"
  },
  {
    "text": "postgres users month after month it's a",
    "start": "104399",
    "end": "106320"
  },
  {
    "text": "great way of doing it and we've been",
    "start": "106320",
    "end": "107759"
  },
  {
    "text": "doing in New York for a couple years now",
    "start": "107759",
    "end": "110509"
  },
  {
    "text": "so what we'll talk about what stato is",
    "start": "110509",
    "end": "113210"
  },
  {
    "text": "the architecture of it kind of how it",
    "start": "113210",
    "end": "116310"
  },
  {
    "text": "handles different queries how it's",
    "start": "116310",
    "end": "118350"
  },
  {
    "text": "scaled and then most importantly the",
    "start": "118350",
    "end": "119939"
  },
  {
    "text": "limitations I'm going to tell you all",
    "start": "119939",
    "end": "121560"
  },
  {
    "text": "the really cool things about it about",
    "start": "121560",
    "end": "123149"
  },
  {
    "text": "how it will scale but I also tell you",
    "start": "123149",
    "end": "124649"
  },
  {
    "text": "where it's going to fall down so this",
    "start": "124649",
    "end": "126240"
  },
  {
    "text": "way if you have an application that",
    "start": "126240",
    "end": "127500"
  },
  {
    "text": "doesn't quite work with it you'll know",
    "start": "127500",
    "end": "129390"
  },
  {
    "text": "it had any time instead of wasting all",
    "start": "129390",
    "end": "130800"
  },
  {
    "text": "your time",
    "start": "130800",
    "end": "131400"
  },
  {
    "text": "what is it really a continuation of the",
    "start": "131400",
    "end": "135220"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "grid simple project rich sequel and",
    "start": "135220",
    "end": "137920"
  },
  {
    "text": "really the prior version of an extend EV",
    "start": "137920",
    "end": "140530"
  },
  {
    "text": "has been around since early 2003",
    "start": "140530",
    "end": "142240"
  },
  {
    "text": "enterprise DB acquired it back in 2007 i",
    "start": "142240",
    "end": "147280"
  },
  {
    "text": "believe and then open sourced it as",
    "start": "147280",
    "end": "148930"
  },
  {
    "text": "great sequel so it's been around for a",
    "start": "148930",
    "end": "151210"
  },
  {
    "text": "number of years a little over a year ago",
    "start": "151210",
    "end": "154090"
  },
  {
    "text": "enterprisedb stop supporting it and just",
    "start": "154090",
    "end": "156490"
  },
  {
    "text": "donated it out to the open source",
    "start": "156490",
    "end": "158170"
  },
  {
    "text": "community and when i left enterprisedb i",
    "start": "158170",
    "end": "160540"
  },
  {
    "text": "picked up and i renamed it stato because",
    "start": "160540",
    "end": "163660"
  },
  {
    "text": "of different trademark issues and things",
    "start": "163660",
    "end": "165610"
  },
  {
    "text": "like that's what saddle means is just",
    "start": "165610",
    "end": "167230"
  },
  {
    "text": "heard in polish kind of like slow knee",
    "start": "167230",
    "end": "169930"
  },
  {
    "text": "means a group of elephants in Russian I",
    "start": "169930",
    "end": "171490"
  },
  {
    "text": "figured it was a nice way to name it in",
    "start": "171490",
    "end": "173680"
  },
  {
    "text": "the in the postgres world so it's not a",
    "start": "173680",
    "end": "176920"
  },
  {
    "text": "new project it's been around for years",
    "start": "176920",
    "end": "178510"
  },
  {
    "text": "and years and years it just really has a",
    "start": "178510",
    "end": "179890"
  },
  {
    "text": "new name essentially what it is is it",
    "start": "179890",
    "end": "183040"
  },
  {
    "text": "shared nothing distributed data",
    "start": "183040",
    "end": "184390"
  },
  {
    "text": "architecture it'll lets you take your",
    "start": "184390",
    "end": "187000"
  },
  {
    "text": "Postgres database that runs on a single",
    "start": "187000",
    "end": "188980"
  },
  {
    "text": "server and span that same data race",
    "start": "188980",
    "end": "191980"
  },
  {
    "text": "across many servers or a single server",
    "start": "191980",
    "end": "194740"
  },
  {
    "text": "and paralyze it across all the different",
    "start": "194740",
    "end": "197290"
  },
  {
    "text": "chords you have on that single machine",
    "start": "197290",
    "end": "198720"
  },
  {
    "text": "it's essentially a layer that tips on",
    "start": "198720",
    "end": "201580"
  },
  {
    "text": "top of postgres that handles all the",
    "start": "201580",
    "end": "203680"
  },
  {
    "text": "coordination for you it's essentially an",
    "start": "203680",
    "end": "206710"
  },
  {
    "text": "open source version of greenplum netezza",
    "start": "206710",
    "end": "208900"
  },
  {
    "text": "or teradata it's really designed for",
    "start": "208900",
    "end": "210700"
  },
  {
    "text": "data warehousing and reporting what is",
    "start": "210700",
    "end": "214030"
  },
  {
    "text": "it from the beginning it was designed",
    "start": "214030",
    "end": "216310"
  },
  {
    "text": "for parallel query where postgres is you",
    "start": "216310",
    "end": "218590"
  },
  {
    "text": "have this great big query that's Hannah",
    "start": "218590",
    "end": "220990"
  },
  {
    "text": "lately going going to hit a terabyte",
    "start": "220990",
    "end": "222490"
  },
  {
    "text": "worth of data you throw at it with a box",
    "start": "222490",
    "end": "224920"
  },
  {
    "text": "with 16 cores and you look at it and one",
    "start": "224920",
    "end": "226959"
  },
  {
    "text": "chorus pegging the rest of them sitting",
    "start": "226959",
    "end": "228370"
  },
  {
    "text": "there knew nothing this from the",
    "start": "228370",
    "end": "230709"
  },
  {
    "text": "beginning was designed to paralyze that",
    "start": "230709",
    "end": "232510"
  },
  {
    "text": "across all your course across multiple",
    "start": "232510",
    "end": "235480"
  },
  {
    "text": "different machines from the beginning",
    "start": "235480",
    "end": "237420"
  },
  {
    "text": "it's not just to read only scenario but",
    "start": "237420",
    "end": "241300"
  },
  {
    "text": "it is geared towards data warehousing so",
    "start": "241300",
    "end": "243400"
  },
  {
    "text": "it's not going to be able to keep up",
    "start": "243400",
    "end": "244990"
  },
  {
    "text": "with your massive transaction load but",
    "start": "244990",
    "end": "248380"
  },
  {
    "text": "you can handle updates lita it is",
    "start": "248380",
    "end": "250900"
  },
  {
    "text": "transactional but if the ideal way of",
    "start": "250900",
    "end": "254830"
  },
  {
    "text": "doing it is through parallel loading and",
    "start": "254830",
    "end": "257650"
  },
  {
    "text": "data loading so if you have bulk loads",
    "start": "257650",
    "end": "259840"
  },
  {
    "text": "it does that extremely quickly and",
    "start": "259840",
    "end": "262510"
  },
  {
    "text": "that's the way to really get data in",
    "start": "262510",
    "end": "263740"
  },
  {
    "text": "there you can",
    "start": "263740",
    "end": "264130"
  },
  {
    "text": "do one insert at a time it's going to be",
    "start": "264130",
    "end": "266530"
  },
  {
    "text": "about 10 to speed as a regular postgres",
    "start": "266530",
    "end": "268510"
  },
  {
    "text": "instance but if you bulk load it it's",
    "start": "268510",
    "end": "270520"
  },
  {
    "text": "going to be about 10 times as fast and",
    "start": "270520",
    "end": "273210"
  },
  {
    "text": "it's on the wire it's going to look like",
    "start": "273210",
    "end": "275440"
  },
  {
    "text": "a regular Postgres database it sits on",
    "start": "275440",
    "end": "277450"
  },
  {
    "text": "top of postgres but you could connect to",
    "start": "277450",
    "end": "279460"
  },
  {
    "text": "it from P sequel and it's going to look",
    "start": "279460",
    "end": "280990"
  },
  {
    "text": "like a Postgres database to even though",
    "start": "280990",
    "end": "283060"
  },
  {
    "text": "what you're connecting to is stato",
    "start": "283060",
    "end": "285430"
  },
  {
    "text": "sitting in front of 10 postgres",
    "start": "285430",
    "end": "287500"
  },
  {
    "text": "databases what isn't it it's not a",
    "start": "287500",
    "end": "291220"
  },
  {
    "start": "289000",
    "end": "289000"
  },
  {
    "text": "replication solution like slow knee or",
    "start": "291220",
    "end": "293530"
  },
  {
    "text": "baccardo it's not designed for a",
    "start": "293530",
    "end": "295720"
  },
  {
    "text": "replication of any sort it does do some",
    "start": "295720",
    "end": "297790"
  },
  {
    "text": "replication in there but that just",
    "start": "297790",
    "end": "299530"
  },
  {
    "text": "really a performance enhancement it's",
    "start": "299530",
    "end": "302380"
  },
  {
    "text": "not a high availability solution it's",
    "start": "302380",
    "end": "304030"
  },
  {
    "text": "not designed to give you 5 92 up time",
    "start": "304030",
    "end": "307650"
  },
  {
    "text": "it's not a scalable transactional thing",
    "start": "307650",
    "end": "310780"
  },
  {
    "text": "like post car sexy postgres sexy doesn't",
    "start": "310780",
    "end": "313150"
  },
  {
    "text": "have query paralyzation it's designed",
    "start": "313150",
    "end": "315460"
  },
  {
    "text": "for massive number of concurrent rights",
    "start": "315460",
    "end": "317650"
  },
  {
    "text": "and skilling that across a bunch of",
    "start": "317650",
    "end": "320050"
  },
  {
    "text": "different servers and it's not one of",
    "start": "320050",
    "end": "322330"
  },
  {
    "text": "those elastic no sequel eventually",
    "start": "322330",
    "end": "324460"
  },
  {
    "text": "consistent databases it is a essentially",
    "start": "324460",
    "end": "327010"
  },
  {
    "text": "an open source data warehousing solution",
    "start": "327010",
    "end": "329970"
  },
  {
    "text": "what does it look like again it's",
    "start": "329970",
    "end": "333820"
  },
  {
    "start": "330000",
    "end": "330000"
  },
  {
    "text": "loosely coupled chair nothing",
    "start": "333820",
    "end": "335050"
  },
  {
    "text": "architecture so all these data nodes are",
    "start": "335050",
    "end": "337630"
  },
  {
    "text": "postgres databases they're all sitting",
    "start": "337630",
    "end": "339970"
  },
  {
    "text": "there independent post-press databases",
    "start": "339970",
    "end": "341620"
  },
  {
    "text": "and they don't talk to one another",
    "start": "341620",
    "end": "343170"
  },
  {
    "text": "everything is coordinated through the",
    "start": "343170",
    "end": "345910"
  },
  {
    "text": "central coordinator or sitting on top of",
    "start": "345910",
    "end": "347590"
  },
  {
    "text": "it and there's agents running on each",
    "start": "347590",
    "end": "349720"
  },
  {
    "text": "one of those postgrads databases if you",
    "start": "349720",
    "end": "352390"
  },
  {
    "text": "have to do some sort of row shipping",
    "start": "352390",
    "end": "354010"
  },
  {
    "text": "across no joints when you have data in",
    "start": "354010",
    "end": "356260"
  },
  {
    "text": "onenote desa joined the data in another",
    "start": "356260",
    "end": "357910"
  },
  {
    "text": "note and it does that the agents speed",
    "start": "357910",
    "end": "360490"
  },
  {
    "text": "that up and it maintains everything",
    "start": "360490",
    "end": "363430"
  },
  {
    "text": "through a couple different repositories",
    "start": "363430",
    "end": "365070"
  },
  {
    "text": "you're going to have the metadata",
    "start": "365070",
    "end": "366970"
  },
  {
    "text": "repository sitting on the coordinator",
    "start": "366970",
    "end": "368650"
  },
  {
    "text": "and each one of those data nodes you",
    "start": "368650",
    "end": "370540"
  },
  {
    "text": "could connect to their Postgres database",
    "start": "370540",
    "end": "372340"
  },
  {
    "text": "with piece equal in each one of them is",
    "start": "372340",
    "end": "374230"
  },
  {
    "text": "going to have its own database and in",
    "start": "374230",
    "end": "376330"
  },
  {
    "text": "that database is going to have a subset",
    "start": "376330",
    "end": "378340"
  },
  {
    "text": "of data so in this scenario where",
    "start": "378340",
    "end": "380440"
  },
  {
    "text": "there's four data notes each one of",
    "start": "380440",
    "end": "382180"
  },
  {
    "text": "those nodes is going to have a quarter",
    "start": "382180",
    "end": "383860"
  },
  {
    "text": "of the overall data you got a terabyte",
    "start": "383860",
    "end": "385480"
  },
  {
    "text": "worth of data each one of them is going",
    "start": "385480",
    "end": "387160"
  },
  {
    "text": "to have 250 gig alright",
    "start": "387160",
    "end": "391490"
  },
  {
    "start": "389000",
    "end": "389000"
  },
  {
    "text": "the way you set it up is if you're going",
    "start": "391490",
    "end": "393889"
  },
  {
    "text": "to have multiple cores and you want to",
    "start": "393889",
    "end": "397009"
  },
  {
    "text": "be able to leverage multiple cores the",
    "start": "397009",
    "end": "399050"
  },
  {
    "text": "best way of doing that is to put",
    "start": "399050",
    "end": "400639"
  },
  {
    "text": "multiple postgres instances on each",
    "start": "400639",
    "end": "402380"
  },
  {
    "text": "physical server because it's going to",
    "start": "402380",
    "end": "404330"
  },
  {
    "text": "paralyze at that level you can do it at",
    "start": "404330",
    "end": "406160"
  },
  {
    "text": "the database level it's much better to",
    "start": "406160",
    "end": "408259"
  },
  {
    "text": "do it at the instance of the cluster",
    "start": "408259",
    "end": "410569"
  },
  {
    "text": "level run multiple clusters this will",
    "start": "410569",
    "end": "413030"
  },
  {
    "text": "let you when we get to the end ended a",
    "start": "413030",
    "end": "416210"
  },
  {
    "text": "presentation of being able to scale out",
    "start": "416210",
    "end": "418490"
  },
  {
    "text": "better as you want to add more nodes",
    "start": "418490",
    "end": "421150"
  },
  {
    "text": "your tables are going to be either be",
    "start": "421150",
    "end": "423500"
  },
  {
    "text": "replicated or partition and we'll get",
    "start": "423500",
    "end": "425120"
  },
  {
    "text": "into a little bit more detail of what",
    "start": "425120",
    "end": "426860"
  },
  {
    "text": "that is I think that's why there's been",
    "start": "426860",
    "end": "428090"
  },
  {
    "text": "a lot of confusion over the years of",
    "start": "428090",
    "end": "430060"
  },
  {
    "text": "grid sequel or start out being a",
    "start": "430060",
    "end": "432409"
  },
  {
    "text": "replication solution because it says",
    "start": "432409",
    "end": "433970"
  },
  {
    "text": "tables can be replicated but it's really",
    "start": "433970",
    "end": "436220"
  },
  {
    "text": "just a performance enhancement you want",
    "start": "436220",
    "end": "438710"
  },
  {
    "text": "your replicated tables to be your",
    "start": "438710",
    "end": "440389"
  },
  {
    "text": "relatively static look-up tables state",
    "start": "440389",
    "end": "442639"
  },
  {
    "text": "code country code things that you're",
    "start": "442639",
    "end": "444830"
  },
  {
    "text": "always joining to but never updating and",
    "start": "444830",
    "end": "447830"
  },
  {
    "text": "your partition tables are going to be a",
    "start": "447830",
    "end": "449210"
  },
  {
    "text": "large fact table so if you think of it",
    "start": "449210",
    "end": "450710"
  },
  {
    "text": "as a star schema you're going to have",
    "start": "450710",
    "end": "451940"
  },
  {
    "text": "one large fact table and a bunch of",
    "start": "451940",
    "end": "454039"
  },
  {
    "text": "dimensions around it so all those",
    "start": "454039",
    "end": "455599"
  },
  {
    "text": "dimensions should be partitions",
    "start": "455599",
    "end": "456969"
  },
  {
    "text": "replicated and your fact table should be",
    "start": "456969",
    "end": "459919"
  },
  {
    "text": "part of partition so this way you'll be",
    "start": "459919",
    "end": "462380"
  },
  {
    "text": "able to paralyze across everything and",
    "start": "462380",
    "end": "463940"
  },
  {
    "text": "get linear performance you could also",
    "start": "463940",
    "end": "468080"
  },
  {
    "start": "466000",
    "end": "466000"
  },
  {
    "text": "leverage post presses internal",
    "start": "468080",
    "end": "470000"
  },
  {
    "text": "partitioning mechanisms so say you have",
    "start": "470000",
    "end": "471770"
  },
  {
    "text": "a really big sales table that you want",
    "start": "471770",
    "end": "474979"
  },
  {
    "text": "to be able to partition across multiple",
    "start": "474979",
    "end": "476449"
  },
  {
    "text": "servers but you also want to partition",
    "start": "476449",
    "end": "478699"
  },
  {
    "text": "it by month so sales month or year",
    "start": "478699",
    "end": "481250"
  },
  {
    "text": "you're able to leverage the constraint",
    "start": "481250",
    "end": "483229"
  },
  {
    "text": "exclusion partitioning inside a postgres",
    "start": "483229",
    "end": "484940"
  },
  {
    "text": "as well because whenever you could make",
    "start": "484940",
    "end": "487550"
  },
  {
    "text": "a data file and more importantly an",
    "start": "487550",
    "end": "489229"
  },
  {
    "text": "index smaller do it your queries are",
    "start": "489229",
    "end": "491509"
  },
  {
    "text": "going to go faster so if you could split",
    "start": "491509",
    "end": "493699"
  },
  {
    "text": "it up yet might have a billion rows in a",
    "start": "493699",
    "end": "495830"
  },
  {
    "text": "table but you could essentially through",
    "start": "495830",
    "end": "497930"
  },
  {
    "text": "this if you're running 10 nodes on it",
    "start": "497930",
    "end": "499430"
  },
  {
    "text": "each one of them is going to be a 100",
    "start": "499430",
    "end": "501169"
  },
  {
    "text": "gig and then you run 10 partitions each",
    "start": "501169",
    "end": "503419"
  },
  {
    "text": "one of them is going to be 10 gig that's",
    "start": "503419",
    "end": "505490"
  },
  {
    "text": "a more manageable table size so again",
    "start": "505490",
    "end": "509569"
  },
  {
    "text": "making things smaller makes things",
    "start": "509569",
    "end": "510949"
  },
  {
    "text": "faster which is what I just said and",
    "start": "510949",
    "end": "515620"
  },
  {
    "text": "because of the way stato works you're",
    "start": "515620",
    "end": "518450"
  },
  {
    "text": "able to scan those partitions in",
    "start": "518450",
    "end": "520250"
  },
  {
    "text": "parallel which can't do inside of native",
    "start": "520250",
    "end": "522050"
  },
  {
    "text": "postgres",
    "start": "522050",
    "end": "524919"
  },
  {
    "text": "so the way we do this is in the ddl in",
    "start": "525200",
    "end": "528660"
  },
  {
    "text": "order to create your tables we've added",
    "start": "528660",
    "end": "530070"
  },
  {
    "text": "a little bit of syntax at the end of",
    "start": "530070",
    "end": "531960"
  },
  {
    "text": "saying state codes for instance you put",
    "start": "531960",
    "end": "534750"
  },
  {
    "text": "the replicated syntax at the end of it",
    "start": "534750",
    "end": "537690"
  },
  {
    "text": "and that'll tell that would be stored in",
    "start": "537690",
    "end": "539700"
  },
  {
    "text": "the metadata repository of stato and",
    "start": "539700",
    "end": "541530"
  },
  {
    "text": "what that means is every one of the",
    "start": "541530",
    "end": "543720"
  },
  {
    "text": "nodes in data nodes inside the stato is",
    "start": "543720",
    "end": "546480"
  },
  {
    "text": "going to have exactly the same copy of",
    "start": "546480",
    "end": "547890"
  },
  {
    "text": "it so if you're going to update this and",
    "start": "547890",
    "end": "549690"
  },
  {
    "text": "your 10 nodes you're going to make ten",
    "start": "549690",
    "end": "550890"
  },
  {
    "text": "copies of it but what you're going to do",
    "start": "550890",
    "end": "553170"
  },
  {
    "text": "is all your queries are going to join to",
    "start": "553170",
    "end": "555150"
  },
  {
    "text": "that so you want that local to",
    "start": "555150",
    "end": "556410"
  },
  {
    "text": "everything and you're never never going",
    "start": "556410",
    "end": "557520"
  },
  {
    "text": "to change it how often do we add states",
    "start": "557520",
    "end": "558840"
  },
  {
    "text": "to the country it's relatively rare",
    "start": "558840",
    "end": "562380"
  },
  {
    "start": "560000",
    "end": "560000"
  },
  {
    "text": "things you don't want it's not a big",
    "start": "562380",
    "end": "564030"
  },
  {
    "text": "deal replicating that for your your",
    "start": "564030",
    "end": "567180"
  },
  {
    "text": "tables that have all their data so this",
    "start": "567180",
    "end": "569460"
  },
  {
    "text": "is the tiger data set that you get from",
    "start": "569460",
    "end": "571980"
  },
  {
    "text": "the US government that has all the roads",
    "start": "571980",
    "end": "575010"
  },
  {
    "text": "in the country parts you could put you",
    "start": "575010",
    "end": "577980"
  },
  {
    "text": "have the additional centex of a",
    "start": "577980",
    "end": "579210"
  },
  {
    "text": "partitioning key and here I'm just",
    "start": "579210",
    "end": "581610"
  },
  {
    "text": "partitioning it on the surrogate key GID",
    "start": "581610",
    "end": "584150"
  },
  {
    "text": "which will do a hash partitioning across",
    "start": "584150",
    "end": "586740"
  },
  {
    "text": "all the different notes and pretty well",
    "start": "586740",
    "end": "589350"
  },
  {
    "text": "equally distributed across all the",
    "start": "589350",
    "end": "590850"
  },
  {
    "text": "different notes you can partition it on",
    "start": "590850",
    "end": "593070"
  },
  {
    "text": "any of your columns I wouldn't advise",
    "start": "593070",
    "end": "596190"
  },
  {
    "text": "you to do it on a geometry column",
    "start": "596190",
    "end": "597750"
  },
  {
    "text": "because you have to calculate a hash and",
    "start": "597750",
    "end": "599100"
  },
  {
    "text": "a geometry column that's going to be",
    "start": "599100",
    "end": "600300"
  },
  {
    "text": "extremely slow but doing it on a",
    "start": "600300",
    "end": "603000"
  },
  {
    "text": "surrogate key works really really well",
    "start": "603000",
    "end": "604290"
  },
  {
    "text": "you could do it on state code and then",
    "start": "604290",
    "end": "606390"
  },
  {
    "text": "you know all the New Jersey is going to",
    "start": "606390",
    "end": "608040"
  },
  {
    "text": "be here all the Colorado is going to be",
    "start": "608040",
    "end": "609450"
  },
  {
    "text": "here if you're going to join regularly",
    "start": "609450",
    "end": "611880"
  },
  {
    "text": "on state code to other tables that you",
    "start": "611880",
    "end": "614040"
  },
  {
    "text": "might also partition by state code so",
    "start": "614040",
    "end": "619160"
  },
  {
    "start": "617000",
    "end": "617000"
  },
  {
    "text": "the way stato gets all the performance",
    "start": "619160",
    "end": "621870"
  },
  {
    "text": "enhanced with gains it really is through",
    "start": "621870",
    "end": "623910"
  },
  {
    "text": "its own optimizer so it's sitting on top",
    "start": "623910",
    "end": "625530"
  },
  {
    "text": "of postgres and it has its own parser it",
    "start": "625530",
    "end": "628200"
  },
  {
    "text": "has its own optimizer so when you send",
    "start": "628200",
    "end": "630150"
  },
  {
    "text": "in a query select star from foo it's",
    "start": "630150",
    "end": "633060"
  },
  {
    "text": "going to parse that and then also",
    "start": "633060",
    "end": "635100"
  },
  {
    "text": "optimize it so select start from ponos",
    "start": "635100",
    "end": "637980"
  },
  {
    "text": "it's going to have to get all the data",
    "start": "637980",
    "end": "639120"
  },
  {
    "text": "from all the notes when it's going",
    "start": "639120",
    "end": "641790"
  },
  {
    "text": "through his optimization it does a",
    "start": "641790",
    "end": "643680"
  },
  {
    "text": "cost-based optimizer the same way that",
    "start": "643680",
    "end": "645600"
  },
  {
    "text": "postgres does but what what it does is",
    "start": "645600",
    "end": "648570"
  },
  {
    "text": "it calculates the most expensive thing",
    "start": "648570",
    "end": "650880"
  },
  {
    "text": "inside of stud oh is Rho shipping so we",
    "start": "650880",
    "end": "653040"
  },
  {
    "text": "have to join two tables that are on",
    "start": "653040",
    "end": "654510"
  },
  {
    "text": "different physical nodes",
    "start": "654510",
    "end": "656209"
  },
  {
    "text": "you have to ship all the you know",
    "start": "656209",
    "end": "657920"
  },
  {
    "text": "million rows from one server to another",
    "start": "657920",
    "end": "659300"
  },
  {
    "text": "that's a really expensive operation so",
    "start": "659300",
    "end": "661610"
  },
  {
    "text": "it tries to avoid that wherever possible",
    "start": "661610",
    "end": "663550"
  },
  {
    "text": "and it's going to look for joints to",
    "start": "663550",
    "end": "666920"
  },
  {
    "text": "replicated tables because if it's a",
    "start": "666920",
    "end": "668269"
  },
  {
    "text": "replicated table it knows it's on all",
    "start": "668269",
    "end": "670220"
  },
  {
    "text": "the different nodes you could join their",
    "start": "670220",
    "end": "672019"
  },
  {
    "text": "you don't it knows for sure it never has",
    "start": "672019",
    "end": "674209"
  },
  {
    "text": "to do any row shipping and it's also",
    "start": "674209",
    "end": "676069"
  },
  {
    "text": "going to look for joins on foreign keys",
    "start": "676069",
    "end": "678439"
  },
  {
    "text": "that it knows they're on the same tape",
    "start": "678439",
    "end": "680449"
  },
  {
    "text": "so say you have a sales order header in",
    "start": "680449",
    "end": "682249"
  },
  {
    "text": "the sales order detail where you're",
    "start": "682249",
    "end": "684350"
  },
  {
    "text": "going to if you partition by you know",
    "start": "684350",
    "end": "686869"
  },
  {
    "text": "sales ID and sales line ID that wouldn't",
    "start": "686869",
    "end": "690050"
  },
  {
    "text": "necessarily mean that all the sales",
    "start": "690050",
    "end": "691519"
  },
  {
    "text": "order numbers are all on the same",
    "start": "691519",
    "end": "692749"
  },
  {
    "text": "physical server so it has 20 shipping if",
    "start": "692749",
    "end": "695449"
  },
  {
    "text": "you partition by sales / order number on",
    "start": "695449",
    "end": "697399"
  },
  {
    "text": "everything you could guarantee that",
    "start": "697399",
    "end": "698959"
  },
  {
    "text": "everything's on the same server with a",
    "start": "698959",
    "end": "701059"
  },
  {
    "text": "foreign key and it's going to choose",
    "start": "701059",
    "end": "703249"
  },
  {
    "text": "that plan over something that will do",
    "start": "703249",
    "end": "705470"
  },
  {
    "text": "Rose shipping the other really big",
    "start": "705470",
    "end": "709220"
  },
  {
    "start": "706000",
    "end": "706000"
  },
  {
    "text": "performance enhancement it does is",
    "start": "709220",
    "end": "710929"
  },
  {
    "text": "through aggregation doing aggregations",
    "start": "710929",
    "end": "713660"
  },
  {
    "text": "in parallel and it does that by",
    "start": "713660",
    "end": "715749"
  },
  {
    "text": "splitting up the the aggregates really",
    "start": "715749",
    "end": "718819"
  },
  {
    "text": "into two phases so if you're have all",
    "start": "718819",
    "end": "722059"
  },
  {
    "text": "your data out on all the different nodes",
    "start": "722059",
    "end": "724369"
  },
  {
    "text": "and you want to do an average what stato",
    "start": "724369",
    "end": "726949"
  },
  {
    "text": "doesn't send down average to all the",
    "start": "726949",
    "end": "728899"
  },
  {
    "text": "different nodes what it does is says",
    "start": "728899",
    "end": "730339"
  },
  {
    "text": "give me the sum and give me the counts",
    "start": "730339",
    "end": "732829"
  },
  {
    "text": "of that particular column and then on",
    "start": "732829",
    "end": "736279"
  },
  {
    "text": "the coordinator before it goes back to a",
    "start": "736279",
    "end": "737809"
  },
  {
    "text": "user it's going to some the sums some",
    "start": "737809",
    "end": "739459"
  },
  {
    "text": "accounts and do the division in order to",
    "start": "739459",
    "end": "740990"
  },
  {
    "text": "give you back the average so this way",
    "start": "740990",
    "end": "742879"
  },
  {
    "text": "you're able to calculate all that stuff",
    "start": "742879",
    "end": "744889"
  },
  {
    "text": "in parallel all down on the data nodes",
    "start": "744889",
    "end": "747889"
  },
  {
    "text": "and you're not bringing back all the",
    "start": "747889",
    "end": "749990"
  },
  {
    "text": "data to the coordinator and letting it",
    "start": "749990",
    "end": "751459"
  },
  {
    "text": "do all the calculations at the end",
    "start": "751459",
    "end": "752929"
  },
  {
    "text": "essentially becoming a bottleneck so",
    "start": "752929",
    "end": "754970"
  },
  {
    "text": "this way all that stuff happens in",
    "start": "754970",
    "end": "756259"
  },
  {
    "text": "parallel so this way you're able to",
    "start": "756259",
    "end": "757819"
  },
  {
    "text": "scale literally so now let's lecture you",
    "start": "757819",
    "end": "760999"
  },
  {
    "text": "start looking at a little bit of queries",
    "start": "760999",
    "end": "763269"
  },
  {
    "text": "again this is using the tiger data set",
    "start": "763269",
    "end": "765799"
  },
  {
    "text": "you gave me a nice 250 gig worth of data",
    "start": "765799",
    "end": "768819"
  },
  {
    "text": "and what this simple query does is it",
    "start": "768819",
    "end": "771829"
  },
  {
    "text": "just sums up the lengths of all the",
    "start": "771829",
    "end": "773240"
  },
  {
    "text": "roads in the u.s. that our interstates",
    "start": "773240",
    "end": "776089"
  },
  {
    "text": "you know if you're familiar with how",
    "start": "776089",
    "end": "777740"
  },
  {
    "text": "long it should be this is really",
    "start": "777740",
    "end": "779209"
  },
  {
    "text": "probably about twice as long as it's",
    "start": "779209",
    "end": "780559"
  },
  {
    "text": "supposed to be because the tiger data",
    "start": "780559",
    "end": "781850"
  },
  {
    "text": "set is that the county level some of",
    "start": "781850",
    "end": "783379"
  },
  {
    "text": "those roads go right along the county",
    "start": "783379",
    "end": "784759"
  },
  {
    "text": "borders but this is a perfect example of",
    "start": "784759",
    "end": "788660"
  },
  {
    "text": "a nice simple query that",
    "start": "788660",
    "end": "789820"
  },
  {
    "text": "sequential scan across all the rows in",
    "start": "789820",
    "end": "792640"
  },
  {
    "text": "the table and sum up all the lengths",
    "start": "792640",
    "end": "794790"
  },
  {
    "text": "what do we get so if I were on this on a",
    "start": "794790",
    "end": "797260"
  },
  {
    "text": "single server I ran this on an Amazon",
    "start": "797260",
    "end": "800050"
  },
  {
    "text": "ec2 instance one of the small instances",
    "start": "800050",
    "end": "801910"
  },
  {
    "text": "which had about 1.7 gig of memory in it",
    "start": "801910",
    "end": "804760"
  },
  {
    "text": "on one instance it ran in 101 seconds on",
    "start": "804760",
    "end": "809050"
  },
  {
    "text": "four instances four nodes at ran on 25",
    "start": "809050",
    "end": "812140"
  },
  {
    "text": "in 25 seconds and when i scaled it out",
    "start": "812140",
    "end": "815500"
  },
  {
    "text": "to actually running it on 16 ec2",
    "start": "815500",
    "end": "819460"
  },
  {
    "text": "instances and paralyzed it across all 16",
    "start": "819460",
    "end": "821830"
  },
  {
    "text": "16 instances and ran in 4.8 seconds so",
    "start": "821830",
    "end": "825820"
  },
  {
    "text": "it is fairly linear and if you notice",
    "start": "825820",
    "end": "827800"
  },
  {
    "text": "right around the 12 nodes there it",
    "start": "827800",
    "end": "831310"
  },
  {
    "text": "actually is a little bit faster than",
    "start": "831310",
    "end": "833140"
  },
  {
    "text": "linear scalability and the difference",
    "start": "833140",
    "end": "835540"
  },
  {
    "text": "there is that at that point in time",
    "start": "835540",
    "end": "838650"
  },
  {
    "text": "every all the data that it actually",
    "start": "838650",
    "end": "841030"
  },
  {
    "text": "needs is in cash for the number at say a",
    "start": "841030",
    "end": "842710"
  },
  {
    "text": "disk so because you're adding 12 nodes I",
    "start": "842710",
    "end": "846220"
  },
  {
    "text": "had 12 times 1.7 gig worth of memory in",
    "start": "846220",
    "end": "849160"
  },
  {
    "text": "order to be able to do that so I never",
    "start": "849160",
    "end": "850450"
  },
  {
    "text": "had a hit disk so you're a not only are",
    "start": "850450",
    "end": "852550"
  },
  {
    "text": "able to scale CPUs you're also able to",
    "start": "852550",
    "end": "854920"
  },
  {
    "text": "scale how much cash you have in your",
    "start": "854920",
    "end": "857470"
  },
  {
    "text": "overall system so that's pretty simple",
    "start": "857470",
    "end": "861520"
  },
  {
    "text": "scenario you be able to take that and do",
    "start": "861520",
    "end": "863770"
  },
  {
    "text": "that you know just script it and be able",
    "start": "863770",
    "end": "865660"
  },
  {
    "text": "to paralyze it across a bunch of",
    "start": "865660",
    "end": "866980"
  },
  {
    "text": "different nodes and be able to return",
    "start": "866980",
    "end": "868330"
  },
  {
    "text": "back to results but we had a more",
    "start": "868330",
    "end": "869950"
  },
  {
    "text": "complicated query of this one here of",
    "start": "869950",
    "end": "872410"
  },
  {
    "text": "taking that same road table and joining",
    "start": "872410",
    "end": "874870"
  },
  {
    "text": "it with some census data and also join",
    "start": "874870",
    "end": "878380"
  },
  {
    "text": "you with the state codes table in the",
    "start": "878380",
    "end": "881080"
  },
  {
    "text": "country code table and what hear what",
    "start": "881080",
    "end": "883780"
  },
  {
    "text": "I'm looking for is give me the top 20",
    "start": "883780",
    "end": "885400"
  },
  {
    "text": "counties in the country that has the",
    "start": "885400",
    "end": "888120"
  },
  {
    "text": "greatest density of population for a",
    "start": "888120",
    "end": "890830"
  },
  {
    "text": "kilometer of Road which one are the most",
    "start": "890830",
    "end": "892810"
  },
  {
    "text": "densely populated which would kind of",
    "start": "892810",
    "end": "894370"
  },
  {
    "text": "translate into which counties have the",
    "start": "894370",
    "end": "896260"
  },
  {
    "text": "biggest traffic problems if you had a",
    "start": "896260",
    "end": "897970"
  },
  {
    "text": "more real-world scenario work this thing",
    "start": "897970",
    "end": "900190"
  },
  {
    "text": "we have some sub selects doing some",
    "start": "900190",
    "end": "902050"
  },
  {
    "text": "joints we got an order by and we got a",
    "start": "902050",
    "end": "904030"
  },
  {
    "text": "limit limit of 20 on there so it's a",
    "start": "904030",
    "end": "906160"
  },
  {
    "text": "more complicated query right so it's not",
    "start": "906160",
    "end": "909130"
  },
  {
    "text": "just a simple some so as you'd expect",
    "start": "909130",
    "end": "912310"
  },
  {
    "text": "top of the list New York got a thousand",
    "start": "912310",
    "end": "916360"
  },
  {
    "text": "49 people per kilometer a road and",
    "start": "916360",
    "end": "918700"
  },
  {
    "text": "everything's kind of concentrated in",
    "start": "918700",
    "end": "920350"
  },
  {
    "text": "northeast you get some some interesting",
    "start": "920350",
    "end": "923110"
  },
  {
    "text": "things in there",
    "start": "923110",
    "end": "923710"
  },
  {
    "text": "that Hawaii and Puerto Rico pop up in",
    "start": "923710",
    "end": "925510"
  },
  {
    "text": "there right there Islands I guess things",
    "start": "925510",
    "end": "926740"
  },
  {
    "text": "are a little more densely populated",
    "start": "926740",
    "end": "927730"
  },
  {
    "text": "around there but it's more detailed",
    "start": "927730",
    "end": "930070"
  },
  {
    "text": "analysis but when you're joining",
    "start": "930070",
    "end": "932200"
  },
  {
    "text": "together two tables that have millions",
    "start": "932200",
    "end": "935140"
  },
  {
    "text": "upon millions of rows right and you if",
    "start": "935140",
    "end": "937960"
  },
  {
    "text": "you're running it on that one instance",
    "start": "937960",
    "end": "939930"
  },
  {
    "text": "when I ran it on one instance it took",
    "start": "939930",
    "end": "942750"
  },
  {
    "text": "3900 seconds which is about 66 minutes",
    "start": "942750",
    "end": "946320"
  },
  {
    "text": "as i scaled that out he added more and",
    "start": "946320",
    "end": "949960"
  },
  {
    "text": "more nodes when I got it out to 16 notes",
    "start": "949960",
    "end": "952780"
  },
  {
    "text": "it ran in 282 seconds which is under",
    "start": "952780",
    "end": "955270"
  },
  {
    "text": "five minutes so by scaling from a single",
    "start": "955270",
    "end": "958630"
  },
  {
    "text": "instance of postgres on a single node",
    "start": "958630",
    "end": "960880"
  },
  {
    "text": "against that giant dataset using a",
    "start": "960880",
    "end": "963370"
  },
  {
    "text": "complicated query I was in scaling it",
    "start": "963370",
    "end": "965800"
  },
  {
    "text": "out to actually 16 cloud instances this",
    "start": "965800",
    "end": "968620"
  },
  {
    "text": "were other physical hardware or clouds I",
    "start": "968620",
    "end": "970420"
  },
  {
    "text": "was able to save a now over an hour's",
    "start": "970420",
    "end": "972460"
  },
  {
    "text": "worth of time running that single query",
    "start": "972460",
    "end": "974670"
  },
  {
    "text": "and we see this time and time again for",
    "start": "974670",
    "end": "977650"
  },
  {
    "text": "using stata if you want to go but I",
    "start": "977650",
    "end": "980470"
  },
  {
    "text": "wanted to get that cut in half down to",
    "start": "980470",
    "end": "981910"
  },
  {
    "text": "two minutes I'll just go to 32 notes you",
    "start": "981910",
    "end": "985030"
  },
  {
    "text": "know based on you know that query it is",
    "start": "985030",
    "end": "987490"
  },
  {
    "text": "linear scale will you add more notes you",
    "start": "987490",
    "end": "990520"
  },
  {
    "text": "want to go faster add more notes and",
    "start": "990520",
    "end": "993700"
  },
  {
    "text": "it's really there for detailed analytics",
    "start": "993700",
    "end": "995890"
  },
  {
    "text": "like that query that I just showed you",
    "start": "995890",
    "end": "997600"
  },
  {
    "text": "and it does work across the entire set",
    "start": "997600",
    "end": "1001980"
  },
  {
    "start": "998000",
    "end": "998000"
  },
  {
    "text": "of different analytical queries this is",
    "start": "1001980",
    "end": "1004620"
  },
  {
    "text": "this was done against the DBT three",
    "start": "1004620",
    "end": "1006900"
  },
  {
    "text": "several years ago and it ran across the",
    "start": "1006900",
    "end": "1009150"
  },
  {
    "text": "entire 22 query set and as you add more",
    "start": "1009150",
    "end": "1012210"
  },
  {
    "text": "notes it goes faster that's the the idea",
    "start": "1012210",
    "end": "1015810"
  },
  {
    "text": "of if if you want to be able to",
    "start": "1015810",
    "end": "1018410"
  },
  {
    "text": "guarantee to your users that you could",
    "start": "1018410",
    "end": "1020940"
  },
  {
    "text": "run a particular query in a minute",
    "start": "1020940",
    "end": "1022410"
  },
  {
    "text": "you're running on one you run it on for",
    "start": "1022410",
    "end": "1024390"
  },
  {
    "text": "you can see what the scalability is and",
    "start": "1024390",
    "end": "1027240"
  },
  {
    "text": "you can easily calculate how how many",
    "start": "1027240",
    "end": "1029550"
  },
  {
    "text": "nodes you need in order to get that",
    "start": "1029550",
    "end": "1030630"
  },
  {
    "text": "query done in a minute so now you're",
    "start": "1030630",
    "end": "1034560"
  },
  {
    "start": "1033000",
    "end": "1033000"
  },
  {
    "text": "told you all the cool stuff about how",
    "start": "1034560",
    "end": "1035790"
  },
  {
    "text": "you can throw out things from 66 minutes",
    "start": "1035790",
    "end": "1037770"
  },
  {
    "text": "down to five minutes tell you what it",
    "start": "1037770",
    "end": "1039540"
  },
  {
    "text": "doesn't do because it has its own",
    "start": "1039540",
    "end": "1042360"
  },
  {
    "text": "optimizer and parser it doesn't have",
    "start": "1042360",
    "end": "1045060"
  },
  {
    "text": "everything that native postgres has so",
    "start": "1045060",
    "end": "1047209"
  },
  {
    "text": "it does postgres adds more features to",
    "start": "1047209",
    "end": "1050640"
  },
  {
    "text": "it we have to also add at the stat out",
    "start": "1050640",
    "end": "1053100"
  },
  {
    "text": "into its own parser an optimizer to take",
    "start": "1053100",
    "end": "1054870"
  },
  {
    "text": "advantage of it and we",
    "start": "1054870",
    "end": "1055820"
  },
  {
    "text": "and added things like windowing",
    "start": "1055820",
    "end": "1057170"
  },
  {
    "text": "functions yet you can't run stored",
    "start": "1057170",
    "end": "1060800"
  },
  {
    "text": "procedures if you do a crate function on",
    "start": "1060800",
    "end": "1062510"
  },
  {
    "text": "there it's not going to work there's",
    "start": "1062510",
    "end": "1063800"
  },
  {
    "text": "kind of workarounds for that but",
    "start": "1063800",
    "end": "1065990"
  },
  {
    "text": "essentially everything comes in as a a",
    "start": "1065990",
    "end": "1068360"
  },
  {
    "text": "sequel statement there's no full text",
    "start": "1068360",
    "end": "1070880"
  },
  {
    "text": "search before the latest releases stato",
    "start": "1070880",
    "end": "1074380"
  },
  {
    "text": "there was no geospatial support it's we",
    "start": "1074380",
    "end": "1078410"
  },
  {
    "text": "saw a big need for geospatial support",
    "start": "1078410",
    "end": "1080570"
  },
  {
    "text": "because geospatial queries are very CPU",
    "start": "1080570",
    "end": "1083120"
  },
  {
    "text": "intensive and would take advantage of",
    "start": "1083120",
    "end": "1085670"
  },
  {
    "text": "the parallelization extremely well so",
    "start": "1085670",
    "end": "1088280"
  },
  {
    "text": "we'll be adding more and more features",
    "start": "1088280",
    "end": "1090110"
  },
  {
    "text": "over the course of time and if they're",
    "start": "1090110",
    "end": "1092330"
  },
  {
    "text": "specific things you need let us know but",
    "start": "1092330",
    "end": "1094810"
  },
  {
    "text": "it's not going to be full native",
    "start": "1094810",
    "end": "1097520"
  },
  {
    "text": "postgres if not everything is going to",
    "start": "1097520",
    "end": "1099560"
  },
  {
    "text": "work because it as its own parser",
    "start": "1099560",
    "end": "1102100"
  },
  {
    "start": "1101000",
    "end": "1101000"
  },
  {
    "text": "transaction performance if you're",
    "start": "1102100",
    "end": "1104660"
  },
  {
    "text": "sending things in as a single insert or",
    "start": "1104660",
    "end": "1106700"
  },
  {
    "text": "update at a time especially if you're",
    "start": "1106700",
    "end": "1108290"
  },
  {
    "text": "going to update something that it's",
    "start": "1108290",
    "end": "1109490"
  },
  {
    "text": "partitioned by where esta delete it from",
    "start": "1109490",
    "end": "1111770"
  },
  {
    "text": "one no one node and insert it into",
    "start": "1111770",
    "end": "1113450"
  },
  {
    "text": "another it's going to be slow it's going",
    "start": "1113450",
    "end": "1117770"
  },
  {
    "text": "to what you're always gonna have to do",
    "start": "1117770",
    "end": "1119960"
  },
  {
    "text": "is do an additional network round trip",
    "start": "1119960",
    "end": "1122240"
  },
  {
    "text": "because everything's going to come in",
    "start": "1122240",
    "end": "1123290"
  },
  {
    "text": "through the coordinator and then send",
    "start": "1123290",
    "end": "1125090"
  },
  {
    "text": "you out to a data node and then all the",
    "start": "1125090",
    "end": "1126410"
  },
  {
    "text": "way back to the users the partition",
    "start": "1126410",
    "end": "1129020"
  },
  {
    "text": "stuff also has to calculate the hash on",
    "start": "1129020",
    "end": "1130910"
  },
  {
    "text": "whatever your your partitioning by so",
    "start": "1130910",
    "end": "1133400"
  },
  {
    "text": "it's going to do an extra extra amount",
    "start": "1133400",
    "end": "1135260"
  },
  {
    "text": "of CPU cycles on a coordinator or your",
    "start": "1135260",
    "end": "1137210"
  },
  {
    "text": "partition rose and the replication it's",
    "start": "1137210",
    "end": "1141110"
  },
  {
    "text": "going to have to commit to all the",
    "start": "1141110",
    "end": "1142880"
  },
  {
    "text": "different data nodes before it's going",
    "start": "1142880",
    "end": "1144230"
  },
  {
    "text": "to return back a success which again is",
    "start": "1144230",
    "end": "1147710"
  },
  {
    "text": "if you have to get data in bulk load it",
    "start": "1147710",
    "end": "1151130"
  },
  {
    "text": "you could use the copy command you could",
    "start": "1151130",
    "end": "1153140"
  },
  {
    "text": "use GS loader which will paralyze things",
    "start": "1153140",
    "end": "1155720"
  },
  {
    "text": "really well for you from the client it's",
    "start": "1155720",
    "end": "1158090"
  },
  {
    "text": "no actually a pretty cool way if you",
    "start": "1158090",
    "end": "1161390"
  },
  {
    "text": "have some bad records in there does some",
    "start": "1161390",
    "end": "1162950"
  },
  {
    "text": "some handling of bad record see this way",
    "start": "1162950",
    "end": "1164990"
  },
  {
    "text": "you import a million rows and one of",
    "start": "1164990",
    "end": "1167480"
  },
  {
    "text": "them is bad it's not going to roll them",
    "start": "1167480",
    "end": "1168740"
  },
  {
    "text": "all back high-availability there is none",
    "start": "1168740",
    "end": "1173030"
  },
  {
    "text": "all right one of your data nose goes",
    "start": "1173030",
    "end": "1175160"
  },
  {
    "text": "down you're down there's nothing in the",
    "start": "1175160",
    "end": "1177320"
  },
  {
    "text": "coordinator saying that if one of your",
    "start": "1177320",
    "end": "1179510"
  },
  {
    "text": "notes down fell over somewhere else or",
    "start": "1179510",
    "end": "1181580"
  },
  {
    "text": "just ignore that part and return back an",
    "start": "1181580",
    "end": "1184850"
  },
  {
    "text": "error of something that wouldn't",
    "start": "1184850",
    "end": "1186380"
  },
  {
    "text": "touch that particular day to known",
    "start": "1186380",
    "end": "1187670"
  },
  {
    "text": "anyway so what you have to do is",
    "start": "1187670",
    "end": "1189980"
  },
  {
    "start": "1188000",
    "end": "1188000"
  },
  {
    "text": "configure high availability on each of",
    "start": "1189980",
    "end": "1191810"
  },
  {
    "text": "the individual notes so if you have 10",
    "start": "1191810",
    "end": "1194450"
  },
  {
    "text": "nodes inside you're inside your shadow",
    "start": "1194450",
    "end": "1197210"
  },
  {
    "text": "cluster you have to set up replication",
    "start": "1197210",
    "end": "1199250"
  },
  {
    "text": "or something on each one of those what",
    "start": "1199250",
    "end": "1202520"
  },
  {
    "text": "you do is use each one of those data",
    "start": "1202520",
    "end": "1204800"
  },
  {
    "text": "nodes as they fail over of another one",
    "start": "1204800",
    "end": "1206780"
  },
  {
    "text": "so essentially you're setting up raid at",
    "start": "1206780",
    "end": "1208370"
  },
  {
    "text": "the server level so this way they all",
    "start": "1208370",
    "end": "1210470"
  },
  {
    "text": "fell over to one another if one of them",
    "start": "1210470",
    "end": "1212120"
  },
  {
    "text": "goes down you just one of those nose",
    "start": "1212120",
    "end": "1214430"
  },
  {
    "text": "might be double doing double duty also",
    "start": "1214430",
    "end": "1218420"
  },
  {
    "text": "getting a consistent back up across all",
    "start": "1218420",
    "end": "1220430"
  },
  {
    "text": "of them is a little difficult so if",
    "start": "1220430",
    "end": "1221750"
  },
  {
    "text": "you're actively putting in transactions",
    "start": "1221750",
    "end": "1224330"
  },
  {
    "text": "there's nothing inside estado saying",
    "start": "1224330",
    "end": "1226370"
  },
  {
    "text": "pause there's no PG start back up at",
    "start": "1226370",
    "end": "1228740"
  },
  {
    "text": "this whole state'll level which will",
    "start": "1228740",
    "end": "1230810"
  },
  {
    "text": "send it down to everybody essentially",
    "start": "1230810",
    "end": "1233660"
  },
  {
    "text": "what you want to do is pause the",
    "start": "1233660",
    "end": "1235400"
  },
  {
    "text": "coordinator for a second and then do a",
    "start": "1235400",
    "end": "1237500"
  },
  {
    "text": "PG start back up across all your data",
    "start": "1237500",
    "end": "1239060"
  },
  {
    "text": "nodes and start it back up again and",
    "start": "1239060",
    "end": "1240500"
  },
  {
    "text": "then you could get a consistent back up",
    "start": "1240500",
    "end": "1241820"
  },
  {
    "text": "you could use a bunch of different tools",
    "start": "1241820",
    "end": "1243560"
  },
  {
    "text": "whether it be Omni pitter or whatever in",
    "start": "1243560",
    "end": "1245810"
  },
  {
    "text": "order to get those backups at the bottom",
    "start": "1245810",
    "end": "1247670"
  },
  {
    "text": "level you have to handle that yourself",
    "start": "1247670",
    "end": "1249020"
  },
  {
    "text": "you're essentially going to be managing",
    "start": "1249020",
    "end": "1250160"
  },
  {
    "text": "10 post Christ databases you have to",
    "start": "1250160",
    "end": "1252620"
  },
  {
    "text": "coordinate the backups of it so there",
    "start": "1252620",
    "end": "1256430"
  },
  {
    "text": "again there's no way of ensuring that",
    "start": "1256430",
    "end": "1258080"
  },
  {
    "text": "there's no transactions happening adding",
    "start": "1258080",
    "end": "1261740"
  },
  {
    "start": "1261000",
    "end": "1261000"
  },
  {
    "text": "notes requires downtime if you want to",
    "start": "1261740",
    "end": "1264740"
  },
  {
    "text": "go from 10 nodes the 20 notes you have",
    "start": "1264740",
    "end": "1266810"
  },
  {
    "text": "to bring everything down essentially",
    "start": "1266810",
    "end": "1270680"
  },
  {
    "text": "what you have to do is repartition all",
    "start": "1270680",
    "end": "1272690"
  },
  {
    "text": "your data so you have to export all your",
    "start": "1272690",
    "end": "1275090"
  },
  {
    "text": "data out and then import it all back in",
    "start": "1275090",
    "end": "1276920"
  },
  {
    "text": "so this way it's repartition to cross",
    "start": "1276920",
    "end": "1278930"
  },
  {
    "text": "all 20 notes because they're your",
    "start": "1278930",
    "end": "1281990"
  },
  {
    "text": "partitioning algorithm already spread",
    "start": "1281990",
    "end": "1284750"
  },
  {
    "text": "out the data for the 10 notes what we do",
    "start": "1284750",
    "end": "1288530"
  },
  {
    "text": "really is some advance planning because",
    "start": "1288530",
    "end": "1291770"
  },
  {
    "text": "most of the times when we're deploying",
    "start": "1291770",
    "end": "1293090"
  },
  {
    "text": "stato it's usually on a very big",
    "start": "1293090",
    "end": "1294740"
  },
  {
    "text": "database no it's on you know something",
    "start": "1294740",
    "end": "1297260"
  },
  {
    "text": "that's in the multi terabyte range that",
    "start": "1297260",
    "end": "1299600"
  },
  {
    "text": "exporting all your data out and",
    "start": "1299600",
    "end": "1300980"
  },
  {
    "text": "importing it back in might take a week",
    "start": "1300980",
    "end": "1302980"
  },
  {
    "text": "it's not something that you really want",
    "start": "1302980",
    "end": "1305270"
  },
  {
    "text": "to do all the time so if you set it up",
    "start": "1305270",
    "end": "1308150"
  },
  {
    "text": "in the beginning thinking that all right",
    "start": "1308150",
    "end": "1310070"
  },
  {
    "text": "I'm going to start with four notes today",
    "start": "1310070",
    "end": "1311420"
  },
  {
    "text": "but I'm going to go to 20 nodes in the",
    "start": "1311420",
    "end": "1313790"
  },
  {
    "text": "future what you start doing what you do",
    "start": "1313790",
    "end": "1316250"
  },
  {
    "text": "in the beginning is set up five postgres",
    "start": "1316250",
    "end": "1318680"
  },
  {
    "text": "instances on each one",
    "start": "1318680",
    "end": "1319779"
  },
  {
    "text": "those four physical servers so this way",
    "start": "1319779",
    "end": "1321940"
  },
  {
    "text": "everything in the beginning is a ready",
    "start": "1321940",
    "end": "1323619"
  },
  {
    "text": "partition for 20 notes when you want to",
    "start": "1323619",
    "end": "1326499"
  },
  {
    "text": "go from four to eight what you do is you",
    "start": "1326499",
    "end": "1329619"
  },
  {
    "text": "bring everything down and just our sink",
    "start": "1329619",
    "end": "1332049"
  },
  {
    "text": "your your different databases over to",
    "start": "1332049",
    "end": "1334269"
  },
  {
    "text": "the other one so this way everything's",
    "start": "1334269",
    "end": "1335409"
  },
  {
    "text": "we partitioned repoint the IP addresses",
    "start": "1335409",
    "end": "1337989"
  },
  {
    "text": "start them back up again so this way you",
    "start": "1337989",
    "end": "1341019"
  },
  {
    "text": "don't have to repartition everything",
    "start": "1341019",
    "end": "1342429"
  },
  {
    "text": "you're essentially just moving the",
    "start": "1342429",
    "end": "1343629"
  },
  {
    "text": "database themselves you can do that",
    "start": "1343629",
    "end": "1346330"
  },
  {
    "text": "through streaming replication or",
    "start": "1346330",
    "end": "1347649"
  },
  {
    "text": "something else where you could replicate",
    "start": "1347649",
    "end": "1348639"
  },
  {
    "text": "it over to the new notes so you're down",
    "start": "1348639",
    "end": "1350769"
  },
  {
    "text": "times minimized and also by doing that",
    "start": "1350769",
    "end": "1355299"
  },
  {
    "text": "in the early days you're also being able",
    "start": "1355299",
    "end": "1356889"
  },
  {
    "text": "to leverage multiple cores on the",
    "start": "1356889",
    "end": "1358929"
  },
  {
    "text": "physical servers themselves so in",
    "start": "1358929",
    "end": "1361989"
  },
  {
    "start": "1361000",
    "end": "1361000"
  },
  {
    "text": "summary you can't get really really good",
    "start": "1361989",
    "end": "1365109"
  },
  {
    "text": "performance out of doing it as you add",
    "start": "1365109",
    "end": "1366669"
  },
  {
    "text": "notes it does scale literally long as",
    "start": "1366669",
    "end": "1370239"
  },
  {
    "text": "long as you're not doing the cross no",
    "start": "1370239",
    "end": "1371710"
  },
  {
    "text": "joints you're going to see linear",
    "start": "1371710",
    "end": "1373629"
  },
  {
    "text": "scalability so if you have a classic",
    "start": "1373629",
    "end": "1375639"
  },
  {
    "text": "star schema you're never going to do",
    "start": "1375639",
    "end": "1377559"
  },
  {
    "text": "across no joint you're going to get",
    "start": "1377559",
    "end": "1379419"
  },
  {
    "text": "linear scalability we've tried it up to",
    "start": "1379419",
    "end": "1381549"
  },
  {
    "text": "like 32 64 I think we've done 64 nodes",
    "start": "1381549",
    "end": "1384489"
  },
  {
    "text": "and seen linear scalability",
    "start": "1384489",
    "end": "1387509"
  },
  {
    "text": "theoretically to go faster I we just got",
    "start": "1387539",
    "end": "1389739"
  },
  {
    "text": "tired of trying more and more note this",
    "start": "1389739",
    "end": "1393129"
  },
  {
    "text": "is entirely open source if you don't",
    "start": "1393129",
    "end": "1396429"
  },
  {
    "text": "like it submit a patch that there's",
    "start": "1396429",
    "end": "1398379"
  },
  {
    "text": "something you don't like we'll take",
    "start": "1398379",
    "end": "1401019"
  },
  {
    "text": "submissions more than happy to it's all",
    "start": "1401019",
    "end": "1403839"
  },
  {
    "text": "entirely written in Java if you're a",
    "start": "1403839",
    "end": "1405789"
  },
  {
    "text": "Java developer know anybody that's java",
    "start": "1405789",
    "end": "1407589"
  },
  {
    "text": "developer you want to add a feature more",
    "start": "1407589",
    "end": "1409599"
  },
  {
    "text": "than happy to take it so where do you",
    "start": "1409599",
    "end": "1411729"
  },
  {
    "text": "get it go to stato us that's where you",
    "start": "1411729",
    "end": "1414969"
  },
  {
    "text": "could download it and if you have any",
    "start": "1414969",
    "end": "1417339"
  },
  {
    "text": "questions feel free to send me off an",
    "start": "1417339",
    "end": "1419379"
  },
  {
    "text": "email or hit me on Twitter and again I'm",
    "start": "1419379",
    "end": "1422649"
  },
  {
    "text": "pimping out the postgres users groups",
    "start": "1422649",
    "end": "1425669"
  },
  {
    "text": "get active in them here",
    "start": "1425669",
    "end": "1429450"
  }
]