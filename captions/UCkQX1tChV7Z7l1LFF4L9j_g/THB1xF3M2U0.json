[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "hello hello okay uh today I'm going to",
    "start": "12120",
    "end": "15360"
  },
  {
    "text": "talk about macros in the data pipeline",
    "start": "15360",
    "end": "18000"
  },
  {
    "text": "um so who am I let me just introduce",
    "start": "18000",
    "end": "20920"
  },
  {
    "text": "myself my name is Neville work at",
    "start": "20920",
    "end": "23119"
  },
  {
    "text": "Spotify in the music recommendation team",
    "start": "23119",
    "end": "25920"
  },
  {
    "text": "and we've been using scholar since uh",
    "start": "25920",
    "end": "28240"
  },
  {
    "text": "early 2013 and then we've been mostly uh",
    "start": "28240",
    "end": "31759"
  },
  {
    "text": "doing data science work with Scala so uh",
    "start": "31759",
    "end": "34760"
  },
  {
    "text": "I do a lot of scouting and the spark and",
    "start": "34760",
    "end": "37879"
  },
  {
    "text": "also do uh a little bit work with storm",
    "start": "37879",
    "end": "40200"
  },
  {
    "text": "and other data",
    "start": "40200",
    "end": "41960"
  },
  {
    "text": "tools um okay so uh there's a really",
    "start": "41960",
    "end": "46480"
  },
  {
    "start": "43000",
    "end": "116000"
  },
  {
    "text": "popular dat uh combo uh the combo of",
    "start": "46480",
    "end": "49079"
  },
  {
    "text": "software packages used in data world so",
    "start": "49079",
    "end": "52320"
  },
  {
    "text": "the three of them are paret that's uh",
    "start": "52320",
    "end": "54800"
  },
  {
    "text": "colum storage so basically stores data",
    "start": "54800",
    "end": "57280"
  },
  {
    "text": "in a column W column major format",
    "start": "57280",
    "end": "60519"
  },
  {
    "text": "and groups uh values in the column",
    "start": "60519",
    "end": "62519"
  },
  {
    "text": "togethers to to achieve better uh",
    "start": "62519",
    "end": "65880"
  },
  {
    "text": "compression and the io",
    "start": "65880",
    "end": "68479"
  },
  {
    "text": "performance uh on top of that we use AAL",
    "start": "68479",
    "end": "71560"
  },
  {
    "text": "inside our data pipelines which is a",
    "start": "71560",
    "end": "73320"
  },
  {
    "text": "serialization form format similar to",
    "start": "73320",
    "end": "76600"
  },
  {
    "text": "Thrift and protuff and some other",
    "start": "76600",
    "end": "79000"
  },
  {
    "text": "formats out there and we use Aro as a",
    "start": "79000",
    "end": "83759"
  },
  {
    "text": "strongly typed so basically Define a",
    "start": "83759",
    "end": "85400"
  },
  {
    "text": "schema and compiles to Java classes and",
    "start": "85400",
    "end": "87960"
  },
  {
    "text": "then you have a strongly typed repres",
    "start": "87960",
    "end": "89920"
  },
  {
    "text": "presentation of your data inside the",
    "start": "89920",
    "end": "92079"
  },
  {
    "text": "pipeline and uh on top of that we use",
    "start": "92079",
    "end": "95119"
  },
  {
    "text": "guarding and Spark so you can write high",
    "start": "95119",
    "end": "98119"
  },
  {
    "text": "level uh scalar code similar to a",
    "start": "98119",
    "end": "101600"
  },
  {
    "text": "typical Scala collection API you write",
    "start": "101600",
    "end": "104360"
  },
  {
    "text": "the uh pipeline code in that fashion and",
    "start": "104360",
    "end": "107240"
  },
  {
    "text": "then works on top of uh uh hundreds of",
    "start": "107240",
    "end": "110240"
  },
  {
    "text": "machines and so these three combos are",
    "start": "110240",
    "end": "113560"
  },
  {
    "text": "becoming very popular",
    "start": "113560",
    "end": "115799"
  },
  {
    "text": "lately and this is what the schema look",
    "start": "115799",
    "end": "118759"
  },
  {
    "start": "116000",
    "end": "139000"
  },
  {
    "text": "like in a",
    "start": "118759",
    "end": "120640"
  },
  {
    "text": "typical schema so you have a type and",
    "start": "120640",
    "end": "123479"
  },
  {
    "text": "name name space I have four Fields they",
    "start": "123479",
    "end": "126280"
  },
  {
    "text": "all typed with a in stream and and",
    "start": "126280",
    "end": "129080"
  },
  {
    "text": "whatnot you can also have Nest types so",
    "start": "129080",
    "end": "131840"
  },
  {
    "text": "you can have like multiple levels of uh",
    "start": "131840",
    "end": "134640"
  },
  {
    "text": "nesting inside your schema that's also",
    "start": "134640",
    "end": "136800"
  },
  {
    "text": "very typical for complex data",
    "start": "136800",
    "end": "139080"
  },
  {
    "text": "types and this is what a typical type",
    "start": "139080",
    "end": "142360"
  },
  {
    "text": "pipeline well not typical this is a very",
    "start": "142360",
    "end": "144120"
  },
  {
    "text": "simplified version but uh that's what it",
    "start": "144120",
    "end": "147280"
  },
  {
    "text": "would look like and actually the par",
    "start": "147280",
    "end": "150160"
  },
  {
    "text": "source is uh from tpad they did a lot of",
    "start": "150160",
    "end": "153360"
  },
  {
    "text": "early work on that and uh we will we",
    "start": "153360",
    "end": "156040"
  },
  {
    "text": "also started using that so here I have a",
    "start": "156040",
    "end": "158760"
  },
  {
    "text": "data source from this input file and the",
    "start": "158760",
    "end": "161480"
  },
  {
    "text": "input type is a account so you can do a",
    "start": "161480",
    "end": "164319"
  },
  {
    "text": "simple map of 2.2 key and value Group by",
    "start": "164319",
    "end": "167959"
  },
  {
    "text": "the key then you can reduce by the value",
    "start": "167959",
    "end": "170400"
  },
  {
    "text": "as simple as that and uh the framework",
    "start": "170400",
    "end": "172959"
  },
  {
    "text": "takes care of uh the underlying part so",
    "start": "172959",
    "end": "175959"
  },
  {
    "text": "that's uh what our daily job look like",
    "start": "175959",
    "end": "178519"
  },
  {
    "text": "just writing pipelines like that",
    "start": "178519",
    "end": "180920"
  },
  {
    "text": "and uh here are a few other things you",
    "start": "180920",
    "end": "183400"
  },
  {
    "start": "181000",
    "end": "267000"
  },
  {
    "text": "want to use uh to leverage paret and",
    "start": "183400",
    "end": "186319"
  },
  {
    "text": "namely the projection and predicate so",
    "start": "186319",
    "end": "189080"
  },
  {
    "text": "projection means since it stores uh data",
    "start": "189080",
    "end": "193080"
  },
  {
    "text": "groups columns together and most cases",
    "start": "193080",
    "end": "195920"
  },
  {
    "text": "say you have a log file with 80 Fields",
    "start": "195920",
    "end": "199200"
  },
  {
    "text": "it's very typical in our job and a",
    "start": "199200",
    "end": "202360"
  },
  {
    "text": "typical analytic job only wants to",
    "start": "202360",
    "end": "204840"
  },
  {
    "text": "access maybe say three or five let's say",
    "start": "204840",
    "end": "207640"
  },
  {
    "text": "our Spotify case we lock everything a",
    "start": "207640",
    "end": "210400"
  },
  {
    "text": "you when a user listens to track like",
    "start": "210400",
    "end": "212799"
  },
  {
    "text": "time IP country and whatnot and for all",
    "start": "212799",
    "end": "216239"
  },
  {
    "text": "recommendation uh purpose we only want",
    "start": "216239",
    "end": "218360"
  },
  {
    "text": "the username and the track being",
    "start": "218360",
    "end": "220120"
  },
  {
    "text": "listened to and nothing else and that's",
    "start": "220120",
    "end": "222439"
  },
  {
    "text": "a lot of redundant IO so uh column Pro",
    "start": "222439",
    "end": "226239"
  },
  {
    "text": "projection allows you to skip columns",
    "start": "226239",
    "end": "228319"
  },
  {
    "text": "not access and that saves a lot of IO",
    "start": "228319",
    "end": "231439"
  },
  {
    "text": "column wise you can also push predicates",
    "start": "231439",
    "end": "234000"
  },
  {
    "text": "down to the reader level because paret",
    "start": "234000",
    "end": "237200"
  },
  {
    "text": "stes uh Ro groups together and Ro group",
    "start": "237200",
    "end": "240560"
  },
  {
    "text": "say statistics say for the next 50,000",
    "start": "240560",
    "end": "243400"
  },
  {
    "text": "tracks what are the max maximum and the",
    "start": "243400",
    "end": "246079"
  },
  {
    "text": "minimum lens and if uh the R Group",
    "start": "246079",
    "end": "248760"
  },
  {
    "text": "doesn't satisfy a predicate it can be",
    "start": "248760",
    "end": "251360"
  },
  {
    "text": "safely skipped so that skips uh uh iio",
    "start": "251360",
    "end": "255959"
  },
  {
    "text": "in a in a row uh major wise and this",
    "start": "255959",
    "end": "260160"
  },
  {
    "text": "often lead leads to uh 10 times or more",
    "start": "260160",
    "end": "262720"
  },
  {
    "text": "speed up so they all sound very nice",
    "start": "262720",
    "end": "265080"
  },
  {
    "text": "right uh what's the problem the problem",
    "start": "265080",
    "end": "267280"
  },
  {
    "start": "267000",
    "end": "301000"
  },
  {
    "text": "is uh it's kind of clunky to write so",
    "start": "267280",
    "end": "269800"
  },
  {
    "text": "the native code you have this very",
    "start": "269800",
    "end": "271919"
  },
  {
    "text": "beautiful scalar code that's type safe",
    "start": "271919",
    "end": "273800"
  },
  {
    "text": "and you get IDE support like you dot and",
    "start": "273800",
    "end": "276560"
  },
  {
    "text": "then you add prompts you like get name",
    "start": "276560",
    "end": "278199"
  },
  {
    "text": "get amount and blah um and it's very",
    "start": "278199",
    "end": "281199"
  },
  {
    "text": "easy to write but in a par key code you",
    "start": "281199",
    "end": "283479"
  },
  {
    "text": "have to since I use string as a colum",
    "start": "283479",
    "end": "285880"
  },
  {
    "text": "names so you have to specify them as as",
    "start": "285880",
    "end": "288840"
  },
  {
    "text": "strings and imagine if you have nested",
    "start": "288840",
    "end": "291479"
  },
  {
    "text": "Fields you have like say account do",
    "start": "291479",
    "end": "294280"
  },
  {
    "text": "amount or dot something that's very",
    "start": "294280",
    "end": "297039"
  },
  {
    "text": "clunky so strings are uh and save an",
    "start": "297039",
    "end": "300080"
  },
  {
    "text": "error PR you lose the auto complete that",
    "start": "300080",
    "end": "303840"
  },
  {
    "start": "301000",
    "end": "335000"
  },
  {
    "text": "might lead to a finger injury unless you",
    "start": "303840",
    "end": "306360"
  },
  {
    "text": "enjoy typing a lot I mean some people do",
    "start": "306360",
    "end": "308800"
  },
  {
    "text": "I guess uh and also uh a has this",
    "start": "308800",
    "end": "313520"
  },
  {
    "text": "convention they change uh well the",
    "start": "313520",
    "end": "316360"
  },
  {
    "text": "convention is used underscore for schema",
    "start": "316360",
    "end": "319479"
  },
  {
    "text": "underscore names for schema but somehow",
    "start": "319479",
    "end": "321240"
  },
  {
    "text": "they change it to to came case for gets",
    "start": "321240",
    "end": "324720"
  },
  {
    "text": "well that's a Java scene so that gets",
    "start": "324720",
    "end": "326960"
  },
  {
    "text": "confus confus confusing over time and",
    "start": "326960",
    "end": "329960"
  },
  {
    "text": "also it's hard to migrate the existing",
    "start": "329960",
    "end": "331840"
  },
  {
    "text": "code because you have to rewrite all",
    "start": "331840",
    "end": "334880"
  },
  {
    "text": "these the predicate is even worse uh so",
    "start": "334880",
    "end": "338240"
  },
  {
    "text": "look at the uh Native example it's a",
    "start": "338240",
    "end": "341039"
  },
  {
    "text": "simple Scala Lambda that returns Boolean",
    "start": "341039",
    "end": "345039"
  },
  {
    "text": "and the equivalent paret is they use a",
    "start": "345039",
    "end": "347560"
  },
  {
    "text": "visitors pattern and you have to",
    "start": "347560",
    "end": "349440"
  },
  {
    "text": "construct the the predicate uh syntax",
    "start": "349440",
    "end": "352919"
  },
  {
    "text": "tree from scratch and you have to know",
    "start": "352919",
    "end": "355080"
  },
  {
    "text": "that column types and names ahead of",
    "start": "355080",
    "end": "357319"
  },
  {
    "text": "time and in case of string you have to",
    "start": "357319",
    "end": "359639"
  },
  {
    "text": "to use a factory method to construct the",
    "start": "359639",
    "end": "362160"
  },
  {
    "text": "binary and then there's also the Java",
    "start": "362160",
    "end": "365280"
  },
  {
    "text": "Erasure scene where you have to cast uh",
    "start": "365280",
    "end": "368160"
  },
  {
    "text": "Scala float back to Java float it it no",
    "start": "368160",
    "end": "372720"
  },
  {
    "text": "we don't expect people to write this",
    "start": "372720",
    "end": "374360"
  },
  {
    "text": "it's uh it's too",
    "start": "374360",
    "end": "376840"
  },
  {
    "text": "much uh yeah and it's it's like closure",
    "start": "376840",
    "end": "380160"
  },
  {
    "text": "but but worse yeah so uh that's that's",
    "start": "380160",
    "end": "384160"
  },
  {
    "text": "where that's where the Marco really",
    "start": "384160",
    "end": "385639"
  },
  {
    "text": "really helps uh I played WR with Marco a",
    "start": "385639",
    "end": "388280"
  },
  {
    "text": "little bit and once I got uh used to all",
    "start": "388280",
    "end": "390919"
  },
  {
    "text": "the coding and stuff it's actually",
    "start": "390919",
    "end": "392720"
  },
  {
    "text": "pretty easy to to to work this out so uh",
    "start": "392720",
    "end": "397319"
  },
  {
    "text": "look back to the native code because",
    "start": "397319",
    "end": "399319"
  },
  {
    "text": "what we have here is strongly typed AO",
    "start": "399319",
    "end": "401120"
  },
  {
    "text": "class and the AO schema is actually",
    "start": "401120",
    "end": "403240"
  },
  {
    "text": "attached to the class so we have",
    "start": "403240",
    "end": "404639"
  },
  {
    "text": "everything we need to know about the",
    "start": "404639",
    "end": "406520"
  },
  {
    "text": "types field names and everything so we",
    "start": "406520",
    "end": "409080"
  },
  {
    "text": "can inspect every object and the",
    "start": "409080",
    "end": "411360"
  },
  {
    "text": "expression tree inside the mro and work",
    "start": "411360",
    "end": "414120"
  },
  {
    "text": "that",
    "start": "414120",
    "end": "414879"
  },
  {
    "text": "out so what is in expression this is the",
    "start": "414879",
    "end": "418680"
  },
  {
    "text": "typical Tred gate getting a account",
    "start": "418680",
    "end": "421680"
  },
  {
    "text": "which is array getting the first element",
    "start": "421680",
    "end": "423720"
  },
  {
    "text": "and then get amount greater than 10",
    "start": "423720",
    "end": "426639"
  },
  {
    "text": "expands into this something or the",
    "start": "426639",
    "end": "428840"
  },
  {
    "text": "compiler does a lot of magic like uh",
    "start": "428840",
    "end": "431039"
  },
  {
    "text": "converting a box type to A Primitive and",
    "start": "431039",
    "end": "434000"
  },
  {
    "text": "then and greater than it looks like some",
    "start": "434000",
    "end": "436520"
  },
  {
    "text": "kind of method invocation that's fine",
    "start": "436520",
    "end": "439520"
  },
  {
    "text": "boom this is the raw version uh like if",
    "start": "439520",
    "end": "442360"
  },
  {
    "text": "you do show raw in the in the uh to the",
    "start": "442360",
    "end": "446400"
  },
  {
    "text": "syntax tree that's the raw version that",
    "start": "446400",
    "end": "448400"
  },
  {
    "text": "has a lot of stuff and you wish you have",
    "start": "448400",
    "end": "452160"
  },
  {
    "text": "a rainbow uh parenthesis now to be able",
    "start": "452160",
    "end": "456000"
  },
  {
    "text": "to see this but never mind uh this a",
    "start": "456000",
    "end": "458960"
  },
  {
    "text": "pattern matching and the recursion so",
    "start": "458960",
    "end": "460759"
  },
  {
    "text": "with pattern matching recursion you can",
    "start": "460759",
    "end": "462479"
  },
  {
    "text": "travel through the syntax really easily",
    "start": "462479",
    "end": "464520"
  },
  {
    "text": "and uh decouple all these uh predicates",
    "start": "464520",
    "end": "467440"
  },
  {
    "text": "back",
    "start": "467440",
    "end": "469039"
  },
  {
    "start": "469000",
    "end": "552000"
  },
  {
    "text": "out yeah so this is the projection",
    "start": "469039",
    "end": "472080"
  },
  {
    "text": "improved version so the signat looks",
    "start": "472080",
    "end": "474000"
  },
  {
    "text": "like",
    "start": "474000",
    "end": "475080"
  },
  {
    "text": "this you have apply my that takes a",
    "start": "475080",
    "end": "478080"
  },
  {
    "text": "specific record that's the record being",
    "start": "478080",
    "end": "480360"
  },
  {
    "text": "being operated on and the gets GS is",
    "start": "480360",
    "end": "483879"
  },
  {
    "text": "just uh a list of whatever type here and",
    "start": "483879",
    "end": "487800"
  },
  {
    "text": "returning whatever and then it redirects",
    "start": "487800",
    "end": "491000"
  },
  {
    "text": "to a a uh to a micro implementation",
    "start": "491000",
    "end": "494560"
  },
  {
    "text": "which uh there's a where with the",
    "start": "494560",
    "end": "497120"
  },
  {
    "text": "context and then there's your expression",
    "start": "497120",
    "end": "498960"
  },
  {
    "text": "tree that the marro has access to I'll",
    "start": "498960",
    "end": "502479"
  },
  {
    "text": "uh show the code in a bit uh this is the",
    "start": "502479",
    "end": "505520"
  },
  {
    "text": "projection and the code looks like this",
    "start": "505520",
    "end": "507960"
  },
  {
    "text": "so you write basically native Scala code",
    "start": "507960",
    "end": "510199"
  },
  {
    "text": "and it gets compiled to predicate",
    "start": "510199",
    "end": "512919"
  },
  {
    "text": "API and well for most of our uh data",
    "start": "512919",
    "end": "516518"
  },
  {
    "text": "scientists who doesn't really don't",
    "start": "516519",
    "end": "518120"
  },
  {
    "text": "really know Scala or Java they can just",
    "start": "518120",
    "end": "520518"
  },
  {
    "text": "copy and paste those Mark uh those",
    "start": "520519",
    "end": "522640"
  },
  {
    "text": "lambas and it's expect to",
    "start": "522640",
    "end": "525880"
  },
  {
    "text": "work uh this is the predic predicate",
    "start": "525880",
    "end": "528760"
  },
  {
    "text": "version similarly you have one Lambda P",
    "start": "528760",
    "end": "532560"
  },
  {
    "text": "that's of type T that's the aot typee",
    "start": "532560",
    "end": "534880"
  },
  {
    "text": "returns",
    "start": "534880",
    "end": "536000"
  },
  {
    "text": "Boolean and uh so this thing just gets",
    "start": "536000",
    "end": "540040"
  },
  {
    "text": "compiled into the the filter API Dot and",
    "start": "540040",
    "end": "544680"
  },
  {
    "text": "and then a lot of",
    "start": "544680",
    "end": "546399"
  },
  {
    "text": "stuff like the example before so this is",
    "start": "546399",
    "end": "549600"
  },
  {
    "text": "how it looks after using",
    "start": "549600",
    "end": "552600"
  },
  {
    "start": "552000",
    "end": "618000"
  },
  {
    "text": "macro uh stuff I learned doing this",
    "start": "552600",
    "end": "556279"
  },
  {
    "text": "compiler does a lot lot of things and I",
    "start": "556279",
    "end": "558839"
  },
  {
    "text": "have to mimic when you when you write",
    "start": "558839",
    "end": "560519"
  },
  {
    "text": "micro for example uh the the uh pet API",
    "start": "560519",
    "end": "566640"
  },
  {
    "text": "uh assumes column on the left side uh",
    "start": "566640",
    "end": "569880"
  },
  {
    "text": "value on the right side but uh",
    "start": "569880",
    "end": "572120"
  },
  {
    "text": "developers may not so you can you have",
    "start": "572120",
    "end": "575240"
  },
  {
    "text": "to to flip the operators",
    "start": "575240",
    "end": "577720"
  },
  {
    "text": "and and code for both cases there are",
    "start": "577720",
    "end": "581360"
  },
  {
    "text": "also box types and uh primitive types",
    "start": "581360",
    "end": "584760"
  },
  {
    "text": "and and NS because box types can have NS",
    "start": "584760",
    "end": "587800"
  },
  {
    "text": "and they they will fail to cast so these",
    "start": "587800",
    "end": "590680"
  },
  {
    "text": "are the things I have to",
    "start": "590680",
    "end": "592680"
  },
  {
    "text": "consider uh type cerion cuz uh uh",
    "start": "592680",
    "end": "596399"
  },
  {
    "text": "compiler does this magically if you have",
    "start": "596399",
    "end": "598920"
  },
  {
    "text": "l versus ins floats versus doubles you",
    "start": "598920",
    "end": "602800"
  },
  {
    "text": "sometimes have to do the commotion",
    "start": "602800",
    "end": "604760"
  },
  {
    "text": "behind the",
    "start": "604760",
    "end": "606000"
  },
  {
    "text": "scene implicit booleans like doget bu",
    "start": "606000",
    "end": "609760"
  },
  {
    "text": "because if it's a Boolean type it's",
    "start": "609760",
    "end": "612839"
  },
  {
    "text": "equivalent to doet BU equals equals to",
    "start": "612839",
    "end": "615000"
  },
  {
    "text": "true so these kind of cases you have to",
    "start": "615000",
    "end": "617959"
  },
  {
    "text": "consider and the code is here we are",
    "start": "617959",
    "end": "620680"
  },
  {
    "start": "618000",
    "end": "683000"
  },
  {
    "text": "using it in production and it's uh it's",
    "start": "620680",
    "end": "623880"
  },
  {
    "text": "working out pretty well actually",
    "start": "623880",
    "end": "627760"
  },
  {
    "text": "so the code is actually surprisingly",
    "start": "629519",
    "end": "632160"
  },
  {
    "text": "simple this is the one",
    "start": "632160",
    "end": "634560"
  },
  {
    "text": "for for predicate and some signature",
    "start": "634560",
    "end": "638600"
  },
  {
    "text": "here a lot of maps uh between Scala",
    "start": "638600",
    "end": "641560"
  },
  {
    "text": "internal names and paret names some",
    "start": "641560",
    "end": "644560"
  },
  {
    "text": "hardcoded column names and stuff and the",
    "start": "644560",
    "end": "648160"
  },
  {
    "text": "main body of the code is mostly just",
    "start": "648160",
    "end": "651079"
  },
  {
    "text": "case and recursion and that's it like",
    "start": "651079",
    "end": "653920"
  },
  {
    "text": "there are only two types like one is the",
    "start": "653920",
    "end": "655600"
  },
  {
    "text": "apply type that of Interest one is apply",
    "start": "655600",
    "end": "658839"
  },
  {
    "text": "and one is select select is where you",
    "start": "658839",
    "end": "661680"
  },
  {
    "text": "have name dot something and apply is",
    "start": "661680",
    "end": "664639"
  },
  {
    "text": "when you call a method so yeah it works",
    "start": "664639",
    "end": "668360"
  },
  {
    "text": "out really well so that's it thanks",
    "start": "668360",
    "end": "672290"
  },
  {
    "text": "[Applause]",
    "start": "672290",
    "end": "679360"
  }
]