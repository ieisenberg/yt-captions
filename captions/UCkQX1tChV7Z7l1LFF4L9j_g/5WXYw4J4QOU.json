[
  {
    "text": "[Music]",
    "start": "560",
    "end": "16840"
  },
  {
    "text": "so thanks for the introduction uh Claire said I'm the CTO for storm path and um",
    "start": "22279",
    "end": "27800"
  },
  {
    "text": "as she said we do user security um I guess more encompassing Cloud identity",
    "start": "27800",
    "end": "32960"
  },
  {
    "text": "management so if you have to deal with Cloud users and logging in applications mobile devices uh corporate Enterprises",
    "start": "32960",
    "end": "39280"
  },
  {
    "text": "logging into applications in the cloud we handle all those security issues um I guess a point to really drive this home",
    "start": "39280",
    "end": "45200"
  },
  {
    "text": "is how many people heard what happened to LinkedIn 3 weeks ago or four weeks ago right pretty severe security Beach",
    "start": "45200",
    "end": "51239"
  },
  {
    "text": "right if LinkedIn was our customer that would not have happened to them so so if you uh if you guys are curious",
    "start": "51239",
    "end": "59440"
  },
  {
    "text": "about security and or you need that for your for your applications especially Cloud applications uh come talk to me",
    "start": "59440",
    "end": "64799"
  },
  {
    "text": "after the presentation you can grab my business card or we can talk so tonight we're going to be talking about",
    "start": "64799",
    "end": "70920"
  },
  {
    "text": "beautiful rest apis um there's a lot of documentation out there on XML based API",
    "start": "70920",
    "end": "77479"
  },
  {
    "text": "served over uh via rest Paradigm but there's not a whole lot of stuff on Json",
    "start": "77479",
    "end": "82880"
  },
  {
    "text": "so we're going to where appropriate we'll focus on Json specific um parts of",
    "start": "82880",
    "end": "88600"
  },
  {
    "text": "offering and serving a rest API there is a lot to cover you can't",
    "start": "88600",
    "end": "95720"
  },
  {
    "text": "really see it but I'm going to I'm going to be going things relatively quickly I'm going to be talking or touching on",
    "start": "95720",
    "end": "102520"
  },
  {
    "text": "the most important or relevant things um if you have questions please wait till",
    "start": "102520",
    "end": "107640"
  },
  {
    "text": "after the presentation and I'll repeat them so everybody can hear them um unless it's so critical everybody just",
    "start": "107640",
    "end": "112960"
  },
  {
    "text": "raises their hand because they want they want to hear an answer um Ben how much time do I have uh nine oh wow yeah",
    "start": "112960",
    "end": "121840"
  },
  {
    "text": "that's plenty of time I'm not going to take that long but um if you have questions wait till the end we'll cover",
    "start": "121840",
    "end": "127680"
  },
  {
    "text": "we'll cover whatever we can so the first and most important part of this",
    "start": "127680",
    "end": "133480"
  },
  {
    "text": "presentation is about apis and being an API and application programming interface it's really about applications",
    "start": "133480",
    "end": "140319"
  },
  {
    "text": "applications that you're developing and serving to your customers and because you're doing that",
    "start": "140319",
    "end": "145360"
  },
  {
    "text": "for your app you want adoption and the primary consumers of applications are excuse me apis are developers so we",
    "start": "145360",
    "end": "152840"
  },
  {
    "text": "really want to do whatever we can to make developers happy your customers developers happy so they can easily adopt to your API um and and help you",
    "start": "152840",
    "end": "160640"
  },
  {
    "text": "grow as a company we'll focus in this presentation a little bit more on pragmatic approaches than ideal",
    "start": "160640",
    "end": "166440"
  },
  {
    "text": "idealistic approaches so um how many people here have heard the term rest afarian nice so you might have heard the",
    "start": "166440",
    "end": "173560"
  },
  {
    "text": "term rosaran well rest starian is somebody who is a rest ideologue and",
    "start": "173560",
    "end": "179680"
  },
  {
    "text": "they they are they often take staunch positions and say no it has to be this way we will make certain concessions um",
    "start": "179680",
    "end": "186720"
  },
  {
    "text": "on certain approaches um primarily because developers find them easier than",
    "start": "186720",
    "end": "191879"
  },
  {
    "text": "than what might be uh ideological rest and the reason why we do that is for adoption the more the developers are",
    "start": "191879",
    "end": "198080"
  },
  {
    "text": "comfortable the more your customers are comfortable they will more readily adopt an API and that's good for scale the",
    "start": "198080",
    "end": "203879"
  },
  {
    "text": "more people that adopt it the bigger you grow the more money you get whole n yards so why rest these five points I",
    "start": "203879",
    "end": "211799"
  },
  {
    "text": "guess six points scalability gener ability independence of components latency because of caching or reduced",
    "start": "211799",
    "end": "219120"
  },
  {
    "text": "latency because of caching security and encapsulation these six points are the",
    "start": "219120",
    "end": "224640"
  },
  {
    "text": "six reasons why Dr Fielding in his thesis on rest said that rest was",
    "start": "224640",
    "end": "230400"
  },
  {
    "text": "necessary in a viable architectural approach and what he meant by that is scalability is not necessarily growing",
    "start": "230400",
    "end": "236519"
  },
  {
    "text": "in scale due to Performance or based on performance it's really scale in how",
    "start": "236519",
    "end": "242319"
  },
  {
    "text": "much interaction you can have and how much your content can be referenced by others and vice versa it's it's growing",
    "start": "242319",
    "end": "249079"
  },
  {
    "text": "content out at web scale uh generality by having General paradigms and",
    "start": "249079",
    "end": "254799"
  },
  {
    "text": "protocols defined anybody can interact with the rest API regardless of the programming language or underlying",
    "start": "254799",
    "end": "259959"
  },
  {
    "text": "Network Technology um Independence you can deploy features Andor components",
    "start": "259959",
    "end": "266080"
  },
  {
    "text": "independent of others using the rest Paradigm which is nice if you you need to grow and you don't want downtime uh",
    "start": "266080",
    "end": "272720"
  },
  {
    "text": "latency caching is a first class citizen in the rest approach in the rest Paradigm a lot of people don't realize",
    "start": "272720",
    "end": "278199"
  },
  {
    "text": "this and they don't really talk about it all that much but caching is extremely important for performance reasons and we",
    "start": "278199",
    "end": "283720"
  },
  {
    "text": "we'll touch on that a little bit um security of course is is sort of built in um to the HTP specification as uh",
    "start": "283720",
    "end": "292280"
  },
  {
    "text": "certain headers and you can leverage that interrest API to keep your API secure and of course encapsulation you",
    "start": "292280",
    "end": "298919"
  },
  {
    "text": "have a lot of moving Parts in your applications you don't necessarily need to expose them all so rest apis and and",
    "start": "298919",
    "end": "305280"
  },
  {
    "text": "rest the rest approach can give you an abstraction level um of how to represent data without exposing everything so",
    "start": "305280",
    "end": "312680"
  },
  {
    "text": "those are the most important reasons of why you choose rest Json you know why Json instead of",
    "start": "312680",
    "end": "318759"
  },
  {
    "text": "XML it's fairly ubiquitous nowadays it is uh I think as of last week um Heroku",
    "start": "318759",
    "end": "325120"
  },
  {
    "text": "came out with some performance or statistics about application Developers and the languages they chose Json was I",
    "start": "325120",
    "end": "332039"
  },
  {
    "text": "think 55% of all new application development I'm sure that means mobile and and desktop applications but it's",
    "start": "332039",
    "end": "337759"
  },
  {
    "text": "ubiquitous almost everybody can use it consume it interact with it speak it and",
    "start": "337759",
    "end": "342880"
  },
  {
    "text": "of course it's a lot simpler than XML right it's basically name value pairs Primitives strings references to objects",
    "start": "342880",
    "end": "350720"
  },
  {
    "text": "it's very readable if you're a new developer and you haven't worked with languages all that often or you're new",
    "start": "350720",
    "end": "357199"
  },
  {
    "text": "to computer science um it's fairly readable able uh and of course it's scalable and that you can extend it and",
    "start": "357199",
    "end": "364319"
  },
  {
    "text": "add to it and and grow it as you need it and it's very very flexible there's there's very little little limitations",
    "start": "364319",
    "end": "369599"
  },
  {
    "text": "in Json so it is becoming or growing to become the predominant data format for",
    "start": "369599",
    "end": "375280"
  },
  {
    "text": "rest apis h a t e o a s how many people here",
    "start": "375280",
    "end": "382520"
  },
  {
    "text": "have heard this term okay so the majority of people here have not and what This Acronym stands",
    "start": "382520",
    "end": "389440"
  },
  {
    "text": "for for as hyper media as the engine of application State and it's a big mouthful that really",
    "start": "389440",
    "end": "397039"
  },
  {
    "text": "means you should try to develop or Implement your rest API as if you're customers were web browsers that they",
    "start": "397039",
    "end": "404720"
  },
  {
    "text": "have no idea about your data domain they don't know about your data model they don't know how about interactions and",
    "start": "404720",
    "end": "410039"
  },
  {
    "text": "references across the objects function they are blind as soon as they access your API and they should theoretically",
    "start": "410039",
    "end": "416960"
  },
  {
    "text": "be able to discover everything they need to do about your API um based on the initial page or",
    "start": "416960",
    "end": "423960"
  },
  {
    "text": "resource that's loaded hate OAS is probably a",
    "start": "423960",
    "end": "429440"
  },
  {
    "text": "restriction of the rest architecture or the rest philosophy as as presented by Dr",
    "start": "429440",
    "end": "434680"
  },
  {
    "text": "Fielding but um there are there are many people out there that Advocate this as an approach I just wanted to reference",
    "start": "434680",
    "end": "441039"
  },
  {
    "text": "this because you'll see it quite a bit in in referencing rest or Json based apis um I'm not a strict adherent to",
    "start": "441039",
    "end": "447960"
  },
  {
    "text": "this although I believe that there are many significant things that it offers that we should try to Aspire to do U but",
    "start": "447960",
    "end": "455039"
  },
  {
    "text": "sometimes real life gets in the way and you have to just get crap out the door and um so I try to do this when possible",
    "start": "455039",
    "end": "461759"
  },
  {
    "text": "sometime excuse me sometimes it's not so easy but rest is easy right it's simple it's Json um there's only five major",
    "start": "461759",
    "end": "470520"
  },
  {
    "text": "HTTP methods that you have to worry about and I think that's the reason why",
    "start": "470520",
    "end": "475680"
  },
  {
    "text": "the adoption is growing so much because for consumers it appears to be easy",
    "start": "475680",
    "end": "480720"
  },
  {
    "text": "the problem is for producers it's really freaking hard to get this stuff right",
    "start": "480720",
    "end": "486240"
  },
  {
    "text": "there's a lot of things that can go wrong um one of the key things about rest is it's an architectural style",
    "start": "486240",
    "end": "492360"
  },
  {
    "text": "right it's not a specification it's not a standard it's not an RFC and styles",
    "start": "492360",
    "end": "497720"
  },
  {
    "text": "can be interpreted by people differently depending on who you're talking to and so a lot of what we're going to talk",
    "start": "497720",
    "end": "503000"
  },
  {
    "text": "about tonight is convention or de facto convention you know what the majority of the community practices uh based on",
    "start": "503000",
    "end": "510360"
  },
  {
    "text": "their interpretation of Roy fielding's paper and and what people are doing uh with modern",
    "start": "510360",
    "end": "517200"
  },
  {
    "text": "apis so R can be easy if you're a provider you're you're writing an API it",
    "start": "517200",
    "end": "522560"
  },
  {
    "text": "can be easy assuming that you adhere to certain conventions um and the majority",
    "start": "522560",
    "end": "528320"
  },
  {
    "text": "of the design things that we'll talk about tonight is all about convention that adheres to or at least compatible",
    "start": "528320",
    "end": "534760"
  },
  {
    "text": "with uh fieldings paper on rest architectures",
    "start": "534760",
    "end": "540200"
  },
  {
    "text": "so let's talk about some fundamentals of rest first before we start talking about design as I mentioned cloud or storm",
    "start": "540200",
    "end": "547600"
  },
  {
    "text": "path or our Cloud identity management system in the cloud we um there are",
    "start": "547600",
    "end": "553240"
  },
  {
    "text": "certain objects in our domain that we interact with frequently and that customers interact with and most of the",
    "start": "553240",
    "end": "558760"
  },
  {
    "text": "time they're interacting with applications uh things that they register in our system in order to",
    "start": "558760",
    "end": "564000"
  },
  {
    "text": "communicate with us directories accounts which are identities within a directory",
    "start": "564000",
    "end": "569160"
  },
  {
    "text": "grp groups um associations of all of these things you know associations of accounts to groups and groups to",
    "start": "569160",
    "end": "575399"
  },
  {
    "text": "directories hierarchies of groups and developer workflows like if you sign up or register a new user and you've got to",
    "start": "575399",
    "end": "581920"
  },
  {
    "text": "send them an email to verify their email address we we automate that kind of stuff but I bring that up to say this is",
    "start": "581920",
    "end": "588040"
  },
  {
    "text": "the domain model that I'll be referencing throughout the rest of the presentation and I'll show you some real world examples of what our API looks",
    "start": "588040",
    "end": "594440"
  },
  {
    "text": "like that are manifestations of these design principles so groups and users",
    "start": "594440",
    "end": "599480"
  },
  {
    "text": "accounts are things I think everybody's comfortable with we've seen it a lot um and I think it'll be um intuitive when",
    "start": "599480",
    "end": "605680"
  },
  {
    "text": "you start seeing some of the code so resources let's talk about",
    "start": "605680",
    "end": "612120"
  },
  {
    "text": "resources a resource at least as we Define it here is a noun it's not a verb",
    "start": "612120",
    "end": "617480"
  },
  {
    "text": "so things like a directory or an account or in a group these are all things they have attributes they have Behavior",
    "start": "617480",
    "end": "623320"
  },
  {
    "text": "sometimes but they're nouns they're not verbs so when I talk about a resource",
    "start": "623320",
    "end": "628360"
  },
  {
    "text": "you won't hear me or most people that that talk about rest talking about you know creating an account or delete a",
    "start": "628360",
    "end": "635519"
  },
  {
    "text": "user or you know open a file those are all actions or behaviors they're not",
    "start": "635519",
    "end": "641200"
  },
  {
    "text": "resources um and the reason why I want to kind of focus on resources is that",
    "start": "641200",
    "end": "647160"
  },
  {
    "text": "when you look at a resource and all of its properties and you interact with it it's sort of a coar grained interaction",
    "start": "647160",
    "end": "653040"
  },
  {
    "text": "you're not interacting with individual properties necessarily on an individual basis you're kind of looking at these",
    "start": "653040",
    "end": "659360"
  },
  {
    "text": "things in Aggregate and that's important as an architectural style because the",
    "start": "659360",
    "end": "665040"
  },
  {
    "text": "more changes that occur to your objects or to your resources or to the data in your",
    "start": "665040",
    "end": "670480"
  },
  {
    "text": "system the you want to reduce the amount of change that occurs for your end users and so the coarser grained the more",
    "start": "670480",
    "end": "678240"
  },
  {
    "text": "generic your data representations can be the the more you minimize change in flux",
    "start": "678240",
    "end": "683680"
  },
  {
    "text": "to your end users which is a good thing right they don't want to have to fix their apis or things if you introduce change so the more course grain you can",
    "start": "683680",
    "end": "690160"
  },
  {
    "text": "be the better it's the same reason why uh being a Java group if you have a Java method you might not want to overload it",
    "start": "690160",
    "end": "696639"
  },
  {
    "text": "three or four times and have variable arguments in four different methods because maybe the next day you have a",
    "start": "696639",
    "end": "702240"
  },
  {
    "text": "different argument and now you have to create a fifth method right it can kind of grow out of out of scope um and it",
    "start": "702240",
    "end": "709079"
  },
  {
    "text": "could be very difficult to maintain you have a lot a lot of extra logic that might be unnecessary so we want to keep things",
    "start": "709079",
    "end": "714959"
  },
  {
    "text": "core screen so to that end when I'm talking about URLs what if we took our resources",
    "start": "714959",
    "end": "723480"
  },
  {
    "text": "and we kind of added verbs to them you know we could have a URL that says you know SL getet account or create",
    "start": "723480",
    "end": "728959"
  },
  {
    "text": "directory or update group or verify account email address and while there's only four of",
    "start": "728959",
    "end": "734760"
  },
  {
    "text": "these URLs and they might seem intuitive to some sort of very tightly coupling",
    "start": "734760",
    "end": "740320"
  },
  {
    "text": "the notion of a resource and behavior on that resource and just like in the Java",
    "start": "740320",
    "end": "745760"
  },
  {
    "text": "example I just gave this can be very bad because what if the behaviors you need start to",
    "start": "745760",
    "end": "751519"
  },
  {
    "text": "explode or acrew over time maybe I get all accounts maybe I can search accounts",
    "start": "751519",
    "end": "756600"
  },
  {
    "text": "maybe I can create an ldap directory or find groups by a directory name the",
    "start": "756600",
    "end": "761880"
  },
  {
    "text": "number or the more behaviors that your system supports if you had a style like this your API list would explode and it",
    "start": "761880",
    "end": "768680"
  },
  {
    "text": "would be incredibly confusing to developers and it'd be very hard to maintain as a development team so this if you're familiar with",
    "start": "768680",
    "end": "776519"
  },
  {
    "text": "some of the older RPC Styles over the web so RPC and whatnot this smells very much like an RPC API this is not",
    "start": "776519",
    "end": "783199"
  },
  {
    "text": "scalable do not do this this is a bad idea when you're talking about rest architectures so we try to avoid this",
    "start": "783199",
    "end": "789320"
  },
  {
    "text": "whenever possible by keeping it super simple and so how do you keep that",
    "start": "789320",
    "end": "794560"
  },
  {
    "text": "simple how do you how do you take all of these complex objects and their relationships and and break it down into",
    "start": "794560",
    "end": "800480"
  },
  {
    "text": "a URL format and in a resource format that people can easily get their heads around the answer is really there's",
    "start": "800480",
    "end": "806560"
  },
  {
    "text": "there's only really two fundamental types of resources in all rest apis you",
    "start": "806560",
    "end": "811839"
  },
  {
    "text": "have collections and you have instances inside of a collection so we'll talk about",
    "start": "811839",
    "end": "818720"
  },
  {
    "text": "collection resources first if if you go to our application and you get a SL applications URL this is a plural name",
    "start": "818720",
    "end": "826519"
  },
  {
    "text": "it it implies or indicates that there are multiple things associated with it and if you interact with this you'll get",
    "start": "826519",
    "end": "832720"
  },
  {
    "text": "back one or more application resources um or rather links to",
    "start": "832720",
    "end": "838240"
  },
  {
    "text": "resources we'll talk about linking later on the point of this construct is that it's a collection that references other",
    "start": "838240",
    "end": "845399"
  },
  {
    "text": "things um it's a container representation in addition to Containers",
    "start": "845399",
    "end": "851639"
  },
  {
    "text": "we have the actual instances and here we have an example of a specific application instance with a particular",
    "start": "851639",
    "end": "858440"
  },
  {
    "text": "ID and it lives at that particular location it's a child of its",
    "start": "858440",
    "end": "864800"
  },
  {
    "text": "container and that's really the majority of how rest URLs and rest resources are",
    "start": "865519",
    "end": "872639"
  },
  {
    "text": "constructed they're children of containers of some sort um and you can",
    "start": "872639",
    "end": "878320"
  },
  {
    "text": "create as many of these as is necessary based on the data types in your application it's typically better to",
    "start": "878320",
    "end": "883560"
  },
  {
    "text": "have more of the the base URLs and collections based on specific data types",
    "start": "883560",
    "end": "889560"
  },
  {
    "text": "than it is to be generic for example SL things is a valid resource endpoint and",
    "start": "889560",
    "end": "895639"
  },
  {
    "text": "you could represent everything in the system but it's not very pragmatic so the the more concrete you can represent",
    "start": "895639",
    "end": "901600"
  },
  {
    "text": "your data types in in a URL format the better so we've talked just initially",
    "start": "901600",
    "end": "909040"
  },
  {
    "text": "about resources right there are things that you can interact with they data bits of data that you can exchange among different parties how do you perform",
    "start": "909040",
    "end": "916680"
  },
  {
    "text": "Behavior how do you how do you execute things on those resources or how do you interact with them and change",
    "start": "916680",
    "end": "922120"
  },
  {
    "text": "them and that's really based on in rest you do that via the HTTP specifications",
    "start": "922120",
    "end": "928199"
  },
  {
    "text": "methods that are defined and so there's there's five core methods I won't really talk about patch it's a new method I",
    "start": "928199",
    "end": "934680"
  },
  {
    "text": "think it's RFC 5987 but it's a new method that's coming on board but we",
    "start": "934680",
    "end": "939880"
  },
  {
    "text": "don't really talk about that tonight um you can ask questions about it later on if you'd like there's five main methods",
    "start": "939880",
    "end": "945160"
  },
  {
    "text": "to get post put in delete and",
    "start": "945160",
    "end": "950639"
  },
  {
    "text": "head how many people here agree that get",
    "start": "951040",
    "end": "956560"
  },
  {
    "text": "put post and delete can be translated to create read update delete",
    "start": "956560",
    "end": "963920"
  },
  {
    "text": "crud almost everybody while it's possible it it's",
    "start": "964360",
    "end": "970440"
  },
  {
    "text": "somewhat erroneous to to shoehorn the verbs into crud and I'll explain why in",
    "start": "970440",
    "end": "976160"
  },
  {
    "text": "a second but they do not offer a one toone correlation in HTTP in the HTTP",
    "start": "976160",
    "end": "982480"
  },
  {
    "text": "specification in the semantics of the HTP protocol they are very similar and they can be close but they're not one to",
    "start": "982480",
    "end": "989160"
  },
  {
    "text": "one correlation some of them are though um",
    "start": "989160",
    "end": "995079"
  },
  {
    "text": "as you might expect get is actually a read if I if I get a URL I'm really just doing a read operation delete actually",
    "start": "995079",
    "end": "1003360"
  },
  {
    "text": "deletes an underlying resource if it exists head is what you'd kind of expect",
    "start": "1003360",
    "end": "1008839"
  },
  {
    "text": "you know I want to get back the headers of the response I don't want anybody and those are really one toone",
    "start": "1008839",
    "end": "1014319"
  },
  {
    "text": "correspondents with uh with those things however",
    "start": "1014319",
    "end": "1019399"
  },
  {
    "text": "it's not so obvious with put and post put and post can both be used for create",
    "start": "1019399",
    "end": "1025319"
  },
  {
    "text": "an update and so you can have both of those operations occur on both of those",
    "start": "1025319",
    "end": "1030600"
  },
  {
    "text": "methods and I'll explain how that's possible would you also add PS to [Music]",
    "start": "1030600",
    "end": "1035720"
  },
  {
    "text": "that um patch can be used for update um I guess if patch is used in the sense of",
    "start": "1035720",
    "end": "1042438"
  },
  {
    "text": "a a full update it could be used for create um I don't know that that behavior is well defined though",
    "start": "1042439",
    "end": "1050799"
  },
  {
    "text": "um so okay so put for create how do you how can you use put for most people think put is just update but it can be",
    "start": "1050799",
    "end": "1058200"
  },
  {
    "text": "used for create if the client puts the data to an a URL that it knows about",
    "start": "1058200",
    "end": "1065520"
  },
  {
    "text": "before the resource is created so if you allow your end users or your API users",
    "start": "1065520",
    "end": "1070960"
  },
  {
    "text": "to create their own identifiers maybe they're globally unique in their organization or they represent a",
    "start": "1070960",
    "end": "1077080"
  },
  {
    "text": "username um and they're trying to create users you are allowed to use point for create the key the key here is that you",
    "start": "1077080",
    "end": "1084039"
  },
  {
    "text": "have to put the entire resource and it every all the properties that are part of that resource have to be submitted",
    "start": "1084039",
    "end": "1089960"
  },
  {
    "text": "with a put request so put can be used for create more regularly uh identified",
    "start": "1089960",
    "end": "1096120"
  },
  {
    "text": "with put is updates but the key is that just like in a create when you do an",
    "start": "1096120",
    "end": "1101760"
  },
  {
    "text": "update with a put it must contain the full resource representation it's the object in its entirety or the resource",
    "start": "1101760",
    "end": "1108840"
  },
  {
    "text": "rather in its entirety and so in this example we're updating an existing resource that already exists in the",
    "start": "1108840",
    "end": "1114720"
  },
  {
    "text": "system and in this case it only has two properties a name and description but I'm am updating both the name and the",
    "start": "1114720",
    "end": "1121559"
  },
  {
    "text": "description I might have only changed the name but I have to send the description as well because it's a it's a full update",
    "start": "1121559",
    "end": "1127360"
  },
  {
    "text": "operation and the reason why is puts and gets and deletes and heads are",
    "start": "1127360",
    "end": "1133520"
  },
  {
    "text": "identified by the HTTP specification as idempotent operations now idempotent",
    "start": "1133520",
    "end": "1139400"
  },
  {
    "text": "operation is any operation that produces the exact same result if it's invoked",
    "start": "1139400",
    "end": "1144559"
  },
  {
    "text": "one or multiple times and so in rest speak that really means if I take it",
    "start": "1144559",
    "end": "1151240"
  },
  {
    "text": "some a resource and I put it to the server I execute a put if I execute that put one time or that same exact request",
    "start": "1151240",
    "end": "1158720"
  },
  {
    "text": "a 100 times this the resource State on the server is going to be identical regardless of how many times I make that",
    "start": "1158720",
    "end": "1164480"
  },
  {
    "text": "call and that's what a dent means and that's a property",
    "start": "1164480",
    "end": "1170080"
  },
  {
    "text": "defined by the specification we have to adhere to it it's it's part of how the the system is is is defined as a spec so",
    "start": "1170080",
    "end": "1177559"
  },
  {
    "text": "that's why you have to send the full resource you couldn't just send one property because if I send one property one time and another property on another",
    "start": "1177559",
    "end": "1183400"
  },
  {
    "text": "request the resource state is different between those two requests therefore that breaks",
    "start": "1183400",
    "end": "1189240"
  },
  {
    "text": "idempotency let's talk about put put can be used as create as well um post post",
    "start": "1190280",
    "end": "1197320"
  },
  {
    "text": "oh post thank you post can to be used as a create um it's typically almost always done on a parent resource so when I post",
    "start": "1197320",
    "end": "1204720"
  },
  {
    "text": "to a parent resource I'm indicating that I want to create a child of that parent",
    "start": "1204720",
    "end": "1210480"
  },
  {
    "text": "and so in this case we are posting a application object that has just the name property defined and we're posting",
    "start": "1210480",
    "end": "1217600"
  },
  {
    "text": "it to/ applications which is the parent container and a new resource will be",
    "start": "1217600",
    "end": "1224600"
  },
  {
    "text": "created uh based on that post if the post is successful the",
    "start": "1224600",
    "end": "1230240"
  },
  {
    "text": "response will be 2011 created or it should be uh as a as a convention it",
    "start": "1230240",
    "end": "1235880"
  },
  {
    "text": "should be 2011 created not 200 um to indicate that something was created not",
    "start": "1235880",
    "end": "1241280"
  },
  {
    "text": "just that the request was accessible Additionally you should always specify the location",
    "start": "1241280",
    "end": "1247200"
  },
  {
    "text": "header with the fully qualified URL of the resource that was just created on the server and that lets the client know",
    "start": "1247200",
    "end": "1254600"
  },
  {
    "text": "that okay I've just created a child but now if I actually want to go interact with it now I have the URL that I can do that",
    "start": "1254600",
    "end": "1261799"
  },
  {
    "text": "with very important to conclude location headers on on",
    "start": "1262039",
    "end": "1267360"
  },
  {
    "text": "Creations so that was create here's an update um you can in this case uh update",
    "start": "1268240",
    "end": "1275240"
  },
  {
    "text": "maybe one property of a particular application resource so we're at SL",
    "start": "1275240",
    "end": "1280279"
  },
  {
    "text": "applicationid and I want to change the name and I'm only specifying the name",
    "start": "1280279",
    "end": "1285480"
  },
  {
    "text": "and in this case we get a 200 okay because it went through successfully um",
    "start": "1285480",
    "end": "1291200"
  },
  {
    "text": "but the key here is that this can be a partial update there's the rest is sort of the you know the black sheep of the",
    "start": "1291200",
    "end": "1297000"
  },
  {
    "text": "family in HTTP methods and that it's not defined as to what the",
    "start": "1297000",
    "end": "1302840"
  },
  {
    "text": "server is going to do right they don't specify or mandate idempotency it's really a processing directive for the",
    "start": "1302840",
    "end": "1308480"
  },
  {
    "text": "server post really equates to processing so you can really turn this into whatever you",
    "start": "1308480",
    "end": "1313960"
  },
  {
    "text": "want most people in the rest World translate post into the create based on",
    "start": "1313960",
    "end": "1319520"
  },
  {
    "text": "the parent resource or an update either partial or full and so a partial update",
    "start": "1319520",
    "end": "1324840"
  },
  {
    "text": "like this case would only update that one particular property it doesn't need the entire object to be sent across the",
    "start": "1324840",
    "end": "1330640"
  },
  {
    "text": "wire a full update is really a special case of the partial update right a full update is the partial update that",
    "start": "1330640",
    "end": "1336600"
  },
  {
    "text": "happens to include every property and so you can send that across the wire and the server can give you a",
    "start": "1336600",
    "end": "1342360"
  },
  {
    "text": "response back saying you know okay the update was successful the reason why this is important is that some some apis",
    "start": "1342360",
    "end": "1350200"
  },
  {
    "text": "depending on load could charge end users based on the quantity of data that's going across a network or the number of",
    "start": "1350200",
    "end": "1355360"
  },
  {
    "text": "requests that are going across a network and if you say if you're on a data plan or something that says you can only",
    "start": "1355360",
    "end": "1360919"
  },
  {
    "text": "transfer and receive up to 5 gabes a month if you're sending data unnecessarily into the server it's",
    "start": "1360919",
    "end": "1366240"
  },
  {
    "text": "eating against your quota unnecessarily and so if you can provide partial updates to your end users and you do",
    "start": "1366240",
    "end": "1372039"
  },
  {
    "text": "have a data limit this is very convenient for them and they can choose what they want to send it's also more efficient from a network perspective",
    "start": "1372039",
    "end": "1378000"
  },
  {
    "text": "you'll pay a little bit less in network overhead um you know as as the aggregate over time",
    "start": "1378000",
    "end": "1384840"
  },
  {
    "text": "howeler what's that how do model property deletes post model property",
    "start": "1384840",
    "end": "1390279"
  },
  {
    "text": "deletes with what post can update a property that already exists or didn't exist previously how would",
    "start": "1390279",
    "end": "1395720"
  },
  {
    "text": "youel oh to delete the property want to delete n yeah you set it to null and then send that into the",
    "start": "1395720",
    "end": "1402200"
  },
  {
    "text": "server cuz the server really defines what the properties are and if you don't want that to have a value you have to send in n",
    "start": "1402200",
    "end": "1410440"
  },
  {
    "text": "and the key with post however it is it is the one method that's not idant right you can't call it multiple times and",
    "start": "1410559",
    "end": "1416840"
  },
  {
    "text": "expect the resource to be identical every time this it's at the server's discretion as to whether or not that",
    "start": "1416840",
    "end": "1424200"
  },
  {
    "text": "occurs and one of the last things that we'll talk about for fundamentals is that of media types media types are",
    "start": "1425240",
    "end": "1430640"
  },
  {
    "text": "really really critical to rest API and rest design well if you're going to do things the right way if you're going to",
    "start": "1430640",
    "end": "1436279"
  },
  {
    "text": "do things the rest afarian way you want to kind of learn and understand media types but a media type is really a data",
    "start": "1436279",
    "end": "1443240"
  },
  {
    "text": "format specification and a set of parsing rules associated with that specification so it tells a client you",
    "start": "1443240",
    "end": "1450320"
  },
  {
    "text": "know I'm going to get back data that looks like this and I know that when I'm reading it or scanning it I can look for",
    "start": "1450320",
    "end": "1455440"
  },
  {
    "text": "certain properties and attributes and it really tells the client how to process that data in addition is just the raw",
    "start": "1455440",
    "end": "1461400"
  },
  {
    "text": "format of the data and the way a client tells the server what format it wants is using the",
    "start": "1461400",
    "end": "1468399"
  },
  {
    "text": "accept header in the request and so whenever a client sends a request into the server you should always almost",
    "start": "1468399",
    "end": "1474559"
  },
  {
    "text": "always specify an accept header to tell it what the server what its preferences are what kind of data formats that it",
    "start": "1474559",
    "end": "1481320"
  },
  {
    "text": "wants to consume when the server gets a a request and processes it and sends back a",
    "start": "1481320",
    "end": "1487399"
  },
  {
    "text": "response the server should always set a content type property that contains or",
    "start": "1487399",
    "end": "1492799"
  },
  {
    "text": "that references the Mind mind type or the media type of the the body being sent back to the client so same same",
    "start": "1492799",
    "end": "1501760"
  },
  {
    "text": "media type client specifies except server sets content type and the media",
    "start": "1501760",
    "end": "1507520"
  },
  {
    "text": "type um that I think is is most relevant to this particular conversation is that of application Json and that's the",
    "start": "1507520",
    "end": "1513919"
  },
  {
    "text": "typical mediate Tech that everybody references when they're talking about Json from an ACP perspective um you know",
    "start": "1513919",
    "end": "1519200"
  },
  {
    "text": "XML XML or application XML um interestingly though in media types or",
    "start": "1519200",
    "end": "1525240"
  },
  {
    "text": "with media types you can kind of create your own um if you want them to be publicly",
    "start": "1525240",
    "end": "1530799"
  },
  {
    "text": "accessible in the standard you have to register them with I the registry for media types and other things um but you",
    "start": "1530799",
    "end": "1538559"
  },
  {
    "text": "can create your own and specify like I don't know if you can see it in the back but the the second example here is",
    "start": "1538559",
    "end": "1545520"
  },
  {
    "text": "application SL Fu plus Json and that's really saying that this is a Json",
    "start": "1545520",
    "end": "1551600"
  },
  {
    "text": "document but it's structured according to the fu media type specification and that's whatever you define it to be so",
    "start": "1551600",
    "end": "1558320"
  },
  {
    "text": "you say maybe every response has to have two properties in it you know you can Define that in your specification and then the client can",
    "start": "1558320",
    "end": "1564760"
  },
  {
    "text": "read that specification and Implement Behavior according to that spec um Additionally you",
    "start": "1564760",
    "end": "1571000"
  },
  {
    "text": "can add on parameters or fragments to Media types to indicate even more information to the client so this third",
    "start": "1571000",
    "end": "1578200"
  },
  {
    "text": "example application Fu plus Json semicolon application is kind of saying that this is an a Fu Json document that",
    "start": "1578200",
    "end": "1586120"
  },
  {
    "text": "happens to be an application resource um and there's you can look at the spec",
    "start": "1586120",
    "end": "1591159"
  },
  {
    "text": "but there's a whole lot of things you can do with fragments and stuff to actually represent how to process the",
    "start": "1591159",
    "end": "1596279"
  },
  {
    "text": "resource not just the data format that it's in um however my recommendation is if",
    "start": "1596279",
    "end": "1604720"
  },
  {
    "text": "you're deciding how to do this stuff is you start with application Json every tool out there understands that that",
    "start": "1604720",
    "end": "1611039"
  },
  {
    "text": "data type um they know every tool knows how to process it parse it generate it it's very easy to get started with that",
    "start": "1611039",
    "end": "1617360"
  },
  {
    "text": "and over time as you as a as an engineering team have time dedicated in your your requirements or your Sprints",
    "start": "1617360",
    "end": "1623799"
  },
  {
    "text": "or what have you to put effort into creating custom media types you should because that's really the right way to",
    "start": "1623799",
    "end": "1629000"
  },
  {
    "text": "do it and it gives a lot more information to clients when they're parsing your data but you can kind of",
    "start": "1629000",
    "end": "1634039"
  },
  {
    "text": "get there when when you have time to do so okay those are fundamentals let's",
    "start": "1634039",
    "end": "1640559"
  },
  {
    "text": "talk about design so we've talked about what rest is and why Json is important",
    "start": "1640559",
    "end": "1646679"
  },
  {
    "text": "and certain paradigms associated with rest calls let's actually talk about designing a real",
    "start": "1646679",
    "end": "1654240"
  },
  {
    "text": "API while while you should not think of rest design in the context of URLs they're",
    "start": "1654240",
    "end": "1661919"
  },
  {
    "text": "naturally one of the first things that people look at and the reason why I say that is because Roy Fielding has said",
    "start": "1661919",
    "end": "1667440"
  },
  {
    "text": "rest is really all about the media types and the parsing specification and the",
    "start": "1667440",
    "end": "1673240"
  },
  {
    "text": "references between resources you know linking documents that's the that's the heart of rest URL design is really",
    "start": "1673240",
    "end": "1680000"
  },
  {
    "text": "almost irrelevant that being said if you're going to offer an API you have to create URLs so we we'll just get get",
    "start": "1680000",
    "end": "1686600"
  },
  {
    "text": "some ideas in play here which of these two apis do you",
    "start": "1686600",
    "end": "1692760"
  },
  {
    "text": "think you would want to consume if you were going to integrate with an API the top one absolutely yeah so the top one",
    "start": "1692760",
    "end": "1699200"
  },
  {
    "text": "is very very simple it's very short it's intuitive it's easy to understand if you look at the bottom one it's verbose it's",
    "start": "1699200",
    "end": "1706320"
  },
  {
    "text": "visually jarring it's frustrating you don't really know what all that intermediate data represents or why it's",
    "start": "1706320",
    "end": "1712600"
  },
  {
    "text": "there your customer wants the easiest possible path to adoption and so by",
    "start": "1712600",
    "end": "1718679"
  },
  {
    "text": "choosing the shortest API and the most intuitive API you can it start it sets the tone for how people are going to",
    "start": "1718679",
    "end": "1725399"
  },
  {
    "text": "consume your services you want to keep things very clean um and user friendly the even though they're developers and",
    "start": "1725399",
    "end": "1731760"
  },
  {
    "text": "and a lot of them understand very technical things you want to make them as happy as possible and and do things",
    "start": "1731760",
    "end": "1737159"
  },
  {
    "text": "in the most intuitive way way so let's say you choose the top",
    "start": "1737159",
    "end": "1743279"
  },
  {
    "text": "API uh top URL format the next kind of question you have to ask yourself is how am I going to serve content from",
    "start": "1743279",
    "end": "1750080"
  },
  {
    "text": "there is it only supposed to be intended for rest clients machine tools that are",
    "start": "1750080",
    "end": "1755279"
  },
  {
    "text": "that are communicating with the server or could a browser access this this URL",
    "start": "1755279",
    "end": "1760320"
  },
  {
    "text": "as well and if they do access it what happens do they see Json are they redirected to a user interface",
    "start": "1760320",
    "end": "1768679"
  },
  {
    "text": "um the choice is really up to you there's no well-defined or well adopted",
    "start": "1768679",
    "end": "1774760"
  },
  {
    "text": "convention in the community um at storm path we allow people to hit the URL with",
    "start": "1774760",
    "end": "1780519"
  },
  {
    "text": "both a browser and via command line tools and we really did that because you know we thought it was pragmatic because",
    "start": "1780519",
    "end": "1787360"
  },
  {
    "text": "if you're if you're a developer and you're let's say you're building a tool to consume the API maybe it doesn't work",
    "start": "1787360",
    "end": "1792919"
  },
  {
    "text": "one day and you just want to go thrash it in the browser really quick just to see what comes back they can do that they have that flexibility to do that",
    "start": "1792919",
    "end": "1798679"
  },
  {
    "text": "some people will actually if if a browser hits the URL like this redirect them to the developer documentation you can do that that's not",
    "start": "1798679",
    "end": "1805360"
  },
  {
    "text": "the approach that we went um I think developers actually like to see content and see what's coming back from the",
    "start": "1805360",
    "end": "1810640"
  },
  {
    "text": "server so um that's really up to you uh we recommend allowing the browser to to",
    "start": "1810640",
    "end": "1817480"
  },
  {
    "text": "hit the same endpoint that the the SDK clients are what about",
    "start": "1817480",
    "end": "1824039"
  },
  {
    "text": "versions you know I've got version one of my software API out but all of a",
    "start": "1824039",
    "end": "1829080"
  },
  {
    "text": "sudden we decide that we've got this really big feature that has to go in or",
    "start": "1829080",
    "end": "1834880"
  },
  {
    "text": "new model of how objects are represented how do I create those resources without",
    "start": "1834880",
    "end": "1840120"
  },
  {
    "text": "breaking all of my existing clients and there's kind of two de facto",
    "start": "1840120",
    "end": "1846799"
  },
  {
    "text": "approaches to supporting versions in your URLs the first is",
    "start": "1846799",
    "end": "1853080"
  },
  {
    "text": "to append your base URL with a version identifier and then everything off that",
    "start": "1853080",
    "end": "1859399"
  },
  {
    "text": "hangs off of that identifier is expected and known to be compatible with that",
    "start": "1859399",
    "end": "1864760"
  },
  {
    "text": "particular API version like the top one you like the top one",
    "start": "1864760",
    "end": "1871639"
  },
  {
    "text": "simple it's very simple it's easy to understand um it's not verbos so we have V right it's not 1.1.5 or",
    "start": "1871639",
    "end": "1880519"
  },
  {
    "text": "1.12.4 and the reason why is cuz these apis should change very very infrequently right the more that you",
    "start": "1880519",
    "end": "1886760"
  },
  {
    "text": "change these things and up the version numbers the more you're causing clients to upgrade and um point to new new URLs",
    "start": "1886760",
    "end": "1894279"
  },
  {
    "text": "and do more testing so it's a very bad idea to have like version 40 on this",
    "start": "1894279",
    "end": "1899639"
  },
  {
    "text": "kind of thing it's very disruptive to to your clients so try to increment this",
    "start": "1899639",
    "end": "1905279"
  },
  {
    "text": "number as infrequently as possible and you should be try to keep those the the",
    "start": "1905279",
    "end": "1911000"
  },
  {
    "text": "increments to whole integer values you know 1.1.14 doesn't really mean anything to a client it might mean something from",
    "start": "1911000",
    "end": "1918360"
  },
  {
    "text": "a jar file or or a gem or something like that because of little bug Point fix releases but it doesn't really mean",
    "start": "1918360",
    "end": "1925399"
  },
  {
    "text": "things in the context of a data transfer API so try to keep those numbers um integer",
    "start": "1925399",
    "end": "1931679"
  },
  {
    "text": "values the more rest AAR in way and actually the way Dr Fielding Advocates",
    "start": "1931679",
    "end": "1938840"
  },
  {
    "text": "to do version upgrades is to is to represent the version or the format",
    "start": "1938840",
    "end": "1944360"
  },
  {
    "text": "rather in the media type that's being served from the server and so the example that we see here is is U one of",
    "start": "1944360",
    "end": "1951760"
  },
  {
    "text": "the custom media types that you saw previously and I've got a v equals one indicator at the end of the",
    "start": "1951760",
    "end": "1958240"
  },
  {
    "text": "fragment and so a client consuming a URL can look at the media type and say oh",
    "start": "1958240",
    "end": "1964760"
  },
  {
    "text": "this is version two of this type of resource I really only speak version one so maybe I'm going to request via my",
    "start": "1964760",
    "end": "1971279"
  },
  {
    "text": "accept header to give me version one and so this allows your URLs to be be a lot",
    "start": "1971279",
    "end": "1978159"
  },
  {
    "text": "cleaner and they can actually withstand the test of time a lot more if you do",
    "start": "1978159",
    "end": "1983320"
  },
  {
    "text": "this the caveat with this is that it's it takes a lot of time you've got to Define your media types your parsing",
    "start": "1983320",
    "end": "1988919"
  },
  {
    "text": "rules you've got to make sure that every client who interacts with you understands this concept unfortunately",
    "start": "1988919",
    "end": "1994440"
  },
  {
    "text": "most a most developers consumers of apis don't really get this stuff that well um",
    "start": "1994440",
    "end": "1999760"
  },
  {
    "text": "whereas the top URL is is a lot easier almost everyone kind of understands it it's very simple um so the pragmatic",
    "start": "1999760",
    "end": "2006639"
  },
  {
    "text": "approach that we've taken is St path is we use the top version we will support the media type mechanism at a later date",
    "start": "2006639",
    "end": "2014000"
  },
  {
    "text": "uh when we get around to it but choose what your people are going to be happy with what your customers going to be",
    "start": "2014000",
    "end": "2019799"
  },
  {
    "text": "happy with it's more important to get adoption and get Revenue than it is to be an",
    "start": "2019799",
    "end": "2026559"
  },
  {
    "text": "idealist so resource formats we've talked about interacting with resources",
    "start": "2028960",
    "end": "2034399"
  },
  {
    "text": "you know what what do those resources look like uh what how is the data form formulated so we we've already talked",
    "start": "2034399",
    "end": "2041240"
  },
  {
    "text": "about media types and and the ability to choose you know custom media types as necessary but I just want to touch on",
    "start": "2041240",
    "end": "2049079"
  },
  {
    "text": "some very three three things that that for consistency sake that that should probably be adopted by most people",
    "start": "2049079",
    "end": "2057240"
  },
  {
    "text": "Define your properties in camel case right this is Javascript object notation it's not Ruby object notation and by",
    "start": "2057240",
    "end": "2064720"
  },
  {
    "text": "that I mean it's very strange if you're working like for example example in the browser with the Dom objects for you to",
    "start": "2064720",
    "end": "2070720"
  },
  {
    "text": "call my array. 4ore each right it's JavaScript by convention uses camel case",
    "start": "2070720",
    "end": "2076919"
  },
  {
    "text": "so if you in a JavaScript based format maintain that convention it will be easy to consume from JavaScript clients from",
    "start": "2076919",
    "end": "2083440"
  },
  {
    "text": "mobile devices um and for anyone that understands JavaScript conventions so for consistency sake don't use the",
    "start": "2083440",
    "end": "2090800"
  },
  {
    "text": "underscore approach use use the uh use the cam case approach dates and time stamps",
    "start": "2090800",
    "end": "2098400"
  },
  {
    "text": "um I've looked at various apis and I've seen a ton of different ways to formulate timestamps which is kind of",
    "start": "2098400",
    "end": "2105280"
  },
  {
    "text": "odd to me because there's there's a standard called iso8601 has been around for God knows how long um and there's no",
    "start": "2105280",
    "end": "2113440"
  },
  {
    "text": "reason not to use it so in this example we have a Json payload that's been",
    "start": "2113440",
    "end": "2118520"
  },
  {
    "text": "returned it's got a created time stamp property and it specifies an 86i 8601",
    "start": "2118520",
    "end": "2125079"
  },
  {
    "text": "compatible time stamp string so youve got the date the letter T the time and Z",
    "start": "2125079",
    "end": "2131280"
  },
  {
    "text": "for Zulu and I bring that up because I think and this this isn't a mandator you",
    "start": "2131280",
    "end": "2137160"
  },
  {
    "text": "know this isn't necessarily A convention but I think it's very important to represent all time stamps and UTC values",
    "start": "2137160",
    "end": "2142640"
  },
  {
    "text": "you're going to have clients from around the world they're going to be across their own time zones anybody who's worked with time stamps and relational",
    "start": "2142640",
    "end": "2149240"
  },
  {
    "text": "databases will know the horror and the frustration of doing comparisons via select um it's because they don't",
    "start": "2149240",
    "end": "2155880"
  },
  {
    "text": "represent time zones effectively most a lot of databases MySQL specifically doesn't really represent that",
    "start": "2155880",
    "end": "2161440"
  },
  {
    "text": "information well at all so if you just adhere to the specification tools will be able to parse this information better",
    "start": "2161440",
    "end": "2167720"
  },
  {
    "text": "and users who know about the spec or have seen it else will understand it immediately and you're just going to have lower friction on adoption so stick",
    "start": "2167720",
    "end": "2174640"
  },
  {
    "text": "to 8601 ISO 8601 it will make your life",
    "start": "2174640",
    "end": "2180440"
  },
  {
    "text": "easier and the third thing I want to talk about is probably actually the most important when it comes to representing",
    "start": "2181119",
    "end": "2186839"
  },
  {
    "text": "or the represent a of of a resource is in rest distributed hyper",
    "start": "2186839",
    "end": "2194000"
  },
  {
    "text": "media is critical to how rest functions and by that I mean how resources",
    "start": "2194000",
    "end": "2199400"
  },
  {
    "text": "interact with other resources how they reference each other um how you can create content graphs or data graphs",
    "start": "2199400",
    "end": "2206680"
  },
  {
    "text": "based on resources and linking of of resources um and it's so critical in fact that actually Dr fielding's thesis",
    "start": "2206680",
    "end": "2213960"
  },
  {
    "text": "specifies that as the first sentence in his entire entire thesis like it is the most important point of the rest",
    "start": "2213960",
    "end": "2220400"
  },
  {
    "text": "architectural style and so because of that we want to make sure that every resource has a",
    "start": "2220400",
    "end": "2225440"
  },
  {
    "text": "globally unique URL that you can access it well if it's accessible you want a URL that you can access it with and so",
    "start": "2225440",
    "end": "2233200"
  },
  {
    "text": "what we've done at storm path is all of our resources have an HR property that references itself so if you're consuming",
    "start": "2233200",
    "end": "2241079"
  },
  {
    "text": "that resource or that document you can always know the starting point and then",
    "start": "2241079",
    "end": "2246440"
  },
  {
    "text": "navigate to other resour resources or other links from that point on whether or not you use this technique or not the",
    "start": "2246440",
    "end": "2252760"
  },
  {
    "text": "biggest Point here is that linking and in hyper media relations are the most",
    "start": "2252760",
    "end": "2259319"
  },
  {
    "text": "one of the most important things about rest so always make sure that you reference these things as complete URLs",
    "start": "2259319",
    "end": "2264560"
  },
  {
    "text": "when you create your own we I'll show you how we do linking in a second based on this",
    "start": "2264560",
    "end": "2270319"
  },
  {
    "text": "technique so the response body should you always return a response",
    "start": "2270319",
    "end": "2276599"
  },
  {
    "text": "body or not some people ask that question if you do a get request it's kind of obvious you have to like if",
    "start": "2276599",
    "end": "2282560"
  },
  {
    "text": "there's a resource you you should return it always that's that's the whole point of get but what about post if I'm",
    "start": "2282560",
    "end": "2288520"
  },
  {
    "text": "sending data into the server does it make sense to send that same exact data out and return it to me even though I",
    "start": "2288520",
    "end": "2294079"
  },
  {
    "text": "just gave it to the server um we believe that you should do that one feasible and by that I mean it",
    "start": "2294079",
    "end": "2302079"
  },
  {
    "text": "makes it easier for consumers to reference the freshest or the most recent version of the that object which",
    "start": "2302079",
    "end": "2308880"
  },
  {
    "text": "might be slightly different than what they've sent into the server so if you just return that by default they'll",
    "start": "2308880",
    "end": "2314240"
  },
  {
    "text": "always have the most recent version in their local copy or their local cache depending on the client but I say when",
    "start": "2314240",
    "end": "2321119"
  },
  {
    "text": "feasible because for example you could post you know a 40 gab video to a file",
    "start": "2321119",
    "end": "2328000"
  },
  {
    "text": "if you allow that I mean as a file to the server it would be very silly to",
    "start": "2328000",
    "end": "2333240"
  },
  {
    "text": "spit that same 40 GB file out as a response back to the client so so we are",
    "start": "2333240",
    "end": "2338280"
  },
  {
    "text": "feasible if your if your objects are Json and they're not huge it probably makes sense to return them um even",
    "start": "2338280",
    "end": "2344599"
  },
  {
    "text": "though they've just specified it and if you want to allow clients to have very specific or fine grain control as to",
    "start": "2344599",
    "end": "2351280"
  },
  {
    "text": "whether or not that happens you could support a query parameter I've seen people represent this as underscore body",
    "start": "2351280",
    "end": "2357359"
  },
  {
    "text": "or underscore content and if they specify it to false then you don't have to return that information and again",
    "start": "2357359",
    "end": "2363480"
  },
  {
    "text": "that might be valuable to some clients if there are data limits involved right so they don't maybe they just sent you",
    "start": "2363480",
    "end": "2369200"
  },
  {
    "text": "50k of data and they don't want it to to come back cuz they don't want it to count against their quota so it's up to",
    "start": "2369200",
    "end": "2374400"
  },
  {
    "text": "you whether or not that's valuable based on your [Music]",
    "start": "2374400",
    "end": "2379959"
  },
  {
    "text": "API content negotiation we kind of mentioned this briefly a little bit",
    "start": "2382119",
    "end": "2388319"
  },
  {
    "text": "before but there's two ways to really get the content that you want back um well two two very conventional ways um",
    "start": "2388319",
    "end": "2395839"
  },
  {
    "text": "the first is by using the except Header by the client um and the accept header as I",
    "start": "2395839",
    "end": "2402760"
  },
  {
    "text": "mentioned before should specify a list of all the media types that they know how to consume or that they want to",
    "start": "2402760",
    "end": "2408800"
  },
  {
    "text": "consume and the the values specified in that media excuse me the accept header",
    "start": "2408800",
    "end": "2415119"
  },
  {
    "text": "are the the order the preference of the client so if they List application Json",
    "start": "2415119",
    "end": "2420720"
  },
  {
    "text": "before they list text/plain that means they prefer a Json output as opposed to",
    "start": "2420720",
    "end": "2426560"
  },
  {
    "text": "a plane text output so servers should be looking at the accept header if there are multiple",
    "start": "2426560",
    "end": "2432480"
  },
  {
    "text": "values and returning data in the format that that the client prefers if if of course the server supports that",
    "start": "2432480",
    "end": "2439359"
  },
  {
    "text": "format and in this example we see you know we're getting a particular application and we specified that you",
    "start": "2439359",
    "end": "2445720"
  },
  {
    "text": "know I want Json back but if you can't support it give me the plain text value and I'll I'll consume it some other",
    "start": "2445720",
    "end": "2453640"
  },
  {
    "text": "way that's one way another way that you can do this is if your API supports it",
    "start": "2454520",
    "end": "2459880"
  },
  {
    "text": "is uh again this is just more flexibility more options for the consumers of your API depending on how they like to operate but if you want you",
    "start": "2459880",
    "end": "2467240"
  },
  {
    "text": "can support a file extension or a suffix to the end of the resource uh identifier",
    "start": "2467240",
    "end": "2473319"
  },
  {
    "text": "to indicate explicitly what kind of format you want back and so in this",
    "start": "2473319",
    "end": "2478680"
  },
  {
    "text": "example or these two examples the first one is a particular application. Json so",
    "start": "2478680",
    "end": "2484480"
  },
  {
    "text": "obviously return the Json format the next one is CSV so maybe I want it in a",
    "start": "2484480",
    "end": "2489520"
  },
  {
    "text": "comma separated value format and the reason why this can be valuable is not all HTTP clients support easily setting",
    "start": "2489520",
    "end": "2496640"
  },
  {
    "text": "headers so maybe an end user is using a very simple web browser and they can't modify headers and whatnot easily they",
    "start": "2496640",
    "end": "2504000"
  },
  {
    "text": "could just append CSV to the URL and they'll get the format that they want back or you know",
    "start": "2504000",
    "end": "2510440"
  },
  {
    "text": "Json and conventionally this almost or this always overrides the accept header",
    "start": "2510440",
    "end": "2517280"
  },
  {
    "text": "because they're they're they're explicitly telling you in the most relevant part of the request being the resource that they want one",
    "start": "2517280",
    "end": "2525599"
  },
  {
    "text": "format so there's two ways you can support that let's talk about references or",
    "start": "2526560",
    "end": "2532839"
  },
  {
    "text": "linking this is really again going back to the hyper media and Hyper media is a",
    "start": "2532839",
    "end": "2539200"
  },
  {
    "text": "application State mechanism linking and referencing of resources one of the most critical things about rest",
    "start": "2539200",
    "end": "2546119"
  },
  {
    "text": "um and it's fundamental to scalability and by that I mean if you have multiple",
    "start": "2546119",
    "end": "2553280"
  },
  {
    "text": "resources and resources are embedded in other resources architectures might change data models might change if you",
    "start": "2553280",
    "end": "2560680"
  },
  {
    "text": "have resources that are Atomic and that they contain the information particular",
    "start": "2560680",
    "end": "2566359"
  },
  {
    "text": "to that resource and that resource only it allows you to change your strategies and link to other documents allows you",
    "start": "2566359",
    "end": "2571680"
  },
  {
    "text": "to be more flexible and grow your application in your API over time so linking is fundamental to scale ability",
    "start": "2571680",
    "end": "2578000"
  },
  {
    "text": "the more links you can reference or represent data with the better but the",
    "start": "2578000",
    "end": "2583119"
  },
  {
    "text": "tricky part is that this is kind of hard to do in Json there's nothing in the Json data format that supports the notion of a link um in XML and HTML they",
    "start": "2583119",
    "end": "2591000"
  },
  {
    "text": "have it via the xlink specification um and it's a whole I",
    "start": "2591000",
    "end": "2597040"
  },
  {
    "text": "think I don't know if it's an RFC I know it's a w3c standard but um there's a full spec for it Jason has nothing like",
    "start": "2597040",
    "end": "2603000"
  },
  {
    "text": "that so there's a a various number of competing representations that are out",
    "start": "2603000",
    "end": "2608440"
  },
  {
    "text": "there on on the net today and there's a whole bunch of ways to do it we're going",
    "start": "2608440",
    "end": "2613880"
  },
  {
    "text": "to talk about how we've done it here um there's no real winner in this space it's kind of still being flushed out we",
    "start": "2613880",
    "end": "2619480"
  },
  {
    "text": "think ours is particularly elegant and I'll explain why um so let's give you an",
    "start": "2619480",
    "end": "2625920"
  },
  {
    "text": "example so again it's kind of hard to see with the lighting but this is a particular instance resource you know I",
    "start": "2625920",
    "end": "2632599"
  },
  {
    "text": "want to get a particular account with a specific identifier and when I get that information back I'm going to have an HF",
    "start": "2632599",
    "end": "2640400"
  },
  {
    "text": "that points to that same resource maybe I have a given name a surname any number",
    "start": "2640400",
    "end": "2645520"
  },
  {
    "text": "of properties but if the account references its owning directory now I've got this",
    "start": "2645520",
    "end": "2652440"
  },
  {
    "text": "directory property what do I do how do I represent that information you know I",
    "start": "2652440",
    "end": "2657920"
  },
  {
    "text": "shouldn't necessarily just embed the directory object in its entirety how do I do that as a",
    "start": "2657920",
    "end": "2663200"
  },
  {
    "text": "link and the way we do it is we just as a property we represent that property as",
    "start": "2663200",
    "end": "2669839"
  },
  {
    "text": "a complex object so it's not a primitive and it's not a string but it itself is a Json object so a map and it has one",
    "start": "2669839",
    "end": "2677680"
  },
  {
    "text": "property at least initially and that's the arra property of the fully qualified URL to get to that",
    "start": "2677680",
    "end": "2684200"
  },
  {
    "text": "resource this is fairly elegant if you look at the XML specification they have",
    "start": "2684200",
    "end": "2691520"
  },
  {
    "text": "you know I'm sure you guys have seen this in a lot of places but you'll have maybe an anchor with a hre re equals",
    "start": "2691520",
    "end": "2697920"
  },
  {
    "text": "external or whatever right the real is is the attribute that represents the",
    "start": "2697920",
    "end": "2703319"
  },
  {
    "text": "relationship and in Json the relationship is already defined by the property name in the object so in this",
    "start": "2703319",
    "end": "2709880"
  },
  {
    "text": "case the HF is is of course what's specified but the real is the property",
    "start": "2709880",
    "end": "2715599"
  },
  {
    "text": "name of directory and so you're kind of leveraging Json inherent structure to",
    "start": "2715599",
    "end": "2722640"
  },
  {
    "text": "represent a relationship via a link which is pretty cool um this also gets even more",
    "start": "2722640",
    "end": "2730160"
  },
  {
    "text": "powerful in a little bit when we start talking about enti expansion or resource expansion and you'll see how that works",
    "start": "2730160",
    "end": "2736480"
  },
  {
    "text": "in a very nice and spiffy way shortly same thing with collections you",
    "start": "2736480",
    "end": "2743079"
  },
  {
    "text": "know same account object maybe I've got a set of groups that the account belongs to you can reference that as well as a",
    "start": "2743079",
    "end": "2749920"
  },
  {
    "text": "as a fully qualified URL via the H property but the point of this is that",
    "start": "2749920",
    "end": "2755920"
  },
  {
    "text": "Json objects in in a resource representation excuse me Json resource representations really have kind of four",
    "start": "2755920",
    "end": "2764079"
  },
  {
    "text": "primary things they have Primitives Properties or primitive properties they have string properties they have an hre",
    "start": "2764079",
    "end": "2772520"
  },
  {
    "text": "so you you have the location a globally unique location and they have references to other objects and those references",
    "start": "2772520",
    "end": "2780000"
  },
  {
    "text": "are represented as themselves complex",
    "start": "2780000",
    "end": "2784119"
  },
  {
    "text": "objects so why why is this particular format beneficial or",
    "start": "2785079",
    "end": "2790480"
  },
  {
    "text": "cool and I think it is because of something called reference expansion or",
    "start": "2790480",
    "end": "2795800"
  },
  {
    "text": "what we call reference expansion a lot of other people refer to this as entity",
    "start": "2795800",
    "end": "2801079"
  },
  {
    "text": "expansion or link expansion and it solves this particular",
    "start": "2801079",
    "end": "2808359"
  },
  {
    "text": "problem what if I want to execute a request and I want to get back an individual",
    "start": "2808559",
    "end": "2815040"
  },
  {
    "text": "account but I also want that individual accounts directory fully materialized I",
    "start": "2815040",
    "end": "2820280"
  },
  {
    "text": "don't want to have to execute two requests I want it all back in one because I know that whatever UI screen that I'm building at the time needs that",
    "start": "2820280",
    "end": "2826880"
  },
  {
    "text": "data for every single [Music] account and so in the model that we've",
    "start": "2826880",
    "end": "2832000"
  },
  {
    "text": "shown this far you have to execute two requests one to get the account then you look at the directory link and then you go pull the link but if you had the",
    "start": "2832000",
    "end": "2838319"
  },
  {
    "text": "ability to include it in the single response it'd be a lot more efficient for the client and so you can support",
    "start": "2838319",
    "end": "2845480"
  },
  {
    "text": "and expand query parameter that you specify on the resource URL so account",
    "start": "2845480",
    "end": "2851520"
  },
  {
    "text": "slid question mark expand equals directory and that's a directive to the server that says not only do I want you",
    "start": "2851520",
    "end": "2857920"
  },
  {
    "text": "to give me back the account object and all of its properties but I also want you to give me back its directory uh",
    "start": "2857920",
    "end": "2864040"
  },
  {
    "text": "reference fully expanded as well to give me all of its properties and so you've",
    "start": "2864040",
    "end": "2869920"
  },
  {
    "text": "you've expanded that reference or that link that's why they call it link expansion or reference expansion into",
    "start": "2869920",
    "end": "2875079"
  },
  {
    "text": "its fully materialized representation and now you now you have both of those",
    "start": "2875079",
    "end": "2880559"
  },
  {
    "text": "objects what's interesting about this is from a caching perspective in HTTP query",
    "start": "2880559",
    "end": "2885920"
  },
  {
    "text": "parameters are taken into account for caching rules and so while this gives",
    "start": "2885920",
    "end": "2891160"
  },
  {
    "text": "you back an account object and a fully materialized directory object it is considered a separate resource than slac",
    "start": "2891160",
    "end": "2898079"
  },
  {
    "text": "accounts slid so SL account slid question mark whatever is a separate resource in rest terminology and in for",
    "start": "2898079",
    "end": "2905160"
  },
  {
    "text": "caching semantics than the qualified URL without any query",
    "start": "2905160",
    "end": "2911400"
  },
  {
    "text": "parameters and so you can leverage us the great effect because caching can be set up or configured differently um",
    "start": "2911400",
    "end": "2919160"
  },
  {
    "text": "based on the client's needs or based on what the server mandates um but they are they are seen as two separate resources",
    "start": "2919160",
    "end": "2925680"
  },
  {
    "text": "even though in reality they're kind of one and its and its reference you know",
    "start": "2925680",
    "end": "2931960"
  },
  {
    "text": "together how many levels of nesting do you support how many levels of nesting",
    "start": "2935720",
    "end": "2940960"
  },
  {
    "text": "do you support that's the question it's it's totally up to you as a server side implementer so if you wanted to you",
    "start": "2940960",
    "end": "2947520"
  },
  {
    "text": "could have expand equals directory open well actually shows an example coming up but maybe open",
    "start": "2947520",
    "end": "2953359"
  },
  {
    "text": "parentheses expand equals you know groups you know what have you you know it's it's entirely up to you based on",
    "start": "2953359",
    "end": "2960280"
  },
  {
    "text": "the performance profile of your application and whether or not you want to support something like that naturally the the deeper you go in a hierarchy the",
    "start": "2960280",
    "end": "2966799"
  },
  {
    "text": "the higher performance penalty that's going to incur because you have to potentially hit multiple rows in in your whatever your data store or key Value",
    "start": "2966799",
    "end": "2973640"
  },
  {
    "text": "Store um so that's really up to you there's nothing that limits you from preventing that it's just it's up to",
    "start": "2973640",
    "end": "2979559"
  },
  {
    "text": "whether or not you want to allow it so",
    "start": "2979559",
    "end": "2983799"
  },
  {
    "text": "say so the question is is let's say I support an arbitrary you know number of",
    "start": "2986079",
    "end": "2991240"
  },
  {
    "text": "nesty levels up to say three how do I communicate that to the client um",
    "start": "2991240",
    "end": "2998040"
  },
  {
    "text": "um that is metadata associated with the link that would have to be encoded in",
    "start": "2998040",
    "end": "3003880"
  },
  {
    "text": "the the representation of the object so in this case um actually let me go back",
    "start": "3003880",
    "end": "3010760"
  },
  {
    "text": "to the other instance example so in this instance reference",
    "start": "3010760",
    "end": "3016559"
  },
  {
    "text": "right the accounts referencing the directory as a separate property in the directory maybe prefixed with an",
    "start": "3016559",
    "end": "3023119"
  },
  {
    "text": "underscore like I we like to use the underscore to represent these are metadata or processing directives that",
    "start": "3023119",
    "end": "3028559"
  },
  {
    "text": "are not part of the the core resource itself but you could have you know underscore levels equals 3 right and if",
    "start": "3028559",
    "end": "3036720"
  },
  {
    "text": "your media type specifies that as part of its parsing directives that it supports this then the client will know",
    "start": "3036720",
    "end": "3042400"
  },
  {
    "text": "that it can go down as as many as three levels deep so that kind of goes back to",
    "start": "3042400",
    "end": "3047599"
  },
  {
    "text": "why media types are so important in rest is because they give you the power and the flexibility to Define these rules",
    "start": "3047599",
    "end": "3053559"
  },
  {
    "text": "that might be perceived as ad hoc but but they can be well defined and clients",
    "start": "3053559",
    "end": "3058960"
  },
  {
    "text": "can operate or react to those rules that are in your media type specification if you don't have a media type",
    "start": "3058960",
    "end": "3065520"
  },
  {
    "text": "specification you essentially have to document this on a public API somewhere so whatever.com dooc API and then they",
    "start": "3065520",
    "end": "3072960"
  },
  {
    "text": "know they can do that but the media type is really the thing that encapsulates that information what's your recommendation",
    "start": "3072960",
    "end": "3079440"
  },
  {
    "text": "for wild cards for example if I didn't know that was a link under accounts and",
    "start": "3079440",
    "end": "3086599"
  },
  {
    "text": "so you can't really if you didn't know the director was part of you say director you say or or something right",
    "start": "3086599",
    "end": "3095599"
  },
  {
    "text": "so the question is is what if you didn't know that directory was under accounts yes um what if you wanted to say give me",
    "start": "3095599",
    "end": "3103079"
  },
  {
    "text": "this account and expand everything that's in oh give me this account and expand everything that's in it",
    "start": "3103079",
    "end": "3108520"
  },
  {
    "text": "ah um again it's up to you it's convention we would support that via the",
    "start": "3108520",
    "end": "3114079"
  },
  {
    "text": "asterisk um this you know it's a wild card so expand everything that you can and to us that means that would mean one",
    "start": "3114079",
    "end": "3120920"
  },
  {
    "text": "level deep not n levels",
    "start": "3120920",
    "end": "3124798"
  },
  {
    "text": "deep what name of the what I'm sorry name",
    "start": "3136920",
    "end": "3142440"
  },
  {
    "text": "ofour name of the property or name of the result resource oh resource so directory in this case is the name of",
    "start": "3142440",
    "end": "3149960"
  },
  {
    "text": "the property the value happens to be a resource right at the moment it's just a",
    "start": "3149960",
    "end": "3156440"
  },
  {
    "text": "link but when it comes to entity expansion yeah right it fully",
    "start": "3156440",
    "end": "3161920"
  },
  {
    "text": "materializes into the object and the reason why we believe that the href technique is particularly elegant is",
    "start": "3161920",
    "end": "3169040"
  },
  {
    "text": "because if you look at this versus what was on the previous screen all this is is it's just the same exact stuff with a",
    "start": "3169040",
    "end": "3174799"
  },
  {
    "text": "little bit of more little bit more data and the reason why that's really great for clients is that they don't have to do any weird checks in their code like",
    "start": "3174799",
    "end": "3182160"
  },
  {
    "text": "let me get the directory is it an object if it's an object does it have an HF property with you know or does it have",
    "start": "3182160",
    "end": "3188319"
  },
  {
    "text": "these other five properties it's either materialized or it's not materialized if it's not materialized it's a link if it's materialized it's it's fully there",
    "start": "3188319",
    "end": "3195720"
  },
  {
    "text": "right which really makes client processing trivially simple and there's no if El conditions",
    "start": "3195720",
    "end": "3203640"
  },
  {
    "text": "yes account so the question is what if the link has it what if the directory has a link back",
    "start": "3204000",
    "end": "3210799"
  },
  {
    "text": "to the account you know how do you deal with circular",
    "start": "3210799",
    "end": "3216040"
  },
  {
    "text": "dependencies um that's a good question it it's up to you if we had such a scenario in our API",
    "start": "3216319",
    "end": "3224319"
  },
  {
    "text": "we would just represent the HF of the account and not any additional",
    "start": "3224319",
    "end": "3229400"
  },
  {
    "text": "information or if somebody asked try to do that in an expansion query we would turn back a 400 error indicating it's a",
    "start": "3229400",
    "end": "3236720"
  },
  {
    "text": "client query error so the question is or the statement is is if you have this",
    "start": "3236720",
    "end": "3243319"
  },
  {
    "text": "this object with the expanded directory is a different resource at least according to caching semantics than the",
    "start": "3243319",
    "end": "3249720"
  },
  {
    "text": "account without the directory expanded and if that's the case and I use a head request to find out if the data is fresh",
    "start": "3249720",
    "end": "3256640"
  },
  {
    "text": "or changed it's a lot harder to calculate that result um and yes you're",
    "start": "3256640",
    "end": "3263280"
  },
  {
    "text": "right it is harder for the client to figure out of this data which of the data is fresh and which of it's not that",
    "start": "3263280",
    "end": "3270200"
  },
  {
    "text": "being said I mean to me that's a client parsing technique that you could use",
    "start": "3270200",
    "end": "3275720"
  },
  {
    "text": "rest states that this is a different resource and if you want to find out if this has changed then you can you can up",
    "start": "3275720",
    "end": "3282160"
  },
  {
    "text": "or you can return the most recent representation and you can actually do a um we'll talk about e tags and caching",
    "start": "3282160",
    "end": "3288880"
  },
  {
    "text": "but you can use e tags to alleviate that problem and and to tell the cash server hey is this changed any part of it and",
    "start": "3288880",
    "end": "3296119"
  },
  {
    "text": "the cash server will say yes or no or actually the server will say yes or no and the cach can reflect that but yeah e",
    "start": "3296119",
    "end": "3302559"
  },
  {
    "text": "tags and caching would address that problem it's just not as",
    "start": "3302559",
    "end": "3307640"
  },
  {
    "text": "nice addresses the content that's being said not necessarily your idea of resource on the say that again I think",
    "start": "3307640",
    "end": "3314559"
  },
  {
    "text": "the confusion of this is the E tag addresses the content that's been returned appr request not the deeper",
    "start": "3314559",
    "end": "3320880"
  },
  {
    "text": "meaning that's on the and that's I where this get confusing yeah so the E tag represents the content of what's been",
    "start": "3320880",
    "end": "3327440"
  },
  {
    "text": "returned so there's if you don't expand directory whether it's changed or not change eag because it's not there",
    "start": "3327440",
    "end": "3333720"
  },
  {
    "text": "correct because it's a different resource representation and therefore that eag value is not not relevant for that representation expand",
    "start": "3333720",
    "end": "3342799"
  },
  {
    "text": "exactly so it's cool that we can do this and we can expand information but again",
    "start": "3343160",
    "end": "3348520"
  },
  {
    "text": "if you have a significant quantity of data and you want to restrict it or you",
    "start": "3348520",
    "end": "3353920"
  },
  {
    "text": "want to reduce the amount of data traffic or maybe your clients do instead of expanding data and adding more you",
    "start": "3353920",
    "end": "3359359"
  },
  {
    "text": "can actually do partial representations as well and so by doing that in this",
    "start": "3359359",
    "end": "3364599"
  },
  {
    "text": "example we're getting a particular account and Via query directive we're using Fields equals given name",
    "start": "3364599",
    "end": "3370839"
  },
  {
    "text": "surname directory and then in parenthesis name and what this really means is I want you to give me back the",
    "start": "3370839",
    "end": "3377400"
  },
  {
    "text": "account object but all I want is three properties one is the given name the other is a Ser name I also want the",
    "start": "3377400",
    "end": "3384280"
  },
  {
    "text": "directory back with its name and material materialized I don't want anything else in it though and this",
    "start": "3384280",
    "end": "3389839"
  },
  {
    "text": "gives developers consumers of your API a lot of control into the user interfaces",
    "start": "3389839",
    "end": "3396640"
  },
  {
    "text": "they might be building that consumes this information um reports that they might",
    "start": "3396640",
    "end": "3402119"
  },
  {
    "text": "be generating you know information that they want to get from your service without necessarily having to pull back the entire tree and it allows them to",
    "start": "3402119",
    "end": "3409240"
  },
  {
    "text": "determine how much information to pull or not so again that's up to you whether or not you want to allow this kind of",
    "start": "3409240",
    "end": "3415039"
  },
  {
    "text": "thing um if it's worth the engineering effort to your team to support this in the API I",
    "start": "3415039",
    "end": "3421480"
  },
  {
    "text": "advocate it because it will reduce your bandwidth costs um and if you're serving millions of requests that will add up so",
    "start": "3421480",
    "end": "3428440"
  },
  {
    "text": "it's a neat technique it's the sort of the parallel to entity expansion it's really kind of um an",
    "start": "3428440",
    "end": "3436000"
  },
  {
    "text": "minimalization but this is also a separate resource than the other resources because of the",
    "start": "3436000",
    "end": "3442520"
  },
  {
    "text": "URL sometimes I've seen the fields done like that as like a mask where you",
    "start": "3442520",
    "end": "3449280"
  },
  {
    "text": "API so the the statement was sometimes he's seen these things represented as a mask or you can represent what field you",
    "start": "3449640",
    "end": "3457039"
  },
  {
    "text": "want based on the mask value right while that's a valid technique I don't think it's particularly user",
    "start": "3457039",
    "end": "3463400"
  },
  {
    "text": "friendly cuz you have no clue how to construct The Mask easily it's a lot easier especially you know for the I",
    "start": "3463400",
    "end": "3470240"
  },
  {
    "text": "don't know some kid coming right out of high school who just taught himself yes two rest two days ago he's not going to know what a mask is and so my belief is",
    "start": "3470240",
    "end": "3478880"
  },
  {
    "text": "that the simpler you can make this even if it might be a slightly more verose the better it is for your for adoption of your clients um it's just an opinion",
    "start": "3478880",
    "end": "3487640"
  },
  {
    "text": "it's it's not hard in fact law so whatever you guys feel comfortable with but um that that's just how I feel about",
    "start": "3487640",
    "end": "3494680"
  },
  {
    "text": "it yeah so the question is can you post this because in in a chain of posts you might want this information to change in",
    "start": "3494680",
    "end": "3500839"
  },
  {
    "text": "a transactional manner right and kind of keep that data safe AB yeah and the answer is 100% absolutely Ely you can",
    "start": "3500839",
    "end": "3506640"
  },
  {
    "text": "totally do that in rest and the reason why is post is completely up to the server's definition right you're You'",
    "start": "3506640",
    "end": "3513319"
  },
  {
    "text": "sort of bypast any particular restrictions with the the rest Paradigm because you can do whatever the heck you",
    "start": "3513319",
    "end": "3519160"
  },
  {
    "text": "want with a post anything you want how do you deal with camel casing in the URL it's probably not the best",
    "start": "3519160",
    "end": "3524920"
  },
  {
    "text": "way to do camel casing or it's probably not the best way to represent a URL why is that because U if you have like a",
    "start": "3524920",
    "end": "3532520"
  },
  {
    "text": "aing HTV server which is basically converting all to do uh small cases oh",
    "start": "3532520",
    "end": "3539039"
  },
  {
    "text": "yeah you couldn't do that um that being said yeah you cannot use camel casing if",
    "start": "3539039",
    "end": "3544640"
  },
  {
    "text": "you force lower casing from your H from your web server",
    "start": "3544640",
    "end": "3550119"
  },
  {
    "text": "um I view that as maybe a potential need sometimes maybe to go to underscores um",
    "start": "3550119",
    "end": "3556680"
  },
  {
    "text": "I view that as a an unfortunate consequence of previous decisions HTTP",
    "start": "3556680",
    "end": "3562079"
  },
  {
    "text": "by definition is a case sensitive protocol so I feel that you should leverage that whenever possible that",
    "start": "3562079",
    "end": "3567960"
  },
  {
    "text": "being said there's no there's no law that says these can't be underscores or or repres or with dashes so if you can't",
    "start": "3567960",
    "end": "3573599"
  },
  {
    "text": "do that that's totally fine the the the impetus there is on you as a development team to to indicate",
    "start": "3573599",
    "end": "3580319"
  },
  {
    "text": "this in documentation saying that our properties are camell case but these",
    "start": "3580319",
    "end": "3585799"
  },
  {
    "text": "these directives are not um so you either make your properties not camel cased or you have documentation around",
    "start": "3585799",
    "end": "3592520"
  },
  {
    "text": "it just makes it a little harder for integration guess that's not consistency yeah as long as you have consistency",
    "start": "3592520",
    "end": "3598359"
  },
  {
    "text": "that's more important than almost anything assuming it doesn't break you know well-known conventions or",
    "start": "3598359",
    "end": "3605079"
  },
  {
    "text": "specifications pagination so pagination is important because if you have a collection that",
    "start": "3605720",
    "end": "3612400"
  },
  {
    "text": "has maybe hundreds of thousands of resources children resources you don't necessarily want to return all 100,000",
    "start": "3612400",
    "end": "3618920"
  },
  {
    "text": "of them at the same time um it's not necessarily good for performance or scalability to do that so it'd be nice",
    "start": "3618920",
    "end": "3625359"
  },
  {
    "text": "to kind of chunk up those results and send them back to the client so there's",
    "start": "3625359",
    "end": "3631039"
  },
  {
    "text": "a number of ways that I've seen in Fairly popular API to represent or support pagination um the ones that seem",
    "start": "3631039",
    "end": "3638119"
  },
  {
    "text": "to be the most well adopted is by supporting query parameters that specify an offset and a limit um I've seen these",
    "start": "3638119",
    "end": "3645280"
  },
  {
    "text": "referenced as index I've seen them referenced as you know underscores in in the query parameters but most apis that",
    "start": "3645280",
    "end": "3652359"
  },
  {
    "text": "I've seen use the actual terms offset and limit for better For Worse use star",
    "start": "3652359",
    "end": "3658280"
  },
  {
    "text": "some use what star star star oh start yeah start is is totally valid as well",
    "start": "3658280",
    "end": "3664839"
  },
  {
    "text": "um although like like I said for for me when we were designing our API we decided to stick to this convention just",
    "start": "3664839",
    "end": "3670359"
  },
  {
    "text": "because we saw them we saw more companies and more apis using this particular taxonomy um so we just didn't",
    "start": "3670359",
    "end": "3677920"
  },
  {
    "text": "want to rock the boat and we kept it the same so the question is is if I'm",
    "start": "3677920",
    "end": "3683039"
  },
  {
    "text": "sharding my data right I've got it partitioned across multiple locations um how do I support pagination",
    "start": "3683039",
    "end": "3689599"
  },
  {
    "text": "on the client side right and the answer is that the client should not be aware",
    "start": "3689599",
    "end": "3694680"
  },
  {
    "text": "of your sharding techniques or your strategies at all like it should specify",
    "start": "3694680",
    "end": "3699880"
  },
  {
    "text": "the pagination data as as necessary and then your query or excuse me your",
    "start": "3699880",
    "end": "3705880"
  },
  {
    "text": "backend implementation interprets it to go out and maybe hit individual shards as necessary based on the query data",
    "start": "3705880",
    "end": "3712839"
  },
  {
    "text": "that being said and I'll show you in in example a resource representation the actual offset and",
    "start": "3712839",
    "end": "3719599"
  },
  {
    "text": "limit parameters shouldn't necessarily be known to clients directly right",
    "start": "3719599",
    "end": "3726119"
  },
  {
    "text": "they're kind of really directives for your quering needs um they can be",
    "start": "3726119",
    "end": "3731880"
  },
  {
    "text": "specified by clients but you know with the H OAS kind of",
    "start": "3731880",
    "end": "3736960"
  },
  {
    "text": "Paradigm how is a client supposed to know about offset and limit they kind of don't but they might know about URLs and",
    "start": "3736960",
    "end": "3743640"
  },
  {
    "text": "so you might want to represent the different pag as URLs that they could access directly instead of actually",
    "start": "3743640",
    "end": "3748839"
  },
  {
    "text": "having to specify or parse a particular URL and then add these query parameters but I'll show an example of that in a",
    "start": "3748839",
    "end": "3755279"
  },
  {
    "text": "minute but um in this example you know I'm doing a query for all applications",
    "start": "3755279",
    "end": "3761440"
  },
  {
    "text": "and I want to start on the 50th application and I want to receive no more than",
    "start": "3761440",
    "end": "3767520"
  },
  {
    "text": "25 and so I'm telling you know the index is 50 that's my start location I don't",
    "start": "3767520",
    "end": "3772880"
  },
  {
    "text": "you know my limit the total quantity I want returned is the total to of 25 items so just give me that list of",
    "start": "3772880",
    "end": "3780279"
  },
  {
    "text": "25 the server it's the server's discretion as to you know whether or not",
    "start": "3780279",
    "end": "3785599"
  },
  {
    "text": "25 is returned or not maybe maybe the server says nobody's allowed to return or receive more than 20 at a time and so",
    "start": "3785599",
    "end": "3792799"
  },
  {
    "text": "the server only has to return 20 cuz you know if this was 500,000 you know the server's not just going to look at that",
    "start": "3792799",
    "end": "3798920"
  },
  {
    "text": "number blindly and return all of those data that data so you should have some some assertions in your code to to keep",
    "start": "3798920",
    "end": "3805799"
  },
  {
    "text": "keep this [Music] same so here's an example of what a",
    "start": "3805799",
    "end": "3811880"
  },
  {
    "text": "result might look like look like if I'm getting all of the account or all of the groups assigned to a particular account",
    "start": "3811880",
    "end": "3820000"
  },
  {
    "text": "and so this is a collection resource um you guys might kind of be interested to",
    "start": "3820000",
    "end": "3826880"
  },
  {
    "text": "know why I call these things collection resources and not resource collections they are collections of things and of",
    "start": "3826880",
    "end": "3832799"
  },
  {
    "text": "children but this data and this represent a in its own is a resource by itself so yes it's a collection but this",
    "start": "3832799",
    "end": "3840079"
  },
  {
    "text": "is a resource representation so that's why I call these things collection resources because they are resource like",
    "start": "3840079",
    "end": "3846160"
  },
  {
    "text": "any other um so in this example we've got the href which points to the the current data set the offset is zero",
    "start": "3846160",
    "end": "3854240"
  },
  {
    "text": "limits 25 and instead of a client having to Parts those or to to read those",
    "start": "3854240",
    "end": "3859599"
  },
  {
    "text": "values and construct URLs they can if they want to or if it's documented and they want to go through",
    "start": "3859599",
    "end": "3865160"
  },
  {
    "text": "the effort or they can reference the links that I've specified in the result",
    "start": "3865160",
    "end": "3870720"
  },
  {
    "text": "so there might be a first link that tells you know what what the first page of the data is previous in this case is",
    "start": "3870720",
    "end": "3877680"
  },
  {
    "text": "null because they're at the beginning the start of the uh the data set next is the next page last is the last page uh",
    "start": "3877680",
    "end": "3885039"
  },
  {
    "text": "available to them and then the items represent the actual elements in that",
    "start": "3885039",
    "end": "3890440"
  },
  {
    "text": "collection for that particular page and you'll notice that I mean I've sort of short-handed it but all links to",
    "start": "3890440",
    "end": "3898599"
  },
  {
    "text": "other resources you can use Query expansion or entity expansion resource expansion if",
    "start": "3898599",
    "end": "3906079"
  },
  {
    "text": "you want these bits of data to be populated so they don't have to you know get a a result set of 20 and then go",
    "start": "3906079",
    "end": "3912640"
  },
  {
    "text": "execute 20 individual requests but this is sort of adhering to",
    "start": "3912640",
    "end": "3918880"
  },
  {
    "text": "the hyper media kind of Paradigm for for rest and that it's a resource that links",
    "start": "3918880",
    "end": "3925240"
  },
  {
    "text": "to other resources you should represent the links and then expand on them when",
    "start": "3925240",
    "end": "3930640"
  },
  {
    "text": "necessary and that's really for scalability and resiliency to change over time because maybe one day you",
    "start": "3930640",
    "end": "3936039"
  },
  {
    "text": "don't want to include all the resources well then everyone who was consuming that you know their requests are going to fail if you change that so it's",
    "start": "3936039",
    "end": "3942200"
  },
  {
    "text": "better to start with the core referencing mechanism and then expand out or allow expansion of data as",
    "start": "3942200",
    "end": "3948799"
  },
  {
    "text": "clients request it this one's kind of interesting many",
    "start": "3948799",
    "end": "3955000"
  },
  {
    "text": "to many this is sort of something that trips up a lot of people uh we knocked our heads on it at storm path for quite",
    "start": "3955000",
    "end": "3960839"
  },
  {
    "text": "a bit because we want to keep this intuitive and make it useful for people",
    "start": "3960839",
    "end": "3966559"
  },
  {
    "text": "without being confusing so in storm paths data model u",
    "start": "3966559",
    "end": "3972680"
  },
  {
    "text": "a group can be mapped to accounts and vice versa so a group can naturally have many accounts and account can",
    "start": "3972680",
    "end": "3978839"
  },
  {
    "text": "participate or belong to many groups and what we do is we represent each one of",
    "start": "3978839",
    "end": "3983880"
  },
  {
    "text": "those references as its own resource and we Define that as a group",
    "start": "3983880",
    "end": "3989559"
  },
  {
    "text": "membership and we do that primarily because of caching reasons um and the ability to represent things",
    "start": "3989559",
    "end": "3997119"
  },
  {
    "text": "atomically you know is a is a membership owned by an account or is owned by a",
    "start": "3997119",
    "end": "4002480"
  },
  {
    "text": "group it's not really owned by either and it's not part of its nested properties um I mean part of its",
    "start": "4002480",
    "end": "4009400"
  },
  {
    "text": "primitive properties so it really should be represented as its own resource in rest terminology or at least according",
    "start": "4009400",
    "end": "4016400"
  },
  {
    "text": "to rest Paradigm um so we represent that as a group membership and here's an example of what one might look like so",
    "start": "4016400",
    "end": "4023680"
  },
  {
    "text": "if you do a get on a group membership with a particular membership ID you will get the resource back like",
    "start": "4023680",
    "end": "4031240"
  },
  {
    "text": "everything else that has an href and then by default it just has two links one to the account and one to the",
    "start": "4031240",
    "end": "4037599"
  },
  {
    "text": "group and that's really good from again from a scalability perspective because the concept of of of the reference",
    "start": "4037599",
    "end": "4045000"
  },
  {
    "text": "doesn't really change over time but you can do things that are really uh",
    "start": "4045000",
    "end": "4050039"
  },
  {
    "text": "beneficial over time like add new properties maybe I wanted to add the time stamp of when this",
    "start": "4050039",
    "end": "4056920"
  },
  {
    "text": "Association occurred who is responsible for it um the last time somebody looked",
    "start": "4056920",
    "end": "4062920"
  },
  {
    "text": "at it um there's all sorts of additional information you could append to this resource",
    "start": "4062920",
    "end": "4067960"
  },
  {
    "text": "representation um so by starting out this way you you allow all of those use",
    "start": "4067960",
    "end": "4073200"
  },
  {
    "text": "cases without breaking clients you can always add to your representations um without breaking",
    "start": "4073200",
    "end": "4079799"
  },
  {
    "text": "existing clients it's when you change properties and the data types that's when it starts",
    "start": "4079799",
    "end": "4085279"
  },
  {
    "text": "to break things which is not a good not a good thing yes so the question is is why do you feel that this is useful when",
    "start": "4085279",
    "end": "4091200"
  },
  {
    "text": "you could just have via an href a link from the account directly to the groups",
    "start": "4091200",
    "end": "4097278"
  },
  {
    "text": "or from a group directly to its accounts and my answer is that you can do both and we actually do do both sometimes all",
    "start": "4097279",
    "end": "4104600"
  },
  {
    "text": "you care about is what what groups are associated with that particular account so just give me the groups I don't care",
    "start": "4104600",
    "end": "4109960"
  },
  {
    "text": "about the memberships or any other metadata Associated and so on our on our",
    "start": "4109960",
    "end": "4116310"
  },
  {
    "text": "[Music] apis you'll see when you get back an account object in addition to the groups",
    "start": "4116310",
    "end": "4121600"
  },
  {
    "text": "reference you'll also have a link to the group memberships where you can actually get the concrete references if you want",
    "start": "4121600",
    "end": "4127880"
  },
  {
    "text": "them so it's really about providing options to your consumer the API",
    "start": "4127880",
    "end": "4133000"
  },
  {
    "text": "consumers to what they find valuable some people won't care about this information other people will and you'll",
    "start": "4133000",
    "end": "4138199"
  },
  {
    "text": "never know what they need so if you keep things coar grained and have links to that data you let the client decide",
    "start": "4138199",
    "end": "4144920"
  },
  {
    "text": "what's important to them and you don't have to change your API",
    "start": "4144920",
    "end": "4151199"
  },
  {
    "text": "so yes so in this we have a unique or an individual account that has group memberships in addition well you don't",
    "start": "4151199",
    "end": "4157480"
  },
  {
    "text": "see it but you would have a groups pop uh reference here as well as the directory",
    "start": "4157480",
    "end": "4164318"
  },
  {
    "text": "reference errors we haven't talked about errors",
    "start": "4164359",
    "end": "4169440"
  },
  {
    "text": "yet this is pretty pretty important for rest API if something goes wrong you",
    "start": "4169440",
    "end": "4175560"
  },
  {
    "text": "want to be as descriptive as humanly possible and give as much information as you possibly can to whoever that",
    "start": "4175560",
    "end": "4181798"
  },
  {
    "text": "consumer is well within reason like there's certain obviously security information you wouldn't want to expose",
    "start": "4181799",
    "end": "4187679"
  },
  {
    "text": "you know like oh their password is incorrect so keep trying until you get it right kind of thing um but you want",
    "start": "4187679",
    "end": "4194080"
  },
  {
    "text": "within reason you want to be as descriptive as possible and the reason why again developers are your customers",
    "start": "4194080",
    "end": "4199560"
  },
  {
    "text": "they're the ones trying to integrate with your API and and they in turn will make you successful based on adoption so",
    "start": "4199560",
    "end": "4207040"
  },
  {
    "text": "if an error occurs and you can tell them immediately or rather all they have to do is look at the output they can",
    "start": "4207040",
    "end": "4212760"
  },
  {
    "text": "immediately know what's wrong and then go fix their code this say saves you potentially a support request it helps",
    "start": "4212760",
    "end": "4218360"
  },
  {
    "text": "them not go back to the the website for documentation which reduces you know cognitive friction the easier it is for",
    "start": "4218360",
    "end": "4224440"
  },
  {
    "text": "them to integrate the better better and the happier your customers will be so this is how we like to represent errors",
    "start": "4224440",
    "end": "4232719"
  },
  {
    "text": "at storm path and we can't take credit for this really we kind of took a lot of",
    "start": "4232719",
    "end": "4239560"
  },
  {
    "text": "um guidance from the folks at twilio for how they do their API and I think they",
    "start": "4239560",
    "end": "4245040"
  },
  {
    "text": "kind of spearheaded this approach but it's it's awesome and I I definitely recommend that everybody follow it as",
    "start": "4245040",
    "end": "4250719"
  },
  {
    "text": "well um but there's a at its core there's five properties that are pretty important for any error message um in",
    "start": "4250719",
    "end": "4258480"
  },
  {
    "text": "this example you don't see the body but we're submitting a post to the/ directories endpoint because we want to",
    "start": "4258480",
    "end": "4263960"
  },
  {
    "text": "create a brand new directory and in the the request I've actually specified a name of a directory",
    "start": "4263960",
    "end": "4270600"
  },
  {
    "text": "that already exists and in our system for your tenant all of your directory names have to be globally unique across",
    "start": "4270600",
    "end": "4276840"
  },
  {
    "text": "your tenant so if I've created directory one and then I try to create it again",
    "start": "4276840",
    "end": "4281880"
  },
  {
    "text": "you would get back a 409 which is HP status code for conflict um and we use 409 conflict to indicate a",
    "start": "4281880",
    "end": "4289920"
  },
  {
    "text": "concurr not a concurrency but",
    "start": "4289920",
    "end": "4293600"
  },
  {
    "text": "um um I forgot the constraint thank you constraint exceptions are represented as",
    "start": "4295239",
    "end": "4301760"
  },
  {
    "text": "409 conflicts and in this case you know we've represented the HTTP status code",
    "start": "4301760",
    "end": "4307239"
  },
  {
    "text": "we recommend and Advocate and I think the majority of people do this in their apis but they always use a standard",
    "start": "4307239",
    "end": "4313280"
  },
  {
    "text": "status code from http there are 17 I think standard HTTP status",
    "start": "4313280",
    "end": "4321199"
  },
  {
    "text": "codes um and there are I think there's only five or six",
    "start": "4321199",
    "end": "4326880"
  },
  {
    "text": "server messages for error codes um no sorry 17 client codes so the four do 4xx",
    "start": "4326880",
    "end": "4334120"
  },
  {
    "text": "range and I think there's five or six server side uh error codes but you always want to at least start off and",
    "start": "4334120",
    "end": "4340520"
  },
  {
    "text": "and set the response to be one of those standard codes because the vast majority of H clients understand them already and",
    "start": "4340520",
    "end": "4347719"
  },
  {
    "text": "it's better for to reduce friction so you want to leverage what's already in place so we repeat that status code in",
    "start": "4347719",
    "end": "4354120"
  },
  {
    "text": "the actual body as a property of status but we also have an additional",
    "start": "4354120",
    "end": "4359320"
  },
  {
    "text": "thing called code which serves a similar purpose to status",
    "start": "4359320",
    "end": "4364400"
  },
  {
    "text": "but it can be more descriptive so for example um because there's only",
    "start": "4364400",
    "end": "4370199"
  },
  {
    "text": "17 client side error codes defined in the HTTP specification you might have any number of scenarios which go beyond",
    "start": "4370199",
    "end": "4378360"
  },
  {
    "text": "um and describe a lot more in depth as to why something failed and so the generic 409 might not be good enough so",
    "start": "4378360",
    "end": "4385679"
  },
  {
    "text": "you might come up with your own set of codes that they can that clients can look at in addition to the HTTP status",
    "start": "4385679",
    "end": "4390880"
  },
  {
    "text": "code and in this case you know we're saying error code 40924 is that the",
    "start": "4390880",
    "end": "4397679"
  },
  {
    "text": "there's another resource that already exists so we're saying hey there's a directory that already exists you're not allowed to create a directory with that",
    "start": "4397679",
    "end": "4404080"
  },
  {
    "text": "same name and we also represent a message that in",
    "start": "4404080",
    "end": "4409120"
  },
  {
    "text": "a very clean and easy to understand format can be shown directly to an application end user so what I mean by",
    "start": "4409120",
    "end": "4416040"
  },
  {
    "text": "that is if you're a customer of our API and you're building a user interface",
    "start": "4416040",
    "end": "4421159"
  },
  {
    "text": "that you want to show to your customer your end users you can take this message property and relay it all the way to the",
    "start": "4421159",
    "end": "4426679"
  },
  {
    "text": "end user as like a little info popup or whatever and we do that because it's a lot easier for you as a customer to just",
    "start": "4426679",
    "end": "4433120"
  },
  {
    "text": "relay that information instead of having to translated appropriately so it allows you to get off the ground a lot quicker",
    "start": "4433120",
    "end": "4438440"
  },
  {
    "text": "it's a lot more convenient for you we also have a developer message that will give you a much more detailed developer",
    "start": "4438440",
    "end": "4445520"
  },
  {
    "text": "level reason for why the thing failed and you can look and a consumer",
    "start": "4445520",
    "end": "4450560"
  },
  {
    "text": "of this API can look at this information and it will give them a lot more um context as to why something",
    "start": "4450560",
    "end": "4456840"
  },
  {
    "text": "failed and how they might be able to go ahead and fix the problem and finally there's a more info property um that",
    "start": "4456840",
    "end": "4464080"
  },
  {
    "text": "references a full documentation page the beauty of this is that you can represent this information in whatever detail that",
    "start": "4464080",
    "end": "4471159"
  },
  {
    "text": "you want and Link it to forums and whatever you want to do right you have a lot of freedom in how that page is",
    "start": "4471159",
    "end": "4476880"
  },
  {
    "text": "represented and so that can give you a lot more information and context to help your end users right the name of the",
    "start": "4476880",
    "end": "4482920"
  },
  {
    "text": "name of the game for this whole thing is make your end users happy if something goes wrong and they'll be a lot happier",
    "start": "4482920",
    "end": "4488040"
  },
  {
    "text": "in [Music] return Yes the message is included an adoption",
    "start": "4488040",
    "end": "4496800"
  },
  {
    "text": "API is included is a developer message included yeah in your",
    "start": "4496800",
    "end": "4503840"
  },
  {
    "text": "error yes so if this error did occur you this would be the exact the exact",
    "start": "4503840",
    "end": "4510320"
  },
  {
    "text": "payload of what you would get back from your from your your rest client you could take that message property and",
    "start": "4510320",
    "end": "4516400"
  },
  {
    "text": "relay that directly to your end user you would never want to do that with the developer message cuz most people wouldn't understand that that aren't",
    "start": "4516400",
    "end": "4522040"
  },
  {
    "text": "developers but that it could be a security hole if you give",
    "start": "4522040",
    "end": "4527800"
  },
  {
    "text": "away information that shouldn't be given away so for example storm path were primarily a security service we'll never",
    "start": "4527800",
    "end": "4534400"
  },
  {
    "text": "provide information in the message property that could be ConEd as a security risk right because of us as a",
    "start": "4534400",
    "end": "4539440"
  },
  {
    "text": "security company it's our job to make sure that we we uh Define those things appropriately and to not put you at risk",
    "start": "4539440",
    "end": "4546159"
  },
  {
    "text": "so I would recommend the same thing to your customers um but you always want to give them as much information when",
    "start": "4546159",
    "end": "4551520"
  },
  {
    "text": "feasible right you don't want to give away or security holes or indicate security holes or anything like that so",
    "start": "4551520",
    "end": "4557520"
  },
  {
    "text": "uh just be prudent about what you represent but try to give as much info as [Music]",
    "start": "4557520",
    "end": "4563920"
  },
  {
    "text": "possible IDs we haven't talked about these they've sort of been implied along the way but IDs primarily should be",
    "start": "4563920",
    "end": "4571280"
  },
  {
    "text": "opaque so you saw in some of the examples we had slap SL applications A1",
    "start": "4571280",
    "end": "4577560"
  },
  {
    "text": "B2 whatever just some kind of random string those are globally unique IDs in",
    "start": "4577560",
    "end": "4582960"
  },
  {
    "text": "our system but rest client shouldn't should really ever know about them because the ID that the rest client",
    "start": "4582960",
    "end": "4588320"
  },
  {
    "text": "really cares about is the URL or the hre property so when you're Building Systems",
    "start": "4588320",
    "end": "4594080"
  },
  {
    "text": "you should have these that can be publicly exposed right to your end users",
    "start": "4594080",
    "end": "4599480"
  },
  {
    "text": "um that are safe to do so but it's not something that the end user should have to know how to use or",
    "start": "4599480",
    "end": "4605280"
  },
  {
    "text": "reference you should really just give them an hre that they can just reference as a get or a post in order for them to",
    "start": "4605280",
    "end": "4612400"
  },
  {
    "text": "uh to interact with your API um when it comes to using IDs or setting",
    "start": "4612400",
    "end": "4617760"
  },
  {
    "text": "up IDs for resources that go in NF we recommend that you avoid sequential numbers so a lot of times there's",
    "start": "4617760",
    "end": "4623920"
  },
  {
    "text": "relational databases that have unique or primary Keys it's typically not really a good idea to expose those if you can",
    "start": "4623920",
    "end": "4630280"
  },
  {
    "text": "avoid it um it could be a security risk maybe they just increment the number and see what happens you should be",
    "start": "4630280",
    "end": "4636320"
  },
  {
    "text": "protecting your apis against things like that but um more importantly from a performance perspective there's a lot of",
    "start": "4636320",
    "end": "4642719"
  },
  {
    "text": "contention if you're in a cluster distributed environment let's say you have an API and you're in Amazon West",
    "start": "4642719",
    "end": "4649360"
  },
  {
    "text": "and Amazon East and maybe Dublin Ireland if you did have sequential numbers you're going to have to synchronize that across all your servers",
    "start": "4649360",
    "end": "4655960"
  },
  {
    "text": "or your clusters and your server and that can be a point of contention so it's better to generate IDs based on",
    "start": "4655960",
    "end": "4661560"
  },
  {
    "text": "strong random algorithms so uids are good candidates there's something that",
    "start": "4661560",
    "end": "4666760"
  },
  {
    "text": "we use internally that I call URL 64 and it's basically a a strong securely",
    "start": "4666760",
    "end": "4672760"
  },
  {
    "text": "randomly generated number that's basically 64 encoded and then I swap the URL unfriendly characters out with",
    "start": "4672760",
    "end": "4680320"
  },
  {
    "text": "things that are URL friendly but it's basically B 64 encoding um and that",
    "start": "4680320",
    "end": "4685639"
  },
  {
    "text": "allows them to be used in URLs and they're also securely randomly generated numbers so the the chance of collision",
    "start": "4685639",
    "end": "4691360"
  },
  {
    "text": "is very low what's",
    "start": "4691360",
    "end": "4697600"
  },
  {
    "text": "that how long are the the IDS that are generated and our",
    "start": "4697600",
    "end": "4703760"
  },
  {
    "text": "system they a they're 26 characters long so they're 128 bits 16 bytes yes we",
    "start": "4703760",
    "end": "4714120"
  },
  {
    "text": "should probably question okay yeah all right yeah well we're almost done so so method overrides",
    "start": "4714120",
    "end": "4722360"
  },
  {
    "text": "HTTP method overrides how do you override a method if your client does not support anything other than get or",
    "start": "4722360",
    "end": "4730280"
  },
  {
    "text": "post you can add a query parameter we we specify underscore method equals the",
    "start": "4730280",
    "end": "4736159"
  },
  {
    "text": "oper the name of the method and that allows them to um allows the server to",
    "start": "4736159",
    "end": "4742040"
  },
  {
    "text": "execute that particular method even though they're they're not specifying it as part of the request and this is very",
    "start": "4742040",
    "end": "4748400"
  },
  {
    "text": "useful for older or Legacy HTTP clients that may not be able to do it you can also do it inside of a browser if you're",
    "start": "4748400",
    "end": "4754719"
  },
  {
    "text": "testing um so that's kind of nice it should always be a post because remember their um posts are not admittin and so",
    "start": "4754719",
    "end": "4763960"
  },
  {
    "text": "you can do things is a server that uh might need to change resource",
    "start": "4763960",
    "end": "4770560"
  },
  {
    "text": "State caching and concurrency control um we we'll we'll fly through this a little",
    "start": "4771000",
    "end": "4776840"
  },
  {
    "text": "bit but there's this thing in um HTP called an e tag and it can be used for caching and what an eag really is is",
    "start": "4776840",
    "end": "4783320"
  },
  {
    "text": "it's really a version number for that particular resource and so every time that resource changes your e tag for",
    "start": "4783320",
    "end": "4790760"
  },
  {
    "text": "that resource can change and that's really good for performance because clients so if an initial response the client",
    "start": "4790760",
    "end": "4797639"
  },
  {
    "text": "says or excuse me the server says here's a re here's a representation of a resource and its version number its e",
    "start": "4797639",
    "end": "4803480"
  },
  {
    "text": "tag is this the client can then later on in in a header say if none match and",
    "start": "4803480",
    "end": "4809239"
  },
  {
    "text": "specify that exact same e tag if the state on the server has not changed the server can respond 304 not modified and",
    "start": "4809239",
    "end": "4816400"
  },
  {
    "text": "it doesn't have to return a body so it's a lot more efficient and caching servers can send these requests to the origin",
    "start": "4816400",
    "end": "4823360"
  },
  {
    "text": "server and try to either determine if things have changed or invalidate caches",
    "start": "4823360",
    "end": "4828880"
  },
  {
    "text": "it's very good for performance if you can support these kind of things um it can be difficult if you only support",
    "start": "4828880",
    "end": "4835280"
  },
  {
    "text": "https like we do because we're Security Service um caching servers are bypassed",
    "start": "4835280",
    "end": "4840560"
  },
  {
    "text": "when you use SSL Communications but um we go through a whole host of things for caching on our end to make sure that API",
    "start": "4840560",
    "end": "4846960"
  },
  {
    "text": "calls are fast but if you can use non-https communication uh this",
    "start": "4846960",
    "end": "4852760"
  },
  {
    "text": "technique is particularly useful to uh to reduce load security we'll talk",
    "start": "4852760",
    "end": "4859600"
  },
  {
    "text": "about that very briefly scalable systems um especially",
    "start": "4859600",
    "end": "4866840"
  },
  {
    "text": "larger scale systems try to reduce sessions or eliminate them in their entirety if they can and so the less",
    "start": "4866840",
    "end": "4873000"
  },
  {
    "text": "server side state that you have to maintain and manage the better for scalability for performance so try to",
    "start": "4873000",
    "end": "4878440"
  },
  {
    "text": "try to reduce or eliminate their use whenever possible um to keep your system",
    "start": "4878440",
    "end": "4883840"
  },
  {
    "text": "stateless authorization should be done based on the content of the resource not a URL so",
    "start": "4883840",
    "end": "4891480"
  },
  {
    "text": "if you want to say that only people from this particular group are allowed to access this resource do the check based",
    "start": "4891480",
    "end": "4896679"
  },
  {
    "text": "on the resource or properties in the resource not necessarily on URLs because URLs can change over time you might um",
    "start": "4896679",
    "end": "4903880"
  },
  {
    "text": "redirect to a different URL you might specify you know links to other URLs but",
    "start": "4903880",
    "end": "4910199"
  },
  {
    "text": "URLs are more fragile than the resource identifier or the resource cont content",
    "start": "4910199",
    "end": "4915400"
  },
  {
    "text": "and so if you can do authorization kind of leave the URLs out of it if you can",
    "start": "4915400",
    "end": "4921400"
  },
  {
    "text": "when it comes to authenticating end users who are calling your API my biggest recommendation is to use an",
    "start": "4921400",
    "end": "4926600"
  },
  {
    "text": "existing well-known well standard protocol um like ooth 1.0a ooth 2 if you",
    "start": "4926600",
    "end": "4934040"
  },
  {
    "text": "really have to you know HP basic but only over SSL",
    "start": "4934040",
    "end": "4939320"
  },
  {
    "text": "um given the world that I live in I am particularly sensitive to these kind of things um basic over SSL is not even",
    "start": "4939320",
    "end": "4946600"
  },
  {
    "text": "really that great because there are potential ways of of exposing information unnecessarily o 1.0a and o 2",
    "start": "4946600",
    "end": "4954800"
  },
  {
    "text": "are interesting because everybody thinks o 2 is the next greatest biggest best thing o 2 is actually less secure than o",
    "start": "4954800",
    "end": "4962480"
  },
  {
    "text": "1.0a this o 1.0a uses digest authentication which is a much more",
    "start": "4962480",
    "end": "4968000"
  },
  {
    "text": "secure mechanism than the exchanges of oo 2 so I think it's somewhat of a",
    "start": "4968000",
    "end": "4974960"
  },
  {
    "text": "misnomer um that people are are claiming this is the next better protocol but",
    "start": "4974960",
    "end": "4980719"
  },
  {
    "text": "either of them is better than than kind of rolling your own however if you know what you're doing it's okay to create a",
    "start": "4980719",
    "end": "4987679"
  },
  {
    "text": "custom scheme the caveat with a custom scheme is that you really should only",
    "start": "4987679",
    "end": "4993360"
  },
  {
    "text": "use it if you provide client SDK for your users to call into your API so for",
    "start": "4993360",
    "end": "4999000"
  },
  {
    "text": "example at storm path we use a digest based authentication scheme that is",
    "start": "4999000",
    "end": "5005040"
  },
  {
    "text": "probably the most secure thing that we've ever seen um we we've done a lot of analysis on it the problem is is that",
    "start": "5005040",
    "end": "5010880"
  },
  {
    "text": "it's non-standard so we'll support it for authentication based on the sdks",
    "start": "5010880",
    "end": "5016320"
  },
  {
    "text": "that we write so our sdks that we publish for free they're open source um when they call into US they'll use this",
    "start": "5016320",
    "end": "5021960"
  },
  {
    "text": "custom authentication scheme um because it's more secure than than the defaults of oo 2 but if somebody doesn't have",
    "start": "5021960",
    "end": "5030120"
  },
  {
    "text": "those sdks they still should be able to call into your API so all two is a good um um is a good alternative if you don't",
    "start": "5030120",
    "end": "5036800"
  },
  {
    "text": "want to use a custom scheme and then finally we will finish up with",
    "start": "5036800",
    "end": "5042800"
  },
  {
    "text": "maintenance as this API is deployed and you have to maintain it over time um",
    "start": "5042800",
    "end": "5048320"
  },
  {
    "text": "leverage HTTP redirects quite a bit if you need to move a resource or uh change",
    "start": "5048320",
    "end": "5053880"
  },
  {
    "text": "how it's interacted with HTP redirects are awesome you can put the client or redirect them to wherever they need to",
    "start": "5053880",
    "end": "5059560"
  },
  {
    "text": "go to access the new location and so that allows you over time to either URLs",
    "start": "5059560",
    "end": "5065800"
  },
  {
    "text": "or deprecate them so they're no longer used another technique is you create an abstraction layer or you create",
    "start": "5065800",
    "end": "5072360"
  },
  {
    "text": "additional end points that act as abstraction layers so if you need to",
    "start": "5072360",
    "end": "5077960"
  },
  {
    "text": "maybe I don't know maybe the internal representation of the count fundamentally changes in our system but",
    "start": "5077960",
    "end": "5083280"
  },
  {
    "text": "you don't want to break existing rest clients you could have an abstraction layer that you know an endpoint",
    "start": "5083280",
    "end": "5089440"
  },
  {
    "text": "processes and and serves up the the account resources it always has been served but under the hood maybe We're",
    "start": "5089440",
    "end": "5095600"
  },
  {
    "text": "translating the data based on a different Source somewhere else but that's completely hidden away from the",
    "start": "5095600",
    "end": "5101040"
  },
  {
    "text": "API callers and so use abstraction layers in your code base to minimize change or impact of change on end users",
    "start": "5101040",
    "end": "5109040"
  },
  {
    "text": "and then finally use well-defined custom media types when you can get around to it they are really good for the reasons",
    "start": "5109040",
    "end": "5116000"
  },
  {
    "text": "that Fielding is specified and they are very beneficial um again it's just",
    "start": "5116000",
    "end": "5121360"
  },
  {
    "text": "there's work associated with it but if you can do it it is is probably the way to be most resilient to change over time",
    "start": "5121360",
    "end": "5127840"
  },
  {
    "text": "with custom media types that is everything that I have for you guys",
    "start": "5127840",
    "end": "5133239"
  },
  {
    "text": "um thanks for your time I am totally happy to answer questions if you if you have them",
    "start": "5133239",
    "end": "5140090"
  },
  {
    "text": "[Applause]",
    "start": "5140090",
    "end": "5145570"
  },
  {
    "text": "[Music]",
    "start": "5145570",
    "end": "5151199"
  },
  {
    "text": "thanks",
    "start": "5151199",
    "end": "5154199"
  }
]