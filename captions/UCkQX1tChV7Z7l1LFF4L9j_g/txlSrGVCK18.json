[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "so there's a certain irony that the chairs have just arrived for the panel that kind of illustrates some of the",
    "start": "3889",
    "end": "13700"
  },
  {
    "text": "inherent challenges in a micro service architecture where I'm messages arrive late so welcome to my talk on on",
    "start": "13700",
    "end": "22040"
  },
  {
    "text": "maintaining data consistency in a micro service architecture which sort of follows on quite nicely from Randy's",
    "start": "22040",
    "end": "28670"
  },
  {
    "text": "talk where he you know provided a good overview of the challenges that you're faced dealing with data in in a micro",
    "start": "28670",
    "end": "36320"
  },
  {
    "start": "36000",
    "end": "89000"
  },
  {
    "text": "service architecture and it really turns out that you know dealing with code splitting that up is that's the easy",
    "start": "36320",
    "end": "42950"
  },
  {
    "text": "part dealing with the data which now gets distributed amongst a set of",
    "start": "42950",
    "end": "47989"
  },
  {
    "text": "databases that ends up being the real challenge and so as Randi Illustrated you know there's problems with querying",
    "start": "47989",
    "end": "54260"
  },
  {
    "text": "and there's patterns for that API composition and CQRS and then there's also problems with",
    "start": "54260",
    "end": "60260"
  },
  {
    "text": "maintaining data consistency so that's what I'm going to talk about and then as Randy mentioned I'm going to describe a",
    "start": "60260",
    "end": "67780"
  },
  {
    "text": "pattern for maintaining consistency in a micro service architecture known as a",
    "start": "67780",
    "end": "73100"
  },
  {
    "text": "saga it turns out it's kind of challenging you know this is one of the",
    "start": "73100",
    "end": "78590"
  },
  {
    "text": "downsides of using the micro service architecture is ensuring data",
    "start": "78590",
    "end": "84520"
  },
  {
    "text": "consistency but you know in a lot of cases it's a good idea but before I talk",
    "start": "84520",
    "end": "90500"
  },
  {
    "start": "89000",
    "end": "166000"
  },
  {
    "text": "about that a little bit about me if you don't know me then you know I got my start in programming 30 odd years ago",
    "start": "90500",
    "end": "97250"
  },
  {
    "text": "building Lisp systems so runtimes compilers tools and and etc you know",
    "start": "97250",
    "end": "103640"
  },
  {
    "text": "eventually programmed in Java wrote the book pojos in action which was all about spring and hibernate which you know 13",
    "start": "103640",
    "end": "110900"
  },
  {
    "text": "odd years ago were revolutionising Enterprise Java development and then ice then back in 2007 started tinkering",
    "start": "110900",
    "end": "119060"
  },
  {
    "text": "around with this really obscure service known as ec2 from an online bookstore",
    "start": "119060",
    "end": "126680"
  },
  {
    "text": "kinda we know how that turned out well I got so excited by the concept of being",
    "start": "126680",
    "end": "133160"
  },
  {
    "text": "able to provision servers with with api's that I created the original Cloud Foundry so that was a Java pass",
    "start": "133160",
    "end": "139640"
  },
  {
    "text": "for deploying you know Tomcat war-war files on ec2 sprint up a bunch of ec2",
    "start": "139640",
    "end": "146420"
  },
  {
    "text": "instances and then that was acquired by SpringSource back in 2009 right before",
    "start": "146420",
    "end": "152540"
  },
  {
    "text": "it was acquired by vmware so I ended up spending a bunch of four and a half years of SpringSource VMware and then",
    "start": "152540",
    "end": "159200"
  },
  {
    "text": "part of pivotal when we were sort of somewhat ejected out and in to create pivotal but that was a while ago now and",
    "start": "159200",
    "end": "167200"
  },
  {
    "start": "166000",
    "end": "204000"
  },
  {
    "text": "so for the past four years I've been pretty much focused on the micro service",
    "start": "167200",
    "end": "172459"
  },
  {
    "text": "architecture which actually grew out of my experiences building the first cloud foundry that was a a monolith and we had",
    "start": "172459",
    "end": "180410"
  },
  {
    "text": "issues with that even though we were only a two-person team and then you know",
    "start": "180410",
    "end": "185450"
  },
  {
    "text": "that prompted my interest in micro services and and there was a lot of",
    "start": "185450",
    "end": "190700"
  },
  {
    "text": "synergy between that and and the new Cloud Foundry that I was sort of involved with evangelizing so I just",
    "start": "190700",
    "end": "196819"
  },
  {
    "text": "kind of carried on and so I've just been past four and a half years doing consulting and training around the micro",
    "start": "196819",
    "end": "202459"
  },
  {
    "text": "service architecture also have a startup creating a platform that's built or that",
    "start": "202459",
    "end": "208340"
  },
  {
    "start": "204000",
    "end": "219000"
  },
  {
    "text": "were creating a platform for developing event-driven business applications and the motivation really is to solve this",
    "start": "208340",
    "end": "215329"
  },
  {
    "text": "distributed data management challenges and then I also had forgotten how traumatic it was writing a book so I'm",
    "start": "215329",
    "end": "222799"
  },
  {
    "start": "219000",
    "end": "250000"
  },
  {
    "text": "doing it again and it really is traumatic but I'm",
    "start": "222799",
    "end": "228889"
  },
  {
    "text": "almost I'm getting close to being done hopefully and you can get an early access version of that from manning and",
    "start": "228889",
    "end": "235459"
  },
  {
    "text": "then if you want to know more go to learn micro services dot IO so that will point you to a whole bunch of resources",
    "start": "235459",
    "end": "241879"
  },
  {
    "text": "including micro services dot IO that's a collection of patterns that I think many",
    "start": "241879",
    "end": "247489"
  },
  {
    "text": "of you have visited ok so the agenda is going to talk about why acid is not an",
    "start": "247489",
    "end": "254269"
  },
  {
    "start": "250000",
    "end": "287000"
  },
  {
    "text": "option at least between services within a service you can certainly use acid transactions just not between them",
    "start": "254269",
    "end": "261260"
  },
  {
    "text": "easily talk about the saga pattern and you know introduce the idea talk about",
    "start": "261260",
    "end": "268159"
  },
  {
    "text": "some of the challenges and then I'm going to describe some implement Haitian issues like how do you how do you make sagas go and then how do the",
    "start": "268159",
    "end": "275119"
  },
  {
    "text": "services that participate in a saga communicate so that's the idea so you",
    "start": "275119",
    "end": "282859"
  },
  {
    "text": "know we're gonna begin with the obligatory summary of what the Micra service architecture is so it's an",
    "start": "282859",
    "end": "289549"
  },
  {
    "start": "287000",
    "end": "400000"
  },
  {
    "text": "architectural style that structures an application as a set of loosely coupled",
    "start": "289549",
    "end": "295309"
  },
  {
    "text": "services so instead of building a big monolith that's sort of difficult to deploy or develop and deploy you build a",
    "start": "295309",
    "end": "303199"
  },
  {
    "text": "set of small applications or services that are loosely coupled and the whole",
    "start": "303199",
    "end": "308569"
  },
  {
    "text": "point of doing this really is to enable the continuous delivery or specifically the continuous development of large",
    "start": "308569",
    "end": "315799"
  },
  {
    "text": "complex applications and the micro service our architecture supports that",
    "start": "315799",
    "end": "320959"
  },
  {
    "text": "in two ways first it gives you the testability and the deploy ability you",
    "start": "320959",
    "end": "326029"
  },
  {
    "text": "need in order to do continuous delivery and deployment you know the services are",
    "start": "326029",
    "end": "331939"
  },
  {
    "text": "individually easier to test they can be deployed independently so that's good",
    "start": "331939",
    "end": "337399"
  },
  {
    "text": "and also this architecture supports the notion of having small autonomous teams",
    "start": "337399",
    "end": "342589"
  },
  {
    "text": "you know you have a small team they own one or more services and they they have",
    "start": "342589",
    "end": "348589"
  },
  {
    "text": "all of the skills in order to go from requirements into production and if",
    "start": "348589",
    "end": "354259"
  },
  {
    "text": "they're with service with this architecture they can do that without coordinating with any other teams except",
    "start": "354259",
    "end": "361429"
  },
  {
    "text": "when teams have to agree on API is because their services need to communicate so that that to me is the",
    "start": "361429",
    "end": "367519"
  },
  {
    "text": "essence of the micro service architecture so when you apply that to say sort of it I got this fake",
    "start": "367519",
    "end": "373610"
  },
  {
    "text": "application and online store you end up with a system that looks like this you got a bunch of services each service has",
    "start": "373610",
    "end": "380509"
  },
  {
    "text": "its own database as you're going to see thats essential for loose coupling they're fronted by an api gateway say",
    "start": "380509",
    "end": "387979"
  },
  {
    "text": "that provides a uniform interface basically a facade into the set of",
    "start": "387979",
    "end": "393379"
  },
  {
    "text": "services and they're consumed by various clients so what I'm really going to",
    "start": "393379",
    "end": "398899"
  },
  {
    "text": "focus on is this whole notion of having private data and I just want to stress",
    "start": "398899",
    "end": "404149"
  },
  {
    "start": "400000",
    "end": "430000"
  },
  {
    "text": "that you know having a private what I'm calling a database doesn't mean a private database server you're not now",
    "start": "404149",
    "end": "411080"
  },
  {
    "text": "giving 10x as much money to Larry Ellison for all that for extra Oracle licenses they can still be sharing the",
    "start": "411080",
    "end": "418700"
  },
  {
    "text": "same database server they're just going to have their own database schema so",
    "start": "418700",
    "end": "424370"
  },
  {
    "text": "it's isolated private you know encapsulated data that's the key point and that's really important to insure",
    "start": "424370",
    "end": "432230"
  },
  {
    "text": "loose coupling because if services access one another's data or one",
    "start": "432230",
    "end": "437990"
  },
  {
    "text": "another's tables that would that would get in the way of development if I'm",
    "start": "437990",
    "end": "443300"
  },
  {
    "text": "working on the order service and I wanted to change the order order schema and it was being accessed by the",
    "start": "443300",
    "end": "450620"
  },
  {
    "text": "customer service and 15 other teams that means I'd have to arrange 15 other",
    "start": "450620",
    "end": "456320"
  },
  {
    "text": "meetings to schedule that schema change that gets in the way of continuous",
    "start": "456320",
    "end": "461420"
  },
  {
    "text": "delivery and deployment so by each service having its own private and",
    "start": "461420",
    "end": "466910"
  },
  {
    "text": "capsulated data that's only accessible indirectly through that services API we",
    "start": "466910",
    "end": "474050"
  },
  {
    "text": "ensure that we're free to change effectively the implementation details of our service without any coordination",
    "start": "474050",
    "end": "481720"
  },
  {
    "text": "so that that's the motivation so in this",
    "start": "481720",
    "end": "486830"
  },
  {
    "text": "example customer service has the cuss order so the customer service has the customer database the order sir and the",
    "start": "486830",
    "end": "493760"
  },
  {
    "text": "order service has the order database and they communicate by our api's could be",
    "start": "493760",
    "end": "498980"
  },
  {
    "text": "rest but as you're going to see that it's in fact going to be messaging but that then creates problems how do we",
    "start": "498980",
    "end": "504860"
  },
  {
    "start": "501000",
    "end": "530000"
  },
  {
    "text": "maintain data consistency you know this is the problem how do we implement transactions that now span services and",
    "start": "504860",
    "end": "511850"
  },
  {
    "text": "this is really important in order to enforce invariants so in the case of this example with orders and customers",
    "start": "511850",
    "end": "519219"
  },
  {
    "text": "customers have a credit limit and we must enforce this credit limit at all",
    "start": "519220",
    "end": "525620"
  },
  {
    "text": "times otherwise we've sort of violated some important business rule in a",
    "start": "525620",
    "end": "531200"
  },
  {
    "start": "530000",
    "end": "580000"
  },
  {
    "text": "monolithic system that's super easy you begin a transaction you find the existing orders you find the credit",
    "start": "531200",
    "end": "538240"
  },
  {
    "text": "do some calculation if there's sufficient credit create a new order commit the transaction and if you have",
    "start": "538240",
    "end": "544570"
  },
  {
    "text": "so if you're running at a sufficient isolation level this asset transaction will guarantee that if there were",
    "start": "544570",
    "end": "552459"
  },
  {
    "text": "simultaneous attempts to access to create orders for the same customer that",
    "start": "552459",
    "end": "557680"
  },
  {
    "text": "business rule is enforced but in this model orders have belonged to one service customers are in another service",
    "start": "557680",
    "end": "565089"
  },
  {
    "text": "you can't write a database transaction that looked like this and then if you did you'd have to have some form of",
    "start": "565089",
    "end": "571839"
  },
  {
    "text": "distributed transaction and you know two-phase commit XA that kind of",
    "start": "571839",
    "end": "577720"
  },
  {
    "text": "technology and basically as was mentioned in Randy's talk people just",
    "start": "577720",
    "end": "583029"
  },
  {
    "start": "580000",
    "end": "619000"
  },
  {
    "text": "don't do this kind of thing anymore right it is simply not fashionable or not practical in order to do this and",
    "start": "583029",
    "end": "591100"
  },
  {
    "text": "all of our cool mod intent there I mean it's a bunch of like technical issues why two-phase commit is problematic you",
    "start": "591100",
    "end": "597910"
  },
  {
    "text": "know the cool new technology generally does not support it right and then",
    "start": "597910",
    "end": "603310"
  },
  {
    "text": "you've got the cap theorem that says you basically have to choose between a consistency and availability and people",
    "start": "603310",
    "end": "609490"
  },
  {
    "text": "prefer to be available so there goes consistency so so that that's sort of a",
    "start": "609490",
    "end": "617020"
  },
  {
    "text": "problem so we kind of have to kind of we're in a micro service architecture we're giving up on our regular acid",
    "start": "617020",
    "end": "624190"
  },
  {
    "start": "619000",
    "end": "660000"
  },
  {
    "text": "model and and someone at eBay coined the term base basically available soft state",
    "start": "624190",
    "end": "630610"
  },
  {
    "text": "eventually consistent which sort of describes this new transaction model",
    "start": "630610",
    "end": "636339"
  },
  {
    "text": "interesting later on I'm going to actually describe how sagas are actually a CD they just don't give you the I but",
    "start": "636339",
    "end": "643570"
  },
  {
    "text": "that's kind of another acronym but bass sounds cool so so we can't use two-phase",
    "start": "643570",
    "end": "651910"
  },
  {
    "text": "commit to enforce this credit limit so what do we do so that's where this concept of a saga is really useful and",
    "start": "651910",
    "end": "660399"
  },
  {
    "start": "660000",
    "end": "976000"
  },
  {
    "text": "that comes from a 1987 paper so yes they had computers back then just didn't",
    "start": "660399",
    "end": "669970"
  },
  {
    "text": "start with the web and or anyway it's a it's sort of an adaptation of this saga principle and",
    "start": "669970",
    "end": "677559"
  },
  {
    "text": "there the idea was instead of having long transactions that hold on to locks you break them up into a sequence of",
    "start": "677559",
    "end": "684279"
  },
  {
    "text": "short transactions and each one commits at each stage so that's the general idea",
    "start": "684279",
    "end": "690160"
  },
  {
    "text": "so it sort of looks like this so instead of having one big transaction that spans",
    "start": "690160",
    "end": "695679"
  },
  {
    "text": "all of the services you have a series of local transactions one in each service",
    "start": "695679",
    "end": "701619"
  },
  {
    "text": "and they're actually strung together using some form of messaging or events",
    "start": "701619",
    "end": "708059"
  },
  {
    "text": "so one service does something publishes a message that triggers something in",
    "start": "708059",
    "end": "713170"
  },
  {
    "text": "another service and so it goes on until the Saga completes so in the correct",
    "start": "713170",
    "end": "718300"
  },
  {
    "text": "case of creating an order it looks something like this request comes in to create an order it will create the order",
    "start": "718300",
    "end": "725139"
  },
  {
    "text": "service creates an order in this pending state so someone can actually fight look",
    "start": "725139",
    "end": "730420"
  },
  {
    "text": "up the status of the order so it's kind of created it just hasn't been verified",
    "start": "730420",
    "end": "735509"
  },
  {
    "text": "and then another transaction occurs in the customer service to attempt to",
    "start": "735509",
    "end": "740860"
  },
  {
    "text": "reserve credit and then this assuming that is successful another transaction",
    "start": "740860",
    "end": "746980"
  },
  {
    "text": "will occur in the customers in the order service to approve the order so we've",
    "start": "746980",
    "end": "752829"
  },
  {
    "text": "got a series of three local transactions in order to create an order and verify",
    "start": "752829",
    "end": "760509"
  },
  {
    "text": "it or reserve credit so on the height on the surface this sort of sounds and it",
    "start": "760509",
    "end": "765910"
  },
  {
    "text": "sounds fairly straightforward and you know diet and in some ways it is but there are some tricky issues that you",
    "start": "765910",
    "end": "772929"
  },
  {
    "text": "have to deal with so one is you know imagine you could be five steps into a",
    "start": "772929",
    "end": "778449"
  },
  {
    "text": "saga and you've decided that you cannot proceed because a business rule will be",
    "start": "778449",
    "end": "783790"
  },
  {
    "text": "violated well you have to undo the preceding four steps in an asset",
    "start": "783790",
    "end": "789069"
  },
  {
    "text": "transaction that would be trivial you just execute a rollback statement and it's as if those updates have never",
    "start": "789069",
    "end": "794709"
  },
  {
    "text": "happen in a saga you have to explicitly code this you've got to write what are",
    "start": "794709",
    "end": "802209"
  },
  {
    "text": "known as compensating transactions to undo what you did before so conceptually then a",
    "start": "802209",
    "end": "808390"
  },
  {
    "text": "saga looks like this it's a sequence of four transactions t1 t2 t3 and so on",
    "start": "808390",
    "end": "815260"
  },
  {
    "text": "each one of those T transactions has a corresponding C transaction c1 c2 and so",
    "start": "815260",
    "end": "823180"
  },
  {
    "text": "on the undoes what it did so in this model if say imagine we execute t1",
    "start": "823180",
    "end": "829540"
  },
  {
    "text": "that's committed then we execute attempt to execute t2 that fails we then have to",
    "start": "829540",
    "end": "836920"
  },
  {
    "text": "execute c1 to undo what t1 did so it would go T 1 T 2 C and c1 and that all",
    "start": "836920",
    "end": "846220"
  },
  {
    "text": "has to be kind of coordinated and sequenced and made made reliable because",
    "start": "846220",
    "end": "851410"
  },
  {
    "text": "you know we want to ensure that either all of the T's execute or all of the T's",
    "start": "851410",
    "end": "857620"
  },
  {
    "text": "that were executed had their corresponding C transaction executed to",
    "start": "857620",
    "end": "863100"
  },
  {
    "text": "undo what was done so it's kind of tricky in the case of creating order",
    "start": "863100",
    "end": "869610"
  },
  {
    "text": "creating orders the compensating transaction is actually to reject the order if if you can't reserve credit so",
    "start": "869610",
    "end": "877899"
  },
  {
    "text": "so that's one complication but it's sort of a matter of programming to just get",
    "start": "877899",
    "end": "882940"
  },
  {
    "text": "that right and it's not too difficult what's a little more interesting is now",
    "start": "882940",
    "end": "888329"
  },
  {
    "text": "what was previously sort of a synchronous transaction has now become",
    "start": "888329",
    "end": "893860"
  },
  {
    "text": "an asynchronous operation so we've got our synchronous REST API triggering an",
    "start": "893860",
    "end": "899500"
  },
  {
    "text": "asynchronous saga and so the issue is it's like well hey when do we send back",
    "start": "899500",
    "end": "904870"
  },
  {
    "text": "a request so I send back a response to the request and there's sort of two",
    "start": "904870",
    "end": "911140"
  },
  {
    "text": "options one you could actually the service could actually wait until the saga completes though that's good",
    "start": "911140",
    "end": "918820"
  },
  {
    "text": "because the response could spessard specify the outcome of that saga the",
    "start": "918820",
    "end": "924310"
  },
  {
    "text": "order was approved the order was rejected it would be bad because you're",
    "start": "924310",
    "end": "929800"
  },
  {
    "text": "sort of waiting on all of those services to sort of respond and it kind of",
    "start": "929800",
    "end": "935020"
  },
  {
    "text": "impacts the availability of that particular API so it's actually nicer to sort of",
    "start": "935020",
    "end": "941620"
  },
  {
    "text": "introduce some asynchronicity into the API so you so the service can send back",
    "start": "941620",
    "end": "947380"
  },
  {
    "text": "a response immediately saying while I've received your request to create an order",
    "start": "947380",
    "end": "952660"
  },
  {
    "text": "and I'm thinking about it you know that downside is the client has to them poll",
    "start": "952660",
    "end": "959139"
  },
  {
    "text": "to see whether that order has been placed so that's nice though because it",
    "start": "959139",
    "end": "965589"
  },
  {
    "text": "does improve availability no one really has to kind of be up for the entire time",
    "start": "965589",
    "end": "970829"
  },
  {
    "text": "because the message broker will guarantee that messages will eventually be be processed so the API then changes",
    "start": "970829",
    "end": "978880"
  },
  {
    "start": "976000",
    "end": "990000"
  },
  {
    "text": "right where create order just says well here's the order ID and check back later by calling get order if you want to know",
    "start": "978880",
    "end": "986529"
  },
  {
    "text": "whether the order has been approved or rejected this doesn't necessarily impact",
    "start": "986529",
    "end": "992319"
  },
  {
    "start": "990000",
    "end": "1047000"
  },
  {
    "text": "the outcome of kind of doesn't impact",
    "start": "992319",
    "end": "997389"
  },
  {
    "text": "the user experience though because the UI like you know you have a bunch of JavaScript running in the browser it can",
    "start": "997389",
    "end": "1004860"
  },
  {
    "text": "actually hide this asynchronicity from the user you know it's like when you place a credit card in a dialog box that",
    "start": "1004860",
    "end": "1012029"
  },
  {
    "text": "pops up saying don't hit the back button right you do it slicker than that but",
    "start": "1012029",
    "end": "1020269"
  },
  {
    "text": "but in general the jar you know the JavaScript in your UI can actually hide the polling and so on and you know that",
    "start": "1020269",
    "end": "1027720"
  },
  {
    "text": "the server could even push the notification of approval or rejection down to the UI so you get a pretty",
    "start": "1027720",
    "end": "1035100"
  },
  {
    "text": "respondent responsive UI so so the API",
    "start": "1035100",
    "end": "1040168"
  },
  {
    "text": "is different the user experience does not have to change but then there's this really tricky issue which is you don't",
    "start": "1040169",
    "end": "1049080"
  },
  {
    "start": "1047000",
    "end": "1094000"
  },
  {
    "text": "actually have any isolation so you know you go back to you know acid right the I is isolation well there's not any you",
    "start": "1049080",
    "end": "1056790"
  },
  {
    "text": "don't have that anymore because each step of a saga is a local transaction",
    "start": "1056790",
    "end": "1062909"
  },
  {
    "text": "that commits its changes so you know we've got these two from the perspective",
    "start": "1062909",
    "end": "1069299"
  },
  {
    "text": "of the sort of the order service we've got these two transactions right and then you know another request could",
    "start": "1069299",
    "end": "1076289"
  },
  {
    "text": "come in to cancel their order and that's",
    "start": "1076289",
    "end": "1081779"
  },
  {
    "text": "kind of interesting now we've got this situation where which we never had before where the the users requesting",
    "start": "1081779",
    "end": "1089909"
  },
  {
    "text": "that we cancel this order in a pending state and that's kind of a little strange because this create order sagar",
    "start": "1089909",
    "end": "1097259"
  },
  {
    "start": "1094000",
    "end": "1222000"
  },
  {
    "text": "is still in the middle of sort of processing it so how do we handle that",
    "start": "1097259",
    "end": "1104309"
  },
  {
    "text": "right so one is you could just say are the orders pending you can't cancel it right now so that that would be sort of",
    "start": "1104309",
    "end": "1110399"
  },
  {
    "text": "a poor user experience maybe you could interrupt the the order saga somehow set",
    "start": "1110399",
    "end": "1118499"
  },
  {
    "text": "of create order saga somehow set a flag that saying well you were in the middle",
    "start": "1118499",
    "end": "1124499"
  },
  {
    "text": "of validating it but it's but the users requested that it be cancelled so you",
    "start": "1124499",
    "end": "1131639"
  },
  {
    "text": "could set a flag and that could trigger the that could cause the create order",
    "start": "1131639",
    "end": "1137129"
  },
  {
    "text": "saga to rollback you know that that's not bad but then it does mean that well",
    "start": "1137129",
    "end": "1143340"
  },
  {
    "text": "perhaps the create order saga it needs to know a bit more about the cancel order saga than you'd otherwise want it",
    "start": "1143340",
    "end": "1149940"
  },
  {
    "text": "to and then another option which is kind of interesting is that the cancel order",
    "start": "1149940",
    "end": "1155490"
  },
  {
    "text": "saga could wait for the create order saga to be completed though that",
    "start": "1155490",
    "end": "1161340"
  },
  {
    "text": "suspiciously sounds like distributed locking but maybe that's okay",
    "start": "1161340",
    "end": "1168299"
  },
  {
    "text": "because that that's sort of kinda like have you got this object domain object it's in the middle of being worked on by",
    "start": "1168299",
    "end": "1174029"
  },
  {
    "text": "a saga it's kind of nice to wait for that other saga to complete before",
    "start": "1174029",
    "end": "1179429"
  },
  {
    "text": "trying to perform another operation on it it's kind of like reminiscent of the actor model where you sort of you got a",
    "start": "1179429",
    "end": "1186029"
  },
  {
    "text": "mailbox that where if the if the actors in a particular state that the messages",
    "start": "1186029",
    "end": "1191369"
  },
  {
    "text": "get stashed until the the actor returns to a state where it can process them",
    "start": "1191369",
    "end": "1197159"
  },
  {
    "text": "there's some kind of analogies there so there's some interesting design issues",
    "start": "1197159",
    "end": "1203519"
  },
  {
    "text": "that can arise in this create cancel order scenario from the lack of isolation and I sort of",
    "start": "1203519",
    "end": "1211479"
  },
  {
    "text": "trouble by this and now it's like looking around in the literature to find some sort of I don't know academic paper",
    "start": "1211479",
    "end": "1218529"
  },
  {
    "text": "to X to tell me what was going wrong here right and then I found this paper back from 1998 so not quite that old it",
    "start": "1218529",
    "end": "1228789"
  },
  {
    "start": "1222000",
    "end": "1322000"
  },
  {
    "text": "was about they well they have what they call a true countermeasure transaction",
    "start": "1228789",
    "end": "1234009"
  },
  {
    "text": "model which I thought was a fantastic term and the idea is they have about a bunch of countermeasures to kind of deal",
    "start": "1234009",
    "end": "1241869"
  },
  {
    "text": "with the AI with the isolation anomalies the resulting from the lack of well from",
    "start": "1241869",
    "end": "1248139"
  },
  {
    "text": "the lack of isolation and they have an interesting way of describing sort of these long term transactions or sagas so",
    "start": "1248139",
    "end": "1255399"
  },
  {
    "text": "their model is one of these sagas is a series of compensate able transactions",
    "start": "1255399",
    "end": "1260889"
  },
  {
    "text": "so things that can be undone then they have this interesting notion of a pivot",
    "start": "1260889",
    "end": "1266019"
  },
  {
    "text": "transaction which is something that can't be undone like it either has to work or be rolled back or if it commits",
    "start": "1266019",
    "end": "1274029"
  },
  {
    "text": "then that's like you're fully committed to this transaction which is kind of an",
    "start": "1274029",
    "end": "1279459"
  },
  {
    "text": "interesting like concept that I'm not sure applies in the in the model I'm presenting here and then but then once",
    "start": "1279459",
    "end": "1285999"
  },
  {
    "text": "you've committed you up this series of what they call retry herbal transactions",
    "start": "1285999",
    "end": "1291249"
  },
  {
    "text": "that are just things that you can do sort of asynchronously after the pivot",
    "start": "1291249",
    "end": "1296739"
  },
  {
    "text": "transaction is committed and that could be like arranging to send out emails",
    "start": "1296739",
    "end": "1301769"
  },
  {
    "text": "which is kind of intro sort of an interesting way of making a distinction between things that can that can fail",
    "start": "1301769",
    "end": "1309339"
  },
  {
    "text": "and need to be undone versus things that will just can just be done and will",
    "start": "1309339",
    "end": "1314469"
  },
  {
    "text": "never fail for business reasons so it",
    "start": "1314469",
    "end": "1320259"
  },
  {
    "text": "was kind of thought-provoking so in their mind sagas are actually a CD so",
    "start": "1320259",
    "end": "1327219"
  },
  {
    "start": "1322000",
    "end": "1462000"
  },
  {
    "text": "they're atomic in the sense that all of the Ford transactions will be executed",
    "start": "1327219",
    "end": "1333609"
  },
  {
    "text": "or or they will all be compensated so I thought that was which is a little different perhaps",
    "start": "1333609",
    "end": "1339309"
  },
  {
    "text": "from some of the definitions of atomicity so it doesn't appear as one thing but there is this guarantee that",
    "start": "1339309",
    "end": "1346090"
  },
  {
    "text": "all of it will happen or or all of it or none of it will happen effectively",
    "start": "1346090",
    "end": "1351850"
  },
  {
    "text": "because of the compensating transactions it's also consistent because you have",
    "start": "1351850",
    "end": "1357629"
  },
  {
    "text": "referential integrity within a service because of referent referential",
    "start": "1357629",
    "end": "1363519"
  },
  {
    "text": "integrity constraints in that database but if you want and then referential",
    "start": "1363519",
    "end": "1368620"
  },
  {
    "text": "integrity across services is handled by the application that came up in Randy's",
    "start": "1368620",
    "end": "1374799"
  },
  {
    "text": "talk and it's also durable as well because things do get committed locally",
    "start": "1374799",
    "end": "1380080"
  },
  {
    "text": "they get put in a message broker that guarantees that that is durable as well but what's missing is this I and that",
    "start": "1380080",
    "end": "1388240"
  },
  {
    "text": "can cause a set of anomalies and so these are sort of from classic kind of",
    "start": "1388240",
    "end": "1394029"
  },
  {
    "text": "database literature right where you can have lost updates where you know one you",
    "start": "1394029",
    "end": "1400269"
  },
  {
    "text": "know the one-step of a saga can read an object another some other transaction",
    "start": "1400269",
    "end": "1407139"
  },
  {
    "text": "can go in and modify it and then a later step of that transaction or a",
    "start": "1407139",
    "end": "1412749"
  },
  {
    "text": "compensating step can write can overwrite that that intermediate update and then you can have dirty reads as",
    "start": "1412749",
    "end": "1419889"
  },
  {
    "text": "well where you know once a saga writes some other transaction reads and then",
    "start": "1419889",
    "end": "1426970"
  },
  {
    "text": "the that compensating transaction is executed to like undo what was done so",
    "start": "1426970",
    "end": "1433450"
  },
  {
    "text": "that so the intermediate transaction read a value that was only there temporarily and then the saga can",
    "start": "1433450",
    "end": "1440379"
  },
  {
    "text": "exhibit sort of these non repeatable or fuzzy reads where one step if it reads a",
    "start": "1440379",
    "end": "1445629"
  },
  {
    "text": "value some other transaction writes that value then later on the saga rereads that value gets a different value back",
    "start": "1445629",
    "end": "1452639"
  },
  {
    "text": "so this is all from lack of isolation so to solve this they described a set of",
    "start": "1452639",
    "end": "1460289"
  },
  {
    "text": "countermeasures for solving these",
    "start": "1460289",
    "end": "1465970"
  },
  {
    "start": "1462000",
    "end": "2064000"
  },
  {
    "text": "problems and I'm just gonna summarize them here so one thing to do is just to",
    "start": "1465970",
    "end": "1471730"
  },
  {
    "text": "try and make the up dates commutative so sort of you know anything about basic arithmetic adds and",
    "start": "1471730",
    "end": "1479140"
  },
  {
    "text": "subtracts a commutative for instance right you can do them with any order and the outcome is the same so that that's",
    "start": "1479140",
    "end": "1485650"
  },
  {
    "text": "one way to deal with these isolation anomalies there's another approach which",
    "start": "1485650",
    "end": "1490840"
  },
  {
    "text": "they call a version file which is kind of strange terminology but the idea",
    "start": "1490840",
    "end": "1496330"
  },
  {
    "text": "there is that you record a history of changes and then you can use those to",
    "start": "1496330",
    "end": "1501730"
  },
  {
    "text": "sort of reorder the updates to make them commutative and what was interesting",
    "start": "1501730",
    "end": "1507840"
  },
  {
    "text": "said Katie from is at Twitter gave a talk about Saugus somewhere else and she",
    "start": "1507840",
    "end": "1513460"
  },
  {
    "text": "is she in in in her talk she gave an example where creating a reservation and",
    "start": "1513460",
    "end": "1519490"
  },
  {
    "text": "cancelling a reservation needed to be commutative which meant that you could because of things because because those",
    "start": "1519490",
    "end": "1526480"
  },
  {
    "text": "requests could arrive out of water which was really really interesting in this notion that you could cancel a",
    "start": "1526480",
    "end": "1531850"
  },
  {
    "text": "reservation before you made it but that to me sounded like an example of a",
    "start": "1531850",
    "end": "1537730"
  },
  {
    "text": "reversion file so when the cancel arrives and there's no corresponding reservation you record the fact that",
    "start": "1537730",
    "end": "1543040"
  },
  {
    "text": "you've received the council so that when the create comes along you just know to",
    "start": "1543040",
    "end": "1548050"
  },
  {
    "text": "not execute it which it's kind of interesting this also sounds a bit like",
    "start": "1548050",
    "end": "1553900"
  },
  {
    "text": "event sourcing where you're recording the history of changes and then they",
    "start": "1553900",
    "end": "1560770"
  },
  {
    "text": "talked about them another another countermeasure was rereading values so",
    "start": "1560770",
    "end": "1566010"
  },
  {
    "text": "Ti reads it well a later one can then reread it just to make sure the value",
    "start": "1566010",
    "end": "1572440"
  },
  {
    "text": "hasn't changed and if it has perhaps abort that sagar and retry it from the",
    "start": "1572440",
    "end": "1578350"
  },
  {
    "text": "beginning so you can sort of rollback and then restart and then another one",
    "start": "1578350",
    "end": "1584380"
  },
  {
    "text": "was this pessimistic view which was sort of an interesting thing because it's stressed minimizing business risk so the",
    "start": "1584380",
    "end": "1592930"
  },
  {
    "text": "idea is if you're going to increase someone's credit do it after once you",
    "start": "1592930",
    "end": "1600640"
  },
  {
    "text": "know that that transaction won't be compensated right so there",
    "start": "1600640",
    "end": "1606480"
  },
  {
    "text": "this notion that you can reduce credit and then increase it later because that's not going to introduce a business",
    "start": "1606480",
    "end": "1613110"
  },
  {
    "text": "risk I guess it would cause a lost sale which is another but that's that sort of let may be less risky than reducing the",
    "start": "1613110",
    "end": "1621660"
  },
  {
    "text": "credit processing a sale and then then",
    "start": "1621660",
    "end": "1627660"
  },
  {
    "text": "in a compensating transaction reducing the available credit which means that",
    "start": "1627660",
    "end": "1632730"
  },
  {
    "text": "that sale should never have happened so that's kind of an interesting idea is",
    "start": "1632730",
    "end": "1638520"
  },
  {
    "text": "that you yeah the your data is inconsistent and your application is not working in a perfect way according to",
    "start": "1638520",
    "end": "1644730"
  },
  {
    "text": "acid transactions but you make it and you make it behave in this imperfect way",
    "start": "1644730",
    "end": "1650400"
  },
  {
    "text": "that minimizes the risk to the business and I thought that was interesting and",
    "start": "1650400",
    "end": "1656610"
  },
  {
    "text": "then they also had some strategies which work one was counter measure by value they actually said well if there's this",
    "start": "1656610",
    "end": "1663600"
  },
  {
    "text": "really high-risk transaction someone's trying to transfer a metal place of a huge order then use a distributed",
    "start": "1663600",
    "end": "1671400"
  },
  {
    "text": "transaction at that point because it's too risky to do anything else and I thought that was interesting and then",
    "start": "1671400",
    "end": "1678419"
  },
  {
    "text": "the other thing they had the final one was was basically semantic locking so locking at the application level which",
    "start": "1678419",
    "end": "1685830"
  },
  {
    "text": "is kind of like the cancel order scenario saga waiting for the create order saga to complete which I thought",
    "start": "1685830",
    "end": "1695850"
  },
  {
    "text": "was you know that that struck me as an interesting approach I mean it's like some is basically an application level",
    "start": "1695850",
    "end": "1702559"
  },
  {
    "text": "distributed lock so you need to implement some kind of deadlock detection in order to time out if",
    "start": "1702559",
    "end": "1710220"
  },
  {
    "text": "there's some failure or something like that the other approach they suggested along these lines is to set a flag to",
    "start": "1710220",
    "end": "1717240"
  },
  {
    "text": "say this bank account is in the middle of being updated so when you are doing",
    "start": "1717240",
    "end": "1723900"
  },
  {
    "text": "some form of reporting treat it differently like if if an account is not",
    "start": "1723900",
    "end": "1731820"
  },
  {
    "text": "being is not in the middle of being updated by by a saga then you know that",
    "start": "1731820",
    "end": "1737159"
  },
  {
    "text": "the balance has is accurate whereas if it's in the middle of being updated by a saga",
    "start": "1737159",
    "end": "1742850"
  },
  {
    "text": "well put that in the fuzzy fuzzy balance column because we don't really know what",
    "start": "1742850",
    "end": "1749010"
  },
  {
    "text": "the value is just yet so thought it was kind of interesting so yeah so there's a",
    "start": "1749010",
    "end": "1755520"
  },
  {
    "text": "whole bunch of you know tricky issues that you have to deal with but it's sort",
    "start": "1755520",
    "end": "1761760"
  },
  {
    "text": "of like you go search the literature and you know people have been thinking of",
    "start": "1761760",
    "end": "1767580"
  },
  {
    "text": "ways to reduce the risk at the application level so quite intriguing so",
    "start": "1767580",
    "end": "1778200"
  },
  {
    "text": "that that's kind of sagas and now kind of want to get back to sort of less",
    "start": "1778200",
    "end": "1783480"
  },
  {
    "text": "scary things the actual technical sort of implementation of the sagas starting",
    "start": "1783480",
    "end": "1789840"
  },
  {
    "text": "with how to coordinate and sequence the series of steps okay so you know you",
    "start": "1789840",
    "end": "1799620"
  },
  {
    "text": "conceptually write saga as a sequence of steps they have to happen one after the other maybe there's branching but I'm",
    "start": "1799620",
    "end": "1805890"
  },
  {
    "text": "ignoring that and then if there's a failure you then have to execute the",
    "start": "1805890",
    "end": "1813000"
  },
  {
    "text": "compensating transactions in reverse order so there needs to be some logic",
    "start": "1813000",
    "end": "1818100"
  },
  {
    "text": "somewhere to make this decision and if this sounds sort of like kind of",
    "start": "1818100",
    "end": "1824910"
  },
  {
    "text": "workflow that I think there's some strong similarities and so the solutions are kind of the same way you you have",
    "start": "1824910",
    "end": "1832170"
  },
  {
    "text": "this two approaches choreography where the decision-making is sort of implicit",
    "start": "1832170",
    "end": "1838530"
  },
  {
    "text": "and distributed amongst the participants and then there's orchestration where you",
    "start": "1838530",
    "end": "1844290"
  },
  {
    "text": "actually as you're going to see you have basically a domain object telling the participants what to do so with Orcas",
    "start": "1844290",
    "end": "1852240"
  },
  {
    "text": "with with choreo choreography I always get them mixed up in my head basically",
    "start": "1852240",
    "end": "1858060"
  },
  {
    "text": "you can do that in a very trivial way using events so for instance you know",
    "start": "1858060",
    "end": "1865290"
  },
  {
    "text": "with the order service when a request comes in to create an order it can create an order and publish an event",
    "start": "1865290",
    "end": "1872390"
  },
  {
    "text": "that event gets consumed by the customer service which will then attempt to reserve credit for that order",
    "start": "1872390",
    "end": "1881020"
  },
  {
    "text": "and then it will publish an event saying yes the credit was reserved or the",
    "start": "1881020",
    "end": "1886750"
  },
  {
    "text": "credit limit was exceeded the order service would then receive that of them",
    "start": "1886750",
    "end": "1891970"
  },
  {
    "text": "and either approve or reject that order so you just got these services that just",
    "start": "1891970",
    "end": "1899920"
  },
  {
    "text": "emit events receive events perform some action emit more events and eventually",
    "start": "1899920",
    "end": "1907750"
  },
  {
    "text": "this this saga completes and interestingly I think it was a Q Khan",
    "start": "1907750",
    "end": "1912910"
  },
  {
    "text": "three years ago I gave a talk about event sourcing and I might have used",
    "start": "1912910",
    "end": "1918190"
  },
  {
    "text": "this slide but I didn't have a word for it so it's like kind of subsequently I",
    "start": "1918190",
    "end": "1924309"
  },
  {
    "text": "discovered what I was talking about was something that could be labeled choreography based coordination teasing",
    "start": "1924309",
    "end": "1930400"
  },
  {
    "text": "event but it was just sort of like very natural because you know event sourcing",
    "start": "1930400",
    "end": "1936190"
  },
  {
    "text": "is basically where you're using events to persist the state of your domain objects so whenever a domain object",
    "start": "1936190",
    "end": "1942820"
  },
  {
    "text": "changes you just publish an event just just kind of like I described here so",
    "start": "1942820",
    "end": "1947890"
  },
  {
    "text": "it's really trivial to sort of implement these choreography based sagas and in an",
    "start": "1947890",
    "end": "1955809"
  },
  {
    "text": "event sourcing application it's sort of this natural way and also you know in",
    "start": "1955809",
    "end": "1962530"
  },
  {
    "text": "this model that the SOG is all loosely coupled they're just kind of exchanging events and it all kind of works but",
    "start": "1962530",
    "end": "1969670"
  },
  {
    "text": "there are some interesting issues in the sense that you know there's a cyclic",
    "start": "1969670",
    "end": "1975550"
  },
  {
    "text": "dependency because the customer service is listening to events from the order",
    "start": "1975550",
    "end": "1981309"
  },
  {
    "text": "service and vice versa and you know from a design point of view should you really",
    "start": "1981309",
    "end": "1986590"
  },
  {
    "text": "have cycles mmm maybe not maybe that's not such a good idea and and also the",
    "start": "1986590",
    "end": "1993700"
  },
  {
    "text": "domain objects potentially have to know a lot about what's going on so in the",
    "start": "1993700",
    "end": "1999580"
  },
  {
    "text": "case of the order some work some logic in the order service has to know oh yeah",
    "start": "1999580",
    "end": "2005429"
  },
  {
    "text": "when the event comes in from the customer service I have to kind of approve the order or but then it might",
    "start": "2005429",
    "end": "2011919"
  },
  {
    "text": "get a lot more complicated if there are other validations that need to be done",
    "start": "2011919",
    "end": "2017019"
  },
  {
    "text": "such as reserving inventory and so on so there's sort of all this event",
    "start": "2017019",
    "end": "2022809"
  },
  {
    "text": "processing logic mixed up with the business logic and then also events are",
    "start": "2022809",
    "end": "2028809"
  },
  {
    "text": "a very indirect thing sort of way of causing things to happen I mean I",
    "start": "2028809",
    "end": "2035620"
  },
  {
    "text": "remember you know cuz an event is something that has happened like an order was created an order was approved",
    "start": "2035620",
    "end": "2042309"
  },
  {
    "text": "credit was reserved or credit limit exceeded and sometimes you just want to",
    "start": "2042309",
    "end": "2048398"
  },
  {
    "text": "tell a participant what to do you know just direct it rather than sort of indirectly suggesting hinting strongly",
    "start": "2048399",
    "end": "2056470"
  },
  {
    "text": "via an event that it should maybe consider doing something so that kind of",
    "start": "2056470",
    "end": "2062829"
  },
  {
    "text": "then leads you to another model where you have an orchestra you implement sagas using orchestration and that's",
    "start": "2062829",
    "end": "2070000"
  },
  {
    "start": "2064000",
    "end": "2204000"
  },
  {
    "text": "where you have an object that's basically like this little workflow that's directing the participants",
    "start": "2070000",
    "end": "2076720"
  },
  {
    "text": "telling them what to do so in this model",
    "start": "2076720",
    "end": "2082388"
  },
  {
    "text": "is you're going to see that when the order gets created as part of that you",
    "start": "2082389",
    "end": "2087550"
  },
  {
    "text": "get this create order sagar object which it then just goes and tells the customer",
    "start": "2087550",
    "end": "2093429"
  },
  {
    "text": "service what to do the order service what to do so it's a lot more direct none of this indirection sort of hinting",
    "start": "2093429",
    "end": "2101410"
  },
  {
    "text": "via via event so so in this model you have a saga Orchestrator or which I",
    "start": "2101410",
    "end": "2108640"
  },
  {
    "text": "actually shortened to the term saga and that's actually a persistent object so it lives in the database that tracks the",
    "start": "2108640",
    "end": "2115900"
  },
  {
    "text": "state of the this little of the saga the workflow and then tells the participants",
    "start": "2115900",
    "end": "2123339"
  },
  {
    "text": "what to do so it will tell one participant to execute a tea you know",
    "start": "2123339",
    "end": "2128440"
  },
  {
    "text": "tea one another waiting when it when that has succeeded it tells another",
    "start": "2128440",
    "end": "2134440"
  },
  {
    "text": "participant to execute a tea - and so on and then if there's a failure it will",
    "start": "2134440",
    "end": "2139780"
  },
  {
    "text": "start execute the compensating transactions one by one and as you're going to see later on",
    "start": "2139780",
    "end": "2146170"
  },
  {
    "text": "actually send command messages to the participants so there's this sort of it's all done via message broker but",
    "start": "2146170",
    "end": "2153280"
  },
  {
    "text": "instead of events it's command saying do this and then eventually a reply will come back so kind of so kind of the more",
    "start": "2153280",
    "end": "2163330"
  },
  {
    "text": "the behavior of this saga or saga Orchestrator is when it's created it",
    "start": "2163330",
    "end": "2168820"
  },
  {
    "text": "tells the saga participant what to do then a reply comes back at which point",
    "start": "2168820",
    "end": "2175330"
  },
  {
    "text": "it figures out what's that which is the next saga participant to invoke next and",
    "start": "2175330",
    "end": "2182170"
  },
  {
    "text": "based on whether that's in Vic that transaction was successful or not and",
    "start": "2182170",
    "end": "2188590"
  },
  {
    "text": "then it tells the saga participant sends it a message and then it updates its",
    "start": "2188590",
    "end": "2193990"
  },
  {
    "text": "state which is persisted in the database and it just kind of goes around that loop until it runs out of things to do",
    "start": "2193990",
    "end": "2200170"
  },
  {
    "text": "at which point presumably it is done so in this model it works like this where",
    "start": "2200170",
    "end": "2205320"
  },
  {
    "text": "you know the request comes in to create an order it actually creates an order",
    "start": "2205320",
    "end": "2210760"
  },
  {
    "text": "and it creates a create order saga which maybe should be cool validate water",
    "start": "2210760",
    "end": "2216370"
  },
  {
    "text": "creation saga or something cept that no it's debatable what that what the term",
    "start": "2216370",
    "end": "2222520"
  },
  {
    "text": "is and that then tells the customer service to reserve credit so it's",
    "start": "2222520",
    "end": "2228270"
  },
  {
    "text": "asynchronously invoking an operation on the customer service which is then going",
    "start": "2228270",
    "end": "2234160"
  },
  {
    "text": "to send a message back saying oh the credits been reserved so sending back a",
    "start": "2234160",
    "end": "2239290"
  },
  {
    "text": "reply message indicating the outcome of that credit reservation and then the",
    "start": "2239290",
    "end": "2245380"
  },
  {
    "text": "create order saga when it gets it well in this case approve the order if it was",
    "start": "2245380",
    "end": "2251620"
  },
  {
    "text": "credit limit exceeded reply it would it",
    "start": "2251620",
    "end": "2256630"
  },
  {
    "text": "would reject the order so that's kind of the idea so in terms of the code this is",
    "start": "2256630",
    "end": "2263590"
  },
  {
    "text": "actually what it looks like I'm just gonna talk about this quickly you can go see it online so there's a simple saga",
    "start": "2263590",
    "end": "2270900"
  },
  {
    "text": "interface and it's a generic type and the what we're looking at here is like a",
    "start": "2270900",
    "end": "2277030"
  },
  {
    "text": "stateless singleton and then create order saga data is the actual state of",
    "start": "2277030",
    "end": "2282130"
  },
  {
    "text": "any particular saga object the workflow is defined by this sort of simple DSL",
    "start": "2282130",
    "end": "2289720"
  },
  {
    "text": "there's a series of steps each step invokes either a participant or it in",
    "start": "2289720",
    "end": "2295840"
  },
  {
    "text": "execute so compensating transaction and all its doing is invoking these methods",
    "start": "2295840",
    "end": "2302860"
  },
  {
    "text": "that create a command message to send to a particular participant so in this",
    "start": "2302860",
    "end": "2308710"
  },
  {
    "text": "example it's sending a reserved credit command to the customer service so a",
    "start": "2308710",
    "end": "2315760"
  },
  {
    "text": "bunch of details there but the sort of the logic is fairly fairly straightforward and then inside the",
    "start": "2315760",
    "end": "2323050"
  },
  {
    "text": "customer service there's a bunch of command handlers so this is just a layer of abstraction over a message broker and",
    "start": "2323050",
    "end": "2330910"
  },
  {
    "text": "we're actually kafka to be more precise where messages have a header and a body",
    "start": "2330910",
    "end": "2336190"
  },
  {
    "text": "in those particular semantics to each one so in this example you know when it",
    "start": "2336190",
    "end": "2344340"
  },
  {
    "text": "gets a reserved credit command it that",
    "start": "2344340",
    "end": "2349720"
  },
  {
    "text": "it invokes the reserved credit command handler which basically just implements",
    "start": "2349720",
    "end": "2358000"
  },
  {
    "text": "the usual domain logic finds the the customer object in the database execute",
    "start": "2358000",
    "end": "2364270"
  },
  {
    "text": "the reserved credit method on it if it and then sends backups it will returns a",
    "start": "2364270",
    "end": "2370840"
  },
  {
    "text": "success reply otherwise if it throws an exception it returns a failure reply so",
    "start": "2370840",
    "end": "2379570"
  },
  {
    "text": "that's all so it's just this layer of abstraction over message descending so",
    "start": "2379570",
    "end": "2385210"
  },
  {
    "text": "in the framework you can for doing this you can if you go look in and github",
    "start": "2385210",
    "end": "2390750"
  },
  {
    "text": "eventuate kind of came up with this name tram transactional messaging because",
    "start": "2390750",
    "end": "2396730"
  },
  {
    "text": "this is all tied in with so the mess set the sending and receiving of messaging is tied in with database transactions",
    "start": "2396730",
    "end": "2404980"
  },
  {
    "text": "but it's not using JTA and Jay assets using a different approach so",
    "start": "2404980",
    "end": "2412330"
  },
  {
    "text": "anyway so that's what a saga looks like I mean the nice thing about these saga orchestrators is the logic is",
    "start": "2412330",
    "end": "2418240"
  },
  {
    "text": "centralized in one place you know the customer in this case doesn't know a whole lot it just it's not listening to",
    "start": "2418240",
    "end": "2425470"
  },
  {
    "text": "all of the order lifecycle events and knowing how whether to reserve credit or",
    "start": "2425470",
    "end": "2432369"
  },
  {
    "text": "release credit it's just being told what to do so that that reduces coupling and",
    "start": "2432369",
    "end": "2438130"
  },
  {
    "text": "it's actually it reduces cyclic dependencies as well one downside is",
    "start": "2438130",
    "end": "2443980"
  },
  {
    "text": "there's always a risk of having kind of these smart saga objects telling the dumb participants what to do but I think",
    "start": "2443980",
    "end": "2451300"
  },
  {
    "text": "that's just a matter of careful design so that's the orchestration part so",
    "start": "2451300",
    "end": "2458380"
  },
  {
    "text": "that's sort of a high level how do you tell how do you sequence this series of",
    "start": "2458380",
    "end": "2463630"
  },
  {
    "text": "local transactions and how do you deal with compensation and so on so yeah",
    "start": "2463630",
    "end": "2470710"
  },
  {
    "text": "simple framework that just makes defining that quite straightforward and",
    "start": "2470710",
    "end": "2477220"
  },
  {
    "text": "it's sort of similar to what you might get with some kind of traditional sort of workflow engine I mean the main",
    "start": "2477220",
    "end": "2482350"
  },
  {
    "text": "difference is it's very focused on implementing sort of sagas as opposed to",
    "start": "2482350",
    "end": "2487390"
  },
  {
    "text": "more general purpose workflows and then the other difference is as I'm going to talk about now it's actually based on",
    "start": "2487390",
    "end": "2494440"
  },
  {
    "text": "sort of transactional messaging because there seems to be this whole big gap where I want to I you know I want to",
    "start": "2494440",
    "end": "2501730"
  },
  {
    "text": "reliably send a message and up and update the database atomically and a lot",
    "start": "2501730",
    "end": "2509530"
  },
  {
    "text": "of them frameworks don't seem to do that very well assumption is you use two-phase commit which you could con in",
    "start": "2509530",
    "end": "2516700"
  },
  {
    "text": "this situation so anyway so if we look at how messaging needs to work right so the sugg Orchestrator needs to tell the",
    "start": "2516700",
    "end": "2523990"
  },
  {
    "text": "pilot send a command to a participant telling it what to do and then the saga",
    "start": "2523990",
    "end": "2530770"
  },
  {
    "text": "participant has to send back a reply and this all has to happen even if there are",
    "start": "2530770",
    "end": "2537640"
  },
  {
    "text": "transient failures so you know maybe the saga discipline is down maybe the saga",
    "start": "2537640",
    "end": "2545230"
  },
  {
    "text": "Orchestrator sends the message and then goes down but you want it to respond to the reply and for me that actually means",
    "start": "2545230",
    "end": "2552760"
  },
  {
    "text": "that you really want to do this on top of a messaging broker as opposed to some",
    "start": "2552760",
    "end": "2558610"
  },
  {
    "text": "form of re tribal RPC interestingly",
    "start": "2558610",
    "end": "2563920"
  },
  {
    "text": "during the panel Lewis from Google said that Google doesn't really use message",
    "start": "2563920",
    "end": "2569440"
  },
  {
    "text": "brokers they do rely pre tribal RPC for a bunch of reasons not entirely I don't",
    "start": "2569440",
    "end": "2576160"
  },
  {
    "text": "know how to adapt that to this model to me it's like it's it you know this you",
    "start": "2576160",
    "end": "2583870"
  },
  {
    "text": "get a lot of simplicity by just relying on your message broker to do the right",
    "start": "2583870",
    "end": "2590080"
  },
  {
    "text": "thing and it doesn't require the participants to sort of be up and",
    "start": "2590080",
    "end": "2595330"
  },
  {
    "text": "available so the model ends up looking like this where you know the create order saga sends a command to a",
    "start": "2595330",
    "end": "2604270"
  },
  {
    "text": "participants request Channel think Kefka",
    "start": "2604270",
    "end": "2609400"
  },
  {
    "text": "topic so the customer service has a customer request channel which is reading from processing those messages",
    "start": "2609400",
    "end": "2619240"
  },
  {
    "text": "and then it's going to write the reply to the message channel that's specified",
    "start": "2619240",
    "end": "2624400"
  },
  {
    "text": "in the reply to head or the message Reserve credit so the saga reply channel",
    "start": "2624400",
    "end": "2633520"
  },
  {
    "text": "which then gets read by the saga and so the process goes on so that's the easy",
    "start": "2633520",
    "end": "2639100"
  },
  {
    "text": "part there's just some sort of simple messaging the tricky part is making this",
    "start": "2639100",
    "end": "2644140"
  },
  {
    "text": "happen transactionally because at each step you know the saga part is the saga",
    "start": "2644140",
    "end": "2649420"
  },
  {
    "text": "is updating its state and wants to send a message likewise the participant is",
    "start": "2649420",
    "end": "2656710"
  },
  {
    "text": "updating its state and wants to send a reply and all of this has to happen",
    "start": "2656710",
    "end": "2662140"
  },
  {
    "text": "basically atomically but the trick is is that we can't use the classic approach",
    "start": "2662140",
    "end": "2667210"
  },
  {
    "text": "of sort of you know two-phase commit you know JT a a JT a transaction spanning a",
    "start": "2667210",
    "end": "2674460"
  },
  {
    "text": "JDBC day and our JMS message queue right because that's specially JMS that sort of",
    "start": "2674460",
    "end": "2681220"
  },
  {
    "text": "old-school technology and we don't want to use JTA so it's sort of like how you know how do",
    "start": "2681220",
    "end": "2687280"
  },
  {
    "text": "we do these two things atomically and that's sort of kind of the underlying foundation for this saga framework and",
    "start": "2687280",
    "end": "2695860"
  },
  {
    "text": "the way it works kind of took inspiration from Howie Bay did this and",
    "start": "2695860",
    "end": "2701080"
  },
  {
    "text": "the basically the model is this so you have a message table so that that",
    "start": "2701080",
    "end": "2707500"
  },
  {
    "text": "basically acts as an out box for a service so in this in this case when the",
    "start": "2707500",
    "end": "2713140"
  },
  {
    "text": "customer service updates its database and it wants to send an order created",
    "start": "2713140",
    "end": "2718810"
  },
  {
    "text": "message that doesn't make sense typos on the slide so yeah so so the",
    "start": "2718810",
    "end": "2726430"
  },
  {
    "text": "idea is to when it when when a service wants to update its database which",
    "start": "2726430",
    "end": "2731800"
  },
  {
    "text": "obviously has to be done in inside a transaction as part of that transaction it will insert a message into a message",
    "start": "2731800",
    "end": "2740320"
  },
  {
    "text": "table and that that's that's a local asset transaction so it's guaranteed to",
    "start": "2740320",
    "end": "2746320"
  },
  {
    "text": "be atomic so that that's so that's step",
    "start": "2746320",
    "end": "2753010"
  },
  {
    "text": "number one so that that's kind of it from the perspective of that service and",
    "start": "2753010",
    "end": "2759820"
  },
  {
    "text": "then there's a separate process that is pulling messages out of that table and",
    "start": "2759820",
    "end": "2766530"
  },
  {
    "text": "publishing them to a message broker so we sort of broken it down into two steps",
    "start": "2766530",
    "end": "2772780"
  },
  {
    "text": "the first step gives us the atomicity that we need and we're just going to assume that this message publisher is",
    "start": "2772780",
    "end": "2779500"
  },
  {
    "text": "going to keep trying until it's actually published the message there's actually",
    "start": "2779500",
    "end": "2785380"
  },
  {
    "text": "two ways it could do this one way which is generic and works with a lot you know",
    "start": "2785380",
    "end": "2790540"
  },
  {
    "text": "a whole bunch of different databases is basically to pull the message table you",
    "start": "2790540",
    "end": "2795700"
  },
  {
    "text": "know select from messages where some where the message is new and hasn't been",
    "start": "2795700",
    "end": "2802600"
  },
  {
    "text": "published so that that that can work you know that sort of a generic approach",
    "start": "2802600",
    "end": "2809509"
  },
  {
    "text": "a much better approach is actually to tail the transaction log so actually",
    "start": "2809509",
    "end": "2814909"
  },
  {
    "text": "look in the my sequel bin log see the series of inserts into the message table",
    "start": "2814909",
    "end": "2820309"
  },
  {
    "text": "publish them to Kafka or look at you know each database has its own",
    "start": "2820309",
    "end": "2826909"
  },
  {
    "text": "particular transaction log you know  even has an OP log so you could look in that to see the changes and then",
    "start": "2826909",
    "end": "2833359"
  },
  {
    "text": "know to publish them to it to a message broker and that's a much sort of kind of",
    "start": "2833359",
    "end": "2839630"
  },
  {
    "text": "lower latency pure yeah I'm nice a wait way to do this so a framework that I",
    "start": "2839630",
    "end": "2845209"
  },
  {
    "text": "work on is called tram that actually implements that so that's like a whole bunch of messaging abstractions that are",
    "start": "2845209",
    "end": "2851089"
  },
  {
    "text": "based on the mechanism that I described on the on the past couple of slides so",
    "start": "2851089",
    "end": "2858199"
  },
  {
    "text": "then the other option is actually to use event sourcing kind of a sort of a reliable foundation because when you",
    "start": "2858199",
    "end": "2866479"
  },
  {
    "text": "basically you know say if when an order or a customer is created well that's",
    "start": "2866479",
    "end": "2873349"
  },
  {
    "text": "going to result in an event being saved or published in an event store and that",
    "start": "2873349",
    "end": "2878569"
  },
  {
    "text": "can actually reliably be turned into a command or message that's sent to some",
    "start": "2878569",
    "end": "2884299"
  },
  {
    "text": "other service so there's a couple of different mechanisms for implementing this it's kind of such as absolutely",
    "start": "2884299",
    "end": "2892729"
  },
  {
    "text": "fascinating area but it kind of the key point is is that in order for this to work reliably you need some form of",
    "start": "2892729",
    "end": "2899499"
  },
  {
    "text": "transactional MCing messaging and transactional in the database set sense",
    "start": "2899499",
    "end": "2905239"
  },
  {
    "text": "of the word anyway so that's my talk hope that you found it useful so in",
    "start": "2905239",
    "end": "2910519"
  },
  {
    "start": "2908000",
    "end": "2963000"
  },
  {
    "text": "summary right like the whole point of using micro services is to tackle complexity or as someone pointed out",
    "start": "2910519",
    "end": "2917419"
  },
  {
    "text": "slow the growth curve of complexity an accelerate development right database",
    "start": "2917419",
    "end": "2924079"
  },
  {
    "text": "services data a database per service is essential for loose coupling right it's",
    "start": "2924079",
    "end": "2930829"
  },
  {
    "text": "enabling the teams to work autonomously and the way you want to maintain data consistency between services is using",
    "start": "2930829",
    "end": "2939259"
  },
  {
    "text": "sagas and then the underlying sort of platform for the that the sagas are built on is this",
    "start": "2939259",
    "end": "2945230"
  },
  {
    "text": "transactional mechanism that enables you to atomically update the database and",
    "start": "2945230",
    "end": "2952190"
  },
  {
    "text": "publish a message so that's my talk thank you for listening and I hope that",
    "start": "2952190",
    "end": "2958460"
  },
  {
    "text": "you found it useful [Applause]",
    "start": "2958460",
    "end": "2964558"
  }
]