[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "[Music]",
    "start": "2330",
    "end": "7819"
  },
  {
    "text": "this is a talk called what you need to know about Lambda with all the",
    "start": "8040",
    "end": "13200"
  },
  {
    "text": "excitement about lambda's coming in Java 8 the uh usage of Lambda is going to",
    "start": "13200",
    "end": "18400"
  },
  {
    "text": "become more uh widespread and as a result um what I'd",
    "start": "18400",
    "end": "24279"
  },
  {
    "text": "like to talk to you about today is my own personal experiences in using lambdas for several years and things",
    "start": "24279",
    "end": "31199"
  },
  {
    "start": "29025",
    "end": "29025"
  },
  {
    "text": "that can trip you up about them they are not a free lunch",
    "start": "31199",
    "end": "36800"
  },
  {
    "text": "so first of all my name is Jamie Allen I'm the director of Consulting for typesafe we're the company that makes",
    "start": "36800",
    "end": "43200"
  },
  {
    "start": "38025",
    "end": "38025"
  },
  {
    "text": "Scala the language we also make the AKA concurrency toolkit as well as the play",
    "start": "43200",
    "end": "48239"
  },
  {
    "text": "web framework and so we've been using lambdas on the jbm for quite a few years",
    "start": "48239",
    "end": "54680"
  },
  {
    "text": "now and as a person who works with clients you know it's very frequent that",
    "start": "54680",
    "end": "61039"
  },
  {
    "text": "I see people using lambdas especially for the first time getting their feet wet with it and it's you know it could",
    "start": "61039",
    "end": "66799"
  },
  {
    "text": "be a little tricky if you don't understand the Dynamics of lambdas so",
    "start": "66799",
    "end": "71960"
  },
  {
    "text": "I'm here to explain that first of all I want to be perfectly clear about this I",
    "start": "71960",
    "end": "78439"
  },
  {
    "start": "77025",
    "end": "77025"
  },
  {
    "text": "love functional programming I don't want anybody to think that I don't love functional programming with what I'm",
    "start": "78439",
    "end": "84840"
  },
  {
    "text": "going to tell you today to me functional programming is three things it's IM",
    "start": "84840",
    "end": "89920"
  },
  {
    "text": "mutable State not having mutable state in play inside of your application as",
    "start": "89920",
    "end": "95360"
  },
  {
    "text": "much as possible it is also referential transparency and by referential",
    "start": "95360",
    "end": "100399"
  },
  {
    "text": "transparency I mean the idea that you performing an operation on some state that results in a new operation or new",
    "start": "100399",
    "end": "107560"
  },
  {
    "text": "new value doesn't change the original value does anybody here ever use Java",
    "start": "107560",
    "end": "112640"
  },
  {
    "text": "string Builder anybody ever shoot their foot off using Java string Builder by doing",
    "start": "112640",
    "end": "118719"
  },
  {
    "text": "something like reversing string what does it do it reverses not",
    "start": "118719",
    "end": "124960"
  },
  {
    "text": "only the value you get back but also the original string Builder string so that's",
    "start": "124960",
    "end": "131120"
  },
  {
    "text": "not referential transparency that's referential opacity we want to avoid that sort of situation this is one of",
    "start": "131120",
    "end": "137000"
  },
  {
    "text": "the reasons I'm not a huge fan of JavaScript JavaScript doesn't do this well um and finally functions as first",
    "start": "137000",
    "end": "145280"
  },
  {
    "text": "class citizens functions can be passed around they are objects they are types they are they are values themselves",
    "start": "145280",
    "end": "153040"
  },
  {
    "text": "they're first class citizens that represents functional programming to me anytime you hear people talking about",
    "start": "153040",
    "end": "158519"
  },
  {
    "text": "these fancy words like endofunctors or monoids or anything like that that isn't necessarily functional",
    "start": "158519",
    "end": "165560"
  },
  {
    "text": "programming it's a way of functional programming it's category Theory so you",
    "start": "165560",
    "end": "171680"
  },
  {
    "text": "know that is not the key concepts of functional programming this is what I love and this is what I want to use in",
    "start": "171680",
    "end": "178599"
  },
  {
    "text": "my programming now lambdas are merely an implementation detail of functional programming they're",
    "start": "178599",
    "end": "185799"
  },
  {
    "start": "183025",
    "end": "183025"
  },
  {
    "text": "one of the ways that you can write functional programming style code a Lambda is a function literal a literal",
    "start": "185799",
    "end": "193640"
  },
  {
    "text": "is just like a string whenever you have open quote you know Foo or hello world",
    "start": "193640",
    "end": "199000"
  },
  {
    "text": "end quote that's a literal right in a string a function that is a Lambda is a",
    "start": "199000",
    "end": "205360"
  },
  {
    "text": "literal it is just defined for where it is being used at that particular call",
    "start": "205360",
    "end": "210720"
  },
  {
    "text": "site it's not bound to any name it cannot be referenced it cannot be used",
    "start": "210720",
    "end": "216280"
  },
  {
    "text": "in any way aside from where it is defined so implementation detail of",
    "start": "216280",
    "end": "222439"
  },
  {
    "text": "functional programming and I'm going to step out a little bit on a limb here and I'm going to say not that lambdas are",
    "start": "222439",
    "end": "229120"
  },
  {
    "text": "evil but they can get you into trouble first of all let's look at what",
    "start": "229120",
    "end": "235040"
  },
  {
    "text": "lambdas are on a couple of different languages here's Java 8 anybody here",
    "start": "235040",
    "end": "240959"
  },
  {
    "text": "play around I think George just asked us anybody here playing with jav 8 right now it's nice you can download it run it",
    "start": "240959",
    "end": "247159"
  },
  {
    "text": "on your computer things work pretty well it's pretty close to being ready and the Lambda here is merely me saying that I",
    "start": "247159",
    "end": "255079"
  },
  {
    "text": "want to take a number uh a collection of numbers and add one to every single",
    "start": "255079",
    "end": "262120"
  },
  {
    "text": "value it's silly it's pedantic but this is a Lambda you can see it here in",
    "start": "262120",
    "end": "267479"
  },
  {
    "text": "Orange so the first thing I do is inside my public static void main is I Define a list of integers you know arrays as list",
    "start": "267479",
    "end": "275039"
  },
  {
    "text": "one two 3 and then I have the values that represent the changed values after",
    "start": "275039",
    "end": "282520"
  },
  {
    "text": "adding one to each one of them by saying numbers I have to streamify it I then",
    "start": "282520",
    "end": "287840"
  },
  {
    "text": "map over this collection mapping is a way of saying for every item in do this",
    "start": "287840",
    "end": "295880"
  },
  {
    "text": "so for each number add one to it and return that I then collect that and put that back",
    "start": "295880",
    "end": "302520"
  },
  {
    "text": "into a list in",
    "start": "302520",
    "end": "307639"
  },
  {
    "text": "Scala we have a slightly different syntax we uh can create U an application",
    "start": "307639",
    "end": "314000"
  },
  {
    "text": "without having to say main merely by extending something we call the app trait and I can Define my numbers as a",
    "start": "314000",
    "end": "321120"
  },
  {
    "text": "list of one two three and then I can map over them and again the Lambda looks virtually identical to what we saw here",
    "start": "321120",
    "end": "327720"
  },
  {
    "text": "in Java now know the this pointer thingy here this Arrow this rocket some people",
    "start": "327720",
    "end": "334160"
  },
  {
    "text": "call it is slightly different but generally speaking this is very similar syntax",
    "start": "334160",
    "end": "340479"
  },
  {
    "start": "338025",
    "end": "338025"
  },
  {
    "text": "right closure anybody here ever programming closure all right there's one um lispers",
    "start": "340479",
    "end": "348759"
  },
  {
    "text": "think that this syntax is beautiful just want to point that out [Laughter]",
    "start": "348759",
    "end": "355160"
  },
  {
    "text": "uh closure is a list on the jbm and whenever you run a Lambda on closure uh",
    "start": "355160",
    "end": "362560"
  },
  {
    "text": "first of all you have to understand with closure it's a lazily evaluated language so if you're wondering why I'm doing",
    "start": "362560",
    "end": "367800"
  },
  {
    "text": "this print line here that's because if I don't do it it won't actually execute the code you can do a print line before",
    "start": "367800",
    "end": "374319"
  },
  {
    "text": "and after and you will not see any result from this Lambda being applied so",
    "start": "374319",
    "end": "380280"
  },
  {
    "text": "this is how I'm forcing evaluation and I'm mapping over uh every",
    "start": "380280",
    "end": "385960"
  },
  {
    "text": "element and adding one to it uh it's a little different but you know let's",
    "start": "385960",
    "end": "392000"
  },
  {
    "text": "first love this so and finally J Ruby very simple syntax here you take",
    "start": "392000",
    "end": "399960"
  },
  {
    "start": "392025",
    "end": "392025"
  },
  {
    "text": "your array of one two three you do a collect operation to it and apply this",
    "start": "399960",
    "end": "405520"
  },
  {
    "text": "do to do for every n add one to it these are very very basic very simple",
    "start": "405520",
    "end": "413919"
  },
  {
    "text": "lambdas but in each language you could see how there's a similarity to them so what is the",
    "start": "413919",
    "end": "421639"
  },
  {
    "start": "419025",
    "end": "419025"
  },
  {
    "text": "problem first of all this code is not reusable there's no way for you to say",
    "start": "421639",
    "end": "427560"
  },
  {
    "text": "with your Lambda that I want to take that code and use it somewhere else either you have to pull that out into",
    "start": "427560",
    "end": "433440"
  },
  {
    "text": "some sort of external function or method or you're going to end up being not dry",
    "start": "433440",
    "end": "439919"
  },
  {
    "text": "you're going to start writing code that is going to be in the same place in multiple places or the same code in multiple places and that's one of the",
    "start": "439919",
    "end": "446520"
  },
  {
    "text": "worst things we can do as programmers because if it turns out there's a bug inside that code we have to change it",
    "start": "446520",
    "end": "451840"
  },
  {
    "text": "everywhere that we put it it's bad we want to avoid",
    "start": "451840",
    "end": "456759"
  },
  {
    "start": "457025",
    "end": "457025"
  },
  {
    "text": "that they are not testable in isolation anybody here an adherent of test driven",
    "start": "457120",
    "end": "464599"
  },
  {
    "text": "development me I I'm I'm not so much a tdd person I am a person who believes in",
    "start": "464599",
    "end": "470159"
  },
  {
    "text": "testing I don't care if you write tests at the beginning or at the end or whenever but if I write them and I prove",
    "start": "470159",
    "end": "477159"
  },
  {
    "text": "that my code works and I have that ability to tell that whenever I change something that I've got you know regression analysis I know that I",
    "start": "477159",
    "end": "483560"
  },
  {
    "text": "haven't broken anything I'm still meeting my functional spec that's important to me lambdas don't let you do",
    "start": "483560",
    "end": "490680"
  },
  {
    "text": "that if you have lambdas this code only exists where you're using it you can't",
    "start": "490680",
    "end": "496560"
  },
  {
    "text": "reference it you can't test it by itself now when you're doing something as simple as adding one to every integer",
    "start": "496560",
    "end": "503000"
  },
  {
    "text": "inside of your you know collection that's probably not that big of a deal to you but believe me once people start",
    "start": "503000",
    "end": "510000"
  },
  {
    "text": "using lambdas they get kind of crazy with them it's very easy to start writing multi-line lambdas that do all",
    "start": "510000",
    "end": "516360"
  },
  {
    "text": "kinds of funny stuff and when you do that and you can't test that in isolation you can only test that by",
    "start": "516360",
    "end": "522200"
  },
  {
    "text": "calling some method in which it lives you suddenly have a lot more test cases",
    "start": "522200",
    "end": "527600"
  },
  {
    "text": "you have to write or worse yet they get ignored you're not covering all the edge cases of just that",
    "start": "527600",
    "end": "535440"
  },
  {
    "text": "Lambda maintainability one thing you may have noticed about the lambdas I showed you",
    "start": "535440",
    "end": "540920"
  },
  {
    "start": "536025",
    "end": "536025"
  },
  {
    "text": "earlier is that you had to look at the code to figure out what it was",
    "start": "540920",
    "end": "546600"
  },
  {
    "text": "doing who wants to do that not me I want",
    "start": "546600",
    "end": "551680"
  },
  {
    "text": "to be able to just look at a method call or something that explains to me what the code is going to be and if I need to",
    "start": "551680",
    "end": "558079"
  },
  {
    "text": "I can then go look at the method and that will tell me you know what's going on I don't have to you know parse",
    "start": "558079",
    "end": "564560"
  },
  {
    "text": "through this mentally so with lambdas you can't do that you have to look",
    "start": "564560",
    "end": "570160"
  },
  {
    "text": "through all the code and the more complex they get the more time you're going to be doing this and if it was somebody else's code and you're stuck",
    "start": "570160",
    "end": "576000"
  },
  {
    "text": "maintaining it you know good luck lousy stack",
    "start": "576000",
    "end": "583839"
  },
  {
    "start": "579025",
    "end": "579025"
  },
  {
    "text": "traces so lambas especially you know whenever you're talking about languages",
    "start": "583839",
    "end": "589079"
  },
  {
    "text": "that are not Java right we've had to sort of um Vago our way through you know",
    "start": "589079",
    "end": "598600"
  },
  {
    "text": "making our our languages run on the jbm we wanted to add language features like",
    "start": "598600",
    "end": "604360"
  },
  {
    "text": "lambdas but in order to do so we have to meet the contract of what bite code looks like on the jbm and in order to do",
    "start": "604360",
    "end": "611640"
  },
  {
    "text": "that sometimes things look a little hairy I'll be the first to admit this",
    "start": "611640",
    "end": "617279"
  },
  {
    "text": "Scala stack traces especially involving things like lambdas can be difficult to",
    "start": "617279",
    "end": "622839"
  },
  {
    "text": "read and that's the same with closure it's the same with J Ruby to a degree J Ruby's pretty good about this actually",
    "start": "622839",
    "end": "629200"
  },
  {
    "text": "uh um so what they do is when you create these lambdas they do something called name mangling these compiler developers",
    "start": "629200",
    "end": "636040"
  },
  {
    "text": "have to figure out a way to just create something referenceable inside of the bite code and so they name mangle",
    "start": "636040",
    "end": "643279"
  },
  {
    "text": "something to get a something to to call and the stack traces that you see",
    "start": "643279",
    "end": "649639"
  },
  {
    "text": "represent that name mangled stuff very difficult to read we'll get a look at it",
    "start": "649639",
    "end": "655160"
  },
  {
    "text": "later actually we'll look at it now so here is this is Java 8 and uh with Java",
    "start": "655160",
    "end": "661440"
  },
  {
    "start": "656025",
    "end": "656025"
  },
  {
    "text": "8 one of the neat things about you know Java bringing this to their own platform",
    "start": "661440",
    "end": "666519"
  },
  {
    "text": "is that they control the platform and they can make their lambdas look pretty",
    "start": "666519",
    "end": "673560"
  },
  {
    "text": "darn nice however the stack traces that is however note a couple of things here",
    "start": "673560",
    "end": "681040"
  },
  {
    "text": "in the Lambda that I'm running I'm just dividing by zero that's just a stupid way of making an exception happen that's",
    "start": "681040",
    "end": "687760"
  },
  {
    "text": "you know inside of this Lambda and I say you know um inside the stack",
    "start": "687760",
    "end": "693240"
  },
  {
    "text": "Trace we see that my Lambda demo class is referencing something called Lambda",
    "start": "693240",
    "end": "699000"
  },
  {
    "text": "dollar sign zero and then you look at the source line and it says one what one that's not on Source line",
    "start": "699000",
    "end": "707720"
  },
  {
    "text": "one it's going to be difficult to figure out you know as you deal with more",
    "start": "707720",
    "end": "713360"
  },
  {
    "text": "complex types of exceptions and you have to look at much larger lambdas it can be",
    "start": "713360",
    "end": "719639"
  },
  {
    "text": "multi-line it's be very difficult to figure out what it's talking about because it",
    "start": "719639",
    "end": "725560"
  },
  {
    "text": "doesn't map directly back to your Source ah but this isn't just Java",
    "start": "725560",
    "end": "733920"
  },
  {
    "start": "732025",
    "end": "732025"
  },
  {
    "text": "here's Scala remember what I said about how this stack traces can be a little",
    "start": "733920",
    "end": "739480"
  },
  {
    "text": "difficult when you're dealing with lambdas yeah here you see a case where",
    "start": "739480",
    "end": "745160"
  },
  {
    "text": "I've got some Lambda test and a nonf fun is the actual class that was generated",
    "start": "745160",
    "end": "752360"
  },
  {
    "text": "by the compiler in support of this Lambda now you do find out the exact",
    "start": "752360",
    "end": "759600"
  },
  {
    "text": "line number of the source code where the Lambda was you know uh referenced that",
    "start": "759600",
    "end": "765519"
  },
  {
    "text": "is correct at line number 23 that will help you a tremendous amount because at",
    "start": "765519",
    "end": "771040"
  },
  {
    "text": "least you know where it was however as developers it's very easy to fall into",
    "start": "771040",
    "end": "776560"
  },
  {
    "text": "the Trap that hey you know I can write code in such a concise style if I just",
    "start": "776560",
    "end": "782120"
  },
  {
    "text": "you know put a whole bunch of things in one line anybody ever see Pearl you language Pearl and the things people can",
    "start": "782120",
    "end": "789160"
  },
  {
    "text": "do with pearl sometimes you can do that with Scala you can do that with other languages as well you know because you",
    "start": "789160",
    "end": "796160"
  },
  {
    "text": "don't you want to write something that's so beautiful concise and pretty and totally not maintainable or",
    "start": "796160",
    "end": "801959"
  },
  {
    "text": "give you good stack traces you know to get good stack traces you have to write your lambdas a certain way every single",
    "start": "801959",
    "end": "808760"
  },
  {
    "text": "line of code must be distinct so that you get that line number that is",
    "start": "808760",
    "end": "814440"
  },
  {
    "text": "useful if you write stuff and you just start stringing it all the way out some One Source line you're not going to have",
    "start": "814440",
    "end": "820880"
  },
  {
    "text": "that because the jvm does not support anything other than you know line number",
    "start": "820880",
    "end": "826120"
  },
  {
    "text": "Fidelity for where your error occurred it's not going to tell you the column number nothing we can do about",
    "start": "826120",
    "end": "833440"
  },
  {
    "text": "that closure",
    "start": "833440",
    "end": "837440"
  },
  {
    "text": "you have to dig through here to find where your Lambda was because it's not NE it's inside the language where the",
    "start": "840120",
    "end": "846279"
  },
  {
    "text": "failure is going to occur you to find out what you wrote that caus the problem",
    "start": "846279",
    "end": "851320"
  },
  {
    "text": "you've got to look through here and find you know the exact point and in this case my Lambda is called",
    "start": "851320",
    "end": "858759"
  },
  {
    "text": "fn10 uh but the source line number is correct and that's a good thing uh and",
    "start": "858880",
    "end": "864079"
  },
  {
    "text": "this goes on and on by the way the stack Trace out of this is just you know really really really deep",
    "start": "864079",
    "end": "869880"
  },
  {
    "text": "um but you know uh at least you have the source line number very useful to",
    "start": "869880",
    "end": "876800"
  },
  {
    "text": "have J Ruby they they didn't do half bad with this actually and maybe it's a",
    "start": "876800",
    "end": "882079"
  },
  {
    "text": "function of me just doing something silly that they can say well that's an arithmetic exception you know we know",
    "start": "882079",
    "end": "887680"
  },
  {
    "text": "how to deal with that maybe if I did something that was a lot less pedantic it would have been you know uh much more",
    "start": "887680",
    "end": "894680"
  },
  {
    "text": "uh verbose stack Trace but you know the line number is correct that's great we want want",
    "start": "894680",
    "end": "901360"
  },
  {
    "text": "that um so another part of this that you know is sort of related to our problems",
    "start": "902440",
    "end": "909160"
  },
  {
    "start": "905025",
    "end": "905025"
  },
  {
    "text": "with stack traces is that this is also difficult to debug the tooling for how",
    "start": "909160",
    "end": "915240"
  },
  {
    "text": "you use a debugger with lambdas can be dodgy depends on what you're doing",
    "start": "915240",
    "end": "922480"
  },
  {
    "text": "people who use closure they typically aren't IDE kind of people they'll typically write in emac and you you know",
    "start": "922480",
    "end": "929800"
  },
  {
    "text": "more power to them but if you're a Java developer and Scholar developers what we at typ saafe have really had to work to",
    "start": "929800",
    "end": "936360"
  },
  {
    "text": "do is make sure that this our you know Scala ID support for how you use lambdas you know is good because it used",
    "start": "936360",
    "end": "944160"
  },
  {
    "text": "to be that you would put a break point on the line of code that was going to map over your",
    "start": "944160",
    "end": "949800"
  },
  {
    "text": "collection and then if you stepped over you just went to the next line of code which could be something you know",
    "start": "949800",
    "end": "955880"
  },
  {
    "text": "totally unrelated to Lambda if you want to step into you you couldn't you couldn't see the iteration now the Scola",
    "start": "955880",
    "end": "963600"
  },
  {
    "text": "ID does do that it will show you the iteration how many people here program in Scola or have programmed in Scola you",
    "start": "963600",
    "end": "970480"
  },
  {
    "text": "know few one thing I didn't show you with our lambdas is that you can define a placeholder instead of saying numbers",
    "start": "970480",
    "end": "976639"
  },
  {
    "text": "Arrow numbers plus one you can just say underscore plus one if you do underscore plus one you can't debug that you can't",
    "start": "976639",
    "end": "984319"
  },
  {
    "text": "watch underscore there's nothing for the debugger to say you know uh well yeah um",
    "start": "984319",
    "end": "990319"
  },
  {
    "text": "it might be able to come up with a name for it maybe but then do you know that that is the name that it assigned from",
    "start": "990319",
    "end": "995360"
  },
  {
    "text": "the compiler or from you know the the debugger it did that didn't tell you so",
    "start": "995360",
    "end": "1002319"
  },
  {
    "text": "you know when you use these Wild Card type you know placeholders you lose the ability to",
    "start": "1002319",
    "end": "1008440"
  },
  {
    "text": "debug and the iterability through the collection can be tough depending on the",
    "start": "1008440",
    "end": "1016480"
  },
  {
    "text": "ID so quick digression how many people know the difference between a Lambda and a",
    "start": "1017560",
    "end": "1023039"
  },
  {
    "text": "closure this is one of those topics that you know you hear people talk about",
    "start": "1023039",
    "end": "1029319"
  },
  {
    "text": "closures if they're in The Groovy world it's sort of the general term for lambdas anyway but there is a",
    "start": "1029319",
    "end": "1034480"
  },
  {
    "text": "distinction in programming language Theory um lambas function literal",
    "start": "1034480",
    "end": "1040079"
  },
  {
    "text": "closures mean that you're closing over external State I am doing something",
    "start": "1040079",
    "end": "1046199"
  },
  {
    "text": "where I'm referencing a value from outside the context of the Lambda I'm",
    "start": "1046199",
    "end": "1052799"
  },
  {
    "text": "closing over hence the name closures easy to confuse with the language closure I no",
    "start": "1052799",
    "end": "1059720"
  },
  {
    "text": "idea why Rich went with that name but makes for interesting discussions so closing overstate is one",
    "start": "1059720",
    "end": "1067360"
  },
  {
    "start": "1065025",
    "end": "1065025"
  },
  {
    "text": "of the biggest problems you can encounter with lambdas it is very easy",
    "start": "1067360",
    "end": "1073559"
  },
  {
    "text": "to find yourself in trouble when you close over external State why",
    "start": "1073559",
    "end": "1079520"
  },
  {
    "text": "on the Java platform in order to do so you have to have a final value right you",
    "start": "1079520",
    "end": "1085159"
  },
  {
    "text": "have to just like we had with Anonymous you know implementations of interfaces you if you want to reference something",
    "start": "1085159",
    "end": "1090840"
  },
  {
    "text": "from outside of it it has to be final great that's awesome except what if it",
    "start": "1090840",
    "end": "1095960"
  },
  {
    "text": "was a collection you can still change what's inside that collection",
    "start": "1095960",
    "end": "1103280"
  },
  {
    "text": "right that's not that's not immutable that's not protecting you you from",
    "start": "1103400",
    "end": "1109480"
  },
  {
    "text": "shooting yourself in the foot if you're referencing something from outside the context of your Lambda",
    "start": "1109480",
    "end": "1116120"
  },
  {
    "text": "in a closure here you can very easily get yourself",
    "start": "1116120",
    "end": "1121240"
  },
  {
    "text": "into trouble imagine if it's code that has to be thread safe say it's mutable state that you're referencing somehow",
    "start": "1121240",
    "end": "1127919"
  },
  {
    "text": "like that collection uh inside of your Lambda now you've got to worry about thread safety semantics inside of your",
    "start": "1127919",
    "end": "1134799"
  },
  {
    "text": "Lambda can't synchronize it got a lock",
    "start": "1134799",
    "end": "1140720"
  },
  {
    "text": "no it's not good and even better anybody here ever work with Futures and",
    "start": "1141520",
    "end": "1146640"
  },
  {
    "text": "asynchronous programming yeah I I love them they're awesome and in Scala we use lambdas to",
    "start": "1146640",
    "end": "1154520"
  },
  {
    "text": "apply the the behavior that's going to be executed you know off thread great",
    "start": "1154520",
    "end": "1161400"
  },
  {
    "text": "stuff except race conditions can happen all over the place if you don't know",
    "start": "1161400",
    "end": "1166679"
  },
  {
    "text": "what you're doing you're closing over something something from outside the context of the future you have an",
    "start": "1166679",
    "end": "1171880"
  },
  {
    "text": "expectation of what that value will be at the time you wrote the code but the",
    "start": "1171880",
    "end": "1177960"
  },
  {
    "text": "time when it's executed is not known to you you don't know when that thread will",
    "start": "1177960",
    "end": "1184280"
  },
  {
    "text": "be scheduled for Execution on the Box on which it's going to run and as a result",
    "start": "1184280",
    "end": "1190240"
  },
  {
    "text": "race condition very easy for the closed overv value to be different than what you expect at the time the code runs",
    "start": "1190240",
    "end": "1199280"
  },
  {
    "text": "so be very careful when you're using Futures and",
    "start": "1199280",
    "end": "1204440"
  },
  {
    "text": "lambdas so what is the solution to all this what are we going to do about it we want to write code that is maintainable",
    "start": "1204799",
    "end": "1211679"
  },
  {
    "start": "1206025",
    "end": "1206025"
  },
  {
    "text": "we want it to be written in a functional style boy I'm going pretty fast actually",
    "start": "1211679",
    "end": "1217520"
  },
  {
    "text": "um we want to write code that's maintainable and and in a functional style but we also want to have something",
    "start": "1217520",
    "end": "1222840"
  },
  {
    "text": "that's going to be usable in production when things go wrong we can figure out what the problem was so how do we do",
    "start": "1222840",
    "end": "1228440"
  },
  {
    "text": "that from this point forward I'm actually going to be showing Scala because I didn't have time to do this",
    "start": "1228440",
    "end": "1233559"
  },
  {
    "text": "for Java and the other languages but it'll be very simple stuff one option we have is named",
    "start": "1233559",
    "end": "1240720"
  },
  {
    "start": "1238025",
    "end": "1238025"
  },
  {
    "text": "functions we can say that we want to bind our what was a Lambda to a name and",
    "start": "1240720",
    "end": "1247320"
  },
  {
    "text": "now it's not a Lambda it is a function a function taking arguments and resulting",
    "start": "1247320",
    "end": "1253440"
  },
  {
    "text": "in some other value that can be a good thing to do it",
    "start": "1253440",
    "end": "1258840"
  },
  {
    "text": "depends on the language actually and the way the compiler Scopes the result the",
    "start": "1258840",
    "end": "1265000"
  },
  {
    "text": "the the implementation of the function in bite code will affect how this",
    "start": "1265000",
    "end": "1272080"
  },
  {
    "text": "results in stack traces and stuff like that right so if we use a named function",
    "start": "1272080",
    "end": "1277799"
  },
  {
    "text": "and here's an example in Scala you'll note that the first thing I do is I have this value add one to value that is",
    "start": "1277799",
    "end": "1285840"
  },
  {
    "text": "actually a value it's a function value and I say that take some integer I'm",
    "start": "1285840",
    "end": "1291279"
  },
  {
    "text": "going to call it X and I'm going to add one to whatever was passed in and now",
    "start": "1291279",
    "end": "1298400"
  },
  {
    "text": "whenever I say that I want to map over my numbers 1 to 20 I'm going to apply",
    "start": "1298400",
    "end": "1304400"
  },
  {
    "text": "this function to it you know for every value call add one to value and this",
    "start": "1304400",
    "end": "1310200"
  },
  {
    "text": "will work H one thing about it",
    "start": "1310200",
    "end": "1316039"
  },
  {
    "text": "though the stack TR still sucks this is on us at typ safe and our",
    "start": "1316039",
    "end": "1321840"
  },
  {
    "start": "1317025",
    "end": "1317025"
  },
  {
    "text": "compiler writers we have to do this better but as of now if you look at this",
    "start": "1321840",
    "end": "1327279"
  },
  {
    "text": "stack Trace you'll see that we still have our non fun why we named the function it should",
    "start": "1327279",
    "end": "1335080"
  },
  {
    "text": "be telling me that it's the add one to number right h no not in this",
    "start": "1335080",
    "end": "1341240"
  },
  {
    "text": "case so given that what do we do anybody ever heard the term AA",
    "start": "1341240",
    "end": "1350440"
  },
  {
    "start": "1347025",
    "end": "1347025"
  },
  {
    "text": "expansion Ada expansion is the idea that you can take a Lambda and not a Lambda a",
    "start": "1350440",
    "end": "1356480"
  },
  {
    "text": "function I'm sorry you can take a method and lift it to a function right you can",
    "start": "1356480",
    "end": "1363000"
  },
  {
    "text": "take any old method that meets the contract of how a function would be used",
    "start": "1363000",
    "end": "1368080"
  },
  {
    "text": "any method and lift it to being a function now depending on the language",
    "start": "1368080",
    "end": "1375720"
  },
  {
    "text": "this is either done at runtime or compile time mostly pile time on the jbm right it's got to know that this is",
    "start": "1375720",
    "end": "1381960"
  },
  {
    "text": "going to be something that can execute appropriately on the jbm but Ada expansion can be really",
    "start": "1381960",
    "end": "1389400"
  },
  {
    "text": "useful for this case we want to use methods as",
    "start": "1389400",
    "end": "1395279"
  },
  {
    "start": "1392025",
    "end": "1392025"
  },
  {
    "text": "functions in Scala if we use a method it can be lifted just like I was saying but what syntax do we use in order to make",
    "start": "1395279",
    "end": "1401720"
  },
  {
    "text": "this work here I have taken my previous",
    "start": "1401720",
    "end": "1408600"
  },
  {
    "text": "function this bad function which is going to do the you know for every value divide by zero and obviously it's going to blow up all I've done is changed what",
    "start": "1408600",
    "end": "1416480"
  },
  {
    "text": "was a valow to a defa and in Scala that means is now a method as opposed to",
    "start": "1416480",
    "end": "1421960"
  },
  {
    "text": "being a stable immutable value now if I look at my stack Trace I",
    "start": "1421960",
    "end": "1429080"
  },
  {
    "text": "do see bad function this is good now I have something that tells me where the error occurred not just with the source",
    "start": "1429080",
    "end": "1435520"
  },
  {
    "text": "line number but also with the name of where the code is that caused the problem",
    "start": "1435520",
    "end": "1441520"
  },
  {
    "text": "that's fantastic except there's something about this code",
    "start": "1441520",
    "end": "1447240"
  },
  {
    "text": "that's not really good my bad function that I defined",
    "start": "1447240",
    "end": "1452520"
  },
  {
    "text": "because it's a method it's going to be evaluated every time it's",
    "start": "1452520",
    "end": "1457559"
  },
  {
    "text": "called and I'm saying on the right hand side of my equals here that I have some",
    "start": "1457559",
    "end": "1463240"
  },
  {
    "text": "function right it is going to generate a new function every time",
    "start": "1463240",
    "end": "1468880"
  },
  {
    "text": "I try to use this uh this code we don't",
    "start": "1468880",
    "end": "1474919"
  },
  {
    "text": "want to do that that's not that's not a good use of resources on the jbm yeah",
    "start": "1474919",
    "end": "1480360"
  },
  {
    "text": "they're short-lived objects and allocations are cheap and all that but you know why why why do that",
    "start": "1480360",
    "end": "1487679"
  },
  {
    "text": "so we do want to stick with defa but instead we just want to use regular",
    "start": "1487679",
    "end": "1492720"
  },
  {
    "text": "method syntax not function syntax and let the Ada expansion Magic work for",
    "start": "1492720",
    "end": "1499799"
  },
  {
    "text": "us when we use this bottom example here where we just pass in some int as an",
    "start": "1499799",
    "end": "1506039"
  },
  {
    "text": "argument to a method and then we perform the behavior inside of our method we get stack traces that are much",
    "start": "1506039",
    "end": "1514399"
  },
  {
    "start": "1511025",
    "end": "1511025"
  },
  {
    "text": "more usable you have to write code like this if you're going to deploy in production I'm telling you this now",
    "start": "1514399",
    "end": "1521840"
  },
  {
    "text": "no know the Dynamics of the language that you're working with so you",
    "start": "1521840",
    "end": "1527360"
  },
  {
    "text": "understand when things go wrong wrong how to understand and you know",
    "start": "1527360",
    "end": "1533159"
  },
  {
    "text": "deconstruct the problem through your stack traces so what are the benefits here the",
    "start": "1533159",
    "end": "1540799"
  },
  {
    "start": "1537025",
    "end": "1537025"
  },
  {
    "text": "benefits are we can't close over variables when we use a method can we we",
    "start": "1540799",
    "end": "1546720"
  },
  {
    "text": "can't we can call or use something that's you know um defined at the class",
    "start": "1546720",
    "end": "1553440"
  },
  {
    "text": "level don't you know if you can avoid that sort of thing in general that's probably a good thing that's where you",
    "start": "1553440",
    "end": "1560120"
  },
  {
    "text": "tend to run into thread safety issues right whenever you define things at the top of a class if you can keep them",
    "start": "1560120",
    "end": "1567159"
  },
  {
    "text": "local to a method you're going to be in much better shape um internal variables or operand",
    "start": "1567159",
    "end": "1574279"
  },
  {
    "text": "you know passed in as opposed to things that you're just referencing from somewhere else hopefully you get better",
    "start": "1574279",
    "end": "1580679"
  },
  {
    "text": "stack traces it's much more debuggable you can put a breakpoint on the method",
    "start": "1580679",
    "end": "1585880"
  },
  {
    "text": "doesn't matter that got lifted in as a is a function it's still going to break on that method that's",
    "start": "1585880",
    "end": "1592720"
  },
  {
    "text": "good and it's more testable because you can just write unit tests against that method and make sure the the basic",
    "start": "1592720",
    "end": "1599399"
  },
  {
    "text": "behavior that you were trying to put into a Lambda in isolation works as",
    "start": "1599399",
    "end": "1604960"
  },
  {
    "text": "expected you have easier maintenance you now can look at the code and see that you know I'm I'm calling",
    "start": "1604960",
    "end": "1614600"
  },
  {
    "text": "this bad function as opposed to mentally parsing what what was supposed to be happening",
    "start": "1614600",
    "end": "1621240"
  },
  {
    "text": "there and you have reusability so rule thumb keep your",
    "start": "1621240",
    "end": "1628520"
  },
  {
    "start": "1625025",
    "end": "1625025"
  },
  {
    "text": "Lambda usage to the smallest possible use cases the smallest Expressions you",
    "start": "1628520",
    "end": "1633720"
  },
  {
    "text": "can think of yes you can use lambdas if you want to just do you know add one to",
    "start": "1633720",
    "end": "1638799"
  },
  {
    "text": "every value anybody can figure that out and generally speaking you probably not going to have a bug there right unless",
    "start": "1638799",
    "end": "1645399"
  },
  {
    "text": "you have to worry about things like thread safety and yeah but for those smallest examples yes go",
    "start": "1645399",
    "end": "1652240"
  },
  {
    "text": "ahead and use a Lambda you're not going to want to go through this process of you know using a method or something like that in every case but know the",
    "start": "1652240",
    "end": "1661120"
  },
  {
    "text": "threshold have an idea internally of what the threshold is where you want to say all right this Lambda is starting to",
    "start": "1661120",
    "end": "1667960"
  },
  {
    "text": "get complex I want to pull this out I want to test it by itself I want to have stack traces that are usable and be able",
    "start": "1667960",
    "end": "1674000"
  },
  {
    "text": "to debug all this right know that through threshold for me if it's more than one line it",
    "start": "1674000",
    "end": "1680279"
  },
  {
    "text": "gets pulled out as language creators this is on",
    "start": "1680279",
    "end": "1687080"
  },
  {
    "start": "1682025",
    "end": "1682025"
  },
  {
    "text": "us this excitement about lambdas can't be allowed to just Wayne this excitement",
    "start": "1687080",
    "end": "1692279"
  },
  {
    "text": "about functional programming it's a really big deal and we have to provide",
    "start": "1692279",
    "end": "1697519"
  },
  {
    "text": "you with the tooling and the resources that you're going to need so that you can take advantage of this in production",
    "start": "1697519",
    "end": "1703600"
  },
  {
    "text": "and not feel like oh man uh why did I go and use lambdas you know why did I go",
    "start": "1703600",
    "end": "1709240"
  },
  {
    "text": "with you know a language that's supporting this stuff that I keep hurting myself with at type safe we're",
    "start": "1709240",
    "end": "1715279"
  },
  {
    "text": "very focused on what we call the developer experience anybody who's uh gone to our",
    "start": "1715279",
    "end": "1721039"
  },
  {
    "text": "website recently we have a new tool called the activator it used to be that if you wanted to start using Scala you",
    "start": "1721039",
    "end": "1726760"
  },
  {
    "text": "had to download all these individual tools or maybe use appg whatever it wasn't the greatest",
    "start": "1726760",
    "end": "1732279"
  },
  {
    "text": "developer experience and we know that we hired somebody named James Ward who came into our company and immediately ident",
    "start": "1732279",
    "end": "1738200"
  },
  {
    "text": "ified this as one of our biggest problems an activator solves this now we're focused on being able to get you",
    "start": "1738200",
    "end": "1744720"
  },
  {
    "text": "up and running building an application and either play framework or AA there's all kinds of templates that we're",
    "start": "1744720",
    "end": "1749840"
  },
  {
    "text": "building for this you know as easily as possible the developer experience for",
    "start": "1749840",
    "end": "1755679"
  },
  {
    "text": "what happens after you write the code we all have to do a better job of the language creators be involved in your",
    "start": "1755679",
    "end": "1762440"
  },
  {
    "text": "community whether it's with the Java JCP process the jsrs uh whether it's in the",
    "start": "1762440",
    "end": "1768600"
  },
  {
    "text": "Scala mailing lists the closure mailing lists the J Ruby Charles Nutter is extremely accessible very very great guy",
    "start": "1768600",
    "end": "1776480"
  },
  {
    "text": "so be involved with these communities help them make you better with your",
    "start": "1776480",
    "end": "1784200"
  },
  {
    "text": "lambdas thank you uh it was actually a pretty short talk anybody have any questions okay personally uh the",
    "start": "1784200",
    "end": "1791880"
  },
  {
    "text": "question is can I talk about the ID experience across the three major ones such is net beans uh intelligence J",
    "start": "1791880",
    "end": "1798720"
  },
  {
    "text": "Eclipse I can't particularly from java because I personally use Sublime",
    "start": "1798720",
    "end": "1804919"
  },
  {
    "text": "Text I don't know if anybody's everever heard of Sublime Text it's a really awesome editor I'm a huge fan",
    "start": "1804919",
    "end": "1811720"
  },
  {
    "text": "um and my experience with Java 8 is fairly limited so I wrote my Java 8",
    "start": "1811720",
    "end": "1818519"
  },
  {
    "text": "inside Sublime and I didn't use the debugger that's inside of net beans or eclipse or intellig now for Scala I can",
    "start": "1818519",
    "end": "1825000"
  },
  {
    "text": "tell you that the debugger support and Scala IDE and which is Eclipse base and",
    "start": "1825000",
    "end": "1831600"
  },
  {
    "text": "um intell are both very very good if you set break points you can step through",
    "start": "1831600",
    "end": "1837960"
  },
  {
    "text": "your Lambda but again it's how you write your Lambda and what's inside of it you know if you've got multiple things on a",
    "start": "1837960",
    "end": "1845640"
  },
  {
    "text": "single Source line what you can do stepping is going to keep showing you",
    "start": "1845640",
    "end": "1851480"
  },
  {
    "text": "the same Source line for all the operations that resulted in that single line of code right the bite code is",
    "start": "1851480",
    "end": "1857639"
  },
  {
    "text": "different but the source line wasn't this is actually something to",
    "start": "1857639",
    "end": "1862840"
  },
  {
    "text": "think about anytime you're doing something that is metaprogramming or dsls embedded dsls if you're going to",
    "start": "1862840",
    "end": "1870840"
  },
  {
    "text": "write something where the compiler is going to take liberties with your code to result in bite code that could be",
    "start": "1870840",
    "end": "1877360"
  },
  {
    "text": "completely different from the source they can be very difficult to debug",
    "start": "1877360",
    "end": "1883200"
  },
  {
    "text": "because you've got the source you've got one line you're sitting there and saying step over step over and it's just staying there on that one line is it goes through all the bite codes it's got",
    "start": "1883200",
    "end": "1889440"
  },
  {
    "text": "to you know deal with for that single you know operation you were doing that got blown up into a bunch of bites bite",
    "start": "1889440",
    "end": "1895880"
  },
  {
    "text": "codes so keep that in mind the question was how are methods exposed as functions",
    "start": "1895880",
    "end": "1902039"
  },
  {
    "text": "in the Java context how does Ada expansion happened uh I'm really excited I got to meet Brian gets this morning",
    "start": "1902039",
    "end": "1908080"
  },
  {
    "text": "he's a personal hero of mine I'm a big fan of you know jcip Java concurrency and practice the book he wrote back in",
    "start": "1908080",
    "end": "1913639"
  },
  {
    "text": "2006 and I asked him this question I asked him you know how are is Ada expansion going to be supported and he",
    "start": "1913639",
    "end": "1919760"
  },
  {
    "text": "said yes so this is a good thing you're going to be able to use methods and they will be lifted as functions in",
    "start": "1919760",
    "end": "1926720"
  },
  {
    "text": "Java the implementation details of method handles and Sams in the particular case",
    "start": "1926720",
    "end": "1933880"
  },
  {
    "text": "of of lambdas Alex is back there I could see him uh I hope I'm getting this somewhat right but this isn't something",
    "start": "1933880",
    "end": "1939720"
  },
  {
    "text": "I know deeply from java 8 um it it's using method handles under",
    "start": "1939720",
    "end": "1945039"
  },
  {
    "text": "the covers to represent this l Lambda right and as long as you have a method",
    "start": "1945039",
    "end": "1954399"
  },
  {
    "text": "that that has um a value you know let's say one parameter it can be lifted I",
    "start": "1954399",
    "end": "1961440"
  },
  {
    "text": "don't know how a method that has multiple arguments can be used for a",
    "start": "1961440",
    "end": "1967559"
  },
  {
    "text": "Lambda uh for lifting in Java uh he I",
    "start": "1967559",
    "end": "1972840"
  },
  {
    "text": "think that he said that you could have multiple multiple arguments in a method that's going to be lifted and Alex is",
    "start": "1972840",
    "end": "1977880"
  },
  {
    "text": "nodding so that's right uh I don't know how the values are passed as operands",
    "start": "1977880",
    "end": "1984159"
  },
  {
    "text": "when only the first one represents the value from The Collection that you're mapping over so Alex is going to be",
    "start": "1984159",
    "end": "1991679"
  },
  {
    "text": "giving a talk about lambda's I think tomorrow morning yeah and he'll be talking a lot about the Dynamics of how",
    "start": "1991679",
    "end": "1997760"
  },
  {
    "text": "they're implemented and stuff like that so he'll have answers for you about that",
    "start": "1997760",
    "end": "2003120"
  },
  {
    "text": "does when you Define it as a function I'm sorry the question is when you define a method can other classes and",
    "start": "2006000",
    "end": "2013519"
  },
  {
    "text": "other uh yeah can they use it yes as long as the accessibility is public",
    "start": "2013519",
    "end": "2018720"
  },
  {
    "text": "right if you limit the accessibility it's just like any other method right one thing that we tend to ascribe to in",
    "start": "2018720",
    "end": "2026120"
  },
  {
    "text": "the scholar Community is that we want to write code that's expression oriented we want to have elemental Atomic pieces of",
    "start": "2026120",
    "end": "2034240"
  },
  {
    "text": "of code of behavior in these small chunks that just return a value they do one thing return a value do one thing",
    "start": "2034240",
    "end": "2040880"
  },
  {
    "text": "return a value and then build up from these libraries of expression oriented",
    "start": "2040880",
    "end": "2046399"
  },
  {
    "text": "functions you know more complex functionality it's very reusable uh and very",
    "start": "2046399",
    "end": "2053560"
  },
  {
    "text": "testable as you add them together and start building things it does make your tests a little more complex but they",
    "start": "2053560",
    "end": "2059520"
  },
  {
    "text": "would be anyway if that was just one method doing all those things right so but having those in little itty bitty",
    "start": "2059520",
    "end": "2065720"
  },
  {
    "text": "pieces you know makes a big difference um I I would assume it's the same way for Java maybe a little more verbose but",
    "start": "2065720",
    "end": "2073240"
  },
  {
    "text": "you know you still don't want to have big long complex methods right you want to have small ones I will the question",
    "start": "2073240",
    "end": "2079839"
  },
  {
    "text": "was uh I mentioned that I'm not a huge fan of JavaScript um and uh I I",
    "start": "2079839",
    "end": "2084919"
  },
  {
    "text": "mentioned it has some issues with the way it does functional programming um so could I elaborate on that and uh I'd",
    "start": "2084919",
    "end": "2092520"
  },
  {
    "text": "rather not I will say this referential transparency as",
    "start": "2092520",
    "end": "2098320"
  },
  {
    "text": "described JavaScript you have no guarantees of that it will be interesting actually in when we talk about nasorn uh I've been saying it",
    "start": "2098320",
    "end": "2106160"
  },
  {
    "text": "wrong all this time I have to make sure I say it correctly it's good to know that you know where that word came from",
    "start": "2106160",
    "end": "2111320"
  },
  {
    "text": "um it's going to be interesting to to me to see how the Dynamics of JavaScript are maintained on the jvm you know is",
    "start": "2111320",
    "end": "2119440"
  },
  {
    "text": "this is this lack of referential transparency going to be included in the implementation on the jvm when everybody",
    "start": "2119440",
    "end": "2126200"
  },
  {
    "text": "knows that it doesn't make any sense the fact that I'm operating on",
    "start": "2126200",
    "end": "2131560"
  },
  {
    "text": "something shouldn't change that value if I want to result in something new right",
    "start": "2131560",
    "end": "2137480"
  },
  {
    "text": "if I'm doing something to something to get another value should I change what was there in place I don't want to I",
    "start": "2137480",
    "end": "2145560"
  },
  {
    "text": "never want to do that rich hickey the creator of closure has this really great way of talking",
    "start": "2145560",
    "end": "2152640"
  },
  {
    "text": "about value versus identity right value is the point in in your HEAP where the",
    "start": "2152640",
    "end": "2159520"
  },
  {
    "text": "value exists if you have a five a number five that's in your HEAP as an INT or an integer I'm sorry um that is the value",
    "start": "2159520",
    "end": "2168280"
  },
  {
    "text": "right you never want that to change the identity what is the name of that five",
    "start": "2168280",
    "end": "2174880"
  },
  {
    "text": "whether you call it Foo whether you call it my int whatever you can totally change that to point to other places but",
    "start": "2174880",
    "end": "2181240"
  },
  {
    "text": "you never want to change that five because what if somebody else is relying on that five being in that exact memory",
    "start": "2181240",
    "end": "2186839"
  },
  {
    "text": "space that's how you get yourself into concurrency issues right so value versus",
    "start": "2186839",
    "end": "2193319"
  },
  {
    "text": "identity JavaScript is terrible about",
    "start": "2193319",
    "end": "2198040"
  },
  {
    "text": "this okay well thank you very much [Applause]",
    "start": "2200520",
    "end": "2207920"
  },
  {
    "text": "[Music]",
    "start": "2208900",
    "end": "2211999"
  }
]