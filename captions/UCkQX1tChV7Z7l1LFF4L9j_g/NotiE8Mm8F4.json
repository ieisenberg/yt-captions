[
  {
    "text": "welcome everyone thanks for having me over here Peter and NQ con this talk--i",
    "start": "4030",
    "end": "10990"
  },
  {
    "text": "says might have the sort of peculiar title from markoulis to Microsystems but now I'll try to explain what I mean",
    "start": "10990",
    "end": "16869"
  },
  {
    "text": "throughout this in essence it's track history it's a talk about but marker services but from an architectural and",
    "start": "16869",
    "end": "23890"
  },
  {
    "text": "especially distributed systems perspective so we get a little let's get",
    "start": "23890",
    "end": "29829"
  },
  {
    "text": "right into it we've been spoiled by by the once believed almighty monolith hail",
    "start": "29829",
    "end": "35680"
  },
  {
    "text": "monolith right with this single seek sequel database and one thread being",
    "start": "35680",
    "end": "41260"
  },
  {
    "text": "spawned per request and and and sort of this like this strong coupling and that sort of has given us survey a",
    "start": "41260",
    "end": "48630"
  },
  {
    "text": "environment where we can where we could assume one single now essentially that",
    "start": "48630",
    "end": "53710"
  },
  {
    "text": "we are like you full full control over time and there's just one present you can make a lot of assumptions and",
    "start": "53710",
    "end": "60730"
  },
  {
    "text": "simplify the world quite a lot by by being allowed to have such assumptions",
    "start": "60730",
    "end": "67270"
  },
  {
    "text": "but the problem is that it's really a fictional or a fairy tale world really and and it's and it's it's we're sort of",
    "start": "67270",
    "end": "74620"
  },
  {
    "text": "living in this illusion that this is real life but it's not really and it's",
    "start": "74620",
    "end": "80350"
  },
  {
    "text": "it's it's it's robbing world where we could at least we think that we could so comfortably for forgetful forget about",
    "start": "80350",
    "end": "87250"
  },
  {
    "text": "the University classes and distributed systems that we learn in ten twenty years ago",
    "start": "87250",
    "end": "92700"
  },
  {
    "text": "well knock knock who's there reality we have been living and in an",
    "start": "92700",
    "end": "99580"
  },
  {
    "text": "illusion quite often quite far from reality actually it's just to look around and see I mean the the systems",
    "start": "99580",
    "end": "105909"
  },
  {
    "text": "that we are built in this monolithic simplified world doesn't really match any of this is anyway I mean how the",
    "start": "105909",
    "end": "112060"
  },
  {
    "text": "other world actually works and I'll explain what I mean by that throughout this this this talk you know today most",
    "start": "112060",
    "end": "119200"
  },
  {
    "text": "applications are deployed on everything from you know mobile devices to to soft",
    "start": "119200",
    "end": "124540"
  },
  {
    "text": "offer running and multi-core often quad-core processors now nowadays but",
    "start": "124540",
    "end": "130239"
  },
  {
    "text": "all the way up to this huge cloud environments we're running thousands of nose often eight to sixteen core machines and",
    "start": "130239",
    "end": "137180"
  },
  {
    "text": "where user sir expects millisecond response times uses are extremely picky",
    "start": "137180",
    "end": "143300"
  },
  {
    "text": "and demanding that nowadays and and and reliability has to be I mean close to",
    "start": "143300",
    "end": "148520"
  },
  {
    "text": "one to walk to one hundred percent is of course not physically possible but we need to get quite far there if the",
    "start": "148520",
    "end": "156860"
  },
  {
    "text": "system's down for too long I mean users will go to a competitor and you will lose business in the end and and so it's",
    "start": "156860",
    "end": "164420"
  },
  {
    "text": "a fact that traditional architectures and the way we build software up till this point or a lot at least up to the",
    "start": "164420",
    "end": "170210"
  },
  {
    "text": "point by five seven in some cases ten years ago simply does not cut it anymore",
    "start": "170210",
    "end": "175850"
  },
  {
    "text": "we need new tools and new ways of thinking new ways of modeler of the world in software in essence we can't",
    "start": "175850",
    "end": "183620"
  },
  {
    "text": "make the horse faster any longer and we need cars for where we're going",
    "start": "183620",
    "end": "188960"
  },
  {
    "text": "so it's really time for us to wake up time to retire this monolith and and so",
    "start": "188960",
    "end": "194000"
  },
  {
    "text": "start decomposing the system so into discrete services that can be scaled individually that can be that can fail",
    "start": "194000",
    "end": "200480"
  },
  {
    "text": "individually it can be replicated individually as also that can give gives",
    "start": "200480",
    "end": "205880"
  },
  {
    "text": "us tools to scale the organization which is lot what micro services is all is all about it's not just an architectural",
    "start": "205880",
    "end": "211910"
  },
  {
    "text": "patrimony meet time to mark it with the larger organization so these services",
    "start": "211910",
    "end": "218780"
  },
  {
    "text": "have have so have had men have had many to knit names over the years we've sort",
    "start": "218780",
    "end": "224000"
  },
  {
    "text": "of done full circle once again as an industry if you've been around for more than ten years um and you see the signs",
    "start": "224000",
    "end": "229730"
  },
  {
    "text": "we're back to square one again but I think we were getting a little bit",
    "start": "229730",
    "end": "235970"
  },
  {
    "text": "better each time around so so to speak and I also think it's important even though micro service is extremely hard",
    "start": "235970",
    "end": "241730"
  },
  {
    "text": "to not just drink the kool-aid micro services come with the cost and and and you need to sit down and look at what",
    "start": "241730",
    "end": "248570"
  },
  {
    "text": "you actually want to achieve and see is it worth to pay that price very often it",
    "start": "248570",
    "end": "253670"
  },
  {
    "text": "is but sometimes it is it depends on team size and and and your reliability",
    "start": "253670",
    "end": "259190"
  },
  {
    "text": "guarantees and and and etc etc and it's really the fact that no one really wants",
    "start": "259190",
    "end": "265250"
  },
  {
    "text": "a micro services it is just as concurrency just as distributed systems just as eventual consistency etc it's a",
    "start": "265250",
    "end": "272539"
  },
  {
    "text": "necessary evil it's a means to an end not just something that we should just",
    "start": "272539",
    "end": "277850"
  },
  {
    "text": "apply to everything because it's cool and because we read about it on info cube but today we got to take a look at",
    "start": "277850",
    "end": "285650"
  },
  {
    "text": "micro service system from Foreman from not to do from the sort of scaling the organization perspective but but from an",
    "start": "285650",
    "end": "291470"
  },
  {
    "text": "architectural perspective and put it in its true context distributive systems",
    "start": "291470",
    "end": "296750"
  },
  {
    "text": "okay so let's say we want to slice the weather model if now we want to slice",
    "start": "296750",
    "end": "302390"
  },
  {
    "text": "that up into into individual discrete services for scaling for reliability etc",
    "start": "302390",
    "end": "308530"
  },
  {
    "text": "let's it might be a classy je application servlet CG bees have been",
    "start": "308530",
    "end": "314150"
  },
  {
    "text": "using Oracle as a sequel database or whatever deployed in WebLogic server or something like that so very often too",
    "start": "314150",
    "end": "322130"
  },
  {
    "text": "often I say we end up with something like this we have is a single instance services they are communicating over",
    "start": "322130",
    "end": "329180"
  },
  {
    "text": "synchronous HTTP sometimes over s most often over asked you each one run in a",
    "start": "329180",
    "end": "335000"
  },
  {
    "text": "docker container and then spin spin spin it up in the cloud etc with using",
    "start": "335000",
    "end": "340870"
  },
  {
    "text": "regular crud we create read update delete talk them talking through JPA",
    "start": "340870",
    "end": "346400"
  },
  {
    "text": "down into sort of often one single database who would discrete schemas would must be okay absolutely if you",
    "start": "346400",
    "end": "353120"
  },
  {
    "text": "know that you can't cheat and call into each other's serve you of the world but",
    "start": "353120",
    "end": "359410"
  },
  {
    "text": "this is often now when we're out there so seen us or state-of-the-art the problem is that we haven't what",
    "start": "359410",
    "end": "367370"
  },
  {
    "text": "we've done is that we built it as ourselves to set of single instance micro model is what that's that's what I",
    "start": "367370",
    "end": "373789"
  },
  {
    "text": "call micro lifts where source state and behavior is still capable them and we",
    "start": "373789",
    "end": "378800"
  },
  {
    "text": "have synchronous execution across throughout you know calling down to the",
    "start": "378800",
    "end": "384080"
  },
  {
    "text": "database and synchronous communication across these services essentially taking",
    "start": "384080",
    "end": "389900"
  },
  {
    "text": "every method dispatch and just making it into a rest call I mean you might be able to scale the organization through",
    "start": "389900",
    "end": "396169"
  },
  {
    "text": "well-defined protocols but you you won't reap any paper if any of the Ben it's from an architectural standpoint",
    "start": "396169",
    "end": "403010"
  },
  {
    "text": "that market services actually can can give us and that's what I'm are talking",
    "start": "403010",
    "end": "408150"
  },
  {
    "text": "about it I call the macro list for a lot for a lot of reasons one of them is that they have extremely sharp edges right",
    "start": "408150",
    "end": "414660"
  },
  {
    "text": "you should expect to get hurt if you get if you start playing with these things and you know by definition they are not",
    "start": "414660",
    "end": "421320"
  },
  {
    "text": "elastic because the single instance can't scale and they are not resilient because a single instance is cancer of",
    "start": "421320",
    "end": "429360"
  },
  {
    "text": "self feel i mean you will sure it can come back online but you will lose business during during the downtime all",
    "start": "429360",
    "end": "436500"
  },
  {
    "text": "right so just relying on a single instance just won't cut it so in this in",
    "start": "436500",
    "end": "441630"
  },
  {
    "text": "the spirit of carl he would call here is one cell the one actor is no actor actors coming system i say one micro",
    "start": "441630",
    "end": "447060"
  },
  {
    "text": "service is no micro service micro service they come in systems okay just",
    "start": "447060",
    "end": "453360"
  },
  {
    "text": "like we humans i mean we we work best when we even though all of our human all of us are autonomous we think in in an",
    "start": "453360",
    "end": "461880"
  },
  {
    "text": "autonomous fashion we act independently etc of each other but we we need to",
    "start": "461880",
    "end": "468000"
  },
  {
    "text": "communicate and collaborate with others to solve to solve problems and it's in this communication and when we help each",
    "start": "468000",
    "end": "474750"
  },
  {
    "text": "help each other out that we can really solve hard problems it's also actually",
    "start": "474750",
    "end": "480210"
  },
  {
    "text": "ending in the communication in etc that's all the most of the problems arise right them intermón sir through",
    "start": "480210",
    "end": "490620"
  },
  {
    "text": "not understanding each other etc and I think that also all the servers and matches we're very very well into micro",
    "start": "490620",
    "end": "496470"
  },
  {
    "text": "services or key architectures as well that it's it's it's both survey",
    "start": "496470",
    "end": "503030"
  },
  {
    "text": "something is a really good tool but it also something that can post a lot of a",
    "start": "503030",
    "end": "509430"
  },
  {
    "text": "lot of challenges and the thing is what's hard in micro service designs really not the micro service itself it's",
    "start": "509430",
    "end": "515130"
  },
  {
    "text": "all the things around them I'm sort of things like discovery coordination security replication data consistency",
    "start": "515130",
    "end": "521669"
  },
  {
    "text": "failover deployment integration with other systems etc etc right and it's",
    "start": "521669",
    "end": "528720"
  },
  {
    "text": "also true that as soon as reserve exit the boundary of this safe world that the of service kids or be we we enter the",
    "start": "528720",
    "end": "537959"
  },
  {
    "text": "Rubies wild ocean of non-determinism this the craziness that we call just",
    "start": "537959",
    "end": "543360"
  },
  {
    "text": "distributed systems where you know distribute systems is really really hard it's worth where systems can you know",
    "start": "543360",
    "end": "550260"
  },
  {
    "text": "fail in the most spectacular ways you know when we're messages get dropped reordered garbled and and we're failure",
    "start": "550260",
    "end": "558660"
  },
  {
    "text": "detection that's understanding if a buddy is down it's it's nothing but a",
    "start": "558660",
    "end": "563820"
  },
  {
    "text": "guessing game it's impossible to really know for sure if the one you're talking",
    "start": "563820",
    "end": "569399"
  },
  {
    "text": "to is down forever if he was just you know do under heavy load or if we just",
    "start": "569399",
    "end": "574589"
  },
  {
    "text": "we'll be back and we'll be back in a second it's doing GC etc we're actually we'll never come back up so you need to",
    "start": "574589",
    "end": "581399"
  },
  {
    "text": "start guessing and you need to take educated bets on on who's up and off",
    "start": "581399",
    "end": "586860"
  },
  {
    "text": "etcetera this also it's it might sound pretty terrifying this is the good thing is this also the world that gives a",
    "start": "586860",
    "end": "592709"
  },
  {
    "text": "solution for these all for all these hard problems solutions for resilience",
    "start": "592709",
    "end": "598920"
  },
  {
    "text": "for elasticity etc simply because a single instance can't help us much with",
    "start": "598920",
    "end": "604529"
  },
  {
    "text": "that you need to start introducing the network so I really think the system's",
    "start": "604529",
    "end": "612690"
  },
  {
    "text": "start need to start exploiting reality you know and one of the main benefits of",
    "start": "612690",
    "end": "618720"
  },
  {
    "text": "microservices it gives us a lot of good tools sort of how to exploit reality to",
    "start": "618720",
    "end": "625019"
  },
  {
    "text": "build systems that really mimics how the world actually works and that and that",
    "start": "625019",
    "end": "630390"
  },
  {
    "text": "includes both its constraints and its opportunities and you know there's power",
    "start": "630390",
    "end": "636570"
  },
  {
    "text": "scene constraints and then powers can be liberating so and one of these",
    "start": "636570",
    "end": "642870"
  },
  {
    "text": "constraints is for example that information has has latency it's the fact that information simply cannot",
    "start": "642870",
    "end": "648269"
  },
  {
    "text": "travel faster than the speed of light and this can often travels considerably",
    "start": "648269",
    "end": "653519"
  },
  {
    "text": "slower this means the communication of information has latency and as Pat Helen",
    "start": "653519",
    "end": "661829"
  },
  {
    "text": "says that the contents of a message are net are always from the past when",
    "start": "661829",
    "end": "667260"
  },
  {
    "text": "when it arrives - you told us represents another they serve another now",
    "start": "667260",
    "end": "672930"
  },
  {
    "text": "essentially it always you know they represent and others are present something that already happened and in a",
    "start": "672930",
    "end": "681240"
  },
  {
    "text": "way sir we're also looking into the past it's a fact that reality is simply not",
    "start": "681240",
    "end": "687300"
  },
  {
    "text": "consistent not in the real world in this monolithic world sure we could we can often assume that to some extent at",
    "start": "687300",
    "end": "694860"
  },
  {
    "text": "least if you multi-core processors etc I mean sure you can you can try stop the world with locks etcetera but but it's",
    "start": "694860",
    "end": "701130"
  },
  {
    "text": "really not true not even on a single processor nowadays but but it's definitely not true in a distributed",
    "start": "701130",
    "end": "706920"
  },
  {
    "text": "system then this latency is actually very noticeable okay but still we're",
    "start": "706920",
    "end": "713250"
  },
  {
    "text": "trying to sort of hold onto this illusion of that now is is absolute that",
    "start": "713250",
    "end": "719850"
  },
  {
    "text": "there's one single global a consistent present and you know this the cost of",
    "start": "719850",
    "end": "725340"
  },
  {
    "text": "maintaining the solution is very very high it's it's it can be be defined as",
    "start": "725340",
    "end": "730890"
  },
  {
    "text": "two things contention which is like waiting for shared resources to become available after when someone's holding",
    "start": "730890",
    "end": "736560"
  },
  {
    "text": "on to them using them or coherency which is that the work that needs to be done for - for to serve components or",
    "start": "736560",
    "end": "746040"
  },
  {
    "text": "instances or something - to have a common view of the world essentially and this affects daily life I mean if we",
    "start": "746040",
    "end": "753720"
  },
  {
    "text": "think about it it's also one way sort of just just living with the fact or reality but it's a little bit also very",
    "start": "753720",
    "end": "759480"
  },
  {
    "text": "true in computer science and and and the first one contention is is defined by arm dolls law which is the the dot the",
    "start": "759480",
    "end": "766770"
  },
  {
    "text": "dotted line here like that shows that in the fact the effect that contention has",
    "start": "766770",
    "end": "772500"
  },
  {
    "text": "is that it gives us diminishing returns so in this way this way for you right so when you start adding more resources",
    "start": "772500",
    "end": "778680"
  },
  {
    "text": "it's not it doesn't scale linearly but it's it flattens out more and more and",
    "start": "778680",
    "end": "784380"
  },
  {
    "text": "after a while it's not worth adding more resources because the contention eats up all the benefits but the truth is",
    "start": "784380",
    "end": "792180"
  },
  {
    "text": "actually closer to Neal Ginter scale Universal scalability law which which",
    "start": "792180",
    "end": "797520"
  },
  {
    "text": "shows that when you add coherency on top of of the of the contention you can",
    "start": "797520",
    "end": "802530"
  },
  {
    "text": "actually start getting diminishing returns as when just adding more hardware CPUs or nose or whatever it",
    "start": "802530",
    "end": "810390"
  },
  {
    "text": "actually started in tune to decrease in inefficiency and and and and and throughput so and you know I mean it's",
    "start": "810390",
    "end": "819420"
  },
  {
    "text": "latency gets higher it's this illusion cracks me one more and more so there's a",
    "start": "819420",
    "end": "825450"
  },
  {
    "text": "larger difference between the present and the past in distributed systems and",
    "start": "825450",
    "end": "830820"
  },
  {
    "text": "once again that's a quoting Pat hell and in a distributed system you can know where the work is done and you can know",
    "start": "830820",
    "end": "837540"
  },
  {
    "text": "when the work is done but you can never know both okay this is the fact this is",
    "start": "837540",
    "end": "844140"
  },
  {
    "text": "something that we need to embrace and work with not against and we need to one",
    "start": "844140",
    "end": "849750"
  },
  {
    "text": "way of is like the architecture systems that we try to minimize coupling and communication you know in a coordination",
    "start": "849750",
    "end": "857700"
  },
  {
    "text": "is that water air said it's extremely expensive and it's even more expensive in a distributed system because the wait",
    "start": "857700",
    "end": "863640"
  },
  {
    "text": "times are longer and stopped the world is longer etc and it really puts an upper-bound sort of ceiling or what can",
    "start": "863640",
    "end": "870510"
  },
  {
    "text": "be done in terms of scalability elasticities your reliability and you know etc also things like in low latency",
    "start": "870510",
    "end": "878220"
  },
  {
    "text": "and things so you know the need for coordination means that individual services can't make process progress",
    "start": "878220",
    "end": "884670"
  },
  {
    "text": "individually but has to wait okay and i think it's very important that we that we preserve understand the words are",
    "start": "884670",
    "end": "892950"
  },
  {
    "text": "really unnecessary they can only do harm that we need to start enjoying the silence to quote Depeche Mode here and",
    "start": "892950",
    "end": "898800"
  },
  {
    "text": "and and and and it's Bob Monkhouse says write silence it's not only golden it's",
    "start": "898800",
    "end": "904080"
  },
  {
    "text": "seldom misquoted we should just love in a way we need to start to learn to shut",
    "start": "904080",
    "end": "910170"
  },
  {
    "text": "up and then avoid this chapter between the services absolument",
    "start": "910170",
    "end": "916230"
  },
  {
    "text": "to cut it down to a bare minimum at least and it's also the fact that we",
    "start": "916230",
    "end": "921840"
  },
  {
    "text": "have to rely on eventual consistency not because it's cool and because there's a",
    "start": "921840",
    "end": "927300"
  },
  {
    "text": "lot of you know the no sequel database vendors tells us to but because it's a fact of life it's how the world works",
    "start": "927300",
    "end": "933750"
  },
  {
    "text": "really we do once again we shouldn't fight reality we should embrace it and",
    "start": "933750",
    "end": "939090"
  },
  {
    "text": "things will actually become simpler not simple but simpler I think through to",
    "start": "939090",
    "end": "944670"
  },
  {
    "text": "actually reach the goals in the band reap the benefits that we want and once",
    "start": "944670",
    "end": "950640"
  },
  {
    "text": "again no one wants eventual consistency it's a necessary evil it's not cool it's",
    "start": "950640",
    "end": "955740"
  },
  {
    "text": "useful and there are two helpful tools",
    "start": "955740",
    "end": "962700"
  },
  {
    "text": "that will help us with all everything I've talked up to this point now that we'll talk a little bit in more detail",
    "start": "962700",
    "end": "968760"
  },
  {
    "text": "about this is reactive design so embracing the reactive principles of software design and using events first",
    "start": "968760",
    "end": "976830"
  },
  {
    "text": "domain-driven design is finally a great way to model the world that that puts us",
    "start": "976830",
    "end": "981990"
  },
  {
    "text": "on a path towards building systems that embrace reality okay hurry up for that",
    "start": "981990",
    "end": "989210"
  },
  {
    "text": "you don't have a choice we can always leave but yeah",
    "start": "989210",
    "end": "994680"
  },
  {
    "text": "so there's been a lot of confusion around will react with reactive programming is versus reactive systems",
    "start": "994680",
    "end": "1001550"
  },
  {
    "text": "and I mean you know reactive is really hyped that's been and and and too much",
    "start": "1001550",
    "end": "1007520"
  },
  {
    "text": "perhaps I mean same thing with everything that's that's that's that that's hype that it's like reaches peak",
    "start": "1007520",
    "end": "1014120"
  },
  {
    "text": "of you know inflated expectations and then it you know comes down to the real",
    "start": "1014120",
    "end": "1020120"
  },
  {
    "text": "world and and and I we might be there now but but I think there's a lot there's a lot of good things coming out",
    "start": "1020120",
    "end": "1026900"
  },
  {
    "text": "or that it is being overloaded as well right because you know all concepts and",
    "start": "1026900",
    "end": "1033620"
  },
  {
    "text": "ideas need to evolve to stay relevant and and if people you know weave into",
    "start": "1033620",
    "end": "1039380"
  },
  {
    "text": "more more things intuitive something even better might come out but but so I",
    "start": "1039380",
    "end": "1044780"
  },
  {
    "text": "think personally I think reactive programming reactive systems are extremely important both of them but but at different levels in the program all",
    "start": "1044780",
    "end": "1051080"
  },
  {
    "text": "outright or in system design and I'll explain what I mean shortly reactive",
    "start": "1051080",
    "end": "1057650"
  },
  {
    "text": "programming essentially means that come in is a way of building individual",
    "start": "1057650",
    "end": "1062690"
  },
  {
    "text": "services that that have very good performance and utilization as cetera using things like async this",
    "start": "1062690",
    "end": "1069860"
  },
  {
    "text": "asynchronous techniques non-blocking algorithms and things like that back",
    "start": "1069860",
    "end": "1075200"
  },
  {
    "text": "pressure you need to make sure that you have resilience between all your stage you see of the component etc while",
    "start": "1075200",
    "end": "1081380"
  },
  {
    "text": "reactive systems sort of takes a more holistic view of the world and and and",
    "start": "1081380",
    "end": "1086390"
  },
  {
    "text": "and more I mean a full system design we reveal the world and that's what we have serve are are they are articulated in",
    "start": "1086390",
    "end": "1093500"
  },
  {
    "text": "the reactive manifesto however to achieve that you often need to rely on",
    "start": "1093500",
    "end": "1098900"
  },
  {
    "text": "reactive pro pro pro programming but the promise of reactive systems you know building on a message driven foundation",
    "start": "1098900",
    "end": "1105350"
  },
  {
    "text": "is resilience and elasticity is that it fits perfectly with what I'm talking about here today so in but but we",
    "start": "1105350",
    "end": "1112400"
  },
  {
    "text": "actually programming I think it's a very important technique I mean we need to start embracing a synchronicity more and",
    "start": "1112400",
    "end": "1119420"
  },
  {
    "text": "more I believe and and a synchronicity means different things to different people I mean some some think about",
    "start": "1119420",
    "end": "1125870"
  },
  {
    "text": "asynchronous i/o which means that it was essentially is it's all about not blocking threads",
    "start": "1125870",
    "end": "1131990"
  },
  {
    "text": "there's minimizing concurrent contention etc and while asynchronous communication",
    "start": "1131990",
    "end": "1139610"
  },
  {
    "text": "is about not blocking requests so these more which is also extremely important",
    "start": "1139610",
    "end": "1145760"
  },
  {
    "text": "of course them and Surya asynchronous in non-blocking i/o is as I said it's all",
    "start": "1145760",
    "end": "1152060"
  },
  {
    "text": "about being as cost efficient as possible make efficient use of the resources that you have and giving them",
    "start": "1152060",
    "end": "1158060"
  },
  {
    "text": "up when you're worried when you don't use them for others to use ok and and",
    "start": "1158060",
    "end": "1163070"
  },
  {
    "text": "and you know contention we've already seen in in this diagram and all flaws is",
    "start": "1163070",
    "end": "1170240"
  },
  {
    "text": "one of the things that hits you first when it comes to efficiency and and that's why I think I mean being the",
    "start": "1170240",
    "end": "1177320"
  },
  {
    "text": "weakest link in the chain matters so trying to make sure that your whole pipeline is asynchronous all the way",
    "start": "1177320",
    "end": "1183080"
  },
  {
    "text": "it's extremely important and hear things like reactive programming techniques like reactive stream specification of",
    "start": "1183080",
    "end": "1188510"
  },
  {
    "text": "these type of things ARCA streams Oryx Java are these type of techniques really help but but also it's",
    "start": "1188510",
    "end": "1197750"
  },
  {
    "text": "also you know alongside a async I think this is e important to form a reliability and",
    "start": "1197750",
    "end": "1203780"
  },
  {
    "text": "resilience perspective to to embrace back pressure I mean it's it's all about",
    "start": "1203780",
    "end": "1209990"
  },
  {
    "text": "flow controls but it's it's about that a fast producer should not overwhelm a slower consumer essentially and and why",
    "start": "1209990",
    "end": "1218270"
  },
  {
    "text": "why why why why does that matter I found this video on Twitter in a completely",
    "start": "1218270",
    "end": "1224090"
  },
  {
    "text": "different context but I think it really illustrates the need for back pressure",
    "start": "1224090",
    "end": "1229340"
  },
  {
    "text": "very well see these guys they didn't",
    "start": "1229340",
    "end": "1238700"
  },
  {
    "text": "start stand the chance right against the fish here's here's clearly that that I mean having some some sort of way of",
    "start": "1238700",
    "end": "1245240"
  },
  {
    "text": "telling the fish to slow down with then it would be beneficial okay so so so",
    "start": "1245240",
    "end": "1250910"
  },
  {
    "text": "there is a need to have a sort of have a back channel I mean events flow this way you need to have a way of propagating so",
    "start": "1250910",
    "end": "1257660"
  },
  {
    "text": "hands to say I can't keep up please slow down etc and and and here's where the",
    "start": "1257660",
    "end": "1264920"
  },
  {
    "text": "reactor screens specification come seen is it's a specification that was great it was it was started by like that but",
    "start": "1264920",
    "end": "1270890"
  },
  {
    "text": "we invited in your Netflix pivot little Oracle or Twitter and others to to to",
    "start": "1270890",
    "end": "1278240"
  },
  {
    "text": "create sort of joint specification because it's not it's not worth anything if just one library does it everyone",
    "start": "1278240",
    "end": "1285290"
  },
  {
    "text": "needs to participate all the way up to the client that might be the one the serve starting off this this storm of",
    "start": "1285290",
    "end": "1292940"
  },
  {
    "text": "events so if we now apply reactive programming to this market list I mean",
    "start": "1292940",
    "end": "1299720"
  },
  {
    "text": "if you can look some something like this you have this blue dark blue box series",
    "start": "1299720",
    "end": "1306559"
  },
  {
    "text": "that we should wrap the whole thing in in in you know in reactive programming",
    "start": "1306559",
    "end": "1311690"
  },
  {
    "text": "by Vice or making it asynchronous replying back pressure streaming where appropriate etc okay I think we also",
    "start": "1311690",
    "end": "1320179"
  },
  {
    "text": "need to we need to sort of make sure that the way we the way we communicate with the world is asynchronous as",
    "start": "1320179",
    "end": "1326840"
  },
  {
    "text": "possible and also sort of embraces back pressure through asynchronous messaging",
    "start": "1326840",
    "end": "1331880"
  },
  {
    "text": "for example using perhaps car as a message bus or something like that or using streaming as a way to",
    "start": "1331880",
    "end": "1338750"
  },
  {
    "text": "communicate between services not just really relying on synchronous request reply I'm not saying that all that",
    "start": "1338750",
    "end": "1346020"
  },
  {
    "text": "should just be thrown out the window sometimes it fits the use cases very well but it should not be the default",
    "start": "1346020",
    "end": "1351710"
  },
  {
    "text": "communication paradigm between your services so by doing that yeah it can",
    "start": "1351710",
    "end": "1358890"
  },
  {
    "text": "look something like this we have now arrest messaging and streaming along the side by side so I think we're we're",
    "start": "1358890",
    "end": "1365310"
  },
  {
    "text": "getting there but we still have a single instance of this macro service which is by defined with the by definition not",
    "start": "1365310",
    "end": "1371580"
  },
  {
    "text": "scalable and not resilient okay because but it's equally important to understand",
    "start": "1371580",
    "end": "1377760"
  },
  {
    "text": "that micro service does note that that does not come in systems they also come as systems and what and what do I mean",
    "start": "1377760",
    "end": "1385620"
  },
  {
    "text": "by that I mean that in order to build truly reliable micro services we need to think about them as a system in itself a",
    "start": "1385620",
    "end": "1394070"
  },
  {
    "text": "distributive system and that's what I call a micro system so here you have the title of the talk right from markoulis",
    "start": "1394070",
    "end": "1400530"
  },
  {
    "text": "in single incident services to micro systems I don't know I don't know if it",
    "start": "1400530",
    "end": "1406200"
  },
  {
    "text": "works it was just something that we brainstormed up but but you get the",
    "start": "1406200",
    "end": "1412140"
  },
  {
    "text": "picture I hope so we really need to move for a mark of this to mark to micro",
    "start": "1412140",
    "end": "1417450"
  },
  {
    "text": "systems and and one of the first things that we need we need to do here is that we need to separate the stateless",
    "start": "1417450",
    "end": "1423780"
  },
  {
    "text": "behavior in the service from the stateful entity okay and why is that",
    "start": "1423780",
    "end": "1429780"
  },
  {
    "text": "yeah it's because then we can start scaling them alongside to two different accesses they have very different needs",
    "start": "1429780",
    "end": "1436080"
  },
  {
    "text": "and very different server characteristics in how we can and how we can scale them and by doing that we'll",
    "start": "1436080",
    "end": "1442260"
  },
  {
    "text": "look something like this likely we split up this the stateless behavior in this green box here from the stage full",
    "start": "1442260",
    "end": "1448950"
  },
  {
    "text": "entity and then we can start so say you're working with them in different",
    "start": "1448950",
    "end": "1454590"
  },
  {
    "text": "ways so to speak scaling stateless behavior is actually quite easy this is",
    "start": "1454590",
    "end": "1460200"
  },
  {
    "text": "what we see now with Amazon lambda for example yeah the only did this whole service",
    "start": "1460200",
    "end": "1465410"
  },
  {
    "text": "you know trend this all is all about that that you can automatically just",
    "start": "1465410",
    "end": "1472130"
  },
  {
    "text": "just spin up as many instances as you need for the time being and then just",
    "start": "1472130",
    "end": "1478010"
  },
  {
    "text": "scale scale it down you know the whole thing in in in in all the in distributed",
    "start": "1478010",
    "end": "1483110"
  },
  {
    "text": "system design in general is state so scaling stateful entities on the other hand we're not that lucky it's actually",
    "start": "1483110",
    "end": "1490220"
  },
  {
    "text": "a lot harder and and while I'm at it I just have to rant about what people call",
    "start": "1490220",
    "end": "1495710"
  },
  {
    "text": "stateless architectures like I don't think there's there's no such thing really as a stateless architecture it's",
    "start": "1495710",
    "end": "1501290"
  },
  {
    "text": "just someone else's problem you're just delegating it to someone else which we see in one way I might feel nice because",
    "start": "1501290",
    "end": "1508040"
  },
  {
    "text": "you're not responsible anymore but on the other hand you know someone else is and now sitting in their lap hoping for",
    "start": "1508040",
    "end": "1516170"
  },
  {
    "text": "the best so so often I think it's better for the embrace state as part of of the",
    "start": "1516170",
    "end": "1521570"
  },
  {
    "text": "up there of the system because it's really it's actually one of the most fundamental things in your system and",
    "start": "1521570",
    "end": "1526970"
  },
  {
    "text": "fully embrace it and take control over it and manage it in a good way instead it's also a fact that this entity now",
    "start": "1526970",
    "end": "1535150"
  },
  {
    "text": "actually can become an escape route from reality I talk a lot about embracing",
    "start": "1535150",
    "end": "1540590"
  },
  {
    "text": "reality but now we actually have have an opportunity of living in this illusion",
    "start": "1540590",
    "end": "1546380"
  },
  {
    "text": "you know that that that we have full ownership of of time because we have",
    "start": "1546380",
    "end": "1551390"
  },
  {
    "text": "isolated our domain I'll talk more about that you know in a way that we can we can",
    "start": "1551390",
    "end": "1556400"
  },
  {
    "text": "assume that we are the only one that is touching it right so that's can simplify the world a lot for us",
    "start": "1556400",
    "end": "1564430"
  },
  {
    "text": "so now we can start sort of start scaling these the stateless behavior and",
    "start": "1564730",
    "end": "1570650"
  },
  {
    "text": "the stateful entity individually I mean in my it might be that if we have a sort",
    "start": "1570650",
    "end": "1576620"
  },
  {
    "text": "of a very processing in any intensive system which means that you we need to",
    "start": "1576620",
    "end": "1582410"
  },
  {
    "text": "run hundreds of above of stateless services but but",
    "start": "1582410",
    "end": "1589360"
  },
  {
    "text": "it'sit'sit's we but we don't need a in any anywhere close as many as much",
    "start": "1589679",
    "end": "1596429"
  },
  {
    "text": "processing power to persist it right and and in the end in the simplest fashion",
    "start": "1596429",
    "end": "1602039"
  },
  {
    "text": "we we we probably run around two instances here like for for for scaling",
    "start": "1602039",
    "end": "1608760"
  },
  {
    "text": "state any sewing in somewhere one is the main replica that we always talk to",
    "start": "1608760",
    "end": "1613830"
  },
  {
    "text": "while the other one is syrup it's hot standby often that is sufficient but we",
    "start": "1613830",
    "end": "1621240"
  },
  {
    "text": "also have the opportunity here actually to have to have some have multiple masters that that takes rights and and",
    "start": "1621240",
    "end": "1628559"
  },
  {
    "text": "and but then we have to do the work to figure all that out to cook the causality etc a bit in between in the",
    "start": "1628559",
    "end": "1637380"
  },
  {
    "text": "end we're actually doing some work on that now in yanaka persistence and logon that we're using CR DT so I don't know",
    "start": "1637380",
    "end": "1646110"
  },
  {
    "text": "if you know about that it actually detect causality to do master to master",
    "start": "1646110",
    "end": "1651659"
  },
  {
    "text": "replication of the entities but I want I won't go into that here so but in",
    "start": "1651659",
    "end": "1658260"
  },
  {
    "text": "general reactive systems can really help us here just to scale these two row long alongside the these are the two",
    "start": "1658260",
    "end": "1664799"
  },
  {
    "text": "different dimensions here to really make it resilient to make it elastic I mean go to a reactor manifest and read the",
    "start": "1664799",
    "end": "1670679"
  },
  {
    "text": "basics but in in general reactor systems are based on asynchronous message",
    "start": "1670679",
    "end": "1676049"
  },
  {
    "text": "passing now that is sort of the foundation and that gives us a way to build truly loosely coupled system that",
    "start": "1676049",
    "end": "1683070"
  },
  {
    "text": "can be adaptive where you have all these autonomous component that can sort of",
    "start": "1683070",
    "end": "1688559"
  },
  {
    "text": "collaborate where they're where you break free from the strong coupling that that you have because everything's",
    "start": "1688559",
    "end": "1694649"
  },
  {
    "text": "happening in a synchronous fashion and and it all is it's also sort of the base",
    "start": "1694649",
    "end": "1700679"
  },
  {
    "text": "is the foundation for things like isolation and mobility that we'll talk",
    "start": "1700679",
    "end": "1705750"
  },
  {
    "text": "about and mobility through the foundation for forever elasticity and it in essence pacing",
    "start": "1705750",
    "end": "1712080"
  },
  {
    "text": "message passing allows two things allows us to decouple our system into sin in time and and decouple the meantime is",
    "start": "1712080",
    "end": "1720450"
  },
  {
    "text": "what gives us concurrency it can give us concurrency on a single thread through",
    "start": "1720450",
    "end": "1725820"
  },
  {
    "text": "interleaving right that's what nodejs and another event loop style programming",
    "start": "1725820",
    "end": "1731490"
  },
  {
    "text": "malls do and that's good right but it also but but but but that's sort of a",
    "start": "1731490",
    "end": "1737850"
  },
  {
    "text": "little bit more of an of an event based model it's a true message passing allows us to spread it out in space as well so",
    "start": "1737850",
    "end": "1746160"
  },
  {
    "text": "you have if you scale it or scale it or make its or decoupling it in time and space and this and it's decoupling in",
    "start": "1746160",
    "end": "1754530"
  },
  {
    "text": "space that gives distribution and mobility in us and ultimately also elasticity's we start making makes or",
    "start": "1754530",
    "end": "1761130"
  },
  {
    "text": "scaling after multiple cores or multiple machines taking advantage those are all the promise all of the cloud as well as",
    "start": "1761130",
    "end": "1768600"
  },
  {
    "text": "rely reliability you can have more than one source or a party that can take over",
    "start": "1768600",
    "end": "1774570"
  },
  {
    "text": "if another one fails etc and it's all an asynchronous message passing through the",
    "start": "1774570",
    "end": "1780480"
  },
  {
    "text": "essence of reactive systems is also what what gives us what we call location transparency and and and and that and",
    "start": "1780480",
    "end": "1787559"
  },
  {
    "text": "it's that's quite a fascinating subject actually because it what it allows us to",
    "start": "1787559",
    "end": "1793230"
  },
  {
    "text": "do there is we have one single communication abstraction being sending message from A to B that scales across",
    "start": "1793230",
    "end": "1800940"
  },
  {
    "text": "all dimensions of scale it's the same if you communicate I mean within the core",
    "start": "1800940",
    "end": "1806419"
  },
  {
    "text": "within I mean sir bits between course between sockets between different CPUs between containers between servers",
    "start": "1806419",
    "end": "1813870"
  },
  {
    "text": "between racks between data centers I mean across the world is the same abstractions the same programming model",
    "start": "1813870",
    "end": "1821040"
  },
  {
    "text": "you don't need to I mean you know sort of use for example threads and locks you know four four four or even regular Java",
    "start": "1821040",
    "end": "1827549"
  },
  {
    "text": "concurrency for for working with with within within the processors and as soon as you want to talk across they need to",
    "start": "1827549",
    "end": "1833309"
  },
  {
    "text": "bring in message oriented middleware or whatever some other USB or whatever we're all sockets but actually lives the",
    "start": "1833309",
    "end": "1841710"
  },
  {
    "text": "abstraction layer and unifies it all so one way working across all dimensions of",
    "start": "1841710",
    "end": "1846900"
  },
  {
    "text": "scale and the nice thing here now is that gives the runtime the ability to change that the topology asks the system",
    "start": "1846900",
    "end": "1854280"
  },
  {
    "text": "is running and then this Indian in this talk we talk about microservices it actually can",
    "start": "1854280",
    "end": "1860059"
  },
  {
    "text": "have too much then services running on a single machine just in two different course and and it and the communicate",
    "start": "1860059",
    "end": "1867169"
  },
  {
    "text": "wouldn't with message passing and then I mean the next second it has migrated over to another machine the same",
    "start": "1867169",
    "end": "1872419"
  },
  {
    "text": "communication abstraction works for the for the sender that actually communicates nothing has changed it's",
    "start": "1872419",
    "end": "1878870"
  },
  {
    "text": "now out of process okay but no one needs to really know the latency of course",
    "start": "1878870",
    "end": "1883880"
  },
  {
    "text": "willing will increase but that's the really only way you should know so it gives a lot of a lot of freedom in order",
    "start": "1883880",
    "end": "1889700"
  },
  {
    "text": "to to build dynamic systems that change as they are being used which is really a",
    "start": "1889700",
    "end": "1894919"
  },
  {
    "text": "must in most cloud environments today because you have no idea I mean how predictable that the the usage patterns",
    "start": "1894919",
    "end": "1902690"
  },
  {
    "text": "will be and in a location all transparency",
    "start": "1902690",
    "end": "1907820"
  },
  {
    "text": "location transparency really is what enables mobility dynamic dynamic City and an adaptability and and it's it's",
    "start": "1907820",
    "end": "1915830"
  },
  {
    "text": "really what gives us serve as I said the chances for moving things around you",
    "start": "1915830",
    "end": "1923000"
  },
  {
    "text": "know I think the the Metallica quote was quite apt here you never know where your",
    "start": "1923000",
    "end": "1930500"
  },
  {
    "text": "home is right I mean wherever you're wherever you I lay my head is home and and it's really the path towards",
    "start": "1930500",
    "end": "1937340"
  },
  {
    "text": "building truly reliable and resilient systems I mean it enables decentralized",
    "start": "1937340",
    "end": "1942950"
  },
  {
    "text": "architects your bulk heading for full isolation replication failure detection supervision all these things that puts",
    "start": "1942950",
    "end": "1949640"
  },
  {
    "text": "us on the path to build self-healing systems and I don't have time to go into much more detail here but it's the same",
    "start": "1949640",
    "end": "1956390"
  },
  {
    "text": "thing that puts us on the path towards LA elasticity through all the through decentralized architecture things like",
    "start": "1956390",
    "end": "1961520"
  },
  {
    "text": "epidemic gossip protocols Nachman masterless architectures etc where where everyone's equal and then the system can",
    "start": "1961520",
    "end": "1968179"
  },
  {
    "text": "adaptively grow and shrink as needed as it being is location transparency is one of the keys here that puts us on the",
    "start": "1968179",
    "end": "1974659"
  },
  {
    "text": "path to building through the elastic systems and I think that this is the benefit of applying and embracing sort",
    "start": "1974659",
    "end": "1981169"
  },
  {
    "text": "of their reactive principles so so by doing this nicer of this in this serve",
    "start": "1981169",
    "end": "1987950"
  },
  {
    "text": "okay diagram you can see we have reactive programming now inside each one of these",
    "start": "1987950",
    "end": "1993230"
  },
  {
    "text": "node as his dark box I don't have in a point with this I don't know you can see",
    "start": "1993230",
    "end": "2000190"
  },
  {
    "text": "yeah reactive programming is it's really nice for for making each individual node here",
    "start": "2000190",
    "end": "2006330"
  },
  {
    "text": "as efficient as possible while reactive system sort of is sort of embraces the",
    "start": "2006330",
    "end": "2013240"
  },
  {
    "text": "whole service to making the whole service as reliable throughout all these",
    "start": "2013240",
    "end": "2019180"
  },
  {
    "text": "different parts all making up this micro system so to speak okay so how much time",
    "start": "2019180",
    "end": "2028060"
  },
  {
    "text": "to have 5060 minutes again so how hot so how can we sort of think about this and",
    "start": "2028060",
    "end": "2034570"
  },
  {
    "text": "model this than ingénue I think we need to start thinking in terms of what what I call consistency boundaries and and",
    "start": "2034570",
    "end": "2040720"
  },
  {
    "text": "try to serve think what is the consistency boundaries for a boundary for mine for my mac mac for my macro",
    "start": "2040720",
    "end": "2046330"
  },
  {
    "text": "service and try to minimize the scope and minimize the part so the the the",
    "start": "2046330",
    "end": "2052990"
  },
  {
    "text": "data that needs to be strongly consistent okay and and it's really good",
    "start": "2052990",
    "end": "2059230"
  },
  {
    "text": "- don't not start with the behavior here sure you can but in my experience is",
    "start": "2059230",
    "end": "2064480"
  },
  {
    "text": "often better to start with the data and look for the minimal data set that you can do that you that you must have like",
    "start": "2064480",
    "end": "2071350"
  },
  {
    "text": "full consistency in and think about the data integrity guarantees and and",
    "start": "2071350",
    "end": "2077520"
  },
  {
    "text": "denormalization all these things and and and and when you have that that that's",
    "start": "2077520",
    "end": "2082570"
  },
  {
    "text": "through the essence then you have the data model for your service and then it can add behavior to that and by",
    "start": "2082570",
    "end": "2089830"
  },
  {
    "text": "minimizing this this this data set you open up for more freedom when it comes",
    "start": "2089830",
    "end": "2095020"
  },
  {
    "text": "to to have small services that can scale more easily minimizing coupling and Pat",
    "start": "2095020",
    "end": "2104350"
  },
  {
    "text": "Helen has a really nice frame before how to think about this where he talked and thinking about this this or this",
    "start": "2104350",
    "end": "2110680"
  },
  {
    "text": "consistency boundaries you talk about inside data that's our current present that's the stake in our service outside",
    "start": "2110680",
    "end": "2117460"
  },
  {
    "text": "data that data called blast from the past just you know the represents the past from other services",
    "start": "2117460",
    "end": "2124300"
  },
  {
    "text": "entering or current now or current president and between services is what",
    "start": "2124300",
    "end": "2130750"
  },
  {
    "text": "he calls hope for the future it's almost something poetic about that right we're that that that is the commands that",
    "start": "2130750",
    "end": "2137140"
  },
  {
    "text": "arrived or sorry the commands that we send asking someone to do something and",
    "start": "2137140",
    "end": "2143140"
  },
  {
    "text": "hopefully they will comply and do it but we have really no guarantees not even that they will actually get this command",
    "start": "2143140",
    "end": "2149559"
  },
  {
    "text": "and know what to do okay and and here I think a great tool in order to model the",
    "start": "2149559",
    "end": "2157119"
  },
  {
    "text": "world like this it's advanced first design I think domain-driven design most people here probably know the main",
    "start": "2157119",
    "end": "2162490"
  },
  {
    "text": "driven design and it's a great tool been around for quite for quite long but the",
    "start": "2162490",
    "end": "2168160"
  },
  {
    "text": "the problem with it is that most people start you know thinking about the things",
    "start": "2168160",
    "end": "2173309"
  },
  {
    "text": "certainly the thinking about what are the domain objects and categorizing that",
    "start": "2173309",
    "end": "2179079"
  },
  {
    "text": "etc so that gives us a way of makes us focus on structure of things to to early",
    "start": "2179079",
    "end": "2187500"
  },
  {
    "text": "event events first domain driven design serve teaches that we shouldn't we",
    "start": "2187500",
    "end": "2193809"
  },
  {
    "text": "should not focus on the things the nuns like we've been told told to in classic",
    "start": "2193809",
    "end": "2199599"
  },
  {
    "text": "orbit oriented design as well but what happened what happens in the system what",
    "start": "2199599",
    "end": "2205240"
  },
  {
    "text": "are really taking place who's talking to who who's coming where where does you know things end up how are the flows etc",
    "start": "2205240",
    "end": "2213460"
  },
  {
    "text": "because this is the events in the in the system so I think we should really dive",
    "start": "2213460",
    "end": "2220150"
  },
  {
    "text": "in to the to the to the sort of modeling through the events first and let the",
    "start": "2220150",
    "end": "2228849"
  },
  {
    "text": "events define this bounded context that can that can later become or our service",
    "start": "2228849",
    "end": "2235540"
  },
  {
    "text": "and you know events represent facts and sir facts about the domain facts about",
    "start": "2235540",
    "end": "2242440"
  },
  {
    "text": "the world facts was really going on and so the question is and what is a fact in fact represents something that happened",
    "start": "2242440",
    "end": "2249430"
  },
  {
    "text": "in the past something that have already happened that is the fact facts are immutable facts don't just you know",
    "start": "2249430",
    "end": "2255859"
  },
  {
    "text": "you know so you come I mean we can't just create facts out of the blue I mean",
    "start": "2255859",
    "end": "2261079"
  },
  {
    "text": "either facts enter our system from someone else",
    "start": "2261079",
    "end": "2266359"
  },
  {
    "text": "that's how facts Kenda can serve a crew or we can derive a new fact from older",
    "start": "2266359",
    "end": "2272150"
  },
  {
    "text": "facts essentially derive knowledge from older knowledge and we're not talking",
    "start": "2272150",
    "end": "2279289"
  },
  {
    "text": "about alternative facts here just so you know sorry I yeah so I couldn't keep I",
    "start": "2279289",
    "end": "2285289"
  },
  {
    "text": "couldn't help it so what are the facts then then we we should we should really sort of come in like a detective to",
    "start": "2285289",
    "end": "2291710"
  },
  {
    "text": "crime scene and start like try to mind the facts try to distill what are the",
    "start": "2291710",
    "end": "2296960"
  },
  {
    "text": "facts and hear events storming a sip is if it's a technique that's been starting to become quite popular in wishes for",
    "start": "2296960",
    "end": "2303650"
  },
  {
    "text": "bringing all the stakeholders all the domain expert programmers in one single room we work with with post-it notes and",
    "start": "2303650",
    "end": "2309829"
  },
  {
    "text": "try to understand what are they what's happening in the system what are the events in the system and then how they",
    "start": "2309829",
    "end": "2317029"
  },
  {
    "text": "are related etc and it's very important to understand how the how they are causally",
    "start": "2317029",
    "end": "2323839"
  },
  {
    "text": "related because causality it really really starts to matter here the first a",
    "start": "2323839",
    "end": "2329210"
  },
  {
    "text": "happens the causative this fact that sort of then causes B to happen etc also",
    "start": "2329210",
    "end": "2337940"
  },
  {
    "text": "once centralized approach to do that its event logging what we'll talk about later and more distributors or",
    "start": "2337940",
    "end": "2344059"
  },
  {
    "text": "eventually consistent approach is using MC are you tease conflict-free replicated data types vector clocks",
    "start": "2344059",
    "end": "2350119"
  },
  {
    "text": "these are often used by by the tools underneath to make sense of causality",
    "start": "2350119",
    "end": "2356079"
  },
  {
    "text": "and you might ask them okay but what about mutable state I mean facts are",
    "start": "2356079",
    "end": "2361670"
  },
  {
    "text": "immutable whatever immutable state and can't I work with that I think the mutable state has its place but it needs",
    "start": "2361670",
    "end": "2366799"
  },
  {
    "text": "to be contained it should should never escape the service you know it's it's",
    "start": "2366799",
    "end": "2372859"
  },
  {
    "text": "okay to work with with with with with mutable state within this sort of low locals or --have and completely non",
    "start": "2372859",
    "end": "2380809"
  },
  {
    "text": "observable to the rest of the world doing your computation but as soon as you're done with the computation you",
    "start": "2380809",
    "end": "2386329"
  },
  {
    "text": "should you should create a fact out of that and publish that to the world salars can",
    "start": "2386329",
    "end": "2391589"
  },
  {
    "text": "react on on you know and work with with on a stable ground etc and and you know",
    "start": "2391589",
    "end": "2405390"
  },
  {
    "text": "disk space used to be extremely expensive and this is the reason why most sequel databases use in place",
    "start": "2405390",
    "end": "2412290"
  },
  {
    "text": "updates the destructive updates and and but but now disk space is is incredibly",
    "start": "2412290",
    "end": "2419520"
  },
  {
    "text": "cheap and there's really no reason to not keep all history around forever you",
    "start": "2419520",
    "end": "2428040"
  },
  {
    "text": "know all the sequel databases they use in in you know they have the the the the",
    "start": "2428040",
    "end": "2433290"
  },
  {
    "text": "transaction log in use event logging underneath not just exposed to you so so",
    "start": "2433290",
    "end": "2438950"
  },
  {
    "text": "so if we ask the programmer is one one even one in mine history answer or or",
    "start": "2438950",
    "end": "2444359"
  },
  {
    "text": "even more before that of course let me sort of store history we need to do all",
    "start": "2444359",
    "end": "2449400"
  },
  {
    "text": "kinds of crazy stuff you know have history tables etc etc while the transaction log is actually available",
    "start": "2449400",
    "end": "2455190"
  },
  {
    "text": "underneath and I think this is this is wrong right I think that that today",
    "start": "2455190",
    "end": "2461369"
  },
  {
    "text": "since the disk space is so cheap there's no reason why we shouldn't work with the real thing the transaction law to the",
    "start": "2461369",
    "end": "2467520"
  },
  {
    "text": "amount log and I think that crowd is really dead there's really no reason to use update and delete anymore we work",
    "start": "2467520",
    "end": "2475530"
  },
  {
    "text": "with facts facts just accrue we create facts append facts we read facts and",
    "start": "2475530",
    "end": "2482220"
  },
  {
    "text": "that's it you can't change the past so really update is just a hoax really",
    "start": "2482220",
    "end": "2490820"
  },
  {
    "text": "delete as well even though we sometimes wish that we could change the past it's unfortunately not tapped no not",
    "start": "2490820",
    "end": "2497640"
  },
  {
    "text": "available to us so we should favor event log in event logging is really about",
    "start": "2497640",
    "end": "2502890"
  },
  {
    "text": "causality drawing the facts in the order as they arrive hopefully the order that",
    "start": "2502890",
    "end": "2509640"
  },
  {
    "text": "that they happened to if you're multiple you know facts happening in in different",
    "start": "2509640",
    "end": "2514800"
  },
  {
    "text": "places of the system might be hard to actually know what the cause of causality order is but usually it works",
    "start": "2514800",
    "end": "2522540"
  },
  {
    "text": "it does that in in real life most of the time and here event sourcing is a great",
    "start": "2522540",
    "end": "2528060"
  },
  {
    "text": "tool you might have heard about event sourcing it's it's real about storing all events in an event log on disk as",
    "start": "2528060",
    "end": "2534450"
  },
  {
    "text": "they arrive it really it's great to for for doing things also doing things like",
    "start": "2534450",
    "end": "2540600"
  },
  {
    "text": "not you're storing the history but also to do things like replay on failures you guys replay it up and bring the",
    "start": "2540600",
    "end": "2547470"
  },
  {
    "text": "component up again you can you can replay it for her you know for auditing reasons for debugging reasons etc and it",
    "start": "2547470",
    "end": "2555180"
  },
  {
    "text": "fits very well with messaging and with event based systems because you already have the events in the system already",
    "start": "2555180",
    "end": "2561030"
  },
  {
    "text": "why not just store them and you're done so you know the log is really data based",
    "start": "2561030",
    "end": "2567210"
  },
  {
    "text": "of the past not just the database order of the present where time is the index",
    "start": "2567210",
    "end": "2572600"
  },
  {
    "text": "hard time you can see we really did see our time progresses and how facts are",
    "start": "2572600",
    "end": "2577950"
  },
  {
    "text": "laid out alongside this deserve this axis and and also event logging server",
    "start": "2577950",
    "end": "2585450"
  },
  {
    "text": "gives us relief such tools you know to avoid this is in famous or Victorian did relational impedance mismatch that all",
    "start": "2585450",
    "end": "2594120"
  },
  {
    "text": "of us that have you know you use hibernate or JPA etc have struggled with because you can really have an optimal",
    "start": "2594120",
    "end": "2600780"
  },
  {
    "text": "representation in memory in your objects in your services while they are stored",
    "start": "2600780",
    "end": "2606090"
  },
  {
    "text": "in an optimal way look at disk and",
    "start": "2606090",
    "end": "2612080"
  },
  {
    "text": "another pattern that it's really nice alongside it goes in concert with event",
    "start": "2612080",
    "end": "2617490"
  },
  {
    "text": "logging or event sourcing it seeks is CQRS you know you know command query",
    "start": "2617490",
    "end": "2623150"
  },
  {
    "text": "responsibility cigarette segregation and it gives us a way to serve decouple the",
    "start": "2623150",
    "end": "2629220"
  },
  {
    "text": "riddler the right side from the red side and this is also very important might be",
    "start": "2629220",
    "end": "2634410"
  },
  {
    "text": "you you might have a like a write mostly system so then it so then you have the chance to scale that independently of",
    "start": "2634410",
    "end": "2641250"
  },
  {
    "text": "the red side or if you have read most list system they can have one over by two should always have three actually so",
    "start": "2641250",
    "end": "2648090"
  },
  {
    "text": "you have see but then they have like like three nose for for writing and 30",
    "start": "2648090",
    "end": "2654930"
  },
  {
    "text": "nose for etc and yeah it also the biggest benefit",
    "start": "2654930",
    "end": "2665340"
  },
  {
    "text": "however is probably not in the scaling and the reliability but it gives you the chance of storing each the right side",
    "start": "2665340",
    "end": "2673020"
  },
  {
    "text": "and the right side in the optimal format for for each data model you might want",
    "start": "2673020",
    "end": "2679920"
  },
  {
    "text": "you might have have if use event sourcing the optimal form is definitely about event logging the single writer",
    "start": "2679920",
    "end": "2686760"
  },
  {
    "text": "principles the no contention gets right to this bang bang bang bang extremely efficient but it's extremely hard to",
    "start": "2686760",
    "end": "2693090"
  },
  {
    "text": "query that in an efficient way so so so if you separate the read and the right",
    "start": "2693090",
    "end": "2698670"
  },
  {
    "text": "side that then you can have you just would have a query mechanism or sorted whatever data model that makes most",
    "start": "2698670",
    "end": "2704550"
  },
  {
    "text": "sense for querying on the real side might be time series base might it might be sequel databases if you want to use",
    "start": "2704550",
    "end": "2710010"
  },
  {
    "text": "me role in a sequel or something like Cassandra some column database graph",
    "start": "2710010",
    "end": "2717090"
  },
  {
    "text": "databases or whatever so you also see it really gives us more options for for",
    "start": "2717090",
    "end": "2723240"
  },
  {
    "text": "both data modelling and and query so if we if we take a look at this a little",
    "start": "2723240",
    "end": "2728880"
  },
  {
    "text": "architectural diagram here if we then take it advantage of events or see and",
    "start": "2728880",
    "end": "2734400"
  },
  {
    "text": "and seeks and CQRS and answer the frame of the pad he'll and talked about here",
    "start": "2734400",
    "end": "2740010"
  },
  {
    "text": "then we have or client create commands here then our commands will enter our service and and yes stuff will happen",
    "start": "2740010",
    "end": "2748770"
  },
  {
    "text": "will will will will process them many execute our business logic and and and",
    "start": "2748770",
    "end": "2754290"
  },
  {
    "text": "and that will sort of create a command that will sort of send down to the truth to the entity which which creates facts",
    "start": "2754290",
    "end": "2763200"
  },
  {
    "text": "out of this fact that that state change has happened and this is nothing that",
    "start": "2763200",
    "end": "2768990"
  },
  {
    "text": "you then can take can take back these facts then we will store restore in their in their in the in the right mall",
    "start": "2768990",
    "end": "2774900"
  },
  {
    "text": "in the in the event log as they come in then while the the right model can then",
    "start": "2774900",
    "end": "2782760"
  },
  {
    "text": "emit these facts to whoever I mean for auditing for for debugging",
    "start": "2782760",
    "end": "2789300"
  },
  {
    "text": "might be other readers or for replication might be other readers but one reader of this can be the read model",
    "start": "2789300",
    "end": "2795030"
  },
  {
    "text": "that that stores it in the optimal format for reading for Crowe queering etc so I think then here we end I end up",
    "start": "2795030",
    "end": "2806880"
  },
  {
    "text": "with with the system that really has a lot of improved scalability characteristics you can scale the the",
    "start": "2806880",
    "end": "2813480"
  },
  {
    "text": "the stateless behavior completely independently of how you scale the",
    "start": "2813480",
    "end": "2818550"
  },
  {
    "text": "persistence and you can also scale the rear side and the right side in India independently of each other and it also",
    "start": "2818550",
    "end": "2824760"
  },
  {
    "text": "improves resilience here yeah for a for",
    "start": "2824760",
    "end": "2832080"
  },
  {
    "text": "obvious reasons because you have you can look you know and in any number of instances running here they can they can",
    "start": "2832080",
    "end": "2838410"
  },
  {
    "text": "take away any number instances here I mean in these things are usually clusters search services as well so one",
    "start": "2838410",
    "end": "2847620"
  },
  {
    "text": "question that that always get is what about transactions and if I really need transactions what should I do",
    "start": "2847620",
    "end": "2854340"
  },
  {
    "text": "yeah to quote Pat Pat Helen again and in general application developers simply do",
    "start": "2854340",
    "end": "2859560"
  },
  {
    "text": "not implement large-scale scalable applications assuming distributed",
    "start": "2859560",
    "end": "2864810"
  },
  {
    "text": "transaction this is the great paper that he actually did an update for last week putting this is like from 2007 or",
    "start": "2864810",
    "end": "2870840"
  },
  {
    "text": "something I think I wrote this but he didn't update the last weeks putting it into a little bit more context of now",
    "start": "2870840",
    "end": "2876630"
  },
  {
    "text": "but I really encourage you to read it so what should we do then yeah who Grace",
    "start": "2876630",
    "end": "2883140"
  },
  {
    "text": "Hopper once said that it's easier to ask for forgiveness than it is to get permission okay if you can't coordinate",
    "start": "2883140",
    "end": "2890100"
  },
  {
    "text": "with someone and be sure about something what do you do then yeah you take an",
    "start": "2890100",
    "end": "2895620"
  },
  {
    "text": "educated guess okay that condition will will will will will hold and if you're",
    "start": "2895620",
    "end": "2901800"
  },
  {
    "text": "wrong what do you do yeah you apologize and you you perform some sort of",
    "start": "2901800",
    "end": "2907290"
  },
  {
    "text": "compensating action you know flowers for my wife or something like that it",
    "start": "2907290",
    "end": "2912900"
  },
  {
    "text": "usually works so we and we humans use a",
    "start": "2912900",
    "end": "2918450"
  },
  {
    "text": "protocol of some guests apologize and incompass and I really think that since this is",
    "start": "2918450",
    "end": "2924990"
  },
  {
    "text": "really how the world works I mean other other other examples are you know over",
    "start": "2924990",
    "end": "2930630"
  },
  {
    "text": "booking flights you know I mean I've like way too much and way too many times",
    "start": "2930630",
    "end": "2936299"
  },
  {
    "text": "I've sort of come to come to the gate and and and and and the flight is",
    "start": "2936299",
    "end": "2941730"
  },
  {
    "text": "overbooked and and the you know the the flight attendants try to bribe them themselves out of the problem by issuing",
    "start": "2941730",
    "end": "2948329"
  },
  {
    "text": "vouchers you know meal vouchers are usually completely useless or travel vouchers like it's lucky if you want to",
    "start": "2948329",
    "end": "2954809"
  },
  {
    "text": "travel even more with that airline but but anyway and the same thing with ATMs",
    "start": "2954809",
    "end": "2960059"
  },
  {
    "text": "you know they actually allow it to - deEtta to deduct or sort of - to to",
    "start": "2960059",
    "end": "2965190"
  },
  {
    "text": "withdraw money even if they can't access the mainframe in the in the back taking",
    "start": "2965190",
    "end": "2972240"
  },
  {
    "text": "a taking and educated guess that you probably have coverage for that money that you want or that you're about to",
    "start": "2972240",
    "end": "2977460"
  },
  {
    "text": "with will that you want to do withdraw and if they were wrong when the when the",
    "start": "2977460",
    "end": "2982829"
  },
  {
    "text": "when this or when the link is established again it will it will deduct your account",
    "start": "2982829",
    "end": "2988890"
  },
  {
    "text": "- sometimes a negative balance and you have to pay the interest for the fort for that so it's really how the how the",
    "start": "2988890",
    "end": "2994470"
  },
  {
    "text": "world works is once again trying to serve embrace reality in how the world actually works and that will simplify",
    "start": "2994470",
    "end": "3002029"
  },
  {
    "text": "the world and when one one patron that sort of makes use of this I want time to",
    "start": "3002029",
    "end": "3007640"
  },
  {
    "text": "go through now because they're 18 seconds left is is this saga pattern which serve gives us or in short a",
    "start": "3007640",
    "end": "3015829"
  },
  {
    "text": "service or decompose your flow into discrete chunks so transactional chunks",
    "start": "3015829",
    "end": "3022279"
  },
  {
    "text": "in which each serve action has a reverse in compensating action and and this",
    "start": "3022279",
    "end": "3029299"
  },
  {
    "text": "allows you to have a synchronous it's asynchronous communication between each of these stages across different",
    "start": "3029299",
    "end": "3034609"
  },
  {
    "text": "components and if something wrong happens here then we can reverse the whole transaction by just issuing it was",
    "start": "3034609",
    "end": "3040700"
  },
  {
    "text": "invoking the compensating action for each one of these of these stages that's so the in a way that gives you",
    "start": "3040700",
    "end": "3047630"
  },
  {
    "text": "the transfers transactionality that you want without paying the price in reduced",
    "start": "3047630",
    "end": "3054050"
  },
  {
    "text": "availability like we always do with X a transaction that never cease never works",
    "start": "3054050",
    "end": "3059800"
  },
  {
    "text": "so this there's a lot more to say but probably overwhelm you already so but in",
    "start": "3059800",
    "end": "3064910"
  },
  {
    "text": "summary don't build build systems of micro lists micro services come in",
    "start": "3064910",
    "end": "3071120"
  },
  {
    "text": "systems distributed systems but they also come as systems each market service",
    "start": "3071120",
    "end": "3076190"
  },
  {
    "text": "need to be a micro system and that has a lot of implications because that means",
    "start": "3076190",
    "end": "3081260"
  },
  {
    "text": "that each micro services in AES is a distributed system sir practices that",
    "start": "3081260",
    "end": "3086480"
  },
  {
    "text": "connected that can help us here is by embracing the reactive principles standing on solid ground like the work",
    "start": "3086480",
    "end": "3092420"
  },
  {
    "text": "of Pat hell and Jim Gray and and you know Joe Armstrong and Robert Verdi Erlang systems these things work it's",
    "start": "3092420",
    "end": "3100580"
  },
  {
    "text": "just that we haven't really understood how well they work yet and also embrace event first domain-driven design I think",
    "start": "3100580",
    "end": "3107030"
  },
  {
    "text": "it's an excellent way of a modeling your system and put you on a path towards building systems the micro services that",
    "start": "3107030",
    "end": "3114320"
  },
  {
    "text": "really is not just for scaling into organization but also take full advantage of the architectural benefits",
    "start": "3114320",
    "end": "3121550"
  },
  {
    "text": "or building distributed systems so that's all I had yeah sorry one more",
    "start": "3121550",
    "end": "3126710"
  },
  {
    "text": "thing you don't have to sort of built all this yourself actually there's a lot of frameworks out there that does help",
    "start": "3126710",
    "end": "3133160"
  },
  {
    "text": "you one of them that that does it seem very much in the spirit to what I talked",
    "start": "3133160",
    "end": "3139130"
  },
  {
    "text": "about is it's the one we have a live band called log on yeah it's it's it's for Java and Scala if you happen to",
    "start": "3139130",
    "end": "3145880"
  },
  {
    "text": "programming these in these languages so that's something I encourage you to check out because these things are hard",
    "start": "3145880",
    "end": "3151250"
  },
  {
    "text": "and and we built this you know from what we experienced from from from who from",
    "start": "3151250",
    "end": "3157130"
  },
  {
    "text": "building micro services on ARCA our customers building our core services on an octa and play for the last eight",
    "start": "3157130",
    "end": "3162980"
  },
  {
    "text": "years and so we're wrapping up the patterns and the best practices of doing",
    "start": "3162980",
    "end": "3169490"
  },
  {
    "text": "so go to logon framework or comm if you want and I also wrote a little book about about Marco services architecture",
    "start": "3169490",
    "end": "3177320"
  },
  {
    "text": "from a reactive perspective is free it's freely available you can download for free in this URL it's very short",
    "start": "3177320",
    "end": "3183410"
  },
  {
    "text": "just looking this one is or I'll in many books so that's all I had thank you [Applause]",
    "start": "3183410",
    "end": "3192630"
  }
]