[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "22039"
  },
  {
    "text": "The Talk today is covering a new product which is a taking a look a fresh look at",
    "start": "22039",
    "end": "28279"
  },
  {
    "text": "how her doop has has been done all along and how we can make it better if any of",
    "start": "28279",
    "end": "34440"
  },
  {
    "text": "you have worked with had doop you will run into issues or have run into issues",
    "start": "34440",
    "end": "40520"
  },
  {
    "text": "have experienced some of the things we'll talk about and then we exp we take it from there see what Cassandra brings",
    "start": "40520",
    "end": "46920"
  },
  {
    "text": "to the table and what that means for for um had and what that means for us if",
    "start": "46920",
    "end": "53680"
  },
  {
    "text": "you're going to use brisk if there are the Hadoop experts we'll also do a",
    "start": "53680",
    "end": "58920"
  },
  {
    "text": "advanced q& a at the same time I'll assume that we start from ground level and go from there so",
    "start": "58920",
    "end": "67280"
  },
  {
    "text": "um so brisk brisk is Hive Hadoop and Cassandra how many of you have heard of",
    "start": "67280",
    "end": "73520"
  },
  {
    "start": "68000",
    "end": "131000"
  },
  {
    "text": "Hive or Pig perfect so same data analysis so",
    "start": "73520",
    "end": "79360"
  },
  {
    "text": "what brisk does bring to the table is it brings Hive Hado and Cassandra to one spot we we've looked at our customers we",
    "start": "79360",
    "end": "86400"
  },
  {
    "text": "looked at different use cases within the field and we the just of that we found was people were using the the the new no",
    "start": "86400",
    "end": "94200"
  },
  {
    "text": "SQL stores in conjunction with this P processing Paradigm that map R produces",
    "start": "94200",
    "end": "101159"
  },
  {
    "text": "um including had and and then using Hive on top or Pig and trying to analyze data",
    "start": "101159",
    "end": "106479"
  },
  {
    "text": "so we found a perfect opportunity to to bring them together mesh them well so it",
    "start": "106479",
    "end": "112439"
  },
  {
    "text": "scales and that's kind of what the story of brisk is um I'll go kind of the",
    "start": "112439",
    "end": "118719"
  },
  {
    "text": "behind the scenes how we pull it off and what were the interesting design decs in the second half but um initially I'll do",
    "start": "118719",
    "end": "127159"
  },
  {
    "text": "some stage set up for her itself so um everyone has heard map ruce and map ruce",
    "start": "127159",
    "end": "134400"
  },
  {
    "start": "131000",
    "end": "316000"
  },
  {
    "text": "from The Glory Days of the first paper that came out of Google to to to today has kind of evolved and we have a huge",
    "start": "134400",
    "end": "141519"
  },
  {
    "text": "ecosystem of adoption around map produce if you have large data sets and you can",
    "start": "141519",
    "end": "147760"
  },
  {
    "text": "work on small pieces in parle so having large data sets check but you can you",
    "start": "147760",
    "end": "153280"
  },
  {
    "text": "cannot break it down then it's not not not a good but if you can actually break it down the small stuns and have it all",
    "start": "153280",
    "end": "160040"
  },
  {
    "text": "run in parallel and make it work you're in the right place you you you you can use a",
    "start": "160040",
    "end": "165720"
  },
  {
    "text": "Dube now so going back to the key key algorithm in the map ruce where you have",
    "start": "165720",
    "end": "172519"
  },
  {
    "text": "a bunch input and then you have key values and then you're able to transform those key key values to an output key",
    "start": "172519",
    "end": "179840"
  },
  {
    "text": "key values that's what that's kind of your ideal right so that's that's the",
    "start": "179840",
    "end": "184879"
  },
  {
    "text": "classic flow from the original papers nothing new this another view at the same map ruce algorithm in for multicore",
    "start": "184879",
    "end": "192120"
  },
  {
    "text": "uh Professor kunle from um Stanford has this where you could do parallel version",
    "start": "192120",
    "end": "197200"
  },
  {
    "text": "of maper use so you run more in thread mappers are run in parallel um here's a",
    "start": "197200",
    "end": "205480"
  },
  {
    "text": "par execution view of how your task Place partition your data you have a partitioning function that partitions",
    "start": "205480",
    "end": "212519"
  },
  {
    "text": "your data and then you do this nice little sort group and reduce so that's",
    "start": "212519",
    "end": "218519"
  },
  {
    "text": "your map reduce classic um dup in action right how does it play when you actually",
    "start": "218519",
    "end": "225280"
  },
  {
    "text": "run it yeah you have a lots of workers you have a few master and you map your",
    "start": "225280",
    "end": "231120"
  },
  {
    "text": "data reads use but that's your flow that's how you get parallelism that's why you",
    "start": "231120",
    "end": "238000"
  },
  {
    "text": "you broken down your problem to SE bunch of SE parall Maps the and you try to",
    "start": "238000",
    "end": "244400"
  },
  {
    "text": "align them such that you can run them in par as much in parallel you do the sort",
    "start": "244400",
    "end": "250000"
  },
  {
    "text": "so this is another view of the same map prod Ed split the data then have workers",
    "start": "250000",
    "end": "255519"
  },
  {
    "text": "act on that do a there's a master who manages all these that's kind of we'll",
    "start": "255519",
    "end": "260720"
  },
  {
    "text": "go we'll get back to the pay a little attention to the master guide we'll get back to that you usually do a lot of",
    "start": "260720",
    "end": "266479"
  },
  {
    "text": "local rights but never do a local like a remote right mostly remote reads so that's kind of your the Crux of the",
    "start": "266479",
    "end": "273120"
  },
  {
    "text": "strength of this way of putting your data is is that um this is your input",
    "start": "273120",
    "end": "279400"
  },
  {
    "text": "files run the map and intermediate files reduce put the data together output",
    "start": "279400",
    "end": "286840"
  },
  {
    "text": "files that's your classic sequence and I'm sure people who have looked at this before it's a rehash but from the",
    "start": "286840",
    "end": "294479"
  },
  {
    "text": "original sanj Gat paper um here's the core pieces how does",
    "start": "294479",
    "end": "300919"
  },
  {
    "text": "had actually work inside there's a job tracker as we looked at how do you manage this there's a name node which",
    "start": "300919",
    "end": "309160"
  },
  {
    "text": "which portrays your how do you manage your iodes and hdfs the Crux of the best",
    "start": "309160",
    "end": "316080"
  },
  {
    "text": "use case for had dup is you write ones and read many right so it's files that",
    "start": "316080",
    "end": "322880"
  },
  {
    "text": "are once created they don't need to end written you don't need to and and once you close them you don't need to change them again so it's kind of IM mutable",
    "start": "322880",
    "end": "330160"
  },
  {
    "text": "past so it's kind of a classic use case for immutable past but and app and only thoughts right so so it's a um a very",
    "start": "330160",
    "end": "338240"
  },
  {
    "text": "cool um allows for getting outside the posic model of being able to change data",
    "start": "338240",
    "end": "345680"
  },
  {
    "text": "quite frequently renaming things quite frequently so it allows you to do a lot",
    "start": "345680",
    "end": "350800"
  },
  {
    "text": "of lot of optimizations um what do you want to do you want to",
    "start": "350800",
    "end": "356400"
  },
  {
    "start": "355000",
    "end": "445000"
  },
  {
    "text": "move computation not data that's the other second the design philosophy behind this whole um whole Space is you",
    "start": "356400",
    "end": "364720"
  },
  {
    "text": "have a data centricity so once you have data don't necessarily have to move it",
    "start": "364720",
    "end": "370400"
  },
  {
    "text": "around once you move it's large data moving it around is not efficient anymore so you just move the computation",
    "start": "370400",
    "end": "376759"
  },
  {
    "text": "to where the data is and that's the whole um philosophy if you if you want to take one line this would read it is",
    "start": "376759",
    "end": "384000"
  },
  {
    "text": "to to move the data move the logic towards where data is if the data is large and of course for the small data",
    "start": "384000",
    "end": "389880"
  },
  {
    "text": "pieces you want to move data to the to the actual computer so um double",
    "start": "389880",
    "end": "395960"
  },
  {
    "text": "clicking the hdfs architecture um the the actual um setup is you have a name",
    "start": "395960",
    "end": "403919"
  },
  {
    "text": "node which is in charge of all your metadata all your access to actual files",
    "start": "403919",
    "end": "409560"
  },
  {
    "text": "you have a bunch of data nodes where you store the real data and and and you have",
    "start": "409560",
    "end": "415639"
  },
  {
    "text": "access read access from clients directly to there when you do wres you have replication involed between so when you",
    "start": "415639",
    "end": "422840"
  },
  {
    "text": "do a write you replicate between the nodes um classic distributed file system",
    "start": "422840",
    "end": "429240"
  },
  {
    "text": "architecture right um everything is a block so name node has a bunch of iodes",
    "start": "429240",
    "end": "436120"
  },
  {
    "text": "and then you have blocks that you can go and access that's your classic um again",
    "start": "436120",
    "end": "441840"
  },
  {
    "text": "from the do paper on htfs right data nodes do read and writs for",
    "start": "441840",
    "end": "447680"
  },
  {
    "start": "445000",
    "end": "635000"
  },
  {
    "text": "blocks so all your data is actually stored as real file system blocks and the name node is that's your single",
    "start": "447680",
    "end": "455319"
  },
  {
    "text": "Master node that's your single machine at space that's where you put all your",
    "start": "455319",
    "end": "460479"
  },
  {
    "text": "data in that's also your single P of failure so the name node is the um is I",
    "start": "460479",
    "end": "467960"
  },
  {
    "text": "mean all that we heard so far is very parallel massively distributed one of",
    "start": "467960",
    "end": "473000"
  },
  {
    "text": "the single kinds of failures in the entire hi ecosystem is the name node",
    "start": "473000",
    "end": "478039"
  },
  {
    "text": "because that's where you store all your I know that's where you want to um you want to manage it's all okay since any",
    "start": "478039",
    "end": "483960"
  },
  {
    "text": "everyone has written code in Java it's all written in Java so it has the classic um challenges of scaling up so",
    "start": "483960",
    "end": "492159"
  },
  {
    "text": "your Hadoop the large the the size of your H could also be limited by that so",
    "start": "492159",
    "end": "498159"
  },
  {
    "text": "so managing a single large uh in memory system is hard um and it's hard and",
    "start": "498159",
    "end": "503879"
  },
  {
    "text": "that's why we are in the parallel distributed mode today um that's where we are seeing the new Revolution of",
    "start": "503879",
    "end": "508919"
  },
  {
    "text": "large distributed stores and that's why um a single large node is is always a",
    "start": "508919",
    "end": "514518"
  },
  {
    "text": "problem so that's where we focused our efforts on and try and see most of our",
    "start": "514519",
    "end": "520039"
  },
  {
    "text": "customers who would be running this would be spending a lot of time trying to duct tape the name node um trying to",
    "start": "520039",
    "end": "525320"
  },
  {
    "text": "create a way to to get it to to to stabilize if that fails you probably",
    "start": "525320",
    "end": "531160"
  },
  {
    "text": "lost your entire jobs you probably all the jobs that are running could be lost at different stages the recovery path",
    "start": "531160",
    "end": "537440"
  },
  {
    "text": "from there is hard uh um and so that's I mean where in in many many sense it's a",
    "start": "537440",
    "end": "544519"
  },
  {
    "text": "single node and it needs to be distributed um most people agree that the best way",
    "start": "544519",
    "end": "553279"
  },
  {
    "text": "to do distributed computing is not do it at all and unless you're really forced",
    "start": "553279",
    "end": "558920"
  },
  {
    "text": "to do it and in this case we are um I mean our customers ran to that and and",
    "start": "558920",
    "end": "564959"
  },
  {
    "text": "so did a lot of the customers and there would be a lot of interesting challenges around it that's kind of where um distributed name node or how do you",
    "start": "564959",
    "end": "573040"
  },
  {
    "text": "do a distributed name node and that's kind of the nuances behind why brisk right",
    "start": "573040",
    "end": "578680"
  },
  {
    "text": "so um you think about it in a pictorially um you have lots of lots of",
    "start": "578680",
    "end": "584360"
  },
  {
    "text": "data nodes doing your data blocks the name node kept growing because you have that all the",
    "start": "584360",
    "end": "591399"
  },
  {
    "text": "metadata and what C Stander has in some sense is create one kind of node there",
    "start": "591399",
    "end": "598000"
  },
  {
    "text": "is no name node um or it's distributed across just like a regular node so that's kind of the",
    "start": "598000",
    "end": "605200"
  },
  {
    "text": "before after of of brisk like you this is your had you move into you have data",
    "start": "605200",
    "end": "612480"
  },
  {
    "text": "nodes and name nodes in the in the future we we see a one kind of node so",
    "start": "612480",
    "end": "618200"
  },
  {
    "text": "it's peerto peer and so that's kind of your intro",
    "start": "618200",
    "end": "624040"
  },
  {
    "text": "and we'll discuss Cassandra at a little lend as well um what is Cassandra and",
    "start": "624040",
    "end": "629320"
  },
  {
    "text": "some of you have heard of it some of you used it but the Crux of Cassandra is how",
    "start": "629320",
    "end": "634440"
  },
  {
    "text": "do you get high scale data stores that can run across lots and lots of machines",
    "start": "634440",
    "end": "641120"
  },
  {
    "start": "635000",
    "end": "755000"
  },
  {
    "text": "tolerate failure and are still not losing data still not losing accesses so",
    "start": "641120",
    "end": "646480"
  },
  {
    "text": "that's kind of your and peer-to-peer has historically and has historically",
    "start": "646480",
    "end": "652399"
  },
  {
    "text": "survived peer toer as a philosophy as a as a as a scaling methodology uh as",
    "start": "652399",
    "end": "657519"
  },
  {
    "text": "distributed computing techniques I mean we have all seen and lived the Napster Revolution and P P2P we have doing",
    "start": "657519",
    "end": "664680"
  },
  {
    "text": "things and peer-to-peer is is uh has survived and it's distributed really",
    "start": "664680",
    "end": "670399"
  },
  {
    "text": "distributed there's no master there's no Central anything right so Google created big table Amazon did Dynamo Dynamo is",
    "start": "670399",
    "end": "679240"
  },
  {
    "text": "this classic peer-to-peer operational model where you lay um your data on lots",
    "start": "679240",
    "end": "685560"
  },
  {
    "text": "and lots of files lots and lots of systems and um um are able to and able",
    "start": "685560",
    "end": "691160"
  },
  {
    "text": "to use a kind of a loose consistency um model and get high scale right at",
    "start": "691160",
    "end": "698160"
  },
  {
    "text": "Facebook circuit 2008 these two combined you get this big table has how many of",
    "start": "698160",
    "end": "703880"
  },
  {
    "text": "you have heard big table sure not much to explain there big table essentially gives you a column",
    "start": "703880",
    "end": "711160"
  },
  {
    "text": "family like uh semantics for addressing your data so you get a schema of sorts",
    "start": "711160",
    "end": "717560"
  },
  {
    "text": "right and Amazon gives you the classic Dynamo model of operational um the",
    "start": "717560",
    "end": "724000"
  },
  {
    "text": "Dynamo is the classic uh operational model of Simplicity where you can add lots of notes uh actually um the same",
    "start": "724000",
    "end": "730839"
  },
  {
    "text": "kind of techniques are being used in other models like simple TB and other so big table gives you that schema and",
    "start": "730839",
    "end": "737519"
  },
  {
    "text": "that's kind of what the the Nuance around Facebook invention putting them together it was open source incubated",
    "start": "737519",
    "end": "744480"
  },
  {
    "text": "and then we have a few customers using it live in production Netflix one of them",
    "start": "744480",
    "end": "749800"
  },
  {
    "text": "how does it work really um Cassandra is a has a ring structure to it and every",
    "start": "749800",
    "end": "757959"
  },
  {
    "start": "755000",
    "end": "1175000"
  },
  {
    "text": "node is actually um designated to a certain range of keys right so so if you",
    "start": "757959",
    "end": "766079"
  },
  {
    "text": "think of this as a big space so and you chunk each of them to different key",
    "start": "766079",
    "end": "772360"
  },
  {
    "text": "sizes uh key ranges if you now insert C and um a",
    "start": "772360",
    "end": "779279"
  },
  {
    "text": "somewhere in between so you pick node so that's the node based on the key you find the node to write your element too",
    "start": "779279",
    "end": "787399"
  },
  {
    "text": "and you can set for each of these rights how many copies you would like to see you can set replication factor for every",
    "start": "787399",
    "end": "794680"
  },
  {
    "text": "single right right um so if there is something really really um classic Well Done For",
    "start": "794680",
    "end": "804120"
  },
  {
    "text": "No SQL stores that would be the replication model in Cassandra I mean that's it's one of the good strands",
    "start": "804120",
    "end": "810519"
  },
  {
    "text": "right every every store has their own strands and this one has a very a very",
    "start": "810519",
    "end": "816279"
  },
  {
    "text": "nice property around replication now you could you could set so if you set three",
    "start": "816279",
    "end": "822760"
  },
  {
    "text": "copies the first copy is going here then you have a synchronous as soon as it finishes it right on F so every node has",
    "start": "822760",
    "end": "830720"
  },
  {
    "text": "a commet log and a kind of your um in memory",
    "start": "830720",
    "end": "836399"
  },
  {
    "text": "representation once it writes to a commit log it basically it also asynchronously fires off two more",
    "start": "836399",
    "end": "843000"
  },
  {
    "text": "replicas or these two other nodes which are participating in that replication now these two can mind you be in a",
    "start": "843000",
    "end": "850160"
  },
  {
    "text": "different data center or a different Amazon region they they're a synchronous and",
    "start": "850160",
    "end": "855639"
  },
  {
    "text": "they're going to go finish those wres and have those copies ready for you in different different geographies right so",
    "start": "855639",
    "end": "862279"
  },
  {
    "text": "in some sense you have as a regular simple five node six node or customer",
    "start": "862279",
    "end": "870480"
  },
  {
    "text": "have you can put them so you can actually there's a snitch which basically tells it to look up looks up a",
    "start": "870480",
    "end": "877839"
  },
  {
    "text": "small list of items and says okay this needs to be in two different racks make sure they're in two different racks so",
    "start": "877839",
    "end": "884160"
  },
  {
    "text": "just in case there power outage so it automatically does that for you now",
    "start": "884160",
    "end": "889839"
  },
  {
    "text": "let's say one of these notes actually um down or did not respond it actually",
    "start": "889839",
    "end": "895519"
  },
  {
    "text": "makes a note on the on the note saying a Hint it leaves a hint there saying replay this when that node comes back up",
    "start": "895519",
    "end": "903279"
  },
  {
    "text": "right so it's tolerant to the failure um you're it also has a lot of interesting nuances around how if if this node is",
    "start": "903279",
    "end": "912440"
  },
  {
    "text": "out of sync with other nodes it the the whole so the other so that's one how do",
    "start": "912440",
    "end": "918519"
  },
  {
    "text": "we get the replication work the second piece interesting piece here is as you add nodes typically I mean people who",
    "start": "918519",
    "end": "924519"
  },
  {
    "text": "have used coherence or gigaspaces or other large systems as you add nodes the",
    "start": "924519",
    "end": "931000"
  },
  {
    "text": "communication patterns between them um either it's TCP UDP or high it's very",
    "start": "931000",
    "end": "937519"
  },
  {
    "text": "when one node goes down it has to communicate with everybody else until I'm down now right or and or remove the",
    "start": "937519",
    "end": "943319"
  },
  {
    "text": "data or replicate rate it around the communication uh pattern in in the cassander system is Gossip based which",
    "start": "943319",
    "end": "949839"
  },
  {
    "text": "is a very lightweight um exponential algorithm when gossip actually works",
    "start": "949839",
    "end": "956160"
  },
  {
    "text": "like real real world gossip where you go and tell um so every every node gossips with a",
    "start": "956160",
    "end": "962480"
  },
  {
    "text": "couple of nodes neighboring nodes or and those nodes go and gossip with other",
    "start": "962480",
    "end": "968120"
  },
  {
    "text": "other gossip Partners so it's kind of like if you if every node participated in send two two nodes two nodes go and",
    "start": "968120",
    "end": "975120"
  },
  {
    "text": "to to to you have a pretty large exponential algorithm so in some sense it's a it's it's kind of amortized over",
    "start": "975120",
    "end": "983839"
  },
  {
    "text": "the course of the entire size of the system so in some sense it's it's exponential but at the same time not",
    "start": "983839",
    "end": "989639"
  },
  {
    "text": "very expensive so so the communication between the ndes is very is independ is kind of a it's kind of a different is a",
    "start": "989639",
    "end": "997880"
  },
  {
    "text": "mechanism that causes that Leeds leads to a much more easier well breathed well",
    "start": "997880",
    "end": "1003600"
  },
  {
    "text": "or well- growing system but the reason we brought up the gossip piece was if",
    "start": "1003600",
    "end": "1008639"
  },
  {
    "text": "there is actually any um any of the notes out of sying the data can can be",
    "start": "1008639",
    "end": "1014160"
  },
  {
    "text": "repaired so as you do your reads you can also so when you pull the data out when you the reads you can actually ask I",
    "start": "1014160",
    "end": "1021639"
  },
  {
    "text": "want a I want I want just one of them let's say we added the data of this this",
    "start": "1021639",
    "end": "1027720"
  },
  {
    "text": "building um this building's Geo codes are not changing anytime soon they're going to be the same for pretty much",
    "start": "1027720",
    "end": "1034038"
  },
  {
    "text": "history of the earth so we're probably going to it's it's if you write ones you",
    "start": "1034039",
    "end": "1039760"
  },
  {
    "text": "just can read it from anywhere so if you if you write a copy of that node in",
    "start": "1039760",
    "end": "1044798"
  },
  {
    "text": "three nodes you can suddenly your reads can get 3x the performance because they can hit any of these nodes and get an",
    "start": "1044799",
    "end": "1051559"
  },
  {
    "text": "immediate result so for the data that's very light um very non-changing you can",
    "start": "1051559",
    "end": "1058400"
  },
  {
    "text": "use a read consistency of just one for data that you want to make sure has",
    "start": "1058400",
    "end": "1064120"
  },
  {
    "text": "higher reliability or higher uh correctness You' basically ensure that all nodes or the majority of the nodes",
    "start": "1064120",
    "end": "1071919"
  },
  {
    "text": "are saying the same answer so you can actually say Quorum so then you get um two out of these three nodes returning",
    "start": "1071919",
    "end": "1077880"
  },
  {
    "text": "with the right answer does make sense so in that sense there is it is a tunable",
    "start": "1077880",
    "end": "1082960"
  },
  {
    "text": "consistency model that as we have today and that allows it to the end user to",
    "start": "1082960",
    "end": "1088919"
  },
  {
    "text": "program it and learn and and be able to not pay the same cost for every read and",
    "start": "1088919",
    "end": "1095080"
  },
  {
    "text": "which is the true which is true for today's reads where you force yourself to pay the cost of asset for every read",
    "start": "1095080",
    "end": "1101760"
  },
  {
    "text": "uh here you can actually say this data the the geoc code data or the address data the maps data is not going to",
    "start": "1101760",
    "end": "1107280"
  },
  {
    "text": "change anytime soon that data can be just r equal to one but for the data where you actually do need uh more",
    "start": "1107280",
    "end": "1114039"
  },
  {
    "text": "consistency you can enforce a higher consistency level and that's that's the owners onto the pushed on to the end",
    "start": "1114039",
    "end": "1121200"
  },
  {
    "text": "user end developers and that's kind of the thing that we discussed earlier which was which came out but really the",
    "start": "1121200",
    "end": "1126679"
  },
  {
    "text": "the Crux of that is that it's up to the programmer to design which parts of the",
    "start": "1126679",
    "end": "1132320"
  },
  {
    "text": "code can actually get take advantage of of a very high read performance or very",
    "start": "1132320",
    "end": "1138280"
  },
  {
    "text": "high r so the right performance of this we just discuss the replication the right performance is really really very",
    "start": "1138280",
    "end": "1144799"
  },
  {
    "text": "low so Cassandra's real strands shine shines when it does rights um really",
    "start": "1144799",
    "end": "1151760"
  },
  {
    "text": "like autos of magnitude faster than um then it's then the reads and then then",
    "start": "1151760",
    "end": "1157559"
  },
  {
    "text": "in the it's usually single to single digit to early twood digigit milliseconds um and it's a very it's a",
    "start": "1157559",
    "end": "1164280"
  },
  {
    "text": "durable write it's not writing just a memory right so um the right speed of is",
    "start": "1164280",
    "end": "1170559"
  },
  {
    "text": "based more so on um on the um it's it's the commit log is app and",
    "start": "1170559",
    "end": "1178559"
  },
  {
    "start": "1175000",
    "end": "1253000"
  },
  {
    "text": "only so so when I do a write there's a commit log that does app and only um",
    "start": "1178559",
    "end": "1185120"
  },
  {
    "text": "sequential access to file so in other words every node has a commit log",
    "start": "1185120",
    "end": "1190720"
  },
  {
    "text": "discuss so as soon as you send it right a simple a block is is is is I mean you",
    "start": "1190720",
    "end": "1198760"
  },
  {
    "text": "iang got a record Here app and only so it's sequential so this this thing",
    "start": "1198760",
    "end": "1204520"
  },
  {
    "text": "is as soon as it finishes it allows the mem table copy to be read right at that",
    "start": "1204520",
    "end": "1210559"
  },
  {
    "text": "point it's already in memory makes it available for reads also goes for the other copies",
    "start": "1210559",
    "end": "1217679"
  },
  {
    "text": "replication reader right this nothing nothing out of the world it's classic um",
    "start": "1217679",
    "end": "1225640"
  },
  {
    "text": "classic log structured data it's what db2 uses for commit logs right um so",
    "start": "1225640",
    "end": "1231440"
  },
  {
    "text": "it's it's takes it sits on the great advantages",
    "start": "1231440",
    "end": "1236520"
  },
  {
    "text": "that were created in the database research it's not something um uh so",
    "start": "1236520",
    "end": "1242280"
  },
  {
    "text": "data is not lost right but the replication part being a synchronous allows you to scale on that one that",
    "start": "1242280",
    "end": "1247760"
  },
  {
    "text": "front as well what does big table do for so we looked at the distribution model",
    "start": "1247760",
    "end": "1253360"
  },
  {
    "start": "1253000",
    "end": "1490000"
  },
  {
    "text": "that's the Dynamo so we actually really talking about Dynamo distribution model we also know that big table brought",
    "start": "1253360",
    "end": "1259280"
  },
  {
    "text": "something to the table so that's this thing so it's more of a dynamic column",
    "start": "1259280",
    "end": "1265559"
  },
  {
    "text": "family model which basically says you can have like so this is basically the",
    "start": "1265559",
    "end": "1273799"
  },
  {
    "text": "tables um the column families are more um non-uniform column structure so you",
    "start": "1273799",
    "end": "1281000"
  },
  {
    "text": "have a few columns that are a few rows with two columns a few rows with no",
    "start": "1281000",
    "end": "1286520"
  },
  {
    "text": "columns and a few rows with a lot of columns right so so it kind of how many",
    "start": "1286520",
    "end": "1293400"
  },
  {
    "text": "of you have seen the have heard of the normal forms for databases few",
    "start": "1293400",
    "end": "1300240"
  },
  {
    "text": "right um so the first normal form um is a if you think about it in the in the",
    "start": "1300240",
    "end": "1307200"
  },
  {
    "text": "common sensical approach of first normal form um you go to the grocery you store",
    "start": "1307200",
    "end": "1314760"
  },
  {
    "text": "you make a list of things you want to buy um and you say milk amount you want to buy like so",
    "start": "1314760",
    "end": "1322840"
  },
  {
    "text": "everything you have like item name and amount you want to buy um so you kind of",
    "start": "1322840",
    "end": "1328320"
  },
  {
    "text": "expect so if you find one of the rows with no amount you want to buy you're",
    "start": "1328320",
    "end": "1333520"
  },
  {
    "text": "worried because you need to find out that data needs to be filled up that's your you expect a structure for your",
    "start": "1333520",
    "end": "1339640"
  },
  {
    "text": "data um but what if it's just you know it's like you know you know certain",
    "start": "1339640",
    "end": "1347159"
  },
  {
    "text": "columns certain data is not amable to that uh structure all the time you're you're wasting a lot of your um both",
    "start": "1347159",
    "end": "1354919"
  },
  {
    "text": "your space and query performance focusing on having all the columns to be",
    "start": "1354919",
    "end": "1361320"
  },
  {
    "text": "similar and that's kind of the the the all the rows to be similar and that's kind of the idea behind this but Beauty",
    "start": "1361320",
    "end": "1367320"
  },
  {
    "text": "about this one is if you are designing such that you need to get only you know",
    "start": "1367320",
    "end": "1373320"
  },
  {
    "text": "that certain rows have enough data you just go after that and",
    "start": "1373320",
    "end": "1378559"
  },
  {
    "text": "so um this is showing the brisk um structure and Gander FS um Gander node",
    "start": "1378559",
    "end": "1386760"
  },
  {
    "text": "we'll get back to this this classic marketing slide but we'll come back to this at some point we looked at",
    "start": "1386760",
    "end": "1393039"
  },
  {
    "text": "Cassandra brisk basically brings to the table ability to store brisk data and",
    "start": "1393039",
    "end": "1400760"
  },
  {
    "text": "cassander data um in the same ring structure right so in some sense um it",
    "start": "1400760",
    "end": "1407039"
  },
  {
    "text": "provides a way to write your Hado jobs as well as run the results of those data",
    "start": "1407039",
    "end": "1412799"
  },
  {
    "text": "into the same Cassandra store so you can then run queries off of it now we'll",
    "start": "1412799",
    "end": "1418840"
  },
  {
    "text": "look further into how this works okay um the main things to remember is we had",
    "start": "1418840",
    "end": "1425039"
  },
  {
    "text": "job tracker task tracker every there's a bunch of nodes that are task trackers and the single node that's job",
    "start": "1425039",
    "end": "1431960"
  },
  {
    "text": "tracker um this is our op Center um that's showing the",
    "start": "1431960",
    "end": "1439120"
  },
  {
    "text": "ring 20 nodes HP nodes are having the H",
    "start": "1439120",
    "end": "1444559"
  },
  {
    "text": "in it and that's the Cassandra site",
    "start": "1444559",
    "end": "1450520"
  },
  {
    "text": "so what we are seeing here is basically historically ETL you would run",
    "start": "1450520",
    "end": "1456400"
  },
  {
    "text": "Hado jobs on some other in on a hdfs store and take those results put it into",
    "start": "1456400",
    "end": "1461919"
  },
  {
    "text": "a table that you can then serve the rest of the your web app from and that table",
    "start": "1461919",
    "end": "1467080"
  },
  {
    "text": "instead of being on my equal and not scaling can now use has that's where the no SQL Source came into play and this",
    "start": "1467080",
    "end": "1474159"
  },
  {
    "text": "one you actually use the same um cluster that you have use it both for brisk and",
    "start": "1474159",
    "end": "1480039"
  },
  {
    "text": "for Cass had C so with that we'll get to your",
    "start": "1480039",
    "end": "1486480"
  },
  {
    "text": "question how does this thing work right um the core of it we're using the",
    "start": "1486480",
    "end": "1493840"
  },
  {
    "start": "1490000",
    "end": "1518000"
  },
  {
    "text": "aachi soon to be Apachi Yahoo distribution um which has the security patches to it uh Apachi Hive uh which is",
    "start": "1493840",
    "end": "1503120"
  },
  {
    "text": "the query mechanism at the top that that's running on top of this Cassandra",
    "start": "1503120",
    "end": "1508600"
  },
  {
    "text": "08 which just got um released um and cql interface and",
    "start": "1508600",
    "end": "1516640"
  },
  {
    "start": "1518000",
    "end": "1538000"
  },
  {
    "text": "Thrift the column families that we widely discussed how do we actually make",
    "start": "1518000",
    "end": "1523480"
  },
  {
    "text": "this whole hdfs sit on Cassandra her do file system is its own mechanism what",
    "start": "1523480",
    "end": "1530840"
  },
  {
    "text": "we've done is basically use regular column families to write I notes and as",
    "start": "1530840",
    "end": "1537039"
  },
  {
    "text": "blocks right subblocks little little code here create",
    "start": "1537039",
    "end": "1542679"
  },
  {
    "start": "1538000",
    "end": "1653000"
  },
  {
    "text": "two complete column families on the same keyspace Cassandra file system so this",
    "start": "1542679",
    "end": "1548399"
  },
  {
    "text": "is how you would write code for Cassandra Thrift um client anyways so",
    "start": "1548399",
    "end": "1553960"
  },
  {
    "text": "very simple nothing fancy just completely gold good old fashion Cassandra file system Cassandra um",
    "start": "1553960",
    "end": "1561120"
  },
  {
    "text": "column families so nothing new nothing um out of the world the it's actually",
    "start": "1561120",
    "end": "1567080"
  },
  {
    "text": "pretty dead simple once we started thinking about it we like wow why didn't we do this before um subblocks you can",
    "start": "1567080",
    "end": "1572640"
  },
  {
    "text": "set the caches I show key cache size here you can grow that if you if you think you can get better better",
    "start": "1572640",
    "end": "1578679"
  },
  {
    "text": "performance you can set row cache on the iote to get a lot more in memory performance for your I know column",
    "start": "1578679",
    "end": "1584840"
  },
  {
    "text": "family but that's that's that's the beauty behind it it's just pretty good oldfashioned it's run and",
    "start": "1584840",
    "end": "1591320"
  },
  {
    "text": "maintained operated and maintained just like a regular Cassandra column families so all this all the discussion we had",
    "start": "1591320",
    "end": "1596960"
  },
  {
    "text": "earlier pay off now you know how it works it's straightforward it's well",
    "start": "1596960",
    "end": "1602600"
  },
  {
    "text": "well distributed replicated and uses the same pieces so if you look at the actual",
    "start": "1602600",
    "end": "1608720"
  },
  {
    "text": "um distribution how the data is actually going to the system you have take a file",
    "start": "1608720",
    "end": "1614039"
  },
  {
    "text": "load it basically has all the iodes subblocks blocks are distributed across",
    "start": "1614039",
    "end": "1619440"
  },
  {
    "text": "different nodes as just regular column families that's that's the Integrity of",
    "start": "1619440",
    "end": "1625720"
  },
  {
    "text": "it um we actually worked with different performance sizes for these and came up",
    "start": "1625720",
    "end": "1632640"
  },
  {
    "text": "with different um sets that work for great work very well for most of the benchmarks as well as some of our",
    "start": "1632640",
    "end": "1639039"
  },
  {
    "text": "customers we figuring out what's the what what's the best use sizes and so it's a new product in many ways so we",
    "start": "1639039",
    "end": "1646120"
  },
  {
    "text": "are making sure it's we understand the End customer plays with it and get get a",
    "start": "1646120",
    "end": "1651440"
  },
  {
    "text": "good performance note around it so Hadoop is really adding job tracker task",
    "start": "1651440",
    "end": "1657120"
  },
  {
    "start": "1653000",
    "end": "1675000"
  },
  {
    "text": "tracker and all the other in intelligent nuances around um around the map rues",
    "start": "1657120",
    "end": "1664760"
  },
  {
    "text": "and what we did is basically take those two and put it on on I mean have all every node have capability to run tasks",
    "start": "1664760",
    "end": "1672120"
  },
  {
    "text": "and one node today to run jobs um brisk snitch right so how do I",
    "start": "1672120",
    "end": "1679840"
  },
  {
    "start": "1675000",
    "end": "1722000"
  },
  {
    "text": "know what is a Cassandra node and what is a Brisk node um so snitch is the",
    "start": "1679840",
    "end": "1685440"
  },
  {
    "text": "concept where let's say you issued a right it said write this to a different",
    "start": "1685440",
    "end": "1692159"
  },
  {
    "text": "dc2 region right I know that East Us East could crash so I want to make a",
    "start": "1692159",
    "end": "1699039"
  },
  {
    "text": "copy in us right so we have a concept of easy to snitch for that so where you can",
    "start": "1699039",
    "end": "1704600"
  },
  {
    "text": "actually during your right and I say what me mechanism to use for what snitch",
    "start": "1704600",
    "end": "1711039"
  },
  {
    "text": "to use for is one other column in your your actual right so it actually goes and make sure that the the replica copy",
    "start": "1711039",
    "end": "1718360"
  },
  {
    "text": "nodes will reside or fail the right right so so what we did is piggy back on the",
    "start": "1718360",
    "end": "1725559"
  },
  {
    "start": "1722000",
    "end": "1778000"
  },
  {
    "text": "same simple Dynamic snitch simple snitch to use for for prisk versus Cassandra so",
    "start": "1725559",
    "end": "1734320"
  },
  {
    "text": "what we did here is in the same ring we've defined logical logically these",
    "start": "1734320",
    "end": "1740840"
  },
  {
    "text": "are two different data centers one is a Brisk Data Center and so using the same simple snitch",
    "start": "1740840",
    "end": "1748919"
  },
  {
    "text": "mechanism we say if are you do you have tracker yes I am a Tracker node if it's",
    "start": "1748919",
    "end": "1754960"
  },
  {
    "text": "a Tracker node we know it is a Hadoop node essentially so the same Cass nodes",
    "start": "1754960",
    "end": "1761360"
  },
  {
    "text": "whoever is is a Tracker I mean whether it's a job or task tracker right so he",
    "start": "1761360",
    "end": "1766519"
  },
  {
    "text": "belongs to DC if he does not have a Tracker then he must be a sand a regular node so we just use the same mechanism",
    "start": "1766519",
    "end": "1773840"
  },
  {
    "text": "so everything is using the notion of are you a Tracker or not one of the things that um was going",
    "start": "1773840",
    "end": "1782120"
  },
  {
    "start": "1778000",
    "end": "1937000"
  },
  {
    "text": "to say is you want to use your",
    "start": "1782120",
    "end": "1787720"
  },
  {
    "text": "hadu to run so a classic workflow and that's one of the questions that I didn't get your name",
    "start": "1787720",
    "end": "1794360"
  },
  {
    "text": "sorry one of the questions Dan asked earlier was why why Cassandra and what's uh and",
    "start": "1794360",
    "end": "1802679"
  },
  {
    "text": "why do I need to have a Brisk snitch why do I have a Brisk and the cassander side",
    "start": "1802679",
    "end": "1807720"
  },
  {
    "text": "so typical use cases and there are more use cases that we seeing customers use it is people have a bunch of logs",
    "start": "1807720",
    "end": "1815159"
  },
  {
    "text": "machine generated data access logs um that you want to",
    "start": "1815159",
    "end": "1821600"
  },
  {
    "text": "process you want to take that data and run a large Hadoop job on it and",
    "start": "1821600",
    "end": "1827320"
  },
  {
    "text": "categorize where for example um video analytics logs right you have you want",
    "start": "1827320",
    "end": "1833080"
  },
  {
    "text": "you have all these click streams coming in from all the geographies you want to run a Hadoop job and says I hit so many",
    "start": "1833080",
    "end": "1839200"
  },
  {
    "text": "from Europe I want to hit some I hit so many from the US and all these states right so that's your typical use case so",
    "start": "1839200",
    "end": "1847200"
  },
  {
    "text": "you run this hadu job that runs on all these logs and gives the IP addresses translates them gets you the answer",
    "start": "1847200",
    "end": "1853480"
  },
  {
    "text": "right now you have this answer and you know you have like a dozen uh different",
    "start": "1853480",
    "end": "1860720"
  },
  {
    "text": "like lots of customers wanting to serve this look at this data right away in a in a web app right that part the second",
    "start": "1860720",
    "end": "1868720"
  },
  {
    "text": "answers of this Hado job you want to put in a high scale store right so typically people would",
    "start": "1868720",
    "end": "1876039"
  },
  {
    "text": "put it on a my SQL shot it or put it on Cassandra and run that part on Cassandra",
    "start": "1876039",
    "end": "1881480"
  },
  {
    "text": "because they know that scales so what this Crocs of the brisk invention if you will is it brings them two together",
    "start": "1881480",
    "end": "1887960"
  },
  {
    "text": "together you can now run the brisk Hado jobs on one part of your cluster and",
    "start": "1887960",
    "end": "1893600"
  },
  {
    "text": "they can be busy all the time continuously your logs you're just uploading logs it's running the Hado",
    "start": "1893600",
    "end": "1899080"
  },
  {
    "text": "jobs here and you scrape that data into",
    "start": "1899080",
    "end": "1904240"
  },
  {
    "text": "the same cluster on the side so you actually can have a cassander section inside so you don't actually take the",
    "start": "1904240",
    "end": "1910519"
  },
  {
    "text": "end result of this and put it into another data set data store put it right here run your app from there so in some",
    "start": "1910519",
    "end": "1917159"
  },
  {
    "text": "sense um it reduces how many clusters you as a",
    "start": "1917159",
    "end": "1922880"
  },
  {
    "text": "Ops Team or a design team have to maintain and different ways to manage them so it's just one thing and then you",
    "start": "1922880",
    "end": "1929880"
  },
  {
    "text": "can you can increase the the size at bootstrap with based on how you're using",
    "start": "1929880",
    "end": "1935360"
  },
  {
    "text": "it does that make sense so essentially the end to end workflow we looked at the",
    "start": "1935360",
    "end": "1941120"
  },
  {
    "text": "end to end workflow and then figured out what is an interesting use case for it so we looked at snitch then there is",
    "start": "1941120",
    "end": "1946559"
  },
  {
    "text": "Hive so hive presents a classic SQL like access um and to a to the whole Hado EOS",
    "start": "1946559",
    "end": "1954200"
  },
  {
    "text": "system where you can run a big large query upad load data run large query on",
    "start": "1954200",
    "end": "1959840"
  },
  {
    "text": "the Hado stuff right now there is pushon predicates which is coming up in beta 2",
    "start": "1959840",
    "end": "1965679"
  },
  {
    "text": "which is basically allows you to slice and slice cut down your slices and partition it up front now here's a",
    "start": "1965679",
    "end": "1973799"
  },
  {
    "text": "typical um and this is a very small um select by the way this usually you can",
    "start": "1973799",
    "end": "1979240"
  },
  {
    "text": "done do a large this part of the actual um example on our website so we want you",
    "start": "1979240",
    "end": "1987039"
  },
  {
    "text": "to play with it after you're done but basically you can load data through a file and run a lot of queries",
    "start": "1987039",
    "end": "1994279"
  },
  {
    "text": "right so here's where your question on how do I get joins and Cassandra use",
    "start": "1994279",
    "end": "2000519"
  },
  {
    "text": "Hive right it's not the same it's not it's going to translate that um select",
    "start": "2000519",
    "end": "2007360"
  },
  {
    "text": "to a M reduced job and come back um rapidly much faster than other ways but",
    "start": "2007360",
    "end": "2015159"
  },
  {
    "text": "there is no since you never had a join this one of the first ways you can actually get some SQL like access to to",
    "start": "2015159",
    "end": "2022360"
  },
  {
    "text": "the Cassandra ecosystem Hive again is a um project",
    "start": "2022360",
    "end": "2028600"
  },
  {
    "text": "from Facebook as most of you aware of so that's that's the gist of what",
    "start": "2028600",
    "end": "2034279"
  },
  {
    "text": "we're trying to do is to get you cross Data Center support and that's I mean historically",
    "start": "2034279",
    "end": "2041760"
  },
  {
    "text": "this was never available for ordinary people high scale like Ordinary People as in financial services guys would do",
    "start": "2041760",
    "end": "2049919"
  },
  {
    "text": "multi dat Center um or big companies but you can do that with two two notes right",
    "start": "2049919",
    "end": "2056398"
  },
  {
    "text": "you can you continue to use your Cassandra column families Cassandra CFS which is the colum um the cassander file",
    "start": "2056399",
    "end": "2064040"
  },
  {
    "text": "system and at some future ETL will completely become blended with real time",
    "start": "2064040",
    "end": "2070200"
  },
  {
    "text": "it's not there yet it's near real time but but it's kind of the vision that we have it's they kind of getting there but",
    "start": "2070200",
    "end": "2076919"
  },
  {
    "text": "it's not there right um here's your job tracker um",
    "start": "2076919",
    "end": "2083720"
  },
  {
    "text": "using the op Center so when you run a terasort you can actually see the progress kind of your um you still get",
    "start": "2083720",
    "end": "2090878"
  },
  {
    "text": "your old job tracker we don't take that away but this is um available to see",
    "start": "2090879",
    "end": "2095960"
  },
  {
    "text": "progress um it's a huge team effort um all hands",
    "start": "2095960",
    "end": "2102000"
  },
  {
    "text": "on deck we basically around the turn of the spring we had a announcement want to",
    "start": "2102000",
    "end": "2107599"
  },
  {
    "text": "get go make brisk happen go make um had dup happen we integrated the entire team",
    "start": "2107599",
    "end": "2113800"
  },
  {
    "text": "pretty much all the all all ends of it made sure we it's QA done well tested",
    "start": "2113800",
    "end": "2119200"
  },
  {
    "text": "documented but that's the whole theme so none of this is um has been um it wasn't",
    "start": "2119200",
    "end": "2126240"
  },
  {
    "text": "easy but we made it happen we have a large user base of factor um we also have customers writing clients in non",
    "start": "2126240",
    "end": "2134280"
  },
  {
    "text": "Java right we also have the Picassa Picassa and P Picasa both of them are",
    "start": "2134280",
    "end": "2139480"
  },
  {
    "text": "part of data Stacks um teams um so we also have um Scala clients um cc++ is",
    "start": "2139480",
    "end": "2148400"
  },
  {
    "text": "not uncommon if customers have used that and um people are not you look at",
    "start": "2148400",
    "end": "2156640"
  },
  {
    "text": "the thrift API where we created the cre space and the column family that is the thrift API so it's it's convoluted but",
    "start": "2156640",
    "end": "2162880"
  },
  {
    "text": "it's there it can be used um it's all Java so in some sense people are not um",
    "start": "2162880",
    "end": "2169760"
  },
  {
    "text": "but it is in some sense that's the focus for us is to make the API even simpler so it becomes",
    "start": "2169760",
    "end": "2176920"
  },
  {
    "text": "easier um here's a 100 node brisk",
    "start": "2176920",
    "end": "2182319"
  },
  {
    "text": "cluster that we ran during our tests we kept it um running for a long time",
    "start": "2182319",
    "end": "2188800"
  },
  {
    "text": "enough to bur some good ec2 hours but but yeah that's um so the the evolution",
    "start": "2188800",
    "end": "2195640"
  },
  {
    "text": "continues we have taken that initial Facebook Cassandra now I've taken Hado",
    "start": "2195640",
    "end": "2202640"
  },
  {
    "text": "Hive you have bris it's moving along to get you a much more robust stack that's",
    "start": "2202640",
    "end": "2208800"
  },
  {
    "text": "what um that's the I mean once you have enough nuances you're able to to use it",
    "start": "2208800",
    "end": "2215720"
  },
  {
    "text": "in a more um solid passion so our job is to try and push that push that up there",
    "start": "2215720",
    "end": "2221200"
  },
  {
    "text": "see how the customer use cases play uh pig is now part of the the same stuff so",
    "start": "2221200",
    "end": "2227319"
  },
  {
    "text": "you'll get the whole eventual stack which you need to you need to do data analysis",
    "start": "2227319",
    "end": "2233040"
  },
  {
    "text": "so um get started uh it's open source it's all Apachi um is um pris is completely",
    "start": "2233040",
    "end": "2243280"
  },
  {
    "text": "uh I we we are encouraging lot more um what work from the Comm comms from the",
    "start": "2243280",
    "end": "2249599"
  },
  {
    "text": "from people developers users U brisk Ami itself is available was the Wi-Fi here",
    "start": "2249599",
    "end": "2257680"
  },
  {
    "text": "failed on us but that was part of the demo as well all right so thank you",
    "start": "2257680",
    "end": "2266360"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2266360",
    "end": "2282280"
  }
]