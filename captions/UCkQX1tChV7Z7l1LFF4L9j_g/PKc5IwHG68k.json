[
  {
    "text": "now just a quick note about the about the title of my presentation here obviously any any programming language",
    "start": "24560",
    "end": "30039"
  },
  {
    "text": "that is that is T and complete is going to be equivalent to one another so you know and and",
    "start": "30039",
    "end": "35600"
  },
  {
    "text": "especially on the jvm it's very hard for me to say that that one that one language which compiles down to Java",
    "start": "35600",
    "end": "40680"
  },
  {
    "text": "bite code is is greater than another in some sense in fact I think the punchline",
    "start": "40680",
    "end": "45800"
  },
  {
    "text": "of this talk at the very end is going to be something like Scola is actually less than Java you write less code it's more regular you you you have to think less",
    "start": "45800",
    "end": "52160"
  },
  {
    "text": "about what you're doing but uh but the the the thing that I want to",
    "start": "52160",
    "end": "57960"
  },
  {
    "text": "try to sort of set the tone with is is the idea that um is the the idea that this is going to somewhat change your",
    "start": "57960",
    "end": "63760"
  },
  {
    "text": "mindset about programming in general and I think even even some of the lessons that uh that you pick up from here even if you're not programming in the schola",
    "start": "63760",
    "end": "69759"
  },
  {
    "text": "language are still going to be applicable to some of the Java code that you end up writing um so actually",
    "start": "69759",
    "end": "76680"
  },
  {
    "text": "another another quick show hands how many uh how many people have used the guava",
    "start": "76680",
    "end": "82159"
  },
  {
    "text": "libraries so that's about was it like maybe 20 people something like that yeah",
    "start": "82159",
    "end": "87920"
  },
  {
    "text": "bit bit more than a quarter of us so that's good or guava Google Collections and there's a lot of sort of functionally oriented stuff in there",
    "start": "87920",
    "end": "94840"
  },
  {
    "text": "that that is somewhat reminiscent of Scala or closure if you're familiar with that or other other functional languages",
    "start": "94840",
    "end": "100720"
  },
  {
    "text": "so so it should be fun so let's uh let's jump into it here first uh start off a",
    "start": "100720",
    "end": "106200"
  },
  {
    "text": "little history lesson so first things first 1996",
    "start": "106200",
    "end": "112240"
  },
  {
    "text": "everybody remember Duke yeah Good Old Duke so Sun releases",
    "start": "112240",
    "end": "117320"
  },
  {
    "text": "Java 1.0 designed by our our buddy James goling",
    "start": "117320",
    "end": "122439"
  },
  {
    "text": "97 Java 1.0 obviously had some shortcomings and uh so there was a there",
    "start": "122439",
    "end": "129399"
  },
  {
    "text": "was a small group um primarily Martin ODI and Philip wadler who uh who set out to work on a new language spec called",
    "start": "129399",
    "end": "136200"
  },
  {
    "text": "Pizza um and their work was was published at the POA conference and that was a a superet of java um strictly",
    "start": "136200",
    "end": "143160"
  },
  {
    "text": "superet so you could write Java code in Pizza in the pizza language um and it would actually you know if you run it",
    "start": "143160",
    "end": "148599"
  },
  {
    "text": "through the pizza compiler would actually translate to Java source code which then you would run through Java C",
    "start": "148599",
    "end": "154800"
  },
  {
    "text": "and you know the lo and behold you get bite code out the other end um so it had",
    "start": "154800",
    "end": "159959"
  },
  {
    "text": "a few interesting language features um one uh one really interesting one very",
    "start": "159959",
    "end": "165000"
  },
  {
    "text": "very important one for Java is this notion of parametric polymorphism which",
    "start": "165000",
    "end": "170200"
  },
  {
    "text": "I think everybody everybody probably knows better as generics um it also had a couple others",
    "start": "170200",
    "end": "175280"
  },
  {
    "text": "algebraic types higher order functions and we're going to see some of that a little bit later",
    "start": "175280",
    "end": "181840"
  },
  {
    "text": "1998 rolls around and Sun uh or the uh",
    "start": "182000",
    "end": "187400"
  },
  {
    "text": "what was it called javasoft uh which was the subsidiary of sun that was working on Java um it took a real interest in",
    "start": "187400",
    "end": "194000"
  },
  {
    "text": "what was going on with pizza and they said okay you know all this stuff is great but you know of",
    "start": "194000",
    "end": "200400"
  },
  {
    "text": "course we can't introduce all these new features into the language all at once what we'd like to what we'd like to work on is a new approach to generics again",
    "start": "200400",
    "end": "207879"
  },
  {
    "text": "this parametric polymorphism and uh and so they they worked on something called GJ and actually I've",
    "start": "207879",
    "end": "213280"
  },
  {
    "text": "got a little picture here of we've got Phil wadler Martin ODI uh St I think it's Eric stamer and",
    "start": "213280",
    "end": "221920"
  },
  {
    "text": "uh and gillad braa um so so that that pulled in generics and there was a there was sort",
    "start": "221920",
    "end": "228400"
  },
  {
    "text": "of a shift in the in the computational model or the the compilation model I should say where um rather than having a",
    "start": "228400",
    "end": "234920"
  },
  {
    "text": "sort of a source to Source translation translating Pizza to Java Source this",
    "start": "234920",
    "end": "239959"
  },
  {
    "text": "the the new the new GJ compiler actually literally compiled uh this GJ source",
    "start": "239959",
    "end": "245840"
  },
  {
    "text": "code down directly to javaby code so so that was kind of cool and that was where the notion of type eraser came from",
    "start": "245840",
    "end": "251840"
  },
  {
    "text": "which you know for for anybody who sort of wrestled with the um uh wrestled with Java generics in any any appreciable way",
    "start": "251840",
    "end": "258320"
  },
  {
    "text": "you're going to you're going to be pretty familiar with a erer um so that's where that came from that was",
    "start": "258320",
    "end": "263440"
  },
  {
    "text": "1998 2000 so this was an interesting development so this guy Martin ODI uh who who had worked on the GJ",
    "start": "263440",
    "end": "270759"
  },
  {
    "text": "compiler and who had initially worked on Pizza um son took a took a look at the work that",
    "start": "270759",
    "end": "277320"
  },
  {
    "text": "he did on the on the GJ compiler and said wow our Java C kind of sucks why don't we take that why don't",
    "start": "277320",
    "end": "283800"
  },
  {
    "text": "we just take take GJ's compiler and just use that as Java C so so that's actually what they did um the uh the the the Java",
    "start": "283800",
    "end": "291400"
  },
  {
    "text": "C that we're all using today um that was introduced in jdk 1.3 was actually",
    "start": "291400",
    "end": "297919"
  },
  {
    "text": "basically sort of a stripped down version of of the GJ compiler um at that point obviously in in Java 1.3 they",
    "start": "297919",
    "end": "304440"
  },
  {
    "text": "didn't even have generics yet they they weren't using any of the new the new language features that were introduced in GJ however the compiler was I guess",
    "start": "304440",
    "end": "313199"
  },
  {
    "text": "more correct and performed better and crashed less and stuff like that um so just you know kind of off on",
    "start": "313199",
    "end": "320280"
  },
  {
    "text": "a little bit more of a tangent finally in 2004 Java 1.5 incorporates generics",
    "start": "320280",
    "end": "326560"
  },
  {
    "text": "so this was what uh uh seven seven years after after the",
    "start": "326560",
    "end": "332319"
  },
  {
    "text": "pizza language that came out so that's you know sort of The Testament to to the uh the the Java",
    "start": "332319",
    "end": "338840"
  },
  {
    "text": "process um but it made it in there okay so meanwhile kind of on a",
    "start": "338840",
    "end": "344960"
  },
  {
    "text": "whole other story arch in the uh in the programming language Community we've got you know starting starting around the",
    "start": "344960",
    "end": "351120"
  },
  {
    "text": "mid 80s there was a ton of functional programming languages and they were used mainly in research or",
    "start": "351120",
    "end": "358479"
  },
  {
    "text": "Academia um so these would be derivatives of Lis you know scheme ml so for example o camel or",
    "start": "358479",
    "end": "366680"
  },
  {
    "text": "things like that um and another language called Miranda um they explored a whole lot of interesting different language",
    "start": "366680",
    "end": "372240"
  },
  {
    "text": "features uh including type inference which we're going to see uh lazy evaluation and higher rank",
    "start": "372240",
    "end": "379280"
  },
  {
    "text": "types and oh actually one thing just to back up here I'm say sorry these pictures are so small but we've got",
    "start": "379280",
    "end": "385360"
  },
  {
    "text": "another picture of Phil wadler here who who incidentally had worked on GJ wearing a bow and I feel like bow TI is",
    "start": "385360",
    "end": "390639"
  },
  {
    "text": "are really a big thing in functional programming this is it was really",
    "start": "390639",
    "end": "395919"
  },
  {
    "text": "something I noticed I I want to uh I I I want to get myself a bow tie because I I don't I don't really feel legitimate",
    "start": "395919",
    "end": "401880"
  },
  {
    "text": "with one anyway so so next uh next Subs slide here we've got uh we've got Simon pton Jones wearing his bow tie and uh he",
    "start": "401880",
    "end": "409720"
  },
  {
    "text": "was he was one of the principal contributors to a language called Haskell um how many people have have heard of",
    "start": "409720",
    "end": "416319"
  },
  {
    "text": "hasal everybody um how many people have programmed in",
    "start": "416319",
    "end": "422800"
  },
  {
    "text": "hll how many people have programmed in hll for their jobs",
    "start": "422800",
    "end": "429840"
  },
  {
    "text": "oh um H introduced some some interesting New Concepts on top of on top of those",
    "start": "431879",
    "end": "437319"
  },
  {
    "text": "that I mentioned previously um a notion of type classes which is somewhat",
    "start": "437319",
    "end": "443240"
  },
  {
    "text": "roughly analogous to what you see in object-oriented programming but a bit more open a bit more extensible still um",
    "start": "443240",
    "end": "449080"
  },
  {
    "text": "and it features this notion of monads which we'll talk about in the talk here um and again Martin ODI pops",
    "start": "449080",
    "end": "456840"
  },
  {
    "text": "up he uh he contributed some interesting work here on um on higher ranked types",
    "start": "456840",
    "end": "461960"
  },
  {
    "text": "into the uh GHC the Glasgow hll compiler so this dude Martin's showing up all",
    "start": "461960",
    "end": "467759"
  },
  {
    "text": "over the place finally uh between 99 2001 uh",
    "start": "467759",
    "end": "474840"
  },
  {
    "text": "Martin was at uh the uh efl or efpp I never remember uh which direction it is",
    "start": "474840",
    "end": "480800"
  },
  {
    "text": "but he was working on a a new research language uh called funnel which was sort of I'm not going to dwell to dwell too",
    "start": "480800",
    "end": "487240"
  },
  {
    "text": "much on this but it was you know basically a return to totally basic principles wanted to really divorce himself I think from from all of the uh",
    "start": "487240",
    "end": "493720"
  },
  {
    "text": "all of the sowet and tears that had gone into uh gone into the work on GJ and so forth um and wanted to wanted to really",
    "start": "493720",
    "end": "500039"
  },
  {
    "text": "get back to the functional Roots um while also uh looking at something called Petr Nets which is which is relevant to um concurrent",
    "start": "500039",
    "end": "507960"
  },
  {
    "text": "programming um it was able Model A lot of different programming Styles so imperative objectoriented I mentioned",
    "start": "507960",
    "end": "513399"
  },
  {
    "text": "concurrent also and it also compiled to jvm bite code so so that was kind of an interesting start and then finally",
    "start": "513399",
    "end": "521719"
  },
  {
    "text": "coming up to where we are now oh there's Martin he's not wearing a bow tie he uh he he published uh along with",
    "start": "521719",
    "end": "529399"
  },
  {
    "text": "along with a few colleagues the first version of The Scholar language um which",
    "start": "529399",
    "end": "534760"
  },
  {
    "text": "uh his I think his reflection on funnel it turns out actually that uh",
    "start": "534760",
    "end": "540079"
  },
  {
    "text": "that although it was it was very beautiful and very sort of elegant and pure in principle it was very difficult",
    "start": "540079",
    "end": "546000"
  },
  {
    "text": "to actually work with if you were trying to write real you know real uh production scale software um just",
    "start": "546000",
    "end": "552560"
  },
  {
    "text": "because of some of the some of the Sy syntactic issues so um so he kind of started fresh um and Scala came came out",
    "start": "552560",
    "end": "560040"
  },
  {
    "text": "as a result of that so so the idea with Scala of course is is it's it's both an object-oriented language in the",
    "start": "560040",
    "end": "565399"
  },
  {
    "text": "tradition of small talk and uh self even",
    "start": "565399",
    "end": "570640"
  },
  {
    "text": "and you know C++ and Java and so on um and it's also a functional language at the same time and it seems seemly",
    "start": "570640",
    "end": "576920"
  },
  {
    "text": "seamlessly integrates the two approaches um and to sort of tie things",
    "start": "576920",
    "end": "583959"
  },
  {
    "text": "back up it uh includes several language features from Pizza this you know initial project that he had worked on uh",
    "start": "583959",
    "end": "590880"
  },
  {
    "text": "back in 1996 uh such as higher order functions and of course generics and and case",
    "start": "590880",
    "end": "598320"
  },
  {
    "text": "classes and so on and then over the last uh I want to say yeah about six years uh the Scala 2.x",
    "start": "598320",
    "end": "606519"
  },
  {
    "text": "Series has been going undergoing rapid I mean really rapid uh rapid change uh",
    "start": "606519",
    "end": "614079"
  },
  {
    "text": "rapid development um so incorporating uh some some stuff from hascal this this",
    "start": "614079",
    "end": "619360"
  },
  {
    "text": "lazy evaluation um a notion of implicits and refining those to to basically work",
    "start": "619360",
    "end": "626519"
  },
  {
    "text": "out as as hcal style multiparameter type classes which which uh we won't be talking about it's sort of an advanced topic but uh it's very cool that you can",
    "start": "626519",
    "end": "633000"
  },
  {
    "text": "do that um generalized pattern matching uh finer grain qualification of uh",
    "start": "633000",
    "end": "639639"
  },
  {
    "text": "access modifiers so private and protected and so on and uh and better interop with with Java",
    "start": "639639",
    "end": "646200"
  },
  {
    "text": "code so man I I spent at least 10 minutes",
    "start": "646200",
    "end": "652120"
  },
  {
    "text": "working on this graphic my my Ivory Tower with the with the Lambda I hope you enjoy it",
    "start": "652120",
    "end": "659560"
  },
  {
    "text": "yeah thank you my talk is over any questions um so you know this functional",
    "start": "659560",
    "end": "666200"
  },
  {
    "text": "programming introduces a lot of very unfamiliar vocabulary uh parametric polymorphism",
    "start": "666200",
    "end": "671720"
  },
  {
    "text": "we've talked about we call it generics it's not quite so scary uh things like algebraic",
    "start": "671720",
    "end": "678600"
  },
  {
    "text": "types higher order functions and higher rank types and so on and people really",
    "start": "678600",
    "end": "684440"
  },
  {
    "text": "talk this way especially if you if you go on Twitter and you follow a certain a certain set of the uh certain of the",
    "start": "684440",
    "end": "689560"
  },
  {
    "text": "community you'll see some some people who really look smart but um you don't have to you don't",
    "start": "689560",
    "end": "697680"
  },
  {
    "text": "have to drink the Kool-Aid quite that uh well quite so much from the fire hose you can uh you can take things at a much",
    "start": "697680",
    "end": "705480"
  },
  {
    "text": "more much more pragmatic uh Pace I think so you know there are indeed users of Scala in the industry and I'm sure you",
    "start": "705480",
    "end": "712600"
  },
  {
    "text": "know most of you are here because you've heard some buzz from say Yammer or Twitter for square you know some of",
    "start": "712600",
    "end": "719120"
  },
  {
    "text": "these these guys um who who have been using it to to great success and especially who have been using it for um",
    "start": "719120",
    "end": "726160"
  },
  {
    "text": "for its um uh concurrency Primitives uh its ability to uh to to to handle",
    "start": "726160",
    "end": "732560"
  },
  {
    "text": "multi-threading uh in a sort of a higher level of of of abstraction and therefore a higher level of",
    "start": "732560",
    "end": "739279"
  },
  {
    "text": "safety um so you know just kind of to to to skip through these real quick there's you know some some testimonials there",
    "start": "740160",
    "end": "746639"
  },
  {
    "text": "been a lot of people talking about Scala so for example Le um one thing that I really you know you can sort of read",
    "start": "746639",
    "end": "753199"
  },
  {
    "text": "this read this as you like but one one thing that I really appreciated is is the mention that uh that the fact that",
    "start": "753199",
    "end": "758399"
  },
  {
    "text": "it is a jvm language and the fact that there are you know essentially language bindings for free with",
    "start": "758399",
    "end": "766519"
  },
  {
    "text": "Java gives you you know integration with any existing code that you've written or",
    "start": "766519",
    "end": "771560"
  },
  {
    "text": "any existing code that's out there in the community so you know you've got Maven Central let's say that that's full",
    "start": "771560",
    "end": "777120"
  },
  {
    "text": "of you know tens of thousands of of different uh different artifacts that have that have been contributed and you",
    "start": "777120",
    "end": "784560"
  },
  {
    "text": "can just straight up use those and you know it's it's it's really fun it gives it gives Scala sort of a Kickstart in a",
    "start": "784560",
    "end": "792120"
  },
  {
    "text": "sense um and you know of course if you if you have some Legacy code of your own",
    "start": "792120",
    "end": "797600"
  },
  {
    "text": "and you uh you you know you need to you need to work with that you you can't you can't afford the time to rewrite",
    "start": "797600",
    "end": "803600"
  },
  {
    "text": "everything all at once um being able to to introduce just in bits and pieces uh",
    "start": "803600",
    "end": "809279"
  },
  {
    "text": "some you know some some new Scola code while at the same time retaining most of your other work is a really nice thing",
    "start": "809279",
    "end": "816199"
  },
  {
    "text": "to to have uh what else the prod productivity",
    "start": "816199",
    "end": "821279"
  },
  {
    "text": "improvements are massive uh here say Twitter had some",
    "start": "821279",
    "end": "826720"
  },
  {
    "text": "good quotes languages that are more research oriented and this is gets back to my my sort of Ivory Tower slide here",
    "start": "826720",
    "end": "832440"
  },
  {
    "text": "the languages more research oriented tend to have a lot of problems in production and they they didn't find",
    "start": "832440",
    "end": "837720"
  },
  {
    "text": "that they run into the those sorts of issues in Scala and certainly I mean",
    "start": "837720",
    "end": "843120"
  },
  {
    "text": "I've done some work for example with has um again not for work but for fun um and",
    "start": "843120",
    "end": "850680"
  },
  {
    "text": "uh you know even just my my toy for fun code I did I did run into some set of some set of issues where you know for",
    "start": "850680",
    "end": "857160"
  },
  {
    "text": "example there were uh space leaks due to uh excessive laziness things like that that you know things that things that",
    "start": "857160",
    "end": "863800"
  },
  {
    "text": "sound very good in in principle but don't don't actually work out that great in practice all the time and and and Scala is surprisingly uh surprisingly",
    "start": "863800",
    "end": "871839"
  },
  {
    "text": "low on on that scale let's see Kota hail so anybody",
    "start": "871839",
    "end": "880199"
  },
  {
    "text": "familiar with the uh with the the big the big leaked email Yammer controversy yeah five 10 something like",
    "start": "880199",
    "end": "888040"
  },
  {
    "text": "that there was a there was an email it was a PR private email between Kota and uh and Martin and a couple other a",
    "start": "888040",
    "end": "894120"
  },
  {
    "text": "couple other folks uh in in the scholar Community where uh he was really kind of",
    "start": "894120",
    "end": "899240"
  },
  {
    "text": "kind of digging into to uh a lot of a lot of serious performance issues that",
    "start": "899240",
    "end": "904880"
  },
  {
    "text": "uh that that come up in in you know very common practice um but uh you know so",
    "start": "904880",
    "end": "911560"
  },
  {
    "text": "this was sort of kot cot's public response to that which said look you know Scola is currently the main",
    "start": "911560",
    "end": "916839"
  },
  {
    "text": "language for our our backend services and in the past few years we've solved a number of hard problems using it so you",
    "start": "916839",
    "end": "923480"
  },
  {
    "text": "know that that says something this this is this is still a very pragmatic you know sort of approach and might my",
    "start": "923480",
    "end": "929079"
  },
  {
    "text": "favorite quote of all here is is this is better than tab completion which I think speaks for",
    "start": "929079",
    "end": "935720"
  },
  {
    "text": "itself all right so let's take a look at some scolar code to start with so first of",
    "start": "935720",
    "end": "943560"
  },
  {
    "text": "all I'm going to ask and I I'm not sure I want to know the answer but can everybody read this anybody can't read",
    "start": "943560",
    "end": "949519"
  },
  {
    "text": "this in the back is it all right so the guy in the front can't read",
    "start": "949519",
    "end": "956319"
  },
  {
    "text": "it the guys in the back are okay all right sweet so what do we notice here so we've got",
    "start": "956319",
    "end": "963000"
  },
  {
    "text": "you know this is basically our little Hello World app right so some things that we notice about this well let's just you know",
    "start": "963000",
    "end": "969839"
  },
  {
    "text": "let's kind of run through this actually let's let's let's get some audience participation what do you uh um and",
    "start": "969839",
    "end": "975720"
  },
  {
    "text": "actually particularly the folks who have never seen Scala before I want some I want some First",
    "start": "975720",
    "end": "982079"
  },
  {
    "text": "Impressions yes yeah it looks very much like Java lines looks very much like Java",
    "start": "982079",
    "end": "989120"
  },
  {
    "text": "like the static kind of mhm what uh what sort of differences do you do you pick",
    "start": "989120",
    "end": "994600"
  },
  {
    "text": "out um difference is like you know say CL is",
    "start": "994600",
    "end": "1001120"
  },
  {
    "text": "object yeah this this one's an object so so that's interesting and Def yeah that's more like a method",
    "start": "1001120",
    "end": "1008839"
  },
  {
    "text": "that's that's different yeah that's like a method what about uh the is different",
    "start": "1008839",
    "end": "1014759"
  },
  {
    "text": "what about yeah this this colon so this is this is this is the type of ARG it shows up after after the name of the",
    "start": "1014759",
    "end": "1021160"
  },
  {
    "text": "thing right and similarly here this this type unit which is the return type of main",
    "start": "1021160",
    "end": "1027038"
  },
  {
    "text": "that shows up after after the uh the parameters we've got no uh no curly",
    "start": "1027039",
    "end": "1034640"
  },
  {
    "text": "braces so here yeah so here oh the semicolons are",
    "start": "1034640",
    "end": "1039959"
  },
  {
    "text": "missing where' the semicolons go what else the uh oh is we don't say you know",
    "start": "1039959",
    "end": "1046480"
  },
  {
    "text": "public object hello we don't have to say that public is missing we don't say public deaf",
    "start": "1046480",
    "end": "1051960"
  },
  {
    "text": "main we don't need to say that and this you know deaf that's",
    "start": "1051960",
    "end": "1058240"
  },
  {
    "text": "that's a new keyword right deaf is what we use to define a method that's different we noticed that uh that yeah",
    "start": "1058240",
    "end": "1065400"
  },
  {
    "text": "this this colon syntax the return types and the you know the type types of anything are are are written after the",
    "start": "1065400",
    "end": "1071320"
  },
  {
    "text": "names instead of before we've got some mysterious unit type we've got uh yeah",
    "start": "1071320",
    "end": "1076919"
  },
  {
    "text": "oh yeah this this this one this actually looks a little bit like a uh regular function declaration right or a regular",
    "start": "1076919",
    "end": "1082960"
  },
  {
    "text": "variable declaration rather you know we say say you know uh I equals 10 you know",
    "start": "1082960",
    "end": "1088400"
  },
  {
    "text": "say this this function equals something it looks like an assignment",
    "start": "1088400",
    "end": "1094320"
  },
  {
    "text": "right and uh first thing that we picked out was that hello is declared as an object rather than a class and that",
    "start": "1094679",
    "end": "1102320"
  },
  {
    "text": "actually means something special you don't declare everything this way and Main this you know this is very",
    "start": "1102320",
    "end": "1108799"
  },
  {
    "text": "related here main isn't declared as static so hello is declared as an object",
    "start": "1108799",
    "end": "1116559"
  },
  {
    "text": "and Main is not static so so what could that mean what does that mean about what object means this this this key word",
    "start": "1116559",
    "end": "1123240"
  },
  {
    "text": "object hello H",
    "start": "1123240",
    "end": "1129240"
  },
  {
    "text": "yesing it's a Singleton it's a Singleton cool all right what's a",
    "start": "1129240",
    "end": "1135799"
  },
  {
    "text": "Singleton yeah per per class loader right yeah that uh",
    "start": "1137559",
    "end": "1144240"
  },
  {
    "text": "so so right so the answer is is that this object this object hello is a Singleton instance there there can only",
    "start": "1144240",
    "end": "1150440"
  },
  {
    "text": "be one instance of this hello thing and we happen to just refer to that instance is Hello uh we don't have to do some you",
    "start": "1150440",
    "end": "1158200"
  },
  {
    "text": "know some static like get instance Singleton pattern or you know an enum Singleton pattern something like that we",
    "start": "1158200",
    "end": "1164080"
  },
  {
    "text": "we actually just say object hello that's our Singleton there's only one instance of this for per per uh per class loader",
    "start": "1164080",
    "end": "1170200"
  },
  {
    "text": "thread I think no per per per class loader uh so therefore our our main",
    "start": "1170200",
    "end": "1176039"
  },
  {
    "text": "method doesn't have to be declared static because there's only going to be one of those as well",
    "start": "1176039",
    "end": "1182080"
  },
  {
    "text": "right okay all right so some bits of sort of sort of formality and mechanics",
    "start": "1182080",
    "end": "1188440"
  },
  {
    "text": "that I want to kind of get through real quick um because that's going to that's going to bring us to some some real",
    "start": "1188440",
    "end": "1194159"
  },
  {
    "text": "interesting stuff so so V so the way that we declare",
    "start": "1194159",
    "end": "1199720"
  },
  {
    "text": "variable is we use ver so say you know ver I equals",
    "start": "1199720",
    "end": "1204760"
  },
  {
    "text": "1 so actually you know quick question what do we notice about this immediately you know what's what's the type of I yes",
    "start": "1204760",
    "end": "1212600"
  },
  {
    "text": "there's no type that's right so what is the type is this a dynamic language or is this a static language is is this a",
    "start": "1212600",
    "end": "1219080"
  },
  {
    "text": "dynamic language like you know JavaScript or python or something like that where we just say Okay I I is",
    "start": "1219080",
    "end": "1224480"
  },
  {
    "text": "whatever type it happens to be at runtime or is this a language more like uh Java or C++ or whatever where where I",
    "start": "1224480",
    "end": "1231880"
  },
  {
    "text": "does have a static type does anybody know more Dynamic sta more static sh all",
    "start": "1231880",
    "end": "1241400"
  },
  {
    "text": "right let's take let's take a vote Dynamic one two three four five static",
    "start": "1241400",
    "end": "1248880"
  },
  {
    "text": "everybody else okay everybody else wins this is actually a static language it's",
    "start": "1248880",
    "end": "1254360"
  },
  {
    "text": "statically typed however it incorporates a notion of type inference",
    "start": "1254360",
    "end": "1259919"
  },
  {
    "text": "which in this case the way the way it works out is is we see this you know this thing is a is is a one one is an",
    "start": "1259919",
    "end": "1265919"
  },
  {
    "text": "integer literal therefore we can infer that I is of integer type um so",
    "start": "1265919",
    "end": "1271960"
  },
  {
    "text": "something that we couldn't do for example is we couldn't say you know I plus equals",
    "start": "1271960",
    "end": "1277600"
  },
  {
    "text": "hello that would that that would fail to type check even though we hadn't specified the type of I it's it's",
    "start": "1277600",
    "end": "1283760"
  },
  {
    "text": "statically inferable by the compiler right okay so that was just sort a",
    "start": "1283760",
    "end": "1289000"
  },
  {
    "text": "little yes go ahead what if you did IAL 1.0 ah good question if you do I plus",
    "start": "1289000",
    "end": "1294760"
  },
  {
    "text": "equal 1.0 um I will come back to that in a few",
    "start": "1294760",
    "end": "1299840"
  },
  {
    "text": "slides that's a very good question so why you declare a type for AR own name",
    "start": "1299840",
    "end": "1305400"
  },
  {
    "text": "um the reason so the question was why did I declare a type for the the args",
    "start": "1305400",
    "end": "1310440"
  },
  {
    "text": "parameter in Main and the answer to that is that type inference only works locally within a",
    "start": "1310440",
    "end": "1317200"
  },
  {
    "text": "function and type inference has to start somewhere um so you know we can't we",
    "start": "1317200",
    "end": "1322799"
  },
  {
    "text": "can't go and look at at who are who are the callers of men to try to figure out from that context what what the type of",
    "start": "1322799",
    "end": "1328520"
  },
  {
    "text": "args is so any method parameters that that that's that's one of the only times when you have to specify types there are",
    "start": "1328520",
    "end": "1336600"
  },
  {
    "text": "a few other a few other instances um and and one uh one place where I really like to do it even though I don't necessarily",
    "start": "1336600",
    "end": "1342320"
  },
  {
    "text": "have to is return types where return types if you specify",
    "start": "1342320",
    "end": "1347559"
  },
  {
    "text": "a type that's almost like documentation it's almost like saying yes you know this thing returns an end whereas you",
    "start": "1347559",
    "end": "1353679"
  },
  {
    "text": "know you you could technically leave it out but then it's up to sort of it's up to the pro other other consumers of your",
    "start": "1353679",
    "end": "1359400"
  },
  {
    "text": "of your code to kind of squint and look at it and figure out yes go ahead what if you",
    "start": "1359400",
    "end": "1366360"
  },
  {
    "text": "want uh there is a bite type but you can't uh you can't implicitly downcast",
    "start": "1367679",
    "end": "1373679"
  },
  {
    "text": "it you you can you can do like a there's like a two bite or an as bite",
    "start": "1373679",
    "end": "1378799"
  },
  {
    "text": "um anyway so so the the big Point here that I've been dancing around for the",
    "start": "1378799",
    "end": "1384120"
  },
  {
    "text": "past five minutes is that this is how we declare mutable variables mutable meaning I can change the value right I",
    "start": "1384120",
    "end": "1390799"
  },
  {
    "text": "can say ver I equals 1 I is an INT and then I can say I equals I + one and",
    "start": "1390799",
    "end": "1396159"
  },
  {
    "text": "that's just fine now Java of course has has the keyword final for the cases where where",
    "start": "1396159",
    "end": "1403919"
  },
  {
    "text": "do you want immutability and Scala gives you a",
    "start": "1403919",
    "end": "1409320"
  },
  {
    "text": "little bit of a short hand here it gives you the uh the keyword Val which is supposed to be sort of",
    "start": "1409320",
    "end": "1415400"
  },
  {
    "text": "indicative of of this is a value this is this is a symbol that's bound to a value and and that value isn't going to change",
    "start": "1415400",
    "end": "1422039"
  },
  {
    "text": "so if I were to say Val I equals 1 and then I was I was going to say IAL i+ 1",
    "start": "1422039",
    "end": "1428520"
  },
  {
    "text": "then similarly to you know if you're working in Java and you said Final in I equals 1 ials I + one that won't compile",
    "start": "1428520",
    "end": "1434559"
  },
  {
    "text": "right make sense",
    "start": "1434559",
    "end": "1438799"
  },
  {
    "text": "but this goes even a little bit further I'm just going to scroll down here there's this notion of lazy",
    "start": "1440600",
    "end": "1447679"
  },
  {
    "text": "vow excuse me this notion of lazy vow which is similar to vow it declares an",
    "start": "1447679",
    "end": "1453480"
  },
  {
    "text": "immutable variable but the the actual binding of that variable the computation that's on",
    "start": "1453480",
    "end": "1459720"
  },
  {
    "text": "that's on the right hand side of the equal sign is computed on demand it's",
    "start": "1459720",
    "end": "1464960"
  },
  {
    "text": "it's it's you know lazy initialization right everybody with the lazy initialization",
    "start": "1464960",
    "end": "1471279"
  },
  {
    "text": "yeah unenthusiastically familiar awesome uh and it's also memoized such that that",
    "start": "1471279",
    "end": "1478000"
  },
  {
    "text": "lazy initialization doesn't happen over and over again right so you know I've got my my uh hitchhiker guide of the",
    "start": "1478000",
    "end": "1484240"
  },
  {
    "text": "Galaxy example here I've got my lazy valve 42 is equal to deep thought. compute and the the the deepthought",
    "start": "1484240",
    "end": "1491480"
  },
  {
    "text": "compute computation is uh according to the book going to take seven and a half million years so you don't necessarily",
    "start": "1491480",
    "end": "1497600"
  },
  {
    "text": "want to actually do that initialization until you're sure you want that value so then you know of course we can",
    "start": "1497600",
    "end": "1503320"
  },
  {
    "text": "do print line of 42 which is our lazy value here and that will trigger the computation of of that",
    "start": "1503320",
    "end": "1510640"
  },
  {
    "text": "value of course then we can print line again and this and the subsequent computation won't take 7even and a half million years you've computed the value",
    "start": "1510640",
    "end": "1517360"
  },
  {
    "text": "and since the value is immutable you can hang on to it right so that's kind of nice and then similarly to our previous",
    "start": "1517360",
    "end": "1525640"
  },
  {
    "text": "example of Val here we can't reassign this immutable value so you know we",
    "start": "1525640",
    "end": "1532240"
  },
  {
    "text": "can't say 42 is equal to the number 43 that that won't compile okay then lastly uh this thing",
    "start": "1532240",
    "end": "1539760"
  },
  {
    "text": "that we've seen already is is the keyword deaf which declares a method um and typically you know you",
    "start": "1539760",
    "end": "1546600"
  },
  {
    "text": "have methods that uh that take some number of parameters you can also have methods that take no parameters at all and you don't even need to put the",
    "start": "1546600",
    "end": "1552960"
  },
  {
    "text": "parenthesis um you can optionally um and of course you know as you would expect",
    "start": "1552960",
    "end": "1558520"
  },
  {
    "text": "the the value of let's say you know increment I've got a function that I'm calling increment that t takes a takes",
    "start": "1558520",
    "end": "1564679"
  },
  {
    "text": "an i again this is a case where I have to declare my type for for I because",
    "start": "1564679",
    "end": "1570320"
  },
  {
    "text": "it's a it's a it's a parameter right but I don't have to say that increment returns an INT I don't NE",
    "start": "1570320",
    "end": "1577360"
  },
  {
    "text": "necessarily have to say that because it can figure out based on the fact that it's just doing i+ one that oh that",
    "start": "1577360",
    "end": "1582720"
  },
  {
    "text": "that's an INT all right and of course you know for for any given I you're going to compute",
    "start": "1582720",
    "end": "1589200"
  },
  {
    "text": "the the uh the value of i+ one each time you call the method okay",
    "start": "1589200",
    "end": "1596679"
  },
  {
    "text": "cool yes",
    "start": "1596679",
    "end": "1599880"
  },
  {
    "text": "question so so the question the question is is is isn't lazy a little bit Overkill I can't can't Java just sort of",
    "start": "1609760",
    "end": "1616360"
  },
  {
    "text": "figure that out because it's final um and the and the answer is is well kind of no there are different evaluation",
    "start": "1616360",
    "end": "1622360"
  },
  {
    "text": "strategies um like in Java if you were to say you know final int I equals whatever um then the Java compiler is",
    "start": "1622360",
    "end": "1629039"
  },
  {
    "text": "free to reorder you know when it's when it's emitting bite code the the compiler is is free to reorder things um to",
    "start": "1629039",
    "end": "1637480"
  },
  {
    "text": "optimize register usage or not registers it's it's a stack machine right um but but it's it's it's free to it's free to",
    "start": "1637480",
    "end": "1643919"
  },
  {
    "text": "shuffle things around a bit um just within the constraints of happens before um however there's still the requirement",
    "start": "1643919",
    "end": "1651200"
  },
  {
    "text": "that that certain things are computed um and when you've got things that are escaping off into the Heap like like you",
    "start": "1651200",
    "end": "1656919"
  },
  {
    "text": "know I've got say an object that has a lazy Val member I can't really I can't really do a whole program analysis and",
    "start": "1656919",
    "end": "1663200"
  },
  {
    "text": "see oh you know I I I actually am never going to use that value or anything like that um so lazy Val is is a bit is a bit",
    "start": "1663200",
    "end": "1669600"
  },
  {
    "text": "special it's it's I would say it's not overkilled to take care of that and actually we'll see we'll see an example",
    "start": "1669600",
    "end": "1675320"
  },
  {
    "text": "here lazy initialization this thing that uh thing that folks were were unenthusiastic",
    "start": "1675320",
    "end": "1680840"
  },
  {
    "text": "about the idea that you know say say you've got some class Fu and you've got some some member bar",
    "start": "1680840",
    "end": "1687480"
  },
  {
    "text": "and you want to initialize it to null you don't you don't want to actually uh instantiate a bar because maybe that'll take a long time or maybe that takes up",
    "start": "1687480",
    "end": "1693840"
  },
  {
    "text": "memory that you don't necessarily want to consume so you know in in a single-threaded context what you would",
    "start": "1693840",
    "end": "1699799"
  },
  {
    "text": "do is is for your getter method you would you would have a check like this you'd say if bar equals null then will",
    "start": "1699799",
    "end": "1708760"
  },
  {
    "text": "instantiate a new bar this is Java again right this is Java and then either way you know we",
    "start": "1708760",
    "end": "1715120"
  },
  {
    "text": "should we should have a legitimate bar at this point and be able to return it um but you know of course this if",
    "start": "1715120",
    "end": "1721399"
  },
  {
    "text": "you're if you're in a multi-threaded context this gets much more hairy so this is is a lesson in painful",
    "start": "1721399",
    "end": "1729039"
  },
  {
    "text": "Java the way you know sort of the easy way to do this to to make this thread safe in a multi-threaded context is to",
    "start": "1729640",
    "end": "1734880"
  },
  {
    "text": "say synchronized get bar you synchronize the method okay everything's safe there's there's no there's no you know",
    "start": "1734880",
    "end": "1741320"
  },
  {
    "text": "non-atomic accesses to Bar assuming that there's no other no",
    "start": "1741320",
    "end": "1746640"
  },
  {
    "text": "other methods that reference bar but let let's let's make that assumption let's let's make the assumption that",
    "start": "1746640",
    "end": "1751960"
  },
  {
    "text": "everybody's calling get bar to get the bar okay so this works this is safe this",
    "start": "1751960",
    "end": "1758919"
  },
  {
    "text": "is totally thread safe but it's slow there's a there's a performance penalty to declaring a method synchronized yes",
    "start": "1758919",
    "end": "1764919"
  },
  {
    "text": "do you have a question",
    "start": "1764919",
    "end": "1768278"
  },
  {
    "text": "uh in the jvm uh there may be I'm not aware of so so the question was are there some some",
    "start": "1771880",
    "end": "1778360"
  },
  {
    "text": "recent new optimizations in the jvm to take care of cases like this and my answer is maybe uh I don't really know",
    "start": "1778360",
    "end": "1785840"
  },
  {
    "text": "uh yes another",
    "start": "1785840",
    "end": "1788398"
  },
  {
    "text": "question yes yeah Atomic objects do do eliminate the pain here um the the classic way of dealing with this",
    "start": "1793840",
    "end": "1800320"
  },
  {
    "text": "problem is you would do this double check locking this is this is assuming that you don't have Atomic reference um",
    "start": "1800320",
    "end": "1806880"
  },
  {
    "text": "from it's in Java Ule concurrent right yeah so this is assuming you you don't have fancy toys like that",
    "start": "1806880",
    "end": "1814679"
  },
  {
    "text": "um uh you would have to do this double check locking EDM so you would have to declare bar is volatile meaning the",
    "start": "1814679",
    "end": "1820640"
  },
  {
    "text": "compiler isn't uh is isn't allowed to basically have one thread see see the",
    "start": "1820640",
    "end": "1826760"
  },
  {
    "text": "thing as null while another thread sees it as as at least halfway initialized um so you would check you",
    "start": "1826760",
    "end": "1833000"
  },
  {
    "text": "know if bar equals null then you synchronize and then you check again if bar equals null and then you initialize",
    "start": "1833000",
    "end": "1839679"
  },
  {
    "text": "it and this is this is just a mess lazy bar lazy Val in Scala actually compiles",
    "start": "1839679",
    "end": "1847480"
  },
  {
    "text": "to you know to to something almost identical to to this code here this this double check locking",
    "start": "1847480",
    "end": "1853840"
  },
  {
    "text": "pattern um so you know this this is this is already a case where you can program more safely and more correctly in Scala",
    "start": "1853840",
    "end": "1860919"
  },
  {
    "text": "without having to I mean you essentially without having to worry about screwing up yes",
    "start": "1860919",
    "end": "1867679"
  },
  {
    "text": "question uh in the in the in in in the scol case",
    "start": "1870399",
    "end": "1876760"
  },
  {
    "text": "yeah yeah yes so so the question again was was you know this the the underlying",
    "start": "1877480",
    "end": "1883200"
  },
  {
    "text": "bite code that is output by the by the scholet compiler does that actually do all the all the Locking for you um and",
    "start": "1883200",
    "end": "1890240"
  },
  {
    "text": "the answer does blocking OCC yes yes blocking does occur um it it comp like",
    "start": "1890240",
    "end": "1897480"
  },
  {
    "text": "if you were to take uh take this little code snippet run it through the scolar compiler and then decompile what you've",
    "start": "1897480",
    "end": "1903720"
  },
  {
    "text": "got using a decompiler like Jad or something like that the the the output",
    "start": "1903720",
    "end": "1908840"
  },
  {
    "text": "that you would get modulo you know some nice looking names is you would get output that looks almost identical to",
    "start": "1908840",
    "end": "1914279"
  },
  {
    "text": "that code does that make sense um so a quick word about mutability versus immutability and what",
    "start": "1914279",
    "end": "1921360"
  },
  {
    "text": "immutability might buy you um so we've got a few you know we can talk about this is impure versus",
    "start": "1921360",
    "end": "1927720"
  },
  {
    "text": "Pure or imperative versus functional so let's say let's say our",
    "start": "1927720",
    "end": "1933720"
  },
  {
    "text": "let's say our boss comes to us and says hey Dan I need you to write a list from",
    "start": "1933720",
    "end": "1938919"
  },
  {
    "text": "1 to 10 i' I've never actually been asked for",
    "start": "1938919",
    "end": "1944159"
  },
  {
    "text": "that but but but if if that were to happen then you know as a as a Java",
    "start": "1944159",
    "end": "1949320"
  },
  {
    "text": "developer I would say okay what are the tools at my disposal I'm going to create a uh you know create a a a counter a",
    "start": "1949320",
    "end": "1958639"
  },
  {
    "text": "counter I starts at one and what else a list that I'm going",
    "start": "1958639",
    "end": "1966519"
  },
  {
    "text": "to populate along the way and I'm going to have a little while loop I can do this with a four Loop too I could say you know for I equals 1 to 10 then I'm",
    "start": "1966519",
    "end": "1973399"
  },
  {
    "text": "going to say list and this is you know this is scallly here again actually this this is a this is a funny looking list",
    "start": "1973399",
    "end": "1979480"
  },
  {
    "text": "concatenation operator so I'm going to append I onto",
    "start": "1979480",
    "end": "1984960"
  },
  {
    "text": "the end of my list and increment I and then I'm going to return list at the end so that's that's my that's my sort of",
    "start": "1984960",
    "end": "1991120"
  },
  {
    "text": "imperative style code use the looping construct okay now I've got my pure Holy Grail",
    "start": "1991120",
    "end": "1998519"
  },
  {
    "text": "functional style in which I use a small helper function that's recursive I",
    "start": "1998519",
    "end": "2004080"
  },
  {
    "text": "Define a you know I say deaf list to 10 and it takes some some parameter some",
    "start": "2004080",
    "end": "2009960"
  },
  {
    "text": "integer parameter so it's going to be a list from that I to 10 right so we've",
    "start": "2009960",
    "end": "2016159"
  },
  {
    "text": "got two cases since this is a recursion we're going to say if I is less than or equal to 10 then I'm going to take my",
    "start": "2016159",
    "end": "2022399"
  },
  {
    "text": "current I and concatenate it or cons it if anybody's familiar with that term",
    "start": "2022399",
    "end": "2027840"
  },
  {
    "text": "from like from scheme or whatever I'm going to cons it with another recursive",
    "start": "2027840",
    "end": "2033320"
  },
  {
    "text": "invocation here my my list to 10 of I +1 so you can of course you know if you",
    "start": "2033320",
    "end": "2038480"
  },
  {
    "text": "were to call this with one then it would be one Cons with the list of 10 starting with",
    "start": "2038480",
    "end": "2044039"
  },
  {
    "text": "two which again is two comes with the list of 10 starting with three and so on until we get to 10 you know we get to",
    "start": "2044039",
    "end": "2051079"
  },
  {
    "text": "our else case and we say nil which is the empty list very tur I would say pretty",
    "start": "2051079",
    "end": "2057480"
  },
  {
    "text": "readable if you're comfortable with recursion and in fact this is this is even free of the of you know sort of the",
    "start": "2057480",
    "end": "2063398"
  },
  {
    "text": "burden of recursion of the you know possibility of stack Overflow error",
    "start": "2063399",
    "end": "2068440"
  },
  {
    "text": "because the scolar compiler is smart enough to do a tail recursion optimization on this this this is a tail",
    "start": "2068440",
    "end": "2074398"
  },
  {
    "text": "call this this list to 10 call I thought I couldn't do that till 28 thought it was only recursive without no it's not",
    "start": "2074399",
    "end": "2080520"
  },
  {
    "text": "correct tail recursion modulo cons is fine if you were to De compile this you would see it as a go-to prior to 28 yes",
    "start": "2080520",
    "end": "2087158"
  },
  {
    "text": "uh oh prior to 28 2 uh well nothing existed prior to 28 there actually there there was no",
    "start": "2087159",
    "end": "2094240"
  },
  {
    "text": "there was no world prior to Scola 2.8 actually I I should have mentioned this a little bit earlier between Scola 2.0",
    "start": "2094240",
    "end": "2101760"
  },
  {
    "text": "and Scola Scola 1.0 definitely didn't exist between Scola 2.0 and 2.7 whatever it was 2.77 there was quite",
    "start": "2101760",
    "end": "2110119"
  },
  {
    "text": "a bit of change and between the 2.7 series and",
    "start": "2110119",
    "end": "2115440"
  },
  {
    "text": "2.8.0 they made some again significant changes they changed the collections API",
    "start": "2115440",
    "end": "2120800"
  },
  {
    "text": "they changed some aspects of the ABI the the binary the binary format that broke",
    "start": "2120800",
    "end": "2126359"
  },
  {
    "text": "compatibility with existing code and man the community was really in an uproar about that because there were enough people actually using Scala for real at",
    "start": "2126359",
    "end": "2133200"
  },
  {
    "text": "the time including Twitter they had adopt adopted Scala during the 27 years",
    "start": "2133200",
    "end": "2138880"
  },
  {
    "text": "months whatever it was um and you know so so this this was a little bit little",
    "start": "2138880",
    "end": "2144680"
  },
  {
    "text": "bit of a pain in the sense that they had to rework things with the new collections API they had to recompile a",
    "start": "2144680",
    "end": "2150680"
  },
  {
    "text": "lot of existing code you know it's not necessarily too bad but if you have a large enough code base things like that",
    "start": "2150680",
    "end": "2157000"
  },
  {
    "text": "really become sort of sort of a um let's call it a public relations issue",
    "start": "2157000",
    "end": "2163599"
  },
  {
    "text": "um so um so so yeah the question was prior to 28 was the scolar compiler",
    "start": "2163599",
    "end": "2169280"
  },
  {
    "text": "smart enough to to determine that in fact you could optimize this case into into tail recursive call uh the answer",
    "start": "2169280",
    "end": "2175400"
  },
  {
    "text": "is I don't know um I know that I know that 28 and and after I pretty sure it",
    "start": "2175400",
    "end": "2181160"
  },
  {
    "text": "works fine as tail recursion modulo cons so of course you know if if our boss asks us to build a list from 1 to 10 we",
    "start": "2181160",
    "end": "2187040"
  },
  {
    "text": "could we could just say 1 to 10 to list um or even better uh we could do 1 to 10",
    "start": "2187040",
    "end": "2192800"
  },
  {
    "text": "to stream which can which uh which build us a lazy list a list a list whose elements are not actually computed uh",
    "start": "2192800",
    "end": "2199280"
  },
  {
    "text": "you know per element not actually computed until we need them so that's kind of neat that that's a little bit hasle style okay uh objectoriented",
    "start": "2199280",
    "end": "2206520"
  },
  {
    "text": "Basics so Scala is an objectoriented language um I don't want to say first",
    "start": "2206520",
    "end": "2212280"
  },
  {
    "text": "and foremost necessarily but but since it runs on the jvm of course it has to",
    "start": "2212280",
    "end": "2217680"
  },
  {
    "text": "conform to certain conventions that the jvm requires such as stuff has to be in",
    "start": "2217680",
    "end": "2222760"
  },
  {
    "text": "objects right all your methods have to be associated with an object you can't have free floating functions for example",
    "start": "2222760",
    "end": "2228680"
  },
  {
    "text": "so we'll talk about let's talk about objects",
    "start": "2228680",
    "end": "2234960"
  },
  {
    "text": "so walk into an interview this is you know an interview Circa",
    "start": "2234960",
    "end": "2241640"
  },
  {
    "text": "1998 and uh the interviewer says you know can can you go up to a whiteboard",
    "start": "2241640",
    "end": "2246800"
  },
  {
    "text": "and tell me what is object or oriented",
    "start": "2246800",
    "end": "2251160"
  },
  {
    "text": "programming and then I walk out but the usual the usual answer that",
    "start": "2252640",
    "end": "2259280"
  },
  {
    "text": "your interviewer expects here is is they want to hear encapsulation inheritance and polymorphism",
    "start": "2259280",
    "end": "2265040"
  },
  {
    "text": "right everybody want to everybody want to want to get into the details about what encapsulation is inheritance is I",
    "start": "2265040",
    "end": "2271599"
  },
  {
    "text": "think this is probably familiar to everybody everybody's working in Java right yeah great okay so this is not",
    "start": "2271599",
    "end": "2277640"
  },
  {
    "text": "news to anybody but Scala Scala puts I don't want to say a new twist um more",
    "start": "2277640",
    "end": "2283880"
  },
  {
    "text": "like a more rigid worldview it adheres to the principles",
    "start": "2283880",
    "end": "2289440"
  },
  {
    "text": "of of you know everything is an object and we really mean everything is an object even functions are objects uh",
    "start": "2289440",
    "end": "2296839"
  },
  {
    "text": "even primitive types like inss and bus and so on those those those are those",
    "start": "2296839",
    "end": "2301880"
  },
  {
    "text": "are objects that are treated uniformly in the class hierarchy um but the functions is an interesting one because",
    "start": "2301880",
    "end": "2307520"
  },
  {
    "text": "because that's sort of the Crux of how you how you merge the two approaches right if you can accept objects as",
    "start": "2307520",
    "end": "2314760"
  },
  {
    "text": "parameters to methods and a function is an object then you can accept functions as parameters to methods so Tada you've",
    "start": "2314760",
    "end": "2321359"
  },
  {
    "text": "got higher order functions okay cool um uniform access let's see I'm going to",
    "start": "2321359",
    "end": "2329520"
  },
  {
    "text": "skip over some of this traits is is is an interesting one this is this is sort of",
    "start": "2329520",
    "end": "2335480"
  },
  {
    "text": "almost almost a return to to to some of what C++ offered that that people",
    "start": "2335480",
    "end": "2341400"
  },
  {
    "text": "lamented a little bit when when Java came to the four um the idea of multiple",
    "start": "2341400",
    "end": "2348560"
  },
  {
    "text": "inheritance um Scala does not and I I wouldn't really want to emphasize that",
    "start": "2348560",
    "end": "2353680"
  },
  {
    "text": "Scala does not have multiple inheritance first of all again because Scola is a jvm language and multiple",
    "start": "2353680",
    "end": "2360240"
  },
  {
    "text": "inheritance is not possible on the jvm however it has an interesting idea of how to how to compose Snippets of",
    "start": "2360240",
    "end": "2367560"
  },
  {
    "text": "different classes and we call those snippits traits now you can think of a trait sort of like an interface and in fact when",
    "start": "2367560",
    "end": "2373960"
  },
  {
    "text": "you compile Scola traits down and look at them in uh in javap P or scalap or",
    "start": "2373960",
    "end": "2379119"
  },
  {
    "text": "whatever or javap p is probably more interesting you'll see indeed an",
    "start": "2379119",
    "end": "2384560"
  },
  {
    "text": "interface like if I have you know trait Fu and I use javap P I can see oh that's interface Fu but a trait can also",
    "start": "2384560",
    "end": "2391680"
  },
  {
    "text": "contain code it can contain uh you know contain member variables with with actual assignments it can contain",
    "start": "2391680",
    "end": "2398040"
  },
  {
    "text": "methods with with with method bodies um and you can mix in as many of",
    "start": "2398040",
    "end": "2403720"
  },
  {
    "text": "these traits as you like up to some you know compiler determined limit I think um uh or possibly even VM determined",
    "start": "2403720",
    "end": "2410800"
  },
  {
    "text": "limit uh you can mix in as many of these as you like in in you know practical terms to a given object",
    "start": "2410800",
    "end": "2419160"
  },
  {
    "text": "so uh so the the difference between this and",
    "start": "2419160",
    "end": "2424280"
  },
  {
    "text": "how it works in C++ let's say where C++ you have the the the the the dreaded Diamond problem and and and you have to",
    "start": "2424280",
    "end": "2430400"
  },
  {
    "text": "you have to understand all this all this crazy stuff about virtual inheritance it's not like that the the order in",
    "start": "2430400",
    "end": "2435599"
  },
  {
    "text": "which traits are mixed in you know if I say you know object uh Fu with bar with",
    "start": "2435599",
    "end": "2441960"
  },
  {
    "text": "baz with pizza the order actually matters there a",
    "start": "2441960",
    "end": "2449000"
  },
  {
    "text": "a class hierarchy is constructed by the compiler sort of in an ad ad hoc fashion where when I say you know uh Fu with bar",
    "start": "2449000",
    "end": "2457359"
  },
  {
    "text": "with baz let's forget the pizza actually says that Fu inherits from",
    "start": "2457359",
    "end": "2464440"
  },
  {
    "text": "baz that's our that's our most significant trait which then inherits from bar even if these don't actually",
    "start": "2464440",
    "end": "2471880"
  },
  {
    "text": "inherit from a common a common based class or whatever the The Inheritance relation is is sort of synthesized by",
    "start": "2471880",
    "end": "2478040"
  },
  {
    "text": "the compiler um so this this ends up being kind of nice you you can do uh you know sort of this um uh anybody familiar",
    "start": "2478040",
    "end": "2485319"
  },
  {
    "text": "with the uh the Josh it was Josh block right the Effective Java um Josh Block's",
    "start": "2485319",
    "end": "2491960"
  },
  {
    "text": "rule about favor composition over inheritance inheritance is not for code reuse yeah",
    "start": "2491960",
    "end": "2498160"
  },
  {
    "text": "no how many people agree or disagree with that agree yeah how many people disagree with",
    "start": "2498160",
    "end": "2504359"
  },
  {
    "text": "that and just use inheritance for code reuse anyway one oh you're",
    "start": "2504359",
    "end": "2510480"
  },
  {
    "text": "brave so this makes the argument mute moot uh in the sense that you know you can you can sort of do this safely and",
    "start": "2510880",
    "end": "2517359"
  },
  {
    "text": "and the semantics of of what it means to to compose these these uh Standalone bits of code is is actually well",
    "start": "2517359",
    "end": "2523760"
  },
  {
    "text": "understood um so that's kind of nice skip over a bit more here so we talked",
    "start": "2523760",
    "end": "2529359"
  },
  {
    "text": "about everything as an object yes",
    "start": "2529359",
    "end": "2533640"
  },
  {
    "text": "question Ah that's a good question so the question was is that kind of like Duck typing as in Python um no I I would",
    "start": "2535480",
    "end": "2543200"
  },
  {
    "text": "say there's no relation to that there's something I I don't mention in this talk here about structural types which is",
    "start": "2543200",
    "end": "2549359"
  },
  {
    "text": "sort of like Duck typing in Python where I can say oh well I I want this to have I I want to operate",
    "start": "2549359",
    "end": "2555440"
  },
  {
    "text": "on uh on types that have you know methods a b and c but I don't know what that interface is called I don't have an",
    "start": "2555440",
    "end": "2561400"
  },
  {
    "text": "interface that actually defines those necessarily so you can do that and and Scala compiles that down to to something",
    "start": "2561400",
    "end": "2567040"
  },
  {
    "text": "that uses reflection so it's slower but it it does work effectively as duct typing it's they call it structural",
    "start": "2567040",
    "end": "2573319"
  },
  {
    "text": "typing um so it's nice to be able to do that sometimes",
    "start": "2573319",
    "end": "2578359"
  },
  {
    "text": "okay everything's an object uh we talked about this a little bit um you know the idea that uh the idea that all of our",
    "start": "2578359",
    "end": "2584839"
  },
  {
    "text": "all of our value types all of our you know what we would think of as Primitives in Java you know bite short",
    "start": "2584839",
    "end": "2590319"
  },
  {
    "text": "int so on those are those are all objects as well so so we don't really have to worry at the at the code level",
    "start": "2590319",
    "end": "2598319"
  },
  {
    "text": "you know at the source code level about about oh you know is this is this boxed or unboxed can I put this into a",
    "start": "2598319",
    "end": "2603880"
  },
  {
    "text": "collection or not you you just there's there's only there's only one way to spell int there is there isn't two ways",
    "start": "2603880",
    "end": "2609680"
  },
  {
    "text": "to spell int there's no difference between int and integer and again the scolar compiler is smart enough to to",
    "start": "2609680",
    "end": "2616319"
  },
  {
    "text": "take that uniform representation and uh split things out at compile time when it",
    "start": "2616319",
    "end": "2621400"
  },
  {
    "text": "notices oh I can actually use the unbox representation here I don't need uh I don't need uh a capital I integer I",
    "start": "2621400",
    "end": "2629079"
  },
  {
    "text": "don't I don't need that that that's you know um and it's able to figure that out uh uh on uh you know compile time there",
    "start": "2629079",
    "end": "2636280"
  },
  {
    "text": "was a question here earlier I I think it was you I'm not sure about you know what",
    "start": "2636280",
    "end": "2641599"
  },
  {
    "text": "happens what happens to type inference if I say you know Val I equals 1 and",
    "start": "2641599",
    "end": "2647079"
  },
  {
    "text": "then I say or sorry ver ver I equals 1 and then I say you know I plus equals 1. o what happens",
    "start": "2647079",
    "end": "2654440"
  },
  {
    "text": "there um there's a not a notion of implicit conversions and implicit conversions are not something that's",
    "start": "2654440",
    "end": "2660400"
  },
  {
    "text": "that's special to uh to the Primitive types here you can Define implicit conversions between any different types of objects but these are some",
    "start": "2660400",
    "end": "2666720"
  },
  {
    "text": "interesting built-in ones the idea that a bite is implicitly convertible to a short and a short is implicitly",
    "start": "2666720",
    "end": "2671920"
  },
  {
    "text": "convertible to an INT and so on and and you kind of expect that because there you know a a an an INT is uh what four",
    "start": "2671920",
    "end": "2680920"
  },
  {
    "text": "four bytes on jvm and a long is is is 8 bytes um so you can do that without",
    "start": "2680920",
    "end": "2686960"
  },
  {
    "text": "without losing any Precision whereas the other direction wouldn't wouldn't make as much sense you could you could be",
    "start": "2686960",
    "end": "2692079"
  },
  {
    "text": "losing uh losing data uh mix and traits oh I talked about",
    "start": "2692079",
    "end": "2697400"
  },
  {
    "text": "mixing traits oh I didn't think I had included the slide all right so let's see this we talked about traits a little",
    "start": "2697400",
    "end": "2703800"
  },
  {
    "text": "bit oh yes go",
    "start": "2703800",
    "end": "2707160"
  },
  {
    "text": "ahead right so so the the previous question had been about type inference which is what happens when you leave off",
    "start": "2720960",
    "end": "2727040"
  },
  {
    "text": "the types but of course if you if you want to say this is an INT you can say",
    "start": "2727040",
    "end": "2732119"
  },
  {
    "text": "you know colon int so type annotations are totally fine anywhere that you want them it's just a nicity for for the",
    "start": "2732119",
    "end": "2738960"
  },
  {
    "text": "cases where the type is obvious to to be able to leave them off okay so mixins we're uh we're going",
    "start": "2738960",
    "end": "2746880"
  },
  {
    "text": "to Define an abstract Base Class of a table and a table you know let's say a table sort of like a map it has keys and",
    "start": "2746880",
    "end": "2753079"
  },
  {
    "text": "values um but our our table is a little bit special it's a little bit different from you know the regular map semantics",
    "start": "2753079",
    "end": "2759800"
  },
  {
    "text": "in that we're going to provide a default value for the case where you try to look up a key that's not present in the map",
    "start": "2759800",
    "end": "2766440"
  },
  {
    "text": "or in the table I should say so so we have a default value in the in the event",
    "start": "2766440",
    "end": "2771520"
  },
  {
    "text": "that you try to look up a key that's not present so okay so this is our our",
    "start": "2771520",
    "end": "2777880"
  },
  {
    "text": "abstract class we we we we do a deaf get we don't know what get is going to look",
    "start": "2777880",
    "end": "2783200"
  },
  {
    "text": "like we don't have an actual implementation for that and that returns an option of V which is an optional you",
    "start": "2783200",
    "end": "2788559"
  },
  {
    "text": "know maybe it has a return value maybe it doesn't we have a put which takes a",
    "start": "2788559",
    "end": "2794079"
  },
  {
    "text": "Kiana value and return something called Unit which is basically like void and then our only concrete method",
    "start": "2794079",
    "end": "2800040"
  },
  {
    "text": "here is this apply method which which carries out this this semantics that I talked about this idea that if we get a",
    "start": "2800040",
    "end": "2806079"
  },
  {
    "text": "key excuse me I'm not left-handed if we get a key and we match that against some",
    "start": "2806079",
    "end": "2813480"
  },
  {
    "text": "value then okay we'll return that otherwise if we match that against none if the option that we get out of get",
    "start": "2813480",
    "end": "2820040"
  },
  {
    "text": "actually wasn't present then that's where we return our default value okay so this is our this is our table",
    "start": "2820040",
    "end": "2825920"
  },
  {
    "text": "abstract class now we can also say okay map table",
    "start": "2825920",
    "end": "2831359"
  },
  {
    "text": "where we're going to implement table concretely using a map and you know let's say okay we've",
    "start": "2831359",
    "end": "2836960"
  },
  {
    "text": "got a private VAR map and yeah I can I can say private this is exactly the same as in Java but by default everything is",
    "start": "2836960",
    "end": "2843960"
  },
  {
    "text": "public okay so this one's private that's that's kind of interesting private VAR map starts out as an empty",
    "start": "2843960",
    "end": "2850480"
  },
  {
    "text": "map we'll Define get as map. getet of course and we'll Define put as map.",
    "start": "2850480",
    "end": "2857400"
  },
  {
    "text": "updated and this is this is all just sort of standard Library stuff I'm not going to not going to go into it too deeply so that's our that's our map",
    "start": "2857400",
    "end": "2863960"
  },
  {
    "text": "table and we could totally just use map table that would just that would be totally fine but let's say that I also",
    "start": "2863960",
    "end": "2869520"
  },
  {
    "text": "want a trait that implements concurrency because you know get I I didn't I didn't say get input were synchronized right",
    "start": "2869520",
    "end": "2877000"
  },
  {
    "text": "but let's say let's say I want them to be let's let's say I want concurrent get and concurrent put so the way that I",
    "start": "2877000",
    "end": "2885079"
  },
  {
    "text": "would normally have to do that if I were if I were in Java is I would I would have to say a subass map table or I",
    "start": "2885079",
    "end": "2891280"
  },
  {
    "text": "would have to uh write a wrapper which uh which references you know which which encapsulates a map table what I can do",
    "start": "2891280",
    "end": "2898599"
  },
  {
    "text": "in Scola is Define a concurrent table trait and okay so we say concurrent",
    "start": "2898599",
    "end": "2903680"
  },
  {
    "text": "table extends table it obeys the same the same contract the same inter face and let's say we're going to override",
    "start": "2903680",
    "end": "2909440"
  },
  {
    "text": "get with a synchronized block and we say synchronized Super doget",
    "start": "2909440",
    "end": "2914960"
  },
  {
    "text": "Key Well super right now super looks like our super class's",
    "start": "2914960",
    "end": "2921240"
  },
  {
    "text": "table okay so we're calling table doget but table. getet doesn't actually do anything that's that's that's still",
    "start": "2921359",
    "end": "2927079"
  },
  {
    "text": "abstract likewise our put calls super. put in a synchronized block so that's cool but but it's a little bit weird",
    "start": "2927079",
    "end": "2933599"
  },
  {
    "text": "we're calling we're calling super where super is",
    "start": "2933599",
    "end": "2938640"
  },
  {
    "text": "abstract and like I like I mentioned before what what happens basically at",
    "start": "2938640",
    "end": "2943720"
  },
  {
    "text": "compile time is Scola is able to weave these things together so if I if I were to say either of these and these are",
    "start": "2943720",
    "end": "2949000"
  },
  {
    "text": "equivalent if I were to say new map table with concurrent table then what",
    "start": "2949000",
    "end": "2954079"
  },
  {
    "text": "would actually be happening here is I would is I would be getting a map table whose parent class is a concurrent table",
    "start": "2954079",
    "end": "2961359"
  },
  {
    "text": "rather than a regular table and that concurrent table's parent class or uh no I'm sorry other way",
    "start": "2961359",
    "end": "2968640"
  },
  {
    "text": "around concurrent table whose parent table is is bound to map table so that that gives us that gives",
    "start": "2968640",
    "end": "2975599"
  },
  {
    "text": "us this inheritance relationship for free without having to explicitly State concurrent table extends from map table because let's say we want you know",
    "start": "2975599",
    "end": "2982480"
  },
  {
    "text": "concurrent table to also be used in the context of a list table let's say something like that so you can you can literally mix",
    "start": "2982480",
    "end": "2989400"
  },
  {
    "text": "that in say new map table with concurrent table or I could you know if I if I wanted to reuse this this",
    "start": "2989400",
    "end": "2996200"
  },
  {
    "text": "Behavior I could say my awesome table is going to extend map table with concurrent table so again anytime I ask",
    "start": "2996200",
    "end": "3003480"
  },
  {
    "text": "for an awesome table what I'm getting is something that is a concurrent table then a map table then a table at the",
    "start": "3003480",
    "end": "3010440"
  },
  {
    "text": "root so this is this linear linearization algorithm I was talking about uh that that happens in the scol",
    "start": "3010440",
    "end": "3016040"
  },
  {
    "text": "compiler and it's really nice again to be able to to compose these sort of Snippets of different behavior that you want to be able to mix and match without",
    "start": "3016040",
    "end": "3023760"
  },
  {
    "text": "without stressing too much about are these going to conflict with each other because the conflicts are resolved by the order in which you",
    "start": "3023760",
    "end": "3029720"
  },
  {
    "text": "specify the the the the width you know extends map table withd concurrent table and so on so there there's there's your",
    "start": "3029720",
    "end": "3036280"
  },
  {
    "text": "your precedence right there so that's kind of",
    "start": "3036280",
    "end": "3039640"
  },
  {
    "text": "cool let's see control structures I'm going to Breeze through this pretty",
    "start": "3042079",
    "end": "3047280"
  },
  {
    "text": "quickly so we've got you know control structures are going to look the say more or less in most programming",
    "start": "3047280",
    "end": "3052359"
  },
  {
    "text": "languages except for the ones that are explicitly designed to cause pain so you've got you know things like if",
    "start": "3052359",
    "end": "3058559"
  },
  {
    "text": "else you've got things like while and do while um but uh but Scala also takes",
    "start": "3058559",
    "end": "3064599"
  },
  {
    "text": "some existing ones like for loops and sort of beef them up a bit say putting them on steroids I I use",
    "start": "3064599",
    "end": "3072240"
  },
  {
    "text": "the term fondly and match case is is sort of like a switch statement but it's a little bit",
    "start": "3072240",
    "end": "3078040"
  },
  {
    "text": "beefed up as well so so let's let's take a couple looks looks at these um and the thing that I want to sort of observe",
    "start": "3078040",
    "end": "3083559"
  },
  {
    "text": "overall about all of these these different conol control structures and this is you know this is starting to get",
    "start": "3083559",
    "end": "3088760"
  },
  {
    "text": "into what we think of as functional like we've talked about objects we talked about traits um this is starting to get",
    "start": "3088760",
    "end": "3094880"
  },
  {
    "text": "into something that feels a little bit more like functional programming so all of these control",
    "start": "3094880",
    "end": "3101079"
  },
  {
    "text": "control structures like an if else is actually an expression a four yield is an expression",
    "start": "3101079",
    "end": "3108640"
  },
  {
    "text": "even even a block you know if if you put you know curly and then a whole bunch of statements and then close Cur close",
    "start": "3108640",
    "end": "3114920"
  },
  {
    "text": "curly that's an expression that actually has a value and a type it's not just",
    "start": "3114920",
    "end": "3121000"
  },
  {
    "text": "it's not just a block statement it's it's a block expression so let's look at if else as a",
    "start": "3121000",
    "end": "3128400"
  },
  {
    "text": "as a starting example here if else of course has the form if some you know some P some predicate that has Type",
    "start": "3128400",
    "end": "3135920"
  },
  {
    "text": "Boolean then some then you know then the if else evaluates to some expression one",
    "start": "3135920",
    "end": "3142520"
  },
  {
    "text": "with type one else it evaluates to some expression two with",
    "start": "3142520",
    "end": "3149240"
  },
  {
    "text": "some other type now of course you have to unify those two types somehow if if the if else is going to have a you know",
    "start": "3149240",
    "end": "3156000"
  },
  {
    "text": "a type of its own so what we say is is that the type of the f is the weak least upper bound of those two types so for",
    "start": "3156000",
    "end": "3161960"
  },
  {
    "text": "example um uh well let's let's actually look look at some examples here",
    "start": "3161960",
    "end": "3168319"
  },
  {
    "text": "um let's say you know if if P you know we don't we don't care about if if p is true or false if P then new food",
    "start": "3168319",
    "end": "3178200"
  },
  {
    "text": "else null okay you can see actually this this looks a little bit like the like the um",
    "start": "3178200",
    "end": "3183839"
  },
  {
    "text": "the you know question mark colon syntax the the Turner operator in Java or the conditional operator this this is",
    "start": "3183839",
    "end": "3189920"
  },
  {
    "text": "essentially that essentially the same thing but looks a little bit more sane um so what's the type of this thing",
    "start": "3189920",
    "end": "3197200"
  },
  {
    "text": "what's the type of this expression well say new Foo okay so that's probably",
    "start": "3197200",
    "end": "3202880"
  },
  {
    "text": "going to have type Fu and null well that has Type null and uh a few slides back I I",
    "start": "3202880",
    "end": "3210040"
  },
  {
    "text": "glanced over this really quickly but we saw the the uniform type hierarchy and it turns out that null is actually a",
    "start": "3210040",
    "end": "3215440"
  },
  {
    "text": "type which is a subtype of all other object types so the least upper bound of",
    "start": "3215440",
    "end": "3220640"
  },
  {
    "text": "Fu and null is going to be Fu because null is a subtype of Fu okay it's cool",
    "start": "3220640",
    "end": "3227119"
  },
  {
    "text": "and this is more or less the way that the Java compiler does it as well of course for the um for the Turner",
    "start": "3227119",
    "end": "3233079"
  },
  {
    "text": "expression uh how about if if P then new Fu else new bar well let's let's assume",
    "start": "3233079",
    "end": "3238400"
  },
  {
    "text": "that Fu and bar aren't related to each other they don't have some some common common super class that we defined so in",
    "start": "3238400",
    "end": "3244520"
  },
  {
    "text": "that case it's going to have type Scala object or any ref something like that",
    "start": "3244520",
    "end": "3250880"
  },
  {
    "text": "Scala object to be more precise because that's going to be the least upper bound of those two",
    "start": "3250880",
    "end": "3256960"
  },
  {
    "text": "types um again getting back to the question before what happens if we've got an if where where the the true",
    "start": "3256960",
    "end": "3263200"
  },
  {
    "text": "Clause has has an integer one and the the the false clause has double 2.0 what's the the type of that going to",
    "start": "3263200",
    "end": "3270680"
  },
  {
    "text": "be did I not give it away on my slide show of hands is this a",
    "start": "3270680",
    "end": "3276200"
  },
  {
    "text": "double yes not everybody's fallen asleep yet",
    "start": "3276200",
    "end": "3282720"
  },
  {
    "text": "cool and then the interesting sort of last case again talking about the uniform class hierarchy is that is that",
    "start": "3283880",
    "end": "3290119"
  },
  {
    "text": "we can say you know if p is true then one which is a value type the integer",
    "start": "3290119",
    "end": "3295200"
  },
  {
    "text": "one else new Fu which is an object type and that's going to have type any which",
    "start": "3295200",
    "end": "3301640"
  },
  {
    "text": "is the common super type of everything in in Scala both the value types and the reference types yes go ahead two",
    "start": "3301640",
    "end": "3308240"
  },
  {
    "text": "different objects have a common mixing ah yes if they if uh if two different objects have a common mix in",
    "start": "3308240",
    "end": "3314839"
  },
  {
    "text": "um and that happens to be the the sort of you know the least common denominator of two then then yes that mix in trait",
    "start": "3314839",
    "end": "3321559"
  },
  {
    "text": "essentially that interface right will be will be used as the static type of that expression",
    "start": "3321559",
    "end": "3326880"
  },
  {
    "text": "it's a good question so if else is just one example",
    "start": "3326880",
    "end": "3332160"
  },
  {
    "text": "of the Su course like I mentioned basically all of these control structures all of these you know even a",
    "start": "3332160",
    "end": "3337280"
  },
  {
    "text": "block of multiple statements is going to have a typee statically at compile time",
    "start": "3337280",
    "end": "3344039"
  },
  {
    "text": "that can be you know that can be used for example for type inference for for subsequent things in the function and",
    "start": "3344039",
    "end": "3350280"
  },
  {
    "text": "has a value so that ends up making your code look a little bit shorter um match cases another great",
    "start": "3350280",
    "end": "3356760"
  },
  {
    "text": "example and this this is this is something that that I I think more experienced scholar programmers find themselves using all the time um it's",
    "start": "3356760",
    "end": "3363319"
  },
  {
    "text": "sort of like a switch statement in Java but you don't have to worry about uh fall through between cases you don't",
    "start": "3363319",
    "end": "3369000"
  },
  {
    "text": "have to worry about breaking and the the pattern matching ability is is not",
    "start": "3369000",
    "end": "3374200"
  },
  {
    "text": "limited to just value types or even I I know that in Java 7 for example you can you can actually finally do switch on",
    "start": "3374200",
    "end": "3380760"
  },
  {
    "text": "strings which is cool uh but you can do that in Scola too and more um so we'll look at a few examples here so the way",
    "start": "3380760",
    "end": "3387599"
  },
  {
    "text": "that this looks is I actually think fairly straightforward we say you know some e some expression match and then we",
    "start": "3387599",
    "end": "3393839"
  },
  {
    "text": "have a bunch of cases so case some you know pattern one yields expression one",
    "start": "3393839",
    "end": "3400039"
  },
  {
    "text": "with type one some pattern to and actually we can we can specify multiple patterns and this would be the",
    "start": "3400039",
    "end": "3405880"
  },
  {
    "text": "equivalent of falling through in case statements we can have multiple alternatives for a pattern that result",
    "start": "3405880",
    "end": "3411559"
  },
  {
    "text": "in some you know expression two with some type two and you know we have as many of these as we want",
    "start": "3411559",
    "end": "3418039"
  },
  {
    "text": "of course the least upper bound of all of you know T1 T2 through T TN that's",
    "start": "3418039",
    "end": "3424240"
  },
  {
    "text": "going to be the static type of our of our pattern match um so you know actually just in",
    "start": "3424240",
    "end": "3430680"
  },
  {
    "text": "Java again let's say you wanted to assign something to a value in the scope of a switch statement you would have to",
    "start": "3430680",
    "end": "3437119"
  },
  {
    "text": "you know you'd have to declare the variable before the switch statement then do the assignment in the switch statement a whole bunch of times and try",
    "start": "3437119",
    "end": "3443400"
  },
  {
    "text": "not to miss any cases and the compiler ideally warns you if you've missed a case well here you don't have to do that",
    "start": "3443400",
    "end": "3450319"
  },
  {
    "text": "you can literally just say you know Val Val Fu equals e match whatever and you",
    "start": "3450319",
    "end": "3456640"
  },
  {
    "text": "know again Fu uh Fu acquires the value and the type of that thing uh question in the",
    "start": "3456640",
    "end": "3463799"
  },
  {
    "text": "back say again default ah is there an equivalent of default yes there is um there is a",
    "start": "3464000",
    "end": "3472680"
  },
  {
    "text": "there's a a an intrig a little bit of syntax in Scala which is the",
    "start": "3472680",
    "end": "3480039"
  },
  {
    "text": "underscore uh you Scala guys out there uh how many how many how many uses",
    "start": "3480039",
    "end": "3486000"
  },
  {
    "text": "of underscore can you can you think of off the top of your head like on the order of one four",
    "start": "3486000",
    "end": "3493640"
  },
  {
    "text": "seven 19 I actually don't know uh there was on",
    "start": "3494559",
    "end": "3499839"
  },
  {
    "text": "on sc.org they had like you know a little survey off in the sidebar like like hey how many how many different how",
    "start": "3499839",
    "end": "3505119"
  },
  {
    "text": "many distinct uses of underscore are there um and I I I never actually I",
    "start": "3505119",
    "end": "3510240"
  },
  {
    "text": "never actually paid paid attention to the survey result on that but UND so so the underscore character is essentially",
    "start": "3510240",
    "end": "3515640"
  },
  {
    "text": "used as a wild card um it can mean I don't care about this value it can mean everything it can mean anything um it",
    "start": "3515640",
    "end": "3522760"
  },
  {
    "text": "can mean I'm binding a binding a variable to this thing um it means a lot",
    "start": "3522760",
    "end": "3528119"
  },
  {
    "text": "of different things but essentially if I were to say case underscore then that's that's like saying case true case you know case",
    "start": "3528119",
    "end": "3534880"
  },
  {
    "text": "default case I'm going to match everything that you send my way um so you would see that a lot as as",
    "start": "3534880",
    "end": "3541319"
  },
  {
    "text": "the last the last case statement in a match so some some examples here this is",
    "start": "3541319",
    "end": "3548640"
  },
  {
    "text": "a great example I think actually because you get to see you get to see most of the different uh different constructs",
    "start": "3548640",
    "end": "3553880"
  },
  {
    "text": "here can can see you know let's let's try to let's try to compute the number of days in a given month from from 1 to",
    "start": "3553880",
    "end": "3561520"
  },
  {
    "text": "12 and we also want to know if it's a if it's a leap year then we want to make a special case for February right so I can",
    "start": "3561520",
    "end": "3568039"
  },
  {
    "text": "say to start out with that special Case Case two for February if leap so this is",
    "start": "3568039",
    "end": "3573280"
  },
  {
    "text": "a guarded a guarded case then I'm going to get 29 days in February",
    "start": "3573280",
    "end": "3579319"
  },
  {
    "text": "right then my my sort of fall through which you can kind of think of it as a",
    "start": "3579319",
    "end": "3585559"
  },
  {
    "text": "fall through is case two if not leap right then 28 case four or 6 or 9 or 11",
    "start": "3585559",
    "end": "3594079"
  },
  {
    "text": "we get 30 days in those months so April June uh September and November I guess",
    "start": "3594079",
    "end": "3601400"
  },
  {
    "text": "no yeah I don't know uh and case",
    "start": "3601400",
    "end": "3606440"
  },
  {
    "text": "underscore right case underscore all the rest have 31 days makes sense so",
    "start": "3606440",
    "end": "3613880"
  },
  {
    "text": "far and so this is a this is a method right I've I've defined a method called days that returns an INT and I didn't",
    "start": "3613880",
    "end": "3620960"
  },
  {
    "text": "have to say return month match blah blah blah blah blah I just said okay well that's the value of the thing and it has",
    "start": "3620960",
    "end": "3626880"
  },
  {
    "text": "value int or type int uh a couple more examples here let's",
    "start": "3626880",
    "end": "3632839"
  },
  {
    "text": "say I'm I made this example up for for a class that I taught a little while ago uh let's say we want to prepare some",
    "start": "3632839",
    "end": "3639640"
  },
  {
    "text": "foods we have we have a a a Bas trait or an abstract Base Class called inedible food and we want to get an edible food",
    "start": "3639640",
    "end": "3646160"
  },
  {
    "text": "out the other end so we can match on the type of these Foods so let's say you know if food",
    "start": "3646160",
    "end": "3654000"
  },
  {
    "text": "match B and B is a banana then we can say you know just b. peel and this would",
    "start": "3654000",
    "end": "3660480"
  },
  {
    "text": "be equivalent to saying if uh if food instance of banana then b equals uh you",
    "start": "3660480",
    "end": "3669880"
  },
  {
    "text": "know cast to banana and then B up peel right that that's how we would do that in",
    "start": "3669880",
    "end": "3675119"
  },
  {
    "text": "Java in Scala this gives us the option of directly pattern matching on",
    "start": "3675119",
    "end": "3682119"
  },
  {
    "text": "types so you know if if be if if we have if food happens to to be a banana called B then we'll just call b. peel if it",
    "start": "3682119",
    "end": "3688480"
  },
  {
    "text": "happens to be a nut we'll call it n we'll bind it to this new variable n and call n. crack and otherwise you know",
    "start": "3688480",
    "end": "3694960"
  },
  {
    "text": "let's let's say I'll call null or I'll return null uh another example we have this",
    "start": "3694960",
    "end": "3701559"
  },
  {
    "text": "notion of case classes things that can be matched by their structure and we'll see an example of this a little bit later on but let's say",
    "start": "3701559",
    "end": "3708000"
  },
  {
    "text": "I've defined ad as a case class then I can I can actually say oh if I'm",
    "start": "3708000",
    "end": "3714279"
  },
  {
    "text": "calculating a bunch of operations or a a uh a choice of operations so let's say",
    "start": "3714279",
    "end": "3722319"
  },
  {
    "text": "we've defined add subtraction and uh exponentiation as as our as our different operation",
    "start": "3722319",
    "end": "3728279"
  },
  {
    "text": "types then we can pattern match on ADD and say oh well if we're adding A and B",
    "start": "3728279",
    "end": "3734480"
  },
  {
    "text": "then the result of doing that is going to be a plus b this is sort of a contrived example because what you would",
    "start": "3734480",
    "end": "3740559"
  },
  {
    "text": "probably have in your case class is you would probably have like a uh you know a do valuator or something something like",
    "start": "3740559",
    "end": "3746279"
  },
  {
    "text": "that so you would just say you know add. evaluate but you know just to show you",
    "start": "3746279",
    "end": "3752240"
  },
  {
    "text": "that you can actually pull this this this structure out you can say oh well ad has a leth hand side and a right hand",
    "start": "3752240",
    "end": "3759440"
  },
  {
    "text": "side my A and B and and I'll just pattern match those just say oh I'll I'll bind those to andb here and do the",
    "start": "3759440",
    "end": "3765279"
  },
  {
    "text": "addition same with subtraction same with exponentiation so it takes a bit more work in Java I think right yes question",
    "start": "3765279",
    "end": "3772319"
  },
  {
    "text": "so the question was was how do you call this function and you know of course you just you do it by calling calculate on",
    "start": "3772319",
    "end": "3778200"
  },
  {
    "text": "some operation ah so again the question was",
    "start": "3778200",
    "end": "3784160"
  },
  {
    "text": "where do A and B Come From A and B are new this this is this is as if I had",
    "start": "3784160",
    "end": "3789559"
  },
  {
    "text": "said Val a and Val B here I'm I'm creating I'm creating new variable names",
    "start": "3789559",
    "end": "3794880"
  },
  {
    "text": "fresh and binding what's inside this ad to those variable names does that make",
    "start": "3794880",
    "end": "3802079"
  },
  {
    "text": "sense so so if the operation is an ad that has some Fields A and B that I'm",
    "start": "3802079",
    "end": "3807400"
  },
  {
    "text": "going or you know some fields and I don't even care what they're called in fact if I didn't care about their values",
    "start": "3807400",
    "end": "3812960"
  },
  {
    "text": "I could say add underscore comma underscore and those and that wouldn't bind those",
    "start": "3812960",
    "end": "3818200"
  },
  {
    "text": "variables um but you know of course I I want to do something with with the structure that's inside that ad so so I",
    "start": "3818200",
    "end": "3823559"
  },
  {
    "text": "can bind them there yes another question um ah good question so so in",
    "start": "3823559",
    "end": "3829119"
  },
  {
    "text": "the in the event so so he observed that I didn't have a default case like I had here and in in the event that",
    "start": "3829119",
    "end": "3836599"
  },
  {
    "text": "the operation wasn't any of these things then the the the uh the behavior there",
    "start": "3836599",
    "end": "3841960"
  },
  {
    "text": "could be one of two different things one thing that could happen is if ad sub and exp are the only three case",
    "start": "3841960",
    "end": "3850960"
  },
  {
    "text": "classes that Implement operation then the compiler will be totally satisfied it won't inject any",
    "start": "3850960",
    "end": "3857799"
  },
  {
    "text": "extra you know Tri catch kind of code or or anything to handle the possibility of of none of these things",
    "start": "3857799",
    "end": "3863720"
  },
  {
    "text": "matched um because it can see oh this this is a this is a exhaustive pattern match we've covered all of our bases but",
    "start": "3863720",
    "end": "3871240"
  },
  {
    "text": "in the case where we've got some other uh you know let's say a division operator or multiplication or something",
    "start": "3871240",
    "end": "3878160"
  },
  {
    "text": "like that that we didn't match in here then the compiler will actually complain at us and say hey you didn't you didn't",
    "start": "3878160",
    "end": "3884039"
  },
  {
    "text": "cover all your cases",
    "start": "3884039",
    "end": "3888720"
  },
  {
    "text": "um yes so so the question is is how could the compiler know the exhaustive list and the answer is if if we're",
    "start": "3891119",
    "end": "3898760"
  },
  {
    "text": "[Music] using I'm trying to think of like what what's the quickest way I can explain this uh so the short answer is there's a",
    "start": "3898760",
    "end": "3905240"
  },
  {
    "text": "notion of sealed classes or sealed traits if I declare a an abstract based",
    "start": "3905240",
    "end": "3910880"
  },
  {
    "text": "class or if I declare a trait to be sealed then what that says is all of my sub classes have to be declared in this",
    "start": "3910880",
    "end": "3918160"
  },
  {
    "text": "one file oh that's another thing that you can do in scholar that you can't do in Java you can Define multiple classes per file without having to uh you know",
    "start": "3918160",
    "end": "3926039"
  },
  {
    "text": "in uh without them having to be like inner classes um so I could I could have",
    "start": "3926039",
    "end": "3932039"
  },
  {
    "text": "you know let's say an operation uh file you know operation. Scala right that has",
    "start": "3932039",
    "end": "3938119"
  },
  {
    "text": "you know sealed trait operation and then a few case classes add sub and exp and",
    "start": "3938119",
    "end": "3943440"
  },
  {
    "text": "the compiler will know based on the fact that they're in the same compilation unit the same file that those are the",
    "start": "3943440",
    "end": "3948640"
  },
  {
    "text": "only possible values the only possible sub classes for that operation trait that that trait is closed for business",
    "start": "3948640",
    "end": "3955400"
  },
  {
    "text": "after to that point um but let's say I hadn't declared it as sealed then we're",
    "start": "3955400",
    "end": "3960640"
  },
  {
    "text": "out of luck then the compiler injects some",
    "start": "3960640",
    "end": "3966119"
  },
  {
    "text": "additional code in which you know basically if you if you get to the bottom of your match and you haven't matched any any cases then you'll",
    "start": "3966119",
    "end": "3972720"
  },
  {
    "text": "actually throw an exception you'll throw a uh I think it's it's a match error a Scala runtime. match",
    "start": "3972720",
    "end": "3980559"
  },
  {
    "text": "error yes yeah that becomes a runtime error there so so that's so that's the value of using sealed traits with case",
    "start": "3980559",
    "end": "3988240"
  },
  {
    "text": "classes or the value of you know say using enums um Scala has has something",
    "start": "3988240",
    "end": "3993480"
  },
  {
    "text": "that I actually find a little bit janky um that is the enumeration trait um I",
    "start": "3993480",
    "end": "3999160"
  },
  {
    "text": "like case classes better I think they're a bit more elegant usually um but you know anything where where you can",
    "start": "3999160",
    "end": "4005400"
  },
  {
    "text": "exhaustively list all of the possibilities the compiler is going to do more work for you and give you faster",
    "start": "4005400",
    "end": "4011119"
  },
  {
    "text": "code and safer code so it's kind of nice you don't you you know you don't get that from java so we talked you know we",
    "start": "4011119",
    "end": "4018520"
  },
  {
    "text": "just talked about this if you're matching on a sealed class instances the compiler will warn you if you missed a case uh for Loops for Loops are a bit",
    "start": "4018520",
    "end": "4025240"
  },
  {
    "text": "more powerful in Scala so similar uh on first glance to",
    "start": "4025240",
    "end": "4032119"
  },
  {
    "text": "to what was introduced in Java 5 the for each Loop so I can say you know let's say I've got a list of a list of strings",
    "start": "4032119",
    "end": "4039240"
  },
  {
    "text": "you know a list of hello and Scala I can say for S comes from that list print line S",
    "start": "4039240",
    "end": "4046799"
  },
  {
    "text": "okay so that looks that looks pretty normal right but I can also have multiple generators multiple things that",
    "start": "4046799",
    "end": "4053119"
  },
  {
    "text": "are bound to uh temporary variables so I can say you know for for a comes from a",
    "start": "4053119",
    "end": "4058920"
  },
  {
    "text": "list of hello Niha and Namaste and then B also within within",
    "start": "4058920",
    "end": "4064920"
  },
  {
    "text": "the same four I can say B comes from a list of world and",
    "start": "4064920",
    "end": "4070079"
  },
  {
    "text": "Scala print line of a plus b then that actually gives me sort of the the all",
    "start": "4070079",
    "end": "4075200"
  },
  {
    "text": "all the combinations so I would say hello world hello Scala n World n Scala and so on",
    "start": "4075200",
    "end": "4082599"
  },
  {
    "text": "right and I don't have to express these as nested for Loops just the fact that I have multiple generators in this one for",
    "start": "4082599",
    "end": "4088000"
  },
  {
    "text": "Loop is good enough I can even have guards on this",
    "start": "4088000",
    "end": "4094079"
  },
  {
    "text": "where where you know I I I don't even want to execute the body of the for Loop let's you know let's say I don't want to",
    "start": "4094079",
    "end": "4099960"
  },
  {
    "text": "execute my my print line here if the word length is equal to four you know I don't want any four-letter",
    "start": "4099960",
    "end": "4107600"
  },
  {
    "text": "words so you know I'm doing a read line I'm splitting it on uh splitting it on",
    "start": "4107600",
    "end": "4113318"
  },
  {
    "text": "uh space characters and if we're not a four-letter word then let's convert it to uppercase and print it out all right",
    "start": "4113319",
    "end": "4119120"
  },
  {
    "text": "so so we've got a we've got a a value assignment in there as well got our guard our value",
    "start": "4119120",
    "end": "4125198"
  },
  {
    "text": "assignment and so of course the general form here is you have four and a whole bunch of enumerators an enumerator",
    "start": "4125279",
    "end": "4130758"
  },
  {
    "text": "enumerator is sort of like a a general way of of saying you know any of these um",
    "start": "4130759",
    "end": "4136080"
  },
  {
    "text": "uh generators or guards or value assignments or what have you um but then you know this this sort",
    "start": "4136080",
    "end": "4141960"
  },
  {
    "text": "of gets beefed up even further when you introduce yield in which you know so so say in a",
    "start": "4141960",
    "end": "4148080"
  },
  {
    "text": "normal for Loop you have the body of the for Loop and that's something that's executed and you don't really care what",
    "start": "4148080",
    "end": "4153159"
  },
  {
    "text": "the what the value of that thing was you don't you know you basically discard that so our print line right you know",
    "start": "4153159",
    "end": "4158880"
  },
  {
    "text": "our print line we just we just execute that for its side effects and move on with life but in a four yield we",
    "start": "4158880",
    "end": "4164838"
  },
  {
    "text": "actually collect the values that are computed so I've got",
    "start": "4164839",
    "end": "4170520"
  },
  {
    "text": "sort of a a hairy example here so you know for I comes from 1 to 10 J comes",
    "start": "4170520",
    "end": "4176000"
  },
  {
    "text": "from 1 to 10 we'll compute a sum of I plus J we we have a guard you know if if",
    "start": "4176000",
    "end": "4182679"
  },
  {
    "text": "if the sum is even you know sum modulo 2 equals z and then we'll also compute a product",
    "start": "4182679",
    "end": "4189000"
  },
  {
    "text": "I times J and then we're going to yield a four twole and actually I I could",
    "start": "4189000",
    "end": "4194719"
  },
  {
    "text": "write this I could write this even more cleanly without saying the word Tuple four like I can just say you know pan i",
    "start": "4194719",
    "end": "4200760"
  },
  {
    "text": "j sum product close pan that means the same thing but I'm making it a little bit more explicit here for the",
    "start": "4200760",
    "end": "4206600"
  },
  {
    "text": "talk and what happens is is we actually get a vector out the other end",
    "start": "4206600",
    "end": "4212400"
  },
  {
    "text": "containing all the different permutations this this does this does all of that sort of collecting and flattening for",
    "start": "4212400",
    "end": "4219120"
  },
  {
    "text": "us so you know the first you know we get I equals 1 J equals 1 their sum is even",
    "start": "4219120",
    "end": "4224199"
  },
  {
    "text": "so we keep going and they product is one next you know I is one J is two uhoh",
    "start": "4224199",
    "end": "4230080"
  },
  {
    "text": "that doesn't work so we skip it then you know I is one J is three the sum is four",
    "start": "4230080",
    "end": "4236000"
  },
  {
    "text": "okay and the product is three and so on so we actually get these collected into a vector or say a list or whatever and",
    "start": "4236000",
    "end": "4241320"
  },
  {
    "text": "and and and uh these are these are basically spit into some appropriate I'm not going to Define this but some",
    "start": "4241320",
    "end": "4247199"
  },
  {
    "text": "appropriate container type based on the types of the things that were in the",
    "start": "4247199",
    "end": "4252880"
  },
  {
    "text": "generators so this is kind of nice because like you know say in in Java if you wanted to collect things as you went",
    "start": "4252880",
    "end": "4258600"
  },
  {
    "text": "through a for Loop or let's say you know as you went through a series of nested for Loops you would have to again",
    "start": "4258600",
    "end": "4265000"
  },
  {
    "text": "declare the list up top that you were going to put things in and then as you iterate through the for Loop you would",
    "start": "4265000",
    "end": "4270159"
  },
  {
    "text": "have to say you know list. add so very procedural right you're you're saying how you want the things to be added it's",
    "start": "4270159",
    "end": "4275880"
  },
  {
    "text": "a very U sort of procedural approach right or imperative approach here you",
    "start": "4275880",
    "end": "4281600"
  },
  {
    "text": "just say I'm going to collect everything I'm going to collect everything into one big flat collection all right then",
    "start": "4281600",
    "end": "4288320"
  },
  {
    "text": "finally Let's uh let's look at some higher order functions this is this is where this is where Scola starts to get",
    "start": "4288320",
    "end": "4294320"
  },
  {
    "text": "really powerful I mean everything else that we've seen so far was for the most part",
    "start": "4294320",
    "end": "4300080"
  },
  {
    "text": "except for maybe traits I think I think traits is is sort of a big deal I I think everything else so far for the most part is sort of syntactic",
    "start": "4300080",
    "end": "4306320"
  },
  {
    "text": "sugar but here is is where things start to get really interesting because in Java in Java if you want higher order",
    "start": "4306320",
    "end": "4313920"
  },
  {
    "text": "functions you have to have a class called function with a method called like apply or F or whatever like like if",
    "start": "4313920",
    "end": "4320040"
  },
  {
    "text": "you if you used guava for example you have a a a an interface called function and you have to implement apply right",
    "start": "4320040",
    "end": "4326480"
  },
  {
    "text": "well here you can literally pass code so let's say you know I've got some some",
    "start": "4326480",
    "end": "4333080"
  },
  {
    "text": "trait uh I'm not going to I'm not going to say its name you know maybe it's a sequence maybe it's a list whatever so",
    "start": "4333080",
    "end": "4338520"
  },
  {
    "text": "let's just call trait X of a where a is a is the type of the thing that's in my in my list here and we'll Define a a",
    "start": "4338520",
    "end": "4344760"
  },
  {
    "text": "function called map that takes a function you know it's it's not just taking an object it's taking a function",
    "start": "4344760",
    "end": "4351159"
  },
  {
    "text": "f that Maps things from A's to B's and then out the other end we'll get some collection some some X of B's",
    "start": "4351159",
    "end": "4359080"
  },
  {
    "text": "right so you know let's say I've got a A list of a list of numbers and I want to map those to a list of um a list of",
    "start": "4359080",
    "end": "4367080"
  },
  {
    "text": "months uh or a list of you know colors or something like that right so I would",
    "start": "4367080",
    "end": "4372679"
  },
  {
    "text": "pass it a function that that defines the mapping and then I would apply that function apply that mapping to each",
    "start": "4372679",
    "end": "4379360"
  },
  {
    "text": "element in my list right as I go along so for example let's say I've got you",
    "start": "4379360",
    "end": "4384440"
  },
  {
    "text": "know the function let's say I've got the the range 1 to 10 and I want to map this",
    "start": "4384440",
    "end": "4389840"
  },
  {
    "text": "closure this this this you know this this anonymous little function here that that takes an X and gives us x *",
    "start": "4389840",
    "end": "4397239"
  },
  {
    "text": "2 anybody who's used um say groovy or uh",
    "start": "4397239",
    "end": "4402560"
  },
  {
    "text": "or python you know I think is going to be fairly familiar to you guys uh yes",
    "start": "4402560",
    "end": "4408000"
  },
  {
    "text": "question there this is a Lambda yes",
    "start": "4408000",
    "end": "4413840"
  },
  {
    "text": "exactly uh or yeah that's right yeah you can also think of this as a function pointer which you know if you were doing this this style of thing in C uh you can",
    "start": "4413840",
    "end": "4421480"
  },
  {
    "text": "think of a Lambda as essentially like a callback right a function that's going to be called uh inside you know in",
    "start": "4421480",
    "end": "4428800"
  },
  {
    "text": "inside your your higher order function the function that's that's accepting the function pointer so if if I map x times 2 over",
    "start": "4428800",
    "end": "4437239"
  },
  {
    "text": "over the collection 1 to 10 then I'll get you know 2 four 68 and so on I can",
    "start": "4437239",
    "end": "4442920"
  },
  {
    "text": "also and this is another another case of my uh my mysterious underscore here I don't have to say it's a function that",
    "start": "4442920",
    "end": "4449040"
  },
  {
    "text": "takes an X and gives us x times two I can just say it's a function that takes something and doubles",
    "start": "4449040",
    "end": "4454159"
  },
  {
    "text": "it this my my my little underscore shorthand all right so let's say let's",
    "start": "4454159",
    "end": "4461280"
  },
  {
    "text": "do another example here let's say I want to filter things out of a collection so I've got my col C Type X again so you",
    "start": "4461280",
    "end": "4466400"
  },
  {
    "text": "know some trait X and I'm going to pass at this time I'm I'm going to pass filter a function that",
    "start": "4466400",
    "end": "4472719"
  },
  {
    "text": "that takes takes my a my my you know the type of the thing that I'm containing and returns a Boolean indicating whether",
    "start": "4472719",
    "end": "4478760"
  },
  {
    "text": "or not I want to keep the thing or or toss it out right and that gives us a new a new",
    "start": "4478760",
    "end": "4486080"
  },
  {
    "text": "list or a new container X of A's so you know we can do the same sort of thing",
    "start": "4486080",
    "end": "4491159"
  },
  {
    "text": "let's let's take our take our list 1 to 10 and filter uh filter filter out",
    "start": "4491159",
    "end": "4496440"
  },
  {
    "text": "the filter out the odd ones what will keep only the ones that are even so so given some X our our little Lambda here is going to",
    "start": "4496440",
    "end": "4504840"
  },
  {
    "text": "be X mod 2 equals z right so that'll give us again just the even numbered ones 2 4 6 8 and",
    "start": "4504840",
    "end": "4510800"
  },
  {
    "text": "10 and we can we can shorten that again using our using our underscore trick we can say underscore mod 2 equals z so",
    "start": "4510800",
    "end": "4517320"
  },
  {
    "text": "saying you know we're going to filter the things who when when taken module2",
    "start": "4517320",
    "end": "4522840"
  },
  {
    "text": "is equal to zero so do you include you include you include the ones",
    "start": "4522840",
    "end": "4528480"
  },
  {
    "text": "that are that are true yeah um partition is another interesting one sort of like",
    "start": "4528480",
    "end": "4534080"
  },
  {
    "text": "sort of like filter but but it gives you gives you the best of both worlds um partition is going to take that same",
    "start": "4534080",
    "end": "4539440"
  },
  {
    "text": "type of function the the do I include this or do I throw it out and it's going to give us a tuple a pair of lists one",
    "start": "4539440",
    "end": "4546159"
  },
  {
    "text": "for the stuff that was included and one for the stuff that was thrown out we can Define these ourselves this",
    "start": "4546159",
    "end": "4552040"
  },
  {
    "text": "happens to be something that is present that is present in this in the in the Scala standard collections library on",
    "start": "4552040",
    "end": "4557600"
  },
  {
    "text": "things like lists and sequences and vectors and arrays um but we we could",
    "start": "4557600",
    "end": "4562719"
  },
  {
    "text": "very easily Define this sort of function ourselves it's it's not it's not special to be able to take a to to be able to",
    "start": "4562719",
    "end": "4568000"
  },
  {
    "text": "define a higher order function that takes another function um so you know again we can say 1 to 10 partition",
    "start": "4568000",
    "end": "4574120"
  },
  {
    "text": "underscore modu equal 0 and then that gives us a tupal of two vectors one which includes the evens and the other",
    "start": "4574120",
    "end": "4580199"
  },
  {
    "text": "which includes the odds all right so we can do all kinds of stuff like that another another one this is a little bit",
    "start": "4580199",
    "end": "4586480"
  },
  {
    "text": "of a a trickier case reduce left again this is this is present in the scholar standard collections",
    "start": "4586480",
    "end": "4592159"
  },
  {
    "text": "Library let's say we want to take the sum of 1 to 10 so we give it a function",
    "start": "4592159",
    "end": "4599520"
  },
  {
    "text": "and this time our function doesn't just go from A's to B's this goes from a tupal to a b and in this case our b and",
    "start": "4599520",
    "end": "4606239"
  },
  {
    "text": "a are actually the same they're both ends but basically our X and Y represent the value that we're looking at right",
    "start": "4606239",
    "end": "4612239"
  },
  {
    "text": "now and the value that we've accumulated so far and we're going to do X+",
    "start": "4612239",
    "end": "4617719"
  },
  {
    "text": "y so this this is sort of the same thing doing this reduced left is the same thing as as doing basically a for Loop",
    "start": "4617719",
    "end": "4624360"
  },
  {
    "text": "right basically the same thing as doing a for Loop where we say you know I is equal to uh the element that we're",
    "start": "4624360",
    "end": "4630679"
  },
  {
    "text": "looking at Plus or you know I plus the I the element that we're looking at",
    "start": "4630679",
    "end": "4636840"
  },
  {
    "text": "right uh even shorter hand here since we've got two parameters Each of which we're using once we can just call them",
    "start": "4636840",
    "end": "4643400"
  },
  {
    "text": "both underscores reduce left of something plus something else that's cool but of course you know shorter hand",
    "start": "4643400",
    "end": "4649600"
  },
  {
    "text": "is just to call the sum function which already does exactly this um and since",
    "start": "4649600",
    "end": "4655840"
  },
  {
    "text": "we're out of time I'm not going to get into monads so what I want to",
    "start": "4655840",
    "end": "4661360"
  },
  {
    "text": "do first of all anybody get the movie reference okay good to I know right it's",
    "start": "4661880",
    "end": "4669440"
  },
  {
    "text": "going to be global thermonuclear war yeah yeah no we're going to be talking about tic tac toe",
    "start": "4669440",
    "end": "4676159"
  },
  {
    "text": "uh and I promise the these are my my last two slides here so we want to model and this is",
    "start": "4676159",
    "end": "4681560"
  },
  {
    "text": "something that I do in my in my class on Scala we want to model the game of tic tac toe and then we want to Define an",
    "start": "4681560",
    "end": "4688239"
  },
  {
    "text": "artificial intelligence player for Tic Tac Toe very sophisticated so let's let's model this",
    "start": "4688239",
    "end": "4694320"
  },
  {
    "text": "real quick this is this is sort of our our only like real world code code example in this whole talk so so",
    "start": "4694320",
    "end": "4699520"
  },
  {
    "text": "everybody wake up we've got let's say you know we need to we need to have some notion of a player right there's two",
    "start": "4699520",
    "end": "4705600"
  },
  {
    "text": "there two players playing the game and I always say you know well we could represent these however we wanted we",
    "start": "4705600",
    "end": "4711040"
  },
  {
    "text": "could represent them as a as a Boolean we could represent them as an INT we could represent them as a string or",
    "start": "4711040",
    "end": "4716400"
  },
  {
    "text": "whatever but but the nice way of doing again this this this sort of finite and",
    "start": "4716400",
    "end": "4722199"
  },
  {
    "text": "expressive um uh set of choices is using our case classes again so we have what",
    "start": "4722199",
    "end": "4729000"
  },
  {
    "text": "we called a sealed trait or I could have also done this with a sealed abstract class SE again to indicate that there's",
    "start": "4729000",
    "end": "4735920"
  },
  {
    "text": "only two possibilities which are the ones that appear right here one of them is called X and the",
    "start": "4735920",
    "end": "4741120"
  },
  {
    "text": "other one is called o and there's are both objects they're both Singleton so this is sort of like doing",
    "start": "4741120",
    "end": "4746760"
  },
  {
    "text": "an enum right um and also similar I think in Java 5 they introduced introduced the",
    "start": "4746760",
    "end": "4752639"
  },
  {
    "text": "notion that an enum can have uh can have data inside and and can have methods inside so same thing here our our sealed",
    "start": "4752639",
    "end": "4760000"
  },
  {
    "text": "trait defines or declares a method called opponent and in our uh in our concrete",
    "start": "4760000",
    "end": "4767199"
  },
  {
    "text": "implementations we say oh well you know the opponent of X is going to be o and the opponent of O is going to be",
    "start": "4767199",
    "end": "4773920"
  },
  {
    "text": "X okay fairly straightforward I actually think this is a little bit more verbose than Java xenom I I I actually really am",
    "start": "4773920",
    "end": "4780000"
  },
  {
    "text": "a am a fan of java xenom um so this is a bit more Rose it's also more flexible in",
    "start": "4780000",
    "end": "4785239"
  },
  {
    "text": "some cases but anyway this is the way it is then we want to be able to make a",
    "start": "4785239",
    "end": "4792000"
  },
  {
    "text": "move on a board so so what does a move look like well take a player you know it's a particular player making the",
    "start": "4792000",
    "end": "4798000"
  },
  {
    "text": "move and a row and a column on the board right you know some somewhere between uh",
    "start": "4798000",
    "end": "4804400"
  },
  {
    "text": "one and three or zero and two and an interesting thing to note here that I haven't talked about yet",
    "start": "4804400",
    "end": "4811760"
  },
  {
    "text": "is this parameter list I've declared my you know case class move and I I give it a parameter list right up front I don't",
    "start": "4811760",
    "end": "4818159"
  },
  {
    "text": "declare a Constructor so that's kind of odd that that's that's also you know again this",
    "start": "4818159",
    "end": "4823920"
  },
  {
    "text": "is just sort of a tactic difference but this is something that uh that ends up saving you like kind of a lot of",
    "start": "4823920",
    "end": "4829400"
  },
  {
    "text": "boilerplate typing because in Java the way that I would normally do this if I wanted to have a player field and a row",
    "start": "4829400",
    "end": "4835679"
  },
  {
    "text": "field and an INT field or a column field is I would say you know private player",
    "start": "4835679",
    "end": "4840880"
  },
  {
    "text": "player private row or you know private final uh player player private final int",
    "start": "4840880",
    "end": "4847199"
  },
  {
    "text": "row private final int call and then in my Constructor I would say you know I would take those parameters and say",
    "start": "4847199",
    "end": "4852560"
  },
  {
    "text": "this. row equals row this. call equals call this is doing all that for",
    "start": "4852560",
    "end": "4858480"
  },
  {
    "text": "you this is doing all of that for you player is a private final uh you know",
    "start": "4858480",
    "end": "4866199"
  },
  {
    "text": "object of player type there's an accessor for it there's an accessor method and that method is called player",
    "start": "4866199",
    "end": "4872040"
  },
  {
    "text": "so if you were to call into this from java code you could actually say you know move. player pen pen and get the",
    "start": "4872040",
    "end": "4879280"
  },
  {
    "text": "player and the Constructor is you know doing that you know this do player equals whatever this do row equals",
    "start": "4879280",
    "end": "4887159"
  },
  {
    "text": "equals row and so on so this saves you quite a lot of typing and and quite a lot of consternation when uh when you're",
    "start": "4887159",
    "end": "4892560"
  },
  {
    "text": "you know basically you're going through the whole process of trying to trying to create a big class hierarchy for some some problem domain that you're modeling",
    "start": "4892560",
    "end": "4898960"
  },
  {
    "text": "you don't want to have to do all this sort of boilerplate",
    "start": "4898960",
    "end": "4904120"
  },
  {
    "text": "stuff um yes um so so you get the getter and Setter the getter uh it doesn't follow",
    "start": "4904120",
    "end": "4911000"
  },
  {
    "text": "Bean naming conventions um so it's not called get player it's just called player um and a set so so these are",
    "start": "4911000",
    "end": "4919440"
  },
  {
    "text": "actually vowels they're immutable so a Setter won't be generated for them if I",
    "start": "4919440",
    "end": "4925159"
  },
  {
    "text": "were to Additionally you know uh create you know put some curly braces here and Define some vers in the body then",
    "start": "4925159",
    "end": "4932520"
  },
  {
    "text": "Setters would be created for those okay we also want to know the",
    "start": "4932520",
    "end": "4939199"
  },
  {
    "text": "status of the game we're modeling tic tactoe we want to know we want to know who won and there's three different",
    "start": "4939199",
    "end": "4945000"
  },
  {
    "text": "statuses that a game could be in three different kind of game States we could either have a winner so the game could",
    "start": "4945000",
    "end": "4951000"
  },
  {
    "text": "be over with a winner which is unlikely right um and this case class is actually",
    "start": "4951000",
    "end": "4957040"
  },
  {
    "text": "going to you know again we're going to specify a parameter to that case class and this is something we can",
    "start": "4957040",
    "end": "4963239"
  },
  {
    "text": "pattern match against we'll see that in a second and that win you know the win is",
    "start": "4963239",
    "end": "4969800"
  },
  {
    "text": "one of our potential statuses draw is another one and that's obviously the most most likely outcome in a game and",
    "start": "4969800",
    "end": "4975320"
  },
  {
    "text": "then undecided of course meaning that the game is still on so okay you know I've defined it this way you might might",
    "start": "4975320",
    "end": "4980840"
  },
  {
    "text": "think of defining it some other way but this is just you know this is me really getting into the idea that case classes and case objects are very cool because",
    "start": "4980840",
    "end": "4987639"
  },
  {
    "text": "you can pattern match against them and exhaustively so you don't have to worry about some additional uh you know player",
    "start": "4987639",
    "end": "4993159"
  },
  {
    "text": "Z popping up in the in the mix and then finally I'm not going to",
    "start": "4993159",
    "end": "4998760"
  },
  {
    "text": "I'm not going to show the implementation of board but let's just say I've got an abstract class called board that uh that knows what moves are",
    "start": "4998760",
    "end": "5005600"
  },
  {
    "text": "legal on it uh and implicit in that is it knows",
    "start": "5005600",
    "end": "5010719"
  },
  {
    "text": "whose turn it is right we want to also be able to play a move out of that set of legal moves and",
    "start": "5010719",
    "end": "5017960"
  },
  {
    "text": "I'm going to say that that returns an option of board meaning well you know if we actually tried to play an illegal move it'll give us",
    "start": "5017960",
    "end": "5024320"
  },
  {
    "text": "none sort of like returning null right it'll give us none no board because you try to play something illegal on it or",
    "start": "5024320",
    "end": "5030960"
  },
  {
    "text": "you know normally You' get some board and then and then finally it's able to",
    "start": "5030960",
    "end": "5036000"
  },
  {
    "text": "determine its status so okay so this is all fairly",
    "start": "5036000",
    "end": "5041480"
  },
  {
    "text": "straightforward I think I think this is this is enough to kind of uh model the whole game of tic tactoe right and and",
    "start": "5041480",
    "end": "5047120"
  },
  {
    "text": "you know so you could consider playing a sequence of moves getting a new board each time with with some different players",
    "start": "5047120",
    "end": "5053800"
  },
  {
    "text": "and what I want to do sort of as my my final my final exercise here is show you a giant chunk of code that takes up a",
    "start": "5053800",
    "end": "5060480"
  },
  {
    "text": "little bit more than a slide and show you how I implemented an",
    "start": "5060480",
    "end": "5065920"
  },
  {
    "text": "AI for tic taac toe basically the the whole the whole meat of our AI is going to be in in a in",
    "start": "5065920",
    "end": "5072520"
  },
  {
    "text": "a method that I'm defining called best move we want to know the best move on a board right for for any given",
    "start": "5072520",
    "end": "5080639"
  },
  {
    "text": "player inside best move we're going to define a couple little helper methods one called value and one called",
    "start": "5080639",
    "end": "5089119"
  },
  {
    "text": "find so what value is going to do for us is we're going to compute you know basically if if I were to if I were to",
    "start": "5089119",
    "end": "5095159"
  },
  {
    "text": "make some move some you know some move M if I were to make that move then then would I Win Lose or Draw the",
    "start": "5095159",
    "end": "5100360"
  },
  {
    "text": "game and then find is going to find the first legal move providing some desired",
    "start": "5100360",
    "end": "5105800"
  },
  {
    "text": "outcome so so what I really want to do is say I want to find a win and we'll find the first",
    "start": "5105800",
    "end": "5111159"
  },
  {
    "text": "one otherwise well I'll settle for a draw and this this really this right here this this lazy Val move that's",
    "start": "5111159",
    "end": "5118040"
  },
  {
    "text": "that's really the Crux of the algorithm I want to find a win and if that doesn't work then I'll find a draw and if that doesn't work then well all right fine",
    "start": "5118040",
    "end": "5124040"
  },
  {
    "text": "I'll find the first move in which my opponent wins which of course is going to be the the first move that I look",
    "start": "5124040",
    "end": "5130239"
  },
  {
    "text": "at so the way value is defined we're going to say oh and here's",
    "start": "5131880",
    "end": "5138560"
  },
  {
    "text": "another another little bit of scholar Syntax for you know to make things still be be essentially java-- is while",
    "start": "5138560",
    "end": "5145159"
  },
  {
    "text": "appearing a bit more functional this board play Move is actually calling",
    "start": "5145159",
    "end": "5150320"
  },
  {
    "text": "board. playay paren move this",
    "start": "5150320",
    "end": "5156080"
  },
  {
    "text": "play looks like an operator looks like an infix operator right and in fact any",
    "start": "5156080",
    "end": "5161520"
  },
  {
    "text": "of our any of our normal operators like plus and times and equals equals whatever those are actually defined as",
    "start": "5161520",
    "end": "5168040"
  },
  {
    "text": "methods on their respective classes if I say you know 1+ one that's",
    "start": "5168040",
    "end": "5173600"
  },
  {
    "text": "actually 1. plus peren one is the way that that's actually",
    "start": "5173600",
    "end": "5179280"
  },
  {
    "text": "defined in Scola so kind of interesting tidbit so so I say board play board play move then",
    "start": "5179280",
    "end": "5185199"
  },
  {
    "text": "this then this weird flat map thing which was in the in the slides that I skipped",
    "start": "5185199",
    "end": "5190520"
  },
  {
    "text": "over and we're we're doing pattern matching now on the status of the board that we get out the other end if the",
    "start": "5190520",
    "end": "5197840"
  },
  {
    "text": "status is undecided then we're going to recursively call best move until you know we want to keep calling best move",
    "start": "5197840",
    "end": "5203480"
  },
  {
    "text": "until we actually get to the end of the game we want to follow some some path in the game tree",
    "start": "5203480",
    "end": "5210000"
  },
  {
    "text": "otherwise and this is you know pattern matching again sort of sort of being as powerful as it is this this is our first",
    "start": "5210000",
    "end": "5215360"
  },
  {
    "text": "case our undecided case otherwise any other status which of course there could be there could be two it could be win or",
    "start": "5215360",
    "end": "5221239"
  },
  {
    "text": "it could be draw either of these two statuses will say okay that the the the",
    "start": "5221239",
    "end": "5226320"
  },
  {
    "text": "value of that move ended up as some status you know some win of X or o or some",
    "start": "5226320",
    "end": "5234800"
  },
  {
    "text": "draw so this is fairly compact I haven't explained all this stuff and that's",
    "start": "5234800",
    "end": "5240600"
  },
  {
    "text": "fine then you know we Define find",
    "start": "5240600",
    "end": "5245679"
  },
  {
    "text": "and find is actually a method that's defined on collection so we've got our we've got our list of legal moves our",
    "start": "5246520",
    "end": "5251600"
  },
  {
    "text": "set of legal moves or whatever and we can we can literally call find on that but find again is a higher order function find takes a method or a Lambda",
    "start": "5251600",
    "end": "5260600"
  },
  {
    "text": "right and I'm using my magic underscore here so find uh basically you know find",
    "start": "5260600",
    "end": "5266840"
  },
  {
    "text": "something that satisfies this condition where where the value of the move I'm looking at that's my my underscore my",
    "start": "5266840",
    "end": "5272199"
  },
  {
    "text": "little Anonymous variable binding on this given board is equal to the",
    "start": "5272199",
    "end": "5277960"
  },
  {
    "text": "status that I want and then I'm actually going to",
    "start": "5277960",
    "end": "5283679"
  },
  {
    "text": "bundle this up again using map I'm going to bundle it up again with the status so that I can propagate it back out and",
    "start": "5283679",
    "end": "5289920"
  },
  {
    "text": "then really the guts of this algorithm again like I said is this lazy V well why why have I made this lazy",
    "start": "5289920",
    "end": "5296920"
  },
  {
    "text": "this is this is just to sort of tie everything back up into what what we talked about really early on in the talk",
    "start": "5296920",
    "end": "5302159"
  },
  {
    "text": "this idea that that lazy value lazy vs aren't computed until we actually need them right so my lazy V expresses or",
    "start": "5302159",
    "end": "5309840"
  },
  {
    "text": "sort of the the right hand side of my lazy V I'm I'm doing all this finding I'm doing all this recursive stuff you know",
    "start": "5309840",
    "end": "5316080"
  },
  {
    "text": "it's going to take forever Tech tto is a really hard game but I've also introduced a cache",
    "start": "5316080",
    "end": "5323760"
  },
  {
    "text": "that's you know something i' defined up here a little little private private Val cach that's a m and it starts out as an",
    "start": "5323760",
    "end": "5328960"
  },
  {
    "text": "empty mutable map and as we go along we try to get stuff out of our cache",
    "start": "5328960",
    "end": "5335800"
  },
  {
    "text": "this is a really cool little method this is something that that I believe um I believe the guava Library",
    "start": "5335800",
    "end": "5343199"
  },
  {
    "text": "if if you're if you're using guava in uh in Java I believe guava has something uh",
    "start": "5343199",
    "end": "5348679"
  },
  {
    "text": "some some little helper on maps and and uh yeah I think it's it's like the maps 2 interface or Maps 2 static class",
    "start": "5348679",
    "end": "5356280"
  },
  {
    "text": "something like that uh has something that's that's kind of like Get else update where where you try to get something from a",
    "start": "5356280",
    "end": "5362080"
  },
  {
    "text": "map and if you can then you know it just Returns the value otherwise you you pass",
    "start": "5362080",
    "end": "5368239"
  },
  {
    "text": "it basically a uh I think guava calls them suppliers basically you pass it something that that will end up",
    "start": "5368239",
    "end": "5373400"
  },
  {
    "text": "Computing the value if you didn't already have it insert it into the map and then return it right that's what get",
    "start": "5373400",
    "end": "5379600"
  },
  {
    "text": "else update does get else update tries to tries to find the best move on this",
    "start": "5379600",
    "end": "5385080"
  },
  {
    "text": "board and if it's able to find it then it simply returns it directly and this lazy Val is never evaluated",
    "start": "5385080",
    "end": "5395400"
  },
  {
    "text": "so that's kind of cool you know I I I I don't I don't have to worry about oh does the cash have it and if not then",
    "start": "5395800",
    "end": "5401480"
  },
  {
    "text": "I'll you know I'll have an if block that actually does the logic or whatever I I can literally just say okay this is this is what I would do but let me check the",
    "start": "5401480",
    "end": "5407880"
  },
  {
    "text": "cache first um so uh so you know then of",
    "start": "5407880",
    "end": "5414000"
  },
  {
    "text": "course if the cache has it we get the best move back that we've computed already otherwise we will we will go go ahead",
    "start": "5414000",
    "end": "5420560"
  },
  {
    "text": "and compute the move from this lazy v um so you know this this uh obviously after",
    "start": "5420560",
    "end": "5427560"
  },
  {
    "text": "after maybe an hour and uh hour and of hour and two hours and three or whatever of uh of hearing me talk about scull Isa",
    "start": "5427560",
    "end": "5434600"
  },
  {
    "text": "probably not enough to to really understand all this code but the idea that that essentially I've defin an AI",
    "start": "5434600",
    "end": "5441920"
  },
  {
    "text": "for admittedly a simple game in what amounts to more or less you know three lines of code and you know some some",
    "start": "5441920",
    "end": "5447760"
  },
  {
    "text": "helper methods but you know basically a slide right the idea that you can do",
    "start": "5447760",
    "end": "5453040"
  },
  {
    "text": "this in in in in the scope of in the scope of a slide is really kind of an",
    "start": "5453040",
    "end": "5459080"
  },
  {
    "text": "interesting thing and I haven't even started talking about stuff like concurrency stuff like actors in Scala",
    "start": "5459080",
    "end": "5464480"
  },
  {
    "text": "right I haven't talked about any of that kind of stuff the stuff that that that makes code on a very very large scale uh",
    "start": "5464480",
    "end": "5470880"
  },
  {
    "text": "you know that uh that's going to be deployed across multiple servers or whatever um that has to deal with you",
    "start": "5470880",
    "end": "5476280"
  },
  {
    "text": "know all kinds of fault tolerance and things like that makes that appear as if it were you know simple simple one two",
    "start": "5476280",
    "end": "5482760"
  },
  {
    "text": "three kind of procedures um so the punchline of all this I think is is that Scala is like I say sort of",
    "start": "5482760",
    "end": "5491199"
  },
  {
    "text": "less than Java in in the sense that in the sense that by following a very rigorous set of uh a very rigorous set",
    "start": "5491199",
    "end": "5497480"
  },
  {
    "text": "of of principles this idea that everything is uniformly accessible uh including functions as",
    "start": "5497480",
    "end": "5502960"
  },
  {
    "text": "objects um the idea of monads which we didn't talk about uh that that let you",
    "start": "5502960",
    "end": "5508159"
  },
  {
    "text": "that let you encapsulate a lot of stuff and sort of sort of hide it off into into the type system um really lets you",
    "start": "5508159",
    "end": "5514760"
  },
  {
    "text": "write a lot less code and the code that you do end up writing ends up expressing",
    "start": "5514760",
    "end": "5520159"
  },
  {
    "text": "expressing your your your real you know sort of your business logic right the stuff that you actually care about not",
    "start": "5520159",
    "end": "5525360"
  },
  {
    "text": "not stuff like oh I need to do some null checking here or oh I really want to optimize this so I'm going to do some",
    "start": "5525360",
    "end": "5531320"
  },
  {
    "text": "double check locking or or whatever yeah you you get to sort of throw that under the covers and and trust that trust that",
    "start": "5531320",
    "end": "5539320"
  },
  {
    "text": "the the power of the type system is able to is able to take care of a lot of that stuff for you thank thank you",
    "start": "5539320",
    "end": "5547040"
  },
  {
    "text": "[Music]",
    "start": "5547510",
    "end": "5555979"
  }
]