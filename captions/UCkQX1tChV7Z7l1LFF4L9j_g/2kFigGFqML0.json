[
  {
    "text": "I don't sure if it's exactly time to start but I'll go ahead and start my",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "name is Bill venner's and today my goal is to compare functional air handling and scala sea and sky lactic without",
    "start": "5040",
    "end": "12990"
  },
  {
    "text": "creating an explosion on the expels emailing list so we'll see how I do in",
    "start": "12990",
    "end": "19830"
  },
  {
    "text": "particular there's there's two types in scala z one of them is called disjunction which is that that v-shape",
    "start": "19830",
    "end": "25109"
  },
  {
    "text": "it's a symbolic name and then the other one is validation and what for those who",
    "start": "25109",
    "end": "31230"
  },
  {
    "text": "aren't familiar disjunction is basically a biased either so it's it's something that's it's geared towards functional",
    "start": "31230",
    "end": "37559"
  },
  {
    "text": "error handling if you're calling them if you're writing a method that may succeed or fail you can return a left that has",
    "start": "37559",
    "end": "46160"
  },
  {
    "text": "the success value and I'm sorry I write that has the success on the left that has the failure value so you can",
    "start": "46160",
    "end": "52320"
  },
  {
    "text": "actually return the failure instead of throwing exception that's the idea and the difference between disjunction and",
    "start": "52320",
    "end": "57899"
  },
  {
    "text": "validation is that this Junction is monadic and it would short circuit if",
    "start": "57899",
    "end": "63180"
  },
  {
    "text": "you put it in for expression you can kind of combine many method calls that may succeed or fail and it will short-circuit give you the first error",
    "start": "63180",
    "end": "69560"
  },
  {
    "text": "validation is used for accumulating errors so it's when you want to combine",
    "start": "69560",
    "end": "74820"
  },
  {
    "text": "several method calls that may succeed or fail but you want to know what all of the errors are okay or does the same",
    "start": "74820",
    "end": "82080"
  },
  {
    "text": "thing but in one type right so what I wanted to do was not be controversial if",
    "start": "82080",
    "end": "91829"
  },
  {
    "text": "a possible and start by kind of explaining what i think is a lot of the",
    "start": "91829",
    "end": "97560"
  },
  {
    "text": "differences in the design the way the design came out is differences in gold so what us versus them is is that i",
    "start": "97560",
    "end": "105450"
  },
  {
    "text": "think the scalzi folks are designing for us and i'm designing for them so when 20",
    "start": "105450",
    "end": "112320"
  },
  {
    "text": "more started the project he said that he doesn't really care if it's used he just wants it to be usable and what I think",
    "start": "112320",
    "end": "118950"
  },
  {
    "text": "that means is that he wants to use it and so in particular people who he's designing for himself and people like",
    "start": "118950",
    "end": "125729"
  },
  {
    "text": "him who are already familiar with FP so that to us is where as I'm actually",
    "start": "125729",
    "end": "132300"
  },
  {
    "text": "trying to this for people who aren't familiar with FP so that's more like I do want it to",
    "start": "132300",
    "end": "137640"
  },
  {
    "text": "be sort of a way for people to get into doing things in a more functional style people who are not familiar with Haskell",
    "start": "137640",
    "end": "143670"
  },
  {
    "text": "or FP before so that's one difference another is the people who the",
    "start": "143670",
    "end": "149400"
  },
  {
    "text": "powers-that-be or the powers that survived the recent ordeal really like type class coherence and I don't think",
    "start": "149400",
    "end": "157830"
  },
  {
    "text": "it makes sense so the type class coherence goal is really something that didn't form the scalzi design and the",
    "start": "157830",
    "end": "164910"
  },
  {
    "text": "fact that I'm not trying to do that has informed the Galactic design so that's another difference the other thing that",
    "start": "164910",
    "end": "171330"
  },
  {
    "text": "I find is that there's a real strong desire to make things general in the",
    "start": "171330",
    "end": "177930"
  },
  {
    "text": "scholars II community which i think is a good thing but I think that there are",
    "start": "177930",
    "end": "183180"
  },
  {
    "text": "times when it's good to be specific and that's another difference I think in",
    "start": "183180",
    "end": "189269"
  },
  {
    "text": "like philosophy that made these two designs come out differently one more is",
    "start": "189269",
    "end": "194400"
  },
  {
    "text": "that the folks in Scala Z really want to do FB this is my opinion or my",
    "start": "194400",
    "end": "199650"
  },
  {
    "text": "impression they're not really in love with a JVM because it's kind of doesn't it's not the best fit for FB but it's so",
    "start": "199650",
    "end": "208350"
  },
  {
    "text": "pervasive that you often end up writing things for the JVM so they'd be nice to have something FP like on top of it and",
    "start": "208350",
    "end": "213720"
  },
  {
    "text": "Scala is pretty much the best way to get there and scholars E is sort of the layer to do that whereas what I'm trying",
    "start": "213720",
    "end": "220500"
  },
  {
    "text": "to do is more merge them together like bring oh and FB together I think a lot",
    "start": "220500",
    "end": "227459"
  },
  {
    "text": "of the scholars II feeling is that o.o is not really needed and regardless of",
    "start": "227459",
    "end": "233790"
  },
  {
    "text": "that what I'm trying to do is merge in which i think is kind of what Scala is more about so the last thing is that",
    "start": "233790",
    "end": "240829"
  },
  {
    "text": "they don't like the standard library that much there's those parts about the standard library that that they want to",
    "start": "240829",
    "end": "247170"
  },
  {
    "text": "just not touch so they make replacements and what I'm trying to do is is some do",
    "start": "247170",
    "end": "252299"
  },
  {
    "text": "something that will fit in with the standard library so those are just there's nothing wrong with the way",
    "start": "252299",
    "end": "257459"
  },
  {
    "text": "they're they're doing it I don't think it's just different wait so that is",
    "start": "257459",
    "end": "262500"
  },
  {
    "text": "basically my intro and I have just a bunch of demos so I I need",
    "start": "262500",
    "end": "267510"
  },
  {
    "text": "when to hold the mic for me otherwise I would have to do coding with one hand this is yeah this is uh Josh sure it so",
    "start": "267510",
    "end": "277110"
  },
  {
    "text": "he's going to hold the mic for me and make interject comments from time to time that's fun alright so essentially",
    "start": "277110",
    "end": "287960"
  },
  {
    "text": "the thing about type class coherence if you look I actually was in a bin in the scholars emailing list a few times",
    "start": "287960",
    "end": "294030"
  },
  {
    "text": "mostly asking questions kind of as a curious grasshopper saying why does he do things this way and one of the things",
    "start": "294030",
    "end": "299280"
  },
  {
    "text": "I just didn't understand is why do you have two different types you have a disjunction type in a validation type because what I saw in the community was",
    "start": "299280",
    "end": "304950"
  },
  {
    "text": "people would have confusion about which ones to use when and the answer was because there's two different",
    "start": "304950",
    "end": "312210"
  },
  {
    "text": "duplicative so disjunction has a monad instance and that comes with an applicative that short-circuits",
    "start": "312210",
    "end": "318770"
  },
  {
    "text": "validation needs a different app liket of that accumulates errors and they want",
    "start": "318770",
    "end": "324210"
  },
  {
    "text": "to use applicative to accumulate errors and because they only want one applicative / type they want it that",
    "start": "324210",
    "end": "331350"
  },
  {
    "text": "makes them have two types that's why they did it so what type last coherence is is that for any type T there's only",
    "start": "331350",
    "end": "339570"
  },
  {
    "text": "one instance that's what it means and you can always rely everywhere on that instance so what happened in school",
    "start": "339570",
    "end": "347130"
  },
  {
    "text": "actic is first of all I don't use applicative for accumulating nation I just wrote on API for it so I didn't",
    "start": "347130",
    "end": "353430"
  },
  {
    "text": "have that problem anyway but even if I did I don't think I mean I see how type class coherent scan is an attempt to",
    "start": "353430",
    "end": "360360"
  },
  {
    "text": "make things simple you can you look at a type you know what its its instance does but I think it doesn't really match a",
    "start": "360360",
    "end": "367020"
  },
  {
    "text": "lot of times there's just naturally more than one instance for a type so so let",
    "start": "367020",
    "end": "373800"
  },
  {
    "text": "me give you a quick tour of or this is the sorry that was good yeah this is the",
    "start": "373800",
    "end": "384290"
  },
  {
    "text": "type or is it son either so there's two possible values a disjoint Union one of",
    "start": "384290",
    "end": "389910"
  },
  {
    "text": "them's good and one was bad so if you look at either it's very balanced this one is just it's like an easier designed",
    "start": "389910",
    "end": "397200"
  },
  {
    "text": "just for functional error handling so one of the success result in worms that fail result I call them good and bad because",
    "start": "397200",
    "end": "402900"
  },
  {
    "text": "success and failure were taken in the standard library and to fit in the standard library didn't want to use the same name that's what it means and so G",
    "start": "402900",
    "end": "410849"
  },
  {
    "text": "is the good type and B is the bad type maybe it's an error message string maybe it's some kind of hierarchy that you",
    "start": "410849",
    "end": "415949"
  },
  {
    "text": "created to handle errors and then good and bad are just subtypes those are the",
    "start": "415949",
    "end": "421740"
  },
  {
    "text": "two subtypes so good just takes a G if I can get there and bad just takes a be ok",
    "start": "421740",
    "end": "429870"
  },
  {
    "text": "so if one quick demo of how you would",
    "start": "429870",
    "end": "436110"
  },
  {
    "text": "use it if you had a functional if you have a method and you want to return",
    "start": "436110",
    "end": "443789"
  },
  {
    "text": "either a string or if something went wrong an error message you would actually put the result type of your",
    "start": "443789",
    "end": "448969"
  },
  {
    "text": "your method like this you can just say string or error message or if you want",
    "start": "448969",
    "end": "455969"
  },
  {
    "text": "to return an int or something goes wrong an error message you could say hint or error message well learning he learned",
    "start": "455969",
    "end": "463379"
  },
  {
    "text": "so this syntax are not sure you've seen it before it you can actually do that with any type in Scala where there's two",
    "start": "463379",
    "end": "469949"
  },
  {
    "text": "type parameters so you know another way to write is this or ant come error",
    "start": "469949",
    "end": "476430"
  },
  {
    "text": "message is int or error message and you can do that with map if you've mapped from int to string you could write that",
    "start": "476430",
    "end": "482129"
  },
  {
    "text": "int map string if you want to do and then here's a method that's going to",
    "start": "482129",
    "end": "488039"
  },
  {
    "text": "return a person or error message and it calls those two guys in for expression and just yields person and it will",
    "start": "488039",
    "end": "494219"
  },
  {
    "text": "short-circuit at the first sign of failure so if the first one fails it'll just give you that error message ok so",
    "start": "494219",
    "end": "500639"
  },
  {
    "text": "that's a quick tour and one of the things that I wanted to do was test that",
    "start": "500639",
    "end": "506219"
  },
  {
    "text": "this thing obeys the functor laws and the Monad laws and so this is an example of testing that this type obeys its map",
    "start": "506219",
    "end": "512698"
  },
  {
    "text": "method obeys the functor laws and for that I need to make a functor instance",
    "start": "512699",
    "end": "518060"
  },
  {
    "text": "for or and so this guy what it does is it calls the map method and the thing is",
    "start": "518060",
    "end": "524519"
  },
  {
    "text": "that there's also a another method on or called bad map that maps across the bad",
    "start": "524519",
    "end": "530279"
  },
  {
    "text": "side and that one should also pass the fun laws so I wanted to test that too right",
    "start": "530279",
    "end": "536880"
  },
  {
    "text": "and so that's down here this says the bad the bad person and behavior of or",
    "start": "536880",
    "end": "542010"
  },
  {
    "text": "should also pass a functor law so I have a different or a functor that calls bad map so right there there's actually two",
    "start": "542010",
    "end": "550970"
  },
  {
    "text": "functors that are useful for one type or and that's the problem with type I have",
    "start": "550970",
    "end": "556470"
  },
  {
    "text": "with type class coherence is that it's kind of contrived as just force that into one right and the other thing that",
    "start": "556470",
    "end": "564750"
  },
  {
    "text": "I demoed a few I don't know a year ago or two to the scalzi folks is that you know there's a way in Scala to override",
    "start": "564750",
    "end": "573240"
  },
  {
    "text": "an implicit so you could actually have sort of a default type class instance applicative instance for disjunction and",
    "start": "573240",
    "end": "579630"
  },
  {
    "text": "then if you want to accumulate just put a different way applicative in scope for that and then accumulate with",
    "start": "579630",
    "end": "584720"
  },
  {
    "text": "disjunction so here's an example of I took disjunction scholars ease",
    "start": "584720",
    "end": "589770"
  },
  {
    "text": "disjunction and I was able to accumulate Arizona I didn't need validation right but but what that violates is type class",
    "start": "589770",
    "end": "596970"
  },
  {
    "text": "coherence because now i have i've used a different applicative for this for valid for disjunction so okay so that's type",
    "start": "596970",
    "end": "603540"
  },
  {
    "text": "west coherence so actually I'm gonna",
    "start": "603540",
    "end": "612990"
  },
  {
    "text": "take questions at the end for the video but just save it though and also cries of blasphemy those kinds of things",
    "start": "612990",
    "end": "618660"
  },
  {
    "text": "please save those for the end what can I class what here what happens if the bad",
    "start": "618660",
    "end": "625350"
  },
  {
    "text": "Matt breaks do you get a breaking bad",
    "start": "625350",
    "end": "629269"
  },
  {
    "text": "oh so clearly I hired the right guy oh",
    "start": "631800",
    "end": "642440"
  },
  {
    "text": "yes you do just I'm not going to tell you how it ends but so okay so that what",
    "start": "643220",
    "end": "655800"
  },
  {
    "text": "i wanted to show was an example of what I've noticed in users they'll have a little bit of confusion about which one",
    "start": "655800",
    "end": "661620"
  },
  {
    "text": "of these two types to use so this person actually I don't know who it is I'm sorry but ol a traveler Oh some types of",
    "start": "661620",
    "end": "668579"
  },
  {
    "text": "people don't really name sign their blogs but this is an article called favor or blog post called favor",
    "start": "668579",
    "end": "674339"
  },
  {
    "text": "disjunction revalidation where someone says they have the epiphany that they've been using these two wrongly and that",
    "start": "674339",
    "end": "679500"
  },
  {
    "text": "most blogs show them to use them a certain way which is his first demo here which is simply if you have a bunch of",
    "start": "679500",
    "end": "685709"
  },
  {
    "text": "methods like parse age parse int a purse age parse name those kinds of methods where you're returning either a success",
    "start": "685709",
    "end": "691740"
  },
  {
    "text": "value of failure value that you would return if you want to accumulate the errors you would return something like",
    "start": "691740",
    "end": "697829"
  },
  {
    "text": "this so this oh it's very tiny let me make that larger sorry like it won't go",
    "start": "697829",
    "end": "706320"
  },
  {
    "text": "up now there we go validation non-empty list error message coming int which",
    "start": "706320",
    "end": "712140"
  },
  {
    "text": "means if it succeeds it'll return it in if it fails that return a non-empty list of error message which he's type alias",
    "start": "712140",
    "end": "718500"
  },
  {
    "text": "to string this guy has done and then down farther what you can use is the",
    "start": "718500",
    "end": "727160"
  },
  {
    "text": "cinnabon operator or the home alone scream operator whatever you want to call it to accumulate errors and so what",
    "start": "727160",
    "end": "736230"
  },
  {
    "text": "you do is you take a few of these together right so this is like calling parse age this is like calling parse",
    "start": "736230",
    "end": "742850"
  },
  {
    "text": "name and you take those together and you put well this whole thing is calling",
    "start": "742850",
    "end": "748350"
  },
  {
    "text": "that and then you you pass it a function it's very much like like well something",
    "start": "748350",
    "end": "753690"
  },
  {
    "text": "I've been shown you yet never mind so this is a function that will return if all those succeed it returns a success",
    "start": "753690",
    "end": "760579"
  },
  {
    "text": "full result of this function otherwise it gives you a non-empty list of all the errors",
    "start": "760579",
    "end": "765720"
  },
  {
    "text": "okay and what he says that he he his epiphany was that the problem with it is",
    "start": "765720",
    "end": "771790"
  },
  {
    "text": "that this type here is to it doesn't",
    "start": "771790",
    "end": "776980"
  },
  {
    "text": "really fit because this is only ever going to return one error either an ant or one error message but it doesn't say that and he thinks that's problematic",
    "start": "776980",
    "end": "785440"
  },
  {
    "text": "and it also there's a problem he mentions with requiring a semigroup in the wrong place but what he suggests",
    "start": "785440",
    "end": "792070"
  },
  {
    "text": "people do is use disjunction instead so",
    "start": "792070",
    "end": "797890"
  },
  {
    "text": "now he's rewritten his code and this how he does it now which is you use his Junction everywhere and you only so what",
    "start": "797890",
    "end": "804580"
  },
  {
    "text": "this means is if things go well you're going to get an imp back otherwise you're going to get a string which is what error message means and then down",
    "start": "804580",
    "end": "811000"
  },
  {
    "text": "here where you want to accumulate you actually convert all those disjunctions to validations before you pass it to to",
    "start": "811000",
    "end": "816880"
  },
  {
    "text": "the home alone operator right and then you call that home alone operator thing",
    "start": "816880",
    "end": "822400"
  },
  {
    "text": "and then you convert it back to a disjunction right so I think that's kind of her bow so he talked about how that's",
    "start": "822400",
    "end": "828550"
  },
  {
    "text": "kind of a roast and how he's meeting that he made a implicit to make that less verbose so that's the kind of thing",
    "start": "828550",
    "end": "835750"
  },
  {
    "text": "where I think it's like having two types adds some complexity I mean type class coherence add simplicity over here",
    "start": "835750",
    "end": "842680"
  },
  {
    "text": "because when I look at validation I know what its applicative does but then it had you know the complexity pops up somewhere else okay so the way that that",
    "start": "842680",
    "end": "850900"
  },
  {
    "text": "looks in galactic where we don't have two types is one thing I did was I added",
    "start": "850900",
    "end": "860650"
  },
  {
    "text": "a every type which is there's a non-empty list in scholastic cold chain",
    "start": "860650",
    "end": "865890"
  },
  {
    "text": "but there's a non empty vector called every which is really designed for a functional error accumulation and in",
    "start": "865890",
    "end": "871930"
  },
  {
    "text": "every is either a 1 or a mini so there's two subtypes of every one is like a sum",
    "start": "871930",
    "end": "877210"
  },
  {
    "text": "and so it just takes one thing so here's a one that takes the lone element and",
    "start": "877210",
    "end": "885220"
  },
  {
    "text": "many takes at least two right so here's the first element second mill and maybe more alright so that's and every is",
    "start": "885220",
    "end": "890680"
  },
  {
    "text": "either one or many and what that allows you to do is if you really want to write some method just for you know that will",
    "start": "890680",
    "end": "897670"
  },
  {
    "text": "be immediately accumulate able you say it's a string or one error message so you can't actually say in the type that this is an accumulator Bowl error",
    "start": "897670",
    "end": "904000"
  },
  {
    "text": "but there's only one of them right and now here the parse age is enter one",
    "start": "904000",
    "end": "909910"
  },
  {
    "text": "error message and then the poorest person method now returns a person or every error message because it may be",
    "start": "909910",
    "end": "915970"
  },
  {
    "text": "one or two in this case right but it's always every error message that happened",
    "start": "915970",
    "end": "921310"
  },
  {
    "text": "and then instead of using a for expression you use this thing called with good which is kind of like the",
    "start": "921310",
    "end": "926800"
  },
  {
    "text": "cinnabon operator but not as general right it's just a API that only takes",
    "start": "926800",
    "end": "931899"
  },
  {
    "text": "orders that's just for accumulating errors so the difference there i think",
    "start": "931899",
    "end": "936910"
  },
  {
    "text": "that that that's one of the differences where they they like generality and they want to use the same algorithm over and",
    "start": "936910",
    "end": "942940"
  },
  {
    "text": "over again which i think is good but if you're not familiar with FP following to",
    "start": "942940",
    "end": "949600"
  },
  {
    "text": "figure out what that little @ sign part does is you have to find it in scala Zeke code there's no documentation and",
    "start": "949600",
    "end": "954910"
  },
  {
    "text": "then if you figure out a set then doing something with the polygamy got to look that up there's a paper good paper on that but that uses Haskell so maybe you",
    "start": "954910",
    "end": "961149"
  },
  {
    "text": "should learn a little Haskell and then it's just if you don't know if P that's a big hurdle so for the people i'm",
    "start": "961149",
    "end": "966160"
  },
  {
    "text": "actually targeting i'd rather have them just call with good follow the with good method they can look at the",
    "start": "966160",
    "end": "971290"
  },
  {
    "text": "documentation and kind of figure out what to use so it's it's easier to",
    "start": "971290",
    "end": "977950"
  },
  {
    "text": "google and i think the downside is i had to do more work i have to write more code but i think that if it makes things",
    "start": "977950",
    "end": "984880"
  },
  {
    "text": "simpler that that's a way i can provide value so both you know there's",
    "start": "984880",
    "end": "990010"
  },
  {
    "text": "trade-offs right it's good to actually minimize code duplication but sometimes for example performance you may",
    "start": "990010",
    "end": "997029"
  },
  {
    "text": "reimplement an algorithm or in this case i think is just simpler for the people i'm trying to reach okay so that's a",
    "start": "997029",
    "end": "1004200"
  },
  {
    "text": "usability somebody close these guys and go to the next one no comment you can",
    "start": "1004200",
    "end": "1013560"
  },
  {
    "text": "make a comment I've had a time yes okay oh my goodness okay you're holding the end all right alrighty so essentially i",
    "start": "1013560",
    "end": "1025308"
  },
  {
    "text": "wanted to show I mean the thing I just talked about was was kind of the trade-offs of general versus specific",
    "start": "1025309",
    "end": "1032250"
  },
  {
    "text": "with good as a specific API for accumulating errors whereas the one that",
    "start": "1032250",
    "end": "1038188"
  },
  {
    "text": "spells he uses is general so you can use it for other things but here's another case where I think they tried to make",
    "start": "1038189",
    "end": "1044760"
  },
  {
    "text": "things general by using a monoid in the filter method so this is the filter method on validation and it takes a",
    "start": "1044760",
    "end": "1050940"
  },
  {
    "text": "predicate from the good type to boolean that says you know is it still cool and",
    "start": "1050940",
    "end": "1059040"
  },
  {
    "text": "am annoyed that they use the zero value if it is not cool and so if you get a failure back if it's if it's not a valid",
    "start": "1059040",
    "end": "1067100"
  },
  {
    "text": "and some whatever that function is testing so this junctions the same way",
    "start": "1067100",
    "end": "1072480"
  },
  {
    "text": "they also take a mono and they use it for the this means bad because it's a",
    "start": "1072480",
    "end": "1078240"
  },
  {
    "text": "left because that little arrows point of the left that means left left is the failure side so what I wanted to show is",
    "start": "1078240",
    "end": "1085650"
  },
  {
    "text": "it was an actual demo in the repple of what happens when you do that so I've",
    "start": "1085650",
    "end": "1093090"
  },
  {
    "text": "imported scalzi here and I just made an age method age field value that is is of",
    "start": "1093090",
    "end": "1100290"
  },
  {
    "text": "type validation string coming aunt so if it was successful it's an int and if",
    "start": "1100290",
    "end": "1106020"
  },
  {
    "text": "it's a failure its a string and I've made 42 42 is a valid in right so it's a",
    "start": "1106020",
    "end": "1113070"
  },
  {
    "text": "success so if i do this filter which may show up in a for expression i'm going to say is it i'm going to filter out",
    "start": "1113070",
    "end": "1119820"
  },
  {
    "text": "anything that's not a round number right divisible by 10 and what I get back is",
    "start": "1119820",
    "end": "1125400"
  },
  {
    "text": "since this is not I get back the monoid 04 string which is an empty string",
    "start": "1125400",
    "end": "1131100"
  },
  {
    "text": "alright so my failure message is an empty string and the good thing about that is like empty string failure",
    "start": "1131100",
    "end": "1138390"
  },
  {
    "text": "messages is when you when you print out the log file you save a lot of paper but it's a it can be frustrating right and I",
    "start": "1138390",
    "end": "1145470"
  },
  {
    "text": "just I don't quite understand why there's and I just sort of feel like this is too general and doesn't really",
    "start": "1145470",
    "end": "1151800"
  },
  {
    "text": "fit here so what what you get when you do the same kind of thing in scholastic",
    "start": "1151800",
    "end": "1157760"
  },
  {
    "text": "find my code here is dimage let's also also puts Galactic in",
    "start": "1157760",
    "end": "1165560"
  },
  {
    "text": "there basically when you do the same thing you get a compiler error on purpose because I don't know what you",
    "start": "1165560",
    "end": "1170750"
  },
  {
    "text": "want for your error message and so what I did differently which I wasn't sure was kosher actually talked to this guy",
    "start": "1170750",
    "end": "1178160"
  },
  {
    "text": "about at one time and he was non-committal but what I did was I said",
    "start": "1178160",
    "end": "1183320"
  },
  {
    "text": "ma if I can find it here ok the filter method on or doesn't take something that",
    "start": "1183320",
    "end": "1188570"
  },
  {
    "text": "results in boolean it retakes something the real to this thing called validation which is this is Galactic's validation",
    "start": "1188570",
    "end": "1193700"
  },
  {
    "text": "and it's different what it is is a option with attitude so this guy is",
    "start": "1193700",
    "end": "1202040"
  },
  {
    "text": "either a pass or a fail and a pass is kind of like none it's just an object it",
    "start": "1202040",
    "end": "1207980"
  },
  {
    "text": "means it was cool and it's this is kind of like the type of a test like when you run a test you don't really want to",
    "start": "1207980",
    "end": "1213410"
  },
  {
    "text": "value back you just wanna know it passed or not but if it failed you want to know why right so fail actually has an arrow",
    "start": "1213410",
    "end": "1220100"
  },
  {
    "text": "type in it so that's what I thought made sense for filter because if this thing",
    "start": "1220100",
    "end": "1226520"
  },
  {
    "text": "fails I need to know what air type to return and so if you what you'd have to",
    "start": "1226520",
    "end": "1231530"
  },
  {
    "text": "do once you gets compiler error is replace it with something like this whoops not like that I'm not very good",
    "start": "1231530",
    "end": "1240650"
  },
  {
    "text": "with computers okay so instead of passing a boiling expression I have to",
    "start": "1240650",
    "end": "1246920"
  },
  {
    "text": "pass an expression that actually returns a validation of in this case error message and so now what I get is 42 was",
    "start": "1246920",
    "end": "1253970"
  },
  {
    "text": "not a round number right so I think that's a I don't understand at least",
    "start": "1253970",
    "end": "1259460"
  },
  {
    "text": "there may be something I'm not getting but that seems like a pretty major usability issue in their approach using",
    "start": "1259460",
    "end": "1265610"
  },
  {
    "text": "it's like sticking mono it's where it doesn't really make sense ok so f p+ 00",
    "start": "1265610",
    "end": "1277190"
  },
  {
    "text": "p I want to actually go to back to the slide ok hey I'll take this off your",
    "start": "1277190",
    "end": "1284330"
  },
  {
    "text": "hands for a sec but then i'll meet you in a sec thank you very much yes",
    "start": "1284330",
    "end": "1290170"
  },
  {
    "text": "so one of the things that I've had discussions with 20 Morris about is is identifier name he thinks I'm too",
    "start": "1292109",
    "end": "1299590"
  },
  {
    "text": "focused on identifier names that I make more out of them than I should whereas I",
    "start": "1299590",
    "end": "1304599"
  },
  {
    "text": "think he and I he probably I'm probably too focused on it but I think he's not focused enough and what he talks about",
    "start": "1304599",
    "end": "1310239"
  },
  {
    "text": "which does make sense is that you want to actually look at the types not the names I do agree with that and but he",
    "start": "1310239",
    "end": "1317799"
  },
  {
    "text": "kind of talks about identifier naming as if it's a dynamic language and what I wanted to say was that you know in java",
    "start": "1317799",
    "end": "1325210"
  },
  {
    "text": "the java way is that that you're really not reasoning about identifier names what you're really thinking about is the",
    "start": "1325210",
    "end": "1330219"
  },
  {
    "text": "contracts of the types and the names just remind you what those contracts are so what I've drawn here is basically",
    "start": "1330219",
    "end": "1337359"
  },
  {
    "text": "what how I got into all this stuff this stuff was I want to do when I created or",
    "start": "1337359",
    "end": "1343690"
  },
  {
    "text": "I didn't have a weighing scale test to say or should pass the Monad laws and so I've been trying to come up with a synth",
    "start": "1343690",
    "end": "1349659"
  },
  {
    "text": "nice syntax for laws testing for Scala test and it means i needed a functor type class in ammonia tie plus an",
    "start": "1349659",
    "end": "1354909"
  },
  {
    "text": "applicative type class and whatnot and so there this is what it looks like",
    "start": "1354909",
    "end": "1360609"
  },
  {
    "text": "right now in our in our master in github and what our mo you know basically a",
    "start": "1360609",
    "end": "1367929"
  },
  {
    "text": "monad in this case is an object and an object has an interface in an implication and interface it consists of",
    "start": "1367929",
    "end": "1375639"
  },
  {
    "text": "these signatures that can be checked by the compiler and a contract that is got to be caught looked at or checked by",
    "start": "1375639",
    "end": "1381489"
  },
  {
    "text": "tests and that's always been the case what's different about monad and functor and applicative is that the interface is",
    "start": "1381489",
    "end": "1387609"
  },
  {
    "text": "just I'm sorry the contract is just expressed in terms of algebra like mathematical equations which is a good",
    "start": "1387609",
    "end": "1395440"
  },
  {
    "text": "thing because it's it's clear right it's also general so so anyway that's one of",
    "start": "1395440",
    "end": "1403929"
  },
  {
    "text": "things I wanted to say is that you know one of the things I've heard from from folks coming from FP is that they don't",
    "start": "1403929",
    "end": "1409719"
  },
  {
    "text": "really have a lot of need 400 that FP is composable and actually realizes the",
    "start": "1409719",
    "end": "1416619"
  },
  {
    "text": "promise that oh gay but never did right and what I wanted to point out is that",
    "start": "1416619",
    "end": "1422680"
  },
  {
    "text": "it is composable FP but that there's nothing unobjectionable this that what makes it object-oriented programming",
    "start": "1422680",
    "end": "1428950"
  },
  {
    "text": "composable is bring efp to it and that's what Scala is about so so anyway that's",
    "start": "1428950",
    "end": "1438300"
  },
  {
    "text": "that's what I wanted to say about that and I think it's you know it's I think",
    "start": "1438300",
    "end": "1449680"
  },
  {
    "text": "ask Allah is is an object-oriented reform movement object owner programming was historically founded in objects have",
    "start": "1449680",
    "end": "1457240"
  },
  {
    "text": "state in a capsule eight state and what Stella says is well you can make them immutable and actually get the benefits",
    "start": "1457240",
    "end": "1463390"
  },
  {
    "text": "of functional programming so oo does need FP and FP probably doesn't need oo",
    "start": "1463390",
    "end": "1470370"
  },
  {
    "text": "i would i would say but what Martin oyes",
    "start": "1470370",
    "end": "1476020"
  },
  {
    "text": "points out is if you're going to make a pure FP language functional programming language you need to have some ways",
    "start": "1476020",
    "end": "1481810"
  },
  {
    "text": "you're going to scale up you need to have some way to put your functions into modules so that there isn't one global",
    "start": "1481810",
    "end": "1488350"
  },
  {
    "text": "namespace and objects provide a way to do that so that's sort of what o.o does is one thing it can bring to FP okay so",
    "start": "1488350",
    "end": "1498280"
  },
  {
    "text": "what you know I I did want to say lat",
    "start": "1498280",
    "end": "1504220"
  },
  {
    "text": "yeah go ahead I do want to say last was this what are these things good for if you're really like applying them 200",
    "start": "1504220",
    "end": "1511420"
  },
  {
    "text": "like moneda and applicative in functor i mean one thing they're good for is testing because i think it's very useful",
    "start": "1511420",
    "end": "1516430"
  },
  {
    "text": "to say this should pass these laws and that you get a nice test and it's very useful to say these are you know express",
    "start": "1516430",
    "end": "1522280"
  },
  {
    "text": "your contract saurabh generated contracts in terms of algebra so that's where I'm starting and there's other",
    "start": "1522280",
    "end": "1530350"
  },
  {
    "text": "uses certainly but I haven't really got there yet okay so the last thing I",
    "start": "1530350",
    "end": "1535390"
  },
  {
    "text": "wanted to do is look at the standard library stuff and is can somebody tell me how much time I have left just oh",
    "start": "1535390",
    "end": "1541200"
  },
  {
    "text": "there it is that's how much I've left awesome so one of the things that I",
    "start": "1541200",
    "end": "1549580"
  },
  {
    "text": "mentioned early on was that I I wanted to make things fit",
    "start": "1549580",
    "end": "1556179"
  },
  {
    "text": "the standard library and I do that just cuz i think it's simpler for users so one of the differences is that i put the",
    "start": "1556179",
    "end": "1563559"
  },
  {
    "text": "i had the audacity to put the good value on the left in the bad value on the",
    "start": "1563559",
    "end": "1569559"
  },
  {
    "text": "right which was like everybody thought that was strange and I the reason I did that is because it it fit better be I",
    "start": "1569559",
    "end": "1579279"
  },
  {
    "text": "felt it fit better the standard library",
    "start": "1579279",
    "end": "1585509"
  },
  {
    "text": "that first transform method is try and that takes two functions the first",
    "start": "1586110",
    "end": "1591759"
  },
  {
    "text": "functions it takes is the successful one the success side and the second function",
    "start": "1591759",
    "end": "1597580"
  },
  {
    "text": "it takes is the failure side the other track the next transfer method is from",
    "start": "1597580",
    "end": "1602970"
  },
  {
    "text": "future and it its first function it takes is for the success if it's a seeds",
    "start": "1602970",
    "end": "1609369"
  },
  {
    "text": "and the second one it takes is for the failure and the third one is or the first function it takes is success so",
    "start": "1609369",
    "end": "1616149"
  },
  {
    "text": "it's on the left and the second one it takes is the failure that's on the right the other one is called by map from",
    "start": "1616149",
    "end": "1621879"
  },
  {
    "text": "spell Ozzy and the it does the opposite it takes the error first and then the success second and it's so or is",
    "start": "1621879",
    "end": "1630039"
  },
  {
    "text": "consistent with the standard library disjunction and validation are",
    "start": "1630039",
    "end": "1635289"
  },
  {
    "text": "consistent with Haskell and there's nothing wrong with that Haskell has a",
    "start": "1635289",
    "end": "1640389"
  },
  {
    "text": "very good reason to do it that way and it's because they partially apply types one at a time they're all curried so",
    "start": "1640389",
    "end": "1647379"
  },
  {
    "text": "there's a really good reason to do that in Haskell and there's no problem with doing that in Scala that's what you want to do but Scala actually doesn't carry",
    "start": "1647379",
    "end": "1655659"
  },
  {
    "text": "types so there's no advantage of putting it on one side or the other so what I did is I thought it actually read better",
    "start": "1655659",
    "end": "1660909"
  },
  {
    "text": "to say you know put the happy path first int or something goes wrong here message and I thought that fit better with other",
    "start": "1660909",
    "end": "1667720"
  },
  {
    "text": "examples in the standard library so ok",
    "start": "1667720",
    "end": "1673299"
  },
  {
    "text": "so that's that and another example of what they did was oh these are the old",
    "start": "1673299",
    "end": "1681580"
  },
  {
    "text": "ones let me get rid of guys I less safe seeks and okay they",
    "start": "1681580",
    "end": "1690900"
  },
  {
    "text": "have a couple things that are like replacements for things in a standard library like they have one called maybe where the which is a replacement for",
    "start": "1690900",
    "end": "1698100"
  },
  {
    "text": "option that doesn't have any hits with a big fan in the middle there it doesn't have a get method so you can't shoot",
    "start": "1698100",
    "end": "1704880"
  },
  {
    "text": "yourself in the foot that way and it was I think really worth putting in because",
    "start": "1704880",
    "end": "1710490"
  },
  {
    "text": "of the the the message when the person submit the pr was this is crazy but",
    "start": "1710490",
    "end": "1715740"
  },
  {
    "text": "option has get so call me maybe so I think that was pretty funny there's also",
    "start": "1715740",
    "end": "1721860"
  },
  {
    "text": "an I list which means invariant list and the point of that is to get a type-safe contains because scholars list and all",
    "start": "1721860",
    "end": "1729600"
  },
  {
    "text": "of it seeks well most of it seeks are covariant and if you try to say that",
    "start": "1729600",
    "end": "1736260"
  },
  {
    "text": "contains just takes type a it won't compile because it'll say that there's a",
    "start": "1736260",
    "end": "1741510"
  },
  {
    "text": "covariant position a co viet type parameter and contravariant position and the reason that there is so because",
    "start": "1741510",
    "end": "1747570"
  },
  {
    "text": "someone could write a contains method if you'd allow that if quite allow that you could write a contains method that blows up at runtime right so it's not sound",
    "start": "1747570",
    "end": "1754850"
  },
  {
    "text": "most of these contains methods aren't Annette way but it could happen right so",
    "start": "1754850",
    "end": "1760500"
  },
  {
    "text": "what I try to do was um well Paul Phillips is probably here somewhere he",
    "start": "1760500",
    "end": "1766799"
  },
  {
    "text": "also had Paul Phillips had also posted",
    "start": "1766799",
    "end": "1772799"
  },
  {
    "text": "one of these on exists at one point and I showed an example where you could implicitly convert away the covariance",
    "start": "1772799",
    "end": "1779909"
  },
  {
    "text": "and actually get a type-safe contains and Han Lars Lars at that time was still in the scholars the world and he they",
    "start": "1779909",
    "end": "1786570"
  },
  {
    "text": "both informed me that I was relying on a implementation detail of type prints prints and and I went back and forth",
    "start": "1786570",
    "end": "1794130"
  },
  {
    "text": "with Paul in a while he said it probably won't change because there's bugs that actually rely on it being fixed he said",
    "start": "1794130",
    "end": "1799559"
  },
  {
    "text": "but you know it's probably won't change but I didn't quite like that but I also wanted you know I I trust Paul but I",
    "start": "1799559",
    "end": "1805770"
  },
  {
    "text": "wanted to verify so I tried to find a way to prove him wrong and so what I",
    "start": "1805770",
    "end": "1812010"
  },
  {
    "text": "came up with was I actually came up with a way you do this without an implicit conversion",
    "start": "1812010",
    "end": "1818120"
  },
  {
    "text": "with an implicit parameter and so this this type safe contains method on every was actually every is covariant and it's",
    "start": "1818120",
    "end": "1826320"
  },
  {
    "text": "actually on the type it's not an implicit conversion and then I made there is i added a safe there was an",
    "start": "1826320",
    "end": "1832410"
  },
  {
    "text": "implicit conversion that would add safe contains two lists and using the same technique but i looked at that and there",
    "start": "1832410",
    "end": "1839790"
  },
  {
    "text": "was a contra minus sign in the type i was just left in there because i copied it from another type class and I thought",
    "start": "1839790",
    "end": "1845640"
  },
  {
    "text": "well actually if there's a minus sign there that means i could put any there i think so i tried to take the minus sign",
    "start": "1845640",
    "end": "1851190"
  },
  {
    "text": "out and i got a compiler the usual contravariant position yeah so it's like",
    "start": "1851190",
    "end": "1856290"
  },
  {
    "text": "oh oh so i actually typed in the type class explicitly with any and it",
    "start": "1856290",
    "end": "1861630"
  },
  {
    "text": "compiled and so and then I knew I was still relying on an implementation detail of type inference and so I don't",
    "start": "1861630",
    "end": "1870060"
  },
  {
    "text": "have a mathematical proof that Paul was right but I have a gut feeling he was that there's no way to do it so then and",
    "start": "1870060",
    "end": "1875910"
  },
  {
    "text": "the other thing is it's like who wants to write safe contains what people want to write as contains so I got to thinking that it really needs to be",
    "start": "1875910",
    "end": "1881630"
  },
  {
    "text": "either you need an invariant list or you need static analysis something does",
    "start": "1881630",
    "end": "1886650"
  },
  {
    "text": "outside the type system and then I thought at first maybe we should put that in the compiler that was my first",
    "start": "1886650",
    "end": "1891690"
  },
  {
    "text": "suggestion but having done all the Equality stuff that I kind of was aware of a lot of it's a lot of complexities",
    "start": "1891690",
    "end": "1899490"
  },
  {
    "text": "it's not as simple as you would hope so then I decided right one so that's what I actually released this morning at two",
    "start": "1899490",
    "end": "1905100"
  },
  {
    "text": "in the morning it's called super safe it's a plug-in and if you say list 1 2 3",
    "start": "1905100",
    "end": "1910920"
  },
  {
    "text": "is ask allah's list that contains one you get a tiger so i think that's what i",
    "start": "1910920",
    "end": "1920790"
  },
  {
    "text": "mean if i were designing a language and a library from greenfield design i would",
    "start": "1920790",
    "end": "1926340"
  },
  {
    "text": "try to make that a type error in the secretory I said typer it's not a type error it's just a compiler error I would",
    "start": "1926340",
    "end": "1933000"
  },
  {
    "text": "try to make that a type error but since this is the list that we have then I",
    "start": "1933000",
    "end": "1940940"
  },
  {
    "text": "think you know this is a good way to do it the other thing this guy does is",
    "start": "1940940",
    "end": "1946230"
  },
  {
    "text": "for example it'll say catch things like comparing an option of string with string for equality so these are things",
    "start": "1946230",
    "end": "1954000"
  },
  {
    "text": "that I you know I think are at some point you need to use static analysis to find problems okay so all right the last",
    "start": "1954000",
    "end": "1966900"
  },
  {
    "text": "second last thing I want to actually do I'm going to grab something on my bag i",
    "start": "1966900",
    "end": "1972600"
  },
  {
    "text": "forgot to get ready is up these guys Andrew Andrew and nirman wrote a",
    "start": "1972600",
    "end": "1979650"
  },
  {
    "text": "puzzlers book and it's a really awesome book it just came out a month ago scala",
    "start": "1979650",
    "end": "1987240"
  },
  {
    "text": "puzzlers looks like this so we're going to give away six free copies of people who can actually put together these",
    "start": "1987240",
    "end": "1993210"
  },
  {
    "text": "little cubes and I'm going to talk them out in the audience like little flippy cards and we're going to do is want to sit near the near the coffee stand at",
    "start": "1993210",
    "end": "2000559"
  },
  {
    "text": "luncheon at this afternoon break and anybody who wants to buy it sits a half off its twenty bucks cash only and whoa",
    "start": "2000559",
    "end": "2007790"
  },
  {
    "text": "oh I got shred it gets on my way in the back this is fun I'm gonna go wear that",
    "start": "2007790",
    "end": "2014299"
  },
  {
    "text": "with that side oh yeah sorry this is fun",
    "start": "2014299",
    "end": "2020840"
  },
  {
    "text": "I see if I hit the back row oh no sorry I'd hit him in the face I'll trade i did",
    "start": "2020840",
    "end": "2027169"
  },
  {
    "text": "in the face all right way there in the corner oh sorry ok ok ok so that's that",
    "start": "2027169",
    "end": "2035860"
  },
  {
    "text": "ok and the last thing I can leave you with is kind of this this idea of gardening where you are I live in",
    "start": "2036100",
    "end": "2044210"
  },
  {
    "text": "California and where I live it doesn't rain for eight months out of the year even when in a normal year and I have a",
    "start": "2044210",
    "end": "2053570"
  },
  {
    "text": "law or had a lawn and I pulled it up because lawns take a lot of water and I planned a native plants that are adapted",
    "start": "2053570",
    "end": "2060618"
  },
  {
    "text": "to drought right so they don't take as much water and it we like it a lot better all my neighbors have lawns and",
    "start": "2060619",
    "end": "2067158"
  },
  {
    "text": "they're they're really nice i like them but i'm doing something different which is i'm trying to make something fit so",
    "start": "2067159",
    "end": "2073669"
  },
  {
    "text": "i'm not saying that ooo is better than FB or any that kind of stuff just saying where we are is on an",
    "start": "2073669",
    "end": "2080849"
  },
  {
    "text": "object-oriented platforming the JVM is at heart an object or a platform in an object or industry and so the way to",
    "start": "2080849",
    "end": "2087929"
  },
  {
    "text": "sort of make that better is to bring FP in and merge it with oo in a way that makes sense to those folks so that's",
    "start": "2087929",
    "end": "2093929"
  },
  {
    "text": "what I'm trying to do so that's all I have and I have 15 minutes for questions",
    "start": "2093929",
    "end": "2099230"
  },
  {
    "text": "thank you thank you",
    "start": "2099230",
    "end": "2103700"
  },
  {
    "text": "yes you're welcome yeah future gonna",
    "start": "2107900",
    "end": "2117630"
  },
  {
    "text": "work yeah I think the question is about",
    "start": "2117630",
    "end": "2122900"
  },
  {
    "text": "is it a future a future a future or a future of ora ora boar which okay I",
    "start": "2122900",
    "end": "2130530"
  },
  {
    "text": "don't know but can you come up afterwards and I won't understand the the use case but one of the things that",
    "start": "2130530",
    "end": "2135930"
  },
  {
    "text": "I think like another thing that the scalzi folks didn't like was try and I",
    "start": "2135930",
    "end": "2141720"
  },
  {
    "text": "think try is useful for you need it because anything could blow up with an exception so you need a type a disjoint",
    "start": "2141720",
    "end": "2148710"
  },
  {
    "text": "union where the bad type is an exception because a throwable because it just could happen if you're going to do something a sink you really need that to",
    "start": "2148710",
    "end": "2155940"
  },
  {
    "text": "come back so if you also are calling something that has an orange side of it",
    "start": "2155940",
    "end": "2161010"
  },
  {
    "text": "where do you put it you really have three states now and so one other thing I thought which was to make an extractor",
    "start": "2161010",
    "end": "2168720"
  },
  {
    "text": "so the instead of saying success good success bad which sounds like it's like a successful bad is weird you'd have the",
    "start": "2168720",
    "end": "2175470"
  },
  {
    "text": "good the bad and then the ugly would be the exception but I think that's too cute but there's something needed I",
    "start": "2175470",
    "end": "2183570"
  },
  {
    "text": "think for handling three states and I don't know exactly what it is yet so you'll come up after and we can talk",
    "start": "2183570",
    "end": "2189570"
  },
  {
    "text": "about it yes Daniel item maybe it is i'll have to look it might be but i'll",
    "start": "2189570",
    "end": "2198540"
  },
  {
    "text": "tell you what it would be I know what I know what an answered that I just thought of which is it would work in a",
    "start": "2198540",
    "end": "2203700"
  },
  {
    "text": "for expression in other words if you make a filter in a for expression then it actually works as long as your your",
    "start": "2203700",
    "end": "2210030"
  },
  {
    "text": "filter your if has something that takes a validation it just rewrites it it",
    "start": "2210030",
    "end": "2215790"
  },
  {
    "text": "doesn't care if it's a predicate or not so I was trying I mean that's another way to try to make it fit was like make",
    "start": "2215790",
    "end": "2221700"
  },
  {
    "text": "it work in four expressions and that kind of thing but but I had actually when I was doing the we were doing the",
    "start": "2221700",
    "end": "2227700"
  },
  {
    "text": "applicative stuff I had one of my wif goods I didn't realize it until we were doing the book of stuff but it's the",
    "start": "2227700",
    "end": "2233190"
  },
  {
    "text": "same as map so i should really deprecated there's a with good with one thing it is actually map so that it's i",
    "start": "2233190",
    "end": "2238500"
  },
  {
    "text": "need to be deprecated that one remove it so so anybody else yes that's",
    "start": "2238500",
    "end": "2251130"
  },
  {
    "text": "a good okay that's a great comment so that was one thing I wasn't sure about either can you I'm sorry can you uh yes",
    "start": "2251130",
    "end": "2259520"
  },
  {
    "text": "what he said was that the the good type",
    "start": "2259520",
    "end": "2264770"
  },
  {
    "text": "like hairs or and if I go too good it says true for bad also okay so or hikes",
    "start": "2264770",
    "end": "2271170"
  },
  {
    "text": "a grb Great Britain yeah yeah good boy",
    "start": "2271170",
    "end": "2276590"
  },
  {
    "text": "be where's the good one so the good one just takes a G but it has both types",
    "start": "2276590",
    "end": "2281850"
  },
  {
    "text": "right and it's like either either does that to the other way I could have done",
    "start": "2281850",
    "end": "2287700"
  },
  {
    "text": "that is just say takes one type and extend or with nothing because the",
    "start": "2287700",
    "end": "2293340"
  },
  {
    "text": "covariant that would have worked and actually the type system was I think telling me that because I had to do a",
    "start": "2293340",
    "end": "2300420"
  },
  {
    "text": "cast and if you look in the code there's one place where I cast oh oh thanks there's one place where I had to cast",
    "start": "2300420",
    "end": "2307230"
  },
  {
    "text": "but i think the type system was telling me I should have done that but I wasn't sure because you'd lose the type if you",
    "start": "2307230",
    "end": "2312450"
  },
  {
    "text": "ever go down and want to go back up you've lost it so I what I did is I did what either did but that maybe I'm not",
    "start": "2312450",
    "end": "2318660"
  },
  {
    "text": "sure that's the right way to do it but that's that's what I did I did make some syntax to make it easy to deal with I",
    "start": "2318660",
    "end": "2323760"
  },
  {
    "text": "tried to but I'd be interesting to if people have comments on that afterwards",
    "start": "2323760",
    "end": "2329010"
  },
  {
    "text": "to ideas about why it should be one way or the other anybody else yes way back",
    "start": "2329010",
    "end": "2335400"
  },
  {
    "text": "in the guy hi okay you said and since",
    "start": "2335400",
    "end": "2344340"
  },
  {
    "text": "college is a reform that's my opinion I said that yeah yeah yeahs anyone said you you move",
    "start": "2344340",
    "end": "2357210"
  },
  {
    "text": "mutability from oh no I didn't mean to",
    "start": "2357210",
    "end": "2365260"
  },
  {
    "text": "apply that now I think functional 0 is still 0 0 and it doesn't need mutable",
    "start": "2365260",
    "end": "2370750"
  },
  {
    "text": "state what i was saying what i said was that if you remove 00 entirely from FB",
    "start": "2370750",
    "end": "2376300"
  },
  {
    "text": "you have FP and FP doesn't really i mean skull is not an FP reform movement what",
    "start": "2376300",
    "end": "2383590"
  },
  {
    "text": "needed help was 00 by bringing a functional and that's that's what i meant no i don't so not all module",
    "start": "2383590",
    "end": "2401980"
  },
  {
    "text": "systems are object oriented so wut wut oo provides to FP in Scala is that's the",
    "start": "2401980",
    "end": "2409630"
  },
  {
    "text": "module system so that there's one system but what Martin likes to say is there's one system in the small that also is you",
    "start": "2409630",
    "end": "2416590"
  },
  {
    "text": "can be used in the large so it can be used for the module system but ofp languages can have a different module",
    "start": "2416590",
    "end": "2422470"
  },
  {
    "text": "system that isn't object-oriented it just in Scala it happens to be that is that answer your question okay oh okay",
    "start": "2422470",
    "end": "2439740"
  },
  {
    "text": "all right anybody else sure did yeah why",
    "start": "2440220",
    "end": "2448480"
  },
  {
    "text": "pick a civil or just be multiple I'm just confused sometimes oh I don't know I think this one is is",
    "start": "2448480",
    "end": "2456570"
  },
  {
    "text": "looks like if you look into mathematics that looks a lot like the the mathematical meaning so I just want to",
    "start": "2456570",
    "end": "2463830"
  },
  {
    "text": "this one I think is is nice I don't like the the that one I find cuz i'm not i",
    "start": "2463830",
    "end": "2468960"
  },
  {
    "text": "don't think I'm Dyslexic but when you see a bunch of those i have they kind of move and i have to really think okay",
    "start": "2468960",
    "end": "2476490"
  },
  {
    "text": "that one's pointing to left okay that's a lift left you know I have to do too many mental hops yeah but but yeah I",
    "start": "2476490",
    "end": "2482010"
  },
  {
    "text": "mean that itself i think was not bad so I actually think the disjoint Union",
    "start": "2482010",
    "end": "2487290"
  },
  {
    "text": "symbol was they designed that after they watched the money does hi Alec see ya",
    "start": "2487290",
    "end": "2497030"
  },
  {
    "text": "the future of no no a that's the",
    "start": "2497030",
    "end": "2503040"
  },
  {
    "text": "question is what is the future of scale Arctic so I've been trying not to but what's interesting is that a lot of all",
    "start": "2503040",
    "end": "2508530"
  },
  {
    "text": "the stuff in squats it came out of testing and things that from scholars as people ask for that they also wanted their production code so there's a lot",
    "start": "2508530",
    "end": "2515190"
  },
  {
    "text": "there's a quality there that people wanted to do a cust custom equality for their testing but they also needed the",
    "start": "2515190",
    "end": "2521430"
  },
  {
    "text": "production code in very specific problems they were having that just wasting their time having to catch those",
    "start": "2521430",
    "end": "2527760"
  },
  {
    "text": "things at runtime and that bet overlaps with equal it was something else Oh or",
    "start": "2527760",
    "end": "2534000"
  },
  {
    "text": "so or came from someone asked for like Scala tests tests a short circuit",
    "start": "2534000",
    "end": "2539390"
  },
  {
    "text": "because usually you want to when you find a bug you actually want to quit and bail out otherwise you get a bunch of",
    "start": "2539390",
    "end": "2544560"
  },
  {
    "text": "failures that don't make sense or aren't don't add any information and it may take longer but sometimes people wanted",
    "start": "2544560",
    "end": "2551610"
  },
  {
    "text": "all the errors they want to accumulate all the assertion failures in a test so i made a type for that which was",
    "start": "2551610",
    "end": "2556830"
  },
  {
    "text": "imperative which I thought fit you know once you kind of go down the exception throwing things stay kind of imperative",
    "start": "2556830",
    "end": "2563100"
  },
  {
    "text": "but I wanted to see how do you do that functionally and that's when I first came to scholars ian was looking at their their stuff and",
    "start": "2563100",
    "end": "2569310"
  },
  {
    "text": "them why they do this way that way and and so they kind of came from from testing also and you know pass/fail is",
    "start": "2569310",
    "end": "2576210"
  },
  {
    "text": "very much the type of a test in your production code so the Monad an",
    "start": "2576210",
    "end": "2581460"
  },
  {
    "text": "applicative and functor comes from when i wrote or i wanted to actually test that aspect of it and i thought that was",
    "start": "2581460",
    "end": "2587610"
  },
  {
    "text": "important i really did think that the scholars e folks were right about that way of testing so i thought it should",
    "start": "2587610",
    "end": "2595080"
  },
  {
    "text": "you know be in scala test at some kind of syntax and I just needed type classes but there are no instances it's just for",
    "start": "2595080",
    "end": "2600720"
  },
  {
    "text": "testing currently so that's where I'm starting and actually there's a bunch of",
    "start": "2600720",
    "end": "2605910"
  },
  {
    "text": "these type West's is popping up in various places and and you know there's",
    "start": "2605910",
    "end": "2611970"
  },
  {
    "text": "not all focused on the same thing this one's focused on testing so yes four",
    "start": "2611970",
    "end": "2619170"
  },
  {
    "text": "minutes five minutes yeah um that was another difference I I sort of had with",
    "start": "2619170",
    "end": "2625650"
  },
  {
    "text": "Tony I think he didn't like either even though he wrote it he felt he was you",
    "start": "2625650",
    "end": "2630840"
  },
  {
    "text": "know people guided him in a bad direction and what I feel is that it is not good for functional air handling I",
    "start": "2630840",
    "end": "2637710"
  },
  {
    "text": "agree with him on that but that it is good for when you're not doing air handling and you need a disjoint union it actually happens sometimes you have",
    "start": "2637710",
    "end": "2643950"
  },
  {
    "text": "two things are equally valid like you need to pass in a file handle somehow",
    "start": "2643950",
    "end": "2649380"
  },
  {
    "text": "and you either have a string filename or actual java.io.file doesn't matter which one you pass it's not like one is good",
    "start": "2649380",
    "end": "2655350"
  },
  {
    "text": "and what is bad right that's what either is good for SOTA peak and and so i use",
    "start": "2655350",
    "end": "2660510"
  },
  {
    "text": "it for that so i use or and either together whereas what I think those guys well I don't know that I'm not sure but",
    "start": "2660510",
    "end": "2666360"
  },
  {
    "text": "I get the impression I got was that that either was bad and you should use disjunction actually said that in a",
    "start": "2666360",
    "end": "2671790"
  },
  {
    "text": "tweet so I think that's what he thinks but uh but I like either I have a",
    "start": "2671790",
    "end": "2677970"
  },
  {
    "text": "question yes so given that this uses or as a type operator yes recommend type",
    "start": "2677970",
    "end": "2684330"
  },
  {
    "text": "operators to other API developers you mean like the thing I've put in the middle yeah I guess so if it makes sense",
    "start": "2684330",
    "end": "2694440"
  },
  {
    "text": "it's just not sure how often it would make sense uh have you run into any like",
    "start": "2694440",
    "end": "2700050"
  },
  {
    "text": "weirdness tax I guess is what I'm asking okay the only thing that I would be nice is that",
    "start": "2700050",
    "end": "2705360"
  },
  {
    "text": "when you when you make an or in the repple and it shows the type or a compiler it doesn't in fix it so it",
    "start": "2705360",
    "end": "2711960"
  },
  {
    "text": "might be nice to be able to annotate a type saying please show this in infix I think that's already been requested so",
    "start": "2711960",
    "end": "2717300"
  },
  {
    "text": "it's same thing with disjunction it shows it the old-fashioned way with square brackets and all that it'd be nice if that just always showed up in",
    "start": "2717300",
    "end": "2723990"
  },
  {
    "text": "fix but otherwise know that it really works the same so so okay all right I",
    "start": "2723990",
    "end": "2732960"
  },
  {
    "text": "think that's it thank you very much for coming war oh yeah thank",
    "start": "2732960",
    "end": "2742700"
  }
]