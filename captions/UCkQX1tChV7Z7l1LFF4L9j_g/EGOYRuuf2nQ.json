[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "[Music]",
    "start": "680",
    "end": "8549"
  },
  {
    "text": "hello i'm chris richardson welcome to my talk on minimizing design time coupling",
    "start": "15040",
    "end": "20560"
  },
  {
    "start": "16000",
    "end": "16000"
  },
  {
    "text": "in a microservice architecture in this talk i'm going to answer three questions",
    "start": "20560",
    "end": "26400"
  },
  {
    "text": "what is design time coupling what problems does it create and how do we",
    "start": "26400",
    "end": "32000"
  },
  {
    "text": "design loosely coupled services but first a little bit about me",
    "start": "32000",
    "end": "37360"
  },
  {
    "text": "i've done a few things over the years most notably i wrote the book pojo's in action",
    "start": "37360",
    "end": "42640"
  },
  {
    "text": "i created the original cloud foundry which was a pass for deploying java applications on aws",
    "start": "42640",
    "end": "49920"
  },
  {
    "text": "these days i focus on the microservice architecture i wrote the book microservices patterns",
    "start": "49920",
    "end": "56719"
  },
  {
    "text": "and i help organizations around the world adopt and use microservices successfully",
    "start": "56719",
    "end": "63440"
  },
  {
    "text": "through consulting and training and here are some discounts for my book and my online training",
    "start": "63440",
    "end": "70400"
  },
  {
    "text": "let's now talk about design time coupling here's the agenda for my talk",
    "start": "70400",
    "end": "76320"
  },
  {
    "text": "first i'm going to describe the essential characteristics of the microservice architecture including",
    "start": "76320",
    "end": "82799"
  },
  {
    "text": "loose design time coupling after that i'll describe some of the techniques for",
    "start": "82799",
    "end": "88720"
  },
  {
    "text": "minimizing design time coupling and then finally i'm going to use the problem of",
    "start": "88720",
    "end": "95280"
  },
  {
    "text": "ordering takeout burritos to illustrate potential coupling problems and then",
    "start": "95280",
    "end": "101200"
  },
  {
    "text": "show how you could eliminate them so let's get started",
    "start": "101200",
    "end": "106960"
  },
  {
    "start": "107000",
    "end": "107000"
  },
  {
    "text": "the microservice architecture is an architectural style that structures an",
    "start": "107119",
    "end": "112320"
  },
  {
    "text": "application as a set of services the services are loosely coupled more on",
    "start": "112320",
    "end": "117840"
  },
  {
    "text": "that later each service is owned by a small team each service is independently deployable",
    "start": "117840",
    "end": "125680"
  },
  {
    "text": "and the lead time for each service which is the time from commit to deploy must",
    "start": "125680",
    "end": "131200"
  },
  {
    "text": "be under 15 minutes so why use microservices",
    "start": "131200",
    "end": "136400"
  },
  {
    "start": "134000",
    "end": "134000"
  },
  {
    "text": "the adoption of microservices is driven by two important trends the first trend is as",
    "start": "136400",
    "end": "143680"
  },
  {
    "text": "mark andreessen said back in 2011 software is eating the world",
    "start": "143680",
    "end": "150480"
  },
  {
    "text": "what this phrase means is that a businesses products and services are increasingly powered by software and it",
    "start": "150480",
    "end": "157760"
  },
  {
    "text": "doesn't matter whether your company is a financial services company an airline or",
    "start": "157760",
    "end": "163040"
  },
  {
    "text": "a mining company software is central to your business the second trend is that the world is",
    "start": "163040",
    "end": "170160"
  },
  {
    "text": "becoming increasingly volatile uncertain complex and ambiguous",
    "start": "170160",
    "end": "177760"
  },
  {
    "text": "sadly there's no better example of that than covid which has been the ultimate disrupter",
    "start": "177760",
    "end": "184080"
  },
  {
    "text": "because of the dynamic and unpredictable nature of the world businesses need to be nimble they need",
    "start": "184080",
    "end": "191040"
  },
  {
    "text": "to be agile they need to innovate faster and because software is powering those",
    "start": "191040",
    "end": "197680"
  },
  {
    "text": "businesses it must deliver software much more rapidly frequently and reliably",
    "start": "197680",
    "end": "205840"
  },
  {
    "text": "to deliver software rapidly frequently and reliably you need what i call the success triangle you need a combination",
    "start": "205840",
    "end": "213519"
  },
  {
    "text": "of three things process organization and architecture",
    "start": "213519",
    "end": "218560"
  },
  {
    "text": "the process which is devops which embraces concepts like continuous delivery and deployment",
    "start": "218560",
    "end": "225360"
  },
  {
    "text": "and delivers a stream of small changes frequently to production",
    "start": "225360",
    "end": "231120"
  },
  {
    "text": "you must structure your organization as a network of autonomous empowered",
    "start": "231120",
    "end": "237040"
  },
  {
    "text": "loosely coupled long-lived product teams you need an architecture that is loosely",
    "start": "237040",
    "end": "244000"
  },
  {
    "text": "coupled and modular once again loose coupling is playing a role if you have a",
    "start": "244000",
    "end": "249599"
  },
  {
    "text": "large team developing a large complex application you must typically use",
    "start": "249599",
    "end": "255280"
  },
  {
    "text": "microservices that's because the microservice architecture gives you the testability",
    "start": "255280",
    "end": "261120"
  },
  {
    "text": "and deployability that you need in order to do devops and it gives you the loose",
    "start": "261120",
    "end": "266639"
  },
  {
    "text": "coupling that enables your teams to be loosely coupled so i've talked a lot",
    "start": "266639",
    "end": "271919"
  },
  {
    "start": "271000",
    "end": "271000"
  },
  {
    "text": "about loose coupling but what is that exactly operations that span services",
    "start": "271919",
    "end": "278639"
  },
  {
    "text": "create coupling between them coupling between services is the degree",
    "start": "278639",
    "end": "283840"
  },
  {
    "text": "of connectedness for example in the customer and order example that i use throughout this talk",
    "start": "283840",
    "end": "290639"
  },
  {
    "text": "the create order operation reserves credit in the customer service and",
    "start": "290639",
    "end": "295919"
  },
  {
    "text": "creates an order in the order service as a result there is a degree of coupling",
    "start": "295919",
    "end": "301520"
  },
  {
    "text": "between these two services there are two main types of coupling the",
    "start": "301520",
    "end": "306960"
  },
  {
    "start": "304000",
    "end": "304000"
  },
  {
    "text": "first type of coupling is runtime coupling runtime coupling is the degree",
    "start": "306960",
    "end": "313039"
  },
  {
    "text": "to which the availability of one service is impacted by the availability of",
    "start": "313039",
    "end": "319039"
  },
  {
    "text": "another service let's imagine that the order service handles a create order request by making",
    "start": "319039",
    "end": "326240"
  },
  {
    "text": "a put request to the customer service to reserve credit while this seems simple it's actually an",
    "start": "326240",
    "end": "333280"
  },
  {
    "text": "example of tight runtime coupling the order service cannot respond to the post",
    "start": "333280",
    "end": "339600"
  },
  {
    "text": "request until it receives a response from the customer service the availability of the create order",
    "start": "339600",
    "end": "347360"
  },
  {
    "text": "endpoint is the product of the availability of both services which is",
    "start": "347360",
    "end": "352479"
  },
  {
    "text": "less than the availability of a single service this is a simple example of a common",
    "start": "352479",
    "end": "358880"
  },
  {
    "text": "anti-patent in a distributed application a good way to eliminate tight runtime",
    "start": "358880",
    "end": "365280"
  },
  {
    "text": "coupling is to use asynchronous messaging mechanisms such as the saga pattern the order service could for",
    "start": "365280",
    "end": "372240"
  },
  {
    "text": "example respond immediately to the create request the response would tell",
    "start": "372240",
    "end": "377840"
  },
  {
    "text": "the client that the request to create the order had been received and that it",
    "start": "377840",
    "end": "383759"
  },
  {
    "text": "would need to check back later to determine the outcome the order service would then exchange",
    "start": "383759",
    "end": "389440"
  },
  {
    "text": "messages with the customer service to finalize the creation of the order the second type of coupling is design time",
    "start": "389440",
    "end": "397440"
  },
  {
    "start": "394000",
    "end": "394000"
  },
  {
    "text": "coupling which is the focus of this talk design time coupling is the degree to",
    "start": "397440",
    "end": "404400"
  },
  {
    "text": "which one service is forced to change because of a change to another service",
    "start": "404400",
    "end": "411120"
  },
  {
    "text": "coupling occurs because one service directly or indirectly depends upon",
    "start": "411120",
    "end": "417120"
  },
  {
    "text": "concepts that are owned by another service let's imagine that the order",
    "start": "417120",
    "end": "422160"
  },
  {
    "text": "service consumes the api of the customer service it either invokes the services",
    "start": "422160",
    "end": "428479"
  },
  {
    "text": "operations or it subscribes to its events dependencies are not inherently",
    "start": "428479",
    "end": "434319"
  },
  {
    "text": "bad quite often it's absolutely necessary however this creates design",
    "start": "434319",
    "end": "440160"
  },
  {
    "text": "time coupling from the order service to the customer service",
    "start": "440160",
    "end": "445199"
  },
  {
    "text": "the reason design time coupling is a potential problem is because concepts",
    "start": "445199",
    "end": "450240"
  },
  {
    "text": "can change there is a risk for example that a change to the customer service will",
    "start": "450240",
    "end": "455759"
  },
  {
    "text": "force its api to change in a way that requires the order service to also",
    "start": "455759",
    "end": "461120"
  },
  {
    "text": "change the degree of coupling is a function of the stability of the customer domain the",
    "start": "461120",
    "end": "467759"
  },
  {
    "text": "design of the customer service api and how much of that api is consumed by",
    "start": "467759",
    "end": "474000"
  },
  {
    "text": "the order service the tighter the coupling the greater the risk of lockstep changes as i described",
    "start": "474000",
    "end": "482240"
  },
  {
    "text": "later in this talk lockstep changes require teams to collaborate which can reduce",
    "start": "482240",
    "end": "488479"
  },
  {
    "text": "productivity consequently loose coupling is essential",
    "start": "488479",
    "end": "494160"
  },
  {
    "text": "it's important to remember that loose coupling is not guaranteed you must carefully design your services to be",
    "start": "494160",
    "end": "501680"
  },
  {
    "text": "loosely coupled ideally we should design services in a way that avoids any design",
    "start": "501680",
    "end": "507919"
  },
  {
    "start": "503000",
    "end": "503000"
  },
  {
    "text": "time coupling for example we might consider turning create order into a",
    "start": "507919",
    "end": "513039"
  },
  {
    "text": "local operation by putting the customer and order subdomains in the same service this",
    "start": "513039",
    "end": "520159"
  },
  {
    "text": "might not be a good idea however if it creates a service that is too large for",
    "start": "520159",
    "end": "525200"
  },
  {
    "text": "a small team to maintain in general while we can try to avoid design time",
    "start": "525200",
    "end": "531200"
  },
  {
    "text": "coupling it's usually not practical to eliminate it instead the goal is to",
    "start": "531200",
    "end": "537040"
  },
  {
    "text": "minimize it this is a talk about loose coupling and microservices but loose coupling is an",
    "start": "537040",
    "end": "543839"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "ancient concept that spans the entire design space panus for example wrote a",
    "start": "543839",
    "end": "550080"
  },
  {
    "text": "famous paper about modularization back in 1972 the title was on the criteria to be used",
    "start": "550080",
    "end": "558160"
  },
  {
    "text": "in decomposing systems into modules many of the ideas in this paper are very",
    "start": "558160",
    "end": "564480"
  },
  {
    "text": "relevant to microservices and at the other end of the spectrum they also",
    "start": "564480",
    "end": "569600"
  },
  {
    "text": "apply when designing classes so why is loose coupling important",
    "start": "569600",
    "end": "574880"
  },
  {
    "start": "573000",
    "end": "573000"
  },
  {
    "text": "the authors of the book accelerate which is a must read book have found there's a",
    "start": "574880",
    "end": "580080"
  },
  {
    "text": "strong correlation between business success and the performance of the software development organization",
    "start": "580080",
    "end": "587680"
  },
  {
    "text": "they have also found that developers in high performing organizations agree with",
    "start": "587680",
    "end": "592800"
  },
  {
    "text": "the following statements complete their work without communicating and coordinating with",
    "start": "592800",
    "end": "599200"
  },
  {
    "text": "people outside their team make large scale changes to the design of their",
    "start": "599200",
    "end": "604240"
  },
  {
    "text": "system without depending on other teams to make changes in their systems or",
    "start": "604240",
    "end": "609440"
  },
  {
    "text": "creating significant work for other teams being able to work this way requires an",
    "start": "609440",
    "end": "615360"
  },
  {
    "text": "architecture that is loosely coupled from a design time perspective so in",
    "start": "615360",
    "end": "620640"
  },
  {
    "text": "other words loose design time coupling makes the business more profitable",
    "start": "620640",
    "end": "627200"
  },
  {
    "text": "the opposite of loose design time coupling is tight design time coupling",
    "start": "627200",
    "end": "632480"
  },
  {
    "start": "628000",
    "end": "628000"
  },
  {
    "text": "tight design time coupling is an obstacle to high performance because it causes lockstep changes that require",
    "start": "632480",
    "end": "639839"
  },
  {
    "text": "teams to coordinate their work let's look at a simple example let's",
    "start": "639839",
    "end": "645040"
  },
  {
    "text": "imagine that the order service has an api endpoint for retrieving an order",
    "start": "645040",
    "end": "651040"
  },
  {
    "text": "the order has four fields subtotal tax service fee and delivery fee",
    "start": "651040",
    "end": "658320"
  },
  {
    "text": "what's missing is a field for the order total perhaps this endpoint is automatically",
    "start": "658320",
    "end": "664560"
  },
  {
    "text": "generated from the database schema which does not store the order total as a result clients such as the",
    "start": "664560",
    "end": "671440"
  },
  {
    "text": "accounting service must calculate the order total themselves initially this",
    "start": "671440",
    "end": "677200"
  },
  {
    "text": "was not much of a problem since it's a very simple calculation however in march",
    "start": "677200",
    "end": "683120"
  },
  {
    "text": "2020 the organization needed to implement a coveted surcharge to cover",
    "start": "683120",
    "end": "689120"
  },
  {
    "text": "the costs of ppe since the calculation wasn't centralized",
    "start": "689120",
    "end": "694800"
  },
  {
    "text": "multiple teams needed to track down and change the multiple places in the code",
    "start": "694800",
    "end": "700160"
  },
  {
    "text": "base that calculated the order total that was a slow and error-prone process",
    "start": "700160",
    "end": "706800"
  },
  {
    "text": "it's a good example of the kind of change that impacts multiple services",
    "start": "706800",
    "end": "712320"
  },
  {
    "text": "and to make matters worse let's suppose that the required change to the accounting service required a breaking",
    "start": "712320",
    "end": "719440"
  },
  {
    "text": "change to its api this will force the clients of the accounting service to also be changed in",
    "start": "719440",
    "end": "726160"
  },
  {
    "text": "lockstep requiring more meetings for coordination in the worst case scenario you can have",
    "start": "726160",
    "end": "732639"
  },
  {
    "text": "what's known as a distributed monolith where many or all of the services are",
    "start": "732639",
    "end": "738320"
  },
  {
    "text": "constantly changing in lockstep it's an architecture that combines the",
    "start": "738320",
    "end": "743519"
  },
  {
    "text": "worst aspects of both architectural styles this kind of cross-team coordination",
    "start": "743519",
    "end": "751200"
  },
  {
    "start": "748000",
    "end": "748000"
  },
  {
    "text": "also occurs in a monolithic architecture it's also undesirable however in a",
    "start": "751200",
    "end": "757200"
  },
  {
    "text": "monolithic architecture it's easier to build test and deploy changes made by",
    "start": "757200",
    "end": "762800"
  },
  {
    "text": "multiple teams you can simply make the required changes on a branch and then build test and",
    "start": "762800",
    "end": "769760"
  },
  {
    "text": "deploy them in contrast deploying changes that span multiple services is much more difficult",
    "start": "769760",
    "end": "777279"
  },
  {
    "text": "because the services are deployed independently with zero downtime you",
    "start": "777279",
    "end": "782800"
  },
  {
    "text": "can't simply deploy a breaking change to a service api first you must deploy a version of the",
    "start": "782800",
    "end": "789360"
  },
  {
    "text": "service that supports the old and the new versions of the api next you must migrate all of the clients",
    "start": "789360",
    "end": "796720"
  },
  {
    "text": "to that newer api and then finally you can remove the old api version that's a lot more work than",
    "start": "796720",
    "end": "804480"
  },
  {
    "text": "in a monolith as you can see coupling at the architecture level results in coupling",
    "start": "804480",
    "end": "810959"
  },
  {
    "text": "between teams this is a great example of conway's lore in action and here's an",
    "start": "810959",
    "end": "816800"
  },
  {
    "text": "interesting little tip mel conway is on twitter and has some very interesting",
    "start": "816800",
    "end": "822000"
  },
  {
    "text": "things to say there are several techniques that you can use to minimize design time coupling",
    "start": "822000",
    "end": "829279"
  },
  {
    "start": "824000",
    "end": "824000"
  },
  {
    "text": "the first is to apply a classic design principle don't repeat yourself this",
    "start": "829279",
    "end": "835440"
  },
  {
    "text": "principle states that every concept such as the order total calculator has a",
    "start": "835440",
    "end": "840880"
  },
  {
    "text": "single representation in the application in other words there should be one place",
    "start": "840880",
    "end": "846480"
  },
  {
    "text": "that calculates the order total you might be tempted to use the traditional approach of implementing the",
    "start": "846480",
    "end": "853440"
  },
  {
    "text": "calculation in a library that's embedded in multiple services while using a library for stable utility",
    "start": "853440",
    "end": "861360"
  },
  {
    "start": "859000",
    "end": "859000"
  },
  {
    "text": "concepts like money is generally okay a library that contains changing",
    "start": "861360",
    "end": "867120"
  },
  {
    "text": "business logic is insufficiently dry that's because all services must use the",
    "start": "867120",
    "end": "873360"
  },
  {
    "text": "same version of the library when the business logic changes and a new version of the library is released",
    "start": "873360",
    "end": "880800"
  },
  {
    "text": "numerous teams must simultaneously upgrade to that version yet more coordination and collaboration",
    "start": "880800",
    "end": "888480"
  },
  {
    "text": "between the teams in order to properly apply the dry principle in a microservice architecture",
    "start": "888480",
    "end": "895519"
  },
  {
    "text": "every concept must be represented in a single service for example the order service must",
    "start": "895519",
    "end": "902000"
  },
  {
    "text": "calculate the order total and any service that needs to know the order total must query the order service",
    "start": "902000",
    "end": "909519"
  },
  {
    "text": "that's the dry principle another principle that helps achieve loose design time coupling is the iceberg",
    "start": "909519",
    "end": "916560"
  },
  {
    "text": "principle in the same way that most of an iceberg is below the surface of the water the",
    "start": "916560",
    "end": "923199"
  },
  {
    "text": "surface area of a service api should be much smaller than the implementation",
    "start": "923199",
    "end": "929360"
  },
  {
    "text": "that's because what's hidden can easily be changed or conversely what's exposed via an api",
    "start": "929360",
    "end": "937519"
  },
  {
    "text": "is much more difficult to change because of its impact on the service clients",
    "start": "937519",
    "end": "943440"
  },
  {
    "text": "a service api should encapsulate or in other words hide as much of the",
    "start": "943440",
    "end": "948800"
  },
  {
    "text": "implementation as possible a great example of the iceberg principle",
    "start": "948800",
    "end": "954720"
  },
  {
    "text": "in action are simple apis such as the stripe or twilio api",
    "start": "954720",
    "end": "960560"
  },
  {
    "text": "the twilio api for sms lets you send an sms to",
    "start": "960560",
    "end": "965759"
  },
  {
    "text": "subscribers in over 150 countries yet the api endpoint only has three",
    "start": "965759",
    "end": "972959"
  },
  {
    "text": "required parameters the destination number the from number and the message this",
    "start": "972959",
    "end": "980160"
  },
  {
    "text": "incredibly simple api hides all of the complexity of routing the message to the",
    "start": "980160",
    "end": "986240"
  },
  {
    "text": "appropriate country we should strive to apply the same principle to our services",
    "start": "986240",
    "end": "992880"
  },
  {
    "text": "the 1972 paper by parnasse even contained a few words of wisdom",
    "start": "992880",
    "end": "999199"
  },
  {
    "text": "first list the most important and or unstable design decisions",
    "start": "999199",
    "end": "1005279"
  },
  {
    "text": "second design modules or in this scenario services that encapsulates",
    "start": "1005279",
    "end": "1010959"
  },
  {
    "text": "those decisions the iceberg principle is concerned with minimizing a services surface area to",
    "start": "1010959",
    "end": "1019120"
  },
  {
    "text": "ensure loose coupling a service should also consume as little as possible",
    "start": "1019120",
    "end": "1024640"
  },
  {
    "text": "we should minimize the number of dependencies that a service has since each one is a",
    "start": "1024640",
    "end": "1030798"
  },
  {
    "text": "potential trigger for changes also a service should consume as little",
    "start": "1030799",
    "end": "1036720"
  },
  {
    "text": "as possible from each dependency moreover it's important to apply",
    "start": "1036720",
    "end": "1042720"
  },
  {
    "text": "postal's robustness principle and implement each service in a way that it",
    "start": "1042720",
    "end": "1048880"
  },
  {
    "text": "ignores response and event attributes that it doesn't need that's because if a service selectively",
    "start": "1048880",
    "end": "1056520"
  },
  {
    "text": "deserializes a message or a response then it's unaffected to changes to",
    "start": "1056520",
    "end": "1062640"
  },
  {
    "text": "attributes that it doesn't actually use one thing to keep in mind interestingly",
    "start": "1062640",
    "end": "1068559"
  },
  {
    "text": "is the code generated deserialization logic typically deserializes all attributes",
    "start": "1068559",
    "end": "1076400"
  },
  {
    "text": "another key principle that promotes loose coupling is a database per service",
    "start": "1076400",
    "end": "1082720"
  },
  {
    "start": "1077000",
    "end": "1077000"
  },
  {
    "text": "for example let's imagine that you've refactored your monolith to services but left the database unchanged in this",
    "start": "1082720",
    "end": "1090960"
  },
  {
    "text": "partially refactored architecture the order service reserves credit by",
    "start": "1090960",
    "end": "1096080"
  },
  {
    "text": "directly accessing the customer table it seems simple but this results in",
    "start": "1096080",
    "end": "1101919"
  },
  {
    "text": "tight design time coupling if the team that owns the customer service changes",
    "start": "1101919",
    "end": "1107760"
  },
  {
    "text": "the customer table the order service would need to be changed in lockstep",
    "start": "1107760",
    "end": "1113520"
  },
  {
    "text": "in order to ensure loose design time coupling services must not share tables",
    "start": "1113520",
    "end": "1119679"
  },
  {
    "text": "instead they must only communicate via apis i now want to discuss an example of",
    "start": "1119679",
    "end": "1126640"
  },
  {
    "text": "design time coupling that's motivated by my excessive consumption of takeout food",
    "start": "1126640",
    "end": "1132000"
  },
  {
    "text": "over the past year i've had a lot of time on my hands to study the domain quite thoroughly",
    "start": "1132000",
    "end": "1138880"
  },
  {
    "text": "we'll explore how to improve an architecture so that it's better able to",
    "start": "1138880",
    "end": "1143919"
  },
  {
    "text": "handle evolving requirements the example application in both of my",
    "start": "1143919",
    "end": "1149200"
  },
  {
    "text": "books is the food to go application it's a food delivery application like",
    "start": "1149200",
    "end": "1154559"
  },
  {
    "text": "deliveroo or doordash but unlike those two companies its fictitious stock has",
    "start": "1154559",
    "end": "1160160"
  },
  {
    "text": "actually increased in value since it ipo'd originally food2go had a monolithic",
    "start": "1160160",
    "end": "1166640"
  },
  {
    "text": "architecture but over time the application its team grew it was migrated to a microservice architecture",
    "start": "1166640",
    "end": "1174799"
  },
  {
    "text": "here are some of the key services the order service is responsible for creating and managing orders it",
    "start": "1174799",
    "end": "1181760"
  },
  {
    "text": "implements the create order command using the saga pattern the order service first validates a",
    "start": "1181760",
    "end": "1188960"
  },
  {
    "text": "request to create an order using a cqrs replica of the restaurant information",
    "start": "1188960",
    "end": "1195360"
  },
  {
    "text": "which is owned by the restaurant service next it responds to the client with the",
    "start": "1195360",
    "end": "1200559"
  },
  {
    "text": "order id the order service then finalizes the creation of the order by asynchronously",
    "start": "1200559",
    "end": "1207919"
  },
  {
    "text": "communicating with other services it invokes the consumer service to",
    "start": "1207919",
    "end": "1214000"
  },
  {
    "text": "verify that the consumer can place orders next it invokes the accounting service",
    "start": "1214000",
    "end": "1220320"
  },
  {
    "text": "to authorize the consumer's credit card finally it creates a ticket",
    "start": "1220320",
    "end": "1226480"
  },
  {
    "text": "i want to focus on the design time coupling of the order service and the",
    "start": "1226480",
    "end": "1231760"
  },
  {
    "text": "restaurant service the primary responsibility of the restaurant service is to know",
    "start": "1231760",
    "end": "1237520"
  },
  {
    "text": "information about restaurants in particular its api exposes the menus in",
    "start": "1237520",
    "end": "1243600"
  },
  {
    "text": "this example the restaurant service publishes events but the design time",
    "start": "1243600",
    "end": "1248880"
  },
  {
    "text": "coupling would be the same if it had a rest end point the menu information is used by the",
    "start": "1248880",
    "end": "1255840"
  },
  {
    "text": "order service to validate and price orders let's now explore the impact of changes",
    "start": "1255840",
    "end": "1262960"
  },
  {
    "text": "to the restaurant subdomain the first change i want to discuss is supporting",
    "start": "1262960",
    "end": "1268240"
  },
  {
    "start": "1266000",
    "end": "1266000"
  },
  {
    "text": "menu items that come in different sizes for example let's imagine a restaurant that sells chips and salsa in two",
    "start": "1268240",
    "end": "1275440"
  },
  {
    "text": "different sizes small and large we can support this requirement by",
    "start": "1275440",
    "end": "1280640"
  },
  {
    "text": "introducing the concept of sub-menu items menu items such as chips and salsa",
    "start": "1280640",
    "end": "1286559"
  },
  {
    "text": "can have two sub-menu items one for each size we can expose the menu item hierarchy to",
    "start": "1286559",
    "end": "1294000"
  },
  {
    "text": "clients by adding a parent menu item id to the dtos and events",
    "start": "1294000",
    "end": "1300480"
  },
  {
    "text": "this is an additive change and so it's a non-breaking change the order service",
    "start": "1300480",
    "end": "1306000"
  },
  {
    "text": "can ignore this attribute and so is unaffected by the change let's now look",
    "start": "1306000",
    "end": "1311919"
  },
  {
    "text": "at another change which is superficially very similar but has a much bigger",
    "start": "1311919",
    "end": "1316960"
  },
  {
    "start": "1312000",
    "end": "1312000"
  },
  {
    "text": "impact some restaurants have menu items that are configurable for example one of",
    "start": "1316960",
    "end": "1322960"
  },
  {
    "text": "my favorite restaurants lets you customize your burrito there are numerous options including",
    "start": "1322960",
    "end": "1329280"
  },
  {
    "text": "paid add-ons such as roasted chilies and guacamole",
    "start": "1329280",
    "end": "1334320"
  },
  {
    "text": "so delicious adding support for customizable menu items requires numerous changes to the",
    "start": "1334320",
    "end": "1342000"
  },
  {
    "text": "restaurant order and kitchen domain a menu item needs to describe the possible",
    "start": "1342000",
    "end": "1349200"
  },
  {
    "text": "options it has a base price a menu item has zero or more menu group",
    "start": "1349200",
    "end": "1355679"
  },
  {
    "text": "options that are named and have a min and max selection attributes",
    "start": "1355679",
    "end": "1362000"
  },
  {
    "text": "each menu item group options has one or more menu item options and a menu item",
    "start": "1362000",
    "end": "1368400"
  },
  {
    "text": "option has a name and a price in order to calculate the subtotal",
    "start": "1368400",
    "end": "1374480"
  },
  {
    "text": "an order line item needs to describe the chosen options an order line item has zero or more",
    "start": "1374480",
    "end": "1382320"
  },
  {
    "text": "order line item options which describe the selected option",
    "start": "1382320",
    "end": "1388400"
  },
  {
    "text": "similarly in order for the kitchen to prepare an order the ticket line item must also describe the selected options",
    "start": "1388400",
    "end": "1396080"
  },
  {
    "text": "however it just needs to know the names of the chosen options for each one of",
    "start": "1396080",
    "end": "1401280"
  },
  {
    "text": "the line items this is an example of a change that has a widespread impact the teams that own",
    "start": "1401280",
    "end": "1409120"
  },
  {
    "text": "the three affected services would need to spend time planning implementing and deploying the changes",
    "start": "1409120",
    "end": "1417440"
  },
  {
    "text": "ideally it would be nice to architect the application in a way that avoids this kind of scenario as a general rule",
    "start": "1417440",
    "end": "1425279"
  },
  {
    "text": "concepts that are hidden can be changed therefore we need an architecture that",
    "start": "1425279",
    "end": "1430960"
  },
  {
    "text": "encapsulates the menu structure within the restaurant service",
    "start": "1430960",
    "end": "1436320"
  },
  {
    "text": "so let's look at how to do that in this example the order service is coupled to",
    "start": "1436320",
    "end": "1441440"
  },
  {
    "text": "the restaurant service because it uses the menu items and it stores line items which reference",
    "start": "1441440",
    "end": "1448080"
  },
  {
    "text": "the menu items in order to record the actual order the order service also uses",
    "start": "1448080",
    "end": "1454240"
  },
  {
    "text": "the menu items to validate the order and calculate the subtotal we could",
    "start": "1454240",
    "end": "1459360"
  },
  {
    "start": "1459000",
    "end": "1459000"
  },
  {
    "text": "therefore reduce coupling by moving those responsibilities to the restaurant",
    "start": "1459360",
    "end": "1464559"
  },
  {
    "text": "service in this new design the order service is significantly less coupled to",
    "start": "1464559",
    "end": "1470240"
  },
  {
    "text": "the restaurant service it simply depends upon the concepts of order validation",
    "start": "1470240",
    "end": "1476400"
  },
  {
    "text": "and the calculated subtotal which are much simpler and much more stable",
    "start": "1476400",
    "end": "1482720"
  },
  {
    "text": "perhaps the one downside of this approach is that the restaurant service is now part of the critical path of the",
    "start": "1482720",
    "end": "1490159"
  },
  {
    "text": "ordering flow previously the order service had a replica of the menu items",
    "start": "1490159",
    "end": "1495679"
  },
  {
    "text": "that was maintained with events published by the restaurant service in a sense we have reduced design time",
    "start": "1495679",
    "end": "1503360"
  },
  {
    "text": "coupling but increased runtime coupling this is an example of the types of trade-offs",
    "start": "1503360",
    "end": "1510240"
  },
  {
    "text": "that you must make when defining a microservice architecture we can also decouple the kitchen service",
    "start": "1510240",
    "end": "1517200"
  },
  {
    "text": "from the menu item structure by using api composition instead of the ticket storing those line",
    "start": "1517200",
    "end": "1524640"
  },
  {
    "text": "items the ui can dynamically fetch them from the restaurant service when",
    "start": "1524640",
    "end": "1529919"
  },
  {
    "text": "displaying the ticket i want to finish by discussing the design of the saga that coordinates the",
    "start": "1529919",
    "end": "1536720"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "creation of the order in the ticket there are a couple of options the first option is to use a choreography based",
    "start": "1536720",
    "end": "1544000"
  },
  {
    "text": "saga the api gateway publishes an order creation requested event",
    "start": "1544000",
    "end": "1550960"
  },
  {
    "text": "each service subscribes to that event the ticket service creates a ticket the",
    "start": "1550960",
    "end": "1556159"
  },
  {
    "text": "order service creates an order and the restaurant service attempts to create an",
    "start": "1556159",
    "end": "1561440"
  },
  {
    "text": "order as well and if it's successful it publishes an order validated event",
    "start": "1561440",
    "end": "1567200"
  },
  {
    "text": "containing the order subtotal if it's unsuccessful the restaurant service",
    "start": "1567200",
    "end": "1573039"
  },
  {
    "text": "publishes an order validation failed event other services subscribe to those events",
    "start": "1573039",
    "end": "1579600"
  },
  {
    "text": "and react accordingly another option is to use orchestration",
    "start": "1579600",
    "end": "1585120"
  },
  {
    "start": "1582000",
    "end": "1582000"
  },
  {
    "text": "the api gateway routes the create order request to an orchestration service",
    "start": "1585120",
    "end": "1591039"
  },
  {
    "text": "the orchestration service invokes each of the services starting with the restaurant service",
    "start": "1591039",
    "end": "1597360"
  },
  {
    "text": "using asynchronous request response orchestration and choreography are",
    "start": "1597360",
    "end": "1603360"
  },
  {
    "text": "roughly equivalent they differ however in some of the details of the coupling",
    "start": "1603360",
    "end": "1609200"
  },
  {
    "text": "all of the participants in the choreography based saga depend upon the order creation requested",
    "start": "1609200",
    "end": "1617200"
  },
  {
    "text": "event in fact the teams actually need to collaborate to define that type",
    "start": "1617200",
    "end": "1623200"
  },
  {
    "text": "in contrast the saga orchestrator depends upon the apis of the",
    "start": "1623200",
    "end": "1628400"
  },
  {
    "text": "participants in a given situation one approach might be better than the other",
    "start": "1628400",
    "end": "1635600"
  },
  {
    "text": "so that's my talk in summary rapid and frequent development requires loose design time",
    "start": "1635600",
    "end": "1642640"
  },
  {
    "text": "coupling you must carefully design your services to achieve loose coupling you",
    "start": "1642640",
    "end": "1648720"
  },
  {
    "text": "can apply the dry principle you can design services to be icebergs you can",
    "start": "1648720",
    "end": "1654399"
  },
  {
    "text": "carefully design service dependencies and above all you should avoid sharing",
    "start": "1654399",
    "end": "1660159"
  },
  {
    "text": "database tables so that's my talk thank you for listening and i hope that you found it",
    "start": "1660159",
    "end": "1666240"
  },
  {
    "text": "useful",
    "start": "1666240",
    "end": "1669240"
  },
  {
    "text": "chris there were quite a few questions that that came through in the chat i think you answered um some of them um",
    "start": "1671919",
    "end": "1678480"
  },
  {
    "text": "one which got a plus one for quite a few things was about your suggestions for solving problems involving asynchronous",
    "start": "1678480",
    "end": "1685120"
  },
  {
    "text": "apis as an entry point um when the api initiates an asynchronous communication",
    "start": "1685120",
    "end": "1691360"
  },
  {
    "text": "but then still needs to respond to a synchronous request so you answered that in the chat but",
    "start": "1691360",
    "end": "1697279"
  },
  {
    "text": "maybe you'd like to elaborate on it yeah well it's funny that's slightly",
    "start": "1697279",
    "end": "1702320"
  },
  {
    "text": "unrelated to the it's only slightly related to the talk topic but yeah",
    "start": "1702320",
    "end": "1707600"
  },
  {
    "text": "so i mean ideally a synchronous request just initiates things and then the the",
    "start": "1707600",
    "end": "1713440"
  },
  {
    "text": "request handler can return immediately like what's it return at 201 or whatever",
    "start": "1713440",
    "end": "1718480"
  },
  {
    "text": "it is to say create it but if it say has to wait until that",
    "start": "1718480",
    "end": "1723919"
  },
  {
    "text": "whole well say saga has completed then each the each instance of the",
    "start": "1723919",
    "end": "1729760"
  },
  {
    "text": "service that handles those requests can actually can have its own",
    "start": "1729760",
    "end": "1734880"
  },
  {
    "text": "private subscription to the events say that the in that would indicate the outcome",
    "start": "1734880",
    "end": "1742320"
  },
  {
    "text": "of the operation that um that was initiated like it could",
    "start": "1742320",
    "end": "1747919"
  },
  {
    "text": "subscribe to order created and order failed events um and so",
    "start": "1747919",
    "end": "1754320"
  },
  {
    "text": "you can imagine this in a reactive a reactive interface right where",
    "start": "1754320",
    "end": "1759760"
  },
  {
    "text": "uh the the the synchronous request handler returns a completable future or whatever",
    "start": "1759760",
    "end": "1765679"
  },
  {
    "text": "reactive abstraction you're using and then there's a hash map between say",
    "start": "1765679",
    "end": "1771360"
  },
  {
    "text": "request id you need some kind of correlation id so that when an event comes back saying",
    "start": "1771360",
    "end": "1777840"
  },
  {
    "text": "that that order was created successfully or unsuccessfully um the the event handler can then take",
    "start": "1777840",
    "end": "1785360"
  },
  {
    "text": "the correlation id look up the mono or completable future complete it which would then trigger the",
    "start": "1785360",
    "end": "1792559"
  },
  {
    "text": "sending back of the response so it's a little messy it's a little involved and",
    "start": "1792559",
    "end": "1797760"
  },
  {
    "text": "it has the downside that there's runtime coupling between you know in this architecture",
    "start": "1797760",
    "end": "1803760"
  },
  {
    "text": "but some but i i've worked with clients that have just had to do that i mean like one of them even had a",
    "start": "1803760",
    "end": "1809520"
  },
  {
    "text": "soap api of all things and act the thread actually had to block",
    "start": "1809520",
    "end": "1815760"
  },
  {
    "text": "until the message handling had completed yeah sometimes it's not um always",
    "start": "1815760",
    "end": "1822320"
  },
  {
    "text": "straightforward to do it in the perfect way so yeah yeah",
    "start": "1822320",
    "end": "1828399"
  },
  {
    "text": "um cool well there's quite a lot of questions coming through um so one of one of the other questions is",
    "start": "1828399",
    "end": "1835440"
  },
  {
    "text": "if domain driven design is done properly and you can identify aggregates aggregate routes and entities",
    "start": "1835440",
    "end": "1841840"
  },
  {
    "text": "and shared kernel properties can design time coupling be fully addressed",
    "start": "1841840",
    "end": "1848399"
  },
  {
    "text": "well i mean i want to say yes and no and but you know one of the things is like",
    "start": "1848960",
    "end": "1854480"
  },
  {
    "text": "if it's done properly right um so that so if you can do it properly i think that",
    "start": "1854480",
    "end": "1860960"
  },
  {
    "text": "does address some aspects of design time coupling but on the other hand you do have to make",
    "start": "1860960",
    "end": "1867440"
  },
  {
    "text": "decisions about decomposition into services",
    "start": "1867440",
    "end": "1872480"
  },
  {
    "text": "and i think i made this point in the talk that you know service boundaries are these sort of physical boundaries",
    "start": "1872480",
    "end": "1880000"
  },
  {
    "text": "because they involve network communication and so on and so there's this slightly different set of concerns",
    "start": "1880000",
    "end": "1887440"
  },
  {
    "text": "that you have to address which might which aren't totally aligned with just traditional",
    "start": "1887440",
    "end": "1893519"
  },
  {
    "text": "ddd or traditional modularity um and and and so",
    "start": "1893519",
    "end": "1899440"
  },
  {
    "text": "i don't i don't think just doing ddd is sufficient yeah",
    "start": "1899440",
    "end": "1905120"
  },
  {
    "text": "absolutely i think there's many um ways to um sometimes decide when things",
    "start": "1905120",
    "end": "1911120"
  },
  {
    "text": "need to be microservices and the boundaries which can be technical as well not necessarily just domain driven",
    "start": "1911120",
    "end": "1916320"
  },
  {
    "text": "so yeah yeah yeah all right um i don't know if you had any",
    "start": "1916320",
    "end": "1921440"
  },
  {
    "text": "particular favorite uh questions that you saw in the chat whilst uh whilst we were going because there's quite a few",
    "start": "1921440",
    "end": "1927279"
  },
  {
    "text": "um popping up there so i can just keep going but if you have some ones that you thought would be good to uh to",
    "start": "1927279",
    "end": "1933279"
  },
  {
    "text": "to go for then do you do that um so one of the other questions that's in here is",
    "start": "1933279",
    "end": "1939279"
  },
  {
    "text": "um with a database per service what is your suggestion for creating or maintaining a",
    "start": "1939279",
    "end": "1946159"
  },
  {
    "text": "unified data model across is that even a good thing let's just throw that in there",
    "start": "1946159",
    "end": "1953120"
  },
  {
    "text": "um yeah i know that's a really interesting thing because i think in enterprises there's a strong desire to to do that",
    "start": "1953120",
    "end": "1960480"
  },
  {
    "text": "but if you look at one of even just one of the key ideas in domain-driven design right it's a bounded context and this",
    "start": "1960480",
    "end": "1967519"
  },
  {
    "text": "notion of having multiple models right instead of one large union",
    "start": "1967519",
    "end": "1973919"
  },
  {
    "text": "like global view of what a customer is um so even just from a ddd perspective",
    "start": "1973919",
    "end": "1980399"
  },
  {
    "text": "never mind micro service perspective um global a global model is generally",
    "start": "1980399",
    "end": "1986399"
  },
  {
    "text": "not a thing i mean you know one way of looking at it is the model exists in terms of the apis that",
    "start": "1986399",
    "end": "1994159"
  },
  {
    "text": "your services expose and and i think yeah you can have consistency around that right like this",
    "start": "1994159",
    "end": "2002240"
  },
  {
    "text": "a customer name is represented in a particular consistent way across all of",
    "start": "2002240",
    "end": "2008320"
  },
  {
    "text": "your apis right um or an address but but it's all",
    "start": "2008320",
    "end": "2014640"
  },
  {
    "text": "i think it's a more distributed way of thinking",
    "start": "2014640",
    "end": "2019840"
  },
  {
    "text": "fair enough um so i mean one of the questions that i had as well was i think sometimes",
    "start": "2020480",
    "end": "2026480"
  },
  {
    "text": "there's a an under appreciation for some of the coupling that comes even with the the",
    "start": "2026480",
    "end": "2032640"
  },
  {
    "text": "messages when you use asynchronous communication through messages and things like schemas and things like that",
    "start": "2032640",
    "end": "2038000"
  },
  {
    "text": "so do you have any sort of practical tools and tips that you would use to kind of minimize the impact of when",
    "start": "2038000",
    "end": "2044399"
  },
  {
    "text": "schemas change in messages between um services",
    "start": "2044399",
    "end": "2049919"
  },
  {
    "text": "yeah i mean that's a good one i mean it's it's it's it is tricky um",
    "start": "2049919",
    "end": "2055919"
  },
  {
    "text": "i mean i in the ideal world your events evolve um",
    "start": "2055919",
    "end": "2062480"
  },
  {
    "text": "the schema of the events evolve in a kind of always backwards compatible way",
    "start": "2062480",
    "end": "2068480"
  },
  {
    "text": "right so that your the changes that you make are additive um",
    "start": "2068480",
    "end": "2074960"
  },
  {
    "text": "but but in theory yeah there's i mean the the events in the life cycle",
    "start": "2074960",
    "end": "2081118"
  },
  {
    "text": "of some domain object could could in theory on the one hand they're sort of rooted in kind of business concepts",
    "start": "2081119",
    "end": "2088240"
  },
  {
    "text": "which i think have some stability but they could change in incompatible ways right",
    "start": "2088240",
    "end": "2093358"
  },
  {
    "text": "and part of it is what if they change in incompatible ways you have to update all of the consumers",
    "start": "2093359",
    "end": "2100079"
  },
  {
    "text": "so that um they can handle the old and the new schema",
    "start": "2100079",
    "end": "2105520"
  },
  {
    "text": "and then once you've once you've upgraded them you can then switch over to publishing events in the new schema",
    "start": "2105520",
    "end": "2112079"
  },
  {
    "text": "um but but it's any any kind of major changes like that just i think involve a",
    "start": "2112079",
    "end": "2118560"
  },
  {
    "text": "certain amount of pain absolutely all right we've got um three minutes",
    "start": "2118560",
    "end": "2125119"
  },
  {
    "text": "before uh the end of this session but as with our previous ones if you want to join um chris in the hangout after this",
    "start": "2125119",
    "end": "2131839"
  },
  {
    "text": "he'll be able to answer all the other mini questions which are which are in the chat and you can you can ask him",
    "start": "2131839",
    "end": "2137440"
  },
  {
    "text": "directly as well um so one which is just come through is in your talk you mentioned uh about an",
    "start": "2137440",
    "end": "2144000"
  },
  {
    "text": "additive change to an api can you expand a little bit on what what you mean by that",
    "start": "2144000",
    "end": "2150560"
  },
  {
    "text": "um yeah where so you just you can add attributes to",
    "start": "2150560",
    "end": "2158079"
  },
  {
    "text": "well there's sort of two parts there's a say a synchronous there's a request and there's a response right so you can add",
    "start": "2158079",
    "end": "2165200"
  },
  {
    "text": "optional attributes to a request and so old clients obviously don't know",
    "start": "2165200",
    "end": "2172000"
  },
  {
    "text": "about that attribute they can continue they can use the old eight they can still send their old requests the server",
    "start": "2172000",
    "end": "2178960"
  },
  {
    "text": "can provide a default value and then conversely in the response",
    "start": "2178960",
    "end": "2185119"
  },
  {
    "text": "the the server can return additional attributes um and the client can be just written in",
    "start": "2185119",
    "end": "2193040"
  },
  {
    "text": "a way that it just ignores the ones that it does not understand right",
    "start": "2193040",
    "end": "2199359"
  },
  {
    "text": "and so there's there's extra attributes but it they they just you know don't",
    "start": "2199440",
    "end": "2204720"
  },
  {
    "text": "they're not relevant yeah fair enough um with anyone with any other specific ones",
    "start": "2204720",
    "end": "2211839"
  },
  {
    "text": "you thought you would be good to tackle well there was one that was like kind of unrelated to the talk and such but it",
    "start": "2211839",
    "end": "2217839"
  },
  {
    "text": "was those interesting ones as well yeah like someone commented about teams",
    "start": "2217839",
    "end": "2224000"
  },
  {
    "text": "creating lots of fine-grained services right like my recommendation is start with one",
    "start": "2224000",
    "end": "2230079"
  },
  {
    "text": "service per team unless there's a darn good reason to have more yeah whereas i've definitely seen it",
    "start": "2230079",
    "end": "2237119"
  },
  {
    "text": "quite a common at what i would call it anti-patent is like one service per developer",
    "start": "2237119",
    "end": "2244079"
  },
  {
    "text": "and and and you know and then there are some more extreme examples publicly but that",
    "start": "2244079",
    "end": "2250400"
  },
  {
    "text": "one service per developer seems quite common and to me yeah it just seems like you're creating",
    "start": "2250400",
    "end": "2257280"
  },
  {
    "text": "an excessively fine-grained architecture right and",
    "start": "2257280",
    "end": "2262640"
  },
  {
    "text": "and i would just simplify things because there's a chance that down the line when",
    "start": "2262640",
    "end": "2268240"
  },
  {
    "text": "there's some change suddenly you've got to make change changes in a lot of places",
    "start": "2268240",
    "end": "2273599"
  },
  {
    "text": "or you just end up ultimately building like this overly complex system that you",
    "start": "2273599",
    "end": "2278640"
  },
  {
    "text": "will find is just cognitively overwhelming",
    "start": "2278640",
    "end": "2284560"
  },
  {
    "text": "excellent well thank you so much chris we're out of time at the moment but if you can join us in the hangout",
    "start": "2284560",
    "end": "2290480"
  },
  {
    "text": "afterwards chris will be there and he'll be able to answer all your questions so thank you so much i do hope you'll also",
    "start": "2290480",
    "end": "2295520"
  },
  {
    "text": "join us for the panel uh in a little while after this but yes you're in the hangout room thank you",
    "start": "2295520",
    "end": "2301119"
  },
  {
    "text": "very much well thank you [Music]",
    "start": "2301119",
    "end": "2312879"
  },
  {
    "text": "you",
    "start": "2315119",
    "end": "2317200"
  }
]