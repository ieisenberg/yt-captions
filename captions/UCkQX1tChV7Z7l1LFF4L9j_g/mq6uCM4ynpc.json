[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "10800"
  },
  {
    "text": "okay so this is NodeJS in 20 minutes",
    "start": "16080",
    "end": "19680"
  },
  {
    "text": "because that's all the time I've got i",
    "start": "19680",
    "end": "21840"
  },
  {
    "text": "do have this on GitHub uh it's under",
    "start": "21840",
    "end": "23760"
  },
  {
    "text": "stdr node 20 men my I have to thank my",
    "start": "23760",
    "end": "27279"
  },
  {
    "text": "wife who gave me the first poll request",
    "start": "27279",
    "end": "28800"
  },
  {
    "text": "to fix all my typos thank you very much",
    "start": "28800",
    "end": "30640"
  },
  {
    "text": "Shannon",
    "start": "30640",
    "end": "33640"
  },
  {
    "text": "and uh what I'm going to do is give a",
    "start": "35600",
    "end": "37520"
  },
  {
    "text": "code focused introduction to Node.js so",
    "start": "37520",
    "end": "40879"
  },
  {
    "text": "this is kind of like the old C",
    "start": "40879",
    "end": "42719"
  },
  {
    "text": "programming language book by Kernigan",
    "start": "42719",
    "end": "44559"
  },
  {
    "text": "Richie it has code in it but this is not",
    "start": "44559",
    "end": "47760"
  },
  {
    "text": "excellent code the code is designed to",
    "start": "47760",
    "end": "49840"
  },
  {
    "text": "illustrate certain things you could do",
    "start": "49840",
    "end": "51200"
  },
  {
    "text": "with Node it is not good code you would",
    "start": "51200",
    "end": "54399"
  },
  {
    "text": "want to use in production",
    "start": "54399",
    "end": "56079"
  },
  {
    "text": "so please",
    "start": "56079",
    "end": "60079"
  },
  {
    "text": "don't so just a little quick intro to",
    "start": "60199",
    "end": "62879"
  },
  {
    "text": "node and some of the features it has the",
    "start": "62879",
    "end": "64960"
  },
  {
    "text": "sort of defining things for me at least",
    "start": "64960",
    "end": "66560"
  },
  {
    "text": "are the fact it's got streams events",
    "start": "66560",
    "end": "70200"
  },
  {
    "text": "async.io and npm I think is one of the",
    "start": "70200",
    "end": "72880"
  },
  {
    "text": "killer features of node it's the one",
    "start": "72880",
    "end": "74640"
  },
  {
    "text": "thing that I think makes this language",
    "start": "74640",
    "end": "76320"
  },
  {
    "text": "really stand",
    "start": "76320",
    "end": "77400"
  },
  {
    "text": "out does have in like a TCP UDP support",
    "start": "77400",
    "end": "81600"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "buffers for IO javascript doesn't have",
    "start": "81600",
    "end": "83920"
  },
  {
    "text": "anything like that it is single threaded",
    "start": "83920",
    "end": "86560"
  },
  {
    "text": "i think that's a wonderful thing because",
    "start": "86560",
    "end": "88479"
  },
  {
    "text": "you don't have to worry about like",
    "start": "88479",
    "end": "89920"
  },
  {
    "text": "semaphors and mut mutxes and then you've",
    "start": "89920",
    "end": "93119"
  },
  {
    "text": "got cluster if you need to scale up and",
    "start": "93119",
    "end": "96000"
  },
  {
    "text": "HTTP and HPS you don't have to include",
    "start": "96000",
    "end": "99119"
  },
  {
    "text": "another library or build your own",
    "start": "99119",
    "end": "100880"
  },
  {
    "text": "requests i like to think of as",
    "start": "100880",
    "end": "102799"
  },
  {
    "text": "JavaScript with",
    "start": "102799",
    "end": "105600"
  },
  {
    "text": "additions so this is the canonical hello",
    "start": "107159",
    "end": "109840"
  },
  {
    "text": "world uh example from the joint website",
    "start": "109840",
    "end": "113040"
  },
  {
    "text": "i've shamelessly stolen it and when we",
    "start": "113040",
    "end": "116640"
  },
  {
    "start": "114000",
    "end": "114000"
  },
  {
    "text": "run it we just basically run node lojs",
    "start": "116640",
    "end": "119680"
  },
  {
    "text": "and then we'll execute the program and",
    "start": "119680",
    "end": "122640"
  },
  {
    "text": "here I am testing it with a curl so",
    "start": "122640",
    "end": "124320"
  },
  {
    "text": "what's happening here is we require the",
    "start": "124320",
    "end": "127040"
  },
  {
    "text": "HTTP library and it's all written in",
    "start": "127040",
    "end": "129440"
  },
  {
    "text": "JavaScript you can see it in the node",
    "start": "129440",
    "end": "131360"
  },
  {
    "text": "resource library and using that library",
    "start": "131360",
    "end": "134879"
  },
  {
    "text": "there's a function called create server",
    "start": "134879",
    "end": "137520"
  },
  {
    "text": "and the thing it has is callback so by",
    "start": "137520",
    "end": "140319"
  },
  {
    "text": "default without you know you doing",
    "start": "140319",
    "end": "142480"
  },
  {
    "text": "anything node is callback oriented so",
    "start": "142480",
    "end": "145440"
  },
  {
    "text": "that's where the asynchronous nature",
    "start": "145440",
    "end": "147200"
  },
  {
    "text": "comes",
    "start": "147200",
    "end": "148040"
  },
  {
    "text": "from almost everything around node is",
    "start": "148040",
    "end": "150480"
  },
  {
    "text": "built around",
    "start": "150480",
    "end": "151879"
  },
  {
    "text": "async.io and the reason that's really",
    "start": "151879",
    "end": "154080"
  },
  {
    "text": "great is we don't have",
    "start": "154080",
    "end": "156360"
  },
  {
    "text": "to we can have things happen without",
    "start": "156360",
    "end": "159360"
  },
  {
    "text": "sequence so like languages like Python",
    "start": "159360",
    "end": "163519"
  },
  {
    "text": "uh Pearl PHP C they don't do async just",
    "start": "163519",
    "end": "168680"
  },
  {
    "text": "automatically and this can really help",
    "start": "168680",
    "end": "170879"
  },
  {
    "text": "you especially with when you're doing IO",
    "start": "170879",
    "end": "172800"
  },
  {
    "text": "based applications for server work so",
    "start": "172800",
    "end": "175920"
  },
  {
    "text": "the callback happens once the server is",
    "start": "175920",
    "end": "178480"
  },
  {
    "text": "created asynchronously so if you had",
    "start": "178480",
    "end": "180400"
  },
  {
    "text": "another command down here it might",
    "start": "180400",
    "end": "183760"
  },
  {
    "text": "execute next and then while this is",
    "start": "183760",
    "end": "185599"
  },
  {
    "text": "setting up then that series of functions",
    "start": "185599",
    "end": "187920"
  },
  {
    "text": "would execute and once something else",
    "start": "187920",
    "end": "189680"
  },
  {
    "text": "called that called a scheduling function",
    "start": "189680",
    "end": "192080"
  },
  {
    "text": "then this would call back so what",
    "start": "192080",
    "end": "195440"
  },
  {
    "text": "happens here is this call back happens",
    "start": "195440",
    "end": "196959"
  },
  {
    "text": "and you get these two objects request",
    "start": "196959",
    "end": "198480"
  },
  {
    "text": "and response and those are nodeish",
    "start": "198480",
    "end": "201360"
  },
  {
    "text": "objects for handling HTTP request and",
    "start": "201360",
    "end": "203360"
  },
  {
    "text": "response and we're just creating a",
    "start": "203360",
    "end": "205200"
  },
  {
    "text": "header we're giving it a 200 status and",
    "start": "205200",
    "end": "208239"
  },
  {
    "text": "then a content type and then we're just",
    "start": "208239",
    "end": "210239"
  },
  {
    "text": "setting an end with a message and then",
    "start": "210239",
    "end": "212560"
  },
  {
    "text": "we set use the return object to have it",
    "start": "212560",
    "end": "215840"
  },
  {
    "text": "listen and then we bind a port uh a",
    "start": "215840",
    "end": "218239"
  },
  {
    "text": "binding address so this one's only",
    "start": "218239",
    "end": "220480"
  },
  {
    "text": "listening on the local host",
    "start": "220480",
    "end": "222920"
  },
  {
    "text": "address relatively make sense",
    "start": "222920",
    "end": "227000"
  },
  {
    "text": "cool so there's some few conventions in",
    "start": "227000",
    "end": "229760"
  },
  {
    "text": "node one is uh error first so in the",
    "start": "229760",
    "end": "233120"
  },
  {
    "text": "call back like if you have a callback",
    "start": "233120",
    "end": "234879"
  },
  {
    "start": "234000",
    "end": "234000"
  },
  {
    "text": "and it's going to return an error object",
    "start": "234879",
    "end": "237439"
  },
  {
    "text": "we put it first i I kind of like that",
    "start": "237439",
    "end": "240000"
  },
  {
    "text": "because if you have an error it's the",
    "start": "240000",
    "end": "241519"
  },
  {
    "text": "first thing you want to handle so what",
    "start": "241519",
    "end": "244159"
  },
  {
    "text": "we've got is this read file and if there",
    "start": "244159",
    "end": "246159"
  },
  {
    "text": "is no such file we would get the error",
    "start": "246159",
    "end": "248959"
  },
  {
    "text": "object and then we could just throw an",
    "start": "248959",
    "end": "251319"
  },
  {
    "text": "exception and if there was the file we",
    "start": "251319",
    "end": "253840"
  },
  {
    "text": "could just print it out uh here's",
    "start": "253840",
    "end": "256239"
  },
  {
    "text": "another one that's using rename the FS",
    "start": "256239",
    "end": "258799"
  },
  {
    "text": "module in node is probably the good best",
    "start": "258799",
    "end": "261359"
  },
  {
    "text": "one that sort of typifies the error",
    "start": "261359",
    "end": "263080"
  },
  {
    "text": "first whoa",
    "start": "263080",
    "end": "267080"
  },
  {
    "text": "okay so pretty much error first if",
    "start": "270600",
    "end": "273759"
  },
  {
    "text": "you've got it first thing you check for",
    "start": "273759",
    "end": "276160"
  },
  {
    "text": "in a function and you just handle",
    "start": "276160",
    "end": "279400"
  },
  {
    "text": "it the other convention when you're",
    "start": "279400",
    "end": "281840"
  },
  {
    "text": "writing callbacks is uh the call back",
    "start": "281840",
    "end": "284639"
  },
  {
    "text": "last so again the fs module it has like",
    "start": "284639",
    "end": "288160"
  },
  {
    "text": "a series of arguments the last one is",
    "start": "288160",
    "end": "291199"
  },
  {
    "text": "the callback you see this in fs read",
    "start": "291199",
    "end": "293960"
  },
  {
    "text": "file you see this here in net create",
    "start": "293960",
    "end": "297000"
  },
  {
    "text": "server and also in the",
    "start": "297000",
    "end": "300960"
  },
  {
    "start": "305000",
    "end": "305000"
  },
  {
    "text": "listen so one of the problems uh a lot",
    "start": "305320",
    "end": "308400"
  },
  {
    "text": "of people criticize node for is the uh",
    "start": "308400",
    "end": "310479"
  },
  {
    "text": "nested callbacks so people will often",
    "start": "310479",
    "end": "313840"
  },
  {
    "text": "nest callbacks to do actions in sequence",
    "start": "313840",
    "end": "317759"
  },
  {
    "text": "because if you just try to do these",
    "start": "317759",
    "end": "319919"
  },
  {
    "text": "outside the",
    "start": "319919",
    "end": "321080"
  },
  {
    "text": "callback one would happen in the wrong",
    "start": "321080",
    "end": "324240"
  },
  {
    "text": "order so what you want to do is you want",
    "start": "324240",
    "end": "326800"
  },
  {
    "text": "to basically you have a callback after",
    "start": "326800",
    "end": "329280"
  },
  {
    "text": "the files read what we're doing checking",
    "start": "329280",
    "end": "331919"
  },
  {
    "text": "the error and then what we do is we're",
    "start": "331919",
    "end": "333520"
  },
  {
    "text": "doing like a converting it to a string",
    "start": "333520",
    "end": "335199"
  },
  {
    "text": "and then doing a replace so what this",
    "start": "335199",
    "end": "336960"
  },
  {
    "text": "function does is convert every var to",
    "start": "336960",
    "end": "339840"
  },
  {
    "text": "banana in the code the file that it's",
    "start": "339840",
    "end": "342759"
  },
  {
    "text": "reading and then after the fact it",
    "start": "342759",
    "end": "345199"
  },
  {
    "text": "writes it to the same file name with a",
    "start": "345199",
    "end": "347360"
  },
  {
    "text": "new extension and so what's happening is",
    "start": "347360",
    "end": "350080"
  },
  {
    "text": "a nesting and with just three functions",
    "start": "350080",
    "end": "352240"
  },
  {
    "text": "not too bad but you could imagine if you",
    "start": "352240",
    "end": "354800"
  },
  {
    "text": "had 12 or 20 it would become this big",
    "start": "354800",
    "end": "360320"
  },
  {
    "text": "indented call back from help so there's",
    "start": "360320",
    "end": "363759"
  },
  {
    "text": "a few solutions for that and we're gonna",
    "start": "363759",
    "end": "365680"
  },
  {
    "text": "just take a look at",
    "start": "365680",
    "end": "368479"
  },
  {
    "text": "them one is the async module this is",
    "start": "368759",
    "end": "372560"
  },
  {
    "text": "like the first one I sort of learned i",
    "start": "372560",
    "end": "375600"
  },
  {
    "text": "really It's very intimidating at first",
    "start": "375600",
    "end": "378560"
  },
  {
    "text": "um I actually prefer promises we'll go",
    "start": "378560",
    "end": "381440"
  },
  {
    "text": "over that next but what this is doing is",
    "start": "381440",
    "end": "384319"
  },
  {
    "text": "the same thing as the last one but it is",
    "start": "384319",
    "end": "387520"
  },
  {
    "text": "essentially we're passing this function",
    "start": "387520",
    "end": "390199"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "waterfall an array of functions to",
    "start": "390199",
    "end": "392720"
  },
  {
    "text": "execute in",
    "start": "392720",
    "end": "394039"
  },
  {
    "text": "sequence so this way if we had 20 or 30",
    "start": "394039",
    "end": "397840"
  },
  {
    "text": "or an arbitrary number of functions then",
    "start": "397840",
    "end": "400479"
  },
  {
    "text": "they would all execute one at a time in",
    "start": "400479",
    "end": "402720"
  },
  {
    "text": "this case the waterfall what it does is",
    "start": "402720",
    "end": "405199"
  },
  {
    "text": "the output of each function becomes the",
    "start": "405199",
    "end": "407039"
  },
  {
    "text": "input to the next little tricky but it",
    "start": "407039",
    "end": "409680"
  },
  {
    "text": "works very well for this little function",
    "start": "409680",
    "end": "411759"
  },
  {
    "text": "we're",
    "start": "411759",
    "end": "412759"
  },
  {
    "text": "doing it's",
    "start": "412759",
    "end": "414759"
  },
  {
    "text": "still I think everyone when they first",
    "start": "414759",
    "end": "416960"
  },
  {
    "text": "look at async for the first time has a",
    "start": "416960",
    "end": "419039"
  },
  {
    "text": "what the hell it it is a bit confusing",
    "start": "419039",
    "end": "422240"
  },
  {
    "text": "it's a bit complex u it's very",
    "start": "422240",
    "end": "424639"
  },
  {
    "text": "functional if you can think of any sort",
    "start": "424639",
    "end": "426520"
  },
  {
    "text": "of asynchronous control flow async can",
    "start": "426520",
    "end": "429520"
  },
  {
    "text": "probably do it but the same is mostly",
    "start": "429520",
    "end": "432800"
  },
  {
    "text": "true with promises",
    "start": "432800",
    "end": "436198"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "so here's an example with promises and I",
    "start": "438720",
    "end": "442080"
  },
  {
    "text": "think if you look at it you might think",
    "start": "442080",
    "end": "443759"
  },
  {
    "text": "this is a little",
    "start": "443759",
    "end": "445400"
  },
  {
    "text": "cleaner uh I'm not as good with promises",
    "start": "445400",
    "end": "448560"
  },
  {
    "text": "but I I do generally like them uh I like",
    "start": "448560",
    "end": "450720"
  },
  {
    "text": "the Bluebird a little bit better in Q a",
    "start": "450720",
    "end": "453440"
  },
  {
    "text": "little faster but I also it's a little",
    "start": "453440",
    "end": "456039"
  },
  {
    "text": "simpler now one thing that it has to do",
    "start": "456039",
    "end": "459560"
  },
  {
    "text": "is node is a callbackbased interface so",
    "start": "459560",
    "end": "465120"
  },
  {
    "text": "it has to essentially",
    "start": "465120",
    "end": "467000"
  },
  {
    "text": "promiseify what parts of node you're",
    "start": "467000",
    "end": "469199"
  },
  {
    "text": "using so that those functions in this",
    "start": "469199",
    "end": "471520"
  },
  {
    "text": "module will now return",
    "start": "471520",
    "end": "473560"
  },
  {
    "text": "promises so here what we're doing is",
    "start": "473560",
    "end": "476400"
  },
  {
    "text": "we're using the promisified read file",
    "start": "476400",
    "end": "480120"
  },
  {
    "text": "async and then we have a then so this is",
    "start": "480120",
    "end": "483120"
  },
  {
    "text": "what happens afterwards it and then we",
    "start": "483120",
    "end": "486479"
  },
  {
    "text": "have another then so this is what",
    "start": "486479",
    "end": "488080"
  },
  {
    "text": "happens after that and then that makes a",
    "start": "488080",
    "end": "490479"
  },
  {
    "text": "sort of declarative model that's easy to",
    "start": "490479",
    "end": "493039"
  },
  {
    "text": "follow",
    "start": "493039",
    "end": "494680"
  },
  {
    "text": "so what promises does it makes I think",
    "start": "494680",
    "end": "497520"
  },
  {
    "text": "it makes it a bit easier to read async",
    "start": "497520",
    "end": "500080"
  },
  {
    "text": "code any question yeah so um I mean if",
    "start": "500080",
    "end": "504319"
  },
  {
    "text": "you're doing everything in series why",
    "start": "504319",
    "end": "505840"
  },
  {
    "text": "wouldn't you just do it synchronously",
    "start": "505840",
    "end": "508800"
  },
  {
    "text": "you could do synchronous code but I",
    "start": "508800",
    "end": "510639"
  },
  {
    "text": "think what we're trying to do in node is",
    "start": "510639",
    "end": "512479"
  },
  {
    "text": "we're trying to take it advantage of",
    "start": "512479",
    "end": "514479"
  },
  {
    "text": "performance so if we're doing something",
    "start": "514479",
    "end": "517279"
  },
  {
    "text": "in sequence let's say we're going to do",
    "start": "517279",
    "end": "518479"
  },
  {
    "text": "something IO based which is usually what",
    "start": "518479",
    "end": "520000"
  },
  {
    "text": "servers do there's a long latency to",
    "start": "520000",
    "end": "523039"
  },
  {
    "text": "read a file and then wait for the",
    "start": "523039",
    "end": "524560"
  },
  {
    "text": "results so what we try to do is we try",
    "start": "524560",
    "end": "527360"
  },
  {
    "text": "and like start the reading",
    "start": "527360",
    "end": "528800"
  },
  {
    "text": "asynchronously and then do something",
    "start": "528800",
    "end": "530920"
  },
  {
    "text": "else otherwise like let's say we had an",
    "start": "530920",
    "end": "533040"
  },
  {
    "text": "8 core system and they were all reading",
    "start": "533040",
    "end": "534320"
  },
  {
    "text": "a file at the same time you got to wait",
    "start": "534320",
    "end": "536080"
  },
  {
    "text": "all that time to get the stuff from disk",
    "start": "536080",
    "end": "537519"
  },
  {
    "text": "and then get it back so and that's",
    "start": "537519",
    "end": "540000"
  },
  {
    "text": "that's the advantage of note so even if",
    "start": "540000",
    "end": "541440"
  },
  {
    "text": "you're using one core we can start doing",
    "start": "541440",
    "end": "543279"
  },
  {
    "text": "a lot of asynchronous actions and just",
    "start": "543279",
    "end": "545120"
  },
  {
    "text": "you know take advantage of the fact that",
    "start": "545120",
    "end": "546480"
  },
  {
    "text": "they're going to take a long time to",
    "start": "546480",
    "end": "547440"
  },
  {
    "text": "complete and just get a lot of stuff",
    "start": "547440",
    "end": "549240"
  },
  {
    "text": "done and that's I think one of the",
    "start": "549240",
    "end": "551200"
  },
  {
    "text": "beauty of note is it was written to do",
    "start": "551200",
    "end": "553480"
  },
  {
    "text": "async but it also you know if you're not",
    "start": "553480",
    "end": "556320"
  },
  {
    "text": "really using a good sort of flow control",
    "start": "556320",
    "end": "558519"
  },
  {
    "text": "library can be a negative so I highly",
    "start": "558519",
    "end": "561920"
  },
  {
    "text": "recommend if you get into node pick one",
    "start": "561920",
    "end": "564320"
  },
  {
    "text": "style of flow flow control library and",
    "start": "564320",
    "end": "566480"
  },
  {
    "text": "just start using it",
    "start": "566480",
    "end": "570120"
  },
  {
    "start": "571000",
    "end": "571000"
  },
  {
    "text": "so we're gonna do streams in two minutes",
    "start": "571920",
    "end": "576600"
  },
  {
    "text": "yeah there is a lot of stuff I'm not",
    "start": "579480",
    "end": "582000"
  },
  {
    "text": "going to tell you about",
    "start": "582000",
    "end": "583720"
  },
  {
    "text": "streams basically it uses events to pass",
    "start": "583720",
    "end": "586640"
  },
  {
    "text": "data communicate errors signal things",
    "start": "586640",
    "end": "588880"
  },
  {
    "text": "like the end of the stream and the input",
    "start": "588880",
    "end": "591040"
  },
  {
    "text": "uh data is passed by using buffers",
    "start": "591040",
    "end": "593519"
  },
  {
    "text": "buffer objects um streams can be",
    "start": "593519",
    "end": "596800"
  },
  {
    "text": "readable writable or transform streams",
    "start": "596800",
    "end": "599519"
  },
  {
    "text": "so if you wanted to like change an",
    "start": "599519",
    "end": "601040"
  },
  {
    "text": "encoding scheme from some one thing to",
    "start": "601040",
    "end": "603600"
  },
  {
    "text": "another you could write a transform",
    "start": "603600",
    "end": "605680"
  },
  {
    "text": "stream uh readable streams can be piped",
    "start": "605680",
    "end": "608320"
  },
  {
    "text": "to writable streams so you can make a",
    "start": "608320",
    "end": "610160"
  },
  {
    "text": "sequence or chain um so if you wanted to",
    "start": "610160",
    "end": "613680"
  },
  {
    "text": "do like essentially we have some code",
    "start": "613680",
    "end": "615760"
  },
  {
    "text": "here that actually takes the input from",
    "start": "615760",
    "end": "617519"
  },
  {
    "text": "one API and just streams it to another",
    "start": "617519",
    "end": "619279"
  },
  {
    "text": "so we don't have to buffer and that's",
    "start": "619279",
    "end": "620959"
  },
  {
    "text": "that's a huge advantage of node a lot of",
    "start": "620959",
    "end": "623040"
  },
  {
    "text": "people talk about back pressure in",
    "start": "623040",
    "end": "625040"
  },
  {
    "text": "servers from buffering if something's",
    "start": "625040",
    "end": "626880"
  },
  {
    "text": "too an API is too slow uh with the",
    "start": "626880",
    "end": "629839"
  },
  {
    "text": "streams you don't really have that",
    "start": "629839",
    "end": "631360"
  },
  {
    "text": "significant",
    "start": "631360",
    "end": "632680"
  },
  {
    "text": "problem uh streams have an API so and",
    "start": "632680",
    "end": "635839"
  },
  {
    "text": "methods to implement them so you can",
    "start": "635839",
    "end": "637200"
  },
  {
    "text": "actually create your own stream again a",
    "start": "637200",
    "end": "640000"
  },
  {
    "text": "kind of cool thing to do is the",
    "start": "640000",
    "end": "641360"
  },
  {
    "text": "transform stream so if you wanted to",
    "start": "641360",
    "end": "642959"
  },
  {
    "text": "change an encoding or change a request",
    "start": "642959",
    "end": "645040"
  },
  {
    "text": "or mutate something streams are a great",
    "start": "645040",
    "end": "647839"
  },
  {
    "text": "way to do that",
    "start": "647839",
    "end": "651240"
  },
  {
    "start": "651000",
    "end": "651000"
  },
  {
    "text": "this example shows reading from a stream",
    "start": "651360",
    "end": "654600"
  },
  {
    "text": "so here's like a function and it's got",
    "start": "654600",
    "end": "657519"
  },
  {
    "text": "like the HTTP request object now you",
    "start": "657519",
    "end": "659279"
  },
  {
    "text": "could actually use this in that uh hello",
    "start": "659279",
    "end": "661440"
  },
  {
    "text": "world let's say if we wanted that hello",
    "start": "661440",
    "end": "663600"
  },
  {
    "text": "world didn't really do anything useful",
    "start": "663600",
    "end": "665120"
  },
  {
    "text": "it just responded to every sort of HTTP",
    "start": "665120",
    "end": "667360"
  },
  {
    "text": "request so just hello world ignored any",
    "start": "667360",
    "end": "669360"
  },
  {
    "text": "thing that was coming in if we actually",
    "start": "669360",
    "end": "671519"
  },
  {
    "text": "wanted to read the data uh from the body",
    "start": "671519",
    "end": "674640"
  },
  {
    "text": "we could actually write this so what we",
    "start": "674640",
    "end": "676720"
  },
  {
    "text": "would do is start a little string have",
    "start": "676720",
    "end": "679519"
  },
  {
    "text": "an event uh that would capture the data",
    "start": "679519",
    "end": "682640"
  },
  {
    "text": "and by the way I'm really nervous that",
    "start": "682640",
    "end": "684160"
  },
  {
    "text": "force is looking this because this guy's",
    "start": "684160",
    "end": "685440"
  },
  {
    "text": "really knows a lot about nodes right up",
    "start": "685440",
    "end": "687279"
  },
  {
    "text": "here just",
    "start": "687279",
    "end": "690920"
  },
  {
    "text": "and then we have like an end a signal",
    "start": "691120",
    "end": "693120"
  },
  {
    "text": "there's a lot again these are",
    "start": "693120",
    "end": "695279"
  },
  {
    "text": "illustrative this these are not all the",
    "start": "695279",
    "end": "696880"
  },
  {
    "text": "events you would want to handle this is",
    "start": "696880",
    "end": "698640"
  },
  {
    "text": "just to give you a sort of flavor and",
    "start": "698640",
    "end": "700240"
  },
  {
    "text": "idea again illustrative so what we're",
    "start": "700240",
    "end": "703040"
  },
  {
    "text": "doing is on the end event then we've got",
    "start": "703040",
    "end": "704640"
  },
  {
    "text": "it and then we can have a call back and",
    "start": "704640",
    "end": "706560"
  },
  {
    "text": "pass the body back the reason I put",
    "start": "706560",
    "end": "708640"
  },
  {
    "text": "undefined is because normally we have a",
    "start": "708640",
    "end": "710320"
  },
  {
    "text": "convention of error first if there was",
    "start": "710320",
    "end": "713360"
  },
  {
    "text": "there was an error event and in the case",
    "start": "713360",
    "end": "715360"
  },
  {
    "text": "that I received an error event then it",
    "start": "715360",
    "end": "716640"
  },
  {
    "text": "would pass a call back with an",
    "start": "716640",
    "end": "718600"
  },
  {
    "text": "error so that was how you would collect",
    "start": "718600",
    "end": "721120"
  },
  {
    "text": "the body in the hello world so you could",
    "start": "721120",
    "end": "723440"
  },
  {
    "text": "actually combine these two and have",
    "start": "723440",
    "end": "725200"
  },
  {
    "text": "something that did something almost",
    "start": "725200",
    "end": "728560"
  },
  {
    "text": "useful okay here's cluster in two",
    "start": "730200",
    "end": "732800"
  },
  {
    "text": "minutes",
    "start": "732800",
    "end": "735600"
  },
  {
    "text": "um if you ever used Unix or done some",
    "start": "735600",
    "end": "738160"
  },
  {
    "text": "Unix C programming and you use fork exec",
    "start": "738160",
    "end": "741200"
  },
  {
    "text": "it's kind of like that otherwise it's",
    "start": "741200",
    "end": "743519"
  },
  {
    "text": "just",
    "start": "743519",
    "end": "745160"
  },
  {
    "text": "magic um the master basically is forking",
    "start": "745160",
    "end": "748160"
  },
  {
    "text": "the child processes and I'm really",
    "start": "748160",
    "end": "750000"
  },
  {
    "text": "handwaving a bit here each child process",
    "start": "750000",
    "end": "752880"
  },
  {
    "text": "calls listen in node but the socket and",
    "start": "752880",
    "end": "756320"
  },
  {
    "text": "listening is actually not happening",
    "start": "756320",
    "end": "757760"
  },
  {
    "text": "there the uh master is actually managing",
    "start": "757760",
    "end": "760880"
  },
  {
    "text": "that IO and then sending the requests to",
    "start": "760880",
    "end": "763760"
  },
  {
    "text": "the children that are listening to that",
    "start": "763760",
    "end": "765440"
  },
  {
    "text": "port i believe children can now listen",
    "start": "765440",
    "end": "767600"
  },
  {
    "start": "767000",
    "end": "767000"
  },
  {
    "text": "to different ports and all the children",
    "start": "767600",
    "end": "769440"
  },
  {
    "text": "have to listen to one port now",
    "start": "769440",
    "end": "772079"
  },
  {
    "text": "uh events coord can coordinate the",
    "start": "772079",
    "end": "774240"
  },
  {
    "text": "master and the children um there's also",
    "start": "774240",
    "end": "777680"
  },
  {
    "text": "listening disconnect events exit and",
    "start": "777680",
    "end": "780600"
  },
  {
    "text": "setup i think that's it and basically",
    "start": "780600",
    "end": "784480"
  },
  {
    "text": "there's a message passing API so the",
    "start": "784480",
    "end": "787120"
  },
  {
    "text": "children can communicate and coordinate",
    "start": "787120",
    "end": "789760"
  },
  {
    "text": "uh sort of out of band information with",
    "start": "789760",
    "end": "791519"
  },
  {
    "text": "the server when you have Yes so why do",
    "start": "791519",
    "end": "794240"
  },
  {
    "text": "we want to use cluster ah well if you",
    "start": "794240",
    "end": "796959"
  },
  {
    "text": "did not use cluster and you had like a",
    "start": "796959",
    "end": "800000"
  },
  {
    "text": "single threaded thing it would be hard",
    "start": "800000",
    "end": "801360"
  },
  {
    "text": "to take advantage of all the uh CPUs so",
    "start": "801360",
    "end": "804880"
  },
  {
    "text": "if you basically did not use cluster and",
    "start": "804880",
    "end": "807680"
  },
  {
    "text": "you're doing like a lot of activity your",
    "start": "807680",
    "end": "810399"
  },
  {
    "text": "other CPUs would be sitting mostly now",
    "start": "810399",
    "end": "813120"
  },
  {
    "text": "there are some threads in node uh and in",
    "start": "813120",
    "end": "815639"
  },
  {
    "text": "libuv but we okay don't talk forget",
    "start": "815639",
    "end": "819839"
  },
  {
    "text": "there there are no threads node is",
    "start": "819839",
    "end": "821440"
  },
  {
    "text": "entirely",
    "start": "821440",
    "end": "823839"
  },
  {
    "text": "singlethreaded uh but if you didn't use",
    "start": "824519",
    "end": "827360"
  },
  {
    "text": "cluster those other CPUs wouldn't be",
    "start": "827360",
    "end": "829200"
  },
  {
    "text": "doing anything so normally you'll see",
    "start": "829200",
    "end": "832880"
  },
  {
    "text": "like standard node programs you'll see",
    "start": "832880",
    "end": "834720"
  },
  {
    "text": "like some piece of code that'll be",
    "start": "834720",
    "end": "836760"
  },
  {
    "text": "forking there's a proc the process",
    "start": "836760",
    "end": "839199"
  },
  {
    "text": "object will tell you how many cores and",
    "start": "839199",
    "end": "841199"
  },
  {
    "text": "you usually see a for loop forking once",
    "start": "841199",
    "end": "843279"
  },
  {
    "text": "for every core uh that's not exactly",
    "start": "843279",
    "end": "846160"
  },
  {
    "text": "right sometimes you really need to look",
    "start": "846160",
    "end": "847199"
  },
  {
    "text": "at your application and figure out how",
    "start": "847199",
    "end": "848560"
  },
  {
    "text": "much you can take these things are",
    "start": "848560",
    "end": "850240"
  },
  {
    "text": "mostly doing IO they're not typically",
    "start": "850240",
    "end": "852079"
  },
  {
    "text": "doing CPUbound activity so usually can",
    "start": "852079",
    "end": "854480"
  },
  {
    "text": "overload them a little bit more so",
    "start": "854480",
    "end": "857120"
  },
  {
    "text": "here's a little simple cluster example",
    "start": "857120",
    "end": "860040"
  },
  {
    "text": "uh if basically we have like the cluster",
    "start": "860040",
    "end": "862800"
  },
  {
    "text": "object will tell you if it is a master",
    "start": "862800",
    "end": "864639"
  },
  {
    "text": "or a worker and so if we're in the",
    "start": "864639",
    "end": "867920"
  },
  {
    "text": "master then we're going to fork off just",
    "start": "867920",
    "end": "870240"
  },
  {
    "start": "868000",
    "end": "868000"
  },
  {
    "text": "three",
    "start": "870240",
    "end": "871240"
  },
  {
    "text": "forks and we have an event for listening",
    "start": "871240",
    "end": "874320"
  },
  {
    "text": "so once the workers are there then we",
    "start": "874320",
    "end": "876240"
  },
  {
    "text": "just say that this worker is listening",
    "start": "876240",
    "end": "879360"
  },
  {
    "text": "and here's the what the worker uh each",
    "start": "879360",
    "end": "881279"
  },
  {
    "text": "worker will do so because if we're not a",
    "start": "881279",
    "end": "883120"
  },
  {
    "text": "master we are a worker they each one",
    "start": "883120",
    "end": "885600"
  },
  {
    "text": "create a server that's listening on a",
    "start": "885600",
    "end": "887279"
  },
  {
    "text": "port 8,000 and each one will then the",
    "start": "887279",
    "end": "890959"
  },
  {
    "text": "master will just print out each one",
    "start": "890959",
    "end": "892560"
  },
  {
    "text": "that's listening when it gets the event",
    "start": "892560",
    "end": "894880"
  },
  {
    "text": "there are other events too this is just",
    "start": "894880",
    "end": "896800"
  },
  {
    "text": "a little thing and sets up a little HTTP",
    "start": "896800",
    "end": "898720"
  },
  {
    "text": "server with three workers so each one",
    "start": "898720",
    "end": "900800"
  },
  {
    "text": "would say hello world when you made a",
    "start": "900800",
    "end": "902399"
  },
  {
    "text": "request and if you did this you might",
    "start": "902399",
    "end": "904240"
  },
  {
    "text": "notice a bug where one of them is",
    "start": "904240",
    "end": "906240"
  },
  {
    "text": "answering more than the others which I'm",
    "start": "906240",
    "end": "908240"
  },
  {
    "text": "waiting for the next release that has",
    "start": "908240",
    "end": "910959"
  },
  {
    "text": "that fix",
    "start": "910959",
    "end": "914360"
  },
  {
    "text": "yes",
    "start": "915519",
    "end": "918519"
  },
  {
    "text": "okay it sort of like virtually they are",
    "start": "924000",
    "end": "926560"
  },
  {
    "text": "all listening but actually there's only",
    "start": "926560",
    "end": "928160"
  },
  {
    "text": "the master process is actually listening",
    "start": "928160",
    "end": "929839"
  },
  {
    "text": "to that and then dispatching the",
    "start": "929839",
    "end": "931560"
  },
  {
    "text": "requests in theory around Robin or",
    "start": "931560",
    "end": "934000"
  },
  {
    "text": "randomly but there there's a bit of bias",
    "start": "934000",
    "end": "936000"
  },
  {
    "text": "right now so so does that mean that you",
    "start": "936000",
    "end": "938079"
  },
  {
    "text": "need to play the master process if the",
    "start": "938079",
    "end": "941680"
  },
  {
    "text": "master process was doing a lot of CPU",
    "start": "941680",
    "end": "943519"
  },
  {
    "text": "that would be a limiting factor to what",
    "start": "943519",
    "end": "945920"
  },
  {
    "text": "you can do in terms of number of",
    "start": "945920",
    "end": "947480"
  },
  {
    "text": "transactions but you it is it is a limit",
    "start": "947480",
    "end": "950399"
  },
  {
    "text": "in how much it can dispatch to the",
    "start": "950399",
    "end": "952320"
  },
  {
    "text": "others but normally that's not a problem",
    "start": "952320",
    "end": "953839"
  },
  {
    "text": "because the IO dispatching is very cheap",
    "start": "953839",
    "end": "956560"
  },
  {
    "text": "and then here's what the output of that",
    "start": "956560",
    "end": "958720"
  },
  {
    "text": "last program would be essentially a type",
    "start": "958720",
    "end": "960399"
  },
  {
    "text": "node cluster you'd see workers each",
    "start": "960399",
    "end": "962079"
  },
  {
    "start": "961000",
    "end": "961000"
  },
  {
    "text": "worker's listing they won't necessarily",
    "start": "962079",
    "end": "964000"
  },
  {
    "text": "be in order because it's you know not",
    "start": "964000",
    "end": "966480"
  },
  {
    "text": "sequential code it's asynchronous and if",
    "start": "966480",
    "end": "968880"
  },
  {
    "text": "you did the requests from the command",
    "start": "968880",
    "end": "970639"
  },
  {
    "text": "line you might see something a lot like",
    "start": "970639",
    "end": "972880"
  },
  {
    "text": "this which I'm waiting for that bug to",
    "start": "972880",
    "end": "974720"
  },
  {
    "text": "be fixed",
    "start": "974720",
    "end": "976639"
  },
  {
    "text": "two weeks okay two weeks",
    "start": "976639",
    "end": "980920"
  },
  {
    "text": "yay okay here's a quick example of TCP",
    "start": "981959",
    "end": "985519"
  },
  {
    "start": "982000",
    "end": "982000"
  },
  {
    "text": "sockets so again almost all this",
    "start": "985519",
    "end": "988079"
  },
  {
    "text": "functional the really cool thing is if",
    "start": "988079",
    "end": "989519"
  },
  {
    "text": "you look in the node you almost all this",
    "start": "989519",
    "end": "991279"
  },
  {
    "text": "functionality is in JavaScript but",
    "start": "991279",
    "end": "992880"
  },
  {
    "text": "dependent on functionality within the",
    "start": "992880",
    "end": "995199"
  },
  {
    "text": "C++ container so here we're creating a",
    "start": "995199",
    "end": "998639"
  },
  {
    "text": "server and this is not an HP server it's",
    "start": "998639",
    "end": "1000560"
  },
  {
    "text": "just a TCP server and this is the",
    "start": "1000560",
    "end": "1003519"
  },
  {
    "text": "listening uh I think they call the",
    "start": "1003519",
    "end": "1006759"
  },
  {
    "text": "listener and what it does is I'm just",
    "start": "1006759",
    "end": "1009680"
  },
  {
    "text": "doing a little hacky thing it's a hacky",
    "start": "1009680",
    "end": "1011360"
  },
  {
    "text": "little chat server so I take the um the",
    "start": "1011360",
    "end": "1016240"
  },
  {
    "text": "basically I have an object and then I",
    "start": "1016240",
    "end": "1017759"
  },
  {
    "text": "take the file descriptor and use that as",
    "start": "1017759",
    "end": "1019519"
  },
  {
    "text": "a property this is very hacky code don't",
    "start": "1019519",
    "end": "1021759"
  },
  {
    "text": "please don't do",
    "start": "1021759",
    "end": "1023959"
  },
  {
    "text": "this okay i don't know why that's",
    "start": "1023959",
    "end": "1026918"
  },
  {
    "text": "happening",
    "start": "1026919",
    "end": "1029160"
  },
  {
    "text": "so then basically what I do is I",
    "start": "1029160",
    "end": "1032240"
  },
  {
    "text": "disconnect when there's an end event and",
    "start": "1032240",
    "end": "1034640"
  },
  {
    "text": "then on a data what I'm doing is I'm",
    "start": "1034640",
    "end": "1036558"
  },
  {
    "text": "displaying whatever was read in to",
    "start": "1036559",
    "end": "1038798"
  },
  {
    "text": "everyone but the current socket so it",
    "start": "1038799",
    "end": "1041839"
  },
  {
    "text": "makes a little poor man's chat",
    "start": "1041839",
    "end": "1044360"
  },
  {
    "text": "server and here is where we cause the",
    "start": "1044360",
    "end": "1047438"
  },
  {
    "text": "server to",
    "start": "1047439",
    "end": "1048439"
  },
  {
    "text": "listen the neat thing the reason I",
    "start": "1048440",
    "end": "1051120"
  },
  {
    "text": "really like this because it gives you a",
    "start": "1051120",
    "end": "1052320"
  },
  {
    "text": "lot of boilerplate like I'm a C",
    "start": "1052320",
    "end": "1053840"
  },
  {
    "text": "programmer was a C programmer for many",
    "start": "1053840",
    "end": "1055520"
  },
  {
    "text": "years doing all this functionality that",
    "start": "1055520",
    "end": "1057679"
  },
  {
    "text": "I'm showing you that can be done in a",
    "start": "1057679",
    "end": "1059280"
  },
  {
    "text": "few minutes would take you know a few",
    "start": "1059280",
    "end": "1062320"
  },
  {
    "text": "hours so the time savings using a",
    "start": "1062320",
    "end": "1066000"
  },
  {
    "text": "language with a lot of bakedin",
    "start": "1066000",
    "end": "1067960"
  },
  {
    "text": "functionality is significant",
    "start": "1067960",
    "end": "1072320"
  },
  {
    "text": "here is something with UDP i'm actually",
    "start": "1073640",
    "end": "1075919"
  },
  {
    "text": "a big fan i don't think UDP is used",
    "start": "1075919",
    "end": "1077520"
  },
  {
    "text": "enough um it is unreliable but within",
    "start": "1077520",
    "end": "1081280"
  },
  {
    "text": "like one LAN it's entirely safe",
    "start": "1081280",
    "end": "1085240"
  },
  {
    "text": "uh assuming you're not overloading your",
    "start": "1085240",
    "end": "1087520"
  },
  {
    "text": "routers or",
    "start": "1087520",
    "end": "1088600"
  },
  {
    "text": "anything so again we have like it's",
    "start": "1088600",
    "end": "1090880"
  },
  {
    "text": "event oriented so this thing shows how",
    "start": "1090880",
    "end": "1094000"
  },
  {
    "start": "1091000",
    "end": "1091000"
  },
  {
    "text": "UDP is not server oriented",
    "start": "1094000",
    "end": "1097360"
  },
  {
    "text": "each socket can be listening and sent so",
    "start": "1097360",
    "end": "1100960"
  },
  {
    "text": "we create the socket here uh we use UDP4",
    "start": "1100960",
    "end": "1105360"
  },
  {
    "text": "and then on messages we have a little",
    "start": "1105360",
    "end": "1107280"
  },
  {
    "text": "call back to asynchronous to say what",
    "start": "1107280",
    "end": "1108799"
  },
  {
    "text": "we've received we have to bind a port so",
    "start": "1108799",
    "end": "1112000"
  },
  {
    "text": "the socket can listen and here I'm just",
    "start": "1112000",
    "end": "1115200"
  },
  {
    "text": "to demonstrate it can do something",
    "start": "1115200",
    "end": "1116559"
  },
  {
    "text": "useful i use the Java JavaScript set",
    "start": "1116559",
    "end": "1119280"
  },
  {
    "text": "interval this case it's the node set",
    "start": "1119280",
    "end": "1121679"
  },
  {
    "text": "interval function and basically here is",
    "start": "1121679",
    "end": "1124559"
  },
  {
    "text": "the example of the use of the buffer",
    "start": "1124559",
    "end": "1126600"
  },
  {
    "text": "object and I just send hello world to",
    "start": "1126600",
    "end": "1130640"
  },
  {
    "text": "the",
    "start": "1130640",
    "end": "1133039"
  },
  {
    "text": "socket how are we doing on time five",
    "start": "1135160",
    "end": "1138080"
  },
  {
    "start": "1136000",
    "end": "1136000"
  },
  {
    "text": "minutes got five minutes and I can do",
    "start": "1138080",
    "end": "1141960"
  },
  {
    "text": "this so one of the cooler things and I I",
    "start": "1141960",
    "end": "1146559"
  },
  {
    "text": "think forest is domains are they staying",
    "start": "1146559",
    "end": "1149679"
  },
  {
    "text": "nobody knows okay i like domains and as",
    "start": "1149679",
    "end": "1152640"
  },
  {
    "text": "long as they're there I'm gonna use",
    "start": "1152640",
    "end": "1155000"
  },
  {
    "text": "them um Forest actually gave a great",
    "start": "1155000",
    "end": "1157760"
  },
  {
    "text": "talk on domains uh with Express i highly",
    "start": "1157760",
    "end": "1160640"
  },
  {
    "text": "recommend if you anyone can dig it up it",
    "start": "1160640",
    "end": "1162320"
  },
  {
    "text": "was fantastic",
    "start": "1162320",
    "end": "1164320"
  },
  {
    "text": "so if I use try and catch and I will",
    "start": "1164320",
    "end": "1169200"
  },
  {
    "text": "never see this catch and that's just how",
    "start": "1169200",
    "end": "1172640"
  },
  {
    "text": "it works because this little exception",
    "start": "1172640",
    "end": "1176720"
  },
  {
    "text": "event won't be caught by this because",
    "start": "1176720",
    "end": "1179440"
  },
  {
    "text": "it's going to happen in a call back and",
    "start": "1179440",
    "end": "1182080"
  },
  {
    "text": "that call back has nothing to do with",
    "start": "1182080",
    "end": "1184080"
  },
  {
    "text": "what this try and catch will",
    "start": "1184080",
    "end": "1186760"
  },
  {
    "text": "catch and it just doesn't work with",
    "start": "1186760",
    "end": "1189919"
  },
  {
    "text": "async",
    "start": "1189919",
    "end": "1191760"
  },
  {
    "text": "so the solution is domains domains in",
    "start": "1191760",
    "end": "1193919"
  },
  {
    "text": "two minutes you can't catch errors using",
    "start": "1193919",
    "end": "1196400"
  },
  {
    "text": "async like I said global uncaught",
    "start": "1196400",
    "end": "1198960"
  },
  {
    "text": "exceptional handlers exist in node but",
    "start": "1198960",
    "end": "1201039"
  },
  {
    "text": "they're clumsy don't recommend them uh",
    "start": "1201039",
    "end": "1204160"
  },
  {
    "text": "you don't want to you just want to exit",
    "start": "1204160",
    "end": "1206240"
  },
  {
    "text": "if you've got an async error and it",
    "start": "1206240",
    "end": "1209120"
  },
  {
    "text": "would be awesome to have an error",
    "start": "1209120",
    "end": "1210240"
  },
  {
    "text": "handling that could cover part of your",
    "start": "1210240",
    "end": "1211840"
  },
  {
    "text": "code and that is",
    "start": "1211840",
    "end": "1214720"
  },
  {
    "text": "domains here's an example of a",
    "start": "1214760",
    "end": "1217720"
  },
  {
    "start": "1215000",
    "end": "1215000"
  },
  {
    "text": "domain so again the functionality",
    "start": "1217720",
    "end": "1220320"
  },
  {
    "text": "required we create a domain and this is",
    "start": "1220320",
    "end": "1222799"
  },
  {
    "text": "the really neat thing I like about all",
    "start": "1222799",
    "end": "1224799"
  },
  {
    "text": "of node very simple APIs that are easy",
    "start": "1224799",
    "end": "1227440"
  },
  {
    "text": "to communicate easy to use easy to pick",
    "start": "1227440",
    "end": "1229720"
  },
  {
    "text": "up so we have a a asynchronous error",
    "start": "1229720",
    "end": "1232960"
  },
  {
    "text": "event that we can catch and then we can",
    "start": "1232960",
    "end": "1234400"
  },
  {
    "text": "say error caught by domain and then what",
    "start": "1234400",
    "end": "1237440"
  },
  {
    "text": "we do is we basically run some code",
    "start": "1237440",
    "end": "1240320"
  },
  {
    "text": "within the",
    "start": "1240320",
    "end": "1241320"
  },
  {
    "text": "domain this isn't the only way this is",
    "start": "1241320",
    "end": "1243600"
  },
  {
    "text": "just a way to do it and again what I do",
    "start": "1243600",
    "end": "1246400"
  },
  {
    "text": "is in a callback I after some period of",
    "start": "1246400",
    "end": "1249280"
  },
  {
    "text": "time I throw an exception error and this",
    "start": "1249280",
    "end": "1251600"
  },
  {
    "text": "will be caught",
    "start": "1251600",
    "end": "1252919"
  },
  {
    "text": "here and that's kind of neat so if I",
    "start": "1252919",
    "end": "1255200"
  },
  {
    "text": "could have like a if I had an express or",
    "start": "1255200",
    "end": "1257520"
  },
  {
    "text": "happy JS API I could like set areas or",
    "start": "1257520",
    "end": "1261120"
  },
  {
    "text": "routes or like URIP paths to handle",
    "start": "1261120",
    "end": "1263520"
  },
  {
    "text": "these asynchronous functions and it",
    "start": "1263520",
    "end": "1265440"
  },
  {
    "text": "doesn't matter what through I could",
    "start": "1265440",
    "end": "1267120"
  },
  {
    "text": "handle that and give a sort of cogent",
    "start": "1267120",
    "end": "1270000"
  },
  {
    "text": "response to the client maybe it's just",
    "start": "1270000",
    "end": "1272320"
  },
  {
    "text": "500 error but it's going to be bubbled",
    "start": "1272320",
    "end": "1277360"
  },
  {
    "text": "up so that's it i made it in",
    "start": "1278360",
    "end": "1282880"
  },
  {
    "text": "[Applause]",
    "start": "1283020",
    "end": "1287480"
  },
  {
    "text": "time command line so you want to do",
    "start": "1287480",
    "end": "1290159"
  },
  {
    "text": "something that's not node specific like",
    "start": "1290159",
    "end": "1292000"
  },
  {
    "text": "a sequence of actions that could be run",
    "start": "1292000",
    "end": "1293679"
  },
  {
    "text": "in a browser right right right so So",
    "start": "1293679",
    "end": "1295520"
  },
  {
    "text": "like I didn't want to do like the all of",
    "start": "1295520",
    "end": "1297280"
  },
  {
    "text": "like the the export stuff or Okay um so",
    "start": "1297280",
    "end": "1301039"
  },
  {
    "text": "what you could do is you could use",
    "start": "1301039",
    "end": "1302159"
  },
  {
    "text": "something like browserfy along with uh",
    "start": "1302159",
    "end": "1304559"
  },
  {
    "text": "like say Q or Bluebird and I think async",
    "start": "1304559",
    "end": "1308559"
  },
  {
    "text": "also runs in browsers as well and then",
    "start": "1308559",
    "end": "1310960"
  },
  {
    "text": "you could just basically use the flow",
    "start": "1310960",
    "end": "1313360"
  },
  {
    "text": "control like uh the one the two examples",
    "start": "1313360",
    "end": "1315600"
  },
  {
    "text": "I went over and if you had something",
    "start": "1315600",
    "end": "1317360"
  },
  {
    "text": "that was node specific you could wrap it",
    "start": "1317360",
    "end": "1318960"
  },
  {
    "text": "in an API does that maybe a better",
    "start": "1318960",
    "end": "1322000"
  },
  {
    "text": "question is is there a good a good",
    "start": "1322000",
    "end": "1323679"
  },
  {
    "text": "example uh if you okay I can't think of",
    "start": "1323679",
    "end": "1326880"
  },
  {
    "text": "an example app but some of the co some",
    "start": "1326880",
    "end": "1328480"
  },
  {
    "text": "of the code that I have on the GitHub",
    "start": "1328480",
    "end": "1330000"
  },
  {
    "text": "and I can point you to it uh sort of",
    "start": "1330000",
    "end": "1332400"
  },
  {
    "text": "typified flow control that is not isn't",
    "start": "1332400",
    "end": "1335520"
  },
  {
    "text": "node specific there's a whole node",
    "start": "1335520",
    "end": "1337360"
  },
  {
    "text": "school module for async that's right",
    "start": "1337360",
    "end": "1339679"
  },
  {
    "text": "that's right so if you go to",
    "start": "1339679",
    "end": "1340720"
  },
  {
    "text": "nodeschool.io which I highly recommend",
    "start": "1340720",
    "end": "1343039"
  },
  {
    "text": "that everybody here do there's nobody in",
    "start": "1343039",
    "end": "1344960"
  },
  {
    "text": "this room who cannot learn something",
    "start": "1344960",
    "end": "1346400"
  },
  {
    "text": "from node school uh there is a whole",
    "start": "1346400",
    "end": "1349520"
  },
  {
    "text": "module on node school for working",
    "start": "1349520",
    "end": "1351440"
  },
  {
    "text": "specifically with the async model it",
    "start": "1351440",
    "end": "1352799"
  },
  {
    "text": "gives a lot of examples for things like",
    "start": "1352799",
    "end": "1354480"
  },
  {
    "text": "waterfalls and series and all those",
    "start": "1354480",
    "end": "1356159"
  },
  {
    "text": "things to make when you might want to",
    "start": "1356159",
    "end": "1357600"
  },
  {
    "text": "use and async's a good one but for some",
    "start": "1357600",
    "end": "1359760"
  },
  {
    "text": "people the first time they look at it",
    "start": "1359760",
    "end": "1361039"
  },
  {
    "text": "can be really confusing i think there's",
    "start": "1361039",
    "end": "1362320"
  },
  {
    "text": "one for promises now too yeah that would",
    "start": "1362320",
    "end": "1364000"
  },
  {
    "text": "be there's also a good node school one",
    "start": "1364000",
    "end": "1366080"
  },
  {
    "text": "just for beginners and they're all the",
    "start": "1366080",
    "end": "1369039"
  },
  {
    "text": "node school ones uh they're all on",
    "start": "1369039",
    "end": "1371120"
  },
  {
    "text": "GitHub i think you can just search for",
    "start": "1371120",
    "end": "1372640"
  },
  {
    "text": "node school and like I said node school",
    "start": "1372640",
    "end": "1374559"
  },
  {
    "text": "IO has all of them right forgot that",
    "start": "1374559",
    "end": "1379480"
  }
]