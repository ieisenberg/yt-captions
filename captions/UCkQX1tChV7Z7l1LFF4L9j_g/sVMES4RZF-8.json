[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "hey my name is Dan Rosen I'm an",
    "start": "0",
    "end": "2129"
  },
  {
    "text": "instructor here at Maracana and I teach",
    "start": "2129",
    "end": "4140"
  },
  {
    "text": "scholar courses and I'm here in Marikana",
    "start": "4140",
    "end": "6899"
  },
  {
    "text": "studios to to talk to you about type",
    "start": "6899",
    "end": "9420"
  },
  {
    "text": "classes in the scala language now type",
    "start": "9420",
    "end": "11820"
  },
  {
    "text": "classes are a design pattern that that",
    "start": "11820",
    "end": "13710"
  },
  {
    "text": "we try to use as much as we can and we",
    "start": "13710",
    "end": "15929"
  },
  {
    "text": "use them really just with one goal in",
    "start": "15929",
    "end": "17430"
  },
  {
    "text": "mind but it's a very important goal in",
    "start": "17430",
    "end": "18960"
  },
  {
    "text": "software engineering which is decoupling",
    "start": "18960",
    "end": "21230"
  },
  {
    "text": "we want to try to keep our software as",
    "start": "21230",
    "end": "23670"
  },
  {
    "text": "modular and as decoupled as possible so",
    "start": "23670",
    "end": "26070"
  },
  {
    "text": "that we can vary our little bits of bits",
    "start": "26070",
    "end": "29699"
  },
  {
    "text": "of our program independently so that we",
    "start": "29699",
    "end": "32219"
  },
  {
    "text": "can swap things out we can reuse them",
    "start": "32219",
    "end": "33960"
  },
  {
    "text": "and so on and so that keeps things much",
    "start": "33960",
    "end": "36030"
  },
  {
    "text": "more maintainable and easier to reason",
    "start": "36030",
    "end": "37590"
  },
  {
    "text": "about over time all right so let's jump",
    "start": "37590",
    "end": "40320"
  },
  {
    "text": "into it let's get started here with with",
    "start": "40320",
    "end": "42960"
  },
  {
    "start": "42000",
    "end": "42000"
  },
  {
    "text": "a simple use case I'm going to define an",
    "start": "42960",
    "end": "45030"
  },
  {
    "text": "algebraic data type that that's going to",
    "start": "45030",
    "end": "48210"
  },
  {
    "text": "be used here to represent mathematical",
    "start": "48210",
    "end": "49980"
  },
  {
    "text": "expressions what's an algebraic data",
    "start": "49980",
    "end": "51600"
  },
  {
    "text": "type well it's it's sort of another",
    "start": "51600",
    "end": "53879"
  },
  {
    "text": "pattern in Scala that you see where we",
    "start": "53879",
    "end": "56190"
  },
  {
    "text": "have a sealed trait in this case it's my",
    "start": "56190",
    "end": "59160"
  },
  {
    "text": "sealed trait called expression and then",
    "start": "59160",
    "end": "61590"
  },
  {
    "text": "a number of case classes that implement",
    "start": "61590",
    "end": "63840"
  },
  {
    "text": "my my ADT trait so in this case we've",
    "start": "63840",
    "end": "68070"
  },
  {
    "text": "got case classes number plus and minus",
    "start": "68070",
    "end": "71490"
  },
  {
    "text": "and the fact the fact that we're calling",
    "start": "71490",
    "end": "72810"
  },
  {
    "text": "it an algebraic data type is actually",
    "start": "72810",
    "end": "74780"
  },
  {
    "text": "has nothing to do with the fact that",
    "start": "74780",
    "end": "76799"
  },
  {
    "text": "we're talking about mathematical",
    "start": "76799",
    "end": "78090"
  },
  {
    "text": "expressions here that's sort of an",
    "start": "78090",
    "end": "79170"
  },
  {
    "text": "unintended pun okay so a number has of",
    "start": "79170",
    "end": "82110"
  },
  {
    "text": "course a value and if we want to",
    "start": "82110",
    "end": "84180"
  },
  {
    "text": "actually evaluate the number all we",
    "start": "84180",
    "end": "85409"
  },
  {
    "text": "would have to do is get its value plus",
    "start": "85409",
    "end": "87689"
  },
  {
    "text": "and minus are sort of our recursive",
    "start": "87689",
    "end": "89970"
  },
  {
    "text": "cases in this little expression language",
    "start": "89970",
    "end": "91799"
  },
  {
    "text": "they have sub expressions on their left",
    "start": "91799",
    "end": "94710"
  },
  {
    "text": "hand side and right hand side and so of",
    "start": "94710",
    "end": "96150"
  },
  {
    "text": "course to evaluate a plus and a minus we",
    "start": "96150",
    "end": "98670"
  },
  {
    "text": "would have to evaluate the sub",
    "start": "98670",
    "end": "99780"
  },
  {
    "text": "expressions first now that's what our",
    "start": "99780",
    "end": "101640"
  },
  {
    "text": "expression evaluator down here is is",
    "start": "101640",
    "end": "103920"
  },
  {
    "text": "doing it it pulls the value out of a",
    "start": "103920",
    "end": "106259"
  },
  {
    "text": "number and for pluses and minuses it",
    "start": "106259",
    "end": "109500"
  },
  {
    "text": "recursively calls value on the left hand",
    "start": "109500",
    "end": "112200"
  },
  {
    "text": "side and the right hand side arguments",
    "start": "112200",
    "end": "113610"
  },
  {
    "text": "and then adds them or subtract some",
    "start": "113610",
    "end": "115259"
  },
  {
    "text": "appropriately one thing that I want to",
    "start": "115259",
    "end": "116729"
  },
  {
    "text": "point out and this is an important thing",
    "start": "116729",
    "end": "118350"
  },
  {
    "text": "to start with is that I could just as",
    "start": "118350",
    "end": "121259"
  },
  {
    "text": "easily have defined value as a as an",
    "start": "121259",
    "end": "123990"
  },
  {
    "text": "abstract number on the expression trait",
    "start": "123990",
    "end": "125729"
  },
  {
    "text": "rather than having it separated out into",
    "start": "125729",
    "end": "128280"
  },
  {
    "text": "this expression evaluator thing so that",
    "start": "128280",
    "end": "129989"
  },
  {
    "text": "would look like you know sealed trait",
    "start": "129989",
    "end": "131220"
  },
  {
    "text": "expression",
    "start": "131220",
    "end": "132360"
  },
  {
    "text": "with a member deaf value that would be",
    "start": "132360",
    "end": "135000"
  },
  {
    "text": "just abstract and then my case classes",
    "start": "135000",
    "end": "137670"
  },
  {
    "text": "number plus and minus would would have",
    "start": "137670",
    "end": "140190"
  },
  {
    "text": "some implementation for value and those",
    "start": "140190",
    "end": "142440"
  },
  {
    "text": "implementations would look just the same",
    "start": "142440",
    "end": "143760"
  },
  {
    "text": "but you know let's say that I don't want",
    "start": "143760",
    "end": "146130"
  },
  {
    "text": "to necessarily bake in the assumption",
    "start": "146130",
    "end": "148350"
  },
  {
    "text": "that I'm going to be evaluating",
    "start": "148350",
    "end": "149430"
  },
  {
    "text": "expressions let's you know start out",
    "start": "149430",
    "end": "152070"
  },
  {
    "text": "instead with the assumption that",
    "start": "152070",
    "end": "153060"
  },
  {
    "text": "expressions could be used for any number",
    "start": "153060",
    "end": "154530"
  },
  {
    "text": "of different things so you might want to",
    "start": "154530",
    "end": "156270"
  },
  {
    "text": "evaluate them or let's say you might",
    "start": "156270",
    "end": "158850"
  },
  {
    "text": "want to serialize expressions so that",
    "start": "158850",
    "end": "161070"
  },
  {
    "text": "somebody else could evaluate them",
    "start": "161070",
    "end": "162150"
  },
  {
    "text": "elsewhere before we look at what other",
    "start": "162150",
    "end": "164310"
  },
  {
    "text": "things you might want to do with",
    "start": "164310",
    "end": "165750"
  },
  {
    "text": "expressions let's let's just take a",
    "start": "165750",
    "end": "167310"
  },
  {
    "text": "quick look at the coupling here that's",
    "start": "167310",
    "end": "169410"
  },
  {
    "text": "that's implied by our class diagram we",
    "start": "169410",
    "end": "172410"
  },
  {
    "text": "have our expression evaluator which",
    "start": "172410",
    "end": "174180"
  },
  {
    "text": "depends upon expressions and that's sort",
    "start": "174180",
    "end": "177989"
  },
  {
    "text": "of what you would expect that that's",
    "start": "177989",
    "end": "179280"
  },
  {
    "text": "that's probably what we're going to",
    "start": "179280",
    "end": "180420"
  },
  {
    "text": "think of as as necessary because you",
    "start": "180420",
    "end": "183959"
  },
  {
    "text": "know what's an expression evaluator to",
    "start": "183959",
    "end": "185640"
  },
  {
    "text": "do if it's if it doesn't know what it's",
    "start": "185640",
    "end": "187380"
  },
  {
    "text": "evaluating right and you know of course",
    "start": "187380",
    "end": "191040"
  },
  {
    "text": "we have some sort of an inheritance",
    "start": "191040",
    "end": "192870"
  },
  {
    "text": "dependency from number plus minus two",
    "start": "192870",
    "end": "196410"
  },
  {
    "text": "the sealed trait that they implement so",
    "start": "196410",
    "end": "198660"
  },
  {
    "text": "again you know we think well you know",
    "start": "198660",
    "end": "200250"
  },
  {
    "text": "that's that's probably relatively",
    "start": "200250",
    "end": "201630"
  },
  {
    "text": "necessary and so you know the fact that",
    "start": "201630",
    "end": "203610"
  },
  {
    "text": "we have decoupling as our main goal",
    "start": "203610",
    "end": "205830"
  },
  {
    "text": "doesn't necessarily mean that that this",
    "start": "205830",
    "end": "208260"
  },
  {
    "text": "coupling in particular is bad just it",
    "start": "208260",
    "end": "211830"
  },
  {
    "text": "just wanted to get get everybody's mind",
    "start": "211830",
    "end": "213930"
  },
  {
    "text": "on how will quantify coupling and so so",
    "start": "213930",
    "end": "216870"
  },
  {
    "text": "that that's this is how we're going to",
    "start": "216870",
    "end": "217890"
  },
  {
    "text": "be representing it okay so we talked",
    "start": "217890",
    "end": "220410"
  },
  {
    "text": "about other things that we might want to",
    "start": "220410",
    "end": "221549"
  },
  {
    "text": "do with our expression hierarchy and",
    "start": "221549",
    "end": "222959"
  },
  {
    "text": "indeed let's say we wanted to serialize",
    "start": "222959",
    "end": "225209"
  },
  {
    "text": "it so let's say I want to serialize",
    "start": "225209",
    "end": "226920"
  },
  {
    "text": "expressions into JSON the JavaScript",
    "start": "226920",
    "end": "229320"
  },
  {
    "text": "object notation so once again I have to",
    "start": "229320",
    "end": "231330"
  },
  {
    "text": "find a new algebraic data type this time",
    "start": "231330",
    "end": "234000"
  },
  {
    "text": "for Rho for jason and this this",
    "start": "234000",
    "end": "236549"
  },
  {
    "text": "basically just mirrors the spec so I've",
    "start": "236549",
    "end": "238110"
  },
  {
    "text": "got adjacent value a DT with case",
    "start": "238110",
    "end": "240480"
  },
  {
    "text": "classes JSON object array string number",
    "start": "240480",
    "end": "244560"
  },
  {
    "text": "boolean and null which you know nothing",
    "start": "244560",
    "end": "247560"
  },
  {
    "text": "ought to be too surprising there an",
    "start": "247560",
    "end": "248850"
  },
  {
    "text": "object is just a essentially a",
    "start": "248850",
    "end": "250890"
  },
  {
    "text": "dictionary from from field names to",
    "start": "250890",
    "end": "252810"
  },
  {
    "text": "their values an array as a sequence of",
    "start": "252810",
    "end": "255360"
  },
  {
    "text": "values and then the rest are basically",
    "start": "255360",
    "end": "257970"
  },
  {
    "text": "our primitives again we have sort of a",
    "start": "257970",
    "end": "261419"
  },
  {
    "text": "little class diagram here that indicates",
    "start": "261419",
    "end": "263580"
  },
  {
    "text": "what what kind of couple",
    "start": "263580",
    "end": "264850"
  },
  {
    "text": "implied by implied by this structure",
    "start": "264850",
    "end": "268090"
  },
  {
    "text": "Jason Reiter we haven't looked at yet",
    "start": "268090",
    "end": "269530"
  },
  {
    "text": "we're going to look at that on the next",
    "start": "269530",
    "end": "270580"
  },
  {
    "text": "slide but the goal of course is going to",
    "start": "270580",
    "end": "272560"
  },
  {
    "text": "be to serialize Jason values out of",
    "start": "272560",
    "end": "275860"
  },
  {
    "text": "whatever type into into a string so that",
    "start": "275860",
    "end": "278290"
  },
  {
    "text": "we can send it over the wire so you know",
    "start": "278290",
    "end": "280300"
  },
  {
    "text": "of course we think that a jason writer",
    "start": "280300",
    "end": "281950"
  },
  {
    "text": "has sort of a necessary dependency upon",
    "start": "281950",
    "end": "285010"
  },
  {
    "text": "jason values and then and then of course",
    "start": "285010",
    "end": "287410"
  },
  {
    "text": "the case classes that implemented by",
    "start": "287410",
    "end": "290260"
  },
  {
    "text": "virtue of extension those are those are",
    "start": "290260",
    "end": "293290"
  },
  {
    "text": "also going to have dependencies on the",
    "start": "293290",
    "end": "294670"
  },
  {
    "text": "jason value trade again not passing",
    "start": "294670",
    "end": "297430"
  },
  {
    "text": "judgment here just observing what the",
    "start": "297430",
    "end": "299560"
  },
  {
    "text": "what the the degree of coupling that",
    "start": "299560",
    "end": "301630"
  },
  {
    "text": "we've got is so far okay just a quick",
    "start": "301630",
    "end": "305200"
  },
  {
    "start": "304000",
    "end": "304000"
  },
  {
    "text": "look at the writer i've included in the",
    "start": "305200",
    "end": "308290"
  },
  {
    "text": "included this in here it is sort of for",
    "start": "308290",
    "end": "309910"
  },
  {
    "text": "completeness so if you're following",
    "start": "309910",
    "end": "311110"
  },
  {
    "text": "along and and you want to implement",
    "start": "311110",
    "end": "313660"
  },
  {
    "text": "these things for yourself you can do it",
    "start": "313660",
    "end": "315360"
  },
  {
    "text": "the implementation detail not that",
    "start": "315360",
    "end": "317620"
  },
  {
    "text": "important but you know again we've",
    "start": "317620",
    "end": "319510"
  },
  {
    "text": "separated out the concern of",
    "start": "319510",
    "end": "321480"
  },
  {
    "text": "serialization of these jason values from",
    "start": "321480",
    "end": "324070"
  },
  {
    "text": "from the adt itself again I could have I",
    "start": "324070",
    "end": "327160"
  },
  {
    "text": "could have implemented a write method in",
    "start": "327160",
    "end": "329140"
  },
  {
    "text": "the ADT but I feel like it's a cleaner",
    "start": "329140",
    "end": "331600"
  },
  {
    "text": "approach to externalize it and and then",
    "start": "331600",
    "end": "334450"
  },
  {
    "text": "use pattern matching on the case classes",
    "start": "334450",
    "end": "337490"
  },
  {
    "start": "337000",
    "end": "337000"
  },
  {
    "text": "okay so we said that we wanted to be",
    "start": "337490",
    "end": "341360"
  },
  {
    "text": "able to serialize expressions in our",
    "start": "341360",
    "end": "344120"
  },
  {
    "text": "little expression ADT out to Jason",
    "start": "344120",
    "end": "347180"
  },
  {
    "text": "values so what we want to do is is",
    "start": "347180",
    "end": "349819"
  },
  {
    "text": "utilize what we've got so far we want",
    "start": "349819",
    "end": "351919"
  },
  {
    "text": "some way essentially to reduce that",
    "start": "351919",
    "end": "353630"
  },
  {
    "text": "problem into converting expressions to",
    "start": "353630",
    "end": "356419"
  },
  {
    "text": "jason values because once we do that",
    "start": "356419",
    "end": "358970"
  },
  {
    "text": "then we can use the write method that",
    "start": "358970",
    "end": "360680"
  },
  {
    "text": "we've already defined so down at the",
    "start": "360680",
    "end": "362690"
  },
  {
    "text": "bottom here I've got this this sort of",
    "start": "362690",
    "end": "364190"
  },
  {
    "text": "auxiliary write method it's going to",
    "start": "364190",
    "end": "366530"
  },
  {
    "text": "take a value of some arbitrary type that",
    "start": "366530",
    "end": "368900"
  },
  {
    "text": "I haven't really defined yet and and",
    "start": "368900",
    "end": "370699"
  },
  {
    "text": "return a string and the way that it's",
    "start": "370699",
    "end": "372740"
  },
  {
    "text": "going to do that is by doing some sort",
    "start": "372740",
    "end": "374570"
  },
  {
    "text": "of a conversion to Jason values and then",
    "start": "374570",
    "end": "376940"
  },
  {
    "text": "and then just chain back up to our",
    "start": "376940",
    "end": "378650"
  },
  {
    "text": "default write method the typical way",
    "start": "378650",
    "end": "381740"
  },
  {
    "start": "380000",
    "end": "380000"
  },
  {
    "text": "that you would do this in an",
    "start": "381740",
    "end": "382669"
  },
  {
    "text": "object-oriented design is by introducing",
    "start": "382669",
    "end": "385280"
  },
  {
    "text": "some sort of an interface or a base",
    "start": "385280",
    "end": "387080"
  },
  {
    "text": "trait and things that you'd want to be",
    "start": "387080",
    "end": "389900"
  },
  {
    "text": "convertible to jason values should",
    "start": "389900",
    "end": "391970"
  },
  {
    "text": "implement that trait so this is how this",
    "start": "391970",
    "end": "394310"
  },
  {
    "text": "would typically look I would introduce",
    "start": "394310",
    "end": "395990"
  },
  {
    "text": "some some sort of a trait called Jason",
    "start": "395990",
    "end": "397970"
  },
  {
    "text": "convertible let's say value is going to",
    "start": "397970",
    "end": "400220"
  },
  {
    "text": "is going to have to be a jason",
    "start": "400220",
    "end": "402289"
  },
  {
    "text": "convertible type and then you know when",
    "start": "402289",
    "end": "404630"
  },
  {
    "text": "we want to actually serialize this thing",
    "start": "404630",
    "end": "406400"
  },
  {
    "text": "all we have to do is call convert to",
    "start": "406400",
    "end": "408349"
  },
  {
    "text": "jason on the value so that's what that",
    "start": "408349",
    "end": "410780"
  },
  {
    "text": "trait would look like just you know a",
    "start": "410780",
    "end": "412220"
  },
  {
    "text": "single method trait jason convertible",
    "start": "412220",
    "end": "414020"
  },
  {
    "text": "with that with that one method converges",
    "start": "414020",
    "end": "415490"
  },
  {
    "text": "Aysen again a look here at the at sort",
    "start": "415490",
    "end": "419000"
  },
  {
    "text": "of the dependencies jason writer now has",
    "start": "419000",
    "end": "422180"
  },
  {
    "text": "two dependencies instead of just one it",
    "start": "422180",
    "end": "424490"
  },
  {
    "text": "has abandon C on Jason value and a new",
    "start": "424490",
    "end": "426919"
  },
  {
    "text": "dependency on jason convertible you know",
    "start": "426919",
    "end": "429919"
  },
  {
    "text": "I think that that looks fine so far",
    "start": "429919",
    "end": "432280"
  },
  {
    "text": "so now the interesting part is when we",
    "start": "432280",
    "end": "435229"
  },
  {
    "text": "have expression trying to sort of fit",
    "start": "435229",
    "end": "438020"
  },
  {
    "text": "into this model so we say expression",
    "start": "438020",
    "end": "439580"
  },
  {
    "text": "extends jason convertible and what that",
    "start": "439580",
    "end": "442250"
  },
  {
    "text": "means is is that we have to implement",
    "start": "442250",
    "end": "443960"
  },
  {
    "text": "eight you know def convert to jason",
    "start": "443960",
    "end": "446500"
  },
  {
    "text": "inside each of our case classes number",
    "start": "446500",
    "end": "449240"
  },
  {
    "text": "plus and minus again the implementation",
    "start": "449240",
    "end": "451130"
  },
  {
    "text": "isn't that important here but if you",
    "start": "451130",
    "end": "453320"
  },
  {
    "text": "want to if you want to pause the video",
    "start": "453320",
    "end": "454639"
  },
  {
    "text": "and and copy down to follow along please",
    "start": "454639",
    "end": "457310"
  },
  {
    "text": "feel free so you know if this this",
    "start": "457310",
    "end": "461539"
  },
  {
    "text": "approach that we have totally works we",
    "start": "461539",
    "end": "463969"
  },
  {
    "text": "can we can declare an expression you",
    "start": "463969",
    "end": "466820"
  },
  {
    "text": "know plus with its left-hand side it's",
    "start": "466820",
    "end": "469490"
  },
  {
    "text": "just the number one",
    "start": "469490",
    "end": "470600"
  },
  {
    "text": "the right hand side is a sub-expression",
    "start": "470600",
    "end": "472220"
  },
  {
    "text": "- where it's left hand side is number",
    "start": "472220",
    "end": "474680"
  },
  {
    "text": "three and the right hand side is the",
    "start": "474680",
    "end": "476270"
  },
  {
    "text": "number two and when I go to serialize",
    "start": "476270",
    "end": "479000"
  },
  {
    "text": "that using jason writer dot write it",
    "start": "479000",
    "end": "481720"
  },
  {
    "text": "it's perfectly happy to do so because",
    "start": "481720",
    "end": "484130"
  },
  {
    "text": "expression is a jason convertible but it",
    "start": "484130",
    "end": "487700"
  },
  {
    "text": "really I don't like this approach I",
    "start": "487700",
    "end": "489290"
  },
  {
    "text": "think there's there's too strong",
    "start": "489290",
    "end": "490880"
  },
  {
    "text": "coupling here because as soon as we said",
    "start": "490880",
    "end": "492950"
  },
  {
    "text": "that expression inherited from Jason",
    "start": "492950",
    "end": "494780"
  },
  {
    "text": "convertible we we introduced quite a bit",
    "start": "494780",
    "end": "497690"
  },
  {
    "text": "of unnecessary dependency so for example",
    "start": "497690",
    "end": "500660"
  },
  {
    "text": "here you can look at this at this class",
    "start": "500660",
    "end": "503060"
  },
  {
    "text": "diagram and see that well expression",
    "start": "503060",
    "end": "504710"
  },
  {
    "text": "evaluator depends on expression which",
    "start": "504710",
    "end": "506270"
  },
  {
    "text": "transitively depends on the thing that",
    "start": "506270",
    "end": "508760"
  },
  {
    "text": "it implements which sort of implies that",
    "start": "508760",
    "end": "511040"
  },
  {
    "text": "expression evaluator cares about jason",
    "start": "511040",
    "end": "513710"
  },
  {
    "text": "convertibility which you know of course",
    "start": "513710",
    "end": "516229"
  },
  {
    "text": "it doesn't that that's an orthogonal",
    "start": "516229",
    "end": "517640"
  },
  {
    "text": "concern and also that this this really",
    "start": "517640",
    "end": "520340"
  },
  {
    "text": "goes against the design pattern that",
    "start": "520340",
    "end": "521570"
  },
  {
    "text": "we've been trying to follow so far where",
    "start": "521570",
    "end": "523340"
  },
  {
    "text": "our ADT's were simply data and no",
    "start": "523340",
    "end": "526370"
  },
  {
    "text": "methods attached to that data in keeping",
    "start": "526370",
    "end": "528830"
  },
  {
    "text": "the assumptions about what the data",
    "start": "528830",
    "end": "530180"
  },
  {
    "text": "might be used for external and so that",
    "start": "530180",
    "end": "533210"
  },
  {
    "text": "was that was kind of a design goal that",
    "start": "533210",
    "end": "534620"
  },
  {
    "text": "we've that we failed to fail to maintain",
    "start": "534620",
    "end": "536630"
  },
  {
    "text": "here but you know furthermore what if we",
    "start": "536630",
    "end": "539210"
  },
  {
    "text": "what what if what if expression were",
    "start": "539210",
    "end": "541310"
  },
  {
    "text": "some sort of a third-party library",
    "start": "541310",
    "end": "543430"
  },
  {
    "text": "something that that we we can't edit you",
    "start": "543430",
    "end": "547070"
  },
  {
    "text": "know we can't commit to and therefore we",
    "start": "547070",
    "end": "549350"
  },
  {
    "text": "couldn't modify expression to inherit",
    "start": "549350",
    "end": "551570"
  },
  {
    "text": "from jason convertible if if we want to",
    "start": "551570",
    "end": "553850"
  },
  {
    "text": "be able to serialize these things to",
    "start": "553850",
    "end": "555020"
  },
  {
    "text": "jason so so the approach just be just",
    "start": "555020",
    "end": "557750"
  },
  {
    "text": "completely fails here this this approach",
    "start": "557750",
    "end": "561170"
  },
  {
    "text": "of subtyping subtype polymorphism which",
    "start": "561170",
    "end": "563930"
  },
  {
    "text": "you know again is just expression being",
    "start": "563930",
    "end": "565880"
  },
  {
    "text": "a subtype of jason convertible it's not",
    "start": "565880",
    "end": "569570"
  },
  {
    "text": "going to work for us so we're going to",
    "start": "569570",
    "end": "572390"
  },
  {
    "text": "introduce this notion of type classes or",
    "start": "572390",
    "end": "575060"
  },
  {
    "text": "ad hoc polymorphism as compared to",
    "start": "575060",
    "end": "577610"
  },
  {
    "text": "subtype polymorphism to try to eliminate",
    "start": "577610",
    "end": "580340"
  },
  {
    "text": "that tight coupling now ad hoc",
    "start": "580340",
    "end": "583370"
  },
  {
    "start": "583000",
    "end": "583000"
  },
  {
    "text": "polymorphism or type classes or you know",
    "start": "583370",
    "end": "586430"
  },
  {
    "text": "maybe sort of fancy sounding computer",
    "start": "586430",
    "end": "588200"
  },
  {
    "text": "science e terms but it's really quite",
    "start": "588200",
    "end": "590450"
  },
  {
    "text": "straightforward whereas we had a trait",
    "start": "590450",
    "end": "592880"
  },
  {
    "text": "before that was going to be convertible",
    "start": "592880",
    "end": "595220"
  },
  {
    "text": "to jason we're going to externalize this",
    "start": "595220",
    "end": "598310"
  },
  {
    "text": "jason convertibility property into a",
    "start": "598310",
    "end": "601430"
  },
  {
    "text": "helper object",
    "start": "601430",
    "end": "603480"
  },
  {
    "start": "602000",
    "end": "602000"
  },
  {
    "text": "so now our auxilary right method is",
    "start": "603480",
    "end": "605850"
  },
  {
    "text": "taking two arguments it's taking a value",
    "start": "605850",
    "end": "608220"
  },
  {
    "text": "of some type a and this this is an",
    "start": "608220",
    "end": "610050"
  },
  {
    "text": "arbitrary type that's just noted in the",
    "start": "610050",
    "end": "612209"
  },
  {
    "text": "type primer and a converter for type a",
    "start": "612209",
    "end": "615600"
  },
  {
    "text": "so we've got two arguments here and this",
    "start": "615600",
    "end": "618120"
  },
  {
    "text": "is doing essentially the same thing as",
    "start": "618120",
    "end": "619800"
  },
  {
    "text": "we had had with subtype polymorphism",
    "start": "619800",
    "end": "621240"
  },
  {
    "text": "it's just sort of splitting it out so",
    "start": "621240",
    "end": "623459"
  },
  {
    "text": "now instead of saying value dot convert",
    "start": "623459",
    "end": "626160"
  },
  {
    "text": "to Jason we say Conniff dot convert to",
    "start": "626160",
    "end": "628949"
  },
  {
    "text": "Jason with the value and we can then",
    "start": "628949",
    "end": "631769"
  },
  {
    "text": "pass that to our default write method",
    "start": "631769",
    "end": "634380"
  },
  {
    "text": "again so again what does this look like",
    "start": "634380",
    "end": "637889"
  },
  {
    "text": "well we've got now our Jason converter",
    "start": "637889",
    "end": "640320"
  },
  {
    "text": "for type a so it's now a parameterised",
    "start": "640320",
    "end": "643560"
  },
  {
    "text": "trait and convert to Jason now takes an",
    "start": "643560",
    "end": "647370"
  },
  {
    "text": "argument some value of type a our",
    "start": "647370",
    "end": "651300"
  },
  {
    "text": "dependencies again look fairly similar",
    "start": "651300",
    "end": "653399"
  },
  {
    "text": "Jason writer has a dependency on Jason",
    "start": "653399",
    "end": "655529"
  },
  {
    "text": "value and on this jason converter trait",
    "start": "655529",
    "end": "658410"
  },
  {
    "text": "and i've colored this jason convert a",
    "start": "658410",
    "end": "661560"
  },
  {
    "text": "trait in green to indicate that it's",
    "start": "661560",
    "end": "663120"
  },
  {
    "text": "somehow different and what i really want",
    "start": "663120",
    "end": "666000"
  },
  {
    "text": "this to highlight is that jason",
    "start": "666000",
    "end": "667230"
  },
  {
    "text": "converter is now what we're going to",
    "start": "667230",
    "end": "668610"
  },
  {
    "text": "think of as a type class it's it's",
    "start": "668610",
    "end": "671940"
  },
  {
    "text": "something that i can implement for",
    "start": "671940",
    "end": "673649"
  },
  {
    "text": "anything that i want to be convertible",
    "start": "673649",
    "end": "676440"
  },
  {
    "text": "to jason without having to you know make",
    "start": "676440",
    "end": "679589"
  },
  {
    "text": "that thing extend from sun base type so",
    "start": "679589",
    "end": "682290"
  },
  {
    "text": "jason converter is is going to be our",
    "start": "682290",
    "end": "684209"
  },
  {
    "text": "type class here so the benefit that we",
    "start": "684209",
    "end": "686699"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "get from this is that expressions now",
    "start": "686699",
    "end": "689850"
  },
  {
    "text": "get to be just what they were before",
    "start": "689850",
    "end": "691139"
  },
  {
    "text": "they get to be raw data with no with no",
    "start": "691139",
    "end": "694850"
  },
  {
    "text": "methods polluting them so we've got the",
    "start": "694850",
    "end": "698100"
  },
  {
    "text": "original expression adt and we've",
    "start": "698100",
    "end": "701490"
  },
  {
    "text": "separated out the logic of how to",
    "start": "701490",
    "end": "703459"
  },
  {
    "text": "convert our expression adt into our",
    "start": "703459",
    "end": "706410"
  },
  {
    "text": "jason value adt this is great now we can",
    "start": "706410",
    "end": "710399"
  },
  {
    "text": "call jason writer dot right with our",
    "start": "710399",
    "end": "713010"
  },
  {
    "text": "expression again and as long as we pass",
    "start": "713010",
    "end": "715470"
  },
  {
    "text": "in the expression jason converter that",
    "start": "715470",
    "end": "717630"
  },
  {
    "text": "we just defined we still get the value",
    "start": "717630",
    "end": "719940"
  },
  {
    "text": "at the other end that we wanted to but",
    "start": "719940",
    "end": "722010"
  },
  {
    "text": "looking at the at the class diagram here",
    "start": "722010",
    "end": "724110"
  },
  {
    "text": "you can see also that that the fact that",
    "start": "724110",
    "end": "726930"
  },
  {
    "text": "we've separated things in this way",
    "start": "726930",
    "end": "728389"
  },
  {
    "text": "eliminates that coupling between",
    "start": "728389",
    "end": "730519"
  },
  {
    "text": "expression and jason well we what we had",
    "start": "730519",
    "end": "734579"
  },
  {
    "text": "previously called jason convertible",
    "start": "734579",
    "end": "737830"
  },
  {
    "text": "now the dependency is is encapsulated",
    "start": "737830",
    "end": "740530"
  },
  {
    "text": "just in this one value this expression",
    "start": "740530",
    "end": "743170"
  },
  {
    "text": "Jason converter that's of type Jason",
    "start": "743170",
    "end": "746320"
  },
  {
    "text": "converter for four expressions so you",
    "start": "746320",
    "end": "750010"
  },
  {
    "text": "know again what we had observed before",
    "start": "750010",
    "end": "751330"
  },
  {
    "text": "is at the expression evaluator which",
    "start": "751330",
    "end": "754120"
  },
  {
    "text": "depended upon expression seemed to have",
    "start": "754120",
    "end": "757090"
  },
  {
    "text": "this transitive dependency upon jason",
    "start": "757090",
    "end": "758800"
  },
  {
    "text": "conversion or jason convertible and that",
    "start": "758800",
    "end": "762250"
  },
  {
    "text": "is no longer the case it's quite nice",
    "start": "762250",
    "end": "764160"
  },
  {
    "text": "now we have you know really just just a",
    "start": "764160",
    "end": "766840"
  },
  {
    "text": "minor problem at this point and that",
    "start": "766840",
    "end": "768460"
  },
  {
    "text": "minor problem is essentially that it's",
    "start": "768460",
    "end": "769840"
  },
  {
    "text": "that it's slightly more verbose the the",
    "start": "769840",
    "end": "772750"
  },
  {
    "text": "fact that we have to explicitly pass",
    "start": "772750",
    "end": "774280"
  },
  {
    "text": "this expression jason converter in is a",
    "start": "774280",
    "end": "777820"
  },
  {
    "text": "little bit more clumsy than what we had",
    "start": "777820",
    "end": "779860"
  },
  {
    "text": "before with their subtype polymorphic",
    "start": "779860",
    "end": "781570"
  },
  {
    "text": "approach and you know it we can also",
    "start": "781570",
    "end": "783880"
  },
  {
    "text": "sort of consider it a minor fail that",
    "start": "783880",
    "end": "786070"
  },
  {
    "text": "you know nothing that we've done so far",
    "start": "786070",
    "end": "787990"
  },
  {
    "text": "is really special to scala we can take",
    "start": "787990",
    "end": "791440"
  },
  {
    "text": "this design pattern that we've",
    "start": "791440",
    "end": "792580"
  },
  {
    "text": "implemented so far",
    "start": "792580",
    "end": "793680"
  },
  {
    "text": "straight out of the Gang of Four design",
    "start": "793680",
    "end": "796420"
  },
  {
    "text": "patterns book and you know implemented",
    "start": "796420",
    "end": "798970"
  },
  {
    "text": "in Java or in C++ or whatever and you",
    "start": "798970",
    "end": "802330"
  },
  {
    "text": "know Scala doesn't doesn't offer us any",
    "start": "802330",
    "end": "803980"
  },
  {
    "text": "special advantage so far so here's where",
    "start": "803980",
    "end": "805900"
  },
  {
    "text": "we're going to see scholars expressive",
    "start": "805900",
    "end": "807520"
  },
  {
    "text": "power using using implicit so just a",
    "start": "807520",
    "end": "812410"
  },
  {
    "start": "811000",
    "end": "811000"
  },
  {
    "text": "quick review for anybody who needs a",
    "start": "812410",
    "end": "813880"
  },
  {
    "text": "quick brush up on how one place its work",
    "start": "813880",
    "end": "815710"
  },
  {
    "text": "in Scala I'm going to go into my scholar",
    "start": "815710",
    "end": "818440"
  },
  {
    "text": "interpreter here and just to find a",
    "start": "818440",
    "end": "820960"
  },
  {
    "text": "quick add method it's going to take two",
    "start": "820960",
    "end": "823870"
  },
  {
    "text": "arguments X and a Y and add them so",
    "start": "823870",
    "end": "826690"
  },
  {
    "text": "nothing too special",
    "start": "826690",
    "end": "827590"
  },
  {
    "text": "I can also curry those parameters into",
    "start": "827590",
    "end": "832120"
  },
  {
    "text": "multiple parameter lists and this this",
    "start": "832120",
    "end": "835090"
  },
  {
    "text": "looks a little bit unusual if if you're",
    "start": "835090",
    "end": "837010"
  },
  {
    "text": "more familiar with Java or C++ or some",
    "start": "837010",
    "end": "839320"
  },
  {
    "text": "language like that I've got two separate",
    "start": "839320",
    "end": "841510"
  },
  {
    "text": "parameter lists each of which just",
    "start": "841510",
    "end": "843010"
  },
  {
    "text": "contain one member X&Y separated out and",
    "start": "843010",
    "end": "846840"
  },
  {
    "text": "if I want to call add I can do so I just",
    "start": "846840",
    "end": "849610"
  },
  {
    "text": "have to make sure to pass my my my",
    "start": "849610",
    "end": "851440"
  },
  {
    "text": "parameters in separate parameter lists",
    "start": "851440",
    "end": "853690"
  },
  {
    "text": "there as well now the next thing I can",
    "start": "853690",
    "end": "855940"
  },
  {
    "text": "do is say that the last the last",
    "start": "855940",
    "end": "858610"
  },
  {
    "text": "parameter list you know I can have an",
    "start": "858610",
    "end": "862000"
  },
  {
    "text": "arbitrary number of parameter lists",
    "start": "862000",
    "end": "863530"
  },
  {
    "text": "right but the last one I can optionally",
    "start": "863530",
    "end": "865120"
  },
  {
    "text": "include this implicit keyword",
    "start": "865120",
    "end": "867430"
  },
  {
    "text": "and what that says to the compiler is if",
    "start": "867430",
    "end": "870399"
  },
  {
    "text": "it's able to find a value in this case a",
    "start": "870399",
    "end": "873339"
  },
  {
    "text": "value of type end in implicit scope that",
    "start": "873339",
    "end": "878440"
  },
  {
    "text": "the compiler should provide that as the",
    "start": "878440",
    "end": "881020"
  },
  {
    "text": "argument to that parameter list now I",
    "start": "881020",
    "end": "885339"
  },
  {
    "text": "can call add here just as I had done",
    "start": "885339",
    "end": "887589"
  },
  {
    "text": "above I can explicitly pass in 1 and 1",
    "start": "887589",
    "end": "889810"
  },
  {
    "text": "and you know it'll still give me the",
    "start": "889810",
    "end": "892149"
  },
  {
    "text": "result that I expect but you know let's",
    "start": "892149",
    "end": "895570"
  },
  {
    "text": "say that that I want to actually use",
    "start": "895570",
    "end": "897070"
  },
  {
    "text": "this implicit power to try to just add",
    "start": "897070",
    "end": "900220"
  },
  {
    "text": "one and pull pull my second end value",
    "start": "900220",
    "end": "902830"
  },
  {
    "text": "out of the ether so let's try to do that",
    "start": "902830",
    "end": "905410"
  },
  {
    "text": "I'll now try to say add 1 and it says oh",
    "start": "905410",
    "end": "907899"
  },
  {
    "text": "no I you know I couldn't find an",
    "start": "907899",
    "end": "909370"
  },
  {
    "text": "implicit value for parameter why well",
    "start": "909370",
    "end": "912580"
  },
  {
    "text": "that's because I don't actually have one",
    "start": "912580",
    "end": "914200"
  },
  {
    "text": "there is not an implicit int in in scope",
    "start": "914200",
    "end": "918850"
  },
  {
    "text": "so let's introduce one we can say",
    "start": "918850",
    "end": "921160"
  },
  {
    "text": "implicit Val one of type end is equal to",
    "start": "921160",
    "end": "925420"
  },
  {
    "text": "1 and now I can just call add 1 and the",
    "start": "925420",
    "end": "928540"
  },
  {
    "text": "compiler or in this case the the repple",
    "start": "928540",
    "end": "931060"
  },
  {
    "text": "will provide that implicit value as the",
    "start": "931060",
    "end": "934839"
  },
  {
    "text": "implicit parameter for that in that",
    "start": "934839",
    "end": "936910"
  },
  {
    "text": "second parameter list ok so that was",
    "start": "936910",
    "end": "939040"
  },
  {
    "text": "just a quick review",
    "start": "939040",
    "end": "940390"
  },
  {
    "text": "but basically armed with this power of",
    "start": "940390",
    "end": "942250"
  },
  {
    "start": "941000",
    "end": "941000"
  },
  {
    "text": "implicit we can now take this converter",
    "start": "942250",
    "end": "945279"
  },
  {
    "text": "parameter that we had explicitly and",
    "start": "945279",
    "end": "947560"
  },
  {
    "text": "separated into a separate implicit",
    "start": "947560",
    "end": "949930"
  },
  {
    "start": "948000",
    "end": "948000"
  },
  {
    "text": "parameter list all that we need to do",
    "start": "949930",
    "end": "952120"
  },
  {
    "start": "952000",
    "end": "952000"
  },
  {
    "text": "now to to satisfy the requirements of",
    "start": "952120",
    "end": "954430"
  },
  {
    "text": "implicit resolution and say that our",
    "start": "954430",
    "end": "956110"
  },
  {
    "text": "expression Jason converter that we had",
    "start": "956110",
    "end": "958660"
  },
  {
    "text": "defined previously is going to be an",
    "start": "958660",
    "end": "960220"
  },
  {
    "text": "implicit Val",
    "start": "960220",
    "end": "961990"
  },
  {
    "text": "I haven't made any any changes to this",
    "start": "961990",
    "end": "964209"
  },
  {
    "text": "thing otherwise and then finally you",
    "start": "964209",
    "end": "967209"
  },
  {
    "text": "know we get really the essentially the",
    "start": "967209",
    "end": "969730"
  },
  {
    "text": "complete win here we can say Jason",
    "start": "969730",
    "end": "971950"
  },
  {
    "text": "writer dot write just pass it the",
    "start": "971950",
    "end": "974110"
  },
  {
    "text": "expression we no longer have to",
    "start": "974110",
    "end": "976300"
  },
  {
    "text": "explicitly pass the the type class",
    "start": "976300",
    "end": "979540"
  },
  {
    "text": "instance that we had defined this this",
    "start": "979540",
    "end": "981400"
  },
  {
    "text": "expression Jason converter thing and you",
    "start": "981400",
    "end": "984910"
  },
  {
    "text": "know so this syntactically looks exactly",
    "start": "984910",
    "end": "987040"
  },
  {
    "text": "like what we had when we were using",
    "start": "987040",
    "end": "989320"
  },
  {
    "text": "subtype polymorphism but of course we",
    "start": "989320",
    "end": "992589"
  },
  {
    "text": "have you know removed all of the",
    "start": "992589",
    "end": "994120"
  },
  {
    "text": "adjacent converter stuff that were that",
    "start": "994120",
    "end": "996670"
  },
  {
    "text": "were the",
    "start": "996670",
    "end": "997170"
  },
  {
    "text": "was polluting the expression ATT so this",
    "start": "997170",
    "end": "1000290"
  },
  {
    "text": "is really great and you know if if",
    "start": "1000290",
    "end": "1002420"
  },
  {
    "text": "you've followed so far that is really",
    "start": "1002420",
    "end": "1004519"
  },
  {
    "text": "essentially type classes in Scala you",
    "start": "1004519",
    "end": "1007760"
  },
  {
    "text": "don't need to you don't need to learn",
    "start": "1007760",
    "end": "1009139"
  },
  {
    "text": "anything more to use the type class",
    "start": "1009139",
    "end": "1011420"
  },
  {
    "text": "pattern in Scotland so you know if you",
    "start": "1011420",
    "end": "1013550"
  },
  {
    "text": "feel like that's enough to absorb then",
    "start": "1013550",
    "end": "1014990"
  },
  {
    "text": "feel free to stop the video right now",
    "start": "1014990",
    "end": "1016430"
  },
  {
    "text": "what I'm going to show you from this",
    "start": "1016430",
    "end": "1017990"
  },
  {
    "text": "point on is is sort of a bonus it's it's",
    "start": "1017990",
    "end": "1022190"
  },
  {
    "text": "going to be a syntax that will help us",
    "start": "1022190",
    "end": "1023720"
  },
  {
    "text": "deal with type classes as even more of a",
    "start": "1023720",
    "end": "1026150"
  },
  {
    "text": "sort of the first class language",
    "start": "1026150",
    "end": "1028188"
  },
  {
    "text": "construct so above we have just what we",
    "start": "1028189",
    "end": "1032540"
  },
  {
    "start": "1029000",
    "end": "1029000"
  },
  {
    "text": "had before we've got our two parameter",
    "start": "1032540",
    "end": "1035209"
  },
  {
    "text": "lists one taking our value that we want",
    "start": "1035209",
    "end": "1037880"
  },
  {
    "text": "to convert to Jason and the second",
    "start": "1037880",
    "end": "1040280"
  },
  {
    "text": "implicit parameter list taking our type",
    "start": "1040280",
    "end": "1042438"
  },
  {
    "text": "class instance but we can express that",
    "start": "1042439",
    "end": "1044418"
  },
  {
    "text": "in sort of like I say a more first-class",
    "start": "1044419",
    "end": "1046459"
  },
  {
    "text": "way in the language using this context",
    "start": "1046459",
    "end": "1048438"
  },
  {
    "text": "bound syntax where we say that a is",
    "start": "1048439",
    "end": "1051429"
  },
  {
    "text": "context bound and that's what this",
    "start": "1051429",
    "end": "1053270"
  },
  {
    "text": "Collin means by the Jason converter type",
    "start": "1053270",
    "end": "1056660"
  },
  {
    "text": "class or you know another way of",
    "start": "1056660",
    "end": "1058700"
  },
  {
    "text": "expressing that is a is a member of the",
    "start": "1058700",
    "end": "1062419"
  },
  {
    "text": "Jason converter type class and this",
    "start": "1062419",
    "end": "1065960"
  },
  {
    "text": "should sort of remind you of of how you",
    "start": "1065960",
    "end": "1068059"
  },
  {
    "text": "would have you would put upper or lower",
    "start": "1068059",
    "end": "1070130"
  },
  {
    "text": "type bounds on a type parameter to a",
    "start": "1070130",
    "end": "1072679"
  },
  {
    "text": "method or to a to a class that you're",
    "start": "1072679",
    "end": "1075799"
  },
  {
    "text": "defining it's supposed to be sort of",
    "start": "1075799",
    "end": "1077720"
  },
  {
    "text": "reminiscent to that syntax and so that's",
    "start": "1077720",
    "end": "1079910"
  },
  {
    "text": "quite nice that the only downside here",
    "start": "1079910",
    "end": "1081830"
  },
  {
    "text": "is that we no longer have this this",
    "start": "1081830",
    "end": "1085040"
  },
  {
    "text": "variable named con so we have to create",
    "start": "1085040",
    "end": "1087710"
  },
  {
    "text": "one I've done that by calling the",
    "start": "1087710",
    "end": "1089780"
  },
  {
    "text": "implicitly method this is something that",
    "start": "1089780",
    "end": "1092419"
  },
  {
    "text": "that scholars pre def provides for you",
    "start": "1092419",
    "end": "1094340"
  },
  {
    "text": "and that basically pulls our JSON",
    "start": "1094340",
    "end": "1097220"
  },
  {
    "text": "converter out of the implicit scope and",
    "start": "1097220",
    "end": "1099200"
  },
  {
    "text": "assigns it to a value conf so you know",
    "start": "1099200",
    "end": "1102890"
  },
  {
    "text": "that has an advantage and a disadvantage",
    "start": "1102890",
    "end": "1104230"
  },
  {
    "text": "the advantage is we get to say we get to",
    "start": "1104230",
    "end": "1107990"
  },
  {
    "text": "use this context bound syntax to say a",
    "start": "1107990",
    "end": "1109850"
  },
  {
    "text": "is a jason converter so that's kind of",
    "start": "1109850",
    "end": "1111950"
  },
  {
    "text": "nice it provides a sort of a",
    "start": "1111950",
    "end": "1113650"
  },
  {
    "text": "documentation of what a has to be to",
    "start": "1113650",
    "end": "1116990"
  },
  {
    "text": "satisfy the constraints of this method",
    "start": "1116990",
    "end": "1118640"
  },
  {
    "text": "but the downside of course is that I've",
    "start": "1118640",
    "end": "1120080"
  },
  {
    "text": "got to use this implicitly method on the",
    "start": "1120080",
    "end": "1121490"
  },
  {
    "text": "body so I want to try to clean that up a",
    "start": "1121490",
    "end": "1123410"
  },
  {
    "text": "little bit and the way that I'm going to",
    "start": "1123410",
    "end": "1124370"
  },
  {
    "start": "1124000",
    "end": "1124000"
  },
  {
    "text": "do it is a really straightforward",
    "start": "1124370",
    "end": "1126290"
  },
  {
    "text": "refactoring we're just going to rename",
    "start": "1126290",
    "end": "1127940"
  },
  {
    "text": "jason converter",
    "start": "1127940",
    "end": "1129029"
  },
  {
    "text": "we're going to call it Jason because",
    "start": "1129029",
    "end": "1132659"
  },
  {
    "text": "we're thinking now if the Jason type",
    "start": "1132659",
    "end": "1134609"
  },
  {
    "text": "class what we're not thinking about",
    "start": "1134609",
    "end": "1136759"
  },
  {
    "text": "conversions we're not thinking about",
    "start": "1136759",
    "end": "1138899"
  },
  {
    "text": "about sort of the verb we're thinking",
    "start": "1138899",
    "end": "1141959"
  },
  {
    "text": "just about the noun Jason as has a type",
    "start": "1141959",
    "end": "1144929"
  },
  {
    "text": "class in its in its own right we're",
    "start": "1144929",
    "end": "1147989"
  },
  {
    "text": "going to say that the type class has a",
    "start": "1147989",
    "end": "1149219"
  },
  {
    "text": "method called Jason and then the way",
    "start": "1149219",
    "end": "1152639"
  },
  {
    "text": "that we're going to use that in our",
    "start": "1152639",
    "end": "1153749"
  },
  {
    "text": "jason writer is we'll say you know a",
    "start": "1153749",
    "end": "1155909"
  },
  {
    "text": "again is a member of the Jason type",
    "start": "1155909",
    "end": "1157979"
  },
  {
    "text": "class that's using our context bounciest",
    "start": "1157979",
    "end": "1160829"
  },
  {
    "text": "syntax and now we can say a little bit",
    "start": "1160829",
    "end": "1163529"
  },
  {
    "text": "more fluently that if at when we want to",
    "start": "1163529",
    "end": "1165869"
  },
  {
    "text": "call right we'll use the implicit Jason",
    "start": "1165869",
    "end": "1169799"
  },
  {
    "text": "type class and we'll just call it Jason",
    "start": "1169799",
    "end": "1172499"
  },
  {
    "text": "on that now thinking about it this way",
    "start": "1172499",
    "end": "1175769"
  },
  {
    "text": "actually gets us back to a class diagram",
    "start": "1175769",
    "end": "1178409"
  },
  {
    "text": "that looks similar to what we had before",
    "start": "1178409",
    "end": "1180289"
  },
  {
    "text": "using subtype polymorphism using our",
    "start": "1180289",
    "end": "1183359"
  },
  {
    "text": "inheritance right we have Jason writer",
    "start": "1183359",
    "end": "1186179"
  },
  {
    "text": "Jason value and Jason all sort of",
    "start": "1186179",
    "end": "1189089"
  },
  {
    "text": "interdependent and we have expression",
    "start": "1189089",
    "end": "1191639"
  },
  {
    "text": "evaluator dependent on expression and",
    "start": "1191639",
    "end": "1193379"
  },
  {
    "text": "those are those are sort of as we",
    "start": "1193379",
    "end": "1195239"
  },
  {
    "text": "expected and now we have this thing",
    "start": "1195239",
    "end": "1197219"
  },
  {
    "text": "using context bound syntax that makes",
    "start": "1197219",
    "end": "1199289"
  },
  {
    "text": "expression look like it sort of is",
    "start": "1199289",
    "end": "1202709"
  },
  {
    "text": "inheriting in some way from the Jason",
    "start": "1202709",
    "end": "1205829"
  },
  {
    "text": "type class now of course we know that it",
    "start": "1205829",
    "end": "1208829"
  },
  {
    "text": "isn't in reality it's using this this",
    "start": "1208829",
    "end": "1211259"
  },
  {
    "text": "implicit plumbing and so expression",
    "start": "1211259",
    "end": "1215039"
  },
  {
    "text": "doesn't actually have any dependency",
    "start": "1215039",
    "end": "1216599"
  },
  {
    "text": "upon Jason but we can write you know",
    "start": "1216599",
    "end": "1219029"
  },
  {
    "text": "this this dotted arrow here to sort of",
    "start": "1219029",
    "end": "1220739"
  },
  {
    "text": "indicate that expression is a member of",
    "start": "1220739",
    "end": "1222599"
  },
  {
    "text": "the Jason type class and and that'll",
    "start": "1222599",
    "end": "1225329"
  },
  {
    "text": "help us think about things a bit more",
    "start": "1225329",
    "end": "1227069"
  },
  {
    "text": "succinctly alright so now that we've got",
    "start": "1227069",
    "end": "1231779"
  },
  {
    "start": "1230000",
    "end": "1230000"
  },
  {
    "text": "this this kind of mental model for how",
    "start": "1231779",
    "end": "1233549"
  },
  {
    "text": "we're dealing with type classes let's",
    "start": "1233549",
    "end": "1234989"
  },
  {
    "text": "see what else we can apply this pattern",
    "start": "1234989",
    "end": "1236429"
  },
  {
    "text": "to let's say you know we started out",
    "start": "1236429",
    "end": "1238559"
  },
  {
    "text": "with the assumption that expressions",
    "start": "1238559",
    "end": "1240269"
  },
  {
    "text": "were going to be a closed ADT that is",
    "start": "1240269",
    "end": "1243149"
  },
  {
    "text": "you know we had a sealed trait",
    "start": "1243149",
    "end": "1244549"
  },
  {
    "text": "expression and we had number and end",
    "start": "1244549",
    "end": "1248789"
  },
  {
    "text": "plus and minus that inherited or",
    "start": "1248789",
    "end": "1252029"
  },
  {
    "text": "implemented expressions but let's say",
    "start": "1252029",
    "end": "1255779"
  },
  {
    "text": "that we want now to open that up and be",
    "start": "1255779",
    "end": "1257609"
  },
  {
    "text": "able to treat anything as an expression",
    "start": "1257609",
    "end": "1260429"
  },
  {
    "text": "in some way",
    "start": "1260429",
    "end": "1262159"
  },
  {
    "text": "the same way that you know we we had",
    "start": "1262159",
    "end": "1263960"
  },
  {
    "text": "Jason as sort of an open type class as",
    "start": "1263960",
    "end": "1267110"
  },
  {
    "text": "such that anything could be treated as",
    "start": "1267110",
    "end": "1269269"
  },
  {
    "text": "as a Jason value and just you know for",
    "start": "1269269",
    "end": "1271429"
  },
  {
    "text": "the sake of example here let's say we",
    "start": "1271429",
    "end": "1273049"
  },
  {
    "text": "want to use skal has been built in int",
    "start": "1273049",
    "end": "1275269"
  },
  {
    "text": "and and tuple two or or pair types two",
    "start": "1275269",
    "end": "1279799"
  },
  {
    "text": "to be able to treat those both as",
    "start": "1279799",
    "end": "1282110"
  },
  {
    "text": "convertible to Jason and and in",
    "start": "1282110",
    "end": "1284840"
  },
  {
    "text": "treatable as or evaluatable as integer",
    "start": "1284840",
    "end": "1288860"
  },
  {
    "text": "expressions so we're going to use the",
    "start": "1288860",
    "end": "1291139"
  },
  {
    "text": "same type class pattern for expressions",
    "start": "1291139",
    "end": "1293840"
  },
  {
    "text": "as we use for Jason so I'm going to",
    "start": "1293840",
    "end": "1295159"
  },
  {
    "text": "define an expression trait and that's",
    "start": "1295159",
    "end": "1297889"
  },
  {
    "text": "going to be my expression type class so",
    "start": "1297889",
    "end": "1300169"
  },
  {
    "text": "again you notice the expression now",
    "start": "1300169",
    "end": "1301820"
  },
  {
    "text": "takes a type parameter some some type a",
    "start": "1301820",
    "end": "1303830"
  },
  {
    "text": "and our value method is taking an",
    "start": "1303830",
    "end": "1306230"
  },
  {
    "text": "expression again of that type a and",
    "start": "1306230",
    "end": "1308980"
  },
  {
    "text": "yields an int the expression evaluator",
    "start": "1308980",
    "end": "1312049"
  },
  {
    "text": "that we had before now gets very much",
    "start": "1312049",
    "end": "1314090"
  },
  {
    "text": "simplified we we now just have an",
    "start": "1314090",
    "end": "1317389"
  },
  {
    "text": "evaluate method that takes an a of the",
    "start": "1317389",
    "end": "1320480"
  },
  {
    "text": "type class expression you give it an",
    "start": "1320480",
    "end": "1323899"
  },
  {
    "text": "expression of type a and it uses the",
    "start": "1323899",
    "end": "1327080"
  },
  {
    "text": "implicit expression type class instance",
    "start": "1327080",
    "end": "1329529"
  },
  {
    "text": "to determine the expressions value so we",
    "start": "1329529",
    "end": "1332509"
  },
  {
    "text": "no longer have to do any sort of pattern",
    "start": "1332509",
    "end": "1333889"
  },
  {
    "text": "matching on the on these the concrete",
    "start": "1333889",
    "end": "1336710"
  },
  {
    "text": "subtypes our expression adt those those",
    "start": "1336710",
    "end": "1339320"
  },
  {
    "text": "no longer exist now and just to take",
    "start": "1339320",
    "end": "1340970"
  },
  {
    "text": "another look at what our class diagram",
    "start": "1340970",
    "end": "1342799"
  },
  {
    "text": "is going to represent in terms of",
    "start": "1342799",
    "end": "1344210"
  },
  {
    "text": "coupling we've got our jason writer",
    "start": "1344210",
    "end": "1346129"
  },
  {
    "text": "family off to the left and we've got our",
    "start": "1346129",
    "end": "1348500"
  },
  {
    "text": "expression evaluator family off to the",
    "start": "1348500",
    "end": "1350360"
  },
  {
    "text": "right but those are no longer tied at",
    "start": "1350360",
    "end": "1352429"
  },
  {
    "text": "all to the concrete implementations of",
    "start": "1352429",
    "end": "1354889"
  },
  {
    "text": "the things that we're going to be",
    "start": "1354889",
    "end": "1356389"
  },
  {
    "text": "converting to jason are the things that",
    "start": "1356389",
    "end": "1357889"
  },
  {
    "text": "we're going to be evaluated as an",
    "start": "1357889",
    "end": "1359450"
  },
  {
    "text": "expression so int and tuple two are both",
    "start": "1359450",
    "end": "1362389"
  },
  {
    "text": "members of these type classes now but",
    "start": "1362389",
    "end": "1364610"
  },
  {
    "text": "again I've represented these with dotted",
    "start": "1364610",
    "end": "1366470"
  },
  {
    "text": "arrows to indicate that there's no",
    "start": "1366470",
    "end": "1367940"
  },
  {
    "text": "actual dependency there okay so let's",
    "start": "1367940",
    "end": "1371000"
  },
  {
    "text": "let's look at how we declare type class",
    "start": "1371000",
    "end": "1373190"
  },
  {
    "text": "instances for these for these two type",
    "start": "1373190",
    "end": "1375919"
  },
  {
    "text": "classes for in for int and tuple two so",
    "start": "1375919",
    "end": "1379519"
  },
  {
    "text": "let's start out with jason in the",
    "start": "1379519",
    "end": "1382220"
  },
  {
    "text": "companion object just you know so it's",
    "start": "1382220",
    "end": "1384259"
  },
  {
    "text": "sort of for for convenience sake in the",
    "start": "1384259",
    "end": "1386090"
  },
  {
    "text": "companion object for our jason type",
    "start": "1386090",
    "end": "1388610"
  },
  {
    "text": "class i'm going to declare these two",
    "start": "1388610",
    "end": "1390740"
  },
  {
    "text": "implicit one is going to be the type",
    "start": "1390740",
    "end": "1392929"
  },
  {
    "text": "class instead",
    "start": "1392929",
    "end": "1394739"
  },
  {
    "text": "sort of the assertion if you will that",
    "start": "1394739",
    "end": "1397169"
  },
  {
    "text": "int is a member of the JSON type class",
    "start": "1397169",
    "end": "1399179"
  },
  {
    "text": "and the assertion that pair is a member",
    "start": "1399179",
    "end": "1402090"
  },
  {
    "text": "of the JSON type class these are our",
    "start": "1402090",
    "end": "1404969"
  },
  {
    "text": "type class instances so for for int",
    "start": "1404969",
    "end": "1408149"
  },
  {
    "text": "obviously I'm just going to give back",
    "start": "1408149",
    "end": "1410609"
  },
  {
    "text": "adjacent number anytime you anytime you",
    "start": "1410609",
    "end": "1412649"
  },
  {
    "text": "ask for the adjacent value of an int and",
    "start": "1412649",
    "end": "1415369"
  },
  {
    "text": "for pairs",
    "start": "1415369",
    "end": "1416969"
  },
  {
    "text": "I'm going to perhaps somewhat",
    "start": "1416969",
    "end": "1418889"
  },
  {
    "text": "arbitrarily say that that JSON object is",
    "start": "1418889",
    "end": "1421649"
  },
  {
    "text": "how we're going to represent these pairs",
    "start": "1421649",
    "end": "1423330"
  },
  {
    "text": "so so it's going to be a JSON object",
    "start": "1423330",
    "end": "1424559"
  },
  {
    "text": "with a with a map with the fields first",
    "start": "1424559",
    "end": "1428129"
  },
  {
    "text": "and second and now we do something",
    "start": "1428129",
    "end": "1431039"
  },
  {
    "text": "interesting we've made the assertion",
    "start": "1431039",
    "end": "1433379"
  },
  {
    "text": "that pair is a member of the JSON type",
    "start": "1433379",
    "end": "1435299"
  },
  {
    "text": "class but we've put the constraint on it",
    "start": "1435299",
    "end": "1437879"
  },
  {
    "text": "that that you know a pair of type t1 and",
    "start": "1437879",
    "end": "1441599"
  },
  {
    "text": "t2 is only a member of the JSON type",
    "start": "1441599",
    "end": "1444330"
  },
  {
    "text": "class if t1 and t2 themselves are",
    "start": "1444330",
    "end": "1447269"
  },
  {
    "text": "members of the JSON type class so okay",
    "start": "1447269",
    "end": "1449940"
  },
  {
    "text": "so given that assertion now we can call",
    "start": "1449940",
    "end": "1452999"
  },
  {
    "text": "our implicitly method again to pull the",
    "start": "1452999",
    "end": "1455099"
  },
  {
    "text": "JSON type class instances for t1 and t2",
    "start": "1455099",
    "end": "1458129"
  },
  {
    "text": "out of our implicit scope we'll call",
    "start": "1458129",
    "end": "1460679"
  },
  {
    "text": "Jason on those and thus we can convert",
    "start": "1460679",
    "end": "1463950"
  },
  {
    "text": "the first and second elements of our",
    "start": "1463950",
    "end": "1465690"
  },
  {
    "text": "pair to jason recursively another thing",
    "start": "1465690",
    "end": "1469349"
  },
  {
    "text": "to sort of point out here is that this",
    "start": "1469349",
    "end": "1471629"
  },
  {
    "text": "is open to extension so you know if",
    "start": "1471629",
    "end": "1474719"
  },
  {
    "text": "somebody else provides some other jason",
    "start": "1474719",
    "end": "1477450"
  },
  {
    "text": "type class instances that are available",
    "start": "1477450",
    "end": "1479039"
  },
  {
    "text": "implicit scope then at the point where i",
    "start": "1479039",
    "end": "1482159"
  },
  {
    "text": "am doing my jason my jason writer dot",
    "start": "1482159",
    "end": "1485279"
  },
  {
    "text": "right as long as those are all in scope",
    "start": "1485279",
    "end": "1487139"
  },
  {
    "text": "I can call it Jason I can call pair",
    "start": "1487139",
    "end": "1489989"
  },
  {
    "text": "Jason and I can call whatever other",
    "start": "1489989",
    "end": "1492539"
  },
  {
    "text": "jason things are provided implicitly the",
    "start": "1492539",
    "end": "1496080"
  },
  {
    "text": "the compiler again will take care of all",
    "start": "1496080",
    "end": "1497849"
  },
  {
    "text": "event type class membership through",
    "start": "1497849",
    "end": "1500219"
  },
  {
    "text": "implicit resolution now we get this nice",
    "start": "1500219",
    "end": "1503129"
  },
  {
    "text": "symmetry with with jason instances and",
    "start": "1503129",
    "end": "1506609"
  },
  {
    "text": "expression instances again in our",
    "start": "1506609",
    "end": "1509879"
  },
  {
    "text": "companion object for the expression type",
    "start": "1509879",
    "end": "1512909"
  },
  {
    "text": "class I've gone ahead and defined two",
    "start": "1512909",
    "end": "1516419"
  },
  {
    "text": "implicit which again are asserting that",
    "start": "1516419",
    "end": "1518820"
  },
  {
    "text": "int is a member of the expression type",
    "start": "1518820",
    "end": "1521009"
  },
  {
    "text": "class and pair is a member of the",
    "start": "1521009",
    "end": "1524700"
  },
  {
    "text": "expression type class with the",
    "start": "1524700",
    "end": "1526080"
  },
  {
    "text": "assumption that of",
    "start": "1526080",
    "end": "1526909"
  },
  {
    "text": "course pairs constituent bits t1 and t2",
    "start": "1526909",
    "end": "1529869"
  },
  {
    "text": "themselves also have to be viewable as",
    "start": "1529869",
    "end": "1533179"
  },
  {
    "text": "expressions so to evaluate an int well",
    "start": "1533179",
    "end": "1536330"
  },
  {
    "text": "the value is just the value of the",
    "start": "1536330",
    "end": "1537499"
  },
  {
    "text": "number right and to evaluate a pair",
    "start": "1537499",
    "end": "1539989"
  },
  {
    "text": "again a sort of arbitrarily I'll say",
    "start": "1539989",
    "end": "1542269"
  },
  {
    "text": "that a pair represents addition so I",
    "start": "1542269",
    "end": "1545570"
  },
  {
    "text": "will implicitly get the V value for t 1",
    "start": "1545570",
    "end": "1549649"
  },
  {
    "text": "and the value for T 2 out of our",
    "start": "1549649",
    "end": "1553129"
  },
  {
    "text": "implicit scope again using whatever",
    "start": "1553129",
    "end": "1555229"
  },
  {
    "text": "implicit sar available in implicit scope",
    "start": "1555229",
    "end": "1557809"
  },
  {
    "text": "at the time so we're not just limited to",
    "start": "1557809",
    "end": "1559519"
  },
  {
    "text": "your instant are pairs we're open to",
    "start": "1559519",
    "end": "1561830"
  },
  {
    "text": "extension again and you know so I'll get",
    "start": "1561830",
    "end": "1563599"
  },
  {
    "text": "those values and and I'll add them and",
    "start": "1563599",
    "end": "1566029"
  },
  {
    "text": "that'll be the value for our pair plus",
    "start": "1566029",
    "end": "1567739"
  },
  {
    "text": "expression so this is great",
    "start": "1567739",
    "end": "1569359"
  },
  {
    "text": "given that those things are in scope",
    "start": "1569359",
    "end": "1571190"
  },
  {
    "start": "1570000",
    "end": "1570000"
  },
  {
    "text": "again by virtue of the fact that that",
    "start": "1571190",
    "end": "1573379"
  },
  {
    "text": "our our companion objects are declaring",
    "start": "1573379",
    "end": "1575539"
  },
  {
    "text": "them I can say you know Val vu is equal",
    "start": "1575539",
    "end": "1578659"
  },
  {
    "text": "to this tuple of 1 and an inner tuple",
    "start": "1578659",
    "end": "1581450"
  },
  {
    "text": "two and three and I can call jason",
    "start": "1581450",
    "end": "1583519"
  },
  {
    "text": "writer dot right on that and I can call",
    "start": "1583519",
    "end": "1586369"
  },
  {
    "text": "expression evaluator evaluate on that",
    "start": "1586369",
    "end": "1588649"
  },
  {
    "text": "and in fact since we're using implicit",
    "start": "1588649",
    "end": "1590509"
  },
  {
    "text": "resolution we can not only provide",
    "start": "1590509",
    "end": "1593419"
  },
  {
    "text": "additional things to be treated as",
    "start": "1593419",
    "end": "1595999"
  },
  {
    "text": "Jason's and to be treated as expressions",
    "start": "1595999",
    "end": "1598729"
  },
  {
    "text": "I can also override things that I've",
    "start": "1598729",
    "end": "1601369"
  },
  {
    "text": "defined before so let's say for example",
    "start": "1601369",
    "end": "1603320"
  },
  {
    "text": "that instead of treating pairs as",
    "start": "1603320",
    "end": "1605779"
  },
  {
    "text": "addition when I when I view them as",
    "start": "1605779",
    "end": "1608450"
  },
  {
    "text": "expressions I want to treat them instead",
    "start": "1608450",
    "end": "1610009"
  },
  {
    "text": "of subtraction so I've overwritten",
    "start": "1610009",
    "end": "1613220"
  },
  {
    "text": "essentially by by virtue of how implicit",
    "start": "1613220",
    "end": "1616849"
  },
  {
    "text": "scope resolution and the precedents",
    "start": "1616849",
    "end": "1619460"
  },
  {
    "text": "they're works out I've basically",
    "start": "1619460",
    "end": "1621349"
  },
  {
    "text": "redefined pairs to to be treated as",
    "start": "1621349",
    "end": "1623929"
  },
  {
    "text": "minus so so if I call expression",
    "start": "1623929",
    "end": "1625849"
  },
  {
    "text": "evaluator not evaluate on food now using",
    "start": "1625849",
    "end": "1629269"
  },
  {
    "text": "the same foo I haven't done anything",
    "start": "1629269",
    "end": "1630739"
  },
  {
    "text": "different I'll get to out the other end",
    "start": "1630739",
    "end": "1633710"
  },
  {
    "text": "instead of six so this is great to",
    "start": "1633710",
    "end": "1635720"
  },
  {
    "text": "summarize you know a type class is this",
    "start": "1635720",
    "end": "1638389"
  },
  {
    "start": "1636000",
    "end": "1636000"
  },
  {
    "text": "thing that we've that we've seen",
    "start": "1638389",
    "end": "1639349"
  },
  {
    "text": "basically a trait with a single type",
    "start": "1639349",
    "end": "1641359"
  },
  {
    "text": "parameter you know for example jason of",
    "start": "1641359",
    "end": "1643190"
  },
  {
    "text": "a and that defines operations on its",
    "start": "1643190",
    "end": "1646279"
  },
  {
    "text": "member types more advanced actually you",
    "start": "1646279",
    "end": "1649249"
  },
  {
    "text": "can get into multi parameter type",
    "start": "1649249",
    "end": "1650989"
  },
  {
    "text": "classes where i could have you know",
    "start": "1650989",
    "end": "1652159"
  },
  {
    "text": "sometimes some type class with the a and",
    "start": "1652159",
    "end": "1654499"
  },
  {
    "text": "a B parameter or so on",
    "start": "1654499",
    "end": "1655729"
  },
  {
    "text": "that's bit more advanced and then for a",
    "start": "1655729",
    "end": "1657919"
  },
  {
    "text": "type T to be a member",
    "start": "1657919",
    "end": "1660620"
  },
  {
    "text": "of this you know some type class TC",
    "start": "1660620",
    "end": "1663230"
  },
  {
    "text": "there just has to be a value of type T C",
    "start": "1663230",
    "end": "1666500"
  },
  {
    "text": "of T available in the implicit scope and",
    "start": "1666500",
    "end": "1668720"
  },
  {
    "text": "again you know that that's that's really",
    "start": "1668720",
    "end": "1670580"
  },
  {
    "text": "the essence of what the type class",
    "start": "1670580",
    "end": "1672680"
  },
  {
    "text": "pattern is all about in Scala if we want",
    "start": "1672680",
    "end": "1675950"
  },
  {
    "text": "to get a little bit more you know sort",
    "start": "1675950",
    "end": "1677480"
  },
  {
    "text": "of syntactic sugar II and treat these",
    "start": "1677480",
    "end": "1678980"
  },
  {
    "text": "type classes is kind of a first class",
    "start": "1678980",
    "end": "1680570"
  },
  {
    "text": "member of the Scala language we can use",
    "start": "1680570",
    "end": "1682280"
  },
  {
    "text": "context bound syntax saying T :",
    "start": "1682280",
    "end": "1685309"
  },
  {
    "text": "TC to indicate that T is a member of",
    "start": "1685309",
    "end": "1687470"
  },
  {
    "text": "this type class and again that's that's",
    "start": "1687470",
    "end": "1689960"
  },
  {
    "text": "supposed to look similar to to lower or",
    "start": "1689960",
    "end": "1692360"
  },
  {
    "text": "upper type balance right so finally just",
    "start": "1692360",
    "end": "1695390"
  },
  {
    "text": "to summarize the thing that we'd used",
    "start": "1695390",
    "end": "1697400"
  },
  {
    "text": "initially was something called subtype",
    "start": "1697400",
    "end": "1699410"
  },
  {
    "text": "polymorphism which you actually have to",
    "start": "1699410",
    "end": "1701929"
  },
  {
    "text": "use sometimes you can't actually always",
    "start": "1701929",
    "end": "1703520"
  },
  {
    "text": "use ad hoc polymorphism there's there's",
    "start": "1703520",
    "end": "1705770"
  },
  {
    "text": "some cases in which in which you can't",
    "start": "1705770",
    "end": "1707480"
  },
  {
    "text": "get away with that but the disadvantage",
    "start": "1707480",
    "end": "1710059"
  },
  {
    "text": "to using subtype polymorphism when you",
    "start": "1710059",
    "end": "1711740"
  },
  {
    "text": "need to is that you get this sort of",
    "start": "1711740",
    "end": "1713720"
  },
  {
    "text": "tight coupling where the subtype by",
    "start": "1713720",
    "end": "1716270"
  },
  {
    "text": "virtue of in its inheritance is tightly",
    "start": "1716270",
    "end": "1718520"
  },
  {
    "text": "coupled to the super type now in the",
    "start": "1718520",
    "end": "1720830"
  },
  {
    "text": "cases where you can get away with ad hoc",
    "start": "1720830",
    "end": "1722600"
  },
  {
    "text": "polymorphism it's generally a very good",
    "start": "1722600",
    "end": "1724280"
  },
  {
    "text": "idea because when you use type classes",
    "start": "1724280",
    "end": "1726860"
  },
  {
    "text": "there's no coupling whatsoever between",
    "start": "1726860",
    "end": "1729260"
  },
  {
    "text": "the type classes and their members I can",
    "start": "1729260",
    "end": "1731600"
  },
  {
    "text": "mix and match instances of the type",
    "start": "1731600",
    "end": "1734150"
  },
  {
    "text": "class these these vowels that are in it",
    "start": "1734150",
    "end": "1736700"
  },
  {
    "text": "that are in implicit scope or these",
    "start": "1736700",
    "end": "1738800"
  },
  {
    "text": "deaths that are in implicit scope I can",
    "start": "1738800",
    "end": "1741350"
  },
  {
    "text": "mix and match those as I want to",
    "start": "1741350",
    "end": "1743030"
  },
  {
    "text": "so that really opens up the door for",
    "start": "1743030",
    "end": "1744590"
  },
  {
    "text": "quite you know quite powerful decoupling",
    "start": "1744590",
    "end": "1747920"
  },
  {
    "text": "and modularity I can do things like",
    "start": "1747920",
    "end": "1750800"
  },
  {
    "text": "dependency injection using this",
    "start": "1750800",
    "end": "1752240"
  },
  {
    "text": "technique and that's going to help out a",
    "start": "1752240",
    "end": "1754100"
  },
  {
    "text": "lot with with testing in in large code",
    "start": "1754100",
    "end": "1756679"
  },
  {
    "text": "bases I can reuse components that you",
    "start": "1756679",
    "end": "1759050"
  },
  {
    "text": "know we're designed for some problem",
    "start": "1759050",
    "end": "1760910"
  },
  {
    "text": "domain a in some new problem domain B if",
    "start": "1760910",
    "end": "1764480"
  },
  {
    "text": "I can provide appropriate instances of",
    "start": "1764480",
    "end": "1767059"
  },
  {
    "text": "the type class for this for this problem",
    "start": "1767059",
    "end": "1768980"
  },
  {
    "text": "domain B so this is really a powerful",
    "start": "1768980",
    "end": "1771170"
  },
  {
    "text": "tool for for software engineers and one",
    "start": "1771170",
    "end": "1773600"
  },
  {
    "text": "of the big appeals of Scala and and",
    "start": "1773600",
    "end": "1775670"
  },
  {
    "text": "other related functional languages",
    "start": "1775670",
    "end": "1776990"
  },
  {
    "text": "thanks again for watching I hope you",
    "start": "1776990",
    "end": "1778970"
  },
  {
    "text": "guys understand now how to use the type",
    "start": "1778970",
    "end": "1780950"
  },
  {
    "text": "class pattern in Scala to really keep",
    "start": "1780950",
    "end": "1782929"
  },
  {
    "text": "your code nicely modular and decoupled",
    "start": "1782929",
    "end": "1784610"
  },
  {
    "text": "and if you'd like to learn more about",
    "start": "1784610",
    "end": "1786320"
  },
  {
    "text": "Scala please visit our website",
    "start": "1786320",
    "end": "1789820"
  }
]