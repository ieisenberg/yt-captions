[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "so my name is Brian Hughes I'm a",
    "start": "8719",
    "end": "10480"
  },
  {
    "text": "frontend developer at Rio we're a music",
    "start": "10480",
    "end": "12799"
  },
  {
    "text": "streaming company for those of you who",
    "start": "12799",
    "end": "14000"
  },
  {
    "text": "haven't heard of us and uh today I'm",
    "start": "14000",
    "end": "16080"
  },
  {
    "text": "going to talk about a few of the other",
    "start": "16080",
    "end": "18039"
  },
  {
    "text": "features in ecmascript that aren't being",
    "start": "18039",
    "end": "19800"
  },
  {
    "text": "talked about as much I hope you've been",
    "start": "19800",
    "end": "21680"
  },
  {
    "text": "to some of the other ecmascript sixs",
    "start": "21680",
    "end": "23279"
  },
  {
    "text": "talks today there's been some really",
    "start": "23279",
    "end": "24480"
  },
  {
    "text": "good ones uh so let's get started so",
    "start": "24480",
    "end": "28480"
  },
  {
    "start": "28000",
    "end": "68000"
  },
  {
    "text": "egma script 6 is coming out pretty soon",
    "start": "28480",
    "end": "31400"
  },
  {
    "text": "uh word on the street is that the spec",
    "start": "31400",
    "end": "33280"
  },
  {
    "text": "should hopefully be finalized sometime",
    "start": "33280",
    "end": "35120"
  },
  {
    "text": "by the end of this year maybe early next",
    "start": "35120",
    "end": "36879"
  },
  {
    "text": "year and browsers we should start seeing",
    "start": "36879",
    "end": "39399"
  },
  {
    "text": "like really good you know across",
    "start": "39399",
    "end": "40920"
  },
  {
    "text": "theboard support sometime in 2016",
    "start": "40920",
    "end": "44399"
  },
  {
    "text": "2017 that's word on the ground anyways",
    "start": "44399",
    "end": "46559"
  },
  {
    "text": "of course that could change at a",
    "start": "46559",
    "end": "48160"
  },
  {
    "text": "moment's notice but you know it's",
    "start": "48160",
    "end": "50000"
  },
  {
    "text": "goingon to look good so first of all",
    "start": "50000",
    "end": "51879"
  },
  {
    "text": "here's what I'm not going to talk about",
    "start": "51879",
    "end": "53120"
  },
  {
    "text": "today these are like the big things",
    "start": "53120",
    "end": "54559"
  },
  {
    "text": "everyone's talking about we're getting",
    "start": "54559",
    "end": "55879"
  },
  {
    "text": "classes which is awesome we are getting",
    "start": "55879",
    "end": "58199"
  },
  {
    "text": "modules which is also really awesome",
    "start": "58199",
    "end": "60840"
  },
  {
    "text": "we're getting promises which we talked",
    "start": "60840",
    "end": "62120"
  },
  {
    "text": "about earlier today and we're also",
    "start": "62120",
    "end": "63480"
  },
  {
    "text": "getting generators which been talked",
    "start": "63480",
    "end": "64920"
  },
  {
    "text": "about a few times but I'm not going to",
    "start": "64920",
    "end": "66799"
  },
  {
    "text": "talk about that first I'm going to talk",
    "start": "66799",
    "end": "69439"
  },
  {
    "text": "about blot scop variables so actually I",
    "start": "69439",
    "end": "71240"
  },
  {
    "text": "bet a lot of you have heard this before",
    "start": "71240",
    "end": "72720"
  },
  {
    "text": "but just for anyone who hasn't you know",
    "start": "72720",
    "end": "74520"
  },
  {
    "text": "just want to make sure that you know",
    "start": "74520",
    "end": "75799"
  },
  {
    "text": "what this is about because I'm going to",
    "start": "75799",
    "end": "76680"
  },
  {
    "text": "be using these today so as you probably",
    "start": "76680",
    "end": "79720"
  },
  {
    "text": "know uh variables in JavaScript are not",
    "start": "79720",
    "end": "82520"
  },
  {
    "text": "block scoped they're function scoped so",
    "start": "82520",
    "end": "84320"
  },
  {
    "text": "if you declare a variable inside of an",
    "start": "84320",
    "end": "86000"
  },
  {
    "text": "if statement you can reference it",
    "start": "86000",
    "end": "88159"
  },
  {
    "text": "outside and this is you know different",
    "start": "88159",
    "end": "89720"
  },
  {
    "text": "than how most languages work well",
    "start": "89720",
    "end": "91520"
  },
  {
    "text": "they're introducing a new keyword called",
    "start": "91520",
    "end": "93799"
  },
  {
    "text": "let and the let keyword basically says",
    "start": "93799",
    "end": "96600"
  },
  {
    "text": "this is going to be in this block only",
    "start": "96600",
    "end": "99240"
  },
  {
    "text": "so if we take a look at this example",
    "start": "99240",
    "end": "100640"
  },
  {
    "text": "code here uh we have you know an if",
    "start": "100640",
    "end": "102880"
  },
  {
    "text": "statement and we say let Fu equal one",
    "start": "102880",
    "end": "105960"
  },
  {
    "text": "and then after that we have const bar",
    "start": "105960",
    "end": "107799"
  },
  {
    "text": "equals 2 so yes const will actually be a",
    "start": "107799",
    "end": "109920"
  },
  {
    "text": "part of the language and it will also be",
    "start": "109920",
    "end": "111840"
  },
  {
    "text": "block scoped and so uh then if we try to",
    "start": "111840",
    "end": "114759"
  },
  {
    "text": "modify you know we get exceptions if we",
    "start": "114759",
    "end": "116759"
  },
  {
    "text": "try to access these things outside we",
    "start": "116759",
    "end": "119280"
  },
  {
    "text": "also get exceptions so if we run this",
    "start": "119280",
    "end": "120799"
  },
  {
    "text": "code we get this as an",
    "start": "120799",
    "end": "123680"
  },
  {
    "text": "output and this is",
    "start": "123680",
    "end": "126719"
  },
  {
    "text": "great so next up I'm going to talk about",
    "start": "126719",
    "end": "129679"
  },
  {
    "start": "127000",
    "end": "169000"
  },
  {
    "text": "template literals uh these used to be",
    "start": "129679",
    "end": "131800"
  },
  {
    "text": "called quasi strings if you've been",
    "start": "131800",
    "end": "133440"
  },
  {
    "text": "following you know the spec process at",
    "start": "133440",
    "end": "135160"
  },
  {
    "text": "all and basically this is templating",
    "start": "135160",
    "end": "137879"
  },
  {
    "text": "like it's most similar to underscore",
    "start": "137879",
    "end": "139440"
  },
  {
    "text": "templates but you can also think",
    "start": "139440",
    "end": "140519"
  },
  {
    "text": "mustache handlebars except it's built",
    "start": "140519",
    "end": "142879"
  },
  {
    "text": "into the language and it looks like this",
    "start": "142879",
    "end": "146840"
  },
  {
    "text": "you can see we use the back tick",
    "start": "146840",
    "end": "148640"
  },
  {
    "text": "character to specify template string",
    "start": "148640",
    "end": "150760"
  },
  {
    "text": "just because it was kind of the only",
    "start": "150760",
    "end": "152280"
  },
  {
    "text": "quote we had left on the keyboard and",
    "start": "152280",
    "end": "154519"
  },
  {
    "text": "you use the dollar sign and then curly",
    "start": "154519",
    "end": "157120"
  },
  {
    "text": "braces around it and you can put any",
    "start": "157120",
    "end": "159080"
  },
  {
    "text": "JavaScript expression you want inside of",
    "start": "159080",
    "end": "160959"
  },
  {
    "text": "that and will be evaluated so when we",
    "start": "160959",
    "end": "163280"
  },
  {
    "text": "run this code we get hello bar so pretty",
    "start": "163280",
    "end": "168959"
  },
  {
    "start": "169000",
    "end": "208000"
  },
  {
    "text": "cool moving on to object literals we uh",
    "start": "169400",
    "end": "174120"
  },
  {
    "text": "have some new ways of specifying",
    "start": "174120",
    "end": "176000"
  },
  {
    "text": "properties inside of it and there's",
    "start": "176000",
    "end": "177400"
  },
  {
    "text": "what's called computed property names",
    "start": "177400",
    "end": "179680"
  },
  {
    "text": "and and what this allows you to do is",
    "start": "179680",
    "end": "181239"
  },
  {
    "text": "you have a variable that has you know a",
    "start": "181239",
    "end": "183080"
  },
  {
    "text": "string or something that can be CED to a",
    "start": "183080",
    "end": "184879"
  },
  {
    "text": "string in it and you put it in your",
    "start": "184879",
    "end": "187280"
  },
  {
    "text": "object Lal inside of square brackets and",
    "start": "187280",
    "end": "189239"
  },
  {
    "text": "what this means is it says take the",
    "start": "189239",
    "end": "191480"
  },
  {
    "text": "value of your variable and dump it in as",
    "start": "191480",
    "end": "194560"
  },
  {
    "text": "the key name so you can think like this",
    "start": "194560",
    "end": "196959"
  },
  {
    "text": "is useful for mixin and things like that",
    "start": "196959",
    "end": "199239"
  },
  {
    "text": "so when we run this code you see we're",
    "start": "199239",
    "end": "200680"
  },
  {
    "text": "referencing object. Fu which is you know",
    "start": "200680",
    "end": "203680"
  },
  {
    "text": "the value of my prop we get far",
    "start": "203680",
    "end": "208239"
  },
  {
    "text": "back all right so another object literal",
    "start": "208239",
    "end": "210959"
  },
  {
    "text": "uh modification is we now have a shorter",
    "start": "210959",
    "end": "212920"
  },
  {
    "text": "way of specifying functions inside of an",
    "start": "212920",
    "end": "215120"
  },
  {
    "text": "object literal so this is a very common",
    "start": "215120",
    "end": "217840"
  },
  {
    "text": "that you know we add functions inside of",
    "start": "217840",
    "end": "219040"
  },
  {
    "text": "it so now we can skip doing uh you know",
    "start": "219040",
    "end": "222120"
  },
  {
    "text": "key colon function and all this stuff",
    "start": "222120",
    "end": "225080"
  },
  {
    "text": "instead we just simply do the name of",
    "start": "225080",
    "end": "226439"
  },
  {
    "text": "the function parentheses with whatever",
    "start": "226439",
    "end": "228360"
  },
  {
    "text": "your arguments are and then the body so",
    "start": "228360",
    "end": "231720"
  },
  {
    "text": "whenever we do something like this we",
    "start": "231720",
    "end": "233680"
  },
  {
    "text": "get bar back so this is great for saving",
    "start": "233680",
    "end": "236360"
  },
  {
    "text": "a lot of characters and plus it's also a",
    "start": "236360",
    "end": "238680"
  },
  {
    "text": "named function too which is kind of",
    "start": "238680",
    "end": "241720"
  },
  {
    "text": "nice uh so getting out of object",
    "start": "241720",
    "end": "244560"
  },
  {
    "start": "243000",
    "end": "326000"
  },
  {
    "text": "literals we now have what are called",
    "start": "244560",
    "end": "246680"
  },
  {
    "text": "rest parameters so uh who here has ever",
    "start": "246680",
    "end": "249959"
  },
  {
    "text": "used the arguments keyword and who here",
    "start": "249959",
    "end": "253000"
  },
  {
    "text": "hates using the arguments keyword right",
    "start": "253000",
    "end": "254799"
  },
  {
    "text": "pretty much everyone arguments was",
    "start": "254799",
    "end": "256880"
  },
  {
    "text": "something of an Abomination that was",
    "start": "256880",
    "end": "258440"
  },
  {
    "text": "sort of like an array but not exactly",
    "start": "258440",
    "end": "260639"
  },
  {
    "text": "and you get tripped up by it and so they",
    "start": "260639",
    "end": "262600"
  },
  {
    "text": "said you know what let's do something",
    "start": "262600",
    "end": "263840"
  },
  {
    "text": "new so they came up with this concept of",
    "start": "263840",
    "end": "265840"
  },
  {
    "text": "rest parameters the idea is you have",
    "start": "265840",
    "end": "268639"
  },
  {
    "text": "your arguments to your fun function and",
    "start": "268639",
    "end": "270720"
  },
  {
    "text": "then you do a dot dot dot you have three",
    "start": "270720",
    "end": "272759"
  },
  {
    "text": "dots and then the name of some other",
    "start": "272759",
    "end": "274880"
  },
  {
    "text": "identifier and basically what this says",
    "start": "274880",
    "end": "277240"
  },
  {
    "text": "is take all the rest of the arguments",
    "start": "277240",
    "end": "279120"
  },
  {
    "text": "passed into the function and put them",
    "start": "279120",
    "end": "281199"
  },
  {
    "text": "inside of an array that has the name of",
    "start": "281199",
    "end": "283280"
  },
  {
    "text": "whatever comes after to the dot so in",
    "start": "283280",
    "end": "284560"
  },
  {
    "text": "this case we're creating an array called",
    "start": "284560",
    "end": "286639"
  },
  {
    "text": "rest and this is an actual array and you",
    "start": "286639",
    "end": "289280"
  },
  {
    "text": "can iterate over it and do all the",
    "start": "289280",
    "end": "290880"
  },
  {
    "text": "typical array things you do so when we",
    "start": "290880",
    "end": "293240"
  },
  {
    "text": "run this code where we're passing in",
    "start": "293240",
    "end": "294800"
  },
  {
    "text": "five",
    "start": "294800",
    "end": "295680"
  },
  {
    "text": "parameters we can see that you know A",
    "start": "295680",
    "end": "297800"
  },
  {
    "text": "and B are of course one and two the uh",
    "start": "297800",
    "end": "300600"
  },
  {
    "text": "rest is actually an array and then we",
    "start": "300600",
    "end": "303240"
  },
  {
    "text": "get three for five inside of that array",
    "start": "303240",
    "end": "305440"
  },
  {
    "text": "now this is also nice because you don't",
    "start": "305440",
    "end": "307440"
  },
  {
    "text": "you can have you know parameters that",
    "start": "307440",
    "end": "308680"
  },
  {
    "text": "are always required at the beginning",
    "start": "308680",
    "end": "310000"
  },
  {
    "text": "that could be totally unrelated to",
    "start": "310000",
    "end": "311680"
  },
  {
    "text": "whatever is in your rest so this",
    "start": "311680",
    "end": "313320"
  },
  {
    "text": "prevents you know back in the arguments",
    "start": "313320",
    "end": "314880"
  },
  {
    "text": "day after you cour it to array you might",
    "start": "314880",
    "end": "316960"
  },
  {
    "text": "still have to do a splice or a slice or",
    "start": "316960",
    "end": "319039"
  },
  {
    "text": "something like that to get just what",
    "start": "319039",
    "end": "320440"
  },
  {
    "text": "you're interested in and so this uh I",
    "start": "320440",
    "end": "322960"
  },
  {
    "text": "think is a little more",
    "start": "322960",
    "end": "325120"
  },
  {
    "text": "elegant there's another new thing coming",
    "start": "325120",
    "end": "327720"
  },
  {
    "start": "326000",
    "end": "372000"
  },
  {
    "text": "called spread which is pretty much the",
    "start": "327720",
    "end": "329919"
  },
  {
    "text": "opposite of rest so this is whenever you",
    "start": "329919",
    "end": "332240"
  },
  {
    "text": "want to call a method you can take an",
    "start": "332240",
    "end": "335240"
  },
  {
    "text": "array and you basically take the values",
    "start": "335240",
    "end": "337280"
  },
  {
    "text": "of that array and you sort of spread it",
    "start": "337280",
    "end": "338680"
  },
  {
    "text": "out as the rest of the arguments this is",
    "start": "338680",
    "end": "340759"
  },
  {
    "text": "sort of analogous to doing uh you know",
    "start": "340759",
    "end": "342880"
  },
  {
    "text": "function. call or apply except that it's",
    "start": "342880",
    "end": "345919"
  },
  {
    "text": "also nice like uh the rest operator and",
    "start": "345919",
    "end": "348440"
  },
  {
    "text": "that you know it's sort of like partial",
    "start": "348440",
    "end": "349759"
  },
  {
    "text": "you can give it an explicit argument and",
    "start": "349759",
    "end": "353120"
  },
  {
    "text": "then you can spread out the array after",
    "start": "353120",
    "end": "354560"
  },
  {
    "text": "that so in this specific case what it",
    "start": "354560",
    "end": "357120"
  },
  {
    "text": "will do is it will take this array with",
    "start": "357120",
    "end": "359120"
  },
  {
    "text": "three elements M and basically apply",
    "start": "359120",
    "end": "361720"
  },
  {
    "text": "that to the rest of the function after",
    "start": "361720",
    "end": "363600"
  },
  {
    "text": "the first one so when we run this code",
    "start": "363600",
    "end": "365960"
  },
  {
    "text": "we indeed get 1 2 3 four as a",
    "start": "365960",
    "end": "369160"
  },
  {
    "text": "result so pretty",
    "start": "369160",
    "end": "372639"
  },
  {
    "start": "372000",
    "end": "479000"
  },
  {
    "text": "cool uh another thing that I think is",
    "start": "372759",
    "end": "375319"
  },
  {
    "text": "really cool is we now have What's called",
    "start": "375319",
    "end": "377280"
  },
  {
    "text": "the four of statement of course everyone",
    "start": "377280",
    "end": "379759"
  },
  {
    "text": "I'm sure is familiar with four Loops you",
    "start": "379759",
    "end": "381360"
  },
  {
    "text": "probably use the four in Loop for",
    "start": "381360",
    "end": "383599"
  },
  {
    "text": "iterating over keys in an object well",
    "start": "383599",
    "end": "385919"
  },
  {
    "text": "now we also have the four of and it's",
    "start": "385919",
    "end": "387360"
  },
  {
    "text": "just you know another variant and what",
    "start": "387360",
    "end": "389800"
  },
  {
    "text": "this looks like is we have four you know",
    "start": "389800",
    "end": "391919"
  },
  {
    "text": "your initializer just like in a four in",
    "start": "391919",
    "end": "393840"
  },
  {
    "text": "except the of keyword instead and what",
    "start": "393840",
    "end": "396440"
  },
  {
    "text": "this does is this allows us to basically",
    "start": "396440",
    "end": "399360"
  },
  {
    "text": "iterate over each Val uh element inside",
    "start": "399360",
    "end": "401800"
  },
  {
    "text": "of the array so this is different than",
    "start": "401800",
    "end": "403680"
  },
  {
    "text": "4N 4N will give you a key back you know",
    "start": "403680",
    "end": "406840"
  },
  {
    "text": "because arrays are ultimate objects for",
    "start": "406840",
    "end": "408880"
  },
  {
    "text": "of gives you the value back instead of",
    "start": "408880",
    "end": "410520"
  },
  {
    "text": "the key and so when you want to iterate",
    "start": "410520",
    "end": "412400"
  },
  {
    "text": "over an array this is a really clean",
    "start": "412400",
    "end": "414440"
  },
  {
    "text": "really elegant way of doing it where you",
    "start": "414440",
    "end": "415960"
  },
  {
    "text": "don't have to mess around with indices",
    "start": "415960",
    "end": "417800"
  },
  {
    "text": "you don't have to use four each you know",
    "start": "417800",
    "end": "420120"
  },
  {
    "text": "or each if you're using underscore or",
    "start": "420120",
    "end": "421599"
  },
  {
    "text": "low Dash and we can easily get all our",
    "start": "421599",
    "end": "424599"
  },
  {
    "text": "values out so when we run this we get a",
    "start": "424599",
    "end": "427639"
  },
  {
    "text": "B and C so nice and compact of course",
    "start": "427639",
    "end": "431039"
  },
  {
    "text": "you don't always want to use a four of",
    "start": "431039",
    "end": "433120"
  },
  {
    "text": "array anytime you need an indic say you",
    "start": "433120",
    "end": "435160"
  },
  {
    "text": "want to modify the array you want to you",
    "start": "435160",
    "end": "436599"
  },
  {
    "text": "know splice something out you can't use",
    "start": "436599",
    "end": "438720"
  },
  {
    "text": "four of in that case because you don't",
    "start": "438720",
    "end": "440479"
  },
  {
    "text": "get that uh index in it but for I think",
    "start": "440479",
    "end": "443319"
  },
  {
    "text": "a lot of cases with arrays you know this",
    "start": "443319",
    "end": "444879"
  },
  {
    "text": "is this is going to be",
    "start": "444879",
    "end": "447479"
  },
  {
    "text": "great all right so moving on to to",
    "start": "447479",
    "end": "450039"
  },
  {
    "text": "probably my favorite uh feature coming",
    "start": "450039",
    "end": "452639"
  },
  {
    "text": "is destructuring this was briefly sort",
    "start": "452639",
    "end": "455280"
  },
  {
    "text": "of hinted at in uh in an earlier talk",
    "start": "455280",
    "end": "457919"
  },
  {
    "text": "today uh the one talking about like",
    "start": "457919",
    "end": "460440"
  },
  {
    "text": "processes and macros and stuff like that",
    "start": "460440",
    "end": "462720"
  },
  {
    "text": "uh so what destructuring is the way I",
    "start": "462720",
    "end": "464759"
  },
  {
    "text": "like to think about it is it's very",
    "start": "464759",
    "end": "466639"
  },
  {
    "text": "analogous to tupal and python um does",
    "start": "466639",
    "end": "469080"
  },
  {
    "text": "anyone else here know much python okay",
    "start": "469080",
    "end": "471479"
  },
  {
    "text": "so a few so you probably run into tupal",
    "start": "471479",
    "end": "474280"
  },
  {
    "text": "the idea with tuples in Python is you",
    "start": "474280",
    "end": "475919"
  },
  {
    "text": "can return more than one thing from a",
    "start": "475919",
    "end": "477879"
  },
  {
    "text": "function well under the hood this is",
    "start": "477879",
    "end": "480520"
  },
  {
    "start": "479000",
    "end": "551000"
  },
  {
    "text": "kind of different semantics but you are",
    "start": "480520",
    "end": "482319"
  },
  {
    "text": "essentially doing the same thing the",
    "start": "482319",
    "end": "484720"
  },
  {
    "text": "idea is you have some complex object and",
    "start": "484720",
    "end": "487680"
  },
  {
    "text": "you want to break it apart into like",
    "start": "487680",
    "end": "489319"
  },
  {
    "text": "simpler parts and assign those to other",
    "start": "489319",
    "end": "492400"
  },
  {
    "text": "variables so in this case we have an",
    "start": "492400",
    "end": "494840"
  },
  {
    "text": "array you know with two elements in it",
    "start": "494840",
    "end": "497479"
  },
  {
    "text": "and you can see we have the special let",
    "start": "497479",
    "end": "499039"
  },
  {
    "text": "statement where we have brackets that",
    "start": "499039",
    "end": "502039"
  },
  {
    "text": "says okay we have an array and we want",
    "start": "502039",
    "end": "503800"
  },
  {
    "text": "to break it apart and this goes on you",
    "start": "503800",
    "end": "505039"
  },
  {
    "text": "know the left hand side of an assignment",
    "start": "505039",
    "end": "507960"
  },
  {
    "text": "and you basically give it the names of",
    "start": "507960",
    "end": "509319"
  },
  {
    "text": "the identifiers you want and it will",
    "start": "509319",
    "end": "511039"
  },
  {
    "text": "basically do like a pattern match it'll",
    "start": "511039",
    "end": "512760"
  },
  {
    "text": "take the first two elements out of the",
    "start": "512760",
    "end": "514120"
  },
  {
    "text": "array on the right hand side break it",
    "start": "514120",
    "end": "516000"
  },
  {
    "text": "apart and assign it to those two",
    "start": "516000",
    "end": "518000"
  },
  {
    "text": "variables so when we run this we indeed",
    "start": "518000",
    "end": "520959"
  },
  {
    "text": "get one and two so this is going to",
    "start": "520959",
    "end": "524880"
  },
  {
    "text": "allow us to get really really concise",
    "start": "524880",
    "end": "526880"
  },
  {
    "text": "code I mean how many times have we all",
    "start": "526880",
    "end": "528600"
  },
  {
    "text": "done the pattern where we call a",
    "start": "528600",
    "end": "530000"
  },
  {
    "text": "function we get an array back and then",
    "start": "530000",
    "end": "532560"
  },
  {
    "text": "we got to assign it to a temporary",
    "start": "532560",
    "end": "533880"
  },
  {
    "text": "variable and then we create two more",
    "start": "533880",
    "end": "535320"
  },
  {
    "text": "variables to get those first two",
    "start": "535320",
    "end": "536600"
  },
  {
    "text": "elements that we go on so this is",
    "start": "536600",
    "end": "538360"
  },
  {
    "text": "essentially doing that all wrapped up",
    "start": "538360",
    "end": "540160"
  },
  {
    "text": "into a single line so I think this is",
    "start": "540160",
    "end": "542519"
  },
  {
    "text": "awesome now they took it a step further",
    "start": "542519",
    "end": "545200"
  },
  {
    "text": "though so this is basically how you do T",
    "start": "545200",
    "end": "546800"
  },
  {
    "text": "pools in Python now the next thing",
    "start": "546800",
    "end": "548800"
  },
  {
    "text": "python actually doesn't have an",
    "start": "548800",
    "end": "549959"
  },
  {
    "text": "equivalent of at least not yet and",
    "start": "549959",
    "end": "552600"
  },
  {
    "start": "551000",
    "end": "640000"
  },
  {
    "text": "that's because you can also destructure",
    "start": "552600",
    "end": "554399"
  },
  {
    "text": "an object not just an",
    "start": "554399",
    "end": "556920"
  },
  {
    "text": "array so what you can do here is you",
    "start": "556920",
    "end": "559000"
  },
  {
    "text": "know we create an object and then we say",
    "start": "559000",
    "end": "560920"
  },
  {
    "text": "let once again you know where this is on",
    "start": "560920",
    "end": "562800"
  },
  {
    "text": "the right hand side but instead of the",
    "start": "562800",
    "end": "564440"
  },
  {
    "text": "square brackets we use uh curly brackets",
    "start": "564440",
    "end": "567360"
  },
  {
    "text": "saying that we're going to destructure",
    "start": "567360",
    "end": "568720"
  },
  {
    "text": "an object and what you do is on the each",
    "start": "568720",
    "end": "571839"
  },
  {
    "text": "of these little sub elements here you",
    "start": "571839",
    "end": "573760"
  },
  {
    "text": "give the name of the property you want",
    "start": "573760",
    "end": "575720"
  },
  {
    "text": "on the left and the name of the variable",
    "start": "575720",
    "end": "577640"
  },
  {
    "text": "you want to assign it to on the right of",
    "start": "577640",
    "end": "579360"
  },
  {
    "text": "that colon so in this case we're going",
    "start": "579360",
    "end": "581440"
  },
  {
    "text": "to take you know the property uh the",
    "start": "581440",
    "end": "583680"
  },
  {
    "text": "value of the one property and we'll",
    "start": "583680",
    "end": "585839"
  },
  {
    "text": "assign it to a and we'll take the value",
    "start": "585839",
    "end": "587920"
  },
  {
    "text": "of the two property and assign it to B",
    "start": "587920",
    "end": "591240"
  },
  {
    "text": "and so when we run this we get one and",
    "start": "591240",
    "end": "593440"
  },
  {
    "text": "two back so I think this is even more uh",
    "start": "593440",
    "end": "596399"
  },
  {
    "text": "powerful you can think about if you have",
    "start": "596399",
    "end": "598240"
  },
  {
    "text": "you know a rest call or something like",
    "start": "598240",
    "end": "600079"
  },
  {
    "text": "that where you're getting an object back",
    "start": "600079",
    "end": "602079"
  },
  {
    "text": "and you know the first thing you do is",
    "start": "602079",
    "end": "604040"
  },
  {
    "text": "once again you you you assign that to a",
    "start": "604040",
    "end": "605720"
  },
  {
    "text": "temporary variable and then you create",
    "start": "605720",
    "end": "607480"
  },
  {
    "text": "two more variables in which you're aing",
    "start": "607480",
    "end": "609240"
  },
  {
    "text": "out those properties you want or if",
    "start": "609240",
    "end": "611000"
  },
  {
    "text": "you're not doing that you're constantly",
    "start": "611000",
    "end": "612480"
  },
  {
    "text": "referencing you know response do",
    "start": "612480",
    "end": "614240"
  },
  {
    "text": "response. response. all through your",
    "start": "614240",
    "end": "615959"
  },
  {
    "text": "code and so this is a way of you know",
    "start": "615959",
    "end": "618760"
  },
  {
    "text": "just really cleaning that",
    "start": "618760",
    "end": "620480"
  },
  {
    "text": "up and so these are cool features but I",
    "start": "620480",
    "end": "624000"
  },
  {
    "text": "think the really great thing about this",
    "start": "624000",
    "end": "625560"
  },
  {
    "text": "is when we start mixing these up",
    "start": "625560",
    "end": "627040"
  },
  {
    "text": "together you know each one of these is",
    "start": "627040",
    "end": "628519"
  },
  {
    "text": "kind of nice in its own own way but you",
    "start": "628519",
    "end": "629959"
  },
  {
    "text": "start combining them and you can really",
    "start": "629959",
    "end": "631680"
  },
  {
    "text": "start creating uh shorter more concise",
    "start": "631680",
    "end": "634480"
  },
  {
    "text": "code and I think more readable code too",
    "start": "634480",
    "end": "636680"
  },
  {
    "text": "and more readable code means more",
    "start": "636680",
    "end": "638600"
  },
  {
    "text": "maintainable so just as a little",
    "start": "638600",
    "end": "640720"
  },
  {
    "start": "640000",
    "end": "761000"
  },
  {
    "text": "contrived example uh this is kind of",
    "start": "640720",
    "end": "643399"
  },
  {
    "text": "bringing a lot of stuff together so",
    "start": "643399",
    "end": "645360"
  },
  {
    "text": "first we're creating two variables A and",
    "start": "645360",
    "end": "647519"
  },
  {
    "text": "B and we're giving them some name uh",
    "start": "647519",
    "end": "650320"
  },
  {
    "text": "Properties or strings first and last and",
    "start": "650320",
    "end": "652399"
  },
  {
    "text": "we're using these as properties so we",
    "start": "652399",
    "end": "654360"
  },
  {
    "text": "have a computed property you see we're",
    "start": "654360",
    "end": "655959"
  },
  {
    "text": "doing a and b as computed property so",
    "start": "655959",
    "end": "657720"
  },
  {
    "text": "we're basically creating these two",
    "start": "657720",
    "end": "658839"
  },
  {
    "text": "objects",
    "start": "658839",
    "end": "659760"
  },
  {
    "text": "with a first property and a last",
    "start": "659760",
    "end": "661200"
  },
  {
    "text": "property now these are also functions so",
    "start": "661200",
    "end": "664079"
  },
  {
    "text": "it's a function called First and a",
    "start": "664079",
    "end": "665240"
  },
  {
    "text": "function called last that takes one",
    "start": "665240",
    "end": "666959"
  },
  {
    "text": "parameter and you see we have its",
    "start": "666959",
    "end": "668600"
  },
  {
    "text": "function body body after that and what",
    "start": "668600",
    "end": "670800"
  },
  {
    "text": "this is doing is it's essentially taking",
    "start": "670800",
    "end": "673920"
  },
  {
    "text": "a template you you it takes this one",
    "start": "673920",
    "end": "675600"
  },
  {
    "text": "parameter we turn a template that",
    "start": "675600",
    "end": "677360"
  },
  {
    "text": "modifies its output based on whatever",
    "start": "677360",
    "end": "679000"
  },
  {
    "text": "you pass into it so you can think of",
    "start": "679000",
    "end": "681079"
  },
  {
    "text": "this as you know say a model in which",
    "start": "681079",
    "end": "683079"
  },
  {
    "text": "you're calling like you know a a get",
    "start": "683079",
    "end": "685200"
  },
  {
    "text": "last name get first name and it makes it",
    "start": "685200",
    "end": "687399"
  },
  {
    "text": "you know pretty PR it for you so then we",
    "start": "687399",
    "end": "689839"
  },
  {
    "text": "have this function that called print",
    "start": "689839",
    "end": "691680"
  },
  {
    "text": "that's going to print things out in last",
    "start": "691680",
    "end": "693079"
  },
  {
    "text": "name comma first you know this is like a",
    "start": "693079",
    "end": "695000"
  },
  {
    "text": "formatter and of course we are using the",
    "start": "695000",
    "end": "698040"
  },
  {
    "text": "rest operator and we know passing in",
    "start": "698040",
    "end": "700440"
  },
  {
    "text": "these two objects just as arguments you",
    "start": "700440",
    "end": "703519"
  },
  {
    "text": "know this is not an array of people",
    "start": "703519",
    "end": "705560"
  },
  {
    "text": "these are just arguments to print so",
    "start": "705560",
    "end": "707560"
  },
  {
    "text": "we're using the rest operator to",
    "start": "707560",
    "end": "709880"
  },
  {
    "text": "basically get those into an array and",
    "start": "709880",
    "end": "712079"
  },
  {
    "text": "then we're iterating over that array",
    "start": "712079",
    "end": "713760"
  },
  {
    "text": "using a four of so and inside of this",
    "start": "713760",
    "end": "717000"
  },
  {
    "text": "four of though you notice that we",
    "start": "717000",
    "end": "718360"
  },
  {
    "text": "actually have a dist structuring",
    "start": "718360",
    "end": "720440"
  },
  {
    "text": "assignment in your initializer for that",
    "start": "720440",
    "end": "722720"
  },
  {
    "text": "four up so instead of just assigning it",
    "start": "722720",
    "end": "724040"
  },
  {
    "text": "to one property we're assigning it to",
    "start": "724040",
    "end": "725920"
  },
  {
    "text": "two so We're looping over this array",
    "start": "725920",
    "end": "729600"
  },
  {
    "text": "destructuring out and you notice there's",
    "start": "729600",
    "end": "731920"
  },
  {
    "text": "only one reference to the array no",
    "start": "731920",
    "end": "733399"
  },
  {
    "text": "references to any temporary variables",
    "start": "733399",
    "end": "735839"
  },
  {
    "text": "and then we log out uh their name we're",
    "start": "735839",
    "end": "739160"
  },
  {
    "text": "capitalizing the last name and not",
    "start": "739160",
    "end": "740720"
  },
  {
    "text": "capitalizing the first why would you",
    "start": "740720",
    "end": "742399"
  },
  {
    "text": "want to do that I don't know this just",
    "start": "742399",
    "end": "744079"
  },
  {
    "text": "for the example but this is really",
    "start": "744079",
    "end": "746519"
  },
  {
    "text": "concise and we when we run this we get",
    "start": "746519",
    "end": "750360"
  },
  {
    "text": "Jones comma Alice and Smith comma Bob",
    "start": "750360",
    "end": "753360"
  },
  {
    "text": "written really short so what would this",
    "start": "753360",
    "end": "755519"
  },
  {
    "text": "look like today just as an example you",
    "start": "755519",
    "end": "757720"
  },
  {
    "text": "know how much is this actually saving us",
    "start": "757720",
    "end": "759120"
  },
  {
    "text": "so I decided to code this up in es5 and",
    "start": "759120",
    "end": "762160"
  },
  {
    "start": "761000",
    "end": "847000"
  },
  {
    "text": "it looks like that it's about 40% longer",
    "start": "762160",
    "end": "767000"
  },
  {
    "text": "in terms of actual number of characters",
    "start": "767000",
    "end": "769519"
  },
  {
    "text": "so not only is it more code it's a lot",
    "start": "769519",
    "end": "771160"
  },
  {
    "text": "more dense too and there's some",
    "start": "771160",
    "end": "772800"
  },
  {
    "text": "interesting stuff going on like you can",
    "start": "772800",
    "end": "774199"
  },
  {
    "text": "see we're doing this array. prototype.",
    "start": "774199",
    "end": "776000"
  },
  {
    "text": "slice. apply thing to arguments which if",
    "start": "776000",
    "end": "779600"
  },
  {
    "text": "you've seen that before you probably",
    "start": "779600",
    "end": "780639"
  },
  {
    "text": "just memorized it as this is how you",
    "start": "780639",
    "end": "782240"
  },
  {
    "text": "make arguments in Array and actually you",
    "start": "782240",
    "end": "784240"
  },
  {
    "text": "know deciphering you got to sit there",
    "start": "784240",
    "end": "785440"
  },
  {
    "text": "and think for a minute okay what is why",
    "start": "785440",
    "end": "787760"
  },
  {
    "text": "why are we referencing the array",
    "start": "787760",
    "end": "788760"
  },
  {
    "text": "prototype okay what's a slice let me",
    "start": "788760",
    "end": "790040"
  },
  {
    "text": "look up slice real quick and so you're",
    "start": "790040",
    "end": "791519"
  },
  {
    "text": "having to do all this like kind of",
    "start": "791519",
    "end": "793519"
  },
  {
    "text": "mental math to figure out what's going",
    "start": "793519",
    "end": "794959"
  },
  {
    "text": "on with it and also you look at you know",
    "start": "794959",
    "end": "797360"
  },
  {
    "text": "when we're creating these objects",
    "start": "797360",
    "end": "798600"
  },
  {
    "text": "there's just a lot of stuff to it a lot",
    "start": "798600",
    "end": "800760"
  },
  {
    "text": "of different assignments and these could",
    "start": "800760",
    "end": "802720"
  },
  {
    "text": "be mixed around anywhere so this could",
    "start": "802720",
    "end": "805000"
  },
  {
    "text": "be very very ugly code and at best it's",
    "start": "805000",
    "end": "807839"
  },
  {
    "text": "only somewhat ugly code",
    "start": "807839",
    "end": "810360"
  },
  {
    "text": "now we'll say if you are using",
    "start": "810360",
    "end": "812560"
  },
  {
    "text": "ecmascript 6 today there are ways of",
    "start": "812560",
    "end": "814399"
  },
  {
    "text": "doing this there's a compiler out there",
    "start": "814399",
    "end": "816680"
  },
  {
    "text": "called Tracer I believe is how it's",
    "start": "816680",
    "end": "818720"
  },
  {
    "text": "pronounced from Google and it basically",
    "start": "818720",
    "end": "821160"
  },
  {
    "text": "treats ecmascript 6 like a compile to",
    "start": "821160",
    "end": "823720"
  },
  {
    "text": "language you know like copy script or",
    "start": "823720",
    "end": "824920"
  },
  {
    "text": "something like that so you can use in",
    "start": "824920",
    "end": "826279"
  },
  {
    "text": "browsers today and when you use a tool",
    "start": "826279",
    "end": "828639"
  },
  {
    "text": "like that it would actually take the",
    "start": "828639",
    "end": "830079"
  },
  {
    "text": "previous slide this slide and it will",
    "start": "830079",
    "end": "832800"
  },
  {
    "text": "convert it to this under the hood so",
    "start": "832800",
    "end": "834519"
  },
  {
    "text": "this is actually what we'll be running",
    "start": "834519",
    "end": "836320"
  },
  {
    "text": "today uh and but that's a good way to",
    "start": "836320",
    "end": "839160"
  },
  {
    "text": "play with it today you get to know it",
    "start": "839160",
    "end": "841000"
  },
  {
    "text": "and in fact every single code example",
    "start": "841000",
    "end": "842680"
  },
  {
    "text": "you saw on this I ran through Tracer and",
    "start": "842680",
    "end": "844480"
  },
  {
    "text": "actually",
    "start": "844480",
    "end": "846079"
  },
  {
    "text": "worked and so if you want to grab the",
    "start": "846079",
    "end": "848680"
  },
  {
    "text": "slides here's uh some links to them and",
    "start": "848680",
    "end": "851120"
  },
  {
    "text": "I'll also post this on Twitter of course",
    "start": "851120",
    "end": "852519"
  },
  {
    "text": "you know ash4 JS and there's some more",
    "start": "852519",
    "end": "855000"
  },
  {
    "text": "links in there uh as well so the actual",
    "start": "855000",
    "end": "857480"
  },
  {
    "text": "code you can grab I have a little",
    "start": "857480",
    "end": "859560"
  },
  {
    "text": "snippet out there and that code it's",
    "start": "859560",
    "end": "861800"
  },
  {
    "text": "just in a tracer enabled websites you",
    "start": "861800",
    "end": "863959"
  },
  {
    "text": "can run it view the console and um have",
    "start": "863959",
    "end": "866720"
  },
  {
    "text": "fun all right uh questions uh yeah sure",
    "start": "866720",
    "end": "870120"
  },
  {
    "text": "so when you're doing the object",
    "start": "870120",
    "end": "871720"
  },
  {
    "text": "destructuring that's not with",
    "start": "871720",
    "end": "874120"
  },
  {
    "text": "proty",
    "start": "874120",
    "end": "875759"
  },
  {
    "text": "correct yes it's just properties on it",
    "start": "875759",
    "end": "878279"
  },
  {
    "text": "and now if you have an object that has",
    "start": "878279",
    "end": "880240"
  },
  {
    "text": "like a prototype and properties going up",
    "start": "880240",
    "end": "882040"
  },
  {
    "text": "it will search up the Prototype chain",
    "start": "882040",
    "end": "883480"
  },
  {
    "text": "you know it's a normal property lookup",
    "start": "883480",
    "end": "886959"
  },
  {
    "text": "mechanism",
    "start": "886959",
    "end": "889079"
  },
  {
    "text": "yesing yes uh sorry I didn't repeat the",
    "start": "889079",
    "end": "891480"
  },
  {
    "text": "earlier question so the question was if",
    "start": "891480",
    "end": "893440"
  },
  {
    "text": "you do a destructuring of an array but",
    "start": "893440",
    "end": "895440"
  },
  {
    "text": "you don't match up its length let's say",
    "start": "895440",
    "end": "897279"
  },
  {
    "text": "you have three variables on the right",
    "start": "897279",
    "end": "899440"
  },
  {
    "text": "but your R is only too long then yes",
    "start": "899440",
    "end": "901560"
  },
  {
    "text": "that third variable will get the value",
    "start": "901560",
    "end": "903040"
  },
  {
    "text": "undefined it's just like you're",
    "start": "903040",
    "end": "904720"
  },
  {
    "text": "referencing you know the bracket index",
    "start": "904720",
    "end": "908240"
  },
  {
    "text": "that's out of bounds so the same thing",
    "start": "908240",
    "end": "910399"
  },
  {
    "text": "and's",
    "start": "910399",
    "end": "912920"
  },
  {
    "text": "morec just alone yes and if there is",
    "start": "912920",
    "end": "916000"
  },
  {
    "text": "more elements in the array than what",
    "start": "916000",
    "end": "917240"
  },
  {
    "text": "you're def referencing they are",
    "start": "917240",
    "end": "919800"
  },
  {
    "text": "ignored and same thing with properties",
    "start": "919800",
    "end": "922000"
  },
  {
    "text": "on an object as well if you try to",
    "start": "922000",
    "end": "923440"
  },
  {
    "text": "reference a property that doesn't exist",
    "start": "923440",
    "end": "925399"
  },
  {
    "text": "you'll get",
    "start": "925399",
    "end": "926959"
  },
  {
    "text": "undefined and if there are extra",
    "start": "926959",
    "end": "928600"
  },
  {
    "text": "properties on the object they're",
    "start": "928600",
    "end": "930759"
  },
  {
    "text": "ignored",
    "start": "930759",
    "end": "932519"
  },
  {
    "text": "whatever uh so the question was if",
    "start": "932519",
    "end": "934759"
  },
  {
    "text": "you're destructuring an array can you",
    "start": "934759",
    "end": "936279"
  },
  {
    "text": "use the dot dot do syntax inside of it",
    "start": "936279",
    "end": "938480"
  },
  {
    "text": "on the left hand side so you do let",
    "start": "938480",
    "end": "940720"
  },
  {
    "text": "bracket a comma B comma dot dot dot rest",
    "start": "940720",
    "end": "944319"
  },
  {
    "text": "um you know I'm not 100% certain but I",
    "start": "944319",
    "end": "947160"
  },
  {
    "text": "seem to recall that you can I would",
    "start": "947160",
    "end": "948959"
  },
  {
    "text": "probably need to read the spec though to",
    "start": "948959",
    "end": "950839"
  },
  {
    "text": "tell you for certain just kind of",
    "start": "950839",
    "end": "954560"
  },
  {
    "text": "like yeah I I seem to recall sing it",
    "start": "955440",
    "end": "958680"
  },
  {
    "text": "before but I don't want to tell you you",
    "start": "958680",
    "end": "960880"
  },
  {
    "text": "know yes that's absolutely it and it",
    "start": "960880",
    "end": "962399"
  },
  {
    "text": "turns to be",
    "start": "962399",
    "end": "964240"
  },
  {
    "text": "wrong",
    "start": "964240",
    "end": "965800"
  },
  {
    "text": "yeah yeah I",
    "start": "965800",
    "end": "968519"
  },
  {
    "text": "wondering so the question is is has",
    "start": "968519",
    "end": "971040"
  },
  {
    "text": "there been a proposal to ecmascript uh",
    "start": "971040",
    "end": "973040"
  },
  {
    "text": "or to tc39 that will basically combin",
    "start": "973040",
    "end": "975279"
  },
  {
    "text": "for in and for of such that you get back",
    "start": "975279",
    "end": "978600"
  },
  {
    "text": "both the key and the value uh there",
    "start": "978600",
    "end": "981360"
  },
  {
    "text": "isn't currently um it's possible it was",
    "start": "981360",
    "end": "984000"
  },
  {
    "text": "discussed and then dropped but nothing",
    "start": "984000",
    "end": "986880"
  },
  {
    "text": "at the moment and you I think on that",
    "start": "986880",
    "end": "989920"
  },
  {
    "text": "it's probably going to be a pretty rare",
    "start": "989920",
    "end": "992040"
  },
  {
    "text": "occurrence um especially you know if you",
    "start": "992040",
    "end": "994000"
  },
  {
    "text": "need that index it once you have the",
    "start": "994000",
    "end": "995759"
  },
  {
    "text": "index it is really easy to get the",
    "start": "995759",
    "end": "997639"
  },
  {
    "text": "property so uh yeah you might be able to",
    "start": "997639",
    "end": "1001440"
  },
  {
    "text": "save a little bit but it's probably not",
    "start": "1001440",
    "end": "1003360"
  },
  {
    "text": "going to help you that",
    "start": "1003360",
    "end": "1006040"
  },
  {
    "text": "much's",
    "start": "1007199",
    "end": "1010199"
  },
  {
    "text": "differ uh okay so the question is what",
    "start": "1010279",
    "end": "1012839"
  },
  {
    "text": "is the difference between four each and",
    "start": "1012839",
    "end": "1014560"
  },
  {
    "text": "four of uh they're actually basically",
    "start": "1014560",
    "end": "1016880"
  },
  {
    "text": "the same thing so if you're not familiar",
    "start": "1016880",
    "end": "1018319"
  },
  {
    "text": "four each is a method on the function",
    "start": "1018319",
    "end": "1021160"
  },
  {
    "text": "prototype so every or sorry not function",
    "start": "1021160",
    "end": "1023519"
  },
  {
    "text": "on every array prototype so every array",
    "start": "1023519",
    "end": "1026319"
  },
  {
    "text": "has a a function you call a call Four",
    "start": "1026319",
    "end": "1027839"
  },
  {
    "text": "each and you give it a call back and",
    "start": "1027839",
    "end": "1029120"
  },
  {
    "text": "it'll call it back for each element it's",
    "start": "1029120",
    "end": "1031839"
  },
  {
    "text": "sort of it's basically the same thing",
    "start": "1031839",
    "end": "1033160"
  },
  {
    "text": "but the difference is that with four",
    "start": "1033160",
    "end": "1034480"
  },
  {
    "text": "each you have an extra function call now",
    "start": "1034480",
    "end": "1036640"
  },
  {
    "text": "sometimes you actually want this because",
    "start": "1036640",
    "end": "1038160"
  },
  {
    "text": "you know you want each call back to or",
    "start": "1038160",
    "end": "1040360"
  },
  {
    "text": "each iteration to be sort of in its own",
    "start": "1040360",
    "end": "1043079"
  },
  {
    "text": "context uh so this is useful for example",
    "start": "1043079",
    "end": "1045480"
  },
  {
    "text": "if you do an ACN call inside of it you",
    "start": "1045480",
    "end": "1046798"
  },
  {
    "text": "know you need to make capture the state",
    "start": "1046799",
    "end": "1048079"
  },
  {
    "text": "if you do in a loop you know it's going",
    "start": "1048079",
    "end": "1049240"
  },
  {
    "text": "to loop on pass and your index is all",
    "start": "1049240",
    "end": "1050640"
  },
  {
    "text": "screwed up uh but aside from and",
    "start": "1050640",
    "end": "1053600"
  },
  {
    "text": "obviously with the four of you don't",
    "start": "1053600",
    "end": "1054679"
  },
  {
    "text": "have that but uh other than that they're",
    "start": "1054679",
    "end": "1057160"
  },
  {
    "text": "basically the same thing now another",
    "start": "1057160",
    "end": "1058400"
  },
  {
    "text": "difference though is that four of U will",
    "start": "1058400",
    "end": "1060960"
  },
  {
    "text": "most likely be much much faster you know",
    "start": "1060960",
    "end": "1063120"
  },
  {
    "text": "once we get implementations out there",
    "start": "1063120",
    "end": "1065039"
  },
  {
    "text": "one of the problems with a for each is",
    "start": "1065039",
    "end": "1068240"
  },
  {
    "text": "that you had to actually make a function",
    "start": "1068240",
    "end": "1069840"
  },
  {
    "text": "call for each element and function calls",
    "start": "1069840",
    "end": "1072600"
  },
  {
    "text": "are you know kind of expensive in",
    "start": "1072600",
    "end": "1074120"
  },
  {
    "text": "JavaScript you have to create a new",
    "start": "1074120",
    "end": "1075320"
  },
  {
    "text": "context potentially new closures and you",
    "start": "1075320",
    "end": "1077200"
  },
  {
    "text": "know all sorts of things like that",
    "start": "1077200",
    "end": "1079640"
  },
  {
    "text": "all right well that's uh actually time",
    "start": "1079640",
    "end": "1081240"
  },
  {
    "text": "for our next stop so that's perfect",
    "start": "1081240",
    "end": "1083000"
  },
  {
    "text": "thank you",
    "start": "1083000",
    "end": "1086159"
  }
]