[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hi everyone so this talk is really gonna be in two parts and the first part is",
    "start": "3930",
    "end": "10080"
  },
  {
    "text": "gonna be you know a little bit more higher-level looking at modern applications what they are and what the",
    "start": "10080",
    "end": "16080"
  },
  {
    "text": "best ways are to build them today I'm gonna talk a lot about server lists because most of the applications I build",
    "start": "16080",
    "end": "21150"
  },
  {
    "text": "these days are using servers in some shape or form then I'm gonna look at some of the more technical details so",
    "start": "21150",
    "end": "27690"
  },
  {
    "text": "what does it mean to build servers applications with JavaScript and then you know what are the challenges there's",
    "start": "27690",
    "end": "33719"
  },
  {
    "text": "always challenges with new technologies and adopting new patterns so what are they how can we overcome them and I'm",
    "start": "33719",
    "end": "40440"
  },
  {
    "text": "gonna try and show them some varying kind of recipes for doing stuff effectively with service so what is a",
    "start": "40440",
    "end": "47579"
  },
  {
    "start": "47000",
    "end": "47000"
  },
  {
    "text": "modern application what does it look like well these days modern applications tend to have to be scalable you don't",
    "start": "47579",
    "end": "53160"
  },
  {
    "text": "have to have a billion users but you might scale in some dimensions so it might be you know a stream of data",
    "start": "53160",
    "end": "58710"
  },
  {
    "text": "coming from IOT devices or it might be that's you've just kind of got large variances in scale so these days were",
    "start": "58710",
    "end": "64559"
  },
  {
    "text": "expected to be able to handle sudden bursts in user consumption and we're also a lot more user focused users a lot",
    "start": "64559",
    "end": "71250"
  },
  {
    "text": "more savvy we keep them in the loop a lot more we don't try and write all the requirements upfront and predict them",
    "start": "71250",
    "end": "77010"
  },
  {
    "text": "instead we work a lot more with users we try and create hypotheses about users behavior and then we try and build stuff",
    "start": "77010",
    "end": "84060"
  },
  {
    "text": "as quickly as possible so that we can test that hypothesis and either proceed with it or digit and then our systems",
    "start": "84060",
    "end": "90299"
  },
  {
    "text": "also have to be very reliable and secure in today's environments we also need to",
    "start": "90299",
    "end": "96170"
  },
  {
    "text": "incorporating intelligence into our applications so either you know whether that's machine learning or data science",
    "start": "96170",
    "end": "102150"
  },
  {
    "text": "or complex analytics but really I suppose the key things about modern application is not necessarily the",
    "start": "102150",
    "end": "108479"
  },
  {
    "text": "features or the technical constraints around them it's more really about getting faster marketing because",
    "start": "108479",
    "end": "113790"
  },
  {
    "text": "everybody's got the tools to deploy software very quickly really your competitors do so time to market and",
    "start": "113790",
    "end": "119040"
  },
  {
    "text": "speed of iteration is very important and the ability to experiment is really critical actually and software companies",
    "start": "119040",
    "end": "125880"
  },
  {
    "text": "that succeed the most today are the best at doing a low-cost experimentation and putting experiments out into production",
    "start": "125880",
    "end": "132599"
  },
  {
    "text": "and measuring them effectively so given all of that I assume that everybody's come to cuke",
    "start": "132599",
    "end": "137700"
  },
  {
    "text": "you know to up their game to find out you know what is it what is the latest and greatest in building a modern application so let's look at like what",
    "start": "137700",
    "end": "144810"
  },
  {
    "text": "are the tools what are the methods you could use to build the ideal modern application so you could you might laugh",
    "start": "144810",
    "end": "153780"
  },
  {
    "text": "right but 60% 60% of websites on the internet apparently build with WordPress",
    "start": "153780",
    "end": "160849"
  },
  {
    "text": "it's you know it's proven it's open source it's been stable for a long time",
    "start": "160849",
    "end": "165870"
  },
  {
    "text": "you know it's not very trendy it's not great for the CV to build it WordPress maybe so that might be a bit of a",
    "start": "165870",
    "end": "170910"
  },
  {
    "text": "downside so you might go a little bit more extreme and pick something like Haskell you know Haskell is purest of",
    "start": "170910",
    "end": "176459"
  },
  {
    "text": "pure languages right if you want to get something into production that you know works that's got proven you know it's",
    "start": "176459",
    "end": "182370"
  },
  {
    "text": "mathematically proven that you got no bugs in it then you can go with an approach like that but for some reason",
    "start": "182370",
    "end": "188160"
  },
  {
    "text": "despite the guarantees around correctness that you get with the Haskell it hasn't been adopted by the masses",
    "start": "188160",
    "end": "195440"
  },
  {
    "text": "because it's seen as a little bit scary right and and difficult to take on so",
    "start": "195440",
    "end": "200880"
  },
  {
    "text": "you might go for something a little bit more pragmatic something like rails or Django rails and Django are popular",
    "start": "200880",
    "end": "210000"
  },
  {
    "text": "because they and are you know they're pragmatic they enable good developer productivity and they allow you to get",
    "start": "210000",
    "end": "215790"
  },
  {
    "text": "stuff into production very very fast and you know for while it was all the rage and people were doing great productive",
    "start": "215790",
    "end": "221609"
  },
  {
    "text": "things with rails and it was really a perception around performance and scalability that stopped rails becoming",
    "start": "221609",
    "end": "228470"
  },
  {
    "text": "you know adopted by the masses in the extreme so then we moved into you know",
    "start": "228470",
    "end": "234359"
  },
  {
    "text": "looking at scalable distributed micro services and if you wanted to go along that route you might do something like",
    "start": "234359",
    "end": "240000"
  },
  {
    "text": "build your system with airline I mean we talked about micro services all the time and we're kind of figuring on our way",
    "start": "240000",
    "end": "245880"
  },
  {
    "text": "through micro services as if it's the first time this has ever been done but Erlang was doing fault-tolerant",
    "start": "245880",
    "end": "251790"
  },
  {
    "text": "distributed scaleable micro services in the 1980s",
    "start": "251790",
    "end": "257549"
  },
  {
    "text": "whatsapp built their system on Erlang and they were able to scale to two million concurrent connections on one",
    "start": "257549",
    "end": "263250"
  },
  {
    "text": "single server so it's interesting to understand I can look at this and say",
    "start": "263250",
    "end": "268470"
  },
  {
    "text": "why haven't we adopted technology like this and I think it's largely down to the fact that you know",
    "start": "268470",
    "end": "274180"
  },
  {
    "text": "it's it's too much of a reach into the past people like to take stepping stones",
    "start": "274180",
    "end": "279400"
  },
  {
    "text": "from the technology they're working with today so instead people move from you know doing monolithic java applications or go",
    "start": "279400",
    "end": "288580"
  },
  {
    "text": "or c-sharp net applications into doing you know Erlang like patterns with",
    "start": "288580",
    "end": "293950"
  },
  {
    "text": "microservices and that's what brings us to I suppose the predominant patterns",
    "start": "293950",
    "end": "298990"
  },
  {
    "text": "today which is using you know container orchestration systems and doing micro",
    "start": "298990",
    "end": "304240"
  },
  {
    "text": "services that scale with kubernetes of",
    "start": "304240",
    "end": "310570"
  },
  {
    "text": "course you know with kubernetes I suppose the emergent problems coming out",
    "start": "310570",
    "end": "316060"
  },
  {
    "text": "coming out of that space are that you know you've got a lot of infrastructure to maintain and you end up spending a lot of time thinking about that and not",
    "start": "316060",
    "end": "322030"
  },
  {
    "text": "necessarily the function that sits on the top so then there's the idea I'm",
    "start": "322030",
    "end": "333670"
  },
  {
    "text": "putting forward today which is to build all your systems using serverless and to code them in JavaScript let's just think",
    "start": "333670",
    "end": "339760"
  },
  {
    "text": "about that for a second right I mean the idea there is that you componentize your software into the tiniest smallest",
    "start": "339760",
    "end": "345730"
  },
  {
    "text": "pieces and you distribute them all over the network so you're introduced as much latency as possible and then you",
    "start": "345730",
    "end": "351730"
  },
  {
    "text": "relinquish close control to the cloud provider for the majority of your system",
    "start": "351730",
    "end": "357070"
  },
  {
    "text": "and not only that but you take a language that was invented in 1995 and developed in 10 days for Netscape and",
    "start": "357070",
    "end": "364210"
  },
  {
    "text": "you decide to use that language to implement it all in so why would you do",
    "start": "364210",
    "end": "369310"
  },
  {
    "text": "this why would you choose something that's so you know unclean right it",
    "start": "369310",
    "end": "375910"
  },
  {
    "text": "feels like so unfit for purpose why wouldn't you use a safer pure language and an equal ecosystem with more safety",
    "start": "375910",
    "end": "383410"
  },
  {
    "text": "guarantees I suppose because you know we've kind of learned over time that",
    "start": "383410",
    "end": "390150"
  },
  {
    "text": "perfect systems don't really work out very well I spent a lot of time trying",
    "start": "390150",
    "end": "396010"
  },
  {
    "text": "to architect you know elegant systems that people can use in a generic way and",
    "start": "396010",
    "end": "401470"
  },
  {
    "text": "which will provide guarantees productivity and speed to market and",
    "start": "401470",
    "end": "410560"
  },
  {
    "text": "architectural you know cater for architectural growth into the future as well but it doesn't really work like",
    "start": "411010",
    "end": "416960"
  },
  {
    "text": "that when you're trying to build perfect systems and then you look at the reality of how developers actually take them and",
    "start": "416960",
    "end": "424220"
  },
  {
    "start": "417000",
    "end": "417000"
  },
  {
    "text": "adopt and use them you know it never really works out well yet only you know",
    "start": "424220",
    "end": "430400"
  },
  {
    "text": "the theory behind these theoretical frameworks and underpinnings it never",
    "start": "430400",
    "end": "435770"
  },
  {
    "text": "really plays out in reality and there's always trade-offs and you just you know it's about kind of accepting those",
    "start": "435770",
    "end": "441350"
  },
  {
    "text": "trade-offs I mean when we're building software systems it's not just about having elegant architecture and elegant code it's about how productive are you",
    "start": "441350",
    "end": "449750"
  },
  {
    "text": "with it the availability of skills you know the community around us the tooling",
    "start": "449750",
    "end": "456650"
  },
  {
    "text": "available to it so perfect perfect software doesn't always build perfect systems right where we're trying to",
    "start": "456650",
    "end": "465890"
  },
  {
    "text": "build you know we're not trying to build beautiful looking code we're actually trying to build meaningful user",
    "start": "465890",
    "end": "471530"
  },
  {
    "text": "experiences so I wanted to give one",
    "start": "471530",
    "end": "478310"
  },
  {
    "text": "story about the pursuit of perfection which I think it's quite a famous one so",
    "start": "478310",
    "end": "484100"
  },
  {
    "text": "you might have heard of it but I think it's think it's an interesting story so in 1975 in Cologne and Germany there",
    "start": "484100",
    "end": "492290"
  },
  {
    "text": "was there was a young jazz fan called Vera Brandis and she was really into",
    "start": "492290",
    "end": "497900"
  },
  {
    "text": "jazz and she wanted to encourage the popularity of jazz in Germany so she decided to book some concerts and she",
    "start": "497900",
    "end": "505010"
  },
  {
    "text": "booked you know up-and-coming but already quite famous solo in privation",
    "start": "505010",
    "end": "510560"
  },
  {
    "text": "improvisational pianist called Keith Jarrett and she managed to South",
    "start": "510560",
    "end": "515960"
  },
  {
    "text": "seventeen hundred tickets for the Opera House for his concert now Keith Jarrett was a total perfectionist maybe this was",
    "start": "515960",
    "end": "523039"
  },
  {
    "text": "a guy who used to give cough drops out to his audience that they wouldn't cough and interrupt and he requested a very",
    "start": "523040",
    "end": "529610"
  },
  {
    "text": "specific model of grand piano for his performance but he arrived on the day of",
    "start": "529610",
    "end": "535430"
  },
  {
    "text": "the performance completely exhausted from his European tour and turned up at the Opera House with his manager and they checked out",
    "start": "535430",
    "end": "543350"
  },
  {
    "text": "the piano and it was a total disaster a the the piano wasn't even a grand piano it was a baby grand so it wasn't",
    "start": "543350",
    "end": "549170"
  },
  {
    "text": "even going to carry the sound to the back of the Opera House and as well as",
    "start": "549170",
    "end": "554270"
  },
  {
    "text": "that it was like a rehearsal piano so it was in awful condition it was it was damaged it was out of tune felt was",
    "start": "554270",
    "end": "561080"
  },
  {
    "text": "missing from some of the hammers so some of the high note sounded just awful and he said no way I'm not saying this",
    "start": "561080",
    "end": "566420"
  },
  {
    "text": "and he walked out of the theater so the seventeen-year-old budding jazz",
    "start": "566420",
    "end": "572600"
  },
  {
    "text": "promoter was left there with 1,700 tickets sold she didn't want to do so",
    "start": "572600",
    "end": "577760"
  },
  {
    "text": "she chased him she ran after him out onto the street and begged and pleaded with him to give his concert and you",
    "start": "577760",
    "end": "585350"
  },
  {
    "text": "know eventually he took pity on her and relented he went back inside they managed to tune the piano but you know",
    "start": "585350",
    "end": "591620"
  },
  {
    "text": "they couldn't get another one so he had to proceed with the tools he was killed he was given and he had a sound at",
    "start": "591620",
    "end": "598550"
  },
  {
    "text": "recording team with him they were recording all of his concerts and they were saying there's no point in recording this right but they said let's",
    "start": "598550",
    "end": "604730"
  },
  {
    "text": "do it anyway it would be evidence of what disaster looks like if nothing else so he went ahead and he gave his concert",
    "start": "604730",
    "end": "611360"
  },
  {
    "text": "and because he had to work around the tools he was given and with the tools he",
    "start": "611360",
    "end": "616580"
  },
  {
    "text": "was given he was pushed way outside of his comfort zone and what that meant was",
    "start": "616580",
    "end": "623000"
  },
  {
    "text": "that he had to resort to all sorts of things to try and work with the instrument like he was standing up hammering on the keys to try and make",
    "start": "623000",
    "end": "629120"
  },
  {
    "text": "sure the sent that sound would carry he had to avoid the upper register and you know do things he wouldn't normally do",
    "start": "629120",
    "end": "634450"
  },
  {
    "text": "and something happened in the creative process and that the recording of that",
    "start": "634450",
    "end": "640550"
  },
  {
    "text": "album not only was it released it actually went on to become the number one selling jazz solo performance in",
    "start": "640550",
    "end": "647660"
  },
  {
    "text": "history and it also became the number one selling piano solo album in history",
    "start": "647660",
    "end": "652970"
  },
  {
    "text": "and you know I think it's an interesting parallel it might seem very far from the",
    "start": "652970",
    "end": "658040"
  },
  {
    "text": "topic right but ultimately software engineering is quite a creative discipline more so probably than an",
    "start": "658040",
    "end": "664850"
  },
  {
    "text": "engineering one so we have to think about how the tools not only enable us to do our work",
    "start": "664850",
    "end": "670280"
  },
  {
    "text": "but how sometimes when they push us outside of our comfort zone they can actually stimulate us into new levels of",
    "start": "670280",
    "end": "676610"
  },
  {
    "text": "creativity that forced us to do new things and innovate in ways that working",
    "start": "676610",
    "end": "681950"
  },
  {
    "text": "with perfect underlying systems doesn't so going back to the topic a little bit",
    "start": "681950",
    "end": "689240"
  },
  {
    "text": "what that actually means is if you look at serverless as a concept it was developed by accident I mean nobody",
    "start": "689240",
    "end": "695510"
  },
  {
    "text": "decided let's go and make design all these components to make what we now call the service it emerged from the",
    "start": "695510",
    "end": "703280"
  },
  {
    "text": "failings the successes of the technologies that went before it",
    "start": "703280",
    "end": "708310"
  },
  {
    "text": "you know the emergence the development of cloud over time first as utility instances then we",
    "start": "708310",
    "end": "716480"
  },
  {
    "text": "started doing micro services Microsoft services got us comfortable with the",
    "start": "716480",
    "end": "722660"
  },
  {
    "text": "idea of very small components then we started adding things like",
    "start": "722660",
    "end": "727790"
  },
  {
    "text": "infrastructure is code in order to manage that and as we do that we ended",
    "start": "727790",
    "end": "733910"
  },
  {
    "text": "up with more and more infrastructure complexity you know container orchestration service",
    "start": "733910",
    "end": "739310"
  },
  {
    "text": "discovery circuit breakers all of this stuff that you have to do in order to run micro services at scale emerged then",
    "start": "739310",
    "end": "750770"
  },
  {
    "text": "functions as a service kind of came out as like an afterthought almost initially it was about providing small level an",
    "start": "750770",
    "end": "758690"
  },
  {
    "text": "ability to execute code without bringing up any containers or any instances but",
    "start": "758690",
    "end": "764960"
  },
  {
    "text": "it wasn't necessarily about let's certainly move all of our business logic into functions it was really there is a",
    "start": "764960",
    "end": "770930"
  },
  {
    "text": "cloud utility and AWS lambda was released you know almost as an",
    "start": "770930",
    "end": "776390"
  },
  {
    "text": "experiment to see how the users would adapt - and what happened was that everybody kind of rushed to us you know",
    "start": "776390",
    "end": "783530"
  },
  {
    "text": "people started using it for you know simple things around the edges like doing backups at cron jobs that sort of",
    "start": "783530",
    "end": "789470"
  },
  {
    "text": "thing but suddenly they realized that made them a lot more productive for doing a lot more than just that and at",
    "start": "789470",
    "end": "797030"
  },
  {
    "text": "the same time managed services I grew and grew and there are numbers",
    "start": "797030",
    "end": "802250"
  },
  {
    "text": "and in their case ability so that we could actually start ditching a lot of the code that we write",
    "start": "802250",
    "end": "808119"
  },
  {
    "text": "a lot of the custom code that we do to do all the undifferentiated stuff that everybody has to do when you're",
    "start": "808119",
    "end": "814660"
  },
  {
    "text": "deploying software in the cloud so the",
    "start": "814660",
    "end": "822579"
  },
  {
    "text": "features of a service system then are number one I would say managed services",
    "start": "822579",
    "end": "828579"
  },
  {
    "text": "I mean people look almost equate service and functions but that's not really how",
    "start": "828579",
    "end": "834249"
  },
  {
    "text": "I perceive a server list is about a wide",
    "start": "834249",
    "end": "839259"
  },
  {
    "text": "variety of managed services and you know on-demand managed compute in the form of a lambda function is just one of those",
    "start": "839259",
    "end": "845199"
  },
  {
    "text": "services it it's not necessarily the defining characteristic of a service system server other systems are then",
    "start": "845199",
    "end": "852579"
  },
  {
    "text": "also very much event-driven so rather than having one service called another explicitly and having synchronous chains",
    "start": "852579",
    "end": "859689"
  },
  {
    "text": "of calls and having that tight coupling between systems we try to develop components as very isolated components",
    "start": "859689",
    "end": "867040"
  },
  {
    "text": "and tie them together in an asynchronous manner we also ensure you pay only for",
    "start": "867040",
    "end": "875319"
  },
  {
    "text": "what you use okay this is a defining characteristic of service also you don't",
    "start": "875319",
    "end": "880569"
  },
  {
    "text": "have any idling infrastructure so if you're not using it there's nothing running and ultimately what that leads",
    "start": "880569",
    "end": "887529"
  },
  {
    "text": "to then is less code and that's a really serious goal in software development less code means fewer bugs less code",
    "start": "887529",
    "end": "895029"
  },
  {
    "text": "means less cost of maintenance less code means you know you don't tend to have that continuation bias you know when",
    "start": "895029",
    "end": "901989"
  },
  {
    "text": "you've when you've written a large body of code and you feel like you put so much effort in towards that you just",
    "start": "901989",
    "end": "907239"
  },
  {
    "text": "have to keep maintaining it keep adding to it when you've got less code small systems it means you're much more",
    "start": "907239",
    "end": "914429"
  },
  {
    "text": "comfortable with actually throwing it out and redoing it which is a fantastic thing so how does JavaScript fit into",
    "start": "914429",
    "end": "921939"
  },
  {
    "text": "the world of serverless then well in many ways javascript kind of has no",
    "start": "921939",
    "end": "927369"
  },
  {
    "text": "right to be the top language for service on the face of it it seems quite unsuitable but if we step back",
    "start": "927369",
    "end": "935360"
  },
  {
    "text": "and look at why javascript is so popular it is today on the back end let's look",
    "start": "935360",
    "end": "940430"
  },
  {
    "text": "at the success of node so nodejs was really good for developer product",
    "start": "940430",
    "end": "945470"
  },
  {
    "text": "productivity you know it was it was like a bit like Jarrett's piano you know with for all its flaws it took people out of",
    "start": "945470",
    "end": "952100"
  },
  {
    "text": "their comfort zone but also gave them a lot of creative freedom because it doesn't put a lot of barriers or friction or unnecessary ceremony in your",
    "start": "952100",
    "end": "959209"
  },
  {
    "text": "way note was initially really successful because of event-driven i/o and that was",
    "start": "959209",
    "end": "967220"
  },
  {
    "text": "its initial selling point it was about having luck it was about you know",
    "start": "967220",
    "end": "973040"
  },
  {
    "text": "solving the problems that we see that people saw with rails from before and you know the inability to scale to large",
    "start": "973040",
    "end": "978440"
  },
  {
    "text": "numbers of concurrent connections node allows you to scale to large volumes good current connections and had a very",
    "start": "978440",
    "end": "983930"
  },
  {
    "text": "elegant solution to do that using an event loop and asynchronous event-driven",
    "start": "983930",
    "end": "990200"
  },
  {
    "text": "i/o to manage it and then the fact that it was on a single thread means you don't have to worry about concurrency",
    "start": "990200",
    "end": "996500"
  },
  {
    "text": "issues which is another piece of friction that can tie people up in knots in other languages so again that helps",
    "start": "996500",
    "end": "1003370"
  },
  {
    "text": "developer productivity and then of course the module ecosystem as we discussed earlier today I just had the",
    "start": "1003370",
    "end": "1010540"
  },
  {
    "text": "whole platform to just blossom and developers love small components you",
    "start": "1010540",
    "end": "1015790"
  },
  {
    "text": "know I think we've kind of all got tired of using large frameworks I take that are very unwieldy to adopt and to manage",
    "start": "1015790",
    "end": "1023019"
  },
  {
    "text": "and configure and the ability to pick and choose small modules makes developers product productive and it",
    "start": "1023019",
    "end": "1028780"
  },
  {
    "text": "keeps it gives you that kind of control and creative freedom at the same time it's not easy to understand because each",
    "start": "1028780",
    "end": "1036370"
  },
  {
    "text": "component should have a single specific purpose you're easy to find create destroy replace so it may means the",
    "start": "1036370",
    "end": "1044260"
  },
  {
    "text": "ability again to do that low-cost experimentation and move very quickly so",
    "start": "1044260",
    "end": "1052360"
  },
  {
    "start": "1045000",
    "end": "1045000"
  },
  {
    "text": "why is it a good fit for a service then well in one way it's not necessarily",
    "start": "1052360",
    "end": "1058120"
  },
  {
    "text": "right I talked about the ability to defer node just scale to multiple",
    "start": "1058120",
    "end": "1063190"
  },
  {
    "text": "concurrent connections you know it's a bit I'm using really both in this er",
    "start": "1063190",
    "end": "1068490"
  },
  {
    "text": "context you have a an event coming in and OneNote process handles one event at",
    "start": "1068490",
    "end": "1073830"
  },
  {
    "text": "any given time so that seems completely unsuitable from that perspective you don't even need a HTTP server in an ode",
    "start": "1073830",
    "end": "1079710"
  },
  {
    "text": "context instead typically with a lambda function you just get an event in and",
    "start": "1079710",
    "end": "1085740"
  },
  {
    "text": "that event can be driven by a HTTP I on the front of it as well as lack of types",
    "start": "1085740",
    "end": "1093720"
  },
  {
    "text": "might also make it unsuitable right because if you want to test your lambda",
    "start": "1093720",
    "end": "1099120"
  },
  {
    "text": "function in a realistic cloud environment you have to deploy it if you have to deploy it before you run it for",
    "start": "1099120",
    "end": "1104490"
  },
  {
    "text": "you carefully you know you get it before you run it in order to get feedback on it then a lack of types might mean you",
    "start": "1104490",
    "end": "1111420"
  },
  {
    "text": "know did you actually develop a feedback loop on correctness of your code it's quite slow but at the same time note is",
    "start": "1111420",
    "end": "1118920"
  },
  {
    "text": "very fast to start you know it's one of the fastest runtimes available to start it's very fast run time so it's very",
    "start": "1118920",
    "end": "1126210"
  },
  {
    "text": "good very good performance and a low memory overhead as well you don't have a",
    "start": "1126210",
    "end": "1131460"
  },
  {
    "text": "compilation step and when you're developing these small components and iterating quickly taking a compilation",
    "start": "1131460",
    "end": "1137460"
  },
  {
    "text": "step out of it is actually a big advantage of course you might have a translation step which is another story",
    "start": "1137460",
    "end": "1142830"
  },
  {
    "text": "altogether but you can still get to take",
    "start": "1142830",
    "end": "1147870"
  },
  {
    "text": "advantage of that huge module ecosystem you know all of the knowledge that's out there all of the collective knowledge",
    "start": "1147870",
    "end": "1152970"
  },
  {
    "text": "that's used both on the front end and in backend no development is available to",
    "start": "1152970",
    "end": "1158640"
  },
  {
    "text": "you when you're deploying systems into the crowd cloud and specifically with NPM majority of those modules are very",
    "start": "1158640",
    "end": "1165090"
  },
  {
    "text": "very small which makes them very well-suited for deployment you know functions as a service environment and you've got the",
    "start": "1165090",
    "end": "1172679"
  },
  {
    "text": "familiarity in the ubiquity of the language so the skills are available it's you know developing in apart from",
    "start": "1172679",
    "end": "1180900"
  },
  {
    "text": "you know things that you now can dispense with such as your Express or you're a happy server you don't need to",
    "start": "1180900",
    "end": "1187500"
  },
  {
    "text": "bother with that but you know you've still got all of the the rest of the",
    "start": "1187500",
    "end": "1192660"
  },
  {
    "text": "ecosystem that you can still leverage and use an ax lambda' function I still have you productive the last one there",
    "start": "1192660",
    "end": "1198570"
  },
  {
    "text": "you know I think is the most underrated actual benefit of using nodejs in back-end development particularly in",
    "start": "1198570",
    "end": "1204630"
  },
  {
    "text": "micro services and in web applications and that's that the best language for",
    "start": "1204630",
    "end": "1209669"
  },
  {
    "text": "processing JSON is JavaScript I have there's no ceremony to it it maps perfectly to JavaScript objects so then",
    "start": "1209669",
    "end": "1216809"
  },
  {
    "text": "if you're doing the kind of things you do very frequently in functions as a service like mapping data from one",
    "start": "1216809",
    "end": "1223740"
  },
  {
    "text": "format to another or say you know doing some translation on JSON objects",
    "start": "1223740",
    "end": "1230480"
  },
  {
    "text": "javascript is the lowest ceremony overhead of anything to do that so we",
    "start": "1230480",
    "end": "1238890"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "know that JIT node is the leader in deployments in serverless functions this",
    "start": "1238890",
    "end": "1245850"
  },
  {
    "text": "study came out a couple of weeks ago from New Relic and it shows that over 52",
    "start": "1245850",
    "end": "1251610"
  },
  {
    "text": "percent of their monitored lambda functions were running a node and python",
    "start": "1251610",
    "end": "1257880"
  },
  {
    "text": "is probably no no coincidence of Python another dynamic language is is in second",
    "start": "1257880",
    "end": "1263730"
  },
  {
    "text": "place and this might change actually because of you know performance benefits and improvements in the other runtimes",
    "start": "1263730",
    "end": "1270289"
  },
  {
    "text": "but notice still you know the significant leader in this space so",
    "start": "1270289",
    "end": "1277620"
  },
  {
    "start": "1277000",
    "end": "1277000"
  },
  {
    "text": "given all of that then should you choose now JavaScript for your service deployments you know not necessarily I",
    "start": "1277620",
    "end": "1283770"
  },
  {
    "text": "would say the reason one of the main reasons I do it actually is because that's what I was using before it makes",
    "start": "1283770",
    "end": "1292470"
  },
  {
    "text": "me very productive but you know if you're not a JavaScript developer or if you hate JavaScript or the passion as I",
    "start": "1292470",
    "end": "1297960"
  },
  {
    "text": "know many people do then you know there's no point in forcing yourself why do you have to learn all of the other new things around serve with us there's",
    "start": "1297960",
    "end": "1304260"
  },
  {
    "text": "no point in forcing yourself into adopting JavaScript just because most other people do one of our custom okay",
    "start": "1304260",
    "end": "1316919"
  },
  {
    "text": "so now we're actually looking at what does node.js function look like in a service context so I've got a very",
    "start": "1316919",
    "end": "1322200"
  },
  {
    "text": "simple example here to start things off so I've built a simple API that will",
    "start": "1322200",
    "end": "1327900"
  },
  {
    "text": "find accommodation for you to stay in Ireland so I found an open public dataset which is the CSV file of all the",
    "start": "1327900",
    "end": "1333570"
  },
  {
    "text": "hotels and being in Ireland and we're gonna build an API to query that and serve results back and",
    "start": "1333570",
    "end": "1340710"
  },
  {
    "text": "we're going to filter that data set by county so this is the lambda function",
    "start": "1340710",
    "end": "1346440"
  },
  {
    "text": "itself function as a lookup function and like all lambda functions the first argument it takes is the event and like",
    "start": "1346440",
    "end": "1353070"
  },
  {
    "text": "I was saying with JavaScript you can use nice things like addy structuring to extract fields out of that so we're",
    "start": "1353070",
    "end": "1358980"
  },
  {
    "text": "taking the County out of the query string parameters we then pass that into the find accommodation library and",
    "start": "1358980",
    "end": "1364650"
  },
  {
    "text": "return the result which is a JSON array a JavaScript array and a 200 status code",
    "start": "1364650",
    "end": "1370860"
  },
  {
    "text": "so then the actual implementation itself you know there's an interesting kind of quirky one I picked for this example",
    "start": "1370860",
    "end": "1377309"
  },
  {
    "text": "it's not necessarily how you would do it in production but what we're doing is",
    "start": "1377309",
    "end": "1382590"
  },
  {
    "text": "we're we want to filter out from the CSV file real life you might use a database in this case I'm actually fetching the",
    "start": "1382590",
    "end": "1388770"
  },
  {
    "text": "object from s3 so the CSV file just sits in a location on an s3 bucket but I'm",
    "start": "1388770",
    "end": "1396120"
  },
  {
    "text": "using something called s3 select which is an ability to query CSV files or",
    "start": "1396120",
    "end": "1401580"
  },
  {
    "text": "park' files or JSON files in s3 and have that query performed within the bucket",
    "start": "1401580",
    "end": "1406950"
  },
  {
    "text": "itself so that you don't have to transfer the data set back so this CSV file is quite small it's like half a",
    "start": "1406950",
    "end": "1412590"
  },
  {
    "text": "megabyte or something but this is really useful if you've got big volumes of data and you're trying to pull data back for",
    "start": "1412590",
    "end": "1417929"
  },
  {
    "text": "processing so we initialize the AWS SDK",
    "start": "1417929",
    "end": "1423330"
  },
  {
    "text": "JavaScript SDK we create an s3 client and then we're invoking the Select object content with a sequel query so",
    "start": "1423330",
    "end": "1431700"
  },
  {
    "text": "that gives us back a stream and it gives us back in Oh Jo stream and we're",
    "start": "1431700",
    "end": "1437490"
  },
  {
    "text": "collecting the data in that stream parsing it and returning it as a JavaScript array so that's all of the",
    "start": "1437490",
    "end": "1444630"
  },
  {
    "text": "code and this is how we deploy it so this is the serverless framework we're using in this case it's the most popular",
    "start": "1444630",
    "end": "1451020"
  },
  {
    "text": "framework by far for deploying hazardous applications but there are many other alternatives so at the bottom we've",
    "start": "1451020",
    "end": "1459990"
  },
  {
    "text": "defined our function so it's a lookup function it can be found in the handler module and it's good the",
    "start": "1459990",
    "end": "1465030"
  },
  {
    "text": "it's called lockup itself and we're passing in some environment variables and then we're specifying what kind of",
    "start": "1465030",
    "end": "1470910"
  },
  {
    "text": "events trigger this function in this case it's an API gateway with a HTTP GET request at the top then we're defining",
    "start": "1470910",
    "end": "1479580"
  },
  {
    "text": "you know our general AWS cloud provider configuration so we're just saying this is going to be a regional endpoint it's",
    "start": "1479580",
    "end": "1485460"
  },
  {
    "text": "going to be served optimized generally for people within the EU region we've",
    "start": "1485460",
    "end": "1492450"
  },
  {
    "text": "turned on tracing for both the API and the lambda function talk a little bit more about that in a while",
    "start": "1492450",
    "end": "1497970"
  },
  {
    "text": "server list framework is going to create cloud formation log groups or our logs go in there we're setting a retention on",
    "start": "1497970",
    "end": "1503910"
  },
  {
    "text": "that to seven days because it costs money and you don't want to keep them forever necessarily and then the most",
    "start": "1503910",
    "end": "1509790"
  },
  {
    "text": "important part probably is that we're defining our principle of least privilege permissions which is this",
    "start": "1509790",
    "end": "1515910"
  },
  {
    "text": "function only needs to access one object in one bucket so that's all it has access to so we serve Willis deploy that",
    "start": "1515910",
    "end": "1524310"
  },
  {
    "text": "environment and then we get an API endpoint and we can make get requests against that and it returns our results",
    "start": "1524310",
    "end": "1532100"
  },
  {
    "text": "so some of the things you get with that deployment down I'm just showing a few examples of the kind of things that you",
    "start": "1532100",
    "end": "1537150"
  },
  {
    "text": "automatically get when you deploy a simple function like that on the top left we have the API logs in cloud watch",
    "start": "1537150",
    "end": "1544190"
  },
  {
    "text": "on the bottom you get the distribution of the response times in your API so you",
    "start": "1544190",
    "end": "1550680"
  },
  {
    "text": "can map how long your requests are taking and on the top right we've got the service map so this is coming from",
    "start": "1550680",
    "end": "1557190"
  },
  {
    "text": "x-ray and I'll show more about that in a little while but it's basically building a map of our",
    "start": "1557190",
    "end": "1562320"
  },
  {
    "text": "components and showing the traffic and the data as it flows through the system",
    "start": "1562320",
    "end": "1567600"
  },
  {
    "text": "along with response times and stuff so that's quite a simple example but as with all simple examples they're very",
    "start": "1567600",
    "end": "1573360"
  },
  {
    "text": "misleading and when you go to deploy server let's at scale in production there's a whole other set of problems",
    "start": "1573360",
    "end": "1578750"
  },
  {
    "start": "1578000",
    "end": "1578000"
  },
  {
    "text": "you know it's a very different way of thinking than building software using",
    "start": "1578750",
    "end": "1584010"
  },
  {
    "text": "other paradigms definitely definitely different to model it's also different to just building micro services so",
    "start": "1584010",
    "end": "1590550"
  },
  {
    "text": "there's a learning curve there it's still quite early days so best practices of you have to be established and it's",
    "start": "1590550",
    "end": "1596430"
  },
  {
    "text": "moving targets it's evolving faster all the time and that can be a benefit right as well as a",
    "start": "1596430",
    "end": "1601979"
  },
  {
    "text": "as a challenge and with that comes an organizational change because expertise",
    "start": "1601979",
    "end": "1608999"
  },
  {
    "text": "in a particular cloud provider you're using is really essential in your team as that means potentially changing the",
    "start": "1608999",
    "end": "1617489"
  },
  {
    "text": "structure of your teams and you know ensuring you've got that good DevOps back the best practices and you've got",
    "start": "1617489",
    "end": "1622649"
  },
  {
    "text": "you know there's there's hundreds of cloud resources as complexity in configuring each one of them that knowledge has to be there somewhere you",
    "start": "1622649",
    "end": "1633229"
  },
  {
    "start": "1632000",
    "end": "1632000"
  },
  {
    "text": "know as with adopting any new technology you've got this kind of roller coaster effect where you start off and",
    "start": "1633229",
    "end": "1639389"
  },
  {
    "text": "everything seems wonderful you need to deploy your first system and you know you've lighted with yourself and you",
    "start": "1639389",
    "end": "1645899"
  },
  {
    "text": "think you're invincible and then you deploy production and all the real world effects start happening and then you've",
    "start": "1645899",
    "end": "1651929"
  },
  {
    "text": "got this despair when you realize how difficult things are to actually optimize and you discover that every",
    "start": "1651929",
    "end": "1657599"
  },
  {
    "text": "single service you use actually has failure modes and you have to understand those failure modes and react to them",
    "start": "1657599",
    "end": "1662879"
  },
  {
    "text": "and you know that's that's a roller coaster and it's inevitable yeah but you know at our company for Theorem we've",
    "start": "1662879",
    "end": "1670019"
  },
  {
    "text": "been doing Cerberus systems for a while now and we've kind of written that roller coaster I'd say a few times and",
    "start": "1670019",
    "end": "1675709"
  },
  {
    "text": "managed to smooth out the bumps over time or one of the ways we did that was by taking all of the learnings we had",
    "start": "1675709",
    "end": "1682979"
  },
  {
    "text": "and putting it into a template project so saying that one of the great benefits",
    "start": "1682979",
    "end": "1688559"
  },
  {
    "text": "of server list is that you've got creative freedom with that means that you've got a lot of decisions to make in",
    "start": "1688559",
    "end": "1694709"
  },
  {
    "text": "terms of how you assemble your system how you put things together so it's actually you know quite daunting at the",
    "start": "1694709",
    "end": "1701070"
  },
  {
    "text": "start and something that can slow you down so we decided to take this kind of opinionated approach for you know kind",
    "start": "1701070",
    "end": "1707609"
  },
  {
    "text": "of 80% of those decisions to allow us to bootstrap these projects quicker we also",
    "start": "1707609",
    "end": "1713429"
  },
  {
    "text": "decided then to open-source this and make it available to everybody and try and make it replicate a production",
    "start": "1713429",
    "end": "1719519"
  },
  {
    "text": "environment as as close as close to a production environment as we could",
    "start": "1719519",
    "end": "1726109"
  },
  {
    "text": "so these are some of the things that the project aims to provide an answer for",
    "start": "1731250",
    "end": "1737530"
  },
  {
    "text": "these are all considerations you need to kind of make at one stage or another when you're building you know production",
    "start": "1737530",
    "end": "1743770"
  },
  {
    "text": "grade serverless application so there's quite a lot in there and the project",
    "start": "1743770",
    "end": "1748929"
  },
  {
    "text": "which is called slick starter has an answer for an element of each one of",
    "start": "1748929",
    "end": "1754600"
  },
  {
    "text": "these things so you can find it on github you can search for it just by",
    "start": "1754600",
    "end": "1759820"
  },
  {
    "text": "slick starter you can go to select app and it will take you straight to the github page the application itself you",
    "start": "1759820",
    "end": "1767380"
  },
  {
    "text": "know the demo it comes with the full demo application with the front end and a back end and you can deploy it and I'd",
    "start": "1767380",
    "end": "1773080"
  },
  {
    "text": "use it it's an application for managing checklists so you can create checklists you can sign up for an account break",
    "start": "1773080",
    "end": "1778750"
  },
  {
    "text": "lists create entries in those checklists and mark them off the intention is",
    "start": "1778750",
    "end": "1784780"
  },
  {
    "text": "basically to fight to provide you with an application that you can quickly disassemble start adding your own features to and really just pick and",
    "start": "1784780",
    "end": "1792580"
  },
  {
    "text": "choose the components that are kind of relevant to you you can also just take it and just use it as a learning resource you don't necessarily have to",
    "start": "1792580",
    "end": "1798970"
  },
  {
    "text": "base your project on it you know typical workflows that people will take the repo have cloners or",
    "start": "1798970",
    "end": "1805480"
  },
  {
    "text": "import the code into their own repo and start chopping bits out of them adding new features in and you can use all the",
    "start": "1805480",
    "end": "1811330"
  },
  {
    "text": "features that were there just as an as a an example if you like so this on the",
    "start": "1811330",
    "end": "1817360"
  },
  {
    "text": "front side side you can sign up plug-in create and manage these checklists go in",
    "start": "1817360",
    "end": "1823330"
  },
  {
    "text": "edit checklists check them off and there's some event-driven flows in there as well like when you create a list it",
    "start": "1823330",
    "end": "1829270"
  },
  {
    "text": "will send you an email congratulating you for creating a list",
    "start": "1829270",
    "end": "1834570"
  },
  {
    "text": "so just a couple of things about the project then so it's targets AWS only right now just because it's easier to",
    "start": "1834570",
    "end": "1841750"
  },
  {
    "start": "1837000",
    "end": "1837000"
  },
  {
    "text": "maintain is what we deal with most of the time and it's you know it's easier for our forest to be productive on the",
    "start": "1841750",
    "end": "1847840"
  },
  {
    "text": "project by just building on top of AWS so this is what the architecture diagram",
    "start": "1847840",
    "end": "1854590"
  },
  {
    "text": "for the whole project looks like there's about seven or eight services in the project and they're all kind of single",
    "start": "1854590",
    "end": "1860710"
  },
  {
    "text": "responsibility single purpose components so for example you've got a service",
    "start": "1860710",
    "end": "1867460"
  },
  {
    "text": "dedicated to sending that Welcome message and that reacts in an asynchronous way to an event now we're",
    "start": "1867460",
    "end": "1874000"
  },
  {
    "text": "building events in a service application does generally you know we try to leverage cloud managed event the",
    "start": "1874000",
    "end": "1880750"
  },
  {
    "text": "services for everything not just events but in terms of AWS that generally boils down to sqs or SNS Kinesis and event",
    "start": "1880750",
    "end": "1890919"
  },
  {
    "text": "bridge and the reasons you choose one over the other basically for point-to-point communication we'd use sqs so the email",
    "start": "1890919",
    "end": "1898570"
  },
  {
    "text": "service accepts messages from other services on a queue and it owns that",
    "start": "1898570",
    "end": "1904510"
  },
  {
    "text": "queue and once the service has dropped a message to be delivered onto that queue it's essentially guaranteed to be",
    "start": "1904510",
    "end": "1911350"
  },
  {
    "text": "delivered at some point in the future when you've got pub/sub messaging then",
    "start": "1911350",
    "end": "1916570"
  },
  {
    "text": "you would use we tend not to use SNS so much anymore but use the vent bridge",
    "start": "1916570",
    "end": "1922000"
  },
  {
    "text": "instead the difference was a vent bridge is that event bridge doesn't have to belong to any specific service it's",
    "start": "1922000",
    "end": "1928510"
  },
  {
    "text": "always there you can just create events and push them onto the event bus and you",
    "start": "1928510",
    "end": "1933520"
  },
  {
    "text": "don't have to do anything with them until you're ready to consume them and then other services will use essentially",
    "start": "1933520",
    "end": "1939100"
  },
  {
    "text": "pattern matching to pick up those events and react to them so it's very powerful and very flexible so in this case the",
    "start": "1939100",
    "end": "1947529"
  },
  {
    "text": "checklist service just emits life cycle events somebody's created lists somebody's deleted a list and before the",
    "start": "1947529",
    "end": "1954309"
  },
  {
    "text": "services want to react to those life cycle events they can just say I want to listen to all events relating to check",
    "start": "1954309",
    "end": "1960159"
  },
  {
    "text": "lists where the pattern event type starts with created for example so they",
    "start": "1960159",
    "end": "1968230"
  },
  {
    "text": "just essentially create that pattern matching rule and then the service response to that and it triggers a lambda function so the other option then",
    "start": "1968230",
    "end": "1975130"
  },
  {
    "text": "I refer to was Kinesis and if you're doing high-volume real-time events where",
    "start": "1975130",
    "end": "1980980"
  },
  {
    "text": "you want time ordered stream of events or high throughput rates that's where you use Kinesis and much much in a",
    "start": "1980980",
    "end": "1989049"
  },
  {
    "text": "similar way to where you would use Kafka but it's I suppose it's a lot and simpler and more bare-bones than a",
    "start": "1989049",
    "end": "1995350"
  },
  {
    "text": "dinner Kafka context typically what the",
    "start": "1995350",
    "end": "2003360"
  },
  {
    "start": "2001000",
    "end": "2001000"
  },
  {
    "text": "way we would deploy this is it using the best practices of separating each environment into separate accounts so",
    "start": "2003360",
    "end": "2008700"
  },
  {
    "text": "separate one for staging development accounts and then your tooling account but you can also deploy this into a",
    "start": "2008700",
    "end": "2014610"
  },
  {
    "text": "single account just to get going and see how it performs well the services",
    "start": "2014610",
    "end": "2021090"
  },
  {
    "text": "themselves are deployed using the services framework but then for some elements we use something called the cdk",
    "start": "2021090",
    "end": "2026340"
  },
  {
    "text": "which is really interesting so in AWS there's a couple of different ways to create the resources you're using one is",
    "start": "2026340",
    "end": "2032160"
  },
  {
    "start": "2028000",
    "end": "2028000"
  },
  {
    "text": "just you know clicking around through the console it's not a very scalable or reliable way to do it you can also use",
    "start": "2032160",
    "end": "2038730"
  },
  {
    "text": "the command line or the SDK to create things and then there's cloud formation",
    "start": "2038730",
    "end": "2043920"
  },
  {
    "text": "and realistically if you're doing an AWS only application cloud formation is",
    "start": "2043920",
    "end": "2049110"
  },
  {
    "text": "really in my opinion the way to do it you can use other things like terraform the advantage with cloud formation in my",
    "start": "2049110",
    "end": "2055530"
  },
  {
    "text": "opinion is you know it collects all of your resources that belong together into a single stack which is deployed and",
    "start": "2055530",
    "end": "2060960"
  },
  {
    "text": "rolled back as a unit so that's quite powerful when you're managing deployments but you do that in Jason or",
    "start": "2060960",
    "end": "2069210"
  },
  {
    "text": "llamó and this is just an example for an s3 bucket but as your deployment grows the amount of llaman you have to",
    "start": "2069210",
    "end": "2074879"
  },
  {
    "text": "maintain becomes very unwieldy and very difficult to maintain and it's also you",
    "start": "2074880",
    "end": "2080310"
  },
  {
    "text": "know very error-prone you know you've no validation in there so that's where the cdk comes in this is an example of some",
    "start": "2080310",
    "end": "2087179"
  },
  {
    "text": "typescript we use to create some of the resources for the CI CD pipeline so cdk",
    "start": "2087179",
    "end": "2095280"
  },
  {
    "text": "is written in typescript itself but they've got a tool that actually creates bindings for Java C sharp and Python and",
    "start": "2095280",
    "end": "2104430"
  },
  {
    "text": "the great benefit of it is that it gives you type safe programmatic imperative way to build your resources so if you've",
    "start": "2104430",
    "end": "2110940"
  },
  {
    "text": "got any kind of dynamic behavior within your resources you can do for loops how",
    "start": "2110940",
    "end": "2115980"
  },
  {
    "text": "you can do if statements and you can create resources conditionally so in this case we're actually creating our",
    "start": "2115980",
    "end": "2122580"
  },
  {
    "text": "deployment pipeline and we're saying let's create a pipeline for each model module which is a dynamic array of",
    "start": "2122580",
    "end": "2128670"
  },
  {
    "text": "modules because he can add modules to your system and create each one for both staging and production and then it's you",
    "start": "2128670",
    "end": "2135690"
  },
  {
    "text": "don't have to repeat that code if you were doing it in Yama you'd probably have to do you know copy paste or some",
    "start": "2135690",
    "end": "2140880"
  },
  {
    "text": "ugly hack to get that to be deployed it's a really nice thing then is that you don't have to switch between cloud",
    "start": "2140880",
    "end": "2147330"
  },
  {
    "text": "formation documentation and your editor everything is you know leverages the",
    "start": "2147330",
    "end": "2153810"
  },
  {
    "text": "autocomplete and the inline documentation of your editor so it's much more productive way to build",
    "start": "2153810",
    "end": "2158850"
  },
  {
    "text": "resources in my opinion even if you ultimately want to use Yama as the source of truth for your cloud resources",
    "start": "2158850",
    "end": "2165260"
  },
  {
    "text": "you could just like use the cdk to generate that in the first instance and maintain it thereafter yeah so",
    "start": "2165260",
    "end": "2176760"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "continuous deployment is essential in service right you you can't really get away with it in a lot of environments",
    "start": "2176760",
    "end": "2184080"
  },
  {
    "text": "you can't really get away with these days but particularly so in serverless when you're talking about having you",
    "start": "2184080",
    "end": "2189420"
  },
  {
    "text": "know lots and lots of small units of deployment so this is a graphical you",
    "start": "2189420",
    "end": "2195450"
  },
  {
    "text": "know architecture diagram for the CI CI D pipeline we generate using typescript and it creates the module pipeline for",
    "start": "2195450",
    "end": "2203070"
  },
  {
    "text": "each module in your service then creates an Orchestrator pipeline to manage all of them and we typically deploy that",
    "start": "2203070",
    "end": "2210090"
  },
  {
    "text": "from a mono repo just really for simplicity and to avoid the overhead of",
    "start": "2210090",
    "end": "2216090"
  },
  {
    "text": "managing multiple repositories which can introduce its own own troubles and the",
    "start": "2216090",
    "end": "2221400"
  },
  {
    "text": "way we do that is by having a change detection script at the start of the pipeline which figures out which modules",
    "start": "2221400",
    "end": "2226530"
  },
  {
    "text": "have changed and then is able to run the build modules each module in parallel and so one of the other things I wanted",
    "start": "2226530",
    "end": "2234960"
  },
  {
    "text": "to talk about and demonstrate in Cerberus context is observability so I",
    "start": "2234960",
    "end": "2240720"
  },
  {
    "text": "suppose to clarify the difference between monitor plain or monitoring and observability",
    "start": "2240720",
    "end": "2246240"
  },
  {
    "text": "I mean monitoring is about you know having insight into your system so that you can to tell when known problems",
    "start": "2246240",
    "end": "2251430"
  },
  {
    "text": "occur but observability is about having the outputs from your system",
    "start": "2251430",
    "end": "2256739"
  },
  {
    "text": "rich enough so that you can answer any arbitrary question about your system including asking questions when unknown",
    "start": "2256739",
    "end": "2263919"
  },
  {
    "text": "problems occur what that means is about collecting very rich structured data",
    "start": "2263919",
    "end": "2268959"
  },
  {
    "text": "throughout your system and having it correlated to events so very simple",
    "start": "2268959",
    "end": "2274929"
  },
  {
    "text": "first step in that is producing structured logs we use Pino for that I think javascript again is the best",
    "start": "2274929",
    "end": "2281049"
  },
  {
    "text": "kind of fit for creating structure Jason loves it's very simple and we also",
    "start": "2281049",
    "end": "2286650"
  },
  {
    "text": "integrate the MIDI serverless framework which is very simple middleware framework that allows you to",
    "start": "2286650",
    "end": "2292869"
  },
  {
    "text": "automatically add before and after handlers to your lambda functions so I can log your events it can log error is",
    "start": "2292869",
    "end": "2299709"
  },
  {
    "text": "automatically for you and do a lot of other cool stuff but it means great sent to the logger to make sure you can get",
    "start": "2299709",
    "end": "2304869"
  },
  {
    "text": "you know info level debugging and production but may be awesome some sampling on debug logs - then we collect",
    "start": "2304869",
    "end": "2312429"
  },
  {
    "start": "2312000",
    "end": "2312000"
  },
  {
    "text": "those in a centralized log repository you can use a third-party repository but",
    "start": "2312429",
    "end": "2317890"
  },
  {
    "text": "cloud watch lugs insights is automatically provided for you you pay for it by query which is the one thing",
    "start": "2317890",
    "end": "2324130"
  },
  {
    "text": "you have to understand about it you pay by the amount of logs you scan but it's a very very powerful way to extract data",
    "start": "2324130",
    "end": "2331359"
  },
  {
    "text": "from structured logs and do aggregations on them so then coming down to metrics",
    "start": "2331359",
    "end": "2337390"
  },
  {
    "text": "so one of the things right one of the trade-offs that's really important with server lists is that when you deploy and",
    "start": "2337390",
    "end": "2344140"
  },
  {
    "text": "use the service you have to understand how it works and what its failure modes are well what that means is that for",
    "start": "2344140",
    "end": "2350199"
  },
  {
    "text": "each service you should have a look at the metrics and what each one of those metrics means and if you're going to",
    "start": "2350199",
    "end": "2356169"
  },
  {
    "text": "deploy a critical application in production it's you have to really",
    "start": "2356169",
    "end": "2361209"
  },
  {
    "text": "understand what these are particularly in the important ones for example if you've got a lambda function that's",
    "start": "2361209",
    "end": "2366759"
  },
  {
    "text": "triggered by a Kinesis stream you looking at the iterator will iterator age will tell you how far behind the",
    "start": "2366759",
    "end": "2373239"
  },
  {
    "text": "latest event your lambda function has become so if you've got a if you need to have events processed within two seconds",
    "start": "2373239",
    "end": "2380199"
  },
  {
    "text": "and you find that the iterator age has become ten seconds and you've got a problem but you can understand kind of",
    "start": "2380199",
    "end": "2386739"
  },
  {
    "text": "go through all of these errors and kind of decide what level is come for us and when do we need to start",
    "start": "2386739",
    "end": "2392140"
  },
  {
    "text": "creating alarms and alerts and responding and how are we going to respond but beyond those service metrics",
    "start": "2392140",
    "end": "2398049"
  },
  {
    "start": "2397000",
    "end": "2397000"
  },
  {
    "text": "then you should also look at your business metrics and what business metrics you need to capture in the",
    "start": "2398049",
    "end": "2403959"
  },
  {
    "text": "system too so that could be you know the number of play button clicks on a video",
    "start": "2403959",
    "end": "2410410"
  },
  {
    "text": "service it could be the number of abandoned carts in an e-commerce application or the number of products",
    "start": "2410410",
    "end": "2416589"
  },
  {
    "text": "added to a cart and every business will have kind of a baseline expected level of behavior for those events so by",
    "start": "2416589",
    "end": "2423640"
  },
  {
    "text": "creating those business metrics you can actually correlate them with your service metrics and understand your systems behavior and apart from just",
    "start": "2423640",
    "end": "2430329"
  },
  {
    "text": "looking at the technical details of the services you can say well if the number",
    "start": "2430329",
    "end": "2435849"
  },
  {
    "text": "of products added to a courage is that is has is showing an anomaly if it's falling outside of the normal range then",
    "start": "2435849",
    "end": "2442719"
  },
  {
    "text": "we need to do something about it that's a good way to kind of separate your observability from just like the code",
    "start": "2442719",
    "end": "2448630"
  },
  {
    "text": "level metrics so this is one really neat way of adding metrics and this is fairly",
    "start": "2448630",
    "end": "2453880"
  },
  {
    "text": "new feature so rather you can just most of the metrics we collect use CloudWatch metrics so you can just put metrics into",
    "start": "2453880",
    "end": "2461319"
  },
  {
    "text": "tidewater metrics then it will allow you to build dashboards on them this is a",
    "start": "2461319",
    "end": "2466479"
  },
  {
    "text": "very low overhead way of doing it so we're using a node module that AWS released for creating metrics logs and",
    "start": "2466479",
    "end": "2473679"
  },
  {
    "text": "what that does is it creates a structured JSON payload with the metric in it and the cloud watch service will",
    "start": "2473679",
    "end": "2480670"
  },
  {
    "text": "then a synchronously parse that and create a metric for it and it doesn't affect the performance of your",
    "start": "2480670",
    "end": "2485920"
  },
  {
    "text": "application it also means it's nice you can actually see it then in your logs you know know exactly what's happening",
    "start": "2485920",
    "end": "2491999"
  },
  {
    "text": "so this is an example from the slick starter application where we're tracking the number of items and checklists and",
    "start": "2491999",
    "end": "2497109"
  },
  {
    "text": "the number of words in each entry and then you can build up statistics and check their what they're like like the",
    "start": "2497109",
    "end": "2503890"
  },
  {
    "text": "average number of words or the 95 95th percentile then doing queries in cloud",
    "start": "2503890",
    "end": "2511179"
  },
  {
    "text": "watch insights like I said it's very powerful one of the things you get in every lambda functions log is a report",
    "start": "2511179",
    "end": "2517509"
  },
  {
    "text": "at the end that tells you how much memory your function used how much memory you have visioned and how long it took to",
    "start": "2517509",
    "end": "2523240"
  },
  {
    "text": "execution so using the query mechanism",
    "start": "2523240",
    "end": "2528700"
  },
  {
    "text": "and cloud watch insights you can actually collect all of those report metrics from every lambda function",
    "start": "2528700",
    "end": "2534760"
  },
  {
    "text": "invocation over a period of time you can parse them and then build statistics on them so in this case this is a query",
    "start": "2534760",
    "end": "2541870"
  },
  {
    "text": "that we use to figure out how to optimize our lambda functions when you",
    "start": "2541870",
    "end": "2547930"
  },
  {
    "text": "create around a function you assign us a certain amount of memory from 128 Meg's all the way up to the maximum of three",
    "start": "2547930",
    "end": "2554320"
  },
  {
    "text": "thousand and eight and when you do that the more memory you allocate the CPU and",
    "start": "2554320",
    "end": "2562090"
  },
  {
    "text": "the I ops of the function are allocated proportionally so if you need more compute power you need to increase the",
    "start": "2562090",
    "end": "2568240"
  },
  {
    "text": "memory so in this case we're looking at with provision 976 Meg's but the maximum",
    "start": "2568240",
    "end": "2576250"
  },
  {
    "text": "that's used over this period of time is about 166 Meg's so we've over provisioned significantly",
    "start": "2576250",
    "end": "2581410"
  },
  {
    "text": "so we can look at this and say well 95% of functions executed within a hundred",
    "start": "2581410",
    "end": "2587110"
  },
  {
    "text": "seconds and 100 seconds 100 milliseconds is the billing unit in lambda so if we",
    "start": "2587110",
    "end": "2592990"
  },
  {
    "text": "make it slower then we might end up paying twice because you're it they round up and billing it billing units and but you could also say well actually",
    "start": "2592990",
    "end": "2600040"
  },
  {
    "text": "that function maybe it's more i/o bound maybe it's just doing HTTP requests and waiting so it doesn't need that extra",
    "start": "2600040",
    "end": "2606610"
  },
  {
    "text": "compute so we could reduce this down to a 256 Meg function it might execute in",
    "start": "2606610",
    "end": "2611710"
  },
  {
    "text": "the same amount of time and we pay much much less for then distributed tracing",
    "start": "2611710",
    "end": "2620020"
  },
  {
    "text": "so I showed a brief example of distributed tracing the idea here is because you've got all these loosely coupled components you need to be able",
    "start": "2620020",
    "end": "2626710"
  },
  {
    "text": "to kind of make sense of it in some way and distributed tracing allows you to kind of monitor the emergent",
    "start": "2626710",
    "end": "2631810"
  },
  {
    "start": "2631000",
    "end": "2631000"
  },
  {
    "text": "architecture of the system so this is how you turn it on in serverless framework and then the code example",
    "start": "2631810",
    "end": "2637720"
  },
  {
    "text": "shows how you use the X ray SDK to wrap the AWS SDK what emerges then is like a",
    "start": "2637720",
    "end": "2645130"
  },
  {
    "text": "service map where you can see all of the traffic and data flow through your system if you've used a system like Zipkin or open tracing it's the same",
    "start": "2645130",
    "end": "2652120"
  },
  {
    "text": "idea here but you can also annotate each trace so you can put in business",
    "start": "2652120",
    "end": "2657460"
  },
  {
    "text": "annotations on traces and then you know search for traces relating to a specific order or specific business event and you",
    "start": "2657460",
    "end": "2664810"
  },
  {
    "text": "can look at the performance characteristics of them you can look at whether and the errors have occurred and",
    "start": "2664810",
    "end": "2670290"
  },
  {
    "text": "you know it's really quite powerful with you can also correlate them against the logs that happened at the same time and",
    "start": "2670290",
    "end": "2675940"
  },
  {
    "text": "the metrics that were relevant at the same time so myself and Peter who is",
    "start": "2675940",
    "end": "2681430"
  },
  {
    "text": "sitting here we've written a book on building AI applications in sorry building service applications in AWS and",
    "start": "2681430",
    "end": "2688320"
  },
  {
    "text": "it uses a lot of AI managed services it's a it's a bet particularly about building and AI enabled applications but",
    "start": "2688320",
    "end": "2695530"
  },
  {
    "text": "it covers a lot of these service topics and there's a chapter in it all around building observability capability into",
    "start": "2695530",
    "end": "2702760"
  },
  {
    "text": "service applications in AWS so I think we have some free code so if anybody's interested in knowing more about that",
    "start": "2702760",
    "end": "2708310"
  },
  {
    "text": "I'd be happy to share with you just let me know afterwards or send me a tweet or an email and there'll be no problem so",
    "start": "2708310",
    "end": "2715990"
  },
  {
    "text": "just wrap up then service isn't about being a perfect system it's about being productive and agile right so and I",
    "start": "2715990",
    "end": "2723010"
  },
  {
    "text": "think when you when you understand that you don't have to look for perfection and get a get outside of your comfort",
    "start": "2723010",
    "end": "2728320"
  },
  {
    "text": "zone I mean there's definitely plenty a very capability to do that and serving us you know getting outside your comfort",
    "start": "2728320",
    "end": "2733330"
  },
  {
    "text": "zone it gives you a lot of freedom it puts also constraints in your way so you have to find creative ways around and",
    "start": "2733330",
    "end": "2739990"
  },
  {
    "text": "there are plenty of pitfalls but if you check out stick starter hopefully it'll help you on your way please do feel free",
    "start": "2739990",
    "end": "2746530"
  },
  {
    "text": "to contribute and send us critique and pull requests and open issues we'd love",
    "start": "2746530",
    "end": "2752830"
  },
  {
    "text": "to see them and so that's all I've got thank you very much you",
    "start": "2752830",
    "end": "2759690"
  }
]