[
  {
    "start": "0",
    "end": "13000"
  },
  {
    "text": "[Music]",
    "start": "1430",
    "end": "13599"
  },
  {
    "start": "13000",
    "end": "13000"
  },
  {
    "text": "I'm going to be talking about stream processing today and I've got a lot of stuff I'm going to try to cram into 30",
    "start": "13599",
    "end": "19680"
  },
  {
    "text": "minutes so uh just as kind of a disclaimer slash Shameless plug up front",
    "start": "19680",
    "end": "25279"
  },
  {
    "text": "here there is much better coverage of these topics in the last chapter of the",
    "start": "25279",
    "end": "30560"
  },
  {
    "start": "27000",
    "end": "27000"
  },
  {
    "text": "book that I'm writing with Runar functional programming and Scola and the book also does a much",
    "start": "30560",
    "end": "36520"
  },
  {
    "text": "better job than I can do here in 30 minutes just introducing all the things that I'm going to build on here and and",
    "start": "36520",
    "end": "42840"
  },
  {
    "text": "all the stuff that you need uh in order to get to this point so and I encourage",
    "start": "42840",
    "end": "48079"
  },
  {
    "text": "you to check it out and the book is actually half off today if you use this discount code which I will flash up uh",
    "start": "48079",
    "end": "54520"
  },
  {
    "text": "again at the end so with that said let's uh let's get rocking here so",
    "start": "54520",
    "end": "61480"
  },
  {
    "start": "60000",
    "end": "60000"
  },
  {
    "text": "we are going to start by looking at what is called a single input uh stream",
    "start": "61480",
    "end": "67720"
  },
  {
    "text": "processor and it's this this type process one and it defines so process",
    "start": "67720",
    "end": "73479"
  },
  {
    "text": "one IO it defines a transformation from a stream of I values to a stream of O",
    "start": "73479",
    "end": "79479"
  },
  {
    "text": "values where a stream is defined like more broadly it could be an in-memory Scala stream or it could be uh a stream",
    "start": "79479",
    "end": "87680"
  },
  {
    "text": "of rows coming from a database a stream of http P requests uh a stream of lines coming",
    "start": "87680",
    "end": "93320"
  },
  {
    "text": "from a file Etc so it takes the form of a state machine that can be in one of",
    "start": "93320",
    "end": "100079"
  },
  {
    "text": "three possible States so it can be in the halt state so this signals that the",
    "start": "100079",
    "end": "107479"
  },
  {
    "text": "the transformation is done emitting values to the output stream and reading values from the input stream and the",
    "start": "107479",
    "end": "113159"
  },
  {
    "text": "transformation is is finished it can be in the state of emitting values to the output stream in which case we have the",
    "start": "113159",
    "end": "119880"
  },
  {
    "text": "sequence of O values that should be emitted to the output and then tail",
    "start": "119880",
    "end": "125119"
  },
  {
    "text": "which defines the next state to transition to after those values have been emitted and finally there's an await",
    "start": "125119",
    "end": "132319"
  },
  {
    "text": "state which indicates that the transformation needs to read a value from the input stream and then when it",
    "start": "132319",
    "end": "138680"
  },
  {
    "text": "gets back an I it's going to use this receive function to transition to the next state and if the input stream is",
    "start": "138680",
    "end": "146200"
  },
  {
    "text": "exhausted there's no more elements left in the input stream then we transition to the back State okay",
    "start": "146200",
    "end": "153680"
  },
  {
    "text": "so pretty simple so here's let's look at a a typical definition uh line wrapping is a little",
    "start": "153680",
    "end": "160519"
  },
  {
    "start": "156000",
    "end": "156000"
  },
  {
    "text": "bit mangled but uh so this is a a process that's going to compute a running sum of all the values that it's",
    "start": "160519",
    "end": "166360"
  },
  {
    "text": "seen so far and you can see we're just in a loop we're going to await so read a",
    "start": "166360",
    "end": "171879"
  },
  {
    "text": "value a double from the input stream and then we're going to emit that value added to the current accumulated",
    "start": "171879",
    "end": "178120"
  },
  {
    "text": "total and then we're going to recurse or repeat our next state will just uh call",
    "start": "178120",
    "end": "184599"
  },
  {
    "text": "go again with the new accumulated total and if we were sort of app to",
    "start": "184599",
    "end": "190920"
  },
  {
    "text": "apply this to an inmemory uh scol stream we'd get um the running total of the",
    "start": "190920",
    "end": "196760"
  },
  {
    "text": "values that we've seen so far pretty simple so let's look at how we actually",
    "start": "196760",
    "end": "203480"
  },
  {
    "text": "write a driver or an interpreter for one of these uh",
    "start": "203480",
    "end": "208760"
  },
  {
    "text": "processors so it's a state machine and it's a state machine where it's can issue one of",
    "start": "208760",
    "end": "214080"
  },
  {
    "text": "three possible instructions halt await or emit so this is a simple function",
    "start": "214080",
    "end": "219680"
  },
  {
    "text": "that interprets those instructions in order to actually transform a stream an in-memory stream of I to another stream",
    "start": "219680",
    "end": "227439"
  },
  {
    "text": "of O and you can see this is pretty simple if the state machine says halt we return the empty stream if the state",
    "start": "227439",
    "end": "234360"
  },
  {
    "text": "machine says read from the input then we attempt to do so if that fails we transition to the fallback",
    "start": "234360",
    "end": "241120"
  },
  {
    "text": "State and if the state machine says emit values to the output stream then we do",
    "start": "241120",
    "end": "246400"
  },
  {
    "text": "so and then transition to the next state",
    "start": "246400",
    "end": "252319"
  },
  {
    "text": "okay so let's look at some operations that are defined for process so we can think of uh a process a little bit like",
    "start": "252319",
    "end": "260479"
  },
  {
    "text": "we think of a list in the sense that the process is going to eventually emit a sequence of O values and so a lot of the",
    "start": "260479",
    "end": "268440"
  },
  {
    "text": "operations that we're used to from working with lists are also defined for process for instance we can concatenate",
    "start": "268440",
    "end": "274919"
  },
  {
    "text": "two processes together run the first process when it halts run the second",
    "start": "274919",
    "end": "280440"
  },
  {
    "text": "process uh we can flat map over a process's output we can map over a processes output and there's lots of",
    "start": "280440",
    "end": "288400"
  },
  {
    "text": "other functions that we can Define repeat this is run a process until it halts then run it again until it halts",
    "start": "288400",
    "end": "295600"
  },
  {
    "text": "and so on until the end of time uh or until the input runs out of",
    "start": "295600",
    "end": "301320"
  },
  {
    "text": "elements uh we can Define filter take take while drop while uh pretty much any",
    "start": "301320",
    "end": "307960"
  },
  {
    "text": "list function that you could Define that operates in a single pass over its input you could Define that as a",
    "start": "307960",
    "end": "314639"
  },
  {
    "text": "process um okay so on the other hand a process behaves a little bit like a",
    "start": "314639",
    "end": "320720"
  },
  {
    "text": "function from I to o or there's there's analogous operations that are defined for process so we can lift any function",
    "start": "320720",
    "end": "328560"
  },
  {
    "text": "from I to O to be a process so you can see the way it's defined we await get",
    "start": "328560",
    "end": "335240"
  },
  {
    "text": "back the I then we emit the function applied to that I and then we repeat",
    "start": "335240",
    "end": "341120"
  },
  {
    "text": "this is making use of that repeat uh combinator that I showed before and we're just going to keep doing that",
    "start": "341120",
    "end": "346360"
  },
  {
    "text": "until the input stream runs out of elements uh so another operation that we",
    "start": "346360",
    "end": "351479"
  },
  {
    "text": "can Define is composition so just like we can compose functions we can compose processes so this is given a process I o",
    "start": "351479",
    "end": "359880"
  },
  {
    "text": "we're going to feed the output of one process in as the input of the second",
    "start": "359880",
    "end": "366120"
  },
  {
    "text": "process and the way that this operation is defined is that these two stages are",
    "start": "366120",
    "end": "371800"
  },
  {
    "text": "actually going to sort of fuse together so that as soon as values are emitted by uh the first stage of of the composition",
    "start": "371800",
    "end": "379880"
  },
  {
    "text": "they're going to be immediately that chunk will be immediately consumed by the second stage of of the uh",
    "start": "379880",
    "end": "386440"
  },
  {
    "text": "process so using this we can actually Define these uh pretty complex pipelines",
    "start": "386440",
    "end": "392120"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "of Transformations uh so here's a a line counting uh process that we're first",
    "start": "392120",
    "end": "398280"
  },
  {
    "text": "going to filter out any commented lines and any blank lines we're then going to",
    "start": "398280",
    "end": "403919"
  },
  {
    "text": "map any remaining lines to the number one we're going to sum it and then finally convert back to an INT at the",
    "start": "403919",
    "end": "409800"
  },
  {
    "text": "end and this is all going to sort of fuse together as if we had written this as one big monolithic Loop pretty much",
    "start": "409800",
    "end": "416759"
  },
  {
    "text": "as soon as values are emitted uh by the fil they're going to be consumed by the next stage and so forth and this is",
    "start": "416759",
    "end": "424280"
  },
  {
    "text": "actually I mean this is a nice little programming model we're getting to assemble these complex Loops from",
    "start": "424280",
    "end": "429400"
  },
  {
    "text": "simpler pieces and still get the same overall efficiency as if we had written things in a more monolithic way okay",
    "start": "429400",
    "end": "439039"
  },
  {
    "text": "so that's general idea of of a of a stream processor",
    "start": "439039",
    "end": "444960"
  },
  {
    "text": "now this little data type that we've built up so far it's it's a little bit Limited",
    "start": "444960",
    "end": "451120"
  },
  {
    "text": "so we can only Define these pure linear sequences of Transformations right so we",
    "start": "451120",
    "end": "458560"
  },
  {
    "text": "don't really have a way of talking to uh an external data source like a file uh",
    "start": "458560",
    "end": "464759"
  },
  {
    "text": "so that's not a file the the a stream of lines from a file is not represented in a first class way uh in this little API",
    "start": "464759",
    "end": "473159"
  },
  {
    "text": "yet and you know we're also yeah constrained to these linear sequences of",
    "start": "473159",
    "end": "478199"
  },
  {
    "text": "Transformations really what we'd like to be able to do is construct pretty much an arbitrary network of these processes",
    "start": "478199",
    "end": "485599"
  },
  {
    "text": "where we can Fork things off um broadcast the same signal to multiple",
    "start": "485599",
    "end": "490639"
  },
  {
    "text": "processes and have them all maybe process in parallel um I want to be able to of",
    "start": "490639",
    "end": "496000"
  },
  {
    "text": "course read from external sources like files and so forth I want to be able to",
    "start": "496000",
    "end": "501240"
  },
  {
    "text": "write to files I want to be able to do all these things and our current process type is a little too",
    "start": "501240",
    "end": "507440"
  },
  {
    "text": "limited so let's let's think about how we could generalize",
    "start": "507440",
    "end": "512640"
  },
  {
    "text": "it all right so just as motivation let's look at the await case of process so you",
    "start": "512640",
    "end": "519800"
  },
  {
    "start": "518000",
    "end": "518000"
  },
  {
    "text": "can see it has this receive function and receive is expecting an I so what this",
    "start": "519800",
    "end": "526480"
  },
  {
    "text": "await case is implicitly assuming is that there is some context a stream",
    "start": "526480",
    "end": "533160"
  },
  {
    "text": "which is going to be providing us with I values okay so we're kind of hardcoding",
    "start": "533160",
    "end": "539600"
  },
  {
    "text": "what the context is we're saying the context is always going to be a stream of eyes a single stream of",
    "start": "539600",
    "end": "547200"
  },
  {
    "text": "eyes so if we want to generalize this we need to abstract over the context so",
    "start": "547200",
    "end": "553399"
  },
  {
    "text": "here's how we can do that so I've changed the await Constructor so",
    "start": "553399",
    "end": "558760"
  },
  {
    "start": "554000",
    "end": "554000"
  },
  {
    "text": "now it's parameterized on this type Constructor F and you think you can think of f as the request type it",
    "start": "558760",
    "end": "566959"
  },
  {
    "text": "controls what are the types of requests that this stream processor can make and",
    "start": "566959",
    "end": "573399"
  },
  {
    "text": "for any request that it can make F OFA somebody else is going to be responsible",
    "start": "573399",
    "end": "578519"
  },
  {
    "text": "for evaluating that F OFA G giving me an A and then calling the receive function",
    "start": "578519",
    "end": "585440"
  },
  {
    "text": "to transition to the next state so these two A's of course have to agree uh and",
    "start": "585440",
    "end": "591240"
  },
  {
    "text": "then the other stuff here is the same we still have this fallback case I did add this on error case which so a process uh",
    "start": "591240",
    "end": "598519"
  },
  {
    "text": "could actually terminate one of two ways one is if the input is exhausted normally and the other is if the input",
    "start": "598519",
    "end": "605040"
  },
  {
    "text": "is is exhausted with an exception and um that's this is important for ensuring",
    "start": "605040",
    "end": "610640"
  },
  {
    "text": "resource safety making sure file handles gets closed and so forth uh although I'm not going to really talk about that too",
    "start": "610640",
    "end": "616560"
  },
  {
    "text": "much today so here's the full process type the await case is really the only one that's",
    "start": "616560",
    "end": "623000"
  },
  {
    "start": "619000",
    "end": "619000"
  },
  {
    "text": "changed the others are just propagating through that additional uh type",
    "start": "623000",
    "end": "628320"
  },
  {
    "text": "Constructor so first of all let's notice that a lot of the operations that we've already",
    "start": "628320",
    "end": "634279"
  },
  {
    "start": "631000",
    "end": "631000"
  },
  {
    "text": "defined for process are going to work exactly the same so we can still concatenate two processes these",
    "start": "634279",
    "end": "640399"
  },
  {
    "text": "generalized processes run the first when it halts run the second that still works the same uh same deal with flat map and",
    "start": "640399",
    "end": "648519"
  },
  {
    "text": "map repeat uh so so that's good now let's look at how",
    "start": "648519",
    "end": "656120"
  },
  {
    "start": "653000",
    "end": "653000"
  },
  {
    "text": "we can actually encode a process one as a process now the way that this is",
    "start": "656120",
    "end": "661839"
  },
  {
    "text": "encoded in Scola is uh somewhat interesting what we're basically doing",
    "start": "661839",
    "end": "666959"
  },
  {
    "text": "is we're going to construct an F that type Constructor F which only allows us",
    "start": "666959",
    "end": "672320"
  },
  {
    "text": "to make requests for values of type I and here's one way you can do that in",
    "start": "672320",
    "end": "678880"
  },
  {
    "text": "Scola we introduce this class is I and inside of the isi class there is a type",
    "start": "678880",
    "end": "687320"
  },
  {
    "text": "f but you can see the only Constructor that exists is the one that",
    "start": "687320",
    "end": "692519"
  },
  {
    "text": "instantiates f with I so if I have a process is i f then I'm",
    "start": "692519",
    "end": "701720"
  },
  {
    "text": "basically saying this is a process that can only request values of type",
    "start": "701720",
    "end": "707800"
  },
  {
    "text": "I so if we uh we look at sort of a call to a weit we're going to say a wait get",
    "start": "708079",
    "end": "716200"
  },
  {
    "text": "me an integer and then the integer that we get back has that that type integer",
    "start": "716200",
    "end": "722760"
  },
  {
    "text": "has to agree with the type of the input to this function uh so if this if you're",
    "start": "722760",
    "end": "729360"
  },
  {
    "text": "not following this exactly it's it's not not too too important but I guess the the takeaway here is that we're able to",
    "start": "729360",
    "end": "736639"
  },
  {
    "text": "construct an F that constrains the type of requests that we can make and in this",
    "start": "736639",
    "end": "742040"
  },
  {
    "text": "case we're just saying we can only request values of type",
    "start": "742040",
    "end": "747320"
  },
  {
    "text": "I okay so now that we have this uh representation of process one we can go ahead and Define our compos operation",
    "start": "747320",
    "end": "753519"
  },
  {
    "text": "that we defined before uh except this is now that type alas that I just introduced in the last",
    "start": "753519",
    "end": "758800"
  },
  {
    "text": "slide but other than that the definition is going to work uh exactly the same",
    "start": "758800",
    "end": "764360"
  },
  {
    "text": "way okay so now that we've sort of used that",
    "start": "764360",
    "end": "769440"
  },
  {
    "start": "766000",
    "end": "766000"
  },
  {
    "text": "trick well we could craft an environment which allows us to make requests from one of two possible input",
    "start": "769440",
    "end": "775800"
  },
  {
    "text": "streams so this is a uh this is a sort of a request type that allows us to",
    "start": "775800",
    "end": "783279"
  },
  {
    "text": "request a value from the left which is going to have type I or request of value from the right which is going to have",
    "start": "783279",
    "end": "788959"
  },
  {
    "text": "type I2 and we're going to call this a t because you know the shape of the letter T it's sort of combining together uh",
    "start": "788959",
    "end": "795800"
  },
  {
    "text": "sort of two two different things into one and we can just Define this as a nice little type alas so this is a",
    "start": "795800",
    "end": "802600"
  },
  {
    "text": "process which could make requests from one of two possible input",
    "start": "802600",
    "end": "807639"
  },
  {
    "text": "streams all right so let's use this uh to Define zip width so zip width is a t",
    "start": "808120",
    "end": "814839"
  },
  {
    "text": "and let's look at its definition we await l so this await L is just a little",
    "start": "814839",
    "end": "819959"
  },
  {
    "text": "convenience function that's going to call await passing in that L uh request",
    "start": "819959",
    "end": "825240"
  },
  {
    "text": "value so we're going to await from the left we get back an O await from the right get back an O2 and then we're",
    "start": "825240",
    "end": "832959"
  },
  {
    "text": "going to emit the function applied to those two values that we just received and then we're going to",
    "start": "832959",
    "end": "838040"
  },
  {
    "text": "repeat okay pretty simple uh and then we can also Define uh",
    "start": "838040",
    "end": "845360"
  },
  {
    "text": "a function on process T which is is going to take one process another",
    "start": "845360",
    "end": "851399"
  },
  {
    "text": "process and a t and then feed the output of those two processes to to the T that",
    "start": "851399",
    "end": "857440"
  },
  {
    "text": "you just defined so you can use that in conjunction with the zip width to zip",
    "start": "857440",
    "end": "863720"
  },
  {
    "text": "together processes uh merge them so there's notice there's nothing about t",
    "start": "863720",
    "end": "868880"
  },
  {
    "text": "that requires that we read one from the uh one source and then read from the other source we could re Read 50 values",
    "start": "868880",
    "end": "875800"
  },
  {
    "text": "from One Source then three values from the other we could inter leave the two sources in whatever way we want so we",
    "start": "875800",
    "end": "882000"
  },
  {
    "text": "have a lot of flexibility there okay so let's look at how we can represent",
    "start": "882000",
    "end": "889759"
  },
  {
    "text": "effectful sources like uh the lines of a file or a stream of HTTP requests or uh",
    "start": "889759",
    "end": "897079"
  },
  {
    "text": "you know a stream of rows coming from a database so it turns out that if we just",
    "start": "897079",
    "end": "904199"
  },
  {
    "text": "let the ftype of our process be some monad like let's just pick Io Io monad",
    "start": "904199",
    "end": "912399"
  },
  {
    "text": "then you can think of that as a source of values so I'm going to explain how this",
    "start": "912399",
    "end": "918399"
  },
  {
    "text": "works so let's look at the await case so here I've just substituted in f",
    "start": "918399",
    "end": "924560"
  },
  {
    "text": "um sorry I've substituted an IO for the for the request type but you could also Imagine maybe future a so let's think",
    "start": "924560",
    "end": "933279"
  },
  {
    "text": "about if we if we're writing a driver and we encounter in a weight case we're going to have an IO action or a future",
    "start": "933279",
    "end": "940920"
  },
  {
    "text": "and then we're going to have a essentially a call back to to transition to the next state once we've evaluated",
    "start": "940920",
    "end": "947880"
  },
  {
    "text": "that future so all we need to do is just evaluate this or run run the",
    "start": "947880",
    "end": "954560"
  },
  {
    "text": "computation and then when we have the a we go ahead and call the next State and of course this could be you",
    "start": "954560",
    "end": "962160"
  },
  {
    "text": "know using actual non-blocking IO Primitives behind the scenes using Futures and so we don't necessarily need",
    "start": "962160",
    "end": "968319"
  },
  {
    "text": "to be occupying a thread and so forth so it actually turns out that we",
    "start": "968319",
    "end": "974360"
  },
  {
    "text": "don't even need to be able to run the computation uh we don't need to be able to run the request type we just need to",
    "start": "974360",
    "end": "980079"
  },
  {
    "text": "be able to flat map into it so we just need to be a monad and um we need a",
    "start": "980079",
    "end": "986360"
  },
  {
    "text": "little bit more than a ad because it needs to be some context Tex where we can uh catch exceptions and throw them",
    "start": "986360",
    "end": "994000"
  },
  {
    "text": "uh but it's essentially a mount ad when you when the state machine says await we",
    "start": "994000",
    "end": "1000240"
  },
  {
    "text": "just flat map into the request and then we that now have the value the result",
    "start": "1000240",
    "end": "1006279"
  },
  {
    "text": "and then we transition to the next state and we can Define this function collect for instance which uh given a process fo",
    "start": "1006279",
    "end": "1013800"
  },
  {
    "text": "and a monad it's going to return an F of all the values that were emitted by that",
    "start": "1013800",
    "end": "1021880"
  },
  {
    "text": "process so this is kind of the end of the universe okay run your entire process and get back its list of",
    "start": "1021880",
    "end": "1029360"
  },
  {
    "text": "results okay so let's look at some examples of using this so we could create a process um which is backed by",
    "start": "1029360",
    "end": "1037360"
  },
  {
    "start": "1031000",
    "end": "1031000"
  },
  {
    "text": "the lines of a file it's a process IO string and then we can transform that as",
    "start": "1037360",
    "end": "1043678"
  },
  {
    "text": "if it were any other input stream we can compose it with other things filter it map it",
    "start": "1043679",
    "end": "1049559"
  },
  {
    "text": "uh we can then pull in another file as we go uh let's look at another example the",
    "start": "1049559",
    "end": "1054960"
  },
  {
    "text": "rows of a database given a prepared statement we can get a stream that is",
    "start": "1054960",
    "end": "1060840"
  },
  {
    "text": "the output of you know all the rows of that query running that query and then",
    "start": "1060840",
    "end": "1066080"
  },
  {
    "text": "more generally we can Define this um resource safe uh combinator here resource which is going",
    "start": "1066080",
    "end": "1072720"
  },
  {
    "text": "to build some stream from a resource which needs to be allocated and then",
    "start": "1072720",
    "end": "1078320"
  },
  {
    "text": "cleaned up up when the resource is done so for instance uh yeah this would could",
    "start": "1078320",
    "end": "1085640"
  },
  {
    "text": "be a file you need to open the file at the start so you need to acquire a file handle and then you need to make sure",
    "start": "1085640",
    "end": "1093080"
  },
  {
    "text": "you close the file when you're done either if an exception occurs or if you just are done",
    "start": "1093080",
    "end": "1100320"
  },
  {
    "text": "processing so so now we can read from effectful sources like files streams of",
    "start": "1101520",
    "end": "1107080"
  },
  {
    "start": "1103000",
    "end": "1103000"
  },
  {
    "text": "HTTP requests and so forth so what about writing to files or um you know writing",
    "start": "1107080",
    "end": "1114520"
  },
  {
    "text": "HTTP responses or writing to a database so it turns out this is kind of",
    "start": "1114520",
    "end": "1121559"
  },
  {
    "text": "a somewhat surprising thing but we can think of a sync as a source of",
    "start": "1121559",
    "end": "1130039"
  },
  {
    "text": "functions so a sync fo is a source of",
    "start": "1130520",
    "end": "1136200"
  },
  {
    "text": "functions except they're not pure functions they're effectful functions so it's a function that's",
    "start": "1136200",
    "end": "1143320"
  },
  {
    "text": "going to return F of unit so let's think about how this would work let's say we had file",
    "start": "1143320",
    "end": "1150280"
  },
  {
    "text": "in uh which is a process IO string let's say it's the lines of a file and then we",
    "start": "1150280",
    "end": "1156120"
  },
  {
    "text": "have a file out which is a process that is functions from string to IO",
    "start": "1156120",
    "end": "1163000"
  },
  {
    "text": "unit so if we were to just zip these two together using our existing",
    "start": "1163000",
    "end": "1169360"
  },
  {
    "text": "combinators we could we we get the line and we could get the",
    "start": "1169360",
    "end": "1174400"
  },
  {
    "text": "function and now we can apply the function to the line and we get back what a process Io Io unit right because",
    "start": "1174400",
    "end": "1183039"
  },
  {
    "text": "we get all the all the io units that are produced by that file writing",
    "start": "1183039",
    "end": "1188280"
  },
  {
    "text": "process so how do we actually run all those IO actions well it turns out there's this",
    "start": "1188280",
    "end": "1195000"
  },
  {
    "text": "function that you can Define eval which you can actually defined for any f typee it doesn't care and all",
    "start": "1195000",
    "end": "1201520"
  },
  {
    "text": "we're going to do so this is the relevant case here is right before we emit a value in the process we're going",
    "start": "1201520",
    "end": "1209240"
  },
  {
    "text": "to await to basically request that the driver evaluate that action and then",
    "start": "1209240",
    "end": "1216320"
  },
  {
    "text": "when we have the result of that action we're then going to emit that so let's now um use this so we can",
    "start": "1216320",
    "end": "1225799"
  },
  {
    "text": "even generalize it a little bit further our our syncs don't need to just return unit they can actually return a value uh",
    "start": "1225799",
    "end": "1233120"
  },
  {
    "text": "so we can Define um this type Channel which is an effectful transformation between I and O",
    "start": "1233120",
    "end": "1241400"
  },
  {
    "text": "and you can see it's just a source of functions from I to F of O uh so using",
    "start": "1241400",
    "end": "1247440"
  },
  {
    "text": "this and this function two we can Define uh this is like a",
    "start": "1247440",
    "end": "1253039"
  },
  {
    "text": "little example here read the lines from this file filter out any comments map",
    "start": "1253039",
    "end": "1258240"
  },
  {
    "text": "over the lines of the file converting Fahrenheit to Celsius and dump that to celsius. txt and this is all going to",
    "start": "1258240",
    "end": "1265840"
  },
  {
    "text": "happen incrementally uh possibly even using non-blocking IO Primitives and you know we're not going",
    "start": "1265840",
    "end": "1272440"
  },
  {
    "text": "to load the entire file into memory and we're also assured that the file is going to be closed in the event of",
    "start": "1272440",
    "end": "1279000"
  },
  {
    "text": "exceptions or if things terminate normally so this is pretty",
    "start": "1279000",
    "end": "1285039"
  },
  {
    "text": "awesome so we've so far constructed a little library that lets us describe",
    "start": "1285039",
    "end": "1292960"
  },
  {
    "text": "these very complicated process networks uh it's really an arbitrary graph because since we can send uh messages or",
    "start": "1292960",
    "end": "1301120"
  },
  {
    "text": "elements in either direction we can represent both source and sources and syncs uh and we have this uh branching",
    "start": "1301120",
    "end": "1309120"
  },
  {
    "text": "operation T that lets us sort of connect up to uh linear uh linear pipelines of of",
    "start": "1309120",
    "end": "1317360"
  },
  {
    "text": "Transformations uh we can now pretty much represent an arbitrary graph of of",
    "start": "1317360",
    "end": "1322679"
  },
  {
    "text": "things that are happening okay but there's just one problem with what we have so far so the problem is that we're",
    "start": "1322679",
    "end": "1329440"
  },
  {
    "text": "forced to be completely explicit about the order that the effects are happening",
    "start": "1329440",
    "end": "1335480"
  },
  {
    "text": "throughout the entire network so to see why this is kind of a",
    "start": "1335480",
    "end": "1340919"
  },
  {
    "text": "problem um let's look at let's go back to the zip width definition from",
    "start": "1340919",
    "end": "1346400"
  },
  {
    "start": "1341000",
    "end": "1341000"
  },
  {
    "text": "earlier so there's something kind of arbit about this definition so I'm awaiting from the left and getting back",
    "start": "1346400",
    "end": "1352360"
  },
  {
    "text": "an O and then I'm awaiting from the right and getting back an R so I'm explicitly picking an order I'm saying",
    "start": "1352360",
    "end": "1359880"
  },
  {
    "text": "read from the left and then read from the right now I may want to I may want to be",
    "start": "1359880",
    "end": "1366279"
  },
  {
    "text": "very That explicit because maybe there's some external effect associated with these requests and I want them to happen",
    "start": "1366279",
    "end": "1373880"
  },
  {
    "text": "in a particular order but I may just want to say hey request from either the",
    "start": "1373880",
    "end": "1379279"
  },
  {
    "text": "left or the right I don't really care whichever one comes back first I'll take that one and then I'm going to make a",
    "start": "1379279",
    "end": "1385919"
  },
  {
    "text": "request for the other one that I didn't get",
    "start": "1385919",
    "end": "1390799"
  },
  {
    "start": "1391000",
    "end": "1391000"
  },
  {
    "text": "okay so we can represent that sort of non-deterministic choice uh with a new",
    "start": "1391400",
    "end": "1398200"
  },
  {
    "text": "request type which is called why and so y now has three cases it we can request",
    "start": "1398200",
    "end": "1404360"
  },
  {
    "text": "an a we can request a b or we we can request either A or B I don't care in",
    "start": "1404360",
    "end": "1411200"
  },
  {
    "text": "which case we're going to be prepared to handle either an i or an I2 okay so we can still make the same",
    "start": "1411200",
    "end": "1418919"
  },
  {
    "text": "explicit requests but now we can also non-deterministically make a request for one side or the",
    "start": "1418919",
    "end": "1425000"
  },
  {
    "text": "other and again we'll Define a a type alas here uh that just wraps that up in",
    "start": "1425000",
    "end": "1431480"
  },
  {
    "text": "a in a type y okay so let's revisit our zipwith",
    "start": "1431480",
    "end": "1438039"
  },
  {
    "start": "1435000",
    "end": "1435000"
  },
  {
    "text": "example so now the definition looks a little bit different so we're going to await a",
    "start": "1438039",
    "end": "1444400"
  },
  {
    "text": "again that's a little helper function that's just going to call await with the ab uh as the",
    "start": "1444400",
    "end": "1450240"
  },
  {
    "text": "request so we're going to await ab and now we're prepared to accept either uh",
    "start": "1450240",
    "end": "1456360"
  },
  {
    "text": "an o or an O2 so if we get back an O2 then okay",
    "start": "1456360",
    "end": "1461880"
  },
  {
    "text": "let's get the uh the O by explicitly requesting from the left",
    "start": "1461880",
    "end": "1467360"
  },
  {
    "text": "side and if we get back an O then we explicitly request from the other",
    "start": "1467360",
    "end": "1473279"
  },
  {
    "text": "side so what this definition is allowing for is the",
    "start": "1473279",
    "end": "1478880"
  },
  {
    "text": "possibility that whatever is interpreting this uh",
    "start": "1478880",
    "end": "1483960"
  },
  {
    "text": "driver uh or whatever is interpreting this process is free to use",
    "start": "1483960",
    "end": "1489240"
  },
  {
    "text": "parallelism at this point so at this point when this request is made we are",
    "start": "1489240",
    "end": "1494760"
  },
  {
    "text": "allowed to potentially run the two requests in parallel and just race them and whichever one comes back first use",
    "start": "1494760",
    "end": "1503240"
  },
  {
    "text": "that so in order to actually interpret that uh request that things be done",
    "start": "1503240",
    "end": "1511720"
  },
  {
    "start": "1504000",
    "end": "1504000"
  },
  {
    "text": "non-deterministically we require a context that supports",
    "start": "1511720",
    "end": "1516840"
  },
  {
    "text": "non-determinism and not all contexts do but so here's an example of how we can",
    "start": "1516840",
    "end": "1521880"
  },
  {
    "text": "represent the ability to make a non- deterministic choice explicitly so f is a context supporting",
    "start": "1521880",
    "end": "1530240"
  },
  {
    "text": "non neter determinism if it has this operation F of a uh which can choose",
    "start": "1530240",
    "end": "1536919"
  },
  {
    "text": "between F of a and F of B and let's look at it for a specific type like say",
    "start": "1536919",
    "end": "1544399"
  },
  {
    "text": "future so this is saying okay I have these two Futures A and B run them both",
    "start": "1544399",
    "end": "1551440"
  },
  {
    "text": "in parallel race them whichever one comes back with a result",
    "start": "1551440",
    "end": "1556840"
  },
  {
    "text": "first let's say a in that case then I'm going to return the concrete a that I",
    "start": "1556840",
    "end": "1562799"
  },
  {
    "text": "got and I'm going to return a residual uh future for B Because B may",
    "start": "1562799",
    "end": "1569440"
  },
  {
    "text": "that may still be running and like ready to dump a b to you know",
    "start": "1569440",
    "end": "1574600"
  },
  {
    "text": "some uh variable in the implementation so either a could win or B could win in",
    "start": "1574600",
    "end": "1580240"
  },
  {
    "text": "which case we get back a b and a residual future for a so this data type just gives us the capability of actually",
    "start": "1580240",
    "end": "1588679"
  },
  {
    "text": "interpreting that non-deterministic request and you can maybe sort of imagine how you would uh make use of",
    "start": "1588679",
    "end": "1596919"
  },
  {
    "text": "this data type in the implementation of um this function y which is now going",
    "start": "1596919",
    "end": "1603480"
  },
  {
    "text": "to take a process fo a process fo2 a y which may",
    "start": "1603480",
    "end": "1610360"
  },
  {
    "text": "non-deterministically make requests from either side and a strategy or the capability of",
    "start": "1610360",
    "end": "1618320"
  },
  {
    "text": "of actually implementing or making use of that non-determinism in The",
    "start": "1618320",
    "end": "1625080"
  },
  {
    "text": "Interpreter okay so I'm like breezing through things here but uh so now the",
    "start": "1626679",
    "end": "1632320"
  },
  {
    "text": "last thing I'm going to talk about I'm going to sort of handwave a little bit but so we now have the ability to",
    "start": "1632320",
    "end": "1637960"
  },
  {
    "text": "describe these pretty much arbitrary networks of processes we can Fork things",
    "start": "1637960",
    "end": "1643399"
  },
  {
    "text": "off we can merge uh multiple input streams and we can express non-et ter minism at any point in our in our",
    "start": "1643399",
    "end": "1651200"
  },
  {
    "text": "Network and that's a very powerful thing so it seems like it is possible to take",
    "start": "1651200",
    "end": "1658000"
  },
  {
    "text": "a process Network and not just run it on a single machine but actually compile it",
    "start": "1658000",
    "end": "1664159"
  },
  {
    "text": "to a network of actors that communicate via message passing and these actors",
    "start": "1664159",
    "end": "1669559"
  },
  {
    "text": "could actually live on different machines and the interesting thing is we",
    "start": "1669559",
    "end": "1674880"
  },
  {
    "text": "have a ton of metadata so we have all this information about where non-determinism is allowed in our",
    "start": "1674880",
    "end": "1681480"
  },
  {
    "text": "process networks and we also have all this information about exactly where effects",
    "start": "1681480",
    "end": "1686960"
  },
  {
    "text": "are occurring as well and so we have I think enough information to compile the",
    "start": "1686960",
    "end": "1695039"
  },
  {
    "text": "same uh process Network description to a",
    "start": "1695039",
    "end": "1700480"
  },
  {
    "text": "an actual distributed implementation that is still uh faithful to the semantics of the original uh uh",
    "start": "1700480",
    "end": "1708640"
  },
  {
    "text": "single machine description so this is kind of an just an idea at",
    "start": "1708640",
    "end": "1715399"
  },
  {
    "text": "this point sort of hand waving but this would be sort of the Holy Grail of you know you could Define a this really",
    "start": "1715399",
    "end": "1722360"
  },
  {
    "text": "complex process Network test it locally and then just simply compile it and have",
    "start": "1722360",
    "end": "1727720"
  },
  {
    "text": "it execute concurrently on you know 50 different machines uh so that would be pretty",
    "start": "1727720",
    "end": "1733600"
  },
  {
    "text": "awesome if that were possible but not not not implemented yet okay so",
    "start": "1733600",
    "end": "1739960"
  },
  {
    "text": "wrapping up here uh so obviously uh Runar and I we've been",
    "start": "1739960",
    "end": "1746200"
  },
  {
    "start": "1741000",
    "end": "1741000"
  },
  {
    "text": "working together a lot on the stuff for the book and um but in addition my",
    "start": "1746200",
    "end": "1751760"
  },
  {
    "text": "co-workers Dan Dole and Ed Kat who I don't know if they're in the audience but uh they've been working uh with us",
    "start": "1751760",
    "end": "1758519"
  },
  {
    "text": "on this stuff too and Ed has this great uh library in hasell the machines Library which you can check out if",
    "start": "1758519",
    "end": "1764760"
  },
  {
    "text": "you're interested and there's also a scolar port uh by Runar and Dan",
    "start": "1764760",
    "end": "1771039"
  },
  {
    "text": "Dole and lastly I think we're going to try to so this Library sort of",
    "start": "1771039",
    "end": "1776159"
  },
  {
    "text": "crystallized enough I think that we're going to try to Port it to schol Z at some point soon it'll probably be a",
    "start": "1776159",
    "end": "1782399"
  },
  {
    "text": "separate um like sub project of scholar Z but uh",
    "start": "1782399",
    "end": "1788320"
  },
  {
    "text": "yeah it should be pretty awesome and uh you know you you guys should check it out on once that gets released you know",
    "start": "1788320",
    "end": "1794279"
  },
  {
    "text": "hopefully maybe in the next few months we'll we'll at least have some something alpha alpha quality that that you can",
    "start": "1794279",
    "end": "1800200"
  },
  {
    "text": "check out and of course a lot more stuff in the book if you're if you're",
    "start": "1800200",
    "end": "1805480"
  },
  {
    "text": "interested so yeah that's all I got",
    "start": "1805480",
    "end": "1810480"
  },
  {
    "text": "questions so at at precog in one of our early iterations on our product we uh we",
    "start": "1816200",
    "end": "1821559"
  },
  {
    "text": "used iterates uh to to serve somewhat the the same purpose here and one of the",
    "start": "1821559",
    "end": "1827679"
  },
  {
    "text": "the problems we encountered was that um with the overhead of you know function",
    "start": "1827679",
    "end": "1833360"
  },
  {
    "text": "calls in Scala that uh just performance-wise we couldn't afford to do things on an element by element basis",
    "start": "1833360",
    "end": "1839799"
  },
  {
    "text": "we had to do things at a block level and yet there are some operations which require you you know take take a",
    "start": "1839799",
    "end": "1845279"
  },
  {
    "text": "co-group operation or a joint operation or something like that they require you to look at ele things on an element by",
    "start": "1845279",
    "end": "1851240"
  },
  {
    "text": "element level so how do you go about with with machines sort of trans trans",
    "start": "1851240",
    "end": "1858120"
  },
  {
    "text": "ating between those two contexts where you need block level level operations where you can apply them um just purely",
    "start": "1858120",
    "end": "1864679"
  },
  {
    "text": "for performance and element level operations where the semantics of the of",
    "start": "1864679",
    "end": "1869720"
  },
  {
    "text": "the operation needs needs that okay uh so I",
    "start": "1869720",
    "end": "1876200"
  },
  {
    "text": "think yeah I mean the the stuff I'm I'm talking about here is sort of independent of of doing chunking but I",
    "start": "1876200",
    "end": "1882720"
  },
  {
    "text": "mean one thing you can obviously do is you can deal with uh",
    "start": "1882720",
    "end": "1889919"
  },
  {
    "text": "more corar grained requests so you can request okay not just you know one",
    "start": "1889960",
    "end": "1895679"
  },
  {
    "text": "element you can request 50 elements at a time and when you have those 50 elements you can operate on things explicitly",
    "start": "1895679",
    "end": "1902200"
  },
  {
    "text": "chunked so that's one way you can uh eliminate some overhead but yeah I mean I",
    "start": "1902200",
    "end": "1909080"
  },
  {
    "text": "think on some level you're you're paying a little bit of a price by having this really compositional API I mean if you",
    "start": "1909080",
    "end": "1916760"
  },
  {
    "text": "really need to just write a monolithic Loop to get that last you know 15 20% or",
    "start": "1916760",
    "end": "1923559"
  },
  {
    "text": "whatever performance",
    "start": "1923559",
    "end": "1926799"
  },
  {
    "text": "like yeah well so I I guess I guess the thing is there's there's huge advantages to having a compositional API and um",
    "start": "1932679",
    "end": "1942760"
  },
  {
    "text": "usually that outweighs the disadvantages maybe of a some constant Factor but I",
    "start": "1942760",
    "end": "1948840"
  },
  {
    "text": "mean I think it depends on what you're doing um it looked like there was an arrow instance for process one so I was",
    "start": "1948840",
    "end": "1956679"
  },
  {
    "text": "wondering why T and Y aren't represented as products of processes instead of with",
    "start": "1956679",
    "end": "1965159"
  },
  {
    "text": "special type representations that were",
    "start": "1965159",
    "end": "1970360"
  },
  {
    "text": "shown uh maybe come come talk to me after but",
    "start": "1970360",
    "end": "1976559"
  },
  {
    "text": "it the the arrow for uh if you the arrow for process one so I guess T allows you",
    "start": "1976559",
    "end": "1983840"
  },
  {
    "text": "to be a lot more explicit about the order that things are happening the general sort of Arrow zipping uh",
    "start": "1983840",
    "end": "1992080"
  },
  {
    "text": "operation you're not actually specifying uh whether you're going to do the thing",
    "start": "1992080",
    "end": "1997159"
  },
  {
    "text": "on the left first and then the thing on the right first or maybe do 50 things on the left first and then 50 things on the",
    "start": "1997159",
    "end": "2003840"
  },
  {
    "text": "right so T gives you in general a lot more flexibility than what kind of an",
    "start": "2003840",
    "end": "2009399"
  },
  {
    "text": "awise API could give you I kept kept thinking through the whole first part of",
    "start": "2009399",
    "end": "2014440"
  },
  {
    "text": "the talk um this this should map to actors quite naturally uh in order to",
    "start": "2014440",
    "end": "2019639"
  },
  {
    "text": "execute the whole thing um so I'm glad that you mentioned that um you might be interested in the type channels uh I",
    "start": "2019639",
    "end": "2026760"
  },
  {
    "text": "worked on to make um actors actually adhere more to the model you're uh",
    "start": "2026760",
    "end": "2033000"
  },
  {
    "text": "describing of explicit input output types uh but there is one thing which is a which is missing in your description",
    "start": "2033000",
    "end": "2040200"
  },
  {
    "text": "and that is um the supervision aspect which we Implement in AA when an actor",
    "start": "2040200",
    "end": "2045399"
  },
  {
    "text": "fails um that it is not actually the duty of the one doing the wiring or the",
    "start": "2045399",
    "end": "2050480"
  },
  {
    "text": "one having sent the message to handle failure but the supervisor because um it",
    "start": "2050480",
    "end": "2055679"
  },
  {
    "text": "is not always possible to group that failure code uh in a convenient location",
    "start": "2055679",
    "end": "2061280"
  },
  {
    "text": "uh in this sense so you need the supervising entity above it yeah so that's that's something I I",
    "start": "2061280",
    "end": "2069040"
  },
  {
    "text": "haven't thought too much about but yeah the the whole supervisor hierarchies and",
    "start": "2069040",
    "end": "2075760"
  },
  {
    "text": "and how does this play into that you know I haven't really thought about it but I I think it'd be interesting to see",
    "start": "2075760",
    "end": "2081638"
  },
  {
    "text": "how that maybe could s things like that could be incorporated into an API like this but",
    "start": "2081639",
    "end": "2089440"
  },
  {
    "text": "yeah thank [Applause]",
    "start": "2089440",
    "end": "2096639"
  },
  {
    "text": "you [Music]",
    "start": "2096640",
    "end": "2105130"
  }
]