[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "hello my name is Juan Pressler I work it or a call here in London as part at the",
    "start": "4020",
    "end": "10080"
  },
  {
    "text": "Java platform group that's the group that develops open JDK designs the Java",
    "start": "10080",
    "end": "16049"
  },
  {
    "text": "language that JVM and the cool libraries and I serve as a technical lead for",
    "start": "16049",
    "end": "22050"
  },
  {
    "text": "project loon that is the project that's intended to add continuations and fibers",
    "start": "22050",
    "end": "28199"
  },
  {
    "text": "to the JDK now this talk is not part of the Java track it's part of the",
    "start": "28199",
    "end": "34110"
  },
  {
    "text": "programming languages tracks so I've been asked to make it more theoretical and we're going to start with quite a",
    "start": "34110",
    "end": "41070"
  },
  {
    "text": "bit of theory things are going to get more concrete later on but this gives me",
    "start": "41070",
    "end": "47460"
  },
  {
    "text": "an opportunity to speak about to focus on subjects aspects of the project that I don't normally get to talk about but",
    "start": "47460",
    "end": "54870"
  },
  {
    "text": "if you are more interested in the more down-to-earth aspects of the project that you can search for other loon talks",
    "start": "54870",
    "end": "62190"
  },
  {
    "text": "on YouTube now as I said I work for Oracle so I'm required to show you the",
    "start": "62190",
    "end": "67860"
  },
  {
    "start": "64000",
    "end": "458000"
  },
  {
    "text": "slide that basically says of everything I'm about to tell you is a lie brilliant ok so our views of computation",
    "start": "67860",
    "end": "77189"
  },
  {
    "text": "have changed based on what we use computation for traditionally in the",
    "start": "77189",
    "end": "83310"
  },
  {
    "text": "past you used to think of computation as being deterministic so what we see here the circles we can think of them as",
    "start": "83310",
    "end": "89549"
  },
  {
    "text": "program states and on left we have deterministic computation we don't know",
    "start": "89549",
    "end": "94649"
  },
  {
    "text": "what to say we start the program because you can think of it has different command-line arguments but once we do is",
    "start": "94649",
    "end": "101420"
  },
  {
    "text": "only one outgoing edge for each state so once we start we know where we're going to end up and this view sees computation",
    "start": "101420",
    "end": "108600"
  },
  {
    "text": "as sort of a function you have an input and you get an output in the last few",
    "start": "108600",
    "end": "114719"
  },
  {
    "text": "decades of the easy computation more and more interactive systems and such systems and non-deterministic and if for",
    "start": "114719",
    "end": "121709"
  },
  {
    "text": "any point in the program the next state could possibly be more than one and one",
    "start": "121709",
    "end": "128640"
  },
  {
    "text": "of the reasons for that is interaction or i/o that's the one I'm mainly going to be talking about so for example if you want",
    "start": "128640",
    "end": "135150"
  },
  {
    "text": "to read an input from the user read something from a socket you don't know what it's going to be so you don't know what the next program state is",
    "start": "135150",
    "end": "141700"
  },
  {
    "text": "going to be other sources of non-determinism know what the feminism can be concurrency or threading right so",
    "start": "141700",
    "end": "149349"
  },
  {
    "text": "if you let the kernel scheduler decide which thread to schedule on the CPU you",
    "start": "149349",
    "end": "156520"
  },
  {
    "text": "don't know as a programmer which one is going to be so the next program say can be one of many possible ones so we're",
    "start": "156520",
    "end": "164410"
  },
  {
    "text": "going to start with as you talk about how different languages do i/o and we're",
    "start": "164410",
    "end": "170380"
  },
  {
    "text": "going to start with a paradigm that is perhaps the most closely associated with the deterministic view programming that",
    "start": "170380",
    "end": "177400"
  },
  {
    "text": "is pure functional programming and in this paradigm a language term I see like",
    "start": "177400",
    "end": "184900"
  },
  {
    "text": "a subroutine application behaves similarly to a function application in",
    "start": "184900",
    "end": "190630"
  },
  {
    "text": "maths you have full any given value of input you necessarily get only one",
    "start": "190630",
    "end": "199360"
  },
  {
    "text": "always the same output so the question",
    "start": "199360",
    "end": "205329"
  },
  {
    "text": "is how do we describe non-deterministic",
    "start": "205329",
    "end": "210459"
  },
  {
    "text": "programs and we said non determinism is something that's forced on us by virtue of being interactive in such a world so",
    "start": "210459",
    "end": "219459"
  },
  {
    "text": "we can think of non determinism instead of saying the next thing I'm going to do is either this or that we can imagine",
    "start": "219459",
    "end": "227140"
  },
  {
    "text": "that there is an additional parameter that we don't know what it is and that",
    "start": "227140",
    "end": "235359"
  },
  {
    "text": "additional parameter really determines our next step so things are sequential",
    "start": "235359",
    "end": "240400"
  },
  {
    "text": "in deterministic but in this way we can model non determinism so if you think about it I can toss a coin and from my",
    "start": "240400",
    "end": "249069"
  },
  {
    "text": "perspective the results is going to be completely non deterministic but it may well be that the universe is very much a",
    "start": "249069",
    "end": "255519"
  },
  {
    "text": "terminus stake and the reason I don't know the result of the coin toss is because I don't have all the known",
    "start": "255519",
    "end": "263620"
  },
  {
    "text": "parameters but the universe does so I can think that the outcome of the coin",
    "start": "263620",
    "end": "270010"
  },
  {
    "text": "toss is actually a deterministic function of some value that I don't know so we transformed this",
    "start": "270010",
    "end": "275200"
  },
  {
    "text": "picture on the left to the picture on the right by adding more parameters so",
    "start": "275200",
    "end": "280510"
  },
  {
    "text": "the language perhaps most associated with its style is Haskell and what you see here is not a school it's a language",
    "start": "280510",
    "end": "287530"
  },
  {
    "text": "that I made up for the purpose of these slides but it's very very similar to a school and we're going to try to express",
    "start": "287530",
    "end": "295540"
  },
  {
    "text": "non determinism in this way so we have some IO subroutines get line and put string line and they're going to take",
    "start": "295540",
    "end": "302890"
  },
  {
    "text": "this hidden mysterious parameter called world that is not known to us but it represents the state of the universe and",
    "start": "302890",
    "end": "310500"
  },
  {
    "text": "these subroutines are going to consume it and give me a new value of world and perhaps do something else so get line is",
    "start": "310500",
    "end": "316510"
  },
  {
    "text": "going to also return the string what reads from the console and put string line is going to out for that string and",
    "start": "316510",
    "end": "323430"
  },
  {
    "text": "in that language the main program just takes the state of the world returns new",
    "start": "323430",
    "end": "329440"
  },
  {
    "text": "state of the world and I've used a construct that does not exist in high",
    "start": "329440",
    "end": "334690"
  },
  {
    "text": "school I think let crack just two so I can reuse a W variable but I get the",
    "start": "334690",
    "end": "340090"
  },
  {
    "text": "world from me then imposter to get line get a new world and the result string and then I pass the world to put string",
    "start": "340090",
    "end": "347560"
  },
  {
    "text": "line with a string opposite to the console and I'm done to see what's going",
    "start": "347560",
    "end": "354640"
  },
  {
    "text": "on here more closely without reusing the same variable so to eat those types so you get a new value of the world so it's",
    "start": "354640",
    "end": "361180"
  },
  {
    "text": "not w0 we use that we get w1 back we use that and we get W to the problem with",
    "start": "361180",
    "end": "368830"
  },
  {
    "text": "that is that this isn't sufficient and in fact it won't work to represent IO",
    "start": "368830",
    "end": "375430"
  },
  {
    "text": "for the following reason every time we read a line from the user we don't know",
    "start": "375430",
    "end": "381490"
  },
  {
    "text": "what the next stage is going to be we don't know what the results are going to be but from what I presented you I'm",
    "start": "381490",
    "end": "387280"
  },
  {
    "text": "allowed to pass the same value of the world W 0 to get line twice and",
    "start": "387280",
    "end": "392940"
  },
  {
    "text": "according to this model I would need to get the same value again in both cases",
    "start": "392940",
    "end": "398440"
  },
  {
    "text": "but this is not the case because the user is allowed to enter whatever string they want but we can solve this by adding",
    "start": "398440",
    "end": "405550"
  },
  {
    "text": "something called linear types which are represented with the upside-down ex-mayor mark and if I say that the",
    "start": "405550",
    "end": "412930"
  },
  {
    "text": "world values a linear type then the compiler is going to ensure that I use",
    "start": "412930",
    "end": "419260"
  },
  {
    "text": "each of those values exactly once so if I pass w0 to get line and I get w1 back",
    "start": "419260",
    "end": "425680"
  },
  {
    "text": "and they trying to pass w0 again the compilers going to give me an error that w0 has already been consumed and if we",
    "start": "425680",
    "end": "435130"
  },
  {
    "text": "make sure that each of these mysterious parameter world parameters only is exactly once we can actually represent",
    "start": "435130",
    "end": "443400"
  },
  {
    "text": "non-determinism in this fashion and this is how the result is going to look like I think",
    "start": "443400",
    "end": "450039"
  },
  {
    "text": "there are some languages that do that already if you've heard of cogent maybe",
    "start": "450039",
    "end": "455229"
  },
  {
    "text": "it rest's is playing without a bit but this is not one haskell does there is",
    "start": "455229",
    "end": "460330"
  },
  {
    "start": "458000",
    "end": "601000"
  },
  {
    "text": "another solution and if you remember in the beginning I showed you that even in",
    "start": "460330",
    "end": "466500"
  },
  {
    "text": "the deterministic picture of the world now there is one point of allowed non determinism and that is the beginning of",
    "start": "466500",
    "end": "472780"
  },
  {
    "text": "the program okay so we're allowed to begin the program in one of various states but once we start we are",
    "start": "472780",
    "end": "479889"
  },
  {
    "text": "deterministic so we can do is to move",
    "start": "479889",
    "end": "488889"
  },
  {
    "text": "the non determinism outside the program and say okay if the transition from A to B is deterministic and now we want to",
    "start": "488889",
    "end": "494260"
  },
  {
    "text": "ask for input so what we're going to do is we're going to basically end the program return back to the runtime ask",
    "start": "494260",
    "end": "502810"
  },
  {
    "text": "for on time to read some inputs for us and then restart the program at a new entry point depending on what the user",
    "start": "502810",
    "end": "510130"
  },
  {
    "text": "has inserted and this is exactly what Haskell does so this is actual Haskell",
    "start": "510130",
    "end": "516669"
  },
  {
    "text": "now and this code doesn't show you much it actually looks quite imperative but",
    "start": "516669",
    "end": "522880"
  },
  {
    "text": "this is just syntactic sugar for the following the main function returns a",
    "start": "522880",
    "end": "528730"
  },
  {
    "text": "value of something called an i/o type and that value is constructed with a",
    "start": "528730",
    "end": "534610"
  },
  {
    "text": "function called bind i/o and bind IO structs a value of the io type from a pair of two things first the operation",
    "start": "534610",
    "end": "541289"
  },
  {
    "text": "we want the runtime to perform and second the new program entry points and what we do here we basically say okay",
    "start": "541289",
    "end": "547859"
  },
  {
    "text": "this program is done I've returned the runtime despair but then the runtime is going to ask the user for input and",
    "start": "547859",
    "end": "554219"
  },
  {
    "text": "going to start the program again passing that string of input into the new entry point there is actually a bit more going",
    "start": "554219",
    "end": "563129"
  },
  {
    "text": "on here to make this kind of programming actually convenient and nice to use",
    "start": "563129",
    "end": "568189"
  },
  {
    "text": "these io values can be combined in a nice pattern with these two functions",
    "start": "568189",
    "end": "573719"
  },
  {
    "text": "return I own bind IO and that's called a monad so the AI is a monad it is quite",
    "start": "573719",
    "end": "581579"
  },
  {
    "text": "problematic even a language like Haskell but we're not going to talk too much about the problems monads but just to",
    "start": "581579",
    "end": "590129"
  },
  {
    "text": "say that what monad does is allows us to combine various operations on the IO",
    "start": "590129",
    "end": "595439"
  },
  {
    "text": "type in a nice way and that is what enables us to use this nice Jew notation with nice and tax but if you're not",
    "start": "595439",
    "end": "608279"
  },
  {
    "start": "601000",
    "end": "641000"
  },
  {
    "text": "using hauskool if you're using classical imperative programming like Java or a C or Python in those languages the meaning",
    "start": "608279",
    "end": "617099"
  },
  {
    "text": "of an operation such as a submarine application is not the same as a mouse",
    "start": "617099",
    "end": "624149"
  },
  {
    "text": "function if you're interested in programming language theory you may know this it's it's something that's called a",
    "start": "624149",
    "end": "629849"
  },
  {
    "text": "predicate transformer it doesn't really matter what matters here is that the outcome of this operation does not need",
    "start": "629849",
    "end": "636449"
  },
  {
    "text": "to be deterministic unlike functions and this is why in Java you can write code",
    "start": "636449",
    "end": "644819"
  },
  {
    "start": "641000",
    "end": "708000"
  },
  {
    "text": "that looks like this we just read line and we are non deterministic we don't know what the result in string going to",
    "start": "644819",
    "end": "650639"
  },
  {
    "text": "be and then we print it right back out to the console so this is why it's",
    "start": "650639",
    "end": "657899"
  },
  {
    "text": "surprising so in languages like this dealing with non terminus is quite easy and it's built into the semantics of",
    "start": "657899",
    "end": "664589"
  },
  {
    "text": "language this is why it's surprising that we find a following in the Java core libraries",
    "start": "664589",
    "end": "670710"
  },
  {
    "text": "we see this strange class completable future and I've translated the signature",
    "start": "670710",
    "end": "676470"
  },
  {
    "text": "of the methods - Haskell like notation and if you look at that those signature",
    "start": "676470",
    "end": "682170"
  },
  {
    "text": "are actually identical to those we find with a return I are in bind IO and that is because this class actually",
    "start": "682170",
    "end": "689370"
  },
  {
    "text": "implements a monad and the various users for monads but this class is used to do",
    "start": "689370",
    "end": "695070"
  },
  {
    "text": "i/o and the question is why we know why we needed in Haskell because high school",
    "start": "695070",
    "end": "700830"
  },
  {
    "text": "is deterministic and functional the Java isn't so why do we need to use a monad in Java you do i/o so there is something",
    "start": "700830",
    "end": "710520"
  },
  {
    "start": "708000",
    "end": "838000"
  },
  {
    "text": "else going on here it's not just a non determinism and it's not just the theory",
    "start": "710520",
    "end": "716490"
  },
  {
    "text": "that part of the code that performs certain kinds of computation are actually run on the CPU but when we want",
    "start": "716490",
    "end": "723899"
  },
  {
    "text": "to do i oh we need to move off the CPU and use different circuitry in the computer and we basically need to",
    "start": "723899",
    "end": "730740"
  },
  {
    "text": "release the CPU to do other stuff and we call that blocking so what read line",
    "start": "730740",
    "end": "737400"
  },
  {
    "text": "does it also blocks it stops using the CPU it asks the operating system to do",
    "start": "737400",
    "end": "744300"
  },
  {
    "text": "IFRS using other secretary in the machine and one it's done we ask the operating system to bring us back to the",
    "start": "744300",
    "end": "750990"
  },
  {
    "text": "CPU and we've all learned and this was done using processes or threads and",
    "start": "750990",
    "end": "758220"
  },
  {
    "text": "we've all learned back in kindergarten that blocking threads is bad because friends are big and heavy weight and",
    "start": "758220",
    "end": "764730"
  },
  {
    "text": "expensive and you can only have so many of them and blocking is slow so we shouldn't do that so it's not because of",
    "start": "764730",
    "end": "771990"
  },
  {
    "text": "the semantics or the meaning of the language that we use that strange monad but because we just don't want to block",
    "start": "771990",
    "end": "778040"
  },
  {
    "text": "so we're using a similar mechanism taken from a completely different paradigm to",
    "start": "778040",
    "end": "783329"
  },
  {
    "text": "solve a different problem and that right",
    "start": "783329",
    "end": "794130"
  },
  {
    "text": "so so let's look at this Java method that does some important computation and",
    "start": "794130",
    "end": "801810"
  },
  {
    "text": "it uses microservices so every time you call compute and I actually go over the network I pass some",
    "start": "801810",
    "end": "808240"
  },
  {
    "text": "operation I want my computing service to do financial computing service to do and",
    "start": "808240",
    "end": "813660"
  },
  {
    "text": "I'm going to block and when it's done I'm going to get the result and based on that you the next thing so if we wanted",
    "start": "813660",
    "end": "820420"
  },
  {
    "text": "to use that completable future this code would look like that this is called",
    "start": "820420",
    "end": "826810"
  },
  {
    "text": "asynchronous programming sometimes it's also referred to as reactive programming but really is just a style that's meant",
    "start": "826810",
    "end": "833680"
  },
  {
    "text": "for us that MIT is meant for to allow us not to walk now whatever your opinions",
    "start": "833680",
    "end": "842050"
  },
  {
    "start": "838000",
    "end": "1060000"
  },
  {
    "text": "are about this style I said just last night and watch this very nice talk about someone who's an expert on reactive programming he has some strong",
    "start": "842050",
    "end": "848770"
  },
  {
    "text": "opinion and why their style is actually problematic but let's look at some of",
    "start": "848770",
    "end": "854290"
  },
  {
    "text": "the problems so first of all I suppose original method was not that simple but",
    "start": "854290",
    "end": "861160"
  },
  {
    "text": "we actually want to do some control flow you wanted to branch to the result of the first compute and then loop over the",
    "start": "861160",
    "end": "866920"
  },
  {
    "text": "second call and we simply cannot use those existing Java mechanism if we use",
    "start": "866920",
    "end": "872860"
  },
  {
    "text": "completable future we use different ones sounds especially built sort of ideas so this completable future has sort of",
    "start": "872860",
    "end": "879760"
  },
  {
    "text": "its own DSL for doing control flow but we can't use the ones that are built into the language so this already shows",
    "start": "879760",
    "end": "885550"
  },
  {
    "text": "some kind of mismatch another problem is what happens if we have an exception so",
    "start": "885550",
    "end": "891220"
  },
  {
    "text": "we use two exceptions giving us some context of where the problem happened but when we use something like computer",
    "start": "891220",
    "end": "897280"
  },
  {
    "text": "completable future any of the reactive frameworks like ours Java etc each of",
    "start": "897280",
    "end": "902350"
  },
  {
    "text": "these steps can be executed in a completely different thread and it will likely be a thread other than the one",
    "start": "902350",
    "end": "908290"
  },
  {
    "text": "that called calc important silence and the stack trace we get we're going to",
    "start": "908290",
    "end": "914320"
  },
  {
    "text": "get to the exception is not going to tell us the context we were actually running it and this makes debugging this",
    "start": "914320",
    "end": "920590"
  },
  {
    "text": "code very hard not only that it makes profiling this code hard because profiling works by sampling sack traces",
    "start": "920590",
    "end": "926920"
  },
  {
    "text": "and if the SAP trace is no longer give us the actual context of our computation they're basically useless but perhaps",
    "start": "926920",
    "end": "934330"
  },
  {
    "text": "the biggest problem is return time like in the case of Io in",
    "start": "934330",
    "end": "940400"
  },
  {
    "text": "Haskell the return type here is of this strange class that wraps a double and we",
    "start": "940400",
    "end": "947630"
  },
  {
    "text": "can't get the double inside it unless we block and that's what we don't want to do so everyone who calls this also has",
    "start": "947630",
    "end": "956630"
  },
  {
    "text": "to work with these completable future in an asynchronous style and this is viral and means that our entire call stack",
    "start": "956630",
    "end": "962450"
  },
  {
    "text": "must be either synchronous and blocking or asynchronous and it is nearly",
    "start": "962450",
    "end": "967610"
  },
  {
    "text": "impossible to interoperate the two styles so we get two separate worlds so",
    "start": "967610",
    "end": "973730"
  },
  {
    "text": "what do other languages do about that c-sharp introduced something called async awaits so the tasks class in in",
    "start": "973730",
    "end": "981820"
  },
  {
    "text": "c-sharp is similar to completable future in java but now you can add this async",
    "start": "981820",
    "end": "987350"
  },
  {
    "text": "annotation and you can prefix calls to async methods with the awaits keyword I",
    "start": "987350",
    "end": "995090"
  },
  {
    "text": "guess and this way you get a nice",
    "start": "995090",
    "end": "1000790"
  },
  {
    "text": "imperative looking code and this certainly solves the first problem now",
    "start": "1000790",
    "end": "1005860"
  },
  {
    "text": "we can use exceptions now we can use control for like if in wild cetera it",
    "start": "1005860",
    "end": "1013090"
  },
  {
    "text": "doesn't really solve the second problem though of the exception stack trace",
    "start": "1013090",
    "end": "1018780"
  },
  {
    "text": "because each one of those lines will still be execute in a different thread and the exception is going to give us a",
    "start": "1018780",
    "end": "1025750"
  },
  {
    "text": "strange sack trace now this is actually they've something they have fixed in in net call where I think 2.1 released last",
    "start": "1025750",
    "end": "1033910"
  },
  {
    "text": "year they artificially generate a stack trace that does capture the actual",
    "start": "1033910",
    "end": "1039520"
  },
  {
    "text": "context but it would still be a very different stack trace from the one you'd get if you were writing ordinary",
    "start": "1039520",
    "end": "1045250"
  },
  {
    "text": "blocking code but it's also sort of the biggest problem and that is that you still have now two separate worlds that",
    "start": "1045250",
    "end": "1052210"
  },
  {
    "text": "can't interoperate properly the one the ASIC world and the synchronous blocking",
    "start": "1052210",
    "end": "1058210"
  },
  {
    "text": "world and the question is why give up so",
    "start": "1058210",
    "end": "1063310"
  },
  {
    "start": "1060000",
    "end": "1509000"
  },
  {
    "text": "the imperative languages that we know not only handle input in non determinism",
    "start": "1063310",
    "end": "1068380"
  },
  {
    "text": "they are have this built-in ocean of threads or processes in blocking and it is a good abstraction",
    "start": "1068380",
    "end": "1075260"
  },
  {
    "text": "from a programming perspective and the only reason we sometimes want to avoid",
    "start": "1075260",
    "end": "1081980"
  },
  {
    "text": "it is because the implementation by the kernel threads is too heavy wait so why do we want to abandon something that's",
    "start": "1081980",
    "end": "1088429"
  },
  {
    "text": "not only a good abstraction but a core abstraction of this paradigm just because of an inadequate implementation",
    "start": "1088429",
    "end": "1094390"
  },
  {
    "text": "the obvious solution instead of changing how we program is does she change the implementation and that is what we're",
    "start": "1094390",
    "end": "1100910"
  },
  {
    "text": "trying to use in part as part of Project loon so to replace implementation first",
    "start": "1100910",
    "end": "1112760"
  },
  {
    "text": "we need to understand what it does so what is a thread in a process so if we think about it and trying to knee",
    "start": "1112760",
    "end": "1118610"
  },
  {
    "text": "complex it as Ricky may say we see that there was actually two different",
    "start": "1118610",
    "end": "1124100"
  },
  {
    "text": "capabilities here first we need the ability to stop the code that's running on the CPU and say okay I'm not doing",
    "start": "1124100",
    "end": "1131660"
  },
  {
    "text": "I'm not using a CPU anymore and later on have the ability to resume it that's one",
    "start": "1131660",
    "end": "1137570"
  },
  {
    "text": "capability the other capability is we need some mechanism to schedule those pieces that want to run the CPU and say",
    "start": "1137570",
    "end": "1143929"
  },
  {
    "text": "ok now you're ready because you were waiting for something else to happen like an i/o operation to complete now you can run on call number three and we",
    "start": "1143929",
    "end": "1151760"
  },
  {
    "text": "have names for these two capabilities the first one is called continuation that's the ability to suspend running",
    "start": "1151760",
    "end": "1158929"
  },
  {
    "text": "computation and later on resume it and the second is just a scheduler so it's",
    "start": "1158929",
    "end": "1164179"
  },
  {
    "text": "part of Project loon we've implemented continuations in the JVM exposed as this",
    "start": "1164179",
    "end": "1170390"
  },
  {
    "text": "costs here and what it does this is very",
    "start": "1170390",
    "end": "1177290"
  },
  {
    "text": "similar to the one actually and the prototype it's not quite the same and change the bit but so what we get here",
    "start": "1177290",
    "end": "1182510"
  },
  {
    "text": "is we have a continuation of a certain body that is going to be the the code",
    "start": "1182510",
    "end": "1188210"
  },
  {
    "text": "that we'll be able to suspend itself and then we run it when we run it we start",
    "start": "1188210",
    "end": "1194270"
  },
  {
    "text": "executing it and it can either run to completion or yield in either case run",
    "start": "1194270",
    "end": "1201050"
  },
  {
    "text": "will return so there is no concurrency here everything running on the same thread but when you call run the body of the continuation is",
    "start": "1201050",
    "end": "1207740"
  },
  {
    "text": "going to run either to completion or until the next time it calls yield if it calls yield if we ask if you're done",
    "start": "1207740",
    "end": "1214220"
  },
  {
    "text": "it's going to say no if it's emanated it's going to say yes this scope thing allows us to nest different",
    "start": "1214220",
    "end": "1220640"
  },
  {
    "text": "continuations inside another and to be able to suspend multiple continuations",
    "start": "1220640",
    "end": "1227780"
  },
  {
    "text": "and jump back multiple callers similar to how we throw exceptions way up the stack to be more precise if you're",
    "start": "1227780",
    "end": "1236090"
  },
  {
    "text": "interested in in the theory of configurations and in the academic literature the kind of continuation this",
    "start": "1236090",
    "end": "1242120"
  },
  {
    "text": "class implements are called one-shot multi prompt delimited configurations so I'm going to clean each of those the",
    "start": "1242120",
    "end": "1248420"
  },
  {
    "text": "delimited part means that the piece of the code that we are suspending and resuming is not the entire program but",
    "start": "1248420",
    "end": "1255500"
  },
  {
    "text": "just the code that's inside the body so the body the limits the code that we want to suspend and that's why they're",
    "start": "1255500",
    "end": "1262610"
  },
  {
    "text": "delimited Multi prompt is exactly the different scopes the different scopes are in literature called prompt we can",
    "start": "1262610",
    "end": "1270080"
  },
  {
    "text": "nest different continuations and jump back to suspend however many of them we want and one-shot means that this",
    "start": "1270080",
    "end": "1278720"
  },
  {
    "text": "continuation is mutable in the sense that every time you run it it's going to run until the next yield point and then",
    "start": "1278720",
    "end": "1285620"
  },
  {
    "text": "its state changes and then when you run it again it's going to run from the",
    "start": "1285620",
    "end": "1291200"
  },
  {
    "text": "first yield point to the second and we can never go back in time now",
    "start": "1291200",
    "end": "1296390"
  },
  {
    "text": "continuations are very low-level construct and application developers not expect to use them directly suppose",
    "start": "1296390",
    "end": "1302059"
  },
  {
    "text": "these high-level constructs that are built on top of them but if you were to use them directly this is how you do",
    "start": "1302059",
    "end": "1308330"
  },
  {
    "text": "some so you have a continuation that's the body the loops forever prints out some stuff and occasionally eels and",
    "start": "1308330",
    "end": "1314210"
  },
  {
    "text": "then if you want to use that continuation you just loop as long as it's not done in this case it's never going to be done you run it and every",
    "start": "1314210",
    "end": "1321170"
  },
  {
    "text": "time you call run it's not going to live forever it's just going to execute the next iteration until yield the important",
    "start": "1321170",
    "end": "1327770"
  },
  {
    "text": "thing here is that the call to yield does not actually need to be inside this",
    "start": "1327770",
    "end": "1333700"
  },
  {
    "text": "outermost top-level block it can actually be inside some",
    "start": "1333700",
    "end": "1339580"
  },
  {
    "text": "method deep in the stack I can call foo and footballs barn ball calls yield so",
    "start": "1339580",
    "end": "1346470"
  },
  {
    "text": "part after the continuation state is a stack so the continuation maintains its own sack and its own program point a",
    "start": "1346470",
    "end": "1353890"
  },
  {
    "text": "program counter where it isn't program",
    "start": "1353890",
    "end": "1357870"
  },
  {
    "text": "now people who may be familiar with continuations and other languages like scheme and maybe I think there's a spare",
    "start": "1358920",
    "end": "1364780"
  },
  {
    "text": "mental implementation Oh camel might be a bit horrified to see that the return",
    "start": "1364780",
    "end": "1369850"
  },
  {
    "text": "type so the run and yield methods is void usually you want to pass some",
    "start": "1369850",
    "end": "1375610"
  },
  {
    "text": "information from brontë yield writing continuations are are able to pass",
    "start": "1375610",
    "end": "1381490"
  },
  {
    "text": "information from run to yield on top of this is actually very easy but one of the reasons we've done this way is that",
    "start": "1381490",
    "end": "1387580"
  },
  {
    "text": "normally continuations yield cooperatively your voluntary excuse me",
    "start": "1387580",
    "end": "1397500"
  },
  {
    "text": "but because they return type is void we can because every time zombies void we",
    "start": "1400470",
    "end": "1411340"
  },
  {
    "text": "can if a continuation gets into mmm and if a loop we can ask it to preempt",
    "start": "1411340",
    "end": "1417070"
  },
  {
    "text": "itself and forcibly remove it from the cpu I don't this being Java and we like",
    "start": "1417070",
    "end": "1424120"
  },
  {
    "text": "monitoring and I said it can stack as part of the continuation we also have some methods to inspect the continuation",
    "start": "1424120",
    "end": "1430810"
  },
  {
    "text": "stack so this course implements one-shot",
    "start": "1430810",
    "end": "1438280"
  },
  {
    "text": "multi prompt delimited continuations but we could decide to add the ability to",
    "start": "1438280",
    "end": "1443770"
  },
  {
    "text": "clone them and if we clone a continuation we can capture its eight and time and then we run it and we get",
    "start": "1443770",
    "end": "1452800"
  },
  {
    "text": "something that's called reentrant or multi-shot continuations and this is how simple it is to implement those on top of these one-shot",
    "start": "1452800",
    "end": "1459760"
  },
  {
    "text": "continuations we just clone the continuation every time we run it and return a new copy and you can do some",
    "start": "1459760",
    "end": "1466300"
  },
  {
    "text": "crazy stuff with this you could right programs actually go back in time",
    "start": "1466300",
    "end": "1471700"
  },
  {
    "text": "and most people have no need for and I'm not sure well actually going to implement that but we could another more",
    "start": "1471700",
    "end": "1479050"
  },
  {
    "text": "interesting thing we can do we can make those continuations serializable and this means you can write a piece of",
    "start": "1479050",
    "end": "1484990"
  },
  {
    "text": "computation which blocks say you are reading something from the database and",
    "start": "1484990",
    "end": "1490990"
  },
  {
    "text": "you waiting for a response and while you're waiting you're actually not just going to be suspended off the CPU but",
    "start": "1490990",
    "end": "1496330"
  },
  {
    "text": "entirely off the machine and when you return and get the results from database you could be in a different machine altogether perhaps closer to where the",
    "start": "1496330",
    "end": "1503170"
  },
  {
    "text": "data is and this would make access to data faster so these are continuations",
    "start": "1503170",
    "end": "1510040"
  },
  {
    "text": "and i mentioned before that they are a",
    "start": "1510040",
    "end": "1516010"
  },
  {
    "text": "low-level construct and what we want to build on top of them is rebuild threads",
    "start": "1516010",
    "end": "1521380"
  },
  {
    "text": "and threads are just continuations and the scheduler we already have very good schedulers in the JDK the form of thread",
    "start": "1521380",
    "end": "1529450"
  },
  {
    "text": "pools like for join pool and we combined them to implement threads in the JDK in",
    "start": "1529450",
    "end": "1535750"
  },
  {
    "text": "user mode not going to the kernel and those are called fibers so it remind you",
    "start": "1535750",
    "end": "1542170"
  },
  {
    "text": "why do we want to do that today people writing applications have either the",
    "start": "1542170",
    "end": "1547660"
  },
  {
    "text": "option of writing simple synchronous blocking code but they're relying on the",
    "start": "1547660",
    "end": "1552790"
  },
  {
    "text": "kernel to provide them with threads and the kernel can only handle so many threads so the application is going to",
    "start": "1552790",
    "end": "1559660"
  },
  {
    "text": "be very clear and easy to maintain in debug but it's going to be not scalable",
    "start": "1559660",
    "end": "1565090"
  },
  {
    "text": "the other option is to write asynchronous code is kinda showed you which is much more complex and very hard",
    "start": "1565090",
    "end": "1571120"
  },
  {
    "text": "to port existing code to but least it's scalable so with fibers if we can indeed make",
    "start": "1571120",
    "end": "1577030"
  },
  {
    "text": "them much more lightweight than the threats provided by the kernel we solve",
    "start": "1577030",
    "end": "1582040"
  },
  {
    "text": "the problem you can have as many of these user mode lightweight threads as you like and you can block blocking",
    "start": "1582040",
    "end": "1588370"
  },
  {
    "text": "becomes essentially free we can say that it codes like sync but works like a sink",
    "start": "1588370",
    "end": "1593920"
  },
  {
    "text": "in the sense that your code looks locking but from the perspective the operating system no kernel thread is",
    "start": "1593920",
    "end": "1600070"
  },
  {
    "text": "actually blocked and all the i/o behind the scenes is ace even though geocode everything seems",
    "start": "1600070",
    "end": "1606160"
  },
  {
    "text": "synchronous and this makes writing concurrent applications easier because",
    "start": "1606160",
    "end": "1613230"
  },
  {
    "text": "it helps you match the your domains unit of concurrency say they user the session",
    "start": "1613230",
    "end": "1619120"
  },
  {
    "text": "or the income requires two outgoing requests to match it directly to the software unit of concurrency which is",
    "start": "1619120",
    "end": "1624850"
  },
  {
    "text": "the threat or in this case the fight of the the lightwei thread and this is something you can't do with heavyweight",
    "start": "1624850",
    "end": "1629860"
  },
  {
    "text": "kernel threads because you may have a hundred thousand concurrent requests but",
    "start": "1629860",
    "end": "1635919"
  },
  {
    "text": "you can't have a hundred thousand current concurrent a hundred thousand",
    "start": "1635919",
    "end": "1640929"
  },
  {
    "text": "concurrent users but you can't have a hundred thousand current thread but with five as you can so this already makes",
    "start": "1640929",
    "end": "1647860"
  },
  {
    "text": "writing code easier now that we have the scheduler and we have the continuations",
    "start": "1647860",
    "end": "1653740"
  },
  {
    "text": "we have fibers but now we have to find all the places in the JDK that potentially block and teach them about",
    "start": "1653740",
    "end": "1660100"
  },
  {
    "text": "this new mechanism so what kind of things box so of course we talked about IO so we've gone into all the places in",
    "start": "1660100",
    "end": "1666970"
  },
  {
    "text": "the JDK that do IO and taught them about fibers the other case we can block is with the",
    "start": "1666970",
    "end": "1672520"
  },
  {
    "text": "synchronization constructs like locks or blocking queues channels whatever those are all classes in Java took a current",
    "start": "1672520",
    "end": "1679150"
  },
  {
    "text": "and we've done the same there just to see an example of how so all of the",
    "start": "1679150",
    "end": "1685620"
  },
  {
    "text": "classes in Java took concurrence that block traditionally just called unsafe",
    "start": "1685620",
    "end": "1692110"
  },
  {
    "text": "so oh when they want to block will unblock a different thread they all go",
    "start": "1692110",
    "end": "1697510"
  },
  {
    "text": "through this class called lock support and what lock support used to do is just called unsafe type Park unsafe that Park",
    "start": "1697510",
    "end": "1703120"
  },
  {
    "text": "is a call to Z to the kernel please mark this current thread and if you want to unblock a different thread you call",
    "start": "1703120",
    "end": "1710350"
  },
  {
    "text": "unsafe to unpark and then ask the colonel to unblock that thread with",
    "start": "1710350",
    "end": "1716440"
  },
  {
    "text": "fibers we have an option so first we ask to see if we are existing old",
    "start": "1716440",
    "end": "1721510"
  },
  {
    "text": "heavyweight threads and if we are we do it the old way but if the current",
    "start": "1721510",
    "end": "1726990"
  },
  {
    "text": "abstract thread we're running on which you called two strands so a strand is either a 500 or a heavyweight thread if",
    "start": "1726990",
    "end": "1733720"
  },
  {
    "text": "we want to Park parking is just yielding the fibers continuation so every fiber",
    "start": "1733720",
    "end": "1739240"
  },
  {
    "text": "has a continuation if we want to unpark all we have to do is to find that fiber",
    "start": "1739240",
    "end": "1746740"
  },
  {
    "text": "scheduler and that fibers continuation and submit the fibers continuation to the fibers scheduler and that that",
    "start": "1746740",
    "end": "1754480"
  },
  {
    "text": "continuation just appears to be an ordinary run upon the order an ordinary task for that scheduler and the next",
    "start": "1754480",
    "end": "1760570"
  },
  {
    "text": "time that schedule is just going to run that task in effect it's going to continue your code from where it last",
    "start": "1760570",
    "end": "1766570"
  },
  {
    "text": "left off and if you love async await so much this would be the entire",
    "start": "1766570",
    "end": "1772030"
  },
  {
    "start": "1768000",
    "end": "1854000"
  },
  {
    "text": "implemented of async await on top of this so this is strictly stronger than async await but of course all this would",
    "start": "1772030",
    "end": "1780160"
  },
  {
    "text": "be worthwhile only for you to do better on the operating system we need to do better on two counts if we want to",
    "start": "1780160",
    "end": "1786730"
  },
  {
    "text": "support that many lightwei threats that many fibers so on the left hand we have",
    "start": "1786730",
    "end": "1791950"
  },
  {
    "text": "some date of our old heavyweight threads in the JDK they each have about to kill",
    "start": "1791950",
    "end": "1797350"
  },
  {
    "text": "bite of metadata plus by default one megabyte a stack when it comes to fibers",
    "start": "1797350",
    "end": "1802720"
  },
  {
    "text": "they currently have in the prototype to currently have only two to three hundred bytes of metadata and the stack has",
    "start": "1802720",
    "end": "1809020"
  },
  {
    "text": "pasted ago it can grow and shrink however much you use when it comes to task switching costs for heavy white",
    "start": "1809020",
    "end": "1815950"
  },
  {
    "text": "threads managed by the kernel the time to switch tasks between one and ten microseconds",
    "start": "1815950",
    "end": "1821290"
  },
  {
    "text": "the fibers we don't know how much that is and that performance is something we're still very much working on but we",
    "start": "1821290",
    "end": "1828850"
  },
  {
    "text": "expect it to be much lower than that okay so threads fibers are just a user",
    "start": "1828850",
    "end": "1835000"
  },
  {
    "text": "user mode implementation of threads so we thought we could use the same thread",
    "start": "1835000",
    "end": "1841059"
  },
  {
    "text": "api maybe with a new constructor flag saying whether when you create you a new",
    "start": "1841059",
    "end": "1846490"
  },
  {
    "text": "thread in java whether you want it to be managed by the kernel or by the jdk",
    "start": "1846490",
    "end": "1853690"
  },
  {
    "text": "but in Java we try to think Adama is already big it's been around for over",
    "start": "1853690",
    "end": "1859960"
  },
  {
    "start": "1854000",
    "end": "2263000"
  },
  {
    "text": "two decades and it will probably be big in two decades hence so when we touch",
    "start": "1859960",
    "end": "1868090"
  },
  {
    "text": "concurrency in Java threading in jar there's an opportunity to rethink things so the Java architect said yeah maybe",
    "start": "1868090",
    "end": "1875740"
  },
  {
    "text": "we'll use the same thread API but let's not assume that that's what we're going",
    "start": "1875740",
    "end": "1881049"
  },
  {
    "text": "to do trying to think that if there was no back to thread it's no existing API",
    "start": "1881049",
    "end": "1886330"
  },
  {
    "text": "how would you design them and at first I thought there's not much to do I mean after all what kind of operation you",
    "start": "1886330",
    "end": "1891340"
  },
  {
    "text": "want from a threat you want to start it you want to wait for it to join it maybe you want to ask you to interrupt whatever it is that it's doing but",
    "start": "1891340",
    "end": "1898870"
  },
  {
    "text": "shortly after we had this conversation with the architect I read a very",
    "start": "1898870",
    "end": "1905230"
  },
  {
    "text": "interesting blog post by Nathaniel J Smith about something called structure concurrency now he credits the idea to",
    "start": "1905230",
    "end": "1913090"
  },
  {
    "text": "Martin sauce Drake and this was one of the rare occasions when you read a blog",
    "start": "1913090",
    "end": "1919270"
  },
  {
    "text": "post and you say that is absolutely right that is a way to do things so what",
    "start": "1919270",
    "end": "1925780"
  },
  {
    "text": "is the the the main idea of structure concurrency the central the the the the central trick there is that instead of",
    "start": "1925780",
    "end": "1933549"
  },
  {
    "text": "creating threads in a way that's like firing for yet so you create a thread and that thread runs for as long as it",
    "start": "1933549",
    "end": "1941320"
  },
  {
    "text": "wants and you have no control over it threads are confined to a well-known",
    "start": "1941320",
    "end": "1946630"
  },
  {
    "text": "lifetime that extends to a given code block and I'll show you an example so in",
    "start": "1946630",
    "end": "1955410"
  },
  {
    "text": "the current prototype plaque up there to name it just call it 5's cope the name will probably change so we have this",
    "start": "1955410",
    "end": "1961809"
  },
  {
    "text": "block that defines a finderscope and all the fibers that are created",
    "start": "1961809",
    "end": "1966820"
  },
  {
    "text": "inside this scope are guaranteed to be terminated by the time we exit the scope",
    "start": "1966820",
    "end": "1972780"
  },
  {
    "text": "so how does that work when we try to exit that scope in Java it's trying resources that's gonna be that's gonna",
    "start": "1972780",
    "end": "1978610"
  },
  {
    "text": "was about to be called the close method on finder scope and that's going to block until all the fibers that were",
    "start": "1978610",
    "end": "1984640"
  },
  {
    "text": "created inside the block have terminated and this gives us some nice advantages",
    "start": "1984640",
    "end": "1993250"
  },
  {
    "text": "for example when you create a thread you just forget about it there could be exceptions thrown by that thread and no",
    "start": "1993250",
    "end": "1999460"
  },
  {
    "text": "one is ever going to handle this way because you know that the thread is going to be and died before the end of the book you",
    "start": "1999460",
    "end": "2007260"
  },
  {
    "text": "can catch its exceptions and handle it and you can create a great many number",
    "start": "2007260",
    "end": "2012840"
  },
  {
    "text": "of fibers and you can even nest these scopes to create a tree of fibers and",
    "start": "2012840",
    "end": "2019190"
  },
  {
    "text": "you can cancel all of them by just canceling the scope so some nice stuff",
    "start": "2019190",
    "end": "2025770"
  },
  {
    "text": "you can do with it you can write a method that gets an array of tasks and",
    "start": "2025770",
    "end": "2031890"
  },
  {
    "text": "want to start them all in parallel but all you wait for the it's like a race",
    "start": "2031890",
    "end": "2037530"
  },
  {
    "text": "they only want to wait for the first time that finishes so finally scopes give us termination keys and for each of the tasks we spawn",
    "start": "2037530",
    "end": "2045720"
  },
  {
    "text": "a new fiber again that's essentially free it's just like creating an object in Java and we assign them that to the",
    "start": "2045720",
    "end": "2052230"
  },
  {
    "text": "termination queue and then we block on that queue mhm and we take the first the",
    "start": "2052230",
    "end": "2057929"
  },
  {
    "text": "result of the first fiber that has terminated and because we cannot leave",
    "start": "2057930",
    "end": "2063629"
  },
  {
    "text": "the scope until all the others have terminated what as soon as we have a result then the finally block we cancel",
    "start": "2063630",
    "end": "2069540"
  },
  {
    "text": "all the remaining fibers and then we can leave the scope we can do the exact same",
    "start": "2069540",
    "end": "2075330"
  },
  {
    "text": "thing but just changing a little bit instead of saying that the fibers field is cancelable we can give it a deadline",
    "start": "2075330",
    "end": "2080970"
  },
  {
    "text": "and say that we are only willing to wait up until that deadline for any of the",
    "start": "2080970",
    "end": "2087720"
  },
  {
    "text": "threads so if one of the threads finishes by that deadline then we're good if not then the farm scope is going to",
    "start": "2087720",
    "end": "2094560"
  },
  {
    "text": "automatically cancel all them and this allows us writing interesting things in",
    "start": "2094560",
    "end": "2101100"
  },
  {
    "text": "a very nice way finally there are so the by far the biggest use case that we currently",
    "start": "2101100",
    "end": "2107880"
  },
  {
    "text": "envisioned for continuations off of fibers we expect people to use fibers not continuations directly but there are",
    "start": "2107880",
    "end": "2114630"
  },
  {
    "text": "other things that you can deal with continuations not as useful perhaps as fibers but interesting nonetheless one",
    "start": "2114630",
    "end": "2122580"
  },
  {
    "text": "of them is generators and you may be familiar with them from Python this is",
    "start": "2122580",
    "end": "2129570"
  },
  {
    "text": "how you implement generator there's a bug here but generally this is how you'd implement generators are using",
    "start": "2129570",
    "end": "2135750"
  },
  {
    "text": "attenuation just to show you how easy it is and what this gives us is",
    "start": "2135750",
    "end": "2140800"
  },
  {
    "text": "appalling we want to imagine that we have an infinite array whenever an old",
    "start": "2140800",
    "end": "2148040"
  },
  {
    "text": "infinite collection of the Fibonacci sequence and we want to enter it iterate over it until we get to so I'm look at",
    "start": "2148040",
    "end": "2153440"
  },
  {
    "text": "the bottom until we get to a number that's greater than 10,000 you can use streams for that but in this way we get",
    "start": "2153440",
    "end": "2161869"
  },
  {
    "text": "an iterable something that looks like a collection but notice how we generate it we generate it in an imperative way so",
    "start": "2161869",
    "end": "2169609"
  },
  {
    "text": "first we yield zero and we go back so once we yield you go back to the caller",
    "start": "2169609",
    "end": "2174650"
  },
  {
    "text": "and that's zero is going to get into num then we start an infinite loop and we",
    "start": "2174650",
    "end": "2182180"
  },
  {
    "text": "keep healing numbers one after another and every time we old a number we leave that piece of code we go back and we can",
    "start": "2182180",
    "end": "2188089"
  },
  {
    "text": "write iterators in a very nice way the",
    "start": "2188089",
    "end": "2194300"
  },
  {
    "text": "last thing I want to show you is how these continuations compose and in fact that compose much better than monads",
    "start": "2194300",
    "end": "2199869"
  },
  {
    "text": "because they can nest and they have these scopes so this example doesn't",
    "start": "2199869",
    "end": "2207109"
  },
  {
    "text": "really make sense but and taemi this time we want to generate the stream of",
    "start": "2207109",
    "end": "2213109"
  },
  {
    "text": "prime numbers combined with some user input we want to find the next prime",
    "start": "2213109",
    "end": "2219770"
  },
  {
    "text": "number and then read a line from the console and concatenate it with a number",
    "start": "2219770",
    "end": "2225470"
  },
  {
    "text": "we found and we're doing a blocking operation inside the generator now what",
    "start": "2225470",
    "end": "2231349"
  },
  {
    "text": "happens if we run it inside a fiber so right now we have two nests and continuation so we have the continuation",
    "start": "2231349",
    "end": "2237140"
  },
  {
    "text": "for the generator and every time we yield the generator it's going to go back into the for loop but every time we",
    "start": "2237140",
    "end": "2243920"
  },
  {
    "text": "go to the console and and read a line from the user that is going to suspend",
    "start": "2243920",
    "end": "2249319"
  },
  {
    "text": "the fibers continuation and a closing scope and we can in this way compose",
    "start": "2249319",
    "end": "2254329"
  },
  {
    "text": "different kinds of effects sometimes the cords know different kinds of effect in a transparent way and so this project is",
    "start": "2254329",
    "end": "2264650"
  },
  {
    "text": "still under heavy development you can find a wiki page here",
    "start": "2264650",
    "end": "2270260"
  },
  {
    "text": "you can we don't have early access binaries yet but you can build a code yourself and right now mostly interested",
    "start": "2270260",
    "end": "2277980"
  },
  {
    "text": "in input on the structure concurrency API so any help you can provide and that",
    "start": "2277980",
    "end": "2283500"
  },
  {
    "text": "would be appreciated and that is all I had so thank you any questions",
    "start": "2283500",
    "end": "2290660"
  },
  {
    "text": "[Applause]",
    "start": "2290660",
    "end": "2300349"
  },
  {
    "text": "so any questions there in fact I see",
    "start": "2305760",
    "end": "2311430"
  },
  {
    "text": "yeah thank you how does that differ or overlap we've got little co-routines",
    "start": "2320830",
    "end": "2326330"
  },
  {
    "text": "that's quite similar to me the proteins are another name okay so that nomenclature here in the world of",
    "start": "2326330",
    "end": "2333200"
  },
  {
    "text": "continuation is a problem at least in the past Courage's are sometimes a",
    "start": "2333200",
    "end": "2340250"
  },
  {
    "text": "different name for one shot delimiter continuations it's just that the name",
    "start": "2340250",
    "end": "2345349"
  },
  {
    "text": "coroutines and now is now mostly associated with usages of continuations",
    "start": "2345349",
    "end": "2351859"
  },
  {
    "text": "that have some syntactic expression something like async/await that at the syntax level you say this piece of code",
    "start": "2351859",
    "end": "2357470"
  },
  {
    "text": "is a continuation and we don't do that here any method is allowed to yield a continuation there's another different",
    "start": "2357470",
    "end": "2365660"
  },
  {
    "text": "kind of continuations symmetric and asymmetric and co-routines at a time",
    "start": "2365660",
    "end": "2371780"
  },
  {
    "text": "used to refer to symmetric continuations these are asymmetric continuations but basically different names of the same",
    "start": "2371780",
    "end": "2377480"
  },
  {
    "text": "basic idea we often see continuations",
    "start": "2377480",
    "end": "2386480"
  },
  {
    "text": "and tail calls talked about together for CVS transform and so on so there any",
    "start": "2386480",
    "end": "2392390"
  },
  {
    "text": "plans to add tail calls the wonderful missing pieces of puzzle into java right",
    "start": "2392390",
    "end": "2399950"
  },
  {
    "text": "let me just correct that anytime plans to add them within my lifetime so i know the team plans forever right so we don't",
    "start": "2399950",
    "end": "2409339"
  },
  {
    "text": "actually need tail calls to implant these continuations however actually project loon the the goal of project is",
    "start": "2409339",
    "end": "2417020"
  },
  {
    "text": "to add continuations fibers and tail call elimination so there's one of the goal of the project it's just that we",
    "start": "2417020",
    "end": "2423200"
  },
  {
    "text": "haven't started it yet and we're probably not going to start until the continuations are released so that's going to be a next step so I just don't",
    "start": "2423200",
    "end": "2430609"
  },
  {
    "text": "like talking about so people start expecting it but yeah that is one of the the goals of the project first you are",
    "start": "2430609",
    "end": "2444349"
  },
  {
    "text": "you aware of any projects in Python that would at continuations supply that has",
    "start": "2444349",
    "end": "2451460"
  },
  {
    "text": "generators which form of continuations done that I'm not that familiar Python the envisage",
    "start": "2451460",
    "end": "2461390"
  },
  {
    "text": "project lean being released one big bang in one release who are you gonna be releasing the different kind of goals in",
    "start": "2461390",
    "end": "2468110"
  },
  {
    "text": "different releases of Java that is an interesting question I've been asked if",
    "start": "2468110",
    "end": "2473990"
  },
  {
    "text": "we were willing to release continuations before we're all these fibers the answer",
    "start": "2473990",
    "end": "2479630"
  },
  {
    "text": "to that is absolutely no because the continuations are very low-level construct and once we release",
    "start": "2479630",
    "end": "2484910"
  },
  {
    "text": "continuations it can be 105 libraries built off of that and first we want",
    "start": "2484910",
    "end": "2490070"
  },
  {
    "text": "people to get used to one however it is possible that we will release fibers",
    "start": "2490070",
    "end": "2495080"
  },
  {
    "text": "before we open continuations as a public class we will likely release something",
    "start": "2495080",
    "end": "2501410"
  },
  {
    "text": "before we do tail calls for example so it would probably be multiple chunks I'm",
    "start": "2501410",
    "end": "2507500"
  },
  {
    "text": "not sure what those chunks are but basic functionality for fibers is probably",
    "start": "2507500",
    "end": "2512930"
  },
  {
    "text": "going to be in the first release",
    "start": "2512930",
    "end": "2516220"
  },
  {
    "text": "I think he was first",
    "start": "2525100",
    "end": "2528990"
  },
  {
    "text": "so you mentioned that you have use as you go memory footprint does that mean",
    "start": "2531650",
    "end": "2537750"
  },
  {
    "text": "that you have to load the executed stack just continue executing because you",
    "start": "2537750",
    "end": "2543360"
  },
  {
    "text": "can't continue calling for just like how does that work right so I can speak and",
    "start": "2543360",
    "end": "2548940"
  },
  {
    "text": "you can watch or not other talks why speak about the implementation for an hour the stack the continuation stacks",
    "start": "2548940",
    "end": "2555060"
  },
  {
    "text": "are stored in the Java heap inside to Java arrays and we do copy them back and",
    "start": "2555060",
    "end": "2561210"
  },
  {
    "text": "forth the question is how to do it fast and right now we have a solution that",
    "start": "2561210",
    "end": "2567660"
  },
  {
    "text": "allows us to copy just one frame and the rest lazily we can talk about this later",
    "start": "2567660",
    "end": "2573360"
  },
  {
    "text": "or we can watch another talk we talked about the implementation",
    "start": "2573360",
    "end": "2577309"
  },
  {
    "text": "I think introducing animations in Java opens the gif to memory leaks another",
    "start": "2578520",
    "end": "2586440"
  },
  {
    "text": "gate and I'm wondering if there are any patterns that we can stick to to avoid",
    "start": "2586440",
    "end": "2593010"
  },
  {
    "text": "memory leaks like fire our fibers one of them so I think your fancy memory leaks",
    "start": "2593010",
    "end": "2599550"
  },
  {
    "text": "in the sense that you could have a piece of code that starts executing holds on send some objects and never terminates",
    "start": "2599550",
    "end": "2605960"
  },
  {
    "text": "so we do have the problem today already with threads you can create a thread at some point either loops forever of",
    "start": "2605960",
    "end": "2612180"
  },
  {
    "text": "sleeps forever while still holding on to some stuff but this probably could be",
    "start": "2612180",
    "end": "2618510"
  },
  {
    "text": "exacerbated if you can have a million threads instead of just a thousand right",
    "start": "2618510",
    "end": "2623790"
  },
  {
    "text": "now we're not thinking again application developers are not supposed to use continuations directly it's supposed to",
    "start": "2623790",
    "end": "2629070"
  },
  {
    "text": "use fibers you have the same problem with fibers as with threads in that regard possibly more we don't have a",
    "start": "2629070",
    "end": "2636180"
  },
  {
    "text": "good solution to what happens if this problem is exacerbated but if you have any ideas of me happy to hear them but I",
    "start": "2636180",
    "end": "2644910"
  },
  {
    "text": "can say that when it comes to the garbage collector there's actually",
    "start": "2644910",
    "end": "2650070"
  },
  {
    "text": "easier for the garbage collector because if you have a thread all the all the objects there are referenced by that",
    "start": "2650070",
    "end": "2656970"
  },
  {
    "text": "thread are considered GC roots and GC roots needs to be eat reversed during stop the world",
    "start": "2656970",
    "end": "2664260"
  },
  {
    "text": "pauses and they can actually increase your pause the world time continuations are not GC roots so the GC just can't if",
    "start": "2664260",
    "end": "2671640"
  },
  {
    "text": "they don't change as long as they don't run the GC doesn't look at them so doesn't solve the memory leak problem but at least they don't introduce an",
    "start": "2671640",
    "end": "2677460"
  },
  {
    "text": "additional burden in the garbage collection we have time for one or two",
    "start": "2677460",
    "end": "2683430"
  },
  {
    "text": "more questions or none okay so thank you",
    "start": "2683430",
    "end": "2693310"
  },
  {
    "text": "[Applause]",
    "start": "2693310",
    "end": "2696929"
  }
]