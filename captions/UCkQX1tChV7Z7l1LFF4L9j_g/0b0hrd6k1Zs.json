[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11400"
  },
  {
    "text": "So Meta programming um what is meta programming um meta programming is kind",
    "start": "11400",
    "end": "18000"
  },
  {
    "text": "of a little hard to Define but what is it what it is it's pretty much writing programs that are capable of writing or",
    "start": "18000",
    "end": "23640"
  },
  {
    "text": "manipulating other programs based on some kind of metadata so we have metadata out there and we have a program",
    "start": "23640",
    "end": "30320"
  },
  {
    "text": "that goes pretty much reads it processes it and does something with it changes itself or produces something else based",
    "start": "30320",
    "end": "37640"
  },
  {
    "text": "on that on the predefined metadata um it is not um generative or automatic",
    "start": "37640",
    "end": "44719"
  },
  {
    "start": "40000",
    "end": "40000"
  },
  {
    "text": "programming it is not it can be but is not all the time uh it is supported by a lot of languages and platforms it's",
    "start": "44719",
    "end": "51640"
  },
  {
    "text": "something that is a um under underused something that is not",
    "start": "51640",
    "end": "57120"
  },
  {
    "text": "well understood it kind of somehow of like um a a black art so unless you are",
    "start": "57120",
    "end": "63400"
  },
  {
    "text": "somebody um who's writing Frameworks or doing that kind of work you're not",
    "start": "63400",
    "end": "68759"
  },
  {
    "text": "really going to feel the need to do any serious meta programming you um know as",
    "start": "68759",
    "end": "74799"
  },
  {
    "text": "much let me put it this way next slide so certain concept that we're we pretty",
    "start": "74799",
    "end": "80119"
  },
  {
    "start": "77000",
    "end": "77000"
  },
  {
    "text": "much going to go over right now before is the concept of the meta language which is simply the language in which",
    "start": "80119",
    "end": "86079"
  },
  {
    "text": "the meta program is written in so the language that goes and processes the met data and then does something with it",
    "start": "86079",
    "end": "91640"
  },
  {
    "text": "that's the meta language the object language is whatever pretty much comes out on the other side so we say that we",
    "start": "91640",
    "end": "98520"
  },
  {
    "text": "have reflexivity or reflection when the meta language and the object language are the same when Java reads XML",
    "start": "98520",
    "end": "105719"
  },
  {
    "text": "produces Java based on that particular um uh particular XML or when Java pretty",
    "start": "105719",
    "end": "110920"
  },
  {
    "text": "much goes and reads any other M format or like any other form of metadata and",
    "start": "110920",
    "end": "116079"
  },
  {
    "text": "does something with it we say that that's pretty much like reflection when the Lang language actually looks at",
    "start": "116079",
    "end": "121479"
  },
  {
    "text": "itself um next slide please So Meta programming takes multiple forms in the",
    "start": "121479",
    "end": "128360"
  },
  {
    "start": "124000",
    "end": "124000"
  },
  {
    "text": "wild it could be as simple as exposing the internal of of the runtime or the compiler as an API if you",
    "start": "128360",
    "end": "136080"
  },
  {
    "text": "have a language that pretty much gives you the capability to ask the runtime questions like what type is this class",
    "start": "136080",
    "end": "143680"
  },
  {
    "text": "um you know ask get information about the signatures of a method of a class for example um that is a form of meta",
    "start": "143680",
    "end": "150760"
  },
  {
    "text": "programming or a language that allows you to actually control the compiler from within the language itself um or it",
    "start": "150760",
    "end": "157599"
  },
  {
    "text": "could be something like a language that would allow you to dynamically execute Expressions containing uh code so um and",
    "start": "157599",
    "end": "166480"
  },
  {
    "text": "it could be just strings and Java or like python you give it a python",
    "start": "166480",
    "end": "172560"
  },
  {
    "text": "expression and it pretty much executes it to an extent or um it does not have",
    "start": "172560",
    "end": "177959"
  },
  {
    "text": "to be strings it could be as well as ser of method calls and it could be something as sophisticated as a program",
    "start": "177959",
    "end": "184120"
  },
  {
    "text": "transformation system uh meaning that there's a description right there that gets transformed to a target language uh",
    "start": "184120",
    "end": "191480"
  },
  {
    "text": "the compiler itself pretty much does that you give it the Java source code and it translates and then compiles it",
    "start": "191480",
    "end": "198120"
  },
  {
    "text": "into uh this bite code or even binary you know in certain um for other like",
    "start": "198120",
    "end": "203440"
  },
  {
    "text": "languages that don't have an Intermediate Language Yak takes grammar and produces C++ of C of C code con",
    "start": "203440",
    "end": "209879"
  },
  {
    "text": "chain in the y y Parts function and antler um great project by the way uh",
    "start": "209879",
    "end": "216799"
  },
  {
    "start": "216000",
    "end": "216000"
  },
  {
    "text": "usage in code why would we use um meta programming these are a couple of",
    "start": "216799",
    "end": "223280"
  },
  {
    "text": "examples there is certainly a lot more but when you have a lot of static data that can be pretty much pre-computed or",
    "start": "223280",
    "end": "228680"
  },
  {
    "text": "pregenerated at compile time um um let's assume that um depending on your",
    "start": "228680",
    "end": "234560"
  },
  {
    "text": "environment you have to create these huge pretty much lookup tables you could either wait until the program pretty",
    "start": "234560",
    "end": "241239"
  },
  {
    "text": "much starts and take a performance hit and do those computations over there or you could pre-o that before um you know",
    "start": "241239",
    "end": "247519"
  },
  {
    "text": "right code that would interact pretty much with the compiler or like ask the one time itself about certain information then have that data pretty",
    "start": "247519",
    "end": "253840"
  },
  {
    "text": "much prepared for your application before it starts or it could be uh and this is",
    "start": "253840",
    "end": "259120"
  },
  {
    "text": "probably the most useful features to eliminate boiler plate code that cannot be abstracted in functions for dryness",
    "start": "259120",
    "end": "265840"
  },
  {
    "text": "sake um sometimes we have a lot of code that is scattered all all over the place that we couldn't simply just go and",
    "start": "265840",
    "end": "271960"
  },
  {
    "text": "modularize it and put it in like a function or like a static or like a utility and be able to pretty much like",
    "start": "271960",
    "end": "277199"
  },
  {
    "text": "call it you just can't do that it's all over the place uh as an example aspects in in aop that deal with a cross cutting",
    "start": "277199",
    "end": "284639"
  },
  {
    "text": "concerns and stuff and we we pretty we're going to go over that in a little bit the concept of stereotypes in Spring",
    "start": "284639",
    "end": "292680"
  },
  {
    "text": "uh for those of you who are familiar with with the spring framework you could simply just pretty much go and annotate",
    "start": "292680",
    "end": "298360"
  },
  {
    "text": "a particular um class as controller and it would magically acquire controller",
    "start": "298360",
    "end": "304400"
  },
  {
    "text": "behavior and know how to pretty much deal with um you know HTTP and pretty",
    "start": "304400",
    "end": "309880"
  },
  {
    "text": "much become a seret a simple pojo becoming a seret and this is um because",
    "start": "309880",
    "end": "315440"
  },
  {
    "text": "of the techniques of meta programming um instead of actually forcing the user to do all that kind of work next one so the",
    "start": "315440",
    "end": "323319"
  },
  {
    "text": "benefits in code of course you get like pretty much a performance gain if you do a lot of things like compile time versus",
    "start": "323319",
    "end": "328880"
  },
  {
    "text": "like wait until the one time of the application gives you great flexibility and in terms of development time it",
    "start": "328880",
    "end": "334960"
  },
  {
    "text": "minimizes the lines of cure Express solution a lot um and I'm going to go back to the spring example I mentioned",
    "start": "334960",
    "end": "342080"
  },
  {
    "text": "before um productivity gain and it reduces the development time and efficiency all these things are kind of",
    "start": "342080",
    "end": "349199"
  },
  {
    "text": "the same thing in a way they're all interrelated um so to go back to the",
    "start": "349199",
    "end": "354520"
  },
  {
    "start": "353000",
    "end": "353000"
  },
  {
    "text": "model driven engineering that we mentioned before model engineering is um is is or like the philosophy is it is",
    "start": "354520",
    "end": "361639"
  },
  {
    "text": "pretty much that there there are a lot of artifacts that are good candidate for allo Generations we all build",
    "start": "361639",
    "end": "367360"
  },
  {
    "text": "applications we all end up dealing with the exact same abstractions um in when",
    "start": "367360",
    "end": "372599"
  },
  {
    "text": "when we deal with the non-functional requirement anyways um you know you have security and you have login and um the",
    "start": "372599",
    "end": "380440"
  },
  {
    "text": "way the architecture of most Enterprise applications does not really changed most of them are pretty much intered and",
    "start": "380440",
    "end": "385960"
  },
  {
    "text": "uh we end up with all of these abstractions and we end up rediscovering pretty much the best approach over and",
    "start": "385960",
    "end": "391000"
  },
  {
    "text": "over again uh what mde says is we should rely on code generation rely on pretty",
    "start": "391000",
    "end": "397000"
  },
  {
    "text": "much scaffolding as much as possible and pretty much have the developer focus on the domain itself you create your domain",
    "start": "397000",
    "end": "404479"
  },
  {
    "text": "model and you hit you type a few commands and a lot of stuff gets pretty",
    "start": "404479",
    "end": "409759"
  },
  {
    "text": "much generated for you or like all that uh boiler plate or the entire even",
    "start": "409759",
    "end": "415039"
  },
  {
    "text": "structure of the application would get generated for you based on that think um um GNA Ruby on Rails as well spring r on",
    "start": "415039",
    "end": "422960"
  },
  {
    "text": "the Java space as well so now the we've talked about what",
    "start": "422960",
    "end": "428879"
  },
  {
    "text": "metadata is we've talked about to an extent what meta programming is let's talk about meta programming in Java um",
    "start": "428879",
    "end": "436360"
  },
  {
    "start": "434000",
    "end": "434000"
  },
  {
    "text": "the first thing I would like to talk about is Java annotations and I'm assuming a lot of you guys are familiar with it it's been around since Java 1.5",
    "start": "436360",
    "end": "444160"
  },
  {
    "text": "um and it's defined by the jsr 175 so before what we used to do is",
    "start": "444160",
    "end": "450360"
  },
  {
    "text": "pretty much would go and add the metadata um as a part of java do in the common so like as an external XML or",
    "start": "450360",
    "end": "457400"
  },
  {
    "text": "using pretty much X doets and we built all these tools around it that would go to the commons look for specific tokens",
    "start": "457400",
    "end": "463160"
  },
  {
    "text": "and pretty much extract that information um what jsr 175 introduced is these",
    "start": "463160",
    "end": "469360"
  },
  {
    "start": "468000",
    "end": "468000"
  },
  {
    "text": "annotations that are uh more readable uh closer to the code uh they statically",
    "start": "469360",
    "end": "474720"
  },
  {
    "text": "typed which is uh which is which is very nice mean if if you're if you're a Java",
    "start": "474720",
    "end": "479879"
  },
  {
    "text": "person and can be prettyy much retained until runtime because if you have stuff in Commons and then you compile your",
    "start": "479879",
    "end": "486000"
  },
  {
    "text": "class the commons are pretty much thrown away after the code is compiled and they're not available for you in one",
    "start": "486000",
    "end": "491759"
  },
  {
    "text": "time so annotations are um so um a lot of them the jsr 175 defin some um um",
    "start": "491759",
    "end": "499960"
  },
  {
    "text": "annotations that are a part of the jdk itself like over R and deprecate and suppressed warning if you're user of",
    "start": "499960",
    "end": "505919"
  },
  {
    "text": "eclipse or any other ID they'll pretty much like do that for you and or like um put like a little warning for you for",
    "start": "505919",
    "end": "512560"
  },
  {
    "text": "those to be added uh the jsr 250 common annotations for the Java platforms defines a",
    "start": "512560",
    "end": "520240"
  },
  {
    "text": "um a good set of them uh post construct as an example at resource and Deni all",
    "start": "520240",
    "end": "525959"
  },
  {
    "text": "some of them um like for are used for security post Constructor more of a life",
    "start": "525959",
    "end": "532399"
  },
  {
    "text": "um life management of the actual of the of the poos of beans next so um",
    "start": "532399",
    "end": "540240"
  },
  {
    "start": "537000",
    "end": "537000"
  },
  {
    "text": "the good when if you really want to take advantage of meta programming is want to start your WR when you start writing",
    "start": "540240",
    "end": "545320"
  },
  {
    "text": "your own annotations um not very many very many people pretty much like do",
    "start": "545320",
    "end": "550480"
  },
  {
    "text": "that but um and before we do that I'm going to show you some code I would like to go over certain annotations with you",
    "start": "550480",
    "end": "557680"
  },
  {
    "text": "that will um pretty much um give you an idea of um of what of what we're talking",
    "start": "557680",
    "end": "563800"
  },
  {
    "text": "about so when we use the the at Target um that pretty much um tells the jdk or",
    "start": "563800",
    "end": "570800"
  },
  {
    "text": "tells pretty much Java that this particular annotation is pretty much used to annotate either a field or a",
    "start": "570800",
    "end": "577320"
  },
  {
    "text": "method or a package or a parameter whever it is so it's just an indication tells them this annotation can only be",
    "start": "577320",
    "end": "582839"
  },
  {
    "text": "used for this particular type next one and add retention this is pretty much",
    "start": "582839",
    "end": "588519"
  },
  {
    "text": "the retention that we talked about there are three different level levels of retentions of the actual anation itself",
    "start": "588519",
    "end": "594320"
  },
  {
    "text": "this is something could be retained at the source level that means when the code is compiled it's gone so be an",
    "start": "594320",
    "end": "599680"
  },
  {
    "text": "equivalent to pretty much commment uh or class something that is included in the class file but the jvm doesn't really",
    "start": "599680",
    "end": "605920"
  },
  {
    "text": "care about it um or like at runtime something that stays um and that",
    "start": "605920",
    "end": "611360"
  },
  {
    "text": "information is pretty much kept why the code is live and running um at documented whether you want your",
    "start": "611360",
    "end": "616800"
  },
  {
    "text": "annotation to pretty much show up in Java code in Java doc or not and lastly inherited whether you want that",
    "start": "616800",
    "end": "623240"
  },
  {
    "text": "particular annotation to be passed down the inheritance hierarchy um the last thing I'm going to",
    "start": "623240",
    "end": "629680"
  },
  {
    "text": "talk about and everything's going to make sense when I show you the code in a little bit is the concept of attributes",
    "start": "629680",
    "end": "635519"
  },
  {
    "text": "these annotations have attributes mean and if you just annotate something at ID",
    "start": "635519",
    "end": "641200"
  },
  {
    "text": "that's probably sufficient but if you annotate something at table you might want to be able to add extra information",
    "start": "641200",
    "end": "648000"
  },
  {
    "text": "add extra attribute like the name of the table and um and and and such um so",
    "start": "648000",
    "end": "654560"
  },
  {
    "text": "there are certain restrictions around the values of attributes like um that they can only be Primitives in Java only",
    "start": "654560",
    "end": "661079"
  },
  {
    "text": "they can only be strings they can only be enums and they can only be onedimensional arays of the above I",
    "start": "661079",
    "end": "666680"
  },
  {
    "text": "think they allow class as well um and they may have default values and the modifiers are not allowed next slide",
    "start": "666680",
    "end": "674440"
  },
  {
    "text": "so this is a piece of code can you guys see it okay so this is pretty much an",
    "start": "674440",
    "end": "680240"
  },
  {
    "text": "annotation um that's called called pretty much at code review uh what we want to do is pretty much want to Allah",
    "start": "680240",
    "end": "686839"
  },
  {
    "text": "want to build this tool that pretty much goes and scans our entire source code and detects um and be able to tell us",
    "start": "686839",
    "end": "694120"
  },
  {
    "text": "with all the methods or all the classes within our source code was reviewed went went under review or did go under a",
    "start": "694120",
    "end": "701720"
  },
  {
    "text": "review or not um so we allow people to pretty much annotate their classes at code reviews and specify a list of",
    "start": "701720",
    "end": "708200"
  },
  {
    "text": "authors and specify pretty much a creation date um and we just leave that",
    "start": "708200",
    "end": "713440"
  },
  {
    "text": "so the way this uh annotation is pretty much created is the second piece of the code right there we use public at",
    "start": "713440",
    "end": "719560"
  },
  {
    "text": "interface instead of public at class we call it code review and then we go and we Define a set of attributes notice",
    "start": "719560",
    "end": "727160"
  },
  {
    "text": "that the attribute authors is pretty much a um an array of strings the creation date is a string and it has a",
    "start": "727160",
    "end": "733680"
  },
  {
    "text": "default as a string might want to ask me you know why is it a string is because date and objects regular objects are not",
    "start": "733680",
    "end": "740519"
  },
  {
    "text": "allowed to be attributes for annotations in Java so we just put it as a string um",
    "start": "740519",
    "end": "746399"
  },
  {
    "text": "right there um the int version the default version is one and a status which is pretty much the status of the",
    "start": "746399",
    "end": "752120"
  },
  {
    "text": "review itself whether it was it has been reviewed or not that's just pretty much a value of an enum um so um yeah notice",
    "start": "752120",
    "end": "760560"
  },
  {
    "text": "that if you don't provide a default on the Java annotation the compiler would actually force you to provide a value so",
    "start": "760560",
    "end": "768440"
  },
  {
    "text": "I only provided a list of authors and the pre in the creation date um I would be just fine without with pretty much",
    "start": "768440",
    "end": "775279"
  },
  {
    "text": "just creating the list of the authors and everything would get a default Java is not going to complain but you have",
    "start": "775279",
    "end": "780680"
  },
  {
    "text": "also the option of pretty much overriding the default value next so MK uh you can also in Java",
    "start": "780680",
    "end": "788199"
  },
  {
    "text": "you can also annotate packages but to annotate packages in Java what you have to do is pretty much",
    "start": "788199",
    "end": "794279"
  },
  {
    "text": "uh create um a file called packageinfo Java inside the package itself and in",
    "start": "794279",
    "end": "802000"
  },
  {
    "text": "there you provide pretty much like a list of annotation annotations of that particular package uh one thing is we",
    "start": "802000",
    "end": "807839"
  },
  {
    "text": "have the habit every time we want to create a Java file of pretty much just going and creating a class and passing",
    "start": "807839",
    "end": "813720"
  },
  {
    "text": "package dot dhino that's not going to work because this is not an actual U",
    "start": "813720",
    "end": "820040"
  },
  {
    "text": "valid um um name valid name for a class in Java so make sure you create as a",
    "start": "820040",
    "end": "825160"
  },
  {
    "text": "file. Java next So Meta programming in Java meta",
    "start": "825160",
    "end": "831120"
  },
  {
    "text": "annotation processing going to go over the different apis that would allow you pretty much to do that and um this um",
    "start": "831120",
    "end": "838040"
  },
  {
    "text": "might be like a little boring for some of you maybe a little bit more interesting but the next section would",
    "start": "838040",
    "end": "843360"
  },
  {
    "text": "be uh would be um would be better um after we have this um after we",
    "start": "843360",
    "end": "848440"
  },
  {
    "text": "constructed this meta model we we pretty much created all these like uh annotations what to do with them so at",
    "start": "848440",
    "end": "855079"
  },
  {
    "text": "run time when your code is pretty much running assuming that the annotations",
    "start": "855079",
    "end": "861199"
  },
  {
    "text": "that you created to be processed have a retention a onetime retention we use",
    "start": "861199",
    "end": "866600"
  },
  {
    "text": "pretty much simply jsr 175 which is a reflection what reflection is is pretty",
    "start": "866600",
    "end": "871800"
  },
  {
    "text": "much reading the annotations um needing the annotations this is pretty much like done in reference to the structure of",
    "start": "871800",
    "end": "877920"
  },
  {
    "text": "the program so what you do is you ask the question this particular class or the class named a certain way or this",
    "start": "877920",
    "end": "884079"
  },
  {
    "text": "particular field of a class give me all the annotations that are pretty much associated with it so this is done in",
    "start": "884079",
    "end": "889720"
  },
  {
    "text": "reference to the structure of the code itself uh JSI 175 pretty much defined the reflection API for this um there's a",
    "start": "889720",
    "end": "897560"
  },
  {
    "start": "897000",
    "end": "897000"
  },
  {
    "text": "lot of work there redundant and tedious if you want to make your life easier you can pretty much pick up the reflections",
    "start": "897560",
    "end": "902880"
  },
  {
    "text": "Library which is a great library and then um a lot of that work is pretty much going to be abstracted from you",
    "start": "902880",
    "end": "908320"
  },
  {
    "text": "Fest reflex is a very interesting Library which is a little more U um Dynamic a little more um um not Dynamic",
    "start": "908320",
    "end": "915759"
  },
  {
    "text": "little more fluent like a fluent library for um annotation processing reflect and",
    "start": "915759",
    "end": "921800"
  },
  {
    "text": "ism is one of my favorite as well so this is an example real quick a",
    "start": "921800",
    "end": "927639"
  },
  {
    "text": "quick example we have The annotation class and we go my class that class give me all the annotation and that returns",
    "start": "927639",
    "end": "933440"
  },
  {
    "text": "an array of every annotation used in that particular class and you pretty much go and iterate through it and",
    "start": "933440",
    "end": "939759"
  },
  {
    "text": "verify whether it's an instance of that particular annotation of my annotation that we we looking for when we do",
    "start": "939759",
    "end": "945319"
  },
  {
    "text": "further processing you can print out pretty much the value of the attribute by my anation that value or do pretty",
    "start": "945319",
    "end": "951920"
  },
  {
    "text": "much further processing with it that's a little bit that would be a little bit more interesting next one so at built",
    "start": "951920",
    "end": "959079"
  },
  {
    "start": "958000",
    "end": "958000"
  },
  {
    "text": "time it's a different story um you don't you cannot you I mean you you don't have",
    "start": "959079",
    "end": "965839"
  },
  {
    "text": "the jvm yet I mean your code is not on the jvm to just pretty much like ask it give me the relations of this particular",
    "start": "965839",
    "end": "971639"
  },
  {
    "text": "class so what this one is called is mirror based reflection meaning that the annotations are pretty much accessible",
    "start": "971639",
    "end": "978040"
  },
  {
    "text": "through a processor where actually annotations are accessible through a processor API and we reflective",
    "start": "978040",
    "end": "984160"
  },
  {
    "text": "capabilities are encapsulated into intermediary objects called mirrors so",
    "start": "984160",
    "end": "989839"
  },
  {
    "text": "what this API does it it looks like it looks up your entire code and it pretty much creates kind of mirrors that hold",
    "start": "989839",
    "end": "996959"
  },
  {
    "text": "the metadata of your actual of your actual s source source code um in Java 5",
    "start": "996959",
    "end": "1004319"
  },
  {
    "text": "this was not standardized uh and we used to use this tool called appt which is pretty much a standard loone Tool uh",
    "start": "1004319",
    "end": "1010759"
  },
  {
    "text": "with the mer API com. sun. mirrror so you use apt and it goes over your code",
    "start": "1010759",
    "end": "1016040"
  },
  {
    "text": "and you can ask it questions about particular annotated elements uh but in Java 6 fortunately jsr 269 was",
    "start": "1016040",
    "end": "1024360"
  },
  {
    "text": "introduced which is The plugable annotation processor API and it's um kind of very interesting jsr",
    "start": "1024360",
    "end": "1031760"
  },
  {
    "text": "269 um leverages jsr 199 um which is the",
    "start": "1031760",
    "end": "1036839"
  },
  {
    "text": "Java compiler API Java Java c um that would allow you to pretty much",
    "start": "1036839",
    "end": "1042038"
  },
  {
    "text": "programmatically invoke invoke Java C it has the most important thing an implementation of the service loader in",
    "start": "1042039",
    "end": "1048840"
  },
  {
    "text": "interface and it which pretty much would allow us the capability to actually um provide certain services for the Java C",
    "start": "1048840",
    "end": "1055720"
  },
  {
    "text": "compiler and and um and and have pretty much execute them for us while pretty",
    "start": "1055720",
    "end": "1063080"
  },
  {
    "text": "much like build time and that's what uh jsr 24 is uh we going to go in a little",
    "start": "1063080",
    "end": "1068720"
  },
  {
    "text": "details of how this is done uh very soon here so um the um Java 269 extends the Java c as",
    "start": "1068720",
    "end": "1077520"
  },
  {
    "text": "a plug-in and allow us to write custom annotation processes this is great because it provided seamless integration",
    "start": "1077520",
    "end": "1084039"
  },
  {
    "text": "with the Java C all what Java C does is just pretty much starts find if there is an annotation processor registered to uh",
    "start": "1084039",
    "end": "1091600"
  },
  {
    "text": "process a particular annotation and then it plugs it into the compiler itself it",
    "start": "1091600",
    "end": "1097159"
  },
  {
    "text": "goes I have I'm looking for at code review and every time there as it",
    "start": "1097159",
    "end": "1102760"
  },
  {
    "text": "compiles the classes or as it goes through your source code it find app code review and it processes it and",
    "start": "1102760",
    "end": "1108440"
  },
  {
    "text": "certain way so uh JSA 269 to drill in a little",
    "start": "1108440",
    "end": "1113960"
  },
  {
    "text": "bit the details of of this uh is two parts one of them is pretty much um the",
    "start": "1113960",
    "end": "1120280"
  },
  {
    "text": "the act of writing the actual um um the part that lets you write the actual annotation processors un let you",
    "start": "1120280",
    "end": "1126200"
  },
  {
    "text": "interact with the processing environment uh which is defined in the package Java X annotations processing because you",
    "start": "1126200",
    "end": "1133320"
  },
  {
    "text": "don't have system. out yet I mean system.out.print Ln is something that",
    "start": "1133320",
    "end": "1139480"
  },
  {
    "text": "exists in the runtime I mean it's literally a class of of um a part of the jdk that that is available on runtime so",
    "start": "1139480",
    "end": "1146360"
  },
  {
    "text": "um there are certain interactions that you would need with the environment like getting feedback and taking care of",
    "start": "1146360",
    "end": "1151400"
  },
  {
    "text": "errors and all of those things and let's show you a code example in a little bit and it has the part that models the Java",
    "start": "1151400",
    "end": "1156919"
  },
  {
    "text": "prog programming language which is pretty much Java X Lang model um the merror API that we've talked about as",
    "start": "1156919",
    "end": "1164120"
  },
  {
    "text": "type declarations and types and by the way it kind of knows about generics we",
    "start": "1164120",
    "end": "1169240"
  },
  {
    "text": "all know that the problem with generics one of the problems of generics in Java in in runtime is type Erasure that means",
    "start": "1169240",
    "end": "1176360"
  },
  {
    "text": "a list of integers or a list of strings is just list for the jvm itself for",
    "start": "1176360",
    "end": "1181559"
  },
  {
    "text": "backwards compatibility reasons the merror API knows that this list is a list of strings that is different from",
    "start": "1181559",
    "end": "1188280"
  },
  {
    "text": "like a list of integers so if you were to do this in code and I'll show you an example a very",
    "start": "1188280",
    "end": "1195720"
  },
  {
    "text": "short example what you do is you provide an implement impementation of the processor interface um and meaning that",
    "start": "1195720",
    "end": "1202679"
  },
  {
    "text": "you will provide some kind of implementation of a process method right there and you can figure your processor",
    "start": "1202679",
    "end": "1209240"
  },
  {
    "text": "using certain annotations supported annotation type supported source and then supported options I think it would",
    "start": "1209240",
    "end": "1215400"
  },
  {
    "text": "be best right now if I just go and show you um a little bit of of of the code",
    "start": "1215400",
    "end": "1221640"
  },
  {
    "text": "real quick I'm not going to spend a lot of time uh in this so can you guys see okay or should they make it um so let",
    "start": "1221640",
    "end": "1229799"
  },
  {
    "text": "zoom in a little bit is this",
    "start": "1229799",
    "end": "1234399"
  },
  {
    "text": "okay so yeah so anyways I think I just cut some of the",
    "start": "1235760",
    "end": "1242039"
  },
  {
    "text": "can you guys see okay that's fine okay so what we have right here is we have an",
    "start": "1242039",
    "end": "1247640"
  },
  {
    "text": "implementation um a class right there called four type um processor and by the",
    "start": "1247640",
    "end": "1253039"
  },
  {
    "text": "way four type is one of the um um annotation that I have written myself",
    "start": "1253039",
    "end": "1258679"
  },
  {
    "text": "um that extends an abstract processor right there there are annotations out there that I'm only going to do this if",
    "start": "1258679",
    "end": "1265799"
  },
  {
    "text": "the supported Source version is pretty much like Java 6 um and the supported",
    "start": "1265799",
    "end": "1270880"
  },
  {
    "text": "annotation and look that look right there I provided the full um fully",
    "start": "1270880",
    "end": "1276159"
  },
  {
    "text": "qualified name of my actual the actual annotation that I'm trying to pretty much process so um the jav Java C pretty",
    "start": "1276159",
    "end": "1284240"
  },
  {
    "text": "much goes and then has all these registered processors and then pretty much compares the fully qualified name",
    "start": "1284240",
    "end": "1289960"
  },
  {
    "text": "if he encounters the four type annotations it pretty much executes the following code the process method is",
    "start": "1289960",
    "end": "1295760"
  },
  {
    "text": "right there and I takes some um you know a set of type element the actual",
    "start": "1295760",
    "end": "1302159"
  },
  {
    "text": "environment itself and that's pretty much like forther further further further processing um I am not going to",
    "start": "1302159",
    "end": "1307640"
  },
  {
    "text": "drill down into the details of um of this particular code uh but it's",
    "start": "1307640",
    "end": "1313120"
  },
  {
    "text": "something that is pretty much straightforward uh one thing that I would mention is pretty much this",
    "start": "1313120",
    "end": "1318240"
  },
  {
    "text": "Boolean that is returned right here by the function itself it only tells the um",
    "start": "1318240",
    "end": "1323600"
  },
  {
    "text": "um the Java C whether I'm done processing the four type and I should not mention it to other processor or",
    "start": "1323600",
    "end": "1329679"
  },
  {
    "text": "whether I should make it available for other like you know if you have two or three um you can one of them you can",
    "start": "1329679",
    "end": "1335919"
  },
  {
    "text": "either like claim it back or like um um process it again or pretty much um or or",
    "start": "1335919",
    "end": "1342760"
  },
  {
    "text": "not so going back to the slides",
    "start": "1342760",
    "end": "1349960"
  },
  {
    "text": "I gotta adjust the zoom level we",
    "start": "1351440",
    "end": "1356840"
  },
  {
    "text": "good okay so registration right now you went in you start you provided this um",
    "start": "1356840",
    "end": "1364320"
  },
  {
    "text": "implementation you're ready to Reg how can you tell the Java C Java C about it there are two different ways the first",
    "start": "1364320",
    "end": "1370760"
  },
  {
    "text": "one is simply pretty much using the command line and you pass to Java C an option called processor and you pretty",
    "start": "1370760",
    "end": "1376520"
  },
  {
    "text": "much you tell them this is the the this this is the list of the processor classes that pretty much provided the",
    "start": "1376520",
    "end": "1381720"
  },
  {
    "text": "four type processor in my case um there are other options for example that would enable and disable um the the discovery",
    "start": "1381720",
    "end": "1389919"
  },
  {
    "text": "of this processor if you want to if you want to say that or the use of the this processor by the Java compiler itself",
    "start": "1389919",
    "end": "1396120"
  },
  {
    "text": "but the the best way of doing it the way I do it is pretty much to leverage the Java uh service provider API jsr 20 24",
    "start": "1396120",
    "end": "1405159"
  },
  {
    "text": "that I um that I pretty much that that we mentioned briefly which pretty much would allow the compiler to autodiscover",
    "start": "1405159",
    "end": "1412000"
  },
  {
    "text": "and automatically pick up all the processors right there for your code um",
    "start": "1412000",
    "end": "1417120"
  },
  {
    "text": "so these are some um detail right there of um how you could do it but I might",
    "start": "1417120",
    "end": "1424159"
  },
  {
    "text": "just show it would be like much easier to just show you the code um this is very",
    "start": "1424159",
    "end": "1429279"
  },
  {
    "text": "simple um you could simply pretty much just go and create Under The Meta M",
    "start": "1429279",
    "end": "1434919"
  },
  {
    "text": "folder um a folder another an inner folder pretty much called services and you provide a",
    "start": "1434919",
    "end": "1441880"
  },
  {
    "text": "um file named with the actual interface that you want the um Javas stre to",
    "start": "1441880",
    "end": "1449279"
  },
  {
    "text": "pretty much discover and in this case since it's the um um since it's the jsr",
    "start": "1449279",
    "end": "1455400"
  },
  {
    "text": "270 uh 2 269 processor we actually named the Java X annotation processing",
    "start": "1455400",
    "end": "1461559"
  },
  {
    "text": "processor so the compiler is going to go and look for everybody that pretty much provides an implementation for this",
    "start": "1461559",
    "end": "1467200"
  },
  {
    "text": "interface throughout the class thing and pretty much use it somehow and inside this file you provide all the",
    "start": "1467200",
    "end": "1474000"
  },
  {
    "text": "implementations that you want your compiler implementation of that class that you want your compiler to pretty",
    "start": "1474000",
    "end": "1479840"
  },
  {
    "text": "much consider or um or or pretty much execute and there's an array over there",
    "start": "1479840",
    "end": "1485840"
  },
  {
    "text": "of um um of of implementations processing different annotations right",
    "start": "1485840",
    "end": "1491399"
  },
  {
    "text": "there uh you can pretty much like play with the order you know and Define like pretty much a position and all that",
    "start": "1491399",
    "end": "1496960"
  },
  {
    "text": "stuff is pretty is is defined uh by the spec pretty well defined by the spec",
    "start": "1496960",
    "end": "1502840"
  },
  {
    "text": "itself um so this is a lot quicker I'm boring you with the entire slides and",
    "start": "1502840",
    "end": "1510039"
  },
  {
    "text": "pretty much that's this is what it is um now that we learned all these apis",
    "start": "1510039",
    "end": "1516360"
  },
  {
    "text": "and we learned reflection how we can ask the run time about meta information associated with the annotated elements",
    "start": "1516360",
    "end": "1523600"
  },
  {
    "text": "we learned how to interact with the compiler itself and do that compile time",
    "start": "1523600",
    "end": "1529480"
  },
  {
    "text": "um what to do with with all this information that we have access to and we can read uh what to do with it is",
    "start": "1529480",
    "end": "1535200"
  },
  {
    "text": "pretty much to construct a meta model let me go back and what a meta model is",
    "start": "1535200",
    "end": "1540720"
  },
  {
    "start": "1539000",
    "end": "1539000"
  },
  {
    "text": "is pretty much when we take the metadata we process it into something that can be accessed pretty much programmatically as",
    "start": "1540720",
    "end": "1547880"
  },
  {
    "text": "simple as pretty much a data object um that is associated with like a field I",
    "start": "1547880",
    "end": "1553360"
  },
  {
    "text": "want um my my field classes this is pretty much the information that is",
    "start": "1553360",
    "end": "1558440"
  },
  {
    "text": "associated with the one field encapsulated in one dto I mean dto is probably the wrong in one pojo uh to use",
    "start": "1558440",
    "end": "1566360"
  },
  {
    "text": "like a right word so this meta model could be something that is static or could be something that is dynamic um a",
    "start": "1566360",
    "end": "1572520"
  },
  {
    "text": "meta model can be nothing as a simply tagging the annotated element as an ID",
    "start": "1572520",
    "end": "1578240"
  },
  {
    "text": "this is the ID of my class it could be something as complex that would provide metadata context of um of the annotated",
    "start": "1578240",
    "end": "1585360"
  },
  {
    "text": "element itself uh this being said that the field can have three different annotations of um that would bring in",
    "start": "1585360",
    "end": "1593120"
  },
  {
    "text": "attribute values with them or it could be simply just pretty much a tag this is an ID or this is um um you know a a",
    "start": "1593120",
    "end": "1602320"
  },
  {
    "text": "unique disle this this this is supposed and not null value for jsr 303 let me go",
    "start": "1602320",
    "end": "1608360"
  },
  {
    "text": "back so what is a static meta model to be very clear I have a little code example short code example for you for",
    "start": "1608360",
    "end": "1614720"
  },
  {
    "text": "that is pretty much what we do is we create this one all know knowing god object that would encapsulate every",
    "start": "1614720",
    "end": "1621760"
  },
  {
    "text": "possible metadata value that could be associated with the one annotated element if you have if you allow you you",
    "start": "1621760",
    "end": "1628840"
  },
  {
    "text": "have an annotation right there that is um four Fields you allow the the target",
    "start": "1628840",
    "end": "1635480"
  },
  {
    "text": "whose Target is like a field you allow what you do is like you create this um",
    "start": "1635480",
    "end": "1642080"
  },
  {
    "text": "this pojo that has all possible um uh all fields of all possible um attributes",
    "start": "1642080",
    "end": "1651360"
  },
  {
    "text": "or all possible bits of metadata that could be brought in about every annotation whose Target is pretty much",
    "start": "1651360",
    "end": "1657760"
  },
  {
    "text": "filled um it'll become clear in a little bit the advantage of this and it's very",
    "start": "1657760",
    "end": "1662919"
  },
  {
    "start": "1659000",
    "end": "1659000"
  },
  {
    "text": "simple you know that this is a field and you know that this is all the metadata that could ever be associated with it uh",
    "start": "1662919",
    "end": "1669440"
  },
  {
    "text": "it's statically typed and with Java people I mean mostly we kind of favor",
    "start": "1669440",
    "end": "1674640"
  },
  {
    "text": "that in a way the disadvantages is pretty much you're going to have have nulls all over you go back to the next",
    "start": "1674640",
    "end": "1681600"
  },
  {
    "text": "slide so right here we have certain fields for example we have a private",
    "start": "1681600",
    "end": "1687799"
  },
  {
    "text": "long ID that is annotated with ID uh it has like ad generated uh which is like",
    "start": "1687799",
    "end": "1693679"
  },
  {
    "text": "another annotation that tells you how the value of that particular ID generated we have a column name associated with ID the second one is a",
    "start": "1693679",
    "end": "1700760"
  },
  {
    "text": "full name it only have at column the third one is email and it's actually annotated with at unique and at column",
    "start": "1700760",
    "end": "1707880"
  },
  {
    "text": "has like an email right there so we have three Fields they have different combinations of um of um of of of",
    "start": "1707880",
    "end": "1717039"
  },
  {
    "text": "metadata of different combinations of annotations so what our meta model is",
    "start": "1717039",
    "end": "1722080"
  },
  {
    "text": "going to be it's going to be a poo that called possible metadata that's going to",
    "start": "1722080",
    "end": "1727519"
  },
  {
    "text": "have a Boolean to indicate whether that particular annotated element is an ID or",
    "start": "1727519",
    "end": "1733480"
  },
  {
    "text": "not the name of it whether it's Unique a again or like the actual strategy uh",
    "start": "1733480",
    "end": "1740679"
  },
  {
    "text": "which is which has to do with the actual how the value of that particular element has been created now you look at this",
    "start": "1740679",
    "end": "1747320"
  },
  {
    "text": "use it for like um the ID and you see that all of these ones pretty much is ID",
    "start": "1747320",
    "end": "1753080"
  },
  {
    "text": "has a value and it has a it has a name and it and it has pretty much a type but",
    "start": "1753080",
    "end": "1760240"
  },
  {
    "text": "there is nothing um um but it's pretty much like a default false for like uniqueness which in the case of Prim",
    "start": "1760240",
    "end": "1766440"
  },
  {
    "text": "primitive types um itself is kind of problematic because",
    "start": "1766440",
    "end": "1772679"
  },
  {
    "text": "um it does not really make sense I mean there is no no for primitive types and it's kind of false which um I don't know",
    "start": "1772679",
    "end": "1780720"
  },
  {
    "text": "if you um if I said this one right or not but anyways uh in the case of the second one which is full name all of",
    "start": "1780720",
    "end": "1787519"
  },
  {
    "text": "those values over there are kind of irrelevant the only one that we care about is the actual name itself we look at the boan they're both pretty much",
    "start": "1787519",
    "end": "1793840"
  },
  {
    "text": "false because that's pretty much the default which does not really make make any sense but much e much easier to do",
    "start": "1793840",
    "end": "1799799"
  },
  {
    "text": "to deal with because we could just have Getters and Setters of this possible pretty much metadata um uh possible",
    "start": "1799799",
    "end": "1805960"
  },
  {
    "text": "metadata object and you pretty much ask the questions give me the name get name is unique um get me the type so we take",
    "start": "1805960",
    "end": "1813919"
  },
  {
    "text": "all this ones and then we put it in a map of object that would map the actual field in the class to all possible",
    "start": "1813919",
    "end": "1820480"
  },
  {
    "text": "pretty much metadata right there and that's actual our static metam model the next one is a lot more",
    "start": "1820480",
    "end": "1826840"
  },
  {
    "text": "interesting which is pretty much a dynamic metam model and um um we kind of um um mean",
    "start": "1826840",
    "end": "1835480"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "certain people would call this this structure of the code the vavi code meaning that it's very small and Loosely",
    "start": "1835480",
    "end": "1841799"
  },
  {
    "text": "coupled the code is constructed of very loose and very very Loosely coupled and",
    "start": "1841799",
    "end": "1847200"
  },
  {
    "text": "small components um which is as simple as actually pretty",
    "start": "1847200",
    "end": "1852760"
  },
  {
    "text": "much applying the simple decortive design pattern kind of making the OB",
    "start": "1852760",
    "end": "1857919"
  },
  {
    "text": "observation that all of these fields are kind of decorated with these um annotations right um and uh you pretty",
    "start": "1857919",
    "end": "1866120"
  },
  {
    "text": "much go that so what you end up with is a dynamic model which is pretty much just like a map a map of maps uh that is",
    "start": "1866120",
    "end": "1875200"
  },
  {
    "text": "very flexible but it's kind of complex complex in terms of processing the annotations itself and constructing the",
    "start": "1875200",
    "end": "1881600"
  },
  {
    "text": "model but it's um it's it's correct and it's very it's very flexible um I am not",
    "start": "1881600",
    "end": "1888279"
  },
  {
    "text": "going to go down and explain and drill into you know what a decorator design pattern is or like how it's supposed to",
    "start": "1888279",
    "end": "1894840"
  },
  {
    "text": "look like but if you want to discuss that with me after the presentation I'll be glad to and I have actually code uh",
    "start": "1894840",
    "end": "1901240"
  },
  {
    "text": "to show for for this can go next so now",
    "start": "1901240",
    "end": "1906760"
  },
  {
    "text": "that we have we processed the annotations using this these apis and we created them we created this meta model",
    "start": "1906760",
    "end": "1914240"
  },
  {
    "text": "dynamic or static it doesn't really matter um we would need uh some kind of",
    "start": "1914240",
    "end": "1919760"
  },
  {
    "text": "validation I mean you can't just let people especially if you have somebody that writes pretty much the framework",
    "start": "1919760",
    "end": "1925720"
  },
  {
    "text": "somebody who creates hibernate you can't expect um people to just pretty much do",
    "start": "1925720",
    "end": "1930760"
  },
  {
    "text": "things the right way and then highlight this with like with with an example so um uh what validation is in a",
    "start": "1930760",
    "end": "1939240"
  },
  {
    "start": "1934000",
    "end": "1934000"
  },
  {
    "text": "nutshells pretty much ensuring the validity and correctness of the semantics of metadata because metadata",
    "start": "1939240",
    "end": "1944399"
  },
  {
    "text": "brings in semantics it tells you that this is a column tells you that this is an ID it tells you that this is a table",
    "start": "1944399",
    "end": "1950519"
  },
  {
    "text": "and there are certain things like in a table you could only have like one ID for your particular framework if you",
    "start": "1950519",
    "end": "1956600"
  },
  {
    "text": "don't that's that's what you want that's your pretty much choice and unfortunately uh compliance with these",
    "start": "1956600",
    "end": "1963440"
  },
  {
    "text": "additional consistency constraints of outside the uh Java language spec the",
    "start": "1963440",
    "end": "1969279"
  },
  {
    "text": "only thing that is enforced by the compile of itself is at Target is when you create your annotation you say that",
    "start": "1969279",
    "end": "1975480"
  },
  {
    "text": "I want this annotation to be for uh methods to be only allowed for fields to",
    "start": "1975480",
    "end": "1980559"
  },
  {
    "text": "be only allowed for classes next so um assuming that you're",
    "start": "1980559",
    "end": "1986399"
  },
  {
    "start": "1985000",
    "end": "1985000"
  },
  {
    "text": "writing for example jsr 318 which is the Enterprise Java beans you are you woke",
    "start": "1986399",
    "end": "1991760"
  },
  {
    "text": "up this morning and you felt very very well and you want all right I'm tired of these guys I want to create my own",
    "start": "1991760",
    "end": "1997519"
  },
  {
    "text": "implementation so in the spec it says that a bean or like a pojo can be both",
    "start": "1997519",
    "end": "2003279"
  },
  {
    "text": "um um annotated as stateful and stateless this is completely Allowed by",
    "start": "2003279",
    "end": "2008600"
  },
  {
    "text": "the way and compiler is not going to complain but it does not really make any sense you can be both stateful and",
    "start": "2008600",
    "end": "2014039"
  },
  {
    "text": "stateless at the same time and if you're the one creating this framework or providing this implementation you should",
    "start": "2014039",
    "end": "2020240"
  },
  {
    "text": "have a problem with this and say this is not pretty much allowed in mostly in",
    "start": "2020240",
    "end": "2026440"
  },
  {
    "text": "runtime so this is anything but simple you know constraint a constraint",
    "start": "2026440",
    "end": "2032159"
  },
  {
    "start": "2027000",
    "end": "2027000"
  },
  {
    "text": "satisfaction problem is very hard I mean you can go and read up on it online there are a bunch of um of um um",
    "start": "2032159",
    "end": "2038799"
  },
  {
    "text": "algorithms and solutions for it if you are interested interested but these are pretty much out of the scope of this",
    "start": "2038799",
    "end": "2045159"
  },
  {
    "text": "presentation so um but it's not really that bad I mean",
    "start": "2045159",
    "end": "2051599"
  },
  {
    "text": "because um you're the one who creates those um annotation you suppose that you created 10 of them and you can pretty",
    "start": "2051599",
    "end": "2058240"
  },
  {
    "text": "much just sit down and have some kind of very simplistic algorithm that is like conditional um that would pretty much",
    "start": "2058240",
    "end": "2063760"
  },
  {
    "text": "Define certain rules certain logic of that would um answer the question whether this is",
    "start": "2063760",
    "end": "2069118"
  },
  {
    "text": "valid or not you know just say if you process a particular field and it has",
    "start": "2069119",
    "end": "2074440"
  },
  {
    "text": "stateful and it has stateless at the same time throw an exception and say that this is not allowed as simple as",
    "start": "2074440",
    "end": "2080358"
  },
  {
    "start": "2079000",
    "end": "2079000"
  },
  {
    "text": "that um go back so this is pretty much the imperative way Java but what you end",
    "start": "2080359",
    "end": "2085679"
  },
  {
    "text": "up with is a jungle of if statement crazy and unmaintainable and you're just going to end up shooting yourself in the",
    "start": "2085679",
    "end": "2091480"
  },
  {
    "text": "head I am not um I'm I'm not promoting that by any means so so um or you could",
    "start": "2091480",
    "end": "2100079"
  },
  {
    "text": "solve these things in a in in The Logical way that means using a logic programming language where actually",
    "start": "2100079",
    "end": "2106599"
  },
  {
    "text": "semantics are actually represented in a way that is declarative as predicates and we procedurally interpret query",
    "start": "2106599",
    "end": "2113640"
  },
  {
    "text": "pretty much resolutions what you do um in in prologue for example um is pretty",
    "start": "2113640",
    "end": "2120040"
  },
  {
    "text": "much going you stay these are the rules these are pretty much the fact and you ask prologue itself uh a query you",
    "start": "2120040",
    "end": "2127079"
  },
  {
    "text": "pretty much going to have valid or like invalid this is a good way so um if you",
    "start": "2127079",
    "end": "2132920"
  },
  {
    "text": "are on Java uh there are different implementation of the prologue interpreter interpreter in Java there's",
    "start": "2132920",
    "end": "2138520"
  },
  {
    "text": "a two prologue there is jlog um and there is also an interface to Sweet",
    "start": "2138520",
    "end": "2143640"
  },
  {
    "text": "prologue if a prologue happen to be installed in the actual machine which is pretty much just a jni interface um it's",
    "start": "2143640",
    "end": "2150200"
  },
  {
    "text": "great uh but you're going to have to learn PR if you're not familiar with it you don't have the time for that yeah",
    "start": "2150200",
    "end": "2156800"
  },
  {
    "text": "kind of sucks um it's a lot of fun though or if you happen to be familiar",
    "start": "2156800",
    "end": "2162359"
  },
  {
    "text": "with closure which is a very nice language is this BL you could that runs",
    "start": "2162359",
    "end": "2167480"
  },
  {
    "text": "on the jvm as well you could use core. logic which pretty much support logic and constraint programming and it was",
    "start": "2167480",
    "end": "2174400"
  },
  {
    "text": "like a very nice API actually will allow you to do do that easily there are other options for you that you could explore",
    "start": "2174400",
    "end": "2180119"
  },
  {
    "text": "one of them is the Prova rule rule language it's open source and it's out there Mercury as well it's like a logic",
    "start": "2180119",
    "end": "2187000"
  },
  {
    "text": "programming kind of type of language and all of these ones run on the jvm so um they have very nice they're actually",
    "start": "2187000",
    "end": "2193640"
  },
  {
    "text": "pretty well documented in the case of U of of of Prova",
    "start": "2193640",
    "end": "2199440"
  },
  {
    "text": "next but um there is another another option",
    "start": "2199440",
    "end": "2205000"
  },
  {
    "text": "another option is pretty much to use uh rules engines that's what rules engines are for so um probably one of the most",
    "start": "2205000",
    "end": "2213280"
  },
  {
    "text": "popular ones the droes expert by J boss uh which is pretty much a highly",
    "start": "2213280",
    "end": "2218520"
  },
  {
    "text": "performance and optimized rules engine and it would allow your rules to write them you define them in meville which is",
    "start": "2218520",
    "end": "2224240"
  },
  {
    "text": "just an expression language or XML not that hard at all a lot of you are are",
    "start": "2224240",
    "end": "2229800"
  },
  {
    "text": "pretty much like familiar with it dealing with all these expression languages and jsps and all that and it",
    "start": "2229800",
    "end": "2235400"
  },
  {
    "text": "integrates very nicely with Java collaborative poos um it's pretty much a library a jav",
    "start": "2235400",
    "end": "2243000"
  },
  {
    "text": "file that you pretty much include in your project you include that dependency",
    "start": "2243000",
    "end": "2248040"
  },
  {
    "text": "you define these rules in a particular file and you pretty much take your meta model and then you validate it against",
    "start": "2248040",
    "end": "2254480"
  },
  {
    "text": "those particular rules and you get pretty much feedback from the engine as actual Java objects which is very nice",
    "start": "2254480",
    "end": "2261359"
  },
  {
    "text": "so check out DRS expert um now that we",
    "start": "2261359",
    "end": "2266839"
  },
  {
    "text": "processed this meta we have this metadata in some format we processed it",
    "start": "2266839",
    "end": "2271960"
  },
  {
    "text": "we constructed a meta model we validated that meta model we made sure that it's uh the semantics are actually correct",
    "start": "2271960",
    "end": "2279119"
  },
  {
    "text": "what to do with it um mean you can just have the data just sit there um so one",
    "start": "2279119",
    "end": "2284960"
  },
  {
    "text": "of the options is pretty much do some kind of transformations to the actual code itself or like create a um new",
    "start": "2284960",
    "end": "2292200"
  },
  {
    "start": "2285000",
    "end": "2285000"
  },
  {
    "text": "classes or like new bite code um like um you know modify the abstract rewrite the",
    "start": "2292200",
    "end": "2298720"
  },
  {
    "text": "the the abstract syntax Tree by actually changing the structure of your actual",
    "start": "2298720",
    "end": "2303880"
  },
  {
    "text": "code so you could say for example for all the methods um that are annotated",
    "start": "2303880",
    "end": "2310520"
  },
  {
    "text": "with ADD change uh if statements to change if to switch you want to go down",
    "start": "2310520",
    "end": "2317920"
  },
  {
    "text": "the a tree and every time you find an if statement you would change it to a switch statement because you just hate",
    "start": "2317920",
    "end": "2324720"
  },
  {
    "text": "if statements for some reason you prefer the switch or for some reason in some other Universe they happen to perform",
    "start": "2324720",
    "end": "2331319"
  },
  {
    "text": "better it can be your code it could be somebody else's pretty much code so you say every time you see this particular",
    "start": "2331319",
    "end": "2338240"
  },
  {
    "text": "annotation please change all the F statements and turn them into switch statements or you could be adding or",
    "start": "2338240",
    "end": "2344480"
  },
  {
    "text": "removing pretty much Behavior right so um automatic generation of cookie cutter",
    "start": "2344480",
    "end": "2349599"
  },
  {
    "text": "code right so when you when spring stereotypes a particular pojo at",
    "start": "2349599",
    "end": "2356400"
  },
  {
    "text": "controller right at one time they would go and pretty much take that particular pojo and then have it inherit another",
    "start": "2356400",
    "end": "2364200"
  },
  {
    "text": "class which is which pretty much bring brings in the behavior of the controller itself and knows about uh servlets and",
    "start": "2364200",
    "end": "2371280"
  },
  {
    "text": "knows about all that kind of stuff add methods remove methods you can do whatever you want with it so you end up",
    "start": "2371280",
    "end": "2376839"
  },
  {
    "text": "creating a complex um um class hierarchy or based on that one annotated class you",
    "start": "2376839",
    "end": "2383680"
  },
  {
    "text": "want to create different things in the case of the active record of um um of of",
    "start": "2383680",
    "end": "2389359"
  },
  {
    "text": "for the Ruby on Rails people you define this one model and based on that model they look at it and they create a",
    "start": "2389359",
    "end": "2397119"
  },
  {
    "text": "repository or pretty much a dow that knows exactly how to persist that and um",
    "start": "2397119",
    "end": "2402680"
  },
  {
    "text": "and and pretty much read it from like a relational database based on some kind of configuration um based on the",
    "start": "2402680",
    "end": "2409920"
  },
  {
    "text": "convention of the actual object itself and the configuration in the yl file of",
    "start": "2409920",
    "end": "2415000"
  },
  {
    "text": "what database that you actually have had defined for your actual application um there are a lot of bite",
    "start": "2415000",
    "end": "2422599"
  },
  {
    "start": "2422000",
    "end": "2422000"
  },
  {
    "text": "code manipulation libraries I'm going to mention mention a few um ASM it's very small fast very low level",
    "start": "2422599",
    "end": "2430560"
  },
  {
    "text": "you need to know by code op codes for for for for the Java pretty much bite",
    "start": "2430560",
    "end": "2436079"
  },
  {
    "text": "code to actually understand this which is a really good practice but it requires a good understanding of of the",
    "start": "2436079",
    "end": "2441599"
  },
  {
    "text": "language spec itself as well but it's very well documented I mean ASM is king",
    "start": "2441599",
    "end": "2447520"
  },
  {
    "text": "um uh GC lib this is something that um",
    "start": "2447520",
    "end": "2452599"
  },
  {
    "text": "came as a response of the fact that not everybody wants to go and learn Java assembly nobody likes that um and they",
    "start": "2452599",
    "end": "2459520"
  },
  {
    "text": "built like this abstraction on top of it it's high it performs really well but it",
    "start": "2459520",
    "end": "2464640"
  },
  {
    "text": "has some issues with when you start dealing with like sign jobs and everything um this library was used by",
    "start": "2464640",
    "end": "2469800"
  },
  {
    "text": "hibernate but they dropped it in favor of java assist for lack and support and",
    "start": "2469800",
    "end": "2474839"
  },
  {
    "text": "act for lack of support and active development uh Java assist which is the",
    "start": "2474839",
    "end": "2480000"
  },
  {
    "text": "last one I would like to mention um I love this Library a lot it's very easy to use it works well with sign jar has",
    "start": "2480000",
    "end": "2487440"
  },
  {
    "text": "very good documentation has an excellent Java Doc and it it was the one that pretty much um adopted that was adopted",
    "start": "2487440",
    "end": "2494200"
  },
  {
    "text": "by hibernate but it's a little slower than than than GC GC lip um it's not",
    "start": "2494200",
    "end": "2500119"
  },
  {
    "text": "that I mean it for me or like for the problems I was trying to solve it didn't make that much of a difference it's not",
    "start": "2500119",
    "end": "2506880"
  },
  {
    "text": "really slow um but it allows you to pretty much just literally go and then",
    "start": "2506880",
    "end": "2512720"
  },
  {
    "text": "construct your code in strings and then pass it to the ASM Library would actually create the equivalent code and",
    "start": "2512720",
    "end": "2519359"
  },
  {
    "text": "then pretty much load it on the jvm use the class loader and load it to jvm as Live code as you do",
    "start": "2519359",
    "end": "2525760"
  },
  {
    "text": "that so um or you could other than transforming doing all these transformation and code generation you",
    "start": "2525760",
    "end": "2532520"
  },
  {
    "text": "could pretty much just do simple interpretations uh one of the example of interpretations is pretty much um just",
    "start": "2532520",
    "end": "2539280"
  },
  {
    "text": "mapping one object to another one based on the meta model itself an example of this being done is Dozer which is pretty",
    "start": "2539280",
    "end": "2546319"
  },
  {
    "text": "much this library that takes one Java class and then copies it into another one or Maps it into another one two",
    "start": "2546319",
    "end": "2553559"
  },
  {
    "text": "different classes but takes this one and copies the values or another one based on metadata right there because a lot of",
    "start": "2553559",
    "end": "2560280"
  },
  {
    "text": "the times um the fields are not named the same way so you have this meta model",
    "start": "2560280",
    "end": "2565960"
  },
  {
    "start": "2564000",
    "end": "2564000"
  },
  {
    "text": "right there that tells you that field name first name um cam case maps to a",
    "start": "2565960",
    "end": "2571680"
  },
  {
    "text": "field called first name Hungarian notation kind of whatever it is you can do whatever you want or in Frameworks as",
    "start": "2571680",
    "end": "2579119"
  },
  {
    "text": "well um so and it's pretty much this way now a",
    "start": "2579119",
    "end": "2585240"
  },
  {
    "text": "mapper pretty much you have like your pojo your class um and you have the Met",
    "start": "2585240",
    "end": "2590800"
  },
  {
    "text": "data associated with that class whether you chose to express it as Java annotations in the class itself or",
    "start": "2590800",
    "end": "2597760"
  },
  {
    "text": "whether you chose to express it externally as XML or Json wherever you you want um you process it into a meta",
    "start": "2597760",
    "end": "2605800"
  },
  {
    "text": "mod and you have that data sitting there right the minute you have an instance of the Poo itself that means that you don't",
    "start": "2605800",
    "end": "2612920"
  },
  {
    "text": "only have the fields you have the fields and their values right a mapper would take that information all right and",
    "start": "2612920",
    "end": "2620119"
  },
  {
    "text": "create a new instance of whatever you're trying to pretty much interpret the object as in the case of the object",
    "start": "2620119",
    "end": "2627040"
  },
  {
    "text": "relational Frameworks every instance of the objects maps for example to a row I",
    "start": "2627040",
    "end": "2632119"
  },
  {
    "text": "mean and I'm using this it could could be more than that or multiple rows across different tables but AOW for",
    "start": "2632119",
    "end": "2638680"
  },
  {
    "text": "example so we take the pojo read The Meta model interpret it a certain way",
    "start": "2638680",
    "end": "2644200"
  },
  {
    "text": "take the values and create a new instance and a new instance of the row class which is a part of the persistent",
    "start": "2644200",
    "end": "2651079"
  },
  {
    "text": "model um a very nice abstraction uh so your code that interacts with the",
    "start": "2651079",
    "end": "2657359"
  },
  {
    "text": "database has nothing does not know anything about your poos has nothing to do about your employee class all it",
    "start": "2657359",
    "end": "2664640"
  },
  {
    "text": "knows that every time I get an instance row of this particular table I pretty",
    "start": "2664640",
    "end": "2671720"
  },
  {
    "text": "much go and save it to TBL employees so um and that's what hiate",
    "start": "2671720",
    "end": "2678000"
  },
  {
    "text": "does for you next so the next thing that",
    "start": "2678000",
    "end": "2684079"
  },
  {
    "start": "2682000",
    "end": "2682000"
  },
  {
    "text": "other than transformation and in interpretation is dealing with these cross cutting",
    "start": "2684079",
    "end": "2689520"
  },
  {
    "text": "concerns and U what op pretty much creates is this hierarchy of this",
    "start": "2689520",
    "end": "2695079"
  },
  {
    "text": "hierarchical object model by Nature this thing inherits from this thing this thing implements implements this thing",
    "start": "2695079",
    "end": "2701240"
  },
  {
    "text": "but we have certain things that are not necessarily a part of the of the um application logic certain things that",
    "start": "2701240",
    "end": "2706920"
  },
  {
    "text": "you couldn't M moralize anywhere because they show all over the place login for",
    "start": "2706920",
    "end": "2712359"
  },
  {
    "text": "example transactions uh security you'll end up if you don't use aop with uh",
    "start": "2712359",
    "end": "2719400"
  },
  {
    "text": "login statements all over the place you log in this class and you log in this class and you log here and you log here",
    "start": "2719400",
    "end": "2724960"
  },
  {
    "text": "when you have an exception and you have all this code all over and you couldn't really um do anything with it so what",
    "start": "2724960",
    "end": "2731160"
  },
  {
    "text": "aspect oriented programming is pretty much does that what what it does is pretty much it allows",
    "start": "2731160",
    "end": "2736920"
  },
  {
    "text": "you to say uh things like um if the a method of a particular class um through",
    "start": "2736920",
    "end": "2745760"
  },
  {
    "text": "an exception do this log statement or if a",
    "start": "2745760",
    "end": "2751559"
  },
  {
    "text": "um um an object of this particular class of an object within this package of a",
    "start": "2751559",
    "end": "2757359"
  },
  {
    "text": "class within this package is created log this statement so what you do is like",
    "start": "2757359",
    "end": "2762599"
  },
  {
    "text": "you remove all those C cost cutting concerns and you modularize them in these advices or these like aspects and",
    "start": "2762599",
    "end": "2769720"
  },
  {
    "text": "your code is highly cohesive and highly maintainable you look at the employee Dow and it only does c operations for",
    "start": "2769720",
    "end": "2777160"
  },
  {
    "text": "employees you look at some kind of service or your translation service and",
    "start": "2777160",
    "end": "2782720"
  },
  {
    "text": "you only has translation code code that actually carries the actual translation no login no security no nothing like",
    "start": "2782720",
    "end": "2790640"
  },
  {
    "text": "that um but a lot of Frameworks like aspect J would provide that for you out",
    "start": "2790640",
    "end": "2796640"
  },
  {
    "text": "of the box um you can choose to pretty much do that uh and just tag these Point",
    "start": "2796640",
    "end": "2802960"
  },
  {
    "text": "cuts and these annotated elements in the code yourself and say that every time you encounter at loggable you pretty",
    "start": "2802960",
    "end": "2810599"
  },
  {
    "text": "much log when after like a uh a successful execution um and and you",
    "start": "2810599",
    "end": "2816200"
  },
  {
    "text": "would do what is called in the aop word code weaving at compile time or like at",
    "start": "2816200",
    "end": "2822280"
  },
  {
    "text": "runtime using Dynamic proxies so as you compile every time you see this annotation you insert this statement",
    "start": "2822280",
    "end": "2828920"
  },
  {
    "text": "here and you insert this statement here which is pretty much the login statement next other you could pretty much do",
    "start": "2828920",
    "end": "2836200"
  },
  {
    "text": "instrumentation uh there are very few libraries that actually do very good instrumentation out there um the one",
    "start": "2836200",
    "end": "2842280"
  },
  {
    "text": "that I saw was from Yammer I think it's a where of checking out that defines a bunch of annotations that it lets you",
    "start": "2842280",
    "end": "2848599"
  },
  {
    "text": "say um time this method and time that method and and such but uh which would allow you to pretty much Monitor and",
    "start": "2848599",
    "end": "2854839"
  },
  {
    "text": "measure performance do diagnostics and Trace info um things that are allowed by",
    "start": "2854839",
    "end": "2861160"
  },
  {
    "text": "meta programming as well as pretty much inversion of control um or um dependency",
    "start": "2861160",
    "end": "2866280"
  },
  {
    "text": "injection that the spring framework is pretty much known for known for um when",
    "start": "2866280",
    "end": "2871480"
  },
  {
    "text": "you say at inject um the runtime actually goes read off your meta uh data",
    "start": "2871480",
    "end": "2877920"
  },
  {
    "text": "and pretty much injects the correct implementation of the interfaces in your uh in your",
    "start": "2877920",
    "end": "2884559"
  },
  {
    "text": "pojos so um we go through all of this stuff right now all of this mess we got",
    "start": "2884559",
    "end": "2891359"
  },
  {
    "text": "to do validation you got to do use rule rule engines for validations you could use prologue annotation processing this",
    "start": "2891359",
    "end": "2898240"
  },
  {
    "text": "API in that API and um it's just tedious work and me as a developer do not want",
    "start": "2898240",
    "end": "2905760"
  },
  {
    "text": "to have to pretty much do that reinvent the wheel each time so um how this",
    "start": "2905760",
    "end": "2911400"
  },
  {
    "text": "project pretty much started I was pretty much assigned to write a framework that looks very much like hibernate that runs",
    "start": "2911400",
    "end": "2917480"
  },
  {
    "text": "on top of hbas and hbas is a nosql database so um um I wrote the first one",
    "start": "2917480",
    "end": "2923200"
  },
  {
    "text": "and did the whole thing and um um at the end when I thought that everything was",
    "start": "2923200",
    "end": "2928599"
  },
  {
    "text": "pretty much done I discovered that I had no validation that people were using are going to be using my library pretty much",
    "start": "2928599",
    "end": "2934599"
  },
  {
    "text": "the the wrong way so I said it's fine let me start doing a bunch of f- statements and it was hell so um what",
    "start": "2934599",
    "end": "2941480"
  },
  {
    "text": "the presentation is is pretty much what I went through trying to pretty much build this framework and it was probably",
    "start": "2941480",
    "end": "2947040"
  },
  {
    "text": "the third one uh or maybe the most complex ones I built using meta programming techniques um so um I",
    "start": "2947040",
    "end": "2954480"
  },
  {
    "text": "created this project pretty much called project Aus what project aous is gives you everything out of the box um just to",
    "start": "2954480",
    "end": "2962079"
  },
  {
    "text": "um this is still a work in progress I still need a lot of help with it it's just a GitHub project right now it's not",
    "start": "2962079",
    "end": "2968079"
  },
  {
    "text": "done by any means uh it's not even 0.1 but it works to an extent but what this",
    "start": "2968079",
    "end": "2974720"
  },
  {
    "text": "thing does is pretty much would give you the ability in a nutshell um a meta programming framework it gives you the",
    "start": "2974720",
    "end": "2980440"
  },
  {
    "text": "ability to pretty much all discover all these annotations uh in a within a particular package um it does annotation",
    "start": "2980440",
    "end": "2987119"
  },
  {
    "text": "processing for you in a dynamic model um it uh pretty much constructs that for",
    "start": "2987119",
    "end": "2992440"
  },
  {
    "text": "you and it does validation and what I sat there and it",
    "start": "2992440",
    "end": "2998040"
  },
  {
    "text": "was what would be the best way for me to allow people to uh pretty much Express",
    "start": "2998040",
    "end": "3004680"
  },
  {
    "text": "the semantics of their meta model um easily and in in a very nice and",
    "start": "3004680",
    "end": "3010040"
  },
  {
    "text": "simplistic way and it was annotations annotations or annotations that was the",
    "start": "3010040",
    "end": "3016359"
  },
  {
    "text": "simplest way that I I could I I could have came up with so I created a set of annotations uh and you might think about",
    "start": "3016359",
    "end": "3024000"
  },
  {
    "text": "it as meta metadata so um and there's a set of them right",
    "start": "3024000",
    "end": "3029960"
  },
  {
    "text": "here U accompanied accompanied with accompanied with at least one four type four type annotated with four type",
    "start": "3029960",
    "end": "3037520"
  },
  {
    "text": "included um I'm going to use one of them and give you an example and show you some code um if you are writing",
    "start": "3037520",
    "end": "3043960"
  },
  {
    "text": "hibernate for example and you create an annotation called at table that was supposed to um map to an actual table in",
    "start": "3043960",
    "end": "3052200"
  },
  {
    "text": "your data store you want to ensure that there's all always an ID that there's",
    "start": "3052200",
    "end": "3057559"
  },
  {
    "text": "always a field within the type class called ID so when you define your",
    "start": "3057559",
    "end": "3062720"
  },
  {
    "text": "annotation you define the retention type and everything you would say uh for type",
    "start": "3062720",
    "end": "3067839"
  },
  {
    "text": "including ID and the framework would actually go uh create the um um Jews",
    "start": "3067839",
    "end": "3074559"
  },
  {
    "text": "rules for you and kind of go over your meta model and make sure that that's actually accurate not accompanied with",
    "start": "3074559",
    "end": "3081079"
  },
  {
    "text": "is a is another one uh this is the GitHub project it's",
    "start": "3081079",
    "end": "3086200"
  },
  {
    "text": "nowhere near done probably going to be doing more work with it um and um around",
    "start": "3086200",
    "end": "3091240"
  },
  {
    "text": "this thing very um in in the next the next few months but let me show you an",
    "start": "3091240",
    "end": "3097160"
  },
  {
    "text": "example of how this thing um works so what I want I am a big fan of",
    "start": "3097160",
    "end": "3106078"
  },
  {
    "text": "onliners so I want you to pretty much do this and say aous new aous data.",
    "start": "3106400",
    "end": "3116079"
  },
  {
    "text": "notations which is pretty annotations which is pretty much the package that contains all your annotations you go and",
    "start": "3116079",
    "end": "3122880"
  },
  {
    "text": "Define 20 of them you just point my Ava to that particular package and they want",
    "start": "3122880",
    "end": "3128160"
  },
  {
    "text": "you to say construct Min model 4 and you give me a class for employee that's it I",
    "start": "3128160",
    "end": "3135359"
  },
  {
    "text": "construct the metal model dynamically I do the validation for you and it pretty much just give you here is your metadata",
    "start": "3135359",
    "end": "3141720"
  },
  {
    "text": "and here is a very nice interface for you that you can pretty much access at at run time um I will show you an",
    "start": "3141720",
    "end": "3149680"
  },
  {
    "text": "example of this class can you guys see it really well is everybody",
    "start": "3149680",
    "end": "3155079"
  },
  {
    "text": "fine so we have the the class that we're trying to construct that that you",
    "start": "3155079",
    "end": "3160359"
  },
  {
    "text": "created is um this one is an employee class and it has a bunch of annotations",
    "start": "3160359",
    "end": "3165480"
  },
  {
    "text": "it has an ID has a simple value a column and all of these things and it's like a",
    "start": "3165480",
    "end": "3170960"
  },
  {
    "text": "table at table TBL employees so those annotation are yours there's something",
    "start": "3170960",
    "end": "3177000"
  },
  {
    "text": "that you created so we're going to take one as an example we're going to take for example the table annotation you're",
    "start": "3177000",
    "end": "3184319"
  },
  {
    "text": "the one who writes hibernate you created at table for example all right the way",
    "start": "3184319",
    "end": "3189440"
  },
  {
    "text": "you're going to do it in Java is when over jsr 175 is we did public at interface table and it has one attribute",
    "start": "3189440",
    "end": "3195599"
  },
  {
    "text": "which is pretty much the name of the table we do at Target you can only have classes annotate classes with that and",
    "start": "3195599",
    "end": "3202480"
  },
  {
    "text": "you retain this thing until pretty much run time but I have two annotations that are a part of a vars which is the",
    "start": "3202480",
    "end": "3208440"
  },
  {
    "text": "framework that I provide and the first one says that for type included value ID",
    "start": "3208440",
    "end": "3213960"
  },
  {
    "text": "that class so this type must include something that's pretty much annotated",
    "start": "3213960",
    "end": "3219359"
  },
  {
    "text": "with that ID and the second one is like not accompanied with edible if you're familiar with hibernate",
    "start": "3219359",
    "end": "3226680"
  },
  {
    "text": "there is the concept of an edible poo and a table so a a a every every class",
    "start": "3226680",
    "end": "3234119"
  },
  {
    "text": "every pojo every entity maps to a table but it can have nested entities and",
    "start": "3234119",
    "end": "3239480"
  },
  {
    "text": "they've just pretty much called embeddable so it makes sense for an actual entity and an edible n to be the",
    "start": "3239480",
    "end": "3246760"
  },
  {
    "text": "same because um it just does not make sense that way you embed something in a in an",
    "start": "3246760",
    "end": "3253680"
  },
  {
    "text": "entity and that one is the embeddable and this one is the table as well so and they have those rules around this",
    "start": "3253680",
    "end": "3259359"
  },
  {
    "text": "particular annotation um um I have other ones I can",
    "start": "3259359",
    "end": "3264799"
  },
  {
    "text": "I can show you maybe I should show you all the annotations that I defined this is the test project that pretty much",
    "start": "3264799",
    "end": "3270760"
  },
  {
    "text": "include that one I have for example column right and I have a rule that a",
    "start": "3270760",
    "end": "3276119"
  },
  {
    "text": "column should not be accompanied with ID you annotate something a field called ID you don't annotate it as column as",
    "start": "3276119",
    "end": "3282960"
  },
  {
    "text": "simple as that and so forth a bunch of them right here right um simple value",
    "start": "3282960",
    "end": "3289640"
  },
  {
    "text": "for example is a little more complex it's like not accompanied with composite values you could either be simple you",
    "start": "3289640",
    "end": "3294799"
  },
  {
    "text": "could be be pretty much composite all right so enough of this and let's go",
    "start": "3294799",
    "end": "3300799"
  },
  {
    "text": "back to um let's get rid of this let's go back to the actual main",
    "start": "3300799",
    "end": "3309960"
  },
  {
    "text": "code let's go let's go to Main and I do",
    "start": "3309960",
    "end": "3316640"
  },
  {
    "text": "this so This framework pretty much does not only take classes right here does not",
    "start": "3316640",
    "end": "3324359"
  },
  {
    "text": "construct met models for like a class only it constructs meta models in fact",
    "start": "3324359",
    "end": "3329599"
  },
  {
    "text": "for anything in Java that could be annotated any annotated element so right there what I have is I pretty much got a",
    "start": "3329599",
    "end": "3337680"
  },
  {
    "text": "field of the employee class called ID a declared field called ID which is this",
    "start": "3337680",
    "end": "3343039"
  },
  {
    "text": "guy right here all right so what I'm going to do is I'm going to tell the framework to",
    "start": "3343039",
    "end": "3348760"
  },
  {
    "text": "construct The Meta model for ID and run this code I hope it runs you know it goes in",
    "start": "3348760",
    "end": "3357400"
  },
  {
    "text": "there and I get pretty much this information it just say out printed it",
    "start": "3357400",
    "end": "3362960"
  },
  {
    "text": "printed it out for you uh just to see it but it says that this guy is a field the",
    "start": "3362960",
    "end": "3368440"
  },
  {
    "text": "pro property navigational path for is pretty much ID and it gives us the the",
    "start": "3368440",
    "end": "3373720"
  },
  {
    "text": "actual field itself this guy is annotated with um um an ID a simple",
    "start": "3373720",
    "end": "3380400"
  },
  {
    "text": "value all right and with an ID and um it gives whose is see that it extracted the",
    "start": "3380400",
    "end": "3387720"
  },
  {
    "text": "type which is pretty much provided um it",
    "start": "3387720",
    "end": "3392880"
  },
  {
    "text": "extracted yeah it's it's Prett pretty much said that it was annotated with this with this interface called pretty",
    "start": "3396680",
    "end": "3403760"
  },
  {
    "text": "much ID and other information I mean this is probably like a um let's pick",
    "start": "3403760",
    "end": "3409880"
  },
  {
    "text": "another example this one is not as friendly as I thought it would be and let's just pick and and say um last name",
    "start": "3409880",
    "end": "3417960"
  },
  {
    "text": "for example and the information that we we supposed to pretty much get from like last",
    "start": "3417960",
    "end": "3423000"
  },
  {
    "text": "name is like family HR and then qualify was first name for an ID called first",
    "start": "3423000",
    "end": "3429079"
  },
  {
    "text": "name for this particular this particular",
    "start": "3429079",
    "end": "3434000"
  },
  {
    "text": "field and we just say give me the",
    "start": "3434200",
    "end": "3441119"
  },
  {
    "text": "first name Minal",
    "start": "3441119",
    "end": "3446799"
  },
  {
    "text": "and there it is it says that this guy was annotated with column and this is the meta information that is associated",
    "start": "3447319",
    "end": "3453920"
  },
  {
    "text": "with the actual column itself um I can assure you that this is not just reading",
    "start": "3453920",
    "end": "3459559"
  },
  {
    "text": "off the actual simply reading off that particular um annotation displaying it that way it's actually in a dynamic data",
    "start": "3459559",
    "end": "3466920"
  },
  {
    "text": "structure uh that was pretty much printed that way right there so there is",
    "start": "3466920",
    "end": "3472000"
  },
  {
    "text": "um and this is actually the next piece that I'm going to that I'm hoping to work on is pretty much to provide a",
    "start": "3472000",
    "end": "3477960"
  },
  {
    "text": "programmatic interface that would allow you easily to pretty much extract and say for this particular element what is",
    "start": "3477960",
    "end": "3484079"
  },
  {
    "text": "the value for family or what are the values that are like available and things things of that of that sort but",
    "start": "3484079",
    "end": "3490280"
  },
  {
    "text": "what we want to do is want to test out like the hard piece which is pretty much annotations and break this guy so I'm",
    "start": "3490280",
    "end": "3496319"
  },
  {
    "text": "going to go to um to this first name guy and annotate",
    "start": "3496319",
    "end": "3501920"
  },
  {
    "text": "as ID notice that I have two problems right there the first problem is that I",
    "start": "3501920",
    "end": "3507039"
  },
  {
    "text": "have two IDs that are within the employee one and something that I didn't allow is pretty much to annotate the",
    "start": "3507039",
    "end": "3512400"
  },
  {
    "text": "same thing with ID and column at the same time and they go and pretty much run my um my code and I get an error",
    "start": "3512400",
    "end": "3521319"
  },
  {
    "text": "right the first one is it says that the enate private Java string and first name",
    "start": "3521319",
    "end": "3526359"
  },
  {
    "text": "cannot be annotated with with both at column and any other annotation and it",
    "start": "3526359",
    "end": "3531720"
  },
  {
    "text": "gives me for example the the one that with the problem which is pretty much ID the second one is the element string",
    "start": "3531720",
    "end": "3538400"
  },
  {
    "text": "whatever it is employee annotated with ID must be of type",
    "start": "3538400",
    "end": "3543599"
  },
  {
    "text": "bite that's one of my rules as well that I didn't tell you about I",
    "start": "3543599",
    "end": "3550119"
  },
  {
    "text": "change the ID to Long",
    "start": "3550119",
    "end": "3555279"
  },
  {
    "text": "right I change all the IDS too long",
    "start": "3557319",
    "end": "3563640"
  },
  {
    "text": "and hold on I Chang all my IDs too long and",
    "start": "3563640",
    "end": "3571559"
  },
  {
    "text": "they run this and they get pretty much like feedback hold on",
    "start": "3571559",
    "end": "3578400"
  },
  {
    "text": "oh I'm good didn't break I broke for a second and they get",
    "start": "3578400",
    "end": "3583720"
  },
  {
    "text": "the meta inform metadata for like ID and they run it I'm expecting to say you're",
    "start": "3583720",
    "end": "3590280"
  },
  {
    "text": "not allowed to have use anything other than bite for that particular you're not",
    "start": "3590280",
    "end": "3595640"
  },
  {
    "text": "allowed to annotate anything other than than bite for The annotation ID at ID",
    "start": "3595640",
    "end": "3601960"
  },
  {
    "text": "um this um and then you can pass it the entire class we're just going to do that",
    "start": "3601960",
    "end": "3607000"
  },
  {
    "text": "for fun let me uh fix my uh my bite thing deal here so everything",
    "start": "3607000",
    "end": "3615160"
  },
  {
    "text": "would pass and then we're just going to run the entire thing and there you",
    "start": "3615160",
    "end": "3623559"
  },
  {
    "text": "go it goes in my class extract all the information all the metadata associated",
    "start": "3623559",
    "end": "3629559"
  },
  {
    "text": "with the class itself and um the children of that particular the nested",
    "start": "3629559",
    "end": "3635160"
  },
  {
    "text": "annotated element of that particular element right there um how this is",
    "start": "3635160",
    "end": "3640200"
  },
  {
    "text": "pretty much done if you're curious and you would like to talk to me about it the project is in GitHub as well is um",
    "start": "3640200",
    "end": "3647559"
  },
  {
    "text": "this right here this um this data structure uh everything that is blue is",
    "start": "3647559",
    "end": "3652640"
  },
  {
    "text": "pretty much decorator patterns that would pretty much much go through all your classes and goes and build that meta model dynamically for you right uh",
    "start": "3652640",
    "end": "3661359"
  },
  {
    "text": "the second part right here is um the red part is what does actually the actual annotating annotation and annotation",
    "start": "3661359",
    "end": "3667480"
  },
  {
    "text": "processing and creates this blue model uh the green parts that's pretty much what is pretty much what gets",
    "start": "3667480",
    "end": "3673240"
  },
  {
    "text": "autogenerated for you because when I go through the package and I look at all your annotations I read them off I read",
    "start": "3673240",
    "end": "3679319"
  },
  {
    "text": "off all the metadata is associated with them I go and pretty much prepare a set of classes for you as classes of for you",
    "start": "3679319",
    "end": "3686680"
  },
  {
    "text": "um and complete the decoror design pattern uh for you otherwise you're",
    "start": "3686680",
    "end": "3692240"
  },
  {
    "text": "going to have to go and provide an implementation here implementation here and implementation here for every one of",
    "start": "3692240",
    "end": "3697760"
  },
  {
    "text": "your um uh for every one of your uh of your um um annotations if you want to",
    "start": "3697760",
    "end": "3704119"
  },
  {
    "text": "process them if you want to create this very nice Dynamic data model you don't have to do that because I do that for",
    "start": "3704119",
    "end": "3710880"
  },
  {
    "text": "you I use this bite code manipulation libraries to actually go on complete those data structures and they pretty",
    "start": "3710880",
    "end": "3716319"
  },
  {
    "text": "much call them a one time right one thing that is pretty much important is the concept of pretty much validation",
    "start": "3716319",
    "end": "3722480"
  },
  {
    "text": "right there um I spoke to you briefly guys about about",
    "start": "3722480",
    "end": "3727880"
  },
  {
    "text": "jewels uh I dynamically create those rules so I go for example in your column",
    "start": "3727880",
    "end": "3733520"
  },
  {
    "text": "annotation right here and you told me that you should never allow an add",
    "start": "3733520",
    "end": "3738799"
  },
  {
    "text": "column to be pretty much at ID uh what What's happening in the background right there is I have pretty pretty much a",
    "start": "3738799",
    "end": "3744839"
  },
  {
    "text": "rules rule template for not accompanied with that Define all these rules this is",
    "start": "3744839",
    "end": "3752480"
  },
  {
    "text": "pretty much just like a template and I go at compile time discover all those all of those classes right there and",
    "start": "3752480",
    "end": "3759160"
  },
  {
    "text": "create these rules this rule of not accompanied with for every single one of",
    "start": "3759160",
    "end": "3765760"
  },
  {
    "text": "your annotations that you're provided this is something that if you want to do things the right way and nicely uh",
    "start": "3765760",
    "end": "3772000"
  },
  {
    "text": "you're going to have pretty much to do your um to do your stuff and um at the end we end up with let me see if",
    "start": "3772000",
    "end": "3779319"
  },
  {
    "text": "actually um if that file actually came out before I I tell you",
    "start": "3779319",
    "end": "3786680"
  },
  {
    "text": "anything see if it's in the Target no it's on there so you end up with pretty much this huge rule files that I",
    "start": "3787039",
    "end": "3794119"
  },
  {
    "text": "actually validate against every time you pass me like a particular entity or every time you pass me a class so you",
    "start": "3794119",
    "end": "3799680"
  },
  {
    "text": "get all the stuff for free um I'm hoping that this pretty much this is going to",
    "start": "3799680",
    "end": "3805079"
  },
  {
    "text": "materialize to something that a lot of people use um I went down the source code of big libraries like hibernate",
    "start": "3805079",
    "end": "3811720"
  },
  {
    "text": "different implementations of jpa to kind of see how they actually go and construct this meta model and and I was",
    "start": "3811720",
    "end": "3818319"
  },
  {
    "text": "very much interested in the actual fact of validating that that semantic model um that the meta model that they got",
    "start": "3818319",
    "end": "3824640"
  },
  {
    "text": "that they ended up with semantically and most of them was pretty much a bunch of if statements that they pretty much have",
    "start": "3824640",
    "end": "3829960"
  },
  {
    "text": "to maintain uh but this is a framework and that's the hard part about be in a framework you're too generic and um you",
    "start": "3829960",
    "end": "3837720"
  },
  {
    "text": "should pretty much be ready for people to throw anything at you thank you very much for your",
    "start": "3837720",
    "end": "3845720"
  },
  {
    "text": "[Music]",
    "start": "3846540",
    "end": "3852119"
  },
  {
    "text": "time",
    "start": "3852119",
    "end": "3855119"
  }
]