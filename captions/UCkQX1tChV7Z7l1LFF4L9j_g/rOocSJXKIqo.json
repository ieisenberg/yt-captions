[
  {
    "text": "[Music]",
    "start": "3270",
    "end": "8730"
  },
  {
    "text": "thank you so much an um I'm Holly cumins I work for Red Hat I'm one of the engineers who who's helping to to build",
    "start": "10920",
    "end": "17840"
  },
  {
    "text": "quarcus and just as a as a level set before I start um how many of you are",
    "start": "17840",
    "end": "23400"
  },
  {
    "text": "Java folks most of you okay and how many of you are using quarcus",
    "start": "23400",
    "end": "31279"
  },
  {
    "text": "a few how many of you have not even heard of quarcus but just sort of came along cool um so I've worked on Java for",
    "start": "31279",
    "end": "40680"
  },
  {
    "text": "for most of my career um and I'm here to talk about Java but I want to actually start by talking a little bit about rust",
    "start": "40680",
    "end": "48559"
  },
  {
    "text": "um I I am not a rust developer I I have never developed rust um and I'm not here",
    "start": "48559",
    "end": "54079"
  },
  {
    "text": "to to criticize rust um but actually I'm going to start by criticizing rust um",
    "start": "54079",
    "end": "61120"
  },
  {
    "text": "because how um how many of you were in the r talk this morning quite a few I",
    "start": "61120",
    "end": "66320"
  },
  {
    "text": "was yeah it was a very good talk I felt really really bad for what I knew was in my slides when I was in that talk um and",
    "start": "66320",
    "end": "73799"
  },
  {
    "text": "of course you know rust has so many amazing features it's so well- engineered it's it's really a needed",
    "start": "73799",
    "end": "79799"
  },
  {
    "text": "language and it is it is incredibly efficient but rust does have a problem",
    "start": "79799",
    "end": "86920"
  },
  {
    "text": "there's a reason I have never learned rust which is is rust has a reputation for being really hard to learn and I am",
    "start": "86920",
    "end": "95560"
  },
  {
    "text": "lazy and you know this is something that you see everywhere in the community people talk about how hard rust is you",
    "start": "95560",
    "end": "102680"
  },
  {
    "text": "know it's too difficult to be widely adopted and even people who really Advocate strongly for rust will talk",
    "start": "102680",
    "end": "109479"
  },
  {
    "text": "about how hard it is so I love the title of this article why rust is worth the struggle and you know they start by",
    "start": "109479",
    "end": "115600"
  },
  {
    "text": "saying you know with rust you you approach it with trepidation because it's got this notoriously difficult learning curve and I love this rust is",
    "start": "115600",
    "end": "123560"
  },
  {
    "text": "the hardest language up to that time I've met so when you think",
    "start": "123560",
    "end": "129000"
  },
  {
    "text": "about rust one of the things that makes well when people talk about rust people",
    "start": "129000",
    "end": "134680"
  },
  {
    "text": "will tell you that rust doesn't have garbage collection and that's one of the things that makes it efficient um I have",
    "start": "134680",
    "end": "141680"
  },
  {
    "text": "some questions about that but that's a whole different talk which I I don't have time for so if we if we start with",
    "start": "141680",
    "end": "147120"
  },
  {
    "text": "the assumption that not having garbage collection makes a language performant which is wrong but if we start with that",
    "start": "147120",
    "end": "154120"
  },
  {
    "text": "assumption what happens if we add garbage collection to",
    "start": "154120",
    "end": "159200"
  },
  {
    "text": "rust now at this point all of the people who are rust developers are sort of screaming quietly in the corner going",
    "start": "159200",
    "end": "164879"
  },
  {
    "text": "why would you do that why would you do that so what happens if you do that it",
    "start": "164879",
    "end": "171080"
  },
  {
    "text": "turns out if you do that rust becomes much easier to use and they added a",
    "start": "171080",
    "end": "179080"
  },
  {
    "text": "layer of garbage collection on top of rust and then they had a bunch of volunteers do a coding task the people",
    "start": "179080",
    "end": "185239"
  },
  {
    "text": "who had the garbage collected version were more likely to complete the task and they did it in a third of the time",
    "start": "185239",
    "end": "193599"
  },
  {
    "text": "so now I think we really need to rethink the efficiency of rust because rust is",
    "start": "193599",
    "end": "199200"
  },
  {
    "text": "very efficient in terms of its computational resources but if you can make something",
    "start": "199200",
    "end": "207040"
  },
  {
    "text": "add in garbage collection is that really an efficient language rust maybe is not",
    "start": "207040",
    "end": "212400"
  },
  {
    "text": "so efficient and and there's always this tradeoff right of you've got your human efficiency and your machine efficiency",
    "start": "212400",
    "end": "219400"
  },
  {
    "text": "and with rust they've you know really gone all in on the machine efficiency at",
    "start": "219400",
    "end": "225360"
  },
  {
    "text": "the expense of human efficiency so then the question is",
    "start": "225360",
    "end": "232200"
  },
  {
    "text": "well that's the tradeoff I don't like that tradeoff um",
    "start": "232200",
    "end": "237360"
  },
  {
    "text": "and In fairness to rust I think R don't like that trade-off either which is why they have all of the things like the the really powerful compiler and that's",
    "start": "237360",
    "end": "244439"
  },
  {
    "text": "that's something that we'll we'll come back to as well but the question is can we can we do",
    "start": "244439",
    "end": "249599"
  },
  {
    "text": "better and this is where quarkus comes in so quarcus is a Java framework um the",
    "start": "249599",
    "end": "256880"
  },
  {
    "text": "programming model will be very familiar to you we have Integrations with the libraries that you're almost certainly already using like hibernate like rest",
    "start": "256880",
    "end": "264639"
  },
  {
    "text": "easy but it's got some really nice characteristics",
    "start": "264639",
    "end": "270199"
  },
  {
    "text": "one of those and this is probably the thing that people think of when they think of quarkus is that quarcus",
    "start": "270199",
    "end": "275440"
  },
  {
    "text": "applications start really fast",
    "start": "275440",
    "end": "280840"
  },
  {
    "text": "so you can run quarcus with grvm as a natively compiled",
    "start": "280840",
    "end": "287400"
  },
  {
    "text": "biny or you can run it on Open jdk either way it starts really really",
    "start": "289840",
    "end": "296919"
  },
  {
    "text": "fast um if you run it with grvm actually starts faster than an LED light bulb so",
    "start": "296919",
    "end": "302120"
  },
  {
    "text": "just to give you a scale of how instantaneous the start is but quarcus applications also have a",
    "start": "302120",
    "end": "309160"
  },
  {
    "text": "really low memory footprint and when we used to run on dedicated Hardware this",
    "start": "309160",
    "end": "314639"
  },
  {
    "text": "didn't really matter now that we run in the cloud where memory footprint is money being able to shrink our instances",
    "start": "314639",
    "end": "320319"
  },
  {
    "text": "and have a higher deployment density really matters and so if you compare",
    "start": "320319",
    "end": "326039"
  },
  {
    "text": "quarcus to the cloud native stack that you're probably all using if you are architecting for",
    "start": "326039",
    "end": "332240"
  },
  {
    "text": "Java we are a lot smaller you can fit a lot more quarcus instances in but it's",
    "start": "332240",
    "end": "338400"
  },
  {
    "text": "not just when you compare it to other Java Frameworks when you compare quarcus",
    "start": "338400",
    "end": "343800"
  },
  {
    "text": "even to other programming languages you can see that we're we're competing with",
    "start": "343800",
    "end": "349800"
  },
  {
    "text": "go in terms of our deployment density and no JS is has a higher deployment",
    "start": "349800",
    "end": "357120"
  },
  {
    "text": "density than old school Java but but it's not as good as quarkus so this is",
    "start": "357120",
    "end": "363800"
  },
  {
    "text": "cool and there's another thing that quarkus is quite good at which we don't talk about so much and I wish we would",
    "start": "363800",
    "end": "369919"
  },
  {
    "text": "talk about it more and that's through putut so if you look at your traditional",
    "start": "369919",
    "end": "375120"
  },
  {
    "text": "Cloud native stack you might get about 3,000 requests per second if you are taking",
    "start": "375120",
    "end": "383599"
  },
  {
    "text": "quarcus with the grm native compilation the throughput is a little",
    "start": "383599",
    "end": "390240"
  },
  {
    "text": "bit lower same order of magnitude but it's",
    "start": "390240",
    "end": "395400"
  },
  {
    "text": "lower and this is you know your classic tradeoff right you're trading off throughput against footprint and this is",
    "start": "395400",
    "end": "403319"
  },
  {
    "text": "something that I think we're probably all familiar with in all sorts of context so with Native",
    "start": "403319",
    "end": "409240"
  },
  {
    "text": "compilation you get a really G great startup time you get a great memory footprint but at the expense of",
    "start": "409240",
    "end": "416319"
  },
  {
    "text": "throughput and many years ago I I worked as a Java performance",
    "start": "416319",
    "end": "421879"
  },
  {
    "text": "engineer and one of the questions we always got was well I don't like all of this stuff this jit and that kind of",
    "start": "421879",
    "end": "428240"
  },
  {
    "text": "thing couldn't we do ahead of time compilation and the answer was at that time no this is a really terrible idea",
    "start": "428240",
    "end": "435039"
  },
  {
    "text": "don't do ahead of compilation it will make your application slower now the answer is well it only",
    "start": "435039",
    "end": "442319"
  },
  {
    "text": "makes your application a little bit slower and it makes it so much more compact native compilation is a pretty",
    "start": "442319",
    "end": "448160"
  },
  {
    "text": "reasonable choice not for every circumstance but for some use cases like CIS like",
    "start": "448160",
    "end": "454599"
  },
  {
    "text": "serverless this this is an awesome trade-off because you're not losing that much throughput but and I mentioned you know",
    "start": "454599",
    "end": "461400"
  },
  {
    "text": "this is a classic trade-off this is something that we see I just grabbed one thing off off off um of core but you",
    "start": "461400",
    "end": "467680"
  },
  {
    "text": "know we see this sort of trade-off all the time do I optimize my throughput or do I optimize my memory depends what",
    "start": "467680",
    "end": "473440"
  },
  {
    "text": "you're doing so let's look at the throughput a",
    "start": "473440",
    "end": "478759"
  },
  {
    "text": "little bit more then because this is the throughput for quarcus Native what about quarcus on jvm it's",
    "start": "478759",
    "end": "486120"
  },
  {
    "text": "actually going faster than the alternative while having a smaller",
    "start": "486120",
    "end": "492319"
  },
  {
    "text": "memory footprint and a better startup time that's kind of",
    "start": "492319",
    "end": "498199"
  },
  {
    "text": "unexpected and so you know there is no trade-off we we just made it",
    "start": "498199",
    "end": "503280"
  },
  {
    "text": "better and so really you know we sort of we took this trade-off that everybody knows exists and we broke it so instead",
    "start": "503280",
    "end": "511280"
  },
  {
    "text": "of having to choose between the two you get both and they're both",
    "start": "511280",
    "end": "517120"
  },
  {
    "text": "better and so I I I always start of try and think well what's the what's the right word for this you know it's a",
    "start": "517120",
    "end": "522680"
  },
  {
    "text": "double win um and I've I've tried a few so I've tried like tuur um but that",
    "start": "522680",
    "end": "528440"
  },
  {
    "text": "Americans know what that means every and's looking really confused in the front everybody else is like um someone",
    "start": "528440",
    "end": "535040"
  },
  {
    "text": "suggested I could should call it the Uber vindum and I don't speak German and so it's sounded really cool to me um but",
    "start": "535040",
    "end": "541440"
  },
  {
    "text": "it's become clear to me now that the person who suggested it also didn't speak German because whenever I say it to a German person they start laughing",
    "start": "541440",
    "end": "547920"
  },
  {
    "text": "at me German's a bit like rust I always felt like I should learn it and I never actually",
    "start": "547920",
    "end": "554959"
  },
  {
    "text": "did and and you may think well okay yes this isn't realistic you can't actually",
    "start": "554959",
    "end": "561240"
  },
  {
    "text": "fold a seesaw in half you can't beat the trade-off it turns out you can fold a",
    "start": "561240",
    "end": "566920"
  },
  {
    "text": "seesaw in half there are portable SE saws that are can fold in",
    "start": "566920",
    "end": "573320"
  },
  {
    "text": "half so how does how does this work what what's the secret well of course there's",
    "start": "573320",
    "end": "579040"
  },
  {
    "text": "not just one thing right it's not like this one performance optimization will allow you to beat all trade-offs there's",
    "start": "579040",
    "end": "585720"
  },
  {
    "text": "there's a whole bunch of things um and today I I'll talk about some of the ones that I think are more",
    "start": "585720",
    "end": "592800"
  },
  {
    "text": "interesting and really you know with with a lot of these this the starting point is you have to challenge",
    "start": "592800",
    "end": "600800"
  },
  {
    "text": "assumptions and in particular you have to challenge outdated assumptions because there were things that were a",
    "start": "600800",
    "end": "606440"
  },
  {
    "text": "good idea five years ago things that were a good idea 10 years ago that now are a bad idea so we need to keep",
    "start": "606440",
    "end": "612839"
  },
  {
    "text": "revisiting this knowledge that we've that we've baked in um this by the way I",
    "start": "612839",
    "end": "618959"
  },
  {
    "text": "was I sort of I was like oh can I do this because I don't know if you've heard the saying when you assume you",
    "start": "618959",
    "end": "624160"
  },
  {
    "text": "make an ass of you and me and this is an African wild ass",
    "start": "624160",
    "end": "630240"
  },
  {
    "text": "so the first assumption that we need to challenge is this idea that we should be",
    "start": "630800",
    "end": "638320"
  },
  {
    "text": "dynamic and this one I think is a really hard one right because everybody knows being Dynamic being Dynamic is good and",
    "start": "638320",
    "end": "646000"
  },
  {
    "text": "I know being Dynamic is good um so you've probably seen a few mentions of",
    "start": "646000",
    "end": "651480"
  },
  {
    "text": "of an's book today and and probably some of you got a got a signed copy and I was I was a technical reviewer for the book",
    "start": "651480",
    "end": "658600"
  },
  {
    "text": "and I was reading through and I kept reading this bit where an would say and and Sarah and Sarah would say oh and you",
    "start": "658600",
    "end": "664880"
  },
  {
    "text": "know we need to stop doing this because it's on demand and I was thinking that's kind of weird I I always thought on",
    "start": "664880",
    "end": "670959"
  },
  {
    "text": "demand was good I thought on demand made things efficient and this is sort of",
    "start": "670959",
    "end": "676560"
  },
  {
    "text": "true right doing something on demand is a lot better than doing it when there's",
    "start": "676560",
    "end": "681880"
  },
  {
    "text": "no demand and never will be a demand but when you do something on demand you're",
    "start": "681880",
    "end": "687959"
  },
  {
    "text": "often doing it at the most EXP expensive time you're often doing it at the worst time and so you can optimize further and",
    "start": "687959",
    "end": "695480"
  },
  {
    "text": "you can do something when it hurts you least but this does need some unlearning because we definitely I think all of us",
    "start": "695480",
    "end": "702120"
  },
  {
    "text": "you know we have this idea of like I'm going to be really efficient I'm going to do it on demand no stop um but being",
    "start": "702120",
    "end": "707800"
  },
  {
    "text": "on Demand Being Dynamic is how how we architected Java for the longest time so",
    "start": "707800",
    "end": "715200"
  },
  {
    "text": "historically Java Frameworks they were such clever engineering and they were optimized for really long lived",
    "start": "715200",
    "end": "722480"
  },
  {
    "text": "processes because we didn't have cicd doing operations was terrible and so you just made sure that once you got that",
    "start": "722480",
    "end": "727720"
  },
  {
    "text": "thing up it stayed up ideally for like a year maybe two years but of course the",
    "start": "727720",
    "end": "734440"
  },
  {
    "text": "world didn't stay the same and so what we had to do was we had to learn how to",
    "start": "734440",
    "end": "739760"
  },
  {
    "text": "change the engine while the plane was flying so we got really good at late binding we got really good at Dynamic",
    "start": "739760",
    "end": "746399"
  },
  {
    "text": "binding at you know dyn dynamic finding so that we could change parts of the",
    "start": "746399",
    "end": "751720"
  },
  {
    "text": "system without doing a complete redeployment and you know everything was",
    "start": "751720",
    "end": "757360"
  },
  {
    "text": "oriented towards how can I reconfigure this thing without restarting it because if I restart it it might never come up",
    "start": "757360",
    "end": "764600"
  },
  {
    "text": "again because I've I have experience of these things so we we optimized everything we",
    "start": "764600",
    "end": "771240"
  },
  {
    "text": "optimized Java itself we optimized all of the Frameworks on top of it for dynamism of course this kind of dynamism",
    "start": "771240",
    "end": "779480"
  },
  {
    "text": "isn't free it it has a cost and that cost is worth paying if you're getting",
    "start": "779480",
    "end": "785279"
  },
  {
    "text": "something for it but of course how do we run our applications now we do not throw",
    "start": "785279",
    "end": "790360"
  },
  {
    "text": "them over the wall to the op steam who leave it up for a year we run things in the cloud we run things in containers",
    "start": "790360",
    "end": "797680"
  },
  {
    "text": "and so our applications are immutable that's how we build them we have it in a container you",
    "start": "797680",
    "end": "805680"
  },
  {
    "text": "does anybody patch their containers in production no hands this is good right if someone",
    "start": "805680",
    "end": "812199"
  },
  {
    "text": "said to you I patch my containers in production you'd be like what are you doing why are you doing that we have cicd just rebuild the thing that's the",
    "start": "812199",
    "end": "819240"
  },
  {
    "text": "more secure that's that's that's the way to do it but our framework still has all",
    "start": "819240",
    "end": "824440"
  },
  {
    "text": "of this optimization for for dynamism but we're running it in a container so it's completely pointless it is it is",
    "start": "824440",
    "end": "832839"
  },
  {
    "text": "waste so let's have a look at how we've implemented this dynamism in Java we",
    "start": "832920",
    "end": "839440"
  },
  {
    "text": "have a bunch of things that happen at build time and we have a bunch of things that happen at runtime but actually the",
    "start": "839440",
    "end": "845320"
  },
  {
    "text": "the bunch of things that happen at build time it's pretty small it's pretty much packaging and compilation to bite code",
    "start": "845320",
    "end": "853240"
  },
  {
    "text": "and that is it all of the other excitement happens at runtime so the first thing that happens at runtime is",
    "start": "853240",
    "end": "859480"
  },
  {
    "text": "the files are loaded config files get pars properties files get parsed the yl gets parsed the XML gets",
    "start": "859480",
    "end": "865880"
  },
  {
    "text": "parsed and then once we've done that then there's class P planning there's annotation Discovery um quite often",
    "start": "865880",
    "end": "872920"
  },
  {
    "text": "because things are Dynamic we sort of try and load classes to see if we should enable or disable features and then we",
    "start": "872920",
    "end": "879720"
  },
  {
    "text": "keep going and then eventually the framework will be able to build this meta model and then after that we do the",
    "start": "879720",
    "end": "886680"
  },
  {
    "text": "things that are quite environment specific so we start the thread pools we initialize the io and then eventually after all of that we're ready to do work",
    "start": "886680",
    "end": "894399"
  },
  {
    "text": "but we've done quite a lot of work before before we did any work and this",
    "start": "894399",
    "end": "900040"
  },
  {
    "text": "is you know even before we consider any of the sort of the the the Java features",
    "start": "900040",
    "end": "905959"
  },
  {
    "text": "like the jit so what happens if we start this",
    "start": "905959",
    "end": "913079"
  },
  {
    "text": "application more than once then we do all of that work the first time we do it again the second time we do it again the",
    "start": "913079",
    "end": "919720"
  },
  {
    "text": "third time we do it again the fourth time and there's so much work each time so it's you know it's a little bit like",
    "start": "919720",
    "end": "926600"
  },
  {
    "text": "groundh talk day where we're doing the same work each time time or it's a little bit like you know a goldfish where it's got this 30C memory and the",
    "start": "926600",
    "end": "935000"
  },
  {
    "text": "application has no memory of the answers that it just worked out and it has to do the same introspection each",
    "start": "935000",
    "end": "943160"
  },
  {
    "text": "time let's look at some examples so in hibernate it will try and bind to a",
    "start": "943160",
    "end": "950440"
  },
  {
    "text": "bunch of internal services so for example it might try and bind to JTA for your transactions so the first thing it",
    "start": "950440",
    "end": "956720"
  },
  {
    "text": "does is it doesn't know what's around it so it says okay well let me do a class a reflective load of an implementation oh",
    "start": "956720",
    "end": "963560"
  },
  {
    "text": "no it's not there okay let me try another possible implementation nope",
    "start": "963560",
    "end": "968800"
  },
  {
    "text": "it's not there let me try another implementation nope it's not there it keeps going keeps going it keeps going",
    "start": "968800",
    "end": "974399"
  },
  {
    "text": "and of course each time it does this reflective load it's not just the expense of the load each time a class",
    "start": "974399",
    "end": "980800"
  },
  {
    "text": "not found exception is thrown and throwing exceptions is",
    "start": "980800",
    "end": "986440"
  },
  {
    "text": "expensive and it does this 129 n times because hibernate has support for a wide",
    "start": "986440",
    "end": "992079"
  },
  {
    "text": "range of possible JTA implementations and it does that every single time it",
    "start": "992079",
    "end": "998199"
  },
  {
    "text": "starts and you know this isn't just JTA this is their similar processes for for",
    "start": "998199",
    "end": "1003720"
  },
  {
    "text": "lots of internal services and we see similar problems with footprint so again with hibernate",
    "start": "1003720",
    "end": "1011240"
  },
  {
    "text": "it has support for lots of databases and so it loads the classes",
    "start": "1011240",
    "end": "1016319"
  },
  {
    "text": "for these databases and then eventually",
    "start": "1016319",
    "end": "1021920"
  },
  {
    "text": "hopefully they're never used and the jit works out that they're not used and it",
    "start": "1021920",
    "end": "1029798"
  },
  {
    "text": "unloads them if you're lucky some classes get loaded and then they never get unloaded so for example the XML",
    "start": "1029799",
    "end": "1035839"
  },
  {
    "text": "paring glasses once they're loaded that's it they're in memory what even if they never get used again so this is",
    "start": "1035839",
    "end": "1041520"
  },
  {
    "text": "that same thing it's that really sort of forgetful model and there's a lot of these classes so for example for the",
    "start": "1041520",
    "end": "1048880"
  },
  {
    "text": "orle databases there's 500 classes and they are only useful if you're running an Oracle",
    "start": "1048880",
    "end": "1055679"
  },
  {
    "text": "database and so that's you know it it affects your startup time it affects",
    "start": "1057320",
    "end": "1062840"
  },
  {
    "text": "your footprint but it also affects your throughput so if you look for example at",
    "start": "1062840",
    "end": "1069440"
  },
  {
    "text": "how method dispatching works in the jvm if you have an interface and you've got a bunch of",
    "start": "1069440",
    "end": "1075919"
  },
  {
    "text": "implementations of it when when it tries to invoke the",
    "start": "1075919",
    "end": "1081559"
  },
  {
    "text": "method it kind of has to you know do quite a slow path for the dispatch",
    "start": "1081559",
    "end": "1086640"
  },
  {
    "text": "because it doesn't know which one it's going to at at some level and so this is",
    "start": "1086640",
    "end": "1092559"
  },
  {
    "text": "called a megamorph call and it's slow if you only have one or two",
    "start": "1092559",
    "end": "1099360"
  },
  {
    "text": "implementations of that interface the method dispatching is fast so by not",
    "start": "1099360",
    "end": "1105080"
  },
  {
    "text": "loading those classes in the first place you're actually getting a throughput win",
    "start": "1105080",
    "end": "1110520"
  },
  {
    "text": "which is quite subtle but but quite interesting so what the way you fix",
    "start": "1110520",
    "end": "1117640"
  },
  {
    "text": "this is to initialize that build time so the idea is that instead of redoing all",
    "start": "1117640",
    "end": "1123480"
  },
  {
    "text": "of this work we redo it once at build time and then at runtime we only do the",
    "start": "1123480",
    "end": "1130039"
  },
  {
    "text": "bare minimum that's going to be really dependent on the environment and what that means is if",
    "start": "1130039",
    "end": "1136360"
  },
  {
    "text": "you start repeatedly you've got that efficiency because you're only doing a small amount of work each time so that",
    "start": "1136360",
    "end": "1143799"
  },
  {
    "text": "is cool and really this is you know about eliminating",
    "start": "1143799",
    "end": "1149480"
  },
  {
    "text": "waste and as a bonus with this what it means is that if you want to do aot if",
    "start": "1149480",
    "end": "1155400"
  },
  {
    "text": "you want to do Native and grvm you're in a really good place but",
    "start": "1155400",
    "end": "1160440"
  },
  {
    "text": "even if you don't do that even if you're just running on the jvm as a normal application you've eliminated a whole",
    "start": "1160440",
    "end": "1167440"
  },
  {
    "text": "bunch of wasted repeated duplicate stupid work so really this is about doing more",
    "start": "1167440",
    "end": "1174000"
  },
  {
    "text": "upfront and the benefits that you get are it speeds up your start it shrinks",
    "start": "1174000",
    "end": "1179039"
  },
  {
    "text": "your memory footprint and then somewhat unexpectedly it also improves your",
    "start": "1179039",
    "end": "1185320"
  },
  {
    "text": "throughput but what this means is that all of the excitement all of the brains of the",
    "start": "1185320",
    "end": "1191360"
  },
  {
    "text": "framework is now at build time rather than at runtime and there's lots of",
    "start": "1191360",
    "end": "1197640"
  },
  {
    "text": "Frameworks so one of the things that we did in quarcus was we said well we have to make the build process extensible now",
    "start": "1197640",
    "end": "1204679"
  },
  {
    "text": "everybody has to be we have to be able to extend quarcus and they have to be able to participate in the build process",
    "start": "1204679",
    "end": "1210880"
  },
  {
    "text": "because that's where where the fun is happening so really this is I think with",
    "start": "1210880",
    "end": "1217080"
  },
  {
    "text": "anything that's sort of oriented around performance you have to have the right plug points so that your ecosystem can",
    "start": "1217080",
    "end": "1222200"
  },
  {
    "text": "participate and also contribute performance wins so what we've done in quarkus is we",
    "start": "1222200",
    "end": "1228840"
  },
  {
    "text": "have a framework which is build steps and build items and any extension can add build steps and build items and then",
    "start": "1228840",
    "end": "1236760"
  },
  {
    "text": "what we do is build steps get declared",
    "start": "1236760",
    "end": "1243039"
  },
  {
    "text": "and then an extension can declare a method that says I take in this build step and I output that build step and we",
    "start": "1243039",
    "end": "1249480"
  },
  {
    "text": "use that to dynamically order the build to make sure that things happen in the right time and everything has the",
    "start": "1249480",
    "end": "1255360"
  },
  {
    "text": "information that it needs so the framework automatically figur figures out what order it should build stuff",
    "start": "1255360",
    "end": "1262960"
  },
  {
    "text": "in and of course if you're if you're writing an extension or even if you're not you can look to see what's going on",
    "start": "1263440",
    "end": "1270120"
  },
  {
    "text": "with your build and you can see how long each build step is taking and and get the introspection",
    "start": "1270120",
    "end": "1275799"
  },
  {
    "text": "there but some of you are probably thinking wow if you move all of the work",
    "start": "1275799",
    "end": "1282240"
  },
  {
    "text": "to build time and I as a developer build locally a",
    "start": "1282240",
    "end": "1289039"
  },
  {
    "text": "lot that sounds kind of terrible so what we've done to mitigate",
    "start": "1289039",
    "end": "1294600"
  },
  {
    "text": "this is we've got this idea of live coding so live coding when I joined the",
    "start": "1294600",
    "end": "1300279"
  },
  {
    "text": "team I've been in the quarcus team for about two years when I joined the team I always called it hot reload and every time my colleagues would get really",
    "start": "1300279",
    "end": "1306520"
  },
  {
    "text": "annoyed with me and they'd be like it's not hot reload it's different from hotly reload and I think I now kind of",
    "start": "1306520",
    "end": "1313400"
  },
  {
    "text": "understand why we have three levels of reload and the framework which knows a",
    "start": "1313400",
    "end": "1318720"
  },
  {
    "text": "lot about your code because so much excitement is happening at build time it knows what the required level of reload",
    "start": "1318720",
    "end": "1325640"
  },
  {
    "text": "is so if it's something like a config file we can just reload the file or if it's something you know like",
    "start": "1325640",
    "end": "1332559"
  },
  {
    "text": "CSS or that kind of thing if it's something that maybe affects a little bit more of the codebase we have a jvm",
    "start": "1332559",
    "end": "1339279"
  },
  {
    "text": "agent and so it will do a Reload there and so we'll just dynamically replace the classes or if it's something pretty",
    "start": "1339279",
    "end": "1347039"
  },
  {
    "text": "invasive that you've changed it will do a full restart but you can see that full restart took one second so even when",
    "start": "1347039",
    "end": "1354640"
  },
  {
    "text": "it's completely bringing the whole framework down and bringing it back up again as a developer you didn't have to",
    "start": "1354640",
    "end": "1360080"
  },
  {
    "text": "ask it to do it and as a developer you probably don't even notice so that's cool so this is I think",
    "start": "1360080",
    "end": "1367760"
  },
  {
    "text": "this is a really nice Synergy here where because it starts so fast it means that",
    "start": "1367760",
    "end": "1373559"
  },
  {
    "text": "live coding is possible because as a developer you it will restart and you'll",
    "start": "1373559",
    "end": "1378640"
  },
  {
    "text": "you'll barely notice and I think this is really important because when we when we think",
    "start": "1378640",
    "end": "1384880"
  },
  {
    "text": "about the software development life cycle it used to be that Hardware was",
    "start": "1384880",
    "end": "1391080"
  },
  {
    "text": "really expensive and programmers were cheap now things have switched Hardware",
    "start": "1391080",
    "end": "1397240"
  },
  {
    "text": "is pretty cheap Hardware is a commodity but developers are really expensive um",
    "start": "1397240",
    "end": "1402640"
  },
  {
    "text": "and I know we shouldn't call people resources and people are not resources but on the other hand when we think",
    "start": "1402640",
    "end": "1407720"
  },
  {
    "text": "about a system people are resources and and you know we we we need to op efficiency is making use of your",
    "start": "1407720",
    "end": "1415799"
  },
  {
    "text": "resources in in an Optimum way to get the maximum value and so when we have a",
    "start": "1415799",
    "end": "1421840"
  },
  {
    "text": "system with people we need to make sure that those people are are doing valuable",
    "start": "1421840",
    "end": "1427200"
  },
  {
    "text": "things that those people are contributing and rather than just sitting and watching things",
    "start": "1427200",
    "end": "1432520"
  },
  {
    "text": "spin so how do you make people efficient well you you should have a",
    "start": "1432520",
    "end": "1439120"
  },
  {
    "text": "programming language that's hard to get wrong idiot proof um so you want strong",
    "start": "1439120",
    "end": "1445120"
  },
  {
    "text": "typing and you want garbage collection and then it's about having a",
    "start": "1445120",
    "end": "1450159"
  },
  {
    "text": "tight feedback loop so whether you're doing automated testing or manual testing you really need to know that if",
    "start": "1450159",
    "end": "1456320"
  },
  {
    "text": "you did get it wrong despite the idiot proofing you find out quickly and then typing is boring so we",
    "start": "1456320",
    "end": "1463480"
  },
  {
    "text": "want to don't we want to do less typing so Java gives us those two the strong",
    "start": "1463480",
    "end": "1469640"
  },
  {
    "text": "typing in the garbage collection I just showed that type feedback loop what about the typing so with",
    "start": "1469640",
    "end": "1478679"
  },
  {
    "text": "quarcus we've really tried to we've looked at the performance but then we've also really tried to focus on developer",
    "start": "1478679",
    "end": "1483720"
  },
  {
    "text": "joy and making sure that using quarcus is delightful and fast so one of the things that we do to",
    "start": "1483720",
    "end": "1491840"
  },
  {
    "text": "to enable this is indexing so indexing seems like it's actually just a",
    "start": "1491840",
    "end": "1497440"
  },
  {
    "text": "performance technique but we see it gives a lot of interesting benefits in terms of the programming",
    "start": "1497440",
    "end": "1503039"
  },
  {
    "text": "model so most Frameworks they you know if if it's",
    "start": "1503039",
    "end": "1508080"
  },
  {
    "text": "doing anything frameworking and non-trivial it needs to find all of the",
    "start": "1508080",
    "end": "1514039"
  },
  {
    "text": "classes it needs to find all of the interfaces that have some annotation because everything is annotations because we've learned that everything",
    "start": "1514039",
    "end": "1520159"
  },
  {
    "text": "shouldn't be XML and you also really often have to",
    "start": "1520159",
    "end": "1526320"
  },
  {
    "text": "find all of the classes that implement or extend some some class and annoyingly even though this is something that",
    "start": "1526320",
    "end": "1532480"
  },
  {
    "text": "almost every Java Library does Java doesn't really give us a lot of help for this there's nothing in the reflection",
    "start": "1532480",
    "end": "1538320"
  },
  {
    "text": "package that does this so what we've done is we have a library called",
    "start": "1538320",
    "end": "1543679"
  },
  {
    "text": "jendex which is basically offline reflection and it's really fast and it also",
    "start": "1543679",
    "end": "1549360"
  },
  {
    "text": "indexes it indexes things like the annotations but it also indexes who uses",
    "start": "1549360",
    "end": "1554559"
  },
  {
    "text": "you and you can start to see oh this could be this could be quite useful so what kind of things can we do with",
    "start": "1554559",
    "end": "1560440"
  },
  {
    "text": "the index what we can do is we can go back and we can start challenging more assumptions about what programming looks",
    "start": "1560440",
    "end": "1567440"
  },
  {
    "text": "like and we can say well what if developers didn't have to do this and that and this and that so as an example",
    "start": "1567440",
    "end": "1576159"
  },
  {
    "text": "a little example I always find it really frustrating when I'm doing logging that",
    "start": "1576159",
    "end": "1582240"
  },
  {
    "text": "I have to initialize my logger and I have to say logger you know get logger whatever the call is and tell it what",
    "start": "1582240",
    "end": "1587440"
  },
  {
    "text": "class it is did I I only half the time know what",
    "start": "1587440",
    "end": "1592679"
  },
  {
    "text": "class I'm programming in and I get this wrong so often because I've cut and paste the Declaration from somewhere else and then there's this mistake in",
    "start": "1592679",
    "end": "1599120"
  },
  {
    "text": "the codebase and the loging is wrong and I was think why do I have to tell you what class you're in when you should",
    "start": "1599120",
    "end": "1605200"
  },
  {
    "text": "know what class you're in because you're the computer and I'm just a stupid person and so what we what we've done",
    "start": "1605200",
    "end": "1610480"
  },
  {
    "text": "with quarkus is exactly that um so you don't have to declare your logger you",
    "start": "1610480",
    "end": "1615760"
  },
  {
    "text": "can just call Capital you know the static call loginfo and it will have the correct",
    "start": "1615760",
    "end": "1623080"
  },
  {
    "text": "logging with the correct class information and this is so little but it just makes me so happy it's so nice",
    "start": "1623080",
    "end": "1631039"
  },
  {
    "text": "um so I think this is sort of a good General principle right of like people are stupid and people are lazy don't",
    "start": "1631039",
    "end": "1638320"
  },
  {
    "text": "make people tell computers things that the computer already knows because that's just a waste of everybody's time",
    "start": "1638320",
    "end": "1645159"
  },
  {
    "text": "and it's a source of Errors so when I when I show this to people sometimes they sometimes they",
    "start": "1645159",
    "end": "1652440"
  },
  {
    "text": "like it and go that's cool and sometimes they go oh oh no no no I don't I don't like that because because I know I have",
    "start": "1652440",
    "end": "1658440"
  },
  {
    "text": "an intuition about performance I have an intuition about efficiency and I know that doing that kind of dynamic call is",
    "start": "1658440",
    "end": "1665960"
  },
  {
    "text": "expensive but it's not because because we have the jendex",
    "start": "1665960",
    "end": "1671159"
  },
  {
    "text": "index so we can at build time use gendex to find everybody who calls that log.",
    "start": "1671159",
    "end": "1677519"
  },
  {
    "text": "class inject a static field in them initialize the the static field correctly",
    "start": "1677519",
    "end": "1683880"
  },
  {
    "text": "and because it's done at build time you don't get that performance drag that you get with something like aspects so",
    "start": "1683880",
    "end": "1690120"
  },
  {
    "text": "aspects were lovely in many ways but we all stopped using them and one of the reasons was the the performance of them",
    "start": "1690120",
    "end": "1695760"
  },
  {
    "text": "was a bit scary so we sort of we assume that we can't do this thing that we really want to do because we assume it's",
    "start": "1695760",
    "end": "1702120"
  },
  {
    "text": "expensive it it's not anymore so it you know it gets compiled down to that and",
    "start": "1702120",
    "end": "1707840"
  },
  {
    "text": "you can can see that that is pretty inoffensive code I don't think anybody would would object to to that code in",
    "start": "1707840",
    "end": "1713559"
  },
  {
    "text": "their code base so let's look at a more complex example so with hibernate obviously",
    "start": "1713559",
    "end": "1720880"
  },
  {
    "text": "hibernate saves you a great deal of time but you still end up with quite a bit of boilerplate in hibernate and and",
    "start": "1720880",
    "end": "1727120"
  },
  {
    "text": "repeated code so things like if I want to do a list all query you have to declare that for for every um entity and",
    "start": "1727120",
    "end": "1733960"
  },
  {
    "text": "it's just a little bit annoying and you think couldn't I just have a superclass that would have all of that stuff that's",
    "start": "1733960",
    "end": "1739120"
  },
  {
    "text": "always the same and so what we can do with hibernate is if you have your repository",
    "start": "1739120",
    "end": "1744919"
  },
  {
    "text": "class um I know that's proba almost certainly too small for you to read which is kind of the point there's quite a lot of code there what we can do is we",
    "start": "1744919",
    "end": "1751880"
  },
  {
    "text": "can just get rid of all of that code and then we can just have a Panache",
    "start": "1751880",
    "end": "1757720"
  },
  {
    "text": "repository that we extend and so that's the repository pattern where you have a data access",
    "start": "1757720",
    "end": "1763559"
  },
  {
    "text": "object because your entity is a bit stupid for me I find an active pattern a",
    "start": "1763559",
    "end": "1768720"
  },
  {
    "text": "lot more natural so here I just declare my entity and everything that I want to do",
    "start": "1768720",
    "end": "1775159"
  },
  {
    "text": "in my entity is on the entity that's normally not possible with normal",
    "start": "1775159",
    "end": "1780519"
  },
  {
    "text": "hibernate but with hibernate with panach which is something that the quarcus team have developed you can do that so again",
    "start": "1780519",
    "end": "1787159"
  },
  {
    "text": "you've got that super class so you don't have to do much work and it all",
    "start": "1787159",
    "end": "1792720"
  },
  {
    "text": "works so one interesting thing about this is it seems so natural it seems like why is",
    "start": "1792720",
    "end": "1799399"
  },
  {
    "text": "this even hard of course I can inherit from a superclass and have the brains on the super class but",
    "start": "1799399",
    "end": "1805159"
  },
  {
    "text": "with with how hibernate is working it's actually really hard so if I was to De",
    "start": "1805159",
    "end": "1813159"
  },
  {
    "text": "implement this from scratch I might do something like I would have my panach",
    "start": "1813159",
    "end": "1818960"
  },
  {
    "text": "entity and then it would return a list the signature can be generic right",
    "start": "1818960",
    "end": "1824960"
  },
  {
    "text": "it's okay to say oh well it just returns a list of entities but in terms of the implementation I",
    "start": "1824960",
    "end": "1832039"
  },
  {
    "text": "don't actually know what entity to query because I'm in a generic superclass so",
    "start": "1832039",
    "end": "1837799"
  },
  {
    "text": "it can't be done unless unless you have an index and unless you're doing lots of",
    "start": "1837799",
    "end": "1843600"
  },
  {
    "text": "instrumentation at build time because here what you can do is you actually you see the super class as a marker and then",
    "start": "1843600",
    "end": "1852600"
  },
  {
    "text": "you make your actual changes to the subass where you you know",
    "start": "1852600",
    "end": "1858399"
  },
  {
    "text": "what entity you're talking to so again you know this is one of",
    "start": "1858399",
    "end": "1863519"
  },
  {
    "text": "those cases where we broke the tradeoff that machine efficiency of having the index index enabled the human efficiency",
    "start": "1863519",
    "end": "1871960"
  },
  {
    "text": "of the nice programming model now some people are probably still going uh oh but yeah no no I I have been",
    "start": "1871960",
    "end": "1880559"
  },
  {
    "text": "burned before I used Lumar once and once I got into production I knew that magic",
    "start": "1880559",
    "end": "1886720"
  },
  {
    "text": "should be avoided at all costs and and this is something that that the quarkus team have been very aware of um when I",
    "start": "1886720",
    "end": "1894279"
  },
  {
    "text": "Was preparing for this talk I asked them so you know under under the covers what's the difference between what we do",
    "start": "1894279",
    "end": "1900320"
  },
  {
    "text": "and something like lombok and I kid you not several of the quarkus team started screaming so they they know um that with",
    "start": "1900320",
    "end": "1909639"
  },
  {
    "text": "with this what you want is you want something that makes sense to the debugger and you want something where",
    "start": "1909639",
    "end": "1915559"
  },
  {
    "text": "the magic is optional so like that log some of my team really like it some of my team don't use it because they want",
    "start": "1915559",
    "end": "1921440"
  },
  {
    "text": "to do it by hand panach some some people really like it some team some of the team just use normal hibernate so all of",
    "start": "1921440",
    "end": "1929080"
  },
  {
    "text": "all of these features are really optional they're a happy side effect they're not like the compulsory",
    "start": "1929080",
    "end": "1936360"
  },
  {
    "text": "thing and I think again this is sort of a question of efficiency what we see with a lot of of these Frameworks or you",
    "start": "1936360",
    "end": "1944159"
  },
  {
    "text": "know some some of these low code things is they make such good demo but then as soon as you want to go off",
    "start": "1944159",
    "end": "1950720"
  },
  {
    "text": "the Golden path off the happy path you spend so long fighting it that You' lose",
    "start": "1950720",
    "end": "1957000"
  },
  {
    "text": "any gain that you that you maybe had from that initial thing so really you know we've tried to optimize for real",
    "start": "1957000",
    "end": "1963600"
  },
  {
    "text": "use not just things that look slick in",
    "start": "1963600",
    "end": "1967720"
  },
  {
    "text": "demos so when I Was preparing this talk you know I mentioned i' I've talked about uh a few a few of the things that",
    "start": "1969120",
    "end": "1976480"
  },
  {
    "text": "we do but there's a lot of them and I was trying to think you know is there is there some common factor that I",
    "start": "1976480",
    "end": "1982240"
  },
  {
    "text": "can I can pull out um so I started thinking about it and you know with with",
    "start": "1982240",
    "end": "1988080"
  },
  {
    "text": "the hibernate work he um this is my colleague Sonic lovo and he was really you know sort of developer zero on",
    "start": "1988080",
    "end": "1994880"
  },
  {
    "text": "quarcus and he he did the work with hibernate to allow hibernate to boot in advance and this is my colleague",
    "start": "1994880",
    "end": "2002440"
  },
  {
    "text": "Franchesco negro and you know he's he's our performance engineer and he does some you know some really impressive",
    "start": "2002440",
    "end": "2007919"
  },
  {
    "text": "performance fixes and this is another colleague this is",
    "start": "2007919",
    "end": "2013080"
  },
  {
    "text": "Mario Fusco some of you may know him he he's not actually in the quarcus team he tends to do a lot of work on things like",
    "start": "2013080",
    "end": "2019080"
  },
  {
    "text": "drools but he's given us some really big performance fixes too so for",
    "start": "2019080",
    "end": "2024120"
  },
  {
    "text": "example with quarcus and Loom so virtual threads we had really early support for",
    "start": "2024120",
    "end": "2031080"
  },
  {
    "text": "virtual threads back when it was a tech preview but what we found was that virtual threads are definitely you know",
    "start": "2031080",
    "end": "2036200"
  },
  {
    "text": "sort you sort of hope that it's going to be like a magic go faster switch and and",
    "start": "2036200",
    "end": "2041639"
  },
  {
    "text": "it is not um for a number of reasons but one of the reasons is that some libraries interact really",
    "start": "2041639",
    "end": "2049200"
  },
  {
    "text": "badly with virtual threads and so some libraries will do things like pinning the carrier thread and when that happens",
    "start": "2049200",
    "end": "2056240"
  },
  {
    "text": "everything grinds to a halt and Jackson had that behavior so Mario contributed",
    "start": "2056240",
    "end": "2062638"
  },
  {
    "text": "some PRS to Jackson that that allowed that problem in Jackson to be solved so that Jackson would work well with",
    "start": "2062639",
    "end": "2069358"
  },
  {
    "text": "virtual threads so I was looking and I was like okay so what what is that common factor what is what what what is",
    "start": "2069359",
    "end": "2076599"
  },
  {
    "text": "it um and I realized they're Italian um and",
    "start": "2076599",
    "end": "2082320"
  },
  {
    "text": "I I should say actually this I don't know if any of you were in the decision-making talk yesterday this is a",
    "start": "2082320",
    "end": "2088000"
  },
  {
    "text": "classic example of confirmation bias right which is I decided the key to our performance was being Italian and so",
    "start": "2088000",
    "end": "2094280"
  },
  {
    "text": "then I looked for all of the Italians who'd done interesting without even realiz ing it I looked for the Italians who' done good performance work um and I",
    "start": "2094280",
    "end": "2102240"
  },
  {
    "text": "you know this is a joke obviously when when we do a quarcus release we give out",
    "start": "2102240",
    "end": "2108400"
  },
  {
    "text": "a t-shirt says I made quarcus um and on the most recent release we gave out 900",
    "start": "2108400",
    "end": "2113960"
  },
  {
    "text": "t-shirts so there's a lot of contributors a lot of people have done really cool engineering on quarcus only",
    "start": "2113960",
    "end": "2119680"
  },
  {
    "text": "some of them were Italian um so you don't have to be Italian to be good at",
    "start": "2119680",
    "end": "2124760"
  },
  {
    "text": "performance in case anybody's feeling anxious um but that you know the title of this talk",
    "start": "2124760",
    "end": "2130440"
  },
  {
    "text": "is is Italian graft and so being Italian is optional but the graft part is not",
    "start": "2130440",
    "end": "2136160"
  },
  {
    "text": "this this stuff is work and when you're doing that kind of performance",
    "start": "2136160",
    "end": "2142520"
  },
  {
    "text": "optimization you have to be guided by the data and you have to do a lot of graft frankly you know so you you",
    "start": "2142520",
    "end": "2149000"
  },
  {
    "text": "measure because you don't want to do anything without measuring and then you find some tiny Improvement and you shave it off and then you measure and you find",
    "start": "2149000",
    "end": "2155160"
  },
  {
    "text": "some tiny Improvement and you you know shave a little bit of time off off and you measure and then you find some tiny Improvement you know so this was very",
    "start": "2155160",
    "end": "2160640"
  },
  {
    "text": "much what we saw in this morning's talk as well you know as in C rather than Java but it was the same thing right of",
    "start": "2160640",
    "end": "2166400"
  },
  {
    "text": "I'm going to profile and then I'm going to find some tiny optimization that I'm going to do and you just you know you",
    "start": "2166400",
    "end": "2172079"
  },
  {
    "text": "keep going and you keep going um and",
    "start": "2172079",
    "end": "2177240"
  },
  {
    "text": "it's it's not easy so it needs a lot of skill and it also needs a lot of hard",
    "start": "2177240",
    "end": "2182440"
  },
  {
    "text": "work and so what what I mentioned um Franchesco our performance engineer and",
    "start": "2182440",
    "end": "2188040"
  },
  {
    "text": "he really is like a dog with a bone when he sees a problem you know he'll just go and go and go and go and I think a lot",
    "start": "2188040",
    "end": "2194160"
  },
  {
    "text": "of the rest of us would have gone and he just keeps going so he talks he has this idea that you know what he offers to the",
    "start": "2194160",
    "end": "2200599"
  },
  {
    "text": "team is Obsession as a service and you know you you need people like that um and I want to give one",
    "start": "2200599",
    "end": "2209280"
  },
  {
    "text": "example um this this could be a whole talk on its own and and France actually",
    "start": "2209280",
    "end": "2214839"
  },
  {
    "text": "has a talk on this and I encourage you to go look at it but we we run the tech and power Benchmark and what we found",
    "start": "2214839",
    "end": "2222400"
  },
  {
    "text": "was we were behaving really unexpectedly badly when there was a large number of",
    "start": "2222400",
    "end": "2227680"
  },
  {
    "text": "cores so with a small number of cores our flame graph looked as we hoped and when it was a lot of cores all of a",
    "start": "2227680",
    "end": "2233920"
  },
  {
    "text": "sudden our frame flame graph had this really weird shape and there was this flat bit and we like well what's what's",
    "start": "2233920",
    "end": "2239560"
  },
  {
    "text": "going on there why is no work happening in this section of the flame",
    "start": "2239560",
    "end": "2244720"
  },
  {
    "text": "graph and to find out and again you know many people would have gone oh what a shame oh well and Franchesco and and",
    "start": "2244720",
    "end": "2252520"
  },
  {
    "text": "Andrew Haley another another colleague they read 20,000 lines of assembler",
    "start": "2252520",
    "end": "2259160"
  },
  {
    "text": "which it I I mean I just want to cry thinking about it to be",
    "start": "2259160",
    "end": "2264838"
  },
  {
    "text": "honest but what they found was worth it because what they found they found the pattern that was causing the scalability",
    "start": "2266240",
    "end": "2273160"
  },
  {
    "text": "problem and the pattern was checking of something is's an instance of and at this point hopefully some of you are",
    "start": "2273160",
    "end": "2279319"
  },
  {
    "text": "screaming as well and going I think that's I think there's a lot of that that that's that's not a weird obscure",
    "start": "2279319",
    "end": "2285480"
  },
  {
    "text": "pattern that is a very common pattern and so what what France did was he went",
    "start": "2285480",
    "end": "2291200"
  },
  {
    "text": "and then started looking once he'd found the problematic pattern he started to look at what other libraries might be affected so we found quarcus was",
    "start": "2291200",
    "end": "2297319"
  },
  {
    "text": "affected netti was affected hibernate was affected um camel was affected the",
    "start": "2297319",
    "end": "2303200"
  },
  {
    "text": "Java class library was affected so this was a really big really bad bug um and",
    "start": "2303200",
    "end": "2308800"
  },
  {
    "text": "he found actually that there was an existing bug but nobody had really realized the impact of it and I think",
    "start": "2308800",
    "end": "2314480"
  },
  {
    "text": "this is partly because it it happens when you've got like 32 cores when you've got like 64 cores and so",
    "start": "2314480",
    "end": "2321119"
  },
  {
    "text": "we're now much more often running at that kind of scale and the it's a it's a",
    "start": "2321119",
    "end": "2326880"
  },
  {
    "text": "cash pollution problem so the problem is when you do this check um the the cash",
    "start": "2326880",
    "end": "2332359"
  },
  {
    "text": "that is used for this check is shared across all of the cores so if you've got a lot of code running in parallel",
    "start": "2332359",
    "end": "2338359"
  },
  {
    "text": "basically the the cash just keeps getting corrupted and then you just keep having to redo the",
    "start": "2338359",
    "end": "2344280"
  },
  {
    "text": "work and this was this was a bad problem this was not you know like that shave",
    "start": "2344280",
    "end": "2349400"
  },
  {
    "text": "saving 2% um so this is one of the tech and power benchmarks and this was the r",
    "start": "2349400",
    "end": "2355839"
  },
  {
    "text": "running before the fix and running after the fix so you can see we went from 1.8",
    "start": "2355839",
    "end": "2360960"
  },
  {
    "text": "million requests per second to 5.8 million requests per second so was I mean that's some you know just a a small",
    "start": "2360960",
    "end": "2367480"
  },
  {
    "text": "Benchmark but it was a huge huge Improvement and so what we did was",
    "start": "2367480",
    "end": "2373960"
  },
  {
    "text": "France wrote a little tool because not every instance of call is problematic it sort of you know depends on various",
    "start": "2373960",
    "end": "2379160"
  },
  {
    "text": "factors so you wrote a tool that would go through and detect the problematic case and we ran it through the whole",
    "start": "2379160",
    "end": "2385040"
  },
  {
    "text": "code base and we started doing the fixes um I should say as well it's very",
    "start": "2385040",
    "end": "2390400"
  },
  {
    "text": "sad because this is fixed in the jvm now but only on the you know on the sort of head so we people won't get the benefit",
    "start": "2390400",
    "end": "2398440"
  },
  {
    "text": "of the fix for for quite a while and so we had code that was you know for example like this and then after the fix",
    "start": "2398440",
    "end": "2404119"
  },
  {
    "text": "you can see we had to do like all of this this stuff and again you don't need to necessarily",
    "start": "2404119",
    "end": "2410640"
  },
  {
    "text": "read the code but you can just see that the throughput is a lot higher but the code is a lot longer so it's again",
    "start": "2410640",
    "end": "2417160"
  },
  {
    "text": "exactly the same as Allan's Allan's talk this morning right you you have this trade off and I love it for this one",
    "start": "2417160",
    "end": "2423800"
  },
  {
    "text": "because the um the developer did the pr and then they basically apologize for the code that they're that they're doing",
    "start": "2423800",
    "end": "2430160"
  },
  {
    "text": "in the pr I'm not a fan of the fix it's not idiomatic it's difficult to maintain",
    "start": "2430160",
    "end": "2436280"
  },
  {
    "text": "but it gives us so much more throughput that we have to do it so again it's that tradeoff of machine efficiency against",
    "start": "2436280",
    "end": "2442920"
  },
  {
    "text": "human efficiency only in this case it's not everybody else's efficiency it's just my team's efficiency so this is",
    "start": "2442920",
    "end": "2450200"
  },
  {
    "text": "what Anne was talking about this morning when she said you really want your platform to be doing the hard groy nasty",
    "start": "2450200",
    "end": "2455440"
  },
  {
    "text": "work so that you can have the the delightful performance experience so we do the nasty fixes so that hopefully",
    "start": "2455440",
    "end": "2462319"
  },
  {
    "text": "other people don't have to but another thing to note about efficiency is it's not a one-time",
    "start": "2462319",
    "end": "2467960"
  },
  {
    "text": "activity it's not like you know you can have the sort of the big bang and you can go yay we we have the the throughput",
    "start": "2467960",
    "end": "2473079"
  },
  {
    "text": "or have to the cost life happens and these things just sort of tend to to",
    "start": "2473079",
    "end": "2480200"
  },
  {
    "text": "backslide and a while ago Matt Rael was doing some benchmarking and he said oh well this this version of quarcus is",
    "start": "2480200",
    "end": "2486359"
  },
  {
    "text": "much slower than the prev version and we thought that's that's odd that's that's sort of the opposite of what we hoped",
    "start": "2486359",
    "end": "2492119"
  },
  {
    "text": "would happen and we do and then we sort of said well wait a minute are we measuring our performance yes don't",
    "start": "2492119",
    "end": "2497200"
  },
  {
    "text": "don't we like look to see if we if we're getting better or worse yes so what happened um and what it is is if you",
    "start": "2497200",
    "end": "2505119"
  },
  {
    "text": "look at that bit of code is the performance getting better or worse here it looks like the performance is getting",
    "start": "2505119",
    "end": "2510280"
  },
  {
    "text": "much better but if you look at it over the longer picture you can see that actually it's probably getting a little",
    "start": "2510280",
    "end": "2517240"
  },
  {
    "text": "a little bit worse and so because we had this really big regression that masked smaller regressions a series of",
    "start": "2517240",
    "end": "2524960"
  },
  {
    "text": "smaller regressions and so it was to do with our we had a change detection algorithm that was parametric and it",
    "start": "2524960",
    "end": "2530960"
  },
  {
    "text": "meant that we we missed this regression so we did the work and we fixed it and we we fixed a lot it was",
    "start": "2530960",
    "end": "2537520"
  },
  {
    "text": "very cool so that was another engineer who was not Italian called Roberto Cortez",
    "start": "2537520",
    "end": "2543720"
  },
  {
    "text": "um so one of the things that that Roberto did which just makes me smile is",
    "start": "2543720",
    "end": "2550319"
  },
  {
    "text": "again it's about the assumptions we do a lot of string comparison in config and",
    "start": "2550319",
    "end": "2556119"
  },
  {
    "text": "config tends to be names spaced and so the way any normal human being would do",
    "start": "2556119",
    "end": "2562079"
  },
  {
    "text": "a spring comparison is you start at the first character and then you go but the interesting bit is always at the end so",
    "start": "2562079",
    "end": "2567839"
  },
  {
    "text": "Roberto worked out hey if I go from the other end the config is much",
    "start": "2567839",
    "end": "2573040"
  },
  {
    "text": "faster so I would recommend you all um to to have a Franchesco to have a",
    "start": "2573040",
    "end": "2579160"
  },
  {
    "text": "performance engineer um you can't have Franchesco he's ours but you need to find your own and it does need",
    "start": "2579160",
    "end": "2587039"
  },
  {
    "text": "investment so I've got one last trade-off I want to talk about which you",
    "start": "2589599",
    "end": "2594880"
  },
  {
    "text": "know this is the efficient languages track but we really do have a a green Focus here and there's this classic",
    "start": "2594880",
    "end": "2600160"
  },
  {
    "text": "trade-off with sustainability between doing the stuff that we want to do and saving the planet and in general",
    "start": "2600160",
    "end": "2607440"
  },
  {
    "text": "historically we have always tended to do the stuff we want to do rather than save the planet um I think there is some hope",
    "start": "2607440",
    "end": "2616240"
  },
  {
    "text": "here um so I've started talking about something called the room model",
    "start": "2616240",
    "end": "2622680"
  },
  {
    "text": "and naming is the hardest problem in computer science because I didn't think to actually do a Google before I did the",
    "start": "2622680",
    "end": "2629000"
  },
  {
    "text": "name and it turns out there is a room model which is a decision model so again quite relevant to to yesterday's",
    "start": "2629000",
    "end": "2634760"
  },
  {
    "text": "decision talk and so but that's with a slightly different",
    "start": "2634760",
    "end": "2640160"
  },
  {
    "text": "spelling than I did so I did like three Rs and two o's and stuff which was another terrible mistake so if you",
    "start": "2640160",
    "end": "2645240"
  },
  {
    "text": "Google vroom it thinks you want to do it with a conventional spelling but then it says oh but would you like to search",
    "start": "2645240",
    "end": "2651200"
  },
  {
    "text": "instead for the vom model with the the idiosyncratic spelling and so if you click on that what do you think happens",
    "start": "2651200",
    "end": "2659040"
  },
  {
    "text": "the the hope is that you get my my stuff um the reality is rather different I",
    "start": "2659040",
    "end": "2665440"
  },
  {
    "text": "debated whether to show this slide and I had to like carefully put you know a little bit of text over it because it it",
    "start": "2665440",
    "end": "2671839"
  },
  {
    "text": "was not safe for work it it was a serious violation of the cucon code of conduct in terms of you know do not",
    "start": "2671839",
    "end": "2677760"
  },
  {
    "text": "display sexual material and you know everything here it's all about cars and hot babes like that is what you get if",
    "start": "2677760",
    "end": "2683720"
  },
  {
    "text": "you search for the room model and even you can see there that's um that's a Tesla advert and I don't know if you can",
    "start": "2683720",
    "end": "2688839"
  },
  {
    "text": "see but it says sexy above it so it's all about sexy sexy cars so naming",
    "start": "2688839",
    "end": "2694480"
  },
  {
    "text": "hardest problem in computer science I should have thought about that but my room model the one that doesn't involve",
    "start": "2694480",
    "end": "2700160"
  },
  {
    "text": "sexy cars um I really started thinking about this when I looked at the paper",
    "start": "2700160",
    "end": "2706520"
  },
  {
    "text": "and we were talking about this before the talk and Chris said you know that stupid paper that compares the uh the",
    "start": "2706520",
    "end": "2712240"
  },
  {
    "text": "programming languages and there's a lot of problems with this paper um but what I want to show you is not the the",
    "start": "2712240",
    "end": "2717480"
  },
  {
    "text": "details of it but something that I noticed which is it has a column for energy and it has a column for time and",
    "start": "2717480",
    "end": "2725240"
  },
  {
    "text": "they look kind of almost the same and if you plot it you can confirm that this",
    "start": "2725240",
    "end": "2730640"
  },
  {
    "text": "trend line is basically straight so it means languages that go fast have a low carbon",
    "start": "2730640",
    "end": "2739400"
  },
  {
    "text": "footprint and we see this with quarcus so with quarcus on this graph we we",
    "start": "2739400",
    "end": "2746119"
  },
  {
    "text": "benchmarked the the energy consumption of quarcus native quarcus on jvm the",
    "start": "2746119",
    "end": "2752079"
  },
  {
    "text": "other framework on jvm the other framework on Native",
    "start": "2752079",
    "end": "2757319"
  },
  {
    "text": "what we did was we had a single instance and we just fired load at it until it ran out of throughput so the shorter",
    "start": "2757319",
    "end": "2763800"
  },
  {
    "text": "lines are where it ran out of throughput earlier and lower is better so lower is",
    "start": "2763800",
    "end": "2769400"
  },
  {
    "text": "the lower carbon footprint and so you can see that there's again this really strong correlation quarcus on jvm has",
    "start": "2769400",
    "end": "2775680"
  },
  {
    "text": "the lowest carbon footprint of any of these options because it has the highest throughput so it's the win-win again",
    "start": "2775680",
    "end": "2783079"
  },
  {
    "text": "that you know you get to have the really fast language and have the nice programming model and also save the",
    "start": "2783079",
    "end": "2788880"
  },
  {
    "text": "world so we beat the throughput we beat the tradeoff and I just love this that",
    "start": "2788880",
    "end": "2793920"
  },
  {
    "text": "you know instead of having this opposition between machine efficiency and human efficiency the one helps us gain the the other so if you start with",
    "start": "2793920",
    "end": "2801400"
  },
  {
    "text": "efficient languages you really need to consider both machine efficiency and human efficiency when you're looking at",
    "start": "2801400",
    "end": "2807920"
  },
  {
    "text": "your machine efficiency you need to challenge your assumptions only do work once obviously um move work to where it",
    "start": "2807920",
    "end": "2813960"
  },
  {
    "text": "hurts the least index indexes are so cheap they're so good they solve so many problems and unfortunately this isn't a",
    "start": "2813960",
    "end": "2821839"
  },
  {
    "text": "one-off activity you do need that continued investment in efficiency and then when you look at your human",
    "start": "2821839",
    "end": "2827960"
  },
  {
    "text": "efficiency again same thing right you need to challenge your assumptions you need to get those feedback loops as",
    "start": "2827960",
    "end": "2834079"
  },
  {
    "text": "small as you can and don't make people tell the computer what the computer",
    "start": "2834079",
    "end": "2839480"
  },
  {
    "text": "already knows because that's a waste of everybody's time and with that I think that is all",
    "start": "2839480",
    "end": "2845960"
  },
  {
    "text": "um we've got I think about 90 seconds for questions I don't know if that actually works um but please do I'm I'm",
    "start": "2845960",
    "end": "2852000"
  },
  {
    "text": "around all day for the rest of the day um and as everybody has said it helps the conference and it helps the speakers",
    "start": "2852000",
    "end": "2857319"
  },
  {
    "text": "enormously to um to vote and leave feedback so thank you very much [Applause]",
    "start": "2857319",
    "end": "2865789"
  },
  {
    "text": "[Music]",
    "start": "2866230",
    "end": "2871689"
  }
]