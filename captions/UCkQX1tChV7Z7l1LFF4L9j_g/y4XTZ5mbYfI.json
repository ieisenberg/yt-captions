[
  {
    "text": "[Music]",
    "start": "680",
    "end": "8549"
  },
  {
    "text": "hi everybody i'm chris palmer from the chrome security team and today i'm going to talk about",
    "start": "15040",
    "end": "20560"
  },
  {
    "text": "getting the most out of sandboxing which is a key defensive technique for software that faces the internet like a",
    "start": "20560",
    "end": "27840"
  },
  {
    "text": "browser or a server application or any sorts of things i'm going to talk about the limitations",
    "start": "27840",
    "end": "33920"
  },
  {
    "text": "and benefits and that we've found while doing this we've had about 10 years of experience",
    "start": "33920",
    "end": "40480"
  },
  {
    "text": "and i'm going to talk about what else to do in addition to that once you've hit those limits but you probably haven't",
    "start": "40480",
    "end": "46399"
  },
  {
    "text": "yet so first um i'll tell you a bit about me i've been on the chrome security team",
    "start": "46399",
    "end": "53199"
  },
  {
    "text": "for about nine and a half years and before that i was on the android team",
    "start": "53199",
    "end": "58800"
  },
  {
    "text": "and i've done a bunch of different things i've done uh usability https and uh",
    "start": "58800",
    "end": "66400"
  },
  {
    "text": "authentication stuff and these days i'm i'm on what we call the platform security team where we focus on sort of",
    "start": "66400",
    "end": "75360"
  },
  {
    "text": "under the hood low-level security defense mechanisms like memory safety and sandboxing obviously",
    "start": "75360",
    "end": "83520"
  },
  {
    "text": "and exploit mitigations and we try to make sure we're making the best possible use",
    "start": "83520",
    "end": "89119"
  },
  {
    "text": "of the operating system to get the maximum defensive value out of that",
    "start": "89119",
    "end": "94880"
  },
  {
    "text": "and so first let me give you an idea of what sandboxing even is so i'll talk about like how we do it",
    "start": "94880",
    "end": "102799"
  },
  {
    "text": "um what it means and how you can use it and then like i said before i'll talk about stuff that comes after that as",
    "start": "102799",
    "end": "109439"
  },
  {
    "text": "well so here's a picture from chromium's website chromium.org",
    "start": "109439",
    "end": "114640"
  },
  {
    "text": "where we have a simple a simple picture of what sandboxing looks like for us",
    "start": "114640",
    "end": "120799"
  },
  {
    "text": "chrome is a complex application obviously and we break it up into multiple pieces and each of those pieces",
    "start": "120799",
    "end": "128160"
  },
  {
    "text": "runs in a separate process we have like the browser process here it's called the broker",
    "start": "128160",
    "end": "134160"
  },
  {
    "text": "and that runs at full privilege it has all the power of your user account when you're logged into your machine",
    "start": "134160",
    "end": "140480"
  },
  {
    "text": "and then we fire off a bunch of other processes called renderer processes and their job",
    "start": "140480",
    "end": "147680"
  },
  {
    "text": "is to render the web for a given website if you go to newyorktimes.com there's",
    "start": "147680",
    "end": "154160"
  },
  {
    "text": "one renderer for that and then when you go to gmail or office 365 or",
    "start": "154160",
    "end": "159760"
  },
  {
    "text": "twitter that's three more renderer processes and they're each isolated from",
    "start": "159760",
    "end": "165040"
  },
  {
    "text": "each other and they're isolated from the browser process itself and they also have their privileges",
    "start": "165040",
    "end": "172080"
  },
  {
    "text": "limited as much as we can manage in ways that are specific to each operating system",
    "start": "172080",
    "end": "178159"
  },
  {
    "text": "and what that gives us is if they crash the course um the whole",
    "start": "178159",
    "end": "184480"
  },
  {
    "text": "browser does not go down and like if site a causes its renderer to crash well",
    "start": "184480",
    "end": "190640"
  },
  {
    "text": "all your other sites are still up and running and so you get reliability and stability but also if the process is",
    "start": "190640",
    "end": "197920"
  },
  {
    "text": "compromised by like malicious javascript or",
    "start": "197920",
    "end": "203440"
  },
  {
    "text": "you know html or css that helps take over a website usually it's javascript",
    "start": "203440",
    "end": "210640"
  },
  {
    "text": "or web assembly then um the damage is contained we hope in that renderer",
    "start": "210640",
    "end": "216720"
  },
  {
    "text": "process and if site a gets compromised sites b and c and d",
    "start": "216720",
    "end": "222879"
  },
  {
    "text": "have some protection against that compromise and the browser process itself up here say",
    "start": "222879",
    "end": "228319"
  },
  {
    "text": "is uh protected against that compromise and so the attacker to take over your",
    "start": "228319",
    "end": "233680"
  },
  {
    "text": "whole computer for example would need to find additional bugs",
    "start": "233680",
    "end": "238720"
  },
  {
    "text": "uh whether in the browser process in the operating system kernel if they want to uh",
    "start": "238720",
    "end": "244319"
  },
  {
    "text": "extend the reach of their compromise they have to do more work and so it's a pretty darn good defensive",
    "start": "244319",
    "end": "250239"
  },
  {
    "text": "mechanism and we use it heavily and so i want to say first of all that",
    "start": "250239",
    "end": "255599"
  },
  {
    "text": "sandboxing is table stakes for a browser every browser does some firefox safari",
    "start": "255599",
    "end": "262240"
  },
  {
    "text": "all the chromium-based browsers like edge brave you name it opera chrome itself",
    "start": "262240",
    "end": "268720"
  },
  {
    "text": "obviously they all do sandboxing but it's not just for browsers i think you can get a lot",
    "start": "268720",
    "end": "275520"
  },
  {
    "text": "of benefit from sandboxing in a wide variety of different application types for example",
    "start": "275520",
    "end": "281520"
  },
  {
    "text": "you know the problem is we are reading in complicated inputs like javascript html images videos from",
    "start": "281520",
    "end": "289759"
  },
  {
    "text": "anywhere on the internet and there's a risk there because we're processing them in c plus or c and there's all sorts of",
    "start": "289759",
    "end": "297199"
  },
  {
    "text": "memory safety concerns there's buffer overflows type confusion use after free bugs like that they can",
    "start": "297199",
    "end": "304080"
  },
  {
    "text": "allow an attacker to compromise the code that's parsing and rendering these complicated formats",
    "start": "304080",
    "end": "310960"
  },
  {
    "text": "so any application that parses and renders and deserializes complicated stuff",
    "start": "310960",
    "end": "316560"
  },
  {
    "text": "has the same problem and it has to somehow defend against it that includes your text messager a web",
    "start": "316560",
    "end": "324400"
  },
  {
    "text": "server that takes in pdfs from users and processes them for example if you have a",
    "start": "324400",
    "end": "329520"
  },
  {
    "text": "web application that converts images from one format to another or",
    "start": "329520",
    "end": "335680"
  },
  {
    "text": "takes videos from users or a font sharing website or",
    "start": "335680",
    "end": "341120"
  },
  {
    "text": "all sorts of things like that you have the same basic problem you don't want to",
    "start": "341120",
    "end": "347759"
  },
  {
    "text": "you know let a bug in in your say image decoder or your javascript interpreter",
    "start": "347759",
    "end": "354400"
  },
  {
    "text": "take over your whole server you don't want to let an attacker have that kind of power so in chromium we've been like i said",
    "start": "354400",
    "end": "360639"
  },
  {
    "text": "we've been working on this for about 10 years and we think we've taken sandboxing uh",
    "start": "360639",
    "end": "366479"
  },
  {
    "text": "just about as far as we can go with it i'll talk about how we face",
    "start": "366479",
    "end": "372160"
  },
  {
    "text": "certain special limitations that you might not depending on your kind of application you may be able to",
    "start": "372160",
    "end": "378720"
  },
  {
    "text": "go further with it than we can or maybe not as far as we can it all depends on",
    "start": "378720",
    "end": "384800"
  },
  {
    "text": "a bunch of design factors you have to take into consideration so i'll talk about what those are",
    "start": "384800",
    "end": "390479"
  },
  {
    "text": "but again in any case sandboxing is like your your step one of all the things you",
    "start": "390479",
    "end": "396240"
  },
  {
    "text": "want to do to defend against uh bad inputs from the internet i think it's table stakes you got to start there",
    "start": "396240",
    "end": "403680"
  },
  {
    "text": "so how do you build a sandbox it depends what you can do it varies with each operating system",
    "start": "403680",
    "end": "410000"
  },
  {
    "text": "android is very different than mac os and linux is a whole different thing and windows is a whole different thing",
    "start": "410000",
    "end": "416479"
  },
  {
    "text": "and they all provide different options to us the defender they give us different kinds of",
    "start": "416479",
    "end": "422800"
  },
  {
    "text": "mechanisms we have separate user accounts and windows they're called sids security identifiers",
    "start": "422800",
    "end": "429280"
  },
  {
    "text": "each there's various access tokens you can like take a token away from a process or",
    "start": "429280",
    "end": "434319"
  },
  {
    "text": "give them a restricted token that's a windows thing you can filter the system calls that if",
    "start": "434319",
    "end": "440479"
  },
  {
    "text": "that a process can call we do a lot of that on linux based systems chrome os android linux desktop",
    "start": "440479",
    "end": "447840"
  },
  {
    "text": "you can do it on mac os with the seat belt system we sort of bend the rules and define our",
    "start": "447840",
    "end": "454800"
  },
  {
    "text": "own seat belt policy but apple gives you some baked in ones with xcode",
    "start": "454800",
    "end": "460800"
  },
  {
    "text": "and i think these days the default is not to have full privilege anymore they use",
    "start": "460800",
    "end": "466479"
  },
  {
    "text": "they make it easy for you to reduce your own privilege with seatbelt and that is very powerful very good",
    "start": "466479",
    "end": "472800"
  },
  {
    "text": "defense so another idea is that you could segment memory",
    "start": "472800",
    "end": "478960"
  },
  {
    "text": "within the same process what if we had a zone that code could not escape from",
    "start": "478960",
    "end": "484560"
  },
  {
    "text": "and then another zone that other code could not escape from i'll talk a bit more later about how we are looking at",
    "start": "484560",
    "end": "490879"
  },
  {
    "text": "that kind of thing and firefox people are also and it's very cool idea but for the most",
    "start": "490879",
    "end": "496720"
  },
  {
    "text": "part our basic building block is the process and then we apply controls to different",
    "start": "496720",
    "end": "502479"
  },
  {
    "text": "types of processes so like on android i was saying it's very different than windows and linux",
    "start": "502479",
    "end": "509039"
  },
  {
    "text": "the key mechanism is what is called the isolated process service and it's a technique that they invented",
    "start": "509039",
    "end": "516399"
  },
  {
    "text": "for us we asked them could we have this on android and then we can make chrome better and they said sure and they built",
    "start": "516399",
    "end": "521839"
  },
  {
    "text": "it for us it does a couple things it runs a new process it runs an android service",
    "start": "521839",
    "end": "528800"
  },
  {
    "text": "in its own special separate process with a random user id separate from your main application and",
    "start": "528800",
    "end": "535200"
  },
  {
    "text": "then you can talk to it and get data out and pass the data in and that's our first",
    "start": "535200",
    "end": "541600"
  },
  {
    "text": "line of defense on android render is run as isolated services",
    "start": "541600",
    "end": "547279"
  },
  {
    "text": "and it works pretty good there's a couple things that that come with it there's some system call",
    "start": "547279",
    "end": "552640"
  },
  {
    "text": "filtering uh it comes with a policy that android platform people define for us",
    "start": "552640",
    "end": "559839"
  },
  {
    "text": "and um they also define an se linux profile for us if you don't know what se linux is it's a thing",
    "start": "559839",
    "end": "566720"
  },
  {
    "text": "it stands for security enhanced linux it's an additional set of policies you can do you can use to say",
    "start": "566720",
    "end": "573360"
  },
  {
    "text": "don't let this process access these files or you know",
    "start": "573360",
    "end": "578800"
  },
  {
    "text": "raise an alarm if it tries to do this or that and that's useful for us too and it comes with the isolated process",
    "start": "578800",
    "end": "585680"
  },
  {
    "text": "service so that's number one on android on linux and chrome os we sort of put",
    "start": "585680",
    "end": "591279"
  },
  {
    "text": "together what we want by hand we use second bpf again it's a system",
    "start": "591279",
    "end": "596720"
  },
  {
    "text": "call filtering mechanism but we can define whatever policy we want so we have all sorts of finer",
    "start": "596720",
    "end": "602480"
  },
  {
    "text": "grained policies for different types of processes we also use linux's user and pid and",
    "start": "602480",
    "end": "608800"
  },
  {
    "text": "network namespaces feature where you can sort of create sort of like",
    "start": "608800",
    "end": "615600"
  },
  {
    "text": "a little isolated world for a process and it doesn't get to see the whole system",
    "start": "615600",
    "end": "621200"
  },
  {
    "text": "he doesn't get to see processes that it shouldn't know about it doesn't get to see you know network stuff that it shouldn't",
    "start": "621200",
    "end": "628160"
  },
  {
    "text": "know about and so on and so forth and where we don't have that not all linux systems enable that sub system of",
    "start": "628160",
    "end": "635200"
  },
  {
    "text": "the kernel we have a set uid helper that does some of that stuff itself",
    "start": "635200",
    "end": "644480"
  },
  {
    "text": "and then it spawns children and takes away their privilege and then those are the renderers but that's uh",
    "start": "644480",
    "end": "651040"
  },
  {
    "text": "we consider that to be a bit of a legacy thing we think the future and certainly our present is the",
    "start": "651040",
    "end": "657040"
  },
  {
    "text": "namespaces idea but it's not risk-free namespaces um come with bugs of their own because they",
    "start": "657040",
    "end": "663600"
  },
  {
    "text": "change the assumptions of other parts of the kernel so there's that's why some distributions",
    "start": "663600",
    "end": "668800"
  },
  {
    "text": "don't turn it on but we do on chrome os certainly and uh we think it's pretty useful",
    "start": "668800",
    "end": "674560"
  },
  {
    "text": "so um the key thing here is that you can't sandbox everything",
    "start": "674560",
    "end": "680079"
  },
  {
    "text": "if you think about the most extreme form of sandboxing you could sandbox every function call or",
    "start": "680079",
    "end": "687760"
  },
  {
    "text": "sandbox every class especially if you had that that segmented memory idea that i was",
    "start": "687760",
    "end": "693279"
  },
  {
    "text": "talking about you could give each component of your code its own little zone to live in",
    "start": "693279",
    "end": "699279"
  },
  {
    "text": "and it couldn't escape we hope but as it is now for the most part we",
    "start": "699279",
    "end": "704640"
  },
  {
    "text": "have to pretty much create a new process for each thing that we want to sandbox so you'll see in",
    "start": "704640",
    "end": "710240"
  },
  {
    "text": "the pictures that are coming up we use fairly coarse-grained",
    "start": "710240",
    "end": "715279"
  },
  {
    "text": "uh form of sandboxing because processes are our main thing and processes are kind of expensive",
    "start": "715279",
    "end": "721200"
  },
  {
    "text": "on windows and android processes are kind of a big deal and threads are cheap and that's they",
    "start": "721200",
    "end": "728240"
  },
  {
    "text": "kind of want you to do that the way the systems are designed you'd have one process for your application and then many threads each",
    "start": "728240",
    "end": "734959"
  },
  {
    "text": "doing different things but that's not enough of a boundary for us so we have to like be careful in how we",
    "start": "734959",
    "end": "740720"
  },
  {
    "text": "use them and then starting up a new process on android and windows a new process gives you a lot of stuff",
    "start": "740720",
    "end": "747360"
  },
  {
    "text": "that you typically want like all the android framework stuff and all the nice windows libraries",
    "start": "747360",
    "end": "753839"
  },
  {
    "text": "but it costs time and memory to create those things for us so they're not quite as free on those",
    "start": "753839",
    "end": "761120"
  },
  {
    "text": "two platforms but on linux and chrome os they're very cheap indeed mac os also",
    "start": "761120",
    "end": "767279"
  },
  {
    "text": "quite cheap to make a process and so we face different headwinds on different platforms",
    "start": "767279",
    "end": "773120"
  },
  {
    "text": "so a key thing i mentioned before and this is going to be the introduction to how you should think about sandboxing",
    "start": "773120",
    "end": "779839"
  },
  {
    "text": "for yourself for your application different sites are in their own renderers as i mentioned before",
    "start": "779839",
    "end": "787120"
  },
  {
    "text": "and so we have to have a way of deciding when to create a new one and we would like to",
    "start": "787120",
    "end": "793519"
  },
  {
    "text": "create a new process for each web origin which is the principle on the web",
    "start": "793519",
    "end": "798720"
  },
  {
    "text": "platform the the security principle the web the origin is defined as the scheme host and port like https",
    "start": "798720",
    "end": "807440"
  },
  {
    "text": "google.com port 443 or uh you know http",
    "start": "807440",
    "end": "813399"
  },
  {
    "text": "example.org port 80 things like that so each of those should be separated but",
    "start": "813399",
    "end": "819279"
  },
  {
    "text": "we can't always afford to make that many new processes so instead",
    "start": "819279",
    "end": "824800"
  },
  {
    "text": "we group uh many several origins together if they",
    "start": "824800",
    "end": "831839"
  },
  {
    "text": "belong to what we call the site and that is um just the scheme",
    "start": "831839",
    "end": "837440"
  },
  {
    "text": "like https or http and just the second level domain after the register",
    "start": "837440",
    "end": "843440"
  },
  {
    "text": "uh the first registerable domain like google.com everything under google.com counts as",
    "start": "843440",
    "end": "848959"
  },
  {
    "text": "one site example.org everything under that counts as one site it's a bit of a trade-off to save some time in memory as",
    "start": "848959",
    "end": "856720"
  },
  {
    "text": "we were saying but if we had our way we'd isolate each origin in its own process",
    "start": "856720",
    "end": "862639"
  },
  {
    "text": "so hang on get my slides ready",
    "start": "862639",
    "end": "867760"
  },
  {
    "text": "so here's a simple view this is a bit like what the status quo is but it's a little",
    "start": "867760",
    "end": "874079"
  },
  {
    "text": "trickier we have the browser process with full privilege it creates different renderers for different sites",
    "start": "874079",
    "end": "880880"
  },
  {
    "text": "we also have the graphics processing interface the stuff that talks to the graphic system of your operating system",
    "start": "880880",
    "end": "887519"
  },
  {
    "text": "we put that in its own process to separate it it might be crashy it might be we can reduce its",
    "start": "887519",
    "end": "894639"
  },
  {
    "text": "privilege a little bit so we do and doesn't need the full power of the browser process",
    "start": "894639",
    "end": "901199"
  },
  {
    "text": "we have coming up on most platforms a separate process to handle all the networking too",
    "start": "901199",
    "end": "908800"
  },
  {
    "text": "all the http all the tls all the dns all that complicated stuff we're putting",
    "start": "908800",
    "end": "914160"
  },
  {
    "text": "it in its own process and we're on each platform gradually reducing the privilege of that process on each",
    "start": "914160",
    "end": "920399"
  },
  {
    "text": "platform it's a uh an ongoing adventure but it's getting close to uh it's done",
    "start": "920399",
    "end": "926560"
  },
  {
    "text": "on mac os it's starting to happen on windows we got a plan for android",
    "start": "926560",
    "end": "932320"
  },
  {
    "text": "uh now you might imagine that we could if we if we had you know all the memory and time we wanted",
    "start": "932320",
    "end": "937920"
  },
  {
    "text": "we could make a separate networking process for each site and then it would be linked to its",
    "start": "937920",
    "end": "943680"
  },
  {
    "text": "renderer that would be great we would do that if we could if we could afford it similarly we're creating a new storage",
    "start": "943680",
    "end": "950480"
  },
  {
    "text": "process to support all the web apis that handle storage like the local storage",
    "start": "950480",
    "end": "956639"
  },
  {
    "text": "uh cookies um very there's a indexeddb uh database api",
    "start": "956639",
    "end": "962399"
  },
  {
    "text": "for the web that stuff is also complicated and makes sense to put in its own process so that's happening but",
    "start": "962399",
    "end": "969279"
  },
  {
    "text": "you could imagine we could have a separate storage process for each site also and again it would be linked to its",
    "start": "969279",
    "end": "976320"
  },
  {
    "text": "renderer and again they would all be isolated from each other and security would go up resilience and",
    "start": "976320",
    "end": "982720"
  },
  {
    "text": "reliability would go up it would be cool but for us on the platforms that are popular for chrome",
    "start": "982720",
    "end": "989759"
  },
  {
    "text": "mainly android and windows it's just too expensive so we can't do it but that might not be true for you",
    "start": "989759",
    "end": "995759"
  },
  {
    "text": "on for example a linux server where processes are cheap and fast to start up you might be able to have many",
    "start": "995759",
    "end": "1003600"
  },
  {
    "text": "different sandbox processes supporting different aspects of your",
    "start": "1003600",
    "end": "1009360"
  },
  {
    "text": "you know user interface or doing the things for your users that you need to do whether it's database processing giving",
    "start": "1009360",
    "end": "1016240"
  },
  {
    "text": "them their own front-end web server maybe hosting some javascript for them things like that it depends",
    "start": "1016240",
    "end": "1023120"
  },
  {
    "text": "so that doesn't get us everything we need though but it does get us a lot um",
    "start": "1023120",
    "end": "1028880"
  },
  {
    "text": "the key thing you may have uh gotten so far is that we're using sandboxes to",
    "start": "1028880",
    "end": "1036000"
  },
  {
    "text": "contain the damage of the problems of memory on safety like c",
    "start": "1036000",
    "end": "1041360"
  },
  {
    "text": "plus plus and c are just hard to use it's all sorts of um",
    "start": "1041360",
    "end": "1046880"
  },
  {
    "text": "you know out of bounds reads out of bounds rights objects leaking you know and they never",
    "start": "1046880",
    "end": "1053039"
  },
  {
    "text": "get cleaned up when you don't when you're not using them anymore or that can happen or you use them after they've",
    "start": "1053039",
    "end": "1058400"
  },
  {
    "text": "been cleaned up use after free it's a exploitable vulnerability a lot of the time",
    "start": "1058400",
    "end": "1063919"
  },
  {
    "text": "or type confusion if you have an animal and it's actually a dog but you cast it",
    "start": "1063919",
    "end": "1069039"
  },
  {
    "text": "to a cat and then you call the meow method on it that's not going to work and trouble may ensue",
    "start": "1069039",
    "end": "1074880"
  },
  {
    "text": "c plus will let you do that a lot of the time whereas other languages wouldn't java",
    "start": "1074880",
    "end": "1080720"
  },
  {
    "text": "for example would notice at runtime hey this is a cat and it would raise an exception not so necessarily in c plus plus",
    "start": "1080720",
    "end": "1088559"
  },
  {
    "text": "so containing memory and safety is a key benefit of",
    "start": "1088559",
    "end": "1094960"
  },
  {
    "text": "sandboxing but it also gives us some defense against stranger problems",
    "start": "1094960",
    "end": "1100240"
  },
  {
    "text": "like spectre and meltdown you may have heard of those the hardware bugs where",
    "start": "1100240",
    "end": "1105760"
  },
  {
    "text": "you can even with perfect memory safety you could do strange things and the hardware",
    "start": "1105760",
    "end": "1111200"
  },
  {
    "text": "would accidentally leak important facts about the memory that's in your process",
    "start": "1111200",
    "end": "1117679"
  },
  {
    "text": "you can sort of get a free out of bounds reads even if the code were perfect",
    "start": "1117679",
    "end": "1122960"
  },
  {
    "text": "which is pretty wild and there's even so we get some defense against that from",
    "start": "1122960",
    "end": "1128320"
  },
  {
    "text": "sandboxing however the real fix for that is at the hardware level and as a as an",
    "start": "1128320",
    "end": "1133760"
  },
  {
    "text": "application you know i and we can only do so much so it's a little tricky there are",
    "start": "1133760",
    "end": "1139120"
  },
  {
    "text": "variants of that problem that can in fact go across processes and even into the kernel",
    "start": "1139120",
    "end": "1144960"
  },
  {
    "text": "so that's pretty exciting and we have to just wait for better hardware to get rid of that problem but there's a lot we can",
    "start": "1144960",
    "end": "1150240"
  },
  {
    "text": "handle before we get there before we uh before that's our biggest problem c plus",
    "start": "1150240",
    "end": "1155840"
  },
  {
    "text": "plus is dangerous c is dangerous sandboxing helps a lot",
    "start": "1155840",
    "end": "1161200"
  },
  {
    "text": "but to get all the way to wonderland in software we really would like to have a language that defends against memory",
    "start": "1161200",
    "end": "1168160"
  },
  {
    "text": "unsafety baked in so you could think like well obviously java has a lot of that kotlin",
    "start": "1168160",
    "end": "1174799"
  },
  {
    "text": "swift on mac os and ios has a lot of safety baked in rust that's their selling point and",
    "start": "1174799",
    "end": "1181440"
  },
  {
    "text": "here's the thing i was mentioning before web assembly it has a chance to give us",
    "start": "1181440",
    "end": "1187360"
  },
  {
    "text": "that isolated box inside a process so we could create little sandboxes",
    "start": "1187360",
    "end": "1193280"
  },
  {
    "text": "without having to spawn new processes and so we could have cheaper sandboxing we could sandbox more stuff",
    "start": "1193280",
    "end": "1199600"
  },
  {
    "text": "so we're actually experimenting on that now this quarter and firefox also is they have a thing",
    "start": "1199600",
    "end": "1205840"
  },
  {
    "text": "called rl box we call ours wasmbox for web assembly",
    "start": "1205840",
    "end": "1211120"
  },
  {
    "text": "box the basic idea is the same there's different efficiency trade-offs",
    "start": "1211120",
    "end": "1216480"
  },
  {
    "text": "and different technical ways of going about it but the basic idea is you give a function or a component a",
    "start": "1216480",
    "end": "1222799"
  },
  {
    "text": "chunk of memory and then you by various means in force that it can never read or write outside",
    "start": "1222799",
    "end": "1228080"
  },
  {
    "text": "that area so if it goes wrong it's at least mostly stuck in there it",
    "start": "1228080",
    "end": "1233200"
  },
  {
    "text": "might still give you a bad result and you'll have to you know evaluate the result for correctiveness",
    "start": "1233200",
    "end": "1239520"
  },
  {
    "text": "but it can at least hopefully not destroy your whole process and compromise the process and take it over",
    "start": "1239520",
    "end": "1246320"
  },
  {
    "text": "so we'll see how that goes we're hoping to maybe ship something with it soon it could be a very big uh deal for us",
    "start": "1246320",
    "end": "1253200"
  },
  {
    "text": "and perhaps for you so we'd also like to migrate uh to a safer language to the",
    "start": "1253200",
    "end": "1258400"
  },
  {
    "text": "extent that's possible no one's saying we're going to rewrite everything in rust or",
    "start": "1258400",
    "end": "1263679"
  },
  {
    "text": "you know replace all of our c plus plus that's not possible but what we can do",
    "start": "1263679",
    "end": "1268799"
  },
  {
    "text": "is find particular soft targets that we know attackers are attacking",
    "start": "1268799",
    "end": "1274080"
  },
  {
    "text": "and we can replace those particular things with a safer language like you",
    "start": "1274080",
    "end": "1279360"
  },
  {
    "text": "could take your image processors your json parser your xml parser for example",
    "start": "1279360",
    "end": "1284880"
  },
  {
    "text": "and get java or kotlin or rust versions of those and put them in place",
    "start": "1284880",
    "end": "1291120"
  },
  {
    "text": "and then you could have a much smaller memory safety problem and then you that would be a complementary benefit to",
    "start": "1291120",
    "end": "1297679"
  },
  {
    "text": "sandboxing neither one by itself gets you all the way there i think they're both both necessary",
    "start": "1297679",
    "end": "1304720"
  },
  {
    "text": "and neither is sufficient on its own but together i think you have a really solid defense",
    "start": "1304720",
    "end": "1311440"
  },
  {
    "text": "story at least as far as software can go and that's where we're heading",
    "start": "1311440",
    "end": "1317520"
  },
  {
    "text": "of course hardware continues to be a difficulty there's also the matter of the learning curve of a new language to get everybody",
    "start": "1317520",
    "end": "1324640"
  },
  {
    "text": "to learn c plus is hard it's a complicated language any language that can do what it does is likely to be at",
    "start": "1324640",
    "end": "1331520"
  },
  {
    "text": "least as complex you know rust does a lot it takes a while to learn it swift does a lot it",
    "start": "1331520",
    "end": "1338080"
  },
  {
    "text": "takes a while to learn it there's a way to use java well takes a while to learn it you know so",
    "start": "1338080",
    "end": "1344000"
  },
  {
    "text": "we're asking more of our developers but we're thinking in the end that we're going to get better performance",
    "start": "1344000",
    "end": "1349679"
  },
  {
    "text": "better safety for sure and that it will be beneficial to the people who use our application",
    "start": "1349679",
    "end": "1355120"
  },
  {
    "text": "and again you can think along the same lines don't use c plus plus if you can avoid",
    "start": "1355120",
    "end": "1361919"
  },
  {
    "text": "it if you're starting something new have a plan to migrate away to the extent you can",
    "start": "1361919",
    "end": "1368480"
  },
  {
    "text": "getting the two languages to work together is a key aspect of the problem and it's improving and it's in the last",
    "start": "1368480",
    "end": "1374080"
  },
  {
    "text": "year alone it's um we made great headway with a thing called cxx and auto cxx",
    "start": "1374080",
    "end": "1380000"
  },
  {
    "text": "it's a way to get rust and c plus plus to talk to each other in a more easy to use way it's very cool",
    "start": "1380000",
    "end": "1385600"
  },
  {
    "text": "we're also doing things with c plus plus as much as we can garbage collection",
    "start": "1385600",
    "end": "1390880"
  },
  {
    "text": "new types of smart pointer that know if the thing they own is still exists or not and then they'll stop you from doing",
    "start": "1390880",
    "end": "1397760"
  },
  {
    "text": "use after free for example and then there's new hardware features coming that can help us",
    "start": "1397760",
    "end": "1402960"
  },
  {
    "text": "with the memory safety problem there's uh memory tagging coming from arm yeah you might have seen that already",
    "start": "1402960",
    "end": "1409280"
  },
  {
    "text": "control flow integrity we're already shipping some of that in chrome now we're very happy about that and there's",
    "start": "1409280",
    "end": "1414960"
  },
  {
    "text": "more coming and generally we can replace some of the undefined behavior that's in c plus plus",
    "start": "1414960",
    "end": "1421679"
  },
  {
    "text": "as libraries with our own we've done a lot of that already too like for example",
    "start": "1421679",
    "end": "1426880"
  },
  {
    "text": "does operator brackets on a vector allow you to go out of bounds in standard c they don't guarantee that",
    "start": "1426880",
    "end": "1433120"
  },
  {
    "text": "it's not but we can define our own vector that does guarantee that will not allow you",
    "start": "1433120",
    "end": "1438880"
  },
  {
    "text": "to go out of bounds and so we do so these bugs are real and important and",
    "start": "1438880",
    "end": "1445679"
  },
  {
    "text": "memory safety bugs i should say we have a wide variety we have a lot of use after free managing lifetimes is very",
    "start": "1445679",
    "end": "1451840"
  },
  {
    "text": "hard and there's other bugs too so the future is sandboxing is giving us 10",
    "start": "1451840",
    "end": "1459760"
  },
  {
    "text": "good years we're going to keep using it of course it's great but we need to move to our next stage of evolution which is",
    "start": "1459760",
    "end": "1466159"
  },
  {
    "text": "adding strong memory safety on top of that so thanks for listening i'll take",
    "start": "1466159",
    "end": "1472080"
  },
  {
    "text": "questions now thanks",
    "start": "1472080",
    "end": "1475200"
  },
  {
    "text": "thanks for a great talk it's pretty interesting um i think you've covered most of the",
    "start": "1477840",
    "end": "1483279"
  },
  {
    "text": "questions in the chat okay we don't have to look at those i think",
    "start": "1483279",
    "end": "1488880"
  },
  {
    "text": "um oh there's another one",
    "start": "1488880",
    "end": "1494080"
  },
  {
    "text": "how much variance is there for different architecture builds of chrome right there's another one from uh oh we",
    "start": "1494080",
    "end": "1501039"
  },
  {
    "text": "got like three questions now uh for different architecture builds um i assume you mean like arm versus intel",
    "start": "1501039",
    "end": "1509039"
  },
  {
    "text": "that hardware architecture um we don't yet have a huge variance but we do",
    "start": "1509039",
    "end": "1515919"
  },
  {
    "text": "expect to see a lot more coming in the future for example um",
    "start": "1515919",
    "end": "1522080"
  },
  {
    "text": "on intel we have there's a feature called cet control flow enforcement technology and it helps you make sure",
    "start": "1522080",
    "end": "1529919"
  },
  {
    "text": "that when you're returning from a function that you're returning to the same",
    "start": "1529919",
    "end": "1535279"
  },
  {
    "text": "function you came from which turns out to be pretty important attackers love to change that",
    "start": "1535279",
    "end": "1542960"
  },
  {
    "text": "and so the hardware is going to help us make sure we always return back to the right place",
    "start": "1542960",
    "end": "1550080"
  },
  {
    "text": "and that doesn't exist in the same form on arm arm has other mechanisms for example",
    "start": "1550080",
    "end": "1557039"
  },
  {
    "text": "pointer authent authentication codes or pac is a sort of a",
    "start": "1557039",
    "end": "1562080"
  },
  {
    "text": "it covers more it covers things differently but it's along the same lines of the",
    "start": "1562080",
    "end": "1567600"
  },
  {
    "text": "basic idea of control flow integrity so you know we do different things there",
    "start": "1567600",
    "end": "1573360"
  },
  {
    "text": "and then similarly there's a thing for arm called memory tagging extensions",
    "start": "1573360",
    "end": "1579200"
  },
  {
    "text": "where you can say this area of memory is of type 12",
    "start": "1579200",
    "end": "1584480"
  },
  {
    "text": "and this other area is of type 9 and then it will raise a hardware fault if you",
    "start": "1584480",
    "end": "1591279"
  },
  {
    "text": "try to you know take a pointer to type 9 and instead make it point to some memory of",
    "start": "1591279",
    "end": "1597679"
  },
  {
    "text": "type 12 that'll explode and so similarly you get a little bit of type safety in a",
    "start": "1597679",
    "end": "1604400"
  },
  {
    "text": "super coarse grained way like not in a um in the same way you would get from like",
    "start": "1604400",
    "end": "1610960"
  },
  {
    "text": "java where it's class by class but you can get a pretty good protection against things like",
    "start": "1610960",
    "end": "1617039"
  },
  {
    "text": "use after free type confusion and even can stop buffer overflows in certain",
    "start": "1617039",
    "end": "1623360"
  },
  {
    "text": "cases if you're about to overflow from one type into another",
    "start": "1623360",
    "end": "1628559"
  },
  {
    "text": "that can in certain cases become detectable and",
    "start": "1628559",
    "end": "1634320"
  },
  {
    "text": "so you know that doesn't exist on intel but on arm we're hoping to make good use",
    "start": "1634320",
    "end": "1639919"
  },
  {
    "text": "of it so increasingly we're seeing more and more protections of that kind from hardware",
    "start": "1639919",
    "end": "1646159"
  },
  {
    "text": "vendors someone also asked about memory encryption and again if we were to ever use that it",
    "start": "1646159",
    "end": "1651679"
  },
  {
    "text": "would be very different from one hardware vendor to another and we have to do different things so as the future",
    "start": "1651679",
    "end": "1659360"
  },
  {
    "text": "goes as the future comes at us i expect that our different hardware platforms may",
    "start": "1659360",
    "end": "1664799"
  },
  {
    "text": "become as different from a security perspective as different operating systems",
    "start": "1664799",
    "end": "1671120"
  },
  {
    "text": "we can maybe have a roughly similar big picture but the details are going to be totally different",
    "start": "1671120",
    "end": "1676880"
  },
  {
    "text": "as you mentioned cet which i think is being rolled out now has",
    "start": "1676880",
    "end": "1682720"
  },
  {
    "text": "this a bad question but has that been circumvented yet by the heck the attacker community because it seems like",
    "start": "1682720",
    "end": "1688799"
  },
  {
    "text": "every time every time some new hardware mitigation comes along you think that's",
    "start": "1688799",
    "end": "1694480"
  },
  {
    "text": "it all buff overflows are now fine and then you know they come along and say oh no it broke aslr and all that stuff so",
    "start": "1694480",
    "end": "1701600"
  },
  {
    "text": "right yeah so um for example there's already ways of working around pac on arm",
    "start": "1701600",
    "end": "1708640"
  },
  {
    "text": "um it the thing is though it does there's two",
    "start": "1708640",
    "end": "1713840"
  },
  {
    "text": "two benefits to this i should say three one is they can make software defenses more efficient",
    "start": "1713840",
    "end": "1721440"
  },
  {
    "text": "like for example i mentioned in a slide earlier a thing called miracle pointer",
    "start": "1721440",
    "end": "1726720"
  },
  {
    "text": "where we're inventing a type of smart pointer that knows whether or not the thing it points to is still alive",
    "start": "1726720",
    "end": "1733600"
  },
  {
    "text": "and there's another variant of the thing called scan star scan and that's kind of like a garbage",
    "start": "1733600",
    "end": "1739200"
  },
  {
    "text": "collection process where it looks around on the heap to see if there's any more references to the thing you're about to",
    "start": "1739200",
    "end": "1744799"
  },
  {
    "text": "destroy but the trouble with that is it can be slow",
    "start": "1744799",
    "end": "1750399"
  },
  {
    "text": "because it has to search the whole heap but with memory tagging it can speed",
    "start": "1750399",
    "end": "1755840"
  },
  {
    "text": "speed up the scan by a factor of however many tags there are",
    "start": "1755840",
    "end": "1761039"
  },
  {
    "text": "so if you have 16 different memory tags it's weak type safety but it speeds up",
    "start": "1761039",
    "end": "1767279"
  },
  {
    "text": "scanning by a factor of 16 because you only have to even search for",
    "start": "1767279",
    "end": "1772880"
  },
  {
    "text": "uh the particular one of 16 uh area 1016 types on the heap you don't",
    "start": "1772880",
    "end": "1779360"
  },
  {
    "text": "just scan the whole heap you scan 1 16th of the heap so it speeds up software",
    "start": "1779360",
    "end": "1784559"
  },
  {
    "text": "defenses two is the various um hardware defenses",
    "start": "1784559",
    "end": "1791120"
  },
  {
    "text": "work best together like if you combine control flow integrity like cet and software control",
    "start": "1791120",
    "end": "1798799"
  },
  {
    "text": "flow integrity for like forward jumps like calls and jumps",
    "start": "1798799",
    "end": "1804399"
  },
  {
    "text": "um then you and you combine them with data execution prevention",
    "start": "1804399",
    "end": "1810880"
  },
  {
    "text": "where you can stop a data page from being used as a code page for example",
    "start": "1810880",
    "end": "1817039"
  },
  {
    "text": "and you combine that with tagging it starts to cover",
    "start": "1817039",
    "end": "1823200"
  },
  {
    "text": "more and more of the attack techniques um you're probably never going to get there",
    "start": "1823200",
    "end": "1828880"
  },
  {
    "text": "all the way there just by adding by you know throwing hardware features at the problem",
    "start": "1828880",
    "end": "1834559"
  },
  {
    "text": "but we can close the gap and we can speed up software-based defenses",
    "start": "1834559",
    "end": "1841279"
  },
  {
    "text": "and then i said there were three things what was the third performance combining them to get a",
    "start": "1841279",
    "end": "1848399"
  },
  {
    "text": "better benefit and then three is it really does make the attacker do more",
    "start": "1848399",
    "end": "1854720"
  },
  {
    "text": "work at least um at least at first but all but maybe even",
    "start": "1854720",
    "end": "1862559"
  },
  {
    "text": "in continuing it's kind of like you know yes some very smart people can",
    "start": "1862559",
    "end": "1870480"
  },
  {
    "text": "work around pack or maybe even break it but doing so",
    "start": "1870480",
    "end": "1876159"
  },
  {
    "text": "can be it can be anywhere from they had to invent a technique to do it once and",
    "start": "1876159",
    "end": "1881200"
  },
  {
    "text": "then ever after it's easy sometimes that happens and that's terrible but sometimes",
    "start": "1881200",
    "end": "1887039"
  },
  {
    "text": "they invent a technique and then they have to reapply it every time they develop a new exploit",
    "start": "1887039",
    "end": "1892720"
  },
  {
    "text": "and it's just a pain in the butt and it's becomes an ongoing cost for attackers and that's what we want like",
    "start": "1892720",
    "end": "1899519"
  },
  {
    "text": "aslr address space layout randomization is a terrible terrible technique it",
    "start": "1899519",
    "end": "1906240"
  },
  {
    "text": "annoys me it's very silly but attackers do have to have a way of",
    "start": "1906240",
    "end": "1913279"
  },
  {
    "text": "bypassing it every time they write or most of the time when they write an exploit now they often can",
    "start": "1913279",
    "end": "1920880"
  },
  {
    "text": "but they have to you know and so even though it annoys me it's still valuable",
    "start": "1920880",
    "end": "1926799"
  },
  {
    "text": "um on 64-bit on 32-bit it's uh maybe not",
    "start": "1926799",
    "end": "1931919"
  },
  {
    "text": "yeah there's not enough room to do it yeah but why can't i ask why does it even it annoy you does it make",
    "start": "1931919",
    "end": "1938880"
  },
  {
    "text": "anything more difficult to bug or anything like that no not not really um what annoys me",
    "start": "1938880",
    "end": "1945039"
  },
  {
    "text": "about it is just that it's ugly it's a hack you know what i want what i",
    "start": "1945039",
    "end": "1950080"
  },
  {
    "text": "want is something like a language that just doesn't allow these problems in the first place why why are we trying to",
    "start": "1950080",
    "end": "1957519"
  },
  {
    "text": "hide things from the attacker you know like oh no they might find where the you know the stack is and then",
    "start": "1957519",
    "end": "1963840"
  },
  {
    "text": "they'll know where to overwrite the return pointer well why do we let them get to that point in the first place",
    "start": "1963840",
    "end": "1969919"
  },
  {
    "text": "that bothers me you know because the software bug that let that happen has no reason to exist",
    "start": "1969919",
    "end": "1976720"
  },
  {
    "text": "it's just oh you didn't check the bounds on your buffer well let's fix that and let's fix that at",
    "start": "1976720",
    "end": "1982880"
  },
  {
    "text": "scale by using a language that makes it easy rather than making every c programmer remember every single time you know what",
    "start": "1982880",
    "end": "1989919"
  },
  {
    "text": "i mean i want to fix the problem for real yeah there's lots of legacy software",
    "start": "1989919",
    "end": "1995440"
  },
  {
    "text": "right lots of c plus and it's um i just want to make sure i get to the",
    "start": "1995440",
    "end": "2001919"
  },
  {
    "text": "other language questions i think there's uh do you have a lot of legacy backwards compatibility versus security trade-offs",
    "start": "2001919",
    "end": "2009360"
  },
  {
    "text": "uh well that's tricky um we do support the main thing is",
    "start": "2009360",
    "end": "2015679"
  },
  {
    "text": "we support old versions of operating systems for some years",
    "start": "2015679",
    "end": "2022399"
  },
  {
    "text": "and then very gradually we um you know announced that we're going to",
    "start": "2022399",
    "end": "2028240"
  },
  {
    "text": "not support say windows vista anymore and i think windows 7 is the",
    "start": "2028240",
    "end": "2033600"
  },
  {
    "text": "oldest version we currently support and you know it might not be long before we don't support windows 7 anymore",
    "start": "2033600",
    "end": "2041200"
  },
  {
    "text": "but what we're able to do for the most part is we can do the best we can for you on",
    "start": "2041200",
    "end": "2047840"
  },
  {
    "text": "each platform if you have the latest version of android we can take advantage of what it",
    "start": "2047840",
    "end": "2053040"
  },
  {
    "text": "offers and if you don't we'll we'll do the best we can with what we got so it doesn't",
    "start": "2053040",
    "end": "2058398"
  },
  {
    "text": "really stop us from doing new things it's just that",
    "start": "2058399",
    "end": "2064240"
  },
  {
    "text": "um we can't promise as much as we can on the newest version",
    "start": "2064240",
    "end": "2069599"
  },
  {
    "text": "and as for hardware it's kind of a similar thing like if you've got some hardware that doesn't have cet yet well you don't have it but",
    "start": "2069599",
    "end": "2077040"
  },
  {
    "text": "we'll still do everything else for you cool it's another question um",
    "start": "2077040",
    "end": "2082320"
  },
  {
    "text": "since sandboxing can be expensive uh because the question is is there a sense of maybe scaling it",
    "start": "2082320",
    "end": "2088800"
  },
  {
    "text": "back on weaker clients absolutely we have some um",
    "start": "2088800",
    "end": "2094560"
  },
  {
    "text": "there's runtime configuration options in chromium you can actually yeah i was talking in",
    "start": "2094560",
    "end": "2100480"
  },
  {
    "text": "the video about how i wish we could do site isolation on a per origin basis",
    "start": "2100480",
    "end": "2108240"
  },
  {
    "text": "and actually there is an option in chrome to turn that on and you can do that and it just uses up more processes but",
    "start": "2108240",
    "end": "2114800"
  },
  {
    "text": "if you have the memory you can do it and on android we have a dynamic thing where",
    "start": "2114800",
    "end": "2120560"
  },
  {
    "text": "we face a lot of memory pressure on android there's just less free memory available",
    "start": "2120560",
    "end": "2126400"
  },
  {
    "text": "to make more processes so what we did was we said um if we notice that you've been logging",
    "start": "2126400",
    "end": "2133599"
  },
  {
    "text": "in to a certain site then we that we take that as a signal that it's",
    "start": "2133599",
    "end": "2138960"
  },
  {
    "text": "important to you and then we side isolate those and then sites that you're using",
    "start": "2138960",
    "end": "2144320"
  },
  {
    "text": "anonymously like just the news or you know whatever uh",
    "start": "2144320",
    "end": "2149359"
  },
  {
    "text": "uh read it if you're just reading reddit and not logging in then we don't need to spend a process on",
    "start": "2149359",
    "end": "2155839"
  },
  {
    "text": "that and we can make several sites share the anonymous process",
    "start": "2155839",
    "end": "2161280"
  },
  {
    "text": "and then dedicate our resources to the ones that seem important to you where logging in as a signal or if you",
    "start": "2161280",
    "end": "2167920"
  },
  {
    "text": "use it heavily that looks important to us you know things like that so we do do",
    "start": "2167920",
    "end": "2172960"
  },
  {
    "text": "some dynamic scaling um you could do a similar thing that makes sense for your application if you",
    "start": "2172960",
    "end": "2178800"
  },
  {
    "text": "got a server application you could say um you know this is for clients who have",
    "start": "2178800",
    "end": "2184560"
  },
  {
    "text": "logged in and then clients who haven't logged in maybe they share some resources it",
    "start": "2184560",
    "end": "2190079"
  },
  {
    "text": "depends on how much resource pressure you face i wouldn't adopt such mechanisms",
    "start": "2190079",
    "end": "2195839"
  },
  {
    "text": "until you've measured that you have resource pressure as long as you don't",
    "start": "2195839",
    "end": "2201280"
  },
  {
    "text": "you might as well sandbox everything yeah yeah uh i think we have about a minute and a",
    "start": "2201280",
    "end": "2206800"
  },
  {
    "text": "half i just want to finish the last question which is in what functional areas are your main challenges so",
    "start": "2206800",
    "end": "2212720"
  },
  {
    "text": "rendering javascript networking stuff like that right so um it's",
    "start": "2212720",
    "end": "2218640"
  },
  {
    "text": "mostly javascript and networking is tricky",
    "start": "2218640",
    "end": "2224640"
  },
  {
    "text": "web assembly is tricky when we give the attacker the ability to run code",
    "start": "2224640",
    "end": "2230400"
  },
  {
    "text": "like with javascript or webassembly it used to be flash before flash was removed",
    "start": "2230400",
    "end": "2235760"
  },
  {
    "text": "um you know you're giving the attacker a lot of power and a lot of chances to win so that those have always been tricky",
    "start": "2235760",
    "end": "2242800"
  },
  {
    "text": "so the renderer therefore we sandbox it the most heavily because the most dangerous stuff is in there",
    "start": "2242800",
    "end": "2249119"
  },
  {
    "text": "but similarly the network process has to parse and deserialize a ton of complicated stuff",
    "start": "2249119",
    "end": "2254960"
  },
  {
    "text": "you know quick and tls and http are quite complicated actually and there's a fair amount of risk there",
    "start": "2254960",
    "end": "2261920"
  },
  {
    "text": "for attack and we have had some some nasty bugs it's not as dangerous as javascript but",
    "start": "2261920",
    "end": "2269040"
  },
  {
    "text": "it's not exactly easy so um i would i really would like to",
    "start": "2269040",
    "end": "2274960"
  },
  {
    "text": "break out the network process into one per site because you know if you take over the network",
    "start": "2274960",
    "end": "2280480"
  },
  {
    "text": "process now you get access to the networking for every site",
    "start": "2280480",
    "end": "2285599"
  },
  {
    "text": "you know and that's that's not great um it's harder but it's you get more power and so i'd like to stop that",
    "start": "2285599",
    "end": "2292960"
  },
  {
    "text": "cool so that's the time we have um chris can you join us in the hangout room if it's",
    "start": "2292960",
    "end": "2298960"
  },
  {
    "text": "in the schedule right after so you can ask more questions there uh thank you for that and thank you chris",
    "start": "2298960",
    "end": "2305280"
  },
  {
    "text": "for an excellent talk cool thanks for having me thank you [Music]",
    "start": "2305280",
    "end": "2317988"
  },
  {
    "text": "you",
    "start": "2320240",
    "end": "2322320"
  }
]