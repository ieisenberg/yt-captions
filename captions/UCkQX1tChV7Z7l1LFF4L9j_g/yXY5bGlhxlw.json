[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "uh my name is gilad braa and I work for Google and I'm here to tell you about Dart which I'm sort of hoping you've",
    "start": "13160",
    "end": "19439"
  },
  {
    "text": "already heard something about good bad indifferent at least something and so uh",
    "start": "19439",
    "end": "25599"
  },
  {
    "text": "Dart is a new programming language that we're working on at Google",
    "start": "25599",
    "end": "30720"
  },
  {
    "start": "30000",
    "end": "63000"
  },
  {
    "text": "and we're doing this because we think web programming is in desperate need of improvement uh we do a a modest amount",
    "start": "30720",
    "end": "37800"
  },
  {
    "text": "of such programming at Google and uh we find that present methods are are",
    "start": "37800",
    "end": "44039"
  },
  {
    "text": "costing us a lot and are rather difficult and so uh we embarked on the dart programming language project to to",
    "start": "44039",
    "end": "50559"
  },
  {
    "text": "help improve that situation now obviously there's more to it than just programming language there's tools",
    "start": "50559",
    "end": "55840"
  },
  {
    "text": "there's platform there's libraries there's all kinds of things but whatever it is language is fairly Central to it",
    "start": "55840",
    "end": "63800"
  },
  {
    "start": "63000",
    "end": "151000"
  },
  {
    "text": "uh and so we want to create a language that uh supports what I'd call civilized programming on the web and if you wish",
    "start": "63800",
    "end": "70600"
  },
  {
    "text": "to infer anything about the current state and it's civilization you're welcome to do so uh basically Dart is",
    "start": "70600",
    "end": "78600"
  },
  {
    "text": "there to to make it possible to do web applications that are as good or or",
    "start": "78600",
    "end": "84600"
  },
  {
    "text": "better than native applications with uh as as comparable effort hopefully less",
    "start": "84600",
    "end": "91079"
  },
  {
    "text": "effort Uh current state of affairs every people do do interesting web applications but it's fairly heroic and",
    "start": "91079",
    "end": "98200"
  },
  {
    "text": "it it should not be heroic and so we're trying to create something that",
    "start": "98200",
    "end": "104280"
  },
  {
    "text": "basically makes it easy and straightforward in a way that's comparable I mean great applications are",
    "start": "104280",
    "end": "110000"
  },
  {
    "text": "never easy but jumping through insane Hoops is not what you should be doing",
    "start": "110000",
    "end": "115079"
  },
  {
    "text": "you should at least have a tool that is approximately designed for the the purpose you're using it for and so Dart",
    "start": "115079",
    "end": "122479"
  },
  {
    "text": "is a language that uh it's not trying to to Really uh radically change uh the",
    "start": "122479",
    "end": "129640"
  },
  {
    "text": "state of technology in in theory it's trying to to provide you with something that's workable in practice so you'll",
    "start": "129640",
    "end": "135920"
  },
  {
    "text": "find that it's rather a familiar looking language it's it's designed so that you know most mainstream developers will not",
    "start": "135920",
    "end": "141840"
  },
  {
    "text": "go into shock seeing it even though uh I'd argue that if we had something that put them into shock it would probably be",
    "start": "141840",
    "end": "147400"
  },
  {
    "text": "even better but um I'm sort of in a minority from that point of view so uh yeah class based as you'd",
    "start": "147400",
    "end": "154599"
  },
  {
    "start": "151000",
    "end": "226000"
  },
  {
    "text": "expect and so here's a little piece of Dart code as you can see it isn't very hard to read we've got a class point it",
    "start": "154599",
    "end": "161400"
  },
  {
    "text": "has two instance variables X and Y it has a Constructor there's a bit of sugar there uh for the very common situation",
    "start": "161400",
    "end": "168640"
  },
  {
    "text": "where all the Constructor is really doing is taking its parameters and assigning it to the corresponding uh",
    "start": "168640",
    "end": "174319"
  },
  {
    "text": "instance variables people do that enough so that there's a little bit of sugar there we're trying to to make things",
    "start": "174319",
    "end": "180879"
  },
  {
    "text": "convenient and cut on boilerplate without going overboard on the syntactic sugar which is is always a an issue",
    "start": "180879",
    "end": "187720"
  },
  {
    "text": "right every piece of syntactic sugar you give people results in requests for more syntactic sugar and it's a judgment call",
    "start": "187720",
    "end": "194040"
  },
  {
    "text": "as to how far far to go but this should be fairly clear and then we have a method a method is named",
    "start": "194040",
    "end": "199879"
  },
  {
    "text": "plus and it takes something and extracts an x value from it adds it to the",
    "start": "199879",
    "end": "205680"
  },
  {
    "text": "current points x value gets its yv value similarly presumably this is a point but",
    "start": "205680",
    "end": "210920"
  },
  {
    "text": "it really doesn't have to be it could be anything that has an X and A Y right and produces a new point so it basically is",
    "start": "210920",
    "end": "216840"
  },
  {
    "text": "a method for adding points in short you can look at this and you can get the idea that this is not",
    "start": "216840",
    "end": "222319"
  },
  {
    "text": "going to be something that'll be very hard for you to read and and understand as it stands but obviously there's more",
    "start": "222319",
    "end": "228120"
  },
  {
    "start": "226000",
    "end": "336000"
  },
  {
    "text": "to that uh so the other thing is Dart is an objectoriented language it's a which",
    "start": "228120",
    "end": "234400"
  },
  {
    "text": "most languages widely used today are but it's a purely object-oriented language that means that every is an object which",
    "start": "234400",
    "end": "241280"
  },
  {
    "text": "of course has many precedents uh and some some that are fairly widely used today and some that are catching on and",
    "start": "241280",
    "end": "249000"
  },
  {
    "text": "uh that has lots of advantages generally having a uniform model uh makes things easier for everybody for the",
    "start": "249000",
    "end": "256000"
  },
  {
    "text": "programmer and believe it or not that's actually making it easier for the implementers uh Dart is is run by by my",
    "start": "256000",
    "end": "262440"
  },
  {
    "text": "good friend Lars Buck Who U he the guy who did V8 he's the guy who did hotspot in Java he's responsible for um much of",
    "start": "262440",
    "end": "270160"
  },
  {
    "text": "the high-speed virtual machines that the world is using today and so there's certainly an interest in making this",
    "start": "270160",
    "end": "276479"
  },
  {
    "text": "perform well and and there's a lot of expertise on doing that and having this pure model is actually a plus so in",
    "start": "276479",
    "end": "283880"
  },
  {
    "text": "particular there are no there's no Auto boxing going on there are no hidden coercion that's a huge problem in",
    "start": "283880",
    "end": "289520"
  },
  {
    "text": "JavaScript by the way in general is the fact that things get coerced in in different ways and and there are these",
    "start": "289520",
    "end": "295479"
  },
  {
    "text": "these extreme examples where true becomes false and array is turned into Strings and and all these kind of things",
    "start": "295479",
    "end": "301520"
  },
  {
    "text": "and that's a lesson that most of the world learned oh I'd say 45 years ago",
    "start": "301520",
    "end": "306800"
  },
  {
    "text": "right in the 60s basically there were a lot of languages that did a lot of implicit coercions because when you think about it briefly it seems oh yeah",
    "start": "306800",
    "end": "314240"
  },
  {
    "text": "that's a good idea it'll just convert it to whatever I meant uh the experience was that this was an unmitigated",
    "start": "314240",
    "end": "320800"
  },
  {
    "text": "disaster and yet uh we're back where we were uh in 1968 or so so uh Dart doesn't",
    "start": "320800",
    "end": "328039"
  },
  {
    "text": "do that everything's an object nothing ever gets coerced by itself nothing nothing happens automatically in that",
    "start": "328039",
    "end": "334039"
  },
  {
    "text": "way and rarely needs to be so things are a lot more predictable and easy to",
    "start": "334039",
    "end": "339440"
  },
  {
    "start": "336000",
    "end": "474000"
  },
  {
    "text": "use um another interesting property D Dart is optionally typed so what does",
    "start": "339440",
    "end": "345240"
  },
  {
    "text": "that mean you're going to hear more of that term optionally typed uh all over because we're not the only ones doing it",
    "start": "345240",
    "end": "350600"
  },
  {
    "text": "it turns out so optionally typed here's our class Point again but something's happened to it if you look uh chose",
    "start": "350600",
    "end": "358639"
  },
  {
    "text": "yellow I used to use red but I learned that projectors don't like red uh we have here Types on on the instance",
    "start": "358639",
    "end": "365680"
  },
  {
    "text": "variables so we know they're integers we know that the operator takes a point and returns a point the the plus operator so",
    "start": "365680",
    "end": "373039"
  },
  {
    "text": "what does that do it it basically makes it easier to read it's a form of documentation that's the main interest",
    "start": "373039",
    "end": "379800"
  },
  {
    "text": "here it's not necessarily about error checking though it does do that as well",
    "start": "379800",
    "end": "385360"
  },
  {
    "text": "but it's mainly documentation for you the programmer and for the machine for the Tooling in particular this program",
    "start": "385360",
    "end": "392720"
  },
  {
    "text": "will run just like the other one does and all kinds of intermediate States will run too you don't have to pass the",
    "start": "392720",
    "end": "398720"
  },
  {
    "text": "type Checker in order to run a d DART program that's very different from you know you might look at this and think",
    "start": "398720",
    "end": "404280"
  },
  {
    "text": "this is vaguely Java code but the idea here of optional typing is that typing is truly optional it's the type Checker",
    "start": "404280",
    "end": "411240"
  },
  {
    "text": "in your service rather than the other way around and that's that's an approach",
    "start": "411240",
    "end": "416479"
  },
  {
    "text": "that you know has elicited a bit of controversy but we very strongly believe in it so what this program will do is",
    "start": "416479",
    "end": "424080"
  },
  {
    "text": "exactly what this code does is exactly what the code I showed you before without the types the types do not",
    "start": "424080",
    "end": "429400"
  },
  {
    "text": "change Behavior ever they do not introduce hidden casts or ctions they do",
    "start": "429400",
    "end": "434479"
  },
  {
    "text": "not affect overloading and and Which choice of method to use they have no semantic effect they're there primarily",
    "start": "434479",
    "end": "441120"
  },
  {
    "text": "so that the code is more toolable that you the programmer can read it and understand it better and uh you know if",
    "start": "441120",
    "end": "448039"
  },
  {
    "text": "if the implementation can ever figure out out anything more that it could use this for it it can but it has to preserve the semantics it can't change",
    "start": "448039",
    "end": "454440"
  },
  {
    "text": "what the code does and this is very different from the type systems use in something like Java so I've spent whole",
    "start": "454440",
    "end": "460319"
  },
  {
    "text": "talks talking about this but this talk I'm I'm kind of bored with that so we're going to uh give this quick intro of the",
    "start": "460319",
    "end": "467000"
  },
  {
    "text": "highlights of Dart and then delve deeper into a few issues that um we're developing uh with an eye toward the",
    "start": "467000",
    "end": "474400"
  },
  {
    "start": "474000",
    "end": "598000"
  },
  {
    "text": "future so beyond optional typing single inheritance well that's not a huge surprise um multiple inheritance is",
    "start": "474400",
    "end": "480560"
  },
  {
    "text": "another one of those things like coercion that got discredited a long time ago uh has some advantages though",
    "start": "480560",
    "end": "486720"
  },
  {
    "text": "but overall people found that it's much more predictable and easy to to deal with when uh every class has a single",
    "start": "486720",
    "end": "493240"
  },
  {
    "text": "super class so that's not very radical and shouldn't surprise anyone however there are times when this is a problem",
    "start": "493240",
    "end": "499000"
  },
  {
    "text": "which is why we're actually going to move to Mixon based inheritance I'm not sure if everybody know here knows what",
    "start": "499000",
    "end": "504400"
  },
  {
    "text": "that is but that's why you know a good section of the talk will be spent explaining what that is is it's",
    "start": "504400",
    "end": "509639"
  },
  {
    "text": "basically a way of keeping the Simplicity of single inheritance both in the runtime and in the structure but",
    "start": "509639",
    "end": "515000"
  },
  {
    "text": "letting you share code and and reuse it uh a little bit more what else can we say in terms of",
    "start": "515000",
    "end": "521680"
  },
  {
    "text": "buzzwords about Dart uh message based concurrency right so uh Dart uh uses a",
    "start": "521680",
    "end": "528800"
  },
  {
    "text": "actor- likee model we call them isolates they're you know things with independent",
    "start": "528800",
    "end": "534120"
  },
  {
    "text": "heaps and stacks and they communicate via message passing so you never have shared state concurrency you never have",
    "start": "534120",
    "end": "540760"
  },
  {
    "text": "locks you never have Deadlocks you never you know all the good stuff that you know and love from from the Java World",
    "start": "540760",
    "end": "546720"
  },
  {
    "text": "perhaps so that's basically uh nothing here is particularly radical but it's",
    "start": "546720",
    "end": "552200"
  },
  {
    "text": "it's uh it's a good combination finally mirror-based reflection I'm going to spend some time",
    "start": "552200",
    "end": "558640"
  },
  {
    "text": "on that toward the end of the talk uh reflection is what make language what makes languag is dynamic right it's not",
    "start": "558640",
    "end": "565040"
  },
  {
    "text": "the languages that are really Dynamic if you want to all languages are dynamic in the sense that they evolve over time",
    "start": "565040",
    "end": "571640"
  },
  {
    "text": "what is dynamic are the programs you write in the language right those in a dynamic language you can change that",
    "start": "571640",
    "end": "578320"
  },
  {
    "text": "program can itself change itself over time and do interesting things and adapt and that's something that we want to",
    "start": "578320",
    "end": "585079"
  },
  {
    "text": "have at the same time we need to to control this for purposes of performance for purposes of security and so we need",
    "start": "585079",
    "end": "592680"
  },
  {
    "text": "a more structured approach that's mirror based reflection I'll talk a fair amount about this as we go on",
    "start": "592680",
    "end": "601120"
  },
  {
    "start": "598000",
    "end": "756000"
  },
  {
    "text": "so in terms of of what kind of Beast this is in reality uh we have two two",
    "start": "601160",
    "end": "607440"
  },
  {
    "text": "main implementations of Dart we have a compiler that compiles to JavaScript and we have a virtual",
    "start": "607440",
    "end": "613480"
  },
  {
    "text": "machine and the virtual machine is a lot nicer because there we can actually take",
    "start": "613480",
    "end": "618600"
  },
  {
    "text": "advantage of of the underlying real machine which has better Primitives uh",
    "start": "618600",
    "end": "624120"
  },
  {
    "text": "for getting the right semantics getting the right semantics on top of JavaScript is is really a challenge because because",
    "start": "624120",
    "end": "629839"
  },
  {
    "text": "basically the language often doesn't have The Primitives you want and uh and it tends to enforce you",
    "start": "629839",
    "end": "635800"
  },
  {
    "text": "know it its point of view on anything that's running on top of that unless you you do a a really really thorough job of",
    "start": "635800",
    "end": "642079"
  },
  {
    "text": "analyzing and and a lot of hard compiler work goes into to making this behave properly on top of JavaScript but that's",
    "start": "642079",
    "end": "649320"
  },
  {
    "text": "crucial because JavaScript is everywhere JavaScript is in is in all the browsers and while we definitely would like to",
    "start": "649320",
    "end": "656079"
  },
  {
    "text": "see Dart VMS in browsers over time we don't don't expect that to happen overnight and so it's crucial that you",
    "start": "656079",
    "end": "663120"
  },
  {
    "text": "know you can run you can convert it to JavaScript run it on any modern browser and so there's there's no uh barrier to",
    "start": "663120",
    "end": "670959"
  },
  {
    "text": "to deployment and and use of Dart uh from that perspective so on the other hand the virtual machine is also useful",
    "start": "670959",
    "end": "677560"
  },
  {
    "text": "for a couple of things even now one is of course on the server you can get better performance uh some features will just",
    "start": "677560",
    "end": "684560"
  },
  {
    "text": "work better uh and uh you can also uh take advantage of it in fact generally",
    "start": "684560",
    "end": "690000"
  },
  {
    "text": "people do during development because one of the problems with tools that that compile to JavaScript is that because",
    "start": "690000",
    "end": "695720"
  },
  {
    "text": "compiling to JavaScript is a non-trivial task they tend to take a fair amount of time if they're doing anything",
    "start": "695720",
    "end": "701320"
  },
  {
    "text": "interesting if their semantics deviate in any serious way from JavaScript and and try to solve some of the problems",
    "start": "701320",
    "end": "707040"
  },
  {
    "text": "you have in JavaScript then it turns out that you to sit there waiting for a compiler and you don't want to do that",
    "start": "707040",
    "end": "713160"
  },
  {
    "text": "uh the advantage of having the dart VM is that we can actually give you a development environment with instant",
    "start": "713160",
    "end": "718320"
  },
  {
    "text": "turnaround uh using the VM and then you take that same program you press a button and choose to run in JavaScript and see that",
    "start": "718320",
    "end": "725040"
  },
  {
    "text": "you know it runs either way and you can develop in the browser with a DVM because our development environment comes with a version of Chrome that's",
    "start": "725040",
    "end": "732720"
  },
  {
    "text": "been retrofitted so that it contains a DVM and so you can actually test your",
    "start": "732720",
    "end": "737839"
  },
  {
    "text": "your working web programs the display HTML all of that with instant turn around using Dart without going through",
    "start": "737839",
    "end": "744160"
  },
  {
    "text": "a long compile cycle anyway I hope that the world will eventually become a better place and and",
    "start": "744160",
    "end": "750519"
  },
  {
    "text": "we'll have uh Dart engines in in a lot of places but that's going to take time and we're not letting it hold us up at",
    "start": "750519",
    "end": "756639"
  },
  {
    "text": "the moment so this is just a picture of that that same thing basically you can take",
    "start": "756639",
    "end": "762519"
  },
  {
    "text": "Dart code and either feed it into a dart VM or via dart2js our our Dart to JavaScript compiler uh feed it into",
    "start": "762519",
    "end": "769880"
  },
  {
    "text": "JavaScript and dart tojs is a pretty serious Beast it's already uh the third generation of this compiler that's been",
    "start": "769880",
    "end": "776279"
  },
  {
    "text": "developed in I guess the past year and a half or so and and uh it's it gives you",
    "start": "776279",
    "end": "782040"
  },
  {
    "text": "performance that's very very similar to to Native JavaScript the goal is essentially 100% of not not to lose any",
    "start": "782040",
    "end": "788360"
  },
  {
    "text": "performance in in compilation it gives you reasonably small uh downloads",
    "start": "788360",
    "end": "793440"
  },
  {
    "text": "because it does tree shaking uh inherently during the compilation process and uh puts out relatively",
    "start": "793440",
    "end": "800920"
  },
  {
    "text": "readable JavaScript uh though I really think that as we as we move forward",
    "start": "800920",
    "end": "806079"
  },
  {
    "start": "806000",
    "end": "943000"
  },
  {
    "text": "that'll be less of an interesting concern so uh that's kind of a just a very short",
    "start": "806079",
    "end": "815360"
  },
  {
    "text": "overview of Dart in you know a few minutes and beyond that I want to talk",
    "start": "815360",
    "end": "821720"
  },
  {
    "text": "about some of the things that we haven't talked about in in talks before there are a lot of overviews of Dart you can",
    "start": "821720",
    "end": "827000"
  },
  {
    "text": "get uh if you if you search YouTube you'll you'll find me and others expounding on this in great detail if",
    "start": "827000",
    "end": "833079"
  },
  {
    "text": "you want more more nuts and bolts stuff you can go to our website where we just announced our M1 release which is a",
    "start": "833079",
    "end": "838639"
  },
  {
    "text": "milestone one that's sort of something I don't know somewhere between an alpha and a beta uh but it means that we're",
    "start": "838639",
    "end": "844639"
  },
  {
    "text": "we're going to try and steer away from breaking language changes at this point uh and there there's there's videos",
    "start": "844639",
    "end": "851079"
  },
  {
    "text": "there's tutorials there's all kinds of stuff right so I'm not going to spend a lot of my time uh going over that ground",
    "start": "851079",
    "end": "857600"
  },
  {
    "text": "again instead I'll talk about some of the interesting things that are happening after the M1 release that will",
    "start": "857600",
    "end": "864199"
  },
  {
    "text": "make Dart a better language still so one of them is mixin uh which aren't there",
    "start": "864199",
    "end": "870079"
  },
  {
    "text": "yet but they're going to be in a in a future Milestone at at some point before",
    "start": "870079",
    "end": "876000"
  },
  {
    "text": "uh before this becomes a product uh we haven't actually finalized the design though we we do have a pretty good idea",
    "start": "876000",
    "end": "882120"
  },
  {
    "text": "of what it'll look like uh small matter of implementation but at Google we have people who are good at that sort of",
    "start": "882120",
    "end": "888240"
  },
  {
    "text": "thing so I expect it'll I don't expect to see many problems we we have done mixin based languages before uh many",
    "start": "888240",
    "end": "895759"
  },
  {
    "text": "times and so it it shouldn't be a radical surprise now I'm not sure everybody here actually knows what a mix",
    "start": "895759",
    "end": "901399"
  },
  {
    "text": "in is so I'm going to show you here's our old friend Point again now this",
    "start": "901399",
    "end": "907759"
  },
  {
    "text": "stuff the stuff in yellow bold right that is literally a mix in that's the the the thing that follows the class",
    "start": "907759",
    "end": "914079"
  },
  {
    "text": "declaration between curly braces that's the stuff that the class is adding to its super class right that's the Delta",
    "start": "914079",
    "end": "921279"
  },
  {
    "text": "the difference between that and the Superglass that's really what a mixing is it's what that what is getting added",
    "start": "921279",
    "end": "928199"
  },
  {
    "text": "and and you know syntactically you can see it in in in this picture and the point of this is that if you could",
    "start": "928199",
    "end": "934120"
  },
  {
    "text": "separate that you could attach that to multiple class hierarchies and that can be a really useful thing so if we want",
    "start": "934120",
    "end": "941600"
  },
  {
    "text": "to look at a at a um classical example of mix in use here is a collection class",
    "start": "941600",
    "end": "948040"
  },
  {
    "start": "943000",
    "end": "1007000"
  },
  {
    "text": "well it isn't really a collection class CU it won't fit on a slide but it is shall we say an extended subset of darts",
    "start": "948040",
    "end": "954440"
  },
  {
    "text": "collection class right and the mix in again will be",
    "start": "954440",
    "end": "959639"
  },
  {
    "text": "the stuff in yellow so in particular the only interesting thing here is is this map",
    "start": "959639",
    "end": "965160"
  },
  {
    "text": "function it's a classical function on collections right you give it a function it applies the function to all the elements in the in the collection and",
    "start": "965160",
    "end": "971680"
  },
  {
    "text": "gives you a new collection back with the results right basic uh building block of",
    "start": "971680",
    "end": "976880"
  },
  {
    "text": "functional programming of objectoriented programming as well it's been it's been around in in object-oriented programs",
    "start": "976880",
    "end": "982360"
  },
  {
    "text": "since small talk up you know 76 or so probably so it's been around for 36",
    "start": "982360",
    "end": "988240"
  },
  {
    "text": "years and um the problem is that not everything can sit in the collection",
    "start": "988240",
    "end": "993880"
  },
  {
    "text": "hierarchy there are a lot of collection like things it's a very useful interface and these pieces of implementation are",
    "start": "993880",
    "end": "1000519"
  },
  {
    "text": "very generic and and independent of a part of for the most part of representation and you'd like to use",
    "start": "1000519",
    "end": "1005959"
  },
  {
    "text": "them in other hierarchies classical example are guies or for example the Dom",
    "start": "1005959",
    "end": "1011120"
  },
  {
    "text": "so the Dom has a bunch uh of stuff that that needs to look like a collection and behave like a collection in in our",
    "start": "1011120",
    "end": "1017639"
  },
  {
    "text": "library and and uh one way you could do it basically with the mix in feature is basically mix in collections because the",
    "start": "1017639",
    "end": "1024160"
  },
  {
    "text": "problem with these Dom classes is of course that they have to be part of the Dom hierarchy and with single inheritance they can't be part of the",
    "start": "1024160",
    "end": "1030000"
  },
  {
    "text": "Dom hierarchy and the collection hierarchy at the same time so what are you going to do you you you don't want",
    "start": "1030000",
    "end": "1036798"
  },
  {
    "text": "to do real multiple inheritance because then uh you have you run into a lot of nasty questions of Precedence and you",
    "start": "1036799",
    "end": "1044199"
  },
  {
    "text": "know conflicts between methods and things like that what mix in based inheritance basically preser a single",
    "start": "1044199",
    "end": "1049440"
  },
  {
    "text": "inheritance chain but it interjects this this the the functionality of a mixin along the chain so you still have a",
    "start": "1049440",
    "end": "1056120"
  },
  {
    "text": "single uh inheritance chain going in one path up from your class all the way up",
    "start": "1056120",
    "end": "1061679"
  },
  {
    "text": "to object but you get more functionality in there and that's how you can actually",
    "start": "1061679",
    "end": "1066919"
  },
  {
    "text": "avoid replicating this this code in in multiple places because that that's",
    "start": "1066919",
    "end": "1072120"
  },
  {
    "text": "obviously a bad thing because you then when you maintain it you have to change it any bug fix you have to if you copy",
    "start": "1072120",
    "end": "1077640"
  },
  {
    "text": "the code that's a problem problem uh if you add stuff to collection that's a problem more stuff you have to copy and",
    "start": "1077640",
    "end": "1083440"
  },
  {
    "text": "so forth of course if it was just this one it wouldn't be that worthwhile adding a language construct but of",
    "start": "1083440",
    "end": "1088480"
  },
  {
    "text": "course there are others and in fact there are about 30 of them I know cuz uh",
    "start": "1088480",
    "end": "1094000"
  },
  {
    "start": "1089000",
    "end": "1116000"
  },
  {
    "text": "I I put that map thing into our collection library and discovered to my horror how this was set up so uh",
    "start": "1094000",
    "end": "1100280"
  },
  {
    "text": "obviously we we need to solve that in a in a more elegant fashion and that's one of the things this is a poster child for",
    "start": "1100280",
    "end": "1106000"
  },
  {
    "text": "mixins it's one of the things we're going to do we have quite a few other uses in mind in the library and so we we",
    "start": "1106000",
    "end": "1112120"
  },
  {
    "text": "expect our libraries to to change a fair amount uh once mixins come in uh so some you caveats and fine print",
    "start": "1112120",
    "end": "1121320"
  },
  {
    "text": "we'll probably do this in stages the initial mixins will probably have restrictions about using fields and all",
    "start": "1121320",
    "end": "1126679"
  },
  {
    "text": "kinds of other stuff and we will gradually uh move this in bit by bit but ultimately our goal is exactly what I",
    "start": "1126679",
    "end": "1133200"
  },
  {
    "text": "showed you full you know anything that's in the Delta of the class we we expect to be able to to represent VM mix in and",
    "start": "1133200",
    "end": "1140440"
  },
  {
    "text": "share without uh replicating and uh I think this is a good opportunity to just uh give people",
    "start": "1140440",
    "end": "1147760"
  },
  {
    "start": "1141000",
    "end": "1245000"
  },
  {
    "text": "a bit of background because nowadays people tend to forget where ideas come from uh eventually we end up in",
    "start": "1147760",
    "end": "1153600"
  },
  {
    "text": "ridiculous patent Wars as well over stuff that was all invented many years ago uh so mixin originated in lisp uh in",
    "start": "1153600",
    "end": "1162200"
  },
  {
    "text": "the object oriented dialects of list but it was more or less an idiom that you you that took advantage of certain ways",
    "start": "1162200",
    "end": "1167559"
  },
  {
    "text": "of they were doing things eventually um it was recognized as a language construct I wrote a paper a",
    "start": "1167559",
    "end": "1174640"
  },
  {
    "text": "long long time ago with uh William Cook uh who's now a professor at UT Austin",
    "start": "1174640",
    "end": "1180520"
  },
  {
    "text": "and uh if you really want to Del you know deep dive into this uh it's still out there and still gets",
    "start": "1180520",
    "end": "1187280"
  },
  {
    "text": "cited uh we implemented this again many years ago in a small talk dialect uh",
    "start": "1187280",
    "end": "1192400"
  },
  {
    "text": "that LS and I and a few others uh worked on uh called strong talk that",
    "start": "1192400",
    "end": "1197480"
  },
  {
    "text": "implementation was the first time was actually put into a virtual machine in fact it's the only time it's really been",
    "start": "1197480",
    "end": "1202520"
  },
  {
    "text": "put into a virtual machine all the implementations you see today are doing sort of code copying under the covers",
    "start": "1202520",
    "end": "1209159"
  },
  {
    "text": "and that's kind of unfortunate and wasteful uh eventually we'll probably get the dart VM to do something similar",
    "start": "1209159",
    "end": "1215039"
  },
  {
    "text": "to what we did in strong talk so that there's no space overheads to this either uh you probably you may have",
    "start": "1215039",
    "end": "1221559"
  },
  {
    "text": "heard of things like traits that's sort of a lobotomized version of mixins uh with again restrictions on State and and",
    "start": "1221559",
    "end": "1228159"
  },
  {
    "text": "so forth uh that has gained some popularity in some languages you can see a variance of",
    "start": "1228159",
    "end": "1233320"
  },
  {
    "text": "this idea in Ruby in Scala and you speak in in other languages so it's not",
    "start": "1233320",
    "end": "1238480"
  },
  {
    "text": "actually a radically new idea but uh you know it's only starting to to hit",
    "start": "1238480",
    "end": "1243640"
  },
  {
    "text": "mainstream I think at this point next I want to talk a little bit",
    "start": "1243640",
    "end": "1250320"
  },
  {
    "start": "1245000",
    "end": "1330000"
  },
  {
    "text": "about uh isets asynchrony concurrency and so forth uh as I said we don't do",
    "start": "1250320",
    "end": "1255480"
  },
  {
    "text": "shared State concurrency uh partly because it's it's evil and partly because we're running on the web and you",
    "start": "1255480",
    "end": "1261840"
  },
  {
    "text": "know we have to compile to JavaScript so we really can't so that helps keeps us honest uh we build you build your",
    "start": "1261840",
    "end": "1268400"
  },
  {
    "text": "programs out of isets they're sort of actor- likee things hopefully everybody knows what an actor is but ultimately",
    "start": "1268400",
    "end": "1273799"
  },
  {
    "text": "this is an entity with its own uh logically threat of control its own Heap",
    "start": "1273799",
    "end": "1279200"
  },
  {
    "text": "its own stack and you can't share anything except by sending messages and",
    "start": "1279200",
    "end": "1284679"
  },
  {
    "text": "copying things essentially between these things uh so um you know it's a bit like uh for",
    "start": "1284679",
    "end": "1292000"
  },
  {
    "text": "example erlang but it's also different right these are not these things don't block uh they're they're closer actually",
    "start": "1292000",
    "end": "1298080"
  },
  {
    "text": "to the original actor model as as proposed back in 1972 by KL hwit right",
    "start": "1298080",
    "end": "1304400"
  },
  {
    "text": "that's amazing I mean people were still programming with aases back then but uh we're only now 40 years later starting",
    "start": "1304400",
    "end": "1310880"
  },
  {
    "text": "to to see this uh idea really getting into into real applications so isolates communicate",
    "start": "1310880",
    "end": "1317279"
  },
  {
    "text": "through ports again this is a low-level Plumbing mechanism that lets you you you send messages to a port and the",
    "start": "1317279",
    "end": "1324720"
  },
  {
    "text": "receiving isolate has a receiver Port that where it gets the messages off of Acts on it and and you may choose to",
    "start": "1324720",
    "end": "1330679"
  },
  {
    "start": "1330000",
    "end": "1375000"
  },
  {
    "text": "reply Etc so uh in a way this is this should be familiar to a lot of people working",
    "start": "1330679",
    "end": "1337200"
  },
  {
    "text": "with u Scala or or in the JavaScript world node.js",
    "start": "1337200",
    "end": "1343080"
  },
  {
    "text": "uh when you when you send these messages you get a future back uh",
    "start": "1343080",
    "end": "1349120"
  },
  {
    "text": "and the future is is a pro essentially a promise that eventually some some result will be there it's all asynchronous",
    "start": "1349120",
    "end": "1354840"
  },
  {
    "text": "because this is a completely different isolate and you can set call backs on those Futures and and uh have code",
    "start": "1354840",
    "end": "1362720"
  },
  {
    "text": "execute when when they're actually ready so this again is not all that radical",
    "start": "1362720",
    "end": "1368200"
  },
  {
    "text": "but having it you know put into the infrastructure from day one helps and we intend to to make that nicer and and",
    "start": "1368200",
    "end": "1374279"
  },
  {
    "text": "raise the level of abstraction the exact way we do that we haven't decided because uh you know what's what's very",
    "start": "1374279",
    "end": "1382000"
  },
  {
    "start": "1375000",
    "end": "1405000"
  },
  {
    "text": "clear is that no. JS that that model is far from perfect uh what you end up getting is a lot of",
    "start": "1382000",
    "end": "1388000"
  },
  {
    "text": "nesting of uh of these call backs on Futures and then you call backs on the",
    "start": "1388000",
    "end": "1393159"
  },
  {
    "text": "resulting thing and so forth and and it gets a little hard to to work with uh it",
    "start": "1393159",
    "end": "1399360"
  },
  {
    "text": "beats threads though it beats uh you know shared State and all the horrible bugs you can get there but it still gets",
    "start": "1399360",
    "end": "1405760"
  },
  {
    "start": "1405000",
    "end": "1456000"
  },
  {
    "text": "gets rather tedious fairly fast so um you know if you look at this this",
    "start": "1405760",
    "end": "1411159"
  },
  {
    "text": "is a very very simple example again something I can fit on a slide assume you've got these two sources of data",
    "start": "1411159",
    "end": "1416880"
  },
  {
    "text": "that you call asynchronously one and you intend to plot them so one one you're going to get a list of points from one",
    "start": "1416880",
    "end": "1422520"
  },
  {
    "text": "server and for the x-axis and a list of points for the y- axis and to do this",
    "start": "1422520",
    "end": "1428679"
  },
  {
    "text": "you you're actually getting a future back and then you have to set an exception Handler on the future and then",
    "start": "1428679",
    "end": "1434919"
  },
  {
    "text": "you have to wait on the future with a call back and when that call back resolves you have to to see if the other future arrived and future libraries can",
    "start": "1434919",
    "end": "1441159"
  },
  {
    "text": "make this easier right you can you can have abstractions that manage both of these at once but even here right the",
    "start": "1441159",
    "end": "1447679"
  },
  {
    "text": "nesting it just syntactically doesn't look good because these closures inside parameter lists Etc the parentheses kind",
    "start": "1447679",
    "end": "1454799"
  },
  {
    "text": "of multiply it gets tedious and and in real code it can get a lot worse so is there anything we can do",
    "start": "1454799",
    "end": "1461720"
  },
  {
    "start": "1456000",
    "end": "1479000"
  },
  {
    "text": "about that well we think we can we're still thinking about this this again is this is even less this is more",
    "start": "1461720",
    "end": "1467200"
  },
  {
    "text": "speculative than than the um mixing stuff I talked about because we still haven't decided on a plan on what",
    "start": "1467200",
    "end": "1474039"
  },
  {
    "text": "constructs we want to introduce uh but we we're looking at this because we really feel that it's important to to",
    "start": "1474039",
    "end": "1480480"
  },
  {
    "start": "1479000",
    "end": "1531000"
  },
  {
    "text": "address this issue and raise the level of abstraction there so possibilities C",
    "start": "1480480",
    "end": "1485919"
  },
  {
    "text": "has this thing called a weight that involves that that's that's popular that's kind of nice in a lot of ways",
    "start": "1485919",
    "end": "1491799"
  },
  {
    "text": "because it lets you pretend that you're writing sequential code uh that's also bad because it lets you pretend that",
    "start": "1491799",
    "end": "1497320"
  },
  {
    "text": "you're writing sequential code and it isn't and you know one the problem with these kind of illusions that they work",
    "start": "1497320",
    "end": "1502760"
  },
  {
    "text": "great until they stop working and and then it it gets nasty it's also a very complicated",
    "start": "1502760",
    "end": "1508399"
  },
  {
    "text": "transformation so we we don't know if we we really want to go in that direction",
    "start": "1508399",
    "end": "1514039"
  },
  {
    "text": "uh compromise is a thing we're looking at called async blocks which is a more restricted form of this uh if if you if",
    "start": "1514039",
    "end": "1521080"
  },
  {
    "text": "you know functional programming you could think of them as future comprehensions if you don't just ignore",
    "start": "1521080",
    "end": "1526240"
  },
  {
    "text": "that uh the advantage of that is is the transformation it's very local and you you have a much better handle on what",
    "start": "1526240",
    "end": "1532159"
  },
  {
    "start": "1531000",
    "end": "1563000"
  },
  {
    "text": "you're you're getting promise pipelining is a mechanism where the Futures still accept the method calls so you get a",
    "start": "1532159",
    "end": "1538679"
  },
  {
    "text": "future and you keep acting on it uh they just keep piling up futures for their results until something is actually",
    "start": "1538679",
    "end": "1546279"
  },
  {
    "text": "ready uh this works nicely until you actually have control flow or iio or something where you actually really",
    "start": "1546279",
    "end": "1551919"
  },
  {
    "text": "really need the result um and so it's not clear how well this is going to work",
    "start": "1551919",
    "end": "1557720"
  },
  {
    "text": "for us in language like Dart which doesn't have first class control constructs uh so these are kind of",
    "start": "1557720",
    "end": "1563880"
  },
  {
    "text": "things we're looking at uh here's a again this example is too",
    "start": "1563880",
    "end": "1569240"
  },
  {
    "text": "simple to really show off the advantage but this is uh one of the ideas of the async block that we're talking about",
    "start": "1569240",
    "end": "1576159"
  },
  {
    "text": "where you send off these two tasks in parallel and then inside the async block it'll serialize them it'll wait for the",
    "start": "1576159",
    "end": "1582080"
  },
  {
    "text": "results essentially and do its thing and you can set an exception Handler very easily on the whole thing right and in",
    "start": "1582080",
    "end": "1589360"
  },
  {
    "text": "larger examples this this uh tends to pay off more we've looked at for example how the dart tojs compiler which is tens",
    "start": "1589360",
    "end": "1595840"
  },
  {
    "text": "of thousands of lines of Dart code which is you know opening multiple files and",
    "start": "1595840",
    "end": "1600960"
  },
  {
    "text": "and compiling them and sending off asynchronous jobs to do that and it looks like this might help uh on the",
    "start": "1600960",
    "end": "1606960"
  },
  {
    "text": "other hand maybe better future libraries will help enough we're you know this is",
    "start": "1606960",
    "end": "1612720"
  },
  {
    "text": "just to give you an idea of of the the sort of things we're looking at and the fact that we're we're attuned to do this",
    "start": "1612720",
    "end": "1618520"
  },
  {
    "text": "and we're worrying about it uh the other thing is that this thing works through ports right so you send",
    "start": "1618520",
    "end": "1624520"
  },
  {
    "text": "essentially serialized data on ports you send these messages and that uh again it's like",
    "start": "1624520",
    "end": "1630320"
  },
  {
    "text": "Json or things like that lists of lists of primitive values and things like that",
    "start": "1630320",
    "end": "1635480"
  },
  {
    "text": "uh it's not necessarily uh the most attractive way to do things and it would be much better",
    "start": "1635480",
    "end": "1642919"
  },
  {
    "text": "to view these actors these isets as objects that you basically send asynchronous method calls on",
    "start": "1642919",
    "end": "1649360"
  },
  {
    "text": "and you can do that fairly easily uh this is again an outline of how how you can do it we have we have someone who's",
    "start": "1649360",
    "end": "1655640"
  },
  {
    "text": "actually working on a more realistic version of this but basically here we have a isolate wrapper class the idea is",
    "start": "1655640",
    "end": "1662120"
  },
  {
    "text": "you send it a port to some isolate you want to communicate with when you create it that's what the Constructor is doing",
    "start": "1662120",
    "end": "1668519"
  },
  {
    "text": "all right where you see isolate wrapper it take this. send Port so it's basically getting a port and sending and",
    "start": "1668519",
    "end": "1673840"
  },
  {
    "text": "setting it its uh send Port uh field the underbar indicates that it's private a",
    "start": "1673840",
    "end": "1679159"
  },
  {
    "text": "convention we got somewhere from python but uh that we actually enforce uh in",
    "start": "1679159",
    "end": "1684720"
  },
  {
    "text": "our libraries and what it does is it gives you the object has a no such method",
    "start": "1684720",
    "end": "1690360"
  },
  {
    "text": "method so no such method is there are similar constructs in small talk and Ruby uh basically it's a Handler for",
    "start": "1690360",
    "end": "1697440"
  },
  {
    "text": "what happens when your object doesn't have the method that was invoked on it right rather than just you know dying as",
    "start": "1697440",
    "end": "1704320"
  },
  {
    "text": "as a Java object does uh you can set a Handler that will try to do something intelligent it basically gets",
    "start": "1704320",
    "end": "1710399"
  },
  {
    "text": "information about the call uh the name and the arguments it's going to be a little more elaborate because we have",
    "start": "1710399",
    "end": "1715440"
  },
  {
    "text": "optional arguments and named arguments and things but basically you get this information and you can decide what to",
    "start": "1715440",
    "end": "1721320"
  },
  {
    "text": "do with it in our case we want simply want to send it over the wire to to to the port right and the port will give us",
    "start": "1721320",
    "end": "1729360"
  },
  {
    "text": "a future back and that's what we want to the call on the port will give us a future and we want to return that so",
    "start": "1729360",
    "end": "1736760"
  },
  {
    "text": "with this we now have an object that essentially responds you know to any message any you know you send it",
    "start": "1736760",
    "end": "1743960"
  },
  {
    "text": "something with a message and it will encode it pass it to an isolate presumably the other side of this",
    "start": "1743960",
    "end": "1749120"
  },
  {
    "text": "equation is something that picks up that message translate it and uses reflection to invoke the appropriate method on on",
    "start": "1749120",
    "end": "1755760"
  },
  {
    "text": "the icelet give you a result back eventually and uh so so you so you work",
    "start": "1755760",
    "end": "1761600"
  },
  {
    "text": "with object rather than worrying about you know lists of of of stuff and so forth so it's relatively easy to do that",
    "start": "1761600",
    "end": "1768200"
  },
  {
    "text": "that uh no such method is a really handy thing that's you know missing in things like Java missing in JavaScript though",
    "start": "1768200",
    "end": "1774960"
  },
  {
    "text": "though you can with with some pains emulated that's what our Dart tojs compiler does for example uh but um you know it's nice to",
    "start": "1774960",
    "end": "1783480"
  },
  {
    "start": "1783000",
    "end": "1889000"
  },
  {
    "text": "not have to to worry about this and have a standard way of doing this thing so that is uh you know concludes",
    "start": "1783480",
    "end": "1791720"
  },
  {
    "text": "our worldwind uh you know show of isets and the rest of the talk I really wanted",
    "start": "1791720",
    "end": "1797679"
  },
  {
    "text": "to talk about about mirrors cuz that's one of the things I really care about so mirror-based reflection again has a",
    "start": "1797679",
    "end": "1803600"
  },
  {
    "text": "significant history uh originated in a language called self where a lot of other things",
    "start": "1803600",
    "end": "1809279"
  },
  {
    "text": "originated including the kind of um you know modern jits that that we see uh in",
    "start": "1809279",
    "end": "1815760"
  },
  {
    "text": "things like hotspot the basically the technology that makes all these languages fast right uh comes from there",
    "start": "1815760",
    "end": "1822960"
  },
  {
    "text": "uh used it the first class-based language to use it was again the strong talk which is small talk dialect we",
    "start": "1822960",
    "end": "1828480"
  },
  {
    "text": "worked on eventually in Java Java core reflection does not use mirrors Java core reflection uses you know the the",
    "start": "1828480",
    "end": "1835399"
  },
  {
    "text": "more classic approach which I'll talk about in a moment but the Java debugging interface jdi does use a mirror-based",
    "start": "1835399",
    "end": "1842720"
  },
  {
    "text": "approach as does The annotation processing uh tool kit right and they do that because the classic approach just",
    "start": "1842720",
    "end": "1848919"
  },
  {
    "text": "breaks down uh so and of course you see it now Scala now has a has a mirror",
    "start": "1848919",
    "end": "1854480"
  },
  {
    "text": "framework just came out uh some probably six months ago or so uh other languages",
    "start": "1854480",
    "end": "1861919"
  },
  {
    "text": "and we're doing the same in Dart now again caveats this is work in progress",
    "start": "1861919",
    "end": "1867240"
  },
  {
    "text": "we don't have all of this stuff yet and dart 2js doesn't do this yet the VM does but uh you know you can't really Bank on",
    "start": "1867240",
    "end": "1873720"
  },
  {
    "text": "that in the sense that if you wrote an application using it in the VM you won't be able to deploy it to JavaScript",
    "start": "1873720",
    "end": "1879360"
  },
  {
    "text": "because that's still not there but it should be over time and again the apis the details may change so this is more",
    "start": "1879360",
    "end": "1886200"
  },
  {
    "text": "of a preview but it does actually un like the other things I've talked about as as future plans this is already in",
    "start": "1886200",
    "end": "1891240"
  },
  {
    "start": "1889000",
    "end": "1965000"
  },
  {
    "text": "progress and I'll be able to demo some of this for you in a moment so uh just to make clear what the",
    "start": "1891240",
    "end": "1897639"
  },
  {
    "text": "difference is so classic object-oriented reflection as say in Java and of course it doesn't originate in Java almost",
    "start": "1897639",
    "end": "1904120"
  },
  {
    "text": "nothing does um it originates in small talk and was then picked up by the list",
    "start": "1904120",
    "end": "1911279"
  },
  {
    "text": "people and sew and so forth but all these languages have a very very plausible approach to this which is to",
    "start": "1911279",
    "end": "1917039"
  },
  {
    "text": "say you know got an object if I allow you to get at its class the class is a natural Clearing House for all these",
    "start": "1917039",
    "end": "1923120"
  },
  {
    "text": "reflective queries because really this is where the data about you know all this stuff is that it keeps the",
    "start": "1923120",
    "end": "1929080"
  },
  {
    "text": "representation it knows about what Fields I have what classes I have Etc it's a natural place and this is this is",
    "start": "1929080",
    "end": "1935399"
  },
  {
    "text": "an approach that people have taken uh throughout uh you know the history of dynamic languages because the easiest",
    "start": "1935399",
    "end": "1941600"
  },
  {
    "text": "thing to do and in in some ways the the simplest and most elegant is simply to expose your data structures to the",
    "start": "1941600",
    "end": "1947200"
  },
  {
    "text": "programmer that's what happens your interpreter or uh or whatever structure you have in a",
    "start": "1947200",
    "end": "1952720"
  },
  {
    "text": "no language you have a class you simply throw that out to the programmer and say here mess with it you'll be able to do",
    "start": "1952720",
    "end": "1958720"
  },
  {
    "text": "wondrous things uh there's only a slight downside to this which is that they'll",
    "start": "1958720",
    "end": "1964360"
  },
  {
    "text": "also be able to do horrible things and the question is you know how do you balance this so mirrors are a way of",
    "start": "1964360",
    "end": "1971480"
  },
  {
    "start": "1965000",
    "end": "1999000"
  },
  {
    "text": "balancing it uh mirrors as uh you can imagine are objects that reflect other",
    "start": "1971480",
    "end": "1977080"
  },
  {
    "text": "objects if you don't believe me check out your bathroom and uh the beauty of that is",
    "start": "1977080",
    "end": "1984399"
  },
  {
    "text": "like every problem can be solved with a level of indirection and mirrors give you a level of indirection because now I can control",
    "start": "1984399",
    "end": "1992120"
  },
  {
    "text": "who gets what mirror right it's a separate object before I had an object obviously I could call get class on it",
    "start": "1992120",
    "end": "1997919"
  },
  {
    "text": "the whole reflective thing was there and and there was no good way to to control access to it whereas here I actually can",
    "start": "1997919",
    "end": "2005679"
  },
  {
    "start": "1999000",
    "end": "2044000"
  },
  {
    "text": "tell you know are you going to get a mirror if you don't get a mirror I can make your program about As Dead As a",
    "start": "2005679",
    "end": "2010799"
  },
  {
    "text": "Fortran program right as completely non-reflective I can I can and that",
    "start": "2010799",
    "end": "2016440"
  },
  {
    "text": "means I can deploy stuff without reflection if I want to because I have I'm short of space or I'm short of",
    "start": "2016440",
    "end": "2022399"
  },
  {
    "text": "bandwidth which is what happens on the web right in embedded situations is more about the size of the thing you're doing",
    "start": "2022399",
    "end": "2028000"
  },
  {
    "text": "in in the web scenario it's about the size of the thing you're downloading initially and things like that so that",
    "start": "2028000",
    "end": "2033240"
  },
  {
    "text": "helps deployment also helps security because obviously I can give you mirrors that won't that won't do bad stuff I can",
    "start": "2033240",
    "end": "2039720"
  },
  {
    "text": "give you mirrors that only let you reflect on yourself uh and I can give you mirrors that will not let you",
    "start": "2039720",
    "end": "2045240"
  },
  {
    "text": "reflect on something else there's all kinds of of potential mechanisms to solve this works well with distribution",
    "start": "2045240",
    "end": "2051200"
  },
  {
    "text": "as well that was really the problem for example with Java Reflection right because uh they found while they were",
    "start": "2051200",
    "end": "2056878"
  },
  {
    "text": "multi-threaded and they found that you know writing a debugger using reflection which was one of the initial use cases",
    "start": "2056879",
    "end": "2063480"
  },
  {
    "text": "fell flat on its face because everything started to deadlock because they were all in the same in the the same uh",
    "start": "2063480",
    "end": "2068599"
  },
  {
    "text": "process and so when they wanted to decided to do outof process debugging there was this problem that the core",
    "start": "2068599",
    "end": "2074720"
  },
  {
    "text": "reflection framework in Java just couldn't do that because you needed these magical class objects that were only in that VM so you eventually go to",
    "start": "2074720",
    "end": "2082118"
  },
  {
    "text": "mirrors are separate objects and you can give different mirror implementations like proxies and stuff like that so it",
    "start": "2082119",
    "end": "2087320"
  },
  {
    "text": "solves a whole slew of of of issues and that's why more and more languages are",
    "start": "2087320",
    "end": "2092358"
  },
  {
    "start": "2090000",
    "end": "2133000"
  },
  {
    "text": "are going are using that framework and in Dart in particular we",
    "start": "2092359",
    "end": "2097440"
  },
  {
    "text": "want want the mirrors to allow you to reflect between isolates right so you would be able to actually uh pose",
    "start": "2097440",
    "end": "2104599"
  },
  {
    "text": "reflective queries to another isolet uh which means that the apis is in some",
    "start": "2104599",
    "end": "2109839"
  },
  {
    "text": "places asynchronous which means that it in some places is a bit harder to use than it might otherwise be uh we're trying to",
    "start": "2109839",
    "end": "2117160"
  },
  {
    "text": "preserve that property because it does have the nice thing that anything reflective you write would would actually work in in the distributed",
    "start": "2117160",
    "end": "2124960"
  },
  {
    "text": "scenario uh on the other hand we are trying to structure it so that we minimize asynchron so we don't you know",
    "start": "2124960",
    "end": "2130440"
  },
  {
    "text": "asynchron so we we don't burden you with this stuff all the time so we're going",
    "start": "2130440",
    "end": "2135480"
  },
  {
    "start": "2133000",
    "end": "2602000"
  },
  {
    "text": "to look at this uh briefly uh because we",
    "start": "2135480",
    "end": "2141079"
  },
  {
    "text": "um should actually show you some real live code so this is the dart editor can",
    "start": "2141079",
    "end": "2147200"
  },
  {
    "text": "people in the back see this or we can still kind of",
    "start": "2147200",
    "end": "2152520"
  },
  {
    "text": "uh Zoom a little bit in right and we have this little program",
    "start": "2152520",
    "end": "2158240"
  },
  {
    "text": "D programs uh can be structured uh into libraries you don't necessarily need to declare a library essentially you can",
    "start": "2158240",
    "end": "2164800"
  },
  {
    "text": "write a script without a library declaration uh Dart is designed so that you can get into it gradually and you",
    "start": "2164800",
    "end": "2170240"
  },
  {
    "text": "don't have to to put up a lot of boilerplate you know to get started but on the other hand when you're writing",
    "start": "2170240",
    "end": "2176720"
  },
  {
    "text": "you know substantial code uh software engineering becomes important so we do have have support for that so here we",
    "start": "2176720",
    "end": "2183280"
  },
  {
    "text": "have this little library that just I I set up for a demo and the important part is that we're",
    "start": "2183280",
    "end": "2188720"
  },
  {
    "text": "importing uh the mirrors library from uh you know the dart core Library if we",
    "start": "2188720",
    "end": "2195040"
  },
  {
    "text": "actually zoom out we can see over here this is Dart mirrors right",
    "start": "2195040",
    "end": "2200280"
  },
  {
    "text": "here this is the the core library with all kinds of stuff in it HTML for the web IO isets Json support math etc etc",
    "start": "2200280",
    "end": "2209359"
  },
  {
    "text": "we also have mirrors which is which is still a work in progress so we're importing this thing and that'll let us",
    "start": "2209359",
    "end": "2215319"
  },
  {
    "text": "use the the the functionality mirrors obviously in the scope of this little application and we have again a class",
    "start": "2215319",
    "end": "2222560"
  },
  {
    "text": "Point slightly different a very very basic class point with two fields that are just set to",
    "start": "2222560",
    "end": "2228480"
  },
  {
    "text": "zero now we have this method print fields of object and what this method does is you give it an object and it's",
    "start": "2228480",
    "end": "2235160"
  },
  {
    "text": "going to print out the values of the fields basic introspection this is this is next to nothing you can even do this",
    "start": "2235160",
    "end": "2240599"
  },
  {
    "text": "in Java so so we're not using anything heavy duty yet uh the way you do it",
    "start": "2240599",
    "end": "2246160"
  },
  {
    "text": "however with mirrors is a bit different so reflec ism is a high a top level function that comes from the mirror",
    "start": "2246160",
    "end": "2252359"
  },
  {
    "text": "library right and you give it an object and it gives you a mirror on that object an instance mirror an instance mirror is",
    "start": "2252359",
    "end": "2258400"
  },
  {
    "text": "a mirror on a particular object we have all kinds of mirrors we have class mirrors for looking at classes we have",
    "start": "2258400",
    "end": "2264720"
  },
  {
    "text": "Library mirrors for looking at libraries method mirrors etc for for various purposes we get an instance mirror on",
    "start": "2264720",
    "end": "2271160"
  },
  {
    "text": "this object now we can get the class mirror out of that right by doing essentially",
    "start": "2271160",
    "end": "2277119"
  },
  {
    "text": "om . type so type is a is an accessor on uh instance",
    "start": "2277119",
    "end": "2282960"
  },
  {
    "text": "mirrors and that'll give us a class mirror now that we have a class mirror we can go over this",
    "start": "2282960",
    "end": "2288760"
  },
  {
    "text": "information and you know Loop over in a for Loop and extract the variables right the class Mirror Has a method variables",
    "start": "2288760",
    "end": "2295640"
  },
  {
    "text": "that'll give us a map of names to variables so it'll basically be something we can look up the name of any",
    "start": "2295640",
    "end": "2301520"
  },
  {
    "text": "any field in this class and get a variable mirror on it uh calling get values we get a list of those variable",
    "start": "2301520",
    "end": "2307839"
  },
  {
    "text": "mirrors back and that's what we're iterating over in this for Loop and with every one of these we're",
    "start": "2307839",
    "end": "2314760"
  },
  {
    "text": "going to extract its name we're going to use that name to uh get the value of the",
    "start": "2314760",
    "end": "2321400"
  },
  {
    "text": "field out of the original object so we got the names out of the class mirror",
    "start": "2321400",
    "end": "2326720"
  },
  {
    "text": "and now we go back to the object mirror that we start with call get field with a",
    "start": "2326720",
    "end": "2331760"
  },
  {
    "text": "field name and that's going to give us the value back actually because it's a synchronous it's going to give us a f",
    "start": "2331760",
    "end": "2337440"
  },
  {
    "text": "future for that value and that's important because we might be looking at a different isolate in which case you",
    "start": "2337440",
    "end": "2343520"
  },
  {
    "text": "know there's no no reason to believe that it's going to stop everything it's doing and and pay attention to us it is",
    "start": "2343520",
    "end": "2349000"
  },
  {
    "text": "is it's not supposed to do that it just got a message requesting this which is somewhere in the message CU so obviously",
    "start": "2349000",
    "end": "2354319"
  },
  {
    "text": "we're not going to get the result right away we're going to get a future uh we then set a call back on",
    "start": "2354319",
    "end": "2359440"
  },
  {
    "text": "that that says well when that future is ready then we're going to get V the actual value and we're going to print",
    "start": "2359440",
    "end": "2365240"
  },
  {
    "text": "that with a field name and the value V right and notice we didn't have to do",
    "start": "2365240",
    "end": "2371280"
  },
  {
    "text": "this asynchronous stuff on on the other things because basically the thing is designed to pull up all this reflective",
    "start": "2371280",
    "end": "2378079"
  },
  {
    "text": "information uh on a class once you ask for a mirror on an object it'll get you the reflective information for for its",
    "start": "2378079",
    "end": "2384359"
  },
  {
    "text": "source base so that you don't have to go every step of the way and keep asking for for futures and and and things like",
    "start": "2384359",
    "end": "2390880"
  },
  {
    "text": "that so once you've done that uh we should be able to actually run this",
    "start": "2390880",
    "end": "2396040"
  },
  {
    "text": "thing so so we have a main function every Every dart application basically starts at it at its main method uh main",
    "start": "2396040",
    "end": "2403240"
  },
  {
    "text": "top level function and if we run",
    "start": "2403240",
    "end": "2408839"
  },
  {
    "text": "it we find that yes it prints this string and then it called print fields",
    "start": "2408839",
    "end": "2413960"
  },
  {
    "text": "of object with a new point and what we found is that point had two Fields X and",
    "start": "2413960",
    "end": "2419800"
  },
  {
    "text": "Y and uh each one of those in fact uh gave us an instance mirror on the value",
    "start": "2419800",
    "end": "2427920"
  },
  {
    "text": "right the value zero that's in there we're actually getting a mirror on that because the whole mirror system traffics in mirrors right it's very important",
    "start": "2427920",
    "end": "2434720"
  },
  {
    "text": "that we do that to preserve those properties this will work in distributed settings and we will never be reflecting",
    "start": "2434720",
    "end": "2441280"
  },
  {
    "text": "on something that uh that we don't have an indirection to so that's kind of very",
    "start": "2441280",
    "end": "2446760"
  },
  {
    "text": "very basic use of mirrors you can as I said do this in Java let's try and do something a little bit more",
    "start": "2446760",
    "end": "2454079"
  },
  {
    "text": "elaborate uh if we have time yeah we we have a few minutes uh we're going to construct",
    "start": "2454079",
    "end": "2461400"
  },
  {
    "text": "these Library wrappers which are objects that are going to reflect on a library",
    "start": "2461400",
    "end": "2467640"
  },
  {
    "text": "they're going to have a library mirror in them LM uh you're going to give them a name",
    "start": "2467640",
    "end": "2473079"
  },
  {
    "text": "of a library they're going to ask the current mirror system which is again something you get from the mirror",
    "start": "2473079",
    "end": "2479040"
  },
  {
    "text": "Library they're going to ask it for its libraries which again is a map and and they're going to look up this Library",
    "start": "2479040",
    "end": "2484920"
  },
  {
    "text": "name in it and we'll get a mirror for that Library back so that's how how this",
    "start": "2484920",
    "end": "2490040"
  },
  {
    "text": "Library rapper is set up and then what it does is when anyone calls it you know invokes a method on this object it since",
    "start": "2490040",
    "end": "2497720"
  },
  {
    "text": "it doesn't have any interesting methods it's going to go to No Such method and I've got set it up to print out the name",
    "start": "2497720",
    "end": "2503839"
  },
  {
    "text": "and arguments but really its real functionality is that it uh is going to",
    "start": "2503839",
    "end": "2509920"
  },
  {
    "text": "U call depending on whether this is a method a Class A a variable Etc it's",
    "start": "2509920",
    "end": "2516560"
  },
  {
    "text": "going to use the mirror system to actually extract the value and and give us a Mir a result back so we can",
    "start": "2516560",
    "end": "2523839"
  },
  {
    "text": "actually do this here if we uncomment this code comment this out so that it's happy",
    "start": "2523839",
    "end": "2532520"
  },
  {
    "text": "as you can see the editor is doing its job complaining about stuff but once we actually save this it should be happy",
    "start": "2532520",
    "end": "2538800"
  },
  {
    "text": "again all right and now we should be able to run this and see what it does so it's done a",
    "start": "2538800",
    "end": "2546400"
  },
  {
    "text": "whole bunch of things things and we basically gave it a new uh we uh asked",
    "start": "2546400",
    "end": "2551680"
  },
  {
    "text": "this library to U we called point on it and point is a class so what we've done",
    "start": "2551680",
    "end": "2557920"
  },
  {
    "text": "is we've actually returned a class wrapper on that class over here the arguments were point and an empty list",
    "start": "2557920",
    "end": "2564760"
  },
  {
    "text": "of of arguments printed that out got an instance of class wrapper class rapper is a is a similar class that we got up",
    "start": "2564760",
    "end": "2571599"
  },
  {
    "text": "here that does the same thing for classes basically again obtains a mirror",
    "start": "2571599",
    "end": "2577480"
  },
  {
    "text": "and does a No Such method so that you can actually treat the class as an object and invoke it static methods as if they were instance methods so you can",
    "start": "2577480",
    "end": "2584160"
  },
  {
    "text": "abstract over the class pass it around and U and treat it as a as a real object",
    "start": "2584160",
    "end": "2589960"
  },
  {
    "text": "and so when you ask the library for point it gives you that wrapper then you can call static methods of the class or",
    "start": "2589960",
    "end": "2595160"
  },
  {
    "text": "or what have you uh doing that",
    "start": "2595160",
    "end": "2600400"
  },
  {
    "text": "and few comments on what we're going to do later uh this was basically introspection introspection plus no such",
    "start": "2600400",
    "end": "2607119"
  },
  {
    "text": "such method which is one thing you can't do in Java lets you already do some interesting things but obviously you",
    "start": "2607119",
    "end": "2612559"
  },
  {
    "text": "want to be able to do things like mutate code on the Fly uh and uh and do you know fix and",
    "start": "2612559",
    "end": "2620599"
  },
  {
    "text": "continue debugging and all of that uh the mirror system should should make that relatively easy to do in time uh",
    "start": "2620599",
    "end": "2627920"
  },
  {
    "text": "now the problem is with this stuff is beyond the fact that we haven't done it yet is that the web is is again such a",
    "start": "2627920",
    "end": "2634319"
  },
  {
    "text": "challenging environment right what happens when you ify code right what are you going to do when you have a string",
    "start": "2634319",
    "end": "2639880"
  },
  {
    "text": "and you look up a method by string but that method isn't actually there under that name or maybe the the tree shaking",
    "start": "2639880",
    "end": "2645760"
  },
  {
    "text": "has actually eliminated it because your basic code never called it it was only going to be a reflective call based on say user input right so it's not",
    "start": "2645760",
    "end": "2652800"
  },
  {
    "text": "actually there now you could just say okay we use mirrors and all bits are off",
    "start": "2652800",
    "end": "2659000"
  },
  {
    "text": "we just send you a big download and and we don't worry about this but that's not likely to be what you want what you",
    "start": "2659000",
    "end": "2664599"
  },
  {
    "text": "actually want is some fine grain control over this stuff right and we have a metadata mechanism",
    "start": "2664599",
    "end": "2669880"
  },
  {
    "text": "that we plan to use for this so you'll be able to annotate your code essentially and say you know what this method even though it's not being called",
    "start": "2669880",
    "end": "2676000"
  },
  {
    "text": "anywhere please preserve it so that I can use reflective uh functionality on it and that will you know the the",
    "start": "2676000",
    "end": "2682359"
  },
  {
    "text": "deployment tool whatever is Dart tojs or other tools uh will look at that annotation information and that'll",
    "start": "2682359",
    "end": "2688440"
  },
  {
    "text": "influence how it packages the code for you so it'll preserve that stuff so your reflective calls will work uh all this",
    "start": "2688440",
    "end": "2694400"
  },
  {
    "text": "has you know is is stuff we're planning to do uh to let you do the kind of dynamic",
    "start": "2694400",
    "end": "2699520"
  },
  {
    "text": "stuff you want to do but do it while preserving performance security",
    "start": "2699520",
    "end": "2705040"
  },
  {
    "start": "2702000",
    "end": "2733000"
  },
  {
    "text": "Etc if you want to know more about this stuff obviously there's you know you can go to the academic literature and see uh",
    "start": "2705040",
    "end": "2712319"
  },
  {
    "text": "this paper on mirrors that uh I wrote with Dave anger who did self a few years",
    "start": "2712319",
    "end": "2717720"
  },
  {
    "text": "ago uh you can read a a very short blog post that kind of gives you the essence of this as well you can also watch a",
    "start": "2717720",
    "end": "2724480"
  },
  {
    "text": "detailed video that lecture I gave some couple years back that kind of walks you through all this in great detail and",
    "start": "2724480",
    "end": "2730319"
  },
  {
    "text": "illustrates the real advantages of mirrors in in you know in less of a whirlwind",
    "start": "2730319",
    "end": "2736359"
  },
  {
    "start": "2733000",
    "end": "2824000"
  },
  {
    "text": "fashion finally uh again the point of all this is to create a civilized",
    "start": "2736520",
    "end": "2741839"
  },
  {
    "text": "environment something where you can do real software engineering build build really large apps without uh you know",
    "start": "2741839",
    "end": "2749040"
  },
  {
    "text": "jumping through through incredible hoops and and dealing with with the very bizarre set of circumstances that the",
    "start": "2749040",
    "end": "2754839"
  },
  {
    "text": "random evolution of the web has presented us with with and the language is a key part of that because it",
    "start": "2754839",
    "end": "2760599"
  },
  {
    "text": "supports tability it supports software engineering and uh with a DVM you're",
    "start": "2760599",
    "end": "2766079"
  },
  {
    "text": "actually going to get better performance and the advantage of a language that that that works this way",
    "start": "2766079",
    "end": "2771559"
  },
  {
    "text": "is eventually we will have a much cleaner model for everything uh through through good libraries uh we should be",
    "start": "2771559",
    "end": "2777680"
  },
  {
    "text": "able to write you know stuff that works on the server and communicates via message passing to the client and vice",
    "start": "2777680",
    "end": "2783559"
  },
  {
    "text": "versa through the isolate mechanism and not care where that server actually is right whether it's a local process or",
    "start": "2783559",
    "end": "2789880"
  },
  {
    "text": "something not not to have to dance through all these orifices essentially that the browser provides uh so",
    "start": "2789880",
    "end": "2797119"
  },
  {
    "text": "basically it's all about raising the level of abstraction back to to something that's analogous to what uh",
    "start": "2797119",
    "end": "2803640"
  },
  {
    "text": "you know native code can do as far as status we had our M1 released today uh",
    "start": "2803640",
    "end": "2810640"
  },
  {
    "text": "it's all open source we've been doing open development on this thing for about a year now uh every you know bug reports",
    "start": "2810640",
    "end": "2818000"
  },
  {
    "text": "uh every patch everything is out there in in in an open repository and and with a mailing list in forms and is being",
    "start": "2818000",
    "end": "2823960"
  },
  {
    "text": "followed by by uh core community and if you want to find out",
    "start": "2823960",
    "end": "2830520"
  },
  {
    "start": "2824000",
    "end": "3079000"
  },
  {
    "text": "really all the the nitty-gritty details please go to dartlang.org uh there",
    "start": "2830520",
    "end": "2836520"
  },
  {
    "text": "you'll find lots of lots of material uh some of it more much more detailed and",
    "start": "2836520",
    "end": "2841599"
  },
  {
    "text": "and much more focused on on your typical web programming tasks",
    "start": "2841599",
    "end": "2847760"
  },
  {
    "text": "and if you have any questions I'll take them and if you could go to the microphone because they want to record",
    "start": "2847760",
    "end": "2853280"
  },
  {
    "text": "all this stuff so I have a few questions uh one",
    "start": "2853280",
    "end": "2859599"
  },
  {
    "text": "regarding the GWT status versus the doart in Google and the second question",
    "start": "2859599",
    "end": "2865160"
  },
  {
    "text": "where do you use it internal and the last question are you going to do any rampup regarding the the",
    "start": "2865160",
    "end": "2873040"
  },
  {
    "text": "library like something that you get from J query or other Library out there uh regarding UI functionality and stuff",
    "start": "2873040",
    "end": "2880559"
  },
  {
    "text": "okay so that's a lot of questions so GWT so GWT is as far as I know alive and",
    "start": "2880559",
    "end": "2885640"
  },
  {
    "text": "well uh you know there's tons of stuff at Google that uses it so it's still you know U hasn't been thrown under a bus or",
    "start": "2885640",
    "end": "2892680"
  },
  {
    "text": "anything on the other hand we're focused on Dart and and doing something that's in our mind better I mean one of the",
    "start": "2892680",
    "end": "2899160"
  },
  {
    "text": "advantages is that you know because we have a VM we have a great Advantage we don't have to wait for long compiles",
    "start": "2899160",
    "end": "2904240"
  },
  {
    "text": "Dart tojs is a lot faster anyway but uh it's really part of that experience with GWT that is feeding into to to Dart as",
    "start": "2904240",
    "end": "2912920"
  },
  {
    "text": "far as uh libraries you know there's a bunch of libraries already all kinds of",
    "start": "2912920",
    "end": "2918040"
  },
  {
    "text": "people are doing open source stuff we're focused mainly on core libraries on on basic platform functionality and you had",
    "start": "2918040",
    "end": "2924880"
  },
  {
    "text": "a question in the middle but I lost track of it uh yeah so we we do have internal",
    "start": "2924880",
    "end": "2931799"
  },
  {
    "text": "customers uh eventually I hope you'll see some of those results externally",
    "start": "2931799",
    "end": "2937599"
  },
  {
    "text": "right but in general in Google at Google we don't comment on on that sort of thing but yeah we do have we do have",
    "start": "2937599",
    "end": "2944040"
  },
  {
    "text": "people using it internally hi um I know there is a way to call JavaScript from Dart but I was",
    "start": "2944040",
    "end": "2950720"
  },
  {
    "text": "wondering if there was possible to do the opposite uh called Dart from JavaScript the idea is to be able to",
    "start": "2950720",
    "end": "2956119"
  },
  {
    "text": "implement something in Dart but still provide an API in JavaScript so that right so so what you want to take take a",
    "start": "2956119",
    "end": "2962760"
  },
  {
    "text": "look is the the the new uh mechanism for for talking to to uh between them uh",
    "start": "2962760",
    "end": "2970240"
  },
  {
    "text": "that um VJ has just uh released it's part of the M1 release there is uh I",
    "start": "2970240",
    "end": "2976400"
  },
  {
    "text": "think there's an article on the site that that describes this basically it's it's a mechanism for uh for making it",
    "start": "2976400",
    "end": "2982240"
  },
  {
    "text": "easier for the two to talk to right there's some overhead in talking to them because again potentially these could be on different VMS and uh and we want to",
    "start": "2982240",
    "end": "2989520"
  },
  {
    "text": "make sure that that that works but it's not nearly as painful as it was say a few months ago and would that be",
    "start": "2989520",
    "end": "2995960"
  },
  {
    "text": "supported by dart2js absolutely perfect that's very much the point",
    "start": "2995960",
    "end": "3002079"
  },
  {
    "text": "yeah um I just had a question about the dart VM that you know obviously doesn't",
    "start": "3002079",
    "end": "3007160"
  },
  {
    "text": "exist in browsers uh just yet but I was wondering does it has have an intermediate form um you know obviously",
    "start": "3007160",
    "end": "3014000"
  },
  {
    "text": "you take Dart and you transpile it to JavaScript is it something that in the future possibly that VM would be a",
    "start": "3014000",
    "end": "3020520"
  },
  {
    "text": "common substrate that people could you know compile to or is it just D it",
    "start": "3020520",
    "end": "3025839"
  },
  {
    "text": "doesn't really have an intermediate form it works very much like uh say V8 does it takes source code and does its thing",
    "start": "3025839",
    "end": "3032559"
  },
  {
    "text": "with it uh there is this notion of snapshots which are a way of of allowing quick startup that works on the VM and",
    "start": "3032559",
    "end": "3039640"
  },
  {
    "text": "that relies essentially on on leveraging some of its internal representation essentially it saves you the parsing",
    "start": "3039640",
    "end": "3045200"
  },
  {
    "text": "time it it has a tokenized stream and stuff like that but nothing that you know is is yet a public standard",
    "start": "3045200",
    "end": "3051920"
  },
  {
    "text": "intermediate representation it's it's way too early to speculate on that if if the snapshot that's really caught on",
    "start": "3051920",
    "end": "3057680"
  },
  {
    "text": "it's you could imagine maybe maybe doing something about that but right now no",
    "start": "3057680",
    "end": "3063799"
  },
  {
    "text": "okay thank you all right uh I guess that's it thank you very much",
    "start": "3063799",
    "end": "3071720"
  }
]