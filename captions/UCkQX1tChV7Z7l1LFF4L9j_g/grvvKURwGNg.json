[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[Music]",
    "start": "90",
    "end": "23560"
  },
  {
    "text": "it's a pleasure to be here to uh speak to you today I'm going to talk about uh Scala uh best time to ask a question or",
    "start": "26279",
    "end": "32320"
  },
  {
    "text": "make a comment is when you have it so please don't wait till the end anytime is a great time and if you do have a",
    "start": "32320",
    "end": "37360"
  },
  {
    "text": "question or comment draw my attention if you're you know raising your hand I may not uh take note of it so do yell out or",
    "start": "37360",
    "end": "44760"
  },
  {
    "text": "you know draw my attention and I'll be more than happy to listen to you so let's get started uh we're going to talk",
    "start": "44760",
    "end": "50719"
  },
  {
    "text": "quite a bit about Scala and what I'm going to do here is to write some code play with some examples and then if you",
    "start": "50719",
    "end": "56960"
  },
  {
    "text": "have any questions we can kind of go in that direction as well so uh the first question of course is uh why why should",
    "start": "56960",
    "end": "63280"
  },
  {
    "start": "60000",
    "end": "180000"
  },
  {
    "text": "we look at something like Scala uh the number one reason is it's fun do you",
    "start": "63280",
    "end": "68600"
  },
  {
    "text": "need any more reason than that that's it right so it's a it's a lot of fun to program in a language like Scala What",
    "start": "68600",
    "end": "74040"
  },
  {
    "text": "drew me into Scala was um I'm I'm pretty much uh uh you know I I really like",
    "start": "74040",
    "end": "80040"
  },
  {
    "text": "languages and I started programming in uh uh you know searp coming from C++",
    "start": "80040",
    "end": "85360"
  },
  {
    "text": "background Java C and traditional languages like that mainstream languages like that uh but then along the way got",
    "start": "85360",
    "end": "91360"
  },
  {
    "text": "excited about other languages like Ruby and then kind of went on to program with erlang and as I was kind of getting",
    "start": "91360",
    "end": "97399"
  },
  {
    "text": "excited about erlang got you know really excited about the acrob Bas concurrency model in llang and then when I turned",
    "start": "97399",
    "end": "103560"
  },
  {
    "text": "around I looked around and said well this is kind of interesting Scala gives you the erlangs uh concurrency model but",
    "start": "103560",
    "end": "110079"
  },
  {
    "text": "on the jvm so quickly I got drawn into it started playing with it and uh of",
    "start": "110079",
    "end": "115280"
  },
  {
    "text": "course Scala gives you some of the really interesting benefits of functional programming and uh so let's",
    "start": "115280",
    "end": "121200"
  },
  {
    "text": "uh talk about you know what are some of the things that Scala can do for us uh Scala is first of all a statically typed",
    "start": "121200",
    "end": "127880"
  },
  {
    "text": "language on the jvm so if you are writing coda in Java you have another",
    "start": "127880",
    "end": "133319"
  },
  {
    "text": "option to look at is to program in Scola it's a language on the jvm it's a statically typed language uh I don't",
    "start": "133319",
    "end": "139640"
  },
  {
    "text": "think it's good to say Scala is statically typed like Java because uh it's more statically typed than Java is",
    "start": "139640",
    "end": "146360"
  },
  {
    "text": "and and as we will see in a few minutes uh it is a language which is high hybrid functional language what that means is",
    "start": "146360",
    "end": "153120"
  },
  {
    "text": "uh that that could be a good news and a bad news depending on how you see it it's a language which gives you the functional style of programming but at",
    "start": "153120",
    "end": "159040"
  },
  {
    "text": "the same time it doesn't force you to do so so it's kind of like a dial that you can you know turn all the way to the",
    "start": "159040",
    "end": "164959"
  },
  {
    "text": "left and you can write imperative code like you are used to in Java or you can turn that dial all the way to the right",
    "start": "164959",
    "end": "171720"
  },
  {
    "text": "and you can write functional style code like in you know functional languages for example in llang and other languages",
    "start": "171720",
    "end": "177959"
  },
  {
    "text": "um so let's talk about some of the things that we can do with Scala itself well first of all Scala is a functional",
    "start": "177959",
    "end": "185120"
  },
  {
    "start": "180000",
    "end": "330000"
  },
  {
    "text": "language you know in that regard and and what does that mean how does it really feel like uh doing it so let's take a",
    "start": "185120",
    "end": "191400"
  },
  {
    "text": "look at an example here let's say for a minute that we have a list of values that's given to us we'll call it numbers",
    "start": "191400",
    "end": "197959"
  },
  {
    "text": "for example and I'm just going to start with a bunch of numbers let's say uh um a handful of numbers now suppose I want",
    "start": "197959",
    "end": "205239"
  },
  {
    "text": "to Total these numbers together or maybe I want to double these numbers to you know in this list and do operations on",
    "start": "205239",
    "end": "211319"
  },
  {
    "text": "it we know how to do this in the imperative style so let's take a look at an example of totaling these values for",
    "start": "211319",
    "end": "217159"
  },
  {
    "text": "example so we could say V total equal to zero and of course when I'm done with it I want to Simply print the value of the",
    "start": "217159",
    "end": "223319"
  },
  {
    "text": "total but how would I start totaling these values we could say for and then I",
    "start": "223319",
    "end": "228560"
  },
  {
    "text": "is going to be values within the numbers so this is like your traditional for Loop in Java uh or the for each Loop in",
    "start": "228560",
    "end": "236319"
  },
  {
    "text": "Java you would probably say for inti colon numbers in the case of java to",
    "start": "236319",
    "end": "241640"
  },
  {
    "text": "write this isn't it and then of course I would you know say here a total plus equals and then I would specify the",
    "start": "241640",
    "end": "248159"
  },
  {
    "text": "value of I or if you want to call it as an element you can call it as an element e as well so you could write something",
    "start": "248159",
    "end": "253840"
  },
  {
    "text": "like this and ask it to Total the values now in this particular example as you can see it did tell us the total is 21",
    "start": "253840",
    "end": "260720"
  },
  {
    "text": "but this is a great example of a very imperative style of coding now what is what is the smell of an imperative code",
    "start": "260720",
    "end": "267280"
  },
  {
    "text": "there are there are two things we can look at in imp imperative code the first thing in an imperative code is you kind",
    "start": "267280",
    "end": "272639"
  },
  {
    "text": "of have to tell the code every step of the way not only what to do but how to do it so in this case of course we told",
    "start": "272639",
    "end": "280000"
  },
  {
    "text": "him to Loop through each of the values and then of course to Total each of the values the second smell of an imperative",
    "start": "280000",
    "end": "286160"
  },
  {
    "text": "code is the mutability of a variable that you see here so if you notice on",
    "start": "286160",
    "end": "291280"
  },
  {
    "text": "line number three we declared the variable as VAR meaning it's a variable",
    "start": "291280",
    "end": "296440"
  },
  {
    "text": "and then of course we are constantly modifying this value in the loop so that",
    "start": "296440",
    "end": "301960"
  },
  {
    "text": "is an imperative style of coding as well in a functional style of coding we lean",
    "start": "301960",
    "end": "307000"
  },
  {
    "text": "more towards a declarative style of coding rather than being imperative in other words rather than telling how to",
    "start": "307000",
    "end": "313400"
  },
  {
    "text": "do certain thing we focus more on what result we want to achieve and then simply let the code take care of how to",
    "start": "313400",
    "end": "319560"
  },
  {
    "text": "implement it so a more declarative style of coding is easier to write much more",
    "start": "319560",
    "end": "324639"
  },
  {
    "text": "easier to more expressive obviously for us to say what we our intent is and then it Bec comes a lot more easier to work",
    "start": "324639",
    "end": "330960"
  },
  {
    "start": "330000",
    "end": "460000"
  },
  {
    "text": "with so how would this look like in a more of a declarative uh style of coding the other thing of course in functional",
    "start": "330960",
    "end": "337520"
  },
  {
    "text": "style of coding is we would normally eliminate the mutable variable so rather than mutating this value over and over",
    "start": "337520",
    "end": "344360"
  },
  {
    "text": "and over we would program with no mutability now of course at first thought that may appear really strange",
    "start": "344360",
    "end": "350560"
  },
  {
    "text": "how could you really total values Without Really mutating any variables at all well let's think about this with a",
    "start": "350560",
    "end": "357520"
  },
  {
    "text": "with a somewhat of an experiment let's say that I want to Total everybody's age in this room starting with him know he's",
    "start": "357520",
    "end": "365120"
  },
  {
    "text": "really Grim he no I'm not going to ask for your real age no so so we're going to Total everybody's age in this room",
    "start": "365120",
    "end": "370280"
  },
  {
    "text": "let's say starting with him but let's say I have a special Post-it notes now the Post-it notes are special in that",
    "start": "370280",
    "end": "377240"
  },
  {
    "text": "they are right once Post-it notes you can write on them once but you cannot erase them you cannot rewrite on them",
    "start": "377240",
    "end": "383360"
  },
  {
    "text": "you cannot overwrite on them so on this Post-It note the first Post-It note I tear off I put a zero on it of course I",
    "start": "383360",
    "end": "389800"
  },
  {
    "text": "cannot change it now that I've written zero on it and I'm going to give it to him right so what's he going to do he's going to take his own age and then add",
    "start": "389800",
    "end": "396520"
  },
  {
    "text": "to the value of the age on the Post-it note which is zero and then comes up with this number but wait a minute he",
    "start": "396520",
    "end": "403080"
  },
  {
    "text": "cannot change the Post-it note what are his options any ideas new post a new Post-It",
    "start": "403080",
    "end": "409360"
  },
  {
    "text": "note why not right and so he's going to tear off a new Post-It note and write his age on at plus zero and then passes",
    "start": "409360",
    "end": "416280"
  },
  {
    "text": "it down to the next person right so what does he do he takes the AG from the person on his left adds his own age to",
    "start": "416280",
    "end": "422560"
  },
  {
    "text": "the value creates another Post-it node and passes it down and of course eventually what I get from the last",
    "start": "422560",
    "end": "428039"
  },
  {
    "text": "person in the room would be the total of everybody's age in this room making sense so notice in this case we didn't",
    "start": "428039",
    "end": "434120"
  },
  {
    "text": "mutate any variable of course one small concern you may have is gosh we kind of tore off so many Post-it notes well",
    "start": "434120",
    "end": "441400"
  },
  {
    "text": "remember one thing about uh you know Java it's got you know fairly good garbage collector in place and maybe we",
    "start": "441400",
    "end": "447800"
  },
  {
    "text": "could also figure out a way that this can be more efficient somehow that that's a second problem to solve right",
    "start": "447800",
    "end": "453199"
  },
  {
    "text": "premature optimization is root of all evil let's not worry about that problem right now so the point is that we could",
    "start": "453199",
    "end": "459240"
  },
  {
    "text": "be creating these new values and not change existing values well let's kind of put that in code and see how that",
    "start": "459240",
    "end": "465560"
  },
  {
    "text": "would feel like so I'm going to rewrite this code to Total but this time notice",
    "start": "465560",
    "end": "470759"
  },
  {
    "text": "what I'm going to do here is I'm going to start with the numbers given to us so numbers is the value that I've taken and",
    "start": "470759",
    "end": "477400"
  },
  {
    "text": "I'm going to call a method called fold left and I told that I would pass a zero as a initial value that's the value that",
    "start": "477400",
    "end": "484080"
  },
  {
    "text": "I'm going to give to him and I'm going to pass to it another little value we'll see what this is in a second and this is",
    "start": "484080",
    "end": "490400"
  },
  {
    "text": "going to take uh two values in here I'll explain what this means in just a second and I'm going to ask him to really total",
    "start": "490400",
    "end": "496759"
  },
  {
    "text": "these values together and then represent the value so notice that it produced exactly the same result as the previous",
    "start": "496759",
    "end": "503159"
  },
  {
    "text": "one but what did we do here well first of all notice we did not mutate any variable at all in this second",
    "start": "503159",
    "end": "509879"
  },
  {
    "text": "expression we wrote so what is f left doing it somewhat does exactly what I explained we start with the initial",
    "start": "509879",
    "end": "516039"
  },
  {
    "text": "value of zero but to this function we are giving two objects now the first",
    "start": "516039",
    "end": "522680"
  },
  {
    "text": "object we are giving to the for left method is the value zero that's kind of obvious here but we are also giving him",
    "start": "522680",
    "end": "529320"
  },
  {
    "text": "another object this object we're giving to him doesn't quite look like object in the in our eyes but this is actually a",
    "start": "529320",
    "end": "536320"
  },
  {
    "text": "function value or or that's what Scola calls it a function value basically is nothing but an object that represents a",
    "start": "536320",
    "end": "543320"
  },
  {
    "text": "function itself so in other words the for left method really took two",
    "start": "543320",
    "end": "548600"
  },
  {
    "text": "parameters zero being the first parameter and this function being the second parameter in other words in",
    "start": "548600",
    "end": "555480"
  },
  {
    "text": "functional programming we kind of do to functions what we normally do to objects",
    "start": "555480",
    "end": "561079"
  },
  {
    "text": "so like we can create objects within functions we can return objects from functions and we can pass objects to",
    "start": "561079",
    "end": "567680"
  },
  {
    "text": "functions now we can create functions within functions return function from functions and also pass functions to",
    "start": "567680",
    "end": "574640"
  },
  {
    "text": "functions as well so in this example we created a function right here an anonymous function we call it Lambda",
    "start": "574640",
    "end": "581519"
  },
  {
    "text": "expressions and then we pass that function to the full left method so with a full left method said I'm going to",
    "start": "581519",
    "end": "587160"
  },
  {
    "text": "start with a value of zero to begin with and then I'm going to call this particular given Lambda expression or",
    "start": "587160",
    "end": "593519"
  },
  {
    "text": "function value and then it binds the variable C to the initial value zero we",
    "start": "593519",
    "end": "598959"
  },
  {
    "text": "gave binds the variable e to the first element in the collection this is as if",
    "start": "598959",
    "end": "604399"
  },
  {
    "text": "he is taking his own age which is e and the carry over which is C the value given to him from the left totals those",
    "start": "604399",
    "end": "611240"
  },
  {
    "text": "two up and returns it the for left method now invokes this function one more time but this time binds the",
    "start": "611240",
    "end": "618200"
  },
  {
    "text": "variable C to the value given from the previous call to this function and the element e is is bound to the next",
    "start": "618200",
    "end": "624920"
  },
  {
    "text": "element in the collection and the and the sequence continues until the end result is obtained which is the total of",
    "start": "624920",
    "end": "630880"
  },
  {
    "text": "all the values now in this particular case we are expressing a little bit",
    "start": "630880",
    "end": "636120"
  },
  {
    "text": "about what we want to achieve and we let four left really do the iteration itself",
    "start": "636120",
    "end": "641360"
  },
  {
    "text": "so we didn't quite write the iteration the iteration is implicit in this regard and then of course we told them we want",
    "start": "641360",
    "end": "646959"
  },
  {
    "text": "to fold everything together and give us the result so it's more declarative in nature because we told an intent rather",
    "start": "646959",
    "end": "652880"
  },
  {
    "text": "than a particular set of actions to perform the other benefit you see here of course is that in this particular",
    "start": "652880",
    "end": "658440"
  },
  {
    "text": "case we don't have any mutable variable at all let's step back for a minute and look at yet another example of this how",
    "start": "658440",
    "end": "665120"
  },
  {
    "text": "would this look like let's say for a minute you're writing Java code let's just imagine that for a second and when",
    "start": "665120",
    "end": "671639"
  },
  {
    "text": "I say Java code here of course I'm talking about pre- Java 8 because a lot of what I'm going to show you here Java",
    "start": "671639",
    "end": "677760"
  },
  {
    "text": "8 can do that as well in terms of functional style of coding and then we'll deviate and look at things that",
    "start": "677760",
    "end": "683360"
  },
  {
    "text": "scolar can do but you know most likely Java won't do in Java 8 as well but but looking at pre Java eight how would you",
    "start": "683360",
    "end": "690880"
  },
  {
    "text": "double each of the values within this collection well let's think about this for a minute if this was Java code what",
    "start": "690880",
    "end": "697079"
  },
  {
    "text": "would you do you would first say list of integer and then you would say doubled equals and then you would say new array",
    "start": "697079",
    "end": "704000"
  },
  {
    "text": "list of integer using Java 7 notation we don't have to put integer over there and then you would write something like for",
    "start": "704000",
    "end": "710120"
  },
  {
    "text": "in I or element in numbers and then you would write something like double. add",
    "start": "710120",
    "end": "715920"
  },
  {
    "text": "and then you would say uh you know value e times to and then eventually when",
    "start": "715920",
    "end": "721040"
  },
  {
    "text": "you're done with it you would output you know system.out.print line for example",
    "start": "721040",
    "end": "726320"
  },
  {
    "text": "and then you would output doubled over here that code won't run obviously because a Java code not in schola but",
    "start": "726320",
    "end": "732680"
  },
  {
    "text": "does that sound familiar anybody here who's written code like this before yeah one Brave person raises the hand one",
    "start": "732680",
    "end": "738639"
  },
  {
    "text": "more one more people are slowly in denial right I fully understand right you don't want to raise your hand in",
    "start": "738639",
    "end": "744360"
  },
  {
    "text": "public for that especially with the camera around that's fully understandable but once you write code like this how do you",
    "start": "744360",
    "end": "751040"
  },
  {
    "text": "feel dirty isn't it right you feel really dirty you go home and the kids",
    "start": "751040",
    "end": "756399"
  },
  {
    "text": "come running to you say don't touch me I got to go shower first right because you spend the day writing code like this",
    "start": "756399",
    "end": "761720"
  },
  {
    "text": "there's a name for this by the way and that's called primitive Obsession and and we have primitive Obsession when we",
    "start": "761720",
    "end": "767720"
  },
  {
    "text": "code in languages like this because we work at a very low level of detail that takes a lot of effort and we rinse and",
    "start": "767720",
    "end": "774079"
  },
  {
    "text": "repeat right that takes a lot of effort but notice what what what's wrong with this code this is very low level it's",
    "start": "774079",
    "end": "780240"
  },
  {
    "text": "very imperative and you had to spell out every single detail to him imagine speaking this out and how tiring it",
    "start": "780240",
    "end": "786880"
  },
  {
    "text": "becomes go ahead and create an empty list for me please now start looping through every value double the value",
    "start": "786880",
    "end": "794399"
  },
  {
    "text": "first add it to the empty list I created so that you can keep adding to it and then repeat this right so notice how low",
    "start": "794399",
    "end": "801079"
  },
  {
    "text": "level we had to go through to do this well we could do this in a much much higher level if you will of a level of",
    "start": "801079",
    "end": "807560"
  },
  {
    "text": "abstraction so how would simp simply saying numbers. map so what is map map",
    "start": "807560",
    "end": "813720"
  },
  {
    "text": "is a function that simply says I'm going to apply a mapping operation this comes from a mathematical term that we perform",
    "start": "813720",
    "end": "821440"
  },
  {
    "text": "Transformations right now if you think about this this makes a lot of sense because a lot of things in life applies",
    "start": "821440",
    "end": "827199"
  },
  {
    "text": "this transformation we got signals coming in and we transform the signals you may have a little camera that may",
    "start": "827199",
    "end": "832959"
  },
  {
    "text": "have lights coming in you transform the light as it goes through so a lot of things kind of fit into this really well",
    "start": "832959",
    "end": "838519"
  },
  {
    "text": "and what do I want to do for the mapping given an element on my hand I want to double each of the elements and then",
    "start": "838519",
    "end": "845279"
  },
  {
    "text": "return the resulting collection out of this so we focus more on what we want to",
    "start": "845279",
    "end": "850759"
  },
  {
    "text": "achieve than sitting there and spelling through every bit of the detail and also",
    "start": "850759",
    "end": "856240"
  },
  {
    "text": "notice there's no mutability in this example so what we have done in this case is we've said numbers. map and so",
    "start": "856240",
    "end": "863440"
  },
  {
    "text": "we appli this map operation and then we said the operation we want to perform on every element in this collection is this",
    "start": "863440",
    "end": "871240"
  },
  {
    "text": "doubling of the values given to us so that's what we have said here in this particular case and and so if you focus",
    "start": "871240",
    "end": "877360"
  },
  {
    "text": "on this for a minute map is a function but the map function itself is being",
    "start": "877360",
    "end": "882800"
  },
  {
    "text": "called on the numbers collection but notice we are passing to it a a function",
    "start": "882800",
    "end": "888240"
  },
  {
    "text": "itself now let's focus on this highlighted code for a minute now what is a function for most of us we would",
    "start": "888240",
    "end": "893959"
  },
  {
    "text": "say a function has four things right a function has a body a function has a name a function has a parameter list and",
    "start": "893959",
    "end": "901079"
  },
  {
    "text": "a function has a return type right so body name uh parameter list and return type of these four things which you",
    "start": "901079",
    "end": "907720"
  },
  {
    "text": "think is the most important the body I hope right without it there's no point having this function",
    "start": "907720",
    "end": "914240"
  },
  {
    "text": "well right here is the body of this function right to the right side of the arrow is the body of this function so",
    "start": "914240",
    "end": "920639"
  },
  {
    "text": "you can see that the body of the function is right there so one down three more to go hey what about the the",
    "start": "920639",
    "end": "927040"
  },
  {
    "text": "parameter list the parameter list is to the left of the arrow well generally speaking we would provide the parameter",
    "start": "927040",
    "end": "934160"
  },
  {
    "text": "list with the types of the parameters and the variable names isn't it so we could in general in this case we could",
    "start": "934160",
    "end": "940920"
  },
  {
    "text": "say int like this and then we could write code like this as as you can see still works so but on the other hand we",
    "start": "940920",
    "end": "947440"
  },
  {
    "text": "don't have to waste that effort in Scala we can leave out the type information I'll talk more about this in a few",
    "start": "947440",
    "end": "952680"
  },
  {
    "text": "minutes so right there is the type or the parameter list rather so we have",
    "start": "952680",
    "end": "957720"
  },
  {
    "text": "this Arrow separated the parameter list on the left side and the body of the function on the right",
    "start": "957720",
    "end": "963440"
  },
  {
    "text": "side so two down two more to go and and then of course you say what about the return type well the return type is",
    "start": "963440",
    "end": "969600"
  },
  {
    "text": "inferred in this case we don't have to specify it and what about the name who cares about the name it's Anonymous function so we don't have a name for it",
    "start": "969600",
    "end": "975920"
  },
  {
    "text": "go ahead please is e a keyw could be r or d right so the",
    "start": "975920",
    "end": "981720"
  },
  {
    "text": "question is is e a keyword and the answer is no you could call this anything you want to uh that's a great",
    "start": "981720",
    "end": "987920"
  },
  {
    "text": "question by the way because this is one of the complaints I've heard quite a few times from people is to say that",
    "start": "987920",
    "end": "993240"
  },
  {
    "text": "functional code is hard to read so don't be under pressure to name this as e and P and I uh feel free to give it a good",
    "start": "993240",
    "end": "1000680"
  },
  {
    "text": "name if that makes sense to you absolutely give a descriptive name and I often tend to do that when I write code",
    "start": "1000680",
    "end": "1006399"
  },
  {
    "text": "for production I do give U more sensible names depending on the context of what it's supposed to do so absolutely give a",
    "start": "1006399",
    "end": "1012880"
  },
  {
    "text": "good name for the variable and and so that's just a placeholder just like a parameter to in fact you are writing a",
    "start": "1012880",
    "end": "1019199"
  },
  {
    "text": "function so functions do have parameters and whatever names we can give legally to parameters that's basically what we",
    "start": "1019199",
    "end": "1025038"
  },
  {
    "text": "are doing here uh element being the legal name we are given for the parameter really good question absolutely give good good descriptive",
    "start": "1025039",
    "end": "1031240"
  },
  {
    "start": "1030000",
    "end": "1145000"
  },
  {
    "text": "names for those things as well um so we looked at how we can write a function",
    "start": "1031240",
    "end": "1036319"
  },
  {
    "text": "and this Anonymous function we wrote is being passed to this map function in this particular case and what is a map",
    "start": "1036319",
    "end": "1042720"
  },
  {
    "text": "function do the map function by the way is an internal iterator now in general",
    "start": "1042720",
    "end": "1048400"
  },
  {
    "text": "in jav we're used to using external iterators so what's an external iterator external iterator is like a rude dog",
    "start": "1048400",
    "end": "1055919"
  },
  {
    "text": "that's also lazy at home right so you say move and it kind of looks at you and you have to kind of move it and every",
    "start": "1055919",
    "end": "1061919"
  },
  {
    "text": "step you have to move it and just stops where you move it to right whereas an internal iterator likes throwing a fbe",
    "start": "1061919",
    "end": "1067120"
  },
  {
    "text": "at the dog right and it immediately goes gets it so you don't have to spell out the detail you kind of Express the",
    "start": "1067120",
    "end": "1072960"
  },
  {
    "text": "intent so an internal iterator basically says I'm going to take care of the engine of the looping and as a result",
    "start": "1072960",
    "end": "1080159"
  },
  {
    "text": "you don't have to focus on the looping but instead focus on what you want to achieve for that particular element by",
    "start": "1080159",
    "end": "1086679"
  },
  {
    "text": "the way you can do this in Java 8 as well very very close to this syntax even but why do we want to go this route now",
    "start": "1086679",
    "end": "1093840"
  },
  {
    "text": "remember if you look at this particular case it feels like we are losing a little bit of a control and by the way",
    "start": "1093840",
    "end": "1099880"
  },
  {
    "text": "that's a good thing and the reason why it's a good thing is because we are not spelling how to do things we can employ",
    "start": "1099880",
    "end": "1107000"
  },
  {
    "text": "polymorphism meaning I don't to tell you how to do so you can figure out how to do it so the map function can all of a",
    "start": "1107000",
    "end": "1114000"
  },
  {
    "text": "sudden say hey looks like this operation can be done concurrently why am I",
    "start": "1114000",
    "end": "1119280"
  },
  {
    "text": "sequentially evaluating each of the elements I can you know distribute this across multiple threads and have them",
    "start": "1119280",
    "end": "1125640"
  },
  {
    "text": "run concurrently if it so chooses to do it absolutely why not make use of it so",
    "start": "1125640",
    "end": "1131280"
  },
  {
    "text": "the internal iterator can take control based on the context and decide to do things on its own depending on whether",
    "start": "1131280",
    "end": "1137840"
  },
  {
    "text": "it should run it qu qually run it concurrently or other flavors as it may make more sense so we looked at a little",
    "start": "1137840",
    "end": "1143840"
  },
  {
    "text": "bit about the functional style and how that can work together but let's get back to Scala and talk about certain",
    "start": "1143840",
    "end": "1150679"
  },
  {
    "start": "1145000",
    "end": "1545000"
  },
  {
    "text": "things that are kind of unique to Scala when compared to Java itself one of the things that Java provides is uh static",
    "start": "1150679",
    "end": "1157600"
  },
  {
    "text": "typing well what does that mean really well if you're writing code in Java how would you write it you would say for",
    "start": "1157600",
    "end": "1164360"
  },
  {
    "text": "example list integer and then you would say of course something like like you know values equals new array list of",
    "start": "1164360",
    "end": "1172600"
  },
  {
    "text": "integer and you would have to specify these things in the older version of java in the newer version of java in",
    "start": "1172600",
    "end": "1177960"
  },
  {
    "text": "Java 7 at least you can let that go right but every step of the way you have to tell what the type is and and that",
    "start": "1177960",
    "end": "1185640"
  },
  {
    "text": "can become pretty annoying right A lot of times we specify the type and it's kind of like you know what the type is",
    "start": "1185640",
    "end": "1192320"
  },
  {
    "text": "the compiler knows what the type is and yet you have to spell it right it's kind of like going through the TSA every day",
    "start": "1192320",
    "end": "1197840"
  },
  {
    "text": "I do this all the time it kind of gets tiring after a while right it's like dude if I want to be in a bad boy I",
    "start": "1197840",
    "end": "1202960"
  },
  {
    "text": "wouldn't be here doing it right so that's the whole point it's like you know what the contract is but why do you",
    "start": "1202960",
    "end": "1208000"
  },
  {
    "text": "have to keep spelling it over and over and over that kind of becomes painful isn't it well in the case of Scala by",
    "start": "1208000",
    "end": "1214240"
  },
  {
    "text": "the way you don't have to go through that length let's take take a look at an example so I'm going to say here say",
    "start": "1214240",
    "end": "1220400"
  },
  {
    "text": "greet string equals hello and I'm going to go ahead and print this greet over",
    "start": "1220400",
    "end": "1226640"
  },
  {
    "text": "here so let's go ahead and print the uh greet string that I wrote so it just prints the value greet all right now I'm",
    "start": "1226640",
    "end": "1233080"
  },
  {
    "text": "going to say greet uh over here and let's say this is going to be a howdy over here I change the value and I'm",
    "start": "1233080",
    "end": "1239840"
  },
  {
    "text": "going to go ahead and print this as well and as you can see that I was able to change the value and print it but what",
    "start": "1239840",
    "end": "1245320"
  },
  {
    "text": "if I say greit equals 1 well notice how we get a compilation error it tells me",
    "start": "1245320",
    "end": "1250919"
  },
  {
    "text": "very clearly that the code will not compile because and it's not a runtime error by any means at all it's a compile",
    "start": "1250919",
    "end": "1258360"
  },
  {
    "text": "time time error it didn't run through the first half of the code and then stop and say oops right it it it gave us a",
    "start": "1258360",
    "end": "1264240"
  },
  {
    "text": "compilation error saying I'm sorry I cannot run this code because down below",
    "start": "1264240",
    "end": "1269480"
  },
  {
    "text": "here you're violating an expectation a contract so you cannot assign a value of one to greet because greet is a string",
    "start": "1269480",
    "end": "1277039"
  },
  {
    "text": "now having you know done this for a minute let's go ahead and remove this uh uh code from here and let's get back to",
    "start": "1277039",
    "end": "1284400"
  },
  {
    "text": "this code and I'm going to remove the colon string from here now when when I got into Scala when I was new to Scala I",
    "start": "1284400",
    "end": "1291640"
  },
  {
    "text": "first read that Scala is statically typed so I started putting type information in my code all over and it",
    "start": "1291640",
    "end": "1297880"
  },
  {
    "text": "took me a while to realize I was totally wrong so one morning I ran to my computer and I removed the type",
    "start": "1297880",
    "end": "1303799"
  },
  {
    "text": "information and I ran the code and the code still ran and Scala was kind of smiling in the background saying kid you",
    "start": "1303799",
    "end": "1310120"
  },
  {
    "text": "finally got what this is about right so the point really is that Scala is statically typed in fact it's more",
    "start": "1310120",
    "end": "1316240"
  },
  {
    "text": "statically typed and that means you have to do less typing with your fingers because the language is a bit more",
    "start": "1316240",
    "end": "1322240"
  },
  {
    "text": "intelligent it can figure out what the type is so we don't have to be typing the information with our fingers all the",
    "start": "1322240",
    "end": "1328600"
  },
  {
    "text": "time so as a result as you can see now I can go ahead and change the value of greet one more time and print it that",
    "start": "1328600",
    "end": "1334919"
  },
  {
    "text": "works fine but make no mistake if I say greet equals 1 we get exactly the same",
    "start": "1334919",
    "end": "1340159"
  },
  {
    "text": "compilation error we got a few minutes ago because on line number one Scola was",
    "start": "1340159",
    "end": "1345679"
  },
  {
    "text": "able to infer at compil time that the variable greet is of a type string of",
    "start": "1345679",
    "end": "1351360"
  },
  {
    "text": "course when you look at that code that's kind of obvious it's a string right what else could it be right so and and so it",
    "start": "1351360",
    "end": "1357120"
  },
  {
    "text": "says I'll infer the type so scholar does a fairly healthy dose of type inference and the only times it doesn't do type",
    "start": "1357120",
    "end": "1363880"
  },
  {
    "text": "inference is when the type inference can either be ambiguous or a bit confusing",
    "start": "1363880",
    "end": "1369240"
  },
  {
    "text": "and and I think Scala has a very nice balance if you program in a language like f i feel that they actually push it",
    "start": "1369240",
    "end": "1376159"
  },
  {
    "text": "a little bit further which to a scary point where they would walk into a function implementation to explore the",
    "start": "1376159",
    "end": "1382360"
  },
  {
    "text": "type and then decide what the parameter types are which can be a little kind of scary right because we change the",
    "start": "1382360",
    "end": "1388080"
  },
  {
    "text": "implementation of the function the type can have a different meaning all of a sudden and that could have other impacts",
    "start": "1388080",
    "end": "1394000"
  },
  {
    "text": "so Scola says I'm not going to go that length to give you the type inference so Scala will infer the type wherever it",
    "start": "1394000",
    "end": "1400360"
  },
  {
    "text": "can so for most part the places where you have to specify the type is when you",
    "start": "1400360",
    "end": "1405640"
  },
  {
    "text": "are defining parameters to functions for example you would also have to specify the typee when you declare members of a",
    "start": "1405640",
    "end": "1412360"
  },
  {
    "text": "class for example but for most of the other times you don't have to specify the type in fact I would say don't put",
    "start": "1412360",
    "end": "1418200"
  },
  {
    "text": "the type let Scala complain and then start putting the type when you do need to but of course you need to give really",
    "start": "1418200",
    "end": "1423960"
  },
  {
    "text": "good variable names obviously because without the type information you really need to convey things a little bit more",
    "start": "1423960",
    "end": "1429880"
  },
  {
    "text": "but of course you know if if we have a team which is going to give variables with you know letters Like A and B and C",
    "start": "1429880",
    "end": "1436559"
  },
  {
    "text": "this is not going to make it any better so so it's not going to make bad code better it actually makes good code",
    "start": "1436559",
    "end": "1441799"
  },
  {
    "text": "actually better in a in a way in fact if you notice in this case in the case of Scala you specify the type right uh in",
    "start": "1441799",
    "end": "1449000"
  },
  {
    "text": "the reverse order than you do in Java and the reason is Scala says it's more",
    "start": "1449000",
    "end": "1454080"
  },
  {
    "text": "important to give a good name for a variable than to specify what the type is and that's why the type actually",
    "start": "1454080",
    "end": "1460000"
  },
  {
    "text": "comes after the variable name in this case please really good question so the",
    "start": "1460000",
    "end": "1466679"
  },
  {
    "text": "question is in in Java Ty Al I would Define a list as a variable type rather than an array list as a variable type uh",
    "start": "1466679",
    "end": "1473760"
  },
  {
    "text": "on the other hand here you're letting this to type inference how does that work well let's think about this for a minute if I am creating something as a",
    "start": "1473760",
    "end": "1481039"
  },
  {
    "text": "list and array list and if I'm only using it within a function scope itself it really didn't matter what we declared",
    "start": "1481039",
    "end": "1487760"
  },
  {
    "text": "it as because it's still going to be treated as such the the real Essence is when we start passing this out to other",
    "start": "1487760",
    "end": "1494679"
  },
  {
    "text": "uh you know uh functions what have you so the same Concepts appear here as well when you're passing something it will",
    "start": "1494679",
    "end": "1500679"
  },
  {
    "text": "know what type to send it to So within your encapsulated code it's the type that infers it to maybe more specific to",
    "start": "1500679",
    "end": "1507000"
  },
  {
    "text": "the type you create but when you pass it the contract actually comes in and then that's when the real contract you know",
    "start": "1507000",
    "end": "1512880"
  },
  {
    "text": "type gets in so that is why in the case of function parameters you still have to say what the type is in that case you",
    "start": "1512880",
    "end": "1518960"
  },
  {
    "text": "would say that it's a list and not an array list for example uh whereas within your body it really doesn't matter which",
    "start": "1518960",
    "end": "1525000"
  },
  {
    "text": "way we specify because that has no repercussion outside of of the scope of this particular code mhm so uh the",
    "start": "1525000",
    "end": "1531960"
  },
  {
    "text": "question is are objects pass by value it makes absolutely no semantic difference between Java and Scala they're exactly",
    "start": "1531960",
    "end": "1538039"
  },
  {
    "text": "the same way as in Java pass by reference in that regard so they're not copy it at all in this case so Scala",
    "start": "1538039",
    "end": "1544080"
  },
  {
    "text": "doesn't change the semantic meaning of the objects in in any way it still behaves like the way Java behaves",
    "start": "1544080",
    "end": "1550000"
  },
  {
    "start": "1545000",
    "end": "1601000"
  },
  {
    "text": "because Scala compiles down to bite code and then runs on the jvm you can intermix Java code and Scala code back",
    "start": "1550000",
    "end": "1556000"
  },
  {
    "text": "and forth so you can write some code in Scala some code in Java and call back and forth if you wanted to uh not that I",
    "start": "1556000",
    "end": "1561559"
  },
  {
    "text": "would recommend every alternate class to be that way but it gives you the ability to go back and forth so it doesn't change the semantic meaning mm right so",
    "start": "1561559",
    "end": "1569279"
  },
  {
    "text": "the question is how does it deal with when you do send a particular type uh the answer is it is exactly like the way",
    "start": "1569279",
    "end": "1575799"
  },
  {
    "text": "in Java is you can only send by only compatible types for example so if the",
    "start": "1575799",
    "end": "1581320"
  },
  {
    "text": "type you're receiving is a base type you can either send a base type or a derived",
    "start": "1581320",
    "end": "1586480"
  },
  {
    "text": "type but not the other way around you words the co-variance are definitely handled in Scala like in Java is MH yes",
    "start": "1586480",
    "end": "1594520"
  },
  {
    "text": "so the question is the greed appears to be mutable here I haven't got into the immutability part on this one yet so stay tuned I'll talk about that in just",
    "start": "1594520",
    "end": "1600600"
  },
  {
    "text": "a minute please uh can you say bar greet without giving any value to it that that's correct you cannot do that uh you",
    "start": "1600600",
    "end": "1608000"
  },
  {
    "start": "1601000",
    "end": "1660000"
  },
  {
    "text": "cannot and the reason is type inference says I'm sorry I I'm clueless at this point uh I don't know what you're",
    "start": "1608000",
    "end": "1613880"
  },
  {
    "text": "referring to give me more details at this point uh the time when you can uh actually you cannot say that if you if",
    "start": "1613880",
    "end": "1620919"
  },
  {
    "text": "either you have to bind it to a particular value from which it can infer the type or you have to specify what the",
    "start": "1620919",
    "end": "1627080"
  },
  {
    "text": "type is so say bar Greek code strip that's correct and and then in that case of course you're saying I'm going to",
    "start": "1627080",
    "end": "1632600"
  },
  {
    "text": "come back and give you the value later on and Scola is like all right I'm I'm happy with you because you're going to give me the value a little later on but",
    "start": "1632600",
    "end": "1638840"
  },
  {
    "text": "if you're not going to give me the value now give me the type yeah absolutely excellent so we looked at the uh type",
    "start": "1638840",
    "end": "1645080"
  },
  {
    "text": "inference but let's talk about vals and bars for a minute now when it comes to",
    "start": "1645080",
    "end": "1650520"
  },
  {
    "text": "um variables versus values now we all kind of have programmed in Java for a",
    "start": "1650520",
    "end": "1656440"
  },
  {
    "text": "long time we have done mutability all the time and mutability is something we",
    "start": "1656440",
    "end": "1661760"
  },
  {
    "start": "1660000",
    "end": "1797000"
  },
  {
    "text": "do without even thinking twice however if you have a mutable variable that kind",
    "start": "1661760",
    "end": "1667640"
  },
  {
    "text": "of is a is a little shaky things change and when things can change there's a more uh opportunity for H introducing",
    "start": "1667640",
    "end": "1674480"
  },
  {
    "text": "bugs in the code now when it comes to uh sharing what sharing is a good thing right remember what m mom told us right",
    "start": "1674480",
    "end": "1681600"
  },
  {
    "text": "you know sharing is a good thing but mutability is what we do and sharing is a good thing but shared mutability is",
    "start": "1681600",
    "end": "1688039"
  },
  {
    "text": "devil's work and the minute you bring shared mutability all kinds of things go wrong in code now if you're writing",
    "start": "1688039",
    "end": "1693880"
  },
  {
    "text": "concurrent code and even if you're not writing concurrent code if you're just writing code avoiding mutability as much",
    "start": "1693880",
    "end": "1700159"
  },
  {
    "text": "as possible is a good thing now this is great we can all agree to that but how do you do that in Java well the",
    "start": "1700159",
    "end": "1707360"
  },
  {
    "text": "Effective Java says as much as possible make all your variables final well great",
    "start": "1707360",
    "end": "1715200"
  },
  {
    "text": "I'm going to mark all my variables final but then what if I forget to Mark something final is it possible",
    "start": "1715200",
    "end": "1721559"
  },
  {
    "text": "absolutely right because we are humans we could forget to write final and how do you look for where you forgot to",
    "start": "1721559",
    "end": "1727640"
  },
  {
    "text": "write final when I wrote the uh uh book on the jbm concurrency uh I uh made all",
    "start": "1727640",
    "end": "1734080"
  },
  {
    "text": "my variables final and and and the week after the book was published somebody tweeted saying oh my gosh I'm looking at",
    "start": "1734080",
    "end": "1740399"
  },
  {
    "text": "menit's book he's got 350 users of final I replied back saying ah but you didn't",
    "start": "1740399",
    "end": "1746600"
  },
  {
    "text": "realize where I still forgot to put final right and that's painful in fact I remember the afternoon before the book",
    "start": "1746600",
    "end": "1752760"
  },
  {
    "text": "went to print I said hang on guys let me verify if I have final everywhere that",
    "start": "1752760",
    "end": "1758240"
  },
  {
    "text": "was the lowest point of writing that book because I had to sit there and check where I forgot final because I",
    "start": "1758240",
    "end": "1763519"
  },
  {
    "text": "tell people make it final and you don't want to miss out final in the book right now how do you look for for where final",
    "start": "1763519",
    "end": "1769279"
  },
  {
    "text": "is used that's very simple GP for final how do you look for where you forgot to put final I'm sorry I'm still working on",
    "start": "1769279",
    "end": "1776519"
  },
  {
    "text": "the regular expression to write right that is a lot of effort isn't it to look for something that doesn't exist well",
    "start": "1776519",
    "end": "1782559"
  },
  {
    "text": "scholar says stop right there you make a decision right now do you want this",
    "start": "1782559",
    "end": "1788720"
  },
  {
    "text": "variable to be a variable or do you want this variable to be a value kind of an",
    "start": "1788720",
    "end": "1793880"
  },
  {
    "text": "oxymoron meaning you cannot change this value right it's immutable so so in other words you can declare a variable",
    "start": "1793880",
    "end": "1800919"
  },
  {
    "text": "greet equals hello like this and and then of course you can go ahead and",
    "start": "1800919",
    "end": "1806000"
  },
  {
    "text": "change this variable greet equals howdy like I just showed you before and you can go back and change it as you can see",
    "start": "1806000",
    "end": "1812760"
  },
  {
    "text": "and then you can reprint the value on the other hand if I mark this as Val if",
    "start": "1812760",
    "end": "1818039"
  },
  {
    "text": "you will then we are saying I don't want this reference to ever be modified in",
    "start": "1818039",
    "end": "1824039"
  },
  {
    "text": "this code in the in the scope of this variable now the beauty of this is I will get a compilation error saying I",
    "start": "1824039",
    "end": "1831399"
  },
  {
    "text": "cannot reassign a value to a value obviously in this case right so in other",
    "start": "1831399",
    "end": "1837120"
  },
  {
    "text": "words if you follow this approach you cannot come back and say oops I forgot",
    "start": "1837120",
    "end": "1843039"
  },
  {
    "text": "to put final you got to make a very clear distinction whether you want mutability or not now comes the best",
    "start": "1843039",
    "end": "1850120"
  },
  {
    "text": "part you can easily do a code review and I can do a very quick GP on VAR and say",
    "start": "1850120",
    "end": "1856799"
  },
  {
    "text": "why are we using so many variables and as a code review I would say let's favor",
    "start": "1856799",
    "end": "1862120"
  },
  {
    "text": "values more than variables except when we want to use an exception and so we can apply certain special rules to to",
    "start": "1862120",
    "end": "1869480"
  },
  {
    "text": "deviate from the norm and favor more vals than vs in the code and in general",
    "start": "1869480",
    "end": "1875240"
  },
  {
    "text": "I would say when you're writing code in Scala you do want to prefer more vals than vs as much as you can but it makes",
    "start": "1875240",
    "end": "1881320"
  },
  {
    "text": "it a lot more easier to find this now quickly to clarify this by the way the VAR or Val purely influences the",
    "start": "1881320",
    "end": "1889120"
  },
  {
    "text": "reference itself so think of a Val as Final in Java so if I have a final",
    "start": "1889120",
    "end": "1896279"
  },
  {
    "text": "string we know the string is immutable and the reference is immutable as well",
    "start": "1896279",
    "end": "1902159"
  },
  {
    "text": "but if I say final string builder for example then of course the string",
    "start": "1902159",
    "end": "1907240"
  },
  {
    "text": "Builder can be modified but the reference cannot be modified the same concept appears here as well the V",
    "start": "1907240",
    "end": "1914440"
  },
  {
    "text": "indicates the reference doesn't dictate what the object can and cannot do that's",
    "start": "1914440",
    "end": "1919600"
  },
  {
    "text": "completely orthogonal to that and then we can make the object final as well sorry immutable as well if we wanted to",
    "start": "1919600",
    "end": "1926320"
  },
  {
    "text": "so as much as possible we can favor vales but on that note let's talk about something for a second now imagine for a",
    "start": "1926320",
    "end": "1933200"
  },
  {
    "start": "1929000",
    "end": "2030000"
  },
  {
    "text": "minute that you are writing a Java function and in the Java function if you say public void Fu int a and then you",
    "start": "1933200",
    "end": "1941120"
  },
  {
    "text": "have some code up here and then you say a equals 7 and you have some more code here now looking at this code we all",
    "start": "1941120",
    "end": "1948399"
  },
  {
    "text": "know that this is evil code right why because this function Fu quietly is",
    "start": "1948399",
    "end": "1955120"
  },
  {
    "text": "modifying the input variable provided to it modifying input variable should be",
    "start": "1955120",
    "end": "1961320"
  },
  {
    "text": "punishable under law right because that's very poor programming practice how many times have you ran into bugs",
    "start": "1961320",
    "end": "1967399"
  },
  {
    "text": "because of it I had a guy raising the hands over there right I had a guy call me up one day and said my code doesn't",
    "start": "1967399",
    "end": "1973960"
  },
  {
    "text": "work I don't know why it doesn't work can you take a look at it so I'm looking at his code code and both of us are looking at the codee I'm like gosh this",
    "start": "1973960",
    "end": "1980679"
  },
  {
    "text": "is kind of strange why wouldn't the code work and and then we start debugging step by step and suddenly we realize in",
    "start": "1980679",
    "end": "1988200"
  },
  {
    "text": "line number seven he's modifying an input variable our eyes are so much in denial they don't see the code in front",
    "start": "1988200",
    "end": "1995559"
  },
  {
    "text": "of us right and then once you realize he's changing the input variable they're like are you changing the input variable",
    "start": "1995559",
    "end": "2000919"
  },
  {
    "text": "and he's like oh darn it I didn't mean to right and this is really bugs creep into code and once we you know figured",
    "start": "2000919",
    "end": "2007159"
  },
  {
    "text": "out what the proc problem was we fixed it now what does Java say Java says well since this is a bad practice go ahead",
    "start": "2007159",
    "end": "2013880"
  },
  {
    "text": "and Mark this as final right so in other words if you mark input parameters that final that's what Effective Java says",
    "start": "2013880",
    "end": "2020360"
  },
  {
    "text": "right make things as much final as possible well but you have to remember to put the word final or you have to use",
    "start": "2020360",
    "end": "2026720"
  },
  {
    "text": "a tool that tells you to put final right now what if this is the way it will work",
    "start": "2026720",
    "end": "2032120"
  },
  {
    "text": "let's like look at an example Define Fu and I'm going to say a is an integer and",
    "start": "2032120",
    "end": "2037399"
  },
  {
    "text": "then with within this function I'm going to just print the value of a let's start with this for a minute so I'm going to call Fu with the value of four so you",
    "start": "2037399",
    "end": "2044279"
  },
  {
    "text": "can see the value of four printed now I go here sneakily I say a equal 7 I",
    "start": "2044279",
    "end": "2050320"
  },
  {
    "text": "modify it now notice what happened it got really mad at me it said how dare",
    "start": "2050320",
    "end": "2055638"
  },
  {
    "text": "you are trying to change the value of a in this code right why because by",
    "start": "2055639",
    "end": "2060800"
  },
  {
    "text": "default the parameter to a function is immutable now of course usually people",
    "start": "2060800",
    "end": "2066520"
  },
  {
    "text": "ask me is it possible to really make it mutable the answer is yes go back and",
    "start": "2066520",
    "end": "2071679"
  },
  {
    "text": "program in Java then right so the answer is no in scholar because that's such a bad practice they don't want you to do",
    "start": "2071679",
    "end": "2077358"
  },
  {
    "text": "that so input parameters are treated as final and and and in this case of course a Val you don't have to really say",
    "start": "2077359",
    "end": "2084079"
  },
  {
    "text": "anything related to that as you can see because that is the most logical thing to do so it really favors immutability",
    "start": "2084079",
    "end": "2090520"
  },
  {
    "text": "as you can see in these cases um and in fact you can kind of think about this for a minute and say wait a minute that",
    "start": "2090520",
    "end": "2096960"
  },
  {
    "start": "2092000",
    "end": "2170000"
  },
  {
    "text": "is kind of interesting in we do want to treat input parameters as final but why don't we do this in Java also well",
    "start": "2096960",
    "end": "2103839"
  },
  {
    "text": "that's why we have the book like Effective Java right now it's kind of interesting to think about Java itself",
    "start": "2103839",
    "end": "2109680"
  },
  {
    "text": "and you say here is Java would you hire anybody by the way who is not read Effective Java right you would that's",
    "start": "2109680",
    "end": "2116079"
  },
  {
    "text": "that would be like your first interview question right hey dude do you program in Java yes have you read Effective Java no well here's the door right so you",
    "start": "2116079",
    "end": "2122200"
  },
  {
    "text": "want to make sure they read Effective Java but I'm sure you have wondered one day if Effective Java is such an",
    "start": "2122200",
    "end": "2128000"
  },
  {
    "text": "important book to read why don't they fix java to be effective well actually",
    "start": "2128000",
    "end": "2133920"
  },
  {
    "text": "they did but when they got it done they called it schola right so a lot of things as you can see is fixed the nice",
    "start": "2133920",
    "end": "2140280"
  },
  {
    "text": "way because that's the way it should behave so they took a lot of these recommendations and and worked on it as",
    "start": "2140280",
    "end": "2145560"
  },
  {
    "text": "you can see here okay that's great let's talk a little bit about Essence versus uh ceremony now what is ceremony by the",
    "start": "2145560",
    "end": "2153359"
  },
  {
    "text": "way ceremony is what you have to do before you get to do what what you really want to do and ceremony is boring",
    "start": "2153359",
    "end": "2161520"
  },
  {
    "text": "ceremony really is tiring right you're like I would much rather be doing that but I have to do this because that is",
    "start": "2161520",
    "end": "2168079"
  },
  {
    "text": "ceremony well let's think about some Ceremonies for a minute uh let's talk about Java for a second has anybody had",
    "start": "2168079",
    "end": "2175000"
  },
  {
    "start": "2170000",
    "end": "2421000"
  },
  {
    "text": "a chance to teach Java to anybody here have you done that before a few people raising the hand very quietly that's",
    "start": "2175000",
    "end": "2180480"
  },
  {
    "text": "okay be brave right we all have thought Java to a few people around right okay",
    "start": "2180480",
    "end": "2185560"
  },
  {
    "text": "so you decided to teach Java and your audience is sitting in front of you and saying uh I want to learn Java but is it",
    "start": "2185560",
    "end": "2192160"
  },
  {
    "text": "hard and you said no Java is very simple because every book written on Java says",
    "start": "2192160",
    "end": "2197720"
  },
  {
    "text": "that right so it's got to be simple right so they say well if Java is simple",
    "start": "2197720",
    "end": "2202760"
  },
  {
    "text": "can you teach me something simple you say don't worry about it I'll teach you something very simple how about a hello",
    "start": "2202760",
    "end": "2208280"
  },
  {
    "text": "world and your audience is immediately like cool I want to learn hello world in Java like let's do it and then you said",
    "start": "2208280",
    "end": "2215640"
  },
  {
    "text": "let's get on to it right and you said public Excuse me yes what is public well",
    "start": "2215640",
    "end": "2221599"
  },
  {
    "text": "you don't need to know that right now okay and then and the student you know notes down loyally public don't no need",
    "start": "2221599",
    "end": "2228079"
  },
  {
    "text": "to know that right now and are we doing hello world absolutely class excuse me what's a class you don't need to know",
    "start": "2228079",
    "end": "2234760"
  },
  {
    "text": "that right now okay fair enough hello world and there's a glimmer of hope in",
    "start": "2234760",
    "end": "2240319"
  },
  {
    "text": "this person's eyes yes we have hello world and then you put this curly like what now right then you said public and",
    "start": "2240319",
    "end": "2247680"
  },
  {
    "text": "immediately the person looks at the notes you don't have to know that right now awesome then you said static and that's it is that something I don't have",
    "start": "2247680",
    "end": "2255640"
  },
  {
    "text": "to know also right now and the person is very nervous right now right because I've seen five Concepts I don't need to",
    "start": "2255640",
    "end": "2261839"
  },
  {
    "text": "know right now and this is some how supposed to be simple right now this is called ceremony right ceremony is where",
    "start": "2261839",
    "end": "2270079"
  },
  {
    "text": "you do stuff you don't have to do before you get to do what you really want to do",
    "start": "2270079",
    "end": "2275319"
  },
  {
    "text": "what do you really want to do uh print hello world why are we not printing hello world why are we writing all of these stuff oh let",
    "start": "2275319",
    "end": "2282160"
  },
  {
    "text": "me explain to you why that's because the jvm wants a class that has a public",
    "start": "2282160",
    "end": "2288760"
  },
  {
    "text": "static void main but that's jvm's problem not your problem and Java says",
    "start": "2288760",
    "end": "2294480"
  },
  {
    "text": "I'll make jvm's problem your problem scholar says I'll keep the jvm's problem the jvm's problem and I will not you",
    "start": "2294480",
    "end": "2301359"
  },
  {
    "text": "know put it on your face so why not simply say hello world over here and be",
    "start": "2301359",
    "end": "2307040"
  },
  {
    "text": "done with it so notice in this case there is no ceremony associated with it",
    "start": "2307040",
    "end": "2312440"
  },
  {
    "text": "you say wait a second you said a few minutes ago that this runs on the jvm",
    "start": "2312440",
    "end": "2317560"
  },
  {
    "text": "and it produces a bite code how in the world could that be true because we know that jvm requires a class with public",
    "start": "2317560",
    "end": "2323880"
  },
  {
    "text": "static void method absolutely true but what scholar compiler The Scholar C compiler does is it says I'm going to",
    "start": "2323880",
    "end": "2330960"
  },
  {
    "text": "take your code I'm going to write a class with a public static void main",
    "start": "2330960",
    "end": "2336680"
  },
  {
    "text": "method in it it and I'm going to stick your code inside of it compile the whole Dawn thing and then send it to the jvm",
    "start": "2336680",
    "end": "2343440"
  },
  {
    "text": "so you don't have to do it so in other words Scola compiler wraps all this to meet the expectation of the jvm so we",
    "start": "2343440",
    "end": "2350520"
  },
  {
    "text": "don't have to sit there and waste our time and effort looking at stuff that we don't want to care about so it gives an",
    "start": "2350520",
    "end": "2356240"
  },
  {
    "text": "illusion of scripting but it really is not scripting in the sense of scripting",
    "start": "2356240",
    "end": "2361599"
  },
  {
    "text": "it still is the good old Java class we are writing under the covers and we are sending it to this in this particular",
    "start": "2361599",
    "end": "2367000"
  },
  {
    "text": "case so you can see how we have a Essence over ceremony there's a lot of things that are optional in Scala like",
    "start": "2367000",
    "end": "2375000"
  },
  {
    "text": "what for example you already saw me show a couple of things already you can see that in Scala we don't have to write",
    "start": "2375000",
    "end": "2382880"
  },
  {
    "text": "semicolons so we simply said hello world like this now if I put a semicolon right",
    "start": "2382880",
    "end": "2389480"
  },
  {
    "text": "it still works but you don't have to put the semicolon anybody here thinks that semicolons are important not really",
    "start": "2389480",
    "end": "2395640"
  },
  {
    "text": "right in fact I got to prove that semicolons are not really good idea if you take a look at your hand for a",
    "start": "2395640",
    "end": "2400960"
  },
  {
    "text": "minute there's a reason why your pinky is the shortest because ears of emotional abuse it's taken right all",
    "start": "2400960",
    "end": "2407640"
  },
  {
    "text": "these other fingers do useful work and then you stop and hit the semicolon it's like why me right so it really is taking",
    "start": "2407640",
    "end": "2414400"
  },
  {
    "text": "an emotional you know toll on it well you don't have to put semicolons in in scull as you can see you don't have to",
    "start": "2414400",
    "end": "2420160"
  },
  {
    "text": "you know put that semicolons are optional paranthesis is optional in certain context return is optional so if",
    "start": "2420160",
    "end": "2427800"
  },
  {
    "start": "2421000",
    "end": "2505000"
  },
  {
    "text": "I were to write a function for example so I'm going to say Define Fu and I'm going to De write a variable here and",
    "start": "2427800",
    "end": "2435280"
  },
  {
    "text": "maybe I want to return a * 2 I could call here for example Fu and send three",
    "start": "2435280",
    "end": "2441280"
  },
  {
    "text": "to it and we can see that it's returning a six I don't have to put the return keyword so every the last expression in",
    "start": "2441280",
    "end": "2449440"
  },
  {
    "text": "the function is automatically evaluated and the value is returned so we don't have to say it uh type information is",
    "start": "2449440",
    "end": "2456480"
  },
  {
    "text": "optional a number of cases as you saw here it knows that fu is returning a integer in this case how so because it",
    "start": "2456480",
    "end": "2464000"
  },
  {
    "text": "evaluates the body of the code and says aha a * 2 what would that be well I know",
    "start": "2464000",
    "end": "2469760"
  },
  {
    "text": "a is an integer and a * 2 obviously is going to be an integer so it figures out what the type is based on the inference",
    "start": "2469760",
    "end": "2476560"
  },
  {
    "text": "and we didn't have to tell him that it's an integer type in this particular case so a lot of these things are optional",
    "start": "2476560",
    "end": "2481880"
  },
  {
    "text": "classes are optional as well as you can see uh we didn't have to write a class in this case we just threw in a few",
    "start": "2481880",
    "end": "2487480"
  },
  {
    "text": "functions together so a lot of these things are optional now what is good about having optional things the nice",
    "start": "2487480",
    "end": "2493560"
  },
  {
    "text": "thing about having things optional is you don't have to involve ceremony and as a result you can directly get to the",
    "start": "2493560",
    "end": "2499920"
  },
  {
    "text": "essence of what you want to do rather than playing around the compiler and pleasing the compiler so let's take this",
    "start": "2499920",
    "end": "2506760"
  },
  {
    "text": "up up a notch please so the question is are there",
    "start": "2506760",
    "end": "2512079"
  },
  {
    "text": "times when it's better to put the return type maybe we have a mistake on the return type or maybe we type something",
    "start": "2512079",
    "end": "2517240"
  },
  {
    "text": "something incorrect uh the answer is if you are more comfortable putting the type don't hesitate to put the type in",
    "start": "2517240",
    "end": "2523800"
  },
  {
    "text": "the beginning and once you get really comfortable with it you will kind of you know start losing these guards around",
    "start": "2523800",
    "end": "2531240"
  },
  {
    "text": "you and you will realize that we've been overworking most of the time so let's",
    "start": "2531240",
    "end": "2537599"
  },
  {
    "text": "think about this for a second um if we write code I I I used to work for some",
    "start": "2537599",
    "end": "2542920"
  },
  {
    "text": "companies where the minute I write code my boss would say awesome now let's ship it but we normally write code and we do",
    "start": "2542920",
    "end": "2549800"
  },
  {
    "text": "this thing called testing as well so if we ever use the code we write then all",
    "start": "2549800",
    "end": "2555559"
  },
  {
    "text": "these issues kind of disappear because I'm going to write a unit test on my code and and even in statically typed",
    "start": "2555559",
    "end": "2561960"
  },
  {
    "text": "languages by the way I favor unit testing quite a bit so if I ever write code that is unit tested it is going to",
    "start": "2561960",
    "end": "2569960"
  },
  {
    "text": "exercise a certain Behavior out of it in that case the type information really is",
    "start": "2569960",
    "end": "2575079"
  },
  {
    "text": "not the only validation I'm going to have because my code is going to exercise it right away so I'm not going",
    "start": "2575079",
    "end": "2580680"
  },
  {
    "text": "to say it is never useful but in general I feel that the compiler is way",
    "start": "2580680",
    "end": "2586319"
  },
  {
    "text": "overrated than it really is compiler is very useful by the way but we seem to put it in a pedestal more than it really",
    "start": "2586319",
    "end": "2593160"
  },
  {
    "text": "deserves it so I would say down it a little Notch and say I'm going to live without it and see if I really need this",
    "start": "2593160",
    "end": "2599520"
  },
  {
    "text": "Behavior or the specification and I find that a lot of times I really don't I overwork in giving these information uh",
    "start": "2599520",
    "end": "2606359"
  },
  {
    "text": "so the question is can have two implementations of Fu where they return two different values in that case well",
    "start": "2606359",
    "end": "2612440"
  },
  {
    "text": "that goes to the issue of contravariance where we are trying to return a different type uh and overloading rules",
    "start": "2612440",
    "end": "2618400"
  },
  {
    "text": "would prohibit from from that happening because a signature of the method wouldn't tally up uh for the you know",
    "start": "2618400",
    "end": "2623720"
  },
  {
    "text": "for the conflict to resolve so very similar to Java it would enforce the overloading ambiguity rules as well so",
    "start": "2623720",
    "end": "2629800"
  },
  {
    "text": "we don't have to worry about that either uh but but like I said go ahead and put the type information until yeah I I",
    "start": "2629800",
    "end": "2635720"
  },
  {
    "text": "can't I can I declare you you can't declare injur no you cannot unless",
    "start": "2635720",
    "end": "2641040"
  },
  {
    "text": "there's the overloading as long as the overloading doesn't conflict you can but if that is the only difference between",
    "start": "2641040",
    "end": "2646800"
  },
  {
    "text": "the functions it would not allow you to do that that's correct that that's correct yeah um so let's take this a",
    "start": "2646800",
    "end": "2653640"
  },
  {
    "text": "little bit further let's say for a minute I want to implement uh another thing that Scala allows which is really",
    "start": "2653640",
    "end": "2660680"
  },
  {
    "text": "nice uh as a compiler support let's look at an example here let's say for a minute I want to write a factorial",
    "start": "2660680",
    "end": "2667200"
  },
  {
    "text": "function and the factorial is going to take a value that is given to it and I want to return a factorial of this",
    "start": "2667200",
    "end": "2674079"
  },
  {
    "text": "number so I'm going to say bar fact equals 1 I want to return the fact when I'm done with it so I'm going to Simply",
    "start": "2674079",
    "end": "2680520"
  },
  {
    "text": "print the factorial let's say of five in this case I haven't implemented this yet so it gives me a value of one which is",
    "start": "2680520",
    "end": "2686200"
  },
  {
    "text": "incorrect but let's go ahead and implement this real through mutability of course so I'm going to say value of I",
    "start": "2686200",
    "end": "2691880"
  },
  {
    "text": "within the values of let's say 1 to n and I'm going to say in this case is",
    "start": "2691880",
    "end": "2697319"
  },
  {
    "text": "this is going to be fact times equals the value of I so I have implemented a factorial using a simple iteration now",
    "start": "2697319",
    "end": "2705240"
  },
  {
    "text": "iteration involves mutability in this case it is it is a very simple code but we are writing imperative code in this",
    "start": "2705240",
    "end": "2711640"
  },
  {
    "text": "particular case we could have traded this with the full left method we wrote earlier if we wanted to but let's change",
    "start": "2711640",
    "end": "2717960"
  },
  {
    "text": "this a little bit now let's say for a minute we want to use a recursion to do this so I could say if n is equal to 1 I",
    "start": "2717960",
    "end": "2726400"
  },
  {
    "text": "want to return return one itself otherwise I want to return let's say n * factorial of n minus 1 so this is a very",
    "start": "2726400",
    "end": "2734240"
  },
  {
    "text": "simple recursion now of course because the function is recursive Scala says I",
    "start": "2734240",
    "end": "2740559"
  },
  {
    "text": "can go multiple levels to find out what your return type is so this code will not compile by the way it'll give us an",
    "start": "2740559",
    "end": "2746680"
  },
  {
    "text": "error as you can see here and to resolve the error you have to tell him what the return type in this particular cases now",
    "start": "2746680",
    "end": "2753160"
  },
  {
    "text": "you can see that we wrote it as a recursion now what do you think of recursion recursions are really awesome",
    "start": "2753160",
    "end": "2758240"
  },
  {
    "text": "isn't it right recursion is the best way to really gather up friends right they want to party with you because you can",
    "start": "2758240",
    "end": "2763960"
  },
  {
    "text": "solve problem by using sub problem Solutions right how cool that is so they won't hang out with you so recursions",
    "start": "2763960",
    "end": "2770440"
  },
  {
    "text": "are really awesome until there's always this one guy in the party who doesn't like you and says what if I increase",
    "start": "2770440",
    "end": "2778440"
  },
  {
    "text": "this value right and then you increase the value and the party is over right why",
    "start": "2778440",
    "end": "2785760"
  },
  {
    "text": "because we got a stack over flow exception and everybody is gone you're sitting there alone and like it was so",
    "start": "2785760",
    "end": "2791800"
  },
  {
    "text": "cool if it only worked right so recursion is such a wonderful idea but",
    "start": "2791800",
    "end": "2799000"
  },
  {
    "text": "how sad it is that we have stack Overflow exceptions how could we solve this well what if we can solve this by a",
    "start": "2799000",
    "end": "2806839"
  },
  {
    "text": "little bit of a compiler magic now what is this magic there's a fantastic book out there by the way a book I really",
    "start": "2806839",
    "end": "2813800"
  },
  {
    "text": "like a lot it's called structure and interpretation of computer programs and if you just Google for sicp you will",
    "start": "2813800",
    "end": "2820400"
  },
  {
    "text": "find it so structure and interpretation of computer programs uh book by suspen and susman talk about a a little",
    "start": "2820400",
    "end": "2827240"
  },
  {
    "text": "Technique we can use under the under the hood so let's see what this technique is they talk about you can write a",
    "start": "2827240",
    "end": "2834000"
  },
  {
    "start": "2830000",
    "end": "2936000"
  },
  {
    "text": "iterative code oh by the way they talk about a procedure versus a process now",
    "start": "2834000",
    "end": "2839280"
  },
  {
    "text": "what is this distinction a procedure is the code you write a process is the code",
    "start": "2839280",
    "end": "2844440"
  },
  {
    "text": "that runs it's kind of obvious that that's what happen happens already right because the compiler takes a stab at your code the jit compiler then comes",
    "start": "2844440",
    "end": "2851160"
  },
  {
    "text": "through So eventually what runs is transformed code already right so the code you write is what you wrote is a",
    "start": "2851160",
    "end": "2857079"
  },
  {
    "text": "procedure and the one that runs in effect is the process now what they talk about in the book is they say what if",
    "start": "2857079",
    "end": "2864079"
  },
  {
    "text": "you write a iterative procedure and you run it as a iterative process and we did",
    "start": "2864079",
    "end": "2869760"
  },
  {
    "text": "that a few minutes ago right we wrote an iteration we ran as iteration life is good we could also write as a recursive",
    "start": "2869760",
    "end": "2876559"
  },
  {
    "text": "proced procedure and then we could then of course run it as a recursive process",
    "start": "2876559",
    "end": "2881720"
  },
  {
    "text": "and that's what we did at least until the value became too big we were able to run as a recursion but where really big",
    "start": "2881720",
    "end": "2888200"
  },
  {
    "text": "gains come in is if you can write it as a recursive procedure but somehow",
    "start": "2888200",
    "end": "2893800"
  },
  {
    "text": "quietly it runs as a iterative process now you get the best of both words right",
    "start": "2893800",
    "end": "2900480"
  },
  {
    "text": "you write is a recursion so it's very expressive you can still have the party with your friends but it runs as a",
    "start": "2900480",
    "end": "2907040"
  },
  {
    "text": "iterative this is like finding that magic pill where you can eat all you want and never add to your midsection if",
    "start": "2907040",
    "end": "2914599"
  },
  {
    "text": "you find that pill please let me know I can benefit from it a lot I need that for the amount of travel I make I",
    "start": "2914599",
    "end": "2919640"
  },
  {
    "text": "definitely need it but in this case we have this pill in this case of Scala because Scala says if you honor the",
    "start": "2919640",
    "end": "2926559"
  },
  {
    "text": "recursion as a tail recursion then I can take care of this for you so notice what",
    "start": "2926559",
    "end": "2932319"
  },
  {
    "text": "I'm going to do in this case I'm going to go back over here to this code and",
    "start": "2932319",
    "end": "2937480"
  },
  {
    "start": "2936000",
    "end": "3264000"
  },
  {
    "text": "let's go go back to five here for a second but in this particular case I'm going to change this just a little bit",
    "start": "2937480",
    "end": "2943119"
  },
  {
    "text": "to say I'm going to take a value of n but I'm also going to take a factorial",
    "start": "2943119",
    "end": "2948559"
  },
  {
    "text": "as a input value as well and then in this case of course if n is equal to 1",
    "start": "2948559",
    "end": "2953799"
  },
  {
    "text": "return the factorial but if otherwise go ahead and return factorial of n minus 1",
    "start": "2953799",
    "end": "2960839"
  },
  {
    "text": "and then n times the factorial itself so we did a preemptive strike here and we",
    "start": "2960839",
    "end": "2966119"
  },
  {
    "text": "said will perform the computation first and then throw it as a as a parameter",
    "start": "2966119",
    "end": "2971640"
  },
  {
    "text": "now notice that this became a tail call let's step back for a second and and take a look at this one more time the",
    "start": "2971640",
    "end": "2978559"
  },
  {
    "text": "function I had a minute ago if you go back and look at this code I had a second ago notice the last call that is",
    "start": "2978559",
    "end": "2984960"
  },
  {
    "text": "being made in this factorial function is the call to multiply itself so in other",
    "start": "2984960",
    "end": "2990799"
  },
  {
    "text": "words the factorial says I have to pass right here take the value of n on one",
    "start": "2990799",
    "end": "2996319"
  },
  {
    "text": "hand and wait for the result of factorial n minus one before I complete the operation and return so it's got to",
    "start": "2996319",
    "end": "3002720"
  },
  {
    "text": "hold the stack and climb on the stack to the next level on the other hand with the little refactoring we just did what",
    "start": "3002720",
    "end": "3009720"
  },
  {
    "text": "we did in this particular case is we instead said we're going to take this value uh uh of the factorial right now",
    "start": "3009720",
    "end": "3018400"
  },
  {
    "text": "so factorial of n minus one and then we will do the math right away right here",
    "start": "3018400",
    "end": "3023880"
  },
  {
    "text": "in this code and then pass that value as a parameter in the in the parameter list",
    "start": "3023880",
    "end": "3029400"
  },
  {
    "text": "so as a result the last operation that's performed right now is the call to the",
    "start": "3029400",
    "end": "3035160"
  },
  {
    "text": "factorial itself in other words as soon as the factorial is computed there is nothing more for this function to do but",
    "start": "3035160",
    "end": "3042040"
  },
  {
    "text": "to return the value the compiler can be smart enough to say wait a second if all",
    "start": "3042040",
    "end": "3047079"
  },
  {
    "text": "you're doing is standing on the stack waiting for this result to be received only to pass it down why to step down",
    "start": "3047079",
    "end": "3053640"
  },
  {
    "text": "from the stack and wait for the result so in other words very quietly under the H it can convert this from a recursion",
    "start": "3053640",
    "end": "3061599"
  },
  {
    "text": "into a very simple iteration and this can be done with compiler support fairly",
    "start": "3061599",
    "end": "3067040"
  },
  {
    "text": "well so if I go back and write this code for a second now notice that the same result as before but on the other hand",
    "start": "3067040",
    "end": "3075240"
  },
  {
    "text": "this became tail call recursive let's challenge this a little bit to see how this is going to work so if I increase",
    "start": "3075240",
    "end": "3081440"
  },
  {
    "text": "the value like I did before notice that in this case we did not get a stack Overflow exception of course it gave a",
    "start": "3081440",
    "end": "3087680"
  },
  {
    "text": "value of zero which will'll fix in a minute that's because of an integer overflow but notice it's not really",
    "start": "3087680",
    "end": "3093079"
  },
  {
    "text": "having a problem in the stack at all so what's happening what's happening in this case is the compiler very quietly",
    "start": "3093079",
    "end": "3099559"
  },
  {
    "text": "takes this factorial and recognizes this is the last call in this function itself",
    "start": "3099559",
    "end": "3105359"
  },
  {
    "text": "so this is tail call opt and and as a result it can optimize for tail call recursion and so quietly transform this",
    "start": "3105359",
    "end": "3113200"
  },
  {
    "text": "entire code into a simple uh iteration under the so as a result it becomes a while there",
    "start": "3113200",
    "end": "3119280"
  },
  {
    "text": "is more code to run keep running it and as soon as you get a result return it right it just becomes a simple uh",
    "start": "3119280",
    "end": "3125680"
  },
  {
    "text": "iteration and as a result of course I want to make this work properly so I'm going to change it to a big integer in",
    "start": "3125680",
    "end": "3131799"
  },
  {
    "text": "this case and of course if uh n is one I want to return the factorial otherwise I",
    "start": "3131799",
    "end": "3137119"
  },
  {
    "text": "want to continue with the value and return the result in this case so in this case of course this is a factorial",
    "start": "3137119",
    "end": "3142839"
  },
  {
    "text": "and this is going to be a big int uh big int of one which is is the value that I want to send to it initially for this to",
    "start": "3142839",
    "end": "3148960"
  },
  {
    "text": "work properly so let's go ahead and change this to uh oh of course the result is going to be a big int as well",
    "start": "3148960",
    "end": "3154960"
  },
  {
    "text": "so in this case we are running this factorial with a large value 50,000 and",
    "start": "3154960",
    "end": "3161720"
  },
  {
    "text": "and of course the recursion is taking a little longer here uh uh don't try to memorize that result you don't need to",
    "start": "3161720",
    "end": "3166799"
  },
  {
    "text": "know this but uh that's an example of how the tail call optimization really took place so it's already baked into",
    "start": "3166799",
    "end": "3173319"
  },
  {
    "text": "the compiler now you say all right this is nice but anytime we hear the word magic as",
    "start": "3173319",
    "end": "3179720"
  },
  {
    "text": "programmers we don't like it right because later on you may come and change this code a little bit and it no longer",
    "start": "3179720",
    "end": "3185599"
  },
  {
    "text": "is tail call recursive how do you know that this is broken to solve this problem scolar provides a little",
    "start": "3185599",
    "end": "3191200"
  },
  {
    "text": "annotation for compiler support so you can say Scala dot in this case you can say annotation dot uh tail wck and in",
    "start": "3191200",
    "end": "3198559"
  },
  {
    "text": "this case of course it'll it'll look through your code and make sure that this code is actually tail call optimized now what if I don't have this",
    "start": "3198559",
    "end": "3206040"
  },
  {
    "text": "code at tail call what's going to happen so as you can see in this case if I go back and put a one times factorial and",
    "start": "3206040",
    "end": "3213839"
  },
  {
    "text": "try to compile this code it yells and screams at me and says what are you smoking this is not tail call optimized",
    "start": "3213839",
    "end": "3219680"
  },
  {
    "text": "why are you putting tail call recursive on the top so you can see that it kind of checks and balances it so you can use",
    "start": "3219680",
    "end": "3225079"
  },
  {
    "text": "The annotation to emphasize that the code is really tail call optimized and",
    "start": "3225079",
    "end": "3230480"
  },
  {
    "text": "if it is not it's going to give you a compiler error and you can and recover from it um so let's look at look at this",
    "start": "3230480",
    "end": "3236720"
  },
  {
    "text": "for a second we uh made a little bit of improvement in this code now that we made this Improvement we can go for a",
    "start": "3236720",
    "end": "3242920"
  },
  {
    "text": "large value uh of input as well and we are able to use recursion but there is",
    "start": "3242920",
    "end": "3248400"
  },
  {
    "text": "one disadvantage in this code what do you think we lost Simplicity that's correct the",
    "start": "3248400",
    "end": "3255319"
  },
  {
    "text": "Simplicity for the caller is gone right especially so as a caller now I got to",
    "start": "3255319",
    "end": "3261200"
  },
  {
    "text": "send two parameters now you're going to say what if I send the big int two here",
    "start": "3261200",
    "end": "3267559"
  },
  {
    "start": "3264000",
    "end": "3495000"
  },
  {
    "text": "no sweetie you can't you cannot send two can I send zero no you cannot send zero right all this unnecessary complexity",
    "start": "3267559",
    "end": "3274480"
  },
  {
    "text": "well what can we do to eliminate that complexity well here's an idea why don't we change this to an implementation for",
    "start": "3274480",
    "end": "3280839"
  },
  {
    "text": "a second let's change this to an implementation for a second then we can write a function called factorial which",
    "start": "3280839",
    "end": "3288040"
  },
  {
    "text": "takes a number uh and then it can simply return factorial implementation of",
    "start": "3288040",
    "end": "3293760"
  },
  {
    "text": "number comma uh big int one so we can really move that into it and now we can",
    "start": "3293760",
    "end": "3300880"
  },
  {
    "text": "simply say call factorial with just one parameter rather than two what do you",
    "start": "3300880",
    "end": "3308119"
  },
  {
    "text": "think a notch better but you always have this one colleague who comes to you and",
    "start": "3308119",
    "end": "3313559"
  },
  {
    "text": "says can I still call it so if you don't want somebody to call it you don't want",
    "start": "3313559",
    "end": "3319240"
  },
  {
    "text": "them to ever call it what would you do make it uh encapsulate right the",
    "start": "3319240",
    "end": "3325839"
  },
  {
    "text": "other day somebody somebody said threaten him no you don't want to go to that extreme so you want to make it encapsulated well how do you make it",
    "start": "3325839",
    "end": "3333280"
  },
  {
    "text": "encapsulated oh write a class well wait a minute we don't need a class do do we",
    "start": "3333280",
    "end": "3339480"
  },
  {
    "text": "so here's an idea why don't we grab that function for a second and totally move",
    "start": "3339480",
    "end": "3345760"
  },
  {
    "text": "that function into this function itself and in other words because it's",
    "start": "3345760",
    "end": "3351760"
  },
  {
    "text": "functional style we can have functions within functions as well nothing stops us from doing that so we encapsulated",
    "start": "3351760",
    "end": "3359079"
  },
  {
    "text": "this function not through the class approach as we normally do but more of a functional Style by having the function",
    "start": "3359079",
    "end": "3365880"
  },
  {
    "text": "within this function itself as you see here so that's an example of how we can use the tail call optimization and tail",
    "start": "3365880",
    "end": "3372839"
  },
  {
    "text": "call of course is uh relying on the support by the Java compiler sorry the scolar compiler to do this the Java",
    "start": "3372839",
    "end": "3380160"
  },
  {
    "text": "compiler doesn't support this and as a result uh the bite code doesn't quite directly support this either so there is",
    "start": "3380160",
    "end": "3386839"
  },
  {
    "text": "some limitations to how far you can go with tail call optimization um if it is too uh you know uh big a function the",
    "start": "3386839",
    "end": "3395280"
  },
  {
    "text": "tail call optimization may not work to minute returns it says wait a minute this is too complex for me to analyze",
    "start": "3395280",
    "end": "3400920"
  },
  {
    "text": "I'm not going to you know do it and you can also it doesn't do what is called a trampoline call where a calls B and B",
    "start": "3400920",
    "end": "3408480"
  },
  {
    "text": "calls a back and forth but Scala also provides you a class called tail wck",
    "start": "3408480",
    "end": "3413599"
  },
  {
    "text": "which you can use to provide the tail call optimization ation in a trampoline as well and you can certainly do that I",
    "start": "3413599",
    "end": "3420119"
  },
  {
    "text": "was inspired by this by the way and also I know how trampolines are implemented in guuy so over the holidays I really",
    "start": "3420119",
    "end": "3426760"
  },
  {
    "text": "got excited I wanted to write a book on Java 8 Lambda Expressions because Java 8 is just around the corner so as I was",
    "start": "3426760",
    "end": "3432680"
  },
  {
    "text": "writing the book I said wouldn't it be so cool to show how to do tail call optimization in Java so the first thing",
    "start": "3432680",
    "end": "3438400"
  },
  {
    "text": "I did was I looked to see if Java supports it it doesn't right now so I decided to implement it and I kind of",
    "start": "3438400",
    "end": "3444839"
  },
  {
    "text": "set out to do what scholar does at the tail call uh you know tail recck classes",
    "start": "3444839",
    "end": "3450039"
  },
  {
    "text": "uh but I actually found out there's actually other better ways to do this in Java uh but this is another point I kind",
    "start": "3450039",
    "end": "3455480"
  },
  {
    "text": "of wanted to make is one of the reasons I really like to learn some of these languages is not that I would program in",
    "start": "3455480",
    "end": "3461839"
  },
  {
    "text": "these languages all the time but just programming in these languages gives us so many things we otherwise don't and",
    "start": "3461839",
    "end": "3468400"
  },
  {
    "text": "then when you go back to programming in the language you are you know currently program in you tend to kind of sit there",
    "start": "3468400",
    "end": "3473880"
  },
  {
    "text": "and figure out how to really bring in certain Concepts that usually people cannot do so easily in those languages",
    "start": "3473880",
    "end": "3480280"
  },
  {
    "text": "but being equipped with some of these things I think we really really are expanding our ability to program in",
    "start": "3480280",
    "end": "3486480"
  },
  {
    "text": "these other languages as well so it's a lot of fun to learn some of these things whether we program in them all the time",
    "start": "3486480",
    "end": "3491720"
  },
  {
    "text": "or not so let's talk about classes a little bit uh classes are cute in uh",
    "start": "3491720",
    "end": "3498039"
  },
  {
    "start": "3495000",
    "end": "3599000"
  },
  {
    "text": "schola let's talk about writing a class for a minute a public Class Car a",
    "start": "3498039",
    "end": "3504319"
  },
  {
    "text": "private int ear oh I forgot to put final I'm writing Java obviously right and then I would",
    "start": "3504319",
    "end": "3511200"
  },
  {
    "text": "say private in miles then of course public int get ear and then of course in",
    "start": "3511200",
    "end": "3517039"
  },
  {
    "text": "here we would say return ear and then public int um get miles and then of",
    "start": "3517039",
    "end": "3524319"
  },
  {
    "text": "course return miles uh and then of course we would write a set method isn't it public void set miles um this is one",
    "start": "3524319",
    "end": "3532599"
  },
  {
    "text": "of my most favorites this has to be named Miles also right as if there's no other variable on Earth and then this do",
    "start": "3532599",
    "end": "3539400"
  },
  {
    "text": "miles equals miles uh if I ever find this usually I strangle the person who writes it in my code right so we do all",
    "start": "3539400",
    "end": "3546839"
  },
  {
    "text": "of this in Java I know what you're thinking you're saying wait a minute I never do this in Java I only declare the",
    "start": "3546839",
    "end": "3555240"
  },
  {
    "text": "field then I gently right click on it and before I could blink my eyes the ID",
    "start": "3555240",
    "end": "3560760"
  },
  {
    "text": "vomits the rest of the code right so what we are saying is not only we want a language that you know is not doing the",
    "start": "3560760",
    "end": "3567960"
  },
  {
    "text": "right stuff but we also have to invent IDs that constantly vomit and then what do we have to do step over that vomit",
    "start": "3567960",
    "end": "3574160"
  },
  {
    "text": "all the time right it's like oh don't step on that right so why do we have to deal with this IDE vomits in the code",
    "start": "3574160",
    "end": "3580799"
  },
  {
    "text": "what if the language does these things for us automatically let's write this in scholar how many times do you make your",
    "start": "3580799",
    "end": "3587720"
  },
  {
    "text": "class nonpublic by the way not a whole lot so why not just say Class Car hey",
    "start": "3587720",
    "end": "3593599"
  },
  {
    "text": "can I make it public that's okay it's already public no need to say anymore a Val miles sorry Val ear is going to be",
    "start": "3593599",
    "end": "3601359"
  },
  {
    "text": "an integer VAR miles is going to be uh integer",
    "start": "3601359",
    "end": "3607039"
  },
  {
    "text": "also great what did we do we have written a class ah but I need a getter for ear",
    "start": "3607039",
    "end": "3616000"
  },
  {
    "text": "done I don't want a a Setter for ear okay no Setter for ear it's a Val I want",
    "start": "3616000",
    "end": "3622520"
  },
  {
    "text": "to get her n Setter for Miles done ah I want a Constructor for the car class",
    "start": "3622520",
    "end": "3628640"
  },
  {
    "text": "done I know you're in a panic mode now you're like what if all that is done what do I do go home right enjoy the",
    "start": "3628640",
    "end": "3635839"
  },
  {
    "text": "evening you don't have to write stupid code so you can simply say car 1 equals",
    "start": "3635839",
    "end": "3641039"
  },
  {
    "text": "new car year is 2013 miles is zero and you can say car 1. year print the car",
    "start": "3641039",
    "end": "3648359"
  },
  {
    "text": "value so the class is already written for you you don't have to write the class you don't have to write the",
    "start": "3648359",
    "end": "3654280"
  },
  {
    "text": "Constructor you don't have to write the Setters and get of course it doesn't follow the Java Bean convention you could if you wanted",
    "start": "3654280",
    "end": "3659720"
  },
  {
    "text": "to by putting annotations on it but all that is done for you what if I want to write some implementation here well in",
    "start": "3659720",
    "end": "3667359"
  },
  {
    "text": "Scala you don't really write classes in Scala you kind of write Constructor very",
    "start": "3667359",
    "end": "3673599"
  },
  {
    "text": "much like JavaScript in JavaScript you don't write classes you write Constructor and that becomes a factory",
    "start": "3673599",
    "end": "3680760"
  },
  {
    "text": "to create objects so very similar Concept in scholar like in JavaScript you are writing this little little",
    "start": "3680760",
    "end": "3686240"
  },
  {
    "text": "Constructor in fact if you will you can simply over here say uh created for",
    "start": "3686240",
    "end": "3691960"
  },
  {
    "text": "example notice I say created and in this case I'm going to say Val car 1 let's",
    "start": "3691960",
    "end": "3697720"
  },
  {
    "text": "say Val car 1 and equals new car 2013 and I'm going to specify zero and",
    "start": "3697720",
    "end": "3704720"
  },
  {
    "text": "you can see that Creator got called because it's a Constructor evaluation now I can write a function here Define",
    "start": "3704720",
    "end": "3710799"
  },
  {
    "text": "Drive which is going to take a distance I want to drive this car in and I could say my plus equals let's say the",
    "start": "3710799",
    "end": "3717760"
  },
  {
    "text": "distance and I could you know print out here for us to see I could say driving for example so in this case of course I",
    "start": "3717760",
    "end": "3724720"
  },
  {
    "text": "could say car 1. drive 10 and then and then of course I can print out car 1.",
    "start": "3724720",
    "end": "3731240"
  },
  {
    "text": "miles to see if the value of miles has been changed now notice how I put",
    "start": "3731240",
    "end": "3736400"
  },
  {
    "text": "semicolon here just to show that it's still possible to do that or you can say car one drive 10 and you can do that as",
    "start": "3736400",
    "end": "3743760"
  },
  {
    "text": "well so you can go SC up all the way to high ceremony or you can kind of start",
    "start": "3743760",
    "end": "3749359"
  },
  {
    "text": "removing a lot of stuff around it and that would be just fine as well and and Scola is quite happy with that uh to to",
    "start": "3749359",
    "end": "3756480"
  },
  {
    "text": "call it so again a lot of ceremony removed around the code you can focus on Essence so you're writing a primary",
    "start": "3756480",
    "end": "3763079"
  },
  {
    "text": "Constructor now of course a class could have multiple Constructors in that case you can write what are called auxilary",
    "start": "3763079",
    "end": "3768960"
  },
  {
    "text": "Constructors within this class or within this rather this primary Constructor and then these auxilary Constructors there",
    "start": "3768960",
    "end": "3775119"
  },
  {
    "text": "are some ground rules you have to follow in Scola the auxilary constructors are required to call back into the primary",
    "start": "3775119",
    "end": "3781440"
  },
  {
    "text": "Constructor and the primary Constructor is the only one that can call the base Constructor so it's kind of like a",
    "start": "3781440",
    "end": "3787760"
  },
  {
    "text": "funnel if you will it kind of takes all of these through the constructors the primary Constructor which then feeds to",
    "start": "3787760",
    "end": "3793279"
  },
  {
    "text": "the base class why because it removes duplication in code it removes a lot of",
    "start": "3793279",
    "end": "3799400"
  },
  {
    "text": "errors that we normally introduce in writing Constructors by requiring this kind of Channel through which we call",
    "start": "3799400",
    "end": "3805359"
  },
  {
    "text": "these methods and of course in schala classes are pure now what does it what",
    "start": "3805359",
    "end": "3811279"
  },
  {
    "text": "do I mean by they are pure oh oh um in the case of Scala by the way you don't",
    "start": "3811279",
    "end": "3816640"
  },
  {
    "text": "have static methods no don't leave the room yet it's much better than that why",
    "start": "3816640",
    "end": "3822160"
  },
  {
    "text": "because remember what we talk about in programming we say separation of concern and we all say Amen brother that's great",
    "start": "3822160",
    "end": "3828880"
  },
  {
    "text": "we have to have separation of concern and then what do we do we sit down and say class and then we put instance and",
    "start": "3828880",
    "end": "3834760"
  },
  {
    "text": "static in it and then instance method and static methods what is that separation of all the concerns in one",
    "start": "3834760",
    "end": "3840839"
  },
  {
    "text": "place right so that is not a good separation of concern at all why because we are dealing with instance related",
    "start": "3840839",
    "end": "3846480"
  },
  {
    "text": "stuff and class related stuff in one place and that becomes a pain in the neck to deal with go ahead please I'm",
    "start": "3846480",
    "end": "3851880"
  },
  {
    "text": "sorry I wanted to absolutely after the death right so the question is if I have",
    "start": "3851880",
    "end": "3857079"
  },
  {
    "text": "it right here you're saying no oh pardon me over here no yes there with that also",
    "start": "3857079",
    "end": "3864160"
  },
  {
    "text": "sorry so here too so this is basically the entire body is part of a Constructor",
    "start": "3864160",
    "end": "3870319"
  },
  {
    "text": "so in other words here okay I see absolutely the entire body the the entire body is a Constructor except",
    "start": "3870319",
    "end": "3877079"
  },
  {
    "text": "there are parts of it that get stripped out as the members of the instance that you're dealing with pearl uh like a",
    "start": "3877079",
    "end": "3884160"
  },
  {
    "text": "pearl in a nice way yeah",
    "start": "3884160",
    "end": "3890200"
  },
  {
    "text": "um so again you know if you ask me I would not do that right right so there's",
    "start": "3890200",
    "end": "3897039"
  },
  {
    "text": "a difference between can I and should I so there's a lot of can I but should I",
    "start": "3897039",
    "end": "3902079"
  },
  {
    "text": "is usually not an answer right so so that that's something you wouldn't exercise normally um so the the real",
    "start": "3902079",
    "end": "3909279"
  },
  {
    "text": "beauty of this is so static things are really evil to put in a class there's",
    "start": "3909279",
    "end": "3914680"
  },
  {
    "text": "another problem also how do you create a Singleton in",
    "start": "3914680",
    "end": "3920799"
  },
  {
    "text": "Java private Constructor you could write a private Constructor now the minute you",
    "start": "3920799",
    "end": "3926000"
  },
  {
    "text": "write a private Constructor uh one of your colleague comes to you and says hey look at these two objects I created",
    "start": "3926000",
    "end": "3931400"
  },
  {
    "text": "you're like darn it how did you do that oh I use reflection to do it and now you're like okay let me go plug that",
    "start": "3931400",
    "end": "3937520"
  },
  {
    "text": "hole right and then tomorrow you walk around proudly and say now you cannot",
    "start": "3937520",
    "end": "3942880"
  },
  {
    "text": "and he says what about these two objects darn it where did you get those from oh I serialized and deserialized it darn it",
    "start": "3942880",
    "end": "3949119"
  },
  {
    "text": "let me go fix it by the way there's a name for this this pattern is called Scotch tape driven development you put a",
    "start": "3949119",
    "end": "3955000"
  },
  {
    "text": "little tape on on it it peels a little bit tomorrow you put more tapes on it well it turns out by the way Singleton",
    "start": "3955000",
    "end": "3961160"
  },
  {
    "text": "is a pattern you take five minutes to learn and ear to get it right and in fact it's so bad that Java figured a way",
    "start": "3961160",
    "end": "3968160"
  },
  {
    "text": "to solve it a right way to do Singleton in Java it's really makes me cringe is to write an enum because enums Implement",
    "start": "3968160",
    "end": "3975440"
  },
  {
    "text": "single T fairly well but that kind of smells isn't it what enum to write a single ton well what is the reason why",
    "start": "3975440",
    "end": "3982839"
  },
  {
    "text": "we prefer that because singl ton is so hard to do it's better to leave it to",
    "start": "3982839",
    "end": "3988079"
  },
  {
    "text": "the class loader to do it in the first place so scholar says all right if that's the right thing to do why don't",
    "start": "3988079",
    "end": "3994039"
  },
  {
    "text": "we provide it for you so notice what I'm going to do in this case I'm going to have a class called car here let's just",
    "start": "3994039",
    "end": "4000240"
  },
  {
    "text": "remove all of that for a minute I'm going to create an object called car now notice in this case in the case of Scala",
    "start": "4000240",
    "end": "4007920"
  },
  {
    "text": "you can define a single T using a word object now object basically indicates a",
    "start": "4007920",
    "end": "4013680"
  },
  {
    "text": "single ton now it so turns out you can just have a single T by itself or you",
    "start": "4013680",
    "end": "4019799"
  },
  {
    "text": "can also have a single t with the same name as a class and if you do by the way",
    "start": "4019799",
    "end": "4025359"
  },
  {
    "text": "this Singleton has a special name it's called a companion object a companion object has full access to the object for",
    "start": "4025359",
    "end": "4033000"
  },
  {
    "text": "which it's companion to the class for which it's companion to so in this case I'm going to Define an a method here",
    "start": "4033000",
    "end": "4039119"
  },
  {
    "text": "we'll call it as create for a minute and the create is going to take a ear let's",
    "start": "4039119",
    "end": "4044200"
  },
  {
    "text": "say as a parameter and then I'm going to Simply say return new car given ER and",
    "start": "4044200",
    "end": "4049760"
  },
  {
    "text": "zero so notice I can simply say car one here and I can simply in this case say",
    "start": "4049760",
    "end": "4056240"
  },
  {
    "text": "car. create and then I can say 2013 to create a car object now in this case of",
    "start": "4056240",
    "end": "4062359"
  },
  {
    "text": "course I can print car 1. ear and I can also print here car 1. miles to know",
    "start": "4062359",
    "end": "4069039"
  },
  {
    "text": "what the value of miles is and so we kind of wrote a wrapper around this now",
    "start": "4069039",
    "end": "4074480"
  },
  {
    "text": "car. cre essentially is like a factory that is creating the instance for us but",
    "start": "4074480",
    "end": "4080039"
  },
  {
    "text": "the car itself becomes a Singleton in this case we can go a step further with this I can call this a little bit",
    "start": "4080039",
    "end": "4086720"
  },
  {
    "text": "different as apply and then I can then call this as apply so little apply",
    "start": "4086720",
    "end": "4092680"
  },
  {
    "text": "method well the word apply kind of comes from functional programming where we are applying a function meaning we're",
    "start": "4092680",
    "end": "4098238"
  },
  {
    "text": "invoking a function we are executing a function now a little difference but where does this take us well the apply",
    "start": "4098239",
    "end": "4105120"
  },
  {
    "text": "has special meaning in Scala we can simply drop it in this case and this kind of becomes more like a factory if",
    "start": "4105120",
    "end": "4112679"
  },
  {
    "text": "you will so when you just apply this method without any notation it",
    "start": "4112679",
    "end": "4118080"
  },
  {
    "text": "implicitly calls an apply method and the apply method has some special meaning now if you understand the apply method a",
    "start": "4118080",
    "end": "4124679"
  },
  {
    "text": "little bit now this changes the way you look at things if you have an array of objects or a list of objects if you will",
    "start": "4124679",
    "end": "4131238"
  },
  {
    "text": "so numbers equals let's say list of 1 2 3 4 and five a bunch of values I want to",
    "start": "4131239",
    "end": "4137440"
  },
  {
    "text": "get the first element how do I get the first element numbers a parenthesis zero",
    "start": "4137440",
    "end": "4143199"
  },
  {
    "text": "gives you the first element you kind of wonder why do they have parenthesis instead of the fancy square bracket now",
    "start": "4143199",
    "end": "4149318"
  },
  {
    "text": "you know the answer it's because it's implicitly calling the apply method under the her and as a result we are",
    "start": "4149319",
    "end": "4156480"
  },
  {
    "text": "using a short form notation for doing s certain things so a lot of these hidden gems are in schola and and takes a bit",
    "start": "4156480",
    "end": "4163080"
  },
  {
    "text": "of getting used to but once you kind of understand the nuances of what's happening it's much easier to write this",
    "start": "4163080",
    "end": "4168758"
  },
  {
    "text": "language itself um so we talked about quite an interesting set of features already but I want to talk just a little",
    "start": "4168759",
    "end": "4175880"
  },
  {
    "text": "bit more about function values we used function values mostly but it would be",
    "start": "4175880",
    "end": "4181159"
  },
  {
    "text": "nice to know how to receive them and process it and then I'll talk about traits and chaining traits uh as the",
    "start": "4181159",
    "end": "4186880"
  },
  {
    "text": "last two things I want to talk about so let's talk about uh function values for a minute let's say we have these uh",
    "start": "4186880",
    "end": "4194000"
  },
  {
    "text": "values of prices given to us so prices equals and then let's say we have a",
    "start": "4194000",
    "end": "4199120"
  },
  {
    "text": "bunch of prices right so uh 10 15 20 25 uh 30 35 and 40 so our task on hand uh",
    "start": "4199120",
    "end": "4208320"
  },
  {
    "text": "we are told to go total all these price values you say I can do that so let's go",
    "start": "4208320",
    "end": "4214000"
  },
  {
    "text": "ahead and write a total prices uh and total prices takes prices as a parameter",
    "start": "4214000",
    "end": "4219400"
  },
  {
    "text": "this is going to be a list of integer values given to us and what should I do within this function let's say total",
    "start": "4219400",
    "end": "4225400"
  },
  {
    "text": "equal to zero we could use a fold left method also if you wanted to right we could say fold left uh or reduce method",
    "start": "4225400",
    "end": "4232920"
  },
  {
    "text": "we could use all of that but let's keep it simple here for a minute uh to keep our focus on the other part we want to",
    "start": "4232920",
    "end": "4238679"
  },
  {
    "text": "deal with so I'm going to return the total from here so in this case I would say price in prices and what do I want",
    "start": "4238679",
    "end": "4245840"
  },
  {
    "text": "to do with the price values we could simply say total plus equals the price value itself let's go ahead and call",
    "start": "4245840",
    "end": "4252679"
  },
  {
    "text": "this method to make sure it's working so total price and I'm going to send the prices values",
    "start": "4252679",
    "end": "4258199"
  },
  {
    "text": "over here in fact let's go ahead and move these prices below here so the context is very close to where we are",
    "start": "4258199",
    "end": "4264080"
  },
  {
    "text": "using it there we go so that is basically a value being totaled so you",
    "start": "4264080",
    "end": "4269360"
  },
  {
    "text": "get this done very quickly and the requirement given to you was write a",
    "start": "4269360",
    "end": "4274440"
  },
  {
    "text": "function that totals all the prices so you're done well as the Fate may have it your colleague comes to you and says I",
    "start": "4274440",
    "end": "4281120"
  },
  {
    "text": "also need by the way in addition to this another function that only totals prices",
    "start": "4281120",
    "end": "4287640"
  },
  {
    "text": "greater than 25 and you ask your colleague do you mean total prices over",
    "start": "4287640",
    "end": "4294800"
  },
  {
    "text": "25 and your colleague says yep that's exactly what I want so you're sitting there and wondering how do I write that",
    "start": "4294800",
    "end": "4301360"
  },
  {
    "text": "function in addition to this function and you stare at this for a minute and then you tell yourselves there's a",
    "start": "4301360",
    "end": "4307800"
  },
  {
    "text": "reason why they created copy and paste right I mean if nobody should use it why would they create it right so you copy",
    "start": "4307800",
    "end": "4314639"
  },
  {
    "text": "in fact this is so compelling they gave shortcut keys how nice is that right contrl c contrl v right and so you say",
    "start": "4314639",
    "end": "4322600"
  },
  {
    "text": "total pric is over 25 and then simply you say if price is greater than 25 then",
    "start": "4322600",
    "end": "4330280"
  },
  {
    "text": "total otherwise not so you got that implemented very quickly well unfortunately your colleague comes to",
    "start": "4330280",
    "end": "4336080"
  },
  {
    "text": "you and says I also need another function the totals pric is under 25",
    "start": "4336080",
    "end": "4342120"
  },
  {
    "text": "also now you know you're in trouble because you copied and pasted the code one more time already and you know that",
    "start": "4342120",
    "end": "4348719"
  },
  {
    "text": "copying and pasting code a third time is criminally negligent but nobody is",
    "start": "4348719",
    "end": "4354560"
  },
  {
    "text": "looking right now so you copy and paste it one more time and this becomes under 25 right and of course in this code you",
    "start": "4354560",
    "end": "4361920"
  },
  {
    "text": "say under 25 and you get this working really quickly so you could leave but as you leave the building your",
    "start": "4361920",
    "end": "4370120"
  },
  {
    "text": "guilt kicks in because you know that this is not what you really signed up for right this is really bad coding so",
    "start": "4370120",
    "end": "4377440"
  },
  {
    "text": "you pull over to the nearest coffee shop you're frantically trying to refactor this but as fate may have it bunch of",
    "start": "4377440",
    "end": "4383239"
  },
  {
    "text": "your friends show up and say what are you doing and before you could close the lid they take a look at it and they get to know your dark side right and they no",
    "start": "4383239",
    "end": "4390800"
  },
  {
    "text": "longer want to hang out with you and they don't return your phone calls anymore how really life becomes right no",
    "start": "4390800",
    "end": "4395960"
  },
  {
    "text": "we never want to do that we want our geek friends so let's step back for a minute let's get back to the code where",
    "start": "4395960",
    "end": "4401040"
  },
  {
    "text": "we were and then reind the time and this is when we have this one function on our hand and this one function is working",
    "start": "4401040",
    "end": "4408719"
  },
  {
    "text": "right so our colleague comes to you again and says hey I need a favor from you I need one more function from you",
    "start": "4408719",
    "end": "4415520"
  },
  {
    "text": "what do you need I need total prices over 25 oh that's what you want yes well",
    "start": "4415520",
    "end": "4421639"
  },
  {
    "text": "I'll get back to you so we're sitting down and saying how do we really make this work well a little bit of",
    "start": "4421639",
    "end": "4427480"
  },
  {
    "text": "refactoring is uh needed so let's not do that right now let's instead go back",
    "start": "4427480",
    "end": "4433159"
  },
  {
    "text": "here and say well I want to Total values but it turns out that I don't want to",
    "start": "4433159",
    "end": "4438360"
  },
  {
    "text": "Total all the values I want to Total only select values sometimes I want to select all the values that's perfectly",
    "start": "4438360",
    "end": "4444320"
  },
  {
    "text": "fine so I'm going to write a selector now what is this thing called selector",
    "start": "4444320",
    "end": "4449400"
  },
  {
    "text": "that I'm specifying here well a selector by the way is going to select now what",
    "start": "4449400",
    "end": "4455040"
  },
  {
    "text": "is he what are you going to give to him to select a price which is an integer and",
    "start": "4455040",
    "end": "4461679"
  },
  {
    "text": "what is he going to give you back a Boolean see how easy it was to",
    "start": "4461679",
    "end": "4467199"
  },
  {
    "text": "write that so a selector is just a function so it's a function why notice",
    "start": "4467199",
    "end": "4474440"
  },
  {
    "text": "prices colon int square bracket list square bracket int so prices is an",
    "start": "4474440",
    "end": "4480719"
  },
  {
    "text": "object of type list selector is an object of type function how do we know",
    "start": "4480719",
    "end": "4486159"
  },
  {
    "text": "notice the mapping which we specify here right after all a function is a mapping of an input to an output so it is just a",
    "start": "4486159",
    "end": "4493880"
  },
  {
    "text": "mapping of a selector that that's all we have so now that we specified it we are simply saying if the selector is",
    "start": "4493880",
    "end": "4500719"
  },
  {
    "text": "accepting the price value then total otherwise no so now we can come back",
    "start": "4500719",
    "end": "4506199"
  },
  {
    "text": "here and say uh I want to take a value as an input by the way price and I want",
    "start": "4506199",
    "end": "4512239"
  },
  {
    "text": "to accept everything given to me so I'm going to Simply say true as a return value so this pretty much accepts all",
    "start": "4512239",
    "end": "4519679"
  },
  {
    "text": "the value given to it now your colleague says I want a function that totals all the values which are greater than 25 you",
    "start": "4519679",
    "end": "4527560"
  },
  {
    "text": "tell your colleague to go write it himself or herself so price is going to Simply say price is greater than 25 and",
    "start": "4527560",
    "end": "4535239"
  },
  {
    "text": "then you can say go ahead and only total value is greater than 25 now if you want a a value which is only less than 25 not",
    "start": "4535239",
    "end": "4543040"
  },
  {
    "text": "a problem you can simply write that and say less than 25 and you can simply leverage that code we wrote so in other",
    "start": "4543040",
    "end": "4549840"
  },
  {
    "text": "words we made total prices a higher order function in other words the total",
    "start": "4549840",
    "end": "4555600"
  },
  {
    "text": "prices says not only will I accept a value like I did before but I will also accept other functions like I uh in this",
    "start": "4555600",
    "end": "4562760"
  },
  {
    "text": "like in this case uh and if you really think about this what did we just do we quietly implemented the strategy pattern",
    "start": "4562760",
    "end": "4569840"
  },
  {
    "text": "look at the difference in Java if you want to use the strategy pattern you hold a corporate design meeting here it",
    "start": "4569840",
    "end": "4575080"
  },
  {
    "text": "just works as simple right so that's a very lightweight approach to implement a strategy you're not really forcing",
    "start": "4575080",
    "end": "4581360"
  },
  {
    "text": "yourself to create interfaces and hierarchy of classes it just works so that is an example of how you could use",
    "start": "4581360",
    "end": "4587480"
  },
  {
    "text": "a more of a functional style of coding with this said let's talk about yet",
    "start": "4587480",
    "end": "4592719"
  },
  {
    "text": "another oh please yes please yes yes you can do that as well so you could use default parameters if",
    "start": "4592719",
    "end": "4598800"
  },
  {
    "text": "you wanted to uh you could do that or you can just overload it either way is fine yeah absolutely function default",
    "start": "4598800",
    "end": "4605239"
  },
  {
    "text": "vales functions can have default values as well right so in here",
    "start": "4605239",
    "end": "4612040"
  },
  {
    "text": "right so equal to you won't put Boolean but you'd have to put a yeah function actually put a function itself in this",
    "start": "4612040",
    "end": "4618639"
  },
  {
    "text": "case yeah absolutely um so given this let's talk about some other feature that",
    "start": "4618639",
    "end": "4624800"
  },
  {
    "text": "we want to implement um let's talk about multiple",
    "start": "4624800",
    "end": "4631159"
  },
  {
    "text": "inheritance uh you're thinking no let's not well how many of you have implemented multiple inheritance before",
    "start": "4631159",
    "end": "4637320"
  },
  {
    "text": "oh wow you all have dark past right you all programmed in C++ oh I mean Secret I",
    "start": "4637320",
    "end": "4645159"
  },
  {
    "text": "would say that's a language I really like still but uh but how many of you who raise the an want to go back and do",
    "start": "4645159",
    "end": "4651920"
  },
  {
    "text": "more multiple inheritance tonight not a single person raises the hand right why",
    "start": "4651920",
    "end": "4657960"
  },
  {
    "text": "because multiple inheritance is like a gorilla it is cute when you see it in the zoo but you don't bring it home",
    "start": "4657960",
    "end": "4664080"
  },
  {
    "text": "right it topples your furniture you know CA castes Havoc right so well to be fair",
    "start": "4664080",
    "end": "4670080"
  },
  {
    "text": "the problem is not with multiple inheritance it's with way job I'm sorry C++ implemented it let's get to that in",
    "start": "4670080",
    "end": "4676159"
  },
  {
    "text": "a few minutes but let's get back to some other concept let's say for a minute we are writing a class and the class is",
    "start": "4676159",
    "end": "4682560"
  },
  {
    "text": "called human and the human has a name over here we'll give a string name we'll",
    "start": "4682560",
    "end": "4687600"
  },
  {
    "text": "put a Val and then of course I want to say here Define listen and I'm going to",
    "start": "4687600",
    "end": "4693360"
  },
  {
    "text": "say listen is going to Simply print out print line and I'm going to say I am uh",
    "start": "4693360",
    "end": "4699280"
  },
  {
    "text": "we'll put a name here uh listening right uh so you could use uh you know news",
    "start": "4699280",
    "end": "4705000"
  },
  {
    "text": "facilities to put that into a little dollar symbol but I'm not going to go there so let's create a a variable Sam",
    "start": "4705000",
    "end": "4711639"
  },
  {
    "text": "equals new human and then we'll create a Sam variable and then we'll say sam. Len",
    "start": "4711639",
    "end": "4717600"
  },
  {
    "text": "so so here we go we have a little human class with the listen method but wait a minute what does the listen method have",
    "start": "4717600",
    "end": "4724719"
  },
  {
    "text": "to do with anything who listens by the",
    "start": "4724719",
    "end": "4729520"
  },
  {
    "text": "way Sam Sam listens there was actually one guy in the front row in a couple of",
    "start": "4730120",
    "end": "4735280"
  },
  {
    "text": "weeks ago and he said wife and we all kind of looked at him and laughed and",
    "start": "4735280",
    "end": "4740360"
  },
  {
    "text": "then after a few minutes he said well I've been married for 2 weeks it's like okay you're still in that honeymoon phase right you will know better very",
    "start": "4740360",
    "end": "4746800"
  },
  {
    "text": "soon we all have spousal not we all have um very contextual hearing right um I I",
    "start": "4746800",
    "end": "4754639"
  },
  {
    "text": "always pretend that I hear my lovely wife she's she's wonderful and she talks to me all the time when I'm working in",
    "start": "4754639",
    "end": "4760639"
  },
  {
    "text": "the kitchen and life was in harmony right she says you're so nice having you in the kitchen look at you you're",
    "start": "4760639",
    "end": "4766719"
  },
  {
    "text": "working and listening to me well except one day there was suddenly a silence and",
    "start": "4766719",
    "end": "4771800"
  },
  {
    "text": "I kind of looked up and she was staring at me and I said is there a problem and she said I asked you a question and you",
    "start": "4771800",
    "end": "4779000"
  },
  {
    "text": "haven't answered it and I'm not going to repeat the question for you but I need an answer I knew I was in trouble right",
    "start": "4779000",
    "end": "4784760"
  },
  {
    "text": "so I had to really work hard to get the question out of her before I could answer but now she's gotten better the other day I was working in the kitchen",
    "start": "4784760",
    "end": "4790760"
  },
  {
    "text": "nodding my head and working away and and suddenly you know there's a thing there's an email I started replying to",
    "start": "4790760",
    "end": "4796800"
  },
  {
    "text": "email and halfway through it I realized she sent me the email from the kitchen and she said that's a way I get an",
    "start": "4796800",
    "end": "4802719"
  },
  {
    "text": "answer from you so I got busted right so we all have this selective hearing so from time to time uh but one who listens",
    "start": "4802719",
    "end": "4810000"
  },
  {
    "text": "by the way is a friend would wouldn't you agree a friend listens to you right so a friend listens to you but we kind",
    "start": "4810000",
    "end": "4815760"
  },
  {
    "text": "of put this listen in the human assuming that the humans do listen uh but there's one friend who always listens to you and",
    "start": "4815760",
    "end": "4822800"
  },
  {
    "text": "never speaks back to you dogs how awesome it is to have a dog but",
    "start": "4822800",
    "end": "4828760"
  },
  {
    "text": "how do you do that hey I want to inherit the dog from Human because I have the Len method in the human dogs don't like",
    "start": "4828760",
    "end": "4835159"
  },
  {
    "text": "it right so what's the Java answer to solving this",
    "start": "4835159",
    "end": "4840520"
  },
  {
    "text": "problem a mammal H only a stretch uh inter oh interface we have a",
    "start": "4840520",
    "end": "4848880"
  },
  {
    "text": "friendable interface now we have a friendable interface with the listen method but now we have a problem right",
    "start": "4848880",
    "end": "4855400"
  },
  {
    "text": "human has a listen and dog has a listen which is duplicated how do we remove the duplication",
    "start": "4855400",
    "end": "4861719"
  },
  {
    "text": "now so we create an abstract base class right and but how do you reuse the",
    "start": "4861719",
    "end": "4867040"
  },
  {
    "text": "abstract Base Class so we have an interface in the top the two classes will then delegate to the inter abstract",
    "start": "4867040",
    "end": "4873679"
  },
  {
    "text": "based class and that's a lot of work isn't it",
    "start": "4873679",
    "end": "4878840"
  },
  {
    "text": "and how about microphone microphone a microphone listens to you worse and worse yeah it could be yeah it get can",
    "start": "4878840",
    "end": "4886320"
  },
  {
    "text": "get worse so if that is the pattern we're going to follow why can't the",
    "start": "4886320",
    "end": "4891639"
  },
  {
    "text": "language do it for us automatically so we don't have to put the effort to do it let's see how so I'm going to create a",
    "start": "4891639",
    "end": "4897960"
  },
  {
    "text": "trait so what is a trait a trait is kind of like an interface to begin with so",
    "start": "4897960",
    "end": "4904239"
  },
  {
    "text": "trait friend and my trait is going to have a lizen method a trade is an",
    "start": "4904239",
    "end": "4910080"
  },
  {
    "text": "interface except if it has an implementation then it's buy 1 get one free offer right there's an interface",
    "start": "4910080",
    "end": "4916880"
  },
  {
    "text": "called for the trait and there's also an abstract Base Class being created for it also at the same time right so we got",
    "start": "4916880",
    "end": "4924040"
  },
  {
    "text": "two of the things together so given this I'm going to say extends from friend so",
    "start": "4924040",
    "end": "4930639"
  },
  {
    "text": "in this case of course I'm saying oh this of course should have a name so name of is going to be a name which is",
    "start": "4930639",
    "end": "4938000"
  },
  {
    "text": "going to be a string and I haven't given a value to it at this time so it worked",
    "start": "4938000",
    "end": "4943120"
  },
  {
    "text": "let's go a step further we we say class animal and the class animal has a name",
    "start": "4943120",
    "end": "4949320"
  },
  {
    "text": "so it's got a name here a class dog which overrides override a name which is",
    "start": "4949320",
    "end": "4957360"
  },
  {
    "text": "a string and it extends from animal and let's go ahead and say this contains the",
    "start": "4957360",
    "end": "4964560"
  },
  {
    "text": "value uh name so let's start with this so Val buddy equals new dog and I'm",
    "start": "4964560",
    "end": "4972520"
  },
  {
    "text": "going to say buddy and buddy do listen well that doesn't work why",
    "start": "4972520",
    "end": "4979239"
  },
  {
    "text": "because dog is not a friend yet let's uh with friend so it's a little bit of a",
    "start": "4979239",
    "end": "4984960"
  },
  {
    "text": "you know inconsistency here because human doesn't inherit from anything we use extends because dog inherits from",
    "start": "4984960",
    "end": "4992280"
  },
  {
    "text": "animal already we use the word with so notice how we were able to bring that",
    "start": "4992280",
    "end": "4999560"
  },
  {
    "text": "lizen uh into this fold by simply using",
    "start": "4999560",
    "end": "5004679"
  },
  {
    "text": "uh with friend as a trait so what did it do really what it did was it created an",
    "start": "5004679",
    "end": "5010480"
  },
  {
    "text": "interface called friend it created an abstract based class called friend so",
    "start": "5010480",
    "end": "5015520"
  },
  {
    "text": "you got two things now a friend interface and a friend abstract based class it injected into human class the",
    "start": "5015520",
    "end": "5023800"
  },
  {
    "text": "reference to the abstract friend implementation and it also injected into",
    "start": "5023800",
    "end": "5029719"
  },
  {
    "text": "the dog class the abstract based class calls into it in other words it mixed it",
    "start": "5029719",
    "end": "5034840"
  },
  {
    "text": "into those two automatically so the method is available on both these without we having to duplicate it so far",
    "start": "5034840",
    "end": "5041560"
  },
  {
    "text": "so good let's uh continue yep go ahead please can you do M ah the answer is yes",
    "start": "5041560",
    "end": "5047560"
  },
  {
    "text": "but let's come back to that in just a few minutes please the name supposed to be the same yes so in other words in",
    "start": "5047560",
    "end": "5053880"
  },
  {
    "text": "this particular case it says you are putting a constraint that this can be",
    "start": "5053880",
    "end": "5059000"
  },
  {
    "text": "mixed in only into classes that have a name property so it's a constraint you",
    "start": "5059000",
    "end": "5064400"
  },
  {
    "text": "are propagating you're saying I'm a trait but I will only accept being mixed",
    "start": "5064400",
    "end": "5070000"
  },
  {
    "text": "in when you have this property brought in so the friend doesn't have a name the human has a name but there you said oh",
    "start": "5070000",
    "end": "5077600"
  },
  {
    "text": "by the way I'll only get mixed in if you have that name not otherwise please not quite the same by the way so",
    "start": "5077600",
    "end": "5084719"
  },
  {
    "text": "the question is is this very similar to the default methods being introduced in Java 8 uh not quite exactly the same uh",
    "start": "5084719",
    "end": "5091719"
  },
  {
    "text": "because the rules are fairly different for how default all methods in Java are implemented compared to this uh you",
    "start": "5091719",
    "end": "5097639"
  },
  {
    "text": "could say that there's a overlap between them but they're not a one-on-one substitute for each other uh the default",
    "start": "5097639",
    "end": "5103480"
  },
  {
    "text": "methods were really introduced in Java 8 to evolve interfaces that already exist",
    "start": "5103480",
    "end": "5108520"
  },
  {
    "text": "for the past 15 years uh the intent here is very drastically different uh so there's a bit of an overlapping area but",
    "start": "5108520",
    "end": "5115119"
  },
  {
    "text": "the intent is very different um this kind of takes you into The Decorator pattern area we'll see in a few minutes",
    "start": "5115119",
    "end": "5120920"
  },
  {
    "text": "the default method quite doesn't solve that particular uh problem good good question though uh let's look at this",
    "start": "5120920",
    "end": "5126760"
  },
  {
    "text": "one more time let's say for a second I create yet another class over here let's",
    "start": "5126760",
    "end": "5131880"
  },
  {
    "text": "say a class that I'm going to create here is the class called cat so I've created a CL cat class and in this case",
    "start": "5131880",
    "end": "5139040"
  },
  {
    "text": "of course I'm going to create a cat so let's uh create Alf which is a cat scary",
    "start": "5139040",
    "end": "5144159"
  },
  {
    "text": "cat and this is going to be I'm going to call al. lizen will this",
    "start": "5144159",
    "end": "5151198"
  },
  {
    "text": "work uh no that's because cats are not friends right in fact cats kind of look",
    "start": "5151520",
    "end": "5158000"
  },
  {
    "text": "at you and say why are you back from work why don't you put some more food around and go back to work right anybody",
    "start": "5158000",
    "end": "5163119"
  },
  {
    "text": "with a cat is is your cat friendly very friendly cats are like I'm I'm picky who",
    "start": "5163119",
    "end": "5171520"
  },
  {
    "text": "their friend right uh Ron I'm sorry to deliver this news to you you're in",
    "start": "5171520",
    "end": "5177119"
  },
  {
    "text": "denial but you're a nice guy you've been really interactive sitting here so I'm going to try something but no promises",
    "start": "5177119",
    "end": "5184080"
  },
  {
    "text": "okay but I'll try Ron Ron I'll try so app absolutely absolutely I'll try but",
    "start": "5184080",
    "end": "5190080"
  },
  {
    "text": "no no promises so Al is a lost cost so let's not even mess with Al so Ron's cat",
    "start": "5190080",
    "end": "5196320"
  },
  {
    "text": "would you share your cat's name with us Ron uh spell for me f i",
    "start": "5196320",
    "end": "5204679"
  },
  {
    "text": "g no wonder okay so cat um",
    "start": "5206800",
    "end": "5216119"
  },
  {
    "text": "okay dot listen sorry we",
    "start": "5218239",
    "end": "5223880"
  },
  {
    "text": "tried but but one One Last Hope one last",
    "start": "5223880",
    "end": "5228920"
  },
  {
    "text": "hope so what did we do cats are evil by the way but Ron's cat is",
    "start": "5233639",
    "end": "5240960"
  },
  {
    "text": "special in fact Ron would you say it's one of one of a kind very much absolutely so in fact it",
    "start": "5240960",
    "end": "5247159"
  },
  {
    "text": "really is if you look at what type the cat object is it's not an object of cat type see but the issue is she doesn't",
    "start": "5247159",
    "end": "5254400"
  },
  {
    "text": "listen to me I'm supposed to listen to her oh so in this case of course you have an",
    "start": "5254400",
    "end": "5261080"
  },
  {
    "text": "anonymous inner class and this Anonymous inner class extends Cat by the way and",
    "start": "5261080",
    "end": "5268320"
  },
  {
    "text": "implements friend so it is one of its own kind uh cats are not friendly but",
    "start": "5268320",
    "end": "5274199"
  },
  {
    "text": "draw cat is special so not only can you mix in a trait at the class level like you did in the dog case and human case",
    "start": "5274199",
    "end": "5281280"
  },
  {
    "text": "you can even inject it at the instance level if you wanted to right so so this gives a pretty powerful uh traits and",
    "start": "5281280",
    "end": "5289040"
  },
  {
    "text": "all this is compiled time uh programming in this case of course but you're able to extend the behavior so one last",
    "start": "5289040",
    "end": "5295480"
  },
  {
    "text": "example I want to give you goes back to your earlier question yeah go ahead please how do you refer to the type uh",
    "start": "5295480",
    "end": "5301639"
  },
  {
    "text": "how do you refer to the type you can refer to it as a cat you can refer to as a",
    "start": "5301639",
    "end": "5306800"
  },
  {
    "text": "friend because it's Anonymous so you can only refer to them as one of these two cat or a friend",
    "start": "5306800",
    "end": "5313678"
  },
  {
    "text": "please two instances same they could be two different types as well uh we we're",
    "start": "5315960",
    "end": "5322119"
  },
  {
    "text": "going to see mixing of multiple things in a few minutes we'll get to that somebody had a question here I think can",
    "start": "5322119",
    "end": "5327719"
  },
  {
    "text": "you can demand um you should never demand",
    "start": "5327719",
    "end": "5334920"
  },
  {
    "text": "anything to a cat but nevertheless uh the answer is yes so if a if a if a",
    "start": "5334920",
    "end": "5340960"
  },
  {
    "text": "function requires a friend you can send this cat to that uh Ron's cat can be sent but not cats in general let's do",
    "start": "5340960",
    "end": "5347719"
  },
  {
    "text": "that real quick before we go to the next example so for example if I said over here just as a quick note if I said uh",
    "start": "5347719",
    "end": "5354960"
  },
  {
    "text": "you know uh seek help uh from a friend and let's say friend over here and in",
    "start": "5354960",
    "end": "5361320"
  },
  {
    "text": "this case of course I'm going to Simply call friend listen right so so that's all I've done",
    "start": "5361320",
    "end": "5367199"
  },
  {
    "text": "here let's remove this listen let's remove this listen here and then let's also get rid of Alf so over here I could",
    "start": "5367199",
    "end": "5375440"
  },
  {
    "text": "say seek help Sam so obviously I'm sending Sam to the method I can say seek",
    "start": "5375440",
    "end": "5380560"
  },
  {
    "text": "help uh buddy and of course seek help Ron's cat as well as you can see we",
    "start": "5380560",
    "end": "5386600"
  },
  {
    "text": "could send send that uh but I cannot send a cat in general so seek help new",
    "start": "5386600",
    "end": "5392280"
  },
  {
    "text": "cat um oh my I cannot do that right so that's not allowed because cats are not",
    "start": "5392280",
    "end": "5398199"
  },
  {
    "text": "friends um so let's get a step further uh we looked at traits but let's get",
    "start": "5398199",
    "end": "5403679"
  },
  {
    "text": "back to the problem with multiple inheritance the problem with multiple inheritance is twofold right what if methods collide with each other that's a",
    "start": "5403679",
    "end": "5410520"
  },
  {
    "text": "pain the other problem is the diamond problem meaning that you have a base and then they have common base how do you",
    "start": "5410520",
    "end": "5417159"
  },
  {
    "text": "deal with it what if the interfaces decide to collaborate rather than Collide then that wouldn't be a problem",
    "start": "5417159",
    "end": "5423159"
  },
  {
    "text": "isn't it so so the way this works is the traits actually line up next to each",
    "start": "5423159",
    "end": "5428520"
  },
  {
    "text": "other like a Trin and then when you call a method on a trade it can pass the call",
    "start": "5428520",
    "end": "5433679"
  },
  {
    "text": "to the next one and then they all can work with a cumulative effort let's take a look at an example I need about five",
    "start": "5433679",
    "end": "5439480"
  },
  {
    "text": "more minutes to get through this so let's say we have a writer and I'm going to make this an abstract writer so",
    "start": "5439480",
    "end": "5445320"
  },
  {
    "text": "abstract writer um so this writer simply has a method called Write which is going",
    "start": "5445320",
    "end": "5451400"
  },
  {
    "text": "to be a message string that that's all I'm going to take right not a whole lot of implementation in it uh what am I",
    "start": "5451400",
    "end": "5457119"
  },
  {
    "text": "going to do I'm going to have different types of writers on my hand let's say we have a class called string writer which",
    "start": "5457119",
    "end": "5464480"
  },
  {
    "text": "simply uh is going to extend from writer so in this case of course I'm going to",
    "start": "5464480",
    "end": "5470239"
  },
  {
    "text": "write the right method which takes a message as a parameter and I'm going to Simply say here uh all that I will do",
    "start": "5470239",
    "end": "5477320"
  },
  {
    "text": "here is to say target. append and I'm going to append the message well what's the Target by the way let's say the",
    "start": "5477320",
    "end": "5484440"
  },
  {
    "text": "target is just a new string Builder let's say so that's good enough for now",
    "start": "5484440",
    "end": "5491040"
  },
  {
    "text": "right so um let's also write one other method override the two string method",
    "start": "5491040",
    "end": "5497119"
  },
  {
    "text": "and all that I'm going to do in the two string method is simply say target. two string and return the result from it",
    "start": "5497119",
    "end": "5504080"
  },
  {
    "text": "that's good uh let's give it a try so I have a writer and I have a string writer",
    "start": "5504080",
    "end": "5509600"
  },
  {
    "text": "but imagine I could have different types of writers a string writer a file writer a socket writer encrypted writer God",
    "start": "5509600",
    "end": "5517280"
  },
  {
    "text": "knows what other writers I can create right several writers I could create but I want to use this writer so write a",
    "start": "5517280",
    "end": "5523080"
  },
  {
    "text": "method called write stuff which takes a writer as a parameter so there's my",
    "start": "5523080",
    "end": "5528480"
  },
  {
    "text": "writer and in this case what I'm going to do is simply write out writer. write",
    "start": "5528480",
    "end": "5534360"
  },
  {
    "text": "and I'm going to write this is stupid and let's print it out so I'm going to print out the writer so let's go ahead",
    "start": "5534360",
    "end": "5541000"
  },
  {
    "text": "and try this out so let's call write stuff and send new string writer and uh see",
    "start": "5541000",
    "end": "5548639"
  },
  {
    "text": "how this shapes up so it wrote this is stupid great now let's say a few minutes",
    "start": "5548639",
    "end": "5553800"
  },
  {
    "text": "goes by our requirements change on us they not only want us to write stuff to this writer but they also want to",
    "start": "5553800",
    "end": "5560679"
  },
  {
    "text": "convert everything to uppercase and write it so they want both the functionality to write all the text as",
    "start": "5560679",
    "end": "5566080"
  },
  {
    "text": "it is and to write all in uppercase well where do I put this new function to write an uppercase here's an idea why",
    "start": "5566080",
    "end": "5573600"
  },
  {
    "text": "not in the wrer abstract based class what do you think of that idea H not a not a great idea right",
    "start": "5573600",
    "end": "5580800"
  },
  {
    "text": "because it pollutes that abstract based class next thing you know you come back from vacation there's 20 methods in it right no you don't want to do that hey I",
    "start": "5580800",
    "end": "5588000"
  },
  {
    "text": "can put that in the string writer what do you think not a good idea because it is not",
    "start": "5588000",
    "end": "5593280"
  },
  {
    "text": "available in these other 20 different types of writers I have so looks like a good candidate for a trait so notice",
    "start": "5593280",
    "end": "5600280"
  },
  {
    "text": "what I'm going to do now I'm going to go back here and say trait a uppercase uh filter and in this case it",
    "start": "5600280",
    "end": "5609480"
  },
  {
    "text": "extends from the writer now I want to kind of caution you the extents here is",
    "start": "5609480",
    "end": "5616080"
  },
  {
    "text": "a little bit confusing it really doesn't mean extents it's more like a constraint",
    "start": "5616080",
    "end": "5621480"
  },
  {
    "text": "you can only use this uppercase filter into stuff that is a writer right it's a constraint you are placing now I need to",
    "start": "5621480",
    "end": "5628560"
  },
  {
    "text": "write a method called Write which takes a message as a parameter and what am I going to do here message. two uppercase",
    "start": "5628560",
    "end": "5636719"
  },
  {
    "text": "great but where does this go by the way well obviously I have to write it into",
    "start": "5636719",
    "end": "5642080"
  },
  {
    "text": "somewhere where do I write it in other words I need to write it into uh where",
    "start": "5642080",
    "end": "5647719"
  },
  {
    "text": "do I write it into well I don't know what where is at this point but I know",
    "start": "5647719",
    "end": "5652800"
  },
  {
    "text": "that it's got to be to the object in my chain now how do I specify the chain of",
    "start": "5652800",
    "end": "5658679"
  },
  {
    "text": "the object they decided to use the word super the word super doesn't mean Super",
    "start": "5658679",
    "end": "5663719"
  },
  {
    "text": "super the word super here means the next guy in the chain so it's a little bit",
    "start": "5663719",
    "end": "5669000"
  },
  {
    "text": "confusing we normally we use the word super for a inheritance hierarchy whereas here it's a trait hierarchy from",
    "start": "5669000",
    "end": "5676119"
  },
  {
    "text": "right to left if you will right from right to left all right say that again only uh no you can",
    "start": "5676119",
    "end": "5683119"
  },
  {
    "text": "also use super for the regular inheritance as well so having done this how would I go about specifying it here",
    "start": "5683119",
    "end": "5690199"
  },
  {
    "text": "comes a deadly combination of word called abstract override the best thing",
    "start": "5690199",
    "end": "5695280"
  },
  {
    "text": "about this is to not look at it again and forget about it because it's a bit confusing it simply says abstract",
    "start": "5695280",
    "end": "5701960"
  },
  {
    "text": "because I want you to provide the right method in your implementation override because I am overriding a method that's",
    "start": "5701960",
    "end": "5708639"
  },
  {
    "text": "already in the contract don't think too hard about it it gets a little frustrating so anyway we wrote that",
    "start": "5708639",
    "end": "5714560"
  },
  {
    "text": "method how would this work let's go ahead and try this so now I'm going to say write stuff new string writer but",
    "start": "5714560",
    "end": "5721840"
  },
  {
    "text": "you know where I'm going with this with uppercase filter and now you can see that it actually nicely put it in",
    "start": "5721840",
    "end": "5728360"
  },
  {
    "text": "uppercase how did this work the request to write by the way goes to the uppercase filter which converts a string",
    "start": "5728360",
    "end": "5734239"
  },
  {
    "text": "to uppercase and then forwards it using the super call to the string writer",
    "start": "5734239",
    "end": "5740119"
  },
  {
    "text": "which then writes it down now let's do one more thing by the way well it turns",
    "start": "5740119",
    "end": "5745320"
  },
  {
    "text": "out that I had a discovery which was very sad I came to know that I'm a bad",
    "start": "5745320",
    "end": "5750480"
  },
  {
    "text": "guy it's always kind of hard to realize that that right uh I travel a lot I hang",
    "start": "5750480",
    "end": "5756000"
  },
  {
    "text": "out with programmers like you all so what do you expect right just kidding so I go home one after one of my trips and",
    "start": "5756000",
    "end": "5763040"
  },
  {
    "text": "my little boy runs to my wife and says mommy daddy is a bad boy and my wife you",
    "start": "5763040",
    "end": "5768239"
  },
  {
    "text": "know Whispers to my kid and comes back to discipline me and she said did you say a bad word to the child to to the to",
    "start": "5768239",
    "end": "5774440"
  },
  {
    "text": "the children I said bad word what did I say and she leaned over and said did you use the S word I said s word and then I",
    "start": "5774440",
    "end": "5782760"
  },
  {
    "text": "whispered and said I would never use such an s word not that and then she Whispers back did you say stupid I said",
    "start": "5782760",
    "end": "5789360"
  },
  {
    "text": "of course I said stupid don't say it again I said what's wrong with stupid she said look I've been teaching the",
    "start": "5789360",
    "end": "5795360"
  },
  {
    "text": "children to have manners and they cannot call people is that true you can call people stupid I mean we do this all the",
    "start": "5795360",
    "end": "5802119"
  },
  {
    "text": "time at work right that's stupid right and I'm like oh okay I will not say it",
    "start": "5802119",
    "end": "5808199"
  },
  {
    "text": "again so I had to put filters on me right I mean you couldn't say stupid in front of children I didn't know this so",
    "start": "5808199",
    "end": "5814440"
  },
  {
    "text": "this is kind of troubling so trait profanity filter right and profanity",
    "start": "5814440",
    "end": "5820440"
  },
  {
    "text": "filter extends writer and what do I do here abstract",
    "start": "5820440",
    "end": "5825880"
  },
  {
    "text": "override Define WR message string and what am we going to do with in this",
    "start": "5825880",
    "end": "5830920"
  },
  {
    "text": "method super. write message. replace the word stupid with the",
    "start": "5830920",
    "end": "5839679"
  },
  {
    "text": "word right so that is my profanity filter so now write stuff new string",
    "start": "5839679",
    "end": "5846320"
  },
  {
    "text": "writer with profanity filter much better isn't it well let's",
    "start": "5846320",
    "end": "5853719"
  },
  {
    "text": "give this one more try you know where I'm going with this right so I'm going to say write",
    "start": "5853719",
    "end": "5859960"
  },
  {
    "text": "stuff new string writer with uppercase filter with profanity filter all the",
    "start": "5859960",
    "end": "5866920"
  },
  {
    "text": "three together how about that so run that awesome isn't it but of of course",
    "start": "5866920",
    "end": "5873800"
  },
  {
    "text": "you already noticed one problem here because the request goes to the rightmost object and then it goes",
    "start": "5873800",
    "end": "5880719"
  },
  {
    "text": "through the train of objects one at a time the sequence matters a lot so as a",
    "start": "5880719",
    "end": "5886320"
  },
  {
    "text": "result if I try now write stuff new string writer with profanity",
    "start": "5886320",
    "end": "5893760"
  },
  {
    "text": "filter with uppercase filter notice what happens it doesn't remove the content",
    "start": "5893760",
    "end": "5901040"
  },
  {
    "text": "but don't don't worry about it this is perfectly fine because the other day I was very angry and I screamed this is",
    "start": "5901040",
    "end": "5907520"
  },
  {
    "text": "stupid and immediately my you know little boy's eyes widen and my wife is like Daddy is upset right now be quiet",
    "start": "5907520",
    "end": "5913520"
  },
  {
    "text": "so this is perfectly fitting the domain right so you can see how the chaining of",
    "start": "5913520",
    "end": "5918800"
  },
  {
    "text": "object works but the proper order of chaining makes a big difference too but",
    "start": "5918800",
    "end": "5923840"
  },
  {
    "text": "all that you did right now is just Implement The Decorator pattern as you can see right very very smooth way of",
    "start": "5923840",
    "end": "5930360"
  },
  {
    "text": "implementing just by using traits which is already baked in and it can be used fairly effectively so",
    "start": "5930360",
    "end": "5936480"
  },
  {
    "text": "that is about chaining of Trades and how that's baked in uh there are all these interesting features that the language",
    "start": "5936480",
    "end": "5942800"
  },
  {
    "text": "provides it still follows the Java semantics but it brings to the table enormous about of conciseness there's a",
    "start": "5942800",
    "end": "5949719"
  },
  {
    "text": "lot more conciseness than I have covered here but I hope that that kind of gives you a idea about what you can do but the",
    "start": "5949719",
    "end": "5955760"
  },
  {
    "text": "nice thing about this is it's not all nothing proposition it's a language on the jbm you can compile this into bite",
    "start": "5955760",
    "end": "5961840"
  },
  {
    "text": "code you can layer your architecture in a way that you can use Java where it makes sense especially in Legacy",
    "start": "5961840",
    "end": "5967719"
  },
  {
    "text": "applications and then reach into Scala where it makes sense in layers and then you can build part of the system with",
    "start": "5967719",
    "end": "5973159"
  },
  {
    "text": "Java part of the system with Scala and then bring them together and uh places where I find this to be extremely useful",
    "start": "5973159",
    "end": "5980159"
  },
  {
    "text": "is when I want to do XML processing for example the scal has really nice features for it when I want to reach",
    "start": "5980159",
    "end": "5985760"
  },
  {
    "text": "into functional style you can either wait for Java 8 or you can use it right now in Scala you can use this where you",
    "start": "5985760",
    "end": "5993000"
  },
  {
    "text": "want to use good pattern matching for instance or you want to use uh the functional style as we saw here or I",
    "start": "5993000",
    "end": "5998920"
  },
  {
    "text": "haven't even scratch the surface of concurrency where you can use this enormously uh capable uh you know",
    "start": "5998920",
    "end": "6004199"
  },
  {
    "text": "Solutions uh to either Implement an acrob base concurrency or use parallel Collections and stuff like that so the",
    "start": "6004199",
    "end": "6010840"
  },
  {
    "text": "beauty of this is it it is it is a language that's there but think of this a lot of times when people ask me how do",
    "start": "6010840",
    "end": "6017239"
  },
  {
    "text": "you use this uh think of this like you use spring or hibernate it is uh a",
    "start": "6017239",
    "end": "6023760"
  },
  {
    "text": "language that you throw in with a certain capability but at runtime it's a question of having a few more jar files",
    "start": "6023760",
    "end": "6030239"
  },
  {
    "text": "in your class path and then you can start mixing them in and uh I've seen this use pretty effectively in in",
    "start": "6030239",
    "end": "6037800"
  },
  {
    "text": "organizations where concurrencies is very important or they have very heavy lifting to do like a lot of XML",
    "start": "6037800",
    "end": "6044239"
  },
  {
    "text": "processing to do uh these are the places where you will be able to leverage uh the other benefit I see a lot about this",
    "start": "6044239",
    "end": "6050880"
  },
  {
    "text": "is uh I learn languages primarily for one reason to use them but more",
    "start": "6050880",
    "end": "6055920"
  },
  {
    "text": "important to go back and program in the language as I program in a much better way than I did because these these",
    "start": "6055920",
    "end": "6063119"
  },
  {
    "text": "languages don't teach us a syntax in fact it's a wrong thing to focus on the syntax these languages teach us idioms",
    "start": "6063119",
    "end": "6069000"
  },
  {
    "text": "these languages teach us a certain way to program a certain way to design and I can bet you that my Java design is no",
    "start": "6069000",
    "end": "6076320"
  },
  {
    "text": "longer the same I I think differently in Java I program differently in Java and in fact when I got exposed to Java 8 by",
    "start": "6076320",
    "end": "6082560"
  },
  {
    "text": "the way the there are certain things I'm bringing into Java 8 uh in terms of patterns that I've learned from these",
    "start": "6082560",
    "end": "6088760"
  },
  {
    "text": "languages like Scala and groovy and closure and languages like that so just spending time on these languages really",
    "start": "6088760",
    "end": "6095520"
  },
  {
    "text": "makes us better overall in programming in the languages we already program in and also gives the agility for us the",
    "start": "6095520",
    "end": "6102239"
  },
  {
    "text": "minute we realize this is a better choice we are quick to go adapt to it because we are familiar with it so I",
    "start": "6102239",
    "end": "6108560"
  },
  {
    "text": "hope that was useful for you thank you [Applause]",
    "start": "6108560",
    "end": "6116410"
  },
  {
    "text": "[Music]",
    "start": "6116410",
    "end": "6124870"
  }
]