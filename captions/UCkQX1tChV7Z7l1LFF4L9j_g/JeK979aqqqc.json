[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11519"
  },
  {
    "text": "by talk on functional thinking uh a lot of times when you encounter these new",
    "start": "11519",
    "end": "17080"
  },
  {
    "text": "paradigms in the functional programming world it's also mashed in together with a bunch of details about new languages",
    "start": "17080",
    "end": "22840"
  },
  {
    "text": "like closure or schola and now you're trying to learn two things at one time which just makes it that much harder and",
    "start": "22840",
    "end": "28519"
  },
  {
    "text": "so my focus in this talk is really trying to take those functional Concepts but anchor them really really close to",
    "start": "28519",
    "end": "34200"
  },
  {
    "text": "the Java world and so most of my examples here are in Java when Java can't do it I switch to groovy I think I",
    "start": "34200",
    "end": "40280"
  },
  {
    "text": "have one closure example and one scolar example but mostly I'm concentrating on the paradigm shift that comes from",
    "start": "40280",
    "end": "47440"
  },
  {
    "text": "thinking in a more functional way and I'm going to start with a metaphor and",
    "start": "47440",
    "end": "53359"
  },
  {
    "text": "Essay and history lesson here's the metaphor let's say that you're Lumber",
    "start": "53359",
    "end": "60199"
  },
  {
    "text": "and you're okay and you're the best Lumberjack in the forest at cutting down trees with an axe it's stunning how fast",
    "start": "60199",
    "end": "66600"
  },
  {
    "text": "you can cut down trees with an axxe then somebody comes along and hands you one of these but they don't show you how to",
    "start": "66600",
    "end": "73200"
  },
  {
    "text": "crank it and so your first instinct as a lumberjack is to take the unranked chainsaw and Swinging against a tree",
    "start": "73200",
    "end": "79720"
  },
  {
    "text": "very quickly reach the conclusion chainsaws are terrible ways to cut down trees I'm going back to the axe because",
    "start": "79720",
    "end": "85079"
  },
  {
    "text": "it feels really good in my hand I've been using this axe for 10 years this axe feels awesome when I swing it I know",
    "start": "85079",
    "end": "90560"
  },
  {
    "text": "exactly how to swing it until somebody shows you how to crank one of these things you can cut down a whole lot more",
    "start": "90560",
    "end": "95600"
  },
  {
    "text": "trees the point of this is is the point that I made earlier that learning a new language is easy we've all done this a",
    "start": "95600",
    "end": "102119"
  },
  {
    "text": "bunch of times in our careers because it's really just learning new syntax but learning a new paradigm is really hard",
    "start": "102119",
    "end": "109200"
  },
  {
    "text": "and that's really what I'm trying to focus on in this talk is trying to get this new paradigm",
    "start": "109200",
    "end": "114640"
  },
  {
    "text": "instilled and so uh my first observation is that functional is much more a way of",
    "start": "114640",
    "end": "120119"
  },
  {
    "text": "thinking that a particular language or tool set you can do functional programming in Java using just raw Java",
    "start": "120119",
    "end": "126119"
  },
  {
    "text": "and with a couple of Frameworks that I'll show you as we go along here's the",
    "start": "126119",
    "end": "132560"
  },
  {
    "start": "130000",
    "end": "215000"
  },
  {
    "text": "essay this is an essay by the well-known blogger Steve Yi called execution in the",
    "start": "132560",
    "end": "137760"
  },
  {
    "text": "Kingdom of nouns this was written in 2006 and in this essay he talks about this mythical Kingdom where nouns are",
    "start": "137760",
    "end": "145239"
  },
  {
    "text": "first class citizens but verbs are subjugated slaves verbs are not low out",
    "start": "145239",
    "end": "150440"
  },
  {
    "text": "by themselves they always have to have a noun chaperon in fact it's gotten so bad in the Kingdom of nouns that they've had",
    "start": "150440",
    "end": "155920"
  },
  {
    "text": "to create a special kind of noun that has no actual noun that does nothing but",
    "start": "155920",
    "end": "161920"
  },
  {
    "text": "carry verbs around because you have to chaperon verbs at all times because who knows what might happen otherwise of",
    "start": "161920",
    "end": "168400"
  },
  {
    "text": "course this land that we're talking about is Java and this Reliance that everything has to be in a class and they",
    "start": "168400",
    "end": "173519"
  },
  {
    "text": "quickly realize that that was kind of a silly idea because in Java the first version of java they didn't have even",
    "start": "173519",
    "end": "179360"
  },
  {
    "text": "have Anon classes so if you wanted to throw away a piece of code you had to cook up a name for this madeup noun just",
    "start": "179360",
    "end": "185959"
  },
  {
    "text": "so you could attach a verb to it and of course that makes perfect sense when you have a context like this where shape has",
    "start": "185959",
    "end": "192319"
  },
  {
    "text": "a draw method and that makes perfect sense but when you get to Arcane stuff like this it starts making less and less",
    "start": "192319",
    "end": "198159"
  },
  {
    "text": "sense we really need the ability to pass Behavior around and that's what we're really getting at there is languages",
    "start": "198159",
    "end": "204440"
  },
  {
    "text": "need a way to pass Behavior around as well nouns are not quite sufficient and so not surprisingly this talk is going",
    "start": "204440",
    "end": "211200"
  },
  {
    "text": "to be largely not about nouns but about verbs and here's the history",
    "start": "211200",
    "end": "218879"
  },
  {
    "start": "215000",
    "end": "308000"
  },
  {
    "text": "lesson this is a poster you can download from O'Reilly which is the history of computer programming languages it only",
    "start": "218879",
    "end": "226000"
  },
  {
    "text": "has about the top 200 on it there are well over 2,000 programming languages that people have cooked up over the",
    "start": "226000",
    "end": "231280"
  },
  {
    "text": "relatively short amount of time we've been doing this exercise called programming but I want to point you back",
    "start": "231280",
    "end": "236599"
  },
  {
    "text": "to a particular era back in the 70s 80s time frame and point out a couple of",
    "start": "236599",
    "end": "243280"
  },
  {
    "text": "events one of them is this simulus 67 does anybody know the significance of",
    "start": "243280",
    "end": "248680"
  },
  {
    "text": "simulus 67 back in 67 yes yes first objectoriented language uh",
    "start": "248680",
    "end": "255400"
  },
  {
    "text": "simulus 67 uh introduced those Concepts Small Talk came about in 71 C++ came",
    "start": "255400",
    "end": "262880"
  },
  {
    "text": "about 1983 now I think there's a robust argument to be had over drinks as to",
    "start": "262880",
    "end": "268360"
  },
  {
    "text": "exactly when did object Orient program become mainstream I don't really think it was mainstream before C++ I think",
    "start": "268360",
    "end": "274560"
  },
  {
    "text": "that's what really pushed it into the mainstream but the point of that is they discovered this concept back in",
    "start": "274560",
    "end": "280560"
  },
  {
    "text": "1967 and you and that's back in the days when they were doing go-tos and unstructured jumps and code and other",
    "start": "280560",
    "end": "286800"
  },
  {
    "text": "crazy stuff like that we're just thinking about structured programming and so you would think that when they saw something as insanely useful as",
    "start": "286800",
    "end": "293440"
  },
  {
    "text": "classes and objects they would have gone oh yeah that's clearly what we should be doing not this other crazy stuff we're doing but they didn't it took 15 years",
    "start": "293440",
    "end": "301240"
  },
  {
    "text": "or more for those ideas to finally seep their way into the mainstream and people start being productive and taking good",
    "start": "301240",
    "end": "306880"
  },
  {
    "text": "advantage of those ideas and this happens a lot of times in the computer world where you have this mainstream",
    "start": "306880",
    "end": "313120"
  },
  {
    "start": "308000",
    "end": "482000"
  },
  {
    "text": "technology and then you have these offshoots like academic offshoots and functional programming was kind of one",
    "start": "313120",
    "end": "318560"
  },
  {
    "text": "of these academic offshoots where they were experimenting with different ways of looking at problems artificial intelligence another one of those you",
    "start": "318560",
    "end": "325039"
  },
  {
    "text": "have practical offshoots of things like xbase and 4gls but every once once a while these",
    "start": "325039",
    "end": "331080"
  },
  {
    "text": "offshoots uh start really bearing fruit and come and merge back into the mainstream technology brandan and I",
    "start": "331080",
    "end": "338080"
  },
  {
    "text": "think that's what's happening now with functional programming not just in the Java world uh in the net world as well",
    "start": "338080",
    "end": "344880"
  },
  {
    "text": "FSH now shipped with Visual Studio as a first class citizen of the net ecosystem and it's a functional language based on",
    "start": "344880",
    "end": "351240"
  },
  {
    "text": "ML family of languages if you look at the changes that are happening in most",
    "start": "351240",
    "end": "356520"
  },
  {
    "text": "of the languages that are really active right now languages like Ruby and groovy the things that they're adding to them",
    "start": "356520",
    "end": "362960"
  },
  {
    "text": "are all based on ideas that come from the functional programming world so now is a good time to start learning these",
    "start": "362960",
    "end": "368919"
  },
  {
    "text": "Concepts because these concepts are invading your languages that you're using now whether you like it or not you",
    "start": "368919",
    "end": "374919"
  },
  {
    "text": "don't have to switch to scolar or closure or FP to start doing functional programming you can do a lot of",
    "start": "374919",
    "end": "380319"
  },
  {
    "text": "functional programming in Ruby and groovy and increasingly uh in the near future Java and of course JavaScript",
    "start": "380319",
    "end": "385919"
  },
  {
    "text": "there's some really good functional programming libraries in JavaScript as well there's a great quote that uh is very",
    "start": "385919",
    "end": "393639"
  },
  {
    "text": "perceptive and it actually shines through several of the examples that I have in this talk and it's by Michael",
    "start": "393639",
    "end": "399520"
  },
  {
    "text": "feathers the guy who's responsible for the book working with Legacy code and this comes from Twitter which is why it's a little bit tur uh but it's a",
    "start": "399520",
    "end": "406840"
  },
  {
    "text": "really good distinction that he makes where he says that object orientation makes code understandable by",
    "start": "406840",
    "end": "414039"
  },
  {
    "text": "encapsulating moving Parts think about the things that you know about object-oriented ative languages a lot of",
    "start": "414039",
    "end": "420720"
  },
  {
    "text": "the features are designed to either show or hide information at certain levels from some people can see it some people",
    "start": "420720",
    "end": "426800"
  },
  {
    "text": "can't see it some can see it but not change it other people can see it and change it uh the way inheritance and",
    "start": "426800",
    "end": "432000"
  },
  {
    "text": "polymorphism a lot there a lot of Machinery within those languages to make it easy to see and manipulate State",
    "start": "432000",
    "end": "439199"
  },
  {
    "text": "that's what he's calling moving Parts functional programming makes code understandable by minimizing moving",
    "start": "439199",
    "end": "445599"
  },
  {
    "text": "Parts the concept being if we get rid of parts then you can't make mistakes in those parts if you never see them as a",
    "start": "445599",
    "end": "452599"
  },
  {
    "text": "developer you can't mess it up garbage collection is a good example of hiding a moving part from you a very error prone",
    "start": "452599",
    "end": "458800"
  },
  {
    "text": "thing that makes people make a lot of mistakes on by Paving that over they eliminated a lot of uh mistakes that's",
    "start": "458800",
    "end": "465639"
  },
  {
    "text": "an example of hiding a moving part that we used to have to deal with and functional programming takes away some",
    "start": "465639",
    "end": "471520"
  },
  {
    "text": "of the moving parts that we're accustomed to in the objector your world so I'm going to talk about a lot of",
    "start": "471520",
    "end": "476919"
  },
  {
    "text": "examples of code and so I need some code and a problem to solve and here's the problem I'm going to",
    "start": "476919",
    "end": "482759"
  },
  {
    "start": "482000",
    "end": "540000"
  },
  {
    "text": "solve I've solved this problem a couple times before uh and there's a a really good write up of the imperative version",
    "start": "482759",
    "end": "490280"
  },
  {
    "text": "of this which is one of the reason I chose this problem it's a problem of number classification so uh any whole",
    "start": "490280",
    "end": "495800"
  },
  {
    "text": "positive integer can be classified in one of three ways and here's the first of them uh it's a perfect number if the",
    "start": "495800",
    "end": "503000"
  },
  {
    "text": "sum of the factors of the number minus the number equals the number itself in other words say that's the sum of the",
    "start": "503000",
    "end": "508479"
  },
  {
    "text": "factors of a number is equal two times the number uh six is a perfect number because if you take its factors and add",
    "start": "508479",
    "end": "514200"
  },
  {
    "text": "them up it equals twice six so was 28 and so is 496 those are all perfect",
    "start": "514200",
    "end": "519680"
  },
  {
    "text": "numbers so that's how you determine if a number is a perfect number or not and that's actually the key to this classification scheme if the sum of the",
    "start": "519680",
    "end": "526600"
  },
  {
    "text": "factors is equals to two times the number it's perfect if it's greater than two times the number it's abundant if",
    "start": "526600",
    "end": "532000"
  },
  {
    "text": "it's less than two times the number it's deficient so I want to write some code that given some number tell me which of",
    "start": "532000",
    "end": "537839"
  },
  {
    "text": "these three categories it lives in I'm going to start with an imperative version of this code and one of the",
    "start": "537839",
    "end": "544640"
  },
  {
    "text": "reasons I chose this example is I'm not going to go into a lot of detail as to why the imperative version of this code",
    "start": "544640",
    "end": "549959"
  },
  {
    "text": "looks exactly the way it does if you want to read that description it is actually the sample chapter of my",
    "start": "549959",
    "end": "555760"
  },
  {
    "text": "productive programmer book because this example was written to illustrate uh test driven development and so the test",
    "start": "555760",
    "end": "561279"
  },
  {
    "text": "driven design chapter uses this exact same example and shows you the thinking that went into the shape of the",
    "start": "561279",
    "end": "566600"
  },
  {
    "text": "imperative version I'm just going to show it to you relatively quick quickly so here's my imperative perfect number",
    "start": "566600",
    "end": "572279"
  },
  {
    "text": "finder the first thing I do is create some shared State some of this is to make testability easier in some of it is",
    "start": "572279",
    "end": "578600"
  },
  {
    "text": "to do lazy initialization for sums I initialize all these guys in Constructor",
    "start": "578600",
    "end": "583839"
  },
  {
    "text": "my is Factor method is really the one of the key little pieces of this algorithm because what it does is say well give me",
    "start": "583839",
    "end": "590920"
  },
  {
    "text": "a factor in a number if I can say number mod Factor equals zero that means Factor",
    "start": "590920",
    "end": "597000"
  },
  {
    "text": "goes into number with zero remainder it is one of the factors so I can determine a factor that",
    "start": "597000",
    "end": "602200"
  },
  {
    "text": "way I then have a calculate factors that goes through and does a loop up to the",
    "start": "602200",
    "end": "608160"
  },
  {
    "text": "square root of the number and there's a little bit of an optimization at work here because uh really common way to",
    "start": "608160",
    "end": "614640"
  },
  {
    "text": "make this algorithm efficient consider for a second if you were trying to determine the factors for number 16",
    "start": "614640",
    "end": "621560"
  },
  {
    "text": "notice that factors always come in pairs because uh it's always the product of",
    "start": "621560",
    "end": "627320"
  },
  {
    "text": "two factors which equals your target number so if your target number is 16 when you grab two you can also grab",
    "start": "627320",
    "end": "633160"
  },
  {
    "text": "eight because it's the symmetrical factor that equals your target number which means I don't have to Loop all the",
    "start": "633160",
    "end": "638399"
  },
  {
    "text": "way up to the the number if I'm trying to find factors I really only have to go as far as the square root of the number",
    "start": "638399",
    "end": "645120"
  },
  {
    "text": "if I harvest those factors in pairs and that's exactly what I'm doing I Loop up to the square root and when I grab one",
    "start": "645120",
    "end": "650839"
  },
  {
    "text": "of them I come down here and add both the number and it's symetrical factor to to make this faster it's a a very common",
    "start": "650839",
    "end": "657320"
  },
  {
    "text": "significant optimization for this code",
    "start": "657320",
    "end": "661240"
  },
  {
    "text": "here is my um sum factors and you'll notice I have a get sum method that is",
    "start": "666839",
    "end": "673160"
  },
  {
    "text": "basically doing a lazy initialization for me the anticipated use of this class is going to be I'm going to call this",
    "start": "673160",
    "end": "678560"
  },
  {
    "text": "perfect if it's not perfect I'm going to call one of the other so I can classify this thing uh I want to I don't want to",
    "start": "678560",
    "end": "683839"
  },
  {
    "text": "have to calculate that sum over and over so I'm only calculating the sum once so I'm lazily initializing that so the first time through it gets initialized",
    "start": "683839",
    "end": "690880"
  },
  {
    "text": "and other times I don't have to do it for a given particular number so that's one of the reasons I have that shared State there so more than the details of",
    "start": "690880",
    "end": "698839"
  },
  {
    "text": "the code I'm really interested in kind of the shape of the code so you'll notice this has internal state it has",
    "start": "698839",
    "end": "704160"
  },
  {
    "text": "internal state for two reasons one to make it much easier to do testing because it's easier to inject things when you're doing testing and so that's",
    "start": "704160",
    "end": "710720"
  },
  {
    "text": "part of why some of the internal state is there the other is to enable this lazy initialization Behavior Uh this",
    "start": "710720",
    "end": "717120"
  },
  {
    "text": "code is very cohesive in that it's lots of very small single purpose methods it follows the kind of Kent Beck composed",
    "start": "717120",
    "end": "723360"
  },
  {
    "text": "method style of coding it's very testable in fact it was created as an illustration of testability and it's",
    "start": "723360",
    "end": "729079"
  },
  {
    "text": "also very reactable because it is lots of very small methods and my goal in creating that",
    "start": "729079",
    "end": "734959"
  },
  {
    "text": "code was primarily to illustrate how things can be very very testable by being very very uh cohesive but what if",
    "start": "734959",
    "end": "743440"
  },
  {
    "text": "I went into it with additional criteria as well like I want to minimize shared",
    "start": "743440",
    "end": "749600"
  },
  {
    "text": "state which is one of the goals that you see a lot in functional programming I still want to maintain the testability",
    "start": "749600",
    "end": "755760"
  },
  {
    "text": "but I'd like to chase away some of the shared state so here's a slightly more functional version of the same code uh",
    "start": "755760",
    "end": "762120"
  },
  {
    "text": "still in Java but with a a different perspective in mind and so now in my get",
    "start": "762120",
    "end": "767760"
  },
  {
    "text": "factors method I actually do the work of three different methods for my imperative version I've collapsed all",
    "start": "767760",
    "end": "773720"
  },
  {
    "text": "those together so that I can own factors as a local internal variable here so factors lives entirely within here I'm",
    "start": "773720",
    "end": "780600"
  },
  {
    "text": "still doing my little optimization here uh but this is now split and Consolidated in one",
    "start": "780600",
    "end": "786920"
  },
  {
    "text": "method and now for my is perfect is abundant and is deficient code I now",
    "start": "786920",
    "end": "792240"
  },
  {
    "text": "have gotten rid of the shared state but I've now lost my optimization now if I call this more",
    "start": "792240",
    "end": "798959"
  },
  {
    "text": "than once it's going to do the sum every time that's one of the the side effects of losing that shared State I was",
    "start": "798959",
    "end": "804000"
  },
  {
    "text": "holding on to a useful thing in that shared state if I'm trying to minimize that then I'm going to take a performance tip from doing this but",
    "start": "804000",
    "end": "811480"
  },
  {
    "text": "that's a trade-off and in fact in a bit we'll come back for this version and and make it just as uh",
    "start": "811480",
    "end": "818720"
  },
  {
    "text": "good in a slightly different way but when you look at this code",
    "start": "818720",
    "end": "824320"
  },
  {
    "text": "you'll notice there's no internal State anywhere in this code which means there's less need for scoping if I don't",
    "start": "824320",
    "end": "831800"
  },
  {
    "text": "have any internal State there's no compelling reason to make things private because there's nothing really to hide in here in fact there's some real nice",
    "start": "831800",
    "end": "838399"
  },
  {
    "text": "benefits of making these methods public because that get me the factors of a number method if I'm trying to find",
    "start": "838399",
    "end": "844120"
  },
  {
    "text": "prime numbers that would be a handy method to have and so I made them all static and public so now I can say number classifier do factors and now I",
    "start": "844120",
    "end": "851399"
  },
  {
    "text": "get factors for number for other purposes we actually in the Java World a lot of times don't think of reusability",
    "start": "851399",
    "end": "858120"
  },
  {
    "text": "at the function or method level because it's been so beat into us that reusability always happens at the class",
    "start": "858120",
    "end": "863199"
  },
  {
    "text": "level but you can get reusability at a much lower level as well this code is still testable in fact it's still done",
    "start": "863199",
    "end": "869519"
  },
  {
    "text": "test driven development like the other code is still very reactable uh but of course we've lost our lazy",
    "start": "869519",
    "end": "875000"
  },
  {
    "text": "initialization for now we'll restore that in a really nice way here in just a",
    "start": "875000",
    "end": "880680"
  },
  {
    "text": "bit so this gets back to my contention that functional is more a way of thinking in a particular tool set or",
    "start": "880680",
    "end": "886399"
  },
  {
    "text": "particular language you can do more functional style coding in Java if you",
    "start": "886399",
    "end": "891600"
  },
  {
    "text": "emphasize some of the things that functional programming tries to emphasize like minimizing shared",
    "start": "891600",
    "end": "897079"
  },
  {
    "start": "897000",
    "end": "1038000"
  },
  {
    "text": "state so one of the things that you'll find as you start looking into functional programming it is a pretty",
    "start": "897079",
    "end": "902360"
  },
  {
    "text": "deep and Broad ocean and there are all sorts of really fascinating little uh inlets that you can find yourself uh",
    "start": "902360",
    "end": "910160"
  },
  {
    "text": "kind of wandering down uh a bunch of really fascinating stuff about category Theory and a lot of theoretical stuff um",
    "start": "910160",
    "end": "917199"
  },
  {
    "text": "and so what I wanted to do is is go grab some Concepts that kind of relate to us in one way or another and show you a few",
    "start": "917199",
    "end": "923680"
  },
  {
    "text": "examples of some of these Concepts in action uh and one of those Concepts that's going to be very near and dear to",
    "start": "923680",
    "end": "929040"
  },
  {
    "text": "our heart very soon is this concept of a first class or higher order function uh",
    "start": "929040",
    "end": "934079"
  },
  {
    "text": "these terms are basically interchangeable one is a computer sciencey term and the other is a mathematics kind of term uh but they",
    "start": "934079",
    "end": "940519"
  },
  {
    "text": "both essentially mean functions as first class citizens be pass as parameters can be returned values of functions uh we're",
    "start": "940519",
    "end": "947360"
  },
  {
    "text": "going to get this in Java 7 that's what the Lambda stuff in Java 7 is going to give us our uh first class functions",
    "start": "947360",
    "end": "954800"
  },
  {
    "text": "finally pure functions are ones that have no side effects outside themselves in fact the the functional slightly more",
    "start": "954800",
    "end": "961720"
  },
  {
    "text": "functional version I just showed you was a bunch of pure functions because they rely only on their parameters and nothing else and your runtime can do",
    "start": "961720",
    "end": "969600"
  },
  {
    "text": "some really nice optimizations if you have a lot of pure functions recursion is something that we don't really think",
    "start": "969600",
    "end": "976440"
  },
  {
    "text": "of much in the Java world because the jvm was never really particularly suited for doing a lot of recursion and so",
    "start": "976440",
    "end": "983079"
  },
  {
    "text": "Scola and closure have had to kind of solve this problem themselves within the language uh but it does give you some",
    "start": "983079",
    "end": "988920"
  },
  {
    "text": "some really nice benefits in terms of eliminating State uh a lot of times you can get rid of iteration variables and",
    "start": "988920",
    "end": "994480"
  },
  {
    "text": "things like that by using recursion instead of instead of keeping an iter an iterator",
    "start": "994480",
    "end": "1000959"
  },
  {
    "text": "going and another one of these Concepts uh that's slightly academic is this idea of strict evaluation but it leads to",
    "start": "1000959",
    "end": "1007399"
  },
  {
    "text": "this really useful Concept in a lot of functional programming languages of laziness and being able to create lazy",
    "start": "1007399",
    "end": "1013319"
  },
  {
    "text": "sequences of things uh in fact in closure for example all the collections try to be as lazy as possible meaning it",
    "start": "1013319",
    "end": "1020040"
  },
  {
    "text": "doesn't try to pre-calculate all the values in the collection it only calculates as many as as you need right",
    "start": "1020040",
    "end": "1026000"
  },
  {
    "text": "now and then we'll calculate the the new ones on the Fly and so it tries to do as little work as possible by creating what",
    "start": "1026000",
    "end": "1032240"
  },
  {
    "text": "look like infinite collections but you just keep asking for more values so let's talk about a few of",
    "start": "1032240",
    "end": "1039400"
  },
  {
    "start": "1038000",
    "end": "1531000"
  },
  {
    "text": "these and and show deeper examples and I mentioned this idea of higher order functions which are functions can either",
    "start": "1039400",
    "end": "1045038"
  },
  {
    "text": "take other functions as arguments or return them as results this is the computer I'm sorry this is",
    "start": "1045039",
    "end": "1051480"
  },
  {
    "text": "the mathematics definition of this um and this is a really really common need",
    "start": "1051480",
    "end": "1058120"
  },
  {
    "text": "in our world uh in fact uh you bump into this kind of scenario a lot I showed",
    "start": "1058120",
    "end": "1064919"
  },
  {
    "text": "this code in my agile architecture and design talk yesterday this was actually the target of a refactoring exercise",
    "start": "1064919",
    "end": "1071960"
  },
  {
    "text": "where I got it down to the point where I discovered uh essentially some reusable code here because if you replace these",
    "start": "1071960",
    "end": "1078880"
  },
  {
    "text": "two lines with something different what I basically got as a template for doing transactional data access and so the way",
    "start": "1078880",
    "end": "1085320"
  },
  {
    "text": "that you would Harvest this if you wanted to save this in your codebase to make use of this later this template",
    "start": "1085320",
    "end": "1091280"
  },
  {
    "text": "that you've created is to apply a gang of four design pattern to it something like the command design pattern and so",
    "start": "1091280",
    "end": "1097360"
  },
  {
    "text": "what you do is you create this wrap in transaction that takes in a command you execute the command there and then down",
    "start": "1097360",
    "end": "1102840"
  },
  {
    "text": "here you change your add order method to rap in transaction create a new command with this execute method and the little",
    "start": "1102840",
    "end": "1108840"
  },
  {
    "text": "pieces of work that you want to do but of course this is just a cry for",
    "start": "1108840",
    "end": "1114360"
  },
  {
    "text": "help for portable code because that's all we're really doing here that's all the command design pattern is is a",
    "start": "1114360",
    "end": "1119679"
  },
  {
    "text": "Band-Aid for the fact that Java doesn't have a way to pass around code command",
    "start": "1119679",
    "end": "1124799"
  },
  {
    "text": "is literally just this noun that has no real purpose in life except as a holder as a chaperone for verbs being passed",
    "start": "1124799",
    "end": "1131159"
  },
  {
    "text": "around and so if you go to a language that supports higher order functions like groovy this code becomes a lot",
    "start": "1131159",
    "end": "1138039"
  },
  {
    "text": "better and prer because this is the same code in groovy but here code blocks are",
    "start": "1138039",
    "end": "1143240"
  },
  {
    "text": "first class citizen in the language and uh anything in curly braces is a code block and you can pass this and if you",
    "start": "1143240",
    "end": "1150720"
  },
  {
    "text": "want to execute a code Block in groovy you can either call the execute method on it or you can use the syntactic sugar",
    "start": "1150720",
    "end": "1156679"
  },
  {
    "text": "of the open and close perins and it'll execute that code block that you're pointing to that actually gets rid of a",
    "start": "1156679",
    "end": "1161919"
  },
  {
    "text": "lot of boiler plate and a bunch of other stuff that that's really not technically necessary it's just there because the",
    "start": "1161919",
    "end": "1167679"
  },
  {
    "text": "Java language uh doesn't have this facility yet but the other thing that's",
    "start": "1167679",
    "end": "1173760"
  },
  {
    "text": "interesting about this code Block in groovy and the way that code blocks are implemented in most functional languages",
    "start": "1173760",
    "end": "1180840"
  },
  {
    "text": "is that it's not just a code Block it's also a closure and you hear a lot of",
    "start": "1180840",
    "end": "1185919"
  },
  {
    "text": "things about closures and so I wanted to to give you an illustration of what's so cool and special about closures and I",
    "start": "1185919",
    "end": "1192880"
  },
  {
    "text": "can't do this in Java of course because it doesn't support closures uh but I wanted to cook up the simplest example I",
    "start": "1192880",
    "end": "1198240"
  },
  {
    "text": "could that illustrates this concept in a javal likee language so I did it in groovy so let's see how well I",
    "start": "1198240",
    "end": "1205080"
  },
  {
    "text": "did so let's see what this code does so this is a method called make counter and",
    "start": "1205080",
    "end": "1210679"
  },
  {
    "text": "what it does is Define a local variable called very local variable and initialize it to zero and then it",
    "start": "1210679",
    "end": "1217200"
  },
  {
    "text": "returns a code block ignore what the code block does for a second notice that anything in curly braces and groovy is a",
    "start": "1217200",
    "end": "1223840"
  },
  {
    "text": "code block so it returns a code block so when I say C1 is equal to make counter C1 is is now pointing to an instance of",
    "start": "1223840",
    "end": "1230159"
  },
  {
    "text": "that code block and if I want to execute that code block I can execute it like that and when I execute that code block",
    "start": "1230159",
    "end": "1237600"
  },
  {
    "text": "what it's going to say is a very local variable is equal to very local variable plus one so it's incrementing very local",
    "start": "1237600",
    "end": "1243159"
  },
  {
    "text": "variable and in groovy the last line of any code block is the return value of",
    "start": "1243159",
    "end": "1248240"
  },
  {
    "text": "the code block and so the return value of this guy is going to be whatever the value of very local variable is and so",
    "start": "1248240",
    "end": "1253360"
  },
  {
    "text": "if I looked at the return value here it' be one and here it' be two and here it' be three",
    "start": "1253360",
    "end": "1259000"
  },
  {
    "text": "then I come along and say C2 is equal to make counter I now have two instances of",
    "start": "1259000",
    "end": "1265200"
  },
  {
    "text": "that code block if you look at this underneath and groovy code I have fired the Constructor on two closure classes",
    "start": "1265200",
    "end": "1271440"
  },
  {
    "text": "that are holding on to this stuff now but now when I come down here and",
    "start": "1271440",
    "end": "1276840"
  },
  {
    "text": "say print out C1 and C2 when I print out C1 I get four when I print out C2 I get",
    "start": "1276840",
    "end": "1284640"
  },
  {
    "text": "one and here's the magic special thing about closures",
    "start": "1284640",
    "end": "1289840"
  },
  {
    "text": "because technically very local variable is out of scope by the time this",
    "start": "1289840",
    "end": "1294880"
  },
  {
    "text": "function ends but because I create a code block right here by putting that in",
    "start": "1294880",
    "end": "1300000"
  },
  {
    "text": "curly braces I instantiate a new code Block it's a closure because it encloses",
    "start": "1300000",
    "end": "1305600"
  },
  {
    "text": "the environment that is in place when that that closure block has been instantiated so it keeps its own version",
    "start": "1305600",
    "end": "1312559"
  },
  {
    "text": "a very local variable unique to C1 so that you can increment it across calls to this method it doesn't reset that",
    "start": "1312559",
    "end": "1319320"
  },
  {
    "text": "variable to zero every time because it's it's now kept captured in that closure",
    "start": "1319320",
    "end": "1325400"
  },
  {
    "text": "block that's why they're called closures it encloses the environment that was in place when it got instantiated and now",
    "start": "1325400",
    "end": "1331840"
  },
  {
    "text": "it can carry that environment around with its own instance of it until such time as the closure block itself gets",
    "start": "1331840",
    "end": "1337039"
  },
  {
    "text": "garbage collected and all that stuff goes away this is a great example of a functional language hiding",
    "start": "1337039",
    "end": "1344440"
  },
  {
    "text": "state from you hiding moving Parts because that state that you have to maintain is a",
    "start": "1344440",
    "end": "1351200"
  },
  {
    "text": "moving part that you have to maintain by hand in the Java World functional languages do this because it's really",
    "start": "1351200",
    "end": "1357679"
  },
  {
    "text": "nice to have code blocks that can have values that live beyond a single invocation so that you can do sums and a",
    "start": "1357679",
    "end": "1363960"
  },
  {
    "text": "lot of other useful things with them and so this is an example of letting the",
    "start": "1363960",
    "end": "1369120"
  },
  {
    "text": "language manage that state for us rather than having to do it by hand",
    "start": "1369120",
    "end": "1374679"
  },
  {
    "text": "and in fact this is one of the reasons why you should be interested in functional programming right",
    "start": "1374679",
    "end": "1380520"
  },
  {
    "text": "now because over time we're seeding more and more busy work to our languages and",
    "start": "1380520",
    "end": "1386400"
  },
  {
    "text": "our run times like memory allocation I don't know about you guys but I never want to work in a non-garbage collected",
    "start": "1386400",
    "end": "1393039"
  },
  {
    "text": "language again been there done that got the T-shirt life is just too short for",
    "start": "1393039",
    "end": "1398120"
  },
  {
    "text": "malok it just is it's just too much of a pain in the ass to deal with I've got better things to solve than dealing",
    "start": "1398120",
    "end": "1405080"
  },
  {
    "text": "chasing down pointer errors and junk like that so I like I thought the Advent of garbage collection was awesome I love",
    "start": "1405080",
    "end": "1410960"
  },
  {
    "text": "that feature and I never want to give it up but over time we're seeding more and more of our busy work to languages and",
    "start": "1410960",
    "end": "1417640"
  },
  {
    "text": "runtimes like concurrency closure basically does for concurrency what Java did for garbage collection in that it",
    "start": "1417640",
    "end": "1424760"
  },
  {
    "text": "takes over the assignment semantic and now you don't have to worry about threading anymore because that's just a",
    "start": "1424760",
    "end": "1430120"
  },
  {
    "text": "part of the the features of the runtime uh you're seeing more and more things hiding State even things like test there",
    "start": "1430120",
    "end": "1437440"
  },
  {
    "text": "are some really interesting specification based testing stuff going on the functional programming world that can write some really really intelligent",
    "start": "1437440",
    "end": "1444120"
  },
  {
    "text": "tests for you and so all of these things that we're seeing now we're seeing because our runtimes finally have enough",
    "start": "1444120",
    "end": "1451960"
  },
  {
    "text": "excess capacity to deal with these things so back in the early 1980s I was",
    "start": "1451960",
    "end": "1459000"
  },
  {
    "text": "in a university and we were using a piece of software called pan Pascal and",
    "start": "1459000",
    "end": "1464960"
  },
  {
    "text": "it had this crazy characteristic that it would run in an i M PC and an Apple 2 by",
    "start": "1464960",
    "end": "1471520"
  },
  {
    "text": "using this crazy technology they called bike code and when you compiled your passal code it compiled to bike code and",
    "start": "1471520",
    "end": "1478360"
  },
  {
    "text": "then they had a bike code interpreter that ran on each of those computers and it was a pig in terms of performance I",
    "start": "1478360",
    "end": "1484480"
  },
  {
    "text": "mean it was so slow it was ridiculous we were trying to write hello world programs and it was too slow to be useful because the runtime just didn't",
    "start": "1484480",
    "end": "1490960"
  },
  {
    "text": "have enough horsepower to handle bik code interpretation at runtime but you fast forward a decade",
    "start": "1490960",
    "end": "1496880"
  },
  {
    "text": "and Java comes out and they use that same approach and the run times are enough to handle that extra overhead of",
    "start": "1496880",
    "end": "1502960"
  },
  {
    "text": "garbage collection bite code interpretation it's exactly what we're seeing with a lot of these functional Concepts like map reduce and and those",
    "start": "1502960",
    "end": "1509520"
  },
  {
    "text": "other Concepts our run times now have enough excess capacity that it's actually foolish for us to waste mental",
    "start": "1509520",
    "end": "1516679"
  },
  {
    "text": "capacity on solving these problems that computers can just solve almost invisibly for our Stone and so over time",
    "start": "1516679",
    "end": "1522480"
  },
  {
    "text": "this happens more and more and the time is starting to come for a lot of these functional Concepts to make it into",
    "start": "1522480",
    "end": "1527840"
  },
  {
    "text": "mainstream languages and run times so as I'm talking about first",
    "start": "1527840",
    "end": "1534159"
  },
  {
    "start": "1531000",
    "end": "1988000"
  },
  {
    "text": "class functions this is actually the computer science typical computer science definition function can appear anywhere any other language construct",
    "start": "1534159",
    "end": "1540640"
  },
  {
    "text": "can appear of course we don't have that uh quite in Java yet but we can get",
    "start": "1540640",
    "end": "1547440"
  },
  {
    "text": "close using a library called functional",
    "start": "1549880",
    "end": "1555200"
  },
  {
    "text": "Java this is a library that's been around for a little while uh it's currently in version 2.x 2.8 I",
    "start": "1555360",
    "end": "1561760"
  },
  {
    "text": "think is it current version uh what it tries to do is give you as much functional programming capability in",
    "start": "1561760",
    "end": "1568159"
  },
  {
    "text": "Javas it can without changing a language so they use generics a lot to mimic code",
    "start": "1568159",
    "end": "1573720"
  },
  {
    "text": "blocks uh it's a pretty nice library in that uh it doesn't take an entire",
    "start": "1573720",
    "end": "1579080"
  },
  {
    "text": "maven's worth of drawer files to make it run there a single jar file as long as you have a Java 1.5 or higher and this",
    "start": "1579080",
    "end": "1585760"
  },
  {
    "text": "single jar file you can use functional Java so what I going to do is use functional Java and rewrite my number",
    "start": "1585760",
    "end": "1592000"
  },
  {
    "text": "classifier using some of these functional programming techniques and here it",
    "start": "1592000",
    "end": "1598080"
  },
  {
    "text": "is so let's look at some of the changes here's the first one in sum because sum",
    "start": "1598080",
    "end": "1604480"
  },
  {
    "text": "now if you remember used to iterate over the list of all the factors and sum each one of them up and so what sum does now",
    "start": "1604480",
    "end": "1610960"
  },
  {
    "text": "is say return factors. fold left add comma zero how is that summing something well",
    "start": "1610960",
    "end": "1618240"
  },
  {
    "text": "so let's pull some of this apart first of all notice this is not a Java list this is a functional Java list because",
    "start": "1618240",
    "end": "1623919"
  },
  {
    "text": "there's no fold left on a Java list so this is one from the functional Java world that add guy is actually an",
    "start": "1623919",
    "end": "1630039"
  },
  {
    "text": "enumeration that's also defined in the functional Java world so there's the entire namespace for it uh that's an ad",
    "start": "1630039",
    "end": "1637640"
  },
  {
    "text": "um U little ad function uh here's what's going on so think about a list of",
    "start": "1637640",
    "end": "1643880"
  },
  {
    "text": "numbers for a second what a fold does is say okay I want to convert that list of numbers",
    "start": "1643880",
    "end": "1649760"
  },
  {
    "text": "into a single value and the way that I'm going to do that is take the second element and fold it in on the first",
    "start": "1649760",
    "end": "1655399"
  },
  {
    "text": "element but I need to know what function to apply as this fold operation in other words I need to take two numbers and",
    "start": "1655399",
    "end": "1661240"
  },
  {
    "text": "convert them to one number you do that with an operator and the operator I'm going to use as ADD so I'm going to add",
    "start": "1661240",
    "end": "1667000"
  },
  {
    "text": "the second one to the first one and then I'm going to add what is now the new second one to the new first one and keep",
    "start": "1667000",
    "end": "1672559"
  },
  {
    "text": "doing that over and over that's what a fold operation does and I'm folding using add so that when I'm done with",
    "start": "1672559",
    "end": "1677919"
  },
  {
    "text": "this what I have left is the sum of the list that's a fold in the functional",
    "start": "1677919",
    "end": "1683000"
  },
  {
    "text": "programming world and that's exactly what I'm doing here with to get my sum of my factors I just say factors fold",
    "start": "1683000",
    "end": "1689120"
  },
  {
    "text": "left and I get a sum and given that there's a fold left you can also guess there's a fold right it doesn't matter",
    "start": "1689120",
    "end": "1695120"
  },
  {
    "text": "for plus if you fold left or right but some operators like minus and divide have a order preference and so a fold",
    "start": "1695120",
    "end": "1703039"
  },
  {
    "text": "right is if you wanted to subtract them all toward the end you could do a fold right",
    "start": "1703039",
    "end": "1708480"
  },
  {
    "text": "there are a bunch of these enumerations that have been predefined for you in functional Java for particular for mathematical kinds of things you can",
    "start": "1708480",
    "end": "1714480"
  },
  {
    "text": "write your own code blocks and insert in there and I'll show you an example of that in a second when we do",
    "start": "1714480",
    "end": "1719559"
  },
  {
    "text": "filtering this is has to be kind of bolted on to Java of course because uh through a framework but this is really",
    "start": "1719559",
    "end": "1725799"
  },
  {
    "text": "natural in languages that support support this natively this is the exact same code enclosure some factors method",
    "start": "1725799",
    "end": "1733440"
  },
  {
    "text": "a function that takes in a number as a parameter and this is being a list so you kind of read Inside Out factors of",
    "start": "1733440",
    "end": "1739760"
  },
  {
    "text": "numers a function call that Returns the list of all the factors reduce is just a synonym for fold left it's reducing the",
    "start": "1739760",
    "end": "1746360"
  },
  {
    "text": "list and plus is the method that I'm using to uh uh contract to to fold that",
    "start": "1746360",
    "end": "1752519"
  },
  {
    "text": "list down enclosure uh operators just methods with odd looking names and so",
    "start": "1752519",
    "end": "1757720"
  },
  {
    "text": "plus is just the the uh the method name for the ad operator in the closure",
    "start": "1757720",
    "end": "1763240"
  },
  {
    "text": "world this is a good example of another one of these kind of Core Concepts and functional programming world this idea",
    "start": "1763240",
    "end": "1769399"
  },
  {
    "text": "of using fold left and that is to think about results not about the steps required to get to those",
    "start": "1769399",
    "end": "1777080"
  },
  {
    "text": "results now I'm not for one moment going to suggest that SQL is a functional",
    "start": "1777080",
    "end": "1782159"
  },
  {
    "text": "programming language it's actually a weird amalgum of a bunch of different paradigms but it does share one",
    "start": "1782159",
    "end": "1787200"
  },
  {
    "text": "interesting characteristic in that when you issue a SQL query you generally",
    "start": "1787200",
    "end": "1792720"
  },
  {
    "text": "don't go and tell it where how to allocate memory on the database server and where on its file system go find",
    "start": "1792720",
    "end": "1798080"
  },
  {
    "text": "these records and put them together no you just say I want these results and you go get them and what we're trying to",
    "start": "1798080",
    "end": "1804159"
  },
  {
    "text": "do in the functional programming world is add some of that same kind of capability at the language level you don't have to worry about iteration say",
    "start": "1804159",
    "end": "1810519"
  },
  {
    "text": "here's the results I want you figure out the most efficient way to do this in fact the nice thing about this is Once",
    "start": "1810519",
    "end": "1816320"
  },
  {
    "text": "you turn this over to Machinery there's a really cool thing that rich hickey is talking about this year where he is",
    "start": "1816320",
    "end": "1822440"
  },
  {
    "text": "optimize the way that some of these mechanisms work in closure so that you can automatically get parallel behavior",
    "start": "1822440",
    "end": "1828600"
  },
  {
    "text": "and some of its list operations and closure because you're using these higher order functions and not trying to",
    "start": "1828600",
    "end": "1833679"
  },
  {
    "text": "iterate by hand the runtime can actually make some really Intelligent Decisions about optimization that you don't even",
    "start": "1833679",
    "end": "1839320"
  },
  {
    "text": "see they just kind of happen automatically so that's one of the the the original problems I had to solve",
    "start": "1839320",
    "end": "1846360"
  },
  {
    "text": "which was how to do a sum of numbers let's see if we can attack another one of those problems in a functional way",
    "start": "1846360",
    "end": "1851960"
  },
  {
    "text": "that is how to find the factors of a number so let's say 12 is my number in question I need to get the factors of 12",
    "start": "1851960",
    "end": "1858240"
  },
  {
    "text": "but I don't want to do iteration how can I do that the first thing you can do is observe that it's",
    "start": "1858240",
    "end": "1865399"
  },
  {
    "text": "going to be some of these numbers but probably not all of them these are all the possible factors of 12 I'm guessing",
    "start": "1865399",
    "end": "1872440"
  },
  {
    "text": "that not all of them are factors of 12 it's only some of them which suggest a filtering operation I need to take that",
    "start": "1872440",
    "end": "1878720"
  },
  {
    "text": "entire set of numbers and filter down to just the ones that are factors of 12 which is exactly what this code does",
    "start": "1878720",
    "end": "1888039"
  },
  {
    "text": "factors of takes in uh a number it then returns a range from one to number plus",
    "start": "1888039",
    "end": "1894320"
  },
  {
    "text": "one because ranges are non- inclusive in functional Java do filter filter takes in a code block that",
    "start": "1894320",
    "end": "1902320"
  },
  {
    "text": "uses uh this class in functional Java there's a capital f class that has an F method that stands in for a code block",
    "start": "1902320",
    "end": "1908679"
  },
  {
    "text": "and you can use generics to satisfy the type system so here what I need is a uh",
    "start": "1908679",
    "end": "1914200"
  },
  {
    "text": "function that takes an integer and returns a Boolean and I'll create that as an anonymous inner class like this",
    "start": "1914200",
    "end": "1920639"
  },
  {
    "text": "and you'll notice what I'm returning there is my is Factor method that I created before so what this is going to",
    "start": "1920639",
    "end": "1926399"
  },
  {
    "text": "do is for every element in the list it's going to apply this filter method and only the ones that return true for is",
    "start": "1926399",
    "end": "1932559"
  },
  {
    "text": "Factor are going to make it in this returned list so it's filtering down my list uh to give me only the numbers that",
    "start": "1932559",
    "end": "1938360"
  },
  {
    "text": "are factors of 12 but is this as efficient as the hand",
    "start": "1938360",
    "end": "1946760"
  },
  {
    "text": "tuned imperative version that we saw not even close because this is going",
    "start": "1946760",
    "end": "1953120"
  },
  {
    "text": "to touch every number remember in the in the imperative version I'd gone in and did that square root optimization to",
    "start": "1953120",
    "end": "1959639"
  },
  {
    "text": "make it much more efficient and I've lost that here sometimes when you see control to",
    "start": "1959639",
    "end": "1964720"
  },
  {
    "text": "run times you lose some of that control I'll actually come and grab this control back in just a bit uh but notice there's",
    "start": "1964720",
    "end": "1971279"
  },
  {
    "text": "a a trade off there we can also fix this in a functional way and I would I'll do it just a",
    "start": "1971279",
    "end": "1976639"
  },
  {
    "text": "bit but but this is what my functional Java version of my number classifier looks thinking about results rather than",
    "start": "1976639",
    "end": "1984200"
  },
  {
    "text": "thinking about steps so next I want to talk a little",
    "start": "1984200",
    "end": "1989919"
  },
  {
    "start": "1988000",
    "end": "2439000"
  },
  {
    "text": "bit about pure functions which are functions that have no memory or IO side effects and when you have pure functions",
    "start": "1989919",
    "end": "1996480"
  },
  {
    "text": "your runtime can do some really useful things with it because if the result isn't used anywhere the runtime can just",
    "start": "1996480",
    "end": "2002120"
  },
  {
    "text": "strip the entire code out of your runtime you can also get parallel execution automatically by the time",
    "start": "2002120",
    "end": "2008559"
  },
  {
    "text": "which means it can also change the execution order because you don't rely on external state it doesn't matter what execution order",
    "start": "2008559",
    "end": "2015080"
  },
  {
    "text": "happens and all those are kind of optimizations that the runtime can handle for you but here's the really",
    "start": "2015080",
    "end": "2020159"
  },
  {
    "text": "cool one notice that if you have a function that only relies on its",
    "start": "2020159",
    "end": "2027120"
  },
  {
    "text": "parameters every time you call it with a certain value past the first time you call it with a certain parameter the",
    "start": "2027120",
    "end": "2033039"
  },
  {
    "text": "results are just going to be the same it's going to be a constant result so for example math. sign in Java is a pure",
    "start": "2033039",
    "end": "2039240"
  },
  {
    "text": "function when you call S of 90 then you know that you're always going to get the",
    "start": "2039240",
    "end": "2044559"
  },
  {
    "text": "same value back it's not like that one time you call S of 90 you get one value back and another time you get another one so if you thought that you were",
    "start": "2044559",
    "end": "2051280"
  },
  {
    "text": "going to use the sign of 90 a lot you could actually cash that and say every time you want this value I'll just",
    "start": "2051280",
    "end": "2056599"
  },
  {
    "text": "automatically return it from the cash a particular invocation with a with a particular set of parameters yields a",
    "start": "2056599",
    "end": "2063480"
  },
  {
    "text": "constant value and runtimes can start taking advantage of this with a feature feature called",
    "start": "2063480",
    "end": "2069320"
  },
  {
    "text": "memorization so let me show you what I mean by this so here is a really tur",
    "start": "2069320",
    "end": "2074839"
  },
  {
    "text": "perfect uh number classifier written in groovy using a bunch of this functional stuff that I've been talking about so",
    "start": "2074839",
    "end": "2080638"
  },
  {
    "text": "there is my is factor that hasn't really changed factors of this is the The turer Groovy version one to number that gives",
    "start": "2080639",
    "end": "2087560"
  },
  {
    "text": "you a range. findall and it's using my is Factor so this is the same as my U",
    "start": "2087560",
    "end": "2093720"
  },
  {
    "text": "filter method I was using before and now in in The Groovy World in instead of reduce it's they called it inject but it",
    "start": "2093720",
    "end": "2100400"
  },
  {
    "text": "does the exact same thing so factors of number do inject using zero the starting value and this is the code block that",
    "start": "2100400",
    "end": "2106760"
  },
  {
    "text": "you apply to collapse two elements into a single element which I'm adding them together with plus and then there's my",
    "start": "2106760",
    "end": "2112240"
  },
  {
    "text": "is perfect is abundant is deficient so this is a groovy version of number classifier where every method is down to",
    "start": "2112240",
    "end": "2117640"
  },
  {
    "text": "a one liner but let's say that I have this and I realize that I end up calling",
    "start": "2117640",
    "end": "2123839"
  },
  {
    "text": "some a lot I try to classify the same numbers a lot in my problem domain so I end up summing the same numbers a bunch",
    "start": "2123839",
    "end": "2129960"
  },
  {
    "text": "of times and that's really inefficient so what I want to do is cash that sum so",
    "start": "2129960",
    "end": "2135040"
  },
  {
    "text": "every time I sum a particular number save that in the cash I won't have to do it again and so in groovy you create a",
    "start": "2135040",
    "end": "2141160"
  },
  {
    "text": "hashmap like that and now my sum of factors says well if if I have already sumed this one before return it",
    "start": "2141160",
    "end": "2147800"
  },
  {
    "text": "otherwise do the calculation sum it and then add it to my",
    "start": "2147800",
    "end": "2153160"
  },
  {
    "text": "cash but groovy since $ 8.4 which is about 6 or eight months old now has this",
    "start": "2155319",
    "end": "2161880"
  },
  {
    "text": "feature called memo wise and so if if this is a pure function if sum factors",
    "start": "2161880",
    "end": "2167400"
  },
  {
    "text": "is a pure function which it is I can now come down here and say sum of factors is equal to sum factors. memo wise and I am",
    "start": "2167400",
    "end": "2176640"
  },
  {
    "text": "done now the runtime caches those values for me that handcrafted cache that I",
    "start": "2176640",
    "end": "2183319"
  },
  {
    "text": "created is useless now because the runtime is doing this in fact I'll point",
    "start": "2183319",
    "end": "2188720"
  },
  {
    "text": "you to I've written up a bunch of these observations in an article series I'm working uh writing for IBM developer",
    "start": "2188720",
    "end": "2194400"
  },
  {
    "text": "works and I wrote several installments ago I wrote this article about memoization as hard as I could I could",
    "start": "2194400",
    "end": "2201359"
  },
  {
    "text": "not write any caching code that beat the run times memoization code and you can",
    "start": "2201359",
    "end": "2206400"
  },
  {
    "text": "also uh tweak this cache you can say mimiz at most this number of elements mimo at least this number you can do a",
    "start": "2206400",
    "end": "2213440"
  },
  {
    "text": "bunch of tweaking for the internal cache that memo wise uses this this is a great example of eliminating moving Parts",
    "start": "2213440",
    "end": "2221400"
  },
  {
    "text": "because now you don't have to handr write a cache anymore if you have something that's used a lot you just say oh that's used a lot memorize it and",
    "start": "2221400",
    "end": "2228560"
  },
  {
    "text": "Shazam you're done remember back over here in my",
    "start": "2228560",
    "end": "2234359"
  },
  {
    "text": "slightly more functional version of my number classier and one of the things I was lamenting was the fact that I lost",
    "start": "2234359",
    "end": "2240800"
  },
  {
    "text": "my uh my lazy initialization but that guy's a pure function so I could memorize that guy",
    "start": "2240800",
    "end": "2247880"
  },
  {
    "text": "and get my lazy initialization back great example of eliminating moving",
    "start": "2247880",
    "end": "2255960"
  },
  {
    "text": "Parts handcrafted code that you don't have to write because the runtime can do it for",
    "start": "2255960",
    "end": "2261800"
  },
  {
    "text": "you so as nice as it is to seed things to the runtime sometimes you want to get",
    "start": "2261800",
    "end": "2267079"
  },
  {
    "text": "that control back what about things that you want to control like for example Performance or",
    "start": "2267079",
    "end": "2274119"
  },
  {
    "text": "optimization notice that even database servers let you do this I was using as a metaphor before a lot of times you can",
    "start": "2274119",
    "end": "2279800"
  },
  {
    "text": "go in and hand tune the optimization plan for a database server you kind of do the same thing here but it's just a",
    "start": "2279800",
    "end": "2286920"
  },
  {
    "text": "set of new different tools so you remember over in my imperative number classifier one of the",
    "start": "2286920",
    "end": "2292359"
  },
  {
    "text": "things I did was optimized it by using the square root trick but in my",
    "start": "2292359",
    "end": "2298040"
  },
  {
    "text": "functional Java version I'd lost that so let's go get it",
    "start": "2298040",
    "end": "2304079"
  },
  {
    "text": "back here's an optimized factors in functional Java world what I have to do",
    "start": "2304160",
    "end": "2309880"
  },
  {
    "text": "is attack this problem differently I have to partition the problem myself so",
    "start": "2309880",
    "end": "2315599"
  },
  {
    "text": "what I'm going to do is say uh give me uh the the factors I'm going to create an intermediate variable called factors",
    "start": "2315599",
    "end": "2322319"
  },
  {
    "text": "which has the range from one to the square root plus one remember ranges are",
    "start": "2322319",
    "end": "2327480"
  },
  {
    "text": "non-inclusive in functional Java and I'm going to filter those to get me the factors and so what I'm getting with",
    "start": "2327480",
    "end": "2333160"
  },
  {
    "text": "that first chunk of code are all the factors up to the square root",
    "start": "2333160",
    "end": "2339440"
  },
  {
    "text": "then the second line of code in this in this method says return factors. append",
    "start": "2339720",
    "end": "2345440"
  },
  {
    "text": "so I'm going to append onto the list I have some other factors some other numbers and the numbers I'm going to",
    "start": "2345440",
    "end": "2352119"
  },
  {
    "text": "append are factors. map we haven't seen map before this is another one of those",
    "start": "2352119",
    "end": "2357880"
  },
  {
    "text": "list Transformations what map does is apply this function to every element in",
    "start": "2357880",
    "end": "2363040"
  },
  {
    "text": "the collection and giving you a new collection when it's done so it's basically going to take one whatever function I pass in and apply it to each",
    "start": "2363040",
    "end": "2369680"
  },
  {
    "text": "element of the collection my collection are the factors below the square root the code that I'm applying to each one",
    "start": "2369680",
    "end": "2375640"
  },
  {
    "text": "of those is say give me the number above the square root so it's the symmetrical Factor the div versus the mod of that",
    "start": "2375640",
    "end": "2382599"
  },
  {
    "text": "and so what I'm doing is tagging on the remaining factors onto the end of the list by doing that so I'm basically",
    "start": "2382599",
    "end": "2390200"
  },
  {
    "text": "going and harvesting the two sets of factors in pairs or or harvest them in",
    "start": "2390200",
    "end": "2395760"
  },
  {
    "text": "not in pairs but in uh serially to get the pairs and the last line here is this nub what nub does is uh remove",
    "start": "2395760",
    "end": "2404560"
  },
  {
    "text": "duplications basically turning a list into a set I would have done the entire thing on the back of sets in functional",
    "start": "2404560",
    "end": "2410079"
  },
  {
    "text": "Java but they don't have the same set of methods on sets uh this is actually better done on sets just to",
    "start": "2410079",
    "end": "2415400"
  },
  {
    "text": "automatically get rid of duplications but n basically converts it to a set when you're done there's an edge case here for whole number square root that",
    "start": "2415400",
    "end": "2421800"
  },
  {
    "text": "you have to watch out for but nub handles that very nicely",
    "start": "2421800",
    "end": "2427359"
  },
  {
    "text": "good example of thinking about results not about steps thinking about the problem slightly differently but uh",
    "start": "2428000",
    "end": "2434079"
  },
  {
    "text": "still getting the same kind of",
    "start": "2434079",
    "end": "2437280"
  },
  {
    "start": "2439000",
    "end": "2454000"
  },
  {
    "text": "optimization so let's talk next about concurrency because probably one of the",
    "start": "2440200",
    "end": "2446119"
  },
  {
    "text": "really cool things you've heard about uh these functional programming languages is that they have a much better concurrency story than kind of raw Java",
    "start": "2446119",
    "end": "2453240"
  },
  {
    "text": "does and that's absolutely true uh in fact uh there's a great keynote that I go encourage you to watch there's",
    "start": "2453240",
    "end": "2459240"
  },
  {
    "start": "2454000",
    "end": "2487000"
  },
  {
    "text": "actually going to be a keynote by Rich later today and I encourage you to watch that one too but there was a keynote at strange Loop last year in St Louis",
    "start": "2459240",
    "end": "2466240"
  },
  {
    "text": "called Simple Made Easy uh that uh Rich uh did and he explains some of the",
    "start": "2466240",
    "end": "2471440"
  },
  {
    "text": "philosophy behind closure it makes you realize that closure is more of a vision for software development that you could",
    "start": "2471440",
    "end": "2477480"
  },
  {
    "text": "only really Implement by writing new language uh while I was looking at this picture for Rich I also found this funny",
    "start": "2477480",
    "end": "2482720"
  },
  {
    "text": "picture of Rich and that's a very rich like statement State you're doing it wrong because he doesn't like a very",
    "start": "2482720",
    "end": "2488480"
  },
  {
    "start": "2487000",
    "end": "2602000"
  },
  {
    "text": "mutable State and and one of the things that rich did was figure out what makes threading so hard in",
    "start": "2488480",
    "end": "2496280"
  },
  {
    "text": "Java and it turns out it's variables because when they created Java",
    "start": "2496280",
    "end": "2502920"
  },
  {
    "text": "they didn't really think about concurrency when they were creating variables they created variables and all that mechanism and they said oh we may",
    "start": "2502920",
    "end": "2509640"
  },
  {
    "text": "need to run this in Threads we need to layer on some threading stuff on top of this but variables assume one thread of",
    "start": "2509640",
    "end": "2515640"
  },
  {
    "text": "control in one timeline they're also not Atomic you can't say make sure that these two variables get set or neither",
    "start": "2515640",
    "end": "2522359"
  },
  {
    "text": "of them get set there's no kind of transactionality around them it's hard to compose them they have very subtle",
    "start": "2522359",
    "end": "2527800"
  },
  {
    "text": "visibility rules and the concurrency perimeters in Java you're pretty much at lock and prey it's just not a very",
    "start": "2527800",
    "end": "2535520"
  },
  {
    "text": "elegant um way of doing a concurrent code in",
    "start": "2535520",
    "end": "2541520"
  },
  {
    "text": "Java uh if you think that you know how to do it you should read Java concurrency and practice by Brian GBS",
    "start": "2541520",
    "end": "2546680"
  },
  {
    "text": "who will con Vin you that you've been doing it wrong all along it's a way harder problem than you ever thought it",
    "start": "2546680",
    "end": "2553440"
  },
  {
    "text": "was and really the core of the problem here is is",
    "start": "2553760",
    "end": "2559440"
  },
  {
    "text": "variables the problem is that the concept of variable in Java conflates too much on top of it because in Java",
    "start": "2559960",
    "end": "2567280"
  },
  {
    "text": "the the identity and the value are kind of inextricably tied together in this one thing we call a variable and it's",
    "start": "2567280",
    "end": "2573480"
  },
  {
    "text": "really hard to logic about that because at any given time it's identity value may change which is really tough to do",
    "start": "2573480",
    "end": "2580319"
  },
  {
    "text": "reasoning about particularly in a scenario where you got multiple things trying to address it at any given time",
    "start": "2580319",
    "end": "2586119"
  },
  {
    "text": "what Rich did was say you know what I can fix the concurrency problem in Java but you have to give me something let me",
    "start": "2586119",
    "end": "2593000"
  },
  {
    "text": "handle all of your variable assignments if you'll let me take over that semantic",
    "start": "2593000",
    "end": "2598839"
  },
  {
    "text": "then I'll make all your threading problems go away and so that's what he did in closure in closure there's really",
    "start": "2598839",
    "end": "2604400"
  },
  {
    "start": "2602000",
    "end": "2649000"
  },
  {
    "text": "only one mutable thing and it's a reference to something and a reference never goes away but the",
    "start": "2604400",
    "end": "2610480"
  },
  {
    "text": "value that it points to may change so he's basically taken the concept of variable and split it into two pieces an",
    "start": "2610480",
    "end": "2616040"
  },
  {
    "text": "identity which never changes and the value that it's pointing to which may change at some point in time so at a",
    "start": "2616040",
    "end": "2623359"
  },
  {
    "text": "given point in time the identity points to a value you may update it which means that it now points to a different value",
    "start": "2623359",
    "end": "2630599"
  },
  {
    "text": "closure has a very explicit semantic to control that and if they can control that then they can uh handle the",
    "start": "2630599",
    "end": "2637240"
  },
  {
    "text": "threading concurrency issues for you this is software transaction memory so when you update a reference en closure",
    "start": "2637240",
    "end": "2643720"
  },
  {
    "text": "it always happens inside a transaction and uh handles all these studying concerns for you so basically what Rich",
    "start": "2643720",
    "end": "2650040"
  },
  {
    "start": "2649000",
    "end": "2701000"
  },
  {
    "text": "has done and he's going to do that with values today he's he's on a campaign to add temporality to the computer science",
    "start": "2650040",
    "end": "2657599"
  },
  {
    "text": "world and it's long overdue because he makes a really good point that nothing makes sense without a Tim",
    "start": "2657599",
    "end": "2664680"
  },
  {
    "text": "stamp um even a fact like the sky is blue no it's not it's blue between",
    "start": "2664680",
    "end": "2669880"
  },
  {
    "text": "certain times of the day you can't make Universal facts about things without supplying some sort of temporal context",
    "start": "2669880",
    "end": "2675680"
  },
  {
    "text": "to them almost always and we don't do that in programming language as much so in in the closure world of value is an",
    "start": "2675680",
    "end": "2681400"
  },
  {
    "text": "immutable data and a persistent data structure somewhere identity is a series of causally related values over time the",
    "start": "2681400",
    "end": "2687720"
  },
  {
    "text": "identity points to values that may change over time the identity doesn't change state is identity at a given",
    "start": "2687720",
    "end": "2693680"
  },
  {
    "text": "point in time and time is relative before before after simultaneous",
    "start": "2693680",
    "end": "2699079"
  },
  {
    "text": "ordering of events and so what happens in the closure world is identity is a succession of states that moves from one",
    "start": "2699079",
    "end": "2705079"
  },
  {
    "start": "2701000",
    "end": "2741000"
  },
  {
    "text": "state to another by applying pure functions to Move It from one state to another uh that's how you update things",
    "start": "2705079",
    "end": "2711160"
  },
  {
    "text": "through pure functions at some point some Observer some other program or some user or somebody is going to look at",
    "start": "2711160",
    "end": "2717839"
  },
  {
    "text": "that identity and dreference it and find out what its value is at that point in time that is its state at a given point",
    "start": "2717839",
    "end": "2724760"
  },
  {
    "text": "in time the value pointed to by an identity is its",
    "start": "2724760",
    "end": "2730200"
  },
  {
    "text": "state the other thing that that closure does is give you a way to consolidate",
    "start": "2731200",
    "end": "2737000"
  },
  {
    "text": "variable access and and give you basically acid characteristics around variables in fact it's almost acid so in",
    "start": "2737000",
    "end": "2744319"
  },
  {
    "text": "the transactional world you talk about Atomic consistent isolated and durable uh we have ACI we don't have durable",
    "start": "2744319",
    "end": "2750680"
  },
  {
    "text": "because this all happens in memory but we do have Atomic uh consistent and U",
    "start": "2750680",
    "end": "2756359"
  },
  {
    "text": "what is it well the ACI I just said them in a second ago now I can't remember what",
    "start": "2756359",
    "end": "2761480"
  },
  {
    "text": "they are um Atomic consistent isolated uh across several different variables",
    "start": "2761480",
    "end": "2767160"
  },
  {
    "text": "and the the underlying mechanism is kind of sophisticated but the Syntax for doing it is is very quite simple so in",
    "start": "2767160",
    "end": "2774280"
  },
  {
    "text": "the closure world if I wanted to create a reference let's say I want to keep track of a list of messages let's say",
    "start": "2774280",
    "end": "2779359"
  },
  {
    "text": "I'm creating a chat application I want to create a list of messages the way that I do that is Define a messages",
    "start": "2779359",
    "end": "2784960"
  },
  {
    "text": "variable and it points to a reference that is a reference to an empty list right now so that's an identity and the",
    "start": "2784960",
    "end": "2792240"
  },
  {
    "text": "initial value there is just an empty list I can now dreference that reference",
    "start": "2792240",
    "end": "2798000"
  },
  {
    "text": "at any time that I want to by calling the DF function on it which now gives me an empty list because I don't have any messages in it there's also syntactic",
    "start": "2798000",
    "end": "2805000"
  },
  {
    "start": "2799000",
    "end": "2810000"
  },
  {
    "text": "sugar enclosure to say at messages which does the same as doing a d if I want to",
    "start": "2805000",
    "end": "2810880"
  },
  {
    "start": "2810000",
    "end": "2825000"
  },
  {
    "text": "alter a message I can call an alter function give it the old value and an update function and want it'll do is",
    "start": "2810880",
    "end": "2817680"
  },
  {
    "text": "move this from the old value pointing to the new value by applying this whatever this U this update function is so here's",
    "start": "2817680",
    "end": "2825480"
  },
  {
    "start": "2825000",
    "end": "2942000"
  },
  {
    "text": "what this looks like if I was actually adding a message to my message list this is a an add message function that takes",
    "start": "2825480",
    "end": "2832880"
  },
  {
    "text": "in a message and what it says is Alter the messages list and conjoin the new",
    "start": "2832880",
    "end": "2838760"
  },
  {
    "text": "message onto the end of it that's basically what that line of code says but you'll also notice do sync over here",
    "start": "2838760",
    "end": "2845839"
  },
  {
    "text": "because this guy is a reference the only way you can update that guy is within a transaction enclosure that's the only",
    "start": "2845839",
    "end": "2852599"
  },
  {
    "text": "way you can mutate references is within a transaction if you try to execute this code without doe sync being there the",
    "start": "2852599",
    "end": "2859119"
  },
  {
    "text": "closure runtime will actually throw an exception at you that you're trying to update reference outside a transaction",
    "start": "2859119",
    "end": "2864720"
  },
  {
    "text": "which is not allowed in closure but by doing that he is now",
    "start": "2864720",
    "end": "2870599"
  },
  {
    "text": "created a scenario where you can write multi-threaded code you never have to worry about Deadlocks there are no no",
    "start": "2870599",
    "end": "2877000"
  },
  {
    "text": "race conditions uh writers never block readers and basically all the things that you have to to craft by hand just",
    "start": "2877000",
    "end": "2883720"
  },
  {
    "text": "kind of go away and so because he's taking over concurrency he can also do a lot of really nice things uh around",
    "start": "2883720",
    "end": "2890839"
  },
  {
    "text": "optimization at the language level that just automatically makes things better for you without you having to do",
    "start": "2890839",
    "end": "2896119"
  },
  {
    "text": "anything because now just like garbage collection has sunk down to the level of the platform so is",
    "start": "2896119",
    "end": "2902880"
  },
  {
    "text": "concurrency this is very ambitious in fact uh several other languages have cried to tried to create STM uh hasell",
    "start": "2902880",
    "end": "2909960"
  },
  {
    "text": "very famously has software transactional memory they tried it in C and then",
    "start": "2909960",
    "end": "2915040"
  },
  {
    "text": "abandoned the effort a few years ago because trying to create software transactional memory in a place that has",
    "start": "2915040",
    "end": "2921359"
  },
  {
    "text": "rif with mutable state is just too impossibly complex to do high school can do it because they favor immutability so",
    "start": "2921359",
    "end": "2927800"
  },
  {
    "text": "can closure uh so it's a very really sophisticated mechanism that it requires rethinking some core things at the",
    "start": "2927800",
    "end": "2934240"
  },
  {
    "text": "language level to make work and so that's how closure is possible to do this and why it's very difficult to do in other languages that weren't written",
    "start": "2934240",
    "end": "2940559"
  },
  {
    "text": "with this in mind from the ground up so closure is very ambitious and they've they've basically Rewritten a lot of",
    "start": "2940559",
    "end": "2946359"
  },
  {
    "text": "your basic assumptions about the world clo Scola is not trying to be quite that ambitious and what they're trying to do",
    "start": "2946359",
    "end": "2951920"
  },
  {
    "text": "is build a bridge from the kind of world that you know into the functional World Paving it a little more nicely for uh",
    "start": "2951920",
    "end": "2958640"
  },
  {
    "text": "people who are used to objector imperative code and so what closure what uh schola has done one of the nice",
    "start": "2958640",
    "end": "2964400"
  },
  {
    "text": "concurrent features that they've added is this idea of actors uh which is much closer to the kind of a",
    "start": "2964400",
    "end": "2969640"
  },
  {
    "text": "Java model without having to worry about synchronized blocks things like that so here's an example uh this one only does",
    "start": "2969640",
    "end": "2975480"
  },
  {
    "text": "perfect numbers but notice that uh if you got a number like 16 for example and",
    "start": "2975480",
    "end": "2980640"
  },
  {
    "text": "you had four processors on your machine when you're trying to determine if factors uh if a particular number is a",
    "start": "2980640",
    "end": "2986200"
  },
  {
    "text": "factor those can all run in parallel so you could say you know what processor one you handle number 1 through four and",
    "start": "2986200",
    "end": "2991559"
  },
  {
    "text": "see if any of those are factors and processor two you handle 5 through eight you can partition it up that way because",
    "start": "2991559",
    "end": "2996720"
  },
  {
    "text": "none of these things are dependent on one another so that's what I'm going to do with actors in Scola so I'll go here",
    "start": "2996720",
    "end": "3002480"
  },
  {
    "text": "and create a a parallel perfect number finder uh create a range of of values of",
    "start": "3002480",
    "end": "3007760"
  },
  {
    "text": "of this is going to be how many partitions I want to have which may be number of CPUs or something like that",
    "start": "3007760",
    "end": "3013559"
  },
  {
    "text": "and now for uh for each one of those partitions I'll create the lower and upper range by partitioning my space and",
    "start": "3013559",
    "end": "3021160"
  },
  {
    "text": "then create an actor and so it's going to do this for each one of these ranges and inside this actor I can create",
    "start": "3021160",
    "end": "3026760"
  },
  {
    "text": "variables that are local to this actor uh but can also be used as accumulators and so here what I'm doing is going",
    "start": "3026760",
    "end": "3032839"
  },
  {
    "text": "through each one of the ones in my partial and if this uh basically if J",
    "start": "3032839",
    "end": "3038920"
  },
  {
    "text": "goes into canate with zero remainder added the partial sum and now I'm messaging this partial sum back to who",
    "start": "3038920",
    "end": "3045400"
  },
  {
    "text": "launched the actor this is using kind of the erlang uh message passing model uh",
    "start": "3045400",
    "end": "3050480"
  },
  {
    "text": "for currency and so a little bit further down I kick off all these actors by",
    "start": "3050480",
    "end": "3055680"
  },
  {
    "text": "saying while I've got responses expected uh start receiving these messages and when you receive a partial sum you",
    "start": "3055680",
    "end": "3061839"
  },
  {
    "text": "gather it up add it to the sum that I'm building decrement the number of responses I'm expecting when I've got them all then the return of this thing",
    "start": "3061839",
    "end": "3068960"
  },
  {
    "text": "ultimately is do sum equal two times the candidate which is my criteria for is it a perfect number or not so I could",
    "start": "3068960",
    "end": "3075960"
  },
  {
    "text": "actually make this a little more elaborate and handle all the the classification scenarios but this one just handles perfect numbers but it does",
    "start": "3075960",
    "end": "3082440"
  },
  {
    "text": "so uh spreading across uh all the uh the possible processors so it's a a",
    "start": "3082440",
    "end": "3088480"
  },
  {
    "text": "different way it's a way of doing concurrency in a in a new different way and it's another great example of hiding",
    "start": "3088480",
    "end": "3094160"
  },
  {
    "text": "moving Parts all the synchronized blocks and all this other coordination that you'd have to do if you were trying to write this in in Java or groovy have not",
    "start": "3094160",
    "end": "3101640"
  },
  {
    "text": "gone away because this actor abstraction is hidden all those details from you and you could actually call actors from uh",
    "start": "3101640",
    "end": "3107799"
  },
  {
    "text": "the Java World by calling AA which is the framework on top of that actor's",
    "start": "3107799",
    "end": "3113680"
  },
  {
    "text": "Library so I've just got a couple minutes left so I want to leave you with some thoughts about how you can start",
    "start": "3113680",
    "end": "3119520"
  },
  {
    "start": "3114000",
    "end": "3129000"
  },
  {
    "text": "doing this yourself how how is this going to apply to your day job when you go back to work on Monday you can",
    "start": "3119520",
    "end": "3125720"
  },
  {
    "text": "already start moving in this direction a little bit start thinking about immutability overstate transitions uh",
    "start": "3125720",
    "end": "3133240"
  },
  {
    "start": "3129000",
    "end": "3211000"
  },
  {
    "text": "there's actually a great article Here by Brian GS about the benefits of immutability in uh the Java world and",
    "start": "3133240",
    "end": "3140079"
  },
  {
    "text": "they are there are some extreme benefits including automatic thread safety and uh this thing that Josh block",
    "start": "3140079",
    "end": "3147359"
  },
  {
    "text": "calls failure atomicity because there's a rule in Java that constructors never throw exceptions you either get a real",
    "start": "3147359",
    "end": "3153640"
  },
  {
    "text": "instantiated object back or you get null back and if you have an immutable object if you get an object back you know that",
    "start": "3153640",
    "end": "3160000"
  },
  {
    "text": "it will never fail because of any kind of update scenario because you can only set it state in the Constructor uh so",
    "start": "3160000",
    "end": "3165799"
  },
  {
    "text": "you know that there's no way that it's going to be in a failure state after that because you can't change any part of it after",
    "start": "3165799",
    "end": "3171520"
  },
  {
    "text": "that a fun way to find out how much you rely on state transitions in your code",
    "start": "3171520",
    "end": "3176559"
  },
  {
    "text": "is to go back and in your code base do a a global search and replace uh and find",
    "start": "3176559",
    "end": "3181799"
  },
  {
    "text": "the word PRI uh private and change it to private final and then try to compile your code you'll get what I call your",
    "start": "3181799",
    "end": "3188440"
  },
  {
    "text": "mutability score how many places are you mutating things uh and you can start chasing a few of those away of course in",
    "start": "3188440",
    "end": "3194640"
  },
  {
    "text": "the Java world immutability is kind of a foreign concept and so virtually none of the Frameworks and tools like hibernate",
    "start": "3194640",
    "end": "3201040"
  },
  {
    "text": "and orms don't really uh support that very nicely but uh certainly for little value objects things like that you can",
    "start": "3201040",
    "end": "3207240"
  },
  {
    "text": "make them immutable and you get some definite benefits from the runtime from doing that start thinking about results over",
    "start": "3207240",
    "end": "3213559"
  },
  {
    "start": "3211000",
    "end": "3230000"
  },
  {
    "text": "steps the next time you start to write an iterator for something or or iterate through a loop think about now how would",
    "start": "3213559",
    "end": "3219000"
  },
  {
    "text": "I do this if I couldn't iterate over it that's one way to start thinking about how can I apply some sort of higher",
    "start": "3219000",
    "end": "3224640"
  },
  {
    "text": "order function this problem and U try to attack",
    "start": "3224640",
    "end": "3229720"
  },
  {
    "text": "it and try to think about composition over structure uh this is uh one of the",
    "start": "3229720",
    "end": "3235200"
  },
  {
    "start": "3230000",
    "end": "3291000"
  },
  {
    "text": "kind of sub observations that that happens through the course of this talk and that in the objectoriented world the",
    "start": "3235200",
    "end": "3240920"
  },
  {
    "text": "way that we try to solve problems is to write class diagrams and then save off",
    "start": "3240920",
    "end": "3246000"
  },
  {
    "text": "useful class diagrams the design patterns book every single example comes with a class diagram because that's the",
    "start": "3246000",
    "end": "3251359"
  },
  {
    "text": "way you solve problems as networks of classes that's not the way that they solve problems typically in the functional programming world where they",
    "start": "3251359",
    "end": "3258079"
  },
  {
    "text": "really want a very few data structures and a lot of operations on those few data structures so uh lists sets Maps a",
    "start": "3258079",
    "end": "3265920"
  },
  {
    "text": "few very simple core data structures and they build really hyper optimized machinery for those core data structures",
    "start": "3265920",
    "end": "3272880"
  },
  {
    "text": "and make those really fast and they expect you send in data Plus cost customization in terms of higher order",
    "start": "3272880",
    "end": "3278359"
  },
  {
    "text": "functions and then let the optimized Machinery handle that stuff it's all actually based on category Theory and a",
    "start": "3278359",
    "end": "3284280"
  },
  {
    "text": "bunch of really fascinating mathematics but uh that's a the way that they're trying to achieve reuse is uh in a more",
    "start": "3284280",
    "end": "3290079"
  },
  {
    "text": "generic way and notice a lot of this results over steps is really declarative over",
    "start": "3290079",
    "end": "3295799"
  },
  {
    "start": "3291000",
    "end": "3327000"
  },
  {
    "text": "imperative code and one of the places that you see that a lot are things like domain specific languages uh which a lot",
    "start": "3295799",
    "end": "3302480"
  },
  {
    "text": "of people associate with dynamic programming languages but uh both schola and closure are really good first class",
    "start": "3302480",
    "end": "3308880"
  },
  {
    "text": "citizens in terms of writing being able to write dsls in them one of the the stated design goals of Scala in fact was",
    "start": "3308880",
    "end": "3314960"
  },
  {
    "text": "to be a good host for dsls and it is a very good host for dsls even though it has very strong static typing uh a lot",
    "start": "3314960",
    "end": "3321839"
  },
  {
    "text": "of the type inferencing makes that go away and makes for very nice elegant dsls",
    "start": "3321839",
    "end": "3328079"
  },
  {
    "start": "3327000",
    "end": "3410000"
  },
  {
    "text": "so to summarize going functional gives you new ways of thinking about old problems more",
    "start": "3328119",
    "end": "3334680"
  },
  {
    "text": "and more you can see control to languages and run times and mostly these are things you would like to see control",
    "start": "3334680",
    "end": "3339880"
  },
  {
    "text": "for because it's just too hard to get correct or there's no huge benefit of getting it correct I mean you can write",
    "start": "3339880",
    "end": "3346880"
  },
  {
    "text": "thread correct code in Java if you're very very attention oriented and you go",
    "start": "3346880",
    "end": "3352079"
  },
  {
    "text": "and find every single place that you might have thread dud loocks and other stuff but life just too short for that",
    "start": "3352079",
    "end": "3357319"
  },
  {
    "text": "you know you could chase down memory pointer bugs all day long too but that's not actually making your purchasing",
    "start": "3357319",
    "end": "3362480"
  },
  {
    "text": "order system get out the door any faster so there are some immediately beneficial starting steps because if you start",
    "start": "3362480",
    "end": "3368680"
  },
  {
    "text": "poking around in the languages you're using now they're adding functional constructs at a break neck Pace",
    "start": "3368680",
    "end": "3374240"
  },
  {
    "text": "particularly languages that are evolving more quickly like groovy uh and Ruby but even Java we're going to get higher",
    "start": "3374240",
    "end": "3380319"
  },
  {
    "text": "order functions in the next release so even Java is coming along uh so this is very much aligned with language trends",
    "start": "3380319",
    "end": "3386559"
  },
  {
    "text": "uh and pretty much across the map and these new capabilities give you new ways of thinking about problems uh",
    "start": "3386559",
    "end": "3394599"
  },
  {
    "text": "some of the problems you don't attack now because they're just too impossibly daunting to think about from a concurrency standpoint but if that",
    "start": "3394599",
    "end": "3401400"
  },
  {
    "text": "problem goes away then you can start thinking at a higher level of abstraction you may actually attack problems that you wouldn't would have",
    "start": "3401400",
    "end": "3407480"
  },
  {
    "text": "been reluctant to attack before I alluded to this earlier but if you want more details about this I've",
    "start": "3407480",
    "end": "3414480"
  },
  {
    "start": "3410000",
    "end": "3460000"
  },
  {
    "text": "been writing this article series for IBM developer works for a year and a half now in fact uh today I just published",
    "start": "3414480",
    "end": "3420680"
  },
  {
    "text": "installment 14 of this article series called functional thinking on developer works it's a free site you don't have to",
    "start": "3420680",
    "end": "3426119"
  },
  {
    "text": "do a signin or anything uh that's the table of contents for all the series and uh each one of them are numbered",
    "start": "3426119",
    "end": "3432520"
  },
  {
    "text": "accordingly um just about out of time but do I have questions probably got time for a",
    "start": "3432520",
    "end": "3439160"
  },
  {
    "text": "question before we take a break okay looks like I'm about our time I'll be",
    "start": "3439160",
    "end": "3444359"
  },
  {
    "text": "around the rest of the day today and tomorrow if you've got any questions uh happy to answer them for you uh thanks for coming hope you enjoyed it",
    "start": "3444359",
    "end": "3453119"
  },
  {
    "text": "[Music]",
    "start": "3454120",
    "end": "3462580"
  }
]