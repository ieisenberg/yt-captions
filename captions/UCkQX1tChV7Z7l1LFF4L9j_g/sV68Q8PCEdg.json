[
  {
    "text": "thank you for giving me the opportunity to summarize in my own mind what has happened in the last",
    "start": "4640",
    "end": "10880"
  },
  {
    "text": "eight years so eight years ago sylvan klebs this guy over here came to imperial college with",
    "start": "10880",
    "end": "18160"
  },
  {
    "text": "a vision about a new language that would make a better job of concurrency",
    "start": "18160",
    "end": "24400"
  },
  {
    "text": "and concurrent programming and i thought come on it's just there is nothing new to to",
    "start": "24400",
    "end": "30960"
  },
  {
    "text": "find there it has all been invented but i was wrong so a following was created",
    "start": "30960",
    "end": "38399"
  },
  {
    "text": "around this idea sebastian blessing who disappeared he suggested that we",
    "start": "38399",
    "end": "45280"
  },
  {
    "text": "should implement the language and he went immediately and he worked on the distributed version of the language",
    "start": "45280",
    "end": "51440"
  },
  {
    "text": "we implemented the language there is now as for any serious programming",
    "start": "51440",
    "end": "57680"
  },
  {
    "text": "language you can you have got a page with all the material that exists and you",
    "start": "57680",
    "end": "64559"
  },
  {
    "text": "have got a github page with all the versions and",
    "start": "64559",
    "end": "70560"
  },
  {
    "text": "by now there is a community which also controls the language development you can also find",
    "start": "70560",
    "end": "78000"
  },
  {
    "text": "the examples that i'm going to use at this location",
    "start": "78000",
    "end": "83119"
  },
  {
    "text": "and there is a playground for you to to try things out but what i want to discuss today is",
    "start": "83119",
    "end": "90000"
  },
  {
    "text": "the main ideas that drove the language so the goals for this programming language",
    "start": "90000",
    "end": "95360"
  },
  {
    "text": "was that it should be concurrent and support also distributed programming it should have a very efficient",
    "start": "95360",
    "end": "102399"
  },
  {
    "text": "implementation and it should be easy to write correct programs so what do we mean",
    "start": "102399",
    "end": "107840"
  },
  {
    "text": "concurrent there should be one driving paradigm and the driving",
    "start": "107840",
    "end": "113040"
  },
  {
    "text": "paradigm is the actor paradigm efficient there shouldn't be locks",
    "start": "113040",
    "end": "119280"
  },
  {
    "text": "you shouldn't need to use any locks and the runtime should also not be using locks",
    "start": "119280",
    "end": "124719"
  },
  {
    "text": "you should be able to share state without making copies and easy to write should be data race",
    "start": "124719",
    "end": "131200"
  },
  {
    "text": "free data log free by construction it should be safe for you to create object cycles",
    "start": "131200",
    "end": "137120"
  },
  {
    "text": "as opposed to rust there should be some uh simplicity in the model when you",
    "start": "137120",
    "end": "143360"
  },
  {
    "text": "program so you have got this figment of atomicity in your mind which i'm going to talk",
    "start": "143360",
    "end": "148560"
  },
  {
    "text": "about and causality which i'm also going to talk about",
    "start": "148560",
    "end": "153760"
  },
  {
    "text": "so first question is the language indeed efficient four years after the our first",
    "start": "153760",
    "end": "161599"
  },
  {
    "text": "excitement and after we started the project we tried to run benchmarks in order to find out in",
    "start": "161599",
    "end": "168000"
  },
  {
    "text": "particular how does the language compare in with respect to garbage collection and",
    "start": "168000",
    "end": "176319"
  },
  {
    "text": "we created a couple of very basic micro benchmarks and here we are reporting how pony behaves",
    "start": "176319",
    "end": "183599"
  },
  {
    "text": "it says orca but the reason it says orca is because the garbage collector is called orca",
    "start": "183599",
    "end": "188640"
  },
  {
    "text": "with respect to erlang and with respect to java and in java we're using c4 which is",
    "start": "188640",
    "end": "195920"
  },
  {
    "text": "the best garbage collector there is and the results are tremendous so we were super happy",
    "start": "195920",
    "end": "203200"
  },
  {
    "text": "because we were faster with any of these and the benchmarks we were",
    "start": "203200",
    "end": "209840"
  },
  {
    "text": "we have been honest we just wrote small benchmarks and we compared and we found these",
    "start": "209840",
    "end": "215840"
  },
  {
    "text": "wonderful results so we were extremely happy about that on the other hand sorry",
    "start": "215840",
    "end": "224400"
  },
  {
    "text": "on the other hand here we are measure so here we have been measuring uh the performance in the 4 4 8 16 32 64",
    "start": "224400",
    "end": "233280"
  },
  {
    "text": "course and here we have been measuring footprint and on the other hand uh in terms of footprint there is one",
    "start": "233280",
    "end": "240080"
  },
  {
    "text": "example where pawnee performs awfully we have not been",
    "start": "240080",
    "end": "246080"
  },
  {
    "text": "able to devote as much time as we would have liked to benchmarking but then we revisited the whole question a couple",
    "start": "246080",
    "end": "252400"
  },
  {
    "text": "of years later and we have got the paper in aguero from this october so what we are compare",
    "start": "252400",
    "end": "260959"
  },
  {
    "text": "we we decided we should be looking at the benchmark suite that has been developed by others not us and the benchmark suite",
    "start": "260959",
    "end": "268720"
  },
  {
    "text": "that we used is savina and savina has been proposed as a",
    "start": "268720",
    "end": "276639"
  },
  {
    "text": "good benchmark suite to compare actor-based languages so in this benchmark suite there are 32 programs",
    "start": "276639",
    "end": "283840"
  },
  {
    "text": "and we they are already implemented in akka and we have asked our friends to",
    "start": "283840",
    "end": "290240"
  },
  {
    "text": "implement them in kaf and we have compared so here is one example from the",
    "start": "290240",
    "end": "298479"
  },
  {
    "text": "now from the parallel benchmarks and you see that pawn is the green guy and",
    "start": "298479",
    "end": "304080"
  },
  {
    "text": "doesn't do very well akka is the red guy and does best and",
    "start": "304080",
    "end": "310080"
  },
  {
    "text": "kaf is the blue guy and does pretty good too but then in the siva vera tostennes",
    "start": "310080",
    "end": "315680"
  },
  {
    "text": "pony does much better and then after we had 16 programs and we didn't know what to",
    "start": "315680",
    "end": "321280"
  },
  {
    "text": "do we'd computed the average and pony is not doing",
    "start": "321280",
    "end": "326639"
  },
  {
    "text": "super good with a low number of cores and is getting better on the other hand for the concurrent",
    "start": "326639",
    "end": "332560"
  },
  {
    "text": "story pony is doing pretty much here for this example",
    "start": "332560",
    "end": "338160"
  },
  {
    "text": "is doing not as well for this example and overall is doing better than everybody else so the jury's",
    "start": "338160",
    "end": "345759"
  },
  {
    "text": "out these are all micro benchmarks and we are trying now to develop a benchmark",
    "start": "345759",
    "end": "353199"
  },
  {
    "text": "to rule them all where you can tune and get more interesting results but this is work in progress so this is what we know",
    "start": "353199",
    "end": "360160"
  },
  {
    "text": "about efficiency i would say it is encouraging and it is",
    "start": "360160",
    "end": "365600"
  },
  {
    "text": "not final yet so however one big company",
    "start": "365600",
    "end": "371919"
  },
  {
    "text": "has decided to choose us because of efficiency their major",
    "start": "371919",
    "end": "378080"
  },
  {
    "text": "contributed to to the pony endeavour and they have developed their own distributed version",
    "start": "378080",
    "end": "383600"
  },
  {
    "text": "of pony now pony as any serious programming",
    "start": "383600",
    "end": "389440"
  },
  {
    "text": "language has several interesting features but i'm going to just talk about a couple of those",
    "start": "389440",
    "end": "396160"
  },
  {
    "text": "and today what i want to discuss is actors causality some aspects of the type system and how",
    "start": "396160",
    "end": "401600"
  },
  {
    "text": "the type system has been used for garbage collection actors so can i never show of hands who",
    "start": "401600",
    "end": "409120"
  },
  {
    "text": "knows about actors do i should i skip it okay so i should go very very fast",
    "start": "409120",
    "end": "415120"
  },
  {
    "text": "uh thus asynchronous messages are called the behaviors or rather the response of the asynchronous messages",
    "start": "415120",
    "end": "421680"
  },
  {
    "text": "in pawnee as opposed to say erlang the actors take",
    "start": "421680",
    "end": "429840"
  },
  {
    "text": "the first message out of their queue and we have got also synchronous messages",
    "start": "429840",
    "end": "435199"
  },
  {
    "text": "and pony is a an extension of the object-oriented paradigm so here is an example of an actor in",
    "start": "435199",
    "end": "443680"
  },
  {
    "text": "pony it is it has got two local variables two fields",
    "start": "443680",
    "end": "448720"
  },
  {
    "text": "name and environment this is the constructor and it has got a behavior when it gets",
    "start": "448720",
    "end": "454000"
  },
  {
    "text": "spoked then it asks the environment to print its name and here is the main program that",
    "start": "454000",
    "end": "459280"
  },
  {
    "text": "creates three actors and then pokes them so execution could look as",
    "start": "459280",
    "end": "464879"
  },
  {
    "text": "follows the main program creates the three actors and then let's look at what happens when",
    "start": "464879",
    "end": "471199"
  },
  {
    "text": "we poke when we poke when actually spoke then it asks the environment to print its",
    "start": "471199",
    "end": "476720"
  },
  {
    "text": "name so the main program sends the messages spoke and then those messages print a send print",
    "start": "476720",
    "end": "485360"
  },
  {
    "text": "message sorry those behaviors send print messages to the environment",
    "start": "485360",
    "end": "492560"
  },
  {
    "text": "and it is possible for this the print message from a to arrive last",
    "start": "492560",
    "end": "499680"
  },
  {
    "text": "even though it was sent first and it is also possible",
    "start": "499680",
    "end": "506240"
  },
  {
    "text": "for for the print message to arrive first even though here it arrives last and it is possible for",
    "start": "506240",
    "end": "513120"
  },
  {
    "text": "poke to arrive here but for the behavior not to be scheduled until later it's all concurrent",
    "start": "513120",
    "end": "519839"
  },
  {
    "text": "programming and finally it is possible to have",
    "start": "519839",
    "end": "525120"
  },
  {
    "text": "times where the behaviors are where the actor is idle and doesn't execute any",
    "start": "525120",
    "end": "530480"
  },
  {
    "text": "behavior so next point is causality and the reason for this is that",
    "start": "530480",
    "end": "536959"
  },
  {
    "text": "now we have seen there is some element of uncertainty in the program for instance here we have got four",
    "start": "536959",
    "end": "543519"
  },
  {
    "text": "actors uh i indicate the actor through this",
    "start": "543519",
    "end": "550080"
  },
  {
    "text": "through this uh rounded square that is the name of the actor and that is the thread of the actor and those",
    "start": "551839",
    "end": "558080"
  },
  {
    "text": "are these are the times when it is executing a behavior when it's active so the question is what do the other",
    "start": "558080",
    "end": "565600"
  },
  {
    "text": "actors do while i am executing my own behavior do they go and they modify the world and then i will be affected by",
    "start": "565600",
    "end": "572240"
  },
  {
    "text": "that when will the messages arrive and when will they be taken off the cues",
    "start": "572240",
    "end": "578560"
  },
  {
    "text": "so this uncertainty is alleviated through types and through causal message delivery",
    "start": "578560",
    "end": "585839"
  },
  {
    "text": "what what do types do what they do is they give you the following guarantee",
    "start": "585839",
    "end": "590959"
  },
  {
    "text": "they say when a message is taken of the queue any changes to the world will be",
    "start": "590959",
    "end": "596080"
  },
  {
    "text": "invisible to you so the other actors may execute and modify the world but",
    "start": "596080",
    "end": "601600"
  },
  {
    "text": "it's not the part of the world that you can see and this guarantee holds actually upon message sent as soon",
    "start": "601600",
    "end": "608959"
  },
  {
    "text": "as the message is sent anything that is in the world that is visible from",
    "start": "608959",
    "end": "615440"
  },
  {
    "text": "that message is essentially unmodified until the receiving actor can",
    "start": "615440",
    "end": "620959"
  },
  {
    "text": "start and work with it we'll see more about it later the other reason that this uncertainty",
    "start": "620959",
    "end": "628880"
  },
  {
    "text": "is alleviated is because we have causal message delivery and this goes beyond",
    "start": "628880",
    "end": "634640"
  },
  {
    "text": "the guarantees that are given for instance in erlang or in akka so there are",
    "start": "634640",
    "end": "641120"
  },
  {
    "text": "different definition of what causality means",
    "start": "641120",
    "end": "646240"
  },
  {
    "text": "and i want to first give an example so let's assume we have got a scenario",
    "start": "646240",
    "end": "653120"
  },
  {
    "text": "where there is a customer who decides to go and buy stuff but before they buy stuff",
    "start": "653120",
    "end": "659120"
  },
  {
    "text": "they need to make sure that they have got enough money in in the bank so what do they do there is a behavior",
    "start": "659120",
    "end": "665839"
  },
  {
    "text": "run and they go and they determine what is the price of what they want to buy they go to the bank",
    "start": "665839",
    "end": "671600"
  },
  {
    "text": "they send a message to the bank saying credit me with the price so that i'm sure i have",
    "start": "671600",
    "end": "677440"
  },
  {
    "text": "got enough money and they send a message to store that says",
    "start": "677440",
    "end": "682640"
  },
  {
    "text": "buy from me something with a particular price and store and bank are fields uh",
    "start": "682640",
    "end": "689680"
  },
  {
    "text": "in the actor and in the in in the in the customer the store then",
    "start": "689680",
    "end": "696560"
  },
  {
    "text": "knows about the bank that is his own field and when the store receives the message by it asks the bank to debit",
    "start": "696560",
    "end": "704480"
  },
  {
    "text": "the customer with a particular price and what does the bank do it has got a",
    "start": "704480",
    "end": "710079"
  },
  {
    "text": "table a map from customers to their balances when it gets created in initializes the",
    "start": "710079",
    "end": "717440"
  },
  {
    "text": "table when it receives the credit message then in increments",
    "start": "717440",
    "end": "723200"
  },
  {
    "text": "the balance for the particular customer and when he receives a debit it checks",
    "start": "723200",
    "end": "729200"
  },
  {
    "text": "whether there is enough money and if there is not enough money then it goes and complains at the",
    "start": "729200",
    "end": "734399"
  },
  {
    "text": "bank of england makes a big fuss otherwise makes the payment so we are hoping that this big fuss will",
    "start": "734399",
    "end": "740800"
  },
  {
    "text": "never happen but why will it not happen so from the point of view",
    "start": "740800",
    "end": "746160"
  },
  {
    "text": "the simplistic point of view uh when the customer runs it wants to be sure that credit",
    "start": "746160",
    "end": "753360"
  },
  {
    "text": "will arrive at the bank before debit but we said that there are",
    "start": "753360",
    "end": "758800"
  },
  {
    "text": "the the guarantees that are made about the queues are weak the fact that somebody sends",
    "start": "758800",
    "end": "765279"
  },
  {
    "text": "something before somebody else is not necessarily a guarantee",
    "start": "765279",
    "end": "770639"
  },
  {
    "text": "so the question is could it be that the debit over takes credit and then indeed the",
    "start": "770639",
    "end": "776880"
  },
  {
    "text": "bank of england is going to make a fuss and luckily the the question is no and",
    "start": "776880",
    "end": "783680"
  },
  {
    "text": "why is it no the guarantee of causal delivery is the following",
    "start": "783680",
    "end": "789120"
  },
  {
    "text": "first what does it mean for a message to cause another message either i receive a message",
    "start": "789120",
    "end": "797519"
  },
  {
    "text": "and then i send another message so if i receive message m and then send m prime then m is a",
    "start": "797519",
    "end": "803680"
  },
  {
    "text": "cause for m prime and if i send m and then send m prime then m causes uh m prime and causality is",
    "start": "803680",
    "end": "812839"
  },
  {
    "text": "transitive and what we have as a guarantee is that",
    "start": "812839",
    "end": "817920"
  },
  {
    "text": "the message arrives at one queue at the same queue in causal order",
    "start": "817920",
    "end": "823040"
  },
  {
    "text": "not in across different queues because that is too distributed and different difficult but at one queue they all",
    "start": "823040",
    "end": "829040"
  },
  {
    "text": "arrive in causal order so in particular when we worry about this",
    "start": "829040",
    "end": "834720"
  },
  {
    "text": "we know that",
    "start": "834720",
    "end": "838240"
  },
  {
    "text": "because his the customer sends uh credit and then buy then credit causes buy and because",
    "start": "841279",
    "end": "848480"
  },
  {
    "text": "the um shop receives buy and then sends debit by uh causes debit therefore",
    "start": "848480",
    "end": "856240"
  },
  {
    "text": "credit causes debit and therefore credit is a cause of debit and therefore it",
    "start": "856240",
    "end": "862959"
  },
  {
    "text": "arrives first fuel no worries there",
    "start": "862959",
    "end": "870800"
  },
  {
    "text": "right so now uh is that an expensive feature to have it is the uh so",
    "start": "870800",
    "end": "877120"
  },
  {
    "text": "dirt cheap if we are working on one node what about distributed programming and",
    "start": "877120",
    "end": "884160"
  },
  {
    "text": "the guarantee that we have is that if we organize everything in a tree topology if all the",
    "start": "884160",
    "end": "889920"
  },
  {
    "text": "communication goes through the t through a tree then message delivery is",
    "start": "889920",
    "end": "895519"
  },
  {
    "text": "causal so no matter how the customer the bank and the shop are organized in that tree",
    "start": "895519",
    "end": "903440"
  },
  {
    "text": "we know that we have causal message delivery",
    "start": "903440",
    "end": "907920"
  },
  {
    "text": "the other subject that i would like to discuss is how uncertainty is alleviated through",
    "start": "908480",
    "end": "914800"
  },
  {
    "text": "types and talk about the type system so",
    "start": "914800",
    "end": "921920"
  },
  {
    "text": "there is a paper in agary in 2015",
    "start": "921920",
    "end": "927839"
  },
  {
    "text": "and i'm going to go briefly through what the type system offers so the",
    "start": "928639",
    "end": "936320"
  },
  {
    "text": "very very interesting thing with the pony type system is that the types",
    "start": "936320",
    "end": "943519"
  },
  {
    "text": "reflect execution for every interesting operation that affects",
    "start": "943519",
    "end": "950880"
  },
  {
    "text": "the topology in the heap there is a corresponding operation in the type system so the question that",
    "start": "950880",
    "end": "957920"
  },
  {
    "text": "we need to answer is i have got a reference i have",
    "start": "957920",
    "end": "963040"
  },
  {
    "text": "got a path that gives me access to some object this path can be just a variable or a variable and the",
    "start": "963040",
    "end": "969680"
  },
  {
    "text": "field lookup or a variable in the field look up another thing lookup and so on and so on so i have got an a reference to an",
    "start": "969680",
    "end": "977120"
  },
  {
    "text": "object what can i do with that can i read can i write",
    "start": "977120",
    "end": "982399"
  },
  {
    "text": "then the next question is if i have an alias if i create a new alias to the",
    "start": "983920",
    "end": "989519"
  },
  {
    "text": "reference i create a new path that gets me to the to the same place where the old path gets me what",
    "start": "989519",
    "end": "996000"
  },
  {
    "text": "can i do with this new path can i do everything that i could do with the first pass",
    "start": "996000",
    "end": "1001790"
  },
  {
    "text": "[Music] then what do i do if i drop a reference if i remove an",
    "start": "1001790",
    "end": "1009360"
  },
  {
    "text": "alias to an object can i do now more things what if i read the field from my",
    "start": "1009360",
    "end": "1016000"
  },
  {
    "text": "reference i follow the path and what if i remove",
    "start": "1016000",
    "end": "1022240"
  },
  {
    "text": "if i extract a field i take the i override the value of a field in",
    "start": "1022240",
    "end": "1029360"
  },
  {
    "text": "an object now the the object that was the old value of the field has got one less path to it",
    "start": "1029360",
    "end": "1037600"
  },
  {
    "text": "what can i do with that and the answer is what can i do with my reference we have",
    "start": "1037600",
    "end": "1044480"
  },
  {
    "text": "got a concept of reference capability which we call kappa if i alias my reference then there is an",
    "start": "1044480",
    "end": "1052720"
  },
  {
    "text": "operator on the reference capability which is the kappa explanation",
    "start": "1052720",
    "end": "1058400"
  },
  {
    "text": "the exclamation mark i have made one more reference to the thing an aliasing is the dash i have removed",
    "start": "1058400",
    "end": "1065600"
  },
  {
    "text": "the reference if i read the field from reference if the reference had",
    "start": "1065600",
    "end": "1072960"
  },
  {
    "text": "capability kappa and the object has a",
    "start": "1072960",
    "end": "1078880"
  },
  {
    "text": "capability kappa prime for the field then the ensuing reference is this viewpoint",
    "start": "1078880",
    "end": "1084720"
  },
  {
    "text": "adaptation and if i remove uh the reference then it is the extracting adaptation so these are",
    "start": "1084720",
    "end": "1092480"
  },
  {
    "text": "the operators and this is the backbone of the type system but because",
    "start": "1092480",
    "end": "1098400"
  },
  {
    "text": "i want to also talk about garbage collection i'm going to concentrate on this and i can talk offline about",
    "start": "1098400",
    "end": "1106840"
  },
  {
    "text": "that so the reference capabilities the reference capabilities they are attached",
    "start": "1106840",
    "end": "1112240"
  },
  {
    "text": "to a reference and they express whether the holder of",
    "start": "1112240",
    "end": "1117679"
  },
  {
    "text": "that reference may read or write the object",
    "start": "1117679",
    "end": "1123360"
  },
  {
    "text": "but they also express whether other aliases to the object may be written or or",
    "start": "1123360",
    "end": "1130880"
  },
  {
    "text": "read and distinguishing actually whether the other references are local or global aliases",
    "start": "1130880",
    "end": "1139679"
  },
  {
    "text": "and i want to discuss what these local and global alias mean so assume that we have an actor of type",
    "start": "1139679",
    "end": "1147520"
  },
  {
    "text": "this actor and it has got a field called",
    "start": "1147520",
    "end": "1154080"
  },
  {
    "text": "other actor that points to some other actor so this is the the the diagram to",
    "start": "1154080",
    "end": "1161360"
  },
  {
    "text": "understand that then i also have got another field holder and holder is initialized so that it",
    "start": "1161360",
    "end": "1169120"
  },
  {
    "text": "points to some object of class account so this grey blob is an object of class account",
    "start": "1169120",
    "end": "1177280"
  },
  {
    "text": "then i'm executing a function and this function declares a local variable called local alias and",
    "start": "1177280",
    "end": "1184960"
  },
  {
    "text": "local alias is assigned holder so the holder is one",
    "start": "1184960",
    "end": "1190080"
  },
  {
    "text": "reference to the account and local alias is an a local alias to the holder it is a local alias",
    "start": "1190080",
    "end": "1196320"
  },
  {
    "text": "because it comes from the same actor then i execute a",
    "start": "1196320",
    "end": "1202880"
  },
  {
    "text": "behavior i call the behavior take on the other actor and i pass the holder so now the",
    "start": "1202880",
    "end": "1209679"
  },
  {
    "text": "other actor also has got a reference to the account so this is my current",
    "start": "1209679",
    "end": "1218840"
  },
  {
    "text": "alias the holder this is the local alias and the global alias",
    "start": "1218840",
    "end": "1225039"
  },
  {
    "text": "and the capability that i give to the holder needs to be oops",
    "start": "1225039",
    "end": "1235760"
  },
  {
    "text": "so the capability that i give to the holder needs to be so that it respects",
    "start": "1235760",
    "end": "1242080"
  },
  {
    "text": "what the local alias can do and what the global alias can do the more this one can do the less those",
    "start": "1242080",
    "end": "1248640"
  },
  {
    "text": "two guys will do if for instance this one is allowed to take the account",
    "start": "1248640",
    "end": "1253840"
  },
  {
    "text": "and give it away then this one should not be able to read it",
    "start": "1253840",
    "end": "1259440"
  },
  {
    "text": "if this one is only allowed to read then all those should also be only allowed to read so in more",
    "start": "1259440",
    "end": "1266320"
  },
  {
    "text": "details in pony we have six reference capabilities but i'm going to transmit to omit",
    "start": "1266320",
    "end": "1274559"
  },
  {
    "text": "transition because it is a little bit of an edge case and i wanted to get the",
    "start": "1274559",
    "end": "1280480"
  },
  {
    "text": "main idea across so the question is those capabilities what rights do they give to the holder",
    "start": "1280480",
    "end": "1287840"
  },
  {
    "text": "the local alias and the global alias so the iso capability and the ref",
    "start": "1287840",
    "end": "1293520"
  },
  {
    "text": "capability say the holder may read and write the val and the box capability",
    "start": "1293520",
    "end": "1302080"
  },
  {
    "text": "say the holder may only read and the tax says the holder cannot do anything",
    "start": "1302080",
    "end": "1309200"
  },
  {
    "text": "interesting background story when sylvan started thinking about these things he",
    "start": "1309200",
    "end": "1314400"
  },
  {
    "text": "only had this in mind but because we set it up in a nice",
    "start": "1314400",
    "end": "1320400"
  },
  {
    "text": "matrix we realize that there is one more and which is the tag and actually it is",
    "start": "1320400",
    "end": "1326559"
  },
  {
    "text": "very useful this one more so now let's look at the local aliases well the local analysis need to be",
    "start": "1326559",
    "end": "1332799"
  },
  {
    "text": "somehow different for these two and for these two since the the holder",
    "start": "1332799",
    "end": "1338320"
  },
  {
    "text": "had identical rights so the iso capability says the local alias is not",
    "start": "1338320",
    "end": "1343360"
  },
  {
    "text": "allowed to do anything cannot read cannot write can only know the identity of the thing",
    "start": "1343360",
    "end": "1348400"
  },
  {
    "text": "whereas the ref says the local alias might read write whatever they want the val capability says the local alias",
    "start": "1348400",
    "end": "1356080"
  },
  {
    "text": "is only allowed to read while the for uh box it says i don't know it's",
    "start": "1356080",
    "end": "1361760"
  },
  {
    "text": "actually a union type and tag well we don't know the local alias might read right",
    "start": "1361760",
    "end": "1368000"
  },
  {
    "text": "we know nothing and the global alias now since here locally",
    "start": "1368000",
    "end": "1375919"
  },
  {
    "text": "at least one reference is able to to write then the global",
    "start": "1375919",
    "end": "1382559"
  },
  {
    "text": "alias is not allowed to neither read nor write otherwise we would have data races here",
    "start": "1382559",
    "end": "1388400"
  },
  {
    "text": "since we want to to to be sure that we can read then the global alias is also only allowed to",
    "start": "1388400",
    "end": "1397039"
  },
  {
    "text": "read and hear the global alias is also allowed to read the other question is which of those can",
    "start": "1397039",
    "end": "1404159"
  },
  {
    "text": "i send across actors and the answer is i can send iso",
    "start": "1404159",
    "end": "1409200"
  },
  {
    "text": "because i know that i'm the unique one who can read so if i give up my iso",
    "start": "1409200",
    "end": "1414640"
  },
  {
    "text": "and i give it to justin then i know that nobody is going to be in trouble i can also give val because i know",
    "start": "1414640",
    "end": "1422640"
  },
  {
    "text": "everybody is in agreement only nobody is going to read from it so they",
    "start": "1422640",
    "end": "1427760"
  },
  {
    "text": "can it can be shared across and i can give a tag because",
    "start": "1427760",
    "end": "1433200"
  },
  {
    "text": "when i give it i give it a stag i say you are not allowed to look inside it so the interesting story",
    "start": "1433200",
    "end": "1440080"
  },
  {
    "text": "is tag comes up a lot when you have uh look up tables and things like that when",
    "start": "1440080",
    "end": "1446000"
  },
  {
    "text": "you only want to pass the identity to somebody else who has got the the rest of the information uh",
    "start": "1446000",
    "end": "1453919"
  },
  {
    "text": "locally right so the the reference capabilities they are attached to the",
    "start": "1453919",
    "end": "1461039"
  },
  {
    "text": "references which are paths things like x x dot f x dot f of g",
    "start": "1461039",
    "end": "1467279"
  },
  {
    "text": "when when we're looking up more fields and they express whether the holder is",
    "start": "1467279",
    "end": "1472559"
  },
  {
    "text": "allowed to read or write and say something about the other objects and also note",
    "start": "1472559",
    "end": "1478240"
  },
  {
    "text": "that not only do we have capabilities for variables and arguments we also have",
    "start": "1478240",
    "end": "1484000"
  },
  {
    "text": "got capability for the receiver so here we are saying this function is modifying",
    "start": "1484000",
    "end": "1492240"
  },
  {
    "text": "the receiver therefore it needs a ref capability for the receiver so i'm going to to go",
    "start": "1492240",
    "end": "1498960"
  },
  {
    "text": "very fast through some pony code",
    "start": "1498960",
    "end": "1504320"
  },
  {
    "text": "we have got here a person who has got identity and strength when they eat",
    "start": "1504320",
    "end": "1510080"
  },
  {
    "text": "their strength increases we we saw that function already by some amount that is taken from the",
    "start": "1510080",
    "end": "1516960"
  },
  {
    "text": "food and the take a bite function from food",
    "start": "1516960",
    "end": "1522559"
  },
  {
    "text": "decreases the calories and returns parts of the calories and here in the main actor we create we",
    "start": "1522559",
    "end": "1529200"
  },
  {
    "text": "have got an apple variable then we have got a pair variable they are both food",
    "start": "1529200",
    "end": "1535039"
  },
  {
    "text": "laurie and jan are people and they eat the apple and the pear and if we look at the problems here we",
    "start": "1535039",
    "end": "1541120"
  },
  {
    "text": "see that i am modifying the calories and therefore oops",
    "start": "1541120",
    "end": "1546400"
  },
  {
    "text": "and therefore the um the function take a bite should have a ref receiver here we are calling uh",
    "start": "1546400",
    "end": "1554880"
  },
  {
    "text": "take bite and which requires the food to be a ref but",
    "start": "1554880",
    "end": "1560640"
  },
  {
    "text": "here it is a box so we need to change it okay so this was a",
    "start": "1560640",
    "end": "1566000"
  },
  {
    "text": "a short and fast um description of what is what the type",
    "start": "1566000",
    "end": "1572320"
  },
  {
    "text": "checker is doing now i would like to concentrate on the main and wonderful contribution of",
    "start": "1572320",
    "end": "1580080"
  },
  {
    "text": "what do these capabilities really mean so what we have here is",
    "start": "1580080",
    "end": "1587278"
  },
  {
    "text": "again two actors a1 a2 here is the timeline of the actor",
    "start": "1588000",
    "end": "1594480"
  },
  {
    "text": "with progress through time let's let's say this way so here is the activation of the actor",
    "start": "1594480",
    "end": "1600159"
  },
  {
    "text": "forget about time this is a snapshot so here is actor a1 a2 and",
    "start": "1600159",
    "end": "1605679"
  },
  {
    "text": "here is what the actor has access to so the actors the actor a1 you can imagine has got a",
    "start": "1605679",
    "end": "1612720"
  },
  {
    "text": "local variable of type iso that points to that object",
    "start": "1612720",
    "end": "1618320"
  },
  {
    "text": "and this object then now so all these round guys here are objects",
    "start": "1618320",
    "end": "1624799"
  },
  {
    "text": "10 12 13 20 and so on and i'm indicating through the black",
    "start": "1624799",
    "end": "1631200"
  },
  {
    "text": "arrows the references that come from one object to another object through its field so we can imagine that here",
    "start": "1631200",
    "end": "1638240"
  },
  {
    "text": "10 has got some field i don't care what it's called but this field has got a reference",
    "start": "1638240",
    "end": "1643679"
  },
  {
    "text": "capability and this field is pointing to 12. and 12 has got another field that has got a",
    "start": "1643679",
    "end": "1650640"
  },
  {
    "text": "reference capability that points to 13 and 13 box that points to 12",
    "start": "1650640",
    "end": "1657279"
  },
  {
    "text": "and also a ref that points to 10. so this is a topology that is possible through",
    "start": "1657279",
    "end": "1664320"
  },
  {
    "text": "when i'm using those capabilities now",
    "start": "1664320",
    "end": "1670240"
  },
  {
    "text": "what does the topology mean the isos introduce a partition of",
    "start": "1670240",
    "end": "1677600"
  },
  {
    "text": "the of the mutable heap into this joint region so these",
    "start": "1677600",
    "end": "1686080"
  },
  {
    "text": "turquoise triangles indicate the objects that belong to the same",
    "start": "1686080",
    "end": "1691200"
  },
  {
    "text": "region and we see that there are four regions",
    "start": "1691200",
    "end": "1697760"
  },
  {
    "text": "one starts at 10 the other 20 the other 30 the other 50 because they are all in",
    "start": "1697760",
    "end": "1703039"
  },
  {
    "text": "they have got all an iso pointing to them",
    "start": "1703039",
    "end": "1708720"
  },
  {
    "text": "moreover there is one immutable region and these are the blue objects and it's",
    "start": "1709440",
    "end": "1715919"
  },
  {
    "text": "indicated through this light blue square that is not very visible here and these",
    "start": "1715919",
    "end": "1723840"
  },
  {
    "text": "are introduced whenever i have got a val capability so from 12 to 10 i have got a one",
    "start": "1723840",
    "end": "1730159"
  },
  {
    "text": "capability and i know that everything that is reachable from a hundred",
    "start": "1730159",
    "end": "1737600"
  },
  {
    "text": "is going to be immutable so all the objects here are immutable and then",
    "start": "1737679",
    "end": "1744720"
  },
  {
    "text": "with this approach i can have my cycles as i have got them here and i've got them here",
    "start": "1744720",
    "end": "1750320"
  },
  {
    "text": "which i couldn't have in rust and which are nice to have when when you want them and",
    "start": "1750320",
    "end": "1755919"
  },
  {
    "text": "you don't need to to to start worrying about unsafe programming",
    "start": "1755919",
    "end": "1761840"
  },
  {
    "text": "then we also have that there are no incoming pointers into the mutable region so",
    "start": "1761840",
    "end": "1768399"
  },
  {
    "text": "21 cannot have any kind of mutable reference to 12. it could have a",
    "start": "1768399",
    "end": "1774640"
  },
  {
    "text": "tag reference but i'm excluding it here in order to tell my story 21 cannot have a mutable or",
    "start": "1774640",
    "end": "1781919"
  },
  {
    "text": "even box reference to 212",
    "start": "1781919",
    "end": "1787120"
  },
  {
    "text": "because it would go directly inside somebody else's region and 13 cannot point to",
    "start": "1787120",
    "end": "1794559"
  },
  {
    "text": "2 to 12 because sorry 13 cannot point to 20 because",
    "start": "1794559",
    "end": "1800799"
  },
  {
    "text": "20 is an iso and there is only one distinct entry into a region",
    "start": "1800799",
    "end": "1809360"
  },
  {
    "text": "and then what we see is there is at most act one actor at a time",
    "start": "1809360",
    "end": "1816640"
  },
  {
    "text": "that has got any kind of access to the objects in a mutable region so here a1 has got access to the objects",
    "start": "1816640",
    "end": "1825120"
  },
  {
    "text": "in that region and in that region and a2 has got access to the objects in",
    "start": "1825120",
    "end": "1830240"
  },
  {
    "text": "that region in that region so a1 can go in there and create more",
    "start": "1830240",
    "end": "1835279"
  },
  {
    "text": "objects modify objects change what they're pointing to",
    "start": "1835279",
    "end": "1841120"
  },
  {
    "text": "perhaps even do garbage collection and nobody else is going to be affected by that",
    "start": "1841120",
    "end": "1847200"
  },
  {
    "text": "and a2 can do the same and they can both go inside the blue region",
    "start": "1847200",
    "end": "1853120"
  },
  {
    "text": "and read stuff but since all that is immutable it's going to be safe so what we have is data race freedom by",
    "start": "1853120",
    "end": "1860320"
  },
  {
    "text": "construction the type system makes sure that we don't have any data races and we don't need to log we don't",
    "start": "1860320",
    "end": "1867440"
  },
  {
    "text": "need batteries we don't need anything the type system does it all for for us now how do we do communication we",
    "start": "1867440",
    "end": "1876240"
  },
  {
    "text": "want to be able to pass data around and ideally we would like also to be able to pass",
    "start": "1876240",
    "end": "1884320"
  },
  {
    "text": "mutable data so remember there is this requirement at most one actor at the time has access",
    "start": "1884320",
    "end": "1892159"
  },
  {
    "text": "to a mutable region and that means that the val reference",
    "start": "1892159",
    "end": "1900960"
  },
  {
    "text": "can be sent safely to any other actor so it is totally safe to send",
    "start": "1900960",
    "end": "1906320"
  },
  {
    "text": "the object 100 to actor a2 because it's an immutable object and",
    "start": "1906320",
    "end": "1913279"
  },
  {
    "text": "there are no restrictions about access to the immutable region you can go and read anything you want as",
    "start": "1913279",
    "end": "1919519"
  },
  {
    "text": "often as you want what about the mutable stuff",
    "start": "1919519",
    "end": "1925039"
  },
  {
    "text": "so i can give up a reference and then i can send it to another actor",
    "start": "1926000",
    "end": "1931360"
  },
  {
    "text": "for instance i might want to give up the reference that goes from 32 to 50 and",
    "start": "1931360",
    "end": "1937440"
  },
  {
    "text": "then it is safe to give it to a1 i still have got my guarantee at most one actor has got",
    "start": "1937440",
    "end": "1943760"
  },
  {
    "text": "access to immutable region and similarly i might want to give up my reference to 30",
    "start": "1943760",
    "end": "1949600"
  },
  {
    "text": "and pass it to a1 we have got the guarantee of data race",
    "start": "1949600",
    "end": "1955760"
  },
  {
    "text": "freedom so what that means is we can share mutable state without copying and",
    "start": "1955760",
    "end": "1961200"
  },
  {
    "text": "without any data races",
    "start": "1961200",
    "end": "1965200"
  },
  {
    "text": "so what guarantees does the type system give me it gives me no data races because at most one actor",
    "start": "1967760",
    "end": "1973919"
  },
  {
    "text": "has got access to a mutable object at any time immutability is deep and permanent so as",
    "start": "1973919",
    "end": "1981679"
  },
  {
    "text": "soon as something is in the immutable region it remains there stuff can move from the mutable to the",
    "start": "1981679",
    "end": "1987760"
  },
  {
    "text": "immutable by giving up capabilities and turning isos to val and stuff like that which",
    "start": "1987760",
    "end": "1994320"
  },
  {
    "text": "i'm not going to go but everything that is in the mutable region stays there everything that is reachable from there",
    "start": "1994320",
    "end": "2001200"
  },
  {
    "text": "is immutable the capabilities become weaker with the distance so if i have got a long path",
    "start": "2001200",
    "end": "2007919"
  },
  {
    "text": "that has got the that is allowed to write with w then every shorter path of",
    "start": "2007919",
    "end": "2015360"
  },
  {
    "text": "it is also allowed to write and we have got to this figment of",
    "start": "2015360",
    "end": "2020880"
  },
  {
    "text": "atomicity that says if upon message receipt an actor sees an",
    "start": "2020880",
    "end": "2028240"
  },
  {
    "text": "object at a certain capability that is a read or write then if later on the contents",
    "start": "2028240",
    "end": "2035679"
  },
  {
    "text": "of the object is different than when what it was when upon receipt then it was i who made the change so it means i",
    "start": "2035679",
    "end": "2043120"
  },
  {
    "text": "cannot observe anything that changes because of other actors any change is due to me so",
    "start": "2043120",
    "end": "2051118"
  },
  {
    "text": "the semantics that we have for behavior execution is is interleaved so let's say a1 is",
    "start": "2051119",
    "end": "2057280"
  },
  {
    "text": "executing a and then other actors execute and then he continues with his behavior here this",
    "start": "2057280",
    "end": "2064000"
  },
  {
    "text": "is one behavior and a2 his behavior is broken into three a three it's broken into three but i",
    "start": "2064000",
    "end": "2071760"
  },
  {
    "text": "as a programmer i don't need to know any about this i can believe that all my behaviors are",
    "start": "2071760",
    "end": "2077919"
  },
  {
    "text": "atomic this one will finish on its own this one will finish on its own and so on or",
    "start": "2077919",
    "end": "2083040"
  },
  {
    "text": "any other order but without the interleaving so that simplifies the programming model so the",
    "start": "2083040",
    "end": "2090320"
  },
  {
    "text": "last thing i want to talk about is garbage collection",
    "start": "2090320",
    "end": "2094960"
  },
  {
    "text": "and it came as a surprise to me how important garbage collection is but it is super important perhaps i",
    "start": "2095679",
    "end": "2104079"
  },
  {
    "text": "don't need to to to say here to to to you there is dougly",
    "start": "2104079",
    "end": "2111440"
  },
  {
    "text": "who is the the master of concurrency and also garbage collection talking about",
    "start": "2111440",
    "end": "2117440"
  },
  {
    "text": "the issues that arise and in pony we have got a",
    "start": "2117440",
    "end": "2123520"
  },
  {
    "text": "garbage collection protocol that is based on ownership and reference",
    "start": "2123520",
    "end": "2129040"
  },
  {
    "text": "count and we have juliana my phd student",
    "start": "2129040",
    "end": "2134800"
  },
  {
    "text": "found the wonderful name orca for it so what's so great about orca there are a",
    "start": "2134800",
    "end": "2140960"
  },
  {
    "text": "couple of papers that you can where you can read about orca here we describe",
    "start": "2140960",
    "end": "2146000"
  },
  {
    "text": "how it works and the some of the benchmarking that you have seen already",
    "start": "2146000",
    "end": "2151440"
  },
  {
    "text": "here we describe the model that makes sure that it works and it was",
    "start": "2151440",
    "end": "2156880"
  },
  {
    "text": "actually surprisingly difficult to make the model and fun and here we describe another uh protocol",
    "start": "2156880",
    "end": "2164160"
  },
  {
    "text": "that has to do not with the collection of objects but with the collection of actors and i can talk about this one offline so the",
    "start": "2164160",
    "end": "2172480"
  },
  {
    "text": "the wonderful thing about the garbage collection in pony that it is fully concurrent there is no synchronization",
    "start": "2172480",
    "end": "2179440"
  },
  {
    "text": "no locks no barrier no stop the world no nothing",
    "start": "2179440",
    "end": "2184400"
  },
  {
    "text": "wow so the here is the way that i like to explain it to myself we have got the",
    "start": "2184839",
    "end": "2190960"
  },
  {
    "text": "actors and again this bit is a behavior of an actor and here is where the actor",
    "start": "2190960",
    "end": "2197280"
  },
  {
    "text": "is idle and hear behavior",
    "start": "2197280",
    "end": "2202400"
  },
  {
    "text": "and another behavior in the actual idol and the black blobs or the black squares is where the actor",
    "start": "2202400",
    "end": "2208960"
  },
  {
    "text": "executes garbage collection so the interesting thing is that at this point at this point in time",
    "start": "2208960",
    "end": "2217520"
  },
  {
    "text": "this actor is executing the behavior he's doing garbage collection he's doing behavior it can be fully concurrent so this is",
    "start": "2217520",
    "end": "2225440"
  },
  {
    "text": "what the model says but we wanted to have experimental evidence that indeed this is what is",
    "start": "2225440",
    "end": "2231040"
  },
  {
    "text": "happening so juliana has been has instrumented execution on a four-core",
    "start": "2231040",
    "end": "2238160"
  },
  {
    "text": "machine and for each of those course she could",
    "start": "2238160",
    "end": "2244160"
  },
  {
    "text": "record whether at some time the call was executing behavior was executing sending or receiving or",
    "start": "2244160",
    "end": "2251839"
  },
  {
    "text": "messages or executing garbage collection and the time goes like this",
    "start": "2251839",
    "end": "2257839"
  },
  {
    "text": "so you can see for instance this part here is magnified here and we see",
    "start": "2257839",
    "end": "2264320"
  },
  {
    "text": "that this actor is doing behavior receiving behavior",
    "start": "2264320",
    "end": "2269359"
  },
  {
    "text": "and then gc while this actor is doing sending receiving behavior this is doing",
    "start": "2269359",
    "end": "2275040"
  },
  {
    "text": "gc it is indeed fully concurrent",
    "start": "2275040",
    "end": "2280000"
  },
  {
    "text": "so what are the challenges and how what have we done about them first challenging is who collects the",
    "start": "2281119",
    "end": "2287920"
  },
  {
    "text": "object second how do we avoid data races between garbage collector",
    "start": "2287920",
    "end": "2294320"
  },
  {
    "text": "and mutation garbage collection and behavior after all the the",
    "start": "2294320",
    "end": "2302160"
  },
  {
    "text": "garbage collector needs to go and trace the object graph it needs to find",
    "start": "2302160",
    "end": "2307440"
  },
  {
    "text": "what is accessible from from the frame or from the",
    "start": "2307440",
    "end": "2314240"
  },
  {
    "text": "fields uh in an actor and the mutator goes and modifies that at",
    "start": "2314240",
    "end": "2319520"
  },
  {
    "text": "the same time okay so the answer to who collects the object",
    "start": "2319520",
    "end": "2324720"
  },
  {
    "text": "is the allocating actor so whoever created an object is the owner and he is responsible to",
    "start": "2324720",
    "end": "2331760"
  },
  {
    "text": "collect the object to find out when the object is no longer accessible and to remove it",
    "start": "2331760",
    "end": "2339119"
  },
  {
    "text": "now given what i have been talking about so far you know the answer to how do we avoid",
    "start": "2339119",
    "end": "2345760"
  },
  {
    "text": "data races between garbage collection and mutation or between tracing and mutation",
    "start": "2345760",
    "end": "2351280"
  },
  {
    "text": "and this is the type system how does the owner know whether there are foreign reference to its own objects",
    "start": "2351280",
    "end": "2358480"
  },
  {
    "text": "does how does the owner know whether other actors are interested or have a path to",
    "start": "2358480",
    "end": "2365359"
  },
  {
    "text": "to their object and here we have got a scheme where the owner keeps",
    "start": "2365359",
    "end": "2371520"
  },
  {
    "text": "reference counts for all the objects that the other actors are interested in and also a reference count for the",
    "start": "2371520",
    "end": "2378320"
  },
  {
    "text": "objects that he's interested in and when these things are modified he goes",
    "start": "2378320",
    "end": "2383680"
  },
  {
    "text": "and notifies the corresponding actor",
    "start": "2383680",
    "end": "2390320"
  },
  {
    "text": "now he goes and modifies means and messages and here we do have the problem of what",
    "start": "2390320",
    "end": "2397359"
  },
  {
    "text": "happens if one message over takes the other message there are increments and decrements messages and we need to know that the",
    "start": "2397359",
    "end": "2404400"
  },
  {
    "text": "decrement messages do not overtake the increments but we have got",
    "start": "2404400",
    "end": "2409599"
  },
  {
    "text": "causal message delivery so it all works so we have got a case where there is a",
    "start": "2409599",
    "end": "2414800"
  },
  {
    "text": "very tight connection between the language design and the runtime system and to my",
    "start": "2414800",
    "end": "2420480"
  },
  {
    "text": "knowledge uh this is totally novel there are there were schemes already where the type",
    "start": "2420480",
    "end": "2425680"
  },
  {
    "text": "system was helping the garbage collector but they were not as",
    "start": "2425680",
    "end": "2432079"
  },
  {
    "text": "intricate because all you knew is that there was some domination graph and as soon as you remove",
    "start": "2432079",
    "end": "2438480"
  },
  {
    "text": "a link from the dominating link you can remove everything underneath but here we can have a much more",
    "start": "2438480",
    "end": "2444880"
  },
  {
    "text": "fine-grained garbage collection and we don't rely on on the regions anymore so i like to",
    "start": "2444880",
    "end": "2452960"
  },
  {
    "text": "outline roughly what is happening here there are three actors this actor owns",
    "start": "2452960",
    "end": "2458079"
  },
  {
    "text": "11 12 and 13. he has created all these objects but notice that he doesn't have any links",
    "start": "2458079",
    "end": "2464800"
  },
  {
    "text": "any paths to those objects but for instance actor 12 2 is interested",
    "start": "2464800",
    "end": "2472079"
  },
  {
    "text": "in 11 12 20 21 and 23 and therefore those objects",
    "start": "2472079",
    "end": "2478160"
  },
  {
    "text": "should not be garbage collector so the challenges is that the owning actor might not have paths to",
    "start": "2478160",
    "end": "2484880"
  },
  {
    "text": "the la it's live objects but the objects are still nevertheless live and there are cycles potentially",
    "start": "2484880",
    "end": "2491680"
  },
  {
    "text": "in the object graph and cycles are problematic with garbage collector with",
    "start": "2491680",
    "end": "2497440"
  },
  {
    "text": "reference counting garbage collecting but please remember the reference counting is the number",
    "start": "2497440",
    "end": "2503520"
  },
  {
    "text": "of the actors who are interested in something not the cycles not the number of references within",
    "start": "2503520",
    "end": "2510880"
  },
  {
    "text": "the heap so roughly what happens is that the owning actor keeps an upper bound on",
    "start": "2510880",
    "end": "2517280"
  },
  {
    "text": "the number of actors we have got a path to the owned object",
    "start": "2517280",
    "end": "2522319"
  },
  {
    "text": "and it collects the object when this number is zero the foreign actor the actor that has go",
    "start": "2522319",
    "end": "2528640"
  },
  {
    "text": "that does not own the object keeps count of the reference to unowned objects so this",
    "start": "2528640",
    "end": "2534560"
  },
  {
    "text": "actor a2 needs to remember that it's interested in 11 which it does not own",
    "start": "2534560",
    "end": "2542480"
  },
  {
    "text": "and when the number of references to on on object changes then it needs to",
    "start": "2542480",
    "end": "2548880"
  },
  {
    "text": "notify the owner so when an actor receives a",
    "start": "2548880",
    "end": "2554160"
  },
  {
    "text": "message it receives objects with a message so this number of",
    "start": "2554160",
    "end": "2559359"
  },
  {
    "text": "references changes so it needs to tell the owner when it sends messages that also change it",
    "start": "2559359",
    "end": "2565680"
  },
  {
    "text": "needs to change the tell the owner and also when it does tracing and it",
    "start": "2565680",
    "end": "2570800"
  },
  {
    "text": "discovers that it does not that it's no longer interested in an object it tells the owner and what we",
    "start": "2570800",
    "end": "2577040"
  },
  {
    "text": "have is now a system that is sound and complete which means we remove all eventually",
    "start": "2577040",
    "end": "2585040"
  },
  {
    "text": "we remove all the dead objects and we only remove dead objects",
    "start": "2585040",
    "end": "2592400"
  },
  {
    "text": "so here is again our evaluation with respect to erlang and java using c4",
    "start": "2592400",
    "end": "2599599"
  },
  {
    "text": "and we have distinguished between the mutator time the overhead of the",
    "start": "2599599",
    "end": "2605760"
  },
  {
    "text": "mutator the concurrent gc and stopped the world step which works very",
    "start": "2605760",
    "end": "2611599"
  },
  {
    "text": "well and remember footprint is not that great and the",
    "start": "2611599",
    "end": "2617119"
  },
  {
    "text": "other thing that we measured is responsiveness so we measured the",
    "start": "2617119",
    "end": "2622640"
  },
  {
    "text": "difference we ran a different benchmark where we did a bunch of",
    "start": "2622640",
    "end": "2630640"
  },
  {
    "text": "sequence of requests and the requests were some fibonacci calculations something like",
    "start": "2630640",
    "end": "2636880"
  },
  {
    "text": "that and we measured the difference in completion time",
    "start": "2636880",
    "end": "2642000"
  },
  {
    "text": "between subsequent such requests so this is jitter or we think it is",
    "start": "2642000",
    "end": "2650640"
  },
  {
    "text": "and we saw that in the case of orca uh the the the jitter is very low",
    "start": "2650640",
    "end": "2658000"
  },
  {
    "text": "in erlang it's higher and in c4 it's even worse so this is again another indication",
    "start": "2658000",
    "end": "2665760"
  },
  {
    "text": "that things are very encouraging",
    "start": "2665760",
    "end": "2672799"
  },
  {
    "text": "so as a summary we have got several features in the language i'm happy to talk afterwards",
    "start": "2673040",
    "end": "2679520"
  },
  {
    "text": "more or if you ask me questions",
    "start": "2679520",
    "end": "2684640"
  },
  {
    "text": "and there is a large group of people who have",
    "start": "2684800",
    "end": "2689920"
  },
  {
    "text": "contributed some of them were at imperial college but there are",
    "start": "2689920",
    "end": "2694960"
  },
  {
    "text": "several people outside and several people on github whose identity i do not",
    "start": "2694960",
    "end": "2700160"
  },
  {
    "text": "know but they have got funny symbols and it has been a",
    "start": "2700160",
    "end": "2706240"
  },
  {
    "text": "very interesting and rewarding journey for me please have a look at the language thank",
    "start": "2706240",
    "end": "2713760"
  },
  {
    "text": "[Applause] you",
    "start": "2713760",
    "end": "2719839"
  },
  {
    "text": "um questions um from a architecture point of view how",
    "start": "2720319",
    "end": "2728560"
  },
  {
    "text": "do you decide what's an actor and what's an object an actor is something that can execute",
    "start": "2728560",
    "end": "2736480"
  },
  {
    "text": "concurrently whereas the object is is passive the actor is something active",
    "start": "2736480",
    "end": "2741599"
  },
  {
    "text": "so i did not have that problem when writing code of determining when something should be an",
    "start": "2741599",
    "end": "2747440"
  },
  {
    "text": "actor i have been writing some code in verona",
    "start": "2747440",
    "end": "2752480"
  },
  {
    "text": "and there i had the problem of when is something a resource and i don't know why i didn't have the problem",
    "start": "2752480",
    "end": "2758720"
  },
  {
    "text": "do you have an answer",
    "start": "2758720",
    "end": "2761838"
  },
  {
    "text": "but i think the things that execute concurrently are actors so when we looked at the at the savina",
    "start": "2766000",
    "end": "2773280"
  },
  {
    "text": "benchmark suite it was immediately clear what should be the actors",
    "start": "2773280",
    "end": "2778720"
  },
  {
    "text": "even without looking at the code of written in the other",
    "start": "2778720",
    "end": "2784400"
  },
  {
    "text": "languages",
    "start": "2786839",
    "end": "2789839"
  },
  {
    "text": "thanks a lot for the great talk i'd like to know a little bit more about project verona",
    "start": "2793599",
    "end": "2800000"
  },
  {
    "text": "i realize that's a whole nother talk but that's a different talk",
    "start": "2800000",
    "end": "2804880"
  },
  {
    "text": "ask me afterwards",
    "start": "2808400",
    "end": "2817838"
  },
  {
    "text": "yeah um so i mean these look like really useful capabilities to have how come you",
    "start": "2830960",
    "end": "2837200"
  },
  {
    "text": "decided to put them into a new language rather than maybe into a library for an existing one so i'm thinking",
    "start": "2837200",
    "end": "2844960"
  },
  {
    "text": "particularly in the time system um one would have",
    "start": "2844960",
    "end": "2852240"
  },
  {
    "text": "if you put them into a library you would need to to make sure that the whole language",
    "start": "2852240",
    "end": "2857599"
  },
  {
    "text": "follows the library's type system so it is a very it's a very invasive change",
    "start": "2857599",
    "end": "2863359"
  },
  {
    "text": "plus then it uh the the the runtime system relies on",
    "start": "2863359",
    "end": "2870960"
  },
  {
    "text": "on the capabilities",
    "start": "2870960",
    "end": "2874078"
  },
  {
    "text": "i've tried a little bit of [Music] my own with with the pony language one",
    "start": "2880480",
    "end": "2887280"
  },
  {
    "text": "thing that keeps catching me out is the fact the garbage collection doesn't run during a loop yes what's the reason for",
    "start": "2887280",
    "end": "2894960"
  },
  {
    "text": "that that's a very good point the reason is totally uh",
    "start": "2894960",
    "end": "2900079"
  },
  {
    "text": "an engineering reason that it is easier to trace when you know where",
    "start": "2900079",
    "end": "2907520"
  },
  {
    "text": "the when all you are interested in is the fields you you don't run garbage collection",
    "start": "2907520",
    "end": "2913040"
  },
  {
    "text": "during a behavior you only run it between behaviors that means that you only need to trace",
    "start": "2913040",
    "end": "2919359"
  },
  {
    "text": "from the fields of the of the actor if you were to",
    "start": "2919359",
    "end": "2924400"
  },
  {
    "text": "trace during a behavior then you need to walk the activation",
    "start": "2924400",
    "end": "2930880"
  },
  {
    "text": "the the frames of the the activation stack and find",
    "start": "2930880",
    "end": "2937760"
  },
  {
    "text": "at which location is which object of which of which type and",
    "start": "2937760",
    "end": "2943520"
  },
  {
    "text": "moreover if anything has been in line it's even more work so um",
    "start": "2943520",
    "end": "2949920"
  },
  {
    "text": "from the point of view of the of the protocol nothing changes from the point of view of the engineering it's a hell",
    "start": "2951520",
    "end": "2957920"
  },
  {
    "text": "of a lot more yeah yes we have come across that problem too",
    "start": "2957920",
    "end": "2970640"
  },
  {
    "text": "i mean building a new language and a community around it is i mean i think i you sort of gave the",
    "start": "2970640",
    "end": "2976240"
  },
  {
    "text": "impression that it wasn't what you're expecting to do but has it has it been a you know rewarding and",
    "start": "2976240",
    "end": "2981520"
  },
  {
    "text": "interesting thing of its own to to do that yes i was not expecting it to",
    "start": "2981520",
    "end": "2986720"
  },
  {
    "text": "happen because when sylvan came i thought there is nothing much new to",
    "start": "2986720",
    "end": "2992319"
  },
  {
    "text": "to discover and there was and it has been wonderful to get into",
    "start": "2992319",
    "end": "2998640"
  },
  {
    "text": "touch with so many people who were interested in it and my",
    "start": "2998640",
    "end": "3003839"
  },
  {
    "text": "own students worked on parts of the compiler we then experimented with",
    "start": "3003839",
    "end": "3012240"
  },
  {
    "text": "other features like for instance how do we do object initialization in in",
    "start": "3012240",
    "end": "3018800"
  },
  {
    "text": "in verona path dependent types so all sorts of things that theoretically",
    "start": "3018800",
    "end": "3025200"
  },
  {
    "text": "are interesting and somebody else does now they become super urgent because they have to be in our language yes",
    "start": "3025200",
    "end": "3031440"
  },
  {
    "text": "it's a great thing to be doing yeah thank you",
    "start": "3031440",
    "end": "3041359"
  },
  {
    "text": "i think it's quarter past and everybody needs to go and have a real break now thank you thank you so",
    "start": "3041359",
    "end": "3047680"
  },
  {
    "text": "much thank you",
    "start": "3047680",
    "end": "3052880"
  }
]