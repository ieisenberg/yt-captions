[
  {
    "text": "[Music]",
    "start": "3360",
    "end": "9618"
  },
  {
    "text": "I'm here to talk about architecture reliability observability as kind of a",
    "start": "10120",
    "end": "16920"
  },
  {
    "text": "whole I'd like to just start you off by thinking about thinking um if you're if you're",
    "start": "18080",
    "end": "25800"
  },
  {
    "text": "designing something if you're working on something if you're building something",
    "start": "25800",
    "end": "30920"
  },
  {
    "text": "which you know would you rather think about the telephone with its fairly",
    "start": "30920",
    "end": "36920"
  },
  {
    "text": "obvious um connection between a speaker and a microphone or would you rather think",
    "start": "36920",
    "end": "43200"
  },
  {
    "text": "about this is a picture from um Ericson in Sweden back in the 1890s of a",
    "start": "43200",
    "end": "49640"
  },
  {
    "text": "telephone switch with those all those gray fuzz you see there that's not fog that's",
    "start": "49640",
    "end": "55000"
  },
  {
    "text": "wires um so this is network connectivity with phys IAL wiring connecting",
    "start": "55000",
    "end": "61719"
  },
  {
    "text": "everything together um but when you consider sort of imagine it you can hold",
    "start": "61719",
    "end": "69280"
  },
  {
    "text": "that entire problem on the left in your head the thing on the right that's",
    "start": "69280",
    "end": "76200"
  },
  {
    "text": "engineering engineering really starts when the problem is too big to fit into",
    "start": "76200",
    "end": "82040"
  },
  {
    "text": "your brain um when you're you know when you see",
    "start": "82040",
    "end": "90880"
  },
  {
    "text": "Engineers who are super smart super skilled they can build systems that",
    "start": "90880",
    "end": "96439"
  },
  {
    "text": "nobody else can understand because it fits in their brain and it doesn't fit in your brain",
    "start": "96439",
    "end": "101640"
  },
  {
    "text": "and the act of engineering that part is hacking the act of engineering is when",
    "start": "101640",
    "end": "107360"
  },
  {
    "text": "it no longer fits in your brain and you have to start adding process and capability and and um working with other",
    "start": "107360",
    "end": "113439"
  },
  {
    "text": "people in Communications so just to recap I I I've been doing",
    "start": "113439",
    "end": "120240"
  },
  {
    "text": "this a while um I'm over 40 years now working professionally in the software industry I've been I got my start",
    "start": "120240",
    "end": "127640"
  },
  {
    "text": "writing device drivers in hardware and assembly and now I'm working on large",
    "start": "127640",
    "end": "133080"
  },
  {
    "text": "scale backend systems at honeycomb um honeycomb makes an observability",
    "start": "133080",
    "end": "138319"
  },
  {
    "text": "tool but we're not really here to talk about honeycomb today um I want to talk about",
    "start": "138319",
    "end": "146239"
  },
  {
    "text": "architecture what does reliable architecture that's the title of this track right what does that mean it's not",
    "start": "146239",
    "end": "152400"
  },
  {
    "text": "about failure it's not about avoiding failure we don't any real system is going to fail",
    "start": "152400",
    "end": "161560"
  },
  {
    "text": "in various ways it may not all fail at once but pits and bits and pieces of it will so it's about handling that change",
    "start": "161560",
    "end": "169239"
  },
  {
    "text": "it's about being resilient to changes in the environment to your customers you",
    "start": "169239",
    "end": "176680"
  },
  {
    "text": "deploy a new library you you know you're your cloud provider happens to stop",
    "start": "176680",
    "end": "183120"
  },
  {
    "text": "running its services whatever it might be things are going to fail I was having an email conversation recently with",
    "start": "183120",
    "end": "189120"
  },
  {
    "text": "somebody who said just assume everything is going to fail the systems you build to",
    "start": "189120",
    "end": "194159"
  },
  {
    "text": "accommodate that is what ends up giving you reliability",
    "start": "194159",
    "end": "200799"
  },
  {
    "text": "so it's rarely clean though you can't think about it here's where I put my",
    "start": "201599",
    "end": "208680"
  },
  {
    "text": "reliability um we need architecture for the big",
    "start": "208680",
    "end": "214599"
  },
  {
    "text": "problems and the way we we do architecture is we break the big problems down into smaller problems and",
    "start": "214599",
    "end": "221439"
  },
  {
    "text": "the smaller problems into smaller problems like that everything is a hierarchy it's a fractal situation so I",
    "start": "221439",
    "end": "228040"
  },
  {
    "text": "have been here for the evolution of thinking about programming functions",
    "start": "228040",
    "end": "234560"
  },
  {
    "text": "breaking your programs down into functions and then it became objects and then it became like split put things up",
    "start": "234560",
    "end": "240040"
  },
  {
    "text": "into processes and microservices and services and it it just we we solve",
    "start": "240040",
    "end": "245599"
  },
  {
    "text": "bigger problems by going to the next scale of the thing we already understand",
    "start": "245599",
    "end": "250640"
  },
  {
    "text": "so like I said it's not always clean um you get this hierarchy of",
    "start": "250640",
    "end": "257479"
  },
  {
    "text": "things that are interdependent on each other or maybe not um and",
    "start": "257479",
    "end": "263960"
  },
  {
    "text": "you're now what um the systems get really big and messy espe especially when they",
    "start": "263960",
    "end": "270080"
  },
  {
    "text": "encounter the real world that little thing you had on your desktop that you know this is where we get works on my machine right um works on my machine",
    "start": "270080",
    "end": "279840"
  },
  {
    "text": "means I know all the things but when you put it into the real world all of a sudden you don't have control over all",
    "start": "279840",
    "end": "286000"
  },
  {
    "text": "the things anymore and so now you have to add in the connections between the parts and that's why a debugger doesn't",
    "start": "286000",
    "end": "291639"
  },
  {
    "text": "really help you um once your system escapes into the real world you can't stop it um asynchronous communication",
    "start": "291639",
    "end": "298840"
  },
  {
    "text": "running services is you can't just say hey wait a minute I want to look at this um",
    "start": "298840",
    "end": "306160"
  },
  {
    "text": "so we really need Telemetry we need the ability to read what's going on in these",
    "start": "306160",
    "end": "312919"
  },
  {
    "text": "systems that are living out in the cloud and the way we do that is with",
    "start": "312919",
    "end": "318440"
  },
  {
    "text": "what we call observability it's what makes that Telemetry meaningful it's the ability to",
    "start": "318440",
    "end": "324280"
  },
  {
    "text": "ask questions about it and then get meaningful answers back so",
    "start": "324280",
    "end": "331319"
  },
  {
    "text": "um observability is a word that a lot of vendors like to throw around everybody has observability um what does it mean",
    "start": "331319",
    "end": "339240"
  },
  {
    "text": "we had this little battle for a couple of years where everybody was talking about the three pillars of observability",
    "start": "339240",
    "end": "344800"
  },
  {
    "text": "logs traces and metrics and I I personally think uh this is a terrible",
    "start": "344800",
    "end": "352160"
  },
  {
    "text": "framing because they're not it's not like three pillars all holding up the",
    "start": "352160",
    "end": "358680"
  },
  {
    "text": "roof of observ ability they're different sized they're different meanings they have different values so I kind of",
    "start": "358680",
    "end": "365440"
  },
  {
    "text": "reject the framing of three pillars and I also reject the framing that they're all equally important so number one",
    "start": "365440",
    "end": "372400"
  },
  {
    "text": "metrics everybody loves metrics everybody has metrics we've all seen and maybe we've been the engineer who can",
    "start": "372400",
    "end": "379720"
  },
  {
    "text": "you know just like look at that dashboard over there and there's a little pixel drop in some Metric and the",
    "start": "379720",
    "end": "387720"
  },
  {
    "text": "engineer goes oh that means the user service is falling over um and like how",
    "start": "387720",
    "end": "394120"
  },
  {
    "text": "did you know that well they knew it from experience they knew it from having stared at these metrics and that's not",
    "start": "394120",
    "end": "401319"
  },
  {
    "text": "sustainable that's not scalable um metrics are pre-aggregated",
    "start": "401319",
    "end": "406680"
  },
  {
    "text": "answers to your problems they're fighting the last war you're you're",
    "start": "406680",
    "end": "412560"
  },
  {
    "text": "saying this was a thing that went wrong before therefore I'm going to track it I'm going to add it up and when that",
    "start": "412560",
    "end": "418720"
  },
  {
    "text": "number changes is then hopefully it tells me something meaningful um I did work at one company",
    "start": "418720",
    "end": "424680"
  },
  {
    "text": "where we had the ability to build our own dashboards for our Production Services we had 1,00 metrics we could",
    "start": "424680",
    "end": "430199"
  },
  {
    "text": "pick from to put on those dashboards you could spend weeks just figuring out which metrics you wanted up there it was",
    "start": "430199",
    "end": "437039"
  },
  {
    "text": "it's not and all of them some of them are useful it's a real problem so",
    "start": "437039",
    "end": "443919"
  },
  {
    "text": "metrics don't get me wrong metrics are fine they can be useful they're valuable",
    "start": "443919",
    "end": "449000"
  },
  {
    "text": "to have have and sometimes it's nice to just see what's going on but they don't",
    "start": "449000",
    "end": "454680"
  },
  {
    "text": "really help you debug um and you get a lot of them",
    "start": "454680",
    "end": "459720"
  },
  {
    "text": "precisely because they're not adequate to the problem so",
    "start": "459720",
    "end": "467360"
  },
  {
    "text": "logs are you know they're good they're also useful and this is where I actually",
    "start": "467360",
    "end": "474240"
  },
  {
    "text": "got into the whole observability world excuse me log imagine all these",
    "start": "474240",
    "end": "480360"
  },
  {
    "text": "things sending logs they're all sending into cloudwatch they're all integrated they're all going up there by buckets",
    "start": "480360",
    "end": "485599"
  },
  {
    "text": "maybe in time maybe they're integrated by time maybe they're not but you got aquarium um",
    "start": "485599",
    "end": "492440"
  },
  {
    "text": "so I had a little cloudwatch collection of logs and I wrote a query language in",
    "start": "492440",
    "end": "501560"
  },
  {
    "text": "slack so that I could query my logs and post the results of the query back into",
    "start": "501560",
    "end": "506720"
  },
  {
    "text": "slack automatically that was really useful for sharing that information with my team but you still had to write a",
    "start": "506720",
    "end": "513560"
  },
  {
    "text": "clever query and it was all correlated by time and the you know you could only get 10 lines and so maybe you found what",
    "start": "513560",
    "end": "519880"
  },
  {
    "text": "you wanted maybe you didn't and then eventually saw and realize that",
    "start": "519880",
    "end": "527040"
  },
  {
    "text": "we could take that same structured data that we were sending up to cloudwatch and send it to a service provider um who",
    "start": "527040",
    "end": "533800"
  },
  {
    "text": "could help us process that data and do something more with it um but it's still",
    "start": "533800",
    "end": "539839"
  },
  {
    "text": "up to me to do the correlation between all the systems all the events and to know what's in the logs and",
    "start": "539839",
    "end": "546440"
  },
  {
    "text": "that is where tracing comes in tracing is basically fancy logs is at at its at",
    "start": "546440",
    "end": "555040"
  },
  {
    "text": "its base um with tracing you have",
    "start": "555040",
    "end": "561160"
  },
  {
    "text": "spans and those spans show you kind of what's going on in the world what we see",
    "start": "561160",
    "end": "567200"
  },
  {
    "text": "here there's a trace you you can see at the top level there's the root span and it takes 5 seconds and then you have all",
    "start": "567200",
    "end": "574279"
  },
  {
    "text": "these various elements um it shows you basically you know when everything",
    "start": "574279",
    "end": "579480"
  },
  {
    "text": "happened the correlation between them um how long they all took and the",
    "start": "579480",
    "end": "585279"
  },
  {
    "text": "relationship between them you have a hierarchy here that gives you a lot more information about what's going",
    "start": "585279",
    "end": "592680"
  },
  {
    "text": "on um so specifically when we talk about traces the things that matter in tracing",
    "start": "592959",
    "end": "600120"
  },
  {
    "text": "is these key Fields you have a trace ID um which",
    "start": "600120",
    "end": "606320"
  },
  {
    "text": "is you know just basically a large random number ideally and",
    "start": "606320",
    "end": "612560"
  },
  {
    "text": "then the root every child span gets a",
    "start": "612560",
    "end": "618440"
  },
  {
    "text": "reference to the parent so you know this green triangle here parent span is 111",
    "start": "618440",
    "end": "625279"
  },
  {
    "text": "which is the the span ID of the top one and so now we've defined a hierarchy all",
    "start": "625279",
    "end": "631480"
  },
  {
    "text": "the spans are independent but they can refer to each other in a way that allows us to reconstruct the ordering and",
    "start": "631480",
    "end": "638200"
  },
  {
    "text": "sequencing and timing of everything um so one of the questions is what",
    "start": "638200",
    "end": "645839"
  },
  {
    "text": "happens if my Trace crosses Cross services is not in service you have to propagate that Trace information and I'm",
    "start": "645839",
    "end": "652040"
  },
  {
    "text": "going to get into that some more in a little while so I want to give you like a",
    "start": "652040",
    "end": "661240"
  },
  {
    "text": "little let's talk about tracing in a little more detail so I want to kind of go through a a sort of slightly",
    "start": "661240",
    "end": "670800"
  },
  {
    "text": "idealized actual Trace situation that I came across of about a year ago um so um",
    "start": "670800",
    "end": "680240"
  },
  {
    "text": "I was working on a project that had been shipping for several years um",
    "start": "680240",
    "end": "687200"
  },
  {
    "text": "and I was noticing is I was like starting and stopping it that it was taking a long time to start up in",
    "start": "687200",
    "end": "693720"
  },
  {
    "text": "certain scenarios and it wasn't there wasn't a lot of tracing around so I threw some tracing in and I was just like okay let",
    "start": "693720",
    "end": "700320"
  },
  {
    "text": "just track some of these functions that I don't know what's happening during startup I just decorated the startup",
    "start": "700320",
    "end": "705600"
  },
  {
    "text": "code with some tracing logic",
    "start": "705600",
    "end": "711079"
  },
  {
    "text": "so this is simulated code for clarity I didn't I I it's not the real thing but",
    "start": "711360",
    "end": "717000"
  },
  {
    "text": "it's basically what was going on so down here on the left you see this process Keys",
    "start": "717000",
    "end": "722720"
  },
  {
    "text": "function um and what's happening is there's a bucket of keys that gets handed to the service and the service's",
    "start": "722720",
    "end": "729839"
  },
  {
    "text": "job is to encode or decode them and it uses a lot of caching but the keys are",
    "start": "729839",
    "end": "735839"
  },
  {
    "text": "coming from user data and so there may be lots of duplicate keys and so what happened was that this",
    "start": "735839",
    "end": "743440"
  },
  {
    "text": "code would start up since since those keys may not have been in the cache we",
    "start": "743440",
    "end": "749120"
  },
  {
    "text": "started up a go routine for each key to go off and um you know basically a",
    "start": "749120",
    "end": "755000"
  },
  {
    "text": "parallel a parallel routine to go off and query the database if the thing wasn't in the cach otherwise just return",
    "start": "755000",
    "end": "760120"
  },
  {
    "text": "it from the cash and so that's the get cach value up here you see okay we look",
    "start": "760120",
    "end": "766320"
  },
  {
    "text": "is it in the Cache no go get it from the database the problem is this is what the",
    "start": "766320",
    "end": "773079"
  },
  {
    "text": "trace looked like again I'm kind of sketching this out in general here but",
    "start": "773079",
    "end": "779240"
  },
  {
    "text": "you can see we we spun up in parallel all those get cach values they all",
    "start": "779240",
    "end": "784600"
  },
  {
    "text": "started at about the same time the first one went out looked at the cach and then it goes and tries to",
    "start": "784600",
    "end": "790880"
  },
  {
    "text": "get it in the database because didn't find it then the next one waited until the second one was fin the first one was",
    "start": "790880",
    "end": "797160"
  },
  {
    "text": "finished before it went out to the database and then it waited for the next one to finish before it went out to the",
    "start": "797160",
    "end": "802240"
  },
  {
    "text": "database and so what looked like perfectly reasonable code and is",
    "start": "802240",
    "end": "809639"
  },
  {
    "text": "in a world where your cash is mostly full in this case where the cash was mostly empty we were serializing access",
    "start": "809639",
    "end": "816480"
  },
  {
    "text": "to all these database values and so I ended up with process Keys taking way longer than I expected",
    "start": "816480",
    "end": "822920"
  },
  {
    "text": "it to and so the problem is we didn't all me to go to the database after we",
    "start": "822920",
    "end": "829199"
  },
  {
    "text": "checked the cach so instead what you have to do here is add some code to",
    "start": "829199",
    "end": "834440"
  },
  {
    "text": "check the cach again after you get the lock because while you were holding the lock somebody else might have put it in",
    "start": "834440",
    "end": "840079"
  },
  {
    "text": "the cache and I mean this is concurrency 101 but it's also a",
    "start": "840079",
    "end": "849040"
  },
  {
    "text": "really easy mistake to make and the point I'm trying to make is I wouldn't have seen this I wouldn't have addressed",
    "start": "849040",
    "end": "855759"
  },
  {
    "text": "it I wouldn't have fixed it if I hadn't known from looking at the Telemetry so we turned this Trace into",
    "start": "855759",
    "end": "865040"
  },
  {
    "text": "that Trace um because everybody locks one of",
    "start": "865040",
    "end": "872320"
  },
  {
    "text": "them goes out gets the gets the span I mean gets the database query and then everybody else is like oh okay now it's",
    "start": "872320",
    "end": "878160"
  },
  {
    "text": "in the cash I can go so this actually I've all lighted a lot of",
    "start": "878160",
    "end": "884800"
  },
  {
    "text": "details but this actually was a 10x speed up um for a pretty complex little",
    "start": "884800",
    "end": "892560"
  },
  {
    "text": "problem so hopefully that has Maybe motivated",
    "start": "893320",
    "end": "899160"
  },
  {
    "text": "the idea of why some of this stuff is useful to you and now I want to talk about in Practical terms how you should",
    "start": "899160",
    "end": "906800"
  },
  {
    "text": "do it today um and basically I want to hear",
    "start": "906800",
    "end": "913959"
  },
  {
    "text": "I'm here to tell you the good news about otel otel is an open- Source vendor independent standard for data formats",
    "start": "913959",
    "end": "920920"
  },
  {
    "text": "and protocols for Telemetry so there are standards for traces that's where it",
    "start": "920920",
    "end": "926079"
  },
  {
    "text": "kind of gets got its first start it based on the merger of of uh open",
    "start": "926079",
    "end": "932079"
  },
  {
    "text": "tracing and open senses and then it is now adding you know metrics are close in",
    "start": "932079",
    "end": "938800"
  },
  {
    "text": "some languages they're in pretty good shape logs are coming along and the idea is that they libraries in basically",
    "start": "938800",
    "end": "945680"
  },
  {
    "text": "every language Under the Sun this is the the cloud native compute Foundation is the open source",
    "start": "945680",
    "end": "952440"
  },
  {
    "text": "organization that runs kubernetes open Telemetry is the second largest project after kubernetes there are hundreds of",
    "start": "952440",
    "end": "959920"
  },
  {
    "text": "developers contributing to it there are dozens of special interest group meetings every",
    "start": "959920",
    "end": "966160"
  },
  {
    "text": "week and so it's out there building the tooling to do this kind of",
    "start": "966160",
    "end": "972360"
  },
  {
    "text": "telemetry also as part of that tooling is the open the open Telemetry collector",
    "start": "972360",
    "end": "977600"
  },
  {
    "text": "The otel Collector as we call it it's a processing proxy and what you can do is",
    "start": "977600",
    "end": "982800"
  },
  {
    "text": "it has receivers that can pull data or accept data from all sorts of sources it",
    "start": "982800",
    "end": "989040"
  },
  {
    "text": "has processors that can um process that data and then there are exporters that",
    "start": "989040",
    "end": "994959"
  },
  {
    "text": "can export it so it's a law you know it also can like work with graffan",
    "start": "994959",
    "end": "1000480"
  },
  {
    "text": "Prometheus that kind of thing so you can put it into the world and use the same tools you're already using um you can",
    "start": "1000480",
    "end": "1006480"
  },
  {
    "text": "also send this data to third party vendors like my",
    "start": "1006480",
    "end": "1011000"
  },
  {
    "text": "employer so where do we do this um we have our stack you know the",
    "start": "1011959",
    "end": "1019920"
  },
  {
    "text": "operating system and the container runs on the operating system and our app runs in the container",
    "start": "1019920",
    "end": "1024959"
  },
  {
    "text": "like as you go lower in the stack you can get a lot of detail memory usage and",
    "start": "1024959",
    "end": "1031000"
  },
  {
    "text": "and and that kind of thing but you lose your context you know you can ask your",
    "start": "1031000",
    "end": "1036280"
  },
  {
    "text": "operating system which which uh Services am I communicating with um how much",
    "start": "1036280",
    "end": "1042600"
  },
  {
    "text": "memory am I using but it it doesn't tell you which functions are doing that whereas if you go higher in the stack",
    "start": "1042600",
    "end": "1048199"
  },
  {
    "text": "you can get you know things from the app so there are also you can do auto",
    "start": "1048199",
    "end": "1053720"
  },
  {
    "text": "instrumentation and you can do manual instrumentation",
    "start": "1053720",
    "end": "1059640"
  },
  {
    "text": "so Auto instrumentation works great low in the stack you can go and attach an",
    "start": "1059640",
    "end": "1066919"
  },
  {
    "text": "auto instrumentation at the operating system level or at the container level that really um can get a lot of um a lot",
    "start": "1066919",
    "end": "1077120"
  },
  {
    "text": "of information quickly and easily and sometimes too much information but but",
    "start": "1077120",
    "end": "1082159"
  },
  {
    "text": "that's a it's a good place to start um it there's a",
    "start": "1082159",
    "end": "1087240"
  },
  {
    "text": "new so BPF is the um Berkeley packet",
    "start": "1087240",
    "end": "1092400"
  },
  {
    "text": "filters they've been around for like 30 years evf is more recent and is basically a detailed protocol for",
    "start": "1092400",
    "end": "1099400"
  },
  {
    "text": "reaching into an operating system and getting a lot of useful information or injecting information in some cases um",
    "start": "1099400",
    "end": "1106960"
  },
  {
    "text": "and it's really interesting as an auto instrumentation tool that's growing rapidly and quickly in the context of",
    "start": "1106960",
    "end": "1113039"
  },
  {
    "text": "open Telemetry so it's great stuff we're seeing a lot of evolution there and it",
    "start": "1113039",
    "end": "1118600"
  },
  {
    "text": "will get M much better as you go part of my point here is get started now and",
    "start": "1118600",
    "end": "1124120"
  },
  {
    "text": "that stuff can come along and help you um when we look",
    "start": "1124120",
    "end": "1131400"
  },
  {
    "text": "at Auto instrumenting apps it depends a lot on what your technical environment",
    "start": "1131400",
    "end": "1137360"
  },
  {
    "text": "is basically which programming languages or environments you're running in so if you're using a VM based system like",
    "start": "1137360",
    "end": "1144559"
  },
  {
    "text": "java.net um that VM is very easily instrumented and controllable I mean",
    "start": "1144559",
    "end": "1149600"
  },
  {
    "text": "it's pretty easy to take your Java deploy add an extra jar to the list of things you deploy and that jar can reach",
    "start": "1149600",
    "end": "1156080"
  },
  {
    "text": "in and watch everything that's going on in your VM and it can keep track of your",
    "start": "1156080",
    "end": "1161159"
  },
  {
    "text": "HTTP requests it can keep track of your you know file system access all that",
    "start": "1161159",
    "end": "1166799"
  },
  {
    "text": "kind of thing and again it also can know about the libraries you're using so your",
    "start": "1166799",
    "end": "1172840"
  },
  {
    "text": "auto instrumentation Library can say oh you're using postgress so that means that I",
    "start": "1172840",
    "end": "1178280"
  },
  {
    "text": "can Auto instrument that and keep track of things like what was your uh database",
    "start": "1178280",
    "end": "1183760"
  },
  {
    "text": "request um that kind of thing so Auto instrumentation in those kind of",
    "start": "1183760",
    "end": "1189200"
  },
  {
    "text": "languages is great when you look at something like python or Ruby what you're talking about is",
    "start": "1189200",
    "end": "1194880"
  },
  {
    "text": "decorating um the functions the structure Str of the app within the Ruby",
    "start": "1194880",
    "end": "1200799"
  },
  {
    "text": "code itself and so that's kind of a monkey patching approach where your your",
    "start": "1200799",
    "end": "1206039"
  },
  {
    "text": "function gets wrapped in another function that auto instruments it and then lets it run um these are pretty",
    "start": "1206039",
    "end": "1213159"
  },
  {
    "text": "easy to get spun up as part of your configuration depending exactly on the language capabilities and what you're",
    "start": "1213159",
    "end": "1218600"
  },
  {
    "text": "trying to do but it's not that hard to do Auto insation in those languages and then you have languages like go and C++",
    "start": "1218600",
    "end": "1224840"
  },
  {
    "text": "where Auto instrumentation it's a compiled language so there's basically two big methods one is injection of",
    "start": "1224840",
    "end": "1230559"
  },
  {
    "text": "Source Code by reverse compiling essentially your source and adding lines",
    "start": "1230559",
    "end": "1236960"
  },
  {
    "text": "of code to your Source before compilation um or something like evf",
    "start": "1236960",
    "end": "1242600"
  },
  {
    "text": "where the language runtime is providing capabilities that the auto instrumentation system can read um and",
    "start": "1242600",
    "end": "1250080"
  },
  {
    "text": "we're we're again we're seeing some really good stuff happening here it's still early in that",
    "start": "1250080",
    "end": "1256919"
  },
  {
    "text": "space um you know when everybody wants Auto instrumentation they want the easy button sometimes the easy button is like",
    "start": "1256919",
    "end": "1264000"
  },
  {
    "text": "oh hit it again not that easy because the um you can get too much it can be",
    "start": "1264000",
    "end": "1271640"
  },
  {
    "text": "the wrong kind of information for you to care about and so manual instrumentation is still a good thing to do at the app",
    "start": "1271640",
    "end": "1279080"
  },
  {
    "text": "level it's still worth investing in but the nice thing is it kind of intermingles",
    "start": "1279080",
    "end": "1284559"
  },
  {
    "text": "um the you know this is more hands- on you have to modify your source and redeploy it um but it's the only way to",
    "start": "1284559",
    "end": "1292640"
  },
  {
    "text": "really see what's happening deep in your code like when I was talking before I added lines that were around the",
    "start": "1292640",
    "end": "1298520"
  },
  {
    "text": "function calls I care about but I didn't add Auto instrumentation at the tightest inner loop that was iterating through a",
    "start": "1298520",
    "end": "1305240"
  },
  {
    "text": "thousand items um so you can you can do this in a way that",
    "start": "1305240",
    "end": "1311200"
  },
  {
    "text": "interoperates with the auto instrumentation um and the libraries for",
    "start": "1311200",
    "end": "1317320"
  },
  {
    "text": "Motel are are pretty easy to use again depends on your language depends on the language uh you know support in",
    "start": "1317320",
    "end": "1325159"
  },
  {
    "text": "community and things like that um but they're pretty easy to use and they're getting easier and honestly learning one of the",
    "start": "1325159",
    "end": "1333120"
  },
  {
    "text": "hardest parts is actually just learning the vocabulary you have to learn to think like otel and once you learn to",
    "start": "1333120",
    "end": "1338440"
  },
  {
    "text": "think like otel then it becomes a lot easier to implement the otel part so",
    "start": "1338440",
    "end": "1344159"
  },
  {
    "text": "just as way of illustration um",
    "start": "1344159",
    "end": "1349960"
  },
  {
    "text": "so this is just a quick Snippets of uh",
    "start": "1350960",
    "end": "1357039"
  },
  {
    "text": "JS um node code so we just have to",
    "start": "1357039",
    "end": "1362240"
  },
  {
    "text": "require the open Telemetry API that was pretty easy and then we can start a span here on line",
    "start": "1362240",
    "end": "1370799"
  },
  {
    "text": "eight um we we get a tracer a tracer is a thing that generates traces so you get",
    "start": "1370799",
    "end": "1376799"
  },
  {
    "text": "a tracer you give give it a name and then you start a span and then after you do the work you",
    "start": "1376799",
    "end": "1382919"
  },
  {
    "text": "want to do you end the span and when you have a nested",
    "start": "1382919",
    "end": "1389559"
  },
  {
    "text": "situation instead of getting a new Tracer you know when you when you make a call you're going to start nested span",
    "start": "1389559",
    "end": "1397360"
  },
  {
    "text": "and pull in and so it will reach out into the system and say okay what's the current span and then make a child of",
    "start": "1397360",
    "end": "1403559"
  },
  {
    "text": "that current span so that's basically all you need to do there's a couple lines of code you wrap around the things",
    "start": "1403559",
    "end": "1409480"
  },
  {
    "text": "you care about if your language has the you know concept of some sort of defer or destruction then it's pretty easy to",
    "start": "1409480",
    "end": "1415919"
  },
  {
    "text": "do it in one or two lines right next to each other so you starts span and automatically ends depending on how you ex the function that kind of thing but",
    "start": "1415919",
    "end": "1424520"
  },
  {
    "text": "basically this is a straightforward way to to do this and the fun part is this",
    "start": "1424520",
    "end": "1431159"
  },
  {
    "text": "can work client side too you can do this in your clients for mobile apps for web",
    "start": "1431159",
    "end": "1437039"
  },
  {
    "text": "apps um you can give those applications the ability to start a span and send",
    "start": "1437039",
    "end": "1443679"
  },
  {
    "text": "that span and and watch what's going on in your user",
    "start": "1443679",
    "end": "1449200"
  },
  {
    "text": "data um this isn't ROM or analytics this isn't like you're not at the level yet",
    "start": "1449200",
    "end": "1454919"
  },
  {
    "text": "but I think we're going to get there um of being able to like replace all your rum tools for monitoring user Behavior",
    "start": "1454919",
    "end": "1462679"
  },
  {
    "text": "but theoretically you could do that within the context of open Telemetry you're just probably going to today have",
    "start": "1462679",
    "end": "1468159"
  },
  {
    "text": "to roll most of it your own self we'll get there though um now pretty much everything",
    "start": "1468159",
    "end": "1476640"
  },
  {
    "text": "I've talked about so far has been mostly synchronous but in an async",
    "start": "1476640",
    "end": "1482960"
  },
  {
    "text": "world you're doing either something like kfco where you're putting things into a queue and then pulling them out sometime",
    "start": "1482960",
    "end": "1491080"
  },
  {
    "text": "later um or you're just doing async function calls and so your root span is up here",
    "start": "1491080",
    "end": "1497320"
  },
  {
    "text": "and it's done done and meanwhile some other task is over here filling in the rest of the",
    "start": "1497320",
    "end": "1502440"
  },
  {
    "text": "screen um async architecture is actually a",
    "start": "1502440",
    "end": "1509159"
  },
  {
    "text": "really good model for a lot of things it can be more resilient you don't have to you know you're not making users wait",
    "start": "1509159",
    "end": "1515279"
  },
  {
    "text": "for things you're not making processes wait for things um they add complexity",
    "start": "1515279",
    "end": "1521039"
  },
  {
    "text": "though in terms of thinking and you know and your mental model of the system",
    "start": "1521039",
    "end": "1528399"
  },
  {
    "text": "depending on so many things having to do with the languages you're working in and the tool you know what exactly you're",
    "start": "1528399",
    "end": "1533960"
  },
  {
    "text": "trying to do and the biggest problem with them is especially you know again if you're used to thinking about",
    "start": "1533960",
    "end": "1539760"
  },
  {
    "text": "debuggers well I just spun up this process and now I'm going to put a break point in the thing that started the",
    "start": "1539760",
    "end": "1545120"
  },
  {
    "text": "process that does no good at all for the process that's happily running in the background while your debugger is stopped um so how do you see what's",
    "start": "1545120",
    "end": "1553080"
  },
  {
    "text": "going on the way to think about it is not so much about hierarchy but about cause and",
    "start": "1553080",
    "end": "1558919"
  },
  {
    "text": "effect what caused this and what was the effect of it so this is where you apply",
    "start": "1558919",
    "end": "1564440"
  },
  {
    "text": "context this is where the trace is about adding context to that Trace where did it come from what was the source of this",
    "start": "1564440",
    "end": "1570760"
  },
  {
    "text": "information um adding metadata to this",
    "start": "1570760",
    "end": "1575200"
  },
  {
    "text": "information so you know tracing isn't still ideal",
    "start": "1575799",
    "end": "1583480"
  },
  {
    "text": "because it's not necessarily about cause and effect it's still kind of tracing is largely built around this",
    "start": "1583480",
    "end": "1592159"
  },
  {
    "text": "um uh idea of a hierarchy",
    "start": "1592159",
    "end": "1597200"
  },
  {
    "text": "but it's still um better than",
    "start": "1597200",
    "end": "1602519"
  },
  {
    "text": "logs if you're talking about stuff that's happening quickly like it's async but it's kind of",
    "start": "1602559",
    "end": "1610640"
  },
  {
    "text": "almost the same thing then you're probably fine with just saying hey start a trace on that receive and then this",
    "start": "1610640",
    "end": "1617279"
  },
  {
    "text": "Stu stuff that happens over here just it isn't contained within the parent but it's still part it's still related to",
    "start": "1617279",
    "end": "1624320"
  },
  {
    "text": "the parent um your biggest question is deciding what it is you're going to have as your parent child relationship you",
    "start": "1624320",
    "end": "1630559"
  },
  {
    "text": "know is is DQ a child of NQ or is it a child of just the main the original request and that's just for you to",
    "start": "1630559",
    "end": "1636960"
  },
  {
    "text": "decide and whatever you want to think about and it's fine either",
    "start": "1636960",
    "end": "1641520"
  },
  {
    "text": "way um if you have something like a Kafka where that thing might be sitting in Kafka for seconds or days depending",
    "start": "1642159",
    "end": "1649840"
  },
  {
    "text": "on your queuing and stuff like that you don't really want to try to connect those traces that's going to be really",
    "start": "1649840",
    "end": "1656159"
  },
  {
    "text": "hard to think about a trace that lasts a million seconds is not really easily analyzed so you're better off using",
    "start": "1656159",
    "end": "1663799"
  },
  {
    "text": "what's known in open Telemetry as span links and in that the secondary Trace so",
    "start": "1663799",
    "end": "1672519"
  },
  {
    "text": "you have two traces here receive is doing its thing and then it's",
    "start": "1672519",
    "end": "1677799"
  },
  {
    "text": "handing it off to Kafka sometime later the the DQ comes along and it processes",
    "start": "1677799",
    "end": "1683080"
  },
  {
    "text": "that result but as a part of the request we included the metadata about the trace",
    "start": "1683080",
    "end": "1689519"
  },
  {
    "text": "that was that caused it so now in the DQ request we have the information we need",
    "start": "1689519",
    "end": "1695559"
  },
  {
    "text": "to put a link back to the source trace and then our tooling can connect",
    "start": "1695559",
    "end": "1701320"
  },
  {
    "text": "those for us and so we can you know we can get from here oh this one failed why did it fail let's go back and look at",
    "start": "1701320",
    "end": "1707159"
  },
  {
    "text": "what paed",
    "start": "1707159",
    "end": "1709760"
  },
  {
    "text": "it the way information flows between processes and otel is called",
    "start": "1713080",
    "end": "1718799"
  },
  {
    "text": "baggage so data there's standard headers",
    "start": "1718799",
    "end": "1724480"
  },
  {
    "text": "and information can this service over here can make a",
    "start": "1724480",
    "end": "1732000"
  },
  {
    "text": "request and this service over here can um receive that request",
    "start": "1732000",
    "end": "1739399"
  },
  {
    "text": "and the um uh the headers will contain the",
    "start": "1739880",
    "end": "1745080"
  },
  {
    "text": "information from the source request namely the trace ID the parent ID that",
    "start": "1745080",
    "end": "1750880"
  },
  {
    "text": "kind of thing and various Hotel libraries will pick that stuff up automatically which is great until it",
    "start": "1750880",
    "end": "1756880"
  },
  {
    "text": "surprises you because they'll also bundle it automatically and now you make a call to a third party API or wor still",
    "start": "1756880",
    "end": "1764840"
  },
  {
    "text": "your customer makes a call into your API and they included their baggage and you",
    "start": "1764840",
    "end": "1770159"
  },
  {
    "text": "picked it up automatically and now your Trace is based on somebody else's root span and so you need to think about",
    "start": "1770159",
    "end": "1779080"
  },
  {
    "text": "baggage from the point of view of it's easy to start up it's easy to use within your network but once it leaves your",
    "start": "1779080",
    "end": "1784640"
  },
  {
    "text": "network you probably want to filter it out either outgoing or make sure that it doesn't leak into your",
    "start": "1784640",
    "end": "1790600"
  },
  {
    "text": "systems um you also need to be aware of this with things like if you're using um",
    "start": "1790600",
    "end": "1797919"
  },
  {
    "text": "one of the mesh management tools like sto um you know we had one customer who",
    "start": "1797919",
    "end": "1803559"
  },
  {
    "text": "was saying how can my traces have 11 million spans well it was because your um mesh system was injecting the",
    "start": "1803559",
    "end": "1811320"
  },
  {
    "text": "same span ID into everything um and um yeah that could be",
    "start": "1811320",
    "end": "1818120"
  },
  {
    "text": "fun um tests our systems too but but yeah um so you're going to want",
    "start": "1818120",
    "end": "1825600"
  },
  {
    "text": "to filter that stuff out but it it works across Services again it's a standard so this is part of what",
    "start": "1825600",
    "end": "1832159"
  },
  {
    "text": "I'm trying to sell you on here the the using the standard gives you all of this stuff it comes along and you can",
    "start": "1832159",
    "end": "1839039"
  },
  {
    "text": "understand it as you need to um but it's there it's available it's in the tooling",
    "start": "1839039",
    "end": "1845000"
  },
  {
    "text": "and it's being thought about and being improved over",
    "start": "1845000",
    "end": "1849559"
  },
  {
    "text": "time so let's bring this back to",
    "start": "1852840",
    "end": "1857960"
  },
  {
    "text": "architecture because one of the things about architecture is we're talking about planning we're talking about",
    "start": "1857960",
    "end": "1863120"
  },
  {
    "text": "construction we're talking about maybe new ideas it's not always about things we already have I mean that",
    "start": "1863120",
    "end": "1869039"
  },
  {
    "text": "may be architecture we deal with but sometimes you want to think about it from the beginning so part of the",
    "start": "1869039",
    "end": "1874399"
  },
  {
    "text": "question is when do we start thinking about it um so first of",
    "start": "1874399",
    "end": "1881720"
  },
  {
    "text": "all anytime you're thinking about it I do think you want to be planning for observability you want to be thinking",
    "start": "1881720",
    "end": "1887679"
  },
  {
    "text": "how do I know how do I know this is true we actually have within my company's um",
    "start": "1887679",
    "end": "1895960"
  },
  {
    "text": "GitHub template you know there's a little line in there that says how will",
    "start": "1895960",
    "end": "1901080"
  },
  {
    "text": "we know this is working in production and that's meant to you know",
    "start": "1901080",
    "end": "1906279"
  },
  {
    "text": "to prompt you to say what are you building into this pull request for observability to make sure the thing you",
    "start": "1906279",
    "end": "1912440"
  },
  {
    "text": "say it does it actually does um so plan for",
    "start": "1912440",
    "end": "1919360"
  },
  {
    "text": "it one of the things that's interesting about like any kind",
    "start": "1919360",
    "end": "1926200"
  },
  {
    "text": "of tracing architecture is the problem of how do you propagate the information",
    "start": "1926200",
    "end": "1933159"
  },
  {
    "text": "within your process and within your application and this is one of those",
    "start": "1933159",
    "end": "1938360"
  },
  {
    "text": "places where I will you know hide my software engineering hat and say yeah Global variable that's actually a pretty",
    "start": "1938360",
    "end": "1944440"
  },
  {
    "text": "good model um in go we stick it on the context typically and so you have a",
    "start": "1944440",
    "end": "1950240"
  },
  {
    "text": "context that gets passed around anyway and so now attach the trace the active Trace to the context and so that the",
    "start": "1950240",
    "end": "1957200"
  },
  {
    "text": "call can say give me the current context and then make a child span um and you",
    "start": "1957200",
    "end": "1962760"
  },
  {
    "text": "see that pattern in a lot of the different languages and a lot of the different Frameworks there's some Global floating somewhere that's tracking this",
    "start": "1962760",
    "end": "1969000"
  },
  {
    "text": "stuff for you don't freak out it's okay",
    "start": "1969000",
    "end": "1975159"
  },
  {
    "text": "um and also building it during start",
    "start": "1975320",
    "end": "1980720"
  },
  {
    "text": "like this the mistake I talked about earlier where we had a a limitation of",
    "start": "1980720",
    "end": "1988480"
  },
  {
    "text": "you know we we were running into that thing that was detectable just on my",
    "start": "1988480",
    "end": "1993519"
  },
  {
    "text": "desktop I was sending traces from the desktop app that I was I mean from the",
    "start": "1993519",
    "end": "1998600"
  },
  {
    "text": "app that I was running on my own machine um and I'm just looking at one",
    "start": "1998600",
    "end": "2003639"
  },
  {
    "text": "Trace I'm not looking at traces in volume and I'm not looking main performance at point I was just looking at what is this particular instance of",
    "start": "2003639",
    "end": "2010399"
  },
  {
    "text": "this particular application doing right now and that's valuable it's a debugging tool and it's a more powerful debugging",
    "start": "2010399",
    "end": "2017760"
  },
  {
    "text": "tool than starting a debugger and trying to walk through the logic um because that debugging tool is",
    "start": "2017760",
    "end": "2024120"
  },
  {
    "text": "not going to show you any kind of parallelism or you know interaction like",
    "start": "2024120",
    "end": "2030639"
  },
  {
    "text": "this only fail this is the exact kind of problem that goes away when you try to study it in detail because you're not",
    "start": "2030639",
    "end": "2036200"
  },
  {
    "text": "sending Mass quantities it's duplicate data at it um",
    "start": "2036200",
    "end": "2041720"
  },
  {
    "text": "so working with observability from the very beginning of a project can be",
    "start": "2041720",
    "end": "2047320"
  },
  {
    "text": "valuable I worked on another project where it was literally one of the first things I did was like you stand up a",
    "start": "2047320",
    "end": "2053839"
  },
  {
    "text": "dummy app and you add some dummy observability and you send it off to a provider where you can look at it",
    "start": "2053839",
    "end": "2059720"
  },
  {
    "text": "whether that's you know I mean I'm going to get to this but you can do it in in like open Telemetry you can do it with",
    "start": "2059720",
    "end": "2066480"
  },
  {
    "text": "collector and you can do it with the um collector viewer the tra the trace",
    "start": "2066480",
    "end": "2071919"
  },
  {
    "text": "viewer that runs on the command line um so telemeter is cheap how am I",
    "start": "2071919",
    "end": "2080280"
  },
  {
    "text": "doing here good um Telemetry is cheap and it's",
    "start": "2080280",
    "end": "2086878"
  },
  {
    "text": "basically cheaper than Engineers anyway um air on the side of recording too much",
    "start": "2086879",
    "end": "2093000"
  },
  {
    "text": "and then trim it down you can trim it down either at source or you can trim it after the fact with a sampling strategy",
    "start": "2093000",
    "end": "2101240"
  },
  {
    "text": "um send it all to a local collector like start up a collector and run it and then you can have everything go there and",
    "start": "2101240",
    "end": "2107200"
  },
  {
    "text": "then you can forward it um if",
    "start": "2107200",
    "end": "2113320"
  },
  {
    "text": "you um you know and then your plan for deployment is that that you have a",
    "start": "2113320",
    "end": "2118520"
  },
  {
    "text": "collector running in your network but you can also do that locally very easily um I'm also here to say you know",
    "start": "2118520",
    "end": "2125440"
  },
  {
    "text": "deemphasize dashboards dashboard don't tell you enough get get the ability to ask the question you really want to know",
    "start": "2125440",
    "end": "2132119"
  },
  {
    "text": "um don't ask these binary questions of just is it up or is it down like expect",
    "start": "2132119",
    "end": "2138440"
  },
  {
    "text": "degradation and be able to have enough information to detect degradation when it happened my cooworker Fred who was",
    "start": "2138440",
    "end": "2145800"
  },
  {
    "text": "sitting in the audience said the other day that P95 isn't going to show you that we were looking at you know a thing",
    "start": "2145800",
    "end": "2152040"
  },
  {
    "text": "where you had a small number of users with a speak a a spike in duration",
    "start": "2152040",
    "end": "2157839"
  },
  {
    "text": "and your average query time is going to be fine but you've got a few customers who are having a bad day that won't show",
    "start": "2157839",
    "end": "2165240"
  },
  {
    "text": "you with metric so let's talk about the collector for a",
    "start": "2165240",
    "end": "2170920"
  },
  {
    "text": "minute um that's the collector from Toy Story by the way so",
    "start": "2170920",
    "end": "2177520"
  },
  {
    "text": "um receivers collectors have receivers receivers collect data they can either",
    "start": "2177880",
    "end": "2186240"
  },
  {
    "text": "be pass which means they're an endpoint and you have systems that point at them and send to them that's the way open",
    "start": "2186240",
    "end": "2191960"
  },
  {
    "text": "Telemetry normally works you have an otel receiver and you send it otel data um they can also active the active",
    "start": "2191960",
    "end": "2198760"
  },
  {
    "text": "collectors which reach out and pull it out of the cloud or out of a you know S3 bucket or whatever it might be um The",
    "start": "2198760",
    "end": "2207079"
  },
  {
    "text": "Collector can do that too can be active at receiving data and the point is that it's getting it into a pipeline The",
    "start": "2207079",
    "end": "2213160"
  },
  {
    "text": "Collector is the basically the job of the collector is to build a pipeline or multiple pipelines for",
    "start": "2213160",
    "end": "2218800"
  },
  {
    "text": "data um so there are plugins there are I don't know 75 or 100 plugins supported",
    "start": "2218800",
    "end": "2226800"
  },
  {
    "text": "for collector and there are probably more than people have written for themselves processors are the next step",
    "start": "2226800",
    "end": "2233960"
  },
  {
    "text": "in the pipeline after you've collected the data you can run it through processors and there are all sorts of processors that can do aggregation of",
    "start": "2233960",
    "end": "2241040"
  },
  {
    "text": "data they can you know filter it and Sample it and redact it and take out pi",
    "start": "2241040",
    "end": "2246839"
  },
  {
    "text": "I and that kind of thing um or remap it oh this thing over here sends Telemetry",
    "start": "2246839",
    "end": "2253560"
  },
  {
    "text": "and the field name is wrong so we're going to change the field name so that my Upstream systems all work all get the same",
    "start": "2253560",
    "end": "2259640"
  },
  {
    "text": "value and then finally the exporters take all the postprocess data and they can send it places so you can send it to",
    "start": "2259640",
    "end": "2266960"
  },
  {
    "text": "your local Prometheus instance you can send it to your third party vendors um",
    "start": "2266960",
    "end": "2272079"
  },
  {
    "text": "some vendors have custom exporters that are designed to transform things into whatever format they want want some",
    "start": "2272079",
    "end": "2277520"
  },
  {
    "text": "vendors um just accept otel um and in either case you're just going to set it",
    "start": "2277520",
    "end": "2283920"
  },
  {
    "text": "up um you can also save it to a file you can send it to a database there's a",
    "start": "2283920",
    "end": "2289319"
  },
  {
    "text": "bunch of different exporters available",
    "start": "2289319",
    "end": "2294520"
  },
  {
    "text": "um sampling is the idea that okay now I have a fire hose I probably don't need the entire",
    "start": "2294520",
    "end": "2301640"
  },
  {
    "text": "fire hose so",
    "start": "2301640",
    "end": "2307480"
  },
  {
    "text": "the idea is you send the full fire hose to The Collector and then you can filter",
    "start": "2307480",
    "end": "2312760"
  },
  {
    "text": "it out um the simplest model of sampling is pure mathematical deterministic sampling",
    "start": "2312760",
    "end": "2319520"
  },
  {
    "text": "you just use the trace ID as a random number and actually it's defined to be",
    "start": "2319520",
    "end": "2325480"
  },
  {
    "text": "at least seven bytes of Randomness to contain at least seven byes of Randomness and now you can choose based",
    "start": "2325480",
    "end": "2333960"
  },
  {
    "text": "on that Trace ID some fraction that you're going to keep and you will get consistent sampling across your",
    "start": "2333960",
    "end": "2340720"
  },
  {
    "text": "system um Dynamic sampling is something that is less common less possible but my",
    "start": "2340720",
    "end": "2348760"
  },
  {
    "text": "employer does and that's what I work on personally is this idea that you can keep the stuff that matters to you and",
    "start": "2348760",
    "end": "2356200"
  },
  {
    "text": "drop the stuff that doesn't matter enough so like the old was a Tolstoy you know every happy family is alike but",
    "start": "2356200",
    "end": "2361599"
  },
  {
    "text": "every unhappy family is unhappy in its own way so you keep all the unhappy ones and you keep only a small fraction of",
    "start": "2361599",
    "end": "2367640"
  },
  {
    "text": "the happy ones um that's what that is useful",
    "start": "2367640",
    "end": "2374200"
  },
  {
    "text": "for and then so that's collector",
    "start": "2374200",
    "end": "2381760"
  },
  {
    "text": "sorry now the other thing that's really interesting about Telemetry is the idea of using it in real time to keep track",
    "start": "2381760",
    "end": "2388240"
  },
  {
    "text": "of what's going on in your production systems and this is where you establish",
    "start": "2388240",
    "end": "2394640"
  },
  {
    "text": "service level objectives so here what you're doing is you're",
    "start": "2394640",
    "end": "2401000"
  },
  {
    "text": "measuring the performance of your system from the point of view of an observer who cares about it like a",
    "start": "2401000",
    "end": "2407720"
  },
  {
    "text": "customer and you're measuring ideally measuring experience response time for example is",
    "start": "2407720",
    "end": "2413920"
  },
  {
    "text": "a good service level indicator um then you can filter",
    "start": "2413920",
    "end": "2421000"
  },
  {
    "text": "that using like a binary filter the response time was under 2",
    "start": "2421000",
    "end": "2427200"
  },
  {
    "text": "seconds therefore it's good if it's over two seconds then it's not good um that's",
    "start": "2427200",
    "end": "2433400"
  },
  {
    "text": "a service level objective when you take that number and say okay I want that number to be 99.9% over a",
    "start": "2433400",
    "end": "2441800"
  },
  {
    "text": "month now you can look and you can say all right what's my error rate my error rate is you know things are performing",
    "start": "2441800",
    "end": "2448800"
  },
  {
    "text": "well things are going great that thing running along at 99 100% of my capacity for the month but now we have a bad time",
    "start": "2448800",
    "end": "2457079"
  },
  {
    "text": "and my database slows down and now I start having long response times that",
    "start": "2457079",
    "end": "2462839"
  },
  {
    "text": "SLI starts triggering and I'm burning through an error",
    "start": "2462839",
    "end": "2468640"
  },
  {
    "text": "budget so now you can warn yourself you can say oh I'm going to burn through this budget in the next 24 hours I",
    "start": "2468640",
    "end": "2476040"
  },
  {
    "text": "probably better work on this tomorrow or if it says you're burning through your budget and you're going to be gone in",
    "start": "2476040",
    "end": "2481079"
  },
  {
    "text": "four hours okay I have a real problem wake somebody up that's what SL slos can do for you it",
    "start": "2481079",
    "end": "2488760"
  },
  {
    "text": "lets you have a budget for your failure and again this is this is about resilience Reliance this is not about",
    "start": "2488760",
    "end": "2494520"
  },
  {
    "text": "not having failures it's about reacting to them appropriately in a way that's sustainable for us as",
    "start": "2494520",
    "end": "2502160"
  },
  {
    "text": "humans um so when you're working in Legacy code",
    "start": "2502520",
    "end": "2507880"
  },
  {
    "text": "when you're working in a legacy system the way you start is start with a collector give yourself a place to send",
    "start": "2507880",
    "end": "2515359"
  },
  {
    "text": "the stuff you're about to send then you add observability incrementally if you",
    "start": "2515359",
    "end": "2520680"
  },
  {
    "text": "can apply an easy button say you're working on a legacy Java codebase you can go and you can turn on that auto",
    "start": "2520680",
    "end": "2527359"
  },
  {
    "text": "instrumentation for Java with like one line in your deploy and now you're going to start getting stuff maybe you'll get",
    "start": "2527359",
    "end": "2533240"
  },
  {
    "text": "too much stuff but you can adjust that um you can generate metrics and traces you can use that information to",
    "start": "2533240",
    "end": "2539760"
  },
  {
    "text": "pull out a service map um you can add now now it's like",
    "start": "2539760",
    "end": "2546839"
  },
  {
    "text": "okay that took a long time but I don't know why because I can't see inside the code now you can go in and add explicit",
    "start": "2546839",
    "end": "2553000"
  },
  {
    "text": "spans for the things that are mysterious the things you have questions about so when you go to ask a question we have a",
    "start": "2553000",
    "end": "2559559"
  },
  {
    "text": "little um slack Channel called the sweare jar um in our Telemetry team and",
    "start": "2559559",
    "end": "2565119"
  },
  {
    "text": "basically they post there whenever they wish they had something they don't",
    "start": "2565119",
    "end": "2570599"
  },
  {
    "text": "have and so somebody who's got a couple of hours in between their on call shifts",
    "start": "2570599",
    "end": "2576240"
  },
  {
    "text": "or whatever can go in and say oh I can add Telemetry here so keep track of that",
    "start": "2576240",
    "end": "2581640"
  },
  {
    "text": "things you're curious about that you don't have the answers to and again the question you want to ask is how do I",
    "start": "2581640",
    "end": "2587040"
  },
  {
    "text": "know this is working in production",
    "start": "2587040",
    "end": "2592920"
  },
  {
    "text": "so this is what I mean about architecture you're architecting for observability it doesn't change the way",
    "start": "2592920",
    "end": "2598880"
  },
  {
    "text": "you architect the rest of your system it means that you need to think about",
    "start": "2598880",
    "end": "2604119"
  },
  {
    "text": "it throughout your process proc from the beginning to the end like nearly everything is important",
    "start": "2604119",
    "end": "2612599"
  },
  {
    "text": "enough to decorate Telemetry with it the only reason you might not want to is because it's so high performance or so",
    "start": "2612599",
    "end": "2618280"
  },
  {
    "text": "core but basically if you develop the muscle of adding Telemetry as you're in",
    "start": "2618280",
    "end": "2623880"
  },
  {
    "text": "there working you're going to appreciate that as you go um and again you pass the",
    "start": "2623880",
    "end": "2630440"
  },
  {
    "text": "metadata along when you make calls across processes across functions and things like that um",
    "start": "2630440",
    "end": "2637880"
  },
  {
    "text": "and so you know and then use the standards",
    "start": "2637880",
    "end": "2643000"
  },
  {
    "text": "hotel is there hotel's going to get better keep going record enough",
    "start": "2643000",
    "end": "2648319"
  },
  {
    "text": "information so seriously just use Hotel it's still evolving it's not perfect yet",
    "start": "2648319",
    "end": "2653520"
  },
  {
    "text": "but it's getting there and if you want to come along um you know we my team my company",
    "start": "2653520",
    "end": "2660640"
  },
  {
    "text": "goes to you know a couple of dozen meetings a week and we're participating in all these different things this a",
    "start": "2660640",
    "end": "2666359"
  },
  {
    "text": "bunch of different things your language of choice your platform of choice there's a lot of places where you can",
    "start": "2666359",
    "end": "2671520"
  },
  {
    "text": "help so if you have some bandwidth to do some open source work open Telemetry is a great place to think about it",
    "start": "2671520",
    "end": "2679559"
  },
  {
    "text": "so to wrap it up your infrastructure is your",
    "start": "2679559",
    "end": "2685400"
  },
  {
    "text": "architecture it's not just your business logic is not architecture your infrastructure is architecture yeah let",
    "start": "2685400",
    "end": "2691880"
  },
  {
    "text": "me rephrase that your business logic is your architecture but so is your infrastructure um",
    "start": "2691880",
    "end": "2700319"
  },
  {
    "text": "and put it in a place you can control it and distribute it from there and you can you can start today",
    "start": "2700319",
    "end": "2707160"
  },
  {
    "text": "you can literally like make something work um just to let you know my company",
    "start": "2707160",
    "end": "2712920"
  },
  {
    "text": "honeycom IO um we are big supporters of hotel as I said we have a lot of people working on it um we make an",
    "start": "2712920",
    "end": "2720079"
  },
  {
    "text": "observability tool we'll be happy to talk to you if you come out there but um",
    "start": "2720079",
    "end": "2725119"
  },
  {
    "text": "we also have a generous free plan so if you want to give stuff a try we're a good place to start with it",
    "start": "2725119",
    "end": "2731240"
  },
  {
    "text": "so that'll do it questions I see somebody hi thank you for your talk so",
    "start": "2731240",
    "end": "2739760"
  },
  {
    "text": "we started to looking into observability in introducing Tres to C processing okay",
    "start": "2739760",
    "end": "2746280"
  },
  {
    "text": "but one of the things that we saw that it's very challenging when we have when we process batches so if you if you",
    "start": "2746280",
    "end": "2754359"
  },
  {
    "text": "process one by one so it's really intuitive not intuitive but it makes",
    "start": "2754359",
    "end": "2761319"
  },
  {
    "text": "sense but if you start posing a b of let's say 1,000 messages and then the",
    "start": "2761319",
    "end": "2768000"
  },
  {
    "text": "next uh consumer also process 1,000 messages it starts to be very",
    "start": "2768000",
    "end": "2773280"
  },
  {
    "text": "challenging and we didn't see literature that talks about it yeah it is the one",
    "start": "2773280",
    "end": "2780440"
  },
  {
    "text": "of the things that we recommend is like you get those batches and those batches that if you try to make the batch a rout",
    "start": "2780440",
    "end": "2786040"
  },
  {
    "text": "span then you might end up with a 4-Hour batch a 4-Hour root span which is really hard to track um one of the techniques",
    "start": "2786040",
    "end": "2793520"
  },
  {
    "text": "we tend to recommend people use is that you put a limit on your batch size and",
    "start": "2793520",
    "end": "2798880"
  },
  {
    "text": "duration and so you set things up so essentially I'm going to process until I",
    "start": "2798880",
    "end": "2803920"
  },
  {
    "text": "get to say a 100 traces or until I get to five minutes or whatever that might be and then you end that trace and you",
    "start": "2803920",
    "end": "2810599"
  },
  {
    "text": "start a new Trace so that you have smaller chunks of traces but then decorate all of those traces with your",
    "start": "2810599",
    "end": "2817040"
  },
  {
    "text": "batch ID so your batch ID is not your Trace ID your batch ID is found in all of those so you can do a query and say",
    "start": "2817040",
    "end": "2823119"
  },
  {
    "text": "show me everything from this batch but you'll find that there are four five 10 a thousand sequential traces within that",
    "start": "2823119",
    "end": "2830319"
  },
  {
    "text": "batch Each of which handles a bucket of related of related things but it it it",
    "start": "2830319",
    "end": "2837000"
  },
  {
    "text": "does it's it's a way to make sure that the Telemetry keeps flowing that you're getting the information along the way um",
    "start": "2837000",
    "end": "2844599"
  },
  {
    "text": "but that's it's a very custom decision you have to make about doing that but",
    "start": "2844599",
    "end": "2849680"
  },
  {
    "text": "but that's the general technique that we found anything else I see somebody way",
    "start": "2849680",
    "end": "2858680"
  },
  {
    "text": "[Applause] back so if I say cool I want be going",
    "start": "2861150",
    "end": "2868000"
  },
  {
    "text": "Telemetry what are some of the pitfalls that should expect uh depends a lot on your uh",
    "start": "2868000",
    "end": "2874599"
  },
  {
    "text": "programming Environ enironment as I said it's changing rapidly for traces things",
    "start": "2874599",
    "end": "2879760"
  },
  {
    "text": "are pretty mature and in most languages it works pretty well for Matrix Matrix is still",
    "start": "2879760",
    "end": "2885680"
  },
  {
    "text": "stabilizing and there are a couple of languages that are less good than others",
    "start": "2885680",
    "end": "2892319"
  },
  {
    "text": "um I was tearing what little hair I have left out the other day over trying to do",
    "start": "2892319",
    "end": "2897559"
  },
  {
    "text": "some uh Hotel metrics in go um that still needs work uh logs are still",
    "start": "2897559",
    "end": "2904680"
  },
  {
    "text": "further behind and in particular when we start talking about things like sampling logs and",
    "start": "2904680",
    "end": "2910040"
  },
  {
    "text": "stuff like that that's not really there yet um so it's still an evolving process",
    "start": "2910040",
    "end": "2915839"
  },
  {
    "text": "but I still think it's worth investing in it now and doing what you can with the tools you have start",
    "start": "2915839",
    "end": "2922440"
  },
  {
    "text": "with tracing get that working and then as you you know like maybe you want to wait a little bit on that Trace thank",
    "start": "2922440",
    "end": "2931480"
  },
  {
    "text": "[Music] you [Music]",
    "start": "2933000",
    "end": "2939249"
  }
]