[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "[Music]",
    "start": "620",
    "end": "5870"
  },
  {
    "text": "so I mentioned in the description that you're I functional programming can help",
    "start": "25160",
    "end": "30279"
  },
  {
    "text": "you write code that's like Pam Greer and I realize that not everyone may know who Pam Greer is so I thought I'd give you a",
    "start": "30279",
    "end": "36640"
  },
  {
    "text": "short introduction by showing you the trailer for Foxy Brown pamer was hey",
    "start": "36640",
    "end": "41920"
  },
  {
    "text": "yeah no kidding um Pam Greer is an action star of the 70s 80s 90s and today",
    "start": "41920",
    "end": "48559"
  },
  {
    "text": "and pamer is pretty awesome so what does it have to do with us good question well",
    "start": "48559",
    "end": "54239"
  },
  {
    "text": "we want to learn to write code with drive that don't take no drive so I want to introduce you",
    "start": "54239",
    "end": "61480"
  },
  {
    "text": "to the Pam Greer criteria for code badassery so Pam Greer like the code",
    "start": "61480",
    "end": "69080"
  },
  {
    "start": "63000",
    "end": "348000"
  },
  {
    "text": "that we want to write is powerful beautiful and tough to mess with so when I say powerful I mean the",
    "start": "69080",
    "end": "77000"
  },
  {
    "text": "code you can do big things with you can do them easily and you can do them quickly right tough to mess with I mean secure",
    "start": "77000",
    "end": "84400"
  },
  {
    "text": "from manipulation it's hard to it's hard to mess up yourself that's a good criteria of code and also that it's easy",
    "start": "84400",
    "end": "90840"
  },
  {
    "text": "to maintain it's hard to mess up unintentionally later another word for this in terms of com code is robust but",
    "start": "90840",
    "end": "97560"
  },
  {
    "text": "I felt really weird calling Pam Greer robust so I went with tough to mess with",
    "start": "97560",
    "end": "103439"
  },
  {
    "text": "the last one is beautiful um so I'm not trying to objectify miss Greer uh I'm trying to function ify her because it's",
    "start": "103439",
    "end": "110759"
  },
  {
    "text": "F function I get it all right um the point is though she is undoubtedly",
    "start": "110759",
    "end": "116079"
  },
  {
    "text": "beautiful um and the last two attributes contribute to that and I think that's a really good analogy actually for functional programming so we want to",
    "start": "116079",
    "end": "122719"
  },
  {
    "text": "write code that's elegant and that's concise and that is easily readable although functional programming has a",
    "start": "122719",
    "end": "127759"
  },
  {
    "text": "bad rep for that and we want it to be able to be easily reused that's a beautiful quality in code and we also",
    "start": "127759",
    "end": "133879"
  },
  {
    "text": "want it to be fun to write if it's not fun to write you're not going to want to write it and the language isn't going to get any any uh any momentum so this is a",
    "start": "133879",
    "end": "143560"
  },
  {
    "text": "schola Meetup we're talking about writing functional programming in schola um there's a couple things I just wanted",
    "start": "143560",
    "end": "148760"
  },
  {
    "text": "to mention some things that you're going to notice about the the scolar code in here um one is that you don't need",
    "start": "148760",
    "end": "155720"
  },
  {
    "text": "parentheses for method calls you can just if you put the name of the method you can then put the arguments after it",
    "start": "155720",
    "end": "161360"
  },
  {
    "text": "another one is that semicolons are optional um and return value is also optional you can use semicolons you can",
    "start": "161360",
    "end": "168280"
  },
  {
    "text": "use a return value but you don't have to which is pretty cool um another thing is that scalla is a statically typed",
    "start": "168280",
    "end": "174400"
  },
  {
    "text": "language with type inference okay that's a lot of buzzwords in a row what statically types means is that",
    "start": "174400",
    "end": "182239"
  },
  {
    "text": "everything that you declare has to have a specific type if you have a variable and it's a it's a sequence of characters",
    "start": "182239",
    "end": "189440"
  },
  {
    "text": "that forms a word that's a string and you say it's a string it has to be a string when you assign it and what that",
    "start": "189440",
    "end": "195640"
  },
  {
    "text": "what the place that that's enforced is that compile time rather than run time so if you mess that up the compiler is",
    "start": "195640",
    "end": "200959"
  },
  {
    "text": "going to tell you you're not going to be able to run the code now type inference is interesting so if you've written Java code you've probably written a lot of",
    "start": "200959",
    "end": "206799"
  },
  {
    "text": "code where you like have to repeat the type eight times you're like this is a string I'm passing you a string you're getting back a string and it's like come",
    "start": "206799",
    "end": "213040"
  },
  {
    "text": "on computer like why can't you figure that out so Scala can so that's pretty",
    "start": "213040",
    "end": "218360"
  },
  {
    "text": "cool so like what does it look like it's kind of small I apologize uh I'll make",
    "start": "218360",
    "end": "224760"
  },
  {
    "text": "that bigger next time um so we see we've got a value X and we declare the type after we say string equals a so the type",
    "start": "224760",
    "end": "233680"
  },
  {
    "text": "of the first one what is it the first line anybody that says it",
    "start": "233680",
    "end": "240159"
  },
  {
    "text": "it's a string good job what's the type of the second variable",
    "start": "240159",
    "end": "245760"
  },
  {
    "text": "y integer you figure that out what's the type of the third one it's a float or a double what's the",
    "start": "245760",
    "end": "252840"
  },
  {
    "text": "type of the fourth one it's a thing so you're smart enough to figure that out by reading the cool",
    "start": "252840",
    "end": "258600"
  },
  {
    "text": "thing is the scholar compiler is also smart enough to figure that out by reading um I also show threw up there a",
    "start": "258600",
    "end": "263800"
  },
  {
    "text": "list declaration notice you don't have to declare what type of list it is it knows it's a list of strings um and and",
    "start": "263800",
    "end": "269960"
  },
  {
    "text": "just to show you that we access strings by I'm sorry we access elements in a list by just doing parentheses in the",
    "start": "269960",
    "end": "275639"
  },
  {
    "text": "index this is just a few like quick just so you're like ah you're not like whoa what is that when we see some Scala code",
    "start": "275639",
    "end": "281680"
  },
  {
    "text": "in action so that's Scala um here's a method in Scala this",
    "start": "281680",
    "end": "287240"
  },
  {
    "text": "is a haggling method um I wanted to point out here that the types are",
    "start": "287240",
    "end": "292360"
  },
  {
    "text": "defined after the variable name which I mentioned before um the return type here of haggle is a string and it's defined",
    "start": "292360",
    "end": "298759"
  },
  {
    "text": "after the argument l list so that's good to know um notice there's no return in",
    "start": "298759",
    "end": "304080"
  },
  {
    "text": "here the last line of the method is the response so it just Returns the",
    "start": "304080",
    "end": "309360"
  },
  {
    "text": "response um if you take off the response here actually it still works which is",
    "start": "309360",
    "end": "314880"
  },
  {
    "text": "kind of crazy if we were to do this oops oh it's so tiny even I can't read",
    "start": "314880",
    "end": "321880"
  },
  {
    "text": "it I apologize um if we do this still works it's kind of cool it",
    "start": "321880",
    "end": "329160"
  },
  {
    "text": "just knows it says Hey the last expression that you defined is a string so I'm going to give you back a string and in fact we could even take off",
    "start": "329160",
    "end": "338400"
  },
  {
    "text": "this and the code would still know it's pretty cool right um so",
    "start": "338840",
    "end": "343919"
  },
  {
    "text": "yeah notice uh here yeah so that's just a little bit about what Scola looks like",
    "start": "343919",
    "end": "349280"
  },
  {
    "start": "348000",
    "end": "366000"
  },
  {
    "text": "um just so you're not I don't want you to be surprised by anything in the code well I do but not just by the syntax",
    "start": "349280",
    "end": "356479"
  },
  {
    "text": "functional programming that's what you're here for functional programming is awesome and you want to know how to do it preferably without you know",
    "start": "356479",
    "end": "363000"
  },
  {
    "text": "growing your proverbial neck beard and I'll get to that in a bit but what is functional programming okay good",
    "start": "363000",
    "end": "369560"
  },
  {
    "start": "366000",
    "end": "403000"
  },
  {
    "text": "question that no one asked me directly um so to answer that we have to ask another",
    "start": "369560",
    "end": "375599"
  },
  {
    "text": "question what is a program Whoa man so I'm not just asking",
    "start": "375599",
    "end": "382680"
  },
  {
    "text": "that to be philosophical because it actually is important does anybody want to throw out",
    "start": "382680",
    "end": "387840"
  },
  {
    "text": "a definition of what a computer program is",
    "start": "387840",
    "end": "391560"
  },
  {
    "text": "is it's what set of instructions for a computer very good it was not a trick",
    "start": "395199",
    "end": "400440"
  },
  {
    "text": "question that was exactly the answer I was looking for in fact it's on the next slide so we'll ask a kid this is",
    "start": "400440",
    "end": "406400"
  },
  {
    "start": "403000",
    "end": "431000"
  },
  {
    "text": "actually from single simple English Wikipedia a computer program is a list of instructions that you tell tells the computer what to do right so everyone",
    "start": "406400",
    "end": "413120"
  },
  {
    "text": "knows everybody that's what a program is right wrong okay sorry little girl",
    "start": "413120",
    "end": "419720"
  },
  {
    "text": "that's not actually wrong and our lovely particip that's not actually wrong that's true that is a that is one",
    "start": "419720",
    "end": "425000"
  },
  {
    "text": "definition of a computer program that's what a computer program can be however that's not the only way to write a",
    "start": "425000",
    "end": "430599"
  },
  {
    "text": "computer program that's actually called imperative programming um and and we have",
    "start": "430599",
    "end": "437280"
  },
  {
    "start": "431000",
    "end": "468000"
  },
  {
    "text": "object-oriented programming which some of you may be familiar with it's a different variety of imperative programming as well when you do",
    "start": "437280",
    "end": "442639"
  },
  {
    "text": "imperative programming you're saying do this then do that then do the other thing and then maybe give me back the value right we've uh most of us probably",
    "start": "442639",
    "end": "449759"
  },
  {
    "text": "written programs like that um object oriented is a little different it's saying this is a doohickey that can do",
    "start": "449759",
    "end": "455240"
  },
  {
    "text": "this and this is a what it that can do that so hey doohickey go ask the what's it to do that but it's still",
    "start": "455240",
    "end": "460879"
  },
  {
    "text": "instructions and they're just happen to be encapsulated in a different structure so that's that's the mo sort",
    "start": "460879",
    "end": "467639"
  },
  {
    "text": "of more familiar type of programming that we normally do if a program isn't that if it's not a",
    "start": "467639",
    "end": "474440"
  },
  {
    "start": "468000",
    "end": "497000"
  },
  {
    "text": "series of commands then what is it that's a good question too",
    "start": "474440",
    "end": "479879"
  },
  {
    "text": "so the concept behind functional programming is it asks the question basically what if instead of telling the",
    "start": "479879",
    "end": "485479"
  },
  {
    "text": "pro the computer what to do we just told it what things are yeah not like a lot of Cheers not a",
    "start": "485479",
    "end": "492560"
  },
  {
    "text": "lot of like ah because it's kind of a weird concept um like I mean you're",
    "start": "492560",
    "end": "498560"
  },
  {
    "start": "497000",
    "end": "519000"
  },
  {
    "text": "probably saying some stuff like okay I tell computer what computer a computer what things are all the time first off",
    "start": "498560",
    "end": "505759"
  },
  {
    "text": "so why is this different you're probably also thinking if I already knew what all the things were I probably wouldn't even be writing a computer program so fair",
    "start": "505759",
    "end": "513959"
  },
  {
    "text": "enough right um but let's talk about what the evaluation of expressions mean instead of the execution of commands so",
    "start": "513959",
    "end": "520680"
  },
  {
    "start": "519000",
    "end": "553000"
  },
  {
    "text": "what's an expression what things are so this is an expression so here's the first one it",
    "start": "520680",
    "end": "527839"
  },
  {
    "text": "says The Vow the queen is equal to Elizabeth II that's a that's a an",
    "start": "527839",
    "end": "533240"
  },
  {
    "text": "assignment that's a really common type of expression however this is also what things are it says that the the governor",
    "start": "533240",
    "end": "540040"
  },
  {
    "text": "given a state is the top vote getter of all the candidates and this is this is a definition of a term but it involves",
    "start": "540040",
    "end": "547560"
  },
  {
    "text": "doing some computation to get the result and so this last one is super important it's critical that's a function and",
    "start": "547560",
    "end": "553959"
  },
  {
    "start": "553000",
    "end": "614000"
  },
  {
    "text": "that's our building block for functional programming so what is a function",
    "start": "553959",
    "end": "559519"
  },
  {
    "text": "function is a relation between values where each input value gives you exactly one back thanks",
    "start": "559519",
    "end": "564720"
  },
  {
    "text": "you40 so if you've taken a CS class or D programming before you're probably",
    "start": "564720",
    "end": "570000"
  },
  {
    "text": "thinking like wait a second that's not what I learned a function was and this is a this is a mathematical definition",
    "start": "570000",
    "end": "575240"
  },
  {
    "text": "so you may remember this from algebra or pre-algebra so it's stricter than our",
    "start": "575240",
    "end": "580680"
  },
  {
    "text": "normal programming definition our normal programming definition says a function is just a sub routine it takes a",
    "start": "580680",
    "end": "586560"
  },
  {
    "text": "parameter sometimes no parameters and it returns a value what we're accepting as sort of our guiding principle when we're",
    "start": "586560",
    "end": "593720"
  },
  {
    "text": "doing functional programming is that we're going to follow this definition of a function so it's both a definition and",
    "start": "593720",
    "end": "600079"
  },
  {
    "text": "a rule and kind of a guideline um you don't always stick to this but you try to as much as possible and that's how",
    "start": "600079",
    "end": "606279"
  },
  {
    "text": "you do functional programming so it's still it still covers a lot of things that you know and love like you might",
    "start": "606279",
    "end": "611920"
  },
  {
    "text": "know this as a in fact as a static method so you don't need an instance of a class to call a function like",
    "start": "611920",
    "end": "618399"
  },
  {
    "start": "614000",
    "end": "684000"
  },
  {
    "text": "this so here are some examples we got math. square root we've got collections.",
    "start": "618399",
    "end": "624040"
  },
  {
    "text": "sort when you copy an array a lot of times you do this these are all static methods and these are functions under r",
    "start": "624040",
    "end": "629480"
  },
  {
    "text": "defin our new definition that we're accepting",
    "start": "629480",
    "end": "636040"
  },
  {
    "text": "so does anyone recognize that bottom illustration this is something I remember from math a long time ago um",
    "start": "636040",
    "end": "643880"
  },
  {
    "text": "it's like a black box right the idea is you put something in and you get something out and you when you put the",
    "start": "643880",
    "end": "649120"
  },
  {
    "text": "same thing in you always get the same thing out and the reason why I included it is the thing that's important is that it's a box it's closed you can't besides",
    "start": "649120",
    "end": "657079"
  },
  {
    "text": "that one input area put anything else in it nor besides that one output area can you get anything else out which is",
    "start": "657079",
    "end": "663279"
  },
  {
    "text": "pretty important and so here's a definition of something called a pure function which is sort of this more",
    "start": "663279",
    "end": "669680"
  },
  {
    "text": "limited function that we've we've adopted so a pure function basically it can be described only in the terms of",
    "start": "669680",
    "end": "677240"
  },
  {
    "text": "its return type which is what comes out of the meat grinder down there and its arguments which what go is what goes in",
    "start": "677240",
    "end": "682839"
  },
  {
    "text": "the top and it that means it doesn't touch anything else in the rest of the program which is pretty interesting",
    "start": "682839",
    "end": "690200"
  },
  {
    "start": "684000",
    "end": "701000"
  },
  {
    "text": "that's our building block um we've taken away some of our abilities when we do that right like manipulating state is a",
    "start": "690200",
    "end": "696560"
  },
  {
    "text": "pretty important thing to do in a computer program so begs the question what do we get in",
    "start": "696560",
    "end": "702120"
  },
  {
    "start": "701000",
    "end": "785000"
  },
  {
    "text": "return this cat is skeptical I should have had that up while I was saying so um so here's some things about functions",
    "start": "702120",
    "end": "709200"
  },
  {
    "text": "that we're going to go over first one functions are deterministic you'll always get the same result if you put",
    "start": "709200",
    "end": "714320"
  },
  {
    "text": "the same data in that never changes there's nothing you can keep giving the same function the same thing over and",
    "start": "714320",
    "end": "719560"
  },
  {
    "text": "over and over again you never get anything back believe there's a definition of Sanity that involves that so this is a really calming thing to",
    "start": "719560",
    "end": "726399"
  },
  {
    "text": "know it's it is because you know you can reason about the correctness of your",
    "start": "726399",
    "end": "732120"
  },
  {
    "text": "small chunk of programming and that's like that's really useful because if you're a working programmer and you've",
    "start": "732120",
    "end": "738120"
  },
  {
    "text": "ever had a bug you know how unusual that is actually so it kind of eliminates",
    "start": "738120",
    "end": "745079"
  },
  {
    "text": "this entire like vector of bugs which is where something happened in the rest of the program and all of a sudden my my",
    "start": "745079",
    "end": "751160"
  },
  {
    "text": "program my my small sub program is returning different values it's also really nice for unit",
    "start": "751160",
    "end": "757839"
  },
  {
    "text": "tests because you don't have to set up State um debugging it can make it easier",
    "start": "757839",
    "end": "763680"
  },
  {
    "text": "to pinpoint where you need to debug I am not going to say debugging functional programming is easier because that is",
    "start": "763680",
    "end": "769040"
  },
  {
    "text": "not true but this can have benefits for debugging in that look if something's going wrong with this function you know",
    "start": "769040",
    "end": "775560"
  },
  {
    "text": "it's you know if something's going wrong with the output and the input you know it's happening inside the function you know something outside didn't cause",
    "start": "775560",
    "end": "782399"
  },
  {
    "text": "it so as I just said so this is tough to mess with Pam approves um and so this is",
    "start": "782399",
    "end": "790480"
  },
  {
    "start": "785000",
    "end": "896000"
  },
  {
    "text": "pretty cool so we want to keep that another one is that functions are encapsulated this is a really cool",
    "start": "790480",
    "end": "796519"
  },
  {
    "text": "concept so has has anyone like done any object-oriented programming in a big way yeah so I in college they taught us",
    "start": "796519",
    "end": "803800"
  },
  {
    "text": "object oriented programming and I remember being quizzed and quizzed on the four benefits of object oriented programming and I can't remember any of",
    "start": "803800",
    "end": "810399"
  },
  {
    "text": "them except encapsulation right now um abstraction maybe but anyway encapsulation is really important what",
    "start": "810399",
    "end": "816680"
  },
  {
    "text": "that means basically is like the stuff inside the function it's a black box in a lot of ways and one of them is that you don't care what happens inside of it",
    "start": "816680",
    "end": "824120"
  },
  {
    "text": "as you have you have the description of the function acts as a contract right it says if you give me this I'll give you",
    "start": "824120",
    "end": "829279"
  },
  {
    "text": "that every time guaranteed that's pretty cool so this is really good for readability um it means sort of that you",
    "start": "829279",
    "end": "837120"
  },
  {
    "text": "can skip large chunks of things if you don't care about them it's kind of like what I was saying with debugging right like if you're if that if that function",
    "start": "837120",
    "end": "843480"
  },
  {
    "text": "ain't broke you don't need to read it that's kind of nice um it helps with reuse it means it means if that",
    "start": "843480",
    "end": "849399"
  },
  {
    "text": "description of the function fulfills your contract requirements you can use it somewhere else and you're not going to worry that the original collar is",
    "start": "849399",
    "end": "856399"
  },
  {
    "text": "somehow changing it um and it helps with maintainability actually which is I think a really awesome Salient Point um",
    "start": "856399",
    "end": "864839"
  },
  {
    "text": "you kind of have these these small chunks and you know that by creating that you've agreed to you've agreed to",
    "start": "864839",
    "end": "870519"
  },
  {
    "text": "keep it that way so it encourages you to break things down and make things smaller and that's usually a good thing",
    "start": "870519",
    "end": "876440"
  },
  {
    "text": "this is beautiful I think this is a really elegant way to write code um it",
    "start": "876440",
    "end": "881880"
  },
  {
    "text": "it's it's making promises in your function declarations that are are very",
    "start": "881880",
    "end": "887600"
  },
  {
    "text": "you can rely on them so I like that this is also tough to mess with um for the",
    "start": "887600",
    "end": "893920"
  },
  {
    "text": "issues I for the reasons I said before you kind of have this unspoken agreement with not only yourself but yourself in",
    "start": "893920",
    "end": "899440"
  },
  {
    "start": "896000",
    "end": "1001000"
  },
  {
    "text": "the future and all other programmers are using your code this is what my function takes and this is what it returns so that's",
    "start": "899440",
    "end": "905079"
  },
  {
    "text": "cool functions are commutative I don't know if that's the right word actually I looked it up on Wikipedia and it looked",
    "start": "905079",
    "end": "911480"
  },
  {
    "text": "like a pretty good word what I was trying to say was that the order doesn't matter this is a fancy way of saying",
    "start": "911480",
    "end": "916600"
  },
  {
    "text": "that right so if we look at this code if you squint and look at it it says you've got a vow first thing and it does one",
    "start": "916600",
    "end": "924199"
  },
  {
    "text": "thing you've got a vow second thing and it calls do another thing and the third thing depends on on the results of those",
    "start": "924199",
    "end": "929800"
  },
  {
    "text": "two values does it matter if we do one thing before another",
    "start": "929800",
    "end": "935319"
  },
  {
    "text": "thing not really we don't care as long as we've got it by the time we're ready to do the last thing and this this is",
    "start": "935319",
    "end": "942000"
  },
  {
    "text": "like a super powerful concept because what this means is you've got these little chunks of work and you can parcel",
    "start": "942000",
    "end": "947920"
  },
  {
    "text": "them out to different machines and to different threads and that's where we're going um the chips aren't getting they",
    "start": "947920",
    "end": "953759"
  },
  {
    "text": "aren't having more capacity instead we're running into parallel cores and parallel Computing is is becoming more",
    "start": "953759",
    "end": "959519"
  },
  {
    "text": "and more important and functional programming you get some of that just for free you don't have to worry about crazy structure or anything like that",
    "start": "959519",
    "end": "966040"
  },
  {
    "text": "because if you've got your little chunk you know that that it can be run while other chunks are being run um another",
    "start": "966040",
    "end": "973839"
  },
  {
    "text": "thing that's useful about it is lazy evaluation let's say in this example do another thing takes freaking forever to",
    "start": "973839",
    "end": "980680"
  },
  {
    "text": "run that happens sometimes right what you can do in a functional programming language is you can you can just wait to",
    "start": "980680",
    "end": "987480"
  },
  {
    "text": "run it until you need it instead of instead of when you initialize the program running that really long do another thing and you know your users",
    "start": "987480",
    "end": "993600"
  },
  {
    "text": "are just waiting there like watching the spinny thing you can wait until they click on whatever it is build the widget",
    "start": "993600",
    "end": "999160"
  },
  {
    "text": "and do it then so that's pretty cool data is immutable so this one is",
    "start": "999160",
    "end": "1005560"
  },
  {
    "start": "1001000",
    "end": "1105000"
  },
  {
    "text": "pretty interesting this is one that to me was not immediately obvious from looking at the at the definition of a",
    "start": "1005560",
    "end": "1011240"
  },
  {
    "text": "pure function what this is saying basically is that once you've created an object you cannot change it and if you",
    "start": "1011240",
    "end": "1017000"
  },
  {
    "text": "want an object that differs in someone you got to make a new copy so you're probably familiar with",
    "start": "1017000",
    "end": "1024360"
  },
  {
    "text": "this from if you've used Java because this is how string Works string is immutable so we've got two strings up",
    "start": "1024360",
    "end": "1029760"
  },
  {
    "text": "here right first one says sand Deus High School football rules and the second one we've taken the first one and we've",
    "start": "1029760",
    "end": "1035600"
  },
  {
    "text": "called two uppercase on it now S2 altered S1 right it changed it it",
    "start": "1035600",
    "end": "1043160"
  },
  {
    "text": "called it it made it uppercase what happens if if you do print line with S1 is it uppercase or low",
    "start": "1043160",
    "end": "1049840"
  },
  {
    "text": "case it's lowercase and the reason why is string is immutable and immutable means it cannot be changed so if you",
    "start": "1049840",
    "end": "1055640"
  },
  {
    "text": "want that uppercase string you got to copy it and then uppercase it so this is pretty powerful actually",
    "start": "1055640",
    "end": "1063160"
  },
  {
    "text": "um this means that there's another whole class of bugs you can just like don't care like I'm done with it because the",
    "start": "1063160",
    "end": "1069360"
  },
  {
    "text": "reason why is you know once you've got an object that no one's going to change that there isn't going to be another",
    "start": "1069360",
    "end": "1074400"
  },
  {
    "text": "calling program that changes it right it's also tough to mess with like",
    "start": "1074400",
    "end": "1079480"
  },
  {
    "text": "I said um it kind of gets it gets rid of some bugs for you so that's pretty cool Scola actually has both immutable",
    "start": "1079480",
    "end": "1086919"
  },
  {
    "text": "immutable data structures there are some things that are really hard to do with um immutable data structures and one",
    "start": "1086919",
    "end": "1093120"
  },
  {
    "text": "thing that might be coming to mind is it can sometimes be less performant not always and we could talk about that",
    "start": "1093120",
    "end": "1098960"
  },
  {
    "text": "afterwards if anybody wants because it's a complicated subject but um it can be slower so sometimes you need immutable",
    "start": "1098960",
    "end": "1104360"
  },
  {
    "text": "data structure but scalid defaults to immutable so we want to just do mutable",
    "start": "1104360",
    "end": "1109520"
  },
  {
    "start": "1105000",
    "end": "1205000"
  },
  {
    "text": "this is our building block it's pretty cool functions are deterministic functions are encapsulated they're",
    "start": "1109520",
    "end": "1115720"
  },
  {
    "text": "commutative by which I mean order of operation doesn't matter any math folks let me know if that's not the right word",
    "start": "1115720",
    "end": "1121000"
  },
  {
    "text": "and data is immutable does anybody have any questions at this point about those four",
    "start": "1121000",
    "end": "1127799"
  },
  {
    "text": "things that's absolutely true they are and that's absolutely true and um they're not new and these any any",
    "start": "1129960",
    "end": "1137600"
  },
  {
    "text": "not only can any language use these people have been encouraging folks in Java to do this for a long time and if you go read um has anyone read Effective",
    "start": "1137600",
    "end": "1145039"
  },
  {
    "text": "Java it's a pretty good book it's by Josh block and it talks about some like best practices for Java and it's been",
    "start": "1145039",
    "end": "1150240"
  },
  {
    "text": "around for a while the first edition came out in like what 96 97 or so maybe that's wrong that could be totally wrong",
    "start": "1150240",
    "end": "1156600"
  },
  {
    "text": "um he covers all three of these Concepts and he especially encourages people to",
    "start": "1156600",
    "end": "1162039"
  },
  {
    "text": "make data immutable so you're totally right not New Concept at all in fact nothing I'm going to cover is a New Concept I will point out the one there's",
    "start": "1162039",
    "end": "1169400"
  },
  {
    "text": "one or two main things about schola that you can't do in Java but none of this is new and in fact functional programming",
    "start": "1169400",
    "end": "1174760"
  },
  {
    "text": "goes back quite a while so um I hope I can I hope one of my goals with this talk is to explain why it's encourage",
    "start": "1174760",
    "end": "1181600"
  },
  {
    "text": "why it's having a Resurgence and why people are interested in it now and a lot of that has to do with what I was talking about with paralyzation because",
    "start": "1181600",
    "end": "1187600"
  },
  {
    "text": "that's become more and more of an issue so this is our building block anyone have any other questions is a",
    "start": "1187600",
    "end": "1193480"
  },
  {
    "text": "great qu great great Point indeed this isn't new we're we are in fact Reinventing the wheel here so this is",
    "start": "1193480",
    "end": "1200600"
  },
  {
    "text": "our building block let's build I really like that guys Lego That's Legos guys is",
    "start": "1200600",
    "end": "1207039"
  },
  {
    "text": "whoa okay um but how do we do it so we maybe need some like guidelines or",
    "start": "1207039",
    "end": "1214080"
  },
  {
    "text": "concepts to like Snap these together because right now all we've got is these little floating bits of computation and",
    "start": "1214080",
    "end": "1221240"
  },
  {
    "text": "I mean you know yeah sometimes you just want the square root of something but usually you want to do something more elaborate so let's figure out how to do",
    "start": "1221240",
    "end": "1227960"
  },
  {
    "text": "that so one of the ways that we can snap our functions together and this is the one I was talking about this is something",
    "start": "1227960",
    "end": "1234280"
  },
  {
    "text": "actually that you can't do in Java is treating functions as first class citizens so functions are first class",
    "start": "1234280",
    "end": "1242679"
  },
  {
    "start": "1240000",
    "end": "1456000"
  },
  {
    "text": "objects in schola so what does that mean it's kind of like a weird it sounds almost kind of political right um I",
    "start": "1242679",
    "end": "1249280"
  },
  {
    "text": "don't think it is I don't know uh so what's the first class citizen a first class citizen is an object that can be",
    "start": "1249280",
    "end": "1255720"
  },
  {
    "text": "assigned to or sorry not just an object but a type of object sh that can be assigned to a variable stored in a data",
    "start": "1255720",
    "end": "1261720"
  },
  {
    "text": "structure returned as a value and then passed to a",
    "start": "1261720",
    "end": "1266919"
  },
  {
    "text": "function let me get there we're doing the strings first so so that that but you're right I am",
    "start": "1267880",
    "end": "1274400"
  },
  {
    "text": "saying that because that's the last one on the list right and it's actually my favorite but um well I don't know I'm",
    "start": "1274400",
    "end": "1281120"
  },
  {
    "text": "not going to pick a favorite so this is a string and I'm just showing you here with a string we've assigned it to a",
    "start": "1281120",
    "end": "1286400"
  },
  {
    "text": "variable we've made a list of them we've stored them in a data structure we've passed it to a to a method and then",
    "start": "1286400",
    "end": "1291760"
  },
  {
    "text": "we've returned it from a method TI a not returns a string or maybe it was the other way around um I want to show that",
    "start": "1291760",
    "end": "1298960"
  },
  {
    "text": "in Java you you and in Scola as well of course you can do this with uh like user specified objects or user speci Define",
    "start": "1298960",
    "end": "1305360"
  },
  {
    "text": "classes like if we defined a rope we could then assign it to a variable we could store it we could have a list of",
    "start": "1305360",
    "end": "1311400"
  },
  {
    "text": "ropes we could we could create functions that took ropes in and then we could also create functions that returned",
    "start": "1311400",
    "end": "1317279"
  },
  {
    "text": "ropes so we can do this in Java with or I'm sorry",
    "start": "1317279",
    "end": "1323240"
  },
  {
    "text": "in Scola with functions which it turns out is like a really big deal so right",
    "start": "1323240",
    "end": "1330279"
  },
  {
    "text": "here I'm just doing the first two I'm assigning a function to a variable and I'm storing it in a data",
    "start": "1330279",
    "end": "1337440"
  },
  {
    "text": "structure so let me see if I can actually make this a little bigger does that help I might ruin some",
    "start": "1337440",
    "end": "1343559"
  },
  {
    "text": "of my funny images later but we'll deal with it when we get to it guys um so",
    "start": "1343559",
    "end": "1349039"
  },
  {
    "text": "right here i' I've defined a very important powerful parallel lies",
    "start": "1349039",
    "end": "1354600"
  },
  {
    "text": "Enterprise scale function that when you pass it a string it adds and spam to the",
    "start": "1354600",
    "end": "1359919"
  },
  {
    "text": "end of it um obviously very important uh task to do so I wanted to to show a",
    "start": "1359919",
    "end": "1366840"
  },
  {
    "text": "little bit so this is this looks even to me now a little bit like just like a forest of punctuation right I mean we've",
    "start": "1366840",
    "end": "1374360"
  },
  {
    "text": "used basically entire you just like hit shift and went like that over the top of row of the keyboard so I wanted to go",
    "start": "1374360",
    "end": "1380240"
  },
  {
    "text": "through it a little bit so ad spam as a value it's just like the value that we",
    "start": "1380240",
    "end": "1386080"
  },
  {
    "text": "Define for string and AD spam has a type the type is this whole",
    "start": "1386080",
    "end": "1391679"
  },
  {
    "text": "thing so ad spam's type is a function that takes a string and returns a string",
    "start": "1391679",
    "end": "1399640"
  },
  {
    "text": "and so that's the structure it's list of parameters types Arrow return type so Arrow sort of",
    "start": "1399640",
    "end": "1407200"
  },
  {
    "text": "signifies arrow to the is that my left or right arrow to the to the left sorry",
    "start": "1407200",
    "end": "1414600"
  },
  {
    "text": "uh signifies a function so that's the type of AD spam so once I've defined it",
    "start": "1414600",
    "end": "1421200"
  },
  {
    "text": "I can then call AD spam on egg and bacon and get that this point it's not that different than a defa but hey you can do",
    "start": "1421200",
    "end": "1427480"
  },
  {
    "text": "that might be worth doing sometime might be it might help one benefit I could think of doing this is for readability",
    "start": "1427480",
    "end": "1433880"
  },
  {
    "text": "um if you have a function that maybe you didn't write but that has a really impenetrable name you might want to",
    "start": "1433880",
    "end": "1438919"
  },
  {
    "text": "rename it you could do it with this um we also could put a list of functions in",
    "start": "1438919",
    "end": "1444039"
  },
  {
    "text": "there and then call the function directly from the array again it's kind of interesting but not like super useful",
    "start": "1444039",
    "end": "1450440"
  },
  {
    "text": "so let's get on to the next ones the next one after this will be returning a function as a",
    "start": "1450440",
    "end": "1455919"
  },
  {
    "start": "1456000",
    "end": "1570000"
  },
  {
    "text": "value okay returning functions from functions so up here I've defined this",
    "start": "1456840",
    "end": "1464360"
  },
  {
    "text": "function tag text and this is something that you might do if you were for some reason in creating XML by hand or HTML",
    "start": "1464360",
    "end": "1471120"
  },
  {
    "text": "by hand right so you've got text and you want to you don't want to write a separate function every time you want to",
    "start": "1471120",
    "end": "1476240"
  },
  {
    "text": "add a new tag you don't want a bold you don't want to have to write a new bold function and write a new italic function people don't even use those anymore",
    "start": "1476240",
    "end": "1482520"
  },
  {
    "text": "right uh oh gosh so um you you would write this tag text and you could pass",
    "start": "1482520",
    "end": "1488360"
  },
  {
    "text": "in the tag and the text so if we call Tag text with emphasis and we put in pay",
    "start": "1488360",
    "end": "1494720"
  },
  {
    "text": "attention the result would be pay attention tags with emphasis and we could instead put in you know strong",
    "start": "1494720",
    "end": "1502360"
  },
  {
    "text": "and I'm really strong and it would it would have I'm really strong tag with strong so that's all right to be honest",
    "start": "1502360",
    "end": "1509120"
  },
  {
    "text": "I find that not super readable you're doing tag text M pay attention and I have to in my head sort of like move the",
    "start": "1509120",
    "end": "1515520"
  },
  {
    "text": "M out and figure out what's going on there so one another way of doing this would be to have this um function that",
    "start": "1515520",
    "end": "1524000"
  },
  {
    "text": "returns another function right so tag text 2 I rewrote it",
    "start": "1524000",
    "end": "1529640"
  },
  {
    "text": "it's another function it's another Forest of parentheses and I realize I probably didn't really help with this particular definition but tag text 2",
    "start": "1529640",
    "end": "1537799"
  },
  {
    "text": "takes in a tag which is a string and it returns a function so it's",
    "start": "1537799",
    "end": "1543919"
  },
  {
    "text": "the same thing we saw before it's a little hard to read but if you look in here what you've got is you've got a",
    "start": "1543919",
    "end": "1549440"
  },
  {
    "text": "parameter list an arrow and then the definition of the function so tag text 2 if you pass and",
    "start": "1549440",
    "end": "1558039"
  },
  {
    "text": "SP it returns this tag with and spam tag with and spam is a function and tag with",
    "start": "1558039",
    "end": "1563399"
  },
  {
    "text": "and spam itself can be called on something else which is kind of",
    "start": "1563399",
    "end": "1569600"
  },
  {
    "start": "1570000",
    "end": "1749000"
  },
  {
    "text": "cool I think this is actually really beautiful I find that more that I find that much easier to read to read tag",
    "start": "1570200",
    "end": "1576200"
  },
  {
    "text": "text with something and then the text itself and it it doesn't really clutter anything up or take any more lines of",
    "start": "1576200",
    "end": "1583080"
  },
  {
    "text": "code to create a bunch of functions that are named really verbosely using a function like this that's pretty cool",
    "start": "1583080",
    "end": "1589720"
  },
  {
    "text": "um powerful so one way that this is really useful is in writing libraries",
    "start": "1589720",
    "end": "1594760"
  },
  {
    "text": "actually um the reason why that's really useful is because it means that you can provide your users with like a framework",
    "start": "1594760",
    "end": "1600840"
  },
  {
    "text": "and then let them specialize as much as they want so when I Define tag text 2 I didn't constrain what tags you wanted to",
    "start": "1600840",
    "end": "1606520"
  },
  {
    "text": "put in there I hate to say it but ad spam is actually not valid HTML 5 tag I",
    "start": "1606520",
    "end": "1612520"
  },
  {
    "text": "don't know why um but if I wanted to Define it I can and if I had some need to as a consumer of this code code I",
    "start": "1612520",
    "end": "1618760"
  },
  {
    "text": "totally can that's pretty cool um you also you count as a consumer of your own code I I've read all these quotes too",
    "start": "1618760",
    "end": "1625039"
  },
  {
    "text": "where it's like if you come back to code you wrote a month ago and it doesn't look terrible you're doing it wrong and I always find that to be true and I'm",
    "start": "1625039",
    "end": "1631600"
  },
  {
    "text": "always having to reuse my own code and so thinking about yourself in the future is kind of a good thing even if you aren't reusing something at the moment",
    "start": "1631600",
    "end": "1638039"
  },
  {
    "text": "you may want to do something different with it later so being as flexible as possible is pretty cool um just like a little nerdy side",
    "start": "1638039",
    "end": "1645200"
  },
  {
    "text": "note you could use this function you notice I basically just took a function with two parameters and broke it into a",
    "start": "1645200",
    "end": "1650760"
  },
  {
    "text": "function with one parameter that returns another function you can do this with any um function in multiple parameters",
    "start": "1650760",
    "end": "1656600"
  },
  {
    "text": "and hll which is a really very functioning Pro functional programming Focus language actually does that so",
    "start": "1656600",
    "end": "1662919"
  },
  {
    "text": "it's pretty crazy it's called currying um it's also called partially applying a function uh so does partial application",
    "start": "1662919",
    "end": "1670919"
  },
  {
    "text": "make sense to describe that we partially applied tag text to when we gave it at spam and then we finally applied it when",
    "start": "1670919",
    "end": "1677120"
  },
  {
    "text": "we gave it the text in the so partially applied it's also called currying after hll Curry whose first",
    "start": "1677120",
    "end": "1683559"
  },
  {
    "text": "name is the is he's the namesake of hll",
    "start": "1683559",
    "end": "1688640"
  },
  {
    "text": "the language I think that's right okay so so far we've assigned them as variables we've put them in data structures and we've returned them as",
    "start": "1688640",
    "end": "1694840"
  },
  {
    "text": "functions now we're going to do the last part and I lied this is my favorite part now we're going to pass some functions",
    "start": "1694840",
    "end": "1700600"
  },
  {
    "text": "as arguments to other functions function party so this is actually the meat of",
    "start": "1700600",
    "end": "1706640"
  },
  {
    "text": "functional programming I did not not make this by the way um it was created by a professor at Willet University as a",
    "start": "1706640",
    "end": "1713200"
  },
  {
    "text": "design proposed design for like hll shirts and he has a whole web page with like a bunch of them and they're maybe",
    "start": "1713200",
    "end": "1718600"
  },
  {
    "text": "my favorite thing like like functional programmers like it hot and it stands for higher order and",
    "start": "1718600",
    "end": "1725360"
  },
  {
    "text": "typed ah it's awesome so functions that take functions the joke here is that functions that take another function are",
    "start": "1725360",
    "end": "1731440"
  },
  {
    "text": "called higher order functions um and like I said that's the meat you need that for functional programming and this",
    "start": "1731440",
    "end": "1736679"
  },
  {
    "text": "is not something that you can do with Java you can build interfaces that allow you to approximate it but it's it's not",
    "start": "1736679",
    "end": "1743480"
  },
  {
    "text": "possible and this is like kind of the Big Value ad for Scala it's allowing you to do",
    "start": "1743480",
    "end": "1749519"
  },
  {
    "start": "1749000",
    "end": "1930000"
  },
  {
    "text": "this so let's talk about something that you actually use instead of my silly and",
    "start": "1749519",
    "end": "1754720"
  },
  {
    "text": "spam example for Loops for Loops all the time that's just something that as a",
    "start": "1754720",
    "end": "1760279"
  },
  {
    "text": "programmer you use constantly right and so this is a really stupid for Loop admittedly but it's in its structure is",
    "start": "1760279",
    "end": "1767559"
  },
  {
    "text": "something that probably you've done a million times in Java um you've got an",
    "start": "1767559",
    "end": "1772880"
  },
  {
    "text": "array you put set up a for Loop you say starting at zero until the length of",
    "start": "1772880",
    "end": "1777919"
  },
  {
    "text": "this array I want to increment I and for each index in I do something here it's",
    "start": "1777919",
    "end": "1784279"
  },
  {
    "text": "something stupid you're going to print out hey the other day I ate a name of fruit but you know you do you do pretty",
    "start": "1784279",
    "end": "1790880"
  },
  {
    "text": "complex stuff with that that's a basic building block of imperative programming so I rewrote this in",
    "start": "1790880",
    "end": "1796919"
  },
  {
    "text": "Scola um um Scala declares has its array of fruits or its list of fruits it's",
    "start": "1796919",
    "end": "1804840"
  },
  {
    "text": "basically the same concept the for Loop looks a little different um it starts at zero and it goes it's it has this until",
    "start": "1804840",
    "end": "1811360"
  },
  {
    "text": "syntax to go until fruit salt length and it just assumes you're stepping by one",
    "start": "1811360",
    "end": "1816919"
  },
  {
    "text": "otherwise though it's basically the same thing right it's not any different as I've written him here",
    "start": "1816919",
    "end": "1823039"
  },
  {
    "text": "so I think that there's a better way to do this how many times have you written something like this where you've stepped",
    "start": "1823039",
    "end": "1828720"
  },
  {
    "text": "through a list so many times right it's boilerplate code it's boilerplate code",
    "start": "1828720",
    "end": "1834080"
  },
  {
    "text": "that I fat finger more often than I care to admit as well that's just like number",
    "start": "1834080",
    "end": "1839480"
  },
  {
    "text": "one if I see something weird going on with iterating through a list I'm like a I typed it wrong cool I typed it wrong like that's my first thought that's that",
    "start": "1839480",
    "end": "1847320"
  },
  {
    "text": "sucks I'm going to pause it that we have really really powerful machines right here that we you know take with us in",
    "start": "1847320",
    "end": "1853679"
  },
  {
    "text": "our backpacks on the train and they should be able to do that kind of thing for us",
    "start": "1853679",
    "end": "1858880"
  },
  {
    "text": "so let's do it let's get abstract let's abstract that boilerplate away CU I'm sick of typing a for Loop",
    "start": "1858880",
    "end": "1866639"
  },
  {
    "text": "so one way to do this because now we have this magical power in scalet where we can write a function that takes a",
    "start": "1866639",
    "end": "1872360"
  },
  {
    "text": "function so one we to do this might be to write a new function and have it take an array and then that inner function",
    "start": "1872360",
    "end": "1879519"
  },
  {
    "text": "does that make sense to you guys if we go back and we look at this this guy is",
    "start": "1879519",
    "end": "1885360"
  },
  {
    "text": "like a mini function in here and that's the only only part that ever changes so I want to abstract something that lets",
    "start": "1885360",
    "end": "1891360"
  },
  {
    "text": "me just pass that part into my function so that's my sort of proposed",
    "start": "1891360",
    "end": "1900120"
  },
  {
    "text": "syntax it's for each is what I'm calling it it's going to take a list of fruits",
    "start": "1900120",
    "end": "1905480"
  },
  {
    "text": "because we're iterating through fruits right now it evolves I I it evolves into P I promise spoiler alert um a list of",
    "start": "1905480",
    "end": "1913720"
  },
  {
    "text": "fruits and then it takes a function that's going to that's going to do F it's going to transform a fruit argument",
    "start": "1913720",
    "end": "1920200"
  },
  {
    "text": "of fruit into a unit that's Scholar's word for void so uh basically it's going",
    "start": "1920200",
    "end": "1927279"
  },
  {
    "text": "to take a fruit and return nothing shouldn't do that but we're going to do it",
    "start": "1927279",
    "end": "1934360"
  },
  {
    "text": "so with my with my um sort of concept here I've kind of defined a a sample for",
    "start": "1934360",
    "end": "1941799"
  },
  {
    "text": "each program uh function so what it does is it takes our fruit list and our function and it iterates the list",
    "start": "1941799",
    "end": "1948279"
  },
  {
    "text": "because that's the same thing we always do I know I'm going to do it the minute I get a list I know I'm going to for Loop over it and it calls the function",
    "start": "1948279",
    "end": "1954039"
  },
  {
    "text": "on each individual fruit member okay so if I re rewrite that I",
    "start": "1954039",
    "end": "1961880"
  },
  {
    "text": "would have my my fruits I Define a function and then I do for each for each fruits tum so one thing that's kind of",
    "start": "1961880",
    "end": "1969000"
  },
  {
    "text": "about cool about that is kind of readable so more let's do it more",
    "start": "1969000",
    "end": "1976559"
  },
  {
    "text": "so sometimes I want to talk about things that aren't fruit like pie so I want to",
    "start": "1976559",
    "end": "1982639"
  },
  {
    "text": "make it generic so what I'm doing here is a is kind of like anything so what this is saying is if I give for reach a",
    "start": "1982639",
    "end": "1989559"
  },
  {
    "text": "list of anything as long as my function can handle anything it's cool we can iterate through",
    "start": "1989559",
    "end": "1996399"
  },
  {
    "text": "it so even more abstract what if we weren't limited to list what if I had a",
    "start": "1996399",
    "end": "2002159"
  },
  {
    "text": "set of fruit what if I had a map of fruits to their countries of origin I mean",
    "start": "2002159",
    "end": "2008360"
  },
  {
    "text": "I could have a lot of fruit collections I actually this is true was a member of a fruit of the month club in high school",
    "start": "2008360",
    "end": "2013799"
  },
  {
    "text": "um which is a kind of a collection um so this is even more abstract right I've",
    "start": "2013799",
    "end": "2019720"
  },
  {
    "text": "defined this so I can do my forre on any kind of collection of any kind of thing although I don't know what you would do",
    "start": "2019720",
    "end": "2025880"
  },
  {
    "text": "except for fruit and I don't know I don't even know why you'd be writing about that um this basically a lot of",
    "start": "2025880",
    "end": "2032840"
  },
  {
    "text": "hand waving is what Scola did and so this is how you'd actually write this sort of moronic talk about fruit method",
    "start": "2032840",
    "end": "2038519"
  },
  {
    "text": "in Scala so it's fruits for each telum all",
    "start": "2038519",
    "end": "2044880"
  },
  {
    "text": "right it's not bad right so this little function that we defined",
    "start": "2044880",
    "end": "2052839"
  },
  {
    "text": "earlier so I've moved the function we defined earlier into that collection code so we're now calling our for reach",
    "start": "2052839",
    "end": "2058398"
  },
  {
    "text": "on collections this is not how Scola implemented for reach I want to be super",
    "start": "2058399",
    "end": "2063679"
  },
  {
    "text": "clear about that because I feel like otherwise people are going to leave mean comments on the video this isn't even close to Scala implemented for each the",
    "start": "2063679",
    "end": "2071480"
  },
  {
    "text": "writers of of the Scola collections libraries used all sorts of really cool functional tricks that even I don't know",
    "start": "2071480",
    "end": "2077398"
  },
  {
    "text": "about it believe it or not they they use different ways of doing it that are faster and smarter and safer than this",
    "start": "2077399",
    "end": "2084200"
  },
  {
    "text": "so that's cool that's a good thing and so that's kind of one of the values of this kind of abstraction right someone",
    "start": "2084200",
    "end": "2090919"
  },
  {
    "text": "way smarter than me can figure out how to do it way better and I don't have to change my code to get that those benefits that's really cool um it gets",
    "start": "2090919",
    "end": "2098640"
  },
  {
    "text": "better without without changing things and I can't make stupid fat finger mistakes like I do I equals one or",
    "start": "2098640",
    "end": "2104520"
  },
  {
    "text": "whatever I do I plus Plus+ and it doesn't compile things like that I don't even have the opportunity to do them anymore so that's",
    "start": "2104520",
    "end": "2112040"
  },
  {
    "text": "awesome it's powerful it's cool balance because we get to configure what we want without really caring about the",
    "start": "2112160",
    "end": "2117520"
  },
  {
    "text": "mechanics so you get a lot of a lot of stuff out of it it's pretty cool so something kind of",
    "start": "2117520",
    "end": "2122880"
  },
  {
    "text": "juicier um is now we're trying to do this thing where we've got a list of fruits and we want to make a list of",
    "start": "2122880",
    "end": "2129119"
  },
  {
    "text": "Pies out of them so I just want to point out here that dot dot is list concatenation um it says take a list of",
    "start": "2129119",
    "end": "2136599"
  },
  {
    "text": "pies and add to the front my new piie does that make sense to folks I'm",
    "start": "2136599",
    "end": "2141680"
  },
  {
    "text": "creating I'm adding a new piie to this list so I want to take a list of fruits and turn it into a list of",
    "start": "2141680",
    "end": "2148240"
  },
  {
    "text": "Pies so on a this is also another really common thing that you do with four Loops um you want to to for each member of the",
    "start": "2148240",
    "end": "2155560"
  },
  {
    "text": "list make something out of it or do something something to that member it's pretty common something you do all the time so data is immutable remember with",
    "start": "2155560",
    "end": "2163040"
  },
  {
    "text": "functions so want to return a new member but basically otherwise going through and doing something each member of the list super common we do it all the time",
    "start": "2163040",
    "end": "2170960"
  },
  {
    "text": "so there's this there's this function called map which does that for us the same way for each went through and just",
    "start": "2170960",
    "end": "2177839"
  },
  {
    "text": "did something without a return value to each member map is going to go",
    "start": "2177839",
    "end": "2183560"
  },
  {
    "text": "through and make a new pie for each fruit on the list and it's going to",
    "start": "2183560",
    "end": "2189040"
  },
  {
    "text": "return a list which is pretty interesting so these this code and this code are equivalent does that make sense",
    "start": "2189040",
    "end": "2195359"
  },
  {
    "text": "to folks awesome so I'm going to get even crazier",
    "start": "2195359",
    "end": "2201079"
  },
  {
    "text": "here so back there we defined make pi as this function we were doing that thing",
    "start": "2201079",
    "end": "2206319"
  },
  {
    "text": "we saw earlier where we can def assign a function to a variable we don't well this is a silly",
    "start": "2206319",
    "end": "2212800"
  },
  {
    "text": "example because of course you would need the function make Pi again you're going to use that all the time right right but",
    "start": "2212800",
    "end": "2218680"
  },
  {
    "text": "let's assume we only needed it for that one step we don't need the intermediate value you don't have to you don't have",
    "start": "2218680",
    "end": "2224200"
  },
  {
    "text": "to declare it as a variable you can pass it directly into the function so I've done some examples up here we do this a",
    "start": "2224200",
    "end": "2230040"
  },
  {
    "text": "lot with with other kinds of objects with Primitives so up here instead of instead of declaring a string that's the",
    "start": "2230040",
    "end": "2236760"
  },
  {
    "text": "kind of fruit I want to make my pie out my pie out of I can just pass that string right in that's a pretty power",
    "start": "2236760",
    "end": "2242720"
  },
  {
    "text": "that's pretty useful concept um the reason why that's useful actually so at first you might just think okay cool",
    "start": "2242720",
    "end": "2247760"
  },
  {
    "text": "you're saving some lines of code other thing that's really useful about that blueberry in this in this example",
    "start": "2247760",
    "end": "2254400"
  },
  {
    "text": "blueberry fruit uses kind of fruit right to make its pie kind of fruit is a reference and kind of fruit could",
    "start": "2254400",
    "end": "2261359"
  },
  {
    "text": "through a malicious or simply incompetent actor be changed by by another program another function another",
    "start": "2261359",
    "end": "2266839"
  },
  {
    "text": "program just another programmer doing something bad so that would really screw up your function you wouldn't get what",
    "start": "2266839",
    "end": "2272880"
  },
  {
    "text": "you expected so if you don't need that intermediate value it's a really good idea to pass it in anonymous because",
    "start": "2272880",
    "end": "2278000"
  },
  {
    "text": "then you know what the value is we can do this with a function um and so I've",
    "start": "2278000",
    "end": "2284040"
  },
  {
    "text": "done it here instead of th those first two lines are equivalent to the last one",
    "start": "2284040",
    "end": "2289119"
  },
  {
    "text": "so I want to stop here and make sure people can read that last line I I understand it's pretty confusing if",
    "start": "2289119",
    "end": "2295119"
  },
  {
    "text": "you've never seen this before but basically map is still it's still a method on on the collection and we're",
    "start": "2295119",
    "end": "2302119"
  },
  {
    "text": "we're declaring a function anonymously and passing it in does that make sense to folks",
    "start": "2302119",
    "end": "2309440"
  },
  {
    "text": "any questions about yeah so the difference between map and",
    "start": "2309560",
    "end": "2316480"
  },
  {
    "text": "for each and let me see oh I thought I had to finded it um the difference",
    "start": "2316480",
    "end": "2321599"
  },
  {
    "text": "between map and for each is that for each's return type is unit and map's",
    "start": "2321599",
    "end": "2326640"
  },
  {
    "text": "return type is a list so yeah so for each doesn't do doesn't give you",
    "start": "2326640",
    "end": "2332079"
  },
  {
    "text": "anything back it just does something for each one map on the other hand is going to do something to each member of the",
    "start": "2332079",
    "end": "2337200"
  },
  {
    "text": "list um that something could return you if you were doing it over fruits it could",
    "start": "2337200",
    "end": "2342560"
  },
  {
    "text": "return you a fruit so you could be peeling each fruit and you'd get a list back of unpeeled fruit or it could",
    "start": "2342560",
    "end": "2348400"
  },
  {
    "text": "create something new like a pie like we did in this example does that make sense to folks",
    "start": "2348400",
    "end": "2355520"
  },
  {
    "text": "yes that's true that's why we don't use four Loops you've hit upon it so you're right",
    "start": "2361079",
    "end": "2367480"
  },
  {
    "text": "um you don't want to be changing and the the only useful thing to do would be to Output so that for each that I was calling dumb actually is maybe the only",
    "start": "2367480",
    "end": "2373880"
  },
  {
    "text": "reasonable place to use a for uh for Loop and that's why we don't use",
    "start": "2373880",
    "end": "2379160"
  },
  {
    "text": "them so I've Rewritten this I've Rewritten our original one in this second block to take the anonymous",
    "start": "2379160",
    "end": "2385000"
  },
  {
    "text": "function and then I'm thinking well what if my list of fruit changes season changes all of a sudden now it's pumpkin",
    "start": "2385000",
    "end": "2390960"
  },
  {
    "text": "pie season and I'm going to just go ahead and make pies take a list of fruits is that make sense to folks",
    "start": "2390960",
    "end": "2398079"
  },
  {
    "text": "instead of hard coding it the cool the kind of cool thing there is that we've reduced this down to a oneliner and I I",
    "start": "2398079",
    "end": "2406079"
  },
  {
    "text": "think that's pretty interesting if we go back to the original one which was up here we've gone from",
    "start": "2406079",
    "end": "2411760"
  },
  {
    "text": "that to one line um you can argue about the readability we'll talk about that in",
    "start": "2411760",
    "end": "2417400"
  },
  {
    "text": "a bit uh the kind of thing that's kind of cool it's still a oneliner that makes it really easy to pass it anonymously",
    "start": "2417400",
    "end": "2422440"
  },
  {
    "text": "into other stuff and we talked about the benefits of passing anonymously right you can't get messed with if you do that",
    "start": "2422440",
    "end": "2427520"
  },
  {
    "start": "2427000",
    "end": "2690000"
  },
  {
    "text": "so that's beautiful collection handling so there are a bunch of methods like this and I'm going to talk about a few of them",
    "start": "2427520",
    "end": "2433520"
  },
  {
    "text": "briefly um I encourage you to explore them on your own one is filter filter takes a function that takes in um a",
    "start": "2433520",
    "end": "2440880"
  },
  {
    "text": "member of your list and it it it uh it takes in a member of your it takes in a function that this is kind of hard",
    "start": "2440880",
    "end": "2447920"
  },
  {
    "text": "because you get you get it's a function that does a function that this so filter takes a function that that takes a member of your list and returns a",
    "start": "2447920",
    "end": "2453760"
  },
  {
    "text": "Boolean and what it's going to do is it's going to return a list with only those members that satisfied that",
    "start": "2453760",
    "end": "2458839"
  },
  {
    "text": "Boolean so that's a pretty common thing too right you'll iterate through a list and you only want to get back ones that meet certain conditions um so in my",
    "start": "2458839",
    "end": "2467319"
  },
  {
    "text": "example here I've filtered out pear and honeydew because I don't like those fruits I think they're",
    "start": "2467319",
    "end": "2473440"
  },
  {
    "text": "watery um fold so fold is a little more complicated so another thing that for",
    "start": "2473440",
    "end": "2478599"
  },
  {
    "text": "Loop the I think the glaring of mission here is accumulation a lot of times you'll do a for Loop to count right you'll do a for Loop to add all the",
    "start": "2478599",
    "end": "2484720"
  },
  {
    "text": "values I want to get all the votes I want to get the to a cumulative age of everyone in this room you would do a for Loop right so fold lets you pass in a",
    "start": "2484720",
    "end": "2493520"
  },
  {
    "text": "beginning value and it's going to take a function and what it's going to do it's going to take that first value and that first value is an accumulator and it's",
    "start": "2493520",
    "end": "2499960"
  },
  {
    "text": "going to call your function on the first on the fir it's going to call your function on the first Value Plus the",
    "start": "2499960",
    "end": "2505240"
  },
  {
    "text": "first value of the list it's going to take the result and it's going to call it with the second value and the third value and the four value it accumulates",
    "start": "2505240",
    "end": "2512520"
  },
  {
    "text": "um Counting like I said is such a common case that there's actually a um uh like",
    "start": "2512520",
    "end": "2519000"
  },
  {
    "text": "uh syntactic sugar for it it's a different method for it called called reduce and reduce just starts at zero",
    "start": "2519000",
    "end": "2524040"
  },
  {
    "text": "and counts these can go left or right so the reason why I want to show you guys it's an example of how powerful",
    "start": "2524040",
    "end": "2529560"
  },
  {
    "text": "functional programming is um Google company you may have heard of",
    "start": "2529560",
    "end": "2534960"
  },
  {
    "text": "uh with a combination of map and filter has used that or sorry map and reduce",
    "start": "2534960",
    "end": "2540599"
  },
  {
    "text": "filter too probably um Safe Search right map and reduce has used that to index the web and it's a framework for doing",
    "start": "2540599",
    "end": "2546599"
  },
  {
    "text": "like m massively huge data processing and it's used by a bunch of people as well could you grab me my plug for my",
    "start": "2546599",
    "end": "2551920"
  },
  {
    "text": "computer thank you all right so this is powerful you can't see because I made the text bigger but there's Pam down at",
    "start": "2551920",
    "end": "2558520"
  },
  {
    "text": "the bottom that's super powerful nested for Loops we do this all the time right",
    "start": "2558520",
    "end": "2564640"
  },
  {
    "text": "um the examples in books are always like cards like you go you Loop over the suits and then over the whatever ordinal",
    "start": "2564640",
    "end": "2571680"
  },
  {
    "text": "numbers um I find cards kind of boring so I did Pi because I do not find pie",
    "start": "2571680",
    "end": "2577559"
  },
  {
    "text": "boring in the slightest so for here um this is an example so everyone knows",
    "start": "2577559",
    "end": "2583400"
  },
  {
    "text": "vanilla vanilla ice cream and apple pie go well together maybe you want to try all the possible pairings of pie and ice cream in the world right that would be",
    "start": "2583400",
    "end": "2591040"
  },
  {
    "text": "awesome um you would probably get sick this is a nested for Loop to let you do this it's going to go over for each pie",
    "start": "2591040",
    "end": "2596720"
  },
  {
    "text": "that you have in your list it's going to take the pie and for each ice cream you have in your list it's going to make a serving with a piece of that pie and a",
    "start": "2596720",
    "end": "2603119"
  },
  {
    "text": "piece of that ice cream it's probably a lot of pie and ice cream cream but sometimes for science you have to",
    "start": "2603119",
    "end": "2610000"
  },
  {
    "text": "suffer so we know that we can um we can reduce a for loop with maps",
    "start": "2610000",
    "end": "2615760"
  },
  {
    "text": "right so one way did do this and I'm going to make this really big let's just",
    "start": "2615760",
    "end": "2621079"
  },
  {
    "text": "do that right this this for Loop here in the inside let's make that map",
    "start": "2621079",
    "end": "2626559"
  },
  {
    "text": "instead so hang on",
    "start": "2626559",
    "end": "2632319"
  },
  {
    "text": "sorry so if we go in here right and we do map we replace this with",
    "start": "2634480",
    "end": "2641800"
  },
  {
    "text": "map we're going to say um well we've got ice creams right that's a list so we can I ice creams we",
    "start": "2644200",
    "end": "2651480"
  },
  {
    "text": "can map over and what we want to do for each one is we want to take an ice",
    "start": "2651480",
    "end": "2659839"
  },
  {
    "text": "cream so that's our um that's our param and so it needs to be in parenthesis",
    "start": "2660200",
    "end": "2667839"
  },
  {
    "text": "and we're going to create a function that creates a new serving so we have a function that",
    "start": "2667839",
    "end": "2673920"
  },
  {
    "text": "creates a new serving um and we you know we don't need to add it to serving",
    "start": "2673920",
    "end": "2680160"
  },
  {
    "text": "because it's a map it's going to return a list so it's going to return a list of ice creams for each pie so that makes",
    "start": "2680160",
    "end": "2685920"
  },
  {
    "text": "sense um we probably could go ahead and do it with the other one",
    "start": "2685920",
    "end": "2691279"
  },
  {
    "start": "2690000",
    "end": "2758000"
  },
  {
    "text": "right maybe it doesn't want to go next okay so we could do it again so",
    "start": "2694520",
    "end": "2699800"
  },
  {
    "text": "we're mapping over the pie and we're mapping over the ice cream and we're returning a new serving for each awesome",
    "start": "2699800",
    "end": "2706720"
  },
  {
    "text": "right one little problem this code isn't going to compile so the reason",
    "start": "2706720",
    "end": "2713640"
  },
  {
    "text": "why map returns a list right so we've got for each piie we have a",
    "start": "2713640",
    "end": "2721359"
  },
  {
    "text": "list we're going to end up with a list of lists that's not the type we want we we just want a list of surveys so we're",
    "start": "2721359",
    "end": "2727440"
  },
  {
    "text": "kind of stuck right like we're going to have to do something else to get our list of lists into one whole",
    "start": "2727440",
    "end": "2735160"
  },
  {
    "text": "list and so there is a method for that it's called flatten flatten takes a list of lists and it turns it into one list",
    "start": "2735839",
    "end": "2743200"
  },
  {
    "text": "so we've got this is how we would call it we have our thing our our double map that returns a um list of lists we're",
    "start": "2743200",
    "end": "2750000"
  },
  {
    "text": "going to call flatten on it here's my question this is the functional programming way of doing an ested for",
    "start": "2750000",
    "end": "2755359"
  },
  {
    "text": "Loop this is what it looks like is this better than",
    "start": "2755359",
    "end": "2761880"
  },
  {
    "start": "2758000",
    "end": "2841000"
  },
  {
    "text": "that I don't know kind of looks about the same length it's maybe a little less readable Pam gr is skeptical and I'm",
    "start": "2761880",
    "end": "2769040"
  },
  {
    "text": "skeptical too frankly so the solution comes in the",
    "start": "2769040",
    "end": "2774839"
  },
  {
    "text": "form of function composition so function composition is taking two functions and",
    "start": "2774839",
    "end": "2780760"
  },
  {
    "text": "taking the the return value of one and passing it to the other so you make one big function and I love this illustration I think it's such a good",
    "start": "2780760",
    "end": "2786599"
  },
  {
    "text": "illustration ation of that right it's pretty it's pretty simple concept you could see it as F of G of X expressed",
    "start": "2786599",
    "end": "2792839"
  },
  {
    "text": "that way a lot I've got these two functions bake a pie and eat a pie sometimes I bake a pie and I don't eat",
    "start": "2792839",
    "end": "2798240"
  },
  {
    "text": "it right away that's unusual sometimes I eat a pie that I did not bake that's more usual so I need both these",
    "start": "2798240",
    "end": "2804359"
  },
  {
    "text": "functions right but also sometimes I just want to bake and eat a pie and so I want to take my fruit and my crust and I",
    "start": "2804359",
    "end": "2809599"
  },
  {
    "text": "want to turn it into a happy Kelsey and I can do that instead of writing a whole new function I can compose them here's",
    "start": "2809599",
    "end": "2815760"
  },
  {
    "text": "where the magic happens flatten compose flat map which is or flat flatten compose map which is what we had to do",
    "start": "2815760",
    "end": "2821640"
  },
  {
    "text": "earlier right we had to call map and then flatten it's called flat map flat map is Magic this is true and I will",
    "start": "2821640",
    "end": "2828520"
  },
  {
    "text": "show you so flat map basically is a map and then a flat so it",
    "start": "2828520",
    "end": "2835880"
  },
  {
    "text": "takes a map and creates a list of lists and then it flattens it into one big list this is pretty cool",
    "start": "2835880",
    "end": "2843720"
  },
  {
    "start": "2841000",
    "end": "2948000"
  },
  {
    "text": "so I want to make this bigger what do you guys think this code",
    "start": "2845200",
    "end": "2851440"
  },
  {
    "text": "does just guessing from reading it anybody want to take a guess takes pies and ice creams and then",
    "start": "2851680",
    "end": "2860440"
  },
  {
    "text": "it it creates a serving right this actually as it turns out is equivalent",
    "start": "2860440",
    "end": "2866200"
  },
  {
    "text": "it's syntactic sugar for doing this which I think is actually",
    "start": "2866200",
    "end": "2873640"
  },
  {
    "text": "really cool basically the way that four yield works is it flat Maps until the last one and",
    "start": "2873640",
    "end": "2880000"
  },
  {
    "text": "then it Maps because this is so common nested Loops something you do all the time so Scala has the syntactic sugar to",
    "start": "2880000",
    "end": "2886040"
  },
  {
    "text": "make that easier it calls flat map it calls flat map it calls map and then it yields the results in a list which is",
    "start": "2886040",
    "end": "2891920"
  },
  {
    "text": "what you wanted from the beginning this is beautiful man all my fonts got out I'm going to put these up",
    "start": "2891920",
    "end": "2897559"
  },
  {
    "text": "on the internet and you can see how how lovely all of this was supposed to be um so four yield is pretty cool because you",
    "start": "2897559",
    "end": "2904440"
  },
  {
    "text": "can do all this cool stuff with it right so you can also do um assignments in there and you can do filters so in this",
    "start": "2904440",
    "end": "2911040"
  },
  {
    "text": "first one we got we get all of our pairings right but we only return the ones that taste good or in this one we",
    "start": "2911040",
    "end": "2917920"
  },
  {
    "text": "get all of our pairings and we only return the ones that taste good and then we give a serving to each one in the audience and I get all these thank yous",
    "start": "2917920",
    "end": "2924720"
  },
  {
    "text": "back it's a good it's a good thing it's pretty cool and this is pretty powerful you can with building on these do a lot",
    "start": "2924720",
    "end": "2930280"
  },
  {
    "text": "of stuff okay uh",
    "start": "2930280",
    "end": "2937559"
  },
  {
    "text": "so oh I'm blown up too big sorry powerful there she is this is cool",
    "start": "2937559",
    "end": "2944160"
  },
  {
    "text": "right so these are some ways we can put functions together so I have one more way and then",
    "start": "2944160",
    "end": "2949680"
  },
  {
    "start": "2948000",
    "end": "3160000"
  },
  {
    "text": "we'll be done but we're going to take a quick detour it's not a detour but it's going to seem like a",
    "start": "2949680",
    "end": "2956079"
  },
  {
    "text": "detour null what is null talk to me what's null not a trick",
    "start": "2956079",
    "end": "2963079"
  },
  {
    "text": "question nothing it's nothing what can be null in",
    "start": "2963079",
    "end": "2968960"
  },
  {
    "text": "Java anything almost anything you're right there are some distinctions but almost anything any reference can be",
    "start": "2969839",
    "end": "2975559"
  },
  {
    "text": "null in Java what happens if you reference a null object NP everything",
    "start": "2975559",
    "end": "2981480"
  },
  {
    "text": "explodes also know as a no pointer exception what kind of code does this lead",
    "start": "2981480",
    "end": "2987880"
  },
  {
    "text": "to oh yuck so big UPS to my co-ord Doug",
    "start": "2987880",
    "end": "2993160"
  },
  {
    "text": "I kind of um cribbed some of his code here um his examples here but um this is",
    "start": "2993160",
    "end": "3000880"
  },
  {
    "text": "an example of of how you might have to write you want you want you want to write some code that let's say we mapped",
    "start": "3000880",
    "end": "3006280"
  },
  {
    "text": "all those pairings and we mapped the best one and we want to write some code that looks up given a given Pi looks up",
    "start": "3006280",
    "end": "3011799"
  },
  {
    "text": "the best pairing and serves it okay so in in Java we can't assume that map",
    "start": "3011799",
    "end": "3018160"
  },
  {
    "text": "isn't null we don't know where it came from we don't know who touched that we also here's another thing when we get",
    "start": "3018160",
    "end": "3024839"
  },
  {
    "text": "that we can't assume the P we passing has an entry in there what if you pass cowpie the answer would probably be no",
    "start": "3024839",
    "end": "3030640"
  },
  {
    "text": "unless we tasted that which is gross um and so you have to be able to return all",
    "start": "3030640",
    "end": "3036119"
  },
  {
    "text": "as well because it could be that there wasn't a s there wasn't a best pairing to serve okay so scholar programming",
    "start": "3036119",
    "end": "3042680"
  },
  {
    "text": "doesn't use null yay reference types can't be null in scholar you can't make them null um cool let's stop using null",
    "start": "3042680",
    "end": "3049960"
  },
  {
    "text": "let's rewrite this uh okay so the first one we off to check and the second one",
    "start": "3049960",
    "end": "3055160"
  },
  {
    "text": "wait a second so null sucks but sometimes things are null and so an",
    "start": "3055160",
    "end": "3061359"
  },
  {
    "text": "example a really good and example that's used all the time is when you get something you call get on a map or you",
    "start": "3061359",
    "end": "3068359"
  },
  {
    "text": "know associative whatever and there's no there's no corresponding value so what",
    "start": "3068359",
    "end": "3074400"
  },
  {
    "text": "should you return in that case it's kind of hard to say it might depend on the type right so maybe we do need a concept",
    "start": "3074400",
    "end": "3081680"
  },
  {
    "text": "of nothing Scola has one it's called an option an option is like a parent type",
    "start": "3081680",
    "end": "3087319"
  },
  {
    "text": "and it has two child types um it's either a sum that has a a value of any",
    "start": "3087319",
    "end": "3093359"
  },
  {
    "text": "kind inside and we've specified that when we called it or it's a none so I have this example of a string we've got",
    "start": "3093359",
    "end": "3099839"
  },
  {
    "text": "an option of a string so it's like a container does that makes sense like a list is a list of a string it's an",
    "start": "3099839",
    "end": "3105359"
  },
  {
    "text": "option of a string and it's either some string or it's none so if we do get on a",
    "start": "3105359",
    "end": "3111160"
  },
  {
    "text": "sum we get the value back if we call is defined on a sum it's true so we have these two functions if we do get on a",
    "start": "3111160",
    "end": "3117640"
  },
  {
    "text": "none it returns a no such element and if we do is defined it's false okay so let's rewrite that you",
    "start": "3117640",
    "end": "3124920"
  },
  {
    "text": "know so this is what it was oh so here we go um sorry so we've Rewritten this",
    "start": "3124920",
    "end": "3130960"
  },
  {
    "text": "we have an option now that we do when we when we call the get on the map we get an option back and then if it's defined",
    "start": "3130960",
    "end": "3137920"
  },
  {
    "text": "we return a serving and we have to wrap it into a sum because it could be none and if it's not defined we return a",
    "start": "3137920",
    "end": "3143920"
  },
  {
    "text": "none again this isn't really any better looks a lot like that right so",
    "start": "3143920",
    "end": "3150440"
  },
  {
    "text": "that option by ourselves doesn't get us much oh and by the way we is have to do with functional programming right why am",
    "start": "3150440",
    "end": "3156559"
  },
  {
    "text": "I telling you this haha option is kind of like a collection",
    "start": "3156559",
    "end": "3162559"
  },
  {
    "text": "collections have map filter flat map reduced all defined on them turns out",
    "start": "3162559",
    "end": "3169119"
  },
  {
    "text": "soda's option so when you map over an option you get back an option you call",
    "start": "3169119",
    "end": "3175799"
  },
  {
    "text": "map and you pass a function that does something to the value but it only does something to the value if the value",
    "start": "3175799",
    "end": "3181200"
  },
  {
    "text": "exists if it's a sum so does that make sense to folks you want to you want to do something to the value if it's in",
    "start": "3181200",
    "end": "3186680"
  },
  {
    "text": "there and if not you want it to be safe you don't want it to explode in your face we've also got flat map so the",
    "start": "3186680",
    "end": "3193359"
  },
  {
    "text": "reason why you might need flat map right so my favorite pie is rhubarb right and",
    "start": "3193359",
    "end": "3199040"
  },
  {
    "text": "I want to get the pairing from rhubarb because I'm stoked about it right I can't call it directly because it's an option because not everyone has a",
    "start": "3199040",
    "end": "3205480"
  },
  {
    "text": "favorite pie crazy as it may sound some people like all of them so what I'm",
    "start": "3205480",
    "end": "3210559"
  },
  {
    "text": "doing is I'm mapping like in my I I try mapping right I try mapping and calling get on that pairings map and getting the",
    "start": "3210559",
    "end": "3216799"
  },
  {
    "text": "pairing B here's the problem looks little like our last problem we get a sum of a sum of butter pan pean Which is",
    "start": "3216799",
    "end": "3223960"
  },
  {
    "text": "the best ice cream to have with rhubarb pie so we can't really use a sum of a sum things get complicated so we need a",
    "start": "3223960",
    "end": "3230319"
  },
  {
    "text": "flat map again to do that kind of operation you also can do filter um I",
    "start": "3230319",
    "end": "3236880"
  },
  {
    "text": "don't I don't oh I put what peon I don't like peon pie I think it's way too sweet so if I'm at a restaurant and this I",
    "start": "3236880",
    "end": "3243920"
  },
  {
    "text": "want to know what the pie is I'm going to order it unless it's peon pie right so my order is going to be some it's",
    "start": "3243920",
    "end": "3250680"
  },
  {
    "text": "going to be the same thing as today's special unless it's peon pie and then it's going to be",
    "start": "3250680",
    "end": "3256599"
  },
  {
    "text": "none so here's where it gets cool because we have flat map Define because we have map you can do a four yield over",
    "start": "3256599",
    "end": "3264200"
  },
  {
    "text": "option so check out this code it says today's special pie pairings",
    "start": "3264200",
    "end": "3271119"
  },
  {
    "text": "doget best ice cream get that one and yield my dessert if any of those are",
    "start": "3271119",
    "end": "3277119"
  },
  {
    "text": "none the computation stops and we get back a none which is really powerful and so I",
    "start": "3277119",
    "end": "3285640"
  },
  {
    "text": "want I want to explain again the value on the left is the inner value it's like when you have a list in a for yield you",
    "start": "3285640",
    "end": "3290960"
  },
  {
    "text": "get the value that's in that list we're getting the value that's in that sum if any of those are the result is",
    "start": "3290960",
    "end": "3297240"
  },
  {
    "text": "none and so this is a dumb example admittedly but this is a really common",
    "start": "3297240",
    "end": "3303200"
  },
  {
    "text": "um pattern where you have a bunch of values and you need to validate all of them before performing a final",
    "start": "3303200",
    "end": "3308839"
  },
  {
    "text": "computation or you need to do a step a series of steps of computations but if",
    "start": "3308839",
    "end": "3313920"
  },
  {
    "text": "any of them don't pass a validation you have to stop or if any of them do do something wrong you have to stop this is",
    "start": "3313920",
    "end": "3321079"
  },
  {
    "text": "pretty cool we know for yield is beautiful and Powerful right we saw p g already but this is like a especially",
    "start": "3321079",
    "end": "3326799"
  },
  {
    "text": "tough to mess with it's really readable for one thing um I mean this almost tells you in English what's going on",
    "start": "3326799",
    "end": "3332480"
  },
  {
    "text": "which is basically that ump picky um it also it eliminates a huge source of of",
    "start": "3332480",
    "end": "3338960"
  },
  {
    "text": "bugs that are directly related to program or error where you just forgot to check I think that's really cool so",
    "start": "3338960",
    "end": "3345359"
  },
  {
    "text": "for yield took care of nested for loops and it also took care of nested if statements because that's basically what",
    "start": "3345359",
    "end": "3351319"
  },
  {
    "text": "this is right like if the today's special is good and and then if I have a",
    "start": "3351319",
    "end": "3358039"
  },
  {
    "text": "pairing for it and if they have that ice cream give me the dessert so we took care of these two nested layers of",
    "start": "3358039",
    "end": "3363400"
  },
  {
    "text": "boilerplate okay why could we do that we could do that because option is a monad",
    "start": "3363400",
    "end": "3369960"
  },
  {
    "text": "everyone should go because monads are famously scary this is like the part of functional programming they're like the",
    "start": "3369960",
    "end": "3375920"
  },
  {
    "text": "average programmer will never be able to understand this um I don't think this is true let's talk about what is a monad",
    "start": "3375920",
    "end": "3382000"
  },
  {
    "text": "though let's go into it really briefly admittedly this is a complicated concept there are approximately 40 million tutorials on the web about what is a",
    "start": "3382000",
    "end": "3388319"
  },
  {
    "text": "monad um they all have like crazy metaphors like it's an assembly line spaceship burrito man but I'm gonna give",
    "start": "3388319",
    "end": "3396359"
  },
  {
    "text": "it to you straight this is what it is I'm not um Daniel's spok SPAC I think um is a",
    "start": "3396359",
    "end": "3404200"
  },
  {
    "text": "really awesome writer on schala by the way highly recommend his blog um this is",
    "start": "3404200",
    "end": "3409720"
  },
  {
    "text": "a quote from a log post of his and I've linked this so I'll put the slides up and you guys can read the whole thing what is it that makes thing a monad",
    "start": "3409720",
    "end": "3416839"
  },
  {
    "text": "option or list or another monad okay so there's there's two things going on one is that you can wrap up a value inside",
    "start": "3416839",
    "end": "3422839"
  },
  {
    "text": "of it you know how to do this with a list you do it with a list all the time we just thought to do it with an option it's pretty easy you just say option",
    "start": "3422839",
    "end": "3429240"
  },
  {
    "text": "contains this value um the other one is that you have this",
    "start": "3429240",
    "end": "3434640"
  },
  {
    "text": "function that digs in there it's going to dig inside the thing and it's going to take it's going to take a function",
    "start": "3434640",
    "end": "3440280"
  },
  {
    "text": "that we Supply and use it to take that value and make a new thing so that was a",
    "start": "3440280",
    "end": "3445680"
  },
  {
    "text": "lot of words but that's the flat map process we just saw you have a function and you have a process that's been",
    "start": "3445680",
    "end": "3451760"
  },
  {
    "text": "abstracted away that lets you get in there and apply that function to the value and it Returns the same type Scola",
    "start": "3451760",
    "end": "3458319"
  },
  {
    "text": "calls that flat map again I explained why it's called flat map until I read this I didn't understand what was so",
    "start": "3458319",
    "end": "3463720"
  },
  {
    "text": "special about flat map this is what's so special about flat map it lets you make new things it lets you take a thing and",
    "start": "3463720",
    "end": "3470319"
  },
  {
    "text": "use its value to compute a new thing which is a really powerful concept It's Magic it hides our boiler",
    "start": "3470319",
    "end": "3476799"
  },
  {
    "text": "plate and we saw two ways already how it does that we saw how it hides our boiler plate for lists right it hides that for",
    "start": "3476799",
    "end": "3482720"
  },
  {
    "text": "Loop and then we saw how it hides a nested if statement boiler plate",
    "start": "3482720",
    "end": "3489680"
  },
  {
    "text": "um that's tough to mess with that's really cool anytime we can eliminate boiler plate we're doing good for",
    "start": "3489680",
    "end": "3495079"
  },
  {
    "text": "ourselves as programmers because we're we're limiting the points of failure and that's I mean I think really I think I",
    "start": "3495079",
    "end": "3502720"
  },
  {
    "text": "think one of the things that drives me to be a good programmer is that I'm very lazy and I'm very sloppy and I want a",
    "start": "3502720",
    "end": "3509520"
  },
  {
    "text": "machine to keep me from being those things and once I get my Roomba to do",
    "start": "3509520",
    "end": "3514839"
  },
  {
    "text": "all of the household chores I'll be really happy but until then I'm satisfied with flatmap so these aren't the only monads",
    "start": "3514839",
    "end": "3522599"
  },
  {
    "text": "um you can have Monas that do a lot of things you can accumulate errors so what we saw is we stopped when we got an error and the definition of flatmap",
    "start": "3522599",
    "end": "3529359"
  },
  {
    "text": "meant that you couldn't keep going with computations in your four yields but you could accumulate them one example of",
    "start": "3529359",
    "end": "3534760"
  },
  {
    "text": "where you'd want to do that is if you were validating a web form and you'd want to see all the errors that someone made and so you would still have an",
    "start": "3534760",
    "end": "3541000"
  },
  {
    "text": "error result at the end but you would have all their errors listed that's one one kind of monad another one might be a",
    "start": "3541000",
    "end": "3546720"
  },
  {
    "text": "cursor position in a database um or file to let you know how you can move forward States in a state machine and then this",
    "start": "3546720",
    "end": "3552720"
  },
  {
    "text": "one's pretty powerful and this one's hard to wrap your head around so I won't expect you to an environment that changes can be a",
    "start": "3552720",
    "end": "3559839"
  },
  {
    "text": "monad where you've got a function that lets you go into this environment change it and pass it on to the next function",
    "start": "3559839",
    "end": "3565559"
  },
  {
    "text": "and this is mainly how we handle side effects in functional programming because you have to be able to handle side effects and that's one of the thing",
    "start": "3565559",
    "end": "3571039"
  },
  {
    "text": "that turns people off from side effects I mean from functional programming because all code has side effects I mean",
    "start": "3571039",
    "end": "3576799"
  },
  {
    "text": "I write for the web so I'm dealing with nothing but side effects but monads are the way we handle those this is so powerful this is like",
    "start": "3576799",
    "end": "3584400"
  },
  {
    "text": "the thing about functional programming that freaking rules this is the thing getting rid of that boiler plate and and",
    "start": "3584400",
    "end": "3591599"
  },
  {
    "text": "having the computer do it for you is the reason why people like functional programming so much and it's the reason why why people fall in love and become",
    "start": "3591599",
    "end": "3597280"
  },
  {
    "text": "very fanatic about it so here's just this brief extra credit wo semicolon is a monad that's right",
    "start": "3597280",
    "end": "3606520"
  },
  {
    "text": "just don't think about it right now just think about when you're going to bed tonight that's right okay so we're pretty much done I want to",
    "start": "3606520",
    "end": "3614119"
  },
  {
    "text": "go over the ways that we talked about to to sort of state to click our blocks together and build something cool um",
    "start": "3614119",
    "end": "3620000"
  },
  {
    "text": "partial application also known as currying so that was really useful it lets us create a bunch of functions from one master function and lets us let",
    "start": "3620000",
    "end": "3626680"
  },
  {
    "text": "other people create other functions from that Master function higher order functions that's awesome that lets us um",
    "start": "3626680",
    "end": "3633599"
  },
  {
    "text": "abstract away iteration and operations over containers functional composition",
    "start": "3633599",
    "end": "3638839"
  },
  {
    "text": "lets us use our building blocks very directly composing them that one's maybe the best Lego metaphor um four yield",
    "start": "3638839",
    "end": "3645559"
  },
  {
    "text": "which is syntactic sugar but it's pretty cool syntactic sugar and then monads which is the big scary one um so yeah",
    "start": "3645559",
    "end": "3653640"
  },
  {
    "text": "that's it I just have three more slides of about the psychology of functional programming so I titled this without",
    "start": "3653640",
    "end": "3658680"
  },
  {
    "text": "learning a neck learning functional programming without growing a neck beard because I think a lot of people are intimidated by functional programming I",
    "start": "3658680",
    "end": "3664200"
  },
  {
    "text": "know I was certainly when I started working here and started using schola um big complaint is people say it's not",
    "start": "3664200",
    "end": "3670160"
  },
  {
    "text": "readable I'm sure having seen my tiny little punctuation for a like roll across the screen you might agree I",
    "start": "3670160",
    "end": "3676880"
  },
  {
    "text": "think this quote is amazing um I came across as a closure tutorial uh and",
    "start": "3676880",
    "end": "3682119"
  },
  {
    "text": "basically it says is closure code which is closure is also a functional programing it's a lisp so talk about punctuation um imagine if every time you",
    "start": "3682119",
    "end": "3689520"
  },
  {
    "text": "read Java source code and you saw an if statement or a for Loop or an anonymous class you had to stop and figure out",
    "start": "3689520",
    "end": "3695960"
  },
  {
    "text": "what it meant now some of you who are new to programming may remember that um I know I do that's a real thing people",
    "start": "3695960",
    "end": "3702640"
  },
  {
    "text": "don't come out of the womb knowing how to read Java code or imperative code in",
    "start": "3702640",
    "end": "3707960"
  },
  {
    "text": "general so there are things except for Jordan back there he did um so",
    "start": "3707960",
    "end": "3716519"
  },
  {
    "text": "he he was Ruby Ruby from the age of two um so you had to learn how to read that",
    "start": "3716680",
    "end": "3721720"
  },
  {
    "text": "and the same thing really does happen to you with map and Flat map and four yield at this point um you look at code and",
    "start": "3721720",
    "end": "3728039"
  },
  {
    "text": "and you can read it you really do learn to read it and those functions become less of a translation in your head oh",
    "start": "3728039",
    "end": "3733839"
  },
  {
    "text": "map means this and oh you're mapping over a list and that's learning any language any including programming",
    "start": "3733839",
    "end": "3739480"
  },
  {
    "text": "languages so I really think that's a really good point and one that you don't hear a lot about functional programming",
    "start": "3739480",
    "end": "3744680"
  },
  {
    "text": "I think that functional programming is really good at dsls um scholas specifically I want to throw that out there which goes totally contrary to the",
    "start": "3744680",
    "end": "3751240"
  },
  {
    "text": "to the reputation that it's not readable this is an example of uh Library specs 2 for writing unit tests that I like a lot",
    "start": "3751240",
    "end": "3758760"
  },
  {
    "text": "tell me that's not readable that's literally plain English and one of the things that's cool is not only is that",
    "start": "3758760",
    "end": "3763920"
  },
  {
    "text": "plain English this is completely configurable by the user you can write",
    "start": "3763920",
    "end": "3768960"
  },
  {
    "text": "your own match functions so you can say such and such input must redirect to a",
    "start": "3768960",
    "end": "3775400"
  },
  {
    "text": "certain path must have a certain state must look like a certain thing and those",
    "start": "3775400",
    "end": "3781640"
  },
  {
    "text": "are a little more tricky to write but once you write them you can use them over and over again anyone can look at your test code and see what it's supposed to be doing I think that's",
    "start": "3781640",
    "end": "3787680"
  },
  {
    "text": "really cool finally I told you about pure functions I think it's really kind of",
    "start": "3787680",
    "end": "3794079"
  },
  {
    "text": "unfortunate that there's a concept of a pure function it's not I get it pure has a real meaning but Pier also has you",
    "start": "3794079",
    "end": "3800960"
  },
  {
    "text": "know like any word in any language it has other Associated meanings and I think there's a lot of um this is a neck",
    "start": "3800960",
    "end": "3808680"
  },
  {
    "text": "beard and he's holier than now uh there's a fair amount of discourse out there about functional programming",
    "start": "3808680",
    "end": "3814960"
  },
  {
    "text": "that's dismissive or snobby about if it's not pure if it's not completely",
    "start": "3814960",
    "end": "3820720"
  },
  {
    "text": "purely functional it's not good it's not useful I mean these are things we aspire to that's kind of what I said about",
    "start": "3820720",
    "end": "3826520"
  },
  {
    "text": "functions like that rule about function is something we aspire to maybe you don't hit it all the time that doesn't",
    "start": "3826520",
    "end": "3832680"
  },
  {
    "text": "mean that functional programming Concepts can't improve your code and as you pointed out people have been using these things in Java which is supposed",
    "start": "3832680",
    "end": "3838599"
  },
  {
    "text": "you know a language designed for object orientation for quite a while these are these are useful Concepts and the goals",
    "start": "3838599",
    "end": "3844400"
  },
  {
    "text": "they're trying to achieve are useful Concepts whether you're writing Pure hascal or not I think it's good to",
    "start": "3844400",
    "end": "3850000"
  },
  {
    "text": "remember so uh finally I'd like to say thank you and I would like to wind up with um a picture I hope that you learn",
    "start": "3850000",
    "end": "3858200"
  },
  {
    "text": "to write your code more badass and I hope that you learned how much that I like pie and so i' would like to close",
    "start": "3858200",
    "end": "3864359"
  },
  {
    "text": "it out by showing a picture of of Pam Greer eating pie and giving Julia Roberts a dirty look thank you so much",
    "start": "3864359",
    "end": "3871840"
  },
  {
    "text": "[Applause] [Music]",
    "start": "3871840",
    "end": "3884699"
  }
]