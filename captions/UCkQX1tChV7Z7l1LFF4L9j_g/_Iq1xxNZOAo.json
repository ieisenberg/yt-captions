[
  {
    "start": "0",
    "end": "129000"
  },
  {
    "text": "thanks a lot for coming to this session my name is Thomas Graff um before I start I would like to to",
    "start": "4480",
    "end": "11559"
  },
  {
    "text": "know a little bit about uh like what your interests are like who is who is involved with kind of the up side of",
    "start": "11559",
    "end": "17680"
  },
  {
    "text": "things platform kind of less the death side just pure",
    "start": "17680",
    "end": "22920"
  },
  {
    "text": "platform yeah and who's really into kind of development and devops and kind of motor development okay about have half",
    "start": "22920",
    "end": "30840"
  },
  {
    "text": "all right so first of all I've been asked to stay behind the podium so whenever you see me walk in front just",
    "start": "30840",
    "end": "38079"
  },
  {
    "text": "give me a signs and and and uh and push me back apparently the video camera is not able to catch me if I walked forward",
    "start": "38079",
    "end": "44600"
  },
  {
    "text": "too much so what I'm here to talk about is is BPF berly a packet filter and how",
    "start": "44600",
    "end": "50640"
  },
  {
    "text": "BPF can be used to turn Linux into what we call a micr service operating",
    "start": "50640",
    "end": "56760"
  },
  {
    "text": "system um what makes me qualified to talk about",
    "start": "56760",
    "end": "65239"
  },
  {
    "text": "this so I've been I've spent about 15 years working on the Linux kernel about 10 years of that at radad I've mostly",
    "start": "65240",
    "end": "72479"
  },
  {
    "text": "focused on arcing and security from a subsystem perspective um so I helped",
    "start": "72479",
    "end": "78040"
  },
  {
    "text": "write potentially the biggest monolith ever 12 million lines with Source Code by",
    "start": "78040",
    "end": "83479"
  },
  {
    "text": "now um I worked on like all of the r all of the N aring subsystem pretty much um",
    "start": "83479",
    "end": "89400"
  },
  {
    "text": "um a lot of um security also some users bace stuff netlink ip2 and so and so on",
    "start": "89400",
    "end": "94600"
  },
  {
    "text": "for the past two years I've created syum which will'll cover a little bit later and then I I co-founded a",
    "start": "94600",
    "end": "100680"
  },
  {
    "text": "company uh that is behind solum so what we'll talk about in this",
    "start": "100680",
    "end": "106040"
  },
  {
    "text": "in this or what we'll cover in this session is uh we'll talk about the evolution of running applications we'll do that very quickly and we'll look at",
    "start": "106040",
    "end": "112960"
  },
  {
    "text": "uh the problems of the lunux colonel right now based on its history um like what are the problems that the colonel",
    "start": "112960",
    "end": "119360"
  },
  {
    "text": "has right now in terms of running microservices and we'll we'll turn into and turn to BPF and then into into",
    "start": "119360",
    "end": "126960"
  },
  {
    "text": "and hopefully we'll have time for a quick demo as well all right so Evolution running applications so you had kind of the Dark",
    "start": "126960",
    "end": "133280"
  },
  {
    "start": "129000",
    "end": "275000"
  },
  {
    "text": "Age right single tasking basically process has full access to the machine I don't remember",
    "start": "133280",
    "end": "140319"
  },
  {
    "text": "this age I'm I'm too young right um we went into kind of the multitasking age",
    "start": "140319",
    "end": "145560"
  },
  {
    "text": "where um the CPU was now split between applications we we required St like mmu",
    "start": "145560",
    "end": "151160"
  },
  {
    "text": "mmus we we introduced Concepts like uh virtual memory and so on this is the",
    "start": "151160",
    "end": "156280"
  },
  {
    "text": "this was the age where Linux distributions really took off right you had to run a Linux distribution you",
    "start": "156280",
    "end": "161599"
  },
  {
    "text": "needed package management to actually manage all of your dependencies right like all of your your applications",
    "start": "161599",
    "end": "168080"
  },
  {
    "text": "running on a server require to have dependences on shared libraries and you need to make sure that you all of these",
    "start": "168080",
    "end": "174159"
  },
  {
    "text": "sh libraries had the latest version and so on the age of multitasking still on bare metal so you were deploying on",
    "start": "174159",
    "end": "180319"
  },
  {
    "text": "physical servers we went to the age of virtualization like all of a sudden everything was running inside of VM and",
    "start": "180319",
    "end": "187560"
  },
  {
    "text": "we started packaging the OS together with the app right basically every app",
    "start": "187560",
    "end": "192720"
  },
  {
    "text": "could run on its different OS and you would deploy this all in one piece and then we started virtualizing all hard",
    "start": "192720",
    "end": "199280"
  },
  {
    "text": "all all hardware and put a v in front and all of a sudden you had virtual switches and virtual Bridges and virtual",
    "start": "199280",
    "end": "205000"
  },
  {
    "text": "devices everything was soft to Define right essentially what we did is what we have before Hardware we put that in",
    "start": "205000",
    "end": "211200"
  },
  {
    "text": "software and started running it inside of VMS or on hypervisors when now entering like the",
    "start": "211200",
    "end": "218480"
  },
  {
    "text": "age of microservices and containers some of us are further down that path others are earlier on um the main piece we're",
    "start": "218480",
    "end": "225959"
  },
  {
    "text": "actually back to basically running on the host operating system so we're basically back in terms of that",
    "start": "225959",
    "end": "232120"
  },
  {
    "text": "operating the host operating system is shared between multiple applications right it's no longer like one one",
    "start": "232120",
    "end": "238280"
  },
  {
    "text": "virtual machine per app right we have multiple apps that require isolation and Resource Management managed by the host",
    "start": "238280",
    "end": "245400"
  },
  {
    "text": "operating system containers name spaces we'll talk about this this has a huge impact in terms of what the operating",
    "start": "245400",
    "end": "251360"
  },
  {
    "text": "system has to provide it's no longer just oh let me forward Network packets uh to this VM let me do some firewalling",
    "start": "251360",
    "end": "258199"
  },
  {
    "text": "outside we actually have to care about the application again this is a huge shift it's not the same as multitasking",
    "start": "258199",
    "end": "264800"
  },
  {
    "text": "though all of a sudden we have applications that only exist for a couple of seconds we have like completely different requirements we",
    "start": "264800",
    "end": "270919"
  },
  {
    "text": "have multi-tenant aware systems and so on like very different applic very different uh use cases so what are the",
    "start": "270919",
    "end": "277880"
  },
  {
    "start": "275000",
    "end": "430000"
  },
  {
    "text": "problems that the lenux kernel uh has in this context obviously it was not built",
    "start": "277880",
    "end": "283160"
  },
  {
    "text": "for this age problem one abstractions right software developers we all love to",
    "start": "283160",
    "end": "289160"
  },
  {
    "text": "build abstractions um this is very networking specific but it gives you an idea of kind of how the abstraction",
    "start": "289160",
    "end": "294639"
  },
  {
    "text": "looks like inside of the Linux kernel when it comes to networking right if we actually want to do packet filtering",
    "start": "294639",
    "end": "301000"
  },
  {
    "text": "using net filter which is kind of the firewalling layer we actually always have to go go through socket and TCP",
    "start": "301000",
    "end": "307160"
  },
  {
    "text": "right if we're coming from the network card side we have to go through the network device abstraction then traffic",
    "start": "307160",
    "end": "312320"
  },
  {
    "text": "shaping ethernet IP and so on we always have to move up and down this stack this",
    "start": "312320",
    "end": "317960"
  },
  {
    "text": "is a couple of Pros right the pro is first of all very very strong user space",
    "start": "317960",
    "end": "323400"
  },
  {
    "text": "API compatibility guarantees which means that your 20-year-old binary that you compiled once still works this is",
    "start": "323400",
    "end": "330840"
  },
  {
    "text": "amazing this is great right um the second big benefit is that the majority of the Linux Colonel code is actually",
    "start": "330840",
    "end": "337039"
  },
  {
    "text": "independent of Hardware right I've worked 15 years I've never written a driver I have no clue about Hardware but",
    "start": "337039",
    "end": "343560"
  },
  {
    "text": "I've WR I've written a lot of low-level code like IP and routing and firewalling and all of that stuff I have very little",
    "start": "343560",
    "end": "349919"
  },
  {
    "text": "knowledge about actual Hardware cons massive performance overhead and we we'll look into why that is and how we",
    "start": "349919",
    "end": "357039"
  },
  {
    "text": "can solve that um and the second con is very hard to bypass these layers there are some examples but the majority it's",
    "start": "357039",
    "end": "364039"
  },
  {
    "text": "very hard to bypass problem number two every subsystem has its own API right uh again",
    "start": "364039",
    "end": "372160"
  },
  {
    "text": "this is networking specific view but it actually applies exactly the same to storage s of things right we have all of",
    "start": "372160",
    "end": "377240"
  },
  {
    "text": "these layers all of these subsystems um I've listed a couple of tools here right so if we want to configure our our",
    "start": "377240",
    "end": "383199"
  },
  {
    "text": "ethernet drivers our Network devises we we call e tool if we configure IP routing we call IP if we configure the",
    "start": "383199",
    "end": "390479"
  },
  {
    "text": "system call filter we call set comp if we call the IP filtering we call IP tables but hey if you're using raw",
    "start": "390479",
    "end": "397000"
  },
  {
    "text": "sockets all of that stuff gets bypassed so it's not really a complete firewall if you're doing traffic shaping you're",
    "start": "397000",
    "end": "402520"
  },
  {
    "text": "calling TC if you want visibility you call TCP dump um but again that doesn't see quite everything because only looks",
    "start": "402520",
    "end": "408960"
  },
  {
    "text": "at one layer if you have virtual switches you call BR control or ovs cattle right so every subsystem has its",
    "start": "408960",
    "end": "416680"
  },
  {
    "text": "own API which means if we automate this if we autom the management of this we actually have to use all of these tools",
    "start": "416680",
    "end": "422919"
  },
  {
    "text": "independently and there is tooling that that does this for us um but it means that we have to understand the complete",
    "start": "422919",
    "end": "429039"
  },
  {
    "text": "layering of everything problem number three development process so if you have a",
    "start": "429039",
    "end": "435360"
  },
  {
    "start": "430000",
    "end": "548000"
  },
  {
    "text": "need for a change in the Linux kernel this is hard but we'll cover the good parts first first of all like",
    "start": "435360",
    "end": "441759"
  },
  {
    "text": "what's good about the Linux kernel development process it's open it's open and transparent like everybody knows",
    "start": "441759",
    "end": "448280"
  },
  {
    "text": "what everybody else is doing uh and has excellent code quality It's",
    "start": "448280",
    "end": "453560"
  },
  {
    "text": "relatively stable um probably the stablest OS out there right now I would say and it's available everywhere once",
    "start": "453560",
    "end": "459440"
  },
  {
    "text": "you have merged your change in the Linux kernel like everybody consuming the Linux kernel will actually have this",
    "start": "459440",
    "end": "464879"
  },
  {
    "text": "available to them and it's almost entirely vendor neutral which I think is positive as well the bad L is much",
    "start": "464879",
    "end": "473280"
  },
  {
    "text": "longer first of all Linux kernel is very very hard to change shouting is involved apparently",
    "start": "473280",
    "end": "480000"
  },
  {
    "text": "this is getting",
    "start": "480000",
    "end": "482520"
  },
  {
    "text": "better it's a super large and complicated code base it's 12 million lines of source code C code some of it",
    "start": "485240",
    "end": "492280"
  },
  {
    "text": "is 30 years old upstreaming code is hard uh consensus has to be found so if you",
    "start": "492280",
    "end": "497599"
  },
  {
    "text": "have your specific use case and you don't find others that share your views they will reject this code change and",
    "start": "497599",
    "end": "503319"
  },
  {
    "text": "you're not able to actually get this in so you cannot just modify it on your own you can do this but then you have to Fork the kernel and have to you have to",
    "start": "503319",
    "end": "509120"
  },
  {
    "text": "maintain 12 million lines of code um depending on a Linux kernel distribution",
    "start": "509120",
    "end": "514320"
  },
  {
    "text": "that you're using or a Linux distribution it will take years until that change actually becomes available to your users right some people are",
    "start": "514320",
    "end": "521279"
  },
  {
    "text": "running 10y old kernels right probably the biggest one is everybody is maintaining their own Fork",
    "start": "521279",
    "end": "528279"
  },
  {
    "text": "sometimes with thousands and thousands of of backports of patches right if you're running Android yes you're",
    "start": "528279",
    "end": "533320"
  },
  {
    "text": "running Linux but you're really running Android Linux if you're running real yes you're running ra kind of Linux but with",
    "start": "533320",
    "end": "538600"
  },
  {
    "text": "like 4,000 patches it's not really really like the Upstream Linux it's a",
    "start": "538600",
    "end": "543680"
  },
  {
    "text": "it's a fork of Linux that you're running right so not everybody's using the same Linux the four problem this is probably",
    "start": "543680",
    "end": "550680"
  },
  {
    "start": "548000",
    "end": "730000"
  },
  {
    "text": "the biggest one the Kel doesn't actually know what a container is what the colel knows about this is a",
    "start": "550680",
    "end": "558320"
  },
  {
    "text": "list here the colel knows about processes and threats it knows about",
    "start": "558320",
    "end": "564040"
  },
  {
    "text": "cgroups cgroups is a logical construct where you can associate processes with a",
    "start": "564040",
    "end": "569160"
  },
  {
    "text": "group group and then associate resource limits to this like how much CPU can this group of processes use how much",
    "start": "569160",
    "end": "574800"
  },
  {
    "text": "memory what like what are the eye operations per second and so on it has a concept of name spaces hey give these",
    "start": "574800",
    "end": "581240"
  },
  {
    "text": "group of processes a virtual process space so they can only see the processes in that space gift is a network name",
    "start": "581240",
    "end": "588480"
  },
  {
    "text": "space so you can only see the networking elements in that same name space and so on the colonel knows about IP addresses",
    "start": "588480",
    "end": "595399"
  },
  {
    "text": "and port numbers right the colonel knows about the system called that are being made so whenever an application",
    "start": "595399",
    "end": "601200"
  },
  {
    "text": "interacts with the Linux kernel it will perform a system call the kernel sees the system calls and can actually filter",
    "start": "601200",
    "end": "607720"
  },
  {
    "text": "on this the Kel also knows the SC Linux context which gives uh gives an ability to actually provide uh filtering",
    "start": "607720",
    "end": "614959"
  },
  {
    "text": "capabilities on security like what kind a process actually do and how can it interact with other processes and so on",
    "start": "614959",
    "end": "621040"
  },
  {
    "text": "sounds great these were the building blocks that were built for that for that multitasking age what does the colonel",
    "start": "621040",
    "end": "627399"
  },
  {
    "text": "not know the colonel has no clue what a container or a kubernetes part is you",
    "start": "627399",
    "end": "633519"
  },
  {
    "text": "can find the container ID in this in the cgroup file but the kernel itself does has no clue what an actual container is",
    "start": "633519",
    "end": "639839"
  },
  {
    "text": "it it kernel only sees name spaces and c groups the kernel does actually no longer uh",
    "start": "639839",
    "end": "646519"
  },
  {
    "text": "know whether an application is it tended to be exposed outside of the host or not",
    "start": "646519",
    "end": "652040"
  },
  {
    "text": "right if you go back to the multitasking age uh the colel actually knew whether an application would bind to to the to",
    "start": "652040",
    "end": "659920"
  },
  {
    "text": "to a port in an IP that would make that Port publicly available let's say a web server running on Port 80 if you bind",
    "start": "659920",
    "end": "666480"
  },
  {
    "text": "that to the loop back interface it would not be publicly exposed if you bind it to all interface addresses it would be",
    "start": "666480",
    "end": "672519"
  },
  {
    "text": "publicly exposed in the age of containers and pot it's no longer clear to the colel what should be exposed and",
    "start": "672519",
    "end": "678839"
  },
  {
    "text": "what should not be exposed the next one is actually huge like what used to be",
    "start": "678839",
    "end": "683959"
  },
  {
    "text": "IPC calls Unix domain sockets pipes and so on are Now API calls rest trpc and so",
    "start": "683959",
    "end": "690320"
  },
  {
    "text": "on the colonel has no clue about these things the colonel only knows about Network packets about port numbers right",
    "start": "690320",
    "end": "696320"
  },
  {
    "text": "the colonel will know that hey there is a a pro a process it's listening on Port 80 and it's running in its own namespace",
    "start": "696320",
    "end": "703000"
  },
  {
    "text": "Colonel has no clue about um about like what goes beyond it what's actually running on that Port",
    "start": "703000",
    "end": "709399"
  },
  {
    "text": "before like the colonel actually knew about like this is an application is doing an IPC call do that up do that to",
    "start": "709399",
    "end": "714800"
  },
  {
    "text": "that other process that's obviously kind of service service process to process communication",
    "start": "714800",
    "end": "719839"
  },
  {
    "text": "and service mesh I'm not sure how how many of you are are looking at service mesh yet col LLY has no clue what a",
    "start": "719839",
    "end": "725920"
  },
  {
    "text": "service mesh is Right lots of things that the colonel has no clue about so what do we what what do we do about",
    "start": "725920",
    "end": "733160"
  },
  {
    "start": "730000",
    "end": "775000"
  },
  {
    "text": "it couple of uh Alternatives first of all for the first problem we could just",
    "start": "733160",
    "end": "739320"
  },
  {
    "text": "give user space access to all of our Hardware just bypass it completely right",
    "start": "739320",
    "end": "744480"
  },
  {
    "text": "I mean it will be fine user space can handle this fine the application probably knows how to deal with with with this Hardware examples of this are",
    "start": "744480",
    "end": "751440"
  },
  {
    "text": "user space dma dpdk there are many many more Frameworks like this second",
    "start": "751440",
    "end": "756639"
  },
  {
    "text": "alternative unical Linus was wrong right the app should provide its own OS um",
    "start": "756639",
    "end": "762480"
  },
  {
    "text": "definitely feasible there are many example is the three of them click OS Mir Mir OS and R run many many more",
    "start": "762480",
    "end": "769079"
  },
  {
    "text": "right so instead of having a shared operating system every app can provide its own",
    "start": "769079",
    "end": "774680"
  },
  {
    "text": "OS move to OS user space like chisor actually user mode Linux like many many",
    "start": "774680",
    "end": "780639"
  },
  {
    "start": "775000",
    "end": "1160000"
  },
  {
    "text": "many years back we can just run the majority of the operating system in user space like we only need that small",
    "start": "780639",
    "end": "787560"
  },
  {
    "text": "minimal uh operating system that actually deals with hardware and everything else we can we can run in",
    "start": "787560",
    "end": "793079"
  },
  {
    "text": "user space on top and we don't have to deal with the Linux kernel Community to change networking or change storage and",
    "start": "793079",
    "end": "799240"
  },
  {
    "text": "so on um yeah it's a great idea you will have a massive performance uh um",
    "start": "799240",
    "end": "805240"
  },
  {
    "text": "disadvantage of course last one we can just rewrite everything right apparently this is a",
    "start": "805240",
    "end": "811240"
  },
  {
    "text": "thing um I think later today Brian will will talk about uh rewriting everything",
    "start": "811240",
    "end": "817079"
  },
  {
    "text": "in Rust um I think it's just a massive undertaking so I just Google how much",
    "start": "817079",
    "end": "822639"
  },
  {
    "text": "will how how much would it cost to rewrite the L colel this is the number that came up um not sure whether the",
    "start": "822639",
    "end": "828160"
  },
  {
    "text": "salary is still up to date here um but it would be a massive undertaken to actually rewrite the Linux kernel so",
    "start": "828160",
    "end": "835480"
  },
  {
    "text": "probably not feasible so this brings us to BPF BPF is a solution to a lot of this",
    "start": "835480",
    "end": "844800"
  },
  {
    "text": "um so what is BPF BPF is a highly efficient sandboxed virtual machine in",
    "start": "844800",
    "end": "850079"
  },
  {
    "text": "the Linux kernel and it makes it programmable it's jointly maintained by some of our some of the engineers in our",
    "start": "850079",
    "end": "856600"
  },
  {
    "text": "team and Facebook and we have massive collaborations and more people joining in uh from Google r at Netflix netronome",
    "start": "856600",
    "end": "862560"
  },
  {
    "text": "and many many others um BPF is basically it looks like the code on the right",
    "start": "862560",
    "end": "868639"
  },
  {
    "text": "right it's B basically x86 like bite code that allows you to program the Linux kernel and we'll look into how",
    "start": "868639",
    "end": "874399"
  },
  {
    "text": "that actually works first of all to understand this",
    "start": "874399",
    "end": "879600"
  },
  {
    "text": "the Linux colel is fundamentally event driven right we have on the top we have",
    "start": "879600",
    "end": "884800"
  },
  {
    "text": "processes doing system calls they will connect to our applications they will do they will write to the dis they will",
    "start": "884800",
    "end": "890000"
  },
  {
    "text": "write to a network socket they will re from a network socket they will require timers they will do uh uh they will",
    "start": "890000",
    "end": "897079"
  },
  {
    "text": "acquire SEMA fores and so on it's all event and all of that are system calls from the bottom we have the hardware",
    "start": "897079",
    "end": "903040"
  },
  {
    "text": "this can be actual Hardware or virtual hardware and they will do interrupts hey I new network packet hey um your data",
    "start": "903040",
    "end": "910240"
  },
  {
    "text": "that you have requested on this block AO device is now ready for reading and so on so the kernel is doing everything",
    "start": "910240",
    "end": "915440"
  },
  {
    "text": "event driven in the middle we have this giant monolith of 12 million lines of code that basically handles these events",
    "start": "915440",
    "end": "922560"
  },
  {
    "text": "and does a lot of magic what BPF allows us to do is actually run a BPF program",
    "start": "922560",
    "end": "929519"
  },
  {
    "text": "on an event so examples here we can run a BPF program when when an application",
    "start": "929519",
    "end": "935360"
  },
  {
    "text": "does a read system call and that will later read from a block.io device we can",
    "start": "935360",
    "end": "941319"
  },
  {
    "text": "also run the BPF program and that block.io uh event is actually happening",
    "start": "941319",
    "end": "946600"
  },
  {
    "text": "we can we can run a BPF program when a process does a connect system call to for example connect to the DNS server or",
    "start": "946600",
    "end": "953160"
  },
  {
    "text": "to a web server um if a TCP retransmission is happening as part of this we can also again run a BPF program",
    "start": "953160",
    "end": "960240"
  },
  {
    "text": "on that particular end to only run when a TCP retransmission happen and then when the packet is actually going out to",
    "start": "960240",
    "end": "966079"
  },
  {
    "text": "the network card we can again run a BPF program so fundamentally BPF allows us",
    "start": "966079",
    "end": "971680"
  },
  {
    "text": "to create this this logical programs and Implement logic whenever something is happening inside the L Linux kernel we",
    "start": "971680",
    "end": "978440"
  },
  {
    "text": "can do this for all kernel functions using kres uh we can do this for Trace points",
    "start": "978440",
    "end": "983839"
  },
  {
    "text": "these are well-defined stable function names we can even do this for user space function names using U probe so when",
    "start": "983839",
    "end": "990000"
  },
  {
    "text": "your user space application calls a function we can call a u probe and run a BPF program this is some of this is some",
    "start": "990000",
    "end": "996759"
  },
  {
    "text": "of this is how some of the profiling and tracing uh tools work that leverage uh",
    "start": "996759",
    "end": "1001920"
  },
  {
    "text": "BPF we can call BPF programs on system calls on network devices on socket level",
    "start": "1001920",
    "end": "1008519"
  },
  {
    "text": "interaction so whenever data is being ined into a socket or when it is red we can even call this on the network driver",
    "start": "1008519",
    "end": "1015120"
  },
  {
    "text": "level with dma access like to have very fast access and then more and more attachment points coming in every",
    "start": "1015120",
    "end": "1021480"
  },
  {
    "text": "release of the Linux kernel BPF programs can communicate with",
    "start": "1021480",
    "end": "1026678"
  },
  {
    "text": "each other and they can store State via uh via BPF Maps it's basically so you",
    "start": "1026679",
    "end": "1032520"
  },
  {
    "text": "have your bite code which is just a code that runs and then separate from that you have the state of the program which",
    "start": "1032520",
    "end": "1037880"
  },
  {
    "text": "is stored in BPF Maps BPF Maps can be accessed from BPF programs and from user",
    "start": "1037880",
    "end": "1043079"
  },
  {
    "text": "space so you can write State into BPF map and then read it from user space for",
    "start": "1043079",
    "end": "1048280"
  },
  {
    "text": "example metrics or you can write configuration into a map and read it from a BPF program to configure that",
    "start": "1048280",
    "end": "1054240"
  },
  {
    "text": "program and so on allows us to uh store state map types that are supported are hash tables arrays lru ring buffer track",
    "start": "1054240",
    "end": "1061960"
  },
  {
    "text": "rays and an LPM long as preix match uh some of them have like per CPU variance",
    "start": "1061960",
    "end": "1067360"
  },
  {
    "text": "as well for um efficiency we can call BPF helpers so the chronal actually allows us to",
    "start": "1067360",
    "end": "1073720"
  },
  {
    "text": "basically interact with it when a BPF program for example BPF program does not know on its own know how to change and",
    "start": "1073720",
    "end": "1080559"
  },
  {
    "text": "and and um and manipulate a network packet for this we call a helper a BPF program does not know how to generate a",
    "start": "1080559",
    "end": "1086799"
  },
  {
    "text": "random number for this we we we call a helper these are stable apis they never change they're always uh they will be",
    "start": "1086799",
    "end": "1093600"
  },
  {
    "text": "maintained forever uh this allows BPF programs to interact with the Linux kernel and use existing functionality",
    "start": "1093600",
    "end": "1100120"
  },
  {
    "text": "that the Linux kernel already understands we can do tail calls we can have one program call another program we",
    "start": "1100120",
    "end": "1108000"
  },
  {
    "text": "can uh Implement chains of logical programs um we can Implement function",
    "start": "1108000",
    "end": "1113039"
  },
  {
    "text": "calls using this this allows to build small programs and then call them in a in a in a in a",
    "start": "1113039",
    "end": "1119240"
  },
  {
    "text": "sequence we have a chit compiler a just in time compiler this means that as you",
    "start": "1119240",
    "end": "1125559"
  },
  {
    "text": "load generic BPF bite code which is which is not CPU specific the kernel",
    "start": "1125559",
    "end": "1132280"
  },
  {
    "text": "will will take this we'll verify that it's safe to run and after this we'll just compile it to whatever your CPU",
    "start": "1132280",
    "end": "1138400"
  },
  {
    "text": "actually run so x86 arm whatever you can see the list of supported um CP CPU",
    "start": "1138400",
    "end": "1143919"
  },
  {
    "text": "models there basically all 64bit CP mods are support at this point so this this",
    "start": "1143919",
    "end": "1150320"
  },
  {
    "text": "is ensures this the the native execution speed we are actually requiring the",
    "start": "1150320",
    "end": "1155440"
  },
  {
    "text": "order of a BPF program to understand what what the CPU does who owns BPF um this list is",
    "start": "1155440",
    "end": "1162520"
  },
  {
    "start": "1160000",
    "end": "1415000"
  },
  {
    "text": "growing so this is just the top 10 uh this is the number of contributions to BPF on the Kernel side and last roughly",
    "start": "1162520",
    "end": "1169480"
  },
  {
    "text": "two years so you can see that uh we have the two maintainers Daniel and um alexe",
    "start": "1169480",
    "end": "1174919"
  },
  {
    "text": "they're co- maintaining BPF and then we have contributions when basically Facebook Reddit netronome like list goes",
    "start": "1174919",
    "end": "1180960"
  },
  {
    "text": "goes on and and on and on there's a I think 186 contributors to the Linux chel",
    "start": "1180960",
    "end": "1187320"
  },
  {
    "text": "code on its own in this subsystem it's one of the fastest growing subsystems right",
    "start": "1187320",
    "end": "1193080"
  },
  {
    "text": "now who is using BPF for what so this is this gets a bit uh what was what what",
    "start": "1193080",
    "end": "1199960"
  },
  {
    "text": "Justin was mentioning this is kind of revolutionizing a lot and people don't see it quite yet use case number one",
    "start": "1199960",
    "end": "1207000"
  },
  {
    "text": "Facebook is basically rewriting the majority of their infrastructure related",
    "start": "1207000",
    "end": "1212880"
  },
  {
    "text": "uh code using BPF um a small spoiler there will be",
    "start": "1212880",
    "end": "1219320"
  },
  {
    "text": "um a very interesting talk around how they how Facebook is replacing um IP",
    "start": "1219320",
    "end": "1225520"
  },
  {
    "text": "tables and network filtering with BPF in the upcoming uh BPF Summit in uh November 12th um that talk will",
    "start": "1225520",
    "end": "1232679"
  },
  {
    "text": "definitely be online if you interested in this stuff definitely check that talk out they has lots and lots of details",
    "start": "1232679",
    "end": "1237880"
  },
  {
    "text": "and um performance numbers so basically Facebook has already replaced their DS mitigation and L3 L4 lcal aners with BPF",
    "start": "1237880",
    "end": "1245760"
  },
  {
    "text": "moving away from ipv ipvs um they're either using it for tra traffic optimization and at the talk we'll cover",
    "start": "1245760",
    "end": "1251760"
  },
  {
    "text": "how they will use it for network security in the future Google has started out using it",
    "start": "1251760",
    "end": "1257760"
  },
  {
    "text": "for profiling to actually figure out how much CPU are applications using in a distributed system and they're now",
    "start": "1257760",
    "end": "1263840"
  },
  {
    "text": "moving to traffic optimization and network security as well Reddit is working Upstream um on a project called",
    "start": "1263840",
    "end": "1271279"
  },
  {
    "text": "BPF filter which will replace the chronal portion of Ip table so the the",
    "start": "1271279",
    "end": "1277000"
  },
  {
    "text": "part of Ip tabl of the packet filter that runs in the konel to rip that out and replace it with BPF and there's also",
    "start": "1277000",
    "end": "1284159"
  },
  {
    "text": "several papers and projects out there to use xtp and BPF uh for n use",
    "start": "1284159",
    "end": "1290120"
  },
  {
    "text": "cases and last but least Netflix if you if you have seen BPF before it's quite",
    "start": "1290120",
    "end": "1295760"
  },
  {
    "text": "likely that you've seen Brandon GRE talk about um performance troubleshooting using BPF to actually look at production",
    "start": "1295760",
    "end": "1304960"
  },
  {
    "text": "and um let's say highs scale environments where applications consume",
    "start": "1304960",
    "end": "1310720"
  },
  {
    "text": "CPU in a in a in in an environment where it's it's difficult to troubleshoot and profile unless you have a profiling tool",
    "start": "1310720",
    "end": "1316480"
  },
  {
    "text": "that's very low low overhead um use BPF to basically extract so-called flame graphs and troubleshooting data mostly",
    "start": "1316480",
    "end": "1323520"
  },
  {
    "text": "recently um he has open sourced a new tool called BPF Trace which is kind of D trace for Linux and offers a nice syntax",
    "start": "1323520",
    "end": "1330960"
  },
  {
    "text": "uh to do uh performance troubleshooting these are just a few there are many many more examples on how",
    "start": "1330960",
    "end": "1336840"
  },
  {
    "text": "BPF is being used um there's definitely like a massive number of projects that have started in the last two years to",
    "start": "1336840",
    "end": "1343600"
  },
  {
    "text": "give you a very simple simple example at least to me this is simple um",
    "start": "1343600",
    "end": "1350240"
  },
  {
    "text": "like how does a BPF program look like basically you write in a high level language such as C and you can execute",
    "start": "1350240",
    "end": "1356480"
  },
  {
    "text": "code when a certain event happens in this case this small program runs",
    "start": "1356480",
    "end": "1362320"
  },
  {
    "text": "whenever the exac system call returns so whenever a process is executing another",
    "start": "1362320",
    "end": "1367720"
  },
  {
    "text": "binary and that system called returns this this code is is uh is invoked and",
    "start": "1367720",
    "end": "1373760"
  },
  {
    "text": "we will get from that process the current process ID and the threat group ID",
    "start": "1373760",
    "end": "1379120"
  },
  {
    "text": "and we will retrieve the command like what it could be curl or it could be",
    "start": "1379120",
    "end": "1384600"
  },
  {
    "text": "htpd like the actual binary name and we will expose that through the perf ring",
    "start": "1384600",
    "end": "1389679"
  },
  {
    "text": "buffer like a ring buffer user space so this would actually give us an event and",
    "start": "1389679",
    "end": "1395159"
  },
  {
    "text": "an invocation every time exec was called by a process and you will at the p and",
    "start": "1395159",
    "end": "1400520"
  },
  {
    "text": "and actual binary name so you could you can monitor your your systems way very simple example but this is exactly how",
    "start": "1400520",
    "end": "1407000"
  },
  {
    "text": "for example profiling a monitor systems for example cystic is using BPF to to monitor your",
    "start": "1407000",
    "end": "1414760"
  },
  {
    "start": "1415000",
    "end": "1726000"
  },
  {
    "text": "system all right that was an intro on BPF right",
    "start": "1415080",
    "end": "1420880"
  },
  {
    "text": "very low level what is BPF now do you need to fully understand all aspects of",
    "start": "1420880",
    "end": "1425960"
  },
  {
    "text": "of BPF to actually understand and or to to use it no this is why we created",
    "start": "1425960",
    "end": "1431200"
  },
  {
    "text": "celium so Sim is an open source project and it is aiming to provide networking",
    "start": "1431200",
    "end": "1437760"
  },
  {
    "text": "low poan and security for microservices in environments such as kubernetes mesos Docker and so on",
    "start": "1437760",
    "end": "1444960"
  },
  {
    "text": "um primarily aimed at containers the technology itself is not container specific at all but right now we're",
    "start": "1444960",
    "end": "1450960"
  },
  {
    "text": "primarily supporting containers um and we're making the Linux kernel BP or kind",
    "start": "1450960",
    "end": "1456919"
  },
  {
    "text": "of microservice aware with the help of BPF project goals so first of all",
    "start": "1456919",
    "end": "1463279"
  },
  {
    "text": "approachable BPF BPF is fantastic flexible and highly efficient but it's super hard to use unless you're col",
    "start": "1463279",
    "end": "1470200"
  },
  {
    "text": "unless you're a colel developer it's there's no doubt that majority of people will not want to write BPF programs on",
    "start": "1470200",
    "end": "1475760"
  },
  {
    "text": "their own but you want to like benefit from the flexibility and powers of it so you want to automate program creation",
    "start": "1475760",
    "end": "1481919"
  },
  {
    "text": "you want to automate the management part um and so on that's goal number one second goal is actually use the",
    "start": "1481919",
    "end": "1487960"
  },
  {
    "text": "flexibility of BPF uh to make the Linux colel aware of cloud native application use case and we'll dive into some of",
    "start": "1487960",
    "end": "1494279"
  },
  {
    "text": "these uh security use the power of BPF to make the colonel API aware so",
    "start": "1494279",
    "end": "1501399"
  },
  {
    "text": "actually have the kernel understand hey do you have two two applications talking to each other what are the API calls",
    "start": "1501399",
    "end": "1507399"
  },
  {
    "text": "that are making how can like enable the colonel to actually secure these API calls build an identity based uh",
    "start": "1507399",
    "end": "1514840"
  },
  {
    "text": "mechanism to secure Services service service communication so instead of filtering on IP addresses actually",
    "start": "1514840",
    "end": "1521559"
  },
  {
    "text": "understand what is a microservice like what are the labels on that microservice what is the security need of of the",
    "start": "1521559",
    "end": "1526960"
  },
  {
    "text": "microservice and then build an ident en based security mechanism and firewall instead of just understanding IP",
    "start": "1526960",
    "end": "1532720"
  },
  {
    "text": "addresses and ports and process level context enforcement so actually using the power of BPF to understand what is",
    "start": "1532720",
    "end": "1539960"
  },
  {
    "text": "the binary what is the process inside of a container that is making a certain API call this is like highly useful for",
    "start": "1539960",
    "end": "1546320"
  },
  {
    "text": "example everybody using um kubernetes understands that yes you can you can run Cube control exact to execute the",
    "start": "1546320",
    "end": "1552880"
  },
  {
    "text": "command inside of a part for example so who's going to secure the communication that this invocation makes it's",
    "start": "1552880",
    "end": "1559360"
  },
  {
    "text": "obviously not the the service itself that that you're running that is making this call so how can you secure this",
    "start": "1559360",
    "end": "1565080"
  },
  {
    "text": "additional command that you're executing whether that should basically be able to reach out somewhere else and so on the",
    "start": "1565080",
    "end": "1570720"
  },
  {
    "text": "last aspect is to leverage performance uh the performance of BPF so celium use cases uh first of all",
    "start": "1570720",
    "end": "1578799"
  },
  {
    "text": "we're a cni and CMM plugin so you can use celium for container networking so for PA top networking or for container",
    "start": "1578799",
    "end": "1585720"
  },
  {
    "text": "to container networking uh we we P IPv6 ipv4 net 46 uh we have concepts for",
    "start": "1585720",
    "end": "1592039"
  },
  {
    "text": "multicluster rting routing so all of the BPF flexibility we use for container networking that is fast and",
    "start": "1592039",
    "end": "1598880"
  },
  {
    "text": "flexible we Implement service low balancing so if you're running kubernetes or Docker or something like",
    "start": "1598880",
    "end": "1604200"
  },
  {
    "text": "this you will uh put a so-called service construct in front of your replicas of",
    "start": "1604200",
    "end": "1609720"
  },
  {
    "text": "containers or pots to make it ha right to make it available uh we Implement for example kubernetes services using BPF",
    "start": "1609720",
    "end": "1616240"
  },
  {
    "text": "the same technology as Facebook is using for for the low plunge so highly efficient and highly scalable",
    "start": "1616240",
    "end": "1621320"
  },
  {
    "text": "implementation we Implement microservice security so instead of just providing",
    "start": "1621320",
    "end": "1627120"
  },
  {
    "text": "pure IP and Port based uh network security uh we basically enforce using",
    "start": "1627120",
    "end": "1632440"
  },
  {
    "text": "identities so we give Services identities uh and we allow you to define a security policy based on like service",
    "start": "1632440",
    "end": "1639640"
  },
  {
    "text": "labels like my service frontend can talk to my service back end and we we ensure that we enforce this on the networking",
    "start": "1639640",
    "end": "1645320"
  },
  {
    "text": "level um we have an acceler like a BPF accelerated um way of doing API Weare",
    "start": "1645320",
    "end": "1651320"
  },
  {
    "text": "security so instead of just saying two Services can talk to each other we can say they can only make certain rest API",
    "start": "1651320",
    "end": "1657279"
  },
  {
    "text": "calls or this service can talk to my cofco cluster but it can only produce on a particular topic or it can only",
    "start": "1657279",
    "end": "1663519"
  },
  {
    "text": "consume from a particular topic we have uh DNS sare policies and this is",
    "start": "1663519",
    "end": "1669440"
  },
  {
    "text": "upcoming in one of the next releases we will have SSL data visibility uh via ktls so the ability to actually",
    "start": "1669440",
    "end": "1676760"
  },
  {
    "text": "understand what data is in application sending even if the application is using SSL um encryption which is very",
    "start": "1676760",
    "end": "1683519"
  },
  {
    "text": "important as you want to have visibility and security for um data is is leaving",
    "start": "1683519",
    "end": "1688840"
  },
  {
    "text": "your cluster and maybe going to a SAS offering outside of the cluster this data would almost always be encrypted or",
    "start": "1688840",
    "end": "1695080"
  },
  {
    "text": "you're using Cloud managed uh Cloud managed databases maybe you're doing calls to um um um let's say some data",
    "start": "1695080",
    "end": "1704799"
  },
  {
    "text": "like some some database service that will always be SSL encrypted so if you if you want to have for example service",
    "start": "1704799",
    "end": "1709960"
  },
  {
    "text": "mesh functionality or API visibility this is where uh s's SSL data visibility",
    "start": "1709960",
    "end": "1716159"
  },
  {
    "text": "with ktls can give you visibility the last part is service Mash acceleration and we'll do a quick Deep dive into that",
    "start": "1716159",
    "end": "1723760"
  },
  {
    "text": "because I think that might be something that's interesting to a lot of people so who has heard about service",
    "start": "1723760",
    "end": "1729880"
  },
  {
    "start": "1726000",
    "end": "1866000"
  },
  {
    "text": "mesh all right most people that's great it's getting it's growing so this is usually the picture that you see when",
    "start": "1729880",
    "end": "1735240"
  },
  {
    "text": "when people talk about service smash right two services are talking to each other and instead of talking directly you will have a side call proxy that",
    "start": "1735240",
    "end": "1742519"
  },
  {
    "text": "basically is in the way of all this communication uh looks pretty simple and neat right um what it really looks like",
    "start": "1742519",
    "end": "1748679"
  },
  {
    "text": "is something like this right this is this is how it looks like on kind of the data path side of things so the service",
    "start": "1748679",
    "end": "1754799"
  },
  {
    "text": "is talking I will use the regular data path like the networking mechanisms and then you will have an IP tables rule or",
    "start": "1754799",
    "end": "1760880"
  },
  {
    "text": "similar that transparently redirects all traffic to the side car so instead of",
    "start": "1760880",
    "end": "1766320"
  },
  {
    "text": "being able to go out to the world directly it has to go to the side car and then the side car will terminate that TCB connection and will look at the",
    "start": "1766320",
    "end": "1773039"
  },
  {
    "text": "HTTP headers and everything run its services and then send it out again",
    "start": "1773039",
    "end": "1779279"
  },
  {
    "text": "um it's not really efficient you will have about a 10 10x impact just from",
    "start": "1779279",
    "end": "1784799"
  },
  {
    "text": "injecting this this uh this this side car um architecture it's not because the",
    "start": "1784799",
    "end": "1790240"
  },
  {
    "text": "the the proxy in this case it's I I have a I have a picture of envoy up there it's not because the proxy is slow or",
    "start": "1790240",
    "end": "1796279"
  },
  {
    "text": "not fast or not not efficient it's because of this transparent injection because uh the proxy is getting forced",
    "start": "1796279",
    "end": "1803080"
  },
  {
    "text": "into the way so why we figured like why do we do TCP which was designed for a",
    "start": "1803080",
    "end": "1810080"
  },
  {
    "text": "lossy environment like a it was literally designed to sustain an atomic attack right so why do we run TCP if",
    "start": "1810080",
    "end": "1816799"
  },
  {
    "text": "like the service and the sidecar proxy is always running next to each other on the same host we can just do this right",
    "start": "1816799",
    "end": "1823080"
  },
  {
    "text": "we can just say we can just shortcut these sockets so if there is if they're",
    "start": "1823080",
    "end": "1828159"
  },
  {
    "text": "always running on the same host we can we can find this out and we can data the the we can copy the data from one socket",
    "start": "1828159",
    "end": "1834360"
  },
  {
    "text": "of the application to the socket of for example enoy and we did that and there was about the 3 to 4X performance",
    "start": "1834360",
    "end": "1841320"
  },
  {
    "text": "Improvement in terms of number of requests per second that we can forward so this is one example that um how Sim",
    "start": "1841320",
    "end": "1849159"
  },
  {
    "text": "and BPF can basically make the colel like micros microservice aware right",
    "start": "1849159",
    "end": "1854640"
  },
  {
    "text": "kind of shape it in a way that is built and tail for this new age of microservices that for example brings",
    "start": "1854640",
    "end": "1861320"
  },
  {
    "text": "functionalities such as service",
    "start": "1861320",
    "end": "1864960"
  },
  {
    "start": "1866000",
    "end": "1975000"
  },
  {
    "text": "mesh there is many many other BPF projects that um and I've only listed a",
    "start": "1866880",
    "end": "1872480"
  },
  {
    "text": "couple of them I've I've already mentioned BPF Trace which is the D trace for Linux um there's BPF D which is kind",
    "start": "1872480",
    "end": "1879559"
  },
  {
    "text": "of an ability to loow BPF programs in a large cluster of of servers this case",
    "start": "1879559",
    "end": "1886000"
  },
  {
    "text": "this is done by a Google engineer mostly for profiling there's several Frameworks I've listed to Here There is go BPF and",
    "start": "1886000",
    "end": "1892200"
  },
  {
    "text": "BCC both of them allow you to write BPF programs using either python or go um",
    "start": "1892200",
    "end": "1898399"
  },
  {
    "text": "often you still have to run write the actual BPF program in C but all of kind of the logic around it can be written",
    "start": "1898399",
    "end": "1904480"
  },
  {
    "text": "using an a higher level language I guess to me c is still a high level language um low pancing KRON is is Facebook's Lal",
    "start": "1904480",
    "end": "1912600"
  },
  {
    "text": "answer that they have open source um their security tool for example set comp has a BP mode there is",
    "start": "1912600",
    "end": "1919080"
  },
  {
    "text": "DS mitigation tools Cloud flare has open source their uh BPF tool that they use",
    "start": "1919080",
    "end": "1924519"
  },
  {
    "text": "to mitigate DS attacks it's kind of a a tool that has IP tables like syntax where you can block IP addresses like",
    "start": "1924519",
    "end": "1932039"
  },
  {
    "text": "entire ranges uh and do this at like at massive speeds up to like 40 million packets per second that that's basically",
    "start": "1932039",
    "end": "1939120"
  },
  {
    "text": "what you need to do if you are a um a a cgn that is is branding himself as being",
    "start": "1939120",
    "end": "1945799"
  },
  {
    "text": "dos mitigation proof um shows kind of how easy it is to actually use BPF if",
    "start": "1945799",
    "end": "1951000"
  },
  {
    "text": "you build the high the right level of abstraction on top there's many many many more uh that I have not listed here",
    "start": "1951000",
    "end": "1958360"
  },
  {
    "text": "um if you want to have the fullest theum BPF documentation reference at the in",
    "start": "1958360",
    "end": "1963600"
  },
  {
    "text": "the the last slide we'll have a full list as well so before we go into the",
    "start": "1963600",
    "end": "1968840"
  },
  {
    "text": "Q&A I want to do a quick demo and kind of uh talk a little about low-level stuff but I want to do quick demo as",
    "start": "1968840",
    "end": "1975159"
  },
  {
    "start": "1975000",
    "end": "2366000"
  },
  {
    "text": "well how much time do we have yeah I think I still have a couple of minutes so is has everybody has heard about",
    "start": "1975159",
    "end": "1981919"
  },
  {
    "text": "kubernetes I assume right just making sure so I have a",
    "start": "1981919",
    "end": "1988279"
  },
  {
    "text": "kubernetes cluster here it's actually just mini Cube and I've already started a couple of pots because of conference",
    "start": "1988279",
    "end": "1993880"
  },
  {
    "text": "Wi-Fi um you can see there's some death stars and some spaceships and some x-wings so uh what could it be let's see",
    "start": "1993880",
    "end": "2002320"
  },
  {
    "text": "I want to do my intro so this is this demo is starbo themed you you may have guessed it",
    "start": "2002320",
    "end": "2008639"
  },
  {
    "text": "so a long time ago in a container cluster far far away it is a period of Civil War the Empire has adopted",
    "start": "2008639",
    "end": "2014639"
  },
  {
    "text": "microservices and continuous delivery despite this Rebel spaceships striking",
    "start": "2014639",
    "end": "2019760"
  },
  {
    "text": "from a hidden cluster have won their first Victory against the evil Galactic Empire during the battle Rebel spies",
    "start": "2019760",
    "end": "2025919"
  },
  {
    "text": "managed to steal the Swagger API specification to the Empire's Ultimate Weapon the Death Star so that's that's",
    "start": "2025919",
    "end": "2032519"
  },
  {
    "text": "our demo uh we'll demo some some functionality around this so",
    "start": "2032519",
    "end": "2038120"
  },
  {
    "text": "as you see that the kind of the the Empire has um constructed the death St",
    "start": "2038120",
    "end": "2043320"
  },
  {
    "text": "it's now running here with uh three replicas we should also have a",
    "start": "2043320",
    "end": "2048560"
  },
  {
    "text": "service yeah so we have a death star service right which is kind of which is a cluster IP and it will low PLS to my",
    "start": "2048560",
    "end": "2054760"
  },
  {
    "text": "three Death Star replicas right so Empire is now running death th in ha",
    "start": "2054760",
    "end": "2060040"
  },
  {
    "text": "manner it's good right and then I have a small script which will just give me a cube control uh command line so uh those",
    "start": "2060040",
    "end": "2068240"
  },
  {
    "text": "who have not used Cub yet so Cube control xac will basically uh execute this curl command here curl in this pod",
    "start": "2068240",
    "end": "2076720"
  },
  {
    "text": "which is basically a container so what we're doing here is we're basically doing curl and we're",
    "start": "2076720",
    "end": "2081919"
  },
  {
    "text": "calling the Death Star service name and the Death Star will give us some Chase",
    "start": "2081919",
    "end": "2087240"
  },
  {
    "text": "on back like hey I'm a death star um here are some attributes and by the way here's my entire API that you can",
    "start": "2087240",
    "end": "2095000"
  },
  {
    "text": "access so you can do a get you can get to slash you can do a get to slash",
    "start": "2095000",
    "end": "2100280"
  },
  {
    "text": "Health you can do a request you can request a landing right you can put something into the cargo B you can get",
    "start": "2100280",
    "end": "2106760"
  },
  {
    "text": "the status of the hyper matter reactor or you can put something into the exhaust Port right amazing so I'm",
    "start": "2106760",
    "end": "2113800"
  },
  {
    "text": "assuming everybody has seen the movies so obviously uh the rebels know what to have to do like just",
    "start": "2113800",
    "end": "2120359"
  },
  {
    "text": "invoke that rest the API um and the death story is going down right way easier than in the actual",
    "start": "2120359",
    "end": "2126359"
  },
  {
    "text": "movie so unfortunately what um unfortunately kind of the seop team",
    "start": "2126359",
    "end": "2133400"
  },
  {
    "text": "of the Empire has adopted right very bad for Rebels and they're doing an L7",
    "start": "2133400",
    "end": "2139480"
  },
  {
    "text": "an API or policy let's have a quick look so this is a so-called kubernetes Cod",
    "start": "2139480",
    "end": "2145640"
  },
  {
    "text": "custom resource definition which where we have a defined an a kind for which is",
    "start": "2145640",
    "end": "2150960"
  },
  {
    "text": " or policy so this is how a that or policy looks like that will then be implemented using BPF",
    "start": "2150960",
    "end": "2158920"
  },
  {
    "text": "and it allows you to basically specify first of all in this block uh this",
    "start": "2158920",
    "end": "2164000"
  },
  {
    "text": "policy will apply to All Parts in your kuet cluster that have the following two labels class class death star and",
    "start": "2164000",
    "end": "2170839"
  },
  {
    "text": "organization Empire so all our death star replicas we'll have this policy applies then we'll have an Ingress",
    "start": "2170839",
    "end": "2177440"
  },
  {
    "text": "policy that the policy that applies to stuff that's going into a part it means uh that you can be talked",
    "start": "2177440",
    "end": "2184359"
  },
  {
    "text": "to from All Parts which have the label class spaceship right so but could be a",
    "start": "2184359",
    "end": "2189400"
  },
  {
    "text": "thousand Parts could be one part like all parts that have this label you can talk to me on Port",
    "start": "2189400",
    "end": "2196640"
  },
  {
    "text": "atcp and then the here are the API rules you can do a get to slv1 or you can do a",
    "start": "2196640",
    "end": "2203119"
  },
  {
    "text": "post to/ V1 request landing right so this is a policy like includes service",
    "start": "2203119",
    "end": "2208839"
  },
  {
    "text": "to service includes L4 on the port and includes API all right let's get out of here",
    "start": "2208839",
    "end": "2218559"
  },
  {
    "text": "uh so I have created this policy it's now loaded in here you could",
    "start": "2218920",
    "end": "2226079"
  },
  {
    "text": "also extract it again if you want to see this is kind of kubernetes now understands this policy and has loaded",
    "start": "2226079",
    "end": "2232240"
  },
  {
    "text": "it so let's go back and actually Let's do let's do the the get to/ V1 again",
    "start": "2232240",
    "end": "2237800"
  },
  {
    "text": "that still works all right and now let's let me change that so we're going from a get to a",
    "start": "2237800",
    "end": "2245960"
  },
  {
    "text": "put I want do Rebels are trying to kill the Death Star XIs denied so this was",
    "start": "2245960",
    "end": "2253000"
  },
  {
    "text": " using BPF and Envoy to enforce a layer 7even security rule that basically",
    "start": "2253000",
    "end": "2258520"
  },
  {
    "text": "restricted the API calls right that's what I call a successful demo",
    "start": "2258520",
    "end": "2263720"
  },
  {
    "text": "right well not not quite so what we've missed is that while the Death Star was constructed right while the terraform",
    "start": "2263720",
    "end": "2268920"
  },
  {
    "text": "scripts were running the Jedis have managed to infiltrate stuff and I actually loaded a slightly different",
    "start": "2268920",
    "end": "2274520"
  },
  {
    "text": "policy than the one that I showed you so let's do a diff so this is the",
    "start": "2274520",
    "end": "2279599"
  },
  {
    "text": "policy that I got that I showed you guys uh this is the policy that I actually loaded and if you do the diff we can see",
    "start": "2279599",
    "end": "2286480"
  },
  {
    "text": "that there is one more rule in there which says you can do a put to/ exhaust Port if you have the HTTP header X has",
    "start": "2286480",
    "end": "2294400"
  },
  {
    "text": "Force true set W all right let me see if",
    "start": "2294400",
    "end": "2299480"
  },
  {
    "text": "I can do that so I think it's uh let me go back here and we do HX has for",
    "start": "2299480",
    "end": "2308560"
  },
  {
    "text": "true all right luk is coming Panic death store exploded so we're good again we",
    "start": "2308560",
    "end": "2314599"
  },
  {
    "text": "can actually bypass the the rule if we wanted to so it shows you the the flexibility of of of kind of the power",
    "start": "2314599",
    "end": "2320000"
  },
  {
    "text": "of this we can filter on like path of meta name headers and so on one of the",
    "start": "2320000",
    "end": "2325200"
  },
  {
    "text": "next versions will include a functionality where we can start enforcing on payload as well so we have",
    "start": "2325200",
    "end": "2330839"
  },
  {
    "text": "extended onvoy with so-called goang extensions where you can write your own small goang extension that will then run",
    "start": "2330839",
    "end": "2337920"
  },
  {
    "text": "on the entire HTTP message including the payload so this would for example allow you to validate your own tokens or",
    "start": "2337920",
    "end": "2345480"
  },
  {
    "text": "enforce a particular schema on the payload and so on so right while it's nice to have kind of enforcement on the",
    "start": "2345480",
    "end": "2350960"
  },
  {
    "text": "request a lot of apis obviously carry some of the data as part of the HTTP",
    "start": "2350960",
    "end": "2356079"
  },
  {
    "text": "body which we cannot enforce on right now so the next and one of the next versions I don't want to promise the next version one of the next versions",
    "start": "2356079",
    "end": "2362280"
  },
  {
    "text": "will feature this particular feature all right we've",
    "start": "2362280",
    "end": "2368920"
  },
  {
    "text": "here are the links first of all thank you for listening to me um links so all of this is open",
    "start": "2368920",
    "end": "2375760"
  },
  {
    "text": "source G there's the gith up page um you can check it out you have an extensive",
    "start": "2375760",
    "end": "2381000"
  },
  {
    "text": "BPF reference guide which goes into all of the glory details all the way down to",
    "start": "2381000",
    "end": "2386440"
  },
  {
    "text": "the individual BPF register numbers and and everything you can follow us on Twitter and we have a website as well um",
    "start": "2386440",
    "end": "2394400"
  },
  {
    "text": "with that I think how much time do we have just in for questions couple of minutes or are we done all",
    "start": "2394400",
    "end": "2401319"
  },
  {
    "text": "right all right obviously it will also be available outside afterwards uh for",
    "start": "2401319",
    "end": "2406839"
  },
  {
    "text": "more detailed questions yeah sure hi U so I'm I'm relatively new to this so I'm",
    "start": "2406839",
    "end": "2412359"
  },
  {
    "text": "asking a very basic question what exactly is dpdk how does dpdk from what",
    "start": "2412359",
    "end": "2418520"
  },
  {
    "text": "you're describing okay um so the the main",
    "start": "2418520",
    "end": "2423839"
  },
  {
    "text": "fundamental difference is that dpdk would allow you to write a user space program that has access to either the",
    "start": "2423839",
    "end": "2431520"
  },
  {
    "text": "hardware directly or to the data itself so instead of basically solving your problem in the colonel space you're",
    "start": "2431520",
    "end": "2438000"
  },
  {
    "text": "solving it in user space like previously uh dpdk would come with drivers for each",
    "start": "2438000",
    "end": "2444280"
  },
  {
    "text": "specific Network cart that was supported a new version of dpdk actually now runs on top of a special BPF mode that then",
    "start": "2444280",
    "end": "2451599"
  },
  {
    "text": "gives kind of direct access to the data only right so that so in a the One S",
    "start": "2451599",
    "end": "2457560"
  },
  {
    "text": "answer is kind of Kernel Space versus user space yes you're basically extending the",
    "start": "2457560",
    "end": "2466440"
  },
  {
    "text": "kernel is the design that you're running different",
    "start": "2466560",
    "end": "2471839"
  },
  {
    "text": "tools and someone else is",
    "start": "2471839",
    "end": "2474800"
  },
  {
    "text": "running so yeah so the BPF AP has been designed that you that that all hooks can be used by multiple users that will",
    "start": "2478800",
    "end": "2485760"
  },
  {
    "text": "run in sequence that said if you have a hook that basically me a filter and says hey drop this then the hook afterwards",
    "start": "2485760",
    "end": "2492560"
  },
  {
    "text": "will not see this right um so there this is definitely an area that is still being worked on for example what is the",
    "start": "2492560",
    "end": "2499200"
  },
  {
    "text": "what is the exact ordering I think this is always a a problem with kind of any user space facing API that just somehow",
    "start": "2499200",
    "end": "2505359"
  },
  {
    "text": "like how does this all work work together yeah",
    "start": "2505359",
    "end": "2513040"
  },
  {
    "text": "yes okay that's a excellent question so BPF is older than I am right so been",
    "start": "2515640",
    "end": "2521960"
  },
  {
    "text": "invented by one of like basically the same that almost in like pretty much invented the um on the Internet it's and",
    "start": "2521960",
    "end": "2528839"
  },
  {
    "text": "you've all used BPF if you have been running TCP dump you've been using BPF as a youp d is using BPF for its",
    "start": "2528839",
    "end": "2534480"
  },
  {
    "text": "filtering technique if you're using Chrome You' have been using BPF it's using BPF to do system call filterings",
    "start": "2534480",
    "end": "2539800"
  },
  {
    "text": "for the plugins of chrome but that's classic BPF cbpf it's the old BPF um",
    "start": "2539800",
    "end": "2546359"
  },
  {
    "text": "relatively based ebpf is the extended or evil BPF like",
    "start": "2546359",
    "end": "2551440"
  },
  {
    "text": "both names are being used um and it's it's there's lots of technical details what different 32 bit to 64 many more",
    "start": "2551440",
    "end": "2558640"
  },
  {
    "text": "registers many more helper calls and so on better chit compiler lots and lots and lots of um additions it's pretty",
    "start": "2558640",
    "end": "2566040"
  },
  {
    "text": "much the same thing that's why I'm just saying BPF right so classic BPF doesn't really exist anymore if you L classic",
    "start": "2566040",
    "end": "2572200"
  },
  {
    "text": "BPF it will be translated into BP eppf at this point but technically there two",
    "start": "2572200",
    "end": "2577480"
  },
  {
    "text": "different instruction",
    "start": "2577480",
    "end": "2580400"
  },
  {
    "text": "sets all right thank you very much again if you have questions I'm outside uh",
    "start": "2582920",
    "end": "2588880"
  },
  {
    "text": "check out our get up page [Applause]",
    "start": "2588880",
    "end": "2595109"
  }
]