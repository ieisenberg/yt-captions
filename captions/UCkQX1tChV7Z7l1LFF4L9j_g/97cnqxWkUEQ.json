[
  {
    "text": "[Music]",
    "start": "3270",
    "end": "8730"
  },
  {
    "text": "hi everyone yeah so my name is Liz rice I work for a company called isov veent which originally created the cyan",
    "start": "10800",
    "end": "17640"
  },
  {
    "text": "project do we have anybody here who has come across selum before few hands excellent that's great uh I'm also",
    "start": "17640",
    "end": "24760"
  },
  {
    "text": "pretty involved with the cloud native Computing foundation and with open UK",
    "start": "24760",
    "end": "30720"
  },
  {
    "text": "and uh psyllium is based on this technology called ebpf and so I'm going",
    "start": "30720",
    "end": "36399"
  },
  {
    "text": "to try and talk a bit about what ebpf is and since we're in a track about",
    "start": "36399",
    "end": "41719"
  },
  {
    "text": "efficient programming languages I'm going to talk about why ebpf is really great for performance and uh building",
    "start": "41719",
    "end": "49160"
  },
  {
    "text": "high performance infrastructure tooling particularly in the cloud native",
    "start": "49160",
    "end": "54440"
  },
  {
    "text": "world and let's see if anything's going to work come on there we go right so",
    "start": "54440",
    "end": "62000"
  },
  {
    "text": "EF sounds like an acronym it did used to stand for extended Berkeley packet",
    "start": "62000",
    "end": "67439"
  },
  {
    "text": "filter but honestly you can forget that now because it does so much more than packet",
    "start": "67439",
    "end": "73240"
  },
  {
    "text": "filtering it's much broader than that forget the acronym think of it as a standalone term for a kernel technology",
    "start": "73240",
    "end": "82000"
  },
  {
    "text": "that allows us to customize the way the kernel behaves and with that we can build these",
    "start": "82000",
    "end": "88000"
  },
  {
    "text": "incredibly high performance and low overhead tools that can help us with",
    "start": "88000",
    "end": "93159"
  },
  {
    "text": "networking and security and observability and I'll try and touch on all those three things in this talk this",
    "start": "93159",
    "end": "101159"
  },
  {
    "text": "afternoon so ebpf allows us to make the kernel programmable we can dynamically",
    "start": "101159",
    "end": "108000"
  },
  {
    "text": "load programs into the kernel and change the way that the Kernel's behaving so",
    "start": "108000",
    "end": "113920"
  },
  {
    "text": "I've said the word kernel quite a few times now just to make sure we're all on the same page about what I mean",
    "start": "113920",
    "end": "120759"
  },
  {
    "text": "the kernel is the part of the operating system that interfaces with Hardware so as an application developer",
    "start": "120759",
    "end": "128080"
  },
  {
    "text": "we're usually pretty protected from this concept we have abstractions in programming languages that let us do",
    "start": "128080",
    "end": "134840"
  },
  {
    "text": "things like open files and receive Network messages in practice those",
    "start": "134840",
    "end": "140879"
  },
  {
    "text": "abstractions are using the system call interface to ask for help from the",
    "start": "140879",
    "end": "146000"
  },
  {
    "text": "kernel the kernel is involved whenever we're doing anything that interfaces with Hardware so anything that involves",
    "start": "146000",
    "end": "153400"
  },
  {
    "text": "accessing a file sending or receiving Network messages allocating memory and the kernel is also",
    "start": "153400",
    "end": "160879"
  },
  {
    "text": "coordinating all the different processes that might be running at the same",
    "start": "160879",
    "end": "166040"
  },
  {
    "text": "time so with ebpf we can have events",
    "start": "166040",
    "end": "172040"
  },
  {
    "text": "that happen in the kernel and we can attach our ebpf programs to those events",
    "start": "172040",
    "end": "177720"
  },
  {
    "text": "so whenever that event happens our program is going to get triggered and it will",
    "start": "177720",
    "end": "182879"
  },
  {
    "text": "run so before I go to packet of death let me do a little demo little hello",
    "start": "182879",
    "end": "188519"
  },
  {
    "text": "world so let's change this program to say hello",
    "start": "188519",
    "end": "194360"
  },
  {
    "text": "qon and so what I have here this bit is the actual ebpf program in this",
    "start": "194360",
    "end": "202760"
  },
  {
    "text": "example it's written in C and all it's going to do is write out a line of trace",
    "start": "202760",
    "end": "208519"
  },
  {
    "text": "and then I have some user space code written in Python around it that's going to take that code compile it load it",
    "start": "208519",
    "end": "216080"
  },
  {
    "text": "into the kernel and attach it to a system call called execve and that",
    "start": "216080",
    "end": "222280"
  },
  {
    "text": "system call gets used to run new executables so whenever a new executable",
    "start": "222280",
    "end": "228120"
  },
  {
    "text": "is running on this virtual machine it's going to trigger my evf program to",
    "start": "228120",
    "end": "233640"
  },
  {
    "text": "run and this is a virtual machine running in the cloud with uh vs code",
    "start": "233640",
    "end": "240400"
  },
  {
    "text": "remote so once it's compared and loaded we should see loads of events because it's actually it's using node and there",
    "start": "240400",
    "end": "247040"
  },
  {
    "text": "there's tons of stuff happening so uh takes a little while to compile that",
    "start": "247040",
    "end": "252159"
  },
  {
    "text": "program and load it and hopefully the demo gods are with us and we're going to see something eventually come",
    "start": "252159",
    "end": "259040"
  },
  {
    "text": "on let's uh okay there we go right just",
    "start": "261440",
    "end": "266960"
  },
  {
    "text": "needed a bit of a kick so you you can see the lines of Trace coming out and if",
    "start": "266960",
    "end": "272520"
  },
  {
    "text": "I run something like PS you can see that's 4433 52 as a process ID and if I",
    "start": "272520",
    "end": "280840"
  },
  {
    "text": "go back here here's an event triggered from A bash executable with the process",
    "start": "280840",
    "end": "287240"
  },
  {
    "text": "ID that matches what we just saw so every time that event occurs we",
    "start": "287240",
    "end": "295479"
  },
  {
    "text": "triggered this little tiny and kind of useless EB PF program to",
    "start": "295479",
    "end": "301440"
  },
  {
    "text": "run okay so that's not very useful but let's think about a useful case and this",
    "start": "301440",
    "end": "307960"
  },
  {
    "text": "particular example is going to be mitigating a vulnerability where the",
    "start": "307960",
    "end": "313199"
  },
  {
    "text": "konel can't handle a certain format of packet and there have been a couple of cases of this",
    "start": "313199",
    "end": "319319"
  },
  {
    "text": "where a particularly crafted Network packet can crash the kernel so you",
    "start": "319319",
    "end": "325720"
  },
  {
    "text": "receive the packet if you're an attacker you craft a particular an a you craft a",
    "start": "325720",
    "end": "331360"
  },
  {
    "text": "packet that will trigger this vulnerability and send it to somebody whose machine you want to bring down and",
    "start": "331360",
    "end": "338160"
  },
  {
    "text": "they have a very bad day so normally the way to fix this",
    "start": "338160",
    "end": "343520"
  },
  {
    "text": "would be a kernel patch that you'd have to roll out to all your machines with",
    "start": "343520",
    "end": "349400"
  },
  {
    "text": "ebpf we can dynamically load a program that inspects the network packet sees",
    "start": "349400",
    "end": "355600"
  },
  {
    "text": "whether or not it matches this uh packet of death form format and just throw it",
    "start": "355600",
    "end": "360960"
  },
  {
    "text": "away if that happens so I'm going to pretend that ping packets are packets of",
    "start": "360960",
    "end": "369080"
  },
  {
    "text": "death obviously they're not but uh we can we can pretend so I'm going to have a little",
    "start": "369080",
    "end": "375160"
  },
  {
    "text": "ping ebpf program that's going to uh",
    "start": "375160",
    "end": "380199"
  },
  {
    "text": "essentially look at a packet if it's a ping request at the moment it's just going to send out a line of",
    "start": "380199",
    "end": "386400"
  },
  {
    "text": "Trace so I'm going to Ping local post I'm going to attach",
    "start": "386400",
    "end": "392160"
  },
  {
    "text": "this uh program to let me show you this I'm going to attach it to the uh loop",
    "start": "392160",
    "end": "398520"
  },
  {
    "text": "back interface here and let's just make that a little bit smaller so you can get there we go",
    "start": "398520",
    "end": "405560"
  },
  {
    "text": "so you can see ping is currently just running happily with that sequence number ticking up every",
    "start": "405560",
    "end": "412199"
  },
  {
    "text": "second and when I load my ping program and",
    "start": "412199",
    "end": "418280"
  },
  {
    "text": "again it's going to take a little moment to compile and load into the kernel and I don't know why it's running quite so",
    "start": "418280",
    "end": "423759"
  },
  {
    "text": "slowly but it is okay now we're seeing a line of Trace being generated for every",
    "start": "423759",
    "end": "430560"
  },
  {
    "text": "ping packet that we receive and those sequence numbers are continuing to tick",
    "start": "430560",
    "end": "435800"
  },
  {
    "text": "up now I'm going to change the program to drop packets instead of passing",
    "start": "435800",
    "end": "442400"
  },
  {
    "text": "them up the stack so I'm just going to run that",
    "start": "442400",
    "end": "447800"
  },
  {
    "text": "again and what we're going to see is we're still going to have a line of trace for",
    "start": "447800",
    "end": "453599"
  },
  {
    "text": "every packet but we're dropping with that return code xcp drop we're dropping the packet so the sequence numbers have",
    "start": "453599",
    "end": "461759"
  },
  {
    "text": "stopped incrementing on that right hand side so we've been able to dynamically",
    "start": "461759",
    "end": "468080"
  },
  {
    "text": "change the way that this machine is handling ping packets and if I change this back to pass",
    "start": "468080",
    "end": "475360"
  },
  {
    "text": "again and run it one last time",
    "start": "475720",
    "end": "481000"
  },
  {
    "text": "we should start seeing those sequence numbers it skipped a few as we'd expect",
    "start": "481680",
    "end": "488720"
  },
  {
    "text": "because those packets got dropped but now the sequence numbers are incrementing again okay so we've effectively shown",
    "start": "488720",
    "end": "497599"
  },
  {
    "text": "this concept of changing uh the way that the networking stack on this machine behaves and we've",
    "start": "497599",
    "end": "504599"
  },
  {
    "text": "done a little example of dropping packets",
    "start": "504599",
    "end": "510159"
  },
  {
    "text": "so we can change the way that the kernel behaves and of course another way we",
    "start": "510159",
    "end": "515680"
  },
  {
    "text": "could have done this would be to actually change the kernel we could write kernel code and compile it",
    "start": "515680",
    "end": "521560"
  },
  {
    "text": "ourselves and load it and that sounds really kind of hard and uh if you want to change the kernel in a",
    "start": "521560",
    "end": "530600"
  },
  {
    "text": "um Universal way you've got to persuade basically Linus tals and the entire",
    "start": "530600",
    "end": "535880"
  },
  {
    "text": "kernel community that your change is a really good idea get it into the Upstream code familiarize yourself with",
    "start": "535880",
    "end": "541920"
  },
  {
    "text": "the 30 million lines of code in the kernel to sort of understand how to make that change even if you get your change into",
    "start": "541920",
    "end": "549160"
  },
  {
    "text": "the Upstream kernel it will take literally years for most production",
    "start": "549160",
    "end": "555519"
  },
  {
    "text": "distributions to have that version of the kernel and instead with ebpf we can just",
    "start": "555519",
    "end": "563000"
  },
  {
    "text": "write a program load it dynamically we didn't even need to reboot the machine",
    "start": "563000",
    "end": "568560"
  },
  {
    "text": "to get or change uh rolled out onto that machine so if for example you had a",
    "start": "568560",
    "end": "575480"
  },
  {
    "text": "kernel vulnerability to mitigate you can just load that ebpf program across your Fleet of machines and Away you go",
    "start": "575480",
    "end": "583560"
  },
  {
    "text": "subsequently you might want to patch your machines when there is a kernel patch but you don't have to rush to do",
    "start": "583560",
    "end": "589040"
  },
  {
    "text": "it because ebpf can protect you now you might be thinking could I do",
    "start": "589040",
    "end": "595120"
  },
  {
    "text": "this with kernel modules I don't necessarily have to change the Upstream C colel maybe I can just write myself a",
    "start": "595120",
    "end": "601200"
  },
  {
    "text": "kernel module and you could but a lot of organizations will uh avoid using kernel",
    "start": "601200",
    "end": "607959"
  },
  {
    "text": "modules because of the risk that a bug in that module can crash the kernel if",
    "start": "607959",
    "end": "613720"
  },
  {
    "text": "the kernel crashes it brings down your machine it's not like an application",
    "start": "613720",
    "end": "618760"
  },
  {
    "text": "crashing with ef the program as it's loaded into the kernel goes through a",
    "start": "618760",
    "end": "624680"
  },
  {
    "text": "verification process and this analyzes all the possible paths that that program",
    "start": "624680",
    "end": "630480"
  },
  {
    "text": "can take and make sure that it can't crash the kernel it's going to check that all memory access is safe it's",
    "start": "630480",
    "end": "636959"
  },
  {
    "text": "going to check that it will run to completion it's going to check that it's only uh accessing helper functions that",
    "start": "636959",
    "end": "643760"
  },
  {
    "text": "it's allowed to access in the context it's operating in so for example if you're looking at a network packet",
    "start": "643760",
    "end": "650279"
  },
  {
    "text": "you're allowed to look at that Network packet but you won't have any process information for",
    "start": "650279",
    "end": "657920"
  },
  {
    "text": "example when we thinking about the performance of this it's important to note that after the program has been",
    "start": "657920",
    "end": "664720"
  },
  {
    "text": "verified it's going to get jit compiled to Native machine code instructions so the kernel is executing",
    "start": "664720",
    "end": "673600"
  },
  {
    "text": "some instructions as it normally does the event",
    "start": "673600",
    "end": "678639"
  },
  {
    "text": "happens it calls the ebpf program which means it's just executing some more",
    "start": "678639",
    "end": "683680"
  },
  {
    "text": "machine code native instructions but without any kind of context switching it's just Cur code that's getting called",
    "start": "683680",
    "end": "691480"
  },
  {
    "text": "like a function in the kernel so that means we get to customize",
    "start": "691480",
    "end": "696920"
  },
  {
    "text": "the behavior of our machine and we don't have to have any kernel and user space",
    "start": "696920",
    "end": "702120"
  },
  {
    "text": "transitions it's surprisingly hard to find any data about how expensive it is to transition between the kernel and",
    "start": "702120",
    "end": "708839"
  },
  {
    "text": "user space but I think anybody who's done uh kind of performance aware um",
    "start": "708839",
    "end": "716079"
  },
  {
    "text": "tuning will know that this is something that can be really EXP expensive so when we",
    "start": "716079",
    "end": "723120"
  },
  {
    "text": "uh don't know why that's animated so when we have things like that um XDP",
    "start": "723120",
    "end": "729079"
  },
  {
    "text": "program that I just showed you that uh dropped the Ping",
    "start": "729079",
    "end": "734880"
  },
  {
    "text": "packets that particular example happens before the as a network packet arrives",
    "start": "735160",
    "end": "741639"
  },
  {
    "text": "on the machine and it happens before the Kel has even started to process that packet literally getting the packet as",
    "start": "741639",
    "end": "749000"
  },
  {
    "text": "it arrives on the wire in fact some network cards support what's called",
    "start": "749000",
    "end": "754279"
  },
  {
    "text": "Hardware offload where you're allowed to run the XDP program on a network card so",
    "start": "754279",
    "end": "760639"
  },
  {
    "text": "the uh program can be run and you can customize the behavior of the networking",
    "start": "760639",
    "end": "766600"
  },
  {
    "text": "stack without even touching the networking stack doing it on the network card so we're talking about running",
    "start": "766600",
    "end": "774240"
  },
  {
    "text": "custom code on network packets they don't just have to be XDP there's all sorts of places is within the networking",
    "start": "774240",
    "end": "780839"
  },
  {
    "text": "stack that we can attach ebpf programs oh I've left some animations in here so",
    "start": "780839",
    "end": "789360"
  },
  {
    "text": "um it's triggered immediately by the packet so we don't have to wait for",
    "start": "789360",
    "end": "795000"
  },
  {
    "text": "anything like polling from user space we're just literally going to receive",
    "start": "795000",
    "end": "800199"
  },
  {
    "text": "the packet at this event and then start executing native machine code instructions there's no polling no CPU",
    "start": "800199",
    "end": "808480"
  },
  {
    "text": "wasted kind of checking to see if there's an event that we want to deal with the packet the network packet is",
    "start": "808480",
    "end": "816360"
  },
  {
    "text": "sitting in kernal memory and we can process it using ebpf where it is in kernel memory",
    "start": "816360",
    "end": "823639"
  },
  {
    "text": "there's no need to copy it into user space so if you saw Allan's talk earlier this morning he mentioned how memory",
    "start": "823639",
    "end": "830120"
  },
  {
    "text": "copies can be really expensive this allows us ebpf allows us to access",
    "start": "830120",
    "end": "835399"
  },
  {
    "text": "kernel memory without copying it and another interesting thing that we",
    "start": "835399",
    "end": "841759"
  },
  {
    "text": "can do with ebpf is um we have these data structures called maps and those",
    "start": "841759",
    "end": "847519"
  },
  {
    "text": "Maps some of them are designed to be per CPU essentially per core so if you've",
    "start": "847519",
    "end": "853920"
  },
  {
    "text": "got a core executing machine code instructions and it has access to one of",
    "start": "853920",
    "end": "859560"
  },
  {
    "text": "these per CPU Maps you haven't got any locking to worry about because the",
    "start": "859560",
    "end": "865040"
  },
  {
    "text": "kernel is the thing that manages locking so if your core is just executing instructions there's nothing else that",
    "start": "865040",
    "end": "871360"
  },
  {
    "text": "can get in the way and access this per CPU ebpf map so this can be super",
    "start": "871360",
    "end": "877639"
  },
  {
    "text": "efficient for Network processing and in fact there are lots",
    "start": "877639",
    "end": "882720"
  },
  {
    "text": "and lots of examples of ebpf based load balancers for example this is an example",
    "start": "882720",
    "end": "888519"
  },
  {
    "text": "of a load pal load balancer project called poly Cube um where they've",
    "start": "888519",
    "end": "894160"
  },
  {
    "text": "compared uh couple of different network hooks XDP and something called TC which",
    "start": "894160",
    "end": "899959"
  },
  {
    "text": "is part of the network stack they've also included in this graph katran which",
    "start": "899959",
    "end": "905199"
  },
  {
    "text": "is one of the really early uses of ebpf it's a load balancer created by well",
    "start": "905199",
    "end": "911320"
  },
  {
    "text": "meta it was Facebook at the time um interestingly Facebook meta have been",
    "start": "911320",
    "end": "919199"
  },
  {
    "text": "using ebpf to handle every single Network packet whether you've been you know using Instagram or Whatsapp or",
    "start": "919199",
    "end": "926120"
  },
  {
    "text": "Facebook itself every single packet has been processed by ebpf since I think",
    "start": "926120",
    "end": "931519"
  },
  {
    "text": "it's 2017 so fun fact another example of improved Network",
    "start": "931519",
    "end": "938959"
  },
  {
    "text": "performance this is a company called cesam they replaced their ipvs based",
    "start": "938959",
    "end": "945000"
  },
  {
    "text": "load balancer with an XDP load balancer you can see this is where they did a performance test and then switched the",
    "start": "945000",
    "end": "951199"
  },
  {
    "text": "ipvs one back on again and uh got much better throughput with xtp processing",
    "start": "951199",
    "end": "960240"
  },
  {
    "text": "EF also allows us to improve performance specifically in the container networking",
    "start": "960440",
    "end": "966560"
  },
  {
    "text": "world because of the way that container networking works so in a container environment like",
    "start": "966560",
    "end": "974319"
  },
  {
    "text": "kubernetes I'll use kubernetes as this example where we're running our",
    "start": "974319",
    "end": "979920"
  },
  {
    "text": "applications in pods or in containers in pods and we usually give our pods their",
    "start": "979920",
    "end": "986720"
  },
  {
    "text": "own network Nam space essentially we're building a sort of",
    "start": "986720",
    "end": "991920"
  },
  {
    "text": "isolating the networking from the Pod from the networking on the host",
    "start": "991920",
    "end": "997160"
  },
  {
    "text": "machine and the network name space in the host and in the Pod are connected by a virtual ethernet connection so a",
    "start": "997160",
    "end": "1005120"
  },
  {
    "text": "packet that arrives destined for that application arrives through the network interface to the host traverses the",
    "start": "1005120",
    "end": "1012120"
  },
  {
    "text": "whole networking stack on the host Network namespace then crosses the virtual",
    "start": "1012120",
    "end": "1017639"
  },
  {
    "text": "ethernet connection into the Pod name space and then goes through another round of network stack processing before",
    "start": "1017639",
    "end": "1024400"
  },
  {
    "text": "it finally reaches the application and with ebpf one of the things that we did in selum was to",
    "start": "1024400",
    "end": "1031678"
  },
  {
    "text": "realize we can bypass a whole lot of that by looking at packets as they arrive realizing what pod they're",
    "start": "1031679",
    "end": "1039000"
  },
  {
    "text": "destined for and rooting it straight into the Pod network name space and that results in significant",
    "start": "1039000",
    "end": "1047120"
  },
  {
    "text": "improvements not just also Calico in their ebpf mode you can see significant",
    "start": "1047120",
    "end": "1052320"
  },
  {
    "text": "improvements by using an ebpf versus the kind of Legacy IP tables based uh",
    "start": "1052320",
    "end": "1060760"
  },
  {
    "text": "routing uh another performance graph here uh so with psyllium we have some",
    "start": "1060760",
    "end": "1068640"
  },
  {
    "text": "XDP mode and some TCP mode uh forwarding you can see that the available CPU",
    "start": "1068640",
    "end": "1074720"
  },
  {
    "text": "capacity is much higher when we're using XD CP or TC ebpf than if we're",
    "start": "1074720",
    "end": "1083600"
  },
  {
    "text": "using Cube proxy and in fact if you're running kubernetes you can use celium to",
    "start": "1083600",
    "end": "1089120"
  },
  {
    "text": "replace Cube proxy Al together and get much higher throughput or free up some",
    "start": "1089120",
    "end": "1095919"
  },
  {
    "text": "CPU and this is borne out by kind of real life examples this is a celium user",
    "start": "1095919",
    "end": "1102159"
  },
  {
    "text": "called trendyol who published a blog post about the amazing performance improvements that they saw and",
    "start": "1102159",
    "end": "1108080"
  },
  {
    "text": "particularly uh much less CPU usage so if we're not",
    "start": "1108080",
    "end": "1113440"
  },
  {
    "text": "using the CPU for networking we can either use it for something else or just be more cost",
    "start": "1113440",
    "end": "1119919"
  },
  {
    "text": "effective so if we think about performance one of the ways we can use",
    "start": "1119919",
    "end": "1126360"
  },
  {
    "text": "ebpf is to measure performance has anybody here come across the name Bren",
    "start": "1126360",
    "end": "1131679"
  },
  {
    "text": "Brendan Greg few hands going up so Brendan was one of the people who really popularized",
    "start": "1131679",
    "end": "1139679"
  },
  {
    "text": "using ebpf for performance tracing he was at Netflix at the time so dealing",
    "start": "1139679",
    "end": "1145039"
  },
  {
    "text": "with these massively scale deployments and um doing a lot of Performance Tuning",
    "start": "1145039",
    "end": "1151280"
  },
  {
    "text": "you know if you're dealing with thousands and thousands of machines then even a small per machine impr",
    "start": "1151280",
    "end": "1156799"
  },
  {
    "text": "Improvement in performance can massively reduce your costs or or reduce your latency or or all kinds of performance",
    "start": "1156799",
    "end": "1164840"
  },
  {
    "text": "benefits so Brenton was really involved with a project called BC BC and BCC",
    "start": "1164840",
    "end": "1170400"
  },
  {
    "text": "created a huge array of BPF based",
    "start": "1170400",
    "end": "1176320"
  },
  {
    "text": "performance tracing tools when I first saw this diagram I thought what the hell is this it's frightening right you don't",
    "start": "1176320",
    "end": "1184120"
  },
  {
    "text": "need to know what all the things are the point is that for every part of the",
    "start": "1184120",
    "end": "1189600"
  },
  {
    "text": "system there are performance measurements Tools in in the BCC project",
    "start": "1189600",
    "end": "1195520"
  },
  {
    "text": "that you can use to measure performance and potentially spot bottlenecks and and",
    "start": "1195520",
    "end": "1201640"
  },
  {
    "text": "performance issues so whether we're talking about the way the far systems",
    "start": "1201640",
    "end": "1207200"
  },
  {
    "text": "working the way our applications are working o kills you name it there is a",
    "start": "1207200",
    "end": "1212919"
  },
  {
    "text": "performance measurement tool written in ebpf to allow you to to measure",
    "start": "1212919",
    "end": "1218080"
  },
  {
    "text": "it Brendan did a talk at ebpf Summit last year where he was really his",
    "start": "1218080",
    "end": "1225039"
  },
  {
    "text": "proposition is that you should be able to spot a performance issue on a Monday and uh fix it by Friday but his real um",
    "start": "1225039",
    "end": "1234480"
  },
  {
    "text": "Pitch here I think is that if you can spot performance issues and address them",
    "start": "1234480",
    "end": "1241080"
  },
  {
    "text": "then it has a ton of benefits including uh environmental benefits just simply",
    "start": "1241080",
    "end": "1246760"
  },
  {
    "text": "using less energy one of the ways that he was really uh emphasizing you know we can",
    "start": "1246760",
    "end": "1255159"
  },
  {
    "text": "find performance bottlenecks is with flame graphs and essentially saying how",
    "start": "1255159",
    "end": "1260640"
  },
  {
    "text": "ebpf is probably the most efficient way we have today to gather this kind of flame graph and spot those parts of our",
    "start": "1260640",
    "end": "1268080"
  },
  {
    "text": "applications that are really causing us to burn",
    "start": "1268080",
    "end": "1273320"
  },
  {
    "text": "CPU and uh I think a really important quote from him is that ebpf is essential",
    "start": "1274279",
    "end": "1280360"
  },
  {
    "text": "for this kind of performance testing and you know he's someone who knows he's done this at scale",
    "start": "1280360",
    "end": "1288399"
  },
  {
    "text": "so I want to come back to thinking about how ebpf is powerful in a container",
    "start": "1288640",
    "end": "1294799"
  },
  {
    "text": "environment for things other than or for reasons other than just",
    "start": "1294799",
    "end": "1300120"
  },
  {
    "text": "networking when we run in a cloud native environment again I'll I'll assume we're",
    "start": "1300120",
    "end": "1305799"
  },
  {
    "text": "using kubernetes but however we're running our",
    "start": "1305799",
    "end": "1311000"
  },
  {
    "text": "containers doesn't matter how many containers you're running on a given virtual machine or bare metal machine if",
    "start": "1311559",
    "end": "1318080"
  },
  {
    "text": "you're running on bare metal there is only one kernel your containers are only",
    "start": "1318080",
    "end": "1324000"
  },
  {
    "text": "doing the user space part they're all sharing a kernel from the",
    "start": "1324000",
    "end": "1329360"
  },
  {
    "text": "host so whenever our applications in their containers are doing interesting",
    "start": "1329360",
    "end": "1334720"
  },
  {
    "text": "things like networking or accessing files or allocating memory or whenever",
    "start": "1334720",
    "end": "1339960"
  },
  {
    "text": "kubernetes is creating new containers for new pods that kernel on that host is",
    "start": "1339960",
    "end": "1346720"
  },
  {
    "text": "involved so the kernel is aware of everything that's happening",
    "start": "1346720",
    "end": "1351799"
  },
  {
    "text": "in all our applications and all our pods and that means if we instrument the",
    "start": "1351799",
    "end": "1357559"
  },
  {
    "text": "kernel using ebpf programs that instrumentation can be aware of",
    "start": "1357559",
    "end": "1362640"
  },
  {
    "text": "everything that's happening across all of our pods and all of our applications we only need to instrument each node to",
    "start": "1362640",
    "end": "1370600"
  },
  {
    "text": "get visibility and influence over what's happening in all of our",
    "start": "1370600",
    "end": "1376240"
  },
  {
    "text": "applications and we don't have to change the application or reconfigure our",
    "start": "1376240",
    "end": "1383159"
  },
  {
    "text": "application as you saw for example with the Ping uh",
    "start": "1383159",
    "end": "1388400"
  },
  {
    "text": "example the Ping carried on running but we could change the way the underlying kernel behaved without having to change",
    "start": "1388400",
    "end": "1396240"
  },
  {
    "text": "the application the application can continue running that process can continue running we Chang the kernel",
    "start": "1396240",
    "end": "1403000"
  },
  {
    "text": "underneath it with evf we don't have to change anything about the app we don't have to reconfigure it we don't even",
    "start": "1403000",
    "end": "1409760"
  },
  {
    "text": "have to restart it it is visible and affected by",
    "start": "1409760",
    "end": "1415279"
  },
  {
    "text": "ebpf so this leads us to this great cartoon this is pretty old now I think Nathan did this",
    "start": "1415279",
    "end": "1421720"
  },
  {
    "text": "probably probably six seven years ago now um but I think it's a really uh",
    "start": "1421720",
    "end": "1427919"
  },
  {
    "text": "really nice Summary of why ebpf is a really great way for instrumenting",
    "start": "1427919",
    "end": "1434440"
  },
  {
    "text": "containerized applications so the alternative is sidecars with a sidecar we take our",
    "start": "1434440",
    "end": "1444279"
  },
  {
    "text": "containerized app well we take our pod and we inject a container into that pod",
    "start": "1444279",
    "end": "1450760"
  },
  {
    "text": "to do whatever instrumentation we want whether it's tracing like in this example or security tooling or service",
    "start": "1450760",
    "end": "1458000"
  },
  {
    "text": "mesh for quite a while now we've had lots of tools that use the sidec car",
    "start": "1458000",
    "end": "1463159"
  },
  {
    "text": "model to instrument applications and you need a side car",
    "start": "1463159",
    "end": "1470320"
  },
  {
    "text": "inside every pod one of the things we did with Cloud native with containers is",
    "start": "1470320",
    "end": "1476919"
  },
  {
    "text": "we deliberately isolate our applications from each other and if we put them into",
    "start": "1476919",
    "end": "1482039"
  },
  {
    "text": "pods so that they kind of don't have visibility over each other that means you have to put a sidecar inside every",
    "start": "1482039",
    "end": "1489640"
  },
  {
    "text": "pod if you want a user space application to have visibility and influence over",
    "start": "1489640",
    "end": "1495480"
  },
  {
    "text": "that pod and to get there we have to have some yaml that yaml could be automated maybe",
    "start": "1495480",
    "end": "1504000"
  },
  {
    "text": "it's created during cicd maybe it's created during a web hook but something",
    "start": "1504000",
    "end": "1510559"
  },
  {
    "text": "has to create the yaml to reconfigure this application we have to restart the",
    "start": "1510559",
    "end": "1515720"
  },
  {
    "text": "Pod to get the side car into each of our applications whereas if we used",
    "start": "1515720",
    "end": "1523919"
  },
  {
    "text": "ebpf we don't have to change the running pod we can just instrument the kernel underneath and we get visibility over",
    "start": "1523919",
    "end": "1531159"
  },
  {
    "text": "all of the pods and that means if we get some kind of malicious activity whether it's",
    "start": "1531159",
    "end": "1537799"
  },
  {
    "text": "running on the host or running inside a pod it's still going to be visible to",
    "start": "1537799",
    "end": "1544399"
  },
  {
    "text": "the kernel to those ebpf programs if I am a malicious actor and I find some way",
    "start": "1544399",
    "end": "1550320"
  },
  {
    "text": "of running a pod or running an executable on your host machine I'm probably not going to turn on your",
    "start": "1550320",
    "end": "1555840"
  },
  {
    "text": "security tooling on my malicious pod but if you're using ebpf based tools you",
    "start": "1555840",
    "end": "1562200"
  },
  {
    "text": "will see my malicious activity and using or avoiding side cars",
    "start": "1562200",
    "end": "1569960"
  },
  {
    "text": "also allows us to reduce resource usage so if you have a sidecar in every",
    "start": "1569960",
    "end": "1577760"
  },
  {
    "text": "pod they probably have some kind of configuration information think for example about a um a network proxy for a",
    "start": "1577760",
    "end": "1586559"
  },
  {
    "text": "a service mesh every side car has got proxy or routing",
    "start": "1586559",
    "end": "1592640"
  },
  {
    "text": "information and you need a copy of that in every single pod if we're allowed to share that",
    "start": "1592640",
    "end": "1600120"
  },
  {
    "text": "information if we only have one instance of uh that configuration per node rather",
    "start": "1600120",
    "end": "1606760"
  },
  {
    "text": "than sitting in every single pod that's going to be reduced resource usage and",
    "start": "1606760",
    "end": "1612480"
  },
  {
    "text": "we don't have to keep updating it so remember that pods are isolated from",
    "start": "1612480",
    "end": "1617640"
  },
  {
    "text": "each other so so if we want to change the configuration inside sidecar based tooling we have to go update it inside",
    "start": "1617640",
    "end": "1624600"
  },
  {
    "text": "every single pod typically so ebpf has been able",
    "start": "1624600",
    "end": "1632120"
  },
  {
    "text": "to enable or it's one of the ways that we can enable service meshes that don't",
    "start": "1632120",
    "end": "1637880"
  },
  {
    "text": "need sidecar pods and this can be really efficient",
    "start": "1637880",
    "end": "1643720"
  },
  {
    "text": "so if you have a proxy inside every or inside a pod then every single packet",
    "start": "1643720",
    "end": "1651640"
  },
  {
    "text": "has to flow through that proxy so remember before I showed the diagram",
    "start": "1651640",
    "end": "1657360"
  },
  {
    "text": "where we saw a network packet going through the networking stack in the host and then going through the networking",
    "start": "1657360",
    "end": "1662559"
  },
  {
    "text": "stack in the Pod namespace if we add a proxy in there it's got to go through",
    "start": "1662559",
    "end": "1667799"
  },
  {
    "text": "the Pod Network namespace three times every single packet has to go through that",
    "start": "1667799",
    "end": "1673720"
  },
  {
    "text": "flow whereas if we can use something like ebpf to root",
    "start": "1673720",
    "end": "1679519"
  },
  {
    "text": "packets we have the option to well a we don't have a copy of the network stack",
    "start": "1679519",
    "end": "1685519"
  },
  {
    "text": "for the proxy inside every pod and B we can make decisions about whether it",
    "start": "1685519",
    "end": "1691240"
  },
  {
    "text": "needs to go through the layer 7even proxy we only need to go through a proxy where layer 7 termination is required",
    "start": "1691240",
    "end": "1698080"
  },
  {
    "text": "for example if we were doing things like mtls termination not every packet needs to go",
    "start": "1698080",
    "end": "1704200"
  },
  {
    "text": "through a layer 7even proxy and we've seen some really uh you",
    "start": "1704200",
    "end": "1709880"
  },
  {
    "text": "know good performance improvements through avoiding sidec cars ebpf is not",
    "start": "1709880",
    "end": "1715679"
  },
  {
    "text": "the only way to do this there's ISO has their ambient mesh uh option but selim's",
    "start": "1715679",
    "end": "1722200"
  },
  {
    "text": "ebpf based service mesh allows us to do this using ebpf we can see just removing",
    "start": "1722200",
    "end": "1728799"
  },
  {
    "text": "those side cars can reduce costs up to 90% and it makes things a lot easier to",
    "start": "1728799",
    "end": "1735159"
  },
  {
    "text": "manage so I mentioned a little bit about",
    "start": "1735159",
    "end": "1740960"
  },
  {
    "text": "security tools and how we can use ebpf for high performance",
    "start": "1740960",
    "end": "1747519"
  },
  {
    "text": "security as you know we're talking about being able to observe everything that's involved with Hardware so files and",
    "start": "1747600",
    "end": "1754360"
  },
  {
    "text": "networking and memory and the kernel is also managing processes and things like permissions and",
    "start": "1754360",
    "end": "1760200"
  },
  {
    "text": "Privileges and those are really the things that are interesting for security",
    "start": "1760200",
    "end": "1766480"
  },
  {
    "text": "purposes if we want to spot malicious activity it probably involves malicious activity uh malicious",
    "start": "1766480",
    "end": "1774840"
  },
  {
    "text": "access to a file malicious network activity some kind of you know memory",
    "start": "1774840",
    "end": "1781960"
  },
  {
    "text": "overwrites uh or privilege escalation all of those things involve the kernel",
    "start": "1781960",
    "end": "1787480"
  },
  {
    "text": "so if we spot those things using ebpf that's a really great basis for runtime",
    "start": "1787480",
    "end": "1792840"
  },
  {
    "text": "security tooling so if you think about the difference between just obser in events",
    "start": "1792840",
    "end": "1799120"
  },
  {
    "text": "and security observability the difference is that we have a policy so we might use ebpf to",
    "start": "1799120",
    "end": "1806399"
  },
  {
    "text": "spot a set of events and then we need to compare those events against a policy to",
    "start": "1806399",
    "end": "1811600"
  },
  {
    "text": "decide whether or not they're legitimate or suspicious and then if we think it",
    "start": "1811600",
    "end": "1817559"
  },
  {
    "text": "looks suspicious or or malicious we do something with that event you know we",
    "start": "1817559",
    "end": "1822760"
  },
  {
    "text": "might log it we might send an alert we might uh you know have some kind of metrics we might want a user or an",
    "start": "1822760",
    "end": "1831399"
  },
  {
    "text": "operator to come along and look at those events and go why is this malicious activity",
    "start": "1831399",
    "end": "1838840"
  },
  {
    "text": "happening so one example of an ebpf based uh tool for security observability",
    "start": "1840120",
    "end": "1846000"
  },
  {
    "text": "is Falco this is a another cncf project and it has two modes it has a",
    "start": "1846000",
    "end": "1853240"
  },
  {
    "text": "kernel module mode or an ebpf mode that can detect security relevant events and",
    "start": "1853240",
    "end": "1860840"
  },
  {
    "text": "pass those to user space where they're compared against a policy so uh the",
    "start": "1860840",
    "end": "1866760"
  },
  {
    "text": "actual filtering of events is going to happen in user space with file code so",
    "start": "1866760",
    "end": "1872159"
  },
  {
    "text": "we can collect the events in the kernel and then we compare them against a policy using some kind of user space",
    "start": "1872159",
    "end": "1879360"
  },
  {
    "text": "rules engine and then decide what to do with that information like create an alert or log it or send it to a Sim",
    "start": "1879360",
    "end": "1889639"
  },
  {
    "text": "I want to talk a little bit about tetragon which is a sub project in cyan where what we're doing that's",
    "start": "1889639",
    "end": "1897840"
  },
  {
    "text": "different from Falco is filtering those events so comparing those events against",
    "start": "1897840",
    "end": "1903519"
  },
  {
    "text": "the policy inside the kernel so we can massively reduce the number of events",
    "start": "1903519",
    "end": "1909840"
  },
  {
    "text": "that are actually getting sent from the kernel to user",
    "start": "1909840",
    "end": "1915120"
  },
  {
    "text": "space so uh let's take a look at an example uh here so I've got a few pods",
    "start": "1915120",
    "end": "1922799"
  },
  {
    "text": "hopefully running in my namespace far far away and I'm running tetragon in this",
    "start": "1922799",
    "end": "1929720"
  },
  {
    "text": "top screen by default tetragon will always log uh process start and exit",
    "start": "1929720",
    "end": "1936679"
  },
  {
    "text": "events so if I do something like exec into my xwing I do something like list",
    "start": "1936679",
    "end": "1945240"
  },
  {
    "text": "files um I get the the output but I've also got a couple of logs here for the",
    "start": "1945240",
    "end": "1950880"
  },
  {
    "text": "process start and stop but I've also got um a policy here",
    "start": "1950880",
    "end": "1958320"
  },
  {
    "text": "that's called file monitoring this is quite a complicated policy so I'm not going to go through it in lots of detail",
    "start": "1958320",
    "end": "1965679"
  },
  {
    "text": "but essentially this is monitoring access to a set of sensitive files and",
    "start": "1965679",
    "end": "1972080"
  },
  {
    "text": "directories and it's going to say if uh if I spot this kind of access I want",
    "start": "1972080",
    "end": "1978840"
  },
  {
    "text": "some additional events emitted so if I go back to my output and I do something",
    "start": "1978840",
    "end": "1986559"
  },
  {
    "text": "like cat the password file we can see some read events so what",
    "start": "1986559",
    "end": "1994120"
  },
  {
    "text": "I'm showing here is just like a very compact view of what teton's Gathering it actually gathers a huge amount of",
    "start": "1994120",
    "end": "2000039"
  },
  {
    "text": "data about what the process was what the container was what the um kubernetes",
    "start": "2000039",
    "end": "2005880"
  },
  {
    "text": "identities were when it happened when the executable that created it was",
    "start": "2005880",
    "end": "2011320"
  },
  {
    "text": "started what the process hierarchy is there's absolutely tons of information",
    "start": "2011320",
    "end": "2016519"
  },
  {
    "text": "that could then be sent to a Sim to analyze wait a minute why was somebody",
    "start": "2016519",
    "end": "2022159"
  },
  {
    "text": "reading the password file later so being able",
    "start": "2022159",
    "end": "2028760"
  },
  {
    "text": "to um exercise that policy and filter events inside the",
    "start": "2028760",
    "end": "2034600"
  },
  {
    "text": "kernel is dramatically improved in performance so on the left hand side",
    "start": "2034600",
    "end": "2041240"
  },
  {
    "text": "we're basically doing a benchmark here with um tetragon or another ebpf based",
    "start": "2041240",
    "end": "2047880"
  },
  {
    "text": "solution I'll I'll let you imagine what the the other one is so we can see that",
    "start": "2047880",
    "end": "2053358"
  },
  {
    "text": "um you know we're able to use significantly less CPU to monitor",
    "start": "2053359",
    "end": "2062079"
  },
  {
    "text": "access to sensitive files okay",
    "start": "2062079",
    "end": "2068240"
  },
  {
    "text": "so that's all well and good spotting these security events but can we do high",
    "start": "2068240",
    "end": "2074560"
  },
  {
    "text": "performance security enforcement with ebpf can we stop these malicious",
    "start": "2074560",
    "end": "2080638"
  },
  {
    "text": "activities from actually happening so",
    "start": "2080639",
    "end": "2086158"
  },
  {
    "text": "traditionally with kernel-based security tools you might spot these events",
    "start": "2086159",
    "end": "2092040"
  },
  {
    "text": "happening in the kernel and you send the event information to user space user space",
    "start": "2092040",
    "end": "2099040"
  },
  {
    "text": "looks at it Compares it against a policy realizes this looks suspicious and in an",
    "start": "2099040",
    "end": "2105280"
  },
  {
    "text": "enforcement mode it would do something like kill the process now unfortunately",
    "start": "2105280",
    "end": "2112400"
  },
  {
    "text": "there is time between spotting that malicious event from occurring or",
    "start": "2112400",
    "end": "2117839"
  },
  {
    "text": "spotting that it occurred and actually killing the process and that time might be enough",
    "start": "2117839",
    "end": "2125440"
  },
  {
    "text": "for damage to be done for malicious activity to have happened maybe you know",
    "start": "2125440",
    "end": "2130920"
  },
  {
    "text": "data to be exfiltrated certainly if the thing you were looking at was a malicious network activity it already",
    "start": "2130920",
    "end": "2138320"
  },
  {
    "text": "happened by the time you killed the process so with tetron what we can actually do because we have a team of",
    "start": "2138320",
    "end": "2146240"
  },
  {
    "text": "incredibly smart kernel Engineers who know how to do this stuff we can",
    "start": "2146240",
    "end": "2151359"
  },
  {
    "text": "synchronously kill the process from within the kernel in enforcement mode so this this",
    "start": "2151359",
    "end": "2157800"
  },
  {
    "text": "is optional but it means you can prevent that malicious activity from happening",
    "start": "2157800",
    "end": "2164119"
  },
  {
    "text": "at all and still getting this incredibly low overhead um ability to monitor these",
    "start": "2164119",
    "end": "2171960"
  },
  {
    "text": "events so for example let's let's I've got",
    "start": "2171960",
    "end": "2177400"
  },
  {
    "text": "another security policy in this cluster and this one's a little bit easier to to",
    "start": "2177400",
    "end": "2182880"
  },
  {
    "text": "read it's looking at TCP connections and it's basically saying if if the",
    "start": "2182880",
    "end": "2188040"
  },
  {
    "text": "connection is not to one of the addresses inside the cluster those those IP addresses are all",
    "start": "2188040",
    "end": "2194319"
  },
  {
    "text": "inside my cluster if it's outside of those then we're going to kill the",
    "start": "2194319",
    "end": "2199720"
  },
  {
    "text": "process so oops let's bring my touch gon logs back up",
    "start": "2199720",
    "end": "2205720"
  },
  {
    "text": "again and let's first of all try curling to the Death Star service",
    "start": "2205720",
    "end": "2211960"
  },
  {
    "text": "now the Death Star is INS actually let's uh show you the Sur so I have a death",
    "start": "2211960",
    "end": "2219079"
  },
  {
    "text": "star service inside my cluster and if I from my",
    "start": "2219079",
    "end": "2225160"
  },
  {
    "text": "xwing Cur to the death star's API then we should see that activity",
    "start": "2225160",
    "end": "2232640"
  },
  {
    "text": "happened in fact we're also seeing that that caused a read to the password file um so we saw the curl activity",
    "start": "2232640",
    "end": "2240359"
  },
  {
    "text": "happening but because it was inside the cluster that's fine it's not considered malicious but if I try to PE to",
    "start": "2240359",
    "end": "2248160"
  },
  {
    "text": "something outside the cluster cross your fingers for the demo Gods yeah",
    "start": "2248160",
    "end": "2255400"
  },
  {
    "text": "so that was prevented we didn't see any response",
    "start": "2255400",
    "end": "2261599"
  },
  {
    "text": "because we never got any response we saw the connect attempt to an external",
    "start": "2261599",
    "end": "2267640"
  },
  {
    "text": "address and that connect attempt was killed that process was killed",
    "start": "2267640",
    "end": "2272960"
  },
  {
    "text": "synchronously within the attempt to make that TCP connect call",
    "start": "2272960",
    "end": "2279160"
  },
  {
    "text": "which is super powerful and awesome so I hope I've shown a variety",
    "start": "2279160",
    "end": "2287720"
  },
  {
    "text": "of examples of how ebpf can let us do some incredibly powerful things in a lot of cases dramatically",
    "start": "2287720",
    "end": "2296079"
  },
  {
    "text": "improving performance and giving us a level of kind of control and um",
    "start": "2296079",
    "end": "2302599"
  },
  {
    "text": "customization that just hasn't really been possible before without ebpf so there are some books one of",
    "start": "2302599",
    "end": "2310880"
  },
  {
    "text": "which I wrote In fact two of which I wrote um that you can download from the iso valant website if you want to learn",
    "start": "2310880",
    "end": "2317079"
  },
  {
    "text": "more there's also some nice Labs if you want to kind of play with some of these",
    "start": "2317079",
    "end": "2323520"
  },
  {
    "text": "tools uh on is surveillent.com laabs and of course you can find out lots more",
    "start": "2323520",
    "end": "2329119"
  },
  {
    "text": "about ebpf and the San project from their respective websites everything",
    "start": "2329119",
    "end": "2335079"
  },
  {
    "text": "I've shown you is open source by the way please vote and leave feedback and give",
    "start": "2335079",
    "end": "2341359"
  },
  {
    "text": "me a round of",
    "start": "2341359",
    "end": "2343838"
  },
  {
    "text": "applause and I think we have about 10 minutes if there are some questions I hope there are some questions because I",
    "start": "2349400",
    "end": "2354560"
  },
  {
    "text": "like questions I think there's a question",
    "start": "2354560",
    "end": "2360160"
  },
  {
    "text": "here is there a mic going yes",
    "start": "2360160",
    "end": "2364720"
  },
  {
    "text": "so as the ebpf programs are in the kernel uh if there is multiple user space programs that tries to load an ebf",
    "start": "2369880",
    "end": "2378119"
  },
  {
    "text": "program can this be a problem of interactions because I know there are some hooks like XDP that does not like",
    "start": "2378119",
    "end": "2385040"
  },
  {
    "text": "having being used by multiple programs at the same time yeah yeah the the",
    "start": "2385040",
    "end": "2390079"
  },
  {
    "text": "answer is really it depends it depends on on the hook on the attachment type",
    "start": "2390079",
    "end": "2395160"
  },
  {
    "text": "yeah because for example if I'm in my KU is cluster I'm using celium maybe uh I",
    "start": "2395160",
    "end": "2401160"
  },
  {
    "text": "want to debug a service I'm going to maybe I don't know use BPF trace and",
    "start": "2401160",
    "end": "2407240"
  },
  {
    "text": "yeah maybe it can create some interactions also if for example I'm",
    "start": "2407240",
    "end": "2412520"
  },
  {
    "text": "using celium but I want also to use I don't know an operator to do something specific that create services that also",
    "start": "2412520",
    "end": "2419480"
  },
  {
    "text": "use the BPF for their own stuff well if Z not designed together",
    "start": "2419480",
    "end": "2426240"
  },
  {
    "text": "they it might create Bing directions yeah um so I think for the benefit of",
    "start": "2426240",
    "end": "2431560"
  },
  {
    "text": "the recording I'm supposed to repeat the question so uh really this is about if",
    "start": "2431560",
    "end": "2437240"
  },
  {
    "text": "you have multiple user space programs or agents loading BPF programs can they get",
    "start": "2437240",
    "end": "2444480"
  },
  {
    "text": "in each other's way and the answer is yes and it kind of depends on the attachment point um so and it's also an",
    "start": "2444480",
    "end": "2453800"
  },
  {
    "text": "area that the kernel Community is looking at so the problem is in some",
    "start": "2453800",
    "end": "2459119"
  },
  {
    "text": "attachment points you can't have more than one program attached uh there is some work being",
    "start": "2459119",
    "end": "2465760"
  },
  {
    "text": "looked at around prioritizing different um different programs sort of having some kind of ordering at the moment it",
    "start": "2465760",
    "end": "2472839"
  },
  {
    "text": "in the places where you are allowed multiple programs to be attached it's",
    "start": "2472839",
    "end": "2478720"
  },
  {
    "text": "either first in executed or last in first executed but unless you know which order they",
    "start": "2478720",
    "end": "2485079"
  },
  {
    "text": "were loaded you wouldn't know which order they'll get processed in um yeah it's it's something",
    "start": "2485079",
    "end": "2492160"
  },
  {
    "text": "that has kind of become more of an issue recently because of the popularity of",
    "start": "2492160",
    "end": "2497200"
  },
  {
    "text": "ebpf and the fact that there are more and more ebpf based programs uh or ebpf",
    "start": "2497200",
    "end": "2502480"
  },
  {
    "text": "based tools um I I wouldn't say it's something that",
    "start": "2502480",
    "end": "2508599"
  },
  {
    "text": "we see a lot in the field yet because people typically are using let's say",
    "start": "2508599",
    "end": "2514680"
  },
  {
    "text": "they're using syum for networking and they'll be using selan based tools for",
    "start": "2514680",
    "end": "2519960"
  },
  {
    "text": "diagnosing networking problems and then maybe they're using yeah BPF trace or or",
    "start": "2519960",
    "end": "2525640"
  },
  {
    "text": "pixie for some other performance measurements and they're attached to different hook points so it's not really a problem but we have seen",
    "start": "2525640",
    "end": "2533960"
  },
  {
    "text": "occasionally yeah concerns where you can't have more than one thing attached to a particular point",
    "start": "2533960",
    "end": "2541680"
  },
  {
    "text": "yeah so this was an another example of um well I'm not quite sure how the IP",
    "start": "2569119",
    "end": "2575960"
  },
  {
    "text": "tables interact",
    "start": "2575960",
    "end": "2579119"
  },
  {
    "text": "Sol more popular to replace rules maybe forf application rules",
    "start": "2585400",
    "end": "2594160"
  },
  {
    "text": "like the way of yeah yeah okay yeah so",
    "start": "2600880",
    "end": "2606319"
  },
  {
    "text": "the example here is instead of using IP tables rules for kind of application specific firewalls you might want ebpf",
    "start": "2606319",
    "end": "2614640"
  },
  {
    "text": "based application specific firewall rules which you can already do with celium I think the the answer is largely",
    "start": "2614640",
    "end": "2621240"
  },
  {
    "text": "going to be you know don't try to use multiple different tools that do stand on top of each other but use a tool that",
    "start": "2621240",
    "end": "2627800"
  },
  {
    "text": "can give you the solution that you need um so for example if you were using",
    "start": "2627800",
    "end": "2633319"
  },
  {
    "text": "selum for Network policies per application I'm not sure why you would have something",
    "start": "2633319",
    "end": "2639800"
  },
  {
    "text": "else also simultaneously trying to do Network firewalling at the same",
    "start": "2639800",
    "end": "2645599"
  },
  {
    "text": "attachment points but but maybe there's a use case on I have a question uh so",
    "start": "2645599",
    "end": "2651520"
  },
  {
    "text": "ebpf makes writing um messing up with the kernel so easy is there a danger",
    "start": "2651520",
    "end": "2656839"
  },
  {
    "text": "that you know by dropping ping Packages Etc you're breaking something else on the Note would you recommend the",
    "start": "2656839",
    "end": "2663440"
  },
  {
    "text": "developers writing evf code as they write the application court right okay",
    "start": "2663440",
    "end": "2668839"
  },
  {
    "text": "so the question is you know essentially how do you know if you're doing something like dropping Network packets that that's a good thing could you not",
    "start": "2668839",
    "end": "2675200"
  },
  {
    "text": "be inadvertently messing something else up the answer is yes you could also",
    "start": "2675200",
    "end": "2682359"
  },
  {
    "text": "importantly the ebpf verifier can tell you that your program is safe to run and",
    "start": "2682359",
    "end": "2688319"
  },
  {
    "text": "won't crash the kernel it cannot tell you whether the intent is legitimate or",
    "start": "2688319",
    "end": "2693440"
  },
  {
    "text": "malicious so for example I could be dropping Network package KS because I",
    "start": "2693440",
    "end": "2698920"
  },
  {
    "text": "think they're going to you know packet of death and I I think that it' be a good idea to drop them or maybe I'm",
    "start": "2698920",
    "end": "2704280"
  },
  {
    "text": "doing it for uh denial of service or to prevent denial of service",
    "start": "2704280",
    "end": "2709400"
  },
  {
    "text": "attacks but I could also be a malicious actor dropping packets just to mess with",
    "start": "2709400",
    "end": "2714440"
  },
  {
    "text": "your system and there is no way for ebpf as a platform to know the difference it can't tell you what the intent",
    "start": "2714440",
    "end": "2721640"
  },
  {
    "text": "is importantly you know you need to treat ebpf as as privileged it is",
    "start": "2721640",
    "end": "2728680"
  },
  {
    "text": "privileged you know there there is no greater privilege than being able to change the way your colel behaves so you",
    "start": "2728680",
    "end": "2734000"
  },
  {
    "text": "know don't randomly run ebpf programs that you downloaded off the internet from some Rando you",
    "start": "2734000",
    "end": "2739400"
  },
  {
    "text": "know you you you do want to know where your ebpf programs came from there's quite a lot of work going on around um",
    "start": "2739400",
    "end": "2747839"
  },
  {
    "text": "kind of validating the ebpf programs that you run to make sure that they have come from a legitimate Source you might",
    "start": "2747839",
    "end": "2755319"
  },
  {
    "text": "think can't you just sign them ask me later if you want to understand why just signing them is not as simple",
    "start": "2755319",
    "end": "2763040"
  },
  {
    "text": "as you might think there was another was there another",
    "start": "2763040",
    "end": "2768960"
  },
  {
    "text": "question there one down",
    "start": "2768960",
    "end": "2773200"
  },
  {
    "text": "here okay um hi yeah I had a question that's",
    "start": "2774079",
    "end": "2780720"
  },
  {
    "text": "very close to uh what was just being discussed actually um in the previous",
    "start": "2780720",
    "end": "2787480"
  },
  {
    "text": "uh slid we saw how we run it in Python uh so can we say that in order to launch",
    "start": "2787480",
    "end": "2794240"
  },
  {
    "text": "a BP uh the the program we need admin privileges on the python uh uh script",
    "start": "2794240",
    "end": "2802880"
  },
  {
    "text": "itself to uh uh change the code on the Kernel yeah so ebpf programs are",
    "start": "2802880",
    "end": "2811640"
  },
  {
    "text": "essentially classed into two there's Network related programs and the other ones sometimes called perf or tracing",
    "start": "2811640",
    "end": "2818960"
  },
  {
    "text": "but from my perspective it's networking and everything else and you need capet admin capability in the Linux kernel to",
    "start": "2818960",
    "end": "2826440"
  },
  {
    "text": "attach Network related ebf programs and I want to say caps CIS admin for",
    "start": "2826440",
    "end": "2835079"
  },
  {
    "text": "everything else plus you also need a there's a BPF capability that was",
    "start": "2835079",
    "end": "2840440"
  },
  {
    "text": "introduced probably long enough and now that um everybody is is you has a kernel",
    "start": "2840440",
    "end": "2846319"
  },
  {
    "text": "that supports those capabilities so yes and you get those by being root so if I",
    "start": "2846319",
    "end": "2852520"
  },
  {
    "text": "attempted to run those examples as nonroot user without those capabilities",
    "start": "2852520",
    "end": "2858559"
  },
  {
    "text": "then yeah it would have just rejected loading the",
    "start": "2858559",
    "end": "2862960"
  },
  {
    "text": "program uh we got time for one more if there is one more two minutes oh okay two minutes anyone got got a two-minute",
    "start": "2865520",
    "end": "2872559"
  },
  {
    "text": "question yes question",
    "start": "2872559",
    "end": "2878079"
  },
  {
    "text": "talk okay I can talk endlessly about it um when I'm a malicious actor and I load",
    "start": "2878079",
    "end": "2884839"
  },
  {
    "text": "I create a root kit for ebpf and just have it there what are the ways that",
    "start": "2884839",
    "end": "2890319"
  },
  {
    "text": "other ebpf programs can observe that or theum have like that on the road map to",
    "start": "2890319",
    "end": "2895520"
  },
  {
    "text": "observe which programs are loaded because in my experience it's super hard to get an inside what's running yeah so",
    "start": "2895520",
    "end": "2902680"
  },
  {
    "text": "the question is about what if I have created an ebpf based rot kit I've loaded something malicious into the",
    "start": "2902680",
    "end": "2909880"
  },
  {
    "text": "konel can can I tell can I have BPF tolling to observe other BPF programs so",
    "start": "2909880",
    "end": "2917800"
  },
  {
    "text": "I'm going to say yes and no so yes there there's tools like BPF tool which is a a",
    "start": "2917800",
    "end": "2923000"
  },
  {
    "text": "command line tool that you can use to see what BPF programs are loaded and what maps are loaded and kind of get all",
    "start": "2923000",
    "end": "2929799"
  },
  {
    "text": "kinds of interesting information about those I believe it is possible to",
    "start": "2929799",
    "end": "2937839"
  },
  {
    "text": "obfuscate the results you know because if you can influence the CIS calls that are",
    "start": "2937839",
    "end": "2945200"
  },
  {
    "text": "returning the results that are giving you this information then yeah you you it becomes an arms",
    "start": "2945200",
    "end": "2953119"
  },
  {
    "text": "race right if you if you've got there first with your ebpf program loaded sort of first thing after boot",
    "start": "2953119",
    "end": "2960680"
  },
  {
    "text": "then and it manages to obfuscate itself or hide itself from tools like BP f tool",
    "start": "2960680",
    "end": "2967559"
  },
  {
    "text": "then yeah so I think it it again comes down to sort of the trust making sure",
    "start": "2967559",
    "end": "2972799"
  },
  {
    "text": "that the boot image that you're running with is something that you that you trust um and yeah the continued arms",
    "start": "2972799",
    "end": "2979920"
  },
  {
    "text": "race that no doubt we will have with interesting uh security attack vectors",
    "start": "2979920",
    "end": "2985640"
  },
  {
    "text": "that have that you know ebpf enables a lot of really cool things and it also enables some new attack vectors so you",
    "start": "2985640",
    "end": "2990799"
  },
  {
    "text": "know like any other bit of software people will find some bad things to do with it great thank you very much Liz",
    "start": "2990799",
    "end": "2998480"
  },
  {
    "text": "awesome talk [Music]",
    "start": "2998480",
    "end": "3008119"
  }
]