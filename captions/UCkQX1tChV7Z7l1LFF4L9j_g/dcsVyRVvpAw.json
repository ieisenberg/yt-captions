[
  {
    "start": "0",
    "end": "413000"
  },
  {
    "text": "[Music]",
    "start": "460",
    "end": "13519"
  },
  {
    "text": "um so I want to tell you a story um you know do you guys like",
    "start": "13519",
    "end": "18520"
  },
  {
    "text": "stories yes everybody loves a story um so I'm not quite James holiday uh I",
    "start": "18520",
    "end": "24119"
  },
  {
    "text": "don't draw quite as well as James um but I want to tell you about this crazy awesome invention I made called The",
    "start": "24119",
    "end": "29199"
  },
  {
    "text": "Amazing dad um and I invented this thing and it's so awesome that everybody in the whole",
    "start": "29199",
    "end": "34920"
  },
  {
    "text": "world should buy one so you know of course what did I do I set up a dudad factory that makes",
    "start": "34920",
    "end": "40520"
  },
  {
    "text": "dudads and in order to power my factory you know I need stuff to to make it work",
    "start": "40520",
    "end": "46520"
  },
  {
    "text": "you know and I have this great model it's kind of we're in the future right so I can you know I can do it like cars I can do sort of an ond demand model",
    "start": "46520",
    "end": "53239"
  },
  {
    "text": "where you sort of buy do dad and then we send you on um did you guys see the recent South Park episode about about",
    "start": "53239",
    "end": "58399"
  },
  {
    "text": "Amazon where it's just like I bought this stuff from Amazon and and and like I don't even remember what I got and that's basically my house where we we",
    "start": "58399",
    "end": "64920"
  },
  {
    "text": "get a delivery like every day and then it's like guess what somebody ordered from Amazon and nobody actually",
    "start": "64920",
    "end": "70360"
  },
  {
    "text": "remembers and I know that everybody that has Prime knows exactly that feeling so we're in the future we can just kind of",
    "start": "70360",
    "end": "75640"
  },
  {
    "text": "you know you order a dude ad and then we deliver it to you immediately so it's just kind of on demand model um and that",
    "start": "75640",
    "end": "82079"
  },
  {
    "text": "looks a little bit like this so um so uh everybody's seen a node server right",
    "start": "82079",
    "end": "87479"
  },
  {
    "text": "before yeah pretty much right this is a sort of the classic node server except I",
    "start": "87479",
    "end": "92759"
  },
  {
    "text": "added a thing in the middle that said V doad equals new doad um and that's about it so you know a basic idea of somebody",
    "start": "92759",
    "end": "100840"
  },
  {
    "text": "requests something and we create the thing that they want and we get the thing that they want and we send it now obviously like this this would be fine",
    "start": "100840",
    "end": "108600"
  },
  {
    "text": "if my web server could actually deliver everything that my client wanted right I want this API request here you go this",
    "start": "108600",
    "end": "116200"
  },
  {
    "text": "would be great except for the fact that how lightly is it really that my web server can actually have all",
    "start": "116200",
    "end": "123119"
  },
  {
    "text": "the information on it to create a dudad to give to my client very unlikely right",
    "start": "123119",
    "end": "129360"
  },
  {
    "text": "um presumably you know your sort of application is a bit is a bit more complex than that there's a bit more",
    "start": "129360",
    "end": "134800"
  },
  {
    "text": "kind of interaction going on so like this is this kind of request response model is fine up to a point but really",
    "start": "134800",
    "end": "142120"
  },
  {
    "text": "it's it's unrealistic um so if I really want to make dads the thing that I need to do is",
    "start": "142120",
    "end": "148080"
  },
  {
    "text": "I actually need a bunch of s subsid factories um and judging by the latest Apple news they should be full of 14y",
    "start": "148080",
    "end": "154319"
  },
  {
    "text": "olds um right um whatever every you know if you",
    "start": "154319",
    "end": "160159"
  },
  {
    "text": "buy anything from China I'm sure it's made by 14y olds sadly um economics it sucks um so you know I",
    "start": "160159",
    "end": "170400"
  },
  {
    "text": "need screens and I need antennas and I need knobs and buttons and different things um and I've got all of these kind",
    "start": "170400",
    "end": "175760"
  },
  {
    "text": "of subservient factories that are going to deliver that stuff to me so that's great like now I have um a situation",
    "start": "175760",
    "end": "181560"
  },
  {
    "text": "where um you know I've got all these kind of factors and they're going to give me stuff so the obvious analogy is",
    "start": "181560",
    "end": "187120"
  },
  {
    "text": "like these are my web services right in order to construct a page and going to pull together a bunch of stuff this is",
    "start": "187120",
    "end": "192239"
  },
  {
    "text": "service oriented architecture so here are my different factories um and they're going to give stuff to my dad",
    "start": "192239",
    "end": "198760"
  },
  {
    "text": "Factory so you know we've got some trucks um the trucks represent the network right so they go from Factory to",
    "start": "198760",
    "end": "206120"
  },
  {
    "text": "factory delivering the stuff um and I'm going to get these boxes apart so here are my boxes of parts now um",
    "start": "206120",
    "end": "214200"
  },
  {
    "text": "realistically I'm not going to get one part at a time instead it's going to be something like you know here's a big",
    "start": "214200",
    "end": "219799"
  },
  {
    "text": "bunch of parts like the factory makes a bunch of parts and it delivers them all at once and this is you know this is the",
    "start": "219799",
    "end": "225519"
  },
  {
    "text": "kind of classic experience that we get when we do stuff so um you know I really",
    "start": "225519",
    "end": "230560"
  },
  {
    "text": "need a part in order to make one dad but what I'm actually going to get is like a bunch of",
    "start": "230560",
    "end": "235760"
  },
  {
    "text": "parts um and I'm going to get three massive piles of parts for each",
    "start": "235760",
    "end": "240879"
  },
  {
    "text": "representing each Factory um and in node it was kind of hard to figure out how to represent this um and I finally thought",
    "start": "240879",
    "end": "247360"
  },
  {
    "text": "well I'm just going to use the the um the file system commands because it's actually the only place in node where it",
    "start": "247360",
    "end": "254360"
  },
  {
    "text": "is any kind of synchronous um IO is actually file system um to help people write command",
    "start": "254360",
    "end": "260160"
  },
  {
    "text": "line scripts um this is much easier to write if I pick some other language but you know in node it would look something",
    "start": "260160",
    "end": "265440"
  },
  {
    "text": "like this I get a request and then I read you know a file from the two different servers and they bring the",
    "start": "265440",
    "end": "270560"
  },
  {
    "text": "parts and they deliver them and um read file sync gives me like whole like",
    "start": "270560",
    "end": "276639"
  },
  {
    "text": "here's like a massive just like Funk here's a delivery of parts right here's all of it in one go um and this is you",
    "start": "276639",
    "end": "284360"
  },
  {
    "text": "know classically how we build stuff like I make a request to some web service over here and then it's like here's all",
    "start": "284360",
    "end": "291400"
  },
  {
    "text": "your information in wosa right um and it really makes sense because in a in a in",
    "start": "291400",
    "end": "296639"
  },
  {
    "text": "the classic languages this sense of streaming doesn't exist so we always do everything by assignment right um who",
    "start": "296639",
    "end": "303199"
  },
  {
    "text": "writes callbacks in python or PHP I don't see any hands right like",
    "start": "303199",
    "end": "309199"
  },
  {
    "text": "that guy um I guess if you use an event driven server so if you use like tornado or right something else right then",
    "start": "309199",
    "end": "315880"
  },
  {
    "text": "you're going to get or Twisted you're going to get callbacks um but in the classic Model we just do these",
    "start": "315880",
    "end": "321000"
  },
  {
    "text": "assignments so like V screen equals go and get my resource V dial equals go and get my resource and if you've ever tried",
    "start": "321000",
    "end": "326639"
  },
  {
    "text": "to do like multi curl and PHP it's God's Own heal it's awful um so like this is",
    "start": "326639",
    "end": "333479"
  },
  {
    "text": "the kind of situation where we're in where basically um we're dumping these",
    "start": "333479",
    "end": "339000"
  },
  {
    "text": "massive stacks of data um into our into our processes um",
    "start": "339000",
    "end": "344639"
  },
  {
    "text": "and this is threaded programming so this is basically like when somebody connects to your web server um without using an",
    "start": "344639",
    "end": "350440"
  },
  {
    "text": "event driven server you're basically saying I need to have enough warehouse",
    "start": "350440",
    "end": "355680"
  },
  {
    "text": "space to house all of the data that I'm going to fetch right so if you want to go and fetch a million rows from a",
    "start": "355680",
    "end": "361880"
  },
  {
    "text": "database you need to have a thread that's big enough to accept a million rows right and that's and that's",
    "start": "361880",
    "end": "368639"
  },
  {
    "text": "actually why if you look at things like you know the MySQL driver in PHP they do like pulling and the reason they do",
    "start": "368639",
    "end": "374639"
  },
  {
    "text": "pulling is because you don't want to have a thread that's big enough to to accept a million rows and I I I've seen this with clients with my clients where",
    "start": "374639",
    "end": "381840"
  },
  {
    "text": "people build stuff um and they'll put the admin interface on the same server",
    "start": "381840",
    "end": "388080"
  },
  {
    "text": "as the uh as the live production site and then it turns out that people that are admins can do these great big",
    "start": "388080",
    "end": "393759"
  },
  {
    "text": "database queries so somebody then goes and Jacks the the thread memory to be really massive so that the admin people",
    "start": "393759",
    "end": "400680"
  },
  {
    "text": "don't crash the server but it means that everybody else is like wasting memory because they get",
    "start": "400680",
    "end": "407000"
  },
  {
    "text": "like a massive Warehouse to cope with the the admin requests while everybody else just needs like a couple of boxes",
    "start": "407000",
    "end": "413560"
  },
  {
    "start": "413000",
    "end": "695000"
  },
  {
    "text": "um so how can we improve this kind of factory scenario um so really I only only need like one part in order to do",
    "start": "413560",
    "end": "420440"
  },
  {
    "text": "this so I could do something like this I could use FedEx um and I kind of like this analogy of kind of sticking like something like FedEx in the middle",
    "start": "420440",
    "end": "426840"
  },
  {
    "text": "because this actually U I'm going to talk about it in a minute uh or in a little bit about back pressure but um",
    "start": "426840",
    "end": "433560"
  },
  {
    "text": "FedEx is kind of an important Concept in this because it's a lot like um it's a",
    "start": "433560",
    "end": "438759"
  },
  {
    "text": "lot like the network it's a shared commodity resource um and if you use a",
    "start": "438759",
    "end": "444240"
  },
  {
    "text": "network if you're in a data center right there's other people using the network you don't know what they're doing you don't know if somebody just wanted to",
    "start": "444240",
    "end": "450560"
  },
  {
    "text": "burst like a gig of traffic you have no idea so um the logistics is always going to be going back and forth um but really",
    "start": "450560",
    "end": "457840"
  },
  {
    "text": "what we what we need is we just need a couple of boxes in order to sort of do our function so um that starts to look",
    "start": "457840",
    "end": "463639"
  },
  {
    "text": "something like this where we've created a server and then we send off these",
    "start": "463639",
    "end": "470080"
  },
  {
    "text": "requests and we say what I'm going to do is I'm going to spool up the data so I'm now going to do",
    "start": "470080",
    "end": "478159"
  },
  {
    "text": "this asynchronously I'm going to go to factory one and get screen I'm going to go to factory 2 and get my dials and I'm",
    "start": "478159",
    "end": "484800"
  },
  {
    "text": "going to spool up the data so this is where we start to stream um and I don't if I can get a pointer apparently I",
    "start": "484800",
    "end": "490639"
  },
  {
    "text": "can't get a pointer um so uh you can see that I've got a part count and then um",
    "start": "490639",
    "end": "499560"
  },
  {
    "text": "actually this this code has got a bug in it hooray um you can see that I've got a",
    "start": "499560",
    "end": "505000"
  },
  {
    "text": "counter uh for parts which I forgot to iterate silly me um and I've got two",
    "start": "505000",
    "end": "512518"
  },
  {
    "text": "different callbacks so I go and get the factory uh one I get the screen Factory",
    "start": "512519",
    "end": "517560"
  },
  {
    "text": "to I get the dial now we've got these two callbacks for data and end and",
    "start": "517560",
    "end": "524440"
  },
  {
    "text": "basically what we're saying is um every time Factory one gives me some data for",
    "start": "524440",
    "end": "530760"
  },
  {
    "text": "a screen I'm going to add that to my screen so I'm now buffering up like all of my screen data and then at some point",
    "start": "530760",
    "end": "537399"
  },
  {
    "text": "I'm going to call that right I'm going to call that that um and say finish and finish is going to check to see if I've",
    "start": "537399",
    "end": "543120"
  },
  {
    "text": "got all my parts if it doesn't have all my parts then um it's not going to do anything if it does have all my parts",
    "start": "543120",
    "end": "549480"
  },
  {
    "text": "then it's going to finish the request as we did in the first example um I actually forgot can edit the side while we're all looking at it um I actually",
    "start": "549480",
    "end": "556240"
  },
  {
    "text": "forgot to iterate the part count so it would be something like",
    "start": "556240",
    "end": "561639"
  },
  {
    "text": "this sorry I could iterate inside finish um",
    "start": "564399",
    "end": "571000"
  },
  {
    "text": "um that is completely true um",
    "start": "571000",
    "end": "577279"
  },
  {
    "text": "so this is I mean like this is kind of basically how we're managing this this process of we've got these two",
    "start": "577279",
    "end": "582640"
  },
  {
    "text": "asynchronous things at some point we need to synchronize that we have enough information that we can build the dudee and do it now this is kind of okay right",
    "start": "582640",
    "end": "589720"
  },
  {
    "text": "like now we're doing it asynchronously we're not blocking which is good this is kind of noish um but we're still not",
    "start": "589720",
    "end": "597079"
  },
  {
    "text": "really properly using streaming does anybody see the real problem with",
    "start": "597079",
    "end": "602240"
  },
  {
    "text": "this does anybody does anybody have like a like what is the real thing that's not working here that making this not",
    "start": "602240",
    "end": "607800"
  },
  {
    "text": "streaming not you Dave",
    "start": "607800",
    "end": "613800"
  },
  {
    "text": "anybody right so I'm buffering everything I'm concatenating everything why am I doing that what's the what's the problem",
    "start": "616640",
    "end": "625040"
  },
  {
    "text": "here because I need two parts but that's okay I mean I'm gonna need two parts whatever what's the thing that requires",
    "start": "625040",
    "end": "631519"
  },
  {
    "text": "the two parts before it runs right Dad to create this new object",
    "start": "631519",
    "end": "637120"
  },
  {
    "text": "the object creation doesn't stream the object creation that I'm doing here in order to make a new dad I",
    "start": "637120",
    "end": "645440"
  },
  {
    "text": "need two complete parts so the object creation here isn't streaming so the",
    "start": "645440",
    "end": "651600"
  },
  {
    "text": "limit of the streaming that we can do with this is we're making this slightly more efficient than if it was threaded",
    "start": "651600",
    "end": "657639"
  },
  {
    "text": "right if it was threaded we would have to pay all of the cost of all of this memory up front and because we don't do that we",
    "start": "657639",
    "end": "664880"
  },
  {
    "text": "can sort of interlock you can imagine like the curve of memory is going to go up for this right so it's going to be",
    "start": "664880",
    "end": "670880"
  },
  {
    "text": "it's going to be like a a growing curve you can imagine the server can interlock a bunch of those together and be",
    "start": "670880",
    "end": "676880"
  },
  {
    "text": "slightly more efficient than if we had threads but because the creation of a doad widget requires completed Parts",
    "start": "676880",
    "end": "684880"
  },
  {
    "text": "this isn't properly streaming and this is a really important concept because at some point we can do some streaming but",
    "start": "684880",
    "end": "692320"
  },
  {
    "text": "we we often encounter bottlenecks um so before I start to talk",
    "start": "692320",
    "end": "699079"
  },
  {
    "start": "695000",
    "end": "903000"
  },
  {
    "text": "about that uh in more depth I'm going to cover the basics of the stream API um so the stream API looks something like this",
    "start": "699079",
    "end": "705600"
  },
  {
    "text": "um we've got readable streams and writable streams and they kind of correspond together so one side of readable corresponds to the other side",
    "start": "705600",
    "end": "711600"
  },
  {
    "text": "of writable so when we get a data event the data event corresponds to a WR so a",
    "start": "711600",
    "end": "717440"
  },
  {
    "text": "readable stream will say hey I have dat data um and you can see that in the example where the um um the did I screw",
    "start": "717440",
    "end": "727399"
  },
  {
    "text": "that up as well no um the response uh the response on data gives me data right",
    "start": "727399",
    "end": "734079"
  },
  {
    "text": "um and that then corresponds to a right so we can take the data event and that pairs with a right when we get an end",
    "start": "734079",
    "end": "740560"
  },
  {
    "text": "event we have an end call on the writable streams we also have a pause on",
    "start": "740560",
    "end": "746800"
  },
  {
    "text": "readable we can say like hey don't send me any more stuff and then a resume which obviously those two go together pause resume pause resume um and then we",
    "start": "746800",
    "end": "754000"
  },
  {
    "text": "have destroy methods on both um we also have the special method pipe and we also have destroy soon um the drain event",
    "start": "754000",
    "end": "761320"
  },
  {
    "text": "corresponds with pause but the drain event is kind of deprecated and I'll talk about that um so the pipe method",
    "start": "761320",
    "end": "766720"
  },
  {
    "text": "the pipe method is kind of clever um you've seen that in this example I'm",
    "start": "766720",
    "end": "771839"
  },
  {
    "text": "using datron end explicitly now because we can see that data pairs with right an",
    "start": "771839",
    "end": "777040"
  },
  {
    "text": "end as an event pairs with end is a function call the pipe method allows us",
    "start": "777040",
    "end": "782279"
  },
  {
    "text": "to join those two things together so we can easily start to join these streams together and say this stream goes with",
    "start": "782279",
    "end": "789040"
  },
  {
    "text": "this stream goes with this stream goes with this stream um and that gives us a bunch of kind of interesting stuff so",
    "start": "789040",
    "end": "794240"
  },
  {
    "text": "streams are really easy to implement um one of the things you'll see is is in a lot of the examples I'm using parts of",
    "start": "794240",
    "end": "800800"
  },
  {
    "text": "node the streams itself is just it's a uh it's an API you can just implement it",
    "start": "800800",
    "end": "806279"
  },
  {
    "text": "so I can in I can include stream I can create a new stream which is uh an event",
    "start": "806279",
    "end": "811440"
  },
  {
    "text": "in node so notice that this is like Croc's class like syntax um capitalized",
    "start": "811440",
    "end": "816600"
  },
  {
    "text": "to classes um and um if I create a new stream man this I'm doing terribly",
    "start": "816600",
    "end": "824600"
  },
  {
    "text": "today stream. stream I suck um you can all boom me at the end",
    "start": "824600",
    "end": "831560"
  },
  {
    "text": "um so um we get our stream we create a new stream if we set it to readable we can now do readable things with it so",
    "start": "831560",
    "end": "838480"
  },
  {
    "text": "we've got these apis um by setting the property readable or writable we Define",
    "start": "838480",
    "end": "843720"
  },
  {
    "text": "what kind of a stream it is um and then in order to send data we use the event emitter so we emit data on the stream",
    "start": "843720",
    "end": "850720"
  },
  {
    "text": "here's my data emit my data emit my data um and then to end it we just Adit an",
    "start": "850720",
    "end": "857320"
  },
  {
    "text": "end event um correspondingly if we want to create a right stream we create a new stream we set writeable to",
    "start": "857320",
    "end": "863160"
  },
  {
    "text": "True um in this case I'm adding a data property on top of the the stream I",
    "start": "863160",
    "end": "870160"
  },
  {
    "text": "created um and then s do s. write we have to implement the function so when",
    "start": "870160",
    "end": "875480"
  },
  {
    "text": "we're creating writable streams we have to implement uh the functions in the API so",
    "start": "875480",
    "end": "882240"
  },
  {
    "text": "in this case right I'm just appending to data and uh I simply log all the data",
    "start": "882240",
    "end": "888199"
  },
  {
    "text": "when it's finished and then for destroy I say this is no longer a writable stream and because it's not a writable",
    "start": "888199",
    "end": "894079"
  },
  {
    "text": "stream it's going to stop getting used and when it get stops getting used it's going to get garbage collected",
    "start": "894079",
    "end": "900680"
  },
  {
    "start": "903000",
    "end": "1065000"
  },
  {
    "text": "right um so all of this is good so far we've seen like one kind of Hiccup where",
    "start": "903680",
    "end": "910480"
  },
  {
    "text": "we've got a uh an issue where if we",
    "start": "910480",
    "end": "915560"
  },
  {
    "text": "don't have a fully streaming server we get some benefit but not all the benefit",
    "start": "915560",
    "end": "922120"
  },
  {
    "text": "um we also have another issue and this is actually this is a problem with node",
    "start": "922120",
    "end": "927199"
  },
  {
    "text": "and this is something that we're going to start to address but um if we think of our our you know example we've got a",
    "start": "927199",
    "end": "933399"
  },
  {
    "text": "dad Factory and it's getting a bunch of deliveries from um from the part supplier and and",
    "start": "933399",
    "end": "940639"
  },
  {
    "text": "that's because the way that the the node API Works currently is we have these data events and who controls the data",
    "start": "940639",
    "end": "947000"
  },
  {
    "text": "events well it turns out that the readable stream controls the data events because the readable stream is like hey",
    "start": "947000",
    "end": "952720"
  },
  {
    "text": "I've got data data event data event data event so all of these trucks are like our data events and they sort of you",
    "start": "952720",
    "end": "958639"
  },
  {
    "text": "know it's basically you know we've got this Factory and it's just kind of baring data at us as in when it feels like it's",
    "start": "958639",
    "end": "964800"
  },
  {
    "text": "like yeah we have a contract I'm just going to send you some parts like when I have them you know that kind of thing um",
    "start": "964800",
    "end": "971560"
  },
  {
    "text": "well it turns out that like maybe I run out of you know or maybe I have too many parts right I've got too many parts and",
    "start": "971560",
    "end": "978600"
  },
  {
    "text": "what do I do now this is this is actually like a really common problem and this is you know uh the idea of kind",
    "start": "978600",
    "end": "984720"
  },
  {
    "text": "of if we're if this is all FedEx right if this is all FedEx and and FedEx are",
    "start": "984720",
    "end": "990279"
  },
  {
    "text": "running these trucks well that's great it's like my shared resource um I now have too many parts so I call the",
    "start": "990279",
    "end": "996399"
  },
  {
    "text": "factory and I say stop sending me Parts it turns out they've already mailed the",
    "start": "996399",
    "end": "1001440"
  },
  {
    "text": "parts I don't want any more parts like my my warehouse is literally full and some dude from FedEx is going to turn up",
    "start": "1001440",
    "end": "1007839"
  },
  {
    "text": "with like more boxes of stuff what do I do um and this is a common problem so",
    "start": "1007839",
    "end": "1013079"
  },
  {
    "text": "actually um when we get under the hood it turns out that in order to do streams",
    "start": "1013079",
    "end": "1019639"
  },
  {
    "text": "particularly Network streams there's a whole bunch of places where we have little warehouses FedEx has a little",
    "start": "1019639",
    "end": "1025678"
  },
  {
    "text": "Warehouse right the network itself has a little Warehouse there are warehouses in routs along the way right all of FedEx's",
    "start": "1025679",
    "end": "1032360"
  },
  {
    "text": "internal infrastructure right um there are um you know there's a warehouse in",
    "start": "1032360",
    "end": "1038720"
  },
  {
    "text": "the kernel right so like maybe I've got a loading dock and if the loading dock is full even if my warehouse is empty my",
    "start": "1038720",
    "end": "1044558"
  },
  {
    "text": "loading dock is full right um so there are all these different places along on the lines where we have these buffers",
    "start": "1044559",
    "end": "1050880"
  },
  {
    "text": "and we need some way to be like hey buddy just stop sending me stuff I'm I'm you know I'm full um and right now we",
    "start": "1050880",
    "end": "1057440"
  },
  {
    "text": "have this problem where stuff can be inlight and we have no way to cancel it so this is actually a real problem um",
    "start": "1057440",
    "end": "1064840"
  },
  {
    "text": "and you know to sort of put this into like more of a concrete implementation",
    "start": "1064840",
    "end": "1070320"
  },
  {
    "start": "1065000",
    "end": "1472000"
  },
  {
    "text": "so um one of the things that people don't uh I don't know if I have a slide on that maybe not um one of the things",
    "start": "1070320",
    "end": "1076000"
  },
  {
    "text": "that people often don't understand about how node works is the event model is actually run by lib UV right um so on",
    "start": "1076000",
    "end": "1084039"
  },
  {
    "text": "the right hand side we've got this is this is what node is node is node. CC if",
    "start": "1084039",
    "end": "1089480"
  },
  {
    "text": "you go and download the node source code you're going to get node. cc is like the foundation of everything it is the the C",
    "start": "1089480",
    "end": "1096559"
  },
  {
    "text": "file that loads in all of the stuff and then it you know it loads in once all of the stuff is loaded it then runs the",
    "start": "1096559",
    "end": "1103480"
  },
  {
    "text": "node.js file which lives in the same Source directory um and then at some point it then goes and loads all that",
    "start": "1103480",
    "end": "1110159"
  },
  {
    "text": "other stuff right but node. cc is the sort of root of it all and it brings in V8 it brings in all the different",
    "start": "1110159",
    "end": "1116799"
  },
  {
    "text": "add-ons um it grabs lib UV and it uses lib UV to start an event Loop um and lib",
    "start": "1116799",
    "end": "1122919"
  },
  {
    "text": "UV is our abstraction between a library called lib e which does event loops and it has done on Unix for ages um and iocp",
    "start": "1122919",
    "end": "1131159"
  },
  {
    "text": "which is Windows right so this is our event Loop um and there's a bunch of",
    "start": "1131159",
    "end": "1139000"
  },
  {
    "text": "different ways of doing events in node and a lot of people don't really understand like what they what the different things do so actually um I",
    "start": "1139000",
    "end": "1146360"
  },
  {
    "text": "don't think I have a side on this so I'm just going to uh I'm going to grab a terminal and just type instead um can",
    "start": "1146360",
    "end": "1152720"
  },
  {
    "text": "people see that okay yeah let's grab VI because VI is awesome",
    "start": "1152720",
    "end": "1158880"
  },
  {
    "text": "um sniger I heard that um all right so",
    "start": "1158880",
    "end": "1164360"
  },
  {
    "text": "we've got a bunch of different ways um of doing events so for example if I have something um if you do something like",
    "start": "1164360",
    "end": "1171919"
  },
  {
    "text": "server server.on request You Know da d d da um what's",
    "start": "1171919",
    "end": "1181000"
  },
  {
    "text": "pairing that well what's pairing that is a vent M so the first thing that we have is server.",
    "start": "1181000",
    "end": "1187280"
  },
  {
    "text": "imit so that's the first kind of thing that we can do um we've also got process.",
    "start": "1187280",
    "end": "1194559"
  },
  {
    "text": "nexttick um and then we've also got set timeout",
    "start": "1194559",
    "end": "1200240"
  },
  {
    "text": "um and set interval so one of the things I think",
    "start": "1200240",
    "end": "1207080"
  },
  {
    "text": "people often don't understand is how actually all of these things work um this is really important this is",
    "start": "1207080",
    "end": "1214760"
  },
  {
    "text": "Javascript um this is one of the most important things possibly to understand while doing node events if you call AIT",
    "start": "1214760",
    "end": "1221640"
  },
  {
    "text": "it is Javascript right um here is a very simple um a very simple explanation of",
    "start": "1221640",
    "end": "1229080"
  },
  {
    "text": "how event works right if I've got uh EV uh",
    "start": "1229080",
    "end": "1234760"
  },
  {
    "text": "event.on equals function and then I've got a function that I pass to it or an event",
    "start": "1234760",
    "end": "1242520"
  },
  {
    "text": "name and then a function right it simply",
    "start": "1242520",
    "end": "1248480"
  },
  {
    "text": "goes uh E",
    "start": "1248480",
    "end": "1253640"
  },
  {
    "text": "doevents Event I should call that event uh e uh event um and",
    "start": "1254640",
    "end": "1263000"
  },
  {
    "text": "then we're going to push to that def",
    "start": "1263000",
    "end": "1268720"
  },
  {
    "text": "right and then e. emit equals function",
    "start": "1268720",
    "end": "1273880"
  },
  {
    "text": "this is like really super simplified but event",
    "start": "1273880",
    "end": "1279320"
  },
  {
    "text": "data this is basically how event meta works is uh e do",
    "start": "1279320",
    "end": "1284919"
  },
  {
    "text": "events event uh",
    "start": "1284919",
    "end": "1292120"
  },
  {
    "text": "no 4 I equal z i is less than that.",
    "start": "1292400",
    "end": "1299120"
  },
  {
    "text": "length i++ I write JavaScript like it's 1995 yo",
    "start": "1299120",
    "end": "1305880"
  },
  {
    "text": "um I'm old and I can't learn new things",
    "start": "1305880",
    "end": "1312039"
  },
  {
    "text": "uh and then something like that I don't know so",
    "start": "1312200",
    "end": "1318600"
  },
  {
    "text": "something approximately like this where basically whenever you whenever you call AIT it basically just goes I have a I have a list of of all of the functions",
    "start": "1318600",
    "end": "1325520"
  },
  {
    "text": "attached to this event I'm just going to call them one by one here you go um so this is really important is when you",
    "start": "1325520",
    "end": "1331600"
  },
  {
    "text": "call a m when a mitt gets called by anything it's actually JavaScript and it basically just calls as much JavaScript",
    "start": "1331600",
    "end": "1337720"
  },
  {
    "text": "until it runs out and then it's done um process. next tick is actually a special",
    "start": "1337720",
    "end": "1343000"
  },
  {
    "text": "cue it's basically um I'll show the diagram in a second but process. nexttick is it's a special Big Boy queue",
    "start": "1343000",
    "end": "1349840"
  },
  {
    "text": "at the top of the regular event Loop and it's like I'm super important and you should call me like next um and it's a",
    "start": "1349840",
    "end": "1356080"
  },
  {
    "text": "it's it's basically it's a a fifo q um and then these guys are kind of",
    "start": "1356080",
    "end": "1363159"
  },
  {
    "text": "interesting which is basically if I do set time out uh FNA zero and then set",
    "start": "1363159",
    "end": "1370880"
  },
  {
    "text": "time out uh FNA value uh or you know time",
    "start": "1370880",
    "end": "1377279"
  },
  {
    "text": "um and end of the event Loop and that one",
    "start": "1377279",
    "end": "1382919"
  },
  {
    "text": "is um end of the event loop after time",
    "start": "1382919",
    "end": "1389360"
  },
  {
    "text": "so these guys do go on the event Loop um but basically if you say zero it just",
    "start": "1389360",
    "end": "1395440"
  },
  {
    "text": "throws it on the end if you say time it will throw it on the end after at least",
    "start": "1395440",
    "end": "1400880"
  },
  {
    "text": "that time but not necessarily on that time so it's not guaranteed um and then",
    "start": "1400880",
    "end": "1406320"
  },
  {
    "text": "set intervals you know ditto um I don't actually know if you can call",
    "start": "1406320",
    "end": "1412159"
  },
  {
    "text": "set in for with zero probably I guess you could um I haven't tried that but",
    "start": "1412159",
    "end": "1418360"
  },
  {
    "text": "this is this is really important so if we go back to our diagram um at the top you've got the",
    "start": "1418360",
    "end": "1423400"
  },
  {
    "text": "next tick but basically we've got this situation where um when we get TCP connection what happens is it goes oh",
    "start": "1423400",
    "end": "1429400"
  },
  {
    "text": "I've got an event list on the TCP connection and then that calls a m and you basically just bubble a ton of",
    "start": "1429400",
    "end": "1434720"
  },
  {
    "text": "JavaScript up so like the TCP connection goes oh I'm attached to a website server that's like a request and goes up and up",
    "start": "1434720",
    "end": "1440679"
  },
  {
    "text": "and up and up um so if we go back to you know here are our trucks we end up with",
    "start": "1440679",
    "end": "1446080"
  },
  {
    "text": "this situation where at some point I call stream.pw and now holy uh I have all of these",
    "start": "1446080",
    "end": "1454799"
  },
  {
    "text": "things that are already on my event Loop and I have literally no way to remove them so we're in this interesting",
    "start": "1454799",
    "end": "1460960"
  },
  {
    "text": "situation with the current stream API where because all of that data is pushed from the readstream to the right stream",
    "start": "1460960",
    "end": "1467399"
  },
  {
    "text": "um or whatever's listening um we don't have a good way to to deal with that and this is a real problem um",
    "start": "1467399",
    "end": "1474960"
  },
  {
    "start": "1472000",
    "end": "1586000"
  },
  {
    "text": "so there's a few things that we can kind of do to that to manage the back pressure um and this is you know this is",
    "start": "1474960",
    "end": "1480240"
  },
  {
    "text": "a really important topic because like managing that uh you know defines how efficient our server is so we can use um",
    "start": "1480240",
    "end": "1487080"
  },
  {
    "text": "pause and resume to control the back pressure a bit um we can um we can use",
    "start": "1487080",
    "end": "1492720"
  },
  {
    "text": "that in order to um Define some things we can manage the buffer size on our on",
    "start": "1492720",
    "end": "1498080"
  },
  {
    "text": "our uh um web server so if you're using Linux or Unix or whatever you can say",
    "start": "1498080",
    "end": "1504720"
  },
  {
    "text": "like I want connections to have this much buffer or this much um this is particularly important because if you",
    "start": "1504720",
    "end": "1510320"
  },
  {
    "text": "start using socket streams and like chaining together a bunch of sockets every single one of them is also going to have its own",
    "start": "1510320",
    "end": "1516440"
  },
  {
    "text": "buffer so kind of an interesting thing um and you basically the problem is with",
    "start": "1516440",
    "end": "1522640"
  },
  {
    "text": "the current implementation you have to write data events that assume that you may get an event after a pause anyway so",
    "start": "1522640",
    "end": "1527960"
  },
  {
    "text": "you have no way of controlling that so that just kind of sucks um the the sort of concrete things",
    "start": "1527960",
    "end": "1534399"
  },
  {
    "text": "there um when uh the kernel won't accept any more rights um each socket has an",
    "start": "1534399",
    "end": "1541279"
  },
  {
    "text": "internal buffer and basically what you can do is when you write wr's going to give you a false to be like hey stop",
    "start": "1541279",
    "end": "1546559"
  },
  {
    "text": "writing at me um but you can also check the buffer size and be like hey like I",
    "start": "1546559",
    "end": "1551799"
  },
  {
    "text": "have some like maximum kind of like safe buffer size that I want to you know not",
    "start": "1551799",
    "end": "1557840"
  },
  {
    "text": "not go over and they can Port stuff um and then also there's like a few of these things like uh file system methods",
    "start": "1557840",
    "end": "1564200"
  },
  {
    "text": "um you can see when I create uh a read stream on the file system I can actually Define from the file system how much of",
    "start": "1564200",
    "end": "1570919"
  },
  {
    "text": "a buffer I want so I can say to the file system like hey create this readstream from the file system with a certain",
    "start": "1570919",
    "end": "1577039"
  },
  {
    "text": "amount of of uh buffer that's not the kernal buffer",
    "start": "1577039",
    "end": "1582600"
  },
  {
    "text": "that's noes internal buffer so like some of these are tunables but there aren't so many of them so instead we end up with a new API",
    "start": "1582600",
    "end": "1588880"
  },
  {
    "text": "um Isaac this is still a proposal but um Isaac has readable streams on his GitHub",
    "start": "1588880",
    "end": "1595200"
  },
  {
    "text": "um you can go and look at this um it basically improves a bunch of things so writable streams are more or less the",
    "start": "1595200",
    "end": "1601120"
  },
  {
    "text": "same they haven't really changed um but the difference that we end up with is the first one is we can start to",
    "start": "1601120",
    "end": "1607159"
  },
  {
    "text": "configure water lines so I can basically say um if you think about my sort of my",
    "start": "1607159",
    "end": "1612240"
  },
  {
    "text": "Factory uh analogy I want like three or five parts you know the minimum the",
    "start": "1612240",
    "end": "1617600"
  },
  {
    "text": "minimum that I need in order to start making D ads is I need like three parts but don't send me more than 50 because",
    "start": "1617600",
    "end": "1624760"
  },
  {
    "text": "if you give me more than 50 it's going to be inefficient um so we can basically set a waterline we can say like high and",
    "start": "1624760",
    "end": "1630679"
  },
  {
    "text": "low marks um we then get a readable event so basically instead of a data",
    "start": "1630679",
    "end": "1635760"
  },
  {
    "text": "event the data event is like BL data BL data the readable event is like hey data is available like you've reached your",
    "start": "1635760",
    "end": "1642320"
  },
  {
    "text": "like low Watermark to say that you now have enough data to do something sensible I'm now readable and I'm not",
    "start": "1642320",
    "end": "1649679"
  },
  {
    "text": "going to take any more than my high Watermark if I get more than my high Watermark I'm going to push back and say like don't give me any more data um and",
    "start": "1649679",
    "end": "1657840"
  },
  {
    "text": "then we end up with instead of having the the sort of data callback where it's actually a callback instead we end up",
    "start": "1657840",
    "end": "1664960"
  },
  {
    "text": "with this pulling method so read lens so this is kind of like some of the other",
    "start": "1664960",
    "end": "1670200"
  },
  {
    "text": "languages the difference is the reason why it's still event driven is this readable event so this readable event",
    "start": "1670200",
    "end": "1675840"
  },
  {
    "text": "says hey now you've hit your watermark you're safe to read but I can then go and read length of any length I want I",
    "start": "1675840",
    "end": "1683399"
  },
  {
    "text": "can pass no length and get all the data that's available or I can pass a specific length and get a specific",
    "start": "1683399",
    "end": "1689000"
  },
  {
    "text": "amount of data and if you've ever written a passer getting a specific amount of data is incredibly helpful um",
    "start": "1689000",
    "end": "1694880"
  },
  {
    "text": "so this makes a big difference now what we're going to do is when this drops we can put and you can use it right now",
    "start": "1694880",
    "end": "1701399"
  },
  {
    "text": "right you can go to readable stream and use this right now but um we're going to put the old API back on top of this so",
    "start": "1701399",
    "end": "1708880"
  },
  {
    "text": "we're going to shim it so if you're used to the old API you can still use the old crappy broken API um it's not that",
    "start": "1708880",
    "end": "1714640"
  },
  {
    "text": "crappy it's still pretty good but you can still use the old API but if you're doing new stuff um you can do it this",
    "start": "1714640",
    "end": "1720480"
  },
  {
    "text": "way there is a couple of complications so if you're using pipe um one of the",
    "start": "1720480",
    "end": "1725720"
  },
  {
    "text": "things that you need to do is you make sure that subscribers must Implement a readable stream um because if they don't",
    "start": "1725720",
    "end": "1734440"
  },
  {
    "text": "um then you end up where somebody calls uh read and then they get the data so read",
    "start": "1734440",
    "end": "1741279"
  },
  {
    "text": "is now a direct function call you read you get the data back so if you have",
    "start": "1741279",
    "end": "1746760"
  },
  {
    "text": "pipe and you have another person that's trying to pull read on a particular socket then you're now going to be in",
    "start": "1746760",
    "end": "1753000"
  },
  {
    "text": "like a weird situation so that's kind of janky um so yeah I mean like basically",
    "start": "1753000",
    "end": "1758440"
  },
  {
    "text": "now the new situation is we start to push out like all of those big like caches back to the web services and then",
    "start": "1758440",
    "end": "1764720"
  },
  {
    "text": "say I want you to give me like a truckload of three give me a truck load of three give me a truckload of three so",
    "start": "1764720",
    "end": "1770240"
  },
  {
    "text": "we're in a slightly different situation where instead of having to like try and you know tell the other service to back",
    "start": "1770240",
    "end": "1776600"
  },
  {
    "text": "off at some point when we think we're full instead now in a situation where we basically say like this is my like",
    "start": "1776600",
    "end": "1783799"
  },
  {
    "text": "capacity and then read read read um so the next thing I wanted to talk",
    "start": "1783799",
    "end": "1790840"
  },
  {
    "start": "1786000",
    "end": "1812000"
  },
  {
    "text": "about was uh types of Stream So the the obvious one is simplex um this is something like this um if I",
    "start": "1790840",
    "end": "1798760"
  },
  {
    "text": "uh you know and this is just basically like a readable stream like a one directional Stream So if I read a stream",
    "start": "1798760",
    "end": "1804640"
  },
  {
    "text": "um you know and I get some data and I log it out it's just one directional could be a right stream could be a read",
    "start": "1804640",
    "end": "1809960"
  },
  {
    "text": "stream but it's very simple um the most common one that people use and this is",
    "start": "1809960",
    "end": "1816200"
  },
  {
    "start": "1812000",
    "end": "1923000"
  },
  {
    "text": "kind of like proxying um but it's this idea of a throughput stream so in this",
    "start": "1816200",
    "end": "1821640"
  },
  {
    "text": "case this is almost the same example so in this one I'm calling console.log um in this one on instead of",
    "start": "1821640",
    "end": "1829000"
  },
  {
    "text": "calling console.log I use pipe um and process. standardout is now a throughput",
    "start": "1829000",
    "end": "1834760"
  },
  {
    "text": "stream so it gets it gets data in and then it immediately ejects it out of the",
    "start": "1834760",
    "end": "1839919"
  },
  {
    "text": "program right so we now have a throughput stream and this is really",
    "start": "1839919",
    "end": "1845640"
  },
  {
    "text": "common where for example I might do an HTTP get so I go off to some like web",
    "start": "1845640",
    "end": "1851399"
  },
  {
    "text": "service and I grab it and then I bring it back and then I send it directly to my client and if I mean you know you can",
    "start": "1851399",
    "end": "1857399"
  },
  {
    "text": "do this with engine X or something else um if you don't have any any other logic but you know even just sticking like a",
    "start": "1857399",
    "end": "1864600"
  },
  {
    "text": "node server that simply fetches from a remote web service and then delivers it to a mobile client you'll probably see",
    "start": "1864600",
    "end": "1870840"
  },
  {
    "text": "an efficiency gain if you're using something like rails simply because node won't cost you a penalty to deal with",
    "start": "1870840",
    "end": "1877320"
  },
  {
    "text": "mobile latency right so there's a bunch of these kind of implementations where these simple like throughput streams are",
    "start": "1877320",
    "end": "1884120"
  },
  {
    "text": "super super effective um and there's actually no reason we saw that we can create streams earlier there's no reason",
    "start": "1884120",
    "end": "1890679"
  },
  {
    "text": "why we can't write throughput streams that also do interesting things so um when it's doing the throughput there's",
    "start": "1890679",
    "end": "1897200"
  },
  {
    "text": "no reason why it has to like simply do nothing to the stream there's no reason why you can't start to modify the stream",
    "start": "1897200",
    "end": "1903440"
  },
  {
    "text": "and we'll talk about those examples on a sec um and then the final one is like a duplex stream so this is the idea that",
    "start": "1903440",
    "end": "1908559"
  },
  {
    "text": "you basically connect two things together and they're just going to talk back and forth um you know chatterbot or",
    "start": "1908559",
    "end": "1915320"
  },
  {
    "text": "some other like two-way thing um could really implement this so this",
    "start": "1915320",
    "end": "1920600"
  },
  {
    "text": "is there's like a whole bunch of uh a whole bunch of stuff here so a couple of libraries that I want to call out before",
    "start": "1920600",
    "end": "1926559"
  },
  {
    "start": "1923000",
    "end": "2077000"
  },
  {
    "text": "I talk about applications and then maybe some questions um let me check my time um so the first one is Jason Stream So",
    "start": "1926559",
    "end": "1934080"
  },
  {
    "text": "if I had some data like this and I just I grabbed this off the wiki but it's a really good example so like here are some database rows um you know we've got",
    "start": "1934080",
    "end": "1941240"
  },
  {
    "text": "a bunch of rows um and you can imagine it says total rows 129 you know this has",
    "start": "1941240",
    "end": "1946399"
  },
  {
    "text": "been a bridged but um I've got lots and lots and lots of RS um json. pass is",
    "start": "1946399",
    "end": "1952679"
  },
  {
    "text": "wicked fast but it turns out that there's so much data that there's no way that I'm going to get that in a single",
    "start": "1952679",
    "end": "1958360"
  },
  {
    "text": "request right so I go and get my requests to my database whether it's like couch or or whatever and I",
    "start": "1958360",
    "end": "1964240"
  },
  {
    "text": "bring it back um and it's much more efficient for me to be able to do something while I'm streaming it so",
    "start": "1964240",
    "end": "1970760"
  },
  {
    "text": "Jason uh Jason stream is basically the idea that by having a Jason passer that",
    "start": "1970760",
    "end": "1976440"
  },
  {
    "text": "can read off the wire each of these rows automically could be",
    "start": "1976440",
    "end": "1981639"
  },
  {
    "text": "useful right um so I may still want to do something automically on this Row in",
    "start": "1981639",
    "end": "1988880"
  },
  {
    "text": "order to build my dad so if my and this is the this is the difference before was like you know in the first example we",
    "start": "1988880",
    "end": "1994639"
  },
  {
    "text": "had this Dad and it needed to be a complete thing it needed to be like here are my parts I need to do stuff in order",
    "start": "1994639",
    "end": "2001120"
  },
  {
    "text": "to create effective streaming services what you need to do is say what's the least possible component that I can",
    "start": "2001120",
    "end": "2007240"
  },
  {
    "text": "actually start to act on and that way I can start to do things so I can bring",
    "start": "2007240",
    "end": "2012480"
  },
  {
    "text": "some data in Imagine um you know a great way to kind of reduce your footprint is like if you've got this massive user",
    "start": "2012480",
    "end": "2018760"
  },
  {
    "text": "profile full of information you bring it back the only thing you need on this page is the name so you grab the profile",
    "start": "2018760",
    "end": "2023919"
  },
  {
    "text": "you get the name you delete that object you say I don't want this anymore and like boom you've just freed up a bunch",
    "start": "2023919",
    "end": "2030000"
  },
  {
    "text": "of memory right now that's very explicit but in this model what we're trying to do is we're trying to say you know",
    "start": "2030000",
    "end": "2036320"
  },
  {
    "text": "what's the minimum value that I can pull off the wire such that I can then start to act on my data and then forget about",
    "start": "2036320",
    "end": "2042799"
  },
  {
    "text": "it um so Jason stream allows us to do this the stream passer is definitely",
    "start": "2042799",
    "end": "2049240"
  },
  {
    "text": "definitely definitely it's not as fast as jason. pass json. pass is like",
    "start": "2049240",
    "end": "2055040"
  },
  {
    "text": "implemented in V8 the people at Google are are offensively smart um and you",
    "start": "2055040",
    "end": "2062000"
  },
  {
    "text": "know the stuff that they've written natively is awesome but it turns out that if I'm streaming lots of rows from",
    "start": "2062000",
    "end": "2067800"
  },
  {
    "text": "a database the blocker is not how fast I can pass the blocker is how fast can I",
    "start": "2067800",
    "end": "2073118"
  },
  {
    "text": "get stuff over the wire from the database um and we've got a similar",
    "start": "2073119",
    "end": "2078839"
  },
  {
    "start": "2077000",
    "end": "2474000"
  },
  {
    "text": "thing not that I recommend this uh I did I've did a lot of work with node xat um",
    "start": "2078839",
    "end": "2084000"
  },
  {
    "text": "so um xat is basically it's a C library that does XML passing um there's a",
    "start": "2084000",
    "end": "2089638"
  },
  {
    "text": "couple Isaac Isaac wrote um node saxs I think um and it's it's basically XML",
    "start": "2089639",
    "end": "2097800"
  },
  {
    "text": "passing streaming XML passing it's like stabbing yourself in the eyes with hot knives I mean like think about how awful",
    "start": "2097800",
    "end": "2104079"
  },
  {
    "text": "regular XML passing is or like even just like working with a Dom not not super fantastic um imagine trying to like and",
    "start": "2104079",
    "end": "2112599"
  },
  {
    "text": "and you know XML obviously doesn't coers to Jason properly like imagine trying to pull XML off the wire and then implement",
    "start": "2112599",
    "end": "2120000"
  },
  {
    "text": "it but it turns out that I can on my MacBook a from I don't know year ago I",
    "start": "2120000",
    "end": "2127160"
  },
  {
    "text": "can saturate an entire core of a processor like one one core is 100% CPU",
    "start": "2127160",
    "end": "2134640"
  },
  {
    "text": "with 50 Megs of ram right so these passes are so efficient like you can you",
    "start": "2134640",
    "end": "2142680"
  },
  {
    "text": "can basically you can use all of your CPU and still only use like 50 Megs of ram so they're incredibly memory",
    "start": "2142680",
    "end": "2148480"
  },
  {
    "text": "efficient um and depending on what application you're building if I've got a server and it's got loads of memory",
    "start": "2148480",
    "end": "2155640"
  },
  {
    "text": "and I'm you know and I'm not only am I uh not having to wait for the whole object to start acting on my stuff but",
    "start": "2155640",
    "end": "2162160"
  },
  {
    "text": "I'm also saving all this memory well it turns out that all the rest of that memory can now go to m cach or it can now go to like some object cache which",
    "start": "2162160",
    "end": "2169400"
  },
  {
    "text": "means that instead of even like going to my dependent resource I can now just you know F the thing straight out of",
    "start": "2169400",
    "end": "2176640"
  },
  {
    "text": "cash so all of this stuff is kind of it's really um uh it's really dependent",
    "start": "2176640",
    "end": "2182680"
  },
  {
    "text": "on being able to do that so um how do we apply this well I think you know there's a few few main patterns um the first one",
    "start": "2182680",
    "end": "2189800"
  },
  {
    "text": "is filtering I have some data it's coming down off the wire and um I want",
    "start": "2189800",
    "end": "2195839"
  },
  {
    "text": "to take it and I want to modify in some way before I send it on um this is fairly simple you still need like a",
    "start": "2195839",
    "end": "2201800"
  },
  {
    "text": "stream based passer like a Json stream or something like that but um it's a",
    "start": "2201800",
    "end": "2207000"
  },
  {
    "text": "fairly simple application um you then and this is I mean like one of the things I want to",
    "start": "2207000",
    "end": "2212359"
  },
  {
    "text": "emphasize as well is you know we've seen a bunch of different examples that it didn't even touch soccer IO um this API",
    "start": "2212359",
    "end": "2218839"
  },
  {
    "text": "this concept is completely transport neutral right it's completely transport neutral so you can you know you can do",
    "start": "2218839",
    "end": "2224680"
  },
  {
    "text": "this over file system you can do this over socket IO and websockets you know and if you use socket iio you get a",
    "start": "2224680",
    "end": "2231200"
  },
  {
    "text": "streaming model and it turns out that actually under the hood socer IO implements it with um websockets flash",
    "start": "2231200",
    "end": "2238319"
  },
  {
    "text": "sockets uh long polling like a bunch of different stuff under the hood so you don't even see that um so filtering is",
    "start": "2238319",
    "end": "2245560"
  },
  {
    "text": "one huge case um I would say um the the main thing that's",
    "start": "2245560",
    "end": "2251640"
  },
  {
    "text": "really important is um when we're dealing with stuff one of the common and I guess I don't have a diagram for this",
    "start": "2251640",
    "end": "2257640"
  },
  {
    "text": "one of the common things that I see is people build stuff where the actual uh",
    "start": "2257640",
    "end": "2263720"
  },
  {
    "text": "end result of an application is dependent on a bunch of web services so um I'm going to grab Chrome have has",
    "start": "2263720",
    "end": "2270640"
  },
  {
    "text": "everybody seen um web page test has anybody seen that nobody seen",
    "start": "2270640",
    "end": "2276440"
  },
  {
    "text": "that I know I've been talking to you for you're like oh I forgot that I'm supposed to like respond to stuff um ah",
    "start": "2276440",
    "end": "2282440"
  },
  {
    "text": "crap what's the internet password",
    "start": "2282440",
    "end": "2288920"
  },
  {
    "text": "what HTML 5 Dev comp okay that was so I guess",
    "start": "2288920",
    "end": "2297079"
  },
  {
    "text": "obvious I know right and and because I've got a Mac it's going to take me about 10 minutes",
    "start": "2297079",
    "end": "2302880"
  },
  {
    "text": "to connect uh if this doesn't connect in like the next oh there we go all right um somebody give me a",
    "start": "2302880",
    "end": "2311240"
  },
  {
    "text": "URL anybody what New York",
    "start": "2311240",
    "end": "2315920"
  },
  {
    "text": "Times uh we're at the front of the queue yes all right I'm going to keep talking while this runs so um one of the things",
    "start": "2316480",
    "end": "2322640"
  },
  {
    "text": "I see really often is basically we build these these pages that are like SOA they're like an aggregate of a bunch of",
    "start": "2322640",
    "end": "2328560"
  },
  {
    "text": "stuff um and then we basically we say my first load time like my initial load",
    "start": "2328560",
    "end": "2334280"
  },
  {
    "text": "time to the user is um dependent on on all of these other resources that they",
    "start": "2334280",
    "end": "2339440"
  },
  {
    "text": "depend on well that sucks right and primarily it sucks because we not",
    "start": "2339440",
    "end": "2346200"
  },
  {
    "text": "only is it dependent on um the resources themselves it's dependent on loading the",
    "start": "2346200",
    "end": "2351400"
  },
  {
    "text": "whole resource right I can't flush anything until I load the whole resource um this",
    "start": "2351400",
    "end": "2358119"
  },
  {
    "text": "is uh yeah obviously everybody uses y I used to work for Yahoo so I like to make jokes about them um they have mer Mana",
    "start": "2358119",
    "end": "2364079"
  },
  {
    "text": "they might actually do okay um but if I do like a Yahoo search for I don't know cats or something notice the search bar",
    "start": "2364079",
    "end": "2370200"
  },
  {
    "text": "just boom loads right this is a good page experience um and I guess web page",
    "start": "2370200",
    "end": "2375400"
  },
  {
    "text": "test is going to take a long time um the point is is that Yahoo flush that top bar before any of the rest of their web",
    "start": "2375400",
    "end": "2382079"
  },
  {
    "text": "services have called right and as they start calling as they start getting results they can now start to flush",
    "start": "2382079",
    "end": "2388200"
  },
  {
    "text": "content to the page and this is the ideal situation turns out it's quite hard building streaming services not not",
    "start": "2388200",
    "end": "2395640"
  },
  {
    "text": "super easy um here's New York Times you can see like um render let's see",
    "start": "2395640",
    "end": "2401839"
  },
  {
    "text": "content download uh wow they download loads of stuff um",
    "start": "2401839",
    "end": "2408440"
  },
  {
    "text": "so okay so basically this green line is when it starts to render and be because",
    "start": "2408440",
    "end": "2413880"
  },
  {
    "text": "they start loading within sort of 200 milliseconds right that gives them you",
    "start": "2413880",
    "end": "2419480"
  },
  {
    "text": "know the difference between 200 millisecs and when does it start loading um oh wait it says at the top",
    "start": "2419480",
    "end": "2426960"
  },
  {
    "text": "like two seconds right so it takes them about uh a second and a half to render",
    "start": "2426960",
    "end": "2432480"
  },
  {
    "text": "the page now imagine if their first bite took a second right because they were",
    "start": "2432480",
    "end": "2438720"
  },
  {
    "text": "waiting on all of these dependent resources before they started loading stuff right then you've got a page that",
    "start": "2438720",
    "end": "2444760"
  },
  {
    "text": "takes 3 seconds instead of two seconds and this is the real benefit of streaming service is that I can start to",
    "start": "2444760",
    "end": "2450400"
  },
  {
    "text": "say even though it may take me like this amount of time to do something I can",
    "start": "2450400",
    "end": "2455839"
  },
  {
    "text": "start to shuffle all these pieces together with the minimum possible delay and get them out the",
    "start": "2455839",
    "end": "2461359"
  },
  {
    "text": "door right thanks",
    "start": "2461359",
    "end": "2465519"
  },
  {
    "text": "[Music]",
    "start": "2469150",
    "end": "2476760"
  }
]