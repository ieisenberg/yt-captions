[
  {
    "start": "0",
    "end": "99000"
  },
  {
    "text": "this talk is grohl not Justin mu jet for",
    "start": "3980",
    "end": "9050"
  },
  {
    "text": "the jvm and apart from the safe harbor",
    "start": "9050",
    "end": "14210"
  },
  {
    "text": "statement I think the best way to start this talk is by asking what the problem",
    "start": "14210",
    "end": "19250"
  },
  {
    "text": "is why do we need in Egypt for the JVM what problem are we trying to solve that",
    "start": "19250",
    "end": "25430"
  },
  {
    "text": "hot spot is in situ and other jets that exist are not good enough for and the",
    "start": "25430",
    "end": "33440"
  },
  {
    "text": "problem bits of code like this it's very",
    "start": "33440",
    "end": "38809"
  },
  {
    "text": "nice code it's easy to read you can see that it takes in the array from",
    "start": "38809",
    "end": "45170"
  },
  {
    "text": "something gate turns it into a stream it performs several map operations and it",
    "start": "45170",
    "end": "52670"
  },
  {
    "text": "produces a result and it's got lots of",
    "start": "52670",
    "end": "58760"
  },
  {
    "text": "good properties it's hard to get it wrong this sort of code does not mess",
    "start": "58760",
    "end": "64820"
  },
  {
    "text": "with the underlying data structure that it's streaming over it can be made parallel very easily and it can be",
    "start": "64820",
    "end": "72320"
  },
  {
    "text": "decomposed into multiple methods or it can be composed easily as well so you",
    "start": "72320",
    "end": "78320"
  },
  {
    "text": "can if you know that your arrays over the data structures you're going to be going over a large over the mapping",
    "start": "78320",
    "end": "86750"
  },
  {
    "text": "operations you're going to perform you're going to be complicated you can just put one method call in there and",
    "start": "86750",
    "end": "93469"
  },
  {
    "text": "make it parallel and that's a really big advantage so why don't we use code like",
    "start": "93469",
    "end": "103039"
  },
  {
    "start": "99000",
    "end": "99000"
  },
  {
    "text": "this everywhere well the number one reason is that we want better",
    "start": "103039",
    "end": "109759"
  },
  {
    "text": "performance when we can get from this code on current jets running it involves",
    "start": "109759",
    "end": "117170"
  },
  {
    "text": "creating a lot of temporary objects and that imposes a cost it imposes a cost as",
    "start": "117170",
    "end": "126759"
  },
  {
    "text": "well because we're using lambdas and lambdas work very well with jits in some",
    "start": "126759",
    "end": "133430"
  },
  {
    "text": "circumstances but the strategy you use for deal with them can make them work much less",
    "start": "133430",
    "end": "139640"
  },
  {
    "text": "well in others so but as I say already",
    "start": "139640",
    "end": "151180"
  },
  {
    "text": "it's really easy to write this and to get it to do what we want so what's",
    "start": "151180",
    "end": "158870"
  },
  {
    "text": "going on in this code well a raised dot stream creates a thing called a splitter",
    "start": "158870",
    "end": "164900"
  },
  {
    "text": "ater it's an iterator that can be split across parallel cause it can do all",
    "start": "164900",
    "end": "171260"
  },
  {
    "text": "sorts of clever stuff but in this case we just want to iterate over the array",
    "start": "171260",
    "end": "176740"
  },
  {
    "text": "calling map on it and passing in that lambda creates a new object which is",
    "start": "176740",
    "end": "182480"
  },
  {
    "text": "also a stream and that has to be created here to meet passes in the lambda and",
    "start": "182480",
    "end": "187940"
  },
  {
    "text": "it's going to be calling that lambda ditto for the next two versions of node",
    "start": "187940",
    "end": "195620"
  },
  {
    "text": "to that for the next two method calls of map they're also going to create stream",
    "start": "195620",
    "end": "201350"
  },
  {
    "text": "objects under the hood and then finally at the end of all this we call reduce",
    "start": "201350",
    "end": "208760"
  },
  {
    "text": "which is what the JDK calls internally a terminal operation and that actually",
    "start": "208760",
    "end": "215450"
  },
  {
    "text": "performs the loop over the stream to produce a final value in some way",
    "start": "215450",
    "end": "224440"
  },
  {
    "text": "go so what does the jet need to be able",
    "start": "229129",
    "end": "235200"
  },
  {
    "start": "230000",
    "end": "230000"
  },
  {
    "text": "to do to make this sort of code run fast well it needs to be able to inline",
    "start": "235200",
    "end": "241709"
  },
  {
    "text": "methods these temporary objects are all implemented as interfaces and they've",
    "start": "241709",
    "end": "248730"
  },
  {
    "text": "got loads of different implementations that optimize for different things so we really want to be able to take all those",
    "start": "248730",
    "end": "255359"
  },
  {
    "text": "virtual method cults and boil them down to well-known single dispatch direct",
    "start": "255359",
    "end": "261900"
  },
  {
    "text": "calls that can be in that event it don't involve a jump in me in the assembly",
    "start": "261900",
    "end": "267750"
  },
  {
    "text": "code or in the machine code if we can do that then we can know a lot more about",
    "start": "267750",
    "end": "274889"
  },
  {
    "text": "how this code is working and we can start to do something called escape analysis escape analysis is kind of what",
    "start": "274889",
    "end": "282750"
  },
  {
    "text": "it sounds like we're looking at all the temporary objects being used by a bit of code and we're trying to understand",
    "start": "282750",
    "end": "288150"
  },
  {
    "text": "which ones are going to get out of that code and be seen by the rest of the",
    "start": "288150",
    "end": "294930"
  },
  {
    "text": "system and which ones really are temporary and most of the time we can",
    "start": "294930",
    "end": "301620"
  },
  {
    "text": "avoid allocating various entirely they'll just be broken down to their individual fields and stored on the",
    "start": "301620",
    "end": "307560"
  },
  {
    "text": "stack in some clever way you can do even",
    "start": "307560",
    "end": "312780"
  },
  {
    "text": "better that you can do partial escape analysis where you know that in the",
    "start": "312780",
    "end": "318000"
  },
  {
    "text": "normal path of code the object does not escape but maybe if there's an exception",
    "start": "318000",
    "end": "324289"
  },
  {
    "text": "then the object escapes and if you can do that then you can start to do some",
    "start": "324289",
    "end": "329849"
  },
  {
    "text": "stuff around rare flying objects only under those exceptional circumstances",
    "start": "329849",
    "end": "335159"
  },
  {
    "text": "and most of the rest of the time you just don't create them at all so how",
    "start": "335159",
    "end": "346110"
  },
  {
    "start": "342000",
    "end": "342000"
  },
  {
    "text": "well does C to do running this little bit of code I ran a small benchmark to",
    "start": "346110",
    "end": "352289"
  },
  {
    "text": "do restrains pretty much the same sort of thing you saw on that first slide and I looked at the assembler output and",
    "start": "352289",
    "end": "358860"
  },
  {
    "text": "various bits from the compilers see how it was doing and see two does",
    "start": "358860",
    "end": "365010"
  },
  {
    "text": "pretty well on inlining it actually did a bit more than I expect it so in",
    "start": "365010",
    "end": "371670"
  },
  {
    "text": "running this small case we're actually doing quite well on how lambdas are used",
    "start": "371670",
    "end": "380210"
  },
  {
    "text": "see two likes to inline code starting from the smallest method and working its",
    "start": "380210",
    "end": "387600"
  },
  {
    "text": "way out and that means it really wants a method to always be calling the same",
    "start": "387600",
    "end": "394910"
  },
  {
    "text": "collie that's broken in lambdas because we've",
    "start": "394910",
    "end": "401040"
  },
  {
    "text": "often got a vast number of different lambdas funneled through a single method",
    "start": "401040",
    "end": "407220"
  },
  {
    "text": "and that can start to break the inlining heuristics that are Jets have used but",
    "start": "407220",
    "end": "413190"
  },
  {
    "text": "in this small example c2 does pretty well it also manages to do pretty well",
    "start": "413190",
    "end": "420090"
  },
  {
    "text": "at escape analysis so it doesn't remove all the temporary objects you can still",
    "start": "420090",
    "end": "426540"
  },
  {
    "text": "see some allocations of them if you read the assembly code and you've got to be a",
    "start": "426540",
    "end": "432060"
  },
  {
    "text": "bit of a masochist to want to do that but some of us do every so often so it's",
    "start": "432060",
    "end": "440460"
  },
  {
    "text": "done quite well it's removed quite a lot of temporary objects but it's still creating some and you can see that in the assembly code and you can see a few",
    "start": "440460",
    "end": "446640"
  },
  {
    "text": "instrument how much how many objects are being created the thing it doesn't",
    "start": "446640",
    "end": "453810"
  },
  {
    "text": "manage to do very well is turn this into a simple loop which is the thing would really really like because that's nice",
    "start": "453810",
    "end": "460680"
  },
  {
    "text": "and efficient for this small case how",
    "start": "460680",
    "end": "468240"
  },
  {
    "start": "466000",
    "end": "466000"
  },
  {
    "text": "well does Brawl do well growls more aggressive in the way it does in lining",
    "start": "468240",
    "end": "474090"
  },
  {
    "text": "and it has some more strategies than for it for trying to do it then then c2 does",
    "start": "474090",
    "end": "479780"
  },
  {
    "text": "so it manages to Enlai more of this code and as a consequence of that it manages",
    "start": "479780",
    "end": "486870"
  },
  {
    "text": "to do much better escape analysis it removes almost all the temporary objects",
    "start": "486870",
    "end": "492120"
  },
  {
    "text": "in this in this mark so it's mostly looping over via ray",
    "start": "492120",
    "end": "498060"
  },
  {
    "text": "and adding up the numbers and because it's mostly doing that it is able to",
    "start": "498060",
    "end": "503410"
  },
  {
    "text": "turn this sort of small thing into a tight loop that actually executes pretty",
    "start": "503410",
    "end": "508450"
  },
  {
    "text": "efficiently not quite as efficiently as as an array implementation but not bad",
    "start": "508450",
    "end": "519240"
  },
  {
    "start": "519000",
    "end": "519000"
  },
  {
    "text": "so what's the effect of all that well",
    "start": "520080",
    "end": "526350"
  },
  {
    "text": "this chart shows this benchmark being run on two things well the blue line",
    "start": "526350",
    "end": "533500"
  },
  {
    "text": "labeled hotspot is standard c2 compiler the red line labeled growl VM is a JVM",
    "start": "533500",
    "end": "543400"
  },
  {
    "text": "that's been built with the growl compiler and we'll talk a bit more about that later and you can see that the peak",
    "start": "543400",
    "end": "552310"
  },
  {
    "text": "performance is pretty good when more than twice as fast compared to c2 on",
    "start": "552310",
    "end": "558940"
  },
  {
    "text": "running these service streams like these bits of code with streams in but you may",
    "start": "558940",
    "end": "565540"
  },
  {
    "text": "have noticed there's a bit of a problem over on the over on the left-hand end of",
    "start": "565540",
    "end": "570730"
  },
  {
    "text": "the graph which is that it's taken us quite a while to get there and that's",
    "start": "570730",
    "end": "575800"
  },
  {
    "text": "not really what we want so",
    "start": "575800",
    "end": "583620"
  },
  {
    "text": "what problems do we have here well we've got that warm-up as I mentioned and the",
    "start": "587980",
    "end": "595310"
  },
  {
    "text": "warm-up is partly because growl is written in Java this causes a lot of",
    "start": "595310",
    "end": "603080"
  },
  {
    "text": "people to blink every so often when we when we say that but lots of compilers",
    "start": "603080",
    "end": "608570"
  },
  {
    "text": "for languages are written in the language as long as you can bootstrap it you're okay",
    "start": "608570",
    "end": "613940"
  },
  {
    "text": "and in Java we've got an interpreter so we can bootstrap Hadj it",
    "start": "613940",
    "end": "619040"
  },
  {
    "text": "it's it'll be slow if we always ran it in the interpreter so a lot of that warm-up is we really have to just in",
    "start": "619040",
    "end": "626030"
  },
  {
    "text": "time compile our just-in-time compiler and miscue go as many level layers deep",
    "start": "626030",
    "end": "633680"
  },
  {
    "text": "as you want but it's got some other properties not entirely desirable we're",
    "start": "633680",
    "end": "641960"
  },
  {
    "text": "running our compute in Java which means we're sharing the heap with your",
    "start": "641960",
    "end": "647540"
  },
  {
    "text": "application if you sized your application carefully to fit in a specific amount of space that's gonna",
    "start": "647540",
    "end": "655160"
  },
  {
    "text": "have an undesirable effect every time you compile there's a bunch of objects",
    "start": "655160",
    "end": "661070"
  },
  {
    "text": "that get created to represent all the information the compiler uses internally and then they're going to be garbage",
    "start": "661070",
    "end": "667010"
  },
  {
    "text": "collected away again and if you've been tuning for low pause garbage collection",
    "start": "667010",
    "end": "672710"
  },
  {
    "text": "and things you've probably been very careful to reduce the amount of garbage you can you produce as much as possible",
    "start": "672710",
    "end": "677900"
  },
  {
    "text": "and you don't want it stopping your java application we also are polluting the",
    "start": "677900",
    "end": "686330"
  },
  {
    "text": "type information that the compiler gathers about your program if you are careful that you only use",
    "start": "686330",
    "end": "693370"
  },
  {
    "text": "collections in particular ways you may be getting some very good performance",
    "start": "693370",
    "end": "698390"
  },
  {
    "text": "from the JVM because you've read the compiler can reduce virtual calls down",
    "start": "698390",
    "end": "703850"
  },
  {
    "text": "to direct calls and inline things but if we're running in the same JVM then that",
    "start": "703850",
    "end": "710390"
  },
  {
    "text": "may no longer be the case because inside growl we'll be using a load of collection methods and classes and",
    "start": "710390",
    "end": "717470"
  },
  {
    "text": "things like that and iterating over graphs and that may start to affect things in an undesirable way so will it",
    "start": "717470",
    "end": "731330"
  },
  {
    "start": "727000",
    "end": "727000"
  },
  {
    "text": "affect you well you can try this stuff at home so if you've got a up-to-date",
    "start": "731330",
    "end": "737180"
  },
  {
    "text": "JDK JDK 11 is a good one to pick because it's out and it's the most recent",
    "start": "737180",
    "end": "743209"
  },
  {
    "text": "supporting version you can do - xx - on plus unlocked experimental VM",
    "start": "743209",
    "end": "751640"
  },
  {
    "text": "options and use JVM CI compiler and you can use growl instead of C - and it will",
    "start": "751640",
    "end": "759260"
  },
  {
    "text": "just work you can see whether it makes a difference for your application but you can also see some other problems if you",
    "start": "759260",
    "end": "765920"
  },
  {
    "text": "specify bootstrap JVM CI on the command line then you can see how long it",
    "start": "765920",
    "end": "772070"
  },
  {
    "text": "actually takes to compile the JIT itself and on my machine it's about eight seconds and normally we want to start up",
    "start": "772070",
    "end": "779150"
  },
  {
    "text": "trying to be reduced and that's really not helping us so now we have a new",
    "start": "779150",
    "end": "794570"
  },
  {
    "text": "problem how can we use growl and get all the benefits of it without having those",
    "start": "794570",
    "end": "801830"
  },
  {
    "text": "downsides what can we do to achieve this well",
    "start": "801830",
    "end": "812200"
  },
  {
    "text": "growl isn't just a JIT the difference between a compiler for something like C",
    "start": "812200",
    "end": "818810"
  },
  {
    "text": "that does everything ahead of time and I compiler for growl fir for Java like",
    "start": "818810",
    "end": "823940"
  },
  {
    "text": "growl that he's doing everything just in time is not as big as you might think a",
    "start": "823940",
    "end": "829790"
  },
  {
    "text": "lot of the components are used in common and indeed growl can be used to do ahead",
    "start": "829790",
    "end": "840380"
  },
  {
    "text": "of time compilation and it can be already be used in the open JDK to do something and that's with a tool that's",
    "start": "840380",
    "end": "850070"
  },
  {
    "text": "in Java 11 and I some earlier versions but haven't checked called J a OTC Java ahead of time compiler but",
    "start": "850070",
    "end": "864220"
  },
  {
    "text": "ahead of time compilation can mean quite",
    "start": "864220",
    "end": "869270"
  },
  {
    "text": "a lot of different things so",
    "start": "869270",
    "end": "872710"
  },
  {
    "start": "872000",
    "end": "872000"
  },
  {
    "text": "just-in-time compilation on the JVM on the right hand side we have the VM",
    "start": "874840",
    "end": "880460"
  },
  {
    "text": "internals which are precompiled c++ and c you've got your garbage collector",
    "start": "880460",
    "end": "887480"
  },
  {
    "text": "you've gotten underlying underpinnings of class loading you've got a compiler",
    "start": "887480",
    "end": "893030"
  },
  {
    "text": "interface because there's multiple compilers inside the JVM there's C 1 and C 2 and there's a more general compiler",
    "start": "893030",
    "end": "899990"
  },
  {
    "text": "interface called JVM CI which you saw in those command line mentioned in those command-line options which is what",
    "start": "899990",
    "end": "906710"
  },
  {
    "text": "grower uses to interface and that's all built in advanced and is in various",
    "start": "906710",
    "end": "912170"
  },
  {
    "text": "shared libraries but link to to the Java executable on the left-hand side we've",
    "start": "912170",
    "end": "920780"
  },
  {
    "text": "got our JVM bytecode so we've got some classes of ours so my class might have a",
    "start": "920780",
    "end": "926780"
  },
  {
    "text": "class we've got a module of groel in this case and all rights officially it's",
    "start": "926780",
    "end": "934820"
  },
  {
    "text": "called jdk internal vm compiler in the open JDK if you look at the module names",
    "start": "934820",
    "end": "942200"
  },
  {
    "text": "I think and we've got things like a java-based module and everything that you need for your code to run",
    "start": "942200",
    "end": "950470"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "so ahead of time compilation for this looks something like this we're not",
    "start": "954180",
    "end": "961959"
  },
  {
    "text": "touching the VM itself but over on the left hand side we're turning some of our",
    "start": "961959",
    "end": "969250"
  },
  {
    "text": "classes into shared libraries so don't essay files on the next court whatever",
    "start": "969250",
    "end": "974620"
  },
  {
    "text": "they call die libs on Mac OS and things like that this has some trade-offs we've got to do",
    "start": "974620",
    "end": "982420"
  },
  {
    "text": "everything up front and ahead of time we don't get to do all the tricks that are",
    "start": "982420",
    "end": "988000"
  },
  {
    "text": "just in time compiler we'll get to do so we can't make a optimistic assumption",
    "start": "988000",
    "end": "993940"
  },
  {
    "text": "about a particular aspect of the code and D optimize when that ceases to be",
    "start": "993940",
    "end": "999279"
  },
  {
    "text": "true we have to make slightly more conservative assumptions so we've got something that will work all the time",
    "start": "999279",
    "end": "1005940"
  },
  {
    "text": "and there's some limitations as well with this approach if you do this of this thing of creating shared libraries",
    "start": "1005940",
    "end": "1013920"
  },
  {
    "text": "from jars those have to be compiled with",
    "start": "1013920",
    "end": "1018959"
  },
  {
    "text": "the same JVM options but you're going to be using at runtime so you're baking in stuff about instrumentation and garbage",
    "start": "1018959",
    "end": "1027780"
  },
  {
    "text": "collection and all sorts of things like that so it's useful but it's not",
    "start": "1027780",
    "end": "1035668"
  },
  {
    "text": "necessarily what we're after there's another option you can have for",
    "start": "1035669",
    "end": "1041040"
  },
  {
    "start": "1038000",
    "end": "1038000"
  },
  {
    "text": "ahead-of-time compilation which is to say I want to boil everything down to a",
    "start": "1041040",
    "end": "1047579"
  },
  {
    "text": "single executable I'm not sure this is supported in open JDK yet but again",
    "start": "1047579",
    "end": "1054960"
  },
  {
    "text": "we'll talk about this some more later in the talk and the idea of this is you're",
    "start": "1054960",
    "end": "1060690"
  },
  {
    "text": "getting very minimal amounts of the VM infrastructure you need so for example",
    "start": "1060690",
    "end": "1066660"
  },
  {
    "text": "maybe I don't need any of the other runtime stuff apart from a garbage collector my class is and probably some",
    "start": "1066660",
    "end": "1073320"
  },
  {
    "text": "more bits of the standard library but over on the left that's another way we",
    "start": "1073320",
    "end": "1079200"
  },
  {
    "text": "can do ahead of time compilation so there's over of these options really",
    "start": "1079200",
    "end": "1088560"
  },
  {
    "text": "help us with Graham well the shared library option doesn't",
    "start": "1088560",
    "end": "1094590"
  },
  {
    "text": "help us in several ways we've got the limitations who all they exist that I mentioned of having to run with the same",
    "start": "1094590",
    "end": "1101610"
  },
  {
    "text": "options and things like that but we've also not solved a problem of running in the same heap we're still",
    "start": "1101610",
    "end": "1108330"
  },
  {
    "text": "using the java the java hoop and that's a problem if we build as a standalone",
    "start": "1108330",
    "end": "1116340"
  },
  {
    "text": "executable then we have an exactly good of vm but we've got a JIT for we've got",
    "start": "1116340",
    "end": "1123120"
  },
  {
    "text": "a JIT sitting on its own so that doesn't look like it really helps us either",
    "start": "1123120",
    "end": "1128990"
  },
  {
    "text": "question is can we come up with some middle way that's gonna have four good",
    "start": "1128990",
    "end": "1136140"
  },
  {
    "text": "parts of a standalone executable but",
    "start": "1136140",
    "end": "1141210"
  },
  {
    "text": "he's going to be usable inside the JVM",
    "start": "1141210",
    "end": "1145789"
  },
  {
    "start": "1147000",
    "end": "1147000"
  },
  {
    "text": "right and yes we can do something we can",
    "start": "1147530",
    "end": "1153600"
  },
  {
    "text": "compile stuff to a shared library in this case we have a VM that looks mostly",
    "start": "1153600",
    "end": "1161940"
  },
  {
    "text": "similar on the right-hand side it still has two GC it still has all the class loader and stuff it's got a slightly new",
    "start": "1161940",
    "end": "1169110"
  },
  {
    "text": "compiler interface because we're no longer expecting growl to talk to something running on the main JVM we're",
    "start": "1169110",
    "end": "1177240"
  },
  {
    "text": "expecting it to talk to the main JVM and growl to talk in some other way",
    "start": "1177240",
    "end": "1183510"
  },
  {
    "text": "so we've had so we've got a slightly different compiler interface and we've got this thing at the bottom called a",
    "start": "1183510",
    "end": "1189360"
  },
  {
    "text": "Lib growl dot s o technology isn't it",
    "start": "1189360",
    "end": "1198210"
  },
  {
    "text": "wonderful clickers never quite work if we expand out that VM Lib growl is",
    "start": "1198210",
    "end": "1207090"
  },
  {
    "text": "something that contain is a shared library that contains its own garbage collector so it's not using the Java",
    "start": "1207090",
    "end": "1215070"
  },
  {
    "text": "heap it's got all the bits one time it needs just to be able to run",
    "start": "1215070",
    "end": "1220340"
  },
  {
    "text": "and it's got all the internals of groel compiled and this fits our needs it's no",
    "start": "1220340",
    "end": "1230670"
  },
  {
    "text": "longer using the main Java heap it doesn't even have to use the same sort of garbage collector we can choose",
    "start": "1230670",
    "end": "1236340"
  },
  {
    "text": "something completely different and choose one specifically designed for the",
    "start": "1236340",
    "end": "1241710"
  },
  {
    "text": "types of tasks we expect with growl to be though it's no longer going to be",
    "start": "1241710",
    "end": "1246900"
  },
  {
    "text": "polluting polluting the type information and it doesn't have to get itself at the",
    "start": "1246900",
    "end": "1253860"
  },
  {
    "text": "start so that seems like a really good thing to be able to do so",
    "start": "1253860",
    "end": "1265040"
  },
  {
    "text": "how can we turn this into something we can use how are we going to do this well",
    "start": "1272720",
    "end": "1278720"
  },
  {
    "text": "this is a research project inside Oracle labs called substrate VM and it is a",
    "start": "1278720",
    "end": "1287920"
  },
  {
    "text": "whole different lightweight VM for running existing code with some",
    "start": "1287920",
    "end": "1296690"
  },
  {
    "text": "limitations and the idea is you take an existing java application on hotspot and",
    "start": "1296690",
    "end": "1305150"
  },
  {
    "text": "you transform it into an executable or a shared library and when you do that you",
    "start": "1305150",
    "end": "1313160"
  },
  {
    "text": "start stop running it on hotspot and you're running it on this tiny custom-built VM most of which is written",
    "start": "1313160",
    "end": "1319700"
  },
  {
    "text": "in Java because we do things like that",
    "start": "1319700",
    "end": "1324519"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "so we take your application we take the",
    "start": "1326620",
    "end": "1334010"
  },
  {
    "text": "JDK we take substrate VM we do a load of static analysis we work out what things",
    "start": "1334010",
    "end": "1340010"
  },
  {
    "text": "are reachable in your application if code can't be called we're not going to include it so like I said there's",
    "start": "1340010",
    "end": "1347780"
  },
  {
    "text": "some limitations around things like reflection you can't necessarily call",
    "start": "1347780",
    "end": "1353330"
  },
  {
    "text": "stuff unless you tell unless you describe in advance that that sort of thing is going to be needed and we boil",
    "start": "1353330",
    "end": "1360590"
  },
  {
    "text": "that down to some executable code a sort",
    "start": "1360590",
    "end": "1367190"
  },
  {
    "text": "of serialized version of the Java heap on disk because hey you need a lot of that stuff to run to run things with",
    "start": "1367190",
    "end": "1374060"
  },
  {
    "text": "that startup and we package it into an executable or a shared library and you",
    "start": "1374060",
    "end": "1380840"
  },
  {
    "start": "1380000",
    "end": "1380000"
  },
  {
    "text": "do that and then you run it as many times as you want",
    "start": "1380840",
    "end": "1386110"
  },
  {
    "text": "so that's all very useful that gets us an interesting new jet written in Java",
    "start": "1389800",
    "end": "1396970"
  },
  {
    "text": "into the JVM and hopefully without problems of warm-up or type pollution or",
    "start": "1396970",
    "end": "1403690"
  },
  {
    "text": "using memory that you don't want but can we build something more with this I mean",
    "start": "1403690",
    "end": "1411100"
  },
  {
    "text": "just having things faster is good as Martin mentioned at the start Twitter",
    "start": "1411100",
    "end": "1417640"
  },
  {
    "text": "have been picking this up because Chris Thalia really wanted to use it and he's been contributing stuff to grow as well",
    "start": "1417640",
    "end": "1423910"
  },
  {
    "text": "and they've had very good effects very good outcomes from this though sort of",
    "start": "1423910",
    "end": "1429100"
  },
  {
    "text": "talking about 20% speed improvements and things on the tweets so that's great but",
    "start": "1429100",
    "end": "1435880"
  },
  {
    "text": "what else can we build well we can build a lot of interesting things and they",
    "start": "1435880",
    "end": "1441850"
  },
  {
    "text": "collectively go on under a banner called roll here so roll the M and it's hard is",
    "start": "1441850",
    "end": "1452140"
  },
  {
    "start": "1448000",
    "end": "1448000"
  },
  {
    "text": "the Java VM and the growl compiler and",
    "start": "1452140",
    "end": "1457150"
  },
  {
    "text": "we can use that for running Java code and Scala code and things like that",
    "start": "1457150",
    "end": "1462460"
  },
  {
    "text": "any jvm language and hopefully hopefully we'll get better performance than we did",
    "start": "1462460",
    "end": "1468580"
  },
  {
    "text": "out of out of hotspot c2 but on top of it we can build whole interesting new",
    "start": "1468580",
    "end": "1476920"
  },
  {
    "text": "things so this is a framework called truffle and truffle is a is designed for",
    "start": "1476920",
    "end": "1484120"
  },
  {
    "text": "implementing interpreters for languages the idea of this you don't have to write",
    "start": "1484120",
    "end": "1491710"
  },
  {
    "text": "a complicated compiler for your language you can write a simple interpreter for",
    "start": "1491710",
    "end": "1498070"
  },
  {
    "text": "it and it is surprisingly simple and as",
    "start": "1498070",
    "end": "1503200"
  },
  {
    "text": "long as you follow some rules the framework that runs your interpreter",
    "start": "1503200",
    "end": "1509920"
  },
  {
    "text": "will be able to understand when parts of code are run frequently and it will be",
    "start": "1509920",
    "end": "1515620"
  },
  {
    "text": "able to really optimize them surprisingly well now we've got various languages implemented on top of this",
    "start": "1515620",
    "end": "1523080"
  },
  {
    "text": "so we've got Ruby in the form of truffle Ruby which I work on most of the time is",
    "start": "1523080",
    "end": "1529300"
  },
  {
    "text": "my day job we have an implementation of are called faster",
    "start": "1529300",
    "end": "1535780"
  },
  {
    "text": "we have Grohl Jas which is an implementation of JavaScript and I think",
    "start": "1535780",
    "end": "1544960"
  },
  {
    "text": "it serve ACMA scripts six or whatever one one of the recent ones they've been keeping up and we've got an",
    "start": "1544960",
    "end": "1552040"
  },
  {
    "text": "implementation of merge es working with that we have a Python port and well some",
    "start": "1552040",
    "end": "1558580"
  },
  {
    "text": "of these languages that all of these languages have one thing in common they traditionally depended on extensions to",
    "start": "1558580",
    "end": "1566320"
  },
  {
    "text": "their systems written in C so we have something but can interpret LLVM bit",
    "start": "1566320",
    "end": "1573700"
  },
  {
    "text": "code so you can run your pair clang and tell it to output this bit code rather",
    "start": "1573700",
    "end": "1579550"
  },
  {
    "text": "than assembly rather than compiling down to a native platform we can interpret",
    "start": "1579550",
    "end": "1585550"
  },
  {
    "text": "that in the same context as the languages and you can make calls to",
    "start": "1585550",
    "end": "1591550"
  },
  {
    "text": "those into that C and back again into the language and this is no longer an",
    "start": "1591550",
    "end": "1596890"
  },
  {
    "text": "optimisation barrier so if you're doing something simple down in a c extension here for Python or Ruby but a",
    "start": "1596890",
    "end": "1605530"
  },
  {
    "text": "just-in-time compiler for Python would not traditionally ever be able to deal",
    "start": "1605530",
    "end": "1611020"
  },
  {
    "text": "with now it can if it can see you just taking an object doing something simple to it and returning that new thing then",
    "start": "1611020",
    "end": "1619480"
  },
  {
    "text": "it can optimize that",
    "start": "1619480",
    "end": "1622230"
  },
  {
    "text": "and we can use this in a lot of interesting ways so combined with the",
    "start": "1626010",
    "end": "1634740"
  },
  {
    "text": "substrate VM stuff I talked about we can take language runtimes and we can put them in places we have them before so",
    "start": "1634740",
    "end": "1642270"
  },
  {
    "text": "yes we can run stuff on the open JDK we can run our JavaScript implementation",
    "start": "1642270",
    "end": "1649049"
  },
  {
    "text": "inside node we can run this stuff inside the Oracle database we can run it inside",
    "start": "1649049",
    "end": "1654900"
  },
  {
    "text": "my sequel so if you were thinking of doing a large database upgrade that",
    "start": "1654900",
    "end": "1662490"
  },
  {
    "text": "involved a load of Ruby code or something but was really really wanted to be run close to the data but as close",
    "start": "1662490",
    "end": "1669750"
  },
  {
    "text": "to the database as possible that sort of thing starts to become a possibility and",
    "start": "1669750",
    "end": "1674929"
  },
  {
    "text": "you can run standalone executables which",
    "start": "1674929",
    "end": "1680040"
  },
  {
    "text": "is very useful which then we'll come to in a minute very is a fully open source",
    "start": "1680040",
    "end": "1688169"
  },
  {
    "text": "implementation of this on Oracle graal if you want to build it yourself or look",
    "start": "1688169",
    "end": "1694830"
  },
  {
    "text": "at things and we have versions you can",
    "start": "1694830",
    "end": "1704730"
  },
  {
    "text": "download we have a community edition and we have an Enterprise Edition which does",
    "start": "1704730",
    "end": "1710669"
  },
  {
    "text": "more optimization so how does this trick",
    "start": "1710669",
    "end": "1717960"
  },
  {
    "text": "with truffle work well it's a trick called partial evaluation the idea of",
    "start": "1717960",
    "end": "1724380"
  },
  {
    "text": "this is that you run an interpreter over",
    "start": "1724380",
    "end": "1729600"
  },
  {
    "text": "your program and it's not the normal sort of interpreter that you think of when you if you've ever seen a bytecode",
    "start": "1729600",
    "end": "1734760"
  },
  {
    "text": "interpreter for the JVM because partial evaluation is essentially running your",
    "start": "1734760",
    "end": "1740580"
  },
  {
    "text": "program with every input that it could have at the same time and figuring out",
    "start": "1740580",
    "end": "1748610"
  },
  {
    "text": "what's constant in that if you have a",
    "start": "1748610",
    "end": "1756230"
  },
  {
    "text": "loop that always counts to ten partially evaluation should figure that",
    "start": "1756230",
    "end": "1761500"
  },
  {
    "text": "out and be able to produce a flattened loop that always counts to ten but",
    "start": "1761500",
    "end": "1767350"
  },
  {
    "text": "equally if you've inline something that's taking a boolean argument it will",
    "start": "1767350",
    "end": "1774400"
  },
  {
    "text": "only need to compile that one version and it can do quite a lot of quite a lot of tricks and it's working very",
    "start": "1774400",
    "end": "1780340"
  },
  {
    "text": "effectively for us in these dynamic languages it also works very effectively",
    "start": "1780340",
    "end": "1791520"
  },
  {
    "text": "grohl works very effectively for things like Scala I said you know stream",
    "start": "1791520",
    "end": "1799050"
  },
  {
    "text": "streams are you are a good target and Scala uses a lot of streams and things",
    "start": "1799050",
    "end": "1805120"
  },
  {
    "text": "internally so we get good speed up on things like Scala we can also apply",
    "start": "1805120",
    "end": "1816580"
  },
  {
    "text": "substrate vm to things like this so we can take short running jobs like the",
    "start": "1816580",
    "end": "1823300"
  },
  {
    "text": "Scala compiler itself and substantially improve its performance at compiling",
    "start": "1823300",
    "end": "1830020"
  },
  {
    "text": "things because we're removing that initial warm-up and startup time so a",
    "start": "1830020",
    "end": "1836140"
  },
  {
    "text": "substrate vm process has already done a bunch of initialization when you're",
    "start": "1836140",
    "end": "1842050"
  },
  {
    "text": "running it it's very quick it's a couple of milliseconds at most to start",
    "start": "1842050",
    "end": "1847300"
  },
  {
    "text": "normally on a bunch of these things because it's already done a bunch of work and it's got a heap ready to go so",
    "start": "1847300",
    "end": "1855420"
  },
  {
    "text": "if you're looking at reducing sort of build times and things then this is a",
    "start": "1855420",
    "end": "1861130"
  },
  {
    "text": "this is a viable strategy and maybe it'll be a strategy for you know even the Java compiler going forward",
    "start": "1861130",
    "end": "1867880"
  },
  {
    "text": "who knows it we're also getting",
    "start": "1867880",
    "end": "1875670"
  },
  {
    "start": "1871000",
    "end": "1871000"
  },
  {
    "text": "excellent performance out of the other language implementations so we're",
    "start": "1875670",
    "end": "1881650"
  },
  {
    "text": "comparing to two other JVM based systems for this and certainly for things like",
    "start": "1881650",
    "end": "1888790"
  },
  {
    "text": "Ruby and R and stuff we're doing a lot better we than other implementations this is a",
    "start": "1888790",
    "end": "1896589"
  },
  {
    "text": "this is a strategy that seems to be working well and for the JavaScript side",
    "start": "1896589",
    "end": "1907129"
  },
  {
    "text": "of things it's doing a lot better than Nass horn or Rhino which is good since",
    "start": "1907129",
    "end": "1914569"
  },
  {
    "text": "Nassau has been deprecated so we'll need a replacement script engine for that at",
    "start": "1914569",
    "end": "1920119"
  },
  {
    "text": "some point and you can try using growl Jas as a script engine in open JDK 11 if",
    "start": "1920119",
    "end": "1929479"
  },
  {
    "text": "you download it you can it's it's on maven and you can try it in Grove via so",
    "start": "1929479",
    "end": "1936739"
  },
  {
    "text": "this opens up a lot of possibilities for things like that to have script engines that are truly performant on the JVM and",
    "start": "1936739",
    "end": "1947569"
  },
  {
    "text": "on the Ruby side we're a lot better especially on small benchmarks then any",
    "start": "1947569",
    "end": "1953179"
  },
  {
    "text": "other Ruby implementation out there we're scaling up at the moment Ruby's got a lot of challenges to doing",
    "start": "1953179",
    "end": "1958879"
  },
  {
    "text": "optimization but now we've got a JIT and a framework but we can start to approach those challenges here at the moment",
    "start": "1958879",
    "end": "1965449"
  },
  {
    "text": "we've been improving compatibility but now we're getting to the stage where we're starting to scale up and running",
    "start": "1965449",
    "end": "1971869"
  },
  {
    "text": "real Ruby applications and we're going to be looking at and getting that performance as good as we possibly can",
    "start": "1971869",
    "end": "1979059"
  },
  {
    "text": "so you can try this stuff at home on",
    "start": "1983900",
    "end": "1990760"
  },
  {
    "text": "OpenJDK you can add the unlock experimental via not vm options and use",
    "start": "1990760",
    "end": "1998420"
  },
  {
    "text": "JVM CI and that will allow you to use guell right out the box it's still",
    "start": "1998420",
    "end": "2003460"
  },
  {
    "text": "experimental so you know maybe not in maybe don't use it in production unless you've got a team that can support it",
    "start": "2003460",
    "end": "2009430"
  },
  {
    "text": "but you can try it on open JDK 11 you can also get grow vm if you go to grow",
    "start": "2009430",
    "end": "2016210"
  },
  {
    "text": "vm dot org then you'll find the",
    "start": "2016210",
    "end": "2022150"
  },
  {
    "text": "downloads for the Community Edition and the Enterprise Edition and we're doing release candidates at least monthly at",
    "start": "2022150",
    "end": "2029500"
  },
  {
    "text": "the moment and you'll find a load of",
    "start": "2029500",
    "end": "2035230"
  },
  {
    "text": "stuff in grow vm docks about how to use this stuff and how to get started on",
    "start": "2035230",
    "end": "2043330"
  },
  {
    "text": "using various languages and download those and give them a try and use them in substrate vm or build substrate the",
    "start": "2043330",
    "end": "2049960"
  },
  {
    "text": "EM versions of your own applications people have been trying this with Nettie they've been trying it with spring",
    "start": "2049960",
    "end": "2056648"
  },
  {
    "text": "they've been submitting patches to those frameworks to ensure that they work in",
    "start": "2056649",
    "end": "2061658"
  },
  {
    "text": "this sort of environment if you're aiming it's something like AWS lambda or",
    "start": "2061659",
    "end": "2067929"
  },
  {
    "text": "something like that or any any any server list case where",
    "start": "2067929",
    "end": "2073300"
  },
  {
    "text": "you want to start up quickly and this is a thing to look at you can also follow",
    "start": "2073300",
    "end": "2079179"
  },
  {
    "text": "grow vm on Twitter and there's Twitter",
    "start": "2079179",
    "end": "2085570"
  },
  {
    "text": "accounts for the individual languages as well as truffle Ruby and you'll find many of the team members like myself on",
    "start": "2085570",
    "end": "2091628"
  },
  {
    "text": "there as well I'm hard work 179 on Twitter Grohl is not a small project",
    "start": "2091629",
    "end": "2105070"
  },
  {
    "text": "it's a large team and it's a great collaboration between Oracle labs and various universities and",
    "start": "2105070",
    "end": "2112670"
  },
  {
    "text": "it's finally making its way towards being part of the open JDK and any",
    "start": "2112670",
    "end": "2122839"
  },
  {
    "text": "questions I went five minutes shorter than I did in rehearsals but here as well can throw",
    "start": "2122839",
    "end": "2139609"
  },
  {
    "text": "up people who've got questions oh the run here this is easy girl VM targeting",
    "start": "2139609",
    "end": "2148130"
  },
  {
    "text": "viv assembly sorry could you repeat that most anybody looked at it's a growl targeting lip assembly targeting VIP",
    "start": "2148130",
    "end": "2156260"
  },
  {
    "text": "assembly as in the the binaries that you can put into D into the browser I'm not",
    "start": "2156260",
    "end": "2167839"
  },
  {
    "text": "sure they have I'll have to check well that will be an interesting combination",
    "start": "2167839",
    "end": "2174970"
  },
  {
    "text": "though the questions oh sorry",
    "start": "2176559",
    "end": "2184119"
  },
  {
    "text": "so is the work done in open JDK for the güell codebase or is it developed",
    "start": "2185019",
    "end": "2191480"
  },
  {
    "text": "elsewhere and then merged into open JDK and if the latter what sort of frequency do you have drops within the open JDK",
    "start": "2191480",
    "end": "2197779"
  },
  {
    "text": "for that it is developed in its own repository at the moment and that that",
    "start": "2197779",
    "end": "2205640"
  },
  {
    "text": "version is structured slightly differently because it is a multi release jar so it it will run on a",
    "start": "2205640",
    "end": "2212750"
  },
  {
    "text": "modified JDK 8 but also on JDK 9 and",
    "start": "2212750",
    "end": "2218299"
  },
  {
    "text": "upwards the drops are I couldn't swear",
    "start": "2218299",
    "end": "2226099"
  },
  {
    "text": "to how often that they are done at the moment they have some irregularity",
    "start": "2226099",
    "end": "2231910"
  },
  {
    "text": "irregularity in the frequency because some changes take longer and need more",
    "start": "2231910",
    "end": "2237200"
  },
  {
    "text": "time to bed down in the growl repo than others so lib growl for example as a",
    "start": "2237200",
    "end": "2243200"
  },
  {
    "text": "project requires changes to JVM see I and large internal changes to grow",
    "start": "2243200",
    "end": "2249650"
  },
  {
    "text": "also something like that takes a while to land so sometimes differences build up important bug fixes however do tend to",
    "start": "2249650",
    "end": "2257240"
  },
  {
    "text": "get ported across very quickly through",
    "start": "2257240",
    "end": "2265100"
  },
  {
    "text": "the questions no in that case thank you",
    "start": "2265100",
    "end": "2271310"
  },
  {
    "text": "very much Duncan [Applause]",
    "start": "2271310",
    "end": "2276729"
  }
]