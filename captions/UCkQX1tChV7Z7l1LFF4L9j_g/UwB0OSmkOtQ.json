[
  {
    "text": "[Music]",
    "start": "0",
    "end": "15829"
  },
  {
    "text": "[Music]",
    "start": "17940",
    "end": "27320"
  },
  {
    "text": "my PhD thesis was some of the found for a technology which um became involved in",
    "start": "27320",
    "end": "33640"
  },
  {
    "text": "a startup company called transitive Technologies and one of their most successful project products was uh",
    "start": "33640",
    "end": "39239"
  },
  {
    "text": "Rosetta and it's good to see lots of MacBooks around here and so on because they'll have Rosetta on them and uh and",
    "start": "39239",
    "end": "45800"
  },
  {
    "text": "uh so on um I did a lot of work on a metac",
    "start": "45800",
    "end": "51079"
  },
  {
    "text": "circular uh semi famous virtual machine I have a a book chapter in a book by O'Reilly um the book is called Beautiful",
    "start": "51079",
    "end": "58719"
  },
  {
    "text": "architectures and it's been translated into Russian Japanese and Chinese and I",
    "start": "58719",
    "end": "63800"
  },
  {
    "text": "only have the Chinese version in the US for obscure reasons um but it's it's",
    "start": "63800",
    "end": "69400"
  },
  {
    "text": "nice with being translated um I'm a software engineer uh",
    "start": "69400",
    "end": "74520"
  },
  {
    "text": "for uh AOL systems I mean I I do more than just coding I I also you know",
    "start": "74520",
    "end": "80119"
  },
  {
    "text": "engage my brain um so and this something we're encouraged to do at uh as a all",
    "start": "80119",
    "end": "85640"
  },
  {
    "text": "we're not just code monkeys and so on so so",
    "start": "85640",
    "end": "91880"
  },
  {
    "text": "um so my old research group boss was Steve Ferber and uh you know I'll",
    "start": "91880",
    "end": "97720"
  },
  {
    "text": "probably keep mentioning about how great Manchester is it's something that I do Manchester in the UK that is I hear",
    "start": "97720",
    "end": "102799"
  },
  {
    "text": "there are other ones um and Steve fber is a mancunian and he was one of the",
    "start": "102799",
    "end": "108479"
  },
  {
    "text": "co-developers of the arm processor and um what people used to say at the University Manchester was that",
    "start": "108479",
    "end": "115399"
  },
  {
    "text": "you know Steve is a great Professor but whenever he teaches a course he starts with transistors and then builds up and",
    "start": "115399",
    "end": "121840"
  },
  {
    "text": "so um I'm going to kind of do something a bit similar tonight and kind of start kind of low level with the jvm and and",
    "start": "121840",
    "end": "129280"
  },
  {
    "text": "build upwards and if people have problems with it raise your hand and I'll you know hopefully be able to",
    "start": "129280",
    "end": "135760"
  },
  {
    "text": "answer your uh questions and and concerns and so on it's a fairly new slide deck so I I expect people to have",
    "start": "135760",
    "end": "142840"
  },
  {
    "text": "problems and issues with it and and so on and I've got a whiteboard and whiteboard markers so so that's good um",
    "start": "142840",
    "end": "150800"
  },
  {
    "text": "what um I'm I'm going to do is kind of like introduce some of the underlying uh Technologies for the the jvm how um it",
    "start": "150800",
    "end": "158239"
  },
  {
    "text": "achieves portability um and then kind of go into some of the more challenging and novel",
    "start": "158239",
    "end": "163640"
  },
  {
    "text": "uh aspects of the of the jvm and how kind of performance is achieved uh in in those areas and then I'm going to start",
    "start": "163640",
    "end": "170560"
  },
  {
    "text": "talking about what we're doing at a systems with the The Zing virtual machine um which is kind of the latest",
    "start": "170560",
    "end": "176400"
  },
  {
    "text": "generation as all uh solution okay so",
    "start": "176400",
    "end": "183040"
  },
  {
    "text": "um a jvm described in a simple sentence so reading slides a software module that",
    "start": "183040",
    "end": "188519"
  },
  {
    "text": "provides the same execution environment to all Java applications and takes care of translation to the underlying layers",
    "start": "188519",
    "end": "195400"
  },
  {
    "text": "with regards to the execution of instructions and Resource Management that's a big sentence um let's look at a",
    "start": "195400",
    "end": "202480"
  },
  {
    "text": "picture okay we've got some code we can take the",
    "start": "202480",
    "end": "207560"
  },
  {
    "text": "same piece of code and we can run it on two different hardware architectures and two different operating systems and the",
    "start": "207560",
    "end": "213080"
  },
  {
    "text": "jvm is the thing which is doing the mapping between these things and the jvm is doing a whole lot of stuff it's",
    "start": "213080",
    "end": "218640"
  },
  {
    "text": "mapping you know the the the Java bite codes down to the hardware architecture and it's also dealing with things like",
    "start": "218640",
    "end": "224879"
  },
  {
    "text": "you know giving you a consistent threading model uh and and things like that I haven't done any slides on",
    "start": "224879",
    "end": "230040"
  },
  {
    "text": "threading models but if people are interested I can talk about threading models but okay so starting at kind of like you",
    "start": "230040",
    "end": "237840"
  },
  {
    "text": "know the the beginning the interpreted um so we have Java bite",
    "start": "237840",
    "end": "243360"
  },
  {
    "text": "codes they're wrapped up in a a Java class file and um when you write your Java program you'll compile it into a do",
    "start": "243360",
    "end": "250040"
  },
  {
    "text": "class file I'm assuming that's familiar to people in this audience because of who you are and and so on um but we need",
    "start": "250040",
    "end": "257280"
  },
  {
    "text": "to kind of uh uh bridge this Gap and the simplest way to do it is is with an interpreter so um and kind of although I",
    "start": "257280",
    "end": "266400"
  },
  {
    "text": "work on metac circular jvms and some which don't have interpreters in in general in production VMS you still need",
    "start": "266400",
    "end": "272000"
  },
  {
    "text": "an interpreter because you still end up with large methods that are running frequently and it's not really worth",
    "start": "272000",
    "end": "277680"
  },
  {
    "text": "spending the energy doing the compilation and a good example of that is in",
    "start": "277680",
    "end": "283039"
  },
  {
    "text": "servlets okay so let's kind of look at a a silly uh interpreter you know thing",
    "start": "283720",
    "end": "290479"
  },
  {
    "text": "that I've that I've written up here so I have an infinite loop we're running forever and we're fetching um bite codes",
    "start": "290479",
    "end": "298000"
  },
  {
    "text": "from a bik code stream which which is you know a class file we' loaded into memory I'm going to read a bite out of",
    "start": "298000",
    "end": "305680"
  },
  {
    "text": "the bite code stream and Advance the the program counter at the same time and then I'm going to do some switch",
    "start": "305680",
    "end": "310840"
  },
  {
    "text": "statements on the bite code so I'm going to decode what the bite code's meaning is and kind of dispatch it and work out",
    "start": "310840",
    "end": "317280"
  },
  {
    "text": "what's the the the the operation I want to perform and then I'm going to perform some operation so here are three example",
    "start": "317280",
    "end": "324400"
  },
  {
    "text": "bite codes I've chosen some easy ones because that makes it easy for me and um",
    "start": "324400",
    "end": "331120"
  },
  {
    "text": "what these bite codes are doing is you know iconst one is just going to put a value of one onto what's known as the",
    "start": "331120",
    "end": "336400"
  },
  {
    "text": "expression stack inside the The Interpreter um an I lo of zero will take",
    "start": "336400",
    "end": "341440"
  },
  {
    "text": "a local variable and put that onto the stack and I add will pop two things from",
    "start": "341440",
    "end": "347160"
  },
  {
    "text": "the stack add them together and push the result onto the stack and this is pretty much how the the jvm is defined if you",
    "start": "347160",
    "end": "353759"
  },
  {
    "text": "look in the the virtual machine specification you'll see that they'll have you know this is what a bite code",
    "start": "353759",
    "end": "358800"
  },
  {
    "text": "is this is what the expression stack looks like before this is what it looks like afterwards and here's the transformation from one to the other and",
    "start": "358800",
    "end": "366280"
  },
  {
    "text": "um okay so this isn't very efficient um we have",
    "start": "366280",
    "end": "374160"
  },
  {
    "text": "a lot of branching going on we've got to decode each uh operation and we've got to manipulate the local variables in the",
    "start": "374160",
    "end": "381360"
  },
  {
    "text": "stack um you know we can do better um you can do better in inside interpreters",
    "start": "381360",
    "end": "388599"
  },
  {
    "text": "um you can do things like a threaded interpretation so with um with threaded",
    "start": "388599",
    "end": "394400"
  },
  {
    "text": "interpretation here we have a single switch statement which is going to Branch to one of these bite codes with a",
    "start": "394400",
    "end": "399919"
  },
  {
    "text": "threaded interpreter instead of having this break which is going to go down here and conceptually we're going to go back down to there with a threaded",
    "start": "399919",
    "end": "406000"
  },
  {
    "text": "interpreter you basically Branch to the next bite code kind of where the the brake statement is is there and GCC will",
    "start": "406000",
    "end": "413520"
  },
  {
    "text": "actually do this as a compiler optimization and uh and so on so a lot of these things can be done for you",
    "start": "413520",
    "end": "421199"
  },
  {
    "text": "um we're always going to be kind of accessing memory for manipulating our stack or or local variables so if we",
    "start": "421199",
    "end": "428720"
  },
  {
    "text": "want to have an efficient interpreter and we've got access to kind of like the machine uh the low levels of the machine",
    "start": "428720",
    "end": "434360"
  },
  {
    "text": "we can start putting these values into into registers in the machine and that means we can avoid accessing uh",
    "start": "434360",
    "end": "440440"
  },
  {
    "text": "memory um one of the kind of like more Advanced Techniques is to kind of pre-code the bite codes and just realize",
    "start": "440440",
    "end": "447680"
  },
  {
    "text": "that you know bite codes are just going into arbitrary addresses so you can just create a list of those addresses but",
    "start": "447680",
    "end": "453680"
  },
  {
    "text": "people don't tend to do that because you might as well compile when you're getting into that level of",
    "start": "453680",
    "end": "459160"
  },
  {
    "text": "complexity um and then there there there are other tricks like um optimizing the",
    "start": "459160",
    "end": "464520"
  },
  {
    "text": "dispatch so it's just a arithmetic operation which is one of the tricks done in the the dvic",
    "start": "464520",
    "end": "471719"
  },
  {
    "text": "VM okay so interpreters that's it done uh any questions no good uh",
    "start": "471919",
    "end": "481440"
  },
  {
    "text": "um so um interpreters are intentionally simple um but um their performance isn't",
    "start": "481680",
    "end": "490240"
  },
  {
    "text": "that great so we want to do a just in time compilation and um just in time is one",
    "start": "490240",
    "end": "497400"
  },
  {
    "text": "of these terms which um I believe the Japanese actually stole from America from a grocery chain but I'm there's a",
    "start": "497400",
    "end": "504800"
  },
  {
    "text": "whole origin to to just in time that that I'm not familiar with but uh just in time inside a virtual machine means",
    "start": "504800",
    "end": "512399"
  },
  {
    "text": "that we have some code we're executing it frequently let's compile it so that it runs faster uh we don't compile",
    "start": "512399",
    "end": "519360"
  },
  {
    "text": "everything we just focus on running the hot parts of the code so you know you get names like hotspot you know",
    "start": "519360",
    "end": "525000"
  },
  {
    "text": "indicative of the fact that you're just concentrating on uh compiling the hot regions of",
    "start": "525000",
    "end": "530320"
  },
  {
    "text": "code so I'm going to talk about every single bit of a of a of a compiler isn't",
    "start": "530320",
    "end": "535920"
  },
  {
    "text": "that scary it shouldn't be and hopefully you know I'll I'll do a good enough",
    "start": "535920",
    "end": "542720"
  },
  {
    "text": "explanation that you can kind of follow how a VM compiler Works um and so stop",
    "start": "542720",
    "end": "549959"
  },
  {
    "text": "me when you're failing to understand it really shouldn't be that hard so the first thing we want to do is we want to",
    "start": "549959",
    "end": "556839"
  },
  {
    "text": "turn the bite codes into some kind of graph representation now the reason we're going to do this is because we",
    "start": "556839",
    "end": "562680"
  },
  {
    "text": "want to eliminate the overhead of having this uh stack uh and and so on and I'm going to show you what the graph",
    "start": "562680",
    "end": "568480"
  },
  {
    "text": "representation looks like and I'm actually going to use examples taken from hotpots so it's scary but not",
    "start": "568480",
    "end": "574640"
  },
  {
    "text": "really um the ne the next thing is we've got this graph of our instructions connected",
    "start": "574640",
    "end": "581040"
  },
  {
    "text": "to together um what we then want to do is we want to linearize um the graph",
    "start": "581040",
    "end": "586760"
  },
  {
    "text": "because instructions inside a computer addresses and the sequential in memory so you've got to linearize that graph",
    "start": "586760",
    "end": "593160"
  },
  {
    "text": "somehow and so I'm going to talk about how how that's done um at that stage you",
    "start": "593160",
    "end": "598920"
  },
  {
    "text": "have this infinite pool of virtual registers um and then the next thing that needs to happen is you need to map",
    "start": "598920",
    "end": "605279"
  },
  {
    "text": "that infinite virtual pool of registers into some finite resource within the processor some finite number of registers and you know mapping infinite",
    "start": "605279",
    "end": "613519"
  },
  {
    "text": "into finite doesn't work so what happens when it doesn't work well you go and use the stack in in",
    "start": "613519",
    "end": "620079"
  },
  {
    "text": "memory um then once you've got um instruction",
    "start": "620079",
    "end": "625240"
  },
  {
    "text": "nodes and registers allocated to them then you can actually do some code generation",
    "start": "625240",
    "end": "630560"
  },
  {
    "text": "so let's start off with a very simple Java program so this is uh",
    "start": "630560",
    "end": "637000"
  },
  {
    "text": "Fibonacci so um Fibonacci is just kind of a simple recursive uh routine for for",
    "start": "637000",
    "end": "644519"
  },
  {
    "text": "count Computing uh the the Fibonacci sequence it's written recursively",
    "start": "644519",
    "end": "649839"
  },
  {
    "text": "there's no clever optimizations in this I wanted it to be a simple example and to fit on to to slides and uh and and so",
    "start": "649839",
    "end": "656120"
  },
  {
    "text": "on but it's a kind of a classic uh example at the same time time so let's go from the the Java to",
    "start": "656120",
    "end": "665360"
  },
  {
    "text": "the bite code now a people comfortable with bite code and degrees so what we",
    "start": "665360",
    "end": "672440"
  },
  {
    "text": "can see in in the bite code is that we're going to access uh local variables and push constants onto the stack as I I",
    "start": "672440",
    "end": "679120"
  },
  {
    "text": "mentioned earlier and I can kind of work through this on the the Whiteboard if it's useful to",
    "start": "679120",
    "end": "686079"
  },
  {
    "text": "um what we can see from the the definition of the the method is that it",
    "start": "686079",
    "end": "691720"
  },
  {
    "text": "takes an integer as a parameter in the the jvm the first argument um is in the",
    "start": "691720",
    "end": "699920"
  },
  {
    "text": "uh first local variable so this ILO of zero is actually taking the integer argument and putting it onto the stack",
    "start": "699920",
    "end": "707040"
  },
  {
    "text": "then we're going to push onto the stack the value of one and then we're going to do a greater than comparison and if if",
    "start": "707040",
    "end": "713639"
  },
  {
    "text": "it is greater than then we're going to go to location seven so if we you know flip back to our original code this less",
    "start": "713639",
    "end": "722040"
  },
  {
    "text": "than equals than sign has been kind of flipped around from being less than equals to be greater than and the the",
    "start": "722040",
    "end": "728560"
  },
  {
    "text": "bite code the the bik code immediately following this this this com you know uh",
    "start": "728560",
    "end": "734120"
  },
  {
    "text": "compare and branch is going to put a one on the expression stack and return in",
    "start": "734120",
    "end": "739240"
  },
  {
    "text": "the case that it's less than equal to one so is that kind of clear kind of what's",
    "start": "739240",
    "end": "745079"
  },
  {
    "text": "what's going on with that that flow and so on so good I'm not scaring people yes",
    "start": "745079",
    "end": "750720"
  },
  {
    "text": "um so then we get down to kind of uh B code 7 it's going to load the the the in",
    "start": "750720",
    "end": "756959"
  },
  {
    "text": "argument again the value of one subtract it and then it's going to recursively call the Fibonacci method so this",
    "start": "756959",
    "end": "764880"
  },
  {
    "text": "directly corresponds to this call here we're doing n minus one and we're recursively calling",
    "start": "764880",
    "end": "771680"
  },
  {
    "text": "Fibonacci so the result of that will get left on the expression stack and then",
    "start": "771680",
    "end": "777920"
  },
  {
    "text": "here we load the incoming arguments again we load the value to we subtract them and we do another recursive",
    "start": "777920",
    "end": "783959"
  },
  {
    "text": "call finally we add the two values together and then we return so hopefully",
    "start": "783959",
    "end": "790839"
  },
  {
    "text": "people can see that um kind of there's been a kind of a syntax directed translation of the the Java code into",
    "start": "790839",
    "end": "797480"
  },
  {
    "text": "the bite code there's not really been any smarts or cleverness going on it's a fair Fairly literal translation from one",
    "start": "797480",
    "end": "803639"
  },
  {
    "text": "to the other so people happy you're wondering where I'm going with this",
    "start": "803639",
    "end": "809880"
  },
  {
    "text": "okay we're going down of course okay so the going you know going",
    "start": "809880",
    "end": "818360"
  },
  {
    "text": "back a few stages I was saying that the next thing that's going to happen is that we're going to build up a a graph",
    "start": "818360",
    "end": "824720"
  },
  {
    "text": "of nodes and um the client the C1 compiler",
    "start": "824720",
    "end": "830240"
  },
  {
    "text": "inside hotspot and the what happens is you have uh basic blocks so when you",
    "start": "830240",
    "end": "838560"
  },
  {
    "text": "have um you know a block structured code like this you can imagine that this return",
    "start": "838560",
    "end": "844639"
  },
  {
    "text": "one is one block and this other return is another block of code and so on so",
    "start": "844639",
    "end": "849680"
  },
  {
    "text": "the the term basic block can mean different things at kind of high level and and low level within the",
    "start": "849680",
    "end": "855120"
  },
  {
    "text": "compiler looking at what we've got here and here are the command line arguments",
    "start": "855120",
    "end": "860399"
  },
  {
    "text": "to get you this print out from this very method that I was showing you a few seconds ago you can get this D you can't",
    "start": "860399",
    "end": "866120"
  },
  {
    "text": "get this dump pout out of a regular jvm if you the Java rbar G then that's the debug version of the jvm and you can see",
    "start": "866120",
    "end": "874000"
  },
  {
    "text": "what's going on inside the the VM you can see the VM internals yourself and you can go and you know go you know what",
    "start": "874000",
    "end": "880360"
  },
  {
    "text": "horrible code have you generated with my method and and and so on if you if you really care so um first basic block we",
    "start": "880360",
    "end": "887800"
  },
  {
    "text": "have is just the the entry basic block here we have um two uh graph nodes we",
    "start": "887800",
    "end": "895560"
  },
  {
    "text": "have a graph node which is a constant one and we have another graph node which is a comparison between two of the graph",
    "start": "895560",
    "end": "902000"
  },
  {
    "text": "nodes and a branch to one of the two basic blocks based based on those things",
    "start": "902000",
    "end": "907480"
  },
  {
    "text": "and we can see here it says I3 so where is I3 um I3 isn't defined I3 is actually",
    "start": "907480",
    "end": "914399"
  },
  {
    "text": "the the incoming uh argument to the the method and I4 is the constant",
    "start": "914399",
    "end": "920800"
  },
  {
    "text": "one okay so the we then have basic block number one which has got this I6 which",
    "start": "920800",
    "end": "927759"
  },
  {
    "text": "is again is the constant one an i7 an i7 is just an I return graph",
    "start": "927759",
    "end": "933199"
  },
  {
    "text": "node with an I6 so you've got this graph of blocks and",
    "start": "933199",
    "end": "940199"
  },
  {
    "text": "they've got a a list you know they've got instructions and the instructions are kind of defined in terms of uh",
    "start": "940199",
    "end": "945800"
  },
  {
    "text": "things coming into them so they kind of internally form uh and um I've chosen an",
    "start": "945800",
    "end": "952440"
  },
  {
    "text": "example which doesn't really show one of the more complicated operations this this uh compiler intermediate form is",
    "start": "952440",
    "end": "958600"
  },
  {
    "text": "known as static single assignment and um so there's a there's there's an issue",
    "start": "958600",
    "end": "964759"
  },
  {
    "text": "with static single assignment what single assignment gives you is it gives you this property that things are only",
    "start": "964759",
    "end": "969880"
  },
  {
    "text": "written to ones so here we're defining a value to I6 here we're divining defining",
    "start": "969880",
    "end": "975920"
  },
  {
    "text": "a value to i7 we've only defined these values once and what this gives you as a",
    "start": "975920",
    "end": "981480"
  },
  {
    "text": "property inside a compiler is that you only have true dependence so um if",
    "start": "981480",
    "end": "987839"
  },
  {
    "text": "you're kind of a hardware guy then it's kind of a read after write uh dependence so something's written and then you read",
    "start": "987839",
    "end": "993480"
  },
  {
    "text": "it and that's the only kind of dependence you're allowed you're not allowed write after write because that would mean that you writing to it twice",
    "start": "993480",
    "end": "999440"
  },
  {
    "text": "it wouldn't be single assignment and you're not allowed anti-dependence uh which is where you have a right after a",
    "start": "999440",
    "end": "1007240"
  },
  {
    "text": "read and so how do you deal with loops and things like that where you do get that property you have a special",
    "start": "1007240",
    "end": "1013319"
  },
  {
    "text": "instruction node called a fee and a a fee instruction um takes our takes",
    "start": "1013319",
    "end": "1019480"
  },
  {
    "text": "inputs which are other instructions but the the choice of which instruction you use is based on where the graph is",
    "start": "1019480",
    "end": "1025918"
  },
  {
    "text": "coming from and it sounds complicated and it is um there are PDI papers on how",
    "start": "1025919",
    "end": "1032240"
  },
  {
    "text": "you constructing it is not too bad deconstructing it is kind of a a more",
    "start": "1032240",
    "end": "1037400"
  },
  {
    "text": "tricky uh situation so anyway we've got this this graph and we can see here this is kind",
    "start": "1037400",
    "end": "1044000"
  },
  {
    "text": "of like the more complicated bit from the example where we're taking this input argument again we're subtracting",
    "start": "1044000",
    "end": "1049799"
  },
  {
    "text": "one from it we're doing the recursive call we're taking the input argument again we're subtracting two from it and",
    "start": "1049799",
    "end": "1056120"
  },
  {
    "text": "we're doing the recursive call we're adding the two values together and then we're returning back to the the the",
    "start": "1056120",
    "end": "1063400"
  },
  {
    "text": "caller so hopefully you can see how we've gone from the Java source code",
    "start": "1063400",
    "end": "1068799"
  },
  {
    "text": "down to this graph of instruction nodes kind of Step by",
    "start": "1068799",
    "end": "1073840"
  },
  {
    "text": "Step okay so we're going to go even further down",
    "start": "1073840",
    "end": "1079679"
  },
  {
    "text": "so around it was transist I'm going down to the transistors um from from my uh",
    "start": "1080760",
    "end": "1086400"
  },
  {
    "text": "Source example so um the the jvm option for this is print IR with L so IR means",
    "start": "1086400",
    "end": "1094240"
  },
  {
    "text": "intermediate representation and inside the client compiler intermediate representation means the graph and the L",
    "start": "1094240",
    "end": "1102200"
  },
  {
    "text": "means this kind of lowlevel intermediate representation which is the representation when things have been",
    "start": "1102200",
    "end": "1107559"
  },
  {
    "text": "made into a a your list uh of instructions um we can see what's going",
    "start": "1107559",
    "end": "1114960"
  },
  {
    "text": "on is that my graph node here immediately afterwards has these uh L",
    "start": "1114960",
    "end": "1122039"
  },
  {
    "text": "instructions associated with it so um what's Happening Here is it it reads",
    "start": "1122039",
    "end": "1128159"
  },
  {
    "text": "left to right so we're we're moving the value in RDI into this virtual register",
    "start": "1128159",
    "end": "1134200"
  },
  {
    "text": "from my infinite pool of virtual registers it's fantastic I've got this infinite pool of virtual register I don't need to worry about memory um I'm",
    "start": "1134200",
    "end": "1141640"
  },
  {
    "text": "moving RDI into r36 and RDI is actually from the calling",
    "start": "1141640",
    "end": "1147760"
  },
  {
    "text": "Convention of the VM is the the incoming argument register and this is the The",
    "start": "1147760",
    "end": "1152799"
  },
  {
    "text": "Zing virtual machine I'm taking this example from so you may see different things if you're using a different",
    "start": "1152799",
    "end": "1158720"
  },
  {
    "text": "VM um there's some stuff here to do with save points I'm going to skip over that",
    "start": "1158720",
    "end": "1163960"
  },
  {
    "text": "it's more to do with garbage collection uh and I've got stuff at the end to kind of talk about what goes on with with",
    "start": "1163960",
    "end": "1170159"
  },
  {
    "text": "garbage collection um and here we have a branch which says always Branch to to block",
    "start": "1170159",
    "end": "1175360"
  },
  {
    "text": "number zero so block number zero is here and it's going to do the comparison",
    "start": "1175360",
    "end": "1181880"
  },
  {
    "text": "between r36 which is what was defined up here and the the the value one and the",
    "start": "1181880",
    "end": "1189360"
  },
  {
    "text": "value one has gone from being in a its own individual graph node and just being folded into this instruction uh which",
    "start": "1189360",
    "end": "1196039"
  },
  {
    "text": "one of the things that happens with the the L Construction in the comp client compiler so we're doing a comparison",
    "start": "1196039",
    "end": "1202840"
  },
  {
    "text": "between this virtual register number 36 and the constant one we're going to Branch if it's",
    "start": "1202840",
    "end": "1208159"
  },
  {
    "text": "greater than to block number two which is over there um otherwise we're going",
    "start": "1208159",
    "end": "1213440"
  },
  {
    "text": "to fall through then if we fall through we're into our case where we're going to return one we're going and put the value",
    "start": "1213440",
    "end": "1219600"
  },
  {
    "text": "of one into Rax which is the result register on Intel processors commonly um",
    "start": "1219600",
    "end": "1225120"
  },
  {
    "text": "and then we're just going to do the the return and the the return kind of licitly uses the Rax register but it",
    "start": "1225120",
    "end": "1231840"
  },
  {
    "text": "doesn't actually in the Intel architecture not to worry about these things so over here we have um our graph",
    "start": "1231840",
    "end": "1240120"
  },
  {
    "text": "node for doing the subtraction I3 minus I4 that turns into a move of the value",
    "start": "1240120",
    "end": "1245240"
  },
  {
    "text": "of r36 into r37 so we've over here we copied the input argument into r36 over",
    "start": "1245240",
    "end": "1252400"
  },
  {
    "text": "here we're copying the input arguments into again into r37 and creating redundant copies um when we're doing",
    "start": "1252400",
    "end": "1260159"
  },
  {
    "text": "this kind of construction we don't worry about having lots of copies because the register allocator job is actually to",
    "start": "1260159",
    "end": "1265600"
  },
  {
    "text": "remove copies so a good register allocator will eliminate all of the copies so we move the value into r37 and",
    "start": "1265600",
    "end": "1273320"
  },
  {
    "text": "then we're going to subtract from r37 the value one and put the result into r37 um so you might observe here that",
    "start": "1273320",
    "end": "1281919"
  },
  {
    "text": "we've kind of we could have just subtracted one and r36 and put the resultant to r37",
    "start": "1281919",
    "end": "1288919"
  },
  {
    "text": "um Intel instructions only have two operand and so this is something that goes on inside the client compiler to",
    "start": "1288919",
    "end": "1295080"
  },
  {
    "text": "try and uh facilitate easy mapping from uh the the compile the compiler in uh",
    "start": "1295080",
    "end": "1301559"
  },
  {
    "text": "intermediate form to the Intel instructions it's just to uh to make two of the arguments the same",
    "start": "1301559",
    "end": "1308279"
  },
  {
    "text": "um if you're doing this on on a risk architecture which tends to have three three address instructions then you know",
    "start": "1308279",
    "end": "1315559"
  },
  {
    "text": "this actually doesn't happen by the the client compiler and so on so there are some differences in time in terms of the",
    "start": "1315559",
    "end": "1321520"
  },
  {
    "text": "compiler intermediate form depending on what which architecture you're targeting so we've done the subtracts of",
    "start": "1321520",
    "end": "1329360"
  },
  {
    "text": "one then we're doing the recursive call here we're going to do the subtract of two and we've got the Subtract with two",
    "start": "1329360",
    "end": "1336320"
  },
  {
    "text": "we've made another copy of the incoming arguments into R39 a recursive call um and then finally we've got our",
    "start": "1336320",
    "end": "1344240"
  },
  {
    "text": "add and our return down there so we've gone down a layer we've gone",
    "start": "1344240",
    "end": "1352760"
  },
  {
    "text": "from having a graph and we've gone to a linearized list of instructions but we can't yet run these instructions because",
    "start": "1352760",
    "end": "1359240"
  },
  {
    "text": "they're using registers from an infinite pool and processors don't have infinite pools or registers and",
    "start": "1359240",
    "end": "1365880"
  },
  {
    "text": "so the next thing we must do is register allocate it and at the bottom again is",
    "start": "1365880",
    "end": "1372080"
  },
  {
    "text": "the kind of the the Java G option which will show you what's going on inside the compiler uh when you when you this this",
    "start": "1372080",
    "end": "1378640"
  },
  {
    "text": "next thing uh happens and on Intel processors the register",
    "start": "1378640",
    "end": "1384960"
  },
  {
    "text": "naming convention is somewhat whacky so uh try not to think too much about it um",
    "start": "1384960",
    "end": "1391000"
  },
  {
    "text": "but hopefully what you can see is that you know I've got rid of the the graph nodes from the IR so here we just have",
    "start": "1391000",
    "end": "1398520"
  },
  {
    "text": "the L instructions which are in a list you know starting at zero they go through to 52 so they're in a a list um",
    "start": "1398520",
    "end": "1406919"
  },
  {
    "text": "and now instead of mentioning things like r36 they mention specific registers so we're going to move RDI into RBX and",
    "start": "1406919",
    "end": "1414840"
  },
  {
    "text": "here we're going to compare RBX with the value of of one um and these directly",
    "start": "1414840",
    "end": "1420080"
  },
  {
    "text": "correspond to the things we had before except instead of having an infinite pool of virtual registers we now have specific ones and the other thing that's",
    "start": "1420080",
    "end": "1427240"
  },
  {
    "text": "gone on is that we've lost moves so um the the moves have been elited eliminated by the register allocator",
    "start": "1427240",
    "end": "1433960"
  },
  {
    "text": "because the register allocator is always trying to make sure that the source of a move and the destination of a move of the same thing and then the move is",
    "start": "1433960",
    "end": "1440520"
  },
  {
    "text": "doing no no work at all so it just eliminates the instruction",
    "start": "1440520",
    "end": "1447840"
  },
  {
    "text": "so finally we get the Intel machine code for that and there's some boiler plates",
    "start": "1448240",
    "end": "1455720"
  },
  {
    "text": "in here so there's some boiler plate for kind of saving registers um there's some boiler plate",
    "start": "1455720",
    "end": "1461720"
  },
  {
    "text": "for restoring the registers which were saved but you can see that you know I've got to compare with ebx and the value of",
    "start": "1461720",
    "end": "1469279"
  },
  {
    "text": "one and here we had um a compare with you",
    "start": "1469279",
    "end": "1474840"
  },
  {
    "text": "know RBX and the value of one the E and the RS are somewhat arbitrary uh can the",
    "start": "1474840",
    "end": "1481279"
  },
  {
    "text": "the RS mean 64-bit versions of the registers it's an integer so it's really a six a 32-bit version of the register",
    "start": "1481279",
    "end": "1487399"
  },
  {
    "text": "but for Simplicity inside the compiler we just assume it be a 64-bit um down here we have the the",
    "start": "1487399",
    "end": "1495320"
  },
  {
    "text": "calls which are going to be the recursive calls we have have um a decrement which is a subtract of one we",
    "start": "1495320",
    "end": "1502240"
  },
  {
    "text": "have a subtrac of two we have again the recursive call we have at the end the",
    "start": "1502240",
    "end": "1508120"
  },
  {
    "text": "add which is going to add these values together and we're going to make sure that eax holds the result at the end and",
    "start": "1508120",
    "end": "1514080"
  },
  {
    "text": "then we're going to restore the the the registers which need to be preserved and",
    "start": "1514080",
    "end": "1519399"
  },
  {
    "text": "uh do the do the return so that wasn't painful",
    "start": "1519399",
    "end": "1527039"
  },
  {
    "text": "it's a complicated thing um so the the the VM allocates memory",
    "start": "1530120",
    "end": "1538480"
  },
  {
    "text": "all the time uh Java Has This brilliant property of having memory safety you never free up the memory memory safety",
    "start": "1538480",
    "end": "1544559"
  },
  {
    "text": "is a good thing gets rid of whole classes of uh bugs and so on it means people can develop Java code very",
    "start": "1544559",
    "end": "1550200"
  },
  {
    "text": "quickly and it's a whole advantage of of using Java the the problem with allocating memory all the time is every",
    "start": "1550200",
    "end": "1557039"
  },
  {
    "text": "every once in a while you wants to stop the uh application from changing memory",
    "start": "1557039",
    "end": "1562559"
  },
  {
    "text": "and what a safe point is it's a way of the the the VM to request that all of",
    "start": "1562559",
    "end": "1569520"
  },
  {
    "text": "the application threads stop running to let the garbage collector threads to run so um you can see here that what's",
    "start": "1569520",
    "end": "1577600"
  },
  {
    "text": "happening is there's a comparison to say has some flag been set which says I need to stop running and if so go and go and",
    "start": "1577600",
    "end": "1586520"
  },
  {
    "text": "go to the place where where I stopped running and let the garbage collector run okay and I'll mention something",
    "start": "1586520",
    "end": "1593399"
  },
  {
    "text": "about stop the world garbage collectors and concurrent garbage collectors and one of the take-homes from this talk is",
    "start": "1593399",
    "end": "1598520"
  },
  {
    "text": "that concurrent garbage collectors are the be all and endall and you want to pay big money for them",
    "start": "1598520",
    "end": "1604520"
  },
  {
    "text": "so um there's a little bit of extra code which wasn't mentioned in anything in the kind of the the push down which was",
    "start": "1604520",
    "end": "1611720"
  },
  {
    "text": "to do with um exception handling so in Java methods you might call through to",
    "start": "1611720",
    "end": "1617159"
  },
  {
    "text": "something this code does method calls and those things might throw exceptions and what this code does",
    "start": "1617159",
    "end": "1624159"
  },
  {
    "text": "is it just goes in that case you know just do it doesn't quite say it but what",
    "start": "1624159",
    "end": "1629480"
  },
  {
    "text": "this will achieve um is just returning to the thing which called it and say I don't handle this exception so by",
    "start": "1629480",
    "end": "1636279"
  },
  {
    "text": "default every every bit of generated code will have something which says if I don't handle this exception make sure",
    "start": "1636279",
    "end": "1642360"
  },
  {
    "text": "that I return to the caller uh and make sure that they try and handle the exception um and and then there's a",
    "start": "1642360",
    "end": "1648559"
  },
  {
    "text": "little bit at the end here to do with deoptimization and deoptimization is something that I'll kind of pick up on",
    "start": "1648559",
    "end": "1654559"
  },
  {
    "text": "bit later so this slide deck was done by",
    "start": "1654559",
    "end": "1660120"
  },
  {
    "text": "someone other than me and they thought that dead code elimination was a great compiler optimization and I think dead code",
    "start": "1660120",
    "end": "1666640"
  },
  {
    "text": "elimination means that you're writing bad code if there's that much dead code it",
    "start": "1666640",
    "end": "1673120"
  },
  {
    "text": "shouldn't be no it's not quite true um especially if you're writing metac circular times and things like that you",
    "start": "1673120",
    "end": "1679320"
  },
  {
    "text": "have big bits of your code base which aren't necessary uh all of the time they might just be there for debugging and",
    "start": "1679320",
    "end": "1685519"
  },
  {
    "text": "things like that in which case you can uh um eliminate them you can reduce the",
    "start": "1685519",
    "end": "1690559"
  },
  {
    "text": "size of the the generated code um prevents irrelevant operations to occupy",
    "start": "1690559",
    "end": "1695960"
  },
  {
    "text": "time in the CPU yeah not my statement um but uh basically having code which isn't",
    "start": "1695960",
    "end": "1702960"
  },
  {
    "text": "useful to the running of the program get rid of it um and so guess what the the compilers do",
    "start": "1702960",
    "end": "1710518"
  },
  {
    "text": "that okay now method in lining so you",
    "start": "1711440",
    "end": "1717240"
  },
  {
    "text": "know I the first time I was in California was for jvm1 so I am older than I look um and uh one of the take",
    "start": "1717240",
    "end": "1725760"
  },
  {
    "text": "homes from jvm1 was that when it comes to optimizing Java programs what's the main trick that the jvm does is it in",
    "start": "1725760",
    "end": "1732279"
  },
  {
    "text": "lines and in lines and then you know if it still isn't going fast enough it in lines again you know inline inline",
    "start": "1732279",
    "end": "1738919"
  },
  {
    "text": "inline it's one of the the key tricks and um what inlining does is it it takes",
    "start": "1738919",
    "end": "1745360"
  },
  {
    "text": "um uh a method so in this case we've got this days left method and rather than",
    "start": "1745360",
    "end": "1750399"
  },
  {
    "text": "calling it it it inlines the the the code of the the method body into the the",
    "start": "1750399",
    "end": "1756519"
  },
  {
    "text": "call site um here so it's getting rid of the call into the",
    "start": "1756519",
    "end": "1764159"
  },
  {
    "text": "method and you saw that you know from the the Deep dive into what the comp was producing there's a certain amount of",
    "start": "1764159",
    "end": "1769880"
  },
  {
    "text": "boiler plate to do with entering a method and returning from a method so the inlining gets rid of that but it",
    "start": "1769880",
    "end": "1775919"
  },
  {
    "text": "also enables other optimizations so if you see in this example it's passing",
    "start": "1775919",
    "end": "1781320"
  },
  {
    "text": "through the value of zero and here if x equals zero we're going to return zero and guess what in that situation this",
    "start": "1781320",
    "end": "1787600"
  },
  {
    "text": "lse statement is is dead code so inlining enables you to do constant",
    "start": "1787600",
    "end": "1793320"
  },
  {
    "text": "propagation so it's propagating constants and then eliminating code which then turns out to be dead because it was unreachable uh and",
    "start": "1793320",
    "end": "1801840"
  },
  {
    "text": "so so this is going a bit more depth with the what the previous example looks",
    "start": "1801840",
    "end": "1808519"
  },
  {
    "text": "like when you've taken the method body and replicated it all of the times which were which were",
    "start": "1808519",
    "end": "1816278"
  },
  {
    "text": "necessary and yet more so constant propagation okay",
    "start": "1817760",
    "end": "1825840"
  },
  {
    "text": "lovely uh redundancy removal so this slide was written by a marketing person",
    "start": "1825840",
    "end": "1830960"
  },
  {
    "text": "I would call it common sub expression elimination but anyway it's if you have if you have two things two two",
    "start": "1830960",
    "end": "1837720"
  },
  {
    "text": "statements which are doing the same thing so if I have you know Y = X + 1",
    "start": "1837720",
    "end": "1843600"
  },
  {
    "text": "and zal X+ one then why do I do the work of computing X+ one twice I can common",
    "start": "1843600",
    "end": "1850440"
  },
  {
    "text": "up the work and just have x + one ones and I can say Z equals y and",
    "start": "1850440",
    "end": "1859080"
  },
  {
    "text": "it sounds like it should be a very complicated optimization I assure you it isn't basically you you you work out a",
    "start": "1859080",
    "end": "1865559"
  },
  {
    "text": "way of putting all of the instructions into a hash into a hash table and if you see that you've got a a hit in the hash",
    "start": "1865559",
    "end": "1871080"
  },
  {
    "text": "table that means you've seen this instruction before and and then you go W you know I don't need to do the work I",
    "start": "1871080",
    "end": "1877000"
  },
  {
    "text": "can just reuse the result of that instruction and that kind of falls out from static single assignment form which",
    "start": "1877000",
    "end": "1883000"
  },
  {
    "text": "is why compiler people like static single assignment form um and so on",
    "start": "1883000",
    "end": "1889360"
  },
  {
    "text": "okay so the first two examples were from marketing and then here's one that I like uh lowlevel tree",
    "start": "1889360",
    "end": "1896919"
  },
  {
    "text": "rewriting so um what have I got I've got a I've got a class and my class has got a field in it and I've got a very simple",
    "start": "1896919",
    "end": "1905000"
  },
  {
    "text": "method my method is just going to increment the field so is that over anyone's",
    "start": "1905000",
    "end": "1911960"
  },
  {
    "text": "head good um so what do we get when we turn this",
    "start": "1911960",
    "end": "1918279"
  },
  {
    "text": "into bite code we get um a get field uh instruction which is going to read the",
    "start": "1918279",
    "end": "1923559"
  },
  {
    "text": "field and push it onto the expression stack we're going to generate the constant one and we're going to add the",
    "start": "1923559",
    "end": "1929639"
  },
  {
    "text": "two top of the stack values together so that's going to do the Plus+ operation and then we're going to do a a",
    "start": "1929639",
    "end": "1936639"
  },
  {
    "text": "put field to write the result back so whilst in the Java code oh Mr semicolon",
    "start": "1936639",
    "end": "1942679"
  },
  {
    "text": "so shoot me but um the the",
    "start": "1942679",
    "end": "1949799"
  },
  {
    "text": "um so whilst in the Java code this is a single uh expression it's turned into",
    "start": "1949799",
    "end": "1955120"
  },
  {
    "text": "many B codes as you can see from this this example I did actually compile this but I obviously didn't copy the compile",
    "start": "1955120",
    "end": "1961600"
  },
  {
    "text": "the code I compiled into the into this so you know when I did the kind of the",
    "start": "1961600",
    "end": "1967480"
  },
  {
    "text": "the Deep dive from the the source code down to the the instructions we generate what we'd end up with in in in that uh",
    "start": "1967480",
    "end": "1974720"
  },
  {
    "text": "case is you know the get field would turn into a a load of the field into some register I'm calling it R1 I'm",
    "start": "1974720",
    "end": "1982000"
  },
  {
    "text": "going to move the value of one into R2",
    "start": "1982000",
    "end": "1987399"
  },
  {
    "text": "I'm going to add the two values together and then I'm going to store the result uh back into into",
    "start": "1987399",
    "end": "1994440"
  },
  {
    "text": "memory and hopefully you're now feeling somewhat comfortable with how that code",
    "start": "1994440",
    "end": "2000960"
  },
  {
    "text": "could actually be generated by the the the VM to the the route when uh Computing",
    "start": "2000960",
    "end": "2009679"
  },
  {
    "text": "the the the linear uh form um so when",
    "start": "2009679",
    "end": "2014919"
  },
  {
    "text": "you tend to it depends where you do this um I in the metac circular VMS I've",
    "start": "2014919",
    "end": "2021000"
  },
  {
    "text": "already linearized the the code when I'm doing the the tree re writing um if I'm",
    "start": "2021000",
    "end": "2026080"
  },
  {
    "text": "doing this in a compiler like the server compiler in hotspot then that has a a a",
    "start": "2026080",
    "end": "2031760"
  },
  {
    "text": "a tree uh the whole thing is in a graph and you know uh you can look at regions",
    "start": "2031760",
    "end": "2037000"
  },
  {
    "text": "of a graph as if the trees um is it true that you work from the",
    "start": "2037000",
    "end": "2042639"
  },
  {
    "text": "leaves upwards I I think the answer is yes um so yeah hope that answers it",
    "start": "2042639",
    "end": "2052040"
  },
  {
    "text": "yes um okay so what I what I want to kind of",
    "start": "2052040",
    "end": "2057839"
  },
  {
    "text": "look at as a compiler optimization is uh tree rewriting um and so what I can observe",
    "start": "2057839",
    "end": "2065839"
  },
  {
    "text": "is that this part of my tree is just adding a constant one in which case",
    "start": "2065839",
    "end": "2072280"
  },
  {
    "text": "previously I was moving the constant one into a register what I can do is I can just",
    "start": "2072280",
    "end": "2078158"
  },
  {
    "text": "directly add the constant one onto the register you know assuming that I've got a machine which can add constants to to",
    "start": "2078159",
    "end": "2084720"
  },
  {
    "text": "registers which most do okay so that that that's nice I've",
    "start": "2084720",
    "end": "2091158"
  },
  {
    "text": "saved an instruction on x86 you can do better",
    "start": "2091159",
    "end": "2096960"
  },
  {
    "text": "than that you can just directly add one to a memory location so what I want to do in that",
    "start": "2096960",
    "end": "2103119"
  },
  {
    "text": "situation is to recognize this whole tree and then realize I can do an add with",
    "start": "2103119",
    "end": "2108880"
  },
  {
    "text": "memory okay oo compiler magic how does it",
    "start": "2108880",
    "end": "2114359"
  },
  {
    "text": "happen so",
    "start": "2114359",
    "end": "2118200"
  },
  {
    "text": "um so um a regular ad with memory will actually in the x86 Hardware will become",
    "start": "2120240",
    "end": "2127920"
  },
  {
    "text": "a load out of one and then a store there's a variant of that on x86 where you can put a lock prefix on it and that",
    "start": "2127920",
    "end": "2134440"
  },
  {
    "text": "will make it Atomic yes entirely so when we went from the",
    "start": "2134440",
    "end": "2141520"
  },
  {
    "text": "Java bite code to the the graph of instruction nodes then we eliminated the notion of local variables and uh and",
    "start": "2141520",
    "end": "2149040"
  },
  {
    "text": "stack what we had was we had instructions which generated a value and then we had edges which put those values",
    "start": "2149040",
    "end": "2155880"
  },
  {
    "text": "into other instructions um so I mean in a in in a way this this",
    "start": "2155880",
    "end": "2162400"
  },
  {
    "text": "code doesn't have anything to do with the stack because it's kind of happening way down in the compiler at the point",
    "start": "2162400",
    "end": "2168839"
  },
  {
    "text": "where I've got these L instructions which is saying you know do a load do a store and I'm recognizing I can fold",
    "start": "2168839",
    "end": "2175040"
  },
  {
    "text": "them uh together so",
    "start": "2175040",
    "end": "2180280"
  },
  {
    "text": "um y nothing that okay so you know this looks like it should be",
    "start": "2180280",
    "end": "2187240"
  },
  {
    "text": "a compiler magic and you know you need a PhD or something to try and understand this amazing compiler magic",
    "start": "2187240",
    "end": "2195280"
  },
  {
    "text": "um what what happens is it it it's it's an algorithm which is about as complicated as diff or something like",
    "start": "2195280",
    "end": "2201720"
  },
  {
    "text": "that um what the algorithm does is it it tries to do every possible covering of a",
    "start": "2201720",
    "end": "2208440"
  },
  {
    "text": "tree until it realizes that it doesn't work and so what we start off with is we",
    "start": "2208440",
    "end": "2215839"
  },
  {
    "text": "we put a covering and we go okay here you know I can do a get field and I can see that that's got a certain cost",
    "start": "2215839",
    "end": "2221920"
  },
  {
    "text": "if I generate the result into a register and these cost functions are actually just arbitrary",
    "start": "2221920",
    "end": "2227560"
  },
  {
    "text": "numbers um we can again we can generate this constant into a register and that'll have a cost we can realize that",
    "start": "2227560",
    "end": "2234280"
  },
  {
    "text": "we can fold these two operations together and that'll have a cost so what we do is we we we label the",
    "start": "2234280",
    "end": "2241319"
  },
  {
    "text": "tree and when we've labeled the tree we can then do a traversal which show which",
    "start": "2241319",
    "end": "2246800"
  },
  {
    "text": "just selects the least cost traversal of the",
    "start": "2246800",
    "end": "2251599"
  },
  {
    "text": "tree that acceptable when you're doing this at uh at runtime this Fair assump yeah",
    "start": "2252680",
    "end": "2259319"
  },
  {
    "text": "approximation so um instruction selection in hotspot only happens in the",
    "start": "2259319",
    "end": "2264480"
  },
  {
    "text": "server compiler in the client compiler it's kind of other than recognizing that",
    "start": "2264480",
    "end": "2270800"
  },
  {
    "text": "it's got a a constant one going into the the ad instruction it doesn't do anything",
    "start": "2270800",
    "end": "2276160"
  },
  {
    "text": "else um and you use the client compiler for most",
    "start": "2276160",
    "end": "2282119"
  },
  {
    "text": "warm code you only start using the server compiler for extremely hot code",
    "start": "2282119",
    "end": "2288400"
  },
  {
    "text": "so whilst your compile of the the compile of the bite code may take a little bit longer you're going to recoup",
    "start": "2288400",
    "end": "2294839"
  },
  {
    "text": "the cost because this code is very hot so there's a kind of a a a cost benefit",
    "start": "2294839",
    "end": "2300920"
  },
  {
    "text": "analysis that the the VM has to do to determine whether it should expand energy doing a compilation and uh and",
    "start": "2300920",
    "end": "2308880"
  },
  {
    "text": "and and so on okay high level tree rewriting new",
    "start": "2308880",
    "end": "2314880"
  },
  {
    "text": "stuff this stuff's uh good fun um and yes jvms actually do do this uh",
    "start": "2314880",
    "end": "2322119"
  },
  {
    "text": "unfortunately it's not as well structured as it should be the the previous optimization gets captured in",
    "start": "2322119",
    "end": "2327920"
  },
  {
    "text": "what's gets called as the the architecture definition for a CPU platform for for for hotspots this kind",
    "start": "2327920",
    "end": "2334079"
  },
  {
    "text": "of stuff is is less formally defined um and tends to be kind of hacked into the",
    "start": "2334079",
    "end": "2339440"
  },
  {
    "text": "VM but it's good stuff so we should talk about it and hopefully you'll appreciate",
    "start": "2339440",
    "end": "2344560"
  },
  {
    "text": "why it's good stuff uh but I might be kind of over shoing but uh we'll see so",
    "start": "2344560",
    "end": "2350960"
  },
  {
    "text": "can people understand this code I've got three strings a and ABC I",
    "start": "2350960",
    "end": "2357119"
  },
  {
    "text": "could have made the method static and what I'm going to do is I'm going to concatenate the three strings together",
    "start": "2357119",
    "end": "2362280"
  },
  {
    "text": "and just return it as a result um okay so again not fantastically",
    "start": "2362280",
    "end": "2369400"
  },
  {
    "text": "complicated and again Java C the you know the the ja the the Java to class",
    "start": "2369400",
    "end": "2376400"
  },
  {
    "text": "file uh compiler has done some magic for us it's um it's going to actually use a",
    "start": "2376400",
    "end": "2383359"
  },
  {
    "text": "string Builder and the concatenation operations are going to turn into string Builder orend operations so we're going",
    "start": "2383359",
    "end": "2390680"
  },
  {
    "text": "to create a new string Builder with our first string a we're going to concatenate B onto it then we're going",
    "start": "2390680",
    "end": "2397119"
  },
  {
    "text": "to concatenate C and then we're going to turn the whole thing into a string and",
    "start": "2397119",
    "end": "2402440"
  },
  {
    "text": "although the original code mentioned nothing about string Builders the the new code mentions uh string",
    "start": "2402440",
    "end": "2409599"
  },
  {
    "text": "Builders and this is kind of there's nothing that jvm can do about this the jvm will see the string Builders and in",
    "start": "2409599",
    "end": "2416040"
  },
  {
    "text": "Java 1.4 they'll see string buffers and there's a whole slew of in you know literature you can go and read about uh",
    "start": "2416040",
    "end": "2423079"
  },
  {
    "text": "that but basically you've got this code and I'm going to say it's not very good",
    "start": "2423079",
    "end": "2429319"
  },
  {
    "text": "so that's a very good point so the the the the the question was why not look at",
    "start": "2429319",
    "end": "2435000"
  },
  {
    "text": "the length of the strings a b and c and add the length of those three strings",
    "start": "2435000",
    "end": "2440319"
  },
  {
    "text": "together and then when you create the string Builder create it with that length and um uh and then you can avoid",
    "start": "2440319",
    "end": "2448880"
  },
  {
    "text": "this inefficiency that if the original string Builder is too small you can uh then end up growing it in the append",
    "start": "2448880",
    "end": "2455319"
  },
  {
    "text": "operation and then they've got this extra pend operation which is again going to grow it so I'm going to say",
    "start": "2455319",
    "end": "2462680"
  },
  {
    "text": "that that's what we're going to do however um what I need is I need a new",
    "start": "2462680",
    "end": "2469640"
  },
  {
    "text": "Constructor to string Builder which can take multiple strings and append them",
    "start": "2469640",
    "end": "2474760"
  },
  {
    "text": "together okay now people are probably going to jump to the Java API documents",
    "start": "2474760",
    "end": "2480520"
  },
  {
    "text": "and go documentation and go well no such method exists there are methods that exist on these things which you don't",
    "start": "2480520",
    "end": "2486599"
  },
  {
    "text": "know about um how do how does how did you know how",
    "start": "2486599",
    "end": "2492680"
  },
  {
    "text": "how does that actually achieved um string buffer and string Builder have a common parent class I",
    "start": "2492680",
    "end": "2499520"
  },
  {
    "text": "think it's called abstract string Builder and Abstract string Builder has these methods on them but abstract",
    "start": "2499520",
    "end": "2505400"
  },
  {
    "text": "string Builder is a package protected and so no one outside of java Lang can",
    "start": "2505400",
    "end": "2510920"
  },
  {
    "text": "see it um Java Lang Java util Java Lang and um um so what actually happens",
    "start": "2510920",
    "end": "2519640"
  },
  {
    "text": "is this new string Builder is actually a method on this abstract string Builder",
    "start": "2519640",
    "end": "2524720"
  },
  {
    "text": "abstract string Builder uh which takes these um these three things and so",
    "start": "2524720",
    "end": "2530640"
  },
  {
    "text": "hopefully you can see that you know earlier I was talking about doing efficient mapping of certain",
    "start": "2530640",
    "end": "2536440"
  },
  {
    "text": "instructions to Intel instructions here I'm talking about mapping several kind",
    "start": "2536440",
    "end": "2542480"
  },
  {
    "text": "of uh high level jvm operations into kind of a more efficient uh jvm",
    "start": "2542480",
    "end": "2548119"
  },
  {
    "text": "operation and this can avoid kind of uh memory allocation and and other things like",
    "start": "2548119",
    "end": "2554240"
  },
  {
    "text": "that so there's lots more optimizations and I got bored of writing slides and and so on so you can pretty",
    "start": "2554240",
    "end": "2562800"
  },
  {
    "text": "much do any optimization you want and you know the the question which will get thrown back to me is well you know it's",
    "start": "2562800",
    "end": "2568440"
  },
  {
    "text": "a runtime you can't do this and basically there's a kind of a lore of diminishing returns the more",
    "start": "2568440",
    "end": "2573800"
  },
  {
    "text": "optimization you do the the less performance you get you should kind Focus your attention and then there's",
    "start": "2573800",
    "end": "2580200"
  },
  {
    "text": "this very popular 8020 rule or 9010 rule depending on who you talk to that you spend 80% of your execution time and 20%",
    "start": "2580200",
    "end": "2586680"
  },
  {
    "text": "of your code um if you've got code like Eclipse then that's a lot of code um but",
    "start": "2586680",
    "end": "2593079"
  },
  {
    "text": "um it's still kind of true that you you spend most of your time in certain uh hot pieces of code so the jvm will do",
    "start": "2593079",
    "end": "2601839"
  },
  {
    "text": "complicated op optimizations like Loop and switching Loop and rolling Loop invariant code motion",
    "start": "2601839",
    "end": "2608200"
  },
  {
    "text": "um I can tell you about those but just believe me they're all good stuff you like them they make your code run faster",
    "start": "2608200",
    "end": "2615440"
  },
  {
    "text": "there's a data flow analysis uh data flow analysis is a is is really nice it",
    "start": "2615440",
    "end": "2621599"
  },
  {
    "text": "what it does is it lets the the VM propagate information through uh the the",
    "start": "2621599",
    "end": "2627119"
  },
  {
    "text": "graph that we were talking about earlier so one of the things that you have in Java is you have the ability for runtime",
    "start": "2627119",
    "end": "2634200"
  },
  {
    "text": "exceptions to occur in lots of different places so one of the r runtime exceptions which can occur is a null",
    "start": "2634200",
    "end": "2640960"
  },
  {
    "text": "pointer exception however I can guarantee that the this pointer is never",
    "start": "2640960",
    "end": "2646400"
  },
  {
    "text": "null and so what I can do is I can propagate that information through the",
    "start": "2646400",
    "end": "2651680"
  },
  {
    "text": "graph and anywhere I see you know compare with null of this pointer then I can get rid of that code it's dead code",
    "start": "2651680",
    "end": "2657440"
  },
  {
    "text": "and uh and so on and what data flow analysis can do is it can do you know more impressive things than that it can",
    "start": "2657440",
    "end": "2664160"
  },
  {
    "text": "say this integer is Within These ranges and that's never going to be outside the range of a of a of an array length and",
    "start": "2664160",
    "end": "2671000"
  },
  {
    "text": "so it can eliminate bounds checks uh and and and things like that so the believe",
    "start": "2671000",
    "end": "2676480"
  },
  {
    "text": "me the vm's very smart there's lots of people working on it we're doing good stuff there's um vectorization I've",
    "start": "2676480",
    "end": "2681839"
  },
  {
    "text": "spelled it correctly good um where you're trying to take advantage of the",
    "start": "2681839",
    "end": "2687400"
  },
  {
    "text": "uh simd uh multimedia instructions which are on Modern processors modern you know",
    "start": "2687400",
    "end": "2693640"
  },
  {
    "text": "you've been able to buy them for like 15 years so um Cod layout code layout is a big win it's just getting the the",
    "start": "2693640",
    "end": "2700520"
  },
  {
    "text": "hottest bits of code all in a straight line of code and making the branches go to the less common bits of code if you",
    "start": "2700520",
    "end": "2706839"
  },
  {
    "text": "have profiling you can do this the jvm is a hot running system it can profile",
    "start": "2706839",
    "end": "2712400"
  },
  {
    "text": "all the time and so it can do very good code layouts this is one of the main kind of like advantages of a jvm over a",
    "start": "2712400",
    "end": "2719319"
  },
  {
    "text": "a static compilation route like U CN C++ Escape analysis deliberately put",
    "start": "2719319",
    "end": "2725200"
  },
  {
    "text": "there because it's uh uh a good optimization um so it's very common in",
    "start": "2725200",
    "end": "2731680"
  },
  {
    "text": "Java to have have a collection and then to say I want an iterator over that collection and that iterator will",
    "start": "2731680",
    "end": "2737839"
  },
  {
    "text": "commonly have one field inside it called Next and that next is just going to go",
    "start": "2737839",
    "end": "2743319"
  },
  {
    "text": "along your linked list or it's going to go down your array list or whatever it's going to",
    "start": "2743319",
    "end": "2748920"
  },
  {
    "text": "do and if you're just using that iterator inside a single method and",
    "start": "2748920",
    "end": "2754119"
  },
  {
    "text": "you've inlined all the code then what you would like to do is take that next field and place it in a register you",
    "start": "2754119",
    "end": "2760440"
  },
  {
    "text": "don't want to do any memory allocation for it and so on and so so forth so what Escape analysis does is it looks for uh",
    "start": "2760440",
    "end": "2768000"
  },
  {
    "text": "allocations of memory and it sees to tries to see if they can in some way Escape so an escape is where you take",
    "start": "2768000",
    "end": "2775079"
  },
  {
    "text": "the freshly allocated iterator and you write it to a field or you do some or",
    "start": "2775079",
    "end": "2780119"
  },
  {
    "text": "you return it or something like that if that's outside of the the code which is being inlined then you'll disable the",
    "start": "2780119",
    "end": "2787040"
  },
  {
    "text": "Escape analysis optimization and your next field won't get put into a register and you will actually allocate some Heap",
    "start": "2787040",
    "end": "2793160"
  },
  {
    "text": "so an escape analysis is very nice and very good and kind of uh it's much more",
    "start": "2793160",
    "end": "2799079"
  },
  {
    "text": "common inside the VM than people give it credit for uh don't avoid iterators because you think they're they're",
    "start": "2799079",
    "end": "2804319"
  },
  {
    "text": "allocating memory they shouldn't in a decent VM you know dalic you know",
    "start": "2804319",
    "end": "2809839"
  },
  {
    "text": "doesn't do Escape analysis but anyway so the the JV",
    "start": "2809839",
    "end": "2817359"
  },
  {
    "text": "has a bunch of uh challenges so being objectoriented is uh",
    "start": "2817359",
    "end": "2823480"
  },
  {
    "text": "a challenge you have um virtual method dispatch and it's certainly true in kind",
    "start": "2823480",
    "end": "2828640"
  },
  {
    "text": "of older processes that virtual method dispatch had a penalty compared to kind of just being able to call a specific",
    "start": "2828640",
    "end": "2834960"
  },
  {
    "text": "Target method and if you look at you know what Java did compared to C++ it",
    "start": "2834960",
    "end": "2840359"
  },
  {
    "text": "very deliberately made everything virtual by default every method is virtual you can override it uh unless",
    "start": "2840359",
    "end": "2846400"
  },
  {
    "text": "the class is declared final or the method is declared final so on and so forth so Java is encouraging you to to",
    "start": "2846400",
    "end": "2853319"
  },
  {
    "text": "do object-oriented code writing unlike C++ which makes you type the word virtual if you actually want to make",
    "start": "2853319",
    "end": "2859359"
  },
  {
    "text": "object-oriented code so it's you know making you pay a penalty by making you type a Word",
    "start": "2859359",
    "end": "2865319"
  },
  {
    "text": "um in C++ because it's being statically compiled what they must do for the method dispatch is they must create a A",
    "start": "2865319",
    "end": "2873480"
  },
  {
    "text": "dispatch table where when you do the virtual method dis dispatch you have to load a value out of the table and then",
    "start": "2873480",
    "end": "2879319"
  },
  {
    "text": "call through to that so you've got a load followed by a a call and normally it's much worse than this and girls",
    "start": "2879319",
    "end": "2886040"
  },
  {
    "text": "there in the audience can scream at me and say it's far far worse what happens inside the jvm is you know for example",
    "start": "2886040",
    "end": "2895000"
  },
  {
    "text": "if you have an interface that you only have a single class implementing that interface so if that's the case then why",
    "start": "2895000",
    "end": "2902119"
  },
  {
    "text": "don't I just call the method that is belongs to that single class the interface doesn't have any method declaration I know there's a single",
    "start": "2902119",
    "end": "2909040"
  },
  {
    "text": "implementing class there's only one place I can go to why do I need to look up look it up in a table there's no need",
    "start": "2909040",
    "end": "2915160"
  },
  {
    "text": "so I can make a I can make an optimistic optimization which says I'm just going to go to this one place but inside the",
    "start": "2915160",
    "end": "2921960"
  },
  {
    "text": "VM I can remember that I made that observation and if that ever um proves",
    "start": "2921960",
    "end": "2928160"
  },
  {
    "text": "not to be true I have to do this thing called deoptimization which is basically I throw away the generated code I",
    "start": "2928160",
    "end": "2934240"
  },
  {
    "text": "recompile it if it becomes hot again um and so on and so",
    "start": "2934240",
    "end": "2939920"
  },
  {
    "text": "forth I can also observe that I'm commonly dispatching to a certain method",
    "start": "2939920",
    "end": "2946240"
  },
  {
    "text": "so if I have a a hash table or a hash map and all of my keys are strings then",
    "start": "2946240",
    "end": "2952359"
  },
  {
    "text": "I'm going to be calling string. has code from the uh the hash table and hash hashmap methods and so whilst it's true",
    "start": "2952359",
    "end": "2961559"
  },
  {
    "text": "I could be going to any hash code method I could be going to the object hash code or something like that I I can do",
    "start": "2961559",
    "end": "2967200"
  },
  {
    "text": "profiling and know where the common Target is so I can realize it's always string hash code and then I can inline",
    "start": "2967200",
    "end": "2972720"
  },
  {
    "text": "string hash code but I can put some guard in there which says you know if it proves to be anything otherwise I can",
    "start": "2972720",
    "end": "2978559"
  },
  {
    "text": "either de optimize or I can go and do a regular method dispatch to it",
    "start": "2978559",
    "end": "2985680"
  },
  {
    "text": "um there's there's an optimization which gets used which is inline caching you",
    "start": "2986960",
    "end": "2992119"
  },
  {
    "text": "don't have to do it inline caching is where you um you remember the last",
    "start": "2992119",
    "end": "2997520"
  },
  {
    "text": "Target that a that a a method dispatch went to and you assume that you know because you went to it last time you're",
    "start": "2997520",
    "end": "3003680"
  },
  {
    "text": "going to go to it again um but it's kind of unnecessary if you've got decent profile",
    "start": "3003680",
    "end": "3010119"
  },
  {
    "text": "data so so Java has a lot of stuff a lot of",
    "start": "3010119",
    "end": "3016680"
  },
  {
    "text": "this stuff existed before and um some people said that class loading is kind",
    "start": "3016680",
    "end": "3022920"
  },
  {
    "text": "of the the big new thing that Java introduced that no one had ever seen before this ability to kind of dynamically take",
    "start": "3022920",
    "end": "3029839"
  },
  {
    "text": "class files from the internet and include them into your program or you know take them from anywhere a class",
    "start": "3029839",
    "end": "3035079"
  },
  {
    "text": "loader can go and grab them um however how can the jvm make uh",
    "start": "3035079",
    "end": "3040920"
  },
  {
    "text": "optimistic assumptions about you know I'm this interface only has a single implementing class and what can I you",
    "start": "3040920",
    "end": "3047359"
  },
  {
    "text": "know my method inlining if I've inlined a method how do I know that someone's not going to later on override that",
    "start": "3047359",
    "end": "3052960"
  },
  {
    "text": "method and and invalidate the inlining uh assumption uh there so class loading",
    "start": "3052960",
    "end": "3058640"
  },
  {
    "text": "throws up this Challenge and the solution to it is you know to De optimize to say oh you know I got it",
    "start": "3058640",
    "end": "3065520"
  },
  {
    "text": "wrong de optimize and the deoptimization in the worst case will roll back and start using The Interpreter",
    "start": "3065520",
    "end": "3071799"
  },
  {
    "text": "again how does it whe it's um so the class loader has to",
    "start": "3071799",
    "end": "3079920"
  },
  {
    "text": "record so the question was sorry to for the benefit of the microphone so the the qu the question was how does it",
    "start": "3079920",
    "end": "3085640"
  },
  {
    "text": "determine it's done it right wrong so you can either in the in the dynamically generated code you can put guard tests",
    "start": "3085640",
    "end": "3091480"
  },
  {
    "text": "in so in the dynamically generated code you can go you know if this isn't a string then do you optimize this method",
    "start": "3091480",
    "end": "3099000"
  },
  {
    "text": "or you can uh record information in in tables uh so the class loader has a",
    "start": "3099000",
    "end": "3104559"
  },
  {
    "text": "table associated with with it called the dictionary and in the dictionary you can remember that this class has got you",
    "start": "3104559",
    "end": "3112079"
  },
  {
    "text": "know certain dependencies like you know that um it's only got one in one interface and if that uh sorry this this",
    "start": "3112079",
    "end": "3120359"
  },
  {
    "text": "class is a single implementer of an interface and if if any anything loads which kind of invalidates those",
    "start": "3120359",
    "end": "3126359"
  },
  {
    "text": "assumptions then um you can bring the VM to a safe point and you can go and de",
    "start": "3126359",
    "end": "3131559"
  },
  {
    "text": "optimize all of that code um you can't just do it arbitrarily because there there'll be things running that code but",
    "start": "3131559",
    "end": "3138000"
  },
  {
    "text": "because the class loading happens at a particular point then you can actually do it semantically correctly um and so",
    "start": "3138000",
    "end": "3148280"
  },
  {
    "text": "if the VM is doing its job well then it shouldn't be problematic because the VM",
    "start": "3149359",
    "end": "3154640"
  },
  {
    "text": "has a what's known as an Adaptive optimization system and the Adaptive optimization system is keeping track of",
    "start": "3154640",
    "end": "3161400"
  },
  {
    "text": "the assumptions that the VM is making and making cost benefit analysis and determining you know what should it",
    "start": "3161400",
    "end": "3167599"
  },
  {
    "text": "compile with what compiler um what kind of assumptions should it uh bake into the generated",
    "start": "3167599",
    "end": "3174359"
  },
  {
    "text": "code um and if the adap optimization system is working well then you know the",
    "start": "3174359",
    "end": "3179760"
  },
  {
    "text": "deoptimization will rarely happen it will happen because you want to make these you know very optimistic",
    "start": "3179760",
    "end": "3185400"
  },
  {
    "text": "assumptions because when they hold it's a really great performance win yeah and",
    "start": "3185400",
    "end": "3191040"
  },
  {
    "text": "this this is you know this is really why you know Java can really you know beat C++ and c and so on they they have to be",
    "start": "3191040",
    "end": "3198200"
  },
  {
    "text": "conservative you know with the latest versions of GCC you're getting into things like link time optimization and",
    "start": "3198200",
    "end": "3204200"
  },
  {
    "text": "so on but even in that scenario they at the whole program and they have to conservative conservatively assume that",
    "start": "3204200",
    "end": "3210400"
  },
  {
    "text": "any code path which exists in the program is going to happen inside the VM you can go that's never been run I'm",
    "start": "3210400",
    "end": "3216599"
  },
  {
    "text": "just going to assume that if I ever get to that piece of code I'm going to De optimize the whole method switch back to The Interpreter and it means you can",
    "start": "3216599",
    "end": "3222960"
  },
  {
    "text": "make very small fast bits of code with with very aggressive assumptions in them",
    "start": "3222960",
    "end": "3230839"
  },
  {
    "text": "um level what kind of problems do you see if the optimization is occurring uh",
    "start": "3230839",
    "end": "3236880"
  },
  {
    "text": "a lot so for deoptimization to be occurring a lot you've got to be compiling code and then for that code to",
    "start": "3236880",
    "end": "3242799"
  },
  {
    "text": "be being deoptimized so one of the things you'd observe is that a lot of CPU time was being spent by the compiler",
    "start": "3242799",
    "end": "3250559"
  },
  {
    "text": "threads of the VM so if you've got exposure in your profile or whatever whatever to the compiler threads you can",
    "start": "3250559",
    "end": "3256280"
  },
  {
    "text": "see that they're running a lot there's also uh a command line flag called um -",
    "start": "3256280",
    "end": "3261720"
  },
  {
    "text": "XX colon plus Tracey optimizations and if you that uh flag on",
    "start": "3261720",
    "end": "3267920"
  },
  {
    "text": "you can see what deoptimization events are occurring inside the VM if you start seeing a lot of them then you know that",
    "start": "3267920",
    "end": "3273799"
  },
  {
    "text": "the VM is doing something wrong now the VM doesn't do things wrong so you shouldn't get paranoid and think oh you",
    "start": "3273799",
    "end": "3280079"
  },
  {
    "text": "know I've heard about this deoptimization stuff the vm's going to make all of these aggressive assumptions and it's not going to it's it's you know",
    "start": "3280079",
    "end": "3286880"
  },
  {
    "text": "so what the VM does is if it sees one of its assumptions has been invalidated",
    "start": "3286880",
    "end": "3292000"
  },
  {
    "text": "then it adds it to it its profile data and when it comes to comes back to rec that code it's going to recompile it in",
    "start": "3292000",
    "end": "3298480"
  },
  {
    "text": "a different way and not make the same assumptions and so you'll see a",
    "start": "3298480",
    "end": "3303760"
  },
  {
    "text": "deoptimization event once um it's only when the compilers are broken and I've seen compilers which are broken um but",
    "start": "3303760",
    "end": "3311400"
  },
  {
    "text": "you know it's only when the compilers are broken and and the Adaptive optimization system is broken then you'll get repeated deoptimization uh",
    "start": "3311400",
    "end": "3317359"
  },
  {
    "text": "things going on yes the compiler to compile a piece",
    "start": "3317359",
    "end": "3323200"
  },
  {
    "text": "of code um you can't well not quite true um you can force the compiler always to",
    "start": "3323200",
    "end": "3329880"
  },
  {
    "text": "run and uh back in my example I my Fibonacci example I'd forced the",
    "start": "3329880",
    "end": "3335680"
  },
  {
    "text": "compiler to run by using a command line flag called X comp and that just says",
    "start": "3335680",
    "end": "3340760"
  },
  {
    "text": "always use a compiler um you don't normally want to do that because it'll have a big performance",
    "start": "3340760",
    "end": "3347200"
  },
  {
    "text": "overhead uh you want the Adaptive optimization system to be working and making these decisions for you in",
    "start": "3347200",
    "end": "3352319"
  },
  {
    "text": "general so what can you do to encourage the compiler to compile a particular",
    "start": "3352319",
    "end": "3357400"
  },
  {
    "text": "method make it small and hot yeah small hot methods the VM loves them and it's",
    "start": "3357400",
    "end": "3363240"
  },
  {
    "text": "going to compile them so if you're you know if you have something like uh you",
    "start": "3363240",
    "end": "3368359"
  },
  {
    "text": "know if this condition holds do something nice and fast otherwise do this big complicated thing move the",
    "start": "3368359",
    "end": "3374839"
  },
  {
    "text": "complicated thing into another method and then you're going to make that method smaller and more attractive to",
    "start": "3374839",
    "end": "3380200"
  },
  {
    "text": "the compiler to to to in line and to compile on its own uh and so on cuz the",
    "start": "3380200",
    "end": "3385400"
  },
  {
    "text": "comp the Adaptive ization system is making these cost benefit analysis and part of that is based on the length of the method unfortunately it's a crude",
    "start": "3385400",
    "end": "3392079"
  },
  {
    "text": "heuristic but it is what it is the compiler doesn't spend energy compiling co uh cold code so if people are going",
    "start": "3392079",
    "end": "3398920"
  },
  {
    "text": "to start going about Trace compilation or",
    "start": "3398920",
    "end": "3402480"
  },
  {
    "text": "something sorry um so Java agents are used to uh",
    "start": "3404039",
    "end": "3411280"
  },
  {
    "text": "enable debugging through a an API called uh the Java jvm tools interface and the",
    "start": "3411280",
    "end": "3416799"
  },
  {
    "text": "J before that was a jvm uh profiling um interface and the question was you know",
    "start": "3416799",
    "end": "3421920"
  },
  {
    "text": "do these profilers affect deoptimization and the answer is yes what the jvm jvmti",
    "start": "3421920",
    "end": "3428400"
  },
  {
    "text": "agents do the the Java agents as they get specified on the command line uh what they do is they say I'm an agent",
    "start": "3428400",
    "end": "3434880"
  },
  {
    "text": "and I want these features from the V the VM so they might say something like I want to be able to single step through",
    "start": "3434880",
    "end": "3440760"
  },
  {
    "text": "bite code and the jvm can go Ah that's a real nuisance to implement inside a",
    "start": "3440760",
    "end": "3445920"
  },
  {
    "text": "compile ER yeah so what it can do in that situation is it can it can go if",
    "start": "3445920",
    "end": "3452400"
  },
  {
    "text": "you really want to do that then use The Interpreter so if you switch on that jvmti agent you know if you use the",
    "start": "3452400",
    "end": "3459440"
  },
  {
    "text": "jvmti agent it's going to and it uses that option then um the the the VM can",
    "start": "3459440",
    "end": "3466079"
  },
  {
    "text": "start becoming very conservative about what it's going to do and and and so on and you can start seeing different",
    "start": "3466079",
    "end": "3471359"
  },
  {
    "text": "behaviors and that you'll be spending more time running in The Interpreter than running in in in compile generated",
    "start": "3471359",
    "end": "3476799"
  },
  {
    "text": "code now there's no reason why you can't single step through bite code if it's",
    "start": "3476799",
    "end": "3481920"
  },
  {
    "text": "compiler generated code it's kind of like where does the jvm uh guy spend his energy does he spend his energy making",
    "start": "3481920",
    "end": "3489319"
  },
  {
    "text": "Pro profilers run very quickly for specific cases um or does he spend it",
    "start": "3489319",
    "end": "3494400"
  },
  {
    "text": "doing cool stuff like vectorization and Escape analysis and all of these kind of good stuff for people who aren't running",
    "start": "3494400",
    "end": "3499880"
  },
  {
    "text": "code with profilers and so on so um people have done a lot of stuff um with",
    "start": "3499880",
    "end": "3505760"
  },
  {
    "text": "the J MTI interfaces and so on most jvmti interfaces aren't fully",
    "start": "3505760",
    "end": "3510799"
  },
  {
    "text": "implemented by most VMS um but yeah it is what it is",
    "start": "3510799",
    "end": "3517240"
  },
  {
    "text": "so um our um back to the other question our final static or private methods more",
    "start": "3517240",
    "end": "3523400"
  },
  {
    "text": "likely to be optimized so the the question is are final static or private methods more likely to be optimized the",
    "start": "3523400",
    "end": "3529480"
  },
  {
    "text": "VM doesn't care the jvm doesn't care whether they're uh private static file",
    "start": "3529480",
    "end": "3534920"
  },
  {
    "text": "um dynamically dispatched um couldn't be",
    "start": "3534920",
    "end": "3540640"
  },
  {
    "text": "yeah if if they're static or private then you don't need Dynamic dispatch they're only ever going to go to one target so static and private is a good",
    "start": "3540640",
    "end": "3547400"
  },
  {
    "text": "way of kind of forcing the hand of the inliner but you shouldn't need to the profiler should be able to figure out",
    "start": "3547400",
    "end": "3553520"
  },
  {
    "text": "the inlining itself and go there's a single Target to this stuff so the key message Is Write Clean nice easy to",
    "start": "3553520",
    "end": "3561000"
  },
  {
    "text": "debug good quality code don't worry about what the jvm is doing it's far smarter than you are and",
    "start": "3561000",
    "end": "3568280"
  },
  {
    "text": "is I there's people who should know better like U you know the Scala people",
    "start": "3571319",
    "end": "3576520"
  },
  {
    "text": "they do ridiculous things which completely break Escape analysis and you know it's it's frustrating and then they",
    "start": "3576520",
    "end": "3582720"
  },
  {
    "text": "tell you about this is a really great optimization you go no no",
    "start": "3582720",
    "end": "3587759"
  },
  {
    "text": "you um okay so that's kind of capturing that last comment so the the jvms compiler",
    "start": "3587960",
    "end": "3595599"
  },
  {
    "text": "and the automization stuff system and so on they're going to do all of this smart stuff and you don't you shouldn't uh",
    "start": "3595599",
    "end": "3602760"
  },
  {
    "text": "worry about it unless you want to and then I've hopefully given you some point as to some of the the-xx options and you",
    "start": "3602760",
    "end": "3608880"
  },
  {
    "text": "can kind of get involved and uh look at the machine code that's being generated and so on and you know it's all open",
    "start": "3608880",
    "end": "3615559"
  },
  {
    "text": "source so go and play around with it and do good stuff",
    "start": "3615559",
    "end": "3621720"
  },
  {
    "text": "and doesn't have certainly in 2008 it was just an interpreter",
    "start": "3621720",
    "end": "3627280"
  },
  {
    "text": "um Trace compilation was my PhD thesis ah but I won't bore you with the the",
    "start": "3627280",
    "end": "3634480"
  },
  {
    "text": "details but Trace compilation is a different way of looking at compilation",
    "start": "3634480",
    "end": "3639960"
  },
  {
    "text": "where instead of looking at hot methods you look at hot basic blocks and the",
    "start": "3639960",
    "end": "3645960"
  },
  {
    "text": "problem with that is that if you start looking at things as basic blocks instead of methods you lose the call",
    "start": "3645960",
    "end": "3651200"
  },
  {
    "text": "stack so if anything becomes uncommon then you have to go and recreate the call stack and if you look at what",
    "start": "3651200",
    "end": "3658119"
  },
  {
    "text": "architectures do Hardware architectures they do things like they predict that when you do a call you're going to",
    "start": "3658119",
    "end": "3663440"
  },
  {
    "text": "return to the next instruction after that call so the problem with Trace compilation is they have to they have to",
    "start": "3663440",
    "end": "3669280"
  },
  {
    "text": "kind of get around the fact that they've uh been so smart that they've kind of uh",
    "start": "3669280",
    "end": "3674920"
  },
  {
    "text": "gone beyond what the architecture was actually expecting them to do and so they have to be so smart that they're going to kind of win back that",
    "start": "3674920",
    "end": "3680880"
  },
  {
    "text": "performance loss and so on and kind of in the extreme they're going to kind of",
    "start": "3680880",
    "end": "3686000"
  },
  {
    "text": "equal each other in terms of performance follow question some of",
    "start": "3686000",
    "end": "3691680"
  },
  {
    "text": "these have Smart instructions which help jit compilation um when they they they come",
    "start": "3691680",
    "end": "3697680"
  },
  {
    "text": "up with all of these smart instructions the the one I'm most familiar with is that they have an explicit null check instruction which is compare this value",
    "start": "3697680",
    "end": "3704960"
  },
  {
    "text": "to zero and and you know trap if it is um and how does a regular jvm handle",
    "start": "3704960",
    "end": "3712359"
  },
  {
    "text": "that it makes sure that any of the the pages of memory which are at address zero and above aren't mapped in and so",
    "start": "3712359",
    "end": "3720279"
  },
  {
    "text": "if you ever try and load or store to those low pages of memory then it's going to create a page fault and it's",
    "start": "3720279",
    "end": "3726279"
  },
  {
    "text": "going to create a segmentation violation and then it goes and handles that and goes oh look it's really a null pointer",
    "start": "3726279",
    "end": "3731680"
  },
  {
    "text": "exception uh uh violation and so arm have got these instructions and I can't",
    "start": "3731680",
    "end": "3738880"
  },
  {
    "text": "find a single use for them because we've already kind of long engineered around the problems that the these instructions",
    "start": "3738880",
    "end": "3745119"
  },
  {
    "text": "were trying to solve um they might have come up with some other great ones but I'm unaware of",
    "start": "3745119",
    "end": "3751240"
  },
  {
    "text": "them and my research group boss was the co inventor of the arm instruction set",
    "start": "3751240",
    "end": "3758119"
  },
  {
    "text": "so okay so um garbage collection so",
    "start": "3759160",
    "end": "3765039"
  },
  {
    "text": "memory safety is this really uh great stuff um we can allocate um",
    "start": "3765039",
    "end": "3771640"
  },
  {
    "text": "objects and look you can see the the author of the The Slide deck was called",
    "start": "3771640",
    "end": "3777079"
  },
  {
    "text": "um so um you can see here we're doing memory allocation and I didn't need to worry about the fact that you know I've",
    "start": "3777079",
    "end": "3784160"
  },
  {
    "text": "created some uh I've used some resource I've used some memory I don't need to worry about trying to reclaim that",
    "start": "3784160",
    "end": "3789440"
  },
  {
    "text": "memory if I was working in C++ I'd have to try and free up that memory otherwise eventually I would you know run out of",
    "start": "3789440",
    "end": "3796279"
  },
  {
    "text": "uh uh memory memory safety is is the kind of the fact that the runtime system does this for you and it's thank God and",
    "start": "3796279",
    "end": "3807359"
  },
  {
    "text": "so um so we've got garbage collection and um we've got all of this uh",
    "start": "3807359",
    "end": "3815680"
  },
  {
    "text": "goodness um what do we want from a garbage collector we want it to be parallel we want to make it we want it to use all of the CPU resources we have",
    "start": "3815680",
    "end": "3822839"
  },
  {
    "text": "on our uh system we want it to be concurrent we want it to be generational fragmentation and compaction the torture",
    "start": "3822839",
    "end": "3829440"
  },
  {
    "text": "of tuning most jvms it's hard to work with this stuff",
    "start": "3829440",
    "end": "3836359"
  },
  {
    "text": "um so this these are these are getting away from from from from my slides so um",
    "start": "3836359",
    "end": "3842880"
  },
  {
    "text": "we're creating uh you know objects in memory so we're saying you know these",
    "start": "3842880",
    "end": "3848599"
  },
  {
    "text": "regions of memory are going to be used for this particular object and the simplest way we can do that is just have",
    "start": "3848599",
    "end": "3853880"
  },
  {
    "text": "a a pointer and go okay we'll put an object here and we'll move the pointer up and then the next object we allocate",
    "start": "3853880",
    "end": "3859839"
  },
  {
    "text": "will immediately allocate above that PO and we we'll bump it up again okay at some point in the future we want to work",
    "start": "3859839",
    "end": "3866640"
  },
  {
    "text": "out what objects are alive and which objects are garbage now one of the",
    "start": "3866640",
    "end": "3872119"
  },
  {
    "text": "things with garbage collection is we don't want to spend time tracing through stuff which is garbage we just want to",
    "start": "3872119",
    "end": "3879359"
  },
  {
    "text": "work from a a a set of uh you know root nodes and the root nodes tend to be things like static fields and values in",
    "start": "3879359",
    "end": "3886359"
  },
  {
    "text": "registers and values on the stack we start from those root nodes and we want to find what can these root nodes find",
    "start": "3886359",
    "end": "3893079"
  },
  {
    "text": "in terms of objects which are alive and is uh marking of the objects um there",
    "start": "3893079",
    "end": "3899200"
  },
  {
    "text": "are other ways to do garbage collection you can do reference counting and so on um but reference counting every time you",
    "start": "3899200",
    "end": "3906839"
  },
  {
    "text": "you know you use a a field within an object you have to bump a counter up and down it sucks in terms of performance um",
    "start": "3906839",
    "end": "3913960"
  },
  {
    "text": "so what you really want to do is you want to do tracing and tracing only pays a penalty for objects which are",
    "start": "3913960",
    "end": "3921319"
  },
  {
    "text": "alive um if we're doing tracing to find what objects were alive anything that isn't alive is therefore",
    "start": "3921319",
    "end": "3929079"
  },
  {
    "text": "garbage and um if we're not going to move",
    "start": "3929079",
    "end": "3934200"
  },
  {
    "text": "objects around then we need to do some kind of Maintenance of these things so we can start putting things on to to",
    "start": "3934200",
    "end": "3939520"
  },
  {
    "text": "free lists uh to remember you know this memory is now available for us to reuse",
    "start": "3939520",
    "end": "3945279"
  },
  {
    "text": "again but that means we get away from doing our simple bump pointer allocation we have to go and look at uh free lists",
    "start": "3945279",
    "end": "3951279"
  },
  {
    "text": "and go you know oh there's something on the list which isn't currently in use and I can go and use that so that kind",
    "start": "3951279",
    "end": "3956520"
  },
  {
    "text": "of garbage collection is called Mark and sweep so you go through and you mark everything that's alive and everything",
    "start": "3956520",
    "end": "3962000"
  },
  {
    "text": "else is kind of swept out of the the the way um generational collection I know",
    "start": "3962000",
    "end": "3967760"
  },
  {
    "text": "there's a slide coming up on generational collection but the observation is that most objects Die",
    "start": "3967760",
    "end": "3973039"
  },
  {
    "text": "Young so um",
    "start": "3973039",
    "end": "3978240"
  },
  {
    "text": "the so um there there were different forms of the generational hypothesis there's a weak one and there a strong",
    "start": "3980079",
    "end": "3986400"
  },
  {
    "text": "one the strong one says that you know the older an object gets the probability it's going to die you know kind of",
    "start": "3986400",
    "end": "3993200"
  },
  {
    "text": "increases in you know in in proportion that doesn't tend to hold but the weak generational object uh hypothesis that",
    "start": "3993200",
    "end": "3999480"
  },
  {
    "text": "you know the vast majority of objects which get created will then just die it does hold and this is an interesting",
    "start": "3999480",
    "end": "4005599"
  },
  {
    "text": "observation because it means that we can focus our garbage collection energy onto a small uh set of freshly allocated",
    "start": "4005599",
    "end": "4012960"
  },
  {
    "text": "objects and not look at every object in the entire system we can just look at the freshly all you know the recently",
    "start": "4012960",
    "end": "4018720"
  },
  {
    "text": "allocated ones and concentrate and trying to reclaim the memory that that they were using if they that they're",
    "start": "4018720",
    "end": "4024359"
  },
  {
    "text": "dead so come through to the generational stuff fragmentation and uh",
    "start": "4024359",
    "end": "4031160"
  },
  {
    "text": "compaction um did people remember what it was like to defragment hard",
    "start": "4031160",
    "end": "4038880"
  },
  {
    "text": "drives So you you're familiar with the term fragmentation so fragmentation is",
    "start": "4038880",
    "end": "4044559"
  },
  {
    "text": "that you've got things distributed around in in memory and what you'd like to do is kind of push them all together",
    "start": "4044559",
    "end": "4050279"
  },
  {
    "text": "and make more efficient use of the memory and if you don't do this at some point you're going to kind of there's",
    "start": "4050279",
    "end": "4055640"
  },
  {
    "text": "going to be so much uh wasted space in your memory that you're going to run out of it much faster than you normally",
    "start": "4055640",
    "end": "4061440"
  },
  {
    "text": "would um so this leads to a thing where you want to do compaction and when you",
    "start": "4061440",
    "end": "4067599"
  },
  {
    "text": "do compaction you want to move objects around and if you start moving objects around that means they can be in two",
    "start": "4067599",
    "end": "4073240"
  },
  {
    "text": "places in memory and that's a problem because if your application is running at the same time as the garbage",
    "start": "4073240",
    "end": "4079359"
  },
  {
    "text": "collector how can the object be in two places Which object do you use and so",
    "start": "4079359",
    "end": "4085880"
  },
  {
    "text": "um let's carry on working through the slides because I think there's stuff coming up in on on",
    "start": "4085880",
    "end": "4091200"
  },
  {
    "text": "these um so most of the stuff is and we have the the the the VM memory for the",
    "start": "4091200",
    "end": "4098758"
  },
  {
    "text": "jvm and that's very small don't worry about it we're here about what your application's using which is this great",
    "start": "4098759",
    "end": "4103880"
  },
  {
    "text": "big Whopper over here um when we do allocation inside the the",
    "start": "4103880",
    "end": "4112560"
  },
  {
    "text": "hotspot uh VMS I mean there there's much simpler VMS out there which don't do this um then we're going to do thread",
    "start": "4112560",
    "end": "4118960"
  },
  {
    "text": "local allocation so what we want to do is we've got this this pointer that",
    "start": "4118960",
    "end": "4124318"
  },
  {
    "text": "we're bumping up in the simplest case um the problem with that is that if multiple guys are try to bump this",
    "start": "4124319",
    "end": "4130040"
  },
  {
    "text": "pointer up then we've got race conditions which can exist if we make the pointer thread local then that all",
    "start": "4130040",
    "end": "4136000"
  },
  {
    "text": "goes away fantastic so what we do is we have thread local allocation regions so",
    "start": "4136000",
    "end": "4141798"
  },
  {
    "text": "here we've got a you know thread a which has a thread local allocation region we have thread B which has got a thread",
    "start": "4141799",
    "end": "4147080"
  },
  {
    "text": "local allocation region and we're placing objects into these uh these t",
    "start": "4147080",
    "end": "4152199"
  },
  {
    "text": "laabs as they get called and then thread B goes and comes",
    "start": "4152199",
    "end": "4158159"
  },
  {
    "text": "along and he's trying to put an object into his local allocation buter and there's no space for it so this is the",
    "start": "4158159",
    "end": "4165440"
  },
  {
    "text": "most common cause of kind of a GC event um having to happen is that you you've",
    "start": "4165440",
    "end": "4170960"
  },
  {
    "text": "filled U some some uh finite memory",
    "start": "4170960",
    "end": "4176318"
  },
  {
    "text": "resource okay okay so in a in a in the regular",
    "start": "4179880",
    "end": "4187120"
  },
  {
    "text": "kind of hotspot VM what we have to do at this point is we're going to go okay we need to do a GC cycle we need to work",
    "start": "4187120",
    "end": "4192880"
  },
  {
    "text": "out what's alive we need to you know throw away the garbage we want to do compaction possibly want to do",
    "start": "4192880",
    "end": "4198320"
  },
  {
    "text": "compaction you normally don't want to always do compaction but you're always going to sometimes need to do some",
    "start": "4198320",
    "end": "4203600"
  },
  {
    "text": "compaction and so what this means is because you're moving things around the application can't deal with things being",
    "start": "4203600",
    "end": "4209800"
  },
  {
    "text": "in multiple places at the same time so the best thing you can do is stop the whole application and do your garbage",
    "start": "4209800",
    "end": "4215960"
  },
  {
    "text": "collection and this is what leads to GC",
    "start": "4215960",
    "end": "4219960"
  },
  {
    "text": "pauses okay so here we are doing some oh",
    "start": "4221040",
    "end": "4226920"
  },
  {
    "text": "garbage collection I hadn't seen the animation that's new to me okay so for",
    "start": "4226920",
    "end": "4232239"
  },
  {
    "text": "concurrent garbage collection we want the a the application and the garbage collection to happen together and uh this slide deck refers",
    "start": "4232239",
    "end": "4240520"
  },
  {
    "text": "to the the a garbage collector as the generational so we've got uh old and",
    "start": "4240520",
    "end": "4245560"
  },
  {
    "text": "young generation we've got this efficiency where we realize that we don't always want to be scanning the old",
    "start": "4245560",
    "end": "4251000"
  },
  {
    "text": "Generation Um pauseless in that it's never going to have these safe Point pauses",
    "start": "4251000",
    "end": "4256239"
  },
  {
    "text": "uh garbage collector in new terminology we've rebranded it the the C4 garbage",
    "start": "4256239",
    "end": "4262600"
  },
  {
    "text": "collector which is the continuous concurrent or concurrent continuous",
    "start": "4262600",
    "end": "4267640"
  },
  {
    "text": "compacting collector so Gil thinks of these things it's C4 uh which apparently",
    "start": "4267640",
    "end": "4274239"
  },
  {
    "text": "is an explosive um and so what we want to do is we don't want",
    "start": "4274239",
    "end": "4282840"
  },
  {
    "text": "we want to be able to move things around what's this slide deck showing me there's not enough room okay",
    "start": "4282840",
    "end": "4288760"
  },
  {
    "text": "generational collection fine promotion oh we don't care",
    "start": "4288760",
    "end": "4295679"
  },
  {
    "text": "promotion is just when something is Young and then you go haha now it's been alive for a certain amount of time I",
    "start": "4295679",
    "end": "4301000"
  },
  {
    "text": "want to promote it into the old generation okay and then compaction so that hasn't",
    "start": "4301000",
    "end": "4309880"
  },
  {
    "text": "mentioned how you actually do any of this smart stuff so what's the problem",
    "start": "4309880",
    "end": "4315320"
  },
  {
    "text": "we've got objects in two places how can we deal with the object being in two places what we need is we need some",
    "start": "4315320",
    "end": "4321639"
  },
  {
    "text": "smarts which tells us you know where is the object in memory that we're interested in and normally the object",
    "start": "4321639",
    "end": "4328159"
  },
  {
    "text": "we're interested in memory is going to be in one place it's only when some compaction is going on that it's going to be moved to another place so what we",
    "start": "4328159",
    "end": "4335679"
  },
  {
    "text": "need is something which says when we have a pointer to something which is being relocated make sure it it points",
    "start": "4335679",
    "end": "4341920"
  },
  {
    "text": "to the thing which has been relocated and so this is read barrier and this is kind of the big difference",
    "start": "4341920",
    "end": "4348159"
  },
  {
    "text": "between the the uh Zing virtual machine and the hotspot virtual machine is that the The Zing virtual machine the aul one",
    "start": "4348159",
    "end": "4355080"
  },
  {
    "text": "has read barriers and this property of having a read barrier avoids garbage collection pauses and so great there are",
    "start": "4355080",
    "end": "4363320"
  },
  {
    "text": "some subtleties to that you can try and get reduce them garbage collection pauses via other means um and certainly",
    "start": "4363320",
    "end": "4370520"
  },
  {
    "text": "Sun tries to do that but they don't do as good a job and this is kind of an examp example of uh a production",
    "start": "4370520",
    "end": "4378120"
  },
  {
    "text": "concurrent Mark sweep which is the concurrent garbage collector that that Sun have and you know here's what the",
    "start": "4378120",
    "end": "4384000"
  },
  {
    "text": "command line should be if you want to kind of tune the the garbage collection and normally what these people are",
    "start": "4384000",
    "end": "4389239"
  },
  {
    "text": "trying to do by tuning the garbage collection is trying to make sure that everything ends up in the nursery in the Young Generation and that they seldom",
    "start": "4389239",
    "end": "4396679"
  },
  {
    "text": "get promoted into the old generation because if they end up in the old generation then you're going to have to look at the whole of the Heap to",
    "start": "4396679",
    "end": "4402280"
  },
  {
    "text": "actually work out what what data is alive and there are various kind of white papers on on how you can do uh garbage",
    "start": "4402280",
    "end": "4410639"
  },
  {
    "text": "collection ergonomics as it gets called to try and get these things to work I mean basically the take-home is this is",
    "start": "4410639",
    "end": "4417920"
  },
  {
    "text": "a mess get yourself a proper garbage collector and buy some AOL",
    "start": "4417920",
    "end": "4424400"
  },
  {
    "text": "software and the other the other thing with this is that these garbage collection pauses only get worse as your",
    "start": "4424880",
    "end": "4432760"
  },
  {
    "text": "you know as your HEAP sizes increase so it's realistic to think that a a",
    "start": "4432760",
    "end": "4439080"
  },
  {
    "text": "current jvm is going to start getting unacceptable garbage collection pauses you know a pause which is going to mean",
    "start": "4439080",
    "end": "4445440"
  },
  {
    "text": "that you miss a heartbeat and you end up rebooting a server um because it's trying to compa it's trying to it's",
    "start": "4445440",
    "end": "4450920"
  },
  {
    "text": "trying to visit the whole of four gigabyt of Heap which just when you try and do that in a garbage collection pause takes many seconds and that means",
    "start": "4450920",
    "end": "4458480"
  },
  {
    "text": "that you can end up missing a heartbeat if you miss a heartbeat in a kind of a a server environment then it it looks like",
    "start": "4458480",
    "end": "4464639"
  },
  {
    "text": "the server has died or crashed or something so you end up rebooting it it wasn't that at all it was just that your garbage collector kicked in so this is a",
    "start": "4464639",
    "end": "4472120"
  },
  {
    "text": "this is a real problem and that's why aor has a real",
    "start": "4472120",
    "end": "4477199"
  },
  {
    "text": "solution okay [Music]",
    "start": "4477199",
    "end": "4483920"
  },
  {
    "text": "oh so these come from Eva oh don't be afraid of garbage it is good uh don't",
    "start": "4483920",
    "end": "4489840"
  },
  {
    "text": "like finalizers finalizers are just a a mess because what they're trying to do is they're trying to recoup uh uh",
    "start": "4489840",
    "end": "4497960"
  },
  {
    "text": "resources typically from the from the operating system or something and there's not much control over when they",
    "start": "4497960",
    "end": "4503080"
  },
  {
    "text": "get run in Java 7 you're getting things like autoc closable and things like that so the need for for finalizes is going",
    "start": "4503080",
    "end": "4509360"
  },
  {
    "text": "to be reduced um the way they're implemented in the the VM is kind of messy as well",
    "start": "4509360",
    "end": "4515719"
  },
  {
    "text": "so I wouldn't be too afraid of them but uh you know no know their",
    "start": "4515719",
    "end": "4521040"
  },
  {
    "text": "limitations um always be careful around locking well if you're writing very parallel",
    "start": "4521040",
    "end": "4527840"
  },
  {
    "text": "things and you have a lock and everything gets serialized on the lock guess what that's bad",
    "start": "4527840",
    "end": "4533760"
  },
  {
    "text": "so make things concurrent when you can um benchmarks are often focused on",
    "start": "4533760",
    "end": "4540040"
  },
  {
    "text": "throughputs but miss out and real GC impact so it's very common for people to game benchmarks and one of the ways they",
    "start": "4540040",
    "end": "4546840"
  },
  {
    "text": "can game benchmarks is they can set up the garbage collector so it doesn't do an old generation garbage collection uh",
    "start": "4546840",
    "end": "4552840"
  },
  {
    "text": "pause whilst The Benchmark is running so typically a benchmark will kind of run several iterations if you do your",
    "start": "4552840",
    "end": "4559360"
  },
  {
    "text": "old generation pauses in between the iterations then it never gets timed and that gives you very nice garbage",
    "start": "4559360",
    "end": "4564400"
  },
  {
    "text": "collection very good performance numbers and so guess what you know when people are generating when performance",
    "start": "4564400",
    "end": "4569880"
  },
  {
    "text": "Engineers are generate generate uh Benchmark numbers this is what they'll try and do because it makes their VM",
    "start": "4569880",
    "end": "4575159"
  },
  {
    "text": "look faster than it actually is um if you're an application guy and you actually care about getting these pauses",
    "start": "4575159",
    "end": "4580960"
  },
  {
    "text": "you should kind of uh wake up and yeah Benchmark yourself",
    "start": "4580960",
    "end": "4586360"
  },
  {
    "text": "okay so I'm at the end hopefully I haven't used the whole of an hour and 45",
    "start": "4586360",
    "end": "4591679"
  },
  {
    "text": "minutes abm's a great abstraction hopefully you've kind of seen into what the jvm is doing in terms of the the",
    "start": "4591679",
    "end": "4599080"
  },
  {
    "text": "compilers I've talked some about the the garbage collector the garbage collector is a much more complicated Beast than",
    "start": "4599080",
    "end": "4606400"
  },
  {
    "text": "kind of the the few slides which were in the lets on but kind of the the the",
    "start": "4606400",
    "end": "4612040"
  },
  {
    "text": "take-home is that you know you need to do something Smarter with garbage collector than has as uh typically",
    "start": "4612040",
    "end": "4617800"
  },
  {
    "text": "happened compaction is kind of this uh this nasty with the you know we like",
    "start": "4617800",
    "end": "4623280"
  },
  {
    "text": "memory safety we don't like garbage collection pauses why do we get garbage collection pauses because of compaction",
    "start": "4623280",
    "end": "4629040"
  },
  {
    "text": "how can we avoid you know these pauses we can be continuously compacting",
    "start": "4629040",
    "end": "4634480"
  },
  {
    "text": "avoiding uh the situation where these these compact pauses are going to happen and and Zing is you know kind of the at",
    "start": "4634480",
    "end": "4642159"
  },
  {
    "text": "the front of doing this what ising",
    "start": "4642159",
    "end": "4648320"
  },
  {
    "text": "okay read the slides to you I already said generational posess garbage collector is now known as the C4 garbage",
    "start": "4648960",
    "end": "4655199"
  },
  {
    "text": "collector it's the garbage collector inside the the AO software you know uh uh jvm that we produce originally why",
    "start": "4655199",
    "end": "4663639"
  },
  {
    "text": "why did we develop this whole platform we had um these these server boxes um",
    "start": "4663639",
    "end": "4668880"
  },
  {
    "text": "Sasha mentioned you know earlier on that with the first ones we were showing off the the boxes so these systems have got",
    "start": "4668880",
    "end": "4676080"
  },
  {
    "text": "864 processor cores in them and I think 640 GB of",
    "start": "4676080",
    "end": "4682159"
  },
  {
    "text": "RAM um so they're big it's a lot of memory a lot of ram a lot of CPU cores",
    "start": "4682159",
    "end": "4689679"
  },
  {
    "text": "and um when you're kind of if you've got a jvm at that kind of size then you",
    "start": "4689679",
    "end": "4696000"
  },
  {
    "text": "can't you know guess what 640 gab if you're going to do a GC pause that's going to take a while so you have to",
    "start": "4696000",
    "end": "4703639"
  },
  {
    "text": "engineer around it and you want to engineer everything to be as concurrent as possible and so on",
    "start": "4703639",
    "end": "4709239"
  },
  {
    "text": "and so you know aul has been focused on this problem for eight plus years it's really great that you know in terms of",
    "start": "4709239",
    "end": "4715639"
  },
  {
    "text": "the number of CES that you're getting now inside a laptop inside a desktop inside of your your common server you know Intel are catching up with with",
    "start": "4715639",
    "end": "4722239"
  },
  {
    "text": "what isol of's had for the the the last few years but that's kind of so some",
    "start": "4722239",
    "end": "4729840"
  },
  {
    "text": "history okay q& a",
    "start": "4729840",
    "end": "4734719"
  },
  {
    "text": "so can you elaborate how what are the properties what what",
    "start": "4735040",
    "end": "4741960"
  },
  {
    "text": "are you exploiting that others are not so the the the the you know the the real",
    "start": "4741960",
    "end": "4747199"
  },
  {
    "text": "you know answer is that there's a read barrier there so so the read barrier",
    "start": "4747199",
    "end": "4752239"
  },
  {
    "text": "means that when you load a reference from a from an object so you've got a field which is a reference so maybe it's",
    "start": "4752239",
    "end": "4758960"
  },
  {
    "text": "a linked list it's the next field so it's the next node in a linked list you're loading that reference out of an",
    "start": "4758960",
    "end": "4765440"
  },
  {
    "text": "object into a register say and immediately following that you do this",
    "start": "4765440",
    "end": "4770600"
  },
  {
    "text": "read barrier optimization sorry this read barrier in uh operation on the",
    "start": "4770600",
    "end": "4775639"
  },
  {
    "text": "original Vega Hardware this was a single instruction and rather than it being called read barrier was called The",
    "start": "4775639",
    "end": "4780800"
  },
  {
    "text": "Loaded value barrier um on x86 we have something equivalent and it's super",
    "start": "4780800",
    "end": "4787600"
  },
  {
    "text": "smart and it's super fast and it's about the same cost as the lvb instruction on the Vega",
    "start": "4787600",
    "end": "4792760"
  },
  {
    "text": "Hardware um what does this what does the property of the lvb give you it gives",
    "start": "4792760",
    "end": "4798719"
  },
  {
    "text": "you this property that whilst an object can be in one of two places you only ever see it in the final",
    "start": "4798719",
    "end": "4805480"
  },
  {
    "text": "place and so if it's not already in that final place you actually do the copying",
    "start": "4805480",
    "end": "4810600"
  },
  {
    "text": "the the application thread will actually do the copying itself um however that's bounded so that",
    "start": "4810600",
    "end": "4817440"
  },
  {
    "text": "it only ever has to do a small amount of copying if it's a large amount of copying it does a small amount of copying and then ask the garbage",
    "start": "4817440",
    "end": "4823320"
  },
  {
    "text": "collector to help it out and do everything else threads and uh garbage collection",
    "start": "4823320",
    "end": "4830560"
  },
  {
    "text": "threads um you have to do compare and swap out operations so that you know if",
    "start": "4830560",
    "end": "4835800"
  },
  {
    "text": "you if the garbage collector is relocating something and the mutator is relocating it the the winner of the compar and swap is the guy who actually",
    "start": "4835800",
    "end": "4842480"
  },
  {
    "text": "wins the you know now it's being relocated and then you know the",
    "start": "4842480",
    "end": "4848080"
  },
  {
    "text": "application continues with whoever was the winner of the compar and swap operation and there are very you know",
    "start": "4848080",
    "end": "4854920"
  },
  {
    "text": "the chance that that happens is very rare because copying is a very unusual",
    "start": "4854920",
    "end": "4860840"
  },
  {
    "text": "operation the normal situation is that you've just got a a pointer which is pointing at the old location and you",
    "start": "4860840",
    "end": "4866320"
  },
  {
    "text": "just need to move it to the new location so copying is is unusual so",
    "start": "4866320",
    "end": "4872600"
  },
  {
    "text": "um Gil can give much more detailed explanation of all of these",
    "start": "4872600",
    "end": "4877679"
  },
  {
    "text": "things because he would I tend to you might have guessed I tend to work more in the compilers rather than the garbage collector and so uh",
    "start": "4877679",
    "end": "4884740"
  },
  {
    "text": "[Music] yeah of the jvm",
    "start": "4884740",
    "end": "4890480"
  },
  {
    "text": "optimizations and I it specifically mentioned Escape analysis and um the the",
    "start": "4890480",
    "end": "4897000"
  },
  {
    "text": "this you know this the scarla guys in Switzerland did a nice paper on this and submitted into a workshop that I was the chair of so I I knew the paper quite",
    "start": "4897000",
    "end": "4903639"
  },
  {
    "text": "well and um what they were actually doing was because uh invoke Dynamic",
    "start": "4903639",
    "end": "4909239"
  },
  {
    "text": "doesn't exist invoke Dynamic is this new bike code which is going to kind of help languages like scolar and so on there",
    "start": "4909239",
    "end": "4914600"
  },
  {
    "text": "were using reflection for doing method dispatch and what they were doing was they were going let's remember the",
    "start": "4914600",
    "end": "4921600"
  },
  {
    "text": "method object for doing the method dispatch and so they were storing this method object into a static final or a",
    "start": "4921600",
    "end": "4927280"
  },
  {
    "text": "final field or or whatever and going now I've got I remember what the method is I",
    "start": "4927280",
    "end": "4932960"
  },
  {
    "text": "can just reuse it I don't need to recompute the method object all the time however because they've taken this",
    "start": "4932960",
    "end": "4938960"
  },
  {
    "text": "method object and they've written it into a field it's now escaped so it's the Escape analysis can't don't kick in",
    "start": "4938960",
    "end": "4946199"
  },
  {
    "text": "because it it has escaped it truly has what the Escape analysis will do for reflection is it'll so behind the scenes",
    "start": "4946199",
    "end": "4953880"
  },
  {
    "text": "of reflection the J the the the runtime system will generate bite codes and the",
    "start": "4953880",
    "end": "4959440"
  },
  {
    "text": "bite codes will do the the reflective method call for you",
    "start": "4959440",
    "end": "4965159"
  },
  {
    "text": "and um if you avoid the Escape analysis optimization then you can't you can't",
    "start": "4965159",
    "end": "4972440"
  },
  {
    "text": "realize that the method object one whilst um it's created it has no purpose",
    "start": "4972440",
    "end": "4977560"
  },
  {
    "text": "other than to carry around these bite codes and all these bite codes are doing is doing a a virtual method call",
    "start": "4977560",
    "end": "4984880"
  },
  {
    "text": "so um so what happens in in this particular case for scolar and hopefully they they they fixed it or Hotpot has",
    "start": "4984880",
    "end": "4992040"
  },
  {
    "text": "actually got its Escape analysis working slightly differently or or something is that because they store the",
    "start": "4992040",
    "end": "4997560"
  },
  {
    "text": "method object they break the Escape analysis and then you don't get the the the direct virtual method call through",
    "start": "4997560",
    "end": "5003360"
  },
  {
    "text": "to the Target so you can do reflective method calls and it's the same performance as just a",
    "start": "5003360",
    "end": "5008600"
  },
  {
    "text": "regular method call if you can inline everything and Escape analyze it and so on and I've got research papers on it",
    "start": "5008600",
    "end": "5015960"
  },
  {
    "text": "so but [Music] um um the JV so hotspot and you know Jes",
    "start": "5015960",
    "end": "5023400"
  },
  {
    "text": "rvm and pick your your virtual machine they they tend not to have something",
    "start": "5023400",
    "end": "5028800"
  },
  {
    "text": "which is like um if people are familiar with the the C function alloc a which is kind of like allocate on the stack they",
    "start": "5028800",
    "end": "5035120"
  },
  {
    "text": "tend not to have that operation inside the VM so but they do put objects onto",
    "start": "5035120",
    "end": "5041639"
  },
  {
    "text": "the stack how do they do that well what they do is they do the Escape analysis realize that the object doesn't escape",
    "start": "5041639",
    "end": "5047920"
  },
  {
    "text": "and then they turn it into the the the next field from our iterator becomes one of our registers in our infinite pool of",
    "start": "5047920",
    "end": "5055159"
  },
  {
    "text": "registers and then when we register allocate that it'll either end up going in a in a register but if we're Limited",
    "start": "5055159",
    "end": "5062040"
  },
  {
    "text": "in terms of the number of registers we have then we'll end up spilling it out onto the stack and when then when we need it again we fill it back in again",
    "start": "5062040",
    "end": "5069280"
  },
  {
    "text": "um and so this is effectively stack allocation but not quite um you know",
    "start": "5069280",
    "end": "5075960"
  },
  {
    "text": "kind of a side note is that the Vaga architecture actually did have a notion of of Stack allocation uh and so on but",
    "start": "5075960",
    "end": "5082679"
  },
  {
    "text": "not to worry about",
    "start": "5082679",
    "end": "5085480"
  },
  {
    "text": "that um make it very large um uh",
    "start": "5089080",
    "end": "5095600"
  },
  {
    "text": "um make it large make it cold you know all of these things Bas basically the",
    "start": "5095600",
    "end": "5100880"
  },
  {
    "text": "the jvm is going to inline it if it thinks there's a performance advantage to inline it um you know an access a",
    "start": "5100880",
    "end": "5107239"
  },
  {
    "text": "method should always get inlined um so don't you know if you're trying to avoid inlining an access a method you know bad",
    "start": "5107239",
    "end": "5113719"
  },
  {
    "text": "luck uh there's also there's a command line flag dxx minus inline which switches off",
    "start": "5113719",
    "end": "5120639"
  },
  {
    "text": "all inlining in the VM uh if if you were you know crazy enough to to want to",
    "start": "5120639",
    "end": "5126119"
  },
  {
    "text": "defeat the whole the the compiler how do you test correctness of",
    "start": "5126119",
    "end": "5133520"
  },
  {
    "text": "the concurrent things and it sounds like they're going to have lots of bugs in them and and and so on and how do you",
    "start": "5133520",
    "end": "5138719"
  },
  {
    "text": "avoid this so you invest in QA um that's a big way to to solve these",
    "start": "5138719",
    "end": "5146440"
  },
  {
    "text": "problems um but you can also recognize things that there are certain invariance",
    "start": "5146440",
    "end": "5152040"
  },
  {
    "text": "um about the code about the Heat and you can make sure that those invariants hold",
    "start": "5152040",
    "end": "5157159"
  },
  {
    "text": "and then you you can have kind of slower debug versions of the VM which are making sure that all of the invariants",
    "start": "5157159",
    "end": "5163760"
  },
  {
    "text": "are always holding and that your HEAP is always in the correct State and all of these kind of things and then when they",
    "start": "5163760",
    "end": "5169040"
  },
  {
    "text": "don't hold you can go oh we need to go and fix a bug but you know if you if if we've done our job right this doesn't",
    "start": "5169040",
    "end": "5175800"
  },
  {
    "text": "affect you and uh and so on but yeah it's it's a lot of work it's complicated you know yeah I've got a job that's",
    "start": "5175800",
    "end": "5181800"
  },
  {
    "text": "great you yeah um so is it good or bad for JM to",
    "start": "5181800",
    "end": "5188159"
  },
  {
    "text": "have too much of reflection um so people have told me in",
    "start": "5188159",
    "end": "5194159"
  },
  {
    "text": "the past you know avoid reflection uh because it's got this huge performance uh overhead and I usually say to them",
    "start": "5194159",
    "end": "5200800"
  },
  {
    "text": "show me the numbers and then you know they never come back to me and the reason they never come back to me is",
    "start": "5200800",
    "end": "5205920"
  },
  {
    "text": "they they've gone and looked at the numbers and when they actually have some hot code which is doing reflection it works very well um so it's true in very",
    "start": "5205920",
    "end": "5214840"
  },
  {
    "text": "early jvms there was very little optimization there so a method dispatch via the reflective mechanisms would be",
    "start": "5214840",
    "end": "5220639"
  },
  {
    "text": "kind of like hundreds of instructions whereas a regular method dispatch would be say one",
    "start": "5220639",
    "end": "5225719"
  },
  {
    "text": "instruction um these days you know I I think the kind of the rule of thumb they",
    "start": "5225719",
    "end": "5231280"
  },
  {
    "text": "have is that it's kind of twice as costly as a regular method dispatch um the the problem with this is",
    "start": "5231280",
    "end": "5238159"
  },
  {
    "text": "that you you need to realize it's a dynamic system and so it's when it gets hot you're going to see these performance wins and and so on in the",
    "start": "5238159",
    "end": "5245800"
  },
  {
    "text": "virtual machine I you know the meta circular VM I did a lot of work on the the cost of a reflective core was",
    "start": "5245800",
    "end": "5251000"
  },
  {
    "text": "exactly the same as a regular method call we optimized everything away um uh",
    "start": "5251000",
    "end": "5256280"
  },
  {
    "text": "and so on so there's really no reason for it the problem is is to get that optimized version you've got to get the",
    "start": "5256280",
    "end": "5261600"
  },
  {
    "text": "optimizing compiler in there you've got to the Adaptive optimization system has got to kind of like realize oh this does",
    "start": "5261600",
    "end": "5266920"
  },
  {
    "text": "nothing and zip and remove all of the code which was uh you know causing the performance overhead",
    "start": "5266920",
    "end": "5274280"
  },
  {
    "text": "differ between AAC um the idea behind metac circularity",
    "start": "5275119",
    "end": "5280400"
  },
  {
    "text": "is that you kind of should eat your own dog food um so if you read kind of like",
    "start": "5280400",
    "end": "5285840"
  },
  {
    "text": "the the Dragon book and things like that there kind of a rule of thumb that when you write a compiler you should write it",
    "start": "5285840",
    "end": "5290920"
  },
  {
    "text": "in the language you're actually trying to compile and clearly there's a bootstrapping problem when you do that",
    "start": "5290920",
    "end": "5298119"
  },
  {
    "text": "um so if you look at a a regular VM like hotspot it's written in C++",
    "start": "5298119",
    "end": "5304639"
  },
  {
    "text": "so it's not written in Java and so this eat your own dog food property doesn't exist um a metac circular VM eats its",
    "start": "5304639",
    "end": "5311600"
  },
  {
    "text": "own dog food so so Jes rvm is an example of a metac circular VM which is a VM",
    "start": "5311600",
    "end": "5317119"
  },
  {
    "text": "written in Java um it sounds like that shouldn't be possible it's very possible um people",
    "start": "5317119",
    "end": "5324040"
  },
  {
    "text": "have built whole operating systems entirely out of java uh and so on there's there's really there's there's",
    "start": "5324040",
    "end": "5330360"
  },
  {
    "text": "no reason why not and the kind of the the advantage of the eat your own food is when you realize something is an",
    "start": "5330360",
    "end": "5336600"
  },
  {
    "text": "issue you go and fix it in the language you go and fix it inside the VM and you kind of get this beneficial uh Circle",
    "start": "5336600",
    "end": "5343440"
  },
  {
    "text": "happening you know it it whilst it's you know it's kind of unfair to say that hotspot is kind of not eating its own",
    "start": "5343440",
    "end": "5349320"
  },
  {
    "text": "dog food it had it did have the bootstrapping problem you know what other the VM was that for it to bootstrap itself on um what what happens",
    "start": "5349320",
    "end": "5356880"
  },
  {
    "text": "inside hotspot is you know things get pushed out into the Java code so that they can take advantage of all of these",
    "start": "5356880",
    "end": "5362280"
  },
  {
    "text": "optimization optimizing compiler uh goodnesses and so",
    "start": "5362280",
    "end": "5367239"
  },
  {
    "text": "on yeah you have application threads and you have garbage collection threads and",
    "start": "5368199",
    "end": "5376000"
  },
  {
    "text": "you've got your HEAP which has got you know things which are alive and things which are are dead and you need to to to",
    "start": "5376000",
    "end": "5381679"
  },
  {
    "text": "to to to compact them um it's possible via an algorithm we",
    "start": "5381679",
    "end": "5388600"
  },
  {
    "text": "have which is this continuously compacting concurrent collection algorithm and there's a whole research paper which describes it uh so I'm",
    "start": "5388600",
    "end": "5396239"
  },
  {
    "text": "trying to think you know is there is there is there a quick way to kind of summarize that for you um it it it it's",
    "start": "5396239",
    "end": "5402520"
  },
  {
    "text": "complicated but um you know essentially you make sure that when you're doing",
    "start": "5402520",
    "end": "5408080"
  },
  {
    "text": "this you know this compaction and so on you you're not reliant on things like locks and uh and so on and you know I",
    "start": "5408080",
    "end": "5413840"
  },
  {
    "text": "already said you know if the application can't make progress because it's waiting for the GC to do something the",
    "start": "5413840",
    "end": "5419199"
  },
  {
    "text": "application actually makes the progress itself a small amount of bounded progress and and so on",
    "start": "5419199",
    "end": "5428440"
  },
  {
    "text": "um so the the big I mean the big thing for for Java 7 really is just this invoke Dynamic bite code and the invoke",
    "start": "5432960",
    "end": "5440239"
  },
  {
    "text": "Dynamic B code has these interesting uh method dispatch properties um but it's",
    "start": "5440239",
    "end": "5446280"
  },
  {
    "text": "being kind of created with a kind of a knowledge of how the VM is actually working so is it really a VM optimizer",
    "start": "5446280",
    "end": "5454639"
  },
  {
    "text": "it's kind of it's kind of you know the the VM guys holding hands with the the guys who are generating the bik code and",
    "start": "5454639",
    "end": "5460719"
  },
  {
    "text": "realizing there's kind of a more efficient way to to do something and invoke Dynamic also exposes kind of some",
    "start": "5460719",
    "end": "5466199"
  },
  {
    "text": "clever call site semantics and things like that um really you know what you should be",
    "start": "5466199",
    "end": "5473040"
  },
  {
    "text": "waiting for is just the optimizations would already exist to get better so you know the the new Intel processes have",
    "start": "5473040",
    "end": "5480159"
  },
  {
    "text": "got AVX instructions so AVX instructions have got 256 six bit uh uh registers and",
    "start": "5480159",
    "end": "5486679"
  },
  {
    "text": "they also three address and there's all of these other things which are very un Intel uh and so on and so you know",
    "start": "5486679",
    "end": "5493920"
  },
  {
    "text": "hotspot has to get you know has to add support for for for these instructions and when you're doing VOR op",
    "start": "5493920",
    "end": "5500400"
  },
  {
    "text": "optimizations you got to do vectorization so that's realizing you've got a certain Loop structure and that",
    "start": "5500400",
    "end": "5505520"
  },
  {
    "text": "you can actually do kind of four operations instead of one uh inside that Loop structure um other things I mean",
    "start": "5505520",
    "end": "5513920"
  },
  {
    "text": "Escape analysis needs to get better everything needs to get better but it's kind of more of the same um there's been",
    "start": "5513920",
    "end": "5519679"
  },
  {
    "text": "some interesting research on things like object in lining and different things like that there's it's it's a very",
    "start": "5519679",
    "end": "5526679"
  },
  {
    "text": "Dynamic and interesting uh research space how does groovy do on the jvm how",
    "start": "5526679",
    "end": "5533960"
  },
  {
    "text": "does groovy do on the jvm compile some code how are we going to know where the incoming arguments are for the for the",
    "start": "5533960",
    "end": "5540600"
  },
  {
    "text": "method so in in the in The Zing virtual machine we pass doents through registers this avoid us having to load them from",
    "start": "5540600",
    "end": "5546960"
  },
  {
    "text": "the stack they're just there in the register and this is this is common on 64 bit x86 code on 32 bit x86 code it's",
    "start": "5546960",
    "end": "5554920"
  },
  {
    "text": "very common to pass things on the on the stack the number of parameter registers that you have to pass things in",
    "start": "5554920",
    "end": "5560920"
  },
  {
    "text": "registers is only six so if you have more than six parameters then the extra parameters are going to get passed on",
    "start": "5560920",
    "end": "5566159"
  },
  {
    "text": "the stack but of course you know when these things get inlined all of this passing on stacks and passing in",
    "start": "5566159",
    "end": "5571520"
  },
  {
    "text": "registers all goes away because you know the in LED method becomes part of the graph and these things never kind of end",
    "start": "5571520",
    "end": "5577040"
  },
  {
    "text": "up in registers um so I mean to to kind of answer your question more directly it's",
    "start": "5577040",
    "end": "5583639"
  },
  {
    "text": "kind of a choice for the for the VM as to what is the calling convention it's going to use and it just happens for The",
    "start": "5583639",
    "end": "5589800"
  },
  {
    "text": "Zing VM we use pass by register for efficiency",
    "start": "5589800",
    "end": "5594920"
  },
  {
    "text": "reasons do you have any benchmarks that show the performance differences of",
    "start": "5596040",
    "end": "5601960"
  },
  {
    "text": "non def very I really appreciate it so um as you guys probably know",
    "start": "5601960",
    "end": "5609770"
  },
  {
    "text": "[Music]",
    "start": "5609770",
    "end": "5613919"
  }
]