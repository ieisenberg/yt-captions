[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "all right we'll get started my name is gabriel gonzalez i am a software",
    "start": "3900",
    "end": "10000"
  },
  {
    "text": "engineer at twitter and today I'm gonna be talking about secure execution of untrusted scripts so before I begin I",
    "start": "10000",
    "end": "18490"
  },
  {
    "text": "want to ask the audience one question oops who has ever done something like",
    "start": "18490",
    "end": "24910"
  },
  {
    "start": "23000",
    "end": "53000"
  },
  {
    "text": "this where something staller asks you to install your software by doing curl some",
    "start": "24910",
    "end": "30009"
  },
  {
    "text": "URL which contains an installation script and pipe that into bash sometimes with root privileges who's ever done",
    "start": "30009",
    "end": "35800"
  },
  {
    "text": "that yeah a lot of people I've done it myself so you're just as guilty as I am",
    "start": "35800",
    "end": "41590"
  },
  {
    "text": "and what I would like to do actually is to fix this problem to provide a secure",
    "start": "41590",
    "end": "46899"
  },
  {
    "text": "way to install scripts such as they execute with a very restricted set of privileges however this talk is actually",
    "start": "46899",
    "end": "55570"
  },
  {
    "start": "53000",
    "end": "76000"
  },
  {
    "text": "and so actually there's an entire website which is dedicated to gross violations of this principle it's called",
    "start": "55570",
    "end": "61030"
  },
  {
    "text": "curl pipe sh tumblr com you can see lots of egregious examples of this even from",
    "start": "61030",
    "end": "67000"
  },
  {
    "text": "very large popular software packages like npm rust nicks and lots of other",
    "start": "67000",
    "end": "74200"
  },
  {
    "text": "things however the talk of the tile might be slightly loose misleading usually I tend to work more on Michael",
    "start": "74200",
    "end": "81850"
  },
  {
    "start": "76000",
    "end": "136000"
  },
  {
    "text": "foundational libraries and so this is actually just one practical application of a foundational library that I'm",
    "start": "81850",
    "end": "88510"
  },
  {
    "text": "working on and so this talk is going to explain what that foundational library is and how you can use it to build",
    "start": "88510",
    "end": "94330"
  },
  {
    "text": "secure installers and possibly other applications as well so the first part",
    "start": "94330",
    "end": "99490"
  },
  {
    "text": "of the script I'm gonna give them motivation for why I want to be able to create secure software and second part",
    "start": "99490",
    "end": "106390"
  },
  {
    "text": "of the talk I'm gonna give an antenna establish security across the pipeline and the way i'm going to divide this up",
    "start": "106390",
    "end": "113020"
  },
  {
    "text": "is it's actually in terms of three modular software pieces one's going to be a court oculus which i've built and",
    "start": "113020",
    "end": "119590"
  },
  {
    "text": "that has a front end in the back end which are used as part of the compiler pipeline and finally another talk I'll",
    "start": "119590",
    "end": "125110"
  },
  {
    "text": "give a conclusion and if time permits we can actually do a live demo where somebody from the audience actually gives me some code which I will run for",
    "start": "125110",
    "end": "132099"
  },
  {
    "text": "my laptop and I won't even check what the code is so that the actual foundational library",
    "start": "132099",
    "end": "138530"
  },
  {
    "start": "136000",
    "end": "187000"
  },
  {
    "text": "that I'm trying to do at the moment is what I like to call the Internet of code and the reason I call at the end of the code it's the internet because it's",
    "start": "138530",
    "end": "145130"
  },
  {
    "text": "distributed and you actually use the internet as the distribution mechanism meaning that every type term value or",
    "start": "145130",
    "end": "153200"
  },
  {
    "text": "function this language has its own URL so you can host all of these on their",
    "start": "153200",
    "end": "158330"
  },
  {
    "text": "own network endpoints for example if you have your laptop with you right now you can curl that URL right there sigil dot",
    "start": "158330",
    "end": "164300"
  },
  {
    "text": "place / talk it's this talk number 0 but I've given on this subject and then",
    "start": "164300",
    "end": "169850"
  },
  {
    "text": "there's a true value that's posted on the network that represents the how true is encoded in this core calculus that",
    "start": "169850",
    "end": "176000"
  },
  {
    "text": "I'm building in this case it's a lambda calculus that's why you see lamb doesn't that code I don't expect you to understand lambda calculus for the",
    "start": "176000",
    "end": "182000"
  },
  {
    "text": "purpose of this talk just know that it's sort of a low-level encoding for functional languages and what's neat is",
    "start": "182000",
    "end": "188900"
  },
  {
    "text": "that expressions can have references to other expressions so you can for example",
    "start": "188900",
    "end": "194450"
  },
  {
    "text": "here is an expression this is the implementation of the or operator in this language and it has references to",
    "start": "194450",
    "end": "201859"
  },
  {
    "text": "remote URLs you can see this hashtag introduces our mole preference and this",
    "start": "201859",
    "end": "206930"
  },
  {
    "text": "case is a reference to a type so I'm saying here you can roughly read this as saying the value be one that I'm binding",
    "start": "206930",
    "end": "213290"
  },
  {
    "text": "has a type which is given at this URL the URL for wool and you can also",
    "start": "213290",
    "end": "219200"
  },
  {
    "start": "218000",
    "end": "344000"
  },
  {
    "text": "provide URLs for terms like true there at the bottom and so by doing this expressions can transitively refer to",
    "start": "219200",
    "end": "226579"
  },
  {
    "text": "other motor expressions which can in turn refer to other expressions the only restriction is that a it has to be well",
    "start": "226579",
    "end": "233269"
  },
  {
    "text": "typed be it can't be recursive and see it has to form a directed basically",
    "start": "233269",
    "end": "239450"
  },
  {
    "text": "graft and the compiler will enforce all these properties at compile time and the",
    "start": "239450",
    "end": "244819"
  },
  {
    "text": "software the existing software architecture that this most closely resembles would probably be JavaScript",
    "start": "244819",
    "end": "251060"
  },
  {
    "text": "although it's not the comparison is not exact so in JavaScript you can obviously host code at arbitrary endpoints and you",
    "start": "251060",
    "end": "257030"
  },
  {
    "text": "can include that and you know if you bought if you do it's within the same domain you know about violate",
    "start": "257030",
    "end": "262130"
  },
  {
    "text": "cross-domain security policies and so there you could do that but there are some important",
    "start": "262130",
    "end": "267690"
  },
  {
    "text": "this between this and let's say JavaScript first one is that this has a much lower barriers distribution hosting",
    "start": "267690",
    "end": "275040"
  },
  {
    "text": "code is just as simple as posting text to a URL and embedding it is as simple as a hashtag URL reference there is no",
    "start": "275040",
    "end": "281640"
  },
  {
    "text": "ceremony involved in distributing code but another really important difference is that is typed and the reasons is",
    "start": "281640",
    "end": "289050"
  },
  {
    "text": "important is that I want to use the type system to enforce policies allotment if I'd be injecting remote expressions",
    "start": "289050",
    "end": "296700"
  },
  {
    "text": "directly into my syntax tree I want to have some say over what those expressions can be did anyone attend",
    "start": "296700",
    "end": "303870"
  },
  {
    "text": "Justin's talked earlier on a Haskell and pure script if you attended that talk he",
    "start": "303870",
    "end": "309060"
  },
  {
    "text": "explained that one of the benefits of a type system is a type it's not only says",
    "start": "309060",
    "end": "314160"
  },
  {
    "text": "what something can do but more importantly what it cannot do so for example we can use a type like wool to",
    "start": "314160",
    "end": "320910"
  },
  {
    "text": "enforce something like that saying this can either be only a true or only a false it cannot be a side effect it",
    "start": "320910",
    "end": "327390"
  },
  {
    "text": "can't be a function it can't be like some remote code injection that does anything other than being true or false",
    "start": "327390",
    "end": "332790"
  },
  {
    "text": "and so types can be a way of enforcing policy and I'm going to show a concrete",
    "start": "332790",
    "end": "337830"
  },
  {
    "text": "example how we can do that for a real world program with side effects so let",
    "start": "337830",
    "end": "346260"
  },
  {
    "start": "344000",
    "end": "439000"
  },
  {
    "text": "me give you an example of how this would work in four at the very low level so let's say I have three Network endpoints",
    "start": "346260",
    "end": "353400"
  },
  {
    "text": "hosting code so the first one here at the top it's going to be hosting the or function and then we also have a network",
    "start": "353400",
    "end": "359940"
  },
  {
    "text": "endpoint for true and network endpoint for false and since these are valid",
    "start": "359940",
    "end": "366090"
  },
  {
    "text": "expressions within this language I can apply a remote URL to another remote URL so here I can take the compiler for this",
    "start": "366090",
    "end": "373830"
  },
  {
    "text": "core calculus which is called morte and morty will take an expression on standard input so here I'm just typing",
    "start": "373830",
    "end": "379560"
  },
  {
    "text": "this in let's say pacing this in at the command line and then it will output an",
    "start": "379560",
    "end": "385350"
  },
  {
    "text": "expression on standard output which has been type checked has all remote references resolved and then up fully",
    "start": "385350",
    "end": "392250"
  },
  {
    "text": "optimized and so here I'm saying I'm going to apply the or URL in prefix form",
    "start": "392250",
    "end": "397919"
  },
  {
    "text": "the two arguments the true URL and the false you are and so morte will recursively resolve",
    "start": "397919",
    "end": "404080"
  },
  {
    "text": "all these expressions and remove all remote references you'll type check the program to make sure that it's valid and",
    "start": "404080",
    "end": "410050"
  },
  {
    "text": "then will optimize the program at compile time so we haven't actually done any code generation yet so this is all",
    "start": "410050",
    "end": "415509"
  },
  {
    "text": "compile-time evaluation and more table output two lines one is the inferred",
    "start": "415509",
    "end": "421180"
  },
  {
    "text": "type of the program so morte says the type of this result is going to be a bull oops and then the value and it",
    "start": "421180",
    "end": "428680"
  },
  {
    "text": "helped demises away or true false to true at compile time make more taste",
    "start": "428680",
    "end": "434740"
  },
  {
    "text": "really good at evaluating things I'll give a few more examples of that but as",
    "start": "434740",
    "end": "441009"
  },
  {
    "start": "439000",
    "end": "465000"
  },
  {
    "text": "you can imagine it would be really tedious if we had to provide fully qualified absolute references to urls",
    "start": "441009",
    "end": "446860"
  },
  {
    "text": "everywhere throughout our program now I don't even want to do that myself but you can do to make programming in this",
    "start": "446860",
    "end": "452650"
  },
  {
    "text": "style easier is that you can actually create local aliases the is this hashtag syntax works for things other than URLs",
    "start": "452650",
    "end": "459699"
  },
  {
    "text": "you can also import local files using either relative paths or absolute paths",
    "start": "459699",
    "end": "465150"
  },
  {
    "start": "465000",
    "end": "520000"
  },
  {
    "text": "so for example I can if I want to create a shorter reference to the bull URL I",
    "start": "465150",
    "end": "472210"
  },
  {
    "text": "can just create a file a local relative file name bool whose contents are just",
    "start": "472210",
    "end": "477699"
  },
  {
    "text": "hashtag the remote URL pointing to pool and now i can use this within my program",
    "start": "477699",
    "end": "483009"
  },
  {
    "text": "just by saying hashtag pool and it will import the file name pool embed that into the syntax tree and that will tour",
    "start": "483009",
    "end": "489310"
  },
  {
    "text": "contain reference to the remote URL for bull they don't bed the contents of that into the syntax tree then type check",
    "start": "489310",
    "end": "495849"
  },
  {
    "text": "things and normalize things so if i want to create convenient ergonomic shorthand",
    "start": "495849",
    "end": "500860"
  },
  {
    "text": "aliases i'll just create short hands for bool true false and an or and now i can",
    "start": "500860",
    "end": "507969"
  },
  {
    "text": "run the same programmer before but all i have to do is just say hashtag or hashtag true hashtag false and again it",
    "start": "507969",
    "end": "514599"
  },
  {
    "text": "will resolve everything and give me true evaluated at compile time morte though",
    "start": "514599",
    "end": "522849"
  },
  {
    "start": "520000",
    "end": "643000"
  },
  {
    "text": "is just one piece in a more modular and reusable software architecture that I'm building so morte is a very bare-bones",
    "start": "522849",
    "end": "532029"
  },
  {
    "text": "language it's highly minimal I'll show you what it looks like in later slides it only has three purposes",
    "start": "532029",
    "end": "537950"
  },
  {
    "text": "one is that it links code which is what I used to refer to resolving remote expressions it type checks that code to",
    "start": "537950",
    "end": "545420"
  },
  {
    "text": "enforce policy and it optimizes that code at compile time as much as possible and it's a total language meaning that",
    "start": "545420",
    "end": "552170"
  },
  {
    "text": "it can actually do a lot of optimization at compile time basic and make assumptions that other languages cannot",
    "start": "552170",
    "end": "557180"
  },
  {
    "text": "make and but programming amor take is actually really difficult to do like I",
    "start": "557180",
    "end": "562790"
  },
  {
    "text": "wouldn't want to do it myself so I've created a front-end language which i like to call anna which is just a",
    "start": "562790",
    "end": "568760"
  },
  {
    "text": "higher-level language that is more convenient to program in that compiles down to this low level for calculus",
    "start": "568760",
    "end": "575089"
  },
  {
    "text": "called morte and more day itself though it is not an executable program again it's just text like those example files",
    "start": "575089",
    "end": "581630"
  },
  {
    "text": "that you saw before so we need some way to take those lambda expressions and turn them into real executable machine",
    "start": "581630",
    "end": "588710"
  },
  {
    "text": "code and that's a responsibility of this northern component right here and noordam is also what's responsible for",
    "start": "588710",
    "end": "595010"
  },
  {
    "text": "enforcing policy making sure that only things that we whitelist will survive the transition to generating machine",
    "start": "595010",
    "end": "600650"
  },
  {
    "text": "code all these projects have a true API so they're all haskell libraries you",
    "start": "600650",
    "end": "606500"
  },
  {
    "text": "have an acyl api for generating our compiling code but they also provide a command-line interface as well so if you",
    "start": "606500",
    "end": "612920"
  },
  {
    "text": "don't want to ever have to depend on haskell each of these provides executable which takes something on standard some text on snare an input and",
    "start": "612920",
    "end": "619430"
  },
  {
    "text": "pipe something on standard output and the current progress of these products is that morte is essentially done is",
    "start": "619430",
    "end": "626690"
  },
  {
    "text": "regular public consumption well-documented stable and Anna though is almost done meaning that the compiler",
    "start": "626690",
    "end": "633710"
  },
  {
    "text": "is done but it also comes associated with a library of standard utilities on a GUI building in fact you can actually",
    "start": "633710",
    "end": "639709"
  },
  {
    "text": "see those standard utilities online there are URLs like the ones we've been looking at so here for example is a",
    "start": "639709",
    "end": "645350"
  },
  {
    "text": "service a server that I'm hosting which is just a file server and so all these are just files for example here is going",
    "start": "645350",
    "end": "651740"
  },
  {
    "text": "to be the imitation of the side effects type can be using later in this talk you have files which correspond to the",
    "start": "651740",
    "end": "658130"
  },
  {
    "text": "original Anna source code and then side by side with the morte encoded values so for example here's the encoding of the",
    "start": "658130",
    "end": "664490"
  },
  {
    "text": "IO type the side effect type and and then my passing through morte I get",
    "start": "664490",
    "end": "670180"
  },
  {
    "text": "something it looks like this low-level lambda calculus right here so he's all ready for distribution within anymore",
    "start": "670180",
    "end": "675579"
  },
  {
    "text": "take code malorum compiled on the other hand is a highly experimental is just a",
    "start": "675579",
    "end": "681250"
  },
  {
    "start": "677000",
    "end": "727000"
  },
  {
    "text": "really hockey back-end that I piece together just for this talk is not ready for public consumption at all but it",
    "start": "681250",
    "end": "687250"
  },
  {
    "text": "works even if it's incredibly dirty Sullivan gel polishes and releases on separate library but right now Leo's",
    "start": "687250",
    "end": "693940"
  },
  {
    "text": "have to trust me for the morn of examples and the talk will show how we can actually change together these three",
    "start": "693940",
    "end": "699790"
  },
  {
    "text": "components in order be able to securely run all these remote expressions that we sprinkled all over the internet so the",
    "start": "699790",
    "end": "708699"
  },
  {
    "text": "challenge is that I want to safely have important execute arbitrary code and I want to do it over an untrusted network so no encryption no authentication no",
    "start": "708699",
    "end": "716649"
  },
  {
    "text": "code signing I don't even care if the code itself was written by the NSA trying to infiltrate my system okay I'm",
    "start": "716649",
    "end": "722350"
  },
  {
    "text": "assuming the program is a complete enemy and I don't even need to necessarily trust the programmer at all and so the",
    "start": "722350",
    "end": "728139"
  },
  {
    "start": "727000",
    "end": "790000"
  },
  {
    "text": "way I'm going to do this is I'm going to split a program essentially into two phases in one phase is where we do things that are entirely pure harmless",
    "start": "728139",
    "end": "735010"
  },
  {
    "text": "so that's type checking optimization and linking remote expressions the worst that that can possibly do is it just",
    "start": "735010",
    "end": "740889"
  },
  {
    "text": "work waste my cpu maybe takes up a little bit too much memory downloads too much code from the internet we can solve",
    "start": "740889",
    "end": "746560"
  },
  {
    "text": "that using quotas but it can't really destroy our system and then there's a second part which occurs in the machine",
    "start": "746560",
    "end": "752529"
  },
  {
    "text": "generations to the code gens de where we actually compile a program to a real point with side effects and the boundary",
    "start": "752529",
    "end": "759880"
  },
  {
    "text": "between the pure face and the side effect phase is enforced using just one type and new braiding what are the side",
    "start": "759880",
    "end": "765490"
  },
  {
    "text": "effects that we're going to whitelist so in this code architecture all pure computations are automatically",
    "start": "765490",
    "end": "770829"
  },
  {
    "text": "whitelisted you don't have to explicitly ask permission from any central authority to distribute them but the set",
    "start": "770829",
    "end": "776139"
  },
  {
    "text": "of side effects that we're going to allow our secure installer to support must be explicitly whitelisted by the back end as the only things that you can",
    "start": "776139",
    "end": "782529"
  },
  {
    "text": "support and we can customize the back end to allow different sets of side effects for different application",
    "start": "782529",
    "end": "787720"
  },
  {
    "text": "domains all right so I'm going to give you an intent example of a real site",
    "start": "787720",
    "end": "793630"
  },
  {
    "start": "790000",
    "end": "802000"
  },
  {
    "text": "epic program being compiled to machine code if you have any questions before I go on to that you know the talk good so the running",
    "start": "793630",
    "end": "803310"
  },
  {
    "start": "802000",
    "end": "863000"
  },
  {
    "text": "example is we want to distribute safe installation scripts and I just picked five side effects that might be useful",
    "start": "803310",
    "end": "809610"
  },
  {
    "text": "for installers this is definitely not a comprehensive list but I was just purely",
    "start": "809610",
    "end": "814829"
  },
  {
    "text": "for the purpose of this talk and our installer will only be allowed to do one of five things it can either read a",
    "start": "814829",
    "end": "820079"
  },
  {
    "text": "string from standard input it can write out a string to standard output it can download a file from some URL to a local",
    "start": "820079",
    "end": "826889"
  },
  {
    "text": "file path it can create a file from a string and it can test profiles existence notice that it's not going to",
    "start": "826889",
    "end": "833730"
  },
  {
    "text": "be able to do things like remove files okay so the worst thing that installer can do is perhaps do not do it analysis",
    "start": "833730",
    "end": "839790"
  },
  {
    "text": "on my hard drive by filling up a partition ok that's the probably the worst case scenario for these five effects so obviously there's always",
    "start": "839790",
    "end": "846329"
  },
  {
    "text": "potential for insecurity in the set of side effects that you choose like maybe creating a file from a string is not",
    "start": "846329",
    "end": "851790"
  },
  {
    "text": "necessarily a secure enough side effect maybe I want to do something like create only X bytes worth of data as a side",
    "start": "851790",
    "end": "857880"
  },
  {
    "text": "effect which would be more secure but these are simple enough for the purposes of this talk and so these all have",
    "start": "857880",
    "end": "864690"
  },
  {
    "start": "863000",
    "end": "936000"
  },
  {
    "text": "associated types so for example this is a type which says this get line command",
    "start": "864690",
    "end": "869699"
  },
  {
    "text": "is a subroutine which I'll denote by I 0 so I o stands for a subroutine that returns some value in this case the",
    "start": "869699",
    "end": "877139"
  },
  {
    "text": "value it's returning is going to be a string the string it read from standard input and then there's going to be a foot line command which takes some",
    "start": "877139",
    "end": "883889"
  },
  {
    "text": "argument names str that's a string and then it will give me a subroutine that",
    "start": "883889",
    "end": "889680"
  },
  {
    "text": "will print that string and return a useless value so i use prods 0 sorry for the name to represent that useless value",
    "start": "889680",
    "end": "896399"
  },
  {
    "text": "that's sort of analogous to void in the C or Java family of languages or unit in scholar or high school or pure script or",
    "start": "896399",
    "end": "903269"
  },
  {
    "text": "other ml like languages and you have download which you give it a URL and you",
    "start": "903269",
    "end": "909660"
  },
  {
    "text": "give it a destination to copy the URL to and then that will give you a subroutine that actually execute that copy and of",
    "start": "909660",
    "end": "915959"
  },
  {
    "text": "course create file give it a payload of a path the contents of the file the path you want to write out the file to and",
    "start": "915959",
    "end": "922170"
  },
  {
    "text": "that's a side effect that has no return value and finally test file you give it a path to check for the existence of a",
    "start": "922170",
    "end": "928350"
  },
  {
    "text": "file and then it will have a subroutine that will return true if the file exists or false at the file doesn't here's an",
    "start": "928350",
    "end": "936850"
  },
  {
    "start": "936000",
    "end": "1078000"
  },
  {
    "text": "example script and this is written in the analane 'which there's some little boiler play at the top you can tell I",
    "start": "936850",
    "end": "942310"
  },
  {
    "text": "like Haskell because I called this a monad sorry about the name I know some people don't like the word mo dad but",
    "start": "942310",
    "end": "948100"
  },
  {
    "text": "I'm unapologetic about it and so this is the part of the script that you should actually care about which are these five",
    "start": "948100",
    "end": "953860"
  },
  {
    "text": "statements that we're going to execute and so here we're gonna say the first statement is just going to print a line",
    "start": "953860",
    "end": "959140"
  },
  {
    "text": "to look to stand it out prompting the user enter a file name this has the useless return value it's an empty",
    "start": "959140",
    "end": "964570"
  },
  {
    "text": "return value so I'm just going to use underscore to indicate that i'm discarding the value and then the user",
    "start": "964570",
    "end": "970090"
  },
  {
    "text": "is going to enter line of input so i'm going to prompt I'm gonna get a line from the user using get line and I'm going to store that result in this desk",
    "start": "970090",
    "end": "976360"
  },
  {
    "text": "variable right here which has type string and then again I'm gonna prompt the user for the file contents read that",
    "start": "976360",
    "end": "983140"
  },
  {
    "text": "in as the payload variable and now that I have both I can just create the file for the user so i'll take the payload",
    "start": "983140",
    "end": "988900"
  },
  {
    "text": "the user gave me the path that they gave me and then create a file with that contents at that location so i can then",
    "start": "988900",
    "end": "994810"
  },
  {
    "text": "do is I can take this and pass it through an antenna interpreter so this would be the secure client that I would",
    "start": "994810",
    "end": "1000390"
  },
  {
    "text": "distribute that takes scripts and then execute some in a secure way and so I'm not going to really care where these",
    "start": "1000390",
    "end": "1006030"
  },
  {
    "text": "hashtag represents came from so they currently refer to local files on my system but those files might refer to",
    "start": "1006030",
    "end": "1011370"
  },
  {
    "text": "remote expressions I don't really care where they came from and it's going to like parse this code compile it down to",
    "start": "1011370",
    "end": "1017070"
  },
  {
    "text": "the core calculus result imports type check normalized generate machine code and then it's going to actually run the",
    "start": "1017070",
    "end": "1022860"
  },
  {
    "text": "program and then it's going to prompt me enter a file name let me actually show this in action so i feel i have this",
    "start": "1022860",
    "end": "1027870"
  },
  {
    "text": "working here on my laptop but let me make that bigger there we go alright so",
    "start": "1027870",
    "end": "1033900"
  },
  {
    "text": "here is the actual programming question it's a real program this and then I have",
    "start": "1033900",
    "end": "1039060"
  },
  {
    "text": "an interpreter function which will basically take that program and will do everything I just showed you if I modify",
    "start": "1039060",
    "end": "1044910"
  },
  {
    "text": "the program it'll update to reflect the updated program give it a second type",
    "start": "1044910",
    "end": "1050730"
  },
  {
    "text": "checking and resolution takes the most time because it's getting things over the network here we go so our prompting",
    "start": "1050730",
    "end": "1056070"
  },
  {
    "text": "for a file name I type in output text and then I'll the file contents are going to be hell oh well that's totally",
    "start": "1056070",
    "end": "1061560"
  },
  {
    "text": "obligatory for any introductory tutorial and now if I looked at the contents of output text there it is it's hello world so the",
    "start": "1061560",
    "end": "1067690"
  },
  {
    "text": "program is exactly compiled it can only run with the side effects that I specify if I try to put in any other command",
    "start": "1067690",
    "end": "1073420"
  },
  {
    "text": "other than the five side effects I told you this program will be able to compile completely so the entire pipeline begins",
    "start": "1073420",
    "end": "1080380"
  },
  {
    "start": "1078000",
    "end": "1216000"
  },
  {
    "text": "with is Anna program so i use the dot anna suffix indicate and a program and what we're going to do is the first step",
    "start": "1080380",
    "end": "1086500"
  },
  {
    "text": "is to translate this higher level and a language into the low level calculus of the Mart a language which is the",
    "start": "1086500",
    "end": "1092770"
  },
  {
    "text": "calculus of constructions and so I can do that just by piping it through the Anakim and so and adjust these sugars",
    "start": "1092770",
    "end": "1098530"
  },
  {
    "text": "from the higher-level language to the lower level language so in goes this and out comes this right here all right so",
    "start": "1098530",
    "end": "1106360"
  },
  {
    "text": "low so this is very low level everything is done entirely in lambda calculus all these seas and s's you see right there",
    "start": "1106360",
    "end": "1113050"
  },
  {
    "text": "that's the lambda calculus encoding of a nasty string actually and then here's the entire program and here you can see",
    "start": "1113050",
    "end": "1119230"
  },
  {
    "text": "some of the utilities at the bottom but oh there's some things we haven't done so this still hasn't resolved all remote",
    "start": "1119230",
    "end": "1124840"
  },
  {
    "text": "imports we haven't really type checked it and we haven't optimized and ordered why's the expression so the way we do",
    "start": "1124840",
    "end": "1130720"
  },
  {
    "text": "that is piping it through more tape so more takes a morte program of standard input and type checks it resolves",
    "start": "1130720",
    "end": "1137920"
  },
  {
    "text": "imports normalizes it in up to and outputs the optimized version on standard output so I'll just pipe that",
    "start": "1137920",
    "end": "1143590"
  },
  {
    "text": "through the more tape program then I'll get something it looks a little bit bigger like this so now all remote",
    "start": "1143590",
    "end": "1149380"
  },
  {
    "text": "references has been resolved it's been fully in line and normalized giving me this program right here and now this is",
    "start": "1149380",
    "end": "1155410"
  },
  {
    "text": "ready for code generation so I'm going to pipe this through the noordam executable and that will enforce policy",
    "start": "1155410",
    "end": "1161800"
  },
  {
    "text": "it'll verify that this program only restrict itself to the site of five side effects that I set out the very",
    "start": "1161800",
    "end": "1167260"
  },
  {
    "text": "beginning and then it will generate executable code and actually because this is a very happy example they put",
    "start": "1167260",
    "end": "1172780"
  },
  {
    "text": "together for the purpose of this talk it's actually going to go through and haskell intermediate Haskell's the backend language and so it actually do",
    "start": "1172780",
    "end": "1179800"
  },
  {
    "text": "is it'll take this and will generate the equivalent haskell program so just trick that lambda expression translate it to a",
    "start": "1179800",
    "end": "1185140"
  },
  {
    "text": "shorter haskell lambda expression without explicit types and then there's this adapter function which inserts for",
    "start": "1185140",
    "end": "1190510"
  },
  {
    "text": "all programs which basically translates all these lambda calculus encoded types to the equivalent haskell built-in type",
    "start": "1190510",
    "end": "1197320"
  },
  {
    "text": "so they can actually generate machine code and now this program can be piped to run haskell to generate a real",
    "start": "1197320",
    "end": "1203470"
  },
  {
    "text": "executable that does exactly what the first example did in practice the code I",
    "start": "1203470",
    "end": "1209139"
  },
  {
    "text": "ran just did all entirely within one program instead of the command line but it's functionally equivalent so I'm",
    "start": "1209139",
    "end": "1216340"
  },
  {
    "start": "1216000",
    "end": "1229000"
  },
  {
    "text": "going to go into more details now about how the core calculus works and how it supports this sort of type checking normalization and resolution any",
    "start": "1216340",
    "end": "1222970"
  },
  {
    "text": "questions before I go on to that stage of the talk excellent so morte is a",
    "start": "1222970",
    "end": "1230980"
  },
  {
    "text": "really really low-level functional language and by low-level i mean that",
    "start": "1230980",
    "end": "1236169"
  },
  {
    "text": "the only things that you can that are in more taste syntax tree is you have the type of types which will denote by star",
    "start": "1236169",
    "end": "1242370"
  },
  {
    "text": "all right you have bound variables you have lamb does which you can think of as anonymous functions so if your program",
    "start": "1242370",
    "end": "1250360"
  },
  {
    "text": "to function language you might be familiar with lambdas it's just like this is saying an anonymous function which takes an argument X of type a and",
    "start": "1250360",
    "end": "1258370"
  },
  {
    "text": "then returns a B and then we have pie which is sort of like a function type so",
    "start": "1258370",
    "end": "1264370"
  },
  {
    "text": "this basically says this is a function that takes a value name X of type a and",
    "start": "1264370",
    "end": "1269559"
  },
  {
    "text": "then returns a value of type B then you have function application which",
    "start": "1269559",
    "end": "1274659"
  },
  {
    "text": "basically apply that's represented by appt appt fa just means apply the expression f to the expression a as a",
    "start": "1274659",
    "end": "1281259"
  },
  {
    "text": "function and then finally we have rural imports which are this import constructor right here and there's",
    "start": "1281259",
    "end": "1287470"
  },
  {
    "text": "nothing else there's no side effects no strings no numbers no anything is just",
    "start": "1287470",
    "end": "1292690"
  },
  {
    "text": "pure lambda calculus and then the only the only important operations which",
    "start": "1292690",
    "end": "1297820"
  },
  {
    "text": "morte exposes our load which is how you resolve all remote expressions and so",
    "start": "1297820",
    "end": "1303279"
  },
  {
    "text": "that replaces all these import constructors with remote sub expression syntax trees we have the type checker",
    "start": "1303279",
    "end": "1310149"
  },
  {
    "text": "which given a fully resolved expression will tell you either the expression does not type check or it will give you its",
    "start": "1310149",
    "end": "1316179"
  },
  {
    "text": "type and finally we have normalized which will take an expression and just keep beta reducing and ada reducing the",
    "start": "1316179",
    "end": "1322750"
  },
  {
    "text": "expression to give you an optimized program here's an example program a",
    "start": "1322750",
    "end": "1330010"
  },
  {
    "text": "morte pipeline so again we start with our original or true/false expression and",
    "start": "1330010",
    "end": "1335110"
  },
  {
    "text": "the first thing more tape will do is it will take each one of these three hashtags and replace it with the",
    "start": "1335110",
    "end": "1340660"
  },
  {
    "text": "equivalent remote expression so or will be replaced with this lambda expression right here true will be replaced with",
    "start": "1340660",
    "end": "1346660"
  },
  {
    "text": "this lambda expression right here false will real place with this expression right here and then it's going to",
    "start": "1346660",
    "end": "1352300"
  },
  {
    "text": "optimize a program just by constantly beta reducing in this case it's going to do beta reduce beta reviews beta reduce",
    "start": "1352300",
    "end": "1357400"
  },
  {
    "text": "and that gives you the fully optimized a compile-time expression which evaluated down to true so more tastes or like a",
    "start": "1357400",
    "end": "1366940"
  },
  {
    "text": "functional assembly language but I differs from a lot of languages they're functional but not its total meaning",
    "start": "1366940",
    "end": "1374020"
  },
  {
    "text": "that you don't have general recursion and also normal it means that every expression has a normal form which is",
    "start": "1374020",
    "end": "1380170"
  },
  {
    "text": "fully optimized it means that compilation and type checking sorry it",
    "start": "1380170",
    "end": "1385690"
  },
  {
    "text": "means that evaluation is always guaranteed to complete within a finite amount of time told you can think of as being a non turing-complete language",
    "start": "1385690",
    "end": "1392170"
  },
  {
    "text": "pretty much every other language you're used to is Turing complete but it's but a language does not necessarily have to",
    "start": "1392170",
    "end": "1397630"
  },
  {
    "text": "be turing-complete to be useful more take is one hundred percent pure meaning",
    "start": "1397630",
    "end": "1403480"
  },
  {
    "text": "that has no built-in side effects in fact the way we're going to represent side effects and morte it's just we're going to build a pure syntax tree",
    "start": "1403480",
    "end": "1410380"
  },
  {
    "text": "describing planned side effects so more time evaluating things doesn't actually trigger any side effects instead we're",
    "start": "1410380",
    "end": "1417280"
  },
  {
    "text": "just going to pass that pure tree to the back end and the back end understand that tree and then translates that to",
    "start": "1417280",
    "end": "1422920"
  },
  {
    "text": "all the side effects that it will explicitly support another really important thing in fact this is actually",
    "start": "1422920",
    "end": "1428410"
  },
  {
    "text": "very hard to find in any language which is why I had to write my own is that morte has no escape hatches or unsafe",
    "start": "1428410",
    "end": "1434410"
  },
  {
    "text": "primitives whatsoever everything you saw a nice index treat that's it there's no unsafe perform I oh there's no primitive",
    "start": "1434410",
    "end": "1441040"
  },
  {
    "text": "fi operations that break refreshing to transparency there's literally no way to break out of more taste security",
    "start": "1441040",
    "end": "1446710"
  },
  {
    "text": "guarantees other than a bug in the compiler and like I mentioned before no",
    "start": "1446710",
    "end": "1451780"
  },
  {
    "text": "support for strings numbers data types or pattern matching you can't even have multiple top-level expressions all more",
    "start": "1451780",
    "end": "1458410"
  },
  {
    "text": "tape programs are just one big giant expression you can't even have a recursion but it turns out that you",
    "start": "1458410",
    "end": "1464260"
  },
  {
    "text": "actually translate all those features into more tape anyway and there's several papers",
    "start": "1464260",
    "end": "1469690"
  },
  {
    "text": "that actually explain how to do that which are fantastic and so Anna's job is",
    "start": "1469690",
    "end": "1475060"
  },
  {
    "text": "actually to take those higher-level concepts and then translate them down to this core calculus so any questions",
    "start": "1475060",
    "end": "1483160"
  },
  {
    "text": "before I go on to how Anna works and it does this translation so if you don't",
    "start": "1483160",
    "end": "1490810"
  },
  {
    "text": "have multiple top-level expressions you can use let so this we're going to create a new tupple binding call x which has type T and it equals y and that can",
    "start": "1490810",
    "end": "1499420"
  },
  {
    "text": "be translated to an anonymous function which basically says we're in a bind a value name type X which is going to come",
    "start": "1499420",
    "end": "1505150"
  },
  {
    "text": "here from Y and then that will give us back in E you can have multiple let's just by nesting multiple lambdas and",
    "start": "1505150",
    "end": "1511600"
  },
  {
    "text": "it's the exact same way you're going to bind functions so i can say define a",
    "start": "1511600",
    "end": "1516820"
  },
  {
    "start": "1514000",
    "end": "1609000"
  },
  {
    "text": "function which takes an are you two arguments X 1 of type T 1 X 2 of type T",
    "start": "1516820",
    "end": "1522190"
  },
  {
    "text": "2 and it returns y which has type T and that's groups over this expression E and",
    "start": "1522190",
    "end": "1528370"
  },
  {
    "text": "that again can be completely converted to lambda calculus now or it gets really",
    "start": "1528370",
    "end": "1533590"
  },
  {
    "text": "interesting is how you convert data types to lambda calculus so that's actually possible it's rather actually",
    "start": "1533590",
    "end": "1540070"
  },
  {
    "text": "difficult to understand at first but it works really really well so if you are familiar with Haskell or any similar",
    "start": "1540070",
    "end": "1547030"
  },
  {
    "text": "language you can declare data types like in Haskell like this you say bool the type bool is either a true constructor",
    "start": "1547030",
    "end": "1553600"
  },
  {
    "text": "or a false constructor and equivalent type declaration anna says here you have",
    "start": "1553600",
    "end": "1559180"
  },
  {
    "text": "a type pool it has two data constructors true and false we can also explicitly named our pattern matching function this",
    "start": "1559180",
    "end": "1566290"
  },
  {
    "text": "will be if in this case and this type definition will scope over this expression e so it's not a global",
    "start": "1566290",
    "end": "1572260"
  },
  {
    "text": "definition and that can be distributed calculus you don't need to understand that t-shirt grading process other than",
    "start": "1572260",
    "end": "1578800"
  },
  {
    "text": "it actually works and there's a great paper explaining how it works which is called automatic synthesis of type of",
    "start": "1578800",
    "end": "1586210"
  },
  {
    "text": "type data structures in the lambda calculus also known shorthand as Boehm berarducci encoding after the authors of",
    "start": "1586210",
    "end": "1593350"
  },
  {
    "text": "the paper and what's cool then is that once we have this contract right here we",
    "start": "1593350",
    "end": "1598510"
  },
  {
    "text": "can separately compile all those expressions so i can actually separately compile bool true and false so i can host them",
    "start": "1598510",
    "end": "1605570"
  },
  {
    "text": "all on their own network endpoints so for example if I want to separately compile bull I'll just give the type",
    "start": "1605570",
    "end": "1611600"
  },
  {
    "start": "1609000",
    "end": "1747000"
  },
  {
    "text": "definition and say a given out given that bull is true or false give me the definition of a bull and then that will",
    "start": "1611600",
    "end": "1617270"
  },
  {
    "text": "output this right here which I can then save on a network I can do the same thing for true false or if and they'll",
    "start": "1617270",
    "end": "1622970"
  },
  {
    "text": "all work together in exactly the right way and they will have no references to each other so these for separately Paul",
    "start": "1622970",
    "end": "1629360"
  },
  {
    "text": "expressions will actually be totally self-contained you can encode records in",
    "start": "1629360",
    "end": "1635960"
  },
  {
    "text": "the exact same way so here's an example of a pair of record with two fields in it so it says this tight pair has a one",
    "start": "1635960",
    "end": "1643490"
  },
  {
    "text": "constructor called make pair and a fields name x and y in a pattern matching function called full pair and",
    "start": "1643490",
    "end": "1650090"
  },
  {
    "text": "then that will of course to generate equivalent lambda calculus expressions which I can now host on the network and",
    "start": "1650090",
    "end": "1657010"
  },
  {
    "text": "so we can do string literals we can be encoded in line the calculus so in Anna when you type in a string literal it",
    "start": "1657010",
    "end": "1663860"
  },
  {
    "text": "will actually translate that to a giant lambda expression and here at the beginning this was hello world then you",
    "start": "1663860",
    "end": "1669830"
  },
  {
    "text": "can see this is basically a nasty included hello world h-e-l-l-o of comma space WR orld ! end a string right here",
    "start": "1669830",
    "end": "1680590"
  },
  {
    "text": "and once you have an encoding for Strings you encode things like string",
    "start": "1680590",
    "end": "1686540"
  },
  {
    "text": "concatenation you can code all string operations using pure lambda calculus so here if I can tell say and Anna",
    "start": "1686540",
    "end": "1693190"
  },
  {
    "text": "concatenate the strings hello and world pipette through Anna pipe it through morte it will concatenate them at",
    "start": "1693190",
    "end": "1700160"
  },
  {
    "text": "compile time so here again is hello world encoded in a c lambda calculus you",
    "start": "1700160",
    "end": "1706880"
  },
  {
    "text": "can encode numeric literals in calculus there's a simple and obvious way which is the way usually taught in the literature and actually uses a more",
    "start": "1706880",
    "end": "1712880"
  },
  {
    "text": "efficient representation using binary numerals so 42 gets encoded as one and",
    "start": "1712880",
    "end": "1717890"
  },
  {
    "text": "binary 101010 which is binary for 42 and",
    "start": "1717890",
    "end": "1723310"
  },
  {
    "text": "you can do 64-bit arithmetic and totally on mt calculus and actually completes",
    "start": "1723310",
    "end": "1728600"
  },
  {
    "text": "within a somewhat reasonable amount of time a second is done at compile time so you only do it once and so here's the apple of",
    "start": "1728600",
    "end": "1734779"
  },
  {
    "text": "adding 263 bit numbers to get a 64-bit number here is multiplying 262 32-bit",
    "start": "1734779",
    "end": "1741770"
  },
  {
    "text": "numbers to give a 64-bit number all done at compile time and then once we",
    "start": "1741770",
    "end": "1748039"
  },
  {
    "start": "1747000",
    "end": "1867000"
  },
  {
    "text": "translate things to lambda khesari to lambda calculus now we can start generating machine code machine code",
    "start": "1748039",
    "end": "1753320"
  },
  {
    "text": "generator is actually pretty efficient even those using these large time two expressions because Haskell compilers really good at at optimizing them away",
    "start": "1753320",
    "end": "1759890"
  },
  {
    "text": "any questions before I go on to the backend code generation so like I",
    "start": "1759890",
    "end": "1770360"
  },
  {
    "text": "mentioned before morte has no built-in side effects instead we're in encode a side effect as another data type in the",
    "start": "1770360",
    "end": "1777470"
  },
  {
    "text": "language so here examples how we encode the data type for side effects which is IO and the way I represent it is as a",
    "start": "1777470",
    "end": "1784669"
  },
  {
    "text": "syntax tree which has five nodes and an end of tree so each one of these constructors right here is one node in a",
    "start": "1784669",
    "end": "1791480"
  },
  {
    "text": "syntax tree which behaves like a placeholder for the equivalent side effect on the backend for example this",
    "start": "1791480",
    "end": "1797330"
  },
  {
    "text": "foot lying constructed right here is a placeholder for the real put line command and it takes a string which will",
    "start": "1797330",
    "end": "1803120"
  },
  {
    "text": "eventually be passed to that command and then this will be the remaining statements to execute similarly get line",
    "start": "1803120",
    "end": "1808730"
  },
  {
    "text": "is a placeholder for the real get line command and here's a function that will basically consume the string read from",
    "start": "1808730",
    "end": "1814070"
  },
  {
    "text": "the real get line command and so once we have this syntax tree defying an Anna we",
    "start": "1814070",
    "end": "1820429"
  },
  {
    "text": "can then ask Anna what is the equivalent more tape type for that tree and i'll",
    "start": "1820429",
    "end": "1825679"
  },
  {
    "text": "put a type that looks like this it's basically a function that takes one argument for a constructor and this is",
    "start": "1825679",
    "end": "1830929"
  },
  {
    "text": "essentially a signature for all the side effects that our system is willing to support so we can actually read from the",
    "start": "1830929",
    "end": "1837169"
  },
  {
    "text": "type that this will only support foot line get line download create file and test file and nothing else and so now",
    "start": "1837169",
    "end": "1845659"
  },
  {
    "text": "that we've included in the type system we can actually use that type to enforce policy so we can take any program that",
    "start": "1845659",
    "end": "1851899"
  },
  {
    "text": "is generated by the morte compiler and just type check it and see doesn't match that type yes or no if the answer is yes",
    "start": "1851899",
    "end": "1858320"
  },
  {
    "text": "we do coach n if the answer is no we abort compilation and we'll get a type error explaining why you didn't match",
    "start": "1858320",
    "end": "1863779"
  },
  {
    "text": "that signature and so this policy enforcement",
    "start": "1863779",
    "end": "1869860"
  },
  {
    "text": "is done at compile time so like you're thinking about what security systems this is most similar to this would be",
    "start": "1869860",
    "end": "1876130"
  },
  {
    "text": "closest to the sandbox approach to security where you're essentially whitelisting interactions with the",
    "start": "1876130",
    "end": "1881350"
  },
  {
    "text": "outside world but the difference here is that we're enforcing that white list at compile time instead at runtime so",
    "start": "1881350",
    "end": "1886870"
  },
  {
    "text": "before we even do code generation we can detect if our program is enforcing it matches our policy or not we don't have",
    "start": "1886870",
    "end": "1893110"
  },
  {
    "text": "to like throw an error or a partially and partially abort a script to happen to do something it wasn't supposed to do",
    "start": "1893110",
    "end": "1899730"
  },
  {
    "text": "so like I mentioned before since we can specify the side effects in the language",
    "start": "1901020",
    "end": "1906190"
  },
  {
    "text": "that means we can customize with side effects we can specify that means if you want to have a different set of white",
    "start": "1906190",
    "end": "1912460"
  },
  {
    "text": "list of side effects for a different application other than secure script insulation you can do that just by",
    "start": "1912460",
    "end": "1917559"
  },
  {
    "text": "building your own io type and generating the equivalent more take type and then type checking that before doing codegen",
    "start": "1917559",
    "end": "1924220"
  },
  {
    "text": "and then you have to write the back end to do the translation of those constructors to the equivalent real",
    "start": "1924220",
    "end": "1930490"
  },
  {
    "text": "commands in the back end so this",
    "start": "1930490",
    "end": "1936700"
  },
  {
    "text": "approach is most similar to the sandbox approach to security the most unique",
    "start": "1936700",
    "end": "1942220"
  },
  {
    "start": "1941000",
    "end": "2220000"
  },
  {
    "text": "feature is that it takes policy violations at compile time but other",
    "start": "1942220",
    "end": "1947559"
  },
  {
    "text": "important features is that pure code is automatically whitelisted so and a lot of other security managers you either",
    "start": "1947559",
    "end": "1953080"
  },
  {
    "text": "have to do a black this approach if you don't want to just like automatically reject all code or a whitelist approach",
    "start": "1953080",
    "end": "1958840"
  },
  {
    "text": "which requires tediously like white listening the entire standard library of the language and requiring library authors to do some registration policy",
    "start": "1958840",
    "end": "1965500"
  },
  {
    "text": "for white listing their code but by divining put into pure and side effect faces we can just autumn buy things by",
    "start": "1965500",
    "end": "1972549"
  },
  {
    "text": "only requiring you to explicitly white less side effects and this allows us to automatically accept pure code another",
    "start": "1972549",
    "end": "1979990"
  },
  {
    "text": "important advantage over other security systems is the extremely low barrier to code distribution you think about it the",
    "start": "1979990",
    "end": "1986919"
  },
  {
    "text": "typical way you will distribute code another language is that you know you you'll first you alter your code and then you'll create a package for your",
    "start": "1986919",
    "end": "1993040"
  },
  {
    "text": "code and you have to alter some like package description all right and then you have to upload that coaches some type repository then a user has to download",
    "start": "1993040",
    "end": "1999820"
  },
  {
    "text": "that packet from the past repository add as a dependency to some build file in whatever builds tools are using and then",
    "start": "1999820",
    "end": "2006540"
  },
  {
    "text": "they have to import that package using some import statement and then they can use your expression but here all we have",
    "start": "2006540",
    "end": "2013680"
  },
  {
    "text": "to do is just post it on network endpoint and then somebody references it with hashtag URL and you're done that's",
    "start": "2013680",
    "end": "2019800"
  },
  {
    "text": "the entire distribution process and the other thing that distinguishes this from",
    "start": "2019800",
    "end": "2024900"
  },
  {
    "text": "other security big approaches is that policy is enforced using types which",
    "start": "2024900",
    "end": "2030060"
  },
  {
    "text": "means that the more advanced the type system gets the more types of things we can enforce at compile time which is",
    "start": "2030060",
    "end": "2036900"
  },
  {
    "text": "really nice all right do you have any",
    "start": "2036900",
    "end": "2041970"
  },
  {
    "text": "questions so far so I'm going to give a few concluding remarks and if time",
    "start": "2041970",
    "end": "2047220"
  },
  {
    "text": "permits which I think it does I want to actually try and do a live demo with a member of the audience well they'll just like put up some code on the internet",
    "start": "2047220",
    "end": "2053370"
  },
  {
    "text": "and I'm going to use it inside my script it'll be pretty simple code but just to drive the point home so one thing I'll",
    "start": "2053370",
    "end": "2060480"
  },
  {
    "text": "recommend is I would say like these projects are not really ready for general purpose use like I would not actually not recommend that you use them",
    "start": "2060480",
    "end": "2067169"
  },
  {
    "text": "right now I don't think they're ready for that things I need to do is that it would be nice to allow the users to",
    "start": "2067169",
    "end": "2073230"
  },
  {
    "text": "select more high efficiency numeric string operations that get done a run time instead of compile time that would",
    "start": "2073230",
    "end": "2079530"
  },
  {
    "text": "be a nice feature to have especially when doing like numerical code type",
    "start": "2079530",
    "end": "2085230"
  },
  {
    "text": "inference is still missing so the ANA language isn't still an explicitly typed language which can make it t is to use",
    "start": "2085230",
    "end": "2090899"
  },
  {
    "text": "for highly generic highly polymorphic functions so the absence of type inference I wouldn't recommend it for",
    "start": "2090900",
    "end": "2096240"
  },
  {
    "text": "general purpose use and then finally it needs really better tooling for things",
    "start": "2096240",
    "end": "2101790"
  },
  {
    "text": "like our distribute code like how to take a bunch of things letter on your files a bunch of a library of code and",
    "start": "2101790",
    "end": "2108180"
  },
  {
    "text": "host it in easy fashion there needs to be some way to easily discover all these remote expressions sprinkled all around",
    "start": "2108180",
    "end": "2114930"
  },
  {
    "text": "the internet and there needs to be an easy way to install code and we're here installation just means creating a file",
    "start": "2114930",
    "end": "2121500"
  },
  {
    "text": "a local file of aliases some remote file that's that's all installation really is just creating shorthand aliases let me",
    "start": "2121500",
    "end": "2127680"
  },
  {
    "text": "see easy way to do that on mass for installing a package and this code is real it's up on github",
    "start": "2127680",
    "end": "2133980"
  },
  {
    "text": "so the morte library is it can be located on github Haskell morte library same thing for Anna the orem code right",
    "start": "2133980",
    "end": "2140580"
  },
  {
    "text": "now exists purely on a branch of the ANA library it doesn't have its own repository just yet but you can actually",
    "start": "2140580",
    "end": "2146190"
  },
  {
    "text": "check it it's there and if you have any questions of course you can reach out to",
    "start": "2146190",
    "end": "2151200"
  },
  {
    "text": "me my twitter handle is Gabriel g 439 I also like to hang out on our hospital as",
    "start": "2151200",
    "end": "2156930"
  },
  {
    "text": "the tech mode user and if and unless you guys have any questions I won't actually do a really quick live demo so first off",
    "start": "2156930",
    "end": "2165000"
  },
  {
    "text": "I want in that a lot of these expressions are hosted online so here is the actual I mentioned the place right here I want user did you actually in",
    "start": "2165000",
    "end": "2171900"
  },
  {
    "text": "this case is i'm going to write two programs and while you in the audience will actually select which one to run so",
    "start": "2171900",
    "end": "2177810"
  },
  {
    "text": "here I'm gonna actually open up example so we already had one example program right here so the example danica alright",
    "start": "2177810",
    "end": "2184530"
  },
  {
    "text": "so I'm going to do yeah so I'm going to move that too let's call it I 01 Diana",
    "start": "2184530",
    "end": "2191900"
  },
  {
    "text": "all right oops",
    "start": "2191990",
    "end": "2195830"
  },
  {
    "text": "so first off in order to import that I need translated to a morte expression so I'll say and import I am why not Anna",
    "start": "2197040",
    "end": "2202800"
  },
  {
    "text": "and move that and just make that the IO file and it's going to take a while to do the sugar ink is actually type",
    "start": "2202800",
    "end": "2208920"
  },
  {
    "text": "checking the result and type checking iOS with strings in it takes a while so this is why this process is actually taking a few seconds give that some time",
    "start": "2208920",
    "end": "2216810"
  },
  {
    "text": "there we go so here is the expression in the court calculus all right and then I",
    "start": "2216810",
    "end": "2222810"
  },
  {
    "start": "2220000",
    "end": "2282000"
  },
  {
    "text": "need to create some other files let's call this I owe to Diana and so this file is just going to say let me because",
    "start": "2222810",
    "end": "2229830"
  },
  {
    "text": "I don't want to take too many risks while doing a live demo I'll base it off of my other file so here I'll just do a",
    "start": "2229830",
    "end": "2239490"
  },
  {
    "text": "simple echo program that will take some string read in for me sorry and then it",
    "start": "2239490",
    "end": "2251670"
  },
  {
    "text": "will print that string okay there we go",
    "start": "2251670",
    "end": "2258710"
  },
  {
    "text": "alright so let's type check that make sure there are no bugs in it and then",
    "start": "2258710",
    "end": "2264690"
  },
  {
    "text": "i'll put that too I owe to give it as a second",
    "start": "2264690",
    "end": "2270560"
  },
  {
    "text": "alright so now let's create a final program so now a new example Anna so I'm",
    "start": "2273900",
    "end": "2282540"
  },
  {
    "start": "2282000",
    "end": "2330000"
  },
  {
    "text": "gonna do is I'm gonna import some user code so there's going to be a URL and i'm going to apply it to either I 01 or",
    "start": "2282540",
    "end": "2288900"
  },
  {
    "text": "I 02 and the user gets to select which one to run is there anybody who wants to",
    "start": "2288900",
    "end": "2294150"
  },
  {
    "text": "volunteer to host a text on an airboat mr1 endpoint does anyone have internet",
    "start": "2294150",
    "end": "2299910"
  },
  {
    "text": "access Justin you want to be the volunteer okay I think we can do this really easily using el pase okay let's",
    "start": "2299910",
    "end": "2307110"
  },
  {
    "text": "see if there's a way to get raw text or something so I'm going to try it myself so here would be like the polymorphic identity function in morte I'm gonna",
    "start": "2307110",
    "end": "2315360"
  },
  {
    "text": "just like see if I can get okay see raw",
    "start": "2315360",
    "end": "2321200"
  },
  {
    "text": "yeah that'd work I think perfect let me see if that generates something about",
    "start": "2321200",
    "end": "2328790"
  },
  {
    "text": "excellent that'll work alright so now you using el pase I'll give you a rough template for what this program should",
    "start": "2329000",
    "end": "2335460"
  },
  {
    "start": "2330000",
    "end": "2430000"
  },
  {
    "text": "look like so one thing that will just help really quickly is to get the URL for I oh ok so if you can actually",
    "start": "2335460",
    "end": "2342240"
  },
  {
    "text": "navigate to so this URL right here can you navigate to that and just copy that",
    "start": "2342240",
    "end": "2347490"
  },
  {
    "text": "so that's this the path to the i/o type sidled talk place / talk / 0 / io and",
    "start": "2347490",
    "end": "2357260"
  },
  {
    "text": "then you can write an expression that looks something like this so you'll say I'm going to take to IO actions so let's",
    "start": "2357260",
    "end": "2365280"
  },
  {
    "text": "say call I 01 and you're going to give the type that we paste it up here so sorry this I oh oopsies this IO type",
    "start": "2365280",
    "end": "2374490"
  },
  {
    "text": "make sure there's a space no no ending / in the space after it okay and then",
    "start": "2374490",
    "end": "2380340"
  },
  {
    "text": "another io type I 02 hashtag the URL no",
    "start": "2380340",
    "end": "2385500"
  },
  {
    "text": "/ or space and now I'll let you select which one to run using either I 01 or I",
    "start": "2385500",
    "end": "2392670"
  },
  {
    "text": "02 and i'm going to use your code within my program all right tell me whatever",
    "start": "2392670",
    "end": "2397770"
  },
  {
    "text": "you think you're ready okay and so now",
    "start": "2397770",
    "end": "2404960"
  },
  {
    "text": "paste that and you have the URL so do a public paste or so",
    "start": "2404960",
    "end": "2410190"
  },
  {
    "text": "just do something like this public let's say alright and can you give me the number for that el pase that you hosted",
    "start": "2410190",
    "end": "2416730"
  },
  {
    "text": "the code for",
    "start": "2416730",
    "end": "2419539"
  },
  {
    "text": "okay so you were right after me perfect oh sorry I shouldn't have looked at the",
    "start": "2428260",
    "end": "2433460"
  },
  {
    "start": "2430000",
    "end": "2602000"
  },
  {
    "text": "code because I don't want to like see what you're actually running again the idea is that I shouldn't care what could",
    "start": "2433460",
    "end": "2438559"
  },
  {
    "text": "you put in there all right so now I'm gonna go to the example dot Anna I was right are yet it open and i'm just going",
    "start": "2438559",
    "end": "2445460"
  },
  {
    "text": "to use your url boom okay and you're going to pick which one to run all right and now interpret a statute exception it",
    "start": "2445460",
    "end": "2455569"
  },
  {
    "text": "wasn't invalid URL not the correct text type oh damn okay well anyway let me",
    "start": "2455569",
    "end": "2462380"
  },
  {
    "text": "then just take your expression and then just make a local file out of it for the hell of it just to demonstrate the rough concept okay so where was it where was i",
    "start": "2462380",
    "end": "2470930"
  },
  {
    "text": "before here we go okay so i'll create just in there we go ok and now VI",
    "start": "2470930",
    "end": "2482349"
  },
  {
    "text": "interpret sorry example so i'll just use refer to the justin file exited alright",
    "start": "2482349",
    "end": "2491720"
  },
  {
    "text": "and now let's do interpret oh sorry what is no actually help me there is no it",
    "start": "2491720",
    "end": "2500240"
  },
  {
    "text": "doesn't look like there is hold on once again let me actually read it oh ok I",
    "start": "2500240",
    "end": "2506329"
  },
  {
    "text": "see the user actually is a problem in the remote string type that I hosted is not encoded correctly ok so then let me",
    "start": "2506329",
    "end": "2512089"
  },
  {
    "text": "actually modify your example a little bit further how embarrassing so I'll",
    "start": "2512089",
    "end": "2519950"
  },
  {
    "text": "just let you use the 1i have locally instead ok and then let's try it there",
    "start": "2519950",
    "end": "2525710"
  },
  {
    "text": "we go oh sorry that's just the here we go actually so there's a type error obviously it caught a problem at compile",
    "start": "2525710",
    "end": "2533210"
  },
  {
    "text": "time invalid input type oh that's right now I see what the error is so there was",
    "start": "2533210",
    "end": "2538220"
  },
  {
    "text": "a type error in both of our programs it actually should have been this we have",
    "start": "2538220",
    "end": "2545059"
  },
  {
    "text": "to specify what the return value is of these actions so I detected a problem i compile time now it's succeeding",
    "start": "2545059",
    "end": "2551630"
  },
  {
    "text": "hopefully and then",
    "start": "2551630",
    "end": "2555130"
  },
  {
    "text": "give it to the second",
    "start": "2557910",
    "end": "2561569"
  },
  {
    "text": "so again resolution takes a while getting things from the network type checking these large syntax lamb",
    "start": "2564500",
    "end": "2570140"
  },
  {
    "text": "expression syntax trees and we go succeeds generating executable and he",
    "start": "2570140",
    "end": "2575300"
  },
  {
    "text": "selected the first program okay so that's the end of that example all right sorry about the palm with the string",
    "start": "2575300",
    "end": "2581030"
  },
  {
    "text": "encoding apparently the code i hosted was not included in correctly for more teeth download it but yeah all right so",
    "start": "2581030",
    "end": "2588200"
  },
  {
    "text": "are there any questions other than if not then that's near the top",
    "start": "2588200",
    "end": "2593290"
  }
]