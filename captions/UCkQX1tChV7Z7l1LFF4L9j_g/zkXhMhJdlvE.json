[
  {
    "text": "I wanted to talk about memory trouble with memory this is a talk I probably should have done years ago but I don't",
    "start": "4560",
    "end": "10759"
  },
  {
    "text": "know I just didn't think it was that interesting so and maybe it isn't you",
    "start": "10759",
    "end": "16080"
  },
  {
    "text": "can tell me at the end so if you don't like the talk I'll help you with selecting the button to push and if you",
    "start": "16080",
    "end": "24119"
  },
  {
    "text": "do like to talk you know the green one is helpful okay so at the end cool um so",
    "start": "24119",
    "end": "32078"
  },
  {
    "text": "uh she's covered all kinds of things so I'm not going to bother with this too much um uh except for we have a startup",
    "start": "32079",
    "end": "39120"
  },
  {
    "text": "J Clarity we make uh performance diagnostic tooling and tooling to help people uh find out what's going on in",
    "start": "39120",
    "end": "46320"
  },
  {
    "text": "their application and uh I showed some video of Janson it's an unconference that was",
    "start": "46320",
    "end": "51760"
  },
  {
    "text": "actually modeled after Jr which is another un conference that we co-founded in uh with Dr Hines Kutz and as the name",
    "start": "51760",
    "end": "60000"
  },
  {
    "text": "suggest we actually have that on the island of creit every summer it's really nice so we say it's the hottest",
    "start": "60000",
    "end": "66119"
  },
  {
    "text": "conference on the planet for our definition of hot right",
    "start": "66119",
    "end": "71680"
  },
  {
    "text": "um and some other stuff right okay so let's ask start by asking questions right because every good presentation",
    "start": "71680",
    "end": "77960"
  },
  {
    "text": "has to ask questions okay what are your performance trouble spots just shout them out what's the thing that you",
    "start": "77960",
    "end": "83600"
  },
  {
    "text": "believe gives you the most performance grief you know when you're dealing with",
    "start": "83600",
    "end": "88640"
  },
  {
    "text": "throwing a system out into produ uction immature developers immature",
    "start": "88640",
    "end": "94520"
  },
  {
    "text": "developers that's a whole other talk we had that last night didn't",
    "start": "96399",
    "end": "102320"
  },
  {
    "text": "we well we did okay uh anybody else have any ideas technical of nature GC G sorry",
    "start": "102320",
    "end": "111200"
  },
  {
    "text": "GC everybody's saying GC okay gc's cool what's up browser whats browser",
    "start": "111200",
    "end": "118240"
  },
  {
    "text": "rendering yeah don't get me started okay yeah that's yeah our client",
    "start": "118240",
    "end": "124479"
  },
  {
    "text": "container is wonderful isn't it who loves it nobody put up their hands okay cool",
    "start": "124479",
    "end": "131560"
  },
  {
    "text": "uh so what is your performance trouble spot nobody said database interactions where we like all working for Oracle now",
    "start": "131560",
    "end": "137680"
  },
  {
    "text": "or something really cool Sorry Network lat",
    "start": "137680",
    "end": "143200"
  },
  {
    "text": "Network Laten see yeah sure okay yeah so I mean around here right so so I'm going",
    "start": "143200",
    "end": "149200"
  },
  {
    "text": "to so I'm going to just let's try this exercise since nobody put up their hands I'm assume your hands aren't working",
    "start": "149200",
    "end": "154840"
  },
  {
    "text": "right so let's see you guys over there put your hands up everybody over here",
    "start": "154840",
    "end": "160440"
  },
  {
    "text": "put your hands up everybody over here put your hands up and I think you guys can keep your hands down right and",
    "start": "160440",
    "end": "166200"
  },
  {
    "text": "everybody in the back put your hands up I don't see all the hands up both hands up is that working it's good stretch",
    "start": "166200",
    "end": "171800"
  },
  {
    "text": "right there you go after lunch stretch okay you guys are all suffering from memory problems you guys probably aren't",
    "start": "171800",
    "end": "180720"
  },
  {
    "text": "and this is what we're saying right we're saying about 70% of all the applications I run into",
    "start": "180720",
    "end": "186440"
  },
  {
    "text": "are bottleneck on some sort of memory issue right and this is why I said okay",
    "start": "186440",
    "end": "192720"
  },
  {
    "text": "probably time to write a talk about this because not only um are people bottlenecked on this issue they don't",
    "start": "192720",
    "end": "200879"
  },
  {
    "text": "actually even realize it they don't even see it it's there it's not even visible to them so part of this talk is to tell",
    "start": "200879",
    "end": "207040"
  },
  {
    "text": "you how your bottom lecked on it and you know why and what's happened and the other part is you know to give you some",
    "start": "207040",
    "end": "212599"
  },
  {
    "text": "help in one recognizing it and the other one is is trying to fix it and and no",
    "start": "212599",
    "end": "218720"
  },
  {
    "text": "garbage collection is very often not at fault now we can do a lot with garbage",
    "start": "218720",
    "end": "223840"
  },
  {
    "text": "collection tuning to hide the memory problems but you know that's pretty much",
    "start": "223840",
    "end": "228920"
  },
  {
    "text": "all we're doing is we're hiding it uh if you really want to solve the problem you really need to go and to the core of the",
    "start": "228920",
    "end": "235159"
  },
  {
    "text": "problem okay so the question is do you use spring",
    "start": "235159",
    "end": "241720"
  },
  {
    "text": "boot Cassandra or just to be fair any other",
    "start": "242360",
    "end": "247439"
  },
  {
    "text": "nosql solution Apache spark your hands yeah we",
    "start": "247439",
    "end": "252640"
  },
  {
    "text": "got it okay uh or any other big data solution log for J log",
    "start": "252640",
    "end": "260880"
  },
  {
    "text": "back okay I hate to ask this one jdk logging nobody you guys are all crazy",
    "start": "260880",
    "end": "266960"
  },
  {
    "text": "actually we use jdk logging sorry right um right or any logging Jame for Jon who",
    "start": "266960",
    "end": "274120"
  },
  {
    "text": "here uses any form of gyon I should see the whole room hand go up right unless your arms are broken",
    "start": "274120",
    "end": "281240"
  },
  {
    "text": "something yeah right or almost any marshalling protocol Ecom caching products any",
    "start": "281240",
    "end": "289280"
  },
  {
    "text": "caching yeah you got it okay hibernate so on so on so on if you use",
    "start": "289280",
    "end": "296840"
  },
  {
    "text": "any of these then you're very likely in the 70% of people that are suffering from memory",
    "start": "296840",
    "end": "302120"
  },
  {
    "text": "issues right and and the list just goes on and on and on of things that are actually just not not really memory",
    "start": "302120",
    "end": "308800"
  },
  {
    "text": "aware and and so um you know really the the question is you know what are the",
    "start": "308800",
    "end": "314880"
  },
  {
    "text": "problems that these things cause and what can we do about it right so we have high memory turn rates we have many",
    "start": "314880",
    "end": "321360"
  },
  {
    "text": "temporary objects we can have large live data sets that's going to cause a whole",
    "start": "321360",
    "end": "326960"
  },
  {
    "text": "other set of problems because you have inflated uh live data set sizes and this",
    "start": "326960",
    "end": "332160"
  },
  {
    "text": "can be caused by what we call loitering so we just did this a couple weeks ago somebody said hey we got this big",
    "start": "332160",
    "end": "338800"
  },
  {
    "text": "problem with GC pauses you look at it and go like yeah we know how to reduce your GC pauses uh first off um get rid",
    "start": "338800",
    "end": "345360"
  },
  {
    "text": "of the memory leak right um and once you get rid of",
    "start": "345360",
    "end": "350840"
  },
  {
    "text": "the memory leak you have all these other loitering objects that are around so these are in this case it was like Jetty",
    "start": "350840",
    "end": "356360"
  },
  {
    "text": "sessions so they had a large time 24 hour 48 hour some long these things were",
    "start": "356360",
    "end": "362680"
  },
  {
    "text": "around for like days longer than they needed to be and so we just like turned the session time out back and then all",
    "start": "362680",
    "end": "369360"
  },
  {
    "text": "of a sudden their memory footprint went down and all of a sudden their pause time started getting",
    "start": "369360",
    "end": "375520"
  },
  {
    "text": "smaller and going like wow okay so you how does that work right um you know few",
    "start": "375520",
    "end": "380960"
  },
  {
    "text": "War Stories uh reduced allocation rates from 1.8 gigabytes per second to zero yes that's not a that's not a typo that",
    "start": "380960",
    "end": "387639"
  },
  {
    "text": "actually is zero uh bytes per second TPS jumped from 400,000 to 25",
    "start": "387639",
    "end": "395360"
  },
  {
    "text": "million right so we're not talking about small gains here we're talking about the",
    "start": "395360",
    "end": "400400"
  },
  {
    "text": "potential to get exceptionally large gains if you pay attention to this problem right and we stripped out so I I",
    "start": "400400",
    "end": "407720"
  },
  {
    "text": "gave my usual logging rant at a at a workshop that I give I was in Netherlands a about a year or so ago and",
    "start": "407720",
    "end": "415520"
  },
  {
    "text": "um that night they went and stripped all the logging out of their uh transaction monitoring framework that they were",
    "start": "415520",
    "end": "420919"
  },
  {
    "text": "using which wasn't getting them the performance they wanted which was why I was there giving them the workshop in the first place and uh when they",
    "start": "420919",
    "end": "428720"
  },
  {
    "text": "stripped out all their logging their throughput jumped by a factor of four right and they're going like oh",
    "start": "428720",
    "end": "436160"
  },
  {
    "text": "okay so now our performance problem not only went away we've been tuning this thing so long that actually when they",
    "start": "436160",
    "end": "441319"
  },
  {
    "text": "got rid of the real problem it went much faster than they needed like twice as fast as what they needed to go um and",
    "start": "441319",
    "end": "448400"
  },
  {
    "text": "you know there's another Product Company we're working with and the list of problems here I mean I could make this list a lot longer we just do the whole",
    "start": "448400",
    "end": "454800"
  },
  {
    "text": "hour on you know my how great a hero I am at fixing these problems uh but",
    "start": "454800",
    "end": "460360"
  },
  {
    "text": "that's not really the point here you know the point is that there are some really significant gains can be made if",
    "start": "460360",
    "end": "465759"
  },
  {
    "text": "you just pay attention uh to how you're utilizing memory um allocation sites you know so",
    "start": "465759",
    "end": "473120"
  },
  {
    "text": "how do we form an allocation site well here I have a fu fu equals new Foo lots of food in",
    "start": "473120",
    "end": "479720"
  },
  {
    "text": "there I guess and and when you break this out into the bik code then you can see you get this new thing and you can",
    "start": "479720",
    "end": "486400"
  },
  {
    "text": "see pretty much that's every time you do a new that's that's this is what happens right and this is going to cause an allocation uh uh to occur and there's a",
    "start": "486400",
    "end": "494080"
  },
  {
    "text": "number of different ways that this allocation can actually occur we can go what down what's known as a fast path or",
    "start": "494080",
    "end": "499400"
  },
  {
    "text": "we can go down to a small path or it's even possible uh that we have you know",
    "start": "499400",
    "end": "504840"
  },
  {
    "text": "we have this wonderful technology inside the jvm called a jit and the jit looks for optimizations",
    "start": "504840",
    "end": "509960"
  },
  {
    "text": "one of the optimizations that it can actually perform is say okay I'm not really going to allocate this this way",
    "start": "509960",
    "end": "515360"
  },
  {
    "text": "I'm going to just basically unbox the values inside this object and place",
    "start": "515360",
    "end": "520640"
  },
  {
    "text": "these values on the stack directly so I'm not going to do a heap allocation at all right so so small objects may be",
    "start": "520640",
    "end": "527720"
  },
  {
    "text": "optimized and it might be possible that the optimization or that call site is just going to be eliminate it from the",
    "start": "527720",
    "end": "534320"
  },
  {
    "text": "code uh uh just completely it's one thing we can do",
    "start": "534320",
    "end": "540320"
  },
  {
    "text": "um okay so we're sort of talking about allocations so you know we get a little bit of understanding about Java Heap",
    "start": "540320",
    "end": "546959"
  },
  {
    "text": "normally when I talk about Java Heap I talk about it in the context of garbage collection and in this time I'm going to",
    "start": "546959",
    "end": "553399"
  },
  {
    "text": "talk about it in the context of the allocators now there's always this interplay between the garbage collector",
    "start": "553399",
    "end": "560320"
  },
  {
    "text": "and the allocators they sort of have to cooperate with each other in order to keep things rolling and um you know if",
    "start": "560320",
    "end": "567560"
  },
  {
    "text": "they don't really cooperate then you get uh Full Stop The World pauses where the garbage collector says you've just run",
    "start": "567560",
    "end": "574040"
  },
  {
    "text": "out of memory so because you've just run out of memory I'm just going to stop everything that's happening I'm take",
    "start": "574040",
    "end": "579760"
  },
  {
    "text": "complete control of the Heap and then I just going to clean things up right so that's like the we don't have any",
    "start": "579760",
    "end": "585760"
  },
  {
    "text": "cooperation world but that's not today's world today's world we have a lot of what I would call uh cooperation",
    "start": "585760",
    "end": "592040"
  },
  {
    "text": "happening so we get um very concurrent or much more concurrent collectors in our in our U uh",
    "start": "592040",
    "end": "599920"
  },
  {
    "text": "we just have these available to us like shannond do is coming zgc is coming these are a lot more concurrent and",
    "start": "599920",
    "end": "605839"
  },
  {
    "text": "because they're a lot more concurrent the allocators and the collectors have to cooperate so that the",
    "start": "605839",
    "end": "611680"
  },
  {
    "text": "collectors aren't interfering with the allocators so much but that means that we need to give work to the allocators",
    "start": "611680",
    "end": "618600"
  },
  {
    "text": "that the garbage collector would normally do or give work to the allocators to help the garbage collector",
    "start": "618600",
    "end": "623720"
  },
  {
    "text": "so that it can run concurrently so generally what happens is we're going to take that long pause we're going to make",
    "start": "623720",
    "end": "629680"
  },
  {
    "text": "it shorter for one the times we do have to pause but we're going to do that by putting work onto the allocation threads",
    "start": "629680",
    "end": "635519"
  },
  {
    "text": "and when we put the work onto the allocation threads we're going to slow your allocations down a wee bit so",
    "start": "635519",
    "end": "642320"
  },
  {
    "text": "therefore our application throughputs are just going to take a bit of a hit right no free lunch pay me now pay me",
    "start": "642320",
    "end": "647880"
  },
  {
    "text": "later the the trick is to find the balance between how much work can we give the allocators as opposed to how",
    "start": "647880",
    "end": "654279"
  },
  {
    "text": "much work do we want to dump onto the garbage collector okay um um right so we have",
    "start": "654279",
    "end": "661120"
  },
  {
    "text": "these number of spaces here we have an Eden space a nursery that's where objects are generally allocated we have",
    "start": "661120",
    "end": "667399"
  },
  {
    "text": "a Survivor space and we have a tenear space each of these different spaces contributes to problems in a different",
    "start": "667399",
    "end": "674760"
  },
  {
    "text": "way so we sort of when we're looking at tuning the garbage collector or tuning Our application we want to see the",
    "start": "674760",
    "end": "680600"
  },
  {
    "text": "impact that they have on each of these these spaces individually okay so let's talk about",
    "start": "680600",
    "end": "685639"
  },
  {
    "text": "need and allocation first we generally have this top of heat point ENT and then what we're going to do is when we",
    "start": "685639",
    "end": "691560"
  },
  {
    "text": "execute some code here here's my very cleverly written code and you can see",
    "start": "691560",
    "end": "696839"
  },
  {
    "text": "that I got a couple of foo's and a bar and a bite array and so we're going to allocate the foo first which means I'm",
    "start": "696839",
    "end": "703079"
  },
  {
    "text": "going to do what's known as a bump and run so I'm going to bump the pointer up claim the memory and then I can just",
    "start": "703079",
    "end": "709279"
  },
  {
    "text": "dump the data in there and then I got to go through a few barriers to make it visible to everybody and life is good",
    "start": "709279",
    "end": "715279"
  },
  {
    "text": "okay and then the bar does the same thing and then of course I have a bite",
    "start": "715279",
    "end": "720360"
  },
  {
    "text": "array right and you see I'm just going to bump the top of a heat pointer up there right so when I finally fill the",
    "start": "720360",
    "end": "725839"
  },
  {
    "text": "space then of course the collector is going to come along here and evacuate all the data all the live data",
    "start": "725839",
    "end": "732839"
  },
  {
    "text": "out okay so now we're sort of developing a cost model here so you if you want to",
    "start": "732839",
    "end": "738760"
  },
  {
    "text": "know why my pause is long or what's taking so long you have to sort to develop a cost model the cost model here",
    "start": "738760",
    "end": "745480"
  },
  {
    "text": "says gosh if I have a lot of live data and when I fill a space and I copy it",
    "start": "745480",
    "end": "751600"
  },
  {
    "text": "out then of course that's going to take some time okay takes time to allocate it",
    "start": "751600",
    "end": "758279"
  },
  {
    "text": "and it takes time to copy out the live stuff um so we have a couple of different throttles that we can use here",
    "start": "758279",
    "end": "764199"
  },
  {
    "text": "to control things one of them is that we can control the allocation rates that's in our code or we can control the size",
    "start": "764199",
    "end": "771560"
  },
  {
    "text": "of the buffer that's a configuration of the jvm right so those are primarily the two",
    "start": "771560",
    "end": "777519"
  },
  {
    "text": "throttles that we can use to to help ourselves okay in a multi-threaded",
    "start": "777519",
    "end": "783279"
  },
  {
    "text": "application if we just use this very naive scheme of course we're going to have a really hot pointer because we have all of these threads that they're",
    "start": "783279",
    "end": "788680"
  },
  {
    "text": "trying to allocate and they're all going to try to bump this pointer up um so",
    "start": "788680",
    "end": "794279"
  },
  {
    "text": "what we're going to do is we're going to use a common technique when we have a hot lock because this create a hot lock",
    "start": "794279",
    "end": "799560"
  },
  {
    "text": "because we have to put the barriers around the pointer what we're going to do is we're going to do some the",
    "start": "799560",
    "end": "805800"
  },
  {
    "text": "equivalent of some striping and in this case with the striping in is is known as these thread local allocation blocks so initially",
    "start": "805800",
    "end": "813639"
  },
  {
    "text": "each thread when they start up they're going to get a chunk of memory that they're going to allocate from Heap and",
    "start": "813639",
    "end": "818720"
  },
  {
    "text": "they're going to say I can allocate into there okay and now we're not competing",
    "start": "818720",
    "end": "825720"
  },
  {
    "text": "for that hot lock anymore we're just visiting it when we need to get a new",
    "start": "825720",
    "end": "831920"
  },
  {
    "text": "tlab and this of course creates some of its own",
    "start": "832480",
    "end": "837639"
  },
  {
    "text": "issues um so for instance we could have like u a couple of threads allocating",
    "start": "837639",
    "end": "842959"
  },
  {
    "text": "things you can see we've allocated Fu and allocated bar and and uh and we have",
    "start": "842959",
    "end": "849199"
  },
  {
    "text": "also allocated this bite array now the bite array is too big it doesn't fit into a t-lab so that has to go into the",
    "start": "849199",
    "end": "854759"
  },
  {
    "text": "general allocation space but everything else fits into a tab and you know as you can imagine the",
    "start": "854759",
    "end": "861639"
  },
  {
    "text": "problems come when you get to here right now what do I do so well I'm",
    "start": "861639",
    "end": "869079"
  },
  {
    "text": "I'm allowed to waste up to 1% of the tlab which basically means that once I pass that red line that I've drawn up",
    "start": "869079",
    "end": "875560"
  },
  {
    "text": "there which is um not representative of 1% in case you didn't notice so not to",
    "start": "875560",
    "end": "880680"
  },
  {
    "text": "scale is that what they say um so we're allowed to waste up that which basically means if we're past that threshold",
    "start": "880680",
    "end": "886839"
  },
  {
    "text": "they're saying okay now let's go get a new tlab and start allocating into the new tlab so we get some memory wastage",
    "start": "886839",
    "end": "892759"
  },
  {
    "text": "here but that's better than the alternative which is basically saying I'm below the threshold let's try to",
    "start": "892759",
    "end": "899639"
  },
  {
    "text": "allocate here oops fail protect from buffer overrun roll back get a new tlab",
    "start": "899639",
    "end": "905320"
  },
  {
    "text": "now do the allocation right as you can imagine that's a lot more expensive so",
    "start": "905320",
    "end": "910399"
  },
  {
    "text": "if you have these situations occurring quite frequently where you can't",
    "start": "910399",
    "end": "915880"
  },
  {
    "text": "allocate because you're below the tlab threshold uh the tlab waste percentage",
    "start": "915880",
    "end": "921079"
  },
  {
    "text": "but your thing is going to overflow the buffer um then that's a condition if you",
    "start": "921079",
    "end": "926519"
  },
  {
    "text": "can recognize that you can adjust that waste percentage and get rid of these failed allocations and that can make",
    "start": "926519",
    "end": "932839"
  },
  {
    "text": "some difference in per in the performance of your allocators",
    "start": "932839",
    "end": "940120"
  },
  {
    "text": "okay um tenard space is is different and and how tenure",
    "start": "940120",
    "end": "947199"
  },
  {
    "text": "space works is different and now with G1 than it was with generational collectors I'm just going to talk about",
    "start": "947199",
    "end": "952480"
  },
  {
    "text": "generational collectors here and because the G1 comes with its own set of issues",
    "start": "952480",
    "end": "959079"
  },
  {
    "text": "that are completely different um and as you can see what happens is that we're",
    "start": "959079",
    "end": "964120"
  },
  {
    "text": "we're going to have this thing called a free list here so because we don't have another space to evacuate in which is",
    "start": "964120",
    "end": "969279"
  },
  {
    "text": "something that G1 solves um we can't take all the live data and copy it out",
    "start": "969279",
    "end": "975199"
  },
  {
    "text": "uh what we're going to do is we're going to maintain a free list the free list is going to tell us where we can make the",
    "start": "975199",
    "end": "980240"
  },
  {
    "text": "allocation from so we have in addition uh you know when we're doing the",
    "start": "980240",
    "end": "985800"
  },
  {
    "text": "allocations here well actually it's going to be the garbage collection threads that are going to be be mostly doing the allocations here um we you can",
    "start": "985800",
    "end": "992600"
  },
  {
    "text": "see that we have to do all of this Freel less maintenance and there's some other work that needs to be done in order to",
    "start": "992600",
    "end": "997720"
  },
  {
    "text": "help the garbage coor out one of them is that we have to maintain card sets so every time we have a pointer mutation",
    "start": "997720",
    "end": "1005079"
  },
  {
    "text": "this is where mutation rates become important in in the performance the application every time we have you know",
    "start": "1005079",
    "end": "1010839"
  },
  {
    "text": "fu is pointing to bar and we say oh it's not pointing to the bar anymore but it's actually pointing to fa or some other",
    "start": "1010839",
    "end": "1017480"
  },
  {
    "text": "object then if we have that if we have Fu in tenure",
    "start": "1017480",
    "end": "1023199"
  },
  {
    "text": "and the other data in young then I want to maintain that pointer information in",
    "start": "1023199",
    "end": "1028880"
  },
  {
    "text": "a separate data structure so every time we do that Swizzle of the pointer then I",
    "start": "1028880",
    "end": "1034160"
  },
  {
    "text": "have to update that other data structure um in order to uh in order to help the",
    "start": "1034160",
    "end": "1039400"
  },
  {
    "text": "garbage collector out so that's like an extra cost that you get on top of the allocation um right data and tenure",
    "start": "1039400",
    "end": "1047438"
  },
  {
    "text": "tends to be long lived and the amount of data and tenured will affect uh the",
    "start": "1047439",
    "end": "1052600"
  },
  {
    "text": "garbage collection pause times also right right so I forgot to mention that",
    "start": "1052600",
    "end": "1058919"
  },
  {
    "text": "what we see is that when you do an allocation from the free list it's about 10 times more expensive than actually",
    "start": "1058919",
    "end": "1064720"
  },
  {
    "text": "doing an allocation in young generational space so the question is when would your thread do decide to",
    "start": "1064720",
    "end": "1070280"
  },
  {
    "text": "allocate in ten your space as opposed to allocating in needen space well the answer is if the allocations is deemed",
    "start": "1070280",
    "end": "1077200"
  },
  {
    "text": "too big that it large enough okay there's going to be a thresholds for the",
    "start": "1077200",
    "end": "1082520"
  },
  {
    "text": "different collectors and they're going to say okay I don't want to do that allocation there I want to do it in",
    "start": "1082520",
    "end": "1087720"
  },
  {
    "text": "tenard so as an example the threshold for uh a mostly concurrent Mark sweep",
    "start": "1087720",
    "end": "1093480"
  },
  {
    "text": "collector is 50% of Eden if you're larger than 50% of Eden then that allocation will automatically occur in",
    "start": "1093480",
    "end": "1100480"
  },
  {
    "text": "tenard space and there's some other education conditions where these things can happen",
    "start": "1100480",
    "end": "1106640"
  },
  {
    "text": "Okay so what are the problems we run into to well we have high memory churn rates many temporal",
    "start": "1106640",
    "end": "1113799"
  },
  {
    "text": "objects and what that's going to do is quickly fill Eden that means it's going to give you frequent young GC",
    "start": "1113799",
    "end": "1121840"
  },
  {
    "text": "cycles and it also has its other side effect which is kind of a strange one we have two different ways of Aging data we",
    "start": "1121840",
    "end": "1128600"
  },
  {
    "text": "have time like as in wall clock time so if we have a session time out of 30",
    "start": "1128600",
    "end": "1135000"
  },
  {
    "text": "minutes then of course that data is going to stay in heat for 30 minutes now the question is how many garbage collection Cycles is it going to",
    "start": "1135000",
    "end": "1143600"
  },
  {
    "text": "face I don't know no idea I do know that if it faces 15 of them it's going to end",
    "start": "1144880",
    "end": "1151280"
  },
  {
    "text": "up in tenard well six or 15 depending on what the tenuring threshold is so that's the",
    "start": "1151280",
    "end": "1157320"
  },
  {
    "text": "second way I have of Aging the data the second way of Aging the data is how many garbage collection Cycles has it",
    "start": "1157320",
    "end": "1162559"
  },
  {
    "text": "actually face and if it's faced that many of them then I'm going to have to copy that data off into 10",
    "start": "1162559",
    "end": "1170520"
  },
  {
    "text": "now why do I care about this well I know that if I can collect the data in Eden actually you know the cost what's the",
    "start": "1170520",
    "end": "1177000"
  },
  {
    "text": "cost of collecting dead data in Eden zero nothing there is no cost I'm",
    "start": "1177000",
    "end": "1184840"
  },
  {
    "text": "only copying live stuff I leave the dead stuff behind so I never mark never touch never do anything with the dead stuff we",
    "start": "1184840",
    "end": "1191000"
  },
  {
    "text": "just move the live data out so it's the live data that costs so by aging faster",
    "start": "1191000",
    "end": "1197159"
  },
  {
    "text": "because I have frequent gc's I'm actually end up copying a lot more data than I should and I'm putting it into a space",
    "start": "1197159",
    "end": "1205039"
  },
  {
    "text": "that's a lot more expensive to",
    "start": "1205039",
    "end": "1208279"
  },
  {
    "text": "collect someone look you look confused any questions at this point yeah it's yeah it's kind of",
    "start": "1210120",
    "end": "1215799"
  },
  {
    "text": "strange okay um so I call it premature promotion that's promoting data in",
    "start": "1215799",
    "end": "1221240"
  },
  {
    "text": "tenured sooner than it should be right um and again you know what are the knobs",
    "start": "1221240",
    "end": "1227720"
  },
  {
    "text": "that we have to turn to control us well the first one and the one that's probably going to have the biggest effect is going to be allocation rate we",
    "start": "1227720",
    "end": "1235159"
  },
  {
    "text": "can make the buffer size bigger to accommodate the higher",
    "start": "1235159",
    "end": "1240559"
  },
  {
    "text": "allocation rate but still not going to get um rid of the effects of having to allocate all of this",
    "start": "1240559",
    "end": "1247320"
  },
  {
    "text": "memory right and it's you know it'll decrease the copy cost so you get some",
    "start": "1247320",
    "end": "1252400"
  },
  {
    "text": "benefits from doing that um allocation is quick very quick quick",
    "start": "1252400",
    "end": "1258760"
  },
  {
    "text": "in Java much quicker than in most runtimes um but quick times a large",
    "start": "1258760",
    "end": "1264640"
  },
  {
    "text": "number is still a large number right so that means it's just",
    "start": "1264640",
    "end": "1270440"
  },
  {
    "text": "going to be slow um so we find that it doesn't really matter what platform you're on we sort of get this benefit of",
    "start": "1270440",
    "end": "1277679"
  },
  {
    "text": "lowering the allocation rates it's sort of on this curve so I'd say that any anytime you're above one gigabyte per",
    "start": "1277679",
    "end": "1283600"
  },
  {
    "text": "second and remember right we tend to allocate the buffer 100 bytes at a",
    "start": "1283600",
    "end": "1290159"
  },
  {
    "text": "time right so it's not that any individual I mean if we did it a a gig at a time I mean it would probably take",
    "start": "1290159",
    "end": "1297840"
  },
  {
    "text": "uh each individual allocation takes the the same amount of time but if we're doing it 100 at a time then of course you have a frequency",
    "start": "1297840",
    "end": "1304600"
  },
  {
    "text": "issue and and you know the frequency issue seems to be really bad when you cross this one gig threshold",
    "start": "1304600",
    "end": "1312320"
  },
  {
    "text": "approximately and by the time you get it below 300 megabytes per second um then",
    "start": "1312320",
    "end": "1318840"
  },
  {
    "text": "pretty much I'm just going to ignore that problem in between it's sort of like well I may or may decide to do something",
    "start": "1318840",
    "end": "1325520"
  },
  {
    "text": "about it depending upon you know what other things that are going on okay um",
    "start": "1325520",
    "end": "1332880"
  },
  {
    "text": "next problem is live uh large live data sets are inflated data sets sizes as I",
    "start": "1332880",
    "end": "1338600"
  },
  {
    "text": "mentioned because of floering and really in this case um we get inflated scan for roots time so that",
    "start": "1338600",
    "end": "1344799"
  },
  {
    "text": "means that every time we do a garbage collection we have to find the root set which means have to go through all the data to figure out who's pointing into",
    "start": "1344799",
    "end": "1351679"
  },
  {
    "text": "that young generational memory pool or Eden Survivor um and that's just something that's linear with the size of",
    "start": "1351679",
    "end": "1359360"
  },
  {
    "text": "with linear with the the amount of data that I have to scan through so if I have more",
    "start": "1359360",
    "end": "1364880"
  },
  {
    "text": "data which is simply going to take longer right I get reduced page locality I get an inflated compaction",
    "start": "1364880",
    "end": "1372360"
  },
  {
    "text": "times we get increased coffee costs and it's very likely that you just have less space to Cofe to which means that the",
    "start": "1372360",
    "end": "1379600"
  },
  {
    "text": "jvm has to do more work to figure out how to do the compaction and it has less room to work with so it may not do as as",
    "start": "1379600",
    "end": "1385799"
  },
  {
    "text": "good a job uh with the compaction right and and here's a nice little chart that",
    "start": "1385799",
    "end": "1391799"
  },
  {
    "text": "we do here and you notice the one on the left right the one on the left is actually an you just look at the red",
    "start": "1391799",
    "end": "1397799"
  },
  {
    "text": "dots at the bottom forget all the other noise I probably should have taken it out because it's just like lots of noise but if you look at the red dots at the",
    "start": "1397799",
    "end": "1403360"
  },
  {
    "text": "bottom that's the increased occupancy uh primarily of tenard space",
    "start": "1403360",
    "end": "1410440"
  },
  {
    "text": "and if you look at the red dots on the other side you see any correlation in the",
    "start": "1411240",
    "end": "1416320"
  },
  {
    "text": "slopes of an imaginary line there right that's what exactly what you're seeing",
    "start": "1416320",
    "end": "1422159"
  },
  {
    "text": "you're seeing the direct correlation of the uh additional copy cost but simply by having more data in",
    "start": "1422159",
    "end": "1429320"
  },
  {
    "text": "Heap it's a nice chart um if we have unstable live data",
    "start": "1430080",
    "end": "1437400"
  },
  {
    "text": "set size or what we normally say is a memory leak then of course you're just going to eventually run out of memory",
    "start": "1437400",
    "end": "1444840"
  },
  {
    "text": "and that's going to be really bad for performance yeah so each app each app is going to",
    "start": "1444840",
    "end": "1452640"
  },
  {
    "text": "throw out a memory air and will terminate uh because it can't satisfy the allocation and when all of the",
    "start": "1452640",
    "end": "1460320"
  },
  {
    "text": "non-don threads are finished then basically the jvm will shut down and it'll give you throw the um out of",
    "start": "1460320",
    "end": "1466480"
  },
  {
    "text": "memory air that we all love right",
    "start": "1466480",
    "end": "1472200"
  },
  {
    "text": "cool um I'd like to talk about this but I've decided I'm not going to right now but",
    "start": "1472200",
    "end": "1478320"
  },
  {
    "text": "I'll get back to it because this is quite fun it's a funit bit of Technology instead let's look at some code here",
    "start": "1478320",
    "end": "1486039"
  },
  {
    "text": "right how much time do I have left where's my moderator she doesn't",
    "start": "1486039",
    "end": "1492520"
  },
  {
    "text": "know 20 after uh okay so I got this goofy little",
    "start": "1492520",
    "end": "1499480"
  },
  {
    "text": "application that I wrote and it's really got lots of fun there's lots of opportunities in here for criticizing",
    "start": "1499480",
    "end": "1506279"
  },
  {
    "text": "the code and everything so please send your comments along I love to say you're wrong okay so",
    "start": "1506279",
    "end": "1513320"
  },
  {
    "text": "what do we have here so I got at this application nothing on the screen of course there's nothing on the screen why",
    "start": "1513320",
    "end": "1520240"
  },
  {
    "text": "would there be anything on the screen that's I didn't want you to see the",
    "start": "1520240",
    "end": "1526440"
  },
  {
    "text": "code Okay so now you can see the code uh actually you can",
    "start": "1526440",
    "end": "1533039"
  },
  {
    "text": "yes strategically positioned well okay so I have this thing set up that it's actually going to run and we can see",
    "start": "1533039",
    "end": "1540240"
  },
  {
    "text": "it's running running running running running and it's doing what's it's doing it's like it's it basically I I said you",
    "start": "1540240",
    "end": "1546760"
  },
  {
    "text": "know I want you to I'm making a guess here uh you Mastermind who's played",
    "start": "1546760",
    "end": "1552440"
  },
  {
    "text": "Mastermind does anyone not know what Mastermind is okay no colors just numbers so what I did was I said okay",
    "start": "1552440",
    "end": "1559039"
  },
  {
    "text": "here's the number sequence and then I well I said you know imagine that all",
    "start": "1559039",
    "end": "1566279"
  },
  {
    "text": "of the possible color sequences were there I said you know try to find that one so what it does is it does some",
    "start": "1566279",
    "end": "1572159"
  },
  {
    "text": "logic to search through and try to figure out uh what the correct answer is and then it will ask come back and ask",
    "start": "1572159",
    "end": "1578559"
  },
  {
    "text": "me and say okay um is this the correct answer and",
    "start": "1578559",
    "end": "1584279"
  },
  {
    "text": "eventually it'll come up with the correct guess so there's my score three Z so I said out of 100,000",
    "start": "1584279",
    "end": "1590799"
  },
  {
    "text": "numbers um I'm going to choose three tell me which three I chose so it came",
    "start": "1590799",
    "end": "1597360"
  },
  {
    "text": "back here and said it's 01 50,000 and2 and it took more",
    "start": "1597360",
    "end": "1602880"
  },
  {
    "text": "importantly it took about 11 seconds to do",
    "start": "1602880",
    "end": "1607919"
  },
  {
    "text": "that we can run it",
    "start": "1607919",
    "end": "1611559"
  },
  {
    "text": "again and when I'm running these really boring boring performance demos that's when you can ask",
    "start": "1615320",
    "end": "1620799"
  },
  {
    "text": "questions is it run yeah it's N9 so it's gotten faster because it's going through some warmup here and eventually it'll",
    "start": "1620799",
    "end": "1627000"
  },
  {
    "text": "just stabilize on some number I think the answer is like something like 8.6 seconds if my demo",
    "start": "1627000",
    "end": "1633200"
  },
  {
    "text": "runs correctly yeah 9.6 run the test",
    "start": "1633200",
    "end": "1639080"
  },
  {
    "text": "again hopefully the demo is in the correct",
    "start": "1639080",
    "end": "1643480"
  },
  {
    "text": "configuration it's fun fun fun oh okay 8.2 excellent okay so now now it seems",
    "start": "1644440",
    "end": "1649799"
  },
  {
    "text": "to be efficiently warmed up and it should be around 8.3 8.5 seconds whatever doesn't really matter point is",
    "start": "1649799",
    "end": "1656440"
  },
  {
    "text": "we have a sort of a magnitude area where this will run now so the question is if we want to make this run faster we have",
    "start": "1656440",
    "end": "1662279"
  },
  {
    "text": "to figure out okay what's the problem I'm going to spare you the analysis but we're going to say that allocation rates",
    "start": "1662279",
    "end": "1668200"
  },
  {
    "text": "are the problem and actually I'll show you the last part of the analysis that will help you so let's open up some tool",
    "start": "1668200",
    "end": "1674159"
  },
  {
    "text": "this is our GC analysis tool I collected a GC",
    "start": "1674159",
    "end": "1679720"
  },
  {
    "text": "log that one right there so it's going to load it up and it's going to",
    "start": "1679720",
    "end": "1684880"
  },
  {
    "text": "say uh it's giving me all kinds of information here what's going on but really what I'm",
    "start": "1684880",
    "end": "1691960"
  },
  {
    "text": "looking for is allocation rates ah there's my allocation rates you can see my allocation rates are basically",
    "start": "1691960",
    "end": "1697440"
  },
  {
    "text": "wavering between seven gigs and three and a half gigs or so so that's above",
    "start": "1697440",
    "end": "1703640"
  },
  {
    "text": "the one gig limit what' you say yeah okay cool so we can successfully say",
    "start": "1703640",
    "end": "1709760"
  },
  {
    "text": "that if we were to do something with the allocation rate with this application it should run faster yeah every you agree",
    "start": "1709760",
    "end": "1716679"
  },
  {
    "text": "okay so the question is where's the hot allocation site how are we going to find",
    "start": "1716679",
    "end": "1722919"
  },
  {
    "text": "that uh memory profiler I'll use visual DM",
    "start": "1722919",
    "end": "1729840"
  },
  {
    "text": "boom as you can see I was making sure it worked before",
    "start": "1729840",
    "end": "1735840"
  },
  {
    "text": "here I've done some crazy things in the past where the demo just didn't work for whatever reason now I test",
    "start": "1736039",
    "end": "1742880"
  },
  {
    "text": "them don't up jdks you know all the standard stuff you shouldn't do okay so let let's attach the memory profiler",
    "start": "1742880",
    "end": "1749000"
  },
  {
    "text": "here this is just visual VM uh for those of you who've not seen",
    "start": "1749000",
    "end": "1754120"
  },
  {
    "text": "it you can get it open source GitHub um you can probably do the same thing with the mission control um is Mission",
    "start": "1754120",
    "end": "1761200"
  },
  {
    "text": "Control bundle with 11 I don't think I think they've debundled it it's bundled it's still bundled it",
    "start": "1761200",
    "end": "1768279"
  },
  {
    "text": "was bundled yes as was visual VM and I think they've debundled it from 11 anyways doesn't matter so we're looking",
    "start": "1768279",
    "end": "1774200"
  },
  {
    "text": "for a frequency event so I'm looking for allocated objects here so let's go to our application here let's clear it out",
    "start": "1774200",
    "end": "1780720"
  },
  {
    "text": "and run it again and let's see if anybody can tell me",
    "start": "1780720",
    "end": "1787440"
  },
  {
    "text": "what the hot allocated object",
    "start": "1787440",
    "end": "1791398"
  },
  {
    "text": "is any guesses anybody undo pause oh right undo pause ref good",
    "start": "1793480",
    "end": "1802080"
  },
  {
    "text": "choice excellent I love it okay let's go see where that is okay so now I'm going to take a snapshot here and we're going",
    "start": "1802080",
    "end": "1808679"
  },
  {
    "text": "to open it up and we're going to say okay somebody in here is just doing something like really nasty right",
    "start": "1808679",
    "end": "1814000"
  },
  {
    "text": "creating all these objects so now I can go back to source code okay now this is where now now be",
    "start": "1814000",
    "end": "1820799"
  },
  {
    "text": "brave right hold on let's shut all this stuff down yeah we don't need any of this stuff",
    "start": "1820799",
    "end": "1827399"
  },
  {
    "text": "anymore and board so it's a score ah look at that",
    "start": "1827399",
    "end": "1835559"
  },
  {
    "text": "now who wrote this code who would create a new object in a",
    "start": "1835559",
    "end": "1842159"
  },
  {
    "text": "loop that's obviously being run millions and millions of time duh right okay uh",
    "start": "1842159",
    "end": "1848039"
  },
  {
    "text": "so what can we do well okay let's uh let's reuse",
    "start": "1848039",
    "end": "1853278"
  },
  {
    "text": "it and of course we need one here so so we'll just hoist that allocation out",
    "start": "1854440",
    "end": "1859639"
  },
  {
    "text": "here now how many people here believe this is going to make a",
    "start": "1859639",
    "end": "1864158"
  },
  {
    "text": "difference one 2 3 four five six seven",
    "start": "1864880",
    "end": "1870360"
  },
  {
    "text": "for those of you for those of you who don't believe it's going to make a difference I want to hear",
    "start": "1870360",
    "end": "1877559"
  },
  {
    "text": "why okay actually let's do it this way because I think some of you are probably going like I don't know so how many",
    "start": "1880240",
    "end": "1886279"
  },
  {
    "text": "people here believe that this this isn't going to make a",
    "start": "1886279",
    "end": "1890840"
  },
  {
    "text": "difference anybody else remember I set up the",
    "start": "1893880",
    "end": "1898960"
  },
  {
    "text": "demo okay okay um so and the answer",
    "start": "1898960",
    "end": "1907720"
  },
  {
    "text": "is cross fingers let's run the test it's not",
    "start": "1908440",
    "end": "1914039"
  },
  {
    "text": "going to make a difference what's that",
    "start": "1914039",
    "end": "1919840"
  },
  {
    "text": "yes there you go yes let's explain this now this goes",
    "start": "1921039",
    "end": "1927440"
  },
  {
    "text": "back to our Escape analysis thing I can run it again should after it warms up yeah",
    "start": "1927440",
    "end": "1933880"
  },
  {
    "text": "we'll probably",
    "start": "1933880",
    "end": "1936440"
  },
  {
    "text": "go what you going to be kidding",
    "start": "1941000",
    "end": "1949840"
  },
  {
    "text": "awesome go figure okay that's the first time this one's",
    "start": "1952799",
    "end": "1959120"
  },
  {
    "text": "ever come up that's really good I I mean literally this demo is like years old never come off okay let's just shows you",
    "start": "1959120",
    "end": "1966840"
  },
  {
    "text": "anyways okay uh so we're we're we're right in about here okay so what's happening here well what's really what's",
    "start": "1966840",
    "end": "1973279"
  },
  {
    "text": "happening is this uh technology called Escape analysis is helping us out here",
    "start": "1973279",
    "end": "1978440"
  },
  {
    "text": "it's changing it's helping us avoid our stupidity shall we say who the developer",
    "start": "1978440",
    "end": "1984159"
  },
  {
    "text": "who put that stupid code in there right um has just been saved by",
    "start": "1984159",
    "end": "1989279"
  },
  {
    "text": "hotspot you know so what's a score well let's go take a look well it's a Boolean",
    "start": "1989279",
    "end": "1994559"
  },
  {
    "text": "and two in so rather than allocate this over and over and over and over and over again",
    "start": "1994559",
    "end": "2000080"
  },
  {
    "text": "let's just drop this on a stack and just get rid of the allocation site Al together right and you can and you can",
    "start": "2000080",
    "end": "2006799"
  },
  {
    "text": "look at you can look at it let's go back here and say like okay it has local",
    "start": "2006799",
    "end": "2011840"
  },
  {
    "text": "scope it doesn't go it doesn't go outside of the scope so I have complete control over everything that happens to",
    "start": "2011840",
    "end": "2019279"
  },
  {
    "text": "this object here there's no side effects or anywhere in the application so I can safely eliminate that allocation spot in",
    "start": "2019279",
    "end": "2026480"
  },
  {
    "text": "this particular case right okay so why did the profiler",
    "start": "2026480",
    "end": "2031799"
  },
  {
    "text": "complain well the profilers instrument the code and when they instrument the code what they do",
    "start": "2031799",
    "end": "2038760"
  },
  {
    "text": "is they'll say pass that object into this other object so now it's outside of the scope of this",
    "start": "2038760",
    "end": "2044880"
  },
  {
    "text": "method it's escaped so the profiler is lying to",
    "start": "2044880",
    "end": "2051040"
  },
  {
    "text": "us okay classic case of line okay so cool so we've been lied",
    "start": "2051040",
    "end": "2057919"
  },
  {
    "text": "to well we made the code maybe I don't know that's not better okay so so what's",
    "start": "2057919",
    "end": "2063240"
  },
  {
    "text": "the real problem then right so let's let's see if we can find a real problem",
    "start": "2063240",
    "end": "2069040"
  },
  {
    "text": "oops I should have showed you the allocation rate the allocation rates were identical um but I forgot to do that",
    "start": "2069240",
    "end": "2076320"
  },
  {
    "text": "okay so I'm just gonna add a zero here just for",
    "start": "2076320",
    "end": "2082118"
  },
  {
    "text": "grins just for fun I'm GNA bring up visual VM",
    "start": "2082119",
    "end": "2088000"
  },
  {
    "text": "again oh what does that mean I thought you were saying 's up",
    "start": "2088359",
    "end": "2096118"
  },
  {
    "text": "just before the last dramatic part of the demoll right drum roll okay here we go uh profiler is remember settings oh",
    "start": "2096119",
    "end": "2103280"
  },
  {
    "text": "yeah everything looks cool of course why wouldn't it just checking to make sure get rid of",
    "start": "2103280",
    "end": "2109680"
  },
  {
    "text": "that uh frequency events so oops wrong",
    "start": "2109680",
    "end": "2114839"
  },
  {
    "text": "direction let's do that back over here and run the test and",
    "start": "2114839",
    "end": "2123839"
  },
  {
    "text": "any thoughts this",
    "start": "2127960",
    "end": "2130680"
  },
  {
    "text": "time yeah probably something to do with this big integer right or this interray so we can take a",
    "start": "2138240",
    "end": "2145800"
  },
  {
    "text": "look in the interray we look at the interray there's some goofy code down here doing something uh right so the",
    "start": "2145800",
    "end": "2152359"
  },
  {
    "text": "point is we can we can go into this code and we can make the changes and when we make the changes this is going to make",
    "start": "2152359",
    "end": "2158160"
  },
  {
    "text": "the speed up that we need in other words this is going to run in under half a second once we fix this problem with the",
    "start": "2158160",
    "end": "2164400"
  },
  {
    "text": "big inch chair in this array okay and these these are not big changes in the code so these are just two little small",
    "start": "2164400",
    "end": "2170359"
  },
  {
    "text": "changes in the code but I'll I'll leave that as a as an exercise for the imagination rate uh for the moment",
    "start": "2170359",
    "end": "2176400"
  },
  {
    "text": "because I'm not sure about how much time we have oh 15 minutes I could have done it what's that okay I could have done it",
    "start": "2176400",
    "end": "2182560"
  },
  {
    "text": "but I I'll leave it like this right so instead of like taking 10 seconds to run just by making these changes by to the",
    "start": "2182560",
    "end": "2189280"
  },
  {
    "text": "algorithm where we we have this hot interray allocation and the use of big integer when we actually don't really",
    "start": "2189280",
    "end": "2195280"
  },
  {
    "text": "need it for this particular problem um you know we can reduce the allocation rates considerably and as I mentioned",
    "start": "2195280",
    "end": "2203200"
  },
  {
    "text": "before this this application will run in half a second now that's how much of a difference that",
    "start": "2203200",
    "end": "2208880"
  },
  {
    "text": "it will make I probably should prove it to you but I'd rather move on",
    "start": "2208880",
    "end": "2216160"
  },
  {
    "text": "it's going to take a while this way I'll just texit let's go back",
    "start": "2223800",
    "end": "2230838"
  },
  {
    "text": "to slides oh could write code I guess it's demo",
    "start": "2232240",
    "end": "2238800"
  },
  {
    "text": "time so you can see this Escape analysis made a big difference um and there's a",
    "start": "2238800",
    "end": "2244160"
  },
  {
    "text": "lot of other optimiz optimizations in the jit engine that can help you but I",
    "start": "2244160",
    "end": "2250119"
  },
  {
    "text": "would say that the first thing to do is just look at the memory efficiency of your application and and try to use the the",
    "start": "2250119",
    "end": "2256839"
  },
  {
    "text": "garbage collector will tell you if you're allocating a lot right if you do the right calculations so sensum is our",
    "start": "2256839",
    "end": "2263760"
  },
  {
    "text": "tool for um that we use to actually do our analysis and one of the things that",
    "start": "2263760",
    "end": "2269280"
  },
  {
    "text": "we'll regularly look at is the allocation rate just to see is this is this a hot allocating uh application do",
    "start": "2269280",
    "end": "2275920"
  },
  {
    "text": "we have a large uh memory footprint right so those are the two",
    "start": "2275920",
    "end": "2281160"
  },
  {
    "text": "things that we probably want to try to work to reduce in order to improve the performance of the",
    "start": "2281160",
    "end": "2287240"
  },
  {
    "text": "applications um so you know just so again let the garbage collector tell you what's going on and then just move",
    "start": "2287240",
    "end": "2294119"
  },
  {
    "text": "naturally from there to use the profilers be aware that hotspot is",
    "start": "2294119",
    "end": "2299280"
  },
  {
    "text": "running under the hood and so the code that you've written is not necessarily the code that you're actually is",
    "start": "2299280",
    "end": "2304440"
  },
  {
    "text": "actually going to be running so it can modify it and mutate it quite a bit and",
    "start": "2304440",
    "end": "2310000"
  },
  {
    "text": "um yeah um so in that case I would be happy to take questions I I like prefer",
    "start": "2310000",
    "end": "2316040"
  },
  {
    "text": "longer q&as to Shorter ones yes Steve was kind of confused looking yeah",
    "start": "2316040",
    "end": "2322079"
  },
  {
    "text": "okay sure um you mentioned a session sort of locked memory right subject to",
    "start": "2322079",
    "end": "2328359"
  },
  {
    "text": "the 30 minute rule until the session goes away and then all the pointers disappear right um and um that's a",
    "start": "2328359",
    "end": "2335240"
  },
  {
    "text": "session memory yes right so you mentioned that it would it would um",
    "start": "2335240",
    "end": "2340640"
  },
  {
    "text": "migrate from Eden to tenure more than likely depending upon the number of garbage collections it reaches yeah and",
    "start": "2340640",
    "end": "2347400"
  },
  {
    "text": "uh it's a relevant question for me what is it about tenard remind meat that is",
    "start": "2347400",
    "end": "2353640"
  },
  {
    "text": "more expensive to to clean up um okay so",
    "start": "2353640",
    "end": "2358760"
  },
  {
    "text": "the cleaning tenard is more expensive because uh one you have to maintain a free list right instead of a bump and",
    "start": "2358760",
    "end": "2365880"
  },
  {
    "text": "run on a pointer is just basically pointer value bump it up by and we're done right barriers to you know drain",
    "start": "2365880",
    "end": "2373000"
  },
  {
    "text": "caches and things like that uh to do full freelist maintenance and possibly do compaction because of fragmentation",
    "start": "2373000",
    "end": "2380480"
  },
  {
    "text": "which and then you have to do the pointer swizzling afterwards As you move things you can see there's just a lot of",
    "start": "2380480",
    "end": "2386200"
  },
  {
    "text": "very expensive operations there that uh that that you have",
    "start": "2386200",
    "end": "2391319"
  },
  {
    "text": "to there's that you have to go through in order just to maintain uh the tenard space",
    "start": "2391319",
    "end": "2398920"
  },
  {
    "text": "M session session data uh um one of the",
    "start": "2405000",
    "end": "2411480"
  },
  {
    "text": "things to do is that if a session hasn't been in use for a while we might offload it completely and if it if somebody",
    "start": "2411480",
    "end": "2418520"
  },
  {
    "text": "happens to come back then you so you can like store it in a database or or or something like that",
    "start": "2418520",
    "end": "2426720"
  },
  {
    "text": "so serial ize it off to off heat memory um if it's not going to be used for a while if you're going to",
    "start": "2426720",
    "end": "2432040"
  },
  {
    "text": "continuously be using it then I would not say don't serialize that to off because the expense of serializing",
    "start": "2432040",
    "end": "2437240"
  },
  {
    "text": "deserialization is going to offset uh any savings you might get uh by you know",
    "start": "2437240",
    "end": "2443000"
  },
  {
    "text": "orders of magnitude probably yeah okay so that's one thing you can do is just",
    "start": "2443000",
    "end": "2449040"
  },
  {
    "text": "uh you know I mean the the the I think it's like the F minute Rule still applies if you haven't touched anything in 5 minutes it's not likely that you're",
    "start": "2449040",
    "end": "2455800"
  },
  {
    "text": "going to that's a old cashing rule right for cash eviction policies oh yeah this",
    "start": "2455800",
    "end": "2461400"
  },
  {
    "text": "is really funny I mean as another aside I've had so many disc a couple of discussions Now with uh companies that",
    "start": "2461400",
    "end": "2468640"
  },
  {
    "text": "provide product caches for uh retail sites right and the first thing you look",
    "start": "2468640",
    "end": "2475280"
  },
  {
    "text": "at and say oh look at your memor is going like this and okay what are you doing what do you where's the cash",
    "start": "2475280",
    "end": "2480560"
  },
  {
    "text": "eviction policy let's check that and it's like what do you mean no cash eviction policy",
    "start": "2480560",
    "end": "2487480"
  },
  {
    "text": "so essentially you have these companies selling you a memory leak yes bonus right yeah so and then you",
    "start": "2487480",
    "end": "2495760"
  },
  {
    "text": "have arguments with the companies they going like oh but we're providing a useful product and go yeah for whom Amazon so they can jack their memory",
    "start": "2495760",
    "end": "2503079"
  },
  {
    "text": "bills up or I don't know any it's kind of weird uh but yeah just be aware you",
    "start": "2503079",
    "end": "2509480"
  },
  {
    "text": "know uh memory eviction policy is something that we'll look at and if you don't have one probably a sign that you",
    "start": "2509480",
    "end": "2515720"
  },
  {
    "text": "might be using the wrong product just saying okay yes uh couple yes um go",
    "start": "2515720",
    "end": "2523960"
  },
  {
    "text": "ahead the first uh optimization you did for not allocating and rather reusing an",
    "start": "2523960",
    "end": "2529280"
  },
  {
    "text": "object how does that sit with you know cleaner code and refactoring your code and also Java 8 and lambdas was is that",
    "start": "2529280",
    "end": "2536560"
  },
  {
    "text": "something that you should you're asking a performance guy about cleaner code seriously yeah or or lambdas and you",
    "start": "2536560",
    "end": "2544240"
  },
  {
    "text": "know uh lambdas you want performance and you're using lambdas okay uh I mean",
    "start": "2544240",
    "end": "2551400"
  },
  {
    "text": "there's early questions about you know neighbors and things like that I you know honestly to be honest I write I try",
    "start": "2551400",
    "end": "2556960"
  },
  {
    "text": "to write clean code I'm not going to claim that this one is clean it isn't but um first I find it's much easier to",
    "start": "2556960",
    "end": "2564000"
  },
  {
    "text": "optimize and quite frankly um if it's well written code it's more than likely going to perform well anyways and it's",
    "start": "2564000",
    "end": "2570720"
  },
  {
    "text": "very likely you're not going to have the memory issues if you thought about writing the clean code just because the",
    "start": "2570720",
    "end": "2575760"
  },
  {
    "text": "clean code is going to be less likely to allocate hot anyways okay so yeah so I'm all for",
    "start": "2575760",
    "end": "2582319"
  },
  {
    "text": "clean code um you know and I'll be really happy when someone actually shows",
    "start": "2582319",
    "end": "2587480"
  },
  {
    "text": "me a definition of clean code that we can measure that may be even better because my code is clean I know it I",
    "start": "2587480",
    "end": "2594040"
  },
  {
    "text": "know it okay another question so uh for everyone who's trying to solve the",
    "start": "2594040",
    "end": "2600640"
  },
  {
    "text": "problem of like quick GC gc's or uh memory leaks",
    "start": "2600640",
    "end": "2605720"
  },
  {
    "text": "with frequent GCS and then uh by just throwing more capacity at it like you",
    "start": "2605720",
    "end": "2611200"
  },
  {
    "text": "said AWS azures of the world yeah that helps um yeah help a bit sometimes that's the answer it's like you know uh",
    "start": "2611200",
    "end": "2617680"
  },
  {
    "text": "your memory leaks you're going to run out of memory in 3 days you know double A Memory six days excellent we're almost at the recycle time right recycle the",
    "start": "2617680",
    "end": "2624599"
  },
  {
    "text": "jvm or or restart your or restart your web app yeah just yeah recycle the VM",
    "start": "2624599",
    "end": "2630040"
  },
  {
    "text": "you're done so I mean uh one of the garbage collectors coming up is Epsilon which is you know is basically no",
    "start": "2630040",
    "end": "2636200"
  },
  {
    "text": "garbage collector in the VN which means no interference with the allocators which they can go like",
    "start": "2636200",
    "end": "2641480"
  },
  {
    "text": "screaming past really nice the mutator threads okay but you know uh you know if",
    "start": "2641480",
    "end": "2646839"
  },
  {
    "text": "you know how if you know your rate of allocation you have a tight control over it it's a Technique we use just don't",
    "start": "2646839",
    "end": "2652680"
  },
  {
    "text": "run the garbage collector during the day at all you make the heat big enough",
    "start": "2652680",
    "end": "2657760"
  },
  {
    "text": "that you don't do it right and the Epsilon makes it even better so now you have to do is recycle the only thing you",
    "start": "2657760",
    "end": "2663200"
  },
  {
    "text": "lose is all your Hots spot optimizations overnight so you have to restart from cold in the morning but guess what people are working at",
    "start": "2663200",
    "end": "2669480"
  },
  {
    "text": "solving that problem also so no garbage collector in a VM um you know there's",
    "start": "2669480",
    "end": "2675440"
  },
  {
    "text": "some really nice use cases for it right but you need to have control of",
    "start": "2675440",
    "end": "2681200"
  },
  {
    "text": "your allocation rates in order to man to be able to do that successfully without popping a lid during uh production hours",
    "start": "2681200",
    "end": "2687800"
  },
  {
    "text": "I think abute",
    "start": "2687800",
    "end": "2692119"
  },
  {
    "text": "problem issu sorry the people are trying to solve what problem don't understand try to",
    "start": "2693599",
    "end": "2700200"
  },
  {
    "text": "solve the macro problem ofac management not people who are understanding the the",
    "start": "2700200",
    "end": "2705640"
  },
  {
    "text": "the micro yes so yeah I I completely get that that yeah the yeah the people doing capacity planning don't understand the",
    "start": "2705640",
    "end": "2711960"
  },
  {
    "text": "problem and um yeah it's an opportunity for you to help them I guess any other",
    "start": "2711960",
    "end": "2717880"
  },
  {
    "text": "questions here yes I have one uh concerning the tenuring treshold it's oh yeah in the back because it seems that",
    "start": "2717880",
    "end": "2724800"
  },
  {
    "text": "it's a good practice to set it to maximum abely would you agree that most of the time yes once you understand what",
    "start": "2724800",
    "end": "2732119"
  },
  {
    "text": "your uh what your object uh life cycle looks like um you can possibly reset the",
    "start": "2732119",
    "end": "2739200"
  },
  {
    "text": "tenuring threshold to a lower value that will minimize copy costs uh but",
    "start": "2739200",
    "end": "2744599"
  },
  {
    "text": "generally I just make it bigger and bigger I I mean I I generally have fight with support groups from larger",
    "start": "2744599",
    "end": "2750200"
  },
  {
    "text": "corporations some of them are red in color um because the way I configure",
    "start": "2750200",
    "end": "2756000"
  },
  {
    "text": "Heap is uh quite counterintuitive to the what they're told to do on their screen",
    "start": "2756000",
    "end": "2761319"
  },
  {
    "text": "flows when they you know you know you know the questionnaire right do you have this do you have that then do this flow",
    "start": "2761319",
    "end": "2767319"
  },
  {
    "text": "things yeah um and because they'll look at the configurations and say you shouldn't be doing that so one of the",
    "start": "2767319",
    "end": "2772559"
  },
  {
    "text": "things I often recommend is that Young Generation should be sometimes four or five or six times the size of teny",
    "start": "2772559",
    "end": "2781720"
  },
  {
    "text": "space right so that you can make some very nice size Survivor spaces and it",
    "start": "2781720",
    "end": "2787040"
  },
  {
    "text": "really really calms things down quite a bit and uh you know using this technique we've taken SLA violations down from",
    "start": "2787040",
    "end": "2794359"
  },
  {
    "text": "double digits to like 1% or something like that so but it's not the rec it's",
    "start": "2794359",
    "end": "2800599"
  },
  {
    "text": "not the recommended configuration no one's going to recommend it but if you follow the data if you look at what's",
    "start": "2800599",
    "end": "2806480"
  },
  {
    "text": "what sensum is telling you and you just do what it tells you you're going to go there naturally right so just throw away your",
    "start": "2806480",
    "end": "2813559"
  },
  {
    "text": "biases and follow the data that's all I can say",
    "start": "2813559",
    "end": "2818839"
  },
  {
    "text": "there was a funny there's a funny story with CMS right when when CMS they were performance to when it was first came",
    "start": "2818880",
    "end": "2823920"
  },
  {
    "text": "out there were Performance Tuning it oh what was the what was the threshold do you remember what was theing threshold",
    "start": "2823920",
    "end": "2829000"
  },
  {
    "text": "the recommendation was oh okay so yeah so I have a funni story because I was uh I was Hines and I were the first Dr",
    "start": "2829000",
    "end": "2836520"
  },
  {
    "text": "Hines Kutz I should met my co-founder of J creete uh we were the first non Sun",
    "start": "2836520",
    "end": "2842440"
  },
  {
    "text": "speakers invited to speak at a sun event and so we're talking somebody asked us a question about garbage collection and I",
    "start": "2842440",
    "end": "2848800"
  },
  {
    "text": "think Tony had written a document that basically said make the Survivor spaces really small to get rid of coffee cost",
    "start": "2848800",
    "end": "2855319"
  },
  {
    "text": "and we looked at that and just followed the data and said no that's not going to work so somebody said okay how do you learn more about this and I said go to",
    "start": "2855319",
    "end": "2861680"
  },
  {
    "text": "this white paper read everything that's in there it was beautifully written Tony did a wonderful job writing it I said",
    "start": "2861680",
    "end": "2867359"
  },
  {
    "text": "just do the exact opposite of what it said so all of the sunny exex are like",
    "start": "2867359",
    "end": "2872520"
  },
  {
    "text": "going like oh my god did he just say that like and hin was looking at it's like oh my god did he they just like say",
    "start": "2872520",
    "end": "2877640"
  },
  {
    "text": "that it's like on but yeah that really that was the truth yeah because garbage collection designers that thought that",
    "start": "2877640",
    "end": "2883559"
  },
  {
    "text": "CMS is if you if you uh they got the cost model wrong completely yeah if you tenure everything then then CMS will",
    "start": "2883559",
    "end": "2890599"
  },
  {
    "text": "take care of it because it's like you know it's just free list is just bump the pointer but then you know having",
    "start": "2890599",
    "end": "2896960"
  },
  {
    "text": "fragmentation they didn't account for all those things so it's like the exact opposite for optimization purposes",
    "start": "2896960",
    "end": "2903319"
  },
  {
    "text": "yeah yes um in case of application holding a lot of data in the Hep say",
    "start": "2903319",
    "end": "2911040"
  },
  {
    "text": "cash yeah and don't run the garbage collector ever exactly so would it mean",
    "start": "2911040",
    "end": "2916720"
  },
  {
    "text": "uh would it make sense to load this data uh in memory and then you know Force GC",
    "start": "2916720",
    "end": "2924960"
  },
  {
    "text": "so that those objects are promoted while session objects are not promoted or is",
    "start": "2924960",
    "end": "2930040"
  },
  {
    "text": "there any other technique that can be used um generally every time you you outsmart the garbage collector you out",
    "start": "2930040",
    "end": "2936799"
  },
  {
    "text": "smart if you've vsmart it yourself um so we generally don't recommend doing things like",
    "start": "2936799",
    "end": "2943280"
  },
  {
    "text": "that um I I don't know if you if you had if you",
    "start": "2943280",
    "end": "2948720"
  },
  {
    "text": "have large data set in memory generally what we do is we just inventory it try to figure out okay what really needs to",
    "start": "2948720",
    "end": "2954119"
  },
  {
    "text": "be there and what can we evict and quite often we find that we can evict quite quite a bit of what's there just to",
    "start": "2954119",
    "end": "2960240"
  },
  {
    "text": "reduce the footprint size if you can't then split it between VMS make you know",
    "start": "2960240",
    "end": "2966720"
  },
  {
    "text": "several smaller vmss often better than one big one you know think there so there's some tricks you can do or or as",
    "start": "2966720",
    "end": "2973319"
  },
  {
    "text": "I said just try to configure things so that the garbage collector never really runs uh for however long you need it uh",
    "start": "2973319",
    "end": "2980119"
  },
  {
    "text": "to not run for and then trigger it at night when no one's using the system or very few people are using the system or",
    "start": "2980119",
    "end": "2986400"
  },
  {
    "text": "sometime when you can tolerate a multi-e pause time okay we going to take one last",
    "start": "2986400",
    "end": "2993119"
  },
  {
    "text": "question oh really we're just getting warmed up man she's tough",
    "start": "2993119",
    "end": "3000839"
  },
  {
    "text": "excellent um so uh so you me I think you mentioned offand like uh this this uh",
    "start": "3001200",
    "end": "3008760"
  },
  {
    "text": "this thing with the generations is uh changing in Java 11 or something like that Generations uh no I mean G1 is",
    "start": "3008760",
    "end": "3015599"
  },
  {
    "text": "different than that we have regions so we can actually do evacuation in G1 that",
    "start": "3015599",
    "end": "3021680"
  },
  {
    "text": "you can't do with generational collectors um and uh",
    "start": "3021680",
    "end": "3027680"
  },
  {
    "text": "that seems to you would think that would seem to help but again it comes with its own set of issues in terms of like large",
    "start": "3027680",
    "end": "3035200"
  },
  {
    "text": "object allocations and um tracking mechanism maintenance",
    "start": "3035200",
    "end": "3041400"
  },
  {
    "text": "remember I said the card sets what we use for generational over right so they use a I have no clue how it works um uh",
    "start": "3041400",
    "end": "3049440"
  },
  {
    "text": "system for tracking uh Point these pointers that they need to track uh with G1 the so all",
    "start": "3049440",
    "end": "3056040"
  },
  {
    "text": "of these things are just um they tend to be much more expensive but you know CMS has a practical Heap size of about 4",
    "start": "3056040",
    "end": "3064520"
  },
  {
    "text": "gigs you know some people oversized 8 gigs or something like that once you start getting like 16 32 gigs some size",
    "start": "3064520",
    "end": "3071559"
  },
  {
    "text": "like that then you then you're you're be you're really beyond the Practical scalability of that particular collector",
    "start": "3071559",
    "end": "3077720"
  },
  {
    "text": "so wean we need to go to something else and that's that's G1 or hopefully J Zed GC or zgc so I forget which country I'm",
    "start": "3077720",
    "end": "3085520"
  },
  {
    "text": "in yeah so so to answer that question yes actually oh yeah she's a garbage collection expert anyway she knows more",
    "start": "3085520",
    "end": "3091079"
  },
  {
    "text": "about it than I do so yeah anyway zc and Chen andoa are both um single generation",
    "start": "3091079",
    "end": "3098040"
  },
  {
    "text": "so they're not um yeah we call them time temporal generational yes so so just to",
    "start": "3098040",
    "end": "3104200"
  },
  {
    "text": "answer that question so yes with jdk 11 thanks guys remember to hit the green",
    "start": "3104200",
    "end": "3111078"
  },
  {
    "text": "button excellent than",
    "start": "3114079",
    "end": "3119720"
  }
]