[
  {
    "text": "[Music]",
    "start": "330",
    "end": "25760"
  },
  {
    "text": "so uh let's get started and in this session we typically be looking at what indexed TB is why is it so important and",
    "start": "25760",
    "end": "34480"
  },
  {
    "text": "why is it that no one has really or why is index TB not as popular as it as it should be I mean all the smart web",
    "start": "34480",
    "end": "41120"
  },
  {
    "text": "applications that we write uh we have all kinds of uh Technologies like say websockets or uh CSS 3D transforms in",
    "start": "41120",
    "end": "48520"
  },
  {
    "text": "fact Google Chrome even has uh Adobe Photoshop kind of filters using CSS but",
    "start": "48520",
    "end": "54239"
  },
  {
    "text": "something as basic as uh as a database in the browser is kind of missing and indextv is pretty much a simple database",
    "start": "54239",
    "end": "60559"
  },
  {
    "text": "in your browser so the blueprint for this session um I'm going to be basically",
    "start": "60559",
    "end": "68080"
  },
  {
    "text": "covering why the sto what what does it mean to really store data in the browser why would you want to do it uh we we'll",
    "start": "68080",
    "end": "75960"
  },
  {
    "text": "quickly look at what index TB is what are the basic concepts that you would need to before you can start writing",
    "start": "75960",
    "end": "81079"
  },
  {
    "text": "code we look at some code after that uh we'll be looking at different indextv implementations in browsers like chrome",
    "start": "81079",
    "end": "87759"
  },
  {
    "text": "chrome Canary Etc some more code uh we'll also look at Cross browser support",
    "start": "87759",
    "end": "93360"
  },
  {
    "text": "and can you really use it today and yeah even more code so are you guys okay with",
    "start": "93360",
    "end": "98479"
  },
  {
    "text": "having code in the session oh nice good so uh let me start with a very simple",
    "start": "98479",
    "end": "105799"
  },
  {
    "text": "problem definition when people wanted to build indexdb or when people wanted to store",
    "start": "105799",
    "end": "111000"
  },
  {
    "text": "data in the browser it was a very abstract problem they just said I need a mechanism to store data in the browser",
    "start": "111000",
    "end": "117880"
  },
  {
    "text": "and it's like saying I need a mode of transport it's as abstract as that and that's the problem definition and uh the",
    "start": "117880",
    "end": "125360"
  },
  {
    "text": "first things that people could think of was cookies but then you can compare cookies to this kind of a mode of",
    "start": "125360",
    "end": "131959"
  },
  {
    "text": "Transport I mean we all know it's archa it's kind of ancient uh but that's that's pretty much",
    "start": "131959",
    "end": "138000"
  },
  {
    "text": "what we had like a couple of years ago and then comes the smart engineer he looks at the whole cookie ecosystem says",
    "start": "138000",
    "end": "145680"
  },
  {
    "text": "that it can be made better and he transforms it into something better",
    "start": "145680",
    "end": "151599"
  },
  {
    "text": "uh well yeah I mean that that's all Engineers could do and they laughed at it for some time and then they got",
    "start": "151599",
    "end": "159080"
  },
  {
    "text": "frustrated really really frustrated and this is the story that was like 3 years ago not very long and after cookies",
    "start": "159080",
    "end": "166879"
  },
  {
    "text": "something really interesting happened HTML 5 yep Engineers were dancing well",
    "start": "166879",
    "end": "173239"
  },
  {
    "text": "it was more of a media buzz word HTML 5 itself was nothing to was not an event to happen but yep that happened and and",
    "start": "173239",
    "end": "180239"
  },
  {
    "text": "uh the first thing that came out during the the during the process of change or when during the times when people were",
    "start": "180239",
    "end": "185720"
  },
  {
    "text": "considering browsers as a real uh model to uh to deploy applications local",
    "start": "185720",
    "end": "191120"
  },
  {
    "text": "storage was one of it local storage was very well used in fact it was overused and yeah that's the that's like",
    "start": "191120",
    "end": "197959"
  },
  {
    "text": "a very simplistic overused mode of Transport in fact local storage is used in a lot of websites even today and it's",
    "start": "197959",
    "end": "204040"
  },
  {
    "text": "it's probably one of the most stable kind of uh methods of uh storing data locally",
    "start": "204040",
    "end": "210640"
  },
  {
    "text": "after that came websql the idea was simple browsers like Firefox browsers like Google Chrome already had a",
    "start": "210640",
    "end": "217840"
  },
  {
    "text": "database built in that was playing around with the book with your bookmarks that was doing stuff like saving your",
    "start": "217840",
    "end": "223040"
  },
  {
    "text": "history and doing a lot of other things so they they so that is called the SQ light the this is an embedded browser",
    "start": "223040",
    "end": "230200"
  },
  {
    "text": "it's an open source project and all they did is they decided to expose it out to the JavaScript developers and this is",
    "start": "230200",
    "end": "236840"
  },
  {
    "text": "the raw power of SQL and all they gave you as an engine and to this engine you could attach anything that you want the power was all",
    "start": "236840",
    "end": "244439"
  },
  {
    "text": "you had to do was write simple SQL statements you had the power of transactions you knew what a database is",
    "start": "244439",
    "end": "250400"
  },
  {
    "text": "and as a developer all you had to do was do insert St insert into table values",
    "start": "250400",
    "end": "255879"
  },
  {
    "text": "and it used to work it worked pretty fine but",
    "start": "255879",
    "end": "261120"
  },
  {
    "text": "then um let's quickly recap let's quickly take a look at what we have looked at till now and I'll tell",
    "start": "261120",
    "end": "267240"
  },
  {
    "text": "you why we did we could not go ahead with websql and why we had to move to indexdb so uh how many of you here have",
    "start": "267240",
    "end": "274479"
  },
  {
    "text": "used cookies for storing data locally almost everyone right uh the",
    "start": "274479",
    "end": "280479"
  },
  {
    "text": "problem with cookies is do you like the API no uh the question is is there an",
    "start": "280479",
    "end": "285639"
  },
  {
    "text": "API uh no it's just document. cookies and then after that it's the good old world of string string and substring and",
    "start": "285639",
    "end": "292639"
  },
  {
    "text": "string parsing and stuff uh cookies didn't work as well uh there are",
    "start": "292639",
    "end": "297800"
  },
  {
    "text": "problems with local storage one of the big BG and the most uh hated thing about local storage is that the API is",
    "start": "297800",
    "end": "304120"
  },
  {
    "text": "asynchronous local storage has two two two forms to it local storage and session storage which is basically like",
    "start": "304120",
    "end": "311680"
  },
  {
    "text": "uh which basically determines the LIF lifetime of the data that's stored in your browser uh so if it has to be stored",
    "start": "311680",
    "end": "318800"
  },
  {
    "text": "across sessions uh the API should be such that it'll have to write it to the disk right",
    "start": "318800",
    "end": "323880"
  },
  {
    "text": "I mean only if it persists on the hard drive will your cookie be available when you open the browser next time uh the",
    "start": "323880",
    "end": "330080"
  },
  {
    "text": "problem with that is the moment you want to hit the hit your dis you're effectively blocking your UI thread and",
    "start": "330080",
    "end": "335880"
  },
  {
    "text": "if you're blocking your UI thread your application is going is going to become unresponsive a lot of people didn't like",
    "start": "335880",
    "end": "341720"
  },
  {
    "text": "it and uh that's the complaint uh it may not be entirely true",
    "start": "341720",
    "end": "347240"
  },
  {
    "text": "that it's going to hit the DAT it's going to hit the uh hard drive every single time I mean I could show you the",
    "start": "347240",
    "end": "354160"
  },
  {
    "text": "example of uh the way it's implemented in Chrome for example so uh",
    "start": "354160",
    "end": "361360"
  },
  {
    "text": "y so if you look at this this is the implementation of uh local storage on",
    "start": "361600",
    "end": "366720"
  },
  {
    "text": "Google Chrome it starts with a storage dispatcher and if you look at this you",
    "start": "366720",
    "end": "372880"
  },
  {
    "text": "have stuff like get [Music]",
    "start": "372880",
    "end": "377580"
  },
  {
    "text": "item yeah so these are your familiar uh local storage methods right I mean uh on",
    "start": "379520",
    "end": "386240"
  },
  {
    "text": "local stage you do stuff like get item set item remove item Etc so these are",
    "start": "386240",
    "end": "391360"
  },
  {
    "text": "the ones that uh do your job so let's look at how it's actually implemented so",
    "start": "391360",
    "end": "396960"
  },
  {
    "text": "this is the this is the starting point where the browser hooks in it sort of creates an uh interprocess communication",
    "start": "396960",
    "end": "403000"
  },
  {
    "text": "hits these apis and then look at let's look at the actual implementation it's in it's in this file called dom dom",
    "start": "403000",
    "end": "409360"
  },
  {
    "text": "storage area and let's search for set item yeah that's what the set item is so",
    "start": "409360",
    "end": "416639"
  },
  {
    "text": "what what it does here is it sees that if there's a it does a lot of hous keeping here and after that there is",
    "start": "416639",
    "end": "422000"
  },
  {
    "text": "this very important line that you see as you see here it does not really",
    "start": "422000",
    "end": "427360"
  },
  {
    "text": "commit one uh item at a time it tries to batch it up and that's sort of good but",
    "start": "427360",
    "end": "433120"
  },
  {
    "text": "this batching is not guaranteed this batching does not mean it's completely asynchronous the UI thread still blocks",
    "start": "433120",
    "end": "439759"
  },
  {
    "text": "so it's not that as bad as a lot of people have portrayed it to be I mean it's not like one right or one disc hit",
    "start": "439759",
    "end": "445440"
  },
  {
    "text": "every bite it's probably a little bit better but not very better so yep that's",
    "start": "445440",
    "end": "451000"
  },
  {
    "text": "the problem with uh that's the problem with uh local",
    "start": "451000",
    "end": "456440"
  },
  {
    "text": "storage and let's look at how web SQL was implemented if I can get into okay looks",
    "start": "456440",
    "end": "462400"
  },
  {
    "text": "like I do not have the source code for it uh yeah I I'd probably skip this so",
    "start": "462400",
    "end": "468000"
  },
  {
    "text": "the way it works is uh uh web SQL the way it works is all it does is it gives",
    "start": "468000",
    "end": "473639"
  },
  {
    "text": "you a concept of uh a transaction and once you enter a transaction it'll TR",
    "start": "473639",
    "end": "480159"
  },
  {
    "text": "it'll take raw SQL statements from you and execute it be uh execute it directly to the SQL light engine uh the problem",
    "start": "480159",
    "end": "487639"
  },
  {
    "text": "with this is a specification was pretty much tied to one single uh product SQL",
    "start": "487639",
    "end": "493919"
  },
  {
    "text": "light is a product and if you were to tie a specification to just a single product that's kind of scary right",
    "start": "493919",
    "end": "499080"
  },
  {
    "text": "because a company like say Microsoft Microsoft probably could not put in SQL",
    "start": "499080",
    "end": "505080"
  },
  {
    "text": "light into their browser due to licensing issues or a company like Google that wanted more performance and",
    "start": "505080",
    "end": "512000"
  },
  {
    "text": "decided to switch to level DB instead of SQL light what would browsers Le that do and that's that's what uh triggered the",
    "start": "512000",
    "end": "519279"
  },
  {
    "text": "whole uh argument about not supporting web not supporting SQL light or web SQL",
    "start": "519279",
    "end": "524800"
  },
  {
    "text": "and moving to a smaller uh a lowest common denominator as people would call it so in fact the funny part here is",
    "start": "524800",
    "end": "532800"
  },
  {
    "text": "it's a it's websql is implemented in Safari it's implemented in Opera and Google Chrome firef Mozilla was very uh",
    "start": "532800",
    "end": "540640"
  },
  {
    "text": "was not very sure if it wanted to implement it though the sqlite engine was in was in Firefox and Microsoft",
    "start": "540640",
    "end": "546519"
  },
  {
    "text": "didn't want to implement it and that is what gave rise to the index DB in fact even the designers of the websql",
    "start": "546519",
    "end": "553320"
  },
  {
    "text": "specification realized that it's not going to work and this is the kind of uh a website that you see when you hit the",
    "start": "553320",
    "end": "559240"
  },
  {
    "text": "specification page I mean you have like this really black with yellow lines kind",
    "start": "559240",
    "end": "564279"
  },
  {
    "text": "of a warning and I'm not sure why anyone would want to continue using websql after they've gone to the specification",
    "start": "564279",
    "end": "570360"
  },
  {
    "text": "uh quick question how many of you here use websql already uh three four people yep uh I",
    "start": "570360",
    "end": "577680"
  },
  {
    "text": "think the biggest benefit that websql had is it's it was first to give give users a feel of what storage on the",
    "start": "577680",
    "end": "584279"
  },
  {
    "text": "browser looks like and it's actually pretty well implemented in a lot of good a lot of",
    "start": "584279",
    "end": "589440"
  },
  {
    "text": "browsers so that is that and then comes index DB so taking back to the same",
    "start": "589440",
    "end": "595440"
  },
  {
    "text": "concept of mode of Transport index DB is pro probably a heavy duty truck but what",
    "start": "595440",
    "end": "601680"
  },
  {
    "text": "the index TB authors specification authors wanted it to be was more of this",
    "start": "601680",
    "end": "607040"
  },
  {
    "text": "a truck that transforms to a robo I mean uh I'm probably setting the",
    "start": "607040",
    "end": "612079"
  },
  {
    "text": "expectations for index DB too high and it's probably not as powerful as this",
    "start": "612079",
    "end": "617640"
  },
  {
    "text": "but let's look uh I promise this is the last slide",
    "start": "617640",
    "end": "623360"
  },
  {
    "text": "before we write some real code so bear with me the slide tells you what exactly index DB is so first as I told you",
    "start": "623360",
    "end": "630440"
  },
  {
    "text": "indextv is a database in your browser it has synchronous and",
    "start": "630440",
    "end": "637760"
  },
  {
    "text": "asynchronous apis so index evv has call backs all all the way to the to the time",
    "start": "637760",
    "end": "643240"
  },
  {
    "text": "when you start a transaction to all the way to like when you read or write stuff or iterate over uh",
    "start": "643240",
    "end": "649079"
  },
  {
    "text": "elements it is transactional I mean that's expected of a database the only",
    "start": "649079",
    "end": "654120"
  },
  {
    "text": "problem is that it does not support SQL uh you have operations like get put",
    "start": "654120",
    "end": "659760"
  },
  {
    "text": "read update and stuff but there is no SQL and it is not relational which",
    "start": "659760",
    "end": "664920"
  },
  {
    "text": "basically means you can't have stuff like foreign Keys you can't have one table dependent on the other and in fact",
    "start": "664920",
    "end": "670680"
  },
  {
    "text": "there's no concept of tables and uh the security of indexdb I mean who can write read write data to",
    "start": "670680",
    "end": "677240"
  },
  {
    "text": "index DB who can read from index DB uh the specification didn't want to change anything here all they did was the same",
    "start": "677240",
    "end": "683399"
  },
  {
    "text": "security policy as uh cookies same domain people from the same domain can write to it people from the same domain",
    "start": "683399",
    "end": "689120"
  },
  {
    "text": "can read from it the location of the DB is also in your local in your user profile so anyone who knows the password",
    "start": "689120",
    "end": "695720"
  },
  {
    "text": "to your local machines user can access index DB uh they didn't want to invent",
    "start": "695720",
    "end": "700839"
  },
  {
    "text": "anything here and this is pretty much the standard in the browsers",
    "start": "700839",
    "end": "706040"
  },
  {
    "text": "so uh this is how index DB looks like uh what is",
    "start": "706040",
    "end": "711120"
  },
  {
    "text": "this it's a browser okay it's it's a representation of the",
    "start": "711120",
    "end": "716760"
  },
  {
    "text": "browser uh inside a browser we have a single database and inside this database",
    "start": "716760",
    "end": "722639"
  },
  {
    "text": "we have a concept called an object store this is very similar to a table inside a database so you can relate an object",
    "start": "722639",
    "end": "729040"
  },
  {
    "text": "store to something that looks like a table every uh every record in that is a",
    "start": "729040",
    "end": "735760"
  },
  {
    "text": "key and a value there are not multiple columns but but just two key is a column value is another I shouldn't really call",
    "start": "735760",
    "end": "742079"
  },
  {
    "text": "them columns as such but they just key value pairs in an in an object store just like what you would see on say",
    "start": "742079",
    "end": "747399"
  },
  {
    "text": "couch or Etc on values you can have indexes so",
    "start": "747399",
    "end": "753959"
  },
  {
    "text": "value is basically a Json object uh on this Jon object you'll have indexes and you can use a you can use",
    "start": "753959",
    "end": "761440"
  },
  {
    "text": "what is called a cursor to iterate over the over the individual keys and value pairs in an object store so you can have",
    "start": "761440",
    "end": "767440"
  },
  {
    "text": "a cursor on top of an object store or you can have a cursor on index you can have multiple databases",
    "start": "767440",
    "end": "774519"
  },
  {
    "text": "like this in the same domain so yep I know what you're thinking let's do",
    "start": "774519",
    "end": "781839"
  },
  {
    "text": "the demo U be oh yeah I have to do the demo so uh before I go in how many of you",
    "start": "781839",
    "end": "788000"
  },
  {
    "text": "here have heard of index TB or have looked at the index TB API that's actually a good number but",
    "start": "788000",
    "end": "794959"
  },
  {
    "text": "for uh there are also people who for who how many people here are hearing about",
    "start": "794959",
    "end": "800040"
  },
  {
    "text": "index DB API for the first time that's a decent number too so do you want me to go a little bit faster or",
    "start": "800040",
    "end": "806399"
  },
  {
    "text": "do you want me to go step by step what works step by step step by step works okay so yes let me show the demo when I",
    "start": "806399",
    "end": "815040"
  },
  {
    "text": "was doing the slides I was kind of sure that I would not be I I would skip to the next slide and that's why I put this empty slide",
    "start": "815040",
    "end": "821199"
  },
  {
    "text": "here so uh this is a simple uh tool that I wrote up that lets you look at what index DB is how do you start using index",
    "start": "821199",
    "end": "827920"
  },
  {
    "text": "DB so the thing at the top is basically the code are you guys able to read the code it's good right okay so this is how",
    "start": "827920",
    "end": "836560"
  },
  {
    "text": "you start using index DB uh the the problem with um and another question",
    "start": "836560",
    "end": "842399"
  },
  {
    "text": "when I select the text are you able to still read it okay so the problem with",
    "start": "842399",
    "end": "847560"
  },
  {
    "text": "index DB or problem with any vendor specific technology is you'll have to have this elaborate way to assign",
    "start": "847560",
    "end": "853880"
  },
  {
    "text": "window. index DB to all of this in fact it's been unprefixed in Firefox I've heard that iie will also be unpr",
    "start": "853880",
    "end": "859839"
  },
  {
    "text": "prefixing it in the final release of I 10 chrome should be following it very very soon so this is how you would uh",
    "start": "859839",
    "end": "867079"
  },
  {
    "text": "set up the index DB object and the problem with indextv is it's not a single object there are a couple of",
    "start": "867079",
    "end": "873040"
  },
  {
    "text": "other things that are uh exposed out say there's a concept called a key range and",
    "start": "873040",
    "end": "878959"
  },
  {
    "text": "what a key range does is when you iterate our object it it restricts the range of the iteration and that's pretty",
    "start": "878959",
    "end": "884839"
  },
  {
    "text": "much it and then transaction is self-explanatory uh when I when it says window. idb idb basically stands for",
    "start": "884839",
    "end": "891880"
  },
  {
    "text": "indexed DB so this is the prerequisites let me just run it let me clear the console this is",
    "start": "891880",
    "end": "899079"
  },
  {
    "text": "where you see the output and opening a database is very simple so",
    "start": "899079",
    "end": "905600"
  },
  {
    "text": "uh window. indexdb is the main basic starting object and on it you have this",
    "start": "905600",
    "end": "911680"
  },
  {
    "text": "method called the open method and the argument to that is going to be your uh database name so the database name here",
    "start": "911680",
    "end": "918440"
  },
  {
    "text": "is Bookshop one and I'm going to open it uh the only difference or the only",
    "start": "918440",
    "end": "923519"
  },
  {
    "text": "recurring pattern that you would see is the result of this is what indexdb calls",
    "start": "923519",
    "end": "928720"
  },
  {
    "text": "an idb request uh the concept of request is you will always get a request and to this",
    "start": "928720",
    "end": "935079"
  },
  {
    "text": "request you would attach events like on success on error on blocking",
    "start": "935079",
    "end": "940959"
  },
  {
    "text": "Etc so for index DB this is what you do so I I'm going to try opening the indextv uh database called Bookshop one",
    "start": "940959",
    "end": "948759"
  },
  {
    "text": "if I'm successful the database object is available as a result of this request",
    "start": "948759",
    "end": "955160"
  },
  {
    "text": "object there's a version that is available so uh just ignore this this variable called Dao because do is data",
    "start": "955160",
    "end": "962000"
  },
  {
    "text": "access object and uh I'm just using it so that I can have a global reference to or this is like my Global variable",
    "start": "962000",
    "end": "967440"
  },
  {
    "text": "because I I'm going to have multiple examples so db. version would be the",
    "start": "967440",
    "end": "972680"
  },
  {
    "text": "version and then once I have this there are other things that I'm there are other things that I can do with it I",
    "start": "972680",
    "end": "979040"
  },
  {
    "text": "will quickly explain them but if you if you look at it so that that on success was one the second method that I'm I'm",
    "start": "979040",
    "end": "985880"
  },
  {
    "text": "attaching to is called on upgrade needed on upgrade needed basically is a very",
    "start": "985880",
    "end": "991680"
  },
  {
    "text": "simple mechanism for you to catch the fact that you are upgrading your database versions so if you have opened",
    "start": "991680",
    "end": "998519"
  },
  {
    "text": "it so by default the database version opens at version one if a database doesn't exist it's get it gets created",
    "start": "998519",
    "end": "1004160"
  },
  {
    "text": "at version one if you do not specify anything it opens it at the latest version however if you really do specify",
    "start": "1004160",
    "end": "1010360"
  },
  {
    "text": "a version and the version is greater than the version version of the database it will fire the on upgrade event and",
    "start": "1010360",
    "end": "1016480"
  },
  {
    "text": "this is the place where you create all your schemas where you create all your object stores all your indexes and stuff like",
    "start": "1016480",
    "end": "1022720"
  },
  {
    "text": "that so what what I'm doing here is U let me quickly go back to the on success",
    "start": "1022720",
    "end": "1028400"
  },
  {
    "text": "and tell you what I'm doing so this is the on success method I'm I'm saving the",
    "start": "1028400",
    "end": "1033839"
  },
  {
    "text": "DB result and I'm saving the DB which I probably use for for doing other things",
    "start": "1033839",
    "end": "1039000"
  },
  {
    "text": "and then I'm also catching a handle called uh db. on version change I'm just",
    "start": "1039000",
    "end": "1044600"
  },
  {
    "text": "notifying to myself that there has been a version change so put it up uh so no not you I the way it could be is that",
    "start": "1044600",
    "end": "1051880"
  },
  {
    "text": "there are two tabs open and one of them tries to upgrade the version while the other one doesn't so this way I can I",
    "start": "1051880",
    "end": "1057039"
  },
  {
    "text": "can know that there's some other guy in in another tab with the same URL who's trying to open who's trying to upgrade",
    "start": "1057039",
    "end": "1062320"
  },
  {
    "text": "the index DB API and I probably have to close myself so that he is not blocked because version upgrade transactions are",
    "start": "1062320",
    "end": "1069320"
  },
  {
    "text": "always blocking only one person at a time can upgrade the",
    "start": "1069320",
    "end": "1074039"
  },
  {
    "text": "version so uh this is how you upgrade it so if you have said that the database in your disk is database version one and",
    "start": "1075240",
    "end": "1082360"
  },
  {
    "text": "you want to upgrade it to database version two this is exactly what you would do uh when you are doing it you would",
    "start": "1082360",
    "end": "1088720"
  },
  {
    "text": "get a transaction and here you would put in the comments or you would put in all your content for what you want to do",
    "start": "1088720",
    "end": "1094400"
  },
  {
    "text": "when when you're upgrading stuff and of course there's an on error which tells you that there has been some error",
    "start": "1094400",
    "end": "1099799"
  },
  {
    "text": "probably you couldn't write to the disk file or probably you couldn't read it and stuff like that and the final one is",
    "start": "1099799",
    "end": "1105080"
  },
  {
    "text": "on blocked which tells you that someone else has opened the database so so you can't open it yet you're probably trying",
    "start": "1105080",
    "end": "1110520"
  },
  {
    "text": "to open it for say for say upgrade but someone else has already opened it and someone else is writing to it so you're",
    "start": "1110520",
    "end": "1116039"
  },
  {
    "text": "going to be blocked uh any questions still now yeah so isn't this local to your machine uh",
    "start": "1116039",
    "end": "1122679"
  },
  {
    "text": "the question is is this not local to your machine uh this is local to your machine the the problem is if if it's if",
    "start": "1122679",
    "end": "1129440"
  },
  {
    "text": "a page is opened in two tabs and both of them are trying to write to the database so they wanted to ensure that this is",
    "start": "1129440",
    "end": "1135039"
  },
  {
    "text": "taken care of and that this is exactly how they do it so let me go ahead head and so this open database doesn't really",
    "start": "1135039",
    "end": "1141280"
  },
  {
    "text": "do anything so let me try opening a database with a version that is plus one so what I do here is the exact same",
    "start": "1141280",
    "end": "1148760"
  },
  {
    "text": "thing window. index db. open and the version here that I specify is whatever",
    "start": "1148760",
    "end": "1154120"
  },
  {
    "text": "version exists plus one so this is probably going to open it at version",
    "start": "1154120",
    "end": "1159440"
  },
  {
    "text": "two uh I'm doing the exact same thing uh capturing the on version uh",
    "start": "1159440",
    "end": "1164720"
  },
  {
    "text": "Handler Etc the only difference is on upgrade needed I would be writing",
    "start": "1164720",
    "end": "1170960"
  },
  {
    "text": "extra code for upgrade needed so let me actually write up some code and try to create some Object Store so let me go to",
    "start": "1170960",
    "end": "1176600"
  },
  {
    "text": "that example and this is what I would insert into the upgrade needed method so what I",
    "start": "1176600",
    "end": "1182919"
  },
  {
    "text": "do is I create an object store this is exact this is very similar to the SQL way of creating tables uh instead of",
    "start": "1182919",
    "end": "1190080"
  },
  {
    "text": "specifying the column names here you specify what a key path is so what you do is there's a concept of a key path",
    "start": "1190080",
    "end": "1197000"
  },
  {
    "text": "and what this does is you so uh when I said you could store key value pairs in an index DB database",
    "start": "1197000",
    "end": "1204760"
  },
  {
    "text": "what you could do is you could give it Json objects and you can tell index DB to find out what the key automatically",
    "start": "1204760",
    "end": "1210600"
  },
  {
    "text": "is so imagine that in this case I want to store an object that has an ID and I want to call the ID primary key that's",
    "start": "1210600",
    "end": "1216880"
  },
  {
    "text": "what I specify here in keypath also I can say that it can be automatically incremented just like my",
    "start": "1216880",
    "end": "1223280"
  },
  {
    "text": "SQL uh the other thing to notice is if I do not specify this an internal key internal primary key is used and uh that",
    "start": "1223280",
    "end": "1230360"
  },
  {
    "text": "should be PR uh that should be fine so what I'd be doing in this example is just creating an object store and run uh",
    "start": "1230360",
    "end": "1236400"
  },
  {
    "text": "and running it so let me put this part of code inside the earlier upgrade I click on this load prerequisits and uh",
    "start": "1236400",
    "end": "1244400"
  },
  {
    "text": "what happened to the code is look at this so the on upgrade method on upgrade",
    "start": "1244400",
    "end": "1251039"
  },
  {
    "text": "needed got populated with the code that I was showing you any questions is this",
    "start": "1251039",
    "end": "1256559"
  },
  {
    "text": "clear so I hit run looks like there was an issue so let",
    "start": "1256559",
    "end": "1264120"
  },
  {
    "text": "me try again oh looks like I i' had already run this example once so the object store already existed and that's",
    "start": "1264120",
    "end": "1270679"
  },
  {
    "text": "why it didn't run properly so assuming that this this example did run and the database version is at five what I'll",
    "start": "1270679",
    "end": "1277600"
  },
  {
    "text": "have is I'll now have an object store that is called this Object Store underscore book list in a database",
    "start": "1277600",
    "end": "1285720"
  },
  {
    "text": "called what is the name of the database Bookshop one yeah that's how it is so um",
    "start": "1285720",
    "end": "1293080"
  },
  {
    "text": "let me go to this part where I probably delete the object store delete is very Sim similar all I",
    "start": "1293080",
    "end": "1299919"
  },
  {
    "text": "have to do is on the upgrade method so I have the upgrade method",
    "start": "1299919",
    "end": "1305799"
  },
  {
    "text": "here and in this all I do is say delete object store so I run this",
    "start": "1305799",
    "end": "1313240"
  },
  {
    "text": "Object Store was deleted I clear my console and try creating it again and now it says object store has been",
    "start": "1313240",
    "end": "1318320"
  },
  {
    "text": "created uh once the object store has been created let's look at what are the",
    "start": "1318320",
    "end": "1324159"
  },
  {
    "text": "object stores available and the best way to look at it is in this object called db. Object Store names so let me put",
    "start": "1324159",
    "end": "1330720"
  },
  {
    "text": "this part so one thing if you have noticed is because of all the SC backs",
    "start": "1330720",
    "end": "1335919"
  },
  {
    "text": "my the amount of code that I have to write like really lengthens up so if I now really want to see what are the different databases I have to still use",
    "start": "1335919",
    "end": "1342320"
  },
  {
    "text": "the open method I have to use the db. on request and here I had to say DB do Object Store names so let let me do that",
    "start": "1342320",
    "end": "1349720"
  },
  {
    "text": "let me quickly type it up like it's magic and yep there you go db. Object Store",
    "start": "1349720",
    "end": "1357720"
  },
  {
    "text": "names is available inside this method called on success so when on success is called I'll know how many how many",
    "start": "1357720",
    "end": "1363080"
  },
  {
    "text": "object stores are there let me clear the console and run it again and it says this is the list of object stores which",
    "start": "1363080",
    "end": "1369679"
  },
  {
    "text": "is basically printing this this line and if I click on it it says",
    "start": "1369679",
    "end": "1376000"
  },
  {
    "text": "there's an old book list I was also creating I I also created uh two",
    "start": "1376000",
    "end": "1381279"
  },
  {
    "text": "existing database uh two existing things called Old book list and temp book list just for examples but this was the",
    "start": "1381279",
    "end": "1386320"
  },
  {
    "text": "object store that was created so there are three object stores in total this is the one that we just created so let me",
    "start": "1386320",
    "end": "1391520"
  },
  {
    "text": "try deleting it and let me run the list",
    "start": "1391520",
    "end": "1397640"
  },
  {
    "text": "again it just has two now so let me create it again for the",
    "start": "1398880",
    "end": "1404799"
  },
  {
    "text": "sake of the example and let me show you the basic operation that you're probably waiting",
    "start": "1404799",
    "end": "1410200"
  },
  {
    "text": "for let's add data so um this is how the uh how adding",
    "start": "1410200",
    "end": "1417559"
  },
  {
    "text": "data looks like this is basically my my data data data object uh it has a book name author Etc",
    "start": "1417559",
    "end": "1424760"
  },
  {
    "text": "it also has a thing called an ID and remember this is the primary key so I'm just setting a unique ID which is the",
    "start": "1424760",
    "end": "1430200"
  },
  {
    "text": "time right now and when I want to save it all I do is object store.",
    "start": "1430200",
    "end": "1435960"
  },
  {
    "text": "add and how do I get an object store I get an object store when I open it so in",
    "start": "1435960",
    "end": "1442120"
  },
  {
    "text": "My Success method of the database open I do transaction doob store this basically opens an object store for me uh I not",
    "start": "1442120",
    "end": "1449720"
  },
  {
    "text": "spoken about transactions yet uh I will get into it in the next example uh quick question um am I going too slow or is it",
    "start": "1449720",
    "end": "1457240"
  },
  {
    "text": "fine or is it uh do do you need me to speed up okay uh give me a minute",
    "start": "1457240",
    "end": "1465600"
  },
  {
    "text": "that's kind of annoying so um let's look at transactions uh in index TB there are",
    "start": "1469600",
    "end": "1476480"
  },
  {
    "text": "three kinds of transactions re uh or let me ask you this question what do you think are the different kinds of",
    "start": "1476480",
    "end": "1481679"
  },
  {
    "text": "transactions in indextv or what do you think are the different possible kinds of transaction for a",
    "start": "1481679",
    "end": "1487520"
  },
  {
    "text": "database what's that update update is one uh okay so uh when you're updating",
    "start": "1487520",
    "end": "1494360"
  },
  {
    "text": "is it like yeah it's a get or set so it's basically you either read or you basically write so it's a read only or",
    "start": "1494360",
    "end": "1501720"
  },
  {
    "text": "it's read and write together and that's what you expect from all databases index GB pretty much does the same there's",
    "start": "1501720",
    "end": "1508080"
  },
  {
    "text": "just this extra transaction called upgrade which is called a version transaction you need it because uh you",
    "start": "1508080",
    "end": "1513840"
  },
  {
    "text": "need to ensure that only one guy can uh change the version for the read transaction multiple people can read for",
    "start": "1513840",
    "end": "1520279"
  },
  {
    "text": "a write transaction one person writes at a time and when a right trans transaction is on readers will not be",
    "start": "1520279",
    "end": "1526760"
  },
  {
    "text": "able to read it and that's like pretty pretty much uh regular database rules so adding",
    "start": "1526760",
    "end": "1533799"
  },
  {
    "text": "data this is irritating probably going to switch it",
    "start": "1533799",
    "end": "1541520"
  },
  {
    "text": "off so um yeah about trying to save it all I do",
    "start": "1541520",
    "end": "1548159"
  },
  {
    "text": "is Windows Phone 7 finally it's hard to silence it yeah",
    "start": "1548159",
    "end": "1555480"
  },
  {
    "text": "so uh all I'm able all all I'll have to do is construct my Json object or JavaScript object have an ID and say",
    "start": "1555480",
    "end": "1564120"
  },
  {
    "text": "save or say add so let me show you how this looks in the whole in the whole",
    "start": "1564120",
    "end": "1569919"
  },
  {
    "text": "entire scheme of things where I have to like really open a database and stuff so it's let me copy this code and put it in",
    "start": "1569919",
    "end": "1576320"
  },
  {
    "text": "notepad so that you can see it better all at once so this is the amount of code that I have to write for adding",
    "start": "1576320",
    "end": "1583679"
  },
  {
    "text": "data I know it's kind of long but it's all repetitive so what you have to do is",
    "start": "1583679",
    "end": "1589080"
  },
  {
    "text": "on the success uh all this is uh the regular things that we saw so when when the",
    "start": "1589080",
    "end": "1595080"
  },
  {
    "text": "database open is successful create a new transaction when the transaction goes on",
    "start": "1595080",
    "end": "1601799"
  },
  {
    "text": "or on so I'm just handling these things saying if a transaction is complete show me what's happening if a transaction is",
    "start": "1601799",
    "end": "1606919"
  },
  {
    "text": "abouted show me what happen What Happens Etc and then uh in the transaction I",
    "start": "1606919",
    "end": "1612039"
  },
  {
    "text": "open an object store",
    "start": "1612039",
    "end": "1615720"
  },
  {
    "text": "and then I finally add data like this so what are the steps first step is open",
    "start": "1618559",
    "end": "1624200"
  },
  {
    "text": "the database open a transaction open an object store and then write data these the these are pretty much four steps for",
    "start": "1624200",
    "end": "1630840"
  },
  {
    "text": "adding data to index DB so load prerequisites run and transaction and",
    "start": "1630840",
    "end": "1636279"
  },
  {
    "text": "the database is saved getting is pretty much similar I'm going to quickly R run",
    "start": "1636279",
    "end": "1641480"
  },
  {
    "text": "through this all you have to do is get and you need the object ID that you want to get so",
    "start": "1641480",
    "end": "1648720"
  },
  {
    "text": "run looks like object ID was not",
    "start": "1648720",
    "end": "1653039"
  },
  {
    "text": "found it's probably some exam error in the example so",
    "start": "1653799",
    "end": "1659440"
  },
  {
    "text": "uh okay looks like there was some issue with the example but yeah get get effectively is you get it by an object",
    "start": "1659440",
    "end": "1666000"
  },
  {
    "text": "ID modify basically means do not add data but update if it exists delete I'm",
    "start": "1666000",
    "end": "1671840"
  },
  {
    "text": "sure self-explanatory count gives you a count of all the all the objects this is",
    "start": "1671840",
    "end": "1678640"
  },
  {
    "text": "actually a kind of disputed method because it was not implemented in Chrome earlier people are not sure if it's a good idea to get all the data at once",
    "start": "1678640",
    "end": "1685480"
  },
  {
    "text": "because this probably is going to give you all the objects which could be huge right so this people are not really sure if this is going to be a good idea still",
    "start": "1685480",
    "end": "1692159"
  },
  {
    "text": "under dispute and finally a very simple method to clear out all the hard work that you did clear and everything in",
    "start": "1692159",
    "end": "1699120"
  },
  {
    "text": "that in that Object Store is done is gone so those are the basic crowd operations create update delete and read",
    "start": "1699120",
    "end": "1707600"
  },
  {
    "text": "and let's look at at just two more Concepts before we go back and recap the whole chunk of what we learned here so",
    "start": "1707600",
    "end": "1715039"
  },
  {
    "text": "uh if you want to iterate over objects you use what you use a concept called a cursor and using a cursor is",
    "start": "1715039",
    "end": "1722279"
  },
  {
    "text": "very simple you call the open cursor method on an object store and specify the",
    "start": "1722279",
    "end": "1728279"
  },
  {
    "text": "range it's kind of an interesting way where you specify the range because the bounding here is lower bound upper bound",
    "start": "1728279",
    "end": "1735159"
  },
  {
    "text": "should it be inclusive of the lower bound comma should it be inclusive of the upper bound and the one here is",
    "start": "1735159",
    "end": "1740200"
  },
  {
    "text": "Direction it shouldn't actually be one it should be uh so one may not work because earlier index GB had numeric",
    "start": "1740200",
    "end": "1747200"
  },
  {
    "text": "constants but as the spec matured they they want they did away with numeric constants and now use stuff like this",
    "start": "1747200",
    "end": "1754519"
  },
  {
    "text": "like previous or next so uh let's so this is how so what",
    "start": "1754519",
    "end": "1761559"
  },
  {
    "text": "you do is when you open a cursor you get an object and in that object you can do things like continue and cursor.",
    "start": "1761559",
    "end": "1768880"
  },
  {
    "text": "continue would effectively continue iterating through object through through object one at a time it's like the",
    "start": "1768880",
    "end": "1774799"
  },
  {
    "text": "jQuery each method that's the simplest uh comparison so let me try seeing what",
    "start": "1774799",
    "end": "1780200"
  },
  {
    "text": "this does I load the prerequisits again to get the whole uh boiler plate code I",
    "start": "1780200",
    "end": "1786279"
  },
  {
    "text": "hit run and of course as I told you the one will not work there so I'll have to call",
    "start": "1786279",
    "end": "1793399"
  },
  {
    "text": "this previous",
    "start": "1793399",
    "end": "1796679"
  },
  {
    "text": "it's",
    "start": "1800039",
    "end": "1802320"
  },
  {
    "text": "weird y so if you saw that I omitted the uh value because the default is next and",
    "start": "1809880",
    "end": "1815559"
  },
  {
    "text": "what I saw here was the two objects that I inserted I'm able to it iterate through them and what happens is it say",
    "start": "1815559",
    "end": "1821320"
  },
  {
    "text": "this is what is getting printed it says if the value of cursor exists then print it and then cursor do continue and if it",
    "start": "1821320",
    "end": "1828760"
  },
  {
    "text": "doesn't exist just break out of the loop it's not really a loop but a call back recursive call back function but that's",
    "start": "1828760",
    "end": "1834320"
  },
  {
    "text": "what a cursor does and using a cursor you can limit it limit it to say uh just",
    "start": "1834320",
    "end": "1840279"
  },
  {
    "text": "pick up numbers between uh uh digit X and digit y or pick up all uh names",
    "start": "1840279",
    "end": "1846320"
  },
  {
    "text": "between characters a to character Z Etc so that's pretty much what cursor is and while you're iterating you can do other",
    "start": "1846320",
    "end": "1852440"
  },
  {
    "text": "interesting things like you can delete uh so while while you're iterating through a cursor you can update the",
    "start": "1852440",
    "end": "1858799"
  },
  {
    "text": "value of the current object or you can probably delete it uh the final concept of index DB as I",
    "start": "1858799",
    "end": "1866320"
  },
  {
    "text": "told you was indexes the idea of an index is if you saw the object",
    "start": "1866320",
    "end": "1872480"
  },
  {
    "text": "here when I was trying to add a data this is how my object looks like and all I can do right now with ranges is",
    "start": "1872480",
    "end": "1878799"
  },
  {
    "text": "probably sort on ID what if I wanted to sort on price the best way to accomplish",
    "start": "1878799",
    "end": "1883880"
  },
  {
    "text": "this is make price an index and what it'll do is that's probably what I'm doing in the",
    "start": "1883880",
    "end": "1890039"
  },
  {
    "text": "example where yeah I create price as an index so this is the name of the index",
    "start": "1890039",
    "end": "1895679"
  },
  {
    "text": "this is the property on which it should be indexed and there are these two flags that says that the index must be unique",
    "start": "1895679",
    "end": "1901960"
  },
  {
    "text": "and this property tells you what if the index what if the property is an array what should you do about it so by",
    "start": "1901960",
    "end": "1907840"
  },
  {
    "text": "default multi-entry is true I don't want to go into the details of multi-entry right now but if you think you can you're going to use a database that's",
    "start": "1907840",
    "end": "1913799"
  },
  {
    "text": "going to be indexed on NRA uh we can chat about it after the session so so let me try creating an index I run all",
    "start": "1913799",
    "end": "1920720"
  },
  {
    "text": "the prerequisites which means uh all of this is in the upgrade method that's where I have to create an",
    "start": "1920720",
    "end": "1927039"
  },
  {
    "text": "index and I hit run and it should be created so let me list all the indexes listing again is like very similar to",
    "start": "1927039",
    "end": "1932919"
  },
  {
    "text": "listing database names instead of saying Object Store names I say index names and I load pre prequest so that it's",
    "start": "1932919",
    "end": "1940000"
  },
  {
    "text": "inserted into the on success this is the on success",
    "start": "1940000",
    "end": "1945679"
  },
  {
    "text": "and it's kind of inserted uh after transactions after the object store",
    "start": "1945679",
    "end": "1953000"
  },
  {
    "text": "here here and I hit run and there are there's one index on",
    "start": "1953000",
    "end": "1958320"
  },
  {
    "text": "the object store it's called price index uh opening an index is very very",
    "start": "1958320",
    "end": "1963880"
  },
  {
    "text": "similar to opening a cursor all you do is object store. Index this opens the index and once you open the index you",
    "start": "1963880",
    "end": "1970200"
  },
  {
    "text": "can open a cursor on top of it and continue iterating so the concepts are very similar and that's pretty much what",
    "start": "1970200",
    "end": "1976120"
  },
  {
    "text": "index DB is uh that's the end of the code session so",
    "start": "1976120",
    "end": "1981559"
  },
  {
    "text": "quick recap I I I know this is like a lot of data and we've spent like half an hour just on code so I thought a quick",
    "start": "1981559",
    "end": "1988120"
  },
  {
    "text": "recap helps so uh is everyone okay with this create",
    "start": "1988120",
    "end": "1993360"
  },
  {
    "text": "databases fine we did this right we also created a transaction",
    "start": "1993360",
    "end": "2000320"
  },
  {
    "text": "there are three types of transaction read write read and version transaction we can add objects to Object",
    "start": "2000320",
    "end": "2006320"
  },
  {
    "text": "Store I showed you a very simple example we can read objects from an object store we can iterate over them using cursors",
    "start": "2006320",
    "end": "2013519"
  },
  {
    "text": "there were question about can you offset yes you can offset there's also question about how many objects can you get back",
    "start": "2013519",
    "end": "2018720"
  },
  {
    "text": "yes there is a way to get the count can you do indexes yes you can and do you guys want to see how it",
    "start": "2018720",
    "end": "2025639"
  },
  {
    "text": "how it's actually done under the covers do you want to see the browser implementations how many yeses how many",
    "start": "2025639",
    "end": "2033760"
  },
  {
    "text": "NOS okay so let's let's look at what exactly happens under the covers so",
    "start": "2033760",
    "end": "2038880"
  },
  {
    "text": "Firefox uses uh SQ light to perform index DB which is kind of funny because Chrome uses SQ light to perform websql",
    "start": "2038880",
    "end": "2046240"
  },
  {
    "text": "and sqlite is supposed to do that but Firefox uses it for index DB and chrome now uses this faster database called",
    "start": "2046240",
    "end": "2053440"
  },
  {
    "text": "level DB I mean if you were to run sqlite and level DB on say something like a node server level DB does perform",
    "start": "2053440",
    "end": "2059878"
  },
  {
    "text": "a lot faster than sqlite let's look at uh the implementation of say Firefox so uh the first question",
    "start": "2059879",
    "end": "2067720"
  },
  {
    "text": "question that everyone asks is where is all my data stored the data is all stored at this",
    "start": "2067720",
    "end": "2074560"
  },
  {
    "text": "location uh it's in your profiles folder if you go into your actual profile there's this folder called index DB just",
    "start": "2074560",
    "end": "2080839"
  },
  {
    "text": "get into that and every domain will have a have a folder and all the databases that you use will be used here uh the",
    "start": "2080839",
    "end": "2088358"
  },
  {
    "text": "naming is a little bit different because there's a lot of encoding happening and let's get into the Firefox code to see why that encoding happens but the first",
    "start": "2088359",
    "end": "2095320"
  },
  {
    "text": "question is can we read this I mean this is a sqlite file right it's a simple sqlite file so let me fire up a sqlite editor or",
    "start": "2095320",
    "end": "2102480"
  },
  {
    "text": "sqlite manager sqlite manager opens up I have",
    "start": "2102480",
    "end": "2110079"
  },
  {
    "text": "to open my database file which is located at this",
    "start": "2110079",
    "end": "2115400"
  },
  {
    "text": "location that's the file so I've loaded up my database into a database editor and this is how it looks like sqlite",
    "start": "2116119",
    "end": "2123079"
  },
  {
    "text": "still follows the world of tables and if you look at the tables there's a table called database",
    "start": "2123079",
    "end": "2128560"
  },
  {
    "text": "and inside this is this is kind of a housekeeping table which tells you the",
    "start": "2128560",
    "end": "2134480"
  },
  {
    "text": "which lists the different object stores inside index DB so we had one we have one database called Bookshop and inside",
    "start": "2134480",
    "end": "2141280"
  },
  {
    "text": "this book Bookshop we have like uh different object stores we had this object store called bookstore",
    "start": "2141280",
    "end": "2149000"
  },
  {
    "text": "booklist also all of the object data is stored here and it's kind of encoded so",
    "start": "2149000",
    "end": "2154640"
  },
  {
    "text": "the data itself is a blob it's not like it's not stored at as a string it's actually uh converted to a blob using uh",
    "start": "2154640",
    "end": "2161560"
  },
  {
    "text": "an algorithm called structured cloning algorithm that ensures that it can only store things like uh uh JavaScript",
    "start": "2161560",
    "end": "2168560"
  },
  {
    "text": "literals and not stuff like Dom nodes I mean in in a Json object you can actually have Dom node references you can have function references right but",
    "start": "2168560",
    "end": "2175200"
  },
  {
    "text": "those cannot be serialized so structured cloning algorithm is kind of a serializer and that's how it's told and",
    "start": "2175200",
    "end": "2180760"
  },
  {
    "text": "then you have keys I'm actually surprised no one asked what are the different types of keys that you can store I mean JavaScript is not an the",
    "start": "2180760",
    "end": "2187720"
  },
  {
    "text": "JavaScript is not an untyped language it's still Loosely typed which means you have a number type you have a or number",
    "start": "2187720",
    "end": "2193720"
  },
  {
    "text": "or long type you have a string type you have an array you have an object right so what are the permissible values of",
    "start": "2193720",
    "end": "2199920"
  },
  {
    "text": "keys funny part all of these are permissible and indexdb specification actually tells you that n when you are",
    "start": "2199920",
    "end": "2206480"
  },
  {
    "text": "comparing a number key versus a string key a number key should probably come first when you are say comparing an array with a a string a string comes",
    "start": "2206480",
    "end": "2213920"
  },
  {
    "text": "first so it does this whole key encoding kind of a thing and in fact let's actually look at Firefox uh the source",
    "start": "2213920",
    "end": "2220119"
  },
  {
    "text": "code of Firefox so this is in the Dom so if you ever synced the Firefox uh",
    "start": "2220119",
    "end": "2226119"
  },
  {
    "text": "repository it's in the Dom folder and it's called index DB and all of index DB files basic files are here so let's look",
    "start": "2226119",
    "end": "2233560"
  },
  {
    "text": "at key. CPP yeah let's look at this place where the actual key encoding",
    "start": "2233560",
    "end": "2239560"
  },
  {
    "text": "happens uh is the font okay are you able to read it so here's what uh they use",
    "start": "2239560",
    "end": "2245119"
  },
  {
    "text": "for encoding keys they say if it's numbers it's encoded like this if it's dates it's dates is another data type",
    "start": "2245119",
    "end": "2251599"
  },
  {
    "text": "right so if it's dates it's encoded like this if it's string it's encoded like this if it's arrays it's encoded like",
    "start": "2251599",
    "end": "2256960"
  },
  {
    "text": "this and then they they talk about what happens when there because an an array",
    "start": "2256960",
    "end": "2262119"
  },
  {
    "text": "can have multiple elements in it so what happens when variable length encoding has to happen this is actually pretty complex and the comments are actually",
    "start": "2262119",
    "end": "2268000"
  },
  {
    "text": "pretty good they're very well written effectively telling you how Firefox exactly implements key uh converting",
    "start": "2268000",
    "end": "2274319"
  },
  {
    "text": "keys to that uh weird value that you saw in index DV so how is a string how is a",
    "start": "2274319",
    "end": "2279359"
  },
  {
    "text": "date object converted to this exactly that's the place that tells you",
    "start": "2279359",
    "end": "2284400"
  },
  {
    "text": "this uh it may be hard for me to go at look at every single one of these files but to give you a quick uh idea the",
    "start": "2284400",
    "end": "2292040"
  },
  {
    "text": "place you should probably start with is uh say file. hge or file manager which tells you where the thing is stored you",
    "start": "2292040",
    "end": "2297560"
  },
  {
    "text": "can look at stuff like idb database. CPP which tells you which deals with the database object there should be a",
    "start": "2297560",
    "end": "2303839"
  },
  {
    "text": "factory object also yeah there's an idb Factory that deals with the do open method and then there are key ranges",
    "start": "2303839",
    "end": "2310800"
  },
  {
    "text": "there are indexes these are not very hard to read they're all in C++ and now that you know the location and you know",
    "start": "2310800",
    "end": "2316520"
  },
  {
    "text": "how it exactly works you can look at you can actually look at SQL statement and see how this how all of your object",
    "start": "2316520",
    "end": "2323280"
  },
  {
    "text": "store or how a get or a put gets converted to a SQL light language do you also want to see how it",
    "start": "2323280",
    "end": "2329280"
  },
  {
    "text": "looks on Chrome or can we skip skip that over it's pretty much similar in fact Chrome uses level DB same story about",
    "start": "2329280",
    "end": "2336280"
  },
  {
    "text": "creating tables same same same ideas about encoding keys in fact it's actually very similar and uh yep and",
    "start": "2336280",
    "end": "2342520"
  },
  {
    "text": "that's that's how it looks like so some of the interesting things are like the way it kind of throws exceptions and uh",
    "start": "2342520",
    "end": "2350040"
  },
  {
    "text": "it's actually a pretty long file yeah the way the ranges are returned and the different range methods and all so if you if you have a question about index",
    "start": "2350040",
    "end": "2356160"
  },
  {
    "text": "GB or if you want to like really think about performance of index GB say versus say websql this is probably the right",
    "start": "2356160",
    "end": "2362040"
  },
  {
    "text": "place to look at it and you'll know why exactly is your or where is the bottleneck for index TV and for all you",
    "start": "2362040",
    "end": "2367200"
  },
  {
    "text": "know you may just have to tweak your JavaScript uh the way you're doing your index DB JavaScript and it'll work",
    "start": "2367200",
    "end": "2373839"
  },
  {
    "text": "fine so back to the presentation uh I showed you housekeeping tables right the the place",
    "start": "2373839",
    "end": "2380359"
  },
  {
    "text": "where the database entities are stored and the way it looks like on the sqlite manager so this is so all objects are",
    "start": "2380359",
    "end": "2386920"
  },
  {
    "text": "stored at one place this is the object Store where all of my objects regardless of which table they are are stored",
    "start": "2386920",
    "end": "2394078"
  },
  {
    "text": "here and then uh there are indexes and then this unique unique index data",
    "start": "2394520",
    "end": "2400000"
  },
  {
    "text": "tells me if there's a unique index remember I had this called thing called price index with the price that's stored",
    "start": "2400000",
    "end": "2406240"
  },
  {
    "text": "here and it also has uh triggers sqlite allows triggers and it has some triggers like what happens when an object store",
    "start": "2406240",
    "end": "2412800"
  },
  {
    "text": "has to be deleted so it says after an object store is deleted remove the file and change it",
    "start": "2412800",
    "end": "2419040"
  },
  {
    "text": "you know why we have to do this it's in we have to do this because sqlite doesn't have a simple capability to",
    "start": "2419040",
    "end": "2424319"
  },
  {
    "text": "delete a column so we we that's the reason why the database is kind of getting copied over and stuff like that so you have a",
    "start": "2424319",
    "end": "2431800"
  },
  {
    "text": "trigger for insert you have a trigger for update and this is this is pretty much behind the covers of what what exactly",
    "start": "2431800",
    "end": "2437680"
  },
  {
    "text": "happens so uh everyone okay with indexdb",
    "start": "2437680",
    "end": "2442720"
  },
  {
    "text": "API looks good what do you guys think is it good bad ugly how many think index DB API is",
    "start": "2442720",
    "end": "2451319"
  },
  {
    "text": "awesome wow not a single person how many think it how many of you think it's awful it's horrible",
    "start": "2451319",
    "end": "2459240"
  },
  {
    "text": "one how many would want to use it for the real daily projects let me put it that",
    "start": "2459599",
    "end": "2465280"
  },
  {
    "text": "way how many would prefer a better API okay and there were a lot of people",
    "start": "2465280",
    "end": "2471040"
  },
  {
    "text": "who didn't raise their hands what does that uh denote don't",
    "start": "2471040",
    "end": "2476800"
  },
  {
    "text": "care so uh there are there are problems with indexdb I mean uh specification is",
    "start": "2477079",
    "end": "2482760"
  },
  {
    "text": "almost Frozen but uh implementations are catching up one of the most recent Chang es was Google Chrome so there was no on",
    "start": "2482760",
    "end": "2489640"
  },
  {
    "text": "upgrade needed method before that you had to do manually on you had to manually set the version and that",
    "start": "2489640",
    "end": "2495400"
  },
  {
    "text": "changed to on upgrade needed Google Chrome Canary just caught up with it uh using the constant read underscore only",
    "start": "2495400",
    "end": "2502000"
  },
  {
    "text": "versus the string constant read only remember that cursor example I showed you where I had to manually say p",
    "start": "2502000",
    "end": "2508000"
  },
  {
    "text": "instead of one these are the these are some of the quirks that we still have how many of you agree to",
    "start": "2508000",
    "end": "2515359"
  },
  {
    "text": "this a lot of people yep it's too much code for an ad ad operation I mean I still have a notepad",
    "start": "2515359",
    "end": "2521240"
  },
  {
    "text": "open so there you go this is like almost 100 lines of code with empty",
    "start": "2521240",
    "end": "2528880"
  },
  {
    "text": "lines for a simple put operation that's kind of painful biggest problem no support for",
    "start": "2528880",
    "end": "2535720"
  },
  {
    "text": "queries how do you search more importantly how do you sort through items what about colls what",
    "start": "2535720",
    "end": "2542640"
  },
  {
    "text": "about different languages the specification interestingly has not specified that very well",
    "start": "2542640",
    "end": "2547680"
  },
  {
    "text": "and basic question what about full teex search uh the funny part is all these",
    "start": "2547680",
    "end": "2552760"
  },
  {
    "text": "questions have also been raised at the committee and the indextv specification committee apparently says that let's get",
    "start": "2552760",
    "end": "2558440"
  },
  {
    "text": "a specific spec one version one out and we can all the add all these later because it's very hard to get companies",
    "start": "2558440",
    "end": "2564680"
  },
  {
    "text": "like Microsoft Mo Mozilla Google um Apple to agree on a simple",
    "start": "2564680",
    "end": "2570640"
  },
  {
    "text": "specification so let's get the basics out we can always look at version two later so I know what you're thinking",
    "start": "2570640",
    "end": "2576760"
  },
  {
    "text": "it's like the Millennium Falcon it's a piece of junk but remember this saved the day I mean it did so yes this is what",
    "start": "2576760",
    "end": "2584520"
  },
  {
    "text": "you're saying aren't aren't you uh there is a way out so index DB is",
    "start": "2584520",
    "end": "2592640"
  },
  {
    "text": "like this it's like a small tiny Sentry it's a sentry gun I mean sorry to go back to the gaming world but it's like a",
    "start": "2592640",
    "end": "2597800"
  },
  {
    "text": "small machine gun and index libraries can make the guns something like this or even better like this so let's look at",
    "start": "2597800",
    "end": "2605280"
  },
  {
    "text": "the libraries how many of you here love couch couch",
    "start": "2605280",
    "end": "2611160"
  },
  {
    "text": "DB One mongod DB there are a lot more okay how about",
    "start": "2611160",
    "end": "2616839"
  },
  {
    "text": "making index CB apis like couch or like  would that be good would you like",
    "start": "2616839",
    "end": "2622480"
  },
  {
    "text": "it how many of you use jQuery how about a simple jQuery ised",
    "start": "2622480",
    "end": "2628720"
  },
  {
    "text": "index DB API would you like it okay so let's look at something that I quickly wrote up and uh this is how",
    "start": "2628720",
    "end": "2636720"
  },
  {
    "text": "the IND DB API looks like so this is my uh jQuery index DB",
    "start": "2636720",
    "end": "2643520"
  },
  {
    "text": "plugin it's still a little bit veros because I'm trying to uh show all the different ways of doing things but the",
    "start": "2643520",
    "end": "2650119"
  },
  {
    "text": "API API itself is simple all you do is you say dollar. index tb. database name you specify what your schema should",
    "start": "2650119",
    "end": "2657599"
  },
  {
    "text": "be in version one version two version three Etc so that you don't have to worry about on upgrade needed and then you start a",
    "start": "2657599",
    "end": "2664599"
  },
  {
    "text": "transaction the same jQuery style chaining and all and once the transaction is complete using jQuery",
    "start": "2664599",
    "end": "2670359"
  },
  {
    "text": "promises you say J the transaction is completed or using jqu jQuery promises when the transaction is in progress you",
    "start": "2670359",
    "end": "2676880"
  },
  {
    "text": "create an object store and add add data to it is this better than what you saw",
    "start": "2676880",
    "end": "2682319"
  },
  {
    "text": "there so hope this helps and this is a quick example that I wrote up where this",
    "start": "2682319",
    "end": "2688440"
  },
  {
    "text": "is this is the amount of lines of code that you have to write to create an object store with jQuery plugin versus the one that you see at the bottom is",
    "start": "2688440",
    "end": "2694520"
  },
  {
    "text": "the actual index DB code in fact it actually gets quicker and it",
    "start": "2694520",
    "end": "2700720"
  },
  {
    "text": "gets just as small as this we have to just add data it takes care of all the checking all the error checking and all",
    "start": "2700720",
    "end": "2706480"
  },
  {
    "text": "for you and all of it is thrown at one single console. error and the full code",
    "start": "2706480",
    "end": "2712000"
  },
  {
    "text": "for index DB looks something like this with the same amount of error checking and all so this should help you",
    "start": "2712000",
    "end": "2718480"
  },
  {
    "text": "and it also does stuff like this for cursors isn't this good iterating",
    "start": "2718480",
    "end": "2726079"
  },
  {
    "text": "through all objects object just open the database called Bookshop one call open open an object",
    "start": "2726079",
    "end": "2731760"
  },
  {
    "text": "store called uh called book list and then for each just do console. info so",
    "start": "2731760",
    "end": "2736920"
  },
  {
    "text": "this is a quick library that I wrote up so if you're thinking of using index DV you could give this a try and now for",
    "start": "2736920",
    "end": "2742720"
  },
  {
    "text": "the couch TB folks there's a very very good library for couch TB called pouch",
    "start": "2742720",
    "end": "2750160"
  },
  {
    "text": "TB kind of fun with the words but uh does this API look",
    "start": "2750160",
    "end": "2755400"
  },
  {
    "text": "familiar you have a object you have a destroy and then you have you can post",
    "start": "2755400",
    "end": "2760640"
  },
  {
    "text": "to create a document you can create documents like this you can put a",
    "start": "2760640",
    "end": "2766200"
  },
  {
    "text": "document you can uh create a batch of",
    "start": "2766200",
    "end": "2771520"
  },
  {
    "text": "documents or this is how you fetch a document uh sorry this is how you fetch a",
    "start": "2771520",
    "end": "2778880"
  },
  {
    "text": "document so uh cou TB folks is this good enough do this does this resonate with",
    "start": "2778880",
    "end": "2785000"
  },
  {
    "text": "your kind of an API so if you're using indextv and have have have liked the couch API this is probably one thing",
    "start": "2785000",
    "end": "2791440"
  },
  {
    "text": "that you could test uh this is the API very very",
    "start": "2791440",
    "end": "2799359"
  },
  {
    "text": "similar it's called browser DB the same concept of DB has",
    "start": "2800200",
    "end": "2806240"
  },
  {
    "text": "collections has the same concept of document and all where you save a document or you save multiple",
    "start": "2806240",
    "end": "2814200"
  },
  {
    "text": "documents and then this is how you would find it this is you this is how you would find one this is how you would",
    "start": "2814200",
    "end": "2819280"
  },
  {
    "text": "find all so does this look like are you guys okay with this kind of a library so this should help you cut down",
    "start": "2819280",
    "end": "2826440"
  },
  {
    "text": "all the extra amount of code that you had for say inserting or for writing to databases how many backbone",
    "start": "2826440",
    "end": "2834599"
  },
  {
    "text": "users uh a good number so there is also an index DB wrapper for backbone so if",
    "start": "2834760",
    "end": "2840319"
  },
  {
    "text": "you Rel if you identify if you if you think of backbone you would always think in terms of models and collections right",
    "start": "2840319",
    "end": "2846599"
  },
  {
    "text": "so so and index DB so when you want to sync a model or when you want to save a model you can actually save it to index",
    "start": "2846599",
    "end": "2851839"
  },
  {
    "text": "dv instead of saving it to your saving it to your remote server the way that would work is this it has this very good",
    "start": "2851839",
    "end": "2857760"
  },
  {
    "text": "pattern of migrations that you also saw in the jQuery library and models is you just create a",
    "start": "2857760",
    "end": "2864760"
  },
  {
    "text": "model and you can do fetch or you can do save and collections will let you do stuff like Fetch with range and stuff",
    "start": "2864760",
    "end": "2870400"
  },
  {
    "text": "like that so yep and so all these are like index",
    "start": "2870400",
    "end": "2876359"
  },
  {
    "text": "DB specif specific libraries but there are also other libraries like say launcher or persist or gazel uh all of",
    "start": "2876359",
    "end": "2882319"
  },
  {
    "text": "these are just object value stores and index DB adapter can be used to save",
    "start": "2882319",
    "end": "2887640"
  },
  {
    "text": "object key values into into index DB using these libraries they do not",
    "start": "2887640",
    "end": "2892880"
  },
  {
    "text": "understand cursors Etc because they just deal with deal with object libraries and they weree preliminarily written for",
    "start": "2892880",
    "end": "2898319"
  },
  {
    "text": "like local storage kind of semantics so the question that you are all asking is can I use it today what",
    "start": "2898319",
    "end": "2904839"
  },
  {
    "text": "what is your guess I'm trying to beat around the bush let",
    "start": "2904839",
    "end": "2911040"
  },
  {
    "text": "me stop trying to show you and actually show you the answer is unfortunately yeah you really can't",
    "start": "2911040",
    "end": "2918240"
  },
  {
    "text": "use it to production but yeah I mean probably you can so you can use it with",
    "start": "2918240",
    "end": "2923400"
  },
  {
    "text": "poly polyils and you shouldn't your website shouldn't rely on the fact that index DP is going to be available if you",
    "start": "2923400",
    "end": "2928800"
  },
  {
    "text": "look at caniuse.com it says that index DB is available on I 10 which means Windows 8",
    "start": "2928800",
    "end": "2934920"
  },
  {
    "text": "only uh it's available on Firefox latest version uh it is available on Chrome",
    "start": "2934920",
    "end": "2940200"
  },
  {
    "text": "latest version with some quirks and that's pretty much it no Opera no Safari",
    "start": "2940200",
    "end": "2946200"
  },
  {
    "text": "so the answer is no but then I was not very happy with this and I came up with",
    "start": "2946200",
    "end": "2951920"
  },
  {
    "text": "a very simple indexdb polyfill that uses web SQL so what it does is I mean I looked at the Firefox implementation",
    "start": "2951920",
    "end": "2958079"
  },
  {
    "text": "those guys use SQL light sqlite is exposed to the world so why not effectively reuse that so I came up with",
    "start": "2958079",
    "end": "2964119"
  },
  {
    "text": "this polyfill where you can still use index DB in uh Safari and Opera using we uh using",
    "start": "2964119",
    "end": "2970799"
  },
  {
    "text": "SQL uh SQL light so this is the shim and",
    "start": "2970799",
    "end": "2976000"
  },
  {
    "text": "it actually works on mobile devices also so you can actually use it for stuff like on an iPad or an iPhone or or or",
    "start": "2976000",
    "end": "2982760"
  },
  {
    "text": "Opa mini that supports index that supports web SQL you can use it on mobile and this effectively means that",
    "start": "2982760",
    "end": "2988280"
  },
  {
    "text": "all you have to do for your website is use index DB and it's going to be available everywhere if you use websql",
    "start": "2988280",
    "end": "2994000"
  },
  {
    "text": "Firefox and ie are still not going to support it but index with the polyl probably has a better",
    "start": "2994000",
    "end": "2999680"
  },
  {
    "text": "coverage so uh if you have an iPad or iPhone you can probably hit this uh URL",
    "start": "2999680",
    "end": "3005400"
  },
  {
    "text": "and it'll actually show you that it uh that an index DB example works so let me",
    "start": "3005400",
    "end": "3011040"
  },
  {
    "text": "quickly open it up so this is all the browsers that I",
    "start": "3011040",
    "end": "3018280"
  },
  {
    "text": "have I don't want to open it up in each one of them so I'll just probably open up Opera and let's see if that",
    "start": "3018280",
    "end": "3025240"
  },
  {
    "text": "works so this is a simple shopping cart kind of a demo example where I can like say stuff add to cart add to wish list",
    "start": "3025240",
    "end": "3031960"
  },
  {
    "text": "and all and it uses index DB and the way it uses index DB is if I go to Firefox and run",
    "start": "3031960",
    "end": "3038839"
  },
  {
    "text": "this this will run uh this will run just exactly however",
    "start": "3038839",
    "end": "3046280"
  },
  {
    "text": "here it uses web database which is websql and look at all of this you actually see the data being stored here",
    "start": "3046880",
    "end": "3052839"
  },
  {
    "text": "so it is using in the index DB API but the polyl is converting index DB to SQL light or web SQL and making it",
    "start": "3052839",
    "end": "3060559"
  },
  {
    "text": "run back to the presentation uh there are some things",
    "start": "3060599",
    "end": "3067040"
  },
  {
    "text": "that we'll have to think about uh the indexb specification we not sure if it's there's a question could",
    "start": "3067040",
    "end": "3073960"
  },
  {
    "text": "you uh the pro the only problem with that is websql has has SQL semantics",
    "start": "3077359",
    "end": "3082960"
  },
  {
    "text": "which means it's also relational and websql is ful index evb is not an index",
    "start": "3082960",
    "end": "3088079"
  },
  {
    "text": "EV is like the lowest common denominator in fact I've been playing around with it so there's this Library called SQL JS",
    "start": "3088079",
    "end": "3093720"
  },
  {
    "text": "which is uh SQL lights implementation in JavaScript using uh using I forgot what",
    "start": "3093720",
    "end": "3099960"
  },
  {
    "text": "it was it it's basically SQL lights implementation which is sqlite code in C",
    "start": "3099960",
    "end": "3105119"
  },
  {
    "text": "and C++ converted to JavaScript I tried playing around with the query processor but it's kind of hard I mean I'm I'm",
    "start": "3105119",
    "end": "3110599"
  },
  {
    "text": "actually working on it let's see if it if if something comes out of it so in uh what is the impact of",
    "start": "3110599",
    "end": "3117440"
  },
  {
    "text": "ecmascript next or because index GB is so heavily reliant on JavaScript what what would it mean for index GB would we",
    "start": "3117440",
    "end": "3122880"
  },
  {
    "text": "have index GB modules not sure will all the request and on success and on",
    "start": "3122880",
    "end": "3128559"
  },
  {
    "text": "upgrade go away and Promises come in we not sure because this is actually a good thing to have because JavaScript is probably going to have promises and the",
    "start": "3128559",
    "end": "3134839"
  },
  {
    "text": "index AP may change uh the next version of JavaScript probably will also have iterators",
    "start": "3134839",
    "end": "3140559"
  },
  {
    "text": "generators and the support for yield keyboard which means we don't have to have cursors at all right",
    "start": "3140559",
    "end": "3147280"
  },
  {
    "text": "so we can do this today we can save it to Binary blobs and we could also and",
    "start": "3147280",
    "end": "3152440"
  },
  {
    "text": "the next version of JavaScript is also going to have people have been talking about destructuring assignments like say x x comma yal 1A 2 where x equals 1 and",
    "start": "3152440",
    "end": "3160640"
  },
  {
    "text": "y will automatically equal to so will it mean reading from a database I can read it like this uh these are some of the",
    "start": "3160640",
    "end": "3166880"
  },
  {
    "text": "questions I had I thought I'll put it up in front of you guys and will object schema be JavaScript classes if",
    "start": "3166880",
    "end": "3172640"
  },
  {
    "text": "JavaScript is ever going to have classes I have no clue so those are the open questions May the force be with you and",
    "start": "3172640",
    "end": "3181160"
  },
  {
    "text": "if you there were like multiple links in this if you want links I just compiled one uh single place where you can look",
    "start": "3181160",
    "end": "3186960"
  },
  {
    "text": "at all the links and uh this is the QR code so",
    "start": "3186960",
    "end": "3192280"
  },
  {
    "text": "[Music]",
    "start": "3192710",
    "end": "3195849"
  }
]