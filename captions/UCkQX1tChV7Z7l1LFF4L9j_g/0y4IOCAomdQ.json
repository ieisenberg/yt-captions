[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "oh okay i'm alexander uh i'm a scala plugin for intelligent",
    "start": "21039",
    "end": "29279"
  },
  {
    "text": "idea team leader",
    "start": "29279",
    "end": "32640"
  },
  {
    "text": "and today we will talk about scala plugin and",
    "start": "34880",
    "end": "40239"
  },
  {
    "text": "probably a little about scholar in general what i want to say",
    "start": "40239",
    "end": "47760"
  },
  {
    "text": "probably for those who still use this eclipse some kind of advertisement",
    "start": "47760",
    "end": "56079"
  },
  {
    "start": "48000",
    "end": "48000"
  },
  {
    "text": "sometimes when people learn something new they still",
    "start": "56079",
    "end": "62000"
  },
  {
    "text": "do this the same patterns as they usually do",
    "start": "62000",
    "end": "67520"
  },
  {
    "text": "and do you think is it scala not idiomatic",
    "start": "67520",
    "end": "73680"
  },
  {
    "text": "yes yeah of course pattern matching is much",
    "start": "73680",
    "end": "79040"
  },
  {
    "text": "better isn't it but when you come from",
    "start": "79040",
    "end": "85040"
  },
  {
    "text": "java you usually do the same patterns as you used in java earlier",
    "start": "85040",
    "end": "91280"
  },
  {
    "text": "and how to stop your growing team from writing",
    "start": "91280",
    "end": "97280"
  },
  {
    "text": "such code as you saw here and actually simple answer is very very simple just",
    "start": "97280",
    "end": "104640"
  },
  {
    "text": "use intellij and intellij is able to show you",
    "start": "104640",
    "end": "109680"
  },
  {
    "text": "that this code is not scala code and",
    "start": "109680",
    "end": "116000"
  },
  {
    "text": "you can in one action just convert it to pattern matching this is how inspections in intellij idea",
    "start": "116000",
    "end": "123680"
  },
  {
    "text": "works i mean that intelligent sometimes tries to learn people to write",
    "start": "123680",
    "end": "130959"
  },
  {
    "text": "better in their favorite languages this how it works in scala",
    "start": "130959",
    "end": "138160"
  },
  {
    "text": "so okay let's start to talk about scala plug-in features",
    "start": "138400",
    "end": "144080"
  },
  {
    "text": "first part will be about these things second part okay probably",
    "start": "144080",
    "end": "151120"
  },
  {
    "text": "should move a little okay thank you uh second part will be",
    "start": "151120",
    "end": "157760"
  },
  {
    "text": "about uh scala plug-in sources so probably somebody wants to extend it or",
    "start": "157760",
    "end": "163599"
  },
  {
    "text": "probably help to fix something and third part will be about",
    "start": "163599",
    "end": "170640"
  },
  {
    "text": "upcoming features our roadmap i want to",
    "start": "170640",
    "end": "176080"
  },
  {
    "text": "show you our nearest euro mod until december when we are",
    "start": "176080",
    "end": "182080"
  },
  {
    "text": "planning to release intellij idea 13. let's start to talk about from",
    "start": "182080",
    "end": "189599"
  },
  {
    "text": "auto completion feature auto completion feature is very simple",
    "start": "189599",
    "end": "195599"
  },
  {
    "start": "192000",
    "end": "192000"
  },
  {
    "text": "in using uh basic outcome completion is what you",
    "start": "195599",
    "end": "201280"
  },
  {
    "text": "use every day because of after autopapa completion in intellij but there are actually three",
    "start": "201280",
    "end": "207840"
  },
  {
    "text": "types of uh completion is basic completion smart completion and global completion",
    "start": "207840",
    "end": "213599"
  },
  {
    "text": "and i want to tell you about all the three types",
    "start": "213599",
    "end": "218480"
  },
  {
    "text": "sometimes some completions are very simple so you just call and use it and you don't need",
    "start": "218640",
    "end": "225519"
  },
  {
    "text": "to know about this these features and some completions you you need to",
    "start": "225519",
    "end": "231760"
  },
  {
    "text": "know uh exact places where you can use it",
    "start": "231760",
    "end": "236799"
  },
  {
    "text": "and to use it in this right exact places just don't to forget about it",
    "start": "236799",
    "end": "242640"
  },
  {
    "text": "so let's start from basic completion this is very simple it just collects all possible symbols for current cursor",
    "start": "242640",
    "end": "250480"
  },
  {
    "text": "position so if position is for expressions so it collects all",
    "start": "250480",
    "end": "258160"
  },
  {
    "text": "expression symbols like values objects and definitions",
    "start": "258959",
    "end": "264560"
  },
  {
    "text": "and if this position is its type then it collects all type symbols and also singleton symbols like objects",
    "start": "264560",
    "end": "272240"
  },
  {
    "text": "and values for singleton symbols it all it inserts dot automatically",
    "start": "272240",
    "end": "280720"
  },
  {
    "text": "so you don't need to care about such things like dot or parenthesis when",
    "start": "281680",
    "end": "289199"
  },
  {
    "text": "you complete uh method and even for method completion you don't",
    "start": "289199",
    "end": "295600"
  },
  {
    "text": "care about such things like getters from java",
    "start": "295600",
    "end": "301840"
  },
  {
    "text": "because everybody probably most of us know that",
    "start": "301840",
    "end": "308479"
  },
  {
    "text": "for simple getters from java we don't have to use",
    "start": "308479",
    "end": "313600"
  },
  {
    "text": "parentheses it's better to avoid them because this code usually don't have side",
    "start": "313600",
    "end": "319199"
  },
  {
    "text": "effects so to mark that this code don't have",
    "start": "319199",
    "end": "324560"
  },
  {
    "text": "side effects we just need to avoid using parentheses",
    "start": "324560",
    "end": "329840"
  },
  {
    "text": "so intellij can understand this pattern as well so when you complete",
    "start": "329840",
    "end": "336400"
  },
  {
    "text": "simple getters from java it just doesn't insert parentheses",
    "start": "336400",
    "end": "342080"
  },
  {
    "text": "sometimes we use basic completion for information so",
    "start": "342080",
    "end": "347919"
  },
  {
    "text": "we need we want to extract some information from context so we just invoke waste and completion and",
    "start": "347919",
    "end": "355199"
  },
  {
    "text": "look through the whole list actually in scala it's less usable because color completion",
    "start": "355199",
    "end": "361039"
  },
  {
    "text": "list is very big because of a lot of symbols in scope",
    "start": "361039",
    "end": "368639"
  },
  {
    "text": "so that's all about basic completion it's very simple but what i want to tell",
    "start": "368639",
    "end": "373680"
  },
  {
    "text": "you is a new basic completion feature it even not released yet i think i hope",
    "start": "373680",
    "end": "380479"
  },
  {
    "text": "it will be released next week so let's see how it works this is a",
    "start": "380479",
    "end": "388319"
  },
  {
    "text": "completion for for constructor parameters and for super",
    "start": "388319",
    "end": "393520"
  },
  {
    "text": "method calls so when uh parameters of superconstructor",
    "start": "393520",
    "end": "401280"
  },
  {
    "text": "have the same names as our constructor and the same types we usually want to just put them in the",
    "start": "401280",
    "end": "409280"
  },
  {
    "text": "same the same places in the same parameters so here we",
    "start": "409280",
    "end": "415759"
  },
  {
    "text": "probably want to complete string comma integers we can just invoke",
    "start": "415759",
    "end": "421199"
  },
  {
    "text": "completion type and choose string integer completion",
    "start": "421199",
    "end": "426400"
  },
  {
    "text": "variant for super methods we can do the same thing",
    "start": "426400",
    "end": "432720"
  },
  {
    "text": "so here we can choose string comma boolean",
    "start": "432720",
    "end": "438080"
  },
  {
    "text": "and this is very useful and we don't need to invoke completion two times",
    "start": "438080",
    "end": "443599"
  },
  {
    "text": "and it's much faster and more productive in your development",
    "start": "443599",
    "end": "451199"
  },
  {
    "text": "so let's start to talk about smart completion what do you think uh",
    "start": "451199",
    "end": "457599"
  },
  {
    "text": "this is simple illustration about smart completion what do you think what we can put",
    "start": "457599",
    "end": "464400"
  },
  {
    "text": "to this place who can tell me",
    "start": "464400",
    "end": "469199"
  },
  {
    "text": "it's actually a very simple question but intelligent idea can answer you this",
    "start": "471919",
    "end": "478639"
  },
  {
    "text": "question for this question in a second even just less than second so at this",
    "start": "478639",
    "end": "486000"
  },
  {
    "text": "point i would press ctrl space or whatever it is ctrl shift space excellent and then get help from you on",
    "start": "486000",
    "end": "492639"
  },
  {
    "text": "it yeah yeah so",
    "start": "492639",
    "end": "497759"
  },
  {
    "text": "okay the answer is very simple sum of e2 point projects",
    "start": "498639",
    "end": "504479"
  },
  {
    "text": "actually you you need to invoke smart completion twice because it includes chain completion which is not",
    "start": "504479",
    "end": "511280"
  },
  {
    "text": "available in first smart completion so uh you you should know when you want",
    "start": "511280",
    "end": "516959"
  },
  {
    "text": "to invoke chain completion you you need to try smart completion twice",
    "start": "516959",
    "end": "524399"
  },
  {
    "text": "so smart completion is such thing which filters out from basic completion",
    "start": "524399",
    "end": "529920"
  },
  {
    "text": "variants such variants which are definitely wrong",
    "start": "529920",
    "end": "535279"
  },
  {
    "text": "i mean that if we need string type and some function returns integer type then",
    "start": "535279",
    "end": "542480"
  },
  {
    "text": "probably we don't want this function in this place so if we don't want to write some chains",
    "start": "542480",
    "end": "550480"
  },
  {
    "text": "we we can just call smart completion and choose some variant is a from smaller",
    "start": "550480",
    "end": "557040"
  },
  {
    "text": "list and there are some more very",
    "start": "557040",
    "end": "563279"
  },
  {
    "start": "559000",
    "end": "559000"
  },
  {
    "text": "effective features of smart completion like chain completion this is second smart completion uh you you saw on",
    "start": "563279",
    "end": "570080"
  },
  {
    "text": "previous slide that we completed e2 point project uh so if if project is not available in",
    "start": "570080",
    "end": "578800"
  },
  {
    "text": "scope right now it's it's sometimes available from",
    "start": "578800",
    "end": "584560"
  },
  {
    "text": "another variable and you don't",
    "start": "584560",
    "end": "589760"
  },
  {
    "text": "need to search it which variable have projects function which returns project you can",
    "start": "589760",
    "end": "596240"
  },
  {
    "text": "just can invoke second smart nucleation and choose right one i use it sometimes",
    "start": "596240",
    "end": "603040"
  },
  {
    "text": "also for information just to search is some symbols like project available",
    "start": "603040",
    "end": "610800"
  },
  {
    "text": "in chain so we can discover",
    "start": "610800",
    "end": "615839"
  },
  {
    "text": "such things there are also some completion",
    "start": "615839",
    "end": "621680"
  },
  {
    "text": "you you saw here some completion right here when",
    "start": "621839",
    "end": "629120"
  },
  {
    "text": "expected type is option and we have not option variable we can complete some of this",
    "start": "629120",
    "end": "636480"
  },
  {
    "text": "variable or definition and there are also there is also",
    "start": "636480",
    "end": "643200"
  },
  {
    "text": "factory method completion which can complete so we if we search some",
    "start": "643200",
    "end": "650880"
  },
  {
    "text": "type we usually have factory methods in companion objects of",
    "start": "650880",
    "end": "656320"
  },
  {
    "text": "this type so intelligent can search",
    "start": "656320",
    "end": "661519"
  },
  {
    "text": "among this companion objects and try to figure out",
    "start": "661519",
    "end": "667279"
  },
  {
    "text": "which method is compatible here in this place so for",
    "start": "667279",
    "end": "673200"
  },
  {
    "text": "example if your expected type is hash set of integers so",
    "start": "673200",
    "end": "680000"
  },
  {
    "text": "you can invoke just a smart completion and get her set dot empty variant",
    "start": "680000",
    "end": "686959"
  },
  {
    "text": "which is cool and there are there is also a very uh",
    "start": "686959",
    "end": "692160"
  },
  {
    "start": "689000",
    "end": "689000"
  },
  {
    "text": "useful feature like generate anonymous function so when uh",
    "start": "692160",
    "end": "697839"
  },
  {
    "text": "expected type is function and there is no any prefix for completion i mean some",
    "start": "697839",
    "end": "703920"
  },
  {
    "text": "identifier or something like this you can just invoke smart completion and to",
    "start": "703920",
    "end": "709200"
  },
  {
    "text": "generate uh some boilerplate stuff which which either you can",
    "start": "709200",
    "end": "715120"
  },
  {
    "text": "infer from context and then just type body of this function i",
    "start": "715120",
    "end": "720640"
  },
  {
    "text": "can show you a short demo",
    "start": "720640",
    "end": "725040"
  },
  {
    "text": "so here we can see that a fold left invocation",
    "start": "726800",
    "end": "733279"
  },
  {
    "text": "which requires a function so we can invoke just smart completion",
    "start": "733279",
    "end": "738959"
  },
  {
    "text": "here put names",
    "start": "738959",
    "end": "743240"
  },
  {
    "text": "and just few body of this",
    "start": "744800",
    "end": "749680"
  },
  {
    "text": "function this smart completion is actually knows about",
    "start": "751680",
    "end": "757680"
  },
  {
    "text": "special braces syntax so if you use uh",
    "start": "757680",
    "end": "763680"
  },
  {
    "text": "builder syntax for example for fold left we can invoke it and just get a",
    "start": "763680",
    "end": "770160"
  },
  {
    "text": "case variant",
    "start": "770160",
    "end": "773600"
  },
  {
    "text": "that's how it works uh also this can",
    "start": "777680",
    "end": "783600"
  },
  {
    "text": "sometimes we kind of infer types from expected type so in this case",
    "start": "783600",
    "end": "791760"
  },
  {
    "text": "generate anonymous functions suggest you to define type four parameters for example i can invoke it here",
    "start": "791760",
    "end": "798639"
  },
  {
    "text": "and right now it shows like nothing type i defined integer",
    "start": "798639",
    "end": "804800"
  },
  {
    "text": "then define type and then i can write body of this method",
    "start": "804800",
    "end": "811360"
  },
  {
    "text": "for example so that's very simple and useful to generate",
    "start": "811360",
    "end": "816560"
  },
  {
    "text": "some stuff especially when you have more than two parameters so you",
    "start": "816560",
    "end": "823519"
  },
  {
    "text": "you don't need to write them by yourself and third type of completions is global",
    "start": "823519",
    "end": "831120"
  },
  {
    "text": "completion this type of completions requires some import",
    "start": "831120",
    "end": "837120"
  },
  {
    "text": "to get it compilable for this completion variant",
    "start": "837120",
    "end": "843040"
  },
  {
    "text": "from intellij idea 12 it's the same thing as second basic completion i mean",
    "start": "843040",
    "end": "848639"
  },
  {
    "text": "that before we had different shortcut for global completion it's ctrl alt space",
    "start": "848639",
    "end": "856880"
  },
  {
    "text": "and now this shortcut is actually the same thing like uh double control space so you can use",
    "start": "856880",
    "end": "865680"
  },
  {
    "text": "double control space or you can use ctrl space it's the same thing",
    "start": "865680",
    "end": "871279"
  },
  {
    "text": "and even more when basic completion can't find any",
    "start": "871279",
    "end": "878480"
  },
  {
    "text": "applicable variant i mean that prefix",
    "start": "878480",
    "end": "883040"
  },
  {
    "text": "doesn't match for all variants uh intellij starts to search again with",
    "start": "883519",
    "end": "889600"
  },
  {
    "text": "global completion so uh sometimes basic completion works even for for the first",
    "start": "889600",
    "end": "894880"
  },
  {
    "text": "invocation so it's it's also works for auto pop-up compilation",
    "start": "894880",
    "end": "901360"
  },
  {
    "text": "uh so which features global completion has uh there are some",
    "start": "901360",
    "end": "907680"
  },
  {
    "text": "uh effective features first of them is class and type alas as global",
    "start": "907680",
    "end": "913360"
  },
  {
    "text": "completion which probably every user of intellij id use",
    "start": "913360",
    "end": "919920"
  },
  {
    "text": "extensively but typolyzes completion we",
    "start": "919920",
    "end": "925120"
  },
  {
    "text": "had it recently and probably it's available only in the latest release of",
    "start": "925120",
    "end": "930480"
  },
  {
    "text": "scala plugin so this is quite simple so it's church",
    "start": "930480",
    "end": "937519"
  },
  {
    "text": "is just all among all classes in project and all type analysis which are available",
    "start": "937519",
    "end": "945040"
  },
  {
    "text": "from some static contexts so it's typoless in package objects or objects",
    "start": "945040",
    "end": "953040"
  },
  {
    "text": "there are also there is also functions global completion",
    "start": "953199",
    "end": "958560"
  },
  {
    "text": "uh which you can use when you don't remember in which object this",
    "start": "958560",
    "end": "964639"
  },
  {
    "text": "function is defined for example you remember some name of this function",
    "start": "964639",
    "end": "969680"
  },
  {
    "text": "then you can just type this name invoke global completion and intellij search among",
    "start": "969680",
    "end": "976480"
  },
  {
    "text": "all static functions uh in in all objects and",
    "start": "976480",
    "end": "984240"
  },
  {
    "text": "search which function name are applicable to this prefix",
    "start": "984240",
    "end": "990720"
  },
  {
    "text": "this is very useful so you can use it for example for sin or",
    "start": "990720",
    "end": "997759"
  },
  {
    "text": "something very similar things and we also have implicit conversion uh",
    "start": "997759",
    "end": "1005440"
  },
  {
    "text": "completion which i show you right now in action",
    "start": "1005440",
    "end": "1012240"
  },
  {
    "text": "so here we can see integer and dot and i want to",
    "start": "1013839",
    "end": "1020399"
  },
  {
    "text": "write something like this call this method which is called",
    "start": "1020399",
    "end": "1026079"
  },
  {
    "text": "import me but import me is not available in integer we need to",
    "start": "1026079",
    "end": "1032480"
  },
  {
    "text": "import some implicit conversion for for to extend",
    "start": "1032480",
    "end": "1038959"
  },
  {
    "text": "in integer type so you can see here uh some class which",
    "start": "1038959",
    "end": "1044240"
  },
  {
    "text": "have this import me method and object with appropriate implicit definition",
    "start": "1044240",
    "end": "1053480"
  },
  {
    "text": "so how how it works just you can just invoke",
    "start": "1054320",
    "end": "1059360"
  },
  {
    "text": "global completion and when we write some prefix which we",
    "start": "1060160",
    "end": "1066240"
  },
  {
    "text": "can see completion varying like global completion dot import me and just invoke",
    "start": "1066240",
    "end": "1071679"
  },
  {
    "text": "and that's all we need to do",
    "start": "1071679",
    "end": "1075840"
  },
  {
    "text": "okay so this is all about completions uh you just need to know all types of",
    "start": "1079760",
    "end": "1085600"
  },
  {
    "text": "completion all features to use all of them more productively",
    "start": "1085600",
    "end": "1091520"
  },
  {
    "text": "and it's it's very good to know them okay",
    "start": "1091520",
    "end": "1097200"
  },
  {
    "text": "next feature i want to show you is type and 4 actions feature",
    "start": "1097200",
    "end": "1102720"
  },
  {
    "text": "type inference sometimes requires more attention because not from only from",
    "start": "1103919",
    "end": "1109039"
  },
  {
    "text": "compiler or from ide because you read this code and you need",
    "start": "1109039",
    "end": "1115360"
  },
  {
    "text": "to understand which type exactly has some symbol and this type is not",
    "start": "1115360",
    "end": "1121120"
  },
  {
    "text": "available in source code in intellij you can just ask information about type and there are two options for",
    "start": "1121120",
    "end": "1128000"
  },
  {
    "text": "this one of these options is on demand so you can just invoke some action and",
    "start": "1128000",
    "end": "1133760"
  },
  {
    "text": "ask about it and second ocean is using by your mouse just put",
    "start": "1133760",
    "end": "1139919"
  },
  {
    "text": "carrot over the symbol and you get pop-up with",
    "start": "1139919",
    "end": "1144960"
  },
  {
    "text": "a type of this symbol in intelligent intelligent idea is",
    "start": "1144960",
    "end": "1150080"
  },
  {
    "text": "actually keyboard eccentric ide so we we want to",
    "start": "1150080",
    "end": "1156320"
  },
  {
    "text": "teach people to use only keyboard for development so that's why",
    "start": "1156320",
    "end": "1162960"
  },
  {
    "text": "mouse hovering type information is disabled by default",
    "start": "1162960",
    "end": "1168000"
  },
  {
    "text": "but all anybody who wants to use it",
    "start": "1168000",
    "end": "1175280"
  },
  {
    "text": "use mouse still use mouse can enable it and use it for",
    "start": "1175280",
    "end": "1181360"
  },
  {
    "text": "getting typing for so let's see this example who knows",
    "start": "1181360",
    "end": "1187280"
  },
  {
    "text": "which type case you will have",
    "start": "1187280",
    "end": "1192120"
  },
  {
    "text": "actually this is also a very simple example",
    "start": "1195600",
    "end": "1200280"
  },
  {
    "text": "takes the sequence and puts them in groups of two",
    "start": "1217200",
    "end": "1221840"
  },
  {
    "text": "okay let's see this it's the iterator of int",
    "start": "1222240",
    "end": "1228159"
  },
  {
    "text": "is it simple to understand actually you saw that it's not really simple so sometimes we need such",
    "start": "1228159",
    "end": "1235440"
  },
  {
    "text": "features in id and also for this action uh we can",
    "start": "1235440",
    "end": "1240640"
  },
  {
    "text": "select any expression and check type of uh this expression so this is",
    "start": "1240640",
    "end": "1246799"
  },
  {
    "text": "this is the place where you can",
    "start": "1246799",
    "end": "1252400"
  },
  {
    "text": "understand where iterator started to",
    "start": "1252400",
    "end": "1257760"
  },
  {
    "text": "to to exist in this chain of course yeah i would do extract variable on that selected part and then do ctrl j",
    "start": "1258720",
    "end": "1267120"
  },
  {
    "text": "some people said that",
    "start": "1269520",
    "end": "1273400"
  },
  {
    "text": "this section have alt equals shortcut",
    "start": "1276880",
    "end": "1282640"
  },
  {
    "text": "but you can i can tell you that in intellij you can simply",
    "start": "1282640",
    "end": "1288159"
  },
  {
    "text": "discover shortcuts by using go to action action so go to action action is ctrl",
    "start": "1288159",
    "end": "1294080"
  },
  {
    "text": "shift a we can invoke and just type name of",
    "start": "1294080",
    "end": "1299200"
  },
  {
    "text": "action and to see here shortcut and or even invoke this section",
    "start": "1299200",
    "end": "1305360"
  },
  {
    "text": "here this section is not applicable but for example here we can invoke it",
    "start": "1305360",
    "end": "1311360"
  },
  {
    "text": "it's not working for type of action looks okay but we still can discover uh",
    "start": "1311360",
    "end": "1318400"
  },
  {
    "text": "shortcuts using typing for of using go to action action",
    "start": "1318400",
    "end": "1324400"
  },
  {
    "text": "i mean you can forget some actions but you can remember name of this section until you can just discover it what",
    "start": "1324400",
    "end": "1331600"
  },
  {
    "text": "about getting the api help for grouped api do you offer something to bring up",
    "start": "1331600",
    "end": "1337200"
  },
  {
    "text": "the api document for grouped for example yes",
    "start": "1337200",
    "end": "1343120"
  },
  {
    "text": "but the whole thing the the words that describe what it does",
    "start": "1343120",
    "end": "1349200"
  },
  {
    "text": "there is no any information in documentation ah because my eye",
    "start": "1349200",
    "end": "1356400"
  },
  {
    "text": "what's going on",
    "start": "1358480",
    "end": "1361840"
  },
  {
    "text": "uh i just we won't have to worry about that i don't want to know is an interesting one what is the",
    "start": "1363600",
    "end": "1370240"
  },
  {
    "text": "implementation what is go to action command shift eyes",
    "start": "1370240",
    "end": "1378159"
  },
  {
    "text": "i i i just didn't attach sources to this project so",
    "start": "1378159",
    "end": "1385360"
  },
  {
    "text": "documentation is not available here right now you would go to the source and just look at that",
    "start": "1385360",
    "end": "1390799"
  },
  {
    "text": "yeah f4 is that the same thing no it's actually",
    "start": "1390799",
    "end": "1396158"
  },
  {
    "text": "show the quick documentation pop up",
    "start": "1396559",
    "end": "1401240"
  },
  {
    "text": "that's that's what you were talking about but there's also in addition to control j there's a control shaped eye which will just pull",
    "start": "1405840",
    "end": "1412080"
  },
  {
    "text": "up the implementation in that same little box",
    "start": "1412080",
    "end": "1416840"
  },
  {
    "text": "so we can write some documentation",
    "start": "1418159",
    "end": "1422720"
  },
  {
    "text": "to show you how it works for for example we can call this method and like right here we can invoke",
    "start": "1423919",
    "end": "1432159"
  },
  {
    "text": "uh documentation pop up and read it and write and pop up you can see",
    "start": "1432159",
    "end": "1438720"
  },
  {
    "text": "some documentation it's even understands the wiki syntax or for weak syntax",
    "start": "1438720",
    "end": "1445679"
  },
  {
    "text": "of wiki syntax yes do you know it so you can just use for",
    "start": "1445679",
    "end": "1451200"
  },
  {
    "text": "example some kind of dicks",
    "start": "1451200",
    "end": "1455278"
  },
  {
    "text": "okay and here invoke and see documentation underlined",
    "start": "1457520",
    "end": "1464080"
  },
  {
    "text": "this is how works scala dock",
    "start": "1464080",
    "end": "1468240"
  },
  {
    "text": "tool i mean generating web pages for scholar documentation",
    "start": "1469600",
    "end": "1475600"
  },
  {
    "text": "and also i want to to show you mouse pop-up",
    "start": "1476320",
    "end": "1483519"
  },
  {
    "text": "you can put it here show typing for almost motion with some delay delay is also",
    "start": "1483760",
    "end": "1490159"
  },
  {
    "text": "configurable so then i can just put mouse here and get information about",
    "start": "1490159",
    "end": "1497360"
  },
  {
    "text": "type i can put mouse for any definition even here and see",
    "start": "1497360",
    "end": "1503679"
  },
  {
    "text": "type of b pattern okay",
    "start": "1503679",
    "end": "1508720"
  },
  {
    "text": "what's next uh next feature i want to show is go to implicit conversion feature",
    "start": "1508720",
    "end": "1515840"
  },
  {
    "text": "sometimes we know that this expression is converted",
    "start": "1516720",
    "end": "1522720"
  },
  {
    "text": "but sometimes we want to see which implicit conversion converted this expression to another type",
    "start": "1522720",
    "end": "1530400"
  },
  {
    "text": "so we can just invoke this action and to see the list of possible implicit",
    "start": "1530400",
    "end": "1536640"
  },
  {
    "start": "1531000",
    "end": "1531000"
  },
  {
    "text": "conversions for this expression i mean these expressions have",
    "start": "1536640",
    "end": "1543760"
  },
  {
    "text": "some type and for this type we search all possible",
    "start": "1543760",
    "end": "1549840"
  },
  {
    "text": "conversions and this list contains all of this and also a bold",
    "start": "1549840",
    "end": "1557440"
  },
  {
    "text": "font has actual implicit conversion which was used and this is pre-selected",
    "start": "1557440",
    "end": "1564960"
  },
  {
    "text": "when you invoke this gold implicit corrosion action also this list is separated into two",
    "start": "1564960",
    "end": "1573279"
  },
  {
    "text": "small smaller lists first is implicit conversions from scope and second list",
    "start": "1573279",
    "end": "1578799"
  },
  {
    "text": "is implicit conversion from extended scope extended scope also collects simplicity conversion from companion",
    "start": "1578799",
    "end": "1585200"
  },
  {
    "text": "objects of of our types i mean the",
    "start": "1585200",
    "end": "1590960"
  },
  {
    "text": "expression type and type to which we want to convert",
    "start": "1590960",
    "end": "1596480"
  },
  {
    "text": "uh even more we we even can choose any of these implicit conversions",
    "start": "1596840",
    "end": "1603520"
  },
  {
    "text": "and to make this implicit conversion explicit so sometimes we probably see that around",
    "start": "1603520",
    "end": "1610640"
  },
  {
    "text": "completion conversion were used and we we can just invoke this list and choose right one",
    "start": "1610640",
    "end": "1618400"
  },
  {
    "text": "and make it explicit okay what's next is show implicit parameters",
    "start": "1618400",
    "end": "1625760"
  },
  {
    "text": "feature so it's similar to implicit conversions feature and actually i want",
    "start": "1625760",
    "end": "1631120"
  },
  {
    "text": "to join them together because the they should works where in very similar",
    "start": "1631120",
    "end": "1637440"
  },
  {
    "text": "way uh when implicit parameters were added",
    "start": "1637440",
    "end": "1643039"
  },
  {
    "text": "implicitly we can just invoke this action",
    "start": "1643039",
    "end": "1648320"
  },
  {
    "text": "and to see list of actual implicit parameters and even navigate to any of this",
    "start": "1648320",
    "end": "1656480"
  },
  {
    "text": "symbol comprehension where you don't see the method call",
    "start": "1656480",
    "end": "1664000"
  },
  {
    "start": "1662000",
    "end": "1662000"
  },
  {
    "text": "would that work in a full comprehension for for or is it work for for",
    "start": "1664000",
    "end": "1669039"
  },
  {
    "text": "compressions yes because there's no method you could navigate on you just have enough the comprehension but you",
    "start": "1669039",
    "end": "1675200"
  },
  {
    "text": "don't see the actual flat level i'm not sure that it works for four comprehensions so probably",
    "start": "1675200",
    "end": "1682480"
  },
  {
    "text": "i'll check it actually i i want to in invest some time of joining together",
    "start": "1682480",
    "end": "1688720"
  },
  {
    "text": "implicit conversions and increased parameters i mean that for example you you go to implicit conversions lists and",
    "start": "1688720",
    "end": "1697039"
  },
  {
    "text": "some to sum of implicit conversions also can be",
    "start": "1697039",
    "end": "1702480"
  },
  {
    "text": "some implicit parameters also can be added implicitly so we we can extend",
    "start": "1702480",
    "end": "1708000"
  },
  {
    "text": "this recursively this feature so i think that i'll check for for comprehensions as",
    "start": "1708000",
    "end": "1714640"
  },
  {
    "text": "well so this is uh some kind of puzzle this is not related",
    "start": "1714640",
    "end": "1722159"
  },
  {
    "text": "to scala plugin you can see this example",
    "start": "1722159",
    "end": "1728080"
  },
  {
    "text": "it's about implicit parameters which here they are",
    "start": "1728080",
    "end": "1734320"
  },
  {
    "text": "passed explicitly and on the next slide they are passed",
    "start": "1734320",
    "end": "1739760"
  },
  {
    "text": "implicitly so i show you just first one",
    "start": "1739760",
    "end": "1745360"
  },
  {
    "text": "question is which of these code examples",
    "start": "1745360",
    "end": "1750480"
  },
  {
    "text": "actually compiles and which of them doesn't please don't say again that it is easy",
    "start": "1750480",
    "end": "1758159"
  },
  {
    "text": "it's not easy actually this one is not easy because you heard my feelings before",
    "start": "1758159",
    "end": "1766159"
  },
  {
    "text": "sorry for this okay so here we have map function with two",
    "start": "1766159",
    "end": "1773600"
  },
  {
    "text": "generic parameters and two implicit parameters the first of the of them is array of t and second is a",
    "start": "1773600",
    "end": "1781840"
  },
  {
    "text": "builder of t and r and we can we want to return r so we have two implicit",
    "start": "1781840",
    "end": "1788559"
  },
  {
    "text": "values is first is just array of integers and second is builder of t to t",
    "start": "1788559",
    "end": "1795200"
  },
  {
    "text": "so so why not to pass them implicitly or explicitly",
    "start": "1795200",
    "end": "1803600"
  },
  {
    "text": "so i i can make some small poll who think that",
    "start": "1803600",
    "end": "1809600"
  },
  {
    "text": "these two examples compiles",
    "start": "1809600",
    "end": "1814080"
  },
  {
    "text": "can you show the other one again can you show the other one again other one it's the same but",
    "start": "1815679",
    "end": "1822399"
  },
  {
    "text": "parameters passed explicitly implicitly actually",
    "start": "1822399",
    "end": "1827840"
  },
  {
    "text": "so nobody wants to participate in paul",
    "start": "1829279",
    "end": "1835320"
  },
  {
    "text": "what so explicit okay answer is is",
    "start": "1849440",
    "end": "1857279"
  },
  {
    "text": "that explicitly past parameters doesn't compile and implicitly",
    "start": "1857279",
    "end": "1862799"
  },
  {
    "text": "compiles the answer is okay it's not easy",
    "start": "1862799",
    "end": "1870639"
  },
  {
    "text": "here you can see that we want to pass x which is has arrived",
    "start": "1871520",
    "end": "1879120"
  },
  {
    "text": "in type so we can infer that t is integer and second",
    "start": "1879120",
    "end": "1885120"
  },
  {
    "text": "has builder of unknown type the unknown type and we want to",
    "start": "1885120",
    "end": "1891039"
  },
  {
    "text": "put it to t and r but from first parameter skull works a skull",
    "start": "1891039",
    "end": "1897440"
  },
  {
    "text": "type inference works in such way that we cannot infer from other parameters uh in",
    "start": "1897440",
    "end": "1904159"
  },
  {
    "text": "in the same parameter clause so we don't know any information about t",
    "start": "1904159",
    "end": "1909200"
  },
  {
    "text": "yet so in this case for builder we can infer also nothing type",
    "start": "1909200",
    "end": "1914320"
  },
  {
    "text": "so here we can infer that builder has nothing type",
    "start": "1914320",
    "end": "1919440"
  },
  {
    "text": "and here we can see that t also should be nothing so compiler can't compile",
    "start": "1919440",
    "end": "1926080"
  },
  {
    "text": "because t should be nothing and didn't simultaneously and for implicitly past",
    "start": "1926080",
    "end": "1932240"
  },
  {
    "text": "parameters color works in such way that every parameter is like",
    "start": "1932240",
    "end": "1937760"
  },
  {
    "text": "a single parameter close so uh firstly we we can find implicit",
    "start": "1937760",
    "end": "1944159"
  },
  {
    "text": "parameter x and infer that t is integer and then",
    "start": "1944159",
    "end": "1950480"
  },
  {
    "text": "in builder parameter search we use this information about the t is",
    "start": "1950480",
    "end": "1957279"
  },
  {
    "text": "integer so here we can infer that d and r is",
    "start": "1957279",
    "end": "1962559"
  },
  {
    "text": "actually integers",
    "start": "1962559",
    "end": "1965440"
  },
  {
    "text": "this is actually my almost new discovery about scholar language",
    "start": "1967679",
    "end": "1974399"
  },
  {
    "text": "i was slightly surprised but that implicit parameters pass explicitly",
    "start": "1974399",
    "end": "1980320"
  },
  {
    "text": "can sometimes not compile but",
    "start": "1980320",
    "end": "1986960"
  },
  {
    "text": "algorithm is really simple so that wasn't really a big problem to implement",
    "start": "1987120",
    "end": "1992720"
  },
  {
    "text": "it in scala plugin so let's return to scala",
    "start": "1992720",
    "end": "1998559"
  },
  {
    "start": "1995000",
    "end": "1995000"
  },
  {
    "text": "plugin features this is collections inspections it's very similar to the first one i showed",
    "start": "1998559",
    "end": "2005360"
  },
  {
    "text": "about is instance of an essence and stuff sometimes",
    "start": "2005360",
    "end": "2011279"
  },
  {
    "text": "especially when we learn collection api we",
    "start": "2011279",
    "end": "2016320"
  },
  {
    "text": "which contains more than 100 different functions",
    "start": "2016320",
    "end": "2022960"
  },
  {
    "text": "we can't learn all of them so in this case we sometimes can help",
    "start": "2022960",
    "end": "2030159"
  },
  {
    "text": "to reduce uh and to learn new functions so who can",
    "start": "2030159",
    "end": "2035679"
  },
  {
    "text": "tell me how we can replace this call",
    "start": "2035679",
    "end": "2041120"
  },
  {
    "text": "yeah i think this account yeah so intellij also knows that it's count",
    "start": "2041200",
    "end": "2048480"
  },
  {
    "text": "and suggests you to replace and also",
    "start": "2048480",
    "end": "2054320"
  },
  {
    "text": "for all inspections you can run inspection on whole your project repository and to",
    "start": "2054320",
    "end": "2061520"
  },
  {
    "text": "check this inspection and even fix all of",
    "start": "2061520",
    "end": "2066960"
  },
  {
    "text": "uh possible problem problematic places",
    "start": "2066960",
    "end": "2072240"
  },
  {
    "text": "how dangerous is that it's not dangerous you you can",
    "start": "2072399",
    "end": "2077919"
  },
  {
    "text": "fix them and then on commit just review all of uh changes",
    "start": "2077919",
    "end": "2083040"
  },
  {
    "text": "and see that all of them are very",
    "start": "2083040",
    "end": "2088240"
  },
  {
    "text": "that all of them are right actually uh",
    "start": "2088240",
    "end": "2093839"
  },
  {
    "start": "2092000",
    "end": "2092000"
  },
  {
    "text": "also i want to tell you about string conversions uh which is",
    "start": "2093839",
    "end": "2099359"
  },
  {
    "text": "very handy to when your",
    "start": "2099359",
    "end": "2104880"
  },
  {
    "text": "code started earlier than for example 2.9",
    "start": "2104880",
    "end": "2109920"
  },
  {
    "text": "when we didn't had didn't have",
    "start": "2109920",
    "end": "2115040"
  },
  {
    "text": "interpolated strings so you can just",
    "start": "2115040",
    "end": "2120160"
  },
  {
    "text": "for string concatenations invoke intention and",
    "start": "2120160",
    "end": "2125839"
  },
  {
    "text": "to convert into interpolated strings so i i for example sometimes discover",
    "start": "2125839",
    "end": "2133119"
  },
  {
    "text": "such places and want to replace it to interpolate a string",
    "start": "2133119",
    "end": "2139200"
  },
  {
    "text": "very much so intelligent helps me a lot",
    "start": "2139200",
    "end": "2145838"
  },
  {
    "text": "a new feature in intellij id is new refactoring which called introduce field",
    "start": "2146640",
    "end": "2153119"
  },
  {
    "text": "in scholar this name is is wrong because in called its introduced property should",
    "start": "2153119",
    "end": "2158720"
  },
  {
    "text": "be called but this name is inherited from",
    "start": "2158720",
    "end": "2165119"
  },
  {
    "text": "in general intelligent idea so let's take a look how it works",
    "start": "2165119",
    "end": "2172599"
  },
  {
    "text": "uh actually this is quite simple just can invoke uh ask to replace for example all",
    "start": "2172800",
    "end": "2180160"
  },
  {
    "text": "occurrences in this class and just call it",
    "start": "2180160",
    "end": "2186800"
  },
  {
    "text": "so we can see that we introduced new field and replaced all",
    "start": "2186800",
    "end": "2193040"
  },
  {
    "text": "variables all places of this expression in this class so it's similar to introduce variable",
    "start": "2193040",
    "end": "2198880"
  },
  {
    "text": "but it it can introduce to class level that's why we for example change introduce variable on class level it",
    "start": "2198880",
    "end": "2207200"
  },
  {
    "text": "also skinny rates it always generates",
    "start": "2207200",
    "end": "2213119"
  },
  {
    "text": "private value i mean that when you develop on constructor level so we also probably",
    "start": "2213119",
    "end": "2219920"
  },
  {
    "text": "want to use introduce variable but it shouldn't be a field so",
    "start": "2219920",
    "end": "2226560"
  },
  {
    "text": "we we changed it to generate all the private values",
    "start": "2226560",
    "end": "2231759"
  },
  {
    "text": "also almost new feature is a generation of companion objects",
    "start": "2234800",
    "end": "2240480"
  },
  {
    "text": "so earlier in school plugin you have had an option to",
    "start": "2240480",
    "end": "2245599"
  },
  {
    "text": "type manually object to class and then for name use basic completion",
    "start": "2245599",
    "end": "2251040"
  },
  {
    "text": "it searches among neighbor classes",
    "start": "2251040",
    "end": "2256079"
  },
  {
    "text": "collects their names and suggests name for new created object or class",
    "start": "2256079",
    "end": "2263520"
  },
  {
    "text": "but now you can just use generate action alt insert and",
    "start": "2263520",
    "end": "2268960"
  },
  {
    "text": "generate complaining object for any of classes also in intellij idea 13",
    "start": "2268960",
    "end": "2276960"
  },
  {
    "text": "it's available generation of equals hash code methods",
    "start": "2276960",
    "end": "2283359"
  },
  {
    "text": "ins in front in truly functional style and i i can show you this is actually",
    "start": "2283359",
    "end": "2289280"
  },
  {
    "text": "the first difference uh between uh intelligent idea 12 and intellij idea 13",
    "start": "2289280",
    "end": "2295520"
  },
  {
    "text": "because we need we we needed to some changes of platform",
    "start": "2295520",
    "end": "2302880"
  },
  {
    "text": "which are available only in intellij idea 13. so we can just invoke",
    "start": "2302880",
    "end": "2309520"
  },
  {
    "text": "generate action choose equals and hashcode here pre-selected only values",
    "start": "2309520",
    "end": "2314640"
  },
  {
    "text": "because it's not really good idea to generate",
    "start": "2314640",
    "end": "2320160"
  },
  {
    "text": "equals and hashcode for variables then we can choose it and",
    "start": "2320160",
    "end": "2325599"
  },
  {
    "text": "get truly functional equals in hashcode and chemicals math",
    "start": "2325599",
    "end": "2334720"
  },
  {
    "text": "okay and another cool feature in intel idea 13 version is rearranger",
    "start": "2336640",
    "end": "2344240"
  },
  {
    "text": "so we all know about reformatted feature which can keep your",
    "start": "2344240",
    "end": "2351119"
  },
  {
    "text": "code formatted very well but also in intellij idea 13 plugin",
    "start": "2351119",
    "end": "2359599"
  },
  {
    "text": "we will have rearranger feature it will be available from next",
    "start": "2359599",
    "end": "2365040"
  },
  {
    "text": "available version for intelligent dn13 so let's keep class members in order",
    "start": "2365040",
    "end": "2372320"
  },
  {
    "text": "you can see here rearranger demo with complete mess of members so we can see",
    "start": "2372320",
    "end": "2379520"
  },
  {
    "text": "type private type value definition value private definition and so on",
    "start": "2379520",
    "end": "2385359"
  },
  {
    "text": "and now we can just invoke reformat code pick up rearrange entries and get",
    "start": "2385359",
    "end": "2392240"
  },
  {
    "text": "everything in right order types and private types values variables definitions",
    "start": "2392240",
    "end": "2399359"
  },
  {
    "text": "classes and also any order is configurable so you can",
    "start": "2399359",
    "end": "2405920"
  },
  {
    "text": "choose what you want and how how you want to keep order of",
    "start": "2405920",
    "end": "2411359"
  },
  {
    "text": "your members i also want to",
    "start": "2411359",
    "end": "2419359"
  },
  {
    "text": "tell you about plate 2 plugin which probably you use who use",
    "start": "2420079",
    "end": "2427359"
  },
  {
    "text": "only one two four people great uh now we have templates and rhodes",
    "start": "2427359",
    "end": "2434560"
  },
  {
    "text": "highlighting in intelligent plugin also have instant code assistance",
    "start": "2434560",
    "end": "2440320"
  },
  {
    "text": "so you don't need to recompile your project",
    "start": "2440320",
    "end": "2445760"
  },
  {
    "text": "to get some binaries and then infer code assistant from binaries we have in play two plugin",
    "start": "2445920",
    "end": "2454480"
  },
  {
    "text": "just instant consistent which based on sources on not on binaries",
    "start": "2454480",
    "end": "2460720"
  },
  {
    "text": "we also have rename find usages and quick navigation and all this stuff for everything from",
    "start": "2460720",
    "end": "2468640"
  },
  {
    "text": "templates and roads in play too and of course we we can everything inherited from",
    "start": "2468640",
    "end": "2476000"
  },
  {
    "text": "intellij ultimate edition which have javascript support coffeescript",
    "start": "2476000",
    "end": "2481520"
  },
  {
    "text": "css less and emmet what we want to implement in intellij 13",
    "start": "2481520",
    "end": "2487839"
  },
  {
    "text": "version is sbt integration when you uh will not need",
    "start": "2487839",
    "end": "2495200"
  },
  {
    "text": "a command line for play framework just use our sbt integration to generate",
    "start": "2495200",
    "end": "2503920"
  },
  {
    "text": "project files to keep them in synchronized between",
    "start": "2505280",
    "end": "2512240"
  },
  {
    "text": "sbt build file and intelligent project file and so on",
    "start": "2512400",
    "end": "2518640"
  },
  {
    "text": "that's what we have with play to integration and now let's talk about skull plug-in",
    "start": "2518640",
    "end": "2525040"
  },
  {
    "text": "code the first thing is that it's simple actually in general scala plug-in is",
    "start": "2525040",
    "end": "2532240"
  },
  {
    "text": "sophisticated i think it has a lot of not simple things but",
    "start": "2532240",
    "end": "2537680"
  },
  {
    "text": "most of parts are really simple and requires very basic knowledge to start",
    "start": "2537680",
    "end": "2543280"
  },
  {
    "text": "any development so if you need some feature you probably can extend scala plugin and it can be",
    "start": "2543280",
    "end": "2550400"
  },
  {
    "text": "really simple it has convenient api uh",
    "start": "2550400",
    "end": "2557040"
  },
  {
    "text": "everything starts from lexing and parsing of your code then building psi 3 over your parser tree beside trees",
    "start": "2557040",
    "end": "2565920"
  },
  {
    "text": "program structure interface in in intellij we can",
    "start": "2565920",
    "end": "2571920"
  },
  {
    "text": "merge psi trees on any changes so",
    "start": "2571920",
    "end": "2577680"
  },
  {
    "text": "when we change something uh we can generate new psi 3 and then merge it",
    "start": "2577680",
    "end": "2584319"
  },
  {
    "text": "with old one to keep classes",
    "start": "2584319",
    "end": "2589760"
  },
  {
    "text": "to do not regenerate a lot of psi elements so you can",
    "start": "2589760",
    "end": "2597359"
  },
  {
    "text": "keep some caches in these pci elements and",
    "start": "2597359",
    "end": "2602960"
  },
  {
    "text": "then analyze it okay psi is that a term from computer science or is that related",
    "start": "2602960",
    "end": "2608400"
  },
  {
    "text": "to the plugin is well known yes analyzer is based on psychology and",
    "start": "2608400",
    "end": "2615200"
  },
  {
    "text": "everything else is based on analyzer uh",
    "start": "2615200",
    "end": "2621359"
  },
  {
    "start": "2619000",
    "end": "2619000"
  },
  {
    "text": "so uh what is psi three exactly it's just uh",
    "start": "2621359",
    "end": "2626720"
  },
  {
    "text": "structure it's representation of every synthetic structure so like if you have if",
    "start": "2626720",
    "end": "2633280"
  },
  {
    "text": "statement for example then it have a proper interpretation a representation in pci tree like if",
    "start": "2633280",
    "end": "2640079"
  },
  {
    "text": "statement element you can navigate to parent elements of",
    "start": "2640079",
    "end": "2646640"
  },
  {
    "text": "this element to children store some cancers you can even change",
    "start": "2646640",
    "end": "2652720"
  },
  {
    "text": "elements so you can for example say to intellij replace child",
    "start": "2652720",
    "end": "2658400"
  },
  {
    "text": "and everything will be represented in your document as well",
    "start": "2658400",
    "end": "2663599"
  },
  {
    "text": "and you can also make indexes for pizza elements for example we we use indexes",
    "start": "2663599",
    "end": "2668960"
  },
  {
    "text": "for class names for class full qualified names so if we need to find some full qualified name we just go to indexes and",
    "start": "2668960",
    "end": "2677839"
  },
  {
    "text": "search through these indexes",
    "start": "2677839",
    "end": "2683359"
  },
  {
    "text": "so i want to show you a short demo how to implement some simple",
    "start": "2683359",
    "end": "2688839"
  },
  {
    "start": "2684000",
    "end": "2684000"
  },
  {
    "text": "inspection uh imagine situation when we need some name validator for example",
    "start": "2688839",
    "end": "2694800"
  },
  {
    "text": "function name must start from phone then uppercase letter val",
    "start": "2694800",
    "end": "2700400"
  },
  {
    "text": "for values and where var for variables that's just image in your situation because",
    "start": "2700400",
    "end": "2706240"
  },
  {
    "text": "code will be not will not look very well",
    "start": "2706240",
    "end": "2712560"
  },
  {
    "text": "so let's do it",
    "start": "2712560",
    "end": "2716000"
  },
  {
    "text": "i created some stop class and also i did added",
    "start": "2717760",
    "end": "2723839"
  },
  {
    "text": "some information that we want to add inspection to plug-in",
    "start": "2725760",
    "end": "2733440"
  },
  {
    "text": "it's very simple actually about so i don't want to tell you a lot about it",
    "start": "2733440",
    "end": "2739200"
  },
  {
    "text": "we have a xml element where we we can add any extension any entry point",
    "start": "2739200",
    "end": "2747119"
  },
  {
    "text": "to intellij api there are different entry points but one of them is local inspection so",
    "start": "2747119",
    "end": "2755200"
  },
  {
    "text": "we can add some inspection to scala editor",
    "start": "2755200",
    "end": "2760960"
  },
  {
    "text": "so how we can do it right now just extends abstract",
    "start": "2760960",
    "end": "2768880"
  },
  {
    "text": "inspection",
    "start": "2768960",
    "end": "2771960"
  },
  {
    "text": "uh with some id analyze",
    "start": "2776079",
    "end": "2781920"
  },
  {
    "text": "name inspection and name analyze",
    "start": "2781920",
    "end": "2788000"
  },
  {
    "text": "then we need to implement action 4 method which requires some partial",
    "start": "2790000",
    "end": "2795440"
  },
  {
    "text": "function so let's start we need to check",
    "start": "2795440",
    "end": "2801119"
  },
  {
    "text": "function name style so we we need to check function c function psi element",
    "start": "2801119",
    "end": "2808640"
  },
  {
    "text": "so let's function uh also we need uh",
    "start": "2808640",
    "end": "2815040"
  },
  {
    "text": "it's only in such case when function is class member so we we need to check that",
    "start": "2815040",
    "end": "2821440"
  },
  {
    "text": "function containing class is not now",
    "start": "2821440",
    "end": "2826720"
  },
  {
    "text": "and then we can and we now generate",
    "start": "2827359",
    "end": "2833440"
  },
  {
    "text": "some general stuff for for some prefix",
    "start": "2834000",
    "end": "2840720"
  },
  {
    "text": "some elements and holder holder we need to pass it here because",
    "start": "2840720",
    "end": "2846640"
  },
  {
    "text": "it's a class which collects information about bet code",
    "start": "2846640",
    "end": "2853119"
  },
  {
    "text": "so let's create methods from usage",
    "start": "2853119",
    "end": "2858480"
  },
  {
    "text": "to generate the method from the name i just invoked a quick fix it's alt",
    "start": "2858480",
    "end": "2863839"
  },
  {
    "text": "enter create method check name so it's here prefix",
    "start": "2863839",
    "end": "2871680"
  },
  {
    "text": "element we need c named",
    "start": "2871680",
    "end": "2877200"
  },
  {
    "text": "element because i i wanted to make this function to make",
    "start": "2877200",
    "end": "2882400"
  },
  {
    "text": "it more general not only for functions and hold them and we don't want to return anything",
    "start": "2882400",
    "end": "2889599"
  },
  {
    "text": "because this method with side effects so what we we need to do firstly is to",
    "start": "2889599",
    "end": "2897440"
  },
  {
    "text": "check that this element is in sources because of course libraries will not have",
    "start": "2897440",
    "end": "2905359"
  },
  {
    "text": "such name convention so we can check is in source",
    "start": "2905359",
    "end": "2912680"
  },
  {
    "text": "i just invoked gen global completion for this method because i don't remember",
    "start": "2914079",
    "end": "2919119"
  },
  {
    "text": "where to find this method so i invoke co till x",
    "start": "2919119",
    "end": "2924400"
  },
  {
    "text": "i can pause here and now",
    "start": "2924400",
    "end": "2931359"
  },
  {
    "text": "we need to check that name doesn't match to",
    "start": "2931359",
    "end": "2937520"
  },
  {
    "text": "to our prefix convention so if",
    "start": "2937520",
    "end": "2943839"
  },
  {
    "text": "we need is okay if element name",
    "start": "2944000",
    "end": "2951200"
  },
  {
    "text": "matches",
    "start": "2951200",
    "end": "2954200"
  },
  {
    "text": "prefix a set and some other stuff",
    "start": "2956559",
    "end": "2964480"
  },
  {
    "text": "okay not and also let's introduce variable",
    "start": "2966160",
    "end": "2972480"
  },
  {
    "text": "yeah so this is the case when we want uh to show inspection for this code",
    "start": "2972480",
    "end": "2979839"
  },
  {
    "text": "now we we need to just put this information to the editor and",
    "start": "2979839",
    "end": "2986160"
  },
  {
    "text": "to that appropriate a quick fix how to fix this thing",
    "start": "2986160",
    "end": "2991200"
  },
  {
    "text": "so just put folder register problem",
    "start": "2991200",
    "end": "2997200"
  },
  {
    "text": "and now we put element so element uh",
    "start": "2997280",
    "end": "3002400"
  },
  {
    "text": "we don't we need to highlight all function just name a identifier so we",
    "start": "3002400",
    "end": "3008800"
  },
  {
    "text": "need to highlight it show it here so description is like",
    "start": "3008800",
    "end": "3015839"
  },
  {
    "text": "name doesn't",
    "start": "3015839",
    "end": "3022240"
  },
  {
    "text": "match to prefix and",
    "start": "3022240",
    "end": "3029119"
  },
  {
    "text": "prefix and what we need more is a",
    "start": "3029119",
    "end": "3034480"
  },
  {
    "text": "highlighting type here i can use smart completion for",
    "start": "3034480",
    "end": "3040559"
  },
  {
    "text": "factory methods generic error of working",
    "start": "3040559",
    "end": "3047359"
  },
  {
    "text": "and also we need to add quick fix for our inspection",
    "start": "3047520",
    "end": "3053440"
  },
  {
    "text": "so here we add abstract fix",
    "start": "3053440",
    "end": "3058400"
  },
  {
    "text": "which also generates also implements methods to all",
    "start": "3059599",
    "end": "3065680"
  },
  {
    "text": "these new class",
    "start": "3065680",
    "end": "3071599"
  },
  {
    "text": "for this fix we we need to add name which is rename element",
    "start": "3071599",
    "end": "3079040"
  },
  {
    "text": "and to add some element",
    "start": "3079040",
    "end": "3083838"
  },
  {
    "text": "okay so now we need to rename this element to proper name so",
    "start": "3084960",
    "end": "3091200"
  },
  {
    "text": "new rename processor",
    "start": "3091200",
    "end": "3095960"
  },
  {
    "text": "so now i i can invoke smart completion to find project location",
    "start": "3098319",
    "end": "3104640"
  },
  {
    "text": "then pass element new name will be prefix",
    "start": "3104640",
    "end": "3111520"
  },
  {
    "text": "plus name dot capitalized and",
    "start": "3111520",
    "end": "3117200"
  },
  {
    "text": "some different stuff just run it so quick fix we'll rename our name to",
    "start": "3117200",
    "end": "3125119"
  },
  {
    "text": "to prefix with capitalize name actually it will not work for operator names but",
    "start": "3125119",
    "end": "3130400"
  },
  {
    "text": "i don't want to to spend more time on showing checking",
    "start": "3130400",
    "end": "3136240"
  },
  {
    "text": "that this is not operator name so let's take a look",
    "start": "3136240",
    "end": "3141440"
  },
  {
    "text": "how it works so just run debug intellij idea",
    "start": "3141440",
    "end": "3146800"
  },
  {
    "text": "so currently we wrote it only for function but we wrote generic check name method which we can",
    "start": "3146800",
    "end": "3155119"
  },
  {
    "text": "extend for all other values or variables",
    "start": "3155119",
    "end": "3160480"
  },
  {
    "text": "okay let's start slowly slowly",
    "start": "3164880",
    "end": "3171359"
  },
  {
    "text": "so you can see that it just works name doesn't match to prefix we can",
    "start": "3177760",
    "end": "3184240"
  },
  {
    "text": "put it here also and for example to fix all these problems",
    "start": "3184240",
    "end": "3189520"
  },
  {
    "text": "with one action fix all analyze here you can see that we've just fixed it right here",
    "start": "3189520",
    "end": "3198640"
  },
  {
    "text": "i i'm sure that it was simple to me because i i prepared",
    "start": "3200800",
    "end": "3206400"
  },
  {
    "text": "for this talk so this actually will cost more time but",
    "start": "3206400",
    "end": "3212720"
  },
  {
    "text": "again everybody can do it for for yourself if you need some",
    "start": "3212720",
    "end": "3217839"
  },
  {
    "text": "special business processes for your project also of course you can ask anything",
    "start": "3217839",
    "end": "3225359"
  },
  {
    "text": "from from me about api and your problems if you have it",
    "start": "3225359",
    "end": "3232480"
  },
  {
    "text": "okay so that was about skull plug-in sources and",
    "start": "3233440",
    "end": "3238880"
  },
  {
    "text": "i want now to go to third party it's about roadmap of skull plug-in and play plugin",
    "start": "3238880",
    "end": "3247359"
  },
  {
    "start": "3246000",
    "end": "3246000"
  },
  {
    "text": "next thing is project configuration which which is pain point right now in",
    "start": "3247359",
    "end": "3252400"
  },
  {
    "text": "scala plugin so we want to remove scala facet from configurations",
    "start": "3252400",
    "end": "3258559"
  },
  {
    "text": "we want to add to change it to just simple scholar library where you can define",
    "start": "3258559",
    "end": "3266480"
  },
  {
    "text": "library class pass and compiler class plus separately so this library will be possible to",
    "start": "3266480",
    "end": "3273280"
  },
  {
    "text": "share between different modules so and of course we want to make better",
    "start": "3273280",
    "end": "3279280"
  },
  {
    "text": "usability of initial project creation so you you just",
    "start": "3279280",
    "end": "3284400"
  },
  {
    "text": "put some settings on great project creation and everything works right after project creation so",
    "start": "3284400",
    "end": "3292480"
  },
  {
    "text": "it it will be better it will have better experience for new buys",
    "start": "3292480",
    "end": "3297520"
  },
  {
    "text": "this is what we we want to do in the nearest future like week or two weeks",
    "start": "3297520",
    "end": "3304720"
  },
  {
    "text": "uh next things compilation uh currently we implemented zen compiler for",
    "start": "3305520",
    "end": "3311200"
  },
  {
    "text": "our external build system we want also want to try own dependency",
    "start": "3311200",
    "end": "3317839"
  },
  {
    "text": "management uh for scala to make it faster and to return possibility to",
    "start": "3317839",
    "end": "3323839"
  },
  {
    "text": "compile single file of course zinc compiler will be still",
    "start": "3323839",
    "end": "3329839"
  },
  {
    "start": "3327000",
    "end": "3327000"
  },
  {
    "text": "available but we also want our own dependency management just to try",
    "start": "3329839",
    "end": "3336160"
  },
  {
    "text": "new things to make things faster and to check if it will be usable",
    "start": "3336160",
    "end": "3341839"
  },
  {
    "text": "for people for for incremental compilation have you considered using spt for them",
    "start": "3341839",
    "end": "3349040"
  },
  {
    "text": "no we consider to use just rose colossi",
    "start": "3349040",
    "end": "3354720"
  },
  {
    "text": "but with our own dependency management which probably will be fast",
    "start": "3354720",
    "end": "3362520"
  },
  {
    "text": "the next thing we want is to do to do sbt integration to make it working for",
    "start": "3365280",
    "end": "3371119"
  },
  {
    "text": "most sbt projects uh right now it works probably for half of his bt projects",
    "start": "3371119",
    "end": "3378880"
  },
  {
    "text": "so you can try a nightly build and to see if it works for you",
    "start": "3378880",
    "end": "3384400"
  },
  {
    "text": "so currently implement it in a way that you can import sbt project and to make",
    "start": "3384400",
    "end": "3390079"
  },
  {
    "text": "automatic synchronization of your of your built",
    "start": "3390079",
    "end": "3395520"
  },
  {
    "text": "and intelligent project also we want to end sbt console inside",
    "start": "3395520",
    "end": "3401599"
  },
  {
    "text": "of an idea to run sbt task right from idea and of",
    "start": "3401599",
    "end": "3407760"
  },
  {
    "text": "course to bundle it to skull plug-in what about integration i just said",
    "start": "3407760",
    "end": "3413119"
  },
  {
    "text": "earlier that we want to integrate with play 2 plugin as well",
    "start": "3413119",
    "end": "3419839"
  },
  {
    "start": "3419000",
    "end": "3419000"
  },
  {
    "text": "we also want to do some infrastructure to support compile plugins",
    "start": "3420319",
    "end": "3426000"
  },
  {
    "text": "in intellij idea because currently",
    "start": "3426000",
    "end": "3431760"
  },
  {
    "text": "compiler plugin writers must think about writing something i showed you",
    "start": "3431760",
    "end": "3438880"
  },
  {
    "text": "about inspection i mean writing extension to scala plugin but",
    "start": "3438880",
    "end": "3444559"
  },
  {
    "text": "actually we want to implement something simpler for them so we can uh in these cases we",
    "start": "3444559",
    "end": "3451760"
  },
  {
    "text": "you you will be able just put some small instructions and describe what you want",
    "start": "3451760",
    "end": "3457599"
  },
  {
    "text": "from this compiler plugin and probably to bundle these instructions to",
    "start": "3457599",
    "end": "3464960"
  },
  {
    "text": "compile plugin binaries so intellij will be able to read it from binaries",
    "start": "3464960",
    "end": "3471200"
  },
  {
    "text": "and just to start highlight it in",
    "start": "3471200",
    "end": "3476480"
  },
  {
    "text": "in right way in editor so probably this meta information will make possible",
    "start": "3476480",
    "end": "3483920"
  },
  {
    "text": "to simplify usages of macros if somebody use it",
    "start": "3483920",
    "end": "3489839"
  },
  {
    "text": "and other things we want to do is ssp support who actually use it",
    "start": "3489839",
    "end": "3496000"
  },
  {
    "text": "right now nobody okay this is different template engine",
    "start": "3496000",
    "end": "3503200"
  },
  {
    "text": "than plate 2 has probably slightly it's slightly",
    "start": "3503200",
    "end": "3509599"
  },
  {
    "text": "different i don't want to tell it's better or not so we want to implement it very soon",
    "start": "3509599",
    "end": "3517760"
  },
  {
    "text": "other things is debugger so better step over into like",
    "start": "3517760",
    "end": "3523119"
  },
  {
    "text": "if you have four comprehensions it's for gvm it's of course it's when you do",
    "start": "3523119",
    "end": "3529520"
  },
  {
    "text": "step over you just go",
    "start": "3529520",
    "end": "3535440"
  },
  {
    "text": "you you don't step into for for comprehension because it's just a different function",
    "start": "3535599",
    "end": "3543040"
  },
  {
    "text": "call to some functions of like map or flat map but",
    "start": "3543040",
    "end": "3548559"
  },
  {
    "text": "we want to do it better in intellij editor so",
    "start": "3548559",
    "end": "3553839"
  },
  {
    "text": "if you do step over so it goes into the uh for convention",
    "start": "3553839",
    "end": "3561520"
  },
  {
    "text": "and okay how would that work would you present a little window of how things actually are and then you can step",
    "start": "3561520",
    "end": "3567200"
  },
  {
    "text": "through that you see what i'm saying so the four comprehension really turns into other",
    "start": "3567200",
    "end": "3573599"
  },
  {
    "text": "things a sequence of filters and flat maps and things just we",
    "start": "3573599",
    "end": "3579280"
  },
  {
    "text": "currently we're just waiting for changes in intellij 13 api",
    "start": "3579280",
    "end": "3585119"
  },
  {
    "text": "so we can't implement anything right now because it's it's not possible but after",
    "start": "3585119",
    "end": "3590960"
  },
  {
    "text": "that we will see how it works how it will work because we even don't",
    "start": "3590960",
    "end": "3598240"
  },
  {
    "text": "thought a lot about it okay okay uh also we want to do some performance",
    "start": "3598559",
    "end": "3604880"
  },
  {
    "text": "improvements because uh some projects are still slow with intellij scalar plugin",
    "start": "3604880",
    "end": "3612000"
  },
  {
    "text": "and also we want to enable type a very highlighting which is",
    "start": "3612000",
    "end": "3617119"
  },
  {
    "text": "i think almost all of intel intelligent users use it",
    "start": "3617119",
    "end": "3622799"
  },
  {
    "text": "it so why not to enable it by default it will be",
    "start": "3622799",
    "end": "3628480"
  },
  {
    "text": "it will be still available to disable it for example if you make some presentation uh and you don't want to",
    "start": "3628480",
    "end": "3636480"
  },
  {
    "text": "have a rows in editor but it will be possible to in",
    "start": "3636480",
    "end": "3643839"
  },
  {
    "text": "for example for newbies they will see error right after creating new project",
    "start": "3643839",
    "end": "3650880"
  },
  {
    "text": "so that's all what i wanted to tell you about intelligent so thank you very much",
    "start": "3650880",
    "end": "3660119"
  },
  {
    "text": "you",
    "start": "3671040",
    "end": "3673119"
  }
]