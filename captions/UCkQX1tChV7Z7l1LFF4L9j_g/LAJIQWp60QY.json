[
  {
    "text": "okay hi everyone all right so um I'm Brian",
    "start": "9160",
    "end": "15400"
  },
  {
    "text": "English uh you can find me online everywhere at that username GitHub Twitter whatever everywhere I use that",
    "start": "15400",
    "end": "22960"
  },
  {
    "text": "username uh I work at DNA which is a pretty big Japanese Mobile gaming company uh we got Offices here in San",
    "start": "22960",
    "end": "29560"
  },
  {
    "text": "Francisco and all of our game servers use nodejs so that's why I'm here today and of course we're hiring like",
    "start": "29560",
    "end": "36960"
  },
  {
    "text": "crazy so if you any of this stuff is interesting to you come and talk to me",
    "start": "36960",
    "end": "42280"
  },
  {
    "text": "afterwards uh so I'm here today to talk about converting existing apis over to",
    "start": "42280",
    "end": "48039"
  },
  {
    "text": "using promises both internally and externally and so what I mean by that is uh the innards of all your methods are",
    "start": "48039",
    "end": "53840"
  },
  {
    "text": "using promises all the way down the chain uh so we've been going through this process at DNA for the past few",
    "start": "53840",
    "end": "59359"
  },
  {
    "text": "months and so yeah would like to share it so uh our team uh builds a set of",
    "start": "59359",
    "end": "65720"
  },
  {
    "text": "common game server code so that other game teams can use it and uh so we have",
    "start": "65720",
    "end": "71479"
  },
  {
    "text": "sort of a an red tool to for building game servers uh so yeah originally all of",
    "start": "71479",
    "end": "78759"
  },
  {
    "text": "that code was just callbacks all the way normal node stuff but uh we started",
    "start": "78759",
    "end": "84159"
  },
  {
    "text": "taking a look at promises and we realized this is pretty cool stuff it'd be great to have our apis looking this way so so we started experimenting and",
    "start": "84159",
    "end": "91280"
  },
  {
    "text": "uh kind of fell in love with it and so here we are today",
    "start": "91280",
    "end": "96479"
  },
  {
    "text": "uh so yeah one of the bigger concerns was backward compatibility so we have",
    "start": "96479",
    "end": "102200"
  },
  {
    "text": "lots of game teams depend on this code and so we wanted to make sure that they didn't have to move all of their code",
    "start": "102200",
    "end": "107399"
  },
  {
    "text": "over if they wanted to use any of the new features of our API or anything like that so uh backward compatibility was a",
    "start": "107399",
    "end": "114159"
  },
  {
    "text": "pretty big concern so that's one thing I definitely want to talk about today uh also I realized I probably have",
    "start": "114159",
    "end": "121000"
  },
  {
    "text": "the only talk here at forwardjs that has backward in the title um so I I think that's pretty reasonable",
    "start": "121000",
    "end": "128239"
  },
  {
    "text": "though because backward compatibility is pretty much the only way of moving forward if you want to be responsible I",
    "start": "128239",
    "end": "134200"
  },
  {
    "text": "think uh so also any of the stuff I'm going to show you today I've only really done from a nodejs perspective um I",
    "start": "134200",
    "end": "140959"
  },
  {
    "text": "haven't done any front front end work in years so uh if you're a front-end JavaScript developer uh use",
    "start": "140959",
    "end": "148160"
  },
  {
    "text": "browserify all right so um probably some of you maybe most of",
    "start": "148160",
    "end": "154599"
  },
  {
    "text": "you already know what promises are but um best to go through a quick intro I",
    "start": "154599",
    "end": "160599"
  },
  {
    "text": "think so let's let's go through a couple of the basics so here's the definition both from the promises A+ spec and from",
    "start": "160599",
    "end": "168239"
  },
  {
    "text": "the es6 draft so promises A+ says a promise represents the eventual result of an asynchronous operation all right",
    "start": "168239",
    "end": "175440"
  },
  {
    "text": "that's not very clear I I I think the es6 draft says it a little better so that's a a PR is an object that is used",
    "start": "175440",
    "end": "181080"
  },
  {
    "text": "as a placeholder for the eventual results of a deferred and possibly asynchronous computation so I think that",
    "start": "181080",
    "end": "187799"
  },
  {
    "text": "that definition is a little bit better because it describes it as an object and not just as a placeholder and not just",
    "start": "187799",
    "end": "193920"
  },
  {
    "text": "something that represents something because it is definitely an object okay so the most important thing",
    "start": "193920",
    "end": "202080"
  },
  {
    "text": "about promises is that is that they're basically little State machines you've got three states that can be in pending",
    "start": "202080",
    "end": "207120"
  },
  {
    "text": "fulfilled and rejected they can only be in one of these states at a given time uh and they can only go from pending to",
    "start": "207120",
    "end": "213400"
  },
  {
    "text": "fulfilled or pending to rejected and not from fulfilled to rejected or the other",
    "start": "213400",
    "end": "218680"
  },
  {
    "text": "way around so basically once it's hit a fulfilled or rejected State it's done",
    "start": "218680",
    "end": "223879"
  },
  {
    "text": "that's the end of the state machine uh so the fulfilled and rejected States also have values associated with",
    "start": "223879",
    "end": "230040"
  },
  {
    "text": "them so these values basically represent the result of your computation right so",
    "start": "230040",
    "end": "236760"
  },
  {
    "text": "in the F in the fulfilled case that's just basically the result of what your function was doing right so if you're",
    "start": "236760",
    "end": "241959"
  },
  {
    "text": "thinking of this from a node perspective it might be equivalent to the second parameter in your callback whereas in",
    "start": "241959",
    "end": "247280"
  },
  {
    "text": "the rejected case that's your rejection reason is what it's called in the spec",
    "start": "247280",
    "end": "252480"
  },
  {
    "text": "is what's it's the value that's associated with that state and the rejection reason hopefully is an error",
    "start": "252480",
    "end": "258840"
  },
  {
    "text": "class object like an instance of the error class in JavaScript okay so uh also I want to",
    "start": "258840",
    "end": "265800"
  },
  {
    "text": "point out that some Frameworks some standards some specs will refer to fulfilled as resolved um I'm going to",
    "start": "265800",
    "end": "272400"
  },
  {
    "text": "use fulfilled for this presentation if you prefer resolved but just substitute in your mind I",
    "start": "272400",
    "end": "279280"
  },
  {
    "text": "guess all right so I guess the next most important thing about promises is that uh they have a function on them called",
    "start": "279280",
    "end": "285320"
  },
  {
    "text": "then so that's where a lot of the magic happens and that's what makes them really useful to us for dealing with",
    "start": "285320",
    "end": "290960"
  },
  {
    "text": "asynchronous code so here's an example um I've got this function get result promise which",
    "start": "290960",
    "end": "296919"
  },
  {
    "text": "returns a promise and so because of that we've got a function then on it all right so then takes in two callbacks the",
    "start": "296919",
    "end": "304280"
  },
  {
    "text": "first one is one that will take in your uh resultant value like again if we're",
    "start": "304280",
    "end": "309479"
  },
  {
    "text": "talking about the first value or sorry the second value in a node callback and the uh the second function",
    "start": "309479",
    "end": "316919"
  },
  {
    "text": "would be like the first parameter so more of your error object so only one of these will ever get called because again",
    "start": "316919",
    "end": "323160"
  },
  {
    "text": "we're dealing with the state machine it's only going to be either in the fulfilled or the rejected",
    "start": "323160",
    "end": "328440"
  },
  {
    "text": "State okay okay so there's this there's this syntax and then we've got this",
    "start": "328440",
    "end": "333639"
  },
  {
    "text": "syntax here right so we've got then and catch so the the important thing here is that both of the callbacks in then are",
    "start": "333639",
    "end": "341680"
  },
  {
    "text": "optional so just doing then like this without a second uh function being",
    "start": "341680",
    "end": "347160"
  },
  {
    "text": "passed into it is totally fine so that means we're only dealing with the success case so in the error case it'll",
    "start": "347160",
    "end": "354360"
  },
  {
    "text": "get caught by this catch down here so catch is equivalent to running uh then",
    "start": "354360",
    "end": "359680"
  },
  {
    "text": "with no first parameter and only the second parameter uh so yeah so the great thing",
    "start": "359680",
    "end": "367599"
  },
  {
    "text": "about them is that we can start chaining things together like this right so with then you can uh you can do all",
    "start": "367599",
    "end": "374880"
  },
  {
    "text": "kinds of stuff in there it doesn't have to be just re re doesn't have to be just reading the result you can be be",
    "start": "374880",
    "end": "380759"
  },
  {
    "text": "returning something right so here I'm reading the result value and then I'm adding one to it and then just passing",
    "start": "380759",
    "end": "386199"
  },
  {
    "text": "it along and the way you pass it along inside a then Handler is by returning um you could also throw an",
    "start": "386199",
    "end": "392360"
  },
  {
    "text": "error in there and that would be that would make the function that's returned by then uh rejecting promise sorry it",
    "start": "392360",
    "end": "399720"
  },
  {
    "text": "make the promise a rejecting promise there we go uh so yeah that's great so",
    "start": "399720",
    "end": "405479"
  },
  {
    "text": "then returns promises that's that's a very important thing right there so also you can uh you know",
    "start": "405479",
    "end": "412400"
  },
  {
    "text": "instead of returning value you can also return a promise which will uh basically make the the fun the",
    "start": "412400",
    "end": "418520"
  },
  {
    "text": "promise returned by then fulfill with the same value as that promise there the one that's returned by get another",
    "start": "418520",
    "end": "423720"
  },
  {
    "text": "result promise okay so uh that that was my quick intro",
    "start": "423720",
    "end": "431160"
  },
  {
    "text": "to promises uh hopefully you still think promises are",
    "start": "431160",
    "end": "436240"
  },
  {
    "text": "cool uh so if you're like me and like the company I work for you have a mountain of really old code and you know",
    "start": "436240",
    "end": "444840"
  },
  {
    "text": "it's not necessarily straightforward to convert um you know",
    "start": "444840",
    "end": "450039"
  },
  {
    "text": "all that mountain of code into stuff that uses promises all over the place so I mean let's start from the",
    "start": "450039",
    "end": "456520"
  },
  {
    "text": "bottom right sometime somewhere you're going to have to use a function that returns a promise so we can go forward",
    "start": "456520",
    "end": "462240"
  },
  {
    "text": "with the examples that you saw so unfortunately for for us from the node perspective none of the node built-ins",
    "start": "462240",
    "end": "469080"
  },
  {
    "text": "return promises instead they're all callback sty and uh there are some modules on mpm that will return promises",
    "start": "469080",
    "end": "476560"
  },
  {
    "text": "but not very many and the standard is still callbacks pretty much everywhere",
    "start": "476560",
    "end": "481680"
  },
  {
    "text": "so uh I mean what do you do right we I mean um we could start wrapping up all",
    "start": "481680",
    "end": "487159"
  },
  {
    "text": "of these apis with the promised Constructor but uh I I haven't even",
    "start": "487159",
    "end": "492520"
  },
  {
    "text": "talked about the promised Constructor yet because most of the time you don't need it um and you don't need it because of",
    "start": "492520",
    "end": "498599"
  },
  {
    "text": "some cool libraries like Bluebird so Bluebird is a pretty awesome implementation of promises written by",
    "start": "498599",
    "end": "505240"
  },
  {
    "text": "this guy named Pekka Antonov now Pekka is very very big on performance so",
    "start": "505240",
    "end": "511400"
  },
  {
    "text": "Bluebird turns out to perform very well compared to some other libraries and it also provides a bunch of nice little",
    "start": "511400",
    "end": "516760"
  },
  {
    "text": "helper functions that'll help you get going so I mean promises are in es6",
    "start": "516760",
    "end": "523399"
  },
  {
    "text": "draft right so some environments will support them n natively i mean you can get you can get them in Chrome but",
    "start": "523399",
    "end": "530040"
  },
  {
    "text": "they're like slightly off speec I don't remember the exact details but I mean",
    "start": "530040",
    "end": "535360"
  },
  {
    "text": "libraries like Bluebird and Q are going to be helpful no matter what because they're all going to provide extra helper stuff on top of the",
    "start": "535360",
    "end": "542040"
  },
  {
    "text": "spec so yeah we use Bluebird at DNA and we're pretty happy with it and it's",
    "start": "542040",
    "end": "547120"
  },
  {
    "text": "pretty easy to use like everything in node you're going to npm install it and just require it so basically we're going",
    "start": "547120",
    "end": "554160"
  },
  {
    "text": "to require Bluebird and use it as our promise implementation just like that we're not going to be like our Bluebird",
    "start": "554160",
    "end": "560399"
  },
  {
    "text": "equals Bluebird or something like that this just makes things a whole lot easier so let's see that in action this",
    "start": "560399",
    "end": "567480"
  },
  {
    "text": "is one of the most uh important features a bluebird is the function promisify which you'll see on the third line there",
    "start": "567480",
    "end": "573760"
  },
  {
    "text": "uh basically it'll take any function that accepts a call back as its last parameter and make a promised version of",
    "start": "573760",
    "end": "579959"
  },
  {
    "text": "it so here I'm using read file from the from nodes FS built-in",
    "start": "579959",
    "end": "586320"
  },
  {
    "text": "library and just um yeah I'm running read file reading a file called stuff.",
    "start": "586320",
    "end": "592920"
  },
  {
    "text": "Json and uh passing me into Json parse so again I can use Json pars here just",
    "start": "592920",
    "end": "600160"
  },
  {
    "text": "like any other function as my then Handler function in this case the Fulfillment Handler function and the",
    "start": "600160",
    "end": "606959"
  },
  {
    "text": "reason I can do that is because Json to parse will take in a great big object in",
    "start": "606959",
    "end": "613000"
  },
  {
    "text": "this case a string and then return one thing as well so this takes in one thing",
    "start": "613000",
    "end": "618360"
  },
  {
    "text": "returns one thing everything's happy it's great so it can be used quite easily as something in then so that's",
    "start": "618360",
    "end": "624279"
  },
  {
    "text": "one interesting thing is that it doesn't always have to be asynchronous code that ends up in your fulfillment handlers or your Air",
    "start": "624279",
    "end": "631640"
  },
  {
    "text": "Handlers okay let's",
    "start": "631640",
    "end": "637200"
  },
  {
    "text": "see cool so yeah this is uh promisify all that's another useful thing on Bluebird",
    "start": "637480",
    "end": "645160"
  },
  {
    "text": "uh promisify all is great because it'll take any object in this case I'm just taking the fs library in and of itself",
    "start": "645160",
    "end": "652160"
  },
  {
    "text": "it'll find all the functions on it and basically create an asynchronous version of them and by asynchronous what I really mean here is something that",
    "start": "652160",
    "end": "657760"
  },
  {
    "text": "returns promises so you might see that in some of my further slides I'm using async async as a suffix on something",
    "start": "657760",
    "end": "663480"
  },
  {
    "text": "that would already exist and the idea here is I'm just taking a function that would already uh call a call back uh",
    "start": "663480",
    "end": "670279"
  },
  {
    "text": "that's passed in as the last parameter and then uh and just operate that ways",
    "start": "670279",
    "end": "675560"
  },
  {
    "text": "if it's in promised line so that's pretty cool",
    "start": "675560",
    "end": "681000"
  },
  {
    "text": "Okay cool so also it's important to note that functions like promisify and promisify all as they are in Bluebird",
    "start": "681000",
    "end": "687800"
  },
  {
    "text": "and probably some other libraries are a little bit performance intensive so if you're doing this in node probably you don't want to do this like in a request",
    "start": "687800",
    "end": "694959"
  },
  {
    "text": "response cycle you probably want to do this all at startup during your initialization time if you can obviously",
    "start": "694959",
    "end": "701160"
  },
  {
    "text": "there's some cases you can't and you know just deal with it all right so that's all cool but you",
    "start": "701160",
    "end": "708160"
  },
  {
    "text": "know as as the title of this talk and kind of a point I've been harping on is backward",
    "start": "708160",
    "end": "713720"
  },
  {
    "text": "compatibility right so I mean when you're adapting your code to use promises in this way you're probably going to want to be backward comp",
    "start": "713720",
    "end": "719240"
  },
  {
    "text": "compatible for some amount of time maybe not forever you know depending on how you do your releases maybe you're using",
    "start": "719240",
    "end": "725360"
  },
  {
    "text": "sber or something like that you want to push new major release later on but for a certain amount of time you're going to",
    "start": "725360",
    "end": "730440"
  },
  {
    "text": "want to be Backward Compatible in order to make your API consumers happy so Bluebird makes this very",
    "start": "730440",
    "end": "736680"
  },
  {
    "text": "easy so here here's an example I've got some function get User it's getting some",
    "start": "736680",
    "end": "742639"
  },
  {
    "text": "something from a DB then getting something else from another DB so it's got to do a couple of things that are asynchronous and this let's just say",
    "start": "742639",
    "end": "749680"
  },
  {
    "text": "this is like an existing uh function in your internal API",
    "start": "749680",
    "end": "754839"
  },
  {
    "text": "right so I mean now I've gone and permiss ified it right so I mean get",
    "start": "754839",
    "end": "761160"
  },
  {
    "text": "from DB and get other get from other DBA syncs so these are functions that I'm assuming we've run promisify all on the",
    "start": "761160",
    "end": "767519"
  },
  {
    "text": "library that provides them right so now I've got these functions that return promises here and that's great",
    "start": "767519",
    "end": "773160"
  },
  {
    "text": "everything's great I'm returning promises everything's nice and cool um",
    "start": "773160",
    "end": "780720"
  },
  {
    "text": "so backward compatibility needs to happen and notify is the function that'll do that for you so Bluebird",
    "start": "780720",
    "end": "787440"
  },
  {
    "text": "provides this function called notify I'm sure some other libraries do but we've spent so much time in Bluebird that I'll",
    "start": "787440",
    "end": "792519"
  },
  {
    "text": "keep referencing Bluebird uh so notify will basically take in your call back and call it normally like you would",
    "start": "792519",
    "end": "799360"
  },
  {
    "text": "expect in node land where uh the first parameter is any errors that happen so basically it'll be the result of your",
    "start": "799360",
    "end": "805959"
  },
  {
    "text": "rejection Handler right and then the second parameter will be whatever would be passed into your fulfillment",
    "start": "805959",
    "end": "812079"
  },
  {
    "text": "Handler right um so the other thing is that if you know if a callback has not",
    "start": "812079",
    "end": "817720"
  },
  {
    "text": "passed to this function it's assumed that it is intent on returning that the color is intent on getting a promise out",
    "start": "817720",
    "end": "823040"
  },
  {
    "text": "of it so you know if you just call it with get user in some argument it would actually just go ahead and return a",
    "start": "823040",
    "end": "828839"
  },
  {
    "text": "promise uh so that's very cool it does everything for us we're nice and Backward",
    "start": "828839",
    "end": "833959"
  },
  {
    "text": "Compatible um so yeah this is uh those are some pretty",
    "start": "833959",
    "end": "839680"
  },
  {
    "text": "simple examples um so we have all kinds of code that does some slightly crazier",
    "start": "839680",
    "end": "844959"
  },
  {
    "text": "things it's not always just a matter of you know returning a promise or calling a call back or both right there's",
    "start": "844959",
    "end": "851199"
  },
  {
    "text": "there's weirder things that happen so say for example you have some kind of",
    "start": "851199",
    "end": "857399"
  },
  {
    "text": "hook function that you call inside your function and what I mean by that is something that'll be running somewhere",
    "start": "857399",
    "end": "864959"
  },
  {
    "text": "deep inside your function maybe a couple of call backs in that kind of thing and it's just allowing the color of your API",
    "start": "864959",
    "end": "871199"
  },
  {
    "text": "to do some other extra stuff inside the course of calling that",
    "start": "871199",
    "end": "876560"
  },
  {
    "text": "function so I mean we could just go ahead and assume that it returns a promise right it would be nice and then",
    "start": "876560",
    "end": "884839"
  },
  {
    "text": "we could just convert everything as we were converting before and that's all fine until we try and be Backward",
    "start": "884839",
    "end": "890959"
  },
  {
    "text": "Compatible all right so if we're doing that then we have to deal with the case where this hook function can either be",
    "start": "890959",
    "end": "898000"
  },
  {
    "text": "returning a promise or calling a call back we don't know which right so I mean you could try using you know the",
    "start": "898000",
    "end": "904440"
  },
  {
    "text": "promisify function that's in Bluebird uh but I mean this isn't going to work because it's already making the",
    "start": "904440",
    "end": "910680"
  },
  {
    "text": "Assumption of calling a call back right so it's not quite there but we're really",
    "start": "910680",
    "end": "917000"
  },
  {
    "text": "close right so this is uh sort of a simplified version of the permissi",
    "start": "917000",
    "end": "922160"
  },
  {
    "text": "function that's in Bluebird and it turns out that this is almost all that we need in order to get",
    "start": "922160",
    "end": "927560"
  },
  {
    "text": "this done right so let's look at it does um one thing I want to point out",
    "start": "927560",
    "end": "932839"
  },
  {
    "text": "here is I'm actually using the promise Constructor and I didn't introduce it before because most of the time you don't need it but in this case you do so",
    "start": "932839",
    "end": "940040"
  },
  {
    "text": "just a quick overview uh when you use the promise Constructor so you're going new promise and uh you're passing a",
    "start": "940040",
    "end": "946880"
  },
  {
    "text": "function that takes in a fulfill and a reject function so basically you can do all the asynchronous stuff you want",
    "start": "946880",
    "end": "952680"
  },
  {
    "text": "inside this Constructor and then just make sure that you call your call your fulfill and reject functions",
    "start": "952680",
    "end": "959639"
  },
  {
    "text": "so the way I'm using that here is I'm basically taking I'm taking the function call as",
    "start": "959639",
    "end": "965240"
  },
  {
    "text": "it was right with with the arguments object there and then I'm pushing on this callback function and then we're",
    "start": "965240",
    "end": "971000"
  },
  {
    "text": "just going to go ahead and call that function right so the the Callback function I'm putting on there it takes",
    "start": "971000",
    "end": "976319"
  },
  {
    "text": "an error and result and it'll call either the reject or the fulfill function based on the value or sorry",
    "start": "976319",
    "end": "981360"
  },
  {
    "text": "based on the results that we get back so that's great I mean that's pretty much all there is to uh promisify",
    "start": "981360",
    "end": "989839"
  },
  {
    "text": "but again what we really want to deal with is also the case where uh the function does return a promise and so we",
    "start": "989839",
    "end": "995959"
  },
  {
    "text": "don't have to deal with all this callback stuff right so that turns out to be relatively simple all we really",
    "start": "995959",
    "end": "1003160"
  },
  {
    "text": "need to do is take the value that's returned by the function that we're promisify and then check if it basically",
    "start": "1003160",
    "end": "1010079"
  },
  {
    "text": "quacks like a promise right so promises all of it dot then so we can check for that there's a few other things we can",
    "start": "1010079",
    "end": "1015399"
  },
  {
    "text": "do uh but this is just a simple example so if it does look like a promise we can",
    "start": "1015399",
    "end": "1021279"
  },
  {
    "text": "just go ahead and fulfill that and then the resulting promise will take on that fulfillment value uh the Fulfillment",
    "start": "1021279",
    "end": "1026880"
  },
  {
    "text": "value of uh p in this case Okay so uh one interesting thing",
    "start": "1026880",
    "end": "1032640"
  },
  {
    "text": "that we ran into with this approach is that when we had built some apis that",
    "start": "1032640",
    "end": "1037760"
  },
  {
    "text": "have that notify at the end right so they could return a promise or they can call a call back depending on how you uh",
    "start": "1037760",
    "end": "1043880"
  },
  {
    "text": "call it and you pass that function into something like this well then what happens right because it's intent on",
    "start": "1043880",
    "end": "1049600"
  },
  {
    "text": "doing both and this is intent on doing both so the result of that actually is",
    "start": "1049600",
    "end": "1055160"
  },
  {
    "text": "pretty simple when you think about it so uh your function is going to return a",
    "start": "1055160",
    "end": "1060880"
  },
  {
    "text": "promise always right so even when when you do notify and you call it with a",
    "start": "1060880",
    "end": "1066880"
  },
  {
    "text": "call back it'll still return a promise so that's what'll win basically right so that that one will be returned because",
    "start": "1066880",
    "end": "1073919"
  },
  {
    "text": "uh when you call your function the call back there that has reject and fulfill in it will only be called as some later",
    "start": "1073919",
    "end": "1078960"
  },
  {
    "text": "time you know if I'm thinking in node language it'll be in some next lib UV tick or something whereas the promises",
    "start": "1078960",
    "end": "1085280"
  },
  {
    "text": "return right away so right away we can go ahead and fulfill it so the first thing it ends up calling fulfill or reject will win right because again it's",
    "start": "1085280",
    "end": "1092320"
  },
  {
    "text": "a state machine you can't go from one state to another after you've gone from pending right so that ends up",
    "start": "1092320",
    "end": "1100559"
  },
  {
    "text": "working uh yeah I also want to point this is a rather optimistic version of this function like I said um like just",
    "start": "1100559",
    "end": "1107880"
  },
  {
    "text": "checking if there's something on called dot then is not sufficient but",
    "start": "1107880",
    "end": "1112919"
  },
  {
    "text": "uh yeah this this is good enough for example all right so here's our original",
    "start": "1112919",
    "end": "1118400"
  },
  {
    "text": "example I can use that safely promisify function that I built over here right",
    "start": "1118400",
    "end": "1124280"
  },
  {
    "text": "and uh just call that on that hook function as if I was doing promisify before right so it's exactly the same",
    "start": "1124280",
    "end": "1131240"
  },
  {
    "text": "we're just going to wrap it up with safely promisify then call it and that will guarantee us a promise so that's",
    "start": "1131240",
    "end": "1136919"
  },
  {
    "text": "great now we're Backward Compatible both uh with either taking a call back or returning a promise and with the hook",
    "start": "1136919",
    "end": "1143200"
  },
  {
    "text": "function either taking a call back or returning a promise so that's great so now we have some backward compatibility",
    "start": "1143200",
    "end": "1151080"
  },
  {
    "text": "that's great uh so yeah um before we moved over",
    "start": "1151080",
    "end": "1157120"
  },
  {
    "text": "to doing promises everywhere most of our code took advantage of async JS I think",
    "start": "1157120",
    "end": "1162240"
  },
  {
    "text": "uh most people who do all kinds of node or other code that involves a hell of a",
    "start": "1162240",
    "end": "1167760"
  },
  {
    "text": "lot of callbacks will definitely have some experience with asnc JS or similar asnc helper",
    "start": "1167760",
    "end": "1175000"
  },
  {
    "text": "libraries uh so it turns out you can do basically all these things that you would do with ASN JS with promises just",
    "start": "1175000",
    "end": "1181600"
  },
  {
    "text": "the same so let's go over a few of those things so here's one uh parallel is a",
    "start": "1181600",
    "end": "1188320"
  },
  {
    "text": "pretty common one basically you're firing off two asynchronous actions and waiting until both of them are done so",
    "start": "1188320",
    "end": "1195720"
  },
  {
    "text": "here I'm assuming that do something one and two are functions that taking callbacks and do something asynchronously and independently so",
    "start": "1195720",
    "end": "1202840"
  },
  {
    "text": "there's no State shared between them or anything like that uh so also I mean when you're using",
    "start": "1202840",
    "end": "1208760"
  },
  {
    "text": "a parallel and you know these functions don't require any context you can just",
    "start": "1208760",
    "end": "1214039"
  },
  {
    "text": "go ahead and pass these things in right but instead probably you're going to end up with some functions that have some",
    "start": "1214039",
    "end": "1220240"
  },
  {
    "text": "context so you have to call them on the object itself or do some bind or something like that so here I've just",
    "start": "1220240",
    "end": "1225320"
  },
  {
    "text": "wrapped them up in functions make it easy all right so the parallel equivalent or rough equivalent",
    "start": "1225320",
    "end": "1233440"
  },
  {
    "text": "with promises would be all all is provided by pretty much every uh promise",
    "start": "1233440",
    "end": "1238480"
  },
  {
    "text": "Library I'm I'm fairly certain that it's uh in the es6 draft so you should have it everywhere you have",
    "start": "1238480",
    "end": "1243919"
  },
  {
    "text": "promises uh so here I'm assuming that I've wrapped this Library called obj",
    "start": "1243919",
    "end": "1250960"
  },
  {
    "text": "with uh promise promisify all so now I've got these async versions that",
    "start": "1250960",
    "end": "1256080"
  },
  {
    "text": "return promises which is great so this the interesting thing here is that I'm",
    "start": "1256080",
    "end": "1261159"
  },
  {
    "text": "just calling these functions in the same scope that I was in before right so I'm just taking these and I'm returning",
    "start": "1261159",
    "end": "1267799"
  },
  {
    "text": "promises and the promises themselves are being what's passed into promise.all and",
    "start": "1267799",
    "end": "1273320"
  },
  {
    "text": "not functions that return promises so that's a key difference and I think it makes things",
    "start": "1273320",
    "end": "1280480"
  },
  {
    "text": "easier pardon me so in the in promise at all if if any of these functions um",
    "start": "1280480",
    "end": "1287799"
  },
  {
    "text": "reject rather then fulfill then the first one that rejects that'll be the rejection reason that is assumed for the",
    "start": "1287799",
    "end": "1294159"
  },
  {
    "text": "entire object that's returned by promised at all um but if in the case of success",
    "start": "1294159",
    "end": "1300559"
  },
  {
    "text": "where all these promises do in fact uh fulfill then all those fulfillment",
    "start": "1300559",
    "end": "1306080"
  },
  {
    "text": "values will be an array which will be the Fulfillment value for the whole promise that's returned by promise at",
    "start": "1306080",
    "end": "1312400"
  },
  {
    "text": "all so that's cool let's look at waterfall waterfall is a pretty big one",
    "start": "1312400",
    "end": "1318360"
  },
  {
    "text": "uh this this one was all over our code before we started converting over to promises so basically in in waterfall",
    "start": "1318360",
    "end": "1325720"
  },
  {
    "text": "you're doing so many synchronous action and then doing another one right after that this dependent on the value from",
    "start": "1325720",
    "end": "1331159"
  },
  {
    "text": "the first or maybe it isn't doesn't really matter um also Ayn that series would be the same thing except we",
    "start": "1331159",
    "end": "1336400"
  },
  {
    "text": "wouldn't be passing this Su value along all right so again the same assumptions about a library that we're using here",
    "start": "1336400",
    "end": "1344320"
  },
  {
    "text": "obge all right so I mean with promises this is is dead easy right uh the whole",
    "start": "1344320",
    "end": "1351919"
  },
  {
    "text": "structure of then is basically there to help you do this sort of thing right so um we're taking the value that's",
    "start": "1351919",
    "end": "1359200"
  },
  {
    "text": "resolved sorry that's fulfilled from do something one async which again this is a promise F all has been applied to this",
    "start": "1359200",
    "end": "1366559"
  },
  {
    "text": "object library right and we're getting some value out of it and then we can just go ahead and pass that to the second",
    "start": "1366559",
    "end": "1372120"
  },
  {
    "text": "function and return that and the whole thing returned by this will assume that",
    "start": "1372120",
    "end": "1377679"
  },
  {
    "text": "uh fulfilled value so that's dead easy but sometimes you",
    "start": "1377679",
    "end": "1383480"
  },
  {
    "text": "don't have a set of functions that you control right or maybe you do control them at just some other place the idea",
    "start": "1383480",
    "end": "1389559"
  },
  {
    "text": "is you end up with a dynamic set of functions um one good example of something that would do this is uh if",
    "start": "1389559",
    "end": "1395480"
  },
  {
    "text": "you use express expresses middleware chain or connects middleware chain right so a whole bunch of",
    "start": "1395480",
    "end": "1401120"
  },
  {
    "text": "functions get added and then executed uh like with in a nice asynchronous chain",
    "start": "1401120",
    "end": "1406919"
  },
  {
    "text": "right so uh I mean you can use async series or async waterfall to do that in you know",
    "start": "1406919",
    "end": "1412480"
  },
  {
    "text": "callback land so with promises it's not quite as simple but",
    "start": "1412480",
    "end": "1418679"
  },
  {
    "text": "it's pretty close right all we really have to do is use something like reduce and um I mean reduce you have in pretty",
    "start": "1418679",
    "end": "1425240"
  },
  {
    "text": "much any reasonable newer JavaScript environment on arrays right so you can just call that and just use that to tie",
    "start": "1425240",
    "end": "1432480"
  },
  {
    "text": "all the then blocks together all right um so I'm actually starting the chain",
    "start": "1432480",
    "end": "1439960"
  },
  {
    "text": "for reduce with promise. resolve so what promise. resolve does is it gives you a promise that is basically already in a",
    "start": "1439960",
    "end": "1447600"
  },
  {
    "text": "fulfilled state so you can go ahead and just use that to start off your",
    "start": "1447600",
    "end": "1453080"
  },
  {
    "text": "chain so the result will end up effectively doing the same thing as this",
    "start": "1453080",
    "end": "1458159"
  },
  {
    "text": "right pardon me so uh we take our array of functions we just iterate over it and",
    "start": "1458159",
    "end": "1463520"
  },
  {
    "text": "we're calling then inside each one or sorry we're calling then around each one",
    "start": "1463520",
    "end": "1468799"
  },
  {
    "text": "uh so yeah that's uh that's pretty much all there is for series another big one",
    "start": "1468799",
    "end": "1475080"
  },
  {
    "text": "that we tend to use all over the place is whilst uh so here we're basically",
    "start": "1475080",
    "end": "1481279"
  },
  {
    "text": "talking about uh we're passing in two functions and then a call back sorry that's three functions I guess uh so the",
    "start": "1481279",
    "end": "1488000"
  },
  {
    "text": "first one will be your condition right so this will be executed each time it loops and then if it's if it returns",
    "start": "1488000",
    "end": "1493840"
  },
  {
    "text": "true then it'll go into the next function execute that do something asynchronous and then call the call back",
    "start": "1493840",
    "end": "1499200"
  },
  {
    "text": "that's passed in all right so that's cool um but we definitely want a",
    "start": "1499200",
    "end": "1504720"
  },
  {
    "text": "promised version of this so you can construct a method like this to help you",
    "start": "1504720",
    "end": "1509760"
  },
  {
    "text": "out with uh General cases right so here again I've got a condition and an action and action is the function we're going",
    "start": "1509760",
    "end": "1515600"
  },
  {
    "text": "to run at each Loop iteration if condition is true right so here I've",
    "start": "1515600",
    "end": "1520960"
  },
  {
    "text": "gone in basically done a recursive call so in the waterfall or series example I",
    "start": "1520960",
    "end": "1527240"
  },
  {
    "text": "mean we were able to make a nice nice linear tree of thens we can't really do that in this case because at each step we have to check whether the condition",
    "start": "1527240",
    "end": "1534600"
  },
  {
    "text": "is still true so instead it's it it ends up looking rather",
    "start": "1534600",
    "end": "1541000"
  },
  {
    "text": "recursive so yeah that's that's all it really is to doing effectively a while",
    "start": "1541000",
    "end": "1546320"
  },
  {
    "text": "loop in uh in Promised Land all right so I mean here it is in",
    "start": "1546320",
    "end": "1553440"
  },
  {
    "text": "action it looks exactly the same as like our original case except with no callbacks right so this will return a",
    "start": "1553440",
    "end": "1560640"
  },
  {
    "text": "promise and basically this uh this should iterate five times and everything should be",
    "start": "1560640",
    "end": "1567159"
  },
  {
    "text": "great uh so we found ourselves doing a lot of this sort of thing making little helper functions like whilst and doing",
    "start": "1567159",
    "end": "1573399"
  },
  {
    "text": "something around reduce and that sort of thing so we put together a library of them uh we call it thrush um because",
    "start": "1573399",
    "end": "1581520"
  },
  {
    "text": "it's uh so I mean Bluebird is a member of the thrush family so we figured it'",
    "start": "1581520",
    "end": "1587039"
  },
  {
    "text": "be some pretty interesting names uh so some of the main or sorry uh you",
    "start": "1587039",
    "end": "1592559"
  },
  {
    "text": "can get it on our GitHub page and npm install it and all that good stuff and",
    "start": "1592559",
    "end": "1598600"
  },
  {
    "text": "you can use it pretty much the same way you would use Bluebird because basically we extend Bluebird with these extra",
    "start": "1598600",
    "end": "1604840"
  },
  {
    "text": "functions so anything that's available on Bluebird will also be available on Thresh so we've added the safely",
    "start": "1604840",
    "end": "1611919"
  },
  {
    "text": "permissi function that I showed you before that's the one where it'll either",
    "start": "1611919",
    "end": "1617240"
  },
  {
    "text": "uh return a promise or call or sorry it'll take a function that either calls a call back or returns a promise and makes sure that for sure it will return",
    "start": "1617240",
    "end": "1623200"
  },
  {
    "text": "a promise uh we have a function called series which will do a lot of the stuff",
    "start": "1623200",
    "end": "1628960"
  },
  {
    "text": "that you saw uh that would be similar to asnc Waterfall erasing series or say for",
    "start": "1628960",
    "end": "1635279"
  },
  {
    "text": "each there's a whole bunch of methods we kind of wrap them all up into one uh and also the wst function that I",
    "start": "1635279",
    "end": "1641159"
  },
  {
    "text": "just showed you okay so uh yeah there's also a few",
    "start": "1641159",
    "end": "1646480"
  },
  {
    "text": "other little functions in there that basically we built this to help us convert from code that was very heavy on using async JS uh over to using well",
    "start": "1646480",
    "end": "1654760"
  },
  {
    "text": "Bluebird and Promises all right so there's a you know depending on how you design your API",
    "start": "1654760",
    "end": "1661320"
  },
  {
    "text": "there might be a few other things you may have to deal with uh for us a lot of it came from the fact that you can only",
    "start": "1661320",
    "end": "1667600"
  },
  {
    "text": "pass you can only have one fulfillment value and one rejection reason and not both right so if you have some function",
    "start": "1667600",
    "end": "1674799"
  },
  {
    "text": "that uh you know you're calling your call back with you know null in the first parameter because this is because",
    "start": "1674799",
    "end": "1680600"
  },
  {
    "text": "it's a success case and then um you know two parameters after that instead of",
    "start": "1680600",
    "end": "1685960"
  },
  {
    "text": "just the one well then you might have some interesting things happen so here's an example of that right I'm doing get",
    "start": "1685960",
    "end": "1692200"
  },
  {
    "text": "things is doing something one doing something two all nicely in series callback style making sure to deal with",
    "start": "1692200",
    "end": "1697919"
  },
  {
    "text": "my errors right pardon me uh so and then we're calling the callback with two",
    "start": "1697919",
    "end": "1704360"
  },
  {
    "text": "results and this is this kind of thing was pretty much litered all over codee based still kind of is uh but this this",
    "start": "1704360",
    "end": "1710840"
  },
  {
    "text": "isn't that big of a deal right you'd think it would be because you know you only need you're only supposed to have one fulfillment value but it's not a big",
    "start": "1710840",
    "end": "1717399"
  },
  {
    "text": "deal so one thing we could do is we could call promisify on this whole thing now bluebird's version of perissi will",
    "start": "1717399",
    "end": "1723760"
  },
  {
    "text": "actually go ahead and take those two parameters and wrap those up as an array and that array will end up being your",
    "start": "1723760",
    "end": "1729120"
  },
  {
    "text": "fulfillment value which is great so we what we want to do when we convert our",
    "start": "1729120",
    "end": "1734760"
  },
  {
    "text": "apis over is emulate that behavior so that we can use Bluebird and other libraries that behave just like",
    "start": "1734760",
    "end": "1741000"
  },
  {
    "text": "it so we would do something like this right so notice I've taken the first",
    "start": "1741000",
    "end": "1747159"
  },
  {
    "text": "result and brought it into a higher scope you know that's because in in the previous example right we still have",
    "start": "1747159",
    "end": "1752919"
  },
  {
    "text": "access to Result One in the scope of the Callback of do something too but that's",
    "start": "1752919",
    "end": "1758720"
  },
  {
    "text": "not really the case here because everything's all nice and linear right so it brought Result One into a higher scope and now I'm able to",
    "start": "1758720",
    "end": "1765640"
  },
  {
    "text": "return an array with Result One and result two at the end of my uh promise",
    "start": "1765640",
    "end": "1771519"
  },
  {
    "text": "chain so I mean we could also have done something like pass it along as part of the Fulfillment value but you know this",
    "start": "1771519",
    "end": "1777919"
  },
  {
    "text": "is pretty easy to do all right so the result of this again we have an array of",
    "start": "1777919",
    "end": "1783600"
  },
  {
    "text": "the results right so I can call that function you know I've got my results object and there we go it's an array",
    "start": "1783600",
    "end": "1789840"
  },
  {
    "text": "with two objects in it that's great uh so Bluebird will also provide",
    "start": "1789840",
    "end": "1795159"
  },
  {
    "text": "you a function called spread and this is great because you you can take an array that is your fulfillment value and then",
    "start": "1795159",
    "end": "1801519"
  },
  {
    "text": "just treat each element of that array as if it's a parameter to your function that is your fulfillment",
    "start": "1801519",
    "end": "1806880"
  },
  {
    "text": "callback so that's great other other than that spread operates almost exactly the same way as",
    "start": "1806880",
    "end": "1813760"
  },
  {
    "text": "then okay so we also want to maintain backward",
    "start": "1814360",
    "end": "1819399"
  },
  {
    "text": "compatibility right so obviously we're going to do notify but now I've passed in a second parameter to notify and",
    "start": "1819399",
    "end": "1825519"
  },
  {
    "text": "that's an options object this is actually a very new feature in bluebird so you know if you haven't used Bluebird in a while",
    "start": "1825519",
    "end": "1831440"
  },
  {
    "text": "or or something like that then you may not be familiar but basically there's uh",
    "start": "1831440",
    "end": "1836679"
  },
  {
    "text": "you can pass it in an options object to notify in this case I'm using the options spread is true and what that'll do is it'll make sure that any array",
    "start": "1836679",
    "end": "1844640"
  },
  {
    "text": "that's the Fulfillment value of the promise that you're calling notify on will be spread across the",
    "start": "1844640",
    "end": "1850320"
  },
  {
    "text": "Callback so it'll be calling it back with if there's no error you'll get null and then the first element in the array",
    "start": "1850320",
    "end": "1856880"
  },
  {
    "text": "and then the second and so on so that's great it's nice and Backward Compatible it it's operating exactly the",
    "start": "1856880",
    "end": "1862080"
  },
  {
    "text": "same as the function we had before except now it's returning a promise that does effectively the same thing so",
    "start": "1862080",
    "end": "1868720"
  },
  {
    "text": "that's all good uh so if you write a lot of nodejs",
    "start": "1868720",
    "end": "1875519"
  },
  {
    "text": "code or any other code that does a lot of asynchronous stuff uh you know that your stack traces are not as great as",
    "start": "1875519",
    "end": "1880960"
  },
  {
    "text": "they could be right in node you're going to end up with things that stop at like",
    "start": "1880960",
    "end": "1886440"
  },
  {
    "text": "uh what is next TI call back something something like that and it's not great right so like here's an example of a",
    "start": "1886440",
    "end": "1892760"
  },
  {
    "text": "function that does does something asynchronous does a couple of things in some then I just haven't bothered to put",
    "start": "1892760",
    "end": "1899919"
  },
  {
    "text": "them in but anyway somewhere along the line we've got a then that throws an error so that'll create a rejecting",
    "start": "1899919",
    "end": "1906000"
  },
  {
    "text": "promise and then we've got a a catch uh rejection Handler there that'll just go",
    "start": "1906000",
    "end": "1911679"
  },
  {
    "text": "ahead and log the stack so I mean when you run this you know assuming that there's actually",
    "start": "1911679",
    "end": "1916760"
  },
  {
    "text": "something in those then blocks you're going to end up with a stack Trace that looks something like this uh",
    "start": "1916760",
    "end": "1922039"
  },
  {
    "text": "so in the interest of making this fit on the slide um I replaced the big long references to like locations in Bluebird",
    "start": "1922039",
    "end": "1928679"
  },
  {
    "text": "with in Bluebird uh Bluebird is pretty crazy in terms of how many stack frames",
    "start": "1928679",
    "end": "1933960"
  },
  {
    "text": "it adds um so you end up with some very ugly stack traces this way and again it",
    "start": "1933960",
    "end": "1940399"
  },
  {
    "text": "stops before you even see like where this do something async was called right",
    "start": "1940399",
    "end": "1946000"
  },
  {
    "text": "you don't see that at all all you see is uh here test JS 59 that's um that's",
    "start": "1946000",
    "end": "1951200"
  },
  {
    "text": "where the air was actually thrown so it's not really enough information so you can actually tweak",
    "start": "1951200",
    "end": "1958120"
  },
  {
    "text": "Bluebird a little bit and the result of this is you get uh from previous events so Bluebird will actually tie",
    "start": "1958120",
    "end": "1964600"
  },
  {
    "text": "asynchronous things together and remove itself from your stack traces so you get some nice output so here it's showing me",
    "start": "1964600",
    "end": "1972080"
  },
  {
    "text": "test JS one and test JS 5 in here so those are two sites that are relevant to",
    "start": "1972080",
    "end": "1977840"
  },
  {
    "text": "the code here right so line one and line five are where things have happened so that's great actually have some useful",
    "start": "1977840",
    "end": "1984480"
  },
  {
    "text": "information now uh so you can activate this in node by setting an environment variable",
    "start": "1984480",
    "end": "1990440"
  },
  {
    "text": "Bluebird debug equals 1 uh or if you're in a browser or just you don't want to mess around with",
    "start": "1990440",
    "end": "1996120"
  },
  {
    "text": "environment variables you can just call promise. Long stack traces and that will do the same thing for you and you can",
    "start": "1996120",
    "end": "2001440"
  },
  {
    "text": "get all that stack Trace data okay so when we did this when we",
    "start": "2001440",
    "end": "2007240"
  },
  {
    "text": "made this conver version obviously we have to take testing into account now we use mocha like I'm sure a lot of you do",
    "start": "2007240",
    "end": "2014600"
  },
  {
    "text": "and what what we found the easiest thing to do was is double our tests so for",
    "start": "2014600",
    "end": "2019919"
  },
  {
    "text": "every that was testing some code that was asynchronous we' have two versions of our test code we'd have one that was",
    "start": "2019919",
    "end": "2025840"
  },
  {
    "text": "all callback style and one that was all promise style and the advantage of that is that now we're absolutely sure that",
    "start": "2025840",
    "end": "2031039"
  },
  {
    "text": "both sets of apis work and then we're still Backward Compatible so that's definitely something to do and the other",
    "start": "2031039",
    "end": "2036720"
  },
  {
    "text": "thing is if you have any plans on removing the Callback style of your API we may or may not we don't know um it",
    "start": "2036720",
    "end": "2043320"
  },
  {
    "text": "may not be a good idea who knows but if you do have such a plan then it's very easy to just go ahead and delete that",
    "start": "2043320",
    "end": "2048878"
  },
  {
    "text": "whole set of tests just by keeping them nice and separate but making sure there's two of them uh but there are some weird quirks",
    "start": "2048879",
    "end": "2055839"
  },
  {
    "text": "in mocha in particular so if you're using mocha with a version less than",
    "start": "2055839",
    "end": "2061638"
  },
  {
    "text": "1.8.0 uh you're not going to be able to do the cool things you can do in later versions",
    "start": "2061639",
    "end": "2067280"
  },
  {
    "text": "so it would be great to just pass it or just return a promise and then you know if it fulfills correctly then it's a",
    "start": "2067280",
    "end": "2074158"
  },
  {
    "text": "pass and then if it rejects then it's a failure we can't really do that in old versions of mocha so you're going to",
    "start": "2074159",
    "end": "2080200"
  },
  {
    "text": "have to treat it like any other asynchronous code and you know get this function done and then call it with",
    "start": "2080200",
    "end": "2085760"
  },
  {
    "text": "notify right so that'll make it behave just the same as any other call back style code",
    "start": "2085760",
    "end": "2091158"
  },
  {
    "text": "would uh but luckily in versions of mocha greater than 1.8.0 or greater than",
    "start": "2091159",
    "end": "2097000"
  },
  {
    "text": "equal to uh you can just return a promise and like I said if you just um return a",
    "start": "2097000",
    "end": "2103280"
  },
  {
    "text": "promise that fulfills it'll be treated as a success case and if it rejects it'll be a failure",
    "start": "2103280",
    "end": "2109000"
  },
  {
    "text": "case so yeah we we're we're doing this now we're using mocha I think what is it",
    "start": "2109000",
    "end": "2115119"
  },
  {
    "text": "uh 1.2.0 and so we're doing this pretty much everywhere now so I mean there's obviously the",
    "start": "2115119",
    "end": "2122000"
  },
  {
    "text": "question whether this is worth it I mean we did spend a lot of time going through this conversion process and yeah was",
    "start": "2122000",
    "end": "2127839"
  },
  {
    "text": "definitely a lot of work it took us at least it's like three to four months since we started taking a look at this",
    "start": "2127839",
    "end": "2134599"
  },
  {
    "text": "um but I think the best way we can measure this kind of success of of this kind of project is by talking to the",
    "start": "2134599",
    "end": "2141760"
  },
  {
    "text": "people who are consuming our API right and seeing what they think and so I did have a few conversations with the game",
    "start": "2141760",
    "end": "2147760"
  },
  {
    "text": "teams that are using our code and they seem pretty happy with promises um they they definitely feel like they're using",
    "start": "2147760",
    "end": "2153599"
  },
  {
    "text": "a lot less boilerplate code and uh a lot of them didn't like like async JS some",
    "start": "2153599",
    "end": "2158800"
  },
  {
    "text": "of them did but most of them didn't and uh they're also pretty happy with the benchmarks they see from Bluebird um I",
    "start": "2158800",
    "end": "2166839"
  },
  {
    "text": "mean benchmarks can be a little misleading but uh but the benchmarks for Bluebird are pretty good uh so then",
    "start": "2166839",
    "end": "2174200"
  },
  {
    "text": "they're also definitely happy with backward compatibility so we didn't force anybody to upgrade any of their",
    "start": "2174200",
    "end": "2180400"
  },
  {
    "text": "code um or side grade whichever way you want to look at it uh convert so they",
    "start": "2180400",
    "end": "2186880"
  },
  {
    "text": "they were pretty happy to doing that at their own pace so that was a good thing um yeah that's all I got hope you",
    "start": "2186880",
    "end": "2194720"
  },
  {
    "text": "enjoyed it",
    "start": "2194720",
    "end": "2197800"
  },
  {
    "text": "um thank you um so you can actually grab all these slides on GitHub uh it's just",
    "start": "2201520",
    "end": "2208599"
  },
  {
    "text": "my username Bengals for js- promise talk you can also npm install it so this",
    "start": "2208599",
    "end": "2214640"
  },
  {
    "text": "presentation's all in a terminal all right questions",
    "start": "2214640",
    "end": "2221640"
  },
  {
    "text": "y okay so the question is uh would it be a rational approach to have a set of",
    "start": "2222119",
    "end": "2227400"
  },
  {
    "text": "code that is all normal and call back style and then call promisify all on it",
    "start": "2227400",
    "end": "2232720"
  },
  {
    "text": "and then provide it that way um yeah it wouldn't be that",
    "start": "2232720",
    "end": "2238119"
  },
  {
    "text": "terrible right so sorry just is asking about performance now um so yeah there's",
    "start": "2241240",
    "end": "2246960"
  },
  {
    "text": "definitely going to be a performance difference I mean we're we're taking things that are not native to the language not native to the framework uh",
    "start": "2246960",
    "end": "2253040"
  },
  {
    "text": "or to the environment and we're adding all kinds like you saw all the stack frames that were added right like it's",
    "start": "2253040",
    "end": "2258440"
  },
  {
    "text": "not going to necessarily be uh it might not be faster it really",
    "start": "2258440",
    "end": "2263480"
  },
  {
    "text": "depends on how your code is structured right and to be honest when it comes to Performance you're probably going to run into other performance bottlenecks",
    "start": "2263480",
    "end": "2269880"
  },
  {
    "text": "anyway right uh so but for for our sake we just decided to convert everything internally inside all of our apis just",
    "start": "2269880",
    "end": "2276880"
  },
  {
    "text": "because we find them a joy to work with uh no so uh we we're our testing",
    "start": "2276880",
    "end": "2285599"
  },
  {
    "text": "stack is basically just mocha and uh and sonon so I mean with with that stuff I",
    "start": "2285599",
    "end": "2293599"
  },
  {
    "text": "mean it's it's fairly easy to make stuff work you don't need any extra helpers with that uh I'll definitely take a look",
    "start": "2293599",
    "end": "2299040"
  },
  {
    "text": "at chai's promise though yeah so the question is uh like the safely permissive I function I",
    "start": "2299040",
    "end": "2305000"
  },
  {
    "text": "provide here is fairly similar to what and bluebird and and you know why doesn't Bluebird provide a similar thing",
    "start": "2305000",
    "end": "2312480"
  },
  {
    "text": "um you'll have to ask Peta um uh no so uh I had a few conversations",
    "start": "2312480",
    "end": "2318880"
  },
  {
    "text": "with him on IRC and basically it came down to it it's it's simple enough to do on your own there's there's no real",
    "start": "2318880",
    "end": "2323960"
  },
  {
    "text": "reason but he sees no real reason as far as I can tell from what he from our from",
    "start": "2323960",
    "end": "2330119"
  },
  {
    "text": "my conversations with him but uh for us it's it's very useful so we're perfectly happy to put it in a separate library",
    "start": "2330119",
    "end": "2336400"
  },
  {
    "text": "and use it that way okay so the",
    "start": "2336400",
    "end": "2341440"
  },
  {
    "text": "font let's just go ahead and grab it oh sorry it's on my left screen",
    "start": "2341440",
    "end": "2349760"
  },
  {
    "text": "here perfect dos VGA",
    "start": "2352240",
    "end": "2356720"
  },
  {
    "text": "437 y because I can just add any task to the",
    "start": "2358720",
    "end": "2365200"
  },
  {
    "text": "controller okay um that was a lot of stuff I don't know if I can repeat all that but uh I I think a lot it's a",
    "start": "2365200",
    "end": "2373040"
  },
  {
    "text": "similar Paradigm buter yeah yeah so I so for those who didn't hear he was discussing uh some",
    "start": "2373040",
    "end": "2379359"
  },
  {
    "text": "stuff that he was doing with Java FX which ends up actually from what it sounds like it sounds like it's doing a",
    "start": "2379359",
    "end": "2384800"
  },
  {
    "text": "lot of or what you were doing not sure if it was what you were doing or what Java FX was doing what Java FX does",
    "start": "2384800",
    "end": "2391440"
  },
  {
    "text": "us okay cool so just using similar stuff to what Java FX was was doing uh from",
    "start": "2391440",
    "end": "2397160"
  },
  {
    "text": "what sounds like you're doing a lot of the same stuff that happens internally in Bluebird so",
    "start": "2397160",
    "end": "2403160"
  },
  {
    "text": "yeah I've not seen I've not seen the internal I knew existed before today",
    "start": "2403160",
    "end": "2408880"
  },
  {
    "text": "well I highly recommend taking a look at Bluebird and thrush so",
    "start": "2408880",
    "end": "2414599"
  },
  {
    "text": "yeah sorry one more time there's a lot of doors opening okay",
    "start": "2417000",
    "end": "2423000"
  },
  {
    "text": "cool all right cool well thanks guys [Applause]",
    "start": "2423640",
    "end": "2434230"
  }
]