[
  {
    "text": "[Music]",
    "start": "0",
    "end": "17219"
  },
  {
    "text": "um so my name is Miles Sabin um I am one of the founding partners of a new Scala",
    "start": "19720",
    "end": "25640"
  },
  {
    "text": "partnership called underscore uh I really wish that it had been actually me the thought of that name because I think",
    "start": "25640",
    "end": "31160"
  },
  {
    "text": "it's it's brilliant apart from being a kind of a scar of pun okay so um what",
    "start": "31160",
    "end": "36200"
  },
  {
    "text": "I'm going to do today is I'm going to um I'm going to talk about shapeless um quick outline what I'm going to talk",
    "start": "36200",
    "end": "42039"
  },
  {
    "text": "about tiny tiny iny bit of History um then I'm going to talk um and basically",
    "start": "42039",
    "end": "47640"
  },
  {
    "text": "the history is going to just Set set set the scene for why why I started working on on on um on shapeless and uh the",
    "start": "47640",
    "end": "54359"
  },
  {
    "text": "initial motivating problem uh that I had and I'm going to work us through that and hopefully I'll give you a flavor if",
    "start": "54359",
    "end": "60079"
  },
  {
    "text": "I can do it in half an hour of um um of",
    "start": "60079",
    "end": "65280"
  },
  {
    "text": "uh exactly what kind of techniques we're involved in actually getting something really that almost seems like it shouldn't be possible to be possible um",
    "start": "65280",
    "end": "73280"
  },
  {
    "text": "and uh that's that's that's the aim for the the end for my talk this morning so um initial goal was uh um uh to uh do",
    "start": "73280",
    "end": "83240"
  },
  {
    "text": "something with an H list so we start off with what what's an H list then I'm going to talk about the kinds of things we're going to need to do with them for",
    "start": "83240",
    "end": "88759"
  },
  {
    "text": "which we will need something called polymorphic function values um then I'm going to talk a little tiny mey bit",
    "start": "88759",
    "end": "94320"
  },
  {
    "text": "about type level functions which are going to crop up uh as part of as part of what we're going to be trying to do",
    "start": "94320",
    "end": "99479"
  },
  {
    "text": "um then I'm going to show you something to do with uh the way in which uh kind of operations on H lists are going to",
    "start": "99479",
    "end": "107000"
  },
  {
    "text": "involve a kind of type and value level recursion operating in tandem uh which is going to be kind of a fun and",
    "start": "107000",
    "end": "112960"
  },
  {
    "text": "interesting sort of General technique and uh then I'm going to put the pieces together and finally show you um the the",
    "start": "112960",
    "end": "119520"
  },
  {
    "text": "the really cool thing that I'm going to show you at the end okay and then um if anybody incidentally uh let's",
    "start": "119520",
    "end": "126119"
  },
  {
    "text": "just uh wants to um ah crap that was too fast I know I",
    "start": "126119",
    "end": "135640"
  },
  {
    "text": "know I know uh and okay if anyone wants crap if anyone wants to just grab the",
    "start": "135640",
    "end": "141879"
  },
  {
    "text": "code of GitHub while we're looking at it if you want to if you if you want if you want if you want the source well where to kind of play along then please do",
    "start": "141879",
    "end": "148360"
  },
  {
    "text": "grab it okay so let's go so some history um so I started off about a year",
    "start": "148360",
    "end": "155160"
  },
  {
    "text": "ago um I volunteered to do a talk at I need a mic um I started off about a",
    "start": "155160",
    "end": "162440"
  },
  {
    "text": "year ago I volunteered to do to do a talk at um uh sort of a little sort of one day mini uh functional programming",
    "start": "162440",
    "end": "170159"
  },
  {
    "text": "conference in London called the functional programming exchange and I I I kind of put up a um sort of floated an",
    "start": "170159",
    "end": "176080"
  },
  {
    "text": "idea for for a talk I was going to do I'm going to take Simon paint Jones uh and Ralph lel's scrap your boiler plate",
    "start": "176080",
    "end": "183840"
  },
  {
    "text": "uh with class stuff in hll and I'm going to show that you can do it in hll in Scala um and and I and I put up the talk",
    "start": "183840",
    "end": "190599"
  },
  {
    "text": "without actually having worked out how the hell I was going to do it and so I I left myself with a couple of weeks to try and work out uh is it even possible",
    "start": "190599",
    "end": "198080"
  },
  {
    "text": "it turned out that it was um but in the process of doing it I kind of discovered that there there there were lots and",
    "start": "198080",
    "end": "203239"
  },
  {
    "text": "lots of interesting little wrinkles and um lots of uh really quite exciting new techniques which really could do with a",
    "start": "203239",
    "end": "209200"
  },
  {
    "text": "bit of generaliz ation one of them that that cropped up was in in the process of doing this so scrap your boiler plate is",
    "start": "209200",
    "end": "214920"
  },
  {
    "text": "is basically it's a way of um eliminating uh a lot of the uh the",
    "start": "214920",
    "end": "219959"
  },
  {
    "text": "repetitive boiler plate type code involved in doing um traversals across composite nested data structures this",
    "start": "219959",
    "end": "226640"
  },
  {
    "text": "these These are problems which which show up uh you know they're not unique to to to um uh imperative languages",
    "start": "226640",
    "end": "232599"
  },
  {
    "text": "they're things which are shared by by functional programming languages uh interestingly in languages like hasal",
    "start": "232599",
    "end": "238360"
  },
  {
    "text": "which have very very rich type system um there are things that you can do about them and the scrap your boiler plate series of papers is is something",
    "start": "238360",
    "end": "244599"
  },
  {
    "text": "which explains that kind of stuff um so um in the process so so if you're if",
    "start": "244599",
    "end": "250840"
  },
  {
    "text": "what you're doing is you're you're traversing a data structure obviously you want to do something with the elements of the data structure as you",
    "start": "250840",
    "end": "256239"
  },
  {
    "text": "Traverse them you might want to uh compute some single running value you might want to effectively fold over your",
    "start": "256239",
    "end": "262040"
  },
  {
    "text": "composite data structure or you might want to transform the data structure in one way or another now either way if",
    "start": "262040",
    "end": "267720"
  },
  {
    "text": "your data structure if its elements are of different types then you need to be able to express the idea of I want to",
    "start": "267720",
    "end": "276240"
  },
  {
    "text": "chase this function which is able to consume values of different types uh and",
    "start": "276240",
    "end": "283479"
  },
  {
    "text": "produce uh some other uh some some some result value of of some type which is maybe the same type as the type I",
    "start": "283479",
    "end": "289880"
  },
  {
    "text": "started with or maybe it's some other type but whatever whatever it is I need to have a function value which is",
    "start": "289880",
    "end": "296039"
  },
  {
    "text": "applicable at multiple argument types and it turns out that this isn't particularly easy to to express in Scala",
    "start": "296039",
    "end": "301479"
  },
  {
    "text": "there are there are a number of ways of of sort of approximating it um but it turns out to do things in in in in in",
    "start": "301479",
    "end": "307960"
  },
  {
    "text": "the full generality required to to to implement scrap your boil plate you need to do something quite a bit more sophisticated so that was that was the",
    "start": "307960",
    "end": "314199"
  },
  {
    "text": "first kind of Sidetrack I went down uh the next one was that I just discovered in the process of of of of working on",
    "start": "314199",
    "end": "319680"
  },
  {
    "text": "some of this stuff that that a lot of the techniques I ended up using uh looked like they mapped very very directly onto uh something called",
    "start": "319680",
    "end": "326639"
  },
  {
    "text": "functional dependencies which you find in um uh it's it's it's a a Glasgow hasal compiler extension I think it's a",
    "start": "326639",
    "end": "333960"
  },
  {
    "text": "GHC extension it is right um uh to to standard hco which basically allows you",
    "start": "333960",
    "end": "340560"
  },
  {
    "text": "to express at the level of um uh at the level of",
    "start": "340560",
    "end": "347120"
  },
  {
    "text": "um type constraints for for type classes essentially the idea of of of um functional relationships between types",
    "start": "347120",
    "end": "353960"
  },
  {
    "text": "so uh you can express the idea that uh uh two two or more types have stand in a",
    "start": "353960",
    "end": "360120"
  },
  {
    "text": "particular kind of relation you can do this in a way which is um is verifiable by the compiler compile time in the",
    "start": "360120",
    "end": "366319"
  },
  {
    "text": "process of of of doing that I I I think I I got a slightly deeper understanding of how how how we can use some of these techniques in in Scala um so pulling all",
    "start": "366319",
    "end": "374840"
  },
  {
    "text": "of these things together uh that that was that was pretty much what what led uh what led to shapeless and I've been",
    "start": "374840",
    "end": "380080"
  },
  {
    "text": "kind of exploring uh that kind of stuff uh ever since so the init the main goal is is of of of of shapeless as a library",
    "start": "380080",
    "end": "388199"
  },
  {
    "text": "uh is as an experiment to explore um models of abstraction over data types",
    "start": "388199",
    "end": "394240"
  },
  {
    "text": "which are richer than the ones that you would typically expect to be able to capture by traditional oo subtyping or",
    "start": "394240",
    "end": "400800"
  },
  {
    "text": "traditional FP parametric polymorphism uh and that's even when we're talking about parametric poly polymorphism with",
    "start": "400800",
    "end": "407120"
  },
  {
    "text": "with with higher kinded types involved so something of the order of SC scrap your boilet plate um that that kind of",
    "start": "407120",
    "end": "413120"
  },
  {
    "text": "that kind of sophistication is is is is what I'm planning to to exploit as things have moved on I'm kind of finding",
    "start": "413120",
    "end": "418840"
  },
  {
    "text": "myself cranking on more and more of of scola's dependent types uh facilities um",
    "start": "418840",
    "end": "425720"
  },
  {
    "text": "and these These are kind of cropping up in the implementation initially I thought there were sort of kind of uh implementation details there were kind",
    "start": "425720",
    "end": "431800"
  },
  {
    "text": "of like sort of conveniences which which uh which were just helping me get helping me get get get the job done um",
    "start": "431800",
    "end": "438039"
  },
  {
    "text": "in practice I'm I'm actually beginning to think that that maybe maybe exploring the dependent types is is is more of is",
    "start": "438039",
    "end": "443360"
  },
  {
    "text": "more of the point um but it's anyway it's getting to be very interesting stuff so the initial objective that I",
    "start": "443360",
    "end": "449120"
  },
  {
    "text": "had with shapeless though um was simply to put together something which it's",
    "start": "449120",
    "end": "455160"
  },
  {
    "text": "hopefully not relatively simple is is is an hlist an H list a heterogenous list",
    "start": "455160",
    "end": "461080"
  },
  {
    "text": "which supports a map operation um and this is this is something that I uh at least in Scala hadn't been hadn't been",
    "start": "461080",
    "end": "467000"
  },
  {
    "text": "done before um it's very closely related to to scrap boiler plate so it's kind of a special case of that but I wanted to",
    "start": "467000",
    "end": "473080"
  },
  {
    "text": "do it in a way which was really really very clean and simple and and understandable um and in a way that was",
    "start": "473080",
    "end": "479599"
  },
  {
    "text": "sort of shed some light on the kind of techniques involved so that's that's that's the context for for what we're talking about so first up what's an",
    "start": "479599",
    "end": "486319"
  },
  {
    "text": "hlist so um H lists um they combine characteristics of both lists and tupal",
    "start": "486319",
    "end": "492319"
  },
  {
    "text": "um so tupal are fixed length sequences of elements of distinct types um you know once once you fix the arity of a",
    "start": "492319",
    "end": "498440"
  },
  {
    "text": "tupo you're you're stuck with it um on the other hand each each element of a tupo can be of a different type on the",
    "start": "498440",
    "end": "505039"
  },
  {
    "text": "other hand lists are variable length uh sequences of elements but all of the elements have to have the same type so",
    "start": "505039",
    "end": "510759"
  },
  {
    "text": "there's an interesting kind of like sort of Duality between between these two two types obviously when I say variable",
    "start": "510759",
    "end": "516000"
  },
  {
    "text": "there I mean it's it's not really variable that we're talking about um variable in the sense of um uh we're",
    "start": "516000",
    "end": "522800"
  },
  {
    "text": "talking about immutable data structures so so it's in the sense of the type is capable of the the list type uh is",
    "start": "522800",
    "end": "529839"
  },
  {
    "text": "capable of um uh being inhabited by list values of of different different lengths",
    "start": "529839",
    "end": "536279"
  },
  {
    "text": "is is what I'm trying to capture with that that there if anyone knows a good good word for that then I I'd like to know um so anyway H lists are a hybrid",
    "start": "536279",
    "end": "544079"
  },
  {
    "text": "of those two in a sense in as much as they uh they capture variable length",
    "start": "544079",
    "end": "549200"
  },
  {
    "text": "sequences of elements Each of which can be of distinct types and this is something which the compiler will track for us and uh let's have a quick look um",
    "start": "549200",
    "end": "559600"
  },
  {
    "text": "so I'm just going to show you on the reppel what uh an H list looks like so",
    "start": "559600",
    "end": "565760"
  },
  {
    "text": "we can have Val l",
    "start": "565760",
    "end": "572040"
  },
  {
    "text": "equals ah right",
    "start": "579720",
    "end": "585240"
  },
  {
    "text": "um sorry that's yes that will probably do",
    "start": "585240",
    "end": "590880"
  },
  {
    "text": "it okay thank you oh cool I actually didn't know that you could do that that's that's",
    "start": "590880",
    "end": "596760"
  },
  {
    "text": "good that's that's really helpful",
    "start": "596760",
    "end": "601320"
  },
  {
    "text": "um okay so this is an H list uh with three elements uh the elements are",
    "start": "602079",
    "end": "608120"
  },
  {
    "text": "initially an integer then a string then a Boolean and H nil to kind of terminate the list and if you look at the the",
    "start": "608120",
    "end": "613920"
  },
  {
    "text": "signature that the uh that the uh the reppel has come back with you can see that the um uh that the type of that",
    "start": "613920",
    "end": "621839"
  },
  {
    "text": "value that value L um is is reflecting the types of every single element uh in",
    "start": "621839",
    "end": "628680"
  },
  {
    "text": "in in in in in the H list now if on the other hand we were to do that with a vanilla list um let's call it V and just",
    "start": "628680",
    "end": "635639"
  },
  {
    "text": "do this so the same essentially the same",
    "start": "635639",
    "end": "642839"
  },
  {
    "text": "initializer this time terminated with nil rather than H nil um you'll see that",
    "start": "644160",
    "end": "649760"
  },
  {
    "text": "uh well we get back a list it contains all the values but you'll notice that um the uh the the uh type parameter of our",
    "start": "649760",
    "end": "657079"
  },
  {
    "text": "list type has been um uh unified to to to to to the uh the",
    "start": "657079",
    "end": "662880"
  },
  {
    "text": "greatest common uh super type of of the three elements in there so basically we've completely lost Precision we we we",
    "start": "662880",
    "end": "668040"
  },
  {
    "text": "no longer have any any idea at least no the compiler no longer has any idea any interesting idea about what the types of",
    "start": "668040",
    "end": "674200"
  },
  {
    "text": "the individual elements are and um just to to sort of illustrate that the compiler really is keeping track of of",
    "start": "674200",
    "end": "679639"
  },
  {
    "text": "what these types are if we were to take that original list and then do uh take its head uh you can see that the",
    "start": "679639",
    "end": "686440"
  },
  {
    "text": "compiler knows that the type of the head is an INT if we were to do uh",
    "start": "686440",
    "end": "692200"
  },
  {
    "text": "tail head it knows that the type of the second element is a string um so the",
    "start": "692200",
    "end": "698000"
  },
  {
    "text": "compiler is keeping track of of all the types it's able to track uh types through through various operations",
    "start": "698000",
    "end": "703480"
  },
  {
    "text": "applied to it um so",
    "start": "703480",
    "end": "708600"
  },
  {
    "text": "uh so that's an H list um any any quick questions about that I mean this this so",
    "start": "708600",
    "end": "713639"
  },
  {
    "text": "far this is nothing particularly novel this is this is all F hopefully who who's who's seen an H list like this",
    "start": "713639",
    "end": "718839"
  },
  {
    "text": "before most people okay any any any questions or should I just skip on I'll skip",
    "start": "718839",
    "end": "726040"
  },
  {
    "text": "on right um okay so now one of the things that you can you",
    "start": "726040",
    "end": "732760"
  },
  {
    "text": "can you can very fairly fairly obviously do with a with an ordinary vanilla list is you can you can map over it so let's",
    "start": "732760",
    "end": "740480"
  },
  {
    "text": "just just I don't know something silly like uh to",
    "start": "740480",
    "end": "746600"
  },
  {
    "text": "string oops",
    "start": "746639",
    "end": "750639"
  },
  {
    "text": "um and I'll get back now a list of strings now it's not so obvious how you go about doing that with a um uh with",
    "start": "756399",
    "end": "764079"
  },
  {
    "text": "with an H okay actually in in the case of in the case of the two- string method actually that that you might think that",
    "start": "764079",
    "end": "769560"
  },
  {
    "text": "should work just fine but in general if I were to um uh take a a function uh",
    "start": "769560",
    "end": "775959"
  },
  {
    "text": "which I can map across a list it's not obvious how you're going to map across an hlist because obviously each of the",
    "start": "775959",
    "end": "781839"
  },
  {
    "text": "elements in the H list is is of a different type so unless your function has an argument type of type any uh",
    "start": "781839",
    "end": "788959"
  },
  {
    "text": "you've got no guarantee in general that you're going to be able to do anything with it um so one of the things that",
    "start": "788959",
    "end": "795160"
  },
  {
    "text": "that it's interesting to look at and it's it's a fairly natural thing to ask is can can we generalize the idea of",
    "start": "795160",
    "end": "800440"
  },
  {
    "text": "function to allow us to generalize the idea of map in a way that allows it to be applied to uh an hlist now one of the",
    "start": "800440",
    "end": "807399"
  },
  {
    "text": "things that dropped out of the this this actually turns out to be a special case of the hcal scrap your boiler plate stuff um so I I knew because I'd already",
    "start": "807399",
    "end": "814199"
  },
  {
    "text": "implemented scrap your boiler plate it must be possible to do this somehow so the real question was can I can I work out a nice reasonably convenient way to",
    "start": "814199",
    "end": "820880"
  },
  {
    "text": "do that um so it's the first piece of the picture kind of getting us getting us to our to our to our mapping function",
    "start": "820880",
    "end": "827639"
  },
  {
    "text": "so uh I think I've covered that already so one of the one of the natural things",
    "start": "827639",
    "end": "833399"
  },
  {
    "text": "that you uh natural no pun intended you might look at is something which has been uh it's been reasonably well known",
    "start": "833399",
    "end": "838839"
  },
  {
    "text": "and been around for quite some time the idea of a natural a natural transformation um so um the reason the",
    "start": "838839",
    "end": "845639"
  },
  {
    "text": "reason that uh that that that scala's um function values are uh monomorphic",
    "start": "845639",
    "end": "851399"
  },
  {
    "text": "rather than polymorphic is is that they don't actually have a type parameter on their apply method uh there's there's no",
    "start": "851399",
    "end": "857600"
  },
  {
    "text": "room for uh the type parameter uh associated with a with a with a with a function value is associated with the",
    "start": "857600",
    "end": "863560"
  },
  {
    "text": "whole the whole function value itself rather than uh rather than uh uh uh uh rather than it's apply method and that",
    "start": "863560",
    "end": "870600"
  },
  {
    "text": "means that um uh essentially you've you've used up",
    "start": "870600",
    "end": "876880"
  },
  {
    "text": "your polymorphism in in in the definition of a function value um kind of kind of kind of too early you sort of",
    "start": "876880",
    "end": "882000"
  },
  {
    "text": "want to defer it until the point at which the function is actually actually applied now uh there's one fairly uh",
    "start": "882000",
    "end": "888040"
  },
  {
    "text": "common uh approach to kind of sort of relaxing some of that um uh some of some",
    "start": "888040",
    "end": "894959"
  },
  {
    "text": "of that restriction somewhat is to define a form of uh um I don't actually have an example here but a form of let's",
    "start": "894959",
    "end": "902399"
  },
  {
    "text": "see if I can just quickly do one um so it would be something like uh",
    "start": "902399",
    "end": "911680"
  },
  {
    "text": "sorry oh",
    "start": "911680",
    "end": "918519"
  },
  {
    "text": "um uh something like",
    "start": "918959",
    "end": "925199"
  },
  {
    "text": "that so this is this is going to be a function one like",
    "start": "925720",
    "end": "932120"
  },
  {
    "text": "trait so um so it's basically it's a very similar shape to to to a function",
    "start": "945519",
    "end": "950680"
  },
  {
    "text": "one except what we've done is we've added a um uh a type parameter to the",
    "start": "950680",
    "end": "955880"
  },
  {
    "text": "apply method um and we've also at the at the sort of the enclosing sort of whole",
    "start": "955880",
    "end": "961199"
  },
  {
    "text": "whole function or value level we've added a pair of type Constructors and what what this this values of of this",
    "start": "961199",
    "end": "968240"
  },
  {
    "text": "type can do is they can in a function like way they can take values of type uh ft onto values of type GT where the T",
    "start": "968240",
    "end": "976639"
  },
  {
    "text": "part it's is if you like it's variable it's it's deferred until until you",
    "start": "976639",
    "end": "982000"
  },
  {
    "text": "actually apply the the the function like value but the f and g parts are kind of fixed um Okay so so um that's that's",
    "start": "982000",
    "end": "990040"
  },
  {
    "text": "that's something uh you you you you'll find that in if you look at the uh um Mark Hara and uh and Run's apocalypse uh",
    "start": "990040",
    "end": "998279"
  },
  {
    "text": "blog there's there there there's a very nice um uh article on on on doing this kind of stuff you'll you'll find this",
    "start": "998279",
    "end": "1004519"
  },
  {
    "text": "kind of function like thing in Scala Zed somewhere I think I assume you must do um but there are some problems for um",
    "start": "1004519",
    "end": "1012440"
  },
  {
    "text": "actually you taking that approach in a sort of fully general form um with um uh",
    "start": "1012440",
    "end": "1018240"
  },
  {
    "text": "with with h I mean the real problem is that um for that to work every element of",
    "start": "1018240",
    "end": "1024360"
  },
  {
    "text": "your H list has to share a common outter type Constructor the F part has to be",
    "start": "1024360",
    "end": "1029880"
  },
  {
    "text": "fixed um and um there there there are many cases where that's just fine um and",
    "start": "1029880",
    "end": "1035678"
  },
  {
    "text": "there is a special case of of a kind of hlist type structure called klist I think I think Mark called them in in the",
    "start": "1035679",
    "end": "1041678"
  },
  {
    "text": "apocalypse blog I think something similar to that has just recently been imported to the scolar said zeven Branch",
    "start": "1041679",
    "end": "1047000"
  },
  {
    "text": "I think it's called a TC list for type structor list um in Scala z7 and and and",
    "start": "1047000",
    "end": "1052799"
  },
  {
    "text": "it's fine if if if that's if that's if that's kind of what What's um what you need in a particular in a particular",
    "start": "1052799",
    "end": "1058120"
  },
  {
    "text": "circumstance then then that works perfectly well um but it's not going to be something that can map you allow you",
    "start": "1058120",
    "end": "1063799"
  },
  {
    "text": "to map over a completely arbitrary uh sequence of values of a completely",
    "start": "1063799",
    "end": "1069120"
  },
  {
    "text": "arbitrary sequence of types because because you don't have any NE any guarantee that that um those types will",
    "start": "1069120",
    "end": "1074880"
  },
  {
    "text": "share a common alter type Constructor um and similarly you you might not NE necessarily want to have to be",
    "start": "1074880",
    "end": "1080320"
  },
  {
    "text": "restricted to having a common outer type Constructor for the result type either that you might want more",
    "start": "1080320",
    "end": "1085480"
  },
  {
    "text": "flexibility um obviously applications are going to help but anyway the scrap your boorder plate stuff um uh in terms",
    "start": "1085480",
    "end": "1091919"
  },
  {
    "text": "of implementation techniques is going to give us a bit of a clue um so the key Innovation that that that um Simon Simon",
    "start": "1091919",
    "end": "1099280"
  },
  {
    "text": "Payton Jones and Ralph lamel came up with was the idea of representing polymorphic function values via type",
    "start": "1099280",
    "end": "1105080"
  },
  {
    "text": "classes so basically um what a type class is going to do is it's going to give you a",
    "start": "1105080",
    "end": "1110640"
  },
  {
    "text": "general a general signature a general shape and allow you to provide uh",
    "start": "1110640",
    "end": "1115880"
  },
  {
    "text": "instances on a per type basis uh which provide implementations corresponding to",
    "start": "1115880",
    "end": "1121440"
  },
  {
    "text": "those to those different um uh corresponding to those different types and if you think about it if I'm trying",
    "start": "1121440",
    "end": "1126960"
  },
  {
    "text": "to apply if I if I want a generic function which what I want to do is apply to each of a number of different",
    "start": "1126960",
    "end": "1133320"
  },
  {
    "text": "uh element types it makes sense to think of the generic function as being like a type class and the definitions of that",
    "start": "1133320",
    "end": "1141640"
  },
  {
    "text": "function at the various different uh types I want to apply it to as being uh",
    "start": "1141640",
    "end": "1147000"
  },
  {
    "text": "equivalent to uh type class instances for uh for that generic type class and",
    "start": "1147000",
    "end": "1152159"
  },
  {
    "text": "that that was that was kind of their key Insight that that that gave them the the scrap your boiler plate with class uh",
    "start": "1152159",
    "end": "1157760"
  },
  {
    "text": "implementation um so what uh I have done uh is bring that back into Scala and do",
    "start": "1157760",
    "end": "1164360"
  },
  {
    "text": "it in a way which kind of gives it a a a relatively scalar esque kind of function",
    "start": "1164360",
    "end": "1169720"
  },
  {
    "text": "like feel um and I think at this point I need to show you something so let's have",
    "start": "1169720",
    "end": "1177200"
  },
  {
    "text": "a look",
    "start": "1177200",
    "end": "1180158"
  },
  {
    "text": "um uh",
    "start": "1182600",
    "end": "1186000"
  },
  {
    "text": "SCE so I'll just show you some examples of uh kind of definitions of",
    "start": "1192280",
    "end": "1200679"
  },
  {
    "text": "functions let's just get to find something sort of nice and simple to start",
    "start": "1200679",
    "end": "1206360"
  },
  {
    "text": "with okay so anyone who has read the um",
    "start": "1206360",
    "end": "1212200"
  },
  {
    "text": "the apocalypse uh Mark Harris article we we'll probably find this kind of syntax kind of Fairly fairly familiar looking",
    "start": "1212200",
    "end": "1219000"
  },
  {
    "text": "uh it looks it looks very similar to what you have seen before but actually the implementation is Ely different um",
    "start": "1219000",
    "end": "1224440"
  },
  {
    "text": "so this is uh representing a a polymorphic identity function so this is a case",
    "start": "1224440",
    "end": "1230679"
  },
  {
    "text": "where um um I'm don't show that to you okay so",
    "start": "1230679",
    "end": "1238440"
  },
  {
    "text": "here here's um so this is this is uh a polymorphic choose function what the choose function is going to do it's",
    "start": "1238440",
    "end": "1243760"
  },
  {
    "text": "going to take an arbitary set onto uh an option of the same type and basically the definition is it'll from a set of T",
    "start": "1243760",
    "end": "1250320"
  },
  {
    "text": "it'll give you an option of T so if there's if if if the set has an element it'll give you it back otherwise it'll",
    "start": "1250320",
    "end": "1255880"
  },
  {
    "text": "give you back nothing uh none um now this is this is a function which falls into the natural transformation model um",
    "start": "1255880",
    "end": "1263760"
  },
  {
    "text": "that we saw so that's that is consistent with um the uh the natural transformation trait that I showed you",
    "start": "1263760",
    "end": "1269440"
  },
  {
    "text": "before um but in this framework we can do some other things as well and here's another example which um is maybe a",
    "start": "1269440",
    "end": "1275919"
  },
  {
    "text": "little bit more interesting so here is an example of a um a polymorphic",
    "start": "1275919",
    "end": "1281919"
  },
  {
    "text": "function value of two argument types and um what's going on here is that we are",
    "start": "1281919",
    "end": "1288039"
  },
  {
    "text": "defining it uh by cases so we have um uh",
    "start": "1288039",
    "end": "1293279"
  },
  {
    "text": "a um a collection of cases for um here",
    "start": "1293279",
    "end": "1298679"
  },
  {
    "text": "we have um uh plus defined over integers so we're taking two integer arguments",
    "start": "1298679",
    "end": "1304159"
  },
  {
    "text": "our types our result type is going to be inferred to be an INT uh we can Define Plus for uh for um uh for um for doubles",
    "start": "1304159",
    "end": "1313760"
  },
  {
    "text": "for strings for lists in terms of um uh additional doubles uh addition concatenation on strings and",
    "start": "1313760",
    "end": "1319919"
  },
  {
    "text": "concatenation on lists so this is this is a a a a a polymorphic function value which can be applied um to um values of",
    "start": "1319919",
    "end": "1329440"
  },
  {
    "text": "any of those types and it will give you back uh results of the appropriate type",
    "start": "1329440",
    "end": "1334960"
  },
  {
    "text": "um this is actually a little bit more complicated than I really need to show you in a sense because because obviously",
    "start": "1334960",
    "end": "1340200"
  },
  {
    "text": "it's a function of two arguments whereas for actually mapping over over an H list we only really need one argument um but",
    "start": "1340200",
    "end": "1346360"
  },
  {
    "text": "it's kind of a reasonably good examp so let's let's just see see that doing something if possible",
    "start": "1346360",
    "end": "1352200"
  },
  {
    "text": "oops um control U it'll do just fine um uh so",
    "start": "1352200",
    "end": "1359880"
  },
  {
    "text": "let's have a look import",
    "start": "1359880",
    "end": "1365039"
  },
  {
    "text": "po so I can use that",
    "start": "1365440",
    "end": "1371400"
  },
  {
    "text": "um that plus method on a now that's an interesting type signature um",
    "start": "1374039",
    "end": "1379799"
  },
  {
    "text": "so let's demonstrate it is actually an INT",
    "start": "1379799",
    "end": "1385559"
  },
  {
    "text": "whoops um but we'll we we'll come back to what exactly that type signature means",
    "start": "1388840",
    "end": "1394919"
  },
  {
    "text": "shortly um okay so we can um we can add",
    "start": "1394919",
    "end": "1400519"
  },
  {
    "text": "uh uh integers we can add doubles we can add strings",
    "start": "1401159",
    "end": "1408640"
  },
  {
    "text": "um and and we get back all of the right results uh of the right types and again",
    "start": "1413360",
    "end": "1418799"
  },
  {
    "text": "if I just verify that I can",
    "start": "1418799",
    "end": "1423200"
  },
  {
    "text": "do oops okay so so that's things which look",
    "start": "1424760",
    "end": "1432360"
  },
  {
    "text": "like um things which look like uh functions but which are are and they are",
    "start": "1432360",
    "end": "1438440"
  },
  {
    "text": "values so they are values they can be passed as values to higher order functions um and",
    "start": "1438440",
    "end": "1445880"
  },
  {
    "text": "um this is going to be what's going to allow us to um actually perform our map but we",
    "start": "1445880",
    "end": "1452120"
  },
  {
    "text": "still need another another bit of the picture because if we go back to uh our H list that we had",
    "start": "1452120",
    "end": "1458360"
  },
  {
    "text": "before um so let's go",
    "start": "1458360",
    "end": "1462760"
  },
  {
    "text": "one oops yes thank you",
    "start": "1465480",
    "end": "1470360"
  },
  {
    "text": "right so suppose I have um if suppose I'm trying to map um something over",
    "start": "1474799",
    "end": "1481240"
  },
  {
    "text": "um uh over over that H list U let's suppose I'm trying to map a function which is going to uh do a generic sort",
    "start": "1481240",
    "end": "1487840"
  },
  {
    "text": "of size computation on the value so for perhaps uh we could Define it to um uh",
    "start": "1487840",
    "end": "1493240"
  },
  {
    "text": "the size of an integer is the integer itself the size of the string is it Len is its length maybe the size of true is",
    "start": "1493240",
    "end": "1498440"
  },
  {
    "text": "one maybe the size of a list is one now in that case if we map that function across that H list uh we are going to",
    "start": "1498440",
    "end": "1506120"
  },
  {
    "text": "get back uh we'll get back an H list again but it's going to be an H list whose type is completely different from",
    "start": "1506120",
    "end": "1511919"
  },
  {
    "text": "the one we start with it's not going to be an H list of int uh string and Boolean it's going to be in that case an H list of of int uh int int and int um",
    "start": "1511919",
    "end": "1521279"
  },
  {
    "text": "so how do we know how do we write the signatures um um how do we write the signatures of",
    "start": "1521279",
    "end": "1529080"
  },
  {
    "text": "the methods we're trying to Define on an hlist um so there's another bit of the picture involved here",
    "start": "1529080",
    "end": "1536159"
  },
  {
    "text": "um um and this um maybe hopefully reminds you of of some of the stuff I was talking about functional dependences",
    "start": "1536159",
    "end": "1542720"
  },
  {
    "text": "uh at the outset um so let's let's uh take a look at a simplish kind of",
    "start": "1542720",
    "end": "1548919"
  },
  {
    "text": "example um of a way in which we can kind of we can",
    "start": "1548919",
    "end": "1555440"
  },
  {
    "text": "use the type system to compute a result type for a method me is essentially what's going on here so let's have a",
    "start": "1555440",
    "end": "1560760"
  },
  {
    "text": "look at the",
    "start": "1560760",
    "end": "1565320"
  },
  {
    "text": "um so the last method on an H list uh is let's just show you what it does",
    "start": "1568600",
    "end": "1576600"
  },
  {
    "text": "um",
    "start": "1576600",
    "end": "1579600"
  },
  {
    "text": "so so L last right so L last uh it's",
    "start": "1582799",
    "end": "1588840"
  },
  {
    "text": "going to give you the last element of the list just just as you would expected to do on an ordinary list but it's somehow or other got to work out what",
    "start": "1588840",
    "end": "1594760"
  },
  {
    "text": "the right type is for that for that result value to be so it's got to have somehow or other at the type level have",
    "start": "1594760",
    "end": "1600200"
  },
  {
    "text": "traversed uh the type um to compute that the result type of the last method is",
    "start": "1600200",
    "end": "1606520"
  },
  {
    "text": "actually Boolean um it is boole yes it is in that case Okay so let's see how how how does that work then",
    "start": "1606520",
    "end": "1614520"
  },
  {
    "text": "um so here is the um um here's the definition of the last",
    "start": "1616279",
    "end": "1622640"
  },
  {
    "text": "method so this is on the uh on on on the hlist class there's not very much there",
    "start": "1622640",
    "end": "1628279"
  },
  {
    "text": "is there um it's kind of interesting so what's going on here so and it has an argument which is interesting because because the the last method U that I",
    "start": "1628279",
    "end": "1635360"
  },
  {
    "text": "just typed I didn't provide an argument well the last the method sorry the",
    "start": "1635360",
    "end": "1640440"
  },
  {
    "text": "argument for the last method is it's is an implicit so what's going on here so um L here is actually the type of the",
    "start": "1640440",
    "end": "1648200"
  },
  {
    "text": "the whole the whole trait that we're actually in at the moment so L is is is effectively the type of this so um what",
    "start": "1648200",
    "end": "1655399"
  },
  {
    "text": "happens then is if I invoke last on on a list of Type L um I'm asking for an",
    "start": "1655399",
    "end": "1661559"
  },
  {
    "text": "implicit value of type last and I'm going to give back a result of the type",
    "start": "1661559",
    "end": "1669919"
  },
  {
    "text": "oh well this is kind of interesting isn't it it's a a dependent type um it's a type which has been essentially",
    "start": "1669919",
    "end": "1676519"
  },
  {
    "text": "computed in the process of resolving the implicit uh which we're going to use to",
    "start": "1676519",
    "end": "1683000"
  },
  {
    "text": "uh actually compute the last value so I'm going to come back to this sort",
    "start": "1683000",
    "end": "1688880"
  },
  {
    "text": "there's a parallelism going along here in terms of the value and the type level which I'm going to come back to in a moment but I'll just mention it now and",
    "start": "1688880",
    "end": "1695200"
  },
  {
    "text": "sort of move on so let's actually have a look at the implementation",
    "start": "1695200",
    "end": "1700399"
  },
  {
    "text": "um so so here is here is our our our last",
    "start": "1700519",
    "end": "1707279"
  },
  {
    "text": "type class um so it's a uh it's a trait it has a uh",
    "start": "1707279",
    "end": "1714000"
  },
  {
    "text": "a type parameter which is an H so this is this is this is the the Val the type that we're operating on uh we have an abstract type out so this is the the",
    "start": "1714000",
    "end": "1721320"
  },
  {
    "text": "type that we're going to be producing and and then defines an apply method so this is just how we're going to make it",
    "start": "1721320",
    "end": "1726399"
  },
  {
    "text": "work uh which takes a value of our hlist type in and we give back a value of type out okay so now for various reasons to",
    "start": "1726399",
    "end": "1733880"
  },
  {
    "text": "do with some slight limitations in the way that um uh dependent types and",
    "start": "1733880",
    "end": "1739480"
  },
  {
    "text": "implicit values can interact uh in parameter lists uh we're actually not",
    "start": "1739480",
    "end": "1744720"
  },
  {
    "text": "going to work directly with this we're going to work with a slightly tweaked version uh which is uh uh what what I've",
    "start": "1744720",
    "end": "1751039"
  },
  {
    "text": "done here is uh I've taken the thing which was previously a type member and I've sort of turned it into to an",
    "start": "1751039",
    "end": "1757200"
  },
  {
    "text": "additional type parameter in terms of the the the interface we saw above we don't need to work with this but in terms of actually understanding the",
    "start": "1757200",
    "end": "1762519"
  },
  {
    "text": "mechanics it actually makes more sense to to to think in terms of this this auxiliary type um and here again it's",
    "start": "1762519",
    "end": "1768880"
  },
  {
    "text": "exactly the same kind of process we have this is our this is our actual type class um the the tricky thing here is is",
    "start": "1768880",
    "end": "1775080"
  },
  {
    "text": "that when you express it in this form it kind of feels like well I have to know what the answer is before I can actually start asking the question whereas in",
    "start": "1775080",
    "end": "1780960"
  },
  {
    "text": "this form because I'm eventually then going to be referring to a member type of this value um it kind of feels right",
    "start": "1780960",
    "end": "1787360"
  },
  {
    "text": "I know what L is I don't know what out is yet um so that that kind of feels sensible but we can we can kind of",
    "start": "1787360",
    "end": "1794279"
  },
  {
    "text": "assume that that the scholar compiler is going to is going to square things up for us and and we'll see in a in a moment that it it will do okay so with",
    "start": "1794279",
    "end": "1802120"
  },
  {
    "text": "this this kind of slightly tweaked form of the um uh of the uh of the type class",
    "start": "1802120",
    "end": "1808519"
  },
  {
    "text": "we can we can proceed really very very simply um we basically got two cases to Contin to consider we've we've got a a",
    "start": "1808519",
    "end": "1815440"
  },
  {
    "text": "um the case of where we are asking for the last element of a single element H",
    "start": "1815440",
    "end": "1821200"
  },
  {
    "text": "list so um what we need to do is provide a type class instance for that so for",
    "start": "1821200",
    "end": "1826240"
  },
  {
    "text": "any type h if we're looking for the last uh instance for H colon H nil uh",
    "start": "1826240",
    "end": "1834159"
  },
  {
    "text": "we're going to get back an H as our result type and the implementation of the apply method is Trivial it's just",
    "start": "1834159",
    "end": "1840000"
  },
  {
    "text": "it's just ah head of that one element list that's just fine so that's our base case for a recursion um and again kind",
    "start": "1840000",
    "end": "1846240"
  },
  {
    "text": "of like you to notice we've got some sort of parallelisms going on here between between we're kind of recursing down the type and we're kind of",
    "start": "1846240",
    "end": "1852200"
  },
  {
    "text": "recursing down the values in tandem so that's that's something to look at now um this is this is the main recursion",
    "start": "1852200",
    "end": "1859159"
  },
  {
    "text": "step so we've got a um an hlist of so we're trying to compute the last type",
    "start": "1859159",
    "end": "1865480"
  },
  {
    "text": "class for an H list of type t h colon colon T so this is a head and a tail of",
    "start": "1865480",
    "end": "1871880"
  },
  {
    "text": "an H list um H is an arbitary type T is some other H list um to do that we need",
    "start": "1871880",
    "end": "1878519"
  },
  {
    "text": "to have the uh type class instance for the tail um and but once we've got that then",
    "start": "1878519",
    "end": "1884679"
  },
  {
    "text": "it's trivial to compute because uh we just throw away the head and we return the um uh the type class in the the",
    "start": "1884679",
    "end": "1892000"
  },
  {
    "text": "result of applying tail to the to the to the remainder of the list so again what we're doing is we are recursing at the",
    "start": "1892000",
    "end": "1897840"
  },
  {
    "text": "type level and in tandem we're recursing at the value level and that's going to give us our result and the net result",
    "start": "1897840",
    "end": "1903679"
  },
  {
    "text": "okay so this is um the magic of scalar implicit resolution is going to is going to make sure all of this stuff works out",
    "start": "1903679",
    "end": "1910039"
  },
  {
    "text": "in terms of what I did with that magic member type um in fact I can just I can just use a another implicit to convert",
    "start": "1910039",
    "end": "1918799"
  },
  {
    "text": "uh the the Orcs the auxiliary instances into the ones with the sort of the the embedded the embedded abstract type so",
    "start": "1918799",
    "end": "1925039"
  },
  {
    "text": "this is just another abstract sorry another implicit definition which given a last Orcs instance will give me my",
    "start": "1925039",
    "end": "1931320"
  },
  {
    "text": "last instance the one with the embedded the one with the embedded member type so that's the mechanism um for um using",
    "start": "1931320",
    "end": "1939480"
  },
  {
    "text": "implicit independent types for computing type level functions is it is it clear to everyone that that that was actually",
    "start": "1939480",
    "end": "1944720"
  },
  {
    "text": "a typ level computation going on there cached out in terms of dependent types and implicits I I I I'm getting nods nods of",
    "start": "1944720",
    "end": "1952000"
  },
  {
    "text": "heads which is good who's has anyone seen that kind of trick before yeah but in Scola no okay cool that's",
    "start": "1952000",
    "end": "1961240"
  },
  {
    "text": "good um okay so I've kind of covered most of this uh we've got type level",
    "start": "1961240",
    "end": "1967120"
  },
  {
    "text": "recursion Computing result type value level recursion Computing result value do them together uh let's not do that",
    "start": "1967120",
    "end": "1972919"
  },
  {
    "text": "now we can do that over the weekend or later if anyone's interested um so let's",
    "start": "1972919",
    "end": "1978000"
  },
  {
    "text": "put the pieces together and",
    "start": "1978000",
    "end": "1984880"
  },
  {
    "text": "um so we're going to have a type level recursion to do a map um the type level",
    "start": "1984880",
    "end": "1990960"
  },
  {
    "text": "recursion will compute the result type for us and but it'll do something else as well um so you remember we saw those",
    "start": "1990960",
    "end": "1998120"
  },
  {
    "text": "type specific cases for polymorphic function value so what I mean I I didn't quite show you enough of the details of",
    "start": "1998120",
    "end": "2004279"
  },
  {
    "text": "how the the cases themselves are actually captured effectively as type classes too but if you think about the",
    "start": "2004279",
    "end": "2010480"
  },
  {
    "text": "way in which that recursion pulled out a type class instance for the tail what we're also going to do is at the same",
    "start": "2010480",
    "end": "2017000"
  },
  {
    "text": "time we're going to pull out a polymorphic function value instance for the head um and so basically you can",
    "start": "2017000",
    "end": "2023679"
  },
  {
    "text": "think of the polor function values as being as sort of collections of type indexed implementations of of of of of",
    "start": "2023679",
    "end": "2031000"
  },
  {
    "text": "the function value and we can we can do that at the same time and I'm actually going to show you the code um run rather than show it running",
    "start": "2031000",
    "end": "2040960"
  },
  {
    "text": "because possibly at this point the code is more is more Illuminating um",
    "start": "2040960",
    "end": "2048960"
  },
  {
    "text": "so so here's the map function as defined directly on the um uh on the uh the the",
    "start": "2050879",
    "end": "2058839"
  },
  {
    "text": "uh the hlist trait so it takes a a a function value so HF of uh actually that",
    "start": "2058839",
    "end": "2065800"
  },
  {
    "text": "it should probably be something else it was it was it was initially HF for higher ranked function but basically",
    "start": "2065800",
    "end": "2071520"
  },
  {
    "text": "it's a polymorphic function value so that that is a type parameter um and we're going to ask the compiler to give",
    "start": "2071520",
    "end": "2076919"
  },
  {
    "text": "us a mapper which is going to map this polymorphic function value across this list L and the result type of that",
    "start": "2076919",
    "end": "2083878"
  },
  {
    "text": "function is going to be the output type of that mapper type so let's find the definition of the",
    "start": "2083879",
    "end": "2089440"
  },
  {
    "text": "mapper uh whoops right okay so mapper um um uh so the",
    "start": "2090000",
    "end": "2099440"
  },
  {
    "text": "mappa is it's has the function type it has the hlist type as its input its output this time is an hlist so we have",
    "start": "2099440",
    "end": "2105400"
  },
  {
    "text": "a bound on it we can say it's an hlist uh and apply is just into to out so we've done the same trick as I showed",
    "start": "2105400",
    "end": "2111119"
  },
  {
    "text": "you before we've kind of folded out the the the the member type into into a an additional type argument um again it's a",
    "start": "2111119",
    "end": "2118680"
  },
  {
    "text": "technical thing um we don't need to worry about it too much now here are again are just merely two cases we have",
    "start": "2118680",
    "end": "2126440"
  },
  {
    "text": "an H nil case if we're mapping a function across an empty H list then we get back an empty H list no matter what",
    "start": "2126440",
    "end": "2132520"
  },
  {
    "text": "and if we're mapping a um um a uh a function across a composite H list then",
    "start": "2132520",
    "end": "2140280"
  },
  {
    "text": "we're going to have okay looks a bit scary but but it's actually not that hard so this",
    "start": "2140280",
    "end": "2146000"
  },
  {
    "text": "is this is our polymorphic function so captured by its type we've got an input head we've got an output head we've got",
    "start": "2146000",
    "end": "2152960"
  },
  {
    "text": "an input tail and we've got an output tail and so a p P pull back the kind of",
    "start": "2152960",
    "end": "2159800"
  },
  {
    "text": "category Theory jargon it just basically means that all of our instances for this",
    "start": "2159800",
    "end": "2165599"
  },
  {
    "text": "function are going to produce the same output result type so that there whatever whatever whatever whatever in h",
    "start": "2165599",
    "end": "2171240"
  },
  {
    "text": "is out H is always going to be a single fixed type so that's that's that's it doesn't matter what it's called um so",
    "start": "2171240",
    "end": "2178280"
  },
  {
    "text": "Okay so we've got two things that we're pulling in from our our implicit environment we're pulling in a the",
    "start": "2178280",
    "end": "2184359"
  },
  {
    "text": "function instance for our input head head producing the output head so",
    "start": "2184359",
    "end": "2190359"
  },
  {
    "text": "implicit resolution will have worked out all of these types for us and then we also need to have a mapper for the tail",
    "start": "2190359",
    "end": "2196000"
  },
  {
    "text": "so it's the same function and we where we've got the input tail and the output tail um and then the implementation is",
    "start": "2196000",
    "end": "2202760"
  },
  {
    "text": "is completely trivial um we are just uh applying the type specific case for uh",
    "start": "2202760",
    "end": "2210319"
  },
  {
    "text": "of our function to the head and then we're prepending that to the mapping of the tail and that gives us our result",
    "start": "2210319",
    "end": "2216640"
  },
  {
    "text": "all types line up all the types have been computed for us by um by by by implicit resolution essentially",
    "start": "2216640",
    "end": "2223960"
  },
  {
    "text": "um and and that's it um I can show you doing it but I'd have to faf around for and Nathan is scouring at me suggesting",
    "start": "2223960",
    "end": "2230720"
  },
  {
    "text": "that i' I've run out of time so I uh come come and ask me and I I will prove that it works but forkit uh mailing list",
    "start": "2230720",
    "end": "2237560"
  },
  {
    "text": "um I will be writing I've got a big backlock of U of articles that I should be writing about this kind of stuff and",
    "start": "2237560",
    "end": "2243319"
  },
  {
    "text": "um talk to me about underscore sometime over the weekend as well would be cool thank you very much [Applause]",
    "start": "2243319",
    "end": "2252080"
  },
  {
    "text": "[Music]",
    "start": "2252080",
    "end": "2260550"
  }
]