[
  {
    "start": "0",
    "end": "300000"
  },
  {
    "text": "[Music]",
    "start": "560",
    "end": "23119"
  },
  {
    "text": "hey guys um thanks very much for coming uh my name is John codal I'm a team lead",
    "start": "23119",
    "end": "28240"
  },
  {
    "text": "here at atlassian so I've been working on a project called The atlassian Marketplace and uh basically what we've",
    "start": "28240",
    "end": "34399"
  },
  {
    "text": "been doing is we've been basically making an app store for atlassian applications uh where you can purchase",
    "start": "34399",
    "end": "40200"
  },
  {
    "text": "uh add-ons that third parties have made um for Within products like jira and how that becomes relevant to this talk is",
    "start": "40200",
    "end": "46280"
  },
  {
    "text": "that um as part of that project we launched a new site called uh marketplace. atlassian domcom um and",
    "start": "46280",
    "end": "52520"
  },
  {
    "text": "we're actually going to be announcing that at our big user conference next week um and uh that we we we got to pick",
    "start": "52520",
    "end": "58239"
  },
  {
    "text": "a new tech stack for that um I chose Scala with on the back end and one",
    "start": "58239",
    "end": "63480"
  },
  {
    "text": "of the things that we wanted to do is um try to be as functional as possible um we're big into pure functional languages",
    "start": "63480",
    "end": "69479"
  },
  {
    "text": "and um you know um big Haskell fans uh amongst us um and we decided to use",
    "start": "69479",
    "end": "75080"
  },
  {
    "text": "Scala Ed um which is a library uh that tries to bring some of the concepts from hasell uh into the scholar world uh and",
    "start": "75080",
    "end": "82840"
  },
  {
    "text": "we use schola Ed pretty heavily in this new marketplace. atlas.com project um",
    "start": "82840",
    "end": "88640"
  },
  {
    "text": "this was also a huge move for us because traditionally atlassian is a a Java shop",
    "start": "88640",
    "end": "93960"
  },
  {
    "text": "uh and so we were just getting started with um you know getting a new set of developers acclimated to Scala we had a",
    "start": "93960",
    "end": "100360"
  },
  {
    "text": "core set of developers three or four of us who were already pretty familiar with Scala and wanted to take it to the next",
    "start": "100360",
    "end": "105439"
  },
  {
    "text": "level to Scala Ed um and then when we you know came out of a room a couple months later into the project and tried",
    "start": "105439",
    "end": "111759"
  },
  {
    "text": "to and launched it on everybody and we're like hey guys Scala is awesome and they looked at the code and there were",
    "start": "111759",
    "end": "116960"
  },
  {
    "text": "monads everywhere and monad Transformers all up the w Zoo um people got a little",
    "start": "116960",
    "end": "122039"
  },
  {
    "text": "intimidated um and so what I what I thought would help would be a little training for the team and I started",
    "start": "122039",
    "end": "127360"
  },
  {
    "text": "looking um you know we started you know on chat when people would ask for help I'd be like oh yeah just read this",
    "start": "127360",
    "end": "132800"
  },
  {
    "text": "tutorial and it would be something for Haskell uh and there was like a lot of cognitive dissonance there because",
    "start": "132800",
    "end": "138400"
  },
  {
    "text": "people would be like uh reading stuff and you know saying okay you know it works like this and then the hasal",
    "start": "138400",
    "end": "143560"
  },
  {
    "text": "concept wouldn't apply very cleanly to schola um and so that that that that level of indirection I think was really",
    "start": "143560",
    "end": "149239"
  },
  {
    "text": "problematic for people um so one of the things that I wanted to do was ditch that ditch that level of indirection so",
    "start": "149239",
    "end": "154920"
  },
  {
    "text": "I took one of the better tutorials that I found one of the better pieces of documentation that I found from the",
    "start": "154920",
    "end": "160720"
  },
  {
    "text": "hasal world which is called the type class opedia um written by this guy named Brent yorgi and I decided to Port",
    "start": "160720",
    "end": "166080"
  },
  {
    "text": "it to Scala and um interestingly enough I thought I'd just be sort of porting U",
    "start": "166080",
    "end": "171159"
  },
  {
    "text": "making syntax changes and showing what the syntax would look like in Scala uh and there was a lot of that to be quite",
    "start": "171159",
    "end": "176519"
  },
  {
    "text": "Fair um but but Scala and hascal are very different languages um and they're",
    "start": "176519",
    "end": "182080"
  },
  {
    "text": "they're they're different in ways that really matter when you're explaining this material um and so I found that I",
    "start": "182080",
    "end": "187200"
  },
  {
    "text": "had to um sort of red redefine how things worked a little bit um Scala Ed",
    "start": "187200",
    "end": "192840"
  },
  {
    "text": "uh defines some of the types A little bit differently there historical mistakes in hascol that have been",
    "start": "192840",
    "end": "198159"
  },
  {
    "text": "corrected in schola Zed and mistakes introduced in schola Zed because of the way schola works and I tried to kind of",
    "start": "198159",
    "end": "204480"
  },
  {
    "text": "sort all of that out and present a more unified document um about this stuff so",
    "start": "204480",
    "end": "210200"
  },
  {
    "text": "so this is the typee classopia the Scola version um and this is basically only the first third of of the type classopia",
    "start": "210200",
    "end": "217400"
  },
  {
    "text": "um so this is going to be a little bit of a short talk so hopefully we'll have a time to chat afterwards um I'm",
    "start": "217400",
    "end": "223400"
  },
  {
    "text": "intending to continue this and maybe do the the second uh the second and third Parts uh at some point in the near",
    "start": "223400",
    "end": "229159"
  },
  {
    "text": "future um so let's get started yeah um so the first thing that we need to talk",
    "start": "229159",
    "end": "234920"
  },
  {
    "text": "about is uh what a type class is so how many of you guys actually are Haso refugees or",
    "start": "234920",
    "end": "240439"
  },
  {
    "text": "okay so a couple people so this is going to feel like a warm and fuzzy blanket for you right it's going to be pretty",
    "start": "240439",
    "end": "246319"
  },
  {
    "text": "easy and I hope that that doesn't um put you off I think uh that hopefully this will still be interesting to you um how",
    "start": "246319",
    "end": "252599"
  },
  {
    "text": "many of you guys are heavy users of scaled or have you used scaled at all in your code cool so there's some people",
    "start": "252599",
    "end": "258759"
  },
  {
    "text": "and so this will this will be hopefully um bringing some of the concepts in scholet and sort of documenting them for",
    "start": "258759",
    "end": "264800"
  },
  {
    "text": "you because a lot of schola Ed is uh it's it's pretty hard to learn I think uh anyway type classes so the first",
    "start": "264800",
    "end": "270280"
  },
  {
    "text": "thing that we need to talk about is type classes um but but this is kind of just prerequisite material uh I'm not",
    "start": "270280",
    "end": "276199"
  },
  {
    "text": "actually going to spend uh you know an hour explaining what type classes are actually Dan uh made an awesome tutorial",
    "start": "276199",
    "end": "281840"
  },
  {
    "text": "on type classes and uh I would highly recommend going online and checking that out if you want a little more detailed",
    "start": "281840",
    "end": "286919"
  },
  {
    "text": "material it's on YouTube Dan says it's on YouTube um so it must be on YouTube",
    "start": "286919",
    "end": "291960"
  },
  {
    "text": "um so so let me just give you the brief 10-minute primer on type classes and we'll move on from there so type classes",
    "start": "291960",
    "end": "298080"
  },
  {
    "text": "are kind of like I I call them open World interfaces and they're kind of akin to Java interfaces at least to a",
    "start": "298080",
    "end": "304800"
  },
  {
    "start": "300000",
    "end": "300000"
  },
  {
    "text": "first approximation um but they're a little bit more flexible and we'll see how that that works in a second um so if",
    "start": "304800",
    "end": "312000"
  },
  {
    "text": "the main thing that I want to get across here is that uh I want to define a set of behaviors that a class or something",
    "start": "312000",
    "end": "317280"
  },
  {
    "text": "like that must Implement right uh and in Java in the Java world I would do that with an interface um the sort of Scala",
    "start": "317280",
    "end": "323479"
  },
  {
    "text": "level version of that would just be to declare a trait um so like something like this in this particular example I'm",
    "start": "323479",
    "end": "329479"
  },
  {
    "text": "going to declare a trait called show and it's going to work kind of like two string so I'm going to apply show to anything that I want to say print out on",
    "start": "329479",
    "end": "335960"
  },
  {
    "text": "the repple uh something like that now in the Java style of things I would declare",
    "start": "335960",
    "end": "341120"
  },
  {
    "text": "the show trait like this or the show interface like this where I would Define the methods that I that I want my",
    "start": "341120",
    "end": "346600"
  },
  {
    "text": "interface to implement uh and then I would uh uh just have a just Define the methods that's it really um but in",
    "start": "346600",
    "end": "354199"
  },
  {
    "text": "schola with a type class there's going to be a slight distinction uh and it's going to look like this so instead of just having show show I'm going to",
    "start": "354199",
    "end": "360560"
  },
  {
    "text": "parameter add a parameterized type here so this show will take a type parameter a and I'll Define the shows method as",
    "start": "360560",
    "end": "366880"
  },
  {
    "text": "taking a value of type A and returning a string um but really what I'm doing is the same thing I'm defining a set of",
    "start": "366880",
    "end": "372919"
  },
  {
    "text": "behaviors that's the type class that I want to uh my code to implement so after I Define the type",
    "start": "372919",
    "end": "379400"
  },
  {
    "text": "class uh I need a way to say that a particular type belongs to that class",
    "start": "379400",
    "end": "384759"
  },
  {
    "text": "that's the second step here um so what I'm what I'm going to provide is what I like to call a witness",
    "start": "384759",
    "end": "390319"
  },
  {
    "text": "uh it's an instance of that type class for any particular type and the way that's implemented in Scala is to",
    "start": "390319",
    "end": "396120"
  },
  {
    "text": "basically make an anonymous uh class specialized to the type that you want to add to the type class so in this case I",
    "start": "396120",
    "end": "402599"
  },
  {
    "text": "want to say that um int should belong to the show type class how do I do that",
    "start": "402599",
    "end": "408039"
  },
  {
    "text": "well I make a new show in uh it's an anonymous class and I implement the shows method and in this particular case",
    "start": "408039",
    "end": "414800"
  },
  {
    "text": "all I'm going to do is call two string um that's it so",
    "start": "414800",
    "end": "420240"
  },
  {
    "text": "now I've got two things I've got a definition of the type class so I have a set of behaviors that I want to implement and I have an instance for",
    "start": "420240",
    "end": "426960"
  },
  {
    "text": "every type that I want to to Define as being in that class the third thing that I need is is a little bit more",
    "start": "426960",
    "end": "432599"
  },
  {
    "text": "boilerplate and that is I need to I need a way to call that method um and the way that's done in Scala is uh by an",
    "start": "432599",
    "end": "439520"
  },
  {
    "text": "implicit so I'm actually going to declare another copy of the shows method and it's going to take an implicit",
    "start": "439520",
    "end": "445039"
  },
  {
    "start": "444000",
    "end": "444000"
  },
  {
    "text": "parameter uh the implicit parameter is the witness so this is saying this can only compile if there's a witness that",
    "start": "445039",
    "end": "451639"
  },
  {
    "text": "says that the type that I'm calling this on belongs to the type class make sense uh it's a little bit confusing because I",
    "start": "451639",
    "end": "457800"
  },
  {
    "text": "called it shows as well but that's kind of a convention thing uh that's pretty common um there's another way to write",
    "start": "457800",
    "end": "463840"
  },
  {
    "text": "this using something called context pounds in Scala uh Scala loves syntax um",
    "start": "463840",
    "end": "468919"
  },
  {
    "text": "so it provides an alternative syntax as well uh so what you can do is you can say a colon and then the type class name",
    "start": "468919",
    "end": "475560"
  },
  {
    "text": "so I I can say a must be a show there must be a witness saying that what whatever the a is it must be in the show",
    "start": "475560",
    "end": "482039"
  },
  {
    "text": "type class um and then I can ditch the implicit parameter the downside to this syntax is that um I need a way to",
    "start": "482039",
    "end": "489360"
  },
  {
    "text": "actually materialize the implicit perimeter out you can't it doesn't have a name in this second case um so I use a",
    "start": "489360",
    "end": "495000"
  },
  {
    "text": "method a utility method in preda called implicitly to pull that out and then call it but it's really the same thing",
    "start": "495000",
    "end": "502759"
  },
  {
    "text": "okay uh in Scala Zed if you're using the Scala Zed Library there's a nice uh thing that they do there which is that",
    "start": "502759",
    "end": "508080"
  },
  {
    "text": "they pimp uh a lot of the common type classes for you so you can actually use dot notation so you can actually just",
    "start": "508080",
    "end": "513560"
  },
  {
    "text": "say three dot shows if you're using Scola Scola Zed that is okay so that seems like a little bit",
    "start": "513560",
    "end": "520880"
  },
  {
    "start": "515000",
    "end": "515000"
  },
  {
    "text": "wonky um there's three things that I had to do there I had to declare a type class I had to make a type class",
    "start": "520880",
    "end": "526000"
  },
  {
    "text": "instance and then I had this extra boiler plate uh of the shows method um but actually I've gained some kind of",
    "start": "526000",
    "end": "531800"
  },
  {
    "text": "interesting things here um the first thing that I want you to notice is that",
    "start": "531800",
    "end": "536880"
  },
  {
    "text": "uh I declared this behavior on a typ Ty that was already defined it's part of the standard Library it's int right um",
    "start": "536880",
    "end": "543240"
  },
  {
    "text": "int knew nothing about this show guy that I just made up but I was able to add int uh add a new Behavior to int and",
    "start": "543240",
    "end": "549440"
  },
  {
    "text": "that's actually really powerful I call that the open world assumption it's a it's a distinct difference between the",
    "start": "549440",
    "end": "555279"
  },
  {
    "text": "type class style of ad hoc polymorphism and subtype polymorphism that you would normally have with uh with",
    "start": "555279",
    "end": "562320"
  },
  {
    "text": "interfaces uh another thing that you can do in schala with type classes is you get a little bit more flexibility um in",
    "start": "562320",
    "end": "568240"
  },
  {
    "text": "schola you can actually over IDE the type class instance in a li in a limited scope and then have that alternative",
    "start": "568240",
    "end": "574320"
  },
  {
    "text": "definition apply so what I can do here um this little snippet of code here I defined an alternate instance for INT",
    "start": "574320",
    "end": "581120"
  },
  {
    "text": "for show um and in that alternate instance I'm I'm counting just by or I'm displaying the integer with a set of",
    "start": "581120",
    "end": "587959"
  },
  {
    "text": "vertical pipes it's kind of like I'm counting in uny um and if I have that thing in scope and call shows uh then",
    "start": "587959",
    "end": "594720"
  },
  {
    "text": "what gets what gets used is the the other implicit uh and so I can essentially tailor the the specific",
    "start": "594720",
    "end": "601600"
  },
  {
    "text": "implementation uh of show for any particular type wherever I want um and that's actually a pretty powerful thing",
    "start": "601600",
    "end": "608120"
  },
  {
    "text": "um I actually don't you guys are some of you guys know High School pretty well I don't think you can do that in high school can you yeah you cannot do that",
    "start": "608120",
    "end": "613959"
  },
  {
    "text": "in high school so so scholas type classes via implicits is slightly more powerful in that",
    "start": "613959",
    "end": "620040"
  },
  {
    "text": "regard um so another thing that I want to point out is that type classes aren't quite equivalent to subtype polymorphism",
    "start": "620040",
    "end": "626600"
  },
  {
    "start": "626000",
    "end": "626000"
  },
  {
    "text": "um there's a lot of flexibility that you get from type classes but there's certain things that are a little bit harder to encode with uh your",
    "start": "626600",
    "end": "632560"
  },
  {
    "text": "traditional subtype polymorphism um and so here's a little bit of an example this is some hybrid combination of Scala",
    "start": "632560",
    "end": "639120"
  },
  {
    "text": "and Java I don't know quite what it is but you guys will get the idea um so I've declared my show interface here",
    "start": "639120",
    "end": "645200"
  },
  {
    "text": "like Java Style with an interface uh and then I have two classes that extend show",
    "start": "645200",
    "end": "650760"
  },
  {
    "text": "um and then what I do here is I just make a list of show a list whose uh elements are of type show by making a",
    "start": "650760",
    "end": "657240"
  },
  {
    "text": "new array list and putting foods and bars in there kind of willy-nilly uh and then I can iterate over that list and",
    "start": "657240",
    "end": "662639"
  },
  {
    "text": "just call show on each of the elements and that'll do the needful um the",
    "start": "662639",
    "end": "667920"
  },
  {
    "text": "problem with this is uh can anybody see the problem with this if you try to encode this with implicits and sub and",
    "start": "667920",
    "end": "673839"
  },
  {
    "text": "uh type classes any guesses well if you think about it the problem is that each of the",
    "start": "673839",
    "end": "680320"
  },
  {
    "text": "types of the elements in here is going to need its own type class instance and there's there's really only one",
    "start": "680320",
    "end": "685839"
  },
  {
    "text": "available for this container the array list right um so there's no to kind of pair the list each element in the list",
    "start": "685839",
    "end": "692120"
  },
  {
    "text": "with the correct type class instance actually you can do it and and in fact I posed this question to Dan and and he",
    "start": "692120",
    "end": "697639"
  },
  {
    "text": "actually came up with this ridiculous example uh if you look at the slides um Offline that that not easily at least",
    "start": "697639",
    "end": "704680"
  },
  {
    "text": "part is linked and you can actually look at an encoding of this um but the point is to say not that it's you know not",
    "start": "704680",
    "end": "710040"
  },
  {
    "text": "expressable but rather that it's extremely awkward um like most of the things that Dan does um we're yeah yeah",
    "start": "710040",
    "end": "718240"
  },
  {
    "text": "no problem um so so yeah if you find yourself trying to do something funky like this you'll you'll find that that",
    "start": "718240",
    "end": "724160"
  },
  {
    "text": "this this encoding doesn't quite work very well okay so that's type classes in",
    "start": "724160",
    "end": "729200"
  },
  {
    "start": "726000",
    "end": "726000"
  },
  {
    "text": "in a few minutes um and now we can move on to the meat of the talk which is actually the type class opedia uh so",
    "start": "729200",
    "end": "734920"
  },
  {
    "text": "what the heck is the type class opedia it's basically just a set of interrelated type classes that have",
    "start": "734920",
    "end": "740480"
  },
  {
    "text": "proven extremely handy for structuring functional code so when you're a functional programmer um these type",
    "start": "740480",
    "end": "746600"
  },
  {
    "text": "classes just happen to be really useful and you'll run into problems um when you're writing functional code and often times um if you're using these",
    "start": "746600",
    "end": "753800"
  },
  {
    "text": "type classes um you'll find yourself able to code your way out with really elegant Solutions um the way that you",
    "start": "753800",
    "end": "759639"
  },
  {
    "text": "should read this diagram so I I should say that I pimp this diagram totally from the hll docs um so there's some",
    "start": "759639",
    "end": "765440"
  },
  {
    "text": "artifacts in this diagram that are artifacts of the way things work in hasle um but the idea is that the solid",
    "start": "765440",
    "end": "771320"
  },
  {
    "text": "arrows represent the uh Isa kind of relationship so every monad is an applicative is a funter uh every",
    "start": "771320",
    "end": "778199"
  },
  {
    "text": "traversal is a traversible is a funter and so on um the dotted lines are used",
    "start": "778199",
    "end": "784279"
  },
  {
    "text": "to indicate some other kind of uh relationship um some other being undefined and not really relevant to",
    "start": "784279",
    "end": "790199"
  },
  {
    "text": "this talk um and then the grade out things represent things that aren't actually in the hasool standard",
    "start": "790199",
    "end": "795360"
  },
  {
    "text": "libraries um but I believe that most of them are in schola Ed so apply for example is in schola Zed um so like I",
    "start": "795360",
    "end": "802959"
  },
  {
    "text": "said these are kind of like functional design patterns um you know I think if you look back if you weren't using this stuff you could probably look back at a",
    "start": "802959",
    "end": "809639"
  },
  {
    "text": "lot of the functional code that you've written and see how this stuff applies in in very clean ways um and the other",
    "start": "809639",
    "end": "816360"
  },
  {
    "text": "cool thing to note about this stuff is that there's nothing magical about these particular type classes I think in general people uh kind of get uh",
    "start": "816360",
    "end": "823880"
  },
  {
    "text": "overwhelmed or discouraged when they read these tutorials because they they it seems like they're more complicated than they are I mean literally funter is",
    "start": "823880",
    "end": "830680"
  },
  {
    "text": "just an interface with one method applicative is an interface with two methods and monad it's three methods",
    "start": "830680",
    "end": "836800"
  },
  {
    "text": "right so what what could be easier right um furthermore there's nothing really",
    "start": "836800",
    "end": "842000"
  },
  {
    "text": "magical in the language about these type classes so uh when you're dealing with them like you can actually use these in",
    "start": "842000",
    "end": "847839"
  },
  {
    "text": "any any language that's sufficiently expressive um there's nothing preventing you from doing that um there's an",
    "start": "847839",
    "end": "852959"
  },
  {
    "text": "asterisk there because there's there's one exception and that's around monads and the Syntax for monads I'll talk about that a little bit later but",
    "start": "852959",
    "end": "859320"
  },
  {
    "text": "basically when you're using monads uh extensively in your code monads tend to be a little bit infectious so they they",
    "start": "859320",
    "end": "864519"
  },
  {
    "text": "tend to propagate around in your code um and the syntax the raw Syntax for for calling uh for accessing the monad uh",
    "start": "864519",
    "end": "871320"
  },
  {
    "text": "interface is kind of ugly um so a lot of languages will have special Syntax for for for dealing with monads uh in Scala",
    "start": "871320",
    "end": "878040"
  },
  {
    "text": "that's a for comprehension in in hasell that's like du notation um so like I said these are",
    "start": "878040",
    "end": "883600"
  },
  {
    "text": "provided in Scala Zed which is an open source Library um and all the examples",
    "start": "883600",
    "end": "888959"
  },
  {
    "text": "all the code Snippets in here are they're mostly compilable and they work uh against Scola Zed 7 if you're using",
    "start": "888959",
    "end": "894519"
  },
  {
    "text": "Scola Zed 6 there are some slight differences but um but they should be pretty easy to pick up on",
    "start": "894519",
    "end": "900480"
  },
  {
    "text": "and like I said this is how the H the hcll uh standard libraries Define this stuff there were some mistakes that have",
    "start": "900480",
    "end": "906240"
  },
  {
    "text": "kind of been made in in the way that things work in hascal and so that this is this doesn't repres represent",
    "start": "906240",
    "end": "911959"
  },
  {
    "text": "Perfection um yeah anyway so in this talk I'm actually",
    "start": "911959",
    "end": "918160"
  },
  {
    "text": "going to cover three pieces of this type classopia I'm going to cover funter applicative and Mona so we're just going",
    "start": "918160",
    "end": "924720"
  },
  {
    "text": "to go right down the line here um those I think are are some of the most interesting faces to talk about um and",
    "start": "924720",
    "end": "931160"
  },
  {
    "text": "hopefully in the future I'll be extending these slides and talking about I think the natural extension from what I'm going to talk about is going into",
    "start": "931160",
    "end": "937360"
  },
  {
    "text": "monad Transformers um and then I'll probably cover um monoid and some other things after",
    "start": "937360",
    "end": "943880"
  },
  {
    "text": "that okay so uh let's talk about funs um",
    "start": "943880",
    "end": "949160"
  },
  {
    "start": "945000",
    "end": "945000"
  },
  {
    "text": "a funter is is really simple like I said it's an interface with it's a type class with one method and the only method that",
    "start": "949160",
    "end": "954759"
  },
  {
    "text": "it defines is called map um so what could be easier right um so the map method looks like this so",
    "start": "954759",
    "end": "962000"
  },
  {
    "text": "this this is this is the way we Define so go back to the type class stuff that I was showing you this is the definition",
    "start": "962000",
    "end": "967720"
  },
  {
    "text": "of the type class so there's this trait funter it defines a single method called map uh which has two type parameters and",
    "start": "967720",
    "end": "973959"
  },
  {
    "text": "two arguments um it takes an fa which is a funter of A's and it takes a function",
    "start": "973959",
    "end": "979519"
  },
  {
    "text": "from A's to B's and it returns a an F of B A functor of B's so this is very very intuitively and",
    "start": "979519",
    "end": "986839"
  },
  {
    "text": "very simply doing something like turning a an a list of strings into a list of",
    "start": "986839",
    "end": "992040"
  },
  {
    "text": "ins that that would be an example of this thing um so right we declared a type",
    "start": "992040",
    "end": "998079"
  },
  {
    "text": "class uh now we need to to to say that certain types belong to that type class and we'll do that by providing instances",
    "start": "998079",
    "end": "1005000"
  },
  {
    "text": "and so here's an instance for option um so we just need to implement map um so",
    "start": "1005000",
    "end": "1010360"
  },
  {
    "text": "we declare a new funter Option and we Implement map as follows so let's just follow the types here uh we have an",
    "start": "1010360",
    "end": "1016319"
  },
  {
    "text": "option A a function from A's to B's and the result needs to be an option b uh",
    "start": "1016319",
    "end": "1021600"
  },
  {
    "text": "well there's really only one way to implement this and there's actually some mathematical depth in that statement",
    "start": "1021600",
    "end": "1027000"
  },
  {
    "text": "there really is only one way to implement this correctly at least in a way that uh applies uh that that that is",
    "start": "1027000",
    "end": "1032640"
  },
  {
    "text": "a true functor um and so what we do is uh we we look at our option we kind of take it apart if it was a sum um then we",
    "start": "1032640",
    "end": "1039918"
  },
  {
    "text": "just call F on the on the on the on the value within that sum and then wrap it back up in a sum otherwise it's just",
    "start": "1039919",
    "end": "1046480"
  },
  {
    "text": "none uh and the result is an option b that's that's it um one of the nice things that I like",
    "start": "1046480",
    "end": "1052559"
  },
  {
    "text": "about hasell even though like I said I'm not a hll developer really um is that uh",
    "start": "1052559",
    "end": "1057600"
  },
  {
    "text": "in Haskell the the type signature is actually different um so first of all the the TP the the function name is",
    "start": "1057600",
    "end": "1062640"
  },
  {
    "text": "called fmap instead of map um but also the arguments are reversed so um you're",
    "start": "1062640",
    "end": "1068400"
  },
  {
    "text": "actually going to get uh the function first so it takes the a a ARS B parameter first uh and then it takes an",
    "start": "1068400",
    "end": "1075280"
  },
  {
    "text": "fa and returns an FB um and I actually really like that because um it gives you",
    "start": "1075280",
    "end": "1080799"
  },
  {
    "text": "kind of an intuition into another kind of intuition into what a funter does",
    "start": "1080799",
    "end": "1085840"
  },
  {
    "text": "right so so think about it this way just read the type signature I hand you a function from as's to B's uh or I hand",
    "start": "1085840",
    "end": "1092320"
  },
  {
    "text": "the funter a function from as's to B's and it hands me back a new function",
    "start": "1092320",
    "end": "1097360"
  },
  {
    "text": "which takes FAS and returns FBS right so it's basically lifting the function uh",
    "start": "1097360",
    "end": "1103280"
  },
  {
    "text": "into into this new world from a normal old function into a a special function",
    "start": "1103280",
    "end": "1108960"
  },
  {
    "text": "ized function does that make sense a little bit okay so um a little bit more",
    "start": "1108960",
    "end": "1116280"
  },
  {
    "text": "about fun it's kind of interesting this is this is an interface with one method and we're going to talk about it for for a little bit here um so the the idea",
    "start": "1116280",
    "end": "1123600"
  },
  {
    "text": "that this is a this gives you the ability to map over things that idea leads you to some obvious examples right",
    "start": "1123600",
    "end": "1129559"
  },
  {
    "text": "um any IDE give me throw some out right there's uh lists what else what else can",
    "start": "1129559",
    "end": "1134840"
  },
  {
    "start": "1130000",
    "end": "1130000"
  },
  {
    "text": "you map over trees trees oh good uh you can map over Maps yeah so that leads",
    "start": "1134840",
    "end": "1142080"
  },
  {
    "text": "you to a bunch of really obvious examples um but let's look at something a little less obvious functions you can",
    "start": "1142080",
    "end": "1148600"
  },
  {
    "text": "actually there functions are actually functors as well um and this is where the Scola gets uh Miley hideous Miley to",
    "start": "1148600",
    "end": "1156159"
  },
  {
    "text": "slightly hideous so I actually had to so so function has two type arguments so I had to partially apply the function type",
    "start": "1156159",
    "end": "1162200"
  },
  {
    "text": "Constructor and so I have a type Lambda here to do that um but Pop Quiz okay",
    "start": "1162200",
    "end": "1168120"
  },
  {
    "text": "looking at this definition uh I defined I Define this in kind of a slightly Funk funky way but there's a very very simple",
    "start": "1168120",
    "end": "1174480"
  },
  {
    "text": "concept that this is expressing can anybody see it can anybody tease it out from the crappy",
    "start": "1174480",
    "end": "1181039"
  },
  {
    "text": "Scala I think somebody said it yeah exactly it's just function composition so so funter as function is just",
    "start": "1181039",
    "end": "1188480"
  },
  {
    "text": "function composition and again the hascal version is is way better at at elucidating this point right so here's",
    "start": "1188480",
    "end": "1195000"
  },
  {
    "text": "fmap um here's fmap and it takes your a here's just the definition F map and I'm just going to substitute in the function",
    "start": "1195000",
    "end": "1201760"
  },
  {
    "text": "Type R arrows a for fa and then you can see it right there right like there there's your composition I I given an R",
    "start": "1201760",
    "end": "1209480"
  },
  {
    "text": "uh this can turn it into an a chain it into this guy and you'll get an a function from R to B right um and so",
    "start": "1209480",
    "end": "1215520"
  },
  {
    "text": "this idea functions as fun it's uh it's it's actually going to be very useful um",
    "start": "1215520",
    "end": "1222080"
  },
  {
    "text": "it leads to a very useful um monad uh extension so so functions as monad will",
    "start": "1222080",
    "end": "1228200"
  },
  {
    "text": "be the monad and that that's going to be very useful um we use that all the time in our own code base I'll talk about",
    "start": "1228200",
    "end": "1234240"
  },
  {
    "text": "that in a little bit okay so so as an aside if you read a lot of these tutorials online um there's like sort of",
    "start": "1234240",
    "end": "1241520"
  },
  {
    "text": "a cottage industry around building tutorials around monads and functors and applicative functors um I'm pretty sure",
    "start": "1241520",
    "end": "1247919"
  },
  {
    "text": "there's a company there that somewhere that just makes monad tutorials uh anyway there they all use words like box",
    "start": "1247919",
    "end": "1254679"
  },
  {
    "text": "and uh you know computational context and and I I think that's a good way to start so you can you can start with the",
    "start": "1254679",
    "end": "1260480"
  },
  {
    "text": "the analogy of okay these things work on like a monad is a container or a burrito or whatever the hell else the tutorial",
    "start": "1260480",
    "end": "1266720"
  },
  {
    "text": "is working with um but but go from go from the intuition and sort of ditch the",
    "start": "1266720",
    "end": "1271840"
  },
  {
    "text": "sort of like this works on containers and try to expand your horizons beyond that as quickly as possible um the",
    "start": "1271840",
    "end": "1277679"
  },
  {
    "text": "analogy is good for starting out but when you ditch it things will start making more sense more",
    "start": "1277679",
    "end": "1282880"
  },
  {
    "text": "quickly okay more on funter I I this I love map it's a great function I can",
    "start": "1282880",
    "end": "1289039"
  },
  {
    "start": "1283000",
    "end": "1283000"
  },
  {
    "text": "talk about it forever um so there are additional constraints on funs that actually you need to have in order to",
    "start": "1289039",
    "end": "1294279"
  },
  {
    "text": "have a valid funter um so let's let's think about this let's take um a list as",
    "start": "1294279",
    "end": "1300559"
  },
  {
    "text": "funter right so I need to implement a map let's say I wanted to implement map um for lists a valid implementation of",
    "start": "1300559",
    "end": "1306880"
  },
  {
    "text": "that in terms of the types strictly in terms of the types would just be return the empty list right that would be perfectly that would match the types up",
    "start": "1306880",
    "end": "1313200"
  },
  {
    "text": "perfectly but it wouldn't be very useful and certainly you as a developer wouldn't you know want to pass something",
    "start": "1313200",
    "end": "1318720"
  },
  {
    "text": "to a function that was expecting a funter and expect to always get the Ulus back that that wouldn't be nonsensical",
    "start": "1318720",
    "end": "1324919"
  },
  {
    "text": "um so there's actually um functor laws that prevent ridiculous definitions of uh of map uh the first is that if you",
    "start": "1324919",
    "end": "1333080"
  },
  {
    "text": "map the identity function uh over a funter you get you get the original funter right so that prevents my",
    "start": "1333080",
    "end": "1338120"
  },
  {
    "text": "ridiculous empty list definition um and then also um mapping over a composed",
    "start": "1338120",
    "end": "1343480"
  },
  {
    "text": "function is the same as mapping over each function um you can look at these afterwards I I don't really need to harp on them the important thing to note is",
    "start": "1343480",
    "end": "1350000"
  },
  {
    "text": "that um these laws are not enforced by the type system obviously there's really no way to enforce this at the type level",
    "start": "1350000",
    "end": "1356240"
  },
  {
    "text": "so typically what people do is they they'll make an instance for whatever type they have and they'll write a couple tests demonstrating that the",
    "start": "1356240",
    "end": "1362240"
  },
  {
    "text": "funter laws are are are held up to and as an aside I want to talk about",
    "start": "1362240",
    "end": "1367640"
  },
  {
    "text": "this concept called um parametricity how many of you guys know what this is you guys ever heard of",
    "start": "1367640",
    "end": "1373120"
  },
  {
    "text": "parametricity cool uh theorems for free anybody ever read the wadler paper so there's a cool paper on and I highly",
    "start": "1373120",
    "end": "1379159"
  },
  {
    "text": "encourage you guys to read it because I'm really not going to talk about it very much but I'll give you the a brief",
    "start": "1379159",
    "end": "1384440"
  },
  {
    "start": "1383000",
    "end": "1383000"
  },
  {
    "text": "idea uh so um Benjamin Pierce is a great type theorist and he actually he didn't",
    "start": "1384440",
    "end": "1390400"
  },
  {
    "text": "say this but he would if he if he watched more Spider-Man uh with great weakness comes great power uh or a great",
    "start": "1390400",
    "end": "1396679"
  },
  {
    "text": "poet once said Mo power Mo Problems um but but here's the idea um you can actually based on a type",
    "start": "1396679",
    "end": "1404679"
  },
  {
    "text": "signature if the type signature is generic enough um you can actually determine behaviors of of the functions",
    "start": "1404679",
    "end": "1410919"
  },
  {
    "text": "implementing that type um and so let's imagine we're in a purely",
    "start": "1410919",
    "end": "1416600"
  },
  {
    "text": "functional world and I have this function called Fun uh it takes an A and returns an a um so what what is this",
    "start": "1416600",
    "end": "1424080"
  },
  {
    "text": "function any anybody identity well what else could it",
    "start": "1424080",
    "end": "1430279"
  },
  {
    "text": "be uh successor no it couldn't be successor right because uh this is a",
    "start": "1430279",
    "end": "1435440"
  },
  {
    "text": "generic type you don't know anything about the type so there's no way to to know yeah that's actually true so that's",
    "start": "1435440",
    "end": "1441960"
  },
  {
    "text": "there you go so actually yeah non-terminating functions U match this type signature as well as the identity",
    "start": "1441960",
    "end": "1447520"
  },
  {
    "text": "function but actually that's kind of awesome because all I've done is I've given you a type I've given you a type",
    "start": "1447520",
    "end": "1453679"
  },
  {
    "text": "nothing else and you can tell me that there are only two possible implementations that match this type signature and that that idea generalizes",
    "start": "1453679",
    "end": "1460760"
  },
  {
    "text": "quite a bit um so so the idea is like the weaker the type signature the weaker the the type class the more you can",
    "start": "1460760",
    "end": "1467200"
  },
  {
    "text": "reason about Its Behavior and that's actually pretty awesome so here's an example with functors um so",
    "start": "1467200",
    "end": "1473399"
  },
  {
    "text": "imagine I have a list of ins and I have a function uh that uses the funter interface uses the funter contract and",
    "start": "1473399",
    "end": "1479559"
  },
  {
    "text": "it takes in my uh uh my my list of ins or my funter of in uh and I forgot to say that it",
    "start": "1479559",
    "end": "1486440"
  },
  {
    "text": "returns it as well that's a bug in the slide um but what's what's the uh what's F of x's length",
    "start": "1486440",
    "end": "1494080"
  },
  {
    "text": "anyone exactly right it it has to be the exact same thing why because a functor",
    "start": "1494080",
    "end": "1499600"
  },
  {
    "text": "can't do anything to the length of the list all it can do is map over the elements right so all of a sudden you",
    "start": "1499600",
    "end": "1505480"
  },
  {
    "text": "have a pretty damn powerful theorem a pretty damn powerful proof that you can say about this Fu method and that's all",
    "start": "1505480",
    "end": "1511559"
  },
  {
    "text": "because the funter interface is so weak and this is kind of a useful thing to to think about um so when you're you know",
    "start": "1511559",
    "end": "1517799"
  },
  {
    "text": "we're going to be talking about applicative funs and then monads um but you're going to be using this in your code and and you'll have a choice do I",
    "start": "1517799",
    "end": "1524480"
  },
  {
    "text": "need do I need funter do I need a monad uh will an applicative fun suffice uh",
    "start": "1524480",
    "end": "1529840"
  },
  {
    "text": "and when you're making that choice it's often better to just stick with a weaker thing um partially because you can",
    "start": "1529840",
    "end": "1535120"
  },
  {
    "text": "reason about it more yeah so I'm imagining so I'm restricting thing I'm I'm cheating a little bit so I'm not dealing with a language where you can",
    "start": "1535120",
    "end": "1542080"
  },
  {
    "text": "have like null or uh have side effects um so in a pure functional language um",
    "start": "1542080",
    "end": "1548440"
  },
  {
    "text": "there's no constraints on this type A so therefore there's no way to say materialize a new a or do any kind of",
    "start": "1548440",
    "end": "1554720"
  },
  {
    "text": "transformation on A's um there there's nothing you can do right all you can do is return it you can get pretty far on",
    "start": "1554720",
    "end": "1562000"
  },
  {
    "text": "map alone so we're finally going to move past map isn't that awesome you can get pretty far on map alone but sometimes",
    "start": "1562000",
    "end": "1568039"
  },
  {
    "start": "1566000",
    "end": "1566000"
  },
  {
    "text": "you need a little bit more power um and I'm going to motivate this with a pretty simple example and the the example I'm",
    "start": "1568039",
    "end": "1574039"
  },
  {
    "text": "going to kind of have run throughout the the rest of this talk but here's the idea uh imagine we're building some kind of like web- based calculator right so",
    "start": "1574039",
    "end": "1581559"
  },
  {
    "text": "how is this going to work well the user is going to input some strings and then the back end is going to want to parse the strings and then add them up and",
    "start": "1581559",
    "end": "1588039"
  },
  {
    "text": "return back so you're going to want to do simple things like parse the string and",
    "start": "1588039",
    "end": "1593200"
  },
  {
    "text": "here's a reasonable signature for a parse function it's going to take a string and it's going to return option",
    "start": "1593200",
    "end": "1598279"
  },
  {
    "text": "int why option int because the string might not correspond to a valid option and we're good programmers and we",
    "start": "1598279",
    "end": "1604520"
  },
  {
    "text": "realize that null is a terrible idea so we're going to use option instead of null right cool",
    "start": "1604520",
    "end": "1610640"
  },
  {
    "text": "okay so um let's try to use this with the funter idea right so we're going to try to add two pars integers so we're",
    "start": "1610640",
    "end": "1617720"
  },
  {
    "text": "going to parse three and all we have is map right that's the only thing we can do with a funter so if I try to parse",
    "start": "1617720",
    "end": "1623200"
  },
  {
    "text": "three I'm going to want to feed it into another function and I'm eventually going to want to add so this is probably a reasonable idea of of what I want that",
    "start": "1623200",
    "end": "1630679"
  },
  {
    "text": "to do but um the type of this expression ends up being wrapped in option right so",
    "start": "1630679",
    "end": "1637600"
  },
  {
    "text": "I have option int arrows int and um so so here's what I've got basically I want to add another int to this thing I have",
    "start": "1637600",
    "end": "1643880"
  },
  {
    "text": "an option in arrows in so I have a function wrapped up in option in arrows int and then I have option int my the",
    "start": "1643880",
    "end": "1650480"
  },
  {
    "text": "other option that I parsed or the other int that I parsed what can I do with that you can play around with map all",
    "start": "1650480",
    "end": "1656360"
  },
  {
    "text": "you want but you're not going to get anywhere um it turns out you actually need a slightly more powerful map",
    "start": "1656360",
    "end": "1661440"
  },
  {
    "text": "operation to deal with this and that's where applicative funter kick in um so",
    "start": "1661440",
    "end": "1666919"
  },
  {
    "start": "1664000",
    "end": "1664000"
  },
  {
    "text": "let's add the power that we need to funter so remember that there's an is a relationship between all the type",
    "start": "1666919",
    "end": "1672279"
  },
  {
    "text": "classes that I'm going to be talking about today so every applicative funter is a funtor so it defines math as well",
    "start": "1672279",
    "end": "1679440"
  },
  {
    "text": "right so um in addition to map it defines a new method which I believe is pronounced app um because it's from",
    "start": "1679440",
    "end": "1687200"
  },
  {
    "text": "apply um so there's an apply type class which sits above uh applicative which",
    "start": "1687200",
    "end": "1692559"
  },
  {
    "text": "sits above applicative and um just has excuse me just has app but not uh map",
    "start": "1692559",
    "end": "1699559"
  },
  {
    "text": "anyway this new method looks very similar to map but there's a subtle difference right so just as before it",
    "start": "1699559",
    "end": "1705240"
  },
  {
    "text": "takes the funter of A's but the F that it takes takes is wrapped up in a funter",
    "start": "1705240",
    "end": "1710799"
  },
  {
    "text": "right so it takes an F of a arrow as B and then it returns an F of b um seems a little bit funky but um we can actually",
    "start": "1710799",
    "end": "1718159"
  },
  {
    "text": "use this to clean up our last example clean up in quotes because it looks hideous I think um so yeah we can use",
    "start": "1718159",
    "end": "1725240"
  },
  {
    "text": "app we can parse our three parse NOP map over that uh with a function that adds the the the X and Y and that'll work",
    "start": "1725240",
    "end": "1732279"
  },
  {
    "text": "I'll get an option int as a result and it'll do what I want but that looks pretty hideous",
    "start": "1732279",
    "end": "1738600"
  },
  {
    "start": "1736000",
    "end": "1736000"
  },
  {
    "text": "uh hll things look a little bit better um so this is what that this might look like in hasell if that still looks a",
    "start": "1738600",
    "end": "1744600"
  },
  {
    "text": "little odd to you then think about it this way um in hcll you can call a pure function just by you know function name",
    "start": "1744600",
    "end": "1750960"
  },
  {
    "text": "with a bunch of arguments trailing so if I have a three argument function f f takes X Y and Z uh and I can I can just",
    "start": "1750960",
    "end": "1757320"
  },
  {
    "text": "call it like that but here's the idea and this is this is where I think the hasell uh syntax makes things a little",
    "start": "1757320",
    "end": "1763399"
  },
  {
    "text": "bit clearer um what we're doing is we're going from call we're taking a pure",
    "start": "1763399",
    "end": "1769279"
  },
  {
    "text": "function so a function that works on pure arguments and we're turning it into",
    "start": "1769279",
    "end": "1775120"
  },
  {
    "text": "a function that works on effectful arguments what do I mean by that well instead of X Y and Z just being pure",
    "start": "1775120",
    "end": "1781399"
  },
  {
    "text": "they might have side effects right so they may fail they might not be valid integers in the case of option or uh",
    "start": "1781399",
    "end": "1787679"
  },
  {
    "text": "depending on what other what other other applicative you're using um you might have some other effect that you're",
    "start": "1787679",
    "end": "1792799"
  },
  {
    "text": "talking about so basically in the same sense that as before we were lifting a function from being a pure function to a",
    "start": "1792799",
    "end": "1799200"
  },
  {
    "text": "function in a funter context here we're we're we're going from calling a function on multiple arguments to",
    "start": "1799200",
    "end": "1805840"
  },
  {
    "text": "calling a function on multiple effectful arguments and I think that's a good intuition for applicatives when you need",
    "start": "1805840",
    "end": "1811840"
  },
  {
    "text": "an applicative it's basically when you have a multi-argument function where multiple where many of the arguments or",
    "start": "1811840",
    "end": "1817960"
  },
  {
    "text": "some of the arguments have effects so that's when you need applicatives uh in Scala Zed there's a thing called",
    "start": "1817960",
    "end": "1825320"
  },
  {
    "text": "an applicative Builder which makes the syntax a lot less awful frankly um so",
    "start": "1825320",
    "end": "1831679"
  },
  {
    "text": "it's still kind of backwards in my opinion um so what you do is you have uh the arguments and then you have you",
    "start": "1831679",
    "end": "1837320"
  },
  {
    "text": "Trail it with the function uh which I think looks backwards in my opinion uh and you use this operator here um and on",
    "start": "1837320",
    "end": "1844039"
  },
  {
    "text": "my team we we we started running out of names for these things so we're like what the hell do we call this thing it's",
    "start": "1844039",
    "end": "1849960"
  },
  {
    "text": "uh pipes with an at in the middle and uh we decided that we'd call it the maau culen so so our chat room is often",
    "start": "1849960",
    "end": "1858399"
  },
  {
    "text": "filled with with we we've actually named all the weird Scala Zed symbols so we'll be like oh yeah just uh you need two",
    "start": "1858399",
    "end": "1864600"
  },
  {
    "text": "mcau Culkin and a big bird and and Bob's your uncle or whatever so um more on",
    "start": "1864600",
    "end": "1871600"
  },
  {
    "start": "1870000",
    "end": "1870000"
  },
  {
    "text": "applicatives um so what if some of the arguments aren't options so let's say some of your arguments are effectful but",
    "start": "1871600",
    "end": "1877240"
  },
  {
    "text": "not all of them um there's a useful addition to applicative um which basically lets you take a pure argument",
    "start": "1877240",
    "end": "1883360"
  },
  {
    "text": "and lift it into uh into uh an effect and that's called point point in Scola",
    "start": "1883360",
    "end": "1888519"
  },
  {
    "text": "z7 and it's called uh it's called different things it's called Pure sometimes or return I think",
    "start": "1888519",
    "end": "1895120"
  },
  {
    "text": "um uh so yeah that's that's this guy here and what that lets us do is say let's say I had um three inss that I",
    "start": "1895120",
    "end": "1901760"
  },
  {
    "text": "wanted to add together two were coming from the web and one was the constant three I could use an applicative and",
    "start": "1901760",
    "end": "1907080"
  },
  {
    "text": "then lift that pure uh constant value into the applicative uh with with",
    "start": "1907080",
    "end": "1913919"
  },
  {
    "text": "Point okay um there's an exercise you can Define the applic instance for option that should be pretty",
    "start": "1913919",
    "end": "1920279"
  },
  {
    "start": "1920000",
    "end": "1920000"
  },
  {
    "text": "straightforward okay so now we're going to get to monads everyone's favorite topic",
    "start": "1920279",
    "end": "1926639"
  },
  {
    "text": "um so like I said I think there's a cottage industry on creating monad",
    "start": "1926639",
    "end": "1932240"
  },
  {
    "text": "tutorials um and and I'm going to try not to fall into that trap um but then",
    "start": "1932240",
    "end": "1937919"
  },
  {
    "text": "at the end of the slides I probably will fall into that trap because I think I I think I have no choice but the the",
    "start": "1937919",
    "end": "1943120"
  },
  {
    "text": "problem is basically this you'll see everyone that writes a monad tutorial hopefully understands what a Monet is",
    "start": "1943120",
    "end": "1949559"
  },
  {
    "text": "and they got to that point by reading a lot of other tutorials and eventually that some combination of those things",
    "start": "1949559",
    "end": "1954919"
  },
  {
    "text": "clicked and the intuition made sense to them um but I don't think any particular monad tutorial is like one single monad",
    "start": "1954919",
    "end": "1962080"
  },
  {
    "text": "tutorial is just going to be the light for you including the one that I'm about to give you um so yes it is a a trap",
    "start": "1962080",
    "end": "1967720"
  },
  {
    "text": "there's a link here it's to a somebody talking about why monad tutorials are are bad so that said let's go talk about",
    "start": "1967720",
    "end": "1976399"
  },
  {
    "start": "1975000",
    "end": "1975000"
  },
  {
    "text": "monads um and I'm I'm going to try to do this in a task-based way so U I'm going to take our calculator example and I'll",
    "start": "1976399",
    "end": "1982960"
  },
  {
    "text": "try to motivate the use of monads with the same calculator idea so again we're going to start with",
    "start": "1982960",
    "end": "1988440"
  },
  {
    "text": "our parse example and um let's change the game a little bit so what if our",
    "start": "1988440",
    "end": "1994080"
  },
  {
    "text": "input string um happened to be an optional query parameter as well right so instead of taking a string and",
    "start": "1994080",
    "end": "1999919"
  },
  {
    "text": "passing that to parse we have an option string and we need to pass that to parse um okay so if all you have is a map",
    "start": "1999919",
    "end": "2006639"
  },
  {
    "text": "Hammer everything looks like a nail I don't know I don't know how to finish that sorry um but if if you just",
    "start": "2006639",
    "end": "2012880"
  },
  {
    "text": "try mapping U parse function over this guy um you'll end up with something that looks like option option int and uh you",
    "start": "2012880",
    "end": "2020039"
  },
  {
    "text": "can't really do anything with that either so once again we're stuck um",
    "start": "2020039",
    "end": "2025240"
  },
  {
    "text": "there's a couple alternative definitions uh for monad so you could Define this in terms of uh a method called join but I'm",
    "start": "2025240",
    "end": "2031240"
  },
  {
    "text": "going to do it in terms of a a method called uh bind um so I'm going to add one thing to applicative um so again",
    "start": "2031240",
    "end": "2038559"
  },
  {
    "text": "this is my type class definition am monad is uh everything in an applicative plus this method which is often written",
    "start": "2038559",
    "end": "2045919"
  },
  {
    "text": "like this uh and it's pronounced bind again it looks very similar to map",
    "start": "2045919",
    "end": "2051960"
  },
  {
    "text": "uh or or even app um for that matter but there's a slight difference in the way that the in in the nature of the",
    "start": "2051960",
    "end": "2058158"
  },
  {
    "text": "function that we take in um in this case we're taking in an a andet turning an F of b um why is that useful well we can",
    "start": "2058159",
    "end": "2066440"
  },
  {
    "text": "we can do exactly what I want wanted to do on the previous slide that makes it useful um so on the previous example so",
    "start": "2066440",
    "end": "2072079"
  },
  {
    "text": "that makes our previous example look like this you can do pam.get X and then bind parse and that will give you an",
    "start": "2072079",
    "end": "2078839"
  },
  {
    "text": "option int um if you wanted to chain these together you could um but it looks kind",
    "start": "2078839",
    "end": "2085358"
  },
  {
    "text": "of ugly so I can do prams get X bind parse bind uh X arrows uh make a make a",
    "start": "2085359",
    "end": "2091919"
  },
  {
    "text": "function here another bind map and we're all good um but that looks kind of unreadable um and unless you're a robot",
    "start": "2091919",
    "end": "2100119"
  },
  {
    "start": "2100000",
    "end": "2100000"
  },
  {
    "text": "maybe um but there's some syntactic sugar so remember at the start of this talk I said there was nothing magic about funter applicative funter or",
    "start": "2100119",
    "end": "2107240"
  },
  {
    "text": "monads this is the one exception uh I think without syntactic sugar monads kind of kind of look a little bit painful um but let's see where this",
    "start": "2107240",
    "end": "2114480"
  },
  {
    "text": "syntactic sugar comes from yeah um so this is a fairly typical pattern um",
    "start": "2114480",
    "end": "2119839"
  },
  {
    "text": "where where we have a bunch of nested binds and then a final map I can",
    "start": "2119839",
    "end": "2125160"
  },
  {
    "text": "actually reformat this all I've done is added some line feeds and we can kind of see what that looks like bind bind map",
    "start": "2125160",
    "end": "2131640"
  },
  {
    "text": "right um and that's exactly what a Scala 4 comprehension is right so so this is",
    "start": "2131640",
    "end": "2138800"
  },
  {
    "text": "just this is just syntactic sugar for this in many interesting ways um so this",
    "start": "2138800",
    "end": "2144079"
  },
  {
    "text": "is much nicer I think um so interesting thing um can anybody can anybody kind of",
    "start": "2144079",
    "end": "2150359"
  },
  {
    "text": "explain intuitively what the the difference in expressive power is between applicative functors and monads",
    "start": "2150359",
    "end": "2156440"
  },
  {
    "text": "based on what you've seen so far yeah that's the start of that's the start of the argument applicative does take it takes multiple arguments and then",
    "start": "2156440",
    "end": "2162280"
  },
  {
    "text": "applies them to a single function um but of course if I if that was the only that",
    "start": "2162280",
    "end": "2167400"
  },
  {
    "text": "the end if that was the end of the explanation then I could counter that by saying here's my you know I could do F",
    "start": "2167400",
    "end": "2172720"
  },
  {
    "text": "of XYZ here and that would work fine so what there's something else that's that's a little bit different anyone",
    "start": "2172720",
    "end": "2179200"
  },
  {
    "text": "yeah that that's that's I don't know if that's what you're asking not not quite what I'm trying to get at is is look at this what can you do with with this in",
    "start": "2179200",
    "end": "2186440"
  },
  {
    "text": "Scola right what does this arrow mean in Scola like throw away all this crap that",
    "start": "2186440",
    "end": "2191960"
  },
  {
    "text": "I've just talked about but imagine this is just some Scola code that you see right you can actually use X on the",
    "start": "2191960",
    "end": "2198319"
  },
  {
    "text": "right hand side of the next generator this thing is called a generator in scolar right so you can actually chain computations with monads that's the",
    "start": "2198319",
    "end": "2205480"
  },
  {
    "text": "difference in expressive power with applicatives you're you you have one computation at the end but um the",
    "start": "2205480",
    "end": "2211560"
  },
  {
    "text": "computation of the individual arguments to that function can't depend on each other whereas with monad x y and Z could",
    "start": "2211560",
    "end": "2217960"
  },
  {
    "text": "actually be involved uh like I could use monad I can use x in the computation of monatic Y and that's totally available",
    "start": "2217960",
    "end": "2224960"
  },
  {
    "text": "because I have X available to me um within this cool make",
    "start": "2224960",
    "end": "2230760"
  },
  {
    "text": "sense um so here's where I get into trying to do a monad tutorial which is",
    "start": "2230760",
    "end": "2236119"
  },
  {
    "start": "2231000",
    "end": "2231000"
  },
  {
    "text": "which might fail um so here's my stab at providing an intuition for monads um so",
    "start": "2236119",
    "end": "2242800"
  },
  {
    "text": "consider the following monatic code uh it's just a four with two generators monatic X and",
    "start": "2242800",
    "end": "2249480"
  },
  {
    "text": "monatic Y and then it adds them up what does this code do well it's kind of a vacuous question because it really",
    "start": "2249480",
    "end": "2255720"
  },
  {
    "text": "depends on what monad I'm talking about here right um but um the code here looks almost",
    "start": "2255720",
    "end": "2263240"
  },
  {
    "text": "like imperative code right when you look at this it it almost looks like um you know imagine that this just means",
    "start": "2263240",
    "end": "2269160"
  },
  {
    "text": "semicolon and and you have almost something that looks like a imperative Java code um and that's that's that's",
    "start": "2269160",
    "end": "2275480"
  },
  {
    "text": "another intuition for am monad um you can think of U monads as being a a kind",
    "start": "2275480",
    "end": "2280880"
  },
  {
    "text": "of embedded programming language where the the monad itself Define the type class instance actually defines the",
    "start": "2280880",
    "end": "2287599"
  },
  {
    "text": "semantics for that programming language um sounds kind of weird but but I can make it a little bit more concrete so",
    "start": "2287599",
    "end": "2293280"
  },
  {
    "text": "let's let's think about some of the monads that we've seen um option so imagine that this that I told you that",
    "start": "2293280",
    "end": "2299160"
  },
  {
    "text": "this that monatic X and monatic Y were uh we're working on the option monad what would this code do well it",
    "start": "2299160",
    "end": "2306760"
  },
  {
    "text": "would basically execute uh X sorry we we we we' compute X and compute Y and yield X Plus y but",
    "start": "2306760",
    "end": "2314160"
  },
  {
    "text": "uh if x was none then the whole result of the expression would be none right what does that kind of have the flavor",
    "start": "2314160",
    "end": "2320200"
  },
  {
    "text": "of well it it's kind of like an exception right it's kind of like uh exceptions in imperative code the only",
    "start": "2320200",
    "end": "2326640"
  },
  {
    "text": "difference is that I haven't actually stored a value with the error so it's an anonymous",
    "start": "2326640",
    "end": "2332000"
  },
  {
    "text": "exception um the reader example um so what reader does is it lets you defer",
    "start": "2332000",
    "end": "2337119"
  },
  {
    "text": "passing in an argument um to for comprehension effectively it kind of looks like a global environment so you",
    "start": "2337119",
    "end": "2343760"
  },
  {
    "text": "can say that there's some Global variable containing the environment and you can actually instantiate that on",
    "start": "2343760",
    "end": "2348880"
  },
  {
    "text": "some particular environment later um it's a little sketchy because I haven't really talked about uh the reader monad",
    "start": "2348880",
    "end": "2354119"
  },
  {
    "text": "but those of you that are a little bit more familiar with uh reader already can can kind of U maybe can kind of see that",
    "start": "2354119",
    "end": "2360880"
  },
  {
    "text": "uh or validation um validation is um it's part of Scala Ed and it's kind of like a pimped out either type um but",
    "start": "2360880",
    "end": "2368359"
  },
  {
    "text": "what it gives you or or if you're not familiar with validation just think of either what you're getting there are",
    "start": "2368359",
    "end": "2373560"
  },
  {
    "text": "descriptive exceptions right so you're actually throwing exceptions but you're able to actually store an exceptional",
    "start": "2373560",
    "end": "2379079"
  },
  {
    "text": "value uh along the way so uh validation is kind of like um the validation monad",
    "start": "2379079",
    "end": "2384920"
  },
  {
    "text": "or code that monatic code that uses the validation monad is kind of like a little programming language whose scope",
    "start": "2384920",
    "end": "2390359"
  },
  {
    "text": "is defined by the for comprehension um where the semantics are are exceptions um or a list there's an",
    "start": "2390359",
    "end": "2397440"
  },
  {
    "text": "interesting intuition um for list as a non-deterministic computation so imagine that monatic X and monatic Y are are",
    "start": "2397440",
    "end": "2404599"
  },
  {
    "text": "lists um then what this will kind of do is imagine that uh instead of a computation that yields a single value",
    "start": "2404599",
    "end": "2410520"
  },
  {
    "text": "it yields multiple values because it's a nondeterministic computation then X Plus y will kind of pairwise compute the",
    "start": "2410520",
    "end": "2417040"
  },
  {
    "text": "results of All Those non-deterministic comp computations so um list is monad uh the intuition there is kind of a",
    "start": "2417040",
    "end": "2423480"
  },
  {
    "text": "programming language with uh non-deterministic comp computations um and that's that's kind of actually",
    "start": "2423480",
    "end": "2430400"
  },
  {
    "text": "all I have is I know it's a short talk um I I think this kind of sets us up for",
    "start": "2430400",
    "end": "2435720"
  },
  {
    "text": "uh this kind of beg this slide kind of begs an obvious question which is what if you want a programming language with",
    "start": "2435720",
    "end": "2442520"
  },
  {
    "text": "multiple effects so what if you want um non-deterministic computations plus Anon",
    "start": "2442520",
    "end": "2448119"
  },
  {
    "text": "plus Anonymous exceptions or a global environment plus exceptions um and the answer to that is going to be monad",
    "start": "2448119",
    "end": "2454079"
  },
  {
    "text": "Transformers and that's that's where I'd pick up uh next if I was going to continue on with these slides um so",
    "start": "2454079",
    "end": "2459480"
  },
  {
    "text": "that's that's all I've got uh I want to thank you guys for being a captive audience and uh I'll take some questions",
    "start": "2459480",
    "end": "2465900"
  },
  {
    "text": "[Applause]",
    "start": "2465900",
    "end": "2471000"
  },
  {
    "text": "[Music]",
    "start": "2471000",
    "end": "2479469"
  }
]