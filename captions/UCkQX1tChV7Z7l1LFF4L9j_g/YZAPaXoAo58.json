[
  {
    "text": "hello thank you very much for that introduction and to give you some reciprocity one of the reasons I'm up",
    "start": "4360",
    "end": "10809"
  },
  {
    "text": "here on the stage is because Martine basically pushed me up on stage with the London Java community and said you should do talks and I was like I don't",
    "start": "10809",
    "end": "17349"
  },
  {
    "text": "think I'm ready for that and he said do it anyway and and now I do it as a job so so it's all your fault",
    "start": "17349",
    "end": "23619"
  },
  {
    "text": "and that's why I'm here yes um is boilerplate code really so bad I I'm",
    "start": "23619",
    "end": "30070"
  },
  {
    "text": "Trisha G I'm I work for JetBrains I'm a developer and technical advocate Java champion speaker bla bla and my job is",
    "start": "30070",
    "end": "38470"
  },
  {
    "text": "largely to sort of stay up to date with trends in terms of Java the jvm languages and things like that when I",
    "start": "38470",
    "end": "43809"
  },
  {
    "text": "first started doing presentations about five years ago the main complaint I heard I was only coding in Java at the",
    "start": "43809",
    "end": "49239"
  },
  {
    "text": "time and the main complaint I heard is or we all hate Java because it's full of boilerplate code and I didn't really",
    "start": "49239",
    "end": "54729"
  },
  {
    "text": "understand this because I was like okay that's fine but you just kind of ignore it and get on with it and your brain filters it all out and so it's not",
    "start": "54729",
    "end": "61089"
  },
  {
    "text": "really that big a deal so so I kind of wanted to come full circle now I'm",
    "start": "61089",
    "end": "66760"
  },
  {
    "text": "presenting in the I don't know this fifth or sixth time at Q Khan London and address this issue of is boilerplate",
    "start": "66760",
    "end": "72640"
  },
  {
    "text": "code really so that I know that here at Q Khan we have some like senior leads",
    "start": "72640",
    "end": "78970"
  },
  {
    "text": "and CTOs and and people who are very very busy and don't want to spend all 50",
    "start": "78970",
    "end": "84160"
  },
  {
    "text": "minutes in this talk listening to me Witter on so the TLDR is yes boilerplate",
    "start": "84160",
    "end": "89530"
  },
  {
    "text": "code is quite bad so you can get up and leave now and I won't mind and you can go see Martin Thompson's talk because",
    "start": "89530",
    "end": "95409"
  },
  {
    "text": "he's my old boss and he always gives a good talk um so what are we really going",
    "start": "95409",
    "end": "100420"
  },
  {
    "text": "to talk about as I said I'm a I'm a Java developer I've been doing Java for over",
    "start": "100420",
    "end": "105520"
  },
  {
    "text": "20 years now just absolutely terrifying and and that's kind of my world that's",
    "start": "105520",
    "end": "111760"
  },
  {
    "text": "the world I live in but I do work for jetbrains and we invented a language called Kotlin and so I get quite a lot",
    "start": "111760",
    "end": "118450"
  },
  {
    "text": "of exposure to Kotlin even though I don't really code in it very much and I do have a this this thought of ODS",
    "start": "118450",
    "end": "123850"
  },
  {
    "text": "terribly pretty it's nice it's clean syntax it's designed to be productive whatever that means",
    "start": "123850",
    "end": "129640"
  },
  {
    "text": "so I could have this the talk of this title could have been like all Kotlin it's terribly shiny but as a Java",
    "start": "129640",
    "end": "135370"
  },
  {
    "text": "developer I feel a bit like traying my heritage so it's also Java it's not dead yet which was the title of",
    "start": "135370",
    "end": "143830"
  },
  {
    "text": "the Java track three years ago and I want to really talk a little bit not just about I'll look Kotlin so shiny but",
    "start": "143830",
    "end": "151000"
  },
  {
    "text": "also be a little bit defensive of Java and say but Java is also evolving and Java is not the language that you learn",
    "start": "151000",
    "end": "157360"
  },
  {
    "text": "at university is probably not even the language that you see in the code bases that a lot of you are working in particularly these large organizations",
    "start": "157360",
    "end": "163890"
  },
  {
    "text": "Java has moved on a long way particularly in the last like three years or so and so I kind of want to",
    "start": "163890",
    "end": "170110"
  },
  {
    "text": "recap some of the functionality that's come in in the last couple of releases that make your lives easier but also",
    "start": "170110",
    "end": "175780"
  },
  {
    "text": "have a sneak peek at some of the functionality from Java 10 and onwards that might make our lives easier as",
    "start": "175780",
    "end": "181060"
  },
  {
    "text": "developers so there's a sort of two-pronged attack to this talk Kotlin it's terribly pretty and Java it's not",
    "start": "181060",
    "end": "186730"
  },
  {
    "text": "as bad as you thought it was apart from when it is this is Java the yellowish",
    "start": "186730",
    "end": "194080"
  },
  {
    "text": "code that yellowish highlights are bits of boilerplate stuff you don't really need so like every single semicolon the",
    "start": "194080",
    "end": "201370"
  },
  {
    "text": "new key word finals should finally be there casting types information on both sides",
    "start": "201370",
    "end": "208660"
  },
  {
    "text": "of the equal sign and you can sort of get the feeling from this that yes this is a long method yes this is fairly",
    "start": "208660",
    "end": "215380"
  },
  {
    "text": "complicated looking code but it's difficult to tell without doing a pass",
    "start": "215380",
    "end": "220420"
  },
  {
    "text": "through like this it's difficult to tell which bit of it is complicated is it the business logic that's complicated or is",
    "start": "220420",
    "end": "226959"
  },
  {
    "text": "it the syntax which is over complicating what you're trying to achieve is the syntax getting in the way of you being",
    "start": "226959",
    "end": "232570"
  },
  {
    "text": "able to see what the code is supposed to do and and that's kind of the argument against boilerplate code boilerplate",
    "start": "232570",
    "end": "239110"
  },
  {
    "text": "being the stuff that you need to put in there for the language but isn't really adding anything in terms of what you're",
    "start": "239110",
    "end": "245019"
  },
  {
    "text": "trying to achieve that the problem you're trying to solve the business issue and so when I talk about",
    "start": "245019",
    "end": "250540"
  },
  {
    "text": "boilerplate I mean the stuff that you shouldn't really have to think about because it's just there to tell the",
    "start": "250540",
    "end": "255970"
  },
  {
    "text": "compiler or the computer to do something and it's nothing to do with the problem that you're actually solving but of",
    "start": "255970",
    "end": "262660"
  },
  {
    "text": "course I work for JetBrains I work mostly with IntelliJ IDEA which is obviously my favorite IDE and is amazing",
    "start": "262660",
    "end": "268629"
  },
  {
    "text": "who's using IntelliJ IDEA I love all of you who's not using IntelliJ IDEA but",
    "start": "268629",
    "end": "275289"
  },
  {
    "text": "isn't coding in Java so it's okay okay then you're forgiven that's fine and so",
    "start": "275289",
    "end": "280990"
  },
  {
    "text": "your IDE will save you and this was again a justification I gave to myself even before I started working at",
    "start": "280990",
    "end": "286870"
  },
  {
    "text": "JetBrains I don't need to worry about boilerplate code because my IDE will both generate code for me and also",
    "start": "286870",
    "end": "293199"
  },
  {
    "text": "collapse tough down so that I don't need to see it if it's not important so the tool will will help me it will hide away",
    "start": "293199",
    "end": "300460"
  },
  {
    "text": "a lot of this complexity I remember seeing down north talked a couple of years ago saying well that's all well",
    "start": "300460",
    "end": "306460"
  },
  {
    "text": "and good but really your tools shouldn't be the thing saving you from the language you shouldn't have to use a big",
    "start": "306460",
    "end": "311469"
  },
  {
    "text": "tool like IntelliJ IDEA just to write code and of course I disagreed with him because you know Java um",
    "start": "311469",
    "end": "317590"
  },
  {
    "text": "but you could argue that being expressive and having the ability to generate and hide away code and see",
    "start": "317590",
    "end": "324430"
  },
  {
    "text": "stuff when you need it might be better than being so terse that you can't understand the code I mean how many",
    "start": "324430",
    "end": "330490"
  },
  {
    "text": "times have you written some well optimised piece of code and come back to it and gone I don't know what this does",
    "start": "330490",
    "end": "336159"
  },
  {
    "text": "like I've got variable names which are a single letter I've got some I don't know Perl thing which is a tiny is being",
    "start": "336159",
    "end": "343690"
  },
  {
    "text": "expressive is arguably better especially if you can perhaps hide that stuff away so maybe maybe we can explore that idea",
    "start": "343690",
    "end": "350400"
  },
  {
    "text": "and modern languages generally have worked on trying to reduce the",
    "start": "350400",
    "end": "356469"
  },
  {
    "text": "unnecessary syntax so semicolons and type information on both sides of the",
    "start": "356469",
    "end": "362319"
  },
  {
    "text": "equal sign things like this and by modern languages I mean yeah I mean",
    "start": "362319",
    "end": "367719"
  },
  {
    "text": "languages like Kotlin and groovy and a bunch of other things that I don't really use that much and the point here",
    "start": "367719",
    "end": "376240"
  },
  {
    "text": "is that if you remove the unnecessary syntax the stuff that tells the compiler and the computer what to do the stuff",
    "start": "376240",
    "end": "382060"
  },
  {
    "text": "that's left is the business logic the stuff that you're reading when you come back to the code later is the thing that",
    "start": "382060",
    "end": "387939"
  },
  {
    "text": "it's supposed to be doing and of course as developers although we often forget this we are reading code way way way",
    "start": "387939",
    "end": "396210"
  },
  {
    "text": "more than we're writing code I mean when you're trying to track down that difficult bug and it takes you two days to track down the bug and then it's a",
    "start": "396210",
    "end": "402810"
  },
  {
    "text": "one line or one character fix it's not the typing that stopped you finding that buggle or took the time in fixing that",
    "start": "402810",
    "end": "409530"
  },
  {
    "text": "bug it was the reading and understanding of the code so the movement in modern",
    "start": "409530",
    "end": "415169"
  },
  {
    "text": "languages has been to remove a lot of the rubbish that you just don't need so you only see the business logic um and",
    "start": "415169",
    "end": "422250"
  },
  {
    "text": "when I talk about modern languages I do I am including modern Java in this so anything's post Java eight really so",
    "start": "422250",
    "end": "429419"
  },
  {
    "text": "Java is kind of moving with the times with this it has the benefit if you like of being able to look at other languages",
    "start": "429419",
    "end": "436650"
  },
  {
    "text": "like Kotlin like Scala like like groovy and other languages that aren't jvm languages figure out what's working for",
    "start": "436650",
    "end": "443310"
  },
  {
    "text": "developers what will work in the Java world and and bring that into Java the",
    "start": "443310",
    "end": "448500"
  },
  {
    "text": "language so it's not just stuck in the world that we learn when we learn Java 1.2 or whatever and so Java has the",
    "start": "448500",
    "end": "456990"
  },
  {
    "text": "benefit of being able to take those features and put them back into the language if it makes sense and we'll see",
    "start": "456990",
    "end": "462060"
  },
  {
    "text": "in some examples of this as we go forward so let's do some code and so",
    "start": "462060",
    "end": "467639"
  },
  {
    "text": "martin very generously said i was very good at live coding and i'm not going to be doing very much live coding I'm very",
    "start": "467639",
    "end": "474570"
  },
  {
    "text": "sorry but for this presentation because there's a lot of comparisons it's actually better to have it on slide",
    "start": "474570",
    "end": "480120"
  },
  {
    "text": "where I think but we will do some live coding we will do hello world because this is what we write every day in our",
    "start": "480120",
    "end": "486659"
  },
  {
    "text": "business isn't this the infamous HelloWorld application is that we have",
    "start": "486659",
    "end": "491940"
  },
  {
    "text": "to write this every single day but let's do it anyway because this is the first thing that most people will see when",
    "start": "491940",
    "end": "498210"
  },
  {
    "text": "they're learning your language they're going to write a hello world language right so you may have seen that some",
    "start": "498210",
    "end": "504240"
  },
  {
    "text": "people have some universities is starting to teach JavaScript instead of Java because Java is very ceremonious",
    "start": "504240",
    "end": "510150"
  },
  {
    "text": "and and we might have a look at why that might be so let's create a new class so",
    "start": "510150",
    "end": "516570"
  },
  {
    "text": "we have to have a file called hello and a class called hello and then we have to have the magic incantation public static",
    "start": "516570",
    "end": "522328"
  },
  {
    "text": "void main and then we have to have a magic incantation of system to out print then",
    "start": "522329",
    "end": "527790"
  },
  {
    "text": "then we get to finally print something out to the to the command line so that's",
    "start": "527790",
    "end": "534930"
  },
  {
    "text": "seven lines of code to print five characters and that's what we mean when",
    "start": "534930",
    "end": "541170"
  },
  {
    "text": "we talk about boilerplate code and ceremonious a lot of ceremony around java because really all we wanted to",
    "start": "541170",
    "end": "547740"
  },
  {
    "text": "know about was this bit everything else is boilerplate it's just",
    "start": "547740",
    "end": "553020"
  },
  {
    "text": "not important in in Kotlin for comparison oh by the way I forgot to say",
    "start": "553020",
    "end": "558690"
  },
  {
    "text": "I'm not a cotton expert I just stole these examples of my boss so but they're",
    "start": "558690",
    "end": "564090"
  },
  {
    "text": "kind of cool and and it's fun to write stuff in a different language in Kotlin",
    "start": "564090",
    "end": "569100"
  },
  {
    "text": "you don't have to have a class if you don't want a class so I can just go straight to public static void main and",
    "start": "569100",
    "end": "575100"
  },
  {
    "text": "I don't need to do system two out to print learn and then I can say hello",
    "start": "575100",
    "end": "582480"
  },
  {
    "text": "from cotton so it's it's a little bit easier to get started in in cotton for",
    "start": "582480",
    "end": "588240"
  },
  {
    "text": "example and other languages so we don't have a lot of this kind of intimidating",
    "start": "588240",
    "end": "594060"
  },
  {
    "text": "boilerplate when we first get started with the language this did get addressed with Java 9 and in Java 9 we have the J",
    "start": "594060",
    "end": "602580"
  },
  {
    "text": "shell the ripple I'm going to open up the IntelliJ IDEA plug-in to that so now",
    "start": "602580",
    "end": "607800"
  },
  {
    "text": "I could say system out Oh actually don't even need the",
    "start": "607800",
    "end": "617730"
  },
  {
    "text": "semicolon she says all right so I can",
    "start": "617730",
    "end": "624960"
  },
  {
    "text": "actually just go straight to prototyping with Java you can do it inside the idea if you want to I think most of the ideas",
    "start": "624960",
    "end": "630510"
  },
  {
    "text": "support that or you can do it from the command prompt unfortunately with high definition screens I can't get the",
    "start": "630510",
    "end": "635970"
  },
  {
    "text": "windows command to actually show anything at all visible because the font size is rubbish but you can run it from",
    "start": "635970",
    "end": "642330"
  },
  {
    "text": "the command line so this is not an IDE feature this is a language feature you can run stuff from the record you can",
    "start": "642330",
    "end": "648120"
  },
  {
    "text": "just say system.out.print them and it does it like we used to about 40 years ago when we were writing basic",
    "start": "648120",
    "end": "656190"
  },
  {
    "text": "so that's nice Java in particular is trying to make it a bit easier to get started with the language to prototype",
    "start": "656190",
    "end": "663310"
  },
  {
    "text": "staff to get rapid feedback without all the boilerplate ceremony I want to have",
    "start": "663310",
    "end": "670240"
  },
  {
    "text": "a look quickly at how we declare variables because this is one area where we've really started to start trimming",
    "start": "670240",
    "end": "676630"
  },
  {
    "text": "out the stuff we don't need in Java specifically anymore so in the Java 5 world you get to say I have a map of",
    "start": "676630",
    "end": "683680"
  },
  {
    "text": "integer customer customers new hash map integer customer like sure I just said all that on the other side of the equal",
    "start": "683680",
    "end": "689709"
  },
  {
    "text": "sign and it was a bit a bit tedious the IDE can help you and it goes well you",
    "start": "689709",
    "end": "694990"
  },
  {
    "text": "don't really care about the type of information of hash map there because it's the same thing and of course in",
    "start": "694990",
    "end": "700839"
  },
  {
    "text": "Java 7 you get the diamond operator so you don't need to say it at all it still applies under the covers but the syntax",
    "start": "700839",
    "end": "707290"
  },
  {
    "text": "means that you don't need to write that thing twice in in Kotlin you can",
    "start": "707290",
    "end": "712810"
  },
  {
    "text": "actually just get rid of even more you say var you don't need to say it's a map because you've already said on the",
    "start": "712810",
    "end": "718570"
  },
  {
    "text": "right-hand side that it's a map so you don't need to say on the left-hand side that it's a map you don't need the new",
    "start": "718570",
    "end": "723700"
  },
  {
    "text": "keyword I've this hurt my brain when I first look to this but it's a new map I",
    "start": "723700",
    "end": "729070"
  },
  {
    "text": "have to say it's a new map but I don't have to say it's a new map because I'm using a type there it's not a method",
    "start": "729070",
    "end": "735250"
  },
  {
    "text": "call so clearly I'm going to be calling the constructor I don't need to say new it just should just work like that and I",
    "start": "735250",
    "end": "742120"
  },
  {
    "text": "know semicolon lots of people get really upset about semicolons particularly in the JavaScript world not surprisingly",
    "start": "742120",
    "end": "748300"
  },
  {
    "text": "and for me I'm like I don't really care I just use the magic key combination of shift control enter and that just fills",
    "start": "748300",
    "end": "755050"
  },
  {
    "text": "that all the stuff on the end of the line that I don't need anymore but you know I guess it's really not",
    "start": "755050",
    "end": "760360"
  },
  {
    "text": "necessary Java 10 which is coming out in 23 days they say we get to say the same",
    "start": "760360",
    "end": "769660"
  },
  {
    "text": "thing we can save our so we can save our customers new hash map obviously we have",
    "start": "769660",
    "end": "776470"
  },
  {
    "text": "to have the type information on the right-hand side there because if you do that you're just going to get a map of",
    "start": "776470",
    "end": "781570"
  },
  {
    "text": "object to object which is not of any use to anybody so you still need the type information but but this is Java 10",
    "start": "781570",
    "end": "788440"
  },
  {
    "text": "so again reducing some of the boilerplate syntax increasing readability of the code I feel like this",
    "start": "788440",
    "end": "795910"
  },
  {
    "text": "might be more acceptable possible if you're using ideas because you can when",
    "start": "795910",
    "end": "801220"
  },
  {
    "text": "you look at customer 3 further down in the code you can hover over it and it tells you it's a map so I don't need to",
    "start": "801220",
    "end": "806530"
  },
  {
    "text": "say that explicitly I don't need to type that information data classes javabeans",
    "start": "806530",
    "end": "813790"
  },
  {
    "text": "or simple d tos a simple object which has some fields and some getters and",
    "start": "813790",
    "end": "819790"
  },
  {
    "text": "setters this is this is my favorite when I started doing live demos and I had to",
    "start": "819790",
    "end": "825130"
  },
  {
    "text": "just create some simple files then I started to understand why people said Java is for the boilerplate",
    "start": "825130",
    "end": "830590"
  },
  {
    "text": "boilerplate let's have a look let's create a customer let's make a private",
    "start": "830590",
    "end": "836650"
  },
  {
    "text": "final int ID private final string name",
    "start": "836650",
    "end": "844170"
  },
  {
    "text": "private fine oops final string email ok so what I",
    "start": "844170",
    "end": "852250"
  },
  {
    "text": "need obviously is I need a constructor with all those values because I've made them final so they need to be in the",
    "start": "852250",
    "end": "857830"
  },
  {
    "text": "constructor I need let's make that bigger I need my getters I need my",
    "start": "857830",
    "end": "868980"
  },
  {
    "text": "equals and hashcode I'm not reading that of course obviously I just press enter",
    "start": "868980",
    "end": "874390"
  },
  {
    "text": "enter enter and hope the IDE is doing the right thing and I need a t string because otherwise debugging is",
    "start": "874390",
    "end": "880780"
  },
  {
    "text": "impossible oops let's try memory format into some useful way so for a data class",
    "start": "880780",
    "end": "891220"
  },
  {
    "text": "of three fields I have 65 lines of code",
    "start": "891220",
    "end": "896310"
  },
  {
    "text": "which is kind of ridiculous really especially as I've just generated this",
    "start": "896310",
    "end": "902110"
  },
  {
    "text": "stuff and most of the time that's what you do you just get the IDE to generate if you're going to use those methods at",
    "start": "902110",
    "end": "907240"
  },
  {
    "text": "all if you're going to overwrite them of course again I can use the IDE to minimize these things and so I can see I",
    "start": "907240",
    "end": "915130"
  },
  {
    "text": "have those methods I don't mean to see what they are the problem with this is not so much the fact that",
    "start": "915130",
    "end": "921580"
  },
  {
    "text": "I have to generate code because that's okay I can get the IDE to do the heavy lifting the problem is that if I",
    "start": "921580",
    "end": "927010"
  },
  {
    "text": "generate this code I don't know when I come back to it later I don't know if there's any custom code in there I don't",
    "start": "927010",
    "end": "933070"
  },
  {
    "text": "know whether I've overridden those methods manually if I've done some weird magic there's no way to tell the",
    "start": "933070",
    "end": "939700"
  },
  {
    "text": "difference between the generated code and my own typed code so as a developer coming back to this code I still have to",
    "start": "939700",
    "end": "946540"
  },
  {
    "text": "parse all of it even if it was generated by the IDE and in particular if I'm",
    "start": "946540",
    "end": "951790"
  },
  {
    "text": "going to do something like add myself a new field private final int age then I",
    "start": "951790",
    "end": "959410"
  },
  {
    "text": "have to go through and regenerate all those methods again or I don't do that and my equals and hashcode don't work",
    "start": "959410",
    "end": "965140"
  },
  {
    "text": "the way I expect them to so code generation is terribly useful but not necessarily the answer it's going to add",
    "start": "965140",
    "end": "971320"
  },
  {
    "text": "an awful lot of not just steps for you to do as a developer but cognitive load in terms of reading it has this been",
    "start": "971320",
    "end": "978190"
  },
  {
    "text": "generated is it custom in terms of when you modify it remembering oh do I need to regenerate these things possibly having extra steps",
    "start": "978190",
    "end": "985300"
  },
  {
    "text": "in your continuous integration environment to say okay I want you to do static analysis over these files to",
    "start": "985300",
    "end": "990400"
  },
  {
    "text": "figure out whether you've forgot to include one of these things and this is all just kind of ridiculous for a",
    "start": "990400",
    "end": "995800"
  },
  {
    "text": "lightweight object which only has some fields in it that is perhaps used to transform data across the wire or",
    "start": "995800",
    "end": "1002040"
  },
  {
    "text": "something like that I'm in a language like Kotlin you can say let's create a",
    "start": "1002040",
    "end": "1008070"
  },
  {
    "text": "new Kotlin customer I'm going to create",
    "start": "1008070",
    "end": "1015600"
  },
  {
    "text": "data class hopes not date to cuss and I can say I have a an INT an ID which is",
    "start": "1015600",
    "end": "1027839"
  },
  {
    "text": "an INT maybe I have a what did I say I had a name which is a string and a email",
    "start": "1027839",
    "end": "1039270"
  },
  {
    "text": "which is a string and that's it that's all I need to do I",
    "start": "1039270",
    "end": "1047790"
  },
  {
    "text": "don't have to do anything else using the magic keyword data I get the equals hash code to string and getters",
    "start": "1047790",
    "end": "1056130"
  },
  {
    "text": "that I expect for for this class and it's all going to work the way I expect it to works the same way as if I had",
    "start": "1056130",
    "end": "1062730"
  },
  {
    "text": "generated those things in Java with IntelliJ IDEA and if I want to use this class from Java because Kotlin is fully",
    "start": "1062730",
    "end": "1068880"
  },
  {
    "text": "interoperable with Java then Java will see it that way it will see it with those with those getters and setters and",
    "start": "1068880",
    "end": "1074790"
  },
  {
    "text": "so forth with those properties I've said vowel here but I could equally a said",
    "start": "1074790",
    "end": "1081480"
  },
  {
    "text": "var so if I say vowel it has getters but no setters if I say var then it has setters as well because it's variable as",
    "start": "1081480",
    "end": "1088170"
  },
  {
    "text": "opposed to immutable and so this is one",
    "start": "1088170",
    "end": "1093180"
  },
  {
    "text": "of the features in Kotlin which I first saw and thought oh that's quite price because really that's all I want from my",
    "start": "1093180",
    "end": "1098880"
  },
  {
    "text": "customer class I want to see at a glance what is in my customer class I don't want to see any other crap I don't want",
    "start": "1098880",
    "end": "1104850"
  },
  {
    "text": "to see any of their equals and hashcode stuff I can add behavior to this as well so if this is a fully full-blown domain",
    "start": "1104850",
    "end": "1110550"
  },
  {
    "text": "object I might want to add a certain amount of behavior to it too but then I know that any code that is in this class",
    "start": "1110550",
    "end": "1116250"
  },
  {
    "text": "is behavior that I have purposefully added to this class there's probably business logic it's not there for the",
    "start": "1116250",
    "end": "1122430"
  },
  {
    "text": "computer it's there for me to read as a developer",
    "start": "1122430",
    "end": "1126710"
  },
  {
    "text": "and there's discussion at the moment about how to add data classes to Java presumably also should we add data",
    "start": "1134430",
    "end": "1141100"
  },
  {
    "text": "classes to Java but that discussion is ongoing and so I've shown the the Kotlin",
    "start": "1141100",
    "end": "1146230"
  },
  {
    "text": "one which makes a lot of sense to me but that's because I haven't coded in Scala and a number of other languages which I believe do things in a different way so",
    "start": "1146230",
    "end": "1152530"
  },
  {
    "text": "the question now is how should we do data classes in Java what do they look like what compromises to retake and what",
    "start": "1152530",
    "end": "1159190"
  },
  {
    "text": "what do we use them for so they will be coming in Java version 100 not Java 10",
    "start": "1159190",
    "end": "1166690"
  },
  {
    "text": "put it that way all right casting this is one thing that has always annoyed me as a Java developer if I cast some if I do an",
    "start": "1166690",
    "end": "1173560"
  },
  {
    "text": "instance of I still have to do the cast as well this is ridiculous inside those",
    "start": "1173560",
    "end": "1180820"
  },
  {
    "text": "curly braces I know that object is view object is view I know that I just said",
    "start": "1180820",
    "end": "1186340"
  },
  {
    "text": "it I just said it there so in so I have to do the casting just because Java in",
    "start": "1186340",
    "end": "1192700"
  },
  {
    "text": "Kotlin you just say ok inside those curly braces it is a view I just checked it is a view",
    "start": "1192700",
    "end": "1198390"
  },
  {
    "text": "IntelliJ marks a screen and says this has been magically cast to a view so",
    "start": "1198390",
    "end": "1203560"
  },
  {
    "text": "you're treating it as a view now so that's one way of doing it in Kotlin you",
    "start": "1203560",
    "end": "1209110"
  },
  {
    "text": "can be even more concise here if you want to here I've said the object coming in is basically the object it could be",
    "start": "1209110",
    "end": "1216070"
  },
  {
    "text": "anything with the question mark which means it could also be null so it might be coming in from from Java it might be",
    "start": "1216070",
    "end": "1221890"
  },
  {
    "text": "no and so then I can do my checking for type and calling the method with these",
    "start": "1221890",
    "end": "1226930"
  },
  {
    "text": "question marks which mean if it's null don't fall over and I will talk about that later but basically I can reduce",
    "start": "1226930",
    "end": "1234160"
  },
  {
    "text": "all those lines of nasty boilerplate that is pure boilerplate code to just",
    "start": "1234160",
    "end": "1239290"
  },
  {
    "text": "one small line saying if your of you do something view like upon me talking of",
    "start": "1239290",
    "end": "1246400"
  },
  {
    "text": "nulls that talk much faster in London because I expects most of you to be able to listen to fast in English this is",
    "start": "1246400",
    "end": "1251710"
  },
  {
    "text": "great if you can't listen fast in English you're doomed I'm so sorry nulls nulls",
    "start": "1251710",
    "end": "1258830"
  },
  {
    "text": "are so much fun nulls are so much fun that I wrote a blog post last year about how much fun",
    "start": "1258830",
    "end": "1264320"
  },
  {
    "text": "nulls are not and then lots of people disagreed with me and they're all wrong so in Java for potentially especially if",
    "start": "1264320",
    "end": "1271549"
  },
  {
    "text": "you don't know the codebase well or there aren't strict rules around what is null and what is not null in certain areas you might have to do something",
    "start": "1271549",
    "end": "1278210"
  },
  {
    "text": "like this where you get a customer object in and you want to do some validation on the customer name but",
    "start": "1278210",
    "end": "1283580"
  },
  {
    "text": "first you have to check is the customer null oh I've got ligatures turned on by the way which is why I've got the pretty",
    "start": "1283580",
    "end": "1289580"
  },
  {
    "text": "he could not equal sign instead of the real and not equal sign I took the screenshots all the linkages and thought I should remove that well nevermind it",
    "start": "1289580",
    "end": "1297649"
  },
  {
    "text": "you have to check if the customers know if the customer is not null then I had to check is the name null and if the",
    "start": "1297649",
    "end": "1303409"
  },
  {
    "text": "name is not null then I can check to see if the name does something it's just you know it's a silly example but you know",
    "start": "1303409",
    "end": "1309289"
  },
  {
    "text": "what I mean you have to do this chain of things and I spent about an hour trying",
    "start": "1309289",
    "end": "1315049"
  },
  {
    "text": "to convert this into Java 8 optional syntax because",
    "start": "1315049",
    "end": "1320940"
  },
  {
    "text": "I've been trying to get across is optional since Java eight came out and I still don't read it again and again I",
    "start": "1320940",
    "end": "1326909"
  },
  {
    "text": "still don't really grok it this works I have a test to prove this works I don't really know if this is the idiomatic way",
    "start": "1326909",
    "end": "1331919"
  },
  {
    "text": "of doing it but there are no if statements in there which is the important thing so I can do a flat map",
    "start": "1331919",
    "end": "1337649"
  },
  {
    "text": "filter if present then I have to have a separate method which is called throw a security exception because you can't",
    "start": "1337649",
    "end": "1343080"
  },
  {
    "text": "throw an exception inside the lambda which I don't think I knew anyway so",
    "start": "1343080",
    "end": "1348359"
  },
  {
    "text": "that's the optional way of doing stuff which is pretty but I don't think I",
    "start": "1348359",
    "end": "1353639"
  },
  {
    "text": "would argue for that being more readable I mean the other one has three ifs in which is a little bit nasty but at least",
    "start": "1353639",
    "end": "1359970"
  },
  {
    "text": "you know what the if statements are doing you can follow that logic as soon as someone throws in a flat map I'm sort",
    "start": "1359970",
    "end": "1365340"
  },
  {
    "text": "of lost I must admit the Kotlin way of doing it is well the real Kotlin way of",
    "start": "1365340",
    "end": "1370649"
  },
  {
    "text": "doing it is to say no nulls none it's never no no no no no which is my way of",
    "start": "1370649",
    "end": "1378090"
  },
  {
    "text": "doing things as well so I agree with it so you just literally say you can do customer name dot starts with knowing",
    "start": "1378090",
    "end": "1384179"
  },
  {
    "text": "perfectly well it is never null you have to mess around with any of that nonsense hence the topic of my blogpost that",
    "start": "1384179",
    "end": "1390690"
  },
  {
    "text": "everyone disagreed with however if the object coming in is perhaps a Java object or perhaps has been allowed to",
    "start": "1390690",
    "end": "1397289"
  },
  {
    "text": "have Mel's because reasons you put a question mark on it saying this is allowed to be known and then you can do",
    "start": "1397289",
    "end": "1404099"
  },
  {
    "text": "your customer question mark name question mark starts with and that says look if it's now I'll just don't carry",
    "start": "1404099",
    "end": "1409440"
  },
  {
    "text": "on any further than this so you can do all of that kind of logic in in one line and I even though I'm not familiar with",
    "start": "1409440",
    "end": "1417029"
  },
  {
    "text": "the syntax at all and I haven't used a lot of Kotlin I think this is much more readable I just know that the business",
    "start": "1417029",
    "end": "1422849"
  },
  {
    "text": "logic says if there's a name and it begins with a this is what happens and I",
    "start": "1422849",
    "end": "1427919"
  },
  {
    "text": "have to like parse out the fact that the first two if statements are around the stupidity of nulls and the second one is",
    "start": "1427919",
    "end": "1433679"
  },
  {
    "text": "the business logic the third one is the business logic this one just says look that's how you deal with it just get on with it switch statement oh I love",
    "start": "1433679",
    "end": "1442080"
  },
  {
    "text": "switch statements so much as a lie and search stoners I thought",
    "start": "1442080",
    "end": "1447510"
  },
  {
    "text": "switch was a silly example to go for because I kind of thought no one",
    "start": "1447510",
    "end": "1452730"
  },
  {
    "text": "programs as switch statements because we're not living in the 80s or 90s anymore this is ridiculous but then I",
    "start": "1452730",
    "end": "1459060"
  },
  {
    "text": "remembered that of course we don't have control over all of our domains sometimes at the edges we're looking at",
    "start": "1459060",
    "end": "1464490"
  },
  {
    "text": "user input or we're looking at stuff which comes off the wire or we have to do some parsing of something which we",
    "start": "1464490",
    "end": "1471300"
  },
  {
    "text": "don't control and we often use switch statements for that sort of thing so in this example I'm gonna get some port",
    "start": "1471300",
    "end": "1477030"
  },
  {
    "text": "number in this case I've said oh wait a",
    "start": "1477030",
    "end": "1482460"
  },
  {
    "text": "minute I'll try not to give away stuff the port number is coming in as a string so I have to turn this into an integer",
    "start": "1482460",
    "end": "1489020"
  },
  {
    "text": "and then I have to i want ultimately to get some sort of port type out of this",
    "start": "1489020",
    "end": "1494490"
  },
  {
    "text": "so I have to create a variable which is called port type which has to be variable because I'm going to assign something to it inside the switch it",
    "start": "1494490",
    "end": "1501120"
  },
  {
    "text": "can't be immutable and then I have to go through and even if I've got two values which return the same type so HTTP I",
    "start": "1501120",
    "end": "1509460"
  },
  {
    "text": "still have to list each one of these values inside my switch statement I haven't even mentioned the fact that you've got break in there which is just",
    "start": "1509460",
    "end": "1516000"
  },
  {
    "text": "the most ugly thing in your code ever and then if you've got any logic which is much more which is even slightly more",
    "start": "1516000",
    "end": "1522750"
  },
  {
    "text": "complicated than check it against some constant value it all has to go in the default block in which case you're like",
    "start": "1522750",
    "end": "1528300"
  },
  {
    "text": "what am I using a switch for this is completely pointless so this is my",
    "start": "1528300",
    "end": "1533490"
  },
  {
    "text": "statement in in Java and this is my when statement in Kotlin and I can do things",
    "start": "1533490",
    "end": "1539490"
  },
  {
    "text": "like I can assign the return type if you",
    "start": "1539490",
    "end": "1545040"
  },
  {
    "text": "like of the when to a non variable value so it can't be reassigned later I know",
    "start": "1545040",
    "end": "1551220"
  },
  {
    "text": "that's safe I can do things like I can check for a number of different values discrete values and assign it to some",
    "start": "1551220",
    "end": "1558000"
  },
  {
    "text": "value I can look at ranges and I can do things like check types and things like",
    "start": "1558000",
    "end": "1563700"
  },
  {
    "text": "that and I can do all of that in here and when I'm reading this I can pretty",
    "start": "1563700",
    "end": "1568830"
  },
  {
    "text": "much see the business logic of what I'm trying to achieve you know if it's not an integer value it's just not valid if",
    "start": "1568830",
    "end": "1574980"
  },
  {
    "text": "it's one of these things then go off and do this and don't have to wade through all of this syntax which is really nothing to do",
    "start": "1574980",
    "end": "1581519"
  },
  {
    "text": "with the business logic I might not only finish on time I might",
    "start": "1581519",
    "end": "1588029"
  },
  {
    "text": "even have time for questions this has never happened",
    "start": "1588029",
    "end": "1592850"
  },
  {
    "text": "default parameter my finishing I'm going through so fast I'm gonna speak slower",
    "start": "1593090",
    "end": "1598100"
  },
  {
    "text": "default parameter valleys lots of people ask me especially if they come in from a different language like how do I manage",
    "start": "1598100",
    "end": "1604049"
  },
  {
    "text": "default parameter values in Java and I say what because I don't know what that means because we use method overloading",
    "start": "1604049",
    "end": "1611850"
  },
  {
    "text": "for this sort of thing so my default values are never mind forget you ever",
    "start": "1611850",
    "end": "1619710"
  },
  {
    "text": "saw that so in order to assign default values for the prefix and the suffix I I'm just going to have a method which",
    "start": "1619710",
    "end": "1627539"
  },
  {
    "text": "takes go away so Keene print message which takes a message and then I assign my default",
    "start": "1627539",
    "end": "1633779"
  },
  {
    "text": "values here and then I have to have like various different combinations of my",
    "start": "1633779",
    "end": "1639419"
  },
  {
    "text": "parameters and site assign those and then of course when I'm using this method when I'm drilling in from my IDE",
    "start": "1639419",
    "end": "1645240"
  },
  {
    "text": "and I end up up here then I have to drill down to this one and figure out what that does and it's quite difficult",
    "start": "1645240",
    "end": "1651809"
  },
  {
    "text": "to get to the root method to figure out what am I actually trying to do here in",
    "start": "1651809",
    "end": "1657000"
  },
  {
    "text": "Kotlin you can actually just assign your default values there and you can see",
    "start": "1657000",
    "end": "1662100"
  },
  {
    "text": "that in the method signature so it's it's quite self documenting so if you don't pass in a prefix or a suffix you",
    "start": "1662100",
    "end": "1667889"
  },
  {
    "text": "will automatically get the empty string as your prefix and suffix so that's quite descriptive on top of that you get",
    "start": "1667889",
    "end": "1673769"
  },
  {
    "text": "the nice syntax for for putting stuff into strings like I didn't look up what",
    "start": "1673769",
    "end": "1678899"
  },
  {
    "text": "that's called in Kotlin but in in groovy it's the G strings I think so you can actually just put the named parameters",
    "start": "1678899",
    "end": "1684269"
  },
  {
    "text": "in there so then when you're reading that you know exactly which all of those parameters come in whereas in the Java",
    "start": "1684269",
    "end": "1689879"
  },
  {
    "text": "version you've got SS and then you have to sort of parse that in your brain it's a bit more complicated to read them all",
    "start": "1689879",
    "end": "1697350"
  },
  {
    "text": "so can anyone spot the deliberate bug",
    "start": "1697350",
    "end": "1702138"
  },
  {
    "text": "right exactly prefix message and suffix it the wrong way around so here I got a message and a prefix and I'm passing in",
    "start": "1703039",
    "end": "1709769"
  },
  {
    "text": "two next method prefix and message when it's actually a message and prefix so method",
    "start": "1709769",
    "end": "1715310"
  },
  {
    "text": "overloading particularly if you're talking about the same types which we are here is prone to these sorts of",
    "start": "1715310",
    "end": "1720650"
  },
  {
    "text": "subtle bugs that obviously the compiler is not going to pick that up so you need tests to pick that sort of thing up whereas when you have a single method",
    "start": "1720650",
    "end": "1727250"
  },
  {
    "text": "with some default values it's much clearer what's actually going on under the covers so not only is it more",
    "start": "1727250",
    "end": "1733820"
  },
  {
    "text": "readable it's actually less prone to subtle bugs yes so I asked Stack",
    "start": "1733820",
    "end": "1740210"
  },
  {
    "text": "Overflow how do i do default parameters in in java and it said use VAR args down",
    "start": "1740210",
    "end": "1745250"
  },
  {
    "text": "use VAR args that's a stupid idea this is not the same thing this is basically like just print out the random set of",
    "start": "1745250",
    "end": "1751370"
  },
  {
    "text": "strings that you pass me there's like no there's no point using a type safe language when you're going to do",
    "start": "1751370",
    "end": "1757550"
  },
  {
    "text": "something like this because you just passed in a whole list of I don't know what and you go to print I don't know what so it don't use VAR args it's silly",
    "start": "1757550",
    "end": "1765850"
  },
  {
    "text": "ranges not sufferers in Java 8 we've got the ability to create infinite or finite",
    "start": "1765850",
    "end": "1771620"
  },
  {
    "text": "ranges using streams so I can say maybe I want a range from 1 to 100 inclusive",
    "start": "1771620",
    "end": "1777800"
  },
  {
    "text": "or exclusive are cartman which way around it works there's a range and there's a range I don't know but anyway",
    "start": "1777800",
    "end": "1782870"
  },
  {
    "text": "you can do that in Java so you get a stream of numbers in Kotlin you have",
    "start": "1782870",
    "end": "1788630"
  },
  {
    "text": "nice pretty syntax I think that's the same in groovy as well you have nice pretty syntax it's quite readable my",
    "start": "1788630",
    "end": "1794300"
  },
  {
    "text": "numbers are 1 to 100 so that's nice so Java 8 is kind of I'm cheating by using",
    "start": "1794300",
    "end": "1801050"
  },
  {
    "text": "the local variable type inference thing by putting var on the front and also using static imports to get rid of the",
    "start": "1801050",
    "end": "1808160"
  },
  {
    "text": "the second in stream so I would say Java 10 is nearly nearly at Kotlin levels of",
    "start": "1808160",
    "end": "1815330"
  },
  {
    "text": "readability and succinctness there my boss doesn't agree but then he like Scotland so he's biased I'm moving on",
    "start": "1815330",
    "end": "1823340"
  },
  {
    "text": "from the ranges ranges are kind of fine but of course ranges pre Java 8 get kind of screwed you've just got to use a for",
    "start": "1823340",
    "end": "1829130"
  },
  {
    "text": "loop or nothing I think I'm moving on to collections though this is this is I",
    "start": "1829130",
    "end": "1835940"
  },
  {
    "text": "think this is an area where javis really evolving and changing quite quickly and this is super useful because I've been",
    "start": "1835940",
    "end": "1842690"
  },
  {
    "text": "using collections a lot in a lot of my coding over well over forever and simple things can really",
    "start": "1842690",
    "end": "1848540"
  },
  {
    "text": "help the way that we work when we're creating and manipulating collections so let's say we create a list of customers",
    "start": "1848540",
    "end": "1854210"
  },
  {
    "text": "this might be the Java way of doing stuff I was doing this like up until well up until last September actually",
    "start": "1854210",
    "end": "1861100"
  },
  {
    "text": "this is how I create my immutable list it turns out that this list is not",
    "start": "1861100",
    "end": "1866270"
  },
  {
    "text": "immutable at all you can't add to it but you can change the values in the list if you use arrays as lists we tend not to",
    "start": "1866270",
    "end": "1872810"
  },
  {
    "text": "but you can what you really wanted to do was have an unmodifiable list as list of",
    "start": "1872810",
    "end": "1879020"
  },
  {
    "text": "that and and then it starts to get really quite ugly Java 9 comes in and",
    "start": "1879020",
    "end": "1884150"
  },
  {
    "text": "saves the day and you can say list off and you get an immutable list that's great not only is that fewer characters",
    "start": "1884150",
    "end": "1889340"
  },
  {
    "text": "than a raised or as list but actually does what you thought it was going to do and applies to maps and to sets as well",
    "start": "1889340",
    "end": "1895190"
  },
  {
    "text": "so this is in my mind this is the most useful feature of Java 9 jigsaw is",
    "start": "1895190",
    "end": "1900950"
  },
  {
    "text": "obviously amazing mark if you're watching this but that this is much more useful for developers and in Kotlin you",
    "start": "1900950",
    "end": "1907580"
  },
  {
    "text": "say something similar you can just say list of and Java 10 again I'm cheating by using var but also by using static",
    "start": "1907580",
    "end": "1914420"
  },
  {
    "text": "imports so we are starting to see that the evolution of Java is making the everyday things that we do just that",
    "start": "1914420",
    "end": "1921140"
  },
  {
    "text": "little bit more readable that bit easier for us to do it's just little things because really the the top one with the",
    "start": "1921140",
    "end": "1926690"
  },
  {
    "text": "unmodifiable list as list it's it's a bit leaky we just kind of live with it but it's a bit icky now we get to lambda",
    "start": "1926690",
    "end": "1935870"
  },
  {
    "text": "expressions which Java was a little bit late to the party with lambda expressions but we did have closures all",
    "start": "1935870",
    "end": "1941180"
  },
  {
    "text": "along we all used anonymous inner classes all the time didn't we no",
    "start": "1941180",
    "end": "1946940"
  },
  {
    "text": "because it's ugly right the only thing you really care about in this is the fact that you've got an event and that",
    "start": "1946940",
    "end": "1953240"
  },
  {
    "text": "this is what you want to do with it when you get the event the other stuff is literally boilerplate it means nothing so in job eight we've got lambda",
    "start": "1953240",
    "end": "1960170"
  },
  {
    "text": "expressions it's purposefully going off the edge of the page because like you know that well that's going to say but all we do with the lambda expression is",
    "start": "1960170",
    "end": "1966320"
  },
  {
    "text": "we take the stuff we really care about the business logic and inject that in so",
    "start": "1966320",
    "end": "1971870"
  },
  {
    "text": "in this case hang it onto the button as the thing to do when the button gets pushed",
    "start": "1971870",
    "end": "1977900"
  },
  {
    "text": "Kotlin kind of has lambdas has always had lambdas is like a first-class citizen so and it does it anymore",
    "start": "1977900",
    "end": "1983760"
  },
  {
    "text": "I think it's more similar to groovy so you don't need to have your little arrow and if you notice here I don't use the",
    "start": "1983760",
    "end": "1992070"
  },
  {
    "text": "event parameter here so I have to put it in in Java but in Kotlin I don't need to say event because I'm not using it",
    "start": "1992070",
    "end": "1998580"
  },
  {
    "text": "I don't need my don't need the arrow and I don't need round braces I just need",
    "start": "1998580",
    "end": "2004250"
  },
  {
    "text": "the curly braces to say this is my this is the behavior I want you to hang on to the button in Java future 1112 I'm not",
    "start": "2004250",
    "end": "2014780"
  },
  {
    "text": "sure we will probably be getting this under school to say I don't care about",
    "start": "2014780",
    "end": "2020690"
  },
  {
    "text": "this parameter I'm not going to use it so it just allows you to slip hide it away a little bit it's still there it's",
    "start": "2020690",
    "end": "2026059"
  },
  {
    "text": "not like Kotlin where you just ignore it this is still there but it just use the underscore to say I don't care about that anymore oh yeah there you go",
    "start": "2026059",
    "end": "2036640"
  },
  {
    "text": "functional parameters so talking about lambda expressions here is the bit where when I was learning about Java 8 I was",
    "start": "2037059",
    "end": "2043670"
  },
  {
    "text": "really tripping up over this it's one thing to write a lambda expression and",
    "start": "2043670",
    "end": "2048860"
  },
  {
    "text": "to call a message with a lambda expression so looking at the top there and here where we are doing you see my",
    "start": "2048860",
    "end": "2056419"
  },
  {
    "text": "mouse not really I've got method called get and I'm going to pass in a lambda expression which takes a request and a response and does",
    "start": "2056419",
    "end": "2063500"
  },
  {
    "text": "something with that request in response for example and that's okay I can call methods with lambda expressions I kind",
    "start": "2063500",
    "end": "2069350"
  },
  {
    "text": "of get that but when I'm writing a method that's designed to take a lambda expression I'm a bit more lost because",
    "start": "2069350",
    "end": "2075230"
  },
  {
    "text": "it's kind of its kind of not clear to me so one way of doing it in this case is",
    "start": "2075230",
    "end": "2081378"
  },
  {
    "text": "my second parameter could be an interface called route handler I define my interface",
    "start": "2081379",
    "end": "2086690"
  },
  {
    "text": "called route handler I tagged it with functional interface to say this has a single abstract method which means that",
    "start": "2086690",
    "end": "2092929"
  },
  {
    "text": "you can override this by using a lambda expression and then I put the the signature of my single abstract method",
    "start": "2092929",
    "end": "2099980"
  },
  {
    "text": "and then that is the thing that I'm overriding when I write my lambda expression to be honest I'm really not",
    "start": "2099980",
    "end": "2106250"
  },
  {
    "text": "surprised I didn't understand lambda expressions when I first learned about them because that's a lot of code to to understand",
    "start": "2106250",
    "end": "2113600"
  },
  {
    "text": "what's going on here slightly more idiomatic way of doing this would be to use the built in by consumer instead so",
    "start": "2113600",
    "end": "2120200"
  },
  {
    "text": "instead of writing my own functional interface I use a built in functional interface called by consumer this and",
    "start": "2120200",
    "end": "2126950"
  },
  {
    "text": "then it's got two types so that the two types in my case are a request and a response and the consumer has two values",
    "start": "2126950",
    "end": "2134120"
  },
  {
    "text": "which go in and nothing which comes out and which means that I can use my my",
    "start": "2134120",
    "end": "2139130"
  },
  {
    "text": "lambda expression which looks like this but then this is kind of in some ways less is easier to write this is more",
    "start": "2139130",
    "end": "2145370"
  },
  {
    "text": "difficult to read because I'm like well which bit of this method this get method says that this second parameter is is a",
    "start": "2145370",
    "end": "2153320"
  },
  {
    "text": "lambda expression you can drill in and see that by consumer is a functional interface and then you have to know",
    "start": "2153320",
    "end": "2159440"
  },
  {
    "text": "functional interfaces could be represented as a lambda expression but it's not at all obvious especially when",
    "start": "2159440",
    "end": "2164720"
  },
  {
    "text": "you're autocomplete pops up on your IDE and it says now I want a by consumer",
    "start": "2164720",
    "end": "2169850"
  },
  {
    "text": "you're like I don't know what that is what does that mean this is a bit more difficult to understand in the Java world how when you're looking at the",
    "start": "2169850",
    "end": "2177380"
  },
  {
    "text": "signature of a method that it might take a lambda expression and in Kotlin this is solved by saying why don't we express",
    "start": "2177380",
    "end": "2183800"
  },
  {
    "text": "this as a lambda expression so here my handler is a request a response and it",
    "start": "2183800",
    "end": "2189920"
  },
  {
    "text": "returns unit which is like null void so when I look at that method I know that",
    "start": "2189920",
    "end": "2197750"
  },
  {
    "text": "I'm going to call it with a with a lambda and it's just a little bit it's a lot less sort of thinking and working",
    "start": "2197750",
    "end": "2203570"
  },
  {
    "text": "through the code and figuring out what that's what that type is and what the lambda expression looks like there's",
    "start": "2203570",
    "end": "2209000"
  },
  {
    "text": "much more readable I'm and when I was looking at this example that I stole",
    "start": "2209000",
    "end": "2215660"
  },
  {
    "text": "this example from the wasa I reused from within my team I reused some code and I just didn't really",
    "start": "2215660",
    "end": "2221360"
  },
  {
    "text": "understand what what this example was getting at until I realized no that's in the signature of the method",
    "start": "2221360",
    "end": "2227420"
  },
  {
    "text": "it's just expressing at the signature Methodist it's just much more readable oh yes that's what I'm talking about the",
    "start": "2227420",
    "end": "2236500"
  },
  {
    "text": "the sort of companion thing with lambda expressions in Java is of course the",
    "start": "2236500",
    "end": "2242060"
  },
  {
    "text": "streams API so we're using the streams API to navigate",
    "start": "2242060",
    "end": "2247090"
  },
  {
    "text": "collections so now in Java 8 we can for example filter all our customers for",
    "start": "2247090",
    "end": "2253330"
  },
  {
    "text": "customers whose name starts with a get their email address and collect it into a new list of email addresses and this",
    "start": "2253330",
    "end": "2259990"
  },
  {
    "text": "is so much more readable it's so much more readable if you know what filter means if you know what matte means if",
    "start": "2259990",
    "end": "2265720"
  },
  {
    "text": "you know what those things do it is more readable but only once you've learnt what that means because when I came to",
    "start": "2265720",
    "end": "2272020"
  },
  {
    "text": "this I only been doing Java I haven't used other other idioms other ways of programming and I don't I still don't",
    "start": "2272020",
    "end": "2277840"
  },
  {
    "text": "really understand what map means I don't know what a math is I thought that was how you get from one place to another using Google Maps so let me show you",
    "start": "2277840",
    "end": "2288640"
  },
  {
    "text": "what this would have been like pre Java 8 let's look for collections so pre Java",
    "start": "2288640",
    "end": "2298450"
  },
  {
    "text": "8 I would have my for loop which goes",
    "start": "2298450",
    "end": "2303640"
  },
  {
    "text": "over my customers my if statement which is my filter and then the customer get email is effectively the map operation",
    "start": "2303640",
    "end": "2310390"
  },
  {
    "text": "and then I have to chuck that into a new list of emails and that's the equivalent",
    "start": "2310390",
    "end": "2315730"
  },
  {
    "text": "for as long time Java people you might argue that that's actually more readable",
    "start": "2315730",
    "end": "2321370"
  },
  {
    "text": "because I know what a for loop does I know what the if statement is doing I know what's happening there so it's",
    "start": "2321370",
    "end": "2327400"
  },
  {
    "text": "taking me a little while to realize that this can actually be expressed as a as a",
    "start": "2327400",
    "end": "2333310"
  },
  {
    "text": "Java eight stream obviously I can get my",
    "start": "2333310",
    "end": "2338890"
  },
  {
    "text": "IDE to do that for me so I'm like great I don't know what that means but the IDE says that's right so it must work",
    "start": "2338890",
    "end": "2346140"
  },
  {
    "text": "compiles ship it it's not in Kotlin you",
    "start": "2346140",
    "end": "2356050"
  },
  {
    "text": "could use this syntax which gets rid of the stream and the collect so I'm filtering and I'm mapping it takes a",
    "start": "2356050",
    "end": "2362080"
  },
  {
    "text": "customer the filter takes the customer checks whether it starts with a and then",
    "start": "2362080",
    "end": "2367300"
  },
  {
    "text": "the map takes a customer returns a customer email in fact you can actually simplify this even further because you",
    "start": "2367300",
    "end": "2372850"
  },
  {
    "text": "only have one parameter going into the lambda expression and you're looking at that one parameter so you're",
    "start": "2372850",
    "end": "2378610"
  },
  {
    "text": "going to say it the thing that I get get the name and then the thing that I get",
    "start": "2378610",
    "end": "2383710"
  },
  {
    "text": "get the email there's no method references in here it's just a different way of working so it's a little bit I",
    "start": "2383710",
    "end": "2389500"
  },
  {
    "text": "think that's a little bit simpler marginally more readable again if you understand what filter and map is",
    "start": "2389500",
    "end": "2395050"
  },
  {
    "text": "supposed to do but this is actually not the same thing as the Java eight streams",
    "start": "2395050",
    "end": "2400510"
  },
  {
    "text": "operation even though it looks the same with boilerplate removed if you want to do the same thing as the Java eight",
    "start": "2400510",
    "end": "2406510"
  },
  {
    "text": "streams operation it looks suspiciously like the Java eight streams operation because what you",
    "start": "2406510",
    "end": "2412630"
  },
  {
    "text": "need to do well it's dreams do which is really cool is they're all lazily evaluated so you start with a stream you",
    "start": "2412630",
    "end": "2419560"
  },
  {
    "text": "give it a series of instructions for your recipe and then at the end you call a terminator and only at that point do",
    "start": "2419560",
    "end": "2426310"
  },
  {
    "text": "you go away and do the thing so you do all in one pass which means you need the",
    "start": "2426310",
    "end": "2431710"
  },
  {
    "text": "Terminator to say go off and do this thing or this series of things with the",
    "start": "2431710",
    "end": "2437650"
  },
  {
    "text": "second Kotlin example when you do customers dot filter it goes away and filters out all the customers that begin",
    "start": "2437650",
    "end": "2443440"
  },
  {
    "text": "with a and gives you that list and then you call map and it goes away and gives you a list of all the emails whereas the",
    "start": "2443440",
    "end": "2451060"
  },
  {
    "text": "streams doesn't it goes oh I'll do this all in one operation so today one operation you need more boilerplate",
    "start": "2451060",
    "end": "2456940"
  },
  {
    "text": "boilerplate so in this case although that our sequence and the two lists in",
    "start": "2456940",
    "end": "2462040"
  },
  {
    "text": "the cotton example look like boilerplate they're not this is code that is necessary to tell it how to do things in",
    "start": "2462040",
    "end": "2469540"
  },
  {
    "text": "the way that you want to do it if you wanted to in one pass with a lazy operation you need to do that so it's",
    "start": "2469540",
    "end": "2476710"
  },
  {
    "text": "important to start to understand that sometimes the code obviously is trying to tell you something important it's not",
    "start": "2476710",
    "end": "2482320"
  },
  {
    "text": "always something that you can just throw away and say I don't need this I don't need this I don't need this as always",
    "start": "2482320",
    "end": "2487810"
  },
  {
    "text": "for this sort of thing obviously there's a performance difference between the eager one and the lazy one but as always",
    "start": "2487810",
    "end": "2494740"
  },
  {
    "text": "if you care that much measure the performance first because I bet you any money it doesn't matter that much especially if you have a list of like",
    "start": "2494740",
    "end": "2501370"
  },
  {
    "text": "ten customers so I'm fairly certain it makes no difference in which case sure use the more succinct one which is more",
    "start": "2501370",
    "end": "2507250"
  },
  {
    "text": "readable and you don't care but if you've got like I don't know a million customers and",
    "start": "2507250",
    "end": "2512590"
  },
  {
    "text": "it's a difficult operation that you're doing in the filter in the map then maybe you want to do that's in a lazy",
    "start": "2512590",
    "end": "2518620"
  },
  {
    "text": "way oh my goodness me at the end who knew in summary that's a lot of code so",
    "start": "2518620",
    "end": "2526840"
  },
  {
    "text": "um this presentation is basically well a lot of my presentations are about code basically I just fling loads of code at",
    "start": "2526840",
    "end": "2533050"
  },
  {
    "text": "you and say isn't that more readable or isn't that less readable so let's have a think about what we've learnt the",
    "start": "2533050",
    "end": "2540130"
  },
  {
    "text": "boilerplate as in the stuff you really don't care about repetition stuff that",
    "start": "2540130",
    "end": "2546160"
  },
  {
    "text": "the compiler needs to know about all the computer needs to know about that you don't can obscure the real business",
    "start": "2546160",
    "end": "2551200"
  },
  {
    "text": "logic so all that stuff for example about null checking is not really business logic that's just crap that",
    "start": "2551200",
    "end": "2557830"
  },
  {
    "text": "needs to be there to make sure it doesn't fall over in a heap and that's what I mean by boilerplate and it can",
    "start": "2557830",
    "end": "2563140"
  },
  {
    "text": "hide away what the code is really doing and as developers we are supposed to be",
    "start": "2563140",
    "end": "2568480"
  },
  {
    "text": "reading code we will be reading code more than writing code so we really would like to get rid of all of the",
    "start": "2568480",
    "end": "2574030"
  },
  {
    "text": "stuff that doesn't matter all of the stuff that isn't anything to do with what the code is really trying to",
    "start": "2574030",
    "end": "2579130"
  },
  {
    "text": "achieve the modern languages are designed to remove boilerplate including",
    "start": "2579130",
    "end": "2584170"
  },
  {
    "text": "Java is actually evolving to try and get rid of some of this stuff and I have",
    "start": "2584170",
    "end": "2589900"
  },
  {
    "text": "found that working with Kotlin not as a non Kotlin expert I actually quite like working with reading Kotlin because it",
    "start": "2589900",
    "end": "2597400"
  },
  {
    "text": "just gets rid of frak what is to do with a compiler and just tells you what you're trying to achieve and so it's",
    "start": "2597400",
    "end": "2603460"
  },
  {
    "text": "actually even for someone who doesn't work with Kotlin it becomes more readable so modern languages like Kotlin",
    "start": "2603460",
    "end": "2608890"
  },
  {
    "text": "like modern java have removed boilerplate and therefore probably the",
    "start": "2608890",
    "end": "2613930"
  },
  {
    "text": "code is more readable however readability is objective so I've kind of talked about this a little bit",
    "start": "2613930",
    "end": "2619690"
  },
  {
    "text": "in terms of like the streams API for streams API is terribly readable and a lot shorter if you know what the streams",
    "start": "2619690",
    "end": "2626110"
  },
  {
    "text": "API is doing if you don't really understand what a filter operation is what a map operation is what flat map is",
    "start": "2626110",
    "end": "2632080"
  },
  {
    "text": "for goodness sake flat map getting your head round flat map it's much more complicated than pausing a for loop with",
    "start": "2632080",
    "end": "2638890"
  },
  {
    "text": "an if statement inside it we can kind of understand that so readability is going to be objective from the point of view of your",
    "start": "2638890",
    "end": "2645210"
  },
  {
    "text": "team so Java developers have been doing Java for a long time are going to have a different idea about readability to",
    "start": "2645210",
    "end": "2651390"
  },
  {
    "text": "JavaScript developers to new developers to polyglot polyglot developers who are moving around between languages so the",
    "start": "2651390",
    "end": "2658980"
  },
  {
    "text": "purpose of this presentation is not to say necessarily go away rewrite your whole code base in Kotlin or in Java 10",
    "start": "2658980",
    "end": "2665490"
  },
  {
    "text": "because it will be much more readable and you'll be much more productive because that might not be the case it's",
    "start": "2665490",
    "end": "2670680"
  },
  {
    "text": "going to depend a lot upon the team that you're working with all the information",
    "start": "2670680",
    "end": "2676650"
  },
  {
    "text": "from this talk is available on this URL or probably will be in the next five minutes I've got the slides and loads of",
    "start": "2676650",
    "end": "2684390"
  },
  {
    "text": "links to all the features that I talked about the Java 10 features the features which are coming up in the future the Kotlin features i've used there are",
    "start": "2684390",
    "end": "2690810"
  },
  {
    "text": "all i've got links to all of them in there so i didn't want to go into each of the features in a lot of detail I",
    "start": "2690810",
    "end": "2696270"
  },
  {
    "text": "just wanted to show you what it looks like to read and so if you're interested in any of them they're all available on",
    "start": "2696270",
    "end": "2701670"
  },
  {
    "text": "this URL thank you very much [Applause]",
    "start": "2701670",
    "end": "2709390"
  }
]