[
  {
    "text": "hi my name is Seth lad and welcome to",
    "start": "240",
    "end": "1760"
  },
  {
    "text": "this episode of Dart tips today we",
    "start": "1760",
    "end": "3360"
  },
  {
    "text": "sharpen our understanding of dart's",
    "start": "3360",
    "end": "4880"
  },
  {
    "text": "basic built-in types the building blocks",
    "start": "4880",
    "end": "7120"
  },
  {
    "text": "of any program Dart is support for",
    "start": "7120",
    "end": "8719"
  },
  {
    "text": "numbers strings and booleans they are",
    "start": "8719",
    "end": "11000"
  },
  {
    "text": "all objects you can initialize them from",
    "start": "11000",
    "end": "12799"
  },
  {
    "text": "literal values and you can't get very",
    "start": "12799",
    "end": "14719"
  },
  {
    "text": "far without them let's get",
    "start": "14719",
    "end": "17799"
  },
  {
    "text": "[Music]",
    "start": "17960",
    "end": "21240"
  },
  {
    "text": "started numbers strings and bullion are",
    "start": "21240",
    "end": "24119"
  },
  {
    "text": "easy to use because you can create them",
    "start": "24119",
    "end": "25680"
  },
  {
    "text": "from literal values every object in Dart",
    "start": "25680",
    "end": "28160"
  },
  {
    "text": "is an instance of a class but these",
    "start": "28160",
    "end": "29599"
  },
  {
    "text": "built-in types can be initialized",
    "start": "29599",
    "end": "31119"
  },
  {
    "text": "without having to use a Constructor with",
    "start": "31119",
    "end": "32640"
  },
  {
    "text": "the new keyword let's see literals in",
    "start": "32640",
    "end": "34920"
  },
  {
    "text": "action and start our tour with",
    "start": "34920",
    "end": "36960"
  },
  {
    "text": "numbers Dart has two types of numbers",
    "start": "36960",
    "end": "39480"
  },
  {
    "text": "integers are arbitrary Precision which",
    "start": "39480",
    "end": "41200"
  },
  {
    "text": "means they can grow to arbitrary size in",
    "start": "41200",
    "end": "42719"
  },
  {
    "text": "the dart VM doubles are 64-bit floating",
    "start": "42719",
    "end": "45760"
  },
  {
    "text": "Point numbers that conform to the i e",
    "start": "45760",
    "end": "48039"
  },
  {
    "text": "754",
    "start": "48039",
    "end": "49920"
  },
  {
    "text": "standard you can create instances of",
    "start": "49920",
    "end": "52120"
  },
  {
    "text": "these classes using literals for example",
    "start": "52120",
    "end": "54920"
  },
  {
    "text": "here are some integers notice how you",
    "start": "54920",
    "end": "56559"
  },
  {
    "text": "can create a new instance of a number",
    "start": "56559",
    "end": "58160"
  },
  {
    "text": "simply by using its literal value a",
    "start": "58160",
    "end": "60519"
  },
  {
    "text": "little warning though very large",
    "start": "60519",
    "end": "61879"
  },
  {
    "text": "integers will work in the DAR VM but not",
    "start": "61879",
    "end": "63760"
  },
  {
    "text": "when compiled to JavaScript this is a",
    "start": "63760",
    "end": "65560"
  },
  {
    "text": "known issue so stay",
    "start": "65560",
    "end": "67080"
  },
  {
    "text": "tuned number literals with a decimal",
    "start": "67080",
    "end": "69400"
  },
  {
    "text": "point are doubles you can even declare a",
    "start": "69400",
    "end": "71600"
  },
  {
    "text": "double literal with an exponent for",
    "start": "71600",
    "end": "73280"
  },
  {
    "text": "scientific",
    "start": "73280",
    "end": "74520"
  },
  {
    "text": "notation both integers and doubles are",
    "start": "74520",
    "end": "76799"
  },
  {
    "text": "some classes of the num class The",
    "start": "76799",
    "end": "79720"
  },
  {
    "text": "Operators of plus minus multiply and",
    "start": "79720",
    "end": "82520"
  },
  {
    "text": "divide are actually special methods",
    "start": "82520",
    "end": "84280"
  },
  {
    "text": "defined in the num class of special note",
    "start": "84280",
    "end": "87320"
  },
  {
    "text": "is the difference between Division and",
    "start": "87320",
    "end": "89000"
  },
  {
    "text": "truncating Division",
    "start": "89000",
    "end": "90360"
  },
  {
    "text": "division with just one forward slash",
    "start": "90360",
    "end": "92079"
  },
  {
    "text": "returns a double truncating division",
    "start": "92079",
    "end": "93920"
  },
  {
    "text": "with Tilla forward slash truncates the",
    "start": "93920",
    "end": "95759"
  },
  {
    "text": "answer and Returns the integer portion",
    "start": "95759",
    "end": "97880"
  },
  {
    "text": "before the decimal",
    "start": "97880",
    "end": "99920"
  },
  {
    "text": "point the num class also defines methods",
    "start": "99920",
    "end": "102759"
  },
  {
    "text": "such as absolute ceiling floor round and",
    "start": "102759",
    "end": "105079"
  },
  {
    "text": "more this makes sense because these are",
    "start": "105079",
    "end": "107200"
  },
  {
    "text": "all methods you can call in a specific",
    "start": "107200",
    "end": "108960"
  },
  {
    "text": "instance of a",
    "start": "108960",
    "end": "110159"
  },
  {
    "text": "number use the static method parse from",
    "start": "110159",
    "end": "112680"
  },
  {
    "text": "the int and double classes to convert a",
    "start": "112680",
    "end": "114399"
  },
  {
    "text": "string to a number and go the other way",
    "start": "114399",
    "end": "116759"
  },
  {
    "text": "from number to string using good old two",
    "start": "116759",
    "end": "119039"
  },
  {
    "text": "string speaking of strings let's move on",
    "start": "119039",
    "end": "121399"
  },
  {
    "text": "to our next built-in type strings and",
    "start": "121399",
    "end": "124159"
  },
  {
    "text": "dart are sequences of UTF 16 code units",
    "start": "124159",
    "end": "127880"
  },
  {
    "text": "notice how you can use either single",
    "start": "127880",
    "end": "129160"
  },
  {
    "text": "quotes or double quotes when declaring a",
    "start": "129160",
    "end": "130959"
  },
  {
    "text": "string literal this is awesome because",
    "start": "130959",
    "end": "133239"
  },
  {
    "text": "this lets you choose the quotes that",
    "start": "133239",
    "end": "134599"
  },
  {
    "text": "work for your string writing a bunch of",
    "start": "134599",
    "end": "136519"
  },
  {
    "text": "HTML that uses double quotes great you",
    "start": "136519",
    "end": "138879"
  },
  {
    "text": "can wrap the entire string in single",
    "start": "138879",
    "end": "140519"
  },
  {
    "text": "quotes does your string contain single",
    "start": "140519",
    "end": "142480"
  },
  {
    "text": "quotes not a problem just wrap the whole",
    "start": "142480",
    "end": "144440"
  },
  {
    "text": "thing in double",
    "start": "144440",
    "end": "145959"
  },
  {
    "text": "quotes combining and building strings is",
    "start": "145959",
    "end": "148319"
  },
  {
    "text": "easy with string interpolation notice",
    "start": "148319",
    "end": "150519"
  },
  {
    "text": "the dollar sign username inside of",
    "start": "150519",
    "end": "152560"
  },
  {
    "text": "message this inserts the value from",
    "start": "152560",
    "end": "154599"
  },
  {
    "text": "username into the string message Dart",
    "start": "154599",
    "end": "156920"
  },
  {
    "text": "does not have string concatenation with",
    "start": "156920",
    "end": "158599"
  },
  {
    "text": "plus but you won't miss it thanks to",
    "start": "158599",
    "end": "160239"
  },
  {
    "text": "string",
    "start": "160239",
    "end": "161840"
  },
  {
    "text": "interpolation here's another reason you",
    "start": "161840",
    "end": "163720"
  },
  {
    "text": "don't need plus to concatenate strings",
    "start": "163720",
    "end": "165920"
  },
  {
    "text": "adjacent string literals or two string",
    "start": "165920",
    "end": "168319"
  },
  {
    "text": "literals next to each other are",
    "start": "168319",
    "end": "170120"
  },
  {
    "text": "concatenated for you this example shows",
    "start": "170120",
    "end": "172640"
  },
  {
    "text": "two string literals next to each other",
    "start": "172640",
    "end": "174319"
  },
  {
    "text": "even though they are on two lines the",
    "start": "174319",
    "end": "176360"
  },
  {
    "text": "compiler joins them together for",
    "start": "176360",
    "end": "178760"
  },
  {
    "text": "you for even longer strings you can use",
    "start": "178760",
    "end": "181480"
  },
  {
    "text": "Dart support for multi-line Strings",
    "start": "181480",
    "end": "183560"
  },
  {
    "text": "notice the use of triple quotes which",
    "start": "183560",
    "end": "185200"
  },
  {
    "text": "works with both triple single quotes or",
    "start": "185200",
    "end": "187040"
  },
  {
    "text": "triple double quotes all new lines after",
    "start": "187040",
    "end": "189519"
  },
  {
    "text": "the first triple quotes are retained",
    "start": "189519",
    "end": "191400"
  },
  {
    "text": "this feature is very useful for small",
    "start": "191400",
    "end": "193120"
  },
  {
    "text": "Snippets of",
    "start": "193120",
    "end": "194840"
  },
  {
    "text": "HTML for the times you need to use",
    "start": "194840",
    "end": "197000"
  },
  {
    "text": "special characters like dollar sign or",
    "start": "197000",
    "end": "198799"
  },
  {
    "text": "backslash inside your string you can use",
    "start": "198799",
    "end": "200640"
  },
  {
    "text": "raw strings prefix a string with the",
    "start": "200640",
    "end": "202799"
  },
  {
    "text": "character R to turn off any",
    "start": "202799",
    "end": "204440"
  },
  {
    "text": "interpretation of the String's contents",
    "start": "204440",
    "end": "206840"
  },
  {
    "text": "this is very handy for building regular",
    "start": "206840",
    "end": "208680"
  },
  {
    "text": "expressions the string class is full of",
    "start": "208680",
    "end": "210959"
  },
  {
    "text": "useful methods for searching creating",
    "start": "210959",
    "end": "212599"
  },
  {
    "text": "substrings matching and more we'll cover",
    "start": "212599",
    "end": "214760"
  },
  {
    "text": "strings in more detail in a future",
    "start": "214760",
    "end": "216239"
  },
  {
    "text": "episode let's move on to our next",
    "start": "216239",
    "end": "217879"
  },
  {
    "text": "built-in type",
    "start": "217879",
    "end": "219200"
  },
  {
    "text": "booleans like everything in Dart",
    "start": "219200",
    "end": "221040"
  },
  {
    "text": "booleans are objects specifically true",
    "start": "221040",
    "end": "223080"
  },
  {
    "text": "and false are the only two instances of",
    "start": "223080",
    "end": "224959"
  },
  {
    "text": "the bull class Dart differs from",
    "start": "224959",
    "end": "227680"
  },
  {
    "text": "JavaScript in its treatment of truthy",
    "start": "227680",
    "end": "229560"
  },
  {
    "text": "and faly values in JavaScript the object",
    "start": "229560",
    "end": "232239"
  },
  {
    "text": "one non-empty string and non-null",
    "start": "232239",
    "end": "235120"
  },
  {
    "text": "objects are all treated as true in Dart",
    "start": "235120",
    "end": "237599"
  },
  {
    "text": "it's more simple only the bullan Val",
    "start": "237599",
    "end": "239680"
  },
  {
    "text": "value true is treated as true in Dart",
    "start": "239680",
    "end": "242159"
  },
  {
    "text": "all object instances other than true are",
    "start": "242159",
    "end": "244560"
  },
  {
    "text": "treated as false instead of using many",
    "start": "244560",
    "end": "247720"
  },
  {
    "text": "different objects for truthiness and",
    "start": "247720",
    "end": "249040"
  },
  {
    "text": "Fess you can instead explicitly check",
    "start": "249040",
    "end": "251079"
  },
  {
    "text": "for values or states for example instead",
    "start": "251079",
    "end": "253680"
  },
  {
    "text": "of just checking if hit points you",
    "start": "253680",
    "end": "255959"
  },
  {
    "text": "should check explicitly if hit points is",
    "start": "255959",
    "end": "259120"
  },
  {
    "text": "equal to zero I personally really like",
    "start": "259120",
    "end": "261400"
  },
  {
    "text": "this as the code is clear and the",
    "start": "261400",
    "end": "263000"
  },
  {
    "text": "developer doesn't need to learn a bunch",
    "start": "263000",
    "end": "264639"
  },
  {
    "text": "of truthy or faly values the rule of",
    "start": "264639",
    "end": "267120"
  },
  {
    "text": "three is a writing principle that",
    "start": "267120",
    "end": "268400"
  },
  {
    "text": "suggests that things that come and three",
    "start": "268400",
    "end": "269960"
  },
  {
    "text": "are inherently more satisfying or more",
    "start": "269960",
    "end": "271680"
  },
  {
    "text": "effective than other numbers of things",
    "start": "271680",
    "end": "273759"
  },
  {
    "text": "so it's no coincidence then that you",
    "start": "273759",
    "end": "275600"
  },
  {
    "text": "just learn how to create three",
    "start": "275600",
    "end": "277039"
  },
  {
    "text": "foundational building blocks of any DART",
    "start": "277039",
    "end": "278880"
  },
  {
    "text": "program numbers strings and booleans",
    "start": "278880",
    "end": "281960"
  },
  {
    "text": "these types are all real objects and can",
    "start": "281960",
    "end": "283639"
  },
  {
    "text": "be initialized with literal values",
    "start": "283639",
    "end": "285120"
  },
  {
    "text": "making them very easy to use from here",
    "start": "285120",
    "end": "287080"
  },
  {
    "text": "we build up to collections in a future",
    "start": "287080",
    "end": "288759"
  },
  {
    "text": "episode thanks for watching my name is",
    "start": "288759",
    "end": "291120"
  },
  {
    "text": "Seth lad and as we say here on Dart tips",
    "start": "291120",
    "end": "293000"
  },
  {
    "text": "stay sharp click here to subscribe to",
    "start": "293000",
    "end": "295440"
  },
  {
    "text": "our channel for more episodes of Dart",
    "start": "295440",
    "end": "296960"
  },
  {
    "text": "tips we appreciate any thoughts you",
    "start": "296960",
    "end": "298520"
  },
  {
    "text": "might have for the series please please",
    "start": "298520",
    "end": "299800"
  },
  {
    "text": "leave them in the comments below if you",
    "start": "299800",
    "end": "301880"
  },
  {
    "text": "have any additional questions about Dart",
    "start": "301880",
    "end": "303520"
  },
  {
    "text": "please drop by stack Overflow where Dart",
    "start": "303520",
    "end": "305240"
  },
  {
    "text": "experts are standing by to help you out",
    "start": "305240",
    "end": "306880"
  },
  {
    "text": "see you next time",
    "start": "306880",
    "end": "310039"
  }
]