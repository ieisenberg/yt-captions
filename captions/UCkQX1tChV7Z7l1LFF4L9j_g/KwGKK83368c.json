[
  {
    "text": "[Music]",
    "start": "3320",
    "end": "8769"
  },
  {
    "text": "thank you thank you all okay so so this is not my slide pet Peter bons is one of",
    "start": "12679",
    "end": "19480"
  },
  {
    "text": "the preeminent uh database researchers on the planet um he he basically sort of",
    "start": "19480",
    "end": "25599"
  },
  {
    "text": "gave the the modern shared nothing column store its form and and this is",
    "start": "25599",
    "end": "31240"
  },
  {
    "text": "him being somewhat critical of of graph database systems I'm a graph database",
    "start": "31240",
    "end": "36760"
  },
  {
    "text": "implementer uh so a little bit nervous making uh this is a great talk if you're",
    "start": "36760",
    "end": "41800"
  },
  {
    "text": "if you're a database person um however it's it's quite technical so I thought I",
    "start": "41800",
    "end": "47239"
  },
  {
    "text": "would I would unpack it a little bit for for you guys so so how many people out",
    "start": "47239",
    "end": "52719"
  },
  {
    "text": "here um have teenage children just show of hands yeah yeah okay you guys are",
    "start": "52719",
    "end": "59000"
  },
  {
    "text": "doing great you're going to you're going to get through this um okay you're my Target demographic here uh so um a graph",
    "start": "59000",
    "end": "68600"
  },
  {
    "text": "database is like teenage sex they're all talking about",
    "start": "68600",
    "end": "77159"
  },
  {
    "text": "it some of them are doing it and and the ones who are doing it are",
    "start": "77159",
    "end": "83600"
  },
  {
    "text": "not doing a very good job so so I'm here today as your own",
    "start": "83600",
    "end": "90720"
  },
  {
    "text": "graph database teenager like whoa uh you",
    "start": "90720",
    "end": "96159"
  },
  {
    "text": "guys are home early uh yeah the the lamp",
    "start": "96159",
    "end": "102159"
  },
  {
    "text": "broke um and uh I guess we're gonna have a",
    "start": "102159",
    "end": "108320"
  },
  {
    "text": "talk okay I'm going to talk about liquid liquid is a relational graph database um",
    "start": "108320",
    "end": "114719"
  },
  {
    "text": "that we built at at LinkedIn um runs about 2 million QPS it's a it's",
    "start": "114719",
    "end": "121200"
  },
  {
    "text": "a pretty standard uh large scale Silicon Valley um uh database system um now uh",
    "start": "121200",
    "end": "129959"
  },
  {
    "text": "as as usual with these things I didn't build this by myself I have a wonderful and talented team of probably 40 people",
    "start": "129959",
    "end": "137120"
  },
  {
    "text": "now who who make this thing a reality but I'm shamelessly going to claim",
    "start": "137120",
    "end": "142519"
  },
  {
    "text": "credit for their work okay so like first question is why did LinkedIn",
    "start": "142519",
    "end": "150760"
  },
  {
    "text": "build a graph database right um now the recruiter who brought me to LinkedIn",
    "start": "150760",
    "end": "157879"
  },
  {
    "text": "explained LinkedIn to me he said look the magic of LinkedIn is in the second degree like your first degree all your",
    "start": "157879",
    "end": "164760"
  },
  {
    "text": "connections you already know who they are like you have your Rolodex and your your email um uh it's not very valuable",
    "start": "164760",
    "end": "173239"
  },
  {
    "text": "um but your second degree is all of the connections that you that you could have",
    "start": "173239",
    "end": "179560"
  },
  {
    "text": "but but maybe don't yet right so like maybe your next job is in your first",
    "start": "179560",
    "end": "185319"
  },
  {
    "text": "degree maybe you'll go work with a f friend but probably your next job is in",
    "start": "185319",
    "end": "190400"
  },
  {
    "text": "your second degree right um okay so what",
    "start": "190400",
    "end": "196080"
  },
  {
    "text": "we're doing fundamentally when when we're looking at LinkedIn is we're browsing a large graph and we're",
    "start": "196080",
    "end": "201440"
  },
  {
    "text": "figuring out um what about that graph is uh interesting to us uh and here's some",
    "start": "201440",
    "end": "208920"
  },
  {
    "text": "of the stuff that comes out of uh the graph database you notice these are all",
    "start": "208920",
    "end": "214560"
  },
  {
    "text": "second deegree connections um so what about a graph is interesting to me well it's some sort of",
    "start": "214560",
    "end": "221680"
  },
  {
    "text": "second-degree connection like maybe we worked at a at the same employer maybe we went to the same school maybe we know",
    "start": "221680",
    "end": "228640"
  },
  {
    "text": "some of the same people right",
    "start": "228640",
    "end": "233799"
  },
  {
    "text": "um okay so so this is just one of three uh graph workloads what we're doing is",
    "start": "233799",
    "end": "241200"
  },
  {
    "text": "graph serving um and uh uh database people would call this this complex",
    "start": "241200",
    "end": "248120"
  },
  {
    "text": "oltp um but what we're doing is we're browsing a graph this is the predominant",
    "start": "248120",
    "end": "254079"
  },
  {
    "text": "application workload uh you know even things like PowerPoint or word what they're doing is they're browsing a",
    "start": "254079",
    "end": "259919"
  },
  {
    "text": "graph of of stuff almost all the time you do a little bit of editing right uh",
    "start": "259919",
    "end": "264960"
  },
  {
    "text": "the important thing about serving is we need to work in human real time right",
    "start": "264960",
    "end": "270120"
  },
  {
    "text": "like about a quarter of a second let it be half a second but it's it's got to be",
    "start": "270120",
    "end": "275560"
  },
  {
    "text": "like that fast um now you could also do graph analytics um database people would just",
    "start": "275560",
    "end": "282800"
  },
  {
    "text": "say complex olap or maybe just olap uh where like you have an analyst typing in",
    "start": "282800",
    "end": "288720"
  },
  {
    "text": "a query and they're happy to wait for for a few minutes or maybe they're running a dashboard um you know and it",
    "start": "288720",
    "end": "295960"
  },
  {
    "text": "runs once an hour and and um prints a you know comes comes up with a",
    "start": "295960",
    "end": "302800"
  },
  {
    "text": "graph for somebody to look at um so there we're looking at something that",
    "start": "302800",
    "end": "307840"
  },
  {
    "text": "scans a whole bunch of the graph and summarizes it and it's going to take you know minutes probably uh and then",
    "start": "307840",
    "end": "315759"
  },
  {
    "text": "there's a third workload which is graph computation things like page rank Bellman Ford um where I want to run an",
    "start": "315759",
    "end": "323400"
  },
  {
    "text": "algorithm uh over the whole graph uh and these things typically take minutes or",
    "start": "323400",
    "end": "328960"
  },
  {
    "text": "even hours uh you know depending on the size of the graph and the algorithm so you know what",
    "start": "328960",
    "end": "334800"
  },
  {
    "text": "we're doing is just graph serving um okay uh handy rule of thumb",
    "start": "334800",
    "end": "342039"
  },
  {
    "text": "and software development never invent something uh that's in a",
    "start": "342039",
    "end": "347639"
  },
  {
    "text": "textbook um so uh all of the background",
    "start": "347639",
    "end": "353280"
  },
  {
    "text": "for this talk and and this product uh is basically textbook computer science",
    "start": "353280",
    "end": "358639"
  },
  {
    "text": "literally uh specifically the relational model and data log um this is actually",
    "start": "358639",
    "end": "364639"
  },
  {
    "text": "the the real textbook that that we use as a reference on the team you can see it's been it's been thumbed",
    "start": "364639",
    "end": "372000"
  },
  {
    "text": "through um okay so let's Jump Right In uh relational graph data I'm going to",
    "start": "372000",
    "end": "377919"
  },
  {
    "text": "throw some SQL at you I'll speak it slowly um uh basically relational graph",
    "start": "377919",
    "end": "384560"
  },
  {
    "text": "data is two tables right I have a table of vertices um and this just mapping",
    "start": "384560",
    "end": "390280"
  },
  {
    "text": "strings to integers that's all it's doing so um a Vertex is represented by a",
    "start": "390280",
    "end": "395560"
  },
  {
    "text": "string inside the database we'd like to represent it with a fixed length integer",
    "start": "395560",
    "end": "400800"
  },
  {
    "text": "that's that's what this does okay now the exciting part I create I have a",
    "start": "400800",
    "end": "406759"
  },
  {
    "text": "table of edges well an edge is just three vertices right and this is a",
    "start": "406759",
    "end": "411919"
  },
  {
    "text": "compound primary key so the edge you you specify it by value and it either exists",
    "start": "411919",
    "end": "418039"
  },
  {
    "text": "or it doesn't exist right it's very simple okay uh pause right here this is",
    "start": "418039",
    "end": "425319"
  },
  {
    "text": "like 90% of the content of this talk right here uh it just so happens like a",
    "start": "425319",
    "end": "431039"
  },
  {
    "text": "lot of things in software that the remaining 10% of the talk will take the other 90% of the",
    "start": "431039",
    "end": "438319"
  },
  {
    "text": "time okay so so let's look at some graph data",
    "start": "439639",
    "end": "446520"
  },
  {
    "text": "right uh what we're talking about is basically just three columns of integers like this and I've shown these guys you",
    "start": "446520",
    "end": "453840"
  },
  {
    "text": "know if this was if this was a a normal SQL database they would be sorted like this um because of the primary key",
    "start": "453840",
    "end": "460319"
  },
  {
    "text": "constraint okay uh so let's think a bit about uh what it's going to be like to",
    "start": "460319",
    "end": "465759"
  },
  {
    "text": "work with this uh so like suppose you start with uh with a bunch of things and",
    "start": "465759",
    "end": "472039"
  },
  {
    "text": "you want to transform them uh you know you want to you want to um uh you know",
    "start": "472039",
    "end": "478360"
  },
  {
    "text": "uh navigate through an Edge you know one Edge for each thing or multiple edges for each thing okay uh you notice the",
    "start": "478360",
    "end": "485199"
  },
  {
    "text": "things are all sorted um and uh you know the subjects are all sorted so this is",
    "start": "485199",
    "end": "491440"
  },
  {
    "text": "great we do a merge join and what we get uh and the output",
    "start": "491440",
    "end": "497360"
  },
  {
    "text": "is no longer sorted it's not even a set um so if we were doing like a complex",
    "start": "497360",
    "end": "504599"
  },
  {
    "text": "query where we do multiple hops you know through a through a path right we would",
    "start": "504599",
    "end": "510080"
  },
  {
    "text": "have to resort this thing uh in order to to keep on going um or you know do",
    "start": "510080",
    "end": "517000"
  },
  {
    "text": "random access um and uh well there's another aspect to",
    "start": "517000",
    "end": "523200"
  },
  {
    "text": "this like this is really small but a any kind of real database um you know the",
    "start": "523200",
    "end": "529920"
  },
  {
    "text": "edge does not contain a lot of information so you're going to have a lot of edges a lot think a trillion",
    "start": "529920",
    "end": "536240"
  },
  {
    "text": "edges right um and I said our workload is browsing right so I have to produce a",
    "start": "536240",
    "end": "544160"
  },
  {
    "text": "screen full of data um for someone to look at and I have to do this in about a quarter of a second um so what I can",
    "start": "544160",
    "end": "552279"
  },
  {
    "text": "tell you then is if I only have a quarter of a second and I'm looking at a trillion things I can't actually scan uh",
    "start": "552279",
    "end": "560880"
  },
  {
    "text": "very many things right like maybe I can I can scan a few hundred thousand maybe",
    "start": "560880",
    "end": "566200"
  },
  {
    "text": "a million things a million edges um but it's",
    "start": "566200",
    "end": "572600"
  },
  {
    "text": "um uh you know we're very limited in the amount of data that we can have as an",
    "start": "572600",
    "end": "578040"
  },
  {
    "text": "intermediate result just by the the nature of the domain right so so now",
    "start": "578040",
    "end": "584240"
  },
  {
    "text": "think about it like so I have an intermediate result you know it's just going to be a bunch of edges everything",
    "start": "584240",
    "end": "589360"
  },
  {
    "text": "is Edges um so I have some intermediate result it's got like a 100, things in it",
    "start": "589360",
    "end": "595839"
  },
  {
    "text": "but I'm doing a lookup into a table of a trillion things right so it it it's",
    "start": "595839",
    "end": "602440"
  },
  {
    "text": "just incredibly improbable that a page that I read for one thing would contain",
    "start": "602440",
    "end": "609040"
  },
  {
    "text": "the answer for the next thing right so just by the law of large numbers you",
    "start": "609040",
    "end": "614800"
  },
  {
    "text": "what you're doing when you when you work with graph data Is Random Access right",
    "start": "614800",
    "end": "621680"
  },
  {
    "text": "and so the the the key Insight here is um we're doing random access at scale",
    "start": "621680",
    "end": "628920"
  },
  {
    "text": "there's absolutely no way around this um so what we're doing what you know the",
    "start": "628920",
    "end": "634800"
  },
  {
    "text": "index structures that we're using are hash tables um and the performance domain that we're working in we're going",
    "start": "634800",
    "end": "641320"
  },
  {
    "text": "to be counting L3 cach misses right uh uh because we're doing Random Access",
    "start": "641320",
    "end": "647600"
  },
  {
    "text": "into memory so the entire graph is held in hash tables in memory um and that's",
    "start": "647600",
    "end": "654440"
  },
  {
    "text": "you know just keep that in your head as we go along",
    "start": "654440",
    "end": "659600"
  },
  {
    "text": "okay uh before we get too much further here's",
    "start": "659600",
    "end": "665240"
  },
  {
    "text": "a question like why uh why only three things why not two why not four seems",
    "start": "665240",
    "end": "670680"
  },
  {
    "text": "like kind of an arbitrary Choice um the first reason it's tractable to index",
    "start": "670680",
    "end": "677560"
  },
  {
    "text": "everything like 3 factorial is six 6X is a reasonable right amplification if",
    "start": "677560",
    "end": "683839"
  },
  {
    "text": "you're careful um so we can just index everything and say look edges are fast",
    "start": "683839",
    "end": "689320"
  },
  {
    "text": "there's no create index um they're just uniformly fast they deliver Random",
    "start": "689320",
    "end": "694639"
  },
  {
    "text": "Access um that's a uh that's a a guarantee that we can make that's super",
    "start": "694639",
    "end": "700360"
  },
  {
    "text": "handy um second of all like as subject predicate object would would kind of",
    "start": "700360",
    "end": "706959"
  },
  {
    "text": "lead you to believe this is how people encode knowledge right so we are we are",
    "start": "706959",
    "end": "713120"
  },
  {
    "text": "building database Machinery that deals with um with knowledge the way people",
    "start": "713120",
    "end": "718920"
  },
  {
    "text": "like to encode it which seems like it ought to be a good idea um and there's a",
    "start": "718920",
    "end": "724160"
  },
  {
    "text": "subset of people computer programmers um and uh they like to use strs and",
    "start": "724160",
    "end": "730480"
  },
  {
    "text": "pointers when they're building a model of the world in an application so um because you know the",
    "start": "730480",
    "end": "737480"
  },
  {
    "text": "whole point of having a database is to build applications with it right uh so",
    "start": "737480",
    "end": "742680"
  },
  {
    "text": "let's go look at that world a little bit okay so you have a you have a triple",
    "start": "742680",
    "end": "748440"
  },
  {
    "text": "like her Melville wrote Moby Dick just a fact right uh and if you're an",
    "start": "748440",
    "end": "754120"
  },
  {
    "text": "application programmer um you're probably going to model this as like well I have a struck author uh and you",
    "start": "754120",
    "end": "761519"
  },
  {
    "text": "know here's the one for Herman Melville um he wrote a book he could have written many books so you know there's a there's",
    "start": "761519",
    "end": "767839"
  },
  {
    "text": "a vector right there um and then one of the books that he wrote is Moby Dick",
    "start": "767839",
    "end": "773079"
  },
  {
    "text": "right and similarly okay the Moby Dick structure it's a book books were written",
    "start": "773079",
    "end": "778480"
  },
  {
    "text": "by uh an author and uh there's the author so when you're programming with",
    "start": "778480",
    "end": "787160"
  },
  {
    "text": "strs and pointers um what you're really doing is you're working with a handbuilt",
    "start": "787160",
    "end": "793079"
  },
  {
    "text": "inverted index of the uh of the underlying relation",
    "start": "793079",
    "end": "798760"
  },
  {
    "text": "right um and",
    "start": "798760",
    "end": "804160"
  },
  {
    "text": "uh okay so well some good news right like this is just a relational database",
    "start": "804160",
    "end": "811720"
  },
  {
    "text": "we can do this with SQL now I'll pause for a few minutes while you guys digest all of this um no",
    "start": "811720",
    "end": "820240"
  },
  {
    "text": "I'm not gonna yes",
    "start": "820240",
    "end": "824920"
  },
  {
    "text": "statement indexes ined handbuilt inverted indexes right",
    "start": "827320",
    "end": "834560"
  },
  {
    "text": "um okay uh okay I've tortured you with SQL enough",
    "start": "834560",
    "end": "839800"
  },
  {
    "text": "um we have a we have a much better uh we have a much better syntax interestingly",
    "start": "839800",
    "end": "845199"
  },
  {
    "text": "it's been sitting there in a textbook for uh for 30 years um it's data log uh",
    "start": "845199",
    "end": "852959"
  },
  {
    "text": "this data log uh that you see on the screen is the same query that the SQL was doing um you see it it it um it has",
    "start": "852959",
    "end": "860839"
  },
  {
    "text": "a natural decomposition into rules um and you know it's it's just sort of a",
    "start": "860839",
    "end": "866440"
  },
  {
    "text": "basic um social Ty type of a thing I'm looking for employers and skills of",
    "start": "866440",
    "end": "873959"
  },
  {
    "text": "friends of friends you know employers and skills in my in my second degree um",
    "start": "873959",
    "end": "880399"
  },
  {
    "text": "so these are rules these are data log rules uh I'm not gonna I'm not going to teach you all of data log but I'm going",
    "start": "880399",
    "end": "886600"
  },
  {
    "text": "to teach you enough that that you won't uh Panic if I if I show you some later on uh so in datalog anything with a",
    "start": "886600",
    "end": "895000"
  },
  {
    "text": "period is a statement of fact and in our data log the",
    "start": "895000",
    "end": "900839"
  },
  {
    "text": "um uh the only thing you can assert is an edge you know at the at the bottom",
    "start": "900839",
    "end": "905959"
  },
  {
    "text": "everything is assertions of edges um so here I'm saying you know user one their name is Scott pretty pretty",
    "start": "905959",
    "end": "912600"
  },
  {
    "text": "straightforward anything with a question mark is a query um underbar is a",
    "start": "912600",
    "end": "917880"
  },
  {
    "text": "variable which just means you know I'm different from all other variables every every underbar is different so all",
    "start": "917880",
    "end": "924000"
  },
  {
    "text": "you're doing here is you're asking you know who's who what is the name of us",
    "start": "924000",
    "end": "929240"
  },
  {
    "text": "one right pretty simple um and I can define a rule like uh here's a rule",
    "start": "929240",
    "end": "936319"
  },
  {
    "text": "called name and the the the rule just evaluates the um right hand side I guess",
    "start": "936319",
    "end": "944040"
  },
  {
    "text": "um you know same sort of thing I can ask uh who has this name or what is the name",
    "start": "944040",
    "end": "950480"
  },
  {
    "text": "of this thing uh just by supplying different variable bindings",
    "start": "950480",
    "end": "956600"
  },
  {
    "text": "um a cool thing that you can do with data log and edges is you can say well",
    "start": "956600",
    "end": "962600"
  },
  {
    "text": "uh user one like what's up with that like all the inbound edges on user one",
    "start": "962600",
    "end": "968399"
  },
  {
    "text": "uh this is a very very typical first step when you're exploring a new",
    "start": "968399",
    "end": "973959"
  },
  {
    "text": "database with a schema that you're not familiar with right uh you find something that you know typically",
    "start": "973959",
    "end": "980120"
  },
  {
    "text": "yourself um and then you go explore um just by looking at the inbound edges and",
    "start": "980120",
    "end": "986120"
  },
  {
    "text": "it's something that's very difficult to do in sequence",
    "start": "986120",
    "end": "990920"
  },
  {
    "text": "okay um so our our our two table",
    "start": "993000",
    "end": "999720"
  },
  {
    "text": "representation actually lost some valuable information um and we need to add this information",
    "start": "999720",
    "end": "1007480"
  },
  {
    "text": "back uh and we're going to do this by by formally defining predicates um so",
    "start": "1007480",
    "end": "1013399"
  },
  {
    "text": "here's a rule called def PR and you have to use def PR to to introduce a predicate um so this is a predicate for",
    "start": "1013399",
    "end": "1020040"
  },
  {
    "text": "title like the title of a book um and you know what the definition says is hey",
    "start": "1020040",
    "end": "1025558"
  },
  {
    "text": "the subject side um a book only has one title so it's cardinality one uh the",
    "start": "1025559",
    "end": "1032839"
  },
  {
    "text": "type of a book well it's just a node um uh and um on the object side uh there's",
    "start": "1032839",
    "end": "1041798"
  },
  {
    "text": "a string a utf8 string so our type is a string and of course many books can have",
    "start": "1041799",
    "end": "1047240"
  },
  {
    "text": "the same title right so zero meaning unlimited cardinality right um so all",
    "start": "1047240",
    "end": "1054280"
  },
  {
    "text": "you have to do to um to uh start using a new kind of predicate is um put this de",
    "start": "1054280",
    "end": "1061640"
  },
  {
    "text": "PR in and then you can you can immediately start using it um so for",
    "start": "1061640",
    "end": "1066960"
  },
  {
    "text": "example book one title is uh Moby Dick um now the the predicate itself is",
    "start": "1066960",
    "end": "1074559"
  },
  {
    "text": "just a node in the graph like any other node um so you can add your own uh",
    "start": "1074559",
    "end": "1080320"
  },
  {
    "text": "metadata to predicates right so for example here I'm saying well there's a",
    "start": "1080320",
    "end": "1085880"
  },
  {
    "text": "kind of a predicate that's like a name like thing right like a title is like a name name is like a name um and so I'm",
    "start": "1085880",
    "end": "1093760"
  },
  {
    "text": "gonna I'm going to identify these as being of type known as right um just",
    "start": "1093760",
    "end": "1100799"
  },
  {
    "text": "writing edges in um and now I can ask queries like this right uh so so what",
    "start": "1100799",
    "end": "1107760"
  },
  {
    "text": "we're saying is well there's a thing U1 I I I don't know much else about it uh",
    "start": "1107760",
    "end": "1113559"
  },
  {
    "text": "it's referred to by an edge with uh some kind of a predicate um and the the kind",
    "start": "1113559",
    "end": "1120159"
  },
  {
    "text": "of predicate is anything referred to by an edge with a type known as right so",
    "start": "1120159",
    "end": "1126240"
  },
  {
    "text": "I'm able to ask for I'm able to Define what it is you know what what a name like thing is and I'm able to ask for it",
    "start": "1126240",
    "end": "1133360"
  },
  {
    "text": "um in a query and if you look at like what an application does uh very often this is exact what they need right like",
    "start": "1133360",
    "end": "1140360"
  },
  {
    "text": "I have a little card it has a name it has a picture and so forth I use this to",
    "start": "1140360",
    "end": "1145480"
  },
  {
    "text": "display anything I don't care as long as it has a name and a picture and you know",
    "start": "1145480",
    "end": "1150840"
  },
  {
    "text": "maybe some some descriptive text right um okay so so that's",
    "start": "1150840",
    "end": "1157400"
  },
  {
    "text": "predicates um now there's we're not",
    "start": "1157400",
    "end": "1162440"
  },
  {
    "text": "quite done yet because the the predicate is is a simple binary relationship right",
    "start": "1162440",
    "end": "1168960"
  },
  {
    "text": "but most relationships in the real world are not simple binary relationships uh",
    "start": "1168960",
    "end": "1175559"
  },
  {
    "text": "let let me give you some examples okay grammar is more than subject predicate and object right",
    "start": "1175559",
    "end": "1182520"
  },
  {
    "text": "um and here are some real here are some real relationships that are not subject predicate and object um uh you work for",
    "start": "1182520",
    "end": "1189960"
  },
  {
    "text": "a company that's employer employee and a start date right if I don't add the",
    "start": "1189960",
    "end": "1195559"
  },
  {
    "text": "start date then um I can't represent a common situation in the world where you work for a company and then you quit and",
    "start": "1195559",
    "end": "1202679"
  },
  {
    "text": "you go work for another company and then you quit and you go back and work for the first company and that's actually a",
    "start": "1202679",
    "end": "1209000"
  },
  {
    "text": "super important piece of data right like LinkedIn calls this a boomerang right",
    "start": "1209000",
    "end": "1214640"
  },
  {
    "text": "um uh similarly um a marriage spouse spouse start date right you have people",
    "start": "1214640",
    "end": "1220640"
  },
  {
    "text": "like Elizabeth Taylor who are married a lot sometimes to the same people again if you want to model the data um you",
    "start": "1220640",
    "end": "1227640"
  },
  {
    "text": "need more than a binary relationship uh another one actor role",
    "start": "1227640",
    "end": "1232799"
  },
  {
    "text": "and film endorser Endy skill uh eny relationships happen all over the place",
    "start": "1232799",
    "end": "1240720"
  },
  {
    "text": "uh and um you know we need support for these guys in a graph",
    "start": "1240720",
    "end": "1246120"
  },
  {
    "text": "database um and like one more thing uh a lot of relationships have attributes",
    "start": "1246120",
    "end": "1252919"
  },
  {
    "text": "that describe them that are not part of the identity like a super common one in our world is a score like okay this",
    "start": "1252919",
    "end": "1260240"
  },
  {
    "text": "relationship exists but how important is it like Herman Melville wrote a book but",
    "start": "1260240",
    "end": "1265440"
  },
  {
    "text": "what's his most important book which one should you show first um uh other things might be like a stop",
    "start": "1265440",
    "end": "1273000"
  },
  {
    "text": "date um or maybe a title uh something like that",
    "start": "1273000",
    "end": "1278520"
  },
  {
    "text": "okay um well the basic intuition here is like H if if I have an edge and my Edge",
    "start": "1278520",
    "end": "1286159"
  },
  {
    "text": "traversal is fast then it's not really objectionable just to add an extra hop right like you know if",
    "start": "1286159",
    "end": "1294600"
  },
  {
    "text": "if if going across one Edge is going to cost you like two L3 cach misses okay",
    "start": "1294600",
    "end": "1300200"
  },
  {
    "text": "going across two is going to cost you four I mean that's not outrageous um",
    "start": "1300200",
    "end": "1306200"
  },
  {
    "text": "kind of like honestly represents the structure here um so you know your your",
    "start": "1306200",
    "end": "1314360"
  },
  {
    "text": "big question is well what do I use for the identity of of this um Central node",
    "start": "1314360",
    "end": "1321559"
  },
  {
    "text": "right like if I just make one up um well now this eny relationship doesn't behave",
    "start": "1321559",
    "end": "1328360"
  },
  {
    "text": "like an edge right um like you can get duplicates right uh and if you have",
    "start": "1328360",
    "end": "1334720"
  },
  {
    "text": "duplicates then you might add interesting data to the wrong one um uh",
    "start": "1334720",
    "end": "1340000"
  },
  {
    "text": "it's it's not really um uh an effective way to work uh okay but we can actually solve",
    "start": "1340000",
    "end": "1349919"
  },
  {
    "text": "this problem uh and we're just going to have a function which generates us a",
    "start": "1349919",
    "end": "1356600"
  },
  {
    "text": "string which is the identity of this Central node and and you can kind of",
    "start": "1356600",
    "end": "1361640"
  },
  {
    "text": "read the string and and get how this works like I'm going to take all pairs of object and predicate and I'm going to",
    "start": "1361640",
    "end": "1368880"
  },
  {
    "text": "sort them and that's the uh that's the identity of this Hub this Hub node right",
    "start": "1368880",
    "end": "1375640"
  },
  {
    "text": "um and once we figure out that the way edges work um you know now enery um",
    "start": "1375640",
    "end": "1382919"
  },
  {
    "text": "relationships work just like edges right um so we kind of get this for free and",
    "start": "1382919",
    "end": "1389400"
  },
  {
    "text": "you know you can you can annotate it's you can do anything you want with a central node it's just a node it's not",
    "start": "1389400",
    "end": "1395480"
  },
  {
    "text": "going to bite anybody um so you can put whatever data you want on there and the",
    "start": "1395480",
    "end": "1401240"
  },
  {
    "text": "data is just edges we don't need to come up with uh some sort of fancy schema to",
    "start": "1401240",
    "end": "1407720"
  },
  {
    "text": "um talk about this stuff okay um so yeah so liquid does",
    "start": "1407720",
    "end": "1414640"
  },
  {
    "text": "this with what we call compound predicates and um you know uh this is",
    "start": "1414640",
    "end": "1419960"
  },
  {
    "text": "just the syntax of that working um and um okay uh well what is this",
    "start": "1419960",
    "end": "1429840"
  },
  {
    "text": "thing that we built uh this has been known to relational database types for a long time I think in like the 70s Peter",
    "start": "1429840",
    "end": "1437039"
  },
  {
    "text": "Chen uh came up with this notion of entity relationship modeling and and this thing that we've come up with is",
    "start": "1437039",
    "end": "1442960"
  },
  {
    "text": "just a relationship table right says well there's a compound primary key of actor role and film um and then you have",
    "start": "1442960",
    "end": "1450880"
  },
  {
    "text": "some some attribute columns you know whatever you want um uh so this thing that we invented is",
    "start": "1450880",
    "end": "1459039"
  },
  {
    "text": "actually um completely normal well understood uh 40-year-old uh sequel",
    "start": "1459039",
    "end": "1467840"
  },
  {
    "text": "there's a nice bonus that you get out of this right suppose we wanted to do a",
    "start": "1468679",
    "end": "1473720"
  },
  {
    "text": "symmetric relationship like a mutual friend right uh well you'd start off in SQL it's like okay yeah I have two",
    "start": "1473720",
    "end": "1480960"
  },
  {
    "text": "friends like friend one and friend two and um okay so now I have Bob and",
    "start": "1480960",
    "end": "1486720"
  },
  {
    "text": "Jane they're mutual friends H well I mean is it Bob and Jane or is it Jane and Bob right um there two",
    "start": "1486720",
    "end": "1495120"
  },
  {
    "text": "different ways to represent that so pretty quickly you're going to reach for your plsql hammer and you're going to",
    "start": "1495120",
    "end": "1501520"
  },
  {
    "text": "say okay well friend one has got to be less than friend two that's the way we",
    "start": "1501520",
    "end": "1506960"
  },
  {
    "text": "we know uh you know the identity of the mutual friendship right",
    "start": "1506960",
    "end": "1512279"
  },
  {
    "text": "um okay but if we're um if we're in this",
    "start": "1512279",
    "end": "1517399"
  },
  {
    "text": "if we're in this eny um relationship world what I'd observe is like well the",
    "start": "1517399",
    "end": "1523399"
  },
  {
    "text": "if you just had two uh friend edges um it's in fact structurally perfectly",
    "start": "1523399",
    "end": "1530960"
  },
  {
    "text": "symmetrical right it's the structure expresses exactly what we want to express um",
    "start": "1530960",
    "end": "1537399"
  },
  {
    "text": "furthermore uh our little algorithm for generating the primary key works uh",
    "start": "1537399",
    "end": "1543120"
  },
  {
    "text": "exactly right right we sorted um the the the predicates of the same Bob sorts",
    "start": "1543120",
    "end": "1548559"
  },
  {
    "text": "ahead of Jane uh so now we have a primary key um so that's pretty cool",
    "start": "1548559",
    "end": "1554279"
  },
  {
    "text": "right like this is a this is actually something SQL can't do um and you know",
    "start": "1554279",
    "end": "1561039"
  },
  {
    "text": "uh here's a little bit of uh data log uh and I'm showing you I'm asserting The",
    "start": "1561039",
    "end": "1566960"
  },
  {
    "text": "Edge twice in both different orders and then at the end I ask for the inbound edges in a bob and you can see there's",
    "start": "1566960",
    "end": "1572919"
  },
  {
    "text": "only one inbound Edge right so there's um just a unique Mutual",
    "start": "1572919",
    "end": "1579720"
  },
  {
    "text": "friendship okay so now a question you might ask here is like well what about",
    "start": "1579720",
    "end": "1585080"
  },
  {
    "text": "nodes like uh we've only talked about edges that's kind of on purpose nodes",
    "start": "1585080",
    "end": "1590880"
  },
  {
    "text": "are just immutable Springs immutable strings like their primary",
    "start": "1590880",
    "end": "1596200"
  },
  {
    "text": "Keys um they represent entities that's it",
    "start": "1596200",
    "end": "1603000"
  },
  {
    "text": "um okay sometimes they parse like you you could have a node that's like seven",
    "start": "1603000",
    "end": "1609399"
  },
  {
    "text": "you know seven has a meaning as like an integer um and so when we give that node a type like int uh it just means I I",
    "start": "1609399",
    "end": "1617679"
  },
  {
    "text": "want something that parses as an integer um so a question is like well why not",
    "start": "1617679",
    "end": "1625240"
  },
  {
    "text": "more like why don't we put a bunch more stuff in inside our node um and I mean",
    "start": "1625240",
    "end": "1632880"
  },
  {
    "text": "if you if you have something that has like node properties like a question to",
    "start": "1632880",
    "end": "1637960"
  },
  {
    "text": "ask is like why even have edges right like I can have a node be like an author",
    "start": "1637960",
    "end": "1643320"
  },
  {
    "text": "and another node be like a book and the book would have like a a little Vector of auth identities in there I mean why",
    "start": "1643320",
    "end": "1650720"
  },
  {
    "text": "not just do stuff like that uh okay uh we tried this back in",
    "start": "1650720",
    "end": "1657720"
  },
  {
    "text": "the 90s I I I was I was involved with this um ODS um they don't work very",
    "start": "1657720",
    "end": "1665480"
  },
  {
    "text": "well uh so so in this world say we have",
    "start": "1665480",
    "end": "1670600"
  },
  {
    "text": "a person right um that's a base class people have a name or something like that and then we have a person who's an",
    "start": "1670600",
    "end": "1677440"
  },
  {
    "text": "author right that's a subass we're we're just working on structure extension here",
    "start": "1677440",
    "end": "1683120"
  },
  {
    "text": "subclassing that like okay no one could object to that right okay what if I have",
    "start": "1683120",
    "end": "1689000"
  },
  {
    "text": "a person who's an editor I can solve it the same way um okay what if I have a",
    "start": "1689000",
    "end": "1696360"
  },
  {
    "text": "person who's an editor and an author well now I have kind of a problem because either I I figure out some sort",
    "start": "1696360",
    "end": "1703799"
  },
  {
    "text": "of um multiple inheritance thing which never worked very well or I have two",
    "start": "1703799",
    "end": "1711720"
  },
  {
    "text": "different identities you know two different structs one for person as an author and one for person as an editor",
    "start": "1711720",
    "end": "1718600"
  },
  {
    "text": "and now equality doesn't work the way you think it ought to work right um but",
    "start": "1718600",
    "end": "1724799"
  },
  {
    "text": "it gets worse like you're making an assumption here you know an an ontological",
    "start": "1724799",
    "end": "1730600"
  },
  {
    "text": "assumption that all authors are people um and uh that's not actually the case",
    "start": "1730600",
    "end": "1738799"
  },
  {
    "text": "um so back in my uh history starting with graph databases worked at metaweb",
    "start": "1738799",
    "end": "1745360"
  },
  {
    "text": "um kept discovering that the Beatles a a rock group were getting typed as a",
    "start": "1745360",
    "end": "1751640"
  },
  {
    "text": "person right well it turns out that the we were trying to do a um you know an",
    "start": "1751640",
    "end": "1758279"
  },
  {
    "text": "inheritance bace type system uh we said well an author that's a subass of a person um and it turns out the Beatles",
    "start": "1758279",
    "end": "1766440"
  },
  {
    "text": "authored a book like their book in the world and you know they have a title and a name and the author's name says the",
    "start": "1766440",
    "end": "1772480"
  },
  {
    "text": "Beatles it's a fact um I'm not making this up this is Amazon",
    "start": "1772480",
    "end": "1779240"
  },
  {
    "text": "right now right so the the notion that you're going to have a single",
    "start": "1779240",
    "end": "1785600"
  },
  {
    "text": "ontology um that is g to support everything is um really really badly",
    "start": "1785600",
    "end": "1792480"
  },
  {
    "text": "broken um there's a there's another interesting problem with it which is",
    "start": "1792480",
    "end": "1797519"
  },
  {
    "text": "like the RO of your hierarchy becomes a gigantic single point of failure right",
    "start": "1797519",
    "end": "1802720"
  },
  {
    "text": "like you do some some uh clever editing up at the root and suddenly 2third of",
    "start": "1802720",
    "end": "1809000"
  },
  {
    "text": "your of your uh database just disappears right um so uh the nice thing about a",
    "start": "1809000",
    "end": "1817159"
  },
  {
    "text": "graph about the graph structure is it doesn't care like we're just recording facts uh the triples don't need to have",
    "start": "1817159",
    "end": "1824159"
  },
  {
    "text": "a particular order of structure Fields they just exist they don't do anybody harm um so authors editors astronauts um",
    "start": "1824159",
    "end": "1834399"
  },
  {
    "text": "all can cluster around the same identity without any conflict at",
    "start": "1834399",
    "end": "1840320"
  },
  {
    "text": "all okay so that's that's sort of the data model I want to talk a little bit about query evaluation uh just a couple",
    "start": "1840320",
    "end": "1847880"
  },
  {
    "text": "uh a couple details um uh the first problem is cross products uh and the",
    "start": "1847880",
    "end": "1856120"
  },
  {
    "text": "second problem is static planning and and these are both uh um kind of endemic",
    "start": "1856120",
    "end": "1862039"
  },
  {
    "text": "to SQL um okay uh worst case optimal joins",
    "start": "1862039",
    "end": "1869240"
  },
  {
    "text": "super interesting big giant topic you can go search for that on uh Google",
    "start": "1869240",
    "end": "1874320"
  },
  {
    "text": "Scholar or something and and read about it it's very relevant to a social graph kind of a a workload um but it would be",
    "start": "1874320",
    "end": "1882559"
  },
  {
    "text": "a whole another talk um Okay so so let's look at a cross",
    "start": "1882559",
    "end": "1889559"
  },
  {
    "text": "product so I'm going to use a um a predicate like knows you know a knows b",
    "start": "1889559",
    "end": "1895880"
  },
  {
    "text": "b knows a so um there's an edge okay now I'm going to define a rule",
    "start": "1895880",
    "end": "1903000"
  },
  {
    "text": "that's bidirectional right so I I just ask you know uh Knows X Y is either X",
    "start": "1903000",
    "end": "1909519"
  },
  {
    "text": "knows y or Y Knows X right and now I'm going to say show me you know who knows",
    "start": "1909519",
    "end": "1915559"
  },
  {
    "text": "who in the whole database uh and get two results right a knows B and B knows a um",
    "start": "1915559",
    "end": "1922080"
  },
  {
    "text": "the simplest cross product that I could come up with okay but if I look at the edges there's this one Edge right okay",
    "start": "1922080",
    "end": "1930760"
  },
  {
    "text": "why is this a big deal well we're doing complex queries we're doing complex queries of many to many",
    "start": "1930760",
    "end": "1938080"
  },
  {
    "text": "relationships um every time you have you introduce a cross product you're",
    "start": "1938080",
    "end": "1943880"
  },
  {
    "text": "multiplying the size uh of your result by by some uh constant Factor 2 three",
    "start": "1943880",
    "end": "1950880"
  },
  {
    "text": "five 10 something like that so it's really really easy to get results that",
    "start": "1950880",
    "end": "1957080"
  },
  {
    "text": "are a 100 times the size of the of the actual edges right um if you're if",
    "start": "1957080",
    "end": "1964279"
  },
  {
    "text": "you're doing a complex query um and the like why do we care well uh inside a",
    "start": "1964279",
    "end": "1972440"
  },
  {
    "text": "database we do lots of clever stuff to avoid materializing cross products because",
    "start": "1972440",
    "end": "1978360"
  },
  {
    "text": "it's really hard if you have n time M things you wind up doing n time M work",
    "start": "1978360",
    "end": "1984720"
  },
  {
    "text": "and and that turns out to be slow right and uh you know key Point here is like the the application has exactly the same",
    "start": "1984720",
    "end": "1991360"
  },
  {
    "text": "problem uh they don't want to do nend times M work",
    "start": "1991360",
    "end": "1996360"
  },
  {
    "text": "either okay uh so how does this how does this play out um uh what we need is a",
    "start": "1996559",
    "end": "2003919"
  },
  {
    "text": "subgraph return so uh typically in SQL your return return SQL only returns you",
    "start": "2003919",
    "end": "2009399"
  },
  {
    "text": "a single table right uh so a subgraph return I I just want to return multiple",
    "start": "2009399",
    "end": "2015279"
  },
  {
    "text": "tables right so you can think of this as um I want to return one row in every",
    "start": "2015279",
    "end": "2022519"
  },
  {
    "text": "relationship table that matched right um",
    "start": "2022519",
    "end": "2027639"
  },
  {
    "text": "and I can stitch this stuff together it's it's a relational algebra tree like",
    "start": "2027639",
    "end": "2032679"
  },
  {
    "text": "what we have inside a SQL engine um and really I only need two things in the",
    "start": "2032679",
    "end": "2038519"
  },
  {
    "text": "tree I need cross products um and I need outer joins right so like if you're",
    "start": "2038519",
    "end": "2044639"
  },
  {
    "text": "processing this data as a um as an application developer you're building up",
    "start": "2044639",
    "end": "2050560"
  },
  {
    "text": "a graph of of people and skills and uh employers um so you know you're you're",
    "start": "2050560",
    "end": "2058599"
  },
  {
    "text": "going to have some sort of a loop where you say oh yeah person 23 do I have one for that uh no okay I'm going to make",
    "start": "2058599",
    "end": "2065158"
  },
  {
    "text": "one um okay skill seven do I have one for those okay I'm going to create one",
    "start": "2065159",
    "end": "2070358"
  },
  {
    "text": "now you know 20 the struct for 23 is going to point at the struct for seven in the in the correct offset um okay",
    "start": "2070359",
    "end": "2077800"
  },
  {
    "text": "that thing that you're doing with the hash table lookup to see if you have one that's an outer join that's all that's",
    "start": "2077800",
    "end": "2083839"
  },
  {
    "text": "all it is right it's nothing mysterious um okay Dynamic",
    "start": "2083839",
    "end": "2091158"
  },
  {
    "text": "planning uh let's look at a really simple query um this is graph distances",
    "start": "2091159",
    "end": "2096760"
  },
  {
    "text": "three it's it's relevant to our to our workload um and it's just three hops",
    "start": "2096760",
    "end": "2102640"
  },
  {
    "text": "right you know uh a is connected to B is connected to C um that's all it is so I",
    "start": "2102640",
    "end": "2108359"
  },
  {
    "text": "want to you know the the the workload is actually I want to know if Alice is three hops from Bob",
    "start": "2108359",
    "end": "2115599"
  },
  {
    "text": "right um okay there are only four possible plans in a sequential world",
    "start": "2115599",
    "end": "2122200"
  },
  {
    "text": "right I can go left left left from Alice I can go left left right I can go left",
    "start": "2122200",
    "end": "2129400"
  },
  {
    "text": "right right or I can go right right right right um the only way the only",
    "start": "2129400",
    "end": "2134599"
  },
  {
    "text": "only ways you can do this query none of these plans are optimal for all data",
    "start": "2134599",
    "end": "2141520"
  },
  {
    "text": "right um and we're doing self-joins so all of our statistics to",
    "start": "2141520",
    "end": "2148200"
  },
  {
    "text": "to to our statistics uh each Edge constraint in this query looks identical",
    "start": "2148200",
    "end": "2154319"
  },
  {
    "text": "they're they're all the same right um but what makes the different is like what data is in the",
    "start": "2154319",
    "end": "2160720"
  },
  {
    "text": "graph now an observation here is uh unlike in a sorted storage World um in a",
    "start": "2160720",
    "end": "2168920"
  },
  {
    "text": "hashtable storage World our set sizes are available in constant time like I can do a hash lookup and I can know how",
    "start": "2168920",
    "end": "2175720"
  },
  {
    "text": "big the set that I'm going to read is um if I'm storing stuff in a b tree like I",
    "start": "2175720",
    "end": "2181280"
  },
  {
    "text": "B search to find the beginning of it and then I have to be search to find the end right or I can just scan it",
    "start": "2181280",
    "end": "2188200"
  },
  {
    "text": "um but it's it's far more expensive to find out how big a set is okay so what does this look like um",
    "start": "2188200",
    "end": "2196599"
  },
  {
    "text": "we just hand coded the um the four plans um you can see them on the chart there",
    "start": "2196599",
    "end": "2203520"
  },
  {
    "text": "uh and and you can see like there's this kind of scallop thing with with four scallops that's where uh where each plan",
    "start": "2203520",
    "end": "2211040"
  },
  {
    "text": "is optimal right um now the dynamic plan",
    "start": "2211040",
    "end": "2217119"
  },
  {
    "text": "uh you can see it's uh it's not quite as as good as perfectly optimal because it",
    "start": "2217119",
    "end": "2222200"
  },
  {
    "text": "costs you a little bit to figure out how to use it right like we're we're GNA say",
    "start": "2222200",
    "end": "2227520"
  },
  {
    "text": "okay how big is the fan out from Bob how big is the fan out from Alice okay pick the smaller one expand that did that get",
    "start": "2227520",
    "end": "2234720"
  },
  {
    "text": "super huge right so we have to we have to do some work uh to to figure things",
    "start": "2234720",
    "end": "2239920"
  },
  {
    "text": "out um but we can do that work it's tractable to do that work in this",
    "start": "2239920",
    "end": "2246000"
  },
  {
    "text": "indexing domain and and you get a query evaluation performance that is um uh",
    "start": "2246000",
    "end": "2254800"
  },
  {
    "text": "pretty close to Optimal in all four domains right",
    "start": "2254800",
    "end": "2261160"
  },
  {
    "text": "um okay so I'm I'm kind of winding up uh",
    "start": "2261160",
    "end": "2267200"
  },
  {
    "text": "what I want to do what what I want to leave you with is a a formal definition for what a graph database",
    "start": "2267200",
    "end": "2274200"
  },
  {
    "text": "is um this is not as racy as the intro um okay graph database is an",
    "start": "2274200",
    "end": "2281720"
  },
  {
    "text": "implementation of the relational model with four properties okay all relationships are",
    "start": "2281720",
    "end": "2288880"
  },
  {
    "text": "equal everything is an edge um if you think about like a typical SQL database",
    "start": "2288880",
    "end": "2296200"
  },
  {
    "text": "um if you're a relationship that is in one table you're first class right it's",
    "start": "2296200",
    "end": "2301560"
  },
  {
    "text": "super nice like I do a b search I get the row and I have this whole relationship right there you know",
    "start": "2301560",
    "end": "2307560"
  },
  {
    "text": "basically for free but if you're a relationship that exists across tables like I have to do a join um you're",
    "start": "2307560",
    "end": "2314560"
  },
  {
    "text": "really second class joining is super slow um so second class that way and",
    "start": "2314560",
    "end": "2322280"
  },
  {
    "text": "semantically cql doesn't really keep track of what joins were intended by the user right SQL will happily say yeah",
    "start": "2322280",
    "end": "2329800"
  },
  {
    "text": "you're joining depth and fathoms to degrees Celsius you know um probably",
    "start": "2329800",
    "end": "2336079"
  },
  {
    "text": "okay um so in the graph database everything is an edge and the edge is exactly what the",
    "start": "2336079",
    "end": "2342359"
  },
  {
    "text": "user intended those are the joins that the user intended",
    "start": "2342359",
    "end": "2347680"
  },
  {
    "text": "um if everything is going to be an edge you're going to have a lot of edges it better be fast right if it's not",
    "start": "2347680",
    "end": "2355520"
  },
  {
    "text": "constant time and fast and and and by that I mean like three L3 cache misses",
    "start": "2355520",
    "end": "2362160"
  },
  {
    "text": "well as your database gets bigger your performance gets slower uh ultimately uh",
    "start": "2362160",
    "end": "2368560"
  },
  {
    "text": "it's not going to be worthwhile having a big graph you want a smaller graph that performs better right um that turns into",
    "start": "2368560",
    "end": "2376880"
  },
  {
    "text": "harder to manage okay query results are a subgraph",
    "start": "2376880",
    "end": "2383079"
  },
  {
    "text": "uh if I'm going to do have a big graph with a lot of edgs I want to ask complex",
    "start": "2383079",
    "end": "2388119"
  },
  {
    "text": "queries of it I need to return structured results that the application actually wants to",
    "start": "2388119",
    "end": "2395119"
  },
  {
    "text": "consume and lastly schema change is constant time uh if you think of it",
    "start": "2395119",
    "end": "2402280"
  },
  {
    "text": "like a general model for a serving system it's a materialized view right like I did some fancy query and then I",
    "start": "2402280",
    "end": "2408319"
  },
  {
    "text": "just want to save it and then um you know when you ask something I just look up a row and give it back to you um so",
    "start": "2408319",
    "end": "2416920"
  },
  {
    "text": "what we're saying with this is uh uh no you can't cheat um uh I need to be able",
    "start": "2416920",
    "end": "2423760"
  },
  {
    "text": "to show up with uh with a new kind of predicate and just start using it at full speed this can't turn into any kind",
    "start": "2423760",
    "end": "2430640"
  },
  {
    "text": "of like alter table fire drill underneath the surface in the",
    "start": "2430640",
    "end": "2436040"
  },
  {
    "text": "implementation uh okay that's uh that's it that's my proposed definition for a graph database clearly I I disagree with",
    "start": "2436040",
    "end": "2443599"
  },
  {
    "text": "a lot of the world uh so we'll see how that turns out uh so I want to do some uh just a",
    "start": "2443599",
    "end": "2450440"
  },
  {
    "text": "brief comparison walk through um uh so first all versus SQL well there's no",
    "start": "2450440",
    "end": "2456560"
  },
  {
    "text": "denormalization a is perfectly normalized it is in fifth normal form and you can't expr",
    "start": "2456560",
    "end": "2464440"
  },
  {
    "text": "denormalization there are no mulls or trary logic like edges either exist or they don't um and if you introduce an",
    "start": "2464440",
    "end": "2472960"
  },
  {
    "text": "Unbound variable we're going to force you to give it a binding so uh uh if you",
    "start": "2472960",
    "end": "2479280"
  },
  {
    "text": "have like a a a default uh quantity you know you get to decide is it zero is it",
    "start": "2479280",
    "end": "2486319"
  },
  {
    "text": "minant is it Max int is it one uh it depends you know which is appropriate depends on what you're doing with it um",
    "start": "2486319",
    "end": "2493960"
  },
  {
    "text": "but we we force you to make that decision explicitly so now there's no trary logic right uh which is a big pain",
    "start": "2493960",
    "end": "2503319"
  },
  {
    "text": "um we can do constraint through the predicate so in SQL a predicate is",
    "start": "2503319",
    "end": "2508800"
  },
  {
    "text": "typically a column roughly um and uh well you're welcome to use the catalog",
    "start": "2508800",
    "end": "2515599"
  },
  {
    "text": "table um but it's hard to use the catalog table uh meaningfully in a query",
    "start": "2515599",
    "end": "2521599"
  },
  {
    "text": "uh so typically to do something like this in SQL you need to like query the catalog figure it out and then you",
    "start": "2521599",
    "end": "2528079"
  },
  {
    "text": "generate another SQL query um uh remember so constraining through",
    "start": "2528079",
    "end": "2534520"
  },
  {
    "text": "the predicate is like this predicate is a name like thing right um You can",
    "start": "2534520",
    "end": "2540839"
  },
  {
    "text": "explore all the incident edges um on on any entity um so you know you have a",
    "start": "2540839",
    "end": "2547640"
  },
  {
    "text": "ticker symbol Microsoft that's in the graph somewhere you can go start",
    "start": "2547640",
    "end": "2553559"
  },
  {
    "text": "exploring you can do symmetric relationships and you have subgraph",
    "start": "2553559",
    "end": "2559160"
  },
  {
    "text": "results okay rdf um okay the relational model that's",
    "start": "2559160",
    "end": "2566359"
  },
  {
    "text": "pretty cool um it's been 40 years we've had 20 years of no SQL there really",
    "start": "2566359",
    "end": "2573160"
  },
  {
    "text": "isn't much of a contender right uh we did not invent a query language um I",
    "start": "2573160",
    "end": "2580400"
  },
  {
    "text": "highly recommend that uh we have a much simpler",
    "start": "2580400",
    "end": "2586359"
  },
  {
    "text": "Edge we have first class schema um that is much simpler than owl like you you've",
    "start": "2586359",
    "end": "2593640"
  },
  {
    "text": "seen all the moving pieces in the schema uh in this talk um we can do n",
    "start": "2593640",
    "end": "2600520"
  },
  {
    "text": "relationships and we can do symmetric relationships and we have composable",
    "start": "2600520",
    "end": "2606079"
  },
  {
    "text": "rules and lastly versus property graphs relational",
    "start": "2606079",
    "end": "2613079"
  },
  {
    "text": "model didn't invent a query language um we have a first class schema for",
    "start": "2613079",
    "end": "2618960"
  },
  {
    "text": "everything uh you can constrain through the predicate there's no separate property",
    "start": "2618960",
    "end": "2626280"
  },
  {
    "text": "schema right everything is just edges uh there's no o node problems um",
    "start": "2626280",
    "end": "2634480"
  },
  {
    "text": "so we just make the decision for you you can't put any stuff in a node just use",
    "start": "2634480",
    "end": "2640000"
  },
  {
    "text": "edges uh n relationships again super",
    "start": "2640000",
    "end": "2645079"
  },
  {
    "text": "common composable rules okay so you know what's the what's",
    "start": "2645079",
    "end": "2652520"
  },
  {
    "text": "the future here uh a lot of people think that the the future of data is Big",
    "start": "2652520",
    "end": "2658240"
  },
  {
    "text": "graphs um okay if the future of data is Big graphs then I think the the future",
    "start": "2658240",
    "end": "2664240"
  },
  {
    "text": "of applications is Big queries right you ought to be able to to say hey uh",
    "start": "2664240",
    "end": "2672559"
  },
  {
    "text": "here's all the data that I want to put on a page you know here's a description of it go get it for me",
    "start": "2672559",
    "end": "2678960"
  },
  {
    "text": "um and uh what I you know even if I need to do",
    "start": "2678960",
    "end": "2684319"
  },
  {
    "text": "this uh I'm doing thousands of joins in uh real time human real time okay",
    "start": "2684319",
    "end": "2692920"
  },
  {
    "text": "so uh I hope that this encourages you to to or gives you tools to make good",
    "start": "2692920",
    "end": "2699119"
  },
  {
    "text": "choices in the world and I'm ready to take",
    "start": "2699119",
    "end": "2704200"
  },
  {
    "text": "questions thank you my question is in L I believe there",
    "start": "2711800",
    "end": "2717880"
  },
  {
    "text": "is a feature there sorry could you could you repeat",
    "start": "2717880",
    "end": "2723880"
  },
  {
    "text": "that so there there's a feature in I believe where you can have a representation like I am 80% good in",
    "start": "2723880",
    "end": "2731359"
  },
  {
    "text": "Java and in Javas or something like that so how do you add that we in these edges",
    "start": "2731359",
    "end": "2738960"
  },
  {
    "text": "oh yeah you you would you would have a uh a compound relationship with a skill",
    "start": "2738960",
    "end": "2744079"
  },
  {
    "text": "so you have that hop in the middle um and then you just add a score Edge",
    "start": "2744079",
    "end": "2749160"
  },
  {
    "text": "whatever whatever you want a floating point or an integer score um yeah",
    "start": "2749160",
    "end": "2757119"
  },
  {
    "text": "questions I have one uh do you put any limits on fan out either on the query",
    "start": "2761839",
    "end": "2768800"
  },
  {
    "text": "engine part or in the representation uh there are no limits on",
    "start": "2768800",
    "end": "2774000"
  },
  {
    "text": "the fan out if you have a um so you know um naturally in a social graph you",
    "start": "2774000",
    "end": "2781400"
  },
  {
    "text": "you're going to experience Q right so like I I don't have very many followers",
    "start": "2781400",
    "end": "2786800"
  },
  {
    "text": "uh you know a few hundred Bill Gates has 20 million followers right uh you know that's not a normal distribution it",
    "start": "2786800",
    "end": "2794040"
  },
  {
    "text": "would be a zip distribution um that's kind of a a benefit of uh the graph",
    "start": "2794040",
    "end": "2800800"
  },
  {
    "text": "representation is you can represent stuff like that um no the implication is",
    "start": "2800800",
    "end": "2806319"
  },
  {
    "text": "your query eval better be able to deal with skew right like if you have a bunch",
    "start": "2806319",
    "end": "2811480"
  },
  {
    "text": "of of people and you're looking at the fan out from followers you know it might be 200 700 9900 200 20 million uh well",
    "start": "2811480",
    "end": "2821960"
  },
  {
    "text": "when you get the 20 million uh probably time for a different query",
    "start": "2821960",
    "end": "2827000"
  },
  {
    "text": "plan I would like to understand what use cases would you recomend to use graph",
    "start": "2833319",
    "end": "2839640"
  },
  {
    "text": "database like we have um we may have different options or approaches there",
    "start": "2839640",
    "end": "2845680"
  },
  {
    "text": "like or big data which also help us to uh",
    "start": "2845680",
    "end": "2851640"
  },
  {
    "text": "search as with some of the data joints",
    "start": "2851640",
    "end": "2857160"
  },
  {
    "text": "and each may have it pro and cons like",
    "start": "2857160",
    "end": "2862200"
  },
  {
    "text": "for specifically looking foruse cases that could be the",
    "start": "2862200",
    "end": "2869119"
  },
  {
    "text": "optimal okay uh so uh what you know what what are the use cases what are what are",
    "start": "2869119",
    "end": "2874359"
  },
  {
    "text": "the pros and cons um so for the data model itself for how to model data uh I",
    "start": "2874359",
    "end": "2881040"
  },
  {
    "text": "I don't think there are pros and cons I think the the the graph is just better um and it's it's isomorphic to entity",
    "start": "2881040",
    "end": "2888720"
  },
  {
    "text": "relationship so if if you wanted to do normalized entity relationship data",
    "start": "2888720",
    "end": "2893839"
  },
  {
    "text": "modeling and SQL you know that's great it it turns right into a graph um for",
    "start": "2893839",
    "end": "2899319"
  },
  {
    "text": "querying obviously it it really just depends on the workload um the",
    "start": "2899319",
    "end": "2904760"
  },
  {
    "text": "observation I'd make is Ser is kind of a new workload um like people",
    "start": "2904760",
    "end": "2911440"
  },
  {
    "text": "typically handle this with cash in front of a conventional database right um and",
    "start": "2911440",
    "end": "2920640"
  },
  {
    "text": "really the difference between the cach and an index is just the the index is complete and it has some uh some",
    "start": "2920640",
    "end": "2927680"
  },
  {
    "text": "consistency properties that that you can State whereas you know the cach is just whatever the application uh put in there",
    "start": "2927680",
    "end": "2934559"
  },
  {
    "text": "like if you have an object relational mapper it's running a cache of objects",
    "start": "2934559",
    "end": "2942079"
  },
  {
    "text": "um I I think that's pretty undesirable like I think indexing is much better there's no warm-up time you know um you",
    "start": "2942079",
    "end": "2950559"
  },
  {
    "text": "know how much things are going to cost uh and it's it's immediately usable at",
    "start": "2950559",
    "end": "2955680"
  },
  {
    "text": "full speed like so the the the previous system at LinkedIn was a cach system uh",
    "start": "2955680",
    "end": "2962960"
  },
  {
    "text": "the the current the current System liquid is uncached right uh and the sres love that like they",
    "start": "2962960",
    "end": "2971650"
  },
  {
    "text": "[Music]",
    "start": "2971650",
    "end": "2978709"
  }
]