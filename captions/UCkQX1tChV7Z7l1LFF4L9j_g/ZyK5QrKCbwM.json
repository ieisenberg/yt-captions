[
  {
    "text": "so um a little bit about me uh and this talk today today we're going to be looking at Spring cloud and uh we're",
    "start": "560",
    "end": "8000"
  },
  {
    "text": "going to be doing a lot of code I love code code is awesome right code is the only differentiator really so that's up",
    "start": "8000",
    "end": "15000"
  },
  {
    "text": "there on GitHub uh if you have the inclination if you want to follow along at home please don't hesitate grab the",
    "start": "15000",
    "end": "20880"
  },
  {
    "text": "bits kick the tires uh and you'll see what we're doing don't do it now just take a photo and do it later um if you",
    "start": "20880",
    "end": "29000"
  },
  {
    "text": "have questions if you have feedback if you want if you have you know ideas please don't hesitate to",
    "start": "29000",
    "end": "34239"
  },
  {
    "text": "reach out to me I'm on the twitters how many of you are on Twitter Twitter",
    "start": "34239",
    "end": "41079"
  },
  {
    "text": "Twitter no one no so if you are yes yes uh if you're if",
    "start": "41079",
    "end": "49520"
  },
  {
    "text": "you're if you're so how many of you on Twitter that was actually really sad really sad yeah okay I don't even know",
    "start": "49520",
    "end": "55079"
  },
  {
    "text": "where to go how many of you on email E email",
    "start": "55079",
    "end": "60399"
  },
  {
    "text": "email email no one right well I'm on",
    "start": "60399",
    "end": "65960"
  },
  {
    "text": "those uh uh social networks as the kids say don't hesitate to reach out to me I'm there for you uh a little bit about",
    "start": "65960",
    "end": "73439"
  },
  {
    "text": "me my name is Josh long I'm a spring developer Advocate at uh at pivotal actually right here this big cloudy Farm",
    "start": "73439",
    "end": "81880"
  },
  {
    "text": "I'm the author now of uh three bestselling videos on on Spring and uh",
    "start": "81880",
    "end": "87320"
  },
  {
    "text": "uh working on my fifth book the latest and greatest of which is called called the cloud cloud native Java from O'Reilly and that'll do that'll be uh",
    "start": "87320",
    "end": "94600"
  },
  {
    "text": "released next month uh and that's the same kind of next month as uh as I used",
    "start": "94600",
    "end": "100439"
  },
  {
    "text": "when I talked about when this next meeting would be um I'm also a Java Champion that's been my honor it's been",
    "start": "100439",
    "end": "105759"
  },
  {
    "text": "a privilege to be a Java Champion what that means is that I get to be in front of a lot of really really smart people like yourselves like yourselves uh",
    "start": "105759",
    "end": "113240"
  },
  {
    "text": "trying to understand what they're doing I talk to a lot of organizations a lot of customers a lot of sort of conference",
    "start": "113240",
    "end": "118320"
  },
  {
    "text": "goers and I'm trying to understand what developers are doing today and how they're doing it and uh that's put me in",
    "start": "118320",
    "end": "124200"
  },
  {
    "text": "front of a lot of really interesting people people who are trying to move to this uh new architecture right uh I do",
    "start": "124200",
    "end": "130720"
  },
  {
    "text": "that a lot as well as part of my function at pivotal right so here we are at pivotal pivotal is the home of a lot",
    "start": "130720",
    "end": "136120"
  },
  {
    "text": "of great open source stuff and what that gives us the chance to do is because people are building on top of this and",
    "start": "136120",
    "end": "141800"
  },
  {
    "text": "they're trying to solve real problems we get to see and understand a lot of interesting use cases one thing that",
    "start": "141800",
    "end": "147440"
  },
  {
    "text": "we've seen in particular is that we have these we have we see developers moving to this uh sort of cloud native",
    "start": "147440",
    "end": "153160"
  },
  {
    "text": "architecture right uh Cloud native when Netflix first talked about it back in 2009 or so uh referred to sort of this",
    "start": "153160",
    "end": "162040"
  },
  {
    "text": "decomposition of their applications from the monolith into this new world of sort of no SQL and microservices and there's",
    "start": "162040",
    "end": "168480"
  },
  {
    "text": "a lot of reasons for people to embrace this architecture there's a lot of reasons for people to move to this architecture what we have seen over and",
    "start": "168480",
    "end": "176360"
  },
  {
    "text": "over again is that people are trying to go faster right uh right now we're live in a world",
    "start": "176360",
    "end": "182440"
  },
  {
    "text": "where most industry verticals most interesting industry verticals are being dominated by software right so what is",
    "start": "182440",
    "end": "189319"
  },
  {
    "text": "the number one taxi service in the world right now Uber right what's the differentiator there what's the number",
    "start": "189319",
    "end": "195720"
  },
  {
    "text": "one uh thing that lets you send 140 characters yeah it's probably still the",
    "start": "195720",
    "end": "201319"
  },
  {
    "text": "mobile phone but also Twitter right yeah yeah yeah what is what is the number one",
    "start": "201319",
    "end": "208360"
  },
  {
    "text": "rental video rental service in the world right now right yeah exactly there the differentiator is software and that",
    "start": "208360",
    "end": "215480"
  },
  {
    "text": "speaks to what my friend Andrew Clay schaer always says which is you're either building a software business or you're going to be beaten by somebody",
    "start": "215480",
    "end": "221439"
  },
  {
    "text": "who is right that that holds more true than ever that implies that he or she who can deliver software faster has the",
    "start": "221439",
    "end": "228519"
  },
  {
    "text": "better chance of winning that's the differentiator speed right and so we see organizations struggling to go faster",
    "start": "228519",
    "end": "234920"
  },
  {
    "text": "they have these large large monolithic code bases and they struggle to be able to get new software out on time and in",
    "start": "234920",
    "end": "240840"
  },
  {
    "text": "reasonable capacity they struggle with moving the so-called Titanic of software they want to be able to react to changes",
    "start": "240840",
    "end": "246879"
  },
  {
    "text": "they want to be able to uh pivot quickly and safely right uh and",
    "start": "246879",
    "end": "254040"
  },
  {
    "text": "that's hard if you have a lot of code that you have to integrate changes from a lot of different developers on so we see organizations moving to something",
    "start": "254040",
    "end": "260479"
  },
  {
    "text": "they want to go faster one way to do that is to have small batches of work right this is not a new idea right we",
    "start": "260479",
    "end": "266479"
  },
  {
    "text": "know about from we know from lean manufacturing that small batches of work work are much easier to move to",
    "start": "266479",
    "end": "272000"
  },
  {
    "text": "manipulate to forward through a workflow than large batches of work you release software as quickly as possible in small",
    "start": "272000",
    "end": "278039"
  },
  {
    "text": "batches but when you start doing this when you start doing this you're invariably releasing lots of different",
    "start": "278039",
    "end": "285120"
  },
  {
    "text": "small pieces that are independently Deployable that implies distribution that implies Network cops and once",
    "start": "285120",
    "end": "292120"
  },
  {
    "text": "you've invited Network cops into your life you're squarely you're squarely in the camp of distributed computing and",
    "start": "292120",
    "end": "298360"
  },
  {
    "text": "distributed computing is hard right there's a lot of pain associated with that movement so what we're going",
    "start": "298360",
    "end": "304080"
  },
  {
    "text": "to talk about today is spring Cloud which builds a top spring boot as a way",
    "start": "304080",
    "end": "309639"
  },
  {
    "text": "of sort of handling these these non-functional requirements the things that you're going to need to care about when you move to this architecture it is",
    "start": "309639",
    "end": "316240"
  },
  {
    "text": "more pain but the benefit of course is agility it's up to you to decide whether that trade-off is worth it hopefully we",
    "start": "316240",
    "end": "322120"
  },
  {
    "text": "can mitigate as much of that pain as possible so that was those are my slides what' you think best ever or best ever",
    "start": "322120",
    "end": "331440"
  },
  {
    "text": "I I I like these slides I'm a big fan they want a Grammy you know that that was a joke kids never",
    "start": "331440",
    "end": "338319"
  },
  {
    "text": "mind whatever it's all right it's all right moving on so we're gonna start our journey today with uh kind of where we",
    "start": "338319",
    "end": "344120"
  },
  {
    "text": "left off last time we're gonna build a sort of nonsensically trivial uh uh micro service it's going to be a uh",
    "start": "344120",
    "end": "351000"
  },
  {
    "text": "simple service that doesn't connect to the internet at all hello okay there we are it's going to be a simple service that uh just exposes simple information",
    "start": "351000",
    "end": "358319"
  },
  {
    "text": "and then we're going to look at the things the trappings that we need to support in order to uh talk to that",
    "start": "358319",
    "end": "363360"
  },
  {
    "text": "service from a client can you all see this in the back first of all if I make it a little bit bigger okay this is",
    "start": "363360",
    "end": "369880"
  },
  {
    "text": "start. spring. uh this is my second favorite place on the internet after production",
    "start": "369880",
    "end": "377960"
  },
  {
    "text": "right so I love production more than anything in the world Spring boot by the way is an opinionated approach to",
    "start": "377960",
    "end": "384160"
  },
  {
    "text": "building applications the opinion is that production is awesome right so",
    "start": "384160",
    "end": "389800"
  },
  {
    "text": "we're going to build a very very simple spring boot service I'm going to go here as I always do and stand up a new API",
    "start": "389800",
    "end": "394960"
  },
  {
    "text": "I'm going to use the same nonsensically trivial sort of uh strawman domain that I used last time which is that of a a",
    "start": "394960",
    "end": "400840"
  },
  {
    "text": "reservation system something I can use to record entries of type reservation so I'll give it a name I'll say it's called",
    "start": "400840",
    "end": "406960"
  },
  {
    "text": "reservation service I'm going to bring in the web support for building web apps I'll build in the rest repository",
    "start": "406960",
    "end": "412720"
  },
  {
    "text": "support I'll use jpa because I make poor life decisions jpa okay I'm going to use",
    "start": "412720",
    "end": "418280"
  },
  {
    "text": "H2 the embedded in memory uh database how many of you have ever used an inmemory embedded database like H2 or",
    "start": "418280",
    "end": "424160"
  },
  {
    "text": "sqlite or Derby or all right um hsql I'm",
    "start": "424160",
    "end": "429400"
  },
  {
    "text": "going to use uh configuration right so I'll centralize my configuration we'll talk about that in just a second I'm",
    "start": "429400",
    "end": "434960"
  },
  {
    "text": "going to use uh stream processing with reddis so there's that uh I'm going to",
    "start": "434960",
    "end": "440240"
  },
  {
    "text": "use do I want anything else yes Zipkin right we'll come back to that in a second as well so we're going to hit",
    "start": "440240",
    "end": "445639"
  },
  {
    "text": "generate by the by there's a lot more there's a lot more options here right you could have gone through this list",
    "start": "445639",
    "end": "451360"
  },
  {
    "text": "and chosen the kinds of workloads you'd like to support this is just spring boot if you haven't uh had a chance to play",
    "start": "451360",
    "end": "456639"
  },
  {
    "text": "with it do please or better yet watch the talk that I did um in front in front of this very very assembly uh just a few",
    "start": "456639",
    "end": "463840"
  },
  {
    "text": "short months ago okay a couple of things a couple of things I have uh it's worth",
    "start": "463840",
    "end": "468960"
  },
  {
    "text": "reiterating why we chose jar and not war now this is a a very",
    "start": "468960",
    "end": "475280"
  },
  {
    "text": "important thing and I don't want to leave it I don't want to just leave it there hanging in the air unanswered you know one of those questions that people",
    "start": "475280",
    "end": "481120"
  },
  {
    "text": "can ask people always ask why do I choose jar instead of War now there's a lot of",
    "start": "481120",
    "end": "488120"
  },
  {
    "text": "reasons to choose either if you have to absolutely choose aw you know archive you can there it's there you know if by",
    "start": "488120",
    "end": "495000"
  },
  {
    "text": "some fluke of physics you are stuck in the distant distant past unable to move forward again here's War okay but for",
    "start": "495000",
    "end": "503080"
  },
  {
    "text": "the benefits of what we're trying to do which is to move fast and have a consistent operational surface area uh",
    "start": "503080",
    "end": "508120"
  },
  {
    "text": "and to avoid having to and to avoid introducing places where we can introduce drift that is to say the the class path on the application server",
    "start": "508120",
    "end": "514599"
  },
  {
    "text": "versus the class path of my service I want to keep these things as close to each other as possible and so I'll just",
    "start": "514599",
    "end": "519959"
  },
  {
    "text": "package everything everything inside of a DOT jar that's a very reasonable thing to do in uh",
    "start": "519959",
    "end": "525000"
  },
  {
    "text": "2016 this is a big part as you know uh of my personal philosophy of make jar",
    "start": "525000",
    "end": "530839"
  },
  {
    "text": "not war now again choose what works for you it's all about choice we're big fans",
    "start": "530839",
    "end": "536200"
  },
  {
    "text": "of choice here at the old pivotal Ranch okay hit generate here we go open this",
    "start": "536200",
    "end": "541240"
  },
  {
    "text": "up and your uh favorite IDE you can use whatever you want I always love asking this how many of you are using um",
    "start": "541240",
    "end": "548000"
  },
  {
    "text": "eclipse eclipse eclipse STS yeah that's a that's",
    "start": "548000",
    "end": "553079"
  },
  {
    "text": "a thing STS is the spring tool Suite it's built upon a eclipse how many of",
    "start": "553079",
    "end": "558279"
  },
  {
    "text": "you are using uh intellig intellig wow",
    "start": "558279",
    "end": "563880"
  },
  {
    "text": "that's right yeah good stuff hot sauce well done uh what about net beans net",
    "start": "563880",
    "end": "570320"
  },
  {
    "text": "beans are you here sir are you here there he is ah I don't know how he",
    "start": "570320",
    "end": "576200"
  },
  {
    "text": "follows me to every talk I do on every continent in every city but it's getting a little weird uh we're going to talk to",
    "start": "576200",
    "end": "581279"
  },
  {
    "text": "the judge about that so I'm going to just build up a very simple little API can you see the font in the back there",
    "start": "581279",
    "end": "586399"
  },
  {
    "text": "friends is that yeah that's okay good so I'm going to build a simple nonsensically trivial API I'll say class",
    "start": "586399",
    "end": "593160"
  },
  {
    "text": "reservation like so and it's going to be a JP entity cuz lazy um and I'll give it",
    "start": "593160",
    "end": "598720"
  },
  {
    "text": "a primary key like so private long ID wow this is awkward typing it's on an",
    "start": "598720",
    "end": "604720"
  },
  {
    "text": "angle so private string reservation name like that create some",
    "start": "604720",
    "end": "611399"
  },
  {
    "text": "Getters or not getter create a Constructor there we are for n and uh",
    "start": "611399",
    "end": "619519"
  },
  {
    "text": "we'll say string I'll say that I want this to be the reservation name equals",
    "start": "619519",
    "end": "625120"
  },
  {
    "text": "in uh I'll give it a primary key like so at gener Genera value um",
    "start": "625120",
    "end": "632680"
  },
  {
    "text": "okay and um that's it I think I need a Constructor for jpa right this is for",
    "start": "632680",
    "end": "638240"
  },
  {
    "text": "jpa y right uh other than that I think we're good to go now I've got a basic",
    "start": "638240",
    "end": "643959"
  },
  {
    "text": "entity uh it's gonna you know we'll use it to store state in the database I need something to actually do the reading and",
    "start": "643959",
    "end": "649000"
  },
  {
    "text": "the writing and for that I'll use a repository so I'm going to bring in Spring data uh jpa which uh is part of",
    "start": "649000",
    "end": "655160"
  },
  {
    "text": "an umbrella project spring data which in t turn supports this idea of a repository repository of course is um",
    "start": "655160",
    "end": "662519"
  },
  {
    "text": "just an object that handles the boilerplate creation reading updating deleting and it it's in this case it's declarative so we don't even have to",
    "start": "662519",
    "end": "668120"
  },
  {
    "text": "write the code to do it it's just an interface that spring data will provide an implementation for that we can then use in the balance of our code so here's",
    "start": "668120",
    "end": "674560"
  },
  {
    "text": "our jpa repository it's got a bunch of useful methods like find all save delete Etc you know the crud style stuff I can",
    "start": "674560",
    "end": "680800"
  },
  {
    "text": "even take it a step further and uh stand up a no when was that ever the right answer what the heck I've got a new",
    "start": "680800",
    "end": "687959"
  },
  {
    "text": "computer here so if I look a little uncomfortable in my own skin it's because of that um so here we are string",
    "start": "687959",
    "end": "695160"
  },
  {
    "text": "RN I'm going to create a custom finder method and the finder method will just return all the reservations uh when",
    "start": "695160",
    "end": "701519"
  },
  {
    "text": "asked by a predicate which is to say um uh by name right so there we are the the",
    "start": "701519",
    "end": "708639"
  },
  {
    "text": "parameter the predicate is um RN and I'm going to use spring data rest to expose",
    "start": "708639",
    "end": "716040"
  },
  {
    "text": "this as an rest endpoint okay and then finally I'm going to create a a component that implements the uh",
    "start": "716040",
    "end": "722160"
  },
  {
    "text": "application sorry command line Runner so I'll say um uh dummy",
    "start": "722160",
    "end": "728079"
  },
  {
    "text": "data CLR implements command line Runner",
    "start": "728079",
    "end": "733480"
  },
  {
    "text": "and all I'm going to do here is use this callback interface which spring is going to see at the application startup and",
    "start": "733480",
    "end": "740000"
  },
  {
    "text": "I'll use that as a chance to insert some dummy data into the database so I'll",
    "start": "740000",
    "end": "745760"
  },
  {
    "text": "say and uh Peter and and some names",
    "start": "745920",
    "end": "753639"
  },
  {
    "text": "please you guys are not working with this Eric more I like I like that name",
    "start": "753639",
    "end": "761199"
  },
  {
    "text": "Suzie okay next like that I don't okay so for each",
    "start": "761199",
    "end": "768440"
  },
  {
    "text": "name we're going to say this. reservation repository. saave equals new reservation uh and all I'm doing is I'm",
    "start": "768440",
    "end": "775399"
  },
  {
    "text": "creating a component that spring will see uh and it'll you know in that when the application starts up it's going to",
    "start": "775399",
    "end": "780959"
  },
  {
    "text": "see this interface all be that have this interface it's going to see it's got a callback method called run and it's",
    "start": "780959",
    "end": "786120"
  },
  {
    "text": "going to call the run method uh giving us a chance to initiate our application after all the configuration has been",
    "start": "786120",
    "end": "791160"
  },
  {
    "text": "sort of uh stabilized and everything's ready to go this is very nice but what I'm really doing is I'm creating a bean",
    "start": "791160",
    "end": "796639"
  },
  {
    "text": "a whole object a class with its own you know name and everything just for the side effect of having that function",
    "start": "796639",
    "end": "801720"
  },
  {
    "text": "called in a in a first class language with first class support for functions this wouldn't be something you would do",
    "start": "801720",
    "end": "808320"
  },
  {
    "text": "a lot right well if of course it uh if you're following you know that Java 8 supports Lambda so I'm going to turn",
    "start": "808320",
    "end": "814480"
  },
  {
    "text": "this into a Lambda this is just going to be an object expressed uh as a bean a bean",
    "start": "814480",
    "end": "820160"
  },
  {
    "text": "that I'm going to return from a function or from a method spring will see this Bean annotation it'll see this method",
    "start": "820160",
    "end": "825240"
  },
  {
    "text": "it'll invoke the method and it'll take the the products from that and then create a being for for me but now because it's kind of just an anonymous",
    "start": "825240",
    "end": "831440"
  },
  {
    "text": "being I'm not actually uh cluttering my name space a little bit so I'm going to rewrite this in terms of just an anonymous in class which I'll turn into",
    "start": "831440",
    "end": "837920"
  },
  {
    "text": "a Lambda right so new command line Runner can be expressed as a very clean little Lambda like that and I can just",
    "start": "837920",
    "end": "844720"
  },
  {
    "text": "tell spring to inject my repository there and I'll paste that in and I'm off",
    "start": "844720",
    "end": "850279"
  },
  {
    "text": "to the races right so that's much cleaner less code easier to reason about and I just wanted you to see there's two",
    "start": "850279",
    "end": "855959"
  },
  {
    "text": "different ways of telling spring about your beans there's stereotype annotations like this and then there's at Bean like that okay now we've got",
    "start": "855959",
    "end": "862880"
  },
  {
    "text": "that we should be able to we should be able to confirm a few things are working I'm going to go back to my build here and remove a few things that we're not",
    "start": "862880",
    "end": "869560"
  },
  {
    "text": "ready to use just yet so uh we'll remove that we'll remove this uh and we'll remove this",
    "start": "869560",
    "end": "877639"
  },
  {
    "text": "okay hit at enable Auto Import and run so Control Alt D",
    "start": "877639",
    "end": "886320"
  },
  {
    "text": "run what we should see is a a rest API using hyperdia and hyperdia is very very",
    "start": "886320",
    "end": "891639"
  },
  {
    "text": "useful in this case because it promotes self-describing Services services that you can use uh you know after a long",
    "start": "891639",
    "end": "898120"
  },
  {
    "text": "period you're not tied to the URL structure of the uh of the API so that promotes very resilient very long",
    "start": "898120",
    "end": "904320"
  },
  {
    "text": "running services so here we go Local Host 880 reservations come on there we are can",
    "start": "904320",
    "end": "912959"
  },
  {
    "text": "you see that Local Host 880 reservations and there's my rest response it's a hyper media API so each entity in the",
    "start": "912959",
    "end": "919920"
  },
  {
    "text": "payload uh has links these links tell the client what it may or may not do given a certain payload it says that if",
    "start": "919920",
    "end": "925759"
  },
  {
    "text": "I want to see the Deep link for the record called for Josh I go to Res A1 Etc I can add custom links here this",
    "start": "925759",
    "end": "932639"
  },
  {
    "text": "forms a sort of protocol we see this all the time when you're on the web you see links and the links tell you if you want to do something if you want to achieve a",
    "start": "932639",
    "end": "938519"
  },
  {
    "text": "result you click the link and you follow the suite of links until you get to the end and then finally you have a result",
    "start": "938519",
    "end": "944000"
  },
  {
    "text": "these links tell you or tell rather they tell the rest client the same thing so now I've got a very simple dead simple",
    "start": "944000",
    "end": "950399"
  },
  {
    "text": "rest API up and running I want to be able to talk to this resty API and I want to be able to stand up a lot of",
    "start": "950399",
    "end": "956639"
  },
  {
    "text": "these things right that's the goal here is to be able to stand up a lot of rest apis uh with agility and when you start",
    "start": "956639",
    "end": "962399"
  },
  {
    "text": "doing that again you invite complexity so the first thing that I would like to do is to be able to centralize configuration right I've got an",
    "start": "962399",
    "end": "968560"
  },
  {
    "text": "application up and running I can by convention go to Source main resources application. properties and change the",
    "start": "968560",
    "end": "975959"
  },
  {
    "text": "configuration there I might say for example server. Port equals 8,000 right",
    "start": "975959",
    "end": "981199"
  },
  {
    "text": "and if I restart it like this it'll restart on Port 8000 instead of 8080 but again I've just got one microservice",
    "start": "981199",
    "end": "988279"
  },
  {
    "text": "here one little service that has a very very simple domain it's internally consistent by the way that's important",
    "start": "988279",
    "end": "993399"
  },
  {
    "text": "when we talk about moving to microservices what we're talking about is an internally consistent domain model",
    "start": "993399",
    "end": "999079"
  },
  {
    "text": "right you have to formally break apart these domain models I've seen uh I walk into too many organizations and I see on",
    "start": "999079",
    "end": "1005959"
  },
  {
    "text": "the wall large diagrams large ER diagrams the one ER diagram to rule them all with a thousand links and tables",
    "start": "1005959",
    "end": "1013279"
  },
  {
    "text": "this is a bad idea TM right avoid this at all costs what you really want are small internally consistent domain model",
    "start": "1013279",
    "end": "1020360"
  },
  {
    "text": "so for example uh take the idea of customer service versus sales in both",
    "start": "1020360",
    "end": "1025959"
  },
  {
    "text": "domains you have the idea of a product and a customer but the way you treat a customer in this in the case of",
    "start": "1025959",
    "end": "1031319"
  },
  {
    "text": "remediation or sales or rather customer service is very different than the way you would when you're trying to entice",
    "start": "1031319",
    "end": "1036480"
  },
  {
    "text": "them to buy something these are two different concepts though they may share the same noun in English you muddying",
    "start": "1036480",
    "end": "1042280"
  },
  {
    "text": "the domain right instead break them apart treat them as separate things within the context of a single domain",
    "start": "1042280",
    "end": "1048558"
  },
  {
    "text": "they are very clear and consistent that boundary that discovered boundary is a nice place to describe or sort of to cut",
    "start": "1048559",
    "end": "1054480"
  },
  {
    "text": "apart your microservice to move and move it off your domain okay so keep that in mind now I've got this configuration",
    "start": "1054480",
    "end": "1061760"
  },
  {
    "text": "I've only got one service it works here but what about when I have more than one when I have even a couple it gets out of",
    "start": "1061760",
    "end": "1066919"
  },
  {
    "text": "hand I can using spring boot I can uh override this property on the command",
    "start": "1066919",
    "end": "1073840"
  },
  {
    "text": "line I can say Java minus D server. Port equals 8,000 minus jar and then run the",
    "start": "1073840",
    "end": "1079360"
  },
  {
    "text": "jar that's 12 Factor style configuration and that's fine you know but again it becomes a little bit of a problem uh if",
    "start": "1079360",
    "end": "1085880"
  },
  {
    "text": "I have a a suite of services if I have environment variables I can do that as well I can say export server underscore",
    "start": "1085880",
    "end": "1092640"
  },
  {
    "text": "equals Port underscore Port equals a 8,000 just before I launched the Java process but this becomes kind of fragile",
    "start": "1092640",
    "end": "1099720"
  },
  {
    "text": "if I have more than one service do I have to log into each node and restart the process how do I how do I version",
    "start": "1099720",
    "end": "1106200"
  },
  {
    "text": "the uh the changes what if Josh drinks too much uh Martinelli and gets all",
    "start": "1106200",
    "end": "1111840"
  },
  {
    "text": "crazy and logs into production does something terrible how do I audit that how do I see what's happened and see where it's happened how do I roll back",
    "start": "1111840",
    "end": "1118880"
  },
  {
    "text": "right that requires discipline discipline that at scale is going to be more and more important to create since",
    "start": "1118880",
    "end": "1125240"
  },
  {
    "text": "uh similarly how do I change things once and have that seen across all of my microservices better yet how do I get it",
    "start": "1125240",
    "end": "1131039"
  },
  {
    "text": "to be seen immediately without restarting the process for all of these kinds of use cases and more there's we",
    "start": "1131039",
    "end": "1137679"
  },
  {
    "text": "need something a bit better something a bit more sophisticated we need a separate microservice that babysits the",
    "start": "1137679",
    "end": "1142880"
  },
  {
    "text": "mic the the configuration for us that's a config service the separate microservice can also do a few other",
    "start": "1142880",
    "end": "1148600"
  },
  {
    "text": "things that we wouldn't want to be able to do or we we couldn't do without a lot more sophistication um using this",
    "start": "1148600",
    "end": "1154480"
  },
  {
    "text": "approach for example security if I have a password do I really want to have scripts shell scripts with passwords",
    "start": "1154480",
    "end": "1160679"
  },
  {
    "text": "being plugged in as environment variables that's a terrible idea right you want to it's much better to keep the stuff at rest and encrypted in the file",
    "start": "1160679",
    "end": "1168400"
  },
  {
    "text": "system encrypted and then symmetrically decrypted in flight from the config",
    "start": "1168400",
    "end": "1173440"
  },
  {
    "text": "service into the micros service the config service we're going to stand up can do that and more for us so let's go",
    "start": "1173440",
    "end": "1178799"
  },
  {
    "text": "back to start. springo I'm going to stand up a very simple config service here we go I'll bring in the config",
    "start": "1178799",
    "end": "1184840"
  },
  {
    "text": "server here and we're off now mind you what I'm doing is I'm gonna just use something to",
    "start": "1184840",
    "end": "1192000"
  },
  {
    "text": "centralize my configuration data right the config service is super lightweight it's very very convenient there are um",
    "start": "1192000",
    "end": "1198120"
  },
  {
    "text": "it B it's built on very very commodity tools so it's not hard to integrate into your workflow but that said we also",
    "start": "1198120",
    "end": "1204039"
  },
  {
    "text": "support uh talking to a zookeeper or a console for configuration sources as well right so that's an alternative to",
    "start": "1204039",
    "end": "1210280"
  },
  {
    "text": "what we're about to do so back to the basics what we have here springcloud config server right",
    "start": "1210280",
    "end": "1218240"
  },
  {
    "text": "that's about it I'm going to go back to my application Java code here and I'll say at enable Hello computer at enable",
    "start": "1218240",
    "end": "1225240"
  },
  {
    "text": "config enable config server and this is going to babysit configuration files",
    "start": "1225240",
    "end": "1231679"
  },
  {
    "text": "just as we've used before application. properties food. properties Etc so I need to tell it first of all uh where to",
    "start": "1231679",
    "end": "1237720"
  },
  {
    "text": "find that configuration I'll say springcloud config server uh G URI",
    "start": "1237720",
    "end": "1243200"
  },
  {
    "text": "equals and here I'm specifying the location the path to any old git",
    "start": "1243200",
    "end": "1248720"
  },
  {
    "text": "repository it could be one on the file system it could be one on HTTP with GitHub or git lab or or whatever it",
    "start": "1248720",
    "end": "1254200"
  },
  {
    "text": "doesn't really matter any git URI uh I happen to have",
    "start": "1254200",
    "end": "1259880"
  },
  {
    "text": "a uh set of configuration here on my desktop",
    "start": "1259880",
    "end": "1265760"
  },
  {
    "text": "computer okay so there's this right it's just a bunch of configuration files in a",
    "start": "1265760",
    "end": "1271960"
  },
  {
    "text": "directory managed by git uh so I'm going to say go to the",
    "start": "1271960",
    "end": "1277600"
  },
  {
    "text": "desktopdesktop SLC config I want this to run on uh Port",
    "start": "1277600",
    "end": "1283080"
  },
  {
    "text": "8888 on my local machine that's fine uh and that's about it that'll do I'm going to spin that up now hit",
    "start": "1283080",
    "end": "1290919"
  },
  {
    "text": "go sweet nectar so I can confirm everything's",
    "start": "1294159",
    "end": "1299679"
  },
  {
    "text": "working by going to 8888 forward slash and then what I want to do is I want to see the configuration that a",
    "start": "1299679",
    "end": "1306480"
  },
  {
    "text": "microservice that identifies itself as reservation hyphen service would see that's the microservice that we've just",
    "start": "1306480",
    "end": "1312080"
  },
  {
    "text": "stood up we're going to give it a name in a minute but let's imagine that we've done that I would go to reservation",
    "start": "1312080",
    "end": "1318039"
  },
  {
    "text": "hyphen service slm okay so there's this",
    "start": "1318039",
    "end": "1324080"
  },
  {
    "text": "oops this is the URL right service idmaster and you can see it says I've",
    "start": "1324080",
    "end": "1330279"
  },
  {
    "text": "got two sets of configuration files I've got application. properties which is a",
    "start": "1330279",
    "end": "1335880"
  },
  {
    "text": "fall through configuration file all microservices no matter what their identification will get the keys and",
    "start": "1335880",
    "end": "1341320"
  },
  {
    "text": "values from that property file specifically only the microservice that identifies itself as reservation hyphen",
    "start": "1341320",
    "end": "1348080"
  },
  {
    "text": "service St Properties or rather reservation hyen service we'll see the configuration file properties inside of",
    "start": "1348080",
    "end": "1354039"
  },
  {
    "text": "reservation hyen service. properties but it's a fall through right so the more specific one will always win should",
    "start": "1354039",
    "end": "1359880"
  },
  {
    "text": "there be a conflict as there is by the way in this case so server. port in this case is more specific than server. port",
    "start": "1359880",
    "end": "1367200"
  },
  {
    "text": "in the fall through file so you get kind of a hierarchy or a Cascade let's teach now let's go back and retrofit our",
    "start": "1367200",
    "end": "1373679"
  },
  {
    "text": "reservation service and teach it how to talk to uh that configuration server so we're going to bring in the config",
    "start": "1373679",
    "end": "1381159"
  },
  {
    "text": "client like this and that'll be uh that's basically",
    "start": "1381159",
    "end": "1386600"
  },
  {
    "text": "enough what I need to do now is to teach my reservation service where to uh where to find the",
    "start": "1386600",
    "end": "1393760"
  },
  {
    "text": "configuration and also how to identify itself so I'm going to change this I'm going to change this and say spring.",
    "start": "1393760",
    "end": "1399200"
  },
  {
    "text": "application name equals reservation hyphen service and I'm going",
    "start": "1399200",
    "end": "1404960"
  },
  {
    "text": "to say springcloud configu equal HTTP Local Host 8888 mind",
    "start": "1404960",
    "end": "1412679"
  },
  {
    "text": "you the uh URI could have been an environment variable in in of itself right so config server right that's fine",
    "start": "1412679",
    "end": "1419840"
  },
  {
    "text": "as well we don't it doesn't really matter but uh I'm lazy so we'll just do that now this information is necessarily",
    "start": "1419840",
    "end": "1426159"
  },
  {
    "text": "needed before the rest of the configuration right it's used to bootstrap the configuration process",
    "start": "1426159",
    "end": "1432200"
  },
  {
    "text": "without this this the application can't find the config server which it'll then use to configure everything else so this",
    "start": "1432200",
    "end": "1438480"
  },
  {
    "text": "this file these two bits of information by definition or by default should live uh in a property file called",
    "start": "1438480",
    "end": "1445440"
  },
  {
    "text": "bootstrap properties and these are I find that these are the only two properties that I tend to have uh you",
    "start": "1445440",
    "end": "1451200"
  },
  {
    "text": "know copied that's the only bit of copy and paste you should have and your entire ensemble of services okay so with",
    "start": "1451200",
    "end": "1458039"
  },
  {
    "text": "that in place we should uh at a minimum see the application spin up on Port 8,000 not 8080 if we if we did",
    "start": "1458039",
    "end": "1465559"
  },
  {
    "text": "everything right and second of all we can take advantage of this message here so let's let's add a little rest",
    "start": "1465559",
    "end": "1470679"
  },
  {
    "text": "controller to parent or just to print out this message for us okay so I'll go back to my code here and I'll say at",
    "start": "1470679",
    "end": "1476520"
  },
  {
    "text": "rest controller class message rest controller and I'll say at",
    "start": "1476520",
    "end": "1484398"
  },
  {
    "text": "Value quotation marks message quotation marks private string message request",
    "start": "1485000",
    "end": "1493440"
  },
  {
    "text": "mapping message string",
    "start": "1493440",
    "end": "1498880"
  },
  {
    "text": "message right I'm just going to return the message from the config server uh live now if I wanted to change that",
    "start": "1498880",
    "end": "1506200"
  },
  {
    "text": "value I it'd be nice to be able to change that simple uh value live right I don't want to have to restart the",
    "start": "1506200",
    "end": "1511840"
  },
  {
    "text": "process just to do that though so I'm going to make this Bean uh refreshable I'll annotate it with at refresh scope",
    "start": "1511840",
    "end": "1518520"
  },
  {
    "text": "okay so we'll see that in play here now so let's let's see if these things work we should have the application on Port",
    "start": "1518520",
    "end": "1523720"
  },
  {
    "text": "8,000 not 880 and we should be able to access that config value which is being which is being drawn from the config",
    "start": "1523720",
    "end": "1529919"
  },
  {
    "text": "server okay so Local Host 80",
    "start": "1529919",
    "end": "1534960"
  },
  {
    "text": "8,000 for reservations that worked good so we're connected what about 8,000 SL",
    "start": "1534960",
    "end": "1542840"
  },
  {
    "text": "message there we are right but that's a terrible terrible you know property",
    "start": "1542840",
    "end": "1548559"
  },
  {
    "text": "value I don't want that value that doesn't make any sense at all I mean it was fine for its time but I've moved on",
    "start": "1548559",
    "end": "1553640"
  },
  {
    "text": "I'm a different developer Advocate that was so three weeks ago no this is different we're at the SF jug now some",
    "start": "1553640",
    "end": "1559240"
  },
  {
    "text": "uh names lless department store exclamation marks okay so I'll go here",
    "start": "1559240",
    "end": "1564679"
  },
  {
    "text": "to my config repository Jo reservation service. properties I'm going to change",
    "start": "1564679",
    "end": "1570279"
  },
  {
    "text": "this okay now say hello SF jug and I'm GNA add a lot of exclamation marks to",
    "start": "1570279",
    "end": "1576480"
  },
  {
    "text": "make my opinion more valid and and important on Reddit okay so here we go",
    "start": "1576480",
    "end": "1581720"
  },
  {
    "text": "and I'll say get commit minus a minus M YOLO okay get status there we are so",
    "start": "1581720",
    "end": "1589000"
  },
  {
    "text": "I've got the little dropping there that's the file editor you know Joe I'll remove that okay so there we are nothing",
    "start": "1589000",
    "end": "1596440"
  },
  {
    "text": "nothing left now this config server is immediately aware of the change right it",
    "start": "1596440",
    "end": "1603039"
  },
  {
    "text": "has the it sees the new value my client my reservation CL my reservation service which is the client to the config",
    "start": "1603039",
    "end": "1608600"
  },
  {
    "text": "service is not aware of the change it still caches the old value I need to explicitly ask it to reconfigure",
    "start": "1608600",
    "end": "1616399"
  },
  {
    "text": "itself so I'm I'm going to go back to my command line here and I'm going to activate what's called an actuator endpoint spring boot has the this notion",
    "start": "1616399",
    "end": "1623760"
  },
  {
    "text": "of an actuator uh actuator endpoints these are endpoints exposed via jmx VIA rest via whatever you want really uh",
    "start": "1623760",
    "end": "1630679"
  },
  {
    "text": "that give you the ability to see what the system is doing they let you ask questions they give you things like for",
    "start": "1630679",
    "end": "1636159"
  },
  {
    "text": "example um if I wanted to go to forv uh I don't have that on this so I need to",
    "start": "1636159",
    "end": "1641600"
  },
  {
    "text": "restart let me see did I actually forget the actuator I think I did so if you",
    "start": "1641600",
    "end": "1647039"
  },
  {
    "text": "don't have this this won't work okay there we are there's the ACT",
    "start": "1647039",
    "end": "1653399"
  },
  {
    "text": "actuator bits or restart a client and we'll change the property file just one more time because it's already cached",
    "start": "1653399",
    "end": "1661360"
  },
  {
    "text": "again okay so there we go get commit",
    "start": "1663960",
    "end": "1669640"
  },
  {
    "text": "YOLO good now if I go to forv for example here's the cash value we can see",
    "start": "1669640",
    "end": "1676240"
  },
  {
    "text": "all the environment properties we can see a lot of information about the state of the application this is good because it gives you an operational perspective",
    "start": "1676240",
    "end": "1682360"
  },
  {
    "text": "on what the what the application is doing the actuator framework contributes lots of cool stuff including like for",
    "start": "1682360",
    "end": "1688159"
  },
  {
    "text": "example a health endpoint these are the sort of non-functional requirements that I was talking about before that you want to get right and just get right once and",
    "start": "1688159",
    "end": "1694399"
  },
  {
    "text": "never worry about again one of the actual points that's uh contributed is the refresh endpoint which when invoked",
    "start": "1694399",
    "end": "1700760"
  },
  {
    "text": "will Cascade through all the beans in the graph and recreate in situ the beans that are annotated with at refresh scope",
    "start": "1700760",
    "end": "1707399"
  },
  {
    "text": "so that bean that we we just created the rest controller what we want to do is to make it see the new value this is the",
    "start": "1707399",
    "end": "1712960"
  },
  {
    "text": "old one right I've got I've got the new value here we can see that times two so I'm going to activate the uh curl I'm",
    "start": "1712960",
    "end": "1719559"
  },
  {
    "text": "going to curl minus D which is to say an empty post empty htb post the uh",
    "start": "1719559",
    "end": "1726480"
  },
  {
    "text": "actuator endpoint so Local Host 8000 SL refresh",
    "start": "1726480",
    "end": "1732039"
  },
  {
    "text": "okay there we go so there's that it sees the new value immediately I just had to",
    "start": "1732039",
    "end": "1737360"
  },
  {
    "text": "call that point and immediately visible that's very very useful because now I can do feature Flags right I can turn",
    "start": "1737360",
    "end": "1743240"
  },
  {
    "text": "things on or off live dynamically right this is very very good if I want to do uh if I want to decouple release of",
    "start": "1743240",
    "end": "1750159"
  },
  {
    "text": "software from deployment this is one of those ways to do it you can do dark launches like this you can open up a certain feature and make it available to",
    "start": "1750159",
    "end": "1756480"
  },
  {
    "text": "just a subset of your audience you could even just do simple things like you know changing uh certain behaviors whatever",
    "start": "1756480",
    "end": "1761760"
  },
  {
    "text": "you want this is a very very valuable way to go so that's one thing that's very useful to be able to support a",
    "start": "1761760",
    "end": "1766799"
  },
  {
    "text": "distributed system at Scales have Central configuration and to be able to refresh that configuration live right I",
    "start": "1766799",
    "end": "1772760"
  },
  {
    "text": "also mentioned we can do security so everything in that everything I've just showed you is completely wide open by default but of course the get repository",
    "start": "1772760",
    "end": "1779279"
  },
  {
    "text": "can be secured uh you can use the config server and you can secure the config server itself you can require a key to",
    "start": "1779279",
    "end": "1785799"
  },
  {
    "text": "be on both the config server and the client so that they have to do an authentication handshake beforehand and",
    "start": "1785799",
    "end": "1790880"
  },
  {
    "text": "you can do encrypted passwords that are decrypted live and inlight from the",
    "start": "1790880",
    "end": "1796039"
  },
  {
    "text": "server to the client so that when you write them down in the file they're encrypted but in Flight they're decrypted right you get a lot of",
    "start": "1796039",
    "end": "1801360"
  },
  {
    "text": "features there uh that are good for a mature operational perspective that you can't get when you're just slinging shell files now this is but one pattern",
    "start": "1801360",
    "end": "1809399"
  },
  {
    "text": "when you move to a sufficiently distributed system it becomes useful to decouple resolution of where a service",
    "start": "1809399",
    "end": "1816679"
  },
  {
    "text": "lives from its identity right I don't want to have to remember hosts in ports",
    "start": "1816679",
    "end": "1823159"
  },
  {
    "text": "and of course you may be reaching to uh to DNS DNS is certainly one way to solve the problem but it's a poor F poor fit",
    "start": "1823159",
    "end": "1829399"
  },
  {
    "text": "for large applications there's a couple reasons first of all good DNS is supposed to be cached right you're kind",
    "start": "1829399",
    "end": "1835039"
  },
  {
    "text": "of going against the grain when you set a time Al live of like zero right so you can do that but you're going against the",
    "start": "1835039",
    "end": "1840279"
  },
  {
    "text": "grain second of all DNS doesn't give us a lot of information about the system itself it is a nice way of logically",
    "start": "1840279",
    "end": "1846559"
  },
  {
    "text": "identifying a service but we don't know if that service is even there there's no way to know that I can make an HTP",
    "start": "1846559",
    "end": "1851960"
  },
  {
    "text": "request to a a DNS endpoint that's that's in front of a load balancer where there are no instances available zero",
    "start": "1851960",
    "end": "1858559"
  },
  {
    "text": "services are available and I'm just going to hang hopefully I've set a timeout and so on in my client code but that becomes something I have to worry",
    "start": "1858559",
    "end": "1864760"
  },
  {
    "text": "about this is um one problem the second problem is that if you're using a modern Cloud platform something like a cloud",
    "start": "1864760",
    "end": "1870080"
  },
  {
    "text": "Foundry for example or a Heroku or whatever uh you're going to get load balancing by default you're going to get",
    "start": "1870080",
    "end": "1875279"
  },
  {
    "text": "DNS based load bouncing but often that's just round robin and that's pretty common even common load bouncers",
    "start": "1875279",
    "end": "1881440"
  },
  {
    "text": "themselves proper dedicated you know sort of load bouncers are going to give you a nice easy to ous checkbox for",
    "start": "1881440",
    "end": "1887559"
  },
  {
    "text": "round Robin but if you want to do anything more sophisticated than that you're going to run into trouble how do you do for example availability Zone",
    "start": "1887559",
    "end": "1893840"
  },
  {
    "text": "aware load bouncing how do I say here's a node uh in this availability Zone this AWS region this whatever this data",
    "start": "1893840",
    "end": "1900240"
  },
  {
    "text": "center and I want to talk to those only how do I handle state for example suppose I'm a um some sort of streaming",
    "start": "1900240",
    "end": "1907840"
  },
  {
    "text": "video service you know I here we have those around here somewhere right and I want to Route requests to the node doing",
    "start": "1907840",
    "end": "1913679"
  },
  {
    "text": "the stateful streaming of the video again that requires a little bit more finesse than you get by def fault with uh with r Robin load balancing so for",
    "start": "1913679",
    "end": "1922559"
  },
  {
    "text": "these reasons and more it's useful to introduce a different approach something called a service registry a service registry is like a phone book for the",
    "start": "1922559",
    "end": "1929279"
  },
  {
    "text": "cloud it lets you talk about where services are how many of them there are and uh what their identity is without",
    "start": "1929279",
    "end": "1934960"
  },
  {
    "text": "using DNS it also lets you do client side load balancing right client side load balancing is what we're really",
    "start": "1934960",
    "end": "1940519"
  },
  {
    "text": "after here so we're going to use Netflix's Eureka which is one of many",
    "start": "1940519",
    "end": "1945840"
  },
  {
    "text": "supported uh um service Registries we also support Apache zookeeper aachi",
    "start": "1945840",
    "end": "1951320"
  },
  {
    "text": "corpse console and there's preliminary though not in Mainline uh uh support for",
    "start": "1951320",
    "end": "1956440"
  },
  {
    "text": "ETD right so all of these are good options the first three are um already G",
    "start": "1956440",
    "end": "1961720"
  },
  {
    "text": "or they will be ja in the next Brixton release of spring Cloud so to support that I'm going to go to start out",
    "start": "1961720",
    "end": "1968799"
  },
  {
    "text": "spring. and I'll bring in Eureka okay I'm going to remove here",
    "start": "1968799",
    "end": "1974600"
  },
  {
    "text": "start there Eureka service Eureka server",
    "start": "1974600",
    "end": "1979720"
  },
  {
    "text": "generate and then what I'm going to do is a little weird I'm using spring boot to stand up Eureka itself right normally",
    "start": "1979720",
    "end": "1986519"
  },
  {
    "text": "I wouldn't use spring boot for example to stand up zookeeper and I wouldn't use spring boot to stand up uh console which",
    "start": "1986519",
    "end": "1993039"
  },
  {
    "text": "is written in the go language for example right it just happens to be trivial to do so uh in this case but",
    "start": "1993039",
    "end": "1999039"
  },
  {
    "text": "most of what you're going to do is to act as a client to something else as a service registry so I'm going to say UA",
    "start": "1999039",
    "end": "2005519"
  },
  {
    "text": "service application at uh enable UA server I'll go to",
    "start": "2005519",
    "end": "2012919"
  },
  {
    "text": "application. properties and I'll give it a name I'll say spring. application. name equals UA service and I'll say that",
    "start": "2012919",
    "end": "2021320"
  },
  {
    "text": "springcloud config server config hello oh did I forget to add that",
    "start": "2021320",
    "end": "2028760"
  },
  {
    "text": "I did didn't I so I'm gon to add the discovery client as well here dependency spring Cloud starter",
    "start": "2028760",
    "end": "2036760"
  },
  {
    "text": "config and revisit this enable Auto",
    "start": "2036760",
    "end": "2043960"
  },
  {
    "text": "Import server",
    "start": "2052079",
    "end": "2057240"
  },
  {
    "text": "no by the way did you see this this is a new thing that intellig does and it I",
    "start": "2057960",
    "end": "2063919"
  },
  {
    "text": "don't know why this is here I mean I understand why but did you see that tweet there's a there's a poll going on",
    "start": "2063919",
    "end": "2069960"
  },
  {
    "text": "a few weeks ago on on Twitter which is and it said are you an awful person tabs or spaces right this is kind of what",
    "start": "2069960",
    "end": "2076560"
  },
  {
    "text": "that is so anyway um let me see here",
    "start": "2076560",
    "end": "2083358"
  },
  {
    "text": "config server. URI I think I don't",
    "start": "2083359",
    "end": "2088679"
  },
  {
    "text": "know maven",
    "start": "2088679",
    "end": "2092679"
  },
  {
    "text": "I think it's just that I can just copy it from here I suppose configu ey",
    "start": "2099640",
    "end": "2106200"
  },
  {
    "text": "ha so now I'm going to rename this file just as I've done before countless times uh to be bootstrapped up",
    "start": "2107720",
    "end": "2115400"
  },
  {
    "text": "properties okay and I've got that that should do I've got this pointing to the config server where it'll find",
    "start": "2116200",
    "end": "2121400"
  },
  {
    "text": "configuration for the Eureka Service uh and it'll start up on Port 8761",
    "start": "2121400",
    "end": "2128160"
  },
  {
    "text": "as a result so here we are Local Host",
    "start": "2128160",
    "end": "2134119"
  },
  {
    "text": "8761 and there's our sort of strawman basic uh uh Eureka registry ready it to",
    "start": "2134119",
    "end": "2139240"
  },
  {
    "text": "use this is the wetwear console there's also a rest API for machines to talk to of course what I want is to see our",
    "start": "2139240",
    "end": "2145920"
  },
  {
    "text": "reservation service made available for Discovery here I want to see it enumerated in the uh list of",
    "start": "2145920",
    "end": "2151720"
  },
  {
    "text": "applications and uh in order to do that I'm going to go revisit our uh reservation service I'm going to teach",
    "start": "2151720",
    "end": "2158880"
  },
  {
    "text": "it to talk to Eureka by bringing in the uh spring Cloud starter uh",
    "start": "2158880",
    "end": "2165599"
  },
  {
    "text": "Eureka dependency so spring Cloud",
    "start": "2165599",
    "end": "2173119"
  },
  {
    "text": "starter Eureka so that's going to bring in an implementation of the discovery",
    "start": "2173119",
    "end": "2178720"
  },
  {
    "text": "client abstraction the discovery client abstraction is a way of uh it's a it's a",
    "start": "2178720",
    "end": "2185720"
  },
  {
    "text": "client side interface like this discovery client okay that has a few interesting methods",
    "start": "2185720",
    "end": "2192440"
  },
  {
    "text": "get local service instance get instances and get Services it's basically let us",
    "start": "2192440",
    "end": "2197480"
  },
  {
    "text": "letting us ask questions of the registry this is read only you'll notice the discovery client implementations all",
    "start": "2197480",
    "end": "2204040"
  },
  {
    "text": "provide the ability to ask questions of the registry only a few require you to actually talk to the registry to do the",
    "start": "2204040",
    "end": "2209920"
  },
  {
    "text": "to do the registration of the service itself that part is handled for you by the autoconfigured uh uh uh you know",
    "start": "2209920",
    "end": "2216160"
  },
  {
    "text": "implementation but it's not reflected in this interface because it's not common to all of them for example your your average cloud provider something like a",
    "start": "2216160",
    "end": "2222400"
  },
  {
    "text": "cloud Foundry already knows where these Services live you don't need to tell it where reservation service lives it",
    "start": "2222400",
    "end": "2227800"
  },
  {
    "text": "started the thing in the first place so there's no need for you to raise your hand and say I'm here if you want me if",
    "start": "2227800",
    "end": "2233560"
  },
  {
    "text": "you want to find reservation hyen service I live on this host and Port so we're going to let our implementation do",
    "start": "2233560",
    "end": "2239000"
  },
  {
    "text": "that when we have got this here we'll restart and we should see first of all",
    "start": "2239000",
    "end": "2245280"
  },
  {
    "text": "uh when we start when we when we restart this we'll see uh it output we'll see it reflected",
    "start": "2245280",
    "end": "2251800"
  },
  {
    "text": "in the registry itself here there it is so there's our",
    "start": "2251800",
    "end": "2257400"
  },
  {
    "text": "service ready for use it's reflected in the console there we can see that it's running on this host and port with this",
    "start": "2257400",
    "end": "2262880"
  },
  {
    "text": "service ID Etc and when we click on this it goes to the uh info endpoint on my",
    "start": "2262880",
    "end": "2268400"
  },
  {
    "text": "service here but that's not there why is",
    "start": "2268400",
    "end": "2272359"
  },
  {
    "text": "it curious",
    "start": "2273880",
    "end": "2277880"
  },
  {
    "text": "well that's a little weird the it says 8,000 so it'll do the right thing I haven't actually clicked on this link in a while it's going to 8080 that's a",
    "start": "2279200",
    "end": "2285480"
  },
  {
    "text": "weirdness so anyway it's up and running now we can discover now we can talk to it and so this is where the metal meets",
    "start": "2285480",
    "end": "2290839"
  },
  {
    "text": "the road we have the a chance now to stand up a client for our reservation service which is exactly what we want to",
    "start": "2290839",
    "end": "2296960"
  },
  {
    "text": "do this is what we mean by distribution right we're going to build an API sorry",
    "start": "2296960",
    "end": "2303200"
  },
  {
    "text": "we're going to build an edge service we're going to build a rest endpoint but it's going to be an edge service when I talk about Edge Services I'm talking",
    "start": "2303200",
    "end": "2310000"
  },
  {
    "text": "about two different types of things and you can pick and choose what you want there's two common types of edge services that I care about one is called",
    "start": "2310000",
    "end": "2317440"
  },
  {
    "text": "uh a micro proxy right something that just blindly forwards packets from the outside to the services inside the uh",
    "start": "2317440",
    "end": "2324720"
  },
  {
    "text": "inside the data center um and behind the the the load Bouncer and then another one a more specialized one is called an",
    "start": "2324720",
    "end": "2330640"
  },
  {
    "text": "API Gateway which transforms the requests to the services that are behind",
    "start": "2330640",
    "end": "2335920"
  },
  {
    "text": "the load bouncer right um um you may have different use cases that require one or the other or maybe even both",
    "start": "2335920",
    "end": "2341839"
  },
  {
    "text": "we're going to look at both but it's important to understand the distinctions in micro proxy in our case might be",
    "start": "2341839",
    "end": "2347240"
  },
  {
    "text": "enough right so we're going to build a a reservation client here and I'm going to say that it's going to use uh Eureka",
    "start": "2347240",
    "end": "2354440"
  },
  {
    "text": "Discovery it's going to use the config client it's going to use histrix for circuit breakers it's going to use Zuul",
    "start": "2354440",
    "end": "2360200"
  },
  {
    "text": "for micro proxy it's going to use um redis stream processing for that it's going to use Zipkin for distributed",
    "start": "2360200",
    "end": "2366560"
  },
  {
    "text": "tracing and then we'll hit generate we'll open this up in our uh IDE",
    "start": "2366560",
    "end": "2372560"
  },
  {
    "text": "here have some more of this",
    "start": "2372560",
    "end": "2376440"
  },
  {
    "text": "stuff and we'll see at enable Discovery",
    "start": "2379839",
    "end": "2388520"
  },
  {
    "text": "client application. properties no computer say spring. application name",
    "start": "2388520",
    "end": "2395839"
  },
  {
    "text": "equals reservation H client I'm going to say um spring. cloud.",
    "start": "2395839",
    "end": "2402440"
  },
  {
    "text": "configu equals HTTP Local Host 8 8888 okay so that'll",
    "start": "2402440",
    "end": "2411040"
  },
  {
    "text": "be we have to rename that file to bootstrap the properties",
    "start": "2411040",
    "end": "2415640"
  },
  {
    "text": "naturally okay so first thing we want to do maybe micro proxy is enough right what we're going to do is stand up an",
    "start": "2418040",
    "end": "2423920"
  },
  {
    "text": "edge service and have that active the door from the outside from our mobile devices from our watches from our Teslas",
    "start": "2423920",
    "end": "2430000"
  },
  {
    "text": "from our washing machines from whatever into the services that are behind The Ensemble behind the load bouncer behind",
    "start": "2430000",
    "end": "2435640"
  },
  {
    "text": "the firewall right the edge service is going to be stood up through DNS right",
    "start": "2435640",
    "end": "2441480"
  },
  {
    "text": "naturally that's going to be a static thing you're not going to teach your iPhone your Android app or whatever to speak to Eureka that's not going to",
    "start": "2441480",
    "end": "2447359"
  },
  {
    "text": "happen they'll still use DNS they're going to send requests to this Edge service and that edge service is going",
    "start": "2447359",
    "end": "2452599"
  },
  {
    "text": "to mediate the requests inside and then you know forward it onto the right service services this is a a very useful",
    "start": "2452599",
    "end": "2459839"
  },
  {
    "text": "pattern because it means that you can stand up one kind of service and then transform as necessary at this middleman",
    "start": "2459839",
    "end": "2466040"
  },
  {
    "text": "layer this is a nice place also to handle client specific concerns Netflix does this a lot they'll have for example",
    "start": "2466040",
    "end": "2472880"
  },
  {
    "text": "you know hundreds and hundreds of microservices and probably just as many different clients or devices that",
    "start": "2472880",
    "end": "2478480"
  },
  {
    "text": "actually talk to those microservices if these clients have specific concerns that they need to address they it's a",
    "start": "2478480",
    "end": "2484400"
  },
  {
    "text": "non-starter to retrofit every single microservice so instead they handle that at the edge service layer if you have to",
    "start": "2484400",
    "end": "2490079"
  },
  {
    "text": "handle specific types of security do that at the edge service and then forward on to the services in the back end if you have to handle um uh certain",
    "start": "2490079",
    "end": "2497880"
  },
  {
    "text": "types of apis or protocols again do that at the edge service and then forward on afterwards right this is The Edge",
    "start": "2497880",
    "end": "2503839"
  },
  {
    "text": "service this is the door man into your Ensemble into your services so a very simple example of an edge service is a",
    "start": "2503839",
    "end": "2510160"
  },
  {
    "text": "micro proxy take for example an HTML 5 application htl 5 applications can't run",
    "start": "2510160",
    "end": "2516319"
  },
  {
    "text": "a foul of cross Ord request to forgery restrictions right they have to say they have to stay on the same host in",
    "start": "2516319",
    "end": "2522319"
  },
  {
    "text": "Port of course I can add a policy to all of my services saying that I permit uh requests from these places to the",
    "start": "2522319",
    "end": "2529960"
  },
  {
    "text": "service but again if you have 600 Services that's a non-starter much better to just forward the uh requests",
    "start": "2529960",
    "end": "2536560"
  },
  {
    "text": "on a single no node and port to the services in the back end and then get the responses and proxy them backwards",
    "start": "2536560",
    "end": "2542200"
  },
  {
    "text": "so we're going to use zul also from Netflix how many of you are uh up on your Greek and or NE Andor Ghostbusters",
    "start": "2542200",
    "end": "2549079"
  },
  {
    "text": "mythology Zol right the gatekeeper remember he's the",
    "start": "2549079",
    "end": "2556599"
  },
  {
    "text": "gatekeeper and then there's a key master yeah it's terrible so um we're going to",
    "start": "2556599",
    "end": "2563240"
  },
  {
    "text": "use Zu we're going to say at en Zu proxy and all this is going to do is just blindly forward requests from The Edge",
    "start": "2563240",
    "end": "2569160"
  },
  {
    "text": "service into the service that we referenced in the request and maybe that's enough again if you add maybe",
    "start": "2569160",
    "end": "2575200"
  },
  {
    "text": "httv basic or OA at the edge service stand up uh stand up the service and use",
    "start": "2575200",
    "end": "2580839"
  },
  {
    "text": "SSL which is usually a checkbox or even something you can do in Spring Boot and maybe you're done maybe that's enough to",
    "start": "2580839",
    "end": "2587040"
  },
  {
    "text": "to to sort of enable your HTML 5 developers to get everything they need from the back end right uh and maybe",
    "start": "2587040",
    "end": "2594040"
  },
  {
    "text": "that's enough so let's see what we get $999.99 which is my reservation client",
    "start": "2594040",
    "end": "2599160"
  },
  {
    "text": "I'm going to say reservation hyphen service slrv so the context here this",
    "start": "2599160",
    "end": "2605440"
  },
  {
    "text": "part of the URL is the service ID as registered in our registry any registry again it's using uh Eureka in this case",
    "start": "2605440",
    "end": "2612520"
  },
  {
    "text": "but it could have been zookeeper contol whatever right and it's going to forward the request onto the actual service for/",
    "start": "2612520",
    "end": "2619880"
  },
  {
    "text": "services and give me the response just as I had just as if I had made the call to Local Host 8,000 reservations",
    "start": "2619880",
    "end": "2627319"
  },
  {
    "text": "directly right so here's 999999 here's 8,000 8,000 okay proxying",
    "start": "2627319",
    "end": "2633280"
  },
  {
    "text": "in and out no problem at all and that's built on uh uh Netflix's RX Java so it's exceedingly fast Etc okay so this is",
    "start": "2633280",
    "end": "2641000"
  },
  {
    "text": "maybe that's enough like I said maybe that's enough for our use use cases if everything can speak Json you're done",
    "start": "2641000",
    "end": "2646119"
  },
  {
    "text": "right if I have another service called Fu service I can just reference it like that I can say FU service instead right",
    "start": "2646119",
    "end": "2654000"
  },
  {
    "text": "now I can now I can move but let's look at the more complicated case of an API Gateway where I need to do API and/or",
    "start": "2654000",
    "end": "2660760"
  },
  {
    "text": "protocol translation right this is a a very common thing and it may not be you know may not even be may not even be a",
    "start": "2660760",
    "end": "2667599"
  },
  {
    "text": "dramatic transformation or translation is just something you have to take care of so here we're we're going to take the",
    "start": "2667599",
    "end": "2673480"
  },
  {
    "text": "reservations coming from the reservation service strip away all of the surrounding uh the links and the Json",
    "start": "2673480",
    "end": "2679359"
  },
  {
    "text": "and all that and just return the names right a collection of string names it's",
    "start": "2679359",
    "end": "2684680"
  },
  {
    "text": "a nonsensically trivial transformation but it will give us a chance to explore what we're doing here so I'll go back to",
    "start": "2684680",
    "end": "2692000"
  },
  {
    "text": "this kill that out okay and I'm going to build a a rest",
    "start": "2692000",
    "end": "2698599"
  },
  {
    "text": "controller and I'll say it's going to be SE it'll be sat at um rooted at for/",
    "start": "2698599",
    "end": "2705319"
  },
  {
    "text": "reservation so this is the client remember the client talking to the reservation service and I'll say",
    "start": "2705319",
    "end": "2710520"
  },
  {
    "text": "reservation API Gateway rest controller and I'm going to support a very simple use case which is public",
    "start": "2710520",
    "end": "2718400"
  },
  {
    "text": "collection of string get reservation names okay and I'm going to",
    "start": "2718400",
    "end": "2725920"
  },
  {
    "text": "say request mapping equals get value equals",
    "start": "2725920",
    "end": "2731119"
  },
  {
    "text": "reservations or sorry names so it's going to be the the full resolved URL will be for/ reservations names in order",
    "start": "2731119",
    "end": "2738119"
  },
  {
    "text": "to invoke this endpoint using HTTP git once inside I'm going to call the reservation service and do a",
    "start": "2738119",
    "end": "2743960"
  },
  {
    "text": "transformation on the results that I get back from that so I'll say reservations sorry I say rest",
    "start": "2743960",
    "end": "2752359"
  },
  {
    "text": "template like so and what I want to do is I want to say return R this.r",
    "start": "2752839",
    "end": "2760440"
  },
  {
    "text": "template. exchange HTTP",
    "start": "2760440",
    "end": "2765559"
  },
  {
    "text": "colon reservation hyphen service this is the service ID not DNS again this is the",
    "start": "2765559",
    "end": "2772160"
  },
  {
    "text": "ID as it's been registered in our registry okay reservation hyen service",
    "start": "2772160",
    "end": "2777920"
  },
  {
    "text": "forres and I'll use an htb git I'm not passing a body and what I want to do is",
    "start": "2777920",
    "end": "2783200"
  },
  {
    "text": "I want to tell this code to give me an object that represents the reservations that I can use remember how the object",
    "start": "2783200",
    "end": "2789720"
  },
  {
    "text": "was structured it's using hyper media right it's actually using a library called Spring hos right hyper media is",
    "start": "2789720",
    "end": "2796359"
  },
  {
    "text": "the idea of hyper media as the engine of application State it's the library that's being used to generate the payloads that we had in the spring data",
    "start": "2796359",
    "end": "2802880"
  },
  {
    "text": "rest based service including those links and the payload in the bottom in the middle to be able to unwrap that Json",
    "start": "2802880",
    "end": "2809280"
  },
  {
    "text": "and chorus it back into something I'm just going to use the same resource representation the the Java class called",
    "start": "2809280",
    "end": "2815599"
  },
  {
    "text": "resource it's an that has the payload and the and the the links so I'm going to bring back I'm going to bring in",
    "start": "2815599",
    "end": "2823880"
  },
  {
    "text": "uh spring boots support for spring",
    "start": "2823880",
    "end": "2828400"
  },
  {
    "text": "H okay what in the",
    "start": "2832280",
    "end": "2839400"
  },
  {
    "text": "hey not even close oh son of a gun",
    "start": "2839400",
    "end": "2848559"
  },
  {
    "text": "that was hard okay at enable import with's that with that in place I can now",
    "start": "2851640",
    "end": "2856760"
  },
  {
    "text": "just I want to tell the rest template listen what I really want is a collection or rather I want the specific",
    "start": "2856760",
    "end": "2862040"
  },
  {
    "text": "subtype called resources which is a subtype of collection I want a collection of T in this case reservation",
    "start": "2862040",
    "end": "2868720"
  },
  {
    "text": "right I would love to be able to say for this last argument I would love to be able to say um",
    "start": "2868720",
    "end": "2875480"
  },
  {
    "text": "collection of reservation. class of course I'd love to",
    "start": "2875480",
    "end": "2881160"
  },
  {
    "text": "be able to do that but that is not a real thing right the problem is of course because Java doesn't have rified",
    "start": "2881160",
    "end": "2886520"
  },
  {
    "text": "generics right when they did the jav when they introduced generics in Java uh when they introduced generics in Java 5",
    "start": "2886520",
    "end": "2892240"
  },
  {
    "text": "say spring uh they made some compromises in the in the interest of backwards",
    "start": "2892240",
    "end": "2897480"
  },
  {
    "text": "compatibility what it means is that at runtime Java forgets its generic",
    "start": "2897480",
    "end": "2902599"
  },
  {
    "text": "information for instance variables but it retains that information for sub classes if you understand that",
    "start": "2902599",
    "end": "2908400"
  },
  {
    "text": "distinction uh then you can do some interesting things for example if I ask if I ask Java given a list of",
    "start": "2908400",
    "end": "2915440"
  },
  {
    "text": "string you know in an array list no what tell you're doing the E",
    "start": "2915440",
    "end": "2922359"
  },
  {
    "text": "clips thing rude so if I ask it at runtime what is T",
    "start": "2922359",
    "end": "2930040"
  },
  {
    "text": "in this case it doesn't know it forgets it gets burned Away by the compiler at compile time that's aaser right uh",
    "start": "2930040",
    "end": "2937760"
  },
  {
    "text": "however if I do this now it's baked in because I've actually just in essence I've created a",
    "start": "2937760",
    "end": "2943240"
  },
  {
    "text": "Anonymous subass so X is not actually array list it's actually a subass of array list which has no overriding",
    "start": "2943240",
    "end": "2950000"
  },
  {
    "text": "methods that's what that weird syntax means because of that string is now part of the parent child hierarchy right it's",
    "start": "2950000",
    "end": "2957040"
  },
  {
    "text": "it's extending my class X is is extending array list of string not ARR list of object so it's baked into the",
    "start": "2957040",
    "end": "2963000"
  },
  {
    "text": "parent child hierarchy if you understand that then we can use that information to capture generic information at runtime",
    "start": "2963000",
    "end": "2969280"
  },
  {
    "text": "using something called the type token pattern the implementation of that pattern is called the parameterized type",
    "start": "2969280",
    "end": "2976079"
  },
  {
    "text": "reference right inside of spring that's what we're going to use here so parameterized type reference of",
    "start": "2976079",
    "end": "2981440"
  },
  {
    "text": "resources of reservation PTR equals new parameterized",
    "start": "2981440",
    "end": "2987880"
  },
  {
    "text": "type reference and notice I just created an anonymous subass here as well so I can",
    "start": "2987880",
    "end": "2993400"
  },
  {
    "text": "pass that in and that solves half the problem right that solves half of our of our",
    "start": "2993400",
    "end": "2998920"
  },
  {
    "text": "problem but the second problem is where's reservation I don't have that type on the class path I could of course",
    "start": "2998920",
    "end": "3004240"
  },
  {
    "text": "just add the bits from the service itself and add it to the class path but that would go against the very thing I'm",
    "start": "3004240",
    "end": "3009640"
  },
  {
    "text": "trying to do which is to keep myself independently Deployable I want to be able to deploy my client without having",
    "start": "3009640",
    "end": "3015839"
  },
  {
    "text": "to couple myself to Flag Day releases for the service right so I want different timelines I want to be able to",
    "start": "3015839",
    "end": "3021960"
  },
  {
    "text": "evolve my client from the service as necessary um so what I'm going to do is I'm going to create",
    "start": "3021960",
    "end": "3027599"
  },
  {
    "text": "a client side representation I'll say class reservation just a client side dto",
    "start": "3027599",
    "end": "3033040"
  },
  {
    "text": "type thing and by the way you know I've heard but nobody's ever confirmed I've heard that it's possible uh and again",
    "start": "3033040",
    "end": "3039920"
  },
  {
    "text": "nobody's ever proven this to my satisfaction so so I'm just putting this out there it's in theory it's possible",
    "start": "3039920",
    "end": "3046240"
  },
  {
    "text": "that the service could have been written in something besides spring and Java and again that's one of those non Java",
    "start": "3046240",
    "end": "3052960"
  },
  {
    "text": "Spring Library technology com combinations that doesn't really doesn't exist right but but it's out there and",
    "start": "3052960",
    "end": "3058799"
  },
  {
    "text": "in theory that if that's true then I I can definitely not risk coupling myself to that non- Javas Spring Library either",
    "start": "3058799",
    "end": "3065200"
  },
  {
    "text": "so for all these reasons and more it's nice to have the client and the service be decoupled so I'll say private uh well",
    "start": "3065200",
    "end": "3071400"
  },
  {
    "text": "actually just all I want is a reservation name right so I'll say reservation name and I'll say get that",
    "start": "3071400",
    "end": "3078440"
  },
  {
    "text": "okay and there we go so that'll give me what this will give me back",
    "start": "3078440",
    "end": "3084480"
  },
  {
    "text": "is a response in entity of resources of reservation the response entity is the",
    "start": "3084520",
    "end": "3089839"
  },
  {
    "text": "HTTP request envelope that comes back it has the headers and the status code and all that stuff as well as the body the",
    "start": "3089839",
    "end": "3096880"
  },
  {
    "text": "body is of course our resources of reservation which and resources of course is just a collection with links",
    "start": "3096880",
    "end": "3102400"
  },
  {
    "text": "and then the payload is a collection so I'm going to get the the the body I'm going to get the content which is the collection of reservations and I'll say",
    "start": "3102400",
    "end": "3109400"
  },
  {
    "text": "stream do map I'm going to map using java8 lambdas I'm going to map from the",
    "start": "3109400",
    "end": "3114720"
  },
  {
    "text": "reservation to the reservation name and I'll collect the output in a list here I'll say collectors to",
    "start": "3114720",
    "end": "3120680"
  },
  {
    "text": "list and return that back to the client okay so all I've done is I've taken the",
    "start": "3120680",
    "end": "3127319"
  },
  {
    "text": "results mapped them from a collection of uh res reservations to reservation string name or rather reservation name",
    "start": "3127319",
    "end": "3134000"
  },
  {
    "text": "and I've returned that back to the client um if I were calling more than one service at a time this would be",
    "start": "3134000",
    "end": "3140200"
  },
  {
    "text": "something that would be an ideal fit for something like ARX Java right you wouldn't want to do synchronous stepwise",
    "start": "3140200",
    "end": "3146000"
  },
  {
    "text": "sort of uh invocation of multiple services like this it's much better to do it concurrently and then sort of zip",
    "start": "3146000",
    "end": "3151839"
  },
  {
    "text": "the results back together and then send them back but I've only got one request happening here and so on and also bear",
    "start": "3151839",
    "end": "3157280"
  },
  {
    "text": "in mind I don't have a lot of results in this case I've got what did we what we do like five or six records and if I was",
    "start": "3157280",
    "end": "3163359"
  },
  {
    "text": "trying to stream the results it's much better to return an RX Java observable here okay so with that we should be able",
    "start": "3163359",
    "end": "3170359"
  },
  {
    "text": "to stand it up and see it working I'll drink some more of my um whatever this is",
    "start": "3170359",
    "end": "3178119"
  },
  {
    "text": "so Local Host 9999 reservations sln",
    "start": "3183760",
    "end": "3189640"
  },
  {
    "text": "names and there's our collection of names being returned from the service uh back to the HTML 5 client or the iPhone",
    "start": "3189640",
    "end": "3196280"
  },
  {
    "text": "or the watch or whatever okay that's fine works just works just fine uh but we've conveniently for the sake of",
    "start": "3196280",
    "end": "3203119"
  },
  {
    "text": "Simplicity ignored the realities of distributed computing right we all know about the fallacies of Distributing",
    "start": "3203119",
    "end": "3208599"
  },
  {
    "text": "Computing this is not a guarantee right the idea that um that I can call that service and have",
    "start": "3208599",
    "end": "3215119"
  },
  {
    "text": "it be guaranteed to be available is is farsal at best right I need to be a little bit more defensive especially",
    "start": "3215119",
    "end": "3220520"
  },
  {
    "text": "when I'm building Edge Services I can't just send um a stack Trace back to my my",
    "start": "3220520",
    "end": "3225839"
  },
  {
    "text": "iPhone client right that's bad form it's just a really really bad experience for the users so you need to be a little bit more defensive Netflix does this all the",
    "start": "3225839",
    "end": "3232040"
  },
  {
    "text": "time they may have for example a service like the search service which is down and they'll say well the search isn't",
    "start": "3232040",
    "end": "3237280"
  },
  {
    "text": "working but here's a here are some recommendations from across the web something like that right you do",
    "start": "3237280",
    "end": "3243760"
  },
  {
    "text": "something in place of nothing right instead of just throwing up your hands and returning a stack tray so what we",
    "start": "3243760",
    "end": "3249040"
  },
  {
    "text": "want to do is have a fall back experience something stateful uh that will take place if this should fail if",
    "start": "3249040",
    "end": "3254960"
  },
  {
    "text": "the call should fail right when you build microservices you are like I say inviting complexity in the form of",
    "start": "3254960",
    "end": "3261000"
  },
  {
    "text": "Distributing Computing one way to solve that is to use this the the circuit breaker pattern so we're going to use",
    "start": "3261000",
    "end": "3266480"
  },
  {
    "text": "hyrix also uh from Netflix right so H hisy is a circuit breaker it's a",
    "start": "3266480",
    "end": "3272079"
  },
  {
    "text": "stateful flag or stateful watch around a potentially shaky servico service call",
    "start": "3272079",
    "end": "3277640"
  },
  {
    "text": "and if the call explodes it sort of flips the switch and it routes traffic to a fallback path like a fallback uh",
    "start": "3277640",
    "end": "3284480"
  },
  {
    "text": "train track okay so we're gonna we're going to activate that by saying at enable circuit",
    "start": "3284480",
    "end": "3291119"
  },
  {
    "text": "breaker and and then we're going to go up here we're to build a fallback method that'll",
    "start": "3291520",
    "end": "3297920"
  },
  {
    "text": "do you know in this case it'll just return an empty uh array list so I'll say get reservation",
    "start": "3297920",
    "end": "3303760"
  },
  {
    "text": "names fall back and I'll say return clect you know",
    "start": "3303760",
    "end": "3309040"
  },
  {
    "text": "return new array list okay and I'm gonna go up here and",
    "start": "3309040",
    "end": "3314760"
  },
  {
    "text": "I'll say histrix command fallback method equals get reservation names fallback",
    "start": "3314760",
    "end": "3322640"
  },
  {
    "text": "okay uh because remember we have the service registry in place and that load the",
    "start": "3322640",
    "end": "3329640"
  },
  {
    "text": "client side load bouncing is actually happening right now as well so what I didn't explain earlier was when this URL",
    "start": "3329640",
    "end": "3334799"
  },
  {
    "text": "gets executed it grabs something called it grabs the service ID goes to the",
    "start": "3334799",
    "end": "3340280"
  },
  {
    "text": "configured service registry which it knows about through the discovery client abstraction gets all n instances of the",
    "start": "3340280",
    "end": "3346200"
  },
  {
    "text": "service as registered in the registry and has to pick from among them which service to rout the request to if there",
    "start": "3346200",
    "end": "3352880"
  },
  {
    "text": "are 10 then there then by default you have round robin load down and each instance has one in 10 shot of",
    "start": "3352880",
    "end": "3358760"
  },
  {
    "text": "being invoked the component that does the load balancing is something called ribbon",
    "start": "3358760",
    "end": "3364760"
  },
  {
    "text": "ribbon is Netflix's client side load balancing Library it's just that it's just a way of sifting through n items",
    "start": "3364760",
    "end": "3371280"
  },
  {
    "text": "and picking the right one it's programmable you can write an implementation that does what you want",
    "start": "3371280",
    "end": "3376319"
  },
  {
    "text": "and Version Control it and unit test it and then have it configured so that when you use ribbon for a different use case",
    "start": "3376319",
    "end": "3381920"
  },
  {
    "text": "it can use your stateful session aware you know sticky session aware or availability Zone aware or whatever",
    "start": "3381920",
    "end": "3387319"
  },
  {
    "text": "aware load balancer right now you've moved the decision about routing from the service which could change at any",
    "start": "3387319",
    "end": "3392760"
  },
  {
    "text": "minute and may break other clients who have assumptions about that to the CL um to the client where now you can have",
    "start": "3392760",
    "end": "3398880"
  },
  {
    "text": "full control over it right so that's that'll work in this case for one to end instances of the service if there's one",
    "start": "3398880",
    "end": "3405160"
  },
  {
    "text": "or more instances this car will work if there are zero it's going to blow chunks and that's what I'm that's what we're",
    "start": "3405160",
    "end": "3410440"
  },
  {
    "text": "trying to prevent here is is that bad experience so here's the uh the service call working right just as before it's",
    "start": "3410440",
    "end": "3416680"
  },
  {
    "text": "because the service is now available if we go to window oops window reservation",
    "start": "3416680",
    "end": "3422799"
  },
  {
    "text": "service and then we kill it we get the empty collection that's stateful so not",
    "start": "3422799",
    "end": "3429240"
  },
  {
    "text": "only is it going to work but it'll back off eventually and try again later but it won't keep hitting this down service",
    "start": "3429240",
    "end": "3436319"
  },
  {
    "text": "giving it giving it time to recover if you're using a modern technology a modern Cloud platform something like a cloud Foundry right it's going to move",
    "start": "3436319",
    "end": "3443160"
  },
  {
    "text": "Heaven and Earth to make sure that if you say that there should be at least five instances of an application up and running that darn it there will be five",
    "start": "3443160",
    "end": "3450119"
  },
  {
    "text": "instances of that application running but you need to give it time to do its work if something falls down it has to pick it back up and that takes a little",
    "start": "3450119",
    "end": "3455839"
  },
  {
    "text": "bit it takes a few seconds but it still takes time in the meantime you need to build your software to be smart about",
    "start": "3455839",
    "end": "3460880"
  },
  {
    "text": "doing the right thing in that bad experience you know the degraded uh uh case right so we've used rest here to",
    "start": "3460880",
    "end": "3468599"
  },
  {
    "text": "read from one service to another when you move to when you're trying to do rights this isn't quite satisfying",
    "start": "3468599",
    "end": "3474079"
  },
  {
    "text": "enough because you can't make any guarantees if you're looking for distributed State synchronization this invites complexity um The Lazy architect",
    "start": "3474079",
    "end": "3482400"
  },
  {
    "text": "at this point reflexively reaches for something like distributed transactions I urge you to have a shot of whiskey and",
    "start": "3482400",
    "end": "3488200"
  },
  {
    "text": "ignore this impulse at all costs okay um distributed transactions serve only to",
    "start": "3488200",
    "end": "3494720"
  },
  {
    "text": "uh to slow down the aggregate system not to mention they are not actually as guaranteed as we all think they are",
    "start": "3494720",
    "end": "3500559"
  },
  {
    "text": "right so uh instead we're going to use eventual consistency we're going to use messaging right the idea that I can",
    "start": "3500559",
    "end": "3507039"
  },
  {
    "text": "forward forward a right to a buffer which will store it and guarantee eventual delivery so if the service is",
    "start": "3507039",
    "end": "3512880"
  },
  {
    "text": "down it'll work eventually right you have to build your system to be a little bit more tolerant of that but it does",
    "start": "3512880",
    "end": "3518760"
  },
  {
    "text": "have a lot of benefits so let's stand up the reservation service again Actually I don't even think we need",
    "start": "3518760",
    "end": "3524640"
  },
  {
    "text": "to here kill it for now we don't need to do that now so we're gonna go back to the um reservation client we're going to",
    "start": "3524640",
    "end": "3530400"
  },
  {
    "text": "build another endpoint here that will take a right and then forward the right to our reservation",
    "start": "3530400",
    "end": "3537920"
  },
  {
    "text": "service on a message bus on a broker through a message que um I don't want to",
    "start": "3537920",
    "end": "3544280"
  },
  {
    "text": "be too aware of where this broker is I want to have the same sort of uh",
    "start": "3544280",
    "end": "3549359"
  },
  {
    "text": "locational decoupling with my messaging code as the registry gives me for my rest code right I can speak",
    "start": "3549359",
    "end": "3556079"
  },
  {
    "text": "about abstract services using their ID without worrying too much about how that stuff comes together and I can also wire",
    "start": "3556079",
    "end": "3562280"
  },
  {
    "text": "my services together using just IDs in the code I want to have the same ability when I use messaging so what I'm going",
    "start": "3562280",
    "end": "3568319"
  },
  {
    "text": "to use do is I'm I'm going to use something called Spring Cloud stream spring Cloud stream uh is that it's just",
    "start": "3568319",
    "end": "3575880"
  },
  {
    "text": "that it's a way of describing Services messaging Based Services and then comp composing them outside of the actual",
    "start": "3575880",
    "end": "3582640"
  },
  {
    "text": "code in in some sort of extra layer that could be something like spring cloud data flow or you could just do it in",
    "start": "3582640",
    "end": "3588039"
  },
  {
    "text": "configuration right what you're going to do is you're going to say I am going to receive a message or send a message on this abstract thing called a channel",
    "start": "3588039",
    "end": "3594799"
  },
  {
    "text": "channel is is a name conduit basically it's a pipe if you push a message into the pipe it'll come out the other end",
    "start": "3594799",
    "end": "3600640"
  },
  {
    "text": "spring Cloud stream will make sure that that other end is probably a broker you know that will forward the message to",
    "start": "3600640",
    "end": "3605799"
  },
  {
    "text": "some other component what that other component is or where it is or all that stuff that lives in the configuration",
    "start": "3605799",
    "end": "3611240"
  },
  {
    "text": "external to the code which means that if you have a service if you have a stream processing solution where you have one or more services and messages have to",
    "start": "3611240",
    "end": "3617839"
  },
  {
    "text": "flow from one to another to another it's all just configuration if you want to insert something in the middle that's no problem right so we're going to enable",
    "start": "3617839",
    "end": "3625280"
  },
  {
    "text": "spring cloud stre we're going to say at enable binding and this is going to be a source",
    "start": "3625280",
    "end": "3631559"
  },
  {
    "text": "right this is uh the reservation client it's going to be the source or producer of a message of of data into the",
    "start": "3631559",
    "end": "3637720"
  },
  {
    "text": "pipeline so we'll say enable binding source. class now this is an anotation",
    "start": "3637720",
    "end": "3643240"
  },
  {
    "text": "coming from our spring Cloud stream implementation I'm going to use spring Cloud stream reddis you can use kofka or",
    "start": "3643240",
    "end": "3648880"
  },
  {
    "text": "rmq or whatever or redis or you know a lot of different other things um what",
    "start": "3648880",
    "end": "3654440"
  },
  {
    "text": "you what you get when you use this at naal binding is that it's going to look at this this class literal it's going to",
    "start": "3654440",
    "end": "3660599"
  },
  {
    "text": "follow it in this case this is a class literal that we provide out of the box you can use your own interface we don't",
    "start": "3660599",
    "end": "3665880"
  },
  {
    "text": "care just any any interface with message Channel definitions the rest of this is just for",
    "start": "3665880",
    "end": "3672839"
  },
  {
    "text": "convenience you don't need any you don't need any of this stuff all that we care about is this message Channel output",
    "start": "3672839",
    "end": "3678119"
  },
  {
    "text": "message channel is like I said it's that named conduit we leave it to the framework to synthesize to actually",
    "start": "3678119",
    "end": "3683160"
  },
  {
    "text": "create that working thing and then to tie it to some sort of broker to actually handle the plumbing okay all we",
    "start": "3683160",
    "end": "3688920"
  },
  {
    "text": "care about is that once this thing is materialized I can now inject either the message Channel and then qualify using",
    "start": "3688920",
    "end": "3694799"
  },
  {
    "text": "this annotation or just inject an object to type Source either way I can dfference the pipe put messages in there",
    "start": "3694799",
    "end": "3701079"
  },
  {
    "text": "or receive messages from it however I like okay so um I'm going to do that just here",
    "start": "3701079",
    "end": "3708200"
  },
  {
    "text": "I'll say at autowired private source",
    "start": "3708200",
    "end": "3715799"
  },
  {
    "text": "like that okay and I'm going to create a new endpoint that takes a read or write rather so it'll say request mapping",
    "start": "3715960",
    "end": "3722520"
  },
  {
    "text": "method equals post okay and I'm going to say public",
    "start": "3722520",
    "end": "3728079"
  },
  {
    "text": "void right reservation I'm going to say that the request will expl will contain a Json so",
    "start": "3728079",
    "end": "3736079"
  },
  {
    "text": "I'll say it's going to be a Json object that we're going to Marshall from uh the Json into a reservation entity and I'm",
    "start": "3736079",
    "end": "3741839"
  },
  {
    "text": "going to say this do Source do uh output Dot send I'm going to send a message",
    "start": "3741839",
    "end": "3748200"
  },
  {
    "text": "I'll say message of T in this case message of",
    "start": "3748200",
    "end": "3753599"
  },
  {
    "text": "string uh will be message Builder dot or with payload get",
    "start": "3753599",
    "end": "3760480"
  },
  {
    "text": "reservation name. build I'm going to put that in the channel like that and",
    "start": "3760480",
    "end": "3765720"
  },
  {
    "text": "that'll be enough so now we've get we've got something that'll be sent out to on the broker and then it'll land somewhere else right like I said the configuration",
    "start": "3765720",
    "end": "3772319"
  },
  {
    "text": "for that where that actually happens is external so we can go back to our config repo",
    "start": "3772319",
    "end": "3778000"
  },
  {
    "text": "here we can see for example on the uh reservation client config file that we",
    "start": "3778000",
    "end": "3783520"
  },
  {
    "text": "have spring Cloud stream bindings output equals reservations output is asterisk it can",
    "start": "3783520",
    "end": "3790799"
  },
  {
    "text": "be whatever you want that corresponds to the name of the channel in our interface if you have more than one channel then",
    "start": "3790799",
    "end": "3796680"
  },
  {
    "text": "you have more than one entries in your config file that look like this so what we're saying is output Lo The Logical",
    "start": "3796680",
    "end": "3803520"
  },
  {
    "text": "name output in our Java code should connect or synchronize a rendevu with",
    "start": "3803520",
    "end": "3809279"
  },
  {
    "text": "actual memory on some sort of broker somewhere that that can be identified using reservations both the client and the",
    "start": "3809279",
    "end": "3815640"
  },
  {
    "text": "service will agree upon this bit right here this is the name of the memory in the buffer somewhere where the messages will rendevu right similarly if you go",
    "start": "3815640",
    "end": "3822599"
  },
  {
    "text": "to reservation service slm you see spring cloudstream bindings input equals",
    "start": "3822599",
    "end": "3827680"
  },
  {
    "text": "reservations on the reciprocal side okay what that string means depends on the",
    "start": "3827680",
    "end": "3833359"
  },
  {
    "text": "implementation of the binder that you have on the class path in this case we have the reddest binder so it corresponds to a q in redest if you're",
    "start": "3833359",
    "end": "3840640"
  },
  {
    "text": "using a rabom q it correspond to an exchange in a que or a destination or you know whatever depending on the",
    "start": "3840640",
    "end": "3846160"
  },
  {
    "text": "broker okay so now we've got that on the client side the source side let's go back to the sync side the thing that",
    "start": "3846160",
    "end": "3852359"
  },
  {
    "text": "receives the messages right the the consumer and we're going to build the reciprocal code we'll say at enable",
    "start": "3852359",
    "end": "3859440"
  },
  {
    "text": "binding after we brought back in Spring Cloud stream start a redus",
    "start": "3859440",
    "end": "3865759"
  },
  {
    "text": "we'll say sync. class and again sync. class is just a",
    "start": "3866319",
    "end": "3872880"
  },
  {
    "text": "convention I'm using because I've only got one one connective thing here happening but if I have multiple Brokers that have multiple flows that can have",
    "start": "3872880",
    "end": "3879039"
  },
  {
    "text": "an interface with 10 channels on it and just wire them up appropriately so here I'm going to say that I want to use",
    "start": "3879039",
    "end": "3885119"
  },
  {
    "text": "spring integration you know the component scan there I'm going to build a component",
    "start": "3885119",
    "end": "3890839"
  },
  {
    "text": "that will respond it's a message endpoint it'll respond to um",
    "start": "3890839",
    "end": "3896480"
  },
  {
    "text": "reservations that come in from the broker so I'll say reservation processor I'll say uh service",
    "start": "3896480",
    "end": "3903599"
  },
  {
    "text": "activator input equals sync. input public void accept new",
    "start": "3903599",
    "end": "3912839"
  },
  {
    "text": "reservations and the payload will be the string name from the Json that we got on the other side uh and over here I'll do",
    "start": "3912839",
    "end": "3919079"
  },
  {
    "text": "as I did before I'll say at autowired reservation template reservation I'm sorry reservation process no reservation",
    "start": "3919079",
    "end": "3927599"
  },
  {
    "text": "repository and once I've gotten the response I'm going to say save new reservation RN so I'm just going to save",
    "start": "3927599",
    "end": "3934079"
  },
  {
    "text": "the record to the database on the service side but I'll forward their message to the service using messaging",
    "start": "3934079",
    "end": "3940160"
  },
  {
    "text": "okay so this is the service let's start this up this should now",
    "start": "3940160",
    "end": "3945838"
  },
  {
    "text": "work did you hear that no oh so good",
    "start": "3947400",
    "end": "3953559"
  },
  {
    "text": "Merry Christmas oh so uh let's see Local Host 8,000",
    "start": "3953559",
    "end": "3962559"
  },
  {
    "text": "reservations there we are there's that now we go back to the client",
    "start": "3962559",
    "end": "3968000"
  },
  {
    "text": "here see",
    "start": "3968000",
    "end": "3971440"
  },
  {
    "text": "this okay there we are now we go back to here here's our uh",
    "start": "3983640",
    "end": "3988680"
  },
  {
    "text": "micro proxy or rather APA Gateway it's working so let's now instead of reading let's go ahead and send a request I've",
    "start": "3988680",
    "end": "3995599"
  },
  {
    "text": "got a postman request here I'm going to configure a HTTP post to http Local Host 9999 for reservations the body will just",
    "start": "3995599",
    "end": "4004119"
  },
  {
    "text": "be this request it'll be uh I need another name first",
    "start": "4004119",
    "end": "4011160"
  },
  {
    "text": "one class what Ma ma we already did Max has to be unique",
    "start": "4011160",
    "end": "4017079"
  },
  {
    "text": "Victor VI like like that sorry",
    "start": "4017079",
    "end": "4024880"
  },
  {
    "text": "okay okay is that right or no I'm not sure okay uh and then uh that should do",
    "start": "4025799",
    "end": "4031680"
  },
  {
    "text": "so if we see over here we've already got Josh Peter Tasha Eric Susie and Max hit send go there and there's Victor twice",
    "start": "4031680",
    "end": "4038839"
  },
  {
    "text": "because I hit I hit it twice right so it sent the request through reddis out the",
    "start": "4038839",
    "end": "4045520"
  },
  {
    "text": "the other end and then we wrote it to the database that's good right it's fast it gives us the ability to now not worry",
    "start": "4045520",
    "end": "4051640"
  },
  {
    "text": "that even if the res reservation service is down that we're going to drop messages on the floor we get guaranteed",
    "start": "4051640",
    "end": "4056760"
  },
  {
    "text": "consistency eventually this is important um it's easy to pull together complex",
    "start": "4056760",
    "end": "4062160"
  },
  {
    "text": "services like this using spring Cloud a big part of what we talk about when we talk about Cloud native applications",
    "start": "4062160",
    "end": "4067279"
  },
  {
    "text": "however is uh an emphasis on visibility into what the system is doing so let's",
    "start": "4067279",
    "end": "4073240"
  },
  {
    "text": "now turn to two other things before we wind down for the evening one is the histric dashboard which will let us see",
    "start": "4073240",
    "end": "4080480"
  },
  {
    "text": "those stateful circuits in the system and kind of visualize what's happening as uh as traffic flows through those",
    "start": "4080480",
    "end": "4088160"
  },
  {
    "text": "potentially shaky circuits and then we're gonna also look at something called Zipkin which is from Believe It or Not Twitter",
    "start": "4088160",
    "end": "4095120"
  },
  {
    "text": "right you wouldn't know anything about Twitter would you yeah so um here we go let's see first",
    "start": "4095120",
    "end": "4103400"
  },
  {
    "text": "things first start. spring.io we're going to go back here his",
    "start": "4103400",
    "end": "4108480"
  },
  {
    "text": "dashboard hisc dashboard config",
    "start": "4108480",
    "end": "4114080"
  },
  {
    "text": "client okay oops got two of them for no reason",
    "start": "4114080",
    "end": "4119359"
  },
  {
    "text": "okay and all this is is a simple dashboard that expects a heartbeat um",
    "start": "4119359",
    "end": "4124798"
  },
  {
    "text": "stream that we can use that all all the services that have circuit circuit breakers in them uh will emit so we'll",
    "start": "4124799",
    "end": "4131400"
  },
  {
    "text": "say enable districts dashboard we'll say applicationr properties I'm just going to copy this application or bootstrap",
    "start": "4131400",
    "end": "4138600"
  },
  {
    "text": "properties okay and we're going to call this istri",
    "start": "4138600",
    "end": "4146838"
  },
  {
    "text": "dashboard and we'll rename this file to boot strap.",
    "start": "4146839",
    "end": "4155000"
  },
  {
    "text": "properties and we got that so now we can start this up and it's going to just it's a simple",
    "start": "4155000",
    "end": "4161040"
  },
  {
    "text": "dashboard that expects a server send event based stream a heartbeat from the circuits again if you have more than one",
    "start": "4161040",
    "end": "4167238"
  },
  {
    "text": "component which you likely will uh you're going to want to be able to Federate all of the streams from all of the circuits and all of the system into",
    "start": "4167239",
    "end": "4173600"
  },
  {
    "text": "one stream you can do that with something called Spring Cloud turbine which integrates Netflix's turbine which is a a way of federating the streams",
    "start": "4173600",
    "end": "4180600"
  },
  {
    "text": "like that so now I can go to what did I say uh",
    "start": "4180600",
    "end": "4186758"
  },
  {
    "text": "810 810 fort. HTML and there's a little dashboard I'm",
    "start": "4186759",
    "end": "4193719"
  },
  {
    "text": "going to plug in the Stream like I say uh by default I'm going to use the stream on the circuit breaker on the on",
    "start": "4193719",
    "end": "4200960"
  },
  {
    "text": "the reservation client which is called his. stream you can see it's continuously updating it's server send",
    "start": "4200960",
    "end": "4206960"
  },
  {
    "text": "event so whatever you do do not curl this okay uh we're going to paste that",
    "start": "4206960",
    "end": "4212280"
  },
  {
    "text": "in here hit Monitor and now we can",
    "start": "4212280",
    "end": "4219679"
  },
  {
    "text": "see this close that where's our little dashboard here",
    "start": "4219679",
    "end": "4226679"
  },
  {
    "text": "do I have anything whatever 99 99 reservations for names as I make",
    "start": "4227880",
    "end": "4234920"
  },
  {
    "text": "I'm hitting command r as fast as my little fingers will let me on the left it's driving traffic through the circuit",
    "start": "4234920",
    "end": "4240000"
  },
  {
    "text": "and it's driving up the graph upwards right it's moving it upwards trending upwards it's a moving average however so",
    "start": "4240000",
    "end": "4245159"
  },
  {
    "text": "as I lay as if I lay off the gas throttle the gra the gas you'll see uh that eventually the moving average I'm",
    "start": "4245159",
    "end": "4251719"
  },
  {
    "text": "not even making requests anymore immediately immediately you know it'll fall down again right so you can see right now traffic is Flowing very",
    "start": "4251719",
    "end": "4258320"
  },
  {
    "text": "happily through the system we can see that represented here only one circuit but it's very useful now let's go kill",
    "start": "4258320",
    "end": "4263640"
  },
  {
    "text": "our portal reservation service one more time",
    "start": "4263640",
    "end": "4270000"
  },
  {
    "text": "uh okay goodbye now this fails and you can see",
    "start": "4270320",
    "end": "4276360"
  },
  {
    "text": "on the right it's saying that 100% of the requests are failing so you get a big red glowing ever expanding ball",
    "start": "4276360",
    "end": "4282080"
  },
  {
    "text": "telling us that something is wrong this is very important because now I can see what's happening I can see what needs to",
    "start": "4282080",
    "end": "4287159"
  },
  {
    "text": "be done obviously again if you have something like a cloud founder or whatever underneath you it'll pick up the application and eventually things",
    "start": "4287159",
    "end": "4293360"
  },
  {
    "text": "will be fine but now you have visibility into what's happening this is very important um that's one use case the",
    "start": "4293360",
    "end": "4298719"
  },
  {
    "text": "other one is when I when I have a lot of applications I want to be able to trace and correlate what requests cause what",
    "start": "4298719",
    "end": "4305159"
  },
  {
    "text": "kind of trouble right so distributed tracing is something that's in theory very very simple to do in a comp in a",
    "start": "4305159",
    "end": "4310520"
  },
  {
    "text": "complex system um in practice it turns out to be a real pain in the butt what you need to do in theory is propagate",
    "start": "4310520",
    "end": "4317920"
  },
  {
    "text": "some sort of uu ID a correlation ID across the requests for a single request",
    "start": "4317920",
    "end": "4324280"
  },
  {
    "text": "um you know from from a single aggregate request you need to originate the request propagate some sort of uuid in",
    "start": "4324280",
    "end": "4330560"
  },
  {
    "text": "that request and then continue to propagate that U ID across all the contexts where that request uh travels",
    "start": "4330560",
    "end": "4337480"
  },
  {
    "text": "we have an abstraction inside of spring clouds called springcloud sluth Spring Cloud sluth uh provides the",
    "start": "4337480",
    "end": "4345520"
  },
  {
    "text": "instrumentation that you need to um to automatically do that right it'll",
    "start": "4345520",
    "end": "4350600"
  },
  {
    "text": "instrument for example uh HTTP message calls from one service to another it'll instrument spring MVC so that if",
    "start": "4350600",
    "end": "4356560"
  },
  {
    "text": "anything comes in from Spring MVC that Al automatically gets the uh headers added as well it'll instrument Rabbid mq",
    "start": "4356560",
    "end": "4363159"
  },
  {
    "text": "and redis it'll instrument the uh uh Fain declarative res client it'll instrument um just a lot of stuff right",
    "start": "4363159",
    "end": "4369960"
  },
  {
    "text": "it'll handle that automatically all for you uh when you configure it so we have that running in a docker here let's make",
    "start": "4369960",
    "end": "4375760"
  },
  {
    "text": "sure that's",
    "start": "4375760",
    "end": "4378198"
  },
  {
    "text": "working good so now let's go back and teach our our code our reservation service first of all uh to participate",
    "start": "4380880",
    "end": "4389159"
  },
  {
    "text": "in distributed tracing I'm going to go back to the build and make sure that I have spring Cloud starter Zipkin",
    "start": "4389159",
    "end": "4394600"
  },
  {
    "text": "here okay and I'll go back to my code and I'll add an object of type sampler now",
    "start": "4394600",
    "end": "4401880"
  },
  {
    "text": "the reason I need to do this is because spring Cloud stream doesn't know what requests it should trace and which ones",
    "start": "4401880",
    "end": "4408400"
  },
  {
    "text": "it should not sleuth by the way will will Trace um and then collect that",
    "start": "4408400",
    "end": "4414800"
  },
  {
    "text": "information but we have an implantation of spring Cloud sluth that will write out that information to Zipkin so that's what we're using a spring Cloud starter",
    "start": "4414800",
    "end": "4421239"
  },
  {
    "text": "Zipkin which is a specific implementation of the sluth abstraction okay so I'm going to create a sampler",
    "start": "4421239",
    "end": "4427800"
  },
  {
    "text": "object a sampler is useful because again um spring Cloud sluth doesn't know what",
    "start": "4427800",
    "end": "4433480"
  },
  {
    "text": "you want to what you want to trace right so uh you have to tell it you could trace everything but that that's",
    "start": "4433480",
    "end": "4440880"
  },
  {
    "text": "kind of a a terrible idea because if you have all the traffic through all the services being routed to your tracing",
    "start": "4440880",
    "end": "4445920"
  },
  {
    "text": "tool it'll knock it over very very quickly doesn't matter how powerful that tracing tool is uh is sufficiently",
    "start": "4445920",
    "end": "4451320"
  },
  {
    "text": "complicated system so if you're going to have trouble believe me you'll see it in you know 20% of the requests for example",
    "start": "4451320",
    "end": "4457199"
  },
  {
    "text": "right so a good idea is just to create a sampler to tell it which requests or how many requests should be sampled here I'm",
    "start": "4457199",
    "end": "4465320"
  },
  {
    "text": "G to just say always always sample right it's a demo I want to show everything so I'm going to replace it with a Lambda",
    "start": "4465320",
    "end": "4470960"
  },
  {
    "text": "which is nice here we go um command C that that's",
    "start": "4470960",
    "end": "4476120"
  },
  {
    "text": "my reservation service let's go to the reservation client here kill",
    "start": "4476120",
    "end": "4482600"
  },
  {
    "text": "that okay and I need to make sure I have zip",
    "start": "4482600",
    "end": "4488000"
  },
  {
    "text": "gun on the class path here yep I've got there so let's go back to the service restart it",
    "start": "4488000",
    "end": "4496280"
  },
  {
    "text": "okay okay up and running good now go back to",
    "start": "4512280",
    "end": "4517320"
  },
  {
    "text": "the client restart that",
    "start": "4517320",
    "end": "4524719"
  },
  {
    "text": "and close",
    "start": "4527560",
    "end": "4531120"
  },
  {
    "text": "this there's our client request to the reservation Service as I drive traffic through that you'll see it there now I",
    "start": "4537880",
    "end": "4543840"
  },
  {
    "text": "can go back to the uh zipin image running in my Docker container somewhere else I'm going to go here and it shows",
    "start": "4543840",
    "end": "4549679"
  },
  {
    "text": "me reservation client reservation service I'm going to go for reservation client",
    "start": "4549679",
    "end": "4555520"
  },
  {
    "text": "hit find and that'll show it shows me one span one Trace so a trace in the spring",
    "start": "4555520",
    "end": "4561520"
  },
  {
    "text": "Cloud sth abstraction is the aggregate uh distance or or uh travel of a of a",
    "start": "4561520",
    "end": "4567960"
  },
  {
    "text": "request through all the different contexts a span is each individual hop in that Journey okay so we can see the",
    "start": "4567960",
    "end": "4574760"
  },
  {
    "text": "whole span as well as we can see the whole Trace as well as each individual span so less than a minute ago I made a",
    "start": "4574760",
    "end": "4580040"
  },
  {
    "text": "request it's got two spans it says that I made a call in the",
    "start": "4580040",
    "end": "4585120"
  },
  {
    "text": "reservation service it took this many mill milliseconds I can see the timeline I can actually click on it and get the",
    "start": "4585120",
    "end": "4590520"
  },
  {
    "text": "detailed uh headers the information of the request acquir and then the release",
    "start": "4590520",
    "end": "4596000"
  },
  {
    "text": "you know on its Journey the the headers that were propagated from their HTTP request and then over here I can see",
    "start": "4596000",
    "end": "4601679"
  },
  {
    "text": "when it was handled by the other side right so all this information is automatically available for you and visible inside of zipin it makes it very",
    "start": "4601679",
    "end": "4608320"
  },
  {
    "text": "easy to see the aggregate journey of a request in a system if something if service B in the middle of service a and",
    "start": "4608320",
    "end": "4613880"
  },
  {
    "text": "service C falls down and you want to know why this is invaluable right gives you the ability to really understand",
    "start": "4613880",
    "end": "4619239"
  },
  {
    "text": "what your system is doing and as an as a thought experiment remember that sampler",
    "start": "4619239",
    "end": "4625520"
  },
  {
    "text": "could be a refreshable being so you could change the percentage or whatever if you needed to right you could say oh",
    "start": "4625520",
    "end": "4631920"
  },
  {
    "text": "well something's wrong I want to see what's happening that's up the percentage okay so we have looked at",
    "start": "4631920",
    "end": "4637080"
  },
  {
    "text": "just a few things here tonight just a little bit um I regret that we didn't have a lot of time to really kind of get into it you know feel like we didn't",
    "start": "4637080",
    "end": "4643520"
  },
  {
    "text": "cover anything at all but maybe next time maybe next time now today we've looked at how to stand up a very simple",
    "start": "4643520",
    "end": "4649440"
  },
  {
    "text": "little service with a spring boot we've used spring data rest to make short workk of standing up a hypermedia API",
    "start": "4649440",
    "end": "4654600"
  },
  {
    "text": "which is good because it promotes long running long Living Services that uh last uh you know much more than if you",
    "start": "4654600",
    "end": "4660760"
  },
  {
    "text": "built and clients that were coupled coupled to the uh URL topology uh we built uh we stood up a centralized",
    "start": "4660760",
    "end": "4667400"
  },
  {
    "text": "configuration server one of many options a very good one that you can use to centralize configuration and enable",
    "start": "4667400",
    "end": "4673000"
  },
  {
    "text": "things like symmetric decryption and encryption uh and feature Flags live loading of configuration then we introduced a",
    "start": "4673000",
    "end": "4679639"
  },
  {
    "text": "service registry and the service registry gave us the ability to handle clients side load balancing using uh",
    "start": "4679639",
    "end": "4684679"
  },
  {
    "text": "Netflix's ribbon right which is very very powerful because now you don't have to be a victim to the blindness that DNS",
    "start": "4684679",
    "end": "4691159"
  },
  {
    "text": "imposes upon your system and then we looked at how to make our application a little bit more more robust in the face",
    "start": "4691159",
    "end": "4697639"
  },
  {
    "text": "of failure right we used circuit breakers to isolate uh potentially service to Circ service potentially",
    "start": "4697639",
    "end": "4703320"
  },
  {
    "text": "shaky service to service calls and uh to make sure that there was a fallback path if required we used distributed",
    "start": "4703320",
    "end": "4709000"
  },
  {
    "text": "messaging we used eventual consistency to make sure that rights from one one system to another were also guaranteed",
    "start": "4709000",
    "end": "4714760"
  },
  {
    "text": "to eventually be delivered and handled gracefully if the uh service were down then we turned just a little bit and we",
    "start": "4714760",
    "end": "4721440"
  },
  {
    "text": "focused on Shining a light on the state of the system right being robust in the face of failures is one thing being able",
    "start": "4721440",
    "end": "4726760"
  },
  {
    "text": "to react and respond to it is quite another and that requires it requires this is not an option it requires",
    "start": "4726760",
    "end": "4731920"
  },
  {
    "text": "visibility it requires a mature operational Sensibility you don't drive your car with black paint on the windows",
    "start": "4731920",
    "end": "4737120"
  },
  {
    "text": "and all your gauges turned off do you it's a bad idea for one car now imagine you by yourself are driving 100 cars and",
    "start": "4737120",
    "end": "4744080"
  },
  {
    "text": "they're all with one you know windshields obscured and everything it's a dangerous idea right so anything less than complete visibility into the system",
    "start": "4744080",
    "end": "4751000"
  },
  {
    "text": "is asking for trouble it's not worth doing just stop just just don't do it so um when we talk about spring Cloud we",
    "start": "4751000",
    "end": "4757800"
  },
  {
    "text": "care about maturity and respon you know resilience of systems and we also care about being able to see what the system",
    "start": "4757800",
    "end": "4763199"
  },
  {
    "text": "is doing and react accordingly um I didn't even get a chance to really kind of talk to you about what we could have",
    "start": "4763199",
    "end": "4768719"
  },
  {
    "text": "done to uh to handle remediation right there's a lot of great Technologies out there for remediation flows right if you",
    "start": "4768719",
    "end": "4774280"
  },
  {
    "text": "think about this common reasons that systems fall down a lot of that is stuff that based on good tracing and good",
    "start": "4774280",
    "end": "4779320"
  },
  {
    "text": "instrumentation you can respond to automatically you can make the robots carry the pager instead of you right get",
    "start": "4779320",
    "end": "4785239"
  },
  {
    "text": "that night of sleep a good platform like cloudfm",
    "start": "4785239",
    "end": "4790120"
  },
  {
    "text": "I feel like there's a lot more we could talk about spring Cloud also handles uh for example single single signon so if",
    "start": "4794760",
    "end": "4801080"
  },
  {
    "text": "you have more than one service and uh you want to have a a single sign on where you can actually authenticate once",
    "start": "4801080",
    "end": "4807040"
  },
  {
    "text": "and then propagate tokens across your rest Services that's very very dead simple to do o off tokens right that's",
    "start": "4807040",
    "end": "4812520"
  },
  {
    "text": "simple um if you want to see more check out uh start. spring. start your journey",
    "start": "4812520",
    "end": "4818760"
  },
  {
    "text": "with spring if you want to learn more about um spring cloud in specific there are guides that are coming up online on Spring that I for session guides uh I've",
    "start": "4818760",
    "end": "4826040"
  },
  {
    "text": "got a little book you might like and in uh I don't know sometime soon um thank",
    "start": "4826040",
    "end": "4832440"
  },
  {
    "text": "you very much what did you guys all think guys and [Applause]",
    "start": "4832440",
    "end": "4844920"
  },
  {
    "text": "gals yep I it's on G so as I said in the very beginning right up front where did",
    "start": "4844920",
    "end": "4851120"
  },
  {
    "text": "I well it's up yeah it's github.com Josh long beautiful",
    "start": "4851120",
    "end": "4858920"
  },
  {
    "text": "microservices okay so that's that the code in here is actually specific to",
    "start": "4858920",
    "end": "4864800"
  },
  {
    "text": "Brixton I'm using a lot of the new bits inside of springcloud Brixton which should be released this quarter but",
    "start": "4864800",
    "end": "4869920"
  },
  {
    "text": "springcloud Angel is the first 1.0 GA release of spring Cloud this stuff is getting a lot of traction by the by um",
    "start": "4869920",
    "end": "4877360"
  },
  {
    "text": "there are some small mom and pop shops that have really really kind of caught into this stuff so Netflix has already talked very very publicly about how",
    "start": "4877360",
    "end": "4883960"
  },
  {
    "text": "they're using spring cloud in this case to consume their own stuff A lot of times and to consume other people's bids right this is it helps them go faster",
    "start": "4883960",
    "end": "4890840"
  },
  {
    "text": "they like what they're doing but of course there a lot of it a lot of it is uh uh rough right so this is much more",
    "start": "4890840",
    "end": "4896360"
  },
  {
    "text": "efficient and elegant not to mention it offers a lot that they don't have out of the box um BYU anybody he of hear of BYU",
    "start": "4896360",
    "end": "4903159"
  },
  {
    "text": "they're a small mobile analytics company out of China they service like 700 million Chinese people a day anybody no",
    "start": "4903159",
    "end": "4910679"
  },
  {
    "text": "no one okay well they they're using spring Cloud Alibaba Alibaba anybody hear of Alibaba Alibaba they made4",
    "start": "4910679",
    "end": "4918520"
  },
  {
    "text": "billion in one day last year on they're they're like Amazon but four times bigger in terms of single day profits um",
    "start": "4918520",
    "end": "4926520"
  },
  {
    "text": "there's they're also Big Spring Cloud users they've talked about that as well uh his Ticket Master they're they're the",
    "start": "4926520",
    "end": "4933120"
  },
  {
    "text": "masters of tickets anybody here of Ticket Master Ticket Master their whole service platform is on top of spring",
    "start": "4933120",
    "end": "4938880"
  },
  {
    "text": "Cloud right so this is a very very powerful way to build really complex systems uh I hope I hope some of it",
    "start": "4938880",
    "end": "4945360"
  },
  {
    "text": "appeals to you remember I showed you everything as we went you can consume all of the stuff out of cart right just",
    "start": "4945360",
    "end": "4950520"
  },
  {
    "text": "check boxes after all um all right thank you very much if you have questions I'm here for you I appreciate you coming I",
    "start": "4950520",
    "end": "4956120"
  },
  {
    "text": "hope you'll come back again and by the way Twitter right so Starbucks man on the twitters or",
    "start": "4956120",
    "end": "4962800"
  },
  {
    "text": "spring Central for the larger group right there's that don't hesitate to",
    "start": "4962800",
    "end": "4968360"
  },
  {
    "text": "reach out [Applause]",
    "start": "4968360",
    "end": "4981020"
  }
]