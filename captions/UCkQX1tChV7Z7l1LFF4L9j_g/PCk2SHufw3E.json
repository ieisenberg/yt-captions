[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "[Music]",
    "start": "5780",
    "end": "12320"
  },
  {
    "text": "so uh I'm Roland I'm the uh Tech",
    "start": "12320",
    "end": "15839"
  },
  {
    "text": "lead of the AKA project working for",
    "start": "15839",
    "end": "17400"
  },
  {
    "text": "types safe and today I will tell you",
    "start": "17400",
    "end": "20320"
  },
  {
    "text": "about um how I use macros uh to",
    "start": "20320",
    "end": "22680"
  },
  {
    "text": "implement type channels on top of AKA",
    "start": "22680",
    "end": "24960"
  },
  {
    "text": "actors uh that is a project which I",
    "start": "24960",
    "end": "27720"
  },
  {
    "text": "hoped doing since quite a while um it",
    "start": "27720",
    "end": "31240"
  },
  {
    "text": "was sparked um during last scholar Days",
    "start": "31240",
    "end": "34640"
  },
  {
    "text": "by talk by Simon pton Jones talking",
    "start": "34640",
    "end": "36920"
  },
  {
    "text": "about HK in the cloud and so on and all",
    "start": "36920",
    "end": "39399"
  },
  {
    "text": "the nice things you can do there and I",
    "start": "39399",
    "end": "41440"
  },
  {
    "text": "thought that must be possible but um",
    "start": "41440",
    "end": "43800"
  },
  {
    "text": "thinking about it and I talked to to",
    "start": "43800",
    "end": "46079"
  },
  {
    "text": "Miles uh about doing it in the type",
    "start": "46079",
    "end": "48160"
  },
  {
    "text": "system and so on but that seemed too",
    "start": "48160",
    "end": "50480"
  },
  {
    "text": "daunting a task uh so I waited until",
    "start": "50480",
    "end": "54199"
  },
  {
    "text": "macros became available because that",
    "start": "54199",
    "end": "56239"
  },
  {
    "text": "makes it the implementation basically",
    "start": "56239",
    "end": "58239"
  },
  {
    "text": "trivial uh it it's still a bit tricky",
    "start": "58239",
    "end": "60840"
  },
  {
    "text": "but uh it would be a lot more tricky",
    "start": "60840",
    "end": "63519"
  },
  {
    "text": "without macros I'm",
    "start": "63519",
    "end": "65239"
  },
  {
    "text": "sure so what is the problem I'm trying",
    "start": "65240",
    "end": "67520"
  },
  {
    "text": "to solve the problem is uh a line like",
    "start": "67520",
    "end": "70880"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "this so we have some actor and we send",
    "start": "70880",
    "end": "73720"
  },
  {
    "text": "it a message that's command one in this",
    "start": "73720",
    "end": "75759"
  },
  {
    "text": "case this is supposed to be a command",
    "start": "75759",
    "end": "78000"
  },
  {
    "text": "which is understood by that actor that",
    "start": "78000",
    "end": "79520"
  },
  {
    "text": "is clear um but either it was someone",
    "start": "79520",
    "end": "83360"
  },
  {
    "text": "was lazy or something what got",
    "start": "83360",
    "end": "85079"
  },
  {
    "text": "refactored because in truth this does",
    "start": "85079",
    "end": "87799"
  },
  {
    "text": "not send a command it sends the compan",
    "start": "87799",
    "end": "89920"
  },
  {
    "text": "compon object to the case class which",
    "start": "89920",
    "end": "92439"
  },
  {
    "text": "would have been the",
    "start": "92439",
    "end": "94439"
  },
  {
    "text": "command um and the compiler cannot warn",
    "start": "94439",
    "end": "96720"
  },
  {
    "text": "about this the compiler cannot help you",
    "start": "96720",
    "end": "98439"
  },
  {
    "text": "with this and flag it as an error as of",
    "start": "98439",
    "end": "100759"
  },
  {
    "text": "now uh with untyped actors because um",
    "start": "100759",
    "end": "104360"
  },
  {
    "text": "the bang operator or the tell method",
    "start": "104360",
    "end": "106960"
  },
  {
    "text": "takes any as a",
    "start": "106960",
    "end": "109200"
  },
  {
    "text": "message so what we'd like to have is",
    "start": "109200",
    "end": "111759"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "some kind of operation I'm using that",
    "start": "111759",
    "end": "114439"
  },
  {
    "text": "this fancy left pointing Arrow just",
    "start": "114439",
    "end": "117759"
  },
  {
    "text": "because I didn't know anything better up",
    "start": "117759",
    "end": "119680"
  },
  {
    "text": "to now so this sends the message which",
    "start": "119680",
    "end": "122520"
  },
  {
    "text": "is on the right to the actor which is on",
    "start": "122520",
    "end": "124560"
  },
  {
    "text": "the left and uh the compiler will",
    "start": "124560",
    "end": "127240"
  },
  {
    "text": "actually yell at you if you try to use",
    "start": "127240",
    "end": "128920"
  },
  {
    "text": "the companion object and it will not",
    "start": "128920",
    "end": "130360"
  },
  {
    "text": "work that is the idea that the compiler",
    "start": "130360",
    "end": "133400"
  },
  {
    "text": "forces you to do the the right thing",
    "start": "133400",
    "end": "135560"
  },
  {
    "text": "here what that means is that the actor",
    "start": "135560",
    "end": "138560"
  },
  {
    "start": "137000",
    "end": "137000"
  },
  {
    "text": "ref which was on the left uh somehow",
    "start": "138560",
    "end": "140519"
  },
  {
    "text": "needs to know which the type is which is",
    "start": "140519",
    "end": "143680"
  },
  {
    "text": "allowed for the message only then can it",
    "start": "143680",
    "end": "146480"
  },
  {
    "text": "can the compiler check uh that the",
    "start": "146480",
    "end": "148400"
  },
  {
    "text": "message is actually a subtype of the and",
    "start": "148400",
    "end": "150200"
  },
  {
    "text": "that it works um actor refs are produced",
    "start": "150200",
    "end": "152599"
  },
  {
    "text": "by an actor system or within an actor",
    "start": "152599",
    "end": "155480"
  },
  {
    "text": "system using Factory methods and uh they",
    "start": "155480",
    "end": "159080"
  },
  {
    "text": "use actor uh classes so classes",
    "start": "159080",
    "end": "161959"
  },
  {
    "text": "implementing the actor trait um as a",
    "start": "161959",
    "end": "164400"
  },
  {
    "text": "template so in the end it must come from",
    "start": "164400",
    "end": "166920"
  },
  {
    "text": "there nobody else knows so the actor",
    "start": "166920",
    "end": "168959"
  },
  {
    "text": "must declare uh what it's allowed input",
    "start": "168959",
    "end": "171440"
  },
  {
    "text": "types",
    "start": "171440",
    "end": "173080"
  },
  {
    "text": "are then when we have that we can verify",
    "start": "173080",
    "end": "176560"
  },
  {
    "text": "uh the message type against this at the",
    "start": "176560",
    "end": "178959"
  },
  {
    "text": "call site",
    "start": "178959",
    "end": "180640"
  },
  {
    "text": "in AKA we have something else uh every",
    "start": "180640",
    "end": "182560"
  },
  {
    "text": "message sent is accompanied by the",
    "start": "182560",
    "end": "184080"
  },
  {
    "text": "sender reference so there can be replies",
    "start": "184080",
    "end": "187519"
  },
  {
    "text": "and these replies uh it would be really",
    "start": "187519",
    "end": "189720"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "nice if they could also be typed so I",
    "start": "189720",
    "end": "192080"
  },
  {
    "text": "imagine uh we have the ask operation I",
    "start": "192080",
    "end": "195319"
  },
  {
    "text": "have the question mark in in this Arrow",
    "start": "195319",
    "end": "197519"
  },
  {
    "text": "here for to signify this normally you",
    "start": "197519",
    "end": "199799"
  },
  {
    "text": "would get back a future any because the",
    "start": "199799",
    "end": "202239"
  },
  {
    "text": "compiler does not know better with what",
    "start": "202239",
    "end": "204319"
  },
  {
    "text": "the ACR might actually reply but in this",
    "start": "204319",
    "end": "207080"
  },
  {
    "text": "case we have um the knowledge as a",
    "start": "207080",
    "end": "211599"
  },
  {
    "text": "programmer we we write this actor when",
    "start": "211599",
    "end": "213879"
  },
  {
    "text": "it gets a command it gives you back a",
    "start": "213879",
    "end": "216120"
  },
  {
    "text": "response so it should be a future of",
    "start": "216120",
    "end": "218120"
  },
  {
    "text": "response and not of",
    "start": "218120",
    "end": "219799"
  },
  {
    "text": "any what that need uh needs uh is that",
    "start": "219799",
    "end": "222920"
  },
  {
    "start": "222000",
    "end": "222000"
  },
  {
    "text": "the actor F not only needs to know about",
    "start": "222920",
    "end": "224799"
  },
  {
    "text": "the uh input message type it also needs",
    "start": "224799",
    "end": "227480"
  },
  {
    "text": "to know what possible reply type might",
    "start": "227480",
    "end": "230159"
  },
  {
    "text": "be and that again means that the actor",
    "start": "230159",
    "end": "232959"
  },
  {
    "text": "trait needs to be parameterized with",
    "start": "232959",
    "end": "234920"
  },
  {
    "text": "these types and then at the corite of",
    "start": "234920",
    "end": "237040"
  },
  {
    "text": "the ask operation uh we can extract the",
    "start": "237040",
    "end": "240200"
  },
  {
    "text": "reply type out of this ref um to for",
    "start": "240200",
    "end": "244040"
  },
  {
    "text": "example get get you the the right future",
    "start": "244040",
    "end": "246640"
  },
  {
    "text": "or to check when an actor does descend",
    "start": "246640",
    "end": "249239"
  },
  {
    "text": "and then the reply comes that this actor",
    "start": "249239",
    "end": "251280"
  },
  {
    "text": "will actually be able to understand the",
    "start": "251280",
    "end": "254920"
  },
  {
    "text": "response there's one problem uh if we",
    "start": "255320",
    "end": "259000"
  },
  {
    "start": "256000",
    "end": "256000"
  },
  {
    "text": "just allow one type though so if we say",
    "start": "259000",
    "end": "261519"
  },
  {
    "text": "we have a new actor ref which takes a t",
    "start": "261519",
    "end": "265000"
  },
  {
    "text": "and gives you back a u for example um if",
    "start": "265000",
    "end": "268680"
  },
  {
    "text": "you have actors uh which rap other",
    "start": "268680",
    "end": "271639"
  },
  {
    "text": "actors one example would be the reliable",
    "start": "271639",
    "end": "274360"
  },
  {
    "text": "proxy pattern uh which is in in AA",
    "start": "274360",
    "end": "276520"
  },
  {
    "text": "itself or you have a message throttler",
    "start": "276520",
    "end": "279199"
  },
  {
    "text": "so you have some actor which you give a",
    "start": "279199",
    "end": "280960"
  },
  {
    "text": "Target actor ref and this actor takes",
    "start": "280960",
    "end": "284240"
  },
  {
    "text": "the message stream which would go there",
    "start": "284240",
    "end": "287160"
  },
  {
    "text": "and trans transforms it in some way",
    "start": "287160",
    "end": "289720"
  },
  {
    "text": "either by delaying by dropping messages",
    "start": "289720",
    "end": "292400"
  },
  {
    "text": "or by transforming the messages um this",
    "start": "292400",
    "end": "295199"
  },
  {
    "text": "outer actor needs to process two types",
    "start": "295199",
    "end": "298320"
  },
  {
    "text": "of messages the the real business ones",
    "start": "298320",
    "end": "302080"
  },
  {
    "text": "and some management Channel coming from",
    "start": "302080",
    "end": "304199"
  },
  {
    "text": "the side telling for example a throttler",
    "start": "304199",
    "end": "306520"
  },
  {
    "text": "what the message rate uh allowed shall",
    "start": "306520",
    "end": "309400"
  },
  {
    "text": "be and these types are in general not",
    "start": "309400",
    "end": "312120"
  },
  {
    "text": "related at all they are written by",
    "start": "312120",
    "end": "314240"
  },
  {
    "text": "different people possibly in completely",
    "start": "314240",
    "end": "316320"
  },
  {
    "text": "different places and the common super",
    "start": "316320",
    "end": "318600"
  },
  {
    "text": "type will be any ref for all practical",
    "start": "318600",
    "end": "321280"
  },
  {
    "text": "purposes so this means that in order to",
    "start": "321280",
    "end": "324479"
  },
  {
    "text": "avoid this loss of type safety incurred",
    "start": "324479",
    "end": "328199"
  },
  {
    "text": "by wanting to do two channels uh we need",
    "start": "328199",
    "end": "331400"
  },
  {
    "text": "to have really lists of",
    "start": "331400",
    "end": "334759"
  },
  {
    "text": "types and with the reply types so an",
    "start": "334759",
    "end": "338080"
  },
  {
    "text": "actor might reply either with a positive",
    "start": "338080",
    "end": "340280"
  },
  {
    "text": "or negative response for example and we",
    "start": "340280",
    "end": "342120"
  },
  {
    "text": "want to model that so reply types could",
    "start": "342120",
    "end": "345479"
  },
  {
    "text": "also be lists of types and that means um",
    "start": "345479",
    "end": "348960"
  },
  {
    "text": "that what we need to compute is not",
    "start": "348960",
    "end": "351240"
  },
  {
    "text": "simply subtype of something and then the",
    "start": "351240",
    "end": "354080"
  },
  {
    "text": "corresponding one will be the reply type",
    "start": "354080",
    "end": "356479"
  },
  {
    "text": "no we will have to implement something",
    "start": "356479",
    "end": "358000"
  },
  {
    "text": "like a type map and that is I asked uh",
    "start": "358000",
    "end": "362039"
  },
  {
    "text": "uh Martin odesi about it um whether it",
    "start": "362039",
    "end": "365319"
  },
  {
    "text": "would be a good idea to try that in the",
    "start": "365319",
    "end": "366720"
  },
  {
    "text": "type system and he",
    "start": "366720",
    "end": "369080"
  },
  {
    "text": "said yeah I don't",
    "start": "369080",
    "end": "371880"
  },
  {
    "text": "know uh so he was not entirely confident",
    "start": "371880",
    "end": "374639"
  },
  {
    "text": "and this is why I said okay then then I",
    "start": "374639",
    "end": "377000"
  },
  {
    "text": "I'll have to wait for macros uh to do",
    "start": "377000",
    "end": "381160"
  },
  {
    "start": "381000",
    "end": "381000"
  },
  {
    "text": "this when we have this um I thought we",
    "start": "381160",
    "end": "385039"
  },
  {
    "text": "can do something a bit better uh even",
    "start": "385039",
    "end": "387680"
  },
  {
    "text": "than we have today and I thought it",
    "start": "387680",
    "end": "389960"
  },
  {
    "text": "would be more natural if if we want to",
    "start": "389960",
    "end": "392599"
  },
  {
    "text": "model message flows uh that the message",
    "start": "392599",
    "end": "395440"
  },
  {
    "text": "actually flows from from left to right",
    "start": "395440",
    "end": "397680"
  },
  {
    "text": "so the first step was to turn around",
    "start": "397680",
    "end": "399680"
  },
  {
    "text": "these operators I have the message on",
    "start": "399680",
    "end": "401639"
  },
  {
    "text": "the left hand side and then I have the",
    "start": "401639",
    "end": "403560"
  },
  {
    "text": "ask operator uh to ask to send the",
    "start": "403560",
    "end": "406840"
  },
  {
    "text": "message to the first actor which will",
    "start": "406840",
    "end": "408880"
  },
  {
    "text": "give me back a future with the reply and",
    "start": "408880",
    "end": "411120"
  },
  {
    "text": "then that future can be used as an input",
    "start": "411120",
    "end": "413280"
  },
  {
    "text": "for the second ask to the second actor",
    "start": "413280",
    "end": "415919"
  },
  {
    "text": "which gives me back a new future and",
    "start": "415919",
    "end": "418039"
  },
  {
    "text": "that future can be used to to send back",
    "start": "418039",
    "end": "420639"
  },
  {
    "text": "to the original client at some future",
    "start": "420639",
    "end": "423400"
  },
  {
    "text": "future point of time in",
    "start": "423400",
    "end": "425160"
  },
  {
    "text": "time um another thing uh in there I mean",
    "start": "425160",
    "end": "429160"
  },
  {
    "text": "the second line demonstrates a possibly",
    "start": "429160",
    "end": "431840"
  },
  {
    "text": "very common use case that you have uh an",
    "start": "431840",
    "end": "435599"
  },
  {
    "text": "actor which is actually the target of a",
    "start": "435599",
    "end": "437599"
  },
  {
    "text": "spray route or play route or anything",
    "start": "437599",
    "end": "439560"
  },
  {
    "text": "like that it asks some backend service",
    "start": "439560",
    "end": "441800"
  },
  {
    "text": "and then it um needs to transform the",
    "start": "441800",
    "end": "444240"
  },
  {
    "text": "reply coming back making it an HTTP okay",
    "start": "444240",
    "end": "447280"
  },
  {
    "text": "response and then get it back to the",
    "start": "447280",
    "end": "448960"
  },
  {
    "text": "whoever call call the",
    "start": "448960",
    "end": "450800"
  },
  {
    "text": "service and in this sense I would say",
    "start": "450800",
    "end": "454080"
  },
  {
    "text": "since this all of this is now statically",
    "start": "454080",
    "end": "456520"
  },
  {
    "text": "type checked just like you have your map",
    "start": "456520",
    "end": "459560"
  },
  {
    "text": "flat map and and so on operations or",
    "start": "459560",
    "end": "461560"
  },
  {
    "text": "Collections and everything is type",
    "start": "461560",
    "end": "462840"
  },
  {
    "text": "checked these are also completely type",
    "start": "462840",
    "end": "465159"
  },
  {
    "text": "checked like composing functions the",
    "start": "465159",
    "end": "468000"
  },
  {
    "text": "first one you compose the functions of",
    "start": "468000",
    "end": "469720"
  },
  {
    "text": "the two actors you wire them together in",
    "start": "469720",
    "end": "472479"
  },
  {
    "text": "if you look in in the sense of the the P",
    "start": "472479",
    "end": "474800"
  },
  {
    "text": "calculus um if if I'm not mistaken there",
    "start": "474800",
    "end": "478560"
  },
  {
    "text": "um and this can be done from the outside",
    "start": "478560",
    "end": "481639"
  },
  {
    "text": "to make actors actually",
    "start": "481639",
    "end": "485080"
  },
  {
    "text": "compose and the result of all of this uh",
    "start": "485080",
    "end": "488680"
  },
  {
    "text": "would be that you can compose your actor",
    "start": "488680",
    "end": "491039"
  },
  {
    "text": "systems in a typ safe fashion that you",
    "start": "491039",
    "end": "494039"
  },
  {
    "text": "do not need to rely on for example um",
    "start": "494039",
    "end": "497400"
  },
  {
    "text": "tests to verify that you didn't make",
    "start": "497400",
    "end": "499520"
  },
  {
    "text": "some stupid mistakes uh in your match",
    "start": "499520",
    "end": "504280"
  },
  {
    "start": "505000",
    "end": "505000"
  },
  {
    "text": "statements uh I recently uh started",
    "start": "505280",
    "end": "508680"
  },
  {
    "text": "looking into actually reading out in P",
    "start": "508680",
    "end": "510599"
  },
  {
    "text": "calculus because I'm just a physicist",
    "start": "510599",
    "end": "513880"
  },
  {
    "text": "sorry I didn't know about this before I",
    "start": "513880",
    "end": "516360"
  },
  {
    "text": "just wrote that and then um I I think",
    "start": "516360",
    "end": "518959"
  },
  {
    "text": "Miles said yeah are you doing",
    "start": "518959",
    "end": "521000"
  },
  {
    "text": "distributed P calculus I started reading",
    "start": "521000",
    "end": "523320"
  },
  {
    "text": "up on that and I have not yet finished",
    "start": "523320",
    "end": "525200"
  },
  {
    "text": "reading even the first book but I came",
    "start": "525200",
    "end": "526880"
  },
  {
    "text": "to the conclusion that actors might",
    "start": "526880",
    "end": "528760"
  },
  {
    "text": "actually be comp composite processes in",
    "start": "528760",
    "end": "531040"
  },
  {
    "text": "this in this uh calculus and um the",
    "start": "531040",
    "end": "534480"
  },
  {
    "text": "important part is that their types are",
    "start": "534480",
    "end": "536600"
  },
  {
    "text": "structural and not nominal um I think",
    "start": "536600",
    "end": "540160"
  },
  {
    "text": "you'll see what that means in on the",
    "start": "540160",
    "end": "541640"
  },
  {
    "text": "next uh uh next slide and as I showed",
    "start": "541640",
    "end": "545240"
  },
  {
    "text": "you we can do process wiring in a",
    "start": "545240",
    "end": "547480"
  },
  {
    "text": "situational way at",
    "start": "547480",
    "end": "549120"
  },
  {
    "text": "least um but all of this is a pretty",
    "start": "549120",
    "end": "551720"
  },
  {
    "text": "embryonic state of my understanding of P",
    "start": "551720",
    "end": "553640"
  },
  {
    "text": "calculus and actors so uh if if you have",
    "start": "553640",
    "end": "557000"
  },
  {
    "text": "inputs or what like to discuss it I um I",
    "start": "557000",
    "end": "559440"
  },
  {
    "text": "would love to do a session on that",
    "start": "559440",
    "end": "560720"
  },
  {
    "text": "tomorrow uh if someone is interested in",
    "start": "560720",
    "end": "563200"
  },
  {
    "text": "a knowledgeable and and we can we can",
    "start": "563200",
    "end": "565519"
  },
  {
    "text": "get a discussion going um I wrote up uh",
    "start": "565519",
    "end": "569399"
  },
  {
    "text": "all the design rationals I had for this",
    "start": "569399",
    "end": "571680"
  },
  {
    "text": "um on in the AA do this has been merged",
    "start": "571680",
    "end": "574320"
  },
  {
    "text": "into AKA master so you can try it out if",
    "start": "574320",
    "end": "576560"
  },
  {
    "text": "you build from Source or you can wait",
    "start": "576560",
    "end": "578600"
  },
  {
    "text": "for the first Milestone of 22 which",
    "start": "578600",
    "end": "580440"
  },
  {
    "text": "comes out in a week or",
    "start": "580440",
    "end": "582880"
  },
  {
    "text": "so",
    "start": "582880",
    "end": "584399"
  },
  {
    "text": "now let's I mean that was the nice and",
    "start": "584399",
    "end": "587079"
  },
  {
    "text": "easy part now let's descend into the",
    "start": "587079",
    "end": "591480"
  },
  {
    "text": "underworld so uh let me start by by",
    "start": "591480",
    "end": "594440"
  },
  {
    "start": "592000",
    "end": "592000"
  },
  {
    "text": "showing you the types I'm using uh first",
    "start": "594440",
    "end": "597200"
  },
  {
    "text": "of all we need uh type lists as I said",
    "start": "597200",
    "end": "600360"
  },
  {
    "text": "so that's the conell of a type list",
    "start": "600360",
    "end": "602399"
  },
  {
    "text": "right there with the colon plus colon",
    "start": "602399",
    "end": "604560"
  },
  {
    "text": "which takes uh first of all the head of",
    "start": "604560",
    "end": "606600"
  },
  {
    "text": "the list which is a pair of in and out",
    "start": "606600",
    "end": "609560"
  },
  {
    "text": "message type and then the tail obviously",
    "start": "609560",
    "end": "612680"
  },
  {
    "text": "and there is a t nil accompanying it uh",
    "start": "612680",
    "end": "615720"
  },
  {
    "text": "as",
    "start": "615720",
    "end": "616560"
  },
  {
    "text": "usual that is the basic type which which",
    "start": "616560",
    "end": "620560"
  },
  {
    "text": "I'm operating on uh a channel ref is a",
    "start": "620560",
    "end": "623200"
  },
  {
    "text": "value class wrapping an",
    "start": "623200",
    "end": "625120"
  },
  {
    "text": "actori uh whose only purpose is to carry",
    "start": "625120",
    "end": "628440"
  },
  {
    "text": "such a channel list so we can do",
    "start": "628440",
    "end": "631200"
  },
  {
    "text": "computations on it and then there is an",
    "start": "631200",
    "end": "634160"
  },
  {
    "text": "actor mix in called channels so you can",
    "start": "634160",
    "end": "636760"
  },
  {
    "text": "say actor with channels and that",
    "start": "636760",
    "end": "639519"
  },
  {
    "text": "actually has two such type parameters",
    "start": "639519",
    "end": "641360"
  },
  {
    "text": "one for its parent you can you can send",
    "start": "641360",
    "end": "644240"
  },
  {
    "text": "to context. parent uh and one for its s",
    "start": "644240",
    "end": "647800"
  },
  {
    "text": "Channel which it can hand out to",
    "start": "647800",
    "end": "650760"
  },
  {
    "text": "others as there can be many possible",
    "start": "650760",
    "end": "653839"
  },
  {
    "text": "reply types not just one uh for a single",
    "start": "653839",
    "end": "656800"
  },
  {
    "text": "message send um the future which comes",
    "start": "656800",
    "end": "659959"
  },
  {
    "text": "back would either have to have at the",
    "start": "659959",
    "end": "662880"
  },
  {
    "text": "least upper bound only or uh it needs a",
    "start": "662880",
    "end": "666240"
  },
  {
    "text": "more specific type and that's what the",
    "start": "666240",
    "end": "667880"
  },
  {
    "text": "WRA message does uh this is only",
    "start": "667880",
    "end": "670200"
  },
  {
    "text": "necessary because Scola does not support",
    "start": "670200",
    "end": "673360"
  },
  {
    "text": "um type unions natively I think if you",
    "start": "673360",
    "end": "677000"
  },
  {
    "text": "have ideas we can talk",
    "start": "677000",
    "end": "679200"
  },
  {
    "text": "later um so the idea behind all of this",
    "start": "679200",
    "end": "682639"
  },
  {
    "text": "is that all these checks are done at",
    "start": "682639",
    "end": "684440"
  },
  {
    "text": "compile time and they just",
    "start": "684440",
    "end": "686680"
  },
  {
    "text": "vanish the bite code produced shall as",
    "start": "686680",
    "end": "689720"
  },
  {
    "text": "close as possible to not having used any",
    "start": "689720",
    "end": "692560"
  },
  {
    "text": "of this to not lose the performance so",
    "start": "692560",
    "end": "695519"
  },
  {
    "text": "in in the end it will go simply it will",
    "start": "695519",
    "end": "697959"
  },
  {
    "text": "be tell and ask after the type check",
    "start": "697959",
    "end": "700800"
  },
  {
    "text": "with the possible exception of actually",
    "start": "700800",
    "end": "703160"
  },
  {
    "text": "needing to wrap wrapped",
    "start": "703160",
    "end": "706759"
  },
  {
    "text": "messages so how does such an actor look",
    "start": "707760",
    "end": "710720"
  },
  {
    "start": "708000",
    "end": "708000"
  },
  {
    "text": "like this is an actor with channels",
    "start": "710720",
    "end": "713040"
  },
  {
    "text": "which is a slightly strange Echo and the",
    "start": "713040",
    "end": "715680"
  },
  {
    "text": "first parameter um which is T nil here",
    "start": "715680",
    "end": "718720"
  },
  {
    "text": "the type parameter that is the",
    "start": "718720",
    "end": "720639"
  },
  {
    "text": "description of the parent Channel this",
    "start": "720639",
    "end": "722720"
  },
  {
    "text": "actor does not talk to its parent so",
    "start": "722720",
    "end": "725079"
  },
  {
    "text": "empty",
    "start": "725079",
    "end": "726440"
  },
  {
    "text": "list the real one is the second one and",
    "start": "726440",
    "end": "729720"
  },
  {
    "text": "it says it accepts messages of type",
    "start": "729720",
    "end": "732160"
  },
  {
    "text": "string and it may reply with strings",
    "start": "732160",
    "end": "735880"
  },
  {
    "text": "this does not imply that it must reply",
    "start": "735880",
    "end": "738240"
  },
  {
    "text": "with with a string yeah it just confines",
    "start": "738240",
    "end": "741320"
  },
  {
    "text": "the reply type to be at most",
    "start": "741320",
    "end": "743880"
  },
  {
    "text": "string there uh basically two ways of",
    "start": "743880",
    "end": "746120"
  },
  {
    "text": "writing it down um when you say channel",
    "start": "746120",
    "end": "748480"
  },
  {
    "text": "for string then you need to give it a",
    "start": "748480",
    "end": "750399"
  },
  {
    "text": "function to and the reason for that is",
    "start": "750399",
    "end": "753800"
  },
  {
    "text": "um first you need to get the message in",
    "start": "753800",
    "end": "755639"
  },
  {
    "text": "St Str in this case uh which will be",
    "start": "755639",
    "end": "758360"
  },
  {
    "text": "typed statically as string here and the",
    "start": "758360",
    "end": "762440"
  },
  {
    "text": "sender and that is necessary you cannot",
    "start": "762440",
    "end": "764839"
  },
  {
    "text": "just use context. sender or anything",
    "start": "764839",
    "end": "766760"
  },
  {
    "text": "because that is untyped I I wouldn't",
    "start": "766760",
    "end": "769600"
  },
  {
    "text": "know how to attach the changing reply",
    "start": "769600",
    "end": "772720"
  },
  {
    "text": "types uh if there are many of those uh",
    "start": "772720",
    "end": "776000"
  },
  {
    "text": "otherwise so I send in the sender",
    "start": "776000",
    "end": "778040"
  },
  {
    "text": "reference and this sender reference will",
    "start": "778040",
    "end": "779560"
  },
  {
    "text": "only accept strings and that's why this",
    "start": "779560",
    "end": "782240"
  },
  {
    "text": "this Echo works you can also I mean it's",
    "start": "782240",
    "end": "784360"
  },
  {
    "text": "a function too so you can implement it",
    "start": "784360",
    "end": "786360"
  },
  {
    "text": "using partial function syntax if you",
    "start": "786360",
    "end": "790800"
  },
  {
    "text": "wish now these uh lambdas pose the first",
    "start": "790800",
    "end": "794440"
  },
  {
    "start": "792000",
    "end": "792000"
  },
  {
    "text": "problem lambdas are they are parsed and",
    "start": "794440",
    "end": "798120"
  },
  {
    "text": "then when typer sees them in the scalar",
    "start": "798120",
    "end": "800120"
  },
  {
    "text": "compiler in the typer phase um it will",
    "start": "800120",
    "end": "803360"
  },
  {
    "text": "desugared them into anonymous uh inner",
    "start": "803360",
    "end": "806040"
  },
  {
    "text": "classes implementing function two in",
    "start": "806040",
    "end": "808000"
  },
  {
    "text": "this case",
    "start": "808000",
    "end": "809800"
  },
  {
    "text": "the problem is that that happens before",
    "start": "809800",
    "end": "811800"
  },
  {
    "text": "macro in uh invocation if this would be",
    "start": "811800",
    "end": "815680"
  },
  {
    "text": "an argument to the macro and then the",
    "start": "815680",
    "end": "818440"
  },
  {
    "text": "macro would be able to compute all the",
    "start": "818440",
    "end": "821079"
  },
  {
    "text": "types but you couldn't apply the types",
    "start": "821079",
    "end": "823440"
  },
  {
    "text": "to the closure anymore because the",
    "start": "823440",
    "end": "825079"
  },
  {
    "text": "closure has already been dis sugared",
    "start": "825079",
    "end": "827360"
  },
  {
    "text": "that means um well the Lambda is not an",
    "start": "827360",
    "end": "830600"
  },
  {
    "text": "argument to the channel method it",
    "start": "830600",
    "end": "832880"
  },
  {
    "text": "actually um is an argument to the apply",
    "start": "832880",
    "end": "835639"
  },
  {
    "text": "method of whatever is returned from",
    "start": "835639",
    "end": "838040"
  },
  {
    "text": "Channel",
    "start": "838040",
    "end": "839720"
  },
  {
    "text": "um that was the workaround I",
    "start": "839720",
    "end": "842560"
  },
  {
    "text": "found",
    "start": "842560",
    "end": "844160"
  },
  {
    "text": "um yeah so this shows you I call it",
    "start": "844160",
    "end": "847360"
  },
  {
    "text": "behaviorist for want of a better name um",
    "start": "847360",
    "end": "849880"
  },
  {
    "text": "that's basically the uh thing which is",
    "start": "849880",
    "end": "852279"
  },
  {
    "text": "emitted and which has the right apply",
    "start": "852279",
    "end": "854720"
  },
  {
    "text": "type and uh what you have here is um",
    "start": "854720",
    "end": "859079"
  },
  {
    "text": "some arbitrary things so the macro will",
    "start": "859079",
    "end": "861560"
  },
  {
    "text": "calculate this R and it's completely",
    "start": "861560",
    "end": "864079"
  },
  {
    "text": "free in what it what it calculates there",
    "start": "864079",
    "end": "866360"
  },
  {
    "text": "it could also be a function one or",
    "start": "866360",
    "end": "868000"
  },
  {
    "text": "anything else and the compiler would",
    "start": "868000",
    "end": "870079"
  },
  {
    "text": "then type check whatever comes after",
    "start": "870079",
    "end": "871959"
  },
  {
    "text": "channel in the right way this is pretty",
    "start": "871959",
    "end": "874000"
  },
  {
    "text": "convenient I have this code in here for",
    "start": "874000",
    "end": "876519"
  },
  {
    "text": "another reason uh so I want to get the",
    "start": "876519",
    "end": "879160"
  },
  {
    "text": "runtime class because dispatching the",
    "start": "879160",
    "end": "881800"
  },
  {
    "text": "messages at runtime will need to operate",
    "start": "881800",
    "end": "885199"
  },
  {
    "text": "on runtime classes and uh to get the",
    "start": "885199",
    "end": "888320"
  },
  {
    "text": "runtime class of some type it is",
    "start": "888320",
    "end": "891079"
  },
  {
    "text": "advisable to call not to not use T here",
    "start": "891079",
    "end": "894079"
  },
  {
    "text": "simply which is a type but to call Widen",
    "start": "894079",
    "end": "896600"
  },
  {
    "text": "on it uh because otherwise if you use",
    "start": "896600",
    "end": "899279"
  },
  {
    "text": "Singleton types like you have a case",
    "start": "899279",
    "end": "900800"
  },
  {
    "text": "object a you say a do type and you put",
    "start": "900800",
    "end": "903480"
  },
  {
    "text": "it in there it will give some weird",
    "start": "903480",
    "end": "907600"
  },
  {
    "text": "exception now let's look at the macro",
    "start": "908000",
    "end": "910639"
  },
  {
    "text": "itself uh I mean this is just the uh",
    "start": "910639",
    "end": "915320"
  },
  {
    "text": "shell of the macro so what we see here",
    "start": "915320",
    "end": "919399"
  },
  {
    "text": "um we have uh this is the implementation",
    "start": "919399",
    "end": "922160"
  },
  {
    "text": "of the macro and then it has a lot of",
    "start": "922160",
    "end": "924519"
  },
  {
    "text": "type arguments type parameters uh that",
    "start": "924519",
    "end": "928639"
  },
  {
    "text": "this maybe not always the case but it is",
    "start": "928639",
    "end": "931759"
  },
  {
    "text": "the case in here because I'm doing T",
    "start": "931759",
    "end": "934920"
  },
  {
    "text": "type calculations that that's what I'm",
    "start": "934920",
    "end": "936639"
  },
  {
    "text": "doing you see two different types of",
    "start": "936639",
    "end": "940040"
  },
  {
    "text": "arguments these are normal ones yeah",
    "start": "940040",
    "end": "942600"
  },
  {
    "text": "they don't have any type tags the first",
    "start": "942600",
    "end": "945199"
  },
  {
    "text": "three and then you have the one with",
    "start": "945199",
    "end": "947199"
  },
  {
    "text": "type tags uh the one with type tags they",
    "start": "947199",
    "end": "949600"
  },
  {
    "text": "are input parameters so I get the type",
    "start": "949600",
    "end": "951759"
  },
  {
    "text": "tags from the compilation uh of the the",
    "start": "951759",
    "end": "955319"
  },
  {
    "text": "call site of the macro so I can",
    "start": "955319",
    "end": "957160"
  },
  {
    "text": "calculate with them and the other ones",
    "start": "957160",
    "end": "959720"
  },
  {
    "text": "are as we see as we will see output",
    "start": "959720",
    "end": "963120"
  },
  {
    "text": "arguments so to speak need to be",
    "start": "963120",
    "end": "965000"
  },
  {
    "text": "declared there as",
    "start": "965000",
    "end": "966680"
  },
  {
    "text": "well then uh one thing the context on",
    "start": "966680",
    "end": "970319"
  },
  {
    "text": "which this macro is involved um is",
    "start": "970319",
    "end": "972920"
  },
  {
    "text": "passed in here and you can restrict the",
    "start": "972920",
    "end": "975240"
  },
  {
    "text": "prefix type to be just something very",
    "start": "975240",
    "end": "977720"
  },
  {
    "text": "specific that means uh that this macro",
    "start": "977720",
    "end": "980880"
  },
  {
    "text": "can only be used on something which is a",
    "start": "980880",
    "end": "985440"
  },
  {
    "text": "channels and it has the benefit when I",
    "start": "985440",
    "end": "987959"
  },
  {
    "text": "splice here C do prefix do spli it will",
    "start": "987959",
    "end": "991680"
  },
  {
    "text": "actually have the right type so this",
    "start": "991680",
    "end": "994040"
  },
  {
    "text": "this does type check if you don't do",
    "start": "994040",
    "end": "996720"
  },
  {
    "text": "this then there is no type here and you",
    "start": "996720",
    "end": "999319"
  },
  {
    "text": "will get you will have to",
    "start": "999319",
    "end": "1002759"
  },
  {
    "text": "cast uh another thing is um if you ever",
    "start": "1002759",
    "end": "1006319"
  },
  {
    "text": "have tried this you can before the dot",
    "start": "1006319",
    "end": "1008759"
  },
  {
    "text": "spli you can put any expression which",
    "start": "1008759",
    "end": "1010440"
  },
  {
    "text": "returns a tree and uh you could be",
    "start": "1010440",
    "end": "1013000"
  },
  {
    "text": "tempted to put an expression there which",
    "start": "1013000",
    "end": "1015000"
  },
  {
    "text": "contains a REI at least I was tempted at",
    "start": "1015000",
    "end": "1018440"
  },
  {
    "text": "some point Point uh don't do it um I'm",
    "start": "1018440",
    "end": "1021600"
  },
  {
    "text": "using eclipse and there uh you get these",
    "start": "1021600",
    "end": "1024280"
  },
  {
    "text": "yellow popups when you do something",
    "start": "1024280",
    "end": "1026640"
  },
  {
    "text": "wrong um and uh they have a little font",
    "start": "1026640",
    "end": "1030839"
  },
  {
    "text": "displaying the error message and this",
    "start": "1030839",
    "end": "1033120"
  },
  {
    "text": "popup filled the whole",
    "start": "1033120",
    "end": "1034839"
  },
  {
    "text": "screen and it had three dots at the end",
    "start": "1034839",
    "end": "1038000"
  },
  {
    "text": "so um this is something which is",
    "start": "1038000",
    "end": "1041000"
  },
  {
    "text": "apparently not",
    "start": "1041000",
    "end": "1043760"
  },
  {
    "text": "supported so yeah so I I have this prep",
    "start": "1043919",
    "end": "1047000"
  },
  {
    "start": "1047000",
    "end": "1047000"
  },
  {
    "text": "tree here outside and then I can splice",
    "start": "1047000",
    "end": "1049039"
  },
  {
    "text": "in here that that",
    "start": "1049039",
    "end": "1050679"
  },
  {
    "text": "works um another interesting thing is",
    "start": "1050679",
    "end": "1054559"
  },
  {
    "text": "that type tags work if you use the right",
    "start": "1054559",
    "end": "1057640"
  },
  {
    "text": "Universe yeah you have a Universe um",
    "start": "1057640",
    "end": "1060760"
  },
  {
    "text": "that's not shown here that's um C do",
    "start": "1060760",
    "end": "1062840"
  },
  {
    "text": "Universe which",
    "start": "1062840",
    "end": "1064760"
  },
  {
    "text": "is no uh actually not so there is in in",
    "start": "1064760",
    "end": "1069120"
  },
  {
    "text": "C there is a universe and if if you try",
    "start": "1069120",
    "end": "1071799"
  },
  {
    "text": "to use that it will fail because there",
    "start": "1071799",
    "end": "1073760"
  },
  {
    "text": "is no implicit type tag for that path to",
    "start": "1073760",
    "end": "1077400"
  },
  {
    "text": "get to type tag you Universe here is",
    "start": "1077400",
    "end": "1079400"
  },
  {
    "text": "actually the runtime Universe which you",
    "start": "1079400",
    "end": "1080919"
  },
  {
    "text": "need to use and then REI is smart enough",
    "start": "1080919",
    "end": "1083760"
  },
  {
    "text": "to transform this to to transport this",
    "start": "1083760",
    "end": "1086520"
  },
  {
    "text": "type information uh across the",
    "start": "1086520",
    "end": "1088559"
  },
  {
    "text": "reification step that is pretty neat",
    "start": "1088559",
    "end": "1092480"
  },
  {
    "text": "I'll go more in detail about that later",
    "start": "1092480",
    "end": "1094960"
  },
  {
    "text": "and then uh how is this wired up uh we",
    "start": "1094960",
    "end": "1097840"
  },
  {
    "text": "have this tra channels uh which has the",
    "start": "1097840",
    "end": "1100559"
  },
  {
    "text": "parent and our self channel uh type",
    "start": "1100559",
    "end": "1103840"
  },
  {
    "text": "arguments I'm preferring a self type",
    "start": "1103840",
    "end": "1106559"
  },
  {
    "text": "annotation for this one uh that has",
    "start": "1106559",
    "end": "1109159"
  },
  {
    "text": "nothing to do with the reasoning Daniel",
    "start": "1109159",
    "end": "1112200"
  },
  {
    "text": "um presented this morning it's just to",
    "start": "1112200",
    "end": "1114840"
  },
  {
    "text": "force people to write actor with",
    "start": "1114840",
    "end": "1116600"
  },
  {
    "text": "channels because that looks so nice um",
    "start": "1116600",
    "end": "1119520"
  },
  {
    "text": "if I would just extend actor then you",
    "start": "1119520",
    "end": "1121400"
  },
  {
    "text": "could write my actor extends channels",
    "start": "1121400",
    "end": "1124320"
  },
  {
    "text": "that's yeah so I'm I'm I'm being a bit",
    "start": "1124320",
    "end": "1127559"
  },
  {
    "text": "of a",
    "start": "1127559",
    "end": "1129760"
  },
  {
    "text": "here so uh channel is just a normal",
    "start": "1129760",
    "end": "1133039"
  },
  {
    "text": "method which returns some function",
    "start": "1133039",
    "end": "1137159"
  },
  {
    "text": "type yeah it returns something which has",
    "start": "1137159",
    "end": "1139919"
  },
  {
    "text": "an apply method and the most uh General",
    "start": "1139919",
    "end": "1142760"
  },
  {
    "text": "thing I can return due to Contra",
    "start": "1142760",
    "end": "1145000"
  },
  {
    "text": "variance is the function nothing to unit",
    "start": "1145000",
    "end": "1147320"
  },
  {
    "text": "it's not any to unit that was would be",
    "start": "1147320",
    "end": "1148919"
  },
  {
    "text": "the most specific one um and then we",
    "start": "1148919",
    "end": "1152120"
  },
  {
    "text": "call this macro these first three just",
    "start": "1152120",
    "end": "1155960"
  },
  {
    "text": "need to satisfy whatever type bounds",
    "start": "1155960",
    "end": "1158520"
  },
  {
    "text": "were declared here now this is a channel",
    "start": "1158520",
    "end": "1162039"
  },
  {
    "text": "list this is not restricted apart from",
    "start": "1162039",
    "end": "1165600"
  },
  {
    "text": "that that's not",
    "start": "1165600",
    "end": "1167120"
  },
  {
    "text": "checked and um um there was one thing",
    "start": "1167120",
    "end": "1170679"
  },
  {
    "text": "here I wanted to create this new",
    "start": "1170679",
    "end": "1173240"
  },
  {
    "text": "behaviorist but calling new on this um",
    "start": "1173240",
    "end": "1178400"
  },
  {
    "text": "inner class does not work because I",
    "start": "1178400",
    "end": "1181039"
  },
  {
    "text": "would need to call new on c. prefix dos",
    "start": "1181039",
    "end": "1183760"
  },
  {
    "text": "splice that's not valid valid scalar",
    "start": "1183760",
    "end": "1185799"
  },
  {
    "text": "syntax unfortunately this is why I had",
    "start": "1185799",
    "end": "1187919"
  },
  {
    "text": "to introduce this method uh here which",
    "start": "1187919",
    "end": "1191520"
  },
  {
    "text": "just wraps this that's to get around",
    "start": "1191520",
    "end": "1194039"
  },
  {
    "text": "some some syntax",
    "start": "1194039",
    "end": "1195880"
  },
  {
    "text": "limitations and then the macro will",
    "start": "1195880",
    "end": "1198440"
  },
  {
    "text": "return something which conforms to this",
    "start": "1198440",
    "end": "1201240"
  },
  {
    "text": "this is important here yeah that needs",
    "start": "1201240",
    "end": "1203679"
  },
  {
    "text": "to match this one this one needs to be a",
    "start": "1203679",
    "end": "1205799"
  },
  {
    "text": "subtype of whatever is declared at the",
    "start": "1205799",
    "end": "1207919"
  },
  {
    "text": "micro use site and then whatever is",
    "start": "1207919",
    "end": "1210120"
  },
  {
    "text": "reified needs to be a subtype of what I",
    "start": "1210120",
    "end": "1212720"
  },
  {
    "text": "intend to",
    "start": "1212720",
    "end": "1213960"
  },
  {
    "text": "return there are many type checks at",
    "start": "1213960",
    "end": "1216200"
  },
  {
    "text": "play when writing",
    "start": "1216200",
    "end": "1218520"
  },
  {
    "start": "1218000",
    "end": "1218000"
  },
  {
    "text": "macros um next topic let me show you one",
    "start": "1218520",
    "end": "1221960"
  },
  {
    "text": "simple type",
    "start": "1221960",
    "end": "1224480"
  },
  {
    "text": "calculation just to show you what I mean",
    "start": "1224480",
    "end": "1227039"
  },
  {
    "text": "when I said I waited for macros because",
    "start": "1227039",
    "end": "1230039"
  },
  {
    "text": "I think that would have been much harder",
    "start": "1230039",
    "end": "1232400"
  },
  {
    "text": "um to write purely in the type system so",
    "start": "1232400",
    "end": "1237600"
  },
  {
    "text": "first of all we always need to pass",
    "start": "1237600",
    "end": "1239280"
  },
  {
    "text": "around this universe types and",
    "start": "1239280",
    "end": "1241600"
  },
  {
    "text": "everything and symbols and so on they",
    "start": "1241600",
    "end": "1243559"
  },
  {
    "text": "live in a universe uh in the compiler so",
    "start": "1243559",
    "end": "1246880"
  },
  {
    "text": "this channels is universe. type and",
    "start": "1246880",
    "end": "1250000"
  },
  {
    "text": "required is a list of such types and",
    "start": "1250000",
    "end": "1253000"
  },
  {
    "text": "then I just iterate so tail recursively",
    "start": "1253000",
    "end": "1256840"
  },
  {
    "text": "across this um this type list so yeah I",
    "start": "1256840",
    "end": "1260080"
  },
  {
    "text": "have this Con cells um colon plus colon",
    "start": "1260080",
    "end": "1262919"
  },
  {
    "text": "they have two type arguments so I'm",
    "start": "1262919",
    "end": "1264919"
  },
  {
    "text": "always interested in the first type",
    "start": "1264919",
    "end": "1266799"
  },
  {
    "text": "argument and there that was a pair of in",
    "start": "1266799",
    "end": "1268919"
  },
  {
    "text": "and out I'm only interested in the in",
    "start": "1268919",
    "end": "1270960"
  },
  {
    "text": "this match is here I think this match",
    "start": "1270960",
    "end": "1272919"
  },
  {
    "text": "statement will look a lot nicer once we",
    "start": "1272919",
    "end": "1275880"
  },
  {
    "text": "have quasi quotations uh for those uh",
    "start": "1275880",
    "end": "1279360"
  },
  {
    "text": "this manual deconstruction of type bre",
    "start": "1279360",
    "end": "1282559"
  },
  {
    "text": "that is qu kind of the the ugly part but",
    "start": "1282559",
    "end": "1285120"
  },
  {
    "text": "apart from that it's just normal",
    "start": "1285120",
    "end": "1286559"
  },
  {
    "text": "collections operations right I",
    "start": "1286559",
    "end": "1289039"
  },
  {
    "text": "um I filter knot and uh I um yeah take",
    "start": "1289039",
    "end": "1294559"
  },
  {
    "text": "out uh so every type I encounter here by",
    "start": "1294559",
    "end": "1298360"
  },
  {
    "text": "traversing this type level list uh is",
    "start": "1298360",
    "end": "1301320"
  },
  {
    "text": "removed from these list of required",
    "start": "1301320",
    "end": "1302960"
  },
  {
    "text": "types in the usual fashion so that's",
    "start": "1302960",
    "end": "1305400"
  },
  {
    "text": "what I wanted to show here there's one",
    "start": "1305400",
    "end": "1307440"
  },
  {
    "text": "Quirk um I Fil A ticket for that if you",
    "start": "1307440",
    "end": "1311480"
  },
  {
    "text": "could say why isn't why is this inner",
    "start": "1311480",
    "end": "1314200"
  },
  {
    "text": "method necessary it is if you could just",
    "start": "1314200",
    "end": "1317159"
  },
  {
    "text": "do make this one tail recursive um that",
    "start": "1317159",
    "end": "1320720"
  },
  {
    "text": "actually crashes the compiler it doesn't",
    "start": "1320720",
    "end": "1323360"
  },
  {
    "text": "work so mixing tailor recursion",
    "start": "1323360",
    "end": "1327760"
  },
  {
    "text": "specifically with uh these um path",
    "start": "1327760",
    "end": "1330520"
  },
  {
    "text": "dependent types doesn't seem to work",
    "start": "1330520",
    "end": "1332480"
  },
  {
    "text": "this is why I import the universe",
    "start": "1332480",
    "end": "1334600"
  },
  {
    "text": "members here and then access them in",
    "start": "1334600",
    "end": "1336919"
  },
  {
    "text": "here that is not a problem anymore this",
    "start": "1336919",
    "end": "1339080"
  },
  {
    "text": "can be this this is a normal T recursive",
    "start": "1339080",
    "end": "1343120"
  },
  {
    "text": "thing now T type calculation um the",
    "start": "1343120",
    "end": "1347559"
  },
  {
    "text": "point was to return the type so to",
    "start": "1347559",
    "end": "1350400"
  },
  {
    "text": "actually get the type back into the",
    "start": "1350400",
    "end": "1352000"
  },
  {
    "text": "calling context and at first I thought",
    "start": "1352000",
    "end": "1355679"
  },
  {
    "text": "okay this is weird REI is about trees",
    "start": "1355679",
    "end": "1359520"
  },
  {
    "text": "but not so much about type trees how do",
    "start": "1359520",
    "end": "1363039"
  },
  {
    "text": "I return this thing and I the first try",
    "start": "1363039",
    "end": "1365799"
  },
  {
    "text": "was to actually uh write down C do",
    "start": "1365799",
    "end": "1368799"
  },
  {
    "text": "applied type and all these ugly thingies",
    "start": "1368799",
    "end": "1371520"
  },
  {
    "text": "there was screen FS of of implementation",
    "start": "1371520",
    "end": "1374120"
  },
  {
    "text": "for that uh until I discovered that so I",
    "start": "1374120",
    "end": "1378640"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "I declare here reply",
    "start": "1378640",
    "end": "1381320"
  },
  {
    "text": "channels I have an implicit V which is",
    "start": "1381320",
    "end": "1384640"
  },
  {
    "text": "of type type tag of reply channels and",
    "start": "1384640",
    "end": "1388360"
  },
  {
    "text": "that will be picked up by REI when I use",
    "start": "1388360",
    "end": "1391159"
  },
  {
    "text": "this reply channels anywhere so I I left",
    "start": "1391159",
    "end": "1394799"
  },
  {
    "text": "these dots in here to show you this is",
    "start": "1394799",
    "end": "1396320"
  },
  {
    "text": "nested in some other types yeah it's",
    "start": "1396320",
    "end": "1399440"
  },
  {
    "text": "it's down inside them some composite",
    "start": "1399440",
    "end": "1402480"
  },
  {
    "text": "type and it still figures it out and",
    "start": "1402480",
    "end": "1404480"
  },
  {
    "text": "takes this type tag when it encounters",
    "start": "1404480",
    "end": "1407279"
  },
  {
    "text": "that and puts that into the REI tree and",
    "start": "1407279",
    "end": "1409960"
  },
  {
    "text": "then you can put here any type you want",
    "start": "1409960",
    "end": "1413080"
  },
  {
    "text": "you have calculated channels is a u do",
    "start": "1413080",
    "end": "1416279"
  },
  {
    "text": "type and it's just in there and that",
    "start": "1416279",
    "end": "1418440"
  },
  {
    "text": "transports it across the barrier into",
    "start": "1418440",
    "end": "1421039"
  },
  {
    "text": "the macro expans",
    "start": "1421039",
    "end": "1423600"
  },
  {
    "text": "expansion and that simplified The Code",
    "start": "1423600",
    "end": "1426600"
  },
  {
    "text": "by an order of magnitude at",
    "start": "1426600",
    "end": "1429640"
  },
  {
    "text": "least there's one uh little problem uh I",
    "start": "1429640",
    "end": "1432679"
  },
  {
    "start": "1431000",
    "end": "1431000"
  },
  {
    "text": "encountered next uh that is I have an",
    "start": "1432679",
    "end": "1435559"
  },
  {
    "text": "operation uh narrowing um Channel refs",
    "start": "1435559",
    "end": "1439480"
  },
  {
    "text": "so I can remove channels for example",
    "start": "1439480",
    "end": "1442480"
  },
  {
    "text": "input channels without violating any",
    "start": "1442480",
    "end": "1444559"
  },
  {
    "text": "constraints and that is done by a",
    "start": "1444559",
    "end": "1447200"
  },
  {
    "text": "macro but at runtime I can also um that",
    "start": "1447200",
    "end": "1451400"
  },
  {
    "text": "you can look up actors using actor 4 and",
    "start": "1451400",
    "end": "1453440"
  },
  {
    "text": "then you don't get any type information",
    "start": "1453440",
    "end": "1455840"
  },
  {
    "text": "so I have implemented an operation where",
    "start": "1455840",
    "end": "1457559"
  },
  {
    "text": "you can send a message hey do you",
    "start": "1457559",
    "end": "1459679"
  },
  {
    "text": "implement these types is that is that",
    "start": "1459679",
    "end": "1462440"
  },
  {
    "text": "you and uh that does the same thing the",
    "start": "1462440",
    "end": "1465840"
  },
  {
    "text": "same check only at run time uh right I",
    "start": "1465840",
    "end": "1468440"
  },
  {
    "text": "think the same code twice is ugly of",
    "start": "1468440",
    "end": "1470520"
  },
  {
    "text": "course and I just reused it this I I",
    "start": "1470520",
    "end": "1474440"
  },
  {
    "text": "named it X so it's short uh this would",
    "start": "1474440",
    "end": "1477000"
  },
  {
    "text": "be the the missing channels or",
    "start": "1477000",
    "end": "1479200"
  },
  {
    "text": "something uh what I discovered is I have",
    "start": "1479200",
    "end": "1482919"
  },
  {
    "text": "a top at run time I have a type tag from",
    "start": "1482919",
    "end": "1485000"
  },
  {
    "text": "the runtime",
    "start": "1485000",
    "end": "1486120"
  },
  {
    "text": "universe and I pass it in here the macro",
    "start": "1486120",
    "end": "1490520"
  },
  {
    "text": "universe is not a subtype or anything of",
    "start": "1490520",
    "end": "1493320"
  },
  {
    "text": "of the runtime Universe um it is a more",
    "start": "1493320",
    "end": "1496159"
  },
  {
    "text": "General universe but that should work I",
    "start": "1496159",
    "end": "1498960"
  },
  {
    "text": "mean I have a universe right just by um",
    "start": "1498960",
    "end": "1503679"
  },
  {
    "text": "losing this information that we are",
    "start": "1503679",
    "end": "1505600"
  },
  {
    "text": "dealing with statically known the",
    "start": "1505600",
    "end": "1507480"
  },
  {
    "text": "runtime Universe the compiler got very",
    "start": "1507480",
    "end": "1509880"
  },
  {
    "text": "confused and they got runtime",
    "start": "1509880",
    "end": "1511799"
  },
  {
    "text": "exceptions uh what you need to do in",
    "start": "1511799",
    "end": "1513720"
  },
  {
    "text": "this case you need to make an",
    "start": "1513720",
    "end": "1516000"
  },
  {
    "text": "importer uh from this universe to that",
    "start": "1516000",
    "end": "1519840"
  },
  {
    "text": "universe and then when you want to use",
    "start": "1519840",
    "end": "1522399"
  },
  {
    "text": "types like here reply channels need to",
    "start": "1522399",
    "end": "1525640"
  },
  {
    "text": "import them even though this import is",
    "start": "1525640",
    "end": "1528919"
  },
  {
    "text": "just from the same universe to the",
    "start": "1528919",
    "end": "1531720"
  },
  {
    "text": "same I I'm not sure what the bug there",
    "start": "1531720",
    "end": "1534480"
  },
  {
    "text": "is but yeah something which needed",
    "start": "1534480",
    "end": "1537000"
  },
  {
    "text": "figuring",
    "start": "1537000",
    "end": "1538200"
  },
  {
    "text": "out you don't need to do this dance uh",
    "start": "1538200",
    "end": "1541039"
  },
  {
    "text": "for types with come which come with the",
    "start": "1541039",
    "end": "1542520"
  },
  {
    "text": "scalar library though like nothing that",
    "start": "1542520",
    "end": "1545240"
  },
  {
    "text": "just",
    "start": "1545240",
    "end": "1547159"
  },
  {
    "text": "works uh the last topic uh but not the",
    "start": "1547159",
    "end": "1550720"
  },
  {
    "text": "least important is how to test this and",
    "start": "1550720",
    "end": "1552960"
  },
  {
    "text": "I thought yeah this is going to be",
    "start": "1552960",
    "end": "1554360"
  },
  {
    "text": "complicated there are sometimes",
    "start": "1554360",
    "end": "1555760"
  },
  {
    "text": "questions on the main list how to uh um",
    "start": "1555760",
    "end": "1558640"
  },
  {
    "text": "fake such a context and so on to to do",
    "start": "1558640",
    "end": "1561360"
  },
  {
    "text": "it um but if you just decide I want to",
    "start": "1561360",
    "end": "1564760"
  },
  {
    "text": "run some the compiler on some code and",
    "start": "1564760",
    "end": "1567279"
  },
  {
    "text": "and see what it does that is extremely",
    "start": "1567279",
    "end": "1569679"
  },
  {
    "text": "simple you just um need Scala compiler",
    "start": "1569679",
    "end": "1572440"
  },
  {
    "start": "1571000",
    "end": "1571000"
  },
  {
    "text": "on the class path and then you can ask",
    "start": "1572440",
    "end": "1574279"
  },
  {
    "text": "the runtime mirror to make you a toolbox",
    "start": "1574279",
    "end": "1578360"
  },
  {
    "text": "giving some compile time options and uh",
    "start": "1578360",
    "end": "1581360"
  },
  {
    "text": "then on this toolbox you can invoke pars",
    "start": "1581360",
    "end": "1583799"
  },
  {
    "text": "for some string of code and then you can",
    "start": "1583799",
    "end": "1586200"
  },
  {
    "text": "invoke evil on the resulting tree",
    "start": "1586200",
    "end": "1589000"
  },
  {
    "text": "to evaluate it it's quite simple you",
    "start": "1589000",
    "end": "1591200"
  },
  {
    "text": "just need to give it the right class",
    "start": "1591200",
    "end": "1592520"
  },
  {
    "text": "path so it will find everything it",
    "start": "1592520",
    "end": "1596279"
  },
  {
    "text": "needs and then the test looks like this",
    "start": "1596279",
    "end": "1600919"
  },
  {
    "text": "yeah I just write down my code as I",
    "start": "1600919",
    "end": "1603120"
  },
  {
    "text": "would with the import statements and",
    "start": "1603120",
    "end": "1605640"
  },
  {
    "text": "then I have here a channel ref which",
    "start": "1605640",
    "end": "1607640"
  },
  {
    "text": "accepts a returns C and I try to send it",
    "start": "1607640",
    "end": "1610399"
  },
  {
    "text": "a b and that's supposed to fail with a",
    "start": "1610399",
    "end": "1613399"
  },
  {
    "text": "specific error message I think that's",
    "start": "1613399",
    "end": "1615799"
  },
  {
    "text": "quite straightforward",
    "start": "1615799",
    "end": "1619000"
  },
  {
    "text": "so uh that is basically all I thought",
    "start": "1619279",
    "end": "1623640"
  },
  {
    "text": "should go in half an",
    "start": "1623640",
    "end": "1625200"
  },
  {
    "text": "hour thanks for listening",
    "start": "1625200",
    "end": "1629480"
  },
  {
    "text": "[Music]",
    "start": "1632170",
    "end": "1639789"
  }
]