[
  {
    "text": "okay hello last Talk of the day you've",
    "start": "2320",
    "end": "6080"
  },
  {
    "text": "uh you've almost made",
    "start": "6080",
    "end": "8559"
  },
  {
    "text": "it uh I'm going to talk about uh type",
    "start": "8559",
    "end": "11639"
  },
  {
    "text": "parameters and type members uh I'm going",
    "start": "11639",
    "end": "14639"
  },
  {
    "text": "to ask a quick",
    "start": "14639",
    "end": "15680"
  },
  {
    "text": "question Who has uh who has used both",
    "start": "15680",
    "end": "19240"
  },
  {
    "text": "type parameters and type members",
    "start": "19240",
    "end": "20640"
  },
  {
    "text": "somewhere in Scara",
    "start": "20640",
    "end": "22560"
  },
  {
    "text": "code who has used only one or the",
    "start": "22560",
    "end": "27599"
  },
  {
    "text": "other like hands which are going up",
    "start": "28080",
    "end": "30720"
  },
  {
    "text": "which like you're not you're not",
    "start": "30720",
    "end": "32520"
  },
  {
    "text": "confident about admitting to it but uh",
    "start": "32520",
    "end": "34840"
  },
  {
    "text": "so Scala does have these these two",
    "start": "34840",
    "end": "36760"
  },
  {
    "text": "different uh different ways of dealing",
    "start": "36760",
    "end": "38680"
  },
  {
    "text": "with a what's what's a very similar",
    "start": "38680",
    "end": "41239"
  },
  {
    "text": "concept and um in the in the in the 10",
    "start": "41239",
    "end": "45399"
  },
  {
    "text": "years or so that I've been programming",
    "start": "45399",
    "end": "47640"
  },
  {
    "text": "Scala I've I've been aware obviously",
    "start": "47640",
    "end": "50960"
  },
  {
    "text": "that both of these these features are",
    "start": "50960",
    "end": "52800"
  },
  {
    "text": "available and until I started preparing",
    "start": "52800",
    "end": "55359"
  },
  {
    "text": "this talk I was never really I was never",
    "start": "55359",
    "end": "58000"
  },
  {
    "text": "really sure about the reasons why I",
    "start": "58000",
    "end": "59399"
  },
  {
    "text": "wanted to use one or the other my my",
    "start": "59399",
    "end": "60840"
  },
  {
    "text": "sort of my my experience evolved over",
    "start": "60840",
    "end": "63480"
  },
  {
    "text": "those uh o o over those years I was",
    "start": "63480",
    "end": "65280"
  },
  {
    "text": "learning Scala to get some sort of",
    "start": "65280",
    "end": "67240"
  },
  {
    "text": "intuition but I never really had a",
    "start": "67240",
    "end": "68479"
  },
  {
    "text": "formal understanding of why why one or",
    "start": "68479",
    "end": "71280"
  },
  {
    "text": "the other is better uh for for certain",
    "start": "71280",
    "end": "74240"
  },
  {
    "text": "circumstances um so let's let's get",
    "start": "74240",
    "end": "76520"
  },
  {
    "text": "started you're you're probably very",
    "start": "76520",
    "end": "77680"
  },
  {
    "text": "familiar with something like this it's a",
    "start": "77680",
    "end": "79799"
  },
  {
    "text": "it's it's a type with a type parameter",
    "start": "79799",
    "end": "81880"
  },
  {
    "text": "you all know list you all know int",
    "start": "81880",
    "end": "83759"
  },
  {
    "text": "nothing",
    "start": "83759",
    "end": "85759"
  },
  {
    "text": "special um and this is this is what it",
    "start": "85759",
    "end": "88200"
  },
  {
    "text": "looks like in usage we have a we we have",
    "start": "88200",
    "end": "90159"
  },
  {
    "text": "a a very simple value called XS which is",
    "start": "90159",
    "end": "92960"
  },
  {
    "text": "of type list of int and there's there's",
    "start": "92960",
    "end": "94640"
  },
  {
    "text": "the value nothing nothing too scary yet",
    "start": "94640",
    "end": "97560"
  },
  {
    "text": "and this is a simplified version of the",
    "start": "97560",
    "end": "99720"
  },
  {
    "text": "the definition of that that",
    "start": "99720",
    "end": "103159"
  },
  {
    "text": "list now we could have implemented that",
    "start": "103200",
    "end": "105600"
  },
  {
    "text": "or the the the designers of Scala could",
    "start": "105600",
    "end": "107880"
  },
  {
    "text": "have implemented that with a type member",
    "start": "107880",
    "end": "110200"
  },
  {
    "text": "instead let's call it m list for member",
    "start": "110200",
    "end": "112360"
  },
  {
    "text": "member",
    "start": "112360",
    "end": "114240"
  },
  {
    "text": "list this is uh this is a little bit",
    "start": "114240",
    "end": "116439"
  },
  {
    "text": "different we we don't have the type",
    "start": "116439",
    "end": "117439"
  },
  {
    "text": "parameter anymore and we have to specify",
    "start": "117439",
    "end": "119520"
  },
  {
    "text": "uh type and give it a give it a",
    "start": "119520",
    "end": "122960"
  },
  {
    "text": "name now if you wanted to write down",
    "start": "123240",
    "end": "126600"
  },
  {
    "text": "that",
    "start": "126600",
    "end": "127679"
  },
  {
    "text": "type or the equivalent of the type we",
    "start": "127679",
    "end": "130119"
  },
  {
    "text": "saw before you would you would write it",
    "start": "130119",
    "end": "131560"
  },
  {
    "text": "like this you maybe haven't seen this",
    "start": "131560",
    "end": "134680"
  },
  {
    "text": "this before with the uh with with with",
    "start": "134680",
    "end": "136760"
  },
  {
    "text": "the the the bubble on the right hand",
    "start": "136760",
    "end": "138360"
  },
  {
    "text": "side the type refinement where we're",
    "start": "138360",
    "end": "139680"
  },
  {
    "text": "specifying that the element type is int",
    "start": "139680",
    "end": "141280"
  },
  {
    "text": "but this is basically equivalent to list",
    "start": "141280",
    "end": "143640"
  },
  {
    "text": "of in as we saw before you're probably",
    "start": "143640",
    "end": "146160"
  },
  {
    "text": "more familiar with writing the type in",
    "start": "146160",
    "end": "148560"
  },
  {
    "text": "in this form where you just don't bother",
    "start": "148560",
    "end": "151000"
  },
  {
    "text": "with that",
    "start": "151000",
    "end": "153239"
  },
  {
    "text": "refinement but that's effectively the",
    "start": "155760",
    "end": "158200"
  },
  {
    "text": "same as saying well we don't we don't",
    "start": "158200",
    "end": "160200"
  },
  {
    "text": "care about the parameter we don't care",
    "start": "160200",
    "end": "162400"
  },
  {
    "text": "about that inner type value and if we if",
    "start": "162400",
    "end": "165560"
  },
  {
    "text": "we were writing the same the same type",
    "start": "165560",
    "end": "167560"
  },
  {
    "text": "with the same",
    "start": "167560",
    "end": "169120"
  },
  {
    "text": "specificity with type parameters this is",
    "start": "169120",
    "end": "171159"
  },
  {
    "text": "what we'd write we'd have the uh we'd",
    "start": "171159",
    "end": "173239"
  },
  {
    "text": "have list of underscore which is which",
    "start": "173239",
    "end": "174560"
  },
  {
    "text": "is equivalent to list of t for some type",
    "start": "174560",
    "end": "177040"
  },
  {
    "text": "T some unspecified type T so it's an",
    "start": "177040",
    "end": "181120"
  },
  {
    "text": "existential who who's who's happy and",
    "start": "181120",
    "end": "183560"
  },
  {
    "text": "and comfortable with existentials here",
    "start": "183560",
    "end": "186640"
  },
  {
    "text": "there very few people",
    "start": "186640",
    "end": "188720"
  },
  {
    "text": "okay um I'm I'm sure I'm they're not",
    "start": "188720",
    "end": "192120"
  },
  {
    "text": "they're not that complicated but they're",
    "start": "192120",
    "end": "193720"
  },
  {
    "text": "they're one of the one of the kinds of",
    "start": "193720",
    "end": "195080"
  },
  {
    "text": "types in in Scala that you you hopefully",
    "start": "195080",
    "end": "197840"
  },
  {
    "text": "don't see too often and and I think that",
    "start": "197840",
    "end": "199879"
  },
  {
    "text": "underscoring list will probably make you",
    "start": "199879",
    "end": "201560"
  },
  {
    "text": "feel a little bit uncomfortable um",
    "start": "201560",
    "end": "204200"
  },
  {
    "text": "because it it feels like there's there's",
    "start": "204200",
    "end": "205720"
  },
  {
    "text": "something wrong there we we're sort of",
    "start": "205720",
    "end": "207080"
  },
  {
    "text": "emitting that type information which",
    "start": "207080",
    "end": "208599"
  },
  {
    "text": "we'd normally have",
    "start": "208599",
    "end": "211760"
  },
  {
    "text": "but we can actually",
    "start": "212120",
    "end": "214239"
  },
  {
    "text": "write um all of these all combinations",
    "start": "214239",
    "end": "218040"
  },
  {
    "text": "of parameters and members and Universal",
    "start": "218040",
    "end": "221000"
  },
  {
    "text": "and existential",
    "start": "221000",
    "end": "223480"
  },
  {
    "text": "so where the type is fully specified",
    "start": "223480",
    "end": "226159"
  },
  {
    "text": "that that's Universal that's universally",
    "start": "226159",
    "end": "229000"
  },
  {
    "text": "uh it's uh um universally Quantified as",
    "start": "229000",
    "end": "233239"
  },
  {
    "text": "a as a type which means everywhere we",
    "start": "233239",
    "end": "235239"
  },
  {
    "text": "know what that everywhere that's",
    "start": "235239",
    "end": "236400"
  },
  {
    "text": "specified we know what that that inner",
    "start": "236400",
    "end": "238439"
  },
  {
    "text": "type is uh",
    "start": "238439",
    "end": "240920"
  },
  {
    "text": "and I don't know if you can see the the",
    "start": "240920",
    "end": "243760"
  },
  {
    "text": "the cursor there you'll you'll",
    "start": "243760",
    "end": "247159"
  },
  {
    "text": "notice something about these uh the",
    "start": "247159",
    "end": "250120"
  },
  {
    "text": "these two ways of writing um me me",
    "start": "250120",
    "end": "253280"
  },
  {
    "text": "existential member types and Universal",
    "start": "253280",
    "end": "257040"
  },
  {
    "text": "parameter types they're shorter than the",
    "start": "257040",
    "end": "259479"
  },
  {
    "text": "other two options so the syntax in Scala",
    "start": "259479",
    "end": "262759"
  },
  {
    "text": "is very much biased towards writing",
    "start": "262759",
    "end": "266080"
  },
  {
    "text": "parameters universally Quantified and",
    "start": "266080",
    "end": "269160"
  },
  {
    "text": "writing",
    "start": "269160",
    "end": "270240"
  },
  {
    "text": "uh type members existentially",
    "start": "270240",
    "end": "274320"
  },
  {
    "text": "Quantified so this is this is really",
    "start": "274320",
    "end": "276240"
  },
  {
    "text": "important if if we if we wanted to uh",
    "start": "276240",
    "end": "278840"
  },
  {
    "text": "universally quantify a member or",
    "start": "278840",
    "end": "281120"
  },
  {
    "text": "existentially quantify a parameter we",
    "start": "281120",
    "end": "283520"
  },
  {
    "text": "would have to write one of these two",
    "start": "283520",
    "end": "284560"
  },
  {
    "text": "options here which I mean they're just",
    "start": "284560",
    "end": "286600"
  },
  {
    "text": "long and cumbersome it's it's really not",
    "start": "286600",
    "end": "288400"
  },
  {
    "text": "what we want to be writing uh at least",
    "start": "288400",
    "end": "290440"
  },
  {
    "text": "not frequently in in Scala",
    "start": "290440",
    "end": "293280"
  },
  {
    "text": "code but you can you can do everything",
    "start": "293280",
    "end": "296800"
  },
  {
    "text": "you you you can write all of these uh",
    "start": "296800",
    "end": "298880"
  },
  {
    "text": "all combinations of of these things you",
    "start": "298880",
    "end": "300919"
  },
  {
    "text": "can even I don't know if anyone",
    "start": "300919",
    "end": "302560"
  },
  {
    "text": "recognizes what what I've written here",
    "start": "302560",
    "end": "306039"
  },
  {
    "text": "anyone this is this is the same this is",
    "start": "306039",
    "end": "308320"
  },
  {
    "text": "the same thing did I did I hear an F was",
    "start": "308320",
    "end": "312160"
  },
  {
    "text": "did F bounded polymorphism if you if",
    "start": "312160",
    "end": "314759"
  },
  {
    "text": "you've ever ever seen this before this",
    "start": "314759",
    "end": "316240"
  },
  {
    "text": "is kind of a a bit like a recursive type",
    "start": "316240",
    "end": "319560"
  },
  {
    "text": "uh type parameter here we can write that",
    "start": "319560",
    "end": "321960"
  },
  {
    "text": "as a type member if we really want to we",
    "start": "321960",
    "end": "323800"
  },
  {
    "text": "can we we need all this all this stuff",
    "start": "323800",
    "end": "326240"
  },
  {
    "text": "here but it's it's completely possible",
    "start": "326240",
    "end": "327840"
  },
  {
    "text": "and it works in in basically the same",
    "start": "327840",
    "end": "329440"
  },
  {
    "text": "way",
    "start": "329440",
    "end": "330520"
  },
  {
    "text": "it's just that this is a very strong",
    "start": "330520",
    "end": "332120"
  },
  {
    "text": "case for uh suggesting that a type",
    "start": "332120",
    "end": "334160"
  },
  {
    "text": "parameter would be more appropriate than",
    "start": "334160",
    "end": "336319"
  },
  {
    "text": "a type",
    "start": "336319",
    "end": "338759"
  },
  {
    "text": "member uh so I had I had some speaker",
    "start": "339360",
    "end": "341680"
  },
  {
    "text": "speaker notes actually which were meant",
    "start": "341680",
    "end": "342840"
  },
  {
    "text": "to tell me what why I was showing all of",
    "start": "342840",
    "end": "344440"
  },
  {
    "text": "these slides but uh I've I've long since",
    "start": "344440",
    "end": "346600"
  },
  {
    "text": "departed from this",
    "start": "346600",
    "end": "348759"
  },
  {
    "text": "script so uh yeah anyway um so if if we",
    "start": "348759",
    "end": "352600"
  },
  {
    "text": "had an instance of uh an M list here Our",
    "start": "352600",
    "end": "355639"
  },
  {
    "text": "member list this is our this is our",
    "start": "355639",
    "end": "357319"
  },
  {
    "text": "mocked up type member version of a of a",
    "start": "357319",
    "end": "361400"
  },
  {
    "text": "list and we give that the Type M list",
    "start": "361400",
    "end": "364240"
  },
  {
    "text": "we've we've all of a sudden lost all of",
    "start": "364240",
    "end": "366360"
  },
  {
    "text": "the the information we knew about the",
    "start": "366360",
    "end": "368599"
  },
  {
    "text": "type member which we can see on the",
    "start": "368599",
    "end": "371639"
  },
  {
    "text": "right hand side is is int it's a it's an",
    "start": "371639",
    "end": "374360"
  },
  {
    "text": "M mlist of inss but as soon as we",
    "start": "374360",
    "end": "377160"
  },
  {
    "text": "ascribe this type here mlist without the",
    "start": "377160",
    "end": "380840"
  },
  {
    "text": "refinement we've lost that information",
    "start": "380840",
    "end": "383039"
  },
  {
    "text": "and we can never we can never gain that",
    "start": "383039",
    "end": "384400"
  },
  {
    "text": "back unless we artificially uh cast to",
    "start": "384400",
    "end": "387080"
  },
  {
    "text": "the type again",
    "start": "387080",
    "end": "390560"
  },
  {
    "text": "and the same thing in uh in in type",
    "start": "391280",
    "end": "394560"
  },
  {
    "text": "parameter form would look like this and",
    "start": "394560",
    "end": "395880"
  },
  {
    "text": "and we we have this we have this big",
    "start": "395880",
    "end": "397919"
  },
  {
    "text": "hint that some something's being lost by",
    "start": "397919",
    "end": "399800"
  },
  {
    "text": "this this underscore you can see",
    "start": "399800",
    "end": "403240"
  },
  {
    "text": "here but here's an example where that",
    "start": "404280",
    "end": "406520"
  },
  {
    "text": "doesn't",
    "start": "406520",
    "end": "407520"
  },
  {
    "text": "matter if we had a method which was",
    "start": "407520",
    "end": "409680"
  },
  {
    "text": "basically just getting getting the",
    "start": "409680",
    "end": "411080"
  },
  {
    "text": "length of a of a list we we're not",
    "start": "411080",
    "end": "413160"
  },
  {
    "text": "actually",
    "start": "413160",
    "end": "414199"
  },
  {
    "text": "using any information from the type",
    "start": "414199",
    "end": "416479"
  },
  {
    "text": "parameter",
    "start": "416479",
    "end": "418199"
  },
  {
    "text": "here so we we can we can call this",
    "start": "418199",
    "end": "420800"
  },
  {
    "text": "method with a list of ins list of",
    "start": "420800",
    "end": "422319"
  },
  {
    "text": "strings but the return type is",
    "start": "422319",
    "end": "426240"
  },
  {
    "text": "int it doesn't matter what the type is",
    "start": "426240",
    "end": "428440"
  },
  {
    "text": "so we can we can very safely and very",
    "start": "428440",
    "end": "430120"
  },
  {
    "text": "comfortably ignore it we can make this",
    "start": "430120",
    "end": "432280"
  },
  {
    "text": "an",
    "start": "432280",
    "end": "433319"
  },
  {
    "text": "existential and the the we have we have",
    "start": "433319",
    "end": "437479"
  },
  {
    "text": "this Choice as to whether we whether we",
    "start": "437479",
    "end": "439240"
  },
  {
    "text": "make a",
    "start": "439240",
    "end": "440160"
  },
  {
    "text": "parameter uh whether we have we make an",
    "start": "440160",
    "end": "442400"
  },
  {
    "text": "inner type a parameter or a member and",
    "start": "442400",
    "end": "446120"
  },
  {
    "text": "it's cases like this that sort of",
    "start": "446120",
    "end": "448240"
  },
  {
    "text": "indicate to us which we think is the",
    "start": "448240",
    "end": "450039"
  },
  {
    "text": "more appropriate solution if we're",
    "start": "450039",
    "end": "452160"
  },
  {
    "text": "frequently finding we're calling uh",
    "start": "452160",
    "end": "456479"
  },
  {
    "text": "we're referring to a type um hiding or",
    "start": "456479",
    "end": "460440"
  },
  {
    "text": "forgetting forgetting deliberately",
    "start": "460440",
    "end": "462240"
  },
  {
    "text": "forgetting the information of the inner",
    "start": "462240",
    "end": "464240"
  },
  {
    "text": "type then that's maybe an indication it",
    "start": "464240",
    "end": "466720"
  },
  {
    "text": "should be a type",
    "start": "466720",
    "end": "468599"
  },
  {
    "text": "member if we're frequently needing to",
    "start": "468599",
    "end": "470960"
  },
  {
    "text": "add the refinement to our type members",
    "start": "470960",
    "end": "473479"
  },
  {
    "text": "uh to to our types with the type members",
    "start": "473479",
    "end": "475159"
  },
  {
    "text": "to to specify what that type is that's",
    "start": "475159",
    "end": "476960"
  },
  {
    "text": "probably an indication that it it should",
    "start": "476960",
    "end": "478400"
  },
  {
    "text": "maybe be a parameter",
    "start": "478400",
    "end": "480000"
  },
  {
    "text": "but in all cases you have the",
    "start": "480000",
    "end": "481159"
  },
  {
    "text": "alternative you can always you can",
    "start": "481159",
    "end": "482479"
  },
  {
    "text": "always write it the other way if you",
    "start": "482479",
    "end": "483599"
  },
  {
    "text": "want to and an indication as to how how",
    "start": "483599",
    "end": "487479"
  },
  {
    "text": "how frequently you'll need to uh go go",
    "start": "487479",
    "end": "489960"
  },
  {
    "text": "one way or the other is how much of the",
    "start": "489960",
    "end": "492879"
  },
  {
    "text": "API how much of the public API of that",
    "start": "492879",
    "end": "495240"
  },
  {
    "text": "type exposes the uh the the the inner",
    "start": "495240",
    "end": "499520"
  },
  {
    "text": "type here now this is sort of the",
    "start": "499520",
    "end": "502919"
  },
  {
    "text": "exceptional case where we've we've got",
    "start": "502919",
    "end": "505120"
  },
  {
    "text": "uh some we've got a list which has a lot",
    "start": "505120",
    "end": "506879"
  },
  {
    "text": "of methods that that do refer to the the",
    "start": "506879",
    "end": "509080"
  },
  {
    "text": "type like just the apply method you get",
    "start": "509080",
    "end": "511120"
  },
  {
    "text": "you get a value from it or the head",
    "start": "511120",
    "end": "512560"
  },
  {
    "text": "method it it uses the the the the type",
    "start": "512560",
    "end": "516279"
  },
  {
    "text": "of the list in the return type of uh of",
    "start": "516279",
    "end": "520440"
  },
  {
    "text": "that method",
    "start": "520440",
    "end": "522240"
  },
  {
    "text": "call but this this exceptional case we",
    "start": "522240",
    "end": "525399"
  },
  {
    "text": "we have length which doesn't refer to it",
    "start": "525399",
    "end": "527240"
  },
  {
    "text": "at all it always consistently returns",
    "start": "527240",
    "end": "529279"
  },
  {
    "text": "int",
    "start": "529279",
    "end": "530680"
  },
  {
    "text": "so it it's a matter of judging it's a",
    "start": "530680",
    "end": "533000"
  },
  {
    "text": "matter of judgment as to how much the",
    "start": "533000",
    "end": "534800"
  },
  {
    "text": "API you think needs to needs to track",
    "start": "534800",
    "end": "537120"
  },
  {
    "text": "that type and how much doesn't and I",
    "start": "537120",
    "end": "540120"
  },
  {
    "text": "mean there's various reasons why you",
    "start": "540120",
    "end": "541920"
  },
  {
    "text": "might want to uh why why you might want",
    "start": "541920",
    "end": "545440"
  },
  {
    "text": "to uh forget forget information um I'm",
    "start": "545440",
    "end": "549600"
  },
  {
    "text": "going to show",
    "start": "549600",
    "end": "550800"
  },
  {
    "text": "you show you an example here this is a",
    "start": "550800",
    "end": "553839"
  },
  {
    "text": "uh a little um a a toy type class I I'll",
    "start": "553839",
    "end": "559000"
  },
  {
    "text": "let you glance this for a second this is",
    "start": "559000",
    "end": "561399"
  },
  {
    "text": "a type class for joining um joining a",
    "start": "561399",
    "end": "565200"
  },
  {
    "text": "collection of things from one type into",
    "start": "565200",
    "end": "566920"
  },
  {
    "text": "another type so joining a collection of",
    "start": "566920",
    "end": "568320"
  },
  {
    "text": "characters into a string for example I'm",
    "start": "568320",
    "end": "570680"
  },
  {
    "text": "not going to show you any any",
    "start": "570680",
    "end": "571720"
  },
  {
    "text": "implementations but uh it's it's called",
    "start": "571720",
    "end": "575200"
  },
  {
    "text": "a joiner it takes an element which would",
    "start": "575200",
    "end": "576880"
  },
  {
    "text": "be the sort of the character type and",
    "start": "576880",
    "end": "580040"
  },
  {
    "text": "I've I've implemented it with a return",
    "start": "580040",
    "end": "582480"
  },
  {
    "text": "Type R or so the return Type R which",
    "start": "582480",
    "end": "585640"
  },
  {
    "text": "I've I've chosen to use a type member",
    "start": "585640",
    "end": "587920"
  },
  {
    "text": "for and it's only got one one useful",
    "start": "587920",
    "end": "590560"
  },
  {
    "text": "method join which takes a sequence of of",
    "start": "590560",
    "end": "592839"
  },
  {
    "text": "elements so may maybe characters and",
    "start": "592839",
    "end": "595360"
  },
  {
    "text": "returns a string or or whatever is",
    "start": "595360",
    "end": "597519"
  },
  {
    "text": "appropriate",
    "start": "597519",
    "end": "599600"
  },
  {
    "text": "and we might use that that Joiner in in",
    "start": "599600",
    "end": "602760"
  },
  {
    "text": "a method like",
    "start": "602760",
    "end": "605480"
  },
  {
    "text": "this so we we we we call we call this",
    "start": "605560",
    "end": "609279"
  },
  {
    "text": "method we we pass it some characters and",
    "start": "609279",
    "end": "612600"
  },
  {
    "text": "the compiler will go off and look for an",
    "start": "612600",
    "end": "614640"
  },
  {
    "text": "implicit and it will it will find an",
    "start": "614640",
    "end": "618200"
  },
  {
    "text": "implicit like this one so maybe we've",
    "start": "618200",
    "end": "620720"
  },
  {
    "text": "got a character Joiner somewhere in",
    "start": "620720",
    "end": "622200"
  },
  {
    "text": "scope and the type of that is uh Joiner",
    "start": "622200",
    "end": "625720"
  },
  {
    "text": "for characters where the return type is",
    "start": "625720",
    "end": "628399"
  },
  {
    "text": "string",
    "start": "628399",
    "end": "630720"
  },
  {
    "text": "is is that is that okay is everyone sort",
    "start": "630720",
    "end": "632279"
  },
  {
    "text": "of sufficiently familiar with type",
    "start": "632279",
    "end": "633959"
  },
  {
    "text": "classes or like the vague idea to to",
    "start": "633959",
    "end": "636880"
  },
  {
    "text": "appreciate",
    "start": "636880",
    "end": "638920"
  },
  {
    "text": "that Now can anyone tell me what the",
    "start": "638920",
    "end": "642040"
  },
  {
    "text": "type of J",
    "start": "642040",
    "end": "644920"
  },
  {
    "text": "is sorry say that louder",
    "start": "647720",
    "end": "652240"
  },
  {
    "text": "join",
    "start": "652240",
    "end": "654959"
  },
  {
    "text": "uh no so assuming it's been um resolved",
    "start": "654959",
    "end": "659320"
  },
  {
    "text": "miles you put your hand up go",
    "start": "659320",
    "end": "662320"
  },
  {
    "text": "on so there's a couple of possible",
    "start": "662320",
    "end": "665120"
  },
  {
    "text": "answers",
    "start": "665120",
    "end": "666560"
  },
  {
    "text": "and okay so",
    "start": "666560",
    "end": "669279"
  },
  {
    "text": "um the the the compiler knows a little",
    "start": "669279",
    "end": "672279"
  },
  {
    "text": "bit more than maybe you",
    "start": "672279",
    "end": "674120"
  },
  {
    "text": "realize in in in within the signature of",
    "start": "674120",
    "end": "677440"
  },
  {
    "text": "this",
    "start": "677440",
    "end": "678519"
  },
  {
    "text": "method so you you might look at this and",
    "start": "678519",
    "end": "680600"
  },
  {
    "text": "think Jay well the type is obviously",
    "start": "680600",
    "end": "682079"
  },
  {
    "text": "Joiner of T I mean it says Joiner of T",
    "start": "682079",
    "end": "685279"
  },
  {
    "text": "there but the compiler knows a bit more",
    "start": "685279",
    "end": "687839"
  },
  {
    "text": "than that it knows that the type is more",
    "start": "687839",
    "end": "689680"
  },
  {
    "text": "specifically J DOT",
    "start": "689680",
    "end": "692120"
  },
  {
    "text": "type it knows exactly which implicit",
    "start": "692120",
    "end": "695480"
  },
  {
    "text": "gets resolved I'm going to tell you it's",
    "start": "695480",
    "end": "697000"
  },
  {
    "text": "it's this one and it knows that the type",
    "start": "697000",
    "end": "699399"
  },
  {
    "text": "of J is Joiner of character with the",
    "start": "699399",
    "end": "702160"
  },
  {
    "text": "refinement of R equals string so it",
    "start": "702160",
    "end": "705399"
  },
  {
    "text": "knows a more specific type within the",
    "start": "705399",
    "end": "707240"
  },
  {
    "text": "body uh within that that method",
    "start": "707240",
    "end": "710720"
  },
  {
    "text": "signature so what what the compiler",
    "start": "710720",
    "end": "712720"
  },
  {
    "text": "actually knows is something like this",
    "start": "712720",
    "end": "714120"
  },
  {
    "text": "and excuse the the formatting which",
    "start": "714120",
    "end": "716440"
  },
  {
    "text": "isn't isn't great but it means that for",
    "start": "716440",
    "end": "719639"
  },
  {
    "text": "this for this method here we can",
    "start": "719639",
    "end": "721839"
  },
  {
    "text": "actually refer to J.R and the compiler",
    "start": "721839",
    "end": "724279"
  },
  {
    "text": "will know by virtue of the implicit",
    "start": "724279",
    "end": "726839"
  },
  {
    "text": "that's",
    "start": "726839",
    "end": "727839"
  },
  {
    "text": "resolved that R is string and that the",
    "start": "727839",
    "end": "731079"
  },
  {
    "text": "return type resolves to string now this",
    "start": "731079",
    "end": "733880"
  },
  {
    "text": "is a this is a really subtle feature of",
    "start": "733880",
    "end": "736440"
  },
  {
    "text": "Scala but it's actually quite",
    "start": "736440",
    "end": "737600"
  },
  {
    "text": "fundamental to a lot of things working",
    "start": "737600",
    "end": "739880"
  },
  {
    "text": "uh as well as they do uh and then we",
    "start": "739880",
    "end": "742000"
  },
  {
    "text": "just call J dot join and that will",
    "start": "742000",
    "end": "743480"
  },
  {
    "text": "return uh the j. R type which which we",
    "start": "743480",
    "end": "745760"
  },
  {
    "text": "know is is",
    "start": "745760",
    "end": "747560"
  },
  {
    "text": "string does that does that make at least",
    "start": "747560",
    "end": "749959"
  },
  {
    "text": "some sense even if you you've maybe not",
    "start": "749959",
    "end": "751760"
  },
  {
    "text": "encountered this exact uh this exact",
    "start": "751760",
    "end": "753760"
  },
  {
    "text": "situation",
    "start": "753760",
    "end": "754839"
  },
  {
    "text": "before okay now if we were to write the",
    "start": "754839",
    "end": "757160"
  },
  {
    "text": "same",
    "start": "757160",
    "end": "758320"
  },
  {
    "text": "thing with type",
    "start": "758320",
    "end": "760480"
  },
  {
    "text": "parameters we might have uh two",
    "start": "760480",
    "end": "763720"
  },
  {
    "text": "parameters we got element and then we",
    "start": "763720",
    "end": "765279"
  },
  {
    "text": "we've moved we've promoted the the r",
    "start": "765279",
    "end": "767399"
  },
  {
    "text": "type the return type to a a parameter",
    "start": "767399",
    "end": "770519"
  },
  {
    "text": "now and again we're we're we're",
    "start": "770519",
    "end": "772600"
  },
  {
    "text": "returning R but we have to rewrite our",
    "start": "772600",
    "end": "775240"
  },
  {
    "text": "our do join method we have to add this R",
    "start": "775240",
    "end": "778399"
  },
  {
    "text": "in here that we've now well in in order",
    "start": "778399",
    "end": "781560"
  },
  {
    "text": "to have this R to to pass it from the",
    "start": "781560",
    "end": "785560"
  },
  {
    "text": "the parameter here to the return type we",
    "start": "785560",
    "end": "788360"
  },
  {
    "text": "need to track it through the method",
    "start": "788360",
    "end": "791120"
  },
  {
    "text": "signature and in order to do that we",
    "start": "791120",
    "end": "792920"
  },
  {
    "text": "need to mention it we need we need to uh",
    "start": "792920",
    "end": "795440"
  },
  {
    "text": "Define that there is an r that is being",
    "start": "795440",
    "end": "797000"
  },
  {
    "text": "tracked through here in order to be able",
    "start": "797000",
    "end": "799360"
  },
  {
    "text": "to return it",
    "start": "799360",
    "end": "802079"
  },
  {
    "text": "here now what this means is I mean it's",
    "start": "802079",
    "end": "805800"
  },
  {
    "text": "it's sort of polluting the the method",
    "start": "805800",
    "end": "807639"
  },
  {
    "text": "signature a little bit",
    "start": "807639",
    "end": "809839"
  },
  {
    "text": "and consequently if we wanted to call",
    "start": "809839",
    "end": "812000"
  },
  {
    "text": "dojin explicitly specifying the the type",
    "start": "812000",
    "end": "816320"
  },
  {
    "text": "T we have no option but to specify r as",
    "start": "816320",
    "end": "819800"
  },
  {
    "text": "well whereas R we would we would we",
    "start": "819800",
    "end": "822240"
  },
  {
    "text": "would actually prefer we much prefer to",
    "start": "822240",
    "end": "823920"
  },
  {
    "text": "be",
    "start": "823920",
    "end": "826079"
  },
  {
    "text": "inferred so this is this is a I again",
    "start": "826279",
    "end": "830240"
  },
  {
    "text": "it's it's quite a subtle case but it's a",
    "start": "830240",
    "end": "831759"
  },
  {
    "text": "clear case where a type member is",
    "start": "831759",
    "end": "834360"
  },
  {
    "text": "actually a better solution than a type",
    "start": "834360",
    "end": "837720"
  },
  {
    "text": "parameter",
    "start": "837720",
    "end": "840720"
  },
  {
    "text": "so I want to talk uh this I don't know",
    "start": "843399",
    "end": "845839"
  },
  {
    "text": "how I'm doing for time but uh I wanted",
    "start": "845839",
    "end": "848160"
  },
  {
    "text": "to talk a little bit about",
    "start": "848160",
    "end": "851560"
  },
  {
    "text": "variance so this is one big difference",
    "start": "851560",
    "end": "854240"
  },
  {
    "text": "between Type members and type",
    "start": "854240",
    "end": "858160"
  },
  {
    "text": "parameters oh what seriously what is",
    "start": "858360",
    "end": "863440"
  },
  {
    "text": "it no go on I was say that there's also",
    "start": "864639",
    "end": "869160"
  },
  {
    "text": "certain that",
    "start": "869160",
    "end": "872199"
  },
  {
    "text": "simp",
    "start": "879000",
    "end": "882000"
  },
  {
    "text": "right okay I I um I I I believe you I",
    "start": "883399",
    "end": "887000"
  },
  {
    "text": "I'm sure I've seen examples of this I",
    "start": "887000",
    "end": "888839"
  },
  {
    "text": "would uh I'd be interested to have an",
    "start": "888839",
    "end": "890759"
  },
  {
    "text": "example next time I give the talk but um",
    "start": "890759",
    "end": "893079"
  },
  {
    "text": "if if if the if the video or anyone else",
    "start": "893079",
    "end": "894759"
  },
  {
    "text": "didn't hear that Dan Daniel's saying",
    "start": "894759",
    "end": "896160"
  },
  {
    "text": "that actually it's it's more than uh uh",
    "start": "896160",
    "end": "899399"
  },
  {
    "text": "it's more than just the the annoyance of",
    "start": "899399",
    "end": "901680"
  },
  {
    "text": "having to specify that R it's that we we",
    "start": "901680",
    "end": "904639"
  },
  {
    "text": "sometimes we we say we sometimes can't",
    "start": "904639",
    "end": "906120"
  },
  {
    "text": "even write the type R or that",
    "start": "906120",
    "end": "910320"
  },
  {
    "text": "it",
    "start": "913839",
    "end": "916839"
  },
  {
    "text": "yeah right so sometimes the compiler",
    "start": "923600",
    "end": "926800"
  },
  {
    "text": "simply can't compute the r when it's in",
    "start": "926800",
    "end": "928480"
  },
  {
    "text": "a type to position um whereas whereas it",
    "start": "928480",
    "end": "931279"
  },
  {
    "text": "can when it's a a type member that's",
    "start": "931279",
    "end": "933360"
  },
  {
    "text": "referred to as a as a path uh as a path",
    "start": "933360",
    "end": "936399"
  },
  {
    "text": "to that type thank you that's uh that's",
    "start": "936399",
    "end": "939279"
  },
  {
    "text": "an even better reason than uh the the",
    "start": "939279",
    "end": "942120"
  },
  {
    "text": "reason I had that slide in there",
    "start": "942120",
    "end": "944000"
  },
  {
    "text": "for so so variance is is one one big",
    "start": "944000",
    "end": "947160"
  },
  {
    "text": "area where type members and type",
    "start": "947160",
    "end": "948399"
  },
  {
    "text": "parameters differ and type parameters",
    "start": "948399",
    "end": "951959"
  },
  {
    "text": "can have variance annotations they can",
    "start": "951959",
    "end": "953639"
  },
  {
    "text": "have a plus or a minus on the",
    "start": "953639",
    "end": "956519"
  },
  {
    "text": "parameter now that",
    "start": "956519",
    "end": "959519"
  },
  {
    "text": "it's it's not it's not true to say that",
    "start": "959519",
    "end": "960959"
  },
  {
    "text": "type members don't have variance they do",
    "start": "960959",
    "end": "963160"
  },
  {
    "text": "but they don't have definition site",
    "start": "963160",
    "end": "966040"
  },
  {
    "text": "variants",
    "start": "966040",
    "end": "967639"
  },
  {
    "text": "so why do I there we are so um just just",
    "start": "967639",
    "end": "971600"
  },
  {
    "text": "just to quickly have I missed a slide no",
    "start": "971600",
    "end": "975399"
  },
  {
    "text": "just to uh quickly recap if you have a a",
    "start": "975399",
    "end": "977920"
  },
  {
    "text": "covariant type we've got uh trait trait",
    "start": "977920",
    "end": "982240"
  },
  {
    "text": "coov covariant which is covariant in its",
    "start": "982240",
    "end": "984759"
  },
  {
    "text": "parameter a we know that we can we can",
    "start": "984759",
    "end": "988399"
  },
  {
    "text": "we can say that actually that that that",
    "start": "988399",
    "end": "989920"
  },
  {
    "text": "plus isn't meant to be there we we we",
    "start": "989920",
    "end": "992399"
  },
  {
    "text": "know that a CV of runtime exception is a",
    "start": "992399",
    "end": "996040"
  },
  {
    "text": "subtype of COV of exception simply by",
    "start": "996040",
    "end": "999360"
  },
  {
    "text": "virtue of uh it being covariant and",
    "start": "999360",
    "end": "1002399"
  },
  {
    "text": "runtime exception being a sub type of",
    "start": "1002399",
    "end": "1006319"
  },
  {
    "text": "exception um you you can think of this",
    "start": "1006319",
    "end": "1009600"
  },
  {
    "text": "if you like as the the the uh the the",
    "start": "1009600",
    "end": "1012600"
  },
  {
    "text": "subtyping or super typing relationship",
    "start": "1012600",
    "end": "1014319"
  },
  {
    "text": "between the parameters being promoted to",
    "start": "1014319",
    "end": "1017000"
  },
  {
    "text": "the outer types as well by virtue of the",
    "start": "1017000",
    "end": "1019880"
  },
  {
    "text": "uh the the co-variance and the arrow",
    "start": "1019880",
    "end": "1021920"
  },
  {
    "text": "goes the other way if it's contravariant",
    "start": "1021920",
    "end": "1023480"
  },
  {
    "text": "but that's uh that's a longer",
    "start": "1023480",
    "end": "1027199"
  },
  {
    "text": "discussion but what happens here if we",
    "start": "1027280",
    "end": "1029839"
  },
  {
    "text": "try and convert that to uh type members",
    "start": "1029839",
    "end": "1033918"
  },
  {
    "text": "we have no way of specifying this type",
    "start": "1033919",
    "end": "1035720"
  },
  {
    "text": "to be covariant or contravariant so what",
    "start": "1035720",
    "end": "1039520"
  },
  {
    "text": "is the relationship between these two",
    "start": "1039520",
    "end": "1040798"
  },
  {
    "text": "types what what are these what are these",
    "start": "1040799",
    "end": "1042400"
  },
  {
    "text": "question marks is it is it subtyping is",
    "start": "1042400",
    "end": "1044240"
  },
  {
    "text": "it super typing is it is it equality um",
    "start": "1044240",
    "end": "1047600"
  },
  {
    "text": "well actually there's no relation",
    "start": "1047600",
    "end": "1048558"
  },
  {
    "text": "between these",
    "start": "1048559",
    "end": "1049720"
  },
  {
    "text": "types because when we use an equal sign",
    "start": "1049720",
    "end": "1053640"
  },
  {
    "text": "here this is",
    "start": "1053640",
    "end": "1055720"
  },
  {
    "text": "invariance and",
    "start": "1055720",
    "end": "1058440"
  },
  {
    "text": "uh a",
    "start": "1058440",
    "end": "1060200"
  },
  {
    "text": "foo uh a a foo with a with with t equal",
    "start": "1060200",
    "end": "1063360"
  },
  {
    "text": "to runtime exception even though there's",
    "start": "1063360",
    "end": "1065200"
  },
  {
    "text": "a relationship between runtime exception",
    "start": "1065200",
    "end": "1067240"
  },
  {
    "text": "and exception there there is no we we we",
    "start": "1067240",
    "end": "1070640"
  },
  {
    "text": "can't infer any relationship between fo",
    "start": "1070640",
    "end": "1073280"
  },
  {
    "text": "of those things so so that there there",
    "start": "1073280",
    "end": "1074880"
  },
  {
    "text": "is no there is no uh solution to this",
    "start": "1074880",
    "end": "1080440"
  },
  {
    "text": "what we can do is we can define a",
    "start": "1080640",
    "end": "1083679"
  },
  {
    "text": "subtyping relationship so we can say t",
    "start": "1083679",
    "end": "1086200"
  },
  {
    "text": "is a subtype of runtime",
    "start": "1086200",
    "end": "1088400"
  },
  {
    "text": "exception uh and and T is a subtype of",
    "start": "1088400",
    "end": "1091640"
  },
  {
    "text": "exception and then the the inequality or",
    "start": "1091640",
    "end": "1094480"
  },
  {
    "text": "the type INE equality",
    "start": "1094480",
    "end": "1095919"
  },
  {
    "text": "hols so this is equivalent to",
    "start": "1095919",
    "end": "1099760"
  },
  {
    "text": "co-variance but this is use site",
    "start": "1099760",
    "end": "1102360"
  },
  {
    "text": "covariance when I say use site I mean",
    "start": "1102360",
    "end": "1104600"
  },
  {
    "text": "that the site at which you write the",
    "start": "1104600",
    "end": "1106120"
  },
  {
    "text": "type down and this this is",
    "start": "1106120",
    "end": "1110919"
  },
  {
    "text": "uh this there's also actually we miles",
    "start": "1110919",
    "end": "1113679"
  },
  {
    "text": "and I looked at this yesterday and the",
    "start": "1113679",
    "end": "1115360"
  },
  {
    "text": "same thing works for Contra variant um",
    "start": "1115360",
    "end": "1118520"
  },
  {
    "text": "we we can we can turn this Arrow the",
    "start": "1118520",
    "end": "1119840"
  },
  {
    "text": "other way around and this Arrow will",
    "start": "1119840",
    "end": "1121080"
  },
  {
    "text": "change the other way around as well this",
    "start": "1121080",
    "end": "1122520"
  },
  {
    "text": "this becomes obviously a lower bound",
    "start": "1122520",
    "end": "1124320"
  },
  {
    "text": "then so it it works as you as you as you",
    "start": "1124320",
    "end": "1126840"
  },
  {
    "text": "might hope and uh maybe not as you might",
    "start": "1126840",
    "end": "1129440"
  },
  {
    "text": "expect but uh as as you might hope it to",
    "start": "1129440",
    "end": "1133679"
  },
  {
    "text": "so the we we we can we can uh one last",
    "start": "1133679",
    "end": "1138440"
  },
  {
    "text": "thing we can do is we we can we can",
    "start": "1138440",
    "end": "1140559"
  },
  {
    "text": "actually convert that we can we can",
    "start": "1140559",
    "end": "1142679"
  },
  {
    "text": "convert uh use site variants to type",
    "start": "1142679",
    "end": "1147280"
  },
  {
    "text": "parameters so we can actually Define",
    "start": "1147280",
    "end": "1149720"
  },
  {
    "text": "this same subtyping relationship for an",
    "start": "1149720",
    "end": "1152400"
  },
  {
    "text": "invariant type with a type",
    "start": "1152400",
    "end": "1154799"
  },
  {
    "text": "parameter provided we",
    "start": "1154799",
    "end": "1157120"
  },
  {
    "text": "write uh provided we we we",
    "start": "1157120",
    "end": "1160000"
  },
  {
    "text": "specify uh at the at the use site that",
    "start": "1160000",
    "end": "1163840"
  },
  {
    "text": "our our our type is a subtype of runtime",
    "start": "1163840",
    "end": "1166880"
  },
  {
    "text": "exception uh and consequently",
    "start": "1166880",
    "end": "1169240"
  },
  {
    "text": "and and also subtype of",
    "start": "1169240",
    "end": "1171440"
  },
  {
    "text": "exception then that will hold so there",
    "start": "1171440",
    "end": "1174480"
  },
  {
    "text": "is there is equivalence between Type",
    "start": "1174480",
    "end": "1176240"
  },
  {
    "text": "members and type parameters for use site",
    "start": "1176240",
    "end": "1178880"
  },
  {
    "text": "variants for uh definition site variance",
    "start": "1178880",
    "end": "1183039"
  },
  {
    "text": "that's only available with annotations",
    "start": "1183039",
    "end": "1185840"
  },
  {
    "text": "for type parameters so why don't why",
    "start": "1185840",
    "end": "1189559"
  },
  {
    "text": "don't uh type members have have variant",
    "start": "1189559",
    "end": "1192919"
  },
  {
    "text": "well the the the benefit we get which um",
    "start": "1192919",
    "end": "1196120"
  },
  {
    "text": "is is probably part of a maybe a longer",
    "start": "1196120",
    "end": "1198159"
  },
  {
    "text": "talk and maybe maybe it's uh not even",
    "start": "1198159",
    "end": "1200880"
  },
  {
    "text": "worthy of of talking about too much",
    "start": "1200880",
    "end": "1202559"
  },
  {
    "text": "because it's not that useful uh is that",
    "start": "1202559",
    "end": "1204679"
  },
  {
    "text": "we can defer we can defer a lot of the",
    "start": "1204679",
    "end": "1207280"
  },
  {
    "text": "checks that get done uh at at the",
    "start": "1207280",
    "end": "1211080"
  },
  {
    "text": "definition site we can defer them and",
    "start": "1211080",
    "end": "1213840"
  },
  {
    "text": "until the the the point where the the",
    "start": "1213840",
    "end": "1216320"
  },
  {
    "text": "value is",
    "start": "1216320",
    "end": "1217600"
  },
  {
    "text": "instantiated um with with type members",
    "start": "1217600",
    "end": "1221320"
  },
  {
    "text": "so that that is what we gain we we can",
    "start": "1221320",
    "end": "1222960"
  },
  {
    "text": "write code with type members that aren't",
    "start": "1222960",
    "end": "1225320"
  },
  {
    "text": "constrained by any variance that we that",
    "start": "1225320",
    "end": "1227960"
  },
  {
    "text": "we wouldn't be able to right with uh",
    "start": "1227960",
    "end": "1229840"
  },
  {
    "text": "variant type",
    "start": "1229840",
    "end": "1232400"
  },
  {
    "text": "parameters so to summarize uh summarize",
    "start": "1232400",
    "end": "1235600"
  },
  {
    "text": "some of these",
    "start": "1235600",
    "end": "1238120"
  },
  {
    "text": "points uh by default type members are uh",
    "start": "1239400",
    "end": "1242919"
  },
  {
    "text": "existential when you when you when you",
    "start": "1242919",
    "end": "1244400"
  },
  {
    "text": "write the type down and",
    "start": "1244400",
    "end": "1247120"
  },
  {
    "text": "conversely type parameters are",
    "start": "1247120",
    "end": "1249720"
  },
  {
    "text": "universally",
    "start": "1249720",
    "end": "1252039"
  },
  {
    "text": "Quantified but because they're",
    "start": "1252039",
    "end": "1254840"
  },
  {
    "text": "universally Quantified we always have to",
    "start": "1254840",
    "end": "1256240"
  },
  {
    "text": "track them and that's that's sometimes a",
    "start": "1256240",
    "end": "1258080"
  },
  {
    "text": "disadvantage Ag and using types with uh",
    "start": "1258080",
    "end": "1261440"
  },
  {
    "text": "with parameters means we sometimes need",
    "start": "1261440",
    "end": "1263480"
  },
  {
    "text": "to introduce parameters to methods which",
    "start": "1263480",
    "end": "1265840"
  },
  {
    "text": "use those types in order to track them",
    "start": "1265840",
    "end": "1267600"
  },
  {
    "text": "across the signature and as Daniel",
    "start": "1267600",
    "end": "1269919"
  },
  {
    "text": "pointed out that actually causes more",
    "start": "1269919",
    "end": "1271520"
  },
  {
    "text": "problems because it means we can't we",
    "start": "1271520",
    "end": "1273440"
  },
  {
    "text": "can't actually uh in infer them and and",
    "start": "1273440",
    "end": "1275760"
  },
  {
    "text": "use use those types in in all",
    "start": "1275760",
    "end": "1279240"
  },
  {
    "text": "cases uh type parameters support",
    "start": "1279240",
    "end": "1282000"
  },
  {
    "text": "definition site",
    "start": "1282000",
    "end": "1283720"
  },
  {
    "text": "variance uh where",
    "start": "1283720",
    "end": "1286120"
  },
  {
    "text": "whereas that that was my last point",
    "start": "1286120",
    "end": "1288320"
  },
  {
    "text": "where whereas",
    "start": "1288320",
    "end": "1290080"
  },
  {
    "text": "uh um well the the the the additional",
    "start": "1290080",
    "end": "1292559"
  },
  {
    "text": "point I was going to make is that where",
    "start": "1292559",
    "end": "1293679"
  },
  {
    "text": "where whereas uh both type parameters",
    "start": "1293679",
    "end": "1295600"
  },
  {
    "text": "and type members uh support use site",
    "start": "1295600",
    "end": "1299600"
  },
  {
    "text": "variants um but they are very very",
    "start": "1299600",
    "end": "1302679"
  },
  {
    "text": "similar they are interchangeable in most",
    "start": "1302679",
    "end": "1304960"
  },
  {
    "text": "cases you will probably find yourself",
    "start": "1304960",
    "end": "1307000"
  },
  {
    "text": "refactoring code between one and the",
    "start": "1307000",
    "end": "1308600"
  },
  {
    "text": "other when you encounter one of the the",
    "start": "1308600",
    "end": "1310679"
  },
  {
    "text": "the the little esoteric cases that I've",
    "start": "1310679",
    "end": "1313320"
  },
  {
    "text": "uh mentioned here or or possibly others",
    "start": "1313320",
    "end": "1314799"
  },
  {
    "text": "I haven't mentioned um so largely",
    "start": "1314799",
    "end": "1318600"
  },
  {
    "text": "largely it doesn't matter too",
    "start": "1318600",
    "end": "1320840"
  },
  {
    "text": "much",
    "start": "1320840",
    "end": "1323039"
  },
  {
    "text": "uh but I I I still having having having",
    "start": "1323039",
    "end": "1326799"
  },
  {
    "text": "gone through the process of trying to",
    "start": "1326799",
    "end": "1328240"
  },
  {
    "text": "formalize this and trying to understand",
    "start": "1328240",
    "end": "1330960"
  },
  {
    "text": "the logic I use to decide which is most",
    "start": "1330960",
    "end": "1334039"
  },
  {
    "text": "appropriate I still can't come up with a",
    "start": "1334039",
    "end": "1337039"
  },
  {
    "text": "better reason or better better",
    "start": "1337039",
    "end": "1339720"
  },
  {
    "text": "explanation than to say it's it it's",
    "start": "1339720",
    "end": "1341799"
  },
  {
    "text": "still the one that feels right most of",
    "start": "1341799",
    "end": "1343600"
  },
  {
    "text": "the time and you you have to work with",
    "start": "1343600",
    "end": "1347120"
  },
  {
    "text": "them you have to practice practice is",
    "start": "1347120",
    "end": "1348640"
  },
  {
    "text": "using them to gain some sort of",
    "start": "1348640",
    "end": "1350760"
  },
  {
    "text": "intuition I it's probably the most",
    "start": "1350760",
    "end": "1352240"
  },
  {
    "text": "disappointing climax to uh to both a",
    "start": "1352240",
    "end": "1355080"
  },
  {
    "text": "talk and a conference",
    "start": "1355080",
    "end": "1357320"
  },
  {
    "text": "but um but the answer is uh do what",
    "start": "1357320",
    "end": "1360080"
  },
  {
    "text": "feels right and um I'm I'm gonna say",
    "start": "1360080",
    "end": "1363760"
  },
  {
    "text": "first of all thank you for listening but",
    "start": "1363760",
    "end": "1365120"
  },
  {
    "text": "before uh before we move on um I'd like",
    "start": "1365120",
    "end": "1367919"
  },
  {
    "text": "to also thank uh adelbert is is he still",
    "start": "1367919",
    "end": "1370960"
  },
  {
    "text": "here he um very kindly well he both both",
    "start": "1370960",
    "end": "1374120"
  },
  {
    "text": "he and I submitted basically the same",
    "start": "1374120",
    "end": "1376279"
  },
  {
    "text": "talk for this conference and he kind",
    "start": "1376279",
    "end": "1378640"
  },
  {
    "text": "stepped aside and allowed me to give I",
    "start": "1378640",
    "end": "1380159"
  },
  {
    "text": "hope I hope I've done it justice um the",
    "start": "1380159",
    "end": "1382919"
  },
  {
    "text": "the other person who who's not here I'd",
    "start": "1382919",
    "end": "1384279"
  },
  {
    "text": "like to thank is uh Steven comple who",
    "start": "1384279",
    "end": "1386039"
  },
  {
    "text": "wrote A a really brilliant series of",
    "start": "1386039",
    "end": "1387919"
  },
  {
    "text": "blogs on the on on typ l.org um they go",
    "start": "1387919",
    "end": "1391880"
  },
  {
    "text": "they go beyond anything I've discussed",
    "start": "1391880",
    "end": "1393600"
  },
  {
    "text": "here by an order of magnitude um I can",
    "start": "1393600",
    "end": "1397120"
  },
  {
    "text": "recommend reading them and just spending",
    "start": "1397120",
    "end": "1398960"
  },
  {
    "text": "time uh trying trying to understand the",
    "start": "1398960",
    "end": "1401200"
  },
  {
    "text": "details I think he did six six or seven",
    "start": "1401200",
    "end": "1402919"
  },
  {
    "text": "articles um eight okay so there's yeah",
    "start": "1402919",
    "end": "1408000"
  },
  {
    "text": "uh well well worth reading um so at that",
    "start": "1408000",
    "end": "1412279"
  },
  {
    "text": "point I will say uh do you have any",
    "start": "1412279",
    "end": "1414360"
  },
  {
    "text": "questions",
    "start": "1414360",
    "end": "1417360"
  }
]