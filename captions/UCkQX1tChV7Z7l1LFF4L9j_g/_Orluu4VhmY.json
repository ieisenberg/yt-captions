[
  {
    "start": "0",
    "end": "330000"
  },
  {
    "text": "hello and welcome to my talk my name is Ross in stay on chip I'm a commuter on",
    "start": "3929",
    "end": "9059"
  },
  {
    "text": "the spring framework team last year I gave a talk introducing reactive",
    "start": "9059",
    "end": "14190"
  },
  {
    "text": "programming and I'm very honored to be back this year to talk about the two web",
    "start": "14190",
    "end": "21810"
  },
  {
    "text": "stacks that we have in a spring framework five and we're just weeks ahead of GA it's been a long journey but",
    "start": "21810",
    "end": "28410"
  },
  {
    "text": "we're almost there I want to start with a quick disclaimer",
    "start": "28410",
    "end": "35460"
  },
  {
    "text": "you may not know anything about reactive if you haven't done anything in the",
    "start": "35460",
    "end": "41339"
  },
  {
    "text": "space you might need to compliment a little bit with some other talks in",
    "start": "41339",
    "end": "47039"
  },
  {
    "text": "addition to this it's a bit of a tricky space it can be a little bit of a challenge to to catch up unless you",
    "start": "47039",
    "end": "52920"
  },
  {
    "text": "actually try it but the good thing is that we're going to take a look at some examples so you should be able to follow",
    "start": "52920",
    "end": "59460"
  },
  {
    "text": "along for the most part if you have experience in building web applications and working with a servlet stack I also",
    "start": "59460",
    "end": "67170"
  },
  {
    "text": "want to say that you actually don't have to have spring backgrounds you don't",
    "start": "67170",
    "end": "72240"
  },
  {
    "text": "have to know much about developing web applications with spring MVC my interest",
    "start": "72240",
    "end": "78570"
  },
  {
    "text": "is more in showing the evolution of the servlet stack and what most people are",
    "start": "78570",
    "end": "84270"
  },
  {
    "text": "using for developing web applications mm-hmm again the syntax that you see you should be able to follow along as long",
    "start": "84270",
    "end": "90420"
  },
  {
    "text": "as you've been building rest and web applications that shouldn't be too much of a challenge so again my interest is",
    "start": "90420",
    "end": "99840"
  },
  {
    "text": "in showing that evolution of the server stack because there are certain things that we've been doing for a very long",
    "start": "99840",
    "end": "105030"
  },
  {
    "text": "time and over the last four to five years one could say that Java has caught",
    "start": "105030",
    "end": "112470"
  },
  {
    "text": "up in the productivity area with the rise of full stack frameworks like",
    "start": "112470",
    "end": "118310"
  },
  {
    "text": "spring boot catching up to the likes of Ruby on Rails in terms of being able to",
    "start": "118310",
    "end": "124560"
  },
  {
    "text": "to get up to speed and be productive very quickly and what I'm going to talk",
    "start": "124560",
    "end": "129899"
  },
  {
    "text": "about today is a similar revolution in the execution model that we're using",
    "start": "129899",
    "end": "135530"
  },
  {
    "text": "bringing it on with the likes of nodejs in terms of having an asynchronous non-blocking",
    "start": "135530",
    "end": "142170"
  },
  {
    "text": "foundation and using a kind of a very different approach to getting the most",
    "start": "142170",
    "end": "148320"
  },
  {
    "text": "out of the hardware and an efficient use of resources so so we'll talk about that",
    "start": "148320",
    "end": "156570"
  },
  {
    "text": "on the Left left-hand side you see a traditional servlet stack including a",
    "start": "156570",
    "end": "161850"
  },
  {
    "text": "servlet container consume through the servlet API and then a web framework on top and then on the right hand side",
    "start": "161850",
    "end": "167880"
  },
  {
    "text": "you'll see that there are some new non-blocking asynchronous runtimes very",
    "start": "167880",
    "end": "173100"
  },
  {
    "text": "notably you have Neddie which is a very widely used asynchronous",
    "start": "173100",
    "end": "179160"
  },
  {
    "text": "not walking runtime so for anybody doing much in that space there's a good chance",
    "start": "179160",
    "end": "184260"
  },
  {
    "text": "that this is you know something that you've looked at or heard about and obviously if we have additional runtimes",
    "start": "184260",
    "end": "193250"
  },
  {
    "text": "then we can't really be using the servlet API on top and this is an interesting point in itself because the",
    "start": "193250",
    "end": "201600"
  },
  {
    "text": "things that I will talk about in terms of the execution model and the use of non blocking i/o a lot of that has been",
    "start": "201600",
    "end": "208080"
  },
  {
    "text": "happening in a servlet space as well in a servlet container space I should say the likes of jetty and Tomcat have been",
    "start": "208080",
    "end": "214800"
  },
  {
    "text": "innovating and refactoring quite a bit over the quite a few years now to come",
    "start": "214800",
    "end": "222060"
  },
  {
    "text": "up to you know modern workloads and to make a ton of improvements but what",
    "start": "222060",
    "end": "227760"
  },
  {
    "text": "hasn't really happened as much is the programming model on top to catch up and that's really what we're talking about",
    "start": "227760",
    "end": "234420"
  },
  {
    "text": "here you will notice that in spring 5 we actually have a name for this parallel",
    "start": "234420",
    "end": "239910"
  },
  {
    "text": "web framework - spring MVC it's called spring by flux so we have spring MVC and",
    "start": "239910",
    "end": "245840"
  },
  {
    "text": "spring web works and I also want to",
    "start": "245840",
    "end": "251580"
  },
  {
    "text": "mention that it isn't just the web stack I mean the web stack is very important but when you develop web applications",
    "start": "251580",
    "end": "258329"
  },
  {
    "text": "you will also be working with data so there are other efforts that you know create more of a vertical",
    "start": "258330",
    "end": "265360"
  },
  {
    "text": "approach so you have spring data reactive that's coming out it's already",
    "start": "265360",
    "end": "271100"
  },
  {
    "text": "in late milestone phases so there's a lot of stuff that you can try out and",
    "start": "271100",
    "end": "276260"
  },
  {
    "text": "that we're gonna take a look at today spring security already has a couple of milestones so all of these things that",
    "start": "276260",
    "end": "281570"
  },
  {
    "text": "you need to actually run applications now you will notice that what we have",
    "start": "281570",
    "end": "287990"
  },
  {
    "text": "next to the servlet API is something called reactive streams how many of you have heard of reactive streams the",
    "start": "287990",
    "end": "294620"
  },
  {
    "text": "specification ok so this is by now pretty well understood for those of you who haven't heard about it",
    "start": "294620",
    "end": "301220"
  },
  {
    "text": "it's a specification that's turn out to be extremely useful it's a very very small spec actually about 4 interfaces",
    "start": "301220",
    "end": "307850"
  },
  {
    "text": "the deals in this space with interoperability across components that are built to be asynchronous and non",
    "start": "307850",
    "end": "314360"
  },
  {
    "text": "blocking so if you have for example a  driver as we will take a look at if you have a web framework you have a",
    "start": "314360",
    "end": "321230"
  },
  {
    "text": "non-blocking runtime you can bring those together through reactive streams and it could be using our eggs over or reactor",
    "start": "321230",
    "end": "328070"
  },
  {
    "text": "different reactive libraries so first we're gonna start by taking a look at",
    "start": "328070",
    "end": "334520"
  },
  {
    "start": "330000",
    "end": "653000"
  },
  {
    "text": "the servlet stack and this is probably going to look very familiar this is a",
    "start": "334520",
    "end": "339710"
  },
  {
    "text": "classic thread per request execution model this is where we started back in",
    "start": "339710",
    "end": "345290"
  },
  {
    "text": "the 90s when the servlet API was created and this is of course a very kind of",
    "start": "345290",
    "end": "351320"
  },
  {
    "text": "synchronous imperative style API it's very very easy and simple to write and",
    "start": "351320",
    "end": "358840"
  },
  {
    "text": "you know we have for example the filter and a servlet contracts and those return void which basically means that they're",
    "start": "358840",
    "end": "366230"
  },
  {
    "text": "not they assume that if any kind of blocking needs to be done within them",
    "start": "366230",
    "end": "371960"
  },
  {
    "text": "like calling a database obviously we're gonna have to wait until that's complete and that's what this method signature",
    "start": "371960",
    "end": "378140"
  },
  {
    "text": "implies also there is blocking i/o going on the input and output stream when you",
    "start": "378140",
    "end": "385160"
  },
  {
    "text": "call read or when you call writing and I have to block until that completes so if you have a really slow HTTP client that",
    "start": "385160",
    "end": "391520"
  },
  {
    "text": "means that it may take a little while before that all returns so for this reason we have a",
    "start": "391520",
    "end": "397699"
  },
  {
    "text": "threat pool that is underneath the servlet API and those are the two kinds of things that may block and we need",
    "start": "397699",
    "end": "405590"
  },
  {
    "text": "that threat pool in order to achieve concurrency so we may block in the application itself or we may block when",
    "start": "405590",
    "end": "413030"
  },
  {
    "text": "reading or writing to the clients and in",
    "start": "413030",
    "end": "418790"
  },
  {
    "text": "many ways the story about what we're talking about here the whole you know",
    "start": "418790",
    "end": "424040"
  },
  {
    "text": "subject and why we're even talking about a synchronicity and non-blocking is a",
    "start": "424040",
    "end": "429139"
  },
  {
    "text": "story of growing a synchronicity the use of more asynchronous things that we do",
    "start": "429139",
    "end": "436070"
  },
  {
    "text": "in our applications so we've been using the server with API in a servlet stack for a very long time and maybe some of",
    "start": "436070",
    "end": "442789"
  },
  {
    "text": "you will argue or will have an experience where there isn't really a specific problem in which case you don't",
    "start": "442789",
    "end": "450110"
  },
  {
    "text": "really need to change so this is not about old versus new this is about kind",
    "start": "450110",
    "end": "457789"
  },
  {
    "text": "of a synchronicity creeping in you know that very popular track next door where",
    "start": "457789",
    "end": "463610"
  },
  {
    "text": "a lot of people are the micro-services work that we do that kind of changes our",
    "start": "463610",
    "end": "470560"
  },
  {
    "text": "expectations and almost out of the box there's plenty of a synchronicity and",
    "start": "470560",
    "end": "475599"
  },
  {
    "text": "you know you could argue the server API just wasn't built for that it wasn't built in the of course you can do",
    "start": "475599",
    "end": "483260"
  },
  {
    "text": "asynchronous things but the more you do of it the more it becomes a challenge the model is not set up in the best",
    "start": "483260",
    "end": "490310"
  },
  {
    "text": "possible way to make the most also out of the hardware now we do have some",
    "start": "490310",
    "end": "496940"
  },
  {
    "text": "things that have happened over time obviously it's been a long time almost 20 years since the server the API was",
    "start": "496940",
    "end": "502250"
  },
  {
    "text": "created so for example back around 2009 we got the server trio async API which",
    "start": "502250",
    "end": "509840"
  },
  {
    "text": "means that we can call start async on the request and then we can exit the",
    "start": "509840",
    "end": "514880"
  },
  {
    "text": "thread so we do this particular dance that you will see here where we're starting out as usual the thread per",
    "start": "514880",
    "end": "521599"
  },
  {
    "text": "request but then we can say start racing and then we kind of tiptoe",
    "start": "521599",
    "end": "528440"
  },
  {
    "text": "out of the threads meaning that we're gonna exit all the way from the filter chain without doing anything knowing",
    "start": "528440",
    "end": "534440"
  },
  {
    "text": "that we're starting asynchronous work then we can do some work or wait for an event without holding the servlet",
    "start": "534440",
    "end": "540650"
  },
  {
    "text": "container thread and when that work is done or when we have an event we can",
    "start": "540650",
    "end": "545900"
  },
  {
    "text": "call dispatch on the async context that the request gave us back and now we can get back into the call stack and",
    "start": "545900",
    "end": "553010"
  },
  {
    "text": "complete the work so it's a little bit you know obviously it wasn't originally",
    "start": "553010",
    "end": "558320"
  },
  {
    "text": "created for that sort of thing but it turns out to be quite effective you know in being able to do quite a few things",
    "start": "558320",
    "end": "565310"
  },
  {
    "text": "for example we in spring MVC we integrated the async API back in the day",
    "start": "565310",
    "end": "572000"
  },
  {
    "text": "you know 3.2 a few years ago and it's been quite widely used it's actually",
    "start": "572000",
    "end": "578030"
  },
  {
    "text": "been success in point that out because with a synchronicity and non-blocking",
    "start": "578030",
    "end": "585740"
  },
  {
    "text": "it's not always easy or even possible to retrofit as we will see is the case of",
    "start": "585740",
    "end": "591200"
  },
  {
    "text": "non-blocking i/o but for asynchronous request handling it's actually worked",
    "start": "591200",
    "end": "596780"
  },
  {
    "text": "out pretty well and it's it's very widely used so in effect what this means",
    "start": "596780",
    "end": "602480"
  },
  {
    "text": "is that you can introduce an async boundary between the request handling that the controller does and the service",
    "start": "602480",
    "end": "610220"
  },
  {
    "text": "container thread pool you're not holding up the thread while you're doing",
    "start": "610220",
    "end": "616220"
  },
  {
    "text": "asynchronous things which means that you can use reactive clients like for",
    "start": "616220",
    "end": "621620"
  },
  {
    "text": "example making HTTP calls or calling a reactive data repository inside the",
    "start": "621620",
    "end": "627500"
  },
  {
    "text": "controller and and that that works pretty well with a with a service container at the",
    "start": "627500",
    "end": "633320"
  },
  {
    "text": "end of the day input and output stream is still blocking though so you're not entirely you know in async non-blocking",
    "start": "633320",
    "end": "639440"
  },
  {
    "text": "land but again there's a lot of things that you can do on the servlet stack",
    "start": "639440",
    "end": "645350"
  },
  {
    "text": "it's not a completely black or white picture so let's talk a little bit about",
    "start": "645350",
    "end": "654950"
  },
  {
    "start": "653000",
    "end": "971000"
  },
  {
    "text": "concurrency models this is a common misconception that I've come across especially in in our community in",
    "start": "654950",
    "end": "662420"
  },
  {
    "text": "Java community because we've been doing things in a specific way for so long that actually talking about what it",
    "start": "662420",
    "end": "669050"
  },
  {
    "text": "means to be asynchronous can be confusing because a synchronicity is",
    "start": "669050",
    "end": "674230"
  },
  {
    "text": "kind of a perceived perception from what we're from the EM from some perspective",
    "start": "674230",
    "end": "681620"
  },
  {
    "text": "it doesn't really say how that a synchronicity is achieved so what you see here is that for asynchronous API",
    "start": "681620",
    "end": "690470"
  },
  {
    "text": "where we know that there may be some kind of blocking we actually need a large thread pool in order to achieve",
    "start": "690470",
    "end": "697130"
  },
  {
    "text": "concurrency if you're going to be blocking while we're making calls to something we need a thread or otherwise",
    "start": "697130",
    "end": "703459"
  },
  {
    "text": "we cannot process more of these and of course Java makes that quite easy and you've been doing this for a long time",
    "start": "703459",
    "end": "708589"
  },
  {
    "text": "and so in our minds a large thread pool is almost synonymous with concurrency",
    "start": "708589",
    "end": "713990"
  },
  {
    "text": "you know I've seen reactions where well if you now go to a fixed small thread",
    "start": "713990",
    "end": "719089"
  },
  {
    "text": "pool how can I be still concurrent right but if you think about something like nodejs",
    "start": "719089",
    "end": "724790"
  },
  {
    "text": "they have only one thread and they still have to be a server-side application they can handle large amounts of",
    "start": "724790",
    "end": "731540"
  },
  {
    "text": "concurrency so really there what this means is that the different ways to achieve concurrency and as it turns out",
    "start": "731540",
    "end": "740029"
  },
  {
    "text": "the model that nodejs for example uses because they have to is very very good",
    "start": "740029",
    "end": "747470"
  },
  {
    "text": "for kind of efficient use of resources you're not using as much memory because",
    "start": "747470",
    "end": "752870"
  },
  {
    "text": "you don't need as many threads that are effectively part just waiting for some kind of event to come back let's say",
    "start": "752870",
    "end": "759199"
  },
  {
    "text": "you're writing to making an HTTP call and that call may take a while so now",
    "start": "759199",
    "end": "765350"
  },
  {
    "text": "you're sitting there with your entire call stack and all the memory that that holds for that to return",
    "start": "765350",
    "end": "770899"
  },
  {
    "text": "whereas with non-locking code you actually only need a few threads and",
    "start": "770899",
    "end": "776180"
  },
  {
    "text": "when the results of these IO operations come back then those worker threads can",
    "start": "776180",
    "end": "781970"
  },
  {
    "text": "go round robin fashion and process these events without requiring additional",
    "start": "781970",
    "end": "788029"
  },
  {
    "text": "threats to be allocated so you know if this doesn't make 100% sense",
    "start": "788029",
    "end": "796410"
  },
  {
    "text": "I just want to point it out and put it in your mind that there are different ways to achieve concurrency and that",
    "start": "796410",
    "end": "801629"
  },
  {
    "text": "doesn't necessarily mean that you need a lot of threads with the synchronous API",
    "start": "801629",
    "end": "806879"
  },
  {
    "text": "so obviously it's very easy to program that way it's very easy to write a",
    "start": "806879",
    "end": "812250"
  },
  {
    "text": "single call stack kind of assumption type imperative code the one on the",
    "start": "812250",
    "end": "817740"
  },
  {
    "text": "right hand side is not doesn't come as a free lunch you know there's actually some work you need to do to achieve that",
    "start": "817740",
    "end": "825269"
  },
  {
    "text": "it's it's harder to write code this way but there are benefits associated with that so what does it take to actually",
    "start": "825269",
    "end": "833370"
  },
  {
    "text": "become non-blocking well at the core you need an event loop you need some worker",
    "start": "833370",
    "end": "841290"
  },
  {
    "text": "threads that are doing the low-level i/o like if we talk about an HTTP server that's what all servers do at the core",
    "start": "841290",
    "end": "848069"
  },
  {
    "text": "tomcat JD Neddie they all do that they have an event loop they handle a large",
    "start": "848069",
    "end": "853829"
  },
  {
    "text": "number of connections and when a particular connection can do stuff like read or write they will do that and then",
    "start": "853829",
    "end": "861660"
  },
  {
    "text": "when they can no longer do that then they go move on to the next connection simplifying a little bit but essentially",
    "start": "861660",
    "end": "868350"
  },
  {
    "text": "it's this kind of event loop driven processing with a fixed number of small",
    "start": "868350",
    "end": "873420"
  },
  {
    "text": "threads also it implies that your architecture is going to be a lot more",
    "start": "873420",
    "end": "880170"
  },
  {
    "text": "event-driven because if you think about it you have your application algorithm",
    "start": "880170",
    "end": "886370"
  },
  {
    "text": "you can no longer just just go from top to bottom imperative style programming",
    "start": "886370",
    "end": "894290"
  },
  {
    "text": "any of you have written messaging style applications okay so what are we doing",
    "start": "894380",
    "end": "902040"
  },
  {
    "text": "event style messaging we actually split it up we send messages and then you know there's some kind of a queue and then",
    "start": "902040",
    "end": "908519"
  },
  {
    "text": "we're taking things off of that queue with a small number of threads and we can do parallel processing that way so",
    "start": "908519",
    "end": "913769"
  },
  {
    "text": "this is something that needs to happen also in the application in order to be able to be non-blocking we need to be",
    "start": "913769",
    "end": "920069"
  },
  {
    "text": "much more event-driven message passing style architecture and we also need a",
    "start": "920069",
    "end": "928050"
  },
  {
    "text": "way to actually compose a synchro logic because at the end of the day what we're trying to do is not pass messages",
    "start": "928050",
    "end": "933399"
  },
  {
    "text": "we're trying to write application logic and we don't want that to be too complex",
    "start": "933399",
    "end": "938889"
  },
  {
    "text": "so we need some means of composing application logic as well and then as a",
    "start": "938889",
    "end": "947139"
  },
  {
    "text": "bonus in this kind of architecture when you have a lot of events flowing actually you begin to have the issue of",
    "start": "947139",
    "end": "954100"
  },
  {
    "text": "overflow and then you need a mechanism to control if you can push back to the",
    "start": "954100",
    "end": "959170"
  },
  {
    "text": "source and say I'm not ready you know it's not blocking i/o so maybe you're not able to write so you don't",
    "start": "959170",
    "end": "965980"
  },
  {
    "text": "want the upstream source to be sending any more events at the moment so let's",
    "start": "965980",
    "end": "972699"
  },
  {
    "start": "971000",
    "end": "1309000"
  },
  {
    "text": "take a quick look at the reactive stack as well so with the reactive stack we",
    "start": "972699",
    "end": "977740"
  },
  {
    "text": "have the HTTP server and the event loop so the processing actually happens on",
    "start": "977740",
    "end": "984220"
  },
  {
    "text": "the event loop thread and this is true for nettie obviously that's kind of the",
    "start": "984220",
    "end": "989649"
  },
  {
    "text": "way nettie works but it's interesting that even for servlet containers so servlet api has a non-blocking i/o from",
    "start": "989649",
    "end": "997509"
  },
  {
    "text": "separate 3.1 which is why we can also build all this on top of servlet",
    "start": "997509",
    "end": "1002519"
  },
  {
    "text": "containers we just can't use the server the API in the application so this is",
    "start": "1002519",
    "end": "1009540"
  },
  {
    "text": "going to look very similar we have a chain of filters and then we have a web framework at the end but there is a key",
    "start": "1009540",
    "end": "1017220"
  },
  {
    "text": "difference here is that there's now a very different assumption whereas with the servlet API the Void return value",
    "start": "1017220",
    "end": "1024120"
  },
  {
    "text": "kind of implies that if you have to do any kind of blocking that's going to be absorbed by the large thread pool of the",
    "start": "1024120",
    "end": "1030720"
  },
  {
    "text": "servlet container here we're actually running on the event loop which means",
    "start": "1030720",
    "end": "1035819"
  },
  {
    "text": "that you know it's maybe four threads maybe eight threads depending on the number of course you're not allowed to",
    "start": "1035819",
    "end": "1042959"
  },
  {
    "text": "block at any time because if you do you're pretty much blocking the server",
    "start": "1042959",
    "end": "1048418"
  },
  {
    "text": "you know again if you think in node.js terms we have a few extra threads here but you know it's the same principle",
    "start": "1048419",
    "end": "1054809"
  },
  {
    "text": "we're not allocating extra threads to achieve concurrency so we have to be",
    "start": "1054809",
    "end": "1060720"
  },
  {
    "text": "non-blocking by default that's the default assumption now so we in order to achieve that we have a",
    "start": "1060720",
    "end": "1068429"
  },
  {
    "text": "a synchronous API you'll see the return value is no longer void it's a thing",
    "start": "1068429",
    "end": "1073769"
  },
  {
    "text": "called mono void and mono is a type from the reactor library for those of you",
    "start": "1073769",
    "end": "1079740"
  },
  {
    "text": "that may be familiar with Eric's Java so our Java has the single type it's very",
    "start": "1079740",
    "end": "1085529"
  },
  {
    "text": "similar also to a completable feature in java 8 the main difference is that mono",
    "start": "1085529",
    "end": "1091500"
  },
  {
    "text": "gives you composability and it also gives you reactive streams and backpressure which means that unlike",
    "start": "1091500",
    "end": "1098130"
  },
  {
    "text": "a completable future with a mono until there is a subscriber ready to consume",
    "start": "1098130",
    "end": "1103860"
  },
  {
    "text": "the outputs no work actually happens so it has that deferred nature also for",
    "start": "1103860",
    "end": "1113639"
  },
  {
    "text": "non-blocking input so if we were reading the body of the request it's no longer the input",
    "start": "1113639",
    "end": "1119220"
  },
  {
    "text": "stream because that's blocking i/o again",
    "start": "1119220",
    "end": "1124130"
  },
  {
    "text": "we actually have a flux data structure again that's from the reactor library so",
    "start": "1124370",
    "end": "1133049"
  },
  {
    "text": "we're reading and writing with a flux and flux is a reactive stories publisher",
    "start": "1133049",
    "end": "1139080"
  },
  {
    "text": "also but it represents 0 to n elements and again in terms of our exact this",
    "start": "1139080",
    "end": "1145230"
  },
  {
    "text": "would be an observable so for those of you familiar with our java and i just",
    "start": "1145230",
    "end": "1150480"
  },
  {
    "text": "want to emphasize one more time that in the non blocking world when you say get",
    "start": "1150480",
    "end": "1156779"
  },
  {
    "text": "body or when you save right you're not actually writing you are declaring what",
    "start": "1156779",
    "end": "1164070"
  },
  {
    "text": "you will do because if you think about what you're what you're getting back here is a flux that's a promise of the",
    "start": "1164070",
    "end": "1170789"
  },
  {
    "text": "data the data is not yet consumed and on that flux you can compose your logic you",
    "start": "1170789",
    "end": "1176549"
  },
  {
    "text": "can say what should happen next very similar to the way you would use a Java eight stream API and you would use",
    "start": "1176549",
    "end": "1183000"
  },
  {
    "text": "operators to declare what kind of logic you want to apply in the case of spring",
    "start": "1183000",
    "end": "1188669"
  },
  {
    "text": "wet flux we're gonna take these data buffers and we're going to deserialize",
    "start": "1188669",
    "end": "1194279"
  },
  {
    "text": "into JSON from json into objects to make those available to the application but the point is that we're",
    "start": "1194279",
    "end": "1201359"
  },
  {
    "text": "not actually reading we're not actually writing so if you think about what",
    "start": "1201359",
    "end": "1206580"
  },
  {
    "text": "happens is that as you make a pass through the filter chain there's",
    "start": "1206580",
    "end": "1212639"
  },
  {
    "text": "actually two separate phases and this is again this is just kind of the wane on",
    "start": "1212639",
    "end": "1218190"
  },
  {
    "text": "walking in a sink works in the initial pass through the filter chain we're not actually doing any work we're declaring",
    "start": "1218190",
    "end": "1225499"
  },
  {
    "text": "the logic for the application asynchronous style and then once the",
    "start": "1225499",
    "end": "1232739"
  },
  {
    "text": "whole chain is is built the actual processing begins by the subscriber at",
    "start": "1232739",
    "end": "1238649"
  },
  {
    "text": "the end of the chain kicking it off by subscribing and now the data starts flowing and again this brings me back to",
    "start": "1238649",
    "end": "1244769"
  },
  {
    "text": "the point about a messaging message messaging style event-driven architecture except in your application",
    "start": "1244769",
    "end": "1252659"
  },
  {
    "text": "you're just using observable or reactor flux but under the covers you will see",
    "start": "1252659",
    "end": "1258840"
  },
  {
    "text": "that what looks like a lot like messaging application you have different processing chunks of logic and then you",
    "start": "1258840",
    "end": "1266369"
  },
  {
    "text": "know there's data flowing on those monos and fluxes and just to point out once",
    "start": "1266369",
    "end": "1274470"
  },
  {
    "text": "again reactive streams is an interoperability spec so flux for",
    "start": "1274470",
    "end": "1279869"
  },
  {
    "text": "example is a reactive streams publisher which means that when you subscribe to it it's a it's a source of data it's",
    "start": "1279869",
    "end": "1286229"
  },
  {
    "text": "gonna give you some you know let's say it's a driver it gives you some data you can actually control how much",
    "start": "1286229",
    "end": "1292919"
  },
  {
    "text": "data comes at you by making a request and you can indicate how many items should come back to you and then those",
    "start": "1292919",
    "end": "1299639"
  },
  {
    "text": "items come only if you request them so that's the concept of back pressure here dealing with overflow of events",
    "start": "1299639",
    "end": "1308149"
  },
  {
    "start": "1309000",
    "end": "1707000"
  },
  {
    "text": "okay so let's actually take a look at",
    "start": "1310310",
    "end": "1316040"
  },
  {
    "text": "some code so I have a here to demo I'm",
    "start": "1316040",
    "end": "1324110"
  },
  {
    "text": "gonna start there different parts to it so I'm just gonna start first with",
    "start": "1324110",
    "end": "1330190"
  },
  {
    "text": "showing you a car repository and this is using the reactive repository from",
    "start": "1330400",
    "end": "1337610"
  },
  {
    "text": "spring data kay is this visible in the back can you see well yeah good so again",
    "start": "1337610",
    "end": "1345830"
  },
  {
    "text": "you may not be familiar with spring data but it's a really simple concept you just implement an interface and that",
    "start": "1345830",
    "end": "1352670"
  },
  {
    "text": "gives you methods that you can use to to insert and retrieve data so for example",
    "start": "1352670",
    "end": "1359870"
  },
  {
    "text": "you have insert here you have find all and what you will notice is that these",
    "start": "1359870",
    "end": "1365060"
  },
  {
    "text": "methods are actually using reactive types so this is the reactive data support and I'll talk about it a label",
    "start": "1365060",
    "end": "1372740"
  },
  {
    "text": "in a little bit then I have a spring MVC or spring web blocks we actually support",
    "start": "1372740",
    "end": "1379820"
  },
  {
    "text": "the same programming model on top with flexible method signatures so you have a",
    "start": "1379820",
    "end": "1386350"
  },
  {
    "text": "controller method which is mapped to the slash cars URL and that's a get mapping",
    "start": "1386350",
    "end": "1393440"
  },
  {
    "text": "and we're going to call the repository and simply return the the output of that",
    "start": "1393440",
    "end": "1398720"
  },
  {
    "text": "from the controller and that's what we want to write the HTTP response with and",
    "start": "1398720",
    "end": "1403760"
  },
  {
    "text": "if you take a look at the car this is kind of like a ubirr lyft application",
    "start": "1403760",
    "end": "1409880"
  },
  {
    "text": "obviously extremely simplistic but we have a car with a location and then each",
    "start": "1409880",
    "end": "1416330"
  },
  {
    "text": "location has a longitude and latitude and this is a spring boot app and I'm",
    "start": "1416330",
    "end": "1423260"
  },
  {
    "text": "just gonna show you quickly the palm",
    "start": "1423260",
    "end": "1430700"
  },
  {
    "text": "I am simply using the web starter so the web starter in spring boot gives me the",
    "start": "1430700",
    "end": "1437960"
  },
  {
    "text": "traditional service stack with Tomcat spring MVC kind of you know automatic defaults",
    "start": "1437960",
    "end": "1444050"
  },
  {
    "text": "we're gonna switch in a moment to wet flux which gives us different the reactive stack so let's go ahead and oh",
    "start": "1444050",
    "end": "1450320"
  },
  {
    "text": "one last thing here so on startup we're going to insert some cars into the",
    "start": "1450320",
    "end": "1459380"
  },
  {
    "text": "collection you can see here we're actually using it's kind of interesting",
    "start": "1459380",
    "end": "1464570"
  },
  {
    "text": "if you haven't seen flux in action we're going to generate a range from 1 to 100 and then we're going to map each number",
    "start": "1464570",
    "end": "1473210"
  },
  {
    "text": "into an actual we're gonna create a car out of that and we're gonna generate a random location in the vicinity and then",
    "start": "1473210",
    "end": "1482180"
  },
  {
    "text": "we're going to save that to the collection so let's go ahead and start this",
    "start": "1482180",
    "end": "1488980"
  },
  {
    "text": "okay so once this is up and running you will see that we are running on Tomcat",
    "start": "1496380",
    "end": "1501410"
  },
  {
    "text": "and that's the default it's very easy to switch to another server container like JD but by default we come up with Tomcat",
    "start": "1501410",
    "end": "1511320"
  },
  {
    "text": "so let's do ad",
    "start": "1511320",
    "end": "1521010"
  },
  {
    "text": "we're on a t1 here and we're gonna get a JSON array back of all the 100 cars and",
    "start": "1521010",
    "end": "1527429"
  },
  {
    "text": "locations that we inserted I just want to show here the JSON and let's take a",
    "start": "1527429",
    "end": "1533640"
  },
  {
    "text": "quick look at the output so what you will see here this is the Tomcat thread",
    "start": "1533640",
    "end": "1540419"
  },
  {
    "text": "so this is kind of the server trio a sync again we're executing here with",
    "start": "1540419",
    "end": "1545669"
  },
  {
    "text": "spring MVC unsurveyed stack so we're using the server trio async requests this is the Tomcat thread you can also",
    "start": "1545669",
    "end": "1552809"
  },
  {
    "text": "see the reactive streams contract here in action because we got a flux back",
    "start": "1552809",
    "end": "1560130"
  },
  {
    "text": "from the controller spring MVC will subscribe to that flux mm-hmm and you",
    "start": "1560130",
    "end": "1565230"
  },
  {
    "text": "can see that it's requesting unbounded which means give me all the elements you've got and I'll talk about that in a",
    "start": "1565230",
    "end": "1571559"
  },
  {
    "text": "moment why that is but we're then saying concurrent handling started we're going",
    "start": "1571559",
    "end": "1577470"
  },
  {
    "text": "to leave the response open because we're gonna exit all the way from the thread and now we're going to get all the data",
    "start": "1577470",
    "end": "1583710"
  },
  {
    "text": "back and this is the threat coming from  producing the data into the flux",
    "start": "1583710",
    "end": "1589070"
  },
  {
    "text": "once we get all hundreds of them we got",
    "start": "1589070",
    "end": "1594390"
  },
  {
    "text": "a kind of a whole array list and then we're going to get back",
    "start": "1594390",
    "end": "1599640"
  },
  {
    "text": "dispatch back into the server container thread again that's the little server trio a sync dance so let's go ahead and",
    "start": "1599640",
    "end": "1607919"
  },
  {
    "text": "change now to wet flux and this is the",
    "start": "1607919",
    "end": "1613980"
  },
  {
    "text": "wet flix starter in spring boot and this",
    "start": "1613980",
    "end": "1620669"
  },
  {
    "text": "is kind of neat I mean I actually haven't changed the",
    "start": "1620669",
    "end": "1625850"
  },
  {
    "text": "I haven't changed the code so the coding is exactly the same but I've switched",
    "start": "1628070",
    "end": "1633200"
  },
  {
    "text": "the stacks and you will see that underneath now I'm running on Nettie by",
    "start": "1633200",
    "end": "1638299"
  },
  {
    "text": "default spring boot 2 is actually using Nettie because that's a better",
    "start": "1638299",
    "end": "1644239"
  },
  {
    "text": "experience out of the box and this is not to say that Tomcat is you know not as good as Nettie that's kind of a",
    "start": "1644239",
    "end": "1651799"
  },
  {
    "text": "loaded comparison anyway that's a lot more complex but there's certain things",
    "start": "1651799",
    "end": "1657350"
  },
  {
    "text": "around the server 3 Oh a sink and server 3 1 as well that aren't quite as well",
    "start": "1657350",
    "end": "1665179"
  },
  {
    "text": "done like detecting disconnected clients they're they're little things like that which in the scheme of things aren't",
    "start": "1665179",
    "end": "1670340"
  },
  {
    "text": "that little but they're more tied to the service API than to Tomcat really so we",
    "start": "1670340",
    "end": "1676940"
  },
  {
    "text": "have an ad out of the box so let's go ahead and execute the same thing here",
    "start": "1676940",
    "end": "1682869"
  },
  {
    "text": "and same outputs if we now take a look at what happened here very similar but",
    "start": "1682869",
    "end": "1689599"
  },
  {
    "text": "we're not you're not gonna see that whole back and forth with two different threads it's just the reactor native",
    "start": "1689599",
    "end": "1696559"
  },
  {
    "text": "threads and then we're subscribing once again unbounded and we get all the data back and that's it you know it's it's a",
    "start": "1696559",
    "end": "1701929"
  },
  {
    "text": "little bit simpler we're not like switching threads as many times",
    "start": "1701929",
    "end": "1707169"
  },
  {
    "start": "1707000",
    "end": "1885000"
  },
  {
    "text": "ok so let's recap here basically we",
    "start": "1707950",
    "end": "1716059"
  },
  {
    "text": "think that whether you're on the servlet stack and there are many existing applications that are going to continue",
    "start": "1716059",
    "end": "1721309"
  },
  {
    "text": "to be on the service stack even if you're writing a new application you may consider doing that because it's simple",
    "start": "1721309",
    "end": "1727340"
  },
  {
    "text": "enough you know to write applications that way or maybe because you're not ready to go all the way on the reactive",
    "start": "1727340",
    "end": "1732979"
  },
  {
    "text": "stack because the programming model is actually requires you to learn quite a",
    "start": "1732979",
    "end": "1738139"
  },
  {
    "text": "bit more but one thing that's quite easy to do which is good for micro services",
    "start": "1738139",
    "end": "1743239"
  },
  {
    "text": "is that you can call a reactive data repository and you can do that from the spring MVC controller and you return",
    "start": "1743239",
    "end": "1749330"
  },
  {
    "text": "that flux or we support Eric's Java you can return observable as well and then spring MVC will know what to do from",
    "start": "1749330",
    "end": "1755629"
  },
  {
    "text": "there and deal with the whole reactive pooling of the data but here's an",
    "start": "1755629",
    "end": "1761299"
  },
  {
    "text": "interesting question a flux represents a potentially infinite stream of data right so if we",
    "start": "1761299",
    "end": "1769380"
  },
  {
    "text": "give a flux to the web framework spring and Miss your wet flux how does it know",
    "start": "1769380",
    "end": "1775530"
  },
  {
    "text": "actually what to do are we going to be writing an infinite stream or are we",
    "start": "1775530",
    "end": "1781230"
  },
  {
    "text": "going to be writing a collection and sending back a JSON array that's an",
    "start": "1781230",
    "end": "1787050"
  },
  {
    "text": "important question actually we need to know which one of these two is it because with the collection we can",
    "start": "1787050",
    "end": "1792960"
  },
  {
    "text": "actually buffer all the elements and then write it out besides we need to write it as a JSON array whereas with",
    "start": "1792960",
    "end": "1800370"
  },
  {
    "text": "the infinite stream we need to flush after each item to make sure it shows up immediately they may be some time in between each item so generally you know",
    "start": "1800370",
    "end": "1809100"
  },
  {
    "text": "those two use cases are quite different so basically the answer is that we use",
    "start": "1809100",
    "end": "1814170"
  },
  {
    "text": "the media type to determine what you actually intend to do so for example if",
    "start": "1814170",
    "end": "1821310"
  },
  {
    "text": "we know that the client or the server you know but both can indicate the preference",
    "start": "1821310",
    "end": "1827220"
  },
  {
    "text": "wants to produce JSON the only way to produce JSON is actually valid JSON out",
    "start": "1827220",
    "end": "1833730"
  },
  {
    "text": "of a collection is to produce a JSON array right I mean that's that's what we",
    "start": "1833730",
    "end": "1838950"
  },
  {
    "text": "have to go with and because browsers so if you think about browsers which you",
    "start": "1838950",
    "end": "1845010"
  },
  {
    "text": "know may be a common use case here they don't know how to consume a stream other than server-sent events so the media",
    "start": "1845010",
    "end": "1852780"
  },
  {
    "text": "type for that has to be text event stream or otherwise we have to produce a JSON array or otherwise the browser we",
    "start": "1852780",
    "end": "1859290"
  },
  {
    "text": "can be streaming but the browser is not going to get any of the data until we write all of it so by default we tend to",
    "start": "1859290",
    "end": "1867030"
  },
  {
    "text": "assume that what you want to do is to write application JSON that's why you see that there's no back pressure we",
    "start": "1867030",
    "end": "1874110"
  },
  {
    "text": "know that this is kind of a collection we ask for all the data to come we accumulated you know in a list and then",
    "start": "1874110",
    "end": "1881130"
  },
  {
    "text": "we write that out as a JSON array but it",
    "start": "1881130",
    "end": "1886890"
  },
  {
    "start": "1885000",
    "end": "2141000"
  },
  {
    "text": "actually is more interesting to see back pressure in action so this is we're going to look at the streaming scenarios",
    "start": "1886890",
    "end": "1894630"
  },
  {
    "text": "and there's a couple of different media types that can indicate streaming obviously one of them",
    "start": "1894630",
    "end": "1899929"
  },
  {
    "text": "server-sent events but if you're not in a browser or if you're streaming up to",
    "start": "1899929",
    "end": "1905510"
  },
  {
    "text": "the server you might use applications stream JSON which essentially looks a",
    "start": "1905510",
    "end": "1910580"
  },
  {
    "text": "lot like a JSON array without the angle brackets around it so it just basically a JSON object one line at a time you",
    "start": "1910580",
    "end": "1918440"
  },
  {
    "text": "know pretty straightforward simple concept but you know we kind of have to know which of these cases it is so what",
    "start": "1918440",
    "end": "1927140"
  },
  {
    "text": "do we do in the case of streaming again we're a little bit different we're not",
    "start": "1927140",
    "end": "1932540"
  },
  {
    "text": "accumulating into a list we're going to be requesting from the source of the",
    "start": "1932540",
    "end": "1937970"
  },
  {
    "text": "data to give us some items and and that's going to be a specific number not",
    "start": "1937970",
    "end": "1944030"
  },
  {
    "text": "saying give me all you've got then we're going to write whatever we get we're gonna flush immediately to make sure",
    "start": "1944030",
    "end": "1950059"
  },
  {
    "text": "that it's immediately seen by the client and then we're gonna keep repeating that possibly forever so this is what it",
    "start": "1950059",
    "end": "1959450"
  },
  {
    "text": "looks like here we're indicating from the server side that we're going to be sending SSE now interestingly the way",
    "start": "1959450",
    "end": "1967760"
  },
  {
    "text": "the backpressure works on the servlet stack so if we're doing this right here",
    "start": "1967760",
    "end": "1973100"
  },
  {
    "text": "on a servlet stack we have to back pressure against the blocking right at",
    "start": "1973100",
    "end": "1980120"
  },
  {
    "text": "the end of the day there's no getting away from the fact that when you write to the response to the server the output",
    "start": "1980120",
    "end": "1986150"
  },
  {
    "text": "stream that's a blocking right so the only way to implement back pressure in that case is to actually wait for the",
    "start": "1986150",
    "end": "1993380"
  },
  {
    "text": "blocking right to complete and then ask for the next item and you just keep doing that so that's basically your",
    "start": "1993380",
    "end": "2000070"
  },
  {
    "text": "strategy for back pressure if you keep asking for more items then they're gonna",
    "start": "2000070",
    "end": "2006220"
  },
  {
    "text": "back up right so obviously we have to apply this kind of back pressure",
    "start": "2006220",
    "end": "2011650"
  },
  {
    "text": "translate into this kind of simple one by one back pressure",
    "start": "2011650",
    "end": "2017429"
  },
  {
    "text": "survey three one non-blocking i/o well this is what I mentioned earlier that",
    "start": "2019940",
    "end": "2026169"
  },
  {
    "text": "unlike the server trio async with survey three one non-blocking it's actually",
    "start": "2026169",
    "end": "2032659"
  },
  {
    "text": "really hard read impossible to retrofit",
    "start": "2032659",
    "end": "2037850"
  },
  {
    "text": "into an existing ecosystem of frameworks and applications because it goes so deep into the into the you know framework and",
    "start": "2037850",
    "end": "2045049"
  },
  {
    "text": "stack that you can't you can't undo you know what is already been written as a",
    "start": "2045049",
    "end": "2050720"
  },
  {
    "text": "blocking code also the service api itself contradicts itself if you go down",
    "start": "2050720",
    "end": "2058280"
  },
  {
    "text": "the path of 73 one non-blocking i/o you have to forget about many parts of the soviet api like you can't call get",
    "start": "2058280",
    "end": "2065148"
  },
  {
    "text": "parameter because that may block trying to read from the request body there's all kinds of things like that which",
    "start": "2065149",
    "end": "2072460"
  },
  {
    "text": "practically mean that you can do non-blocking i/o on a service container but not with the rest of the service api",
    "start": "2072460",
    "end": "2081848"
  },
  {
    "text": "so on the reactive stack we actually adapt to a non-blocking runtime which",
    "start": "2081909",
    "end": "2089148"
  },
  {
    "text": "means that we can do back pressure all the way to the socket and that's pretty neat I mean you've got say the data",
    "start": "2089149",
    "end": "2096679"
  },
  {
    "text": "repository all the way on the right reacted data repository then you have",
    "start": "2096679",
    "end": "2102079"
  },
  {
    "text": "the controller doing some work then you have the web framework and then we have a reactive layer on top of the HTTP",
    "start": "2102079",
    "end": "2108319"
  },
  {
    "text": "server and you've got back pressure across all of these components thanks to reactive streams and that's",
    "start": "2108319",
    "end": "2114740"
  },
  {
    "text": "very powerful because if the HTTP client is slow let's say flaky client / bad",
    "start": "2114740",
    "end": "2122150"
  },
  {
    "text": "network we're not ready to write we have a way of you know the non-blocking runtime gives us a way to check for that",
    "start": "2122150",
    "end": "2128720"
  },
  {
    "text": "we can translate that into back pressure and that will go all the way to the upstream to say don't give us any more",
    "start": "2128720",
    "end": "2135020"
  },
  {
    "text": "items because we're not ready to to write them and and that's a very powerful mechanism so let's take a look",
    "start": "2135020",
    "end": "2144020"
  },
  {
    "start": "2141000",
    "end": "2341000"
  },
  {
    "text": "at that in action so we're still running here with web flux",
    "start": "2144020",
    "end": "2152140"
  },
  {
    "text": "and I'm gonna take the same query but I'm just going to add a HTTP a media",
    "start": "2152140",
    "end": "2161780"
  },
  {
    "text": "type let's do event stream SSE so now",
    "start": "2161780",
    "end": "2170720"
  },
  {
    "text": "we're getting the data back as server-sent events but let's take a look at the no I don't want to exit over here",
    "start": "2170720",
    "end": "2184970"
  },
  {
    "text": "so let's see what happened over here this time we did a subscribe and you can",
    "start": "2184970",
    "end": "2191810"
  },
  {
    "text": "see that it's asking for a certain amount of items at a time and this is",
    "start": "2191810",
    "end": "2197630"
  },
  {
    "text": "the implementation of the reactive library that we're using in this case reactor it's asking for 31 items to",
    "start": "2197630",
    "end": "2204140"
  },
  {
    "text": "start and then we're getting 31 instances from the repository then",
    "start": "2204140",
    "end": "2212570"
  },
  {
    "text": "it's asking for 24 more and we keep going like this and what's interesting here is that if at some point you know",
    "start": "2212570",
    "end": "2218630"
  },
  {
    "text": "obviously this went fast but if at some point we had to block we're not holding on to any threads so the cost of an",
    "start": "2218630",
    "end": "2226130"
  },
  {
    "text": "extra connection at that point it is pretty cheap because we're you know our whole stack is built to work pretty well",
    "start": "2226130",
    "end": "2232910"
  },
  {
    "text": "with that so let's switch quickly to",
    "start": "2232910",
    "end": "2239830"
  },
  {
    "text": "back to service stack here",
    "start": "2239830",
    "end": "2244360"
  },
  {
    "text": "okay so you can see we're back on Tomcat",
    "start": "2254040",
    "end": "2258720"
  },
  {
    "text": "and I'm gonna do the same thing and once again I'm gonna get server-sent events",
    "start": "2260160",
    "end": "2266910"
  },
  {
    "text": "now what happened here you will see that",
    "start": "2266910",
    "end": "2272410"
  },
  {
    "text": "we're going through the reactive trees protocol also but we're doing one item at a time and the other thing you will",
    "start": "2272410",
    "end": "2278560"
  },
  {
    "text": "see is that the right is actually performed on a on a thread because we're",
    "start": "2278560",
    "end": "2284470"
  },
  {
    "text": "switching from non-blocking library to a blocking right we don't want to block in",
    "start": "2284470",
    "end": "2290890"
  },
  {
    "text": "this case the thread on which we are trying to make that right so we have",
    "start": "2290890",
    "end": "2296140"
  },
  {
    "text": "to switch threads as well to ensure that that blocking right can be absorbed with an extra thread to achieve concurrency",
    "start": "2296140",
    "end": "2302230"
  },
  {
    "text": "you know that's the strategy for blocking operations so we do that automatically which means that in spring",
    "start": "2302230",
    "end": "2308110"
  },
  {
    "text": "MVC once again you can simply return a flux and then if that's a streaming",
    "start": "2308110",
    "end": "2315730"
  },
  {
    "text": "scenario we're actually going to apply back pressure against the source and we're going to do the blocking right to",
    "start": "2315730",
    "end": "2322180"
  },
  {
    "text": "the HTTP response output stream using a dedicated thread pool for that so you",
    "start": "2322180",
    "end": "2329380"
  },
  {
    "text": "can do reactive stuff but obviously at the end of the day your input and output to the client is still blocking",
    "start": "2329380",
    "end": "2338040"
  },
  {
    "start": "2341000",
    "end": "2575000"
  },
  {
    "text": "okay now reactive remote service orchestration let's continue with the",
    "start": "2342300",
    "end": "2349170"
  },
  {
    "text": "demo here so I'm going to show you the other bits of the application so this is",
    "start": "2349170",
    "end": "2355140"
  },
  {
    "text": "a car location service that gives me a list of cars and locations then there's",
    "start": "2355140",
    "end": "2360900"
  },
  {
    "text": "also a request booking application and",
    "start": "2360900",
    "end": "2367950"
  },
  {
    "text": "that one is very simple it simulates a driver say for example we make a request",
    "start": "2367950",
    "end": "2375480"
  },
  {
    "text": "to to a car and then the driver can respond within a certain amount of time",
    "start": "2375480",
    "end": "2381110"
  },
  {
    "text": "to accept and you can see here again you know I'm using mano here to simulate a",
    "start": "2381110",
    "end": "2388080"
  },
  {
    "text": "random think time of two to five seconds for the driver to respond obviously it's",
    "start": "2388080",
    "end": "2394200"
  },
  {
    "text": "gonna be more than that but that's for",
    "start": "2394200",
    "end": "2399300"
  },
  {
    "text": "the demo here and then I have a front-end app let me just start this one",
    "start": "2399300",
    "end": "2409950"
  },
  {
    "text": "while I'm showing the other so that one",
    "start": "2409950",
    "end": "2415080"
  },
  {
    "text": "is on 80-82 and then the front-end app looks like this so this is a this is a",
    "start": "2415080",
    "end": "2425670"
  },
  {
    "text": "spring MVC to start application and it's",
    "start": "2425670",
    "end": "2432870"
  },
  {
    "text": "using the reactive web client you will see here that it's actually making a",
    "start": "2432870",
    "end": "2438420"
  },
  {
    "text": "call to that URL we've been using slash cars then it's deserializing to car each",
    "start": "2438420",
    "end": "2444900"
  },
  {
    "text": "item then it's taking the first five of those and then it's making a nested",
    "start": "2444900",
    "end": "2450420"
  },
  {
    "text": "operation using flatmap to make a call for each one of those to the other service to actually try and perform a",
    "start": "2450420",
    "end": "2457830"
  },
  {
    "text": "booking and then whichever comes back first we're gonna take that one so that's kind of pretty nice orchestration",
    "start": "2457830",
    "end": "2464520"
  },
  {
    "text": "and we're using a reactive web client which is pretty smart about using resources it's not gonna you know use",
    "start": "2464520",
    "end": "2470280"
  },
  {
    "text": "extra threads etc so let's go ahead and run that as well",
    "start": "2470280",
    "end": "2476810"
  },
  {
    "text": "so what I'm going to do is hey this one",
    "start": "2489670",
    "end": "2497740"
  },
  {
    "text": "is 8080 just just give me a book me a car basically and we have to actually",
    "start": "2497740",
    "end": "2505960"
  },
  {
    "text": "make it a post an HTTP POST so there is",
    "start": "2505960",
    "end": "2511210"
  },
  {
    "text": "the random thing time of two to five seconds and if we take a look at the outputs for the car application you will",
    "start": "2511210",
    "end": "2521380"
  },
  {
    "text": "see here that it made the calls to get cars and then it got five the first five",
    "start": "2521380",
    "end": "2528220"
  },
  {
    "text": "and then it made an attempt to book each one of those in you know separate HTTP",
    "start": "2528220",
    "end": "2534220"
  },
  {
    "text": "calls and then the first one to come back let's see which one did we get that was",
    "start": "2534220",
    "end": "2540609"
  },
  {
    "text": "car number four so pretty nice actually that we can do something like this it",
    "start": "2540609",
    "end": "2547720"
  },
  {
    "text": "works with spring MVC and spring web flux we can use we can do reactive style",
    "start": "2547720",
    "end": "2552849"
  },
  {
    "text": "orchestration of remote HTTP calls do stuff like this and I don't know if you",
    "start": "2552849",
    "end": "2559960"
  },
  {
    "text": "do this sort of thing or how I feel about it but I think when you you know do something like that it's usually a",
    "start": "2559960",
    "end": "2565509"
  },
  {
    "text": "good moment to kind of boast to your colleagues you know what you just achieved because you know it is it is",
    "start": "2565509",
    "end": "2571089"
  },
  {
    "text": "cool so for the fourth use case reactive",
    "start": "2571089",
    "end": "2580450"
  },
  {
    "start": "2575000",
    "end": "2668000"
  },
  {
    "text": "request input this is something that is now reactive stack territory only",
    "start": "2580450",
    "end": "2586049"
  },
  {
    "text": "because while we can do reactive request handling returned a flux from on the server stack in a spring MVC controller",
    "start": "2586049",
    "end": "2592410"
  },
  {
    "text": "it's actually not possible to make the input non-blocking you know that's that's actually quite",
    "start": "2592410",
    "end": "2598920"
  },
  {
    "text": "quite difficult to achieve and not really possible without using non-blocking i/o so we are talking about",
    "start": "2598920",
    "end": "2604750"
  },
  {
    "text": "doing something like this taking the body of the request deserialized as json or something maybe xml possibly and then",
    "start": "2604750",
    "end": "2615359"
  },
  {
    "text": "working with that so the thing to realize that that when this controller method is invoked the body",
    "start": "2615359",
    "end": "2621560"
  },
  {
    "text": "hasn't been read yet you know this is just a promise to give me the body is",
    "start": "2621560",
    "end": "2626660"
  },
  {
    "text": "that particular object type and we can turn around and we can do some",
    "start": "2626660",
    "end": "2632470"
  },
  {
    "text": "composition of logic on that or we can pass it into the reactive repository here which then returns a",
    "start": "2632470",
    "end": "2639080"
  },
  {
    "text": "mono void which is again a promise that tells us did that succeed or did that fail but again when we're making a pass",
    "start": "2639080",
    "end": "2646460"
  },
  {
    "text": "through this controller method we're not actually executing or reading the data yet we're just declaring what will",
    "start": "2646460",
    "end": "2652100"
  },
  {
    "text": "happen that kind of takes some getting used to that thinking if anybody comes from a node.js background that's",
    "start": "2652100",
    "end": "2658220"
  },
  {
    "text": "probably like yeah that's the way it works but for us in Java you know it's not the way we're used to thinking so it",
    "start": "2658220",
    "end": "2664910"
  },
  {
    "text": "takes an adjustment so an extension of",
    "start": "2664910",
    "end": "2672560"
  },
  {
    "text": "that which is quite interesting is in a game these are scenarios where the non-blocking all the way reactive stack",
    "start": "2672560",
    "end": "2679460"
  },
  {
    "text": "you know just shines because it just becomes so easy to do these things so what I'm going to show you is is a",
    "start": "2679460",
    "end": "2686960"
  },
  {
    "text": "service which well the car service right we inserted a bunch of cars on startup",
    "start": "2686960",
    "end": "2694310"
  },
  {
    "text": "but what if we could upload these locations into the service and and we're",
    "start": "2694310",
    "end": "2701390"
  },
  {
    "text": "going to consume them as you can see here the request body with back pressure which means that as we're reading from",
    "start": "2701390",
    "end": "2708740"
  },
  {
    "text": "the socket we can tell the socket to stop reading if we're not ready to consume the data and what we're gonna do",
    "start": "2708740",
    "end": "2715340"
  },
  {
    "text": "in this case well here we're inserting it into a repository and then and then",
    "start": "2715340",
    "end": "2723260"
  },
  {
    "text": "we're going to also stream that down so so let's take a look at the code actually so for that I want to make sure",
    "start": "2723260",
    "end": "2731360"
  },
  {
    "text": "that I'm on what flux for the car location service because again that's",
    "start": "2731360",
    "end": "2736580"
  },
  {
    "text": "only possible to do on the reactive",
    "start": "2736580",
    "end": "2741590"
  },
  {
    "text": "stack and I'm going to restart that application",
    "start": "2741590",
    "end": "2748780"
  },
  {
    "text": "so this is my car location service and I'm running on Eddie so now what I'm",
    "start": "2750300",
    "end": "2755860"
  },
  {
    "text": "gonna do is go to my I forgot to do",
    "start": "2755860",
    "end": "2761380"
  },
  {
    "text": "something one second here so back in the car location service app I mentioned that",
    "start": "2761380",
    "end": "2770230"
  },
  {
    "text": "there is this method with it salable annotation so this is for finding cars and the terrible annotation is is",
    "start": "2770230",
    "end": "2777010"
  },
  {
    "text": "support that hooks into for an infinite collection so this is a streaming scenario where as things",
    "start": "2777010",
    "end": "2783520"
  },
  {
    "text": "appear in the collection I want to see them so I'm going to switch to using",
    "start": "2783520",
    "end": "2789090"
  },
  {
    "text": "that in my controller so I'm gonna use",
    "start": "2789090",
    "end": "2794650"
  },
  {
    "text": "to switch to that method find cars by and I'm now I'm going to restart and you",
    "start": "2794650",
    "end": "2803980"
  },
  {
    "text": "remember before that when I did server-sent events it gave me the hundred and then and then it finished",
    "start": "2803980",
    "end": "2810040"
  },
  {
    "text": "because the the flux completed and it said there are no more items but now what we actually want is a streaming so",
    "start": "2810040",
    "end": "2821350"
  },
  {
    "text": "I'm going to do let's see if I can get it from here so now it's actually",
    "start": "2821350",
    "end": "2827050"
  },
  {
    "text": "waiting for more data to arrive because that's an infinite collection and that's how we're getting it from and then",
    "start": "2827050",
    "end": "2834940"
  },
  {
    "text": "I'm going to show you easier to get to it here the uploads app so for this what",
    "start": "2834940",
    "end": "2846640"
  },
  {
    "text": "I have is I am again interesting to just observe flux in action a lot of the",
    "start": "2846640",
    "end": "2854200"
  },
  {
    "text": "operators are very closely aligned to our exam uh so if you're familiar with rxjs or RX java reactor and rx Java are",
    "start": "2854200",
    "end": "2861310"
  },
  {
    "text": "very similar the way that I would describe it is that reactor is more positioned to be the server side Java",
    "start": "2861310",
    "end": "2867660"
  },
  {
    "text": "you know with reactive streams first and foremost and then borrowing a lot of",
    "start": "2867660",
    "end": "2873160"
  },
  {
    "text": "influence from reactive X so here we have the interval operator and we're",
    "start": "2873160",
    "end": "2878410"
  },
  {
    "text": "going to produce a every two seconds or an event if you will and then out of that we're going to",
    "start": "2878410",
    "end": "2884980"
  },
  {
    "text": "generate a car random car location and that is a stream so then we're going to",
    "start": "2884980",
    "end": "2892090"
  },
  {
    "text": "do a post to slash cars we're going to send that as a stream of JS as a JSON",
    "start": "2892090",
    "end": "2897340"
  },
  {
    "text": "stream basically one JSON object at a time we're going to pass the stream into",
    "start": "2897340",
    "end": "2902950"
  },
  {
    "text": "the body method and then we're going to say retrieve and now we're going to get the confirmations back and that's kind",
    "start": "2902950",
    "end": "2910780"
  },
  {
    "text": "of interesting to see on the controller side as well so on the controller side this is where we're consuming the stream",
    "start": "2910780",
    "end": "2916020"
  },
  {
    "text": "we're inserting it into the repository and that gives us back well",
    "start": "2916020",
    "end": "2921910"
  },
  {
    "text": "you see it here we get back a flux of cars and those are the confirmations for each inserted car right because if at",
    "start": "2921910",
    "end": "2929050"
  },
  {
    "text": "some point it stops we want to know how many were actually inserted so that's kind of working with stream semantics so",
    "start": "2929050",
    "end": "2936970"
  },
  {
    "text": "we still have this guy here sitting and waiting and now I'm gonna go back to the",
    "start": "2936970",
    "end": "2943930"
  },
  {
    "text": "uploads and get that started so this is",
    "start": "2943930",
    "end": "2953290"
  },
  {
    "text": "now uploading into the controller on the server side and over here so I have one",
    "start": "2953290",
    "end": "2965080"
  },
  {
    "text": "client uploading data into the car location service then the car location",
    "start": "2965080",
    "end": "2970960"
  },
  {
    "text": "controller is taking that inserting it into the repository with back",
    "start": "2970960",
    "end": "2976330"
  },
  {
    "text": "pressure coming from the socket as we're reading and into the collection",
    "start": "2976330",
    "end": "2981400"
  },
  {
    "text": "and then we have another client that's actually pulling down a stream and as",
    "start": "2981400",
    "end": "2986410"
  },
  {
    "text": "those locations are going into the collection we're streaming down again",
    "start": "2986410",
    "end": "2991540"
  },
  {
    "text": "with back pressure so these kinds of streaming scenarios become very easy to deal with in webparts",
    "start": "2991540",
    "end": "3000200"
  },
  {
    "text": "okay so we can stop and again we're",
    "start": "3003980",
    "end": "3014010"
  },
  {
    "text": "going all the way to the HTTP server and applying back pressure in both directions so essentially on the servlet",
    "start": "3014010",
    "end": "3022050"
  },
  {
    "text": "stack we can use reactive clients because we have servlet Rio a",
    "start": "3022050",
    "end": "3027210"
  },
  {
    "text": "synchronous requests it means that we can effectively do asynchronous work in",
    "start": "3027210",
    "end": "3034290"
  },
  {
    "text": "the controller and kind of separate the request handling from the servlet container thread that allows us to do",
    "start": "3034290",
    "end": "3040650"
  },
  {
    "text": "streaming to the response with back pressure it allows us to use reactive HTTP client like the web client in",
    "start": "3040650",
    "end": "3046980"
  },
  {
    "text": "spring five so that's instantly usable in present-day applications with very",
    "start": "3046980",
    "end": "3052380"
  },
  {
    "text": "little effort it means you don't have to switch wholesale to being reactive and",
    "start": "3052380",
    "end": "3058260"
  },
  {
    "text": "using flux or observable for everything you do which is not an easy transition it takes it takes some time you know I",
    "start": "3058260",
    "end": "3064590"
  },
  {
    "text": "haven't seen anybody who said you know this this was so easy from the start but",
    "start": "3064590",
    "end": "3070770"
  },
  {
    "text": "when we start talking about reading from the body of the request or any scenarios on that side you're not gonna be able to",
    "start": "3070770",
    "end": "3077280"
  },
  {
    "text": "make that non-blocking and you're also not gonna be able to make the right back to the client any",
    "start": "3077280",
    "end": "3082770"
  },
  {
    "text": "input output through the servlet input and output stream is going to be still blocking and that's gonna require",
    "start": "3082770",
    "end": "3087960"
  },
  {
    "text": "threads again not necessarily a bad thing you know if your application",
    "start": "3087960",
    "end": "3094050"
  },
  {
    "text": "scales fine yeah you know it's very easy to fall into the mindset of you know",
    "start": "3094050",
    "end": "3099930"
  },
  {
    "text": "this is the new and cool stuff and that's the way to go now versus this is the old stuff",
    "start": "3099930",
    "end": "3105480"
  },
  {
    "text": "well if it works you know it's actually a lot simpler to write server",
    "start": "3105480",
    "end": "3110790"
  },
  {
    "text": "applications because of the imperative programming model but if you're feeling this kind of pain if you're already",
    "start": "3110790",
    "end": "3117000"
  },
  {
    "text": "checking out you know different frameworks with different execution models then the reactive stack is a",
    "start": "3117000",
    "end": "3123360"
  },
  {
    "text": "hundred percent kind of in that direction where you can get a complete reactive",
    "start": "3123360",
    "end": "3129510"
  },
  {
    "text": "stack non-blocking asynchronous foundation and all of these scenarios become a hundred percent possible so with fats",
    "start": "3129510",
    "end": "3139300"
  },
  {
    "start": "3139000",
    "end": "3450000"
  },
  {
    "text": "I'm going to this is the end of my talk",
    "start": "3139300",
    "end": "3145180"
  },
  {
    "text": "here so if there are any questions I'll be happy to take some now yeah",
    "start": "3145180",
    "end": "3151260"
  },
  {
    "text": "writing to the database assuming you have a non-blocking driver",
    "start": "3160140",
    "end": "3166510"
  },
  {
    "text": "yeah or you could always do it on the thread as a blocking right yeah so at",
    "start": "3166510",
    "end": "3179620"
  },
  {
    "text": "the moment the reactive data repository in spring day decay has implementations for Redis and Cassandra",
    "start": "3179620",
    "end": "3189550"
  },
  {
    "text": "there is no asynchronous database JDBC driver I know there's some work going on",
    "start": "3189550",
    "end": "3195460"
  },
  {
    "text": "for from Oracle that was announced last year at Java one but that's not out yet",
    "start": "3195460",
    "end": "3202859"
  },
  {
    "text": "my question is are you sharing your code",
    "start": "3203160",
    "end": "3208180"
  },
  {
    "text": "on any github project or anything whether I will share the demo code yes I",
    "start": "3208180",
    "end": "3215170"
  },
  {
    "text": "will I will put a link in the in the slides and share it yep hey Russ and thank you I was wondering",
    "start": "3215170",
    "end": "3221620"
  },
  {
    "text": "if you could shed some light on perhaps the direction of spraying whether it's gonna continue to support both rx Java",
    "start": "3221620",
    "end": "3227650"
  },
  {
    "text": "and the reactor and project reactor moving forward are we gonna converge on one of the text eventually okay so the",
    "start": "3227650",
    "end": "3234550"
  },
  {
    "text": "question is again about our exam over C's reactor and our support so what we",
    "start": "3234550",
    "end": "3239770"
  },
  {
    "text": "found out is that in order for us to build a reactive web framework our reactors stack we need to use a reactive",
    "start": "3239770",
    "end": "3246310"
  },
  {
    "text": "framework so we chose reactor for that well a because it's closely developed",
    "start": "3246310",
    "end": "3252910"
  },
  {
    "text": "with Spring Framework there's a lot of collaboration that happens we actually went through trying to do things and",
    "start": "3252910",
    "end": "3259000"
  },
  {
    "text": "then they went through evolving their framework so it was a very symbiotic relationship there",
    "start": "3259000",
    "end": "3265350"
  },
  {
    "text": "the gain reactor is built with server-side",
    "start": "3265350",
    "end": "3270619"
  },
  {
    "text": "Java in minds I think Eric's Java comes a little bit more from the background of you know Android and client-side it's",
    "start": "3270619",
    "end": "3277490"
  },
  {
    "text": "aligned with its origins come from client-side like rxjs but then again the",
    "start": "3277490",
    "end": "3283099"
  },
  {
    "text": "operators are very aligned so we take all the inspiration but we don't feel obliged to be a hundred percent reactive",
    "start": "3283099",
    "end": "3288440"
  },
  {
    "text": "X in every respect in terms of the support so the fact that we use reactor",
    "start": "3288440",
    "end": "3296240"
  },
  {
    "text": "internally is not an issue you can do all of these samples using our eggs Java and it's actually really not difficult",
    "start": "3296240",
    "end": "3303079"
  },
  {
    "text": "for us to support that combination we have a bunch of adaptors so we don't even have to directly depend on our exam",
    "start": "3303079",
    "end": "3309140"
  },
  {
    "text": "in any way but there are certain areas where we have to choose like the more",
    "start": "3309140",
    "end": "3315470"
  },
  {
    "text": "functional API is the web client the functional web framework that we have",
    "start": "3315470",
    "end": "3321650"
  },
  {
    "text": "web flex FM we're calling it which I did not talk about here but in those areas",
    "start": "3321650",
    "end": "3327380"
  },
  {
    "text": "we've chosen reactor you can still easily switch to using our Java from",
    "start": "3327380",
    "end": "3332509"
  },
  {
    "text": "there because using operators but again you know we where we can with flexible",
    "start": "3332509",
    "end": "3338029"
  },
  {
    "text": "method signatures we support our Java because it actually doesn't doesn't cost us a lot of extra effort in spring MVC",
    "start": "3338029",
    "end": "3346250"
  },
  {
    "text": "you could store your fret context in Fred local who's being security did that as well what is the best way to do that",
    "start": "3346250",
    "end": "3353480"
  },
  {
    "text": "with the new web so in terms of replacements for thread-local it's one",
    "start": "3353480",
    "end": "3359210"
  },
  {
    "text": "of those things which is a convenience we've been using because we're executing",
    "start": "3359210",
    "end": "3365720"
  },
  {
    "text": "on a same call stack here the natural model of execution with message passing",
    "start": "3365720",
    "end": "3370910"
  },
  {
    "text": "and non blocking is that we're actually operating on many different threads and switching all the time so it's really",
    "start": "3370910",
    "end": "3376940"
  },
  {
    "text": "not easy to achieve that reactor has a feature now for context passing so if",
    "start": "3376940",
    "end": "3384319"
  },
  {
    "text": "you're using reactor all the way in the application and in the framework then we",
    "start": "3384319",
    "end": "3390079"
  },
  {
    "text": "can achieve this kind of context passing but we haven't built the features in web flex yet to make it take advantage of",
    "start": "3390079",
    "end": "3396319"
  },
  {
    "text": "that so ultimately part of the answer is we have to look away for you know these kinds of habits because",
    "start": "3396319",
    "end": "3403560"
  },
  {
    "text": "they're not so easy or possible but in certain situations you know when you can",
    "start": "3403560",
    "end": "3409650"
  },
  {
    "text": "make assumptions about what libraries are used it may be possible to achieve the same effect",
    "start": "3409650",
    "end": "3415850"
  },
  {
    "text": "is there a roadmap there is actually a ticket that was open that you can find",
    "start": "3419180",
    "end": "3424620"
  },
  {
    "text": "in JIRA that summarized all of these questions like asking specifically for for that kind of support so we're",
    "start": "3424620",
    "end": "3429900"
  },
  {
    "text": "definitely going to look at it probably get something into 500 GA but again there are no easy answers especially if",
    "start": "3429900",
    "end": "3436590"
  },
  {
    "text": "you use different libraries reactive libraries big kill for coming I think",
    "start": "3436590",
    "end": "3441810"
  },
  {
    "text": "Rosen will be around here for a minute if you have any more questions and I hope to see you all back in the afternoon",
    "start": "3441810",
    "end": "3447360"
  },
  {
    "text": "[Applause]",
    "start": "3447360",
    "end": "3451479"
  }
]