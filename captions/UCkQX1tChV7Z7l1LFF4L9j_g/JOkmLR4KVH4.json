[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "all right good morning uh for those that don't know me I know I've spoken at a lot of conferences and meetup groups and",
    "start": "240",
    "end": "5520"
  },
  {
    "text": "all these other things over the years I'm Brenda McAdams uh these days I am a consultant at bold radius I do",
    "start": "5520",
    "end": "12000"
  },
  {
    "text": "Consulting and training mostly focused on schola play AA and all the things",
    "start": "12000",
    "end": "17439"
  },
  {
    "text": "especially from the schola side whatever on schola I've been learning a little schola JS but I'm still very confused uh",
    "start": "17439",
    "end": "24000"
  },
  {
    "text": "I want to talk about schola macros for Mortals so this is something where I've been learning them I'm trying to",
    "start": "24000",
    "end": "30279"
  },
  {
    "text": "specifically do this as a not quite a beginner's talk I expect that you guys are probably going to have to have some",
    "start": "30279",
    "end": "36719"
  },
  {
    "text": "level of scholar knowledge to know what I'm doing uh this talk is entirely Dustin Whitney's fault I was in I was in",
    "start": "36719",
    "end": "43879"
  },
  {
    "text": "New York in October for you know when he asked me to speak at a Meetup he's like you should talk on Macros it's like I",
    "start": "43879",
    "end": "49480"
  },
  {
    "text": "guess I have to learn macros but I've improved this a lot so the original version of the talk was",
    "start": "49480",
    "end": "55000"
  },
  {
    "text": "sort of let's walk through the documentation and understand for this version I've written my own macro and",
    "start": "55000",
    "end": "61160"
  },
  {
    "text": "we'll talk about what that macro is and we're going to look at two different ways to write that macro there's really two Styles you can use to write macros",
    "start": "61160",
    "end": "67759"
  },
  {
    "text": "right now and we'll see if we understand what's going on when I'm done if not I",
    "start": "67759",
    "end": "73479"
  },
  {
    "text": "apologize but hopefully we'll get there uh this is also how I learn to stop worrying and mumbling curse words uh",
    "start": "73479",
    "end": "80360"
  },
  {
    "text": "when I go through this because it can be confusing but we see them all over the place so the question first is what are",
    "start": "80360",
    "end": "87479"
  },
  {
    "text": "macros and the reality is the documentation is pretty good these days I got a lot out of the documentation of",
    "start": "87479",
    "end": "93119"
  },
  {
    "text": "just lots and lots of detail of how they work Corner cases understanding what's going on someone has been giving a lot",
    "start": "93119",
    "end": "99640"
  },
  {
    "text": "of love to the documentation who deserves you know a lot of Praise",
    "start": "99640",
    "end": "104719"
  },
  {
    "text": "because good documentation is always missing from projects in many cases and so of course summarize it in",
    "start": "104719",
    "end": "112520"
  },
  {
    "start": "110000",
    "end": "525000"
  },
  {
    "text": "one word because I don't want to read all that documentation and there's an awful lot of it and really what it comes",
    "start": "112520",
    "end": "118159"
  },
  {
    "text": "down to is metaprogramming which is the Latin [Music]",
    "start": "118159",
    "end": "124960"
  },
  {
    "text": "for uh actually what meta programming is is code that writes code and that's really what we're doing with macros we",
    "start": "124960",
    "end": "131360"
  },
  {
    "text": "are using code to write other code we can write new methods that actually",
    "start": "131360",
    "end": "136720"
  },
  {
    "text": "expand out to something that appears as if it's built into schola we can write",
    "start": "136720",
    "end": "142200"
  },
  {
    "text": "annotations sort of like we can in Java except they happen at compile time and not at runtime which means you get the",
    "start": "142200",
    "end": "148959"
  },
  {
    "text": "performance of as if you'd written some complex thing at at compile time and",
    "start": "148959",
    "end": "155400"
  },
  {
    "text": "that part to me is one of the most compelling because it's something I've always wanted to sometimes be able to do",
    "start": "155400",
    "end": "161080"
  },
  {
    "text": "is have Coden really good Coden around Scala for things that I've seen in the past so we write extensions to Scala and",
    "start": "161080",
    "end": "168239"
  },
  {
    "text": "it's important to remember these macros are expanding or evaluating at compile time that's what we want from them the",
    "start": "168239",
    "end": "175239"
  },
  {
    "text": "whole point is that we get this at compile time so we don't have this huge runtime reflection flection penalty if",
    "start": "175239",
    "end": "180720"
  },
  {
    "text": "we can avoid it and they may generate new code so maybe you will have an",
    "start": "180720",
    "end": "186560"
  },
  {
    "text": "annotation or a method that spits out a whole new tree of code a new class maybe",
    "start": "186560",
    "end": "193760"
  },
  {
    "text": "or evaluate existing code so you could do validation which is actually what the macro I've written for this is is",
    "start": "193760",
    "end": "200599"
  },
  {
    "text": "validation of code without changing the code that's already there I'm actually forcing compiler errors if you don't",
    "start": "200599",
    "end": "207159"
  },
  {
    "text": "pass my rules now I'm going to look briefly at what de",
    "start": "207159",
    "end": "213720"
  },
  {
    "text": "macros are we're not going to write a def macro there's only so much time but def macros are going to be written in",
    "start": "213720",
    "end": "221319"
  },
  {
    "text": "the same way as we write annotation macros just they're not annotations this is an example from",
    "start": "221319",
    "end": "227439"
  },
  {
    "text": "shapeless that I'm going to show very quickly but these are used to write new methods and shapeless has ill typed",
    "start": "227439",
    "end": "235360"
  },
  {
    "text": "although miles told me I think someone else wrote it uh this is part of shapeless the idea is what you say is",
    "start": "235360",
    "end": "241439"
  },
  {
    "text": "this code should not compile so you give ill typed a block of code that you",
    "start": "241439",
    "end": "246840"
  },
  {
    "text": "expect not to compile in this case 1 + one cast to an INT compiles and",
    "start": "246840",
    "end": "253680"
  },
  {
    "text": "therefore we get an error and this is an example of a def macro where you've written something that's a function it",
    "start": "253680",
    "end": "259440"
  },
  {
    "text": "looks like a new built-in scholar structure scholar test has a version of this based on ill typed as I recall Bill",
    "start": "259440",
    "end": "266160"
  },
  {
    "text": "May correct me on this but I believe someone told me it's based on ill typed and that's really cool as well because",
    "start": "266160",
    "end": "272479"
  },
  {
    "text": "you can say should compile or should not compile and it turns out when you're writing a validator macro it's really",
    "start": "272479",
    "end": "278759"
  },
  {
    "text": "great to be able to write unit tests that say this should not compile an example of macros from",
    "start": "278759",
    "end": "285840"
  },
  {
    "text": "annotation macros here this lets me write annotations as I said which can be",
    "start": "285840",
    "end": "291199"
  },
  {
    "text": "Rewritten or expanded when we compile if you're familiar with the app trait in",
    "start": "291199",
    "end": "297320"
  },
  {
    "text": "Scola it does not have an attribute of hello or a member of",
    "start": "297320",
    "end": "303039"
  },
  {
    "text": "hello and test clearly does not have a member hello and what we've done is",
    "start": "303039",
    "end": "309320"
  },
  {
    "text": "we've written annotation that under the covers rewrote the object test and added",
    "start": "309320",
    "end": "316320"
  },
  {
    "text": "a member called hello so that when we run our code at runtime hello is materialized into this",
    "start": "316320",
    "end": "323919"
  },
  {
    "text": "code and that's one example of what I could do with an annotation",
    "start": "323919",
    "end": "329919"
  },
  {
    "text": "and there's a lot more so I probably should have started with this but I like to at least give you an idea of where",
    "start": "330039",
    "end": "336560"
  },
  {
    "text": "we're coming from I am pretty new to macros I lit I",
    "start": "336560",
    "end": "341720"
  },
  {
    "text": "as I said I learned these specifically for a talk that Dustin Whitney asked me to do I've been learning more the",
    "start": "341720",
    "end": "347800"
  },
  {
    "text": "original Talk was based on the docs now I've written my own macro I'm trying to avoid the macros everywhere urge which",
    "start": "347800",
    "end": "354919"
  },
  {
    "text": "people fall into but I want to share knowledge hopefully from a little more more than a",
    "start": "354919",
    "end": "359960"
  },
  {
    "text": "beginner's point of view now but enough that you can see things from the standard of I am not a deeply scary",
    "start": "359960",
    "end": "366759"
  },
  {
    "text": "sorcerer who understands this stuff at a fundamental level I'm fairly you know",
    "start": "366759",
    "end": "372560"
  },
  {
    "text": "the idea was macros for Mortals here so we're going to look at it from fresh profusely bleeding",
    "start": "372560",
    "end": "378919"
  },
  {
    "text": "eyeballs because I am hoping that may not be a side effect but I should warn you that that may be a side effect of",
    "start": "378919",
    "end": "384960"
  },
  {
    "text": "this talk so once upon a time the only only real way we could add compile time",
    "start": "384960",
    "end": "391240"
  },
  {
    "text": "functionality to Scala was by writing compiler plugins and it was esotar it was a",
    "start": "391240",
    "end": "398880"
  },
  {
    "text": "little hard to ship because you had to have people add a compiler plugin now spt happens to have a nice add compiler",
    "start": "398880",
    "end": "404919"
  },
  {
    "text": "plug-in thing but at the same time you're adding phases to the scol compiler you've got to be aware of where",
    "start": "404919",
    "end": "411160"
  },
  {
    "text": "you're plugging into it's a lot harder to not necessarily mess things up and",
    "start": "411160",
    "end": "416560"
  },
  {
    "text": "there wasn't at the time a lot of good docks or examples I tried a lot I WR I helped maintain a compiler plug-in years",
    "start": "416560",
    "end": "423639"
  },
  {
    "text": "ago that generated syntax diagrams and it was really confusing because I had no",
    "start": "423639",
    "end": "428759"
  },
  {
    "text": "real sources other than source code for how to do this and most importantly you",
    "start": "428759",
    "end": "434199"
  },
  {
    "text": "needed to know the as the abstract syntax tree of Scala which you can think of as really nested classes that",
    "start": "434199",
    "end": "443039"
  },
  {
    "text": "represent a tree to be converted to bite code except that's not entirely true anymore because it might be converted",
    "start": "443039",
    "end": "449599"
  },
  {
    "text": "into JavaScript as well if you've seen schola JS or Martin's talks lately",
    "start": "449599",
    "end": "454879"
  },
  {
    "text": "Martin talks in terms of targets no longer being just bite codes and I think that's really fascinating from a",
    "start": "454879",
    "end": "461479"
  },
  {
    "text": "community standpoint that we've gotten there where we have different targets for what we're doing I've done a little bit of compiler",
    "start": "461479",
    "end": "468159"
  },
  {
    "text": "plug-in work as I said the as can be really tough to deal with however some of the tools that we get in in macros",
    "start": "468159",
    "end": "475520"
  },
  {
    "text": "now have my understanding is are available in compil plugins as well so if you really did need a compiler plugin",
    "start": "475520",
    "end": "481879"
  },
  {
    "text": "you could here's a little bit of a taste to",
    "start": "481879",
    "end": "487639"
  },
  {
    "text": "wet our pallette on what an as might look like and I apologize in advance",
    "start": "487639",
    "end": "494159"
  },
  {
    "text": "I've written a simple class here with a couple of members and a print line what this looks like in the As and",
    "start": "494159",
    "end": "502479"
  },
  {
    "text": "I see miles noding in the back I don't know if it's because he knows what's coming or",
    "start": "502479",
    "end": "509240"
  },
  {
    "text": "you can see why maybe writing the a code is a little bit complicated and the benefit is there but",
    "start": "511400",
    "end": "519518"
  },
  {
    "text": "it's really hard to learn all this stuff and remember all this stuff and the common",
    "start": "519519",
    "end": "525320"
  },
  {
    "start": "525000",
    "end": "640000"
  },
  {
    "text": "reaction is jumping out the window in fact this room is organized really well",
    "start": "525320",
    "end": "531080"
  },
  {
    "text": "for this picture there's even extra windows so this is where the macro comes",
    "start": "531080",
    "end": "538320"
  },
  {
    "text": "in to hopefully make this it's easier because we still have to deal with the as but the macro gives us some",
    "start": "538320",
    "end": "544320"
  },
  {
    "text": "interesting W tools to work with this since 210 they've shipped as an experimental feature you do have to do",
    "start": "544320",
    "end": "551279"
  },
  {
    "text": "an import that says I yes I'm aware I am enabling this experimental feature or I",
    "start": "551279",
    "end": "556399"
  },
  {
    "text": "believe there's a compiler flag they've been adopted fairly quickly",
    "start": "556399",
    "end": "561440"
  },
  {
    "text": "I see them all over the place I you I keep tripping over them with every library that I use and usually in good",
    "start": "561440",
    "end": "567519"
  },
  {
    "text": "ways people are doing good things with macros and adding cool functionality you saw ill typed",
    "start": "567519",
    "end": "573440"
  },
  {
    "text": "before as knowledge can be somewhat avoided but not entirely there are some",
    "start": "573440",
    "end": "579440"
  },
  {
    "text": "cool tools to generate it for you I'm going to show two versions of macro one with an A and one without with one of",
    "start": "579440",
    "end": "586720"
  },
  {
    "text": "these other tools that we have they make enhancing Scala much much",
    "start": "586720",
    "end": "592320"
  },
  {
    "text": "easier than writing compy plugins I mean we don't have to have users add special",
    "start": "592320",
    "end": "597600"
  },
  {
    "text": "things we can have the code go in and we can have things feel natural and I think they're easier to debug and test because",
    "start": "597600",
    "end": "604160"
  },
  {
    "text": "it's a lot easier to have code that compiles to a library and then just test",
    "start": "604160",
    "end": "609200"
  },
  {
    "text": "that that Library works the way we think it will you do have to Define your Macros",
    "start": "609200",
    "end": "615120"
  },
  {
    "text": "in a separate project from your implementation or your usage if you look",
    "start": "615120",
    "end": "620160"
  },
  {
    "text": "at and I put all the source code for my demo macro up on the web and I'll post the link to that you'll notice that I",
    "start": "620160",
    "end": "626880"
  },
  {
    "text": "have a macros project and an implementation project you can't use the macro directly from within the macro",
    "start": "626880",
    "end": "633640"
  },
  {
    "text": "project you have to have a separate implementation area and keep that in mind so hail science we've got fancy",
    "start": "633640",
    "end": "642320"
  },
  {
    "start": "640000",
    "end": "930000"
  },
  {
    "text": "stuff with which to work with now macro Paradise is an",
    "start": "642320",
    "end": "647480"
  },
  {
    "text": "interesting piece that bears mentioning the project is evolving very quickly and",
    "start": "647480",
    "end": "652880"
  },
  {
    "text": "part of it is macros are evolving quicker than Scala is and so what they've been doing is adding lots of",
    "start": "652880",
    "end": "658839"
  },
  {
    "text": "Improv M ments to macros and it's a plugin you can add that brings new",
    "start": "658839",
    "end": "664800"
  },
  {
    "text": "functionality in before it makes it to Scola one of the features that's currently only in Mac in in macro",
    "start": "664800",
    "end": "672000"
  },
  {
    "text": "Paradise is annotations so we will use that and that needs a compiler plugin so I don't get to avoid compiler plugins",
    "start": "672000",
    "end": "678519"
  },
  {
    "text": "entirely sorry but I didn't have to write one in order to use it you can learn more about macro",
    "start": "678519",
    "end": "685600"
  },
  {
    "text": "Paradise at the link here I will post my slides up to speaker deck when I'm done I've already exported them PDF so I",
    "start": "685600",
    "end": "692240"
  },
  {
    "text": "won't forget and uh there's a good link that gives an overview of the purpose of the project as well as all the docs for",
    "start": "692240",
    "end": "699079"
  },
  {
    "text": "macros themselves what I've written is a macro for ADT validation unfortunately there",
    "start": "699079",
    "end": "706240"
  },
  {
    "text": "are some bugs in Scola that make it impossible given the root of an ADT to walk down all the sub classes which is",
    "start": "706240",
    "end": "712560"
  },
  {
    "text": "what I originally wanted to do but I've written something that uses an annotation to expand to macro at compile",
    "start": "712560",
    "end": "720800"
  },
  {
    "text": "time and it validates that the root type of your ADT is valid that the root type of your ADT has",
    "start": "720800",
    "end": "728639"
  },
  {
    "text": "to either be a trait or an abstract class and it has to be sealed these are",
    "start": "728639",
    "end": "734519"
  },
  {
    "text": "generally the rules we follow when we're building an algebraic data type you know think of option or think of something",
    "start": "734519",
    "end": "741720"
  },
  {
    "text": "else where you have a closed tree that you know what it looks like I've done this to start with with",
    "start": "741720",
    "end": "749600"
  },
  {
    "text": "manipulation just so we know what it looks like you can find the code uh GitHub",
    "start": "749600",
    "end": "757839"
  },
  {
    "text": "recommended Supreme octocat Adventure is the name for my repository so I made it Supreme macro Adventure it's feeling a",
    "start": "757839",
    "end": "764560"
  },
  {
    "text": "little Whimsical let's look at some chunks real quick of scholet test I'm going to move",
    "start": "764560",
    "end": "769839"
  },
  {
    "text": "through this relatively quickly because of timing but I'll point out the things that are hey this is what we need this",
    "start": "769839",
    "end": "776920"
  },
  {
    "text": "is the a The annotation in action I've annotated the trait Fu with at ADT and",
    "start": "776920",
    "end": "784079"
  },
  {
    "text": "said it should not compile because it's not sealed just like the second L the",
    "start": "784079",
    "end": "790199"
  },
  {
    "text": "second one is an object an object can't be the root of an ADT it should not",
    "start": "790199",
    "end": "795480"
  },
  {
    "text": "compile a sealed trait should compile or must compile I prefer must matchers to",
    "start": "795480",
    "end": "801600"
  },
  {
    "text": "should matchers it sounds more assertive and a sealed abstract class should also compile",
    "start": "801600",
    "end": "809360"
  },
  {
    "text": "also if I have type parameters this was a corner case that I caught last night",
    "start": "809360",
    "end": "815120"
  },
  {
    "text": "was that type parameters weren't being matched and it was blowing up my",
    "start": "815120",
    "end": "820519"
  },
  {
    "text": "matcher so the validation there is an annotation that needs to be defined this",
    "start": "820800",
    "end": "826600"
  },
  {
    "text": "extends static annotation and then we have macro transform which we'll call the macro the compile time only make",
    "start": "826600",
    "end": "835160"
  },
  {
    "text": "sure we've enabled macro Paradise without the compil time only scholar",
    "start": "835160",
    "end": "840600"
  },
  {
    "text": "will silently fail to expand The annotation and look at it at runtime",
    "start": "840600",
    "end": "846160"
  },
  {
    "text": "macro Paradise Mak sure that The annotation disappears at runtime and so",
    "start": "846160",
    "end": "851600"
  },
  {
    "text": "this gives you an error if macro Paradise is not included as a compile or Plugin and macr transform is what",
    "start": "851600",
    "end": "858120"
  },
  {
    "text": "delegates to the actual implementation that validates",
    "start": "858120",
    "end": "863560"
  },
  {
    "text": "it a quick note on the anatees variable because it's weird you'll notice that",
    "start": "863560",
    "end": "869279"
  },
  {
    "text": "we're passing in a VAR args this is called once per anotated",
    "start": "869279",
    "end": "878160"
  },
  {
    "text": "class the fact that it has to take a VAR ARS can be confusing because it's once",
    "start": "878160",
    "end": "883920"
  },
  {
    "text": "per class with an exception if you annotate a class or a trait that has a",
    "start": "883920",
    "end": "890079"
  },
  {
    "text": "companion you get the object also but if you annotate an object with",
    "start": "890079",
    "end": "896440"
  },
  {
    "text": "a companion you only get the object down you gave me a really lengthy explanation of it earlier that I can't",
    "start": "896440",
    "end": "902959"
  },
  {
    "text": "rearticulate sorry there's a good reason why and and and I it was oh okay it",
    "start": "902959",
    "end": "909079"
  },
  {
    "text": "clicked in my brain but if you get a trait or a class and a companion object",
    "start": "909079",
    "end": "915720"
  },
  {
    "text": "and E if you whether you rewrite code or do a validation what you return has to include a companion object or scholar",
    "start": "915720",
    "end": "922440"
  },
  {
    "text": "will give you this error that you're trying to expand into something that doesn't match what it started with now",
    "start": "922440",
    "end": "929199"
  },
  {
    "text": "my code has a rough overview and it's too small my speaker notes to see it uh",
    "start": "929199",
    "end": "936120"
  },
  {
    "start": "930000",
    "end": "1145000"
  },
  {
    "text": "there's a couple things enclosing position is the point in the code that we're working with I Alias that to P so",
    "start": "936120",
    "end": "941440"
  },
  {
    "text": "that I can reuse it in my error messages and I'm conver I'm mapping",
    "start": "941440",
    "end": "946839"
  },
  {
    "text": "antise from an expression to a tree and then converting it to a list because VAR",
    "start": "946839",
    "end": "952560"
  },
  {
    "text": "args I believe is an array is what you get it as so we're using it as a list so we can use the list matchers",
    "start": "952560",
    "end": "959160"
  },
  {
    "text": "and then I'm doing result tree and I've left that code out until we can look at this if we wanted to we do have to",
    "start": "959160",
    "end": "966560"
  },
  {
    "text": "return something in this case I really need to return the original syntax tree I need to return the code that I started",
    "start": "966560",
    "end": "973720"
  },
  {
    "text": "with unless I'm deleting that code which isn't what I want to do we could write new code and generate new code and spit",
    "start": "973720",
    "end": "980399"
  },
  {
    "text": "that back out of this however so we match a tree here and",
    "start": "980399",
    "end": "987160"
  },
  {
    "text": "these are part of the as class class defa represents a class or a trait there's a couple of arguments mods are",
    "start": "987160",
    "end": "993560"
  },
  {
    "text": "flags flags are things like sealed final case all of the different things that we",
    "start": "993560",
    "end": "999560"
  },
  {
    "text": "would attach to the beginning of a class or a trait definition name is the name of it t param or type parameters imple",
    "start": "999560",
    "end": "1007120"
  },
  {
    "text": "is what's known as a template and it really partly is the body of our code so",
    "start": "1007120",
    "end": "1012399"
  },
  {
    "text": "we're saying if this is a class def capture all these variables and then I delegate because there's a couple places",
    "start": "1012399",
    "end": "1019440"
  },
  {
    "text": "where we match to another method called validate class def the second line if",
    "start": "1019440",
    "end": "1024798"
  },
  {
    "text": "you or the second match is if the list includes a class Def and a module def a",
    "start": "1024799",
    "end": "1031160"
  },
  {
    "text": "module def is an object and then we look it just an object Def and there's a bunch of other",
    "start": "1031160",
    "end": "1038079"
  },
  {
    "text": "Corner cases that I've left off for vows and and vs and defs and other things but",
    "start": "1038079",
    "end": "1044720"
  },
  {
    "text": "it's valde and de Def and then for a Val def you've got to check if it's mutable or not and then there's some matches",
    "start": "1044720",
    "end": "1051240"
  },
  {
    "text": "here technically I could fall through if you found a corner case I don't have a default catcher but I would rather the",
    "start": "1051240",
    "end": "1057080"
  },
  {
    "text": "compiler throw a match error if you give me something weird at least to start with and we can validate our valid",
    "start": "1057080",
    "end": "1064760"
  },
  {
    "text": "possibilities here by saying you know the mods mods",
    "start": "1064760",
    "end": "1070559"
  },
  {
    "text": "has to include the flag trait and I'm sorry if mods is a trait",
    "start": "1070559",
    "end": "1076240"
  },
  {
    "text": "it has to include the flag sealed or there's an error what's interesting here is info normally",
    "start": "1076240",
    "end": "1082240"
  },
  {
    "text": "you don't see info messages from the compiler but unless you turn on I think",
    "start": "1082240",
    "end": "1088360"
  },
  {
    "text": "warnings or deprecation but you can force it to show so I spit out a message that says sanity checks okay and it'll",
    "start": "1088360",
    "end": "1095760"
  },
  {
    "text": "show you the line of code that you actually annotated and on a companion we match",
    "start": "1095760",
    "end": "1101120"
  },
  {
    "text": "and make sure that we glue this together I forget who told me how to glue this together I couldn't figure out how to",
    "start": "1101120",
    "end": "1106640"
  },
  {
    "text": "return because you have to return a tree you can't return a list of tree and this was using quasi quotes which we haven't",
    "start": "1106640",
    "end": "1112919"
  },
  {
    "text": "talked about yet patching together the class defa and the module deaf to return a new",
    "start": "1112919",
    "end": "1119679"
  },
  {
    "text": "tree and there's a bunch of other checks if it's an abstract if it's sealed for classes",
    "start": "1121840",
    "end": "1129679"
  },
  {
    "text": "otherwise it sanity checks okay this is the version using the a the a it's okay",
    "start": "1129679",
    "end": "1138480"
  },
  {
    "text": "but it's harder to read it's harder to write potentially and there's a better way of doing it it does lead to a little",
    "start": "1138480",
    "end": "1144520"
  },
  {
    "text": "bit of drinking or a lot of drinking in this case he doesn't seem to",
    "start": "1144520",
    "end": "1150960"
  },
  {
    "start": "1145000",
    "end": "1193000"
  },
  {
    "text": "stop now the as macros still are really built withs but we have a better way we",
    "start": "1150960",
    "end": "1157360"
  },
  {
    "text": "have better tools now to work with the first and simplest rifi does help at",
    "start": "1157360",
    "end": "1162919"
  },
  {
    "text": "least understand what the as looks like that's what I used in that first example so peing at my first example I did this",
    "start": "1162919",
    "end": "1171280"
  },
  {
    "text": "with rifi tree will replace the rifi's expression with the A and show raw",
    "start": "1171280",
    "end": "1178280"
  },
  {
    "text": "converts it to a printable format I find this great to get inspiration or understanding of the as",
    "start": "1178280",
    "end": "1184799"
  },
  {
    "text": "when I'm working on something to see if I'm generating code what it's supposed to look like if I was to write that code",
    "start": "1184799",
    "end": "1191039"
  },
  {
    "text": "by hand and it makes my head hurt a little bit but maybe not in a bad way",
    "start": "1191039",
    "end": "1199840"
  },
  {
    "text": "quasi quotes give us more sanity quasi quotes potentially give us a better way",
    "start": "1200080",
    "end": "1205360"
  },
  {
    "text": "of doing this this implementation that I'm going to show you or Breeze through my apologies on the",
    "start": "1205360",
    "end": "1211559"
  },
  {
    "text": "timing the implementation is about half the number of lines of the other one now",
    "start": "1211559",
    "end": "1216880"
  },
  {
    "text": "I'm back and forth about whether I prefer the as version or the Quasi quotes version because purely number of",
    "start": "1216880",
    "end": "1223960"
  },
  {
    "text": "lines isn't necessarily better and the Quasi quotes matchers can be a little confusing but they're",
    "start": "1223960",
    "end": "1230080"
  },
  {
    "text": "powerful there is not a way to avoid the as completely but macros have some",
    "start": "1230080",
    "end": "1236240"
  },
  {
    "text": "improvements to make it less necessary and quasi quotes have been added in schola 21 you also I think can",
    "start": "1236240",
    "end": "1243600"
  },
  {
    "text": "use macro Paradise to get them in 210 they let us write the equivalent of string interpolation that evaluates or",
    "start": "1243600",
    "end": "1250600"
  },
  {
    "text": "generates the scolar code which is awesome and we're going to look time",
    "start": "1250600",
    "end": "1257200"
  },
  {
    "text": "permitting we should look into quasy quote version of this macro even if it's at warp speed but first we need a bunch of",
    "start": "1257200",
    "end": "1264159"
  },
  {
    "text": "imports and I don't think this bear is going through just keep in mind there's a whole bunch of imports and you can always refer to the docs or refer to my",
    "start": "1264159",
    "end": "1271440"
  },
  {
    "text": "slide but you have to import a bunch of things for quasi quotes to work the reflect here is be I think because I was",
    "start": "1271440",
    "end": "1280480"
  },
  {
    "text": "working on the scha console rather than working in the compiler you don't use runtime reflect within your scolar your",
    "start": "1280480",
    "end": "1287360"
  },
  {
    "text": "plug-in it looks like string interpolation but we put a q in front of it so here I've",
    "start": "1287360",
    "end": "1294880"
  },
  {
    "text": "just written a block of code Q def Echo blah blah blah and this generates an a",
    "start": "1294880",
    "end": "1300600"
  },
  {
    "text": "def def that generated a def def for me I",
    "start": "1300600",
    "end": "1305960"
  },
  {
    "text": "wrote out scolar code in a Q and I got a syntax tree representation of it now",
    "start": "1305960",
    "end": "1312799"
  },
  {
    "text": "that itself isn't necessarily terribly useful except maybe if I'm in a compiler",
    "start": "1312799",
    "end": "1318679"
  },
  {
    "text": "plugin and I need to generate a whole new method like hello I can just do a quasi quote where it gets",
    "start": "1318679",
    "end": "1325679"
  },
  {
    "text": "interesting is here I've written an exception which",
    "start": "1325679",
    "end": "1332840"
  },
  {
    "text": "is a more complex one and you'll see again I get a class",
    "start": "1332840",
    "end": "1338600"
  },
  {
    "text": "defa but I can extract from this too quasi quotes are",
    "start": "1338600",
    "end": "1345200"
  },
  {
    "text": "extractors so I can say case class dollar cname class name dot do T prams",
    "start": "1345200",
    "end": "1353679"
  },
  {
    "text": "that is known as a splice it dot dot dollar expects an iterable of tree which",
    "start": "1353679",
    "end": "1360120"
  },
  {
    "text": "means it's totally optional so if there are no type parameters it'll still extract okay the parameters that go with",
    "start": "1360120",
    "end": "1366960"
  },
  {
    "text": "it extends dollar parent that's actually slightly wrong that should be dot dot dollar parents so that even if there's",
    "start": "1366960",
    "end": "1374240"
  },
  {
    "text": "no parents it matches and with the traits that mix in",
    "start": "1374240",
    "end": "1379799"
  },
  {
    "text": "and then we get a bunch of variables we've pulled out variables for each of these things so we can completely",
    "start": "1379799",
    "end": "1386559"
  },
  {
    "text": "extract from any class using quasi quotes or DEA or any other piece of",
    "start": "1386559",
    "end": "1393840"
  },
  {
    "text": "scholar code we can extract out from that and the dot dot dollar is known as",
    "start": "1393840",
    "end": "1399080"
  },
  {
    "text": "a splicing rank according to my speaker notes which expects an iterable of",
    "start": "1399080",
    "end": "1405440"
  },
  {
    "text": "tree I think this is pretty brilliant I was really surprised by how cool this was when I first worked with it having",
    "start": "1405440",
    "end": "1412360"
  },
  {
    "text": "written compiler plugins having been playing with this it adds some really interesting stuff to the",
    "start": "1412360",
    "end": "1418520"
  },
  {
    "text": "picture so my macro if I was to use quasi quotes I can go to a pure match",
    "start": "1418520",
    "end": "1425120"
  },
  {
    "text": "statement I can get rid of that validate class def I could do everything in line with pattern guards as well so we write",
    "start": "1425120",
    "end": "1432480"
  },
  {
    "text": "a nice clean quote unquote because if you look at the code you may not agree with me a nice clean scolar",
    "start": "1432480",
    "end": "1438480"
  },
  {
    "text": "implementation of a pattern match by the way quasi quotes can generate just about everything the docs have definitions for",
    "start": "1438480",
    "end": "1446000"
  },
  {
    "text": "just about anything you would ever need to do in Scola including partial function case statements Etc and they're",
    "start": "1446000",
    "end": "1453039"
  },
  {
    "text": "really well documented on what the data looks like there's like a QP for pattern",
    "start": "1453039",
    "end": "1458080"
  },
  {
    "text": "matches and other things as I said it's nearly half the number of",
    "start": "1458080",
    "end": "1463240"
  },
  {
    "text": "lines so here is a match of",
    "start": "1463240",
    "end": "1469640"
  },
  {
    "text": "of this so I'm saying mods I'm capturing whatever flags are at the beginning I",
    "start": "1469640",
    "end": "1475399"
  },
  {
    "text": "could say dollar sealed but scholar will not allow me to say dollar sealed dollar",
    "start": "1475399",
    "end": "1480679"
  },
  {
    "text": "abstract and by the way when you're working with quasi quotes in an annotation plugin it turns the trait",
    "start": "1480679",
    "end": "1487640"
  },
  {
    "text": "into a sealed abstract trait so mods captures all of those mods I had before",
    "start": "1487640",
    "end": "1492960"
  },
  {
    "text": "which are the flags and then the rest of this looks like what we saw already we get the body and then I just have a",
    "start": "1492960",
    "end": "1499440"
  },
  {
    "text": "pattern guard that says if it's sealed great otherwise it falls through to an",
    "start": "1499440",
    "end": "1505919"
  },
  {
    "text": "error the matcher in the macro does not understand that we that an error stops",
    "start": "1505919",
    "end": "1511919"
  },
  {
    "text": "the world the way that an exception does so I still have to return that tree element even though it'll never be",
    "start": "1511919",
    "end": "1518919"
  },
  {
    "text": "returned the class checks are very similar unfortunately there's a bitwise",
    "start": "1520200",
    "end": "1526559"
  },
  {
    "text": "ore on flags but no bitwise and which would have been nice to say has flag you",
    "start": "1526559",
    "end": "1531720"
  },
  {
    "text": "know sealed and Abstract but I just check if mods has flag sealed and has",
    "start": "1531720",
    "end": "1537799"
  },
  {
    "text": "abstract we sanity check okay otherwise we fall through to an",
    "start": "1537799",
    "end": "1544919"
  },
  {
    "text": "error and it's a little it this is one of those examples of looking at the slides afterwards will probably be",
    "start": "1546480",
    "end": "1553120"
  },
  {
    "text": "helpful to digest but we're writing code that looks like",
    "start": "1553120",
    "end": "1558840"
  },
  {
    "text": "code and with quasi quotes and we're just doing a pattern match that's the internals of my macro that's what it",
    "start": "1558840",
    "end": "1564799"
  },
  {
    "text": "looks like it's made up of this that's pretty much the entire macro we have some checks for things",
    "start": "1564799",
    "end": "1572440"
  },
  {
    "text": "like objects and the companion checks here I didn't care what the",
    "start": "1572440",
    "end": "1578399"
  },
  {
    "text": "object looked like so I skipped quasi quoting my object for the companion and",
    "start": "1578399",
    "end": "1583799"
  },
  {
    "text": "just said if there's a module def so yes you can mix as matches with quasi quote",
    "start": "1583799",
    "end": "1589640"
  },
  {
    "text": "matches if you need to and I struggled for a little bit to get the object match to work and couldn't quite get it so I",
    "start": "1589640",
    "end": "1596880"
  },
  {
    "text": "switched over to module def when I realized I didn't",
    "start": "1596880",
    "end": "1601120"
  },
  {
    "text": "care and finally we check uh again on the class",
    "start": "1602760",
    "end": "1609440"
  },
  {
    "text": "module def plus uh class for the",
    "start": "1609440",
    "end": "1614799"
  },
  {
    "text": "companions I'm just about on time and I apologize for running through this so quickly but I'm happy to answer",
    "start": "1615480",
    "end": "1621960"
  },
  {
    "text": "questions afterwards as well I'm happy to sit down with people and show you my code the code is also all posted and",
    "start": "1621960",
    "end": "1627880"
  },
  {
    "text": "I'll have Brian link it to people or or something similar generally my reaction",
    "start": "1627880",
    "end": "1633320"
  },
  {
    "text": "has been this ow my [Music] boneitis so a couple of closing",
    "start": "1633320",
    "end": "1641440"
  },
  {
    "text": "thoughts macros are very cool it seems like once you understand them just a",
    "start": "1641440",
    "end": "1646960"
  },
  {
    "text": "little bit you want to go read in for them you want to go grab them and be like I want to use this I don't know",
    "start": "1646960",
    "end": "1652559"
  },
  {
    "text": "what I'm going to use it for but I'm going to use macros I had that feeling when I first learned them I had that feeling that I had to fight everything",
    "start": "1652559",
    "end": "1658960"
  },
  {
    "text": "was I could solve this with macros when all you have is a hammer everything starts to look a lot like a",
    "start": "1658960",
    "end": "1665760"
  },
  {
    "text": "thumb and that's really what you should consider when you're looking at macros",
    "start": "1665760",
    "end": "1671039"
  },
  {
    "text": "is that not everything is a thumb sometimes it's a nail or worse it's a screw and hammering screws in defeats",
    "start": "1671039",
    "end": "1678279"
  },
  {
    "text": "the purpose of screws so they can enable great development but they can also hinder it",
    "start": "1678279",
    "end": "1684120"
  },
  {
    "text": "think about maintainability if you're an open source Library author I think it's one thing if you're working on a team of people who aren't going to understand",
    "start": "1684120",
    "end": "1691519"
  },
  {
    "text": "macros you're probably not going to want to take a vacation anytime soon once you",
    "start": "1691519",
    "end": "1696640"
  },
  {
    "text": "write the macro so keep that in mind and I think we have a few minutes for",
    "start": "1696640",
    "end": "1702799"
  },
  {
    "text": "questions krin so the question is is what my take",
    "start": "1702799",
    "end": "1709360"
  },
  {
    "text": "is on exceptions when there's errors in my macros I don't know that there's ex you mean exceptions with exceptions I",
    "start": "1709360",
    "end": "1716559"
  },
  {
    "text": "write to tell other people so we're talking about exceptions that the macro system gives me because I",
    "start": "1716559",
    "end": "1724039"
  },
  {
    "text": "didn't write something right it the answer is it depends like anything else with Scola they seem to have done a",
    "start": "1724039",
    "end": "1730240"
  },
  {
    "text": "pretty good job of at least giving me some information about what went wrong I showed that one esoteric error message",
    "start": "1730240",
    "end": "1735960"
  },
  {
    "text": "that you get when you don't return companions and sometimes You' got to go looking stuff up there's lots of stack Overflow",
    "start": "1735960",
    "end": "1742519"
  },
  {
    "text": "questions about this stuff sometimes the exceptions are clear sometimes they're not sometimes you've got warnings in the",
    "start": "1742519",
    "end": "1748880"
  },
  {
    "text": "docks that it's going to happen but I wouldn't say that it's a smooth sailing experience",
    "start": "1748880",
    "end": "1755200"
  },
  {
    "text": "necessarily so I don't know if everyone can hear that especially on the camera but the question was what do we know",
    "start": "1755200",
    "end": "1760880"
  },
  {
    "text": "about the impact of macros on compile time I would say we're adding extra code",
    "start": "1760880",
    "end": "1767200"
  },
  {
    "text": "to the compiler so it's probably going to be slower it depends upon the complexity of the macro I am in the camp",
    "start": "1767200",
    "end": "1774600"
  },
  {
    "text": "of I am willing to suffer a slower compiler if I get a faster",
    "start": "1774600",
    "end": "1779919"
  },
  {
    "text": "runtime I may not be uh normal for that but for me I mean the macro gives me",
    "start": "1779919",
    "end": "1786799"
  },
  {
    "text": "power and I'm willing to sacrifice that especially in the case of a validator of being able to say I want to validate",
    "start": "1786799",
    "end": "1792720"
  },
  {
    "text": "that this code looks like something but I think I think it's inevitable that",
    "start": "1792720",
    "end": "1797840"
  },
  {
    "text": "we're going to take a compile time hit in performance so you're asking if there's",
    "start": "1797840",
    "end": "1804320"
  },
  {
    "text": "compile time performance to uh tools to understand that I am not sure actually I",
    "start": "1804320",
    "end": "1810519"
  },
  {
    "text": "have not come across anything I don't know how easy it is to debug the performance of the compiler but that",
    "start": "1810519",
    "end": "1815760"
  },
  {
    "text": "would be General that wouldn't just be macros I think that would apply to anything with the compiler is why is it",
    "start": "1815760",
    "end": "1821159"
  },
  {
    "text": "taking so long to do something and given the phases of the compiler I could see that being a complicated problem",
    "start": "1821159",
    "end": "1829000"
  },
  {
    "text": "So Daniel has pointed out order of magnitude wise there's a lot more complicated things like trait",
    "start": "1829000",
    "end": "1834600"
  },
  {
    "text": "linearization the compiler can be doing that's going to make the macro at least my macro a drop in the bucket",
    "start": "1834600",
    "end": "1840640"
  },
  {
    "text": "performance-wise think we have time for one more",
    "start": "1840640",
    "end": "1845640"
  },
  {
    "text": "question so the question was The annotation macros have been marked experimental for a while and whether I",
    "start": "1845960",
    "end": "1851960"
  },
  {
    "text": "know if that's going to change in the future uh the answer is I have no clue I think they're planning on getting them",
    "start": "1851960",
    "end": "1858279"
  },
  {
    "text": "into 212 but I could be wrong",
    "start": "1858279",
    "end": "1864960"
  },
  {
    "text": "yeah so it sounds like the focus on development is more on Scola meta which",
    "start": "1864960",
    "end": "1870000"
  },
  {
    "text": "doesn't contain de macros or annotation macros yet and Eugene could definitely use support in getting that stuff",
    "start": "1870000",
    "end": "1875720"
  },
  {
    "text": "implemented well uh I think Brian is trying to symbol signal to me that we are done we're done so I will exit stage",
    "start": "1875720",
    "end": "1883120"
  },
  {
    "text": "left and thank you very much",
    "start": "1883120",
    "end": "1887158"
  }
]