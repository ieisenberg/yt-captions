[
  {
    "text": "let's see if we can learn something about flight recorder today I'm hoping that's why you're here because that's what I'm going to talk about",
    "start": "4330",
    "end": "9820"
  },
  {
    "text": "I'm Michael Vince that work for Oracle I run the Java team sorry the JVM team at Oracle and I've been working with",
    "start": "9820",
    "end": "16390"
  },
  {
    "text": "jaebeum's my whole career couple of different ones this is Oracle's not-so-short way of",
    "start": "16390",
    "end": "21880"
  },
  {
    "text": "saying that everything I'm about to say is lies don't take anything for real so",
    "start": "21880",
    "end": "28140"
  },
  {
    "text": "let's imagine that you you have a product it's running a service somewhere and it's continuously running and you",
    "start": "28140",
    "end": "35590"
  },
  {
    "text": "obviously want to keep it that way but one day one night it's probably Saturday night right to a middle of the night",
    "start": "35590",
    "end": "42160"
  },
  {
    "text": "there's a problem somewhere an SLA gets breached something is there's a problem in there somewhere and obviously your",
    "start": "42160",
    "end": "47920"
  },
  {
    "text": "job now in the middle of the night is to figure out what went wrong so obviously you start looking through all the data",
    "start": "47920",
    "end": "53110"
  },
  {
    "text": "you can find right it's logs and whatever you have set up in your system well it may well be the case that the",
    "start": "53110",
    "end": "59440"
  },
  {
    "text": "data is really available right you see that the general area where it's crashing or not behaving whatever it is",
    "start": "59440",
    "end": "64780"
  },
  {
    "text": "that you can see that but you can't get to the actual root cause of the problem so what do you do well at some point you",
    "start": "64780",
    "end": "70689"
  },
  {
    "text": "may be tempted to add some more logging or add some specific code that cap tries",
    "start": "70689",
    "end": "76119"
  },
  {
    "text": "to capture more of the data so that you can see what actually went wrong right and that's great problem is obviously",
    "start": "76119",
    "end": "81880"
  },
  {
    "text": "that over time you run it and nothing happens so you don't get more data and as a matter of fact this code you just",
    "start": "81880",
    "end": "87310"
  },
  {
    "text": "add it probably has some kind of performance overhead or some problem associated with it so at some point you remove that again you need to remove it",
    "start": "87310",
    "end": "94659"
  },
  {
    "text": "because well it's not behaving as like it's adding overheads to your service and guess what happens well Saturday 2",
    "start": "94659",
    "end": "101770"
  },
  {
    "text": "a.m. in the morning you have a problem again right so obviously what the the flight industry has learned from this is",
    "start": "101770",
    "end": "108279"
  },
  {
    "text": "let's capture data continuously and let's do that in the background you don't even notice what's happening right",
    "start": "108279",
    "end": "113499"
  },
  {
    "text": "they call it a flight recorder and that's effectively what I'm going to talk about the flight recorder we have worked on is built into the Java Runtime",
    "start": "113499",
    "end": "120429"
  },
  {
    "text": "itself but it behaves very much like a flight recorder an actual real flight recorder yeah and over the next few 40",
    "start": "120429",
    "end": "127929"
  },
  {
    "text": "or so minutes I'm going to talk a bit about what that is on our level the agenda looks something like this I'll",
    "start": "127929",
    "end": "133060"
  },
  {
    "text": "talk about the overview of what JDK flight recorder actually is I will talk about events because it",
    "start": "133060",
    "end": "138579"
  },
  {
    "text": "does turn out that those are central to how j4 works by the way I'm going to use",
    "start": "138579",
    "end": "143859"
  },
  {
    "text": "J for the abbreviation to mention or to refer to this functionality a lot as well I'll talk about the fact that Java",
    "start": "143859",
    "end": "150760"
  },
  {
    "text": "sorry JDK flight recorder is meant for production if I have if you're if you leave this room without remembering the",
    "start": "150760",
    "end": "158019"
  },
  {
    "text": "fact that this is built for and designed for use in production I think I've failed so I'll try to weave that in view",
    "start": "158019",
    "end": "163569"
  },
  {
    "text": "in a few different slides I was going to say something quickly about how you can use j4 and obviously some future work",
    "start": "163569",
    "end": "170019"
  },
  {
    "text": "because that's normally how you wrap up a presentation so what is flight quarter",
    "start": "170019",
    "end": "175319"
  },
  {
    "text": "in a nutshell it is again short for j4",
    "start": "175319",
    "end": "180489"
  },
  {
    "text": "is short for JDK flight recorder and it is available now in the JDK close to you",
    "start": "180489",
    "end": "185919"
  },
  {
    "text": "I'm saying that because well it does depend a bit on exactly which JDK you use but chances are that the JDK you",
    "start": "185919",
    "end": "192459"
  },
  {
    "text": "using has j4 in it it's been there since 7 JDK 7 it was there in another JVM",
    "start": "192459",
    "end": "199480"
  },
  {
    "text": "before that and I'll touch on that in a few slides as well but it is probably in the day in the JDK you're using it is",
    "start": "199480",
    "end": "206769"
  },
  {
    "text": "event based so that I'll go more into detail about what I mean about that but it basically is all around the central",
    "start": "206769",
    "end": "213699"
  },
  {
    "text": "to the concept today for its event ins and capturing events so again I'll talk about more about that later it is built",
    "start": "213699",
    "end": "220750"
  },
  {
    "text": "into the J at the Java Runtime itself and the nice part about that is that it's sort of an unfair advantage to us",
    "start": "220750",
    "end": "226060"
  },
  {
    "text": "we can piggyback on a lot of the stuff that is happening inside of the JVM and inside of the libraries that make up the",
    "start": "226060",
    "end": "231819"
  },
  {
    "text": "JDK and sort of captures just store a lot of the information that the JVM already has so the fact that we have",
    "start": "231819",
    "end": "239319"
  },
  {
    "text": "built this into the Java Runtime itself makes it very efficient it has very low overhead so as a matter of fact it's",
    "start": "239319",
    "end": "244659"
  },
  {
    "text": "designed to have less than 1% overhead in the common cases that means again",
    "start": "244659",
    "end": "250659"
  },
  {
    "text": "first-first reiteration right production right this is meant for production you should be able to run with it turned on",
    "start": "250659",
    "end": "257019"
  },
  {
    "text": "all the time and not even noticed when it that it is there in the background and then if something goes wrong you",
    "start": "257019",
    "end": "262780"
  },
  {
    "text": "already have the data available the other nice part about being having this in the Java Runtime is that",
    "start": "262780",
    "end": "268560"
  },
  {
    "text": "we can collect events from many different levels all the way down from the operating system in the cpu through",
    "start": "268560",
    "end": "274080"
  },
  {
    "text": "the JVM through the libraries and also on the application level you can get events from all these different levels",
    "start": "274080",
    "end": "279540"
  },
  {
    "text": "so you can very easily correlate them so if something goes wrong in your application level that Nesle a is breached you can look into all the",
    "start": "279540",
    "end": "286050"
  },
  {
    "text": "different sort of details around what else was happening at the same time and we also have very powerful api's that",
    "start": "286050",
    "end": "293220"
  },
  {
    "text": "you can use both to produce your own events but also consume the events and sort of make sense of them analyze them",
    "start": "293220",
    "end": "299760"
  },
  {
    "text": "in the other end so this isn't a nutshell and now I'll go through all that more in detail yeah I could start",
    "start": "299760",
    "end": "306389"
  },
  {
    "text": "talking more about theory but I think I'd like to try to just throw a demo at",
    "start": "306389",
    "end": "311520"
  },
  {
    "text": "you and see how that works so I'm going to show you a very simple sort of use",
    "start": "311520",
    "end": "317040"
  },
  {
    "text": "case for how you can use J for so in this case what I've done is using we",
    "start": "317040",
    "end": "323669"
  },
  {
    "text": "have all the events already in the Java Runtime itself and what I've done is to build a very very small agent Java agent",
    "start": "323669",
    "end": "330389"
  },
  {
    "text": "in this case a small program that sort of runs in process next to the application that I'm going to run and it",
    "start": "330389",
    "end": "336210"
  },
  {
    "text": "is monitoring the applications so it's taking the event stream the data stream that that is being produced and it's",
    "start": "336210",
    "end": "341970"
  },
  {
    "text": "analyzing that and it's displaying it in a sort of simplistic way in this case is going to be a text-based representation",
    "start": "341970",
    "end": "347820"
  },
  {
    "text": "it could be something else of course I'm also going to use a very old demo Java",
    "start": "347820",
    "end": "353220"
  },
  {
    "text": "2d and so what I'm doing here is I'm running how many people know what a Java agent is okay some of you at least so",
    "start": "353220",
    "end": "360900"
  },
  {
    "text": "it's basically just imagine that you have your main the normal application main there's a way to say here's a jar",
    "start": "360900",
    "end": "367020"
  },
  {
    "text": "file and inside of that I have a class with another sort of main it's called pre main and it's likely running in",
    "start": "367020",
    "end": "372270"
  },
  {
    "text": "parallel with your application so you get the pre main call first and you can do stuff in it it's a sort of handy way",
    "start": "372270",
    "end": "377520"
  },
  {
    "text": "just to run something on the side of an application so basically what I'm saying is run my health report thing here my",
    "start": "377520",
    "end": "383669"
  },
  {
    "text": "special day for analysis agents and run that in parallel with the application so",
    "start": "383669",
    "end": "388710"
  },
  {
    "text": "if I fire that up hopefully we'll see a well I think the UI may show up on my",
    "start": "388710",
    "end": "394020"
  },
  {
    "text": "laptop or it's coming yeah so old demo I'm gonna pull that all the way because",
    "start": "394020",
    "end": "399930"
  },
  {
    "text": "it's not really the thing guess I need that slightly smaller so that it all fits so basically what",
    "start": "399930",
    "end": "407009"
  },
  {
    "text": "you're seeing here is j4 in action so in the background in the DM in the Java",
    "start": "407009",
    "end": "413039"
  },
  {
    "text": "Runtime we collecting all these events some of them are related to GC it's the",
    "start": "413039",
    "end": "418740"
  },
  {
    "text": "the sort of the environment we're running in with the amount of memory and all that we have allocation rate at the",
    "start": "418740",
    "end": "424020"
  },
  {
    "text": "top there are details around what's going on on in JVM and then there are two different categories here the first one",
    "start": "424020",
    "end": "431249"
  },
  {
    "text": "is top allocations so where is the the application allocating memory and the second one is hot methods where is",
    "start": "431249",
    "end": "437969"
  },
  {
    "text": "execution time actually being spent this is just sort of a snapshot of what j4 can provide and the agent if I show you",
    "start": "437969",
    "end": "445919"
  },
  {
    "text": "the code you'll see that it's very very stream like tight and streamlined I'll go more into sort of the details about",
    "start": "445919",
    "end": "451589"
  },
  {
    "text": "this later but just to get a feeling for the kind of information that we're collecting hopefully this will sort of help put it in perspective yeah so that",
    "start": "451589",
    "end": "466050"
  },
  {
    "text": "was the demo oops some history I'm not",
    "start": "466050",
    "end": "472199"
  },
  {
    "text": "going to go into all the details but j4 has been around for a long time as a matter of fact I worked on another JVM",
    "start": "472199",
    "end": "478079"
  },
  {
    "text": "before called J rocket and we we had a problem at some point where we were",
    "start": "478079",
    "end": "483539"
  },
  {
    "text": "running into challenges ourselves understanding what was actually going on inside with JVM so we developed the JVM",
    "start": "483539",
    "end": "489329"
  },
  {
    "text": "but we wanted to know what's going on so that we can improve on it and make it better and also our support team they were",
    "start": "489329",
    "end": "495869"
  },
  {
    "text": "sitting next to us they were you know I'm gonna say from time to time they brought up the fact that there we could",
    "start": "495869",
    "end": "501389"
  },
  {
    "text": "sure use more insight into what your code actually is doing right so that idea sort of was the foundation for what",
    "start": "501389",
    "end": "507269"
  },
  {
    "text": "later became flight 2/4 it has changed its name over the years a bit but it has",
    "start": "507269",
    "end": "512490"
  },
  {
    "text": "been there for 15 years or so in the let's say the didn't standard yet again",
    "start": "512490",
    "end": "519240"
  },
  {
    "text": "the hot spot the IBM it's been around since 7 JDK 7 so the very first version",
    "start": "519240",
    "end": "524880"
  },
  {
    "text": "was ported over to hot spot in 2012 and we made a number of improvements on it",
    "start": "524880",
    "end": "530519"
  },
  {
    "text": "ever since so in 7 you and it's orange 89 we published API",
    "start": "530519",
    "end": "535800"
  },
  {
    "text": "maybe our API available for people to use but for producing and consuming events and one of the biggest things",
    "start": "535800",
    "end": "542010"
  },
  {
    "text": "that happen to j4 was that in 11 which is now a year ago we open-source day for",
    "start": "542010",
    "end": "547290"
  },
  {
    "text": "it so now it's available in open source and probably in you know every JDK more or less out there this is sort of you",
    "start": "547290",
    "end": "554820"
  },
  {
    "text": "don't need to know all the details but when what happened but that said it's been around for a long time so it's very",
    "start": "554820",
    "end": "560190"
  },
  {
    "text": "mature technology so I guess my point and therefore back to you can use an introduction I'll stop saying that at",
    "start": "560190",
    "end": "565470"
  },
  {
    "text": "some point so let's look at what events actually are because again events are very fundamental to our day for works so",
    "start": "565470",
    "end": "573410"
  },
  {
    "text": "an event is basically this it is a small",
    "start": "573410",
    "end": "579269"
  },
  {
    "text": "blob of data I'll go more into the storage format of it but logically it",
    "start": "579269",
    "end": "585180"
  },
  {
    "text": "has an event ID so it's basically some kind of identifier telling which event this is unique identifier there is a",
    "start": "585180",
    "end": "591870"
  },
  {
    "text": "timestamp so when did this happen there's a duration so how long did this take not all events have a duration so",
    "start": "591870",
    "end": "599519"
  },
  {
    "text": "some can be instant and therefore not have a duration there's a thread ID so which thread generated this event or in",
    "start": "599519",
    "end": "607260"
  },
  {
    "text": "in which thread was this event if this operation generated not all events have had a thread ID some of them are not",
    "start": "607260",
    "end": "613860"
  },
  {
    "text": "tied to a thread specifically but many are there's a stack trace ID so",
    "start": "613860",
    "end": "619829"
  },
  {
    "text": "basically associated with every event that there can be a stack trace I should say but in order to keep the footprint",
    "start": "619829",
    "end": "627570"
  },
  {
    "text": "of this down instead of storing the whole stack trace with every event we are we're putting the stack traces on",
    "start": "627570",
    "end": "632850"
  },
  {
    "text": "the side because they tend to be the almost the same so we're basically storing them separately and we have an",
    "start": "632850",
    "end": "638970"
  },
  {
    "text": "identifier to tell which stack trace to use for this event and then there's",
    "start": "638970",
    "end": "644370"
  },
  {
    "text": "event specific payload so depending on which type of event you have you have various other fields or data points in",
    "start": "644370",
    "end": "650970"
  },
  {
    "text": "there as well okay that's still at strike so let's look at it from a Java perspective so this is basically what it",
    "start": "650970",
    "end": "656940"
  },
  {
    "text": "would look like if you wanted to generate your own event there are two sources of events and I'll get to that",
    "start": "656940",
    "end": "662430"
  },
  {
    "text": "on a later slide as well but there are events that are generated from Java code and that's typically I think will",
    "start": "662430",
    "end": "668460"
  },
  {
    "text": "if you start picking up and using this and playing around with it this is what you will see there are also advanced on",
    "start": "668460",
    "end": "673649"
  },
  {
    "text": "being generated from inside the VM itself so that's native C++ or C C++ code so very similarly to the the next",
    "start": "673649",
    "end": "681899"
  },
  {
    "text": "few slides that I'm going to talk about on the Java level there's a corresponding functionality on the inside of the JVM itself to capture",
    "start": "681899",
    "end": "687540"
  },
  {
    "text": "events so if you want to create your own event this is what you have to do it's",
    "start": "687540",
    "end": "692670"
  },
  {
    "text": "literally that easy so you inherit or you extend the class called event and lo and behold you have",
    "start": "692670",
    "end": "699930"
  },
  {
    "text": "your own event cool right okay so how do we actually make use of that so let's say that you have some really",
    "start": "699930",
    "end": "705240"
  },
  {
    "text": "business-critical code like this is your application it does some something really important and you want to put an",
    "start": "705240",
    "end": "711300"
  },
  {
    "text": "event around it to get some more information I don't know what it is maybe it's processing HTTP request or",
    "start": "711300",
    "end": "716730"
  },
  {
    "text": "it's calculating some prime or whatever it is so basically what you do is you",
    "start": "716730",
    "end": "722760"
  },
  {
    "text": "add this around it so you allocate an instance of the event you just curated you start the event",
    "start": "722760",
    "end": "730020"
  },
  {
    "text": "I forgot that I made these things build so you allocate event you start the",
    "start": "730020",
    "end": "736260"
  },
  {
    "text": "event and the begin here is basically taking a timestamp so it's saying this is when the event started you do your",
    "start": "736260",
    "end": "743730"
  },
  {
    "text": "business logic and then you call M which is also just taking a timestamp so it's",
    "start": "743730",
    "end": "750959"
  },
  {
    "text": "basically now as it has the start and the end point or the duration of the amount right and then you say commit and",
    "start": "750959",
    "end": "756870"
  },
  {
    "text": "that's actually what takes the the event data and puts it into the events tree and stores it off inside of the VM and",
    "start": "756870",
    "end": "762720"
  },
  {
    "text": "and we'll see more about how that works so the first question you might ask is why why would I call end and then commit",
    "start": "762720",
    "end": "769170"
  },
  {
    "text": "couldn't we just collect them right and it does turn out that you don't have to call end if you don't commit will do the",
    "start": "769170",
    "end": "775560"
  },
  {
    "text": "work for you there is a case where it's useful to make it a distinction between the two and that's when you want to",
    "start": "775560",
    "end": "781050"
  },
  {
    "text": "actually have the end timestamp but there's some kind of computation you want to do before storing the event into",
    "start": "781050",
    "end": "787230"
  },
  {
    "text": "the stream so in some cases it may make sense to to call and explicitly but if you don't commit has your back so",
    "start": "787230",
    "end": "795029"
  },
  {
    "text": "typically what you'll see is something like this but this isn't very useful in",
    "start": "795029",
    "end": "800940"
  },
  {
    "text": "itself right it's like now you have event and the only thing you know is that that event happened you may want to",
    "start": "800940",
    "end": "806220"
  },
  {
    "text": "put some some of your own data into the event so the way you do that is by adding fields to the class not",
    "start": "806220",
    "end": "812250"
  },
  {
    "text": "surprisingly perhaps and you initialize those fields as part of creating the event you can do this whenever you want",
    "start": "812250",
    "end": "818370"
  },
  {
    "text": "as long as it's before commit well and after the allocation of course so for example if you want in this case I'm",
    "start": "818370",
    "end": "824370"
  },
  {
    "text": "storing you know constant sort of before the event is even generated but maybe what you want to do is to take the",
    "start": "824370",
    "end": "829769"
  },
  {
    "text": "business logic whatever and maybe some value comes out of that so you want to store that in a field instead that's",
    "start": "829769",
    "end": "835079"
  },
  {
    "text": "totally fine right so do it whenever you want as long as before the commit so",
    "start": "835079",
    "end": "840690"
  },
  {
    "text": "that's basically it there are some additional things that are helpful to do with your event so there are a number of",
    "start": "840690",
    "end": "847470"
  },
  {
    "text": "annotations that you can make use of these things help when presenting the data in the add realm they don't modify",
    "start": "847470",
    "end": "854579"
  },
  {
    "text": "how things are being produced but if you want to visualize this later you may want to provide some useful hints around",
    "start": "854579",
    "end": "861240"
  },
  {
    "text": "what the field value actually is right I'm not sure I did the best did my very",
    "start": "861240",
    "end": "866940"
  },
  {
    "text": "best naming them here it's just message in value right but maybe you at least want to signify that in some way and you",
    "start": "866940",
    "end": "872730"
  },
  {
    "text": "can also annotate the event itself the class there's a name",
    "start": "872730",
    "end": "877860"
  },
  {
    "text": "the default I'll go through a few more annotations on the next slide but the default name of an event is actually the",
    "start": "877860",
    "end": "884130"
  },
  {
    "text": "full package name and the class name and in some cases that works out but in some cases you'll find that your class is",
    "start": "884130",
    "end": "891660"
  },
  {
    "text": "sort of in a package called you know comm dot internal dot secret something dollar foo in it just isn't very nice",
    "start": "891660",
    "end": "899730"
  },
  {
    "text": "when you want to present the data in the other end you may want to have a name that is more easily understandable let's",
    "start": "899730",
    "end": "904860"
  },
  {
    "text": "say so named names the event in a human friend more human friendly way so to speak so that's basically it now you've",
    "start": "904860",
    "end": "913560"
  },
  {
    "text": "created your event and you've put it in the D event stream and you can consume it later and we'll see what that can",
    "start": "913560",
    "end": "919139"
  },
  {
    "text": "look like a few additional annotations that you can use for these so I mention",
    "start": "919139",
    "end": "925170"
  },
  {
    "text": "name and label there is a description so label is supposed to be very very short it's like a word or two description is",
    "start": "925170",
    "end": "932970"
  },
  {
    "text": "it's not a fool essay but maybe if you have you want to add some color to it so a few centers is maybe to try to keep it short and any",
    "start": "932970",
    "end": "942030"
  },
  {
    "text": "interesting there's also other metadata that you can annotate your events with",
    "start": "942030",
    "end": "948090"
  },
  {
    "text": "so as I mentioned events do have most of them have durations and one of the ways",
    "start": "948090",
    "end": "953910"
  },
  {
    "text": "we're dealing with the amount of data is by filtering events so instead of just",
    "start": "953910",
    "end": "959010"
  },
  {
    "text": "capturing everything all the time chances are that some events are only relevant if they are taking it long",
    "start": "959010",
    "end": "966270"
  },
  {
    "text": "enough when the duration is long enough so you can set a threshold on your event",
    "start": "966270",
    "end": "971280"
  },
  {
    "text": "so if you for example know that HTTP requests that take you know less than hundred milliseconds not a problem don't",
    "start": "971280",
    "end": "977700"
  },
  {
    "text": "care but the ones that take longer those are typically the ones I want to capture right so then you can say threshold",
    "start": "977700",
    "end": "983400"
  },
  {
    "text": "here's the filtering threshold for duration similarly there's an enabled",
    "start": "983400",
    "end": "989160"
  },
  {
    "text": "annotation which basically says is this event enabled by default and there's",
    "start": "989160",
    "end": "995040"
  },
  {
    "text": "also an annotation for saying if the stacktrace should be included or not so those are some of the configuration",
    "start": "995040",
    "end": "1000740"
  },
  {
    "text": "options for your events this list is in no way exhaustive there are more annotations and more information the",
    "start": "1000740",
    "end": "1007160"
  },
  {
    "text": "Java Doc's in the JDK dot J for package is very helpful so if you want to know more",
    "start": "1007160",
    "end": "1012380"
  },
  {
    "text": "about which annotations exist and went when and where to use them I suggest you go look there I mentioned that the Java",
    "start": "1012380",
    "end": "1020720"
  },
  {
    "text": "Runtime itself generates a lot of events this likewise is not an exhaustive list but it does cover some of the key things",
    "start": "1020720",
    "end": "1027199"
  },
  {
    "text": "that we are collecting inside of the JVM and the libraries there are right now",
    "start": "1027199",
    "end": "1032720"
  },
  {
    "text": "around 140 different events it is growing but I showed you a bit earlier",
    "start": "1032720",
    "end": "1039199"
  },
  {
    "text": "in the demo that we are capturing things like the environment which CPU are you running on how much memory do you have",
    "start": "1039199",
    "end": "1046100"
  },
  {
    "text": "that sort of thing command-line information version information both on the Java Runtime itself an operating",
    "start": "1046100",
    "end": "1052160"
  },
  {
    "text": "system things like that there's IO both on the file and network side GC JIT compilation more or less you",
    "start": "1052160",
    "end": "1060410"
  },
  {
    "text": "know the expected stuff I guess is in there but again this is something we're constantly working on",
    "start": "1060410",
    "end": "1067030"
  },
  {
    "text": "expanding on so in the background this",
    "start": "1067030",
    "end": "1072520"
  },
  {
    "text": "is sort of how it works so I mentioned that there are sort of two sources for events one is generated",
    "start": "1072520",
    "end": "1078460"
  },
  {
    "text": "from Java code that's what we saw an example of just in a few previous slides here that's the top cloud thing there",
    "start": "1078460",
    "end": "1084790"
  },
  {
    "text": "and there's also JVM level events so things that we feed in from the JVM",
    "start": "1084790",
    "end": "1089920"
  },
  {
    "text": "through the native code more or less these both go into buffers and those buffers are thread-local so that's very",
    "start": "1089920",
    "end": "1097450"
  },
  {
    "text": "powerful because what it means is that there's no cross communication across sockets or CPUs or even threads they all",
    "start": "1097450",
    "end": "1104020"
  },
  {
    "text": "go into thread local buffers first and that's very efficient it's just storing things into a thread local buffer and",
    "start": "1104020",
    "end": "1109960"
  },
  {
    "text": "that that we're very very good at that let's say optimizing that yeah what then happens is that as the thread local",
    "start": "1109960",
    "end": "1116590"
  },
  {
    "text": "buffers fill up we store them which won't take to take the buffers and put them into a global list or buffers this",
    "start": "1116590",
    "end": "1122830"
  },
  {
    "text": "is obviously the uncommon case and also something that can happen sort of in the background right so this is being",
    "start": "1122830",
    "end": "1128940"
  },
  {
    "text": "processed by another thread yeah and once the global buffer is fill up we",
    "start": "1128940",
    "end": "1134380"
  },
  {
    "text": "store things into what we call the repository which you can think of as sort of a file recording file in the",
    "start": "1134380",
    "end": "1141220"
  },
  {
    "text": "background and they obviously we stored",
    "start": "1141220",
    "end": "1146290"
  },
  {
    "text": "that data to file when the buffers fill up the other case which is new with the event streaming functionality that I'll",
    "start": "1146290",
    "end": "1151870"
  },
  {
    "text": "touch on later is that we now also try to do this and roughly do this store",
    "start": "1151870",
    "end": "1156970"
  },
  {
    "text": "things simply repository almost every second or approximately every second and the reason is that we want to again I'll",
    "start": "1156970",
    "end": "1164230"
  },
  {
    "text": "go into this more in detail later but we want to make sure that the repository can constantly be observed it's in sort",
    "start": "1164230",
    "end": "1169870"
  },
  {
    "text": "of in an observed State and has the most recent data in it but there's a trade-off between putting the data there all the time and getting data in a",
    "start": "1169870",
    "end": "1177220"
  },
  {
    "text": "timely manner so basically what you'll see going forward is roughly once a second where we're going to store the",
    "start": "1177220",
    "end": "1183670"
  },
  {
    "text": "data in the repository but again this basically means if you take anything away from this slide it's that the",
    "start": "1183670",
    "end": "1189520"
  },
  {
    "text": "overhead of producing events is from the application perspective more or less zero okay so what does a flight",
    "start": "1189520",
    "end": "1198640"
  },
  {
    "text": "recording file look like so in the end again we store things into the repository and the M data format",
    "start": "1198640",
    "end": "1205040"
  },
  {
    "text": "that we use for this is to fly to coding data and it is a very it's binary representation and it's trying to be",
    "start": "1205040",
    "end": "1211910"
  },
  {
    "text": "very compact it's not compressed which is something we're looking into potentially doing in the future but it",
    "start": "1211910",
    "end": "1217490"
  },
  {
    "text": "is very compact and this is something we've improved on over time as well a lot of the identifiers and the stuff",
    "start": "1217490",
    "end": "1223460"
  },
  {
    "text": "I've mentioned goes into an event tends to be you don't need the full 64 bits or",
    "start": "1223460",
    "end": "1229730"
  },
  {
    "text": "whatever it is it's like most of them are 0 so VAR int happens to be a very efficient representation of that so",
    "start": "1229730",
    "end": "1237230"
  },
  {
    "text": "we're using that extensively in the flight recorder format the files are also self describing and what that means",
    "start": "1237230",
    "end": "1243200"
  },
  {
    "text": "is that you don't have to know like obviously there's like a high-level format you need to know about how j4",
    "start": "1243200",
    "end": "1248810"
  },
  {
    "text": "recordings work but the events themselves or self-describing so we capture all the meta information about",
    "start": "1248810",
    "end": "1254150"
  },
  {
    "text": "what an event looks like which fields it has how to interpret those fields what",
    "start": "1254150",
    "end": "1259490"
  },
  {
    "text": "types they have sort of all of that is captured in the recording itself so if you add a new event for example you",
    "start": "1259490",
    "end": "1266300"
  },
  {
    "text": "don't have to have the side information about which fields you have that's all in the recording so the recording is",
    "start": "1266300",
    "end": "1272120"
  },
  {
    "text": "sort of self stop describing stands on its own feet I'm not going between to",
    "start": "1272120",
    "end": "1279380"
  },
  {
    "text": "all that much more detail around what exactly the flight recording file looks like but hopefully you'll get a rough",
    "start": "1279380",
    "end": "1285350"
  },
  {
    "text": "understanding of that I mentioned that events can be filtered the obvious one is on a type or name basis so you can",
    "start": "1285350",
    "end": "1292190"
  },
  {
    "text": "say that these events I want to include these other events I don't want to include and I also mentioned that you can filter by duration and we find that",
    "start": "1292190",
    "end": "1299150"
  },
  {
    "text": "the combination is very powerful most of the time as a mentor you are probably not interested in like nanoseconds or",
    "start": "1299150",
    "end": "1306110"
  },
  {
    "text": "even necessarily microsecond events it's when it's starting to come up in you know milliseconds or seconds that's when",
    "start": "1306110",
    "end": "1312620"
  },
  {
    "text": "weight gets more interesting but you can filter on the duration and different",
    "start": "1312620",
    "end": "1318800"
  },
  {
    "text": "durations for different events I also mentioned that the fact that we are",
    "start": "1318800",
    "end": "1324500"
  },
  {
    "text": "capturing events from many different places can be very powerful so again we capture things every everywhere from the",
    "start": "1324500",
    "end": "1331010"
  },
  {
    "text": "operating system so what operating system are you using the versions of things the cpu",
    "start": "1331010",
    "end": "1338360"
  },
  {
    "text": "load that that kind of information through the JVM so JIT compilation GC",
    "start": "1338360",
    "end": "1343480"
  },
  {
    "text": "what else is going on class loading in the JVM locks synchronization and all",
    "start": "1343480",
    "end": "1350510"
  },
  {
    "text": "the way through the libraries and if you again do application specific events you get all of these events in the same",
    "start": "1350510",
    "end": "1356480"
  },
  {
    "text": "stream and it's it can be very powerful to sort of start from the top so you see that your HTTP request took a while to",
    "start": "1356480",
    "end": "1362299"
  },
  {
    "text": "execute right and I'm actually going to show them on this later as well so in order to figure out what actually",
    "start": "1362299",
    "end": "1367490"
  },
  {
    "text": "happened you can sort of dive in and go as deep as you want to find what actually led up to that problem why it",
    "start": "1367490",
    "end": "1373370"
  },
  {
    "text": "did take so long in the end right okay I",
    "start": "1373370",
    "end": "1379850"
  },
  {
    "text": "have old section dedicated to the fact that you can use and should use this in production so a lot of this I already",
    "start": "1379850",
    "end": "1387169"
  },
  {
    "text": "sort of covered but it has extremely low overhead the concept of having thread-local buffers and the JVM",
    "start": "1387169",
    "end": "1394340"
  },
  {
    "text": "piggybacking on the fact that a lot of the GC and jet data is something that the JVM already collects and we can just",
    "start": "1394340",
    "end": "1399950"
  },
  {
    "text": "take that data and store it into the event stream right that means that this does have very low overhead we we",
    "start": "1399950",
    "end": "1408200"
  },
  {
    "text": "generate events into these thread local buffers which means that the application won't block it can continue executing",
    "start": "1408200",
    "end": "1413690"
  },
  {
    "text": "it's just doing some thread local stores and that's very fast and if you still",
    "start": "1413690",
    "end": "1419990"
  },
  {
    "text": "aren't convinced maybe this will help you so we have j4 default on for our Oracle Fusion apps these are like big",
    "start": "1419990",
    "end": "1427429"
  },
  {
    "text": "I'm already mature what kinds of applications we have we have customer relationship stuff and like I'm a",
    "start": "1427429",
    "end": "1433700"
  },
  {
    "text": "low-level Java guy but we have cool applications they're all running with j4 enabled and we also see customers who",
    "start": "1433700",
    "end": "1440510"
  },
  {
    "text": "extensively make use of day four throughout their whole deployments these are you know really huge companies",
    "start": "1440510",
    "end": "1447049"
  },
  {
    "text": "hundreds of thousands of machines or instances that sort of thing right so I'll try to stop rubbing in now right",
    "start": "1447049",
    "end": "1453830"
  },
  {
    "text": "but this is for production it's not just for development or but still Michael",
    "start": "1453830",
    "end": "1458960"
  },
  {
    "text": "York you keep talking about this performance thing right and you you keep telling us that doesn't that it doesn't",
    "start": "1458960",
    "end": "1464510"
  },
  {
    "text": "actually like have overhead right but surely that can't be true if we go back to example Here I am now sprinkle all this",
    "start": "1464510",
    "end": "1471000"
  },
  {
    "text": "cold around my business logic and surely that will mess things up right well so",
    "start": "1471000",
    "end": "1476280"
  },
  {
    "text": "to start with let's let's have a look at what actually happens here yeah and this is going to be a journey through how the",
    "start": "1476280",
    "end": "1482280"
  },
  {
    "text": "JVM does optimizations so I did add a few lines of code I'll admit not the beginning thing we",
    "start": "1482280",
    "end": "1489570"
  },
  {
    "text": "look into what it does commit may be the obvious candidate for like how can that possibly be efficient let's look at what",
    "start": "1489570",
    "end": "1495840"
  },
  {
    "text": "commit looks like the first thing I'll say is this is not what commit looks like but it's sort of what commit looks",
    "start": "1495840",
    "end": "1501000"
  },
  {
    "text": "like it actually is for various reasons bytecode generated not an actual method",
    "start": "1501000",
    "end": "1506760"
  },
  {
    "text": "but it sort of looks like this so the first thing it does is ask is the event enabled if it isn't there's an early out",
    "start": "1506760",
    "end": "1513690"
  },
  {
    "text": "to say don't do anything else there are other checks so for example I mentioned durations so if the duration isn't big",
    "start": "1513690",
    "end": "1521130"
  },
  {
    "text": "enough like if this event didn't take long enough then we're also early out and say yeah even this isn't interesting",
    "start": "1521130",
    "end": "1528290"
  },
  {
    "text": "and there are also other checks that are being performed to see if this event actually should be stored into the event",
    "start": "1528290",
    "end": "1533970"
  },
  {
    "text": "stream these checks are all relatively cheap but obviously they're there and in the end if the event is actually to be",
    "start": "1533970",
    "end": "1541140"
  },
  {
    "text": "committed then we call the equivalent of let's say actual could actually commit down there and remember even that is",
    "start": "1541140",
    "end": "1547080"
  },
  {
    "text": "actually cheap right and goes into thread local buffers but let's have a look at what happens then if this event",
    "start": "1547080",
    "end": "1554100"
  },
  {
    "text": "isn't enabled because that's you know the at least the first thing right if we can't get that right surely performance",
    "start": "1554100",
    "end": "1560430"
  },
  {
    "text": "will not be good okay so going back to our example this is what the code looks",
    "start": "1560430",
    "end": "1565530"
  },
  {
    "text": "like right now you have your in really important business logic there in the middle and obviously you want to make sure that that's executing it doesn't",
    "start": "1565530",
    "end": "1571260"
  },
  {
    "text": "have the rest of the overhead so the first thing we do inside of JIT compiler",
    "start": "1571260",
    "end": "1576540"
  },
  {
    "text": "is we use one of our secret weapons which is inlining so we start looking at all these method calls and we we look at",
    "start": "1576540",
    "end": "1583860"
  },
  {
    "text": "what they actually execute and we put that in the method that is calling it so in the case of begin I mentioned that the only thing it actually does is take",
    "start": "1583860",
    "end": "1590220"
  },
  {
    "text": "a timestamp so we inline the timestamp thing in the next step you turns out",
    "start": "1590220",
    "end": "1595260"
  },
  {
    "text": "that that is actually JVM intrinsic it's something that the JVM knows really well how to get it's actually a CPU",
    "start": "1595260",
    "end": "1601830"
  },
  {
    "text": "mr. the CPU they read the time stamp counter instruction in the end so it's",
    "start": "1601830",
    "end": "1608010"
  },
  {
    "text": "very very cheap and we know how to optimize that let's say so we put that there awesome commit likewise we inline and I",
    "start": "1608010",
    "end": "1617820"
  },
  {
    "text": "didn't inline all of commit here so but I did the inline sort of the top check right so we're saying if this is enabled",
    "start": "1617820",
    "end": "1624000"
  },
  {
    "text": "do do stuff well we can inline that as well so and if it turns out that the",
    "start": "1624000",
    "end": "1629190"
  },
  {
    "text": "event actually isn't enabled we'll get the value false and this second secret trick we have in the JVM it's dead code",
    "start": "1629190",
    "end": "1635580"
  },
  {
    "text": "elimination we know that that's not going to be executed we just remove it now we know that this event we allocate",
    "start": "1635580",
    "end": "1642929"
  },
  {
    "text": "it and we store a value in it well what we can do is use our third secret trick with which is scaler ization we don't",
    "start": "1642929",
    "end": "1649409"
  },
  {
    "text": "have to store things in the actual instance on the heap if nobody's going to be around to read it right and this",
    "start": "1649409",
    "end": "1654960"
  },
  {
    "text": "this event clearly isn't used anywhere else it's local to this stack frame it's local to this thread so therefore we",
    "start": "1654960",
    "end": "1661139"
  },
  {
    "text": "don't actually need to store the value on the heap great now we have a stupid allocation let's remove that because",
    "start": "1661139",
    "end": "1666539"
  },
  {
    "text": "nobody will see it and guess what we do them we'll use our second weapon again dead code elimination and business logic",
    "start": "1666539",
    "end": "1673080"
  },
  {
    "text": "right and the story is sort of similar for the other checks right in the end basically what this comes down to is it",
    "start": "1673080",
    "end": "1679799"
  },
  {
    "text": "may look like a lot of code it may look scary it may look like it's not performing well but the JIT compiler is",
    "start": "1679799",
    "end": "1685200"
  },
  {
    "text": "really good at this and basically what we learned up is up with is something that is extremely",
    "start": "1685200",
    "end": "1691019"
  },
  {
    "text": "cheap 0if is not enabled really cheap if it is okay",
    "start": "1691019",
    "end": "1697370"
  },
  {
    "text": "some oops some boardshorts because everybody loves bar charts this is",
    "start": "1697370",
    "end": "1704039"
  },
  {
    "text": "showing j4 disabled which is 0 as I said it's enabled and I will come back to the",
    "start": "1704039",
    "end": "1709799"
  },
  {
    "text": "stack depth port in a bit but it does have an overhead so yeah I'll admit it's not 0 when it's turned on but it's very",
    "start": "1709799",
    "end": "1716100"
  },
  {
    "text": "very small as you'll see there are a few other key use comparisons here as well it's log4j with off which still has an",
    "start": "1716100",
    "end": "1724230"
  },
  {
    "text": "overhead its log4j with info which you can see is pretty costly compared to the alternatives anybody dare guess what",
    "start": "1724230",
    "end": "1730940"
  },
  {
    "text": "java.util logging info and redirected system out how big those will be well they didn't",
    "start": "1730940",
    "end": "1737410"
  },
  {
    "text": "fit into this chart let's say so it's changing the scale a bit you'll see that yeah they have ridiculous over it now it",
    "start": "1737410",
    "end": "1744130"
  },
  {
    "text": "says your mileage may vary at the top your mileage will vary this does depend on you know what you're logging where",
    "start": "1744130",
    "end": "1750070"
  },
  {
    "text": "you're logging it all of that right but you know just to get a feeling for the kind of performance you can expect from",
    "start": "1750070",
    "end": "1755650"
  },
  {
    "text": "JFR it is very very close to zero that's what we designed it for so less than",
    "start": "1755650",
    "end": "1764620"
  },
  {
    "text": "zero fitori less than 1% overhead that's the goal we're trying to keep it there there are ways you can mess that up",
    "start": "1764620",
    "end": "1772330"
  },
  {
    "text": "so again if you actually start generating events with long stacked raises that's one of the key sort of",
    "start": "1772330",
    "end": "1777520"
  },
  {
    "text": "things that is costly for us it's taking the stack trace of the the running thread so if you have very very deep",
    "start": "1777520",
    "end": "1785350"
  },
  {
    "text": "stacks and you generate these events in some like innermost thought loop yeah",
    "start": "1785350",
    "end": "1790750"
  },
  {
    "text": "then you will see overhead but in the typical case you want the default",
    "start": "1790750",
    "end": "1796330"
  },
  {
    "text": "configuration again is tuned that it doesn't have more than 1% there are other configurations you can run with so",
    "start": "1796330",
    "end": "1802420"
  },
  {
    "text": "if you start collecting allocation profiles for example or again just just",
    "start": "1802420",
    "end": "1807880"
  },
  {
    "text": "capture a lot more data then yes there is no overhead but we get a lot of detailed information using the default",
    "start": "1807880",
    "end": "1814300"
  },
  {
    "text": "profile ok so if you want to use this how do you get started I'm going to cover the JDK",
    "start": "1814300",
    "end": "1821080"
  },
  {
    "text": "11 plus case here because well I'd like to talk about JDK 11 plus there are",
    "start": "1821080",
    "end": "1826660"
  },
  {
    "text": "options for all the data cases well but this is what it looks like in 11 plus so",
    "start": "1826660",
    "end": "1831790"
  },
  {
    "text": "the option that you're looking for is start flight recording and there are sub",
    "start": "1831790",
    "end": "1836980"
  },
  {
    "text": "options to that so the second example here shows how you can start recording and ask it to store the data to a",
    "start": "1836980",
    "end": "1842830"
  },
  {
    "text": "specific file otherwise it will just record it sort of in the background and you'll have to go in and get the data",
    "start": "1842830",
    "end": "1848410"
  },
  {
    "text": "out explicitly so if you start it as the second line sets then you store the data to a file called temp foo DFR and you",
    "start": "1848410",
    "end": "1857320"
  },
  {
    "text": "have your application organiz as to that if you already have a VM up and running",
    "start": "1857320",
    "end": "1862360"
  },
  {
    "text": "and you didn't specify start flight recording but you still want to get data out of it there",
    "start": "1862360",
    "end": "1867810"
  },
  {
    "text": "command in your bin directory called J CMD or J command and it has options to",
    "start": "1867810",
    "end": "1873360"
  },
  {
    "text": "start recording and to get the data out as a file as well so that's this j4 that",
    "start": "1873360",
    "end": "1879030"
  },
  {
    "text": "start you can by the way specify to JC in the idler a process identifier or the",
    "start": "1879030",
    "end": "1884790"
  },
  {
    "text": "name of the main class obviously that doesn't work if you are many applications running the same main class",
    "start": "1884790",
    "end": "1890370"
  },
  {
    "text": "but those are options let's say and you there are also sub options that you can specify to limit the amount of data you",
    "start": "1890370",
    "end": "1897090"
  },
  {
    "text": "get out and so on and so forth so I'll show you a quick example of what that looks like I wish that switching",
    "start": "1897090",
    "end": "1906360"
  },
  {
    "text": "time wasn't a thing so let me kill that so this I'm going to run much like I",
    "start": "1906360",
    "end": "1913860"
  },
  {
    "text": "showed you I'm going to still use the Java 2d demo and I'm going to run it and say take the",
    "start": "1913860",
    "end": "1919650"
  },
  {
    "text": "default profile these default events and store those into a file called slash temp /j to DJ VAR and though I should",
    "start": "1919650",
    "end": "1927930"
  },
  {
    "text": "prove that I should remove this file to make it clear that I haven't cheated",
    "start": "1927930",
    "end": "1933600"
  },
  {
    "text": "so I'll start it this up and I'm gonna run it for a short while to sort of happy to collect some information in the",
    "start": "1933600",
    "end": "1939030"
  },
  {
    "text": "background I like clicking around and seeing what what weird stuff is in here very uh",
    "start": "1939030",
    "end": "1945980"
  },
  {
    "text": "psychedelic okay so we've run it for a while and if we now go and look we'll",
    "start": "1945980",
    "end": "1951660"
  },
  {
    "text": "see that we have a file yeah and there's another handy tool that you can use to look at this so inside of your bin",
    "start": "1951660",
    "end": "1958410"
  },
  {
    "text": "directory again so if I go look in my Java home on the bin I will find AJ for",
    "start": "1958410",
    "end": "1965190"
  },
  {
    "text": "command this is also new since I want to say 11 could be off by a release or two this is actually one of the challenges",
    "start": "1965190",
    "end": "1971610"
  },
  {
    "text": "with the release cadance we have right now we're releasing one release every six months and it's really hard to remember what went into which release",
    "start": "1971610",
    "end": "1977760"
  },
  {
    "text": "but I think it was 11 she'll be close at least so if I run that I'll get some",
    "start": "1977760",
    "end": "1985500"
  },
  {
    "text": "handy information about what I can do with it so it's also saying if you actually want to capture data here's how",
    "start": "1985500",
    "end": "1990720"
  },
  {
    "text": "you do that you can use j c in d as well and it's telling you that if you want to print out and analyze what actually went",
    "start": "1990720",
    "end": "1996540"
  },
  {
    "text": "into recording you can do something along these lines so print the events this will obviously scroll these are a",
    "start": "1996540",
    "end": "2004100"
  },
  {
    "text": "number of like largest number of events now that scroll by as you can see they're sort of human readable and nice",
    "start": "2004100",
    "end": "2009880"
  },
  {
    "text": "there are other ways you can get the data out so you can for example say I want that exact same information but as",
    "start": "2009880",
    "end": "2015410"
  },
  {
    "text": "Jason because Jason is cool nowadays you will get a destination instead you can you can look at summary information so",
    "start": "2015410",
    "end": "2022790"
  },
  {
    "text": "maybe I should have started with that so I can say summary and I'll get",
    "start": "2022790",
    "end": "2029180"
  },
  {
    "text": "information about what version of the ja4 file format whatever is used here",
    "start": "2029180",
    "end": "2037040"
  },
  {
    "text": "how many chunks it asks so this is actually back to sort of house data stored so inside of that file we we are",
    "start": "2037040",
    "end": "2043640"
  },
  {
    "text": "we are storing things into chunks because like we do want to deliver data continuously in some way so there are",
    "start": "2043640",
    "end": "2048679"
  },
  {
    "text": "chunks that are each like you know stand on their own feet again right and inside",
    "start": "2048679",
    "end": "2053899"
  },
  {
    "text": "of this file specifically we only have one of them we see when the recording was started how long it was going for",
    "start": "2053900",
    "end": "2059990"
  },
  {
    "text": "and the events that went in right so this is a histogram sort of of the kind of events that came in into that",
    "start": "2059990",
    "end": "2065960"
  },
  {
    "text": "recording so those are all cool ways of",
    "start": "2065960",
    "end": "2073879"
  },
  {
    "text": "looking at JFR repeated on this slide for simplicity oh you can also say",
    "start": "2073880",
    "end": "2080540"
  },
  {
    "text": "categories one of the annotations that I think I had on the oops on the slide was category so that's a lot of sort of",
    "start": "2080540",
    "end": "2088190"
  },
  {
    "text": "high-level presentation way of saying this event is logically part of a group of other events so we have one category",
    "start": "2088190",
    "end": "2094460"
  },
  {
    "text": "called GC for example so if you only want to print out GC events you can say - - categories GC and you can define",
    "start": "2094460",
    "end": "2102080"
  },
  {
    "text": "your own categories as well there it's yeah not gonna go into the details okay so what is J for use useful for okay",
    "start": "2102080",
    "end": "2110900"
  },
  {
    "text": "but apart from production you can also use it for other things like the obvious thing is development so you want to know",
    "start": "2110900",
    "end": "2116360"
  },
  {
    "text": "while you're developing your application what methods are actually hot what what is allocating memory how can I make this",
    "start": "2116360",
    "end": "2123590"
  },
  {
    "text": "run faster or more stable in a more stable way or whatever so development is",
    "start": "2123590",
    "end": "2129350"
  },
  {
    "text": "another obvious use case the one we found interesting was actually testing so it turns out that is part of",
    "start": "2129350",
    "end": "2134829"
  },
  {
    "text": "j4 and especially the event streaming stuff I'll touch on in a minute we found that using j4 to test j4 was actually",
    "start": "2134829",
    "end": "2141969"
  },
  {
    "text": "extremely powerful we can capture data that we otherwise just wouldn't be able to and then analyze that whatever",
    "start": "2141969",
    "end": "2148119"
  },
  {
    "text": "operation we expected to do a certain thing actually did the thing in the end as well so this is true for things like",
    "start": "2148119",
    "end": "2153779"
  },
  {
    "text": "allocation or LOC profiling if like the the the profile suddenly changes right",
    "start": "2153779",
    "end": "2159789"
  },
  {
    "text": "you make a change in all the sudden you have you know lock contention and everything grinds to a halt",
    "start": "2159789",
    "end": "2165099"
  },
  {
    "text": "or maybe not a halt it just goes more slowly maybe it's ten percents more slowly so that it's very hard to see",
    "start": "2165099",
    "end": "2170829"
  },
  {
    "text": "right j4 can potentially help you figure things like that out okay so that's sort",
    "start": "2170829",
    "end": "2178059"
  },
  {
    "text": "of in a nutshell what j4 has been for a long time one of the key use cases we've been",
    "start": "2178059",
    "end": "2183339"
  },
  {
    "text": "missing is continuous monitoring so for better or worse the way j4 was",
    "start": "2183339",
    "end": "2189339"
  },
  {
    "text": "implemented was more for let's say profiling spending time like you know a",
    "start": "2189339",
    "end": "2196209"
  },
  {
    "text": "minute or three collecting data from an application dumping out that data and then analyzing it and that's powerful",
    "start": "2196209",
    "end": "2203709"
  },
  {
    "text": "for many use cases but one of the problems is if you actually want to use it continuously right if you have to",
    "start": "2203709",
    "end": "2208930"
  },
  {
    "text": "wait for a full minute and then go through a number of steps then that's that cumbersome so I'm going to talk a",
    "start": "2208930",
    "end": "2215170"
  },
  {
    "text": "bit about future future some of the future is almost here already but I never a promise that anything goes into",
    "start": "2215170",
    "end": "2221529"
  },
  {
    "text": "releases I can only say that the event streaming stuff is in mainline right now and it's therefore highly likely to make",
    "start": "2221529",
    "end": "2227619"
  },
  {
    "text": "it into the next release do care is holding a beaker because that's what we",
    "start": "2227619",
    "end": "2232900"
  },
  {
    "text": "do in the labs if you watch carefully the beaker you will now change to a coffee beaker sort of thing is that you",
    "start": "2232900",
    "end": "2239469"
  },
  {
    "text": "wouldn't believe how much time we spent internally working on the color of that coffee by the way so as I mentioned",
    "start": "2239469",
    "end": "2246190"
  },
  {
    "text": "today as in all the the shipped versions of day four you basically have to go",
    "start": "2246190",
    "end": "2251319"
  },
  {
    "text": "through the cycle of starting the recording stopping the recording and dumping out the file every time you want",
    "start": "2251319",
    "end": "2257199"
  },
  {
    "text": "to look at the data and that's not exactly ideal it again can work well for your like development use case where",
    "start": "2257199",
    "end": "2262959"
  },
  {
    "text": "you're just doing profiling but if you want to actually look at your running service somewhere that that's not exactly what we want to do",
    "start": "2262959",
    "end": "2269400"
  },
  {
    "text": "right so we were have worked on something called events dreaming it has a number or a Jeff and a japanesse",
    "start": "2269400",
    "end": "2276420"
  },
  {
    "text": "OC ated with it Jeff's our JDK enhancement proposals they're sort of a description of what",
    "start": "2276420",
    "end": "2282660"
  },
  {
    "text": "the functionality is and and some pointers to more int data around what's going on the goal here was to provide",
    "start": "2282660",
    "end": "2290490"
  },
  {
    "text": "functionality that again you can use to continuously monitor what's happening inside of the instance and also provide",
    "start": "2290490",
    "end": "2297540"
  },
  {
    "text": "the necessary api's to make that easy our goal was to create sort of like make it more or less a one-liner to consume",
    "start": "2297540",
    "end": "2304560"
  },
  {
    "text": "data and act on various things we didn't get it down to a one-liner but I'll show you on the next few slides that it's at",
    "start": "2304560",
    "end": "2311010"
  },
  {
    "text": "least relatively I want to say straightforward yeah so this is enabling",
    "start": "2311010",
    "end": "2316110"
  },
  {
    "text": "you to do continuous monitoring while the recording is still in progress right so we're continuously recording things",
    "start": "2316110",
    "end": "2321840"
  },
  {
    "text": "and given that we now dump the data out to the repository approximately once every second you can observe it you can",
    "start": "2321840",
    "end": "2328920"
  },
  {
    "text": "consume it and act on it approximately every second so what can consuming look",
    "start": "2328920",
    "end": "2335130"
  },
  {
    "text": "like so this is sort of the canonical example of consuming events it is",
    "start": "2335130",
    "end": "2340550"
  },
  {
    "text": "opening the recording stream this I should have included the the package",
    "start": "2340550",
    "end": "2345630"
  },
  {
    "text": "here I think it's JDK j4 dot something maybe it's just a TK j4 we can look at",
    "start": "2345630",
    "end": "2353160"
  },
  {
    "text": "that later but in our case we're opening up the recording we're saying enable one event in this case it's JDK Java monitor",
    "start": "2353160",
    "end": "2359970"
  },
  {
    "text": "enter which is well locks synchronization starts and do that with",
    "start": "2359970",
    "end": "2365790"
  },
  {
    "text": "a threshold of 10 milliseconds actually I think I boldface that as well start the Jade Java flight recorder",
    "start": "2365790",
    "end": "2372390"
  },
  {
    "text": "sorry Java Monitor enter event with 10 millisecond duration so any event that",
    "start": "2372390",
    "end": "2377460"
  },
  {
    "text": "takes longer than that will be captured in the stream and then we're going to say if one of those events occurred if",
    "start": "2377460",
    "end": "2385560"
  },
  {
    "text": "we see that in the event stream then do this so in this case we're going to say print it out to stand it out and I'm not",
    "start": "2385560",
    "end": "2392220"
  },
  {
    "text": "going to go into the details around but basically where one of the fields in that event is called monitor class and",
    "start": "2392220",
    "end": "2398040"
  },
  {
    "text": "it's the type we're synchronizing on and that cold air gets that as a it's",
    "start": "2398040",
    "end": "2404219"
  },
  {
    "text": "not java.lang class you're getting a representation J for specific representation of the class of the type",
    "start": "2404219",
    "end": "2410819"
  },
  {
    "text": "I'm not going to go into the details but in our case it's going to print out the event live not the type associated with",
    "start": "2410819",
    "end": "2417539"
  },
  {
    "text": "the event n is a start so start here basically is a synchronous call is it's",
    "start": "2417539",
    "end": "2424439"
  },
  {
    "text": "going to block until the event stream is closed in the other end there are a synchronous calls as well that you can",
    "start": "2424439",
    "end": "2431699"
  },
  {
    "text": "do methods for for processing this in a separate thread but it's going to do all",
    "start": "2431699",
    "end": "2437279"
  },
  {
    "text": "of this and it's going to print it out if you want to add another event it's very similar so in this case we're",
    "start": "2437279",
    "end": "2442559"
  },
  {
    "text": "saying CPU load enable that do that with a duration of 1 second and print it out one when you get it so I'm going to try",
    "start": "2442559",
    "end": "2451109"
  },
  {
    "text": "a much more complicated demo let's see if the demo gods are with me so I know",
    "start": "2451109",
    "end": "2457439"
  },
  {
    "text": "literally nothing about spring boot but I'm gonna use that anyway so I've implemented a small agent a monitoring",
    "start": "2457439",
    "end": "2464999"
  },
  {
    "text": "agent and it's actually this time it's not going to run in process it's going to run on the side so it's going to run",
    "start": "2464999",
    "end": "2471569"
  },
  {
    "text": "on the same machine my laptop but it's going to run in a different process on the side so what I'm going to do is to",
    "start": "2471569",
    "end": "2476789"
  },
  {
    "text": "start up the spring application I'll show you the code in a minute what I'm doing or you can't see that but",
    "start": "2476789",
    "end": "2482999"
  },
  {
    "text": "basically I'm saying start flight recording and I start up my spring boot",
    "start": "2482999",
    "end": "2488279"
  },
  {
    "text": "thing so this could be any app let's say so I'll fire that up and meanwhile in",
    "start": "2488279",
    "end": "2495599"
  },
  {
    "text": "the background so that that's not running in the background I have this application going you can't see that",
    "start": "2495599",
    "end": "2501390"
  },
  {
    "text": "either and I'm not sure how to make the font bigger here okay but in other case",
    "start": "2501390",
    "end": "2507449"
  },
  {
    "text": "I can't really talk to this anyway because the spring boot and I don't know spring boot there is a small application here basically what it does is it sets",
    "start": "2507449",
    "end": "2514919"
  },
  {
    "text": "up a few resting end points I think they're called and very specifically",
    "start": "2514919",
    "end": "2520079"
  },
  {
    "text": "they look sort of like this so there's a slash hello endpoint you really can't see this",
    "start": "2520079",
    "end": "2527059"
  },
  {
    "text": "presentation mode excellent where's presentation mode sweet good there thank",
    "start": "2529560",
    "end": "2544780"
  },
  {
    "text": "you not that one not that one yeah good",
    "start": "2544780",
    "end": "2551619"
  },
  {
    "text": "hello so if you go to this web service / hello you'll simply produce something that",
    "start": "2551619",
    "end": "2558609"
  },
  {
    "text": "says hello there are a few other ones here and that's what we'll be demoing so hello one that's almost the same thing",
    "start": "2558609",
    "end": "2565660"
  },
  {
    "text": "it's just it does something CPU intensive so imagine that I have some weird request here and it's consuming",
    "start": "2565660",
    "end": "2572589"
  },
  {
    "text": "CPU I'll obviously want to know what's going on right so keep that in mind hello one is CPU intensive hello - is GC",
    "start": "2572589",
    "end": "2580930"
  },
  {
    "text": "intensive so it does something weird with allocation or something right should maybe be clear from the name and",
    "start": "2580930",
    "end": "2586450"
  },
  {
    "text": "hello three will be lot you're using lock contention so there's our three sort of use cases or three weird things",
    "start": "2586450",
    "end": "2592420"
  },
  {
    "text": "that can happen obviously this is a fake application but in theory this could be your your production code or whatever",
    "start": "2592420",
    "end": "2597880"
  },
  {
    "text": "right so I have a small agent on the side and it basically does what I just",
    "start": "2597880",
    "end": "2603160"
  },
  {
    "text": "showed you on the slides so it's opening up the recording stream it has to do that in the same process instead what it",
    "start": "2603160",
    "end": "2608500"
  },
  {
    "text": "does is ask around for JVM start running on the same machine and it's opening up the recording directly from the",
    "start": "2608500",
    "end": "2615040"
  },
  {
    "text": "repository it's like from the outside so basically what is happening now is that I have the spring boot instance that is",
    "start": "2615040",
    "end": "2620560"
  },
  {
    "text": "producing data into the repository into the file stream and I have this other process that is now observing that exact",
    "start": "2620560",
    "end": "2627040"
  },
  {
    "text": "data and what we made sure with event streaming is that the data is always consumable it's always consistent right",
    "start": "2627040",
    "end": "2632770"
  },
  {
    "text": "so you can always get to it and observe it on the side so what that looks like",
    "start": "2632770",
    "end": "2638380"
  },
  {
    "text": "is something like this so by the way if",
    "start": "2638380",
    "end": "2643930"
  },
  {
    "text": "you if you're paying attention you'll see that I'm running Java on a Java file I am NOT compiling it first this is new",
    "start": "2643930",
    "end": "2651760"
  },
  {
    "text": "functionality and some release that it's relatively recent that I've got forgotten exactly which one it is but if you have a single main class with a main",
    "start": "2651760",
    "end": "2658660"
  },
  {
    "text": "method in it you don't need to run Java C you can just run it directly with Java kula so as I mentioned what this is",
    "start": "2658660",
    "end": "2665500"
  },
  {
    "text": "doing now is looking around for processes jvm processes on the same machine and it's now found one it's the",
    "start": "2665500",
    "end": "2671290"
  },
  {
    "text": "spring boot thing not surprisingly and when I what I'll do now is I'll first run hello",
    "start": "2671290",
    "end": "2676300"
  },
  {
    "text": "just to see or show you what happening so the monitoring agent should make that",
    "start": "2676300",
    "end": "2682540"
  },
  {
    "text": "slightly bigger didn't notice that the hello endpoint was being accessed hello",
    "start": "2682540",
    "end": "2689650"
  },
  {
    "text": "one if you remember is a CPU intensive one so now it's going to run the CPU intensive thing and hopefully as you can",
    "start": "2689650",
    "end": "2696010"
  },
  {
    "text": "see it took slightly longer to access and this looks like a crash but it isn't it's actually printing out that",
    "start": "2696010",
    "end": "2701770"
  },
  {
    "text": "something one event took a lot a long time the CPU event here so what I've done is I've opened the recording stream",
    "start": "2701770",
    "end": "2707590"
  },
  {
    "text": "I've added the subscription to the CPU load event or JDK execution sample event",
    "start": "2707590",
    "end": "2713320"
  },
  {
    "text": "and I've said said if it takes longer than this print it out for me and basically that's what we're seeing here it found that something was taking",
    "start": "2713320",
    "end": "2720099"
  },
  {
    "text": "time and you can see that in the stack trace here maybe I'll make that slightly bigger as well you can see that it's the",
    "start": "2720099",
    "end": "2726340"
  },
  {
    "text": "CPU intensive method much like we'd expect hello - is the GC intensive one",
    "start": "2726340",
    "end": "2731530"
  },
  {
    "text": "and I'm not sure why it started accessing the everything there but in our case we see that there's a GC pause",
    "start": "2731530",
    "end": "2738300"
  },
  {
    "text": "and the reason being that we have a GC",
    "start": "2738300",
    "end": "2743589"
  },
  {
    "text": "intensive thing running and then finally we have the lock contention case which",
    "start": "2743589",
    "end": "2750550"
  },
  {
    "text": "is going to tell you that there's a weight here in the lock contention method and you can also see that the",
    "start": "2750550",
    "end": "2756310"
  },
  {
    "text": "class we're synchronizing on is object so these are examples of sort of very",
    "start": "2756310",
    "end": "2761470"
  },
  {
    "text": "simple monitoring I'll show you just very very quickly what the monitoring agent actually actually looks like just",
    "start": "2761470",
    "end": "2768460"
  },
  {
    "text": "to give you a sort of a quick view of that so it should be relatively similar",
    "start": "2768460",
    "end": "2776800"
  },
  {
    "text": "to what you'd expect so here's an event stream where we're opening it up and we're saying on the HTTP request event",
    "start": "2776800",
    "end": "2783480"
  },
  {
    "text": "if the request takes a long time then get more information I show that that's what I mean a nutshell what happens",
    "start": "2783480",
    "end": "2791400"
  },
  {
    "text": "cool so that's event streaming I want to say that with event streaming we are",
    "start": "2791799",
    "end": "2797289"
  },
  {
    "text": "effectively in my mind we have the first real version of j4 it's always been powerful but the fact that we now have",
    "start": "2797289",
    "end": "2806299"
  },
  {
    "text": "event streaming in there is providing that that use case that we've been missing in my mind so obviously there's",
    "start": "2806299",
    "end": "2813019"
  },
  {
    "text": "more stuff that we can work on but that's sort of one of the key things that that we needed to do to have the full story in place some of the other",
    "start": "2813019",
    "end": "2819440"
  },
  {
    "text": "things we're working on is making it possible to access the de Vence / DMX we",
    "start": "2819440",
    "end": "2824869"
  },
  {
    "text": "want to as I mentioned earlier keep adding events there are other things especially on the JDK libraries level",
    "start": "2824869",
    "end": "2830480"
  },
  {
    "text": "that we want to feed into the same stream so which crypto algorithms are",
    "start": "2830480",
    "end": "2836630"
  },
  {
    "text": "being used certificate expiration dates that sort of thing high-level stuff there's a product called Loom which is",
    "start": "2836630",
    "end": "2845059"
  },
  {
    "text": "looking at providing fibers and continuations not going going to go into the details but basically it turns",
    "start": "2845059",
    "end": "2850130"
  },
  {
    "text": "around a bit the the concept of what the thread is and since threads are so key",
    "start": "2850130",
    "end": "2856250"
  },
  {
    "text": "to the lj4 works that's something well that we need to look at how we can support with j4 as well the command line",
    "start": "2856250",
    "end": "2863569"
  },
  {
    "text": "is something that it's always hard would use built-in command lines but I think we can do some some tuning to make that",
    "start": "2863569",
    "end": "2868910"
  },
  {
    "text": "slightly easier to use there are a couple of other things that we're looking into event throttling so instead",
    "start": "2868910",
    "end": "2874789"
  },
  {
    "text": "of just filtering on name and duration maybe you want to record sample every MF",
    "start": "2874789",
    "end": "2880460"
  },
  {
    "text": "event of a certain type that sort of thing and deep tracing in the sense of maybe for a short duration you actually",
    "start": "2880460",
    "end": "2887720"
  },
  {
    "text": "want to capture everything just to get a very very detailed view of what's going on so this does put some stress on the",
    "start": "2887720",
    "end": "2894890"
  },
  {
    "text": "code that is capturing events and making that efficient and all that there are a",
    "start": "2894890",
    "end": "2901279"
  },
  {
    "text": "lot of integration opportunities here so j4 they want the stuff I've showed you is obviously very sort of low level and",
    "start": "2901279",
    "end": "2906589"
  },
  {
    "text": "and provides the primitives for getting the data out the next step that that",
    "start": "2906589",
    "end": "2911660"
  },
  {
    "text": "we'd like to see is more of the big libraries frameworks and IDE is picking up and making use of this visualizing it",
    "start": "2911660",
    "end": "2917750"
  },
  {
    "text": "helping it like providing it to the user in a bit well shaped forums so to speak so we're providing the the primitives",
    "start": "2917750",
    "end": "2924200"
  },
  {
    "text": "for doing this I showed hopefully like getting specific data out isn't that hard it's like a few",
    "start": "2924200",
    "end": "2930220"
  },
  {
    "text": "lines of code but I think what what we're hoping to see is that this will be picked up by a lot of the vendors out",
    "start": "2930220",
    "end": "2935770"
  },
  {
    "text": "there and if you want to try this out and please do try it out",
    "start": "2935770",
    "end": "2941170"
  },
  {
    "text": "we are counted relying on your help to figure out what to do next and make sure that everything works as you'd expect",
    "start": "2941170",
    "end": "2946660"
  },
  {
    "text": "so please do try it out we have obviously shipped releases with j4 in it we are also providing early access",
    "start": "2946660",
    "end": "2953470"
  },
  {
    "text": "binaries of the next version of Java so in this case that's JDK 14 you can pick",
    "start": "2953470",
    "end": "2958840"
  },
  {
    "text": "them up you can try them out and let us know what you think there's a email list here a mailing list that you can send",
    "start": "2958840",
    "end": "2964600"
  },
  {
    "text": "feedback to and just as a summary this is actually the same slide as the in the",
    "start": "2964600",
    "end": "2970750"
  },
  {
    "text": "in a nutshell thing that I showed at the very start so flight recorder is j4 you know JDK flight recorder it's there",
    "start": "2970750",
    "end": "2977050"
  },
  {
    "text": "right now already event streaming is not in a released version yet but it's coming soon its event based built into",
    "start": "2977050",
    "end": "2984609"
  },
  {
    "text": "the Java Runtime with all the unfair advantages that come with it it has very",
    "start": "2984609",
    "end": "2989830"
  },
  {
    "text": "very low overhead then its production news right remember that production you can",
    "start": "2989830",
    "end": "2995290"
  },
  {
    "text": "correlate events from many different levels and we have api's both for producing and consuming the events that",
    "start": "2995290",
    "end": "3000570"
  },
  {
    "text": "we like to think are very simple to work with so with that I thank you and",
    "start": "3000570",
    "end": "3006740"
  },
  {
    "text": "questions do we have time for questions we do not have time for questions I'll be around so [Applause]",
    "start": "3006740",
    "end": "3015969"
  }
]