[
  {
    "start": "0",
    "end": "133000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "18320"
  },
  {
    "text": "um so for those who don't know me you haven't seen me speak before I'm Brendan McAdams I'm an engineer at tenen uh one of the big products we make is mongodb",
    "start": "18320",
    "end": "25240"
  },
  {
    "text": "uh and I spend my day working on stuff around mongodb I do a lot of work with scholar uh before I joined tenen I",
    "start": "25240",
    "end": "32439"
  },
  {
    "text": "created a driver for and Scholar called kasba which I now maintain there",
    "start": "32439",
    "end": "37680"
  },
  {
    "text": "and I spend a lot of time early on getting a feel for you know more and more of using schola that was really how I learned schala and early in my career",
    "start": "37680",
    "end": "45800"
  },
  {
    "text": "that was it that was all I had done in in the career in schola and I've given a talk at schola days and a couple of other conferences and it um on my",
    "start": "45800",
    "end": "53000"
  },
  {
    "text": "experiences learning uh you know what I learned about Scala writing a driver the",
    "start": "53000",
    "end": "58760"
  },
  {
    "text": "big thing with C with kasba is that rather than Reinventing the wheel for the networking part of there was a",
    "start": "58760",
    "end": "64960"
  },
  {
    "text": "perfectly good Java driver that already supports the networking to so I figured I'll focus on all the parts that",
    "start": "64960",
    "end": "70400"
  },
  {
    "text": "make things look pretty in Scala and leave the networking there um but one of the things I did come up with is that",
    "start": "70400",
    "end": "77080"
  },
  {
    "text": "there are different people out there so there are asynchronous Frameworks like blue eyes where having a blocking",
    "start": "77080",
    "end": "82159"
  },
  {
    "text": "Network driver becomes problematic and so I started to play with I was sort of excited at that point to start doing",
    "start": "82159",
    "end": "88840"
  },
  {
    "text": "more and playing with right a pure Scola version of the driver and I started to build something called Hammersmith which is stable now uh a",
    "start": "88840",
    "end": "96119"
  },
  {
    "text": "version of it shipped with AA 2.0 to do mongod durable mailboxes it doesn't have all the features yet uh but a bunch of",
    "start": "96119",
    "end": "102040"
  },
  {
    "text": "different people have contributed to it it's been a lot of fun to work on I've been busy the last few months and haven't been able to work on it much but",
    "start": "102040",
    "end": "107360"
  },
  {
    "text": "started work on it again and so I learned a lot about doing asynchronous IO from doing that and I want to use",
    "start": "107360",
    "end": "112840"
  },
  {
    "text": "that to guide this a little bit and we're going to talk about why we might do asynchronous IO and a couple of the",
    "start": "112840",
    "end": "118039"
  },
  {
    "text": "lessons that I learned things that that were hard to do that are easy to do in synchronous programming and there sort",
    "start": "118039",
    "end": "124240"
  },
  {
    "text": "of patterns or tricks that you can apply to doing this yourself so we have a couple of goals",
    "start": "124240",
    "end": "130560"
  },
  {
    "text": "here we need to stop wasting resources and blocking IO and I'll talk about some of the reasons why I rather uh maybe",
    "start": "130560",
    "end": "137920"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "speciously accuse you of wasting resources because in blocking IO we have a very set path for doing things and if",
    "start": "137920",
    "end": "144640"
  },
  {
    "text": "we have to deviate from that path to maybe wait for something to happen we can't really do anything else with those resources that are going",
    "start": "144640",
    "end": "150680"
  },
  {
    "text": "on we want to try to achieve c10k now I've heard people say recently that c10k",
    "start": "150680",
    "end": "156400"
  },
  {
    "text": "is sort of a laughable number because that was the target five years ago c10k is a sort of shorthand term that refers",
    "start": "156400",
    "end": "163040"
  },
  {
    "text": "to the idea of scaling to handle 10,000 simultaneous clients there's people who",
    "start": "163040",
    "end": "168480"
  },
  {
    "text": "claim now that that number is too low but that was a number that's thrown out there when you're talking about asynchronous programming it's a Target",
    "start": "168480",
    "end": "174959"
  },
  {
    "text": "it's something where 10,000 simultaneous clients in a synchronous networking layer might be a little bit tough",
    "start": "174959",
    "end": "180840"
  },
  {
    "text": "and profit because ultimately at the end of the day um we're not you know most of us who you know are going to jobs every",
    "start": "180840",
    "end": "188000"
  },
  {
    "text": "day and as much as we like playing with these tools we have to produce something for them that shows our boss that",
    "start": "188000",
    "end": "193200"
  },
  {
    "text": "there's a reason we hid for three months and rewrote the entire system to use netti and not just because we heard",
    "start": "193200",
    "end": "199280"
  },
  {
    "text": "netti was cool at a conference and so I'm not just going to tell you netti is cool I have my issues with nety as well",
    "start": "199280",
    "end": "205200"
  },
  {
    "text": "but it's better than doing raw nio um but what I am going to show you is that there is benefit to doing it there are",
    "start": "205200",
    "end": "210640"
  },
  {
    "text": "things that are up and down about netti but in on a whole you get a big performance gain so what do I mean with with this",
    "start": "210640",
    "end": "217720"
  },
  {
    "start": "216000",
    "end": "216000"
  },
  {
    "text": "you know we are talking about IO by which I mean input output is anybody not familiar with what I meant by IO do I",
    "start": "217720",
    "end": "223239"
  },
  {
    "text": "have to go back and explain computers take things in they spit things out um they do you know mutate State and have",
    "start": "223239",
    "end": "230959"
  },
  {
    "text": "side effects it's just the way it is we're going to focus on networking technically a lot of these interfaces",
    "start": "230959",
    "end": "237079"
  },
  {
    "text": "you can use them with files or something else like the the nio stuff has file iterators we're dealing with networks",
    "start": "237079",
    "end": "243599"
  },
  {
    "text": "under the covers in many operating systems a network device is really just a file descriptor and that in a lot of",
    "start": "243599",
    "end": "249680"
  },
  {
    "text": "ways you interact with the kernel it doesn't care whether it's a network or a file or something",
    "start": "249680",
    "end": "254840"
  },
  {
    "text": "else so asynchronous is not the same as non-blocking but they're often lumped together because asynchronous describes",
    "start": "254840",
    "end": "261040"
  },
  {
    "text": "a way of computing on top of non-blocking IO I tend to think of these",
    "start": "261040",
    "end": "266280"
  },
  {
    "text": "as a little mini stack they're two concepts that fit together nicely as synchronous is a way of making non-blocking IO work well for you",
    "start": "266280",
    "end": "272479"
  },
  {
    "text": "because there are some versions of non-blocking IO out there that don't have the the asynchronous the way that",
    "start": "272479",
    "end": "279039"
  },
  {
    "text": "they're non-blocking is they throw an exception that says would block if they were going to block and expect you to do",
    "start": "279039",
    "end": "285120"
  },
  {
    "text": "something another way in the last few years we've all gotten used to asynchronous being hand inand because most Frameworks have realized that",
    "start": "285120",
    "end": "291680"
  },
  {
    "text": "throwing a it would block if you did this exception isn't very productive so we have a couple of",
    "start": "291680",
    "end": "297880"
  },
  {
    "text": "problems with blocking um when we have an A blocking IO operation everything in that thread really halts and waits so if",
    "start": "297880",
    "end": "304960"
  },
  {
    "text": "I go do a big piece of computation or I'm reading off of a disc so imagine you're on ec2 which happens a lot these",
    "start": "304960",
    "end": "311680"
  },
  {
    "text": "days you know EBS volumes are a network device and they're probably a dis that",
    "start": "311680",
    "end": "317280"
  },
  {
    "text": "five or six other people have that spindle and so you're waiting for that spindle to go to your devices you're waiting for it to spool over the network",
    "start": "317280",
    "end": "323759"
  },
  {
    "text": "and while you're waiting for that read off of file system that threat of execution is basically doing nothing it's sitting there spinning saying are",
    "start": "323759",
    "end": "329840"
  },
  {
    "text": "you ready yet and that's really it uh internally you've got a big loop that's saying Are We There Yet um you know you",
    "start": "329840",
    "end": "338000"
  },
  {
    "text": "if you know youve remember being kids trips you didn't want to go on you probably figured out early if you bugged your parents with Are We There Yet",
    "start": "338000",
    "end": "343160"
  },
  {
    "text": "they'd threaten to turn around you know in some cases that can be to your advantage we don't want that with IO",
    "start": "343160",
    "end": "349199"
  },
  {
    "text": "because it's a waste of resources and a lot of us have also got to the point where we're not a lot of us aren't using physical Hardware anymore and it's",
    "start": "349199",
    "end": "355520"
  },
  {
    "text": "easier in some ways to have this happen and ignore it because it's so easy to get another machine but at the end of",
    "start": "355520",
    "end": "361600"
  },
  {
    "text": "the month I've had places you know you hear the boss coming around asking why the ec2 bill is so absurdly large and",
    "start": "361600",
    "end": "368400"
  },
  {
    "text": "how does he revoke your access to spit up new resources we need to deal with this we need to handle this idea so",
    "start": "368400",
    "end": "373800"
  },
  {
    "text": "idleness is essentially happening because the thread is waiting for the iio to complete and it's doing nothing else at the time so there's really no",
    "start": "373800",
    "end": "381319"
  },
  {
    "text": "need for that thread to be sitting there doing nothing because the colonel is the one that's really handling the is this",
    "start": "381319",
    "end": "387720"
  },
  {
    "text": "IO done yet or not so this limits our ability to scale because we're just sitting there doing",
    "start": "387720",
    "end": "394560"
  },
  {
    "text": "nothing um it's the the the equivalent of I'm not screwing around I'm waiting for my code to compile so non-blocking",
    "start": "394560",
    "end": "401919"
  },
  {
    "text": "IO gives us potentially a solution which is we can avoid blocking on each operation we can find ways to work with",
    "start": "401919",
    "end": "408240"
  },
  {
    "text": "the kernel to manage multiple blocking resources in groups so we're still going",
    "start": "408240",
    "end": "413720"
  },
  {
    "text": "to have to poll somewhere but in most modern operating systems there are a couple of things like select an eole AQ",
    "start": "413720",
    "end": "419720"
  },
  {
    "text": "on FreeBSD that understand that you don't want it event Loop running for each operation you're doing but instead you",
    "start": "419720",
    "end": "425680"
  },
  {
    "text": "can ask the colonel of you know what you're the person who's ultimately deciding whether this resource is available or not would you be so kind as",
    "start": "425680",
    "end": "432199"
  },
  {
    "text": "to just tell me when this group of files have something happened to them within a set of what I care about so we can free up threads that are",
    "start": "432199",
    "end": "439319"
  },
  {
    "text": "no longer blocked waiting while they're doing the io we can just do something else with that thread we can execute",
    "start": "439319",
    "end": "444440"
  },
  {
    "text": "some other callback or some other piece of code and there's another event Loop running that's telling us when whatever",
    "start": "444440",
    "end": "450000"
  },
  {
    "text": "we're waiting for happens and that's really how nodejs works nodejs is a single event thread there's no threading",
    "start": "450000",
    "end": "456639"
  },
  {
    "text": "it's just a big event Loop and it's firing off callbacks when something happens on a piece of",
    "start": "456639",
    "end": "463280"
  },
  {
    "text": "information that's registered in the event Loop is interesting it's a single thread we have the benefit of threading",
    "start": "463280",
    "end": "469000"
  },
  {
    "text": "which means if we smart about it we can make this happen at scale we can use multiple cores and all these other",
    "start": "469000",
    "end": "474960"
  },
  {
    "text": "things so where asyncronous comes in is if we're no longer blocking and we're reusing our threads we have to figure out how to",
    "start": "474960",
    "end": "481919"
  },
  {
    "start": "476000",
    "end": "476000"
  },
  {
    "text": "handle completion events and call backs are a nice easy way to do that so ASN techniques they give us that",
    "start": "481919",
    "end": "489240"
  },
  {
    "text": "solution um it's really the equivalent of you know you've been to different restaurants you I've seen different fast",
    "start": "489240",
    "end": "494400"
  },
  {
    "text": "food restaurants where some of them for whatever reason you order your food and it's going to take them five minutes and they make you stand there and the cashier isn't serving anyone else while",
    "start": "494400",
    "end": "501879"
  },
  {
    "text": "they're waiting and then some give you a number and you step to the side and they call you when you're ready that's really the asynchronous I can serve five other",
    "start": "501879",
    "end": "508280"
  },
  {
    "text": "customers we've got people in the kitchen whose entire job is to cook the food they will let us know when your",
    "start": "508280",
    "end": "513760"
  },
  {
    "text": "order is ready and then we will call you as opposed to me sitting there at the register waiting for your food to come up it makes no",
    "start": "513760",
    "end": "521200"
  },
  {
    "text": "sense uh the synchronous and blocking IO really forces us to do certain things that we may not want to do and that's",
    "start": "521200",
    "end": "528320"
  },
  {
    "start": "522000",
    "end": "522000"
  },
  {
    "text": "things like in a server we're more or less at a one: one ratio of client",
    "start": "528320",
    "end": "533959"
  },
  {
    "text": "connections to threads that we're running it's worse if any of you dealt with the really Apache 1X and the",
    "start": "533959",
    "end": "539839"
  },
  {
    "text": "prefork model in Apache 2 is the similar thing where it's individual processes you had one parent that was responsible",
    "start": "539839",
    "end": "545560"
  },
  {
    "text": "for accepting all connections and then queuing them until a child was was available and a child process could only",
    "start": "545560",
    "end": "553040"
  },
  {
    "text": "handle one thing at a time that's an exploded way of thinking of what's really happening we're just doing it with threads we're doing it with",
    "start": "553040",
    "end": "558360"
  },
  {
    "text": "lightweight processes instead of actual processes there's still overhead there's a heap size that comes with all these things threads have overhead despite the",
    "start": "558360",
    "end": "566120"
  },
  {
    "text": "argument I got in in an interview once with someone who thought you could spin up a million threads with no uh overhead",
    "start": "566120",
    "end": "572680"
  },
  {
    "text": "there is overhead threads on the client side you know we can end up with a lot of other problems and these come and go uh different",
    "start": "572680",
    "end": "579560"
  },
  {
    "text": "people have different opinions but you can end up with connection pools that are bigger than they need to be because",
    "start": "579560",
    "end": "584920"
  },
  {
    "text": "while you're waiting on the server to respond to a request or while you're waiting on a connection to be available for",
    "start": "584920",
    "end": "590600"
  },
  {
    "text": "writing you're sitting there blocking which means you have to have more connections ready to go at any time",
    "start": "590600",
    "end": "596920"
  },
  {
    "text": "because you've got this one: one ratio going on on the the server in many cases clients are something sitting in a",
    "start": "596920",
    "end": "602360"
  },
  {
    "text": "server in a web application you'll probably have an asynchronous or a synchronous server with a client to a",
    "start": "602360",
    "end": "608519"
  },
  {
    "text": "database or something else within it which means both rules are going to apply if we go asynchronous we can",
    "start": "608519",
    "end": "614160"
  },
  {
    "text": "change this up though with servers we can have many client connections to one execution thread as a ratio it can",
    "start": "614160",
    "end": "620160"
  },
  {
    "text": "happen it's possible um and this gives us the ability to scale up we can have a thread waiting for an IO response not",
    "start": "620160",
    "end": "626959"
  },
  {
    "text": "need to block on it but give some other call back a chance to do work an operation such as right can be",
    "start": "626959",
    "end": "633839"
  },
  {
    "text": "queued up until something is ready so we don't have to block until the right happens instead we can say look I",
    "start": "633839",
    "end": "639079"
  },
  {
    "text": "realize all the connections are aail are not available right now but I need you to write this to the database and I'll",
    "start": "639079",
    "end": "644600"
  },
  {
    "text": "call you back when it's ready to happen you go do something else in the meantime so basically go to sleep and let somebody else use this threat um this of",
    "start": "644600",
    "end": "652320"
  },
  {
    "text": "course means we have to know how to dispatch back to people we have to good call that code we have to figure out when a a message comes back from from",
    "start": "652320",
    "end": "659120"
  },
  {
    "text": "the server that we're connected to who the hell it goes to and what call back to open up and run um we also have to",
    "start": "659120",
    "end": "665200"
  },
  {
    "text": "understand concurrency because otherwise you you get all sorts of weird race conditions and fun things because you're",
    "start": "665200",
    "end": "670760"
  },
  {
    "text": "sharing State across threads uh the you know one of the benefits is potentially you may not have",
    "start": "670760",
    "end": "676680"
  },
  {
    "text": "the same thread that ran before run your call back we also can't really block",
    "start": "676680",
    "end": "681920"
  },
  {
    "text": "within those threads because this is a framework built around the idea of you're not blocking anytime you block",
    "start": "681920",
    "end": "687880"
  },
  {
    "text": "because we're trying to have many Cent connections to one threat if you're blocking you're slowing everyone down and you can't process as much anymore",
    "start": "687880",
    "end": "694200"
  },
  {
    "text": "and we can reduce our pool size on clients and we can re leverage these resources to reuse them so a little bit",
    "start": "694200",
    "end": "701040"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "about nio U most people have heard of it I hadn't played with it much until this year uh it's short for new IO it was",
    "start": "701040",
    "end": "707120"
  },
  {
    "text": "actually introduced in Java 14 and really what It produced is a low-level IO API instead of the old IO which is",
    "start": "707120",
    "end": "715079"
  },
  {
    "text": "very high level blocking it's sort of the sock interface there's a couple of cool ideas in here that we just within a",
    "start": "715079",
    "end": "721279"
  },
  {
    "text": "25 minute 30 minute time window we don't really have the time to dig in uh this",
    "start": "721279",
    "end": "726560"
  },
  {
    "text": "is an article I highly recommend uh apparently this guy works with Jamie Allen now at Chariot um but he wrote a",
    "start": "726560",
    "end": "731959"
  },
  {
    "text": "great article on what bite buffers are which are one of the better things introduced in nio which is this idea of",
    "start": "731959",
    "end": "737440"
  },
  {
    "text": "it's zeroc copy holders for things like arrays and other data so instead of you having to",
    "start": "737440",
    "end": "742600"
  },
  {
    "text": "do system array copy you can do things like slicing out a piece of a buffer of",
    "start": "742600",
    "end": "748360"
  },
  {
    "text": "bites and a of bites from a bite buffer but it's still pointing to the same memory location as the original bite",
    "start": "748360",
    "end": "754079"
  },
  {
    "text": "buffer and not copying them around and this gives you a lot of efficiency you even have the ability to allocate",
    "start": "754079",
    "end": "759360"
  },
  {
    "text": "directly on this on a heap with no GC of these although that tends to be dangerous and you have lots of memory",
    "start": "759360",
    "end": "765120"
  },
  {
    "text": "leaks seem to occur with those because if you don't free them up properly just like in C you end up with memory leaks",
    "start": "765120",
    "end": "771000"
  },
  {
    "text": "and odd behavior um so for working with a network we have to manually work with a",
    "start": "771000",
    "end": "777519"
  },
  {
    "text": "selector and request a window to read and write that calls back when ready and there's a couple of core units of work",
    "start": "777519",
    "end": "783839"
  },
  {
    "text": "we have a buffer a channel and a selector the buffer are basically contiguous memory slots they're they're",
    "start": "783839",
    "end": "790160"
  },
  {
    "text": "able to hold information whatever that information represents and they typically offer some kind of a data",
    "start": "790160",
    "end": "795320"
  },
  {
    "text": "transfer operation shift this to this other buffer shift this to this file descriptor on disk whatever you need to",
    "start": "795320",
    "end": "801040"
  },
  {
    "text": "do channels are really bulk wrappers to this they're there for us to do bulk operations like reading and writing to a",
    "start": "801040",
    "end": "807320"
  },
  {
    "text": "file descriptor be it a network socket whatever else the big piece is this part where we",
    "start": "807320",
    "end": "813360"
  },
  {
    "text": "have to figure out what's going on and instead of us having to pull on a channel to see if it's available to read or available to write we give",
    "start": "813360",
    "end": "820199"
  },
  {
    "text": "information about each channel to a selector and we write an event loop around that which is monitoring for",
    "start": "820199",
    "end": "826079"
  },
  {
    "text": "whether anything's available on the channel instance so really you register interest I would like to read I would like to write and that Loop will come",
    "start": "826079",
    "end": "832480"
  },
  {
    "text": "back and give you information when it's ready so you can maybe have a hundred",
    "start": "832480",
    "end": "837759"
  },
  {
    "text": "channels but there's one thread which is handling the is things available and dispatching as things come up so we can",
    "start": "837759",
    "end": "844600"
  },
  {
    "text": "relocate the task of checking this IO off and it makes a big difference and you can do all sorts of different tricks",
    "start": "844600",
    "end": "850120"
  },
  {
    "text": "there's a really good article that I don't have the link up from Havoc Pennington on his blog I think it's blog. meter.com he did a great article a",
    "start": "850120",
    "end": "856800"
  },
  {
    "text": "few weeks ago about this kind of thing and talks about even techniques for making sure that you use all the cores",
    "start": "856800",
    "end": "863160"
  },
  {
    "text": "so that you're minimizing your threads so that you've got event Loops maybe on each core and how this compares to stuff like node",
    "start": "863160",
    "end": "869839"
  },
  {
    "text": "the reality is I've tried for three days to come up with um nio example code that isn't going to be a sinkhole you've all",
    "start": "869839",
    "end": "876480"
  },
  {
    "start": "871000",
    "end": "871000"
  },
  {
    "text": "seen these presentations where you show code really early on and everyone's get scared and you either take out your laptops and start doing something else",
    "start": "876480",
    "end": "882560"
  },
  {
    "text": "or you just get up and leave I don't want to do that I think it's better to describe the concept of why nio is",
    "start": "882560",
    "end": "887759"
  },
  {
    "text": "difficult show where netti improves it and talk about the conceptuals than to try to show you a very complicated piece",
    "start": "887759",
    "end": "893160"
  },
  {
    "text": "of code that's kind of insane they went a little too level with NI too low level with nio which is why why things like NY",
    "start": "893160",
    "end": "900600"
  },
  {
    "text": "exist so here's what you really need to know um I mentioned you register interest with a selector I'm interested in Reading I'm interested in writing",
    "start": "900600",
    "end": "906759"
  },
  {
    "text": "whatever you need to do but it's non-blocking which means you have to basically give it a call back and said let me know when you're ready to let me",
    "start": "906759",
    "end": "913160"
  },
  {
    "text": "do what I want um you we write a loop that looks for these notification events",
    "start": "913160",
    "end": "918639"
  },
  {
    "text": "and we have to dispatch incoming events so if we want to read or whatever else if you want to write this is where it",
    "start": "918639",
    "end": "925000"
  },
  {
    "text": "gets nasty I think you have to tell a selector that you're interested in",
    "start": "925000",
    "end": "930399"
  },
  {
    "text": "writing and eventually when the channel isn't busy reading it can switch into a",
    "start": "930399",
    "end": "935759"
  },
  {
    "text": "write mode and call you back and say hey I've got some availability to write you then need to make sure you",
    "start": "935759",
    "end": "941920"
  },
  {
    "text": "remove the status that you're interested in writing because otherwise you'll keep getting notified that it's available for writing you need to dispatch a hey I'm",
    "start": "941920",
    "end": "949040"
  },
  {
    "text": "ready to write call to whoever that call back is and then you need to do your right so it gets very complicated it's",
    "start": "949040",
    "end": "954399"
  },
  {
    "text": "also an area where you can very easily get into trouble if you miss a message or miss something and rinse and repeat as desired so",
    "start": "954399",
    "end": "961199"
  },
  {
    "text": "obviously the first thing that seems to have happened with nio is everybody built Frameworks around it so there was a pachy Mina or Mina Netty grew out of",
    "start": "961199",
    "end": "968480"
  },
  {
    "text": "that you know all of these things are meant to give you this functionality and this performance without all the complication um I tend to think Dy went",
    "start": "968480",
    "end": "976040"
  },
  {
    "text": "a little overboard because it is a Java framework so in Scola I feel like I'm doing a little too much Java to work with it but this really simplifies nio",
    "start": "976040",
    "end": "983839"
  },
  {
    "start": "977000",
    "end": "977000"
  },
  {
    "text": "they actually also have a package called oio which is how they refer to the old IO you can use blocking sockets within",
    "start": "983839",
    "end": "989120"
  },
  {
    "text": "Dy if you need to but the framework design is very oriented towards assuming you're doing",
    "start": "989120",
    "end": "994560"
  },
  {
    "text": "async so it's just really a wrapper and it hides all the selector stuff away you no longer have to say are you available",
    "start": "994560",
    "end": "1000959"
  },
  {
    "text": "to write instead what you really just say is here's a buffer this is what I'd like to write and then it takes care of",
    "start": "1000959",
    "end": "1007079"
  },
  {
    "text": "when writing is available it puts it on the network for you which makes more sense um really it's built around a",
    "start": "1007079",
    "end": "1013000"
  },
  {
    "text": "filter pipeline so there's a pattern in netti that you can register on both the input and output side",
    "start": "1013000",
    "end": "1019160"
  },
  {
    "text": "to have filters that can transform data check data validate data and dispatch it where it needs to be as it goes through",
    "start": "1019160",
    "end": "1025280"
  },
  {
    "text": "each end it's very nice and composable although I'd love to have a better Scala API for it um they also have a system",
    "start": "1025280",
    "end": "1031600"
  },
  {
    "text": "called Channel buffers which seem to be a little up and down a lot of people have had issues with them part of the idea of Channel buffers is to not rely",
    "start": "1031600",
    "end": "1038038"
  },
  {
    "text": "on the uh bite buffers that nio introduced because people might still",
    "start": "1038039",
    "end": "1043280"
  },
  {
    "text": "want to work with bite arrays or anything else what they don't want to do in netti is if you give them a bite",
    "start": "1043280",
    "end": "1048480"
  },
  {
    "text": "array to then be forced to system array copy that all the way through the pipeline and so Channel buffers take a",
    "start": "1048480",
    "end": "1054520"
  },
  {
    "text": "lot of the concepts from bite buffers and let you use multiple things not just you're forced to start with a",
    "start": "1054520",
    "end": "1060960"
  },
  {
    "text": "bite buffer if you don't want memory copying and copy these things through and so you can have multiple composite buffers and everything else and we avoid",
    "start": "1060960",
    "end": "1067840"
  },
  {
    "text": "memory copying uh there is direct memory allocation from what I'm told I've seen heard rumors and seen bug reports of",
    "start": "1067840",
    "end": "1074039"
  },
  {
    "text": "lots of memory leakage which seems to be what happens when you start playing with direct memory in the jvm",
    "start": "1074039",
    "end": "1080400"
  },
  {
    "text": "M so here is quickly I mean this is of course because we're linking in with",
    "start": "1081200",
    "end": "1086400"
  },
  {
    "text": "Java um this is an example from Hammer Smith of setting up in netti so really",
    "start": "1086400",
    "end": "1092600"
  },
  {
    "text": "because I'm not going to walk line by line through the code but the general idea is we're setting up a pipeline so",
    "start": "1092600",
    "end": "1099280"
  },
  {
    "text": "really we give it a thread Coop executor so that it has the ability to kick things around as it needs to um and we",
    "start": "1099280",
    "end": "1104320"
  },
  {
    "text": "add in this message decoder which we're going to talk about when we talk about the problems here",
    "start": "1104320",
    "end": "1109480"
  },
  {
    "text": "we connect most importantly this is all we have to do to do writing in netti once we have a channel it's a big",
    "start": "1109480",
    "end": "1114840"
  },
  {
    "text": "improvement over what the ni equiv was would basically say I'd like to write now let me know when I'm ready and go",
    "start": "1114840",
    "end": "1120480"
  },
  {
    "text": "through five or six steps so stupid pet tricks um very quickly if you've never",
    "start": "1120480",
    "end": "1127280"
  },
  {
    "start": "1127000",
    "end": "1127000"
  },
  {
    "text": "heard of a McGuffin it's a Hitchcock was fond of them it's the idea of a plot device to carry something through so",
    "start": "1127280",
    "end": "1132360"
  },
  {
    "text": "obviously we're talking about a driver I've written because it's a good way at looking at what these things are um",
    "start": "1132360",
    "end": "1138559"
  },
  {
    "text": "we're going to talk about a couple things in Hammer Smith basically decoding and dispatching inbound",
    "start": "1138559",
    "end": "1144440"
  },
  {
    "text": "messages so you may have a thousand people reading from one socket though that's probably a high ratio so you have",
    "start": "1144440",
    "end": "1150880"
  },
  {
    "text": "to figure out of the thousand people who was this message destined for does it matter is it a reply to another message",
    "start": "1150880",
    "end": "1156760"
  },
  {
    "text": "they sent and dispatched it adequately I'm handling errors and exceptions across threads Etc follow-up operations",
    "start": "1156760",
    "end": "1164000"
  },
  {
    "text": "that need a same connection context and working with multi iterations we're going to talk a little about about a bit",
    "start": "1164000",
    "end": "1170600"
  },
  {
    "text": "it we're going to talk a little bit about iterates which is apparently a tongue twister um hopefully in an easy",
    "start": "1170600",
    "end": "1177200"
  },
  {
    "text": "way is how do we handle database cursers so the first problem I ran into is really packets aren't bites you know",
    "start": "1177200",
    "end": "1183480"
  },
  {
    "start": "1181000",
    "end": "1181000"
  },
  {
    "text": "in every networking program we have defined some kind of application Level",
    "start": "1183480",
    "end": "1188640"
  },
  {
    "text": "API which is how we think of the world the kernel Java Etc doesn't understand",
    "start": "1188640",
    "end": "1195919"
  },
  {
    "text": "or care to them it's just an array of bites which means it's also difficult",
    "start": "1195919",
    "end": "1201720"
  },
  {
    "text": "when we're doing asynchronous reads because we just get bites and we need to",
    "start": "1201720",
    "end": "1206799"
  },
  {
    "text": "figure out which parts of those bites are relevant to us so if I have let's say a 100 clients using a connection I",
    "start": "1206799",
    "end": "1212880"
  },
  {
    "text": "have to figure out messages if I get a thousand messages well which of these goes to what person which of these are",
    "start": "1212880",
    "end": "1218320"
  },
  {
    "text": "replies which of these are generic things um and we have to figure out where they go so the challenge is",
    "start": "1218320",
    "end": "1223400"
  },
  {
    "text": "separating them out and sending them to the right place so it's really the law of the meter in nio you're ort of force",
    "start": "1223400",
    "end": "1228600"
  },
  {
    "text": "to deal with that in place of knowing just enough about what's happening to deal with it so essentially you've said",
    "start": "1228600",
    "end": "1234480"
  },
  {
    "text": "I'd like to read now and you've got to break this out it can get very complex you're sort of trying not to go into the office fridge and eat someone else's",
    "start": "1234480",
    "end": "1241039"
  },
  {
    "text": "lunch so ni leaves us on her own um netty's pipeline actually makes that really easy because with nety pipeline",
    "start": "1241039",
    "end": "1246720"
  },
  {
    "text": "instead we register something that understands how to decode our protocol it picks out the individual messages",
    "start": "1246720",
    "end": "1252919"
  },
  {
    "text": "from the bite stream and then uses the rest of the pipeline to dispatch those as we need them which is much saner way",
    "start": "1252919",
    "end": "1258280"
  },
  {
    "text": "of dealing with this um so this is an example of how we decode the messages which is among other things",
    "start": "1258280",
    "end": "1264640"
  },
  {
    "start": "1262000",
    "end": "1262000"
  },
  {
    "text": "it's a length field-based frame decoder because messages have a very specific length the first four bytes of",
    "start": "1264640",
    "end": "1270320"
  },
  {
    "text": "a protocol message is what the length of the rest of the messages and",
    "start": "1270320",
    "end": "1276080"
  },
  {
    "text": "so netti provides a basic context for handling that of Now by passing the arguments in the Constructor of how big",
    "start": "1276080",
    "end": "1282360"
  },
  {
    "text": "the message can be possibly total what the offset of the length header is and",
    "start": "1282360",
    "end": "1287440"
  },
  {
    "text": "then where to because netti by default assumes that your length in does not include the length in the",
    "start": "1287440",
    "end": "1294039"
  },
  {
    "text": "length we include the length in the length which is what the minus four is which is actually saying netti considers",
    "start": "1294039",
    "end": "1301320"
  },
  {
    "text": "zero to be after the length and so we have to say note backtrack and read the whole thing together and so now we",
    "start": "1301320",
    "end": "1307279"
  },
  {
    "text": "actually get a bite stream that's an A A exact message as long as a well-formed mango message came over the wire and we",
    "start": "1307279",
    "end": "1313480"
  },
  {
    "text": "can break that down essentially into our class and I have a series of classes",
    "start": "1313480",
    "end": "1318960"
  },
  {
    "text": "that know how to then turn that message into some valid representation of a ",
    "start": "1318960",
    "end": "1324320"
  },
  {
    "text": "protocol and so this is just stuffed into the pipeline and everything that comes in to read from that socket nety",
    "start": "1324320",
    "end": "1331480"
  },
  {
    "text": "will decode into a message and then there's a lookup table that says essentially these are all looking for replies from the server and each reply",
    "start": "1331480",
    "end": "1338279"
  },
  {
    "text": "has the ID of the message that was sent and there's a lookup table that says if this ID should invoke this call back and",
    "start": "1338279",
    "end": "1345360"
  },
  {
    "text": "everything gets where it needs to be and this was just the tail end of that",
    "start": "1345360",
    "end": "1350840"
  },
  {
    "text": "um so really the tail end the part my channel Handler which is the part of Netty that's responsible for responding",
    "start": "1350840",
    "end": "1357480"
  },
  {
    "start": "1353000",
    "end": "1353000"
  },
  {
    "text": "to messages that come in this is invoked after that pipeline so that reply message decoder goes before message",
    "start": "1357480",
    "end": "1364679"
  },
  {
    "text": "received so instead of in message received get message gives you an object",
    "start": "1364679",
    "end": "1370600"
  },
  {
    "text": "but in this case unless something's really broken it should already be a  message because it was either decoded or an exception was thrown and",
    "start": "1370600",
    "end": "1376720"
  },
  {
    "text": "that packet was discarded I can cast that as a message and then do a case statement a match to is",
    "start": "1376720",
    "end": "1384000"
  },
  {
    "text": "it what kind of a message is it and how do I respond to it and I didn't think you'd want to see like 1,200 lines of",
    "start": "1384000",
    "end": "1390039"
  },
  {
    "text": "Scola cases I can pull those up if you prefer but the general idea is take you",
    "start": "1390039",
    "end": "1395400"
  },
  {
    "text": "know this is a huge advantage of something like nety is you have to understand how to slice out the pieces of the message that you're looking for",
    "start": "1395400",
    "end": "1401679"
  },
  {
    "text": "and send them to the right place and deal with that efficiently and not accidentally overread the first six btes",
    "start": "1401679",
    "end": "1407440"
  },
  {
    "text": "of the next message which makes the next message impossible to read because you've sucked six bytes off the the uh",
    "start": "1407440",
    "end": "1413919"
  },
  {
    "text": "wire so handling errors we get really used to I think using throw and catch",
    "start": "1413919",
    "end": "1419440"
  },
  {
    "text": "try catch Etc throwing exceptions but we never know what thread we might be executing on so that thread might be",
    "start": "1419440",
    "end": "1425760"
  },
  {
    "text": "isolated from our main execution area and so if an exception is thrown it may just disappear or it may you know Bubble",
    "start": "1425760",
    "end": "1432240"
  },
  {
    "text": "Up the stack and cause other unexpected errors and so we need a way of passing information about problems",
    "start": "1432240",
    "end": "1438919"
  },
  {
    "text": "Scola obviously has either and either has two possible States left and",
    "start": "1438919",
    "end": "1445400"
  },
  {
    "text": "right it's really a monad and it's representing failure and success by",
    "start": "1445400",
    "end": "1450480"
  },
  {
    "text": "convention the left hand side is typically representing an error and the right hand side is representing success",
    "start": "1450480",
    "end": "1455919"
  },
  {
    "text": "in Scola um node has a similar system if you've ever written nodejs every call",
    "start": "1455919",
    "end": "1461480"
  },
  {
    "text": "back method typically by convention gets both a failure and a success and you test which one is defined this is better",
    "start": "1461480",
    "end": "1467559"
  },
  {
    "text": "cuz it's one composed thing that can be either or it cannot be both at once there's no real different way to",
    "start": "1467559",
    "end": "1474240"
  },
  {
    "text": "handle this in nety versus nio it's just a conceptual either is a great thing because you can you know you can compose",
    "start": "1474240",
    "end": "1481399"
  },
  {
    "text": "a throwable or an exception you don't have to throw it you can wrap it in this thing that indicates success or failure",
    "start": "1481399",
    "end": "1487960"
  },
  {
    "text": "and pass that up to your users um and there are implicit tricks for lazy people who want to write a success block",
    "start": "1487960",
    "end": "1493880"
  },
  {
    "text": "and I'm going to skip through these a little bit to make sure we cover the other ones but I'm happy to come back to them afterwards we have a little extra time I think at the end um but the",
    "start": "1493880",
    "end": "1500480"
  },
  {
    "text": "general idea here is these are a bunch of structures that are used within this driver that ultimately when you're",
    "start": "1500480",
    "end": "1506720"
  },
  {
    "text": "writing a request future and without meaning to I ended up implementing Futures and then I realized it was a future and renamed the class and",
    "start": "1506720",
    "end": "1512840"
  },
  {
    "text": "ultimately it's going to be using AA Futures but the general idea is you give it a body and the body is supposed to",
    "start": "1512840",
    "end": "1519000"
  },
  {
    "text": "have a left which is U oh sorry in this case it's oh the way the class is but",
    "start": "1519000",
    "end": "1525159"
  },
  {
    "text": "essentially a body is supposed to be an either of throwable or a success",
    "start": "1525159",
    "end": "1530360"
  },
  {
    "text": "condition and a Handler looks like this so really we're expecting to get back an",
    "start": "1530360",
    "end": "1535520"
  },
  {
    "text": "either of throwable any ref and you deal with a result you deal with a uh either by doing case right is Success left is",
    "start": "1535520",
    "end": "1542720"
  },
  {
    "text": "failure you could have a global event handler or something else that handles errors if you needed to um and if you",
    "start": "1542720",
    "end": "1549559"
  },
  {
    "text": "wanted to ignore errors which many people do you can make an implicit that sort of pretends as if if if they don't",
    "start": "1549559",
    "end": "1555520"
  },
  {
    "text": "specify the either it just takes this success and you can globally dispatch your error another one that I ran into was",
    "start": "1555520",
    "end": "1562640"
  },
  {
    "text": "same connection follow-ups so a lot you know a lot of davises of context there's something that has to happen on the same",
    "start": "1562640",
    "end": "1567760"
  },
  {
    "start": "1563000",
    "end": "1563000"
  },
  {
    "text": "connection as your right you can get follow-up information MySQL is last insert ID where you know MySQL can",
    "start": "1567760",
    "end": "1574279"
  },
  {
    "text": "autoincrement an ID and you want to find out what that ID was but that has to be called immediately after the right on the same connection as the right or you",
    "start": "1574279",
    "end": "1580640"
  },
  {
    "text": "don't get the right info has something similar if you want to control right concern basically the consistency",
    "start": "1580640",
    "end": "1587320"
  },
  {
    "text": "if you want to get information about the success or failure writes by default or asynchronous you have to make",
    "start": "1587320",
    "end": "1592679"
  },
  {
    "text": "another call it has to be on the same connection immediately after the right so how do you deal with that in a",
    "start": "1592679",
    "end": "1598720"
  },
  {
    "text": "synchronous framework it's easy you get a PO connection out of the pool you hold on to it don't let anyone else else touch it problem solved you know no one",
    "start": "1598720",
    "end": "1605320"
  },
  {
    "text": "else has written to that connection in async it turned out that really the reason was Ballot Box",
    "start": "1605320",
    "end": "1611720"
  },
  {
    "text": "stuffing is what I like to think of we're reversing the issue of once it gets to the jvm the network the OS they",
    "start": "1611720",
    "end": "1618960"
  },
  {
    "text": "don't know it's anything but a bunch of bittes but if you give it one buffer of bites and say this has to go on the",
    "start": "1618960",
    "end": "1625159"
  },
  {
    "text": "network it will guarantee that that whole array gets on the network in order because it's important so the trick is",
    "start": "1625159",
    "end": "1631559"
  },
  {
    "text": "to just put both protocol messages together in one right operation and the OS will make sure they",
    "start": "1631559",
    "end": "1637640"
  },
  {
    "text": "get where they need to be which means on the connection it will get a right and immediately a get last error or a last insert ID and it's going to get where it",
    "start": "1637640",
    "end": "1643640"
  },
  {
    "text": "needs to be um and there's an example example of it here which I'm happy to",
    "start": "1643640",
    "end": "1648880"
  },
  {
    "text": "show to people afterwards if they're interested in but the general idea is",
    "start": "1648880",
    "end": "1653960"
  },
  {
    "text": "just if you want to do the Right add that into the Stream NY makes that easy",
    "start": "1653960",
    "end": "1659840"
  },
  {
    "text": "so the last one and this is iterates uh everybody hopefully has heard of iterates a little bit the name floats",
    "start": "1659840",
    "end": "1665039"
  },
  {
    "start": "1661000",
    "end": "1661000"
  },
  {
    "text": "around quite a bit Scola Zed has them uh Jos seret wrote a really good article on them",
    "start": "1665039",
    "end": "1670200"
  },
  {
    "text": "recently so in typical iteration we're dealing with basically a dual State mon",
    "start": "1670200",
    "end": "1675279"
  },
  {
    "text": "ad and this is an iterator of a that is two calls those calls are has next which returns a Boolean do you have more",
    "start": "1675279",
    "end": "1681960"
  },
  {
    "text": "information and there's a call called Next which says give me another piece and you expect to get an element a being",
    "start": "1681960",
    "end": "1687840"
  },
  {
    "text": "the type of whatever you're looking for um in a simple form an iterator is just pre-populated with its buffer of items",
    "start": "1687840",
    "end": "1694279"
  },
  {
    "text": "all the possible items it can return are there when it's instantiated if the buffer is not empty",
    "start": "1694279",
    "end": "1700679"
  },
  {
    "text": "has next is true and next will return another element if the buffer is empty iteration halts because has next is FAL",
    "start": "1700679",
    "end": "1707480"
  },
  {
    "text": "false now if you actually look at the scolar doc it turns out that it specifically says the behavior when next",
    "start": "1707480",
    "end": "1712760"
  },
  {
    "text": "is called when has next is false is undefined there's no contract in Scala basically calling ha next when has next",
    "start": "1712760",
    "end": "1719320"
  },
  {
    "text": "is not defined is going to do weird unexpected things uh thankfully like the 4 each expressions and all that use has",
    "start": "1719320",
    "end": "1727039"
  },
  {
    "text": "next to determine if they're going to call next so as long as your iterator is written correctly and doesn't say it has more when it doesn't you're",
    "start": "1727039",
    "end": "1733799"
  },
  {
    "text": "okay in a simple database or a simple construct working over a network a query",
    "start": "1733799",
    "end": "1739799"
  },
  {
    "text": "might just return everything that was the answer to the query and we could instantiate an iterator of database row",
    "start": "1739799",
    "end": "1747399"
  },
  {
    "text": "um this is nice and simple because really we can just construct a cur you know a database row iterator it's got",
    "start": "1747399",
    "end": "1752960"
  },
  {
    "text": "everything it needs it can iterate the same way but of course forcing a client to",
    "start": "1752960",
    "end": "1758360"
  },
  {
    "text": "buffer 10,000 20,000 results is questionable do you have enough memory on the client for the entire result set",
    "start": "1758360",
    "end": "1766120"
  },
  {
    "text": "if we have a lot of async clients we could have a lot of memory in a lot of databases my kill Oracle SQL",
    "start": "1766120",
    "end": "1772039"
  },
  {
    "text": "Server have something called cursors which is buffering the server is using its memory to hold on to these things",
    "start": "1772039",
    "end": "1779200"
  },
  {
    "text": "um so cursor is going to be an initial bat of results so maybe you'll get the first 200 results and it will tell us",
    "start": "1779200",
    "end": "1785720"
  },
  {
    "text": "that there's more on the server that you can get with a batch so in there's a call called get more I mean it's similar in every database get me more",
    "start": "1785720",
    "end": "1793279"
  },
  {
    "text": "and there's going to be additional batches there's not you know there's going to be more batches you keep calling get more when you want want more",
    "start": "1793279",
    "end": "1798640"
  },
  {
    "text": "results and once it's exhausted there's nothing left try doing this without blocking",
    "start": "1798640",
    "end": "1806320"
  },
  {
    "text": "because I did and it was painful because we have three states now in our",
    "start": "1806320",
    "end": "1811440"
  },
  {
    "text": "iteration the typical solution and a synchronous drivers just has next Boolean if the local buffer not empty",
    "start": "1811440",
    "end": "1817640"
  },
  {
    "text": "return or if there's more results on the server next can just if it's not empty",
    "start": "1817640",
    "end": "1823159"
  },
  {
    "text": "return it otherwise go to the server and an intelligent driver might be intelligent prefetching what's going on",
    "start": "1823159",
    "end": "1830480"
  },
  {
    "text": "there asynchronously though that block on get more will kill you um I tried a thread do sleep at one point early on",
    "start": "1830480",
    "end": "1836960"
  },
  {
    "text": "I'm like I'll figure this out later I couldn't figure out why the reply to the get more was never coming in it's because I was sleeping and blocking the",
    "start": "1836960",
    "end": "1842640"
  },
  {
    "text": "thread that was responsible for reading off the socket the reply that I was waiting on um so we're reusing a small pull of",
    "start": "1842640",
    "end": "1848880"
  },
  {
    "text": "threads that won't a block and there may have been heavy drinking involved afterwards and then about halfway home on the train I went",
    "start": "1848880",
    "end": "1855240"
  },
  {
    "text": "oh I was blocking the thread that I was supposed to be reading from so I talked to a couple people including John deos and joset who had suggested iterate e",
    "start": "1855240",
    "end": "1863120"
  },
  {
    "text": "you know I read some H white papers I read some scall e code my head hurt repeatedly uh there may then be more",
    "start": "1863120",
    "end": "1869120"
  },
  {
    "text": "drinking so I wanted to point out that I may be completely wrong on what I explain at ites this is my",
    "start": "1869120",
    "end": "1876360"
  },
  {
    "text": "interpretation the general idea is instead of blocking next we want to introduce a higher order function we",
    "start": "1876360",
    "end": "1882880"
  },
  {
    "text": "pass a function that takes an argument of an iteration State and returns an iteration command based on that state",
    "start": "1882880",
    "end": "1889200"
  },
  {
    "text": "our code is now async and if the response to not quite what I wanted if the",
    "start": "1889200",
    "end": "1894399"
  },
  {
    "text": "response to no more on client server has some is go get more you don't have to block the io because you can pass a copy of your",
    "start": "1894399",
    "end": "1900960"
  },
  {
    "text": "current method with the get more and you'll be called back when there's more and the method will return as if you went to sleep and came back",
    "start": "1900960",
    "end": "1906960"
  },
  {
    "text": "awake so very quickly because we've got about two minutes I think um I don't know how is that accurate to the",
    "start": "1906960",
    "end": "1913120"
  },
  {
    "start": "1910000",
    "end": "1910000"
  },
  {
    "text": "original time or do we have a few minutes after okay okay so very quickly looking",
    "start": "1913120",
    "end": "1919080"
  },
  {
    "text": "at an example of this um I've got two traits iteration State iteration command",
    "start": "1919080",
    "end": "1924360"
  },
  {
    "text": "I've got a entry which represents here's a valid entry this is a proper response to next I had local entries here's an",
    "start": "1924360",
    "end": "1930840"
  },
  {
    "text": "entry do something with it empty which is my indicator of there's nothing left on the client but there's more on the",
    "start": "1930840",
    "end": "1937360"
  },
  {
    "text": "server and end of file which says that both sides are exhausted there's nothing else for me to give to you on the",
    "start": "1937360",
    "end": "1943679"
  },
  {
    "text": "iteration command done means I'm done I don't want to do anything else with this cursor clean it up and shut down next",
    "start": "1943679",
    "end": "1950600"
  },
  {
    "text": "says okay get me another item and here's a copy of my function again a function",
    "start": "1950600",
    "end": "1955760"
  },
  {
    "text": "that expects to take an iteration State and return a command and then next batch which does the same thing it takes the",
    "start": "1955760",
    "end": "1961120"
  },
  {
    "text": "function next batch says okay go to the server get the next batch populate your",
    "start": "1961120",
    "end": "1966240"
  },
  {
    "text": "local buffer and keep iterating me as if there was local buffer uh this is on the on the actual",
    "start": "1966240",
    "end": "1972600"
  },
  {
    "text": "cursor what the next method looks like which is that instead of the next method actually working on the network work it",
    "start": "1972600",
    "end": "1977919"
  },
  {
    "start": "1973000",
    "end": "1973000"
  },
  {
    "text": "returns a bunch of possible iteration states which are fed into your iterate",
    "start": "1977919",
    "end": "1983840"
  },
  {
    "text": "method there's a helper function that I wrote on the object to just make it easier for you to have you know just you",
    "start": "1983880",
    "end": "1989320"
  },
  {
    "start": "1987000",
    "end": "1987000"
  },
  {
    "text": "can Define iterate give it a copy of the cursor give it your command and it will wrap everything automatically so it",
    "start": "1989320",
    "end": "1994639"
  },
  {
    "text": "invokes next when it needs to it invokes next batch um and this is an iteration of a",
    "start": "1994639",
    "end": "1999919"
  },
  {
    "text": "curse and really we're looking here and I don't know if the guys on the other side of the room can see me because I've got a pillar in the way but um really",
    "start": "1999919",
    "end": "2007880"
  },
  {
    "start": "2001000",
    "end": "2001000"
  },
  {
    "text": "here if we get a state of Entry process it if we get a state of empty ask for",
    "start": "2007880",
    "end": "2014279"
  },
  {
    "text": "the next batch and if we get a state of end of file just close it up this is also testing that you can return",
    "start": "2014279",
    "end": "2020399"
  },
  {
    "text": "different commands to States than you expected so if there's more than 100 items it just shuts it",
    "start": "2020399",
    "end": "2027399"
  },
  {
    "text": "down finally um there is in jdk7 I found this on the train up yesterday a new thing",
    "start": "2027399",
    "end": "2033679"
  },
  {
    "start": "2030000",
    "end": "2030000"
  },
  {
    "text": "called either nio2 or AIO depending on who did the write up and it actually has something called asynchronous socket",
    "start": "2033679",
    "end": "2039320"
  },
  {
    "text": "channels which fixes some of the problems with nio being too low level without being as insanely high level as",
    "start": "2039320",
    "end": "2045440"
  },
  {
    "text": "Netty got so what you get is instead something that Maps really nicely to what maybe you might expect from AA",
    "start": "2045440",
    "end": "2051679"
  },
  {
    "text": "which is you don't have to select and poll by hand there's a read and a write method they all take optional timeouts",
    "start": "2051679",
    "end": "2056760"
  },
  {
    "text": "and you have two ways that you can get a response back you can give it a future which most people whove worked with",
    "start": "2056760",
    "end": "2062919"
  },
  {
    "text": "Scola have probably seen in one form or another future is just really a method that will return a result you have the",
    "start": "2062919",
    "end": "2068960"
  },
  {
    "text": "option of blocking on it or you can do it a completion Handler if you look at what a completion Handler is it has two",
    "start": "2068960",
    "end": "2074480"
  },
  {
    "text": "methods on a completion Handler success which returns T which is your success",
    "start": "2074480",
    "end": "2079839"
  },
  {
    "text": "instance and error which Returns the error that occurred so if you can be smart about writing your implicit you",
    "start": "2079839",
    "end": "2085839"
  },
  {
    "text": "could really easily write an implicit that converts an either down to a completion Handler so it could map very",
    "start": "2085839",
    "end": "2091560"
  },
  {
    "text": "nicely um it's unfortunately not really something you can run with I would love to switch Hammersmith to it because",
    "start": "2091560",
    "end": "2096878"
  },
  {
    "text": "because it requires jdk7 and I don't think anyone would be like oh yeah I have this great async",
    "start": "2096879",
    "end": "2102520"
  },
  {
    "text": "driver but you can only run it on Java 7 which no one's really using yet so it's an idea but not quite",
    "start": "2102520",
    "end": "2108880"
  },
  {
    "text": "there um I already did post the slides this morning so if you're interested in digging through the code and all that",
    "start": "2108880",
    "end": "2114440"
  },
  {
    "text": "the code for Hammersmith is up there as well uh and if I haven't confused everyone thoroughly I'm happy to answer",
    "start": "2114440",
    "end": "2120480"
  },
  {
    "text": "some questions so the slides are up um I'll be here for the rest of the day I'll actually be here Saturday and Sunday as",
    "start": "2120480",
    "end": "2126000"
  },
  {
    "text": "well so if you have questions or want to have me walk you through any of the stuff you didn't understand feel free and thank you very",
    "start": "2126000",
    "end": "2131410"
  },
  {
    "text": "[Applause]",
    "start": "2131410",
    "end": "2136430"
  },
  {
    "text": "[Music]",
    "start": "2136430",
    "end": "2142040"
  },
  {
    "text": "much",
    "start": "2142040",
    "end": "2145040"
  }
]