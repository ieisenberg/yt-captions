[
  {
    "text": "hey folks before we get into today's podcast I wanted to share that cuon London returns April 7th to the 9th 2025",
    "start": "520",
    "end": "7520"
  },
  {
    "text": "learn what's next from world-class leaders pushing the boundaries of modern software you'll learn actionable insights from senior developers working",
    "start": "7520",
    "end": "13400"
  },
  {
    "text": "on real world projects across multiple domains learn more at cuon london.com",
    "start": "13400",
    "end": "19960"
  },
  {
    "text": "hello everyone I'm olymp pop a veteran editor for infoq writing mainly for the",
    "start": "22640",
    "end": "27800"
  },
  {
    "text": "Java queue and occasionally on topics related to ml data and other General Technologies today we have Felix a",
    "start": "27800",
    "end": "34680"
  },
  {
    "text": "principal staff engineer who solves planetary skill problems for LinkedIn thank you for accepting our invitation",
    "start": "34680",
    "end": "40640"
  },
  {
    "text": "Felix please introduce yourself and give us an introduction to the problems that you're targeting these days yeah thanks",
    "start": "40640",
    "end": "47280"
  },
  {
    "text": "for having me olympu so like you said my name is Felix I've been working at LinkedIn for a bit more than a decade",
    "start": "47280",
    "end": "53359"
  },
  {
    "text": "now part of the Voldemort team but it transformed into what is now the Venice",
    "start": "53359",
    "end": "59440"
  },
  {
    "text": "team Venice is the system that I worked on it's a database that we built inhouse",
    "start": "59440",
    "end": "65239"
  },
  {
    "text": "and open sourced in 2022 it is basically a derived data base",
    "start": "65239",
    "end": "73600"
  },
  {
    "text": "meaning that we store data that's been generated off of other data in",
    "start": "73600",
    "end": "78920"
  },
  {
    "text": "particular AI feature data sets are quite popular to store in there so",
    "start": "78920",
    "end": "84960"
  },
  {
    "text": "there's a lot of AI inference workloads going on using Venice it's been very EX exciting the scope and scale of the",
    "start": "84960",
    "end": "92759"
  },
  {
    "text": "system is continuously growing over the years so looking forward to chat about",
    "start": "92759",
    "end": "99079"
  },
  {
    "text": "all of that so what would be a place where you would use Venice DB what would",
    "start": "99079",
    "end": "106479"
  },
  {
    "text": "be the problem that it actually solves one way to think about it is you could",
    "start": "106479",
    "end": "112479"
  },
  {
    "text": "split the ecosystem of databases into one dimension which is is it storing",
    "start": "112479",
    "end": "120759"
  },
  {
    "text": "primary data or derived data that's one way to divide the space right divide and",
    "start": "120759",
    "end": "126479"
  },
  {
    "text": "conquer the space primary data which is not what Venice focuses on but just to",
    "start": "126479",
    "end": "132680"
  },
  {
    "text": "put it in context so folks can understand primary data is also called",
    "start": "132680",
    "end": "138200"
  },
  {
    "text": "source of Truth data this is the type of data that you will store in something",
    "start": "138200",
    "end": "143239"
  },
  {
    "text": "like postgress or MySQL Oracle it doesn't have to be in a relational",
    "start": "143239",
    "end": "149160"
  },
  {
    "text": "database you might store primary data also in something like hbase or",
    "start": "149160",
    "end": "154800"
  },
  {
    "text": "Cassandra or Dynamo DB Cosmos DB Etc the point is that primary data",
    "start": "154800",
    "end": "163360"
  },
  {
    "text": "typically is human generated these are things like messaging data between users",
    "start": "163360",
    "end": "171280"
  },
  {
    "text": "of a communication platform or maybe the profile data that users write on a",
    "start": "171280",
    "end": "178800"
  },
  {
    "text": "social network side or the posts that they write on something like medium or substack all of",
    "start": "178800",
    "end": "186720"
  },
  {
    "text": "those are human generated primary data now let's contrast that with derived",
    "start": "186720",
    "end": "192840"
  },
  {
    "text": "data derived data as opposed to primary data is machine generated right so it",
    "start": "192840",
    "end": "201720"
  },
  {
    "text": "could be that it's a denormalization of the primary data",
    "start": "201720",
    "end": "206959"
  },
  {
    "text": "because we want to optimize for different access pattern like for example it maybe it's the same data",
    "start": "206959",
    "end": "215319"
  },
  {
    "text": "conceptually but it's organized in a different way for example the primary data is stored in a row oriented format",
    "start": "215319",
    "end": "224560"
  },
  {
    "text": "that makes it very fast for oltp workloads right like transactional",
    "start": "224560",
    "end": "229879"
  },
  {
    "text": "workloads whereas the denormalized version of that might be a column",
    "start": "229879",
    "end": "235840"
  },
  {
    "text": "oriented format for olap workloads meaning like analytical processing",
    "start": "235840",
    "end": "240959"
  },
  {
    "text": "workloads right that's one form of derivation is when the shape of the data",
    "start": "240959",
    "end": "246920"
  },
  {
    "text": "changes there could be other forms of derivation where the content of the data itself is changing right for example the",
    "start": "246920",
    "end": "255879"
  },
  {
    "text": "use case that Venice focuses on not exclusively but it's it's a popular uh",
    "start": "255879",
    "end": "261359"
  },
  {
    "text": "use case within Venice is ml feature data right so this is data where you",
    "start": "261359",
    "end": "269360"
  },
  {
    "text": "take a bunch of inputs like for example at LinkedIn an example use case is",
    "start": "269360",
    "end": "275960"
  },
  {
    "text": "people you may know for example the inputs are a variety of other data sets",
    "start": "275960",
    "end": "282919"
  },
  {
    "text": "like the connections between users who's messaging who who is liking whose posts",
    "start": "282919",
    "end": "290280"
  },
  {
    "text": "the industries they're part of the schools they went to all of these things",
    "start": "290280",
    "end": "296199"
  },
  {
    "text": "end up being analyzed so to speak or crunched through machine learning jobs",
    "start": "296199",
    "end": "303840"
  },
  {
    "text": "right that will end up spitting out some opaque score right maybe you can call it",
    "start": "303840",
    "end": "311560"
  },
  {
    "text": "like an embedding or just like some floating Point values that is the output",
    "start": "311560",
    "end": "317039"
  },
  {
    "text": "right and these machine learning oriented outputs are in terms of content",
    "start": "317039",
    "end": "324520"
  },
  {
    "text": "completely different from the inputs right it's unrecognizable for a human looking at this to see their relation",
    "start": "324520",
    "end": "331800"
  },
  {
    "text": "but of course they are related in the way that they've been generated now this",
    "start": "331800",
    "end": "337840"
  },
  {
    "text": "is another type of derived data these ml feature data and they can be loaded into",
    "start": "337840",
    "end": "345199"
  },
  {
    "text": "a system like Venice so that the developers of people you may know that",
    "start": "345199",
    "end": "352080"
  },
  {
    "text": "we call pmk internally I may be using one or the other interchangeably the developers of pymk",
    "start": "352080",
    "end": "358880"
  },
  {
    "text": "will then use Venice to load all this feature data and be able to query it at",
    "start": "358880",
    "end": "365520"
  },
  {
    "text": "very low latency from their online application right so when you go to the website or you go to the mobile",
    "start": "365520",
    "end": "373039"
  },
  {
    "text": "application and you go to your network page you'll see some recommendations of people you might know and this is",
    "start": "373039",
    "end": "380240"
  },
  {
    "text": "essentially what we call a recommender system right so that's one of the very",
    "start": "380240",
    "end": "386000"
  },
  {
    "text": "common use cases hosted in Venice okay thank you for the explanation so let me",
    "start": "386000",
    "end": "391680"
  },
  {
    "text": "see if I got it right a primary database are the things that you usually put put on with your own hands",
    "start": "391680",
    "end": "398639"
  },
  {
    "text": "so it would probably be my profile the the jobs that I had and other stuff um",
    "start": "398639",
    "end": "404240"
  },
  {
    "text": "that I'm putting in for my profile if you're talking about LinkedIn right so there are the things that I'm I'm",
    "start": "404240",
    "end": "409319"
  },
  {
    "text": "usually if I'm an engineer if I'm defining a database those are the tables",
    "start": "409319",
    "end": "414840"
  },
  {
    "text": "that I just fill in right yeah if that's an SQL based database or relational dat database and the derived data is data",
    "start": "414840",
    "end": "423879"
  },
  {
    "text": "generated mainly by machines that are either optimizing in some sort or",
    "start": "423879",
    "end": "429080"
  },
  {
    "text": "rearranging the things based on the data introduced in the primary database yeah",
    "start": "429080",
    "end": "434520"
  },
  {
    "text": "so that it allows the the system to function in given parameters right right",
    "start": "434520",
    "end": "439639"
  },
  {
    "text": "and by the way where the data comes from whether it's human generated or machine",
    "start": "439639",
    "end": "444840"
  },
  {
    "text": "generated does not necessarily need to dictate",
    "start": "444840",
    "end": "450039"
  },
  {
    "text": "which database technology choice you pick right so for example if you're",
    "start": "450039",
    "end": "457080"
  },
  {
    "text": "using postgress as your primary database you could have a job that siphons off",
    "start": "457080",
    "end": "464360"
  },
  {
    "text": "the data from postgress runs a machine learning job on it producing a bunch of",
    "start": "464360",
    "end": "471360"
  },
  {
    "text": "embeddings and then pump those embeddings back into postgress right",
    "start": "471360",
    "end": "476560"
  },
  {
    "text": "nothing prevents you from doing that you could use the same database for your primary data and your derived data at",
    "start": "476560",
    "end": "483479"
  },
  {
    "text": "small scale anything works right so if you want we can get into well what is",
    "start": "483479",
    "end": "489120"
  },
  {
    "text": "the point of having a specialized system for hosting derived data why not just",
    "start": "489120",
    "end": "494960"
  },
  {
    "text": "use postgress for everything that was my next question oh sorry to preempt",
    "start": "494960",
    "end": "500800"
  },
  {
    "text": "that yes well it's good to have a flow in that direction but the database space",
    "start": "500800",
    "end": "507759"
  },
  {
    "text": "is quite busy there are a lot of databases in all in all different aspects relational databases no",
    "start": "507759",
    "end": "513919"
  },
  {
    "text": "relational databases key value pairs you name it and on all different perspectives why a new database why ven",
    "start": "513919",
    "end": "521080"
  },
  {
    "text": "is theb right so by the way I go into more details about all of that in a",
    "start": "521080",
    "end": "527360"
  },
  {
    "text": "cucon London talk that I gave called what is derived data and do you have any so you can go check that out for a more",
    "start": "527360",
    "end": "534000"
  },
  {
    "text": "in-depth explanation but essentially like what I would say is as I alluded",
    "start": "534000",
    "end": "539680"
  },
  {
    "text": "earlier at small scale anything works and there may be benefits to reducing",
    "start": "539680",
    "end": "547279"
  },
  {
    "text": "the overall complexity of your system by having fewer Technologies in it right so",
    "start": "547279",
    "end": "554120"
  },
  {
    "text": "if you can get everything working with just postgress by all means use only",
    "start": "554120",
    "end": "560519"
  },
  {
    "text": "postgress right that's a totally sensible technical decision at some point you may start",
    "start": "560519",
    "end": "569560"
  },
  {
    "text": "getting some operational pressure from certain issues right for example one of",
    "start": "569560",
    "end": "576640"
  },
  {
    "text": "the ways that primary data and derived data differ that's not a hard rule by",
    "start": "576640",
    "end": "582839"
  },
  {
    "text": "the way but it's just a tendency that that we've seen over and over derived data tends to have a very",
    "start": "582839",
    "end": "591880"
  },
  {
    "text": "high volume of WR or you can call it like refresh right the primary",
    "start": "591880",
    "end": "600200"
  },
  {
    "text": "data is often times heavily skewed towards reads so that means you have",
    "start": "600200",
    "end": "607800"
  },
  {
    "text": "like let's say a 10% ratio of writes 90% ratio of reads or maybe even more skew",
    "start": "607800",
    "end": "614079"
  },
  {
    "text": "like 5 95 or even 199 in terms of write versus reads in a",
    "start": "614079",
    "end": "621399"
  },
  {
    "text": "primary database for the derived data sets it is often the case that the right",
    "start": "621399",
    "end": "630560"
  },
  {
    "text": "rate is very high because let's say you want to regenerate new ml",
    "start": "630560",
    "end": "639160"
  },
  {
    "text": "recommendations every day or maybe even several times a day or maybe you're doing it in a streaming fashion and it",
    "start": "639160",
    "end": "645880"
  },
  {
    "text": "has like a high amplification rate like let's say two persons connect together",
    "start": "645880",
    "end": "652920"
  },
  {
    "text": "right they add each other as contacts or as friends on a social network well now",
    "start": "652920",
    "end": "658959"
  },
  {
    "text": "there a downstream side effect which is that a",
    "start": "658959",
    "end": "664360"
  },
  {
    "text": "bunch of new people have now become second degree connections right and so potentially for just the two persons",
    "start": "664360",
    "end": "673079"
  },
  {
    "text": "that connected together there is a side effect that hundreds or thousands of",
    "start": "673079",
    "end": "678240"
  },
  {
    "text": "other people are now more likely to be connected to one another because they've",
    "start": "678240",
    "end": "683959"
  },
  {
    "text": "become second deegree connections whereas before they were third degree connections right so",
    "start": "683959",
    "end": "689760"
  },
  {
    "text": "all of these factors result in the right rate being potentially much higher for",
    "start": "689760",
    "end": "696639"
  },
  {
    "text": "those derived data sets and so then you get to a point where does it make sense",
    "start": "696639",
    "end": "701760"
  },
  {
    "text": "for me to have this postgress database which is Mission critical right because",
    "start": "701760",
    "end": "707720"
  },
  {
    "text": "it's serving all of the requests for loading the profile loading the users",
    "start": "707720",
    "end": "713880"
  },
  {
    "text": "messages all that stuff and once a day that database gets completely slammed",
    "start": "713880",
    "end": "722160"
  },
  {
    "text": "because a table needs to be Rewritten entirely right so then at that point",
    "start": "722160",
    "end": "727279"
  },
  {
    "text": "maybe you get into a situation where you say well gez that's untenable I'm going",
    "start": "727279",
    "end": "733199"
  },
  {
    "text": "to split those databases into separate instances right so I'm going to have one",
    "start": "733199",
    "end": "738800"
  },
  {
    "text": "postgress instance where I host only the primary data that one is more typical in",
    "start": "738800",
    "end": "743959"
  },
  {
    "text": "the sense that it has like let's say 10% rights 90% reads and I optimize it for",
    "start": "743959",
    "end": "749639"
  },
  {
    "text": "that and then I have like a second postgress instance which perhaps is",
    "start": "749639",
    "end": "756279"
  },
  {
    "text": "connected via change capture to the first one asynchronously updated or maybe not and it also gets these batch",
    "start": "756279",
    "end": "764600"
  },
  {
    "text": "jobs that will slam it once a day and and regenerate entire tables and I might",
    "start": "764600",
    "end": "771959"
  },
  {
    "text": "have different tunings that I apply there right so already you're sort of having a you can say maybe a",
    "start": "771959",
    "end": "779920"
  },
  {
    "text": "vulcanization right of your infrastructure you're isolating pieces that don't play well together like that",
    "start": "779920",
    "end": "788240"
  },
  {
    "text": "cause interference or Noisy Neighbor issues with one another you're separating them but you're still using",
    "start": "788240",
    "end": "794240"
  },
  {
    "text": "the same technology in both silos you're still using postgress on both sides but then at some point you may get to a",
    "start": "794240",
    "end": "801320"
  },
  {
    "text": "situation where you say well look there's a bunch of functionalities that",
    "start": "801320",
    "end": "806920"
  },
  {
    "text": "postgress gives me that I'm not using anyway way postgress is like very general purpose it does everything",
    "start": "806920",
    "end": "813880"
  },
  {
    "text": "basically but there's a bunch of stuff I'm not using and I still have some scalability",
    "start": "813880",
    "end": "819959"
  },
  {
    "text": "issues when I need to rewrite these entire tables and so on is there something better that I can do right",
    "start": "819959",
    "end": "826560"
  },
  {
    "text": "then at that point you can start asking yourself well maybe there's a",
    "start": "826560",
    "end": "831920"
  },
  {
    "text": "specialized database technology that I can use instead that will be very",
    "start": "831920",
    "end": "838079"
  },
  {
    "text": "optimized at bulk loading batch data optimized at supporting high right rate",
    "start": "838079",
    "end": "845959"
  },
  {
    "text": "still give me very low latency perhaps even better latency than what postgress would give you but in exchange of course",
    "start": "845959",
    "end": "854040"
  },
  {
    "text": "nothing is free in this world right in exchange that system is much more specialized so it doesn't have all the",
    "start": "854040",
    "end": "860800"
  },
  {
    "text": "bells and whistles that postgress gives you it's more focused right so that's",
    "start": "860800",
    "end": "866920"
  },
  {
    "text": "kind of a natural progression as a company scales its its data needs it",
    "start": "866920",
    "end": "874880"
  },
  {
    "text": "will go from I think a more homogeneous stack where it has fewer Technologies",
    "start": "874880",
    "end": "880680"
  },
  {
    "text": "less complexity in terms of variety of Technologies towards a more varied",
    "start": "880680",
    "end": "887000"
  },
  {
    "text": "diverse stack where it has a bunch of different Technologies and each of them is specialized for a given workload so",
    "start": "887000",
    "end": "894680"
  },
  {
    "text": "to wrap up this in some kind of a conclusion the when is theb is a very",
    "start": "894680",
    "end": "900519"
  },
  {
    "text": "Niche database particularly targeted for derived data that puts emphasis and",
    "start": "900519",
    "end": "906759"
  },
  {
    "text": "that's oriented on having multiple rights more rights than raids more or",
    "start": "906759",
    "end": "912199"
  },
  {
    "text": "less right yes it certainly supports very high right rate it also supports",
    "start": "912199",
    "end": "918160"
  },
  {
    "text": "High read rates by the way it supports both basically okay so it's about the",
    "start": "918160",
    "end": "923199"
  },
  {
    "text": "trade-off depending on the the scenarios that we're going to use it you can configure it based on your needs and",
    "start": "923199",
    "end": "930240"
  },
  {
    "text": "mainly focusing on that but still the response for why new database is it felt",
    "start": "930240",
    "end": "937680"
  },
  {
    "text": "better to build it from scratch for the tailor made problem that you're trying to solve or there was another reason for",
    "start": "937680",
    "end": "944319"
  },
  {
    "text": "that as well as I alluded to when I joined LinkedIn I was in the Voldemort team and Voldemort was responsible for",
    "start": "944319",
    "end": "952600"
  },
  {
    "text": "that type of workload it was also responsible for other workloads that ended up getting migrated to other non",
    "start": "952600",
    "end": "959560"
  },
  {
    "text": "Voldemort systems but if we zoom in on just the ml like recommender system kind",
    "start": "959560",
    "end": "966639"
  },
  {
    "text": "of use cases that we've been talking about so far those were served by a flavor of Voldemort that we called",
    "start": "966639",
    "end": "972680"
  },
  {
    "text": "Voldemort readon it allowed you essentially to swap the whole data set in a batch fashion periodically maybe",
    "start": "972680",
    "end": "981000"
  },
  {
    "text": "once a day or a few times a day that worked fine for many years actually Voldemort had a run of about 10 years at",
    "start": "981000",
    "end": "988600"
  },
  {
    "text": "LinkedIn in so was very successful in that sense but it also had a bit of an",
    "start": "988600",
    "end": "994720"
  },
  {
    "text": "aging architecture so we had the choice essentially are we going to modernize",
    "start": "994720",
    "end": "1000360"
  },
  {
    "text": "Voldemort's architecture to solve these paint points that we were facing or are",
    "start": "1000360",
    "end": "1005720"
  },
  {
    "text": "we going to replace it and if we replace it is there something of the shelf that we can pick that's already been built by",
    "start": "1005720",
    "end": "1012519"
  },
  {
    "text": "someone else or do we need to build it from scratch right so that was kind of the improve or build or buy kind of",
    "start": "1012519",
    "end": "1020079"
  },
  {
    "text": "decision right and the architectural limitations of Voldemort were thought to be",
    "start": "1020079",
    "end": "1028038"
  },
  {
    "text": "sufficiently large that it was like not that attractive to try to upgrade it in",
    "start": "1028039",
    "end": "1033839"
  },
  {
    "text": "place for various reasons those limitations included like the data uh",
    "start": "1033839",
    "end": "1039038"
  },
  {
    "text": "placement across partitions and replicas was very static it was like some XML",
    "start": "1039039",
    "end": "1044360"
  },
  {
    "text": "file somewhere that the human had to go alter and like manually shift data",
    "start": "1044360",
    "end": "1049520"
  },
  {
    "text": "around when needed uh it was kind of tedious in that way whereas at that",
    "start": "1049520",
    "end": "1054720"
  },
  {
    "text": "point we had new technologies new building blocks that we could leverage to make it more Dynamic so that as",
    "start": "1054720",
    "end": "1060200"
  },
  {
    "text": "machine failures happen the data rebalances automatically all that stuff uh and there were other such kind of",
    "start": "1060200",
    "end": "1066799"
  },
  {
    "text": "operational pain points that we wanted to improve in terms of the build versus",
    "start": "1066799",
    "end": "1071960"
  },
  {
    "text": "buy buy here doesn't necessarily mean money it could also mean like open source that somebody else developed but",
    "start": "1071960",
    "end": "1079240"
  },
  {
    "text": "like let's say build versus adopt there weren't really any other significant contender",
    "start": "1079240",
    "end": "1087840"
  },
  {
    "text": "in that space at the time that we did this evaluation this is like circa 2014",
    "start": "1087840",
    "end": "1094679"
  },
  {
    "text": "is when we started seriously looking into replacing Voldemort treat only with",
    "start": "1094679",
    "end": "1099720"
  },
  {
    "text": "something else at the time Twitter had something similar in design called cdb",
    "start": "1099720",
    "end": "1107600"
  },
  {
    "text": "CA but that was a proprietary system they had talked about it in some blog post but that's about it we couldn't use",
    "start": "1107600",
    "end": "1113320"
  },
  {
    "text": "it then there were things like hbase had some like H file side loading mechanism",
    "start": "1113320",
    "end": "1122159"
  },
  {
    "text": "that could have fit in that space But it was like not very mature based on like I",
    "start": "1122159",
    "end": "1129080"
  },
  {
    "text": "spoke with age-based committers and stuff like that that I knew personally at the time and hbed users and it was",
    "start": "1129080",
    "end": "1135360"
  },
  {
    "text": "like well okay it works but like there's still a lot of scaffolding that you need to do manually",
    "start": "1135360",
    "end": "1142640"
  },
  {
    "text": "to prop it up it could have worked but it wasn't like as attractive as we hoped",
    "start": "1142640",
    "end": "1149039"
  },
  {
    "text": "it was and then like I think there were probably some other proprietary Solutions in other companies but in",
    "start": "1149039",
    "end": "1155360"
  },
  {
    "text": "terms of something aidable off the shelf in the public space either open source or commercial there wasn't really so",
    "start": "1155360",
    "end": "1163480"
  },
  {
    "text": "Voldemort was open source but nothing else was so that's kind of the thought",
    "start": "1163480",
    "end": "1169840"
  },
  {
    "text": "process by the way we did reuse certain little parts of Voldemort we didn't throw it away entirely but we did",
    "start": "1169840",
    "end": "1177799"
  },
  {
    "text": "rewrite like a large chunk of it just curious now how do you build a database",
    "start": "1177799",
    "end": "1183520"
  },
  {
    "text": "from scratch because usually when you're talking about architecture you're talking a lot about loose coupling but",
    "start": "1183520",
    "end": "1189320"
  },
  {
    "text": "on the other side when you're talking about efficiency and performance you're talking about taking some decisions some",
    "start": "1189320",
    "end": "1195559"
  },
  {
    "text": "trade-offs to make sure that you have the best outcome in terms of performance",
    "start": "1195559",
    "end": "1200960"
  },
  {
    "text": "what are those decisions how do you handle it now it's a decade old it's",
    "start": "1200960",
    "end": "1206039"
  },
  {
    "text": "already in production what are those decisions that you took initially that ensured the proper operation of of the",
    "start": "1206039",
    "end": "1213080"
  },
  {
    "text": "database now well so I should clarify like we certainly did not build a",
    "start": "1213080",
    "end": "1219640"
  },
  {
    "text": "database from scratch like we stand on the shoulders of giants and I want to give credit where it's due we have some",
    "start": "1219640",
    "end": "1227159"
  },
  {
    "text": "very critical dependencies that we rely on right so those include Kafka is our",
    "start": "1227159",
    "end": "1235760"
  },
  {
    "text": "you could call it like data propagation layer or our right path so to speak all",
    "start": "1235760",
    "end": "1240919"
  },
  {
    "text": "the data comes in first through Kafka in the Venice architecture we also use",
    "start": "1240919",
    "end": "1246679"
  },
  {
    "text": "Apache Helix for cluster management so that's what I alluded to earlier where we wanted to get rid of Voldemort's",
    "start": "1246679",
    "end": "1253320"
  },
  {
    "text": "static partition placement configurations and instead make it Dynamic that's handled via apach Helix",
    "start": "1253320",
    "end": "1259679"
  },
  {
    "text": "which also kfka and Helix both come out of LinkedIn then we're also using other",
    "start": "1259679",
    "end": "1266840"
  },
  {
    "text": "things like NTI nowadays we're using RX TB we didn't use it at first but",
    "start": "1266840",
    "end": "1272240"
  },
  {
    "text": "nowadays we're using RX TB and there's a bunch of other dependencies right so we didn't build the whole database from",
    "start": "1272240",
    "end": "1279440"
  },
  {
    "text": "scratch but we used I would say some very solid industry provided building",
    "start": "1279440",
    "end": "1287440"
  },
  {
    "text": "blocks and then we composed them together in new ways that we we didn't",
    "start": "1287440",
    "end": "1294520"
  },
  {
    "text": "see anything similar that existed at the time and maybe even now like Venice is",
    "start": "1294520",
    "end": "1300120"
  },
  {
    "text": "still a fairly unique system I think certainly there are others in the derive data space but in terms of what exactly",
    "start": "1300120",
    "end": "1307960"
  },
  {
    "text": "we provide with Venice it's actually difficult to find a comparison point",
    "start": "1307960",
    "end": "1313679"
  },
  {
    "text": "it's a little bit unique in its own Niche okay so let me summarize that",
    "start": "1313679",
    "end": "1319039"
  },
  {
    "text": "you glue together so mainly it looks like more of a tailor made software",
    "start": "1319039",
    "end": "1324880"
  },
  {
    "text": "development and building a database per se so VDB is a system that stores",
    "start": "1324880",
    "end": "1331440"
  },
  {
    "text": "derived data that puts together multiple building blocks that are already known",
    "start": "1331440",
    "end": "1336799"
  },
  {
    "text": "they are notorious in the in the open source space like Kafka for ingestion you have NTI on the communication side",
    "start": "1336799",
    "end": "1342799"
  },
  {
    "text": "on the on the transport side and at the core of it you have Rock DB as the",
    "start": "1342799",
    "end": "1349240"
  },
  {
    "text": "database engine if I remember one of our previous conversations you thought about",
    "start": "1349240",
    "end": "1354840"
  },
  {
    "text": "VDB to be able to swap the the engine but that wasn't initially needed because",
    "start": "1354840",
    "end": "1362400"
  },
  {
    "text": "it served the purpose that change in the meantime can you walk us through that as well besides Rock DB you're in the",
    "start": "1362400",
    "end": "1369400"
  },
  {
    "text": "process of adding another engine that serves another purpose so yeah walk us to that process the storage engine part",
    "start": "1369400",
    "end": "1377600"
  },
  {
    "text": "of Venice I think is is interesting we did want the storage engine to be pluggable from the get-go",
    "start": "1377600",
    "end": "1385279"
  },
  {
    "text": "and as I hinted at we did not start off with Rox DB we actually started off with",
    "start": "1385279",
    "end": "1393240"
  },
  {
    "text": "the storage engine that Voldemort was using which is called bdb J it's the",
    "start": "1393240",
    "end": "1400120"
  },
  {
    "text": "Berkeley database Java Edition it's basically a b tree held inside of the",
    "start": "1400120",
    "end": "1407320"
  },
  {
    "text": "Java Heap it provides pretty good read performance okay right performance and",
    "start": "1407320",
    "end": "1415440"
  },
  {
    "text": "that's what we started with and and Venice was successful for a few years leveraging that building block but the",
    "start": "1415440",
    "end": "1422559"
  },
  {
    "text": "storage engine was hidden behind an abstraction right and at some point we",
    "start": "1422559",
    "end": "1428720"
  },
  {
    "text": "had increasing scalability challenges uh in terms of like tuning the garbage",
    "start": "1428720",
    "end": "1435159"
  },
  {
    "text": "collection and all that stuff and so we got all this data sitting on the Java",
    "start": "1435159",
    "end": "1441679"
  },
  {
    "text": "Heap not the ideal use case for the jvm right the jvm works really great for",
    "start": "1441679",
    "end": "1449360"
  },
  {
    "text": "short-lived data longlasting data can be fine but then the real",
    "start": "1449360",
    "end": "1456640"
  },
  {
    "text": "killer is like intermediate lifespan data right the data that lives long",
    "start": "1456640",
    "end": "1461679"
  },
  {
    "text": "enough to graduate through the generations of the generational garbage",
    "start": "1461679",
    "end": "1467200"
  },
  {
    "text": "collector but eventually does still need to be garbage collected out of the older",
    "start": "1467200",
    "end": "1472440"
  },
  {
    "text": "Generations that's sort of the a bad spot for the jvm at least in those years I everything is continuously improving",
    "start": "1472440",
    "end": "1479559"
  },
  {
    "text": "in the Java space so maybe it's better nowadays but in those years it was a bit painful and so we had long garbage",
    "start": "1479559",
    "end": "1485919"
  },
  {
    "text": "collection pauses and so on so we looked at Alternatives and Rox DB was a promising one at that time and so we did",
    "start": "1485919",
    "end": "1494120"
  },
  {
    "text": "exercise our ability to use this storage engine exraction we plugged in a new one",
    "start": "1494120",
    "end": "1500279"
  },
  {
    "text": "and we essentially performed a whole migration at that point we had maybe I",
    "start": "1500279",
    "end": "1505320"
  },
  {
    "text": "don't know like a bit less than a thousand different data sets uh in those years probably and we essentially",
    "start": "1505320",
    "end": "1512840"
  },
  {
    "text": "invisibly migrated them the users never knew about it it was completely on the operator side which in my opinion is the",
    "start": "1512840",
    "end": "1520360"
  },
  {
    "text": "way ideally technical migrations should be done like with as little burden as possible on the user the infrastructure",
    "start": "1520360",
    "end": "1526840"
  },
  {
    "text": "should be able to just uplift it itself in a invisible way right so that's what we did and so we swapped this btbj",
    "start": "1526840",
    "end": "1534799"
  },
  {
    "text": "engine in favor of Rox DB and that really improved our performance quite a",
    "start": "1534799",
    "end": "1539919"
  },
  {
    "text": "bit so that's one thing we did essentially by leveraging decoupling in",
    "start": "1539919",
    "end": "1545279"
  },
  {
    "text": "the right places right and then more recently we have started plugging in new",
    "start": "1545279",
    "end": "1552279"
  },
  {
    "text": "types of engines again and we had a pretty interesting like hack we thing",
    "start": "1552279",
    "end": "1559360"
  },
  {
    "text": "going on last month where we decided I I teamed up with one of my colleagues uh",
    "start": "1559360",
    "end": "1566279"
  },
  {
    "text": "named kuros and we decided to see could we plug in engine instead of a key value",
    "start": "1566279",
    "end": "1573799"
  },
  {
    "text": "store right and so we chose a duck DB which is a a really great open source",
    "start": "1573799",
    "end": "1579640"
  },
  {
    "text": "project that I encourage everybody to check out it's super powerful specialized in analytical workloads and",
    "start": "1579640",
    "end": "1588320"
  },
  {
    "text": "we plugged it in and now there is an option to load Venice data directly into",
    "start": "1588320",
    "end": "1594880"
  },
  {
    "text": "duck DB and then you can have like a populated duck DB instance in your",
    "start": "1594880",
    "end": "1599960"
  },
  {
    "text": "application that's been fed off of Venice data and then do any SQL queries",
    "start": "1599960",
    "end": "1605279"
  },
  {
    "text": "on that so then that expands the scope of capabilities that Venice offers it's",
    "start": "1605279",
    "end": "1611240"
  },
  {
    "text": "no longer what Rox DB provides which is essentially a key value access pattern",
    "start": "1611240",
    "end": "1617360"
  },
  {
    "text": "now it there is also this alternative mechanism for accessing Venice data via",
    "start": "1617360",
    "end": "1622799"
  },
  {
    "text": "SQL it's still like pretty early days uh on that front there's like a new module you can",
    "start": "1622799",
    "end": "1629279"
  },
  {
    "text": "use to access that capability it's still like pretty Cutting Edge but we're hoping to polish it and stabilize it",
    "start": "1629279",
    "end": "1636440"
  },
  {
    "text": "over time okay so initially when is theb and what you're currently using in",
    "start": "1636440",
    "end": "1642600"
  },
  {
    "text": "production is a key value pair and that's provided through Rox DB yeah and",
    "start": "1642600",
    "end": "1648320"
  },
  {
    "text": "now it's having SQL abilities through duck DB but that's only just getting",
    "start": "1648320",
    "end": "1654480"
  },
  {
    "text": "started it's just the product of of hackaton right yeah okay thank you and",
    "start": "1654480",
    "end": "1662039"
  },
  {
    "text": "this beats me to the next question Rox DB is written mainly in C++ mhm the main",
    "start": "1662039",
    "end": "1670960"
  },
  {
    "text": "language for Venice is Java how do you interface that",
    "start": "1670960",
    "end": "1676240"
  },
  {
    "text": "well it's already a decade so I suppose it's jni yeah that's right we use the",
    "start": "1676240",
    "end": "1682519"
  },
  {
    "text": "roxs Java dependency which is a jni wrapper on top of Rox DB very solid open",
    "start": "1682519",
    "end": "1688840"
  },
  {
    "text": "source library and it works really great for us jni of course has a cost but it's",
    "start": "1688840",
    "end": "1696480"
  },
  {
    "text": "very minimal in our experience so yeah it's been working",
    "start": "1696480",
    "end": "1701760"
  },
  {
    "text": "great and it allows us to essentially use each language where they Shine the",
    "start": "1701760",
    "end": "1707840"
  },
  {
    "text": "most C++ of course is more complex to get",
    "start": "1707840",
    "end": "1713480"
  },
  {
    "text": "right it can have memory leaks or seg fults and so on if you don't use it",
    "start": "1713480",
    "end": "1719600"
  },
  {
    "text": "correctly whereas Java is extremely safe the garbage collector has got your back",
    "start": "1719600",
    "end": "1725679"
  },
  {
    "text": "it well not fully like you can still have memory leaks in Java also if you don't do the right things but it's",
    "start": "1725679",
    "end": "1733200"
  },
  {
    "text": "overall much more robust much easier very high productivity",
    "start": "1733200",
    "end": "1738440"
  },
  {
    "text": "so Java is great I think for building distributed systems which are already",
    "start": "1738440",
    "end": "1745519"
  },
  {
    "text": "difficult enough to get right you know handling all of the",
    "start": "1745519",
    "end": "1751279"
  },
  {
    "text": "replication fault tolerance failovers all that stuff handling all that reliably is difficult enough without",
    "start": "1751279",
    "end": "1759039"
  },
  {
    "text": "adding the complexity of a unmanaged memory language but for the parts where",
    "start": "1759039",
    "end": "1766679"
  },
  {
    "text": "it matters the most like managing the state essentially managing the state of",
    "start": "1766679",
    "end": "1771799"
  },
  {
    "text": "the database we do lean on these very robust C++ dependencies such as Rox DB",
    "start": "1771799",
    "end": "1780200"
  },
  {
    "text": "and now duck DB both of these are C++ libraries that we access via jni so I",
    "start": "1780200",
    "end": "1786840"
  },
  {
    "text": "think it's like The Best of Both Worlds basically that sounds quite right I mean Java is quite readable it's fast to move",
    "start": "1786840",
    "end": "1794039"
  },
  {
    "text": "it regardless of what people are are saying now in the space because just Java is old and it's slow but in my",
    "start": "1794039",
    "end": "1800120"
  },
  {
    "text": "opinion is it's a very powerful tool especially for systems that need to be reliable and that's pretty much what I'm",
    "start": "1800120",
    "end": "1806320"
  },
  {
    "text": "hearing from you as well but still I have to ask you as you mentioned the system was built in the",
    "start": "1806320",
    "end": "1813480"
  },
  {
    "text": "last decade and Java picked up the pace lately they have two releases per year",
    "start": "1813480",
    "end": "1818919"
  },
  {
    "text": "they have LTS um every fourth version what Java versions are you currently",
    "start": "1818919",
    "end": "1824840"
  },
  {
    "text": "supporting what's your preferred tool what's the that you use so for now I will say",
    "start": "1824840",
    "end": "1832919"
  },
  {
    "text": "unfortunately we still have some stragglers internally at LinkedIn that",
    "start": "1832919",
    "end": "1838200"
  },
  {
    "text": "are still on Java 8 there are very few of them and and we're trying to to squash them away but so we are still",
    "start": "1838200",
    "end": "1846120"
  },
  {
    "text": "targeting support for Java 8 we support Java 8 11 and 17 and we run all our unit",
    "start": "1846120",
    "end": "1853240"
  },
  {
    "text": "tests on all three of those Venice provides three three services that as",
    "start": "1853240",
    "end": "1860399"
  },
  {
    "text": "Venice operators we own these are the controller router and server and in",
    "start": "1860399",
    "end": "1867679"
  },
  {
    "text": "practice we run those Services all on Java 17 which we've found gives us the",
    "start": "1867679",
    "end": "1874200"
  },
  {
    "text": "best performance but the client libraries which there there's a variety of them",
    "start": "1874200",
    "end": "1880480"
  },
  {
    "text": "that we offer in the Venice ecosystem for different needs those are the ones",
    "start": "1880480",
    "end": "1886320"
  },
  {
    "text": "where it's important for us to keep supporting Java 8 at least for the time being honestly I would love to drop",
    "start": "1886320",
    "end": "1892559"
  },
  {
    "text": "support for Java 8 I'm I'm really tired of being uh kind of handcuffed to the",
    "start": "1892559",
    "end": "1900000"
  },
  {
    "text": "language constraints of java 8 I would love to start using some new language",
    "start": "1900000",
    "end": "1905760"
  },
  {
    "text": "features but for now we target support for those three 8 11 and 17 hopefully we",
    "start": "1905760",
    "end": "1912320"
  },
  {
    "text": "will add support for 21 soon there's some very minor things getting in the",
    "start": "1912320",
    "end": "1918919"
  },
  {
    "text": "way of that but they should be solvable so yeah that's kind of the picture for",
    "start": "1918919",
    "end": "1924159"
  },
  {
    "text": "the versions We currently support sounds about right I mean pretty much everybody",
    "start": "1924159",
    "end": "1929200"
  },
  {
    "text": "has still a small drag with Java it most of the people are still using it in a",
    "start": "1929200",
    "end": "1934399"
  },
  {
    "text": "couple of PES how about project Panama jni did its",
    "start": "1934399",
    "end": "1940279"
  },
  {
    "text": "job it's very good at what is doing but as you said it has some trade-offs project Panama is promising to take out",
    "start": "1940279",
    "end": "1947919"
  },
  {
    "text": "some of the headaches that were coming with the initial native interface what are your plans into that",
    "start": "1947919",
    "end": "1953799"
  },
  {
    "text": "direction that's a good question for now we're not really considering doing",
    "start": "1953799",
    "end": "1961519"
  },
  {
    "text": "anything in that space given that we still need to support those older",
    "start": "1961519",
    "end": "1969000"
  },
  {
    "text": "jvms once that gets unblocked will certainly be interested at at leveraging",
    "start": "1969000",
    "end": "1976039"
  },
  {
    "text": "the those newer functionalities but for now it's kind of a back burner",
    "start": "1976039",
    "end": "1981200"
  },
  {
    "text": "issue uh we're not really looking at it seriously yet okay so that translates",
    "start": "1981200",
    "end": "1987840"
  },
  {
    "text": "into the the performance is good enough for now you have to support the ongoing",
    "start": "1987840",
    "end": "1993120"
  },
  {
    "text": "versions that you currently have but you have a a place where you can improve in the future yeah and how was running Java",
    "start": "1993120",
    "end": "2001200"
  },
  {
    "text": "in production I mean it's definitely quite simple as you mentioned",
    "start": "2001200",
    "end": "2007120"
  },
  {
    "text": "to write it at the language level but in my opinion the platform itself is quite",
    "start": "2007120",
    "end": "2012200"
  },
  {
    "text": "hard to manage or at least if you want to optimize it and to run it at the the optimal level you need to know how to do",
    "start": "2012200",
    "end": "2018320"
  },
  {
    "text": "it you need to know where to look into that how did you handle optimizations at TP level at the platform level I know",
    "start": "2018320",
    "end": "2025440"
  },
  {
    "text": "that you had some discussions online about it as well in the Hep space can you share more in depth about that what",
    "start": "2025440",
    "end": "2031840"
  },
  {
    "text": "were your learnings I would say like the Venice codebase which is in Java like",
    "start": "2031840",
    "end": "2037120"
  },
  {
    "text": "we've been saying actually has a fair amount of variety in",
    "start": "2037120",
    "end": "2043279"
  },
  {
    "text": "how optimized is it right there are some code pads where performance doesn't",
    "start": "2043279",
    "end": "2050079"
  },
  {
    "text": "matter at all and it's really all about readability maintainability those are",
    "start": "2050079",
    "end": "2056040"
  },
  {
    "text": "the only things we care for and then there are some other paths which are hot",
    "start": "2056040",
    "end": "2061878"
  },
  {
    "text": "pads and we care very much about performance and those can end up being a",
    "start": "2061879",
    "end": "2069760"
  },
  {
    "text": "little different looking right so for the hot pads we use a lot of tricks to",
    "start": "2069760",
    "end": "2076079"
  },
  {
    "text": "make the Java code AS efficient and performant as possible so we are careful",
    "start": "2076079",
    "end": "2084280"
  },
  {
    "text": "uh not to generate too much garbage we do object reuse where it makes sense we",
    "start": "2084280",
    "end": "2091839"
  },
  {
    "text": "use primitive types instead of objects where it makes sense we use things like Fast Ule for example which is this",
    "start": "2091839",
    "end": "2099359"
  },
  {
    "text": "library that gives you alternatives to collections for when you use the",
    "start": "2099359",
    "end": "2105680"
  },
  {
    "text": "collections to store primitive types so for example if you have an array list you know you can have an array list of",
    "start": "2105680",
    "end": "2111960"
  },
  {
    "text": "integer but that's like the object type integer right so it will have boxing around each items in the list whereas",
    "start": "2111960",
    "end": "2120599"
  },
  {
    "text": "you could also have an array of int which is a primitive type right so that's smaller but of course the array",
    "start": "2120599",
    "end": "2128160"
  },
  {
    "text": "list variable size and the array is fixed size so how do you bridge the gap",
    "start": "2128160",
    "end": "2133200"
  },
  {
    "text": "between these where you can actually have like a primitive equivalent of the array list right so so these are all",
    "start": "2133200",
    "end": "2139640"
  },
  {
    "text": "tricks that we uh use to minimize the memory footprint and so on so there's a",
    "start": "2139640",
    "end": "2146240"
  },
  {
    "text": "lot of things we do in that space to try to reduce allocations reduce garbage and",
    "start": "2146240",
    "end": "2153319"
  },
  {
    "text": "ultimately our goal in doing that is that we care about tail latency right we don't care only about average latency uh",
    "start": "2153319",
    "end": "2161760"
  },
  {
    "text": "we care about the long tail like the P99 the P99 point9 essentially the the worst",
    "start": "2161760",
    "end": "2168079"
  },
  {
    "text": "of the worst latencies that the system provides those end up getting affected by garbage collection pauses so we do",
    "start": "2168079",
    "end": "2175480"
  },
  {
    "text": "care about minimizing garbage in some parts of the system not all of them can",
    "start": "2175480",
    "end": "2182040"
  },
  {
    "text": "you share how you managed to look more into this space I know that you have a choice of",
    "start": "2182040",
    "end": "2188119"
  },
  {
    "text": "tools but I know that you build build it yourself can you sh more about this",
    "start": "2188119",
    "end": "2194800"
  },
  {
    "text": "experiment recently I shared online some work we did in terms of java Heap",
    "start": "2194800",
    "end": "2201160"
  },
  {
    "text": "measurement right and the use case essentially is that in various parts of",
    "start": "2201160",
    "end": "2206920"
  },
  {
    "text": "the system we have buffers so some pieces of data let's say get consumed",
    "start": "2206920",
    "end": "2213119"
  },
  {
    "text": "from Kafka and those come in sort of like mini batches and they land in some buffer and then",
    "start": "2213119",
    "end": "2220359"
  },
  {
    "text": "there's another thread or thread pool somewhere that DQ's item from that buffer and processes them like puts them",
    "start": "2220359",
    "end": "2227760"
  },
  {
    "text": "in the storage engine or whatever right so this gives us better endtoend",
    "start": "2227760",
    "end": "2233280"
  },
  {
    "text": "throughput but we don't want this buffer in the middle to grow unboundedly right",
    "start": "2233280",
    "end": "2240160"
  },
  {
    "text": "otherwise we'll hit out of memory exceptions so clearly the buffer has got",
    "start": "2240160",
    "end": "2245800"
  },
  {
    "text": "to have some limit on it but that's actually challenging to get right because is used for a large",
    "start": "2245800",
    "end": "2255599"
  },
  {
    "text": "variety of data sets that all have different shapes right we have more than",
    "start": "2255599",
    "end": "2262480"
  },
  {
    "text": "2,000 data sets in production some of them have large key value pairs others",
    "start": "2262480",
    "end": "2269240"
  },
  {
    "text": "have small key value Pairs and so when we buffer the items in that buffer that",
    "start": "2269240",
    "end": "2274960"
  },
  {
    "text": "I talked about there is the the payload which is like the user provided data",
    "start": "2274960",
    "end": "2282240"
  },
  {
    "text": "when I say user I mean like the Venice user the internal user right there is the payload part which is the key and",
    "start": "2282240",
    "end": "2288599"
  },
  {
    "text": "the value that the internal user is writing to Venice and then there's the Venice metadata right there's various",
    "start": "2288599",
    "end": "2295680"
  },
  {
    "text": "pieces of metadata we keep to ensure data completeness data integrity and",
    "start": "2295680",
    "end": "2302000"
  },
  {
    "text": "various other details like the the Tim stamp the data was written at to monitor the lag",
    "start": "2302000",
    "end": "2307960"
  },
  {
    "text": "of the system all of these things are part of the metadata and so the point is",
    "start": "2307960",
    "end": "2314079"
  },
  {
    "text": "if I do a very naive implementation of this bounded buffer concept I could say",
    "start": "2314079",
    "end": "2321040"
  },
  {
    "text": "I want no more than let's say 10,000 items in the buffer well that's one way to bound how much memory it's going to",
    "start": "2321040",
    "end": "2329000"
  },
  {
    "text": "take but that ignores the fact that the payload part is variable in size right",
    "start": "2329000",
    "end": "2337839"
  },
  {
    "text": "if I have 10,000 1 kilobyte payloads that's very different than if I have",
    "start": "2337839",
    "end": "2344040"
  },
  {
    "text": "10,00 kilobyte payloads right the memory cost of that is very different the point",
    "start": "2344040",
    "end": "2350359"
  },
  {
    "text": "is we want to measure the entirety of what is present",
    "start": "2350359",
    "end": "2356680"
  },
  {
    "text": "in that buffer we want to measure the variable size payload we also want to",
    "start": "2356680",
    "end": "2362280"
  },
  {
    "text": "measure all of the Venice metadata but there's more there's the",
    "start": "2362280",
    "end": "2367560"
  },
  {
    "text": "third thing in there which is the overhead of the Java objects themselves",
    "start": "2367560",
    "end": "2374160"
  },
  {
    "text": "right so every object in Java has a header the size of that header depends",
    "start": "2374160",
    "end": "2380960"
  },
  {
    "text": "on a bunch of different jvm settings including the Java version but also",
    "start": "2380960",
    "end": "2386560"
  },
  {
    "text": "whether it's 32bit or 64bit and whether the Heap size is under 32 gigs or not",
    "start": "2386560",
    "end": "2392400"
  },
  {
    "text": "and and then some other settings as well all of that influences what the header",
    "start": "2392400",
    "end": "2397520"
  },
  {
    "text": "size is and so if we want an accurate measurement of the contribution of that",
    "start": "2397520",
    "end": "2404359"
  },
  {
    "text": "bounded buffer to the Heap we need to take all of these components into",
    "start": "2404359",
    "end": "2409480"
  },
  {
    "text": "account the user payload the Venice metadata and the Java object overhead",
    "start": "2409480",
    "end": "2415880"
  },
  {
    "text": "and so we did some work in that space we also looked at some of the Shelf",
    "start": "2415880",
    "end": "2422280"
  },
  {
    "text": "libraries that do this there's a few open source ones like Joel eh cach has",
    "start": "2422280",
    "end": "2429440"
  },
  {
    "text": "something various systems have come up with their own kind of Heap siiz",
    "start": "2429440",
    "end": "2434520"
  },
  {
    "text": "estimator in the end none of the of the Shelf Solutions completely fit what we",
    "start": "2434520",
    "end": "2440760"
  },
  {
    "text": "wanted and so we ended up rolling out our own it's not that much code by the",
    "start": "2440760",
    "end": "2446720"
  },
  {
    "text": "way it's like a couple of classes a few hundred lines that that's about it it's",
    "start": "2446720",
    "end": "2451960"
  },
  {
    "text": "not like a huge piece of code but it was pretty interesting because as part",
    "start": "2451960",
    "end": "2457480"
  },
  {
    "text": "writing this I had to brush up on a lot of things I I had kind of superficial",
    "start": "2457480",
    "end": "2462880"
  },
  {
    "text": "knowledge about but I needed to kind of really clarify all of those details in",
    "start": "2462880",
    "end": "2468240"
  },
  {
    "text": "terms of how the Heap in Java works all the object structures are laid out and stuff and that ended up being this kind",
    "start": "2468240",
    "end": "2476240"
  },
  {
    "text": "of custom Heap measurement module so to speak or class inside the Venice code",
    "start": "2476240",
    "end": "2482800"
  },
  {
    "text": "base that now gives us precise measurements of these objects",
    "start": "2482800",
    "end": "2487960"
  },
  {
    "text": "so that was a pretty interesting project I thought yes that sounds quite interesting because it's kind of feels",
    "start": "2487960",
    "end": "2494520"
  },
  {
    "text": "like you mentioned while working with different version of java when you get started it's all about writing code but",
    "start": "2494520",
    "end": "2501880"
  },
  {
    "text": "then there are other things that are maybe the longtail of of the things when you're running them in production like",
    "start": "2501880",
    "end": "2507880"
  },
  {
    "text": "what version do you need to support for your organization because even if you would like to work with the shiny stuff",
    "start": "2507880",
    "end": "2513079"
  },
  {
    "text": "that is in Java 21 most of the systems are probably around in 11 or 17 but",
    "start": "2513079",
    "end": "2518760"
  },
  {
    "text": "there are still some Legacy systems that are still anchored in eight and when you're running in production again there",
    "start": "2518760",
    "end": "2524920"
  },
  {
    "text": "are a lot of things that you're not paying attention while you're writing and then it's about the optimization and even if it's about pretty much finding",
    "start": "2524920",
    "end": "2531920"
  },
  {
    "text": "the right balance the right sound for everything that is working so that's nice for those that are interested about",
    "start": "2531920",
    "end": "2538240"
  },
  {
    "text": "it it's not for everyone but I mean somebody has to do to do it pretty much that wraps my questions is there",
    "start": "2538240",
    "end": "2545359"
  },
  {
    "text": "anything else that I should have asked you but I didn't well if people want to learn more we have our documentation up",
    "start": "2545359",
    "end": "2552960"
  },
  {
    "text": "at Venice deb.org that includes all of the conference talks that we've given",
    "start": "2552960",
    "end": "2559680"
  },
  {
    "text": "other podcasts on the subject of Venice there's also a page in the documentation",
    "start": "2559680",
    "end": "2564839"
  },
  {
    "text": "about the stuff I just talked about like the Java Heap including a bunch of links",
    "start": "2564839",
    "end": "2570160"
  },
  {
    "text": "that I want to give credit to um Alexis chipev I used his blog post extensively",
    "start": "2570160",
    "end": "2576520"
  },
  {
    "text": "to brush up on my own knowledge and those are a treasure Trove I have a bunch of links to those in our Wiki and",
    "start": "2576520",
    "end": "2583960"
  },
  {
    "text": "if anybody wants to learn more hit us up we have a a community slack instance",
    "start": "2583960",
    "end": "2590160"
  },
  {
    "text": "that people can join freely and we do bi-weekly meaning once every two weeks",
    "start": "2590160",
    "end": "2596640"
  },
  {
    "text": "Community sync UPS on Zoom if anybody wants to come in and ask questions so",
    "start": "2596640",
    "end": "2602599"
  },
  {
    "text": "yeah that's about it as far as the project is concerned thank you thank you for time Felix thank you everybody for",
    "start": "2602599",
    "end": "2608920"
  },
  {
    "text": "listening to this podcast if you want to challenge Felix and his team about the",
    "start": "2608920",
    "end": "2614319"
  },
  {
    "text": "things that they build in VES theb they are available either on the community meetings that they have scheduled or",
    "start": "2614319",
    "end": "2619800"
  },
  {
    "text": "online through the the channel he already mentioned listen to infoq",
    "start": "2619800",
    "end": "2624839"
  },
  {
    "text": "podcast and hopefully see you guys around the qon event have a great day",
    "start": "2624839",
    "end": "2629920"
  },
  {
    "text": "thank you have a nice one",
    "start": "2629920",
    "end": "2633838"
  },
  {
    "text": "[Music]",
    "start": "2637830",
    "end": "2652489"
  }
]