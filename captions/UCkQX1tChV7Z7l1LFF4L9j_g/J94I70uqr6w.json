[
  {
    "text": "hi my name is sath lad and today on D",
    "start": "359",
    "end": "1880"
  },
  {
    "text": "tips we talk about exceptions you know",
    "start": "1880",
    "end": "3600"
  },
  {
    "text": "those errors that Bubble Up from deep",
    "start": "3600",
    "end": "5040"
  },
  {
    "text": "within the bowels of your program and",
    "start": "5040",
    "end": "6319"
  },
  {
    "text": "tell you where something went wrong",
    "start": "6319",
    "end": "8120"
  },
  {
    "text": "watch this episode so you won't be",
    "start": "8120",
    "end": "9480"
  },
  {
    "text": "caught off guard the next time you run",
    "start": "9480",
    "end": "11320"
  },
  {
    "text": "into a problem let's get",
    "start": "11320",
    "end": "13440"
  },
  {
    "text": "[Music]",
    "start": "13440",
    "end": "17480"
  },
  {
    "text": "started D uses exceptions when an error",
    "start": "17480",
    "end": "20240"
  },
  {
    "text": "or other exceptional event occurs inside",
    "start": "20240",
    "end": "22279"
  },
  {
    "text": "your program when a situation arises",
    "start": "22279",
    "end": "24519"
  },
  {
    "text": "that cannot be handled by the program or",
    "start": "24519",
    "end": "26199"
  },
  {
    "text": "runtime for example when the system runs",
    "start": "26199",
    "end": "28080"
  },
  {
    "text": "out of memory or invalid input was Prov",
    "start": "28080",
    "end": "29960"
  },
  {
    "text": "provided normal program execution stops",
    "start": "29960",
    "end": "32520"
  },
  {
    "text": "and an exception is created this",
    "start": "32520",
    "end": "34440"
  },
  {
    "text": "exception object is then thrown down the",
    "start": "34440",
    "end": "35920"
  },
  {
    "text": "call stack looking for someone to catch",
    "start": "35920",
    "end": "37440"
  },
  {
    "text": "it if no code handles the exception the",
    "start": "37440",
    "end": "39680"
  },
  {
    "text": "program exits common error cases include",
    "start": "39680",
    "end": "43320"
  },
  {
    "text": "out of memory invalid input incorrect",
    "start": "43320",
    "end": "45800"
  },
  {
    "text": "State transitions meaningless arguments",
    "start": "45800",
    "end": "47760"
  },
  {
    "text": "and more the dart SDK classifies most",
    "start": "47760",
    "end": "50680"
  },
  {
    "text": "problems as errors and thus most of the",
    "start": "50680",
    "end": "52320"
  },
  {
    "text": "exception class names in the SDK end",
    "start": "52320",
    "end": "54520"
  },
  {
    "text": "with error the name error is shorter",
    "start": "54520",
    "end": "56600"
  },
  {
    "text": "than exception and generally it's",
    "start": "56600",
    "end": "57920"
  },
  {
    "text": "nothing exceptional about many of the",
    "start": "57920",
    "end": "59359"
  },
  {
    "text": "problems they Flatout errors as in don't",
    "start": "59359",
    "end": "61440"
  },
  {
    "text": "do it for this video we'll use the name",
    "start": "61440",
    "end": "63760"
  },
  {
    "text": "exception to mean errors or exceptions",
    "start": "63760",
    "end": "65799"
  },
  {
    "text": "thrown by the program or runtime",
    "start": "65799",
    "end": "68040"
  },
  {
    "text": "normally you know an exception or error",
    "start": "68040",
    "end": "69439"
  },
  {
    "text": "has occurred when you encounter a stack",
    "start": "69439",
    "end": "71080"
  },
  {
    "text": "Trace they look something like this this",
    "start": "71080",
    "end": "73560"
  },
  {
    "text": "report is useful information to help you",
    "start": "73560",
    "end": "75080"
  },
  {
    "text": "determine what happened and where it",
    "start": "75080",
    "end": "76759"
  },
  {
    "text": "happened for example we know there was",
    "start": "76759",
    "end": "78640"
  },
  {
    "text": "an unhandled exception the exception was",
    "start": "78640",
    "end": "81720"
  },
  {
    "text": "bad State door already closed the",
    "start": "81720",
    "end": "83960"
  },
  {
    "text": "problem occurred inside the open door",
    "start": "83960",
    "end": "85400"
  },
  {
    "text": "method at line 14 in episode 09 Dart I",
    "start": "85400",
    "end": "89159"
  },
  {
    "text": "feel like it's a game of clue in the",
    "start": "89159",
    "end": "90600"
  },
  {
    "text": "parlor with the Candlestick on line 14",
    "start": "90600",
    "end": "93119"
  },
  {
    "text": "we can also trace the execution of the",
    "start": "93119",
    "end": "94600"
  },
  {
    "text": "program from the main function to the",
    "start": "94600",
    "end": "96159"
  },
  {
    "text": "open door method this is very useful",
    "start": "96159",
    "end": "98320"
  },
  {
    "text": "information when diagnosing and",
    "start": "98320",
    "end": "99680"
  },
  {
    "text": "debugging",
    "start": "99680",
    "end": "100799"
  },
  {
    "text": "exceptions okay with that introduction",
    "start": "100799",
    "end": "102759"
  },
  {
    "text": "let's look at some code there are four",
    "start": "102759",
    "end": "104439"
  },
  {
    "text": "specific Concepts to explore throw try",
    "start": "104439",
    "end": "106799"
  },
  {
    "text": "catch and finally each shows up a syntax",
    "start": "106799",
    "end": "109119"
  },
  {
    "text": "that you can use in your program in",
    "start": "109119",
    "end": "110880"
  },
  {
    "text": "general exceptions and dart aren't that",
    "start": "110880",
    "end": "112439"
  },
  {
    "text": "invasive for example you can throw any",
    "start": "112439",
    "end": "114560"
  },
  {
    "text": "non-null object Dart methods and",
    "start": "114560",
    "end": "116399"
  },
  {
    "text": "functions do not declare the exceptions",
    "start": "116399",
    "end": "118000"
  },
  {
    "text": "they can throw and you aren't required",
    "start": "118000",
    "end": "120079"
  },
  {
    "text": "to catch for exceptions a method might",
    "start": "120079",
    "end": "121560"
  },
  {
    "text": "throw to Signal an error or exception",
    "start": "121560",
    "end": "123399"
  },
  {
    "text": "has occurred use throw this is also",
    "start": "123399",
    "end": "125719"
  },
  {
    "text": "known as raising an exception here's an",
    "start": "125719",
    "end": "127799"
  },
  {
    "text": "example if the door is locked you can't",
    "start": "127799",
    "end": "129959"
  },
  {
    "text": "open it so the program signals this",
    "start": "129959",
    "end": "131959"
  },
  {
    "text": "problem by throwing an instance of State",
    "start": "131959",
    "end": "133680"
  },
  {
    "text": "error remember you can throw any non-n",
    "start": "133680",
    "end": "136200"
  },
  {
    "text": "object as an exception the darn SDK",
    "start": "136200",
    "end": "138640"
  },
  {
    "text": "ships classes for many common exceptions",
    "start": "138640",
    "end": "140760"
  },
  {
    "text": "and you can extend the exception class",
    "start": "140760",
    "end": "142239"
  },
  {
    "text": "to create your own more specific",
    "start": "142239",
    "end": "143920"
  },
  {
    "text": "exceptions for example you may want to",
    "start": "143920",
    "end": "146200"
  },
  {
    "text": "create a specific door locked error",
    "start": "146200",
    "end": "148200"
  },
  {
    "text": "class here's an example we'll cover",
    "start": "148200",
    "end": "150440"
  },
  {
    "text": "classes in a future episode but for now",
    "start": "150440",
    "end": "152400"
  },
  {
    "text": "it's enough to understand that door",
    "start": "152400",
    "end": "153840"
  },
  {
    "text": "locked error is a specific type of State",
    "start": "153840",
    "end": "155959"
  },
  {
    "text": "error when an object is thrown the",
    "start": "155959",
    "end": "157879"
  },
  {
    "text": "current function or method does not",
    "start": "157879",
    "end": "159319"
  },
  {
    "text": "continue and the exception object",
    "start": "159319",
    "end": "160800"
  },
  {
    "text": "travels through the stack looking for",
    "start": "160800",
    "end": "162519"
  },
  {
    "text": "someone to handle it normally you should",
    "start": "162519",
    "end": "164840"
  },
  {
    "text": "handle exceptions gracefully and provide",
    "start": "164840",
    "end": "166920"
  },
  {
    "text": "some sort of mitigation or feedback to",
    "start": "166920",
    "end": "168760"
  },
  {
    "text": "the user use the catch Clause to capture",
    "start": "168760",
    "end": "171319"
  },
  {
    "text": "exceptions here's an example wrap any",
    "start": "171319",
    "end": "174080"
  },
  {
    "text": "code that might throw an exception",
    "start": "174080",
    "end": "175400"
  },
  {
    "text": "inside of a tri block exceptions thrown",
    "start": "175400",
    "end": "177480"
  },
  {
    "text": "from within the tri block are handled by",
    "start": "177480",
    "end": "179040"
  },
  {
    "text": "the catch block the exception variable",
    "start": "179040",
    "end": "181319"
  },
  {
    "text": "is the exception object itself the stack",
    "start": "181319",
    "end": "183599"
  },
  {
    "text": "Trace object is no surprise here the",
    "start": "183599",
    "end": "185400"
  },
  {
    "text": "stack Trace it's important to note that",
    "start": "185400",
    "end": "187440"
  },
  {
    "text": "if Open Door throws an exception then",
    "start": "187440",
    "end": "189519"
  },
  {
    "text": "enter is never called control of the",
    "start": "189519",
    "end": "191720"
  },
  {
    "text": "program jumps to the catch block on",
    "start": "191720",
    "end": "193480"
  },
  {
    "text": "exception if an exception is caught you",
    "start": "193480",
    "end": "195840"
  },
  {
    "text": "will see the following output the first",
    "start": "195840",
    "end": "198440"
  },
  {
    "text": "line is the exception object and the",
    "start": "198440",
    "end": "199760"
  },
  {
    "text": "following lines are from the stack Trace",
    "start": "199760",
    "end": "201239"
  },
  {
    "text": "object here's a short example you can of",
    "start": "201239",
    "end": "203480"
  },
  {
    "text": "course name these variables however you",
    "start": "203480",
    "end": "204920"
  },
  {
    "text": "like you can even omit the stack Trace",
    "start": "204920",
    "end": "207760"
  },
  {
    "text": "some methods can throw different",
    "start": "207760",
    "end": "209040"
  },
  {
    "text": "exceptions based on different conditions",
    "start": "209040",
    "end": "210840"
  },
  {
    "text": "for example the enter method can throw a",
    "start": "210840",
    "end": "212560"
  },
  {
    "text": "state error if the door is not open or",
    "start": "212560",
    "end": "214799"
  },
  {
    "text": "it can throw an argument error if the",
    "start": "214799",
    "end": "216439"
  },
  {
    "text": "expected argument is null here's how you",
    "start": "216439",
    "end": "218519"
  },
  {
    "text": "catch different types of exceptions you",
    "start": "218519",
    "end": "220480"
  },
  {
    "text": "can use on to specify what kinds of",
    "start": "220480",
    "end": "222799"
  },
  {
    "text": "exceptions you want to catch you can",
    "start": "222799",
    "end": "224640"
  },
  {
    "text": "specify multiple on clauses and you can",
    "start": "224640",
    "end": "226840"
  },
  {
    "text": "specify catchall as the last catch",
    "start": "226840",
    "end": "229239"
  },
  {
    "text": "Clause you can use on or catch or both",
    "start": "229239",
    "end": "232640"
  },
  {
    "text": "if you don't care about the actual",
    "start": "232640",
    "end": "233920"
  },
  {
    "text": "exception object you can emit",
    "start": "233920",
    "end": "236200"
  },
  {
    "text": "catch sometimes you need to ensure code",
    "start": "236200",
    "end": "238319"
  },
  {
    "text": "runs no matter what whether or not an",
    "start": "238319",
    "end": "240319"
  },
  {
    "text": "exception is thrown use the finally",
    "start": "240319",
    "end": "242400"
  },
  {
    "text": "Clause to make sure code is always run",
    "start": "242400",
    "end": "244439"
  },
  {
    "text": "here's an example if no exception is",
    "start": "244439",
    "end": "246560"
  },
  {
    "text": "thrown finally runs if an exception is",
    "start": "246560",
    "end": "249120"
  },
  {
    "text": "thrown from within the tri Clause catch",
    "start": "249120",
    "end": "250959"
  },
  {
    "text": "runs and then finally runs in this",
    "start": "250959",
    "end": "253480"
  },
  {
    "text": "example the room is always reset to",
    "start": "253480",
    "end": "256000"
  },
  {
    "text": "recap darn as familiar try catch finally",
    "start": "256000",
    "end": "258720"
  },
  {
    "text": "Clauses you can throw any non-al object",
    "start": "258720",
    "end": "261160"
  },
  {
    "text": "as an exception and many common air",
    "start": "261160",
    "end": "263199"
  },
  {
    "text": "cases are found in the dart SDK you can",
    "start": "263199",
    "end": "265720"
  },
  {
    "text": "have many catch Clauses for a tri Clause",
    "start": "265720",
    "end": "267919"
  },
  {
    "text": "each for a specific exception type the",
    "start": "267919",
    "end": "270360"
  },
  {
    "text": "finally Clause runs whether or not an",
    "start": "270360",
    "end": "272160"
  },
  {
    "text": "exception was thrown client code is not",
    "start": "272160",
    "end": "274160"
  },
  {
    "text": "forced to catch for exceptions so it's",
    "start": "274160",
    "end": "276000"
  },
  {
    "text": "up to you to determine when and how to",
    "start": "276000",
    "end": "277759"
  },
  {
    "text": "handle potential errors thanks for",
    "start": "277759",
    "end": "279960"
  },
  {
    "text": "watching I'm Seth ladin as we say here",
    "start": "279960",
    "end": "281320"
  },
  {
    "text": "on Dart tips stay sharp click here to",
    "start": "281320",
    "end": "284120"
  },
  {
    "text": "subscribe to our channel for more",
    "start": "284120",
    "end": "285320"
  },
  {
    "text": "episodes of Dart tips we appreciate any",
    "start": "285320",
    "end": "287360"
  },
  {
    "text": "thoughts you might have for the series",
    "start": "287360",
    "end": "288639"
  },
  {
    "text": "please leave them in the comments below",
    "start": "288639",
    "end": "290800"
  },
  {
    "text": "if you have any additional questions",
    "start": "290800",
    "end": "291919"
  },
  {
    "text": "about Dart please drop by stack Overflow",
    "start": "291919",
    "end": "293960"
  },
  {
    "text": "where Dart experts are standing by to",
    "start": "293960",
    "end": "295400"
  },
  {
    "text": "help you out see you next time",
    "start": "295400",
    "end": "299199"
  }
]