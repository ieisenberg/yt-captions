[
  {
    "text": "hi everyone thanks for coming to the last talk of the day and spending it with me",
    "start": "4230",
    "end": "10100"
  },
  {
    "text": "so yeah I'm Anna I work at in your firm in the part Department called near from research and for me specifically that",
    "start": "10100",
    "end": "17550"
  },
  {
    "text": "means that I get to work on OGS core full-time which is pretty cool that like",
    "start": "17550",
    "end": "24570"
  },
  {
    "text": "adda LAX that's my Twitter and get up handle so on the schedule it says that",
    "start": "24570",
    "end": "30930"
  },
  {
    "text": "the slides will not be uploaded but I did check the box for uploading it on the conference website so I guess they",
    "start": "30930",
    "end": "37050"
  },
  {
    "text": "will appear there I will also post a link on Twitter if you want to look anything up yeah like I was introduced",
    "start": "37050",
    "end": "46979"
  },
  {
    "text": "so I did just come in from California and well yesterday when he was on the",
    "start": "46979",
    "end": "53670"
  },
  {
    "text": "train into the city here I overheard people talking about how sunny it is in London I mean I guess but yeah alright",
    "start": "53670",
    "end": "62250"
  },
  {
    "text": "let's talk about character okay thanks so this is the screenshot from a Travis",
    "start": "62250",
    "end": "70950"
  },
  {
    "text": "CI run that I ran a while back it's not that long ago it was earlier this year",
    "start": "70950",
    "end": "77119"
  },
  {
    "text": "but this buck has been around for a long time because I gave a talk about this topic in 2017 and March and they had",
    "start": "77119",
    "end": "84630"
  },
  {
    "text": "that back there already and I don't know who if you can tell why there are these replacement characters just like",
    "start": "84630",
    "end": "90719"
  },
  {
    "text": "randomly in the middle of the text if you can that's good because hopefully",
    "start": "90719",
    "end": "96929"
  },
  {
    "text": "you'll learn it right now",
    "start": "96929",
    "end": "100100"
  },
  {
    "text": "yeah we'll give me a second so so let's go back a seventh think about so why",
    "start": "105360",
    "end": "111300"
  },
  {
    "text": "does the carrot gang coding in the end when people do things with computers they tend to work in text forms whether",
    "start": "111300",
    "end": "117990"
  },
  {
    "text": "that's like programs or whether that is some other kind of input that they give",
    "start": "117990",
    "end": "123330"
  },
  {
    "text": "to the computer it's usually text and text is conceptually a list of",
    "start": "123330",
    "end": "129360"
  },
  {
    "text": "characters like that's what separates it from just random images on paper",
    "start": "129360",
    "end": "136770"
  },
  {
    "text": "and the idea with character encoding says so computers definitely prefer numbers so we take these characters and",
    "start": "136770",
    "end": "142920"
  },
  {
    "text": "we assign them numbers integers and then",
    "start": "142920",
    "end": "148470"
  },
  {
    "text": "we figure out a way to transcribe those integers into a list of bytes and that",
    "start": "148470",
    "end": "153780"
  },
  {
    "text": "whole process like going from text to a list of bytes that is known as encoding",
    "start": "153780",
    "end": "159030"
  },
  {
    "text": "and the reverse step is known as decoding for example this would be the standard ASCII approach to this",
    "start": "159030",
    "end": "166620"
  },
  {
    "text": "so like Hello is five set of work we will split that into five separate characters each of these characters is",
    "start": "166620",
    "end": "173610"
  },
  {
    "text": "being assigned a number and then well at least in this case we just take these",
    "start": "173610",
    "end": "179910"
  },
  {
    "text": "numbers and say okay each of this these numbers corresponds to one byte and the",
    "start": "179910",
    "end": "185280"
  },
  {
    "text": "final output but like once you once you",
    "start": "185280",
    "end": "193170"
  },
  {
    "text": "start working with more and more characters that system kind of breaks",
    "start": "193170",
    "end": "198299"
  },
  {
    "text": "down because when you say each character is one byte then you're stuck with 256",
    "start": "198299",
    "end": "205080"
  },
  {
    "text": "characters that doesn't work for more complicated use cases like Chinese characters what are we going to do about",
    "start": "205080",
    "end": "211170"
  },
  {
    "text": "that say the simplest version that you can do this as ASCII or at least",
    "start": "211170",
    "end": "218790"
  },
  {
    "text": "historically it's the most important one of the first character encodings that came into existence and the idea is okay",
    "start": "218790",
    "end": "226500"
  },
  {
    "text": "yeah we take about a hundred and twenty seven characters not all of these are",
    "start": "226500",
    "end": "233430"
  },
  {
    "text": "like printable character that you could see on paper but still and we assign each of them numbers so if",
    "start": "233430",
    "end": "239570"
  },
  {
    "text": "these are the decimal and hexadecimal values that we give them and we say each",
    "start": "239570",
    "end": "244670"
  },
  {
    "text": "of these values will just be encoded as a single byte and the final output I",
    "start": "244670",
    "end": "252880"
  },
  {
    "text": "will use hexadecimal represented in this stack doesn't really matter because the",
    "start": "252880",
    "end": "258980"
  },
  {
    "text": "exact values don't matter of it yeah just as the headsman and so like a ski",
    "start": "258980",
    "end": "264080"
  },
  {
    "text": "is a 7-bit character encoding and it covers most use cases that appear in the",
    "start": "264080",
    "end": "269570"
  },
  {
    "text": "English languages and like languages that use a similar alphabet which aren't all that many and that's pretty much it",
    "start": "269570",
    "end": "276320"
  },
  {
    "text": "like there's not a lot else that you can do with it we're just kind of",
    "start": "276320",
    "end": "281900"
  },
  {
    "text": "frustrating when you do want to support other languages yeah and as a side note",
    "start": "281900",
    "end": "287210"
  },
  {
    "text": "so like there are other character encoding stat historically were concurring with ASCII so for example",
    "start": "287210",
    "end": "294350"
  },
  {
    "text": "there's ebcdic which is basically only used on IBM mainframes these days and I",
    "start": "294350",
    "end": "300919"
  },
  {
    "text": "was thinking like for April Fool's this year I might want to open APR against note that has support for that character",
    "start": "300919",
    "end": "306620"
  },
  {
    "text": "encoding this again only supports idea in my friends it's not really in use since the Seven Keys I guess and and",
    "start": "306620",
    "end": "316100"
  },
  {
    "text": "well reality is stranger than fiction and do it now we actually do have an ABC ebcdic encoder in the note source tree",
    "start": "316100",
    "end": "322310"
  },
  {
    "text": "anyway because we actually support one of these weird IBM systems or start",
    "start": "322310",
    "end": "327320"
  },
  {
    "text": "supporting them but yeah anyway so so the first step towards making ASCII work",
    "start": "327320",
    "end": "335090"
  },
  {
    "text": "for other languages is to extend it and so the idea of behind a lot of the character encodings that came next in",
    "start": "335090",
    "end": "342910"
  },
  {
    "text": "particular the iso-8859 something something once and windows code pages was okay so ask you 7 bit which means we",
    "start": "342910",
    "end": "352280"
  },
  {
    "text": "have another 128 characters available and so we're just going to create a lot",
    "start": "352280",
    "end": "357410"
  },
  {
    "text": "of character encodings that covers some specific languages so for example",
    "start": "357410",
    "end": "362720"
  },
  {
    "text": "there's latin one which stands for iso 8859-1 but over the tongue a bit more nicely yeah",
    "start": "362720",
    "end": "372410"
  },
  {
    "text": "so that is for vests in languages like you can write Spanish French with it",
    "start": "372410",
    "end": "377890"
  },
  {
    "text": "languages like that German - yeah and then there's other",
    "start": "377890",
    "end": "385370"
  },
  {
    "text": "encodings for other languages like there's the Karelian variant in that standard there's the curly windows code page and",
    "start": "385370",
    "end": "393710"
  },
  {
    "text": "these are not necessarily compatible so I this is an example where where there's",
    "start": "393710",
    "end": "401000"
  },
  {
    "text": "characters in two different character encodings for the same languages so both for kerlick languages but if you encode",
    "start": "401000",
    "end": "408470"
  },
  {
    "text": "something as one of them and decode as another it will come out as garbage so that was also not a great situation of",
    "start": "408470",
    "end": "415220"
  },
  {
    "text": "all and again this doesn't really cover the like for example Chinese character use case something that people did for",
    "start": "415220",
    "end": "423380"
  },
  {
    "text": "that so this is just one example of a character encoding that was used for Chinese characters it's gbk and so the idea is okay 128",
    "start": "423380",
    "end": "434240"
  },
  {
    "text": "extra characters that's not enough right but we can say so if there's a character",
    "start": "434240",
    "end": "441140"
  },
  {
    "text": "that's not a ski so like with the upper bit set then the next part will also",
    "start": "441140",
    "end": "447140"
  },
  {
    "text": "count towards this character so it's either one byte a ski or two by Chinese character so like that gives you about",
    "start": "447140",
    "end": "454010"
  },
  {
    "text": "30,000 more characters we should still and enough to cover all of the Chinese",
    "start": "454010",
    "end": "459230"
  },
  {
    "text": "characters that exist but it's it's practical enough but yeah so so",
    "start": "459230",
    "end": "466550"
  },
  {
    "text": "basically the situation that one ended up with was like so there are hundreds",
    "start": "466550",
    "end": "471650"
  },
  {
    "text": "of character encodings out there which is not an exact generation actually and so say let's work on something that",
    "start": "471650",
    "end": "479330"
  },
  {
    "text": "works for everybody and so well I mean this xkcd kung is obviously somewhat",
    "start": "479330",
    "end": "485900"
  },
  {
    "text": "sarcastic but for character encodings that actually worked so what we ended up with is Unicode which is not an encoding",
    "start": "485900",
    "end": "494950"
  },
  {
    "text": "but it is like so it is a character set which says",
    "start": "494950",
    "end": "500120"
  },
  {
    "text": "each of these characters each of the characters work which I chose because the test well I'm not an ASCII character",
    "start": "500120",
    "end": "507290"
  },
  {
    "text": "in it to each of these characters we assign the number and that is unique",
    "start": "507290",
    "end": "513620"
  },
  {
    "text": "code and that should ideally cover all the use cases that were previously",
    "start": "513620",
    "end": "518779"
  },
  {
    "text": "covered by their encodings and then we specify an actual encoding and there's",
    "start": "518779",
    "end": "524720"
  },
  {
    "text": "multiple of those which define how to translate these integers into byte sequences select this utf-8 utf-16",
    "start": "524720",
    "end": "531490"
  },
  {
    "text": "utf-32 and quite a few others like utf-8 and utf-16 are the most important ones",
    "start": "531490",
    "end": "537560"
  },
  {
    "text": "and definitely the most important ones for javascript select yeah so the way",
    "start": "537560",
    "end": "546529"
  },
  {
    "text": "the unicode characters are usually spelled out is so u plus and then for",
    "start": "546529",
    "end": "553160"
  },
  {
    "text": "hex digits or five sometimes of the characters doesn't fit into the four hex digit range that is how you specify okay",
    "start": "553160",
    "end": "563029"
  },
  {
    "text": "this is the character I'm talking about does not specify how I did this encode it the numbering is comfortable with",
    "start": "563029",
    "end": "570170"
  },
  {
    "text": "with latin-1 it's like the first 256 Unicode characters I have this first four are",
    "start": "570170",
    "end": "576470"
  },
  {
    "text": "the 256 less than one character that's",
    "start": "576470",
    "end": "581570"
  },
  {
    "text": "actually kind of important for JavaScript too and so the maximum number",
    "start": "581570",
    "end": "587300"
  },
  {
    "text": "that one can have is like larger than 1 million so we'll have a little more than",
    "start": "587300",
    "end": "592850"
  },
  {
    "text": "1 million characters in total available for Unicode hopefully that's enough for the future OC right now there's like no",
    "start": "592850",
    "end": "602270"
  },
  {
    "text": "issue with with that it also includes emoji which is I guess something that",
    "start": "602270",
    "end": "608870"
  },
  {
    "text": "the Unicode standard is kind of famous for these days it's like every new version of the Unicode centers campus",
    "start": "608870",
    "end": "615230"
  },
  {
    "text": "comes with new emoji it has its own replacement character which is something that previous caring Kerrigan codings",
    "start": "615230",
    "end": "622370"
  },
  {
    "text": "didn't necessarily feature it's like there's a special character that can be used when something cannot be decoded",
    "start": "622370",
    "end": "627650"
  },
  {
    "text": "successfully and this is also the character encoding that we talk about when we use character",
    "start": "627650",
    "end": "635370"
  },
  {
    "text": "scapes in HTML or in JavaScript like that always refers to some Unicode code point the most common character encoding",
    "start": "635370",
    "end": "644610"
  },
  {
    "text": "that is used with unicode utf-8 which is well it's a variable length encoding",
    "start": "644610",
    "end": "650550"
  },
  {
    "text": "that for like the higher and higher the character number is the longer the byte",
    "start": "650550",
    "end": "656850"
  },
  {
    "text": "sequences and which is Susan in which it is encoded and in particular its ASCII",
    "start": "656850",
    "end": "662760"
  },
  {
    "text": "compatible like the ASCII characters in utf-8 are the ASCII characters as they",
    "start": "662760",
    "end": "667800"
  },
  {
    "text": "are in coda path which is very nice and",
    "start": "667800",
    "end": "674130"
  },
  {
    "text": "it's also a nice property of using the scheme like this particular byte",
    "start": "674130",
    "end": "679590"
  },
  {
    "text": "sequences don't really have to worry about how the actual bits are encoded but if there is something broken some",
    "start": "679590",
    "end": "688920"
  },
  {
    "text": "invalid byte in there when you decode it that won't break the coding up the rest",
    "start": "688920",
    "end": "694050"
  },
  {
    "text": "of the string success so for example if we will encode the screen using lesson 1",
    "start": "694050",
    "end": "699960"
  },
  {
    "text": "again this middle screen and then we decoded this u TV so this FC this is not a valid by than",
    "start": "699960",
    "end": "706980"
  },
  {
    "text": "utf-8 never ever it is and so so what we",
    "start": "706980",
    "end": "713760"
  },
  {
    "text": "can do we can actually just replace it with this replacing character instead of having it gobble up all the rest off the",
    "start": "713760",
    "end": "720510"
  },
  {
    "text": "screen then there 2g of 16 she's 2 byte",
    "start": "720510",
    "end": "725730"
  },
  {
    "text": "code units so like 650,000 and",
    "start": "725730",
    "end": "732720"
  },
  {
    "text": "characters that can be encoded like in a single to bad unit once that do not fit",
    "start": "732720",
    "end": "738600"
  },
  {
    "text": "into that range they are split into two separate pairs off well code units and",
    "start": "738600",
    "end": "747080"
  },
  {
    "text": "and because it uses two bytes there are two different variants I don't know if you are familiar with that but there's",
    "start": "747080",
    "end": "753570"
  },
  {
    "text": "generally like little endian machines and big endian machines some of them put",
    "start": "753570",
    "end": "758640"
  },
  {
    "text": "like the little nu once put the low byte first and then the higher value byte",
    "start": "758640",
    "end": "764010"
  },
  {
    "text": "big-endian the reverse situation most modern processors use little endian",
    "start": "764010",
    "end": "770520"
  },
  {
    "text": "so that's for example wide notice only supports that variant yeah and and one",
    "start": "770520",
    "end": "777360"
  },
  {
    "text": "thing that can be used with in this case well sometimes is used in this case it's",
    "start": "777360",
    "end": "783540"
  },
  {
    "text": "a special character which is called the byte order mark which is sometimes prepended to a utf-16 strings so that",
    "start": "783540",
    "end": "789510"
  },
  {
    "text": "you can figure out okay this is littleengine or this is big endian just by looking at",
    "start": "789510",
    "end": "795090"
  },
  {
    "text": "the first bytes of the screen and so when we were talking earlier just before",
    "start": "795090",
    "end": "801300"
  },
  {
    "text": "the stock me and Richard he was like well JavaScript still uses this 16 bit encoding scheme and well so",
    "start": "801300",
    "end": "811830"
  },
  {
    "text": "sometimes I hear people say that Yahoo's computer 16 bits not quite correct because it doesn't well the spec doesn't",
    "start": "811830",
    "end": "818190"
  },
  {
    "text": "tell you how the characters are actually encoded in the engine it doesn't tell",
    "start": "818190",
    "end": "823410"
  },
  {
    "text": "you anything about that but it could be utf-16 and general Java screen genes are",
    "start": "823410",
    "end": "830880"
  },
  {
    "text": "very clever about this so you don't really need to worry about it well we do",
    "start": "830880",
    "end": "837120"
  },
  {
    "text": "use curly codes from zero to six hundred fifty thousand and six if 65,000 sorry",
    "start": "837120",
    "end": "847070"
  },
  {
    "text": "and we do split code units that don't like code points that don't fit into",
    "start": "847070",
    "end": "852840"
  },
  {
    "text": "that range into two separate units so for example if we use emoji which shall don't fit into that that basic set of",
    "start": "852840",
    "end": "860820"
  },
  {
    "text": "characters then we will split them into two separate ones so in a way javascript gives us well it uses a string",
    "start": "860820",
    "end": "868290"
  },
  {
    "text": "representation that is very much based on utf-16 but again how the actual representation looks like this bank",
    "start": "868290",
    "end": "875550"
  },
  {
    "text": "doesn't say anything about it and so I so for v8 I know this because I work a lot with great spider monkey Chow",
    "start": "875550",
    "end": "882020"
  },
  {
    "text": "Firefox is JavaScript engine seems to do the same thing well they do have a representation that is that works for",
    "start": "882020",
    "end": "888300"
  },
  {
    "text": "Latin one only thing as strings so if your screen is mostly a skier",
    "start": "888300",
    "end": "895640"
  },
  {
    "text": "mostly let Western legend characters then it it will probably try to use that",
    "start": "895640",
    "end": "902540"
  },
  {
    "text": "representation instead to save spice to save save memory yeah but again like",
    "start": "902540",
    "end": "910940"
  },
  {
    "text": "don't overthink it there are tons of different string representations in modern JavaScript engines and yeah so",
    "start": "910940",
    "end": "920540"
  },
  {
    "text": "the way that you use these character and currents in JavaScript well the way basic thing you want to do is you want",
    "start": "920540",
    "end": "925760"
  },
  {
    "text": "to convert between the screen and you want to convert between on while a list of bytes which in JavaScript is usually",
    "start": "925760",
    "end": "931190"
  },
  {
    "text": "you and eight array or noches a buffer which is also just a fancy kind of unit",
    "start": "931190",
    "end": "936890"
  },
  {
    "text": "or E and notice you what you can use this buffer dart from to you to encode",
    "start": "936890",
    "end": "943220"
  },
  {
    "text": "the screen into a buffer and then use buffer to string to do the reverse transformation the browser has text",
    "start": "943220",
    "end": "951649"
  },
  {
    "text": "encoder and text decoder API that allow you to do that so you can create",
    "start": "951649",
    "end": "957110"
  },
  {
    "text": "instances of these classes text accordant text encoder and call encode",
    "start": "957110",
    "end": "962329"
  },
  {
    "text": "and decode messages and they perform that conversion also between strings and",
    "start": "962329",
    "end": "967850"
  },
  {
    "text": "q and a trace and modern noches versions also support these like no.12 half-half",
    "start": "967850",
    "end": "974870"
  },
  {
    "text": "these as Global's for no ten you need to require the manually from a module but",
    "start": "974870",
    "end": "980000"
  },
  {
    "text": "so one thing to notice there is that so",
    "start": "980000",
    "end": "985370"
  },
  {
    "text": "text encoders supports a wide range of encoding which makes sense because brothers have to support a number of",
    "start": "985370",
    "end": "990890"
  },
  {
    "text": "legacy encodings as well anyway because they have to read the legacy websites in",
    "start": "990890",
    "end": "996140"
  },
  {
    "text": "those and codings but for encoding they only support utf-8 so that's very much",
    "start": "996140",
    "end": "1002170"
  },
  {
    "text": "pushing people towards using utf-8 everyone which is generally a good thing and if you ever wonder about what",
    "start": "1002170",
    "end": "1011620"
  },
  {
    "text": "happens when the text decoder encounters something invalid well usually just replaces it with a brute iseman",
    "start": "1011620",
    "end": "1016690"
  },
  {
    "text": "character design so like this 0xff character that is again never you valid",
    "start": "1016690",
    "end": "1022390"
  },
  {
    "text": "utf-8 you can also pass a flag turd that says hey this please throw an exception if",
    "start": "1022390",
    "end": "1029569"
  },
  {
    "text": "there is something wrong in that Tsering that cannot be decoded I don't generally know what you would want to do that or",
    "start": "1029569",
    "end": "1037428"
  },
  {
    "text": "at least not if you actually want to decode a screen you would probably only use this for testing whether a buffer",
    "start": "1037429",
    "end": "1043970"
  },
  {
    "text": "contains valid utf-8 or not because if you want to decode a string like you",
    "start": "1043970",
    "end": "1048980"
  },
  {
    "text": "know you can usually just live within it with a replacement character by showing up it's not an ideal situation and",
    "start": "1048980",
    "end": "1055280"
  },
  {
    "text": "something went wrong somewhere but by evade yeah you're still in work with something that mostly works and that is",
    "start": "1055280",
    "end": "1061730"
  },
  {
    "text": "your goal right but anyway let's select let's go back to that so one of the",
    "start": "1061730",
    "end": "1068690"
  },
  {
    "text": "reasons I picked this particular example is this kind of problem is something that pops up in there no chess issue",
    "start": "1068690",
    "end": "1073850"
  },
  {
    "text": "trackers don't get up from time to time and it is something that like that even note core contributors get wrong or tend",
    "start": "1073850",
    "end": "1080120"
  },
  {
    "text": "to get wrong from time to time when writing tests for our test suit so like",
    "start": "1080120",
    "end": "1085429"
  },
  {
    "text": "what is wrong with this code example and this is a note chess code example but you could figure out something similar",
    "start": "1085429",
    "end": "1091940"
  },
  {
    "text": "with like the text decoder in the browser well the first thing that I'm",
    "start": "1091940",
    "end": "1098660"
  },
  {
    "text": "just noticing right now is that data should have been let instead of Const but let's look over that okay so there's",
    "start": "1098660",
    "end": "1108800"
  },
  {
    "text": "a string whenever standard input gets some chunk of data some buffer we appended to that string and once the",
    "start": "1108800",
    "end": "1117530"
  },
  {
    "text": "standard input is all read we write it out again so so uniq has actually",
    "start": "1117530",
    "end": "1123440"
  },
  {
    "text": "command like this that's called sponge it's like it sponges up all the data and then precedence out at the end one when",
    "start": "1123440",
    "end": "1129650"
  },
  {
    "text": "the input is done but anyways so what is wrong with this so first him that I can",
    "start": "1129650",
    "end": "1137690"
  },
  {
    "text": "give you is that so when you concatenate the string and object and buffer",
    "start": "1137690",
    "end": "1143150"
  },
  {
    "text": "oriented right is an object that I will call to screen on that object and well",
    "start": "1143150",
    "end": "1150050"
  },
  {
    "text": "yeah in this case it always calls it on the buffer so we call tostring on each",
    "start": "1150050",
    "end": "1155360"
  },
  {
    "text": "in the your buffer here okay so what is the",
    "start": "1155360",
    "end": "1162540"
  },
  {
    "text": "case in which this can go wrong so we don't yeah I have questions at the end I",
    "start": "1162540",
    "end": "1172650"
  },
  {
    "text": "would suggest so what can happen is we",
    "start": "1172650",
    "end": "1178380"
  },
  {
    "text": "don't control the size or the boundaries of the buffer chains that we read from standard input so for example when input",
    "start": "1178380",
    "end": "1186360"
  },
  {
    "text": "is nil what can happen in the worst case is that it gets split right in the",
    "start": "1186360",
    "end": "1191490"
  },
  {
    "text": "middle of the you character so for example we could read from the operating",
    "start": "1191490",
    "end": "1197640"
  },
  {
    "text": "system first 2 bytes then 3 bytes and when we call to string on these",
    "start": "1197640",
    "end": "1203190"
  },
  {
    "text": "individually it won't work because each of these contains parts of a valid",
    "start": "1203190",
    "end": "1208710"
  },
  {
    "text": "character but not an entire one so we will end up with M replaced Murray replacement ll just what happens here so",
    "start": "1208710",
    "end": "1217800"
  },
  {
    "text": "what Travis CI actually does internally probably is it reads data from the terminal that it created and it converts",
    "start": "1217800",
    "end": "1224880"
  },
  {
    "text": "it to a screen and it does it for each chunk that reads yeah which is you know",
    "start": "1224880",
    "end": "1232830"
  },
  {
    "text": "because these chunks are usually rather large I would guess like a couple of kilobytes at least it doesn't happen for",
    "start": "1232830",
    "end": "1240120"
  },
  {
    "text": "every single character in the output and it doesn't happen when you know you",
    "start": "1240120",
    "end": "1245490"
  },
  {
    "text": "happen to hit not hit a character boundary so it works 99% of the time but",
    "start": "1245490",
    "end": "1252060"
  },
  {
    "text": "sometimes it fails and that's what happening here so the way to fix this",
    "start": "1252060",
    "end": "1259140"
  },
  {
    "text": "emerges is very easy actually because screens have a set encoding method that",
    "start": "1259140",
    "end": "1264390"
  },
  {
    "text": "basically tells us that the screen hey I don't want to read buffers I want to",
    "start": "1264390",
    "end": "1269880"
  },
  {
    "text": "read Springs and I want to read them using this encoding that you used to decode the buffers and it will take care",
    "start": "1269880",
    "end": "1275820"
  },
  {
    "text": "of decoding automatically and it will take care of cases like the one that we just saw where you know partial",
    "start": "1275820",
    "end": "1283080"
  },
  {
    "text": "characters might be read and the way that it works internally is",
    "start": "1283080",
    "end": "1290170"
  },
  {
    "text": "so cenotes has the string decoder class",
    "start": "1290170",
    "end": "1295420"
  },
  {
    "text": "which is a very lightweight kind of transform screen eating so you can use",
    "start": "1295420",
    "end": "1303560"
  },
  {
    "text": "it to like write buffers to it and I will try to decode them and when it",
    "start": "1303560",
    "end": "1308570"
  },
  {
    "text": "encounters partial characters at the end of the buffer it will wait for the next buffer before I continues decoding and",
    "start": "1308570",
    "end": "1317260"
  },
  {
    "text": "the text encoder API and the browser actually has a similar feature which is",
    "start": "1317260",
    "end": "1323420"
  },
  {
    "text": "called scream so again screaming decoding I will do exactly the same",
    "start": "1323420",
    "end": "1328760"
  },
  {
    "text": "thing like if there's a partial character at the end of the input it will wait for that character to be",
    "start": "1328760",
    "end": "1334640"
  },
  {
    "text": "finished before continuing with decoding and actually I think that's kind of a",
    "start": "1334640",
    "end": "1340640"
  },
  {
    "text": "funny pattern that that there are some noches API is that person should use their that later became browser ApS in a",
    "start": "1340640",
    "end": "1348200"
  },
  {
    "text": "very different format so for example we had buffers which in the browser were later introduces you and a trace or in",
    "start": "1348200",
    "end": "1354350"
  },
  {
    "text": "the language you know same with screen decoder and texting order same with screams and what about Yuji",
    "start": "1354350",
    "end": "1360740"
  },
  {
    "text": "screams only and so on but yeah like I",
    "start": "1360740",
    "end": "1365870"
  },
  {
    "text": "said so Java Script uses the same pattern as utf-16 for dealing with characters that don't fit into that",
    "start": "1365870",
    "end": "1371690"
  },
  {
    "text": "basic 65,000 character range so so for",
    "start": "1371690",
    "end": "1377990"
  },
  {
    "text": "example when I take a clown emoji that is actually two separate units in JavaScript and the screen length will be",
    "start": "1377990",
    "end": "1383930"
  },
  {
    "text": "reported as two so like as well not characters but two units in that screen",
    "start": "1383930",
    "end": "1389620"
  },
  {
    "text": "so how do we actually get the actual number of the characters like how do we work with this fact that you know every",
    "start": "1389620",
    "end": "1397850"
  },
  {
    "text": "entry in spring is not necessarily a single character so there's an easy option for doing this and so strength in",
    "start": "1397850",
    "end": "1405620"
  },
  {
    "text": "JavaScript there iterables which means you can expand them into a race and you",
    "start": "1405620",
    "end": "1411530"
  },
  {
    "text": "can iterate over them with far-off and that will do the right thing so for",
    "start": "1411530",
    "end": "1417740"
  },
  {
    "text": "example when you expand the screen like that it will well I will give you an array",
    "start": "1417740",
    "end": "1424190"
  },
  {
    "text": "where each individual entry is also an individual character even though that",
    "start": "1424190",
    "end": "1430429"
  },
  {
    "text": "last one is actually made of two well a character go this way and again if you",
    "start": "1430429",
    "end": "1437900"
  },
  {
    "text": "want the like number of characters and the sense of Unicode code points within the single string you can use far-off to",
    "start": "1437900",
    "end": "1444200"
  },
  {
    "text": "iterate over that it's not maybe the prettiest thing in the world but it it",
    "start": "1444200",
    "end": "1449299"
  },
  {
    "text": "is definitely more accurate than string dot length for this case and the other",
    "start": "1449299",
    "end": "1454669"
  },
  {
    "text": "options so like JavaScript has some abs to do manual extraction of code code",
    "start": "1454669",
    "end": "1461600"
  },
  {
    "text": "points from a string so yeah long long",
    "start": "1461600",
    "end": "1466610"
  },
  {
    "text": "time ago all we had was string Dutch are coded and spring thought from char code",
    "start": "1466610",
    "end": "1472510"
  },
  {
    "text": "which which well it did the right thing in the sense that it gave you the",
    "start": "1472510",
    "end": "1478340"
  },
  {
    "text": "content of a string at a particular index but it didn't give you the code point in the case that it didn't fit",
    "start": "1478340",
    "end": "1484340"
  },
  {
    "text": "into that again 65,000 character range and so some newer ApS were introduced",
    "start": "1484340",
    "end": "1491029"
  },
  {
    "text": "which are call start code point at and screen the from code point which basically deal with these the way you",
    "start": "1491029",
    "end": "1496250"
  },
  {
    "text": "would expect them to I get if their character doesn't fit into the range it will decode the entire character and",
    "start": "1496250",
    "end": "1503419"
  },
  {
    "text": "tell you okay so this is the actual Unicode code point the actual unicode",
    "start": "1503419",
    "end": "1508669"
  },
  {
    "text": "number associated with that character so",
    "start": "1508669",
    "end": "1517010"
  },
  {
    "text": "this one is option also an issue that sometimes also not that often but it's one of these things where you're like if",
    "start": "1517010",
    "end": "1523010"
  },
  {
    "text": "you don't know why this is happening then then you don't know and if you know",
    "start": "1523010",
    "end": "1529010"
  },
  {
    "text": "that this is happening then you know and you're like wow when I've thought that or do least I was safe so we have two",
    "start": "1529010",
    "end": "1537470"
  },
  {
    "text": "regular especially one checks whether it happens or curse in spring two to four times one whether the cat emoji so",
    "start": "1537470",
    "end": "1545570"
  },
  {
    "text": "occurs two to four times and it works in the case of the e and it doesn't work in the case of the cat",
    "start": "1545570",
    "end": "1551330"
  },
  {
    "text": "which is which kind of looks surprising to me at least and well the reason that",
    "start": "1551330",
    "end": "1559760"
  },
  {
    "text": "this is happening is that so the cat emoji again it's two separate units and",
    "start": "1559760",
    "end": "1565670"
  },
  {
    "text": "the way the JavaScript interprets that string is like so it says the first half of the cat want and then two to four",
    "start": "1565670",
    "end": "1572720"
  },
  {
    "text": "times the second half of the cat which which then doesn't match that to cat",
    "start": "1572720",
    "end": "1579920"
  },
  {
    "text": "example and there's an easy solution luckily so javascript drug regular",
    "start": "1579920",
    "end": "1585830"
  },
  {
    "text": "expressions have received this unicode flag that you can set on them we're just",
    "start": "1585830",
    "end": "1591530"
  },
  {
    "text": "a small you and it basically makes this work correctly and it it's generally",
    "start": "1591530",
    "end": "1597830"
  },
  {
    "text": "something that you want to set on regular expressions like there's no reason to ever not do this and also so",
    "start": "1597830",
    "end": "1606170"
  },
  {
    "text": "when I first heard that JavaScript regular expressions had Unicode support I was really excited to see if they",
    "start": "1606170",
    "end": "1611300"
  },
  {
    "text": "hadn't like carried the class support or something like that and back when they were first had it they didn't but now",
    "start": "1611300",
    "end": "1618050"
  },
  {
    "text": "they actually do this is not supported like an old browser yet so apparently sadly Firefox which I",
    "start": "1618050",
    "end": "1625460"
  },
  {
    "text": "personally use and doesn't but it's gonna come at some point so you can use",
    "start": "1625460",
    "end": "1632180"
  },
  {
    "text": "this backslash P escape to figure out information to match characters based on",
    "start": "1632180",
    "end": "1637960"
  },
  {
    "text": "some metadata that exists about them it's like there's a ton of different unicode classes of characters for",
    "start": "1637960",
    "end": "1644990"
  },
  {
    "text": "example this one emoji representation at presentation that's why you can use for",
    "start": "1644990",
    "end": "1650570"
  },
  {
    "text": "this to actually figure out very reliably what characters in a string are",
    "start": "1650570",
    "end": "1656060"
  },
  {
    "text": "emerging yeah yeah so another thing that",
    "start": "1656060",
    "end": "1668020"
  },
  {
    "text": "unicode did so one of the rules that unicode has when it infuses characters",
    "start": "1668020",
    "end": "1673940"
  },
  {
    "text": "is that if that character she exists in a previous character encoding and it is",
    "start": "1673940",
    "end": "1679940"
  },
  {
    "text": "separate from from other characters then it is also can be separate in única so like I don't know",
    "start": "1679940",
    "end": "1686210"
  },
  {
    "text": "if you remember for example from the slides Photoshop the two korilla character in coins there's a gorilla claw case a and the Latin lowercase a",
    "start": "1686210",
    "end": "1693110"
  },
  {
    "text": "which look exactly the same and and so",
    "start": "1693110",
    "end": "1698840"
  },
  {
    "text": "nowadays if we didn't have previous character encodings that separated these two we would probably not have separate",
    "start": "1698840",
    "end": "1705320"
  },
  {
    "text": "code points for them in Unicode but again these there's legacy code out there in the world they are separate in",
    "start": "1705320",
    "end": "1711530"
  },
  {
    "text": "Unicode this is not what this is about this is about the fact that Unicode",
    "start": "1711530",
    "end": "1719210"
  },
  {
    "text": "characters can be composed in different ways so so yeah show this in a bit more",
    "start": "1719210",
    "end": "1729590"
  },
  {
    "text": "like this is what you get when you try to expand these into separate code points and for example with you with the",
    "start": "1729590",
    "end": "1737240"
  },
  {
    "text": "French name Andre when you get us you get that a and D are those are equal in",
    "start": "1737240",
    "end": "1743510"
  },
  {
    "text": "both of these screens but in one of them you get two separate code points and one",
    "start": "1743510",
    "end": "1749059"
  },
  {
    "text": "of them a single one the reason for this is that so one of them is an E Plus a",
    "start": "1749059",
    "end": "1755450"
  },
  {
    "text": "combining accent character which unicode features like you can't have characters",
    "start": "1755450",
    "end": "1760669"
  },
  {
    "text": "that you can just put on other characters or below or whatever like I think that's pretty much how you get",
    "start": "1760669",
    "end": "1766640"
  },
  {
    "text": "style script and you can also just have a key with an accent character on its",
    "start": "1766640",
    "end": "1771830"
  },
  {
    "text": "own and for the Korean Hangul example below you get the possibility that well I",
    "start": "1771830",
    "end": "1780049"
  },
  {
    "text": "don't know if you know how Korean works but basically each of these two characters you can think of them as like",
    "start": "1780049",
    "end": "1786710"
  },
  {
    "text": "being composed of three separate letters just like not written in a single row so",
    "start": "1786710",
    "end": "1792200"
  },
  {
    "text": "you can either have like well this is the Korean word angle which is the script name it's like the name of the",
    "start": "1792200",
    "end": "1798440"
  },
  {
    "text": "alphabet basically so you could either either write as hang plus cool and",
    "start": "1798440",
    "end": "1804110"
  },
  {
    "text": "Unicode RHA and gu l basically",
    "start": "1804110",
    "end": "1808870"
  },
  {
    "text": "there ways to deal with this in JavaScript luckily and the way to do that is screen that for dive normalize",
    "start": "1809200",
    "end": "1816250"
  },
  {
    "text": "which so you can call that on any screen and you can basically do the two things",
    "start": "1816250",
    "end": "1821380"
  },
  {
    "text": "that you want to do with them either you can make each combine character be as combined as possible it's like the e",
    "start": "1821380",
    "end": "1828130"
  },
  {
    "text": "with the accent as a single one or the hand as a single one two or you can call",
    "start": "1828130",
    "end": "1835870"
  },
  {
    "text": "it with a parameter net nfg instead of NFC and that's saying so like please",
    "start": "1835870",
    "end": "1841000"
  },
  {
    "text": "decompose these as much as possible it's like e with an accent and two",
    "start": "1841000",
    "end": "1846700"
  },
  {
    "text": "separate ones are hang again three separate ones and you may want to like",
    "start": "1846700",
    "end": "1852190"
  },
  {
    "text": "use this when comparing strings because what you end up with is characters that look the same and that behave the same",
    "start": "1852190",
    "end": "1858669"
  },
  {
    "text": "and that should be equivalent but they don't compare equal in the sense of JavaScript equality going a bit further",
    "start": "1858669",
    "end": "1867220"
  },
  {
    "text": "there's like two more parameters that scream dot normalize can take so another",
    "start": "1867220",
    "end": "1873669"
  },
  {
    "text": "thing that people do and you might have mostly noticed from I don't know fancy Twitter handles or Twitter names so you",
    "start": "1873669",
    "end": "1881409"
  },
  {
    "text": "can use characters that are variants of base characters so for example this word",
    "start": "1881409",
    "end": "1886809"
  },
  {
    "text": "hello the first time it's written on the screen is with mathematical bold letters",
    "start": "1886809",
    "end": "1892330"
  },
  {
    "text": "so the way that you would use them in math script and and you may want to be",
    "start": "1892330",
    "end": "1900039"
  },
  {
    "text": "able to figure out like so what are the base characters that correspond to this for this you have to be parameter mode n",
    "start": "1900039",
    "end": "1906190"
  },
  {
    "text": "FK c or n FK d which well well they",
    "start": "1906190",
    "end": "1912490"
  },
  {
    "text": "first convert the character to devolve to its base variant and then do the same",
    "start": "1912490",
    "end": "1917559"
  },
  {
    "text": "thing in samba page before so either combine the Marquis compose them and",
    "start": "1917559",
    "end": "1922600"
  },
  {
    "text": "this is something that first of all you may want to apply this to search parameters because but conceptually like",
    "start": "1922600",
    "end": "1931389"
  },
  {
    "text": "these strings have the same semantic meaning right and",
    "start": "1931389",
    "end": "1937889"
  },
  {
    "text": "yeah I don't know so for example if you were like writing a profanity filter for usernames or something you wouldn't want",
    "start": "1938350",
    "end": "1945110"
  },
  {
    "text": "somebody to circumvent that just by using fancy letters instead of their standard equivalents say yeah like I",
    "start": "1945110",
    "end": "1955040"
  },
  {
    "text": "said screen holding doesn't give us a number of characters what does it actually give us while characters can be composed of multiple characters so it",
    "start": "1955040",
    "end": "1961820"
  },
  {
    "text": "doesn't give us that they can be split into two separate units if they are don't fit into the basic set of them as",
    "start": "1961820",
    "end": "1969820"
  },
  {
    "text": "65,000 characters and it also doesn't give us the string with so like if you remember for that Hangul example the",
    "start": "1969820",
    "end": "1976400"
  },
  {
    "text": "string length was six years there was six different characters even though it",
    "start": "1976400",
    "end": "1982790"
  },
  {
    "text": "would only have a string with of well far because each fire east asian",
    "start": "1982790",
    "end": "1988040"
  },
  {
    "text": "character would typically be counted as having a width of two supposed to like latin characters which in the terminal",
    "start": "1988040",
    "end": "1994010"
  },
  {
    "text": "half well they usually have as wide as they are tall right but still yeah it's",
    "start": "1994010",
    "end": "1999920"
  },
  {
    "text": "definitely not accurate to say that that has a width of six so like the only",
    "start": "1999920",
    "end": "2005230"
  },
  {
    "text": "thing that it really gives you is half the battle length when you're encoding at this utf-16 so if you ever use the",
    "start": "2005230",
    "end": "2011770"
  },
  {
    "text": "length of a string like make sure that you're using it for the right thing because it's easy to something to use it",
    "start": "2011770",
    "end": "2017170"
  },
  {
    "text": "for something that is accurate 99% of the time but fails sometimes so yeah and",
    "start": "2017170",
    "end": "2027640"
  },
  {
    "text": "like I said it doesn't give you the string width which I guess some browsers you can work around that and you will",
    "start": "2027640",
    "end": "2032980"
  },
  {
    "text": "have to account for the font anyway but for CLI applications that's a bit different sorry so no chess has this",
    "start": "2032980",
    "end": "2039640"
  },
  {
    "text": "built-in console the table tool which does the same thing as it doesn't browsers and it automatically figures",
    "start": "2039640",
    "end": "2047200"
  },
  {
    "text": "out that the emoji that I use here is wider than the other strings in that",
    "start": "2047200",
    "end": "2052690"
  },
  {
    "text": "table like it figures out that the second was the third column should be a",
    "start": "2052690",
    "end": "2059110"
  },
  {
    "text": "bit larger than two the second one basically the only way to do this properly is not do it yourself you can",
    "start": "2059110",
    "end": "2066820"
  },
  {
    "text": "use an NPM module that does this it's called string with and it gives you the right thing but",
    "start": "2066820",
    "end": "2073020"
  },
  {
    "text": "again screen or length wouldn't like it would give you a very unpleasant break",
    "start": "2073020",
    "end": "2080280"
  },
  {
    "text": "in that right border of the table so if",
    "start": "2080280",
    "end": "2087690"
  },
  {
    "text": "you are interested I can actually try to demo this real quick so I have these",
    "start": "2087690",
    "end": "2095460"
  },
  {
    "text": "characters copied here because I don't know how to type them on my keyboard but",
    "start": "2095460",
    "end": "2101190"
  },
  {
    "text": "so I'm going to start node which is this case master version but it's could also",
    "start": "2101190",
    "end": "2107520"
  },
  {
    "text": "be no 13 it has the same issue there so",
    "start": "2107520",
    "end": "2113310"
  },
  {
    "text": "I just typed that 3 and then the length and it works but the display is obviously broken in some way and I don't",
    "start": "2113310",
    "end": "2120120"
  },
  {
    "text": "know quite know what is going on there if you use the DVD",
    "start": "2120120",
    "end": "2126630"
  },
  {
    "text": "ok so sorry to tell them apart when they look the same if you use the other one",
    "start": "2126630",
    "end": "2132900"
  },
  {
    "text": "variant where they're composed then we'll do the right thing like it won't have this display back with the",
    "start": "2132900",
    "end": "2138230"
  },
  {
    "text": "autocomplete so if you're interested in if this talk is really giving you the energy of hey I want to work on",
    "start": "2138230",
    "end": "2145220"
  },
  {
    "text": "internationalization stuff and encoding issues feel free to reach out to me and",
    "start": "2145220",
    "end": "2150420"
  },
  {
    "text": "tell me if you want to look into this I think it might be that we want to always call that NFC before trying to compute",
    "start": "2150420",
    "end": "2157920"
  },
  {
    "text": "this width of the string buddy and I don't know if that's what you're actually happening",
    "start": "2157920",
    "end": "2163770"
  },
  {
    "text": "yeah if nobody comes up to me after this talk I'll just post an issue on Dino Chisora coupe that I thought this might",
    "start": "2163770",
    "end": "2170790"
  },
  {
    "text": "be interesting for somebody okay how am i doing on time",
    "start": "2170790",
    "end": "2176130"
  },
  {
    "text": "there's no clock here okay not too bad",
    "start": "2176130",
    "end": "2183980"
  },
  {
    "text": "okay so notice also has support for",
    "start": "2186549",
    "end": "2191859"
  },
  {
    "text": "string for encoding that you can password that is called binary and I'm",
    "start": "2191859",
    "end": "2196910"
  },
  {
    "text": "gonna tell you why you should never use it so so in the early days of JavaScript",
    "start": "2196910",
    "end": "2203150"
  },
  {
    "text": "we did not have you and a jury we did not necessarily have no chess buffers",
    "start": "2203150",
    "end": "2208910"
  },
  {
    "text": "for example in a browser environment and we still wanted to work with binary data",
    "start": "2208910",
    "end": "2213950"
  },
  {
    "text": "in some way and so there are there are two approaches that you can take to that",
    "start": "2213950",
    "end": "2219079"
  },
  {
    "text": "there you're gonna be like okay well I'm just gonna use a race of numbers between 0 and 255 and that is my binary data",
    "start": "2219079",
    "end": "2228200"
  },
  {
    "text": "type in that case or you were using screens and the idea was that so you",
    "start": "2228200",
    "end": "2234529"
  },
  {
    "text": "could use the well use or abuse the code points 0 through 255 to represent the",
    "start": "2234529",
    "end": "2241069"
  },
  {
    "text": "bytes 0 through 255 which kind of gives you these kinds of strings where the",
    "start": "2241069",
    "end": "2247609"
  },
  {
    "text": "characters are mostly garbage and do not have any meaning yeah please don't do",
    "start": "2247609",
    "end": "2255079"
  },
  {
    "text": "that anymore you need array of buffers those are the solutions that we have for",
    "start": "2255079",
    "end": "2261619"
  },
  {
    "text": "this problem and and if you think about it so like again the first hundred",
    "start": "2261619",
    "end": "2266960"
  },
  {
    "text": "fifty-five Unicode code points they are exactly the ones from from Latin one",
    "start": "2266960",
    "end": "2272089"
  },
  {
    "text": "from iso-8859 one so that is what the",
    "start": "2272089",
    "end": "2277369"
  },
  {
    "text": "actual encoding name is and if you want to use Latin one then be explicit about",
    "start": "2277369",
    "end": "2283039"
  },
  {
    "text": "that fact and don't just call it binary because of the name is really really misleading and again this is something that pops up under issue trackers a lot",
    "start": "2283039",
    "end": "2291880"
  },
  {
    "text": "because people think when they say some something something with the encoding",
    "start": "2291880",
    "end": "2298999"
  },
  {
    "text": "binary that will it will take the text and converts to binary but usually what",
    "start": "2298999",
    "end": "2304249"
  },
  {
    "text": "you want to do for encoding text into binary data is use utf-8 and not well",
    "start": "2304249",
    "end": "2312170"
  },
  {
    "text": "binary doesn't really eight is it's not a good name for that because all character encoding",
    "start": "2312170",
    "end": "2317950"
  },
  {
    "text": "that they all convert text to binary data and because of the way that Latin",
    "start": "2317950",
    "end": "2326980"
  },
  {
    "text": "one is implemented in noches so if you passing characters that don't fit into",
    "start": "2326980",
    "end": "2332230"
  },
  {
    "text": "Latin one it will just truncate off the first half of that believable",
    "start": "2332230",
    "end": "2337630"
  },
  {
    "text": "I'm trying it out the higher eight bits of that character so what you can",
    "start": "2337630",
    "end": "2343150"
  },
  {
    "text": "actually end up with and this is a problem that I have seen in the Y all this you can have two unicode screens",
    "start": "2343150",
    "end": "2350260"
  },
  {
    "text": "which map to the same byte sequence when encoded with this binary encoding our",
    "start": "2350260",
    "end": "2355329"
  },
  {
    "text": "Latin one really and that's not good for example because when you want to hash data or hashes screen you will usually",
    "start": "2355329",
    "end": "2364119"
  },
  {
    "text": "want to hash its entire contents and make sure that it's unique but if you have strings where we're two strings map",
    "start": "2364119",
    "end": "2372490"
  },
  {
    "text": "to the same bytes before they are encoded then you will get two strings that map to the same hash if you use the",
    "start": "2372490",
    "end": "2378339"
  },
  {
    "text": "binary encoding ain't really not something you want to do and so I don't",
    "start": "2378339",
    "end": "2384250"
  },
  {
    "text": "know how many of you use patent a lot in your daily lives but this is kind of one",
    "start": "2384250",
    "end": "2389410"
  },
  {
    "text": "of the things that PI thing to didn't really get right and that everybody try to or fix with Python 3 I mean if you",
    "start": "2389410",
    "end": "2396310"
  },
  {
    "text": "use path know like you already know this but biases like the original Python to",
    "start": "2396310",
    "end": "2402339"
  },
  {
    "text": "its strings were kind of equivalent to these binary strings and that just",
    "start": "2402339",
    "end": "2407890"
  },
  {
    "text": "really didn't work out the way that anybody wanted it to and I think the only use case they currently still",
    "start": "2407890",
    "end": "2413800"
  },
  {
    "text": "remains for these is the a to b and b to a methods and browsers that do base64",
    "start": "2413800",
    "end": "2420069"
  },
  {
    "text": "conversion because if they do work with binary screens and that is just because",
    "start": "2420069",
    "end": "2426520"
  },
  {
    "text": "they simply predate you and at array there's no other reason for that and",
    "start": "2426520",
    "end": "2431910"
  },
  {
    "text": "yeah so you can basically consider them legacy api's at this point say yes so",
    "start": "2431910",
    "end": "2440770"
  },
  {
    "text": "for the character in coins that merges the south of words when there's a ski and I really really really don't know",
    "start": "2440770",
    "end": "2446410"
  },
  {
    "text": "why we do that because the way that ascii works emerges it is well when you encode it it will do",
    "start": "2446410",
    "end": "2455340"
  },
  {
    "text": "the same thing as encoding using Latin one but it will cut off the highest bit so like for letting one characters that",
    "start": "2455340",
    "end": "2461100"
  },
  {
    "text": "are not ASCII will just simply give you another one that is ASCII but that has no relation to the original one and well",
    "start": "2461100",
    "end": "2470580"
  },
  {
    "text": "yeah it basically does the same thing as encoding using Latin Latin one but with some extra steps and uh yeah no",
    "start": "2470580",
    "end": "2478700"
  },
  {
    "text": "definitely not just regret that we're stuck with for the rest of eternity but",
    "start": "2478700",
    "end": "2483770"
  },
  {
    "text": "with utf-8 utf-16 littleengine so because most of modern processors are",
    "start": "2483770",
    "end": "2490530"
  },
  {
    "text": "the little endian base so that's a bit easier to use they're also also like",
    "start": "2490530",
    "end": "2497790"
  },
  {
    "text": "because v8 already gives us a way to deal with utf-16 and utf-32 already use",
    "start": "2497790",
    "end": "2504810"
  },
  {
    "text": "v8 facilities we don't have to do the encoding or decoding mechanisms ourselves and energy of course there is",
    "start": "2504810",
    "end": "2511620"
  },
  {
    "text": "an alias for youtube 16 which is called UCS - that is kind of the legacy name",
    "start": "2511620",
    "end": "2516780"
  },
  {
    "text": "for YouTube 16 in a way that doesn't support characters outside of the basics",
    "start": "2516780",
    "end": "2523130"
  },
  {
    "text": "65,000 range at all which is basically",
    "start": "2523130",
    "end": "2528390"
  },
  {
    "text": "why you always want to use full utf-16 at this point and sounds like like we know just does support big endian",
    "start": "2528390",
    "end": "2534750"
  },
  {
    "text": "machines but but unless it actually does manually reverse the byte order when it",
    "start": "2534750",
    "end": "2541530"
  },
  {
    "text": "encodes or decodes using utf-16 we have latin-1 which as i have just a plain it",
    "start": "2541530",
    "end": "2547380"
  },
  {
    "text": "it's equivalent to binary which you should never never use and we have basics different hex and this can be a",
    "start": "2547380",
    "end": "2554070"
  },
  {
    "text": "bit confusing to use those don't those are not like the others it's like four",
    "start": "2554070",
    "end": "2559290"
  },
  {
    "text": "character encodings three general thing you want to do is you want to encode texas bytes so string two bytes is",
    "start": "2559290",
    "end": "2565890"
  },
  {
    "text": "encoding and the reverse is decoding for basis different hex well it's reverse situation it's a",
    "start": "2565890",
    "end": "2575600"
  },
  {
    "text": "can ya okay this is where it spelled correctly I have a typo on the next page so those are binary-to-text encoding",
    "start": "2576150",
    "end": "2582680"
  },
  {
    "text": "which means that screen to bite this is actually decoding and the reverses",
    "start": "2582680",
    "end": "2588390"
  },
  {
    "text": "encoding that that should usually not be any issues but it can be confusing",
    "start": "2588390",
    "end": "2594450"
  },
  {
    "text": "because it means that buffers are from and buffer due to string they can either encode or decode each of",
    "start": "2594450",
    "end": "2600690"
  },
  {
    "text": "one of them depending on what encoding parameter you use well okay so in the",
    "start": "2600690",
    "end": "2610410"
  },
  {
    "text": "end everybody uses utf-8 now anyway but as you have seen there are still some issues that you can run into even if you",
    "start": "2610410",
    "end": "2616529"
  },
  {
    "text": "don't worry about this all too much sometimes like obviously legacy code and",
    "start": "2616529",
    "end": "2623880"
  },
  {
    "text": "like it's a website is this I don't have to tell you about that sometimes people don't know that they don't use utf-8 so",
    "start": "2623880",
    "end": "2629579"
  },
  {
    "text": "again like this sometimes use misuse of the binary encoding or sometimes they",
    "start": "2629579",
    "end": "2637410"
  },
  {
    "text": "just don't think about it sometimes they just notice that buffer the two string gives them a string and they don't care",
    "start": "2637410",
    "end": "2643440"
  },
  {
    "text": "that it's encoded using utf-8 also so",
    "start": "2643440",
    "end": "2651059"
  },
  {
    "text": "the not just for system API supports buffers for the path names which might",
    "start": "2651059",
    "end": "2656579"
  },
  {
    "text": "be interesting because he would usually expect that you for a path name you pass on a screen this was actually had been",
    "start": "2656579",
    "end": "2663029"
  },
  {
    "text": "added because our company had a client that did makes multiple encodings in its",
    "start": "2663029",
    "end": "2671460"
  },
  {
    "text": "directory path names it's like you would have a directory with that whose name",
    "start": "2671460",
    "end": "2676619"
  },
  {
    "text": "was encoding used one encoding and another directory inside that that was encoded using a different encoding yeah",
    "start": "2676619",
    "end": "2685730"
  },
  {
    "text": "well again like I said legacy code right",
    "start": "2686720",
    "end": "2691760"
  },
  {
    "text": "so that was actually motivated by a real use case that you can just figure out",
    "start": "2691849",
    "end": "2697740"
  },
  {
    "text": "how to encode picked the the path in two bytes and then submit that buffer to",
    "start": "2697740",
    "end": "2705359"
  },
  {
    "text": "denote file system eight the use in the end noches interacts with",
    "start": "2705359",
    "end": "2710730"
  },
  {
    "text": "the operating system purely based on bites to like there's no way to pass in screens or anything that conceptually",
    "start": "2710730",
    "end": "2717690"
  },
  {
    "text": "consists of characters when it talks to the operating system that's always invites whether that's for file paths",
    "start": "2717690",
    "end": "2723870"
  },
  {
    "text": "are for writing data to a network sagar or something there are never any characters involved so it's always an",
    "start": "2723870",
    "end": "2731130"
  },
  {
    "text": "encoding step in between also I don't know how many of you use the native C or C++ windows API is there a big big sense",
    "start": "2731130",
    "end": "2738600"
  },
  {
    "text": "of utf-16 they kind of made the wrong bet on that before you DFA was really",
    "start": "2738600",
    "end": "2743970"
  },
  {
    "text": "popular I think so basically they support one sub most windows method",
    "start": "2743970",
    "end": "2750900"
  },
  {
    "text": "support one ASCII mode and when you give 60 mod like I said even when you see",
    "start": "2750900",
    "end": "2757050"
  },
  {
    "text": "they read things can still go wrong even the Q Khan website didn't accept the talk title at fairness so like I had to",
    "start": "2757050",
    "end": "2765570"
  },
  {
    "text": "manually edit the replacement character in the middle begin yeah so one thing",
    "start": "2765570",
    "end": "2772350"
  },
  {
    "text": "that I want you to think about that just like a closing thought for this is so why are we all using utf-8 anyway and",
    "start": "2772350",
    "end": "2778580"
  },
  {
    "text": "the reason that well there are a number of reasons why it's nice to use utf-8 but one big reason is it's backwards",
    "start": "2778580",
    "end": "2785190"
  },
  {
    "text": "compatible with fast like you can write code for ASCII and it will work 99",
    "start": "2785190",
    "end": "2791100"
  },
  {
    "text": "percent of the time with utf-8 characters which is really your goal in",
    "start": "2791100",
    "end": "2796110"
  },
  {
    "text": "the end you don't want to have to really",
    "start": "2796110",
    "end": "2801390"
  },
  {
    "text": "write all of software basically to to get to its data frame where you have a",
    "start": "2801390",
    "end": "2806400"
  },
  {
    "text": "nice encoding I truly believe that if we really all made the switch for example",
    "start": "2806400",
    "end": "2811620"
  },
  {
    "text": "from utf-8 utf-16 in our applications we would have a lot less issues with encodings because it would have been a",
    "start": "2811620",
    "end": "2818100"
  },
  {
    "text": "clean break and any time you write new code for that uses utf-16 you would have to think about how this affects your",
    "start": "2818100",
    "end": "2825780"
  },
  {
    "text": "application but the world as it is is a big fan of backwards compatibility and",
    "start": "2825780",
    "end": "2832340"
  },
  {
    "text": "where where you can write code the way you're used to it",
    "start": "2832340",
    "end": "2838500"
  },
  {
    "text": "and not have to think about this so yeah that was it oh yeah actually I have a list of",
    "start": "2838500",
    "end": "2844800"
  },
  {
    "text": "resources and I did want to show some of them so one thing that I used a lot",
    "start": "2844800",
    "end": "2850350"
  },
  {
    "text": "during this talk is the Unicode command that was me was it anyway so you can do",
    "start": "2850350",
    "end": "2858060"
  },
  {
    "text": "pretty cool stuff with that like it can you can give it a spring and it will tell you the Unicode code points how it",
    "start": "2858060",
    "end": "2864360"
  },
  {
    "text": "looks like when you encode it in some ways you give 8 or utf-16 what category",
    "start": "2864360",
    "end": "2870510"
  },
  {
    "text": "is it and all that kind of stuff you can also do the reverse thing so you can get",
    "start": "2870510",
    "end": "2881460"
  },
  {
    "text": "all the cat faces by grabbing for it basically using the cat face for exact expression I didn't know the word that",
    "start": "2881460",
    "end": "2888180"
  },
  {
    "text": "many but yeah it's a super handy tool for if you're dealing with unicode",
    "start": "2888180",
    "end": "2893190"
  },
  {
    "text": "characters in general there is also icon which is which basically it's a",
    "start": "2893190",
    "end": "2900890"
  },
  {
    "text": "character encoding conversion tool so I can say hey I can pipe it in there and",
    "start": "2900890",
    "end": "2909630"
  },
  {
    "text": "okay so this won't work because well because my terminal is configured to use",
    "start": "2909630",
    "end": "2916020"
  },
  {
    "text": "utf-8 is everybody's terminal should be but for example we can hex some bit and then you'll see okay so it does prevent",
    "start": "2916020",
    "end": "2922800"
  },
  {
    "text": "this very special character fffe to make clear this is the byte order mark this",
    "start": "2922800",
    "end": "2928530"
  },
  {
    "text": "is the byte order that we're going to use in this case it takes little endian",
    "start": "2928530",
    "end": "2933930"
  },
  {
    "text": "[Music] and then it well okay so this is the actual screen this is the actual screen",
    "start": "2933930",
    "end": "2943950"
  },
  {
    "text": "when I coded as utf-16 and then there's then there's a newline afterwards but anyway yes so i",
    "start": "2943950",
    "end": "2951060"
  },
  {
    "text": "confiscate there are also note bindings for it if you really need to deal with great character encodings I have a list",
    "start": "2951060",
    "end": "2958620"
  },
  {
    "text": "of Enghien pages that are pretty useful but I guess you would be able to google them yourselves if you want to if you",
    "start": "2958620",
    "end": "2965190"
  },
  {
    "text": "want to learn about something there's also the emerges buffer API Docs which are okay",
    "start": "2965190",
    "end": "2971390"
  },
  {
    "text": "I did go through them a couple times with the saga now I definitely picked up",
    "start": "2971390",
    "end": "2977099"
  },
  {
    "text": "a lot of things that should be explained a lot better yeah this is it again",
    "start": "2977099",
    "end": "2983730"
  },
  {
    "text": "handle is adda lax and I will upload the slides and post a link everything well",
    "start": "2983730",
    "end": "3017420"
  },
  {
    "text": "at the points where you need to deal with encoding you should always use utf-8 like utf-8 does support the full",
    "start": "3017420",
    "end": "3025069"
  },
  {
    "text": "range of Unicode characters supports eclectus Akal you the same one says duty of 32 or utf-16 yeah the the issues only",
    "start": "3025069",
    "end": "3035300"
  },
  {
    "text": "pop up basically were like the question mark issues the replacement errors they only pop up when you mix different and",
    "start": "3035300",
    "end": "3041630"
  },
  {
    "text": "coatings and because everybody's basically standardized on utf-8 right now you will want to use that for for",
    "start": "3041630",
    "end": "3049130"
  },
  {
    "text": "everything",
    "start": "3049130",
    "end": "3051640"
  },
  {
    "text": "yeah if you mix those if you decode with one an encode with another and let's like I work out if you have any other",
    "start": "3057200",
    "end": "3065220"
  },
  {
    "text": "questions I'll be available anyway right okay thank you very much and thank you very much going to the JavaScript fast",
    "start": "3065220",
    "end": "3071839"
  }
]