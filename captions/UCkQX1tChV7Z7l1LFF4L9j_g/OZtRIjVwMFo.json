[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "hello and welcome thanks for coming i understand the time standing between you and the beer",
    "start": "4560",
    "end": "9840"
  },
  {
    "text": "i'll try to be a little bit entertaining as much as i can",
    "start": "9840",
    "end": "15120"
  },
  {
    "text": "or keep you awake so you kind of get your beer eventually so let me start off with a question",
    "start": "15120",
    "end": "22720"
  },
  {
    "start": "21000",
    "end": "21000"
  },
  {
    "text": "who here draws their file system quick show of hands if you believe in your file system what",
    "start": "22720",
    "end": "29840"
  },
  {
    "text": "five people let's say do you know all the config options that go with it do you configure journaling",
    "start": "29840",
    "end": "35520"
  },
  {
    "text": "and other means to make sure this thing is reliable and crash tolerant so let me first scare",
    "start": "35520",
    "end": "42320"
  },
  {
    "text": "you here we're going to look at the paper from 2014. all file systems are not",
    "start": "42320",
    "end": "48239"
  },
  {
    "text": "created equal by pili and the rest who did a study",
    "start": "48239",
    "end": "54320"
  },
  {
    "text": "of six common linux file systems so x ext234 better fs",
    "start": "54320",
    "end": "62399"
  },
  {
    "text": "ryzerfest and don't you know what was the six",
    "start": "62399",
    "end": "67520"
  },
  {
    "text": "and they looked at the basic properties so what i mean file systems what do they provide right so",
    "start": "67520",
    "end": "73200"
  },
  {
    "text": "it's your basic means to store something in a disk so you have the file system obstruction what kind of guarantees they have so you",
    "start": "73200",
    "end": "79840"
  },
  {
    "text": "basically have a posix standard and file systems kind of implement the api sort of this way",
    "start": "79840",
    "end": "85200"
  },
  {
    "text": "but what that really means so what is went on to study actually the properties",
    "start": "85200",
    "end": "90960"
  },
  {
    "text": "that the file system have and whether those properties hold under different error conditions",
    "start": "90960",
    "end": "97360"
  },
  {
    "text": "so say they decided to kind of stress test those file systems and they built an application called blocked",
    "start": "97360",
    "end": "104399"
  },
  {
    "text": "order breaker which they then used to inject",
    "start": "104399",
    "end": "109920"
  },
  {
    "text": "the errors into the file systems and what they found was this and i'm sorry at the back you can't read that",
    "start": "109920",
    "end": "116399"
  },
  {
    "text": "it's just directly copied from the paper so basically they started the file systems and the properties under two different",
    "start": "116399",
    "end": "122560"
  },
  {
    "text": "axes one is atomicity of certain operations like writing single block of data writing",
    "start": "122560",
    "end": "127600"
  },
  {
    "text": "multiple blocks of data and then the atomicity of the instruction it's like can you do atomic rename of a file or",
    "start": "127600",
    "end": "134959"
  },
  {
    "text": "atomically append to the end of the file or this stuff and what basically they found in all the",
    "start": "134959",
    "end": "140319"
  },
  {
    "text": "tested configurations in which they had about 16 different ones that all of the file systems",
    "start": "140319",
    "end": "145760"
  },
  {
    "text": "exhibit list one error at least on one of the axes and some of them are really horribly fail almost all of them on all of them",
    "start": "145760",
    "end": "153280"
  },
  {
    "text": "so that's first finding so your file system the common ones uh even the ones that are default and",
    "start": "153280",
    "end": "159200"
  },
  {
    "text": "the predecessors like linux are not reliable or at least not reliable in the",
    "start": "159200",
    "end": "164720"
  },
  {
    "text": "configurations they used like if you look at the data journaling bits here i'm not sure uh this doesn't work",
    "start": "164720",
    "end": "171440"
  },
  {
    "text": "and so the data journaling bits here just have one error until multi-block append and rights the rest is good so you can get some",
    "start": "171440",
    "end": "179200"
  },
  {
    "text": "levels of guarantees and reliability of them but prepared to be surprised but that",
    "start": "179200",
    "end": "184480"
  },
  {
    "text": "was just one part of the study and that's the basic proof okay this is the building block but people don't use the file systems",
    "start": "184480",
    "end": "192000"
  },
  {
    "text": "directly you interact with applications you build applications on top of them so how does your application handle errors",
    "start": "192000",
    "end": "198000"
  },
  {
    "text": "so for that they built another program called alice where they inject error into the",
    "start": "198000",
    "end": "203680"
  },
  {
    "text": "application and they took a couple that you might recognize from",
    "start": "203680",
    "end": "208720"
  },
  {
    "text": "here like git mercurial a couple of databases here and they subjected them to",
    "start": "208720",
    "end": "214560"
  },
  {
    "text": "faults injected at the file system level like what happens if certain rights are reordered or errored",
    "start": "214560",
    "end": "221440"
  },
  {
    "text": "so you get an error from a syscall how does the application behave and what what is the end result",
    "start": "221440",
    "end": "226959"
  },
  {
    "text": "well the end result was quite bad because they found um across all of the applications that",
    "start": "226959",
    "end": "232400"
  },
  {
    "text": "there are multiple errors that they're subjected to and then final conditions were like from silently ignoring errors so",
    "start": "232400",
    "end": "238480"
  },
  {
    "text": "silently not giving you the data to data corruption data loss and like imagine you have you have a git or",
    "start": "238480",
    "end": "244400"
  },
  {
    "text": "something and then you lose your data so your commits and stuff disappeared",
    "start": "244400",
    "end": "249840"
  },
  {
    "text": "so and that's a horror story number one if that still doesn't scare you and you",
    "start": "249840",
    "end": "255760"
  },
  {
    "text": "still believe that stuff is good you know you can write stuff to disk reliably um well let's look to another paper because",
    "start": "255760",
    "end": "262320"
  },
  {
    "text": "2014 you know it's like six years ago i'm sure all the problems have been fixed people thinking about better fast",
    "start": "262320",
    "end": "268720"
  },
  {
    "text": "maturing zfs and whatnot so sure good stuff so um in this research redundancy does",
    "start": "268720",
    "end": "276320"
  },
  {
    "text": "not imply in fault tolerance researchers did a different spin so we have distributed systems",
    "start": "276320",
    "end": "282639"
  },
  {
    "text": "distributed data storage systems particular and like and they have a cluster of nodes right for redundancy",
    "start": "282639",
    "end": "289120"
  },
  {
    "text": "so you have multiple copies of stuff you have clusters with leaders and followers and everything is cool",
    "start": "289120",
    "end": "294880"
  },
  {
    "text": "and those been they've been lots of research going on there is a japson io and you know where people start aware",
    "start": "294880",
    "end": "303680"
  },
  {
    "text": "of like what happens if network partitioning goes uh you know we have experience in network partitioning what happens to witnesses to the distributed",
    "start": "303680",
    "end": "310240"
  },
  {
    "text": "system and people actually addressing those problems well what these guys did it's like what",
    "start": "310240",
    "end": "316800"
  },
  {
    "text": "happened to our distributed system which is super high available multi-node thing if we just have one",
    "start": "316800",
    "end": "323680"
  },
  {
    "text": "single file system error just one that thing so what they did they started six and",
    "start": "323680",
    "end": "332080"
  },
  {
    "text": "actually i think they said actually eight distributed systems and they found this",
    "start": "332080",
    "end": "338000"
  },
  {
    "text": "lots of text but basically all of them fail and some of them fail catastrophically",
    "start": "338000",
    "end": "343520"
  },
  {
    "text": "where a single corrupted node can infect the cluster and take down the entire system and make it an unavailable but what's",
    "start": "343520",
    "end": "350880"
  },
  {
    "text": "also important and interesting uh by the way those of course have versions that particularly been tested",
    "start": "350880",
    "end": "355919"
  },
  {
    "text": "i'm sure that most if not all of the problems that they found in their research been already addressed",
    "start": "355919",
    "end": "362080"
  },
  {
    "text": "and but what's what's when generally more interesting what they found is that although you have a distributed system",
    "start": "362080",
    "end": "368479"
  },
  {
    "text": "which has redundancy as at its core because you have multiple nodes um running and the advantage of using this",
    "start": "368479",
    "end": "376560"
  },
  {
    "text": "derivative system to handle things like file system error is not there so those systems don't have",
    "start": "376560",
    "end": "381840"
  },
  {
    "text": "protocols to say okay this thing is corrupted well i'll just blow up you know",
    "start": "381840",
    "end": "386880"
  },
  {
    "text": "this node is going down and if the node is leader the whole thing is just somehow or i have this error and i'm the leader",
    "start": "386880",
    "end": "392479"
  },
  {
    "text": "so i'm going to infect all the followers so and they kind of you know come up",
    "start": "392479",
    "end": "397600"
  },
  {
    "text": "with this like list of five things that they think that systems are doing bad and kind of direct where where we",
    "start": "397600",
    "end": "404800"
  },
  {
    "text": "should kind of direct the research of do for doing these things okay if you have a fault tolerant distributed system",
    "start": "404800",
    "end": "410960"
  },
  {
    "text": "maybe you should also include like a protocols for recovery of",
    "start": "410960",
    "end": "416720"
  },
  {
    "text": "corrupted data and especially if it's like metadata and some stuff that sometimes lives in one single copy and then",
    "start": "416720",
    "end": "422880"
  },
  {
    "text": "this thing goes back all right so you know yeah i'm not writing a distributed",
    "start": "422880",
    "end": "429360"
  },
  {
    "text": "system my thing is a website i'm just a simple back-end developer whatever it doesn't affect me",
    "start": "429360",
    "end": "434400"
  },
  {
    "text": "and by the way i'm using zfs well for that i'll leave you with this quote",
    "start": "434400",
    "end": "439680"
  },
  {
    "text": "i'll give you some time to read",
    "start": "439680",
    "end": "451840"
  },
  {
    "text": "so don't use it okay and so i give you the problem right the",
    "start": "462960",
    "end": "469440"
  },
  {
    "text": "problem statement so right and disk unreliable if something written you distribute the system the whole",
    "start": "469440",
    "end": "476160"
  },
  {
    "text": "thing might crash and burn so basically we're talking about two different problems here one problem how do you detect such",
    "start": "476160",
    "end": "482560"
  },
  {
    "text": "problems it's like how do you know that something is corrupt how do you know the data is correct and",
    "start": "482560",
    "end": "488400"
  },
  {
    "text": "second problem how do you recover from it um i'm gonna touch on the first one the detection bit",
    "start": "488400",
    "end": "494400"
  },
  {
    "text": "um corruption you basically look into distributed systems into a cluster of things and building",
    "start": "494400",
    "end": "500639"
  },
  {
    "text": "protocols on top of a cluster to kind of where do i get my data which node has a good data how do you know that the data",
    "start": "500639",
    "end": "506240"
  },
  {
    "text": "is good again um thing so how do you detect those things",
    "start": "506240",
    "end": "511840"
  },
  {
    "text": "um it's of course crc so we are back to to the basics for those who forgot or",
    "start": "511840",
    "end": "518320"
  },
  {
    "text": "didn't know um if you looked at wikipedia which is a source of human knowledge right as everybody knows",
    "start": "518320",
    "end": "523518"
  },
  {
    "text": "and you can trust everything nobody can edit the page right and anyways cyclic redundancy check so um an error",
    "start": "523519",
    "end": "530320"
  },
  {
    "text": "code technique um so you you run checksum over the chunk of data you attach this checksum",
    "start": "530320",
    "end": "535680"
  },
  {
    "text": "together with the data and then you send this data over for example then you read the data you do the checksum again using the same",
    "start": "535680",
    "end": "541120"
  },
  {
    "text": "algorithm if checksum match you know there wasn't there was no tampering with it data didn't broke the same works was persistent storage",
    "start": "541120",
    "end": "547920"
  },
  {
    "text": "you write it to disk at some point you run i don't know what recovery check some validator whatever or simple",
    "start": "547920",
    "end": "555200"
  },
  {
    "text": "program that say database starts up reads from disk is it still valid it's tough still good okay so we want to do crc",
    "start": "555200",
    "end": "562000"
  },
  {
    "text": "in particular um i want to um you know just doing crc and kind of",
    "start": "562000",
    "end": "567839"
  },
  {
    "text": "like describe these carbons in in terms of um hand waving is good thing but it's not",
    "start": "567839",
    "end": "574080"
  },
  {
    "text": "not that useful so um let's say you are you are building distributed system",
    "start": "574080",
    "end": "579360"
  },
  {
    "text": "or you are um kind of building a part of it or using",
    "start": "579360",
    "end": "584800"
  },
  {
    "text": "like a basic building block called a log append only sequence of records",
    "start": "584800",
    "end": "591040"
  },
  {
    "text": "written not overwritten you always continue continuously writing to the same thing so you're writing a log and so when you",
    "start": "591040",
    "end": "598320"
  },
  {
    "text": "write the log you want to do checksumming of the log and then let's say you replaying the log because you",
    "start": "598320",
    "end": "604560"
  },
  {
    "text": "need to replicate this to another machine or you want to compute something over it",
    "start": "604560",
    "end": "609920"
  },
  {
    "text": "because it's event driven architecture whatever you want to verify those crc",
    "start": "609920",
    "end": "615120"
  },
  {
    "text": "and i'm going to talk about uh thing that i've done for aaron so i've been adding the crc support to",
    "start": "615120",
    "end": "621360"
  },
  {
    "text": "air on archive where it's basically adding crc during to the log and then to the replay",
    "start": "621360",
    "end": "626399"
  },
  {
    "text": "part when you read from so let's say you want to do crc in java in particular",
    "start": "626399",
    "end": "632800"
  },
  {
    "start": "629000",
    "end": "629000"
  },
  {
    "text": "aaron targets java 8 as its minimum so i guess if i ask for quick show of hands who",
    "start": "632800",
    "end": "638640"
  },
  {
    "text": "runs java 8 in production 4008 in production okay 85 percent of",
    "start": "638640",
    "end": "644640"
  },
  {
    "text": "people the rest is either not java people or run something else maybe java six or seven i don't think anybody runs 11",
    "start": "644640",
    "end": "651600"
  },
  {
    "text": "maybe there are a couple of uh brave so let's say i want to do crc in java obviously",
    "start": "651600",
    "end": "656880"
  },
  {
    "text": "obviously you have to go to java with zip package right it's obvious to everybody that that's where you find those things",
    "start": "656880",
    "end": "663200"
  },
  {
    "text": "i don't know how people writing core libs in java actually come up with these things but you know things end up where they are so",
    "start": "663200",
    "end": "669680"
  },
  {
    "text": "you're looking at this interface like okay well very java ish",
    "start": "669680",
    "end": "674959"
  },
  {
    "text": "because it kind of gives away that this has this thing has a state so you can when you create one and you",
    "start": "674959",
    "end": "680560"
  },
  {
    "text": "update it then you get a value then you have reset method so kind of reuse it maybe maybe not um but what is puzzling",
    "start": "680560",
    "end": "687120"
  },
  {
    "text": "is that it only works for arrays and the primitive int what if or a single byte-ish kind of",
    "start": "687120",
    "end": "693760"
  },
  {
    "text": "four bytes whatever that int is up for interpretation you know is it",
    "start": "693760",
    "end": "699440"
  },
  {
    "text": "really four bytes or just one it's one but anyways",
    "start": "699440",
    "end": "704959"
  },
  {
    "text": "but anybody who worked with java nio knows that core obstructions of java and",
    "start": "704959",
    "end": "710240"
  },
  {
    "text": "io is actually byte buffers java 8 there's no byte buffers here by buffer was added in 142.",
    "start": "710240",
    "end": "716959"
  },
  {
    "text": "so am i missing something like okay wait let's let's dig deeper of course if",
    "start": "716959",
    "end": "723120"
  },
  {
    "text": "you go to crc 32 and adler 32 there are two implementations of this interface in the",
    "start": "723120",
    "end": "728959"
  },
  {
    "text": "whole in the whole jdk you find that it has methods with a byte buffer",
    "start": "728959",
    "end": "734399"
  },
  {
    "text": "uh kind of sorter if you kind of squint a bit and read what's in the middle or kind of",
    "start": "734399",
    "end": "740639"
  },
  {
    "text": "read the signature closer unlike this guy where you see the byte array",
    "start": "740639",
    "end": "746639"
  },
  {
    "text": "has an offset in the link you can actually point out to a chunk of it and the byte buffer",
    "start": "746639",
    "end": "751680"
  },
  {
    "text": "you kind of start with whatever the current position is by the end of the update call your your byte buffer mode",
    "start": "751680",
    "end": "757519"
  },
  {
    "text": "so it mutates your data structure this thing is supposed to read some bytes of it like why",
    "start": "757519",
    "end": "762560"
  },
  {
    "text": "not provide an absolute length and then put you know off certain lengths like you do for the byte array",
    "start": "762560",
    "end": "768720"
  },
  {
    "text": "and this is java 8 right so the method was edited finally enough both implementations got the same method",
    "start": "768720",
    "end": "774880"
  },
  {
    "text": "with the same signature this is java 8 we have default methods why on earth you don't put it into the",
    "start": "774880",
    "end": "781040"
  },
  {
    "text": "interface's default method it's like i mean you're doing the same work twice declaring the same thing why",
    "start": "781040",
    "end": "787279"
  },
  {
    "text": "not just declare it once well of course i'm ranting this is java 8 and if you talk to oracle people they say you know",
    "start": "787279",
    "end": "793360"
  },
  {
    "text": "six months releases right so use java 14 of course we use java 14. this is the",
    "start": "793360",
    "end": "798800"
  },
  {
    "text": "interface in general 14. hooray we have our update by buffer method since java 9 there",
    "start": "798800",
    "end": "805200"
  },
  {
    "text": "and we have a convenience method for the byte array so the other way around it goes from 0 to the to the length but",
    "start": "805200",
    "end": "813360"
  },
  {
    "text": "i still have no links and offset which means if you want to use it you",
    "start": "813360",
    "end": "819440"
  },
  {
    "text": "end up doing something like this so first you need to get your csc32",
    "start": "819440",
    "end": "826399"
  },
  {
    "text": "somewhere call update and then get value of it and by the way cic32 stands at 32",
    "start": "826399",
    "end": "831519"
  },
  {
    "text": "bit value so it's four bytes and you have to basically don't cost your value back to end because this is what you're",
    "start": "831519",
    "end": "836639"
  },
  {
    "text": "gonna use and attach you're not gonna attach eight bytes of stuff which only has four bytes of thing in it and then you have to rewind",
    "start": "836639",
    "end": "843440"
  },
  {
    "text": "the position well you know in normal java day right java day in the office this is",
    "start": "843440",
    "end": "849600"
  },
  {
    "text": "kind of kind of story but what if what if the world would be",
    "start": "849600",
    "end": "854639"
  },
  {
    "start": "853000",
    "end": "853000"
  },
  {
    "text": "different what if we would have something like a static method for coc32",
    "start": "854639",
    "end": "860399"
  },
  {
    "text": "or even the same was with the address what if your byte buffer is not on heap",
    "start": "860399",
    "end": "866720"
  },
  {
    "text": "it's offhit it has an address and can the you can do this well someone might object but yeah the",
    "start": "866720",
    "end": "873199"
  },
  {
    "text": "algorithms like different checksum algorithms have they are very",
    "start": "873199",
    "end": "878240"
  },
  {
    "text": "sensitive to the initial value so csc32 for example starts with zero cc32c starts with special constant which",
    "start": "878240",
    "end": "884720"
  },
  {
    "text": "is basically minus one all one all bit set to one yeah i get it you can document it's like it's not ideal",
    "start": "884720",
    "end": "891440"
  },
  {
    "text": "consumable thing but as a building block this this is amazing but you know maybe i'm imagining stuff right so like",
    "start": "891440",
    "end": "897199"
  },
  {
    "text": "i'm living in la la land and like if you look inside like crc 32 well this is exactly what",
    "start": "897199",
    "end": "904720"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "you see that's exactly the api that is there but it's not available to you because you're not supposed to do it you",
    "start": "904720",
    "end": "910720"
  },
  {
    "text": "know it's just for for jdk guys i don't know four whatever it's the implementation it has private",
    "start": "910720",
    "end": "916800"
  },
  {
    "text": "but also native because because it's gonna be intrinsified what what i find is fascinating if you look at the update",
    "start": "916800",
    "end": "922160"
  },
  {
    "text": "byte buffer signature you'll see that it has the first argument is not called crc",
    "start": "922160",
    "end": "928320"
  },
  {
    "text": "it's called adler because it's copy paste from another class which is exactly the same method and it gets even better because in jdk9",
    "start": "928320",
    "end": "935120"
  },
  {
    "text": "they they fixed it this is now renamed to alder so and l is swapped",
    "start": "935120",
    "end": "940480"
  },
  {
    "text": "so probably to obfuscate the reason that it was copied well this is clc32 nice thing in jdk9",
    "start": "940480",
    "end": "949759"
  },
  {
    "text": "they added another algorithm called csc32c which is by the way way better checksum",
    "start": "949759",
    "end": "955199"
  },
  {
    "text": "algorithm it doesn't have the failing conditions that coc32 does so it detects more",
    "start": "955199",
    "end": "961120"
  },
  {
    "text": "more problems so it's better thing to use and if you look inside there you see the same picture and the the",
    "start": "961120",
    "end": "967279"
  },
  {
    "text": "version was single by disappears because it's handled on the java side but we have two hotspot intrinsic",
    "start": "967279",
    "end": "973120"
  },
  {
    "text": "candidates so we have two methods that are intrinsified and by intrinsified by the way for those who",
    "start": "973120",
    "end": "978800"
  },
  {
    "text": "don't know it means that instead of running the code as written there if you open jdk 9",
    "start": "978800",
    "end": "984560"
  },
  {
    "text": "and and beyond and you open this class you'll see like huge java methods that basically implement slicing by 8",
    "start": "984560",
    "end": "990880"
  },
  {
    "text": "algorithm that intel guys wrote a couple couple years back and this is java implementation but this",
    "start": "990880",
    "end": "997759"
  },
  {
    "text": "is not what gonna run on x86 platforms on x86 platforms this",
    "start": "997759",
    "end": "1002959"
  },
  {
    "text": "whole thing will be replaced with a specialized algorithm that specialized code that",
    "start": "1002959",
    "end": "1010639"
  },
  {
    "text": "hotspot will spit out which will use here c32 instruction which is uh basically first intel came",
    "start": "1010639",
    "end": "1015839"
  },
  {
    "text": "up and then amd implemented as well so to to have this more more efficient okay",
    "start": "1015839",
    "end": "1023519"
  },
  {
    "text": "well we are looking it for for very long time at the thing so this is just this part so we we have",
    "start": "1023519",
    "end": "1030400"
  },
  {
    "text": "this so this is our building blocks um as you as i kind of alluded you to and showing",
    "start": "1030400",
    "end": "1036798"
  },
  {
    "text": "you the native thing that's basically what you ended up doing if you don't want to allocate in your",
    "start": "1036799",
    "end": "1041918"
  },
  {
    "text": "fastpass and you kind of you know you go method handles and you call private api",
    "start": "1041919",
    "end": "1047199"
  },
  {
    "text": "because there is no other way in java this is this is the way you do it you know shameful to admit on the other hand there is no other way",
    "start": "1047199",
    "end": "1053919"
  },
  {
    "text": "okay so um let's look um let's look at uh at the implementing",
    "start": "1053919",
    "end": "1060559"
  },
  {
    "text": "part so we have this thing but before we touch any system we have to baseline it right i told you that",
    "start": "1060559",
    "end": "1066160"
  },
  {
    "text": "i've i've done it on the an example of aaron and aaron has an archive module so what",
    "start": "1066160",
    "end": "1073600"
  },
  {
    "text": "what aaron is a messaging system right a udp multicast unicast and ipc transfer and",
    "start": "1073600",
    "end": "1079840"
  },
  {
    "text": "it has an archive module so you have a subscriber that can get the data and move it elsewhere for archiving",
    "start": "1079840",
    "end": "1086000"
  },
  {
    "text": "journaling and whatnot reasons so what i've done i've run the archive",
    "start": "1086000",
    "end": "1092000"
  },
  {
    "start": "1089000",
    "end": "1089000"
  },
  {
    "text": "module before i touch the code um so this is just everything on my laptop",
    "start": "1092000",
    "end": "1097120"
  },
  {
    "text": "on real systems this this thing goes up to 100 million a second so this is throughput test so basically",
    "start": "1097120",
    "end": "1103840"
  },
  {
    "text": "there's two parts to it one is right into disk so recording events and events are really nasty so write in",
    "start": "1103840",
    "end": "1110799"
  },
  {
    "text": "small messages so 32 byte messages and which is really which is really stress test because you have 32 byte of",
    "start": "1110799",
    "end": "1117200"
  },
  {
    "text": "payload and arc and aaron adds another 32 byte of header on it so you're right in 64",
    "start": "1117200",
    "end": "1122320"
  },
  {
    "text": "bytes so you're thinking you're right in 32 you actually double it that's the most nasty one so writing megabytes to disk is very easy right and",
    "start": "1122320",
    "end": "1128559"
  },
  {
    "text": "bytes to disk is where the real pain points are so even that thing can write about 40",
    "start": "1128559",
    "end": "1134080"
  },
  {
    "text": "million messages a second and i can replay of the disk about 35 million messages a",
    "start": "1134080",
    "end": "1139120"
  },
  {
    "text": "second does anybody find this picture disturbing or something is wrong in the",
    "start": "1139120",
    "end": "1146240"
  },
  {
    "text": "picture exactly so when you replaying you are reading off the disk you're not",
    "start": "1148840",
    "end": "1154400"
  },
  {
    "text": "right into the disk why this is slower it's interesting point we're going to get back to it in due time so you know but this is jdk8",
    "start": "1154400",
    "end": "1162320"
  },
  {
    "text": "of course let's do another lts release version which is 11 and run it and see how why you you want",
    "start": "1162320",
    "end": "1169600"
  },
  {
    "text": "to upgrade to 11 you know this is this is absolute reason why you want to upgrade you're like yes you would get",
    "start": "1169600",
    "end": "1174799"
  },
  {
    "text": "one more million out of writing to disk but our replay just just went down the drain",
    "start": "1174799",
    "end": "1181120"
  },
  {
    "text": "i like um yes um asking the question why um one part of",
    "start": "1181120",
    "end": "1188640"
  },
  {
    "text": "it is again i mentioned we used private apis one of the things that aaron is using is",
    "start": "1188640",
    "end": "1193919"
  },
  {
    "text": "a lot of unsafe to deal with native buffers and patching selectors and",
    "start": "1193919",
    "end": "1199600"
  },
  {
    "text": "network stack and doing stuff because there is no other way and what was done in jdk 9 the unsaved",
    "start": "1199600",
    "end": "1205919"
  },
  {
    "text": "as we know it was split into unsafes so there is some misconception there is jdk internal unsafe",
    "start": "1205919",
    "end": "1211200"
  },
  {
    "text": "so there is now two unsafes and the the other one is getting new features it's super cool and now there's this duality",
    "start": "1211200",
    "end": "1217200"
  },
  {
    "text": "so if you profile it let's say wes asking profiler what end up doing is that on 8 there is no unsafe calls they all",
    "start": "1217200",
    "end": "1223280"
  },
  {
    "text": "disappear they kind of become virtual on 11 you see the sun misconceived all",
    "start": "1223280",
    "end": "1228320"
  },
  {
    "text": "of a sudden popping up and up to the jdk unsafe somehow the call stacks get deeper",
    "start": "1228320",
    "end": "1233520"
  },
  {
    "text": "in lining is not happening i have no idea you know i didn't didn't go really really deep on that thing but",
    "start": "1233520",
    "end": "1239679"
  },
  {
    "text": "the fact is this and then you kind of explain like why don't you upgrade like why would i upgrade is my incentive make my",
    "start": "1239679",
    "end": "1245520"
  },
  {
    "text": "application slower or like my anyways um that's the java releases and stuff so",
    "start": "1245520",
    "end": "1253360"
  },
  {
    "text": "that's all nice we take our cs62 plug it in and we see the following picture so",
    "start": "1253360",
    "end": "1260840"
  },
  {
    "start": "1257000",
    "end": "1257000"
  },
  {
    "text": "crc32 slows things down substantially and this is expected this",
    "start": "1260840",
    "end": "1266000"
  },
  {
    "text": "is like a premium you pay you know you want to be sure that you don't you can detect",
    "start": "1266000",
    "end": "1271520"
  },
  {
    "text": "data corruptions and stuff so you have to pay for it well yeah maybe maybe not maybe not that much",
    "start": "1271520",
    "end": "1278320"
  },
  {
    "text": "it's like okay and writing to disk we already write in big chunks we have to go through the chunk",
    "start": "1278320",
    "end": "1284000"
  },
  {
    "text": "probably we cannot do much but replay looks interesting because replay gets quite a hit i think",
    "start": "1284000",
    "end": "1291679"
  },
  {
    "text": "and what's going on there but you know first let's look at 11 of course because 11 is better right",
    "start": "1291679",
    "end": "1297760"
  },
  {
    "text": "wow 11. um i told you that 11 has really nice clc32c and if you look closer you will",
    "start": "1297760",
    "end": "1304880"
  },
  {
    "text": "see that wow this thing is actually faster than the crc32",
    "start": "1304880",
    "end": "1310480"
  },
  {
    "text": "and who thinks csc32 is faster c62c is faster",
    "start": "1310880",
    "end": "1316840"
  },
  {
    "text": "guesses answer see uh almost answer it depends right",
    "start": "1316840",
    "end": "1323360"
  },
  {
    "text": "so by just looking at that like it felt it felt really weird but kind of for this use case",
    "start": "1323360",
    "end": "1328559"
  },
  {
    "text": "you know you're kind of yeah you probably want to go cs62c and actually if i would be running on jdk 9 plus",
    "start": "1328559",
    "end": "1334640"
  },
  {
    "text": "just for the quality of the checksum algorithm i'm going to choose the cs62c",
    "start": "1334640",
    "end": "1340640"
  },
  {
    "text": "even if it might not be the best in all cases but i've done a test",
    "start": "1340640",
    "end": "1347280"
  },
  {
    "start": "1345000",
    "end": "1345000"
  },
  {
    "text": "where i compare cs62 as the css it is suited to c and that's why i said it depends because",
    "start": "1347280",
    "end": "1353919"
  },
  {
    "text": "depending on the size of the input it's one on the other winning so in the smaller sizes before",
    "start": "1353919",
    "end": "1361039"
  },
  {
    "text": "at about 92 bytes cs32 c is the winner i think it's like",
    "start": "1361039",
    "end": "1367919"
  },
  {
    "text": "some factor of two at the beginning and then also they swap to a point where another one is three",
    "start": "1367919",
    "end": "1373520"
  },
  {
    "text": "times faster at 512 bytes like wow it's quite interesting you know",
    "start": "1373520",
    "end": "1378720"
  },
  {
    "text": "if you start digging deeper and like looking am i getting the right thing and you know am i under is my understanding",
    "start": "1378720",
    "end": "1384480"
  },
  {
    "text": "correctly like where this is going but as i said you know there's different algorithms you cannot just you know they are not",
    "start": "1384480",
    "end": "1390400"
  },
  {
    "text": "substitutable you cannot just let's say you have css32 on jdk8 migrate to 9 and then read the same checksum using",
    "start": "1390400",
    "end": "1396480"
  },
  {
    "text": "another algorithm it's not going to work so once you stick with one you have to kind of leave with it or have an update process that replaces all",
    "start": "1396480",
    "end": "1403039"
  },
  {
    "text": "your checksums or whatnot that's all possibilities but",
    "start": "1403039",
    "end": "1408240"
  },
  {
    "text": "i mentioned before that we have to go for the private api because of intrinsics like just to show you how bad that thing",
    "start": "1408240",
    "end": "1414559"
  },
  {
    "text": "is you see this this graph this is the same graph and on top of it i added a hand rolled",
    "start": "1414559",
    "end": "1421760"
  },
  {
    "text": "slicing by eight implementation so essentially what jdk has a static method without any jdk magic so plain java as",
    "start": "1421760",
    "end": "1430080"
  },
  {
    "text": "implemented in the paper and if you don't realize how really bad that thing",
    "start": "1430080",
    "end": "1435120"
  },
  {
    "text": "is this is log scale so there is an order order of magnitude",
    "start": "1435120",
    "end": "1440240"
  },
  {
    "text": "difference between the things so if you look at the 4 at 2k 2k is more than 10x it's about 13x",
    "start": "1440240",
    "end": "1448000"
  },
  {
    "text": "performance difference so if you try to be a good citizen and not touch any private api and just go plain java no",
    "start": "1448000",
    "end": "1454240"
  },
  {
    "text": "dependencies no breakages between releases no whatever you can't you really want to have what",
    "start": "1454240",
    "end": "1460159"
  },
  {
    "text": "the platform provides you because that's the whole ideas you don't run on the platform so yeah",
    "start": "1460159",
    "end": "1466080"
  },
  {
    "text": "we tried it didn't work um so let's get back to the replay so as a",
    "start": "1466080",
    "end": "1472880"
  },
  {
    "start": "1470000",
    "end": "1470000"
  },
  {
    "text": "gentleman there i noted and replay should be faster read of this can do whatever what",
    "start": "1472880",
    "end": "1477919"
  },
  {
    "text": "what on earth replay is doing that is that costly so if you look and it's kind of solid java it's not exactly the code but",
    "start": "1477919",
    "end": "1486159"
  },
  {
    "text": "replay was doing something along the lines you're reading a chunk of um data from a disk about two megs",
    "start": "1486159",
    "end": "1493279"
  },
  {
    "text": "and then you process it in so-called frames of fragments so in this case this particular case for",
    "start": "1493279",
    "end": "1499360"
  },
  {
    "text": "every message for every 64 bytes you will be basically having one loop iteration and then you",
    "start": "1499360",
    "end": "1504400"
  },
  {
    "text": "do occasional verification of the checksum because that thing is optional so if you're running on enterprise grade",
    "start": "1504400",
    "end": "1511279"
  },
  {
    "text": "ssds or whatnot you didn't enable checksums you're not going to get a hit so that thing is optional",
    "start": "1511279",
    "end": "1516559"
  },
  {
    "text": "and then we do the publication and the publication is done in the zero copy semantics",
    "start": "1516559",
    "end": "1523520"
  },
  {
    "text": "so try claim is an operation that basically claims a space in the",
    "start": "1523520",
    "end": "1528880"
  },
  {
    "text": "publication buffer saying okay i'm going to need that much can i claim it and this is an atomic operation this is very important",
    "start": "1528880",
    "end": "1535200"
  },
  {
    "text": "because this has memory fences so one that i claim has memory fences because this can concurrent",
    "start": "1535200",
    "end": "1540240"
  },
  {
    "text": "there can be multiple things publishing through the same publisher and then at the end when we copied the bytes so we have already the chunk so we",
    "start": "1540240",
    "end": "1547600"
  },
  {
    "text": "directly copy it into the destination we call commit it's a second memory fence so we have two",
    "start": "1547600",
    "end": "1554240"
  },
  {
    "text": "concurrent operations going on here and those end up costing those prevent um loop being unrolled",
    "start": "1554240",
    "end": "1561919"
  },
  {
    "text": "those prevent some um nice inline and some other optimizations so this is where the cost is so what",
    "start": "1561919",
    "end": "1568960"
  },
  {
    "text": "you end up doing you need to somehow amortize the cost so if you think about it there's a cost",
    "start": "1568960",
    "end": "1574480"
  },
  {
    "text": "on the publishers then case replayer side which prepares this publication and there is a published",
    "start": "1574480",
    "end": "1579919"
  },
  {
    "text": "site the other side of it which reads out of this shared buffer and can progress",
    "start": "1579919",
    "end": "1584960"
  },
  {
    "text": "and because we are doing one frame at a time the other guy is spinning there waiting for that one frame and then another frame",
    "start": "1584960",
    "end": "1590799"
  },
  {
    "text": "so basically they also end up contending on the cache line for that for the thing containing 64 bytes which",
    "start": "1590799",
    "end": "1597279"
  },
  {
    "text": "which we learned the previous talk it's exactly 64 bytes so we're kind of contending for that cache line so that's really bad",
    "start": "1597279",
    "end": "1603760"
  },
  {
    "text": "so the first idea to fix that was let's do the batching right because",
    "start": "1603760",
    "end": "1609200"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "batching is good so can we do a little bit different can we publish a",
    "start": "1609200",
    "end": "1614480"
  },
  {
    "text": "bunch of bytes into the publication um first without you know",
    "start": "1614480",
    "end": "1620000"
  },
  {
    "text": "so using the existing api so the idea was instead of publishing one frame at a time you say okay",
    "start": "1620000",
    "end": "1626640"
  },
  {
    "text": "i'm gonna grab the first frame not shown here is called handle of on start and",
    "start": "1626640",
    "end": "1633279"
  },
  {
    "text": "not committed so you kind of reserve the space but not committed so committing means writing special uh a special field there",
    "start": "1633279",
    "end": "1641919"
  },
  {
    "text": "allowing publisher to proceed so in the first field the publisher keeps spinning then we write as many fields as as the",
    "start": "1641919",
    "end": "1649120"
  },
  {
    "text": "mtu size which in this case was something like we went for 4k or something like that so",
    "start": "1649120",
    "end": "1654640"
  },
  {
    "text": "until we reach the 4k we basically we commit every other frame but nobody is spinning on that so kind",
    "start": "1654640",
    "end": "1661440"
  },
  {
    "text": "of for the for the replayers thread it's exactly the same exactly the same number of instructions exactly the same number of",
    "start": "1661440",
    "end": "1667679"
  },
  {
    "text": "uh memory fences and concurrent operations but we we do better on the publisher",
    "start": "1667679",
    "end": "1672960"
  },
  {
    "text": "side so did it really makes making a difference i'm going to show you just the jdk 11",
    "start": "1672960",
    "end": "1679520"
  },
  {
    "text": "result because on 8 it was the same but on jdk 11 it made a difference so",
    "start": "1679520",
    "end": "1686080"
  },
  {
    "text": "it unlocked some optimizations the code was different shape so jit managed to do it differently and we got",
    "start": "1686080",
    "end": "1693039"
  },
  {
    "text": "about one million more out of this thing so which is like you know five percent roughly but that's",
    "start": "1693039",
    "end": "1700000"
  },
  {
    "text": "not where we want to be right we're not beating the the recording so ah nah scrub this",
    "start": "1700000",
    "end": "1706000"
  },
  {
    "text": "so let's try to fix it again and here comes the the beat that i want",
    "start": "1706000",
    "end": "1711279"
  },
  {
    "text": "you to take away from here sometimes just looking at the problem and adding things",
    "start": "1711279",
    "end": "1717440"
  },
  {
    "text": "makes you think uh makes you reconsider the whole design right it's like okay what are we doing here we",
    "start": "1717440",
    "end": "1723360"
  },
  {
    "text": "are reading the chunk of bytes and then we're doing some mangling with it and using the api that",
    "start": "1723360",
    "end": "1729200"
  },
  {
    "text": "we already have to kind of send this chunk of bytes but what you want to do you want to read this chunk and just send it over read the chunk",
    "start": "1729200",
    "end": "1736240"
  },
  {
    "text": "send it over so of course it's not that easy because the publisher side of things",
    "start": "1736240",
    "end": "1744240"
  },
  {
    "text": "is doing something to the messages it's preparing them to be sent over the network or ipc or there's",
    "start": "1744240",
    "end": "1749760"
  },
  {
    "text": "a lot of things going on there it's like recording things like session ids and stuff that that error needs to function",
    "start": "1749760",
    "end": "1756799"
  },
  {
    "text": "so our processing becomes a bit different so we still have a loop to go through",
    "start": "1756799",
    "end": "1762960"
  },
  {
    "text": "the whole thing because we still need to do crc the whole point of this exercise was to do crc in the first place",
    "start": "1762960",
    "end": "1768720"
  },
  {
    "text": "and then we do call step called prepare frame where we do some of the bookkeeping that was leaving in the publisher so",
    "start": "1768720",
    "end": "1775919"
  },
  {
    "text": "again you know this is deep deep down inside of aaron this is not like super public api thing but kind of once",
    "start": "1775919",
    "end": "1781840"
  },
  {
    "text": "you know this is your application right you can do tricks like you can do like okay what the problem trying to solve can i do it and at the end after the",
    "start": "1781840",
    "end": "1788559"
  },
  {
    "text": "loop is done so we basically read this chunk of memory everything is caches everything's nice there we go through the hot loop",
    "start": "1788559",
    "end": "1794399"
  },
  {
    "text": "we go through the same thing without touching anything else and then it's like okay here the chunk is ready and ready to",
    "start": "1794399",
    "end": "1800480"
  },
  {
    "text": "send so at the end we have this new api called offer block and like off you go it's like of course",
    "start": "1800480",
    "end": "1806399"
  },
  {
    "text": "there is an error handling and lots of other things involved but basically this is the whole idea so instead of like",
    "start": "1806399",
    "end": "1811840"
  },
  {
    "text": "going this little things and kind of yeah sometimes you have to kind of",
    "start": "1811840",
    "end": "1817360"
  },
  {
    "text": "flip things head you know like other way around drill drill holes",
    "start": "1817360",
    "end": "1822640"
  },
  {
    "text": "through your system uh put on stuff put an api that is not very safe",
    "start": "1822640",
    "end": "1828320"
  },
  {
    "text": "but it's it's solving the problem so you're kind of tailoring a solution for the problem at hand like",
    "start": "1828320",
    "end": "1833360"
  },
  {
    "text": "stop think like what time what is the problem at hand how can we solve it let's go with it okay so if you look at",
    "start": "1833360",
    "end": "1841200"
  },
  {
    "text": "what happened next of course we need to measure things and if you look at the results",
    "start": "1841200",
    "end": "1847440"
  },
  {
    "text": "finally finally finally finally replays faster than record and it makes sense reading from disk is",
    "start": "1847440",
    "end": "1854080"
  },
  {
    "text": "faster than writing to disk and of course processing sending door what is also interesting is that",
    "start": "1854080",
    "end": "1860720"
  },
  {
    "text": "taking um taking the the crc over also also went",
    "start": "1860720",
    "end": "1867200"
  },
  {
    "text": "uh went quite fast so we went from 34 million messages being replayed without",
    "start": "1867200",
    "end": "1873679"
  },
  {
    "text": "crc and 21 with crc to 49 and 30. so the the crc bid got like",
    "start": "1873679",
    "end": "1881200"
  },
  {
    "text": "25 percent faster the other one got way faster like more than 50 percent faster",
    "start": "1881200",
    "end": "1887120"
  },
  {
    "text": "let's jdk let's look at jdk 11. it's quite impressive so if you go back",
    "start": "1887120",
    "end": "1894640"
  },
  {
    "text": "it's like okay we're doing the same 49 as before but replay of clc32c so that that's",
    "start": "1894640",
    "end": "1901840"
  },
  {
    "text": "where that's where the difference between csc32 and cc32c comes into play where i told",
    "start": "1901840",
    "end": "1907519"
  },
  {
    "text": "you that the small messages is about factor of two and you can you can see just just how",
    "start": "1907519",
    "end": "1913919"
  },
  {
    "text": "how how how many more messages so good another thirty percent if you directly would compare to eight you can't do it",
    "start": "1913919",
    "end": "1919840"
  },
  {
    "text": "but basically you get this picture and if i remember correctly results from before",
    "start": "1919840",
    "end": "1925279"
  },
  {
    "text": "we had 26 replay when we started on gdk11 which was the hilarious nothing",
    "start": "1925279",
    "end": "1932159"
  },
  {
    "text": "it you know jdk 11 doesn't work don't upgrade type of thing and we are back at the same at the same level as jdk9",
    "start": "1932159",
    "end": "1939360"
  },
  {
    "text": "go big again because we amortized all the costs so now all those you know try claim and",
    "start": "1939360",
    "end": "1945360"
  },
  {
    "text": "commit operations that we had let's say i have million frames or something i had two million of those operations",
    "start": "1945360",
    "end": "1950399"
  },
  {
    "text": "now they replaced one and all the two million of those were going why are unsafe and these",
    "start": "1950399",
    "end": "1956799"
  },
  {
    "text": "unsafe calls disappeared so now in the hot loop and the hot pass we wouldn't have this unsafe loop we have just said at the end when we need",
    "start": "1956799",
    "end": "1963200"
  },
  {
    "text": "to release this stuff so let me think about it what else",
    "start": "1963200",
    "end": "1969840"
  },
  {
    "text": "yes um so that's what basically was the journey of",
    "start": "1969840",
    "end": "1975039"
  },
  {
    "text": "of trying to figure out how how to do it and how to do it in a",
    "start": "1975039",
    "end": "1980640"
  },
  {
    "text": "performant way and important thoughts",
    "start": "1980640",
    "end": "1987919"
  },
  {
    "start": "1984000",
    "end": "1984000"
  },
  {
    "text": "so what i suggest you do is like always stay curious keep on",
    "start": "1988320",
    "end": "1994880"
  },
  {
    "text": "digging and trying to figure out how stuff works underneath you sometimes you're gonna break the rules",
    "start": "1994880",
    "end": "2002559"
  },
  {
    "text": "like you know look inside your platform figure out how can you access the functionality it is not available there",
    "start": "2002559",
    "end": "2009200"
  },
  {
    "text": "maybe there is alternatives maybe you can solve it the other way good if not try to write your own if you fail",
    "start": "2009200",
    "end": "2016080"
  },
  {
    "text": "you still have the escape route of kind of digging through um through things",
    "start": "2016080",
    "end": "2022320"
  },
  {
    "text": "and um what i wanted to show as well is that it's possible even in mature product and",
    "start": "2022320",
    "end": "2028880"
  },
  {
    "text": "in in in a project of any size basically um if you keep adding or evolving it",
    "start": "2028880",
    "end": "2036000"
  },
  {
    "text": "doesn't have to be kind of pile of things that just falls apart you know let's say you take one um one aspect of one",
    "start": "2036000",
    "end": "2042720"
  },
  {
    "text": "quality aspect the performance it's like things get slower and slower and slower because nobody cares and eventually this thing is decommissioned",
    "start": "2042720",
    "end": "2048800"
  },
  {
    "text": "and we write a new system which repeats the pattern if you",
    "start": "2048800",
    "end": "2053839"
  },
  {
    "text": "really try to solve problem you can actually do both you can add your feature and basically have your cake and eat it",
    "start": "2053839",
    "end": "2060560"
  },
  {
    "text": "too and also keep or even improve the performance like in this",
    "start": "2060560",
    "end": "2066800"
  },
  {
    "text": "case because replay was kind of sort of on par with uh recording there were 20 difference the",
    "start": "2066800",
    "end": "2074320"
  },
  {
    "text": "priorities on the project were in different place so nobody actually looked into why is that i mean once you see the numbers you",
    "start": "2074320",
    "end": "2080638"
  },
  {
    "text": "kind of like wow what that doesn't so my understanding my model of the world my understanding of",
    "start": "2080639",
    "end": "2086000"
  },
  {
    "text": "what this thing is doesn't match the empirical results and then you kind of eventually find out and because there",
    "start": "2086000",
    "end": "2092240"
  },
  {
    "text": "was a need to change that code that led into rewriting of the algorithm kind of rewriting this like and",
    "start": "2092240",
    "end": "2097359"
  },
  {
    "text": "bringing bring it back where it should be like okay we're starting with a fast pace we have a nice new feature and and it's in its",
    "start": "2097359",
    "end": "2105280"
  },
  {
    "text": "performance as well so uh with that i'm out of content um if you have any questions please",
    "start": "2105280",
    "end": "2113920"
  },
  {
    "text": "it's time to ask them questions",
    "start": "2113920",
    "end": "2120800"
  },
  {
    "text": "no questions the crucial point was that you uh",
    "start": "2127119",
    "end": "2133280"
  },
  {
    "text": "you kind of you avoid these commit actions in between kind of kind of both not just commit but",
    "start": "2133280",
    "end": "2139760"
  },
  {
    "text": "also claiming that so so basically avoiding the the expensive operation so amortizing the",
    "start": "2139760",
    "end": "2146400"
  },
  {
    "text": "costs that that that's what exactly exactly",
    "start": "2146400",
    "end": "2151838"
  },
  {
    "text": "yeah and and depends you know that was also batching right and it's like what at the end well what",
    "start": "2151920",
    "end": "2159760"
  },
  {
    "text": "mattered was amortized removing those concurrent calls right removing the the volatile rights or whatever the thing is underneath but",
    "start": "2159760",
    "end": "2167200"
  },
  {
    "text": "that that's where i think but if you think about it and the process in the first approach was also doing batching because it was",
    "start": "2167200",
    "end": "2173119"
  },
  {
    "text": "releasing the whole batch to the publisher so the publishers saw all bytes in one chunk at the end publishers saw all bytes in",
    "start": "2173119",
    "end": "2179040"
  },
  {
    "text": "one chunk so at the beginning when you start neither of these things had a batch effect",
    "start": "2179040",
    "end": "2184960"
  },
  {
    "text": "so first solution got a batching for the sender sender could just swipe through all the bytes directly and the second solution",
    "start": "2184960",
    "end": "2192000"
  },
  {
    "text": "actually brought the batching to both and actually the the amortizing so so you need to know where the costs are",
    "start": "2192000",
    "end": "2198320"
  },
  {
    "text": "and to figure this stuff out funny enough in this particular case if you run a profiler you",
    "start": "2198320",
    "end": "2203680"
  },
  {
    "text": "your profiler will will be all over the place you would not find the bottleneck",
    "start": "2203680",
    "end": "2209119"
  },
  {
    "text": "it's just because martin knows the system that well the chatting to him can help figure out",
    "start": "2209119",
    "end": "2214480"
  },
  {
    "text": "okay what what are the leverage points and what where the problems this is funny enough it doesn't show up",
    "start": "2214480",
    "end": "2220560"
  },
  {
    "text": "and then like it is it's not a hot spot because the thing kind of you know spread around it's it's",
    "start": "2220560",
    "end": "2226079"
  },
  {
    "text": "multiple calls they are done in the loop you see like okay it's probably this loop but what's costly in this loop what's what",
    "start": "2226079",
    "end": "2232320"
  },
  {
    "text": "what what's the pro what's the problem there all right thank you so much with that",
    "start": "2232320",
    "end": "2239119"
  },
  {
    "text": "you're free to go to get beer",
    "start": "2239119",
    "end": "2243838"
  }
]