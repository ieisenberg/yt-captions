[
  {
    "start": "0",
    "end": "202000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "2579"
  },
  {
    "text": "without further Ado let's look at what Apachi Cassandra has got to offer um no",
    "start": "17600",
    "end": "22880"
  },
  {
    "text": "equl is actually more um more knowing",
    "start": "22880",
    "end": "28480"
  },
  {
    "text": "about your queries um applications and and obviously there's a lot of good",
    "start": "28480",
    "end": "34000"
  },
  {
    "text": "intro to no SQL that has happened if you to take one slide away from this whole talk my talk it would be you would have",
    "start": "34000",
    "end": "41760"
  },
  {
    "text": "to know your queries up front you'd have to know them very well at least 80% of",
    "start": "41760",
    "end": "47199"
  },
  {
    "text": "your application um uses mostly the same queries and so you're paying cost for",
    "start": "47199",
    "end": "54000"
  },
  {
    "text": "being the versatile SQL is great it it it is very versatile it gives you a lot",
    "start": "54000",
    "end": "59199"
  },
  {
    "text": "of flexibility to change your queries on the fly in the run time in real time towards after you built your application",
    "start": "59199",
    "end": "66320"
  },
  {
    "text": "but turns out most applications when they scale um end up having to",
    "start": "66320",
    "end": "72759"
  },
  {
    "text": "apparently using only very small set of their um real functionality more",
    "start": "72759",
    "end": "77920"
  },
  {
    "text": "frequently the 8020 Rule and as a result um what your application is really",
    "start": "77920",
    "end": "83720"
  },
  {
    "text": "depends on um how it performs really depends on a small set of queries so",
    "start": "83720",
    "end": "89439"
  },
  {
    "text": "imagine you had to redesign your application or redesign your schema such that those queries are answered really",
    "start": "89439",
    "end": "96200"
  },
  {
    "text": "well and that's that's the Crux of the problem that Nole is trying to help with and I'm I'm kind of imagining um most",
    "start": "96200",
    "end": "104880"
  },
  {
    "text": "applications will end up fitting into that space um there are some applications which would not and those",
    "start": "104880",
    "end": "112079"
  },
  {
    "text": "are not the ones we'll talk about so with that um I'll just give a brief on",
    "start": "112079",
    "end": "117960"
  },
  {
    "text": "what the what the topics are going to going to be just talking points so feel free to stop and and ask questions as as",
    "start": "117960",
    "end": "125840"
  },
  {
    "text": "we go um going to be a synchronous um run through some use cases on why",
    "start": "125840",
    "end": "131760"
  },
  {
    "text": "Cassandra and how Cassandra um should be the reason for your no SQL U adventures",
    "start": "131760",
    "end": "138440"
  },
  {
    "text": "and um we'll talk a little about the use cases uh obviously pepper it with lots of different use cases there are more",
    "start": "138440",
    "end": "144760"
  },
  {
    "text": "use cases in my mind so if you have any more questions we'll probably answer it with a use case so try and see if it",
    "start": "144760",
    "end": "150800"
  },
  {
    "text": "fits um fits your kind of use case and there is um so up front there is um a",
    "start": "150800",
    "end": "158040"
  },
  {
    "text": "lot of um obvious um discussions when Cassandra comes up eventual consistency",
    "start": "158040",
    "end": "163120"
  },
  {
    "text": "pops up so we'll talk about that um we'll see why and how and what use cases",
    "start": "163120",
    "end": "168840"
  },
  {
    "text": "fit and what use cases do not so um and obviously the number one reason for uh",
    "start": "168840",
    "end": "175120"
  },
  {
    "text": "adopting Cassandra will be the community and the Vibrant Community around that code uh the code is also speaks for",
    "start": "175120",
    "end": "182239"
  },
  {
    "text": "itself very uh brand new code so you you look at that and there's a journey of tools that are being built as as um in",
    "start": "182239",
    "end": "189879"
  },
  {
    "text": "the last few months as well it's a fast moving project so um the community around Cassandra is definitely rich and",
    "start": "189879",
    "end": "196640"
  },
  {
    "text": "that's kind of one of the reasons I I I got excited about Cassandra use case um users so this is",
    "start": "196640",
    "end": "205120"
  },
  {
    "start": "202000",
    "end": "329000"
  },
  {
    "text": "the day and the age of millions of users are are same users producing millions of",
    "start": "205120",
    "end": "210599"
  },
  {
    "text": "clicks uh you're trying to find out funnel your user see how it fits in uh",
    "start": "210599",
    "end": "216159"
  },
  {
    "text": "see what he did before he did the shopping card see what he did where did he go what did he tweet um and try and",
    "start": "216159",
    "end": "222760"
  },
  {
    "text": "connect the dots around your user and that's um one common use case we see where people when they move to Cassandra",
    "start": "222760",
    "end": "229560"
  },
  {
    "text": "they're looking at trying to funnel and shape their users Netflix common example",
    "start": "229560",
    "end": "235680"
  },
  {
    "text": "um Big Marky example for us um they are in production and all the movies you're watching are are being all your user",
    "start": "235680",
    "end": "243319"
  },
  {
    "text": "data for Netflix is on Cassandra running real time um so um so couple of couple",
    "start": "243319",
    "end": "250159"
  },
  {
    "text": "of concepts are introduced here key um you need key it's a so most of these no",
    "start": "250159",
    "end": "255640"
  },
  {
    "text": "SQL stores have originated from key value stores so being able to build a",
    "start": "255640",
    "end": "260720"
  },
  {
    "text": "good key is actually um a big um big answer to your um your problems you're",
    "start": "260720",
    "end": "267080"
  },
  {
    "text": "presenting your data your data is is also a part of your key so um you Key by",
    "start": "267080",
    "end": "273240"
  },
  {
    "text": "customer it's a very read heavy um all your plays as you play them on different devices are being stored in a column as",
    "start": "273240",
    "end": "280240"
  },
  {
    "text": "they go and it's growing long row of columns Cassandra can support up to 2 billion columns but uh if you're not",
    "start": "280240",
    "end": "287880"
  },
  {
    "text": "using lots of columns then you're probably not using Cassandra strength um",
    "start": "287880",
    "end": "293240"
  },
  {
    "text": "at the same time you don't want a big fat row so that's other option other thing to look at um Key by customer",
    "start": "293240",
    "end": "299759"
  },
  {
    "text": "movie so you want to know how a particular customer if a bunch of customers are stopping a movie at a",
    "start": "299759",
    "end": "305199"
  },
  {
    "text": "particular spot you we want to know if that's probably a problem in that video file so again you want to see how",
    "start": "305199",
    "end": "312199"
  },
  {
    "text": "customers are are watching so that's other um so right heavy operation you're writing all the top and so that's the",
    "start": "312199",
    "end": "318800"
  },
  {
    "text": "other um highspeed rights is another common strength for that cassander",
    "start": "318800",
    "end": "324199"
  },
  {
    "text": "brings to the table and so that's another the right heavy operation another common use case time",
    "start": "324199",
    "end": "330039"
  },
  {
    "start": "329000",
    "end": "433000"
  },
  {
    "text": "series um we see a lot of customers trying to build um trying to get data around their um devices or or they want",
    "start": "330039",
    "end": "338600"
  },
  {
    "text": "to get periodic readings or even on on their own applications they want to know production application how they're doing",
    "start": "338600",
    "end": "344639"
  },
  {
    "text": "how they are um what the performance is of the different Stacks uh Twitter is a common example the Rainbird is um is a",
    "start": "344639",
    "end": "351720"
  },
  {
    "text": "based out of Cassandra trying to collect statistics on different U pieces UA another common use case doing",
    "start": "351720",
    "end": "358840"
  },
  {
    "text": "Time series St data uh we see a lot of young startups who are not even um up there uh in the big names who are using",
    "start": "358840",
    "end": "365800"
  },
  {
    "text": "cloud cake was one of the uh earliest use case for time series as well um metrics turns out uh Gathering metrics",
    "start": "365800",
    "end": "373080"
  },
  {
    "text": "around data you've already collected turns out to be much larger data set than actual um data so basically you're",
    "start": "373080",
    "end": "381080"
  },
  {
    "text": "trying to get the top 10 you want to get you want to shape your users based on different time series the footprint they",
    "start": "381080",
    "end": "386919"
  },
  {
    "text": "have left uh all the data surround ing your core data is actually the stat",
    "start": "386919",
    "end": "391960"
  },
  {
    "text": "Stables end up being Fast and Furious and so that's where you want to attract the problem with something that scales",
    "start": "391960",
    "end": "399120"
  },
  {
    "text": "horizontally scales without worrying about um about filling up your desk or without worrying about um how do you",
    "start": "399120",
    "end": "406319"
  },
  {
    "text": "partition it so partitioning comes in naturally to to time series stuff so",
    "start": "406319",
    "end": "412759"
  },
  {
    "text": "that's another common use case that people have uh when they're trying to to to shape their their end user experience",
    "start": "412759",
    "end": "419800"
  },
  {
    "text": "um so these are kind of common push towards um going to no SQL and some of",
    "start": "419800",
    "end": "426360"
  },
  {
    "text": "these users have chosen Cassandra and here's a quick compendium of why",
    "start": "426360",
    "end": "432360"
  },
  {
    "text": "so the why Cassandra um it's operationally simple um Dynamo um",
    "start": "432360",
    "end": "438800"
  },
  {
    "start": "433000",
    "end": "514000"
  },
  {
    "text": "Cassandra inherits a lot of its um distribution model from Dynamo Amazon's",
    "start": "438800",
    "end": "445199"
  },
  {
    "text": "um large scale store and has a schema from big table U but for the most part",
    "start": "445199",
    "end": "451840"
  },
  {
    "text": "the distribution model every node it's peer-to-peer so peerto peer has historically um proven to be more U",
    "start": "451840",
    "end": "459479"
  },
  {
    "text": "resilient to scale uh if you look at DNS um it's a very peer-to-peer storage of",
    "start": "459479",
    "end": "465240"
  },
  {
    "text": "your of Ip information and it's scales it's scaled for the last many many",
    "start": "465240",
    "end": "470759"
  },
  {
    "text": "decades so um and and so peer-to-peer having no central point of uh of",
    "start": "470759",
    "end": "477080"
  },
  {
    "text": "anything um makes Cassandra very resilient to a lot of lot of stuff so um",
    "start": "477080",
    "end": "483360"
  },
  {
    "text": "that's and there's a quote one of our customer um made which basically when an Ops guy picks which nosql store to use",
    "start": "483360",
    "end": "492319"
  },
  {
    "text": "he eventually gravit gravitates towards Cassandra um and that's been the case",
    "start": "492319",
    "end": "497440"
  },
  {
    "text": "for most of our customers they they spend less time on the operations of how to run a distributed data store when",
    "start": "497440",
    "end": "503599"
  },
  {
    "text": "you're spending more time Shing your MySQL store that's when youve arrived into Big Data that's when you ready for",
    "start": "503599",
    "end": "510599"
  },
  {
    "text": "uh Cassandra a little um structure um",
    "start": "510599",
    "end": "517080"
  },
  {
    "start": "514000",
    "end": "598000"
  },
  {
    "text": "Cassandra actually um is a Cassandra is actually in a ring like",
    "start": "517080",
    "end": "523800"
  },
  {
    "text": "structure um U all those each one of those actually present a node every node has a commit log which basically is",
    "start": "523800",
    "end": "531320"
  },
  {
    "text": "where it's a classic database concept of read of basically sequential logs um",
    "start": "531320",
    "end": "537240"
  },
  {
    "text": "appendonly sequential logs and and um so all so when you send it right for",
    "start": "537240",
    "end": "542640"
  },
  {
    "text": "example three nodes um and depending on what consistency level you've applied to it you have three nodes participating in",
    "start": "542640",
    "end": "549519"
  },
  {
    "text": "that right for example right there um so basically all I mean it it goes finds",
    "start": "549519",
    "end": "554959"
  },
  {
    "text": "the key uh the coordinator node finds the nodes that are participating in that key and stores at the same time um and",
    "start": "554959",
    "end": "563000"
  },
  {
    "text": "and fires off the other two as synchronously now sequential wres are very fast and um what that leaves is a",
    "start": "563000",
    "end": "570600"
  },
  {
    "text": "very simple right model that also does replication so it's happening while",
    "start": "570600",
    "end": "576320"
  },
  {
    "text": "you're doing the right it's not postponed to do a replication after the fact after you build the system up after",
    "start": "576320",
    "end": "583440"
  },
  {
    "text": "you have your data on it all your data all your data is being replicated in in the right it's not um it's not it's an",
    "start": "583440",
    "end": "590519"
  },
  {
    "text": "amortized cost of right of replication so you're getting a lot of um",
    "start": "590519",
    "end": "596480"
  },
  {
    "text": "distribution out of the box so what what does that mean um why do I care um so",
    "start": "596480",
    "end": "602600"
  },
  {
    "start": "598000",
    "end": "636000"
  },
  {
    "text": "back in the day only the financial services guys would have high available multi data center um up times and have",
    "start": "602600",
    "end": "610880"
  },
  {
    "text": "that kind of availability now everybody can get it anybody who is um who's able",
    "start": "610880",
    "end": "616680"
  },
  {
    "text": "to um have two nodes in two different availability zones will get that kind of",
    "start": "616680",
    "end": "621959"
  },
  {
    "text": "availability um whether it's ec2 or in on your own machines you can do rack of",
    "start": "621959",
    "end": "627480"
  },
  {
    "text": "a within your own uh dat Center if you want so all of that at a very inexpensive cost of a single right so",
    "start": "627480",
    "end": "634279"
  },
  {
    "text": "every right you replicate um another example there um",
    "start": "634279",
    "end": "639440"
  },
  {
    "start": "636000",
    "end": "671000"
  },
  {
    "text": "showing two different data centers um dc1 dc2 now um ec2 has a multi- region",
    "start": "639440",
    "end": "647720"
  },
  {
    "text": "uh so you can use that or E2 as well when you read you don't necessarily have",
    "start": "647720",
    "end": "653079"
  },
  {
    "text": "to cross the boundaries of of the data centers so important to know is that you can actually separate your right",
    "start": "653079",
    "end": "658680"
  },
  {
    "text": "performance from your reads so you can continue to do answer your queries locally so you get that uh performance",
    "start": "658680",
    "end": "665480"
  },
  {
    "text": "um you don't pay pay for your performance on the reads so um everyone anyone here",
    "start": "665480",
    "end": "673600"
  },
  {
    "text": "deployed on ec2 and and have hit the outage on April 21st so um most people",
    "start": "673600",
    "end": "682000"
  },
  {
    "text": "are watching Netflix um and Netflix was running on AWS right so um and Netflix was using",
    "start": "682000",
    "end": "689720"
  },
  {
    "text": "the multi- data center um multi- region multi availability zones feature of",
    "start": "689720",
    "end": "695480"
  },
  {
    "text": "Cassandra so um others other Cassandra customers have survived as well",
    "start": "695480",
    "end": "702120"
  },
  {
    "text": "so um let's switch G to fast Geral rights um rights I mean the the reason I",
    "start": "702120",
    "end": "709560"
  },
  {
    "start": "703000",
    "end": "795000"
  },
  {
    "text": "got excited about Cassandra was I ran the Benchmark uh the ycsb cloud",
    "start": "709560",
    "end": "715680"
  },
  {
    "text": "Benchmark and you look at that and I I was like maybe the numbers are wrong maybe the digits are off so maybe the",
    "start": "715680",
    "end": "721600"
  },
  {
    "text": "data is not in there right so coming from coherence and Oracle and other structures from Big from Big Stacks from",
    "start": "721600",
    "end": "729079"
  },
  {
    "text": "the J2 world I looked at this number and like this doesn't make sense the rights are super fast you have to run it to",
    "start": "729079",
    "end": "736040"
  },
  {
    "text": "know it and the data is in there and it is um so the the Crux of that is the",
    "start": "736040",
    "end": "742000"
  },
  {
    "text": "commit log that we saw earlier um it's appen only fast seeks so cheap inexpensive discs can get you fast",
    "start": "742000",
    "end": "749639"
  },
  {
    "text": "performance and it's not um I it's not ssds that are getting that performance in fact even on the cloud we Emeral",
    "start": "749639",
    "end": "757040"
  },
  {
    "text": "discs which is the local discs will get you better performance than the the most more expensive ones so um in some sense",
    "start": "757040",
    "end": "764560"
  },
  {
    "text": "rights are the like the work hards of of Cassandra um you can basically write a",
    "start": "764560",
    "end": "771040"
  },
  {
    "text": "lot of Rights and um and not and maybe orders of magnitude better so in many",
    "start": "771040",
    "end": "776839"
  },
  {
    "text": "ways so single digit MC rights are common for our customers in production",
    "start": "776839",
    "end": "782160"
  },
  {
    "text": "and fast reads and uh you're not paying the cost at read time uh we'll also",
    "start": "782160",
    "end": "787399"
  },
  {
    "text": "double click on on the reads part right um so single digit",
    "start": "787399",
    "end": "793000"
  },
  {
    "text": "milliseconds app and only reads um so the other interesting",
    "start": "793000",
    "end": "798800"
  },
  {
    "text": "Nuance around Cassandra which attracts attracts um real really um a lot of",
    "start": "798800",
    "end": "804480"
  },
  {
    "text": "talent is is basically that reads you pay your repair cost while you're",
    "start": "804480",
    "end": "810320"
  },
  {
    "text": "reading it so when you're reading data you're actually repairing the the entire EOS the distributed system and sometimes",
    "start": "810320",
    "end": "817320"
  },
  {
    "text": "you're you're so just like you replicated while you while you wrote and you amortize the cost of replication",
    "start": "817320",
    "end": "823320"
  },
  {
    "text": "when when you wrote the reads um are basically playing the C the the the the",
    "start": "823320",
    "end": "830560"
  },
  {
    "text": "part of homekeeper fixing the data so you're",
    "start": "830560",
    "end": "838240"
  },
  {
    "text": "paying the cost cost of repair uh while you're reading now it does look like you're paying the cost up and doesn't is",
    "start": "838240",
    "end": "845839"
  },
  {
    "text": "that a good thing but turns out the reads are fast they're not super super slow but the repairs are are actually",
    "start": "845839",
    "end": "852839"
  },
  {
    "text": "going to keep your data insane most of the time so that's kind of your um the the second interesting nugget from",
    "start": "852839",
    "end": "860000"
  },
  {
    "text": "Cassandra is that amortized Repair actually actually pays off in the long term your data gets to be in better",
    "start": "860000",
    "end": "866600"
  },
  {
    "text": "shape and your one node is not too far off from the other so um there are a bunch of caches um key",
    "start": "866600",
    "end": "874560"
  },
  {
    "text": "and row caches and kudos to the HB team which implemented off Heap we also have offhe on cassand so you get uh the",
    "start": "874560",
    "end": "882000"
  },
  {
    "text": "benefits of um escaping from garbage collection um jvm problems um so um off",
    "start": "882000",
    "end": "888800"
  },
  {
    "text": "GNA based offs uh indexes uh second indexes are in the new SRA world and um",
    "start": "888800",
    "end": "895680"
  },
  {
    "text": "but for the most part materialized um uh way of looking at things don't expect",
    "start": "895680",
    "end": "901560"
  },
  {
    "text": "joints joints are not there so metalize your schema so to fit your queries so so",
    "start": "901560",
    "end": "908160"
  },
  {
    "text": "we'll go back to the slide one at some point you're you're paying the cost of metal metalizing your data up front your",
    "start": "908160",
    "end": "914560"
  },
  {
    "text": "schema up front so um clients um the preferred clients",
    "start": "914560",
    "end": "921040"
  },
  {
    "start": "918000",
    "end": "968000"
  },
  {
    "text": "these days are SQL um Thrift is the the calization D calization format within",
    "start": "921040",
    "end": "926440"
  },
  {
    "text": "Cassandra and that still happens to be um uh things that people use customers",
    "start": "926440",
    "end": "932440"
  },
  {
    "text": "use Picassa I've seen a lot of python and PHP um in in our customer base a lot",
    "start": "932440",
    "end": "937920"
  },
  {
    "text": "of um roll your own um uh types from Scala and closure but Hector leads the",
    "start": "937920",
    "end": "943720"
  },
  {
    "text": "pack in terms of the number of java clients that we have so number of clients using Java clients is Hector uh",
    "start": "943720",
    "end": "951040"
  },
  {
    "text": "plops is a simple um get your hands dirty quickly so you can you can go and",
    "start": "951040",
    "end": "956279"
  },
  {
    "text": "uh roll your own quick uh Cassandra CLI so but that said chromium Ruby enclosure",
    "start": "956279",
    "end": "963639"
  },
  {
    "text": "other we have scallop so use case number three uh her dup",
    "start": "963639",
    "end": "971560"
  },
  {
    "start": "968000",
    "end": "1059000"
  },
  {
    "text": "turns out we started implementing a lot of Cassandra customers um started",
    "start": "971560",
    "end": "977560"
  },
  {
    "text": "implementing a lot of Cassandra scale and we we would help them get quickly up to speed and see what's going on",
    "start": "977560",
    "end": "984319"
  },
  {
    "text": "eventually they'll tell us the whole story and what so we want to improve performance of the reads right so that's",
    "start": "984319",
    "end": "990319"
  },
  {
    "text": "a common question that would come up and we look at it and say it's a ruby client trying to talk data from from Cassandra",
    "start": "990319",
    "end": "996440"
  },
  {
    "text": "or talk into Cassandra and we look further this client is actually reading from a cloud era cloud of of Hado s um",
    "start": "996440",
    "end": "1005519"
  },
  {
    "text": "or um the new the Apachi Hado so we would see that um Hadoop was actually",
    "start": "1005519",
    "end": "1011959"
  },
  {
    "text": "siphoning a lot of the data from log files running a bunch of things and then they're storing those into Cassandra",
    "start": "1011959",
    "end": "1019079"
  },
  {
    "text": "and so and serving those um that data from Cassandra whether it's analytics or real web um web apps so this turned out",
    "start": "1019079",
    "end": "1026520"
  },
  {
    "text": "to be a pretty common case for our customers and that led us to um in in",
    "start": "1026520",
    "end": "1032199"
  },
  {
    "text": "investing time and building what's called brisk um brisk is a truly peer-to-peer dup and we'll see um we'll",
    "start": "1032199",
    "end": "1041400"
  },
  {
    "text": "see where that uh gets but brisk is essentially Hive plus hdfs plus",
    "start": "1041400",
    "end": "1047160"
  },
  {
    "text": "Cassandra so so um that's our um that's the Cassandra's entrance into the doop",
    "start": "1047160",
    "end": "1053640"
  },
  {
    "text": "space where we're trying to see how we can solve um solve the problems from there um name node has been a problem in",
    "start": "1053640",
    "end": "1061679"
  },
  {
    "text": "Cass in hdfs for for for a little while where um you you're unable to put a lot",
    "start": "1061679",
    "end": "1067160"
  },
  {
    "text": "of um um so all the iodes um anyone who has and and I'm expecting Tau to really",
    "start": "1067160",
    "end": "1073679"
  },
  {
    "text": "go deeper into the slide um and explain some more of the hdfs Hadoop uh internals but um anyone who has seen um",
    "start": "1073679",
    "end": "1082720"
  },
  {
    "text": "had doop distribu installed um will see that they're uh spending they're limited by the size of with which the name node",
    "start": "1082720",
    "end": "1090159"
  },
  {
    "text": "would scale so um one of the things we saw that there an opportunity to make this all peer to-peer um and basically",
    "start": "1090159",
    "end": "1098799"
  },
  {
    "text": "dup um in brisk essentially in brisk we basically took hdfs and laid out the",
    "start": "1098799",
    "end": "1104600"
  },
  {
    "text": "core um iode and blocks as as just basic tables and any table um essentially",
    "start": "1104600",
    "end": "1112000"
  },
  {
    "text": "scales peer-to-peer across all the nodes in Cassandra so so so here you see a a",
    "start": "1112000",
    "end": "1119200"
  },
  {
    "text": "piece where all the with the elephants inside those nodes are brisk nodes you can continue to run the rest of your um",
    "start": "1119200",
    "end": "1125880"
  },
  {
    "text": "cluster as a Cassandra cluster so this is um um this is um 3 months in the",
    "start": "1125880",
    "end": "1131600"
  },
  {
    "text": "making and um and and and now currently in adoption in several customers so so",
    "start": "1131600",
    "end": "1138840"
  },
  {
    "text": "um and it's a bi um it's a very good play in the bi space and um uh and",
    "start": "1138840",
    "end": "1144400"
  },
  {
    "text": "people trying to use together low latency and batch together are are working with it um we'll double click on",
    "start": "1144400",
    "end": "1150760"
  },
  {
    "text": "some of the use case there but um the column families um essentially are",
    "start": "1150760",
    "end": "1156240"
  },
  {
    "start": "1153000",
    "end": "1176000"
  },
  {
    "text": "Cassandra or big tables way of talking about tables you'll hear about column families probably more as you read",
    "start": "1156240",
    "end": "1162039"
  },
  {
    "text": "through the space um so it's and and essentially we took inode and S blog and",
    "start": "1162039",
    "end": "1167799"
  },
  {
    "text": "and made real tables and that basically um puts them on on Cassandra and on peer to-peer",
    "start": "1167799",
    "end": "1176159"
  },
  {
    "start": "1176000",
    "end": "1278000"
  },
  {
    "text": "so so for low latency and um you have a Cassandra data center nodes and for",
    "start": "1176159",
    "end": "1181559"
  },
  {
    "text": "batch analytics you use brisk data center nodes what does that do to do to me as an application provider um you try",
    "start": "1181559",
    "end": "1189919"
  },
  {
    "text": "you're now putting in logs through Hado into a cluster you don't know what",
    "start": "1189919",
    "end": "1195600"
  },
  {
    "text": "cluster it's a Hado cluster um now that data essentially becomes available for",
    "start": "1195600",
    "end": "1201799"
  },
  {
    "text": "you to to be run as queries through hi or through um through basic even other",
    "start": "1201799",
    "end": "1207600"
  },
  {
    "text": "operations that you can make small tables that can now serve realtime data or or low latency data near realtime",
    "start": "1207600",
    "end": "1214400"
  },
  {
    "text": "data low latency data for the rest of the world so um this brings together a",
    "start": "1214400",
    "end": "1219480"
  },
  {
    "text": "problem that our customers were working uh a lot to connect all the dots of different pieces of the nosql space the",
    "start": "1219480",
    "end": "1226480"
  },
  {
    "text": "nosql space is the tail end of a real big space here which is the Hadoop space the Hadoop space is is basically all",
    "start": "1226480",
    "end": "1233960"
  },
  {
    "text": "your machine generated data all your machine today most of it is going to hdfs that's your store that's the that's",
    "start": "1233960",
    "end": "1241720"
  },
  {
    "text": "a true um true highs scale store that's happening and now the tail end of that",
    "start": "1241720",
    "end": "1247120"
  },
  {
    "text": "where you have now munged all this data created a small little table that or small set of tables that you want to put",
    "start": "1247120",
    "end": "1253559"
  },
  {
    "text": "are now sitting on Cassandra and you're serving them off of off of of Cassandra to the rest of of the world that's a",
    "start": "1253559",
    "end": "1259039"
  },
  {
    "text": "common that's a typical use case that we see of course there is this flip um use",
    "start": "1259039",
    "end": "1264280"
  },
  {
    "text": "case where you want to put pedabytes of data in cassand that happens too but Hado itself is a market that has um",
    "start": "1264280",
    "end": "1271279"
  },
  {
    "text": "taken off and is something we are aware of and are paying attention to",
    "start": "1271279",
    "end": "1277360"
  },
  {
    "text": "um all right pause in the talk fud let's look at what flaws and F that's",
    "start": "1277360",
    "end": "1283159"
  },
  {
    "start": "1278000",
    "end": "1436000"
  },
  {
    "text": "surrounding Cassandra space and we'll also look at some real real flaws as well",
    "start": "1283159",
    "end": "1289240"
  },
  {
    "text": "um consistency so people talk about consistency in cap theorem um and cap",
    "start": "1289240",
    "end": "1294520"
  },
  {
    "text": "theorem and um actually the the paper that Bruno pres put up Nancy Lynch um",
    "start": "1294520",
    "end": "1301159"
  },
  {
    "text": "she proved the paper eventually um she was also um part of Leslie lamp's uh she",
    "start": "1301159",
    "end": "1307279"
  },
  {
    "text": "reviewed Leslie lamp's orinal paper on clocks which is another interesting tidbit from from back in the day anyways",
    "start": "1307279",
    "end": "1314320"
  },
  {
    "text": "consistency you hear RW algebra when you talk about cap theorem um what uh what is r w and then R is",
    "start": "1314320",
    "end": "1322520"
  },
  {
    "text": "number of reads um W is the number of Rights or number of copies of Rights you",
    "start": "1322520",
    "end": "1328679"
  },
  {
    "text": "make sure that want that have to agree on a particular value n is the total",
    "start": "1328679",
    "end": "1334640"
  },
  {
    "text": "number of replicas so given that um let's look at how this works if so what the cap theem States is if your number",
    "start": "1334640",
    "end": "1341240"
  },
  {
    "text": "if you're read consistency and write consistency is greater than the total number of copies inside your um cluster",
    "start": "1341240",
    "end": "1348039"
  },
  {
    "text": "you have a consistent data now how does this really work let's look at Oracle two node failover replication scenario",
    "start": "1348039",
    "end": "1355480"
  },
  {
    "text": "how do you how does a two- node article um be consistent it asks for uh it asks",
    "start": "1355480",
    "end": "1361480"
  },
  {
    "text": "reads from one node so it asks for any one of the nodes to agree and it makes sure that the number of right every time",
    "start": "1361480",
    "end": "1367360"
  },
  {
    "text": "you write to one node it makes sure it writes to the second node the W equal to two right and the total number of copies",
    "start": "1367360",
    "end": "1373000"
  },
  {
    "text": "are always going to be two so if you I mean if you made a third copy and only wrote twice then that would be not r+ W",
    "start": "1373000",
    "end": "1381640"
  },
  {
    "text": "greater than n and so it would be inconsistent right so if you made a backup last night and and and did not",
    "start": "1381640",
    "end": "1388120"
  },
  {
    "text": "write to that backup that would be behind today's data so the reason R plus",
    "start": "1388120",
    "end": "1394279"
  },
  {
    "text": "WN or the reason Oracle replication works even the big oracles is because",
    "start": "1394279",
    "end": "1401080"
  },
  {
    "text": "the total number of nodes is two and you always U made sure that um R plus W is",
    "start": "1401080",
    "end": "1406919"
  },
  {
    "text": "greater than n so this is the simple logic behind eventual consistency this is a simple logic that we are um we are",
    "start": "1406919",
    "end": "1414080"
  },
  {
    "text": "saying that um that's not going to bite um your data your data is not getting",
    "start": "1414080",
    "end": "1420080"
  },
  {
    "text": "inconsistent there is an inconsistency window for every complex system and that's different the eventual",
    "start": "1420080",
    "end": "1425400"
  },
  {
    "text": "consistency model has worked DNS is an is the most popular eventual consistency",
    "start": "1425400",
    "end": "1430600"
  },
  {
    "text": "um uh system eventual consistent system and has scaled for us for years so um",
    "start": "1430600",
    "end": "1437400"
  },
  {
    "start": "1436000",
    "end": "1596000"
  },
  {
    "text": "what we like like to think about this is more as more as tunable consistency and",
    "start": "1437400",
    "end": "1443120"
  },
  {
    "text": "tunable consistency is it gives you flexibility so you can program consistency for the first time all along",
    "start": "1443120",
    "end": "1449520"
  },
  {
    "text": "we paid the cost of always consistent all the time um um for every every",
    "start": "1449520",
    "end": "1455080"
  },
  {
    "text": "little application um so for example the geoc code of this particular U site it's",
    "start": "1455080",
    "end": "1460760"
  },
  {
    "text": "not going to change in in an neon so why do I have to make sure it's locked",
    "start": "1460760",
    "end": "1466720"
  },
  {
    "text": "heavily around or why do I have to make sure it's it's it's not going to change it's an immutable data so let's let me",
    "start": "1466720",
    "end": "1472640"
  },
  {
    "text": "actually get something that's not consistent or try to be not pay the cost of consistency for it so for the first",
    "start": "1472640",
    "end": "1478960"
  },
  {
    "text": "time we actually have an application uh Paradigm that actually allows you to program it of course and yes there is",
    "start": "1478960",
    "end": "1486440"
  },
  {
    "text": "cost with that so and and that's kind of the the big push back you get is it's expensive to program thinking about all",
    "start": "1486440",
    "end": "1493240"
  },
  {
    "text": "these but that's what some of our customers are actually gaining from by not saying that I don't need to lock",
    "start": "1493240",
    "end": "1499760"
  },
  {
    "text": "these pieces and these pieces are fine with having a consistency level of of one or consistency level of Quorum for",
    "start": "1499760",
    "end": "1507600"
  },
  {
    "text": "high consistency um so regardless the Cassandra programming model actually",
    "start": "1507600",
    "end": "1512960"
  },
  {
    "text": "makes available all the levels of consistency Cassandra itself has changed a little bit in the last few and um we",
    "start": "1512960",
    "end": "1519480"
  },
  {
    "text": "have added consistency level from zero to all uh for both reads and and mostly for and also for rides so you you can",
    "start": "1519480",
    "end": "1525840"
  },
  {
    "text": "actually enforce a very high High um level of consistency and you're trading",
    "start": "1525840",
    "end": "1531399"
  },
  {
    "text": "off high availability so that's kind of the the the the piece so if you enforce for example I want to make all the nodes",
    "start": "1531399",
    "end": "1538960"
  },
  {
    "text": "right all the time then even if one node is down then you're basically paying the cost of of not being available and so",
    "start": "1538960",
    "end": "1545799"
  },
  {
    "text": "that's the trade-off and literally that's the trade-off in the mind and at least um part of this stock hopefully",
    "start": "1545799",
    "end": "1551360"
  },
  {
    "text": "will will get that across so so if you want a very high highly available system you want to write lots of copies and",
    "start": "1551360",
    "end": "1557480"
  },
  {
    "text": "make make sure you read from any one of them and you're fine or any two of them agree on the data and you're fine so you",
    "start": "1557480",
    "end": "1563120"
  },
  {
    "text": "get a pretty high high availability through that so that's the um that's the last piece there um and and I and there",
    "start": "1563120",
    "end": "1571039"
  },
  {
    "text": "is a ton of f especially because R WN and and N is usually confused with total",
    "start": "1571039",
    "end": "1577520"
  },
  {
    "text": "number of nodes which is different you can have 100 nodes and you can just have have a number of replicas B2 so that's",
    "start": "1577520",
    "end": "1584000"
  },
  {
    "text": "other um nuance and the way it's been introduced in the original Dynamo paper um definitely um put a lot of um lot of",
    "start": "1584000",
    "end": "1591880"
  },
  {
    "text": "um discussion in this topic so um another common question that I get",
    "start": "1591880",
    "end": "1597679"
  },
  {
    "start": "1596000",
    "end": "1619000"
  },
  {
    "text": "asked is why is Facebook not using Cassandra anymore and I just typed um",
    "start": "1597679",
    "end": "1603640"
  },
  {
    "text": "Facebook and Cassandra and Kora and you see like a dozen questions which are all pretty much saying the same thing what",
    "start": "1603640",
    "end": "1609600"
  },
  {
    "text": "which application is using and which is not and and I actually spoke to the team that wrote Cassandra at Facebook",
    "start": "1609600",
    "end": "1615520"
  },
  {
    "text": "recently and happened to connect with with them and ask why and turns out they actually only recently um actually um",
    "start": "1615520",
    "end": "1623760"
  },
  {
    "text": "only recently um removed the application on Cassandra like a couple of months ago",
    "start": "1623760",
    "end": "1629640"
  },
  {
    "text": "um on inbox search so inbox search was the original application that was actually running it and um it did scale",
    "start": "1629640",
    "end": "1635640"
  },
  {
    "text": "them scale for them so the the Crux of that is it did scale for Facebook from 100 million to 500 million users and",
    "start": "1635640",
    "end": "1642320"
  },
  {
    "text": "that's a true story and that's not made up and if you are running into that scale problems or if if the things if",
    "start": "1642320",
    "end": "1649000"
  },
  {
    "text": "your um your context may not be the context of of Facebook essentially and and so it did scale for them and it did",
    "start": "1649000",
    "end": "1655880"
  },
  {
    "text": "use and they were using and we were all using it as part of that so and the average nosql deployment size is not",
    "start": "1655880",
    "end": "1662279"
  },
  {
    "text": "nearly that size right it's a very small the one we see is actually 12 nodes usually so it's not um it's not the",
    "start": "1662279",
    "end": "1669360"
  },
  {
    "text": "problem that you guys are going to face going out not all of us anyways um that also uh gives a hint",
    "start": "1669360",
    "end": "1679519"
  },
  {
    "start": "1676000",
    "end": "1713000"
  },
  {
    "text": "into another use case which is search um Cassandra is actually used in in conjunction with solar um as solandra",
    "start": "1679519",
    "end": "1687039"
  },
  {
    "text": "which is actually an interesting product that we baked in the labs um Jake whose GitHub account is there um essentially",
    "start": "1687039",
    "end": "1693519"
  },
  {
    "text": "um able to do solar store on Cassandra so essentially you can store on Cassandra and scale to pyte scale uh",
    "start": "1693519",
    "end": "1700360"
  },
  {
    "text": "indexes so you can get the same kind of search interface that you got in the in solar and Lucine and use that on on",
    "start": "1700360",
    "end": "1707440"
  },
  {
    "text": "essentially using Cassandra so that's another common use case that we do",
    "start": "1707440",
    "end": "1712799"
  },
  {
    "text": "see eventual consistency is harder to program and um that's true actually um",
    "start": "1712799",
    "end": "1718519"
  },
  {
    "start": "1713000",
    "end": "1779000"
  },
  {
    "text": "but it's also a flexibility you have you never we never had it we always were paying as it C was always taken from us",
    "start": "1718519",
    "end": "1725799"
  },
  {
    "text": "whether it was my SQL or Oracle we always were paying for that but as you as you put yourself in a person who's",
    "start": "1725799",
    "end": "1732720"
  },
  {
    "text": "shotting my SQL for the first time you understand that you're inventing um",
    "start": "1732720",
    "end": "1737919"
  },
  {
    "text": "inventing vual consistency while you're doing that some of our customers who chose Cassandra they're filling up the",
    "start": "1737919",
    "end": "1744559"
  },
  {
    "text": "shot faster than they could sh so um so",
    "start": "1744559",
    "end": "1749600"
  },
  {
    "text": "but the Crux of the argument that I make is that the average customer has mostly",
    "start": "1749600",
    "end": "1754640"
  },
  {
    "text": "mutable data if you're using Hado youve written the log file last night right the data is already immutable it's not",
    "start": "1754640",
    "end": "1760760"
  },
  {
    "text": "changing so mostly mutable data and complex systems at scale are are only",
    "start": "1760760",
    "end": "1766559"
  },
  {
    "text": "part are only halfway consistent anyway so if you had a big GC PA on one of the node that node was behind the behind on",
    "start": "1766559",
    "end": "1774080"
  },
  {
    "text": "data and that was true for web logic right so it was true for the previous stack as well um other miscellaneous Mets that",
    "start": "1774080",
    "end": "1781559"
  },
  {
    "start": "1779000",
    "end": "1857000"
  },
  {
    "text": "are around Cassandra was like you probably you you probably have partial rows or you have data lws no we have a",
    "start": "1781559",
    "end": "1788519"
  },
  {
    "text": "commit log it's per row and it's actually um and it's very um it's a sequential append only if you lost the",
    "start": "1788519",
    "end": "1794480"
  },
  {
    "text": "dis we still recover from that with um with the commit log so we we actually",
    "start": "1794480",
    "end": "1799519"
  },
  {
    "text": "have a test and some of our customers also have test where they kill the dis and make sure everything is fine I",
    "start": "1799519",
    "end": "1804919"
  },
  {
    "text": "actually was at a customer who over the turn of the um Christmas um had a big",
    "start": "1804919",
    "end": "1810880"
  },
  {
    "text": "customer jump onto their analytics um cluster which was not very large but uh",
    "start": "1810880",
    "end": "1816480"
  },
  {
    "text": "one of the cluster was filled up and they didn't know what to do and I said just don't worry and it really and we",
    "start": "1816480",
    "end": "1822240"
  },
  {
    "text": "migrated everything into a bigger larger dis system and then doubled their setup but it really did not um inhibit them",
    "start": "1822240",
    "end": "1830159"
  },
  {
    "text": "from running their app so I mean that node was was out of action five five out",
    "start": "1830159",
    "end": "1835320"
  },
  {
    "text": "of six nodes uh one out of six nodes and the rest five nodes performed and and essentially that's what you're paying",
    "start": "1835320",
    "end": "1841519"
  },
  {
    "text": "for really when you're when you are in the thick of it and when you need to scale that's when uh Cassandra you",
    "start": "1841519",
    "end": "1848880"
  },
  {
    "text": "that's when you thank Cassandra actually um three more reasons for using",
    "start": "1848880",
    "end": "1854240"
  },
  {
    "text": "Sandra before I run out of time um one is tools um a bunch of Amis um have",
    "start": "1854240",
    "end": "1861080"
  },
  {
    "start": "1857000",
    "end": "1918000"
  },
  {
    "text": "come out data Stacks Ami is the one preferred op Center is a data stack tool again um which will allows you to look",
    "start": "1861080",
    "end": "1868039"
  },
  {
    "text": "at data look at your app um look at your uh cluster and be able to perform",
    "start": "1868039",
    "end": "1873919"
  },
  {
    "text": "operations on it it's a j it's kind of a j console on with a very U clean jmax um",
    "start": "1873919",
    "end": "1880200"
  },
  {
    "text": "um presentation but jmx is um I mean every little Nuance around Cassandra has",
    "start": "1880200",
    "end": "1885559"
  },
  {
    "text": "been jmx so you can actually look at all these metrics uh cassand is one of the most I mean I've started I've worked on",
    "start": "1885559",
    "end": "1892799"
  },
  {
    "text": "J boss when it was uh pre 1.0 so looking at when I saw that jmx richness of J",
    "start": "1892799",
    "end": "1898840"
  },
  {
    "text": "boss I was like Wow and Cassandra made me wow again because it definitely tracks everything through jmx it's a",
    "start": "1898840",
    "end": "1905200"
  },
  {
    "text": "very well um nuanced project project around around metric uh app Dynamics has",
    "start": "1905200",
    "end": "1910760"
  },
  {
    "text": "a pretty um pretty cool tool around Cassandra and other uh apps as well so",
    "start": "1910760",
    "end": "1915880"
  },
  {
    "text": "um definitely check that out um another big reason that attracts um",
    "start": "1915880",
    "end": "1921120"
  },
  {
    "start": "1918000",
    "end": "1998000"
  },
  {
    "text": "Cassandra is it's beautiful code um it's new code and it's actually lot smaller",
    "start": "1921120",
    "end": "1926840"
  },
  {
    "text": "than you think um when I started looking at it was about 75,000 lines and the last 1.8 version we close to 90k as of",
    "start": "1926840",
    "end": "1935159"
  },
  {
    "text": "last night um and it's um it uses the it is Java so most people who have here",
    "start": "1935159",
    "end": "1940320"
  },
  {
    "text": "from the Java land will automatically uh be able to look at it look and pour every piece of it um it's uh uses mostly",
    "start": "1940320",
    "end": "1948240"
  },
  {
    "text": "concurrent collections so skip plus you'll see at the core of the um at the the architecture you see very",
    "start": "1948240",
    "end": "1953679"
  },
  {
    "text": "interesting good collections so if you're um if you're Avid Reader of code you would love to you love Cassandra um",
    "start": "1953679",
    "end": "1961039"
  },
  {
    "text": "it uses annotations Bloom filters Merkel trees lots of interesting good data structures these are real hard problems",
    "start": "1961039",
    "end": "1967279"
  },
  {
    "text": "guys dat distributed counters um very hard problem right so people have done",
    "start": "1967279",
    "end": "1972639"
  },
  {
    "text": "that before but you you get to invent them again see them again and it's happening it's not like like the the",
    "start": "1972639",
    "end": "1977679"
  },
  {
    "text": "product is getting to be 1.0 soon right so um it's non-blocking it us non-blocking iio staged so when you",
    "start": "1977679",
    "end": "1983880"
  },
  {
    "text": "actually do a note tool um um stats you'll actually see the stages of where",
    "start": "1983880",
    "end": "1989120"
  },
  {
    "text": "each of these stats are where each of these uh thread cues are so you actually it's a staged architecture so you can",
    "start": "1989120",
    "end": "1995399"
  },
  {
    "text": "actually see a lot of interesting nuances there um the the current Focus um around",
    "start": "1995399",
    "end": "2001159"
  },
  {
    "text": "counters and cql which is uh uh trying to make it less um um trying to make it",
    "start": "2001159",
    "end": "2007639"
  },
  {
    "text": "easy for people to get in that's one of the hardest um biggest um um critique of",
    "start": "2007639",
    "end": "2012840"
  },
  {
    "text": "of Cassandra and somewhat valid for so far is it's very hard to get into using it um from an end application standpoint",
    "start": "2012840",
    "end": "2020080"
  },
  {
    "text": "a lot more gaps uh exist there and are being fixed and we're trying to make a simple client so you can actually use it",
    "start": "2020080",
    "end": "2025919"
  },
  {
    "text": "um and so the the flip side is true for  where the the client is dead simple to use you can actually use it",
    "start": "2025919",
    "end": "2031360"
  },
  {
    "text": "right away so um so credit where credit is due Cassandra is actually um is going",
    "start": "2031360",
    "end": "2036600"
  },
  {
    "text": "to is now focusing on making that dead simple for end users um and there's a",
    "start": "2036600",
    "end": "2041639"
  },
  {
    "text": "lot of operational smoothening that's happening hardening before 1.0 and more of that will will as as we go",
    "start": "2041639",
    "end": "2049200"
  },
  {
    "text": "forward the community behind Cassandra as I mentioned that's kind of the biggest um biggest um reason to to",
    "start": "2049200",
    "end": "2056679"
  },
  {
    "start": "2050000",
    "end": "2112000"
  },
  {
    "text": "choose and learn Cassandra uh and use that as your nosql place it's a very robust it's rapid um hash Cassandra is",
    "start": "2056679",
    "end": "2063919"
  },
  {
    "text": "active 24x7 I've not seen any it be um any time of the day uh most people",
    "start": "2063919",
    "end": "2070000"
  },
  {
    "text": "even the um Jonathan Ellis who's the founder of data Stacks is is one email",
    "start": "2070000",
    "end": "2075960"
  },
  {
    "text": "away and usually his email arrives much faster than my own boss email so um so I",
    "start": "2075960",
    "end": "2081839"
  },
  {
    "text": "mean these are really um very um passionate Engineers young set of Engineers behind this project data",
    "start": "2081839",
    "end": "2087839"
  },
  {
    "text": "Stacks um as well as the people who did U work on it and and there's a bunch of Engineers both independent Consultants",
    "start": "2087839",
    "end": "2093960"
  },
  {
    "text": "startups um Reddit um other startups from San Francisco rest of the world",
    "start": "2093960",
    "end": "2099560"
  },
  {
    "text": "large companies Rackspace Twitter Netflix um all of them are are behind us it's not a project that's going away so",
    "start": "2099560",
    "end": "2106480"
  },
  {
    "text": "um come join the efforts and that's kind of one thing that I would say um before I leave um here's other trends that we",
    "start": "2106480",
    "end": "2114200"
  },
  {
    "start": "2112000",
    "end": "2214000"
  },
  {
    "text": "see job Trends um downloads don't speak very well so uh job trends of Cassandra is on the up and um use case oh numbers",
    "start": "2114200",
    "end": "2122960"
  },
  {
    "text": "are off another use case is um first no SQL then SC so when your first nosql may not be the",
    "start": "2122960",
    "end": "2129480"
  },
  {
    "text": "one that you're going to be using for scaling get so the move from Netflix actually um characterized their move",
    "start": "2129480",
    "end": "2136200"
  },
  {
    "text": "from rdbms to no SQL was one long year and then once they got there moving to",
    "start": "2136200",
    "end": "2142000"
  },
  {
    "text": "Cassandra was a week but but getting to know SQL is actually a very harder developer Journey because you have to",
    "start": "2142000",
    "end": "2148720"
  },
  {
    "text": "think queries first you have to think queries and how the data is growing and all so all that Journey we have to give",
    "start": "2148720",
    "end": "2155119"
  },
  {
    "text": "up a lot of the of the goodnesses of of rdbm mes and move to no SQL that's a",
    "start": "2155119",
    "end": "2160800"
  },
  {
    "text": "bigger journey and so the common use case we see is people go to simple DB which is easy and then move to Cassandra",
    "start": "2160800",
    "end": "2167240"
  },
  {
    "text": "Netflix is an example there we will go to mongod DB and I I just converted a mongod DB customer over the weekend um",
    "start": "2167240",
    "end": "2173599"
  },
  {
    "text": "and then to Cassandra so it's a it's a common um it's easy to get in there and then and then when you really need to",
    "start": "2173599",
    "end": "2179400"
  },
  {
    "text": "scale and you're P pulling all the operational um pieces together by yourself when you're rolling them on",
    "start": "2179400",
    "end": "2184480"
  },
  {
    "text": "that's when you're moving to CER so job Trend two is Cassandra and and job",
    "start": "2184480",
    "end": "2191800"
  },
  {
    "text": "Trend three is Cassandra and hbas so hpas is definitely on the rise and it's also so is cassander so it's good",
    "start": "2191800",
    "end": "2199440"
  },
  {
    "text": "so that's um and actually there's a job Trend four which I do not put but it's",
    "start": "2199440",
    "end": "2205040"
  },
  {
    "text": "the total some total of nol is these three guys and they're playing very well and that's um it's it's um it's a",
    "start": "2205040",
    "end": "2210720"
  },
  {
    "text": "healthy uh requirement for the space and we need that um there is a fourth one that was coming up that's for with the",
    "start": "2210720",
    "end": "2217480"
  },
  {
    "text": "uncle um we want a standard right so we want to standardize all these and then we create a newer newer version of ql um",
    "start": "2217480",
    "end": "2225839"
  },
  {
    "text": "so it's not necessary um not necess",
    "start": "2225839",
    "end": "2231400"
  },
  {
    "text": "work but um there is um different flavors no SQL and you'll hear the rest",
    "start": "2231400",
    "end": "2236839"
  },
  {
    "text": "of them and um there is a healthy um learning that's happening within the system um we learned a lot from HP and",
    "start": "2236839",
    "end": "2244440"
  },
  {
    "text": "HP is picking pieces from and so is um  so all these things are not static",
    "start": "2244440",
    "end": "2251000"
  },
  {
    "text": "um they're changing as we speak if you Google up any of these some of those blogs of 06 are no longer valid for 08",
    "start": "2251000",
    "end": "2257880"
  },
  {
    "text": "version of Cassandra and some of the versions pieces of HP or name node will not be true in the future so things are",
    "start": "2257880",
    "end": "2264839"
  },
  {
    "text": "changing as you speak and these slides are dated and so will be are current but",
    "start": "2264839",
    "end": "2270800"
  },
  {
    "text": "they dated um so um so I see a future where all of these guys will be robust",
    "start": "2270800",
    "end": "2276200"
  },
  {
    "text": "enough to become your database of choice so in summary cassand is high scale",
    "start": "2276200",
    "end": "2281599"
  },
  {
    "start": "2279000",
    "end": "2348000"
  },
  {
    "text": "peer-to-peer distributed database questions question the question is um",
    "start": "2281599",
    "end": "2287400"
  },
  {
    "text": "Apachi C so the are you asking for difference between Apachi Kasandra and",
    "start": "2287400",
    "end": "2293400"
  },
  {
    "text": "Apache couch TB in terms of what how Apachi treats them or yes um I'm not the",
    "start": "2293400",
    "end": "2300160"
  },
  {
    "text": "Apache spokesperson for this but I I've seen really um fairness on their part so",
    "start": "2300160",
    "end": "2305520"
  },
  {
    "text": "far I don't see a reason one should be preferenced or or the other um I mean they're just I mean in",
    "start": "2305520",
    "end": "2313240"
  },
  {
    "text": "apache's ways this mostly peers there's no reason to to be worried about losing",
    "start": "2313240",
    "end": "2319200"
  },
  {
    "text": "or gaining from an Apachi standpoint um historically Apache played Community or",
    "start": "2319200",
    "end": "2325240"
  },
  {
    "text": "code and they stuck to that and so if there's a community on col TV it's going",
    "start": "2325240",
    "end": "2330359"
  },
  {
    "text": "to be there for a long time so I don't think that's um that's probably not the reason to to go either way but um the",
    "start": "2330359",
    "end": "2337319"
  },
  {
    "text": "main reason is what you said it's one is very distributed and peer to peer and another one is gets you up and ready",
    "start": "2337319",
    "end": "2343160"
  },
  {
    "text": "with no SQL and that's good so both play their roles yeah very well yeah so I",
    "start": "2343160",
    "end": "2348599"
  },
  {
    "start": "2348000",
    "end": "2453000"
  },
  {
    "text": "think that's a more of a good panel like question um we be great to have the",
    "start": "2348599",
    "end": "2354720"
  },
  {
    "text": "other speakers finish and we could get back to the same question if that makes sense the question is how do these",
    "start": "2354720",
    "end": "2359839"
  },
  {
    "text": "different players work and I think Cassandra um definitely clearly is designed to to make sure your um data",
    "start": "2359839",
    "end": "2368079"
  },
  {
    "text": "gets durably written and written across lots of nodes so you don't need to worry about um availability and it's",
    "start": "2368079",
    "end": "2375319"
  },
  {
    "text": "partitioned and so it it's clearly focused on making availability and",
    "start": "2375319",
    "end": "2380839"
  },
  {
    "text": "partitioning um the key Focus so if you're if you're a small website you",
    "start": "2380839",
    "end": "2385920"
  },
  {
    "text": "don't have to be a Netflix or a big large company to be using Cassandra if you're a small and we have a lot of small startups actually using it um if",
    "start": "2385920",
    "end": "2392480"
  },
  {
    "text": "you're on ec2 and you don't want to and to yes even today there was a ec2 uh",
    "start": "2392480",
    "end": "2398640"
  },
  {
    "text": "outage so if you're worried about up time um on your ec2 setup you should be",
    "start": "2398640",
    "end": "2404640"
  },
  {
    "text": "thinking about Cassandra so it's a when you can't fit things in one in memory on one box as as um as so if you mean Big",
    "start": "2404640",
    "end": "2413599"
  },
  {
    "text": "Data the definition of big data is if it's not fitting in today's memory uh all in memory and you can fit all the",
    "start": "2413599",
    "end": "2420440"
  },
  {
    "text": "users data it's a billion rows um 6 billion rows can actually fit in memory",
    "start": "2420440",
    "end": "2426640"
  },
  {
    "text": "on one box these days um but once you start mining that data and creating data",
    "start": "2426640",
    "end": "2431680"
  },
  {
    "text": "around it that's when data falls off one node so if you're doing multi- node data",
    "start": "2431680",
    "end": "2437119"
  },
  {
    "text": "stores you and you can't pay the big bang for exit data is in the big systems",
    "start": "2437119",
    "end": "2442880"
  },
  {
    "text": "then your um choice is having to partition it having to run on Multi nodes and that's the context behind all",
    "start": "2442880",
    "end": "2450680"
  },
  {
    "text": "no equal essentially so uh the question is at what point do do I move from onto",
    "start": "2450680",
    "end": "2458240"
  },
  {
    "start": "2453000",
    "end": "2659000"
  },
  {
    "text": "Cassandra right it's a much longer nuanced question apologize for chopping",
    "start": "2458240",
    "end": "2463520"
  },
  {
    "text": "it but um the the question um so is dead simple to to program and it's I",
    "start": "2463520",
    "end": "2471280"
  },
  {
    "text": "mean even I love that it's an interface that you just basically it's very simple speaks like Java you write it and it's",
    "start": "2471280",
    "end": "2476920"
  },
  {
    "text": "there right um the qu the the it's a Json style table so",
    "start": "2476920",
    "end": "2483960"
  },
  {
    "text": "everything is um Json so you understand that as a JavaScript developer you can see that see how your app looks like so",
    "start": "2483960",
    "end": "2489640"
  },
  {
    "text": "it's a very good programming model for end users what happens is when it actually falls to a larger than one node",
    "start": "2489640",
    "end": "2497400"
  },
  {
    "text": "setup when you start putting many nodes on it when your data scales the whole remember the whole reason we were coming",
    "start": "2497400",
    "end": "2503400"
  },
  {
    "text": "to no SQL throwing away all the goodies that Oracle built for us or IBM built for us or I mean all the big databases",
    "start": "2503400",
    "end": "2510319"
  },
  {
    "text": "right they that's a database theory for 10 20 years we threw all of that off as",
    "start": "2510319",
    "end": "2515480"
  },
  {
    "text": "well as the caching vendors because we want scale right so the only reason to come to no SQL or the prime reason to",
    "start": "2515480",
    "end": "2522240"
  },
  {
    "text": "come to no SQL is scale and um when it scales you you'll so the whole",
    "start": "2522240",
    "end": "2529280"
  },
  {
    "text": "replication um the whole read and repair and being able to get a large system to",
    "start": "2529280",
    "end": "2535200"
  },
  {
    "text": "agree on as on a few queries um that whole Nuance of maintaining it that's",
    "start": "2535200",
    "end": "2540839"
  },
  {
    "text": "when people move from using a traditional MySQL or um into into",
    "start": "2540839",
    "end": "2547839"
  },
  {
    "text": "Cassandra so the the use cases we see today are data that suddenly your app",
    "start": "2547839",
    "end": "2553520"
  },
  {
    "text": "becomes more popular than you expect and then you see higher um higher number of users higher number of reads higher",
    "start": "2553520",
    "end": "2559680"
  },
  {
    "text": "number of Rights and so right speeds obviously speak very well for Cassandra",
    "start": "2559680",
    "end": "2565680"
  },
  {
    "text": "and and so that's I mean language is not the reason people are moving to Cassandra the main reason they're moving",
    "start": "2565680",
    "end": "2571520"
  },
  {
    "text": "from um from is really because of scale and being able to to um being able",
    "start": "2571520",
    "end": "2577559"
  },
  {
    "text": "to kill your app at mercilessly I mean I I actually tell my customers if they if they are worried about if restarting",
    "start": "2577559",
    "end": "2585079"
  },
  {
    "text": "their Cassandra I said just kill it it's it's designed to replay everything that's um in memory or not flushed the",
    "start": "2585079",
    "end": "2591960"
  },
  {
    "text": "commit logs every time it comes up it actually replays everything so it's I mean we actually believe that that the",
    "start": "2591960",
    "end": "2598319"
  },
  {
    "text": "apps that that live long enough are are designed so they're fall tolerant that",
    "start": "2598319",
    "end": "2603800"
  },
  {
    "text": "way so so fall tolerance and when you get getting to data sets that are not fitting on small number of nodes and",
    "start": "2603800",
    "end": "2610680"
  },
  {
    "text": "replication um when you do multi data center replication and all these features are coming into those databases",
    "start": "2610680",
    "end": "2616440"
  },
  {
    "text": "so um I will let those um authors speak for them actually those are the features",
    "start": "2616440",
    "end": "2621480"
  },
  {
    "text": "that they are also seeing customers and the markets for Market wants the same thing they want they have the same problems they want multi availability",
    "start": "2621480",
    "end": "2628359"
  },
  {
    "text": "they want they want some some level of consistency they want partitioning right so the the market wants all of them",
    "start": "2628359",
    "end": "2634920"
  },
  {
    "text": "actually and they want want them all to be easy to use so that's what the average designer wants and so all these",
    "start": "2634920",
    "end": "2641800"
  },
  {
    "text": "all these no SQL stores are slowly heading towards that so um so so anyways I I I hope I",
    "start": "2641800",
    "end": "2648000"
  },
  {
    "text": "answered so there are some numbers around it too but really when you try to get Beyond a few nodes you you quickly",
    "start": "2648000",
    "end": "2654160"
  },
  {
    "text": "find yourself um at the mercy of Mongo's um scale so so the question is how does",
    "start": "2654160",
    "end": "2660640"
  },
  {
    "start": "2659000",
    "end": "2760000"
  },
  {
    "text": "Cassandra handle backups um so it's not um something we don't worry about um our",
    "start": "2660640",
    "end": "2666000"
  },
  {
    "text": "customers have um incremental and so there's a global snapshot so you can take a global snapshot and you can take",
    "start": "2666000",
    "end": "2672359"
  },
  {
    "text": "node snapshots and store um these um the the files are actually so you have",
    "start": "2672359",
    "end": "2678359"
  },
  {
    "text": "Commit logs and data logs so the they're usually run on different um luns as well so they get good performance but um so",
    "start": "2678359",
    "end": "2687040"
  },
  {
    "text": "you take snapshots and then you take incremental backups our customers take copies of these files and um put them on",
    "start": "2687040",
    "end": "2693839"
  },
  {
    "text": "S3 for example and then then um take incremental Deltas on them on their",
    "start": "2693839",
    "end": "2699400"
  },
  {
    "text": "local so it's a regular file file system backup the actual app does not have any state so all the state is in the yaml",
    "start": "2699400",
    "end": "2706559"
  },
  {
    "text": "the yaml files or the database and log files it's all file based so and we don't do anything fancy on the file",
    "start": "2706559",
    "end": "2712839"
  },
  {
    "text": "itself it's real raw data so hex uh data so um there's nothing um that stops you",
    "start": "2712839",
    "end": "2719640"
  },
  {
    "text": "from taking that snapshot and creating a new cluster so yeah and uh the option",
    "start": "2719640",
    "end": "2725079"
  },
  {
    "text": "one of the feature for the op Center is to actually press a button do the same thing get a snapshot U essentially",
    "start": "2725079",
    "end": "2730440"
  },
  {
    "text": "there's a set of things that you do before you take that snapshot which is basically flush and and repair and",
    "start": "2730440",
    "end": "2735800"
  },
  {
    "text": "Compact and then take a copy so it's not a um people do that all the time yes",
    "start": "2735800",
    "end": "2742079"
  },
  {
    "text": "thank you for being",
    "start": "2742079",
    "end": "2745599"
  },
  {
    "text": "here",
    "start": "2754880",
    "end": "2757880"
  }
]