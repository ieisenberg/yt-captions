[
  {
    "text": "my name is Chris I'm a software engineering manager for the admin functions team at Microsoft and I want",
    "start": "4120",
    "end": "10240"
  },
  {
    "text": "to talk to you about stateful programming models in server lists so just a quick overview of what I want to",
    "start": "10240",
    "end": "16960"
  },
  {
    "text": "talk about today we're going to talk just a little bit about serverless I assume that folks in the audience kind",
    "start": "16960",
    "end": "22000"
  },
  {
    "text": "of know what serverless is and I want to talk about two kind of programming models that are inherently stateful and",
    "start": "22000",
    "end": "29679"
  },
  {
    "text": "how they can kind of be composed with server lists and those two models or workflows and actors so what motivates",
    "start": "29679",
    "end": "36610"
  },
  {
    "text": "me I've been at Microsoft for about 13 years now full-time and working in a lot",
    "start": "36610",
    "end": "43000"
  },
  {
    "text": "of kind of enterprise Z and cloud related areas so I myself am an engineer",
    "start": "43000",
    "end": "48510"
  },
  {
    "text": "you know I've had to work on a lot of hard complicated problems and one thing that I've learned is that I don't like",
    "start": "48510",
    "end": "54850"
  },
  {
    "text": "complexity and I assume that most of you folks don't either I like as much as I can you know developers tend to be my",
    "start": "54850",
    "end": "62200"
  },
  {
    "text": "customers I want to make hard problems easy I want to make complex things simple so",
    "start": "62200",
    "end": "67420"
  },
  {
    "text": "that you know myself and so that other developers can be more productive and so you'll kind of see that as a theme",
    "start": "67420",
    "end": "73450"
  },
  {
    "text": "throughout this talk so service when I talk about service I'm mostly talking",
    "start": "73450",
    "end": "78789"
  },
  {
    "text": "about functions as a service or fads you know talking about kind of elastically",
    "start": "78789",
    "end": "84340"
  },
  {
    "text": "scalable event-driven programming models and you know generally you kind of",
    "start": "84340",
    "end": "89530"
  },
  {
    "text": "low-cost pay for only what you use now just a quick show of hands are there any folks in the audience who are using",
    "start": "89530",
    "end": "95649"
  },
  {
    "text": "server lists in production today oh nice that's a good percentage of you any of you that who are not yet but are",
    "start": "95649",
    "end": "102399"
  },
  {
    "text": "planning to move there your company is looking into server lists okay nice nice yeah so hopefully this will be",
    "start": "102399",
    "end": "110079"
  },
  {
    "text": "really interesting for all of you folks in the audience so anyways if you've",
    "start": "110079",
    "end": "116469"
  },
  {
    "text": "done some research into server lists or looked into it you may have heard some of these best practices which some of",
    "start": "116469",
    "end": "122859"
  },
  {
    "text": "the thought leaders in the space will often kind of promote you know functions must be stateless functions must not",
    "start": "122859",
    "end": "129009"
  },
  {
    "text": "call other functions functions should do only one thing now I tend to agree with these in principle but I think",
    "start": "129009",
    "end": "136910"
  },
  {
    "text": "I do push back on them a little bit I think that there are actually ways that you can do stateful server lists in a",
    "start": "136910",
    "end": "143150"
  },
  {
    "text": "way that's responsible and still kind of adheres to the the spirit behind these",
    "start": "143150",
    "end": "148280"
  },
  {
    "text": "principles and so we're going to talk a little bit about that throughout my talk so the first kind of stateful",
    "start": "148280",
    "end": "155990"
  },
  {
    "text": "programming model that I want to talk about is workflows so here's an example",
    "start": "155990",
    "end": "161330"
  },
  {
    "text": "of a very common workflow pattern so in in this diagram f1 f2 and f3 those are",
    "start": "161330",
    "end": "167360"
  },
  {
    "text": "functions you could think of those even as micro services I'm using the azure functions logo because it's convenient",
    "start": "167360",
    "end": "173740"
  },
  {
    "text": "so in this particular flow you have some function f1 it produces some outputs that output is stored into a queue",
    "start": "173740",
    "end": "180890"
  },
  {
    "text": "represented by the cylinder shape here and that becomes the input of some other function f2 which then does some",
    "start": "180890",
    "end": "186470"
  },
  {
    "text": "computation and creates an output that gets fed to f3 so you know just kind of a chain of functions this is a very",
    "start": "186470",
    "end": "193610"
  },
  {
    "text": "common pattern that you see maybe in like order processing right you receive an order you need to go and check your",
    "start": "193610",
    "end": "199130"
  },
  {
    "text": "inventory system you need to go and you know remove from your inventory get the things shipped there's a lot of kind of",
    "start": "199130",
    "end": "204680"
  },
  {
    "text": "sequential steps that need to be taken so you know you can implement these with",
    "start": "204680",
    "end": "210680"
  },
  {
    "text": "kind of classical server lists today but there are a bunch of problems that you'll probably run into as you start to",
    "start": "210680",
    "end": "216890"
  },
  {
    "text": "do this one of which is the relationship between your functions or your micro services and these these queues it's",
    "start": "216890",
    "end": "225050"
  },
  {
    "text": "kind of unclear you know if you're actually using like a cloud vendor and you're looking at kind of your list of",
    "start": "225050",
    "end": "230870"
  },
  {
    "text": "all the functions that you have in the list of all the cues that you have a provisioned you know you're not going to",
    "start": "230870",
    "end": "236810"
  },
  {
    "text": "get like a nice diagram like this typically that shows you what that relationship looks like typically you just have a flat list of all your",
    "start": "236810",
    "end": "242990"
  },
  {
    "text": "different resources that you're managing so you know you don't you don't have as much clarity on what is it",
    "start": "242990",
    "end": "249530"
  },
  {
    "text": "that my application is doing and what are those dependencies looking like operation context right so you're",
    "start": "249530",
    "end": "255590"
  },
  {
    "text": "calling these functions in the context of some particular operation and typically you have to flow some that",
    "start": "255590",
    "end": "261769"
  },
  {
    "text": "context through the whole thing oftentimes you may need to rely and get an external database you know which",
    "start": "261770",
    "end": "267620"
  },
  {
    "text": "maybe has a record of you know what is the order that actually processing here and then you know flowing maybe an identifier to that",
    "start": "267620",
    "end": "274430"
  },
  {
    "text": "through these these different functions middle queues you know these are",
    "start": "274430",
    "end": "280370"
  },
  {
    "text": "actually kind of an implementation detail right you're just trying to pass information from one function or one",
    "start": "280370",
    "end": "285560"
  },
  {
    "text": "service to another and you know the fact that there is a queue that you have to",
    "start": "285560",
    "end": "290900"
  },
  {
    "text": "manage that's a bit of conceptual overhead and then if you think about error handling",
    "start": "290900",
    "end": "296000"
  },
  {
    "text": "now obviously queues will give you some degree of error handling right if there's a machine failure or something that message will go back you know stay",
    "start": "296000",
    "end": "302360"
  },
  {
    "text": "on the queue or when you're compute comes back up you know it can pull it off of the queue so you get some sort of",
    "start": "302360",
    "end": "307820"
  },
  {
    "text": "resiliency there but what if you need to do things like compensation right let's suppose that there was some application",
    "start": "307820",
    "end": "314120"
  },
  {
    "text": "level failure within F 3 and you need to do some compensating action to undo what you did in F 2 and F 1 well now suddenly",
    "start": "314120",
    "end": "321710"
  },
  {
    "text": "you have to add a bunch more queues and then you know kind of the lines and boxes get a lot more complicated so",
    "start": "321710",
    "end": "329900"
  },
  {
    "text": "there are some solutions that make some of this easier such as kind of",
    "start": "329900",
    "end": "335300"
  },
  {
    "text": "declarative you know workflow like designers we kind of drag-and-drop you know here's my business flow or perhaps",
    "start": "335300",
    "end": "342860"
  },
  {
    "text": "even you know using some sort of XML or JSON markup to describe you know this is what my user flow is it solves some of",
    "start": "342860",
    "end": "348890"
  },
  {
    "text": "the problems that I mentioned before and you know these are these are commonly used today but from my experience and",
    "start": "348890",
    "end": "357410"
  },
  {
    "text": "what I've heard from talking with many others is that you know you run into problems with scalability with a lot of",
    "start": "357410",
    "end": "363050"
  },
  {
    "text": "these things you know typically business workflows that you're designing you know they're maybe not simple kind of four",
    "start": "363050",
    "end": "369500"
  },
  {
    "text": "step flows you know they tend to have kind of a lot of conditions and you know maybe even some loops and different",
    "start": "369500",
    "end": "375890"
  },
  {
    "text": "things and you know especially if you're using like a visual designer that tends to not scale very well you kind of have",
    "start": "375890",
    "end": "381500"
  },
  {
    "text": "to zoom out and there's just a lot of complexity even in the case of markup you know that that JSON file could get",
    "start": "381500",
    "end": "388430"
  },
  {
    "text": "really nested really deep really quickly and there tends to be a bit of an impedance mismatch so typically the the",
    "start": "388430",
    "end": "396110"
  },
  {
    "text": "functions or the services themselves that you're orchestrating you know those are in code",
    "start": "396110",
    "end": "403290"
  },
  {
    "text": "they're dealing with data of their generating data and then you have to somehow marshal that data through this",
    "start": "403290",
    "end": "408690"
  },
  {
    "text": "workflow system and kind of declare how you're going to pass it you know from one one action to the next and you know",
    "start": "408690",
    "end": "416010"
  },
  {
    "text": "because you're using some declarative language there can be a bit of an impedance mismatch and I would say they",
    "start": "416010",
    "end": "423330"
  },
  {
    "text": "do not exactly developer friendly in a lot of cases you kind of have to learn you know this new language so to speak",
    "start": "423330",
    "end": "430500"
  },
  {
    "text": "and you know developers want to do things like unit tests you know their workflows not just the individual",
    "start": "430500",
    "end": "436920"
  },
  {
    "text": "functions but even the the thing that ties them all together and you can't do that easily with some of these declarative solutions so one of the",
    "start": "436920",
    "end": "444960"
  },
  {
    "text": "projects that I work on is called durable functions which Colin mentioned and you know I want to show you how with",
    "start": "444960",
    "end": "452340"
  },
  {
    "text": "you know what we've come up with you can actually do kind of this function chain using code so this function that we have",
    "start": "452340",
    "end": "458940"
  },
  {
    "text": "here on the screen this is what I call an Orchestrator function and it basically represents that diagram that",
    "start": "458940",
    "end": "464520"
  },
  {
    "text": "you see to the right you know we know that this is an Orchestrator function it",
    "start": "464520",
    "end": "470220"
  },
  {
    "text": "has this context object which is passed in as a parameter which will give you some information about you know kind of",
    "start": "470220",
    "end": "476130"
  },
  {
    "text": "what is the ID of this orchestration and what was the instance that kicked it off things like that and then you know all",
    "start": "476130",
    "end": "482670"
  },
  {
    "text": "the different kind of actions that you run in the middle or what we call activity functions f1 f2 and f3 in this",
    "start": "482670",
    "end": "489030"
  },
  {
    "text": "case and you know here this is in c-sharp obviously and we're we're just using some simple API is to actually",
    "start": "489030",
    "end": "495810"
  },
  {
    "text": "call f1 f2 and f3 get some return values back and then pass them on to the next",
    "start": "495810",
    "end": "501780"
  },
  {
    "text": "step you know which feels very natural to a developer and if you need to do kind of compensating error handling you",
    "start": "501780",
    "end": "508140"
  },
  {
    "text": "can use trycatch and those sorts of things like we have here and it turns out we're able to achieve the exact same",
    "start": "508140",
    "end": "514890"
  },
  {
    "text": "behavior in terms of reliability between f1 f2 and f3 that you get if you kind of",
    "start": "514890",
    "end": "520770"
  },
  {
    "text": "manually implemented this using stateless functions and queues and you know one of the things that I should",
    "start": "520770",
    "end": "526260"
  },
  {
    "text": "mention is you know our use of oh wait here if you're familiar with a single weight you know we have a trick where",
    "start": "526260",
    "end": "531870"
  },
  {
    "text": "whenever you do in a weight statement we're actually able to checkpoint your progress within this function so that if it gets",
    "start": "531870",
    "end": "540309"
  },
  {
    "text": "unloaded from memory if it crashes or something like that let's say you've finished step 2 but haven't gone on to",
    "start": "540309",
    "end": "546220"
  },
  {
    "text": "f3 you know as soon as we bring this code back up onto a healthy VM we're",
    "start": "546220",
    "end": "552489"
  },
  {
    "text": "actually able to start where we left off we don't need to re-execute f1 and f2 we can start directly from f3 just like if",
    "start": "552489",
    "end": "559059"
  },
  {
    "text": "you were using normal queues so this is what I think chaining could look like",
    "start": "559059",
    "end": "564329"
  },
  {
    "text": "using code and this is in fact kind of something that we do so just a quick",
    "start": "564329",
    "end": "569709"
  },
  {
    "text": "quiz I mean you know maybe it looks a little bit magical and we're gonna kind of talk about how this all works but it",
    "start": "569709",
    "end": "575439"
  },
  {
    "text": "does you know I thought maybe I'd ask you guys if you have any thoughts you know on how maybe we do this anyone",
    "start": "575439",
    "end": "580749"
  },
  {
    "text": "think that maybe we're using memory snapshots right because we're preserving these local variables you know and how",
    "start": "580749",
    "end": "586299"
  },
  {
    "text": "is it we're able to kind of get those values back any guesses on memory snapshotting how about compiler hooks",
    "start": "586299",
    "end": "593730"
  },
  {
    "text": "you know I mentioned what we're doing with the kind of async/await stuff they're event sourcing okay a few more",
    "start": "593730",
    "end": "602679"
  },
  {
    "text": "hands a little bit of all the above and",
    "start": "602679",
    "end": "607839"
  },
  {
    "text": "how about none of the above cool so the actually the the answer is C event",
    "start": "607839",
    "end": "615249"
  },
  {
    "text": "sourcing so we're actually not doing any kind of special memory snapshotting or compiler hooks we're just using event",
    "start": "615249",
    "end": "621759"
  },
  {
    "text": "sourcing to kind of create a statefulness in these Orchestrator functions that also gives us a degree of",
    "start": "621759",
    "end": "628449"
  },
  {
    "text": "reliability so we're gonna talk about kind of how that works behind the scenes and so I'll warn you this slide is a",
    "start": "628449",
    "end": "635740"
  },
  {
    "text": "little busy with a bunch of animations I'd probably spent way more time on this than I should have but I wanted to kind of explain to you how we're using event",
    "start": "635740",
    "end": "642939"
  },
  {
    "text": "sourcing behind the scenes to actually implement those top three lines of code and make it durable and reliable so in",
    "start": "642939",
    "end": "652629"
  },
  {
    "text": "the beginning you know assume we have some trigger function which actually starts up this this workflow and it's",
    "start": "652629",
    "end": "659169"
  },
  {
    "text": "putting a message into a queue behind the scenes now this cue is managed by us",
    "start": "659169",
    "end": "664299"
  },
  {
    "text": "this is not something that when you write this type of code that you have to manage you know we have a framework that",
    "start": "664299",
    "end": "669850"
  },
  {
    "text": "actually kind of puts that into the into a queue for you that we provision and manage and",
    "start": "669850",
    "end": "675040"
  },
  {
    "text": "then on the right hand side here we have an event history which is basically our event sourcing kind of the log that we",
    "start": "675040",
    "end": "681189"
  },
  {
    "text": "keep of what happened so we trigger this we write executions started at that",
    "start": "681189",
    "end": "686470"
  },
  {
    "text": "point this Orchestrator function sees that oh I have a message to start executing it's going to go ahead and",
    "start": "686470",
    "end": "691749"
  },
  {
    "text": "read that and then you know I'm highlighting the line of code that we're currently at kind of like if you're doing interactive debugging and the",
    "start": "691749",
    "end": "698439"
  },
  {
    "text": "first line says okay I need to call this activity function called F 1 and so",
    "start": "698439",
    "end": "703720"
  },
  {
    "text": "behind the scenes what it's actually gonna happen is this function is going to drop a message into another queue and",
    "start": "703720",
    "end": "709600"
  },
  {
    "text": "we're going to write another event history saying okay we scheduled F 1 great at this point we can actually",
    "start": "709600",
    "end": "716439"
  },
  {
    "text": "unload that function from memory either because we want to preserve memory because this is going to be a",
    "start": "716439",
    "end": "722290"
  },
  {
    "text": "long-running operation this F 1 you know or it could even be like a machine crash",
    "start": "722290",
    "end": "727899"
  },
  {
    "text": "for whatever reason you know we're able to unload this and the activity function",
    "start": "727899",
    "end": "733569"
  },
  {
    "text": "then can pick up that message and it could say oh okay I need to execute that and on the bottom here I'm saying F 1",
    "start": "733569",
    "end": "739509"
  },
  {
    "text": "just returns a number say 42 for the sake of simple illustration so it",
    "start": "739509",
    "end": "744730"
  },
  {
    "text": "executes that it gets a return value puts that return value back into another control queue which is going to trigger",
    "start": "744730",
    "end": "750910"
  },
  {
    "text": "our Orchestrator function on the top again and you'll notice that we wrote in the event history that the task completed F 1 returned a value of 42 so",
    "start": "750910",
    "end": "760029"
  },
  {
    "text": "now the orchestrator picks that up and because we unloaded it from memory it has to start its execution from the very beginning and so once again we're at",
    "start": "760029",
    "end": "766899"
  },
  {
    "text": "that first line and saying you know I want to call activity async f1 but this",
    "start": "766899",
    "end": "772509"
  },
  {
    "text": "time we're able to you we have that context and we're able to look at our event history through that context and",
    "start": "772509",
    "end": "778809"
  },
  {
    "text": "see that oh look we already ran f1 it returned a value of 42 so instead of running that again I'm just going to",
    "start": "778809",
    "end": "784720"
  },
  {
    "text": "take that value that I got back and then just return it immediately so that the the variable X now contains that value",
    "start": "784720",
    "end": "792249"
  },
  {
    "text": "and we're able to move on to the next step now we're calling f2 we have not",
    "start": "792249",
    "end": "797379"
  },
  {
    "text": "called f2 yet so we go through the same process we write a message into a queue where we write down that we've scheduled",
    "start": "797379",
    "end": "803589"
  },
  {
    "text": "this and then you know we actually execute it that's gonna take n plus one in this case which is now we're up to 43 send",
    "start": "803589",
    "end": "811420"
  },
  {
    "text": "that response back again updating our history and then the orchestrator once again starting from the very beginning",
    "start": "811420",
    "end": "817690"
  },
  {
    "text": "is able to kind of walk through the history and say okay I did f1 I got 40",
    "start": "817690",
    "end": "822970"
  },
  {
    "text": "to move on to the next line okay I called f2 now my response is 43 I can save that into Y and then once again",
    "start": "822970",
    "end": "830710"
  },
  {
    "text": "next step haven't called f3 yet let's go ahead and go through that process again of scheduling that final f3 message it's",
    "start": "830710",
    "end": "838780"
  },
  {
    "text": "going to execute we're adding two more we're sending the response back and then",
    "start": "838780",
    "end": "844150"
  },
  {
    "text": "the orchestrator can pick that up again finally walk through the history one final time we can see that you know",
    "start": "844150",
    "end": "851320"
  },
  {
    "text": "we've already called all of these functions before and we have values for them and now at this point you know",
    "start": "851320",
    "end": "856660"
  },
  {
    "text": "we're completed and we have some final return value of 45 so you know as you",
    "start": "856660",
    "end": "862840"
  },
  {
    "text": "can see now we've we've kind of created a a statefulness here which is implicit we're able to rebuild local variable",
    "start": "862840",
    "end": "869260"
  },
  {
    "text": "states and you know kind of walk our way all the way through this orchestration and have a lot of the reliability",
    "start": "869260",
    "end": "875290"
  },
  {
    "text": "guarantees that you would expect and if you're running this in a server list compute environment like as your",
    "start": "875290",
    "end": "881710"
  },
  {
    "text": "functions or in a service like lambda where you're charged based on how long your functions are executing this is",
    "start": "881710",
    "end": "887530"
  },
  {
    "text": "actually really nice because of how aggressively we can actually unload these Orchestrator functions so that",
    "start": "887530",
    "end": "892780"
  },
  {
    "text": "you're not being double billed right or the orchestrator function is not sitting in memory waiting for the activity",
    "start": "892780",
    "end": "898900"
  },
  {
    "text": "function to complete itself so you know which is one of the reasons why there is this principle of function shouldn't",
    "start": "898900",
    "end": "905200"
  },
  {
    "text": "call other functions double billing is kind of one of them so anyways now",
    "start": "905200",
    "end": "910960"
  },
  {
    "text": "because we're using event sourcing and we're not doing anything with kind of snapshotting memory or doing compiler",
    "start": "910960",
    "end": "916720"
  },
  {
    "text": "tricks we can actually do this in multiple languages pretty easily so here's the exact same Orchestrator",
    "start": "916720",
    "end": "922600"
  },
  {
    "text": "function which kind of does that function chain written in JavaScript in the case of JavaScript we're actually",
    "start": "922600",
    "end": "928840"
  },
  {
    "text": "using generators instead of async await and the reason we use generators is because it's we have a little bit more",
    "start": "928840",
    "end": "934720"
  },
  {
    "text": "control compared to the way that promises in JavaScript but it's the same basic",
    "start": "934720",
    "end": "940370"
  },
  {
    "text": "idea you know just replace a weights with yield and we can do the same sort of things again just using event sourcing",
    "start": "940370",
    "end": "947210"
  },
  {
    "text": "to kind of power all of this so in order for this to work right so we're",
    "start": "947210",
    "end": "953750"
  },
  {
    "text": "replaying your function code multiple times to kind of rebuild that state and continue to make process progress your",
    "start": "953750",
    "end": "962600"
  },
  {
    "text": "Orchestrator code must be deterministic and in order to make it deterministic we have a few simple rules that need to be",
    "start": "962600",
    "end": "968900"
  },
  {
    "text": "followed when you're authoring this code one of which is you can't have any",
    "start": "968900",
    "end": "974330"
  },
  {
    "text": "random numbers or any random date where if you you know call some API have",
    "start": "974330",
    "end": "979670"
  },
  {
    "text": "multiple times it's gonna return different values so that's things like you know if you're creating new goods or you you IDs or getting the current date",
    "start": "979670",
    "end": "987110"
  },
  {
    "text": "time we're just you know generating random numbers you know you can't do that because that's going to mess up kind of that that replay logic you also",
    "start": "987110",
    "end": "995750"
  },
  {
    "text": "can't do i/o or custom thread scheduling directly in these Orchestrator functions because those similarly are",
    "start": "995750",
    "end": "1002080"
  },
  {
    "text": "non-deterministic right that filed that you're reading the first time might not exist the next time that you try to read",
    "start": "1002080",
    "end": "1008260"
  },
  {
    "text": "it and that would mess up the replay and don't write infinite loops you saw that",
    "start": "1008260",
    "end": "1014770"
  },
  {
    "text": "we were kind of creating this history of all the the steps that we took well if you write an infinite loop then that",
    "start": "1014770",
    "end": "1019960"
  },
  {
    "text": "history is going to grow unbounded and something is going to fall over now luckily we have simple workarounds for",
    "start": "1019960",
    "end": "1027430"
  },
  {
    "text": "all three of the above rules so rule number four is you know please use those workarounds so for example if you need",
    "start": "1027430",
    "end": "1032589"
  },
  {
    "text": "the current date time we have the deterministic API that can be used for that similarly if you need a random you",
    "start": "1032589",
    "end": "1040209"
  },
  {
    "text": "know globally unique identifier there's an API for that if you need to do i oh you can do it inside those activity",
    "start": "1040209",
    "end": "1046150"
  },
  {
    "text": "functions which i had described previously those can do whatever they",
    "start": "1046150",
    "end": "1051220"
  },
  {
    "text": "want and because we you know will cache the results of those inside that",
    "start": "1051220",
    "end": "1056260"
  },
  {
    "text": "execution history we don't actually have to call those again as part of the replay we just need to remember what the",
    "start": "1056260",
    "end": "1062560"
  },
  {
    "text": "result of it was the first time that we called it and you know and it's it's",
    "start": "1062560",
    "end": "1068620"
  },
  {
    "text": "relatively straightforward to actually do static analysis of code to make sure that people are following these rules",
    "start": "1068620",
    "end": "1074530"
  },
  {
    "text": "and there's a few runtime checks as well for my experience this hasn't been a major issue for people who have tried to",
    "start": "1074530",
    "end": "1081010"
  },
  {
    "text": "adopt this mechanism you know writing deterministic code the rules are fairly",
    "start": "1081010",
    "end": "1086290"
  },
  {
    "text": "simple and easy to follow and you know you'll find that you can be quite successful using techniques like this so",
    "start": "1086290",
    "end": "1095500"
  },
  {
    "text": "the the previous example that I showed was was pretty basic right just a simple function chain and you could do that",
    "start": "1095500",
    "end": "1102160"
  },
  {
    "text": "pretty easily in a lot of different ways where things get really interesting is when you want to do things like what I",
    "start": "1102160",
    "end": "1108370"
  },
  {
    "text": "call fan-out and fan ins the idea here is that you know let's say you have some function f1 which you know goes and",
    "start": "1108370",
    "end": "1115300"
  },
  {
    "text": "fetches a set of work items that need to be executed in parallel and you know that's represented by multiple instances",
    "start": "1115300",
    "end": "1121900"
  },
  {
    "text": "of f2 excuse me and then so potentially you know and here we have three you",
    "start": "1121900",
    "end": "1128260"
  },
  {
    "text": "could potentially have a thousand executions of f2 that have to run concurrently and then maybe once they're",
    "start": "1128260",
    "end": "1133960"
  },
  {
    "text": "all done you have to do some aggregation and call f3 to do some final processing",
    "start": "1133960",
    "end": "1139210"
  },
  {
    "text": "of all of the work that you just did so there are there are problems when you",
    "start": "1139210",
    "end": "1144460"
  },
  {
    "text": "try to implement this using traditional means as well the first is that you know fanning out that's easy right any kind",
    "start": "1144460",
    "end": "1151510"
  },
  {
    "text": "of server let's compute can do that where you just drop a bunch of messages into a queue you have some function that",
    "start": "1151510",
    "end": "1156760"
  },
  {
    "text": "triggers off of those messages and you know you get parallelization and that just works great the problem that you",
    "start": "1156760",
    "end": "1163090"
  },
  {
    "text": "run into is well how do you do the fan-in right like all of those are",
    "start": "1163090",
    "end": "1169150"
  },
  {
    "text": "running kind of in parallel you don't know exactly when they're going to complete and some there needs to be some",
    "start": "1169150",
    "end": "1175000"
  },
  {
    "text": "sort of coordination that happens so that you know as soon as the last one is finished to immediately move on to f3",
    "start": "1175000",
    "end": "1182170"
  },
  {
    "text": "and typically that requires you to have some sort of stateful agent that's running in the background and monitoring",
    "start": "1182170",
    "end": "1187510"
  },
  {
    "text": "all the work that's done here which again you can do that but it's a lot of work and you know obviously you have the",
    "start": "1187510",
    "end": "1195130"
  },
  {
    "text": "same problems that I described in function chaining now we've just made it even more complicated because we've introduced a lot of parallel",
    "start": "1195130",
    "end": "1201180"
  },
  {
    "text": "paralyzation into the flow as well well it turns out that if you're using",
    "start": "1201180",
    "end": "1206980"
  },
  {
    "text": "event sourcing and kind of creating a programming model on top of that it's actually relatively trivial to solve so",
    "start": "1206980",
    "end": "1214360"
  },
  {
    "text": "in this case you know I have a c-sharp function it calls f1 like I discussed and it returns an array of items which",
    "start": "1214360",
    "end": "1220930"
  },
  {
    "text": "could be any arbitrary size then we're going to do the fan-out part which is",
    "start": "1220930",
    "end": "1226090"
  },
  {
    "text": "I'm looping through all of those I'm calling some f2 function I'm not awaiting them because I want to run",
    "start": "1226090",
    "end": "1232600"
  },
  {
    "text": "these in parallel so I'm just kind of scheduling them and if you've ever used promises or the task parallel library",
    "start": "1232600",
    "end": "1237670"
  },
  {
    "text": "and dotnet then this will look very natural to you you know we're not kind of doing anything you've special here in",
    "start": "1237670",
    "end": "1244990"
  },
  {
    "text": "terms of the programming model so anyways so we schedule all of these and we keep track of all these tasks that",
    "start": "1244990",
    "end": "1252010"
  },
  {
    "text": "we've created these background tasks and put them into a list and then the fan-in is simply we're just doing tasks don't",
    "start": "1252010",
    "end": "1257650"
  },
  {
    "text": "win all so you know please await at this point until all of the you know parallel",
    "start": "1257650",
    "end": "1264130"
  },
  {
    "text": "tasks have completed and once that is completed we can immediately go to the next step where you know we do some sort",
    "start": "1264130",
    "end": "1269890"
  },
  {
    "text": "of an aggregation on the results and because in that diagram that I showed",
    "start": "1269890",
    "end": "1276190"
  },
  {
    "text": "previously you know the orchestrator function is getting signaled whenever something is finished and so we know",
    "start": "1276190",
    "end": "1282970"
  },
  {
    "text": "immediately when all of those parallel tasks are finished and we can move on to the next step without needing to",
    "start": "1282970",
    "end": "1288730"
  },
  {
    "text": "implement any other kind of monitoring system to keep track of that so the problem becomes a trivial trivially",
    "start": "1288730",
    "end": "1295510"
  },
  {
    "text": "simple even in a distributed environments where you just need to write a function so just to provide a",
    "start": "1295510",
    "end": "1304600"
  },
  {
    "text": "little bit of context on how some people are using this Fujifilm I had a chance to go to Japan and and work with them a",
    "start": "1304600",
    "end": "1310960"
  },
  {
    "text": "little bit on this new system that they were creating for basically Japan's version of the you know their",
    "start": "1310960",
    "end": "1318190"
  },
  {
    "text": "professional baseball league and PB and they basically have a system where you",
    "start": "1318190",
    "end": "1323920"
  },
  {
    "text": "know there are a bunch of photographers who go to these games and take pictures of the different players and you know",
    "start": "1323920",
    "end": "1329680"
  },
  {
    "text": "what's going on and they submit them to this image work system and you know there's basically a workflow that needs",
    "start": "1329680",
    "end": "1336190"
  },
  {
    "text": "to run for every one of those you know for the different batches of those pictures where they need to do processing they need to do kind of",
    "start": "1336190",
    "end": "1342960"
  },
  {
    "text": "classification analysis they need to you know look at the image to see okay who",
    "start": "1342960",
    "end": "1348400"
  },
  {
    "text": "is being depicted here so on and so forth so there's a bunch of kind of work that they need to do to kind of",
    "start": "1348400",
    "end": "1355420"
  },
  {
    "text": "implement this flow of processing pictures and you know one of the",
    "start": "1355420",
    "end": "1360700"
  },
  {
    "text": "interesting outcomes of this was you know they had an older system that where",
    "start": "1360700",
    "end": "1366520"
  },
  {
    "text": "they could do maybe three thousand photos I think in about four hours is what it was they actually",
    "start": "1366520",
    "end": "1372670"
  },
  {
    "text": "reimplemented it on top of kind of is on durable functions you know kind of using the stateful event source based",
    "start": "1372670",
    "end": "1379120"
  },
  {
    "text": "programming model they were actually able to get this entire workflow down to about thirty minutes which is a pretty",
    "start": "1379120",
    "end": "1385600"
  },
  {
    "text": "big boost now and I don't credit you know a sure necessarily for enabling",
    "start": "1385600",
    "end": "1391570"
  },
  {
    "text": "that but really I think it had a lot to do with the productivity gains that you get when you're able to kind of",
    "start": "1391570",
    "end": "1398020"
  },
  {
    "text": "introduce someone to kind of simple coding constructs that people can understand that take care of a lot of",
    "start": "1398020",
    "end": "1404380"
  },
  {
    "text": "the complexities that your engineering team otherwise has to deal with so I just want to kind of call that out as",
    "start": "1404380",
    "end": "1410500"
  },
  {
    "text": "you know a success story that we're kind of seeing using models like this so one",
    "start": "1410500",
    "end": "1418510"
  },
  {
    "text": "other kind of workflow pattern I wanted to highlight I moved to number five there are actually a few more but we",
    "start": "1418510",
    "end": "1423700"
  },
  {
    "text": "don't have time for all of them is a human interaction the basic idea is you know let's say you have some sort of an",
    "start": "1423700",
    "end": "1429520"
  },
  {
    "text": "order processing system internally with your company I need to make a purchase order let's say if it's over a thousand",
    "start": "1429520",
    "end": "1436630"
  },
  {
    "text": "dollars it needs some sort of manager approval and so that manager has to go and click a button and say yes I approve",
    "start": "1436630",
    "end": "1441790"
  },
  {
    "text": "this or no I do not approve this well it turns out that humans are not as reliable as cloud systems sometimes they",
    "start": "1441790",
    "end": "1449200"
  },
  {
    "text": "go on vacation sometimes they get distracted and so you need to implement controls for that within your workflow",
    "start": "1449200",
    "end": "1455830"
  },
  {
    "text": "so for example a timeout let's say if a manager does not approve this purchase order within three days you know we have",
    "start": "1455830",
    "end": "1463120"
  },
  {
    "text": "to go down some escalation path maybe we need to go and send an email to the managers manager or something like that",
    "start": "1463120",
    "end": "1468450"
  },
  {
    "text": "so this is a common we're a pattern as well similar to I think",
    "start": "1468450",
    "end": "1474130"
  },
  {
    "text": "multi-factor authentication is another example this type of workflow where you know somebody wants to log into a system",
    "start": "1474130",
    "end": "1480880"
  },
  {
    "text": "and you need to send them a code and then they need to enter in that code to prove that they are who they say they",
    "start": "1480880",
    "end": "1487450"
  },
  {
    "text": "are and there's a timeout associated with that so again the problems with implementing this you know there's kind",
    "start": "1487450",
    "end": "1493270"
  },
  {
    "text": "of race conditions between timeouts and you know the actual approval that you need to be able to handle there's a",
    "start": "1493270",
    "end": "1499420"
  },
  {
    "text": "you know how do you do the cancellation of the timeout if you know you did get the approval but",
    "start": "1499420",
    "end": "1504850"
  },
  {
    "text": "then you know the the time or some sort of background timer expired in the mean time again same problems that you have",
    "start": "1504850",
    "end": "1511720"
  },
  {
    "text": "as before so we have a code version of solving that as well let's see this",
    "start": "1511720",
    "end": "1517060"
  },
  {
    "text": "one's a little bit longer but it's still conceptually quite simple you know where there's an API where you can basically",
    "start": "1517060",
    "end": "1522850"
  },
  {
    "text": "create a timer where this orchestration can send a message to itself you know at",
    "start": "1522850",
    "end": "1528490"
  },
  {
    "text": "some specified time and this in this example we're saying you know in 72 hours representing three days there's also an",
    "start": "1528490",
    "end": "1536050"
  },
  {
    "text": "api rican kind of wait for some external event right so these are very much very",
    "start": "1536050",
    "end": "1541150"
  },
  {
    "text": "stateful types of things where you know we're giving the illusion that we're actually suspending the execution of",
    "start": "1541150",
    "end": "1547900"
  },
  {
    "text": "this workflow waiting for somebody to click a button which is going to send a message to this function and cause it to",
    "start": "1547900",
    "end": "1554710"
  },
  {
    "text": "resume where it left off but in both of these cases we're not actually awaiting the task yet we're going to this next line and we're",
    "start": "1554710",
    "end": "1561520"
  },
  {
    "text": "saying tasks about when any or you know very similar to I believe that's promised at any if you're using Java or",
    "start": "1561520",
    "end": "1567100"
  },
  {
    "text": "similar languages you know where we're actually checking to see which one of these came first the approval event or",
    "start": "1567100",
    "end": "1573100"
  },
  {
    "text": "the timeout event and then depending on which one you got first you can either go into the process approval branch or",
    "start": "1573100",
    "end": "1579520"
  },
  {
    "text": "you can go into the escalate branch so again it's a very simple way to kind of",
    "start": "1579520",
    "end": "1584740"
  },
  {
    "text": "implement this and still get all the durability guarantees that you get with queues again so if something completely",
    "start": "1584740",
    "end": "1591730"
  },
  {
    "text": "fails while you're waiting for these things to happen you know your VM can be restarted and you know you'll still kind",
    "start": "1591730",
    "end": "1598930"
  },
  {
    "text": "of resume where you left off effectively",
    "start": "1598930",
    "end": "1603900"
  },
  {
    "text": "so there was so this is what we started with and durable functions and you know",
    "start": "1604780",
    "end": "1610360"
  },
  {
    "text": "durable functions I think we we G a the original version about a year and a half ago I would say and it worked great for",
    "start": "1610360",
    "end": "1617680"
  },
  {
    "text": "a lot of the scenarios that we described but there were a few scenarios that you",
    "start": "1617680",
    "end": "1622780"
  },
  {
    "text": "know we saw customers trying to implement kind of these state stateful serverless patterns you know which were",
    "start": "1622780",
    "end": "1629170"
  },
  {
    "text": "kind of awkward to do with these workflow paradigms one of them is you",
    "start": "1629170",
    "end": "1634480"
  },
  {
    "text": "know what I call the aggregator pattern where the idea is that you know I have something which is maybe maybe needs to",
    "start": "1634480",
    "end": "1641020"
  },
  {
    "text": "do some sort of counting so for example you know one customer that we had",
    "start": "1641020",
    "end": "1647130"
  },
  {
    "text": "basically needed to start a workflow but only after it received notice you know",
    "start": "1647130",
    "end": "1652150"
  },
  {
    "text": "ten notifications from some external system and we didn't have a good way of modeling that and you know so we were",
    "start": "1652150",
    "end": "1660220"
  },
  {
    "text": "thinking about you know how could we do that now obviously if you wanted to do this yourself you have to think about",
    "start": "1660220",
    "end": "1665440"
  },
  {
    "text": "okay if I need to process ten documents wait for those to arrive and then you know move on and execute some workflow",
    "start": "1665440",
    "end": "1671440"
  },
  {
    "text": "kind of you know how do I where do I store the state for that you know how do I kind of correlate these events like",
    "start": "1671440",
    "end": "1677560"
  },
  {
    "text": "maybe you're receiving you know notifications from a variety of different systems and they have some",
    "start": "1677560",
    "end": "1682750"
  },
  {
    "text": "information that kind of correlates some a subset of them together you know how do you how do you manage all that how do",
    "start": "1682750",
    "end": "1689260"
  },
  {
    "text": "you kind of synchronize you know access to state in general and so what we",
    "start": "1689260",
    "end": "1694390"
  },
  {
    "text": "decided was that you know we need another primitive and that primitive in our case you know was actors and you",
    "start": "1694390",
    "end": "1702670"
  },
  {
    "text": "know what we ended up doing is we ended up partnering with Microsoft Research on this because you know we didn't have a",
    "start": "1702670",
    "end": "1708010"
  },
  {
    "text": "lot of experience of actors ourselves the Microsoft research if you're familiar with the Orleans framework you",
    "start": "1708010",
    "end": "1715300"
  },
  {
    "text": "know some of the researchers that we worked with were contributors to Microsoft or liens which is an actor system and so we we came together and",
    "start": "1715300",
    "end": "1723790"
  },
  {
    "text": "said you know hey how can we kind of expand what we've been doing with durable functions to kind of accomplish some of these other staple patterns and",
    "start": "1723790",
    "end": "1730630"
  },
  {
    "text": "still make them work in a service environment so actors are really",
    "start": "1730630",
    "end": "1735880"
  },
  {
    "text": "interesting so if you ask people about actors some",
    "start": "1735880",
    "end": "1741399"
  },
  {
    "text": "people love them some people hate them most people don't know anything about them at least this is kind of my",
    "start": "1741399",
    "end": "1746710"
  },
  {
    "text": "experience and of the people that do know them they have a wide variety of opinions about them so my colleague",
    "start": "1746710",
    "end": "1754179"
  },
  {
    "text": "David Fowler he is an architect over for.net within Microsoft and he has a",
    "start": "1754179",
    "end": "1759940"
  },
  {
    "text": "lot of followers on Twitter and he was just curious kind of on his own he just asked a simple question why aren't",
    "start": "1759940",
    "end": "1765580"
  },
  {
    "text": "doctor frameworks more popular and you know we're learning that you know you",
    "start": "1765580",
    "end": "1770889"
  },
  {
    "text": "know using David it's a great way to do market research because he has a lot of followers and we got a lot of responses",
    "start": "1770889",
    "end": "1777279"
  },
  {
    "text": "to this question so you know we got thing information back like you know man",
    "start": "1777279",
    "end": "1783369"
  },
  {
    "text": "you know these are so hard to debug you know why did my state change you know or why did something happen or not happen a",
    "start": "1783369",
    "end": "1790149"
  },
  {
    "text": "lot of different opinions like that you know this this reply from Roger you know",
    "start": "1790149",
    "end": "1795249"
  },
  {
    "text": "cloud native tools one you know there's kind of other ways to accomplish all of these stateful problems you know and you",
    "start": "1795249",
    "end": "1801970"
  },
  {
    "text": "know this the second thing that he mentioned here the zero exit strategy out of actor frameworks which I thought",
    "start": "1801970",
    "end": "1807820"
  },
  {
    "text": "was really interesting especially coming from him because he's actually the the author of Aqua Net as I understand as",
    "start": "1807820",
    "end": "1815289"
  },
  {
    "text": "well as another actor framework so so I guess you would know and you know",
    "start": "1815289",
    "end": "1823119"
  },
  {
    "text": "another common response is that you know people just want to use crud you know they don't want to kind of use these",
    "start": "1823119",
    "end": "1829119"
  },
  {
    "text": "these actor you know programming models they're just pot you know I create a web",
    "start": "1829119",
    "end": "1834220"
  },
  {
    "text": "app it talks to a database you know we'll deal with concurrency and all those things kind of at the database",
    "start": "1834220",
    "end": "1840309"
  },
  {
    "text": "level and then kind of one of my favorite responses was by Jason which I",
    "start": "1840309",
    "end": "1846399"
  },
  {
    "text": "actually found out that Jason I think is here at the conference somewhere thank you I hope you don't mind me posting",
    "start": "1846399",
    "end": "1852549"
  },
  {
    "text": "this but he says hey you know we don't have a way to like right-click and publish this right we need like a",
    "start": "1852549",
    "end": "1858580"
  },
  {
    "text": "managed version of this you know which to me it's like yeah that's that's what",
    "start": "1858580",
    "end": "1863710"
  },
  {
    "text": "server list is all about you know I love that that's that's exactly what we would want to do because you know with a lot",
    "start": "1863710",
    "end": "1870220"
  },
  {
    "text": "of actor frameworks today you know you have to kind of deploy a cluster and manage that cluster and manage the",
    "start": "1870220",
    "end": "1876159"
  },
  {
    "text": "health of that thing and it just it's it's a lot of upfront investment that you would have to do it'd be really nice",
    "start": "1876159",
    "end": "1882130"
  },
  {
    "text": "if you could have kind of a survivalist version of that and then you know some nice person happen to know about the",
    "start": "1882130",
    "end": "1888400"
  },
  {
    "text": "work that we were doing on durable functions and we we actually created something called durable entities which",
    "start": "1888400",
    "end": "1895240"
  },
  {
    "text": "is effectively an implementation of the actor model in the context of durable",
    "start": "1895240",
    "end": "1901360"
  },
  {
    "text": "functions so again just kind of revisiting where we came from with",
    "start": "1901360",
    "end": "1907480"
  },
  {
    "text": "durable functions we started out with a few different function types there's kind of regular stateless functions you",
    "start": "1907480",
    "end": "1912820"
  },
  {
    "text": "have your Orchestrator functions which are kind of stateful and you know those those compose a bunch of activity",
    "start": "1912820",
    "end": "1919030"
  },
  {
    "text": "functions which are the different steps within your workflows and then you know what we decided we want to do is you",
    "start": "1919030",
    "end": "1924820"
  },
  {
    "text": "know we don't want to invent you know yet another actor framework we wanted to actually take the capabilities of actors",
    "start": "1924820",
    "end": "1931690"
  },
  {
    "text": "and these these staple patterns and just kind of fold them into the family here not kind of make them into their own",
    "start": "1931690",
    "end": "1937860"
  },
  {
    "text": "separate silo and so we actually have a",
    "start": "1937860",
    "end": "1943000"
  },
  {
    "text": "couple of different syntaxes that we came up for doing this and again this is this is all on top of the azure",
    "start": "1943000",
    "end": "1948580"
  },
  {
    "text": "functions programming model so if you've ever used as your functions or even even",
    "start": "1948580",
    "end": "1954220"
  },
  {
    "text": "lambda my understanding is it's pretty similar the way that you just can declare a function but yeah you just",
    "start": "1954220",
    "end": "1960880"
  },
  {
    "text": "write a function this function gets invoked whenever a message gets sent to your actor or your entity as we call it",
    "start": "1960880",
    "end": "1967059"
  },
  {
    "text": "and it has an operation name you can write a switch statement and say you know yeah this is add I want to get the",
    "start": "1967059",
    "end": "1973600"
  },
  {
    "text": "inputs and then you know update my state with the current value plus some amount or you know again reset set the current",
    "start": "1973600",
    "end": "1980770"
  },
  {
    "text": "state to zero or you know maybe I want to return a value back to somebody else if they if they do a get so this is kind",
    "start": "1980770",
    "end": "1988570"
  },
  {
    "text": "of the function syntax that we've done we tried this in our initial alpha and",
    "start": "1988570",
    "end": "1994510"
  },
  {
    "text": "we got a lot of feedback that you know hey this is really cool this is great because I can do this in a service environment that's wonderful but it",
    "start": "1994510",
    "end": "2001380"
  },
  {
    "text": "becomes a little bit weird if I have a lot of different operations that I want to be",
    "start": "2001380",
    "end": "2006480"
  },
  {
    "text": "able to implement you know it'd be great if we had kind of a simpler way of you know not having these giant switch",
    "start": "2006480",
    "end": "2011730"
  },
  {
    "text": "statements so another thing that we did for c-sharp and kind of a subsequent beta release was we made it so that you",
    "start": "2011730",
    "end": "2019230"
  },
  {
    "text": "could have kind of this this class-based syntax now again this is still running on top of the azure functions",
    "start": "2019230",
    "end": "2024240"
  },
  {
    "text": "programming models so we have kind of this boilerplate code that runs on the bottom here but the idea is that you",
    "start": "2024240",
    "end": "2030270"
  },
  {
    "text": "just write a method that corresponds to you know those different operations so add reset and get in this very simple",
    "start": "2030270",
    "end": "2037050"
  },
  {
    "text": "example here and you just have some field that lives on your class and you can decorate it with some serialization",
    "start": "2037050",
    "end": "2043350"
  },
  {
    "text": "attributes that says you know this is my state that I care about and your code just needs to update that state you know",
    "start": "2043350",
    "end": "2049830"
  },
  {
    "text": "we take care of the the serialization behind the scenes for you and this this",
    "start": "2049830",
    "end": "2055530"
  },
  {
    "text": "follows all the rules that you would expect of actors around like you know only processing one message at a time so",
    "start": "2055530",
    "end": "2060540"
  },
  {
    "text": "you don't have to worry about concurrency issues so on and so forth",
    "start": "2060540",
    "end": "2065720"
  },
  {
    "text": "and so again just to kind of give you a diagram of what this looks like you know",
    "start": "2065720",
    "end": "2071010"
  },
  {
    "text": "even these these entities you know these actors they're really represented just as a function and that's what makes it",
    "start": "2071010",
    "end": "2077820"
  },
  {
    "text": "easy for us to kind of put this model on top of a you know a stateless service",
    "start": "2077820",
    "end": "2083850"
  },
  {
    "text": "compute platform is because you can still author everything as a function and behind the scenes you know we'll",
    "start": "2083850",
    "end": "2088980"
  },
  {
    "text": "take care of figuring out you know where the actual state lives the invocation you know will contain some I some ID",
    "start": "2088980",
    "end": "2096120"
  },
  {
    "text": "that says you know well what instance of my entity is this that I'm talking about what is the the operation that we're",
    "start": "2096120",
    "end": "2102720"
  },
  {
    "text": "doing and then we can just feed that information to the function behind the scenes you know I have this entity class",
    "start": "2102720",
    "end": "2108480"
  },
  {
    "text": "in the previous example I showed you a counter and you can have multiple instances of those just like you would",
    "start": "2108480",
    "end": "2115170"
  },
  {
    "text": "in a normal actor programming model you know where there's different keys for the different instances and they can all",
    "start": "2115170",
    "end": "2120540"
  },
  {
    "text": "have kind of their own State and so on and so forth so why don't we jump into a",
    "start": "2120540",
    "end": "2127620"
  },
  {
    "text": "quick demo because I thought that might help make this a little bit more real if",
    "start": "2127620",
    "end": "2133470"
  },
  {
    "text": "I could show you exactly what's going on here so I'm going to jump into Visual Studio",
    "start": "2133470",
    "end": "2139249"
  },
  {
    "text": "code real quick and the first thing I want to show you is kind of you know",
    "start": "2139249",
    "end": "2144680"
  },
  {
    "text": "real example of this this function chaining kind of going back into",
    "start": "2144680",
    "end": "2149779"
  },
  {
    "text": "workflows a little bit so I basically doing the same thing that I showed before where I just create this list I'm",
    "start": "2149779",
    "end": "2156380"
  },
  {
    "text": "calling a bunch of activity functions in this case say hello to different cities",
    "start": "2156380",
    "end": "2161680"
  },
  {
    "text": "doing it in a sequence and then adding the results and then kind of returning",
    "start": "2161680",
    "end": "2166730"
  },
  {
    "text": "them at the very end and again because this is this is durable every time you do in a wait we're actually going to",
    "start": "2166730",
    "end": "2172730"
  },
  {
    "text": "checkpoint or progress behind the scenes and this in our case into Azure table storage and then the say hello function",
    "start": "2172730",
    "end": "2180170"
  },
  {
    "text": "you know this is a function that could theoretically do anything it could make HTTP calls you could do whatever it wants and you know it's going to process",
    "start": "2180170",
    "end": "2188720"
  },
  {
    "text": "whatever input that it got in this case a name and it's going to just return a string that says hello so whatever that",
    "start": "2188720",
    "end": "2194630"
  },
  {
    "text": "is and so this is just a function and then in this case you know we're using",
    "start": "2194630",
    "end": "2200720"
  },
  {
    "text": "edger functions so I can do a func dot start to actually start executing this",
    "start": "2200720",
    "end": "2206029"
  },
  {
    "text": "thing and it's gonna run the azure functions host locally this is the same host that we use in Azure or if you're",
    "start": "2206029",
    "end": "2213499"
  },
  {
    "text": "running in kubernetes or wherever we use the same the same host so anyway so that",
    "start": "2213499",
    "end": "2218630"
  },
  {
    "text": "thing is started up so we can immediately start interacting with this workflow so I'm going to switch over to",
    "start": "2218630",
    "end": "2224980"
  },
  {
    "text": "this so one of the things that I have is I have a trigger I have another function",
    "start": "2224980",
    "end": "2232579"
  },
  {
    "text": "which is just an HTTP trigger function we'll go ahead and start a new instance of that orchestration every time you",
    "start": "2232579",
    "end": "2238849"
  },
  {
    "text": "call it and I have kind of a convention that I'm using here where I say the name",
    "start": "2238849",
    "end": "2244700"
  },
  {
    "text": "of the the workflow that I want to run I'm using HTTP to do this if you've ever",
    "start": "2244700",
    "end": "2251239"
  },
  {
    "text": "used that tool it's awesome for dealing with HTTP api's so I can send a post",
    "start": "2251239",
    "end": "2256400"
  },
  {
    "text": "message it's gonna run a little bit slow because I'm using the local Azure storage emulator right now and you can",
    "start": "2256400",
    "end": "2261890"
  },
  {
    "text": "see it did a whole bunch of work and I got some response back some 202 accepted response it's one of the cool things is",
    "start": "2261890",
    "end": "2268819"
  },
  {
    "text": "because we that this is a workflow we can actually give you some sort of management experience on top of that one of which",
    "start": "2268819",
    "end": "2275900"
  },
  {
    "text": "is you know we have this location header which is a something that you can visit to go get more information about well",
    "start": "2275900",
    "end": "2282260"
  },
  {
    "text": "what is the current status of that workflow instance that you just started",
    "start": "2282260",
    "end": "2287360"
  },
  {
    "text": "and so if I do an HTTP GET on that and hopefully you guys can see this okay you",
    "start": "2287360",
    "end": "2294680"
  },
  {
    "text": "know I'm able to see like what was the created time of this particular instance you know what is the actual function",
    "start": "2294680",
    "end": "2300530"
  },
  {
    "text": "name and this says hello chain and I because this actually completed so quickly you know I can see that it's in",
    "start": "2300530",
    "end": "2305840"
  },
  {
    "text": "a completed State and has an output of you know hello Tokyo Seattle in London and because we're using event sourcing",
    "start": "2305840",
    "end": "2313160"
  },
  {
    "text": "you know it's even possible to do things like I want to show history equals true",
    "start": "2313160",
    "end": "2318680"
  },
  {
    "text": "and you know behind the scenes we actually have all of the history of all the different functions that you ran and",
    "start": "2318680",
    "end": "2325130"
  },
  {
    "text": "so we can actually list all of those things to which kind of gives you a nice a management experience if you want to",
    "start": "2325130",
    "end": "2330770"
  },
  {
    "text": "go back and kind of see well what what step actually failed how far did I actually get and as I mentioned behind",
    "start": "2330770",
    "end": "2337040"
  },
  {
    "text": "the scenes what we're doing here is we're actually storing everything in",
    "start": "2337040",
    "end": "2342880"
  },
  {
    "text": "Azure storage in this particular case and so I'll open up the tables here",
    "start": "2342880",
    "end": "2349610"
  },
  {
    "text": "so we have two tables that are they're interesting one of them is what we call an instances table and if you think in",
    "start": "2349610",
    "end": "2354980"
  },
  {
    "text": "terms of like CQRS patterns you know this is kind of the read a projection of",
    "start": "2354980",
    "end": "2360680"
  },
  {
    "text": "all your stateful functions so you know I have my hello chain that I just ran here I have the output I see it's in a",
    "start": "2360680",
    "end": "2367490"
  },
  {
    "text": "completed status that's kind of a summary view and then if I go down we have a history table here as well where",
    "start": "2367490",
    "end": "2374900"
  },
  {
    "text": "you can actually go and you can see and I think I might even have an old I might have an old instance no I don't you can",
    "start": "2374900",
    "end": "2381530"
  },
  {
    "text": "actually see kind of all the difference rows kind of like in that that previous",
    "start": "2381530",
    "end": "2386810"
  },
  {
    "text": "animated diagrams that I was showing everyone you can see what are all the steps that we took and you know what all",
    "start": "2386810",
    "end": "2394610"
  },
  {
    "text": "the different function names were what were the outputs of someone and so forth hello London hello Seattle you know so",
    "start": "2394610",
    "end": "2402530"
  },
  {
    "text": "that's all stole behind the scenes within this table and again the nice thing is the programming",
    "start": "2402530",
    "end": "2407900"
  },
  {
    "text": "model that's being exposed to you doesn't know anything about this right that's just an implementation detail behind the scenes you're just writing",
    "start": "2407900",
    "end": "2414290"
  },
  {
    "text": "code that uses async/await or yield in the case of JavaScript and you know we",
    "start": "2414290",
    "end": "2419750"
  },
  {
    "text": "kind of take care of all the state behind the scenes using event sourcing to make it durable and potentially even",
    "start": "2419750",
    "end": "2426290"
  },
  {
    "text": "long-running so similar demo that I'd like to show you guys which is the",
    "start": "2426290",
    "end": "2432590"
  },
  {
    "text": "counter and in this one I'm going to do something oops I'm gonna copy a URL here so here's",
    "start": "2432590",
    "end": "2440690"
  },
  {
    "text": "here's the same counter example which I showed in my slides and I'm going to go",
    "start": "2440690",
    "end": "2447050"
  },
  {
    "text": "back to my HTTP tool and I'm going to do",
    "start": "2447050",
    "end": "2452090"
  },
  {
    "text": "a post and actually one thing I should do before that is do a get and then you",
    "start": "2452090",
    "end": "2460670"
  },
  {
    "text": "know I have to come up with some some name of a counter maybe we could do Q con SF you know 2019 I do a get on that",
    "start": "2460670",
    "end": "2468920"
  },
  {
    "text": "and you know that doesn't exist right we've never created anything with that",
    "start": "2468920",
    "end": "2474140"
  },
  {
    "text": "name before what I can do instead is I can send a post to that and I can say",
    "start": "2474140",
    "end": "2480140"
  },
  {
    "text": "the operation I want to call is that add operation and I want to send some data to it and you know with this tool I can",
    "start": "2480140",
    "end": "2487070"
  },
  {
    "text": "just use the echo command to do that and then pipe that to http PI and so I'm saying I want to add 10 to this durable",
    "start": "2487070",
    "end": "2494420"
  },
  {
    "text": "entity called Q con SF 2019 we could back it to it to accepted and then if I",
    "start": "2494420",
    "end": "2500930"
  },
  {
    "text": "go back and then try to query that again what I should see now is that instead of",
    "start": "2500930",
    "end": "2506000"
  },
  {
    "text": "getting a 404 back I get a 200 back and it actually shows me hey I have a value of 10 and similarly I can do the same",
    "start": "2506000",
    "end": "2513770"
  },
  {
    "text": "thing a second time we'll add 10 more to it and then if I do a get on that again",
    "start": "2513770",
    "end": "2520850"
  },
  {
    "text": "I should be able to see that in fact now the value was 20 so you get so again you",
    "start": "2520850",
    "end": "2526580"
  },
  {
    "text": "get kind of this this actor like programming model you know which can run",
    "start": "2526580",
    "end": "2532250"
  },
  {
    "text": "in a server list environments and behind the scenes of storing everything in in the table storage and so again if I go",
    "start": "2532250",
    "end": "2538570"
  },
  {
    "text": "back to this instance this table I can see now I also have a new row for that that entity that I created which has the",
    "start": "2538570",
    "end": "2545890"
  },
  {
    "text": "name you know counter and cue con SF 2019 and so as I create more and more of",
    "start": "2545890",
    "end": "2551380"
  },
  {
    "text": "these entity instances you know we'll just see more and more rows behind the scenes so anyway so popping back to the",
    "start": "2551380",
    "end": "2557830"
  },
  {
    "text": "presentation so if you're familiar with",
    "start": "2557830",
    "end": "2563440"
  },
  {
    "text": "actors there are certain similarities with actors that we have with durable",
    "start": "2563440",
    "end": "2568870"
  },
  {
    "text": "entities you know one is that these are addressable by some entity ID you know",
    "start": "2568870",
    "end": "2574240"
  },
  {
    "text": "the operations execute serially one at a time so the same benefits that most people use actor systems for we use we",
    "start": "2574240",
    "end": "2582430"
  },
  {
    "text": "continue to honor those that are created implicitly as I showed in my demo and",
    "start": "2582430",
    "end": "2588270"
  },
  {
    "text": "you know when they're not executing operations they can be silently unloaded from memory which kind of gives you a",
    "start": "2588270",
    "end": "2593380"
  },
  {
    "text": "nice high density there are some there are several differences from other",
    "start": "2593380",
    "end": "2600400"
  },
  {
    "text": "virtual actor frameworks too which are important and one of the reasons why we didn't call these actors a part of which",
    "start": "2600400",
    "end": "2606700"
  },
  {
    "text": "is just the political you know people get really fired up when you call something actors and it doesn't quite fit their model but for one it's it's",
    "start": "2606700",
    "end": "2612910"
  },
  {
    "text": "totally serverless which you know most actor frameworks they're not the other is that we prioritize durability over",
    "start": "2612910",
    "end": "2620650"
  },
  {
    "text": "latency so a lot of people use actors for you know super low latency you know",
    "start": "2620650",
    "end": "2628000"
  },
  {
    "text": "high performance types of things we think actually the durability is a slightly more important property",
    "start": "2628000",
    "end": "2634300"
  },
  {
    "text": "especially when you want to introduce something like this to a broader audience to remove a you know a set of",
    "start": "2634300",
    "end": "2642400"
  },
  {
    "text": "problems that people normally run into with actors so reliable we do in order",
    "start": "2642400",
    "end": "2647710"
  },
  {
    "text": "messaging you know messaging timeouts you know deadlocks this is implemented",
    "start": "2647710",
    "end": "2653230"
  },
  {
    "text": "in such a way that deadlock is not possible which if you're using something like or liens or service fabric actors those are some problems that people run",
    "start": "2653230",
    "end": "2660100"
  },
  {
    "text": "into and one of the pain points which we're trying to very much avoid those to kind of make people you know as",
    "start": "2660100",
    "end": "2666520"
  },
  {
    "text": "productive as possible without all the frustrations and we also support integration with",
    "start": "2666520",
    "end": "2671560"
  },
  {
    "text": "orchestrations so which is really interesting so again you know this is not just actors kind of in a silo it's",
    "start": "2671560",
    "end": "2678610"
  },
  {
    "text": "integrated with some of the other parts of your functions and even durable functions where you can do some really",
    "start": "2678610",
    "end": "2684970"
  },
  {
    "text": "interesting things like for example let's say I have a system that matches players for an online game you know we",
    "start": "2684970",
    "end": "2692020"
  },
  {
    "text": "have the ability within a workflow to say hey I want to lock these entities this player 1 and this player 2 and you",
    "start": "2692020",
    "end": "2698950"
  },
  {
    "text": "know while it's locked you know it won't those won't process any other operations and so what I can do then and my",
    "start": "2698950",
    "end": "2705430"
  },
  {
    "text": "workflow is I can you know check the status of those entities you know are they available if they are I can assign",
    "start": "2705430",
    "end": "2710560"
  },
  {
    "text": "them to a new game instance you know so you can do some really interesting distributed locking types of techniques",
    "start": "2710560",
    "end": "2716650"
  },
  {
    "text": "when you combine these actors with you know first-class workflow so you know",
    "start": "2716650",
    "end": "2724720"
  },
  {
    "text": "these are some really interesting areas where we think you can get some very interesting innovation again working",
    "start": "2724720",
    "end": "2730660"
  },
  {
    "text": "completely on serverless platforms so there's a bunch of other applications",
    "start": "2730660",
    "end": "2736020"
  },
  {
    "text": "which might be interesting we're going to share out the slides you know you guys can check out some of these you",
    "start": "2736020",
    "end": "2742330"
  },
  {
    "text": "know some patterns like distributed circuit breakers are some things that poly is a company that kind of builds a",
    "start": "2742330",
    "end": "2748060"
  },
  {
    "text": "lot of distributed system software and you know they announce that they want to use this for a distributed circuit",
    "start": "2748060",
    "end": "2754240"
  },
  {
    "text": "breaker kind of IOT API cache some sort of ride-sharing a lot of interesting",
    "start": "2754240",
    "end": "2760030"
  },
  {
    "text": "examples which might be worth checking out but you pay attention to this space I mean again you know server list",
    "start": "2760030",
    "end": "2767080"
  },
  {
    "text": "doesn't have to be stateless and I think a lot of companies are starting to realize this that there are ways that",
    "start": "2767080",
    "end": "2773230"
  },
  {
    "text": "you can actually incorporate state you know into your functions or into your",
    "start": "2773230",
    "end": "2778750"
  },
  {
    "text": "workflows and so there are a lot of companies that are currently doing some work related to this so I encourage you",
    "start": "2778750",
    "end": "2784540"
  },
  {
    "text": "all to kind of you know check your assumptions about server lists and you know take a look into what some of these",
    "start": "2784540",
    "end": "2789760"
  },
  {
    "text": "companies are doing so anyways if you want more information you know we have",
    "start": "2789760",
    "end": "2795010"
  },
  {
    "text": "some documentation on durable functions specifically where you can kind of learn more of what we're doing behind the scenes",
    "start": "2795010",
    "end": "2800260"
  },
  {
    "text": "everything is open source so the full source code is available if you're curious kind of how we implemented the event sourcing patterns",
    "start": "2800260",
    "end": "2806590"
  },
  {
    "text": "and things like that you can find me on Twitter so feel free to reach out as well and thank you so much for your time",
    "start": "2806590",
    "end": "2812650"
  },
  {
    "text": "today [Applause]",
    "start": "2812650",
    "end": "2817799"
  }
]