[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "and I just want to cover functions so all the code that we've done so far and the things that we've",
    "start": "11480",
    "end": "17520"
  },
  {
    "text": "used to manage our program flow um we've done branching conditionals if else if",
    "start": "17520",
    "end": "24560"
  },
  {
    "text": "we choose which sections of our code to execute and we've done looping which says take a section of code and run it",
    "start": "24560",
    "end": "30199"
  },
  {
    "text": "potentially over and over again uh functions are a way to break up a",
    "start": "30199",
    "end": "35320"
  },
  {
    "text": "section of your code into a functional unit that's hopefully just dependent upon one or two variables and be able to",
    "start": "35320",
    "end": "42640"
  },
  {
    "text": "call it repeatedly um it's useful mainly as a management technique and also to",
    "start": "42640",
    "end": "49559"
  },
  {
    "text": "avoid duplication and pretty much all modern programming languages are structured",
    "start": "49559",
    "end": "54640"
  },
  {
    "text": "programming languages meaning functions play a large role in them so let's look at the Syntax for defining functions and",
    "start": "54640",
    "end": "61359"
  },
  {
    "text": "just note you've been using functions all this time calling functions is a matter of adding",
    "start": "61359",
    "end": "66600"
  },
  {
    "text": "parentheses after a variable if that variable is a callable then it will be",
    "start": "66600",
    "end": "71680"
  },
  {
    "start": "67000",
    "end": "473000"
  },
  {
    "text": "called so when we say list and add parentheses list is a variable that",
    "start": "71680",
    "end": "79560"
  },
  {
    "text": "points to a object of type list and when we add parentheses it",
    "start": "79560",
    "end": "85880"
  },
  {
    "text": "actually calls that object which means execute a certain uh amount of code and that function",
    "start": "85880",
    "end": "93600"
  },
  {
    "text": "returns a blank list in this case we can Define our own functions",
    "start": "93600",
    "end": "99280"
  },
  {
    "text": "with the keyword defa short for Define we can give them a name uh a name is a",
    "start": "99280",
    "end": "105719"
  },
  {
    "text": "valid variable name and I haven't mentioned that either but valid variable names um are alpha numeric starting with",
    "start": "105719",
    "end": "112880"
  },
  {
    "text": "a alpha and lowercase so one is not one fu is not a valid",
    "start": "112880",
    "end": "120360"
  },
  {
    "text": "variable name but f one",
    "start": "120360",
    "end": "125719"
  },
  {
    "text": "is we use parentheses to specify an optional argument",
    "start": "126360",
    "end": "132280"
  },
  {
    "text": "list a semicolon says this is a multi-line",
    "start": "132280",
    "end": "138000"
  },
  {
    "text": "statement and underneath is in an indented line the body of the function",
    "start": "138000",
    "end": "145000"
  },
  {
    "text": "and let's just print one right now",
    "start": "145000",
    "end": "149640"
  },
  {
    "text": "and I hit enter after un indenting and nothing happens there's no output so I've",
    "start": "150040",
    "end": "156640"
  },
  {
    "text": "created a function I haven't called it what it",
    "start": "156640",
    "end": "162239"
  },
  {
    "text": "did I've got a lot of stuff",
    "start": "162920",
    "end": "167599"
  },
  {
    "text": "is add a variable called Fu my local namespace that is a function",
    "start": "186519",
    "end": "192640"
  },
  {
    "text": "and if I append parentheses to it it'll actually call it and run the function body which",
    "start": "192640",
    "end": "198519"
  },
  {
    "text": "prints one everybody with me so far I can make multi-line functions",
    "start": "198519",
    "end": "207519"
  },
  {
    "text": "if I can figure out how my indentation works",
    "start": "226159",
    "end": "230159"
  },
  {
    "text": "here PR one and two and then function should be able to accept arguments when",
    "start": "237159",
    "end": "242720"
  },
  {
    "text": "I'm inside of a function what data do I have access",
    "start": "242720",
    "end": "248799"
  },
  {
    "text": "to nothing by default so isn't that interesting when I type locals right now",
    "start": "260239",
    "end": "265320"
  },
  {
    "text": "I get a big long list of all sorts of stuff that I've defined and a bunch of stuff by python has made and",
    "start": "265320",
    "end": "270919"
  },
  {
    "text": "when I call my function and it prints out locals there's nothing in locals so a key python",
    "start": "270919",
    "end": "278600"
  },
  {
    "text": "concept is namespaces and namespaces are created by a variety of things including functions but local to that function",
    "start": "278600",
    "end": "285160"
  },
  {
    "text": "body is nothing I didn't create any variables inside of it it was able to call the function",
    "start": "285160",
    "end": "292320"
  },
  {
    "text": "local because local is in globals it's a buil-in",
    "start": "292320",
    "end": "297400"
  },
  {
    "text": "so my function Fu can still access variables that are in the global",
    "start": "298120",
    "end": "305199"
  },
  {
    "text": "namespace but it doesn't have any access to the surrounding local variables by",
    "start": "306960",
    "end": "312199"
  },
  {
    "text": "default so if I want it to operate on something I need to pass it in and we",
    "start": "312199",
    "end": "317479"
  },
  {
    "text": "pass parameters or arguments to a function just by specifying them by",
    "start": "317479",
    "end": "324199"
  },
  {
    "text": "name and it's a comma separated list",
    "start": "325280",
    "end": "330479"
  },
  {
    "text": "right",
    "start": "350280",
    "end": "353280"
  },
  {
    "text": "they have they have limited access to globals",
    "start": "370560",
    "end": "375919"
  },
  {
    "text": "there's a couple ways of specifying what their access to globals looks like and we'll get into the the rules for how the",
    "start": "375919",
    "end": "381800"
  },
  {
    "text": "name space functions exactly in a little bit the main thing from that is just to note that they don't have access by default to locals exactly exactly it's",
    "start": "381800",
    "end": "390000"
  },
  {
    "text": "there's slight complications in how they access globals but we'll talk about that in a second so I Define a function that just prints out a first name and last",
    "start": "390000",
    "end": "395960"
  },
  {
    "text": "name that I passed in I can pass different variables to it and it should give you an idea of what you might do to",
    "start": "395960",
    "end": "401680"
  },
  {
    "text": "um refactor your existing classmates program if you've got lots of lines that do a print statement and kind of",
    "start": "401680",
    "end": "407880"
  },
  {
    "text": "prettify it and you've got that same line like four different places you could Define a function that prints a",
    "start": "407880",
    "end": "413960"
  },
  {
    "text": "row from your classmates's dictionary the way you want it and then just call that function the four different places",
    "start": "413960",
    "end": "419280"
  },
  {
    "text": "and that means if you change it let's say you decide that you want to make sure that the first character of a name is uppercased you've only got one place",
    "start": "419280",
    "end": "425919"
  },
  {
    "text": "to change it inside the function you don't have to go to the four different places where you had the line before so even though in that case it didn't save",
    "start": "425919",
    "end": "431879"
  },
  {
    "text": "you any lines of code you've reduced your repetition and one of the primary",
    "start": "431879",
    "end": "437479"
  },
  {
    "text": "um rules of good programming hygiene is don't repeat yourself dry uh we talked about doc strings",
    "start": "437479",
    "end": "443759"
  },
  {
    "text": "earlier and said the first thing in a python script could be a triple quoted line and you'd actually have programmatic access to that the first",
    "start": "443759",
    "end": "451599"
  },
  {
    "text": "thing inside of any name space can be a triple quoted",
    "start": "451599",
    "end": "456360"
  },
  {
    "text": "line so I def find a function Fu it prints one you don't see that dock",
    "start": "468919",
    "end": "475919"
  },
  {
    "start": "473000",
    "end": "544000"
  },
  {
    "text": "string thing in the output anywhere but if I do help on Fu there's the dock",
    "start": "475919",
    "end": "484080"
  },
  {
    "text": "string so it is considered uh good python convention to dock string",
    "start": "484080",
    "end": "489960"
  },
  {
    "text": "everything by default and if anybody is ever using your code as a library from",
    "start": "489960",
    "end": "495319"
  },
  {
    "text": "the command line they can at least glean something useful hopefully something useful from your short description uh",
    "start": "495319",
    "end": "501759"
  },
  {
    "text": "it's also kind of convention to supply doc strings where the first line is a short description and then any tests or",
    "start": "501759",
    "end": "508240"
  },
  {
    "text": "lengthy descriptions are separated by by a blank um from the rest and several documentation generation libraries",
    "start": "508240",
    "end": "514279"
  },
  {
    "text": "people use um will give you the option of seeing just the first line or seeing all the rest so let's go back to the classmates",
    "start": "514279",
    "end": "521599"
  },
  {
    "text": "file um and try out just a couple of these",
    "start": "521599",
    "end": "527720"
  },
  {
    "text": "things is there anything else actually you know I take a back let me let me go just a little bit further down the path",
    "start": "527720",
    "end": "532880"
  },
  {
    "text": "of functions",
    "start": "532880",
    "end": "536080"
  },
  {
    "text": "our ZIP function that we played with what do you think the definition",
    "start": "540399",
    "end": "546720"
  },
  {
    "start": "544000",
    "end": "695000"
  },
  {
    "text": "line for zip looks like since zip how many arguments can",
    "start": "546720",
    "end": "551760"
  },
  {
    "text": "Zip take we didn't really say right it takes lists",
    "start": "551760",
    "end": "558839"
  },
  {
    "text": "it works it's giving me columns and I can keep on adding lines additional parameters",
    "start": "570560",
    "end": "580320"
  },
  {
    "text": "indefinitely python has really sophisticated argument handling capabilities so you don't have to do",
    "start": "585079",
    "end": "591399"
  },
  {
    "text": "something like this and accept a bunch of different parameters",
    "start": "591399",
    "end": "599320"
  },
  {
    "text": "so I've got a special function declaration Fu and Then star",
    "start": "613079",
    "end": "618360"
  },
  {
    "text": "args and inside the body I'm just going to print args",
    "start": "618360",
    "end": "624000"
  },
  {
    "text": "notice no M no matter how many parameters I'm passing to it it's able to accept them and it's assigning them",
    "start": "633680",
    "end": "639519"
  },
  {
    "text": "to a tuple of all the input arguments and this is probably what the Declaration of a zip looks",
    "start": "639519",
    "end": "646519"
  },
  {
    "text": "like so two ways of defining input parameters one we can give a position",
    "start": "646519",
    "end": "652800"
  },
  {
    "text": "separated list of names",
    "start": "652800",
    "end": "656639"
  },
  {
    "text": "and two we can say I don't really know how many parameters I'm going to get but",
    "start": "672839",
    "end": "678440"
  },
  {
    "text": "I want a list of them",
    "start": "678440",
    "end": "682160"
  },
  {
    "start": "695000",
    "end": "819000"
  },
  {
    "text": "make sense to everybody so the one new piece of syntax is star and you could actually call args anything you want",
    "start": "695720",
    "end": "702440"
  },
  {
    "text": "it's just a variable declaration the key piece of syntax is star okay um you should only use star",
    "start": "702440",
    "end": "710240"
  },
  {
    "text": "args when you know for sure that you take a variable number of parameters so a function like Zip is a perfect candidate for that it takes some number",
    "start": "710240",
    "end": "717440"
  },
  {
    "text": "of arguments it doesn't know how many but most um functions already know what",
    "start": "717440",
    "end": "722800"
  },
  {
    "text": "pieces of data they're going to get if you write a function that does a mathematical operation like multiply it",
    "start": "722800",
    "end": "728240"
  },
  {
    "text": "takes two objects so it already knows so by default you probably won't use star",
    "start": "728240",
    "end": "733360"
  },
  {
    "text": "orgs when declaring your functions you will usually not just for special cases you will usually",
    "start": "733360",
    "end": "741560"
  },
  {
    "text": "not no just to be explicit if you know that you accept two arguments you should give them good names and they should be",
    "start": "742560",
    "end": "747800"
  },
  {
    "text": "part of your function definition because I can introspect your function and say your function accepts two variables",
    "start": "747800",
    "end": "753040"
  },
  {
    "text": "whose name are first name and last name and I can probably figure out how to use your function but if you have a function name with just star ARS that doesn't",
    "start": "753040",
    "end": "760000"
  },
  {
    "text": "necessarily tell me anything and we prefer clean this at all",
    "start": "760000",
    "end": "765320"
  },
  {
    "text": "times if possible in terms of our our code we write for our we write for ourselves and for other programmers",
    "start": "765320",
    "end": "771079"
  },
  {
    "text": "more than we write for the computer um okay so two methods of function uh parameter declaration let's",
    "start": "771079",
    "end": "778360"
  },
  {
    "text": "throw one more in there",
    "start": "778360",
    "end": "782519"
  },
  {
    "text": "sorry Danny uh so the additional piece of syntax I've added now is the equal sign",
    "start": "817199",
    "end": "823800"
  },
  {
    "start": "819000",
    "end": "868000"
  },
  {
    "text": "and a value so I have a function definition we got def which declares I'm in a function",
    "start": "823800",
    "end": "829959"
  },
  {
    "text": "fu is the name parenthesis I've got a parameter list the first parameter looks normal first name and a comma it's a",
    "start": "829959",
    "end": "837079"
  },
  {
    "text": "positional argument this second argument last name equals Franklin is",
    "start": "837079",
    "end": "844240"
  },
  {
    "text": "also the name of a parameter but I go ahead and give it a default value and that default value",
    "start": "844240",
    "end": "849399"
  },
  {
    "text": "means it's optional if I Supply a value it'll",
    "start": "849399",
    "end": "856440"
  },
  {
    "text": "override the default if I don't Supply a",
    "start": "856440",
    "end": "861680"
  },
  {
    "text": "value the default will get taken so the usage make sense to people",
    "start": "861920",
    "end": "869480"
  },
  {
    "start": "868000",
    "end": "922000"
  },
  {
    "text": "and this is a way to write fairly flexible functions you might have a function that will take optionally three or four pieces of information and you",
    "start": "869480",
    "end": "876959"
  },
  {
    "text": "might provide sensible defaults um say something that formats text you might typically want to format text we're",
    "start": "876959",
    "end": "882920"
  },
  {
    "text": "looking at the pretty print before you might typically want to format text that fit within 80 columns you could expose",
    "start": "882920",
    "end": "888279"
  },
  {
    "text": "80 columns as a parameter with a default value and if it's not specified it'll",
    "start": "888279",
    "end": "893440"
  },
  {
    "text": "work the way you hardcoded it and you offer the user a chance to overwrite if",
    "start": "893440",
    "end": "898639"
  },
  {
    "text": "they want to in a pretty trival fashion okay one more piece of funky",
    "start": "898639",
    "end": "904839"
  },
  {
    "text": "sytax okay the new piece of syntax here is star star I did star args before star",
    "start": "921920",
    "end": "929000"
  },
  {
    "start": "922000",
    "end": "976000"
  },
  {
    "text": "star star ARS was",
    "start": "929000",
    "end": "932759"
  },
  {
    "text": "what star was a list well is a tupal of all the positional arguments potentially",
    "start": "935319",
    "end": "942279"
  },
  {
    "text": "unlimited number star star is a dict of all the name-based arguments and those",
    "start": "942279",
    "end": "949720"
  },
  {
    "text": "are arguments to which you have given a default value",
    "start": "949720",
    "end": "955160"
  },
  {
    "text": "so this doesn't",
    "start": "961279",
    "end": "964319"
  },
  {
    "text": "work and that does so just like we can Define default",
    "start": "973399",
    "end": "979440"
  },
  {
    "start": "976000",
    "end": "1023000"
  },
  {
    "text": "values when we Define functions we can also specify names when we call",
    "start": "979440",
    "end": "985319"
  },
  {
    "text": "functions they're slightly orthogonal Concepts",
    "start": "985319",
    "end": "990759"
  },
  {
    "text": "so this function isn't specifying a default value this function is saying I'm going to get a bunch of keyword",
    "start": "999319",
    "end": "1006160"
  },
  {
    "text": "oriented names not positional arguments but arguments that are named and you know they're not positional I can",
    "start": "1006160",
    "end": "1013160"
  },
  {
    "text": "reverse the order of these arguments",
    "start": "1013160",
    "end": "1018480"
  },
  {
    "text": "and it's going to get a dict of all the name-based arguments when we've been calling functions so far we've just been",
    "start": "1024039",
    "end": "1030120"
  },
  {
    "text": "passing values not names values",
    "start": "1030120",
    "end": "1037120"
  },
  {
    "text": "yep so a really common thing in functions is you've got a big complicated function and it's got like",
    "start": "1053360",
    "end": "1058400"
  },
  {
    "text": "seven parameters and you really only ever need to Supply Two And if you do it positionally based you have to supply",
    "start": "1058400",
    "end": "1064440"
  },
  {
    "text": "all seven to get the last one the one time you want to use it so you have to pass a bunch of you know Nils or falses",
    "start": "1064440",
    "end": "1070880"
  },
  {
    "text": "or zeros to initialize all the other arguments and get to that last one keyword arguments take away the positional stuff and say pass me",
    "start": "1070880",
    "end": "1077679"
  },
  {
    "text": "function arguments by by name and I can combine our two new pieces of syntax star args and star star keyword",
    "start": "1077679",
    "end": "1084799"
  },
  {
    "text": "args for kind of the ultimate in flexible",
    "start": "1084799",
    "end": "1092039"
  },
  {
    "text": "functions and I have here a function that accepts some positional arguments however many there are and",
    "start": "1092039",
    "end": "1099600"
  },
  {
    "text": "some keyword arguments however many there are",
    "start": "1099600",
    "end": "1105080"
  },
  {
    "text": "and it's just printing off both in this case the one limitation in terms of calling is all your positional arguments",
    "start": "1113480",
    "end": "1120760"
  },
  {
    "text": "must precede all your name based arguments and obviously because the positional arguments are dependent upon",
    "start": "1120760",
    "end": "1129240"
  },
  {
    "text": "position and in this case either one is",
    "start": "1129240",
    "end": "1134840"
  },
  {
    "text": "optional I could call it with none",
    "start": "1134840",
    "end": "1139440"
  },
  {
    "text": "did I lose you",
    "start": "1141200",
    "end": "1143919"
  },
  {
    "text": "yum",
    "start": "1153480",
    "end": "1156480"
  },
  {
    "text": "yes you can do position position name but you can't do any more positions after that can positional arguments have",
    "start": "1161679",
    "end": "1168760"
  },
  {
    "text": "to come first then name based arguments and our star args and star star keyword args are only letting us",
    "start": "1168760",
    "end": "1175320"
  },
  {
    "text": "accept an unlimited number of these I could mix and match positional and name based arguments explicitly by",
    "start": "1175320",
    "end": "1181250"
  },
  {
    "text": "[Music] saying first name and that's a positional argument because I'm not",
    "start": "1181250",
    "end": "1187559"
  },
  {
    "text": "giving it any default",
    "start": "1187559",
    "end": "1190440"
  },
  {
    "text": "value that's a name based argument because I am giving it a default value",
    "start": "1193799",
    "end": "1200240"
  },
  {
    "text": "de",
    "start": "1202720",
    "end": "1205080"
  },
  {
    "text": "def right it's kind of what we were doing before allar args and star star keyword args does is let me accept an",
    "start": "1223799",
    "end": "1229720"
  },
  {
    "text": "unlimited number of them and in the function definition as well as in calling all the positional arguments have to come first all the name based",
    "start": "1229720",
    "end": "1236039"
  },
  {
    "text": "arguments have to come afterwards okay you confused",
    "start": "1236039",
    "end": "1241799"
  },
  {
    "text": "yet there's one more additional piece of complexity on calling but I don't think",
    "start": "1241799",
    "end": "1247200"
  },
  {
    "text": "I'll talk about that additional piece of complexity till tomorrow um for now let's go back to our classmates lab and",
    "start": "1247200",
    "end": "1253280"
  },
  {
    "text": "let's do a little bit of refactoring um question",
    "start": "1253280",
    "end": "1259960"
  },
  {
    "text": "initialize the function yes so if I don't initialize it it were you know be taken as the positional Bas",
    "start": "1273679",
    "end": "1281120"
  },
  {
    "text": "AR is that right if you don't initialize it they're positional arguments if there's no equal sign it's a positional",
    "start": "1281120",
    "end": "1286640"
  },
  {
    "start": "1282000",
    "end": "1307000"
  },
  {
    "text": "argument okay yep so so that would be the way to and by default you'll typically write",
    "start": "1286640",
    "end": "1293600"
  },
  {
    "text": "functions that take just a couple arguments and their positional arguments right that's how most of the code you've written in other languages",
    "start": "1293600",
    "end": "1298780"
  },
  {
    "text": "[Music] Works AR caniz some value right nope if",
    "start": "1298780",
    "end": "1308520"
  },
  {
    "start": "1307000",
    "end": "1340000"
  },
  {
    "text": "I initialize it then it's automatically a keyword based value keyword it can be the first",
    "start": "1308520",
    "end": "1315158"
  },
  {
    "text": "one already anytime weize if you initialize it it's keyword-based and",
    "start": "1316559",
    "end": "1321880"
  },
  {
    "text": "it's also optional and that's the other funky thing is since you've given it a default value you can call the function",
    "start": "1321880",
    "end": "1327240"
  },
  {
    "text": "without supplying that value and if you want a keyword-based argument that's mandatory you need to initialize it to",
    "start": "1327240",
    "end": "1333320"
  },
  {
    "text": "something like none or false check for that value in your function and raise an exception if",
    "start": "1333320",
    "end": "1338400"
  },
  {
    "text": "there value okay so we have regular arguments they're positional we give them names in",
    "start": "1338400",
    "end": "1345520"
  },
  {
    "start": "1340000",
    "end": "1410000"
  },
  {
    "text": "our function definition but we only use those names internally to the function and outside the function we don't see",
    "start": "1345520",
    "end": "1352480"
  },
  {
    "text": "those names we pass just values final values and then we have name based",
    "start": "1352480",
    "end": "1357600"
  },
  {
    "text": "optional arguments and outside the function we specify that we're getting a",
    "start": "1357600",
    "end": "1363480"
  },
  {
    "text": "name based parameter by saying name equals value when we call the function and inside the function that Val that",
    "start": "1363480",
    "end": "1370600"
  },
  {
    "text": "value did not have to be supplied when the function was called um so it's always set whether it was supplied or not it's got a default argument",
    "start": "1370600",
    "end": "1379480"
  },
  {
    "text": "okay first and most simple refactoring uh refactoring by the way it's a great book one more",
    "start": "1379840",
    "end": "1387720"
  },
  {
    "text": "question they would be yes correct",
    "start": "1394880",
    "end": "1401400"
  },
  {
    "text": "so so outside of the function body if I say last name it doesn't exist does it's",
    "start": "1401400",
    "end": "1406799"
  },
  {
    "text": "local to the function name space that's correct so let's do our first and uh",
    "start": "1406799",
    "end": "1414200"
  },
  {
    "start": "1410000",
    "end": "1517000"
  },
  {
    "text": "most um most easy refactoring um let's go ahead and open",
    "start": "1414200",
    "end": "1419799"
  },
  {
    "text": "your classmates file save it as a new classmates. three classmates 3. Pi",
    "start": "1419799",
    "end": "1425080"
  },
  {
    "text": "file um and let's think about what sort sorts of things we could move into a",
    "start": "1425080",
    "end": "1430320"
  },
  {
    "text": "function um one of the things refactoring by the way it's a great book it's written about Java um but it's",
    "start": "1430320",
    "end": "1437720"
  },
  {
    "text": "basically the part of rewriting your program that's already working for the purpose of making it",
    "start": "1437720",
    "end": "1444600"
  },
  {
    "text": "more maintainable which usually translates to easier to understand and easier to change um and it's got Bunches",
    "start": "1444600",
    "end": "1451279"
  },
  {
    "text": "of examples and rules for rewriting things uh my own personal rules uh Chief among them",
    "start": "1451279",
    "end": "1457440"
  },
  {
    "text": "is less code the less code I have to read in an algorithm the easier it is",
    "start": "1457440",
    "end": "1463159"
  },
  {
    "text": "for me to understand it if you give me a loop that's two pages of printed code the chances that I actually understand",
    "start": "1463159",
    "end": "1469240"
  },
  {
    "text": "everything that Loop does is really close to N uh it's just too much code to",
    "start": "1469240",
    "end": "1475200"
  },
  {
    "text": "to comprehend if you give me a loop that has four lines as the body of the loop",
    "start": "1475200",
    "end": "1480640"
  },
  {
    "text": "um even if those four lines are calling functions I at least have a really good conceptual understanding of the loop and",
    "start": "1480640",
    "end": "1485799"
  },
  {
    "text": "I can probably test the functions um a lot better because they're not part of the loop they can be tested kind of",
    "start": "1485799",
    "end": "1491520"
  },
  {
    "text": "Standalone so let's remove some code from our classmates Loop and put it into",
    "start": "1491520",
    "end": "1496840"
  },
  {
    "text": "functions and particular I'd like to remove code that gets repeated so you probably are printing out a record a few",
    "start": "1496840",
    "end": "1503279"
  },
  {
    "text": "places let's define a function called display",
    "start": "1503279",
    "end": "1508399"
  },
  {
    "text": "record and let's pass it our tupal and let's have it print our nice uh you know",
    "start": "1508399",
    "end": "1514039"
  },
  {
    "text": "name first name last name is a role and maybe another candidate for",
    "start": "1514039",
    "end": "1519760"
  },
  {
    "start": "1517000",
    "end": "1576000"
  },
  {
    "text": "refactoring would be our input you have several lines of input where you prompt the user for a",
    "start": "1519760",
    "end": "1526799"
  },
  {
    "text": "first name and last name and out of that you get a couple of variables let's refactor that to a",
    "start": "1526799",
    "end": "1533240"
  },
  {
    "text": "function called new record and that requires uh one last piece of syntax that I should have mentioned with",
    "start": "1533240",
    "end": "1539880"
  },
  {
    "text": "functions uh functions functions do things they run the body so we've been calling our",
    "start": "1539880",
    "end": "1546480"
  },
  {
    "text": "function Fu here as we repeatedly Define it and it does stuff but does it return",
    "start": "1546480",
    "end": "1553880"
  },
  {
    "text": "anything it that X is equal to Fu and X is equal to nothing right now so",
    "start": "1553880",
    "end": "1559320"
  },
  {
    "text": "functions by default return none but there is a state a language keyword",
    "start": "1559320",
    "end": "1565840"
  },
  {
    "start": "1576000",
    "end": "1720000"
  },
  {
    "text": "return um which return stops the execution of the function when it",
    "start": "1576159",
    "end": "1581760"
  },
  {
    "text": "executes no matter where it is in the function if return was the first statement of my function the rest of my function body would not ever run",
    "start": "1581760",
    "end": "1589520"
  },
  {
    "text": "and now when I run Fu I can see that it's got",
    "start": "1589520",
    "end": "1595399"
  },
  {
    "text": "output here is the return value and it also printed one and I can say x is",
    "start": "1595399",
    "end": "1600919"
  },
  {
    "text": "equal to Fu and X now has a",
    "start": "1600919",
    "end": "1606120"
  },
  {
    "text": "value so we could write a function that solicits input from the user and returns",
    "start": "1606120",
    "end": "1611679"
  },
  {
    "text": "a first name last name roll Tuple and in fact I'd like to do just that",
    "start": "1611679",
    "end": "1619480"
  },
  {
    "text": "refactor",
    "start": "1647159",
    "end": "1650159"
  },
  {
    "text": "for for",
    "start": "1677120",
    "end": "1681158"
  },
  {
    "start": "1720000",
    "end": "1876000"
  },
  {
    "text": "uh yes there are you can't use you can't use any keywords and keywords I thought there",
    "start": "1721600",
    "end": "1727440"
  },
  {
    "text": "was a buil-in module",
    "start": "1727440",
    "end": "1731000"
  },
  {
    "text": "keyword keyword. KW list has all the built-in keywords so we've seen a bunch",
    "start": "1761480",
    "end": "1766840"
  },
  {
    "text": "of these like if for a while there's break and",
    "start": "1766840",
    "end": "1772360"
  },
  {
    "text": "continue so you'll get a syntax eror if you're try and use one of these then the built-ins you can actually overwrite if",
    "start": "1772880",
    "end": "1778360"
  },
  {
    "text": "you want to like stir is a buil-in but I can go ahead and type my own function",
    "start": "1778360",
    "end": "1783640"
  },
  {
    "text": "called [Music] stir but just because you can doesn't",
    "start": "1783640",
    "end": "1790399"
  },
  {
    "text": "make it a good idea and is extremely likely to break your code so it's worthwhile knowing the built-ins and not overriding them if",
    "start": "1790399",
    "end": "1797039"
  },
  {
    "text": "possible",
    "start": "1797039",
    "end": "1800039"
  },
  {
    "text": "e e",
    "start": "1826960",
    "end": "1830960"
  },
  {
    "start": "1876000",
    "end": "2148000"
  },
  {
    "text": "uh yes there are you can't use you can't use any keywords and keywords I thought",
    "start": "1877279",
    "end": "1883000"
  },
  {
    "text": "there was a built-in module",
    "start": "1883000",
    "end": "1887000"
  },
  {
    "text": "keyword. KW list has all the built-in keywords so we've seen a bunch of these like if for while there's break and",
    "start": "1901440",
    "end": "1911320"
  },
  {
    "text": "continue so you'll get a syntax ER if you're trying to use one of these then the built-ins you can actually overwrite",
    "start": "1911840",
    "end": "1917240"
  },
  {
    "text": "if you want to like stir is a built-in but I can go ahead and type my own function called",
    "start": "1917240",
    "end": "1922990"
  },
  {
    "text": "[Music] stir but just because you can doesn't",
    "start": "1922990",
    "end": "1929399"
  },
  {
    "text": "make it a good idea and is extremely likely to break your code so it's worthwhile knowing the built-ins and not overriding them if",
    "start": "1929399",
    "end": "1936919"
  },
  {
    "text": "possible",
    "start": "1946840",
    "end": "1949840"
  },
  {
    "text": "e",
    "start": "1976840",
    "end": "1979840"
  },
  {
    "text": "e",
    "start": "2006760",
    "end": "2009760"
  },
  {
    "text": "e",
    "start": "2036720",
    "end": "2039720"
  },
  {
    "text": "e e",
    "start": "2066720",
    "end": "2070679"
  },
  {
    "text": "e",
    "start": "2097920",
    "end": "2100920"
  },
  {
    "text": "everybody industriously pping away and our Like official lecture portion is over but would anybody um it seems like",
    "start": "2134680",
    "end": "2142240"
  },
  {
    "text": "everybody's hitting the material pretty well is anybody feeling lost I need to pay attention to anybody feels okay okay so we're our",
    "start": "2142240",
    "end": "2150119"
  },
  {
    "start": "2148000",
    "end": "2301000"
  },
  {
    "text": "classmates program um by day four is going to read and write from a a text",
    "start": "2150119",
    "end": "2157000"
  },
  {
    "text": "file using the the CSV module so you could look at it with a Excel spreadsheet and so that your inputs and",
    "start": "2157000",
    "end": "2163000"
  },
  {
    "text": "outputs are saved between program runs uh we'd like to present a quick menu which will I think I have seven",
    "start": "2163000",
    "end": "2170520"
  },
  {
    "text": "options on the final thing um which lets the user choose what sort of option they want to take initially um and for the moment I just",
    "start": "2170520",
    "end": "2177880"
  },
  {
    "text": "like to go ahead and add the menu and not all the functionality has to work but the functionality that we're interested in is what we have already",
    "start": "2177880",
    "end": "2183520"
  },
  {
    "text": "print everything out you like to search by name also like to do some other filtering things like filter by roll so",
    "start": "2183520",
    "end": "2190160"
  },
  {
    "text": "show me only the teachers or show me only the instructors we'd like to add a record but basically the main Loop of",
    "start": "2190160",
    "end": "2196400"
  },
  {
    "text": "your program is going to switch from just soliciting a name to presenting a menu and executing a particular function",
    "start": "2196400",
    "end": "2203720"
  },
  {
    "text": "probably based on what menu item was selected um we'll talk tomorrow about",
    "start": "2203720",
    "end": "2209839"
  },
  {
    "text": "how best to structure your program there's a couple of python idioms uh when you start progressing Beyond",
    "start": "2209839",
    "end": "2215040"
  },
  {
    "text": "scripts into actual programs um um probably by tomorrow we'll be pulling your program out into a package and",
    "start": "2215040",
    "end": "2222160"
  },
  {
    "text": "module system as well so not all of your code is living in a single file and",
    "start": "2222160",
    "end": "2227319"
  },
  {
    "text": "optionally at the end depending on how enthusiastic people are feeling we may try talking to a database instead of talking to a text file um and we're",
    "start": "2227319",
    "end": "2233800"
  },
  {
    "text": "going to be spending uh parts of the third day and fourth day on object-oriented programming um some of",
    "start": "2233800",
    "end": "2239359"
  },
  {
    "text": "the benefits of which are code reuse and some of which are just um fluency and",
    "start": "2239359",
    "end": "2245160"
  },
  {
    "text": "we'll see the benefits of refactoring our program to use objects instead of um relatively dumb data structures like",
    "start": "2245160",
    "end": "2251280"
  },
  {
    "text": "tupal or lists for our records that's kind of where we're where we're going in terms of",
    "start": "2251280",
    "end": "2256720"
  },
  {
    "text": "um in terms of our labs and then we've got a few other topics to cover along the way doc tests are probably going to",
    "start": "2256720",
    "end": "2263480"
  },
  {
    "text": "sneak in tomorrow unit test which is another testing um Library we'll sneak in on the third day and tomorrow yeah",
    "start": "2263480",
    "end": "2272280"
  },
  {
    "text": "tomorrow basically we're going to finish off with functions um kind of reiterate some of the stuff that we talked about",
    "start": "2272280",
    "end": "2277760"
  },
  {
    "text": "at the end of today and just one or two extra tweaks and error recovery with exceptions and code organization and",
    "start": "2277760",
    "end": "2284359"
  },
  {
    "text": "we'll be tweaking the classmates to read and write and search through files instead of just from a a static data",
    "start": "2284359",
    "end": "2290599"
  },
  {
    "text": "definition",
    "start": "2290599",
    "end": "2293599"
  }
]