[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "[Music]",
    "start": "3360",
    "end": "6550"
  },
  {
    "text": "hello and welcome",
    "start": "9679",
    "end": "10800"
  },
  {
    "text": "to this session where i'll be talking",
    "start": "10800",
    "end": "12960"
  },
  {
    "text": "about how you can use apache pino as",
    "start": "12960",
    "end": "15519"
  },
  {
    "text": "part of your data pipelines",
    "start": "15519",
    "end": "17440"
  },
  {
    "text": "for building rich external or",
    "start": "17440",
    "end": "20000"
  },
  {
    "text": "site-facing analytics",
    "start": "20000",
    "end": "22800"
  },
  {
    "text": "a quick note about me hi i'm chin",
    "start": "22800",
    "end": "24720"
  },
  {
    "text": "meshuman i'm",
    "start": "24720",
    "end": "26080"
  },
  {
    "text": "part of a stealth right now but before",
    "start": "26080",
    "end": "28800"
  },
  {
    "text": "this i was leading the streaming group",
    "start": "28800",
    "end": "30560"
  },
  {
    "text": "at uber",
    "start": "30560",
    "end": "31760"
  },
  {
    "text": "whose mission was to build the next",
    "start": "31760",
    "end": "33280"
  },
  {
    "text": "generation real-time analytics platform",
    "start": "33280",
    "end": "36559"
  },
  {
    "text": "i'm an active contributor to apache pino",
    "start": "36559",
    "end": "38800"
  },
  {
    "text": "and also part of some other open source",
    "start": "38800",
    "end": "40879"
  },
  {
    "text": "projects",
    "start": "40879",
    "end": "43120"
  },
  {
    "start": "42000",
    "end": "80000"
  },
  {
    "text": "so today i'll begin by discussing what",
    "start": "43120",
    "end": "46000"
  },
  {
    "text": "exactly is side-facing analytics",
    "start": "46000",
    "end": "48559"
  },
  {
    "text": "and why we need an underlying system",
    "start": "48559",
    "end": "50559"
  },
  {
    "text": "that can support",
    "start": "50559",
    "end": "51680"
  },
  {
    "text": "high throughput low latency analytical",
    "start": "51680",
    "end": "54000"
  },
  {
    "text": "queries",
    "start": "54000",
    "end": "55520"
  },
  {
    "text": "i'll introduce apache pino and talk",
    "start": "55520",
    "end": "57440"
  },
  {
    "text": "about its high level architecture",
    "start": "57440",
    "end": "59920"
  },
  {
    "text": "and how it's optimized for such use",
    "start": "59920",
    "end": "61760"
  },
  {
    "text": "cases",
    "start": "61760",
    "end": "63600"
  },
  {
    "text": "next i'll discuss some scenarios where",
    "start": "63600",
    "end": "65920"
  },
  {
    "text": "maintaining the p99 latency sla",
    "start": "65920",
    "end": "68640"
  },
  {
    "text": "becomes non-trivial and finally how we",
    "start": "68640",
    "end": "71600"
  },
  {
    "text": "can optimize our input data pipelines",
    "start": "71600",
    "end": "74159"
  },
  {
    "text": "and our pinot data layout to obtain",
    "start": "74159",
    "end": "77439"
  },
  {
    "text": "predictable latency",
    "start": "77439",
    "end": "79759"
  },
  {
    "text": "let's begin what exactly is side facing",
    "start": "79759",
    "end": "83200"
  },
  {
    "start": "80000",
    "end": "161000"
  },
  {
    "text": "analytics well we typically refer",
    "start": "83200",
    "end": "86960"
  },
  {
    "text": "by this we typically refer to the",
    "start": "86960",
    "end": "89119"
  },
  {
    "text": "analytical tools and solutions",
    "start": "89119",
    "end": "91439"
  },
  {
    "text": "exposed directly to our end users or the",
    "start": "91439",
    "end": "94079"
  },
  {
    "text": "audience of your company",
    "start": "94079",
    "end": "96159"
  },
  {
    "text": "one of the best use cases is the",
    "start": "96159",
    "end": "97840"
  },
  {
    "text": "linkedin feed ranking use case",
    "start": "97840",
    "end": "101360"
  },
  {
    "text": "i'm sure most of you are familiar with",
    "start": "101360",
    "end": "103439"
  },
  {
    "text": "the linkedin news feed",
    "start": "103439",
    "end": "105680"
  },
  {
    "text": "to make sure the news feed is",
    "start": "105680",
    "end": "107680"
  },
  {
    "text": "interesting we need to ensure",
    "start": "107680",
    "end": "110000"
  },
  {
    "text": "the users are not seeing the same thing",
    "start": "110000",
    "end": "112000"
  },
  {
    "text": "again and again in other words for any",
    "start": "112000",
    "end": "115040"
  },
  {
    "text": "given story",
    "start": "115040",
    "end": "116560"
  },
  {
    "text": "we need to know how many times has the",
    "start": "116560",
    "end": "119200"
  },
  {
    "text": "user",
    "start": "119200",
    "end": "119840"
  },
  {
    "text": "seen this in the last 14 days or so",
    "start": "119840",
    "end": "123040"
  },
  {
    "text": "which can be done with a sql query",
    "start": "123040",
    "end": "125040"
  },
  {
    "text": "something like this",
    "start": "125040",
    "end": "127119"
  },
  {
    "text": "at a high level this might look",
    "start": "127119",
    "end": "128800"
  },
  {
    "text": "straightforward",
    "start": "128800",
    "end": "130239"
  },
  {
    "text": "but keep in mind this query needs to be",
    "start": "130239",
    "end": "132560"
  },
  {
    "text": "executed",
    "start": "132560",
    "end": "133360"
  },
  {
    "text": "for every active user every time they",
    "start": "133360",
    "end": "136400"
  },
  {
    "text": "visit the linkedin home page",
    "start": "136400",
    "end": "139440"
  },
  {
    "text": "which translates to multiple thousands",
    "start": "139440",
    "end": "142160"
  },
  {
    "text": "of such",
    "start": "142160",
    "end": "142800"
  },
  {
    "text": "olap queries executed on a huge database",
    "start": "142800",
    "end": "147120"
  },
  {
    "text": "of pretty much all the linkedin members",
    "start": "147120",
    "end": "150080"
  },
  {
    "text": "and each such query",
    "start": "150080",
    "end": "151519"
  },
  {
    "text": "must execute pretty quickly in the order",
    "start": "151519",
    "end": "154239"
  },
  {
    "text": "of milliseconds",
    "start": "154239",
    "end": "155680"
  },
  {
    "text": "otherwise it's going to lead to a",
    "start": "155680",
    "end": "157200"
  },
  {
    "text": "terrible experience for our for our",
    "start": "157200",
    "end": "160000"
  },
  {
    "text": "users let's take another example which",
    "start": "160000",
    "end": "163599"
  },
  {
    "start": "161000",
    "end": "247000"
  },
  {
    "text": "is the",
    "start": "163599",
    "end": "164400"
  },
  {
    "text": "restaurant manager from ubereats this is",
    "start": "164400",
    "end": "167360"
  },
  {
    "text": "a tool",
    "start": "167360",
    "end": "167920"
  },
  {
    "text": "that's given to restaurant owners across",
    "start": "167920",
    "end": "170720"
  },
  {
    "text": "the globe",
    "start": "170720",
    "end": "171920"
  },
  {
    "text": "to slice and dice their data from",
    "start": "171920",
    "end": "174319"
  },
  {
    "text": "oblates",
    "start": "174319",
    "end": "176000"
  },
  {
    "text": "so when you open the tool you can see a",
    "start": "176000",
    "end": "178480"
  },
  {
    "text": "view something like this",
    "start": "178480",
    "end": "180159"
  },
  {
    "text": "where you can see sales metrics in a",
    "start": "180159",
    "end": "182159"
  },
  {
    "text": "real time and historical fashion",
    "start": "182159",
    "end": "184800"
  },
  {
    "text": "you see missed orders or inaccurate",
    "start": "184800",
    "end": "186640"
  },
  {
    "text": "orders which is more real time",
    "start": "186640",
    "end": "189120"
  },
  {
    "text": "and other information such as top",
    "start": "189120",
    "end": "191120"
  },
  {
    "text": "selling items menu feedback",
    "start": "191120",
    "end": "192959"
  },
  {
    "text": "and so on now you can imagine to load",
    "start": "192959",
    "end": "196959"
  },
  {
    "text": "this",
    "start": "196959",
    "end": "197440"
  },
  {
    "text": "one view to load this view we need to",
    "start": "197440",
    "end": "200640"
  },
  {
    "text": "execute",
    "start": "200640",
    "end": "201760"
  },
  {
    "text": "multiple complex olap queries all",
    "start": "201760",
    "end": "204879"
  },
  {
    "text": "executing concurrently",
    "start": "204879",
    "end": "207280"
  },
  {
    "text": "multiply this with all the restaurant",
    "start": "207280",
    "end": "209360"
  },
  {
    "text": "owners across the globe leads to a lot",
    "start": "209360",
    "end": "211280"
  },
  {
    "text": "of qps",
    "start": "211280",
    "end": "212080"
  },
  {
    "text": "to the underlying database and again all",
    "start": "212080",
    "end": "215040"
  },
  {
    "text": "these queries must execute",
    "start": "215040",
    "end": "217519"
  },
  {
    "text": "in the order of milliseconds for a good",
    "start": "217519",
    "end": "220159"
  },
  {
    "text": "experience for our users",
    "start": "220159",
    "end": "222959"
  },
  {
    "text": "so it is clear to build such rich",
    "start": "222959",
    "end": "225519"
  },
  {
    "text": "analytics for external audience",
    "start": "225519",
    "end": "227599"
  },
  {
    "text": "we need an underlying analytical system",
    "start": "227599",
    "end": "230640"
  },
  {
    "text": "that can ingest data from real time and",
    "start": "230640",
    "end": "233439"
  },
  {
    "text": "historical",
    "start": "233439",
    "end": "234319"
  },
  {
    "text": "sources and support high",
    "start": "234319",
    "end": "237920"
  },
  {
    "text": "throughput low latency queries",
    "start": "237920",
    "end": "241439"
  },
  {
    "text": "in in a reliable manner",
    "start": "241439",
    "end": "244720"
  },
  {
    "text": "enter apache pino for those who don't",
    "start": "244720",
    "end": "248319"
  },
  {
    "start": "247000",
    "end": "297000"
  },
  {
    "text": "know apache pino is a distributed olap",
    "start": "248319",
    "end": "250879"
  },
  {
    "text": "store",
    "start": "250879",
    "end": "251760"
  },
  {
    "text": "which can ingest data from a variety of",
    "start": "251760",
    "end": "254159"
  },
  {
    "text": "sources such as kafka",
    "start": "254159",
    "end": "255840"
  },
  {
    "text": "hdfs s3 gcs and so on",
    "start": "255840",
    "end": "259519"
  },
  {
    "text": "and make it available for querying in",
    "start": "259519",
    "end": "261519"
  },
  {
    "text": "real time",
    "start": "261519",
    "end": "263759"
  },
  {
    "text": "at the heart of the system is a columnar",
    "start": "263759",
    "end": "266000"
  },
  {
    "text": "store",
    "start": "266000",
    "end": "266880"
  },
  {
    "text": "and it also features a variety of smart",
    "start": "266880",
    "end": "269840"
  },
  {
    "text": "indexing techniques and pre-aggregation",
    "start": "269840",
    "end": "272000"
  },
  {
    "text": "techniques",
    "start": "272000",
    "end": "273759"
  },
  {
    "text": "for low latency all these optimizations",
    "start": "273759",
    "end": "277840"
  },
  {
    "text": "make it a great fit for a lot of",
    "start": "277840",
    "end": "280720"
  },
  {
    "text": "analytical use cases",
    "start": "280720",
    "end": "282479"
  },
  {
    "text": "such as business metrics or dashboards",
    "start": "282479",
    "end": "285680"
  },
  {
    "text": "or the analytical application which we",
    "start": "285680",
    "end": "287840"
  },
  {
    "text": "saw with linkedin",
    "start": "287840",
    "end": "289759"
  },
  {
    "text": "or even things such as real time",
    "start": "289759",
    "end": "292800"
  },
  {
    "text": "ad hoc exploration anomaly detection and",
    "start": "292800",
    "end": "295919"
  },
  {
    "text": "so on",
    "start": "295919",
    "end": "298240"
  },
  {
    "start": "297000",
    "end": "334000"
  },
  {
    "text": "pino is a mature product today and it's",
    "start": "298240",
    "end": "301039"
  },
  {
    "text": "used",
    "start": "301039",
    "end": "301520"
  },
  {
    "text": "in a lot of big data companies across",
    "start": "301520",
    "end": "303440"
  },
  {
    "text": "the globe in production",
    "start": "303440",
    "end": "305440"
  },
  {
    "text": "as shown here on the right and the usage",
    "start": "305440",
    "end": "309039"
  },
  {
    "text": "is rapidly increasing",
    "start": "309039",
    "end": "312479"
  },
  {
    "text": "of course no introduction is complete",
    "start": "312479",
    "end": "314479"
  },
  {
    "text": "without vanity metrics so here you go",
    "start": "314479",
    "end": "318400"
  },
  {
    "text": "some of the largest pinot clusters can",
    "start": "318400",
    "end": "320960"
  },
  {
    "text": "ingest data",
    "start": "320960",
    "end": "322000"
  },
  {
    "text": "at a rate of upwards of a million events",
    "start": "322000",
    "end": "324800"
  },
  {
    "text": "per second",
    "start": "324800",
    "end": "326320"
  },
  {
    "text": "support hundreds of thousands of queries",
    "start": "326320",
    "end": "328320"
  },
  {
    "text": "per second while still maintaining a low",
    "start": "328320",
    "end": "330560"
  },
  {
    "text": "latency",
    "start": "330560",
    "end": "331840"
  },
  {
    "text": "in the order of milliseconds okay",
    "start": "331840",
    "end": "335360"
  },
  {
    "start": "334000",
    "end": "434000"
  },
  {
    "text": "so now that all the buzzwords are out of",
    "start": "335360",
    "end": "338000"
  },
  {
    "text": "the way",
    "start": "338000",
    "end": "338560"
  },
  {
    "text": "uh let's get our hands dirty and see how",
    "start": "338560",
    "end": "340880"
  },
  {
    "text": "pinot looks like under the hood",
    "start": "340880",
    "end": "343199"
  },
  {
    "text": "so here's a high-level architecture of",
    "start": "343199",
    "end": "345039"
  },
  {
    "text": "pinot",
    "start": "345039",
    "end": "346240"
  },
  {
    "text": "at the bottom of the diagram you can see",
    "start": "346240",
    "end": "348960"
  },
  {
    "text": "the data sources",
    "start": "348960",
    "end": "350720"
  },
  {
    "text": "that we get the raw data from you can",
    "start": "350720",
    "end": "353440"
  },
  {
    "text": "use pino as part of your real-time",
    "start": "353440",
    "end": "355440"
  },
  {
    "text": "pipelines",
    "start": "355440",
    "end": "356319"
  },
  {
    "text": "where the data flows in through either",
    "start": "356319",
    "end": "358960"
  },
  {
    "text": "kafka kinesis pops up and so on",
    "start": "358960",
    "end": "362319"
  },
  {
    "text": "uh and in this case pino will be",
    "start": "362319",
    "end": "364000"
  },
  {
    "text": "ingesting the data one event at a time",
    "start": "364000",
    "end": "367520"
  },
  {
    "text": "you could also use pino as part of your",
    "start": "367520",
    "end": "369199"
  },
  {
    "text": "batch pipeline",
    "start": "369199",
    "end": "370720"
  },
  {
    "text": "where the raw data is sitting somewhere",
    "start": "370720",
    "end": "372400"
  },
  {
    "text": "in hdfs or s3",
    "start": "372400",
    "end": "374319"
  },
  {
    "text": "and we run an ingestion job to bulk load",
    "start": "374319",
    "end": "377520"
  },
  {
    "text": "that data",
    "start": "377520",
    "end": "378240"
  },
  {
    "text": "into pinot the system supports land",
    "start": "378240",
    "end": "381680"
  },
  {
    "text": "architecture so the cool thing here",
    "start": "381680",
    "end": "384080"
  },
  {
    "text": "is you can run both these pipelines for",
    "start": "384080",
    "end": "386639"
  },
  {
    "text": "the same table",
    "start": "386639",
    "end": "388400"
  },
  {
    "text": "and it will be presented as one unified",
    "start": "388400",
    "end": "391039"
  },
  {
    "text": "view",
    "start": "391039",
    "end": "391440"
  },
  {
    "text": "to the user which is pretty convenient",
    "start": "391440",
    "end": "395280"
  },
  {
    "text": "on the top right we have the controller",
    "start": "395280",
    "end": "397280"
  },
  {
    "text": "which uses apache helix",
    "start": "397280",
    "end": "399120"
  },
  {
    "text": "to coordinate different cluster",
    "start": "399120",
    "end": "400639"
  },
  {
    "text": "operations such as partitioning",
    "start": "400639",
    "end": "403039"
  },
  {
    "text": "replication load balancing",
    "start": "403039",
    "end": "406400"
  },
  {
    "text": "instance allocation and so on",
    "start": "406400",
    "end": "409599"
  },
  {
    "text": "and finally on we have the data plane",
    "start": "409599",
    "end": "412160"
  },
  {
    "text": "consisting of brokers and servers",
    "start": "412160",
    "end": "415039"
  },
  {
    "text": "so servers will get the incoming data",
    "start": "415039",
    "end": "417440"
  },
  {
    "text": "and organize it",
    "start": "417440",
    "end": "418479"
  },
  {
    "text": "in a columnar format and make it",
    "start": "418479",
    "end": "421680"
  },
  {
    "text": "available for local queries",
    "start": "421680",
    "end": "424240"
  },
  {
    "text": "brokers will get the queries issued by",
    "start": "424240",
    "end": "427680"
  },
  {
    "text": "users or applications and then do a",
    "start": "427680",
    "end": "430160"
  },
  {
    "text": "distributed scat together",
    "start": "430160",
    "end": "431759"
  },
  {
    "text": "to compute the final result",
    "start": "431759",
    "end": "434880"
  },
  {
    "start": "434000",
    "end": "605000"
  },
  {
    "text": "so let's take an example of a real-time",
    "start": "434880",
    "end": "437199"
  },
  {
    "text": "pipeline with pinot to illustrate the",
    "start": "437199",
    "end": "439120"
  },
  {
    "text": "flow of data",
    "start": "439120",
    "end": "440960"
  },
  {
    "text": "here we have the pinot controller pinot",
    "start": "440960",
    "end": "443759"
  },
  {
    "text": "broker",
    "start": "443759",
    "end": "445039"
  },
  {
    "text": "four servers and a kafka topic with four",
    "start": "445039",
    "end": "447440"
  },
  {
    "text": "partitions",
    "start": "447440",
    "end": "449520"
  },
  {
    "text": "let's assume we want to set up a table",
    "start": "449520",
    "end": "451840"
  },
  {
    "text": "to ingest from this topic",
    "start": "451840",
    "end": "454160"
  },
  {
    "text": "so the very first thing controller will",
    "start": "454160",
    "end": "456080"
  },
  {
    "text": "do is to fetch",
    "start": "456080",
    "end": "457280"
  },
  {
    "text": "the kafka metadata discover the four",
    "start": "457280",
    "end": "460479"
  },
  {
    "text": "partitions",
    "start": "460479",
    "end": "462000"
  },
  {
    "text": "and decide that it needs to create four",
    "start": "462000",
    "end": "464560"
  },
  {
    "text": "segments",
    "start": "464560",
    "end": "465360"
  },
  {
    "text": "for each of these partitions",
    "start": "465360",
    "end": "468400"
  },
  {
    "text": "a segment here refers to the unit of",
    "start": "468400",
    "end": "471919"
  },
  {
    "text": "partitioning and replication in pino it",
    "start": "471919",
    "end": "474720"
  },
  {
    "text": "basically refers to",
    "start": "474720",
    "end": "475919"
  },
  {
    "text": "a chunk or subset of your data so you'll",
    "start": "475919",
    "end": "478879"
  },
  {
    "text": "have many segments",
    "start": "478879",
    "end": "480080"
  },
  {
    "text": "for for a given table we will look at",
    "start": "480080",
    "end": "482800"
  },
  {
    "text": "the segment in detail in the next slide",
    "start": "482800",
    "end": "486160"
  },
  {
    "text": "you can see here that the controller has",
    "start": "486160",
    "end": "488000"
  },
  {
    "text": "also assigned these segments to the four",
    "start": "488000",
    "end": "490840"
  },
  {
    "text": "servers it will use",
    "start": "490840",
    "end": "492960"
  },
  {
    "text": "apache helix to write this ideal state",
    "start": "492960",
    "end": "495840"
  },
  {
    "text": "into the zookeeper",
    "start": "495840",
    "end": "497520"
  },
  {
    "text": "at which point the four servers will",
    "start": "497520",
    "end": "499440"
  },
  {
    "text": "start",
    "start": "499440",
    "end": "500639"
  },
  {
    "text": "reading from kafka for the corresponding",
    "start": "500639",
    "end": "503599"
  },
  {
    "text": "partition",
    "start": "503599",
    "end": "504240"
  },
  {
    "text": "and creating a local segment",
    "start": "504240",
    "end": "507360"
  },
  {
    "text": "at some point the segment will be will",
    "start": "507360",
    "end": "509440"
  },
  {
    "text": "be complete",
    "start": "509440",
    "end": "511120"
  },
  {
    "text": "and then the controller will create the",
    "start": "511120",
    "end": "512640"
  },
  {
    "text": "next set of segments and so on",
    "start": "512640",
    "end": "516640"
  },
  {
    "text": "now with any good distributed system we",
    "start": "516640",
    "end": "518479"
  },
  {
    "text": "want to make sure our data",
    "start": "518479",
    "end": "520159"
  },
  {
    "text": "is replicated so let's set that up",
    "start": "520159",
    "end": "523360"
  },
  {
    "text": "let's configure our table with a",
    "start": "523360",
    "end": "524880"
  },
  {
    "text": "replication factor of 2.",
    "start": "524880",
    "end": "526720"
  },
  {
    "text": "the controller will read this config",
    "start": "526720",
    "end": "529839"
  },
  {
    "text": "and make sure that every single segment",
    "start": "529839",
    "end": "532880"
  },
  {
    "text": "is replicated on two distinct servers",
    "start": "532880",
    "end": "536800"
  },
  {
    "text": "as shown here so at this point data is",
    "start": "536800",
    "end": "540399"
  },
  {
    "text": "flowing",
    "start": "540399",
    "end": "541200"
  },
  {
    "text": "from kafka to all these servers",
    "start": "541200",
    "end": "544240"
  },
  {
    "text": "in parallel so now when the",
    "start": "544240",
    "end": "547519"
  },
  {
    "text": "you know broker receives a query",
    "start": "547519",
    "end": "551200"
  },
  {
    "text": "it will do a distributed scatter gather",
    "start": "551200",
    "end": "554720"
  },
  {
    "text": "and contact all the servers responsible",
    "start": "554720",
    "end": "557600"
  },
  {
    "text": "for this table",
    "start": "557600",
    "end": "560160"
  },
  {
    "text": "what it effectively does is to pass on",
    "start": "560160",
    "end": "562240"
  },
  {
    "text": "this query to each",
    "start": "562240",
    "end": "563600"
  },
  {
    "text": "such server each server will then",
    "start": "563600",
    "end": "566080"
  },
  {
    "text": "locally",
    "start": "566080",
    "end": "566800"
  },
  {
    "text": "execute this query for the corresponding",
    "start": "566800",
    "end": "569120"
  },
  {
    "text": "segments from that table",
    "start": "569120",
    "end": "571200"
  },
  {
    "text": "and return an intermediate response to",
    "start": "571200",
    "end": "573200"
  },
  {
    "text": "the broker",
    "start": "573200",
    "end": "574800"
  },
  {
    "text": "the broker will do a final aggregation",
    "start": "574800",
    "end": "577120"
  },
  {
    "text": "and then return the response back to the",
    "start": "577120",
    "end": "579120"
  },
  {
    "text": "back to the user so you can see that",
    "start": "579120",
    "end": "582160"
  },
  {
    "text": "this this system there's a good scale",
    "start": "582160",
    "end": "584480"
  },
  {
    "text": "out design",
    "start": "584480",
    "end": "585279"
  },
  {
    "text": "adopted by pino if you're ever running",
    "start": "585279",
    "end": "587839"
  },
  {
    "text": "out of capacity or you want more",
    "start": "587839",
    "end": "589519"
  },
  {
    "text": "throughput",
    "start": "589519",
    "end": "590080"
  },
  {
    "text": "from your system all you need to do is",
    "start": "590080",
    "end": "592320"
  },
  {
    "text": "just add more machines",
    "start": "592320",
    "end": "594480"
  },
  {
    "text": "the controller will then allocate new",
    "start": "594480",
    "end": "596720"
  },
  {
    "text": "segments onto the new machines",
    "start": "596720",
    "end": "600000"
  },
  {
    "text": "and the broker will automatically",
    "start": "600000",
    "end": "601839"
  },
  {
    "text": "discover these new segments",
    "start": "601839",
    "end": "605839"
  },
  {
    "start": "605000",
    "end": "771000"
  },
  {
    "text": "so as promised let's take a little bit",
    "start": "606640",
    "end": "608959"
  },
  {
    "text": "deeper look into",
    "start": "608959",
    "end": "610079"
  },
  {
    "text": "our pinot segment which is really the",
    "start": "610079",
    "end": "612560"
  },
  {
    "text": "secret sauce behind",
    "start": "612560",
    "end": "614240"
  },
  {
    "text": "the low latency aspect of pinot",
    "start": "614240",
    "end": "618560"
  },
  {
    "text": "as i mentioned before a segment is a",
    "start": "618560",
    "end": "620800"
  },
  {
    "text": "chunk or subset of the data",
    "start": "620800",
    "end": "623360"
  },
  {
    "text": "so let's assume this is the the figure",
    "start": "623360",
    "end": "625839"
  },
  {
    "text": "on the left is a raw data",
    "start": "625839",
    "end": "627440"
  },
  {
    "text": "some number of rows of raw data which",
    "start": "627440",
    "end": "630000"
  },
  {
    "text": "needs to be converted",
    "start": "630000",
    "end": "631519"
  },
  {
    "text": "into one segment internally",
    "start": "631519",
    "end": "635360"
  },
  {
    "text": "the segment will organize this data in a",
    "start": "635360",
    "end": "638320"
  },
  {
    "text": "column format",
    "start": "638320",
    "end": "640160"
  },
  {
    "text": "which means all the the country data",
    "start": "640160",
    "end": "643120"
  },
  {
    "text": "will be grouped together",
    "start": "643120",
    "end": "644959"
  },
  {
    "text": "all browser data will be grouped",
    "start": "644959",
    "end": "646399"
  },
  {
    "text": "together and so on",
    "start": "646399",
    "end": "648720"
  },
  {
    "text": "as many of you might know already this",
    "start": "648720",
    "end": "650720"
  },
  {
    "text": "is great for executing",
    "start": "650720",
    "end": "653120"
  },
  {
    "text": "analytical queries for example if you",
    "start": "653120",
    "end": "656160"
  },
  {
    "text": "get a simple query something like",
    "start": "656160",
    "end": "658800"
  },
  {
    "text": "count star where the country is u.s",
    "start": "658800",
    "end": "662000"
  },
  {
    "text": "all i need to do is process this one",
    "start": "662000",
    "end": "664640"
  },
  {
    "text": "column",
    "start": "664640",
    "end": "665680"
  },
  {
    "text": "instead of all the rows from from the",
    "start": "665680",
    "end": "667760"
  },
  {
    "text": "team from the second",
    "start": "667760",
    "end": "670480"
  },
  {
    "text": "this obviously leads to a good speed up",
    "start": "670480",
    "end": "673600"
  },
  {
    "text": "and low latency but what's more is",
    "start": "673600",
    "end": "676640"
  },
  {
    "text": "pino allows us to add",
    "start": "676640",
    "end": "679680"
  },
  {
    "text": "a variety of indexes on any of these",
    "start": "679680",
    "end": "682560"
  },
  {
    "text": "dimensions",
    "start": "682560",
    "end": "684320"
  },
  {
    "text": "for example i can add an inverted index",
    "start": "684320",
    "end": "687279"
  },
  {
    "text": "on the country in dimension",
    "start": "687279",
    "end": "689680"
  },
  {
    "text": "so now instead of scanning the country",
    "start": "689680",
    "end": "692399"
  },
  {
    "text": "column",
    "start": "692399",
    "end": "693440"
  },
  {
    "text": "i can just look up um the in the exact",
    "start": "693440",
    "end": "696800"
  },
  {
    "text": "entries",
    "start": "696800",
    "end": "698000"
  },
  {
    "text": "corresponding to us and get an answer in",
    "start": "698000",
    "end": "701680"
  },
  {
    "text": "a very fast manner",
    "start": "701680",
    "end": "704079"
  },
  {
    "text": "similarly i can add a sorted index",
    "start": "704079",
    "end": "707279"
  },
  {
    "text": "on the country column or even a",
    "start": "707279",
    "end": "710320"
  },
  {
    "text": "star tree index star tree is a special",
    "start": "710320",
    "end": "714320"
  },
  {
    "text": "sort of an index which allows us to",
    "start": "714320",
    "end": "716320"
  },
  {
    "text": "maintain",
    "start": "716320",
    "end": "717440"
  },
  {
    "text": "pre-aggregated values for some",
    "start": "717440",
    "end": "719920"
  },
  {
    "text": "combination of dimensions",
    "start": "719920",
    "end": "721680"
  },
  {
    "text": "for example country and browser so for",
    "start": "721680",
    "end": "724720"
  },
  {
    "text": "this particular query",
    "start": "724720",
    "end": "726480"
  },
  {
    "text": "we can get the result with using with a",
    "start": "726480",
    "end": "729519"
  },
  {
    "text": "single lookup",
    "start": "729519",
    "end": "730720"
  },
  {
    "text": "almost like a key value store which is",
    "start": "730720",
    "end": "732959"
  },
  {
    "text": "incredibly fast",
    "start": "732959",
    "end": "735680"
  },
  {
    "text": "so these are just some of the examples",
    "start": "735680",
    "end": "737760"
  },
  {
    "text": "of indexing techniques",
    "start": "737760",
    "end": "740000"
  },
  {
    "text": "but there are many others that you can",
    "start": "740000",
    "end": "741360"
  },
  {
    "text": "use for example range index text index",
    "start": "741360",
    "end": "745440"
  },
  {
    "text": "geospatial index bloom filters and so on",
    "start": "745440",
    "end": "748560"
  },
  {
    "text": "we're constantly adding these things",
    "start": "748560",
    "end": "752560"
  },
  {
    "text": "so all these optimizations",
    "start": "752560",
    "end": "755760"
  },
  {
    "text": "allow us to execute queries on one",
    "start": "755760",
    "end": "758240"
  },
  {
    "text": "segment",
    "start": "758240",
    "end": "758800"
  },
  {
    "text": "in a really fast manner which in turn",
    "start": "758800",
    "end": "761279"
  },
  {
    "text": "lowers the poor server latency",
    "start": "761279",
    "end": "764000"
  },
  {
    "text": "and does leads to low latency across the",
    "start": "764000",
    "end": "767519"
  },
  {
    "text": "across the cluster",
    "start": "767519",
    "end": "770399"
  },
  {
    "start": "771000",
    "end": "883000"
  },
  {
    "text": "so let's shift gears a little bit um and",
    "start": "771360",
    "end": "774480"
  },
  {
    "text": "discuss things",
    "start": "774480",
    "end": "775440"
  },
  {
    "text": "uh when they go wrong especially",
    "start": "775440",
    "end": "779200"
  },
  {
    "text": "with large-scale deployments of pino",
    "start": "779200",
    "end": "783040"
  },
  {
    "text": "so for most pinot deployments things",
    "start": "783040",
    "end": "784639"
  },
  {
    "text": "will be running fine out of the box",
    "start": "784639",
    "end": "787040"
  },
  {
    "text": "but in large scale cases your latency",
    "start": "787040",
    "end": "790000"
  },
  {
    "text": "graph might look something like this",
    "start": "790000",
    "end": "792560"
  },
  {
    "text": "as you can see your 50th percentile",
    "start": "792560",
    "end": "794720"
  },
  {
    "text": "latencies",
    "start": "794720",
    "end": "795600"
  },
  {
    "text": "are actually doing fine somewhere",
    "start": "795600",
    "end": "798160"
  },
  {
    "text": "between 50 to 100 milliseconds",
    "start": "798160",
    "end": "801200"
  },
  {
    "text": "but your p99 latency is actually quite",
    "start": "801200",
    "end": "803519"
  },
  {
    "text": "bad",
    "start": "803519",
    "end": "804720"
  },
  {
    "text": "and in fact at some point it starts",
    "start": "804720",
    "end": "807040"
  },
  {
    "text": "timing out at 10 seconds",
    "start": "807040",
    "end": "810000"
  },
  {
    "text": "so let's take a look you know why this",
    "start": "810000",
    "end": "811920"
  },
  {
    "text": "could happen",
    "start": "811920",
    "end": "813600"
  },
  {
    "text": "so as i mentioned with large use cases",
    "start": "813600",
    "end": "817200"
  },
  {
    "text": "you might end up provisioning a lot of",
    "start": "817200",
    "end": "819519"
  },
  {
    "text": "pinot servers",
    "start": "819519",
    "end": "820800"
  },
  {
    "text": "for example in this case 1000 servers",
    "start": "820800",
    "end": "824079"
  },
  {
    "text": "and every now and then one of these",
    "start": "824079",
    "end": "826160"
  },
  {
    "text": "servers",
    "start": "826160",
    "end": "827120"
  },
  {
    "text": "might start executing might slow down",
    "start": "827120",
    "end": "831440"
  },
  {
    "text": "this could be because it's going",
    "start": "831440",
    "end": "834079"
  },
  {
    "text": "undergoing some memory pressure",
    "start": "834079",
    "end": "836240"
  },
  {
    "text": "is going through garbage collection or",
    "start": "836240",
    "end": "838560"
  },
  {
    "text": "has some intermittent cpu spikes",
    "start": "838560",
    "end": "841519"
  },
  {
    "text": "so this ends up lowering",
    "start": "841519",
    "end": "844639"
  },
  {
    "text": "the overall latency across the cluster",
    "start": "844639",
    "end": "848320"
  },
  {
    "text": "more the number of servers higher the",
    "start": "848320",
    "end": "850079"
  },
  {
    "text": "probability of hitting such a server",
    "start": "850079",
    "end": "852639"
  },
  {
    "text": "and does it might increase your tail",
    "start": "852639",
    "end": "856000"
  },
  {
    "text": "end latencies",
    "start": "856000",
    "end": "858880"
  },
  {
    "text": "in a similar vein you might end up with",
    "start": "860480",
    "end": "863519"
  },
  {
    "text": "a lot of",
    "start": "863519",
    "end": "864880"
  },
  {
    "text": "segments per server so now",
    "start": "864880",
    "end": "868000"
  },
  {
    "text": "each server has to do a lot of work to",
    "start": "868000",
    "end": "870720"
  },
  {
    "text": "execute the local query",
    "start": "870720",
    "end": "873360"
  },
  {
    "text": "and and please note in this case",
    "start": "873360",
    "end": "876639"
  },
  {
    "text": "it will not only increase the p99",
    "start": "876639",
    "end": "879040"
  },
  {
    "text": "latency but latencies across the board",
    "start": "879040",
    "end": "883199"
  },
  {
    "start": "883000",
    "end": "917000"
  },
  {
    "text": "so what can we do about this the general",
    "start": "883360",
    "end": "886800"
  },
  {
    "text": "approach",
    "start": "886800",
    "end": "887440"
  },
  {
    "text": "for getting more predictable latency is",
    "start": "887440",
    "end": "889920"
  },
  {
    "text": "to limit",
    "start": "889920",
    "end": "890639"
  },
  {
    "text": "the query span or to limit the number of",
    "start": "890639",
    "end": "893360"
  },
  {
    "text": "things we need to process",
    "start": "893360",
    "end": "894800"
  },
  {
    "text": "to execute the query so the two",
    "start": "894800",
    "end": "898399"
  },
  {
    "text": "approaches we have here is reduce the",
    "start": "898399",
    "end": "900720"
  },
  {
    "text": "number of servers processed",
    "start": "900720",
    "end": "902320"
  },
  {
    "text": "to execute a query uh and and",
    "start": "902320",
    "end": "905519"
  },
  {
    "text": "number two is reduce the number of",
    "start": "905519",
    "end": "907279"
  },
  {
    "text": "segments processed",
    "start": "907279",
    "end": "908639"
  },
  {
    "text": "uh for doing this so let's look at this",
    "start": "908639",
    "end": "912000"
  },
  {
    "text": "one by one and please keep in mind these",
    "start": "912000",
    "end": "914560"
  },
  {
    "text": "approaches are complementary to each",
    "start": "914560",
    "end": "916160"
  },
  {
    "text": "other",
    "start": "916160",
    "end": "918160"
  },
  {
    "start": "917000",
    "end": "984000"
  },
  {
    "text": "so for the first one pino provides a",
    "start": "918160",
    "end": "920720"
  },
  {
    "text": "mechanism",
    "start": "920720",
    "end": "921519"
  },
  {
    "text": "known as replica group a replica group",
    "start": "921519",
    "end": "925040"
  },
  {
    "text": "refers to a",
    "start": "925040",
    "end": "926000"
  },
  {
    "text": "subset of servers which contain a",
    "start": "926000",
    "end": "928800"
  },
  {
    "text": "complete copy",
    "start": "928800",
    "end": "929920"
  },
  {
    "text": "of all the segments for this table for a",
    "start": "929920",
    "end": "932720"
  },
  {
    "text": "given table",
    "start": "932720",
    "end": "934560"
  },
  {
    "text": "so for example we can tune we can",
    "start": "934560",
    "end": "936639"
  },
  {
    "text": "configure this in our table config as",
    "start": "936639",
    "end": "938639"
  },
  {
    "text": "shown on the top right",
    "start": "938639",
    "end": "940880"
  },
  {
    "text": "here we have two replica groups with two",
    "start": "940880",
    "end": "944160"
  },
  {
    "text": "server instances per group",
    "start": "944160",
    "end": "947199"
  },
  {
    "text": "when the pino controller reads this",
    "start": "947199",
    "end": "949199"
  },
  {
    "text": "config",
    "start": "949199",
    "end": "950240"
  },
  {
    "text": "it will make sure that each group has",
    "start": "950240",
    "end": "953120"
  },
  {
    "text": "all the segments",
    "start": "953120",
    "end": "954320"
  },
  {
    "text": "for the table so now",
    "start": "954320",
    "end": "957360"
  },
  {
    "text": "with this setup when the pinot broker",
    "start": "957360",
    "end": "959120"
  },
  {
    "text": "receives a query",
    "start": "959120",
    "end": "960800"
  },
  {
    "text": "it needs to query it needs to send the",
    "start": "960800",
    "end": "963120"
  },
  {
    "text": "query to only",
    "start": "963120",
    "end": "964480"
  },
  {
    "text": "one of these two groups to get a final",
    "start": "964480",
    "end": "966959"
  },
  {
    "text": "result",
    "start": "966959",
    "end": "968959"
  },
  {
    "text": "as you can as you can as you notice",
    "start": "968959",
    "end": "972800"
  },
  {
    "text": "we have effectively reduced the number",
    "start": "972800",
    "end": "975600"
  },
  {
    "text": "of servers to be processed by 50",
    "start": "975600",
    "end": "978720"
  },
  {
    "text": "and this will drastically help in",
    "start": "978720",
    "end": "981759"
  },
  {
    "text": "improving your tailoring latencies",
    "start": "981759",
    "end": "985279"
  },
  {
    "start": "984000",
    "end": "1061000"
  },
  {
    "text": "for approach to where we want to",
    "start": "985759",
    "end": "987600"
  },
  {
    "text": "minimize the number of segments",
    "start": "987600",
    "end": "989199"
  },
  {
    "text": "processed",
    "start": "989199",
    "end": "990240"
  },
  {
    "text": "for executing query we rely on data",
    "start": "990240",
    "end": "992800"
  },
  {
    "text": "partitioning",
    "start": "992800",
    "end": "994320"
  },
  {
    "text": "and in this case we need to pre-process",
    "start": "994320",
    "end": "996320"
  },
  {
    "text": "the data before it can be",
    "start": "996320",
    "end": "998240"
  },
  {
    "text": "ingested into pinot so let's assume we",
    "start": "998240",
    "end": "1001360"
  },
  {
    "text": "want to set up a pinot table",
    "start": "1001360",
    "end": "1003120"
  },
  {
    "text": "and we're going to execute a lot of",
    "start": "1003120",
    "end": "1005600"
  },
  {
    "text": "queries",
    "start": "1005600",
    "end": "1006480"
  },
  {
    "text": "where we filter on the client id",
    "start": "1006480",
    "end": "1008839"
  },
  {
    "text": "dimension",
    "start": "1008839",
    "end": "1010160"
  },
  {
    "text": "as an example shown here in this case we",
    "start": "1010160",
    "end": "1013680"
  },
  {
    "text": "can pre-process the raw data",
    "start": "1013680",
    "end": "1015680"
  },
  {
    "text": "by using a partition function on client",
    "start": "1015680",
    "end": "1018880"
  },
  {
    "text": "id",
    "start": "1018880",
    "end": "1019680"
  },
  {
    "text": "for example you can do client id modulo",
    "start": "1019680",
    "end": "1022160"
  },
  {
    "text": "4.",
    "start": "1022160",
    "end": "1023920"
  },
  {
    "text": "we are effectively re-sharding the raw",
    "start": "1023920",
    "end": "1026160"
  },
  {
    "text": "data",
    "start": "1026160",
    "end": "1026959"
  },
  {
    "text": "into four partitions for each of these",
    "start": "1026959",
    "end": "1029120"
  },
  {
    "text": "sources",
    "start": "1029120",
    "end": "1030480"
  },
  {
    "text": "and this can be done with your standard",
    "start": "1030480",
    "end": "1032720"
  },
  {
    "text": "tools such as",
    "start": "1032720",
    "end": "1034240"
  },
  {
    "text": "blink or spark or whatever you have in",
    "start": "1034240",
    "end": "1036798"
  },
  {
    "text": "your stack",
    "start": "1036799",
    "end": "1038558"
  },
  {
    "text": "at this point this shorted data can be",
    "start": "1038559",
    "end": "1041360"
  },
  {
    "text": "ingested",
    "start": "1041360",
    "end": "1042160"
  },
  {
    "text": "in pino and when we set up the table",
    "start": "1042160",
    "end": "1045199"
  },
  {
    "text": "we can specify the same partitioning",
    "start": "1045199",
    "end": "1047520"
  },
  {
    "text": "function",
    "start": "1047520",
    "end": "1048558"
  },
  {
    "text": "so pino is aware of this strategy",
    "start": "1048559",
    "end": "1053120"
  },
  {
    "text": "with this config pino will then track",
    "start": "1053120",
    "end": "1056000"
  },
  {
    "text": "for every single segment",
    "start": "1056000",
    "end": "1057919"
  },
  {
    "text": "what partition it belongs to",
    "start": "1057919",
    "end": "1061440"
  },
  {
    "start": "1061000",
    "end": "1112000"
  },
  {
    "text": "so now let's take a look how this helps",
    "start": "1061440",
    "end": "1063440"
  },
  {
    "text": "on the query side",
    "start": "1063440",
    "end": "1065360"
  },
  {
    "text": "uh so when when the peanut broker",
    "start": "1065360",
    "end": "1067360"
  },
  {
    "text": "receives this query",
    "start": "1067360",
    "end": "1068640"
  },
  {
    "text": "it will retrieve the lookup value",
    "start": "1068640",
    "end": "1071679"
  },
  {
    "text": "and apply the same partition function",
    "start": "1071679",
    "end": "1074559"
  },
  {
    "text": "and determine that",
    "start": "1074559",
    "end": "1076240"
  },
  {
    "text": "i need to query the partition one",
    "start": "1076240",
    "end": "1080640"
  },
  {
    "text": "in this case let's assume partition one",
    "start": "1080640",
    "end": "1083600"
  },
  {
    "text": "is mapped to segment one",
    "start": "1083600",
    "end": "1086240"
  },
  {
    "text": "therefore the the broker only needs to",
    "start": "1086240",
    "end": "1088559"
  },
  {
    "text": "query",
    "start": "1088559",
    "end": "1089520"
  },
  {
    "text": "one of these two servers to compute the",
    "start": "1089520",
    "end": "1091840"
  },
  {
    "text": "final result",
    "start": "1091840",
    "end": "1093760"
  },
  {
    "text": "so with four partitions we've",
    "start": "1093760",
    "end": "1095039"
  },
  {
    "text": "effectively reduced uh",
    "start": "1095039",
    "end": "1096799"
  },
  {
    "text": "the query span in terms of segments by",
    "start": "1096799",
    "end": "1099280"
  },
  {
    "text": "75 percent",
    "start": "1099280",
    "end": "1100480"
  },
  {
    "text": "which is pretty big and it",
    "start": "1100480",
    "end": "1103840"
  },
  {
    "text": "this optimization helps greatly in",
    "start": "1103840",
    "end": "1106160"
  },
  {
    "text": "reducing latencies across the board",
    "start": "1106160",
    "end": "1108880"
  },
  {
    "text": "especially for large data sets",
    "start": "1108880",
    "end": "1112640"
  },
  {
    "start": "1112000",
    "end": "1165000"
  },
  {
    "text": "to wrap up in this talk we saw",
    "start": "1113039",
    "end": "1116480"
  },
  {
    "text": "the high-level architecture and the",
    "start": "1116480",
    "end": "1118080"
  },
  {
    "text": "scale-out design of pino",
    "start": "1118080",
    "end": "1120960"
  },
  {
    "text": "we looked at the segment architecture",
    "start": "1120960",
    "end": "1124160"
  },
  {
    "text": "and the rich indexing support",
    "start": "1124160",
    "end": "1125679"
  },
  {
    "text": "which helps in getting low latency in",
    "start": "1125679",
    "end": "1128400"
  },
  {
    "text": "addition to high throughput",
    "start": "1128400",
    "end": "1130559"
  },
  {
    "text": "and we also saw some powerful knobs that",
    "start": "1130559",
    "end": "1133280"
  },
  {
    "text": "pino",
    "start": "1133280",
    "end": "1134080"
  },
  {
    "text": "provides in order to optimize data",
    "start": "1134080",
    "end": "1136400"
  },
  {
    "text": "layout and",
    "start": "1136400",
    "end": "1137440"
  },
  {
    "text": "therefore get more predictable latency",
    "start": "1137440",
    "end": "1141280"
  },
  {
    "text": "uh if you want to know more please visit",
    "start": "1141280",
    "end": "1143039"
  },
  {
    "text": "our official page at pnot.apache.org",
    "start": "1143039",
    "end": "1146640"
  },
  {
    "text": "and this is our twitter official twitter",
    "start": "1146640",
    "end": "1148320"
  },
  {
    "text": "handle i've also",
    "start": "1148320",
    "end": "1150240"
  },
  {
    "text": "given the link for our slack channel",
    "start": "1150240",
    "end": "1153039"
  },
  {
    "text": "where you'll find most of us",
    "start": "1153039",
    "end": "1154480"
  },
  {
    "text": "and we can answer questions online with",
    "start": "1154480",
    "end": "1157679"
  },
  {
    "text": "that",
    "start": "1157679",
    "end": "1158000"
  },
  {
    "text": "i'll conclude uh thanks a lot for having",
    "start": "1158000",
    "end": "1160320"
  },
  {
    "text": "me and i look forward to the q a",
    "start": "1160320",
    "end": "1162799"
  },
  {
    "text": "thank you",
    "start": "1162799",
    "end": "1165840"
  }
]