[
  {
    "text": "I think we're all friends here right so I'm just going to be honest I think building front end JavaScript applications can be pretty bloody hard",
    "start": "8760",
    "end": "15639"
  },
  {
    "text": "and there are a bunch of factors that contribute to this and part of it is that they're just these giant balls of",
    "start": "15639",
    "end": "20760"
  },
  {
    "text": "state and events right so I thought it would be really interesting to take a bit of a step back and I guess play The",
    "start": "20760",
    "end": "27720"
  },
  {
    "text": "Devil's Advocate and take a critical look at some of the patterns that we're using in thick client JavaScript",
    "start": "27720",
    "end": "33760"
  },
  {
    "text": "applications and see if they're giving us ways of managing State and events in a scalable and maintainable fashion and",
    "start": "33760",
    "end": "41120"
  },
  {
    "text": "then we can take a look at some of the tactics that we can use to help us better Embrace State and events without",
    "start": "41120",
    "end": "46760"
  },
  {
    "text": "sacrificing Clarity in our architecture but first I'll just",
    "start": "46760",
    "end": "51840"
  },
  {
    "text": "introduce myself this is a llama it's not me um I'm Amy I've come over from New Zealand and I live in a town called",
    "start": "51840",
    "end": "58320"
  },
  {
    "text": "Wellington so if you ever ever in New Zealand and you want to hang out you can give me a shout on the Twitter I'm a meep on Twitter um and pretty much",
    "start": "58320",
    "end": "65320"
  },
  {
    "text": "everywhere else on the internet and I work at GitHub so I've",
    "start": "65320",
    "end": "71400"
  },
  {
    "text": "got two confessions to make before I get started the first is that last week I spent the week hanging out with all the",
    "start": "71400",
    "end": "77840"
  },
  {
    "text": "gith hubbers from around the world at our company meeting and so subsequently I have the summit plague which is why my",
    "start": "77840",
    "end": "83119"
  },
  {
    "text": "voice sounds like this so please be with me I might need to drink a lot of water um and the second conf is that my",
    "start": "83119",
    "end": "90920"
  },
  {
    "text": "job at GitHub has nothing to do with writing JavaScript please don't leave please don't leave hear me out I spend",
    "start": "90920",
    "end": "97600"
  },
  {
    "text": "my day hacking on uh Native applications so I work on the team that builds GitHub for mac and GitHub for Windows and I'm a",
    "start": "97600",
    "end": "104479"
  },
  {
    "text": "Windows developer so please again stay bear with me bear with me it's fine I",
    "start": "104479",
    "end": "109640"
  },
  {
    "text": "write I write lots of C in my day job but before I was at before seop is actually a really great language before",
    "start": "109640",
    "end": "115799"
  },
  {
    "text": "I was that was the last before I was at GitHub I was writing",
    "start": "115799",
    "end": "122520"
  },
  {
    "text": "lots of JavaScript I was building thick client JavaScript applications and the thing that's really interesting about",
    "start": "122520",
    "end": "128280"
  },
  {
    "text": "desktop application architecture and clients side JavaScript application architecture is they have quite a lot in",
    "start": "128280",
    "end": "133400"
  },
  {
    "text": "common right and the thing that times them together is the amount of state that we're concerned with so JavaScript",
    "start": "133400",
    "end": "140440"
  },
  {
    "text": "applications contain heaps of different kinds of State we've got the state of our core entities like the models uh and",
    "start": "140440",
    "end": "147280"
  },
  {
    "text": "that often needs to be kept in sync with the state that's on the server we've got the state of the address bar we've got",
    "start": "147280",
    "end": "153440"
  },
  {
    "text": "the state of all of the different views that are being presented at any given point in time and then we've got to manage the overall state of the",
    "start": "153440",
    "end": "160000"
  },
  {
    "text": "application so there's a lot of state to think about so State on its own isn't really",
    "start": "160000",
    "end": "167680"
  },
  {
    "text": "that interesting what makes an application interesting is if we're able to interact with that state right and",
    "start": "167680",
    "end": "173200"
  },
  {
    "text": "force new states on the application and we do this via events we force State",
    "start": "173200",
    "end": "178760"
  },
  {
    "text": "transitions via events so what I mean by state transition is think of a form",
    "start": "178760",
    "end": "184879"
  },
  {
    "text": "right and we've got some data being input into the form and we click a save button and our model transitions into a",
    "start": "184879",
    "end": "190840"
  },
  {
    "text": "new state perhaps an invalid State and there's so many different ways",
    "start": "190840",
    "end": "196560"
  },
  {
    "text": "that we can make interesting things happen in our application or transition state we've got Dom events things like",
    "start": "196560",
    "end": "203200"
  },
  {
    "text": "click drag key up we've got model events so in Frameworks like backbone we have an on change function we register",
    "start": "203200",
    "end": "210439"
  },
  {
    "text": "callbacks to that so we get notified about interesting things that happen on the model and we've got routing events and",
    "start": "210439",
    "end": "218159"
  },
  {
    "text": "those are normally fired when the address Mar is going to change so and that's normally going to kick off a series of transitions right the models",
    "start": "218159",
    "end": "223920"
  },
  {
    "text": "are going to change the views on the screen are going to change there's a whole bunch of state that's going to transition at that",
    "start": "223920",
    "end": "230400"
  },
  {
    "text": "point so we've got lots of state and we've got lots of events and they all need to be managed and as complexity",
    "start": "230400",
    "end": "238079"
  },
  {
    "text": "grows like our code base gets Bigg bigger we get more developers on the team new features are being added if",
    "start": "238079",
    "end": "243760"
  },
  {
    "text": "we're not careful we can end up in the corner crying alone feeling really sorry for ourselves and questioning our life",
    "start": "243760",
    "end": "249319"
  },
  {
    "text": "decisions right and we don't want that that sucks so we've got to have a plan",
    "start": "249319",
    "end": "255200"
  },
  {
    "text": "so I thought we just take a look at a this is a somewhat contrived example but you can imagine this kind of architecture being extrapolated out to a",
    "start": "255200",
    "end": "261639"
  },
  {
    "text": "really large code base and hopefully you'll be able to see the reasons why this isn't so great so here we've got a",
    "start": "261639",
    "end": "267720"
  },
  {
    "text": "view which contains some information about um a party we've got some party animals party dog is getting down and we",
    "start": "267720",
    "end": "275080"
  },
  {
    "text": "also have an invitation list um and when the button is going to be clicked something interesting is going to happen",
    "start": "275080",
    "end": "280919"
  },
  {
    "text": "we're going to invite something to a new animal to the party and boom we're clicked and we're going to do a bunch of",
    "start": "280919",
    "end": "287199"
  },
  {
    "text": "semi- terrible things here we're going to reach into the Dom using jQuery to query the current state of the party",
    "start": "287199",
    "end": "294600"
  },
  {
    "text": "which is being stored in the Dom which is kind of weird we're going to query that current state and we're going to",
    "start": "294600",
    "end": "299639"
  },
  {
    "text": "sorry the invitation list we're going to pull that out we're going to append uh that animal to the party and we're going",
    "start": "299639",
    "end": "304800"
  },
  {
    "text": "to build up a new view and then write that back to the Dom so we've conflated a whole bunch of",
    "start": "304800",
    "end": "311280"
  },
  {
    "text": "ideas here we've conflated models with views we've conflated views with State",
    "start": "311280",
    "end": "316800"
  },
  {
    "text": "and the view is in charge of transitioning the state into new States via events right so this feels wrong for",
    "start": "316800",
    "end": "323240"
  },
  {
    "text": "a whole lot of reasons and it's easy to see that when State and State transition",
    "start": "323240",
    "end": "328319"
  },
  {
    "text": "gets intertwined like this at scale we're going to end up with an unmaintainable code base a brutal code",
    "start": "328319",
    "end": "334360"
  },
  {
    "text": "base and a hardto test code base so the management of state and its transition got out of control so basically the more",
    "start": "334360",
    "end": "342960"
  },
  {
    "text": "of it you have the harder it all becomes to manage you've really got to have a",
    "start": "342960",
    "end": "349000"
  },
  {
    "text": "plan hooray this is where design pattern come in right they come in to save our sanity to",
    "start": "349600",
    "end": "356919"
  },
  {
    "text": "prevent us from being that developer in the corner feeling bad about our life decisions and the thing that I really",
    "start": "356919",
    "end": "362440"
  },
  {
    "text": "love about software is that we're able to take solutions from wildly different contexts and apply them in a new",
    "start": "362440",
    "end": "367800"
  },
  {
    "text": "environment to help us solve new problems right so for example the problem of separating View and data and",
    "start": "367800",
    "end": "374720"
  },
  {
    "text": "events and because we can take uh ideas and inspiration from other places design",
    "start": "374720",
    "end": "380319"
  },
  {
    "text": "patents tend to evolve in a really organic fashion the spread of design patterns is really similar to the spread",
    "start": "380319",
    "end": "387080"
  },
  {
    "text": "of memes on the internet actually the word meme it means anything that's spread or inherited in a non- gentic",
    "start": "387080",
    "end": "393800"
  },
  {
    "text": "fashion right so meme just means idea any idea that's spread from one place to the next and it sticks because it's",
    "start": "393800",
    "end": "400080"
  },
  {
    "text": "funny or it became or contains the solution for a really tricky problem and",
    "start": "400080",
    "end": "405120"
  },
  {
    "text": "if you take the MV Star Family of patterns so like MVC which is a common one that we see those presentation",
    "start": "405120",
    "end": "412000"
  },
  {
    "text": "patterns they actually originated out of applications built for the desktop right I'm talking about the small talk days",
    "start": "412000",
    "end": "418479"
  },
  {
    "text": "and over time people saw the value of those patterns and web and web server programing became really really popular",
    "start": "418479",
    "end": "425319"
  },
  {
    "text": "and we started to apply those patterns there and now we're back to applying those patterns on the browser in the",
    "start": "425319",
    "end": "432479"
  },
  {
    "text": "client with JavaScript and I'm deliberately using the phrase MV star",
    "start": "432479",
    "end": "437599"
  },
  {
    "text": "here rather than MVC specifically because there are a whole lot of flavors there's model view presenter model view",
    "start": "437599",
    "end": "443080"
  },
  {
    "text": "view model and they're all at at heart they're all trying to achieve exactly the same thing they're all trying to",
    "start": "443080",
    "end": "449360"
  },
  {
    "text": "separate our concerns our data from our views our state from our transition and",
    "start": "449360",
    "end": "454879"
  },
  {
    "text": "it's this very fact alone that's going to help us bring structure to our",
    "start": "454879",
    "end": "460400"
  },
  {
    "text": "code so let's take a take a stock of the current state to play in the client",
    "start": "460400",
    "end": "466280"
  },
  {
    "text": "versus server world so we've got web server Frameworks",
    "start": "466280",
    "end": "472039"
  },
  {
    "text": "like rails right that are written in the MVC style and we've got these kickass",
    "start": "472039",
    "end": "477680"
  },
  {
    "text": "JavaScript applications which are written Frameworks that also claim to be implementing MVC what",
    "start": "477680",
    "end": "483840"
  },
  {
    "text": "gives well I really I'm not interested in turning this into a conversation of like who's doing MVC by the book right",
    "start": "483840",
    "end": "490440"
  },
  {
    "text": "that's not very interesting but I think what is interesting is to figure out what flavors of MVC and and how they",
    "start": "490440",
    "end": "497240"
  },
  {
    "text": "affect how we manage State and transition in each cases so which ideas can stick and which ones are causing us",
    "start": "497240",
    "end": "503960"
  },
  {
    "text": "too much pain and friction in a really event evented and stateful world like we see on the client",
    "start": "503960",
    "end": "511240"
  },
  {
    "text": "so let's take a step back and take a look at what's going on in the server hopefully this is going to be a bit of a reminder so I'll quick I'll just quickly",
    "start": "511440",
    "end": "518959"
  },
  {
    "text": "go through it so we've got our models they're the guts of your application right this is where all your domain logic is going to occur and then we have",
    "start": "518959",
    "end": "526080"
  },
  {
    "text": "the presentation of those models and that's typically in the form of a Json document or an HTML document that we're",
    "start": "526080",
    "end": "532959"
  },
  {
    "text": "returning and they are really representations of current state right you can think of them like a snapshot of",
    "start": "532959",
    "end": "539399"
  },
  {
    "text": "a model's current state and then we have our controllers and they're responsible for sending",
    "start": "539399",
    "end": "545480"
  },
  {
    "text": "commands down to the model maybe to query its current state or to update its current state and then it's going to",
    "start": "545480",
    "end": "551360"
  },
  {
    "text": "return a snapshot of that model's current state adjacent document or an HTML",
    "start": "551360",
    "end": "556800"
  },
  {
    "text": "document and the thing that ties them all together are our routers so they're responsible for incoming matching an",
    "start": "556800",
    "end": "563600"
  },
  {
    "text": "incoming web request and then routing that off to a designated controller and action and they normally do that by",
    "start": "563600",
    "end": "569320"
  },
  {
    "text": "matching the pattern of the URL in combination with the HTTP verb that's being",
    "start": "569320",
    "end": "574959"
  },
  {
    "text": "used so how does this all relate to how state is managed on the web",
    "start": "574959",
    "end": "580160"
  },
  {
    "text": "server well that's just it hopefully you don't have state on your web server right web applications that we're",
    "start": "580160",
    "end": "586079"
  },
  {
    "text": "building typically are stateless in nature and we do that for a whole bunch of reasons which mostly relate to",
    "start": "586079",
    "end": "591640"
  },
  {
    "text": "scalability right we want to be able to deploy our app across multiple front-end servers and have them communicate with a",
    "start": "591640",
    "end": "597240"
  },
  {
    "text": "backend server we want to be able to scale right right so we achieve the statelessness by persisting to a data",
    "start": "597240",
    "end": "602720"
  },
  {
    "text": "store of some kind and so in this environment where we're persisting state",
    "start": "602720",
    "end": "607959"
  },
  {
    "text": "to a data store we're able to address that state via HTTP so like we're able",
    "start": "607959",
    "end": "613160"
  },
  {
    "text": "to say something like HTTP get me all of the animals that are currently at the",
    "start": "613160",
    "end": "618720"
  },
  {
    "text": "party and what if we want to move into a new state what if we want to execute an event perhaps one of our animals is",
    "start": "618720",
    "end": "626040"
  },
  {
    "text": "behaving misbehaving we want to kick them out of the party well we can simulate a state transition across the",
    "start": "626040",
    "end": "632000"
  },
  {
    "text": "boundary by saying HTTP delete and the controller is going to execute that function and return a new snapshot of",
    "start": "632000",
    "end": "639360"
  },
  {
    "text": "the current state of the party so what we've done here is we've simulated a state transition across the HTTP",
    "start": "639360",
    "end": "647279"
  },
  {
    "text": "boundary so you might have something like this on the Sero we've got routes we're defining a route for get post and",
    "start": "647279",
    "end": "653079"
  },
  {
    "text": "delete on uh um wack party with a um optional parameter animal um and when",
    "start": "653079",
    "end": "659800"
  },
  {
    "text": "that is invoked we're going to invoke a controller so here is the git case we're going to take the incoming parameter",
    "start": "659800",
    "end": "665200"
  },
  {
    "text": "we're going to execute a search and we're going to return a snapshot of the current view with post we're going to do",
    "start": "665200",
    "end": "670720"
  },
  {
    "text": "something very similar except this time we're going to change the state of the model and return a new snapshot same",
    "start": "670720",
    "end": "676839"
  },
  {
    "text": "goes for delete so we've got a router that matches a pattern a controller with an",
    "start": "676839",
    "end": "682440"
  },
  {
    "text": "action and vote a model that may or may not be have it State transition and a snapshot of that model state",
    "start": "682440",
    "end": "690560"
  },
  {
    "text": "returned so because of the client server boundary all of our states and all of",
    "start": "690560",
    "end": "696040"
  },
  {
    "text": "our state transitions are necessarily addressable via HTTP right like we",
    "start": "696040",
    "end": "701200"
  },
  {
    "text": "wouldn't be able to change the state of the model without being able to address it and so the way that we use routers",
    "start": "701200",
    "end": "708600"
  },
  {
    "text": "and the way that MVC is designed on the server is that our architecture is very linear right the request comes in we do",
    "start": "708600",
    "end": "717000"
  },
  {
    "text": "something to it something may or may not happen and a and a snapshot as returned we go down the stack and up the",
    "start": "717000",
    "end": "724000"
  },
  {
    "text": "stack so the difference between how MVC is implemented on the server and what we",
    "start": "726120",
    "end": "732320"
  },
  {
    "text": "see on the client our stateful client is that on the server we're trying super hard to be stateless and on the client",
    "start": "732320",
    "end": "738680"
  },
  {
    "text": "we have all of this in memory ready to go so we keep a bunch of things in",
    "start": "738680",
    "end": "743800"
  },
  {
    "text": "memory on the client to help us form a really cohesive application we've got uh things like",
    "start": "743800",
    "end": "749680"
  },
  {
    "text": "um our models and that's usually coupled with that snapshot that comes back from the server but then we add an extra",
    "start": "749680",
    "end": "756000"
  },
  {
    "text": "layer of stuff on top of that validation security update functions the number of",
    "start": "756000",
    "end": "762040"
  },
  {
    "text": "possible states that our models can have on the server is larger than that that than we can have on this sorry the",
    "start": "762040",
    "end": "768320"
  },
  {
    "text": "number of states we can have on the client is larger than that we can have on the server we have our view state so we",
    "start": "768320",
    "end": "775560"
  },
  {
    "text": "might be presenting lots of different views at any given point in time and together all of those different",
    "start": "775560",
    "end": "780959"
  },
  {
    "text": "views Define an overall view State can we see um items in the menu",
    "start": "780959",
    "end": "786920"
  },
  {
    "text": "bar are we able to edit uh a view what's displayed in the main content",
    "start": "786920",
    "end": "792199"
  },
  {
    "text": "region all of this is adding complexity to the state space that we're managing and then we have things like",
    "start": "792199",
    "end": "799279"
  },
  {
    "text": "the overall application State like which modules and controllers are currently active which ones are not being used and",
    "start": "799279",
    "end": "805199"
  },
  {
    "text": "we need to dispose of free out memory to make sure we're writing a performant all of this different kinds of State",
    "start": "805199",
    "end": "811560"
  },
  {
    "text": "means that what we're doing is traversing around a very nonlinear State space right it's not that up the stack",
    "start": "811560",
    "end": "818639"
  },
  {
    "text": "down the stack as we saw on this on the server so the other thing that's",
    "start": "818639",
    "end": "824639"
  },
  {
    "text": "interesting about managing State on the client is that suddenly we're not having to emulate State transitions across the",
    "start": "824639",
    "end": "830480"
  },
  {
    "text": "boundary we can execute an event call a method a function whatever it's called",
    "start": "830480",
    "end": "836720"
  },
  {
    "text": "in your language of choice you can execute that within the same execution context right which is way more powerful",
    "start": "836720",
    "end": "843079"
  },
  {
    "text": "than having to make a network call so we've got a much richer set of Concepts",
    "start": "843079",
    "end": "848160"
  },
  {
    "text": "that we can architect our application around and that's great cuz in this really large State space uh moving",
    "start": "848160",
    "end": "855360"
  },
  {
    "text": "around in a nonlinear fashion gets complicated and the dimensionality that we have makes it difficult to manage so",
    "start": "855360",
    "end": "862240"
  },
  {
    "text": "we really need to have a plan here a long-term plan to help us not become that sad developer in the corner feeling",
    "start": "862240",
    "end": "868839"
  },
  {
    "text": "had about our life choices um so originally we brought over",
    "start": "868839",
    "end": "875959"
  },
  {
    "text": "to the client uh some presentation patterns to help us deal with the complexity right we've got our models",
    "start": "875959",
    "end": "881720"
  },
  {
    "text": "our views and controller all the things that we saw on the server whatever the controller portion is there's lots of",
    "start": "881720",
    "end": "887480"
  },
  {
    "text": "different names for what you want to call that um as I mentioned earlier and then we add the routing",
    "start": "887480",
    "end": "894040"
  },
  {
    "text": "portion and the first as far as State's concerned this feels a little little weird to me right when I look at this",
    "start": "894040",
    "end": "900480"
  },
  {
    "text": "list the thing that pops out as being weird is is routers that is a need for routes on the client the server was 100%",
    "start": "900480",
    "end": "907279"
  },
  {
    "text": "stateless so I can totally see that there would be need there but I mean do we need them on the client and it all",
    "start": "907279",
    "end": "913079"
  },
  {
    "text": "feels a little weird until I'm like of course we totally need them we have an address bar and I totally need to be",
    "start": "913079",
    "end": "918279"
  },
  {
    "text": "able to copy the URL of my web application and give that to my friend and have them see exactly what I see",
    "start": "918279",
    "end": "924560"
  },
  {
    "text": "right addressability on the client is still a key concern",
    "start": "924560",
    "end": "930600"
  },
  {
    "text": "so let's take a typical look at how that uh architecture might scale uh might pan out when you're implementing MVC on the",
    "start": "931399",
    "end": "938959"
  },
  {
    "text": "client and address addressing the need of being able to address all SPS parts of the state space via the router so I'm",
    "start": "938959",
    "end": "945680"
  },
  {
    "text": "going to give this example in backbone so some of the object names might be different to what you're used",
    "start": "945680",
    "end": "951519"
  },
  {
    "text": "to or you may not even see some of these steps because the Frameworks that you're using are hiding this all away from you",
    "start": "951519",
    "end": "957279"
  },
  {
    "text": "but the series of events is pretty much going to be the same so here we have an animal model and we have a collection of",
    "start": "957279",
    "end": "963399"
  },
  {
    "text": "party animals which is really just a list of animals and we have an an animal view",
    "start": "963399",
    "end": "969120"
  },
  {
    "text": "which defines a template and a render function and the render function is just going to take that template it's going",
    "start": "969120",
    "end": "974360"
  },
  {
    "text": "to take the collection of animals it's going to MH them together and put something out onto the",
    "start": "974360",
    "end": "979560"
  },
  {
    "text": "Dom and then we have our router and we're defining a couple of routes here party and uninvite and when each of",
    "start": "979560",
    "end": "986360"
  },
  {
    "text": "those are invoked when it detects a CH in the address bar we're going to call the function either start the party or",
    "start": "986360",
    "end": "991720"
  },
  {
    "text": "revoke party rights and revoke party rights is going to do a",
    "start": "991720",
    "end": "998199"
  },
  {
    "text": "lookup it's going to transition the state of the model and then it's going to update the view it's going to update",
    "start": "998199",
    "end": "1005120"
  },
  {
    "text": "the snapshot of the current state and start the party is going to do something very similar the only",
    "start": "1005120",
    "end": "1010600"
  },
  {
    "text": "difference is it's not actually executing a state transition so we're breaking",
    "start": "1010600",
    "end": "1017279"
  },
  {
    "text": "encapsulation here in order to push everything up to the routing portion of our code so we've got a view that's",
    "start": "1017279",
    "end": "1023839"
  },
  {
    "text": "responsible for doing some initial rendering but it also has a reference to our model and then the route kicks off",
    "start": "1023839",
    "end": "1029720"
  },
  {
    "text": "and the first thing we do is look up that model when we already had a reference to it in our view I'm feeling",
    "start": "1029720",
    "end": "1036438"
  },
  {
    "text": "a bit weird about this um this is yeah this is feeling weird and then finally we're going to",
    "start": "1036439",
    "end": "1042959"
  },
  {
    "text": "need to update that view we're going to reuse jQuery to update the current state so again we're breaking encapsulation",
    "start": "1042959",
    "end": "1050000"
  },
  {
    "text": "The View already has a reference to those Dom elements we're creating spaghetti like code which is going to",
    "start": "1050000",
    "end": "1055520"
  },
  {
    "text": "become really difficult to maintain over time the more of this that you add the harder this is going to be able you're",
    "start": "1055520",
    "end": "1060760"
  },
  {
    "text": "not going to be able to follow this nonlinear State space very",
    "start": "1060760",
    "end": "1065520"
  },
  {
    "text": "easily is anyone able to grab me another glass of water that would be amazing thank",
    "start": "1068120",
    "end": "1075120"
  },
  {
    "text": "you so on the client we're often working with really stateful Frameworks and all",
    "start": "1077400",
    "end": "1084280"
  },
  {
    "text": "of the objects that we need in order to performer State transition are already instantiated we already hold them in",
    "start": "1084280",
    "end": "1090440"
  },
  {
    "text": "Mirror thank you so there's no need for us to look them up again in that very linear",
    "start": "1090440",
    "end": "1097320"
  },
  {
    "text": "fashion that we saw on the server so we don't need to be structuring our application in the same",
    "start": "1097320",
    "end": "1103400"
  },
  {
    "text": "way because we can Embrace date we don't need to be manipulating our models like the RO in a database and models can",
    "start": "1103400",
    "end": "1110440"
  },
  {
    "text": "become real Rich interactive responsive objects so we really want to be",
    "start": "1110440",
    "end": "1115600"
  },
  {
    "text": "embracing State here and we really want to be embracing events because what we've done is we've taken those memes",
    "start": "1115600",
    "end": "1121640"
  },
  {
    "text": "those ideas from the server and we've tried to apply that linear approach to a nonlinear State space and we've had to",
    "start": "1121640",
    "end": "1128919"
  },
  {
    "text": "break encapsulation in order to do that we started treating State and events like second class citizens and the code",
    "start": "1128919",
    "end": "1136120"
  },
  {
    "text": "that we ended up with was a tangled web so I feel like history is repeating",
    "start": "1136120",
    "end": "1141679"
  },
  {
    "text": "itself right if you remember that example that I gave at the beginning of the talk of the of jQuery that was kind",
    "start": "1141679",
    "end": "1146720"
  },
  {
    "text": "of managing the state and the view and it was all kind of happening in this weird soupy kind of thing I feel like",
    "start": "1146720",
    "end": "1152400"
  },
  {
    "text": "we're back to this again we've just pushed it all up into the routing portion of our code because we're trying",
    "start": "1152400",
    "end": "1157760"
  },
  {
    "text": "to emulate what the server architectures look like and this kind of code doesn't",
    "start": "1157760",
    "end": "1163039"
  },
  {
    "text": "scale well beyond the simple use case because it breaks encapsulation because we can't test it because we can't pull",
    "start": "1163039",
    "end": "1168720"
  },
  {
    "text": "it apart so I feel like we're back to square one again we're sacrificing",
    "start": "1168720",
    "end": "1174360"
  },
  {
    "text": "Clarity in our architecture so to build rich single page JavaScript applications",
    "start": "1174360",
    "end": "1179559"
  },
  {
    "text": "we still need to use RS it's critical that we can address the state space but",
    "start": "1179559",
    "end": "1184919"
  },
  {
    "text": "in my mind routes are a feature they are not an architectural driver they're not",
    "start": "1184919",
    "end": "1191000"
  },
  {
    "text": "the Cornerstone of our architecture we really should be being concerned with events and state and architecting around",
    "start": "1191000",
    "end": "1197880"
  },
  {
    "text": "those Concepts so a routes the problem here they're totally not the",
    "start": "1197880",
    "end": "1203000"
  },
  {
    "text": "problem the thing that's causing us pain with managing State and events is only",
    "start": "1203000",
    "end": "1208520"
  },
  {
    "text": "using routes to drive our architecture so we've discovered that",
    "start": "1208520",
    "end": "1215799"
  },
  {
    "text": "separating concerns is really really important and that's why we implemented the MVC design pattern in the first",
    "start": "1215799",
    "end": "1222200"
  },
  {
    "text": "place to get rid of all that shitty jQuery soup but somewhere in the course of that we too closely emulated what we",
    "start": "1222200",
    "end": "1228280"
  },
  {
    "text": "saw on the server and the cracks in that started to show so thankfully I think we can find a happy medium where we can",
    "start": "1228280",
    "end": "1234200"
  },
  {
    "text": "embrace the need for addressability on the client the need for routes without relying on them to drive State changes",
    "start": "1234200",
    "end": "1241280"
  },
  {
    "text": "within the application so we're going to use events to help Drive our architecture and we're",
    "start": "1241280",
    "end": "1246760"
  },
  {
    "text": "going to build a composable architecture to help us better separate our",
    "start": "1246760",
    "end": "1252200"
  },
  {
    "text": "concerns so the first thing we're going to do is we're going to refactor some of that bloated router code that I showed",
    "start": "1255559",
    "end": "1261679"
  },
  {
    "text": "you and so hopefully it's starting to become apparent that addressing a state transition like a delete is not the best",
    "start": "1261679",
    "end": "1268760"
  },
  {
    "text": "thing to do so we still have our models like we did before and in backbone we now have an event hash well this not now",
    "start": "1268760",
    "end": "1276039"
  },
  {
    "text": "I mean I've just added it just now that's been around in backbone for a long time and the idea here is that we",
    "start": "1276039",
    "end": "1281840"
  },
  {
    "text": "can cor we can correlate events that are occurring on the Dom to a function to call on our view",
    "start": "1281840",
    "end": "1288640"
  },
  {
    "text": "and in this case we've got a delete function and our delete function is going to use the model that it has a",
    "start": "1288640",
    "end": "1294360"
  },
  {
    "text": "reference to and it's going to destroy it and then it's going to figure out that there's no need for this view to be",
    "start": "1294360",
    "end": "1299640"
  },
  {
    "text": "around anymore and it's going to destroy itself it's going to remove itself from The View so where did the router go",
    "start": "1299640",
    "end": "1305640"
  },
  {
    "text": "there was no need for it here right the view could take care of itself we don't need to do any",
    "start": "1305640",
    "end": "1312520"
  },
  {
    "text": "unnecessary lookups to find what model to delete and we're taking advantage of that state that was available To Us by",
    "start": "1312520",
    "end": "1318600"
  },
  {
    "text": "using declarative events and we can buy into that delete",
    "start": "1318600",
    "end": "1324400"
  },
  {
    "text": "function and the views in charge right which is what we want we don't want the router to be in",
    "start": "1324679",
    "end": "1330440"
  },
  {
    "text": "charge so this is fine this is step one um but as I said earlier that routing is",
    "start": "1330440",
    "end": "1336320"
  },
  {
    "text": "still a key part of our overall design so how do we support the need for addressability of our states well I",
    "start": "1336320",
    "end": "1344240"
  },
  {
    "text": "think we can embrace the need for an event Rich mvy whatever pattern and the need for routes with a clear",
    "start": "1344240",
    "end": "1349640"
  },
  {
    "text": "architecture so I'm going to show you a couple of ideas or memes or what have you that you can choose to apply uh as",
    "start": "1349640",
    "end": "1356520"
  },
  {
    "text": "you see fit and they might help",
    "start": "1356520",
    "end": "1360799"
  },
  {
    "text": "you so we're going to take our models we're going to take those Rich interactive objects that keep track of",
    "start": "1362039",
    "end": "1368200"
  },
  {
    "text": "their own State and handle validation and raise events when they change State we're going to take our views which are",
    "start": "1368200",
    "end": "1374320"
  },
  {
    "text": "responsible for rendering templates and media creating any interaction between the Dom and the view",
    "start": "1374320",
    "end": "1381039"
  },
  {
    "text": "and vice versa we're going to take all of that and we're going to give that to a controller an actual controller object",
    "start": "1381039",
    "end": "1386600"
  },
  {
    "text": "and a controller object might be responsible for managing a couple of different models and a couple of",
    "start": "1386600",
    "end": "1391760"
  },
  {
    "text": "different views at any point in time we're going to take all of that and we're going to slide it into a logical",
    "start": "1391760",
    "end": "1397080"
  },
  {
    "text": "component called a module and we're going to do this for a bunch of reasons for testability for",
    "start": "1397080",
    "end": "1402400"
  },
  {
    "text": "composability and like it's just sensible right um so this guy Justin Meyer who",
    "start": "1402400",
    "end": "1410080"
  },
  {
    "text": "wrote this framework called JavaScript MVC which claims to be like a really true reference implementation of what",
    "start": "1410080",
    "end": "1415960"
  },
  {
    "text": "MVC was supposed to be in uh JavaScript he said like we want to be building",
    "start": "1415960",
    "end": "1421400"
  },
  {
    "text": "large scale huge JavaScript applications we should just we should just not do that let's just stop and not build big",
    "start": "1421400",
    "end": "1428000"
  },
  {
    "text": "applications let's build a whole lot of smaller applications test those individually and then bring them",
    "start": "1428000",
    "end": "1434200"
  },
  {
    "text": "together compose them at the end to form a larger application and I really really like like this idea and this is where the idea of modularity comes",
    "start": "1434200",
    "end": "1441919"
  },
  {
    "text": "in so a module is responsible for coordinating State and events of the views and models it contains right and",
    "start": "1441919",
    "end": "1448960"
  },
  {
    "text": "it it's at a really micro level so I think modules are a really integral part of building any robust application",
    "start": "1448960",
    "end": "1456000"
  },
  {
    "text": "architecture and they usually Define like a discrete area of functionality so",
    "start": "1456000",
    "end": "1461400"
  },
  {
    "text": "that's functionality that logically belongs together right and so within it it can raise events keep track of which",
    "start": "1461400",
    "end": "1467080"
  },
  {
    "text": "views need to be presented and manage its own internal state so in JavaScript",
    "start": "1467080",
    "end": "1472120"
  },
  {
    "text": "we've got a couple of ways of implementing the module pattern you could roll your own it's the module patterns a clearly defined pattern uh",
    "start": "1472120",
    "end": "1479320"
  },
  {
    "text": "you could do that using object literal notation if you want you could use AMD modules is lots of different um versions",
    "start": "1479320",
    "end": "1485200"
  },
  {
    "text": "of that out there commonjs modules lots of Frameworks have their own uh definition of what a module needs to",
    "start": "1485200",
    "end": "1491080"
  },
  {
    "text": "look like um there's there's tons of different ways that you can do this and there's lots and lots of information out",
    "start": "1491080",
    "end": "1496919"
  },
  {
    "text": "on there and I'm happy to to give links to this afterwards if you would like them so to note one thing about modules",
    "start": "1496919",
    "end": "1504760"
  },
  {
    "text": "that I've discovered is that they shouldn't be free to pres they should be free to present their own views right",
    "start": "1504760",
    "end": "1510960"
  },
  {
    "text": "but they shouldn't be free to choose where on the application shall they present those views so the application",
    "start": "1510960",
    "end": "1518120"
  },
  {
    "text": "some other object needs to take care of deciding where that module is allowed to place its views and I think uh that",
    "start": "1518120",
    "end": "1525120"
  },
  {
    "text": "other object is something responsible for layout composition so for composing all the different views on the screen",
    "start": "1525120",
    "end": "1532279"
  },
  {
    "text": "now I'm going to give this guy the name a layout manager because naming is hard and manager kind of sucks I don't know",
    "start": "1532279",
    "end": "1538480"
  },
  {
    "text": "like if you've got any better ideas of what to call this the idea is that it's an object responsible for composing lots",
    "start": "1538480",
    "end": "1545520"
  },
  {
    "text": "of different views and deciding where they fit on the screen at any given point in time so it's going to define a",
    "start": "1545520",
    "end": "1551240"
  },
  {
    "text": "shell right an application shell with areas that modules can render their content into into so like a sidebar the",
    "start": "1551240",
    "end": "1557840"
  },
  {
    "text": "main content view any widget areas that you have and importantly when a module a new",
    "start": "1557840",
    "end": "1564360"
  },
  {
    "text": "module's activated the layout manager is responsible for deciding where that module should render its content so each",
    "start": "1564360",
    "end": "1572039"
  },
  {
    "text": "each module is going to have the views that it wants to present and the layout manager is going to figure out where they need to",
    "start": "1572039",
    "end": "1577360"
  },
  {
    "text": "go so this is an example of a layout manager and has anyone heard of a framework called marionet JS yeah so I'm",
    "start": "1577360",
    "end": "1584880"
  },
  {
    "text": "a big big there's a lot of great ideas about composable um composite architectures in that um in that Library",
    "start": "1584880",
    "end": "1592799"
  },
  {
    "text": "it's really just a library that sits on top of backbone that you can pick in the bits that you find interesting as you",
    "start": "1592799",
    "end": "1598440"
  },
  {
    "text": "figure out whether they will work for you so in marionette what you do is you define an overall application object in",
    "start": "1598440",
    "end": "1605000"
  },
  {
    "text": "my mind I would rather see this be like layout manager or layout composer or something like that and then you define",
    "start": "1605000",
    "end": "1610919"
  },
  {
    "text": "a series of regions so you're going to say main content sidebar photo all of those kinds of things and then that",
    "start": "1610919",
    "end": "1618440"
  },
  {
    "text": "gives you the hooks to do things like uh when the application starts for example here we're saying the module Fu which we",
    "start": "1618440",
    "end": "1625159"
  },
  {
    "text": "see defined just below I'd like you to call the display function on that and I'm going to pass you a region and then",
    "start": "1625159",
    "end": "1631559"
  },
  {
    "text": "that module is able to say oh cool thanks for the region I've got a whole lot of views that I need to present and I'm going to present those in the region",
    "start": "1631559",
    "end": "1638120"
  },
  {
    "text": "that you've just given me so that's that's implemented in",
    "start": "1638120",
    "end": "1643320"
  },
  {
    "text": "marionette but that's a concept that you can very easily roll into your own applications",
    "start": "1643320",
    "end": "1649520"
  },
  {
    "text": "so it's going to look a little bit like this I've got a bunch of modules presenting views at a micro level and",
    "start": "1649960",
    "end": "1656520"
  },
  {
    "text": "we've got a layout composer that's responsible for composing all of those modules used at a more macro",
    "start": "1656520",
    "end": "1662720"
  },
  {
    "text": "level so this placement occurs when like when does the layout composer know to",
    "start": "1662720",
    "end": "1668880"
  },
  {
    "text": "start placing objects when a new module is activated how does this",
    "start": "1668880",
    "end": "1674279"
  },
  {
    "text": "work so the thing that needs to be responsible uh in my opinion the thing that needs to be responsible for",
    "start": "1674279",
    "end": "1680559"
  },
  {
    "text": "determining whether it's time to invoke a new module is a dispatcher so this is going to be an object that listens for",
    "start": "1680559",
    "end": "1688159"
  },
  {
    "text": "events on some P publish And subscribe uh subscription and that's going to",
    "start": "1688159",
    "end": "1693320"
  },
  {
    "text": "listen for events that indicate that it's time for a new module to be loaded a new module to be invoked and on such",
    "start": "1693320",
    "end": "1699799"
  },
  {
    "text": "events it's going to load that module up it's going to create an instance and it's going to hand it off to the layout manager who will then figure out where",
    "start": "1699799",
    "end": "1705919"
  },
  {
    "text": "to place it on the screen so the one of the interesting events",
    "start": "1705919",
    "end": "1710960"
  },
  {
    "text": "that might mean that it's time to invoke a new set of modules routes right a routing event",
    "start": "1710960",
    "end": "1717559"
  },
  {
    "text": "might occur so the router is going to facilitate just purely an incoming URL",
    "start": "1717559",
    "end": "1723440"
  },
  {
    "text": "mapping that to a set of modules that need to be invoked and then it's going to raise an event that the dispatcher is then listening to so it's responsible",
    "start": "1723440",
    "end": "1731440"
  },
  {
    "text": "for observing those changes and reacting to them it's not responsible for doing any lookups it's not responsible for",
    "start": "1731440",
    "end": "1737080"
  },
  {
    "text": "exec any state transitions all it is is delegating off to another object so it's",
    "start": "1737080",
    "end": "1742799"
  },
  {
    "text": "delegating to the dispatcher um so here's an example of",
    "start": "1742799",
    "end": "1748320"
  },
  {
    "text": "what a dispatcher might look like this is all just stubbed code so we might want to keep track of say the previous",
    "start": "1748320",
    "end": "1754080"
  },
  {
    "text": "route for reasons of moving backwards and forwards we're going to need to keep track of the current modules that we",
    "start": "1754080",
    "end": "1759480"
  },
  {
    "text": "have uh loaded at any given point in time and the current route that we're on when we set up we're going to subscribe",
    "start": "1759480",
    "end": "1765840"
  },
  {
    "text": "to that publish And subscribe Channel that I mentioned so that when the router raises its event to say that something",
    "start": "1765840",
    "end": "1771399"
  },
  {
    "text": "interesting has happened it can take in the parameters of which modules to load",
    "start": "1771399",
    "end": "1776600"
  },
  {
    "text": "um and it can it can hear that event and we're going to load those modules right so this is going to this is the point",
    "start": "1776600",
    "end": "1782000"
  },
  {
    "text": "where we're going to load them into memory and then hand them off to the layout manager to do something interesting worth and this is cool",
    "start": "1782000",
    "end": "1787559"
  },
  {
    "text": "because the dispatcher can also do things like oh I notice that we've got all of these modules that we're not",
    "start": "1787559",
    "end": "1793279"
  },
  {
    "text": "using anymore I can clean those up clear the memory keep our appc a stable and",
    "start": "1793279",
    "end": "1799919"
  },
  {
    "text": "performant so we're going to take on the dispatcher which is responsible for creating those modules and managing the",
    "start": "1799919",
    "end": "1806360"
  },
  {
    "text": "lifetime of our modules as well and then passing them on to our layout manager who's going to place them in the overall",
    "start": "1806360",
    "end": "1812679"
  },
  {
    "text": "application shell and one way that the dispatcher can know that it's time for us to load",
    "start": "1812679",
    "end": "1819080"
  },
  {
    "text": "another module is a routing event and what I really like about this is it means that the router is a feature of",
    "start": "1819080",
    "end": "1825919"
  },
  {
    "text": "the application it's not an architectural driver it's something that sits on the side and raise raises events",
    "start": "1825919",
    "end": "1831480"
  },
  {
    "text": "it's the interaction of the other objects that gives us our Rich nonlinear",
    "start": "1831480",
    "end": "1837600"
  },
  {
    "text": "architecture and then the last thing that we're going to need to add is similar to what we had in in the Marinette example an application objects",
    "start": "1837880",
    "end": "1844519"
  },
  {
    "text": "that's responsible for kind of managing these higher level objects and making sure that they're communicating",
    "start": "1844519",
    "end": "1850000"
  },
  {
    "text": "correctly it's going to provide us a way for an entry point for start stop uh",
    "start": "1850000",
    "end": "1856440"
  },
  {
    "text": "logging cross cutting concerns all of those kinds of things would perhaps belong in this uh overarching",
    "start": "1856440",
    "end": "1864880"
  },
  {
    "text": "object so we've split up some of our concerns that we had around State and events and all of the many views that",
    "start": "1868559",
    "end": "1875799"
  },
  {
    "text": "were being displayed and the state of the address bar and we have a much more composable design we were able to use",
    "start": "1875799",
    "end": "1881960"
  },
  {
    "text": "events to transition into new States in a very nonlinear fashion so if that was",
    "start": "1881960",
    "end": "1888799"
  },
  {
    "text": "all too long and you didn't read it because reasons I'll sum it up um management of our state space gets",
    "start": "1888799",
    "end": "1895000"
  },
  {
    "text": "really really hard especially if you don't separate out our concerns so on the client we shouldn't be using routes",
    "start": "1895000",
    "end": "1901440"
  },
  {
    "text": "to address all aspects of the state space and definitely never",
    "start": "1901440",
    "end": "1906519"
  },
  {
    "text": "transitions taking ideas from one context and applying them in a new context is really great that's what",
    "start": "1906519",
    "end": "1912159"
  },
  {
    "text": "building software is all about um but it's not a rule book right we need to learn to be FX flexible and figure out",
    "start": "1912159",
    "end": "1918120"
  },
  {
    "text": "when these patterns are actually hurting us more than they're helping us and we need to mold them to support new",
    "start": "1918120",
    "end": "1923559"
  },
  {
    "text": "requirements so like the need to be stateful like the need to embrace events",
    "start": "1923559",
    "end": "1928679"
  },
  {
    "text": "within the same execution context and I guess if I have one thing",
    "start": "1928679",
    "end": "1934600"
  },
  {
    "text": "to say is that please don't build servers on the client because the client is a really rich awesome place to like",
    "start": "1934600",
    "end": "1942080"
  },
  {
    "text": "write code and events are awesome so embrace them that's it",
    "start": "1942080",
    "end": "1947560"
  },
  {
    "text": "[Applause]",
    "start": "1947560",
    "end": "1956750"
  }
]