[
  {
    "start": "0",
    "end": "111000"
  },
  {
    "text": "I want to start with a short story so I'm not sure about you but I actually",
    "start": "3940",
    "end": "10030"
  },
  {
    "text": "don't like when things break like really don't like and you know I've seen so",
    "start": "10030",
    "end": "15190"
  },
  {
    "text": "many outages but still don't like it and one particular type of outages",
    "start": "15190",
    "end": "20890"
  },
  {
    "text": "really stands out for me so imagine you work in a small startup small company",
    "start": "20890",
    "end": "26080"
  },
  {
    "text": "building like a classic online SAS application and well your goal as a",
    "start": "26080",
    "end": "32140"
  },
  {
    "text": "company is to increase number of users by you know increasing sales increasing conversions",
    "start": "32140",
    "end": "37210"
  },
  {
    "text": "and all this stuff and pretty much everyone in the company works toward the same goal right engineers product people",
    "start": "37210",
    "end": "44079"
  },
  {
    "text": "designers marketing sales they all try to basically improve this channel and",
    "start": "44079",
    "end": "49420"
  },
  {
    "text": "you might spend like hundred thousands of dollars on advertising and then one day suddenly your signup flow just stops",
    "start": "49420",
    "end": "56649"
  },
  {
    "text": "working so it's just like done and all your customers or potential customers they just see never-ending progress bar",
    "start": "56649",
    "end": "64080"
  },
  {
    "text": "and well your uncle engineer right you get an alert you start investigating and",
    "start": "64080",
    "end": "70750"
  },
  {
    "text": "you realize that the new shiny micro service you just deployed for I don't know a be testing or some new",
    "start": "70750",
    "end": "77590"
  },
  {
    "text": "integration or may be generating finding project names which is important it just",
    "start": "77590",
    "end": "82780"
  },
  {
    "text": "you just crashed right and your sign a back end depends on the service and so now the whole thing is down it sounds",
    "start": "82780",
    "end": "90640"
  },
  {
    "text": "unfortunate and I was that on-call engineer mother more than a few times",
    "start": "90640",
    "end": "96280"
  },
  {
    "text": "and I learned that synchronous request response communication in micro services",
    "start": "96280",
    "end": "102550"
  },
  {
    "text": "systems can be really dangerous and so today I want to show you how you can use",
    "start": "102550",
    "end": "107650"
  },
  {
    "text": "event-driven architectures to avoid that problem so just a few words about myself",
    "start": "107650",
    "end": "114480"
  },
  {
    "start": "111000",
    "end": "142000"
  },
  {
    "text": "I've been working for about a year at a company called demon or which is the",
    "start": "114480",
    "end": "119590"
  },
  {
    "text": "part of Activision and I also spend five years at bench accounting which is now",
    "start": "119590",
    "end": "126220"
  },
  {
    "text": "the largest online bookkeeping service in North America and nowadays most going",
    "start": "126220",
    "end": "131950"
  },
  {
    "text": "to do data engineering but yeah I did all this stuff before so today we're going to hear two stories",
    "start": "131950",
    "end": "138520"
  },
  {
    "text": "first about Demonware second about bench and before we start just for the context",
    "start": "138520",
    "end": "146240"
  },
  {
    "start": "142000",
    "end": "206000"
  },
  {
    "text": "I want to introduce you this problem as you probably noticed based on the number",
    "start": "146240",
    "end": "151250"
  },
  {
    "text": "of people attending the micro services track you know micro services are everywhere and for me personally the",
    "start": "151250",
    "end": "159230"
  },
  {
    "text": "problem of interest service communication you know it's I think it's really popular and so I think a lot of",
    "start": "159230",
    "end": "169130"
  },
  {
    "text": "people use synchronous request response communication either HTTP or RPC and",
    "start": "169130",
    "end": "174830"
  },
  {
    "text": "well I think it's it's it's less than ideal right if you use it for everything",
    "start": "174830",
    "end": "180530"
  },
  {
    "text": "in your system and here is a typical use case I would say we have to service a service a service be there's a wants to",
    "start": "180530",
    "end": "187850"
  },
  {
    "text": "call service be so you might build a simple HTTP endpoint and service be and",
    "start": "187850",
    "end": "193520"
  },
  {
    "text": "you will send a request right so this sounds like an easy way to call a",
    "start": "193520",
    "end": "199820"
  },
  {
    "text": "service well if you really think about this like how it works you will notice",
    "start": "199820",
    "end": "206990"
  },
  {
    "start": "206000",
    "end": "309000"
  },
  {
    "text": "that in order to even talk to service be service a needs to know exact address",
    "start": "206990",
    "end": "212330"
  },
  {
    "text": "right so its exact location of another service which means it involves some",
    "start": "212330",
    "end": "218420"
  },
  {
    "text": "sort of some sort of service discovery which is not a simple problem to solve",
    "start": "218420",
    "end": "224660"
  },
  {
    "text": "by itself and by introducing this direct link between services he also increased coupling which you know we always want",
    "start": "224660",
    "end": "231890"
  },
  {
    "text": "to avoid coupling when we can also as we know network is quite unpredictable so",
    "start": "231890",
    "end": "238220"
  },
  {
    "text": "when things fail do you know how much time you should wait before you type it",
    "start": "238220",
    "end": "243260"
  },
  {
    "text": "before time out or how many times to retry when things fail or you know when",
    "start": "243260",
    "end": "250430"
  },
  {
    "text": "to apply back pressure or how to use circuit breakers do you even have circuit breakers in your systems right",
    "start": "250430",
    "end": "257630"
  },
  {
    "text": "so my point is you cannot make synchronous requests over the network",
    "start": "257630",
    "end": "263000"
  },
  {
    "text": "behave like vocal ones just impossible and well a lot of companies what a",
    "start": "263000",
    "end": "269440"
  },
  {
    "text": "successful company is overcame some of the issues and it's totally possible to you know build solutions for all of",
    "start": "269440",
    "end": "275710"
  },
  {
    "text": "those problems but I just think it's really hard to build solutions",
    "start": "275710",
    "end": "281170"
  },
  {
    "text": "especially if you don't have enough experience in this microservices environments and distributed systems",
    "start": "281170",
    "end": "287080"
  },
  {
    "text": "right so those problems are really hard to solve and well if you use a Benjamin",
    "start": "287080",
    "end": "294750"
  },
  {
    "text": "architectures I think it's just more straightforward argit sometimes it's a",
    "start": "294750",
    "end": "300310"
  },
  {
    "text": "more straightforward approach to solving some of the problems you might have and it's and it's a simpler one and I'll try",
    "start": "300310",
    "end": "308110"
  },
  {
    "text": "to prove it today so just a few concepts to introduce before we go to the main",
    "start": "308110",
    "end": "314590"
  },
  {
    "start": "309000",
    "end": "339000"
  },
  {
    "text": "section if you use some sort of event driven system or message queue usually",
    "start": "314590",
    "end": "321070"
  },
  {
    "text": "deal with two types of data streams it's either a point-to-point channel we have",
    "start": "321070",
    "end": "326410"
  },
  {
    "text": "a one sender and a one receiver or it's a publish subscribe channel where we",
    "start": "326410",
    "end": "331990"
  },
  {
    "text": "have a single publisher and zero one or many subscribers and if you think about",
    "start": "331990",
    "end": "338290"
  },
  {
    "text": "what kind of data is sent over the network we usually deal with advanced right so event is just a notification",
    "start": "338290",
    "end": "345120"
  },
  {
    "start": "339000",
    "end": "360000"
  },
  {
    "text": "about something that happened in the past you might also want to send commands over the network and it's just",
    "start": "345120",
    "end": "352390"
  },
  {
    "text": "a request to invoke some functionality there's also a third concept called document and I'm not going to really",
    "start": "352390",
    "end": "358660"
  },
  {
    "text": "talk about it today so our first story is about daemon were",
    "start": "358660",
    "end": "364150"
  },
  {
    "text": "and as I mentioned demon or is one of the execution companies and what we do",
    "start": "364150",
    "end": "369640"
  },
  {
    "text": "we actually build mostly right now we built Call of Duty games and so our",
    "start": "369640",
    "end": "376120"
  },
  {
    "text": "latest launch game so a daemon were wakes will deal with",
    "start": "376120",
    "end": "381670"
  },
  {
    "text": "some interesting scale some some numbers for you to understand so we built and",
    "start": "381670",
    "end": "390730"
  },
  {
    "start": "389000",
    "end": "677000"
  },
  {
    "text": "support core online game services you know some of them you can see here we",
    "start": "390730",
    "end": "397479"
  },
  {
    "text": "use airline for networking layer we use Python for application business",
    "start": "397479",
    "end": "402520"
  },
  {
    "text": "logic we still have pretty big monolith number of reasons but we're slowly",
    "start": "402520",
    "end": "409120"
  },
  {
    "text": "migrating to independent services yesterday and historically we used a lot",
    "start": "409120",
    "end": "416350"
  },
  {
    "text": "of synchronous request response communication well just because it's easy and we used HTTP and RPC and you",
    "start": "416350",
    "end": "425110"
  },
  {
    "text": "know all kinds of different protocols but conceptually we have the same approach with this communication style",
    "start": "425110",
    "end": "432570"
  },
  {
    "text": "the producer usually knows exactly which service it wants to call into right and",
    "start": "432570",
    "end": "439330"
  },
  {
    "text": "it's also aware of the action that is requesting and usually it needs to be",
    "start": "439330",
    "end": "444910"
  },
  {
    "text": "notified about the reply right so it wants to know what happened and so this is a good model this is how people build",
    "start": "444910",
    "end": "451930"
  },
  {
    "text": "systems you know this helped with building systems for a while but well we",
    "start": "451930",
    "end": "457540"
  },
  {
    "text": "found that you know we will have we will",
    "start": "457540",
    "end": "462820"
  },
  {
    "text": "have some value in implementing asynchronous communication between services as well right it's currently",
    "start": "462820",
    "end": "469030"
  },
  {
    "text": "work in progress but I think we are in a pretty good state right now and we decided to use the main events to",
    "start": "469030",
    "end": "476230"
  },
  {
    "text": "communicate between services and well in this model the producer so the the event",
    "start": "476230",
    "end": "484090"
  },
  {
    "text": "it can be handled by 0 1 or meny consumers or producers and each of them",
    "start": "484090",
    "end": "489760"
  },
  {
    "text": "can have you know it's so in Gaul its own a way to handle data but again you",
    "start": "489760",
    "end": "495130"
  },
  {
    "text": "don't need to really know about it as a producer so it's very very typical you know pops-up approach and in the",
    "start": "495130",
    "end": "501880"
  },
  {
    "text": "entry also not really interested right away about the result of that operation so it sounds very straightforward and",
    "start": "501880",
    "end": "509860"
  },
  {
    "text": "well one benefit you get when you implement a system like this you can integrate all those events all the",
    "start": "509860",
    "end": "516760"
  },
  {
    "text": "streams of events with your data pipeline or data warehouse real easily",
    "start": "516760",
    "end": "522330"
  },
  {
    "text": "so we really like this approach and so",
    "start": "522330",
    "end": "528130"
  },
  {
    "text": "this is how our typical service looks at demon war",
    "start": "528130",
    "end": "534209"
  },
  {
    "text": "when it consumes and produces events so we use we have we use the main German design beloved and what you see here is",
    "start": "534209",
    "end": "542580"
  },
  {
    "text": "called hexagonal architecture or onion architecture or cleaner delightful has",
    "start": "542580",
    "end": "547649"
  },
  {
    "text": "so many names but conceptually you have this application core which contains all",
    "start": "547649",
    "end": "553950"
  },
  {
    "text": "the business logic for application right so it's all pure business logic I doesn't include any sort of integrations",
    "start": "553950",
    "end": "561540"
  },
  {
    "text": "or third-party systems nothing just your application and it might include",
    "start": "561540",
    "end": "567270"
  },
  {
    "text": "persistence logic it might not it depends on use case and so in this in this model when you want to expose this",
    "start": "567270",
    "end": "574170"
  },
  {
    "text": "application or using some interface you add adapters right so you want to build",
    "start": "574170",
    "end": "579330"
  },
  {
    "text": "HTTP API you add HTTP adapter and so this adapter actually handles all kinds",
    "start": "579330",
    "end": "587250"
  },
  {
    "text": "of serialization deserialization concerns it handles configuration or the",
    "start": "587250",
    "end": "592680"
  },
  {
    "text": "endpoints so basically it contains all the HTTP related logic and it only calls",
    "start": "592680",
    "end": "598829"
  },
  {
    "text": "you know your pure business logic in the application for so again it sounds it",
    "start": "598829",
    "end": "603930"
  },
  {
    "text": "sounds straightforward but you know you don't always build system this way so if",
    "start": "603930",
    "end": "609779"
  },
  {
    "text": "you want another interface let's say you decided to expose your tool by a common",
    "start": "609779",
    "end": "616110"
  },
  {
    "text": "line interface you just had another adapter and in our case if you want also consume events it's just one more",
    "start": "616110",
    "end": "622470"
  },
  {
    "text": "adapter that's called event adapter in this case and so we have this message",
    "start": "622470",
    "end": "627990"
  },
  {
    "text": "transport layer implemented in Apache Kafka and you send events in Kafka and",
    "start": "627990",
    "end": "635329"
  },
  {
    "text": "this event adapter consumes the event and it deals with all kinds of against",
    "start": "635329",
    "end": "641130"
  },
  {
    "text": "realizations realization logic transformation it knows how to route this event and what exactly to call in",
    "start": "641130",
    "end": "648899"
  },
  {
    "text": "the application for so it basically transforms all the events to to a series",
    "start": "648899",
    "end": "654029"
  },
  {
    "text": "of commands and then we just execute those commands with with the with the method calls right so it's very",
    "start": "654029",
    "end": "659820"
  },
  {
    "text": "straightforward here and then we produce well in the applet or when some logic is triggered you know",
    "start": "659820",
    "end": "666600"
  },
  {
    "text": "it can produce another event as a result so in the end we have we have a closed",
    "start": "666600",
    "end": "671790"
  },
  {
    "text": "loop right so consuming producing events using the same transport so I mentioned",
    "start": "671790",
    "end": "678870"
  },
  {
    "start": "677000",
    "end": "810000"
  },
  {
    "text": "about your Kafka if you're not really familiar it's the the concept behind calculate is very",
    "start": "678870",
    "end": "684089"
  },
  {
    "text": "straightforward you just have a single event log that's partitioned and replicate it and",
    "start": "684089",
    "end": "690420"
  },
  {
    "text": "it's immutable that's it so in Kafka when you have a topic right usually you",
    "start": "690420",
    "end": "696510"
  },
  {
    "text": "you deal with with name topics and you can create a topic and in this case you",
    "start": "696510",
    "end": "702570"
  },
  {
    "text": "will have multiple partitions and so as a producer you would write your messages",
    "start": "702570",
    "end": "708390"
  },
  {
    "text": "to one of the partitions usually chosen randomly but as a consumer you have to",
    "start": "708390",
    "end": "714540"
  },
  {
    "text": "consume from all of those petitions from a series of topics and if you remember",
    "start": "714540",
    "end": "720260"
  },
  {
    "text": "those those types of channels I",
    "start": "720260",
    "end": "725399"
  },
  {
    "text": "mentioned at the beginning you know if you need to publish subscribe or point-to-point Channel it's usually it's",
    "start": "725399",
    "end": "731040"
  },
  {
    "text": "really a decision that's made in a consumer site in Kafka so consumers",
    "start": "731040",
    "end": "736410"
  },
  {
    "text": "actually dictate what kind of semantics you want to get so in this case let's imagine that you know on the left side",
    "start": "736410",
    "end": "743550"
  },
  {
    "text": "we have this group a and let's say we assign a different consumer group ID to",
    "start": "743550",
    "end": "751680"
  },
  {
    "text": "each instance in Group A so in this case when a new message arrives in Kafka each",
    "start": "751680",
    "end": "758070"
  },
  {
    "text": "of those instances will receive a copy of the message right so it looks more more like a problem subscribe interface",
    "start": "758070",
    "end": "766620"
  },
  {
    "text": "in this case but on the right side we have another group and let's say in that case every single instance will have the",
    "start": "766620",
    "end": "774329"
  },
  {
    "text": "same ID so when a new message arrives in Kafka it's going to be delivered to only",
    "start": "774329",
    "end": "780810"
  },
  {
    "text": "one of the instances right so you kind of have a point-to-point semantics here",
    "start": "780810",
    "end": "786350"
  },
  {
    "text": "and so we use a service name as a topic name in",
    "start": "786350",
    "end": "791530"
  },
  {
    "text": "and when services start they need to basically explicitly subscribe to all",
    "start": "791530",
    "end": "798700"
  },
  {
    "text": "the interest topics and then we also partition all the data isn't user ID so",
    "start": "798700",
    "end": "805330"
  },
  {
    "text": "we can actually preserve the ordering of operations for a single user and this is",
    "start": "805330",
    "end": "813010"
  },
  {
    "start": "810000",
    "end": "978000"
  },
  {
    "text": "what a typical high-level consumer architecture looks like in this case so",
    "start": "813010",
    "end": "818770"
  },
  {
    "text": "on the left side you have a Kafka topic with a number of partitions and again all the user events are usually within",
    "start": "818770",
    "end": "825280"
  },
  {
    "text": "the same partition so we keep the ordering we use a cock-up I think consumer which internally uses Liberty",
    "start": "825280",
    "end": "832030"
  },
  {
    "text": "Kafka see library and this consumer pulls the data from Kafka and keeps it",
    "start": "832030",
    "end": "837910"
  },
  {
    "text": "in the local buffer and then we use a series of tornado queues so tornado is a",
    "start": "837910",
    "end": "843150"
  },
  {
    "text": "non-blocking hi a framework for Python and so each queue usually represents you",
    "start": "843150",
    "end": "849340"
  },
  {
    "text": "know a user so it really mirrors the partitioning structure and in that case",
    "start": "849340",
    "end": "854770"
  },
  {
    "text": "you can have a non-blocking i/o all the way to the event dispatcher right so you",
    "start": "854770",
    "end": "860290"
  },
  {
    "text": "don't block when you when you wait as a consumer on Kafka an event dispatcher",
    "start": "860290",
    "end": "866230"
  },
  {
    "text": "handles all kinds of serialization deserialization logic it knows it's configured to handle a particular type",
    "start": "866230",
    "end": "873370"
  },
  {
    "text": "of data and then it calls the application for business logic in the end and here's a very simple example of",
    "start": "873370",
    "end": "883240"
  },
  {
    "text": "a consumer you can see a simple Python class called service events dispatcher",
    "start": "883240",
    "end": "889980"
  },
  {
    "text": "it uses this decorator called diamond a diamond source diamond odd is the name of our internal framework an event",
    "start": "889980",
    "end": "897580"
  },
  {
    "text": "source just basically says hey this dispatcher is interested in this type of events and somewhere in our",
    "start": "897580",
    "end": "904810"
  },
  {
    "text": "configuration we actually map this events from service a to a set of kafka topics so it's not really done here we",
    "start": "904810",
    "end": "911650"
  },
  {
    "text": "will have a separate configuration for that and so now this dispatcher consumes",
    "start": "911650",
    "end": "917140"
  },
  {
    "text": "data from from a set of topics and it can have many callbacks right so you we",
    "start": "917140",
    "end": "922900"
  },
  {
    "text": "have a single callback here call on user updated and with another decorator here to say we are interested",
    "start": "922900",
    "end": "929560"
  },
  {
    "text": "in this event schemas so we have another decorator condom another event schema",
    "start": "929560",
    "end": "934870"
  },
  {
    "text": "and we say we want user updated events we can actually specify what version is",
    "start": "934870",
    "end": "942339"
  },
  {
    "text": "called by supports so you can actually specify version explicitly or say it",
    "start": "942339",
    "end": "948009"
  },
  {
    "text": "should be you know greater than or equal to one one two three or something and we",
    "start": "948009",
    "end": "953440"
  },
  {
    "text": "also specify what kind of dto data transfer object which usually a simple Python dictionary should be used and so",
    "start": "953440",
    "end": "961269"
  },
  {
    "text": "when this on user updated callback triggers it actually receives the event as a Python dictionary and then you can",
    "start": "961269",
    "end": "969250"
  },
  {
    "text": "basically deal with this event and understand you know what kind of business logic you want to trigger in",
    "start": "969250",
    "end": "976029"
  },
  {
    "text": "the application if you look at the producing side our producers support",
    "start": "976029",
    "end": "982839"
  },
  {
    "start": "978000",
    "end": "1163000"
  },
  {
    "text": "multiple reliability guarantees and if you deal with Kafka producers you know",
    "start": "982839",
    "end": "987910"
  },
  {
    "text": "by default you know that any Kafka producer library supports this",
    "start": "987910",
    "end": "992920"
  },
  {
    "text": "acknowledgement option right so when you write a Kafka",
    "start": "992920",
    "end": "998170"
  },
  {
    "text": "you can say I don't even want to wait until the first Berkeley replies to me",
    "start": "998170",
    "end": "1003269"
  },
  {
    "text": "right so it's in this case it's zero or you can say I want to wait until at least one worker replies or you can say",
    "start": "1003269",
    "end": "1009899"
  },
  {
    "text": "all of them so all within the same replication group so not the whole faster and this sounds like it's a good",
    "start": "1009899",
    "end": "1016079"
  },
  {
    "text": "enough it's good enough reliability guarantee right if you use all so you have at least maybe like",
    "start": "1016079",
    "end": "1022709"
  },
  {
    "text": "three Kafka brokers but what if you have some some really sensitive data",
    "start": "1022709",
    "end": "1029640"
  },
  {
    "text": "you know usually around finances and all that that you wanna you want to deliver",
    "start": "1029640",
    "end": "1034829"
  },
  {
    "text": "100% right so if if there is an application entity update so you updated",
    "start": "1034829",
    "end": "1040798"
  },
  {
    "text": "some some user or some I don't know some some entity in a model and you also trigger to an event and you want to",
    "start": "1040799",
    "end": "1047069"
  },
  {
    "text": "deliver that event for sure likes just guarantee and if you just use that",
    "start": "1047069",
    "end": "1052440"
  },
  {
    "text": "single approach and your Kafka cluster is down then you know interesting interesting",
    "start": "1052440",
    "end": "1059730"
  },
  {
    "text": "things can start happening because well it you know you probably starts retrying and then again what if what did the",
    "start": "1059730",
    "end": "1066480"
  },
  {
    "text": "Kafka cluster is down for for an hour for four hours maybe the whole day you just just cannot fix it for some reason",
    "start": "1066480",
    "end": "1072480"
  },
  {
    "text": "I don't know like can you can you say can you promise that your application",
    "start": "1072480",
    "end": "1077669"
  },
  {
    "text": "service can retry for four hours and you know nothing happens you know not not a memory exception or maybe you actually",
    "start": "1077669",
    "end": "1084419"
  },
  {
    "text": "need to restart your application in order to fix some coffee issues so you basically you will lose this this",
    "start": "1084419",
    "end": "1089909"
  },
  {
    "text": "is retrying state because it's just a memory so it's not good enough and we",
    "start": "1089909",
    "end": "1096360"
  },
  {
    "text": "decided to you know introduce a very simple very straightforward workaround",
    "start": "1096360",
    "end": "1101820"
  },
  {
    "text": "where we write all the all the events to an event store beg buy a database and in",
    "start": "1101820",
    "end": "1109259"
  },
  {
    "text": "this case your application only only cares about the event store and then there's a special process that actually",
    "start": "1109259",
    "end": "1117090"
  },
  {
    "text": "reads the data from event store and tries to sort of reconcile it eventually right so for you as a producer the most",
    "start": "1117090",
    "end": "1125789"
  },
  {
    "text": "important thing is just to write to the investor and that's it and so we came up",
    "start": "1125789",
    "end": "1132269"
  },
  {
    "text": "with this well actually there's also a third option sort of intermediate one if you don't want to really you know",
    "start": "1132269",
    "end": "1138570"
  },
  {
    "text": "provision in your database but you still want to you know have have more really ability guarantees they can also use a",
    "start": "1138570",
    "end": "1144450"
  },
  {
    "text": "band store bag by a local disc and use something like rocks DB or Berkeley DB",
    "start": "1144450",
    "end": "1149929"
  },
  {
    "text": "and just keep data locally but in this case if your application instance",
    "start": "1149929",
    "end": "1155519"
  },
  {
    "text": "crashes with you know with the hard drive failure then you lose the data as well so it's a compromise and this is a",
    "start": "1155519",
    "end": "1164309"
  },
  {
    "text": "very high level representation of that producer so again you have application",
    "start": "1164309",
    "end": "1170039"
  },
  {
    "text": "core it triggers some events or commands on different architectures you have an",
    "start": "1170039",
    "end": "1175590"
  },
  {
    "text": "event publisher that knows how to deal with those events and how to serialize them and you ride them to the event",
    "start": "1175590",
    "end": "1181799"
  },
  {
    "text": "store and then there's a special process that actually reads them and we use",
    "start": "1181799",
    "end": "1189119"
  },
  {
    "text": "Kafka Python producer this same framework and then in just a right to a Kafka topic using the same",
    "start": "1189119",
    "end": "1196200"
  },
  {
    "text": "tradition guarantee so you're always partitioned by a user ID and here's an",
    "start": "1196200",
    "end": "1202649"
  },
  {
    "start": "1201000",
    "end": "1311000"
  },
  {
    "text": "interesting detail here if you use the same database for your application",
    "start": "1202649",
    "end": "1209429"
  },
  {
    "text": "entities and the same database for the event store well a relational database",
    "start": "1209429",
    "end": "1214710"
  },
  {
    "text": "you can actually support transactions and have transactional guarantees which might sound well the first part of the",
    "start": "1214710",
    "end": "1221100"
  },
  {
    "text": "sentence might sound like it's maybe not a good a it might be not a good idea right because you should be supposed to",
    "start": "1221100",
    "end": "1227340"
  },
  {
    "text": "use you know different persistent engines for different use cases but here",
    "start": "1227340",
    "end": "1233220"
  },
  {
    "text": "well it's it's really great it's a huge benefit if you can actually support real",
    "start": "1233220",
    "end": "1238580"
  },
  {
    "text": "transactions for that and so in this snippet first two lines we'll just do",
    "start": "1238580",
    "end": "1243659"
  },
  {
    "text": "some reads and then we line six seven eight nine we do some sort of business",
    "start": "1243659",
    "end": "1248759"
  },
  {
    "text": "logic doing some reads as well and in the end we have a new entity and then a",
    "start": "1248759",
    "end": "1255299"
  },
  {
    "text": "new event and so our goal is to update the entity in the database and deliver",
    "start": "1255299",
    "end": "1261840"
  },
  {
    "text": "an event with one half percent guarantee so what we do we actually create just a simple transaction we update an advance",
    "start": "1261840",
    "end": "1269489"
  },
  {
    "text": "in the database and this publisher that published call it simply it simply",
    "start": "1269489",
    "end": "1275070"
  },
  {
    "text": "triggers my my SQL insert statement right so we have update insert commit and if one of those fails then we roll",
    "start": "1275070",
    "end": "1282929"
  },
  {
    "text": "back the whole transaction so it's very straightforward but in the end what we",
    "start": "1282929",
    "end": "1287970"
  },
  {
    "text": "achieve we can say 100% that if we updated an application entity and",
    "start": "1287970",
    "end": "1294539"
  },
  {
    "text": "triggered an event we're gonna record this event in the around store and then eventually you know when when Kafka is",
    "start": "1294539",
    "end": "1301139"
  },
  {
    "text": "recovered we can actually reconcile it and maybe apply some you know some necessary changes later it's it's fine",
    "start": "1301139",
    "end": "1311359"
  },
  {
    "start": "1311000",
    "end": "1404000"
  },
  {
    "text": "so with a summary a demon where we use decorator driven consumers with",
    "start": "1311399",
    "end": "1317489"
  },
  {
    "text": "callbacks we have different reliability guarantees for producers we have a",
    "start": "1317489",
    "end": "1323129"
  },
  {
    "text": "non-blocking higher is in tornado and we also use Apache cough cough as a transport but still can",
    "start": "1323129",
    "end": "1336330"
  },
  {
    "text": "we do better than that so if you look at this snippet again and you try to",
    "start": "1336330",
    "end": "1341850"
  },
  {
    "text": "understand conceptually what it does you just take you take a bunch of events",
    "start": "1341850",
    "end": "1347130"
  },
  {
    "text": "right you have a lot of configurations here built in all those IDs decorators and you also have a bunch of callbacks",
    "start": "1347130",
    "end": "1354660"
  },
  {
    "text": "here and this example looks somewhat straightforward but imagine that you need to consume hundreds of different",
    "start": "1354660",
    "end": "1361290"
  },
  {
    "text": "event types and you have you know like dozens of services and if you if you end",
    "start": "1361290",
    "end": "1367290"
  },
  {
    "text": "up writing all this translation logic over and over and over and over again you know it might look really",
    "start": "1367290",
    "end": "1372929"
  },
  {
    "text": "complicated in the end so because the only thing that callback does really it",
    "start": "1372929",
    "end": "1378330"
  },
  {
    "text": "takes one type of data and it tries to translate it to another type of data and then just call the application right so",
    "start": "1378330",
    "end": "1384720"
  },
  {
    "text": "it's a lot of writing but that's just the way it works right now and I was",
    "start": "1384720",
    "end": "1391860"
  },
  {
    "text": "thinking before actually before before joining demon or before implementing this system can we create producers and",
    "start": "1391860",
    "end": "1400020"
  },
  {
    "text": "consumers that support a message Bassem natively there is an answer for that",
    "start": "1400020",
    "end": "1405230"
  },
  {
    "start": "1404000",
    "end": "1573000"
  },
  {
    "text": "actors so if you're not familiar with actors actors actually it's it's a real",
    "start": "1405230",
    "end": "1411660"
  },
  {
    "text": "simple concept actor is an entity that communicates with asynchronous messages",
    "start": "1411660",
    "end": "1416850"
  },
  {
    "text": "instead of method indications and they can manage their own state and when they",
    "start": "1416850",
    "end": "1422490"
  },
  {
    "text": "receive a message they can either create other actors or you know send messages",
    "start": "1422490",
    "end": "1428669"
  },
  {
    "text": "to other actors or stop actors so that's that's a very simple model and every",
    "start": "1428669",
    "end": "1435570"
  },
  {
    "text": "time when I talk about actor models I love this example so if you if you want",
    "start": "1435570",
    "end": "1440970"
  },
  {
    "text": "to understand how actor models really work and if you want to understand all",
    "start": "1440970",
    "end": "1446160"
  },
  {
    "text": "the constraints you know imagine this situation where you just have a few friends and they decided to only",
    "start": "1446160",
    "end": "1452070"
  },
  {
    "text": "communicate using old-school physical mail so no phones no text messages no no no",
    "start": "1452070",
    "end": "1460859"
  },
  {
    "text": "messaging no no apps you just you just sent an old-school weather and and",
    "start": "1460859",
    "end": "1466139"
  },
  {
    "text": "that's the only way you communicate with a friend so if you if you think about system like that you can actually",
    "start": "1466139",
    "end": "1472859"
  },
  {
    "text": "quickly understand you know all the constraints that your system has because even if you you know write a letter and",
    "start": "1472859",
    "end": "1479909"
  },
  {
    "text": "you have an address and you send that letter you have no idea how much time it",
    "start": "1479909",
    "end": "1485669"
  },
  {
    "text": "exactly takes but it's lighter to be delivered and actually also have no idea if it's going to be delivered at all",
    "start": "1485669",
    "end": "1492359"
  },
  {
    "text": "right and if you expect a reply back you also have no idea if it's going to be",
    "start": "1492359",
    "end": "1498029"
  },
  {
    "text": "delivered or when so we just hope and it sounds like it's a very you know",
    "start": "1498029",
    "end": "1504659"
  },
  {
    "text": "unreliable system but what is the closest to present today well you know",
    "start": "1504659",
    "end": "1510029"
  },
  {
    "text": "what what is the what's similar system that it can think of well it's actually",
    "start": "1510029",
    "end": "1515759"
  },
  {
    "text": "Network right so that models network really well and well actors were",
    "start": "1515759",
    "end": "1524879"
  },
  {
    "text": "introduced I don't even remember what language but they they were made popular",
    "start": "1524879",
    "end": "1530549"
  },
  {
    "text": "in in Erlang a while ago and in their line actor well here it's just a",
    "start": "1530549",
    "end": "1536609"
  },
  {
    "text": "function really that has a received block and this received blog it contains",
    "start": "1536609",
    "end": "1542369"
  },
  {
    "text": "all kinds of rules for all the incoming messages you know to be processed so",
    "start": "1542369",
    "end": "1548700"
  },
  {
    "text": "when it receives a message it can it can check all the all the cases in a receive",
    "start": "1548700",
    "end": "1554309"
  },
  {
    "text": "blog and understand how how this message is supposed to be handled and in our",
    "start": "1554309",
    "end": "1559440"
  },
  {
    "text": "case we'll just accept all the messages and we simply you know print it and we",
    "start": "1559440",
    "end": "1564859"
  },
  {
    "text": "send a message back to the sender so this exclamation mark operator here that's just a self a synchronous",
    "start": "1564859",
    "end": "1571529"
  },
  {
    "text": "sentiment you can also implement actors on JVM using ICO framework and",
    "start": "1571529",
    "end": "1579059"
  },
  {
    "start": "1573000",
    "end": "1602000"
  },
  {
    "text": "conceptually it looks the same so we have a class that implements this actor",
    "start": "1579059",
    "end": "1584070"
  },
  {
    "text": "interface it also has a block just implemented as a function as a crucial function with a bunch of key",
    "start": "1584070",
    "end": "1591250"
  },
  {
    "text": "statements and so the same example we accept every single message we print it",
    "start": "1591250",
    "end": "1597700"
  },
  {
    "text": "we send a message back to the center got it so if you think about active tractor",
    "start": "1597700",
    "end": "1604630"
  },
  {
    "start": "1602000",
    "end": "1752000"
  },
  {
    "text": "communication it's always asynchronous it's always non blocking and it's always",
    "start": "1604630",
    "end": "1609640"
  },
  {
    "text": "message based by a message passing and by the way it doesn't mean that you just have to send a message and then wait you",
    "start": "1609640",
    "end": "1616480"
  },
  {
    "text": "know indefinitely because timeouts can and should be used location transparency",
    "start": "1616480",
    "end": "1622870"
  },
  {
    "text": "is a really big deal so if you're not familiar with the concept what it really means if you have two actors actor an",
    "start": "1622870",
    "end": "1630669"
  },
  {
    "text": "actor be an actor a wants to send a message to actor B it doesn't really",
    "start": "1630669",
    "end": "1635710"
  },
  {
    "text": "matter where the actor B is located it can be located in the same JVM process",
    "start": "1635710",
    "end": "1642010"
  },
  {
    "text": "can be located in the same machine or it can be located in a different machine you know in different data center maybe",
    "start": "1642010",
    "end": "1648809"
  },
  {
    "text": "it doesn't matter because the interface to communicate with that actor isn't the same and I think it's really big deal",
    "start": "1648809",
    "end": "1655570"
  },
  {
    "text": "and when you start working with this you know actor driven systems you realize",
    "start": "1655570",
    "end": "1662049"
  },
  {
    "text": "that you don't use you know maybe like Java Opie patterns or some sort of",
    "start": "1662049",
    "end": "1667980"
  },
  {
    "text": "patterns that you use when you deal with classes and methods and functions and all this stuff you realize that the",
    "start": "1667980",
    "end": "1674620"
  },
  {
    "text": "whole system starts to look more like a messaging system like a van driven system like a messaging queue maybe and",
    "start": "1674620",
    "end": "1681159"
  },
  {
    "text": "so if you if you look for patterns in this case i highly recommand the enterprise integration patterns book",
    "start": "1681159",
    "end": "1687940"
  },
  {
    "text": "from I believe 2003 15 years old but it's still so relevant and it contains I",
    "start": "1687940",
    "end": "1697330"
  },
  {
    "text": "think 60 plus different patterns they can use and it was originally implemented sort of as a way to to",
    "start": "1697330",
    "end": "1704049"
  },
  {
    "text": "design message queues and mastering solutions and enterprise services but",
    "start": "1704049",
    "end": "1709960"
  },
  {
    "text": "again it's still really relevant right now if you implement all kinds of aventurine systems and you",
    "start": "1709960",
    "end": "1715539"
  },
  {
    "text": "you want to use all this ideas in actual models one of my favorite authors wonder",
    "start": "1715539",
    "end": "1722979"
  },
  {
    "text": "none he actually published this book a few years ago called reactive mastering patterns with the actor model and what",
    "start": "1722979",
    "end": "1730419"
  },
  {
    "text": "he did he tried to take all the ideas from enterprise integration patterns and applied them to act remodels and I think",
    "start": "1730419",
    "end": "1738129"
  },
  {
    "text": "it's just a really really great resource if you're interested in this stuff so I highly recommend it so now our second",
    "start": "1738129",
    "end": "1746590"
  },
  {
    "text": "story if you're not familiar with bench",
    "start": "1746590",
    "end": "1753879"
  },
  {
    "start": "1752000",
    "end": "1929000"
  },
  {
    "text": "accounting again it's a classic online SAS application for dunya books if",
    "start": "1753879",
    "end": "1760359"
  },
  {
    "text": "you're a small or medium business and North America and this application is used by you know all the customers and",
    "start": "1760359",
    "end": "1767889"
  },
  {
    "text": "also all the internal the keepers so what we did we actually build the whole",
    "start": "1767889",
    "end": "1773109"
  },
  {
    "text": "you know bookkeeping tool change from scratch so we didn't use any external software we implemented you know all",
    "start": "1773109",
    "end": "1779859"
  },
  {
    "text": "kinds of reporting reconciliation received collection and even some OCR",
    "start": "1779859",
    "end": "1785470"
  },
  {
    "text": "and we built a lot of integrations with different you know banks and statement providers and all this and originally it",
    "start": "1785470",
    "end": "1793059"
  },
  {
    "text": "was a big enterprise Java monolith but we transitioned it to a series of Scala",
    "start": "1793059",
    "end": "1799149"
  },
  {
    "text": "maker services with akka so using actual based approach and we implemented a",
    "start": "1799149",
    "end": "1806139"
  },
  {
    "text": "legacy event based system awhile ago for application notifications but that",
    "start": "1806139",
    "end": "1812019"
  },
  {
    "text": "system wasn't really good enough going forward you know because it was designed for just a few specific use cases so the",
    "start": "1812019",
    "end": "1819249"
  },
  {
    "text": "event schema wasn't extendable and it just wasn't built for micro services because well we had monolith and it had",
    "start": "1819249",
    "end": "1827409"
  },
  {
    "text": "a bunch of coupling with different internal systems and we also got a bunch of new requirements we wanted to",
    "start": "1827409",
    "end": "1834429"
  },
  {
    "text": "introduce real time messaging for our web and mobile clients and we wanted to",
    "start": "1834429",
    "end": "1840249"
  },
  {
    "text": "have a framework for producing and consuming different domain events and commands",
    "start": "1840249",
    "end": "1846029"
  },
  {
    "text": "so both point to point and publish/subscribe channels and otherwise",
    "start": "1846029",
    "end": "1852210"
  },
  {
    "text": "it looked you know really similar to what I described for Demonware so pretty",
    "start": "1852210",
    "end": "1857850"
  },
  {
    "text": "much the same asynchronous communication model and again this is what a very high",
    "start": "1857850",
    "end": "1865620"
  },
  {
    "text": "level diagram of a you know sir inter-service communication looks like and you can notice something interesting",
    "start": "1865620",
    "end": "1872700"
  },
  {
    "text": "here in the middle so when service a wants to call a service B in this model",
    "start": "1872700",
    "end": "1878539"
  },
  {
    "text": "how it happens we reused activemq here and well it was was a few years ago so",
    "start": "1878539",
    "end": "1886039"
  },
  {
    "text": "different give us a decent choice and nowadays you know you might as well just use Kafka or some other a message queue",
    "start": "1886039",
    "end": "1891960"
  },
  {
    "text": "it's not that important now but I'm just gonna use active in key here as a reference and so when you send a message",
    "start": "1891960",
    "end": "1899450"
  },
  {
    "text": "when you want to send a message to you know from one service to another first",
    "start": "1899450",
    "end": "1904830"
  },
  {
    "text": "you send this message to you know a single active in queue queue so it goes",
    "start": "1904830",
    "end": "1909899"
  },
  {
    "text": "into that queue we have this special eventing service in the middle that consumes it writes the event into the",
    "start": "1909899",
    "end": "1917460"
  },
  {
    "text": "event store potentially also you know triggering some integrations and then it",
    "start": "1917460",
    "end": "1922980"
  },
  {
    "text": "tries to deliver a message over a queue or a topic and in the an service B",
    "start": "1922980",
    "end": "1928049"
  },
  {
    "text": "receives it and so I mentioned ActiveMQ and if you try to implement",
    "start": "1928049",
    "end": "1935220"
  },
  {
    "start": "1929000",
    "end": "2015000"
  },
  {
    "text": "point-to-point or publish subscribe channel in activemq it's actually really straightforward because for",
    "start": "1935220",
    "end": "1941490"
  },
  {
    "text": "point-to-point channel active in view has a concept of a queue and it's a simple first in first out queue so a",
    "start": "1941490",
    "end": "1948840"
  },
  {
    "text": "single message in single message out and for publish/subscribe channel we have",
    "start": "1948840",
    "end": "1956250"
  },
  {
    "text": "topics and topic it's a single message and and then you know many subscribers",
    "start": "1956250",
    "end": "1961639"
  },
  {
    "text": "but here's an interesting point you know if you if you deal with eggs differently you know that but if you knew when you",
    "start": "1961639",
    "end": "1968309"
  },
  {
    "text": "use topics and you have multiple consumers and one of the consumers you know he's down then all the messages you",
    "start": "1968309",
    "end": "1976649"
  },
  {
    "text": "know they are not gonna be delivered to that service well because it's but when it starts you know it's not",
    "start": "1976649",
    "end": "1982019"
  },
  {
    "text": "gonna receive any messages or its skipped so they just they just completely lost for that consumer and",
    "start": "1982019",
    "end": "1988169"
  },
  {
    "text": "there is a feature called virtual topics that you can use to basically represent a single topic with multiple subscribers",
    "start": "1988169",
    "end": "1996960"
  },
  {
    "text": "as a series of Q's internally for you it's completely transparent you need to think about that too much it's just a",
    "start": "1996960",
    "end": "2003860"
  },
  {
    "text": "bunch of naming conventions but in the end you can actually get published subscribe guarantee on activemq where",
    "start": "2003860",
    "end": "2011059"
  },
  {
    "text": "they guarantee delivery so this is exactly what we wanted and we all see",
    "start": "2011059",
    "end": "2016519"
  },
  {
    "start": "2015000",
    "end": "2108000"
  },
  {
    "text": "you service names for naming our Q's and topics in ActiveMQ but there is also a",
    "start": "2016519",
    "end": "2023119"
  },
  {
    "text": "special topic for what we call global events because some service is actually",
    "start": "2023119",
    "end": "2028879"
  },
  {
    "text": "interested you know in the same event all the time and we're just dedicated a special topic for that and services can",
    "start": "2028879",
    "end": "2038029"
  },
  {
    "text": "subscribe to interested topics basically anytime any actor is created so it's",
    "start": "2038029",
    "end": "2043279"
  },
  {
    "text": "great because you can do that in run time you don't need to restart your application or you need to deploy a verb",
    "start": "2043279",
    "end": "2048888"
  },
  {
    "text": "from you they need to change configuration if there is a way for your application logic to understand aha now",
    "start": "2048889",
    "end": "2055010"
  },
  {
    "text": "we need to listen you know for this particular topic or for this particular queue it can actually just create a new",
    "start": "2055010",
    "end": "2060440"
  },
  {
    "text": "actor and done it works and in this model we we support three different",
    "start": "2060440",
    "end": "2067790"
  },
  {
    "text": "modes of operation so we have a point-to-point channel and in this case",
    "start": "2067790",
    "end": "2074599"
  },
  {
    "text": "it's actually a perfect fit for commands right so you can want to command a service to do something use a",
    "start": "2074599",
    "end": "2080690"
  },
  {
    "text": "point-to-point channel and use an active mq q mechanism you can also use a",
    "start": "2080690",
    "end": "2087050"
  },
  {
    "text": "publish subscribe channel and you would use a virtual topic in this case just to",
    "start": "2087050",
    "end": "2092898"
  },
  {
    "text": "achieve this guaranteed delivery and well for that global events topic roles have a global publish subscribe channel",
    "start": "2092899",
    "end": "2099440"
  },
  {
    "text": "so it's also available for service to use and it's also a guaranteed",
    "start": "2099440",
    "end": "2105619"
  },
  {
    "text": "deliveries in this virtual tour the future our secret sauce",
    "start": "2105619",
    "end": "2110810"
  },
  {
    "start": "2108000",
    "end": "2190000"
  },
  {
    "text": "betcha camel I'm sure if you heard a lot about this but it's actually an integration",
    "start": "2110810",
    "end": "2116500"
  },
  {
    "text": "framework that implements those enterprise integration patterns that I mentioned a few slides ago and there's",
    "start": "2116500",
    "end": "2123280"
  },
  {
    "text": "an akka camel official echo library it's not deprecated and there's an",
    "start": "2123280",
    "end": "2129220"
  },
  {
    "text": "alternative but I think I could come all still great it still it so just works whew but you know feel free to check",
    "start": "2129220",
    "end": "2136359"
  },
  {
    "text": "both libraries and can beast with Java or Scala and my ex-colleague gm1 set",
    "start": "2136359",
    "end": "2146050"
  },
  {
    "text": "it's the most unknown coolest library out there so Trust VM and this is what a",
    "start": "2146050",
    "end": "2154630"
  },
  {
    "text": "typical consumer site would look like so we have an active come QQ or topic on",
    "start": "2154630",
    "end": "2160150"
  },
  {
    "text": "the Left we use internally this tectum queue consumer so it pulls data and it",
    "start": "2160150",
    "end": "2166420"
  },
  {
    "text": "keeps data in this prefetch buffer and then we just trust like a camel to do",
    "start": "2166420",
    "end": "2172180"
  },
  {
    "text": "all kinds of translation and this realization it basically knows how to talk to ActiveMQ consumer and how to",
    "start": "2172180",
    "end": "2179200"
  },
  {
    "text": "talk to the actor model so it takes all those messages and it translates it to a",
    "start": "2179200",
    "end": "2184390"
  },
  {
    "text": "series of messages to your you know to your actor and it's great very simple",
    "start": "2184390",
    "end": "2192250"
  },
  {
    "start": "2190000",
    "end": "2324000"
  },
  {
    "text": "example let's say we have this customer service implemented as an actor and we",
    "start": "2192250",
    "end": "2199240"
  },
  {
    "text": "have an endpoint here right it just just pass to some sort of active MQ topic and",
    "start": "2199240",
    "end": "2206050"
  },
  {
    "text": "you know usually you would configure it in your you know configuration file somewhere or environment variable here",
    "start": "2206050",
    "end": "2212800"
  },
  {
    "text": "is just plain text or for the sake of example and then we have this receive",
    "start": "2212800",
    "end": "2218109"
  },
  {
    "text": "block and if you check at the bottom so line 910 you see this delete command do",
    "start": "2218109",
    "end": "2224920"
  },
  {
    "text": "the count command and so this is just a typical message an actor can receive and",
    "start": "2224920",
    "end": "2230160"
  },
  {
    "text": "usually what happens you know another actor in the same system you know would send this command if it decides that you",
    "start": "2230160",
    "end": "2237880"
  },
  {
    "text": "know particular account should be deleted so we can just say I'm send a message to this customer service and say",
    "start": "2237880",
    "end": "2243880"
  },
  {
    "text": "hey please delete this account and well you trust the other actor just because you you know we're on the same",
    "start": "2243880",
    "end": "2250020"
  },
  {
    "text": "insane Liam the same actual model but another actor remotely can also trigger",
    "start": "2250020",
    "end": "2257170"
  },
  {
    "text": "this command and what we implement it you can also well call the same",
    "start": "2257170",
    "end": "2264790"
  },
  {
    "text": "functionality over the network using the cue and in this case we have a special",
    "start": "2264790",
    "end": "2270300"
  },
  {
    "text": "camel message rapper so I could camel by default wraps all the messages in this",
    "start": "2270300",
    "end": "2276010"
  },
  {
    "text": "academic wrapper class but you can use some implicit scowl implicit and some",
    "start": "2276010",
    "end": "2281410"
  },
  {
    "text": "magic to basically quickly understand what kind of type this event is and then",
    "start": "2281410",
    "end": "2287770"
  },
  {
    "text": "just translate it to the delete account command so you you trigger the same logic you took the same logic just the",
    "start": "2287770",
    "end": "2296170"
  },
  {
    "text": "way you know any other local actor would do it and it do it literally with just a single line of code and it's still some",
    "start": "2296170",
    "end": "2303100"
  },
  {
    "text": "translations or I still like it and I still think that you know if you if you spend enough time you know playing with",
    "start": "2303100",
    "end": "2309970"
  },
  {
    "text": "the scallion bliss it's you can just completely you know eliminate the first case but we just decided to keep it",
    "start": "2309970",
    "end": "2317110"
  },
  {
    "text": "because it's it's very expressive and you sort of you know what happens and you can add some additional logging here",
    "start": "2317110",
    "end": "2322300"
  },
  {
    "text": "so we decided to stick with this and our producing side again very similar to the",
    "start": "2322300",
    "end": "2330010"
  },
  {
    "start": "2324000",
    "end": "2351000"
  },
  {
    "text": "consuming one it's very straight forward as well so any actor can just decide to",
    "start": "2330010",
    "end": "2335440"
  },
  {
    "text": "send a message to another destination and the service and wieszczyk a camel",
    "start": "2335440",
    "end": "2340630"
  },
  {
    "text": "for civilization and caught all kinds of routing and configuration and who's ActiveMQ producer in the end to produce",
    "start": "2340630",
    "end": "2348070"
  },
  {
    "text": "data to a topic or a cue and this is what a typical you know usage of an",
    "start": "2348070",
    "end": "2355960"
  },
  {
    "start": "2351000",
    "end": "2387000"
  },
  {
    "text": "event publisher looks like so we have a few examples here where we in the first",
    "start": "2355960",
    "end": "2361930"
  },
  {
    "text": "case we just want to do with a classic pops up so we construct some sort of event and then we can broadcast this",
    "start": "2361930",
    "end": "2369640"
  },
  {
    "text": "event in the second example we want to send a command so it's still called",
    "start": "2369640",
    "end": "2376000"
  },
  {
    "text": "event on Kaira that's just an example so we can generate this command and then send it",
    "start": "2376000",
    "end": "2382289"
  },
  {
    "text": "directly to a specific service that's another use case and remember I",
    "start": "2382289",
    "end": "2388289"
  },
  {
    "start": "2387000",
    "end": "2414000"
  },
  {
    "text": "mentioned this eventing service so like a special thing in the middle so what it does it actually sends for all the all",
    "start": "2388289",
    "end": "2394979"
  },
  {
    "text": "the events and commands you publish it receives all of them writes it to an event store and then acknowledges every",
    "start": "2394979",
    "end": "2402119"
  },
  {
    "text": "single message so producer knows that the message was at least delivered to the event store and then he tries to",
    "start": "2402119",
    "end": "2409109"
  },
  {
    "text": "forward the message and deliver it to the destination so why do we need this",
    "start": "2409109",
    "end": "2414420"
  },
  {
    "text": "router service in the middle well actually if you have something like that then all routing logic is handled in one",
    "start": "2414420",
    "end": "2422579"
  },
  {
    "text": "place and if you decide to iterate on it you don't need to redeploy you know every single micro service in your",
    "start": "2422579",
    "end": "2427950"
  },
  {
    "text": "system you just redeploy a single piece of software and all your producers they just know how to talk to the eventing",
    "start": "2427950",
    "end": "2434579"
  },
  {
    "text": "service they don't need to know how to talk to all the other services in the system so it's a simple router in",
    "start": "2434579",
    "end": "2440279"
  },
  {
    "text": "between and because of that we can actually simplify all the consumers and producers drastically right because they",
    "start": "2440279",
    "end": "2446400"
  },
  {
    "text": "just need to to do one thing well and in this case you also have an event store",
    "start": "2446400",
    "end": "2452069"
  },
  {
    "text": "that contains different types of data right so it's super useful for all kinds",
    "start": "2452069",
    "end": "2457709"
  },
  {
    "text": "of data analysis and some other use cases so it's just it's just great",
    "start": "2457709",
    "end": "2463949"
  },
  {
    "text": "benefit if you can sort of combine different data from different servers and put it in the same place so the",
    "start": "2463949",
    "end": "2471209"
  },
  {
    "start": "2470000",
    "end": "2502000"
  },
  {
    "text": "summary event framework in bench accounting its actor based using",
    "start": "2471209",
    "end": "2477959"
  },
  {
    "text": "consumers and producers by apache camel producers can acknowledge messages and",
    "start": "2477959",
    "end": "2484410"
  },
  {
    "text": "it has a non-blocking i/o just by by definition because with actors and we",
    "start": "2484410",
    "end": "2490140"
  },
  {
    "text": "used apache activemq as a transport so now some of the lessons we learned you know building all",
    "start": "2490140",
    "end": "2496949"
  },
  {
    "text": "this stuff you can think about actors I think that",
    "start": "2496949",
    "end": "2505290"
  },
  {
    "start": "2502000",
    "end": "2646000"
  },
  {
    "text": "semantics you know it's really important it is a huge benefit that actors support",
    "start": "2505290",
    "end": "2510900"
  },
  {
    "text": "message-passing natively and if you think about asynchronous communication and allocation transparency at the same",
    "start": "2510900",
    "end": "2517890"
  },
  {
    "text": "time by default it is a really easy to migrate actors between you know between",
    "start": "2517890",
    "end": "2524490"
  },
  {
    "text": "the services and migrate them between the you know boundaries over the network",
    "start": "2524490",
    "end": "2530120"
  },
  {
    "text": "again because it's the same way for an actor to talk to a local actor and it's",
    "start": "2530120",
    "end": "2536160"
  },
  {
    "text": "the same way for an actor to talk to a remote actor so if you haven't 111 implemented part of it as an actor",
    "start": "2536160",
    "end": "2543000"
  },
  {
    "text": "system then it can migrate you know most of the actors over the network and you",
    "start": "2543000",
    "end": "2548460"
  },
  {
    "text": "don't really need to you know build EP eyes and clients and schemas and all",
    "start": "2548460",
    "end": "2554100"
  },
  {
    "text": "this stuff because well the async recommendation just handled for you and I can also talk about some other",
    "start": "2554100",
    "end": "2560130"
  },
  {
    "text": "benefits but it's probably a topic for for the next presentation so some of the",
    "start": "2560130",
    "end": "2568050"
  },
  {
    "text": "recommendations I still love the main driven design and enterprise integration patterns I still those are really",
    "start": "2568050",
    "end": "2574020"
  },
  {
    "text": "relevant nowadays especially because we you know build and we deploy more and more benjamín systems and you should",
    "start": "2574020",
    "end": "2581970"
  },
  {
    "text": "really understand in the main space and you should really understand if you want to support you know advanced commands or",
    "start": "2581970",
    "end": "2588120"
  },
  {
    "text": "documents for all of them you will have to handle you know you will have to explicitly handle every single failure",
    "start": "2588120",
    "end": "2594990"
  },
  {
    "text": "in this case because well they will happen eventually and an advanced or it",
    "start": "2594990",
    "end": "2600780"
  },
  {
    "text": "can be used for so many things if you implemented properly just for",
    "start": "2600780",
    "end": "2606180"
  },
  {
    "text": "start you can use it for tracing and all kinds of debugging but later you can also use it for auditing and if you",
    "start": "2606180",
    "end": "2612720"
  },
  {
    "text": "don't have any sort of data platform data ie code data warehouse it can be",
    "start": "2612720",
    "end": "2617760"
  },
  {
    "text": "just the first first attempt to have a thing like that so access or not it really depends I",
    "start": "2617760",
    "end": "2625770"
  },
  {
    "text": "think I just show you that it's possible to build asynchronous non-blocking systems with you know languages like",
    "start": "2625770",
    "end": "2633340"
  },
  {
    "text": "like python or well maybe no js' or Java but of course you know if you use a",
    "start": "2633340",
    "end": "2638860"
  },
  {
    "text": "language with actors I think it's just it's a really great fit for all this asynchronous communication in the end",
    "start": "2638860",
    "end": "2646230"
  },
  {
    "start": "2646000",
    "end": "2749000"
  },
  {
    "text": "and I think that now you should really if you if you want to implement a system",
    "start": "2646230",
    "end": "2651310"
  },
  {
    "text": "like that you should really consider what messaging or what transport layer you should use because well yeah Pacha",
    "start": "2651310",
    "end": "2658630"
  },
  {
    "text": "Kafka is great and it can handle a really really impressive scale but at the same time it wasn't really built as",
    "start": "2658630",
    "end": "2664810"
  },
  {
    "text": "a general-purpose messaging queue right and it lacks some of the features and some of them were just recently",
    "start": "2664810",
    "end": "2670000"
  },
  {
    "text": "introduced so you should carefully understand what you want to use in the end and you need to also understand if",
    "start": "2670000",
    "end": "2677590"
  },
  {
    "text": "your use cases are you know depending on low latency or high throughput and in",
    "start": "2677590",
    "end": "2684100"
  },
  {
    "text": "the end it's perfectly fine to have you know different channels with different characteristics and do you really need",
    "start": "2684100",
    "end": "2691900"
  },
  {
    "text": "exactly one semantics it's really expensive to have it and I",
    "start": "2691900",
    "end": "2697240"
  },
  {
    "text": "don't think that every single use case in your system needs it I didn't have a chance to talk a lot about message",
    "start": "2697240",
    "end": "2703210"
  },
  {
    "text": "formats and schemas but those are extremely important and you know I'm happy to talk to anyone about this stuff",
    "start": "2703210",
    "end": "2708730"
  },
  {
    "text": "because I love it and I think personal that you choose you need to choose binary formats like Prada before Avro",
    "start": "2708730",
    "end": "2715860"
  },
  {
    "text": "but if you use something like JSON then please PLEASE invest into you know schema registry and design a scheme",
    "start": "2715860",
    "end": "2723100"
  },
  {
    "text": "evolution strategy before you start sending a bunch of advanced in production and also another really",
    "start": "2723100",
    "end": "2730990"
  },
  {
    "text": "useful technique if you deal with a bunch of masters in your system I would consider splitting them into the",
    "start": "2730990",
    "end": "2737200"
  },
  {
    "text": "envelope or metadata and the payload and you know advanced and commands could",
    "start": "2737200",
    "end": "2743470"
  },
  {
    "text": "probably share the same envelope and different types of events can could also share the same envelope find out some",
    "start": "2743470",
    "end": "2750400"
  },
  {
    "start": "2749000",
    "end": "2843000"
  },
  {
    "text": "challenges the main challenge obviously we still - attached to the synchronous",
    "start": "2750400",
    "end": "2756190"
  },
  {
    "text": "request response paradigm it's just everywhere and it takes time to learn how to live in this asynchronous world I",
    "start": "2756190",
    "end": "2763810"
  },
  {
    "text": "believe that high coupling will Nakia what I mean when you have a you",
    "start": "2763810",
    "end": "2769960"
  },
  {
    "text": "know just handful of services and you know handle of event types it's kind of",
    "start": "2769960",
    "end": "2775150"
  },
  {
    "text": "obvious how to route all those events and how to deal with all this you know publishers producers and consumers but",
    "start": "2775150",
    "end": "2783310"
  },
  {
    "text": "when you start you know to have ten plus or a hundred plus were even more micro",
    "start": "2783310",
    "end": "2789010"
  },
  {
    "text": "services and you just maybe stick to the synchronous paradigm or you use commands",
    "start": "2789010",
    "end": "2795700"
  },
  {
    "text": "which is also you know a very very synchronous style in its nature the the",
    "start": "2795700",
    "end": "2802660"
  },
  {
    "text": "coupling will just kill you right because it's very hard to maintain all the connections with all between all",
    "start": "2802660",
    "end": "2808840"
  },
  {
    "text": "those things and I recommend to stick to events as much as you can and use",
    "start": "2808840",
    "end": "2814120"
  },
  {
    "text": "commands you know unlike in a very rare use cases and it's still a big challenge",
    "start": "2814120",
    "end": "2823300"
  },
  {
    "text": "to you know if you run Kafka for example it's a really big challenge to maintain you know properly partitioned replicated",
    "start": "2823300",
    "end": "2830890"
  },
  {
    "text": "monitored message broker cluster so you know if you can rely on things like Kinesis or you know Google's pops up",
    "start": "2830890",
    "end": "2838270"
  },
  {
    "text": "managed services are gonna make your life easy finally I think that it's",
    "start": "2838270",
    "end": "2846940"
  },
  {
    "start": "2843000",
    "end": "2985000"
  },
  {
    "text": "actually if you can just want to start implementing a system like that it's really straightforward to replace your",
    "start": "2846940",
    "end": "2852280"
  },
  {
    "text": "rights with events but it's really hard to replace your needs and well sometimes",
    "start": "2852280",
    "end": "2858340"
  },
  {
    "text": "it's fine to just you know use synchronous communications for some specific use cases but if you want to",
    "start": "2858340",
    "end": "2865390"
  },
  {
    "text": "fully embrace micro services and event-driven systems you will probably end up with something like you know that",
    "start": "2865390",
    "end": "2871390"
  },
  {
    "text": "abides in the normalization or some sort of in-memory data structures or caching or stream processing so previous",
    "start": "2871390",
    "end": "2878890"
  },
  {
    "text": "presentation was actually a really good example you know how we can deal with different sort of read and write paths",
    "start": "2878890",
    "end": "2884350"
  },
  {
    "text": "and when you have you know really a lot of producers and consumers just",
    "start": "2884350",
    "end": "2889660"
  },
  {
    "text": "scattered across the same service you know it starts to feel you know really",
    "start": "2889660",
    "end": "2894880"
  },
  {
    "text": "complicated to see the full picture so I learned that if you use state and sequence diagrams you can",
    "start": "2894880",
    "end": "2901250"
  },
  {
    "text": "actually see all the businesses cases you know easily and you will probably",
    "start": "2901250",
    "end": "2907070"
  },
  {
    "text": "end up with some sort of distributed tracing in the end because when you have a lot of those producers and consumers",
    "start": "2907070",
    "end": "2912680"
  },
  {
    "text": "is just a requirement and obviously it's also requirement to have appropriate",
    "start": "2912680",
    "end": "2918320"
  },
  {
    "text": "monitoring and alerting just because when when you deal with synchronous communication and things fail usually",
    "start": "2918320",
    "end": "2924890"
  },
  {
    "text": "understand right away you know you see some sort of 500 error page but here you",
    "start": "2924890",
    "end": "2930320"
  },
  {
    "text": "know we send an event and then you expect to reply back when things fail it might be really hard to understand that",
    "start": "2930320",
    "end": "2936290"
  },
  {
    "text": "it's actually happening so we need to invest in a proper monitoring and alerting and remember that sign up page",
    "start": "2936290",
    "end": "2943550"
  },
  {
    "text": "use case I described at the beginning so well the solution was really simple we",
    "start": "2943550",
    "end": "2949610"
  },
  {
    "text": "just we just we just kept the the critical path for for the user sign up you know really really slim and in the",
    "start": "2949610",
    "end": "2956840"
  },
  {
    "text": "anta to just you know trigger an event that a user has sign up and we built all",
    "start": "2956840",
    "end": "2962600"
  },
  {
    "text": "the other integrations and all the other systems around this event as a as as consumers I just I just wanted really",
    "start": "2962600",
    "end": "2970250"
  },
  {
    "text": "sangd every day and puddle because without their help you know this presentation wouldn't happen and now I'm happy to answer any",
    "start": "2970250",
    "end": "2977630"
  },
  {
    "text": "questions and I believe I have I have time for for a few questions now any",
    "start": "2977630",
    "end": "2983300"
  },
  {
    "text": "questions",
    "start": "2983300",
    "end": "2985720"
  },
  {
    "start": "2985000",
    "end": "3239000"
  },
  {
    "text": "right there no oh in the back",
    "start": "2989080",
    "end": "2997750"
  },
  {
    "text": "hello and eventually you have small services that talk to each other via",
    "start": "3008020",
    "end": "3014530"
  },
  {
    "text": "events but where is the orchestration happened because you need like full",
    "start": "3014530",
    "end": "3019720"
  },
  {
    "text": "business logic to talk to this service and it produces went to death service so well the moment to introduce some sort",
    "start": "3019720",
    "end": "3026619"
  },
  {
    "text": "of orchestration that that's your bottleneck right so that's why I mentioned something like sequence",
    "start": "3026619",
    "end": "3031840"
  },
  {
    "text": "diagrams you just have to serve just have to keep track of of this and you",
    "start": "3031840",
    "end": "3037660"
  },
  {
    "text": "know you can hear something like a service mash or you know some other tools and people use nowadays but they",
    "start": "3037660",
    "end": "3042820"
  },
  {
    "text": "they don't really help you with this right path that I mentioned right so if you use events to just trigger some",
    "start": "3042820",
    "end": "3049510"
  },
  {
    "text": "actions that's just the way to go right and you rely on monitoring and tracing",
    "start": "3049510",
    "end": "3055480"
  },
  {
    "text": "but you you know in my in my experience you just don't use any sort of orchestration on top of the system",
    "start": "3055480",
    "end": "3061869"
  },
  {
    "text": "because it's perfectly good you know by itself I hope answer your question the",
    "start": "3061869",
    "end": "3073030"
  },
  {
    "text": "questions one more over here",
    "start": "3073030",
    "end": "3078300"
  },
  {
    "text": "yes just asking right now about in case of multicolor string how do you handle",
    "start": "3083040",
    "end": "3089980"
  },
  {
    "text": "if you have multiple consumers and all of them are going to do exactly the same you have multiple crystal each one doing",
    "start": "3089980",
    "end": "3095830"
  },
  {
    "text": "the same action so how are you going to handle this if you are going to have multiple actors doing the same to effect",
    "start": "3095830",
    "end": "3101920"
  },
  {
    "text": "something in database so multi you are following oh I see so so when use",
    "start": "3101920",
    "end": "3109930"
  },
  {
    "text": "actors/actresses stateful right so what you can do if you have some sort of",
    "start": "3109930",
    "end": "3115180"
  },
  {
    "text": "service that does some database tries or some you know you know deals with some",
    "start": "3115180",
    "end": "3120340"
  },
  {
    "text": "sort of integration you can actually keep state inside an actor a single actor so you don't really have this",
    "start": "3120340",
    "end": "3126100"
  },
  {
    "text": "concurrency issues if I understand it correctly that's what they're asking because every actor just deals with a",
    "start": "3126100",
    "end": "3132730"
  },
  {
    "text": "single operation by itself right so when when there's a write request you know it",
    "start": "3132730",
    "end": "3138610"
  },
  {
    "text": "just it just goes to a single actor which is atomic inside so in the end you",
    "start": "3138610",
    "end": "3143830"
  },
  {
    "text": "just don't have this you know concurrency problems that you might have wanna deal with you know classica databases last question",
    "start": "3143830",
    "end": "3156150"
  },
  {
    "text": "should our services be slim as possible or is that any overhead or balancing",
    "start": "3159830",
    "end": "3166730"
  },
  {
    "text": "issues on there - because at some point we begin to use the messaging tool more",
    "start": "3166730",
    "end": "3173690"
  },
  {
    "text": "and more and will bring some way to throughout so yeah that's a question",
    "start": "3173690",
    "end": "3182150"
  },
  {
    "text": "about microservices boundaries right and basically all the all the trade-offs and",
    "start": "3182150",
    "end": "3187520"
  },
  {
    "text": "that's again that's a whole presentation by itself but what I like to refer I",
    "start": "3187520",
    "end": "3192590"
  },
  {
    "text": "want to go ask a question like that check bounded contexts in the main",
    "start": "3192590",
    "end": "3197870"
  },
  {
    "text": "driven design so we can actually understand what is the proper word for your specific domain space right and it",
    "start": "3197870",
    "end": "3204560"
  },
  {
    "text": "can go as you know as wide as a monolith to a really small microservices you know",
    "start": "3204560",
    "end": "3210140"
  },
  {
    "text": "future lines of code and yeah I don't think there is a very generic recommendation that it can just use and",
    "start": "3210140",
    "end": "3217160"
  },
  {
    "text": "I would prefer to always go from very big services to smaller services and in",
    "start": "3217160",
    "end": "3222410"
  },
  {
    "text": "the end maybe the micro services when you need to write but I wouldn't go to like hundreds of services from scratch",
    "start": "3222410",
    "end": "3228170"
  },
  {
    "text": "just because it's cool or more reliable or whatever right great job yourself",
    "start": "3228170",
    "end": "3234500"
  },
  {
    "text": "thank you [Applause]",
    "start": "3234500",
    "end": "3239829"
  }
]