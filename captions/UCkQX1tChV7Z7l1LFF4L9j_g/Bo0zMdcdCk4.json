[
  {
    "text": "foreign [Music]",
    "start": "1380",
    "end": "14289"
  },
  {
    "text": "devices such as gpus are present in almost every Computing system today for",
    "start": "15139",
    "end": "20520"
  },
  {
    "text": "example mobile devices contains a multi-core CPU plus an integrated GPU",
    "start": "20520",
    "end": "25740"
  },
  {
    "text": "laptops usually contains two gpus one that is integrated into the main CPU and",
    "start": "25740",
    "end": "31619"
  },
  {
    "text": "one that is dedicated usually for for gaming even data centers are also integrating devices such as fpgas",
    "start": "31619",
    "end": "39239"
  },
  {
    "text": "all of these devices help to increase performance run more efficient workloads",
    "start": "39239",
    "end": "45180"
  },
  {
    "text": "so heterogeneous devices are here and are here to stay so parameters of current and future Computing system need",
    "start": "45180",
    "end": "52320"
  },
  {
    "text": "to handle execution on a wide and diverse set of computing devices",
    "start": "52320",
    "end": "57780"
  },
  {
    "text": "however many many of the parallel programming Frameworks for these devices are based on C and C plus plus primary",
    "start": "57780",
    "end": "64920"
  },
  {
    "text": "language and transparing execution from other languages such as Java is almost absent",
    "start": "64920",
    "end": "71100"
  },
  {
    "text": "and that's why we introduced tornado VM so in a nutshell tonervm is a high",
    "start": "71100",
    "end": "76320"
  },
  {
    "text": "performance computer platform for jvm so Java developers can benefit from",
    "start": "76320",
    "end": "81720"
  },
  {
    "text": "execution on gpus fpga's multi-core in an automatic manner",
    "start": "81720",
    "end": "87060"
  },
  {
    "text": "in this presentation I will focus on probability and how developers can use tornado VM to accelerate their",
    "start": "87060",
    "end": "93900"
  },
  {
    "text": "applications so I hope I picked your curiosity and if you are interested stay with me I'm",
    "start": "93900",
    "end": "100140"
  },
  {
    "text": "confumero rsf fellow at the University of Manchester I'm the lead developer and architect of the Turner VM project",
    "start": "100140",
    "end": "108000"
  },
  {
    "text": "so today I'm gonna talk about the following topics I'm going to introduce some",
    "start": "108000",
    "end": "113880"
  },
  {
    "text": "technology and I'm going to motivate a bit further the project and then I'm gonna dive in into the",
    "start": "113880",
    "end": "119520"
  },
  {
    "text": "probability so Turner VM has currently two ways of programming or two apis one",
    "start": "119520",
    "end": "125219"
  },
  {
    "text": "is called Loop parallel API and the second is called parallel kernel API so we will explain each of them and I will",
    "start": "125219",
    "end": "132239"
  },
  {
    "text": "show you some performance results then I will explain how tornado",
    "start": "132239",
    "end": "139260"
  },
  {
    "text": "translates from the Java code to the actual parallel Hardware how turning the maps the application",
    "start": "139260",
    "end": "145260"
  },
  {
    "text": "to parallel hardware and finally I will show you how to know VM is being pilot in Industry with some use cases",
    "start": "145260",
    "end": "152819"
  },
  {
    "text": "so let's dive into it so the question is how to access heterogeneous Hardware right now",
    "start": "152819",
    "end": "160200"
  },
  {
    "text": "um at the bottom I show you different Hardware CPUs gpus fpgas Etc at the top",
    "start": "160200",
    "end": "166140"
  },
  {
    "text": "level I show you different high-level primary languages and for this presentation we will stay with Java but",
    "start": "166140",
    "end": "171420"
  },
  {
    "text": "similar situation applies for other other primary language languages",
    "start": "171420",
    "end": "177480"
  },
  {
    "text": "so if you choose Java Java is executing on top of a visual machine and open jdks and implementation of the virtual",
    "start": "177480",
    "end": "183420"
  },
  {
    "text": "machine but also Cloud VM correito jdk all of them Works in a similar way so",
    "start": "183420",
    "end": "188940"
  },
  {
    "text": "essentially your application is translated from the top Java source code to bytecode and then the VM executes the",
    "start": "188940",
    "end": "196680"
  },
  {
    "text": "bytecode if the application is run is executed frequently the VM can optimize",
    "start": "196680",
    "end": "203760"
  },
  {
    "text": "The Code by compiling the methods that run frequently into optimized machine code",
    "start": "203760",
    "end": "210900"
  },
  {
    "text": "only for CPU however if you want to access heterogeneous devices such as",
    "start": "210900",
    "end": "216239"
  },
  {
    "text": "gpos or fpgas you have to do it through a dni library or jni call",
    "start": "216239",
    "end": "223920"
  },
  {
    "text": "so essentially the programmer has to import a library and make use of that",
    "start": "223920",
    "end": "229739"
  },
  {
    "text": "Library through a jni call in fact the program in my my",
    "start": "229739",
    "end": "234840"
  },
  {
    "text": "um have an optimized application for one particular GPU but its application of the GPU changes it might have to redo it",
    "start": "234840",
    "end": "241980"
  },
  {
    "text": "again or might have to retune some parameters and this happens also with different vendors of fpgas or different",
    "start": "241980",
    "end": "248780"
  },
  {
    "text": "models even of the of gpus so there is no full deed that works in",
    "start": "248780",
    "end": "256260"
  },
  {
    "text": "the same way that works for CPU right in the sense that can get a frequently",
    "start": "256260",
    "end": "262440"
  },
  {
    "text": "execute methods or frequency execute code and get optimized code for that",
    "start": "262440",
    "end": "267720"
  },
  {
    "text": "architecture there is not such a thing for heterogeneous devices and that's where Tornado VM sits that's",
    "start": "267720",
    "end": "275040"
  },
  {
    "text": "the place of the VM so tunnel VM Works in combination with an existing jdk so",
    "start": "275040",
    "end": "280580"
  },
  {
    "text": "techno VM is a plugin to jdk that allow us to run applications on heterogeneous",
    "start": "280580",
    "end": "287040"
  },
  {
    "text": "Hardware and that's what we propose",
    "start": "287040",
    "end": "292080"
  },
  {
    "text": "so now let's introduce some terminology I need um there are three different",
    "start": "292080",
    "end": "297660"
  },
  {
    "text": "architectures here one CPU and a GPU and an fpga and each architecture is",
    "start": "297660",
    "end": "303900"
  },
  {
    "text": "optimized for different type of workloads for example CPUs are really",
    "start": "303900",
    "end": "309000"
  },
  {
    "text": "optimized for low latency applications while gpus are really optimized for high",
    "start": "309000",
    "end": "314880"
  },
  {
    "text": "throughoutput while fpga is a mixture between them you can get very low latency and very high",
    "start": "314880",
    "end": "321780"
  },
  {
    "text": "throughoutput the VGA the way the way it works is that it's like physically acquiring your",
    "start": "321780",
    "end": "328320"
  },
  {
    "text": "application into Hardware so you having Hardware exactly the pieces you need to",
    "start": "328320",
    "end": "334080"
  },
  {
    "text": "run the application that's why you can get very low latency and you can get higher throughput just",
    "start": "334080",
    "end": "339660"
  },
  {
    "text": "by replicating units so now I want to map these architectures",
    "start": "339660",
    "end": "345419"
  },
  {
    "text": "to existing type of parallelism in the literature you might find you can find",
    "start": "345419",
    "end": "351240"
  },
  {
    "text": "three main type of parallelism task parallelization data parallelization and pipeline parallelization",
    "start": "351240",
    "end": "358500"
  },
  {
    "text": "so CPUs are quite optimized for task parallelization so any of these",
    "start": "358500",
    "end": "364380"
  },
  {
    "text": "architecture actually can use any any type of parallelism but let's say that",
    "start": "364380",
    "end": "370020"
  },
  {
    "text": "CPUs are quite optimized for task polarization Minima meaning that each core can run different tasks",
    "start": "370020",
    "end": "378180"
  },
  {
    "text": "in contrast gpus are quite optimized for running data parallelization meaning",
    "start": "378180",
    "end": "384000"
  },
  {
    "text": "that the code you're gonna run is the same the functions you're going to run is the same but taking different inputs",
    "start": "384000",
    "end": "390660"
  },
  {
    "text": "so that's why that's why data parallelization come from",
    "start": "390660",
    "end": "395880"
  },
  {
    "text": "and then you have fpgas that are quite suitable for representing pipeline parallelization",
    "start": "395880",
    "end": "402000"
  },
  {
    "text": "in fact with some instructions you can enable at destruction level pipeline of",
    "start": "402000",
    "end": "407220"
  },
  {
    "text": "instructions right and that's a very good Target so ideally we want a framework that can",
    "start": "407220",
    "end": "414780"
  },
  {
    "text": "express different type of Pilots parallelism to maximize performance for each type of",
    "start": "414780",
    "end": "420240"
  },
  {
    "text": "device and I will show you how tornovian does it",
    "start": "420240",
    "end": "425580"
  },
  {
    "text": "so now I'm gonna explain internal VM and in an overview",
    "start": "425580",
    "end": "430919"
  },
  {
    "text": "um so Turner VM is a plugin to jdk that allows Java developers to execute",
    "start": "430919",
    "end": "436919"
  },
  {
    "text": "programs on heterogeneous Hardware fully automatic it has an optimized jit",
    "start": "436919",
    "end": "443400"
  },
  {
    "text": "compiler and is specialized for different type of Hardware so the code that is generated for gpus is different",
    "start": "443400",
    "end": "449940"
  },
  {
    "text": "from the code generator for the fpgas or multi-core also multicore systems",
    "start": "449940",
    "end": "457919"
  },
  {
    "text": "a tunnel vienne can also perform task migration between architectures between devices for example tunnavian can run",
    "start": "457919",
    "end": "464940"
  },
  {
    "text": "the application on a GPU for a while and later on Migrate execution without restarting the application to another",
    "start": "464940",
    "end": "471479"
  },
  {
    "text": "GPU or fpga or multi-core and back and forth",
    "start": "471479",
    "end": "477000"
  },
  {
    "text": "and 12 VM the waste program is fully Hardware agnostic so the input",
    "start": "477000",
    "end": "482280"
  },
  {
    "text": "application the source code of the application to be executing on intelligence Hardware",
    "start": "482280",
    "end": "487740"
  },
  {
    "text": "is the same for running on gpus CPUs and fpgs Saturn VN can run with multiple jdk",
    "start": "487740",
    "end": "495240"
  },
  {
    "text": "vendors can run with opengdk growl VM Red Hat mandrel Amazon correto and",
    "start": "495240",
    "end": "502080"
  },
  {
    "text": "windows jdk and it's open source is available on GitHub so if you want you can you can",
    "start": "502080",
    "end": "509160"
  },
  {
    "text": "explore on GitHub so now let me explain uh let me show you",
    "start": "509160",
    "end": "515219"
  },
  {
    "text": "an overview of the system stack of turnerium so at the top level we have an API",
    "start": "515219",
    "end": "521279"
  },
  {
    "text": "and this is because tornado VM exploits parallelism it doesn't detect",
    "start": "521279",
    "end": "528120"
  },
  {
    "text": "paralyzation so we need a way or tornado needs a way to identify where the",
    "start": "528120",
    "end": "534360"
  },
  {
    "text": "parallel currents are located in the source code and that's done through an API",
    "start": "534360",
    "end": "540060"
  },
  {
    "text": "I have an example of the API here in slide and don't worry about the details",
    "start": "540060",
    "end": "546300"
  },
  {
    "text": "because I will show you step by step how to build an application for tuner VM but in a sense",
    "start": "546300",
    "end": "552000"
  },
  {
    "text": "but the novian provide is tasks and each task is a method so tornado",
    "start": "552000",
    "end": "558420"
  },
  {
    "text": "compiles at the method level same as jdk okay or jvm",
    "start": "558420",
    "end": "564480"
  },
  {
    "text": "compiles from the method level to efficient code for gpus and fpgas",
    "start": "564480",
    "end": "571800"
  },
  {
    "text": "and to indicate where the parallelism is apart from the method level it also",
    "start": "571800",
    "end": "577860"
  },
  {
    "text": "provides some annotations in fact tornado provides two two annotations are parallel and out reduce here I show you",
    "start": "577860",
    "end": "583980"
  },
  {
    "text": "an example with ADD parallel with tornado you can also create a group",
    "start": "583980",
    "end": "589380"
  },
  {
    "text": "of methods which means a group of tasks that are going to be compiled together in one compilation unit and that's what",
    "start": "589380",
    "end": "595380"
  },
  {
    "text": "we call task schedule and an example of attached Shadow is here so we have attached Shadow we give",
    "start": "595380",
    "end": "601560"
  },
  {
    "text": "it a name and then we have a set of tasks in this case just one task okay but you can have as many as you want",
    "start": "601560",
    "end": "609420"
  },
  {
    "text": "don't worry about the rest of the details because we will we will go through an example in a bit",
    "start": "609420",
    "end": "614940"
  },
  {
    "text": "so that's at the API level and then we have the tornado beam engine which takes the input expressions from this vehicle",
    "start": "614940",
    "end": "621839"
  },
  {
    "text": "level and generate automatically generate code for different architectures right now Tonya has two back ends",
    "start": "621839",
    "end": "628680"
  },
  {
    "text": "generally called for opencl and Cuda so it has two backends the user can select which one to use or sometimes",
    "start": "628680",
    "end": "636360"
  },
  {
    "text": "tornado can just pick one best to choose and run there",
    "start": "636360",
    "end": "642319"
  },
  {
    "text": "so for the rest of the presentation I'm gonna focus on the API level and we will discuss how uh tournament can be used to",
    "start": "642899",
    "end": "651120"
  },
  {
    "text": "accelerate Java applications so we're going to start with an example",
    "start": "651120",
    "end": "656279"
  },
  {
    "text": "I'm going to use the blue filter the blue filter is a photograph is a",
    "start": "656279",
    "end": "661740"
  },
  {
    "text": "filter for photography so essentially you have a picture and you want to make a blue effect in that picture",
    "start": "661740",
    "end": "668459"
  },
  {
    "text": "all the examples I show in these presentations are available on GitHub so feel free to check out the code and feel",
    "start": "668459",
    "end": "675660"
  },
  {
    "text": "free to follow the code along with explanation here",
    "start": "675660",
    "end": "680420"
  },
  {
    "text": "before going to the details of House program I want to show you performance of this application running on on a",
    "start": "680700",
    "end": "687899"
  },
  {
    "text": "heterogeneous Hardware here I show you um three four different implementations",
    "start": "687899",
    "end": "694440"
  },
  {
    "text": "the first one the red using parallel stream so it's gonna run on CPU and the",
    "start": "694440",
    "end": "700260"
  },
  {
    "text": "implementation is using streams Java streams there is no GPU underneath there is nothing it's just Java with parallel",
    "start": "700260",
    "end": "707820"
  },
  {
    "text": "streams and the number represents the speed up against Java sequential so the",
    "start": "707820",
    "end": "713399"
  },
  {
    "text": "higher the better and I run this on my laptop I have 16 cores on my laptop and the speed I get",
    "start": "713399",
    "end": "719160"
  },
  {
    "text": "is 11.4 it's quite good it's not linear but quite close",
    "start": "719160",
    "end": "724920"
  },
  {
    "text": "if I run this with tornado on a multi-core I can get better speed up still I'm using 16 cores but I get 60 17",
    "start": "724920",
    "end": "733200"
  },
  {
    "text": "x performance compared to Java this is because tornado generates opencl for CPU",
    "start": "733200",
    "end": "739800"
  },
  {
    "text": "and open CI is very good at vectorizing code so it's using Vector units",
    "start": "739800",
    "end": "745079"
  },
  {
    "text": "maybe those Vector units are not easy accessible when you compile from java",
    "start": "745079",
    "end": "750480"
  },
  {
    "text": "streams that's why you can get a better performance if we run the application on internet",
    "start": "750480",
    "end": "756480"
  },
  {
    "text": "Graphics we can get up to 19x Performance and if we run application on the GPU I",
    "start": "756480",
    "end": "762839"
  },
  {
    "text": "have on my laptop we can get up to 340x Performance",
    "start": "762839",
    "end": "768060"
  },
  {
    "text": "it's quite handy okay and I run the image it's an image of 5K",
    "start": "768060",
    "end": "774300"
  },
  {
    "text": "pixels by 4K pixel I think it's pretty standard for any camera nowadays",
    "start": "774300",
    "end": "780860"
  },
  {
    "text": "and if we compare the speed as we get against the parallel version of the Java",
    "start": "780860",
    "end": "786000"
  },
  {
    "text": "streams which is what you can get right now in Java we can get up to 30 times faster if we run on the GPU",
    "start": "786000",
    "end": "794959"
  },
  {
    "text": "right so how is this implemented the blue filter has the following",
    "start": "794959",
    "end": "800579"
  },
  {
    "text": "pattern so um as you can see here in the slide it has two Loops to iterate over the",
    "start": "800579",
    "end": "808279"
  },
  {
    "text": "x-axis of the picture so the egg yeah the x-axis of the picture and the",
    "start": "808279",
    "end": "814260"
  },
  {
    "text": "y-axis of the picture so X and Y coordinates and then you apply",
    "start": "814260",
    "end": "820260"
  },
  {
    "text": "the filter so for the specific of the filter just please go check the code online",
    "start": "820260",
    "end": "826200"
  },
  {
    "text": "is basically a map operator so for every pixel I apply a filter a function",
    "start": "826200",
    "end": "832620"
  },
  {
    "text": "and this is data parallelization essentially because every pixel can be compute independently of any other pixel",
    "start": "832620",
    "end": "839639"
  },
  {
    "text": "so the first thing to do in tornado is to annotate the code and",
    "start": "839639",
    "end": "845880"
  },
  {
    "text": "as I say because the pixel can be compute in parallel",
    "start": "845880",
    "end": "851160"
  },
  {
    "text": "what we do is to add annotation at parallel for these two loops meaning that we tell tornado these two Loops can",
    "start": "851160",
    "end": "859320"
  },
  {
    "text": "be fully computed in parallel and we have two level of parallelization here 2D kernel or to the parallel Loop",
    "start": "859320",
    "end": "867300"
  },
  {
    "text": "in fact this is uh quite um common on gpus so in contact with CPU",
    "start": "867300",
    "end": "874079"
  },
  {
    "text": "architectures which we have one level of realization we have 10 threads 16 Triads",
    "start": "874079",
    "end": "879779"
  },
  {
    "text": "or 50 threads on GPS we can Define 2D level polarization even 3D level of",
    "start": "879779",
    "end": "885899"
  },
  {
    "text": "publicization and it's because gpus are mostly creative for rendering graphics",
    "start": "885899",
    "end": "891480"
  },
  {
    "text": "and Graphics are image of pixels x pixels and white pixels",
    "start": "891480",
    "end": "897000"
  },
  {
    "text": "okay so the first thing to do is to annotate the code and the second thing and by annotating",
    "start": "897000",
    "end": "904380"
  },
  {
    "text": "the code we Define the data parallelization and the second thing is to define the tasks so because it's a",
    "start": "904380",
    "end": "910860"
  },
  {
    "text": "picture we can split the task in three channels the picture is represented with three",
    "start": "910860",
    "end": "916380"
  },
  {
    "text": "channels RGB red blue green and we're gonna do is to compute in",
    "start": "916380",
    "end": "923100"
  },
  {
    "text": "parallel each of the channels red Channel green Channel a blue channel for that we need to create three tasks",
    "start": "923100",
    "end": "930240"
  },
  {
    "text": "so we have a task schedule is an object that tornado provides",
    "start": "930240",
    "end": "935880"
  },
  {
    "text": "uh or you need to provide a name for the object a name for the test shadow in",
    "start": "935880",
    "end": "941760"
  },
  {
    "text": "this case we say blur could be any other name blue filter and then you define which data you want",
    "start": "941760",
    "end": "948540"
  },
  {
    "text": "to copy in meaning that I expect internet suspecting to play with this data",
    "start": "948540",
    "end": "954660"
  },
  {
    "text": "that's because usually gpus CPUs and fpga they don't share memory usually so",
    "start": "954660",
    "end": "961620"
  },
  {
    "text": "we need a way to tell tornado which memory which regions you want to copy in",
    "start": "961620",
    "end": "966959"
  },
  {
    "text": "the device and copy out so that's done through the stream in and the stream out",
    "start": "966959",
    "end": "972300"
  },
  {
    "text": "and then you have a set of tasks task for red filter does for the green Channel and that's for the blue Channel",
    "start": "972300",
    "end": "979560"
  },
  {
    "text": "and the tasks are the finals photos so you pass a name and this is useful because in the",
    "start": "979560",
    "end": "985139"
  },
  {
    "text": "terminology you want to launch it us you can say this tasks run on one device this does run another device you can",
    "start": "985139",
    "end": "990779"
  },
  {
    "text": "refer that by the name and then the second parameter is a",
    "start": "990779",
    "end": "995940"
  },
  {
    "text": "function pointer method pointer essentially the first is the class dot method we want to say that the methods",
    "start": "995940",
    "end": "1002720"
  },
  {
    "text": "inside this class called Blue filters and the rest are the normal parameters",
    "start": "1002720",
    "end": "1008480"
  },
  {
    "text": "for the method call in fact remember the signature of the method was one two",
    "start": "1008480",
    "end": "1014000"
  },
  {
    "text": "three four five six parameters and those are the parameters expressed here as on any other method call",
    "start": "1014000",
    "end": "1021079"
  },
  {
    "text": "and then we call execute so once we call execute it will run in parallel on the device",
    "start": "1021079",
    "end": "1028178"
  },
  {
    "text": "so how tornado VM selects the threads to run because the application the job",
    "start": "1028520",
    "end": "1034459"
  },
  {
    "text": "application is single thread we just annotate sequential code with palette annotations so what's happening is what",
    "start": "1034459",
    "end": "1041959"
  },
  {
    "text": "is happening is the following when that when it's called execute so in",
    "start": "1041959",
    "end": "1047540"
  },
  {
    "text": "our case will be filter.execute it will start optimizing the code it",
    "start": "1047540",
    "end": "1053240"
  },
  {
    "text": "will compile the code from the an intermediate representation tornado extends growl so is the optimization",
    "start": "1053240",
    "end": "1061700"
  },
  {
    "text": "happens in the intermediate representation level it will optimize the code and then we will translate from the optimized code",
    "start": "1061700",
    "end": "1069260"
  },
  {
    "text": "to efficient uh PTX or opencl code",
    "start": "1069260",
    "end": "1074539"
  },
  {
    "text": "and then it will call execute when equal execute it will launch many threads many",
    "start": "1074539",
    "end": "1079880"
  },
  {
    "text": "many threads hundreds or even thousands of threads so how tornado knows how many",
    "start": "1079880",
    "end": "1086000"
  },
  {
    "text": "threats to run well it depends on the input application remember our kernel",
    "start": "1086000",
    "end": "1091100"
  },
  {
    "text": "the blue filter we have two parallel loops and each Loop iterates over the",
    "start": "1091100",
    "end": "1096679"
  },
  {
    "text": "dimension of the image okay so X Dimension and Y dimension of the image",
    "start": "1096679",
    "end": "1102320"
  },
  {
    "text": "so tornado gets this information because because it compiles a runtime and create",
    "start": "1102320",
    "end": "1107720"
  },
  {
    "text": "a grid of threads so it's gonna run it's gonna launch to the grid of threads with the number",
    "start": "1107720",
    "end": "1115100"
  },
  {
    "text": "of pixels in the x-axis and the number of pixels in the y-axis and then you will compute the filter uh",
    "start": "1115100",
    "end": "1122179"
  },
  {
    "text": "separate for each speaker so each pixel will be will be mapped to one thread let's say",
    "start": "1122179",
    "end": "1129460"
  },
  {
    "text": "right so let me talk about how tornado enabler enables pipeline parallelization",
    "start": "1129860",
    "end": "1135799"
  },
  {
    "text": "so we talk about task polarization we can Define many tasks to run and pipe",
    "start": "1135799",
    "end": "1140960"
  },
  {
    "text": "and data parallelization so each task is a data parallel problem can also enable",
    "start": "1140960",
    "end": "1147820"
  },
  {
    "text": "pipeline parallelization and this is Stone especially on fpga so",
    "start": "1147820",
    "end": "1154340"
  },
  {
    "text": "when we select an fpga to run or when tornado selects the fpga to run it will",
    "start": "1154340",
    "end": "1159679"
  },
  {
    "text": "automatically insert information in the generated code to pipeline instructions",
    "start": "1159679",
    "end": "1164840"
  },
  {
    "text": "and we do by using this strategy we can increase performance 2x over the",
    "start": "1164840",
    "end": "1170059"
  },
  {
    "text": "previous parallel code so it's quite quite good so let me explain the pros and cons of",
    "start": "1170059",
    "end": "1178400"
  },
  {
    "text": "using this style of API Okay so as an advantage this API it based on",
    "start": "1178400",
    "end": "1185840"
  },
  {
    "text": "annotations allows the user to annotate sequential codes so the user has to reasonable",
    "start": "1185840",
    "end": "1192740"
  },
  {
    "text": "sequential code provided sequence implementation and then think about where to paralyze in the loop",
    "start": "1192740",
    "end": "1200600"
  },
  {
    "text": "in one way this is fast for development because you have half if I have existing Java called sequential code I can just",
    "start": "1200600",
    "end": "1207260"
  },
  {
    "text": "add annotations and get a parallel code this API is very suitable for non-exper",
    "start": "1207260",
    "end": "1212480"
  },
  {
    "text": "users so you don't need to know GPU compute you don't need to know the hardware to run there so it doesn't have",
    "start": "1212480",
    "end": "1219020"
  },
  {
    "text": "it doesn't require the user to have that knowledge okay",
    "start": "1219020",
    "end": "1224380"
  },
  {
    "text": "um as a limitation this API the loop annotation API we call it parallel Loop",
    "start": "1224419",
    "end": "1230660"
  },
  {
    "text": "API is limited in the number of patterns to run so we run we can run the typical",
    "start": "1230660",
    "end": "1237380"
  },
  {
    "text": "map application which is the filter so for each pixel you compute a function",
    "start": "1237380",
    "end": "1242600"
  },
  {
    "text": "that's the map pattern but all the patterns like scan or complex extension is is hard to get from this API",
    "start": "1242600",
    "end": "1250640"
  },
  {
    "text": "also this API doesn't allow the developer to have control over the hardware is totally agnostic and some",
    "start": "1250640",
    "end": "1258200"
  },
  {
    "text": "developers need that control also if you have an existing opencl",
    "start": "1258200",
    "end": "1263360"
  },
  {
    "text": "encoder code and you want to Port it to Java it might be hard so for to solve",
    "start": "1263360",
    "end": "1269059"
  },
  {
    "text": "these limitations we introduce a second API that we call the parallel kernel API",
    "start": "1269059",
    "end": "1275179"
  },
  {
    "text": "and I will explain to you how the API is um a hard API looks like",
    "start": "1275179",
    "end": "1283280"
  },
  {
    "text": "so let's go back to our previous example the blue filter we have remembered two parallel Loops that will iterate over",
    "start": "1283280",
    "end": "1289220"
  },
  {
    "text": "the X Dimension and Y dimension of the image and compute the filter we can translate this to our second API",
    "start": "1289220",
    "end": "1296480"
  },
  {
    "text": "so instead of having two Loops we will have X implicit parallelism parallelism",
    "start": "1296480",
    "end": "1302960"
  },
  {
    "text": "by introducing a context so the context is a tornado object that the user can use",
    "start": "1302960",
    "end": "1309860"
  },
  {
    "text": "and that object will give you access to the thread identifier for each Dimension",
    "start": "1309860",
    "end": "1314960"
  },
  {
    "text": "so for the x-axis we can get the information through context.get global",
    "start": "1314960",
    "end": "1320539"
  },
  {
    "text": "idx and for the y-axis we can get information from the context of global",
    "start": "1320539",
    "end": "1326240"
  },
  {
    "text": "idy and then we compute the filter as usual so this is closer if you're familiar",
    "start": "1326240",
    "end": "1333260"
  },
  {
    "text": "with code and opencl with those premium models in fact you might think about as I say 2D grid and then to identify in a",
    "start": "1333260",
    "end": "1341480"
  },
  {
    "text": "unique way it's red you just need to access to that thread in particular through X position and Y position and",
    "start": "1341480",
    "end": "1348679"
  },
  {
    "text": "then you compute the thread as you do your computation as usual",
    "start": "1348679",
    "end": "1355580"
  },
  {
    "text": "um so how do we how do we know the threats to",
    "start": "1355580",
    "end": "1361520"
  },
  {
    "text": "run in this case we need something else okay so before remember that tornado will analyze the Expressions at runtime",
    "start": "1361520",
    "end": "1368840"
  },
  {
    "text": "and we'll get the threats at runtime and that's fully transparent for the user in",
    "start": "1368840",
    "end": "1374539"
  },
  {
    "text": "this case the threads are not set so the user needs to set up that for for us",
    "start": "1374539",
    "end": "1380179"
  },
  {
    "text": "and in this particular example because it's a two-digit the user can create a two degree called work 2D and passes the",
    "start": "1380179",
    "end": "1388700"
  },
  {
    "text": "the X threads to run in the X Dimension and white threads to run in a y dimension",
    "start": "1388700",
    "end": "1393860"
  },
  {
    "text": "and then it will set up the name of the function with that worker grid and then",
    "start": "1393860",
    "end": "1399320"
  },
  {
    "text": "when the user calls execute it will need to pass the grid that's the only",
    "start": "1399320",
    "end": "1404360"
  },
  {
    "text": "difference you need to know uh I haven't mentioned that through that this API the calendar API the user apart",
    "start": "1404360",
    "end": "1411919"
  },
  {
    "text": "from manipulating at the thread level can access local memory for example gpus has different",
    "start": "1411919",
    "end": "1418059"
  },
  {
    "text": "memories Global memory local memory product memory so the user can program that memory",
    "start": "1418059",
    "end": "1424159"
  },
  {
    "text": "or can even synchronize a block of threads is very um very close to what you might find with",
    "start": "1424159",
    "end": "1431299"
  },
  {
    "text": "code and opencl so well if we have this API that is",
    "start": "1431299",
    "end": "1438380"
  },
  {
    "text": "coming from cool and opencl why do we want to use Java instead of having the",
    "start": "1438380",
    "end": "1444380"
  },
  {
    "text": "application in opencl and PTX or Cuda and PTX well tornado VM has also other",
    "start": "1444380",
    "end": "1451940"
  },
  {
    "text": "strengths for example lifestyle migration as I mentioned the very beginning or code optimization so we",
    "start": "1451940",
    "end": "1457700"
  },
  {
    "text": "specialize the code depending on architecture also if you run an fpga the workflow to",
    "start": "1457700",
    "end": "1464659"
  },
  {
    "text": "run on the VGA is fully transparent it's fully integrated with tornado meaning that you can use your favorite IDE for",
    "start": "1464659",
    "end": "1471080"
  },
  {
    "text": "example IntelliJ eclipse or any other editor and you just can run",
    "start": "1471080",
    "end": "1476360"
  },
  {
    "text": "on the fpga if you have it and it can also be deployed easily on Amazon instances for example on cloud",
    "start": "1476360",
    "end": "1482600"
  },
  {
    "text": "deployment so you will get that for free by porting that code into Java Antonio VM",
    "start": "1482600",
    "end": "1491320"
  },
  {
    "text": "to show you some performance results because okay tornado can be used for more than just applying for filters for",
    "start": "1491780",
    "end": "1498980"
  },
  {
    "text": "photography right in fact it can be used for other type of applications for example for fintech Mass simulations",
    "start": "1498980",
    "end": "1505340"
  },
  {
    "text": "like the Monte Carlo or black shorts that we see here it can be used for computer vision",
    "start": "1505340",
    "end": "1510740"
  },
  {
    "text": "applications for physics simulation for Signal processing and so on",
    "start": "1510740",
    "end": "1515960"
  },
  {
    "text": "here I show you a graph the x-axis show different type of applications and different implementations for",
    "start": "1515960",
    "end": "1522620"
  },
  {
    "text": "running on the multi-core but the implementation is the same it's different executions for different devices",
    "start": "1522620",
    "end": "1529460"
  },
  {
    "text": "the blue represents the multi-core the green represents the fpga and the valid",
    "start": "1529460",
    "end": "1535400"
  },
  {
    "text": "purple one represents the execution on GPU and the bars represents speed UPS",
    "start": "1535400",
    "end": "1540860"
  },
  {
    "text": "against Java sequences so the higher the better as we can see for some applications running on the fpga if it",
    "start": "1540860",
    "end": "1547460"
  },
  {
    "text": "doesn't is not worth it so you don't get any speed up but for all the type of applications like physics simulation or",
    "start": "1547460",
    "end": "1553640"
  },
  {
    "text": "signal processing is very good at it and you can achieve very high speed ups",
    "start": "1553640",
    "end": "1559700"
  },
  {
    "text": "for example for Signal processing or physics simulation you can get a thousand of speed UPS compared to Java",
    "start": "1559700",
    "end": "1566600"
  },
  {
    "text": "okay these results are taken from one publication that we have so you're interested just check out our website",
    "start": "1566600",
    "end": "1572419"
  },
  {
    "text": "and um it's in is listed there so",
    "start": "1572419",
    "end": "1578059"
  },
  {
    "text": "I'll show you a few examples about how to turn off the m is being pilot in Industry I show you here two different",
    "start": "1578059",
    "end": "1583640"
  },
  {
    "text": "use cases that we are working on one with neurocon company uh in Luxembourg",
    "start": "1583640",
    "end": "1589340"
  },
  {
    "text": "they run natural language processing algorithm and so far what they have achieved is um",
    "start": "1589340",
    "end": "1595700"
  },
  {
    "text": "30X performance by running the hierarchical clustering algorithms on gpus",
    "start": "1595700",
    "end": "1601820"
  },
  {
    "text": "we have a use case in this case from sparworks company a company in Ireland",
    "start": "1601820",
    "end": "1607220"
  },
  {
    "text": "based in Ireland and what they do is they have information from iot devices the the",
    "start": "1607220",
    "end": "1612860"
  },
  {
    "text": "they want to post process that information so they use a very powerful GPU GP100 to",
    "start": "1612860",
    "end": "1620240"
  },
  {
    "text": "do the post processing and they can they can get up to 450x Performance compared",
    "start": "1620240",
    "end": "1626120"
  },
  {
    "text": "to Java which is quite good so I'm gonna just finalize some remarks",
    "start": "1626120",
    "end": "1634039"
  },
  {
    "text": "um open internal VM is open source so it's available on GitHub you can download it",
    "start": "1634039",
    "end": "1640640"
  },
  {
    "text": "you can contribute if you want to uh you can make suggestions we are open to a",
    "start": "1640640",
    "end": "1646400"
  },
  {
    "text": "suggestion from the community in fact some of the features have been talking today are coming from the community",
    "start": "1646400",
    "end": "1653720"
  },
  {
    "text": "we also have Docker images so you can run dock Dukan tornado with Docker is a",
    "start": "1653720",
    "end": "1659779"
  },
  {
    "text": "very easy assuming you have the driver already installed it's just pull and run essentially",
    "start": "1659779",
    "end": "1666320"
  },
  {
    "text": "and there is a team underneath there is a team behind on your VM so this is not",
    "start": "1666320",
    "end": "1671659"
  },
  {
    "text": "created by just one person uh we are this is an academic project we are in Academia",
    "start": "1671659",
    "end": "1678620"
  },
  {
    "text": "um and we are interested in collaborations at the academics colleges academic collaborations or industry",
    "start": "1678620",
    "end": "1684140"
  },
  {
    "text": "collaborations so if you think this is useful to you and you think that can be",
    "start": "1684140",
    "end": "1689179"
  },
  {
    "text": "helpful for your workflow we are happy to talk so just reach us and we're happy",
    "start": "1689179",
    "end": "1695360"
  },
  {
    "text": "to to have a discussion so to summarize",
    "start": "1695360",
    "end": "1700460"
  },
  {
    "text": "um today this these are the me main points I would like you to remember right so I have shown you that",
    "start": "1700460",
    "end": "1707440"
  },
  {
    "text": "heterogeneous devices are now pretty much in almost every Computing system okay and There Is No Escape",
    "start": "1707440",
    "end": "1714620"
  },
  {
    "text": "um programmers of current Computing systems as well as future Computing system need to handle somehow with the",
    "start": "1714620",
    "end": "1721340"
  },
  {
    "text": "complexity of having a wide and diverse set of devices such as gpus fpgas or any",
    "start": "1721340",
    "end": "1728419"
  },
  {
    "text": "other Hardware that is coming um along with that I have showed you a",
    "start": "1728419",
    "end": "1734000"
  },
  {
    "text": "strategy a proposal to program those devices through tornado VM so to know the end can be seen as a platform jvm",
    "start": "1734000",
    "end": "1741620"
  },
  {
    "text": "high performance Computing platform for Java and jvm that it works in combination with the existing jdk for",
    "start": "1741620",
    "end": "1748400"
  },
  {
    "text": "example with open jdk we have discussed an application for",
    "start": "1748400",
    "end": "1753980"
  },
  {
    "text": "example the blue filter and I have shown you two different ways of implementing a blue filter one using",
    "start": "1753980",
    "end": "1760640"
  },
  {
    "text": "the parallel Loop API that is well suited for non-experts on Parallel computing",
    "start": "1760640",
    "end": "1767620"
  },
  {
    "text": "API that is suitable for people or developers that know kuzano pencil",
    "start": "1767620",
    "end": "1773240"
  },
  {
    "text": "already and want to pour existing existing code into tornado I hope I convince you that tornado can",
    "start": "1773240",
    "end": "1779779"
  },
  {
    "text": "get really high speed ups and with that I conclude my presentation so I really",
    "start": "1779779",
    "end": "1785299"
  },
  {
    "text": "really thank you for your attention and I'm happy to take questions so thank you very much",
    "start": "1785299",
    "end": "1792220"
  },
  {
    "text": "hello hello hey thank you so much I think one of the things we should",
    "start": "1794679",
    "end": "1801320"
  },
  {
    "text": "start with was that debugging question that you said that you will you know kind of clarify and add more details yes",
    "start": "1801320",
    "end": "1808460"
  },
  {
    "text": "so let's do that yeah yeah so the wagon is very tricky I think the question was without because if anyone in the",
    "start": "1808460",
    "end": "1815000"
  },
  {
    "text": "audience has um experiment in have been experimenting with GPU compute and fpga the is",
    "start": "1815000",
    "end": "1821480"
  },
  {
    "text": "very frustrating so it's very frustrating task can do right now is login information",
    "start": "1821480",
    "end": "1828919"
  },
  {
    "text": "can give you the completion time meaning",
    "start": "1828919",
    "end": "1834039"
  },
  {
    "text": "compiles from java code to the after openclptx right so we time those times",
    "start": "1834039",
    "end": "1839960"
  },
  {
    "text": "meaning from java equal using graph compiler to the PTX and then a second step of completion is from the PTX or",
    "start": "1839960",
    "end": "1847220"
  },
  {
    "text": "opencl via the driver to actual binary and I can give you that as well as data",
    "start": "1847220",
    "end": "1853039"
  },
  {
    "text": "transfer time for example how much time does it takes to send data back and forth and how much time does your",
    "start": "1853039",
    "end": "1860539"
  },
  {
    "text": "culture compute Kermit takes along with how many threads tornado run on the",
    "start": "1860539",
    "end": "1866539"
  },
  {
    "text": "actual platform decided what what to do with your application right so all this information can be enabled with a",
    "start": "1866539",
    "end": "1873260"
  },
  {
    "text": "profiler option internal and it's not fully debug so you cannot step by step you do a step-by-stack",
    "start": "1873260",
    "end": "1880700"
  },
  {
    "text": "execution on a GPU as far as I know um but I don't know that there is any",
    "start": "1880700",
    "end": "1886279"
  },
  {
    "text": "project on that I think it's complicated because you have usually a thousands of threats running on the on this on that",
    "start": "1886279",
    "end": "1891320"
  },
  {
    "text": "platform and what you usually do is to have a small set of threads to run on",
    "start": "1891320",
    "end": "1897440"
  },
  {
    "text": "there and then debug the application from that point so that one is that the second",
    "start": "1897440",
    "end": "1903140"
  },
  {
    "text": "step is that we can speed the code that tornado generates meaning that I want to",
    "start": "1903140",
    "end": "1908240"
  },
  {
    "text": "see what tornado generated opencl code and then I can debug it myself and this is useful especially useful on",
    "start": "1908240",
    "end": "1914659"
  },
  {
    "text": "fpgs um because fdga was another area and related to that for the debugging we",
    "start": "1914659",
    "end": "1922460"
  },
  {
    "text": "have also a debug mode for the Fiji the video also added I know a lot of extra we had in the creation of the",
    "start": "1922460",
    "end": "1929779"
  },
  {
    "text": "application debugging and running right so um I didn't cover in this talk I covered",
    "start": "1929779",
    "end": "1936020"
  },
  {
    "text": "in the previous key contact last year but usually complexion on the fpga takes hours two or three hours of compiling a",
    "start": "1936020",
    "end": "1943399"
  },
  {
    "text": "code this is because if a general pencil that's what opencl driver give us right",
    "start": "1943399",
    "end": "1949120"
  },
  {
    "text": "option that is fully integrated with the low level tools for example if you are using if we're using the Intel fpga with",
    "start": "1949360",
    "end": "1956720"
  },
  {
    "text": "the Intel tools you can run your deduct mode from your IntelliJ for example",
    "start": "1956720",
    "end": "1962360"
  },
  {
    "text": "editor whatever editor you use just run debug and you simulate that application",
    "start": "1962360",
    "end": "1967399"
  },
  {
    "text": "on fpga right it's not running actually an fpga is running on your host but it's",
    "start": "1967399",
    "end": "1972980"
  },
  {
    "text": "a quick try that your application what tornado generates can actually run on the PGA",
    "start": "1972980",
    "end": "1978799"
  },
  {
    "text": "that's one thing to feedback yeah that's right I hope I'd answer the",
    "start": "1978799",
    "end": "1984140"
  },
  {
    "text": "question I think it was a bit longer yeah no that was awesome and you'd give the step by step as well uh recently I",
    "start": "1984140",
    "end": "1989419"
  },
  {
    "text": "was looking at an opencl stack uh and and I and there were some differences",
    "start": "1989419",
    "end": "1996260"
  },
  {
    "text": "that I found out based on the operating system and the enablement that happens right from from the underlying our",
    "start": "1996260",
    "end": "2003519"
  },
  {
    "text": "Hardware architecture to up to the OS so have you found",
    "start": "2003519",
    "end": "2008679"
  },
  {
    "text": "um you know your code to be or or uh tornado VM to generate a different",
    "start": "2008679",
    "end": "2016740"
  },
  {
    "text": "optimized stack I'm so sorry and a different optimized stack depending on",
    "start": "2016740",
    "end": "2022299"
  },
  {
    "text": "the OS and the underlying Hardware architecture foreign [Music]",
    "start": "2022299",
    "end": "2030199"
  },
  {
    "text": "system right so I can tell you an example we have a few months back so",
    "start": "2033240",
    "end": "2039159"
  },
  {
    "text": "uh okay well so now that's inside it's a bit complicated um is it is not only about the full Jeet",
    "start": "2039159",
    "end": "2046779"
  },
  {
    "text": "is also managing data buffer for you and so on but essentially the code that is",
    "start": "2046779",
    "end": "2051940"
  },
  {
    "text": "generated very architecture is different right one of the things we do for uh reductions when you have a reduction is",
    "start": "2051940",
    "end": "2057700"
  },
  {
    "text": "a special case when you're running parallel uh just a quick recap of reduction means that you have let's say",
    "start": "2057700",
    "end": "2063580"
  },
  {
    "text": "a list of values and you want to reduce all of them to Scala value this is fully data dependent so to run",
    "start": "2063580",
    "end": "2069878"
  },
  {
    "text": "the next iteration you need to complete the previous one this is an algorithm is to make this in parallel but this in",
    "start": "2069879",
    "end": "2075638"
  },
  {
    "text": "parallel you need to insert uh you need to play with in the GPU what is called work groups meaning I split my problem",
    "start": "2075639",
    "end": "2083260"
  },
  {
    "text": "in smaller problems and because those uh threads those block of threads that is a",
    "start": "2083260",
    "end": "2090220"
  },
  {
    "text": "subset of the whole iteration space can share memory but sharing memory and gpus",
    "start": "2090220",
    "end": "2095500"
  },
  {
    "text": "is not coherent you need to insert values so we had this a few months back that we have these reductions working",
    "start": "2095500",
    "end": "2102640"
  },
  {
    "text": "uh but then when one platform intellectually it didn't work uh it was because one of the drivers they put",
    "start": "2102640",
    "end": "2109900"
  },
  {
    "text": "something that tornado didn't realize then the next version we have to read we have to go we have to put an issue on",
    "start": "2109900",
    "end": "2115420"
  },
  {
    "text": "GitHub they fix it then tornado can recap and magically reductions continue",
    "start": "2115420",
    "end": "2120880"
  },
  {
    "text": "working again so yes even the same platform uh with the same OS it's just",
    "start": "2120880",
    "end": "2126280"
  },
  {
    "text": "different driver implementation uh you can get different behaviors usually not usually you get the same thing okay uh",
    "start": "2126280",
    "end": "2132579"
  },
  {
    "text": "actually we cross validated between them so we have a full um uni test Suite",
    "start": "2132579",
    "end": "2138760"
  },
  {
    "text": "and we run it in different architectures we're on inter-integrated Graphics Intel CPU and be the gpus and we run a subset",
    "start": "2138760",
    "end": "2147220"
  },
  {
    "text": "on fpgs as well and we cross validated that everything is going it's going well yeah that's pretty cool I mean um it's it's",
    "start": "2147220",
    "end": "2154480"
  },
  {
    "text": "very smart to to build it on top of like openg opencl and Coda and everything so",
    "start": "2154480",
    "end": "2159640"
  },
  {
    "text": "I think that's very sad and I like the idea of cross validation and unit testing as well there was another",
    "start": "2159640",
    "end": "2165099"
  },
  {
    "text": "question I think you mentioned that you would like to cover that I think it was the aot and folget yes you have some",
    "start": "2165099",
    "end": "2172180"
  },
  {
    "text": "time to do that yeah we have about three minutes all right so on fpga's uh yeah they",
    "start": "2172180",
    "end": "2177579"
  },
  {
    "text": "Wanna Stop turning support for both you can have the iot so you can run your",
    "start": "2177579",
    "end": "2182980"
  },
  {
    "text": "Java code and then speed the opencl then compile the code ahead of that even you can make your own modifications even so",
    "start": "2182980",
    "end": "2189579"
  },
  {
    "text": "if you're an expert in opencl cool that you can just throw your new modifications new optimizations and",
    "start": "2189579",
    "end": "2195579"
  },
  {
    "text": "then pre-compile it and run instrument and that's fully integrated so photography and it says okay I just",
    "start": "2195579",
    "end": "2200680"
  },
  {
    "text": "saved completion time but that's all on fpgas it's more complicated because this long term uh so uh especially we",
    "start": "2200680",
    "end": "2210520"
  },
  {
    "text": "designed this ahead of time because of the fpga workflow so the way we usually go for the fpga is that we first do",
    "start": "2210520",
    "end": "2217180"
  },
  {
    "text": "debugging mode so we try on CPU on your local host and then uh we do the full",
    "start": "2217180",
    "end": "2225160"
  },
  {
    "text": "jit mode you know you have your application to run it and then you wait two hours to",
    "start": "2225160",
    "end": "2230980"
  },
  {
    "text": "get your binary I mean if you're running a server that runs on your application for months",
    "start": "2230980",
    "end": "2236800"
  },
  {
    "text": "or years waiting two hours it's fine I mean as soon as the application is ready tornado will switch device",
    "start": "2236800",
    "end": "2242440"
  },
  {
    "text": "but for many users they want instant performance so for that you can plug in your fpga your big stream uh which is a",
    "start": "2242440",
    "end": "2249040"
  },
  {
    "text": "configuration file for actual uh architecture from the apga and we can get that binary from directly from from",
    "start": "2249040",
    "end": "2255640"
  },
  {
    "text": "the from the US yes that's very nice",
    "start": "2255640",
    "end": "2261220"
  },
  {
    "text": "um I just wanted to send out a reminder that we have a zoom room with the speaker and I'll pop in there very",
    "start": "2261220",
    "end": "2266980"
  },
  {
    "text": "briefly and please bring your questions to the zoom room get to uh talking to the speaker directly",
    "start": "2266980",
    "end": "2273220"
  },
  {
    "text": "um and if you have any thoughts uh to share please do that as well I thank you for your time Juan uh this was awesome I",
    "start": "2273220",
    "end": "2281260"
  },
  {
    "text": "I learned a lot again so I'm so glad that you actually joined us here at qcon",
    "start": "2281260",
    "end": "2286420"
  },
  {
    "text": "and thanks for having me it's a pleasure and we'll see you in the zoom room thank",
    "start": "2286420",
    "end": "2292540"
  },
  {
    "text": "you all",
    "start": "2292540",
    "end": "2294839"
  },
  {
    "text": "[Music] thank you",
    "start": "2297650",
    "end": "2304500"
  }
]