[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "[Music]",
    "start": "3320",
    "end": "14289"
  },
  {
    "text": "hi everyone my name is tejas chopra and i'll be talking about netflix drive today",
    "start": "14960",
    "end": "20720"
  },
  {
    "text": "i'm excited to be presenting at this edition of the qcon plus i work on infrastructure solutions",
    "start": "20720",
    "end": "27119"
  },
  {
    "text": "specifically software that deals with billions of assets and exabyte scale data that is generated and managed by",
    "start": "27119",
    "end": "33760"
  },
  {
    "text": "netflix studios and platforms the agenda for the talk is as follows",
    "start": "33760",
    "end": "39120"
  },
  {
    "text": "today we'll go over a brief explanation of what netflix drive is some of the motivations for creating a software such",
    "start": "39120",
    "end": "46320"
  },
  {
    "text": "as netflix drive the design and the architecture life cycle of a typical instance of netflix drive and some learnings from",
    "start": "46320",
    "end": "53039"
  },
  {
    "text": "this process you can think of netflix drive as an edge software that runs on studio",
    "start": "53039",
    "end": "59840"
  },
  {
    "start": "55000",
    "end": "565000"
  },
  {
    "text": "artists workstations it's a multi-interface multi-os cloud file system and it is intended to provide the",
    "start": "59840",
    "end": "67040"
  },
  {
    "text": "look and feel of a typical posix file system in addition to that it also",
    "start": "67040",
    "end": "72080"
  },
  {
    "text": "behaves like a micro service in that it has rest end points and it has back-end actions that are",
    "start": "72080",
    "end": "77759"
  },
  {
    "text": "leveraged by a lot of the workflows and automated use cases where users and applications are not directly dealing",
    "start": "77759",
    "end": "84240"
  },
  {
    "text": "with files and folders both the interfaces the rest end points as well as the posix",
    "start": "84240",
    "end": "90640"
  },
  {
    "text": "interface can be leveraged together for a netflix drive instance they are not mutually exclusive",
    "start": "90640",
    "end": "96799"
  },
  {
    "text": "the other main aspect of netflix drive is that it is a generic framework we intended it to be generic so that there",
    "start": "96799",
    "end": "104560"
  },
  {
    "text": "can be different types of data and metadata stores that can be plugged into the netflix drive framework",
    "start": "104560",
    "end": "111200"
  },
  {
    "text": "so you could imagine netflix drive working on the cloud data stores and metadata stores as well as hybrid data",
    "start": "111200",
    "end": "118479"
  },
  {
    "text": "stores and metadata stores an example could be you could have netflix drive with dynamodb as the",
    "start": "118479",
    "end": "124560"
  },
  {
    "text": "metadata store backend and s3 as a data store backend you could also have mongodb and ceph storage as the backend",
    "start": "124560",
    "end": "132160"
  },
  {
    "text": "data stores and metadata stores for netflix drive it has event alerting backends also configured to be a part of",
    "start": "132160",
    "end": "138319"
  },
  {
    "text": "the framework and that eventing alerting is a first class citizen in netflix drive",
    "start": "138319",
    "end": "144560"
  },
  {
    "text": "now let us get into what are some of the motivations of having netflix drive",
    "start": "144560",
    "end": "150560"
  },
  {
    "text": "so netflix is in general pioneering the idea of studio in a cloud the idea is to",
    "start": "153680",
    "end": "159680"
  },
  {
    "text": "give artists the ability to work from different corners of the world on creating stories and assets to entertain",
    "start": "159680",
    "end": "165920"
  },
  {
    "text": "the world in order to do so the platform layer needs to provide a distributed",
    "start": "165920",
    "end": "171599"
  },
  {
    "text": "scalable and performant infrastructure at netflix assets which you can think of",
    "start": "171599",
    "end": "177360"
  },
  {
    "text": "are a collection of files and folders have data and metadata that are stored and managed by this separate systems and",
    "start": "177360",
    "end": "183760"
  },
  {
    "text": "services starting at the point of ingestion where data is produced right out of the camera",
    "start": "183760",
    "end": "189120"
  },
  {
    "text": "till the point where the data eventually makes its way to movies and shows these assets get tagged with a variety of",
    "start": "189120",
    "end": "195760"
  },
  {
    "text": "metadata by different systems based on the workflow of the creative process at the edge where artists work with",
    "start": "195760",
    "end": "202720"
  },
  {
    "text": "assets the artist application and the artists themselves expect a file and folder interface so that there can be a",
    "start": "202720",
    "end": "209360"
  },
  {
    "text": "seamless access to this to these assets and we wanted to make",
    "start": "209360",
    "end": "216400"
  },
  {
    "text": "working with studio applications a seamless experience for our artists this is not just restricted to artists",
    "start": "216400",
    "end": "222080"
  },
  {
    "text": "and it can actually extend to more than just the studio use case as well a great example is all the asset",
    "start": "222080",
    "end": "228879"
  },
  {
    "text": "transformations that happen during the rendering of content for which netflix drive is being used today",
    "start": "228879",
    "end": "234799"
  },
  {
    "text": "the other thing is that studio workflows have a need to move assets across various stages of the creative",
    "start": "234799",
    "end": "240000"
  },
  {
    "text": "iterations and at each stage a different set of metadata gets tagged with an asset we",
    "start": "240000",
    "end": "245599"
  },
  {
    "text": "needed a system that could provide the ability to add and support attaching",
    "start": "245599",
    "end": "250640"
  },
  {
    "text": "different forms of metadata with the data along with that there is also a level of",
    "start": "250640",
    "end": "256479"
  },
  {
    "text": "dynamic access control which can change per stage which projects only a certain",
    "start": "256479",
    "end": "261680"
  },
  {
    "text": "section of assets to the application's users or workflows looking at all of these considerations",
    "start": "261680",
    "end": "266960"
  },
  {
    "text": "we came up with the design of netflix drive which can be leveraged in multiple scenarios it can be used as a simple",
    "start": "266960",
    "end": "273280"
  },
  {
    "text": "posix file system that can store the data on cloud and retrieve data from cloud but also has a much richer control",
    "start": "273280",
    "end": "280880"
  },
  {
    "text": "interface it is a foundational piece of storage infrastructure to support a lot",
    "start": "280880",
    "end": "286000"
  },
  {
    "text": "of netflix studios and platforms needs let us dive a bit into the architecture",
    "start": "286000",
    "end": "293840"
  },
  {
    "text": "of netflix drive so like i said netflix drive actually has multiple types of interfaces the posix interface just",
    "start": "293840",
    "end": "301120"
  },
  {
    "text": "allows a simple file system operations such as creating a file deleting a file",
    "start": "301120",
    "end": "306880"
  },
  {
    "text": "opening a file renames moving close all of that the other interface like i discussed is",
    "start": "306880",
    "end": "312639"
  },
  {
    "text": "the api interface it provides control interface and a controlled i o interface we also have events and telemetry as a",
    "start": "312639",
    "end": "319600"
  },
  {
    "text": "first class citizen of the netflix drive architecture the idea is that different types of event backends can be plugged",
    "start": "319600",
    "end": "326000"
  },
  {
    "text": "into the netflix drive framework a great example of where this may be used is audit logs that keep a track of",
    "start": "326000",
    "end": "332240"
  },
  {
    "text": "all the actions that have been performed on a file or a set of files by different users",
    "start": "332240",
    "end": "337360"
  },
  {
    "text": "we've also abstracted out the data transfer layer this layer abstracts the movement of data",
    "start": "337360",
    "end": "343680"
  },
  {
    "text": "from the different types of interfaces that are trying to move the data it deals with bringing the files into a",
    "start": "343680",
    "end": "350479"
  },
  {
    "text": "netflix drive mount point on an artist's workstation or machine and pushing files to the cloud as well",
    "start": "350479",
    "end": "358560"
  },
  {
    "text": "the posix interface uh getting a bit deeper into it it deals with the data and metadata operations on",
    "start": "358720",
    "end": "364800"
  },
  {
    "text": "netflix drive so all the files that are stored in netflix drive uh get read write create and other requests",
    "start": "364800",
    "end": "371600"
  },
  {
    "text": "from different applications users or there could be separate scripts and workflows that do these operations",
    "start": "371600",
    "end": "377520"
  },
  {
    "text": "and this is similar to any live file system that you use the api interface is of particular",
    "start": "377520",
    "end": "384639"
  },
  {
    "text": "interest to a lot of workflow management tools or agents and this exposes some form of control operations on netflix",
    "start": "384639",
    "end": "391360"
  },
  {
    "text": "drive the idea is that a lot of these workflows that are used in studio actually have some notion and awareness",
    "start": "391360",
    "end": "398400"
  },
  {
    "text": "of assets or files they want to control the projection of these assets on the namespace and",
    "start": "398400",
    "end": "404960"
  },
  {
    "text": "a simple example is when netflix drive starts up on a user's machine",
    "start": "404960",
    "end": "410160"
  },
  {
    "text": "the workflow tools will only allow a subset of the large corpus of data to be available to the user to view initially",
    "start": "410160",
    "end": "417680"
  },
  {
    "text": "that is managed by these apis they are also available to perform",
    "start": "417680",
    "end": "422960"
  },
  {
    "text": "dynamic operations such as uploading a particular file to cloud or downloading a specific set of assets dynamically and",
    "start": "422960",
    "end": "430000"
  },
  {
    "text": "showing them up and attaching them at specified points in the namespace",
    "start": "430000",
    "end": "436000"
  },
  {
    "text": "events like i discussed have telemetry information so you could have a situation where you want audit logs",
    "start": "436000",
    "end": "441520"
  },
  {
    "text": "metrics and updates to all be consumed by services that run in cloud and making it a generic framework allows different",
    "start": "441520",
    "end": "448400"
  },
  {
    "text": "types of event packets to get plugged into the netflix drive ecosystem",
    "start": "448400",
    "end": "454000"
  },
  {
    "text": "finally coming to data transfer so data transfer layer is an abstraction that deals with transferring data out of",
    "start": "454080",
    "end": "460080"
  },
  {
    "text": "netflix drive to multiple tiers of storage netflix drive does not",
    "start": "460080",
    "end": "465440"
  },
  {
    "text": "deal with sending the data in line to cloud and this is because of performance reasons the expectation is that netflix",
    "start": "465440",
    "end": "472560"
  },
  {
    "text": "drive will perform as close as possible to a local file system so what we do is we leverage",
    "start": "472560",
    "end": "477919"
  },
  {
    "text": "local storage if available to store the files and then we have strategies to move the data from the local storage to",
    "start": "477919",
    "end": "484000"
  },
  {
    "text": "cloud there are two typical ways in which data is moved to cloud",
    "start": "484000",
    "end": "489759"
  },
  {
    "text": "first is dynamically issuing apis that are done by the control interface to",
    "start": "489759",
    "end": "495680"
  },
  {
    "text": "allow workflows to move a subset of the assets to cloud and the other is auto sync which is an ability to",
    "start": "495680",
    "end": "502319"
  },
  {
    "text": "automatically sync all the files that are there in local storage to cloud you can think of this as the same way as",
    "start": "502319",
    "end": "508240"
  },
  {
    "text": "google drive tries to store your file to cloud here we have different types of tiers in",
    "start": "508240",
    "end": "513760"
  },
  {
    "text": "cloud storage as well we have specularly called out media cache and bargains here",
    "start": "513760",
    "end": "518959"
  },
  {
    "text": "media cache is a region aware caching tier that brings data closer to the edge",
    "start": "518959",
    "end": "524480"
  },
  {
    "text": "at netflix and baggins is our layer on top of s3 that deals with chunking and encrypting content",
    "start": "524480",
    "end": "532000"
  },
  {
    "text": "so overall picture of netflix drive architecture looks as follows you have the posix interface that has",
    "start": "532080",
    "end": "537600"
  },
  {
    "text": "data and metadata operations the api interface that deals with different types of control operations the event",
    "start": "537600",
    "end": "543440"
  },
  {
    "text": "interface that tracks all the state change updates in fact events is also used to build on top of netflix drive",
    "start": "543440",
    "end": "550160"
  },
  {
    "text": "and we'll get into that notions of having shared files and folders can be built using this event",
    "start": "550160",
    "end": "556080"
  },
  {
    "text": "interface and then finally we have the data transfer interface that abstracts moving the bits in and out of netflix drive to",
    "start": "556080",
    "end": "562720"
  },
  {
    "text": "cloud let us now discuss some of the underpinnings of the design that go back",
    "start": "562720",
    "end": "568800"
  },
  {
    "start": "565000",
    "end": "802000"
  },
  {
    "text": "to the motivation by discussing the anatomy of netflix drive here's some of terminology that we'll",
    "start": "568800",
    "end": "574839"
  },
  {
    "text": "use c drive is a studio asset aware meta data store that is used in netflix",
    "start": "574839",
    "end": "580800"
  },
  {
    "text": "bargains is netflix's s3 data stored layer that deals with chunking content and encrypting content",
    "start": "580800",
    "end": "586720"
  },
  {
    "text": "before pushing it to s3 media cache is an s3 region aware caching tier whose",
    "start": "586720",
    "end": "592160"
  },
  {
    "text": "intention is to bring the data closer to the applications and users intrepid is an internally developed high",
    "start": "592160",
    "end": "600160"
  },
  {
    "text": "leverage transport protocol used by a bunch of network netflix applications and services to transfer data from",
    "start": "600160",
    "end": "606880"
  },
  {
    "text": "one service to another this is a picture of the netflix drive",
    "start": "606880",
    "end": "614079"
  },
  {
    "text": "interface or netflix drive in general we have the interface layer which is the",
    "start": "614079",
    "end": "619440"
  },
  {
    "text": "top layer and this has all the fuse hand file handlers alongside the rest end points",
    "start": "619440",
    "end": "625760"
  },
  {
    "text": "the middle layer is a storage back-end layer one thing to note is that netflix drive provides a framework where you can",
    "start": "625760",
    "end": "632640"
  },
  {
    "text": "plug and play different types of storage back-ends so here we have the abstract metadata interface and the abstract data",
    "start": "632640",
    "end": "638800"
  },
  {
    "text": "interface in our first iteration we have used c drive as our metadata store and back in",
    "start": "638800",
    "end": "644959"
  },
  {
    "text": "then s3 as our data store finally we have the intrepid layer which is the transport layer that transfers",
    "start": "644959",
    "end": "651200"
  },
  {
    "text": "the bits from and to netflix drive one thing to note is that interpret is not just used to transport the data but",
    "start": "651200",
    "end": "658079"
  },
  {
    "text": "here as you can see it is also used to transfer some aspects of the metadata",
    "start": "658079",
    "end": "663200"
  },
  {
    "text": "store as well and this is needed to save some state of the metadata store on cloud",
    "start": "663200",
    "end": "669760"
  },
  {
    "text": "to look at it in another way we have the abstraction layers in netflix drive so you have the lib fuse because we are",
    "start": "671360",
    "end": "678000"
  },
  {
    "text": "using a few space file system that handles the different types of file system operations you initially start",
    "start": "678000",
    "end": "684800"
  },
  {
    "text": "the netflix drive and bootstrap it with a manifest and you have your rest apis and control interface as well",
    "start": "684800",
    "end": "690959"
  },
  {
    "text": "your abstraction layer abstracts the default metadata stores and the data stores and you can have different types",
    "start": "690959",
    "end": "696959"
  },
  {
    "text": "of data and metadata stores here as you can see in this particular example we have the cockroachdb adapter as a",
    "start": "696959",
    "end": "703120"
  },
  {
    "text": "metadata store and an s3 adapter as a data store we can also use different types of transfer protocols and they are",
    "start": "703120",
    "end": "709519"
  },
  {
    "text": "also a plug-and-play interface in netflix drive the protocol layer that is used can be",
    "start": "709519",
    "end": "714880"
  },
  {
    "text": "rest or grpc and finally you have the actual storage of data",
    "start": "714880",
    "end": "720399"
  },
  {
    "text": "this here shows the different services and how they are split between workstation and cloud",
    "start": "721040",
    "end": "727839"
  },
  {
    "text": "so you have the typical netflix drive api and posix interface on the workstation machine that sends the bits",
    "start": "727839",
    "end": "734560"
  },
  {
    "text": "and bytes to the transport agent and library you have a bunch of services on cloud as well namely the metadata store",
    "start": "734560",
    "end": "742000"
  },
  {
    "text": "which is c drive in our case you have a media cache which is a middle caching tier of storage and you finally have",
    "start": "742000",
    "end": "749040"
  },
  {
    "text": "object storage in s3 netflix drive on your local workstation",
    "start": "749040",
    "end": "754240"
  },
  {
    "text": "will talk to the metadata store and the data store using the transport agent and the library as we discussed",
    "start": "754240",
    "end": "760480"
  },
  {
    "text": "one thing to note here is that we also use local storage to cache the read and the right and to absorb a lot of the",
    "start": "760480",
    "end": "766399"
  },
  {
    "text": "performance that the users expect out of netflix drive uh security is a first-class citizen in",
    "start": "766399",
    "end": "773200"
  },
  {
    "text": "netflix drive we wanted um the to provide a two-factor authentication uh",
    "start": "773200",
    "end": "778320"
  },
  {
    "text": "on netflix drive and the reason is that a bunch of these cloud services are actually used by a lot of applications",
    "start": "778320",
    "end": "785040"
  },
  {
    "text": "they front all of the corpus of assets in netflix and it is essential to make",
    "start": "785040",
    "end": "790079"
  },
  {
    "text": "these assets secured and to only allow users that have proper permissioning to view the subset of assets that they are",
    "start": "790079",
    "end": "797839"
  },
  {
    "text": "allowed to use and view now let us",
    "start": "797839",
    "end": "804399"
  },
  {
    "start": "802000",
    "end": "872000"
  },
  {
    "text": "discuss a typical life cycle of netflix drive and some runtime aspects of it given the ability of netflix drive to",
    "start": "804399",
    "end": "811120"
  },
  {
    "text": "dynamically present spaces and bring together disappeared data",
    "start": "811120",
    "end": "816160"
  },
  {
    "text": "stores and metadata stores it is essential to discuss the life cycle this may not be true in typical file systems",
    "start": "816160",
    "end": "821680"
  },
  {
    "text": "where you do not necessarily have a typical uh stream of events that happen in the life",
    "start": "821680",
    "end": "827040"
  },
  {
    "text": "cycle so in netflix drives case we initially bootstrap the netflix drive using a",
    "start": "827040",
    "end": "832399"
  },
  {
    "text": "manifest an initial manifest could be an empty manifest as well",
    "start": "832399",
    "end": "838160"
  },
  {
    "text": "you have the ability to allow workstations or workflows to download um",
    "start": "838160",
    "end": "844800"
  },
  {
    "text": "some assets from cloud and preload and hydrate the netflix drive mount point with this pre uh this content um",
    "start": "844800",
    "end": "852399"
  },
  {
    "text": "the workflows and the artists would then modify these assets they will periodically either snapshot using",
    "start": "852399",
    "end": "859440"
  },
  {
    "text": "explicit apis or leveraging the autosync feature of netflix drive and upload",
    "start": "859440",
    "end": "864560"
  },
  {
    "text": "these assets back to cloud so this is how a typical netflix drive instance will run",
    "start": "864560",
    "end": "872480"
  },
  {
    "start": "872000",
    "end": "939000"
  },
  {
    "text": "let us get into the bootstrapping part of it so netflix drive typically during the bootstrap process expects a mount",
    "start": "873120",
    "end": "879360"
  },
  {
    "text": "point to be specified some amount of user identity so for authentication and authorization a location of the local",
    "start": "879360",
    "end": "886000"
  },
  {
    "text": "storage uh where the files will be cached uh the end points the metadata",
    "start": "886000",
    "end": "891279"
  },
  {
    "text": "store endpoint and the data store endpoint optional fields for pre-loading content and also persona so netflix",
    "start": "891279",
    "end": "897920"
  },
  {
    "text": "drive is envisioned to be used by different types of applications and workflows persona gives netflix drive",
    "start": "897920",
    "end": "904720"
  },
  {
    "text": "its flavor when working for applications for example a particular application may",
    "start": "904720",
    "end": "910720"
  },
  {
    "text": "specifically rely on the rest control interface because they are aware of the",
    "start": "910720",
    "end": "915920"
  },
  {
    "text": "assets uh and so they will explicitly use apis to upload files to cloud up",
    "start": "915920",
    "end": "922480"
  },
  {
    "text": "some other application may not necessarily be aware of when they want to upload uh the files",
    "start": "922480",
    "end": "928560"
  },
  {
    "text": "to cloud so they would rely on the autosync feature of netflix drive to upload files in the background to cloud",
    "start": "928560",
    "end": "934480"
  },
  {
    "text": "so that is defined by the person of netflix drive here is a sample bootstrap manifest as",
    "start": "934480",
    "end": "941680"
  },
  {
    "start": "939000",
    "end": "982000"
  },
  {
    "text": "you can see a particular netflix drive mount point can have several netflix drive instances",
    "start": "941680",
    "end": "947199"
  },
  {
    "text": "that are separate from each other you have a local file store which is a local storage used by netflix drive to",
    "start": "947199",
    "end": "952480"
  },
  {
    "text": "cache the files the instances get manifested under the mount in this case we have two separate",
    "start": "952480",
    "end": "958320"
  },
  {
    "text": "instances a dynamic instance and a user instance with different backing data stores and metadata stores in the first",
    "start": "958320",
    "end": "964880"
  },
  {
    "text": "instance which is a dynamic instance you have a redis metadata store and an s3 data store you will also uniquely",
    "start": "964880",
    "end": "971920"
  },
  {
    "text": "identify a workspace for data persistence and then in the second one you have a cockroachdb as a metadata store and ceph",
    "start": "971920",
    "end": "978959"
  },
  {
    "text": "as a data store again namespace of netflix drive is all the",
    "start": "978959",
    "end": "985440"
  },
  {
    "start": "982000",
    "end": "1017000"
  },
  {
    "text": "files that are viewed inside netflix drive so there are two options to actually create namespace netflix drive",
    "start": "985440",
    "end": "991040"
  },
  {
    "text": "can create the namespace statically at bootstrap time where you can specify",
    "start": "991040",
    "end": "996399"
  },
  {
    "text": "the exact files and folders that you need to pre-download and",
    "start": "996399",
    "end": "1001440"
  },
  {
    "text": "hydrate your current instance with and for this you present a file session and then netflix drive container information",
    "start": "1001440",
    "end": "1008160"
  },
  {
    "text": "so you have workflows that can pre-populate your netflix drive mount point with some files so that the",
    "start": "1008160",
    "end": "1014000"
  },
  {
    "text": "subsequent workflows can then be built on top of it the other way to hydrate a namespace is",
    "start": "1014000",
    "end": "1019279"
  },
  {
    "start": "1017000",
    "end": "1068000"
  },
  {
    "text": "to explicitly call netflix drive apis in the rest interface so in this case we use the stage api to",
    "start": "1019279",
    "end": "1026319"
  },
  {
    "text": "stage the files uh and pull them from cloud and attach them to specific locations in our",
    "start": "1026319",
    "end": "1033038"
  },
  {
    "text": "namespace one thing to note is that both these interfaces are not mutually",
    "start": "1033039",
    "end": "1038798"
  },
  {
    "text": "exclusive let us now get into some of the netflix drive operations modifications for netflix drive content",
    "start": "1038799",
    "end": "1044880"
  },
  {
    "text": "can happen through posix interface or rest apis so file system posix operations that can modify a file would",
    "start": "1044880",
    "end": "1051280"
  },
  {
    "text": "be open rename move read write close etc there could also be a subset of rest",
    "start": "1051280",
    "end": "1056320"
  },
  {
    "text": "apis that can be used to modify a file for example staging a file which pulls the file from cloud checkpointing a file",
    "start": "1056320",
    "end": "1062880"
  },
  {
    "text": "saving a file which actually explicitly uploads a file to cloud",
    "start": "1062880",
    "end": "1068160"
  },
  {
    "text": "an example of how a file is uploaded to cloud is using the publish api so we",
    "start": "1068640",
    "end": "1074160"
  },
  {
    "text": "have the ability to auto save files which would periodically checkpoint the files to cloud and the ability to also",
    "start": "1074160",
    "end": "1080799"
  },
  {
    "text": "have an explicit save the explicit save would be an api that is invoked by",
    "start": "1080799",
    "end": "1086880"
  },
  {
    "text": "different types of workflows to publish content a great example of seeing where these",
    "start": "1086880",
    "end": "1092160"
  },
  {
    "text": "different apis can be used is the case where artists and artists are working on a lot of ephemeral data a lot of this",
    "start": "1092160",
    "end": "1098720"
  },
  {
    "text": "data does not have to make to cloud because it's a work in progress so in that case",
    "start": "1098720",
    "end": "1104960"
  },
  {
    "text": "for those workflows explicit save is the right call because",
    "start": "1104960",
    "end": "1110080"
  },
  {
    "text": "once they are sure of the data and they want to publish it to cloud to be used by subsequent artists or in subsequent",
    "start": "1110080",
    "end": "1116559"
  },
  {
    "text": "workflows that's when they would invoke this api and that would pick the files it will snapshot the files in netflix",
    "start": "1116559",
    "end": "1122880"
  },
  {
    "text": "right mount point and then pick them and deliver it to cloud and store it in cloud under um the appropriate namespace",
    "start": "1122880",
    "end": "1129679"
  },
  {
    "text": "so that is where you can see a difference between auto saving which is like a google drive kind of a way of",
    "start": "1129679",
    "end": "1135919"
  },
  {
    "text": "saving files and an explicit save that is called by artist or workflows",
    "start": "1135919",
    "end": "1141679"
  },
  {
    "text": "given that netflix drive is used in multiple personas by different types of workflows",
    "start": "1141840",
    "end": "1148320"
  },
  {
    "start": "1142000",
    "end": "1319000"
  },
  {
    "text": "here are some of the learnings that we had while developing netflix right the number one learning was that there",
    "start": "1148320",
    "end": "1154880"
  },
  {
    "text": "were several points of making different choices for our architecture we intended",
    "start": "1154880",
    "end": "1159919"
  },
  {
    "text": "it to be a generic framework uh that is that can have any data store and meta data store plugged into it also a lot of",
    "start": "1159919",
    "end": "1167120"
  },
  {
    "text": "our architectural choices uh were dictated by the performance and",
    "start": "1167120",
    "end": "1172160"
  },
  {
    "text": "the latency aspects of files workflows and artists workstation and artist",
    "start": "1172160",
    "end": "1178000"
  },
  {
    "text": "experience that we wanted to provide using netflix drive a great example is we used fuse-based file system and we",
    "start": "1178000",
    "end": "1184160"
  },
  {
    "text": "implemented a lot of the code of netflix drive using c plus so we compared other",
    "start": "1184160",
    "end": "1189200"
  },
  {
    "text": "languages and we thought that c plus gave us the best performance results when compared to other languages and",
    "start": "1189200",
    "end": "1194880"
  },
  {
    "text": "performance was a critical feature of netflix drive that we wanted to provide the other is designing a generic",
    "start": "1194880",
    "end": "1201520"
  },
  {
    "text": "framework for several operating systems is very difficult in our case we support netflix drive on",
    "start": "1201520",
    "end": "1207039"
  },
  {
    "text": "centos osx and windows and we leverage fuse file system so we had",
    "start": "1207039",
    "end": "1212720"
  },
  {
    "text": "to then investigate a lot of the alternatives for few space file systems on these different operating systems and",
    "start": "1212720",
    "end": "1218720"
  },
  {
    "text": "that also multiplied our testing matrix our supportability matrix",
    "start": "1218720",
    "end": "1224320"
  },
  {
    "text": "the third learning is that the key to scalability is handling metadata in our case because we work with",
    "start": "1224320",
    "end": "1230880"
  },
  {
    "text": "disseparate packets and we have different layers of caching and tiering we actually uh rely heavily on metadata",
    "start": "1230880",
    "end": "1238400"
  },
  {
    "text": "operations being cached in netflix drive that gives us a great performance for a",
    "start": "1238400",
    "end": "1243440"
  },
  {
    "text": "lot of the studio applications and workflows that are very metadata heavy having multiple tiers of storage can",
    "start": "1243440",
    "end": "1249520"
  },
  {
    "text": "definitely provide performance benefits when we designed netflix drive we did not restrict ourselves to just the local",
    "start": "1249520",
    "end": "1255120"
  },
  {
    "text": "storage or cloud storage we in fact wanted it to be built in a way that different tiers of storage can easily",
    "start": "1255120",
    "end": "1262080"
  },
  {
    "text": "leverage a netflix right framework and be added as a backend for netflix drive",
    "start": "1262080",
    "end": "1267760"
  },
  {
    "text": "and that's that came through in our design in our architecture and in our code",
    "start": "1267760",
    "end": "1273600"
  },
  {
    "text": "having a stacked approach to software architecture was very critical for netflix drive a great example is again",
    "start": "1273600",
    "end": "1280000"
  },
  {
    "text": "the idea of shared names namespaces so we are currently working on the ability to share files between different",
    "start": "1280000",
    "end": "1286000"
  },
  {
    "text": "workstations or between different artists and this is built on top of our eventing framework uh which is again a",
    "start": "1286000",
    "end": "1292799"
  },
  {
    "text": "part of the netflix drive architecture itself so when one netflix drive has a file that is added to the namespace it",
    "start": "1292799",
    "end": "1299360"
  },
  {
    "text": "generates an event which is consumed by different cloud services and is also",
    "start": "1299360",
    "end": "1305360"
  },
  {
    "text": "then using the rest interface of the subsequent netflix drive to inject that file into the netflix drive instances",
    "start": "1305360",
    "end": "1311520"
  },
  {
    "text": "namespace so this is how you can build on top of existing primitives of netflix",
    "start": "1311520",
    "end": "1316880"
  },
  {
    "text": "drive if you would like to learn more about netflix drive we have a tech blog",
    "start": "1316880",
    "end": "1322159"
  },
  {
    "start": "1319000",
    "end": "1337000"
  },
  {
    "text": "available on the netflix tech blog channel with that i end my talk thank you so",
    "start": "1322159",
    "end": "1327440"
  },
  {
    "text": "much for joining me today and i hope you have a wonderful day thank you",
    "start": "1327440",
    "end": "1333840"
  },
  {
    "text": "thanks for the great presentation i always enjoy watching it um i know we have some additional questions",
    "start": "1337520",
    "end": "1343039"
  },
  {
    "text": "that are gonna roll in uh and i was just gonna kick it off by asking a question of you that came to mind while i was",
    "start": "1343039",
    "end": "1348080"
  },
  {
    "text": "watching it um you know being an application you built natively on the cloud",
    "start": "1348080",
    "end": "1353120"
  },
  {
    "text": "you know what was your biggest challenge around scalability i assume everything wasn't just flawless day one did you",
    "start": "1353120",
    "end": "1358400"
  },
  {
    "text": "have to did you make some technical trade-offs to achieve the skill you wanted given how many assets mike uh",
    "start": "1358400",
    "end": "1363679"
  },
  {
    "text": "netflix handles yes yes and that's a great question because uh scalability uh we are",
    "start": "1363679",
    "end": "1370480"
  },
  {
    "text": "targeting netflix drive to serve exa bytes of data and billions of assets so uh designing for scalability was one of",
    "start": "1370480",
    "end": "1377520"
  },
  {
    "text": "the cornerstones of the architecture itself now when we think in terms of scaling scaling a solution on cloud uh",
    "start": "1377520",
    "end": "1383919"
  },
  {
    "text": "oftentimes we think that the bottleneck would be the data store but actually it is the metadata store that becomes the",
    "start": "1383919",
    "end": "1389360"
  },
  {
    "text": "bottleneck so we focused a lot on the metadata management how we could reduce",
    "start": "1389360",
    "end": "1394559"
  },
  {
    "text": "uh the amount of calls that are done to metadata stores so caching a lot of that data on the netflix drive locally",
    "start": "1394559",
    "end": "1402159"
  },
  {
    "text": "something that gave us great performance the other thing is uh in terms of the data store itself we explored having",
    "start": "1402159",
    "end": "1408559"
  },
  {
    "text": "file systems in the cloud uh like efs but with file systems you cannot scale",
    "start": "1408559",
    "end": "1413919"
  },
  {
    "text": "beyond a point it impacts your performance if you really want to serve my billions of assets you need to use",
    "start": "1413919",
    "end": "1419760"
  },
  {
    "text": "some form of an object store and not a file store so that meant that our files and folders which our artists are used",
    "start": "1419760",
    "end": "1426320"
  },
  {
    "text": "to had to be translated into objects now there is no the simplest thing to do is have a one is to one mapping between",
    "start": "1426320",
    "end": "1432640"
  },
  {
    "text": "every file and an object but that is very simplistic because sometimes file sizes may be bigger than the maximum",
    "start": "1432640",
    "end": "1439360"
  },
  {
    "text": "object size supported so you really want the ability to have a file mapped to multiple objects and therein lies the",
    "start": "1439360",
    "end": "1446400"
  },
  {
    "text": "essence of deduplication as well because if you change a pixel in the file you will then only change the object that",
    "start": "1446400",
    "end": "1453039"
  },
  {
    "text": "has that chunk of the file so building that translation layer was a",
    "start": "1453039",
    "end": "1458240"
  },
  {
    "text": "trade-off and was something that we did for scalability uh so these are like",
    "start": "1458240",
    "end": "1463279"
  },
  {
    "text": "examples of you know how we designed for the cloud thinking about scalable scalability challenges there",
    "start": "1463279",
    "end": "1470240"
  },
  {
    "start": "1470000",
    "end": "1531000"
  },
  {
    "text": "awesome awesome and it looks like we had a couple questions rolling one of them was how would you compare netflix drive",
    "start": "1470240",
    "end": "1476400"
  },
  {
    "text": "with other cloud storage drive systems like google drive yes uh that's a great question and that",
    "start": "1476400",
    "end": "1482400"
  },
  {
    "text": "was one of the first things that we were asked when we were designing netflix drive so google drive we compared the",
    "start": "1482400",
    "end": "1487919"
  },
  {
    "text": "performance of google drive with netflix drive the advantage that netflix drive has is because we have a tiered",
    "start": "1487919",
    "end": "1494159"
  },
  {
    "text": "architecture of storage where we leverage our what we call media cache media cache",
    "start": "1494159",
    "end": "1499919"
  },
  {
    "text": "is nothing but a media store a caching uh layer that is closer to the user and the applications um and we also cache a",
    "start": "1499919",
    "end": "1507039"
  },
  {
    "text": "lot of data on the local file store so google drive doesn't do that and we",
    "start": "1507039",
    "end": "1512960"
  },
  {
    "text": "so we could always get local performance uh local file system performance compared to google drive",
    "start": "1512960",
    "end": "1518720"
  },
  {
    "text": "and we if you remove the local file system from the picture even then because we have",
    "start": "1518720",
    "end": "1525120"
  },
  {
    "text": "our media caches that are spread across the globe we can still perform much better than google drive",
    "start": "1525120",
    "end": "1531520"
  },
  {
    "start": "1531000",
    "end": "1626000"
  },
  {
    "text": "i see it probably doesn't help all your data's in s3 as well i don't know if google drive does well",
    "start": "1531520",
    "end": "1537840"
  },
  {
    "text": "so i'll just throw some others out here satish asked what prompted you to invent netflix drive over for example using the",
    "start": "1537840",
    "end": "1544799"
  },
  {
    "text": "aws file storage gateway uh that's a great question so uh one of",
    "start": "1544799",
    "end": "1549840"
  },
  {
    "text": "our cornerstones for uh thinking about netflix drive is security so uh we",
    "start": "1549840",
    "end": "1555360"
  },
  {
    "text": "wanted to design a system that could provide our artists that are globally distributed a secure way of accessing",
    "start": "1555360",
    "end": "1561919"
  },
  {
    "text": "only the data that they is relevant to them and we investigated aws file",
    "start": "1561919",
    "end": "1567039"
  },
  {
    "text": "storage gateway uh but the performance and the security aspects of it did not match our requirements uh the second uh",
    "start": "1567039",
    "end": "1573760"
  },
  {
    "text": "thing is that the file storage gateway actually doesn't uh i don't think when we investigated it it would translate it",
    "start": "1573760",
    "end": "1580159"
  },
  {
    "text": "into objects on the backend so for us we really wanted the power to have these",
    "start": "1580159",
    "end": "1585919"
  },
  {
    "text": "objects closer to the user in our media caches and control where these objects",
    "start": "1585919",
    "end": "1591200"
  },
  {
    "text": "are stored a great example is the case where let's say multiple artists are working on an asset now these assets if",
    "start": "1591200",
    "end": "1598480"
  },
  {
    "text": "every iteration of it is stored in the cloud your cloud costs will explode so what we wanted to do was enable these",
    "start": "1598480",
    "end": "1605440"
  },
  {
    "text": "assets to be stored in media caches which is something that we own and only the final copy goes to the cloud so that",
    "start": "1605440",
    "end": "1612480"
  },
  {
    "text": "way we can leverage a hybrid infrastructure control what gets pushed to the cloud versus what stays locally",
    "start": "1612480",
    "end": "1619440"
  },
  {
    "text": "uh or in shared storage and those are primitives that were not provided by file storage gateway to us",
    "start": "1619440",
    "end": "1626559"
  },
  {
    "start": "1626000",
    "end": "1689000"
  },
  {
    "text": "i see yeah we have similar challenges you know pinterest where people say hey why don't you use eks but 90 of the work",
    "start": "1626559",
    "end": "1632480"
  },
  {
    "text": "we do is integrating our paths around the cloud offering right it's like you still have to do all that work with security",
    "start": "1632480",
    "end": "1638799"
  },
  {
    "text": "um next one was how many requests can your system handle in an hour do you have any",
    "start": "1638799",
    "end": "1644240"
  },
  {
    "text": "sense of like rough metrics and we can also take some of these offline if you have to go dig some numbers",
    "start": "1644240",
    "end": "1649440"
  },
  {
    "text": "yeah because i'll have to dig those numbers and uh confirm that we can share those right now because uh a lot of our workloads",
    "start": "1649440",
    "end": "1656960"
  },
  {
    "text": "are internal workloads that are running on netflix drive uh and we we'll have to look into what that means",
    "start": "1656960",
    "end": "1663120"
  },
  {
    "text": "but uh in a sense uh we have seen that compared to the local like i i ran in",
    "start": "1663120",
    "end": "1668960"
  },
  {
    "text": "fio to compare uh netflix drive with other alternatives and we perform much better",
    "start": "1668960",
    "end": "1675520"
  },
  {
    "text": "than google drive so google drive i think has a lot of limits on the number of folders the number of files that you",
    "start": "1675520",
    "end": "1680559"
  },
  {
    "text": "can put in netflix drive has no such limits so i think the number of requests i can asynchronously uh like reach out",
    "start": "1680559",
    "end": "1687120"
  },
  {
    "text": "and confirm that number okay great great yeah and tawan i think ask that question so you can ping you",
    "start": "1687120",
    "end": "1692720"
  },
  {
    "start": "1689000",
    "end": "1806000"
  },
  {
    "text": "directly there are three additional questions i'll let you take a look and you sort of pick which one",
    "start": "1692720",
    "end": "1698399"
  },
  {
    "text": "you want to answer first yes sure would efs work as a substitute to some",
    "start": "1698399",
    "end": "1704399"
  },
  {
    "text": "extent for netflix drive efs could have worked as a substitute but efs will not scale beyond a point",
    "start": "1704399",
    "end": "1711760"
  },
  {
    "text": "and uh because in general if you have to design scalable systems you have to pick object",
    "start": "1711760",
    "end": "1716799"
  },
  {
    "text": "stores over file stores object stores give you more scalability and you can also cache pieces of objects",
    "start": "1716799",
    "end": "1724559"
  },
  {
    "text": "also deduplication is a challenge because uh if you change a pixel of a file then you have to probably uh like",
    "start": "1724559",
    "end": "1732000"
  },
  {
    "text": "have that synced to efs and have it stored as a file in multiple",
    "start": "1732000",
    "end": "1737039"
  },
  {
    "text": "tiers of caches that is not something that we we felt was giving us the performance that we needed so we went",
    "start": "1737039",
    "end": "1742720"
  },
  {
    "text": "with object stores um okay the other question was why cockroach was selected as a database was",
    "start": "1742720",
    "end": "1749279"
  },
  {
    "text": "there a specific use case for it did you guys compare it with other options so we actually have a lot of databases that",
    "start": "1749279",
    "end": "1756399"
  },
  {
    "text": "are built inside netflix uh and we have layers on top of different databases cockroach database was the first one",
    "start": "1756399",
    "end": "1763760"
  },
  {
    "text": "that we picked because it gave us a seamless interface to interact with it and we wanted to leverage something that",
    "start": "1763760",
    "end": "1770559"
  },
  {
    "text": "was built in house and it is scalable horizontally it's a sequel database that is horizontally scalable so we uh that's",
    "start": "1770559",
    "end": "1778240"
  },
  {
    "text": "the reason why we went with that also you could deploy it in on premise or on cloud so if we ever wanted to go into a",
    "start": "1778240",
    "end": "1784960"
  },
  {
    "text": "hybrid situation we always had the option of doing that that being said cockroachdb was the first one that we",
    "start": "1784960",
    "end": "1791760"
  },
  {
    "text": "picked but our code is written in a way that we could have picked anyone um we also built a lot of security primitives",
    "start": "1791760",
    "end": "1798720"
  },
  {
    "text": "event mechanisms all of that for cockroach tv and we wanted to just leverage what is already built so we went with cockroachdb",
    "start": "1798720",
    "end": "1805919"
  },
  {
    "text": "cool um you know i'm personally interested in the question from karthik you know having been at netflix myself for quite a few years i know we have",
    "start": "1805919",
    "end": "1812240"
  },
  {
    "start": "1806000",
    "end": "1841000"
  },
  {
    "text": "some you have so many partners there yeah have your partners in the industry adopted use of the drive like i assume",
    "start": "1812240",
    "end": "1818159"
  },
  {
    "text": "you have to work with different publishing houses and producers uh so at this point we are",
    "start": "1818159",
    "end": "1823600"
  },
  {
    "text": "working with artists that are in netflix and they have adopted netflix drive uh",
    "start": "1823600",
    "end": "1829039"
  },
  {
    "text": "but we haven't reached out to the publishers as yet but the independent artists work with our tools that are",
    "start": "1829039",
    "end": "1835120"
  },
  {
    "text": "actually would be supported by netflix drives those tools will be a part of netflix drive so",
    "start": "1835120",
    "end": "1842080"
  },
  {
    "start": "1841000",
    "end": "1926000"
  },
  {
    "text": "great great all right there's two additional ones ones about sim linking possibilities one's about copy on right techniques",
    "start": "1842080",
    "end": "1848480"
  },
  {
    "text": "yes uh so you've described how big objects are split and every small bit of it is",
    "start": "1848480",
    "end": "1853919"
  },
  {
    "text": "referenced in a file and then that there was a challenge deduplicating how is that different from sim linking so uh in",
    "start": "1853919",
    "end": "1859519"
  },
  {
    "text": "object stores you have versioning so every time you change even or mutate a small part of an object you create a new",
    "start": "1859519",
    "end": "1865760"
  },
  {
    "text": "version of the object now if you imagine a big file but only a small pixel of it gets changed that means that in a",
    "start": "1865760",
    "end": "1873360"
  },
  {
    "text": "traditional sense if your file was mapped to an object you would have to write the entire file again as an object",
    "start": "1873360",
    "end": "1878960"
  },
  {
    "text": "or send the entire bits again you cannot just send the delta and apply that delta on cloud stores so by chunking you",
    "start": "1878960",
    "end": "1886320"
  },
  {
    "text": "actually reduce the size of the object that you have to send over to the cloud and choosing the appropriate chunk size",
    "start": "1886320",
    "end": "1893039"
  },
  {
    "text": "is more of an art than a science because now if you have many smaller chunks uh",
    "start": "1893039",
    "end": "1898240"
  },
  {
    "text": "you will just have to manage a lot of data and a lot of translation logic uh and your metadata will just grow so that",
    "start": "1898240",
    "end": "1905279"
  },
  {
    "text": "is something that was uh and the other other aspect is also encryption because today we encrypt at a chunk granularity",
    "start": "1905279",
    "end": "1912080"
  },
  {
    "text": "so uh if you have many chunks you will have to then have so many encryption keys in that metadata and manage the",
    "start": "1912080",
    "end": "1917440"
  },
  {
    "text": "metadata for that uh so that is how it is sort of challenging to you know duplicate content also uh and in such",
    "start": "1917440",
    "end": "1924000"
  },
  {
    "text": "scenarios uh awesome it looks like there's one last one there oh there's a couple",
    "start": "1924000",
    "end": "1930960"
  },
  {
    "start": "1926000",
    "end": "1971000"
  },
  {
    "text": "yes uh do you use a copy and write techniques in netflix drive to optimize your storage footprint",
    "start": "1930960",
    "end": "1937440"
  },
  {
    "text": "at this point we do not use that but we could definitely explore using copy on right",
    "start": "1937440",
    "end": "1943919"
  },
  {
    "text": "to optimize the storage footprint yeah that's a good suggestion and what is the usual chunk size so",
    "start": "1943919",
    "end": "1950960"
  },
  {
    "text": "chunk size it depends but i think if i remember correctly it's in megabytes like",
    "start": "1950960",
    "end": "1956080"
  },
  {
    "text": "64 megabytes is what i i remember last seen it but it is configurable",
    "start": "1956080",
    "end": "1961279"
  },
  {
    "text": "and we configurable that in the sense that it is still statically assigned at the",
    "start": "1961279",
    "end": "1966320"
  },
  {
    "text": "start uh but we can change that number uh to suit our performance needs",
    "start": "1966320",
    "end": "1972080"
  },
  {
    "start": "1971000",
    "end": "2016000"
  },
  {
    "text": "all right there's a great question from dave our security controls managed across regions to see an external api or",
    "start": "1972080",
    "end": "1978080"
  },
  {
    "text": "built into the drive uh it's actually built in by uh built into our crdb uh as layer on top of",
    "start": "1978080",
    "end": "1986640"
  },
  {
    "text": "cockroachdb that we have so netflix drive leverages uh that layer to handle",
    "start": "1986640",
    "end": "1992399"
  },
  {
    "text": "all the security primitives uh and there are several security services that are built within netflix so we leverage",
    "start": "1992399",
    "end": "1998399"
  },
  {
    "text": "those at this point we don't have uh external apis uh that are uh that we can",
    "start": "1998399",
    "end": "2004720"
  },
  {
    "text": "plug into at this point but we plan to abstract them out as well whenever we release our open source version so that",
    "start": "2004720",
    "end": "2010640"
  },
  {
    "text": "anyone can build those plug-able modules as well cool",
    "start": "2010640",
    "end": "2016559"
  },
  {
    "start": "2016000",
    "end": "2059000"
  },
  {
    "text": "we're probably waiting for a question or two to moderate in we got five more minutes for people who want to submit questions um i guess i had one for you",
    "start": "2016559",
    "end": "2022720"
  },
  {
    "text": "before the next one rolls in which is um you mentioned open sourcing this and i know open sourcing is always a hurdle",
    "start": "2022720",
    "end": "2028799"
  },
  {
    "text": "and takes a lot of effort you have a general sense as to when this would be open source uh so we are working towards it for uh",
    "start": "2028799",
    "end": "2035760"
  },
  {
    "text": "next year uh so we hope to have it open source next year because we we have a lot of other uh folks that are trying to",
    "start": "2035760",
    "end": "2042480"
  },
  {
    "text": "build studios in the cloud reach out to us and they want to use netflix drive as",
    "start": "2042480",
    "end": "2048720"
  },
  {
    "text": "well the open source version of it and build plugable modules for their use cases so we do intend to prioritize this",
    "start": "2048720",
    "end": "2055200"
  },
  {
    "text": "uh and get it out next year so okay someone always has to ask that when",
    "start": "2055200",
    "end": "2060720"
  },
  {
    "text": "you mention open sourcing right yes um let me see we'll give it a couple",
    "start": "2060720",
    "end": "2067839"
  },
  {
    "text": "more minutes i think we answered all the questions um that came oh there's one more",
    "start": "2067839",
    "end": "2074320"
  },
  {
    "text": "yeah uh c plus plus for performance reasons have you considered using rust uh we did not",
    "start": "2074320",
    "end": "2080638"
  },
  {
    "text": "consider using rust because i think one of the reasons was that a lot of fused file system support",
    "start": "2080639",
    "end": "2087679"
  },
  {
    "text": "was not at that time present in rust um and secondly c plus plus was a choice uh",
    "start": "2087679",
    "end": "2093679"
  },
  {
    "text": "it i mean first of all you you pick a language for the performance reasons and the second",
    "start": "2093679",
    "end": "2098720"
  },
  {
    "text": "thing is you pick a language that you're more familiar with so i i mean at least me i'm not familiar with rust i have not",
    "start": "2098720",
    "end": "2104800"
  },
  {
    "text": "used it so it would take me some time to get used to it and explore it and use it in the best way possible so that would",
    "start": "2104800",
    "end": "2111200"
  },
  {
    "text": "have meant lesser time devoted to the development of netflix drive but there is nothing that stops stops us from",
    "start": "2111200",
    "end": "2117440"
  },
  {
    "text": "investigating it in the future when you know we've made it a framework and we release it out there so",
    "start": "2117440",
    "end": "2124000"
  },
  {
    "text": "very cool all right if anybody has any additional questions um you can drop them in there",
    "start": "2125839",
    "end": "2131200"
  },
  {
    "start": "2126000",
    "end": "2225000"
  },
  {
    "text": "we got a couple more minutes uh and john just shared what's going to happen after this session",
    "start": "2131200",
    "end": "2137040"
  },
  {
    "text": "is if you want to continue the conversation with tejas we're going to drop over to a zoom room if you have zoom available uh drop in there and",
    "start": "2137040",
    "end": "2144000"
  },
  {
    "text": "you'll be able to chat with them directly it's a very informal sort of i wouldn't call it a mob but we get a",
    "start": "2144000",
    "end": "2149280"
  },
  {
    "text": "i'll jump on tasias with the additional questions um let's see i don't see any yet",
    "start": "2149280",
    "end": "2156560"
  },
  {
    "text": "you know i always get excited when i get you know to deal with the sessions at qcon because i think the way you answered the questions tasis is a great",
    "start": "2156560",
    "end": "2162880"
  },
  {
    "text": "example of why we have practitioners give these talks right you can get the questions that are",
    "start": "2162880",
    "end": "2168400"
  },
  {
    "text": "very technical and pertinent and you can answer it right so it's obvious that you've you've dealt with these different challenges so um just underscores",
    "start": "2168400",
    "end": "2176400"
  },
  {
    "text": "one of the reasons i personally like qcon and that's not just a pitch i'm just saying i like seeing the directness yeah",
    "start": "2176400",
    "end": "2183680"
  },
  {
    "text": "all right yeah yeah why don't we um why don't we go ahead and we'll open up the zoom room and tasias i'll see you",
    "start": "2183680",
    "end": "2189760"
  },
  {
    "text": "over there and people feel free to click on the link we'll leave it up here for a minute um and we'll continue the conversation",
    "start": "2189760",
    "end": "2195520"
  },
  {
    "text": "there but thank you for your uh presentation just i'm sure you're gonna get a bunch of questions after this and",
    "start": "2195520",
    "end": "2201119"
  },
  {
    "text": "in the future yes thank you so much coburn and thank you everyone that has been a part of",
    "start": "2201119",
    "end": "2206320"
  },
  {
    "text": "this those are some excellent questions and excellent suggestions things that i'll take back and we will continue to",
    "start": "2206320",
    "end": "2212000"
  },
  {
    "text": "make it better thank you",
    "start": "2212000",
    "end": "2215839"
  },
  {
    "text": "[Music]",
    "start": "2218000",
    "end": "2224300"
  }
]