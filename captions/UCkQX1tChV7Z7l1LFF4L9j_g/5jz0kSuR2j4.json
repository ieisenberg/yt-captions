[
  {
    "start": "0",
    "end": "437000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "23240"
  },
  {
    "text": "tomorrow so welcome to the render script talk I'm Chad hos and I'm w m and we are",
    "start": "23240",
    "end": "30640"
  },
  {
    "text": "go ahead we'll do it at the same we are on we're on the UI toolkit team uh",
    "start": "30640",
    "end": "35879"
  },
  {
    "text": "working on Android future versions um as well as last minute presentations uh we",
    "start": "35879",
    "end": "41520"
  },
  {
    "text": "basically both do graphics and animation and UI related stuff oh and yeah and the reason why we're qualified to talk about",
    "start": "41520",
    "end": "48000"
  },
  {
    "text": "render script is I spent a lot of time using render script since Android 2.0 I went through the hell of the first",
    "start": "48000",
    "end": "54160"
  },
  {
    "text": "versions I help sh I helped shape the apis uh and ched just felt like it um so",
    "start": "54160",
    "end": "61280"
  },
  {
    "text": "that's why he's talking about it pretty much why I do everything uh yeah we are not actually on the team that does",
    "start": "61280",
    "end": "66640"
  },
  {
    "text": "render script we are on we're sort of a consumer of render script we use it for some of the UI stuff that we do and",
    "start": "66640",
    "end": "72200"
  },
  {
    "text": "we're also Graphics Geeks um but uh one of the guys that that's primarily a developer R script is Jason Sams he",
    "start": "72200",
    "end": "78960"
  },
  {
    "text": "wrote a couple of articles I have links uh later in the presentation about that um so on with the show whatever it is uh",
    "start": "78960",
    "end": "86280"
  },
  {
    "text": "this is the agenda we'll get into the agenda we don't need to go over the agenda slide okay so first some overview stuff um",
    "start": "86280",
    "end": "93960"
  },
  {
    "text": "actually how many people have taken a look at render script already okay so roughly half that is",
    "start": "93960",
    "end": "100000"
  },
  {
    "text": "impressive and scary uh it is I I think it's a really powerful thing and it's actually been",
    "start": "100000",
    "end": "105719"
  },
  {
    "text": "used by the platform for a couple of releases back to 21 already um so it's",
    "start": "105719",
    "end": "111000"
  },
  {
    "text": "not like it's just this brand new thing however the documentation is pretty slim I realized as I was writing some of the",
    "start": "111000",
    "end": "116719"
  },
  {
    "text": "demo stuff leading up to the talk that actually have an talk is probably a pretty good idea because it's kind of",
    "start": "116719",
    "end": "122200"
  },
  {
    "text": "hard to to piece together I'd say the the best thing you can do right now is take a look at the um SDK side apis and",
    "start": "122200",
    "end": "128599"
  },
  {
    "text": "the sample code um that's how you're going to learn it right now and we're working on the docs really really hard",
    "start": "128599",
    "end": "134040"
  },
  {
    "text": "yeah and not just the sample code but um all the live wallpapers that we wrote for Android 2.0 2.1 were written with",
    "start": "134040",
    "end": "140879"
  },
  {
    "text": "render script so they're really good examples of very complex scripts uh we won't be able to go through an example",
    "start": "140879",
    "end": "146720"
  },
  {
    "text": "as complex as one of our live wallpapers here uh but once you understand the basics uh you will be able to go read",
    "start": "146720",
    "end": "151800"
  },
  {
    "text": "those examples and understand what exactly they do uh yeah in fact the code for those those were a lot harder than",
    "start": "151800",
    "end": "158360"
  },
  {
    "text": "they would be if Rewritten today because they've written a lot of utilities on top of the core functionality of render",
    "start": "158360",
    "end": "163640"
  },
  {
    "text": "script uh to make a lot of the boiler plate of writing a render script um code easier so anyway render script is for",
    "start": "163640",
    "end": "170440"
  },
  {
    "text": "the people that haven't touched it and have no idea why they're here uh it's a new language it's also a compiler um",
    "start": "170440",
    "end": "176159"
  },
  {
    "text": "it's actually two compilers uh and it's a runtime uh and the basic purpose of of",
    "start": "176159",
    "end": "181200"
  },
  {
    "text": "render script is for performing fast rendering uh 2D and 3D rendering functionality as well as computation so",
    "start": "181200",
    "end": "187879"
  },
  {
    "text": "it's got a rendering side and it's got a compute side um and one of the ways that you can think about this is you can have",
    "start": "187879",
    "end": "194239"
  },
  {
    "text": "the speed of native applications so if you're used to doing ndk applications or native applications on other platforms",
    "start": "194239",
    "end": "200480"
  },
  {
    "text": "um and maybe you're thinking well I don't know if if uh SDK is appropriate because maybe there's extra overhead of",
    "start": "200480",
    "end": "206480"
  },
  {
    "text": "you know VM and GC and stuff like that well you've got the per of native application um but you've also got the",
    "start": "206480",
    "end": "213159"
  },
  {
    "text": "portability of an SDK application so and you don't have to deal with ji how many",
    "start": "213159",
    "end": "218640"
  },
  {
    "text": "of you have ever written J Code yeah uh did you like it okay I spent the past eight months of",
    "start": "218640",
    "end": "225760"
  },
  {
    "text": "my life pretty much writing J code and I really wanted to die at some point uh uh so the the portability thing",
    "start": "225760",
    "end": "233879"
  },
  {
    "text": "comes in if you think about like writing an ndk application you're basically compiling it for a Target architecture",
    "start": "233879",
    "end": "239840"
  },
  {
    "text": "which is really awesome if that's the only architecture that the platform ships on but that's not right so we have",
    "start": "239840",
    "end": "245680"
  },
  {
    "text": "primary architectures but if a new one comes out maybe your application is not going to work there so NK is specific to",
    "start": "245680",
    "end": "251840"
  },
  {
    "text": "whatever you build for well what you really want and what you get with an SDK application is the ability to just run",
    "start": "251840",
    "end": "257040"
  },
  {
    "text": "it wherever the platform is available right the SDK does that through the magic of these classes that we bundle up",
    "start": "257040",
    "end": "262720"
  },
  {
    "text": "into the apks and and the problem with multiple architectures uh even today you could decide to uh pick one of the AR",
    "start": "262720",
    "end": "269680"
  },
  {
    "text": "iectures that that is supported by every Android phone so if you go all the way back to the first Android phone you have",
    "start": "269680",
    "end": "276120"
  },
  {
    "text": "to support armv5 um it's really slow you don't get Hardware floating points you don't get",
    "start": "276120",
    "end": "281919"
  },
  {
    "text": "uh parallel floating point computations you could uh choose armv7 but then you",
    "start": "281919",
    "end": "286960"
  },
  {
    "text": "still can't use the neon instruction set that lets you do four operations at the same time uh and then when Google TV",
    "start": "286960",
    "end": "292520"
  },
  {
    "text": "will release their SDK that runs on x86 your app will not work uh so it's",
    "start": "292520",
    "end": "297680"
  },
  {
    "text": "obviously a prim for uh highly efficient applications and that's why we have render script so we'll get",
    "start": "297680",
    "end": "304199"
  },
  {
    "text": "into some of the reasons why it's a portable uh environment but that's certainly uh one of the big selling points about render script in addition",
    "start": "304199",
    "end": "310840"
  },
  {
    "text": "to just the the functionality and performance of it um so as we said it's actually it's gone public in 3.0 so as",
    "start": "310840",
    "end": "317639"
  },
  {
    "text": "of the honeycomb release we actually exposed the apis and allowed developers to write to it um but it has been used",
    "start": "317639",
    "end": "324120"
  },
  {
    "text": "um internally for the live wallpaper stuff since 2.1 and in 3.0 it's used for live wallpaper still it's also used for",
    "start": "324120",
    "end": "330960"
  },
  {
    "text": "the YouTube the cylinder the video wall as well as books the um cylinder of you",
    "start": "330960",
    "end": "337160"
  },
  {
    "text": "know the view of the hard covers the fronts of the books as well as the page turning effect did you have a question",
    "start": "337160",
    "end": "342960"
  },
  {
    "text": "so the question is rendos script is a public API in three does that mean you can compile against 30o and run on older",
    "start": "342960",
    "end": "348800"
  },
  {
    "text": "versions no uh because we change the apis a lot yeah it's very very different",
    "start": "348800",
    "end": "354680"
  },
  {
    "text": "from what it used to be uh and a lot better I could go I could go on and on",
    "start": "354680",
    "end": "361639"
  },
  {
    "text": "with war stories about the early days of render script uh my favorite one is you have this 2,000 lines of render script",
    "start": "361639",
    "end": "368440"
  },
  {
    "text": "and you have one syntax error somewhere uh the error message you get is a dump of the CPU",
    "start": "368440",
    "end": "374840"
  },
  {
    "text": "registers that was annoying okay uh so for those of you who have never played with uh",
    "start": "374840",
    "end": "381120"
  },
  {
    "text": "honeycomb behold 3D [Music]",
    "start": "381120",
    "end": "386680"
  },
  {
    "text": "oo and I think yeah books is not going to come in because it's not going to sync with my account either right uh we can try is that done with render script",
    "start": "386680",
    "end": "394599"
  },
  {
    "text": "yes so and this is also render script and actually if you open a book and you go turn a page um that is also render",
    "start": "394599",
    "end": "400720"
  },
  {
    "text": "script uh so I believe we use a web view to render the pages and then it's mapped uh in render script on top of a cool 3D",
    "start": "400720",
    "end": "407280"
  },
  {
    "text": "mesh that we uh change in real time so this gives you an example of how we use render script uh on the official Android",
    "start": "407280",
    "end": "413880"
  },
  {
    "text": "platform uh to create really cool animations in 3D with high performance so maners of effort going into the",
    "start": "413880",
    "end": "420360"
  },
  {
    "text": "latest greatest technology on top of multicore and GPU machines to turn a page of paper thank you very much a fake",
    "start": "420360",
    "end": "427919"
  },
  {
    "text": "page of paper yes all right uh so moving on uh the syntax that",
    "start": "427919",
    "end": "433720"
  },
  {
    "text": "you're going to see in some of the sample code that we'll walk through is based on the c99 language so it should be very approachable for people that",
    "start": "433720",
    "end": "439800"
  },
  {
    "start": "437000",
    "end": "523000"
  },
  {
    "text": "have used C and C++ which is really not that different from other languages like Java uh there's apis at two levels um so",
    "start": "439800",
    "end": "448919"
  },
  {
    "text": "as as we said that it's a portable uh application environment and part of that solution is it is actually part of an",
    "start": "448919",
    "end": "455639"
  },
  {
    "text": "SDK application so you have an SDK for creating the activity for initializing some stuff and then diving down into",
    "start": "455639",
    "end": "461160"
  },
  {
    "text": "render script code so there's an API for using render script at the SDK level to sort of set things up allocate memory",
    "start": "461160",
    "end": "467879"
  },
  {
    "text": "get things going and then there's also an a uh API at the render script level where you actually write render script",
    "start": "467879",
    "end": "473759"
  },
  {
    "text": "code um so we'll see uh chunks of that stuff uh one of the features of render script is interesting is that it figures",
    "start": "473759",
    "end": "480440"
  },
  {
    "text": "out how best to share the work on the given architecture so not only is it portable code that's going to run",
    "start": "480440",
    "end": "485919"
  },
  {
    "text": "everywhere but it's going to determine at runtime how best to execute it so if you got a GPU and you're doing rendering",
    "start": "485919",
    "end": "492120"
  },
  {
    "text": "obviously it's going to farm that out it's it's basically a layer on top of opengl right now for doing the rendering",
    "start": "492120",
    "end": "497240"
  },
  {
    "text": "so all that stuff goes into the GPU um for the compute side when you're doing calculations trigonometric math stuff",
    "start": "497240",
    "end": "503879"
  },
  {
    "text": "Vector operations all that stuff is going to happen on the CPU but if you have dual core you can actually Farm it out so you can have multiple threads",
    "start": "503879",
    "end": "510440"
  },
  {
    "text": "running in parallel on multiple cores eventually you can also uh potentially",
    "start": "510440",
    "end": "515760"
  },
  {
    "text": "farm that out of to the GPU if that's appropriate right now all the compute stuff is happening on the",
    "start": "515760",
    "end": "522039"
  },
  {
    "text": "CPU uh you want to talk about the for each uh yes we'll see a concrete example of this at the end of the talk we'll do",
    "start": "522479",
    "end": "528519"
  },
  {
    "start": "523000",
    "end": "600000"
  },
  {
    "text": "some life coding um but so this idea of being able to use multiple cores so either we can use you know two cores on",
    "start": "528519",
    "end": "535000"
  },
  {
    "text": "on the tgr to chipset or if we were able to run on the GPU we could run how many hundreds of course the gpus have these",
    "start": "535000",
    "end": "541040"
  },
  {
    "text": "days um and this is done with a very simple API on the render script site called",
    "start": "541040",
    "end": "546120"
  },
  {
    "text": "RS4 uh and this is actually one of the reasons why you do a lot of the setup on the dvic side with the the the Java API",
    "start": "546120",
    "end": "554040"
  },
  {
    "text": "um it's because we don't want you to be a able to do any allocation from the r from from the script uh because then",
    "start": "554040",
    "end": "559959"
  },
  {
    "text": "when you use RS for it it just makes all the synchronization Prime disappear uh",
    "start": "559959",
    "end": "565000"
  },
  {
    "text": "so it's a very simple API to use again we'll see an example of that later uh and this is how we run on multiple cores",
    "start": "565000",
    "end": "570760"
  },
  {
    "text": "so if you were to write uh the same thing you know using the the Java programming language you would have to create threads and you have to do some",
    "start": "570760",
    "end": "576800"
  },
  {
    "text": "synchronization and figure out how many cores you have or maybe you know figure out the way to use opencl or Cuda to use",
    "start": "576800",
    "end": "583000"
  },
  {
    "text": "the GPU um just using RS forage will do all the The Leverage for",
    "start": "583000",
    "end": "588920"
  },
  {
    "text": "you so there's an article that I wrote a few weeks ago and finally got around a posting uh last week um called Android",
    "start": "589279",
    "end": "596880"
  },
  {
    "text": "rendering options uh that explains B Bally what's on this slide um every time we get anywhere near mentoring render",
    "start": "596880",
    "end": "603560"
  },
  {
    "start": "600000",
    "end": "943000"
  },
  {
    "text": "script or honeycom then people say well you've got all these different ways of of putting pixels on the screen what am",
    "start": "603560",
    "end": "608640"
  },
  {
    "text": "I Ed supposed to use when um so here's the way I picture it um uh so this is my",
    "start": "608640",
    "end": "615040"
  },
  {
    "text": "perspective I think it's correct because I always do um so there's basically four buckets that you can think of there's",
    "start": "615040",
    "end": "621480"
  },
  {
    "text": "one big bucket called DK and basically if you're porting an application from some other platform or you have a lot of",
    "start": "621480",
    "end": "626800"
  },
  {
    "text": "native code or you've got a native Library you just want to get the thing working on Android this is an option",
    "start": "626800",
    "end": "631959"
  },
  {
    "text": "that makes sense right so there's the C code there's the GL apis uh everything just works on the STK side you have",
    "start": "631959",
    "end": "639399"
  },
  {
    "text": "basically three options to think about first of all there's the canvas API this is kind of the default if you write a",
    "start": "639399",
    "end": "644920"
  },
  {
    "text": "normal SDK application you've got buttons you've got list views you've got all this you know the the normal view",
    "start": "644920",
    "end": "651120"
  },
  {
    "text": "hierarchy and then if you have custom rendering you can override the on draw method and you get a canvas object in",
    "start": "651120",
    "end": "657240"
  },
  {
    "text": "there and then you call operations on the canas like draw text or Draw bit map or Draw Line This is the canvas API in",
    "start": "657240",
    "end": "664959"
  },
  {
    "text": "SDK right with canvas you can only do 2D uh so and also it's interesting because",
    "start": "664959",
    "end": "670680"
  },
  {
    "text": "it's very good at doing 2D Graphics uh right and as of honeycomb it's also",
    "start": "670680",
    "end": "676760"
  },
  {
    "text": "Hardware accelerated so one of the reasons that people look for other rendering operations be it ndk or opengl",
    "start": "676760",
    "end": "682120"
  },
  {
    "text": "wrappers prior to um 3.0 was that we weren't Hardware accelerated so yeah you",
    "start": "682120",
    "end": "687320"
  },
  {
    "text": "could do 2D Graphics but if you wanted to do fast 2D Graphics or if you want 3D Graphics functionality then you had to",
    "start": "687320",
    "end": "692760"
  },
  {
    "text": "look elsewhere as a 3D uh 3.0 we've got GPU acceleration for the graphic so all",
    "start": "692760",
    "end": "698720"
  },
  {
    "text": "that stuff is now uh pretty fast there's a question did we stick with lip skia uh",
    "start": "698720",
    "end": "704240"
  },
  {
    "text": "which is the the native 2D library that we use behind the canvas and did we hard to accelate that uh yes and no uh we",
    "start": "704240",
    "end": "711000"
  },
  {
    "text": "still use the ski library for some operations but we Hardware accelerated the drawing um underneath the the Java",
    "start": "711000",
    "end": "718160"
  },
  {
    "text": "canvas API so there's a new native library that the canvas talks to that",
    "start": "718160",
    "end": "723480"
  },
  {
    "text": "lives side by side with the old skia library you you can think of the canvas API is kind of being a wrapper on top of",
    "start": "723480",
    "end": "730399"
  },
  {
    "text": "skia and prior to 3.0 we would call down from the canvas API into native code and render everything through skia now",
    "start": "730399",
    "end": "737240"
  },
  {
    "text": "instead of going through skia we go to this other code that translates that into openg calls instead but some of the",
    "start": "737240",
    "end": "743839"
  },
  {
    "text": "rendering operations aren't handled uh automatically through opengl like path rendering has to be written to a bit map",
    "start": "743839",
    "end": "750760"
  },
  {
    "text": "first so we use skia to render it to a bit map and then we draw the bit map through opengl so some of the alha",
    "start": "750760",
    "end": "756120"
  },
  {
    "text": "blending bottleneck and things like that been converted into GL uh yeah all the B that was the reason all the BS that we",
    "start": "756120",
    "end": "762160"
  },
  {
    "text": "had with software rendering uh they pretty much don't exist anymore because we use OPG if you're interested uh we",
    "start": "762160",
    "end": "768440"
  },
  {
    "text": "give a talk at Google IO called Android accelerated rendering uh the video is on YouTube we give all the details and we",
    "start": "768440",
    "end": "773880"
  },
  {
    "text": "talk about some of the limitations and problems with this approach yeah so the the runner script",
    "start": "773880",
    "end": "779440"
  },
  {
    "text": "samples in the SDK do not run in the emulator uh yes that's correct because they require openg ges2 and it's not",
    "start": "779440",
    "end": "785959"
  },
  {
    "text": "supported in the emulator yet uh there was a demo a preview of the emulator",
    "start": "785959",
    "end": "791560"
  },
  {
    "text": "supporting openg GS2 at google.io it's coming yeah not only supporting the functionality but also supporting the",
    "start": "791560",
    "end": "797720"
  },
  {
    "text": "performance uh that the emulator needs for graphics um okay so canvis API we're",
    "start": "797720",
    "end": "803480"
  },
  {
    "text": "done second option open openg wrappers there are wrappers at the SDK level for",
    "start": "803480",
    "end": "808760"
  },
  {
    "text": "open G ES1 and opengl es2 so if you want to write an openg application but you",
    "start": "808760",
    "end": "814519"
  },
  {
    "text": "want it to be portable or you want it to actually work with other stuff in the SDK um then you can certainly use the",
    "start": "814519",
    "end": "821760"
  },
  {
    "text": "opengl wrappers and basically write a full-on opengl uh application at the SDK level um it's mostly for simple",
    "start": "821760",
    "end": "830199"
  },
  {
    "text": "applications uh because there is a certain amount of overhead associated with every call through to jni which",
    "start": "830199",
    "end": "836360"
  },
  {
    "text": "anybody that works with jni has probably noticed before on every platform um so",
    "start": "836360",
    "end": "841800"
  },
  {
    "text": "every one of those open jail calls is basically a wrapper on top of native functionality so you've got to go down through that layer every time uh if",
    "start": "841800",
    "end": "848600"
  },
  {
    "text": "you're writing a game that may not be the most appropriate way to do it um because that's the kind of overhead you",
    "start": "848600",
    "end": "854440"
  },
  {
    "text": "don't want to take um if you're doing Simple 3D functionality you're just drawing a quad every now and then you",
    "start": "854440",
    "end": "860000"
  },
  {
    "text": "need to be texture mapped that's great U but one of the problems of openg is how many of you have played with openg",
    "start": "860000",
    "end": "865639"
  },
  {
    "text": "before uh openg GLS two okay okay same amount of people uh for those of you",
    "start": "865639",
    "end": "871040"
  },
  {
    "text": "have never tried it actually last Friday I wrote a little sample uh for something I'm working on and I'm just drawing a",
    "start": "871040",
    "end": "877480"
  },
  {
    "text": "photo on screen that's all I'm doing that's 400 lines of code with opes 2 because there's a lot of setup uh",
    "start": "877480",
    "end": "884000"
  },
  {
    "text": "involved so even when you want to to draw something very simple in 3D it's still quite a lot of work you have to",
    "start": "884000",
    "end": "889560"
  },
  {
    "text": "learn quite a bit uh about a um so here comes render script that will do a lot",
    "start": "889560",
    "end": "894880"
  },
  {
    "text": "of that work for you uh and also render script so render script will use use internally open gr to do the rendering",
    "start": "894880",
    "end": "900680"
  },
  {
    "text": "so it won't be faster at drawing uh but all your logic will be native code so we",
    "start": "900680",
    "end": "906880"
  },
  {
    "text": "get rid of the pain of initializing openg and we get all the efficiency of",
    "start": "906880",
    "end": "912079"
  },
  {
    "text": "running native code instead of running inside the virtual machine question uh is it similar to glut uh glut was a",
    "start": "912079",
    "end": "919240"
  },
  {
    "text": "utility library for opengl on the desktop uh yes and no I mean it has some",
    "start": "919240",
    "end": "925320"
  },
  {
    "text": "features like draw quad for instance to draw a quad uh but it's mostly that it will do a the initialization for you",
    "start": "925320",
    "end": "932120"
  },
  {
    "text": "handle the threading stuff like that and then it's got other functionality in there as well like compute and Vector",
    "start": "932120",
    "end": "937240"
  },
  {
    "text": "operations and stuff that glut didn't approach okay so uh when you're writing",
    "start": "937240",
    "end": "944759"
  },
  {
    "start": "943000",
    "end": "1040000"
  },
  {
    "text": "a render script application there's some sort of basic steps um first of all you figure out what it is you actually want",
    "start": "944759",
    "end": "950040"
  },
  {
    "text": "to run in render script um a couple of the key uh elements to think about for",
    "start": "950040",
    "end": "955279"
  },
  {
    "text": "render script applications are uh Loops that you want to speed up or particular pieces of functionality that aren't going to work through the SDK like",
    "start": "955279",
    "end": "961519"
  },
  {
    "text": "you're doing 3D Graphics so you may use render script for just bite-sized pieces of like I want to speed up this inner",
    "start": "961519",
    "end": "967199"
  },
  {
    "text": "loop or I want the the following effect on this custom View and you can actually just write that thing in render script",
    "start": "967199",
    "end": "973720"
  },
  {
    "text": "um and it'll draw to it's a little uh frame buffer and and be all happy and accelerated but the rest of the",
    "start": "973720",
    "end": "979079"
  },
  {
    "text": "application could be completely SDK on the other hand you may want the entire application like the books application to be a render script application um",
    "start": "979079",
    "end": "986839"
  },
  {
    "text": "okay so you figure out what it is you actually want in render script and then you have two sides of the render script",
    "start": "986839",
    "end": "992560"
  },
  {
    "text": "application to write you have the render script file itself where you write the functions and you expose the fields that you want the data structures all the the",
    "start": "992560",
    "end": "999759"
  },
  {
    "text": "core functionality of what it is render script is going to do and then you write the files on the SDK side and these are",
    "start": "999759",
    "end": "1005519"
  },
  {
    "text": "the files that basically initialize and create the script bind to it and uh initialize it and start it running um",
    "start": "1005519",
    "end": "1012440"
  },
  {
    "text": "and we'll go over some of these steps in a bit more interesting detail but this involves stuff like allocating the",
    "start": "1012440",
    "end": "1018279"
  },
  {
    "text": "memory that you then hand over to render script because one of the key constraints with render script is it allocates nothing right you can have a",
    "start": "1018279",
    "end": "1024678"
  },
  {
    "text": "simple field in there but you cannot have an array of objects instead you would allocate that array at the SDK",
    "start": "1024679",
    "end": "1030520"
  },
  {
    "text": "side hand it over to render script and then render script can operate on that uh and then finally you just you know",
    "start": "1030520",
    "end": "1036160"
  },
  {
    "text": "Shipe your application that's easy okay so compilation steps this this",
    "start": "1036160",
    "end": "1041760"
  },
  {
    "start": "1040000",
    "end": "1280000"
  },
  {
    "text": "is part of the interesting technology behind render script uh we use llvm which is a open source available uh",
    "start": "1041760",
    "end": "1048400"
  },
  {
    "text": "compiler and runtime it's it stands for low-level virtual machine you guys use clang for the front end of the do we use",
    "start": "1048400",
    "end": "1055320"
  },
  {
    "text": "clang uh it's a variation of cling okay so we actually use two pieces",
    "start": "1055320",
    "end": "1061200"
  },
  {
    "text": "of llvm one is the front end and one is the back end uh on the front end we compile the source code that you write",
    "start": "1061200",
    "end": "1067400"
  },
  {
    "text": "the actual render script application into bit code and then we ship that bit code we we pack that binary in with the",
    "start": "1067400",
    "end": "1074120"
  },
  {
    "text": "rest of your SDK code into the APK and then when your application actually launches on the device at runtime we do",
    "start": "1074120",
    "end": "1080919"
  },
  {
    "text": "the other step the backend lovm so we actually have a small lovm uh compiler sitting on the device which at runtime",
    "start": "1080919",
    "end": "1088039"
  },
  {
    "text": "will then say Oh okay this needs to be compiled into device code and this is how you get the portability that we were talking about right because you're",
    "start": "1088039",
    "end": "1093880"
  },
  {
    "text": "shipping not source code but this bit code that is uh device independent and then at runtime it's actually installed",
    "start": "1093880",
    "end": "1100120"
  },
  {
    "text": "on a device and it knows oh this is the uh arm architecture so I'm going to compile to that it does that last step",
    "start": "1100120",
    "end": "1106559"
  },
  {
    "text": "of compilation and now you have natively compiled code running uh yes the code is cached uh so",
    "start": "1106559",
    "end": "1113240"
  },
  {
    "text": "how do you use render script from uh AOSP uh go look at packages SL wallpaper",
    "start": "1113240",
    "end": "1120120"
  },
  {
    "text": "basic uh that's the live wallpapers and I I believe there's one more Target to add to say that you want to compare uh",
    "start": "1120120",
    "end": "1126919"
  },
  {
    "text": "yeah Ginger is fine or for you uh because we'll see we'll see the details",
    "start": "1126919",
    "end": "1131960"
  },
  {
    "text": "later but when we compile the render script not only do we compile um the script itself into bit code but we also",
    "start": "1131960",
    "end": "1137240"
  },
  {
    "text": "generate Java code uh that you need to use from your application I think I created a a vanilla project that just",
    "start": "1137240",
    "end": "1144559"
  },
  {
    "text": "built like I added just work and I think the the 3.0 compiler knows what to do",
    "start": "1144559",
    "end": "1149760"
  },
  {
    "text": "the source for your compiler available the source for the compiler uh well yes and no the source for the compiler used",
    "start": "1149760",
    "end": "1155679"
  },
  {
    "text": "until Android 3.0 is available uh the compiler used in Android 3.0 will be made available I believe when we open",
    "start": "1155679",
    "end": "1162120"
  },
  {
    "text": "source uh the next version of Android which one is available today uh whatever we were using before Android 3.0 which",
    "start": "1162120",
    "end": "1168280"
  },
  {
    "text": "wasn't lvm I believe we had the custom C compiler so part of the initial step of compilation um when it's creating the",
    "start": "1168280",
    "end": "1175600"
  },
  {
    "text": "bit code for the render script code also creates wrappers on the SDK side so when you put fields and functions in your",
    "start": "1175600",
    "end": "1181559"
  },
  {
    "text": "render script code uh the compiler walks through those and creates wrappers automatically on this SDK side so that",
    "start": "1181559",
    "end": "1188080"
  },
  {
    "text": "you actually have something to call from your Java code uh so uh it will create",
    "start": "1188080",
    "end": "1194440"
  },
  {
    "text": "wrappers we'll see some of this in the sample code but you'll you'll have uh simple set and get functions for fields and you'll also have um rappers for the",
    "start": "1194440",
    "end": "1201159"
  },
  {
    "text": "functions themselves you can call directly into the functions and R and that's the part that's an awesome replacement uh for jni because we",
    "start": "1201159",
    "end": "1208360"
  },
  {
    "text": "actually output for you all the the the Border plate code that you would write for in jni to just invoke a random needy",
    "start": "1208360",
    "end": "1215159"
  },
  {
    "text": "function uh and something interesting to note which um I just learned today uh is",
    "start": "1215159",
    "end": "1221360"
  },
  {
    "text": "you might worry so as we'll see uh the render script code the rendering code actually runs on its own thread which is",
    "start": "1221360",
    "end": "1227120"
  },
  {
    "text": "one of the reasons it can be so efficient just hammering on this stuff as fast as it can well you're on the UI",
    "start": "1227120",
    "end": "1232640"
  },
  {
    "text": "toolkit thread uh on the SDK side and if you want to call one of these functions well what is that do to the render",
    "start": "1232640",
    "end": "1237840"
  },
  {
    "text": "script code which is sort of running in parallel doing its own little thing um you are not actually making direct",
    "start": "1237840",
    "end": "1243280"
  },
  {
    "text": "synchronous calls down into Rend script you're instead putting uh command requests onto a queue that gets serviced",
    "start": "1243280",
    "end": "1248600"
  },
  {
    "text": "at an appropriate time later so you're not going to actually interrupt the stream of control uh on the native side",
    "start": "1248600",
    "end": "1253960"
  },
  {
    "text": "and set some variable that's going to screw things up down there instead you're basically calling into this wrapper code that puts something on a",
    "start": "1253960",
    "end": "1260080"
  },
  {
    "text": "command queue and that could service at the next available time uh okay and then the launch lvm",
    "start": "1260080",
    "end": "1266400"
  },
  {
    "text": "compiles again uh and we have portability Tada uh so the way you use render script uh on in your application",
    "start": "1266400",
    "end": "1274200"
  },
  {
    "text": "so there are really two ways of doing it uh and we're going to talk about the the probably the most common one for now",
    "start": "1274200",
    "end": "1279600"
  },
  {
    "text": "where we actually do rendering um so you just create a regular activity and you have your layout and you can have your",
    "start": "1279600",
    "end": "1284720"
  },
  {
    "start": "1280000",
    "end": "1386000"
  },
  {
    "text": "buttons and all that stuff for instance in the books application uh when we were turning the pages of the books that's render script but the Rand render script",
    "start": "1284720",
    "end": "1291240"
  },
  {
    "text": "they still had a menu that was created using the standard UI to Kit um so to use render script in the UI you just use",
    "start": "1291240",
    "end": "1297320"
  },
  {
    "text": "something called the RS surface view just a subass of surface view that's used to render openg gr usually uh and",
    "start": "1297320",
    "end": "1304039"
  },
  {
    "text": "this one just does a little more work to initialize render script uh and then uh from that R surface view you can get a",
    "start": "1304039",
    "end": "1310559"
  },
  {
    "text": "render script GL object uh and it's very important that that that you that you get a render SCP GL object because that",
    "start": "1310559",
    "end": "1317400"
  },
  {
    "text": "object is able to do render if you don't care about rendering again we'll see about that later uh you can just use a",
    "start": "1317400",
    "end": "1322440"
  },
  {
    "text": "render script object and you don't need a surface view um then you just have to init your script uh and to initialize",
    "start": "1322440",
    "end": "1328159"
  },
  {
    "text": "the script we generate a lot of code for you so you just have to call apis uh that are created at compile time um and",
    "start": "1328159",
    "end": "1333960"
  },
  {
    "text": "then you have to bind initialize the script itself so you have to bind all the data that you want to use from the script because remember you can't do any",
    "start": "1333960",
    "end": "1340159"
  },
  {
    "text": "allocation inside the script except on the stack um so if you want to create I don't know for instance in one of the",
    "start": "1340159",
    "end": "1346120"
  },
  {
    "text": "live wallpapers we have we use 12,000 St Stars rotating in in some sort of a spiral galaxy uh that's where you do",
    "start": "1346120",
    "end": "1353200"
  },
  {
    "text": "that you bind them to the script um and then finally you indicate what is the root script so the root script is the",
    "start": "1353200",
    "end": "1359559"
  },
  {
    "text": "script that render script will invoke automatically on every frame possibly 60 times per second to do the rendering um",
    "start": "1359559",
    "end": "1366760"
  },
  {
    "text": "and it will be clear when we go to the code uh okay so all of that was",
    "start": "1366760",
    "end": "1372000"
  },
  {
    "text": "initialization and then at runtime um so as I said render script is running on",
    "start": "1372000",
    "end": "1377640"
  },
  {
    "text": "its own thread and it's calling this root function over and over again and you tell it the frame rate uh that you",
    "start": "1377640",
    "end": "1382919"
  },
  {
    "text": "want by a return value from that function which we'll see and there's no indication from the SDK that's required",
    "start": "1382919",
    "end": "1389600"
  },
  {
    "start": "1386000",
    "end": "1515000"
  },
  {
    "text": "in fact it's probably better if you don't disturb it if you want the highest performance possible just let it do its own thing uh you probably want to",
    "start": "1389600",
    "end": "1395679"
  },
  {
    "text": "interact with it to some extent like user interacts they press a button this changes the value you want to push that value down all of that stuff is very",
    "start": "1395679",
    "end": "1402480"
  },
  {
    "text": "easy but um you don't necessarily want to interrupt it on every frame like you don't necessarily want to run an animation on the SDK side that is",
    "start": "1402480",
    "end": "1409120"
  },
  {
    "text": "setting values that are then being used at render script time that synchronization between the two of them is going to end up costing you",
    "start": "1409120",
    "end": "1415279"
  },
  {
    "text": "performance it's probably better to just do all of that internal stuff on the render script side uh and rout is called",
    "start": "1415279",
    "end": "1421480"
  },
  {
    "text": "rep repeatedly and you determine the frame rate by a simple return so uh how do we end all real time interaction so",
    "start": "1421480",
    "end": "1428120"
  },
  {
    "text": "like Chad mentioned render script runs into its own thread and there's a message cue to interact between the two",
    "start": "1428120",
    "end": "1433320"
  },
  {
    "text": "threads it's it's actually how the UI toit Works itself there's a there's a UI event queue uh so we just push push",
    "start": "1433320",
    "end": "1439919"
  },
  {
    "text": "messages to the uh to the to that queue and when it's time to render a new frame we process as much of the queue as we",
    "start": "1439919",
    "end": "1445880"
  },
  {
    "text": "can so we'll just see the later stouch so as usual you have to go as fast as you can to not miss anything it's not",
    "start": "1445880",
    "end": "1451679"
  },
  {
    "text": "like you have to avoid it for you know everything it's I mean that would be a perfectly fine interaction one of the",
    "start": "1451679",
    "end": "1457760"
  },
  {
    "text": "render script examples is exactly that it's a list view that runs with render script you would not notice any performance lag it's more like if you're",
    "start": "1457760",
    "end": "1464120"
  },
  {
    "text": "trying to get you know the highest compute uh uh performance possible then you don't want to interact with SDK code",
    "start": "1464120",
    "end": "1470840"
  },
  {
    "text": "at the same time uh yeah so so you're talk so the question is about one of the live wallpapers called grass where from",
    "start": "1470840",
    "end": "1477039"
  },
  {
    "text": "time to time uh we send a huge chunk of data to the script and that contents functions your position on the planet so",
    "start": "1477039",
    "end": "1483399"
  },
  {
    "text": "that we can change the time of the day in the in the wallpaper um it was done this way because when I wrote that live",
    "start": "1483399",
    "end": "1490279"
  },
  {
    "text": "wallpaper uh that was the only way to do it you could just put just a giant blob of bytes uh these days you can write one",
    "start": "1490279",
    "end": "1496840"
  },
  {
    "text": "variable instead uh so much you can also invoke functions at the time we were not able to invoke functions in the Ros",
    "start": "1496840",
    "end": "1502440"
  },
  {
    "text": "script uh that that's why we mentioned earlier that the live papers are are both good examples of Ros script and",
    "start": "1502440",
    "end": "1508440"
  },
  {
    "text": "also bad examples uh one of the good ones is Galaxy for instance or water um yeah so we mentioned that you",
    "start": "1508440",
    "end": "1515320"
  },
  {
    "start": "1515000",
    "end": "1540000"
  },
  {
    "text": "can't do any allocation from the rander script um so all the allocations are done on the dvic side and use three",
    "start": "1515320",
    "end": "1522039"
  },
  {
    "text": "classes to to to to perform the allocation so we have the allocation class uh elements and types um and it's",
    "start": "1522039",
    "end": "1530520"
  },
  {
    "text": "it's it's very important to understand what those those things do even though you in practice you don't really see them very often um so when you when you",
    "start": "1530520",
    "end": "1537360"
  },
  {
    "text": "want to describe um a data structure for instance a bit map you use the three classes so the first one is the element",
    "start": "1537360",
    "end": "1544600"
  },
  {
    "text": "the element um is the most basic unit of data that you have in your structure so",
    "start": "1544600",
    "end": "1549799"
  },
  {
    "text": "for instance in a bit map each unit of data is a pixel and a pixel in a 32bit 32bits bit map is made of four unsigned",
    "start": "1549799",
    "end": "1557760"
  },
  {
    "text": "bytes uh so to create a bit map allocation we would start by creating an element that contains four bytes uh and",
    "start": "1557760",
    "end": "1564039"
  },
  {
    "text": "each bite can have a name so one of the bytes would be the alpha another bite would be red green and blue and so on um",
    "start": "1564039",
    "end": "1570480"
  },
  {
    "text": "a type is just an element and a dimension so for instance if your bit map is 100 pixels wide by 100 pixels",
    "start": "1570480",
    "end": "1577559"
  },
  {
    "text": "High uh the type of the bit map will be your element of four bytes and the number of pixels so it would be 100 time",
    "start": "1577559",
    "end": "1584720"
  },
  {
    "text": "100 and finally the allocation just takes a type and you can see that as the",
    "start": "1584720",
    "end": "1589760"
  },
  {
    "text": "um just a blob of of memory uh that backs the type so the type describes",
    "start": "1589760",
    "end": "1595399"
  },
  {
    "text": "what the what the memory layout is and the allocation is the actual blob of",
    "start": "1595399",
    "end": "1600440"
  },
  {
    "text": "memory um uh yeah so that's about it and like I said um in practice you don't really",
    "start": "1600440",
    "end": "1606840"
  },
  {
    "text": "have to deal with those uh and Chad will talk talk about an example that you wrote um right so we we'll walk through",
    "start": "1606840",
    "end": "1614760"
  },
  {
    "text": "it were you to manually create these things you can see what's involved um in actual fact there's uh there's utility",
    "start": "1614760",
    "end": "1621399"
  },
  {
    "text": "functions that make all this stuff much easier which we'll also see and a lot of this code actually came from some of the",
    "start": "1621399",
    "end": "1628080"
  },
  {
    "text": "code that was automatically generated from some samples that we'll see today so this is what you would actually do if",
    "start": "1628080",
    "end": "1633120"
  },
  {
    "text": "you were doing it on your own but you know what if you declare it in render script and access it from the SDK side it's way easier because it basically",
    "start": "1633120",
    "end": "1639440"
  },
  {
    "text": "writes this stuff for you okay so let's say that you have the following information that's going to track the",
    "start": "1639440",
    "end": "1645279"
  },
  {
    "text": "position and the speed of some object um for this this flake object that we're going to to send spinning around the",
    "start": "1645279",
    "end": "1652120"
  },
  {
    "text": "screen okay so these are the data types you've got a you've got three floating Point values here okay so we're going to",
    "start": "1652120",
    "end": "1658399"
  },
  {
    "text": "say okay I want an element so we're going to use a builder object there's builders for most of these types of",
    "start": "1658399",
    "end": "1663480"
  },
  {
    "text": "classes in render script is it's a common pattern that you will get used to um whether you want to or not um it",
    "start": "1663480",
    "end": "1669720"
  },
  {
    "text": "makes it handy for sort of adding incremental things along the way and then creating it it's like an incremental way of doing a Constructor",
    "start": "1669720",
    "end": "1676159"
  },
  {
    "text": "okay so we create a builder given the render scripts and then we add elements to it so we say Okay I want to add a",
    "start": "1676159",
    "end": "1682559"
  },
  {
    "text": "floating Point element there's lots of um standard elements that are already pre-created for you in the element class",
    "start": "1682559",
    "end": "1688480"
  },
  {
    "text": "you can refer to one of those if it's just going to be a simple type like this okay so I want to add an element that's going to be my position X another one",
    "start": "1688480",
    "end": "1695240"
  },
  {
    "text": "for the position y another one for the scale and then I'm going to create the element by calling the create function at the end okay so that's the first part",
    "start": "1695240",
    "end": "1702760"
  },
  {
    "text": "we created an element second part we can create a type given the element that we created before this e thing we can say",
    "start": "1702760",
    "end": "1709279"
  },
  {
    "start": "1703000",
    "end": "1820000"
  },
  {
    "text": "Okay I want a typee that's going to be created by calling type. Builder we'll construct it like that and we'll set the",
    "start": "1709279",
    "end": "1715840"
  },
  {
    "text": "uh Dimension and I think I forgot to call the create function so there's actually one uh step missing there where",
    "start": "1715840",
    "end": "1721240"
  },
  {
    "text": "you just call create after doing uh the set X notice this is not a set X position um X is actually the dimension",
    "start": "1721240",
    "end": "1728880"
  },
  {
    "text": "that you're setting so we're going to have uh n of these flakes so we simply set that Dimension um and that helps",
    "start": "1728880",
    "end": "1735080"
  },
  {
    "text": "create the type uh and here we use x but in graphics there are different types of Dimensions so for instance when you do 3D Graphics a cube map um is a a cube",
    "start": "1735080",
    "end": "1743399"
  },
  {
    "text": "map is a dimension for texture we have meat map levels it's also a different type of dimensions for texture so the",
    "start": "1743399",
    "end": "1748679"
  },
  {
    "text": "one that's that's the most common is set X um it's just a way to to indicate how",
    "start": "1748679",
    "end": "1754519"
  },
  {
    "text": "many items you have okay so we have the element that describes what the types are we have the type that describes the",
    "start": "1754519",
    "end": "1759960"
  },
  {
    "text": "element as well as how many of them there are and then finally we have the allocation which is the actual memory",
    "start": "1759960",
    "end": "1765640"
  },
  {
    "text": "that's allocated to hold all this stuff which is basically going to be an array of these flakes um you can think of this",
    "start": "1765640",
    "end": "1771679"
  },
  {
    "text": "as basically wrapping a Malo at the native level because it basically wraps a Malo at the native level um so we say",
    "start": "1771679",
    "end": "1778919"
  },
  {
    "text": "allocation. create typed and we pass in the type here along with the render script and that gives us the allocation",
    "start": "1778919",
    "end": "1784640"
  },
  {
    "text": "that we want um there are tons of different uh Constructors that you can call I'm just walking through one",
    "start": "1784640",
    "end": "1790640"
  },
  {
    "text": "particular narrow example here there's a question you're still at the SDK level uh yes that's always SDK y yep yep",
    "start": "1790640",
    "end": "1799000"
  },
  {
    "text": "haven't touched render scope yet uh okay so instead of doing all that manual approach of creating the element and",
    "start": "1799000",
    "end": "1804320"
  },
  {
    "text": "then the type and then the allocation you could also say I want to create a sized allocation uh and I'm going to",
    "start": "1804320",
    "end": "1809720"
  },
  {
    "text": "pass in the element that we created first and then n for this number of flakes that we want and it'll give us um",
    "start": "1809720",
    "end": "1814880"
  },
  {
    "text": "the allocation then if we also want the type then we can ask for the type from that allocation so um shortcuts for",
    "start": "1814880",
    "end": "1820799"
  },
  {
    "start": "1820000",
    "end": "1920000"
  },
  {
    "text": "doing all this stuff uh in general okay here's another way to approach it so instead of creating the stuff manually",
    "start": "1820799",
    "end": "1826840"
  },
  {
    "text": "all at the SDK level we could create a data structure at the render script level so this is actually render script",
    "start": "1826840",
    "end": "1832159"
  },
  {
    "text": "code you'll see it later in the in one of the demos that we walk through so we have two float values for position X",
    "start": "1832159",
    "end": "1837919"
  },
  {
    "text": "position y a float value for Speed and we've declared this as a structure we've declared this flakes field to be a",
    "start": "1837919",
    "end": "1844519"
  },
  {
    "text": "pointer um to things of that type so this is basically an array uh that we",
    "start": "1844519",
    "end": "1849760"
  },
  {
    "text": "call Flakes and then on the SDK side we can say Okay I want uh my field to be",
    "start": "1849760",
    "end": "1855720"
  },
  {
    "text": "equal to script field underscore flake this is generated code for you it",
    "start": "1855720",
    "end": "1861639"
  },
  {
    "text": "generated from this information specifically from that name right there it created something called Script field",
    "start": "1861639",
    "end": "1867919"
  },
  {
    "text": "flake uh that you can then call into as a method pass in your script you pass in the number of flakes that you want to",
    "start": "1867919",
    "end": "1873960"
  },
  {
    "text": "create and you tell it the usage pattern that you're going to have uh and then you bind it and you say okay I've",
    "start": "1873960",
    "end": "1880240"
  },
  {
    "text": "created this is basically my allocation and then I bind it to be equal to that okay so having done this this allocates",
    "start": "1880240",
    "end": "1887360"
  },
  {
    "text": "the memory this passes that down to be useful at the render script level and now in your",
    "start": "1887360",
    "end": "1893360"
  },
  {
    "text": "render script code you can refer to elements inside of this uh just as an array so this is just as if you had done",
    "start": "1893360",
    "end": "1900120"
  },
  {
    "text": "oh flakes equals Malo of something if you were in C code which you're not so you can't do a Malik",
    "start": "1900120",
    "end": "1908120"
  },
  {
    "text": "right uh okay so there is as we said there there's apis at both the SDK and",
    "start": "1908120",
    "end": "1915240"
  },
  {
    "text": "uh the native the Rend script level um so on the SDK side everything is in the android. renderscript package um and",
    "start": "1915240",
    "end": "1922159"
  },
  {
    "start": "1920000",
    "end": "1950000"
  },
  {
    "text": "there's not actually that many classes that you need to get um uh a hold of U",
    "start": "1922159",
    "end": "1927639"
  },
  {
    "text": "and you can walk through these pretty quickly but there's sort of some basic block types that you need to get used to there's allocations like the stuff that",
    "start": "1927639",
    "end": "1934000"
  },
  {
    "text": "we just walked through there's types um that you should get used to uh there's",
    "start": "1934000",
    "end": "1939200"
  },
  {
    "text": "uh programs and we'll go over that in a minute um and then there's some rendering setup stuff for actually",
    "start": "1939200",
    "end": "1944320"
  },
  {
    "text": "initializing stuff uh to start the scripts which is the interest part you want to talk about programs uh",
    "start": "1944320",
    "end": "1951279"
  },
  {
    "start": "1950000",
    "end": "2108000"
  },
  {
    "text": "yeah so programs the names that we use are are direct names that are using in in graphics uh to talk about 3D",
    "start": "1951279",
    "end": "1958080"
  },
  {
    "text": "pipelines uh so some of those names are a little bit different when you used to open gr but they're the same ideas um so",
    "start": "1958080",
    "end": "1964200"
  },
  {
    "text": "we have four different types of programs we have program vertex and program fragments uh that are basically the",
    "start": "1964200",
    "end": "1969840"
  },
  {
    "text": "equivalent of vertex shaders and fragment shaders in openg at least opengl yes2 or on the desktop you know",
    "start": "1969840",
    "end": "1975480"
  },
  {
    "text": "any version of of opengl with shaders uh so the program vertex its job is just to calculate the position of every vertex",
    "start": "1975480",
    "end": "1982000"
  },
  {
    "text": "in the mesh so if you're just drawing a rectangle you have four vertices and the program vertex can at run time modify",
    "start": "1982000",
    "end": "1988200"
  },
  {
    "text": "the shape of the of the rectangle by just moving those vertices one by one and that that is run on the gpus it's",
    "start": "1988200",
    "end": "1994000"
  },
  {
    "text": "very efficient a program fragment it's the same idea except it's at the pixel level so once once you have uh mod",
    "start": "1994000",
    "end": "2001240"
  },
  {
    "text": "positioned the vertices uh the GPU will rasterize the shape into a series of pixels and the program fragment uh job",
    "start": "2001240",
    "end": "2008440"
  },
  {
    "text": "is to just um output a color for each of the pixels um so usually this is where",
    "start": "2008440",
    "end": "2013519"
  },
  {
    "text": "the program fragment is where you do like interesting stuff like a blur that's where you put your texture that's where you do color filtering all the",
    "start": "2013519",
    "end": "2020039"
  },
  {
    "text": "fensive visual effects that you've seen for instance in games uh they're done by the program fragments mostly so uh if",
    "start": "2020039",
    "end": "2025919"
  },
  {
    "text": "you're familiar with vertex and fragment shaders you can think of these things as wrapping that functionality in addition",
    "start": "2025919",
    "end": "2031080"
  },
  {
    "text": "to the other functionality of actually supplying values um and telling it how to how to actually Supply the values",
    "start": "2031080",
    "end": "2037120"
  },
  {
    "text": "that the shaders dependent upon so we'll see some code later where we Supply the Shader that this takes which is straight",
    "start": "2037120",
    "end": "2042519"
  },
  {
    "text": "up glsl in addition to binding to constants that are then going to be supplied to the Shader it's the question",
    "start": "2042519",
    "end": "2048398"
  },
  {
    "text": "is do we generate bit code for the shaders or do we use glsl uh so the answer is neither uh we have a a",
    "start": "2048399",
    "end": "2055040"
  },
  {
    "text": "pre-built shaders for common uh use use cases like if you just want to texture something we we wrote Our Own glsl",
    "start": "2055040",
    "end": "2061839"
  },
  {
    "text": "Shader that you can use directly without having to write it otherwise you can supply your own glsl code uh something",
    "start": "2061839",
    "end": "2067560"
  },
  {
    "text": "with would like to try to do in the future would be to use render script code for shaders so you would use the",
    "start": "2067560",
    "end": "2073960"
  },
  {
    "text": "same language for shaders and programs it wraps the Shader itself as well as a little other functionality but",
    "start": "2073960",
    "end": "2080520"
  },
  {
    "text": "you basically pass in if you're writing a Shader from scratch you pass in a string and that string then gets",
    "start": "2080520",
    "end": "2086440"
  },
  {
    "text": "compiled uh as part of the GPU the GPU basically compiles that the same way it would if you were doing it on you know",
    "start": "2086440",
    "end": "2092839"
  },
  {
    "text": "NK or yes but but right now uh drivers do not understand render script so we",
    "start": "2092839",
    "end": "2098480"
  },
  {
    "text": "use glsl so you generate into glsl we don't generate into a glsl we you write",
    "start": "2098480",
    "end": "2104320"
  },
  {
    "text": "glsl if you want why don't you wait till we see some sample code be a little less confusing uh and two other programs so",
    "start": "2104320",
    "end": "2110800"
  },
  {
    "start": "2108000",
    "end": "2153000"
  },
  {
    "text": "uh the program store is once you've restored the shape and once you've decided like for each pixel what the",
    "start": "2110800",
    "end": "2116119"
  },
  {
    "text": "color will be um you have to store that pixel onto the frame buffer or any render Target um and this is basically",
    "start": "2116119",
    "end": "2122440"
  },
  {
    "text": "called also blending uh so this is where you decide like whether or not you should take into account the alpha value",
    "start": "2122440",
    "end": "2128040"
  },
  {
    "text": "of the pixel uh this is really simple um and you and you can't write custom program Stores um and finally program",
    "start": "2128040",
    "end": "2135480"
  },
  {
    "text": "rest um this is rarely used this is how you do calling uh if you want to to",
    "start": "2135480",
    "end": "2140560"
  },
  {
    "text": "discard um hidden faces in a mesh or if you want to use Point Sprites if you know what point Sprites are uh that's",
    "start": "2140560",
    "end": "2146920"
  },
  {
    "text": "the program master that you're going to use um so the two important ones are program vertex and program",
    "start": "2146920",
    "end": "2154160"
  },
  {
    "start": "2153000",
    "end": "2239000"
  },
  {
    "text": "fragment uh so one of the things that just came up is whether you actually write your own shaders in a lot of cases",
    "start": "2154240",
    "end": "2159680"
  },
  {
    "text": "you don't have to um the sample code that I'm going to walk through later uh well there there's a mix but one of the",
    "start": "2159680",
    "end": "2165720"
  },
  {
    "text": "applications I wrote doesn't use shaders at all it just uses the pre-built ones so if you use the builders um for",
    "start": "2165720",
    "end": "2171240"
  },
  {
    "text": "program vertex fixed function um or program fragment fragment fixed function",
    "start": "2171240",
    "end": "2177200"
  },
  {
    "text": "these actually use uh generated shaders so you don't have to deal with the you know the details of actually writing a",
    "start": "2177200",
    "end": "2183040"
  },
  {
    "text": "Shader a lot of stuff is just going to do something simple like well I've got a matrix and I have some vertices can you",
    "start": "2183040",
    "end": "2188520"
  },
  {
    "text": "transform it for me it turns out yes uh we we know how to do that so we have some shaders that know how to do the",
    "start": "2188520",
    "end": "2193920"
  },
  {
    "text": "simple stuff you can think of the the the fix function programs as an emulation layer for openg G ES1 so if",
    "start": "2193920",
    "end": "2201599"
  },
  {
    "text": "you're used to openg G1 uh where you could just do everything without shaders",
    "start": "2201599",
    "end": "2207200"
  },
  {
    "text": "then you can use that to do the same thing if you're used to open GS2 uh you don't have to use those you can just",
    "start": "2207200",
    "end": "2212280"
  },
  {
    "text": "write your own shaders by hand this is just a convenience uh and in some cases maybe you actually want to write a",
    "start": "2212280",
    "end": "2218520"
  },
  {
    "text": "Shader for one of these levels but not the other so there's another example we'll probably see where there is a vertex Shader because it's doing",
    "start": "2218520",
    "end": "2224760"
  },
  {
    "text": "something in particular with his custom data structure that we have but for the fragment Shader all we want to do is",
    "start": "2224760",
    "end": "2229880"
  },
  {
    "text": "texture map each pixel well we can use the fix function for that side of",
    "start": "2229880",
    "end": "2235359"
  },
  {
    "text": "it okay so then there's the other part of the SDK API so there's the the things that are pre-existing you can poke",
    "start": "2235440",
    "end": "2241400"
  },
  {
    "text": "through the SDK and see all the classes for type and element and allocation and stuff the other part is the part that's",
    "start": "2241400",
    "end": "2246760"
  },
  {
    "text": "dynamically generated through the compilation process and this is the one that takes a look at the fields and the",
    "start": "2246760",
    "end": "2252359"
  },
  {
    "text": "functions that you expose in your render script code and exposes them as wrapper functions on the SDK side so that you",
    "start": "2252359",
    "end": "2257880"
  },
  {
    "text": "can actually call into those functions and actually compile your code uh that would be nice um so we'll we'll see some",
    "start": "2257880",
    "end": "2264560"
  },
  {
    "text": "of these uh for the the render script code that we wrote um and basically it's it's those two type of things you have",
    "start": "2264560",
    "end": "2271119"
  },
  {
    "text": "fields and you have functions and they get exposed as fields that you can set and get and functions that you can call",
    "start": "2271119",
    "end": "2276440"
  },
  {
    "text": "with arbitrary parameters okay so here's some examples of that on the render script code we have a couple",
    "start": "2276440",
    "end": "2283040"
  },
  {
    "start": "2278000",
    "end": "2334000"
  },
  {
    "text": "of simple variables here here's a Boolean uh and here's a simple function um set new numb flakes um and these are",
    "start": "2283040",
    "end": "2290160"
  },
  {
    "text": "taken from directly from my code uh and if you're calling those from the SDK",
    "start": "2290160",
    "end": "2295200"
  },
  {
    "text": "code this one is simply going to call a set function for the initial field so it says okay scripts. set draw FPS this is",
    "start": "2295200",
    "end": "2303079"
  },
  {
    "text": "a wrapper function that was created for you at compile time and then you pass into a Boolean value and it magically",
    "start": "2303079",
    "end": "2308960"
  },
  {
    "text": "sets it on the Boolean underneath this one is going to call this function down there in this case I didn't want to just",
    "start": "2308960",
    "end": "2315079"
  },
  {
    "text": "set the field I actually wanted to perform some functionality at the same time so I created a field to set an",
    "start": "2315079",
    "end": "2320400"
  },
  {
    "text": "internal value and then this um API was automatically generated for me given",
    "start": "2320400",
    "end": "2326680"
  },
  {
    "text": "this method description U so I pass in an integer value uh and it does the",
    "start": "2326680",
    "end": "2332000"
  },
  {
    "text": "right thing and then there's a render script API um and there's various parts of this",
    "start": "2332000",
    "end": "2338480"
  },
  {
    "start": "2334000",
    "end": "2408000"
  },
  {
    "text": "there's too much of it to go over I just wanted to give sort of a sampling of the types of things you can find in that API",
    "start": "2338480",
    "end": "2343680"
  },
  {
    "text": "and then we'll see a bunch of it in the sample code that we're going to crawl through um so there's types that you would be used to and maybe some that you",
    "start": "2343680",
    "end": "2349960"
  },
  {
    "text": "wouldn't so there's floats and there's ins and there's long and then there's shorts and bites and all that good stuff that you're used to from C there's also",
    "start": "2349960",
    "end": "2355839"
  },
  {
    "text": "Vector versions of of these and these are very important especially as you get into Matrix and uh Graphics calculations",
    "start": "2355839",
    "end": "2362640"
  },
  {
    "text": "and compute calculations where maybe you've got these two rgba values that you want want to modulate uh together",
    "start": "2362640",
    "end": "2369480"
  },
  {
    "text": "well you can actually just multiply two float fours together it'll do the vector operation yeah and we'll see a good",
    "start": "2369480",
    "end": "2375000"
  },
  {
    "text": "example of uh how vectors can simplify your code and there's a lot of uh",
    "start": "2375000",
    "end": "2380359"
  },
  {
    "text": "variations of the same kind of method um in the same kind of type because they all take you know different variations",
    "start": "2380359",
    "end": "2386280"
  },
  {
    "text": "of these Vector types um so you can have a multiplication that that operates on two float twos or two float 3es um so",
    "start": "2386280",
    "end": "2392880"
  },
  {
    "text": "there's a lot of repetitiveness in there um but not actually that much functionality it's just a lot of good sort of solid core graphics and compute",
    "start": "2392880",
    "end": "2399960"
  },
  {
    "text": "functionality um also in types uh obviously you want matrices if you're dealing with Graphics so we have 2 x two",
    "start": "2399960",
    "end": "2406040"
  },
  {
    "text": "uh 3x3 and 4x4 matrices um you have some core functionality you've got a bunch of the",
    "start": "2406040",
    "end": "2411520"
  },
  {
    "start": "2408000",
    "end": "2445000"
  },
  {
    "text": "stuff to go along with the Matrix types we might as well be able to multiply the matrices or set a rotation or",
    "start": "2411520",
    "end": "2417880"
  },
  {
    "text": "concatenate a translation all that stuff exists uh clamp functionality um compute",
    "start": "2417880",
    "end": "2423280"
  },
  {
    "text": "functions uh so you've got all the the basic trig stuff that you would expect a bunch of the math stuff um Power",
    "start": "2423280",
    "end": "2429880"
  },
  {
    "text": "operations exponentials um I don't know there's there's a bunch of stuff it was way too much to belabor by uh putting it",
    "start": "2429880",
    "end": "2437480"
  },
  {
    "text": "on slides uh and then on the graphic side I put in some sample um functions uh you've got some very basic text stuff",
    "start": "2437480",
    "end": "2444119"
  },
  {
    "text": "so you can draw a text screen onto the screen uh draw a text string onto the screen um and you can set the the font",
    "start": "2444119",
    "end": "2450720"
  },
  {
    "start": "2445000",
    "end": "2498000"
  },
  {
    "text": "and the font color uh you can draw quad um and you can clear color uh but what",
    "start": "2450720",
    "end": "2457319"
  },
  {
    "text": "you're going to end up doing mostly if you want performant Graphics is actually drawing a mesh so the I think the sample",
    "start": "2457319",
    "end": "2463520"
  },
  {
    "text": "that I use no it actually does do a draw mesh draw quad is there for simple use cases if you're just drawing a square",
    "start": "2463520",
    "end": "2470200"
  },
  {
    "text": "drawing a rectangle uh go ahead and draw call draw quad U but if you actually want high performance Graphics you want",
    "start": "2470200",
    "end": "2475760"
  },
  {
    "text": "to probably issue more vertices than that single quad at one uh time and for",
    "start": "2475760",
    "end": "2481040"
  },
  {
    "text": "that you would create a mesh and then you would call draw mesh and it'll whip through all of those um at the same time",
    "start": "2481040",
    "end": "2486800"
  },
  {
    "text": "this is not a constraint of render script this is just how gpus work the more vertices you stuff in at once the",
    "start": "2486800",
    "end": "2492520"
  },
  {
    "text": "happier they are you want to keep your GPU happy um links to more information uh",
    "start": "2492520",
    "end": "2500920"
  },
  {
    "start": "2498000",
    "end": "2545000"
  },
  {
    "text": "Jason Sams is the guy behind a lot of the render script stuff um and he wrote a part one and part two article on",
    "start": "2500920",
    "end": "2507760"
  },
  {
    "text": "render script I think he's also working on one on memory allocation stuff so that'll probably be out sometime soon um",
    "start": "2507760",
    "end": "2513880"
  },
  {
    "text": "so on the Android developer blog you can uh do a search for his name can find those uh the article that I wrote to",
    "start": "2513880",
    "end": "2519599"
  },
  {
    "text": "sort of give the the higher level view of of how to think about Android rendering is on my blog uh graphics",
    "start": "2519599",
    "end": "2525839"
  },
  {
    "text": "geek. blogs.com and there's the Android SDK samples we're going to see some of those um very soon uh but you should",
    "start": "2525839",
    "end": "2533319"
  },
  {
    "text": "just use the adk um and uh open up the samples directly you can build and run",
    "start": "2533319",
    "end": "2539119"
  },
  {
    "text": "them um on a 3.0 device or 3.1 device now for the code yes there's a",
    "start": "2539119",
    "end": "2546440"
  },
  {
    "start": "2545000",
    "end": "2775000"
  },
  {
    "text": "question uh the samples come with API level 11 so Android",
    "start": "2546440",
    "end": "2552640"
  },
  {
    "text": "3.0 all right now do you want to run the demo first so that they know what yeah",
    "start": "2554559",
    "end": "2560960"
  },
  {
    "text": "so this is a beautiful demo that that Chet wrote and I'm actually really proud of him because usually he shows uh balls",
    "start": "2560960",
    "end": "2567359"
  },
  {
    "text": "on the screen and he did something different this time it's awesome after like five or six",
    "start": "2567359",
    "end": "2573280"
  },
  {
    "text": "years all right so I wrote this is actually an STK application somebody asked for a simple benchmarking",
    "start": "2573280",
    "end": "2579880"
  },
  {
    "text": "application um they just wanted an animation running on the screen while they did some background processing and",
    "start": "2579880",
    "end": "2585160"
  },
  {
    "text": "so they wanted something that would show obvious uh performance uh hiccups as they happened so I wrote this with SDK",
    "start": "2585160",
    "end": "2591960"
  },
  {
    "text": "code we can walk through this if you really want to see SDK code but I'm basically drawing bit Maps I'm setting a translation and a a rotation on these",
    "start": "2591960",
    "end": "2598880"
  },
  {
    "text": "things and then just calling canvas. drawbitmap and you can add a bunch of these um little Droid flakes on the",
    "start": "2598880",
    "end": "2605040"
  },
  {
    "text": "screen um and then you can see okay so this is hardware accelerate this is with",
    "start": "2605040",
    "end": "2610400"
  },
  {
    "text": "the stuff that we did in 3.0 to speed up Graphics you could turn that on off uh just for laps and then there's a frame",
    "start": "2610400",
    "end": "2616520"
  },
  {
    "text": "counter over here so we're getting 14 frames a second versus",
    "start": "2616520",
    "end": "2622839"
  },
  {
    "text": "4052 we could pop this up take it out of hardware",
    "start": "2622839",
    "end": "2628640"
  },
  {
    "text": "and suffer um okay anyway that was the SDK application I want to do something",
    "start": "2628640",
    "end": "2634680"
  },
  {
    "text": "simple uh similar with render script to see what it would take um so I ran it",
    "start": "2634680",
    "end": "2640839"
  },
  {
    "text": "again uh so then I have this one roughly the same the frame counter Works a",
    "start": "2640839",
    "end": "2646839"
  },
  {
    "text": "little bit differently um I'm just using render scripts internal frame counter here to see what frame rate we're",
    "start": "2646839",
    "end": "2652640"
  },
  {
    "text": "getting there um you're actually going to see very similar performance characteristics I must have changed the",
    "start": "2652640",
    "end": "2660559"
  },
  {
    "text": "code I did one of my last edits I was cleaning up the code right before we came up here I must have changed the",
    "start": "2660559",
    "end": "2666319"
  },
  {
    "text": "blending mode or something uh that's unfortunate um anyway so all of these have an opaque black background",
    "start": "2666319",
    "end": "2672680"
  },
  {
    "text": "they they used to be transparent just about an hour ago um this actually gives a very similar",
    "start": "2672680",
    "end": "2679559"
  },
  {
    "text": "frame rate to the hardware accelerated canvas version because essentially we're",
    "start": "2679559",
    "end": "2685079"
  },
  {
    "text": "fill rate limited we end up just bottlenecking at the GPU uh on the SDK",
    "start": "2685079",
    "end": "2690640"
  },
  {
    "text": "side we're pre-scaling into bit maps and then we're uploading the bit Maps into textures and letting the GPU rock on it",
    "start": "2690640",
    "end": "2696880"
  },
  {
    "text": "uh here we're basically doing the same thing we're rendering meshes which are T texture mapped quads and you know we can shove down",
    "start": "2696880",
    "end": "2705280"
  },
  {
    "text": "roughly the same number uh down there so it's nice that we uh got that performance um from the SDK there are",
    "start": "2705280",
    "end": "2711440"
  },
  {
    "text": "other things uh Roman's going to show an example later where the performance benefits of render script are a little",
    "start": "2711440",
    "end": "2717079"
  },
  {
    "text": "more obvious in some cases um and then in addition you could have 3D functionality which I didn't happen to",
    "start": "2717079",
    "end": "2722680"
  },
  {
    "text": "explore on this one render script it renders on the GPU yeah so rendering is on the GPU uh for",
    "start": "2722680",
    "end": "2729920"
  },
  {
    "text": "computations uh it's on the CPU but we plan on adding support for the GPU uh so potentially this could run entirely on",
    "start": "2729920",
    "end": "2737319"
  },
  {
    "text": "the GPU including the logic of the application yeah actually if if I had a",
    "start": "2737319",
    "end": "2742440"
  },
  {
    "text": "non-gpu version of the render script uh version of the application it would be even faster because it wouldn't run at",
    "start": "2742440",
    "end": "2749079"
  },
  {
    "text": "all so infinitely fast if you don't do anything yeah well that that's what's",
    "start": "2749079",
    "end": "2754800"
  },
  {
    "text": "nice about tros script and again we'll see an example after one uh um about um compute U if you write your code with",
    "start": "2754800",
    "end": "2762200"
  },
  {
    "text": "render script as you get more cores uh because manufacturers had more cores in the devices your stuff will get faster",
    "start": "2762200",
    "end": "2768079"
  },
  {
    "text": "and you don't have anything to do which is always nice I want one core per",
    "start": "2768079",
    "end": "2773160"
  },
  {
    "text": "Droid and I will be happy so let's walk through some renderscript code version",
    "start": "2773160",
    "end": "2778920"
  },
  {
    "start": "2775000",
    "end": "2977000"
  },
  {
    "text": "of the API this is the package name this is important because we need to reflect it into the correct package so that you",
    "start": "2778920",
    "end": "2784880"
  },
  {
    "text": "call appropriately from your SD K code um this is a header file of render",
    "start": "2784880",
    "end": "2790599"
  },
  {
    "text": "script itself so you can actually get a uh handle on the uh the functions that you're going to call in render script",
    "start": "2790599",
    "end": "2796960"
  },
  {
    "text": "this is the data structure that um I saw an abbreviated version I put in an abbreviated version in uh one of the",
    "start": "2796960",
    "end": "2803920"
  },
  {
    "text": "slides um so this is going to hold information about a particular Droid flake so I'd like to know the position",
    "start": "2803920",
    "end": "2810520"
  },
  {
    "text": "notice it's a float to so this is going to have ax and ay uh field inside of it I've got speed I've got scale I've got",
    "start": "2810520",
    "end": "2817200"
  },
  {
    "text": "rotation Y and rotation speed um so this not only holds where it is and how it's rotated and how large it is but it also",
    "start": "2817200",
    "end": "2824359"
  },
  {
    "text": "holds the speed of it because for every frame and say okay how much time has elapsed and how far should I move this",
    "start": "2824359",
    "end": "2830440"
  },
  {
    "text": "thing uh given its current speed and how much should I rotate it given its current rotation",
    "start": "2830440",
    "end": "2837119"
  },
  {
    "text": "speed okay uh we have a mesh object which I'm going to allocate memory for",
    "start": "2838640",
    "end": "2844079"
  },
  {
    "text": "and populate at the SDK side we'll see that later um we have two programs that I'm going",
    "start": "2844079",
    "end": "2849240"
  },
  {
    "text": "to use there's the vertex program vertex and the program fragment uh again I'm going to allocate uh while I'm going to",
    "start": "2849240",
    "end": "2855280"
  },
  {
    "text": "initialize those at the SDK side and then set them on that uh side and then we bind them in the inner loop as we're",
    "start": "2855280",
    "end": "2861520"
  },
  {
    "text": "actually walking through uh the root function we have some simple um fields that I use throughout here so I've got",
    "start": "2861520",
    "end": "2867800"
  },
  {
    "text": "the start time which I use for tracking uh frames per second I've got preve time",
    "start": "2867800",
    "end": "2873000"
  },
  {
    "text": "which I use for calculating the interframe delay so that I know how far to move and and how much to rotate these",
    "start": "2873000",
    "end": "2879079"
  },
  {
    "text": "uh Droid flakes I'd like to know the number of flakes that I have on the screen at any one time we can actually",
    "start": "2879079",
    "end": "2884359"
  },
  {
    "text": "check if we have an array which we uh which we allocated through one of these allocations that we'll see we can check",
    "start": "2884359",
    "end": "2890520"
  },
  {
    "text": "the dimension and then just walk that array by using the dimension um dynamically however the way that I use",
    "start": "2890520",
    "end": "2896800"
  },
  {
    "text": "that array is I actually allocate potentially more than I um more Droid flakes than I are actually uh present on",
    "start": "2896800",
    "end": "2902960"
  },
  {
    "text": "the screen at any given time so this is a temporary variable that I use uh to know how far to iterate uh the screen",
    "start": "2902960",
    "end": "2908960"
  },
  {
    "text": "width and Screen height I use occasionally so I pass them down and in the init function uh this is an integer",
    "start": "2908960",
    "end": "2914359"
  },
  {
    "text": "values for the size of the bit map I use that uh in conjunction with the scaling size to know how large to draw this",
    "start": "2914359",
    "end": "2920839"
  },
  {
    "text": "thing um there's an option to uh to trace the frames per second that we're",
    "start": "2920839",
    "end": "2926640"
  },
  {
    "text": "getting at any given time so this is a Boolean variable that holds uh whether we're actually tracing that out and this",
    "start": "2926640",
    "end": "2932799"
  },
  {
    "text": "is the frames um counter which is used again to track the frames per second we're getting uh so let's go down I mean",
    "start": "2932799",
    "end": "2940200"
  },
  {
    "text": "a lot of this code should look like really approachable right it's C okay well this function calls that function",
    "start": "2940200",
    "end": "2946200"
  },
  {
    "text": "there well it needs a forward reference to it up there before it can refer to it um pretty straightforward okay the init",
    "start": "2946200",
    "end": "2951400"
  },
  {
    "text": "script is called from SDK we'll see that later I want to pass in the size the",
    "start": "2951400",
    "end": "2957119"
  },
  {
    "text": "width and the height of the screen I also want to pass in how many Droid flakes were actually starting with um so",
    "start": "2957119",
    "end": "2962440"
  },
  {
    "text": "that I can initialize things correctly so I set these internal variables here I call this other helper function down",
    "start": "2962440",
    "end": "2967960"
  },
  {
    "text": "here with the initial number of droid Flakes and I set the preve time which is what uh the interframe delay is going to",
    "start": "2967960",
    "end": "2973799"
  },
  {
    "text": "use as it calculates movement along the way okay this function is called at",
    "start": "2973799",
    "end": "2979280"
  },
  {
    "start": "2977000",
    "end": "3205000"
  },
  {
    "text": "startup time it's also called when I hit the more or the less button to uh add or",
    "start": "2979280",
    "end": "2984559"
  },
  {
    "text": "subtract flakes on the screen it's going to at the SDK side say okay well this is the new number of flakes you're going to",
    "start": "2984559",
    "end": "2990240"
  },
  {
    "text": "have uh it'll pass that number down here um and then we basically initialize all",
    "start": "2990240",
    "end": "2995760"
  },
  {
    "text": "the flakes that were either um uh all the flakes that we're adding to the array or if we're subtracting if we're",
    "start": "2995760",
    "end": "3001400"
  },
  {
    "text": "displaying less now than we used to then we don't need to initialize anything we just need to um set the marker earlier",
    "start": "3001400",
    "end": "3007040"
  },
  {
    "text": "in the array uh so as we initialize we say okay well if I'm actually adding flakes then let's walk through all the",
    "start": "3007040",
    "end": "3013839"
  },
  {
    "text": "new flakes that we're adding in for each one of those um so I'll just get a simple reference to the current flake so",
    "start": "3013839",
    "end": "3019119"
  },
  {
    "text": "you can see I'm walking this through it's just like a normal array the only weird thing about the array was that I allocated it somewhere else right it it",
    "start": "3019119",
    "end": "3026280"
  },
  {
    "text": "Mig ated to my code it didn't actually start there um but otherwise the way to way I refer to it is just the same as I",
    "start": "3026280",
    "end": "3032319"
  },
  {
    "text": "would in any other C code um so once I've got a pointer to that then I can say okay set the position so this is a",
    "start": "3032319",
    "end": "3038359"
  },
  {
    "text": "float 2 object so I say okay refer to thex value of that and randomize that based on the screen width so I'm going",
    "start": "3038359",
    "end": "3044559"
  },
  {
    "text": "to position this flake somewhere between zero and the width of the screen same thing for y I'm going to position it",
    "start": "3044559",
    "end": "3050240"
  },
  {
    "text": "zero between zero and the height of the screen the speed I'm just going to set to this random value it's going to be at",
    "start": "3050240",
    "end": "3055760"
  },
  {
    "text": "least 50 uh to 200 um and what that does this is",
    "start": "3055760",
    "end": "3062839"
  },
  {
    "text": "you know a value that I calculated um like all great engineering values just by you know setting some values and",
    "start": "3062839",
    "end": "3067960"
  },
  {
    "text": "seeing what worked um but basically this is how far it's going to move per second and then in the in loop I calculate the",
    "start": "3067960",
    "end": "3073720"
  },
  {
    "text": "elapse fractions and multiply at time the speed uh scale is going to be um somewhere between uh 0.1 and7 of the",
    "start": "3073720",
    "end": "3081799"
  },
  {
    "text": "initial size of the bit map so I had this initial size of the Droid Flakes and they look a little bit better if",
    "start": "3081799",
    "end": "3087000"
  },
  {
    "text": "they're um somewhat smaller than that so we have a randomized scale factor we set the rotation value to be some random uh",
    "start": "3087000",
    "end": "3094040"
  },
  {
    "text": "angle between 0 and 360 and then we set a rotation speed uh between 45 and positive 45 hopefully all this code is",
    "start": "3094040",
    "end": "3101200"
  },
  {
    "text": "very straightforward and I shouldn't have spent all that time explaining every line uh this is if I'm calculating uh",
    "start": "3101200",
    "end": "3108559"
  },
  {
    "text": "frames per second then I will call this function along the way and say okay well it is currently this is one of the core",
    "start": "3108559",
    "end": "3114839"
  },
  {
    "text": "render script functions if you want to get the current time which is kind of important in animations then you",
    "start": "3114839",
    "end": "3120000"
  },
  {
    "text": "actually if you look at the the name of the function so here we're calling RS up time Millis RS stands for render script",
    "start": "3120000",
    "end": "3125920"
  },
  {
    "text": "if if you use one of the graphics function you will see it's called RSG draw text for instance so we use",
    "start": "3125920",
    "end": "3131160"
  },
  {
    "text": "different prefixes depending on what kind of function you are using uh so RS up time mes that'll",
    "start": "3131160",
    "end": "3137359"
  },
  {
    "text": "return a Mill Point a millisecond value when you compare that to the previous time uh so we're going to create a Delta",
    "start": "3137359",
    "end": "3143400"
  },
  {
    "text": "time here um and then if we we've elapsed a second since the last time",
    "start": "3143400",
    "end": "3148599"
  },
  {
    "text": "this is kind of a technique that I use when I'm doing uh benchmarking or frames per second because if you go every",
    "start": "3148599",
    "end": "3153799"
  },
  {
    "text": "single frame the numbers going to flash so much on the screen you're not going to know what's going on um so every second I go ahead and say okay now how",
    "start": "3153799",
    "end": "3161160"
  },
  {
    "text": "much have I how many frames have elapse since the last second so we'll go ahead and calculate the elapse seconds we",
    "start": "3161160",
    "end": "3166640"
  },
  {
    "text": "calculate the frames per second um and then we just trace it out to the command line uh in the SDK version I actually",
    "start": "3166640",
    "end": "3173240"
  },
  {
    "text": "output it on the screen that's a little more tedious in render script there's not string manipulation functions so you",
    "start": "3173240",
    "end": "3178960"
  },
  {
    "text": "can output a character string but actually creating that string takes a little bit more effort it's probably easier to do with the SDK side and push",
    "start": "3178960",
    "end": "3185319"
  },
  {
    "text": "it down I decided you know what tracing to the command line shell is awesome uh and then I reset the frame so that I can",
    "start": "3185319",
    "end": "3191359"
  },
  {
    "text": "calculate it again later go log goes to the go log cat yeah exactly um so how's",
    "start": "3191359",
    "end": "3197799"
  },
  {
    "text": "the speed am I talking like too fast or too slow okay",
    "start": "3197799",
    "end": "3203520"
  },
  {
    "text": "good all right so this or do you want him to shut up that works too I didn't propose that as an option",
    "start": "3203520",
    "end": "3211200"
  },
  {
    "start": "3205000",
    "end": "3385000"
  },
  {
    "text": "sorry uh okay so this is the inner loop this is the function that's going to get called as soon as you bind to it um as",
    "start": "3211200",
    "end": "3216960"
  },
  {
    "text": "the root script from the SDK level render script will just start calling and it'll call it until you you uh tell",
    "start": "3216960",
    "end": "3222599"
  },
  {
    "text": "it to quit name root is the built-in name yeah um",
    "start": "3222599",
    "end": "3228880"
  },
  {
    "text": "yeah it's called root um rendos script is still evolving the idea is that you will eventually be able to build some",
    "start": "3228880",
    "end": "3234240"
  },
  {
    "text": "sort of a scene graph of scripts so the root function is the root of your Sy",
    "start": "3234240",
    "end": "3239400"
  },
  {
    "text": "graph so that's the main entry point and then you'll be able to invoke other scripts uh in fact there's another",
    "start": "3239400",
    "end": "3244960"
  },
  {
    "text": "built-in function init which would automatically be called init with no args um and that would be called before",
    "start": "3244960",
    "end": "3251359"
  },
  {
    "text": "your script actually started at initialization time of this particular application I wanted to pass in",
    "start": "3251359",
    "end": "3256520"
  },
  {
    "text": "parameter so I didn't bother to implement that one I implemented my own and called it directly from the SDK",
    "start": "3256520",
    "end": "3262200"
  },
  {
    "text": "side okay so every time so this is going to get called once per frame so this is everything we need to do to display one",
    "start": "3262200",
    "end": "3268079"
  },
  {
    "text": "frame of the animation we're going to clear to a background of opaque black so that's the alpha value RGB of black uh",
    "start": "3268079",
    "end": "3276240"
  },
  {
    "text": "we're going to bind the program and the uh the program vertex and the program fragment this is saying okay for",
    "start": "3276240",
    "end": "3282839"
  },
  {
    "text": "everything that gets rendered here these are the programs these are the shaders that you're going to use so in this",
    "start": "3282839",
    "end": "3288440"
  },
  {
    "text": "particular example we use only one program vertex in one program fragment but if you go look at the live wallpapers they draw a background",
    "start": "3288440",
    "end": "3295160"
  },
  {
    "text": "texture then they draw pH instance uh the stars and then they draw something else every time they use different",
    "start": "3295160",
    "end": "3300920"
  },
  {
    "text": "program fragments or program vertices depending on what they're doing right so in that case they would probably uh do",
    "start": "3300920",
    "end": "3307079"
  },
  {
    "text": "binds of the appropriate shaders rendering operations and then bind and then rendering operations because these",
    "start": "3307079",
    "end": "3312440"
  },
  {
    "text": "programs are going to apply to whatever rendering operations are just about to be called uh okay so this is some timing",
    "start": "3312440",
    "end": "3319160"
  },
  {
    "text": "information because in the loop here I'm going to walk through the array of of droid Flakes and calculate where",
    "start": "3319160",
    "end": "3325000"
  },
  {
    "text": "everything needs to be moved and rot rotated to so we'll we'll say okay what time is it now get the Delta time",
    "start": "3325000",
    "end": "3330799"
  },
  {
    "text": "calculate the seconds uh and then we actually start our",
    "start": "3330799",
    "end": "3335599"
  },
  {
    "text": "Loop so we're going to do a simple iteration up to the number of current flakes that we have we'll get a",
    "start": "3336440",
    "end": "3341920"
  },
  {
    "text": "reference to the current flake in the array we're going to calculate the new position so we're going to take its",
    "start": "3341920",
    "end": "3347039"
  },
  {
    "text": "current position and add in uh the speed time the number of seconds so this is the speed per second this is the number",
    "start": "3347039",
    "end": "3353240"
  },
  {
    "text": "of seconds we added to the current position voila in moves yeah so Flore T is a structure that we declared at the",
    "start": "3353240",
    "end": "3360400"
  },
  {
    "text": "beginning right so there's a forward declaration here and then there's the Declaration of the structure at the end",
    "start": "3360400",
    "end": "3365720"
  },
  {
    "text": "so Fleck T and then the array is of type fake T very much like C and if you're",
    "start": "3365720",
    "end": "3371720"
  },
  {
    "text": "not used to C well it's a good reason to learn C it's actually really nice C I",
    "start": "3371720",
    "end": "3377160"
  },
  {
    "text": "mean not C++ uh let's see I was down to the loop",
    "start": "3377160",
    "end": "3382640"
  },
  {
    "text": "okay so we calculate our y position rotation is very similar",
    "start": "3382640",
    "end": "3387880"
  },
  {
    "start": "3385000",
    "end": "3600000"
  },
  {
    "text": "um calculate rotation y as adding in the current rotation to the rotation speed",
    "start": "3387880",
    "end": "3394200"
  },
  {
    "text": "times the elapse seconds so now I can actually take that information of where this thing is and what angle it's going",
    "start": "3394200",
    "end": "3400079"
  },
  {
    "text": "to be rotated to and I can create a matrix and pass that in before I actually render my quad so I declare a",
    "start": "3400079",
    "end": "3406319"
  },
  {
    "text": "local variable here we got a trans Matrix we're going to load in um we're going to load in the identity we're",
    "start": "3406319",
    "end": "3412640"
  },
  {
    "text": "going to actually that is debugging code that I should remove so ignore that one",
    "start": "3412640",
    "end": "3418640"
  },
  {
    "text": "because I'm going to immediately load in a translation uh so we load in a translation based on its current X",
    "start": "3418640",
    "end": "3424520"
  },
  {
    "text": "position um I'm doing an offset of the width and height uh so that I actually",
    "start": "3424520",
    "end": "3429680"
  },
  {
    "text": "rotate around the center of the snowflake because rotating around the corner looks goofy uh so we basically",
    "start": "3429680",
    "end": "3435880"
  },
  {
    "text": "back it off a little bit um and then do our scale and our rotate so we're going to scale and rotate around the center uh",
    "start": "3435880",
    "end": "3441720"
  },
  {
    "text": "and then we're going to translate um for and then we're going to translate given the the width and the height of the",
    "start": "3441720",
    "end": "3446960"
  },
  {
    "text": "Droid again these are just it's like if you've ever done any graphics rotation stuff you always have to factor in well",
    "start": "3446960",
    "end": "3452319"
  },
  {
    "text": "what's the Pivot Point around which you're rotating and you always get it wrong every single time yes and you just do you just bang on the code enough",
    "start": "3452319",
    "end": "3458880"
  },
  {
    "text": "where you're like oh yeah that's right yeah yeah the first time I did the open G stuff I was at Sun working with chat and I asked those guys because they know",
    "start": "3458880",
    "end": "3465200"
  },
  {
    "text": "how to do open G I'm like how do you guys figure it out every time they're like oh no we don't like we just tweak the numbers and that's the awesome thing",
    "start": "3465200",
    "end": "3471480"
  },
  {
    "text": "about Graphics is you see it on the screen it's wrong okay I don't know what data database people do to get their",
    "start": "3471480",
    "end": "3476920"
  },
  {
    "text": "programs right uh okay and then we actually upload this so this is a render script call RSG program vertex load mode",
    "start": "3476920",
    "end": "3484480"
  },
  {
    "text": "model Matrix um uh the trans Matrix that we just created so that'll basically",
    "start": "3484480",
    "end": "3489599"
  },
  {
    "text": "push it up to be used for future rendering operations which are here is the only rendering operation here besides the clear color so we say draw",
    "start": "3489599",
    "end": "3496599"
  },
  {
    "text": "mesh of flake quad and we'll see what flake quad is um in the SDK code later",
    "start": "3496599",
    "end": "3502280"
  },
  {
    "text": "basically created and populated that on the STK side and it's just going to draw the same same thing every single time so",
    "start": "3502280",
    "end": "3508119"
  },
  {
    "text": "the reason that we get flakes in different positions is well we draw the same quad but before we draw it we tell",
    "start": "3508119",
    "end": "3513520"
  },
  {
    "text": "the Matrix where to put it and how to rotate it uh and how to scale it so then we get them all positioned independently",
    "start": "3513520",
    "end": "3519920"
  },
  {
    "text": "so even though it's actually the same rectangle drawn over and over again each time it's drawn with a different Matrix",
    "start": "3519920",
    "end": "3525160"
  },
  {
    "text": "which gives us the effect that we want it's worth pointing out that this would be more efficient if I actually used uh",
    "start": "3525160",
    "end": "3532240"
  },
  {
    "text": "a more complicated mesh and a more complicated data structure and vertex Shader to actually be able to render",
    "start": "3532240",
    "end": "3539319"
  },
  {
    "text": "many flakes in one simple rendering operation as it is I'm doing one quad at a time not terribly efficient but for",
    "start": "3539319",
    "end": "3545480"
  },
  {
    "text": "demo purposes certainly did the triade yeah a good example of that if you go look at the source code of the Galaxy wallpaper so we use 12,000 stars and",
    "start": "3545480",
    "end": "3552520"
  },
  {
    "text": "each star is a position that's independent of the other stars uh but it's done with one drawing coal it's",
    "start": "3552520",
    "end": "3557680"
  },
  {
    "text": "just one giant mesh that we draw in one co uh all right and then if I'm drawing",
    "start": "3557680",
    "end": "3563839"
  },
  {
    "text": "the stats you know based on that local on the um the Boolean up above then I call that function and I return one this",
    "start": "3563839",
    "end": "3570920"
  },
  {
    "text": "is my favorite part of all of render script you return a number and that number basically says how long it should",
    "start": "3570920",
    "end": "3577960"
  },
  {
    "text": "take before calling me again this determines your frame rate in render script okay so by returning one you're",
    "start": "3577960",
    "end": "3584039"
  },
  {
    "text": "I'm basically saying okay I'd like to be called every millisecond however it's going to be capped at the effective",
    "start": "3584039",
    "end": "3590480"
  },
  {
    "text": "frame rate so we get 60 frames a second because render script knows that there's no reason to call me any more often than",
    "start": "3590480",
    "end": "3597240"
  },
  {
    "text": "the current refresh rate of the screen so it's going to try to call me a one but it's really going to back off and",
    "start": "3597240",
    "end": "3603200"
  },
  {
    "text": "say you know what we're not ready to sync the screen yet anyway so we'll just wait so if this were actually acting as",
    "start": "3603200",
    "end": "3609119"
  },
  {
    "text": "a return one then I would be getting a th frames per second but you can see the stats on the screen say that I'm getting",
    "start": "3609119",
    "end": "3614440"
  },
  {
    "text": "more like 60 frames a second uh there's another magic value if you return zero uh that means that you don't want to run",
    "start": "3614440",
    "end": "3620680"
  },
  {
    "text": "again uh for instance if you for some reason if you want to render on screen they don't use the GPU anymore you return zero and then from the the the",
    "start": "3620680",
    "end": "3627559"
  },
  {
    "text": "dvic side you can tell render script to start again okay so that was render script and then we'll see um there's",
    "start": "3627559",
    "end": "3634359"
  },
  {
    "text": "three files that I had on the SDK side there's flaky which is the main application where not much interesting",
    "start": "3634359",
    "end": "3641319"
  },
  {
    "text": "happens um we have an oncreate I think you probably know what that is set the content view I have a simple layout",
    "start": "3641319",
    "end": "3647280"
  },
  {
    "text": "that's got a linear layout that basically has an area for the buttons in the check boox and then um and then",
    "start": "3647280",
    "end": "3654000"
  },
  {
    "text": "we're going to stuff the view in a linear layout below that um so we do let me try to get this on the screen",
    "start": "3654000",
    "end": "3661119"
  },
  {
    "text": "it might work better all right so we're going to create one of these flaky view objects which we'll see in a minute um",
    "start": "3661119",
    "end": "3666760"
  },
  {
    "text": "that's the second of three files that has this functionality we're going to get a reference to The Container where",
    "start": "3666760",
    "end": "3672160"
  },
  {
    "text": "we're going to put this thing we're going to add our view into that so we've just stuffed the render script view in",
    "start": "3672160",
    "end": "3677520"
  },
  {
    "text": "below uh the controls that are going to go in the application um we're going to then uh add some actions here so when",
    "start": "3677520",
    "end": "3684359"
  },
  {
    "text": "they click on the show FP s checkbox we're going to toggle whether or not we're spewing stuff into the log there's",
    "start": "3684359",
    "end": "3691000"
  },
  {
    "text": "more and there's less buttons and those are going to set up um listeners and",
    "start": "3691000",
    "end": "3696280"
  },
  {
    "text": "call a function on The View class which is going to end up uh eventually calling into render script uh we've",
    "start": "3696280",
    "end": "3703440"
  },
  {
    "text": "got uh flaky view flaky view another simple class um",
    "start": "3703440",
    "end": "3711240"
  },
  {
    "text": "that basically creates this render script GL object that we wanted uh and the render object and that's where all",
    "start": "3711240",
    "end": "3717440"
  },
  {
    "text": "the actual logic of initialization setup goes um create it surface changed oh there's",
    "start": "3717440",
    "end": "3725000"
  },
  {
    "text": "a print line because everybody needs that in their shipping application uh this is where we actually create this",
    "start": "3725000",
    "end": "3731319"
  },
  {
    "text": "thing we get a Surface config and then we create the render script GL object um we set the surface on it uh then we",
    "start": "3731319",
    "end": "3737920"
  },
  {
    "text": "create the the flaky RS object this is the thing that's actually going to talk to the scripts it's going to create and",
    "start": "3737920",
    "end": "3744200"
  },
  {
    "text": "communicate with the scripts uh and then we initialize it with important information like how large are we so",
    "start": "3744200",
    "end": "3749599"
  },
  {
    "text": "this is this is the class that sort of has the information about um the window the surface that uh we're going to need",
    "start": "3749599",
    "end": "3755720"
  },
  {
    "text": "and then the other one is all specifically about render scripts once you initialize it it's not going to run yet right it's just sort of set set up",
    "start": "3755720",
    "end": "3763079"
  },
  {
    "text": "uh this is still setup stuff uh you'll see the point at which it'll actually start executing that's in the other",
    "start": "3763079",
    "end": "3768599"
  },
  {
    "text": "file um the show FPS these are the listeners that are going to be called by the buttons these are basically just",
    "start": "3768599",
    "end": "3774200"
  },
  {
    "text": "wrappers around function fun functionality that's in the final class which is here okay so flaky",
    "start": "3774200",
    "end": "3782680"
  },
  {
    "text": "RS couple internal pointers that we're going to need especially this one uh the misss field um we have uh this is um a",
    "start": "3782680",
    "end": "3793079"
  },
  {
    "text": "field that was generated for us during the compilation process this is basically a reference to our array we're",
    "start": "3793079",
    "end": "3798119"
  },
  {
    "text": "going to create an allocation uh and then bind it to this which is basically going to push that allocation down to",
    "start": "3798119",
    "end": "3804279"
  },
  {
    "text": "the render script level where we start actually um manipulating the Droid flakes uh program vertex and the program",
    "start": "3804279",
    "end": "3811319"
  },
  {
    "text": "vertex uh program vertex and the program fragment are the the vertex and fragment",
    "start": "3811319",
    "end": "3817000"
  },
  {
    "text": "Shader information that we're going to render with uh numb flakes we're going to start out with 16 and then we're going to increment that and decrement",
    "start": "3817000",
    "end": "3822799"
  },
  {
    "text": "that along the along the way um this is a reference to the actual",
    "start": "3822799",
    "end": "3828000"
  },
  {
    "text": "script we're going to need that for calling into uh renderscript functionality okay this init function",
    "start": "3828000",
    "end": "3833440"
  },
  {
    "text": "gets called by The View class that we saw earlier we'll set a couple of internal frames uh Fields here uh we're",
    "start": "3833440",
    "end": "3840160"
  },
  {
    "text": "going to create the scripts um and say okay I want to create the new script here again this is generated anything",
    "start": "3840160",
    "end": "3845920"
  },
  {
    "text": "with these ugly underscores here that's generated code that you're calling into um so we're going to create this with",
    "start": "3845920",
    "end": "3851839"
  },
  {
    "text": "references to the resources and uh the renderscript object um and the actual",
    "start": "3851839",
    "end": "3858319"
  },
  {
    "text": "render script file that we created um so fy. RS was the name of the renderscript",
    "start": "3858319",
    "end": "3863720"
  },
  {
    "text": "uh file that we saw earlier okay M flakes as I said is a reference to the array of objects this is actually",
    "start": "3863720",
    "end": "3870480"
  },
  {
    "text": "the allocation that we're created uh creating so this does the allocation for us it says okay given the script object",
    "start": "3870480",
    "end": "3877720"
  },
  {
    "text": "um given this generated uh API and given the number of flakes um I want to create",
    "start": "3877720",
    "end": "3883640"
  },
  {
    "text": "give me an allocation um with the following usage pattern and then bind the flake so we're",
    "start": "3883640",
    "end": "3889680"
  },
  {
    "text": "creating an allocation and we're passing it down to render script this is what makes it available at the render script",
    "start": "3889680",
    "end": "3895160"
  },
  {
    "text": "level in this variable um for it to then refer to as it walks through its Loop",
    "start": "3895160",
    "end": "3901079"
  },
  {
    "text": "okay we're gonna load a bit map normal way you load a bit map we're going to decode the resource I'd like to know the",
    "start": "3901079",
    "end": "3906520"
  },
  {
    "text": "width and the height because I want to push those down to the native level um and I do that by calling these generated",
    "start": "3906520",
    "end": "3912599"
  },
  {
    "text": "functions here set Droid W and Droid H uh with the width and height of bit map",
    "start": "3912599",
    "end": "3918799"
  },
  {
    "text": "that happen automatically because you have set and get in your uh it's the fields that get wrapped by Setters and",
    "start": "3918799",
    "end": "3924960"
  },
  {
    "text": "Getters okay yep yeah there's I mean there's two things that get wrapped there's Fields get wrapped as Setters",
    "start": "3924960",
    "end": "3930240"
  },
  {
    "text": "and Getters and there's functions that get wrapped by other functions okay um there are different",
    "start": "3930240",
    "end": "3937119"
  },
  {
    "text": "ways that I could have drawn this as I said it probably would have been more optimal to create a more complex mesh uh",
    "start": "3937119",
    "end": "3942599"
  },
  {
    "text": "and we could have also populated this at the render script level but wanted to",
    "start": "3942599",
    "end": "3947640"
  },
  {
    "text": "show this instead I use a simple triangle mesh Builder which is basically going to create the quad um so",
    "start": "3947640",
    "end": "3954160"
  },
  {
    "text": "everything in in GL if you done any graphics program you know everything's a triangle unless it's a point or a line",
    "start": "3954160",
    "end": "3959799"
  },
  {
    "text": "right there is no quad there's only two triangles that happen to sit next to each other um so you can create uh and",
    "start": "3959799",
    "end": "3966359"
  },
  {
    "text": "and there's there's different kinds of quads there's different kinds of uh triangles you can have individual triangles you can have triangle strip",
    "start": "3966359",
    "end": "3972599"
  },
  {
    "text": "which is basically um triangles that share uh edges and you can have a triangle fan another arrangement of",
    "start": "3972599",
    "end": "3979119"
  },
  {
    "text": "triangles that share edges um so we're going to create uh our triangle mesh",
    "start": "3979119",
    "end": "3985119"
  },
  {
    "text": "we're going to basically walk through and set texture and vertex information for every one of these points so there's",
    "start": "3985119",
    "end": "3991319"
  },
  {
    "text": "going to be six uh total points because they're going to be two individual triangles is",
    "start": "3991319",
    "end": "3996359"
  },
  {
    "text": "it five something like that uh oh no there's four points right so we're",
    "start": "3996359",
    "end": "4002039"
  },
  {
    "text": "setting up four vertices um and then we're going to set up the edges the individual triangles are going to refer",
    "start": "4002039",
    "end": "4007640"
  },
  {
    "text": "to those vertices um that we set up right so we're going to set the texture information this is basically saying",
    "start": "4007640",
    "end": "4014000"
  },
  {
    "text": "okay I want the upper left of the bit map to refer to the upper left of the Quad I want the right hand point of the",
    "start": "4014000",
    "end": "4021039"
  },
  {
    "text": "bit map to refer to the right hand point of the quad and so on we set up the way the triangles are arranged based on",
    "start": "4021039",
    "end": "4027039"
  },
  {
    "text": "these vertices um then we say Okay I want to create a mesh from this mesh Builder that I just built up and then",
    "start": "4027039",
    "end": "4034160"
  },
  {
    "text": "we're going to push it down so again it's just like we we did with the allocation with the flakes above we sort",
    "start": "4034160",
    "end": "4039359"
  },
  {
    "text": "of set up the data structure here and then we push it down by saying okay now set the mesh there this is the guy that",
    "start": "4039359",
    "end": "4045599"
  },
  {
    "text": "actually got issued in the call to RSG draw mesh right so the only thing he did",
    "start": "4045599",
    "end": "4051319"
  },
  {
    "text": "with it at renderscript level was to actually draw the thing everything else happened at the SDK level we set up the program vertex um",
    "start": "4051319",
    "end": "4059200"
  },
  {
    "text": "I'm just using fixed functions here I'm not doing anything complicated I'm basically transforming these things and",
    "start": "4059200",
    "end": "4065000"
  },
  {
    "text": "projecting them onto the screen and even the projection is very easy because I just want an orthographic projection to",
    "start": "4065000",
    "end": "4070319"
  },
  {
    "text": "be the size of the window so there's utility functions for all of this stuff in render script and I was happy to use",
    "start": "4070319",
    "end": "4075839"
  },
  {
    "text": "them uh move over a little bit so you can actually see the code okay so we",
    "start": "4075839",
    "end": "4082760"
  },
  {
    "text": "call the fixed function Builder to create a builder for us um and we're going to go ahead and just create this",
    "start": "4082760",
    "end": "4088400"
  },
  {
    "text": "thing there's nothing complicated going on here we uh are going to create a projection Matrix and set this um see if",
    "start": "4088400",
    "end": "4097159"
  },
  {
    "text": "I can walk through here we want this to be we basically",
    "start": "4097159",
    "end": "4102238"
  },
  {
    "text": "want to populate the constants internally in the program vertexes going to create a Shader right it's got these",
    "start": "4102239",
    "end": "4108120"
  },
  {
    "text": "these pre-built shaders there and it's going to expect information about the variables that are provided to it um for",
    "start": "4108120",
    "end": "4113920"
  },
  {
    "text": "instance it would love to know what Matrix you want to use when you project this onto the screen because that's going to go into the calculations um",
    "start": "4113920",
    "end": "4120278"
  },
  {
    "text": "that figure out where to put the vertex in space right so we're basically saying okay I want to populate the constants",
    "start": "4120279",
    "end": "4125838"
  },
  {
    "text": "with the following projection Matrix um which is going to be an orthographic you know just straight on 2D projection if",
    "start": "4125839",
    "end": "4131880"
  },
  {
    "text": "you're doing 3D programming you would do something much more interesting and there's other uh Builder functions in there to do that and then we're setting",
    "start": "4131880",
    "end": "4138440"
  },
  {
    "text": "the program vertex in the render script code like that okay hopefully this is getting a",
    "start": "4138440",
    "end": "4144159"
  },
  {
    "text": "little boring now you're like yeah yeah yeah okay generated code set underscore blah blah blah good okay we're gonna",
    "start": "4144159",
    "end": "4149920"
  },
  {
    "text": "bind uh sorry no this is the fragment code something very similar except for a fragment Shader again I was happy to use",
    "start": "4149920",
    "end": "4155838"
  },
  {
    "text": "the fixed function one because I'm not doing anything complicated all I want to do is have a texture map Quad at the",
    "start": "4155839",
    "end": "4161400"
  },
  {
    "text": "native level I'm using decal mode because that basically takes this nice ly um uh transparent back uh texture and",
    "start": "4161400",
    "end": "4168838"
  },
  {
    "text": "applies it as a decal on the quad and usually I get a a transparent background uh quad as a result I'm not exactly sure",
    "start": "4168839",
    "end": "4176238"
  },
  {
    "text": "what happened um uh let's see give it the formats we",
    "start": "4176239",
    "end": "4182400"
  },
  {
    "text": "go ahead and create the program fragments um we bind the texture so we associate that bit map that we created",
    "start": "4182400",
    "end": "4188480"
  },
  {
    "text": "earlier with the texture that this um that the Shader inside the the program fragment is going to use um bind a",
    "start": "4188480",
    "end": "4195400"
  },
  {
    "text": "sampler the sampler is basically the the blending uh no it's it's how do we how do we how do you Fage data from the",
    "start": "4195400",
    "end": "4201679"
  },
  {
    "text": "texture um so if you want um when you resay a picture you can apply nice",
    "start": "4201679",
    "end": "4208199"
  },
  {
    "text": "filtering uh to make it look better when you zoom in and out which is what chat is doing here so we can use one of the the built-in one uh linear filtering is",
    "start": "4208199",
    "end": "4215440"
  },
  {
    "text": "the one that you want it looks good uh so it's going to do bilinear filtering cross the bit map it's only also going",
    "start": "4215440",
    "end": "4220840"
  },
  {
    "text": "to create myip Maps along the way it looks a lot better the initial version of this didn't use I I think it just",
    "start": "4220840",
    "end": "4227679"
  },
  {
    "text": "used the default sampler and it was all kinds of flickery artifacts because scaling on the fly without doing any",
    "start": "4227679",
    "end": "4233360"
  },
  {
    "text": "filtering doesn't look very good um and then we set the program uh fragment uh",
    "start": "4233360",
    "end": "4238719"
  },
  {
    "text": "buying the program store just using I wanted to do uh uh just one of the canonical ones there I didn't need to",
    "start": "4238719",
    "end": "4244679"
  },
  {
    "text": "create anything um custom and this is where the initialization and starting of the script happens so first we invoke",
    "start": "4244679",
    "end": "4252120"
  },
  {
    "text": "this method with the width and the height and the numb flakes that does the that initialization step that we saw in",
    "start": "4252120",
    "end": "4257360"
  },
  {
    "text": "the render script code and then finally we bind the root script so this is a render script call saying I want this",
    "start": "4257360",
    "end": "4262960"
  },
  {
    "text": "guy to be the root of uh my application that runs and after we bind that it starts at that thread and and Life",
    "start": "4262960",
    "end": "4270440"
  },
  {
    "text": "Starts okay so we're going to write a very simple application that just turns a color picture into a grayscale picture",
    "start": "4270440",
    "end": "4277960"
  },
  {
    "text": "so it's it's the same thing that's in the SDK but I'll walk you through it as I'm writing it",
    "start": "4277960",
    "end": "4283280"
  },
  {
    "text": "um and hopefully I can still write it so we're going to create a new and",
    "start": "4283280",
    "end": "4289120"
  },
  {
    "text": "Android project so there's nothing specific about Ros script so you just Target Android 3.0 or more uh for those",
    "start": "4289120",
    "end": "4295239"
  },
  {
    "text": "of you who can't see in the back I just selected the the the target platform",
    "start": "4295239",
    "end": "4301120"
  },
  {
    "text": "um yeah let's change the mics that's a good idea I should have thought about that he",
    "start": "4301120",
    "end": "4307760"
  },
  {
    "text": "smart uh let's see just creating the",
    "start": "4308960",
    "end": "4313440"
  },
  {
    "text": "project am I supposed to type on here",
    "start": "4314239",
    "end": "4321600"
  },
  {
    "text": "now okay can you hear me yes okay perfect um so we're just going to create the Android project so I'm going to",
    "start": "4330040",
    "end": "4336400"
  },
  {
    "text": "specify a package name come. example. android. SF dosf that will be",
    "start": "4336400",
    "end": "4344239"
  },
  {
    "text": "good uh and that's all so again nothing specific about um a render script",
    "start": "4344239",
    "end": "4349280"
  },
  {
    "text": "project I'm just going to add a new draw ball in my project because I want to",
    "start": "4349280",
    "end": "4354440"
  },
  {
    "text": "turn the picture into into a gr scale image so I'm just going to add a drawable Das nopi",
    "start": "4354440",
    "end": "4361400"
  },
  {
    "text": "resource uh folder uh that's usually why you want to put images that won't be resized based on the density of the",
    "start": "4361400",
    "end": "4367600"
  },
  {
    "text": "device uh and I have a folder right here we just",
    "start": "4367600",
    "end": "4373600"
  },
  {
    "text": "put and that's it and now you we can start writing the code um so we're going to start with a very simple activity um",
    "start": "4373600",
    "end": "4381639"
  },
  {
    "text": "and because we're not going to do any graphics uh I don't need to create an R surface view I'm just going to use an image view to display the bit map the",
    "start": "4381639",
    "end": "4387760"
  },
  {
    "text": "resulting bit map um so we just create a simple image",
    "start": "4387760",
    "end": "4393320"
  },
  {
    "text": "view uh and can you see the code I'm typing or do you want me to zoom in in the",
    "start": "4396199",
    "end": "4401560"
  },
  {
    "text": "back well I'll zoom in anyway because you you're not responding",
    "start": "4401560",
    "end": "4407120"
  },
  {
    "text": "uh just setting up the type of scaling we want on the",
    "start": "4407360",
    "end": "4412520"
  },
  {
    "text": "image we will just Center the image on screen center crop and I set this image as the content",
    "start": "4412679",
    "end": "4419760"
  },
  {
    "text": "view of my activity okay now we're going to write the actual function so draw gray scale we're going to pass the image",
    "start": "4419760",
    "end": "4426280"
  },
  {
    "text": "and the photo I want to turn into gray scale create the function here we go so",
    "start": "4426280",
    "end": "4434360"
  },
  {
    "text": "now we can start doing the the fun part um the first step we're going to load",
    "start": "4434360",
    "end": "4440600"
  },
  {
    "text": "our bit map so we can actually process it uh I'm going to use a bitmap factory",
    "start": "4440600",
    "end": "4445679"
  },
  {
    "text": "we're going to decode that resource and that's the",
    "start": "4445679",
    "end": "4452360"
  },
  {
    "text": "photo so what's nice is that renderscript knows about bit Maps as you will see so we have a bit map I want to",
    "start": "4452360",
    "end": "4458600"
  },
  {
    "text": "call it B stupid Eclipse B here we go ah",
    "start": "4458600",
    "end": "4464679"
  },
  {
    "text": "okay now we want to create our render script so I haven't created the script itself yet but I'm just going to set up some of the environment so we need to",
    "start": "4464679",
    "end": "4471400"
  },
  {
    "text": "create a render script context and you can see here I can create a render script uh a normal render script context",
    "start": "4471400",
    "end": "4476880"
  },
  {
    "text": "or I could create a render script GL I don't care about rendering so I'm just going to create a render script context",
    "start": "4476880",
    "end": "4482520"
  },
  {
    "text": "um. create and that R scrip context is important because you pass it to pretty",
    "start": "4482520",
    "end": "4488120"
  },
  {
    "text": "much every uh method in the randos script API um now what we want to do is",
    "start": "4488120",
    "end": "4493840"
  },
  {
    "text": "we have a source bit map and uh basically we want to uh copy the content into an output bit map and in the middle",
    "start": "4493840",
    "end": "4501080"
  },
  {
    "text": "we want to do the filtering so I'm going to need a second bit map uh and I want that second bit map to have exactly the",
    "start": "4501080",
    "end": "4507440"
  },
  {
    "text": "same characteristic as the first bit map so I'm just going to create a bit map with the width and the height of the",
    "start": "4507440",
    "end": "4515400"
  },
  {
    "text": "original bit map uh so those are all like standard Android",
    "start": "4515400",
    "end": "4521360"
  },
  {
    "text": "apis uh it's called create bit map there we go uh and renderscript can work",
    "start": "4521360",
    "end": "4527960"
  },
  {
    "text": "only with allocations so we need to create allocations from those bit maps and we have helper methods to do that um",
    "start": "4527960",
    "end": "4535360"
  },
  {
    "text": "let me rename that to in here we go so I'm going to create an allocation from the input bit map and we have a create",
    "start": "4535360",
    "end": "4541760"
  },
  {
    "text": "from bitmap method so I pass my render scop context and the the original bit",
    "start": "4541760",
    "end": "4548080"
  },
  {
    "text": "map and that will be my in allocation and we also need an",
    "start": "4548080",
    "end": "4554440"
  },
  {
    "text": "allocation for the output bit map so we're going to read from the input allocation and just output into the output allocation",
    "start": "4554440",
    "end": "4562960"
  },
  {
    "text": "um and to rewrite my code",
    "start": "4563080",
    "end": "4568199"
  },
  {
    "text": "sorry um so and the the output allocation will have the same characteristics as the input allocation",
    "start": "4568480",
    "end": "4573840"
  },
  {
    "text": "so we want the same size and the same type so once again there's a helper method for that so we can create an allocation from uh create typed so I",
    "start": "4573840",
    "end": "4583360"
  },
  {
    "text": "pass the r the rcope cont context and I get the type from my original allocation",
    "start": "4583360",
    "end": "4588760"
  },
  {
    "text": "so now I have two allocation that are exactly the same um except the first one oops except",
    "start": "4588760",
    "end": "4596239"
  },
  {
    "text": "the first one already has content the content is what's in the bit map the second one is empty because I have I",
    "start": "4596239",
    "end": "4602639"
  },
  {
    "text": "have not copied anything in it um and then the next step will be to create the actual script itself bind the",
    "start": "4602639",
    "end": "4608679"
  },
  {
    "text": "allocations and render script so now we need to to write the render script so I'm just going to create a new render",
    "start": "4608679",
    "end": "4614600"
  },
  {
    "text": "script file uh let's see uh gray.",
    "start": "4614600",
    "end": "4621440"
  },
  {
    "text": "RS we need to specify need to specify the version number of the language that we're",
    "start": "4621440",
    "end": "4628320"
  },
  {
    "text": "using we need to specify pragma the Java",
    "start": "4628320",
    "end": "4633440"
  },
  {
    "text": "package name for the generated source code so come. example. android.",
    "start": "4633440",
    "end": "4639719"
  },
  {
    "text": "SF um and I will have a filter function",
    "start": "4639719",
    "end": "4644920"
  },
  {
    "text": "that we call later that will do all the work um and I need to have the data that we created on the Java side so we're",
    "start": "4644920",
    "end": "4652159"
  },
  {
    "text": "going to use the an RS allocation that contains the input bit map an RS allocation that contains the output bit",
    "start": "4652159",
    "end": "4657400"
  },
  {
    "text": "map uh note here that I'm not creating a custom type so in the in chat example we create a new flake type so we create a",
    "start": "4657400",
    "end": "4664120"
  },
  {
    "text": "struct here I don't really care because it's easy to understand what's in the bit map location it's just a bunch of pixels so I could create a new structure",
    "start": "4664120",
    "end": "4671400"
  },
  {
    "text": "with the red blue and and green Channel but here I I won't even bother uh and we'll also need a script",
    "start": "4671400",
    "end": "4679320"
  },
  {
    "text": "um now on the Java side all we have to do is bind all that stuff so I can",
    "start": "4679320",
    "end": "4685800"
  },
  {
    "text": "create uh my new script I pass the render script context the resources and",
    "start": "4685800",
    "end": "4691760"
  },
  {
    "text": "the script source code so as you can see I'm I'm creating a new instance sorry for the the fults",
    "start": "4691760",
    "end": "4698400"
  },
  {
    "text": "in the back I'm creating a new instance of the class called Script ccore gray uh it was automatically created as soon as",
    "start": "4698400",
    "end": "4705080"
  },
  {
    "text": "I started typing in that RS file I just created uh yes",
    "start": "4705080",
    "end": "4711520"
  },
  {
    "text": "uh let me add a bunch of empty lines there you go sorry about that um we're",
    "start": "4711520",
    "end": "4719719"
  },
  {
    "text": "going to keep a reference to the script stupid Eclipse stop what is it",
    "start": "4719719",
    "end": "4728800"
  },
  {
    "text": "doing there we go like I said I'm not I'm not an eclipse user okay okay so now from that script",
    "start": "4728880",
    "end": "4735960"
  },
  {
    "text": "we want to bind all our data uh so I'm going to set the in allocation to my",
    "start": "4735960",
    "end": "4741080"
  },
  {
    "text": "input allocation I'm going to set my output allocation to my output allocation it's",
    "start": "4741080",
    "end": "4747800"
  },
  {
    "text": "really hard um and I'm going to set the script variable to the script itself and",
    "start": "4747800",
    "end": "4754120"
  },
  {
    "text": "you'll understand why um then what we want to do is invoke the filter function that will do all the",
    "start": "4754120",
    "end": "4760600"
  },
  {
    "text": "work and and after the filter function is invoked uh we will have all the the processed data inside the output",
    "start": "4760600",
    "end": "4767120"
  },
  {
    "text": "allocation so then we want to take the output allocation and copy it",
    "start": "4767120",
    "end": "4772520"
  },
  {
    "text": "content um into our output bit map that object scrip gray did compil",
    "start": "4772520",
    "end": "4782080"
  },
  {
    "text": "when you Sav that sitting somewhere yeah so script C gray was generated as soon as I created that new file in the",
    "start": "4782080",
    "end": "4788000"
  },
  {
    "text": "project somewhere we can actually look at it uh yes yes we we can take a look afterwards if you want um and then",
    "start": "4788000",
    "end": "4793679"
  },
  {
    "text": "finally I want to dis play my uh image on on on screen so on the Java side pretty simple we create a couple bit",
    "start": "4793679",
    "end": "4799400"
  },
  {
    "text": "Maps we create allocations for rer script uh we set up the script we invoke the the filter function and then we copy",
    "start": "4799400",
    "end": "4805840"
  },
  {
    "text": "the result into an actual bit map and then if we go back to Rand script itself um so I I I",
    "start": "4805840",
    "end": "4814520"
  },
  {
    "text": "created a script object here and that's because I want to run my processing on",
    "start": "4814520",
    "end": "4820199"
  },
  {
    "text": "multiple cores so I want to automatically split the load uh so for each pixel can be processed individually",
    "start": "4820199",
    "end": "4827040"
  },
  {
    "text": "on on a different core uh and to do that we're going to use the RS for each function and the RS for each function",
    "start": "4827040",
    "end": "4832880"
  },
  {
    "text": "takes a script as an input um and I just need my little cheat sheet",
    "start": "4832880",
    "end": "4839120"
  },
  {
    "text": "here uh so RS I'm trying not to use it but the order of the parameters is sometimes hard to remember uh so we pass",
    "start": "4839120",
    "end": "4845920"
  },
  {
    "text": "the script uh we pass the the data the input data the output data and that's an",
    "start": "4845920",
    "end": "4851880"
  },
  {
    "text": "offet inside the input data um so when I write that line we're going to invoke uh",
    "start": "4851880",
    "end": "4859880"
  },
  {
    "text": "a script so the script that we're going to invoke here is actually descript here we're going to invoke the root function",
    "start": "4859880",
    "end": "4865280"
  },
  {
    "text": "uh for every element of the input allocation we're going to try to run it on an available core so here on the for",
    "start": "4865280",
    "end": "4871920"
  },
  {
    "text": "is per core forage is yeah per core well actually it's forage it's per element",
    "start": "4871920",
    "end": "4878920"
  },
  {
    "text": "inside the allocation um render script will automatically Spread spread the processing on on two cores so here we",
    "start": "4878920",
    "end": "4886600"
  },
  {
    "text": "have a bit map and we're going to put one pixel on core number one one pixel on core number two when one of them is",
    "start": "4886600",
    "end": "4892199"
  },
  {
    "text": "done we send another pixel to that core and so on so we're going to just split the work on on the two cores zero uh",
    "start": "4892199",
    "end": "4898199"
  },
  {
    "text": "zero is the offset inside uh the input allocation so that you don't have to process everything",
    "start": "4898199",
    "end": "4903840"
  },
  {
    "text": "um I'm creating my root function so a small difference is that when you create your root function you can have no",
    "start": "4903840",
    "end": "4909719"
  },
  {
    "text": "parameters this is usually what you do but when you use 4 uh you can actually",
    "start": "4909719",
    "end": "4914960"
  },
  {
    "text": "get parameters um so my locations I know is made of every element is four bytes",
    "start": "4914960",
    "end": "4921560"
  },
  {
    "text": "Alpha red green blue so I'm going to get a pointer to a uar 4 so a vector of",
    "start": "4921560",
    "end": "4928040"
  },
  {
    "text": "bytes um and that's my input data we're going to Output it",
    "start": "4928040",
    "end": "4935000"
  },
  {
    "text": "inside um a usar for so that's the output allocation that has the same",
    "start": "4935000",
    "end": "4940760"
  },
  {
    "text": "structure and then you you get other variables that you have to use um so you get X and",
    "start": "4940760",
    "end": "4947440"
  },
  {
    "text": "Y so as the forage goes through the allocation it will automatically increment the X and Y so if you need the",
    "start": "4947440",
    "end": "4953400"
  },
  {
    "text": "positions within the allocation you can get you can get those here um and there's an extra one I",
    "start": "4953400",
    "end": "4960000"
  },
  {
    "text": "think uh I need the const void so I",
    "start": "4960000",
    "end": "4965719"
  },
  {
    "text": "don't remember what that one does but I've never used it so let's forget about it um and now if we want to convert a",
    "start": "4965719",
    "end": "4973360"
  },
  {
    "text": "pixel into uh to to gray all we have to do is take the red green and blue",
    "start": "4973360",
    "end": "4978600"
  },
  {
    "text": "components we just have to multiply them by some magic values uh and then we we take the resulting value and we apply it",
    "start": "4978600",
    "end": "4984800"
  },
  {
    "text": "as as the red green and blue component so usually the way you would do that in Java for instance you have an NT that's",
    "start": "4984800",
    "end": "4990040"
  },
  {
    "text": "your pixel you first have to split the in into the four different bites you take the bites you do the fancy",
    "start": "4990040",
    "end": "4995280"
  },
  {
    "text": "multiplications and then you recreate the pixel here because we work with vectors we can do something uh even",
    "start": "4995280",
    "end": "5000880"
  },
  {
    "text": "better um so I'm going to create a speci Vector float",
    "start": "5000880",
    "end": "5007760"
  },
  {
    "text": "3 and I'll explain what it does um so it's a vector of three floating",
    "start": "5007760",
    "end": "5014560"
  },
  {
    "text": "Point values and those are the values you want to use to multiply your your pixel colors with uh so if I have a",
    "start": "5014560",
    "end": "5020719"
  },
  {
    "text": "pixel that comes from the original image I'm going to M multiply the right component by 0.3 the green component by",
    "start": "5020719",
    "end": "5026760"
  },
  {
    "text": "0.6 and the blue component by 0.1 and the sum of of those values will become",
    "start": "5026760",
    "end": "5032320"
  },
  {
    "text": "the gr scale value turns out that what I just described is the dot product operation on vectors um so the the",
    "start": "5032320",
    "end": "5039679"
  },
  {
    "text": "entire implementation is the following we get our pixel from uh the alloc the",
    "start": "5039679",
    "end": "5045280"
  },
  {
    "text": "input allocation and pack color",
    "start": "5045280",
    "end": "5050320"
  },
  {
    "text": "888 V in uh so what this does is we get a",
    "start": "5050320",
    "end": "5058360"
  },
  {
    "text": "bunch of bytes uh and instead we want to get a vector of floating values of floating Point values uh because it's",
    "start": "5058360",
    "end": "5064520"
  },
  {
    "text": "better usually when you do Graphics operations to work on floating points to avoid losing precisions um then we want",
    "start": "5064520",
    "end": "5070199"
  },
  {
    "text": "to create the gra Piel so float 3 um result is simply the dot product of",
    "start": "5070199",
    "end": "5079040"
  },
  {
    "text": "of the RGB values of the input pixel and our fancy Vector that we just described",
    "start": "5079040",
    "end": "5085840"
  },
  {
    "text": "um so here again in Java instead of that one line of code you would have to do a lot of uh bit shifting and or and",
    "start": "5085840",
    "end": "5092639"
  },
  {
    "text": "floting point operations and conversions and here it's all done for you in one line actually you have that code in your",
    "start": "5092639",
    "end": "5097880"
  },
  {
    "text": "old project right I I wrote the same algorithm in Java and I'll show you the difference uh and then when you're done",
    "start": "5097880",
    "end": "5103280"
  },
  {
    "text": "you just have to repack the value uh pack color to",
    "start": "5103280",
    "end": "5110000"
  },
  {
    "text": "8 there you go uh we pack the value back from floats to to bytes what did I do V",
    "start": "5110000",
    "end": "5117280"
  },
  {
    "text": "out yes the output allocation is not constant",
    "start": "5117280",
    "end": "5122560"
  },
  {
    "text": "okay and so that that should work so let's try to run the",
    "start": "5122560",
    "end": "5129440"
  },
  {
    "text": "code um gra scale run as Android",
    "start": "5129440",
    "end": "5136480"
  },
  {
    "text": "application Tada there we go it's in black and",
    "start": "5137800",
    "end": "5143440"
  },
  {
    "text": "white uh yes the original image let me show you the original image also happens to be black and white but that's beside",
    "start": "5143440",
    "end": "5149600"
  },
  {
    "text": "the point that is the original image",
    "start": "5149600",
    "end": "5156239"
  },
  {
    "text": "I don't know if I missed something but magic values those it's standard uh",
    "start": "5157679",
    "end": "5163119"
  },
  {
    "text": "standard technique for desaturation for out there there is not a single way to",
    "start": "5163119",
    "end": "5169520"
  },
  {
    "text": "turn color into black and white and photographers usually are are really obnoxious because they each have their",
    "start": "5169520",
    "end": "5175440"
  },
  {
    "text": "own way of doing it depending on the image but this is um this is just a standard way of doing it gives you",
    "start": "5175440",
    "end": "5181520"
  },
  {
    "text": "something that kind of looks good uh but it's not great if if you do a a web",
    "start": "5181520",
    "end": "5186840"
  },
  {
    "text": "search on desaturation or grayscale you will come up with values that look an awful lot like that they're easy to",
    "start": "5186840",
    "end": "5193239"
  },
  {
    "text": "remember because the sum is one um uh yes so let me show you now the the",
    "start": "5193239",
    "end": "5199920"
  },
  {
    "text": "original um uh version that I wrote using the Java language so X and Y on",
    "start": "5199920",
    "end": "5207960"
  },
  {
    "text": "that what would they be in so in this case X will be the the the index of the",
    "start": "5207960",
    "end": "5213440"
  },
  {
    "text": "pixel inside the giant array uh and Y will be zero I mean what if what you're passing in isn't I mean it seems weird",
    "start": "5213440",
    "end": "5222480"
  },
  {
    "text": "you're foring over something that may have nothing to do with X and Y guess uh again but X and Y they're not don't see",
    "start": "5222480",
    "end": "5228920"
  },
  {
    "text": "them as like screen coordinates they're just indices within a multi multi-dimensional array it turns out",
    "start": "5228920",
    "end": "5234840"
  },
  {
    "text": "that the allocation I pass here is just one dimension so the Y doesn't matter but you could describe your your rray so",
    "start": "5234840",
    "end": "5241199"
  },
  {
    "text": "that you get also y um it's little bit awkward and actually um if I were to",
    "start": "5241199",
    "end": "5248000"
  },
  {
    "text": "write that using ice cream sandwich uh the code would become",
    "start": "5248000",
    "end": "5255360"
  },
  {
    "text": "this because uh and also here we go uh so in ice cream",
    "start": "5256239",
    "end": "5262440"
  },
  {
    "text": "sandwich we also generate an RS for each Java method that you can invoke and does",
    "start": "5262440",
    "end": "5267600"
  },
  {
    "text": "all that crap for you so it will get even easier um yes so the the original",
    "start": "5267600",
    "end": "5273719"
  },
  {
    "text": "Java language code that I have here there we go so that is the Java function",
    "start": "5273719",
    "end": "5279080"
  },
  {
    "text": "that was doing the same thing we just did here um so you know we go through the array",
    "start": "5279080",
    "end": "5286800"
  },
  {
    "text": "we get each pixel we have to get the individual channels uh some bit magic we",
    "start": "5286800",
    "end": "5292000"
  },
  {
    "text": "convert them to float some divisions and then we have to to create a pixel again out of it uh you could do it on one line",
    "start": "5292000",
    "end": "5298880"
  },
  {
    "text": "of code and it would be really really ugly yes really hard to read and uh and and also that version does not run on",
    "start": "5298880",
    "end": "5306040"
  },
  {
    "text": "multiple cores so that version if you have to to to make it multi-threaded you know it's even more code that you have",
    "start": "5306040",
    "end": "5311600"
  },
  {
    "text": "to write um the render script version because we use vectors it can automatically use the neon instruction",
    "start": "5311600",
    "end": "5317719"
  },
  {
    "text": "set on R CPUs to process four four pixels at a time uh it has a lot of advantages and actually you can see",
    "start": "5317719",
    "end": "5324520"
  },
  {
    "text": "around the code I have a little bit of of profiling code um so the Java version",
    "start": "5324520",
    "end": "5330360"
  },
  {
    "text": "of the of this uh this filter runs in about 400 millisecond the randos script version runs runs in",
    "start": "5330360",
    "end": "5337360"
  },
  {
    "text": "0.02 milliseconds so it's like you know a th times faster um and it's less code",
    "start": "5337360",
    "end": "5345360"
  },
  {
    "text": "to write and it's easier to understand um so it's pretty nice and also next you",
    "start": "5345360",
    "end": "5350440"
  },
  {
    "text": "know next year when we get a tablet with I don't know 4 8 24 cores whatever it will go even faster without changing the",
    "start": "5350440",
    "end": "5356840"
  },
  {
    "text": "code uh no the the way it works is the allocation um knows has a type the type",
    "start": "5356840",
    "end": "5364119"
  },
  {
    "text": "tells you how many elements you have and so it will send one element at a time to",
    "start": "5364119",
    "end": "5369360"
  },
  {
    "text": "a different core and here you use like a generic yeah it just happens that you know they map to B to pixels but you",
    "start": "5369360",
    "end": "5376440"
  },
  {
    "text": "could do that with a sound Sound Processing like on a sound frame or simple whatever audio guys do um it",
    "start": "5376440",
    "end": "5384040"
  },
  {
    "text": "really depends on the elements you've described in the case of the of the the snowflakes that Chad showed you know each yeah each un each data processing",
    "start": "5384040",
    "end": "5392000"
  },
  {
    "text": "unit would be a snowflake anyway that's uh that wraps it up I think I think so",
    "start": "5392000",
    "end": "5397400"
  },
  {
    "text": "uh we have four questions uh yes you can have more than one R script because you can create multiple render script",
    "start": "5397400",
    "end": "5403080"
  },
  {
    "text": "context or you can swap when you bind the root script uh you can swap them and in this case I didn't even bind the root",
    "start": "5403080",
    "end": "5408600"
  },
  {
    "text": "script I just invoke functions on them uh you can also have scripts that invoke",
    "start": "5408600",
    "end": "5413639"
  },
  {
    "text": "each other or that include each other I'll show an example hang on can Rend script communicate with another one uh",
    "start": "5413639",
    "end": "5419600"
  },
  {
    "text": "yes I believe they can invoke uh they can invoke other scripts uh can't like pass data uh you can pass data as long",
    "start": "5419600",
    "end": "5427320"
  },
  {
    "text": "as it was allocated before so there there's a there's an example in the SDK called balls uh which um shows balls uh",
    "start": "5427320",
    "end": "5437480"
  },
  {
    "text": "and that consists of a couple of scripts so we can take a look at the project here so you got the SDK side here and",
    "start": "5437480",
    "end": "5443639"
  },
  {
    "text": "then you have these three scripts yes oh well let me show you first the the the balls we're talking",
    "start": "5443639",
    "end": "5450440"
  },
  {
    "text": "about um so it's about a th000 uh",
    "start": "5450440",
    "end": "5455679"
  },
  {
    "text": "particles 900 particles that react to the xret and they all interact with each",
    "start": "5455679",
    "end": "5460880"
  },
  {
    "text": "other so we run 900 time 900 physics computations on the two cores",
    "start": "5460880",
    "end": "5466320"
  },
  {
    "text": "automatically it's also interacting with uh the touch uh events on the screen so",
    "start": "5466320",
    "end": "5474158"
  },
  {
    "text": "okay um so on the left here you see uh the three files that are interacting",
    "start": "5474199",
    "end": "5479679"
  },
  {
    "text": "with the scripts on the SDK side and then on the render script side side you've",
    "start": "5479679",
    "end": "5486360"
  },
  {
    "text": "got uh this is a really tiny one that just declares a couple of uh data structures that are going to be um",
    "start": "5486920",
    "end": "5492800"
  },
  {
    "text": "become allocations that get populated in the SDK side you've got the main script here uh which actually does the",
    "start": "5492800",
    "end": "5498360"
  },
  {
    "text": "rendering um but then it pawns off the work of actually calculating the physics",
    "start": "5498360",
    "end": "5503480"
  },
  {
    "text": "to a separate script entirely so it says okay well this script um is going to be invoked RS4 each so uh it's going to",
    "start": "5503480",
    "end": "5511480"
  },
  {
    "text": "call the root function of this script from that other script um just like we we saw in Roman's example except these",
    "start": "5511480",
    "end": "5518080"
  },
  {
    "text": "are two uh completely different scripts interacting uh that header file was um",
    "start": "5518080",
    "end": "5525119"
  },
  {
    "text": "created uh you would create that um there's standard renderscript header files that you include just get handles",
    "start": "5525119",
    "end": "5530920"
  },
  {
    "text": "to the functions uh I also wanted to show some of the generated code um so if we go back to the Droid flakes example I",
    "start": "5530920",
    "end": "5537520"
  },
  {
    "text": "can show you some of the data structures that were created um for",
    "start": "5537520",
    "end": "5542840"
  },
  {
    "text": "uh uh yeah flaky flaky was the one what was that uh it's in gen yeah yeah",
    "start": "5542840",
    "end": "5552040"
  },
  {
    "text": "um so we can see for instance um uh this was created from the flake",
    "start": "5552040",
    "end": "5559880"
  },
  {
    "text": "data structure the data structure that basically had the float to for the position the speed scale all these things that you can see this is uh the",
    "start": "5559880",
    "end": "5566080"
  },
  {
    "text": "generated code that was created at compile time so if you call the do item um API inside of this thing it will",
    "start": "5566080",
    "end": "5573000"
  },
  {
    "text": "return a data structure that's basically an exact mirror of what you created on the render script side um and here's",
    "start": "5573000",
    "end": "5579280"
  },
  {
    "text": "some of the element creation stuff that you don't have to do if you allow render script compilation to do it for you um",
    "start": "5579280",
    "end": "5585560"
  },
  {
    "text": "so uh it can create the element automatically this is um sort of like the code that I walk through on the",
    "start": "5585560",
    "end": "5591560"
  },
  {
    "text": "slides except it's done for you right so it creates this wrapper uh stuff for you",
    "start": "5591560",
    "end": "5597280"
  },
  {
    "text": "um and then if I call uh the Constructor of scrip field flake which is down here",
    "start": "5597280",
    "end": "5603400"
  },
  {
    "text": "then it'll basically call create element for me so all I say is okay here's the script here's this Constructor that you",
    "start": "5603400",
    "end": "5609679"
  },
  {
    "text": "uh handily created for me and here's how many of these flakes I want to create um and uh then it populates a",
    "start": "5609679",
    "end": "5617199"
  },
  {
    "text": "couple of internal variables and then calls that create element thing that walks through and actually manually creates the element um and initializes",
    "start": "5617199",
    "end": "5624119"
  },
  {
    "text": "it and then you get the type and the allocation and everything created for you um I think that was the question",
    "start": "5624119",
    "end": "5629400"
  },
  {
    "text": "about the generated code this is sort of I mean there there's more stuff in here oh here's one of the set functions",
    "start": "5629400",
    "end": "5636360"
  },
  {
    "text": "um that you would call yeah so you can also use those those generated function if you need to to set one element inside",
    "start": "5636360",
    "end": "5642440"
  },
  {
    "text": "the array there there's a method that Tak an index and you can modify values from the the Java side you don't have to",
    "start": "5642440",
    "end": "5647920"
  },
  {
    "text": "do it on the rpt side also on the Ros scrip side you can modify the allocation and if you want to read the result from",
    "start": "5647920",
    "end": "5653199"
  },
  {
    "text": "java there's a way to synchronize the data between the two so it goes both ways um handy links uh Android developer",
    "start": "5653199",
    "end": "5660840"
  },
  {
    "text": "blog as I said Jason Sam's two articles and probably a third one sometime soon uh raman's blog at curious creature.",
    "start": "5660840",
    "end": "5667400"
  },
  {
    "text": "comom and my blog at chat chat. blogspot.com and it's",
    "start": "5667400",
    "end": "5672480"
  },
  {
    "text": "org what oh amateurs typing up these slides",
    "start": "5672480",
    "end": "5678239"
  },
  {
    "text": "honestly fire these people all right curious creature",
    "start": "5678239",
    "end": "5684119"
  },
  {
    "text": "dot yes several blogs that's a good point um yeah this is actually a link to",
    "start": "5686440",
    "end": "5692360"
  },
  {
    "text": "my humor blog which is entire different he talks a lot you also writes a lot Graphics geek. blogspot.com thank",
    "start": "5692360",
    "end": "5700920"
  },
  {
    "text": "you uh yeah this will get you a little bit closer to technical details than the other one would uh that wraps up the",
    "start": "5700920",
    "end": "5706920"
  },
  {
    "text": "talk we can stick around for some more questions um otherwise",
    "start": "5706920",
    "end": "5712690"
  },
  {
    "text": "[Applause]",
    "start": "5712690",
    "end": "5717120"
  },
  {
    "text": "thanks",
    "start": "5719880",
    "end": "5722880"
  }
]