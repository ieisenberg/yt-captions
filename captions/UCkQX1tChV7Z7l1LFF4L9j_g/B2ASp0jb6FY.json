[
  {
    "text": "okay just a quick show of hands how many",
    "start": "9000",
    "end": "10240"
  },
  {
    "text": "of you guys have heard of",
    "start": "10240",
    "end": "12120"
  },
  {
    "text": "generators sweet all right we're all on",
    "start": "12120",
    "end": "14200"
  },
  {
    "text": "the same page so generators are this",
    "start": "14200",
    "end": "17279"
  },
  {
    "text": "incredible new feature that's being",
    "start": "17279",
    "end": "18800"
  },
  {
    "text": "released in ecmascript 6 um up until",
    "start": "18800",
    "end": "21560"
  },
  {
    "text": "they were released some of you may be",
    "start": "21560",
    "end": "23000"
  },
  {
    "text": "familiar with node fibers and for a",
    "start": "23000",
    "end": "25400"
  },
  {
    "text": "couple of reasons I personally feel that",
    "start": "25400",
    "end": "27119"
  },
  {
    "text": "generators are a much better solution",
    "start": "27119",
    "end": "28640"
  },
  {
    "text": "for constructing co- routine",
    "start": "28640",
    "end": "30920"
  },
  {
    "text": "now what's really interesting is a",
    "start": "30920",
    "end": "32320"
  },
  {
    "text": "couple of months ago I was doing some",
    "start": "32320",
    "end": "33920"
  },
  {
    "text": "research on generators and I found that",
    "start": "33920",
    "end": "36160"
  },
  {
    "text": "there was no information out there I",
    "start": "36160",
    "end": "38120"
  },
  {
    "text": "mean there's a few little bits on how to",
    "start": "38120",
    "end": "39640"
  },
  {
    "text": "do the very very Basics but I could I",
    "start": "39640",
    "end": "42239"
  },
  {
    "text": "was very very flustered trying to find",
    "start": "42239",
    "end": "44039"
  },
  {
    "text": "any practical applications so I did a",
    "start": "44039",
    "end": "46360"
  },
  {
    "text": "lot of soul searching and you know",
    "start": "46360",
    "end": "47920"
  },
  {
    "text": "experimental coding in order to come up",
    "start": "47920",
    "end": "49760"
  },
  {
    "text": "with the stuff that I'm about to present",
    "start": "49760",
    "end": "51719"
  },
  {
    "text": "to you",
    "start": "51719",
    "end": "53320"
  },
  {
    "text": "guys so first of all of course you need",
    "start": "53320",
    "end": "55840"
  },
  {
    "text": "note",
    "start": "55840",
    "end": "56800"
  },
  {
    "text": "11 and um before I go any further let me",
    "start": "56800",
    "end": "60640"
  },
  {
    "text": "just go through the evolution of node",
    "start": "60640",
    "end": "62320"
  },
  {
    "text": "concurrency real quick um first you know",
    "start": "62320",
    "end": "65000"
  },
  {
    "text": "we're all familiar with this it's simple",
    "start": "65000",
    "end": "67479"
  },
  {
    "text": "it's fast unfortunately you know you get",
    "start": "67479",
    "end": "71320"
  },
  {
    "text": "call back hell I've seen it get real",
    "start": "71320",
    "end": "75240"
  },
  {
    "text": "bad that's the mountain of wool from",
    "start": "75240",
    "end": "77400"
  },
  {
    "text": "Chrono",
    "start": "77400",
    "end": "79680"
  },
  {
    "text": "Trigger so promises are really great",
    "start": "83159",
    "end": "86280"
  },
  {
    "text": "it's a monad that allows us to return",
    "start": "86280",
    "end": "89560"
  },
  {
    "text": "something from an asynchronous function",
    "start": "89560",
    "end": "91320"
  },
  {
    "text": "that represents the reification of that",
    "start": "91320",
    "end": "93759"
  },
  {
    "text": "final computation and we can compose",
    "start": "93759",
    "end": "96560"
  },
  {
    "text": "these things pretty well",
    "start": "96560",
    "end": "99520"
  },
  {
    "text": "now that original code becomes this I",
    "start": "99520",
    "end": "102320"
  },
  {
    "text": "mean it's much simpler it flows a lot",
    "start": "102320",
    "end": "104960"
  },
  {
    "text": "better and if we have more and more of",
    "start": "104960",
    "end": "108040"
  },
  {
    "text": "these things as long as the asynchronous",
    "start": "108040",
    "end": "110520"
  },
  {
    "text": "functions all return promises we can",
    "start": "110520",
    "end": "113840"
  },
  {
    "text": "compose them way easier than you could",
    "start": "113840",
    "end": "116240"
  },
  {
    "text": "if you had to do everything callback",
    "start": "116240",
    "end": "117719"
  },
  {
    "text": "style of course there's a limitation",
    "start": "117719",
    "end": "120920"
  },
  {
    "text": "with any promises you still have to rely",
    "start": "120920",
    "end": "123520"
  },
  {
    "text": "on a whole new call stack being",
    "start": "123520",
    "end": "124799"
  },
  {
    "text": "generated so every time a function is",
    "start": "124799",
    "end": "127479"
  },
  {
    "text": "called what ends up happening is you can",
    "start": "127479",
    "end": "130679"
  },
  {
    "text": "recurse or you can go into it",
    "start": "130679",
    "end": "134680"
  },
  {
    "text": "and the limitation of promises is you",
    "start": "134680",
    "end": "137480"
  },
  {
    "text": "can never return to the original call",
    "start": "137480",
    "end": "139160"
  },
  {
    "text": "stack so if you assign a variable to",
    "start": "139160",
    "end": "141080"
  },
  {
    "text": "something you basically have to create a",
    "start": "141080",
    "end": "143879"
  },
  {
    "text": "callback function that has a lexical um",
    "start": "143879",
    "end": "147280"
  },
  {
    "text": "reference to the containing object",
    "start": "147280",
    "end": "151800"
  },
  {
    "text": "so what's awesome with generators um and",
    "start": "152640",
    "end": "155720"
  },
  {
    "text": "I'll get to how they're used in Co",
    "start": "155720",
    "end": "157239"
  },
  {
    "text": "routine soon but to give a brief",
    "start": "157239",
    "end": "159040"
  },
  {
    "text": "overview they're basically a function",
    "start": "159040",
    "end": "160640"
  },
  {
    "text": "with an internal state for tracking",
    "start": "160640",
    "end": "162040"
  },
  {
    "text": "where it is in the execution so it's",
    "start": "162040",
    "end": "164560"
  },
  {
    "text": "basically a restartable function um so",
    "start": "164560",
    "end": "168720"
  },
  {
    "text": "how do you use it you call it right so",
    "start": "168720",
    "end": "171120"
  },
  {
    "text": "there's this whole idea of a generator",
    "start": "171120",
    "end": "174080"
  },
  {
    "text": "the generator itself and an instance of",
    "start": "174080",
    "end": "176239"
  },
  {
    "text": "that",
    "start": "176239",
    "end": "177200"
  },
  {
    "text": "generator now as you can see from my my",
    "start": "177200",
    "end": "180040"
  },
  {
    "text": "example you have the generator which is",
    "start": "180040",
    "end": "182840"
  },
  {
    "text": "listed right here and youve defined it",
    "start": "182840",
    "end": "184840"
  },
  {
    "text": "and underneath you see I have VAR gen",
    "start": "184840",
    "end": "186760"
  },
  {
    "text": "equals gen and I'm calling it and much",
    "start": "186760",
    "end": "189599"
  },
  {
    "text": "like an object orientation you're",
    "start": "189599",
    "end": "191440"
  },
  {
    "text": "creating an instance of that generator",
    "start": "191440",
    "end": "194040"
  },
  {
    "text": "now when I call next what it does is it",
    "start": "194040",
    "end": "196920"
  },
  {
    "text": "returns an object that has both a value",
    "start": "196920",
    "end": "200159"
  },
  {
    "text": "and a piece of information that tells me",
    "start": "200159",
    "end": "202040"
  },
  {
    "text": "if I can continue calling next on it and",
    "start": "202040",
    "end": "204560"
  },
  {
    "text": "that value happens to be whatever is on",
    "start": "204560",
    "end": "206480"
  },
  {
    "text": "the right hand side of that yield so in",
    "start": "206480",
    "end": "208760"
  },
  {
    "text": "this case Val becomes equal to six now",
    "start": "208760",
    "end": "212080"
  },
  {
    "text": "what's really cool is when I restart",
    "start": "212080",
    "end": "213680"
  },
  {
    "text": "that generator by calling next on it I",
    "start": "213680",
    "end": "216439"
  },
  {
    "text": "can choose what comes out of that yield",
    "start": "216439",
    "end": "218480"
  },
  {
    "text": "on the left hand",
    "start": "218480",
    "end": "221200"
  },
  {
    "text": "side so that yieldable right that's",
    "start": "224640",
    "end": "227480"
  },
  {
    "text": "supposed to returned from next it",
    "start": "227480",
    "end": "228599"
  },
  {
    "text": "contains a value and it contains done so",
    "start": "228599",
    "end": "231720"
  },
  {
    "text": "if you are going through a generator and",
    "start": "231720",
    "end": "234239"
  },
  {
    "text": "the done returns true then that means",
    "start": "234239",
    "end": "235879"
  },
  {
    "text": "that you can't call it anymore so this",
    "start": "235879",
    "end": "238640"
  },
  {
    "text": "is about as far as I managed to get from",
    "start": "238640",
    "end": "240400"
  },
  {
    "text": "my research reading tutorials on the",
    "start": "240400",
    "end": "241879"
  },
  {
    "text": "internet and I was really confused like",
    "start": "241879",
    "end": "243959"
  },
  {
    "text": "you know TJ Hollow is producing these",
    "start": "243959",
    "end": "245920"
  },
  {
    "text": "incredible co-routine libraries with it",
    "start": "245920",
    "end": "247599"
  },
  {
    "text": "so I spent some time really researching",
    "start": "247599",
    "end": "249640"
  },
  {
    "text": "on this and I found that the two major",
    "start": "249640",
    "end": "252959"
  },
  {
    "text": "uh uses for this particular object are",
    "start": "252959",
    "end": "255400"
  },
  {
    "text": "is lazy evaluation and co-routines now",
    "start": "255400",
    "end": "257840"
  },
  {
    "text": "lazy evaluation is a little out of scope",
    "start": "257840",
    "end": "259639"
  },
  {
    "text": "and I'm going to be focusing mostly on",
    "start": "259639",
    "end": "260880"
  },
  {
    "text": "Co",
    "start": "260880",
    "end": "261919"
  },
  {
    "text": "co-routines and a co- routine is a stack",
    "start": "261919",
    "end": "265240"
  },
  {
    "text": "of executing code that runs",
    "start": "265240",
    "end": "267240"
  },
  {
    "text": "independently of the main thread and and",
    "start": "267240",
    "end": "270720"
  },
  {
    "text": "one of the things that's really awesome",
    "start": "270720",
    "end": "272039"
  },
  {
    "text": "about generators is generators give us",
    "start": "272039",
    "end": "274320"
  },
  {
    "text": "the ability to produce Cod routines now",
    "start": "274320",
    "end": "276280"
  },
  {
    "text": "that's not to say you couldn't do it",
    "start": "276280",
    "end": "277440"
  },
  {
    "text": "before using fibers um it relied on C",
    "start": "277440",
    "end": "280400"
  },
  {
    "text": "extensions and you could only use them",
    "start": "280400",
    "end": "281560"
  },
  {
    "text": "on node now that this is part of",
    "start": "281560",
    "end": "283440"
  },
  {
    "text": "ecmascript 6 we're going to be able to",
    "start": "283440",
    "end": "285880"
  },
  {
    "text": "write co- routines right on the browser",
    "start": "285880",
    "end": "288800"
  },
  {
    "text": "which will make things a lot simpler I",
    "start": "288800",
    "end": "290680"
  },
  {
    "text": "mean I don't know about you guys but",
    "start": "290680",
    "end": "292520"
  },
  {
    "text": "most of the code that I've worked with",
    "start": "292520",
    "end": "295120"
  },
  {
    "text": "with asynchronous stuff is I am doing",
    "start": "295120",
    "end": "297320"
  },
  {
    "text": "one asynchronous thing and then I use",
    "start": "297320",
    "end": "299960"
  },
  {
    "text": "the value from that in order to put that",
    "start": "299960",
    "end": "302759"
  },
  {
    "text": "in the argument for another asynchronous",
    "start": "302759",
    "end": "304280"
  },
  {
    "text": "function so it kind of makes sense to",
    "start": "304280",
    "end": "306360"
  },
  {
    "text": "make them blocking but in node",
    "start": "306360",
    "end": "307919"
  },
  {
    "text": "everything is non-blocking by default",
    "start": "307919",
    "end": "309560"
  },
  {
    "text": "when it comes to IO so in this case you",
    "start": "309560",
    "end": "311840"
  },
  {
    "text": "get a kind of A fine grain control when",
    "start": "311840",
    "end": "313400"
  },
  {
    "text": "it makes",
    "start": "313400",
    "end": "315120"
  },
  {
    "text": "sense so how do you use a generator as a",
    "start": "315120",
    "end": "317759"
  },
  {
    "text": "co-routine so this is basically the",
    "start": "317759",
    "end": "320080"
  },
  {
    "text": "pseudo code bones of a co-routine module",
    "start": "320080",
    "end": "322919"
  },
  {
    "text": "you initiate the",
    "start": "322919",
    "end": "324319"
  },
  {
    "text": "generator and then you take the you get",
    "start": "324319",
    "end": "327440"
  },
  {
    "text": "the first yieldable out of it now was",
    "start": "327440",
    "end": "330000"
  },
  {
    "text": "really interesting while the yieldable",
    "start": "330000",
    "end": "332240"
  },
  {
    "text": "is not done then you get a new yieldable",
    "start": "332240",
    "end": "334680"
  },
  {
    "text": "out of it while taking injecting back in",
    "start": "334680",
    "end": "337240"
  },
  {
    "text": "the original yieldable value and then",
    "start": "337240",
    "end": "340080"
  },
  {
    "text": "when you're finally done you return the",
    "start": "340080",
    "end": "341600"
  },
  {
    "text": "final value of that",
    "start": "341600",
    "end": "343759"
  },
  {
    "text": "yieldable so let's do this recursively",
    "start": "343759",
    "end": "347080"
  },
  {
    "text": "we refining a next right and it takes a",
    "start": "347080",
    "end": "349520"
  },
  {
    "text": "generator an instantiated generator a",
    "start": "349520",
    "end": "352240"
  },
  {
    "text": "yieldable and a",
    "start": "352240",
    "end": "353759"
  },
  {
    "text": "callback and we see if the yieldable is",
    "start": "353759",
    "end": "356720"
  },
  {
    "text": "not done then assuming the Y buildable",
    "start": "356720",
    "end": "359919"
  },
  {
    "text": "value is a promise so this is a really",
    "start": "359919",
    "end": "361840"
  },
  {
    "text": "really really simplified case um an",
    "start": "361840",
    "end": "364280"
  },
  {
    "text": "actual co-routine function in practice",
    "start": "364280",
    "end": "365840"
  },
  {
    "text": "would be a lot bigger and take care of a",
    "start": "365840",
    "end": "367120"
  },
  {
    "text": "lot of edge cases but the basic guts are",
    "start": "367120",
    "end": "369960"
  },
  {
    "text": "you wait till that yieldable resolves at",
    "start": "369960",
    "end": "372280"
  },
  {
    "text": "which point you call next again on that",
    "start": "372280",
    "end": "374560"
  },
  {
    "text": "generator and you pass in the uh next of",
    "start": "374560",
    "end": "377960"
  },
  {
    "text": "that which gives you a new yieldable so",
    "start": "377960",
    "end": "380560"
  },
  {
    "text": "it's kind of a recursive Loop so now you",
    "start": "380560",
    "end": "383120"
  },
  {
    "text": "just have to Kickstart",
    "start": "383120",
    "end": "384960"
  },
  {
    "text": "it so we Define Co and that function",
    "start": "384960",
    "end": "389000"
  },
  {
    "text": "just takes a a instance or a um a",
    "start": "389000",
    "end": "392240"
  },
  {
    "text": "generator and as you can see return a",
    "start": "392240",
    "end": "394560"
  },
  {
    "text": "function that takes a call back that",
    "start": "394560",
    "end": "397280"
  },
  {
    "text": "will be given the final value of that",
    "start": "397280",
    "end": "400680"
  },
  {
    "text": "generator and this is basically how most",
    "start": "400680",
    "end": "403720"
  },
  {
    "text": "code routines work if you create a",
    "start": "403720",
    "end": "405599"
  },
  {
    "text": "generator and you want to use the code",
    "start": "405599",
    "end": "407520"
  },
  {
    "text": "routine you can yield a promise you can",
    "start": "407520",
    "end": "409000"
  },
  {
    "text": "yield a thunk you can yield um a",
    "start": "409000",
    "end": "412039"
  },
  {
    "text": "standard callback style node function",
    "start": "412039",
    "end": "415240"
  },
  {
    "text": "and you put it in the code routine and",
    "start": "415240",
    "end": "417120"
  },
  {
    "text": "it will just take care of making sure",
    "start": "417120",
    "end": "419080"
  },
  {
    "text": "that it blocks when it hits the yield",
    "start": "419080",
    "end": "421240"
  },
  {
    "text": "Waits until that value is resolved and",
    "start": "421240",
    "end": "423080"
  },
  {
    "text": "then restarts it and what's great about",
    "start": "423080",
    "end": "425160"
  },
  {
    "text": "that is now you have a synchronous flow",
    "start": "425160",
    "end": "427759"
  },
  {
    "text": "control when it makes",
    "start": "427759",
    "end": "431039"
  },
  {
    "text": "sense so for the real world I would",
    "start": "435160",
    "end": "438199"
  },
  {
    "text": "recommend using Co by TJ H Chuck um and",
    "start": "438199",
    "end": "441879"
  },
  {
    "text": "it essentially is a much better best of",
    "start": "441879",
    "end": "444360"
  },
  {
    "text": "breed version of what I just showed you",
    "start": "444360",
    "end": "447639"
  },
  {
    "text": "guys now here we get to the really",
    "start": "447639",
    "end": "450319"
  },
  {
    "text": "interesting stuff this is the stuff that",
    "start": "450319",
    "end": "452080"
  },
  {
    "text": "you probably haven't seen before so I",
    "start": "452080",
    "end": "455520"
  },
  {
    "text": "realized while building out this basic",
    "start": "455520",
    "end": "457680"
  },
  {
    "text": "function that generators are first class",
    "start": "457680",
    "end": "459800"
  },
  {
    "text": "just like functions in fact you can",
    "start": "459800",
    "end": "461720"
  },
  {
    "text": "write functions that return generators",
    "start": "461720",
    "end": "464000"
  },
  {
    "text": "you can have a generator that takes a",
    "start": "464000",
    "end": "465720"
  },
  {
    "text": "generator and does something with it and",
    "start": "465720",
    "end": "467960"
  },
  {
    "text": "returns a new",
    "start": "467960",
    "end": "469319"
  },
  {
    "text": "generator so I wanted to make it really",
    "start": "469319",
    "end": "471919"
  },
  {
    "text": "really simple because I realized that",
    "start": "471919",
    "end": "473639"
  },
  {
    "text": "this stuff was kind of complex when you",
    "start": "473639",
    "end": "475319"
  },
  {
    "text": "get the rules but the rules themselves",
    "start": "475319",
    "end": "478319"
  },
  {
    "text": "are very very",
    "start": "478319",
    "end": "480800"
  },
  {
    "text": "um",
    "start": "480800",
    "end": "482599"
  },
  {
    "text": "um they just kind of fit",
    "start": "482599",
    "end": "485440"
  },
  {
    "text": "together so how do we create a function",
    "start": "485440",
    "end": "488639"
  },
  {
    "text": "that merges two generators together for",
    "start": "488639",
    "end": "491440"
  },
  {
    "text": "instance COA really awesome framework um",
    "start": "491440",
    "end": "494159"
  },
  {
    "text": "allows you to have an app.use and you",
    "start": "494159",
    "end": "495680"
  },
  {
    "text": "put in generators and each generator",
    "start": "495680",
    "end": "497720"
  },
  {
    "text": "flows into the next",
    "start": "497720",
    "end": "499199"
  },
  {
    "text": "one so first version as a compose how do",
    "start": "499199",
    "end": "502440"
  },
  {
    "text": "we compose these two functions or two",
    "start": "502440",
    "end": "504879"
  },
  {
    "text": "generators so this compos takes two",
    "start": "504879",
    "end": "508000"
  },
  {
    "text": "functions and it B basically returns a",
    "start": "508000",
    "end": "510159"
  },
  {
    "text": "function that takes a value that puts it",
    "start": "510159",
    "end": "513518"
  },
  {
    "text": "into the original a and then it takes",
    "start": "513519",
    "end": "515640"
  },
  {
    "text": "whatever is returned from the A and puts",
    "start": "515640",
    "end": "516880"
  },
  {
    "text": "it into B we can apply the same idea for",
    "start": "516880",
    "end": "520039"
  },
  {
    "text": "a join which is the co- routin the",
    "start": "520039",
    "end": "523159"
  },
  {
    "text": "generator's version of that so as you",
    "start": "523159",
    "end": "525800"
  },
  {
    "text": "can see we take a generator one and",
    "start": "525800",
    "end": "527399"
  },
  {
    "text": "Generator 2 and returning a new",
    "start": "527399",
    "end": "529360"
  },
  {
    "text": "generator and then inside we're",
    "start": "529360",
    "end": "531360"
  },
  {
    "text": "returning a yield and what we're doing",
    "start": "531360",
    "end": "533640"
  },
  {
    "text": "is we're instantiating the",
    "start": "533640",
    "end": "535600"
  },
  {
    "text": "generator and we're passing as the",
    "start": "535600",
    "end": "537880"
  },
  {
    "text": "initial value the second generator",
    "start": "537880",
    "end": "541440"
  },
  {
    "text": "and if you take the generator itself",
    "start": "541440",
    "end": "543920"
  },
  {
    "text": "that whole thing and you put in a Cod",
    "start": "543920",
    "end": "545360"
  },
  {
    "text": "routine it will run through them in sync",
    "start": "545360",
    "end": "548079"
  },
  {
    "text": "with each other so the first value will",
    "start": "548079",
    "end": "552240"
  },
  {
    "text": "go through it'll yield and next is given",
    "start": "552240",
    "end": "555680"
  },
  {
    "text": "to the second generator so you can yield",
    "start": "555680",
    "end": "557399"
  },
  {
    "text": "into that in order to go into the second",
    "start": "557399",
    "end": "558720"
  },
  {
    "text": "part of the flow oh so um the reason I",
    "start": "558720",
    "end": "562440"
  },
  {
    "text": "put this in there is when you do call",
    "start": "562440",
    "end": "564959"
  },
  {
    "text": "you have to have this and in this",
    "start": "564959",
    "end": "567040"
  },
  {
    "text": "particular case I want to make sure that",
    "start": "567040",
    "end": "568720"
  },
  {
    "text": "if I were to take that generator outside",
    "start": "568720",
    "end": "570320"
  },
  {
    "text": "of it and inject some context into it",
    "start": "570320",
    "end": "572200"
  },
  {
    "text": "that that context would be transferred",
    "start": "572200",
    "end": "573760"
  },
  {
    "text": "through so this could be anything",
    "start": "573760",
    "end": "575959"
  },
  {
    "text": "basically um by default if you don't",
    "start": "575959",
    "end": "578480"
  },
  {
    "text": "give any explicit stuff it's going to be",
    "start": "578480",
    "end": "580680"
  },
  {
    "text": "the global",
    "start": "580680",
    "end": "583160"
  },
  {
    "text": "object so um if a generator is yielded",
    "start": "583279",
    "end": "586680"
  },
  {
    "text": "it will instantiate the generator and",
    "start": "586680",
    "end": "588200"
  },
  {
    "text": "run it if there's nothing left to yield",
    "start": "588200",
    "end": "590800"
  },
  {
    "text": "uh it will then return the value to the",
    "start": "590800",
    "end": "592120"
  },
  {
    "text": "original generator oh wait yeah and if",
    "start": "592120",
    "end": "596120"
  },
  {
    "text": "the generator yields to the generator",
    "start": "596120",
    "end": "597200"
  },
  {
    "text": "the same rules apply so it's very",
    "start": "597200",
    "end": "600000"
  },
  {
    "text": "recursive in its u Way of",
    "start": "600000",
    "end": "603279"
  },
  {
    "text": "working if you want to compose three or",
    "start": "603279",
    "end": "605279"
  },
  {
    "text": "more generators it gets",
    "start": "605279",
    "end": "606600"
  },
  {
    "text": "complicated",
    "start": "606600",
    "end": "608959"
  },
  {
    "text": "but and I will cover this eventually but",
    "start": "608959",
    "end": "612000"
  },
  {
    "text": "first you know how many of you guys like",
    "start": "612000",
    "end": "613720"
  },
  {
    "text": "practical",
    "start": "613720",
    "end": "615880"
  },
  {
    "text": "examples so I could go straight into",
    "start": "615880",
    "end": "619000"
  },
  {
    "text": "that but it won't make much sense so I'm",
    "start": "619000",
    "end": "620720"
  },
  {
    "text": "going to introduce COA and COA is a web",
    "start": "620720",
    "end": "623800"
  },
  {
    "text": "framework that's based around the use of",
    "start": "623800",
    "end": "625680"
  },
  {
    "text": "generators it's really nice you have",
    "start": "625680",
    "end": "627680"
  },
  {
    "text": "full middleware so you can go down and",
    "start": "627680",
    "end": "630120"
  },
  {
    "text": "back up the stack duee to the fact that",
    "start": "630120",
    "end": "632040"
  },
  {
    "text": "all returns return up this flow in",
    "start": "632040",
    "end": "634360"
  },
  {
    "text": "Express you're pretty much stuck in a",
    "start": "634360",
    "end": "635760"
  },
  {
    "text": "continuation passing style where it just",
    "start": "635760",
    "end": "637399"
  },
  {
    "text": "goes",
    "start": "637399",
    "end": "639040"
  },
  {
    "text": "down so the handlers are generators and",
    "start": "639040",
    "end": "642320"
  },
  {
    "text": "the Returns come up the stack so you can",
    "start": "642320",
    "end": "645279"
  },
  {
    "text": "write your async code as if it's",
    "start": "645279",
    "end": "646519"
  },
  {
    "text": "synchronous if you yield a promise",
    "start": "646519",
    "end": "649040"
  },
  {
    "text": "inside one of these code routines then",
    "start": "649040",
    "end": "651160"
  },
  {
    "text": "it will block right there until that",
    "start": "651160",
    "end": "653760"
  },
  {
    "text": "asynchronous event is resolved and then",
    "start": "653760",
    "end": "656120"
  },
  {
    "text": "restart it which is a lot simpler than a",
    "start": "656120",
    "end": "659440"
  },
  {
    "text": "similar case in Express where you would",
    "start": "659440",
    "end": "662360"
  },
  {
    "text": "have safer response and in there you",
    "start": "662360",
    "end": "664600"
  },
  {
    "text": "have the next and you wait until some",
    "start": "664600",
    "end": "666440"
  },
  {
    "text": "event comes in on response for instance",
    "start": "666440",
    "end": "668240"
  },
  {
    "text": "data in order to run these asynchronous",
    "start": "668240",
    "end": "671120"
  },
  {
    "text": "in order to get the value from an",
    "start": "671120",
    "end": "672320"
  },
  {
    "text": "asynchronous",
    "start": "672320",
    "end": "674800"
  },
  {
    "text": "event oh and to give an example you know",
    "start": "674959",
    "end": "677360"
  },
  {
    "text": "you have VAR COA equals require COA and",
    "start": "677360",
    "end": "679800"
  },
  {
    "text": "then you pass in a function and you see",
    "start": "679800",
    "end": "682000"
  },
  {
    "text": "that next and that next is the second",
    "start": "682000",
    "end": "684399"
  },
  {
    "text": "one over here app.use function next",
    "start": "684399",
    "end": "686839"
  },
  {
    "text": "return Hol world so it returns hello",
    "start": "686839",
    "end": "689639"
  },
  {
    "text": "world and then this body becomes",
    "start": "689639",
    "end": "691480"
  },
  {
    "text": "assigned hello",
    "start": "691480",
    "end": "694160"
  },
  {
    "text": "world so let's do a basic to-do app um",
    "start": "695200",
    "end": "698440"
  },
  {
    "text": "we want to post a to-do get back a list",
    "start": "698440",
    "end": "700760"
  },
  {
    "text": "of to-dos and delete a to-do so the",
    "start": "700760",
    "end": "704680"
  },
  {
    "text": "modules that I use our co- body co root",
    "start": "704680",
    "end": "707279"
  },
  {
    "text": "and",
    "start": "707279",
    "end": "708440"
  },
  {
    "text": "coatic so let's start some static files",
    "start": "708440",
    "end": "711920"
  },
  {
    "text": "uh there's some really nice middleware",
    "start": "711920",
    "end": "713560"
  },
  {
    "text": "that they've already written for it so",
    "start": "713560",
    "end": "715480"
  },
  {
    "text": "these two lines basically allow you to",
    "start": "715480",
    "end": "716839"
  },
  {
    "text": "serve up a public directory now if if I",
    "start": "716839",
    "end": "719440"
  },
  {
    "text": "have a router I use cor route and you",
    "start": "719440",
    "end": "721480"
  },
  {
    "text": "see app do use router. getet to use it's",
    "start": "721480",
    "end": "724760"
  },
  {
    "text": "all pretty simple stuff um all this does",
    "start": "724760",
    "end": "727760"
  },
  {
    "text": "is make sure that if you are trying to",
    "start": "727760",
    "end": "730639"
  },
  {
    "text": "access SL to that we definitely serve up",
    "start": "730639",
    "end": "733120"
  },
  {
    "text": "this",
    "start": "733120",
    "end": "734120"
  },
  {
    "text": "generator and same idea with post and",
    "start": "734120",
    "end": "736480"
  },
  {
    "text": "then finally we can listen to",
    "start": "736480",
    "end": "739639"
  },
  {
    "text": "it",
    "start": "739959",
    "end": "742959"
  },
  {
    "text": "generators so let's b a basic",
    "start": "744240",
    "end": "746279"
  },
  {
    "text": "authentication um creating a user and",
    "start": "746279",
    "end": "748839"
  },
  {
    "text": "root root pass and how would this look",
    "start": "748839",
    "end": "750639"
  },
  {
    "text": "like in middleware right so ideally you",
    "start": "750639",
    "end": "754920"
  },
  {
    "text": "know if you guys are familiar with",
    "start": "754920",
    "end": "755920"
  },
  {
    "text": "Express you have multiple functions and",
    "start": "755920",
    "end": "758199"
  },
  {
    "text": "you can lay them next to each other so",
    "start": "758199",
    "end": "759959"
  },
  {
    "text": "you'd have the off middleware and then",
    "start": "759959",
    "end": "761399"
  },
  {
    "text": "you know your Handler but that doesn't",
    "start": "761399",
    "end": "763440"
  },
  {
    "text": "work Co only takes one middleware at a",
    "start": "763440",
    "end": "766959"
  },
  {
    "text": "time and I was thinking to myself you",
    "start": "766959",
    "end": "769680"
  },
  {
    "text": "know that kind of sucks I would really",
    "start": "769680",
    "end": "771279"
  },
  {
    "text": "really like the fact that in Express I",
    "start": "771279",
    "end": "772880"
  },
  {
    "text": "can just kind of put more than one",
    "start": "772880",
    "end": "774839"
  },
  {
    "text": "function right next to each other and it",
    "start": "774839",
    "end": "776720"
  },
  {
    "text": "kind of flows and then eventually drops",
    "start": "776720",
    "end": "779519"
  },
  {
    "text": "down to wherever the next part is so I",
    "start": "779519",
    "end": "780880"
  },
  {
    "text": "thought to myself how can I make that",
    "start": "780880",
    "end": "782279"
  },
  {
    "text": "possible now that I figured out how to",
    "start": "782279",
    "end": "784079"
  },
  {
    "text": "compose two generators because if you",
    "start": "784079",
    "end": "785600"
  },
  {
    "text": "compose two of those generators using",
    "start": "785600",
    "end": "787160"
  },
  {
    "text": "that join it works but I wanted to make",
    "start": "787160",
    "end": "790199"
  },
  {
    "text": "it a lot easier for people to take just",
    "start": "790199",
    "end": "792399"
  },
  {
    "text": "any two or three or four or more",
    "start": "792399",
    "end": "794160"
  },
  {
    "text": "arbitrary generators and mash them up",
    "start": "794160",
    "end": "796399"
  },
  {
    "text": "into a single generator that I could pop",
    "start": "796399",
    "end": "798120"
  },
  {
    "text": "right",
    "start": "798120",
    "end": "799560"
  },
  {
    "text": "in so I'm introducing Shen and it's a",
    "start": "799560",
    "end": "802519"
  },
  {
    "text": "library that I wrote and it encapsu",
    "start": "802519",
    "end": "805199"
  },
  {
    "text": "everything that I've learned as far as",
    "start": "805199",
    "end": "807320"
  },
  {
    "text": "how to quickly put together generators",
    "start": "807320",
    "end": "810079"
  },
  {
    "text": "it's a toolbox for composing them and I",
    "start": "810079",
    "end": "813279"
  },
  {
    "text": "think that with this plus um Kaa you get",
    "start": "813279",
    "end": "816959"
  },
  {
    "text": "a really really nice framework for",
    "start": "816959",
    "end": "819040"
  },
  {
    "text": "composing your generators as middleware",
    "start": "819040",
    "end": "822079"
  },
  {
    "text": "as easily or maybe even easier than when",
    "start": "822079",
    "end": "824279"
  },
  {
    "text": "you work with Express and the best part",
    "start": "824279",
    "end": "826680"
  },
  {
    "text": "is a lot of what you know in Express as",
    "start": "826680",
    "end": "828760"
  },
  {
    "text": "a result",
    "start": "828760",
    "end": "830560"
  },
  {
    "text": "applies so the apis that you'll use the",
    "start": "830560",
    "end": "833399"
  },
  {
    "text": "most are cascade and Branch",
    "start": "833399",
    "end": "835680"
  },
  {
    "text": "dispatch um Cascade is basically like",
    "start": "835680",
    "end": "837959"
  },
  {
    "text": "join but it takes one or more and branch",
    "start": "837959",
    "end": "840720"
  },
  {
    "text": "and dispatch there are two different",
    "start": "840720",
    "end": "842320"
  },
  {
    "text": "functions Branch takes three generators",
    "start": "842320",
    "end": "844920"
  },
  {
    "text": "the first generator is past two",
    "start": "844920",
    "end": "846959"
  },
  {
    "text": "references to the second and the third",
    "start": "846959",
    "end": "848519"
  },
  {
    "text": "generator and based on whatever",
    "start": "848519",
    "end": "850600"
  },
  {
    "text": "conditional logic you want you can",
    "start": "850600",
    "end": "852480"
  },
  {
    "text": "choose which one to yield to and I chose",
    "start": "852480",
    "end": "854680"
  },
  {
    "text": "to keep the interface to these really",
    "start": "854680",
    "end": "856040"
  },
  {
    "text": "really simple so that people could build",
    "start": "856040",
    "end": "857920"
  },
  {
    "text": "on top of these",
    "start": "857920",
    "end": "859959"
  },
  {
    "text": "things so shend do Cascade you see I",
    "start": "859959",
    "end": "862959"
  },
  {
    "text": "have a function here next and then I",
    "start": "862959",
    "end": "864920"
  },
  {
    "text": "console. log and then inside I'm",
    "start": "864920",
    "end": "866759"
  },
  {
    "text": "yielding next so what is next next is",
    "start": "866759",
    "end": "869920"
  },
  {
    "text": "literally the function I put in right",
    "start": "869920",
    "end": "871519"
  },
  {
    "text": "afterwards so if I return fu fu gets",
    "start": "871519",
    "end": "875000"
  },
  {
    "text": "returned to the console. log and it",
    "start": "875000",
    "end": "877120"
  },
  {
    "text": "prints it out and Branch similar idea so",
    "start": "877120",
    "end": "881000"
  },
  {
    "text": "Branch takes that function path one and",
    "start": "881000",
    "end": "883399"
  },
  {
    "text": "path two and I can yield either the path",
    "start": "883399",
    "end": "885959"
  },
  {
    "text": "one or path two in order to get what I",
    "start": "885959",
    "end": "889720"
  },
  {
    "text": "want dispatch is for even more",
    "start": "890199",
    "end": "892519"
  },
  {
    "text": "complicated situations let's say I have",
    "start": "892519",
    "end": "895800"
  },
  {
    "text": "20 different potential paths that I want",
    "start": "895800",
    "end": "897959"
  },
  {
    "text": "to take from a single area it's almost",
    "start": "897959",
    "end": "900360"
  },
  {
    "text": "like a map if you were to take an object",
    "start": "900360",
    "end": "903160"
  },
  {
    "text": "and you fill that object up with",
    "start": "903160",
    "end": "905000"
  },
  {
    "text": "different functions and then each one is",
    "start": "905000",
    "end": "907399"
  },
  {
    "text": "a key value and in the original function",
    "start": "907399",
    "end": "910880"
  },
  {
    "text": "you based on some value in that string",
    "start": "910880",
    "end": "913240"
  },
  {
    "text": "you can delegate it to one of these",
    "start": "913240",
    "end": "914720"
  },
  {
    "text": "different objects now you can do the",
    "start": "914720",
    "end": "916399"
  },
  {
    "text": "same thing with a co-routine",
    "start": "916399",
    "end": "919519"
  },
  {
    "text": "flow so with that in mind we've come",
    "start": "919880",
    "end": "923480"
  },
  {
    "text": "back to original problem how do we make",
    "start": "923480",
    "end": "925680"
  },
  {
    "text": "that middleware work well we can create",
    "start": "925680",
    "end": "928160"
  },
  {
    "text": "this pass or fail middleware and this is",
    "start": "928160",
    "end": "930560"
  },
  {
    "text": "an object and it says pass and fail and",
    "start": "930560",
    "end": "933120"
  },
  {
    "text": "as you can see if it passes it yields to",
    "start": "933120",
    "end": "934800"
  },
  {
    "text": "the next one what that next one depends",
    "start": "934800",
    "end": "937160"
  },
  {
    "text": "on where you pop it in now fail you know",
    "start": "937160",
    "end": "940639"
  },
  {
    "text": "obviously you want to send down a 400",
    "start": "940639",
    "end": "942519"
  },
  {
    "text": "you want to say hey shit's not working",
    "start": "942519",
    "end": "945560"
  },
  {
    "text": "and you want to return a new",
    "start": "945560",
    "end": "947319"
  },
  {
    "text": "error now how can we hook this in well",
    "start": "947319",
    "end": "950759"
  },
  {
    "text": "first of all we have to write a new",
    "start": "950759",
    "end": "952120"
  },
  {
    "text": "function called",
    "start": "952120",
    "end": "953240"
  },
  {
    "text": "authorize and we see if blah is",
    "start": "953240",
    "end": "955639"
  },
  {
    "text": "undefined as in we don't find the user",
    "start": "955639",
    "end": "958680"
  },
  {
    "text": "then we or yeah then we yield to the",
    "start": "958680",
    "end": "961920"
  },
  {
    "text": "pass and otherwise we yield to the",
    "start": "961920",
    "end": "964120"
  },
  {
    "text": "fail so I can construct a whole",
    "start": "964120",
    "end": "966959"
  },
  {
    "text": "middleware using off. middleware Shen do",
    "start": "966959",
    "end": "969360"
  },
  {
    "text": "dispatch authorize pass or fail so as",
    "start": "969360",
    "end": "972360"
  },
  {
    "text": "you can see authorize is the first pass",
    "start": "972360",
    "end": "974600"
  },
  {
    "text": "function and then",
    "start": "974600",
    "end": "978040"
  },
  {
    "text": "pass is pass and fail is",
    "start": "978040",
    "end": "982279"
  },
  {
    "text": "fail so what does that next become well",
    "start": "982279",
    "end": "985040"
  },
  {
    "text": "it depends where you want to inject it",
    "start": "985040",
    "end": "986759"
  },
  {
    "text": "in so I can take shendock",
    "start": "986759",
    "end": "989519"
  },
  {
    "text": "Cascade and I can Nest them together so",
    "start": "989519",
    "end": "993600"
  },
  {
    "text": "all the functions in Shen are designed",
    "start": "993600",
    "end": "995480"
  },
  {
    "text": "so that you can compose any of them in",
    "start": "995480",
    "end": "997240"
  },
  {
    "text": "an arbitrary nesting fashion so I can",
    "start": "997240",
    "end": "999360"
  },
  {
    "text": "take a Cascade and I can take another",
    "start": "999360",
    "end": "1001880"
  },
  {
    "text": "Cascade and yo dog I heard you like",
    "start": "1001880",
    "end": "1003680"
  },
  {
    "text": "Cascades so I put a Cascade and your",
    "start": "1003680",
    "end": "1005120"
  },
  {
    "text": "Cascade and your Cascade also there's a",
    "start": "1005120",
    "end": "1007240"
  },
  {
    "text": "Shen in there or a branch in there but",
    "start": "1007240",
    "end": "1009319"
  },
  {
    "text": "you get the idea so now you have a Shen",
    "start": "1009319",
    "end": "1011720"
  },
  {
    "text": "Branch you have a generator hole here",
    "start": "1011720",
    "end": "1013920"
  },
  {
    "text": "that returns a generator that generator",
    "start": "1013920",
    "end": "1016240"
  },
  {
    "text": "then gets fused with two other",
    "start": "1016240",
    "end": "1017600"
  },
  {
    "text": "generators and then I take that",
    "start": "1017600",
    "end": "1019519"
  },
  {
    "text": "generator and I fused it with two other",
    "start": "1019519",
    "end": "1021839"
  },
  {
    "text": "generators all",
    "start": "1021839",
    "end": "1023760"
  },
  {
    "text": "together and the best part is these",
    "start": "1023760",
    "end": "1025798"
  },
  {
    "text": "could be pulled in from completely",
    "start": "1025799",
    "end": "1026959"
  },
  {
    "text": "different modules that don't necessarily",
    "start": "1026959",
    "end": "1028319"
  },
  {
    "text": "know about each other and now they're",
    "start": "1028319",
    "end": "1030120"
  },
  {
    "text": "interoperating with each",
    "start": "1030120",
    "end": "1032000"
  },
  {
    "text": "other",
    "start": "1032000",
    "end": "1033520"
  },
  {
    "text": "so can we just Cascade together",
    "start": "1033520",
    "end": "1036038"
  },
  {
    "text": "authorization yes we can so now what we",
    "start": "1036039",
    "end": "1040280"
  },
  {
    "text": "can do is we can just pop right in there",
    "start": "1040280",
    "end": "1042678"
  },
  {
    "text": "shendock Cascade middleware and then our",
    "start": "1042679",
    "end": "1045079"
  },
  {
    "text": "actual Handler and now you have an",
    "start": "1045079",
    "end": "1048079"
  },
  {
    "text": "actual authorization",
    "start": "1048079",
    "end": "1049640"
  },
  {
    "text": "system really really simple and it only",
    "start": "1049640",
    "end": "1052679"
  },
  {
    "text": "took me three lines to actually hook it",
    "start": "1052679",
    "end": "1055120"
  },
  {
    "text": "into the system so if I want to remove",
    "start": "1055120",
    "end": "1057440"
  },
  {
    "text": "it I can just delete that whole part for",
    "start": "1057440",
    "end": "1059880"
  },
  {
    "text": "testing purposes if I want",
    "start": "1059880",
    "end": "1062280"
  },
  {
    "text": "to so I want to give a special thanks to",
    "start": "1062280",
    "end": "1064880"
  },
  {
    "text": "keychain Logistics this where I work",
    "start": "1064880",
    "end": "1066440"
  },
  {
    "text": "we're currently working on our a round",
    "start": "1066440",
    "end": "1068679"
  },
  {
    "text": "and um super busy hack reactor as well",
    "start": "1068679",
    "end": "1071559"
  },
  {
    "text": "because if it weren't for them I",
    "start": "1071559",
    "end": "1073039"
  },
  {
    "text": "wouldn't be in this awesome position",
    "start": "1073039",
    "end": "1074960"
  },
  {
    "text": "giving an amazing talk to you guys",
    "start": "1074960",
    "end": "1078910"
  },
  {
    "text": "[Applause]",
    "start": "1078910",
    "end": "1088049"
  }
]