[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "[Music]",
    "start": "560",
    "end": "14509"
  },
  {
    "text": "thanks for the uh lovely introduction um",
    "start": "16279",
    "end": "18840"
  },
  {
    "text": "so yes today I'm going to be talking to",
    "start": "18840",
    "end": "20519"
  },
  {
    "text": "you about meta classes um so uh first of",
    "start": "20519",
    "end": "24720"
  },
  {
    "text": "all why meta classes why would you care",
    "start": "24720",
    "end": "26840"
  },
  {
    "text": "about meta classes well the short",
    "start": "26840",
    "end": "29160"
  },
  {
    "text": "version is that that um there's things",
    "start": "29160",
    "end": "31160"
  },
  {
    "text": "you can't do with classes um and meta",
    "start": "31160",
    "end": "33640"
  },
  {
    "text": "classes lets you do these things um and",
    "start": "33640",
    "end": "35920"
  },
  {
    "text": "so I'll spend the rest of the talk",
    "start": "35920",
    "end": "37200"
  },
  {
    "text": "trying to explain what those things are",
    "start": "37200",
    "end": "39440"
  },
  {
    "text": "um and how exactly you would do them um",
    "start": "39440",
    "end": "42719"
  },
  {
    "start": "42000",
    "end": "103000"
  },
  {
    "text": "so um the reason why I started playing",
    "start": "42719",
    "end": "45239"
  },
  {
    "text": "around with meta classes was uh I was um",
    "start": "45239",
    "end": "48879"
  },
  {
    "text": "trying to use uh nose to run some test",
    "start": "48879",
    "end": "51920"
  },
  {
    "text": "Suites and I ran into this problem where",
    "start": "51920",
    "end": "54079"
  },
  {
    "text": "um nose will print out the dock string",
    "start": "54079",
    "end": "56520"
  },
  {
    "text": "of your methods um as it's running them",
    "start": "56520",
    "end": "59039"
  },
  {
    "text": "um and these strings aren't necessarily",
    "start": "59039",
    "end": "61039"
  },
  {
    "text": "particularly informative so if you have",
    "start": "61039",
    "end": "63239"
  },
  {
    "text": "some you know class a um and it has a",
    "start": "63239",
    "end": "66960"
  },
  {
    "text": "function called my funk it has some um",
    "start": "66960",
    "end": "69759"
  },
  {
    "text": "you know dock string for the function",
    "start": "69759",
    "end": "71159"
  },
  {
    "text": "and then another class that inherits",
    "start": "71159",
    "end": "72360"
  },
  {
    "text": "from a um and then you look at the doc",
    "start": "72360",
    "end": "74640"
  },
  {
    "text": "string for both of those functions um",
    "start": "74640",
    "end": "76640"
  },
  {
    "text": "they're the same doc string so you don't",
    "start": "76640",
    "end": "78040"
  },
  {
    "text": "actually know um if you're getting that",
    "start": "78040",
    "end": "80280"
  },
  {
    "text": "function through Class A or through",
    "start": "80280",
    "end": "82280"
  },
  {
    "text": "Class B um and so uh this is um normally",
    "start": "82280",
    "end": "87920"
  },
  {
    "text": "not a problem but in these like specific",
    "start": "87920",
    "end": "89720"
  },
  {
    "text": "cas cases like when you're trying to use",
    "start": "89720",
    "end": "91600"
  },
  {
    "text": "nose for this uh it's it makes it very",
    "start": "91600",
    "end": "94200"
  },
  {
    "text": "hard to debug and see like which of your",
    "start": "94200",
    "end": "95920"
  },
  {
    "text": "test um test cases are actually passing",
    "start": "95920",
    "end": "97920"
  },
  {
    "text": "and which are failing um so I uh set out",
    "start": "97920",
    "end": "100880"
  },
  {
    "text": "to try to find a solution to this um so",
    "start": "100880",
    "end": "104799"
  },
  {
    "start": "103000",
    "end": "201000"
  },
  {
    "text": "The Simple Solution um which you might",
    "start": "104799",
    "end": "106719"
  },
  {
    "text": "think of is just to um you know include",
    "start": "106719",
    "end": "109960"
  },
  {
    "text": "the information manually in the doc",
    "start": "109960",
    "end": "111320"
  },
  {
    "text": "strings um that's probably the best",
    "start": "111320",
    "end": "113399"
  },
  {
    "text": "solution for um simple cases um you just",
    "start": "113399",
    "end": "116560"
  },
  {
    "text": "change you know A and B there you go",
    "start": "116560",
    "end": "119119"
  },
  {
    "text": "you're done but if you have lots of",
    "start": "119119",
    "end": "121039"
  },
  {
    "text": "methods or lots of sub classes they this",
    "start": "121039",
    "end": "123159"
  },
  {
    "text": "can get pretty arduous um and so um",
    "start": "123159",
    "end": "126880"
  },
  {
    "text": "there should be a better way to do this",
    "start": "126880",
    "end": "128200"
  },
  {
    "text": "a little bit more programmatically um so",
    "start": "128200",
    "end": "132040"
  },
  {
    "text": "um here's a maybe a better solution to",
    "start": "132040",
    "end": "134480"
  },
  {
    "text": "try to uh fix this um so what you could",
    "start": "134480",
    "end": "137440"
  },
  {
    "text": "do is say aha I'll just edit the doc",
    "start": "137440",
    "end": "139519"
  },
  {
    "text": "string um in the init of the parent",
    "start": "139519",
    "end": "141800"
  },
  {
    "text": "class and then that'll fix everything so",
    "start": "141800",
    "end": "143400"
  },
  {
    "text": "you go um and uh you know for each of",
    "start": "143400",
    "end": "146920"
  },
  {
    "text": "your functions in this case it's just my",
    "start": "146920",
    "end": "148680"
  },
  {
    "text": "funk but if you had more you could do",
    "start": "148680",
    "end": "150800"
  },
  {
    "text": "more um uh you know look up the class",
    "start": "150800",
    "end": "154160"
  },
  {
    "text": "name and edit the doc string so that",
    "start": "154160",
    "end": "156319"
  },
  {
    "text": "it's prefixed with class Name colon dock",
    "start": "156319",
    "end": "158840"
  },
  {
    "text": "string um unfortunately this doesn't",
    "start": "158840",
    "end": "161560"
  },
  {
    "text": "actually work um because the doc strings",
    "start": "161560",
    "end": "164200"
  },
  {
    "text": "for class methods are uh not writable",
    "start": "164200",
    "end": "167120"
  },
  {
    "text": "you can't change them after the class",
    "start": "167120",
    "end": "169120"
  },
  {
    "text": "has been created um so it doesn't work",
    "start": "169120",
    "end": "171040"
  },
  {
    "text": "to just edit them in a it you need to do",
    "start": "171040",
    "end": "172840"
  },
  {
    "text": "something a little bit um more",
    "start": "172840",
    "end": "175319"
  },
  {
    "text": "fancy um uh I'll note that in general",
    "start": "175319",
    "end": "178800"
  },
  {
    "text": "doc strings are right able for for",
    "start": "178800",
    "end": "180959"
  },
  {
    "text": "functions if you just have any you know",
    "start": "180959",
    "end": "183239"
  },
  {
    "text": "random function that is fine but it's in",
    "start": "183239",
    "end": "185680"
  },
  {
    "text": "particular um methods the do strings",
    "start": "185680",
    "end": "188120"
  },
  {
    "text": "aren't rable so um this is like specific",
    "start": "188120",
    "end": "190799"
  },
  {
    "text": "problem to classes in particular um so",
    "start": "190799",
    "end": "195120"
  },
  {
    "text": "is there a way that we can perhaps maybe",
    "start": "195120",
    "end": "196879"
  },
  {
    "text": "change the doc string before the",
    "start": "196879",
    "end": "199120"
  },
  {
    "text": "function becomes a method um and the",
    "start": "199120",
    "end": "201239"
  },
  {
    "start": "201000",
    "end": "247000"
  },
  {
    "text": "answer is yes um so but to take a step",
    "start": "201239",
    "end": "205400"
  },
  {
    "text": "back for a moment um uh and just sort of",
    "start": "205400",
    "end": "208040"
  },
  {
    "text": "give a brief refresher on um the basics",
    "start": "208040",
    "end": "211280"
  },
  {
    "text": "of classes um so what's a Class A Class",
    "start": "211280",
    "end": "214040"
  },
  {
    "text": "is just a special type of object um that",
    "start": "214040",
    "end": "216120"
  },
  {
    "text": "creates other objects and those other",
    "start": "216120",
    "end": "217920"
  },
  {
    "text": "objects are called instances um uh",
    "start": "217920",
    "end": "220680"
  },
  {
    "text": "remember that everything in Python is an",
    "start": "220680",
    "end": "222159"
  },
  {
    "text": "object if you haven't heard that before",
    "start": "222159",
    "end": "224360"
  },
  {
    "text": "um now you have everything in Python is",
    "start": "224360",
    "end": "226159"
  },
  {
    "text": "an object um um that's the most",
    "start": "226159",
    "end": "229560"
  },
  {
    "text": "important thing to remember from this",
    "start": "229560",
    "end": "230840"
  },
  {
    "text": "talk is everything in Python is an",
    "start": "230840",
    "end": "232200"
  },
  {
    "text": "object so you all objects act basically",
    "start": "232200",
    "end": "234439"
  },
  {
    "text": "the same um uh and so uh to give sort of",
    "start": "234439",
    "end": "238280"
  },
  {
    "text": "a real world example that I like to use",
    "start": "238280",
    "end": "240720"
  },
  {
    "text": "is that a class is sort of like a",
    "start": "240720",
    "end": "242319"
  },
  {
    "text": "particular you know government form a",
    "start": "242319",
    "end": "244040"
  },
  {
    "text": "tax form like the you know 1040 um and",
    "start": "244040",
    "end": "246799"
  },
  {
    "text": "then an instance would be your",
    "start": "246799",
    "end": "248200"
  },
  {
    "text": "particular version of that taxt form",
    "start": "248200",
    "end": "249799"
  },
  {
    "text": "with all of your information written out",
    "start": "249799",
    "end": "251239"
  },
  {
    "text": "on it um and uh so uh we can ask python",
    "start": "251239",
    "end": "256639"
  },
  {
    "text": "what uh what flavor um of object a",
    "start": "256639",
    "end": "260280"
  },
  {
    "text": "particular instance is what type what",
    "start": "260280",
    "end": "262040"
  },
  {
    "text": "class it is um we use that using this um",
    "start": "262040",
    "end": "264520"
  },
  {
    "text": "type function um and so here it'll tell",
    "start": "264520",
    "end": "267000"
  },
  {
    "text": "us that a in um is of type A um which is",
    "start": "267000",
    "end": "270240"
  },
  {
    "text": "what we would expect because we created",
    "start": "270240",
    "end": "271840"
  },
  {
    "text": "it from a um but again everything in",
    "start": "271840",
    "end": "275720"
  },
  {
    "text": "Python is an object so therefore classes",
    "start": "275720",
    "end": "278320"
  },
  {
    "text": "should have types too um and in fact if",
    "start": "278320",
    "end": "280800"
  },
  {
    "text": "we look at what the class or the type of",
    "start": "280800",
    "end": "282600"
  },
  {
    "text": "a is we see that it is a type type um",
    "start": "282600",
    "end": "285960"
  },
  {
    "text": "this is kind of confusing because um a",
    "start": "285960",
    "end": "288840"
  },
  {
    "text": "lot of people use the term type in sort",
    "start": "288840",
    "end": "290759"
  },
  {
    "text": "of a general sense um but in Python",
    "start": "290759",
    "end": "293000"
  },
  {
    "text": "there's also this specific term of type",
    "start": "293000",
    "end": "296199"
  },
  {
    "text": "um and to make it even more confusing",
    "start": "296199",
    "end": "298440"
  },
  {
    "start": "297000",
    "end": "328000"
  },
  {
    "text": "there's sort of like three different",
    "start": "298440",
    "end": "299280"
  },
  {
    "text": "ways that type can be used so um first",
    "start": "299280",
    "end": "301880"
  },
  {
    "text": "of all type will just denote like the",
    "start": "301880",
    "end": "304840"
  },
  {
    "text": "flavor of object that it is um uh that",
    "start": "304840",
    "end": "308240"
  },
  {
    "text": "is to say like the type of what a class",
    "start": "308240",
    "end": "311160"
  },
  {
    "text": "is um you can also use type as a",
    "start": "311160",
    "end": "313440"
  },
  {
    "text": "function to tell you what uh type of of",
    "start": "313440",
    "end": "316680"
  },
  {
    "text": "particular instances that you have which",
    "start": "316680",
    "end": "318199"
  },
  {
    "text": "is probably how you've seen it used",
    "start": "318199",
    "end": "319360"
  },
  {
    "text": "before and finally you can use type to",
    "start": "319360",
    "end": "321479"
  },
  {
    "text": "create new classes um um and that's the",
    "start": "321479",
    "end": "324000"
  },
  {
    "text": "interesting part that uh I'm going to be",
    "start": "324000",
    "end": "326360"
  },
  {
    "text": "getting more into now so um so how do",
    "start": "326360",
    "end": "330039"
  },
  {
    "start": "328000",
    "end": "373000"
  },
  {
    "text": "you create a class on the Fly you use",
    "start": "330039",
    "end": "331560"
  },
  {
    "text": "type um this is how you've probably seen",
    "start": "331560",
    "end": "334000"
  },
  {
    "text": "classes um instantiated before um",
    "start": "334000",
    "end": "337120"
  },
  {
    "text": "probably you haven't seen them",
    "start": "337120",
    "end": "338160"
  },
  {
    "text": "instantiated in a different way um but",
    "start": "338160",
    "end": "340120"
  },
  {
    "text": "you can using type it takes three",
    "start": "340120",
    "end": "342560"
  },
  {
    "text": "parameters um the first one is just the",
    "start": "342560",
    "end": "344479"
  },
  {
    "text": "name of the class the second is a list",
    "start": "344479",
    "end": "346960"
  },
  {
    "text": "of U base classes or parent classes so",
    "start": "346960",
    "end": "349120"
  },
  {
    "text": "that's equivalent to um what you would",
    "start": "349120",
    "end": "351280"
  },
  {
    "text": "put here up in the parenthesis um and",
    "start": "351280",
    "end": "353759"
  },
  {
    "text": "the final one is a dictionary of the",
    "start": "353759",
    "end": "355639"
  },
  {
    "text": "attributes um that the class will take",
    "start": "355639",
    "end": "357680"
  },
  {
    "text": "and so in this particular case I just",
    "start": "357680",
    "end": "359800"
  },
  {
    "text": "have the attribute for my funk um but if",
    "start": "359800",
    "end": "361880"
  },
  {
    "text": "you wanted to have other variables or",
    "start": "361880",
    "end": "363479"
  },
  {
    "text": "methods Etc um you'd put them in that",
    "start": "363479",
    "end": "365680"
  },
  {
    "text": "dictionary so you just pass those three",
    "start": "365680",
    "end": "367319"
  },
  {
    "text": "arguments and voila you have a class you",
    "start": "367319",
    "end": "369560"
  },
  {
    "text": "don't need to use the special like class",
    "start": "369560",
    "end": "371400"
  },
  {
    "text": "syntax to do",
    "start": "371400",
    "end": "373160"
  },
  {
    "start": "373000",
    "end": "420000"
  },
  {
    "text": "it um okay so now that we know how to",
    "start": "373160",
    "end": "376199"
  },
  {
    "text": "create a class on the Fly maybe we can",
    "start": "376199",
    "end": "377840"
  },
  {
    "text": "try this again see if we can get our doc",
    "start": "377840",
    "end": "379440"
  },
  {
    "text": "strings Rewritten um so um I I'm created",
    "start": "379440",
    "end": "383880"
  },
  {
    "text": "a function here called make class which",
    "start": "383880",
    "end": "386199"
  },
  {
    "text": "has the same signature as the type",
    "start": "386199",
    "end": "388039"
  },
  {
    "text": "function but um before it actually calls",
    "start": "388039",
    "end": "390520"
  },
  {
    "text": "type it goes through each of the U",
    "start": "390520",
    "end": "392800"
  },
  {
    "text": "methods that are passed in and uh",
    "start": "392800",
    "end": "395199"
  },
  {
    "text": "rewrites them to again be prefixed with",
    "start": "395199",
    "end": "396960"
  },
  {
    "text": "the class name um so uh we can call this",
    "start": "396960",
    "end": "400639"
  },
  {
    "text": "um make class A and make class B but um",
    "start": "400639",
    "end": "403800"
  },
  {
    "text": "unfortunately this isn't exactly what we",
    "start": "403800",
    "end": "405880"
  },
  {
    "text": "wanted um what we see is that uh when we",
    "start": "405880",
    "end": "408919"
  },
  {
    "text": "print the dock string of my funk for a",
    "start": "408919",
    "end": "411479"
  },
  {
    "text": "it is in fact prefixed with the a colon",
    "start": "411479",
    "end": "413759"
  },
  {
    "text": "which is what we wanted but then B is B",
    "start": "413759",
    "end": "415440"
  },
  {
    "text": "colon a colon um so how did that happen",
    "start": "415440",
    "end": "418840"
  },
  {
    "text": "um the answer is that uh both of those",
    "start": "418840",
    "end": "422280"
  },
  {
    "start": "420000",
    "end": "461000"
  },
  {
    "text": "classes A and B were using the same",
    "start": "422280",
    "end": "424000"
  },
  {
    "text": "function in memory so uh when you uh",
    "start": "424000",
    "end": "427840"
  },
  {
    "text": "first rewrote the one for a it prefixed",
    "start": "427840",
    "end": "429960"
  },
  {
    "text": "it with Aon and then you rewrote the",
    "start": "429960",
    "end": "431560"
  },
  {
    "text": "same doc string a second time um and got",
    "start": "431560",
    "end": "434840"
  },
  {
    "text": "B colon Aon um and so if you actually",
    "start": "434840",
    "end": "437080"
  },
  {
    "text": "use is which does um equality um in",
    "start": "437080",
    "end": "439960"
  },
  {
    "text": "memory um it'll show you that those two",
    "start": "439960",
    "end": "442000"
  },
  {
    "text": "functions are exactly the same um so can",
    "start": "442000",
    "end": "445919"
  },
  {
    "text": "we um uh get around this by perhaps",
    "start": "445919",
    "end": "449639"
  },
  {
    "text": "making them not be the same function um",
    "start": "449639",
    "end": "451879"
  },
  {
    "text": "so again everything in Python is an",
    "start": "451879",
    "end": "454039"
  },
  {
    "text": "object so we can also create functions",
    "start": "454039",
    "end": "456879"
  },
  {
    "text": "on the Fly functions also have a type",
    "start": "456879",
    "end": "459120"
  },
  {
    "text": "which is the function type um so here's",
    "start": "459120",
    "end": "462639"
  },
  {
    "start": "461000",
    "end": "542000"
  },
  {
    "text": "a uh function that takes a function as",
    "start": "462639",
    "end": "465560"
  },
  {
    "text": "an argument and then copies the function",
    "start": "465560",
    "end": "467440"
  },
  {
    "text": "and Returns the copy of the function um",
    "start": "467440",
    "end": "469879"
  },
  {
    "text": "you don't need to worry about too much",
    "start": "469879",
    "end": "471360"
  },
  {
    "text": "about the details of how this works um",
    "start": "471360",
    "end": "473879"
  },
  {
    "text": "this is really getting into like the",
    "start": "473879",
    "end": "475759"
  },
  {
    "text": "internals of python actually the first",
    "start": "475759",
    "end": "477440"
  },
  {
    "text": "argument that it takes is like the",
    "start": "477440",
    "end": "478720"
  },
  {
    "text": "compiled B code for the function um uh",
    "start": "478720",
    "end": "482840"
  },
  {
    "text": "so um it uh yeah don't worry too much",
    "start": "482840",
    "end": "486319"
  },
  {
    "text": "about like the specifics there just know",
    "start": "486319",
    "end": "488400"
  },
  {
    "text": "that you can actually um duplicate",
    "start": "488400",
    "end": "490440"
  },
  {
    "text": "functions um so we have this um all",
    "start": "490440",
    "end": "493440"
  },
  {
    "text": "right so we'll take my funk and we'll",
    "start": "493440",
    "end": "495000"
  },
  {
    "text": "copy it to create my new funk um and",
    "start": "495000",
    "end": "497240"
  },
  {
    "text": "then change the doc string for my new",
    "start": "497240",
    "end": "498720"
  },
  {
    "text": "funk um and we print out the doc strings",
    "start": "498720",
    "end": "501039"
  },
  {
    "text": "and it is in fact modified second one is",
    "start": "501039",
    "end": "503199"
  },
  {
    "text": "the first one isn't so this seems to be",
    "start": "503199",
    "end": "504879"
  },
  {
    "text": "the behavior that we want um so um take",
    "start": "504879",
    "end": "508240"
  },
  {
    "text": "three now we'll try it again",
    "start": "508240",
    "end": "510000"
  },
  {
    "text": "we're going to modify our make class",
    "start": "510000",
    "end": "511960"
  },
  {
    "text": "function to before modifying the doc",
    "start": "511960",
    "end": "514479"
  },
  {
    "text": "string also copy the function that it's",
    "start": "514479",
    "end": "516479"
  },
  {
    "text": "been given um and then uh create the",
    "start": "516479",
    "end": "520360"
  },
  {
    "text": "class using these new copied functions",
    "start": "520360",
    "end": "522800"
  },
  {
    "text": "and hopefully this should work um and in",
    "start": "522800",
    "end": "525240"
  },
  {
    "text": "fact it does so um here we have we're",
    "start": "525240",
    "end": "528200"
  },
  {
    "text": "making Class A making Class B they both",
    "start": "528200",
    "end": "530200"
  },
  {
    "text": "take my funk which are the same object",
    "start": "530200",
    "end": "532240"
  },
  {
    "text": "but because this make class function now",
    "start": "532240",
    "end": "534160"
  },
  {
    "text": "copies the functions um we get different",
    "start": "534160",
    "end": "536800"
  },
  {
    "text": "doc strings for the two different",
    "start": "536800",
    "end": "538240"
  },
  {
    "text": "methods um so all right so um you might",
    "start": "538240",
    "end": "543399"
  },
  {
    "start": "542000",
    "end": "638000"
  },
  {
    "text": "be wondering why I haven't mentioned",
    "start": "543399",
    "end": "544720"
  },
  {
    "text": "meta classes in a while given that this",
    "start": "544720",
    "end": "546160"
  },
  {
    "text": "is a talk on meta classes um but",
    "start": "546160",
    "end": "549160"
  },
  {
    "text": "actually the whole time I've been",
    "start": "549160",
    "end": "550560"
  },
  {
    "text": "talking about meta classes so a meta",
    "start": "550560",
    "end": "552680"
  },
  {
    "text": "class is just any cable which means a",
    "start": "552680",
    "end": "554720"
  },
  {
    "text": "function or a class that has a a call",
    "start": "554720",
    "end": "557200"
  },
  {
    "text": "method um well technically meta class",
    "start": "557200",
    "end": "560600"
  },
  {
    "text": "uses new but anyways um uh it's any",
    "start": "560600",
    "end": "564079"
  },
  {
    "text": "callable that takes the parameters for",
    "start": "564079",
    "end": "566040"
  },
  {
    "text": "the class's name um the class's bases",
    "start": "566040",
    "end": "568079"
  },
  {
    "text": "and the class's attributes um and so",
    "start": "568079",
    "end": "569920"
  },
  {
    "text": "type um that we were using to create",
    "start": "569920",
    "end": "571800"
  },
  {
    "text": "classes before is just basically the",
    "start": "571800",
    "end": "574720"
  },
  {
    "text": "default meta class um it just that's",
    "start": "574720",
    "end": "576680"
  },
  {
    "text": "what happens under the scenes you never",
    "start": "576680",
    "end": "578079"
  },
  {
    "text": "see it so you never have to worry about",
    "start": "578079",
    "end": "579880"
  },
  {
    "text": "it um and the function that we've been",
    "start": "579880",
    "end": "583000"
  },
  {
    "text": "developing this make class function is",
    "start": "583000",
    "end": "584640"
  },
  {
    "text": "technically a meta class too I know it's",
    "start": "584640",
    "end": "586680"
  },
  {
    "text": "confusing because that's a function not",
    "start": "586680",
    "end": "588000"
  },
  {
    "text": "a not not a class but um uh and so what",
    "start": "588000",
    "end": "592160"
  },
  {
    "text": "makes this a meta class again it takes",
    "start": "592160",
    "end": "593880"
  },
  {
    "text": "these three Arguments for the name bases",
    "start": "593880",
    "end": "595600"
  },
  {
    "text": "and attributes um it then modifies those",
    "start": "595600",
    "end": "598200"
  },
  {
    "text": "attributes um um um specifically in this",
    "start": "598200",
    "end": "601440"
  },
  {
    "text": "particular instance by creating copies",
    "start": "601440",
    "end": "603079"
  },
  {
    "text": "of the functions and then modifying",
    "start": "603079",
    "end": "604399"
  },
  {
    "text": "their doc strings um it then creates a",
    "start": "604399",
    "end": "606399"
  },
  {
    "text": "new class using these modified",
    "start": "606399",
    "end": "607720"
  },
  {
    "text": "attributes and returns to the new class",
    "start": "607720",
    "end": "610120"
  },
  {
    "text": "that's all a meta class does is it you",
    "start": "610120",
    "end": "612360"
  },
  {
    "text": "know intervenes on class creation time",
    "start": "612360",
    "end": "615720"
  },
  {
    "text": "um makes some adjustments and then so",
    "start": "615720",
    "end": "618680"
  },
  {
    "text": "the class that's returned is slightly",
    "start": "618680",
    "end": "620360"
  },
  {
    "text": "different um than it otherwise would",
    "start": "620360",
    "end": "622920"
  },
  {
    "text": "be um so um so now python has some",
    "start": "622920",
    "end": "628480"
  },
  {
    "text": "special syntax that we can use so we",
    "start": "628480",
    "end": "630360"
  },
  {
    "text": "don't actually have to um uh so if I go",
    "start": "630360",
    "end": "635320"
  },
  {
    "text": "back to",
    "start": "635320",
    "end": "637920"
  },
  {
    "text": "um so we don't have to necessarily make",
    "start": "637920",
    "end": "640399"
  },
  {
    "start": "638000",
    "end": "649000"
  },
  {
    "text": "classes like this we can still use our",
    "start": "640399",
    "end": "641880"
  },
  {
    "text": "nice like class class name parentheses",
    "start": "641880",
    "end": "644560"
  },
  {
    "text": "colon syntax um that we're used to we",
    "start": "644560",
    "end": "646720"
  },
  {
    "text": "don't have to do it like that um that's",
    "start": "646720",
    "end": "648320"
  },
  {
    "text": "a special syntax to do that um oops um",
    "start": "648320",
    "end": "652760"
  },
  {
    "start": "649000",
    "end": "676000"
  },
  {
    "text": "but python creates classes a slightly",
    "start": "652760",
    "end": "654440"
  },
  {
    "text": "more complex way than the way that we've",
    "start": "654440",
    "end": "656079"
  },
  {
    "text": "been doing it in addition to the my funk",
    "start": "656079",
    "end": "659120"
  },
  {
    "text": "um or whatever attributes you define",
    "start": "659120",
    "end": "660519"
  },
  {
    "text": "it'll pass in special ones like",
    "start": "660519",
    "end": "662440"
  },
  {
    "text": "underscore underscore in it underscore",
    "start": "662440",
    "end": "664040"
  },
  {
    "text": "underscore and various variables too so",
    "start": "664040",
    "end": "667200"
  },
  {
    "text": "we just I'm just adding to the for Loop",
    "start": "667200",
    "end": "669200"
  },
  {
    "text": "here to um skip special methods and non-",
    "start": "669200",
    "end": "672560"
  },
  {
    "text": "functions so we're not going to touch",
    "start": "672560",
    "end": "674600"
  },
  {
    "text": "those um and then um here's the",
    "start": "674600",
    "end": "677399"
  },
  {
    "start": "676000",
    "end": "723000"
  },
  {
    "text": "syntactic sugar which is just you add",
    "start": "677399",
    "end": "679360"
  },
  {
    "text": "this attribute called underscore",
    "start": "679360",
    "end": "680680"
  },
  {
    "text": "underscore meta class underscore",
    "start": "680680",
    "end": "681839"
  },
  {
    "text": "underscore um you set it to whatever",
    "start": "681839",
    "end": "683959"
  },
  {
    "text": "your meta classes that you want it to be",
    "start": "683959",
    "end": "685519"
  },
  {
    "text": "so in this case our make class function",
    "start": "685519",
    "end": "688120"
  },
  {
    "text": "um and it just um that's when the class",
    "start": "688120",
    "end": "691519"
  },
  {
    "text": "is created um that's basically like when",
    "start": "691519",
    "end": "694600"
  },
  {
    "text": "you you know import the module or you",
    "start": "694600",
    "end": "696800"
  },
  {
    "text": "run that python file the class is",
    "start": "696800",
    "end": "698639"
  },
  {
    "text": "created um and The Meta class goes",
    "start": "698639",
    "end": "701079"
  },
  {
    "text": "through um modifies the class and so",
    "start": "701079",
    "end": "703440"
  },
  {
    "text": "when you actually create an instance of",
    "start": "703440",
    "end": "704600"
  },
  {
    "text": "the class and check the function you see",
    "start": "704600",
    "end": "707040"
  },
  {
    "text": "that the doc string is modified um note",
    "start": "707040",
    "end": "709600"
  },
  {
    "text": "that this is slightly different in",
    "start": "709600",
    "end": "711120"
  },
  {
    "text": "Python 3 um the syntax is a little bit",
    "start": "711120",
    "end": "713760"
  },
  {
    "text": "different um this is for python 27 um",
    "start": "713760",
    "end": "716839"
  },
  {
    "text": "but uh I'll be posting these slides",
    "start": "716839",
    "end": "718399"
  },
  {
    "text": "online um you can look up what the",
    "start": "718399",
    "end": "720120"
  },
  {
    "text": "syntax is for Python",
    "start": "720120",
    "end": "721680"
  },
  {
    "text": "3 um okay so just to take a step back",
    "start": "721680",
    "end": "726120"
  },
  {
    "start": "723000",
    "end": "758000"
  },
  {
    "text": "what exactly was it that we did um um",
    "start": "726120",
    "end": "729120"
  },
  {
    "text": "I.E getting meta about metac classes um",
    "start": "729120",
    "end": "732360"
  },
  {
    "text": "so uh again metac classes intervene on",
    "start": "732360",
    "end": "735320"
  },
  {
    "text": "um the class creation again that's class",
    "start": "735320",
    "end": "737839"
  },
  {
    "text": "not instance so it's the thing that",
    "start": "737839",
    "end": "739440"
  },
  {
    "text": "creates instances we're changing that",
    "start": "739440",
    "end": "741480"
  },
  {
    "text": "thing um uh and because we're able to",
    "start": "741480",
    "end": "744519"
  },
  {
    "text": "intervene on class creation um we can U",
    "start": "744519",
    "end": "747839"
  },
  {
    "text": "make some changes and in this particular",
    "start": "747839",
    "end": "750000"
  },
  {
    "text": "case we copied the functions changed",
    "start": "750000",
    "end": "751800"
  },
  {
    "text": "their doc strings um and then we finally",
    "start": "751800",
    "end": "754079"
  },
  {
    "text": "created the class using those um",
    "start": "754079",
    "end": "757519"
  },
  {
    "text": "modifications um a quick side note um if",
    "start": "757519",
    "end": "760480"
  },
  {
    "start": "758000",
    "end": "818000"
  },
  {
    "text": "you were to run the code that I actually",
    "start": "760480",
    "end": "761839"
  },
  {
    "text": "gave you and and try to do the sub",
    "start": "761839",
    "end": "763639"
  },
  {
    "text": "classing thing it doesn't actually still",
    "start": "763639",
    "end": "765760"
  },
  {
    "text": "quite work but the reason is kind of a",
    "start": "765760",
    "end": "768000"
  },
  {
    "text": "stupid reason that I don't didn't want",
    "start": "768000",
    "end": "769600"
  },
  {
    "text": "to get into the details for basically",
    "start": "769600",
    "end": "771519"
  },
  {
    "text": "you need to the my funk is not an",
    "start": "771519",
    "end": "774920"
  },
  {
    "text": "attribute that you would pass into B um",
    "start": "774920",
    "end": "777279"
  },
  {
    "text": "because it's already an attribute of a",
    "start": "777279",
    "end": "778760"
  },
  {
    "text": "which is the super class so in order to",
    "start": "778760",
    "end": "780480"
  },
  {
    "text": "make this work you'd have to go through",
    "start": "780480",
    "end": "782120"
  },
  {
    "text": "manually all of the attributes of all of",
    "start": "782120",
    "end": "784880"
  },
  {
    "text": "the parent classes um I have all of the",
    "start": "784880",
    "end": "787680"
  },
  {
    "text": "code on um the blog post that inspired",
    "start": "787680",
    "end": "790320"
  },
  {
    "text": "this talk um so you can go look at it if",
    "start": "790320",
    "end": "792600"
  },
  {
    "text": "you really want to but I think the cool",
    "start": "792600",
    "end": "794360"
  },
  {
    "text": "part um at all was that you're able to",
    "start": "794360",
    "end": "796480"
  },
  {
    "text": "rewrite the doc strings um for the",
    "start": "796480",
    "end": "798399"
  },
  {
    "text": "methods that are part of the class",
    "start": "798399",
    "end": "800240"
  },
  {
    "text": "originally um so that's a um fairly",
    "start": "800240",
    "end": "804120"
  },
  {
    "text": "simple example of what you might use a",
    "start": "804120",
    "end": "805839"
  },
  {
    "text": "meta class for um you'll find other",
    "start": "805839",
    "end": "808040"
  },
  {
    "text": "instances of people using meta classes",
    "start": "808040",
    "end": "810480"
  },
  {
    "text": "um one really commonly cited example is",
    "start": "810480",
    "end": "812680"
  },
  {
    "text": "that um jeno uses meta classes to sort",
    "start": "812680",
    "end": "815040"
  },
  {
    "text": "of simplify the interface so if you",
    "start": "815040",
    "end": "817199"
  },
  {
    "text": "create a um for example a person class",
    "start": "817199",
    "end": "820079"
  },
  {
    "text": "which is um a so forgive me if I get",
    "start": "820079",
    "end": "823399"
  },
  {
    "text": "this wrong I haven't used Jango in a",
    "start": "823399",
    "end": "824760"
  },
  {
    "text": "long time but um uh if you create a",
    "start": "824760",
    "end": "828040"
  },
  {
    "text": "person which is supposed to be a model",
    "start": "828040",
    "end": "829720"
  },
  {
    "text": "for like an interface to your um",
    "start": "829720",
    "end": "831399"
  },
  {
    "text": "database or um to represent uh you know",
    "start": "831399",
    "end": "834959"
  },
  {
    "text": "various uh like a character field",
    "start": "834959",
    "end": "836720"
  },
  {
    "text": "integer field on your website um",
    "start": "836720",
    "end": "839680"
  },
  {
    "text": "if you create that class and then you",
    "start": "839680",
    "end": "841120"
  },
  {
    "text": "actually create an instance of the class",
    "start": "841120",
    "end": "842920"
  },
  {
    "text": "you'll find that the attributes aren't",
    "start": "842920",
    "end": "844800"
  },
  {
    "text": "these like fancy um character field or",
    "start": "844800",
    "end": "847079"
  },
  {
    "text": "integer field um uh types they'll just",
    "start": "847079",
    "end": "850360"
  },
  {
    "text": "be like integers or strings um uh so it",
    "start": "850360",
    "end": "853639"
  },
  {
    "text": "makes it a little bit easier to work",
    "start": "853639",
    "end": "855079"
  },
  {
    "text": "with these classes um as a user um and",
    "start": "855079",
    "end": "858639"
  },
  {
    "text": "all of the fancy um stuff underneath is",
    "start": "858639",
    "end": "861519"
  },
  {
    "text": "handled by this meta class rewriting",
    "start": "861519",
    "end": "863519"
  },
  {
    "text": "these",
    "start": "863519",
    "end": "864240"
  },
  {
    "text": "attributes um and uh the source from",
    "start": "864240",
    "end": "866759"
  },
  {
    "text": "this is this really great um stock",
    "start": "866759",
    "end": "869320"
  },
  {
    "text": "overflow answer which I highly encourage",
    "start": "869320",
    "end": "871160"
  },
  {
    "text": "you to go look if you you know want to",
    "start": "871160",
    "end": "873279"
  },
  {
    "text": "find out more about this um so a word of",
    "start": "873279",
    "end": "877759"
  },
  {
    "start": "875000",
    "end": "913000"
  },
  {
    "text": "caution which is that um meta classes",
    "start": "877759",
    "end": "880600"
  },
  {
    "text": "can be really hard they can make your",
    "start": "880600",
    "end": "882639"
  },
  {
    "text": "code really hard to understand like I",
    "start": "882639",
    "end": "884880"
  },
  {
    "text": "get confused going back and looking at",
    "start": "884880",
    "end": "886399"
  },
  {
    "text": "my code that uses meta classes um and I",
    "start": "886399",
    "end": "888720"
  },
  {
    "text": "wrote the code so if someone else is",
    "start": "888720",
    "end": "890839"
  },
  {
    "text": "going to go read your code um like",
    "start": "890839",
    "end": "893680"
  },
  {
    "text": "really there you know there are there",
    "start": "893680",
    "end": "896839"
  },
  {
    "text": "are instances when meta classes are very",
    "start": "896839",
    "end": "898519"
  },
  {
    "text": "useful um but you really should only use",
    "start": "898519",
    "end": "901160"
  },
  {
    "text": "metac classes if you absolutely really",
    "start": "901160",
    "end": "903240"
  },
  {
    "text": "really need to use them um and there's",
    "start": "903240",
    "end": "905560"
  },
  {
    "text": "this great great quote um that's",
    "start": "905560",
    "end": "907440"
  },
  {
    "text": "attributed to Tim Peters who's a uh he",
    "start": "907440",
    "end": "910000"
  },
  {
    "text": "wrote like the Zen of python um uh metac",
    "start": "910000",
    "end": "913120"
  },
  {
    "start": "913000",
    "end": "954000"
  },
  {
    "text": "classes are deeper magic than 99% of",
    "start": "913120",
    "end": "915199"
  },
  {
    "text": "users should ever worry about if you",
    "start": "915199",
    "end": "916959"
  },
  {
    "text": "wonder whether you need them you don't",
    "start": "916959",
    "end": "919120"
  },
  {
    "text": "um the people who actually need them",
    "start": "919120",
    "end": "921120"
  },
  {
    "text": "know with certainty that they need them",
    "start": "921120",
    "end": "922519"
  },
  {
    "text": "and they don't need an explanation about",
    "start": "922519",
    "end": "923920"
  },
  {
    "text": "why um uh I think that this is true",
    "start": "923920",
    "end": "926519"
  },
  {
    "text": "though unless you're like me and you",
    "start": "926519",
    "end": "927639"
  },
  {
    "text": "just like kind of playing around with",
    "start": "927639",
    "end": "929079"
  },
  {
    "text": "the you know obscure parts of python um",
    "start": "929079",
    "end": "931759"
  },
  {
    "text": "and coming up with a reason to try to",
    "start": "931759",
    "end": "933440"
  },
  {
    "text": "play around with this um I so I think",
    "start": "933440",
    "end": "936519"
  },
  {
    "text": "like the the takeaway from this is I",
    "start": "936519",
    "end": "939120"
  },
  {
    "text": "totally encourage people to play around",
    "start": "939120",
    "end": "940959"
  },
  {
    "text": "with their own code um find out about",
    "start": "940959",
    "end": "943160"
  },
  {
    "text": "cool things like this um but if you're",
    "start": "943160",
    "end": "945399"
  },
  {
    "text": "actually working on you know code that's",
    "start": "945399",
    "end": "947000"
  },
  {
    "text": "going to be used by people and read by",
    "start": "947000",
    "end": "949120"
  },
  {
    "text": "people don't use meta classes unless you",
    "start": "949120",
    "end": "951440"
  },
  {
    "text": "are certain that's the thing you need to",
    "start": "951440",
    "end": "953600"
  },
  {
    "text": "be using um so that's it um like I said",
    "start": "953600",
    "end": "957279"
  },
  {
    "start": "954000",
    "end": "1159000"
  },
  {
    "text": "I'm going to be posting these slides um",
    "start": "957279",
    "end": "959040"
  },
  {
    "text": "so if you want to go back and look at",
    "start": "959040",
    "end": "960839"
  },
  {
    "text": "the examples and stuff that I gave um",
    "start": "960839",
    "end": "963040"
  },
  {
    "text": "you can just go to my website which is",
    "start": "963040",
    "end": "964519"
  },
  {
    "text": "jammer.com um and also this presentation",
    "start": "964519",
    "end": "967680"
  },
  {
    "text": "was created with IPython notebook which",
    "start": "967680",
    "end": "969560"
  },
  {
    "text": "is awesome um and just automatically",
    "start": "969560",
    "end": "972199"
  },
  {
    "text": "renders all of the Python code Etc um",
    "start": "972199",
    "end": "974519"
  },
  {
    "text": "it's great for uh slides and everything",
    "start": "974519",
    "end": "976880"
  },
  {
    "text": "else but",
    "start": "976880",
    "end": "979839"
  },
  {
    "text": "thanks okay that's a lot to think about",
    "start": "985199",
    "end": "987639"
  },
  {
    "text": "what questions do we have for",
    "start": "987639",
    "end": "989639"
  },
  {
    "text": "just ju just out of curiosity have you",
    "start": "989639",
    "end": "992360"
  },
  {
    "text": "looked at class decorators yes so I meta",
    "start": "992360",
    "end": "996560"
  },
  {
    "text": "classes make my eyes cross class",
    "start": "996560",
    "end": "998040"
  },
  {
    "text": "decorators like seem pretty obvious but",
    "start": "998040",
    "end": "999560"
  },
  {
    "text": "it seems like there's some some",
    "start": "999560",
    "end": "1000800"
  },
  {
    "text": "limitations are there things you can do",
    "start": "1000800",
    "end": "1002120"
  },
  {
    "text": "with meta classes you can't do with",
    "start": "1002120",
    "end": "1003240"
  },
  {
    "text": "class decorators yes so in this",
    "start": "1003240",
    "end": "1005480"
  },
  {
    "text": "particular case you could use class",
    "start": "1005480",
    "end": "1008319"
  },
  {
    "text": "decorators to to do the um doc string",
    "start": "1008319",
    "end": "1011360"
  },
  {
    "text": "rewriting but then you need to use a",
    "start": "1011360",
    "end": "1012560"
  },
  {
    "text": "decorator for every single method that",
    "start": "1012560",
    "end": "1014360"
  },
  {
    "text": "you have um which is kind of annoying um",
    "start": "1014360",
    "end": "1019560"
  },
  {
    "text": "uh so yeah this is a case in which if",
    "start": "1019560",
    "end": "1021199"
  },
  {
    "text": "you don't actually want to do it for",
    "start": "1021199",
    "end": "1022680"
  },
  {
    "text": "every single method then you need to use",
    "start": "1022680",
    "end": "1025120"
  },
  {
    "text": "something like a meta class um but in a",
    "start": "1025120",
    "end": "1027038"
  },
  {
    "text": "lot of cases absolutely decorators can",
    "start": "1027039",
    "end": "1029000"
  },
  {
    "text": "do a lot of stuff that you know like if",
    "start": "1029000",
    "end": "1032280"
  },
  {
    "text": "you think you need a meta class you",
    "start": "1032280",
    "end": "1033400"
  },
  {
    "text": "might be able to do it with something",
    "start": "1033400",
    "end": "1034360"
  },
  {
    "text": "like decorators",
    "start": "1034360",
    "end": "1036918"
  },
  {
    "text": "so uh if you have a class named c and a",
    "start": "1036919",
    "end": "1040240"
  },
  {
    "text": "method called f and you want to rename I",
    "start": "1040240",
    "end": "1042959"
  },
  {
    "text": "mean change the doc string for it you",
    "start": "1042959",
    "end": "1045120"
  },
  {
    "text": "could say c.f. im funk. do equals the",
    "start": "1045120",
    "end": "1049480"
  },
  {
    "text": "new value and so that way you can change",
    "start": "1049480",
    "end": "1051400"
  },
  {
    "text": "the doc string in place IM Funk yeah",
    "start": "1051400",
    "end": "1054640"
  },
  {
    "text": "Funk interesting okay didn't know that",
    "start": "1054640",
    "end": "1057960"
  },
  {
    "text": "thanks we have one right over",
    "start": "1057960",
    "end": "1061320"
  },
  {
    "text": "here so would you consider D jango's",
    "start": "1061360",
    "end": "1064320"
  },
  {
    "text": "usage of meta classes to be valid or a",
    "start": "1064320",
    "end": "1066720"
  },
  {
    "text": "good use case or just one that's",
    "start": "1066720",
    "end": "1069000"
  },
  {
    "text": "confusing um I think in this particular",
    "start": "1069000",
    "end": "1072240"
  },
  {
    "text": "case it",
    "start": "1072240",
    "end": "1074480"
  },
  {
    "text": "is probably a good use of meta classes",
    "start": "1074480",
    "end": "1077080"
  },
  {
    "text": "because the way that you like create",
    "start": "1077080",
    "end": "1079200"
  },
  {
    "text": "Jango classes",
    "start": "1079200",
    "end": "1082200"
  },
  {
    "text": "is at least from my experience with",
    "start": "1082200",
    "end": "1084559"
  },
  {
    "text": "Jango it's a little bit like you use it",
    "start": "1084559",
    "end": "1087679"
  },
  {
    "text": "not quite like You' use Python normally",
    "start": "1087679",
    "end": "1089679"
  },
  {
    "text": "anyways and so um",
    "start": "1089679",
    "end": "1093360"
  },
  {
    "text": "it I think it's probably fine but I I",
    "start": "1093360",
    "end": "1096200"
  },
  {
    "text": "also like don't have enough experience",
    "start": "1096200",
    "end": "1097880"
  },
  {
    "text": "with Jango to like give a confident",
    "start": "1097880",
    "end": "1101000"
  },
  {
    "text": "answer to your question um but I think",
    "start": "1101000",
    "end": "1103679"
  },
  {
    "text": "it's probably",
    "start": "1103679",
    "end": "1104919"
  },
  {
    "text": "good Adam I uh actually have a response",
    "start": "1104919",
    "end": "1108919"
  },
  {
    "text": "that question um I think that D Jango",
    "start": "1108919",
    "end": "1111440"
  },
  {
    "text": "does a good job with meta classes and",
    "start": "1111440",
    "end": "1113120"
  },
  {
    "text": "it's because if you're just using the D",
    "start": "1113120",
    "end": "1114559"
  },
  {
    "text": "Jango API normally you don't know what",
    "start": "1114559",
    "end": "1116480"
  },
  {
    "text": "uses meta classes I uh so the the advice",
    "start": "1116480",
    "end": "1120480"
  },
  {
    "text": "that you put up there is totally valid",
    "start": "1120480",
    "end": "1122520"
  },
  {
    "text": "earlier um meta metac classes are great",
    "start": "1122520",
    "end": "1126559"
  },
  {
    "text": "for doing complicated things inside of",
    "start": "1126559",
    "end": "1129440"
  },
  {
    "text": "Frameworks uh and inside of the",
    "start": "1129440",
    "end": "1132159"
  },
  {
    "text": "framework if as soon as it crosses that",
    "start": "1132159",
    "end": "1134640"
  },
  {
    "text": "that end user API you're probably doing",
    "start": "1134640",
    "end": "1136760"
  },
  {
    "text": "it wrong so you don't know they have in",
    "start": "1136760",
    "end": "1139240"
  },
  {
    "text": "Jango unless you really go into Django",
    "start": "1139240",
    "end": "1141120"
  },
  {
    "text": "internals so awesome use great",
    "start": "1141120",
    "end": "1145440"
  },
  {
    "text": "API okay thank you so much for that",
    "start": "1145640",
    "end": "1147919"
  },
  {
    "text": "great talk Jess than",
    "start": "1147919",
    "end": "1151840"
  }
]