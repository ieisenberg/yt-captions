[
  {
    "text": "hi my name is Seth lad and welcome to",
    "start": "240",
    "end": "1680"
  },
  {
    "text": "this episode of Dart tips today we",
    "start": "1680",
    "end": "3439"
  },
  {
    "text": "continue our tour of the fundamentals of",
    "start": "3439",
    "end": "4960"
  },
  {
    "text": "functions by looking at functions as",
    "start": "4960",
    "end": "6680"
  },
  {
    "text": "objects nested functions functions as",
    "start": "6680",
    "end": "8920"
  },
  {
    "text": "arguments and lexical closures get ready",
    "start": "8920",
    "end": "11559"
  },
  {
    "text": "for more functional tips about functions",
    "start": "11559",
    "end": "13240"
  },
  {
    "text": "and dart right now let's get",
    "start": "13240",
    "end": "15850"
  },
  {
    "text": "[Music]",
    "start": "15850",
    "end": "19760"
  },
  {
    "text": "started Dart is a true objectoriented",
    "start": "19760",
    "end": "22359"
  },
  {
    "text": "language so even functions or objects",
    "start": "22359",
    "end": "24119"
  },
  {
    "text": "this means functions can be assigned to",
    "start": "24119",
    "end": "25720"
  },
  {
    "text": "variables passed as arguments to other",
    "start": "25720",
    "end": "27320"
  },
  {
    "text": "functions and more to start check this",
    "start": "27320",
    "end": "29679"
  },
  {
    "text": "out function is defined in the core",
    "start": "29679",
    "end": "31320"
  },
  {
    "text": "Library as an abstract class this means",
    "start": "31320",
    "end": "33399"
  },
  {
    "text": "there's a function type and a function",
    "start": "33399",
    "end": "35239"
  },
  {
    "text": "value is a subtype of the function class",
    "start": "35239",
    "end": "38320"
  },
  {
    "text": "just like you can assign objects to",
    "start": "38320",
    "end": "39760"
  },
  {
    "text": "variables here's an example of assigning",
    "start": "39760",
    "end": "41440"
  },
  {
    "text": "a function object to a variable notice",
    "start": "41440",
    "end": "44079"
  },
  {
    "text": "how you can call the loud ify variable",
    "start": "44079",
    "end": "45800"
  },
  {
    "text": "just like a normal function you can also",
    "start": "45800",
    "end": "48680"
  },
  {
    "text": "assign an anonymous function directly to",
    "start": "48680",
    "end": "50760"
  },
  {
    "text": "a variable like this you might use this",
    "start": "50760",
    "end": "52920"
  },
  {
    "text": "technique if you want to retain a handle",
    "start": "52920",
    "end": "54559"
  },
  {
    "text": "on the function so that for example you",
    "start": "54559",
    "end": "56280"
  },
  {
    "text": "can add or remove it from some",
    "start": "56280",
    "end": "58000"
  },
  {
    "text": "collection now that you know you can",
    "start": "58000",
    "end": "60039"
  },
  {
    "text": "treat functions as objects you can start",
    "start": "60039",
    "end": "61680"
  },
  {
    "text": "to do some even more fun things here's",
    "start": "61680",
    "end": "64640"
  },
  {
    "text": "an example of filtering a list of",
    "start": "64640",
    "end": "66200"
  },
  {
    "text": "numbers down to only even numbers and",
    "start": "66200",
    "end": "68119"
  },
  {
    "text": "then printing them all out this works",
    "start": "68119",
    "end": "70159"
  },
  {
    "text": "because for each wants to be passed the",
    "start": "70159",
    "end": "71880"
  },
  {
    "text": "single function that takes a single",
    "start": "71880",
    "end": "73520"
  },
  {
    "text": "argument print just so happens to be a",
    "start": "73520",
    "end": "75720"
  },
  {
    "text": "function that takes a single argument",
    "start": "75720",
    "end": "77920"
  },
  {
    "text": "Tada building on this example let's say",
    "start": "77920",
    "end": "80360"
  },
  {
    "text": "you need to filter on a complicated",
    "start": "80360",
    "end": "82079"
  },
  {
    "text": "condition you could write the code this",
    "start": "82079",
    "end": "83880"
  },
  {
    "text": "way but yuck that's a big complicated",
    "start": "83880",
    "end": "85920"
  },
  {
    "text": "chunk of code in the middle of an",
    "start": "85920",
    "end": "87439"
  },
  {
    "text": "otherwise pretty line surely we can do",
    "start": "87439",
    "end": "89479"
  },
  {
    "text": "better",
    "start": "89479",
    "end": "91040"
  },
  {
    "text": "thanks to Dart support for nested",
    "start": "91040",
    "end": "92560"
  },
  {
    "text": "function yes we can here's an example",
    "start": "92560",
    "end": "95799"
  },
  {
    "text": "much better notice how we can create a",
    "start": "95799",
    "end": "97880"
  },
  {
    "text": "new named function inside of main which",
    "start": "97880",
    "end": "100079"
  },
  {
    "text": "itself is a function the complicated",
    "start": "100079",
    "end": "102640"
  },
  {
    "text": "check function is a nested function the",
    "start": "102640",
    "end": "105079"
  },
  {
    "text": "where for each chain is now much easier",
    "start": "105079",
    "end": "107320"
  },
  {
    "text": "to read you can Define your own",
    "start": "107320",
    "end": "109280"
  },
  {
    "text": "functions that take functions as",
    "start": "109280",
    "end": "110680"
  },
  {
    "text": "parameters here's an example notice how",
    "start": "110680",
    "end": "112880"
  },
  {
    "text": "the second parameter annotated as the",
    "start": "112880",
    "end": "114759"
  },
  {
    "text": "type function this code works but it",
    "start": "114759",
    "end": "116680"
  },
  {
    "text": "doesn't tell you much about what the",
    "start": "116680",
    "end": "118280"
  },
  {
    "text": "filter function should expect in terms",
    "start": "118280",
    "end": "120600"
  },
  {
    "text": "of arguments or what it should return",
    "start": "120600",
    "end": "123039"
  },
  {
    "text": "all we know is that it's a function we",
    "start": "123039",
    "end": "125280"
  },
  {
    "text": "generally recommend that you use type",
    "start": "125280",
    "end": "126640"
  },
  {
    "text": "annotations for the functions you expect",
    "start": "126640",
    "end": "128319"
  },
  {
    "text": "as arguments here's an example notice",
    "start": "128319",
    "end": "131000"
  },
  {
    "text": "how in this example it's clear that",
    "start": "131000",
    "end": "132640"
  },
  {
    "text": "filter should return a bull and should",
    "start": "132640",
    "end": "134760"
  },
  {
    "text": "take a single parameter ideally of type",
    "start": "134760",
    "end": "136720"
  },
  {
    "text": "int now with this extra type information",
    "start": "136720",
    "end": "139239"
  },
  {
    "text": "tools like Dart editor can give better",
    "start": "139239",
    "end": "140920"
  },
  {
    "text": "warnings if you try to pass in a filter",
    "start": "140920",
    "end": "142680"
  },
  {
    "text": "that doesn't match the description",
    "start": "142680",
    "end": "144680"
  },
  {
    "text": "before we tackle our last topic let's",
    "start": "144680",
    "end": "146400"
  },
  {
    "text": "review dart's scoping rules Dart is a",
    "start": "146400",
    "end": "148720"
  },
  {
    "text": "lexically scoped length anguage which",
    "start": "148720",
    "end": "150360"
  },
  {
    "text": "means that the scope of variables is",
    "start": "150360",
    "end": "152200"
  },
  {
    "text": "determined statically simply by the",
    "start": "152200",
    "end": "154239"
  },
  {
    "text": "layout of the code I like to think of",
    "start": "154239",
    "end": "156319"
  },
  {
    "text": "lexical scope as follow the curly braces",
    "start": "156319",
    "end": "158840"
  },
  {
    "text": "outwards here's an example of nested",
    "start": "158840",
    "end": "160680"
  },
  {
    "text": "functions with variables at each scope",
    "start": "160680",
    "end": "162519"
  },
  {
    "text": "level notice how nested function can",
    "start": "162519",
    "end": "164440"
  },
  {
    "text": "access variables at every level all the",
    "start": "164440",
    "end": "166120"
  },
  {
    "text": "way up to the top level Dart scoping",
    "start": "166120",
    "end": "168080"
  },
  {
    "text": "rules are very easy to reason about it's",
    "start": "168080",
    "end": "169879"
  },
  {
    "text": "very much what you see is what you get",
    "start": "169879",
    "end": "171720"
  },
  {
    "text": "dart's lexical scope even works with",
    "start": "171720",
    "end": "173680"
  },
  {
    "text": "this but we'll cover that in an episode",
    "start": "173680",
    "end": "175560"
  },
  {
    "text": "about classes now that we've looked at",
    "start": "175560",
    "end": "177879"
  },
  {
    "text": "lexical scope let's take a look at",
    "start": "177879",
    "end": "179400"
  },
  {
    "text": "functions as closures a closure is a",
    "start": "179400",
    "end": "181760"
  },
  {
    "text": "function object that has access to",
    "start": "181760",
    "end": "183239"
  },
  {
    "text": "variables in its lexical scope even when",
    "start": "183239",
    "end": "185599"
  },
  {
    "text": "the function is used outside of its",
    "start": "185599",
    "end": "187000"
  },
  {
    "text": "original scope closures are popular in",
    "start": "187000",
    "end": "189360"
  },
  {
    "text": "other scripting languages like",
    "start": "189360",
    "end": "190560"
  },
  {
    "text": "JavaScript and dart is no stranger to",
    "start": "190560",
    "end": "192360"
  },
  {
    "text": "lexical closures here's an example of a",
    "start": "192360",
    "end": "194360"
  },
  {
    "text": "function that closes around its variable",
    "start": "194360",
    "end": "196519"
  },
  {
    "text": "notice how make Adder has a nestic",
    "start": "196519",
    "end": "198319"
  },
  {
    "text": "function named Adder that adds two",
    "start": "198319",
    "end": "200159"
  },
  {
    "text": "numbers make adder's parameter adby is",
    "start": "200159",
    "end": "202720"
  },
  {
    "text": "lexically visible to Adder then make",
    "start": "202720",
    "end": "205159"
  },
  {
    "text": "Adder Returns the function object Adder",
    "start": "205159",
    "end": "207280"
  },
  {
    "text": "which at that moment creates a closure",
    "start": "207280",
    "end": "209239"
  },
  {
    "text": "so far so so good let's use make Adder",
    "start": "209239",
    "end": "211560"
  },
  {
    "text": "to create a new adder in this case the",
    "start": "211560",
    "end": "213400"
  },
  {
    "text": "function add two calling add two",
    "start": "213400",
    "end": "215760"
  },
  {
    "text": "function with one returns you guess it",
    "start": "215760",
    "end": "218120"
  },
  {
    "text": "three this is lexical closures in action",
    "start": "218120",
    "end": "220840"
  },
  {
    "text": "because add two closes around adby whose",
    "start": "220840",
    "end": "223480"
  },
  {
    "text": "value was originally passed to make",
    "start": "223480",
    "end": "225200"
  },
  {
    "text": "Adder to really drill this point home",
    "start": "225200",
    "end": "227640"
  },
  {
    "text": "notice how you can create more adders",
    "start": "227640",
    "end": "229239"
  },
  {
    "text": "with make Adder each one not affected by",
    "start": "229239",
    "end": "231680"
  },
  {
    "text": "the other here's an example of making an",
    "start": "231680",
    "end": "233959"
  },
  {
    "text": "Adder that adds 100 notice how add 100",
    "start": "233959",
    "end": "236560"
  },
  {
    "text": "is independent of add two Dart support",
    "start": "236560",
    "end": "239280"
  },
  {
    "text": "for Lex scope and lexical closures",
    "start": "239280",
    "end": "241640"
  },
  {
    "text": "really helps you compose your functions",
    "start": "241640",
    "end": "243079"
  },
  {
    "text": "and apps the better the composure",
    "start": "243079",
    "end": "244959"
  },
  {
    "text": "encapsulation and reusability the better",
    "start": "244959",
    "end": "247120"
  },
  {
    "text": "the code thanks for watching this",
    "start": "247120",
    "end": "248959"
  },
  {
    "text": "episode my name is Seth ladin as we say",
    "start": "248959",
    "end": "250640"
  },
  {
    "text": "here on Dart tips stay sharp click here",
    "start": "250640",
    "end": "252920"
  },
  {
    "text": "to subscribe to our channel for more",
    "start": "252920",
    "end": "254319"
  },
  {
    "text": "episodes of Dart tips we appreciate any",
    "start": "254319",
    "end": "256280"
  },
  {
    "text": "thoughts you might have for the series",
    "start": "256280",
    "end": "257600"
  },
  {
    "text": "please leave them in the comments below",
    "start": "257600",
    "end": "259759"
  },
  {
    "text": "if you have any additional questions",
    "start": "259759",
    "end": "260840"
  },
  {
    "text": "about Dart please drop by stack Overflow",
    "start": "260840",
    "end": "262880"
  },
  {
    "text": "where Dart experts are standing by to",
    "start": "262880",
    "end": "264360"
  },
  {
    "text": "help you out see you next time",
    "start": "264360",
    "end": "268120"
  }
]