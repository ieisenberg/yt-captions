[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "hi I'm Dave Smith I'm a senior Android developer with an embedded Android enthusiast and I",
    "start": "9009",
    "end": "15480"
  },
  {
    "text": "teach Android classes for new circle today I'd like to talk about the Bluetooth Low Energy or le api's they're",
    "start": "15480",
    "end": "22710"
  },
  {
    "text": "now available in the android framework and show you how easy it is to add some really interesting capabilities to",
    "start": "22710",
    "end": "28259"
  },
  {
    "text": "mobile applications using this technology Bluetooth le was introduced to the core Android framework in 4.3 or",
    "start": "28259",
    "end": "34650"
  },
  {
    "text": "API level 18 and prior to this there were several OEM specific SDKs that",
    "start": "34650",
    "end": "40140"
  },
  {
    "text": "provided the same behavior but we will not be going into detail on those here bluetooth le or but also known as",
    "start": "40140",
    "end": "46290"
  },
  {
    "text": "Bluetooth smart is part of the Bluetooth 4.0 specification aimed at providing a fast and low-power method of",
    "start": "46290",
    "end": "52890"
  },
  {
    "text": "communicating with wireless sensors and peripherals there are four primary roles that a device can fulfill in the",
    "start": "52890",
    "end": "59789"
  },
  {
    "text": "Bluetooth le paradigm a broadcaster and observer central and a peripheral device",
    "start": "59789",
    "end": "65360"
  },
  {
    "start": "65000",
    "end": "162000"
  },
  {
    "text": "we are going to look at two examples today first with the Android application acting in the central role to",
    "start": "65360",
    "end": "71550"
  },
  {
    "text": "communicate with a peripheral and second with the Android device acting as an observer role monitoring data",
    "start": "71550",
    "end": "77700"
  },
  {
    "text": "advertisements from several broadcaster devices Bluetooth le is primarily built",
    "start": "77700",
    "end": "83580"
  },
  {
    "text": "around the generic attribute profile or GATT as it is often called this profile",
    "start": "83580",
    "end": "89130"
  },
  {
    "text": "defines a structured approach to how peripherals expose their data to other devices peripheral information is",
    "start": "89130",
    "end": "96209"
  },
  {
    "text": "organized as a collection of services that describe logical functions of the device a specific sensor or feature such",
    "start": "96209",
    "end": "104039"
  },
  {
    "text": "as a thermometer or heartrate monitor would have its own service each service then has a collection of characteristics",
    "start": "104039",
    "end": "111209"
  },
  {
    "text": "to transfer discrete data values between devices a characteristic can represent service data such as the heart rate",
    "start": "111209",
    "end": "118380"
  },
  {
    "text": "value or configuration data such as weather this characteristic supports notifications when its value changes",
    "start": "118380",
    "end": "125750"
  },
  {
    "text": "characteristics then are minimally made up of property flags and a value the",
    "start": "125750",
    "end": "131340"
  },
  {
    "text": "flags describe information about a characteristics such as whether it is readable writable or supports",
    "start": "131340",
    "end": "136920"
  },
  {
    "text": "notification additionally they may contain one or more descriptor elements",
    "start": "136920",
    "end": "142050"
  },
  {
    "text": "that allow configuration of specific values or indication of the values",
    "start": "142050",
    "end": "147090"
  },
  {
    "text": "type that may provide additional configuration to that is specific to the given characteristic now if this sounds",
    "start": "147090",
    "end": "153690"
  },
  {
    "text": "like a lot of data and a lot of layers to follow fear not when you see this in a real-world example it'll probably",
    "start": "153690",
    "end": "160500"
  },
  {
    "text": "become more clear the Bluetooth special interest group does define many standard",
    "start": "160500",
    "end": "166410"
  },
  {
    "start": "162000",
    "end": "241000"
  },
  {
    "text": "collections of common services into profiles that commercial devices can implement in an effort to foster",
    "start": "166410",
    "end": "172290"
  },
  {
    "text": "interoperability between communicating devices for bluetooth LE examples of",
    "start": "172290",
    "end": "177629"
  },
  {
    "text": "this would be the heart rate profile proximity profile or even the time profile when interacting with a device",
    "start": "177629",
    "end": "184590"
  },
  {
    "text": "that claims to implement a certain profile developers can expect that a certain collection of service and",
    "start": "184590",
    "end": "190620"
  },
  {
    "text": "characteristic information exists on that device however unlike with many",
    "start": "190620",
    "end": "196560"
  },
  {
    "text": "classic Bluetooth profiles the Android API is for GATT devices do not currently",
    "start": "196560",
    "end": "201870"
  },
  {
    "text": "provide profile level abstractions in order to communicate effectively with a bluetooth LE device from Android you",
    "start": "201870",
    "end": "209010"
  },
  {
    "text": "must determine ahead of time the services and characteristics that you expect on the target remote device the",
    "start": "209010",
    "end": "215370"
  },
  {
    "text": "API is will then allow you to scan for those specific services then directly read and write those characteristics",
    "start": "215370",
    "end": "222269"
  },
  {
    "text": "that are of interest it is also very important to note that at this current stage Android does not support creating",
    "start": "222269",
    "end": "229829"
  },
  {
    "text": "an application that will cause the device to act in the peripheral or broadcaster modes it is only able to",
    "start": "229829",
    "end": "236849"
  },
  {
    "text": "scan for and connect to other peripheral devices in our first demo we have the CC",
    "start": "236849",
    "end": "243870"
  },
  {
    "start": "241000",
    "end": "364000"
  },
  {
    "text": "25:41 sensor tag from Texas Instruments this is a device that implements a GATT",
    "start": "243870",
    "end": "249180"
  },
  {
    "text": "server in order to provide data from each of its six sensors temperature humidity pressure accelerometer",
    "start": "249180",
    "end": "255870"
  },
  {
    "text": "gyroscope and magnetometer each sensor is defined by its own service and each",
    "start": "255870",
    "end": "261419"
  },
  {
    "text": "service contains a characteristic to read the given sensor value most of the sensor services also contain a",
    "start": "261419",
    "end": "267840"
  },
  {
    "text": "characteristic or two for configuring or enabling the sensor data updates let's",
    "start": "267840",
    "end": "273750"
  },
  {
    "text": "go ahead and take a look at the device so in this first demonstration we're going to take a look at the sensor tag",
    "start": "273750",
    "end": "280470"
  },
  {
    "text": "and we're going to create on our Android device an Android simple weather station so if we launch the application will see",
    "start": "280470",
    "end": "288180"
  },
  {
    "text": "the basic user interface where we're going to display values a three sensor values coming from two of those",
    "start": "288180",
    "end": "293580"
  },
  {
    "text": "different sensors okay so notice in the action bar we have a menu option for",
    "start": "293580",
    "end": "299130"
  },
  {
    "text": "scanning so if I hit that button we can detect any of the sensor tags that may be in the vicinity and you see that the",
    "start": "299130",
    "end": "307350"
  },
  {
    "text": "scan runs temporarily we haven't found any yet so we'll try again and now we've",
    "start": "307350",
    "end": "316680"
  },
  {
    "text": "noticed that something has popped up in the action bar and if we take a look we've detected one of these sensor tags",
    "start": "316680",
    "end": "322500"
  },
  {
    "text": "so we can select it to make a connection attempt and we can see it connecting",
    "start": "322500",
    "end": "327750"
  },
  {
    "text": "discovering services on that device and",
    "start": "327750",
    "end": "334610"
  },
  {
    "text": "now we've connected to the device so now at this point we've gone through the process of enabling the sensors on the",
    "start": "334610",
    "end": "341790"
  },
  {
    "text": "tag reading their values and then asking for a notification of each of those tags",
    "start": "341790",
    "end": "347130"
  },
  {
    "text": "to be anytime the sensor value changes to report that back to us so you notice that as I'm talking here the values of",
    "start": "347130",
    "end": "354390"
  },
  {
    "text": "these sensors are changing periodically and we're not continuously polling for that data we've asked the sensor tag to",
    "start": "354390",
    "end": "361110"
  },
  {
    "text": "push that data to us when those changes occur okay so let's go ahead and have a",
    "start": "361110",
    "end": "367110"
  },
  {
    "start": "364000",
    "end": "510000"
  },
  {
    "text": "look at the code for this example that we just saw all right so the majority of the code for this example is going to be",
    "start": "367110",
    "end": "372900"
  },
  {
    "text": "inside of the main activity that we've implemented here now up at the top here",
    "start": "372900",
    "end": "378720"
  },
  {
    "text": "we've got a handful of constants for different uu IDs for the services and",
    "start": "378720",
    "end": "384800"
  },
  {
    "text": "characteristics that are available for each of these sensors so we're going to be reusing three of the different",
    "start": "384800",
    "end": "391650"
  },
  {
    "text": "sensors that were on the sensor tag we were using that humidity sensor and the",
    "start": "391650",
    "end": "397050"
  },
  {
    "text": "barometric barometric pressure sensor and then we're actually getting that temperature data from the barometric",
    "start": "397050",
    "end": "402630"
  },
  {
    "text": "pressure sensor as well so we're not using the temperature sensor directly that was on the sensor tag okay so when",
    "start": "402630",
    "end": "411300"
  },
  {
    "text": "we go in and look when this activity gets created we're going to go ahead and pull up some",
    "start": "411300",
    "end": "416610"
  },
  {
    "text": "of our user interface and remember the user interface was fairly simple it was just those three text fields with the",
    "start": "416610",
    "end": "422849"
  },
  {
    "text": "labels on there that we had we were displaying some of that information inside of okay and so the first thing",
    "start": "422849",
    "end": "429479"
  },
  {
    "text": "that we do after we get our user interface is we're gonna go ahead and obtain a reference to the Bluetooth",
    "start": "429479",
    "end": "434610"
  },
  {
    "text": "manager now something to keep in mind if you use Bluetooth previous to 4.3 is that the Bluetooth manager is new so if",
    "start": "434610",
    "end": "442919"
  },
  {
    "text": "you are using Bluetooth in any previous version of Android that manager would have or the Bluetooth adapter rather",
    "start": "442919",
    "end": "449729"
  },
  {
    "text": "would have come from a static method that was just Bluetooth adapter that get",
    "start": "449729",
    "end": "454889"
  },
  {
    "text": "instance but now we have a Bluetooth manager much like other system services where we can obtain that reference from",
    "start": "454889",
    "end": "461849"
  },
  {
    "text": "a little bit of a difference once we start using newer bluetooth and bluetooth LE ok and then we've created a",
    "start": "461849",
    "end": "468449"
  },
  {
    "text": "collection here where we're going to store all of the Bluetooth devices that we found during the scan and then we've",
    "start": "468449",
    "end": "474779"
  },
  {
    "text": "got a progress dialog here that will show while the connect connection process is going on okay then if we",
    "start": "474779",
    "end": "481979"
  },
  {
    "text": "scroll down here to when the application comes into the foreground we're gonna do",
    "start": "481979",
    "end": "487020"
  },
  {
    "text": "a couple of bookkeeping things in here so the first thing that we're gonna do is we're going to determine whether or",
    "start": "487020",
    "end": "492270"
  },
  {
    "text": "not this device actually supports Bluetooth okay and there's two things that will happen if we're on a device",
    "start": "492270",
    "end": "498479"
  },
  {
    "text": "that either doesn't support Bluetooth or has Bluetooth turned off the first one",
    "start": "498479",
    "end": "503550"
  },
  {
    "text": "is if doesn't support Bluetooth then that Bluetooth adapter will return and",
    "start": "503550",
    "end": "509219"
  },
  {
    "text": "won't be null okay if we have Bluetooth but it's disabled then the Bluetooth",
    "start": "509219",
    "end": "516570"
  },
  {
    "start": "510000",
    "end": "631000"
  },
  {
    "text": "adapter is enabled will return false okay so we have to check both of those values and in this case if either one of",
    "start": "516570",
    "end": "523078"
  },
  {
    "text": "those is true we're going to construct this framework intent and start an",
    "start": "523079",
    "end": "528269"
  },
  {
    "text": "activity that will allow the user to jump into settings and from settings",
    "start": "528269",
    "end": "533370"
  },
  {
    "text": "enable bluetooth for us okay now in this case if bluetooth is disabled we're just",
    "start": "533370",
    "end": "539519"
  },
  {
    "text": "going to ask them to do that and then we're going to leave the activity so if they need to enable bluetooth they'll",
    "start": "539519",
    "end": "545010"
  },
  {
    "text": "have to come back into our application again to continue working with it but assuming that this",
    "start": "545010",
    "end": "550529"
  },
  {
    "text": "check is passed the next thing that we're going to validate is whether or not the application has bluetooth LE support",
    "start": "550529",
    "end": "557339"
  },
  {
    "text": "okay so in the in the first section we were looking at whether or not bluetooth existed at all now we're looking at",
    "start": "557339",
    "end": "563339"
  },
  {
    "text": "whether or not they support bluetooth LE this is validated using a system feature declaration this value can also be",
    "start": "563339",
    "end": "570810"
  },
  {
    "text": "placed in your Android manifest and I would recommend that you do that so that applications inside of Google Play can",
    "start": "570810",
    "end": "578399"
  },
  {
    "text": "be filtered out based on the features of the device but in our example we're going to go ahead and do that",
    "start": "578399",
    "end": "584010"
  },
  {
    "text": "dynamically so that for instance when we're just playing around on a development device or something where",
    "start": "584010",
    "end": "589050"
  },
  {
    "text": "we're otherwise side loading the application we can get that same verification as to whether or not",
    "start": "589050",
    "end": "594120"
  },
  {
    "text": "Bluetooth le is there okay so assuming what we've been able to pass all of these checks and we haven't jumped out",
    "start": "594120",
    "end": "601110"
  },
  {
    "text": "of the application at that point we're going to go ahead and move on into and display the user interface of the",
    "start": "601110",
    "end": "607020"
  },
  {
    "text": "application okay then on the back side of these things we're gonna sort of tear",
    "start": "607020",
    "end": "612630"
  },
  {
    "text": "down all the pieces that we had started up so when if we ever leave the application we're just going to make",
    "start": "612630",
    "end": "618120"
  },
  {
    "text": "sure that things like our progress dialog and any running Bluetooth scans are shut down in addition if we are",
    "start": "618120",
    "end": "625620"
  },
  {
    "text": "connected to a specific device we're going to go ahead and disconnect from that device okay so you noticed in the",
    "start": "625620",
    "end": "633029"
  },
  {
    "text": "example that in order to initiate a scan and then later to connect to a device",
    "start": "633029",
    "end": "638610"
  },
  {
    "text": "that we had discovered after the scan we did both of those things using the options menu ok so the way that we set",
    "start": "638610",
    "end": "645810"
  },
  {
    "text": "that up is inside of a static menu definition we've provided the single scan option and then you'll see a little",
    "start": "645810",
    "end": "652740"
  },
  {
    "text": "bit later in the code that as devices are discovered we're going to add them to that collection that we had defined",
    "start": "652740",
    "end": "660150"
  },
  {
    "text": "of all of our discovered devices and so when we build the options menu for our activity we're going to list out all of",
    "start": "660150",
    "end": "666810"
  },
  {
    "text": "those devices in the overflow menu at alongside the scan option showing up",
    "start": "666810",
    "end": "671850"
  },
  {
    "text": "there in the action bar okay additionally when we make a selection on",
    "start": "671850",
    "end": "679140"
  },
  {
    "text": "one of those options items we're going to do one of two things so if the user clicks that Scan button",
    "start": "679140",
    "end": "684569"
  },
  {
    "text": "we're going to clear our local collection of discovered devices and then we're going to start a new",
    "start": "684569",
    "end": "690209"
  },
  {
    "text": "Bluetooth le scan which we'll see here in a little while if instead they've clicked on any other item in the menu",
    "start": "690209",
    "end": "697259"
  },
  {
    "text": "what they've actually selected is one of those Bluetooth devices so we want to go ahead and make that connection okay so",
    "start": "697259",
    "end": "704549"
  },
  {
    "text": "here we're going to obtain the reference to that bluetooth device and then we're going to use this specific connect GATT",
    "start": "704549",
    "end": "711299"
  },
  {
    "text": "method on the Bluetooth device again if you're familiar with previous iterations of classic bluetooth and Android this is",
    "start": "711299",
    "end": "717959"
  },
  {
    "text": "a slightly different connect method that's used specifically for setting up a gap profile connection to a bluetooth",
    "start": "717959",
    "end": "723839"
  },
  {
    "text": "LE okay so it's a slightly different method and as part of that we're going to pass in a reference to a gap callback",
    "start": "723839",
    "end": "730559"
  },
  {
    "text": "where all of the events that go along with connecting discovering services and communicating with the characteristics",
    "start": "730559",
    "end": "737279"
  },
  {
    "text": "will be put in alright so if we scroll down a little bit further the methods",
    "start": "737279",
    "end": "743999"
  },
  {
    "text": "for starting and stopping a scan are fairly straightforward there is a method",
    "start": "743999",
    "end": "749730"
  },
  {
    "text": "on Bluetooth adapter called start le scan and another for stop and so these are what we're going to use to initiate",
    "start": "749730",
    "end": "756689"
  },
  {
    "text": "that discovery process of other Bluetooth le devices nearby and then as",
    "start": "756689",
    "end": "762299"
  },
  {
    "text": "a result we're going to pass in an interface that is a Bluetooth le scan callback which we're implementing in",
    "start": "762299",
    "end": "769499"
  },
  {
    "text": "this case directly on the activity now the other thing to note is that the way we've set this up which you saw in the",
    "start": "769499",
    "end": "775859"
  },
  {
    "text": "example was that when a scan is started we immediately post a message to a",
    "start": "775859",
    "end": "781379"
  },
  {
    "text": "handler that we have on hand to stop that scan roughly two and a half seconds",
    "start": "781379",
    "end": "786569"
  },
  {
    "text": "later and so this creates just a very short term scan that automatically disables itself rather than us having to",
    "start": "786569",
    "end": "793529"
  },
  {
    "text": "do that directly inside of the user interface anytime that a new device is",
    "start": "793529",
    "end": "800220"
  },
  {
    "text": "discovered as part of that scan the callback is going to be provided inside",
    "start": "800220",
    "end": "805589"
  },
  {
    "text": "of this on le scan method which is part of that le scan callback interface that",
    "start": "805589",
    "end": "810629"
  },
  {
    "text": "we've implemented on the act so inside of this we'll get a reference to the Bluetooth device the received",
    "start": "810629",
    "end": "818019"
  },
  {
    "text": "signal strength of that device and this element called a scan record that we're going to kind of skip over for now but",
    "start": "818019",
    "end": "823930"
  },
  {
    "text": "we'll see in much more detail in the next example so inside of this what",
    "start": "823930",
    "end": "829029"
  },
  {
    "text": "we're specifically looking for our elements of our sensor tag during the scan so we're going to look for anything",
    "start": "829029",
    "end": "836319"
  },
  {
    "text": "that implements or that matches the device name that is sensor tag that we've defined as a constant up above and",
    "start": "836319",
    "end": "842319"
  },
  {
    "text": "if the to match we're going to store that device away inside of our map and",
    "start": "842319",
    "end": "849339"
  },
  {
    "text": "then we invalidate the options menu so that the overflow menu can be redrawn with the new list of devices okay so",
    "start": "849339",
    "end": "857529"
  },
  {
    "text": "this callback will happen for every device that we find in the vicinity and if for instance we had more than one",
    "start": "857529",
    "end": "863589"
  },
  {
    "text": "sensor tag we would have seen more than one show up in the list okay so then the",
    "start": "863589",
    "end": "870220"
  },
  {
    "text": "next big chunk of what's going on in here happens inside of this Bluetooth GATT callback which remember was passed",
    "start": "870220",
    "end": "876279"
  },
  {
    "text": "as a reference into the connect GATT method when the selection was first made",
    "start": "876279",
    "end": "881860"
  },
  {
    "text": "on the options menu so what we've created in here is sort of a simple state machine the methods that actually",
    "start": "881860",
    "end": "889809"
  },
  {
    "start": "883000",
    "end": "1114000"
  },
  {
    "text": "get called by the framework are going to be these methods like on connection state change on services discovered on",
    "start": "889809",
    "end": "897569"
  },
  {
    "text": "characteristic read/write and changed so these obviously are going to happen",
    "start": "897569",
    "end": "902980"
  },
  {
    "text": "during certain events of the process when the connection has succeeded or failed when after we have attempted to",
    "start": "902980",
    "end": "910269"
  },
  {
    "text": "make its service discovery after those services were successfully discovered and then as we walk through this process",
    "start": "910269",
    "end": "916660"
  },
  {
    "text": "of enabling all the sensors on the device so one of the things to notice when you're dealing with a bluetooth LE",
    "start": "916660",
    "end": "923319"
  },
  {
    "text": "connection on Android is that they don't support very well reading or writing more than one characteristic at a time",
    "start": "923319",
    "end": "930040"
  },
  {
    "text": "so the reason that we sort of have this state machine is so we can enable one characteristic and when that's finished",
    "start": "930040",
    "end": "935980"
  },
  {
    "text": "move to the next move to the next and make sure that we get all of them because there are basically three",
    "start": "935980",
    "end": "941050"
  },
  {
    "text": "characteristics for every single sensor that we need to read or write we have to write the just",
    "start": "941050",
    "end": "948069"
  },
  {
    "text": "the configuration characteristic for enabling the sensor we have to read the value to figure out what the sensor is",
    "start": "948069",
    "end": "954579"
  },
  {
    "text": "currently reading and then we have to write a descriptor on the configuration characteristic to enable notifications",
    "start": "954579",
    "end": "961540"
  },
  {
    "text": "and the notifications remember we're how those values from the sensors continuously got pushed back to our",
    "start": "961540",
    "end": "968800"
  },
  {
    "text": "Android device so that we could update our UI so inside of on connection state",
    "start": "968800",
    "end": "974649"
  },
  {
    "text": "change if the connection status was a successful connection we're going to",
    "start": "974649",
    "end": "979899"
  },
  {
    "text": "start this whole process with service discovery so the next step after connecting is finding all of those",
    "start": "979899",
    "end": "985480"
  },
  {
    "text": "services if for whatever reason we disconnect from the device at that point",
    "start": "985480",
    "end": "990910"
  },
  {
    "text": "we're just going to post via that handler a message to clear out our user interface and if anything else goes",
    "start": "990910",
    "end": "997540"
  },
  {
    "text": "wrong we're just going to immediately disconnect okay moving along with the",
    "start": "997540",
    "end": "1003089"
  },
  {
    "text": "connection process once our services have been successfully discovered we're going to start through our state machine",
    "start": "1003089",
    "end": "1009420"
  },
  {
    "text": "here so we're just calling this little reset method that we've created that resets our internal counter and then",
    "start": "1009420",
    "end": "1016800"
  },
  {
    "text": "we're going to call into this first implementation here an able next sensor and this will just walk through and",
    "start": "1016800",
    "end": "1023189"
  },
  {
    "text": "enable each of the sensors in kind as we advance the value of this state machine so the first one that we're going to",
    "start": "1023189",
    "end": "1029788"
  },
  {
    "text": "come into is going to be the calibration characteristics for the pressure sensor",
    "start": "1029789",
    "end": "1034949"
  },
  {
    "text": "so the barometric pressure sensor requires some calibration to happen ahead of time and there is an additional",
    "start": "1034949",
    "end": "1040438"
  },
  {
    "text": "characteristic on the device to tell it to do that calibration and return the coefficients back for us so that is the",
    "start": "1040439",
    "end": "1047038"
  },
  {
    "text": "first sensor that we're going to enable and we're enabling it simply by obtaining a reference to that",
    "start": "1047039",
    "end": "1053549"
  },
  {
    "text": "characteristic which is done by getting the service that the characteristic is associated with and then the",
    "start": "1053549",
    "end": "1059370"
  },
  {
    "text": "characteristic itself all using those uu IDs we described ahead of time once we",
    "start": "1059370",
    "end": "1065970"
  },
  {
    "text": "have a reference to the characteristic on the Bluetooth GATT object we simply call write characteristic after we have",
    "start": "1065970",
    "end": "1073830"
  },
  {
    "text": "set whatever value we need to do to enable that sensor now you'll be noticing as we walk",
    "start": "1073830",
    "end": "1080160"
  },
  {
    "text": "through some of these examples that the the values that we use to write to the sensors or other different descriptor",
    "start": "1080160",
    "end": "1087840"
  },
  {
    "text": "values those are defined in the documentation for the sensor tag so they are specific to this device and that's",
    "start": "1087840",
    "end": "1094470"
  },
  {
    "text": "where all of these discrete values are coming from in addition when we read the data out and have to convert it into a",
    "start": "1094470",
    "end": "1100920"
  },
  {
    "text": "real temperature or a real pressure those conversion values also are given",
    "start": "1100920",
    "end": "1106650"
  },
  {
    "text": "to us in the documentation of sensor tag so when you see those we didn't make them up ourselves they came out of those",
    "start": "1106650",
    "end": "1111780"
  },
  {
    "text": "docs okay so once we've written that enable characteristic that will trigger",
    "start": "1111780",
    "end": "1118830"
  },
  {
    "text": "a non characteristic right once that process has succeeded so as soon as that",
    "start": "1118830",
    "end": "1125340"
  },
  {
    "text": "happens we're gonna move to the next step which is to read that sensor value so if we come up here read next sensor",
    "start": "1125340",
    "end": "1134100"
  },
  {
    "text": "will again obtain a reference to a characteristic in this case it will be you know that data characteristic of",
    "start": "1134100",
    "end": "1141150"
  },
  {
    "text": "whatever the sensor is we're reading and then we're going to call the read characteristic method now again this is",
    "start": "1141150",
    "end": "1147810"
  },
  {
    "text": "asynchronous so when the process has gone out to the device read the value and return it back we will get that",
    "start": "1147810",
    "end": "1153780"
  },
  {
    "text": "value inside of on characteristic read now an uncharacteristic read the first",
    "start": "1153780",
    "end": "1160080"
  },
  {
    "text": "thing that we're going to do is for whatever characteristic or whatever service we got this information from",
    "start": "1160080",
    "end": "1165630"
  },
  {
    "text": "we're gonna punt it up to the UI so that we can send our first update to the display of what this sensor data is and",
    "start": "1165630",
    "end": "1172490"
  },
  {
    "text": "then immediately we're gonna continue on with our next step in the state machine",
    "start": "1172490",
    "end": "1177570"
  },
  {
    "text": "okay so the state machines final step is to set notify so if we go up to that",
    "start": "1177570",
    "end": "1184050"
  },
  {
    "text": "method here set notify has the job of writing a value to one of these",
    "start": "1184050",
    "end": "1190110"
  },
  {
    "text": "characteristic descriptors to tell the remote device that we want to be notified of any updates on this sensor",
    "start": "1190110",
    "end": "1197100"
  },
  {
    "text": "so rather than us continuously pulling the Bluetooth le device we're just going to tell it that anytime the sensor value",
    "start": "1197100",
    "end": "1204210"
  },
  {
    "text": "changes you tell me and all update the display so that's what enabling the notification will do and so what",
    "start": "1204210",
    "end": "1211309"
  },
  {
    "text": "we get a reference to the right characteristic for the right sensor we tell it this is actually a two-step",
    "start": "1211309",
    "end": "1217429"
  },
  {
    "text": "process we have to tell it to enable the characteristic notification on our side locally and then we also have to write",
    "start": "1217429",
    "end": "1225320"
  },
  {
    "text": "that value back to the descriptor on the device so we're actually enabling notifications in two places in order to",
    "start": "1225320",
    "end": "1231649"
  },
  {
    "text": "make this function work okay but then we'll continue through this process",
    "start": "1231649",
    "end": "1238029"
  },
  {
    "text": "because once the descriptor has been written for our enable we're going to",
    "start": "1238029",
    "end": "1243139"
  },
  {
    "text": "advance our state machine and then just call a naval sensor again so we're going",
    "start": "1243139",
    "end": "1248149"
  },
  {
    "text": "to loop through this same process for each of the sensors we're working with until we've written all of those",
    "start": "1248149",
    "end": "1253549"
  },
  {
    "text": "individual characteristics to get set up at that point all of the setup is",
    "start": "1253549",
    "end": "1258980"
  },
  {
    "text": "complete and what we're gonna see is regular callbacks into on characteristic",
    "start": "1258980",
    "end": "1264320"
  },
  {
    "text": "changed as all of those characteristics that we've enabled notifications for start bringing data into us so just like",
    "start": "1264320",
    "end": "1271909"
  },
  {
    "text": "we saw inside of on characteristic read we have that same block where we're gonna validate which characteristic this",
    "start": "1271909",
    "end": "1278629"
  },
  {
    "text": "was and then send a message via our handler back up to the UI to do this now",
    "start": "1278629",
    "end": "1283970"
  },
  {
    "text": "you may be asking why I'm using a handler in this case and it's another important thing to keep in mind when",
    "start": "1283970",
    "end": "1290029"
  },
  {
    "text": "you're dealing with Bluetooth le callbacks all of the callbacks inside of this GATT callback object are not going",
    "start": "1290029",
    "end": "1296990"
  },
  {
    "text": "to happen on the main thread they're going to be called up into your application on background threads so if",
    "start": "1296990",
    "end": "1303139"
  },
  {
    "text": "you want to do something like update the display from this data you have to use a handler or some other mechanism to",
    "start": "1303139",
    "end": "1310700"
  },
  {
    "text": "synchronize that information back to the main thread so that you can do your updates so we've talked a little bit",
    "start": "1310700",
    "end": "1317779"
  },
  {
    "text": "about the fact that this handler exists but let's go ahead and take a look at it so we scroll down a little bit more and",
    "start": "1317779",
    "end": "1324649"
  },
  {
    "text": "this is the implementation of that handler that we've been looking at so you see that for each individual message",
    "start": "1324649",
    "end": "1331190"
  },
  {
    "text": "type we've defined we're going to receive that Bluetooth characteristic for each individual sensor in as an",
    "start": "1331190",
    "end": "1338389"
  },
  {
    "text": "object as part of the handler message and then from here we're now running on the main thread so we can call into",
    "start": "1338389",
    "end": "1345500"
  },
  {
    "text": "we'll update methods that will actually go through an update to display now in",
    "start": "1345500",
    "end": "1350660"
  },
  {
    "text": "addition because we're doing some other UI during connection where we displayed that progress dialog and modified its",
    "start": "1350660",
    "end": "1356930"
  },
  {
    "text": "message we're also leveraging this Handler to bring callbacks from the background thread up to the main thread",
    "start": "1356930",
    "end": "1362870"
  },
  {
    "text": "for updating that progress and then finally we have the values in here that",
    "start": "1362870",
    "end": "1370250"
  },
  {
    "text": "update the display based on the sensor tag data so you see that each of these methods simply takes in the raw",
    "start": "1370250",
    "end": "1376820"
  },
  {
    "text": "characteristic that we passed in from the background callback but then we use these static calibration or calculation",
    "start": "1376820",
    "end": "1385730"
  },
  {
    "text": "methods that allow us to convert the raw data in the characteristic back into",
    "start": "1385730",
    "end": "1391340"
  },
  {
    "text": "some real physical real world data that we can display on the screen as the",
    "start": "1391340",
    "end": "1396650"
  },
  {
    "text": "temperature the percentage of humidity and the pressure now these methods are",
    "start": "1396650",
    "end": "1402620"
  },
  {
    "text": "defined inside of a additional utility class that we've put in this example here and as I mentioned before the",
    "start": "1402620",
    "end": "1411950"
  },
  {
    "text": "mathematics that are going on inside of here all come directly out of the documentation for the sensor tag so all",
    "start": "1411950",
    "end": "1418730"
  },
  {
    "text": "of these calculations are designed specifically to take the raw byte data",
    "start": "1418730",
    "end": "1424220"
  },
  {
    "text": "that comes back for each individual characteristic and then based on the data sheets for those individual sensors",
    "start": "1424220",
    "end": "1430460"
  },
  {
    "text": "we can take that information return it back into a useful value like in this",
    "start": "1430460",
    "end": "1435740"
  },
  {
    "text": "case the barometric pressure so that we can display it on the screen and something that the users will understand",
    "start": "1435740",
    "end": "1442690"
  },
  {
    "text": "and then at this point we have a fully functioning Android weather station",
    "start": "1442690",
    "end": "1448820"
  },
  {
    "start": "1444000",
    "end": "1574000"
  },
  {
    "text": "that's reading our data from our weather sensors one really cool feature of Bluetooth le is this role of a",
    "start": "1448820",
    "end": "1455420"
  },
  {
    "text": "broadcaster or a device that doesn't accept incoming connections but rather pushes out the data that it has inside",
    "start": "1455420",
    "end": "1462470"
  },
  {
    "text": "of its device discovery or advertisement data in the previous example we had to",
    "start": "1462470",
    "end": "1468110"
  },
  {
    "text": "make a connection to the remote device once the scan was complete and in order to read and write characteristic data we",
    "start": "1468110",
    "end": "1474860"
  },
  {
    "text": "then had to go through the process of iterating over all the characteristics we needed just to find the information that we",
    "start": "1474860",
    "end": "1480770"
  },
  {
    "text": "wanted to read and write this takes time and in an application where devices may be just passing by we want something",
    "start": "1480770",
    "end": "1488240"
  },
  {
    "text": "simpler so with a broadcaster data is placed directly into the advertisement",
    "start": "1488240",
    "end": "1493309"
  },
  {
    "text": "packets as an observer application we can read everything we need from the devices during the le scanning process",
    "start": "1493309",
    "end": "1500480"
  },
  {
    "text": "without ever making a connection each advertisement contains a collection of",
    "start": "1500480",
    "end": "1505550"
  },
  {
    "text": "advertisement data structures each containing a length type and payload the",
    "start": "1505550",
    "end": "1511070"
  },
  {
    "text": "structure type identifiers are defined by the Bluetooth special interest group in it the generic access profile and",
    "start": "1511070",
    "end": "1517309"
  },
  {
    "text": "they include elements like control flags device name service uu IDs service data",
    "start": "1517309",
    "end": "1523250"
  },
  {
    "text": "and transmit power level which can be useful for determining proximity to the Bluetooth tags there is another",
    "start": "1523250",
    "end": "1530150"
  },
  {
    "text": "significant benefit of using broadcaster applications for accessory developers that is that the Bluetooth stack inside",
    "start": "1530150",
    "end": "1537260"
  },
  {
    "text": "of those devices is only required to implement advertisements and not all of the connection level stack which means",
    "start": "1537260",
    "end": "1543890"
  },
  {
    "text": "that it is significantly simpler and generally lowers both development effort and cost in our next demonstration we",
    "start": "1543890",
    "end": "1551360"
  },
  {
    "text": "have three connectionless temperature beacons from Kaos technologies a company dedicated to helping developers create",
    "start": "1551360",
    "end": "1558440"
  },
  {
    "text": "some really amazing Bluetooth le solutions these beacon tags all contain a temperature sensor and the value of",
    "start": "1558440",
    "end": "1565429"
  },
  {
    "text": "the current temperature is broadcast as service data inside of their advertisement packet this drastically",
    "start": "1565429",
    "end": "1571880"
  },
  {
    "text": "reduces the code that we have to write so for this demo I've purposefully",
    "start": "1571880",
    "end": "1577280"
  },
  {
    "start": "1574000",
    "end": "1677000"
  },
  {
    "text": "turned off bluetooth so that we can take a look and see what happens when we try to launch the application and that",
    "start": "1577280",
    "end": "1582830"
  },
  {
    "text": "section checking for Bluetooth happens so we'll go ahead and try and launch the app and immediately what we'll get is",
    "start": "1582830",
    "end": "1590030"
  },
  {
    "text": "the system dialog notifying the user that we want to enable bluetooth and we",
    "start": "1590030",
    "end": "1595370"
  },
  {
    "text": "can either allow that to happen or not so we're going to go ahead and able bluetooth by hitting allow and it'll",
    "start": "1595370",
    "end": "1602870"
  },
  {
    "text": "take a moment to turn on but now we're ready to go so at this point if I decide to launch the application again we",
    "start": "1602870",
    "end": "1609650"
  },
  {
    "text": "should get into the UI now notice that immediately this application starts scanning so that the progress",
    "start": "1609650",
    "end": "1615240"
  },
  {
    "text": "indicator in the corner will be showing as long as the Bluetooth scans are in process and as we're going through you",
    "start": "1615240",
    "end": "1621360"
  },
  {
    "text": "can see that it very quickly picked up all of the three beacons that we've placed around the studio here so in fact",
    "start": "1621360",
    "end": "1628320"
  },
  {
    "text": "if you look at these you can probably guess which one of these is in the refrigerator but notice that we've got the device name the current temperature",
    "start": "1628320",
    "end": "1636450"
  },
  {
    "text": "value that we're reading out of this beacons advertisement and then it's device address and receive signal",
    "start": "1636450",
    "end": "1642630"
  },
  {
    "text": "strength so now well we can't necessarily get a great idea based on the signal strength of how far away",
    "start": "1642630",
    "end": "1648990"
  },
  {
    "text": "physically these devices are we can look at them and get sort of an idea that the",
    "start": "1648990",
    "end": "1654149"
  },
  {
    "text": "more negative the number the further away so again that beacon that we've put in the refrigerator is significantly",
    "start": "1654149",
    "end": "1660750"
  },
  {
    "text": "further than the other two beacons that we have much closer here to this device",
    "start": "1660750",
    "end": "1665820"
  },
  {
    "text": "but this is this application is just continuously scanning stopping and then scanning again and as that data comes",
    "start": "1665820",
    "end": "1673289"
  },
  {
    "text": "back for each scan we're updating the display here in this list so let's start",
    "start": "1673289",
    "end": "1679559"
  },
  {
    "start": "1677000",
    "end": "1724000"
  },
  {
    "text": "taking a look at the code here by looking at the activity first all right so just like before we're going to",
    "start": "1679559",
    "end": "1684960"
  },
  {
    "text": "define any of the uu IDs we need for the service data but in this case the only information we're interested in is that",
    "start": "1684960",
    "end": "1690870"
  },
  {
    "text": "single temperature value so there's quite a few less things take a look at just as in the previous example we have",
    "start": "1690870",
    "end": "1698340"
  },
  {
    "text": "that same access to getting the Bluetooth manager so there's nothing",
    "start": "1698340",
    "end": "1703380"
  },
  {
    "text": "different there and as you saw in the example we displayed all of those values in a list so we have a ListView here",
    "start": "1703380",
    "end": "1709529"
  },
  {
    "text": "with a custom adapter for the elements that we'll look at a little bit shortly and similarly when we come into the",
    "start": "1709529",
    "end": "1715649"
  },
  {
    "text": "foreground we're going to be making those same checks for whether or not we have Bluetooth and whether or not",
    "start": "1715649",
    "end": "1721139"
  },
  {
    "text": "Bluetooth le support is part of that so in this example they'll remember that we",
    "start": "1721139",
    "end": "1727260"
  },
  {
    "start": "1724000",
    "end": "2146000"
  },
  {
    "text": "weren't manually actually running a scan we were letting the application just do",
    "start": "1727260",
    "end": "1732419"
  },
  {
    "text": "regular scans and periodically all the time while the application was in the foreground so here we're going to start",
    "start": "1732419",
    "end": "1739139"
  },
  {
    "text": "a scan as soon as we come up and then on the converse of that when the",
    "start": "1739139",
    "end": "1745139"
  },
  {
    "text": "application goes into the background we're going to cancel any currently running Bluetooth le scans okay so",
    "start": "1745139",
    "end": "1753269"
  },
  {
    "text": "notice our start and stop scan methods look similar but a little bit different on the stop scan side we're actually",
    "start": "1753269",
    "end": "1759269"
  },
  {
    "text": "going to be Auto posting yet another start so we sort of create this periodic",
    "start": "1759269",
    "end": "1765209"
  },
  {
    "text": "scan where we run the scan for five minutes or five seconds and we're off for two and a half seconds the other",
    "start": "1765209",
    "end": "1772679"
  },
  {
    "text": "difference here is that the start le scan method is actually taking in a",
    "start": "1772679",
    "end": "1777959"
  },
  {
    "text": "parameter that is a list of uu IDs whereas before we just called this directly with the callback element as",
    "start": "1777959",
    "end": "1785459"
  },
  {
    "text": "the parameter now the cool thing that this is going to do is it means that in our on le scan method we're only going",
    "start": "1785459",
    "end": "1793019"
  },
  {
    "text": "to get back devices that publish one of more of these services inside of their",
    "start": "1793019",
    "end": "1798690"
  },
  {
    "text": "advertisements so this is going to filter out for us any other Bluetooth le",
    "start": "1798690",
    "end": "1804089"
  },
  {
    "text": "devices that might have come up on discovery that don't meet this particular criteria so that we don't",
    "start": "1804089",
    "end": "1810299"
  },
  {
    "text": "have to do any of that work ourselves okay so we take a look at the on le scan",
    "start": "1810299",
    "end": "1816719"
  },
  {
    "text": "method remember that in this example we don't have to make a connection to any of these devices we're just going to get",
    "start": "1816719",
    "end": "1823440"
  },
  {
    "text": "all the information we need out of the advertisement so all the interesting stuff actually happens here inside of on",
    "start": "1823440",
    "end": "1829859"
  },
  {
    "text": "le scan okay so after we've gotten a new",
    "start": "1829859",
    "end": "1835109"
  },
  {
    "text": "callback for one of these devices the first thing that we're going to do is we're going to parse out all of this the",
    "start": "1835109",
    "end": "1841679"
  },
  {
    "text": "ad records that we're inside of that scan so remember this parameter scan record from before this is the actual",
    "start": "1841679",
    "end": "1849419"
  },
  {
    "text": "raw data of that advertisement payload and what we've created in this example",
    "start": "1849419",
    "end": "1854940"
  },
  {
    "text": "here is just a very simple parser that we can go look at that will take the",
    "start": "1854940",
    "end": "1860759"
  },
  {
    "text": "data from that scan record and parse it out into those three element chunks for",
    "start": "1860759",
    "end": "1866699"
  },
  {
    "text": "the length type identifier and the payload for each advertisement data structure so we're going to parse",
    "start": "1866699",
    "end": "1874199"
  },
  {
    "text": "through that entire record find all the structures and then return them back in a list",
    "start": "1874199",
    "end": "1879470"
  },
  {
    "text": "so this is just a very simple model that allows us to block out those elements from the raw data so then once we have",
    "start": "1879470",
    "end": "1888980"
  },
  {
    "text": "that data back we can determine first of all if there were any records and if there were just sort of log some basic",
    "start": "1888980",
    "end": "1895399"
  },
  {
    "text": "information out about what we found and then we've created yet another simple little model to represent one of our",
    "start": "1895399",
    "end": "1902450"
  },
  {
    "text": "temperature beacons so in here we're going to pass in to create one of these",
    "start": "1902450",
    "end": "1908870"
  },
  {
    "text": "the list of all the records that we just parsed out as well as some basic information such as the device's address",
    "start": "1908870",
    "end": "1914629"
  },
  {
    "text": "and the received signal strength and then we're going to look through to find",
    "start": "1914629",
    "end": "1920059"
  },
  {
    "text": "any of the advertisement records that are specific to our temperature beacon and the only ones that we're interested",
    "start": "1920059",
    "end": "1926720"
  },
  {
    "text": "in are the advertisement data structure that advertises the device name and the",
    "start": "1926720",
    "end": "1932120"
  },
  {
    "text": "structure that advertises service data now specifically in case there's more than one we are going to also determine",
    "start": "1932120",
    "end": "1939470"
  },
  {
    "text": "that for any service data records we find that the cert the UUID published in",
    "start": "1939470",
    "end": "1945649"
  },
  {
    "text": "that service data record is the thermometer service or the temperature value that we're interested in so it's",
    "start": "1945649",
    "end": "1952370"
  },
  {
    "text": "whenever we find either one of those records we're going to use these methods we've created to parse out that specific",
    "start": "1952370",
    "end": "1959059"
  },
  {
    "text": "data type into a name and into our current temperature value okay",
    "start": "1959059",
    "end": "1966980"
  },
  {
    "text": "so then we're gonna get one of these created for every beacon that we find and as we just continue to scan over and",
    "start": "1966980",
    "end": "1974720"
  },
  {
    "text": "over again through the lifetime of the application these new beacons will pop in as they get discovered and then we're",
    "start": "1974720",
    "end": "1981710"
  },
  {
    "text": "we're passing each beacon we find up to a handler using that same pattern we used in a previous example so but this",
    "start": "1981710",
    "end": "1989809"
  },
  {
    "text": "case if we look at the handler it's much simpler rather than trying to go through and initiate all of these connections",
    "start": "1989809",
    "end": "1995570"
  },
  {
    "text": "and stuff like that instead we just want to take that beacon that we found and we created add it to a collection again",
    "start": "1995570",
    "end": "2001929"
  },
  {
    "text": "primarily so that if we find the same beacon multiple times we won't show it",
    "start": "2001929",
    "end": "2007629"
  },
  {
    "text": "multiple times in the list so we're using this collection to uniquely key each beacon so that if",
    "start": "2007629",
    "end": "2012820"
  },
  {
    "text": "we scan for it we know it's the same one so we're keying that based off of the",
    "start": "2012820",
    "end": "2018009"
  },
  {
    "text": "device address and then placing the beacon in that collection and then at that point we're updating our list",
    "start": "2018009",
    "end": "2024909"
  },
  {
    "text": "adapter that we've created and telling it to update the display so the only",
    "start": "2024909",
    "end": "2030669"
  },
  {
    "text": "additional piece here is to take a look at the adapter that we've really created just to override how these are going to",
    "start": "2030669",
    "end": "2037120"
  },
  {
    "text": "display so we've created a special instance called a beacon adapter that",
    "start": "2037120",
    "end": "2043480"
  },
  {
    "text": "really only has one customization of its getview method so inside of get view we're going to take a look at one of the",
    "start": "2043480",
    "end": "2051730"
  },
  {
    "text": "list elements and pull out the individual beacon that we're going to display and simply display sort of in a",
    "start": "2051730",
    "end": "2058690"
  },
  {
    "text": "column based fashion which you saw in the example there the name current temperature device address and receive",
    "start": "2058690",
    "end": "2065618"
  },
  {
    "text": "signal strength now additionally you may notice that just so that we could be a little bit clever we've also decided to",
    "start": "2065619",
    "end": "2072310"
  },
  {
    "text": "vary the color of the text based on the temperature so we've got a very simple",
    "start": "2072310",
    "end": "2077530"
  },
  {
    "text": "set of mathematics here that's just going to determine based on the current temperature where the value lives in a",
    "start": "2077530",
    "end": "2084280"
  },
  {
    "text": "range between zero and forty degrees C and then set the red-blue blend of the",
    "start": "2084280",
    "end": "2090368"
  },
  {
    "text": "text color based on that so that if it's zero degrees or less it will show up as pure blue forty degrees or more will be",
    "start": "2090369",
    "end": "2097690"
  },
  {
    "text": "pure red and anything more close to room temperature will be some blend of the two so then we're going to take that",
    "start": "2097690",
    "end": "2104140"
  },
  {
    "text": "text color and we apply it to each of the text views inside of our list item",
    "start": "2104140",
    "end": "2110430"
  },
  {
    "text": "so then at this point this application will just continue to run as it's in the",
    "start": "2110430",
    "end": "2115960"
  },
  {
    "text": "foreground running through these periodic scans so for five seconds will look for new beacons and then for two",
    "start": "2115960",
    "end": "2121180"
  },
  {
    "text": "and a half seconds will stop and then pause and come again and as long as these beacons are continuing to",
    "start": "2121180",
    "end": "2126970"
  },
  {
    "text": "advertise their temperature will just update that value in the list over and over and at that point we've created",
    "start": "2126970",
    "end": "2133210"
  },
  {
    "text": "this sort of field if you will of temperature beacons that we can come in",
    "start": "2133210",
    "end": "2138640"
  },
  {
    "text": "and read the data from without having to make any connections or do any of that additional overhead so this is fast and",
    "start": "2138640",
    "end": "2144970"
  },
  {
    "text": "it's simple and it's a very effective so today we saw two examples of implementing Bluetooth le api's",
    "start": "2144970",
    "end": "2151460"
  },
  {
    "start": "2146000",
    "end": "2199000"
  },
  {
    "text": "within Android applications we looked at connecting peripherals for reading sensor data over the long term and",
    "start": "2151460",
    "end": "2158120"
  },
  {
    "text": "observing broadcast advertisements from simple sensors providing more limited data if you'd like to get your hands on",
    "start": "2158120",
    "end": "2165080"
  },
  {
    "text": "some of these accessory beacons why don't you head over to ks technologies at Kaos technologies comm if you'd like",
    "start": "2165080",
    "end": "2171680"
  },
  {
    "text": "to learn more about integrating accessories into your mobile applications or some of our work at double encore please visit us at mm core",
    "start": "2171680",
    "end": "2179060"
  },
  {
    "text": "comm and if you'd like to learn more about Android development in general check out the classes that we have at",
    "start": "2179060",
    "end": "2184880"
  },
  {
    "text": "the new circle comm thanks for coming today and I hope you learn something new",
    "start": "2184880",
    "end": "2191050"
  },
  {
    "text": "you",
    "start": "2196040",
    "end": "2198100"
  }
]