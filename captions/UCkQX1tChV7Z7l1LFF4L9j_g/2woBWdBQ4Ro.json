[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "hi my name is Seth lad and welcome to",
    "start": "80",
    "end": "1439"
  },
  {
    "text": "this episode of Dart tips we made it to",
    "start": "1439",
    "end": "3320"
  },
  {
    "text": "classes class-based objectoriented",
    "start": "3320",
    "end": "5160"
  },
  {
    "text": "programming is an extremely common and",
    "start": "5160",
    "end": "6680"
  },
  {
    "text": "widely deployed programming model and",
    "start": "6680",
    "end": "8360"
  },
  {
    "text": "dart has first class support for classes",
    "start": "8360",
    "end": "10280"
  },
  {
    "text": "and inheritance classes is a big topic",
    "start": "10280",
    "end": "12759"
  },
  {
    "text": "so today we start with an intro and a",
    "start": "12759",
    "end": "14599"
  },
  {
    "text": "look at Fields let's get",
    "start": "14599",
    "end": "16670"
  },
  {
    "text": "[Music]",
    "start": "16670",
    "end": "20519"
  },
  {
    "text": "started when we say Dart is a",
    "start": "20519",
    "end": "22560"
  },
  {
    "text": "class-based objectoriented programming",
    "start": "22560",
    "end": "24160"
  },
  {
    "text": "language we mean it everything in Dart",
    "start": "24160",
    "end": "26039"
  },
  {
    "text": "is an object everything is an instance",
    "start": "26039",
    "end": "27800"
  },
  {
    "text": "of a class and all classes descend from",
    "start": "27800",
    "end": "30160"
  },
  {
    "text": "object Dart is a single inheritance",
    "start": "30160",
    "end": "32238"
  },
  {
    "text": "language which means a class can inherit",
    "start": "32239",
    "end": "33760"
  },
  {
    "text": "from or extend from only one other class",
    "start": "33760",
    "end": "36520"
  },
  {
    "start": "36000",
    "end": "65000"
  },
  {
    "text": "a quick primer on classes and objects a",
    "start": "36520",
    "end": "38800"
  },
  {
    "text": "class defines how objects look and how",
    "start": "38800",
    "end": "40399"
  },
  {
    "text": "they behave a class is like an idea and",
    "start": "40399",
    "end": "42800"
  },
  {
    "text": "to turn that idea into reality you need",
    "start": "42800",
    "end": "44600"
  },
  {
    "text": "an object an object is like a physical",
    "start": "44600",
    "end": "46840"
  },
  {
    "text": "thing something you can create from",
    "start": "46840",
    "end": "48239"
  },
  {
    "text": "class and manipulate on its own for",
    "start": "48239",
    "end": "50440"
  },
  {
    "text": "example think of a class like the",
    "start": "50440",
    "end": "51840"
  },
  {
    "text": "blueprint for all sports cars and an",
    "start": "51840",
    "end": "53960"
  },
  {
    "text": "object like a specific Ferrari with a",
    "start": "53960",
    "end": "55960"
  },
  {
    "text": "license plate 1 2 3 4 red paint and a",
    "start": "55960",
    "end": "58239"
  },
  {
    "text": "current speed of 80 mes per hour in this",
    "start": "58239",
    "end": "60280"
  },
  {
    "text": "way we see that an object a specific",
    "start": "60280",
    "end": "61879"
  },
  {
    "text": "thing is an instance of a Class A",
    "start": "61879",
    "end": "63680"
  },
  {
    "text": "conceptual idea classes can be extended",
    "start": "63680",
    "end": "66360"
  },
  {
    "start": "65000",
    "end": "90000"
  },
  {
    "text": "to Define more specialized classes a",
    "start": "66360",
    "end": "68920"
  },
  {
    "text": "class hierarchy is a tree likee",
    "start": "68920",
    "end": "70479"
  },
  {
    "text": "relationship between high level abstract",
    "start": "70479",
    "end": "72360"
  },
  {
    "text": "Concepts like vehicle and more specific",
    "start": "72360",
    "end": "74320"
  },
  {
    "text": "Concepts like car and then even more",
    "start": "74320",
    "end": "76200"
  },
  {
    "text": "specific ideas like sports car a more",
    "start": "76200",
    "end": "78720"
  },
  {
    "text": "specific class inherits from or extends",
    "start": "78720",
    "end": "81079"
  },
  {
    "text": "from a more General class the top level",
    "start": "81079",
    "end": "83479"
  },
  {
    "text": "of the dark class hierarchy is object",
    "start": "83479",
    "end": "85600"
  },
  {
    "text": "that is all objects are instances of the",
    "start": "85600",
    "end": "87840"
  },
  {
    "text": "class object the dart SDK ships with",
    "start": "87840",
    "end": "91520"
  },
  {
    "start": "90000",
    "end": "125000"
  },
  {
    "text": "classes for everything from strings and",
    "start": "91520",
    "end": "93640"
  },
  {
    "text": "numbers to dates and durations to",
    "start": "93640",
    "end": "95680"
  },
  {
    "text": "abstract Concepts like type and object",
    "start": "95680",
    "end": "98200"
  },
  {
    "text": "but of course you can make your own",
    "start": "98200",
    "end": "99479"
  },
  {
    "text": "classes here's an example this class is",
    "start": "99479",
    "end": "102000"
  },
  {
    "text": "named car it has two Fields paint colar",
    "start": "102000",
    "end": "104439"
  },
  {
    "text": "and is running fields are used to hold",
    "start": "104439",
    "end": "106719"
  },
  {
    "text": "the state of an object this car class",
    "start": "106719",
    "end": "108880"
  },
  {
    "text": "has three methods turn on turn off and",
    "start": "108880",
    "end": "111320"
  },
  {
    "text": "check key methods are like functions",
    "start": "111320",
    "end": "113399"
  },
  {
    "text": "that are bound to an object and they can",
    "start": "113399",
    "end": "115119"
  },
  {
    "text": "access an object's State methods change",
    "start": "115119",
    "end": "117520"
  },
  {
    "text": "or expose the state of an object for for",
    "start": "117520",
    "end": "119960"
  },
  {
    "text": "example the turnon method checks first",
    "start": "119960",
    "end": "121880"
  },
  {
    "text": "if there is a key present and if so",
    "start": "121880",
    "end": "123560"
  },
  {
    "text": "starts the car to create an object from",
    "start": "123560",
    "end": "126399"
  },
  {
    "start": "125000",
    "end": "146000"
  },
  {
    "text": "a class you need to instantiate it",
    "start": "126399",
    "end": "128280"
  },
  {
    "text": "here's an example notice the use of new",
    "start": "128280",
    "end": "131160"
  },
  {
    "text": "to create a new instance of the car",
    "start": "131160",
    "end": "133040"
  },
  {
    "text": "class the object is assigned to the",
    "start": "133040",
    "end": "135000"
  },
  {
    "text": "variable named Sweet ride you can now",
    "start": "135000",
    "end": "137239"
  },
  {
    "text": "call methods on the object let's dive",
    "start": "137239",
    "end": "139840"
  },
  {
    "text": "into fields or instance variables here",
    "start": "139840",
    "end": "142280"
  },
  {
    "text": "is a reminder of the car class with its",
    "start": "142280",
    "end": "144239"
  },
  {
    "text": "two Fields all instance variables have",
    "start": "144239",
    "end": "146400"
  },
  {
    "start": "146000",
    "end": "173000"
  },
  {
    "text": "an implicit getter this means that even",
    "start": "146400",
    "end": "148280"
  },
  {
    "text": "though it looks like you're accessing a",
    "start": "148280",
    "end": "149480"
  },
  {
    "text": "field directly you're actually going",
    "start": "149480",
    "end": "151080"
  },
  {
    "text": "through a generated getter method here's",
    "start": "151080",
    "end": "153000"
  },
  {
    "text": "an example any non-final instance",
    "start": "153000",
    "end": "155680"
  },
  {
    "text": "variable has an implicit Setter in other",
    "start": "155680",
    "end": "158080"
  },
  {
    "text": "words if the field is non-final it will",
    "start": "158080",
    "end": "160400"
  },
  {
    "text": "have a Setter method generated for it",
    "start": "160400",
    "end": "162599"
  },
  {
    "text": "one of the reasons I love Dart is that",
    "start": "162599",
    "end": "163959"
  },
  {
    "text": "it does not promote excessive generation",
    "start": "163959",
    "end": "166440"
  },
  {
    "text": "of Setters and Getters of course you",
    "start": "166440",
    "end": "168640"
  },
  {
    "text": "always have the option to make your own",
    "start": "168640",
    "end": "169840"
  },
  {
    "text": "Getters and Setters let's look at how to",
    "start": "169840",
    "end": "171560"
  },
  {
    "text": "do this and why Dart wants to make it",
    "start": "171560",
    "end": "174360"
  },
  {
    "start": "173000",
    "end": "183000"
  },
  {
    "text": "easy for you to evolve your API and help",
    "start": "174360",
    "end": "176480"
  },
  {
    "text": "you start simple and grow over time a",
    "start": "176480",
    "end": "178720"
  },
  {
    "text": "simple way to start is to just use",
    "start": "178720",
    "end": "180239"
  },
  {
    "text": "Fields here's an",
    "start": "180239",
    "end": "182000"
  },
  {
    "text": "example let's imagine that over time the",
    "start": "182000",
    "end": "184280"
  },
  {
    "start": "183000",
    "end": "206000"
  },
  {
    "text": "class evolves to include a field for the",
    "start": "184280",
    "end": "185959"
  },
  {
    "text": "engine we can determine if the engine is",
    "start": "185959",
    "end": "188000"
  },
  {
    "text": "running by asking the new engine field",
    "start": "188000",
    "end": "190959"
  },
  {
    "text": "this makes the is engine running field",
    "start": "190959",
    "end": "193120"
  },
  {
    "text": "redundant however if we remove is engine",
    "start": "193120",
    "end": "195519"
  },
  {
    "text": "running we break existing users of the",
    "start": "195519",
    "end": "197879"
  },
  {
    "text": "code we want to change the",
    "start": "197879",
    "end": "199480"
  },
  {
    "text": "implementation of the class without",
    "start": "199480",
    "end": "201120"
  },
  {
    "text": "breaking backwards compatibility this is",
    "start": "201120",
    "end": "203200"
  },
  {
    "text": "exactly why Getters and Setters were",
    "start": "203200",
    "end": "205560"
  },
  {
    "text": "introduced here's how you use them",
    "start": "205560",
    "end": "207720"
  },
  {
    "start": "206000",
    "end": "218000"
  },
  {
    "text": "notice how the getter and Center method",
    "start": "207720",
    "end": "209239"
  },
  {
    "text": "names are are preceded by the words get",
    "start": "209239",
    "end": "211200"
  },
  {
    "text": "and set a getter has no parameters and",
    "start": "211200",
    "end": "213720"
  },
  {
    "text": "returns a value and the setter has one",
    "start": "213720",
    "end": "215599"
  },
  {
    "text": "parameter and does not return a value",
    "start": "215599",
    "end": "218319"
  },
  {
    "start": "218000",
    "end": "231000"
  },
  {
    "text": "here's how you use the new car class",
    "start": "218319",
    "end": "220239"
  },
  {
    "text": "looks familiar right using Setters and",
    "start": "220239",
    "end": "222120"
  },
  {
    "text": "Getters is transparent to the user of",
    "start": "222120",
    "end": "223799"
  },
  {
    "text": "the class this allows you to evolve your",
    "start": "223799",
    "end": "225760"
  },
  {
    "text": "API over time without breaking existing",
    "start": "225760",
    "end": "227680"
  },
  {
    "text": "users the dart ways to start simple and",
    "start": "227680",
    "end": "230120"
  },
  {
    "text": "scale up as you go classes are a big",
    "start": "230120",
    "end": "233200"
  },
  {
    "start": "231000",
    "end": "258000"
  },
  {
    "text": "topic there's much more cool stuff to",
    "start": "233200",
    "end": "234599"
  },
  {
    "text": "cover in future episodes for example",
    "start": "234599",
    "end": "236519"
  },
  {
    "text": "we'll cover Constructors inheritance",
    "start": "236519",
    "end": "238560"
  },
  {
    "text": "operator overriding and much more thanks",
    "start": "238560",
    "end": "241159"
  },
  {
    "text": "for watching I'm Seth ladin as we stay",
    "start": "241159",
    "end": "242640"
  },
  {
    "text": "here on Dart tips stay sharp click here",
    "start": "242640",
    "end": "245519"
  },
  {
    "text": "to subscribe to our channel for more",
    "start": "245519",
    "end": "246879"
  },
  {
    "text": "episodes of Dart tips we appreciate any",
    "start": "246879",
    "end": "248879"
  },
  {
    "text": "thoughts you might have for the series",
    "start": "248879",
    "end": "250159"
  },
  {
    "text": "please leave them in the comments below",
    "start": "250159",
    "end": "252319"
  },
  {
    "text": "if you have any additional questions",
    "start": "252319",
    "end": "253439"
  },
  {
    "text": "about Dart please drop by stack Overflow",
    "start": "253439",
    "end": "255480"
  },
  {
    "text": "where Dart experts are standing by to",
    "start": "255480",
    "end": "256919"
  },
  {
    "text": "help you out see you next time",
    "start": "256919",
    "end": "260720"
  }
]