[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "today we're going to talk about designing microservice architectures the right way and I thought to start it'd be",
    "start": "3980",
    "end": "11090"
  },
  {
    "text": "helpful to share a personal story that I hope resonates with many of you so the",
    "start": "11090",
    "end": "16280"
  },
  {
    "text": "names will be unnamed but it basically goes like this could you please change this URL from",
    "start": "16280",
    "end": "21620"
  },
  {
    "text": "phu kham slash latest slash bar to phu kham slash one point five point three slash bar and the answer is sorry that",
    "start": "21620",
    "end": "29750"
  },
  {
    "text": "would take weeks we don't have the resources to do that it's just a",
    "start": "29750",
    "end": "35840"
  },
  {
    "start": "34000",
    "end": "69000"
  },
  {
    "text": "frigging URL and we have to ask how does that happen and in this particular case",
    "start": "35840",
    "end": "42100"
  },
  {
    "text": "this was a URL in a library there are hundreds of services to update many",
    "start": "42100",
    "end": "47780"
  },
  {
    "text": "other services have not been updated in a long period of time which means that updating that service means updating its",
    "start": "47780",
    "end": "53510"
  },
  {
    "text": "dependencies which just frankly takes time it is actually the reality of the",
    "start": "53510",
    "end": "58640"
  },
  {
    "text": "work to do it and incredibly frustrating right I mean super super frustrating when a simple task ends up being",
    "start": "58640",
    "end": "65420"
  },
  {
    "text": "complicated or time-consuming in practice and this is where I think great",
    "start": "65420",
    "end": "70729"
  },
  {
    "start": "69000",
    "end": "115000"
  },
  {
    "text": "architecture can really help us and we talk about great architecture I think what we're really after is a few key features one is this idea that we can",
    "start": "70729",
    "end": "77810"
  },
  {
    "text": "scale development teams develop deliver higher quality software enable ourselves",
    "start": "77810",
    "end": "83030"
  },
  {
    "text": "have a choice are we really after high performance or Reaktor low cost and to actually be able to make changes that",
    "start": "83030",
    "end": "89479"
  },
  {
    "text": "drive what we really like in our business and I think one of the defining characteristics of great architecture",
    "start": "89479",
    "end": "95149"
  },
  {
    "text": "and this is the hard one it's a support future features not naturally and the way we like to think about this when",
    "start": "95149",
    "end": "101539"
  },
  {
    "text": "we're designing something do we have a good design I don't know I'll let you know in three four years and when we find out how everybody would like to use",
    "start": "101539",
    "end": "108049"
  },
  {
    "text": "it and whether or not we make good decisions today that's ultimately a good that's ultimately when we learned and we",
    "start": "108049",
    "end": "115310"
  },
  {
    "start": "115000",
    "end": "149000"
  },
  {
    "text": "talked about not-so-great architecture I think it often looks like this people like to talk about spaghetti",
    "start": "115310",
    "end": "121130"
  },
  {
    "text": "goto gets a lot of memes out there but I think really what's happening is we're trading near-term velocity for what I",
    "start": "121130",
    "end": "128750"
  },
  {
    "text": "like to call future paralysis and I think in the micro service architecture space certainly we've personally have",
    "start": "128750",
    "end": "134930"
  },
  {
    "text": "seen this in many many examples where we're tempted by the benefits of micro services and we underestimate or under invest in what is",
    "start": "134930",
    "end": "142250"
  },
  {
    "text": "needed to build a great architecture and this is what we end up with we end up with one to two weeks of work to change",
    "start": "142250",
    "end": "147950"
  },
  {
    "text": "a URL and so today's talk is about designing micro service architectures the right way and frankly how do we",
    "start": "147950",
    "end": "154610"
  },
  {
    "start": "149000",
    "end": "164000"
  },
  {
    "text": "avoid spaghetti and make a perfectly crafted meal fey we're layer after layer itself is simple perfect and together",
    "start": "154610",
    "end": "162200"
  },
  {
    "text": "the whole is greater than the sum of its parts briefly my background",
    "start": "162200",
    "end": "167299"
  },
  {
    "start": "164000",
    "end": "217000"
  },
  {
    "text": "today the co-founder and CTO of an enterprise SAS company called Flo commerce Flo Daioh where we build software that helps",
    "start": "167299",
    "end": "173420"
  },
  {
    "text": "brands expand internationally from day one we built our company on micro services with many of the lessons we",
    "start": "173420",
    "end": "178819"
  },
  {
    "text": "learned in our prior experience prior to that was the co-founder and CTO of gilt",
    "start": "178819",
    "end": "183890"
  },
  {
    "text": "calm if you're familiar with gilt large-scale micro service architecture I",
    "start": "183890",
    "end": "189170"
  },
  {
    "text": "think probably over 400 applications now quite a large company over a thousand",
    "start": "189170",
    "end": "194450"
  },
  {
    "text": "people six seven hundred million in annual revenue at the point in time that we sold the company to Hudson Bay and I",
    "start": "194450",
    "end": "200840"
  },
  {
    "text": "think it was there that we really learned a lot about the benefits of micro service architectures in terms of scaling teams delivering quality",
    "start": "200840",
    "end": "207310"
  },
  {
    "text": "isolation performance as well as many of the challenges and frankly areas where in hindsight we wish we had invested",
    "start": "207310",
    "end": "213560"
  },
  {
    "text": "more and that's what today's talk will focus on let's start with a few misconceptions misconception number one",
    "start": "213560",
    "end": "221569"
  },
  {
    "start": "217000",
    "end": "271000"
  },
  {
    "text": "micro services enable our teams to choose the best programming languages and frameworks for their tasks this is",
    "start": "221569",
    "end": "228590"
  },
  {
    "text": "often cited as one of the big benefits of micro services I can build one service and go one service in rust one service in node and one service and",
    "start": "228590",
    "end": "236090"
  },
  {
    "text": "whatever language gets invented tomorrow the reality is and we'll demonstrate this today it is super super expensive",
    "start": "236090",
    "end": "242840"
  },
  {
    "text": "to adopt new programming languages and frameworks and really the bigger bar here is team size and the level of",
    "start": "242840",
    "end": "249109"
  },
  {
    "text": "investment into the architecture one metric is if we look at Google as a",
    "start": "249109",
    "end": "254209"
  },
  {
    "text": "generally great engineering company they have about I don't know let's call it 20,000 30,000 engineers at last count",
    "start": "254209",
    "end": "261169"
  },
  {
    "text": "they have eight programming languages so I like to say one programming language for every 4,000 engineers as a good",
    "start": "261169",
    "end": "266990"
  },
  {
    "text": "metric misconception number two cogeneration is",
    "start": "266990",
    "end": "274070"
  },
  {
    "start": "271000",
    "end": "294000"
  },
  {
    "text": "evil I used to think this and the reality is cogeneration is just a technique and what's really important",
    "start": "274070",
    "end": "280070"
  },
  {
    "text": "especially in these micro service architectures is creating a defined schema that is actually a hundred",
    "start": "280070",
    "end": "285140"
  },
  {
    "text": "percent trusted and today we'll demonstrate one technique that we use quite a bit we're at flow we're",
    "start": "285140",
    "end": "290360"
  },
  {
    "text": "leveraging a significant amount of cogeneration in different parts of our software development process misconception number three the event log",
    "start": "290360",
    "end": "297080"
  },
  {
    "start": "294000",
    "end": "347000"
  },
  {
    "text": "must be the source of truth so when we were starting flow I also thought this",
    "start": "297080",
    "end": "303200"
  },
  {
    "text": "and I reached out to Jake reps who wrote cough-cough Co and wrote the paper the definitive paper I think on logging that",
    "start": "303200",
    "end": "309260"
  },
  {
    "text": "many people here surely read and I and he really helped us as we were space scaling guilt and I said Jay I don't get",
    "start": "309260",
    "end": "314840"
  },
  {
    "text": "it I've got a rest service and I'm creating a user what am I supposed to do publish an event wait for that event to come",
    "start": "314840",
    "end": "321740"
  },
  {
    "text": "back to my service so that I can respond to my client because after my client creates a user they may want to get that",
    "start": "321740",
    "end": "327410"
  },
  {
    "text": "users details so how do I guarantee that I have those users details and from the horse's mouth II said no no no you just",
    "start": "327410",
    "end": "332870"
  },
  {
    "text": "saw that in database that's fine and so that's what we did the resources are stored in databases that belong to the micro services but",
    "start": "332870",
    "end": "339860"
  },
  {
    "text": "then we guarantee absolutely at least one semantics that those messages are going to end up on the event stream it's",
    "start": "339860",
    "end": "346580"
  },
  {
    "text": "okay so okay misconception number four developers can maintain no more than three services",
    "start": "346580",
    "end": "351800"
  },
  {
    "start": "347000",
    "end": "365000"
  },
  {
    "text": "each this is certainly true at gilt a few folks from Netflix shared that the",
    "start": "351800",
    "end": "357350"
  },
  {
    "text": "ratio of three services for developer into being kind of this like magic number and you get to that number and then you stop feature development and",
    "start": "357350",
    "end": "364190"
  },
  {
    "text": "all you do is babysit and maintain all your services I think this is the wrong metric to focus on and if you're having",
    "start": "364190",
    "end": "369920"
  },
  {
    "start": "365000",
    "end": "395000"
  },
  {
    "text": "conversations about this metric I think it's a clear sign that you need to invest in automation and tooling and we'll go through a lot of the tooling we",
    "start": "369920",
    "end": "376430"
  },
  {
    "text": "have here today flow were in our third year we have about a hundred services and the ratio is about five services per",
    "start": "376430",
    "end": "383240"
  },
  {
    "text": "engineer and every week we ask people how much time is being spent on maintenance the portion of maintenance",
    "start": "383240",
    "end": "389060"
  },
  {
    "text": "that goes into maintaining and loving our micro services of less than five percent so it's absolutely doable so",
    "start": "389060",
    "end": "396830"
  },
  {
    "start": "395000",
    "end": "620000"
  },
  {
    "text": "we'll touch on the flow architecture because this is driving a lot of the content today so distributed micro service architecture add flow over 100",
    "start": "396830",
    "end": "402889"
  },
  {
    "text": "micro-services each one of them defines a REST API all of our services communicate via api's and on the bottom",
    "start": "402889",
    "end": "409669"
  },
  {
    "text": "events every service publishes events of interest there is a lambda architecture at the bottom but I think the key thing",
    "start": "409669",
    "end": "416210"
  },
  {
    "text": "here is there's a lot of services that are interacting together we do a few things that are quite unique which is one we don't have a private network and",
    "start": "416210",
    "end": "422539"
  },
  {
    "text": "that means that all of the products that we build our UIs are actually built on the same API so that we offer our",
    "start": "422539",
    "end": "427759"
  },
  {
    "text": "clients there is just one set of API s and events to flow one of the key",
    "start": "427759",
    "end": "432979"
  },
  {
    "text": "practices and I think the first critical decision to make in going into a micro service architectures is how are you going to manage and define your API s",
    "start": "432979",
    "end": "439310"
  },
  {
    "text": "and here we're going to talk about REST API as we'll talk about events in a bit this is what an API looks like at flow",
    "start": "439310",
    "end": "445279"
  },
  {
    "text": "the very first artifact and step of software development app flows the design of the API a few critical things",
    "start": "445279",
    "end": "451699"
  },
  {
    "text": "it's not in code it's not annotations in code it has to be language neutral here",
    "start": "451699",
    "end": "457669"
  },
  {
    "text": "you see this is an example we use JSON second we define resources everything is",
    "start": "457669",
    "end": "463669"
  },
  {
    "text": "resource first at flow and that's why here you see a definition of a user or user as an ID email name status and then",
    "start": "463669",
    "end": "470300"
  },
  {
    "text": "by convention to create a user you use an object that is the resource name underscore form so in our language forms",
    "start": "470300",
    "end": "476419"
  },
  {
    "text": "are used to create instances of resources and there you can see the data defined for the resource one small thing",
    "start": "476419",
    "end": "481669"
  },
  {
    "text": "just because it's 2018 gdpr which is the new privacy regulation for Europe which a lot of people have had to scramble and",
    "start": "481669",
    "end": "488300"
  },
  {
    "text": "invests you comply with in an API first world we simply added an annotation",
    "start": "488300",
    "end": "493370"
  },
  {
    "text": "where we can add a field level say for example email is considered personal data and from that we can automatically",
    "start": "493370",
    "end": "500000"
  },
  {
    "text": "generate a complete trace through every single service at flow for anything that may contain email we know we don't have",
    "start": "500000",
    "end": "507139"
  },
  {
    "text": "to guess it's programmatic we know and that's possible because we start with the API definitions so we've got our",
    "start": "507139",
    "end": "513169"
  },
  {
    "text": "user how do we actually interact with the user this is how we create let's call operations on the API what we really do is we take a user resource and",
    "start": "513169",
    "end": "519919"
  },
  {
    "text": "we expose that we say here's a resource it's a user it has two operations one is they get by ID the second is at post the",
    "start": "519919",
    "end": "527180"
  },
  {
    "text": "post accepts a body of type user form and this is how you create a user so again we're taking our user resource and",
    "start": "527180",
    "end": "533269"
  },
  {
    "text": "then exposing our user model and then exposing that as a resource is what makes it available through the API what does it mean for API to be",
    "start": "533269",
    "end": "540320"
  },
  {
    "text": "first class the API definitions are not in the micro service repos they are in a dedicated git repo called API how do you",
    "start": "540320",
    "end": "547430"
  },
  {
    "text": "make a change to an API you open a text editor you modify the JSON file and you",
    "start": "547430",
    "end": "553070"
  },
  {
    "text": "create a pull request what happens when you create a pull request well of course continuous integration why wouldn't we run automated tests on",
    "start": "553070",
    "end": "559040"
  },
  {
    "text": "the definition of our API and so here you can see an example of a pull request in gilt and get just on the definition",
    "start": "559040",
    "end": "565550"
  },
  {
    "text": "of the API we've been touched implementation people can collaborate we can have feedback through the standard",
    "start": "565550",
    "end": "570710"
  },
  {
    "text": "tools that we use and on the right there you see a set of linters that have run over the definition of the API what's a",
    "start": "570710",
    "end": "576170"
  },
  {
    "text": "linter look like here's an example of a real linter so linters do lots of things but ultimately our goal with all of our",
    "start": "576170",
    "end": "582530"
  },
  {
    "text": "one of the big goals of continuous integration on the api definition is that it really should feel like one person wrote the entire API your",
    "start": "582530",
    "end": "589190"
  },
  {
    "text": "customers don't care about develop your team one and Team two having different",
    "start": "589190",
    "end": "594410"
  },
  {
    "text": "opinions on how rest works they care about using software from your company",
    "start": "594410",
    "end": "599690"
  },
  {
    "text": "in a consistent way and automated linters on the API definition is a pretty powerful tool just make sure that",
    "start": "599690",
    "end": "605720"
  },
  {
    "text": "things feel that way so this is just a simple example of a linter that walks through the entire service the service",
    "start": "605720",
    "end": "610820"
  },
  {
    "text": "is an instance of the entire API and just validates that everybody is defined paths in lower case as an example",
    "start": "610820",
    "end": "618700"
  },
  {
    "start": "620000",
    "end": "649000"
  },
  {
    "text": "breaking changes in api's so from a policy perspective what's really interesting is like we're actually",
    "start": "621220",
    "end": "626600"
  },
  {
    "text": "empowered to just make a decision to say we don't break things that actually is just a decision that we get to make we get to make that decision for databases",
    "start": "626600",
    "end": "632630"
  },
  {
    "text": "and schema design there we can make the same decision in API so we just decide don't break api's that's it you just",
    "start": "632630",
    "end": "638630"
  },
  {
    "text": "decide it really is that simple once you make that decision though and I think it's a critical decision to make now you",
    "start": "638630",
    "end": "644930"
  },
  {
    "text": "have to build practices around that and one of those practices is to make sure that you know that you may be about to",
    "start": "644930",
    "end": "651380"
  },
  {
    "start": "649000",
    "end": "709000"
  },
  {
    "text": "break an API and so this is an example these examples are from a tool called API builder which is something we",
    "start": "651380",
    "end": "656390"
  },
  {
    "text": "started at gilt it's an open source and free hosted solution for a 10-10 API",
    "start": "656390",
    "end": "663050"
  },
  {
    "text": "designs a lot of these practices and one of the really nice things that comes native is annotation of every single change at a detail level in the API",
    "start": "663050",
    "end": "669260"
  },
  {
    "text": "include things that are breaking so trivial now if you want to just add a continuous integration test that says did you break",
    "start": "669260",
    "end": "675649"
  },
  {
    "text": "your API if so the build failed right and at least build a process to review it and so you'll know you can build that",
    "start": "675649",
    "end": "682220"
  },
  {
    "text": "into the process and also super interesting that this is happening in the API design phase right so before",
    "start": "682220",
    "end": "688220"
  },
  {
    "text": "we've built any code or really invested in implementation or any UAT we already know upfront that wait a",
    "start": "688220",
    "end": "693920"
  },
  {
    "text": "minute we're on a path that may be a breaking change and now we can make the decisions that's something we want to do",
    "start": "693920",
    "end": "698930"
  },
  {
    "text": "or do we want to course-correct and it's cheap to course-correct cuz this is the very very beginning of the process this",
    "start": "698930",
    "end": "706190"
  },
  {
    "text": "is cool by the way I mean I think it is great so now we can go ahead and start",
    "start": "706190",
    "end": "713300"
  },
  {
    "start": "709000",
    "end": "778000"
  },
  {
    "text": "implementing our service we've got our API user recent user model Muse reformed user resource let's go do some stuff so",
    "start": "713300",
    "end": "719720"
  },
  {
    "text": "this is the first time we get into code generation if you're using G RPC or any",
    "start": "719720",
    "end": "725120"
  },
  {
    "text": "binary protocols you probably already using code generation here I think the really important thing about code generation is that there are",
    "start": "725120",
    "end": "732110"
  },
  {
    "text": "opportunities to say the specification is in fact the first-class thing that we built don't duplicate that anything that",
    "start": "732110",
    "end": "740870"
  },
  {
    "text": "can be driven off the specification there's an opportunity to do it either through reflection dynamically or through code generation in particular",
    "start": "740870",
    "end": "748400"
  },
  {
    "text": "become a fan of code generation because it's really easy for anybody to read the code and we invest heavily in the",
    "start": "748400",
    "end": "754490"
  },
  {
    "text": "generators we write to make them readable so that you can really really understand what's happening without",
    "start": "754490",
    "end": "760339"
  },
  {
    "text": "having to dig through meg and Meg of source code in libraries that you may",
    "start": "760339",
    "end": "766640"
  },
  {
    "text": "not be familiar familiar with so here's an example we run API builder update for the app user and this created three this it",
    "start": "766640",
    "end": "774800"
  },
  {
    "text": "generated three types of things the routes file a client and a mock client so let's go and look at them for the",
    "start": "774800",
    "end": "779990"
  },
  {
    "start": "778000",
    "end": "849000"
  },
  {
    "text": "routes file all of our micro services at flow are written in scala and play and in play the way that you respond to an",
    "start": "779990",
    "end": "786950"
  },
  {
    "text": "HTTP HTTP request is you declare a route so we automatically generate this route file from the API builder specification",
    "start": "786950",
    "end": "793040"
  },
  {
    "text": "get users by ID post users this is really nice because now we're",
    "start": "793040",
    "end": "798110"
  },
  {
    "text": "guaranteeing that our implementation it has these methods defined right because when we generate the routes know",
    "start": "798110",
    "end": "804230"
  },
  {
    "text": "and everyone compiled the compiler complains because these things don't exist so we can actually have a guarantee that the operations that are",
    "start": "804230",
    "end": "811100"
  },
  {
    "text": "exposed on our resources in our API actually are in fact implemented by the service another thing to note is user",
    "start": "811100",
    "end": "818360"
  },
  {
    "text": "friendly paths and we didn't actually specify the path we can provide some nice defaults that are restful and",
    "start": "818360",
    "end": "825410"
  },
  {
    "text": "consistent naming this is also really important users get by ID users post if I told you we had a feature called",
    "start": "825410",
    "end": "831740"
  },
  {
    "text": "company you could probably now guess that to create a company it's going to be called companies that post to get a",
    "start": "831740",
    "end": "836809"
  },
  {
    "text": "company it's gonna be companies that get by ID and that consistency again is really really important because we want the API to feel like it was built by one",
    "start": "836809",
    "end": "843499"
  },
  {
    "text": "person for all of our users that are using our API whether they're internal or for our clients code generating a",
    "start": "843499",
    "end": "850550"
  },
  {
    "start": "849000",
    "end": "930000"
  },
  {
    "text": "client library so this is a client library that's used to communicate from with any of the services through the",
    "start": "850550",
    "end": "856339"
  },
  {
    "text": "REST API and this is an example of the implementation the post method this one is in Scala using play JSON but",
    "start": "856339",
    "end": "863360"
  },
  {
    "text": "essentially the key things here are this entirely generated from the specification again and really friendly",
    "start": "863360",
    "end": "869870"
  },
  {
    "text": "to use as a developer it's dot post and you pass in an instance of a user form and that's it it corresponds and again",
    "start": "869870",
    "end": "876290"
  },
  {
    "text": "the key message here is this little value to developers writing this over and over again and as you build microservices you'll have lots of them",
    "start": "876290",
    "end": "882740"
  },
  {
    "text": "and you're gonna spend all your time writing client libraries and then you imagine you introduced a second language all of a sudden your clients want say",
    "start": "882740",
    "end": "890120"
  },
  {
    "text": "you spell internally like us your client wants interact with you and Ruby or and go or whatever now you have to take all those fine libraries that you wrote and",
    "start": "890120",
    "end": "895879"
  },
  {
    "text": "write them again in every single language and that work while valuable starts to compete with work that you",
    "start": "895879",
    "end": "901759"
  },
  {
    "text": "could be doing in terms of performance tuning implementing more features building new product so I think this is",
    "start": "901759",
    "end": "907610"
  },
  {
    "text": "really really important and in the industry where I think a lot of things fall down is when building code",
    "start": "907610",
    "end": "913579"
  },
  {
    "text": "generation I think a lot of people just optimize to make things possible but that's not the intent the goal here is",
    "start": "913579",
    "end": "919370"
  },
  {
    "text": "to make the generated client so nice that a developer will love using it because only then will developers not",
    "start": "919370",
    "end": "925579"
  },
  {
    "text": "write their own handcrafted client library and third we'll look at",
    "start": "925579",
    "end": "932679"
  },
  {
    "start": "930000",
    "end": "999000"
  },
  {
    "text": "generating a mock client we're gonna talk a lot about testing testing has to be thought about from the",
    "start": "932679",
    "end": "938270"
  },
  {
    "text": "start particularly in a micro service architecture there's a lot of asynchronous communication going on here and one of the this is an example of a",
    "start": "938270",
    "end": "945290"
  },
  {
    "text": "mock client the actual method generating the mock client and the mock clients that we produce in Scala are they",
    "start": "945290",
    "end": "951110"
  },
  {
    "text": "compile and they're fully functional and what this really means and because they come from that same API specification it",
    "start": "951110",
    "end": "957860"
  },
  {
    "text": "allows us to do high fidelity fast testing we can actually write a bunch of unit tests and integration tests against",
    "start": "957860",
    "end": "963440"
  },
  {
    "text": "the mocks and have confidence that those tests that we wrote are sufficient to prove that things are going to work",
    "start": "963440",
    "end": "969260"
  },
  {
    "text": "correctly in production mocking is never 100% and so there's other techniques that complement this to get to that",
    "start": "969260",
    "end": "974930"
  },
  {
    "text": "final you never get to 100% confidence pretty close in practice I would say in",
    "start": "974930",
    "end": "981410"
  },
  {
    "text": "three years I can think of two bugs that made it to production where that couldn't be caught by mocks and they had",
    "start": "981410",
    "end": "987589"
  },
  {
    "text": "to do with Network things like authentication being a little bit different on one particular resource so",
    "start": "987589",
    "end": "992900"
  },
  {
    "text": "we do this for everything generate everything from the spec now we have a good way to go and test everything great",
    "start": "992900",
    "end": "1001180"
  },
  {
    "start": "999000",
    "end": "1044000"
  },
  {
    "text": "so now let's talk about we're actually ready to write some code we're developers like to write some code so here's what code looks like get flow so",
    "start": "1001180",
    "end": "1006730"
  },
  {
    "text": "this is the actual implementation of the post method user Dao create we'll talk about the Dao in a bit and basically",
    "start": "1006730",
    "end": "1013270"
  },
  {
    "text": "I've got a user from the request request body as user form there comes back about Asian errors or I've created user and we",
    "start": "1013270",
    "end": "1019360"
  },
  {
    "text": "just case I can serialize to JSON this is what all basically all our controllers that flow look like this it's the same thing over and over again",
    "start": "1019360",
    "end": "1026010"
  },
  {
    "text": "validate and create and so now let's talk about well first I mean that's",
    "start": "1026010",
    "end": "1033970"
  },
  {
    "text": "pretty bad Scotty that's beautiful code simple to read and that's what we want write the code that we're actually",
    "start": "1033970",
    "end": "1039100"
  },
  {
    "text": "writing as developers we make it as simple as possible and there's even fewer bugs that we're gonna catch in our tests let's talk about this users now",
    "start": "1039100",
    "end": "1045970"
  },
  {
    "start": "1044000",
    "end": "1374000"
  },
  {
    "text": "and a little bit about database architecture first each micro service application owns its own database so the",
    "start": "1045970",
    "end": "1052210"
  },
  {
    "text": "way we run this is every if you need a database you get a database and that database belongs to the service no other",
    "start": "1052210",
    "end": "1058540"
  },
  {
    "text": "service is allowed to connect to that database it is private like the database is not part of a micro services interface it is private every other",
    "start": "1058540",
    "end": "1065440"
  },
  {
    "text": "service and communicates with the service either through the API or through events and this is really important because once you let people",
    "start": "1065440",
    "end": "1071050"
  },
  {
    "text": "to your database connect your database through JDBC you lose the ability to know if it changes safe just lose it",
    "start": "1071050",
    "end": "1079000"
  },
  {
    "text": "and that turns into actually an np-complete problem over time you will not be able to prove if you can make a",
    "start": "1079000",
    "end": "1085780"
  },
  {
    "text": "change in the database and that's usually frustrating we talk about tech debt and all these different variations this is a very insidious form of tech",
    "start": "1085780",
    "end": "1092500"
  },
  {
    "text": "debt so the solution is just don't let anybody in it's yours it's not part of the interface it works if we have a",
    "start": "1092500",
    "end": "1097930"
  },
  {
    "text": "great API and if we publish the right event because everybody else will be able to continue and do the things that",
    "start": "1097930",
    "end": "1103090"
  },
  {
    "text": "they need how do you create a database well this is how you create database dev RDS we're running on RDS and Amazon -",
    "start": "1103090",
    "end": "1110680"
  },
  {
    "text": "app tests and you get your default settings it's gonna be called test DB these are our default settings you can",
    "start": "1110680",
    "end": "1116140"
  },
  {
    "text": "change them if you want but the important thing here in terms of investment in tooling is we have a single CLI that we call dev intended for",
    "start": "1116140",
    "end": "1122800"
  },
  {
    "text": "developers and that's what all developers use for all their common all of our common infrastructure and development tests it's one thing I want",
    "start": "1122800",
    "end": "1129460"
  },
  {
    "text": "to know how to do something don't know where it is first thing you do is you try enter and you get a menu of a bunch of stuff that people before you have",
    "start": "1129460",
    "end": "1134860"
  },
  {
    "text": "done that is now automated in this consistent way this is super important has to be the same one of the things I",
    "start": "1134860",
    "end": "1142180"
  },
  {
    "text": "love they tell you I'll share this anyway I love logging into Amazon which",
    "start": "1142180",
    "end": "1147310"
  },
  {
    "text": "of course nobody has to do on a daily basis cuz everything's automated and then just looking at our database names and they all follow the exact same",
    "start": "1147310",
    "end": "1153250"
  },
  {
    "text": "naming convention everything is the same everything is automated but it's only automated because somebody took the time to invest and make the CLI",
    "start": "1153250",
    "end": "1159790"
  },
  {
    "text": "so that the experts in database do it once and everybody else just benefits",
    "start": "1159790",
    "end": "1165100"
  },
  {
    "text": "from their work we don't need everyone to be an expert in every piece of technology great so now let's actually",
    "start": "1165100",
    "end": "1170350"
  },
  {
    "text": "use the database we're talking about code generation we like code generation so why don't we try to describe our",
    "start": "1170350",
    "end": "1175840"
  },
  {
    "text": "database needs in metadata and code generate our way to a solution so first we'll describe our scholar",
    "start": "1175840",
    "end": "1181900"
  },
  {
    "text": "requirements here the package name is going to be DB generated ID generator this is just a flow thing and how we",
    "start": "1181900",
    "end": "1187060"
  },
  {
    "text": "generate unique IDs this one will start with the be fix USR for user now we'll describe our storage requirements in a",
    "start": "1187060",
    "end": "1192700"
  },
  {
    "text": "piece equal attribute we'll say the primary key is a field named ID and our we would like to create an index on the",
    "start": "1192700",
    "end": "1197770"
  },
  {
    "text": "field name email we then wrote a code generator that takes this metadata and actually creates the table definition",
    "start": "1197770",
    "end": "1203500"
  },
  {
    "text": "they did access and it's important to note that even though we're using the same tool chain for capturing the metadata and for",
    "start": "1203500",
    "end": "1208910"
  },
  {
    "text": "writing the code generators this has we have divorced our storage needs from our API right those are two different things",
    "start": "1208910",
    "end": "1215799"
  },
  {
    "text": "what does the table look like here's an example of the code generation that produces a table and I think there's",
    "start": "1215799",
    "end": "1221960"
  },
  {
    "text": "nothing fancy here but there's a few really interesting things one I personally hate debugging the difference",
    "start": "1221960",
    "end": "1227270"
  },
  {
    "text": "between null and empty string and an Excel report I don't know how many of you have done that I hate it and so from",
    "start": "1227270",
    "end": "1232789"
  },
  {
    "text": "the beginning we came up with a convention that we're not going to allow that at flow and we have these constraints in Postgres util non-empty trim string ID and if you",
    "start": "1232789",
    "end": "1240380"
  },
  {
    "text": "try to insert an empty string you're getting it an error and we're never going to have this we're gonna have good clean data from the beginning because",
    "start": "1240380",
    "end": "1246710"
  },
  {
    "text": "we're using cogeneration this is how everything is we have the ability to enforce a policy like this across the",
    "start": "1246710",
    "end": "1251929"
  },
  {
    "text": "company I think maybe more interesting is there's this thing called hash code at the end of the table actually this",
    "start": "1251929",
    "end": "1257059"
  },
  {
    "text": "came from a conversation my colleague met here at the beginning as we started updating our records a lot we kept",
    "start": "1257059",
    "end": "1262669"
  },
  {
    "text": "generating all this load on the database then many of the updates are actually the same right clients just took their catalog ecommerce catalog and sent us a",
    "start": "1262669",
    "end": "1268549"
  },
  {
    "text": "product catalog every day and some of our clients and that's their whole catalog every hour not much changes every hour and so what we did is we",
    "start": "1268549",
    "end": "1275150"
  },
  {
    "text": "implemented a global solution that simply computes the hash code of what we're about to do and we only actually",
    "start": "1275150",
    "end": "1281059"
  },
  {
    "text": "update the record in the database that the hash code changed that feature is available for every single table at flow",
    "start": "1281059",
    "end": "1286490"
  },
  {
    "text": "across every single micro service and developers don't have to think about it because we have the point of leverage of",
    "start": "1286490",
    "end": "1291530"
  },
  {
    "text": "metadata and the code generation that we could do that and that's a really really powerful thing we probably have saved",
    "start": "1291530",
    "end": "1297799"
  },
  {
    "text": "100x rights on our databases and we could do it globally because we've had the discipline to use metadata and not",
    "start": "1297799",
    "end": "1304460"
  },
  {
    "text": "want which the word this is not a creating and defining your database",
    "start": "1304460",
    "end": "1309830"
  },
  {
    "text": "table is not a area where at flow we value creativity right this is a known",
    "start": "1309830",
    "end": "1314840"
  },
  {
    "text": "problem we just need to get the work done what are the scholar classes look like same thing big thing here is just a",
    "start": "1314840",
    "end": "1320990"
  },
  {
    "text": "normalized access to the databases and specifically one small thing to pick out because we documented that the email",
    "start": "1320990",
    "end": "1326690"
  },
  {
    "text": "column has an index there on the find all method how do you even get a collection of objects you'll see that we",
    "start": "1326690",
    "end": "1332030"
  },
  {
    "text": "can filter by an email or filter by the presence of an email house email email this is driven by the fact that there's",
    "start": "1332030",
    "end": "1337400"
  },
  {
    "text": "an index there and the only reason I highlight this is because I feel like in industry there's a lot of people who say oh my gosh things are slow I got to fix",
    "start": "1337400",
    "end": "1343339"
  },
  {
    "text": "it I created an index I'm a hero things are fast again no the hero is the person who prevents",
    "start": "1343339",
    "end": "1348499"
  },
  {
    "text": "you from ever having that problem before they're the unsung hero and to do that you have to think about this in advance and one way to do that is to make sure",
    "start": "1348499",
    "end": "1354829"
  },
  {
    "text": "that your data access layer is triggered to what you're actually indexing for retrieval and that will happen is the",
    "start": "1354829",
    "end": "1360559"
  },
  {
    "text": "developer will go in and say I need to find a user by email and there won't be a find by email method and guess what I",
    "start": "1360559",
    "end": "1367299"
  },
  {
    "text": "may want to put an index on that and we catch it at the beginning of the design process and drive quality through the",
    "start": "1367299",
    "end": "1372799"
  },
  {
    "text": "entire infrastructure great testing so here's an example of how to create an",
    "start": "1372799",
    "end": "1378589"
  },
  {
    "start": "1374000",
    "end": "1456000"
  },
  {
    "text": "instance of our mock client for testing so this is we're getting a new client in play they use dependency injection so we",
    "start": "1378589",
    "end": "1384829"
  },
  {
    "text": "grab an instance of WS clients for the play thing the URL localhost dollar port dollar port is where our integration",
    "start": "1384829",
    "end": "1390169"
  },
  {
    "text": "test is running and here we put two off headers this identify as a user pretty basic stuff but what this enables is",
    "start": "1390169",
    "end": "1396919"
  },
  {
    "text": "real tests that look like this so the get user by ID method that we started with at the beginning this is an entire",
    "start": "1396919",
    "end": "1403159"
  },
  {
    "text": "integration test end to end running with all the mock clients like from the generated code I create a user and now a",
    "start": "1403159",
    "end": "1409009"
  },
  {
    "text": "wait it's a future users get by ID and I better get back the user I expected and then the second test case if I get a",
    "start": "1409009",
    "end": "1415549"
  },
  {
    "text": "user by random ID I better get back a knock down to 404 that's it this is a real test and this is using actually",
    "start": "1415549",
    "end": "1421669"
  },
  {
    "text": "using the mock client actually making an internal HTTP request within the play framework and we're testing end to end",
    "start": "1421669",
    "end": "1427009"
  },
  {
    "text": "and I will tell you these tests work because when we write tests like this we don't we never find discrepancies in",
    "start": "1427009",
    "end": "1434059"
  },
  {
    "text": "production or said another way of this over the past few years through all of this focus on testing and really",
    "start": "1434059",
    "end": "1440149"
  },
  {
    "text": "leveraging the specification I've come to a point where I expect our team expects that as code moves to production",
    "start": "1440149",
    "end": "1447109"
  },
  {
    "text": "it just works you're not surprised we'll verify it and it just works over and over and over again and that drives",
    "start": "1447109",
    "end": "1454369"
  },
  {
    "text": "quality that drives team velocity great so we've written our service wrote our really beautiful code tested it time to",
    "start": "1454369",
    "end": "1460729"
  },
  {
    "start": "1456000",
    "end": "1463000"
  },
  {
    "text": "deploy so let's talk quickly about deployment continuous delivery is a prerequisite to managing micro service",
    "start": "1460729",
    "end": "1466639"
  },
  {
    "start": "1463000",
    "end": "1597000"
  },
  {
    "text": "architectures you can quote me it is absolutely essential if your team is",
    "start": "1466639",
    "end": "1473470"
  },
  {
    "text": "spending hours babysitting releases and you have 100 microservices good luck you're going to be spending your time",
    "start": "1473470",
    "end": "1480039"
  },
  {
    "text": "deploying your services it just does it will just bottleneck you ediot when we",
    "start": "1480039",
    "end": "1485440"
  },
  {
    "text": "move down the path from monolith and started to distribute this was the first big investment guilt made into a",
    "start": "1485440",
    "end": "1491320"
  },
  {
    "text": "delivery system to deploy software and it was an excellent decision it probably took us nine months to get to a point",
    "start": "1491320",
    "end": "1497470"
  },
  {
    "text": "where it was reliable but definitely the right first decision continuous delivery means a ton of things what we mean is",
    "start": "1497470",
    "end": "1504340"
  },
  {
    "text": "that a deploy is triggered by a get tag we like it we use git to deploy you created tag and then tag gets deployed",
    "start": "1504340",
    "end": "1510220"
  },
  {
    "text": "and then in addition the continuous part is we automatically create tags whenever there's a change on master that actually",
    "start": "1510220",
    "end": "1517539"
  },
  {
    "text": "triggers a system time I created tag and tag automatically does a bunch of stuff like go create a docker image go set the",
    "start": "1517539",
    "end": "1523059"
  },
  {
    "text": "desired state principles of a continuous delivery system or metrics 100%",
    "start": "1523059",
    "end": "1528309"
  },
  {
    "text": "automated and 100% reliable rarely rarely do systems behave that way",
    "start": "1528309",
    "end": "1535029"
  },
  {
    "text": "right and so red flag is if deploys keep failing and you're finding developers having to log into lots of systems to",
    "start": "1535029",
    "end": "1541480"
  },
  {
    "text": "debug why deploy failed all that time is wasted and that needs to be fixed to get",
    "start": "1541480",
    "end": "1547389"
  },
  {
    "text": "back the velocity across the platform here's our our dashboard what it looks",
    "start": "1547389",
    "end": "1552850"
  },
  {
    "text": "like so micro services when they were last deployed a deployed just sets the desired state to the latest tag and",
    "start": "1552850",
    "end": "1560289"
  },
  {
    "text": "white means nothing's going on and here's what it looks like I should say we use a really an open source project",
    "start": "1560289",
    "end": "1567159"
  },
  {
    "text": "that we created in a week and a half at the beginning of flow called Delta let me say that again our entire continuous",
    "start": "1567159",
    "end": "1573730"
  },
  {
    "text": "delivery system that deploys software thousands of times a week we wrote in a week and a half one person that's it",
    "start": "1573730",
    "end": "1581049"
  },
  {
    "text": "don't need a massive investment this isn't a insanely large project you just have to really focus on what you're",
    "start": "1581049",
    "end": "1586570"
  },
  {
    "text": "delivering and what you're delivering is a reliable pipeline to deploy software into the cloud I mean all these tools",
    "start": "1586570",
    "end": "1592269"
  },
  {
    "text": "exist you're just doing a little bit of plumbing to connect them so if you're interested that's Delta here's what it",
    "start": "1592269",
    "end": "1598059"
  },
  {
    "start": "1597000",
    "end": "1624000"
  },
  {
    "text": "looks like when Delta says when you change something and get github sends a webhook Delta says oh look something",
    "start": "1598059",
    "end": "1604390"
  },
  {
    "text": "to my project what's the head of master oh they had a master of something new created tag I got a new tag I'm gonna",
    "start": "1604390",
    "end": "1610150"
  },
  {
    "text": "set the desired state of my project in the new version so from 54 to 55 here and then just monitor just pulse",
    "start": "1610150",
    "end": "1616000"
  },
  {
    "text": "it's my daugher image ready great my document is ready Hey ECS gooddiplomat darker image and it just monitors that's",
    "start": "1616000",
    "end": "1621190"
  },
  {
    "text": "it it doesn't do anything fancy right configuration so I will say I would",
    "start": "1621190",
    "end": "1628030"
  },
  {
    "start": "1624000",
    "end": "1665000"
  },
  {
    "text": "speak for everyone I don't like describing my infrastructure needs with 10,000 lines",
    "start": "1628030",
    "end": "1633070"
  },
  {
    "text": "of JSON I don't understand it I don't know what security groups are I don't know what VPNs are I'm a software",
    "start": "1633070",
    "end": "1639730"
  },
  {
    "text": "developer right in that role and so I think when the key things for micro services infrastructure is really really to try to get it down to the most basic",
    "start": "1639730",
    "end": "1646150"
  },
  {
    "text": "elements and let the people who understand infrastructure make these recommendations for the company and this",
    "start": "1646150",
    "end": "1652960"
  },
  {
    "text": "is what our configuration looks like for deploying stuff it's six lines of the ML and if you needed a bigger instance my",
    "start": "1652960",
    "end": "1661270"
  },
  {
    "text": "guess is everyone here could figure out how to do it and that's what we want right self-documenting another key thing that we see we do and",
    "start": "1661270",
    "end": "1668350"
  },
  {
    "start": "1665000",
    "end": "1725000"
  },
  {
    "text": "we see all over the place is standardize health checks and ours wrote on internal health check it's just a standard URL",
    "start": "1668350",
    "end": "1674410"
  },
  {
    "text": "that's well known every service implements this how do they implement this they pull in the specification of the health check from the API spec",
    "start": "1674410",
    "end": "1680410"
  },
  {
    "text": "because how else would you expose an endpoint right and so here you see a simple model called health check which just has status we say healthy when",
    "start": "1680410",
    "end": "1687550"
  },
  {
    "text": "healthy otherwise we describe the problem 200 healthy means good for 22 text means bad and this is really",
    "start": "1687550",
    "end": "1694570"
  },
  {
    "text": "important I mean just a critical element but just to institutionalize some type of health check into all the micro services even if at the beginning is",
    "start": "1694570",
    "end": "1700750"
  },
  {
    "text": "just returning at 200 at least you've got the placeholder to add checks in the future things that services do make sure",
    "start": "1700750",
    "end": "1706390"
  },
  {
    "text": "they have access to their database make sure that any environment variables are actually available in production and",
    "start": "1706390",
    "end": "1711520"
  },
  {
    "text": "what this allows us to do is during a deploy if any of that isn't ready that instance just fails to become healthy",
    "start": "1711520",
    "end": "1717400"
  },
  {
    "text": "and it's never put into traffic and then we can go debug whatever happened at the deploy and do that on our own time as",
    "start": "1717400",
    "end": "1722920"
  },
  {
    "text": "opposed to having an issue in production and now it's time to talk about events",
    "start": "1722920",
    "end": "1728700"
  },
  {
    "start": "1725000",
    "end": "1729000"
  },
  {
    "text": "so the way I like to describe our API is that flow or credibly proud of them you",
    "start": "1728700",
    "end": "1734440"
  },
  {
    "start": "1729000",
    "end": "1774000"
  },
  {
    "text": "everything we do is API first it's beautiful as well document they're simple they're consistent",
    "start": "1734440",
    "end": "1739920"
  },
  {
    "text": "perfectly happy if we never use our api's we'd prefer you to use our events rooms instead and more than that our own",
    "start": "1739920",
    "end": "1747310"
  },
  {
    "text": "internal network we don't want to use our api's at all there are a few rare examples where you",
    "start": "1747310",
    "end": "1752980"
  },
  {
    "text": "really really need synchronous operations and in those instances we will make API calls for everything else",
    "start": "1752980",
    "end": "1758860"
  },
  {
    "text": "our own services just consume events and process everything asynchronously and I think we've been in a lot of talks on",
    "start": "1758860",
    "end": "1764980"
  },
  {
    "text": "this particularly I think this year even more momentum around this sort of approach and it it really really works",
    "start": "1764980",
    "end": "1771360"
  },
  {
    "text": "but requires again an investment to make the tooling right so let's talk first about a few principles of an event",
    "start": "1771360",
    "end": "1777010"
  },
  {
    "start": "1774000",
    "end": "1898000"
  },
  {
    "text": "interface first-class schema for all events you have to have events in well-defined schema everyone who's using",
    "start": "1777010",
    "end": "1783220"
  },
  {
    "text": "binary formats like G RPC is in great shape everyone who's using things like swagger is in terrible shape the big",
    "start": "1783220",
    "end": "1790000"
  },
  {
    "text": "difference there is binary formats forced developers to use the cogeneration to produce and consume",
    "start": "1790000",
    "end": "1795340"
  },
  {
    "text": "events which is a good way of guaranteeing that the schema is in fact correct and regardless of the tooling",
    "start": "1795340",
    "end": "1800740"
  },
  {
    "text": "that's used that correctness for the events in the API is is critical critical critical to make sure it is",
    "start": "1800740",
    "end": "1807580"
  },
  {
    "text": "true if you find an example in the organization where behavior and production differs from the declared",
    "start": "1807580",
    "end": "1813040"
  },
  {
    "text": "spec in my opinion that's like the Toyota Kaizen process you pull the alarm",
    "start": "1813040",
    "end": "1818530"
  },
  {
    "text": "everybody stops and you fix the process so that can never happen again because of developers lose trust in the",
    "start": "1818530",
    "end": "1824560"
  },
  {
    "text": "specification it turns into an incredibly huge bottleneck in software development all of our producers",
    "start": "1824560",
    "end": "1831520"
  },
  {
    "text": "guarantee at least once delivery all of our consumers must assume multi deliveries and therefore have to",
    "start": "1831520",
    "end": "1836620"
  },
  {
    "text": "implement idempotency right there's the semantics which we chose I think today quite common it works",
    "start": "1836620",
    "end": "1843490"
  },
  {
    "text": "puts a little bit more emphasis on the consumers to make sure that they implement idempotency but keeps the system quite reliable and just a few",
    "start": "1843490",
    "end": "1850090"
  },
  {
    "text": "metrics we're built on top of Kinesis which has some inherent latency on it but end-to-end single event latency at",
    "start": "1850090",
    "end": "1855520"
  },
  {
    "text": "Flo is about half a second right so this is from time database record created published to Kinesis consumed on the",
    "start": "1855520",
    "end": "1861940"
  },
  {
    "text": "other side and some action taken on it which for almost everything that we do is plenty and the things that need to be",
    "start": "1861940",
    "end": "1870310"
  },
  {
    "text": "faster end up being either actually we've never had to do anything bastard we just need those few things in curiously and our systems based on",
    "start": "1870310",
    "end": "1876539"
  },
  {
    "text": "Postgres we'll walk through how we do it we emphasize a simple system that was easy to debug and frankly low-tech and",
    "start": "1876539",
    "end": "1886409"
  },
  {
    "text": "we'll walk through but it still is scaling to about a billion events per day per service which again for many use",
    "start": "1886409",
    "end": "1892470"
  },
  {
    "text": "cases by far I think the majority use cases that many of us interact with on a daily basis is plenty so here's how we",
    "start": "1892470",
    "end": "1898140"
  },
  {
    "start": "1898000",
    "end": "1961000"
  },
  {
    "text": "do it so on the producers we create a journal of all operations on the table the journal basically de stores every",
    "start": "1898140",
    "end": "1905850"
  },
  {
    "text": "insert update delete along with the operation on that table so we have a complete history of everything that ever happened and so in the users table you",
    "start": "1905850",
    "end": "1912570"
  },
  {
    "text": "can think of the record in the users table as the current view of that user record and then behind it there will be",
    "start": "1912570",
    "end": "1917580"
  },
  {
    "text": "a journal users table which has every single operation when we insert into the",
    "start": "1917580",
    "end": "1923880"
  },
  {
    "text": "journal table we queue that journal record to be published real-time asynchronously we publish one event per",
    "start": "1923880",
    "end": "1929220"
  },
  {
    "text": "journal record right insert into users insert into journal users insert into a",
    "start": "1929220",
    "end": "1934529"
  },
  {
    "text": "cue that there is a journal record to publish notify we use actors notify an actor that something has changed actor",
    "start": "1934529",
    "end": "1940500"
  },
  {
    "text": "comes in gets a bunch of work and publishes them to Kinesis replay becomes",
    "start": "1940500",
    "end": "1946890"
  },
  {
    "text": "quite simple because you can either just riku the record or frankly what developers do is just update the update",
    "start": "1946890",
    "end": "1953309"
  },
  {
    "text": "user set ID close ID or ID is five and it just goes through the chain again and that user gets published so replay becomes quite simple on the",
    "start": "1953309",
    "end": "1962610"
  },
  {
    "start": "1961000",
    "end": "2118000"
  },
  {
    "text": "consumer side consumers read off of Kinesis get a batch of records they actually insert them into a local",
    "start": "1962610",
    "end": "1968580"
  },
  {
    "text": "database into their local database in basically temporary storage it is",
    "start": "1968580",
    "end": "1973590"
  },
  {
    "text": "partitioned for pass removal on event arrival we just queue that there's an event to be consumed send a message to",
    "start": "1973590",
    "end": "1979380"
  },
  {
    "text": "an actor that something new has come in and then we do this in micro batches by default every 250 milliseconds we grab a",
    "start": "1979380",
    "end": "1985710"
  },
  {
    "text": "batch of all the new events and then process them in the app any failures are recorded locally and published to a",
    "start": "1985710",
    "end": "1992070"
  },
  {
    "text": "monitoring system so that you you actually see we will receive",
    "start": "1992070",
    "end": "1998279"
  },
  {
    "text": "notifications if there are kind of if you see any build up in failure queues and then operationally we work so that",
    "start": "1998279",
    "end": "2004190"
  },
  {
    "text": "there are no failure and failures are treated first-class it's not a product usually not a production issue but within hours gets",
    "start": "2004190",
    "end": "2010550"
  },
  {
    "text": "looked at resolved and often the solution is either a bug fix or a replay or something",
    "start": "2010550",
    "end": "2016640"
  },
  {
    "text": "I think visibility on errors is super important right and by having a local copy of the event in the consumer once",
    "start": "2016640",
    "end": "2023510"
  },
  {
    "text": "you fix the bug that caused the error to happen in the first place you just regret to be processed",
    "start": "2023510",
    "end": "2029060"
  },
  {
    "text": "you don't have to leave you don't have to go back to Kinesis you don't have to go back to the producer because you have a local copy of your event you fix the",
    "start": "2029060",
    "end": "2035270"
  },
  {
    "text": "problem you actually have all the data as it's really easy to write a test case for it fix the problem and then just",
    "start": "2035270",
    "end": "2040640"
  },
  {
    "text": "riku the record to be processed this is how we define our event schemas again we",
    "start": "2040640",
    "end": "2047120"
  },
  {
    "text": "like to use the same we like one tool for everything less to learn and we use the same tool in this case API builder",
    "start": "2047120",
    "end": "2053090"
  },
  {
    "text": "to define our events so the way this works is we define one model per event in this case four users we have two",
    "start": "2053090",
    "end": "2058399"
  },
  {
    "text": "events one called user absurd it so users insert it an insert or an update on a user and the second called user",
    "start": "2058400",
    "end": "2063919"
  },
  {
    "text": "deleted where a user was deleted those are the two models we group models into Union types and so an event types will",
    "start": "2063920",
    "end": "2072020"
  },
  {
    "text": "go into a single Union type in this case the Union type is called user underscore event by convention the first part is",
    "start": "2072020",
    "end": "2078260"
  },
  {
    "text": "the name of the microservice user the second part is the word event our convention is important because we have",
    "start": "2078260",
    "end": "2083480"
  },
  {
    "text": "a linter that will go through on events right and then we can say that every Union type maps to a single stream in",
    "start": "2083480",
    "end": "2090230"
  },
  {
    "text": "Kinesis and this is nice because now we can control you know if we have a very high velocity event very easy to just",
    "start": "2090230",
    "end": "2096320"
  },
  {
    "text": "give it a dedicated stream but generally the common case is that a stream 8 8 micro service will publish will have one",
    "start": "2096320",
    "end": "2104000"
  },
  {
    "text": "Union type that's published in one stream for others to consume streams are owned by exactly one service so if there",
    "start": "2104000",
    "end": "2110330"
  },
  {
    "text": "is a user event it can only be published by a single micro service that way you can go back to the source and again most",
    "start": "2110330",
    "end": "2116690"
  },
  {
    "text": "services define exactly one stream here's an example of what a linter looks like for events so one of the things we",
    "start": "2116690",
    "end": "2122930"
  },
  {
    "text": "do is every event must have a field called timestamp it must be in the documentation the second field the third",
    "start": "2122930",
    "end": "2130220"
  },
  {
    "text": "field if we're SAS platform we identify our customers by a field called organization so if this is a model that",
    "start": "2130220",
    "end": "2136430"
  },
  {
    "text": "is organization specific that there field will be the word organization if the model has a field called number for",
    "start": "2136430",
    "end": "2142980"
  },
  {
    "text": "example that will be the fourth field and so really pedantic stuff but at the end of the day all of our events look",
    "start": "2142980",
    "end": "2148590"
  },
  {
    "text": "the same you can see them at a user event you can probably guess what a company event looks like you'll have the exact same structure and that again",
    "start": "2148590",
    "end": "2155790"
  },
  {
    "text": "super important and actually enables when you have this kind of consistency it really enables you to do interesting",
    "start": "2155790",
    "end": "2161730"
  },
  {
    "text": "things like consistently Drive and drop your events into a data warehouse for",
    "start": "2161730",
    "end": "2167580"
  },
  {
    "text": "example you can actually do that programmatically because you have consistency",
    "start": "2167580",
    "end": "2173060"
  },
  {
    "start": "2172000",
    "end": "2225000"
  },
  {
    "text": "what's the database look like talk about journaling we have metadata that describes our storage requirements this is a nice storage requirement we'll call",
    "start": "2173250",
    "end": "2179280"
  },
  {
    "text": "a journal and Journal has two attributes how long and how frequent so this one we're going to journal data for three",
    "start": "2179280",
    "end": "2185190"
  },
  {
    "text": "days what this actually does in the database is create partitions that are daily and on day four we'll drop the old",
    "start": "2185190",
    "end": "2192030"
  },
  {
    "text": "partition from four days ago we use a couple of libraries one is a churning library for Postgres written by ryan",
    "start": "2192030",
    "end": "2198480"
  },
  {
    "text": "martin from guilt and second is we use partition managers I think is from Keith",
    "start": "2198480",
    "end": "2203580"
  },
  {
    "text": "at Omni ti but a great library for partitioning on Postgres and I know he's",
    "start": "2203580",
    "end": "2208590"
  },
  {
    "text": "optimistic that finally we're gonna get native partitioning I know we have native partitioning posters ten and I",
    "start": "2208590",
    "end": "2213660"
  },
  {
    "text": "think by 11:00 we're hopeful that the feature set that we need will become native but that's it all the developer",
    "start": "2213660",
    "end": "2219900"
  },
  {
    "text": "has to do is declare the retention policy and these journalists are created for them now we'll go to app code how do",
    "start": "2219900",
    "end": "2229620"
  },
  {
    "text": "we actually publish first thing we need to do is get a stream how do you get a stream we have a library for venting",
    "start": "2229620",
    "end": "2235740"
  },
  {
    "text": "that frankly we invested a lot of time to build so that the developer",
    "start": "2235740",
    "end": "2240810"
  },
  {
    "text": "experience of working with events was easy and simple so here's an example Q",
    "start": "2240810",
    "end": "2246120"
  },
  {
    "text": "is our internal library I'm going to be producing user events Q dot producer type tag user event and you'll see",
    "start": "2246120",
    "end": "2253170"
  },
  {
    "text": "nowhere in here you're going to see the stream name like why should somebody have to write a stream name they don't care we can use reflection and figure",
    "start": "2253170",
    "end": "2259680"
  },
  {
    "text": "out what stream we should be publishing to and just make sure it's consistent in this stream name you'll notice on at the",
    "start": "2259680",
    "end": "2266190"
  },
  {
    "text": "end this is so in cases where we like JSON because it works everywhere but in cases where you actually need a",
    "start": "2266190",
    "end": "2271750"
  },
  {
    "text": "naari format you can switch that and publish it a stream where essentially we embed the content type in the name of the stream stream this is the actual",
    "start": "2271750",
    "end": "2278710"
  },
  {
    "start": "2277000",
    "end": "2335000"
  },
  {
    "text": "code to produce an event takes an instance of a user version the user version maps to a record from the",
    "start": "2278710",
    "end": "2284500"
  },
  {
    "text": "journal table all of that again is code generated developers don't have to worry about that what a developer has to worry",
    "start": "2284500",
    "end": "2291130"
  },
  {
    "text": "about is actually publishing the event that they want and this is exactly what they do given a version of a user I'm gonna go",
    "start": "2291130",
    "end": "2297640"
  },
  {
    "text": "ahead and publish if it was an insert update publish and up started otherwise publish a deleted and interestingly",
    "start": "2297640",
    "end": "2303400"
  },
  {
    "text": "because we've Co generated the interfaces to this data what happens is all of our app code starts to look the",
    "start": "2303400",
    "end": "2308710"
  },
  {
    "text": "same right and now when we think about an unspoken benefit is any one of the",
    "start": "2308710",
    "end": "2315460"
  },
  {
    "text": "developers on the back-end team can actually drop in to any one of the other micro services and be productive yes",
    "start": "2315460",
    "end": "2322060"
  },
  {
    "text": "they need to have a domain knowledge and contacts and all that but it all behaves the same right and so the learning curve",
    "start": "2322060",
    "end": "2328540"
  },
  {
    "text": "as team shipped around and people move around really goes away and we can again stay focus on building product testing",
    "start": "2328540",
    "end": "2336310"
  },
  {
    "start": "2335000",
    "end": "2375000"
  },
  {
    "text": "testing is super important this is an actual test that goes end-to-end on publishing an event on user creation so",
    "start": "2336310",
    "end": "2343030"
  },
  {
    "text": "we create a user and then eventually our stream must contain an event of type",
    "start": "2343030",
    "end": "2348070"
  },
  {
    "text": "user absurd where the ID email and name actually use a recreated end-to-end test that's it and again we've invested a lot",
    "start": "2348070",
    "end": "2355090"
  },
  {
    "text": "of time in the library run streaming so that when this test passes locally it works in production and the only",
    "start": "2355090",
    "end": "2361540"
  },
  {
    "text": "difference in production is instead of an in-memory queue or now we now have",
    "start": "2361540",
    "end": "2366700"
  },
  {
    "text": "network in Kinesis right but from an interface perspective for all of us as developers it doesn't matter - Ella T",
    "start": "2366700",
    "end": "2373890"
  },
  {
    "text": "testing and similarly in the consumer side this is what it looks like you receive a user event payload as JSON",
    "start": "2373890",
    "end": "2381280"
  },
  {
    "start": "2375000",
    "end": "2434000"
  },
  {
    "text": "cast it to a user event and then we can pattern match and just store a copy of the event and we do this quite a bit we",
    "start": "2381280",
    "end": "2387880"
  },
  {
    "text": "really publish events and then if if I need to operate on users I keep my own copy of users locally and then interact",
    "start": "2387880",
    "end": "2393610"
  },
  {
    "text": "with that data there similarly testing on the consumer side again we spent a lot of time here making",
    "start": "2393610",
    "end": "2400270"
  },
  {
    "text": "sure that it's simple to write test investment to make it simple to write test factories make userupp sorted",
    "start": "2400270",
    "end": "2405509"
  },
  {
    "text": "factories you can probably guess was code generated based on the API spec and gives us an instance of the user absurdity vent I can publish it to my",
    "start": "2405509",
    "end": "2413039"
  },
  {
    "text": "mock stream and then in a few milliseconds we'll see that back up sort of my local database and so again I can",
    "start": "2413039",
    "end": "2419849"
  },
  {
    "text": "just go check my database so this is an end-to-end test event published my consumer picked it up and shortly",
    "start": "2419849",
    "end": "2426299"
  },
  {
    "text": "thereafter stored a copy in my local database and I can keep building on this critically critically important so now",
    "start": "2426299",
    "end": "2435539"
  },
  {
    "start": "2434000",
    "end": "2519000"
  },
  {
    "text": "our service is in production it's working we have a database we can create users everything is great we're done right now dependencies this is where",
    "start": "2435539",
    "end": "2442649"
  },
  {
    "text": "things get really interesting there's a decision to make in micro services to paint the to broad extremes one extreme",
    "start": "2442649",
    "end": "2449459"
  },
  {
    "text": "is once it's deployed you never touch it then factor in if you need to make an improvement you might as well rewrite it",
    "start": "2449459",
    "end": "2454669"
  },
  {
    "text": "or on the flip side you can decide to pay a tax as you go and just keep your dependencies up to date we've chosen to",
    "start": "2454669",
    "end": "2460559"
  },
  {
    "text": "pay that tax and our goal really in dependency management is to be able to",
    "start": "2460559",
    "end": "2465929"
  },
  {
    "text": "automatically update all of our services to the latest dependencies and this is I think this is the right thing to do it's",
    "start": "2465929",
    "end": "2472019"
  },
  {
    "text": "debatable because there's a tax you pay as you go but it means that if there's a critical security update in a library we can get it out to all our services and",
    "start": "2472019",
    "end": "2478079"
  },
  {
    "text": "ours if we have a critical bug fix in our core leverage and get it out in hours and it should take hours not weeks",
    "start": "2478079",
    "end": "2485339"
  },
  {
    "text": "or months and interestingly we thought a lot about making sure that the process we use for the software that we develop",
    "start": "2485339",
    "end": "2490829"
  },
  {
    "text": "internally was the same as the process we use for all our open source libraries it's the same it's just code I don't",
    "start": "2490829",
    "end": "2496259"
  },
  {
    "text": "care if I know the author personally or we sit at the same table it's at the end of the day it's just a library it's just code we should have the same process",
    "start": "2496259",
    "end": "2502499"
  },
  {
    "text": "whether we're together or a part ed flowed process wise we upgrade our",
    "start": "2502499",
    "end": "2507989"
  },
  {
    "text": "services generally at least once a week our process is once a week but I think this week we did it twice in fact we did",
    "start": "2507989",
    "end": "2513179"
  },
  {
    "text": "this morning about 10:30 a.m. it was done at 11:30 and so we've really",
    "start": "2513179",
    "end": "2518309"
  },
  {
    "text": "invested in the tooling here and I think this is one of the best things that we've done and I honestly have and I",
    "start": "2518309",
    "end": "2523829"
  },
  {
    "start": "2519000",
    "end": "2583000"
  },
  {
    "text": "don't see this much in industry myself this is dependency that floated IO is an open source project that we built early",
    "start": "2523829",
    "end": "2530519"
  },
  {
    "text": "on in the days of flow and what it does is you add you connect to github and you add a project it then crawls your",
    "start": "2530519",
    "end": "2536069"
  },
  {
    "text": "project and extracts all the dependencies automatically your libraries your bi it then crawls all the resolvers all",
    "start": "2536069",
    "end": "2541380"
  },
  {
    "text": "over the world and keeps track of every library in every version of every library and then is able to turn that",
    "start": "2541380",
    "end": "2546930"
  },
  {
    "text": "into an event stream back to you the human to say hey this project I have some recommendations for you for my user",
    "start": "2546930",
    "end": "2553020"
  },
  {
    "text": "project you're using live validation zero zero seventeen I would like to suggest that you upgrade to zero zero",
    "start": "2553020",
    "end": "2558390"
  },
  {
    "text": "eighteen and there is a crazy if you're into this stuff there's a crazy version tag parser built on scala parser",
    "start": "2558390",
    "end": "2565349"
  },
  {
    "text": "Combinator's if you're into that sort of thing and it friggin works so there are no false positives which is what drives",
    "start": "2565349",
    "end": "2570810"
  },
  {
    "text": "the cut of the quality of the automation if you're into Scala it's actually was a cross build aware and so if you're on",
    "start": "2570810",
    "end": "2578010"
  },
  {
    "text": "call at 10:00 you're not gonna get a recommendation to upgrade to a 2:11 library that sort of thing big investment but it's worth it because",
    "start": "2578010",
    "end": "2584160"
  },
  {
    "start": "2583000",
    "end": "2621000"
  },
  {
    "text": "once a week we can type this this script written in Scala ammonite scripts upgrade upgrade SC it reaches out to the",
    "start": "2584160",
    "end": "2591359"
  },
  {
    "text": "dependency REST API it has its own REST API of course comes back with a list of recommendations for all our projects upgrades our dependencies and then",
    "start": "2591359",
    "end": "2598170"
  },
  {
    "text": "creates a pull request right so when this happens actually funny story you know there's services that tell you who",
    "start": "2598170",
    "end": "2604109"
  },
  {
    "text": "and your team is productive based on analyzing get usage we had them analyze us and we were monsters in their system",
    "start": "2604109",
    "end": "2610530"
  },
  {
    "text": "because of all these pull requests that we were submitting to guilt to get on a weekly basis it's amazing contribution",
    "start": "2610530",
    "end": "2616619"
  },
  {
    "text": "history but this is it you run one command and we have PRS for everything and because we've spent so much time on",
    "start": "2616619",
    "end": "2622680"
  },
  {
    "text": "our testing the policy is once it's green we deploy that's it right and now",
    "start": "2622680",
    "end": "2628980"
  },
  {
    "text": "we can do that every single week and all of our applications are running on the latest versions of every piece of",
    "start": "2628980",
    "end": "2634500"
  },
  {
    "text": "software and we just nurture them and feed them every single week so in",
    "start": "2634500",
    "end": "2639839"
  },
  {
    "text": "summary just to really just focus in on kind of three critical decisions I think the first one is really to design your",
    "start": "2639839",
    "end": "2645990"
  },
  {
    "start": "2640000",
    "end": "2807000"
  },
  {
    "text": "schema first for all of your api's and events and in there to really focus on",
    "start": "2645990",
    "end": "2651270"
  },
  {
    "text": "consuming the events not the API have the API but by all means if you can use the events use the events you're going",
    "start": "2651270",
    "end": "2657060"
  },
  {
    "text": "to get so many benefits second is a high level of investment in automation across the board this is really important",
    "start": "2657060",
    "end": "2663930"
  },
  {
    "text": "whether it's the code generators the deployment system that a tendancy management a real real investment in",
    "start": "2663930",
    "end": "2669240"
  },
  {
    "text": "automation and when we think about polyglot and micro server in different languages this is where we",
    "start": "2669240",
    "end": "2674940"
  },
  {
    "text": "have to be really careful because every language every framework that we choose to add into our infrastructure all of",
    "start": "2674940",
    "end": "2680729"
  },
  {
    "text": "those things that we just saw that allow us to be efficient in delivering our micro services now need to be built to",
    "start": "2680729",
    "end": "2686880"
  },
  {
    "text": "take into account that new language and that new framework and it's a I mean frankly it's a huge investment huge",
    "start": "2686880",
    "end": "2693029"
  },
  {
    "text": "investment and I think that's what needs to be considered which is why I think when we look at you know 4,000 employees",
    "start": "2693029",
    "end": "2698309"
  },
  {
    "text": "per engineers per language it's like having the resources and the time to make it a priority to invest is",
    "start": "2698309",
    "end": "2704539"
  },
  {
    "text": "absolutely critical to being able to do this successfully and third I think",
    "start": "2704539",
    "end": "2709650"
  },
  {
    "text": "there's this focus on enabling teams to write amazing and simple tests drive quality streamline maintenance enable",
    "start": "2709650",
    "end": "2714960"
  },
  {
    "text": "continuous delivery imagine if you didn't trust your tests and you want to upgrade your dependencies what are you",
    "start": "2714960",
    "end": "2720329"
  },
  {
    "text": "going to do how are you going to verify what's you know how much time is it actually going to take before you feel confident to deploy yesterday and we",
    "start": "2720329",
    "end": "2728609"
  },
  {
    "text": "tell the story about testing so yesterday I was on an airplane and as I like to do on an airplane I'm writing",
    "start": "2728609",
    "end": "2733739"
  },
  {
    "text": "tests and I'm writing tests against production because that is a really good way to build quality software and in",
    "start": "2733739",
    "end": "2739440"
  },
  {
    "text": "this case this was a bug that was reported by a user and I say well it's complicated bug involves lots of services some orchestration I'm gonna",
    "start": "2739440",
    "end": "2745229"
  },
  {
    "text": "just write a test that sets up everything in production and I got to the end and actually the test passed",
    "start": "2745229",
    "end": "2750390"
  },
  {
    "text": "it's like frustrated because I thought oh there was a bug and there was no bug we now published that test now runs every single day it's a cron job that's",
    "start": "2750390",
    "end": "2756900"
  },
  {
    "text": "running his production this morning a slight variation was reported I said aha we have the framework wrote the test to",
    "start": "2756900",
    "end": "2763079"
  },
  {
    "text": "demonstrate the bug in production and yes there was a bug and I think I'd like to call it TDD in production wrote the",
    "start": "2763079",
    "end": "2769890"
  },
  {
    "text": "test the test is failing against production have now been able to go into the micro Service replicate the test replicate the bug in the micro service",
    "start": "2769890",
    "end": "2775589"
  },
  {
    "text": "write the unit tests in the micro service that unit that micro service is getting deployed and when that deploy",
    "start": "2775589",
    "end": "2781319"
  },
  {
    "text": "finishes we can now go run the production test and verify that the production test now passes so TDD in production and it feels so amazing to be",
    "start": "2781319",
    "end": "2789029"
  },
  {
    "text": "able to do that and at the end of the day it's one of those critical elements that goes overlooked how can we really get to the point where we're so",
    "start": "2789029",
    "end": "2794700"
  },
  {
    "text": "confident in our tests that we can do all of these other things and automate the maintenance so that we can actually",
    "start": "2794700",
    "end": "2800279"
  },
  {
    "text": "get the benefits of these architectures because there are a lot of benefits without paralyzing our teams at the end",
    "start": "2800279",
    "end": "2805950"
  },
  {
    "text": "of the day so thank you very much go forth and design micro-service architecture is the",
    "start": "2805950",
    "end": "2811140"
  },
  {
    "start": "2807000",
    "end": "2909000"
  },
  {
    "text": "right way",
    "start": "2811140",
    "end": "2813410"
  },
  {
    "text": "and I think we may have time for one or two questions and Happy's to stay after as well",
    "start": "2821720",
    "end": "2827460"
  },
  {
    "text": "yes sir there's a microphone next to you thank you very much",
    "start": "2827460",
    "end": "2832890"
  },
  {
    "text": "how do you how do you balance new features that aren't ready yet and a",
    "start": "2832890",
    "end": "2839579"
  },
  {
    "text": "continuous employment right do you have branches do you have a separate data environments how do you handle that yeah",
    "start": "2839579",
    "end": "2845490"
  },
  {
    "text": "it's a great question how do we manage features at different stages of development so my I'll talk personally I can't go to",
    "start": "2845490",
    "end": "2854490"
  },
  {
    "text": "sleep if I have an open PR I can't I don't want to and I don't and so",
    "start": "2854490",
    "end": "2860250"
  },
  {
    "text": "everything that I do in my life is optimized so that however much time I have when I'm done it's in production he's not in production I have to worry",
    "start": "2860250",
    "end": "2866730"
  },
  {
    "text": "about it and what that means in practice is if we're working on a larger feature you've got to decompose and every day",
    "start": "2866730",
    "end": "2871770"
  },
  {
    "text": "we're deploying and it's dark it's dark it's dark it's dark it's dark it's dark it's dark now we can get to a point where we have a feature flag where we",
    "start": "2871770",
    "end": "2877230"
  },
  {
    "text": "can enable it and start to verify but it's always in production all the time non-stop and I think that's frankly I",
    "start": "2877230",
    "end": "2885690"
  },
  {
    "text": "think it's the best way to do it it depends on continuous delivery it depends on a great system of testing to make sure that you have that confidence",
    "start": "2885690",
    "end": "2891569"
  },
  {
    "text": "that you're actually not breaking anything but boy is it nice to go to sleep knowing that everything is working",
    "start": "2891569",
    "end": "2896940"
  },
  {
    "text": "and there's no outstanding work to do great question I think we're time all",
    "start": "2896940",
    "end": "2902910"
  },
  {
    "text": "right we're at time so happy to take your questions after and thank you very much [Applause]",
    "start": "2902910",
    "end": "2910059"
  }
]