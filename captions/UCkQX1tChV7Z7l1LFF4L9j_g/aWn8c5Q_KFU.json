[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "18880"
  },
  {
    "text": "welcome my name is John de GH I am",
    "start": "18880",
    "end": "20960"
  },
  {
    "text": "presently CTO of a company called precog",
    "start": "20960",
    "end": "24439"
  },
  {
    "text": "and what we do is essentially produce a",
    "start": "24439",
    "end": "26560"
  },
  {
    "text": "big data analytics engine and thus I",
    "start": "26560",
    "end": "29720"
  },
  {
    "text": "always is extremely important to me",
    "start": "29720",
    "end": "32238"
  },
  {
    "text": "personally I am a committer and also the",
    "start": "32239",
    "end": "34280"
  },
  {
    "text": "original author for a web framework for",
    "start": "34280",
    "end": "37440"
  },
  {
    "text": "developing restful apis in Scala called",
    "start": "37440",
    "end": "40680"
  },
  {
    "text": "blue eyes and obviously a web framework",
    "start": "40680",
    "end": "43480"
  },
  {
    "text": "is predominantly concerned with IO and",
    "start": "43480",
    "end": "47079"
  },
  {
    "text": "here at uh precog where we live and",
    "start": "47079",
    "end": "49760"
  },
  {
    "text": "breathe IO all the time 100% of every",
    "start": "49760",
    "end": "52840"
  },
  {
    "text": "day for the purposes of doing analytics",
    "start": "52840",
    "end": "54760"
  },
  {
    "text": "on large amounts of multi-structured",
    "start": "54760",
    "end": "56600"
  },
  {
    "text": "data you can imagine how important a",
    "start": "56600",
    "end": "58840"
  },
  {
    "text": "topic this is to me I've been using",
    "start": "58840",
    "end": "60960"
  },
  {
    "text": "Scala for probably about two and a half",
    "start": "60960",
    "end": "63719"
  },
  {
    "text": "two and a half years professionally and",
    "start": "63719",
    "end": "66000"
  },
  {
    "text": "I've kind of fallen in love with the",
    "start": "66000",
    "end": "67360"
  },
  {
    "text": "functional way of doing things studied a",
    "start": "67360",
    "end": "69720"
  },
  {
    "text": "bit of hcll and uh really interested in",
    "start": "69720",
    "end": "72479"
  },
  {
    "text": "kind of the intersection between",
    "start": "72479",
    "end": "74560"
  },
  {
    "text": "functional programming and performance",
    "start": "74560",
    "end": "79600"
  },
  {
    "start": "80000",
    "end": "263000"
  },
  {
    "text": "IO this is my laundry list of",
    "start": "80079",
    "end": "82560"
  },
  {
    "text": "requirements for an ideal functional IO",
    "start": "82560",
    "end": "86600"
  },
  {
    "text": "system you can see it's it's not small",
    "start": "86600",
    "end": "89920"
  },
  {
    "text": "number one I want any functional IO",
    "start": "89920",
    "end": "92399"
  },
  {
    "text": "system to be resource safe so it should",
    "start": "92399",
    "end": "95520"
  },
  {
    "text": "be very difficult or perhaps even",
    "start": "95520",
    "end": "97320"
  },
  {
    "text": "impossible for a developer to do",
    "start": "97320",
    "end": "98920"
  },
  {
    "text": "something like accidentally close a",
    "start": "98920",
    "end": "101439"
  },
  {
    "text": "resource I don't want resources leaking",
    "start": "101439",
    "end": "103799"
  },
  {
    "text": "left and right should be composable I",
    "start": "103799",
    "end": "106439"
  },
  {
    "text": "should be able to take things that",
    "start": "106439",
    "end": "107880"
  },
  {
    "text": "consume some input and consume them",
    "start": "107880",
    "end": "109920"
  },
  {
    "text": "together or compose them together in",
    "start": "109920",
    "end": "111840"
  },
  {
    "text": "various different ways I should be able",
    "start": "111840",
    "end": "113920"
  },
  {
    "text": "to take things that produce output and",
    "start": "113920",
    "end": "115680"
  },
  {
    "text": "also compose them together in different",
    "start": "115680",
    "end": "117079"
  },
  {
    "text": "ways because that gives me the ability",
    "start": "117079",
    "end": "118439"
  },
  {
    "text": "to reuse code",
    "start": "118439",
    "end": "121280"
  },
  {
    "text": "it should be Pure or at least as pure as",
    "start": "121280",
    "end": "123920"
  },
  {
    "text": "possible because I want the benefits of",
    "start": "123920",
    "end": "126240"
  },
  {
    "text": "reasoning and modularity in testability",
    "start": "126240",
    "end": "128679"
  },
  {
    "text": "that come with pure code and by pure I",
    "start": "128679",
    "end": "131520"
  },
  {
    "text": "don't mean even the io moad I mean we",
    "start": "131520",
    "end": "133959"
  },
  {
    "text": "want to push even IO out as as far as",
    "start": "133959",
    "end": "136400"
  },
  {
    "text": "possible and make our code pure in",
    "start": "136400",
    "end": "138760"
  },
  {
    "text": "intention and not just in",
    "start": "138760",
    "end": "143159"
  },
  {
    "text": "yeah pure as pure as possible but pure",
    "start": "143599",
    "end": "147599"
  },
  {
    "text": "especially in the external interface not",
    "start": "147599",
    "end": "149360"
  },
  {
    "text": "necessarily the",
    "start": "149360",
    "end": "151879"
  },
  {
    "text": "implementation I also want the codes who",
    "start": "151879",
    "end": "154640"
  },
  {
    "text": "run really really fast and part of that",
    "start": "154640",
    "end": "157160"
  },
  {
    "text": "is because my two projects are either",
    "start": "157160",
    "end": "159480"
  },
  {
    "text": "the big data analytics database or this",
    "start": "159480",
    "end": "161879"
  },
  {
    "text": "web framework and either of them are",
    "start": "161879",
    "end": "163480"
  },
  {
    "text": "subject to very very strict performance",
    "start": "163480",
    "end": "166959"
  },
  {
    "text": "requirements I also want as much type",
    "start": "166959",
    "end": "169280"
  },
  {
    "text": "safety as possible I want the compiler",
    "start": "169280",
    "end": "171040"
  },
  {
    "text": "to catch as many problems upfront at",
    "start": "171040",
    "end": "173760"
  },
  {
    "text": "compile time as as possible like ideally",
    "start": "173760",
    "end": "176400"
  },
  {
    "text": "I shouldn't be allowed to if close is an",
    "start": "176400",
    "end": "178720"
  },
  {
    "text": "operation I shouldn't be allowed to to",
    "start": "178720",
    "end": "179920"
  },
  {
    "text": "close something more than once for",
    "start": "179920",
    "end": "183000"
  },
  {
    "text": "example number six I want it to be as",
    "start": "183000",
    "end": "185239"
  },
  {
    "text": "simple as possible obviously the more",
    "start": "185239",
    "end": "187280"
  },
  {
    "text": "requirements you add the more",
    "start": "187280",
    "end": "188480"
  },
  {
    "text": "incompatible with each other they become",
    "start": "188480",
    "end": "190239"
  },
  {
    "text": "and in particular some of these on the",
    "start": "190239",
    "end": "192599"
  },
  {
    "text": "jvm and in the scholar programming",
    "start": "192599",
    "end": "194640"
  },
  {
    "text": "languages are unachievable together uh",
    "start": "194640",
    "end": "197720"
  },
  {
    "text": "but to the degree that it's possible I",
    "start": "197720",
    "end": "199239"
  },
  {
    "text": "want something to be relatively simple",
    "start": "199239",
    "end": "201200"
  },
  {
    "text": "something that doesn't take a lot of",
    "start": "201200",
    "end": "202519"
  },
  {
    "text": "brain power to",
    "start": "202519",
    "end": "204360"
  },
  {
    "text": "understand I wanted to be capable of",
    "start": "204360",
    "end": "207000"
  },
  {
    "text": "incremental input and output especially",
    "start": "207000",
    "end": "209280"
  },
  {
    "text": "when you're dealing with a modern web",
    "start": "209280",
    "end": "211640"
  },
  {
    "text": "applications with with which frequently",
    "start": "211640",
    "end": "213439"
  },
  {
    "text": "have to process hundreds of connections",
    "start": "213439",
    "end": "215599"
  },
  {
    "text": "maybe thousands of connections a second",
    "start": "215599",
    "end": "217640"
  },
  {
    "text": "or the kind of IO that we do at precog",
    "start": "217640",
    "end": "220120"
  },
  {
    "text": "you can't hold all that stuff in memory",
    "start": "220120",
    "end": "221799"
  },
  {
    "text": "and you need to be able to do operations",
    "start": "221799",
    "end": "223400"
  },
  {
    "text": "incrementally on that and finally I want",
    "start": "223400",
    "end": "227879"
  },
  {
    "text": "the io system to be very expressive and",
    "start": "227879",
    "end": "231239"
  },
  {
    "text": "I'll give you an example of of what I",
    "start": "231239",
    "end": "233000"
  },
  {
    "text": "mean by that frequently when you're",
    "start": "233000",
    "end": "234840"
  },
  {
    "text": "writing a web application you'll be",
    "start": "234840",
    "end": "236519"
  },
  {
    "text": "consuming input from the user and then",
    "start": "236519",
    "end": "238319"
  },
  {
    "text": "you'll dynamically make a decision",
    "start": "238319",
    "end": "240400"
  },
  {
    "text": "to for example look look at something in",
    "start": "240400",
    "end": "242280"
  },
  {
    "text": "the database and then based on that",
    "start": "242280",
    "end": "244159"
  },
  {
    "text": "result you may decide to read something",
    "start": "244159",
    "end": "246319"
  },
  {
    "text": "from a file or open a new web connection",
    "start": "246319",
    "end": "249920"
  },
  {
    "text": "and basically you need the ability to",
    "start": "249920",
    "end": "251519"
  },
  {
    "text": "dynamically decide to allocate new",
    "start": "251519",
    "end": "253439"
  },
  {
    "text": "resources at virtually arbitrary points",
    "start": "253439",
    "end": "255599"
  },
  {
    "text": "in your code and that requirement in",
    "start": "255599",
    "end": "257680"
  },
  {
    "text": "particular is is a real pain to get",
    "start": "257680",
    "end": "260199"
  },
  {
    "text": "around in a functional",
    "start": "260199",
    "end": "262639"
  },
  {
    "text": "system so I want to kind of give you an",
    "start": "262639",
    "end": "264960"
  },
  {
    "start": "263000",
    "end": "381000"
  },
  {
    "text": "example of classic iio probably most",
    "start": "264960",
    "end": "267639"
  },
  {
    "text": "people in this room have seen at 1 Point",
    "start": "267639",
    "end": "269720"
  },
  {
    "text": "point or another and it's based on",
    "start": "269720",
    "end": "271479"
  },
  {
    "text": "Java's input stream and output stream",
    "start": "271479",
    "end": "273479"
  },
  {
    "text": "how many people have used this at one",
    "start": "273479",
    "end": "274800"
  },
  {
    "text": "point in their career nearly everyone in",
    "start": "274800",
    "end": "276840"
  },
  {
    "text": "the room is familiar with these this",
    "start": "276840",
    "end": "279280"
  },
  {
    "text": "it's it's kind of straightforward and uh",
    "start": "279280",
    "end": "280960"
  },
  {
    "text": "I want to put it through a report report",
    "start": "280960",
    "end": "283240"
  },
  {
    "text": "card how does it stack up to my laundary",
    "start": "283240",
    "end": "285919"
  },
  {
    "text": "list of requirements resource safe not",
    "start": "285919",
    "end": "288560"
  },
  {
    "text": "at all so you'll frequently see in code",
    "start": "288560",
    "end": "291440"
  },
  {
    "text": "that uses input and output stream try",
    "start": "291440",
    "end": "293320"
  },
  {
    "text": "catch lited everywhere and that's",
    "start": "293320",
    "end": "294479"
  },
  {
    "text": "because if you accidentally forget",
    "start": "294479",
    "end": "296120"
  },
  {
    "text": "something if you forget that finally",
    "start": "296120",
    "end": "298000"
  },
  {
    "text": "block on any of your code and forget to",
    "start": "298000",
    "end": "299880"
  },
  {
    "text": "free the resource and suddenly you have",
    "start": "299880",
    "end": "301520"
  },
  {
    "text": "a resource leak and there's almost no",
    "start": "301520",
    "end": "303600"
  },
  {
    "text": "Java application out there that hasn't",
    "start": "303600",
    "end": "305600"
  },
  {
    "text": "had or or been beleaguered by resource",
    "start": "305600",
    "end": "308199"
  },
  {
    "text": "leak problems composable it doesn't",
    "start": "308199",
    "end": "311039"
  },
  {
    "text": "actually get an f and the reason for",
    "start": "311039",
    "end": "312680"
  },
  {
    "text": "that is because you can take an input",
    "start": "312680",
    "end": "314240"
  },
  {
    "text": "stream and another input stream for",
    "start": "314240",
    "end": "315600"
  },
  {
    "text": "example you can compose them together in",
    "start": "315600",
    "end": "317520"
  },
  {
    "text": "a variety of different ways to get",
    "start": "317520",
    "end": "318960"
  },
  {
    "text": "another input stream and you can also",
    "start": "318960",
    "end": "320960"
  },
  {
    "text": "take an input stream and you can",
    "start": "320960",
    "end": "322080"
  },
  {
    "text": "decorate it with another input stream to",
    "start": "322080",
    "end": "323600"
  },
  {
    "text": "add some bit of functionality so they're",
    "start": "323600",
    "end": "325479"
  },
  {
    "text": "a little tiny bit composable which is",
    "start": "325479",
    "end": "327000"
  },
  {
    "text": "why they don't get an F in that category",
    "start": "327000",
    "end": "329199"
  },
  {
    "text": "obviously they're not pure at all it's",
    "start": "329199",
    "end": "330759"
  },
  {
    "text": "straight mutation there's nothing pure",
    "start": "330759",
    "end": "332360"
  },
  {
    "text": "about that interface",
    "start": "332360",
    "end": "334000"
  },
  {
    "text": "whatsoever they get a an A in",
    "start": "334000",
    "end": "336360"
  },
  {
    "text": "performance because input and output",
    "start": "336360",
    "end": "338160"
  },
  {
    "text": "streams are really really fast not an A+",
    "start": "338160",
    "end": "341639"
  },
  {
    "text": "mind you because they're based on",
    "start": "341639",
    "end": "343319"
  },
  {
    "text": "synchronous blocking IO U but they do",
    "start": "343319",
    "end": "346120"
  },
  {
    "text": "get an A for performance most of the",
    "start": "346120",
    "end": "348319"
  },
  {
    "text": "really fast open source projects out",
    "start": "348319",
    "end": "349960"
  },
  {
    "text": "there written in Java that do IO use",
    "start": "349960",
    "end": "352199"
  },
  {
    "text": "input and output",
    "start": "352199",
    "end": "354479"
  },
  {
    "text": "streams number six they are simple so",
    "start": "354479",
    "end": "356880"
  },
  {
    "text": "any developer can understand what these",
    "start": "356880",
    "end": "358280"
  },
  {
    "text": "things do so they get high marks for",
    "start": "358280",
    "end": "360199"
  },
  {
    "text": "that they do allow incremental IO that's",
    "start": "360199",
    "end": "363120"
  },
  {
    "text": "a very natural way to use them and they",
    "start": "363120",
    "end": "366080"
  },
  {
    "text": "are expressive in the sense that",
    "start": "366080",
    "end": "367960"
  },
  {
    "text": "obviously all this you know Tangled mess",
    "start": "367960",
    "end": "370280"
  },
  {
    "text": "of imperative code can open up new",
    "start": "370280",
    "end": "372160"
  },
  {
    "text": "resources at any point in time in",
    "start": "372160",
    "end": "373720"
  },
  {
    "text": "response to anything and so yeah yeah",
    "start": "373720",
    "end": "375800"
  },
  {
    "text": "they're expressive within the Paradigm",
    "start": "375800",
    "end": "377960"
  },
  {
    "text": "that is input out input stream and",
    "start": "377960",
    "end": "379880"
  },
  {
    "text": "output",
    "start": "379880",
    "end": "381240"
  },
  {
    "start": "381000",
    "end": "556000"
  },
  {
    "text": "stream let's take a look at another",
    "start": "381240",
    "end": "385440"
  },
  {
    "text": "another um means by which we might do IO",
    "start": "385440",
    "end": "388840"
  },
  {
    "text": "and this whole there's a lot of",
    "start": "388840",
    "end": "391120"
  },
  {
    "text": "different concepts here this family of",
    "start": "391120",
    "end": "392919"
  },
  {
    "text": "Concepts is referred to as ites and",
    "start": "392919",
    "end": "395919"
  },
  {
    "text": "iterates were invented long ago in the",
    "start": "395919",
    "end": "398560"
  },
  {
    "text": "hasal community and now they've since",
    "start": "398560",
    "end": "400240"
  },
  {
    "text": "shown up in the scholar Community I want",
    "start": "400240",
    "end": "402280"
  },
  {
    "text": "to drive the development of an iter step",
    "start": "402280",
    "end": "404840"
  },
  {
    "text": "by step unless you L you think that this",
    "start": "404840",
    "end": "407800"
  },
  {
    "text": "is uh purely theoretical uh iterates",
    "start": "407800",
    "end": "411160"
  },
  {
    "text": "actually form the basis for several",
    "start": "411160",
    "end": "412919"
  },
  {
    "text": "hasco web Frameworks which operate very",
    "start": "412919",
    "end": "415599"
  },
  {
    "text": "very very fast and they also form the",
    "start": "415599",
    "end": "418560"
  },
  {
    "text": "basis for precog our analytics database",
    "start": "418560",
    "end": "421599"
  },
  {
    "text": "and I think we're the first company or",
    "start": "421599",
    "end": "423240"
  },
  {
    "text": "organization in the world that can claim",
    "start": "423240",
    "end": "424759"
  },
  {
    "text": "to have an analytics database",
    "start": "424759",
    "end": "426199"
  },
  {
    "text": "implemented on top of",
    "start": "426199",
    "end": "428639"
  },
  {
    "text": "iterates so what's the basic idea here",
    "start": "428639",
    "end": "431599"
  },
  {
    "text": "well everyone's familiar with fold right",
    "start": "431599",
    "end": "433520"
  },
  {
    "text": "how many people know what fold left is",
    "start": "433520",
    "end": "434919"
  },
  {
    "text": "and have used it a bill billion",
    "start": "434919",
    "end": "437199"
  },
  {
    "text": "times so the basic idea is um if in this",
    "start": "437199",
    "end": "442599"
  },
  {
    "text": "fold function you you're you pass a list",
    "start": "442599",
    "end": "445840"
  },
  {
    "text": "and you pass the function uh which then",
    "start": "445840",
    "end": "448120"
  },
  {
    "text": "computes new state as it goes along and",
    "start": "448120",
    "end": "450039"
  },
  {
    "text": "it ends up producing some final value",
    "start": "450039",
    "end": "452639"
  },
  {
    "text": "this looks like a lot of IO problems",
    "start": "452639",
    "end": "454960"
  },
  {
    "text": "many times you'll be reading through a",
    "start": "454960",
    "end": "456240"
  },
  {
    "text": "resource and doing something passing",
    "start": "456240",
    "end": "457840"
  },
  {
    "text": "State along and then you'll end up",
    "start": "457840",
    "end": "459560"
  },
  {
    "text": "Computing some sort of final value and",
    "start": "459560",
    "end": "461960"
  },
  {
    "text": "the really nice thing about fold is that",
    "start": "461960",
    "end": "464159"
  },
  {
    "text": "if you translate it to an IO context",
    "start": "464159",
    "end": "466639"
  },
  {
    "text": "then basically the list or whatever is",
    "start": "466639",
    "end": "468800"
  },
  {
    "text": "doing the fold over all those elements",
    "start": "468800",
    "end": "471080"
  },
  {
    "text": "has explicit control of the resources",
    "start": "471080",
    "end": "473879"
  },
  {
    "text": "which means that this abstraction",
    "start": "473879",
    "end": "475840"
  },
  {
    "text": "provides a very convenient way to",
    "start": "475840",
    "end": "478120"
  },
  {
    "text": "guarantee no resource lead",
    "start": "478120",
    "end": "480639"
  },
  {
    "text": "also just by its very nature you can see",
    "start": "480639",
    "end": "482759"
  },
  {
    "text": "this F function is incrementally",
    "start": "482759",
    "end": "484680"
  },
  {
    "text": "processing every element one at a time",
    "start": "484680",
    "end": "487199"
  },
  {
    "text": "through the list so it's giving us some",
    "start": "487199",
    "end": "489159"
  },
  {
    "text": "of the benefits from my other chart we",
    "start": "489159",
    "end": "491039"
  },
  {
    "text": "get that incremental processing we get",
    "start": "491039",
    "end": "493680"
  },
  {
    "text": "our resource safety and you'll see these",
    "start": "493680",
    "end": "495599"
  },
  {
    "text": "things evolve naturally as we make a few",
    "start": "495599",
    "end": "498960"
  },
  {
    "text": "tweaks so in this particular",
    "start": "498960",
    "end": "503199"
  },
  {
    "text": "example",
    "start": "503199",
    "end": "506199"
  },
  {
    "text": "um this is a nice starting point but one",
    "start": "508159",
    "end": "510720"
  },
  {
    "text": "of the problems is that we might like to",
    "start": "510720",
    "end": "514000"
  },
  {
    "text": "consume a little bit from this list and",
    "start": "514000",
    "end": "517479"
  },
  {
    "text": "turn that into one value and then",
    "start": "517479",
    "end": "519360"
  },
  {
    "text": "consume a little bit more and turn it",
    "start": "519360",
    "end": "521440"
  },
  {
    "text": "into another value so this property can",
    "start": "521440",
    "end": "524080"
  },
  {
    "text": "be referred to as horizontal composition",
    "start": "524080",
    "end": "526959"
  },
  {
    "text": "of these F functions which I'm soon",
    "start": "526959",
    "end": "529640"
  },
  {
    "text": "going to call an",
    "start": "529640",
    "end": "530880"
  },
  {
    "text": "iterate and this gives us the ability to",
    "start": "530880",
    "end": "533040"
  },
  {
    "text": "do really interesting things like we",
    "start": "533040",
    "end": "534760"
  },
  {
    "text": "might have a bite array and we want to",
    "start": "534760",
    "end": "537120"
  },
  {
    "text": "convert that to uh a list of strings a",
    "start": "537120",
    "end": "539680"
  },
  {
    "text": "list of lines then we might want to",
    "start": "539680",
    "end": "541440"
  },
  {
    "text": "consume the HTTP header portion and then",
    "start": "541440",
    "end": "544800"
  },
  {
    "text": "consume the body one it a t to consume",
    "start": "544800",
    "end": "547959"
  },
  {
    "text": "those btes and produce a header another",
    "start": "547959",
    "end": "550120"
  },
  {
    "text": "to consume the body bites and produce a",
    "start": "550120",
    "end": "552279"
  },
  {
    "text": "body and this horizontal composition",
    "start": "552279",
    "end": "554240"
  },
  {
    "text": "property allows us to do that how do we",
    "start": "554240",
    "end": "556680"
  },
  {
    "text": "do that in code just very simple",
    "start": "556680",
    "end": "558440"
  },
  {
    "text": "modification to what we had before it's",
    "start": "558440",
    "end": "560959"
  },
  {
    "text": "still called fold left it's still",
    "start": "560959",
    "end": "562240"
  },
  {
    "text": "folding over a list our F function takes",
    "start": "562240",
    "end": "565800"
  },
  {
    "text": "the initial State the seed and an input",
    "start": "565800",
    "end": "569120"
  },
  {
    "text": "element and return something called a",
    "start": "569120",
    "end": "570880"
  },
  {
    "text": "step and the sole purpose of step is to",
    "start": "570880",
    "end": "574399"
  },
  {
    "text": "give the folding function enough",
    "start": "574399",
    "end": "577279"
  },
  {
    "text": "information to decide uh when F no",
    "start": "577279",
    "end": "580680"
  },
  {
    "text": "longer wants input when f is",
    "start": "580680",
    "end": "582880"
  },
  {
    "text": "done so here you can see I have uh two",
    "start": "582880",
    "end": "586720"
  },
  {
    "text": "different cases here F function can",
    "start": "586720",
    "end": "588680"
  },
  {
    "text": "return either a step that says it needs",
    "start": "588680",
    "end": "590480"
  },
  {
    "text": "more input or a step that says uh I'm",
    "start": "590480",
    "end": "594760"
  },
  {
    "text": "done I don't need anything else notice",
    "start": "594760",
    "end": "597360"
  },
  {
    "text": "the values being stuffed into these more",
    "start": "597360",
    "end": "600279"
  },
  {
    "text": "and done data structures are actually",
    "start": "600279",
    "end": "602959"
  },
  {
    "text": "the state of the fold function just just",
    "start": "602959",
    "end": "605880"
  },
  {
    "text": "like your ordinary fold function",
    "start": "605880",
    "end": "607399"
  },
  {
    "text": "maintains State as it's going along uh",
    "start": "607399",
    "end": "609720"
  },
  {
    "text": "ultimately culminating in the final",
    "start": "609720",
    "end": "611600"
  },
  {
    "text": "value uh so also this value here is that",
    "start": "611600",
    "end": "614399"
  },
  {
    "text": "state function that's passed along and",
    "start": "614399",
    "end": "616760"
  },
  {
    "text": "this turns out to be a a rather",
    "start": "616760",
    "end": "618800"
  },
  {
    "text": "inconvenient way to model State because",
    "start": "618800",
    "end": "620839"
  },
  {
    "text": "you're being very explicit about it you",
    "start": "620839",
    "end": "622360"
  },
  {
    "text": "have to have a data structure that",
    "start": "622360",
    "end": "623920"
  },
  {
    "text": "unifies all the different state",
    "start": "623920",
    "end": "625399"
  },
  {
    "text": "decisions you make over the course of",
    "start": "625399",
    "end": "627800"
  },
  {
    "text": "that fold so one thing thing we can do",
    "start": "627800",
    "end": "629800"
  },
  {
    "text": "to improve this definition is to move",
    "start": "629800",
    "end": "632320"
  },
  {
    "text": "that state which is currently contained",
    "start": "632320",
    "end": "634560"
  },
  {
    "text": "uh in that parameter B inside the",
    "start": "634560",
    "end": "637279"
  },
  {
    "text": "function and of course a function can't",
    "start": "637279",
    "end": "638760"
  },
  {
    "text": "have any state so what we do is end up",
    "start": "638760",
    "end": "641200"
  },
  {
    "text": "introducing a melee machine which is uh",
    "start": "641200",
    "end": "644079"
  },
  {
    "text": "a function that accepts some input and",
    "start": "644079",
    "end": "647240"
  },
  {
    "text": "Returns the output along with the next",
    "start": "647240",
    "end": "649680"
  },
  {
    "text": "successor version of the function and",
    "start": "649680",
    "end": "651880"
  },
  {
    "text": "that function basically has a memory it",
    "start": "651880",
    "end": "654200"
  },
  {
    "text": "can remember stuff that has happened",
    "start": "654200",
    "end": "655639"
  },
  {
    "text": "before and thus allows you to encode",
    "start": "655639",
    "end": "657560"
  },
  {
    "text": "state in a more natural way",
    "start": "657560",
    "end": "660480"
  },
  {
    "text": "and that's that's what you see",
    "start": "660480",
    "end": "664000"
  },
  {
    "start": "664000",
    "end": "747000"
  },
  {
    "text": "there so this is composable in one",
    "start": "664000",
    "end": "666639"
  },
  {
    "text": "degree we can compose together these",
    "start": "666639",
    "end": "668560"
  },
  {
    "text": "things which I'm going to call iterates",
    "start": "668560",
    "end": "671560"
  },
  {
    "text": "uh because they can consume a certain",
    "start": "671560",
    "end": "672959"
  },
  {
    "text": "amount and then they can produce a value",
    "start": "672959",
    "end": "675040"
  },
  {
    "text": "when they are done this value is called",
    "start": "675040",
    "end": "677040"
  },
  {
    "text": "B there's no explicit State now B is the",
    "start": "677040",
    "end": "679120"
  },
  {
    "text": "final value produced by that and in the",
    "start": "679120",
    "end": "681959"
  },
  {
    "text": "case that it needs more you pass it a",
    "start": "681959",
    "end": "683959"
  },
  {
    "text": "function from the next input element to",
    "start": "683959",
    "end": "685880"
  },
  {
    "text": "a new Step so basically this allows that",
    "start": "685880",
    "end": "688880"
  },
  {
    "text": "fold function to start or call start",
    "start": "688880",
    "end": "692320"
  },
  {
    "text": "initially with the first element in",
    "start": "692320",
    "end": "693920"
  },
  {
    "text": "there and to proceed step by step by",
    "start": "693920",
    "end": "696320"
  },
  {
    "text": "step until your function returns done",
    "start": "696320",
    "end": "699240"
  },
  {
    "text": "with the output value at which point it",
    "start": "699240",
    "end": "701240"
  },
  {
    "text": "stops and says okay I'm not going to",
    "start": "701240",
    "end": "703000"
  },
  {
    "text": "feed this iter any more input but",
    "start": "703000",
    "end": "706480"
  },
  {
    "text": "there's one problem here and that is",
    "start": "706480",
    "end": "709680"
  },
  {
    "text": "what if this uh this start function this",
    "start": "709680",
    "end": "714040"
  },
  {
    "text": "iter a t wants to consume input from a",
    "start": "714040",
    "end": "716920"
  },
  {
    "text": "lot of different sources right now we",
    "start": "716920",
    "end": "719000"
  },
  {
    "text": "just have one fold function and that",
    "start": "719000",
    "end": "721120"
  },
  {
    "text": "fold function is promising to return a",
    "start": "721120",
    "end": "723480"
  },
  {
    "text": "value of type B so it's basically",
    "start": "723480",
    "end": "725600"
  },
  {
    "text": "assuming that that iterate T will be",
    "start": "725600",
    "end": "727480"
  },
  {
    "text": "done within the lifetime of the elements",
    "start": "727480",
    "end": "729560"
  },
  {
    "text": "inside the list in fact that might not",
    "start": "729560",
    "end": "731440"
  },
  {
    "text": "be true we might may have to pump this",
    "start": "731440",
    "end": "734040"
  },
  {
    "text": "thing with lots and lots of data before",
    "start": "734040",
    "end": "736240"
  },
  {
    "text": "that iter a t decides it's done and",
    "start": "736240",
    "end": "738519"
  },
  {
    "text": "emits a value so the next thing we do is",
    "start": "738519",
    "end": "741480"
  },
  {
    "text": "make this composable uh at the level of",
    "start": "741480",
    "end": "746079"
  },
  {
    "text": "folds by introducing some sort of input",
    "start": "746079",
    "end": "751000"
  },
  {
    "start": "747000",
    "end": "807000"
  },
  {
    "text": "element that can basically represent an",
    "start": "751000",
    "end": "753639"
  },
  {
    "text": "ele element of input or a signal that",
    "start": "753639",
    "end": "756680"
  },
  {
    "text": "there is no more input and the iterate T",
    "start": "756680",
    "end": "759279"
  },
  {
    "text": "should emit whatever value that it",
    "start": "759279",
    "end": "761600"
  },
  {
    "text": "has and this allows us to take and uh we",
    "start": "761600",
    "end": "765320"
  },
  {
    "text": "also modified the definition of fold",
    "start": "765320",
    "end": "767000"
  },
  {
    "text": "left here so instead of promising to",
    "start": "767000",
    "end": "769160"
  },
  {
    "text": "return a b it actually promises to",
    "start": "769160",
    "end": "772240"
  },
  {
    "text": "return a step which is the step Advanced",
    "start": "772240",
    "end": "775160"
  },
  {
    "text": "along as long as as it can for the",
    "start": "775160",
    "end": "777600"
  },
  {
    "text": "number of elements in that list",
    "start": "777600",
    "end": "779800"
  },
  {
    "text": "so what this enables us to do is take",
    "start": "779800",
    "end": "782199"
  },
  {
    "text": "list a list b list C list D Etc",
    "start": "782199",
    "end": "785199"
  },
  {
    "text": "essentially compose them all together in",
    "start": "785199",
    "end": "787240"
  },
  {
    "text": "a single thing and uh feed this iterate",
    "start": "787240",
    "end": "790480"
  },
  {
    "text": "to one after the other after the other",
    "start": "790480",
    "end": "792199"
  },
  {
    "text": "after the other and when we reach the",
    "start": "792199",
    "end": "794320"
  },
  {
    "text": "definite end of that input we can send",
    "start": "794320",
    "end": "796600"
  },
  {
    "text": "it an end of file signal which ends up",
    "start": "796600",
    "end": "800199"
  },
  {
    "text": "internally causing that itera t to say",
    "start": "800199",
    "end": "802800"
  },
  {
    "text": "okay I'm never going to receive any more",
    "start": "802800",
    "end": "804360"
  },
  {
    "text": "input I better produce a value here so",
    "start": "804360",
    "end": "807360"
  },
  {
    "start": "807000",
    "end": "942000"
  },
  {
    "text": "uh there's there's one more thing",
    "start": "807360",
    "end": "809680"
  },
  {
    "text": "what does this look like uh when you've",
    "start": "809680",
    "end": "811480"
  },
  {
    "text": "kind of renamed stuff uh well it's",
    "start": "811480",
    "end": "814519"
  },
  {
    "text": "pretty straightforward you have your",
    "start": "814519",
    "end": "815839"
  },
  {
    "text": "your input element whose sole purpose is",
    "start": "815839",
    "end": "817839"
  },
  {
    "text": "to wrap individual elements so you can",
    "start": "817839",
    "end": "819639"
  },
  {
    "text": "provide an end of file signal to the",
    "start": "819639",
    "end": "821760"
  },
  {
    "text": "iterate that there's no more input and",
    "start": "821760",
    "end": "823800"
  },
  {
    "text": "it should produce its output value and",
    "start": "823800",
    "end": "825760"
  },
  {
    "text": "then you have something like this an",
    "start": "825760",
    "end": "827000"
  },
  {
    "text": "iterate t uh which which has the more",
    "start": "827000",
    "end": "829320"
  },
  {
    "text": "case saying give me more input has",
    "start": "829320",
    "end": "831079"
  },
  {
    "text": "another case saying done which actually",
    "start": "831079",
    "end": "832639"
  },
  {
    "text": "emits that final value and then",
    "start": "832639",
    "end": "834480"
  },
  {
    "text": "frequently you'll have either a control",
    "start": "834480",
    "end": "836279"
  },
  {
    "text": "signal or or something like this air",
    "start": "836279",
    "end": "838480"
  },
  {
    "text": "handler saying",
    "start": "838480",
    "end": "839560"
  },
  {
    "text": "okay something something went wrong pass",
    "start": "839560",
    "end": "842079"
  },
  {
    "text": "that information back up through through",
    "start": "842079",
    "end": "844000"
  },
  {
    "text": "the chain uh so that basically this iter",
    "start": "844000",
    "end": "846480"
  },
  {
    "text": "is is allowed to produce errors other",
    "start": "846480",
    "end": "848440"
  },
  {
    "text": "kinds of itties Might uh be allowed to",
    "start": "848440",
    "end": "851040"
  },
  {
    "text": "produce messages to requests to seek to",
    "start": "851040",
    "end": "853079"
  },
  {
    "text": "arbitrary points in a file or rewind or",
    "start": "853079",
    "end": "855560"
  },
  {
    "text": "do other kinds of",
    "start": "855560",
    "end": "856920"
  },
  {
    "text": "things and then this thing that has",
    "start": "856920",
    "end": "859759"
  },
  {
    "text": "until now been uh been a list that we've",
    "start": "859759",
    "end": "862240"
  },
  {
    "text": "been folding over now becomes an",
    "start": "862240",
    "end": "864600"
  },
  {
    "text": "enumerator which essentially folds over",
    "start": "864600",
    "end": "867440"
  },
  {
    "text": "values of a given type of a",
    "start": "867440",
    "end": "869800"
  },
  {
    "text": "and you can call fold and produce it or",
    "start": "869800",
    "end": "872560"
  },
  {
    "text": "feed it any iter uh and then get back an",
    "start": "872560",
    "end": "875519"
  },
  {
    "text": "iter that is fully Advanced as far as",
    "start": "875519",
    "end": "879240"
  },
  {
    "text": "can be Advanced given the amount of",
    "start": "879240",
    "end": "881120"
  },
  {
    "text": "information contained in that numerator",
    "start": "881120",
    "end": "883880"
  },
  {
    "text": "so the iter uh it may or may not be done",
    "start": "883880",
    "end": "887320"
  },
  {
    "text": "if it's not done and you want a value",
    "start": "887320",
    "end": "889120"
  },
  {
    "text": "you have to uh feed it and and a file",
    "start": "889120",
    "end": "891560"
  },
  {
    "text": "signal to produce one uh but in many",
    "start": "891560",
    "end": "894399"
  },
  {
    "text": "cases you end up taking one enumerator",
    "start": "894399",
    "end": "897040"
  },
  {
    "text": "and uh and sandwiching it with another",
    "start": "897040",
    "end": "898880"
  },
  {
    "text": "one one to feed it lots of data across",
    "start": "898880",
    "end": "900720"
  },
  {
    "text": "different sources so you can actually uh",
    "start": "900720",
    "end": "905000"
  },
  {
    "text": "you could use option but it's very handy",
    "start": "905000",
    "end": "908600"
  },
  {
    "text": "in some cases to extend input with a",
    "start": "908600",
    "end": "910839"
  },
  {
    "text": "third state called empty because that",
    "start": "910839",
    "end": "913839"
  },
  {
    "text": "allows you to do more interesting kinds",
    "start": "913839",
    "end": "915320"
  },
  {
    "text": "of compositions so I don't portray that",
    "start": "915320",
    "end": "917800"
  },
  {
    "text": "in here but often time you will see an",
    "start": "917800",
    "end": "919680"
  },
  {
    "text": "empty uh another state in there that",
    "start": "919680",
    "end": "921480"
  },
  {
    "text": "basically says there's no input here and",
    "start": "921480",
    "end": "924240"
  },
  {
    "text": "then that iter a that gets no input it",
    "start": "924240",
    "end": "925959"
  },
  {
    "text": "just ignores it and says give me more or",
    "start": "925959",
    "end": "928000"
  },
  {
    "text": "whatever it said before",
    "start": "928000",
    "end": "930079"
  },
  {
    "text": "but yeah if you only had those States I",
    "start": "930079",
    "end": "931839"
  },
  {
    "text": "guess you could use",
    "start": "931839",
    "end": "933240"
  },
  {
    "text": "option so this is iterates that's all",
    "start": "933240",
    "end": "936319"
  },
  {
    "text": "there is to iterates with one slight",
    "start": "936319",
    "end": "938160"
  },
  {
    "text": "detail and that is there's another",
    "start": "938160",
    "end": "940120"
  },
  {
    "text": "abstraction called an enumera which is a",
    "start": "940120",
    "end": "942800"
  },
  {
    "start": "942000",
    "end": "1015000"
  },
  {
    "text": "way to transform streams you might",
    "start": "942800",
    "end": "945519"
  },
  {
    "text": "imagine that just like um in in a list",
    "start": "945519",
    "end": "949120"
  },
  {
    "text": "you you can take a list of A's and",
    "start": "949120",
    "end": "950519"
  },
  {
    "text": "transform that to a list of B's that",
    "start": "950519",
    "end": "952360"
  },
  {
    "text": "there's some abstraction similar to that",
    "start": "952360",
    "end": "954160"
  },
  {
    "text": "because fundamentally an enumerator is",
    "start": "954160",
    "end": "956279"
  },
  {
    "text": "very list-like and in fact there is it's",
    "start": "956279",
    "end": "958360"
  },
  {
    "text": "called an",
    "start": "958360",
    "end": "959759"
  },
  {
    "text": "and basically given uh given an iter",
    "start": "959759",
    "end": "963360"
  },
  {
    "text": "that uh that consumes A's it it can",
    "start": "963360",
    "end": "966519"
  },
  {
    "text": "produce an iter that consumes B's and",
    "start": "966519",
    "end": "969720"
  },
  {
    "text": "internally transforms those into A's so",
    "start": "969720",
    "end": "972720"
  },
  {
    "text": "this is an example of kind of a a stream",
    "start": "972720",
    "end": "974639"
  },
  {
    "text": "Transformer it accepts elements of one",
    "start": "974639",
    "end": "976480"
  },
  {
    "text": "input type and it transforms them to",
    "start": "976480",
    "end": "978519"
  },
  {
    "text": "another and together these three uh",
    "start": "978519",
    "end": "981000"
  },
  {
    "text": "abstractions the iter the enumerator and",
    "start": "981000",
    "end": "984079"
  },
  {
    "text": "the enumerate form essentially a",
    "start": "984079",
    "end": "986160"
  },
  {
    "text": "complete algebra for iterate based iio",
    "start": "986160",
    "end": "989160"
  },
  {
    "text": "you can do tons and tons of things in",
    "start": "989160",
    "end": "991759"
  },
  {
    "text": "real life they don't look this simple",
    "start": "991759",
    "end": "993600"
  },
  {
    "text": "they look a lot more complicated and",
    "start": "993600",
    "end": "995759"
  },
  {
    "text": "that's because you have all kinds of",
    "start": "995759",
    "end": "997000"
  },
  {
    "text": "crazy stuff here you basically need to",
    "start": "997000",
    "end": "998839"
  },
  {
    "text": "make iterates uh amm monad Transformers",
    "start": "998839",
    "end": "1002920"
  },
  {
    "text": "so all these things need to be",
    "start": "1002920",
    "end": "1004600"
  },
  {
    "text": "Transformers or have Transformer",
    "start": "1004600",
    "end": "1006199"
  },
  {
    "text": "versions and and you need that because",
    "start": "1006199",
    "end": "1009199"
  },
  {
    "text": "uh well for various reasons one of which",
    "start": "1009199",
    "end": "1011319"
  },
  {
    "text": "is composition another of which is uh",
    "start": "1011319",
    "end": "1013240"
  },
  {
    "text": "functional Purity Etc now let's take a",
    "start": "1013240",
    "end": "1016079"
  },
  {
    "text": "look at how iterates score on my report",
    "start": "1016079",
    "end": "1018160"
  },
  {
    "text": "card they're resource safe they're",
    "start": "1018160",
    "end": "1020519"
  },
  {
    "text": "really resource safe it's basically",
    "start": "1020519",
    "end": "1022800"
  },
  {
    "text": "impossible to leak any handles",
    "start": "1022800",
    "end": "1024720"
  },
  {
    "text": "whatsoever and the reason for that is",
    "start": "1024720",
    "end": "1026520"
  },
  {
    "text": "the enumerator is capable of opening the",
    "start": "1026520",
    "end": "1028400"
  },
  {
    "text": "resource pumping the stuff out and",
    "start": "1028400",
    "end": "1031079"
  },
  {
    "text": "sending it to the iterate until the",
    "start": "1031079",
    "end": "1032678"
  },
  {
    "text": "iterate is done or emits some air when",
    "start": "1032679",
    "end": "1035240"
  },
  {
    "text": "one of those things happens or or it",
    "start": "1035240",
    "end": "1037038"
  },
  {
    "text": "reaches the end of its resource it can",
    "start": "1037039",
    "end": "1038558"
  },
  {
    "text": "deallocate its resource safely and all",
    "start": "1038559",
    "end": "1041720"
  },
  {
    "text": "that's controlled by the enumerator so",
    "start": "1041720",
    "end": "1043880"
  },
  {
    "text": "actually with with uh iterates it's",
    "start": "1043880",
    "end": "1046160"
  },
  {
    "text": "impossible to leak resources it's really",
    "start": "1046160",
    "end": "1048480"
  },
  {
    "text": "really really safe composability it gets",
    "start": "1048480",
    "end": "1051880"
  },
  {
    "text": "uh a B+ so it's very very composable you",
    "start": "1051880",
    "end": "1055080"
  },
  {
    "text": "can combine these things in all kinds of",
    "start": "1055080",
    "end": "1057400"
  },
  {
    "text": "crazy different ways uh it doesn't get",
    "start": "1057400",
    "end": "1059679"
  },
  {
    "text": "an A in my opinion because some of the",
    "start": "1059679",
    "end": "1062919"
  },
  {
    "text": "more complicated compositions are",
    "start": "1062919",
    "end": "1065799"
  },
  {
    "text": "extremely complex and difficult to",
    "start": "1065799",
    "end": "1068080"
  },
  {
    "text": "express uh with",
    "start": "1068080",
    "end": "1069960"
  },
  {
    "text": "ites uh but but it is extraordinarily",
    "start": "1069960",
    "end": "1072919"
  },
  {
    "text": "composable there are many things you can",
    "start": "1072919",
    "end": "1074559"
  },
  {
    "text": "think of like can we read from more than",
    "start": "1074559",
    "end": "1076520"
  },
  {
    "text": "one input source at a time can we read",
    "start": "1076520",
    "end": "1079080"
  },
  {
    "text": "from one input source and another and",
    "start": "1079080",
    "end": "1081440"
  },
  {
    "text": "the results of how fast we read from",
    "start": "1081440",
    "end": "1083080"
  },
  {
    "text": "this one depend on what we read in this",
    "start": "1083080",
    "end": "1084559"
  },
  {
    "text": "one the answer is yes to all those",
    "start": "1084559",
    "end": "1086240"
  },
  {
    "text": "questions it's very complicated but it",
    "start": "1086240",
    "end": "1088240"
  },
  {
    "text": "can be",
    "start": "1088240",
    "end": "1089080"
  },
  {
    "text": "done high performance um this is",
    "start": "1089080",
    "end": "1092320"
  },
  {
    "text": "specifically with respect to the jvm and",
    "start": "1092320",
    "end": "1094880"
  },
  {
    "text": "the scholar programming language",
    "start": "1094880",
    "end": "1096000"
  },
  {
    "text": "unfortunately iterates are not that",
    "start": "1096000",
    "end": "1098320"
  },
  {
    "text": "performant uh they are relatively slow",
    "start": "1098320",
    "end": "1101280"
  },
  {
    "text": "because the first thing you want to do",
    "start": "1101280",
    "end": "1102919"
  },
  {
    "text": "when you have them is compose them",
    "start": "1102919",
    "end": "1104480"
  },
  {
    "text": "together and every composition every",
    "start": "1104480",
    "end": "1106240"
  },
  {
    "text": "layer of composition adds additional",
    "start": "1106240",
    "end": "1107880"
  },
  {
    "text": "overhead we had to do some crazy things",
    "start": "1107880",
    "end": "1111440"
  },
  {
    "text": "uh to use them ourselves internally uh",
    "start": "1111440",
    "end": "1114080"
  },
  {
    "text": "one of which is chunky so instead of",
    "start": "1114080",
    "end": "1116039"
  },
  {
    "text": "processing one element at a time we",
    "start": "1116039",
    "end": "1118200"
  },
  {
    "text": "process big fat chunks of elements and",
    "start": "1118200",
    "end": "1120240"
  },
  {
    "text": "that reduces the overhead of all this",
    "start": "1120240",
    "end": "1123039"
  },
  {
    "text": "infrastructure on a per element basis to",
    "start": "1123039",
    "end": "1125400"
  },
  {
    "text": "a level that it's",
    "start": "1125400",
    "end": "1126880"
  },
  {
    "text": "manageable they're reasonably type safe",
    "start": "1126880",
    "end": "1129320"
  },
  {
    "text": "they're not completely type safe they do",
    "start": "1129320",
    "end": "1130640"
  },
  {
    "text": "not get an A there are some weird things",
    "start": "1130640",
    "end": "1132840"
  },
  {
    "text": "about iterates one is the fact that you",
    "start": "1132840",
    "end": "1134559"
  },
  {
    "text": "can feed an iterate an end of file",
    "start": "1134559",
    "end": "1137039"
  },
  {
    "text": "signal and you have guarantee that it's",
    "start": "1137039",
    "end": "1139919"
  },
  {
    "text": "actually going to produce a value you",
    "start": "1139919",
    "end": "1141960"
  },
  {
    "text": "you have no way of encoding that in the",
    "start": "1141960",
    "end": "1144200"
  },
  {
    "text": "type system and there are Al also some",
    "start": "1144200",
    "end": "1146400"
  },
  {
    "text": "other strange things when you use when",
    "start": "1146400",
    "end": "1148400"
  },
  {
    "text": "you have an iterate that basically has a",
    "start": "1148400",
    "end": "1150320"
  },
  {
    "text": "state that acts as a control signal to",
    "start": "1150320",
    "end": "1152720"
  },
  {
    "text": "tell things to rewind or",
    "start": "1152720",
    "end": "1154960"
  },
  {
    "text": "Advance it is really really hard to",
    "start": "1154960",
    "end": "1157600"
  },
  {
    "text": "develop a a a way of composing those",
    "start": "1157600",
    "end": "1160480"
  },
  {
    "text": "things together in a generic manner that",
    "start": "1160480",
    "end": "1162960"
  },
  {
    "text": "doesn't lead to nonsense in some cases",
    "start": "1162960",
    "end": "1165840"
  },
  {
    "text": "and uh and as a result they they don't",
    "start": "1165840",
    "end": "1168200"
  },
  {
    "text": "get a a for type safety but largely uh",
    "start": "1168200",
    "end": "1170600"
  },
  {
    "text": "they are type",
    "start": "1170600",
    "end": "1171840"
  },
  {
    "text": "safe so simple Unfortunately they get a",
    "start": "1171840",
    "end": "1174720"
  },
  {
    "text": "d because iterates even in the naive",
    "start": "1174720",
    "end": "1177840"
  },
  {
    "text": "implementation confuse many people",
    "start": "1177840",
    "end": "1179440"
  },
  {
    "text": "they're actually not that complicated",
    "start": "1179440",
    "end": "1180760"
  },
  {
    "text": "it's a little awkward to program with",
    "start": "1180760",
    "end": "1182200"
  },
  {
    "text": "them but usually you end up writing",
    "start": "1182200",
    "end": "1184600"
  },
  {
    "text": "combinators that do things like take and",
    "start": "1184600",
    "end": "1186840"
  },
  {
    "text": "drop while and other kinds of things to",
    "start": "1186840",
    "end": "1188440"
  },
  {
    "text": "make them a lot more pleasant to deal",
    "start": "1188440",
    "end": "1190120"
  },
  {
    "text": "with uh but when you do the more",
    "start": "1190120",
    "end": "1192520"
  },
  {
    "text": "advanced stuff with ites they become",
    "start": "1192520",
    "end": "1195240"
  },
  {
    "text": "very very complex and in schola the type",
    "start": "1195240",
    "end": "1197440"
  },
  {
    "text": "signatures start growing to multiple",
    "start": "1197440",
    "end": "1199280"
  },
  {
    "text": "Pages because you're doing type lambdas",
    "start": "1199280",
    "end": "1201240"
  },
  {
    "text": "and type lambdas and just things go out",
    "start": "1201240",
    "end": "1203120"
  },
  {
    "text": "of control like crazy so they are not",
    "start": "1203120",
    "end": "1205400"
  },
  {
    "text": "simple they're not simple by any means",
    "start": "1205400",
    "end": "1207960"
  },
  {
    "text": "uh they can do incremental in fact they",
    "start": "1207960",
    "end": "1209640"
  },
  {
    "text": "excel at incremental input and",
    "start": "1209640",
    "end": "1212240"
  },
  {
    "start": "1212000",
    "end": "1291000"
  },
  {
    "text": "output so let's take a look at an",
    "start": "1212240",
    "end": "1214240"
  },
  {
    "text": "alternate way of phrasing things uh we",
    "start": "1214240",
    "end": "1216159"
  },
  {
    "text": "looked at one example where we kind of",
    "start": "1216159",
    "end": "1218440"
  },
  {
    "text": "built up this functional IO system uh",
    "start": "1218440",
    "end": "1221000"
  },
  {
    "text": "using F starting from fold left and it",
    "start": "1221000",
    "end": "1223559"
  },
  {
    "text": "turns out we can do something very",
    "start": "1223559",
    "end": "1224919"
  },
  {
    "text": "similar starting from map map's a lot",
    "start": "1224919",
    "end": "1227360"
  },
  {
    "text": "simpler and functional IO built around",
    "start": "1227360",
    "end": "1230320"
  },
  {
    "text": "this concept is much better at doing",
    "start": "1230320",
    "end": "1231919"
  },
  {
    "text": "some kinds of",
    "start": "1231919",
    "end": "1233280"
  },
  {
    "text": "things so this is a basic map but we",
    "start": "1233280",
    "end": "1236120"
  },
  {
    "text": "have the same problem uh we had before",
    "start": "1236120",
    "end": "1238240"
  },
  {
    "text": "at some point in our iter development in",
    "start": "1238240",
    "end": "1240360"
  },
  {
    "text": "that F has no memory you send it an A",
    "start": "1240360",
    "end": "1242320"
  },
  {
    "text": "and it will always send you a b it can't",
    "start": "1242320",
    "end": "1244120"
  },
  {
    "text": "remember what's gone before so the first",
    "start": "1244120",
    "end": "1246039"
  },
  {
    "text": "thing we do is introduce kind of a",
    "start": "1246039",
    "end": "1248600"
  },
  {
    "text": "machine where you send it a value and it",
    "start": "1248600",
    "end": "1250919"
  },
  {
    "text": "Returns the output as well as the",
    "start": "1250919",
    "end": "1252840"
  },
  {
    "text": "continuation of itself the next function",
    "start": "1252840",
    "end": "1255159"
  },
  {
    "text": "in line to succeed it and with that kind",
    "start": "1255159",
    "end": "1257760"
  },
  {
    "text": "of encoding you can have as much memory",
    "start": "1257760",
    "end": "1259799"
  },
  {
    "text": "as you want it's similar because now you",
    "start": "1259799",
    "end": "1262080"
  },
  {
    "text": "can map values but over time I mean it's",
    "start": "1262080",
    "end": "1265080"
  },
  {
    "text": "more restrictive than a fold because",
    "start": "1265080",
    "end": "1267200"
  },
  {
    "text": "you're forced to emit these B's as you",
    "start": "1267200",
    "end": "1269120"
  },
  {
    "text": "go along so you're doing stream",
    "start": "1269120",
    "end": "1271240"
  },
  {
    "text": "processing in instead of folding to a",
    "start": "1271240",
    "end": "1273880"
  },
  {
    "text": "single value",
    "start": "1273880",
    "end": "1277120"
  },
  {
    "text": "a yeah it's a scan that's exactly what",
    "start": "1278200",
    "end": "1280520"
  },
  {
    "text": "it",
    "start": "1280520",
    "end": "1282640"
  },
  {
    "text": "is yes that's right yeah it's bad",
    "start": "1285400",
    "end": "1287760"
  },
  {
    "text": "terminology I Chang it",
    "start": "1287760",
    "end": "1290000"
  },
  {
    "text": "eventually so",
    "start": "1290000",
    "end": "1292039"
  },
  {
    "start": "1291000",
    "end": "1433000"
  },
  {
    "text": "um what can you do with that well uh you",
    "start": "1292039",
    "end": "1295320"
  },
  {
    "text": "end up calling this thing that you can",
    "start": "1295320",
    "end": "1296919"
  },
  {
    "text": "call map on it uh you call it a stream",
    "start": "1296919",
    "end": "1299360"
  },
  {
    "text": "and the other one you call a stream",
    "start": "1299360",
    "end": "1300520"
  },
  {
    "text": "processor or there are lots of different",
    "start": "1300520",
    "end": "1302360"
  },
  {
    "text": "there are lots of different names for",
    "start": "1302360",
    "end": "1303480"
  },
  {
    "text": "these things uh in in hasco World um",
    "start": "1303480",
    "end": "1306640"
  },
  {
    "text": "there's a framework built around this",
    "start": "1306640",
    "end": "1308240"
  },
  {
    "text": "that's called",
    "start": "1308240",
    "end": "1310640"
  },
  {
    "text": "conduits stream processors by themselves",
    "start": "1310640",
    "end": "1313279"
  },
  {
    "text": "aren't all that interesting because they",
    "start": "1313279",
    "end": "1314840"
  },
  {
    "text": "can they can process values they can",
    "start": "1314840",
    "end": "1316480"
  },
  {
    "text": "transform them they can manipulate them",
    "start": "1316480",
    "end": "1318120"
  },
  {
    "text": "if you extend this like if B becomes an",
    "start": "1318120",
    "end": "1320360"
  },
  {
    "text": "option of something else for example",
    "start": "1320360",
    "end": "1322960"
  },
  {
    "text": "then you can conditionally emit values",
    "start": "1322960",
    "end": "1324960"
  },
  {
    "text": "you can do all kinds of interesting",
    "start": "1324960",
    "end": "1326120"
  },
  {
    "text": "things you can combine them together in",
    "start": "1326120",
    "end": "1327919"
  },
  {
    "text": "various ways but at the end of the day",
    "start": "1327919",
    "end": "1329679"
  },
  {
    "text": "you need a source for values and you",
    "start": "1329679",
    "end": "1331159"
  },
  {
    "text": "need some sort of sync and for that uh",
    "start": "1331159",
    "end": "1334840"
  },
  {
    "text": "you usually end up with structures",
    "start": "1334840",
    "end": "1336880"
  },
  {
    "text": "similar to this you'll have a source um",
    "start": "1336880",
    "end": "1339880"
  },
  {
    "text": "and you'll have a sync and I'm missing",
    "start": "1339880",
    "end": "1342120"
  },
  {
    "text": "some methods here typically what you see",
    "start": "1342120",
    "end": "1344200"
  },
  {
    "text": "in these kinds of libraries is Source",
    "start": "1344200",
    "end": "1346120"
  },
  {
    "text": "will have some sort of means of pulling",
    "start": "1346120",
    "end": "1348200"
  },
  {
    "text": "data out of it in a in a semi impure way",
    "start": "1348200",
    "end": "1352279"
  },
  {
    "text": "so it ends up being wrapped in some ioon",
    "start": "1352279",
    "end": "1354880"
  },
  {
    "text": "ad ultimately um that will return you a",
    "start": "1354880",
    "end": "1357640"
  },
  {
    "text": "value as well as the continuation source",
    "start": "1357640",
    "end": "1360440"
  },
  {
    "text": "to use for when you want more input and",
    "start": "1360440",
    "end": "1362840"
  },
  {
    "text": "syncs usually have a push method that",
    "start": "1362840",
    "end": "1365240"
  },
  {
    "text": "ends up doing the same thing pushing a",
    "start": "1365240",
    "end": "1367120"
  },
  {
    "text": "value um but still you can see some of",
    "start": "1367120",
    "end": "1370360"
  },
  {
    "text": "the compositional properties here even",
    "start": "1370360",
    "end": "1372000"
  },
  {
    "text": "with the methods I've listed like you",
    "start": "1372000",
    "end": "1373600"
  },
  {
    "text": "can take uh you can take one of these",
    "start": "1373600",
    "end": "1375320"
  },
  {
    "text": "stream",
    "start": "1375320",
    "end": "1376400"
  },
  {
    "text": "processors which form an arrow and uh",
    "start": "1376400",
    "end": "1379799"
  },
  {
    "text": "you can you can append it onto a source",
    "start": "1379799",
    "end": "1382080"
  },
  {
    "text": "to produce a new source like if you can",
    "start": "1382080",
    "end": "1384240"
  },
  {
    "text": "produce values and you can transform",
    "start": "1384240",
    "end": "1385679"
  },
  {
    "text": "them then uh you can produce values",
    "start": "1385679",
    "end": "1387799"
  },
  {
    "text": "basically and the same way for uh a sync",
    "start": "1387799",
    "end": "1390480"
  },
  {
    "text": "you can take a sync and then prepend one",
    "start": "1390480",
    "end": "1392039"
  },
  {
    "text": "of these stre stream Transformers to it",
    "start": "1392039",
    "end": "1394559"
  },
  {
    "text": "and then call that thing Sync It's just",
    "start": "1394559",
    "end": "1396279"
  },
  {
    "text": "sync of a of a different type um and",
    "start": "1396279",
    "end": "1399080"
  },
  {
    "text": "there are lots of different ways you can",
    "start": "1399080",
    "end": "1400279"
  },
  {
    "text": "combine the stream Transformers",
    "start": "1400279",
    "end": "1402080"
  },
  {
    "text": "themselves basically anything that you",
    "start": "1402080",
    "end": "1403559"
  },
  {
    "text": "can do with an error you can do with",
    "start": "1403559",
    "end": "1404600"
  },
  {
    "text": "these stream Transformers you can do",
    "start": "1404600",
    "end": "1406080"
  },
  {
    "text": "this one and this one and this one",
    "start": "1406080",
    "end": "1407600"
  },
  {
    "text": "transform from a B to C to D Etc and you",
    "start": "1407600",
    "end": "1410600"
  },
  {
    "text": "can do other things as",
    "start": "1410600",
    "end": "1412120"
  },
  {
    "text": "well so uh the actual implementation for",
    "start": "1412120",
    "end": "1414799"
  },
  {
    "text": "these look a lot more complicated uh",
    "start": "1414799",
    "end": "1417600"
  },
  {
    "text": "because with all this impurity you",
    "start": "1417600",
    "end": "1419679"
  },
  {
    "text": "basically end up needing to introduce",
    "start": "1419679",
    "end": "1421360"
  },
  {
    "text": "some notion of a transaction to help you",
    "start": "1421360",
    "end": "1423960"
  },
  {
    "text": "um help you not leak resources and once",
    "start": "1423960",
    "end": "1427880"
  },
  {
    "text": "you introduce that and the Iona they end",
    "start": "1427880",
    "end": "1429600"
  },
  {
    "text": "up being a lot more complicated than",
    "start": "1429600",
    "end": "1431279"
  },
  {
    "text": "what you see",
    "start": "1431279",
    "end": "1432480"
  },
  {
    "text": "here so how do they do are they resource",
    "start": "1432480",
    "end": "1434960"
  },
  {
    "text": "safe well conditionally uh conditionally",
    "start": "1434960",
    "end": "1437240"
  },
  {
    "text": "these things are resource safe you have",
    "start": "1437240",
    "end": "1438799"
  },
  {
    "text": "to do some work you have to wrap stuff",
    "start": "1438799",
    "end": "1440880"
  },
  {
    "text": "in a transaction or region to get",
    "start": "1440880",
    "end": "1442400"
  },
  {
    "text": "resource safety but you can make it work",
    "start": "1442400",
    "end": "1444960"
  },
  {
    "text": "they are very composable so you can",
    "start": "1444960",
    "end": "1446880"
  },
  {
    "text": "actually compose them more simply in",
    "start": "1446880",
    "end": "1449640"
  },
  {
    "text": "some cases than you can with iterates",
    "start": "1449640",
    "end": "1451880"
  },
  {
    "text": "when you have these two sinks and you",
    "start": "1451880",
    "end": "1453080"
  },
  {
    "text": "can pull from one and pull from the",
    "start": "1453080",
    "end": "1454400"
  },
  {
    "text": "other at different rates becomes a lot",
    "start": "1454400",
    "end": "1456159"
  },
  {
    "text": "more natural to to do some kinds of",
    "start": "1456159",
    "end": "1458640"
  },
  {
    "text": "compositions up pure no unfortunately",
    "start": "1458640",
    "end": "1462559"
  },
  {
    "text": "the only thing that's pure and it's not",
    "start": "1462559",
    "end": "1463840"
  },
  {
    "text": "even pure in like the the hascal library",
    "start": "1463840",
    "end": "1466120"
  },
  {
    "text": "conduits is the stream Transformer",
    "start": "1466120",
    "end": "1468039"
  },
  {
    "text": "portra",
    "start": "1468039",
    "end": "1469080"
  },
  {
    "text": "that part can be 100% pure in most cases",
    "start": "1469080",
    "end": "1471760"
  },
  {
    "text": "unless you need to do some sort of side",
    "start": "1471760",
    "end": "1473840"
  },
  {
    "text": "affecting operation inside there",
    "start": "1473840",
    "end": "1475720"
  },
  {
    "text": "everything else is contaminated with",
    "start": "1475720",
    "end": "1477840"
  },
  {
    "text": "impurity um and it it just whether it's",
    "start": "1477840",
    "end": "1480120"
  },
  {
    "text": "IO or whatever it just in infects it and",
    "start": "1480120",
    "end": "1482120"
  },
  {
    "text": "makes it harder to reason",
    "start": "1482120",
    "end": "1483640"
  },
  {
    "text": "about high performance they're about on",
    "start": "1483640",
    "end": "1486440"
  },
  {
    "text": "par with iterates at least if you do it",
    "start": "1486440",
    "end": "1488480"
  },
  {
    "text": "by the element by element level every",
    "start": "1488480",
    "end": "1490080"
  },
  {
    "text": "time you call the the stream Transformer",
    "start": "1490080",
    "end": "1492760"
  },
  {
    "text": "uh to produce a new element it's",
    "start": "1492760",
    "end": "1494200"
  },
  {
    "text": "supplying a new function and all that",
    "start": "1494200",
    "end": "1495880"
  },
  {
    "text": "element by element overhead adds up",
    "start": "1495880",
    "end": "1499159"
  },
  {
    "text": "it's type safe it's reasonably type safe",
    "start": "1499159",
    "end": "1501480"
  },
  {
    "text": "it's fairly simple it's a lot simpler",
    "start": "1501480",
    "end": "1503159"
  },
  {
    "text": "simpler than iterates most people find",
    "start": "1503159",
    "end": "1505799"
  },
  {
    "text": "uh conduit it's these stream processor",
    "start": "1505799",
    "end": "1507919"
  },
  {
    "text": "libraries a lot simpler to understand",
    "start": "1507919",
    "end": "1509600"
  },
  {
    "text": "because they can think of it literally",
    "start": "1509600",
    "end": "1511039"
  },
  {
    "text": "as in terms of a source of values a pipe",
    "start": "1511039",
    "end": "1513600"
  },
  {
    "text": "that can maybe change stuff uh over time",
    "start": "1513600",
    "end": "1516360"
  },
  {
    "text": "in response to stuff it's learned in the",
    "start": "1516360",
    "end": "1518039"
  },
  {
    "text": "past and then a sync for values and",
    "start": "1518039",
    "end": "1519840"
  },
  {
    "text": "that's relatively simple it's simple to",
    "start": "1519840",
    "end": "1522039"
  },
  {
    "text": "think",
    "start": "1522039",
    "end": "1524039"
  },
  {
    "text": "about um you can do incremental IO with",
    "start": "1524039",
    "end": "1527039"
  },
  {
    "text": "these things and uh there they're",
    "start": "1527039",
    "end": "1528440"
  },
  {
    "text": "reasonably expressive they're they're",
    "start": "1528440",
    "end": "1530000"
  },
  {
    "text": "more expressive than iterates uh for a",
    "start": "1530000",
    "end": "1532799"
  },
  {
    "text": "given amount of work",
    "start": "1532799",
    "end": "1535480"
  },
  {
    "text": "anyway so I've given you kind of uh a",
    "start": "1535480",
    "end": "1538679"
  },
  {
    "text": "taste for a few different ways of doing",
    "start": "1538679",
    "end": "1541919"
  },
  {
    "text": "functional IO none of them are perfect",
    "start": "1541919",
    "end": "1543720"
  },
  {
    "text": "they all make different tradeoffs um and",
    "start": "1543720",
    "end": "1547080"
  },
  {
    "text": "I I've been kind of looking for what's",
    "start": "1547080",
    "end": "1550440"
  },
  {
    "text": "next in my opinion Ires they don't quite",
    "start": "1550440",
    "end": "1552559"
  },
  {
    "text": "do it stream processors they don't quite",
    "start": "1552559",
    "end": "1554600"
  },
  {
    "text": "do it conduits they're a little messy uh",
    "start": "1554600",
    "end": "1557600"
  },
  {
    "text": "I I think definitely there's something",
    "start": "1557600",
    "end": "1559320"
  },
  {
    "text": "out there that achieves more of the",
    "start": "1559320",
    "end": "1561399"
  },
  {
    "text": "criteria I consider to be good and what",
    "start": "1561399",
    "end": "1563360"
  },
  {
    "text": "does it look like well I think for one",
    "start": "1563360",
    "end": "1565760"
  },
  {
    "text": "it's going to have a push based sources",
    "start": "1565760",
    "end": "1568120"
  },
  {
    "text": "uh to lend itself to synchronous",
    "start": "1568120",
    "end": "1569520"
  },
  {
    "text": "programming the reality is is is that",
    "start": "1569520",
    "end": "1571840"
  },
  {
    "text": "when you're programming out there in the",
    "start": "1571840",
    "end": "1573080"
  },
  {
    "text": "wild you can't pull a chunk of material",
    "start": "1573080",
    "end": "1576039"
  },
  {
    "text": "um instantaneously there's always some",
    "start": "1576039",
    "end": "1578000"
  },
  {
    "text": "sort of delay and that delay you don't",
    "start": "1578000",
    "end": "1579440"
  },
  {
    "text": "have control over and it's proportional",
    "start": "1579440",
    "end": "1581120"
  },
  {
    "text": "to the size of the data that you're",
    "start": "1581120",
    "end": "1582559"
  },
  {
    "text": "trying to pull and so in order to be",
    "start": "1582559",
    "end": "1584919"
  },
  {
    "text": "efficient a push based sources such as",
    "start": "1584919",
    "end": "1587279"
  },
  {
    "text": "iterates where the numerator is feeding",
    "start": "1587279",
    "end": "1589279"
  },
  {
    "text": "all the values instead of the um the",
    "start": "1589279",
    "end": "1592440"
  },
  {
    "text": "receptor pulling them uh make a lot more",
    "start": "1592440",
    "end": "1596480"
  },
  {
    "text": "sense so um it has to use chunking in my",
    "start": "1596480",
    "end": "1599960"
  },
  {
    "text": "in my opinion Scola on the jvm you",
    "start": "1599960",
    "end": "1602080"
  },
  {
    "text": "cannot have a performant library that",
    "start": "1602080",
    "end": "1603840"
  },
  {
    "text": "reads things element by element unless",
    "start": "1603840",
    "end": "1606039"
  },
  {
    "text": "your elements represent whole documents",
    "start": "1606039",
    "end": "1607720"
  },
  {
    "text": "or something you need to chunk it and",
    "start": "1607720",
    "end": "1610080"
  },
  {
    "text": "that makes the interface more Awkward to",
    "start": "1610080",
    "end": "1612080"
  },
  {
    "text": "deal with and uh that's an inevitable",
    "start": "1612080",
    "end": "1615399"
  },
  {
    "text": "reality in my opinion of doing of doing",
    "start": "1615399",
    "end": "1617960"
  },
  {
    "text": "Hy performance functional iio on the",
    "start": "1617960",
    "end": "1621200"
  },
  {
    "text": "jvm the chunking basically allows you to",
    "start": "1621200",
    "end": "1623640"
  },
  {
    "text": "arbitrarily squash down the cost of all",
    "start": "1623640",
    "end": "1625440"
  },
  {
    "text": "this extra stuff on a per element",
    "start": "1625440",
    "end": "1628039"
  },
  {
    "text": "basis um something very interesting is",
    "start": "1628039",
    "end": "1630960"
  },
  {
    "text": "is possibly using Mantic regions uh for",
    "start": "1630960",
    "end": "1633360"
  },
  {
    "text": "resource safety as as part of the main",
    "start": "1633360",
    "end": "1635720"
  },
  {
    "text": "motivations of iterate uh is is the fact",
    "start": "1635720",
    "end": "1638679"
  },
  {
    "text": "that you don't leak resources well if",
    "start": "1638679",
    "end": "1640520"
  },
  {
    "text": "you use Mantic regions to get that",
    "start": "1640520",
    "end": "1642520"
  },
  {
    "text": "resource safety then some of the",
    "start": "1642520",
    "end": "1644159"
  },
  {
    "text": "benefits associated with iterates go",
    "start": "1644159",
    "end": "1646080"
  },
  {
    "text": "away and you open yourself up to a more",
    "start": "1646080",
    "end": "1648440"
  },
  {
    "text": "simpler model of programming that",
    "start": "1648440",
    "end": "1650440"
  },
  {
    "text": "appears to be pole-based but in fact it",
    "start": "1650440",
    "end": "1653000"
  },
  {
    "text": "it's not pole-based",
    "start": "1653000",
    "end": "1654520"
  },
  {
    "text": "um and and in which you're guaranteed",
    "start": "1654520",
    "end": "1657039"
  },
  {
    "text": "that resources will will be allocated at",
    "start": "1657039",
    "end": "1659200"
  },
  {
    "text": "the right time by the regions that",
    "start": "1659200",
    "end": "1660840"
  },
  {
    "text": "you're using and I include some",
    "start": "1660840",
    "end": "1662159"
  },
  {
    "text": "resources at the end of this if you want",
    "start": "1662159",
    "end": "1663480"
  },
  {
    "text": "to dig deeper into that um and I think",
    "start": "1663480",
    "end": "1666440"
  },
  {
    "text": "that there's going to be if you hit some",
    "start": "1666440",
    "end": "1668799"
  },
  {
    "text": "certain marks I think there's going to",
    "start": "1668799",
    "end": "1670919"
  },
  {
    "text": "be if for example you hit performance",
    "start": "1670919",
    "end": "1673480"
  },
  {
    "text": "marks I think it's going to be perhaps a",
    "start": "1673480",
    "end": "1675159"
  },
  {
    "text": "little awkward and a little complex to",
    "start": "1675159",
    "end": "1676760"
  },
  {
    "text": "use and I think that's just a necessary",
    "start": "1676760",
    "end": "1679200"
  },
  {
    "text": "limitation of the jvm at this point is",
    "start": "1679200",
    "end": "1680960"
  },
  {
    "text": "that you can't have the cleanest most",
    "start": "1680960",
    "end": "1682840"
  },
  {
    "text": "beautiful most composable code that runs",
    "start": "1682840",
    "end": "1686360"
  },
  {
    "text": "performant uh and another option is",
    "start": "1686360",
    "end": "1688600"
  },
  {
    "text": "instead of doing that I mean there are",
    "start": "1688600",
    "end": "1690279"
  },
  {
    "text": "certain points you have uh in designing",
    "start": "1690279",
    "end": "1693200"
  },
  {
    "text": "any of these libraries at which you can",
    "start": "1693200",
    "end": "1694960"
  },
  {
    "text": "insert something that's a little unsafe",
    "start": "1694960",
    "end": "1697360"
  },
  {
    "text": "or something that's a little Dynamic and",
    "start": "1697360",
    "end": "1699480"
  },
  {
    "text": "if you do that it basically broadens the",
    "start": "1699480",
    "end": "1701600"
  },
  {
    "text": "space that you can explore and you can",
    "start": "1701600",
    "end": "1704000"
  },
  {
    "text": "reach more of the other tradeoffs so if",
    "start": "1704000",
    "end": "1706080"
  },
  {
    "text": "you're willing to sacrifice a little",
    "start": "1706080",
    "end": "1707519"
  },
  {
    "text": "type safety",
    "start": "1707519",
    "end": "1708919"
  },
  {
    "text": "or a little resource allocation safety",
    "start": "1708919",
    "end": "1711279"
  },
  {
    "text": "uh then you can get a lot of the other",
    "start": "1711279",
    "end": "1712640"
  },
  {
    "text": "stuff on that report",
    "start": "1712640",
    "end": "1715519"
  },
  {
    "start": "1715000",
    "end": "1790000"
  },
  {
    "text": "card so here's some source code I",
    "start": "1715519",
    "end": "1717760"
  },
  {
    "text": "recommend that you check out uh Scala",
    "start": "1717760",
    "end": "1720320"
  },
  {
    "text": "Zed",
    "start": "1720320",
    "end": "1721480"
  },
  {
    "text": "iterates um which we've contributed to",
    "start": "1721480",
    "end": "1724399"
  },
  {
    "text": "heavily uh read yeah it's not Light",
    "start": "1724399",
    "end": "1727440"
  },
  {
    "text": "reading and there are typ signatures",
    "start": "1727440",
    "end": "1729200"
  },
  {
    "text": "there that will scare you uh hasal",
    "start": "1729200",
    "end": "1731720"
  },
  {
    "text": "conduits um that's not it's not a very",
    "start": "1731720",
    "end": "1734399"
  },
  {
    "text": "clean Library it's actually very very",
    "start": "1734399",
    "end": "1736559"
  },
  {
    "text": "messy um but it ites does have all the",
    "start": "1736559",
    "end": "1738880"
  },
  {
    "text": "basics in there uh Scala conduits which",
    "start": "1738880",
    "end": "1742000"
  },
  {
    "text": "is uh an in progress Port of the hascal",
    "start": "1742000",
    "end": "1745399"
  },
  {
    "text": "conduits that's not yet ready for prime",
    "start": "1745399",
    "end": "1747320"
  },
  {
    "text": "time but it'll be interesting to see how",
    "start": "1747320",
    "end": "1748760"
  },
  {
    "text": "that shapes up there's scal machines if",
    "start": "1748760",
    "end": "1752200"
  },
  {
    "text": "you want to experiment with that and uh",
    "start": "1752200",
    "end": "1755360"
  },
  {
    "text": "hascal monatic regions and scalaz that",
    "start": "1755360",
    "end": "1757760"
  },
  {
    "text": "also has a region I don't think it's",
    "start": "1757760",
    "end": "1759919"
  },
  {
    "text": "fully complete yet yeah it looks like",
    "start": "1759919",
    "end": "1762799"
  },
  {
    "text": "it's a a work in",
    "start": "1762799",
    "end": "1764559"
  },
  {
    "text": "progress um but all these are really",
    "start": "1764559",
    "end": "1766960"
  },
  {
    "text": "good resources I recommend checking them",
    "start": "1766960",
    "end": "1768880"
  },
  {
    "text": "out reading the source code playing",
    "start": "1768880",
    "end": "1770279"
  },
  {
    "text": "around with them um and seeing what you",
    "start": "1770279",
    "end": "1773279"
  },
  {
    "text": "think so that's it um any questions",
    "start": "1773279",
    "end": "1779480"
  },
  {
    "text": "[Music]",
    "start": "1784120",
    "end": "1792579"
  }
]