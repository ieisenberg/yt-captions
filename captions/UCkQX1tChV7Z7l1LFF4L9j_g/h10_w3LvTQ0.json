[
  {
    "text": "[Music]",
    "start": "3320",
    "end": "8769"
  },
  {
    "text": "I am Chris biscardi this is where you can find me if you care um I educate people in Rust these days I write a lot",
    "start": "10719",
    "end": "17039"
  },
  {
    "text": "of rust I do Rust Contracting um I have 10 15 years of front-end development",
    "start": "17039",
    "end": "23119"
  },
  {
    "text": "worked on gasby webpack stuff all sorts of things um yeah but I am this on everything",
    "start": "23119",
    "end": "30000"
  },
  {
    "text": "YouTube Twitter hacker but there's 50 bajillion places to be these days uh the one thing that I want to say",
    "start": "30000",
    "end": "37320"
  },
  {
    "text": "before we get into the talk is that this is a talk about rust and JavaScript this is not a talk about me telling you to go",
    "start": "37320",
    "end": "44360"
  },
  {
    "text": "rewrite everything in Rust I'm not going to tell you to do that uh if anybody tells you to do that without looking at",
    "start": "44360",
    "end": "50199"
  },
  {
    "text": "your project don't believe them um so this is about writing rust in places",
    "start": "50199",
    "end": "57039"
  },
  {
    "text": "where it can be helpful for your JavaScript projects it is not about throwing all of your JavaScript out and",
    "start": "57039",
    "end": "62920"
  },
  {
    "text": "moving to a different language so when we get into it why",
    "start": "62920",
    "end": "69960"
  },
  {
    "text": "would you even think about doing this at all right and today's tools uh I guess we're",
    "start": "69960",
    "end": "77759"
  },
  {
    "text": "moving slightly past it these days right about a year or two into being past webpack now but webpack came out 2014",
    "start": "77759",
    "end": "85520"
  },
  {
    "text": "something like that it was great for time but uh who has had a webpack issue",
    "start": "85520",
    "end": "91040"
  },
  {
    "text": "that's costed them more than an hour yeah so um people are looking at",
    "start": "91040",
    "end": "97880"
  },
  {
    "text": "what do we what do we build after that you know people have built meta Frameworks on top of webpack people have used all sorts of things to try to make",
    "start": "97880",
    "end": "104600"
  },
  {
    "text": "webpack better to use easier to use faster whatever whatever",
    "start": "104600",
    "end": "109920"
  },
  {
    "text": "and people are starting to do that right so here's one example uh turbo pack from",
    "start": "109920",
    "end": "115799"
  },
  {
    "text": "the people at versel it is one of the people that worked on maintaining cre web pack they are rewriting and",
    "start": "115799",
    "end": "125159"
  },
  {
    "text": "rust why it's fast uh this is going to be what",
    "start": "126680",
    "end": "133280"
  },
  {
    "text": "everybody says just for it's not necessarily true all the time um which we'll get to but the thing",
    "start": "133280",
    "end": "142360"
  },
  {
    "text": "that I want to see say about this slide is that uh turbo pack is written in Rust",
    "start": "142360",
    "end": "147640"
  },
  {
    "text": "but also the things it's comparing to on this page also rust so swc we'll get to",
    "start": "147640",
    "end": "152840"
  },
  {
    "text": "later kind of a babble replacement written in Rust so you see more and more",
    "start": "152840",
    "end": "158160"
  },
  {
    "text": "of kind of rust popping up in all of these tools whether it's RS pack which",
    "start": "158160",
    "end": "163519"
  },
  {
    "text": "is you know all rust or it's turbo pack which is you know maybe all rust maybe",
    "start": "163519",
    "end": "169280"
  },
  {
    "text": "not whether it's other tools but all these tools are popping up they're all",
    "start": "169280",
    "end": "175159"
  },
  {
    "text": "choosing to use rust in some capacity and I want to convince you uh to not be",
    "start": "175159",
    "end": "180519"
  },
  {
    "text": "scared of it uh one of the things that I think people get hung up on when it comes to",
    "start": "180519",
    "end": "185840"
  },
  {
    "text": "rust is everybody talks about speed everybody talks about memory safety everybody talks about uh why you should",
    "start": "185840",
    "end": "192319"
  },
  {
    "text": "use it over C and I assume if you're in this track you all write JavaScript",
    "start": "192319",
    "end": "197840"
  },
  {
    "text": "right so none of you care about any of [Laughter]",
    "start": "197840",
    "end": "203000"
  },
  {
    "text": "that so we see this over and over it's like hey we look at how fast we are we used rust but people are starting to",
    "start": "203000",
    "end": "209400"
  },
  {
    "text": "build higher level tooling on top of these tools that use rust just like gasby just like Nest just",
    "start": "209400",
    "end": "215599"
  },
  {
    "text": "like all these other things um even the tools that are not switching completely",
    "start": "215599",
    "end": "221360"
  },
  {
    "text": "over to rust are rewriting components of themselves in Rust right so we've got parcel um parcel is kind of like a",
    "start": "221360",
    "end": "227319"
  },
  {
    "text": "webpack competitor V competitor Etc and it is starting to rewrite components of its system the things that it feels",
    "start": "227319",
    "end": "234760"
  },
  {
    "text": "matter uh in Rust and of course they also are",
    "start": "234760",
    "end": "240079"
  },
  {
    "text": "lightning fast just like everybody else um but if you read some of this",
    "start": "240079",
    "end": "245400"
  },
  {
    "text": "slide you'll find out that they're also using more rust tools like s swc they're using lightning CSS and aside from being",
    "start": "245400",
    "end": "253480"
  },
  {
    "text": "hundreds of times faster than whatever um this is having a real impact",
    "start": "253480",
    "end": "258880"
  },
  {
    "text": "on the people who are building these tools they're all choosing to go in these directions for a reason so I've",
    "start": "258880",
    "end": "265040"
  },
  {
    "text": "mentioned s swc a couple times uh Babel has been very popular for a long period of time um maybe a little less popular",
    "start": "265040",
    "end": "274160"
  },
  {
    "text": "recently uh but s swc is a rust replacement for Babel it does the same",
    "start": "274160",
    "end": "279840"
  },
  {
    "text": "thing it just does it faster again um it's also faster on four cores so",
    "start": "279840",
    "end": "287919"
  },
  {
    "text": "parallelism concurrency multi-threaded are also a theme that come up in these",
    "start": "287919",
    "end": "293000"
  },
  {
    "text": "uh they're basically all marketing pages right lightning CSS is the the CSS",
    "start": "293000",
    "end": "300759"
  },
  {
    "text": "parcer Transformer minifier thing um inside of parcel that",
    "start": "300759",
    "end": "305919"
  },
  {
    "text": "they're using um this is also used in other projects which I'll mention in a second they are also extremely",
    "start": "305919",
    "end": "315400"
  },
  {
    "text": "fast and all of them have this slide or a variation of this slide um because",
    "start": "316320",
    "end": "323680"
  },
  {
    "text": "apparently speed sells these days but I don't think that speed",
    "start": "323680",
    "end": "330360"
  },
  {
    "text": "or you know memory safety or whatever which none of you care about um are the selling points of rust and I think",
    "start": "330360",
    "end": "337319"
  },
  {
    "text": "that's obvious when you look at like what lightning CSS is built on top of",
    "start": "337319",
    "end": "342479"
  },
  {
    "text": "right so there are these crates that the Firefox browser uses to do CSS parsing when you load a page inside of Firefox",
    "start": "342479",
    "end": "350199"
  },
  {
    "text": "right and it would be nice if your tools were capable of parsing everything the",
    "start": "350199",
    "end": "355680"
  },
  {
    "text": "browser could uh and if you use those crates then they",
    "start": "355680",
    "end": "360880"
  },
  {
    "text": "are so there's no uh sort of like difference between what you have in some",
    "start": "360880",
    "end": "367360"
  },
  {
    "text": "custom parser and what is actually going to work in the browser",
    "start": "367360",
    "end": "372680"
  },
  {
    "text": "um so on and so forth now lightning CSS um is getting into other places not",
    "start": "372680",
    "end": "379400"
  },
  {
    "text": "just bundlers I've talked a lot about bundlers up until this point but Talent just made uh rust their",
    "start": "379400",
    "end": "387599"
  },
  {
    "text": "rust based parser the default parser so if you use Tailwind uh in the next",
    "start": "387599",
    "end": "392680"
  },
  {
    "text": "version this is unreleased as of the current change log um but in the next version you will be using",
    "start": "392680",
    "end": "399880"
  },
  {
    "text": "rust um even if you didn't choose to which is part of my",
    "start": "399880",
    "end": "406120"
  },
  {
    "text": "point um NX another build tool another minor reple tool also has some Rust in",
    "start": "406120",
    "end": "411960"
  },
  {
    "text": "it more importantly this is one of the tools that is not completely rewriting in Rust I'm not trying to convince you",
    "start": "411960",
    "end": "417639"
  },
  {
    "text": "to rewrite everything in Rust you don't have have to you can rewrite little pieces",
    "start": "417639",
    "end": "423400"
  },
  {
    "text": "introduce new features anything that's in a hot Loop anything that's heavy computation anything like that uh you",
    "start": "423400",
    "end": "429000"
  },
  {
    "text": "can do that in Rust you don't have to do everything in Rust so we looked at a couple marketing",
    "start": "429000",
    "end": "435440"
  },
  {
    "text": "Pages here right according to them why should you use",
    "start": "435440",
    "end": "441199"
  },
  {
    "text": "rust uh it's fast um parallelized architecture uh browser grade",
    "start": "441199",
    "end": "449720"
  },
  {
    "text": "uh this isn't necessarily the list that I would screenshot I'm going to have another one but is rust fast right because it's",
    "start": "449720",
    "end": "457160"
  },
  {
    "text": "on every single page all of them every single person that uses rust inside of",
    "start": "457160",
    "end": "462280"
  },
  {
    "text": "one of these projects is like it's fast that's why we're using it so like is",
    "start": "462280",
    "end": "468159"
  },
  {
    "text": "it and my answer to that is uh yeah I guess if you write a fast",
    "start": "468159",
    "end": "473960"
  },
  {
    "text": "program like you can write a fast JavaScript program right like the fastest when you're when you're doing performance work right the fastest thing",
    "start": "473960",
    "end": "480960"
  },
  {
    "text": "to do is to not do anything and you canot do anything in any",
    "start": "480960",
    "end": "486680"
  },
  {
    "text": "language so if you can avoid work everything gets faster um so is rust",
    "start": "486680",
    "end": "493280"
  },
  {
    "text": "fast I don't really think of languages as being faster or slower than each other um I think the algorithms uh the",
    "start": "493280",
    "end": "498919"
  },
  {
    "text": "amount of work the kind of work that you're doing tends to matter more which brings us to its parallelized",
    "start": "498919",
    "end": "506879"
  },
  {
    "text": "architecture and this has some truth to it um because of the ownership model",
    "start": "506879",
    "end": "512080"
  },
  {
    "text": "because of the borrowing uh the borrow Checker which you may have heard of or not um it's easier to write concurrent",
    "start": "512080",
    "end": "519120"
  },
  {
    "text": "code it's easier to write parallelized code um we'll talk about iterators later",
    "start": "519120",
    "end": "524159"
  },
  {
    "text": "if you wanted to parallelize something that was using an iterator you can use a crate called rayon and that allows you",
    "start": "524159",
    "end": "530279"
  },
  {
    "text": "to do a par iter which is short for parallel iter uh and then you get",
    "start": "530279",
    "end": "535320"
  },
  {
    "text": "parallelization magically uh well not magically like but",
    "start": "535320",
    "end": "540480"
  },
  {
    "text": "it does have some benefits right there is something to that um it's not magic",
    "start": "540480",
    "end": "545640"
  },
  {
    "text": "sauce it's not going to magically make whatever program you write parallel",
    "start": "545640",
    "end": "550760"
  },
  {
    "text": "um but there is something to it the other thing that's on these pages is these are browser grade right they're",
    "start": "550760",
    "end": "557200"
  },
  {
    "text": "using Code that is browser grade or rust is browser grade and um what does that",
    "start": "557200",
    "end": "562720"
  },
  {
    "text": "really mean right cuz like you don't care if lightning CSS is going to",
    "start": "562720",
    "end": "567760"
  },
  {
    "text": "transform your CSS it's either going to or it's not and uh if it's JavaScript or",
    "start": "567760",
    "end": "573519"
  },
  {
    "text": "rust you probably don't care right but browser grade means that it's",
    "start": "573519",
    "end": "578839"
  },
  {
    "text": "using the same crates that are used by say Firefox so this becomes an option if you choose rust right the parser for CSS",
    "start": "578839",
    "end": "587160"
  },
  {
    "text": "that you use can be the same parser that is used to load pages in Firefox the um",
    "start": "587160",
    "end": "593360"
  },
  {
    "text": "webg or Not webg Sorry web GPU implementation uh wgpu you can now use",
    "start": "593360",
    "end": "599040"
  },
  {
    "text": "in your projects if you're going to go you know try to build figma or something you can use the crate that Firefox uses",
    "start": "599040",
    "end": "606160"
  },
  {
    "text": "to implement web GPU in the browser and you can stick that in your program and",
    "start": "606160",
    "end": "611440"
  },
  {
    "text": "now you have a crossplatform GPU accelerated you know wasm based interface that you can play with via",
    "start": "611440",
    "end": "618160"
  },
  {
    "text": "JavaScript right so that's what it means to be browser grade uh in my",
    "start": "618160",
    "end": "624600"
  },
  {
    "text": "opinion uh and if you're not convinced at this point uh I don't blame you those weren't very",
    "start": "624600",
    "end": "631040"
  },
  {
    "text": "convincing I don't think that these marketing pages and saying that they are you know fast or saying that they're",
    "start": "631040",
    "end": "637920"
  },
  {
    "text": "more parallel than something else are really that interesting um so why rust and these are taken from",
    "start": "637920",
    "end": "646560"
  },
  {
    "text": "people on the internet who write rust so types um are you all typescript fans",
    "start": "646560",
    "end": "654200"
  },
  {
    "text": "raise your hand if you are if you are not leave your hand down okay so a lot of typescript people the",
    "start": "654200",
    "end": "660360"
  },
  {
    "text": "audience the way I'll phrase this then is that um using typescript you've",
    "start": "660360",
    "end": "666440"
  },
  {
    "text": "probably seen a lot of impedance mismatches with the way that JavaScript works right and types are great but they",
    "start": "666440",
    "end": "673680"
  },
  {
    "text": "are better when they are built into the language from the beginning right if you've ever been frustrated by an any",
    "start": "673680",
    "end": "680160"
  },
  {
    "text": "type if you've ever been frustrated by losing your type safety through some third party dependency or something like",
    "start": "680160",
    "end": "686600"
  },
  {
    "text": "that um it's a it's a stronger level of types is what the way I'll phrase it um",
    "start": "686600",
    "end": "693680"
  },
  {
    "text": "rust is lowle and high level what this means is that you can write operating systems which everybody is scared of um",
    "start": "693680",
    "end": "701399"
  },
  {
    "text": "and you can write web UI and it'll look a lot like your Java script that you're writing right so you can go from very",
    "start": "701399",
    "end": "709120"
  },
  {
    "text": "lowlevel stuff you can opt to care about things like that or you can write things that look a lot more like JavaScript",
    "start": "709120",
    "end": "715839"
  },
  {
    "text": "itself uh with types that were built in from the start wum is another uh reason that people",
    "start": "715839",
    "end": "722600"
  },
  {
    "text": "choose Russ right so if you want to uh you know build that figma competitor if",
    "start": "722600",
    "end": "728920"
  },
  {
    "text": "you have a lot of computation to do in a browser um WM can be a valid option for",
    "start": "728920",
    "end": "735120"
  },
  {
    "text": "you and rust is one of the top languages to use if you are going to Target",
    "start": "735120",
    "end": "742320"
  },
  {
    "text": "wasm and we'll get to this a little bit more later um there are scary words that people use like algebraic data",
    "start": "747279",
    "end": "754320"
  },
  {
    "text": "types nobody knows what that means [Laughter] right um this is the strs and enums",
    "start": "754320",
    "end": "762279"
  },
  {
    "text": "which we'll get to later uh basically you can define structs object types and",
    "start": "762279",
    "end": "767399"
  },
  {
    "text": "you can Define enums that also hold data it's really nice um no garbage collector that means",
    "start": "767399",
    "end": "774560"
  },
  {
    "text": "it embeds well that means it embeds well in JavaScript python Ruby Elixir it fits",
    "start": "774560",
    "end": "781600"
  },
  {
    "text": "inside of whatever you're already building you don't have to rewrite everything in it whatever you have in",
    "start": "781600",
    "end": "787199"
  },
  {
    "text": "your JavaScript world doesn't need to compete with rust for resources or",
    "start": "787199",
    "end": "793279"
  },
  {
    "text": "Garbage Collection or what have you um fast and",
    "start": "793279",
    "end": "799519"
  },
  {
    "text": "safe I think I'm just going to skip this one people people call things fast all the time they call things safe all the",
    "start": "799519",
    "end": "805760"
  },
  {
    "text": "time but as JavaScript people uh we write an memory safe language already",
    "start": "805760",
    "end": "811040"
  },
  {
    "text": "this doesn't mean a lot when you say this to a JavaScript crowd error handling um error handling",
    "start": "811040",
    "end": "818440"
  },
  {
    "text": "is great uh rust doesn't have undefined doesn't have null the errors are values",
    "start": "818440",
    "end": "823760"
  },
  {
    "text": "you can match on them you can deal with them um panics and rust",
    "start": "823760",
    "end": "829240"
  },
  {
    "text": "are destroy your program panics you do not catch them you do not deal with them",
    "start": "829240",
    "end": "834560"
  },
  {
    "text": "they're not going to uh pop up randomly uh without telling you um for most cases",
    "start": "834560",
    "end": "842399"
  },
  {
    "text": "all right cargo cargo is really powerful rust had the huge benefit of just coming",
    "start": "842399",
    "end": "849920"
  },
  {
    "text": "after everybody else right like rust was not built in 1990 and it looks like a",
    "start": "849920",
    "end": "856600"
  },
  {
    "text": "language that wasn't built in 1990 um that means that cargo the package manager that we use for us got to learn",
    "start": "856600",
    "end": "862680"
  },
  {
    "text": "from Ruby's bundler and everybody else like npm and the 5 million other package",
    "start": "862680",
    "end": "868839"
  },
  {
    "text": "man we have rust analyzer uh one of the things you all like about typescript I am sure",
    "start": "868839",
    "end": "875079"
  },
  {
    "text": "is the editor support the autocomplete that's what rest analyzer is it is a very powerful tool for",
    "start": "875079",
    "end": "881959"
  },
  {
    "text": "writing code refactoring code showing you errors doing autocomplete if you have a type in your editor with rust it",
    "start": "881959",
    "end": "888800"
  },
  {
    "text": "will tell you all of the functions that you can call on that type and it is not guessing it",
    "start": "888800",
    "end": "895480"
  },
  {
    "text": "knows scoped Resource Management um Main not be super interesting to you but",
    "start": "895480",
    "end": "901800"
  },
  {
    "text": "basically if you open a file you have to remember to close the file in Rust you don't have to remember to close the file because if you open a",
    "start": "901800",
    "end": "908800"
  },
  {
    "text": "file inside of a function and you end that function rust will drop that value and close the",
    "start": "908800",
    "end": "915000"
  },
  {
    "text": "file it's really nice to not have to remember to do that because I forget",
    "start": "915000",
    "end": "920199"
  },
  {
    "text": "that kind of thing all the time um zero cost abstractions uh this",
    "start": "920199",
    "end": "926360"
  },
  {
    "text": "is not going to be super meaningful um um basically what this means is Russ can",
    "start": "926360",
    "end": "932440"
  },
  {
    "text": "do a lot of stuff at compile time right if you want to use high level abstractions if you want to use generics",
    "start": "932440",
    "end": "938279"
  },
  {
    "text": "in your code we want that to be a compile time cost we don't want to uh",
    "start": "938279",
    "end": "944639"
  },
  {
    "text": "slow down our program at runtime that's what zero cost abstractions mean you can use high level",
    "start": "944639",
    "end": "950000"
  },
  {
    "text": "abstractions without paying a runtime cost um if anybody's ever built you know",
    "start": "950000",
    "end": "956199"
  },
  {
    "text": "like a webpack Plugin or something suddenly your whole build can slow down if you mess something up right that's",
    "start": "956199",
    "end": "961680"
  },
  {
    "text": "kind of the idea here uh pattern matching we'll get to it's related to enums and other things it's like fancy",
    "start": "961680",
    "end": "968160"
  },
  {
    "text": "switch statements type inference is really good right",
    "start": "968160",
    "end": "973680"
  },
  {
    "text": "so rust requires that you type all of your function definitions all the arguments in all the return values out",
    "start": "973680",
    "end": "981480"
  },
  {
    "text": "everything else is kind of up in the air it'll just infer everything else in your program if you let it um there are some",
    "start": "981480",
    "end": "988160"
  },
  {
    "text": "exceptions uh if things are super generic and rust can't tell which thing you actually want",
    "start": "988160",
    "end": "994600"
  },
  {
    "text": "uh that usually means there are multiple options and you have to be specific",
    "start": "994600",
    "end": "999800"
  },
  {
    "text": "we'll get to that uh the compiler error messages the best thing I can say about them is that they are worth",
    "start": "999800",
    "end": "1006240"
  },
  {
    "text": "reading sorry for other situations that you may be in",
    "start": "1006519",
    "end": "1012199"
  },
  {
    "text": "um the cargo has built in testing formatting linting um benchmarking",
    "start": "1012199",
    "end": "1017959"
  },
  {
    "text": "documentation um included in documentation is things like documentation tests so when you",
    "start": "1017959",
    "end": "1023720"
  },
  {
    "text": "build your documentation it will test to see whether those documentation examples actually work uh which is really nice",
    "start": "1023720",
    "end": "1030640"
  },
  {
    "text": "cuz it really is not great to go to some Library some crate and be like Oh I'm",
    "start": "1030640",
    "end": "1035839"
  },
  {
    "text": "going to use this you take the code you put it in your project and you're not sure why it doesn't",
    "start": "1035839",
    "end": "1042558"
  },
  {
    "text": "work and then memory safety I'm not going to talk about because none of y'all are going to care",
    "start": "1042559",
    "end": "1050760"
  },
  {
    "text": "um so why rust in my opinion uh rust is a tool that can make you better it can",
    "start": "1051120",
    "end": "1058760"
  },
  {
    "text": "make you better at what you do it can give you more time to do what you want to do it can enable you to write",
    "start": "1058760",
    "end": "1065559"
  },
  {
    "text": "programs that are maintainable that you can come back to in 3 to 6 months that aren't going to break when you come back",
    "start": "1065559",
    "end": "1071280"
  },
  {
    "text": "to them right I'm sure as javascripts we've all had the experience of some transitive dependency updating and",
    "start": "1071280",
    "end": "1078159"
  },
  {
    "text": "suddenly our our gasby app or our next app or our KN app or whatever we're using uh doesn't build for some reason",
    "start": "1078159",
    "end": "1085200"
  },
  {
    "text": "in CI and that really isn't fun um and I think that",
    "start": "1085200",
    "end": "1091360"
  },
  {
    "text": "rust really lets you avoid a lot of that so my opinion firef flowers widely",
    "start": "1091360",
    "end": "1097760"
  },
  {
    "text": "applicable we already talked about that you can write operating systems networking code you can write games you",
    "start": "1097760",
    "end": "1102919"
  },
  {
    "text": "can write web UI you can compile to wasum you can take rust you can embed it inside of a JavaScript project and let",
    "start": "1102919",
    "end": "1109320"
  },
  {
    "text": "other people mpm install your project and then call functions from that project just like any other JavaScript",
    "start": "1109320",
    "end": "1115480"
  },
  {
    "text": "package they don't even need to know you wrote it in Rust testing built in documentation",
    "start": "1115480",
    "end": "1120799"
  },
  {
    "text": "built in modern package management we've covered all that already I'm not going to cover it again uh until",
    "start": "1120799",
    "end": "1127360"
  },
  {
    "text": "later performance that sticks right it can be tough to optimize JavaScript programs if you have a hot Loop if you",
    "start": "1127360",
    "end": "1134400"
  },
  {
    "text": "have something that really matters if you are trying to reduce the amount of memory that you're using it is nice to",
    "start": "1134400",
    "end": "1139840"
  },
  {
    "text": "be able to use the type system to guarantee that those changes are going to stick right you don't want to make a",
    "start": "1139840",
    "end": "1146440"
  },
  {
    "text": "bunch of changes in say your JavaScript program um and then tomorrow one of your",
    "start": "1146440",
    "end": "1151760"
  },
  {
    "text": "teammates puts in a PR and suddenly you don't have the performance",
    "start": "1151760",
    "end": "1156880"
  },
  {
    "text": "benefits anymore it ameds really well in other languages like I said there are projects",
    "start": "1156880",
    "end": "1163880"
  },
  {
    "text": "for uh doing data frames in Python that are written in Rust entirely there are",
    "start": "1163880",
    "end": "1169039"
  },
  {
    "text": "projects for doing database clients written in Rust deployed to",
    "start": "1169039",
    "end": "1174280"
  },
  {
    "text": "JavaScript really great at that error messages that are worth the time to read editor support and",
    "start": "1174280",
    "end": "1181720"
  },
  {
    "text": "then this to me is one of the most important things the people who work on the rust",
    "start": "1181720",
    "end": "1188240"
  },
  {
    "text": "compiler right this is a quote from one of them Diagnostics should always be clear on what the problem is and when",
    "start": "1188240",
    "end": "1194520"
  },
  {
    "text": "they don't that's a bug so what that means is if you are using rust and you",
    "start": "1194520",
    "end": "1199919"
  },
  {
    "text": "get an error message in your program that you feel does not adequately represent what's actually happening you",
    "start": "1199919",
    "end": "1206679"
  },
  {
    "text": "can file an issue on the rust compiler project and then we'll go wow that's awful we should fix",
    "start": "1206679",
    "end": "1214159"
  },
  {
    "text": "that it's really nice um and this results in a lot of error messages getting cleaned up over time and means",
    "start": "1214159",
    "end": "1221520"
  },
  {
    "text": "that when you see an error message in Rust it is worth reading it's worth spending a little bit of time and",
    "start": "1221520",
    "end": "1227880"
  },
  {
    "text": "actually looking at which unfortunately is not something I can say for undefined is not a",
    "start": "1227880",
    "end": "1235679"
  },
  {
    "text": "function so we're talking about rust and JavaScript right I've been talking a lot about rust so far um and other people",
    "start": "1236720",
    "end": "1242440"
  },
  {
    "text": "that are using rust how can you use rust and",
    "start": "1242440",
    "end": "1248840"
  },
  {
    "text": "JavaScript so option one you write rust you embed it in a JavaScript",
    "start": "1252039",
    "end": "1257080"
  },
  {
    "text": "package people use use your package via JavaScript they import it use it as",
    "start": "1257080",
    "end": "1263240"
  },
  {
    "text": "normal everything's great you publish a rust binary to mpm you decide hey maybe",
    "start": "1263240",
    "end": "1269200"
  },
  {
    "text": "our CLI needs something from rust that is really important you publish that",
    "start": "1269200",
    "end": "1275799"
  },
  {
    "text": "rust binary to mpm you can do that it works third you can compile rust to wasm",
    "start": "1275799",
    "end": "1282960"
  },
  {
    "text": "and this is going to be more on the front end side it works in node it works in the browser but it's more on the",
    "start": "1282960",
    "end": "1289279"
  },
  {
    "text": "front end side in my opinion um you can also compile rust to wasm to run and serverless environments if that's where",
    "start": "1289279",
    "end": "1296039"
  },
  {
    "text": "you're deploying things if you're deploying things on Doo deploy or some Edge Network or something like that Russ",
    "start": "1296039",
    "end": "1301559"
  },
  {
    "text": "can help you there as well so why is it easy to embed rust why",
    "start": "1301559",
    "end": "1308159"
  },
  {
    "text": "should you embed rust rust has no garbage collector it is not going to randomly stop your application um this",
    "start": "1308159",
    "end": "1315520"
  },
  {
    "text": "is related to the ownership and borrowing features it is basic basically takes the garbage compiler and it moves",
    "start": "1315520",
    "end": "1321000"
  },
  {
    "text": "it to compile time like we were talking earlier these kind of like zero cost abstractions you can control when things",
    "start": "1321000",
    "end": "1328760"
  },
  {
    "text": "get allocated when you open that file and when you close that file how long it's in memory all of that is known at",
    "start": "1328760",
    "end": "1336679"
  },
  {
    "text": "compile time so the rust compiler can then optimize that at compile time and then",
    "start": "1336679",
    "end": "1342640"
  },
  {
    "text": "your binary runs really fast napi RS is the crate that you would",
    "start": "1342640",
    "end": "1349080"
  },
  {
    "text": "look at if you were going to embed rust inside of a JavaScript package and let other people use it we're going to look",
    "start": "1349080",
    "end": "1354480"
  },
  {
    "text": "at it in a second so I'm not going to talk too much about it yet you can do this with a number of",
    "start": "1354480",
    "end": "1360279"
  },
  {
    "text": "different languages python Ruby Elixir JavaScript whatever you happen to be using it's probably already",
    "start": "1360279",
    "end": "1366159"
  },
  {
    "text": "there downsides of this approach you have to compile for certain",
    "start": "1366159",
    "end": "1372039"
  },
  {
    "text": "architectures you have to compile for certain platforms if you want to run on an M1 MacBook like the one that I have",
    "start": "1372039",
    "end": "1378559"
  },
  {
    "text": "have here you have to compile for it if you want to run on Windows you have to compile for it and so on and so forth so",
    "start": "1378559",
    "end": "1385320"
  },
  {
    "text": "you end up with effectively n plus1 packages you end up with a series of packages that contain this extra native",
    "start": "1385320",
    "end": "1392559"
  },
  {
    "text": "code and one package that is the one that everybody's going to install uh you can do zero copy",
    "start": "1392559",
    "end": "1399600"
  },
  {
    "text": "communication between rust and JavaScript if performance is really important to you for some reason and you",
    "start": "1399600",
    "end": "1404840"
  },
  {
    "text": "will know if it is because if it isn't then you don't know what I just said",
    "start": "1404840",
    "end": "1410440"
  },
  {
    "text": "um but you can use buffers and typed arrays and stuff and you can just stick some memory over here uh and when V8",
    "start": "1411400",
    "end": "1417440"
  },
  {
    "text": "drops it V8 will drop it and everything will be fine um and then the other features of the language that you",
    "start": "1417440",
    "end": "1423240"
  },
  {
    "text": "probably used to in JavaScript like async are all supported by this kind of library right so this is na API I know",
    "start": "1423240",
    "end": "1431960"
  },
  {
    "text": "you don't care about Fibonacci nobody cares about Fibonacci this is basically taking the",
    "start": "1431960",
    "end": "1438480"
  },
  {
    "text": "API Library we're doing what is called a macro on top macros are literally just",
    "start": "1438480",
    "end": "1444200"
  },
  {
    "text": "code generation so there's some boring binding code that you have to write",
    "start": "1444200",
    "end": "1450799"
  },
  {
    "text": "that's it uh the napi thing is doing that for you so on the top we have the",
    "start": "1450799",
    "end": "1455960"
  },
  {
    "text": "rust on the bottom we have how you would use it in JavaScript you get to just import it call the function it'll call",
    "start": "1455960",
    "end": "1463200"
  },
  {
    "text": "out to the native code you're probably doing something more interesting than Fibonacci and then it'll",
    "start": "1463200",
    "end": "1470360"
  },
  {
    "text": "this is that n plus1 package kind of uh explosion if you will um it doesn't get",
    "start": "1473320",
    "end": "1479000"
  },
  {
    "text": "that big it is a maintainer issue it is not a runtime issue your users will not know this your users will not",
    "start": "1479000",
    "end": "1486279"
  },
  {
    "text": "care what ends up happening is you end up with your core package that depends on these optional packages and these",
    "start": "1486279",
    "end": "1493480"
  },
  {
    "text": "optional packages all have CPU and architecture defined in them so when you build the native code code it goes into",
    "start": "1493480",
    "end": "1500000"
  },
  {
    "text": "these extra packages when somebody installs it the optional dependencies",
    "start": "1500000",
    "end": "1505039"
  },
  {
    "text": "will get pulled in based on which architecture they're on again maintenance",
    "start": "1505039",
    "end": "1510399"
  },
  {
    "text": "burden users don't have to",
    "start": "1510399",
    "end": "1514240"
  },
  {
    "text": "care two you can publish rest binaries to npm this sounds really simple you've",
    "start": "1516159",
    "end": "1521240"
  },
  {
    "text": "published binaries before probably if you haven't um in package Json there's a bin field bin pack",
    "start": "1521240",
    "end": "1528840"
  },
  {
    "text": "you're done uh so it sounds simple right except we run into that architecture",
    "start": "1528840",
    "end": "1534200"
  },
  {
    "text": "stuff again so it's not as simple as you would want it to be it's not impossible",
    "start": "1534200",
    "end": "1539600"
  },
  {
    "text": "it is by no means extremely hard um but you have to either manage that binary",
    "start": "1539600",
    "end": "1546080"
  },
  {
    "text": "download yourself or you have to do what we just looked at with napi and build all these extra",
    "start": "1546080",
    "end": "1552840"
  },
  {
    "text": "packages so there is something to be said for the extra maintenance cost there are libraries that are written to",
    "start": "1552840",
    "end": "1558880"
  },
  {
    "text": "help you handle this binary download one of them is binary install listed on the screen right",
    "start": "1558880",
    "end": "1564360"
  },
  {
    "text": "now but yeah you will have a little bit higher of a maintenance burden because you have to create these extra Little",
    "start": "1564360",
    "end": "1570320"
  },
  {
    "text": "Steps but you do get to just you know publish your rust binary to mpm and",
    "start": "1570320",
    "end": "1575720"
  },
  {
    "text": "people can just download it install it use it third and",
    "start": "1575720",
    "end": "1580919"
  },
  {
    "text": "probably one of the more relevant uh approaches you can compile R you can",
    "start": "1580919",
    "end": "1586880"
  },
  {
    "text": "compile rusta Wasa I need a drink um the browser and node both",
    "start": "1586880",
    "end": "1593720"
  },
  {
    "text": "support wasm you can compile to a wasm file it's a binary format we don't care about what the binary format is because",
    "start": "1593720",
    "end": "1599919"
  },
  {
    "text": "we'll never really be looking at it you compile to a wasm file this is how you do it cargo build Target wasm",
    "start": "1599919",
    "end": "1608799"
  },
  {
    "text": "you get a wasm file out instead of a regular binary congratulations you are all wasum",
    "start": "1608799",
    "end": "1614159"
  },
  {
    "text": "developers now there are a bunch of tools to help uh do different things in the wasm",
    "start": "1614159",
    "end": "1620200"
  },
  {
    "text": "environment there's wasm bind gen this is a tool to bind to existing apis to",
    "start": "1620200",
    "end": "1626200"
  },
  {
    "text": "help you bind your rust code to your JavaScript code um wasm opt is a tool to",
    "start": "1626200",
    "end": "1631880"
  },
  {
    "text": "make things smaller at some point we all care about download size we don't want our wasm to be 3 megabytes or something",
    "start": "1631880",
    "end": "1639919"
  },
  {
    "text": "wasm opt will bring that way down um and as we'll see in a second uh the hello world that I have in this slide deck",
    "start": "1639919",
    "end": "1646720"
  },
  {
    "text": "comes down to 12 KOB um and we'll talk about why too so",
    "start": "1646720",
    "end": "1652399"
  },
  {
    "text": "there's trunk trunk is a higher level tool we can skip that but I wanted to mention it web CIS is a collection of",
    "start": "1652399",
    "end": "1659039"
  },
  {
    "text": "wasm B genen apis for all of the browser apis that's it all the browser apis use",
    "start": "1659039",
    "end": "1665640"
  },
  {
    "text": "via JavaScript you have all the bindings already that's what that is uh and something we're not talking",
    "start": "1665640",
    "end": "1671919"
  },
  {
    "text": "about today but I wanted to mention because it kind of drives home how powerful and how capable rust is when it",
    "start": "1671919",
    "end": "1677159"
  },
  {
    "text": "comes to wasm there are full stack uh like signal based like solid JS kind of thing um",
    "start": "1677159",
    "end": "1683919"
  },
  {
    "text": "Frameworks in Rust that you can fully compile the wasum and then Deploy on something like doo deploy or an edge",
    "start": "1683919",
    "end": "1690000"
  },
  {
    "text": "Network so rust is really good at building wasum if you are going to build",
    "start": "1690000",
    "end": "1695960"
  },
  {
    "text": "something in wasum and you need to do a lot of computation you need to do GPU stuff you need to do something like that",
    "start": "1695960",
    "end": "1701039"
  },
  {
    "text": "rust is a really good choice this is what wasm bindings look",
    "start": "1701039",
    "end": "1706399"
  },
  {
    "text": "like at the top there we are binding to alert",
    "start": "1706399",
    "end": "1713240"
  },
  {
    "text": "you would not really do this because webs already does this for you um but to drive home the example and then we have",
    "start": "1713240",
    "end": "1720000"
  },
  {
    "text": "a function called greet it accepts the name it uses the alert that we just bound to in the browser passes it a",
    "start": "1720000",
    "end": "1726720"
  },
  {
    "text": "string formats it and that's how you use it in JavaScript you import it and you",
    "start": "1726720",
    "end": "1732120"
  },
  {
    "text": "call greet uh so the people who are using this stuff can act like you don't",
    "start": "1732120",
    "end": "1738360"
  },
  {
    "text": "exist if you are writing your stuff in Rust it doesn't matter to them it doesn't have an",
    "start": "1738360",
    "end": "1744200"
  },
  {
    "text": "impact other than you know the fact that you wrote it in rest um this is what it looks like you",
    "start": "1744200",
    "end": "1750760"
  },
  {
    "text": "get this um so you do the cargo build wasm 32 you get a wasm file that wasm",
    "start": "1750760",
    "end": "1756720"
  },
  {
    "text": "file you probably send through wasm b genen in this case I'm sending it to a folder called out I'm targeting the web",
    "start": "1756720",
    "end": "1762279"
  },
  {
    "text": "you can also Target node or other platforms you get these files in this case this is the default",
    "start": "1762279",
    "end": "1768840"
  },
  {
    "text": "this is what you get if you literally just copied the code I just showed you thre it into a completely unconfigured",
    "start": "1768840",
    "end": "1774320"
  },
  {
    "text": "cargo project and built it and you get typescript types you get a Javascript",
    "start": "1774320",
    "end": "1780519"
  },
  {
    "text": "file because the browser needs a Javascript file to download the wasm and you get the WM",
    "start": "1780519",
    "end": "1787200"
  },
  {
    "text": "file again you can get this down to 12 kilobytes um about 10 kiloby of this is",
    "start": "1788960",
    "end": "1795399"
  },
  {
    "text": "the allocator which is a word that probably doesn't mean anything to you um",
    "start": "1795399",
    "end": "1800559"
  },
  {
    "text": "that's totally okay you're probably going to want it at some point but if you were trying to get",
    "start": "1800559",
    "end": "1808279"
  },
  {
    "text": "really small I wanted to point out you can cut another 10 kilobytes off this easily um and there are tools to tell",
    "start": "1808279",
    "end": "1816600"
  },
  {
    "text": "you what's in your wasm bundle have you has anybody used webpack analyzer or",
    "start": "1816600",
    "end": "1822039"
  },
  {
    "text": "anything like that the stats stuff from any of these bundlers this is effectively that it",
    "start": "1822039",
    "end": "1827720"
  },
  {
    "text": "will tell you all the functions you're using where you're using them how much you can save if you remove them in this case if you look at this anything that",
    "start": "1827720",
    "end": "1834880"
  },
  {
    "text": "says dlm aloc is the allocator uh anything that says formatter is that",
    "start": "1834880",
    "end": "1840760"
  },
  {
    "text": "format that we had and if you remove both of those things you are building what's called a no standard rust Library",
    "start": "1840760",
    "end": "1848080"
  },
  {
    "text": "you can get rid of the entire rust standard library and you don't have to use it if it doesn't apply for your uh",
    "start": "1848080",
    "end": "1855039"
  },
  {
    "text": "application or what you're trying to do you can make these things very small you can do no allocation rust programs uh",
    "start": "1855039",
    "end": "1861919"
  },
  {
    "text": "and this becomes very similar to how you would write rust for an embedded microcontroller so there are people out",
    "start": "1861919",
    "end": "1868159"
  },
  {
    "text": "there working on making all of that really easy and you just get the",
    "start": "1868159",
    "end": "1874200"
  },
  {
    "text": "benefit so we're going to start covering an intro to rust how many of you have actually written rust before at all even",
    "start": "1874480",
    "end": "1881320"
  },
  {
    "text": "hello world okay not too many so this will be",
    "start": "1881320",
    "end": "1886919"
  },
  {
    "text": "something we spend some time on on the left you have rust on the right",
    "start": "1886919",
    "end": "1893320"
  },
  {
    "text": "you have JavaScript if you want to manage your rust version it's going to be with rust",
    "start": "1893320",
    "end": "1899120"
  },
  {
    "text": "up uh JavaScript NVM Bolta N fmm I don't know when you probably wrote your",
    "start": "1899120",
    "end": "1906600"
  },
  {
    "text": "own um but the thing that I really want to send home with this slide is basically on the left hand side um",
    "start": "1907480",
    "end": "1914399"
  },
  {
    "text": "everything is Cargo it's cargo test cargo build cargo doc Etc on the right hand",
    "start": "1914399",
    "end": "1921039"
  },
  {
    "text": "side pick whatever you want you can extend cargo you can cargo",
    "start": "1921039",
    "end": "1927840"
  },
  {
    "text": "install cargo watch for example and that gives you a watch command with cargo",
    "start": "1927840",
    "end": "1933000"
  },
  {
    "text": "means that you can do cargo watch build and every time you change a file it will keep building",
    "start": "1933000",
    "end": "1939720"
  },
  {
    "text": "um you can do this for a number of different things cargo Lambda for building rust AWS Lambda functions flame",
    "start": "1939720",
    "end": "1946200"
  },
  {
    "text": "graph for you know Prof filing your rust builds not your builds sorry your your",
    "start": "1946200",
    "end": "1951440"
  },
  {
    "text": "run times U ESP flash for flashing to an esp32 microcontroller uh cargo disc and",
    "start": "1951440",
    "end": "1957720"
  },
  {
    "text": "release for releasing not just to crates.io the package registry but also to Homebrew and GitHub releases and",
    "start": "1957720",
    "end": "1965120"
  },
  {
    "text": "whatever you want to do on Windows cargo insta snapshots if you use just you like",
    "start": "1965120",
    "end": "1970200"
  },
  {
    "text": "snapshotting cargo insta and then there's a whole bunch of",
    "start": "1970200",
    "end": "1975320"
  },
  {
    "text": "those so let's get a little bit into the language now um the rest of the",
    "start": "1975320",
    "end": "1981480"
  },
  {
    "text": "presentation is an intro to rust if you want to download the slides the slides are on they should be on the",
    "start": "1981480",
    "end": "1986960"
  },
  {
    "text": "website if they're not just ping me on social media and I'll send them to you this is Hello World um on the right hand",
    "start": "1986960",
    "end": "1994080"
  },
  {
    "text": "side we have node this is exactly what the rust code is doing all of you have seen a function",
    "start": "1994080",
    "end": "2000240"
  },
  {
    "text": "definition before I'm sure that shortening that to FN is not too hard for",
    "start": "2000240",
    "end": "2005480"
  },
  {
    "text": "you print line is a macro macros generate code for us uh in this case the",
    "start": "2005480",
    "end": "2011000"
  },
  {
    "text": "print line macro is basically console log for us at the top who's heard of a shebang",
    "start": "2011000",
    "end": "2017159"
  },
  {
    "text": "SL used one before okay so we're mostly good here basically on the right hand side uh we",
    "start": "2017159",
    "end": "2023399"
  },
  {
    "text": "can do slash this Javascript file and it'll run using node on the left hand side um we're using cargo script which",
    "start": "2023399",
    "end": "2030320"
  },
  {
    "text": "is a new feature which is why I'm using nightly um has anybody used node nightly",
    "start": "2030320",
    "end": "2036440"
  },
  {
    "text": "or any nightly distribution of the node one person two people way back there maybe um",
    "start": "2036440",
    "end": "2044159"
  },
  {
    "text": "yeah nobody does that uh it's really easy to do in cargo",
    "start": "2044159",
    "end": "2049800"
  },
  {
    "text": "you do plus nightly and then you can use the nightly stuff you can just test something out",
    "start": "2049800",
    "end": "2055200"
  },
  {
    "text": "it's fine um so if we do that slash on this rust is a compiled language it",
    "start": "2055200",
    "end": "2060760"
  },
  {
    "text": "needs to compile to something in this case we're compiling to a binary that runs on my M1 it gives you the name of",
    "start": "2060760",
    "end": "2066878"
  },
  {
    "text": "the program that you're compiling piling the version where it's located um the profile you built with if you write rust",
    "start": "2066879",
    "end": "2075240"
  },
  {
    "text": "in the future don't forget the release flat if you run rust you feel like it's",
    "start": "2075240",
    "end": "2080358"
  },
  {
    "text": "slow 50% of the time somebody has forgotten to use the release flag um",
    "start": "2080359",
    "end": "2086398"
  },
  {
    "text": "this is Dev mode unoptimized has a whole bunch of extra stuff uh for as you might imagine",
    "start": "2086399",
    "end": "2094599"
  },
  {
    "text": "developing variables um I would compare this to constant let but I really don't want to start that",
    "start": "2094599",
    "end": "2101280"
  },
  {
    "text": "discussion so we've got let for immutable and let mute for mutable we've got two variables here X and Y we're",
    "start": "2101280",
    "end": "2107680"
  },
  {
    "text": "both setting both of them to five uh Y is mutable so we can change it X is not so we can't that's why it's commented",
    "start": "2107680",
    "end": "2114720"
  },
  {
    "text": "Out Below debug is another macro it's really useful it gives you if you look",
    "start": "2114720",
    "end": "2119920"
  },
  {
    "text": "on the right hand side the name of the file the location in the file that the debug came from the expression that you",
    "start": "2119920",
    "end": "2125720"
  },
  {
    "text": "passed to debug and the value of the expression it's really",
    "start": "2125720",
    "end": "2131079"
  },
  {
    "text": "nice so as you might expect 55 51 because we only changed y if we do try",
    "start": "2131079",
    "end": "2136839"
  },
  {
    "text": "to change X this is the error messaging I was talking about worth reading right uh this error message has",
    "start": "2136839",
    "end": "2144599"
  },
  {
    "text": "a code at the beginning if you want to go to the web you can actually look that up find more examples in this case",
    "start": "2144599",
    "end": "2149920"
  },
  {
    "text": "cannot assign twice to a mutable variable X it has the line where we did our first",
    "start": "2149920",
    "end": "2156440"
  },
  {
    "text": "assignment the line where we're trying to do our second assignment and none of the other lines that we don't care",
    "start": "2156440",
    "end": "2162880"
  },
  {
    "text": "about and then it points to it it says we can't assign twice this is our second assignment we're trying to do it again",
    "start": "2162880",
    "end": "2168960"
  },
  {
    "text": "in the help text if yall can read that hopefully we've got our first assignment",
    "start": "2168960",
    "end": "2174839"
  },
  {
    "text": "to X and then some help it says hey maybe you forgot to put mute",
    "start": "2174839",
    "end": "2180480"
  },
  {
    "text": "here that would fix our problem if that's what we wanted if we didn't want to mutate that we could find a different",
    "start": "2180480",
    "end": "2186599"
  },
  {
    "text": "solution rust compiler messages uh very useful",
    "start": "2186599",
    "end": "2191680"
  },
  {
    "text": "very readable encourage you to read them when they come up",
    "start": "2191680",
    "end": "2198240"
  },
  {
    "text": "strs typed objects is what you want to think of these as right you write typescript a lot of you do um these are",
    "start": "2198240",
    "end": "2206040"
  },
  {
    "text": "typed objects the derived a bug on top is used",
    "start": "2206040",
    "end": "2212079"
  },
  {
    "text": "for the debug macro macros are almost always used to generate some boring code",
    "start": "2212079",
    "end": "2217640"
  },
  {
    "text": "that we don't want to write you could Implement a bug for this struct if you wanted to but it's boring it's you're just",
    "start": "2217640",
    "end": "2223760"
  },
  {
    "text": "going to print out name and height and everybody knows that the r compiler knows that we can just derive it so we",
    "start": "2223760",
    "end": "2230760"
  },
  {
    "text": "construct it in the same way that you would construct any other object person name height to bug it",
    "start": "2230760",
    "end": "2238040"
  },
  {
    "text": "out this is what we get from the JavaScript just an object I'll go back for a second so you",
    "start": "2238200",
    "end": "2244400"
  },
  {
    "text": "can see the JavaScript code here it's just an object and then we logging in it rust gives us more output why because",
    "start": "2244400",
    "end": "2252560"
  },
  {
    "text": "we aren't doing that much well we aren't using a bunch of stuff and rust knows that dead code elimination is something",
    "start": "2252560",
    "end": "2259040"
  },
  {
    "text": "you just get with rust you do not have to worry about it it is there if you don't use something rust will know about",
    "start": "2259040",
    "end": "2265079"
  },
  {
    "text": "it it will tell you about it and you can choose whether you want to use it or ignore it in this case right at the bottom",
    "start": "2265079",
    "end": "2272119"
  },
  {
    "text": "we've got our person tobg out uh but it's telling us basically we haven't used name and we haven't used",
    "start": "2272119",
    "end": "2279440"
  },
  {
    "text": "enums I briefly spoke about enums this is roughly what it would be like in JavaScript um symbols I know aren't",
    "start": "2279680",
    "end": "2286640"
  },
  {
    "text": "terribly used in the industry like they're just not around very much um but",
    "start": "2286640",
    "end": "2291760"
  },
  {
    "text": "basically an object with some string and then fruit. Apple right on the rust hand",
    "start": "2291760",
    "end": "2297040"
  },
  {
    "text": "side we've got an enum it's got apples pears bananas whatever we can",
    "start": "2297040",
    "end": "2302359"
  },
  {
    "text": "instantiate it debug it out it's one of one of many variants is",
    "start": "2302359",
    "end": "2308079"
  },
  {
    "text": "the the phrasing so we run the JavaScript side we get a symbol out because we are",
    "start": "2308079",
    "end": "2314160"
  },
  {
    "text": "printing out the symbol again we were on the r side it tells us that we didn't use a bunch of stuff specifically we",
    "start": "2314160",
    "end": "2319920"
  },
  {
    "text": "didn't use pear and we didn't use banana we used Apple and it knows that so the r",
    "start": "2319920",
    "end": "2326599"
  },
  {
    "text": "compiler uh is really good at knowing when you use something or not um telling",
    "start": "2326599",
    "end": "2332240"
  },
  {
    "text": "you and also removing it from your final stuff let's say somebody gave us one of",
    "start": "2332240",
    "end": "2338720"
  },
  {
    "text": "these enums just handed it to us got it from user code got it from a database whatever we don't know what apple is",
    "start": "2338720",
    "end": "2344319"
  },
  {
    "text": "right now we just have a variable um I'm using match syntax match syntax will let me match on this",
    "start": "2344319",
    "end": "2351160"
  },
  {
    "text": "variable and the little box here is rust analyzer rust",
    "start": "2351160",
    "end": "2356440"
  },
  {
    "text": "analyzer will let me fill the match arms and automatically write that code for me",
    "start": "2356440",
    "end": "2361800"
  },
  {
    "text": "now I have all of the variants that could possibly be there already written I don't have to worry about typing them all out",
    "start": "2361800",
    "end": "2368160"
  },
  {
    "text": "we match on the variable when it's Apple we do something when it's pear we do something when it's banana we do",
    "start": "2368160",
    "end": "2373680"
  },
  {
    "text": "something other interesting thing the to-do macro if you have a spot in your rust",
    "start": "2373680",
    "end": "2380079"
  },
  {
    "text": "application and you are not ready to finish it yet you can write",
    "start": "2380079",
    "end": "2385440"
  },
  {
    "text": "to-do and uh it may be interesting to know that that will also shortcircuit the type inference so if you have an",
    "start": "2385440",
    "end": "2393040"
  },
  {
    "text": "extra branch and you need to return something from that branch and you type to do",
    "start": "2393040",
    "end": "2398359"
  },
  {
    "text": "the rest compiler will just be like yeah I mean he's going to write that code or they're going to write that code or she's going to write that code they're",
    "start": "2398359",
    "end": "2403880"
  },
  {
    "text": "going to write it later that's it um it's really",
    "start": "2403880",
    "end": "2409359"
  },
  {
    "text": "nice if we write drop that back in a script file so we can run the whole thing right at the bottom not yet",
    "start": "2409359",
    "end": "2416280"
  },
  {
    "text": "implemented that's the to- do macro if we get an apple and we haven't written the code for the Apple yet our program",
    "start": "2416280",
    "end": "2422839"
  },
  {
    "text": "will crash and it'll go hey you said you were going to write this and you didn't",
    "start": "2422839",
    "end": "2429160"
  },
  {
    "text": "you can include messages in the to-do macros not let not yet implemented",
    "start": "2429800",
    "end": "2436359"
  },
  {
    "text": "apples or for later give a little bit more context enom can hold data this is",
    "start": "2436359",
    "end": "2444240"
  },
  {
    "text": "really why I introduced Str and then why I introduced enums because who's used",
    "start": "2444240",
    "end": "2450280"
  },
  {
    "text": "Redux or something like it okay all those actions all those objects that",
    "start": "2450280",
    "end": "2455400"
  },
  {
    "text": "have like type whatever and then like some data and then that switch that you have to do",
    "start": "2455400",
    "end": "2460680"
  },
  {
    "text": "this cleans all that up if you've got an action let's say add to do you can just write it like a",
    "start": "2460680",
    "end": "2466839"
  },
  {
    "text": "struct inside of the enum it's one of the variants you can construct it later remove to do takes an ID complete to do",
    "start": "2466839",
    "end": "2472319"
  },
  {
    "text": "takes an ID we can construct an add Todo let's say I don't know some User submitted a",
    "start": "2472319",
    "end": "2478599"
  },
  {
    "text": "form it's got an ID it's got some text we can match on which action is coming",
    "start": "2478599",
    "end": "2484359"
  },
  {
    "text": "in and if you've used JavaScript before you've prob use destructuring that's what we're doing here we're",
    "start": "2484359",
    "end": "2489920"
  },
  {
    "text": "destructuring the fields out of these uh variants so ID and text and add too and",
    "start": "2489920",
    "end": "2495760"
  },
  {
    "text": "then ID in the other",
    "start": "2495760",
    "end": "2500240"
  },
  {
    "text": "two all",
    "start": "2501720",
    "end": "2504880"
  },
  {
    "text": "right if you run this it will again tell you you didn't use ID you destructured",
    "start": "2507720",
    "end": "2513000"
  },
  {
    "text": "it out of this thing you didn't use it uh we can use underscores to silence those messages if we in intentionally aren't using something you don't have to",
    "start": "2513000",
    "end": "2519319"
  },
  {
    "text": "just like I've shown you this warning a couple times I don't want you to think that it's just going to fill up your console every time if you don't intend",
    "start": "2519319",
    "end": "2525040"
  },
  {
    "text": "to use something you throw an underscore on it that warning goes",
    "start": "2525040",
    "end": "2529800"
  },
  {
    "text": "away options built-in enum there's a lot of built-in enums option is one of them bottom right",
    "start": "2532680",
    "end": "2540599"
  },
  {
    "text": "you can see the definition for an enum it uses a generic uh don't worry about the generic it's either none or it's",
    "start": "2540599",
    "end": "2546520"
  },
  {
    "text": "some and it contains a value those are the two options so if we have maybe something",
    "start": "2546520",
    "end": "2552559"
  },
  {
    "text": "and we have some number say 200 we can then do the exact same thing we just did match on that variable destructure those",
    "start": "2552559",
    "end": "2559839"
  },
  {
    "text": "things out and in this case we're just returning number uh if it's a number and",
    "start": "2559839",
    "end": "2565960"
  },
  {
    "text": "if it's not if it's none it's zero so our number uh because rust is an",
    "start": "2565960",
    "end": "2572319"
  },
  {
    "text": "expression based language and these values at the edges of these branches return through that match",
    "start": "2572319",
    "end": "2579040"
  },
  {
    "text": "expression our number becomes that number and then we debug it out so you can see the output of that it's 200 in",
    "start": "2579040",
    "end": "2585000"
  },
  {
    "text": "both cases um that's kind of wordy though uh and we have other functions for that you can unwrap or zero right um",
    "start": "2585000",
    "end": "2594440"
  },
  {
    "text": "if you have defaults do it like this iterators you've got a for Loop and",
    "start": "2594440",
    "end": "2600720"
  },
  {
    "text": "we've got something that I'll call just an iterator um the for Loop uses a range 0 do do10 you may have seen these before",
    "start": "2600720",
    "end": "2607119"
  },
  {
    "text": "or you may have not I don't know what programming languages you've used uh in the other case we've got",
    "start": "2607119",
    "end": "2612760"
  },
  {
    "text": "characters A to Z in the first one we just iterate over it we debug out you can see the output",
    "start": "2612760",
    "end": "2618960"
  },
  {
    "text": "on the right it's as you would expect the alphabet collects into a",
    "start": "2618960",
    "end": "2625079"
  },
  {
    "text": "string collect is a super powerful function I'm not going to dive into it too much but it's taking that type that",
    "start": "2625079",
    "end": "2630480"
  },
  {
    "text": "we want it's saying can I turn the items of this iterator into that type and then it's doing it if it can if it can't it",
    "start": "2630480",
    "end": "2637960"
  },
  {
    "text": "will give you a compile error message so how does that work though",
    "start": "2637960",
    "end": "2645400"
  },
  {
    "text": "right like I said things are an iterator these things are iterators what that",
    "start": "2645400",
    "end": "2650720"
  },
  {
    "text": "means is they implement the iterator trait traits are interfaces if you've never heard the word trait before just treat them as",
    "start": "2650720",
    "end": "2656680"
  },
  {
    "text": "interfaces you have to Define an item that you're iterating over an item type A u32 a character whatever it is and you",
    "start": "2656680",
    "end": "2665319"
  },
  {
    "text": "have to define the next function that's really important everything else can be derived from that NE next",
    "start": "2665319",
    "end": "2672079"
  },
  {
    "text": "function and guess what we had ranges before we had ranges of numbers and we had ranges of characters and there's an",
    "start": "2672079",
    "end": "2678359"
  },
  {
    "text": "implementation of iterator for anything that you can put in a range and you can see uh a little bit",
    "start": "2678359",
    "end": "2684040"
  },
  {
    "text": "below where I have highlighted it's got a next function and what does that mean in practice it means that for Loop and",
    "start": "2684040",
    "end": "2691200"
  },
  {
    "text": "this collect are just syntactic sugar for calling next over and over and over again until you return none",
    "start": "2691200",
    "end": "2698559"
  },
  {
    "text": "that's all it is there's no there's no magic going on here uh traits our",
    "start": "2698559",
    "end": "2705200"
  },
  {
    "text": "interfaces and uh yeah let's Zoom through the last couple slides here",
    "start": "2705200",
    "end": "2710520"
  },
  {
    "text": "because I got my f minute warning um add function takes a uze uze are",
    "start": "2710520",
    "end": "2716520"
  },
  {
    "text": "architecture sized uh unsigned integers so any any positive integer",
    "start": "2716520",
    "end": "2722480"
  },
  {
    "text": "um config test this code even though it's written in the same file as your reg code will not compile into your",
    "start": "2722480",
    "end": "2728520"
  },
  {
    "text": "final binary it will only run when you cargo test in this case test are regular",
    "start": "2728520",
    "end": "2734160"
  },
  {
    "text": "functions you write the test ATT tribute macro if it panics it fails if it doesn't panic it doesn't fail you get",
    "start": "2734160",
    "end": "2740400"
  },
  {
    "text": "all the asserts that you're normally uh used to this is what it looks",
    "start": "2740400",
    "end": "2746079"
  },
  {
    "text": "like you get a SN of weight I'm not going to dive too much into this because I am running out of time but the key",
    "start": "2746079",
    "end": "2753280"
  },
  {
    "text": "thing here is uh promises futures basically the same thing for for",
    "start": "2753280",
    "end": "2760040"
  },
  {
    "text": "now uh a weight also on the tail end not in the front this means you can just keep chaining stuff together which is",
    "start": "2760040",
    "end": "2765839"
  },
  {
    "text": "actually really nice rust analyzer there's a Tokyo main if I go back one",
    "start": "2765839",
    "end": "2771200"
  },
  {
    "text": "right here that comes from a third party crate that is a macro that generates some code rust analyzer will let you",
    "start": "2771200",
    "end": "2777000"
  },
  {
    "text": "expand that macro take a look at what it's doing this is what it's doing it's regular rust code it is not magic it's",
    "start": "2777000",
    "end": "2783880"
  },
  {
    "text": "just generating some code that is otherwise kind of tiresome to to right this is your one slide on",
    "start": "2783880",
    "end": "2790760"
  },
  {
    "text": "borrowing this is it you have a dog it's got a coat color uh you can share that",
    "start": "2790760",
    "end": "2796920"
  },
  {
    "text": "dog with somebody so they can pet it and then they give it back to you because it's your dog you can give it to",
    "start": "2796920",
    "end": "2804640"
  },
  {
    "text": "maybe a dog Barber I don't know what to call that actually um with what I'll say an",
    "start": "2804640",
    "end": "2811800"
  },
  {
    "text": "exclusive reference so the first one was a shared reference you're sharing it with somebody second one is a mutable or an exclusive reference you're giving it",
    "start": "2811800",
    "end": "2817720"
  },
  {
    "text": "to somebody then they can do whatever they want to it you can see these functions on the right hand side we can set the coat color to whatever we want",
    "start": "2817720",
    "end": "2823920"
  },
  {
    "text": "in this case orange Halloween soon y they give it back to us though it's a reference right we give it to them",
    "start": "2823920",
    "end": "2830119"
  },
  {
    "text": "temporarily we get it back we can also just give them the dog somebody wants to adopt the dog we tainted it orange so",
    "start": "2830119",
    "end": "2837280"
  },
  {
    "text": "that it would be more adoptable on Halloween somebody came in was like Hey I love that orange dog uh we gave it to",
    "start": "2837280",
    "end": "2844319"
  },
  {
    "text": "them they own it now we can no longer pet the dog we don't have access to the dog somebody else does and in this case",
    "start": "2844319",
    "end": "2851520"
  },
  {
    "text": "it's the function the function owns it yada yada um if we do try to pet the",
    "start": "2851520",
    "end": "2858240"
  },
  {
    "text": "dog this is the error message you get it's not going to be very intuitive",
    "start": "2858240",
    "end": "2863599"
  },
  {
    "text": "but basically when we gave the dog away we moved the dog into that function we can no longer access the value inside of",
    "start": "2863599",
    "end": "2870319"
  },
  {
    "text": "that variable that's all that is",
    "start": "2870319",
    "end": "2875839"
  },
  {
    "text": "so Farrow checking not super scary don't have to worry about",
    "start": "2875839",
    "end": "2882640"
  },
  {
    "text": "pointers it's just giving and taking references okay so last slide how is R",
    "start": "2882640",
    "end": "2889800"
  },
  {
    "text": "useful stand on little build tools embed in your mpm packages was them in the browser or node um you can do serverless",
    "start": "2889800",
    "end": "2895640"
  },
  {
    "text": "functions you can do things with industrial strength crates like wgpu CSS parser whatever and this is what I'm",
    "start": "2895640",
    "end": "2901359"
  },
  {
    "text": "going to leave you with what is rust a language empowering everyone to build reliable and efficient software and I",
    "start": "2901359",
    "end": "2907119"
  },
  {
    "text": "really believe in that empowerment message and this is on the rust playing website this is how rust is",
    "start": "2907119",
    "end": "2912720"
  },
  {
    "text": "marketed thank you",
    "start": "2912720",
    "end": "2916880"
  },
  {
    "text": "[Music]",
    "start": "2921800",
    "end": "2928099"
  }
]