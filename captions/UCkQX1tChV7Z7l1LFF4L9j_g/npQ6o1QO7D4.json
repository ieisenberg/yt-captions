[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "[Music]",
    "start": "3320",
    "end": "14289"
  },
  {
    "text": "welcome to our talk today um our talk is federated graphql to solve service sprawl at major league baseball um today",
    "start": "14960",
    "end": "22560"
  },
  {
    "text": "we're gonna go over um some high level some in depth on the last kind of eight",
    "start": "22560",
    "end": "28160"
  },
  {
    "text": "months to 12 months of us uh implementing a federated graphical architecture um within the web platform",
    "start": "28160",
    "end": "33920"
  },
  {
    "text": "team at major league baseball so just to kick us off talk about who we are what is web platform uh my name is matt",
    "start": "33920",
    "end": "40079"
  },
  {
    "start": "36000",
    "end": "36000"
  },
  {
    "text": "oliver i'm the senior senior engineering uh manager on the web platform team",
    "start": "40079",
    "end": "45120"
  },
  {
    "text": "i'm alessa medvedeva i'm a software engineer in the same team um so when we're talking about web",
    "start": "45120",
    "end": "51120"
  },
  {
    "text": "platform what is that um our team handles all the base architecture infrastructure and devops um for",
    "start": "51120",
    "end": "58640"
  },
  {
    "text": "mlb's web footprint um so mlb.commill.com",
    "start": "58640",
    "end": "63680"
  },
  {
    "text": "um usa baseball play ball there's a ton of different kind of uh touch points um",
    "start": "63680",
    "end": "69760"
  },
  {
    "text": "within all these different clients that we have in order to serve baseball experiences to um our fans",
    "start": "69760",
    "end": "75439"
  },
  {
    "text": "and we support multiple front end teams which is makes up about 30 plus developers",
    "start": "75439",
    "end": "80720"
  },
  {
    "text": "i mean really what we're tasked to do on top of kind of supporting all the stuff above is be more forward thinking within",
    "start": "80720",
    "end": "86640"
  },
  {
    "text": "your organization in terms of new web frameworks new web architecture paradigms um you know kind of leading",
    "start": "86640",
    "end": "92560"
  },
  {
    "text": "that um within uh our organization um so our our biggest responsibilities",
    "start": "92560",
    "end": "98640"
  },
  {
    "text": "include the server-side rendering architecture which we are moving from an old handlebars architecture to react and",
    "start": "98640",
    "end": "103759"
  },
  {
    "text": "next and so and supporting services that power uh more niche front-end stuff like personalization which is a big kind of",
    "start": "103759",
    "end": "111280"
  },
  {
    "text": "cornerstone of our graphql architecture um this is very challenging because to",
    "start": "111280",
    "end": "117840"
  },
  {
    "text": "render a the mlb.com that you see when you go to mlb.com takes many many many services um",
    "start": "117840",
    "end": "125200"
  },
  {
    "text": "and historically there's just been a lot of um logistics around how that data is pulled and how",
    "start": "125200",
    "end": "131039"
  },
  {
    "text": "we eventually render our page because of all the data that's involved and so just kind of kicking off the",
    "start": "131039",
    "end": "136319"
  },
  {
    "start": "135000",
    "end": "135000"
  },
  {
    "text": "problem here we have different clients and to the right you can see we have web um ios and android on top of a bunch of",
    "start": "136319",
    "end": "143440"
  },
  {
    "text": "other things like our connected devices that need data from many teams within",
    "start": "143440",
    "end": "148640"
  },
  {
    "text": "mlb that are maintained by different teams right different people and so coordinating all that has been a",
    "start": "148640",
    "end": "153920"
  },
  {
    "text": "challenge so going into the specifics um one of the reasons we started looking",
    "start": "153920",
    "end": "159599"
  },
  {
    "start": "155000",
    "end": "155000"
  },
  {
    "text": "into graphql is because we have low visibility into who is making calls on our platform",
    "start": "159599",
    "end": "165280"
  },
  {
    "text": "um we have a lot of like i said we have a lot of clients and um that are managed",
    "start": "165280",
    "end": "170480"
  },
  {
    "text": "by different teams and sometimes uh you know we have services from within our organization or external um uh clients",
    "start": "170480",
    "end": "177200"
  },
  {
    "text": "that are pulling data from us and it's and it's hard to really know who is pulling data from our platform which makes",
    "start": "177200",
    "end": "183519"
  },
  {
    "text": "model changes and potentially breaking change is really hard because it's hard to notify those clients or it's really just hard to logistically coordinate all",
    "start": "183519",
    "end": "190000"
  },
  {
    "text": "that stuff that's going on um there's a lot of evidence of redundant calls within our architecture",
    "start": "190000",
    "end": "195200"
  },
  {
    "text": "so um you know services calling services and duplicating those calls and there's a lot of waste um in terms of you know",
    "start": "195200",
    "end": "202000"
  },
  {
    "text": "how all these services are communicating unfortunately we're promoted ddosing ourselves because of that you know",
    "start": "202000",
    "end": "208319"
  },
  {
    "text": "there's an errant kind of code push that goes out and opposing whether it's our cms or some other are back in service",
    "start": "208319",
    "end": "214000"
  },
  {
    "text": "and it's really these self-inflicted wounds that are you know making us re-evaluate kind of",
    "start": "214000",
    "end": "219760"
  },
  {
    "text": "making this architecture a little bit more sane we've been burned by third-party integrations and so a big thing is to be",
    "start": "219760",
    "end": "226159"
  },
  {
    "text": "able to isolate our our backed house services or isolate our clients from our back of",
    "start": "226159",
    "end": "232000"
  },
  {
    "text": "house services so if we need to swap things out um whether it's you know a logistical one or economic one we could",
    "start": "232000",
    "end": "238319"
  },
  {
    "text": "easily do that without affecting our clients um and a lot of our services have different",
    "start": "238319",
    "end": "243760"
  },
  {
    "text": "caching structures these most of our teams manage their own caches um and you know",
    "start": "243760",
    "end": "249120"
  },
  {
    "text": "it becomes hard to figure out you know what's in cash where for how long and so you know trying to centralize everything",
    "start": "249120",
    "end": "254959"
  },
  {
    "text": "to make things a little bit more like i said same and easy to reason about",
    "start": "254959",
    "end": "260000"
  },
  {
    "text": "um also handling upstream failures um again each team throws different errors or handles",
    "start": "260000",
    "end": "266400"
  },
  {
    "text": "errors differently and reacting to those errors you know it is an issue so again trying to centralize things in order to",
    "start": "266400",
    "end": "272400"
  },
  {
    "text": "you know have a cohesive strategy around a lot of these things",
    "start": "272400",
    "end": "279120"
  },
  {
    "start": "278000",
    "end": "278000"
  },
  {
    "text": "so the most common request response pattern today is your typical restful service where the clients are doing the",
    "start": "279120",
    "end": "285600"
  },
  {
    "text": "fetching of data and stitching things together in this diagram we have our diverse set",
    "start": "285600",
    "end": "291040"
  },
  {
    "text": "of clients all making calls individually to one or more of our services if we are lucky we have a cdn and a cash",
    "start": "291040",
    "end": "298639"
  },
  {
    "text": "of some kind front in our services to give us some stability and a breathing room the burden of the clients is that",
    "start": "298639",
    "end": "305440"
  },
  {
    "text": "they're responsible for knowing where and how to stitch together desperate service responses in order to",
    "start": "305440",
    "end": "311120"
  },
  {
    "text": "successfully render their content so what what's wrong with this picture",
    "start": "311120",
    "end": "317120"
  },
  {
    "text": "we have some of the big issues surrounding the architecture other clients",
    "start": "317120",
    "end": "322639"
  },
  {
    "text": "can be very chatty there are sometimes making multiple calls to services in",
    "start": "322639",
    "end": "328720"
  },
  {
    "text": "in all or nothing fashion this ends up tying our front end implementation to the backend data model",
    "start": "328720",
    "end": "336240"
  },
  {
    "text": "which in turn requires multiple code changes when the models inevitably change",
    "start": "336240",
    "end": "341680"
  },
  {
    "text": "we also have issues around back and service exposure allowing external clients to directly heat back and",
    "start": "341680",
    "end": "348080"
  },
  {
    "text": "services which is both a security and scalability problem",
    "start": "348080",
    "end": "353840"
  },
  {
    "text": "so one way that teams look at simplifying this model is to create potentially",
    "start": "354240",
    "end": "360639"
  },
  {
    "text": "mashup services that are going to you know decrease that that churn",
    "start": "360639",
    "end": "365680"
  },
  {
    "text": "and give a more simplified api service to to our clients so they're not themselves calling all these district",
    "start": "365680",
    "end": "371919"
  },
  {
    "text": "services but you know we have a middle layer that is going to handle that for us so in this example here we have our",
    "start": "371919",
    "end": "377759"
  },
  {
    "text": "clients that are contacting these mashups the mashups could be lambdas they could be cloudflare workers they could be cloud functions they could be",
    "start": "377759",
    "end": "384800"
  },
  {
    "text": "your own proxy whatever that may be however we're going to run into",
    "start": "384800",
    "end": "390000"
  },
  {
    "text": "different and potentially more complex issues because of having this mash up here so again what's wrong with this",
    "start": "390000",
    "end": "395680"
  },
  {
    "text": "we've increased complexity we now have this middle layer um of potentially many many mashup services",
    "start": "395680",
    "end": "403199"
  },
  {
    "text": "which you know could be calling themselves they could be you know it's really hard to kind of",
    "start": "403199",
    "end": "409599"
  },
  {
    "text": "keep track of what all these mashups are doing like where they're calling and you know and then again then there's",
    "start": "409599",
    "end": "415520"
  },
  {
    "text": "maintenance of these mashups so who owns these mashups you know what teams are relying on them you have again a",
    "start": "415520",
    "end": "421039"
  },
  {
    "text": "discovery and maintenance issue um like i said you could have duplication of data across",
    "start": "421039",
    "end": "426800"
  },
  {
    "text": "these matchups so we're kind of back to square one where we're making all these redundant calls because these mashups become you know overly broad and now",
    "start": "426800",
    "end": "434240"
  },
  {
    "text": "other teams are pulling from them and you create this type coupling um and and there's no holistic view of",
    "start": "434240",
    "end": "440400"
  },
  {
    "text": "your api because you have again unless it's well documented you have kind of all these mashups that are living who",
    "start": "440400",
    "end": "446240"
  },
  {
    "text": "knows where or multiple places um and you know developers who are",
    "start": "446240",
    "end": "451680"
  },
  {
    "text": "implementing these clients you know might not have a good idea on where to get the information they need so they end up making their own and you know we",
    "start": "451680",
    "end": "457440"
  },
  {
    "text": "get in this vicious cycle so to solve the issues we've been describing we decided to explore how",
    "start": "457440",
    "end": "463520"
  },
  {
    "text": "graphql can play a role in solving those so what is graphql",
    "start": "463520",
    "end": "469599"
  },
  {
    "text": "graphql is a graph query language it was developed by facebook in 2012 and",
    "start": "469599",
    "end": "476160"
  },
  {
    "text": "they had the first public release in 2015. graphql using the query language",
    "start": "476160",
    "end": "481680"
  },
  {
    "text": "to request data you want from the server so query center graphql server i usually",
    "start": "481680",
    "end": "487520"
  },
  {
    "text": "post request send to slash graphql endpoints in our example we are asking the server",
    "start": "487520",
    "end": "493360"
  },
  {
    "text": "to retrieve information about team 147 and only requesting its name",
    "start": "493360",
    "end": "498960"
  },
  {
    "text": "one of the most powerful features of graphql is the ability to selectively return partial data from a statically",
    "start": "498960",
    "end": "504800"
  },
  {
    "text": "defined model on response we got team 147's name which is new york yankees",
    "start": "504800",
    "end": "514479"
  },
  {
    "start": "514000",
    "end": "514000"
  },
  {
    "text": "a typical graphql service is made up of three interconnected parts the first",
    "start": "514800",
    "end": "520640"
  },
  {
    "text": "being the well-defined statically typed models that are similar to other serialization formats like protobuf",
    "start": "520640",
    "end": "527680"
  },
  {
    "text": "these models describe what the output of our graph will look like to implementing clients in this example we have a type",
    "start": "527680",
    "end": "535279"
  },
  {
    "text": "team that has an id of int and name of string these models can include any",
    "start": "535279",
    "end": "541120"
  },
  {
    "text": "number of other fields there are a variety of primitive graphql types but users can easily implement",
    "start": "541120",
    "end": "547040"
  },
  {
    "text": "their own object models a special type of query defines how implementing clients can query the graph",
    "start": "547040",
    "end": "554240"
  },
  {
    "text": "in our example we have one query of get teams that accepts an array of ins and",
    "start": "554240",
    "end": "559760"
  },
  {
    "text": "returns an array of teams the second peel of graphql service is the resolver",
    "start": "559760",
    "end": "565839"
  },
  {
    "text": "the resolver is taken inputs from a query call upstream services to resolve the desired data and return the data in",
    "start": "565839",
    "end": "572880"
  },
  {
    "text": "the define output model it is here that we've separated the front and back and",
    "start": "572880",
    "end": "578160"
  },
  {
    "text": "data model to provide the flexible interlock between the two the third pillar is obviously the",
    "start": "578160",
    "end": "584080"
  },
  {
    "text": "upstream services of which there could be one or more that are required to resolve the output model",
    "start": "584080",
    "end": "591839"
  },
  {
    "text": "so going back to our high-level architecture diagram we now have our graphql server as the",
    "start": "591839",
    "end": "597600"
  },
  {
    "text": "proxy middle layer between our clients and our upstream services",
    "start": "597600",
    "end": "602800"
  },
  {
    "text": "our graphql server consumes our models and provides them to our clients in how to query the graph the resolvers take",
    "start": "602800",
    "end": "610000"
  },
  {
    "text": "the request call the services and return the message results some pros and this architecture",
    "start": "610000",
    "end": "617120"
  },
  {
    "text": "will have all of our codes in one place we have a single server that teams can",
    "start": "617120",
    "end": "623120"
  },
  {
    "text": "work against and easily view our rpa service deployments are easier because we're",
    "start": "623120",
    "end": "629040"
  },
  {
    "text": "just dealing with a single server however",
    "start": "629040",
    "end": "634240"
  },
  {
    "text": "as we start scaling our teams in contributing to the graph it starts to become logistically complex iterating on",
    "start": "634240",
    "end": "640399"
  },
  {
    "text": "our monolith starts to create tight coupling between our models we also have",
    "start": "640399",
    "end": "645440"
  },
  {
    "text": "to deal with a single point of value which is ideal",
    "start": "645440",
    "end": "650480"
  },
  {
    "start": "651000",
    "end": "651000"
  },
  {
    "text": "so enter um apollo which is a third-party company um that extends the",
    "start": "651279",
    "end": "657200"
  },
  {
    "text": "graphql spec created by facebook and um specifically it's around federation",
    "start": "657200",
    "end": "663920"
  },
  {
    "text": "and so federation is a topology of services where you have multiple independent services united by a gateway",
    "start": "663920",
    "end": "669839"
  },
  {
    "text": "or router that is able to take each piece of of a sub graph so each of these services essentially is a single",
    "start": "669839",
    "end": "676560"
  },
  {
    "text": "responsibility within your graph stitches them all together and provides that that super graph to the",
    "start": "676560",
    "end": "682320"
  },
  {
    "text": "implementing clients so going back to our our kind of diagram here we have our",
    "start": "682320",
    "end": "687680"
  },
  {
    "start": "683000",
    "end": "683000"
  },
  {
    "text": "clients who hit our gateway or the router and that those routers or those that router",
    "start": "687680",
    "end": "695120"
  },
  {
    "text": "interfaces with these sub services which have their own models their own resolvers",
    "start": "695120",
    "end": "701040"
  },
  {
    "text": "um and what comes with this is not only the ability to separate out pieces of your graph in a",
    "start": "701040",
    "end": "707519"
  },
  {
    "text": "more kind of modular way but also gives you the ability to now do inter-service",
    "start": "707519",
    "end": "713200"
  },
  {
    "text": "communication between your two services so now you now have these uh sub graph services that are responsible for their",
    "start": "713200",
    "end": "719680"
  },
  {
    "text": "own thing they query their own data sources but if one sub graph needs information from another subgraph you",
    "start": "719680",
    "end": "725839"
  },
  {
    "text": "now have the ability to essentially query each other's sub graphs to create more complex queries so the pros behind",
    "start": "725839",
    "end": "733120"
  },
  {
    "text": "this are each service is responsible for its larger part of the graph for creating more separation because as your graph starts to grow and get complex it",
    "start": "733120",
    "end": "740000"
  },
  {
    "text": "can very hard to reason about within one single server um it's easier for larger teams to",
    "start": "740000",
    "end": "745600"
  },
  {
    "text": "contribute because they're owning pieces of these graphs so usually sub graphs map one to one usually or or potentially",
    "start": "745600",
    "end": "752959"
  },
  {
    "text": "multiple teams could um service multiple pieces of the graph but you're now getting responsibility",
    "start": "752959",
    "end": "758079"
  },
  {
    "text": "away from potentially a single graphql team within your organization and now each each kind of uh uh",
    "start": "758079",
    "end": "764880"
  },
  {
    "text": "underlying team is now maintenancing their own piece of the sub graph um these can also be independently",
    "start": "764880",
    "end": "771040"
  },
  {
    "text": "uh versioned and deployed irrespective of other pieces as long as you're not breaking the graph we're going to go into mitigations against that teams can",
    "start": "771040",
    "end": "778720"
  },
  {
    "text": "iterate as fast as they want to and ship as frequently frequently as they want to to to get things out irrespective of",
    "start": "778720",
    "end": "784720"
  },
  {
    "text": "what the other services are doing some cons against this or it's much more complex ci cd so in terms of",
    "start": "784720",
    "end": "791279"
  },
  {
    "text": "checking that the graph that the sub graph that you're pushing is not going to break other pieces there are uh",
    "start": "791279",
    "end": "796880"
  },
  {
    "text": "utilities available by apollo in order to you know manage that but it is a concern",
    "start": "796880",
    "end": "803519"
  },
  {
    "text": "um so you could potentially break the graph right also the connections between our",
    "start": "803519",
    "end": "808560"
  },
  {
    "text": "subgraphs are not super clear so we're going to get in the semantics behind how this uh inter-service communication",
    "start": "808560",
    "end": "813920"
  },
  {
    "text": "works but and there are ways to view the complete super graph but it is somewhat opaque in",
    "start": "813920",
    "end": "819839"
  },
  {
    "text": "terms of which subservice owns which pieces of the graph when you're looking at the photograph itself so you kind of",
    "start": "819839",
    "end": "826079"
  },
  {
    "text": "have to dive into things or have people who are knowledgeable on how the entire graph works in order to kind of grip",
    "start": "826079",
    "end": "831600"
  },
  {
    "text": "everything that's going on so this is the representation of our federated graph we still have more teams",
    "start": "831600",
    "end": "838959"
  },
  {
    "start": "833000",
    "end": "833000"
  },
  {
    "text": "to unboat and bring in their backend data into a federation graph but you already can see how many services are",
    "start": "838959",
    "end": "845120"
  },
  {
    "text": "available for consumers to use with only one single entry point to the gateway",
    "start": "845120",
    "end": "851839"
  },
  {
    "text": "so now we're going to get into a little bit more of the nuts and bolts of how a lot of these",
    "start": "852160",
    "end": "857680"
  },
  {
    "text": "ideas work within federation one of the most important aspects of",
    "start": "857680",
    "end": "864320"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "iterated graphql is the ability for subgraph services to communicate with each other in the seamless developer",
    "start": "864320",
    "end": "871040"
  },
  {
    "text": "experiences where the developer doesn't need to know where other models live",
    "start": "871040",
    "end": "876240"
  },
  {
    "text": "they just need to extend already established models and add their desired properties into them",
    "start": "876240",
    "end": "881920"
  },
  {
    "text": "over the past six months mlb has started to implement more personalized content within our platform in doing so we want",
    "start": "881920",
    "end": "889040"
  },
  {
    "text": "to attach personalized information to our user for consumption here we have a user type that has an id",
    "start": "889040",
    "end": "895920"
  },
  {
    "text": "of string and a favorite team of team however the team model doesn't live in",
    "start": "895920",
    "end": "900959"
  },
  {
    "text": "the user service but in the baseball service so when the client requests the user's",
    "start": "900959",
    "end": "906800"
  },
  {
    "text": "favorite team what is actually happening is our query enters the gateway and resolves the user",
    "start": "906800",
    "end": "915120"
  },
  {
    "text": "the gateway sees that the favorite team has been requested of type team",
    "start": "915120",
    "end": "920720"
  },
  {
    "text": "so after we get the favorite team id from our user service the gateway automatically sends",
    "start": "920720",
    "end": "927440"
  },
  {
    "text": "that favorite team id to the baseball service to resolve the entire team for consumption",
    "start": "927440",
    "end": "933120"
  },
  {
    "text": "in the center of the slide are some semantics around how to supply the connections between the services in the",
    "start": "933120",
    "end": "938959"
  },
  {
    "text": "pause federation returning a type that exists in another service and that type",
    "start": "938959",
    "end": "944399"
  },
  {
    "text": "defining a resolve reference allows this cross-communication to happen",
    "start": "944399",
    "end": "950720"
  },
  {
    "start": "950000",
    "end": "950000"
  },
  {
    "text": "um and so again when we're talking about redundancy and the safety of our graph",
    "start": "951120",
    "end": "957199"
  },
  {
    "text": "right um and and making it as efficient as possible we want to talk about how different caching strategies work within",
    "start": "957199",
    "end": "962639"
  },
  {
    "text": "a federated architecture and so looking at this chord we have here it's",
    "start": "962639",
    "end": "968000"
  },
  {
    "text": "somewhat more complex and under the hood a lot of things are going on but on the whole we want to get slashing so mlb.com",
    "start": "968000",
    "end": "974959"
  },
  {
    "text": "we want to get the title of the page we want to get the components that make up that page and specifically in this query we're looking for videos and on those",
    "start": "974959",
    "end": "982880"
  },
  {
    "text": "videos we want to find the team name of the teams involved in that video and so what happens is we go into the",
    "start": "982880",
    "end": "989360"
  },
  {
    "text": "gateway we send this query in and we're going to make calls out to each of our services that can supply",
    "start": "989360",
    "end": "994720"
  },
  {
    "text": "that information which includes our cms the dappy which is like uh the actual",
    "start": "994720",
    "end": "999839"
  },
  {
    "text": "content itself um and the baseball service or stats api so baseball stats data",
    "start": "999839",
    "end": "1007279"
  },
  {
    "text": "so we're gonna make those calls out to our external services um and each of those external services are going to",
    "start": "1007279",
    "end": "1012720"
  },
  {
    "text": "respond with a cash control header so we'll make a call to the cms we get 10 30 for the dappy and three 3600 from",
    "start": "1012720",
    "end": "1020639"
  },
  {
    "text": "stats api because that stuff isn't changing um all that often right so how do we end up caching this stuff",
    "start": "1020639",
    "end": "1027038"
  },
  {
    "text": "well we're able to cache the entire query results at the gateway at the lowest max",
    "start": "1027039",
    "end": "1034079"
  },
  {
    "text": "age from all of the services that were called to make up the the query response for this query",
    "start": "1034079",
    "end": "1040959"
  },
  {
    "text": "and so what it does is it coalesces all those down finds the least one stores that in in our example here redis",
    "start": "1040959",
    "end": "1047760"
  },
  {
    "text": "for 10 seconds um and you know the process continues and so we're cashing it as close as possible",
    "start": "1047760",
    "end": "1054000"
  },
  {
    "text": "um to you know the request coming in um at the minimum uh max age that was supplied",
    "start": "1054000",
    "end": "1061280"
  },
  {
    "text": "but as we know some services and the responses are not cashable whether it's dynamic data or sensitive data and so",
    "start": "1061280",
    "end": "1069280"
  },
  {
    "start": "1067000",
    "end": "1067000"
  },
  {
    "text": "what about partial query caching we still want our queries to respond quickly but there are you know obviously times where it's uncashable so let's",
    "start": "1069280",
    "end": "1076240"
  },
  {
    "text": "talk about our favorite team example here so we want to get up there team for a",
    "start": "1076240",
    "end": "1082000"
  },
  {
    "text": "given user id that query goes into the gateway we're going to go to each of our services to pull that data which is the",
    "start": "1082000",
    "end": "1087039"
  },
  {
    "text": "user in the baseball service we're going to go out and call our profile servers and stats api the stats api as our",
    "start": "1087039",
    "end": "1093679"
  },
  {
    "text": "previous example in terms of max age of 3600 however user data is not going to be cacheable",
    "start": "1093679",
    "end": "1100400"
  },
  {
    "text": "because you know it's dynamic or changes a lot or whatever so what are we supposed to do in this instance well we can't cache it at the",
    "start": "1100400",
    "end": "1106960"
  },
  {
    "text": "gateway because the whole query cannot be cached since one piece would not be cached however",
    "start": "1106960",
    "end": "1112240"
  },
  {
    "text": "we can cache that sub query piece that involves the stats api at the baseball",
    "start": "1112240",
    "end": "1117280"
  },
  {
    "text": "service level so that's returned quicker um you know and then we'll wait for the user service to eventually resolve but",
    "start": "1117280",
    "end": "1123760"
  },
  {
    "text": "it's a way of still maintaining some speed in your graph resolution while making sure that you're not caching",
    "start": "1123760",
    "end": "1129280"
  },
  {
    "text": "things that aren't going to be cached so we're starting to talk about now redundancy you know what happens if",
    "start": "1129280",
    "end": "1135520"
  },
  {
    "start": "1131000",
    "end": "1131000"
  },
  {
    "text": "something's happening to our upstream services we still want to you know have integrity in our graph we still want to return data back to our clients well",
    "start": "1135520",
    "end": "1143600"
  },
  {
    "text": "let's talk about maybe some circuit breaking here so again same example we want to get the favorite team for a given user query goes in",
    "start": "1143600",
    "end": "1150480"
  },
  {
    "text": "we make a successful response to our profile service but something's happening with stats api it's taking too",
    "start": "1150480",
    "end": "1156000"
  },
  {
    "text": "long to respond it's throwing an error things like that depending on the business rules around you know what",
    "start": "1156000",
    "end": "1161760"
  },
  {
    "text": "happens in these failure modes for our stats api we're going to say we're going to cache every successful response that",
    "start": "1161760",
    "end": "1167760"
  },
  {
    "text": "we make to the stats api for some long period of time right we're saying that if we need to service data",
    "start": "1167760",
    "end": "1173919"
  },
  {
    "text": "stale we can so if there's an issue we have that data already cached",
    "start": "1173919",
    "end": "1179679"
  },
  {
    "text": "in a long in a long-term cache right so we're going to be able to pull that out of cache and still",
    "start": "1179679",
    "end": "1184720"
  },
  {
    "text": "uh successfully return a result of this query um while we wait for stats of that api to become healthy",
    "start": "1184720",
    "end": "1193120"
  },
  {
    "start": "1191000",
    "end": "1191000"
  },
  {
    "text": "so the last optimization we are going to cover is automatic persistent queries or abq's",
    "start": "1193120",
    "end": "1199520"
  },
  {
    "text": "apq solve problems around payload size since some queries can be large over the wire as well as caching at the edge",
    "start": "1199520",
    "end": "1207200"
  },
  {
    "text": "because graphql by default operates using post we are unable to cache our response at the edge what apqs afford us",
    "start": "1207200",
    "end": "1214640"
  },
  {
    "text": "is the ability to cache uh to hash and cache the query body itself while using get requests",
    "start": "1214640",
    "end": "1221679"
  },
  {
    "text": "to to cache at the edge for bigger savings here's our typical architecture diagram",
    "start": "1221679",
    "end": "1228000"
  },
  {
    "text": "we have our cdn and our graph is making external calls to our services",
    "start": "1228000",
    "end": "1234559"
  },
  {
    "text": "everything works the same however a series of events happen to start caching at the cdn",
    "start": "1234559",
    "end": "1240159"
  },
  {
    "text": "first we send a get request with the hash query value if we haven't seen this",
    "start": "1240159",
    "end": "1245679"
  },
  {
    "text": "before or the cache has expired we send our traditional post requests with the full query and the hash value to be",
    "start": "1245679",
    "end": "1252480"
  },
  {
    "text": "cached on subsequent calls successful get requests are then cached at the cdm",
    "start": "1252480",
    "end": "1257840"
  },
  {
    "text": "using the previous cache semantics for query caching one of the uh",
    "start": "1257840",
    "end": "1263679"
  },
  {
    "start": "1262000",
    "end": "1262000"
  },
  {
    "text": "things that you can really start to extract out and use to enhance not only the graph itself but your organization",
    "start": "1263679",
    "end": "1271039"
  },
  {
    "text": "is leveraging a lot of metrics around how your queries are doing um the health of them",
    "start": "1271039",
    "end": "1276880"
  },
  {
    "text": "the speed the latency and a bunch of metric some of these are from apollo specifically so apollo has a cloud",
    "start": "1276880",
    "end": "1282480"
  },
  {
    "text": "product where these first two uh images are are part of that where we can see what are the",
    "start": "1282480",
    "end": "1288559"
  },
  {
    "text": "requests per minute for all the different types of queries that we have what's the latency what are the errors and they have",
    "start": "1288559",
    "end": "1295120"
  },
  {
    "text": "built-in tracing so we can start to dive into as queries are executed and they're being federated out where are where's",
    "start": "1295120",
    "end": "1302080"
  },
  {
    "text": "the slowness happening what services are are our slowest services how do we make improvements to those services are there",
    "start": "1302080",
    "end": "1307840"
  },
  {
    "text": "specific um uh parameters within the queries that are throwing errors things like that",
    "start": "1307840",
    "end": "1313520"
  },
  {
    "text": "and then to uh complement that we have a whole prometheus rifana you know more infra monitoring however we can see at a",
    "start": "1313520",
    "end": "1321039"
  },
  {
    "text": "granular level for each service um how you know what the health of those are",
    "start": "1321039",
    "end": "1327440"
  },
  {
    "text": "in more detail so lessons learned so far we have",
    "start": "1327600",
    "end": "1332799"
  },
  {
    "start": "1330000",
    "end": "1330000"
  },
  {
    "text": "definitely some wins we went into production in may we have a subset of total services and",
    "start": "1332799",
    "end": "1341200"
  },
  {
    "text": "we're doing 60 requests per seconds at peak time",
    "start": "1341200",
    "end": "1346880"
  },
  {
    "text": "we decrease number of calls between the services no more teaching within clients pay lows",
    "start": "1346880",
    "end": "1354240"
  },
  {
    "text": "decreased teams leverage and federation no longer need to worry about data access",
    "start": "1354240",
    "end": "1361840"
  },
  {
    "text": "we also increase visibility upstream with tracing and centralized data access reduce",
    "start": "1361840",
    "end": "1368080"
  },
  {
    "text": "ambiguity and ease discovery so of course with everything there's",
    "start": "1368080",
    "end": "1374320"
  },
  {
    "text": "gonna be caveats and there's gonna be challenges when implementing an architecture that has this kind of scope",
    "start": "1374320",
    "end": "1380000"
  },
  {
    "text": "within your organization the first is the upfront cost um you know within your organization to learn the graphql syntax",
    "start": "1380000",
    "end": "1387120"
  },
  {
    "text": "the grammar the the the particularities around federation um",
    "start": "1387120",
    "end": "1392320"
  },
  {
    "text": "a lot of that's you know a social socialization within your organization about how these things work",
    "start": "1392320",
    "end": "1397679"
  },
  {
    "text": "there's a lot of different models by which you know um apollo themselves but just the community recommends you know",
    "start": "1397679",
    "end": "1404640"
  },
  {
    "text": "you set up teams to do this but you know it's a challenge um again the federation the service",
    "start": "1404640",
    "end": "1411679"
  },
  {
    "text": "not so much service discovery but figuring out which parts of the subgraph are owned by which services can be challenging without you know either",
    "start": "1411679",
    "end": "1418640"
  },
  {
    "text": "documentation or again people knowledgeable with the entire graph um",
    "start": "1418640",
    "end": "1424080"
  },
  {
    "text": "with any you know uh not only product but just architecture there has to be organizational buy-in so challenges",
    "start": "1424080",
    "end": "1429840"
  },
  {
    "text": "around that are you know uh the ease of use of onboarding new teams you know scaffolding out projects that",
    "start": "1429840",
    "end": "1436480"
  },
  {
    "text": "they can get running really quickly things of that nature um and governance requires a lot of",
    "start": "1436480",
    "end": "1441919"
  },
  {
    "text": "oversight so when i talk about governance that could be of the architecture itself that could be again the taxonomy of your graph right that",
    "start": "1441919",
    "end": "1448880"
  },
  {
    "text": "could be um you know who owns which services um there's a lot that goes into really",
    "start": "1448880",
    "end": "1456320"
  },
  {
    "text": "managing this layer and how it works in your broader organization that takes time and and every organization is",
    "start": "1456320",
    "end": "1462400"
  },
  {
    "text": "different and they're going to come up with different patterns or different teams or however to execute this",
    "start": "1462400",
    "end": "1468000"
  },
  {
    "text": "um but it really is an iterative process speaking for us specifically we've gone through a couple of these as we started",
    "start": "1468000",
    "end": "1473440"
  },
  {
    "text": "scaling out this within our organization um and we're still you know we're still",
    "start": "1473440",
    "end": "1478799"
  },
  {
    "text": "working out what is going to work better best for us and what's going to scale ultimately",
    "start": "1478799",
    "end": "1484080"
  },
  {
    "start": "1484000",
    "end": "1484000"
  },
  {
    "text": "so there are some resources if you would like to go ahead and look closer at the graphql",
    "start": "1485120",
    "end": "1491200"
  },
  {
    "text": "uh there is a graphql doc to give you more details about anatomy there's also",
    "start": "1491200",
    "end": "1496240"
  },
  {
    "text": "apollodux if you're interested in apollo version of graphql or apollo federation",
    "start": "1496240",
    "end": "1503039"
  },
  {
    "text": "also please check out apollo graphql summit where matt will be a part of the",
    "start": "1503039",
    "end": "1508240"
  },
  {
    "text": "round table and as always connect with us check out our profile for linkedin links and other",
    "start": "1508240",
    "end": "1514400"
  },
  {
    "text": "ways to connect with us thank you thanks everyone for uh enjoy uh joining us our talk we'll see you at the q a",
    "start": "1514400",
    "end": "1521679"
  },
  {
    "text": "see you in q a bye",
    "start": "1521679",
    "end": "1525640"
  },
  {
    "text": "alessia and matt thanks for your presentation i think this probably struck a chord with a lot of people at this conference because you know most",
    "start": "1528159",
    "end": "1535200"
  },
  {
    "text": "of us have wholeheartedly embrace microservice architectures and with that comes you know service",
    "start": "1535200",
    "end": "1541360"
  },
  {
    "text": "sprawl and data governance and um performance issues all these all these kind of things that you touched on",
    "start": "1541360",
    "end": "1547679"
  },
  {
    "text": "and it's really somebody solving those problems in a certain way um",
    "start": "1547679",
    "end": "1553200"
  },
  {
    "text": "so we have done a really good job answering questions in the chat",
    "start": "1553200",
    "end": "1558880"
  },
  {
    "text": "you did pretty good i have a few questions of my own but i think the most pressing question we",
    "start": "1559760",
    "end": "1565279"
  },
  {
    "text": "should address since uh for those watching a recording of this we're in the middle of the world series right now so",
    "start": "1565279",
    "end": "1572000"
  },
  {
    "text": "who wins game six of the world series tomorrow atlanta or houston",
    "start": "1572000",
    "end": "1577679"
  },
  {
    "text": "i'm going braves alessia do you have an opinion",
    "start": "1577679",
    "end": "1584639"
  },
  {
    "text": "the first question i have is you highlighted the importance of graph governance in",
    "start": "1595440",
    "end": "1600880"
  },
  {
    "text": "in making this happen is is that just kind of a social problem organizational",
    "start": "1600880",
    "end": "1606240"
  },
  {
    "text": "problem or is that also a technical problem and are there tools or techniques or suggestions you have",
    "start": "1606240",
    "end": "1613120"
  },
  {
    "text": "around graph graph governance yeah um i feel like this really echoes um the",
    "start": "1613120",
    "end": "1620080"
  },
  {
    "text": "first talk where you know a challenge well a lot of stuff that we talk about is very technical but",
    "start": "1620080",
    "end": "1625679"
  },
  {
    "text": "half the battle also is the organization the people getting people excited about it onboarding and and the logistics around",
    "start": "1625679",
    "end": "1633440"
  },
  {
    "text": "operating these large systems and i think in any organization when you have a an architecture that's going to",
    "start": "1633440",
    "end": "1639919"
  },
  {
    "text": "span a decent port of your or part of your organization there's a lot of",
    "start": "1639919",
    "end": "1644960"
  },
  {
    "text": "a lot of stuff that comes with that a lot of coordination and it is a very human problem and i i think as we've",
    "start": "1644960",
    "end": "1651200"
  },
  {
    "text": "started going through this process it's it's been very iterative where we we",
    "start": "1651200",
    "end": "1656399"
  },
  {
    "text": "started with a small team we started opening up to the larger organization we started getting feedback we started then",
    "start": "1656399",
    "end": "1662480"
  },
  {
    "text": "playing around with different governance structures whether that's a small governance team whether that's like an",
    "start": "1662480",
    "end": "1668640"
  },
  {
    "text": "in-house like uh like graph platform team what or or what have you",
    "start": "1668640",
    "end": "1674399"
  },
  {
    "text": "we're still trying to i think figure out what's gonna work the best for us but there is just a lot of uh i think uh",
    "start": "1674399",
    "end": "1682399"
  },
  {
    "text": "coordination and and socialization of what the graph is supposed to do the",
    "start": "1682399",
    "end": "1687520"
  },
  {
    "text": "expectations of it and then within your tech organization how you're going to",
    "start": "1687520",
    "end": "1692799"
  },
  {
    "text": "farm out and and validate that the changes whether it's technical changes whether it's",
    "start": "1692799",
    "end": "1699520"
  },
  {
    "text": "your taxonomy of your graph like there's a lot that goes into kind of having everybody on the same page and",
    "start": "1699520",
    "end": "1705200"
  },
  {
    "text": "i think it's different from normal kind of you know uh standard everyone has their own rest service or they have",
    "start": "1705200",
    "end": "1711760"
  },
  {
    "text": "grpc or whatever where the teams are kind of siloed and then if you need something you go to that team this is much more broad where there has to be a",
    "start": "1711760",
    "end": "1718640"
  },
  {
    "text": "constant kind of communication between all the teams because at the end of the day it's one graph even though within",
    "start": "1718640",
    "end": "1724320"
  },
  {
    "text": "federation like how kind of what i alluded to each team kind of manages their sub",
    "start": "1724320",
    "end": "1729600"
  },
  {
    "text": "graph or sub service right it eventually is coalesced into one super grab and so",
    "start": "1729600",
    "end": "1735200"
  },
  {
    "text": "you know it's it is you're juggling a lot of things and i think we're moving toward having a centralized team",
    "start": "1735200",
    "end": "1741840"
  },
  {
    "text": "that is kind of the traffic cop of all this stuff and just making sure that you know there's a high",
    "start": "1741840",
    "end": "1748640"
  },
  {
    "text": "set of principles or policies that are being followed um but i think at the end",
    "start": "1748640",
    "end": "1753760"
  },
  {
    "text": "of the day you need to relinquish control in order to keep the gears turning because if there's too much processing you're just gonna really slow",
    "start": "1753760",
    "end": "1759679"
  },
  {
    "text": "things down you can see we're really passionate about governance",
    "start": "1759679",
    "end": "1765039"
  },
  {
    "text": "yeah it's been a yeah a process it seems it seems like a problem someone could",
    "start": "1765039",
    "end": "1770960"
  },
  {
    "text": "overlook in trying to do this and and then not have it be successful",
    "start": "1770960",
    "end": "1776320"
  },
  {
    "text": "yeah i think so how graphql kind of started mlb is we had our",
    "start": "1776320",
    "end": "1781760"
  },
  {
    "text": "they're called fetty or like the editorial team who who does a lot of the front end work they kind of ran with",
    "start": "1781760",
    "end": "1786960"
  },
  {
    "text": "their own just single regular graphql um server and just to kind of make the",
    "start": "1786960",
    "end": "1793200"
  },
  {
    "text": "the division between these two things really clear so grab ql facebook spec and then",
    "start": "1793200",
    "end": "1799840"
  },
  {
    "text": "apollo third party extended the spec to include federation and a couple other things so they are they are separate",
    "start": "1799840",
    "end": "1807039"
  },
  {
    "text": "however going toward a similar gold um but the the first group have experimented with just graphql",
    "start": "1807039",
    "end": "1814000"
  },
  {
    "text": "and then we kind of started taking that paradigm saw what apollo was doing and we're like okay well we can extend this out",
    "start": "1814000",
    "end": "1819120"
  },
  {
    "text": "throughout the entire organization um but it really was a bottom-up effort",
    "start": "1819120",
    "end": "1825039"
  },
  {
    "text": "um and i think it's different where if you within your organization you know you have a cto or a director of engineering who's saying",
    "start": "1825039",
    "end": "1831279"
  },
  {
    "text": "we are going to become a graph first company and then it kind of comes from the top down there's an edict it's",
    "start": "1831279",
    "end": "1836559"
  },
  {
    "text": "different when it's more of a grassroots um you know uh",
    "start": "1836559",
    "end": "1842320"
  },
  {
    "text": "like powered thing um and it takes a lot more convincing a lot more i think",
    "start": "1842480",
    "end": "1847760"
  },
  {
    "text": "make realizing the value prop of of what it could be um because",
    "start": "1847760",
    "end": "1853039"
  },
  {
    "text": "it's going to be a multi-year process i mean two to five years probably depending on how big",
    "start": "1853039",
    "end": "1858640"
  },
  {
    "text": "your your infra is you know across the entire tech or to convert it over to where you you see a lot of the benefits",
    "start": "1858640",
    "end": "1865039"
  },
  {
    "text": "of adopting something like this nice um maybe to pick up one of the",
    "start": "1865039",
    "end": "1870640"
  },
  {
    "text": "questions in the chat someone's asking about alternatives to apollo and it um",
    "start": "1870640",
    "end": "1876000"
  },
  {
    "text": "so yeah i'd be interested to hear if someone who doesn't want to use apollo or their other alternatives and maybe",
    "start": "1876000",
    "end": "1881679"
  },
  {
    "text": "also address um in an environment where it's not just json and http or over http where maybe",
    "start": "1881679",
    "end": "1888799"
  },
  {
    "text": "some services have moved to grpc are what are the alternatives there and maybe in a completely grpc world where",
    "start": "1888799",
    "end": "1895360"
  },
  {
    "text": "someone wants to do federation just do you have any advice there yeah so i guess in terms of of",
    "start": "1895360",
    "end": "1902159"
  },
  {
    "text": "alternatives like there are a bench a bunch of reference implementations of graphql amongst the languages themselves",
    "start": "1902159",
    "end": "1908240"
  },
  {
    "text": "and so apollo is kind of leading the javascript reference implementation um",
    "start": "1908240",
    "end": "1914000"
  },
  {
    "text": "and you have things like sangria which are in scala uh and a across all the",
    "start": "1914000",
    "end": "1920480"
  },
  {
    "text": "languages they're kind of you know not run by a company right they're just grassroots kind of libraries um",
    "start": "1920480",
    "end": "1926320"
  },
  {
    "text": "so no apollo definitely not the only they're driving the federation spec piece and so i guess you would have lock",
    "start": "1926320",
    "end": "1933519"
  },
  {
    "text": "in there but in terms of using graphql genuinely like you you're kind of free to do do what you will",
    "start": "1933519",
    "end": "1939679"
  },
  {
    "text": "um in terms of leveraging other um transport paradigms so within your",
    "start": "1939679",
    "end": "1946159"
  },
  {
    "text": "resolvers like you like in a lot of our work obviously our services our upstream services our internal services are all",
    "start": "1946159",
    "end": "1952640"
  },
  {
    "text": "just restful services really we don't have a ton of grpc within our organization but within the resolvers however you're",
    "start": "1952640",
    "end": "1959600"
  },
  {
    "text": "getting your information it's very open-ended in terms of how how you want to resolve your queries",
    "start": "1959600",
    "end": "1964880"
  },
  {
    "text": "where you're getting that data from whether it's directly from a database whether it's through grpc whether it's through a rest service like the graphql",
    "start": "1964880",
    "end": "1971919"
  },
  {
    "text": "is pretty agnostic in terms of how you resolve the data to resolve your query",
    "start": "1971919",
    "end": "1977120"
  },
  {
    "text": "so in that sense you could pull from any data source by whatever means are available to you in order to",
    "start": "1977120",
    "end": "1983760"
  },
  {
    "text": "leverage graphql i mean think about it as just a glorified proxy right graphql however you get a bunch of the query",
    "start": "1983760",
    "end": "1989840"
  },
  {
    "text": "semantics and everything on top of it to make working with your data a lot easier and then if you lever leverage",
    "start": "1989840",
    "end": "1995440"
  },
  {
    "text": "federation you get a lot of the fun interconnected bits so that some services within your organization",
    "start": "1995440",
    "end": "2002159"
  },
  {
    "text": "don't need to go out redundantly to other pieces to get the data you can use the graph in order to",
    "start": "2002159",
    "end": "2008640"
  },
  {
    "text": "leverage your infrastructure as a whole okay we have about five minutes left",
    "start": "2008640",
    "end": "2015840"
  },
  {
    "text": "maybe touch on the it seems there's probably a lot of wins from doing",
    "start": "2015840",
    "end": "2021440"
  },
  {
    "text": "uh you know caching circuit breaking these kind of things centrally someone has a question actually do you do rate",
    "start": "2021440",
    "end": "2028240"
  },
  {
    "text": "limiting through through this central service um and then maybe some of the drawbacks",
    "start": "2028240",
    "end": "2033760"
  },
  {
    "text": "of that too like someone's saying about conway's law and having one you know monolithic api like but it seems like",
    "start": "2033760",
    "end": "2040159"
  },
  {
    "text": "there's a lot of wins from having this centrally and but also attention and maybe even contrast to some like",
    "start": "2040159",
    "end": "2047760"
  },
  {
    "text": "how what it would look like trying to use maybe a service mess approach or something like that that's yeah that isn't as coordinated and",
    "start": "2047760",
    "end": "2054480"
  },
  {
    "text": "and opinionated maybe i think i think so in terms of rail living we don't have",
    "start": "2054480",
    "end": "2060000"
  },
  {
    "text": "any real limits yet because so we're we're not anywhere near 100 in terms of converting our entire infra over we're",
    "start": "2060000",
    "end": "2066398"
  },
  {
    "text": "doing this very piecemeal um so we have just a fraction of our traffic",
    "start": "2066399",
    "end": "2071839"
  },
  {
    "text": "or i guess you can think about its features that are being served out of the graph currently but slowly migrating things over so eventually we'll approach",
    "start": "2071839",
    "end": "2078240"
  },
  {
    "text": "rate limiting um and i think that that won't i don't i think i'll be divorced from",
    "start": "2078240",
    "end": "2083599"
  },
  {
    "text": "the graph architecture as well like we'll either use it at the cdn or whatever and and do that um but",
    "start": "2083599",
    "end": "2089440"
  },
  {
    "text": "uh in terms of kind of drawbacks like i i think the first question that we",
    "start": "2089440",
    "end": "2094560"
  },
  {
    "text": "were talking about there's a lot that goes into organizing your organization around the",
    "start": "2094560",
    "end": "2099920"
  },
  {
    "text": "common goal because like i said fully realize the power of the graph you want to have you know a ton of your teams if",
    "start": "2099920",
    "end": "2106720"
  },
  {
    "text": "not all of them maintaining sub services feeding up into your super graph and being able to be deployed out that is a very uh noble",
    "start": "2106720",
    "end": "2114880"
  },
  {
    "text": "goal right i think that a lot of us you know who have been architects or or seniors who are architecting out their",
    "start": "2114880",
    "end": "2120480"
  },
  {
    "text": "systems like it's kind of pie in the sky to think that you're going to get everybody on board to do the same thing",
    "start": "2120480",
    "end": "2125680"
  },
  {
    "text": "and even when you do at that scale logistically it's a burden in order to",
    "start": "2125680",
    "end": "2131520"
  },
  {
    "text": "maintain everything all the moving parts and so like i think yes like to your question i",
    "start": "2131520",
    "end": "2137359"
  },
  {
    "text": "think it would be simpler to go service mesh s grout",
    "start": "2137359",
    "end": "2142880"
  },
  {
    "text": "however like you're not going to get a lot of the things that you're going to get with apollo and strictly federation for free",
    "start": "2142880",
    "end": "2150720"
  },
  {
    "text": "like the interservice communication bits like i mean you get uh tracing out of the box for free too and so as your",
    "start": "2150720",
    "end": "2157760"
  },
  {
    "text": "query resolves and it goes through all these different sub graphs you can see and i went through that slide super quick but you can see the time it takes",
    "start": "2157760",
    "end": "2165359"
  },
  {
    "text": "what data resolved and everything and really dive in to see what up streams are taking forever and work with those teams and try to optimize that",
    "start": "2165359",
    "end": "2172400"
  },
  {
    "text": "um but you know i think it's it's really pros cons and it really i think it really depends on what your",
    "start": "2172400",
    "end": "2178079"
  },
  {
    "text": "organization is already and like where you kind of see it going forward and what your specific problems are",
    "start": "2178079",
    "end": "2184800"
  },
  {
    "text": "okay we have about one minute left maybe one more question there's lots of questions so i hope everyone joins the",
    "start": "2184800",
    "end": "2190960"
  },
  {
    "text": "hallway track after and we can continue the discussion so maybe last question is do you have to interact much with the",
    "start": "2190960",
    "end": "2197359"
  },
  {
    "text": "federated query planner or is that just basically resolving based on the model and you don't have to",
    "start": "2197359",
    "end": "2203440"
  },
  {
    "text": "do much yeah no you we we haven't touched it at all um it's pretty good and granted we",
    "start": "2203440",
    "end": "2208960"
  },
  {
    "text": "haven't gotten super complex in our queries but it's it's pretty smart to know you know obviously what to resolve",
    "start": "2208960",
    "end": "2215040"
  },
  {
    "text": "when and how apollo is going to start opening up more utilities in order to give hints to the great planner i'm like",
    "start": "2215040",
    "end": "2221040"
  },
  {
    "text": "you know i want you to resolve this first or or this or that um but no for the most part we haven't had to touch it",
    "start": "2221040",
    "end": "2226079"
  },
  {
    "text": "at all it's also a great tool for you to actually see how it's been resolved and the way you can optimize where your code",
    "start": "2226079",
    "end": "2233200"
  },
  {
    "text": "is lacking actually because you know the query is based on the code on your",
    "start": "2233200",
    "end": "2238640"
  },
  {
    "text": "resolvers so it's good picture of where your code is and can you optimize it actually starting with your code",
    "start": "2238640",
    "end": "2245119"
  },
  {
    "text": "and then let graphql do the rest optimizations that includes like call paths as well as",
    "start": "2245119",
    "end": "2251680"
  },
  {
    "text": "timing yeah apple studio shows you actually",
    "start": "2251680",
    "end": "2257920"
  },
  {
    "text": "yeah how long yeah we're using studios somebody asked that in the chat",
    "start": "2257920",
    "end": "2262960"
  },
  {
    "text": "great okay i think we should go join the hallway chat and continue the discussion thanks again for this i think it's",
    "start": "2262960",
    "end": "2269599"
  },
  {
    "text": "important talk we're all dealing with service sprawl and this is a really interesting approach",
    "start": "2269599",
    "end": "2275359"
  },
  {
    "text": "thanks again thank you thank you everyone",
    "start": "2275359",
    "end": "2280040"
  },
  {
    "text": "[Music]",
    "start": "2281960",
    "end": "2287409"
  },
  {
    "text": "you",
    "start": "2289440",
    "end": "2291520"
  }
]