[
  {
    "text": "as lar said uh an epic battle is coming and here's what we're going to to be",
    "start": "8519",
    "end": "13880"
  },
  {
    "text": "talking about so well types have been with Scala for 10 years just as long as",
    "start": "13880",
    "end": "19720"
  },
  {
    "text": "Scala exists and they have been successfully used to meta program Scala well just writing normals normal type",
    "start": "19720",
    "end": "26039"
  },
  {
    "text": "annotations can be thought of as meta programming and yeah this is this is the tradition and macro is the new Contender",
    "start": "26039",
    "end": "33239"
  },
  {
    "text": "with macros we can do a lot of compile time stuff uh and people debate on",
    "start": "33239",
    "end": "38600"
  },
  {
    "text": "Twitter on IRC I I'm actually subscribed to this hash Scala and hash shapeless and hash Scala zc thing and my my bot it",
    "start": "38600",
    "end": "46120"
  },
  {
    "text": "tells me every time when macro gets gets no uh well mentioned this is quite fun",
    "start": "46120",
    "end": "51360"
  },
  {
    "text": "so now we're going to solve this dispute one once and for all so let's yeah no more Flames sorry guys so um how we're",
    "start": "51360",
    "end": "60079"
  },
  {
    "text": "going to do that actually it's uh it's going to be in more or less structured fashion so following following my talk",
    "start": "60079",
    "end": "66400"
  },
  {
    "text": "at SC exchange what macros good for we will rank uh the competitors according to their performance in in three",
    "start": "66400",
    "end": "72640"
  },
  {
    "text": "disciplines well code generation uh static checks and dsls so all right let",
    "start": "72640",
    "end": "78840"
  },
  {
    "text": "the battle begin uh so starting with code generation actually every language",
    "start": "78840",
    "end": "84040"
  },
  {
    "text": "ecosystem has it and uh yeah I I would even dare to say that every language has",
    "start": "84040",
    "end": "90240"
  },
  {
    "text": "some some limit to their well to to their abstractions and uh Beyond this",
    "start": "90240",
    "end": "96320"
  },
  {
    "text": "this limit you actually need well to do code generation and even even hcll even",
    "start": "96320",
    "end": "101360"
  },
  {
    "text": "in hcll there's a lot of use cases that uh people solve with meta programming say they generate lenses uh there's the",
    "start": "101360",
    "end": "109000"
  },
  {
    "text": "whole web framework that's quite centered around the idea of uh compil time meta programming with template",
    "start": "109000",
    "end": "114719"
  },
  {
    "text": "hascal and well you know even hcal so it's it's not like we're doing something really wrong",
    "start": "114719",
    "end": "120399"
  },
  {
    "text": "so how how do we do code generation what immediately comes to mind is texal code",
    "start": "120399",
    "end": "126240"
  },
  {
    "text": "generation some some stuff like this where we process one file and another file and another file and then it do",
    "start": "126240",
    "end": "133200"
  },
  {
    "text": "some stuff well of course I I couldn't uh I couldn't help myself but uh to",
    "start": "133200",
    "end": "139560"
  },
  {
    "text": "mention uh the shortcomings of textual code Generation Well obviously when you manipulate strings uh things are not",
    "start": "139560",
    "end": "146280"
  },
  {
    "text": "funny this closing parenthesis this commas quotes whatever it's quite easy",
    "start": "146280",
    "end": "152560"
  },
  {
    "text": "to to mess up and secondly code generators they have little knowledge about the structure of the pro of the",
    "start": "152560",
    "end": "158319"
  },
  {
    "text": "program they they're compiling about the types about well declared classes and things like that and finally well as",
    "start": "158319",
    "end": "165800"
  },
  {
    "text": "we've seen on this diagram on this very funny diagram this has to be hooked up into the build process and this can be",
    "start": "165800",
    "end": "172280"
  },
  {
    "text": "either easy or quite da in task so how can we remedy this with with a",
    "start": "172280",
    "end": "180000"
  },
  {
    "text": "Hightech solution well first of all types uh scala's type system is T in complete and it's t in complete in",
    "start": "180000",
    "end": "186560"
  },
  {
    "text": "multiple and sometimes disturbing ways so we we can do we can do everything that that we want and this this in",
    "start": "186560",
    "end": "194000"
  },
  {
    "text": "itself enables some form of code generation though it can be quite esoteric and well so we we won't cover",
    "start": "194000",
    "end": "200959"
  },
  {
    "text": "that part just yet so what can what can macros offer us well since macros are",
    "start": "200959",
    "end": "206799"
  },
  {
    "text": "just scalar functions that are run at compile time well essentially they can do whatever and they can do this",
    "start": "206799",
    "end": "212040"
  },
  {
    "text": "whatever in a very straightforward fashion you just operate on data structures that provided to you by the",
    "start": "212040",
    "end": "217400"
  },
  {
    "text": "compiler for instance types or trees and well you produce more trees so here's your codenation step and since you are",
    "start": "217400",
    "end": "223360"
  },
  {
    "text": "working with ests it's actually structured it's it's not strings so it's quite hard to well there are uh you",
    "start": "223360",
    "end": "231439"
  },
  {
    "text": "always have ways to mess up but with macros it's it's just harder so uh just",
    "start": "231439",
    "end": "237680"
  },
  {
    "text": "uh the final remark uh all this it's not some theoretical stuff it actually works",
    "start": "237680",
    "end": "243920"
  },
  {
    "text": "and a lot of popular libraries in both well some are used in production some are used in research well they they do",
    "start": "243920",
    "end": "251079"
  },
  {
    "text": "use macros so what's what does this uh bring us to and uh how can types help",
    "start": "251079",
    "end": "258079"
  },
  {
    "text": "how do they fit in this picture oops oh actually yeah I'm I'm going I'm going to",
    "start": "258079",
    "end": "265280"
  },
  {
    "text": "uh to do a little demo and afterwards uh I'll give this clicker to LS So speaking",
    "start": "265280",
    "end": "271720"
  },
  {
    "text": "of of macros and how you do code generation this is uh this is a great example that I took from uh uh Eric's",
    "start": "271720",
    "end": "278039"
  },
  {
    "text": "article to type level and how how they do things in Scala so this particular U",
    "start": "278039",
    "end": "283960"
  },
  {
    "text": "this particular nice function that does some addition and then multiplication it's a great illustration of how a very",
    "start": "283960",
    "end": "291360"
  },
  {
    "text": "high level abstractions work in Scala so with scall it's it's easy to to write pretty code pretty generic polymorphic",
    "start": "291360",
    "end": "299199"
  },
  {
    "text": "code but well unfortunately the the how it compiles down to to something that's",
    "start": "299199",
    "end": "305720"
  },
  {
    "text": "not very efficient in a lot of cases so for instance here we have a lot of object uh Creations that are completely",
    "start": "305720",
    "end": "312360"
  },
  {
    "text": "unnecessary just to wrap some existing functionality and well this this ends up being slow if if you run this millions",
    "start": "312360",
    "end": "318680"
  },
  {
    "text": "and millions of Time Times well apparently there's always a fast and ugly looking solution just like this so",
    "start": "318680",
    "end": "325600"
  },
  {
    "text": "we can just just call these functions times and plus directly but it's not going to be very pretty who wants to do",
    "start": "325600",
    "end": "331440"
  },
  {
    "text": "that but well so previously before macros that was a sad choice that we had to make but with macros in a lot of",
    "start": "331440",
    "end": "337800"
  },
  {
    "text": "situations uh we can actually combine strengths of Both Worlds so with macros",
    "start": "337800",
    "end": "343680"
  },
  {
    "text": "we can have a pretty front end uh but given that plus and multiply are implemented as macros they can generate",
    "start": "343680",
    "end": "350039"
  },
  {
    "text": "exactly this ugly code that we see below uh while defeating the performance problem so now as I promised I'm going",
    "start": "350039",
    "end": "357360"
  },
  {
    "text": "to give this clicker to Lars and let's see what he has to say yeah um so thanks to macros code",
    "start": "357360",
    "end": "365400"
  },
  {
    "text": "generation became accessible and um there's there's anecdotal evidence by",
    "start": "365400",
    "end": "370759"
  },
  {
    "text": "that because everyone in the dog is writing macros so apparently they are somewhat accessible and uh also somewhat",
    "start": "370759",
    "end": "378440"
  },
  {
    "text": "fun uh I guess at least and uh the problem is that macros are essentially",
    "start": "378440",
    "end": "383720"
  },
  {
    "text": "Opa to humans so if you really want to understand what's going on in macro you basically have to look at the SCE code",
    "start": "383720",
    "end": "389919"
  },
  {
    "text": "of this of its implementation because as as Eugene already said you can do pretty much anything in the macro and um it can",
    "start": "389919",
    "end": "397680"
  },
  {
    "text": "be kind of hard if you have just if something looks like a normal function call I mean that that's that's good for users but um it looks like a normal",
    "start": "397680",
    "end": "404280"
  },
  {
    "text": "function call so you sometimes don't expect something interesting going on there and then you look at it as macro",
    "start": "404280",
    "end": "409360"
  },
  {
    "text": "it's doing all sorts of Contraptions to to do something um so this is uh this is",
    "start": "409360",
    "end": "415000"
  },
  {
    "text": "unfortunate but uh luckily we can uh combine macros with uh with with strong types to alleviate",
    "start": "415000",
    "end": "422680"
  },
  {
    "text": "these problems um here's an example for that another use case uh so we've already",
    "start": "422680",
    "end": "428400"
  },
  {
    "text": "heard about it today materialization um so what's actually materialization um what we want to have",
    "start": "428400",
    "end": "436360"
  },
  {
    "text": "are uh default implementations for some very common type classes for example a semi group uh which performs some point",
    "start": "436360",
    "end": "442960"
  },
  {
    "text": "by addition so if you have a point class with two elements you want to do if you want an addition you want to add both uh",
    "start": "442960",
    "end": "449639"
  },
  {
    "text": "and both y's uh and for example ordering so you just pick the lexical graphic ordering or binary serialization du",
    "start": "449639",
    "end": "456759"
  },
  {
    "text": "serialization but the thing is you don't want to um write that all over again",
    "start": "456759",
    "end": "462000"
  },
  {
    "text": "because it's pretty mechanic I mean you all know exactly how to implement a semigroup for a case class where all the elements are semigroups uh but it's very",
    "start": "462000",
    "end": "469120"
  },
  {
    "text": "repetitive and you usually copy paste that and that introduces bugs um so you",
    "start": "469120",
    "end": "474159"
  },
  {
    "text": "have three elements hence three times the bugs um yeah and we we really don't want want to do that so um Scala C",
    "start": "474159",
    "end": "482560"
  },
  {
    "text": "already uh synthesizes uh some of that boiler plate for us if you put a case in front of your class keyword and then you",
    "start": "482560",
    "end": "488639"
  },
  {
    "text": "get for example equals or two string for free and those are also completely mechanical implementations and uh yeah",
    "start": "488639",
    "end": "495080"
  },
  {
    "text": "case classes are pretty common in in code bases so that's actually something which is being used uh by",
    "start": "495080",
    "end": "502319"
  },
  {
    "text": "programmers the problem here is that uh this the synthesization of equals and two string uh and and other methods like",
    "start": "502319",
    "end": "508840"
  },
  {
    "text": "hash code and stuff uh this is not extensible so if you want to generate more than that you would actually need",
    "start": "508840",
    "end": "514120"
  },
  {
    "text": "to hack the compiler or write a compiler Plugin or something like that and you don't want to do that uh I mean we are already uh talking about type classes",
    "start": "514120",
    "end": "521000"
  },
  {
    "text": "and the whole idea of type classes is that it's extensible so you can just add instances or type classes at any point",
    "start": "521000",
    "end": "526640"
  },
  {
    "text": "in your program and and it should just work and this is not actually what what what we can do with the with with this",
    "start": "526640",
    "end": "533600"
  },
  {
    "text": "mechanism I mean we can't just say I'll add this compiler plugin to generate that stuff um so the solution here is uh",
    "start": "533600",
    "end": "540839"
  },
  {
    "text": "to use a materialization mechanism which is itself based on uh on type classes so you have a type class called type class",
    "start": "540839",
    "end": "547760"
  },
  {
    "text": "and yes this is actually a type class in uh in in shapeless um which basically describes how to derive those uh",
    "start": "547760",
    "end": "554920"
  },
  {
    "text": "instances and this is Implement these are implemented in plain Scala and then it those are getting picked up by an",
    "start": "554920",
    "end": "561440"
  },
  {
    "text": "implicit macro and it kind of puts these together in certain ways and then you",
    "start": "561440",
    "end": "567120"
  },
  {
    "text": "get your instance um so why does it actually work you know",
    "start": "567120",
    "end": "573399"
  },
  {
    "text": "um like in languages like hle type classes and instances are different syntactic categories you have uh you",
    "start": "573399",
    "end": "578800"
  },
  {
    "text": "have a keyword class and your keyword instance and it's uh it has a special case in the in type inference in Scala",
    "start": "578800",
    "end": "586480"
  },
  {
    "text": "on the other hand typ class are just first class traits and instance are first class Valu so you can do pretty",
    "start": "586480",
    "end": "592600"
  },
  {
    "text": "much anything what the language allows you to do um so for example for traits you can for for type classes you can Ed",
    "start": "592600",
    "end": "599399"
  },
  {
    "text": "other traits into it for example if you want to embed the laws of the type class in there you can do that or for",
    "start": "599399",
    "end": "604880"
  },
  {
    "text": "instances you can obviously use macros to derive them so uh we have the full power of the language at our",
    "start": "604880",
    "end": "611920"
  },
  {
    "text": "fingertips um so so what does it actually look like so this is not actually the code in shapeless but it's",
    "start": "611920",
    "end": "618200"
  },
  {
    "text": "similar so we have uh you have you have a macro and it's just look have a look at the return type you have a c of T and",
    "start": "618200",
    "end": "625200"
  },
  {
    "text": "so what is the c c is actually some type class and T is any type and this is",
    "start": "625200",
    "end": "631200"
  },
  {
    "text": "actually what's going on here I mean this is a macro which is which is has a potential to generate arbitrary",
    "start": "631200",
    "end": "637639"
  },
  {
    "text": "instances for not all types but a certain subtype of uh subset of case",
    "start": "637639",
    "end": "643040"
  },
  {
    "text": "classes and um it requires this this type class annotation here to make sure",
    "start": "643040",
    "end": "648519"
  },
  {
    "text": "that it's actually uh that we can actually derive something for it um and yeah that's that's implemented with with",
    "start": "648519",
    "end": "654440"
  },
  {
    "text": "a macro yeah so um as I already said it's",
    "start": "654440",
    "end": "660639"
  },
  {
    "text": "it's it has been first introduced in shapeless and it closely follows uh what What's possible in has by writing",
    "start": "660639",
    "end": "667120"
  },
  {
    "text": "deriving EQ or deriving show or something like that the mechanisms are pretty similar and um uh the advantage",
    "start": "667120",
    "end": "675000"
  },
  {
    "text": "here is that this mechanism is actually extensible without modifying the macro so if you want if if you're Library also",
    "start": "675000",
    "end": "680920"
  },
  {
    "text": "and you read an awesome type class and want to have um uh instances for generated you just uh Implement ways how",
    "start": "680920",
    "end": "687360"
  },
  {
    "text": "to combine instances in in certain ways and then you can just import it and this macro will pick it up and and produce uh",
    "start": "687360",
    "end": "694200"
  },
  {
    "text": "instances for you aesome type class for you so there are obviously downsides",
    "start": "694200",
    "end": "700320"
  },
  {
    "text": "here um compar compare these two variants um this is this is what I've",
    "start": "700320",
    "end": "705440"
  },
  {
    "text": "shown you in in the on the earlier slide and this is with this constraint here removed and um the the upper one is bad",
    "start": "705440",
    "end": "712839"
  },
  {
    "text": "because this actually is completely unconstrained so this from just by looking at the type it would look like",
    "start": "712839",
    "end": "719800"
  },
  {
    "text": "this is able to produce almost anything for example an implicit list of int but this obviously makes no sense I mean you",
    "start": "719800",
    "end": "725680"
  },
  {
    "text": "this this macro is not is not able to produce a list of in for you uh it is able to produce uh like uh for example",
    "start": "725680",
    "end": "733519"
  },
  {
    "text": "an ordering for point2d or something like that for you but not some concrete values uh so this should be uh uh kept",
    "start": "733519",
    "end": "742079"
  },
  {
    "text": "in mind um now here's here's the bottom line um Our advice is um macros are",
    "start": "742079",
    "end": "748600"
  },
  {
    "text": "great but are essentially ope to humans um so what you should do is you should try to document what's going on the",
    "start": "748600",
    "end": "755000"
  },
  {
    "text": "macro using uh types and type classes and and other techniques really help here so you should try to constrain as",
    "start": "755000",
    "end": "762360"
  },
  {
    "text": "much as possible so that a human user can actually have a look at the type signature and make sense of what the",
    "start": "762360",
    "end": "767880"
  },
  {
    "text": "macro does and doesn't have to look too closely at the implementation of what's going on um yeah and and only the Cod",
    "start": "767880",
    "end": "775519"
  },
  {
    "text": "should only apply to the moving part so if if you can put something in in regular Scala in plain Scala you should",
    "start": "775519",
    "end": "781360"
  },
  {
    "text": "do it uh even if it incurs a little bit of more little bit more overhead uh boiler plate but uh you get more",
    "start": "781360",
    "end": "788600"
  },
  {
    "text": "predictability out of it so that's that's a plus um one point which is still open is that we don't have best",
    "start": "788600",
    "end": "794920"
  },
  {
    "text": "practices on documentation and testing yet so basically what we have to do is we have to write unit tests for uh our",
    "start": "794920",
    "end": "800959"
  },
  {
    "text": "macros for example this uh for for this year so we have just to plug in multiple different case classes in here and test",
    "start": "800959",
    "end": "807920"
  },
  {
    "text": "whether actually something sensible comes out of that and the same goes for documentation we have to uh be pretty",
    "start": "807920",
    "end": "815199"
  },
  {
    "text": "specific about what's going on and we uh as a community need to uh elaborate a",
    "start": "815199",
    "end": "820720"
  },
  {
    "text": "bit on on what we expect from macro documentation and macro",
    "start": "820720",
    "end": "825800"
  },
  {
    "text": "testing okay so that's the first discipline and here's the second one static checks and we have seen that",
    "start": "826199",
    "end": "833519"
  },
  {
    "text": "phrase today already in a slightly different phrasing",
    "start": "833519",
    "end": "839399"
  },
  {
    "text": "and uh the really important uh sentence in here is the proving the absence of certain program behaviors and there's",
    "start": "839399",
    "end": "845519"
  },
  {
    "text": "another quote I don't know from Richard was but it said something like type systems are the most uh most used kind",
    "start": "845519",
    "end": "853759"
  },
  {
    "text": "of formula verification by two orders of magnitude or something like that was it Pon Jones I'm not sure about that anyway",
    "start": "853759",
    "end": "859839"
  },
  {
    "text": "so type system allow you to prove the absence of certain program behaviors so a certain class of Errors can't even",
    "start": "859839",
    "end": "866279"
  },
  {
    "text": "occur and that's what that's what static type systems are out and as we've already heard in the first talk today uh",
    "start": "866279",
    "end": "873279"
  },
  {
    "text": "Scala has a sophisticated type system with uh multiple interesting features here and there are at least two touring",
    "start": "873279",
    "end": "879560"
  },
  {
    "text": "machines uh lying in there um so we should uh leverage that and we can do",
    "start": "879560",
    "end": "885920"
  },
  {
    "text": "type computations with it um the mechanism we are choosing here for this talk are implicits and type computation",
    "start": "885920",
    "end": "892800"
  },
  {
    "text": "using implicits can solve quite a number of interesting problems for example uh higher order unification does anybody no",
    "start": "892800",
    "end": "899240"
  },
  {
    "text": "272 the ticket so it's it's a very long-standing",
    "start": "899240",
    "end": "904320"
  },
  {
    "text": "ticket which basically says if you have a function which operates on functors for example so it expects a type",
    "start": "904320",
    "end": "910360"
  },
  {
    "text": "Constructor with just one type argument but you put an either or a validation or something with into it with two type",
    "start": "910360",
    "end": "916360"
  },
  {
    "text": "arguments the scalar compiler cannot make heads or tails of it you have a type Constructor with one argument here and with two type with two type",
    "start": "916360",
    "end": "922199"
  },
  {
    "text": "arguments there and it's just like it it can't do that um there's a trick called unapply um which is employed heavily in",
    "start": "922199",
    "end": "929680"
  },
  {
    "text": "in Scala set which uses implicit lookup to alleviate that problem um also",
    "start": "929680",
    "end": "935279"
  },
  {
    "text": "implicits can uh enable generate computations uh on on on tles so on",
    "start": "935279",
    "end": "941440"
  },
  {
    "text": "lists for example everybody takes a reverse function for granted I mean that's sort of the point of list that",
    "start": "941440",
    "end": "946800"
  },
  {
    "text": "you can also reverse them and have all sorts of operation but uh imagine I tell you right give me give me a generic",
    "start": "946800",
    "end": "952000"
  },
  {
    "text": "function which reverses any endle uh yeah that doesn't exist uh and with with",
    "start": "952000",
    "end": "957160"
  },
  {
    "text": "implicits you can do all those of of computations in that direction uh also you can have extensible records um or or",
    "start": "957160",
    "end": "965560"
  },
  {
    "text": "statically size check Collections and um yeah there's a",
    "start": "965560",
    "end": "970759"
  },
  {
    "text": "library which makes all that accessible and it's it's it's called shapeless and shapeless is really like Enterprise",
    "start": "970759",
    "end": "977120"
  },
  {
    "text": "grade type computation so it's it it contains pretty much everything you will uh ever need and um I think Miles once",
    "start": "977120",
    "end": "984480"
  },
  {
    "text": "said that he writes the boiler plate so that you don't have to and uh it's uh yeah pretty Enterprise gr um so what",
    "start": "984480",
    "end": "992319"
  },
  {
    "text": "does it look like actually uh let's have a look at the uh sized collections so um what's going on here",
    "start": "992319",
    "end": "999759"
  },
  {
    "text": "basically what you have uh are lists or sequences or whatever but not only it",
    "start": "999759",
    "end": "1006680"
  },
  {
    "text": "not only the type of the list but it has also an annotation and this underscore two is kind of a type level natural",
    "start": "1006680",
    "end": "1013959"
  },
  {
    "text": "number let's let's not uh go into details about uh how how they are encoded but the takeaway here is that",
    "start": "1013959",
    "end": "1019920"
  },
  {
    "text": "the type system actually knows that this list here has two elements and um yeah you can also",
    "start": "1019920",
    "end": "1027839"
  },
  {
    "text": "combine that with with uh you can obviously build a list out of that stuff again and uh it all works pretty",
    "start": "1027839",
    "end": "1035558"
  },
  {
    "text": "well and let's have a quick demo here at this point uh I'm just going to Define",
    "start": "1035559",
    "end": "1041678"
  },
  {
    "text": "that that list here let's say uh any Scala",
    "start": "1041679",
    "end": "1050080"
  },
  {
    "text": "and uh as you can see it has this uh this underscore two here in the type and",
    "start": "1050080",
    "end": "1056760"
  },
  {
    "text": "now we can obviously uh do something like tail uh uh head and here the head",
    "start": "1056760",
    "end": "1064000"
  },
  {
    "text": "function is completely safe because the compiler knows that there are at least that there are exactly two elements in the list so head is completely safe uh",
    "start": "1064000",
    "end": "1070760"
  },
  {
    "text": "on the other hand if you would try to say like headers do tail. tail. head it",
    "start": "1070760",
    "end": "1078120"
  },
  {
    "text": "would tell you that there's something wrong I would say could not find implicit value for blah blah and then",
    "start": "1078120",
    "end": "1083840"
  },
  {
    "text": "you have this less than zero and zero so by taking the tail twice you get a a",
    "start": "1083840",
    "end": "1089919"
  },
  {
    "text": "list with exactly zero elements and if you're trying to take now the head of it you don't have any element left and this",
    "start": "1089919",
    "end": "1095600"
  },
  {
    "text": "is exactly what the what those implicits do here they are trying to uh prove that",
    "start": "1095600",
    "end": "1100880"
  },
  {
    "text": "the element you want to access is actually in the list so this is pretty this is pretty awesome and uh can help",
    "start": "1100880",
    "end": "1106559"
  },
  {
    "text": "you in all sorts of situation where when dealing with uh when dealing with vectors or matrices or or uh yeah uh",
    "start": "1106559",
    "end": "1114919"
  },
  {
    "text": "some data you read from anywhere and to make really make sure that you at any point in time you know what ex what what",
    "start": "1114919",
    "end": "1120720"
  },
  {
    "text": "is in your list so yeah um Computing with implicits",
    "start": "1120720",
    "end": "1127360"
  },
  {
    "text": "uh is sometimes called pran prologue and um this this pran refers to the fact",
    "start": "1127360",
    "end": "1133640"
  },
  {
    "text": "that in in in in implicits you can't do you can't really do backtracking so once you you pick and implicit you can't go",
    "start": "1133640",
    "end": "1139440"
  },
  {
    "text": "back and choose another one uh that's where the PO mans come from so it has less power than prologue um but despite",
    "start": "1139440",
    "end": "1146080"
  },
  {
    "text": "this uh connotation of uh poor mans you can do uh uh pretty impressive",
    "start": "1146080",
    "end": "1152280"
  },
  {
    "text": "things and um who of you knows what um these",
    "start": "1152280",
    "end": "1158640"
  },
  {
    "text": "are yeah so um so uh there's a talk by uh George LF from The scolar Exchange",
    "start": "1158640",
    "end": "1165360"
  },
  {
    "text": "last year and he actually demonstrated that you can solve the of Hanoi in in in scalas type",
    "start": "1165360",
    "end": "1170799"
  },
  {
    "text": "system so it's it's this uh it's this it uses like functions with multiple",
    "start": "1170799",
    "end": "1177880"
  },
  {
    "text": "implicit parameters and and and doing stuff so you can also at some point try to searching for FN hipster Al and and",
    "start": "1177880",
    "end": "1184320"
  },
  {
    "text": "see what you find there so there are quite a number of examples what you can do with with with implicits and I'm not",
    "start": "1184320",
    "end": "1190720"
  },
  {
    "text": "going to show that here because I I don't want my laptop to go burst Up in Flames but you can kind of Imagine",
    "start": "1190720",
    "end": "1196440"
  },
  {
    "text": "what's going on it's it's just like uh Computing what this have to be moved and",
    "start": "1196440",
    "end": "1201720"
  },
  {
    "text": "stuff like that and it takes ages to compile anyway it's just like a proof of concept it it works you can do it if you",
    "start": "1201720",
    "end": "1207360"
  },
  {
    "text": "want to so um let's go back to macros um why",
    "start": "1207360",
    "end": "1212880"
  },
  {
    "text": "why why don't we always want to do it with implicits then um because the problem is that those type computations",
    "start": "1212880",
    "end": "1218600"
  },
  {
    "text": "are very hard to debug once you have a certain amount of complexity and there are a couple of parameters you can give",
    "start": "1218600",
    "end": "1224240"
  },
  {
    "text": "to the scalar compiler like X log implicits or typ of debug or something something like that and then you get",
    "start": "1224240",
    "end": "1229600"
  },
  {
    "text": "either not no output or screen loads of output depending on which option you pass but it's it's usually pretty hard",
    "start": "1229600",
    "end": "1235000"
  },
  {
    "text": "to back that sort of thing and sometimes you even run into Corners where that's just a plain old compiler bug and you",
    "start": "1235000",
    "end": "1240640"
  },
  {
    "text": "can't do anything with it um so and Al already said it it it slows",
    "start": "1240640",
    "end": "1246840"
  },
  {
    "text": "down the compiler so last year at any Scala miles was doing a demonstration uh where he said like where he did some",
    "start": "1246840",
    "end": "1253000"
  },
  {
    "text": "multiplication uh with type level natural numbers and it pretty much worked well until 22 but once you reach",
    "start": "1253000",
    "end": "1258799"
  },
  {
    "text": "23 it like would you would uh see a Slowdown which wasn't which wasn't",
    "start": "1258799",
    "end": "1264000"
  },
  {
    "text": "visible anymore um and also types don't cover everything and sometimes we just need a",
    "start": "1264000",
    "end": "1270320"
  },
  {
    "text": "little bit of more power at least in the type system we have in Scala at the moment um so why not just like throw all",
    "start": "1270320",
    "end": "1278559"
  },
  {
    "text": "types away and uh because macros can just do anything and types have certain shortcomings and um for example you all",
    "start": "1278559",
    "end": "1285799"
  },
  {
    "text": "know this type signature um and I I I assume you all love that type techn and",
    "start": "1285799",
    "end": "1291720"
  },
  {
    "text": "that's terrible I mean who does who understands what's going on I can BL from I mean seriously what is going on",
    "start": "1291720",
    "end": "1297600"
  },
  {
    "text": "uh so we propose this um we just say like oh let's just we we just do our T",
    "start": "1297600",
    "end": "1302760"
  },
  {
    "text": "checking itself and uh we do our implicit look look up itself and now the macro has full control of what is going",
    "start": "1302760",
    "end": "1308440"
  },
  {
    "text": "on and that is way better because now you don't have these complex type comp what's even better is that you know the",
    "start": "1308440",
    "end": "1314799"
  },
  {
    "text": "this thing with G reversible like and can build from it's something that's working around it's in Scala with this use cases and stuff so we actually fix",
    "start": "1314799",
    "end": "1321760"
  },
  {
    "text": "all these problems by writing this as a macro so users they they don't have to to care about this complexities you just",
    "start": "1321760",
    "end": "1327320"
  },
  {
    "text": "write a macro which does all the job for them so they just call map and and don't worry when they see like weird error",
    "start": "1327320",
    "end": "1333840"
  },
  {
    "text": "messages so yeah we definitely recommend that yeah awesome right uh yeah so uh in all seriousness",
    "start": "1333840",
    "end": "1341559"
  },
  {
    "text": "though um there are some reasonable use cases for additional static checks in with using macros and here's another",
    "start": "1341559",
    "end": "1348400"
  },
  {
    "text": "example from Spire again um it's about check arithmetics um and this macro",
    "start": "1348400",
    "end": "1354080"
  },
  {
    "text": "actually checks um where a computation uh produces an overflow at runtime so you",
    "start": "1354080",
    "end": "1361279"
  },
  {
    "text": "can this kind of like a safe wrap around uh around this computation X Plus y less",
    "start": "1361279",
    "end": "1366760"
  },
  {
    "text": "than set and this version of the macro will return a none if it detected an overflow at some point and obviously we",
    "start": "1366760",
    "end": "1372720"
  },
  {
    "text": "could also do that with with a much richer integer type in Scala but then again you would have to do the compu",
    "start": "1372720",
    "end": "1378120"
  },
  {
    "text": "ation of adding type level uh 32bit numbers uh and this would be horribly",
    "start": "1378120",
    "end": "1384640"
  },
  {
    "text": "slow so yeah that's in our opinion a good use case and another one um is for",
    "start": "1384640",
    "end": "1389880"
  },
  {
    "text": "example the W remover by Brian McKenna and um it basically uh it just it boils",
    "start": "1389880",
    "end": "1396559"
  },
  {
    "text": "down to that you have you have a you have a macro which takes some block and then you can wrap something into that",
    "start": "1396559",
    "end": "1403440"
  },
  {
    "text": "block and it will tell you if you're doing something completely unreasonable like null uh or I mean you can all",
    "start": "1403440",
    "end": "1410000"
  },
  {
    "text": "imagine that there are some stuff which can be prevented like mutating Global state or or something like that so um",
    "start": "1410000",
    "end": "1417279"
  },
  {
    "text": "here's our bottom line again um for static checks use types whenever practical and um macros instead if",
    "start": "1417279",
    "end": "1425799"
  },
  {
    "text": "impossible or heavyweight or it would just take too long to compute or something and um try to document and",
    "start": "1425799",
    "end": "1432320"
  },
  {
    "text": "encapsulate the magic using types just like in the last discipline um if there's a way to constrain your your",
    "start": "1432320",
    "end": "1437960"
  },
  {
    "text": "macro using type classes or or something else then please do it and there is no law uh preventing you from not using",
    "start": "1437960",
    "end": "1444400"
  },
  {
    "text": "macros and types together all right uh so just uh just",
    "start": "1444400",
    "end": "1449840"
  },
  {
    "text": "the final third part of our talk and it's going to be about DLS so well",
    "start": "1449840",
    "end": "1456360"
  },
  {
    "text": "dsls according to this uh well-known book uh they can be classified in a lot",
    "start": "1456360",
    "end": "1462279"
  },
  {
    "text": "of ways so this particular class classification it says that dsls can be either embedded into the Lang language",
    "start": "1462279",
    "end": "1468080"
  },
  {
    "text": "or external to the language plus we have some weird stuff like graphic dsls right so it's it's a lot of ground to cover in",
    "start": "1468080",
    "end": "1474240"
  },
  {
    "text": "this uh in this talk so we will focus on just one single use case of embedded dsls and this use case we will uh we",
    "start": "1474240",
    "end": "1481720"
  },
  {
    "text": "will study an example from Sleek so slick we uh it's essentially well the",
    "start": "1481720",
    "end": "1488080"
  },
  {
    "text": "part that we're interested in today is is an embedded DSL for data access and",
    "start": "1488080",
    "end": "1493360"
  },
  {
    "text": "well so you can you can write your SQL queries you can write your database code inq equal and uh what slick does it",
    "start": "1493360",
    "end": "1500279"
  },
  {
    "text": "enables you doing that in normal Scala code so these things are just uh just",
    "start": "1500279",
    "end": "1505600"
  },
  {
    "text": "made equivalent so how do we do that actually and uh there's there's multiple ways and we have exactly three ways",
    "start": "1505600",
    "end": "1512960"
  },
  {
    "text": "which is really good for our presentation that's why I'm so excited to take this as a case study so well",
    "start": "1512960",
    "end": "1518799"
  },
  {
    "text": "first of all we have lifted embedding uh that's based solely on and uh right uh",
    "start": "1518799",
    "end": "1525760"
  },
  {
    "text": "then we have direct embedding something experimental that actually was the direct motivator for the Scala macros",
    "start": "1525760",
    "end": "1532279"
  },
  {
    "text": "project believe it or not and finally we have a much more later development uh",
    "start": "1532279",
    "end": "1537799"
  },
  {
    "text": "from my colleagues from a pfl Amir and vo who who did this so-called Shadow embedding which combines both approaches",
    "start": "1537799",
    "end": "1544919"
  },
  {
    "text": "and we'll see uh how how it all goes so well first of all let's let's take a look at lifted embedden so with lifted",
    "start": "1544919",
    "end": "1551600"
  },
  {
    "text": "embeding uh you essentially encode the domain things for instance the fact that",
    "start": "1551600",
    "end": "1557440"
  },
  {
    "text": "you have columns so the fact that tables are essentially well a collection of columns in in some sense you uh you",
    "start": "1557440",
    "end": "1564159"
  },
  {
    "text": "express this in an extra layer of types and it's all quite well and as as Lars mentioned the scalas type system is very",
    "start": "1564159",
    "end": "1571200"
  },
  {
    "text": "very rich and you you can State amazingly precise facts about this stuff uh but well unfortunately at times this",
    "start": "1571200",
    "end": "1578240"
  },
  {
    "text": "gets heavyweight so if we take a look at this example query and uh if we try to",
    "start": "1578240",
    "end": "1583399"
  },
  {
    "text": "to print out um the types that that we use you do this using minus X print",
    "start": "1583399",
    "end": "1588520"
  },
  {
    "text": "colon type or minus X print minus types of course uh then you'll discover that uh the types here are not exactly uh",
    "start": "1588520",
    "end": "1596120"
  },
  {
    "text": "what what you think probably so we we don't operate with normal values we operate them with values lifted uh well",
    "start": "1596120",
    "end": "1603000"
  },
  {
    "text": "one one level up essentially so here's the the type layer and uh while this",
    "start": "1603000",
    "end": "1608640"
  },
  {
    "text": "this in itself is not a disadvantage or what not uh it it contributes to to well",
    "start": "1608640",
    "end": "1615159"
  },
  {
    "text": "to This heavyweight feeling that that we get from from from uh from looking at say this this definition and uh when it",
    "start": "1615159",
    "end": "1622279"
  },
  {
    "text": "when it really blows up and this this is something that lar uh uh uh very quickly mentioned is uh at error messages so",
    "start": "1622279",
    "end": "1631039"
  },
  {
    "text": "sometimes if you do something really really unexpected then what happens you get errors like this and you of course",
    "start": "1631039",
    "end": "1637399"
  },
  {
    "text": "cannot make any sense of it so what what's going on here I I I didn't realize this myself when air did a",
    "start": "1637399",
    "end": "1643240"
  },
  {
    "text": "presentation of his master thesis in our lab and and then commented that this all",
    "start": "1643240",
    "end": "1649200"
  },
  {
    "text": "this all happens because lifted embedding doesn't support ifs so can you imagine that so try connecting this",
    "start": "1649200",
    "end": "1656000"
  },
  {
    "text": "facts so yeah this is uh this is just an overall feeling of of lifted embedding",
    "start": "1656000",
    "end": "1661440"
  },
  {
    "text": "it works quite well and it has uh well it has a huge history that's that goes",
    "start": "1661440",
    "end": "1666480"
  },
  {
    "text": "way back to scull query Stefan's original project that became slick but",
    "start": "1666480",
    "end": "1671559"
  },
  {
    "text": "well there there are some downsides to that so enter macros so what what macros can uh can do for us here well with",
    "start": "1671559",
    "end": "1678640"
  },
  {
    "text": "macros we don't need uh extra Machinery to virtualize scolar code I mean uh take queries and transform them to SQL uh",
    "start": "1678640",
    "end": "1686320"
  },
  {
    "text": "with macros we just automatically virtualize everything that's an argument of a macro and therefore it all it all",
    "start": "1686320",
    "end": "1692559"
  },
  {
    "text": "happens naturally and uh well all these types they're just normal types if you operate on integers and on strings here",
    "start": "1692559",
    "end": "1698919"
  },
  {
    "text": "you go you just have ins and strings and therefore well error messages they're really going to make sense but here's",
    "start": "1698919",
    "end": "1705120"
  },
  {
    "text": "another problem and uh this is a this is going to be recurring theme that Dar has",
    "start": "1705120",
    "end": "1710159"
  },
  {
    "text": "has covered uh over and over again in his part uh which is since macros can do",
    "start": "1710159",
    "end": "1715960"
  },
  {
    "text": "whatever uh we have to be really careful to make sure that this whatever is what we need and uh this is this is how this",
    "start": "1715960",
    "end": "1723480"
  },
  {
    "text": "this thing manifests itself in direct embedding and well so so here we go imagine that we call to double which is",
    "start": "1723480",
    "end": "1729760"
  },
  {
    "text": "a function that's uh uh apparently unsupported by slick so this is going to compile just fine and it will explode at",
    "start": "1729760",
    "end": "1737480"
  },
  {
    "text": "runtime uh because macro is not smart enough to to check uh that two double is actually not supported and here's what",
    "start": "1737480",
    "end": "1744240"
  },
  {
    "text": "you get when you try to reimplement type systems so when you try to reinvent something here's what we get and we've",
    "start": "1744240",
    "end": "1750240"
  },
  {
    "text": "we've already seen that today and this is what what we would like to to avoid so how do we do that actually this is",
    "start": "1750240",
    "end": "1757279"
  },
  {
    "text": "why I'm super happy to to demonstrate this use case uh in this talk because it it it's so it suits the theme perfectly",
    "start": "1757279",
    "end": "1765440"
  },
  {
    "text": "so we can combine strengths of both macros and types into an ultimate solution so here we have this thing",
    "start": "1765440",
    "end": "1771120"
  },
  {
    "text": "Shadow embedding developed by by my colleagues atfl and it it's based on this Yin Yan",
    "start": "1771120",
    "end": "1777440"
  },
  {
    "text": "uh DSL framework uh that's uh that's itself",
    "start": "1777440",
    "end": "1782799"
  },
  {
    "text": "based on Macros and therefore we get all this uh lightweight uh uh well we get",
    "start": "1782799",
    "end": "1788679"
  },
  {
    "text": "the overall lightweight feeling from this solution because well we're using normal types uh but on the other hand uh",
    "start": "1788679",
    "end": "1796080"
  },
  {
    "text": "we bring types into to the mix so thanks to yinan uh DSL author uh can uh well",
    "start": "1796080",
    "end": "1803440"
  },
  {
    "text": "can precisely specify uh What uh uh what functions what classes are allowed in",
    "start": "1803440",
    "end": "1809279"
  },
  {
    "text": "the DSL uh with the well normal means that are available in Scala with traits",
    "start": "1809279",
    "end": "1815120"
  },
  {
    "text": "with methods and stuff like this so here we we can uh I omit the details actually because we don't have that much time but",
    "start": "1815120",
    "end": "1821600"
  },
  {
    "text": "here we can exclude to double uh from methods on INT in this particular DSL",
    "start": "1821600",
    "end": "1826919"
  },
  {
    "text": "and well here we go we get the best of of Two Worlds we get a lightweight solution uh that has really",
    "start": "1826919",
    "end": "1833559"
  },
  {
    "text": "comprehensive and comprehensible error messages so it's all fine but uh there is one caveat which is an implementation",
    "start": "1833559",
    "end": "1840799"
  },
  {
    "text": "detail essentially of of our macro system uh Al beit an unfortunate one so",
    "start": "1840799",
    "end": "1846559"
  },
  {
    "text": "the thing is that that macros they don't see ests uh this abstract syntax trees",
    "start": "1846559",
    "end": "1852279"
  },
  {
    "text": "of the entire program they can only look into the structure of their arguments and therefore if you try to to define a",
    "start": "1852279",
    "end": "1857720"
  },
  {
    "text": "function somewhere else and then you use it inside inside the Sleek block well nothing good will happen so that's an",
    "start": "1857720",
    "end": "1864840"
  },
  {
    "text": "unfortunate limitation uh of the current imple of the current micro",
    "start": "1864840",
    "end": "1870279"
  },
  {
    "text": "engine uh that you have to keep in mind so anyway uh just to sum it up our advice here about building dsls is that",
    "start": "1870279",
    "end": "1878000"
  },
  {
    "text": "well types so they provide a really wellworking solution uh that can do a lot and it can do a lot in the DSL",
    "start": "1878000",
    "end": "1885000"
  },
  {
    "text": "Department however macros have proven the elves as a good way to to make this",
    "start": "1885000",
    "end": "1890720"
  },
  {
    "text": "uh to to get a lot of traditional ceremony away uh which makes life easier both for DSL authors that is you have to",
    "start": "1890720",
    "end": "1898960"
  },
  {
    "text": "write less boilerplate to design your dsls and for DSL users because well you get comprehensive comprehensible error",
    "start": "1898960",
    "end": "1905279"
  },
  {
    "text": "messages and this is quite nice but just uh just keep that in mind uh that with",
    "start": "1905279",
    "end": "1911639"
  },
  {
    "text": "macros there are some problems and uh but actually these problems are not fundamental to the whole whole concept",
    "start": "1911639",
    "end": "1917639"
  },
  {
    "text": "of compile time meta programming and uh well actually we're working on this and this is something that uh hopefully I'll",
    "start": "1917639",
    "end": "1924399"
  },
  {
    "text": "get to present in tomorrow uh during the UN conference so anyway just uh just to sum",
    "start": "1924399",
    "end": "1931559"
  },
  {
    "text": "it up again and again if you go with the compile time meta programming route with",
    "start": "1931559",
    "end": "1936840"
  },
  {
    "text": "macros please try to document your intent at any point so types are amazing",
    "start": "1936840",
    "end": "1943000"
  },
  {
    "text": "at documentation at providing static metadata that the compiler can then validate that your users can eyeball and",
    "start": "1943000",
    "end": "1949600"
  },
  {
    "text": "make sense of so try to uh write type ascriptions as much as possible if",
    "start": "1949600",
    "end": "1956159"
  },
  {
    "text": "you're using macros all right this uh brings us to the conclusion of our talk",
    "start": "1956159",
    "end": "1962639"
  },
  {
    "text": "and uh just uh just to sum it up uh what we've heard today so well types uh",
    "start": "1962639",
    "end": "1970760"
  },
  {
    "text": "they're declarative uh but the they they get this declaratives at the expense of",
    "start": "1970760",
    "end": "1976679"
  },
  {
    "text": "some power loss and sometimes you do need this extra power uh to pull off",
    "start": "1976679",
    "end": "1982000"
  },
  {
    "text": "some some really complex stuff and here you go since scal out to 10 you have macros and macros are amazing they give",
    "start": "1982000",
    "end": "1988360"
  },
  {
    "text": "you as much power as you need and even more and so you can literally reshape the language to your will and that's",
    "start": "1988360",
    "end": "1995159"
  },
  {
    "text": "quite nice but unfortunately this comes at the price of being Opa and being",
    "start": "1995159",
    "end": "2000639"
  },
  {
    "text": "volatile in a sense so this is the initial dilemma that uh well gave rise",
    "start": "2000639",
    "end": "2006519"
  },
  {
    "text": "to this to and uh here's where we started so what's what's the bottom line well the bottom",
    "start": "2006519",
    "end": "2012440"
  },
  {
    "text": "line is as we've seen both macros and types they have their strong points and",
    "start": "2012440",
    "end": "2017480"
  },
  {
    "text": "you as uh well uh program designers you you have to be aware of them and you",
    "start": "2017480",
    "end": "2022880"
  },
  {
    "text": "have to make uh same choices so essentially Embrace reason and uh use whatever works best for you whatever is",
    "start": "2022880",
    "end": "2029039"
  },
  {
    "text": "simpler right uh but also another takeaway uh from this talk is that it's",
    "start": "2029039",
    "end": "2035120"
  },
  {
    "text": "possible to combine this uh this declaratives and this",
    "start": "2035120",
    "end": "2040519"
  },
  {
    "text": "understandability of types together with raw power of macros to achieve ultimate glory and I think this is quite nice",
    "start": "2040519",
    "end": "2047760"
  },
  {
    "text": "that Scala provides us a way of doing that that our micro system is actually so nicely integrated into the language",
    "start": "2047760",
    "end": "2054398"
  },
  {
    "text": "that it can make use of uh type system in multiple ways I guess this is it and",
    "start": "2054399",
    "end": "2060118"
  },
  {
    "text": "uh thanks a lot we've we a bit early so yeah please ask questions a lot of them",
    "start": "2060119",
    "end": "2065878"
  },
  {
    "text": "thanks",
    "start": "2065879",
    "end": "2068878"
  },
  {
    "text": "well this is actually a fusion reactor so here we have types magnets and here we have a thermonuclear explosion but",
    "start": "2074639",
    "end": "2082200"
  },
  {
    "text": "here it's all taken under control so uh the question was about uh",
    "start": "2082200",
    "end": "2089638"
  },
  {
    "text": "performance implications of uh uh well the choices that you make when you design",
    "start": "2089639",
    "end": "2094960"
  },
  {
    "text": "dsls uh whether you do a purely type based solution or macro based solution well as we've seen before in in",
    "start": "2094960",
    "end": "2103000"
  },
  {
    "text": "the code Generation section uh with macros you essentially can can produce whatever uh uh well you you can decide",
    "start": "2103000",
    "end": "2110040"
  },
  {
    "text": "on the level of code that you produce it can be high level it can be low level uh whatever works best for you so just a an",
    "start": "2110040",
    "end": "2118359"
  },
  {
    "text": "intuition is that with macros uh performance shouldn't be a particular problem uh but uh well type based",
    "start": "2118359",
    "end": "2125359"
  },
  {
    "text": "Solutions uh depend on the implementation strategy that you choose for instance if you if you use a lot of",
    "start": "2125359",
    "end": "2131440"
  },
  {
    "text": "implicits that are then carried to to runtime and you call well methods on those implicits this might might incur",
    "start": "2131440",
    "end": "2138119"
  },
  {
    "text": "some uh performance penalties because well you have to create this instances but on the other hand some type based",
    "start": "2138119",
    "end": "2144640"
  },
  {
    "text": "Solutions uh they're just purely static and that stuff is erased at compile time and at run time you get very fast code",
    "start": "2144640",
    "end": "2151720"
  },
  {
    "text": "so the answer is it depends yeah sorry yeah so another examp example here",
    "start": "2151720",
    "end": "2157200"
  },
  {
    "text": "would be for would be the computations for natural numbers in the type level so",
    "start": "2157200",
    "end": "2162520"
  },
  {
    "text": "um if you have if you would if you write would write it with an with implicits and you",
    "start": "2162520",
    "end": "2168839"
  },
  {
    "text": "have a a trait saying that the type n and the type M together give give give a",
    "start": "2168839",
    "end": "2175720"
  },
  {
    "text": "sum um what happens is that that you actually get a runtime representation of that even if you don't need it so um",
    "start": "2175720",
    "end": "2183240"
  },
  {
    "text": "that's why sometimes uh uh implicits are called evidence because you can actually",
    "start": "2183240",
    "end": "2188920"
  },
  {
    "text": "have you actually have a proof that something holds for example that the reverse of a tle is this other topple so you can actually use this to reverse",
    "start": "2188920",
    "end": "2195359"
  },
  {
    "text": "reverse a tle and uh you will you will get that uh even if you don't need the evidence in the end for example if",
    "start": "2195359",
    "end": "2201200"
  },
  {
    "text": "you're just if you're just witnessing the the the sum of two type level natural numbers you you don't really",
    "start": "2201200",
    "end": "2207000"
  },
  {
    "text": "need something with to do with it in the end um but nevertheless you will get this whole chain of implicits uh uh uh",
    "start": "2207000",
    "end": "2214359"
  },
  {
    "text": "to be to be uh compiled and uh potentially evaluated and yeah obviously you you don't have that problem with",
    "start": "2214359",
    "end": "2220760"
  },
  {
    "text": "with macros so you can uh Elite that whole computation if you want",
    "start": "2220760",
    "end": "2226480"
  },
  {
    "text": "to uh well I guess uh it's too much to",
    "start": "2227680",
    "end": "2233000"
  },
  {
    "text": "to actually sum it up in a couple words so essentially uh we are experimenting with a new micro engine uh that would uh",
    "start": "2233000",
    "end": "2240960"
  },
  {
    "text": "well that would provide more introspective capabilities and uh would fix a number of longstanding problems",
    "start": "2240960",
    "end": "2247319"
  },
  {
    "text": "that are fundamental to the current implementation for instance separate compilation which will be gone but more",
    "start": "2247319",
    "end": "2253240"
  },
  {
    "text": "details really if I get chance to to talk tomorrow I have a whole set of slides that that are going to present",
    "start": "2253240",
    "end": "2260440"
  },
  {
    "text": "something so the question is experience about uh debugging macro code and the",
    "start": "2260440",
    "end": "2265720"
  },
  {
    "text": "short answer is probably uh there's a compiler switch for macro debug and it will dump the code generated by the by",
    "start": "2265720",
    "end": "2272800"
  },
  {
    "text": "the macro for you and in in some cases if you're really doing uh if you really",
    "start": "2272800",
    "end": "2278280"
  },
  {
    "text": "uh want to know where where your code where your generated code wents wrong you just have to what you basically do",
    "start": "2278280",
    "end": "2285119"
  },
  {
    "text": "is you can copy paste it in some way because it's it's pretty printed and put it into extra software and then debug",
    "start": "2285119",
    "end": "2290319"
  },
  {
    "text": "that and um yeah so yeah that's your short answer do you have a longer answer",
    "start": "2290319",
    "end": "2296839"
  },
  {
    "text": "uh well essentially speaking of debugging we have uh two aspects of that the first aspect is how do you debug",
    "start": "2296839",
    "end": "2302680"
  },
  {
    "text": "well the Cod generator logic and the second answer how do you debug generated code so the the first question has an",
    "start": "2302680",
    "end": "2309520"
  },
  {
    "text": "easy answer you just use whatever means of debugging that you have so macros are normal functions that that are executed",
    "start": "2309520",
    "end": "2315800"
  },
  {
    "text": "by the compiler so you fire up the compiler in your debugger or use prints or whatnot and yeah you you you get this",
    "start": "2315800",
    "end": "2323359"
  },
  {
    "text": "and you debug this as a usual jvm program but speaking of generated code yeah this is tough because well no one",
    "start": "2323359",
    "end": "2328720"
  },
  {
    "text": "actually gets to see it and uh well this is also something that we're working on in this bigger project with",
    "start": "2328720",
    "end": "2335680"
  },
  {
    "text": "reengineering of our or micro engine all right but uh you don't see the source code so therefore for",
    "start": "2335680",
    "end": "2342920"
  },
  {
    "text": "instance where do you put breakpoint on and what what what should your ID display so of course it can display jvm",
    "start": "2342920",
    "end": "2350640"
  },
  {
    "text": "bite codes but that that's probably going to be level so yeah when you when you have a",
    "start": "2350640",
    "end": "2356160"
  },
  {
    "text": "macro invocation every in in the in the compiled source code all the generated code will have the same line number and",
    "start": "2356160",
    "end": "2361359"
  },
  {
    "text": "it will just like if you're fired in in a debugger it will just be that one line and this is the macro call and not the",
    "start": "2361359",
    "end": "2366760"
  },
  {
    "text": "expanded code by the macro yeah that's right so please go ahead",
    "start": "2366760",
    "end": "2373838"
  },
  {
    "text": "okay okay so thanks a",
    "start": "2376000",
    "end": "2380960"
  },
  {
    "text": "lot",
    "start": "2389880",
    "end": "2392880"
  }
]