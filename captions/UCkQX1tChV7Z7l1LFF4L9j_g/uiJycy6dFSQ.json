[
  {
    "start": "0",
    "end": "157000"
  },
  {
    "text": "[Music]",
    "start": "650",
    "end": "16520"
  },
  {
    "text": "hello I'm Paul Phillips I gave a variation of this talk last night and",
    "start": "16520",
    "end": "23220"
  },
  {
    "text": "the audience looked like like shell-shocked genuinely they looked like",
    "start": "23220",
    "end": "28320"
  },
  {
    "text": "they've been through a war and I realized so I think I'm going to tone it down tonight",
    "start": "28320",
    "end": "33410"
  },
  {
    "text": "yeah no your turn you're all disappointed I think I one of those a",
    "start": "33410",
    "end": "39300"
  },
  {
    "text": "week is probably good you got to come too if I'm going to do back-to-back nights you got to come to the first one if you want the exciting stuff so I'm",
    "start": "39300",
    "end": "45840"
  },
  {
    "text": "going to be all chill tonight but on the other hand I'll probably not actually be able to hold to that but I'll try yeah",
    "start": "45840",
    "end": "54360"
  },
  {
    "text": "so my slides I'll just tell you up front of pretty bad they're all over the place I don't know what's going on we're just going to have to live with a think of it",
    "start": "54360",
    "end": "60239"
  },
  {
    "text": "as one of those nonlinear narratives like Quentin Tarantino movie or something so something suddenly",
    "start": "60239",
    "end": "65549"
  },
  {
    "text": "something happens late this should wait didn't up yeah okay so it's nonlinear but you know so we have this little",
    "start": "65549",
    "end": "72360"
  },
  {
    "text": "stable of maybe ten programming quotes that get recycled indefinitely and this is one of them and but it's good and I'm going to read",
    "start": "72360",
    "end": "79650"
  },
  {
    "text": "it when I'm thinking when I'm working on a problem I never think about beauty I think only how to solve the problem",
    "start": "79650",
    "end": "86130"
  },
  {
    "text": "but when I finished if the solution is not beautiful I know it is wrong this is",
    "start": "86130",
    "end": "93240"
  },
  {
    "text": "always on my mind especially when I see stuff like this at this point I feel",
    "start": "93240",
    "end": "100320"
  },
  {
    "text": "like anybody would know we're doing it wrong but that you know that thought",
    "start": "100320",
    "end": "106020"
  },
  {
    "text": "process has to take place you got to say wait a minute are we doing it wrong well yes you're doing it wrong this",
    "start": "106020",
    "end": "111540"
  },
  {
    "text": "trait you this is pure boilerplate it has no purpose in life except trying to",
    "start": "111540",
    "end": "118049"
  },
  {
    "text": "pass all those type parameters around it is a true monstrosity it has dozens of",
    "start": "118049",
    "end": "123930"
  },
  {
    "text": "buddies spread out throughout the collections it accomplishes essentially nothing it's the the base this is par",
    "start": "123930",
    "end": "132270"
  },
  {
    "text": "seek view like so it was views its views parallel I don't know",
    "start": "132270",
    "end": "138600"
  },
  {
    "text": "it's like a bunch of stuff and then you then you you've got all these variations on the same those are all just trying to",
    "start": "138600",
    "end": "144390"
  },
  {
    "text": "keep track of what the type of this thing is and so that subclasses can figure it out",
    "start": "144390",
    "end": "149400"
  },
  {
    "text": "anyway this is not right this is not beautiful this will never be beautiful and this is impossible to maintain this",
    "start": "149400",
    "end": "155490"
  },
  {
    "text": "is not how you do Butte and so now I'll tell you who I am",
    "start": "155490",
    "end": "161480"
  },
  {
    "start": "157000",
    "end": "157000"
  },
  {
    "text": "um so I guess most of you know me I mean unless you're brand new to Scala but I always have to assume there's somebody",
    "start": "161480",
    "end": "167640"
  },
  {
    "text": "in the room who doesn't know me I wasted about half of my last decade",
    "start": "167640",
    "end": "173910"
  },
  {
    "text": "slightly more on Scala that's a little unfair I didn't wasted I mean I learned",
    "start": "173910",
    "end": "179430"
  },
  {
    "text": "some stuff but in the end it's a failure I had to quit because I can't make Scala do what I want and so I'm going to try",
    "start": "179430",
    "end": "188070"
  },
  {
    "text": "something else but I you know I worked really hard on Scala and I wrote a lot of code a crazy amount of code and I",
    "start": "188070",
    "end": "194459"
  },
  {
    "text": "drew a lot of conclusions which I guess you will hear now but yeah I quit and it",
    "start": "194459",
    "end": "199890"
  },
  {
    "text": "really was a dream job I mean typesafe was like a fantastic place to work and they didn't say I had to do anything terrible and I could you",
    "start": "199890",
    "end": "207239"
  },
  {
    "text": "know basically do what I wanted I quit because I was just Scala is never going to be the language I want and I know you",
    "start": "207239",
    "end": "212940"
  },
  {
    "text": "guys are sitting you're going to wait a minute this is supposed to be the like pro host Scala thing and I'm you know I'm not anti Scala I'm just not exactly",
    "start": "212940",
    "end": "219480"
  },
  {
    "text": "pro sk√•l at least I'm not pro on the inside anymore more of an observer but",
    "start": "219480",
    "end": "225420"
  },
  {
    "text": "this is to show you how why you should care because that bonfire right there is",
    "start": "225420",
    "end": "231120"
  },
  {
    "text": "me and that's that's about a million lines of code on github and that's just",
    "start": "231120",
    "end": "237720"
  },
  {
    "text": "the tip of the iceberg I mean I've written at least like three million lines of Scala code at least it's it's",
    "start": "237720",
    "end": "244709"
  },
  {
    "text": "yeah I should spend a lot more time designing to be honest that's what you should really learn from that but it",
    "start": "244709",
    "end": "252600"
  },
  {
    "text": "does mean that I like every sort of idiosyncratic thing like you know the kind of observation that you have to log",
    "start": "252600",
    "end": "259019"
  },
  {
    "text": "n enormous amount of time to really see I have all those my head so that's like where my my information comes from and",
    "start": "259019",
    "end": "265440"
  },
  {
    "text": "then here's here's my other credential 891 tickets closed mostly those are bugs",
    "start": "265440",
    "end": "272729"
  },
  {
    "text": "fixed 482 tickets tickets opened mostly those are won't fix things that you know",
    "start": "272729",
    "end": "279449"
  },
  {
    "text": "I wanted to do and got won't fixed I don't know about mostly but plenty of them are 150 of them I think or maybe",
    "start": "279449",
    "end": "286080"
  },
  {
    "text": "still open but I've personally discovered in the neighborhood of 500 scala bugs I mean discovered and report in I've",
    "start": "286080",
    "end": "292979"
  },
  {
    "text": "actually stopped reporting them so I've discovered more have you discovered 500 scala bugs I some days I can't believe",
    "start": "292979",
    "end": "299760"
  },
  {
    "text": "the things I just like nobody's ever encountered this before do you guys report bugs I don't know but one way or",
    "start": "299760",
    "end": "305669"
  },
  {
    "text": "another I got 500 on my name and so yeah",
    "start": "305669",
    "end": "311039"
  },
  {
    "text": "anyway the point is that you have to listen to me you don't have a choice it doesn't matter what you think of me I know something it's impossible for me",
    "start": "311039",
    "end": "317940"
  },
  {
    "text": "not to have you know osmotically acquired some knowledge about scala in the course of doing this but yeah I'd",
    "start": "317940",
    "end": "328320"
  },
  {
    "text": "like the live really the difficulty for me here I have no problem speaking my mind as is probably apparent from like",
    "start": "328320",
    "end": "334110"
  },
  {
    "text": "the things I've written online but I don't want to be standing here raggin on Scala all day for both like personal",
    "start": "334110",
    "end": "340620"
  },
  {
    "text": "professional and just like general not being seen as a giant jerk reasons it's very natural and easy for me to do so",
    "start": "340620",
    "end": "347820"
  },
  {
    "text": "but that's not what I want to do and because I did plenty of that last night I'm going to try not to do it too much tonight but you can always prod me with",
    "start": "347820",
    "end": "355349"
  },
  {
    "text": "questions and I'm sure you can get get me going so is Scala too complex this question",
    "start": "355349",
    "end": "364770"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "goes around sometimes you hear this hear that let me simplify yes there's just no",
    "start": "364770",
    "end": "370560"
  },
  {
    "text": "question I think I to me it's like what are you guys talking about I mean you these sort of imaginary",
    "start": "370560",
    "end": "377669"
  },
  {
    "text": "metrics about what complicated means are thrown around not complex you know it",
    "start": "377669",
    "end": "383250"
  },
  {
    "text": "when you see it it's like obscenity and if you program in Scala you know it and",
    "start": "383250",
    "end": "388560"
  },
  {
    "text": "if you try to use Scala in any way that pushes the implementation you really know it and so I mean I don't see how",
    "start": "388560",
    "end": "395430"
  },
  {
    "text": "this is really an arguable point but and I can't tell you how often people tell",
    "start": "395430",
    "end": "400620"
  },
  {
    "text": "me that they report bugs because they don't know if it's a bug I'd say that's a good litmus test for complex people don't can't even",
    "start": "400620",
    "end": "407759"
  },
  {
    "text": "tell when they see something happening whether it's supposed to happen something is complicated somewhere right",
    "start": "407759",
    "end": "414449"
  },
  {
    "text": "I mean they're not all in way over their head and I include myself in that group for sure and you know it happens all the",
    "start": "414449",
    "end": "421139"
  },
  {
    "text": "time is this a bug I don't know we have to go debate it so this meme goes around",
    "start": "421139",
    "end": "430129"
  },
  {
    "text": "it's too complex well so these are my ideas about like what one might do in the face of that it",
    "start": "430129",
    "end": "436770"
  },
  {
    "text": "assuming it's problem we can own it say all right yeah it's complex we're",
    "start": "436770",
    "end": "442349"
  },
  {
    "text": "dealing with complex stuff and it's a complex implementation you know eat it or go do something else if you don't",
    "start": "442349",
    "end": "447389"
  },
  {
    "text": "like it we try to make it less complex that'd be a reasonable thing to look at us we're",
    "start": "447389",
    "end": "452550"
  },
  {
    "text": "making it less complex or we could try to obscure it we could leave it complex but maybe if they don't see it then",
    "start": "452550",
    "end": "460349"
  },
  {
    "text": "we're in good shape as you can surely surmise from the lead-in we went with",
    "start": "460349",
    "end": "467310"
  },
  {
    "text": "option C as we will see now in detail the use case the use case is emblematic",
    "start": "467310",
    "end": "475710"
  },
  {
    "start": "472000",
    "end": "472000"
  },
  {
    "text": "of why I don't work on Scala any more so the use case is what I've just described",
    "start": "475710",
    "end": "481650"
  },
  {
    "text": "it's too complicated people say it's too complicated let's just not let them see that complicated thing so here's the",
    "start": "481650",
    "end": "489000"
  },
  {
    "text": "result look at the look at the signature of map what's wrong with this picture",
    "start": "489000",
    "end": "494699"
  },
  {
    "text": "you guys ever seen when a map actually looks like it's got two type parameters it's got a key type parameter and a",
    "start": "494699",
    "end": "500039"
  },
  {
    "text": "value type parameter we sell this as the signature map here it is a 2b you get a map B whatever that is I don't have a",
    "start": "500039",
    "end": "506250"
  },
  {
    "text": "clue that's the official documentation this isn't some like you know fringe",
    "start": "506250",
    "end": "512010"
  },
  {
    "text": "thing but fortunately you can expand it and then see the full signature which is",
    "start": "512010",
    "end": "517198"
  },
  {
    "text": "also alive it conflates the B type parameter from the enclosing class with",
    "start": "517199",
    "end": "522599"
  },
  {
    "text": "the B type parameter that comes in there's no indication whatsoever that this is totally wrong and that's totally",
    "start": "522599",
    "end": "527760"
  },
  {
    "text": "wrong anywhere this is the official documentation it's outrageous so you're",
    "start": "527760",
    "end": "534000"
  },
  {
    "text": "thinking well it's a bug it's something recent they'll fix it any day now",
    "start": "534000",
    "end": "539570"
  },
  {
    "text": "I'll come back to that in a minute because I got into this line I guess this is what you actually have to do to",
    "start": "539570",
    "end": "544649"
  },
  {
    "text": "see the proper signature of map and it's here where you can see a Kay of VOB and",
    "start": "544649",
    "end": "550079"
  },
  {
    "text": "of that the outer B has been renamed for clarity here which is the point that you",
    "start": "550079",
    "end": "556950"
  },
  {
    "text": "need to know the difference between what's coming in and what's going out when you call Matt this is the earliest",
    "start": "556950",
    "end": "567839"
  },
  {
    "text": "ticket I could find that brings this up I think it's clear from the problem description in the ticket that it's",
    "start": "567839",
    "end": "574079"
  },
  {
    "text": "talking about exactly the same thing obviously Matt B doesn't exist well yeah",
    "start": "574079",
    "end": "579690"
  },
  {
    "text": "obviously Matt B doesn't exist but forty four months later that's still the official documentation so as I say your",
    "start": "579690",
    "end": "587519"
  },
  {
    "text": "time has no value that's that is that is the message I would get from somebody",
    "start": "587519",
    "end": "592890"
  },
  {
    "text": "who in four years cannot be troubled to change the documentation to remotely reflect reality oh excuse me my amazing",
    "start": "592890",
    "end": "607709"
  },
  {
    "text": "effect there with a little jiggling forty four months forty four months but it I mean that's a long time right this",
    "start": "607709",
    "end": "613949"
  },
  {
    "text": "is the evidence it's a screenshot you're gonna have to take my word for it that that's 2014 you know I don't know but",
    "start": "613949",
    "end": "621839"
  },
  {
    "text": "anyway there it is that's your the nightly documentation from January 14 so",
    "start": "621839",
    "end": "627329"
  },
  {
    "text": "unless they fixed it in the last five minutes it's still there and so this it's this sort of like callous",
    "start": "627329",
    "end": "633630"
  },
  {
    "text": "indifference to the impact that this has that drives me nuts as a person who reads the documentation you might think",
    "start": "633630",
    "end": "640199"
  },
  {
    "text": "that's true but you can't trust it and it's intentional that you can't trust it that's you know if something's",
    "start": "640199",
    "end": "647399"
  },
  {
    "text": "complicated you got to live with it right I mean it is it's complicated it doesn't go away by pretending it isn't",
    "start": "647399",
    "end": "653190"
  },
  {
    "text": "and the impact of trying to hide it is going to be really far-reaching it's going to extend through a bunch of stuff",
    "start": "653190",
    "end": "659100"
  },
  {
    "text": "so why we it why is there something to hide at all well here we are looking at",
    "start": "659100",
    "end": "666060"
  },
  {
    "text": "it so we've got map and we've got math so because what the",
    "start": "666060",
    "end": "671259"
  },
  {
    "text": "what map in quotes is bringing to the table and this is what happened and you know this is where things really started",
    "start": "671259",
    "end": "677319"
  },
  {
    "text": "going wrong in the collections is it took this beautiful pure abstraction you",
    "start": "677319",
    "end": "683019"
  },
  {
    "text": "know I'm like absolute beauty for reasoning and you name it it's like one",
    "start": "683019",
    "end": "688180"
  },
  {
    "text": "of the like the monadic foundation I mean everything about it is great and it put this thing on it implicit builder",
    "start": "688180",
    "end": "696069"
  },
  {
    "text": "can build from three type parameter nightmare right nothing will ever be beautiful again it's this guy right I",
    "start": "696069",
    "end": "705279"
  },
  {
    "text": "mean it's like it should have been that it should be called Gollum Ryan Gosling I'm sure everybody will agree very handsome man not Gollum so why why was",
    "start": "705279",
    "end": "718180"
  },
  {
    "start": "716000",
    "end": "716000"
  },
  {
    "text": "this done what what's the what is like we must be getting something great out of this right so we're getting what I",
    "start": "718180",
    "end": "723970"
  },
  {
    "text": "call the bit set gimmick the bit set gimmick is that you can take a bit set and call map on it and if you map to int",
    "start": "723970",
    "end": "732069"
  },
  {
    "text": "you get a bit set back but if you map to something that you can't make a bit set out of then you'll get a lesser type",
    "start": "732069",
    "end": "738220"
  },
  {
    "text": "back like a set that's pretty cool great wonderful look there it is working correctly now just come at it from any",
    "start": "738220",
    "end": "746199"
  },
  {
    "text": "angle at all or just tweak it or look at it funny and it doesn't work right for instance take the very same operation",
    "start": "746199",
    "end": "753100"
  },
  {
    "text": "the first map and do it in two maps now taking the collection and calling map F",
    "start": "753100",
    "end": "758829"
  },
  {
    "text": "map G should be the same as calling map F and then G and that's long gone",
    "start": "758829",
    "end": "766230"
  },
  {
    "text": "because the the intermediate call has a hole type inference stage a can build",
    "start": "766230",
    "end": "772059"
  },
  {
    "text": "from comes in does a bunch of stuff invisibly and makes it impossible to reason about anything so there's a good",
    "start": "772059",
    "end": "778209"
  },
  {
    "text": "example of what happens in the one case you've got a bit set and the other case you get back a sorted set and then and",
    "start": "778209",
    "end": "785199"
  },
  {
    "text": "then here we are just map identity right I mean something map identity is",
    "start": "785199",
    "end": "791589"
  },
  {
    "text": "supposed to be something that's kind of what identity means but here we are something map identity and try to get",
    "start": "791589",
    "end": "797949"
  },
  {
    "text": "the one out a wait a minute it doesn't even compile anymore can build what's that nobody told me about can",
    "start": "797949",
    "end": "804060"
  },
  {
    "text": "build from I saw the signature of map it's a to be similarly and this is",
    "start": "804060",
    "end": "816240"
  },
  {
    "text": "pervasive throughout the collections there are these qualities that may or may not be in a collection and that may",
    "start": "816240",
    "end": "822360"
  },
  {
    "text": "or may not persist so you've got a sorted set and you do something to it you map it you filter it you reverse it",
    "start": "822360",
    "end": "829620"
  },
  {
    "text": "I don't know I guess you get reverse a set doesn't matter you do something is it still sorted when it comes out the",
    "start": "829620",
    "end": "834899"
  },
  {
    "text": "other end who knows right roll the dice and here we see some like of the sicker",
    "start": "834899",
    "end": "842610"
  },
  {
    "text": "sort of things this is essentially the same problem yet again in that doing",
    "start": "842610",
    "end": "848009"
  },
  {
    "text": "something as a series of steps gets you a different result in this case not just a different type but because it's a",
    "start": "848009",
    "end": "854160"
  },
  {
    "text": "different type a different thing those aren't the same numbers I'm looking at I mean they are the same numbers but",
    "start": "854160",
    "end": "859769"
  },
  {
    "text": "they're not in the same order because they're not sorted and the third thing",
    "start": "859769",
    "end": "866370"
  },
  {
    "text": "in the fourth thing here if it's not obvious are the same thing it's only the",
    "start": "866370",
    "end": "871709"
  },
  {
    "text": "number of times I called math that's different there's this idea that you should be able to in a programming",
    "start": "871709",
    "end": "878040"
  },
  {
    "text": "language you should be able to take a sub expression and assign it to a variable use the variable in place of",
    "start": "878040",
    "end": "883470"
  },
  {
    "text": "the sub expression and get the same result this is like just a key it's a foundation of reasoning now even without",
    "start": "883470",
    "end": "890459"
  },
  {
    "text": "these issues we wouldn't be able to do that in Scala but this but this makes it you know impossible and if that's you",
    "start": "890459",
    "end": "900389"
  },
  {
    "text": "know not bad enough we've thrown out like these what should be these invariants like if you call map you get",
    "start": "900389",
    "end": "907529"
  },
  {
    "text": "out the same number of things that you put in this is a you know this is the this is the invariance of map this is",
    "start": "907529",
    "end": "913769"
  },
  {
    "text": "what math is but instead we have this",
    "start": "913769",
    "end": "918779"
  },
  {
    "text": "idea that you know it's more important that a set be a set and that you get to map a set and get a set back then the",
    "start": "918779",
    "end": "924899"
  },
  {
    "text": "map excuse me then that map can do what it's designed to do so instead we just",
    "start": "924899",
    "end": "931709"
  },
  {
    "text": "throw stuff away on the back end of map if they have collide so here you've got a set with",
    "start": "931709",
    "end": "936950"
  },
  {
    "text": "three things in it and you call map and that first map they all map to three so whoo there's only one thing after that",
    "start": "936950",
    "end": "943580"
  },
  {
    "text": "because they all just got thrown away then we call GE and there's one thing here we do it all at once and then it",
    "start": "943580",
    "end": "950660"
  },
  {
    "text": "never gets a chance to get in the middle and make it disappear so again now we have a different size set if you cannot",
    "start": "950660",
    "end": "959090"
  },
  {
    "text": "reason about code you cannot write correct code it's literally impossible",
    "start": "959090",
    "end": "967250"
  },
  {
    "start": "963000",
    "end": "963000"
  },
  {
    "text": "to call Scala's map from java if you were going to design a collections",
    "start": "967250",
    "end": "972830"
  },
  {
    "text": "library and java Interop was like one of the basis on which you sold your language which is certainly true of",
    "start": "972830",
    "end": "978590"
  },
  {
    "text": "Scala I would think that you would do it with Java firmly in mind but we've literally made it impossible to call",
    "start": "978590",
    "end": "984830"
  },
  {
    "text": "into Scala it's again it's can build from here it is I played with it until I",
    "start": "984830",
    "end": "990080"
  },
  {
    "text": "got two TVs this is in response all the details are at that ticket this is a response to my ticket years ago saying",
    "start": "990080",
    "end": "995720"
  },
  {
    "text": "we literally cannot call from map and it turned out to be true well at least neither Martin or I could I mean if you",
    "start": "995720",
    "end": "1001720"
  },
  {
    "text": "want to like show us some of your stuff maybe you can figure out how to do it the variances of can't build from cannot",
    "start": "1001720",
    "end": "1007930"
  },
  {
    "text": "be modeled in Java Java doesn't even let me override it with a cast so you can't do it because Java is broken so this is",
    "start": "1007930",
    "end": "1015610"
  },
  {
    "text": "like a common theme when stuff doesn't work blame John just a moment all right",
    "start": "1015610",
    "end": "1026170"
  },
  {
    "text": "now that I got this nice and wit all right back are you guys happy to hear",
    "start": "1026170",
    "end": "1032199"
  },
  {
    "text": "that this is the version where I don't spend a lot of time ragging on to go I'm actually trying to race third so I",
    "start": "1032199",
    "end": "1039730"
  },
  {
    "text": "can get to the part where I don't but I don't know I'll be honest with ya I'm emotional about this I invested a huge",
    "start": "1039730",
    "end": "1046089"
  },
  {
    "text": "amount of my life into this language and I'm now I have to leave because nothing good happens that frustrates me and it's",
    "start": "1046090",
    "end": "1053470"
  },
  {
    "text": "going to be apparent what can I say won't fix",
    "start": "1053470",
    "end": "1059520"
  },
  {
    "text": "indeed it won't fix so now I'm just",
    "start": "1059520",
    "end": "1065500"
  },
  {
    "text": "going to do the laundry list here of stuff more stuff that it does wrong or that it does you know in a way that",
    "start": "1065500",
    "end": "1071530"
  },
  {
    "text": "causes trouble so the collections in general and every actually everything in Scala the",
    "start": "1071530",
    "end": "1077440"
  },
  {
    "text": "implementation details are never separated from the interface and so there's and I'll have examples of this",
    "start": "1077440",
    "end": "1083860"
  },
  {
    "text": "in a moment but it's there's no there's not even attempt to say that like here's an abstract model of how the thing works",
    "start": "1083860",
    "end": "1090940"
  },
  {
    "text": "and here's the implementation it's just a blob and it evolves like a blob and",
    "start": "1090940",
    "end": "1096160"
  },
  {
    "text": "it's always a blob the collections have 556 explicit casts as counted by grep",
    "start": "1096160",
    "end": "1105210"
  },
  {
    "text": "that's just the explicit ones that doesn't count all the pattern matches to",
    "start": "1105210",
    "end": "1110670"
  },
  {
    "text": "pattern match casts because you can blindly cast by wave of how to match easily enough there's probably another",
    "start": "1110670",
    "end": "1116260"
  },
  {
    "text": "thousand so here we are the world's most complicated type system as people think from some distance and we can't write a",
    "start": "1116260",
    "end": "1122980"
  },
  {
    "text": "collections library that doesn't have thousands of casts in it that's kind of nuts castle just the beginning though",
    "start": "1122980",
    "end": "1129220"
  },
  {
    "text": "because we suppress variants checks all over the place because it's unsound so we have to suppress variants text to",
    "start": "1129220",
    "end": "1134680"
  },
  {
    "text": "support the model so of course all this stuff adds up to you know various forms of unsoundness many of which exist",
    "start": "1134680",
    "end": "1140470"
  },
  {
    "text": "there's at least a dozen specificity rules are you know this I'll show you",
    "start": "1140470",
    "end": "1147610"
  },
  {
    "text": "that by example because I don't explain it this one is is something probably not on your radar but it's going to be",
    "start": "1147610",
    "end": "1152890"
  },
  {
    "text": "gigantic because of the way that implicit selection and type inference are codependent I mean that in the in",
    "start": "1152890",
    "end": "1160990"
  },
  {
    "text": "the clinical sense because of the way they're codependent they affect each other in such a way that they are",
    "start": "1160990",
    "end": "1167050"
  },
  {
    "text": "becoming impossible to change and because nobody knows actually what happens in type inference",
    "start": "1167050",
    "end": "1172150"
  },
  {
    "text": "it's an experimental science with Scala see all you can do is like you know throw particles at it and watch them",
    "start": "1172150",
    "end": "1178390"
  },
  {
    "text": "bounce see you know see if they go through the two slits yeah because of",
    "start": "1178390",
    "end": "1184540"
  },
  {
    "text": "this fixing bugs is it crazily difficult you generally break things that you can't even see because it is some corner",
    "start": "1184540",
    "end": "1191050"
  },
  {
    "text": "that you haven't tested yet but people will discover it for you and report it as a regression six months down the line that situation will eventually just",
    "start": "1191050",
    "end": "1198340"
  },
  {
    "text": "freeze the entire thing in place in the",
    "start": "1198340",
    "end": "1204700"
  },
  {
    "text": "collections inheritance of implementation is essentially the the hammer for all purpose but like",
    "start": "1204700",
    "end": "1212920"
  },
  {
    "text": "tragically nobody had discovered final or private and then when you know the most of these are being written so all",
    "start": "1212920",
    "end": "1219190"
  },
  {
    "text": "that stuff is out there in the world it's impossible to maintain correctness in an inheritance oriented language when",
    "start": "1219190",
    "end": "1226420"
  },
  {
    "text": "you have methods doing stuff that depend on the other methods and they can be overridden selectively it's literally",
    "start": "1226420",
    "end": "1231760"
  },
  {
    "text": "impossible to maintain correctness so deprecated non-final annotation had",
    "start": "1231760",
    "end": "1237280"
  },
  {
    "text": "to be invented for the purpose of you know two years from now after another release cycle we can start finalizing",
    "start": "1237280",
    "end": "1245350"
  },
  {
    "text": "these methods of course I don't think that I'll be I'll still be giving these talks at that point I won't be getting",
    "start": "1245350",
    "end": "1251050"
  },
  {
    "text": "invitations anymore there is a this is",
    "start": "1251050",
    "end": "1256420"
  },
  {
    "text": "just an example of many many many possible examples things that if you don't nail them down upfront burn you",
    "start": "1256420",
    "end": "1263560"
  },
  {
    "text": "terribly it's really important to be able to make optimizations like that or for instance if I take a giant set and",
    "start": "1263560",
    "end": "1270550"
  },
  {
    "text": "another giant set or a dime set in an empty set and I'll add am I allowed to",
    "start": "1270550",
    "end": "1275590"
  },
  {
    "text": "return the original set if you don't specify these things upfront then people will just start depending on whatever it",
    "start": "1275590",
    "end": "1281770"
  },
  {
    "text": "happens to do and surely that's what's happened here so people can do a reference equality check on the return",
    "start": "1281770",
    "end": "1287830"
  },
  {
    "text": "of this and that means since it was since it says it's a new collection it has to create it so if you take a you",
    "start": "1287830",
    "end": "1293410"
  },
  {
    "text": "know some billion element list and filter it so that you just get it back you still have to make a new billion",
    "start": "1293410",
    "end": "1299410"
  },
  {
    "text": "element list these are not small things these are giant things but because they're not like nobody's taking",
    "start": "1299410",
    "end": "1305440"
  },
  {
    "text": "the trouble to nail down these semantics you get the worst of both worlds as the user of it you have to assume the worst",
    "start": "1305440",
    "end": "1311919"
  },
  {
    "text": "as the compiler developer you cannot make any optimizations variance again um",
    "start": "1311919",
    "end": "1323820"
  },
  {
    "text": "covariance I mean you guys ever think about what covariance really implies if",
    "start": "1323820",
    "end": "1329710"
  },
  {
    "text": "you have a covariant thing or a contravariant thing for that matter if variance is in play it's essentially",
    "start": "1329710",
    "end": "1335230"
  },
  {
    "text": "just an opportunity to not have errors it'll find a way to make it work why are",
    "start": "1335230",
    "end": "1341440"
  },
  {
    "text": "we using types if we wanted to find a way to make it work generally that's not what we're looking for the compiler to",
    "start": "1341440",
    "end": "1346929"
  },
  {
    "text": "don't try to find a way actually just see if you can do what I asked you to do in a sort of a direct way rather than",
    "start": "1346929",
    "end": "1353200"
  },
  {
    "text": "like ambitiously looking so for instance this I've got a list of instant a list",
    "start": "1353200",
    "end": "1359409"
  },
  {
    "text": "of doubles as it turns out and I put them together and I get a list of any Val truly the world's most useless type",
    "start": "1359409",
    "end": "1365980"
  },
  {
    "text": "any Val it is literally literally useless if you ever wrote any Val like intentionally in",
    "start": "1365980",
    "end": "1371470"
  },
  {
    "text": "a signature you would be nuts you know I said what are you doing is it some kind of joke and yet will happily infer it",
    "start": "1371470",
    "end": "1378879"
  },
  {
    "text": "and you know say hey no problem that must have been what you meant is like is",
    "start": "1378879",
    "end": "1384460"
  },
  {
    "text": "the purpose like you know some devotion to some idea of generality or it'd be useful I really wish that the purpose",
    "start": "1384460",
    "end": "1390609"
  },
  {
    "text": "was to be useful this is what my list does how does my list accomplish this",
    "start": "1390609",
    "end": "1395710"
  },
  {
    "text": "magic by being invariant oh well that sounds bad that's Java right there",
    "start": "1395710",
    "end": "1402159"
  },
  {
    "text": "stuffs invariant they don't get any fun you can't you know a list of apples isn't a list of fruits that sucks",
    "start": "1402159",
    "end": "1408159"
  },
  {
    "text": "well you get the best of both worlds you have a super type that has everything except the things that cannot exist in",
    "start": "1408159",
    "end": "1415659"
  },
  {
    "text": "covariance and if you want you can gladly your PSP list can just fall back",
    "start": "1415659",
    "end": "1420909"
  },
  {
    "text": "to the next type up in the case of list it would be seek for instance so you would say well it's a it's a co bearing",
    "start": "1420909",
    "end": "1427149"
  },
  {
    "text": "its sequence but it's an invariant leaf class and the only n contains doesn't",
    "start": "1427149",
    "end": "1432909"
  },
  {
    "text": "derive until the leaf class and you're done it's type safe and it's covariant so its inference plus",
    "start": "1432909",
    "end": "1443679"
  },
  {
    "start": "1441000",
    "end": "1441000"
  },
  {
    "text": "variance that is at the root of like many puzzlers and just nuttiness the the",
    "start": "1443679",
    "end": "1450669"
  },
  {
    "text": "fact that there are these implicit sitting around and in the waiting in the wings to say here's something for you",
    "start": "1450669",
    "end": "1456490"
  },
  {
    "text": "that you not at all what you were thinking of because we need to take something like can build from all three",
    "start": "1456490",
    "end": "1462399"
  },
  {
    "text": "type parameters of can build from our variant two of them are contravariant one is covariant and so there's a classic bug",
    "start": "1462399",
    "end": "1469720"
  },
  {
    "text": "involving fallback string can build from which is you know a low priority implicit hiding in pre death but because",
    "start": "1469720",
    "end": "1477279"
  },
  {
    "text": "two of the type parameters are contravariant you can be asking for like some super specific thing involving",
    "start": "1477279",
    "end": "1483009"
  },
  {
    "text": "lists doubles and did two done it's just going to dial the variance up as far as it has to for it to match so eventually",
    "start": "1483009",
    "end": "1489309"
  },
  {
    "text": "it gets to any ante and says here you go fall back string can't build from that's what you want it what it's not this is",
    "start": "1489309",
    "end": "1498490"
  },
  {
    "text": "what I mean about the various rules rendering contravariance useless now",
    "start": "1498490",
    "end": "1504580"
  },
  {
    "text": "please take a moment to look at what's happening in this slide so that you can tell me that I'm nuts because I",
    "start": "1504580",
    "end": "1510279"
  },
  {
    "start": "1505000",
    "end": "1505000"
  },
  {
    "text": "essentially have probably put a hundred hours into this one trying to convince that this is not the useful definition",
    "start": "1510279",
    "end": "1516700"
  },
  {
    "text": "of specificity on the second line I'm declaring there are two implicit there's",
    "start": "1516700",
    "end": "1522669"
  },
  {
    "text": "an ordered any and there's an or list double that means that the second one",
    "start": "1522669",
    "end": "1529139"
  },
  {
    "text": "takes lists double as its parameters the first one will take anything as its parameters now I asked implicitly for a",
    "start": "1529139",
    "end": "1535960"
  },
  {
    "text": "list double ORD and I get to any the",
    "start": "1535960",
    "end": "1541509"
  },
  {
    "text": "reason is that in the same way that when something is covariant it goes looking for the deepest subtype when it's",
    "start": "1541509",
    "end": "1547779"
  },
  {
    "text": "contravariant it goes looking for the shallowest one which is invariably any but that's not what i want right you",
    "start": "1547779",
    "end": "1554169"
  },
  {
    "text": "can't subtype upward you can't subclass upward right the only way to write things and to actually extend existing",
    "start": "1554169",
    "end": "1559779"
  },
  {
    "text": "things is to go downward when you ask for this there is no chance in the world that you're thinking well there's an if",
    "start": "1559779",
    "end": "1565870"
  },
  {
    "text": "there's an order any that's the one I really want not the Ord lifts double it's not and yet in five years I couldn't",
    "start": "1565870",
    "end": "1572610"
  },
  {
    "text": "convince the powers-that-be of this and it's you know again that's among the reasons I've just abandoned the app so",
    "start": "1572610",
    "end": "1584309"
  },
  {
    "start": "1578000",
    "end": "1578000"
  },
  {
    "text": "one of the true boondoggles in terms of correctness in the collections is the abstracting of immutability and",
    "start": "1584309",
    "end": "1590429"
  },
  {
    "text": "immutability this in hindsight I say in hindsight because I did not properly",
    "start": "1590429",
    "end": "1596520"
  },
  {
    "text": "understand at the time how bad it was but yeah it's a nightmare you just don't",
    "start": "1596520",
    "end": "1602100"
  },
  {
    "text": "want your mutable collections to have all the operations that your immutable collections do it's terrible idea that you shouldn't be",
    "start": "1602100",
    "end": "1609090"
  },
  {
    "text": "doing that with your immutable collections you shouldn't be like yeah I'm just passing it around and we'll call you no filter and debt to de no no",
    "start": "1609090",
    "end": "1617309"
  },
  {
    "text": "you should be squirreling your mutable things into little tiny zones and making",
    "start": "1617309",
    "end": "1622470"
  },
  {
    "text": "them sit there in highly controlled circumstances and then maybe if you want to let them out you then you to list",
    "start": "1622470",
    "end": "1628350"
  },
  {
    "text": "them or something and get the immutable one and that's what you deal with but your code if you like correctness if",
    "start": "1628350",
    "end": "1633840"
  },
  {
    "text": "it's an interesting thing for you to pursue you should not be treating mutable things is just like immutable",
    "start": "1633840",
    "end": "1639150"
  },
  {
    "text": "with fewer letters they're not they are not it's not an abstraction that you can do so drop is a very fine example here",
    "start": "1639150",
    "end": "1648390"
  },
  {
    "text": "so you've got a long list list of a thousand intz and somebody comes in and",
    "start": "1648390",
    "end": "1653400"
  },
  {
    "text": "says drop a hundred well so if it's a mutable thing I can't give you back the",
    "start": "1653400",
    "end": "1659580"
  },
  {
    "text": "back of my mutable thing or now you can now there's two guys each of whom think",
    "start": "1659580",
    "end": "1664620"
  },
  {
    "text": "they have their own mutable thing so I have to copy it there's no choice but if it's immutable I cannot copy it the only",
    "start": "1664620",
    "end": "1671400"
  },
  {
    "text": "reason the immutable collections are acceptable performant is that kind of sharing so one of them is wrong by",
    "start": "1671400",
    "end": "1677340"
  },
  {
    "text": "definition always and that's the case in a bunch of methods when look that when",
    "start": "1677340",
    "end": "1683010"
  },
  {
    "text": "you have to override constantly to avoid the wrong method in the guy above you that's a sign you're doing it wrong so",
    "start": "1683010",
    "end": "1693900"
  },
  {
    "text": "in the triumph of code reuse we have 24 concrete implementations of slice slice",
    "start": "1693900",
    "end": "1701100"
  },
  {
    "text": "is not chosen to cherry pick a bad example it's just a typical and in fact it's one that I reduced the",
    "start": "1701100",
    "end": "1706830"
  },
  {
    "text": "count dramatically a couple years ago this is the current situation it climbed all the way back to where it was 24 how",
    "start": "1706830",
    "end": "1714630"
  },
  {
    "text": "is it possible that there are 24 ways to write slice can you even think of 24 ways to write slice",
    "start": "1714630",
    "end": "1719790"
  },
  {
    "text": "I mean if I say if I made it like a but a gun here and I want to see 24 interestingly different ways to write",
    "start": "1719790",
    "end": "1725010"
  },
  {
    "text": "slice I defy you to do it so there's",
    "start": "1725010",
    "end": "1735000"
  },
  {
    "start": "1731000",
    "end": "1731000"
  },
  {
    "text": "some classics up here list 1 2 3 to set",
    "start": "1735000",
    "end": "1740780"
  },
  {
    "text": "false can do you know what's going on I",
    "start": "1740780",
    "end": "1747390"
  },
  {
    "text": "mean if you've seen it before you do if you haven't you might think what would",
    "start": "1747390",
    "end": "1754050"
  },
  {
    "text": "somebody like to share what's going on",
    "start": "1754050",
    "end": "1757550"
  },
  {
    "text": "so all right so Scala will happily just insert a unit if it if it thinks that's",
    "start": "1761900",
    "end": "1768060"
  },
  {
    "text": "what you would if it's like what do I do Oh a unit would make this work then do it give them a unit so you called to set",
    "start": "1768060",
    "end": "1777000"
  },
  {
    "text": "and to set doesn't actually take any Titan any any thing it doesn't take any",
    "start": "1777000",
    "end": "1783120"
  },
  {
    "text": "parens you need and so because you gave them it thinks you're calling it on the result of the two set so you actually",
    "start": "1783120",
    "end": "1789930"
  },
  {
    "text": "are now calling the apply on the resulting set and then it says oh well",
    "start": "1789930",
    "end": "1797040"
  },
  {
    "text": "you know we need that takes an argument well oh look it's a set of any because we inferred that because we can because",
    "start": "1797040",
    "end": "1804270"
  },
  {
    "text": "list is covariant so this is a list of int but it's going to when it infers the type for the two set it's like it's a",
    "start": "1804270",
    "end": "1811080"
  },
  {
    "text": "list of any hey it works so then it's got a set of any and it doesn't have unit in it and so false there's no unit",
    "start": "1811080",
    "end": "1819270"
  },
  {
    "text": "in a set any of one-two-three there's no type in there think think of the chain",
    "start": "1819270",
    "end": "1825180"
  },
  {
    "text": "of events there that's like how long thousand go in mad saying like well if I",
    "start": "1825180",
    "end": "1830760"
  },
  {
    "text": "follow this chain of reasoning like a series of craziness then I should just evacuated you know send on them all out",
    "start": "1830760",
    "end": "1837330"
  },
  {
    "text": "in the space there's no way you want to do it any of that stuff what's the next one another",
    "start": "1837330",
    "end": "1846150"
  },
  {
    "text": "favorite how could that be I how can that be so Scala decided that",
    "start": "1846150",
    "end": "1858960"
  },
  {
    "text": "whatever Java does is good and we have to do it all so even if it's wrong and in this case that means if something",
    "start": "1858960",
    "end": "1867120"
  },
  {
    "text": "takes a float then give them a float even we wrote an int in the it doesn't fit in the float and if round happens to",
    "start": "1867120",
    "end": "1874350"
  },
  {
    "text": "only work on floats and doubles and not int then we'll just round that down to",
    "start": "1874350",
    "end": "1881130"
  },
  {
    "text": "whatever and then there we are with what's left which isn't the same thing we started with by the classical",
    "start": "1881130",
    "end": "1888420"
  },
  {
    "text": "definition round I'm not a mathematician but by the classical definition around that would not be the answer again no",
    "start": "1888420",
    "end": "1895800"
  },
  {
    "text": "error there I mean really it's 2014 and here we are and we cannot make up the",
    "start": "1895800",
    "end": "1901290"
  },
  {
    "text": "compiler in the world's most typed language tell us that a list of strictly",
    "start": "1901290",
    "end": "1906330"
  },
  {
    "text": "integers does not contain your mom I think there's something wrong with that that's not entirely scholars fall that's",
    "start": "1906330",
    "end": "1912330"
  },
  {
    "text": "like the laws of variance to some extent but it is and it's our fault for putting up with something so ridiculous that we",
    "start": "1912330",
    "end": "1918000"
  },
  {
    "text": "cannot find a way to make that an error it's nuts then we're no good at this if",
    "start": "1918000",
    "end": "1923220"
  },
  {
    "text": "we can't do that frankly there's like where we should give up another favorite",
    "start": "1923220",
    "end": "1929670"
  },
  {
    "text": "there's no actual call to sum here but this is the the set thing again and this",
    "start": "1929670",
    "end": "1936750"
  },
  {
    "text": "is an actual bug that we have in the collections for a while the way a sets hash code is calculated is by adding up",
    "start": "1936750",
    "end": "1942540"
  },
  {
    "text": "the hash codes of its elements okay here's the obvious implementation take",
    "start": "1942540",
    "end": "1948960"
  },
  {
    "text": "myself map to hash code some great it works mostly and then sometimes it's",
    "start": "1948960",
    "end": "1956370"
  },
  {
    "text": "wrong oh no it's the worst kind of bug because it's not that obvious it just",
    "start": "1956370",
    "end": "1961860"
  },
  {
    "text": "burns you when people show up saying like well you know one time out of 100 the thing disappears on me turns out",
    "start": "1961860",
    "end": "1967620"
  },
  {
    "text": "that if two things have the same hash code you're only going to get one because when you map your set you got a",
    "start": "1967620",
    "end": "1973800"
  },
  {
    "text": "set of hash codes and only the unique ones survived now you sum that and and remember this",
    "start": "1973800",
    "end": "1984000"
  },
  {
    "text": "is for emphasis your you might not even know it's a set here this summary here",
    "start": "1984000",
    "end": "1990390"
  },
  {
    "text": "is written to work on iterable certainly seems reasonable to do it on interval unit and set never crosses your mind but",
    "start": "1990390",
    "end": "1996570"
  },
  {
    "text": "then the user of it of course might call it with a set and you lose sense so this",
    "start": "1996570",
    "end": "2008270"
  },
  {
    "text": "is this is where we get into implementation details have infested like an implementation details and just",
    "start": "2008270",
    "end": "2014180"
  },
  {
    "text": "ill-considered sort of like let's just do it the way a first way that comes to mind have infested the interface to the",
    "start": "2014180",
    "end": "2020060"
  },
  {
    "text": "great detriment of the overall usability these are the ways from a distance",
    "start": "2020060",
    "end": "2026090"
  },
  {
    "text": "forget about Scala that one might sensibly define a set in each case there's one method there's one that's",
    "start": "2026090",
    "end": "2032210"
  },
  {
    "text": "defined in terms of the qualities of the things in the set that's an intentional set there's one that is the actual",
    "start": "2032210",
    "end": "2037910"
  },
  {
    "text": "members of the set that's an extensional set in the one case it's essentially just a predicate anything that matches",
    "start": "2037910",
    "end": "2044780"
  },
  {
    "text": "the predicate that's the set in the other case it's an iterable or some variation of that something that allows",
    "start": "2044780",
    "end": "2050628"
  },
  {
    "text": "you to enumerate the members of the set both of these are very useful things they're very different things they're",
    "start": "2050629",
    "end": "2057888"
  },
  {
    "text": "not the same thing they have totally different qualities they have to be considered separately now this is the",
    "start": "2057889",
    "end": "2066080"
  },
  {
    "start": "2064000",
    "end": "2064000"
  },
  {
    "text": "actual interface of set as can be seen by attempting to make a concrete class that extends set and seen what isn't",
    "start": "2066080",
    "end": "2072590"
  },
  {
    "text": "implemented so here we have both of",
    "start": "2072590",
    "end": "2078378"
  },
  {
    "text": "those kinds of sets coming together and now you see why set has to be invariant because intentional sets have to be",
    "start": "2078379",
    "end": "2083480"
  },
  {
    "text": "contravariant and extensional sets have to be covariant and if you mix them together there's only invariance left",
    "start": "2083480",
    "end": "2089628"
  },
  {
    "text": "and then you have these two hangers-on that I end up implementing with dummies",
    "start": "2089629",
    "end": "2094790"
  },
  {
    "text": "half the time because why because somebody thought we need to have minus and plus on set I don't know for",
    "start": "2094790",
    "end": "2101030"
  },
  {
    "text": "whatever reason you don't have to do that on sequence there's there's no rhyme or reason to it only requires one method to define a",
    "start": "2101030",
    "end": "2107290"
  },
  {
    "text": "set everything else is something else it is not the definition of a set is maybe it's a definition of a grow a bull",
    "start": "2107290",
    "end": "2113500"
  },
  {
    "text": "shrinkable set right I don't know don't you know you shouldn't be cannibalizing",
    "start": "2113500",
    "end": "2118720"
  },
  {
    "text": "bits out of other things and putting them on set set can be defined with one thing purity is not a priority a purity",
    "start": "2118720",
    "end": "2127330"
  },
  {
    "text": "of interface but purity is that's how you actually have or usable abstractions",
    "start": "2127330",
    "end": "2132990"
  },
  {
    "start": "2132000",
    "end": "2132000"
  },
  {
    "text": "size size is one of the worst so size is on everything always",
    "start": "2132990",
    "end": "2139420"
  },
  {
    "text": "you can't avoid sides size is mandated you have to have a size and it has to be an int so if you're Infinite forget it",
    "start": "2139420",
    "end": "2146890"
  },
  {
    "text": "you've got to make something up or just don't terminate I don't know throw an exception if size is extremely expensive",
    "start": "2146890",
    "end": "2153730"
  },
  {
    "text": "to compute you know like it's Oh n like it is for list doesn't matter you still",
    "start": "2153730",
    "end": "2158920"
  },
  {
    "text": "have to have a size right there and just make it available for everybody use just no protection from anybody calling that",
    "start": "2158920",
    "end": "2164350"
  },
  {
    "text": "just you know eat it there's no reason size it should be assumed to be universally available and",
    "start": "2164350",
    "end": "2170680"
  },
  {
    "text": "universally an int and you don't gain anything from it either there's no benefit it's not like there's no",
    "start": "2170680",
    "end": "2176320"
  },
  {
    "text": "convenience if you need size to be universally available you can easily implicit your way to all these bad wrong",
    "start": "2176320",
    "end": "2182140"
  },
  {
    "text": "answers if that's like you know that's your thing but you don't need it to be but once it's on the core types there's",
    "start": "2182140",
    "end": "2188500"
  },
  {
    "text": "no avoiding it all right I think I'm at the end of slagging on Scala let's hope",
    "start": "2188500",
    "end": "2196210"
  },
  {
    "text": "let's oh I know you'll get me going again the questions so here we have just",
    "start": "2196210",
    "end": "2202900"
  },
  {
    "text": "a few things that one might do so most of the things in here are real I wrote",
    "start": "2202900",
    "end": "2208150"
  },
  {
    "text": "them already they're simple they're not like fully fleshed out they're just more their illustrations because I often hear",
    "start": "2208150",
    "end": "2215410"
  },
  {
    "text": "people say like well I understand that all of the complexity the Scala collections is necessary to accomplish",
    "start": "2215410",
    "end": "2221170"
  },
  {
    "text": "these things but you know they sound like abused people honestly even when they talk like that it's true it's you",
    "start": "2221170",
    "end": "2228070"
  },
  {
    "text": "know you don't blame yourself if it seems really complicated more so than necessary trust your intuition these",
    "start": "2228070",
    "end": "2234880"
  },
  {
    "text": "things can be done far more simply this is not intended for you to digest",
    "start": "2234880",
    "end": "2241500"
  },
  {
    "start": "2237000",
    "end": "2237000"
  },
  {
    "text": "in its entirety but it's an example of the kind of thing that doesn't exist in Scala which is to say an abstract model",
    "start": "2241500",
    "end": "2248070"
  },
  {
    "text": "of the thing being implemented you need this in order to have a check on what it",
    "start": "2248070",
    "end": "2253500"
  },
  {
    "text": "is that you're doing in order to have something that tells other people what it is that you're doing if you have an",
    "start": "2253500",
    "end": "2258990"
  },
  {
    "text": "abstract interface it's you know a level of abstraction is negotiable but the existence is not this is just",
    "start": "2258990",
    "end": "2265619"
  },
  {
    "text": "defining like some names for types and giving them sensible youlike brief names",
    "start": "2265619",
    "end": "2270980"
  },
  {
    "text": "defining what they are nothing else there's no code here other than you know types but with this you have a",
    "start": "2270980",
    "end": "2278700"
  },
  {
    "text": "tremendous head start on actually like knowing what you're doing and creating something that's going to continue to do",
    "start": "2278700",
    "end": "2285090"
  },
  {
    "text": "what it is that you think that it does in such a way that other people can see what it does so in the collections there",
    "start": "2285090",
    "end": "2296970"
  },
  {
    "text": "are mutable and immutable collections there is a division into sequence set",
    "start": "2296970",
    "end": "2303060"
  },
  {
    "text": "and map the whole thing got doubled with parallel collections so there's parallel and sequential and",
    "start": "2303060",
    "end": "2308910"
  },
  {
    "text": "then everything's got a view and a regular now all of that is like simplification because in fact there's like exceptions and special cases all",
    "start": "2308910",
    "end": "2315510"
  },
  {
    "text": "over the place but in principle that means there would be 24 combinations in there right so",
    "start": "2315510",
    "end": "2322560"
  },
  {
    "text": "there's like immutable sequential sequence view right and a lot of those do exists par seek view etc that's a lot",
    "start": "2322560",
    "end": "2330660"
  },
  {
    "text": "of freaking code these 24 combinations as I see it you need 1 out of those 24 a",
    "start": "2330660",
    "end": "2338310"
  },
  {
    "text": "set as a sequence without duplicates that's all that it is that's an extensional set a map is a set with a",
    "start": "2338310",
    "end": "2346260"
  },
  {
    "start": "2345000",
    "end": "2345000"
  },
  {
    "text": "buddy that buddy is an apply that takes a set which has the qualities of map",
    "start": "2346260",
    "end": "2351630"
  },
  {
    "text": "keys and turns them into values now you have a map there's no once you have that you're",
    "start": "2351630",
    "end": "2357480"
  },
  {
    "text": "done you don't need to have a bunch of variation different things incorporate tuples into you know you don't need all",
    "start": "2357480",
    "end": "2364109"
  },
  {
    "text": "this this nuttiness that exists mutable collections forget it write your own immutable collections problem solve",
    "start": "2364109",
    "end": "2369720"
  },
  {
    "text": "because you shouldn't have mutable collections in here parallel collections problem solved we",
    "start": "2369720",
    "end": "2374890"
  },
  {
    "text": "can't get sequential ones what we'll never get parallel collections right I mean it's comical it's so hard to get",
    "start": "2374890",
    "end": "2380110"
  },
  {
    "text": "parallel stuff right we have these trivial things are not right forget it so no parallel collections problem",
    "start": "2380110",
    "end": "2385330"
  },
  {
    "text": "solved and views are what should always happen because if you're programming immutably and sensibly then you are glad",
    "start": "2385330",
    "end": "2393880"
  },
  {
    "text": "for it to be behaving lazily in these situations so you're done you want seek",
    "start": "2393880",
    "end": "2399190"
  },
  {
    "text": "view immutable seek view sequential and then everything else is an add-on and",
    "start": "2399190",
    "end": "2406030"
  },
  {
    "text": "then suddenly I have 4% of the code to write that the main collections do sighs",
    "start": "2406030",
    "end": "2415590"
  },
  {
    "start": "2412000",
    "end": "2412000"
  },
  {
    "text": "so that's the problem with size in a nutshell maybe it's constant time maybe it's",
    "start": "2415590",
    "end": "2421960"
  },
  {
    "text": "linear maybe I will never see that return ever I don't know there's no way",
    "start": "2421960",
    "end": "2427570"
  },
  {
    "text": "to know but I do know that if I have a thing that will never return on a call",
    "start": "2427570",
    "end": "2432910"
  },
  {
    "text": "to size it'd be better if it just didn't have the method right it's like if something's going to shoot random fireballs at you maybe we could just not",
    "start": "2432910",
    "end": "2439390"
  },
  {
    "text": "have the shoot random fireballs method",
    "start": "2439390",
    "end": "2443250"
  },
  {
    "start": "2442000",
    "end": "2442000"
  },
  {
    "text": "so this is what I came up with in order to make some sense out of size the",
    "start": "2444840",
    "end": "2451030"
  },
  {
    "text": "reason that size has all these bad behaviors is that things have to either lie or tell something they don't know",
    "start": "2451030",
    "end": "2456310"
  },
  {
    "text": "and they might have to work very hard to find out the thing that they don't know so don't ask a question that requires",
    "start": "2456310",
    "end": "2461530"
  },
  {
    "text": "them either to lie or to do really hard work ask them something they know when you ask them and that means like",
    "start": "2461530",
    "end": "2467440"
  },
  {
    "text": "everything in computer science adding a layer of indirection I'm not going to ask you what your size is I'm going to ask you what you know about your size",
    "start": "2467440",
    "end": "2473320"
  },
  {
    "text": "now if you know your exact size that's great tell me I'll take it I'll use that",
    "start": "2473320",
    "end": "2478390"
  },
  {
    "text": "info that's constant time if your infinite help me that I'll take it that's also constant time and if you're",
    "start": "2478390",
    "end": "2484600"
  },
  {
    "text": "know very little possibly nothing at all because bounded can be zero to infinity",
    "start": "2484600",
    "end": "2489960"
  },
  {
    "text": "then tell me that also constant time so it's going to be constant time you're",
    "start": "2489960",
    "end": "2495460"
  },
  {
    "text": "never going to lie to me and you're never going to be running off into lala land and now I can do something with",
    "start": "2495460",
    "end": "2501940"
  },
  {
    "text": "that here's an example of how that works",
    "start": "2501940",
    "end": "2508809"
  },
  {
    "text": "infinite look I have defeated the laws of reality an infinite collection told",
    "start": "2509680",
    "end": "2515420"
  },
  {
    "text": "me its size it's infinite so there's",
    "start": "2515420",
    "end": "2520700"
  },
  {
    "text": "logic in there that does things like if you call take ten thousand on an infinite collection the size is going to",
    "start": "2520700",
    "end": "2526490"
  },
  {
    "text": "be ten thousand easy you call map on it since we don't just throw away duplicates at random it's still going to",
    "start": "2526490",
    "end": "2532880"
  },
  {
    "text": "be ten thousand we still know the size and we've we've burned about three CPU cycles at this point and we haven't done",
    "start": "2532880",
    "end": "2539900"
  },
  {
    "text": "anything yet that's the thing this is an infinite collection with two operations having been applied and nothing no work",
    "start": "2539900",
    "end": "2546650"
  },
  {
    "text": "whatsoever has been done I guess this is",
    "start": "2546650",
    "end": "2552890"
  },
  {
    "text": "yeah I was still screwing around with my slide so we can see here redundant I we",
    "start": "2552890",
    "end": "2558260"
  },
  {
    "text": "already did contains right yeah aha this",
    "start": "2558260",
    "end": "2565700"
  },
  {
    "start": "2561000",
    "end": "2561000"
  },
  {
    "text": "is the the best I could get anything to do in Scala with this operation I have",
    "start": "2565700",
    "end": "2571820"
  },
  {
    "text": "them by two orders of magnitude up there what it's doing is taking essentially",
    "start": "2571820",
    "end": "2577250"
  },
  {
    "text": "the range from one to a million mapping it three times dropping the first",
    "start": "2577250",
    "end": "2582280"
  },
  {
    "text": "999,999 elements and then summing the last one there's nothing in Scala that",
    "start": "2582280",
    "end": "2588380"
  },
  {
    "text": "allows for this to do what it should do which is to say it just index into the last one and add three right the",
    "start": "2588380",
    "end": "2597020"
  },
  {
    "text": "operative when you when you do this what you want to happen is go straight to the last element add one add one add one",
    "start": "2597020",
    "end": "2603650"
  },
  {
    "text": "done that's what that does this one builds all the intermediate collections why well remember the signature of map",
    "start": "2603650",
    "end": "2611350"
  },
  {
    "text": "it insists on a builder and there's no way to defer it so map is going to sit",
    "start": "2611350",
    "end": "2616700"
  },
  {
    "text": "there building the intermediate collections best case it will build optimized range like things but far more",
    "start": "2616700",
    "end": "2622970"
  },
  {
    "text": "likely it actually has to build a million element collection three times to go for the last one so that's a",
    "start": "2622970",
    "end": "2630260"
  },
  {
    "text": "million times more work than necessary I'm sorry that only two orders of magnitude are apparent in the time that's probably just measurement error",
    "start": "2630260",
    "end": "2636860"
  },
  {
    "text": "it's more like when you know one point four to seven microseconds not milliseconds and then the great tragedy",
    "start": "2636860",
    "end": "2647120"
  },
  {
    "text": "of all of it is that it was totally unnecessary because even if you love the bit set gimmick you don't need to",
    "start": "2647120",
    "end": "2653120"
  },
  {
    "text": "pollute map and here is an illustration of it there's a string I mapped to an",
    "start": "2653120",
    "end": "2659690"
  },
  {
    "text": "int and back to care in Scala the regular one you get a vector of care at",
    "start": "2659690",
    "end": "2665060"
  },
  {
    "text": "that point for obvious reasons at this point I get a string back why because I didn't insist on building",
    "start": "2665060",
    "end": "2671870"
  },
  {
    "text": "it here I waited and the same element type came out as went in and that's all that I need to build the same thing and",
    "start": "2671870",
    "end": "2677870"
  },
  {
    "text": "map has a signature the beautiful a to be the Ryan Gosling signature not the",
    "start": "2677870",
    "end": "2684590"
  },
  {
    "text": "Golem signature the builder comes in here this can be implicit if you are so",
    "start": "2684590",
    "end": "2690020"
  },
  {
    "text": "inclined I don't think that's wise but if that's the deal breaker since I know small things are always like oh well",
    "start": "2690020",
    "end": "2695450"
  },
  {
    "text": "then so that's still really important that I don't have to force it somehow okay fine that can be implicit in which",
    "start": "2695450",
    "end": "2701480"
  },
  {
    "text": "case all of this looks exactly like this except that it works so we beat the bit",
    "start": "2701480",
    "end": "2707270"
  },
  {
    "text": "set gimmick without ruining map that's",
    "start": "2707270",
    "end": "2712520"
  },
  {
    "text": "my last slide so I will I can talk up here for about Scala stuff as long as",
    "start": "2712520",
    "end": "2718160"
  },
  {
    "text": "you want but they wanted me to leave time for questions so I guess I did you",
    "start": "2718160",
    "end": "2728090"
  },
  {
    "text": "guys don't look quite as shell-shocked as last night but still pretty good",
    "start": "2728090",
    "end": "2733300"
  },
  {
    "text": "you",
    "start": "2738910",
    "end": "2740970"
  }
]