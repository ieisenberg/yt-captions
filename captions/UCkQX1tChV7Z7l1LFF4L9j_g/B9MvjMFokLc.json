[
  {
    "text": "[Music]",
    "start": "6140",
    "end": "12559"
  },
  {
    "text": "I'm Simeon Franklin and I'm mostly a programmer my day job is um web applications mostly with python and jeno",
    "start": "12559",
    "end": "19640"
  },
  {
    "text": "I'm actually freelance I work for a company called Energy Solutions uh in Oakland for the bul of my work and they're kind of um data warehousing data",
    "start": "19640",
    "end": "27160"
  },
  {
    "text": "mining stuff we do stuff for State of California and PG that's related to energy efficiency um big data sets and",
    "start": "27160",
    "end": "33680"
  },
  {
    "text": "one of the larger um Jengo applications that I know of way too many lines of code and it's been around since before D",
    "start": "33680",
    "end": "40160"
  },
  {
    "text": "Jango 0.96 so it's one of these you know gradually evolving kinds of things um",
    "start": "40160",
    "end": "45760"
  },
  {
    "text": "I've been doing python work fulltime for about five years and before that had",
    "start": "45760",
    "end": "50960"
  },
  {
    "text": "played around with python a little bit um writing games py game and it's interesting to me how people end up",
    "start": "50960",
    "end": "57440"
  },
  {
    "text": "coming to Python A lot of times it seems like there's an interesting app or library that people want D Jango is kind",
    "start": "57440",
    "end": "63079"
  },
  {
    "text": "of a hot one the web framework people learn the framework but a gooey tool like a tcltk so people know the",
    "start": "63079",
    "end": "69479"
  },
  {
    "text": "framework but then maybe are a little vague on the language which described me for a little while at least um and my",
    "start": "69479",
    "end": "75280"
  },
  {
    "text": "background as a computer science major and have been doing programming full-time for since 98 whenever whatever that",
    "start": "75280",
    "end": "83040"
  },
  {
    "text": "makes whatever that makes this um go ahead and pull up uh this is just a page for my blog some additional resources",
    "start": "83040",
    "end": "89759"
  },
  {
    "text": "that that we're going to refer to and bookmark this page we probably won't touch it too much on the first day um but lots of references to additional",
    "start": "89759",
    "end": "95799"
  },
  {
    "text": "documentation and some additional Labs that we're going to do the next thing I was going to just touch on real quickly so everybody's got python some version",
    "start": "95799",
    "end": "102159"
  },
  {
    "text": "of two installed Windows by default when you install it um we're going to be running python from the command line a few places if everybody would just make",
    "start": "102159",
    "end": "108560"
  },
  {
    "text": "sure you open the shell on whatever operating system you've got and type Python and make sure you actually get into interactive python shell um and it",
    "start": "108560",
    "end": "115439"
  },
  {
    "text": "probably won't work on Windows and I will help you at the break add python to your path variable",
    "start": "115439",
    "end": "120680"
  },
  {
    "text": "okay um if you would go ahead and download uh the link is up here in the browser at simonf franklin.com python",
    "start": "120680",
    "end": "126079"
  },
  {
    "text": "fundamentals .pdf and it's an 80 page PDF so I'm sorry if I um I don't think I",
    "start": "126079",
    "end": "131879"
  },
  {
    "text": "got that sent out to the class beforehand to review so go ahead and download that and let's just walk through the um topics we're going to",
    "start": "131879",
    "end": "138840"
  },
  {
    "text": "cover uh while you're doing that um I hate to hear myself talk all day so our classes are kind of structured about",
    "start": "138840",
    "end": "144480"
  },
  {
    "text": "half lab and half lecture um feel free to interrupt me at any time going to be very real relaxed about our interaction",
    "start": "144480",
    "end": "151760"
  },
  {
    "text": "I I don't want anybody to get left behind it's 4 days uh we're going to cover about a third of the curriculum",
    "start": "151760",
    "end": "157200"
  },
  {
    "text": "the first day hopefully uh we'll slow down after that but if at any point anybody isn't clear on anything um we've",
    "start": "157200",
    "end": "163239"
  },
  {
    "text": "got enough Flex time built in to stop and make sure everybody's caught up uh today's topics we're going to just talk about um the basics of running your",
    "start": "163239",
    "end": "169879"
  },
  {
    "text": "python programs review the interactive interpreter running scripts make sure everybody can do that um we'll talk",
    "start": "169879",
    "end": "175000"
  },
  {
    "text": "about variables and the simple built-in types for python discuss syntax which with python doesn't take very long uh",
    "start": "175000",
    "end": "181360"
  },
  {
    "text": "branching and looping and then we'll get into the advanced built-in types uh that'll take us a good chunk of the rest",
    "start": "181360",
    "end": "187120"
  },
  {
    "text": "of the day but kind of hope to cover all that this morning so let's um let's get started with running python programs and",
    "start": "187120",
    "end": "193640"
  },
  {
    "text": "make sure that we're all kind of set up for that everybody tried from a command line to type Python and they got",
    "start": "193640",
    "end": "199400"
  },
  {
    "text": "something you should have like three little [Music] arrows and if you're on Windows you can",
    "start": "199400",
    "end": "206400"
  },
  {
    "text": "also um if you're on Windows you can also run the idle python shell which should be under the",
    "start": "206400",
    "end": "211519"
  },
  {
    "text": "start menu so if you check out the start menu in all programs your new python install",
    "start": "211519",
    "end": "218239"
  },
  {
    "text": "up there has idle which says python guy but funnily enough is actually just a",
    "start": "218239",
    "end": "223640"
  },
  {
    "text": "windows wrapper around a interactive python shell yeah and the other thing I should mention I guess like python 101",
    "start": "223640",
    "end": "230239"
  },
  {
    "text": "uh so you you go to python.org to download python python. at least it used to be with some uh Infamous porn site so",
    "start": "230239",
    "end": "237200"
  },
  {
    "text": "I actually have that in my host file now not the p up um you can actually go with 2.7 is",
    "start": "237200",
    "end": "243680"
  },
  {
    "text": "the newest 2x release so anything newer than 2.5 is good set yep",
    "start": "243680",
    "end": "250959"
  },
  {
    "text": "yes and you can download the MSI installer which is down a little bit just scroll down to touch and for",
    "start": "250959",
    "end": "256880"
  },
  {
    "text": "everybody else I think you can type uh the hello world is the first quote unquote lab here if you pull",
    "start": "256880",
    "end": "264720"
  },
  {
    "text": "up your PDF we're in section 1.2 and just note the uh the basic features of",
    "start": "264720",
    "end": "270800"
  },
  {
    "text": "your interactive interpreter so if you are from a language that's less dynamic or you haven't seen a uh repple loop",
    "start": "270800",
    "end": "277759"
  },
  {
    "text": "before you can just type in code and it executes uh one line at a time it's got a few uh niceties for when you're doing",
    "start": "277759",
    "end": "283840"
  },
  {
    "text": "things like defining functions and not to execute code immediately um it evaluates everything every expression so",
    "start": "283840",
    "end": "290759"
  },
  {
    "text": "if you type a string value for instance it just prints out the string value it's evaluated the expression um and there's",
    "start": "290759",
    "end": "297759"
  },
  {
    "text": "a few built-in special variables like the underscore variable uh in the interactive shell is always the result",
    "start": "297759",
    "end": "303639"
  },
  {
    "text": "of the last expression that's run uh aside from that python has really rich introspection",
    "start": "303639",
    "end": "311440"
  },
  {
    "text": "capabilities so try typing uh help and",
    "start": "311440",
    "end": "316919"
  },
  {
    "text": "parentheses stir and I'm going to do this on the screen where everybody can",
    "start": "316919",
    "end": "323360"
  },
  {
    "text": "see while we're waiting for that one more python setup to run",
    "start": "323360",
    "end": "329759"
  },
  {
    "text": "um string is the base class for python strings we'll talk about that at some point in the future but just to note um",
    "start": "337080",
    "end": "343440"
  },
  {
    "text": "all python objects and classes variables instances are kind of introspect help is",
    "start": "343440",
    "end": "350000"
  },
  {
    "text": "one of the standard ways of looking at a python object of some kind and it has a nicely formatted uh description that",
    "start": "350000",
    "end": "356160"
  },
  {
    "text": "tells you what you can do with whatever it is that you're looking up it's also worth knowing",
    "start": "356160",
    "end": "362039"
  },
  {
    "text": "about dur dir we also look at the string built-in",
    "start": "362039",
    "end": "369880"
  },
  {
    "text": "which is a much more uh tur it just lists the members of dur um and these",
    "start": "369880",
    "end": "375919"
  },
  {
    "text": "are both built-ins just a couple more things to play around with in",
    "start": "375919",
    "end": "381000"
  },
  {
    "text": "the interactive shell built-in function",
    "start": "381520",
    "end": "387400"
  },
  {
    "text": "locals tells you every uh every name that's defined in the uh local",
    "start": "387400",
    "end": "394960"
  },
  {
    "text": "module and there's also a corresponding globals that'll tell you every name that's defined um globally not just in",
    "start": "394960",
    "end": "400160"
  },
  {
    "text": "the local namespace uh and the first little lab thing to make sure that everything was working right was to type hello and",
    "start": "400160",
    "end": "409440"
  },
  {
    "text": "notice that it prints hello um throughout the class you're going to be playing in your interactive interpreter typing in Python code samples figuring",
    "start": "409440",
    "end": "416000"
  },
  {
    "text": "out syntax seeing what works and doesn't uh for all the labs though we're going to edit text files and run them with",
    "start": "416000",
    "end": "422319"
  },
  {
    "text": "python um and so let's make sure you can do that so if you've got a code editor of some kind or a plain text editor",
    "start": "422319",
    "end": "429080"
  },
  {
    "text": "works if you're on Windows like I said a notepad++ is a good",
    "start": "429080",
    "end": "434800"
  },
  {
    "text": "choice open up a file called hello.py and you might as well make yourself a director you're going to work",
    "start": "436520",
    "end": "441759"
  },
  {
    "text": "from um because we're going to have a bunch of bunch of labs in the same directory and hello.py can contain any",
    "start": "441759",
    "end": "448360"
  },
  {
    "text": "valid python code I'm just going to print",
    "start": "448360",
    "end": "453160"
  },
  {
    "text": "hello uh yes there is and we'll talk about that in just a",
    "start": "464240",
    "end": "469280"
  },
  {
    "text": "second and you should be able to run your script you just made your text file with python code in it by typing Python",
    "start": "476319",
    "end": "483159"
  },
  {
    "text": "and hello.py and all the Mac people should be able to do",
    "start": "483159",
    "end": "488319"
  },
  {
    "text": "that um for you Windows users I'm going to caucus with you at lunchtime and we're going to do a replacement console",
    "start": "488319",
    "end": "494639"
  },
  {
    "text": "but we're actually ready to get started now um one other way which is only I guess for the um Mac people but very",
    "start": "494639",
    "end": "502319"
  },
  {
    "text": "common convention writing Python scripts is a start them with a pound shebang line that specifies um what interpreter",
    "start": "502319",
    "end": "507960"
  },
  {
    "text": "so if you would type in your python script at the very",
    "start": "507960",
    "end": "513640"
  },
  {
    "text": "top uh only applying to Mac or Unix",
    "start": "513640",
    "end": "519919"
  },
  {
    "text": "people and if I could",
    "start": "520919",
    "end": "524479"
  },
  {
    "text": "type so people have seen that probably on Mac or Unix systems it specifies what",
    "start": "526760",
    "end": "531800"
  },
  {
    "text": "program to use to run it and if you make the script executable you can just run it directly then you wouldn't have to say python hello.py",
    "start": "531800",
    "end": "539880"
  },
  {
    "text": "yeah so exactly which if you're on Mac is probably not at user bin python um",
    "start": "539880",
    "end": "545600"
  },
  {
    "text": "I'm on Ubuntu Linux here and if you're on Windows this doesn't work at all but Unix style systems let you run scripts",
    "start": "545600",
    "end": "551000"
  },
  {
    "text": "and specify the um executable that will run them and this is the this is the common convention yeah so let's talk about what",
    "start": "551000",
    "end": "557800"
  },
  {
    "text": "we can actually put in our Python scripts we're going to talk about the basic uh types in Python and",
    "start": "557800",
    "end": "564800"
  },
  {
    "text": "manipulating them and kind of the one thing you need to understand about how python manag is variables so there's a",
    "start": "564800",
    "end": "570760"
  },
  {
    "text": "bunch of types uh when we write programs we want to do things like manipulate strings do math um and those are our",
    "start": "570760",
    "end": "576399"
  },
  {
    "text": "basic types python has strings you've already done a string with quotes around it someone asked earlier if there's any",
    "start": "576399",
    "end": "583600"
  },
  {
    "text": "significance to the quotes and you can make strings in lots of different ways in",
    "start": "583600",
    "end": "588680"
  },
  {
    "text": "Python let",
    "start": "588680",
    "end": "591839"
  },
  {
    "text": "me you can use single quotes you can use double",
    "start": "596640",
    "end": "603839"
  },
  {
    "text": "quotes you can use triple",
    "start": "604959",
    "end": "609519"
  },
  {
    "text": "quotes and there's a bunch of specifiers you can use before any quote Mark at all",
    "start": "610279",
    "end": "617079"
  },
  {
    "text": "that have different meanings um the significance of the different kinds of quote marks one is just convenience if",
    "start": "617079",
    "end": "622240"
  },
  {
    "text": "you're going to print a string that has a single quote in it",
    "start": "622240",
    "end": "629560"
  },
  {
    "text": "you can't do that that makes sense to people right a string is surrounded by quotes and then there's kind of a quote",
    "start": "629560",
    "end": "634680"
  },
  {
    "text": "Mark in the middle and so python gets confused and doesn't understand how to parse that line so for convenience you",
    "start": "634680",
    "end": "642560"
  },
  {
    "text": "can put double quotes and orders restored to the Galaxy",
    "start": "642959",
    "end": "649040"
  },
  {
    "text": "um single quote single quoted strings will allow you to embed characters like",
    "start": "649040",
    "end": "655320"
  },
  {
    "text": "new lines with Slash escapes doubly and triply quoted strings",
    "start": "655320",
    "end": "661440"
  },
  {
    "text": "won't um and if you already know what that is you know that's a useful feature if you don't we'll talk about it here in",
    "start": "661440",
    "end": "667079"
  },
  {
    "text": "a little bit uh numbers python numbers are integers by default and they don't",
    "start": "667079",
    "end": "672639"
  },
  {
    "text": "need quotes you just type them in all your common mathematical operations work",
    "start": "672639",
    "end": "677760"
  },
  {
    "text": "as you would expect them two with one exception in Python 2 and this",
    "start": "677760",
    "end": "684200"
  },
  {
    "text": "will trip you up at first what do you expect to happen when I hit enter",
    "start": "684200",
    "end": "691000"
  },
  {
    "text": "you would think that it would say 4.5 because that's actually the answer um but by default division in Python 2",
    "start": "693399",
    "end": "700360"
  },
  {
    "text": "works as integer division it rounds it to an integer yes",
    "start": "700360",
    "end": "706360"
  },
  {
    "text": "down it's a floor if you want actual float division",
    "start": "706360",
    "end": "712720"
  },
  {
    "text": "one of the if you want actual float division the divisor has to be a float type and we can specify float fls with a",
    "start": "712720",
    "end": "719560"
  },
  {
    "text": "decimal point just like you'd expect to arbitrary levels of precision more or less python's um internal display may",
    "start": "719560",
    "end": "728200"
  },
  {
    "text": "show numbers in unexpected format so you see I typed in 2.01 and it responded with 2.0",
    "start": "728200",
    "end": "736000"
  },
  {
    "text": "0999 Etc uh this is an artifact between going back and forth between binary numbers and decimal numbers uh it",
    "start": "736000",
    "end": "743199"
  },
  {
    "text": "doesn't affect the Precision very much there a built-in decimal module in case you're doing things with finances that",
    "start": "743199",
    "end": "748880"
  },
  {
    "text": "need um that need exact decimal places so you need exact representation of decimal",
    "start": "748880",
    "end": "754760"
  },
  {
    "text": "places and we might talk about that on the last day as",
    "start": "754760",
    "end": "759240"
  },
  {
    "text": "well yeah so by default it's showing the uh Native",
    "start": "765279",
    "end": "771160"
  },
  {
    "text": "representation if I wanted to constrain it I would change it to a a string and",
    "start": "775440",
    "end": "780560"
  },
  {
    "text": "the strings have a string formatting language that has like if you use the printf or S printf functions in a",
    "start": "780560",
    "end": "785680"
  },
  {
    "text": "variety of languages cc++ JavaScript um similar type specifiers we'll talk about",
    "start": "785680",
    "end": "791240"
  },
  {
    "text": "that later as well so don't let that um throw you very much and one other",
    "start": "791240",
    "end": "797600"
  },
  {
    "text": "operator to get in there real quick 9 divided by to did the decimal",
    "start": "797600",
    "end": "809079"
  },
  {
    "text": "the percent sign is the modulus operator people familiar with",
    "start": "809800",
    "end": "815040"
  },
  {
    "text": "modulus basically the remainder of a division operation and it's frequently used for looping so 9 divid two is",
    "start": "815040",
    "end": "823199"
  },
  {
    "text": "actually Four with a remainder of one and it's giving you the",
    "start": "823199",
    "end": "827839"
  },
  {
    "text": "remainder um one other note on operations uh with strings the default operator in Python is string",
    "start": "830120",
    "end": "836759"
  },
  {
    "text": "concatenation so this is the way to concatenate",
    "start": "836759",
    "end": "845160"
  },
  {
    "text": "strings with a plus sign but it actually works just fine if you",
    "start": "845160",
    "end": "850440"
  },
  {
    "text": "take the plus sign out the assumed operator um is actually plus which is",
    "start": "850440",
    "end": "856600"
  },
  {
    "text": "concatenation for Strings floats we're skipping over complex uh",
    "start": "856600",
    "end": "863120"
  },
  {
    "text": "literals but that's our basic types strings numbers and numbers can be integers or floats and then",
    "start": "863120",
    "end": "871040"
  },
  {
    "text": "here on the first day we threw out what makes python kind of interesting special different probably than languages that you've worked",
    "start": "871120",
    "end": "878040"
  },
  {
    "text": "with people familiar with the labels static typing Dynamic typing",
    "start": "878040",
    "end": "885480"
  },
  {
    "text": "strong typing weak typing okay so in other languages that you may have programmed in you have to",
    "start": "885480",
    "end": "891639"
  },
  {
    "text": "pred declare your variables right you say VAR int",
    "start": "891639",
    "end": "897000"
  },
  {
    "text": "X or charar 30 string buff you say what",
    "start": "897000",
    "end": "902120"
  },
  {
    "text": "the variable is going to contain the type of it so python doesn't have that concept at all you don't pred declare variables um which means that it is",
    "start": "902120",
    "end": "909360"
  },
  {
    "text": "dynamically typed and these are important so I'm going to write them on the board um so a lot of languages I've",
    "start": "909360",
    "end": "916360"
  },
  {
    "text": "heard people say Java C C++ are statically typed to declare a variable",
    "start": "916360",
    "end": "921920"
  },
  {
    "text": "you specify what kind it is and maybe how much storage space it's going to use beforehand python is dynamically typed",
    "start": "921920",
    "end": "928720"
  },
  {
    "text": "so just saying X is equal to string creates a variable that's equal to the",
    "start": "928720",
    "end": "934079"
  },
  {
    "text": "quoted string you don't have to worry about predetermining how much space it's going to take up or what kind it is and you can say x is equal to 5 a little",
    "start": "934079",
    "end": "940560"
  },
  {
    "text": "later on and this is not an error as far as the language is concerned it's",
    "start": "940560",
    "end": "945920"
  },
  {
    "text": "dynamically typed there's a related concept strong versus weak typing and don't be confused by the fact that I've",
    "start": "945920",
    "end": "952120"
  },
  {
    "text": "written it um tying up its uh orthogonal Concept in some ways strong versus weak",
    "start": "952120",
    "end": "958040"
  },
  {
    "text": "typing is basically whether the language implicitly handles changes of type for you or not so as an example um many",
    "start": "958040",
    "end": "966199"
  },
  {
    "text": "languages let you use all sorts of variables in a Boolean context you can say ifx and X can be a string it can be",
    "start": "966199",
    "end": "973040"
  },
  {
    "text": "a number it can be a list it can be an array and it'll come up with some sort of true or false value for you and",
    "start": "973040",
    "end": "979360"
  },
  {
    "text": "that's really useful um that's an example of weak typing in action it",
    "start": "979360",
    "end": "985279"
  },
  {
    "text": "sometimes is a big gotcha languages like JavaScript the equality operator is",
    "start": "985279",
    "end": "990600"
  },
  {
    "text": "really hard to to manage because you can compare two objects of different type and the runtime will automatically",
    "start": "990600",
    "end": "996959"
  },
  {
    "text": "figure out what types they ought to be to compare them so you compare um a number zero to a string zero and it'll",
    "start": "996959",
    "end": "1004880"
  },
  {
    "text": "say I think you're doing string comparison here so I'll put quotes around the number on the left hand side and yes these two things are in fact",
    "start": "1004880",
    "end": "1011160"
  },
  {
    "text": "equal that's weak typing strong typing on the other hand requires that you manage the types of your variables",
    "start": "1011160",
    "end": "1017120"
  },
  {
    "text": "yourself and while python um does have support for evaluating things in a Boolean",
    "start": "1017120",
    "end": "1024000"
  },
  {
    "text": "context it is strongly typed it's Dynamic and strongly typed it's kind of this column",
    "start": "1024000",
    "end": "1029798"
  },
  {
    "text": "here which",
    "start": "1029799",
    "end": "1033000"
  },
  {
    "text": "means some languages will automatically let you",
    "start": "1034959",
    "end": "1039959"
  },
  {
    "text": "do this I have a string hello plus the number four and python says hey hang on",
    "start": "1043559",
    "end": "1049960"
  },
  {
    "text": "you're making some kind of mistake I have a string and an INT I don't know how to add those two things and if you",
    "start": "1049960",
    "end": "1055559"
  },
  {
    "text": "want to treated a string concatenation you have to",
    "start": "1055559",
    "end": "1060880"
  },
  {
    "text": "specify yourself manage the types of your variables yourself and in this case I'm converting my number to a string so",
    "start": "1060880",
    "end": "1068400"
  },
  {
    "text": "it's dynamically typed there's no pred declaration you can change the types of your variables at any time but it is",
    "start": "1068400",
    "end": "1074240"
  },
  {
    "text": "strongly typed the type of your variables does matter um as we'll see",
    "start": "1074240",
    "end": "1080799"
  },
  {
    "text": "and then a couple of quick notes on internals so you may be used to",
    "start": "1085440",
    "end": "1091320"
  },
  {
    "text": "languages that let you manage um your memory use for instance you pre-allocate",
    "start": "1091320",
    "end": "1096480"
  },
  {
    "text": "how large uh a string variable is and python doesn't really let you do",
    "start": "1096480",
    "end": "1101919"
  },
  {
    "text": "that it in fact gives you very few tools for managing your memory it has a reference counting uh garbage collection",
    "start": "1101919",
    "end": "1108480"
  },
  {
    "text": "in the default implementation it does give you a few things for looking at your variables and",
    "start": "1108480",
    "end": "1114679"
  },
  {
    "text": "let's try a couple of those",
    "start": "1114679",
    "end": "1118480"
  },
  {
    "text": "out so everybody that statement line 23 makes sense I have a variable whose name",
    "start": "1122400",
    "end": "1128760"
  },
  {
    "text": "is X and I set it equal to I assigned it a value that's a string",
    "start": "1128760",
    "end": "1134720"
  },
  {
    "text": "hello um",
    "start": "1134720",
    "end": "1138720"
  },
  {
    "text": "ID is a built-in function and this is as close as python comes to pointers and references if you're used that from",
    "start": "1141200",
    "end": "1147200"
  },
  {
    "text": "other languages uh it's depending on implementation more or less telling you where in memory it is storing this",
    "start": "1147200",
    "end": "1153760"
  },
  {
    "text": "particular variable and interestingly",
    "start": "1153760",
    "end": "1159679"
  },
  {
    "text": "you'll notice that the ID for two variables in a row is exactly the same the runtime engine is able to say I",
    "start": "1170640",
    "end": "1177720"
  },
  {
    "text": "have two variables they're both pointing at a",
    "start": "1177720",
    "end": "1182880"
  },
  {
    "text": "immutable variable type and so I'm going to have them both point to the same thing you can't access these pointers",
    "start": "1182880",
    "end": "1189159"
  },
  {
    "text": "you can't change them you can't do python uh or you can't do pointer arithmetic in Python but it does let you",
    "start": "1189159",
    "end": "1195400"
  },
  {
    "text": "check and Peak on what it's doing under the covers uh this is the other important concept to get",
    "start": "1195400",
    "end": "1201799"
  },
  {
    "text": "from day one okay and you'll have to put up with",
    "start": "1201799",
    "end": "1208880"
  },
  {
    "text": "my um crappy illustrations here but variable assignment when we do variable",
    "start": "1208880",
    "end": "1214440"
  },
  {
    "text": "assignment you don't have to worry about references and pointers you do have to worry about mutable versus immutable",
    "start": "1214440",
    "end": "1220520"
  },
  {
    "text": "types in Python and the difference is mutable types can be changed and",
    "start": "1220520",
    "end": "1226280"
  },
  {
    "text": "immutable types can't be changed changed five uh integers are an",
    "start": "1226280",
    "end": "1233280"
  },
  {
    "text": "immutable type in the sense that five always is a five you can't make five be",
    "start": "1233280",
    "end": "1240159"
  },
  {
    "text": "something different and variable assignment in Python works by labeling",
    "start": "1240159",
    "end": "1245600"
  },
  {
    "text": "when I say x is equal to five like I did down here what the python runtime engine has basically done is put a five in",
    "start": "1245600",
    "end": "1252640"
  },
  {
    "text": "storage and added a tag to it that has the name of my variable when I said",
    "start": "1252640",
    "end": "1260120"
  },
  {
    "text": "it added a tag to the exact same variable and why can it add a tag to the",
    "start": "1260120",
    "end": "1266679"
  },
  {
    "text": "same variable five is immutable it's fine if both X and Y are pointing at the same value because",
    "start": "1266679",
    "end": "1275200"
  },
  {
    "text": "that value cannot change so let's talk about some mutable types um confusingly",
    "start": "1275200",
    "end": "1281640"
  },
  {
    "text": "to people from other languages strings in Python are immutable so I can do the",
    "start": "1281640",
    "end": "1287159"
  },
  {
    "text": "same ID thing and your strings aren't guaranteed to be interned to the same location but they may well",
    "start": "1287159",
    "end": "1294360"
  },
  {
    "text": "be it means this value won't ever change we're guaranteed that five is five and",
    "start": "1304400",
    "end": "1310799"
  },
  {
    "text": "it doesn't even make sense to your mind to think how can I change five but this will make it a little bit",
    "start": "1310799",
    "end": "1316919"
  },
  {
    "text": "clearer what if the value of I had was a string hello and I said X is equal to",
    "start": "1316919",
    "end": "1325000"
  },
  {
    "text": "hello and that means it puts a tag upon a particular location hello lots of",
    "start": "1325840",
    "end": "1331600"
  },
  {
    "text": "other languages have mutable strings so I could in another language change this",
    "start": "1331600",
    "end": "1338159"
  },
  {
    "text": "e to an I I can't do that actually this string is immutable I can",
    "start": "1338159",
    "end": "1344600"
  },
  {
    "text": "create new strings I can create copies of strings but I can't change a string once I've created it and that also allows",
    "start": "1344600",
    "end": "1352240"
  },
  {
    "text": "python to turn all strings to the same location and if I put another variable assigned to the same constant string",
    "start": "1352240",
    "end": "1358720"
  },
  {
    "text": "it'll probably end up uh pointing at the same memory",
    "start": "1358720",
    "end": "1363279"
  },
  {
    "text": "location nope it knows python knows what kinds of variables are immutable and when you create them it uh does",
    "start": "1367159",
    "end": "1374679"
  },
  {
    "text": "different things based on whether they're mutable or immutable so last example here let's so jumping ahead just",
    "start": "1374679",
    "end": "1382960"
  },
  {
    "text": "slightly let's talk about lists this will be our first mutable data",
    "start": "1383799",
    "end": "1390520"
  },
  {
    "text": "type the Syntax for it is square braces and a comma separated list of",
    "start": "1390600",
    "end": "1396640"
  },
  {
    "text": "items in this case I'm putting a comma separated list of integers and I have a",
    "start": "1396640",
    "end": "1402039"
  },
  {
    "text": "list we'll talk about all the things that you can do with lists in just a little bit but lists are mutable I can",
    "start": "1402039",
    "end": "1411799"
  },
  {
    "text": "say and that's um assigning to the oneth position of my list a new",
    "start": "1415200",
    "end": "1422520"
  },
  {
    "text": "integer n and it changed the list in place and what that means is if I say x",
    "start": "1422520",
    "end": "1430960"
  },
  {
    "text": "is equal to a list of Zer and one and Y is equal to a list of 0er and",
    "start": "1430960",
    "end": "1438240"
  },
  {
    "text": "one one the python runtime engine does something different than it did with",
    "start": "1438240",
    "end": "1443559"
  },
  {
    "text": "just integers or strings it doesn't apply the same label it doesn't apply",
    "start": "1443559",
    "end": "1448640"
  },
  {
    "text": "two different labels to the same variable to the same value because it knows that the value could",
    "start": "1448640",
    "end": "1455440"
  },
  {
    "text": "change so it actually create two separate lists and apply two separate variables to",
    "start": "1455440",
    "end": "1461520"
  },
  {
    "text": "them and again yeah this isn't something that you can change but it is something that you need to be aware of and there's a bunch of kind of gotchas coming from",
    "start": "1461520",
    "end": "1467679"
  },
  {
    "text": "other languages that we'll see as we go along just throw the concepts out here um early you're guaranteed that if you",
    "start": "1467679",
    "end": "1473559"
  },
  {
    "text": "do an ID of X and an ID of",
    "start": "1473559",
    "end": "1480240"
  },
  {
    "text": "Y that they'd be pointing to different spots they really are different",
    "start": "1480240",
    "end": "1487480"
  },
  {
    "text": "variables um the other kind of basic type that I hadn't yet mentioned is booleans so we've done numbers which are",
    "start": "1488480",
    "end": "1494440"
  },
  {
    "text": "integers and floats strings and booleans python has two built-in I true with a capital",
    "start": "1494440",
    "end": "1503360"
  },
  {
    "text": "T U well you can kind of think about strings as containing more than one variable and lots of other languages let",
    "start": "1510960",
    "end": "1516080"
  },
  {
    "text": "you assign to a particular index in a string and python lets you look at the indexes of a string but you can't change",
    "start": "1516080",
    "end": "1521600"
  },
  {
    "text": "them um you can't do in place editing of a string basically you have to compose a brand new one",
    "start": "1521600",
    "end": "1529200"
  },
  {
    "text": "and the whole mutable immutable distinction plays into variable assignment so my Line's 39 and 40 here I",
    "start": "1536799",
    "end": "1544559"
  },
  {
    "text": "made a variable called X that's pointing to a list and then I made a new variable called Y and assigned it X what's the",
    "start": "1544559",
    "end": "1553120"
  },
  {
    "text": "python runtime doing here",
    "start": "1553120",
    "end": "1558519"
  },
  {
    "text": "I changed X and that also changed",
    "start": "1568960",
    "end": "1573760"
  },
  {
    "text": "y yeah and again",
    "start": "1575960",
    "end": "1580120"
  },
  {
    "text": "um I don't want to get confused by saying reference with the implication of any sort of pointer stuff going on but",
    "start": "1581679",
    "end": "1589080"
  },
  {
    "text": "the first statement I did made a tag called X and assigned it to a",
    "start": "1589080",
    "end": "1596480"
  },
  {
    "text": "list the second statement Y is equal to X",
    "start": "1596480",
    "end": "1601679"
  },
  {
    "text": "says the value of the variable X gets a new label put on",
    "start": "1601679",
    "end": "1608840"
  },
  {
    "text": "it that's why say that",
    "start": "1609360",
    "end": "1616320"
  },
  {
    "text": "again so it is still mutable mutable and immutable is determined by the data type",
    "start": "1616320",
    "end": "1623440"
  },
  {
    "text": "and has nothing to do with how it's assigned and in this case since this is a mutable variable I've got two tags on",
    "start": "1623440",
    "end": "1630039"
  },
  {
    "text": "it if I change it by using one tag the other tag will see the changes it doesn't make sense when we",
    "start": "1630039",
    "end": "1636640"
  },
  {
    "text": "come back to this context to say how do I change five if I say x is equal to 5 Y is equal to 5 x is equal to 6 I didn't",
    "start": "1636640",
    "end": "1645000"
  },
  {
    "text": "change this value I took the tag X and put it on a different value something place else and so y will still be equal",
    "start": "1645000",
    "end": "1650360"
  },
  {
    "text": "to five does that make sense and and we kind of automatically",
    "start": "1650360",
    "end": "1657679"
  },
  {
    "text": "think through that with integers",
    "start": "1657679",
    "end": "1662120"
  },
  {
    "text": "um I say x is equal to 5 and Y is equal to 5 and then I say x is equal to 9",
    "start": "1665480",
    "end": "1671159"
  },
  {
    "text": "nobody really expects y to be equal to 9 like that I changed the five itself into",
    "start": "1671159",
    "end": "1676200"
  },
  {
    "text": "something different because it itself is an immutable variable and that kind of instinctively makes sense to us but in",
    "start": "1676200",
    "end": "1681679"
  },
  {
    "text": "Python strings as well are immutable um which is the only surprising one and our immutable types are lists and",
    "start": "1681679",
    "end": "1687399"
  },
  {
    "text": "dictionaries that we'll talk about in a little bit but let's finish up booleans and a little bit more syntax",
    "start": "1687399",
    "end": "1692760"
  },
  {
    "text": "first and",
    "start": "1692760",
    "end": "1696760"
  },
  {
    "text": "so booleans I said that there were two predefined values for true and",
    "start": "1708919",
    "end": "1714919"
  },
  {
    "text": "false and that's it those are the only things that are actually true or actually false uh there are a variety of",
    "start": "1714919",
    "end": "1722080"
  },
  {
    "text": "operators that work on true and false uh like you would",
    "start": "1722080",
    "end": "1727919"
  },
  {
    "text": "expect there's equals equals people familiar with this operator from other languages it's an equality check does",
    "start": "1727919",
    "end": "1733320"
  },
  {
    "text": "the thing on the left hand side is it the same as in some sense the thing on the right hand side",
    "start": "1733320",
    "end": "1740039"
  },
  {
    "text": "and if I can type",
    "start": "1744559",
    "end": "1747640"
  },
  {
    "text": "here it's just no it's not you can do it without but python syntax there's a",
    "start": "1757440",
    "end": "1766080"
  },
  {
    "text": "python is actually very um anal about the look of the code for reasons we'll explain in a second um but generally the",
    "start": "1766080",
    "end": "1772880"
  },
  {
    "text": "convention is to leave spaces around operators and there's actually a big long list of how to write beautifully",
    "start": "1772880",
    "end": "1778000"
  },
  {
    "text": "formatted python code um there's also a not",
    "start": "1778000",
    "end": "1785200"
  },
  {
    "text": "operator in addition to uh",
    "start": "1786840",
    "end": "1792559"
  },
  {
    "text": "python is case case sensitive yes",
    "start": "1799440",
    "end": "1804080"
  },
  {
    "text": "not",
    "start": "1840679",
    "end": "1843679"
  },
  {
    "text": "do",
    "start": "1859440",
    "end": "1861600"
  },
  {
    "text": "it which you actually can't use directly in a Boolean context uh there's a not operator there's an is operator which",
    "start": "1866000",
    "end": "1871760"
  },
  {
    "text": "you can use in if statements although you can't directly evaluate them Boolean context there is uh equals and not",
    "start": "1871760",
    "end": "1878080"
  },
  {
    "text": "equals and there's the concept of truthiness um so we mentioned earlier",
    "start": "1878080",
    "end": "1883600"
  },
  {
    "text": "strong and uh weak typing and the idea that you can implicitly evaluate some",
    "start": "1883600",
    "end": "1888880"
  },
  {
    "text": "things in different context python if you cash things to",
    "start": "1888880",
    "end": "1893799"
  },
  {
    "text": "Boolean like a number will return either true or false and it will do some",
    "start": "1894679",
    "end": "1900880"
  },
  {
    "text": "implicit casting for you in um if statements for instance branching",
    "start": "1900880",
    "end": "1906120"
  },
  {
    "text": "statements there's a table in your um curriculum on page six of truthiness",
    "start": "1906120",
    "end": "1913039"
  },
  {
    "text": "and only true and false really are equal to true",
    "start": "1913039",
    "end": "1919840"
  },
  {
    "text": "but lots of things are kind of truthy so zero evaluates to false one or any other",
    "start": "1920720",
    "end": "1928440"
  },
  {
    "text": "number evaluates the",
    "start": "1928440",
    "end": "1931518"
  },
  {
    "text": "true it isn't actually true",
    "start": "1937960",
    "end": "1943080"
  },
  {
    "text": "so true versus truthy if I say is nine equal to true it is not only true is true only false is",
    "start": "1956360",
    "end": "1963120"
  },
  {
    "text": "false but can I convert the value nine into a true or false value yes I can and",
    "start": "1963120",
    "end": "1969240"
  },
  {
    "text": "it's true can I convert the value zero it's false every other",
    "start": "1969240",
    "end": "1975480"
  },
  {
    "text": "number is true including negative one so if you're coming from another language that has slightly different semantics",
    "start": "1975480",
    "end": "1980960"
  },
  {
    "text": "for uh integer values that might throw you strings",
    "start": "1980960",
    "end": "1987039"
  },
  {
    "text": "e",
    "start": "2037760",
    "end": "2040760"
  },
  {
    "text": "yeah so go back to line 61 uh I asked is nine actually true and it's not the only",
    "start": "2072480",
    "end": "2079919"
  },
  {
    "text": "thing that's true is true and if you do a comparison and say if my variable x equal equal true your variable X better",
    "start": "2079919",
    "end": "2087000"
  },
  {
    "text": "contain a Boolean that is true but if you cast it to a Boolean type it'll look",
    "start": "2087000",
    "end": "2093358"
  },
  {
    "text": "at the content and say oh yeah there's there's a number there so I'll treat it as though or",
    "start": "2093359",
    "end": "2099839"
  },
  {
    "text": "true well and the next thing we want to talk about is branching so if and else statements and",
    "start": "2102920",
    "end": "2110119"
  },
  {
    "text": "this is a good time to mention basic uh python syntax so what is the number one thing that people hate about the",
    "start": "2110119",
    "end": "2116920"
  },
  {
    "text": "language python anybody have any guesses weirdly enough it's also the",
    "start": "2116920",
    "end": "2122560"
  },
  {
    "text": "number one thing people love about language python",
    "start": "2122560",
    "end": "2127119"
  },
  {
    "text": "indentation denotes blocks and this really bugs some people so you're coming",
    "start": "2128640",
    "end": "2134079"
  },
  {
    "text": "from C C++ Java you're used to putting braces around blocks so you have an if statement the body of the if statement",
    "start": "2134079",
    "end": "2140240"
  },
  {
    "text": "is denoted by uh curly braces opening closing curly braces if you have functions the body of the function is",
    "start": "2140240",
    "end": "2146040"
  },
  {
    "text": "denoted by open and closing curly braces python denotes function bodies if",
    "start": "2146040",
    "end": "2151839"
  },
  {
    "text": "statement bodies any substatement by indentation no curly braces uh which",
    "start": "2151839",
    "end": "2157160"
  },
  {
    "text": "makes it important that your indentation remain consistent it also denotes all multi-line statements with an ending",
    "start": "2157160",
    "end": "2163760"
  },
  {
    "text": "colon so I'm going to do uh an if",
    "start": "2163760",
    "end": "2170520"
  },
  {
    "text": "statement this is an if statement if x colon colon ends a multi-line statement",
    "start": "2172920",
    "end": "2179760"
  },
  {
    "text": "and it means the statements below must be indented python doesn't care how you indent if you want to put a single space",
    "start": "2179760",
    "end": "2186400"
  },
  {
    "text": "that's fine if you want to put a tab that's fine as long as you're consistent python programmers are not so forgiving",
    "start": "2186400",
    "end": "2193040"
  },
  {
    "text": "and we demand that you use four spaces as a tab in your favorite editor don't",
    "start": "2193040",
    "end": "2198200"
  },
  {
    "text": "mix tabs and spaces um because that leads to all sorts of ugliness and most",
    "start": "2198200",
    "end": "2204079"
  },
  {
    "text": "uh editors that are set to edit python code will by default insert four spaces as a",
    "start": "2204079",
    "end": "2210079"
  },
  {
    "text": "tab if you prefer tab uh actual tab characters you can use them but um at",
    "start": "2210560",
    "end": "2217319"
  },
  {
    "text": "some point someone else will edit your file and use spaces and you'll have different levels of indentation and python will complain and you'll be",
    "start": "2217319",
    "end": "2223920"
  },
  {
    "text": "confused so an if statement here and you'll notice in my interactive console when I hit enter I'm still indented it's",
    "start": "2223920",
    "end": "2229599"
  },
  {
    "text": "going to let me put multiple lines it's got little dots beside it uh if I was in",
    "start": "2229599",
    "end": "2235400"
  },
  {
    "text": "a I'm using IPython by the way which is um a more convenient interactive",
    "start": "2235400",
    "end": "2241760"
  },
  {
    "text": "console but the same thing applies to the default console",
    "start": "2241760",
    "end": "2247680"
  },
  {
    "text": "the dots there are allowing me to either indent or hit enter and if I hit enter",
    "start": "2248599",
    "end": "2255119"
  },
  {
    "text": "now I've got a syntax error it expected some indented lines underneath a",
    "start": "2255119",
    "end": "2260319"
  },
  {
    "text": "multi-line statement so I indent and if I hit enter again when",
    "start": "2260319",
    "end": "2267040"
  },
  {
    "text": "I've got dots I'm back to the regular console which means that the previous code now is been executed and uh look at",
    "start": "2267040",
    "end": "2273160"
  },
  {
    "text": "my if statement there are no parentheses around the if condition again coming from other languages you might be used",
    "start": "2273160",
    "end": "2279000"
  },
  {
    "text": "to that uh they're optional they're occasionally used for a couple of reasons we'll talk about later but",
    "start": "2279000",
    "end": "2284760"
  },
  {
    "text": "they're optional um I didn't say if",
    "start": "2284760",
    "end": "2290920"
  },
  {
    "text": "x equals",
    "start": "2291040",
    "end": "2294480"
  },
  {
    "text": "true which I know for sure would always be false because I assigned X a number",
    "start": "2302960",
    "end": "2308520"
  },
  {
    "text": "but I did say",
    "start": "2308520",
    "end": "2311160"
  },
  {
    "text": "ifx and if x is something that would be truthy it'll print so if x is coercing X",
    "start": "2316440",
    "end": "2324240"
  },
  {
    "text": "to a Boolean type I don't explicitly say have to say if Bo X and I'm not doing any",
    "start": "2324240",
    "end": "2329520"
  },
  {
    "text": "comparisons here",
    "start": "2329520",
    "end": "2333520"
  },
  {
    "text": "oh is it is it cut",
    "start": "2339000",
    "end": "2342000"
  },
  {
    "text": "off we'll do",
    "start": "2344160",
    "end": "2347599"
  },
  {
    "text": "this sorry about that I've got a monitor up here and it's it's good on this one okay everybody can see what I'm",
    "start": "2352400",
    "end": "2358319"
  },
  {
    "text": "doing and maybe you're trying this out in your console yourself so our most basic unit of",
    "start": "2358319",
    "end": "2364720"
  },
  {
    "text": "branching is conditionals if and else if and",
    "start": "2364720",
    "end": "2371160"
  },
  {
    "text": "else uh if you've used other programming languages python doesn't really contain any surprises here except that else if",
    "start": "2371160",
    "end": "2377560"
  },
  {
    "text": "is typed e all one word",
    "start": "2377560",
    "end": "2383119"
  },
  {
    "text": "so would be a typical if LF else",
    "start": "2411760",
    "end": "2416640"
  },
  {
    "text": "tree and you've probably all done this but we can go line by line through this to evaluate so",
    "start": "2416920",
    "end": "2422040"
  },
  {
    "text": "X is equal to one and looking through",
    "start": "2422040",
    "end": "2427800"
  },
  {
    "text": "our code and this reminds me why I use the other one because I've got line numbers built in uh ifx what is that statement",
    "start": "2429720",
    "end": "2437480"
  },
  {
    "text": "do say that Lou you",
    "start": "2439280",
    "end": "2444480"
  },
  {
    "text": "it it it doesn't say is x equal to true it says if I Cast X to a",
    "start": "2444480",
    "end": "2449960"
  },
  {
    "text": "Boolean would it be true or false so it's doing that cast for us implicitly here it's checking the truthiness of x",
    "start": "2449960",
    "end": "2458240"
  },
  {
    "text": "and if x is truthy which X was equal to one so X is truthy it would print if",
    "start": "2458240",
    "end": "2464240"
  },
  {
    "text": "which it did in fact print if right there it would then pass down to the L",
    "start": "2464240",
    "end": "2469400"
  },
  {
    "text": "if condition and it would not execute the check so if and L if are",
    "start": "2469400",
    "end": "2479000"
  },
  {
    "text": "exclusive only one of them will execute if you say if and the if condition is met met it skips the else ifs and the",
    "start": "2479000",
    "end": "2486240"
  },
  {
    "text": "else right people are familiar with that from other programming languages if I wanted the x equal equal",
    "start": "2486240",
    "end": "2493760"
  },
  {
    "text": "true to run no matter what I just make it a simple If instead of an elsf but elsif and if are exclusive and let me",
    "start": "2493760",
    "end": "2500960"
  },
  {
    "text": "switch back to my IPython for future",
    "start": "2500960",
    "end": "2505560"
  },
  {
    "text": "stuff how do I what so if I want",
    "start": "2506200",
    "end": "2514760"
  },
  {
    "text": "if I want X not to be around is kind of what you're asking",
    "start": "2517640",
    "end": "2522720"
  },
  {
    "text": "right I mentioned locals which shows you all the variables that are in the local",
    "start": "2524359",
    "end": "2529680"
  },
  {
    "text": "namespace and I just ran that function and it returns me a key value pair of all of them and I've",
    "start": "2529680",
    "end": "2536880"
  },
  {
    "text": "got x equals 1 here in the namespace setting it to a value W actually clear it out and there",
    "start": "2536880",
    "end": "2543079"
  },
  {
    "text": "is no integer value to which I can set it there is a built-in nil value in",
    "start": "2543079",
    "end": "2550200"
  },
  {
    "text": "I'm on page 11 uh there's a lab and you can go ahead and edit the hello.py file",
    "start": "2605800",
    "end": "2610839"
  },
  {
    "text": "that you already have created that already runs it's going to use the datetime function that's built in and",
    "start": "2610839",
    "end": "2616640"
  },
  {
    "text": "some if and else if statements basically to check whether it is morning or",
    "start": "2616640",
    "end": "2622079"
  },
  {
    "text": "afternoon and it has the code there uh to get that far on page 11 of your",
    "start": "2622079",
    "end": "2628800"
  },
  {
    "text": "curriculum but let's go ahead and do 4.7 which uh says fix hello. ply to handle",
    "start": "2629319",
    "end": "2634440"
  },
  {
    "text": "evening and the midnight case so evening first uh the script looking at it line",
    "start": "2634440",
    "end": "2639760"
  },
  {
    "text": "by line uh the first line we haven't talked about this at all but it is importing the datetime module and we'll",
    "start": "2639760",
    "end": "2645000"
  },
  {
    "text": "get to modules and name spaces in a bit one of the cool features of python uh it's getting the hour of the current",
    "start": "2645000",
    "end": "2651839"
  },
  {
    "text": "time with a buil-in datetime function it's checking to see",
    "start": "2651839",
    "end": "2657400"
  },
  {
    "text": "if the hour is less than 12 and if it is it's creating a time of day variable set to the string",
    "start": "2657400",
    "end": "2663280"
  },
  {
    "text": "morning else it's saying the time of day is set to afternoon you should extend it to work for evening and also for",
    "start": "2663280",
    "end": "2672480"
  },
  {
    "text": "midnight which should make you wonder what the hour value of midnight is um",
    "start": "2672480",
    "end": "2679079"
  },
  {
    "text": "and to do this lab let's just remember the stuff we've already talked",
    "start": "2679079",
    "end": "2685558"
  },
  {
    "text": "about it is yes it is python uh is known as the batteries included language it has a really extensive standard library",
    "start": "2689520",
    "end": "2695440"
  },
  {
    "text": "to do tons and tons of stuff and it has a um richly expressive Syntax for",
    "start": "2695440",
    "end": "2701160"
  },
  {
    "text": "managing modules and packages of code and you're exactly right there is a module called date time that defines a",
    "start": "2701160",
    "end": "2707559"
  },
  {
    "text": "bunch of different functions like date and time date time is one of them so we're importing the datetime module from",
    "start": "2707559",
    "end": "2713760"
  },
  {
    "text": "the datetime package here uh and stuff we've already talked about if you're",
    "start": "2713760",
    "end": "2718880"
  },
  {
    "text": "curious about how datetime works you could use the help function on datetime",
    "start": "2718880",
    "end": "2724359"
  },
  {
    "text": "and it'll tell you all about it it's a class that you can initialize with a date it's got some built-in methods you",
    "start": "2724359",
    "end": "2731680"
  },
  {
    "text": "can ignore all the methods that start with two underscores we'll talk about those in a while those are special um but after that it's got a bunch of",
    "start": "2731680",
    "end": "2737520"
  },
  {
    "text": "methods like time and it tells you what the time method does here in the help",
    "start": "2737520",
    "end": "2743800"
  },
  {
    "text": "listing uh if you are using a nice editor so the default python editor is not a particularly nice editor I'd",
    "start": "2743800",
    "end": "2749599"
  },
  {
    "text": "encourage you if you're on Mac to install IPython if you're on Windows you're using Idol which um has some of these features built in but I'm using",
    "start": "2749599",
    "end": "2756599"
  },
  {
    "text": "ipy Pyon here sorry I'm still on the standard one I'm using IPython",
    "start": "2756599",
    "end": "2763920"
  },
  {
    "text": "here and IPython uses Python's introspective capabilities to do nice",
    "start": "2769200",
    "end": "2776040"
  },
  {
    "text": "rich tab completion so I type date time dot which is how you access a member and I hit the Tab Key and it shows me",
    "start": "2776040",
    "end": "2781480"
  },
  {
    "text": "everything I could possibly start typing and I start typing and it shows me what's left",
    "start": "2781480",
    "end": "2788880"
  },
  {
    "text": "tells me that's a built-in method that I can call and what it does um if you can upgrade yourself to IPython on your Mac",
    "start": "2789000",
    "end": "2796400"
  },
  {
    "text": "systems I'd strongly encourage it if you're um using Windows I'd strongly encourage using idle instead of the built-in python shell to play with",
    "start": "2796400",
    "end": "2803440"
  },
  {
    "text": "things um and we'll take a break for 10 minutes and come back and you can work on the lab and I'll kind of circulate",
    "start": "2803440",
    "end": "2808520"
  },
  {
    "text": "and see where everybody is",
    "start": "2808520",
    "end": "2812240"
  }
]