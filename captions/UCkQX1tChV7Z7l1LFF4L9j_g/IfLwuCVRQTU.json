[
  {
    "start": "0",
    "end": "145000"
  },
  {
    "text": "[Music]",
    "start": "390",
    "end": "13639"
  },
  {
    "text": "all right so my name is Eric oim I work at a company out in Boulder called precog with some other people who you",
    "start": "13639",
    "end": "20320"
  },
  {
    "text": "all probably know or are friends with I don't know scola's one big happy community so we sort of all know each",
    "start": "20320",
    "end": "26880"
  },
  {
    "text": "other I feel anyway um my talk is kind of on a weird topic it's something that you're not",
    "start": "26880",
    "end": "32800"
  },
  {
    "text": "really supposed to do and it's kind of frowned on and I a lot of my co-workers probably would disagree with a lot of",
    "start": "32800",
    "end": "38200"
  },
  {
    "text": "stuff in my talks so we'll sort of see what you think I mean I'm kind of it's not a troll but it's like a quasy troll",
    "start": "38200",
    "end": "43680"
  },
  {
    "text": "so don't you know just accept it in the spirit in which it's given um anyway so it's about basically",
    "start": "43680",
    "end": "51399"
  },
  {
    "text": "about low-level optimization and this is what you don't want to do but this is what people sort of think you're doing",
    "start": "51399",
    "end": "57719"
  },
  {
    "text": "so anyway let's get started um uh the talk is informed by a bunch of",
    "start": "57719",
    "end": "64559"
  },
  {
    "text": "experiences that I've had writing schola um so for two years I worked at a Avia working on a a GIS piece of GIS software",
    "start": "64559",
    "end": "72360"
  },
  {
    "text": "called geotus that's intended to do very fast raster processing so lots of data",
    "start": "72360",
    "end": "77840"
  },
  {
    "text": "you know parallel uh distributed that kind of thing um I've also worked with Tom who presented earlier on Spire which",
    "start": "77840",
    "end": "83240"
  },
  {
    "text": "is intended to do very fast like math algebra stuff like that sorting and I've also written my own sort of collection",
    "start": "83240",
    "end": "90200"
  },
  {
    "text": "that are intended to be faster than scholas and and I and I make things fast at precog too so that's that's sort of my thing these days um but performance",
    "start": "90200",
    "end": "97399"
  },
  {
    "text": "is fiddly and your experiences might vary and I'm definitely not trying to",
    "start": "97399",
    "end": "102439"
  },
  {
    "text": "Pro myself as some sort of expert I mean there's way smarter people like Cliff click or John Roser people so this is just what I found through sort of",
    "start": "102439",
    "end": "108520"
  },
  {
    "text": "experimental testing and and and working on it uh and I'm primarily talking about",
    "start": "108520",
    "end": "113719"
  },
  {
    "text": "low level optimization so um the idea here is that we want to basically produce bite code that the jvm will run",
    "start": "113719",
    "end": "119680"
  },
  {
    "text": "faster I mean it seems easy when you put it that way but um there's actually lots of things I could be talking about so first of all this Hotpot specific if",
    "start": "119680",
    "end": "126280"
  },
  {
    "text": "you're running one of the other jvms hopefully some of it applies but I can't speak to that um and I'm focusing on",
    "start": "126280",
    "end": "133360"
  },
  {
    "text": "code that you write in Scola I'm not talking about writing Java or C or anything like that and I do profiling I",
    "start": "133360",
    "end": "140200"
  },
  {
    "text": "think profiling is important I think everyone should do it um I'm using caliper and J profiler but other stuff",
    "start": "140200",
    "end": "145360"
  },
  {
    "start": "145000",
    "end": "145000"
  },
  {
    "text": "is great the things that you could do that I'm not going to talk about are buying bigger more bigger machines",
    "start": "145360",
    "end": "150480"
  },
  {
    "text": "get a better jvm that's just smarter um and you can do a lot of tuning at runtime just by tuning parameters like",
    "start": "150480",
    "end": "156280"
  },
  {
    "text": "which garbage collector you use I'm not speaking on that that stuff's really important it's just not the focus of my talk you can also call out to Native",
    "start": "156280",
    "end": "162319"
  },
  {
    "text": "libraries people doing linear algebra do this all the time and you of course you can use parallelism to just run a whole",
    "start": "162319",
    "end": "168200"
  },
  {
    "text": "bunch more processors I'm really talking about kind of classical you know single-threaded stuff not that these are",
    "start": "168200",
    "end": "173879"
  },
  {
    "text": "bad but um we even without these we can still do a lot great and so how many of you feel",
    "start": "173879",
    "end": "180959"
  },
  {
    "text": "like you know a lot about how hotspot works I mean I'm sure a bunch of you do but great so a few of you do a few hands",
    "start": "180959",
    "end": "186760"
  },
  {
    "text": "awesome so Hotpot is a just in time compiler um when the jvm is running your code initially it's interpreting it and",
    "start": "186760",
    "end": "193319"
  },
  {
    "text": "it's pretty slow and then when you run it a bunch it sort of warms up and hotspot actually compiles a more efficient um assembly version of your",
    "start": "193319",
    "end": "200200"
  },
  {
    "text": "code and we'll do a bunch of optimizations at runtime and this is really nice as opposed to say C++ where if the GCC gets it wrong it's wrong",
    "start": "200200",
    "end": "206400"
  },
  {
    "text": "forever right and no matter what you do it's going to you know you have to recompile the jvm is kind of great in that it will make our our code faster so",
    "start": "206400",
    "end": "213360"
  },
  {
    "text": "a bunch of the things these are some of the main things that will make your code faster is inlining small methods to avoid U method call Overhead eliminating",
    "start": "213360",
    "end": "220120"
  },
  {
    "text": "range checks so when you're looping through a big array it doesn't have to check every single time to see if it's out of bounds or not um and then really",
    "start": "220120",
    "end": "226560"
  },
  {
    "text": "optimizing virtual method calls there's lots of other stuff it does but I think these are kind of the big ones those are the ones that I think is worth checking",
    "start": "226560",
    "end": "232200"
  },
  {
    "text": "out and you can see a full list of of all the stuff it does and then here are just I'm just going to really quickly",
    "start": "232200",
    "end": "237959"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "give you like a bird eye overview of all the things that can go wrong with this so megamorph dispatch is when you have a whole bunch of classes implementing one",
    "start": "237959",
    "end": "244079"
  },
  {
    "text": "interface at that point you can no longer inline any particular implementation it has to use a virtual",
    "start": "244079",
    "end": "249480"
  },
  {
    "text": "method table which is turns out to be a lot slower than like if you call a method on a final class the jvm knows",
    "start": "249480",
    "end": "255079"
  },
  {
    "text": "that which class you're talking about and it can just essentially almost use like a pointer to go right there if you have an interface and there's 10 classes",
    "start": "255079",
    "end": "261239"
  },
  {
    "text": "and it doesn't know which one it has to jump through a whole table which is a lot more expensive um if you have small",
    "start": "261239",
    "end": "267080"
  },
  {
    "text": "methods that you'd like to be inlined but they're a little too big Above This arbitrary 35 byte limit they won't be in",
    "start": "267080",
    "end": "272360"
  },
  {
    "text": "lined and that that can be a disaster for people there's also how you write your Loops or how you write your code",
    "start": "272360",
    "end": "278080"
  },
  {
    "text": "there's we often have to do error checking or handle edge cases but if you do that at the same point where you're also just doing a lot of work you'll",
    "start": "278080",
    "end": "284840"
  },
  {
    "text": "you'll slow the whole thing down hotspot won't be able to deal with that um that also kind of covers complicated Loop tests and people sometimes when they",
    "start": "284840",
    "end": "291520"
  },
  {
    "text": "hear about inlining they get crazy they go inlining crazy and start ining everything and that's actually a disaster too because at that point um",
    "start": "291520",
    "end": "298840"
  },
  {
    "text": "hotspot will other problems in terms of like the code cache having to you have too much code",
    "start": "298840",
    "end": "304639"
  },
  {
    "text": "and when the code cache fills up that's the last Point that's a complete disaster at that point your application will stop compiling anything to assembly",
    "start": "304639",
    "end": "311039"
  },
  {
    "text": "and it'll just sit there and be incredibly slow and you'll see a little message in your logs and you'll wonder what the hell it means and you'll Google",
    "start": "311039",
    "end": "316400"
  },
  {
    "text": "it and you'll find out that it's a disaster um so as as you can see it's actually very important that we get this",
    "start": "316400",
    "end": "322919"
  },
  {
    "text": "right um uh and so the question then is like how does Scola interact with hotspot",
    "start": "322919",
    "end": "328600"
  },
  {
    "text": "normally and the answer is pretty well for the most part I mean we write we're encouraged to write lots of small",
    "start": "328600",
    "end": "333800"
  },
  {
    "text": "methods as I said hotspot is great about inlining those um composition hotspot also deals pretty well with that",
    "start": "333800",
    "end": "339919"
  },
  {
    "text": "actually because of inlining so having to jump through three objects to get to something if hotspot knows that's what",
    "start": "339919",
    "end": "345000"
  },
  {
    "text": "it's doing it'll it can inline that pretty well and immutability is nice because um it means that you have to do",
    "start": "345000",
    "end": "351120"
  },
  {
    "text": "a lot less defensive coding defensive checks and those kinds of checks inside of your Loops will interfere with Hotpot",
    "start": "351120",
    "end": "356840"
  },
  {
    "text": "doing its thing but there are problems and the biggest problem really is garbage um Scala is a huge litter bug",
    "start": "356840",
    "end": "362840"
  },
  {
    "text": "and it's just allocating tons of stuff all the time and the gvm tries to keep up but sometimes it doesn't you know",
    "start": "362840",
    "end": "368560"
  },
  {
    "text": "most of the time maybe it does and I would say idiomatic Scala actually tends to produce more garbage so you know",
    "start": "368560",
    "end": "374599"
  },
  {
    "text": "that's that's a thing and then there's sort of ugly side issues like there's a lot of class files there's a lot of bite code um and this sort of inlining",
    "start": "374599",
    "end": "382319"
  },
  {
    "text": "problem in terms of not being able to inline megamorph dispatch Scala like anytime you call map on an array or a",
    "start": "382319",
    "end": "387919"
  },
  {
    "text": "list or whatever you're P that's that's that's that you're probably hitting the megamorph inlining problem because you",
    "start": "387919",
    "end": "392960"
  },
  {
    "text": "have four different times you call map on a list you use four different functions it can't inline that function",
    "start": "392960",
    "end": "398360"
  },
  {
    "text": "apply because there's four different versions and so it has to do a a virtual method dispatch on your function object",
    "start": "398360",
    "end": "403520"
  },
  {
    "text": "to see which whether you're multiplying by two or dividing by four you know whatever it is that you're doing this time and that that's what gets talked",
    "start": "403520",
    "end": "410319"
  },
  {
    "text": "about as the inlining problem and that that will hurt you a little bit um so then there's the big one that",
    "start": "410319",
    "end": "416680"
  },
  {
    "text": "I said is garbage and so I'm just going to go through all the different ways that um Scola produces garbage so boxing",
    "start": "416680",
    "end": "423120"
  },
  {
    "text": "do you all know what boxing is every looks like everyone does great so um",
    "start": "423120",
    "end": "429080"
  },
  {
    "text": "does anyone want to guess how many how many Java Ling integer instances this code snippet is going to",
    "start": "429080",
    "end": "435919"
  },
  {
    "text": "create how'd you get",
    "start": "437360",
    "end": "440840"
  },
  {
    "text": "36 no I mean it's no it's a I mean the answer I think is I mean someone might wrong I think the answer is 16 I I think",
    "start": "443319",
    "end": "449680"
  },
  {
    "text": "it's 3 * 5 + 1 you're going to box three five all five values in the vector when you do the map you're going to in you're",
    "start": "449680",
    "end": "456319"
  },
  {
    "text": "going to create five more boxed values that are have been multiplied and when you do your fold left you're going to box the zero first and then you're going",
    "start": "456319",
    "end": "462720"
  },
  {
    "text": "to box all the five values as you as you accumulate so that's six and in general what this means is that this code if you",
    "start": "462720",
    "end": "468960"
  },
  {
    "text": "if the vector was N Things long you'd have three n plus one boxes you're allocating right and this isn't so bad",
    "start": "468960",
    "end": "474759"
  },
  {
    "text": "when you have five but if you have like 500,000 or something you know you can imagine where you could have a problem",
    "start": "474759",
    "end": "482759"
  },
  {
    "text": "um no I'm I'll get to that you should not except for Function",
    "start": "482759",
    "end": "488759"
  },
  {
    "text": "One function two and function zero and a few other things nothing is specialized so you should I think there's this",
    "start": "488759",
    "end": "493800"
  },
  {
    "text": "assumption that Scala has specialized a lot and is really smart about this and I think that was always the hope but it is not true right now so in here you can",
    "start": "493800",
    "end": "500800"
  },
  {
    "text": "also just other I mean this isn't boxing but like you know con cells are objects they're allocated um you know every time",
    "start": "500800",
    "end": "508479"
  },
  {
    "start": "502000",
    "end": "502000"
  },
  {
    "text": "you call these C API methods you're allocating a whole new list and so you know as you burn through this list you're going to um you know allocate a",
    "start": "508479",
    "end": "515640"
  },
  {
    "text": "bunch of stuff in addition to all the boxing that you're also doing right so you're you're you know you're going to get a lot of allocations this way um and",
    "start": "515640",
    "end": "522240"
  },
  {
    "text": "then the other one is um using shortlived immutable object right so in this case we're folding we're Computing",
    "start": "522240",
    "end": "528240"
  },
  {
    "text": "a Max and minut at the same time we're we're being smart right we're only doing one Passover are in Array so we're we're Computing both the Min and the max at",
    "start": "528240",
    "end": "534760"
  },
  {
    "text": "the same time which is great but we're allocating a tupal for every single Loop iteration right so again you know this",
    "start": "534760",
    "end": "540399"
  },
  {
    "text": "is fine but when your array gets really big there's just going to be a lot of garbage um and you get a similar sort of",
    "start": "540399",
    "end": "545720"
  },
  {
    "text": "effect when when you use option right if you if you use collect or something like that all of these types of things are going to there going to be a per",
    "start": "545720",
    "end": "551920"
  },
  {
    "text": "iteration garbage that we're talking about um another example are by name parameters and function references I",
    "start": "551920",
    "end": "557880"
  },
  {
    "text": "think these are less of a problem often but the one that really bugs me is schol z semigroup append because you tend to",
    "start": "557880",
    "end": "564440"
  },
  {
    "text": "use that for like adding numbers and stuff and so you think it's going to be fast and it actually allocates a function",
    "start": "564440",
    "end": "570160"
  },
  {
    "text": "instance for every single addition that you're doing through the append method right so spire's append is is strict not",
    "start": "570160",
    "end": "576600"
  },
  {
    "text": "lazy precisely because we're optimizing for the case where you're doing it a million times um and then the last one",
    "start": "576600",
    "end": "583040"
  },
  {
    "text": "which is less of a big deal now but using implicits to add methods to stuff if you're not careful and you you do",
    "start": "583040",
    "end": "589279"
  },
  {
    "text": "that in a tight loop again you're going to be instantiating a million of these implicit objects um so what's the",
    "start": "589279",
    "end": "597360"
  },
  {
    "text": "conclusion right do we have to write Java I mean but I say no I mean that's definitely not my position I just you know I feel",
    "start": "597360",
    "end": "604720"
  },
  {
    "text": "like when you see all the boxing happening that's kind of your first impulses you're like oh no all this beautiful stuff means that my stuff has",
    "start": "604720",
    "end": "610480"
  },
  {
    "text": "to be slow but the answer is no your good doesn't have to be slow and you can still write Scala um and the thing to",
    "start": "610480",
    "end": "616320"
  },
  {
    "text": "not is that we actually do fine most of the time right I mean I just showed you all this horrible boxing but yet you guys are all writing code that's",
    "start": "616320",
    "end": "621480"
  },
  {
    "text": "probably pretty fast it's getting the job done it's not really a big deal um you know the jbm has a really good",
    "start": "621480",
    "end": "627560"
  },
  {
    "text": "garbage collector and it expects to be dealing with lots of garbage so actually you know often it's not such a big deal",
    "start": "627560",
    "end": "633320"
  },
  {
    "text": "and more than that allocating a few objects here and there it really doesn't matter at all I mean even if it's kind of inefficient if you only do it a few",
    "start": "633320",
    "end": "639880"
  },
  {
    "text": "times it really it has to be really inefficient before you're actually going to your end user will notice that um so",
    "start": "639880",
    "end": "645920"
  },
  {
    "text": "the real problem here is when you are having like order n or worse like N",
    "start": "645920",
    "end": "652040"
  },
  {
    "text": "squared or something allocations and your end gets really big that's really the only case you should be worrying about for allocations and so that tends",
    "start": "652040",
    "end": "658079"
  },
  {
    "text": "to be like in a Loop over a big array over a big data set over a huge table stuff like that that's the place where I",
    "start": "658079",
    "end": "665079"
  },
  {
    "text": "feel like you suddenly have to have this different mindset where you're trying to like have an Eagle Eye for this kinds of stuff and in those cases you want the",
    "start": "665079",
    "end": "671360"
  },
  {
    "text": "ratio of actual work you do to be relatively High compared to the sort of random allocations that you're performing I mean it's fine to do some",
    "start": "671360",
    "end": "677560"
  },
  {
    "text": "of them but if you're doing one if you're doing more if you're spending more time instantiating tupal than adding numbers you know you have a",
    "start": "677560",
    "end": "683320"
  },
  {
    "text": "problem right I mean it's just not a good plan um and I feel like we all often have a good intuition about this",
    "start": "683320",
    "end": "690200"
  },
  {
    "text": "um not always but we often we often know where the critical path is I mean uh and",
    "start": "690200",
    "end": "696120"
  },
  {
    "text": "when and when you don't it's pretty easy to find out I mean J profiler makes it easy and uh so while we're talking about",
    "start": "696120",
    "end": "703279"
  },
  {
    "start": "701000",
    "end": "701000"
  },
  {
    "text": "this I just want to address this premature optimization thing which I sort of use tongue and- cheek but it's a",
    "start": "703279",
    "end": "708320"
  },
  {
    "text": "real concern and you know Donald K cautions us that we should um forget about small efficiencies say about 97%",
    "start": "708320",
    "end": "714519"
  },
  {
    "text": "of the time and that premature optimization is the root of all evil and I I think this is true but I to put it",
    "start": "714519",
    "end": "719880"
  },
  {
    "text": "in context K also says in established engineering disciplines a 12% Improvement easily obtained is never",
    "start": "719880",
    "end": "726160"
  },
  {
    "text": "considered marginal and I believe the same Viewpoint should Prevail in software engineering so I think people",
    "start": "726160",
    "end": "731560"
  },
  {
    "text": "remember the first part but not this part which is that kth is really talking about you know people fiddling assembly",
    "start": "731560",
    "end": "737519"
  },
  {
    "text": "stuff to try and eek out a 2% gain or something he's not if your code's going to be four times faster like I think",
    "start": "737519",
    "end": "743240"
  },
  {
    "text": "Donald kth is totally fine with you optimizing for that case you know and I I I just like to imagine he is at least",
    "start": "743240",
    "end": "749360"
  },
  {
    "text": "I mean um and so most of the stuff I'm talking about I tend to think 2% it's two times for me if something isn't two",
    "start": "749360",
    "end": "755560"
  },
  {
    "text": "times faster it's maybe not worth doing um that tends to be my cut off um and I like to think of orders of magnitude in",
    "start": "755560",
    "end": "761320"
  },
  {
    "text": "terms of base two not base 10 because a base 10 jump is really huge and you often can't get that whereas if you get two times or four times or eight times",
    "start": "761320",
    "end": "767880"
  },
  {
    "text": "speed up those are significant and I think it's like a I I tend of like thinking of that as multiple orders of magnitude I mean it's a it's an opinion",
    "start": "767880",
    "end": "774160"
  },
  {
    "text": "thing anyway this is a giant slide and here are my giant list of premature op",
    "start": "774160",
    "end": "779279"
  },
  {
    "start": "775000",
    "end": "775000"
  },
  {
    "text": "ization tips um which is sort of what I've been talking about um the big thing",
    "start": "779279",
    "end": "785399"
  },
  {
    "text": "that you might be surprised about if you have never talk to me about this stuff is that I really think you should use arrays in tight Loops I really think the",
    "start": "785399",
    "end": "792399"
  },
  {
    "text": "array data type is maligned and it gets a bad R because of java but it is pound-for-pound a really great compact",
    "start": "792399",
    "end": "799760"
  },
  {
    "text": "representation for lots of data and you can iterate through it really fast the hotspot has lots of ways of making array",
    "start": "799760",
    "end": "805240"
  },
  {
    "text": "access fast it has array bounds checking it can alide that arrays tend to have good cach uh characteristics so that",
    "start": "805240",
    "end": "813480"
  },
  {
    "text": "that's maybe one thing you'd be surpressed also I for when you're in the critical path and your code is too slow",
    "start": "813480",
    "end": "818760"
  },
  {
    "text": "and you need to make it faster I would stay away from linking a bunch of collection API methods together that's again that's just me but you tend to be",
    "start": "818760",
    "end": "825800"
  },
  {
    "text": "doing lots of extra work in those cases like if you do multiple Maps or a map and a filter and a map or something you",
    "start": "825800",
    "end": "830959"
  },
  {
    "text": "could have written your own recursive function that just does that all at once right and you would you would basically lose all the intermediate allocations",
    "start": "830959",
    "end": "836399"
  },
  {
    "text": "that are going on so I tend to think that that's better in these types of cases um and you will do a lot less",
    "start": "836399",
    "end": "842920"
  },
  {
    "text": "allocation um other than that the other things that are maybe weird are I I think local vars",
    "start": "842920",
    "end": "849199"
  },
  {
    "text": "are fine I really don't think anyone should be using vars inside of a like a like a like a field that's going to be shared in like a long lift class but if",
    "start": "849199",
    "end": "855639"
  },
  {
    "text": "you're in a method I think having local vars in that method to to make you know to uh store stuff is often the fastest",
    "start": "855639",
    "end": "863079"
  },
  {
    "text": "thing you can do um and tail W is actually a great alternative to that which is you can write these nice tail",
    "start": "863079",
    "end": "868279"
  },
  {
    "text": "recursive methods that come compile to something that's actually slightly faster than a wow Loop um you know and again you don't have to box you can pass",
    "start": "868279",
    "end": "874759"
  },
  {
    "text": "you can be passing as much State you can pass two things or three things or four things or eight things through without using a tle and a fold and and you your",
    "start": "874759",
    "end": "882320"
  },
  {
    "text": "your code is still functional and nice but it's also very fast so um prefer local variables avoid field access avoid",
    "start": "882320",
    "end": "889240"
  },
  {
    "text": "mutable fields and pay attention to which classes are specialized the answer is very few of them are so be",
    "start": "889240",
    "end": "894759"
  },
  {
    "text": "pessimistic about that um and and this is sort of a follow up on this is I",
    "start": "894759",
    "end": "899920"
  },
  {
    "start": "897000",
    "end": "897000"
  },
  {
    "text": "don't hate functional programming and I think functional programming actually kind of informs this style in a weird way but the admission for me is that",
    "start": "899920",
    "end": "906759"
  },
  {
    "text": "when when you need your code to be faster you just have to do what has to be done and you don't always like it but",
    "start": "906759",
    "end": "912279"
  },
  {
    "text": "um you know it's just something you need to do so the more shared your data is or the more longlived it is the more I",
    "start": "912279",
    "end": "918519"
  },
  {
    "text": "think it really has to be immutable and you really need to be able to reason about it in a good way which immutable data lets you do but with transient data",
    "start": "918519",
    "end": "925720"
  },
  {
    "text": "like during a fold not you know not before and after the fold but during the fold the that data is transient it's only being created for your work it's",
    "start": "925720",
    "end": "931160"
  },
  {
    "text": "going to be thrown away and garbage collected as soon as you're done with transient data I actually think I I think using mutable data for that is",
    "start": "931160",
    "end": "937000"
  },
  {
    "text": "fine if it's going to make your algorithm more efficient and faster and things like that or make it even just easier to reason about to me that's",
    "start": "937000",
    "end": "944079"
  },
  {
    "text": "that's really not a big deal some people obviously would disagree but you know this is my talk so I get to sort of make the rules um uh and just another Point",
    "start": "944079",
    "end": "954319"
  },
  {
    "text": "here is that if you're using local vars in a method that method is using mutation but it can still be referential transparent there's nothing preventing",
    "start": "954319",
    "end": "960480"
  },
  {
    "text": "you from using referential transparency in a sort of big sense but have particular areas where you need to burn through an array or you need to do",
    "start": "960480",
    "end": "967160"
  },
  {
    "text": "complicated resampling or you're going to you know something like that where you kind of need to be able to have random access to an array that's mutable",
    "start": "967160",
    "end": "973399"
  },
  {
    "text": "um and that and that and that can be fine it really for me it's about minimizing side effects and cross talk and and and those are the things that",
    "start": "973399",
    "end": "979680"
  },
  {
    "text": "that that are really bad um so anyway let's go into some case studies just because I'm saying all this",
    "start": "979680",
    "end": "985199"
  },
  {
    "start": "983000",
    "end": "983000"
  },
  {
    "text": "stuff but maybe I'm just lying and making it up um so here's an example where we have",
    "start": "985199",
    "end": "991519"
  },
  {
    "text": "um uh a list of integers right for and let's say that we like need a list right we need it we're maybe we're doing like",
    "start": "991519",
    "end": "997839"
  },
  {
    "text": "a last in first out que or something or we need the con structure we're not just going to use an array because I would love to use an array here but let's say",
    "start": "997839",
    "end": "1003639"
  },
  {
    "text": "I can't so here's an example where I have my list and I'm",
    "start": "1003639",
    "end": "1010040"
  },
  {
    "text": "um I'm taking the Min and the max over it uh and I'm using a tuple to",
    "start": "1010040",
    "end": "1016720"
  },
  {
    "text": "do that I think you know what I think I made a mistake on the side this actually is an array but either way I'm folding",
    "start": "1016720",
    "end": "1022399"
  },
  {
    "text": "over something and I'm Computing the Min and the Max and so the question is how can we do",
    "start": "1022399",
    "end": "1027918"
  },
  {
    "text": "better um oh crap this totally doesn't fit so here's the signature of the method that I'm going to write this",
    "start": "1027919",
    "end": "1033319"
  },
  {
    "text": "isn't even actually the code this is just the signature and it's completely ugly and terrible spec is an alias for",
    "start": "1033319",
    "end": "1038880"
  },
  {
    "text": "specialized because it's even longer it just wouldn't fit on the slide otherwise I I do that in all my code because I",
    "start": "1038880",
    "end": "1044319"
  },
  {
    "text": "just can't bear to type it out but as you can see we're taking in an array we're taking in B and C which are like",
    "start": "1044319",
    "end": "1049360"
  },
  {
    "text": "the starting values for our fold and we're taking in F1 which gives you a new given a b and an a gives you the new",
    "start": "1049360",
    "end": "1054919"
  },
  {
    "text": "next B and C and A gives you the next C and we're going to return a tuple of B and C right which is and so this is",
    "start": "1054919",
    "end": "1060320"
  },
  {
    "text": "essentially what this code here is doing right it's it's doing a fold we're getting out a tuple with the Max and the",
    "start": "1060320",
    "end": "1065520"
  },
  {
    "text": "Min great and so then this is the body of that code I just split it up because it just completely unreadable otherwise",
    "start": "1065520",
    "end": "1070760"
  },
  {
    "text": "on this slide and as you can see we're like initializing our state we've got a",
    "start": "1070760",
    "end": "1076679"
  },
  {
    "text": "a little wow loop it's very imperative looking you know and then we're and our VAR and then we're reassigning to our VAR based on the function and then we're",
    "start": "1076679",
    "end": "1083360"
  },
  {
    "text": "allocating one Tuple at the end so the crucial thing here is that we're not allocating tuples every step we're maintaining State this way and then",
    "start": "1083360",
    "end": "1089919"
  },
  {
    "text": "we're allocating tupal at the end um it looks moderately horrible is it worth it and the answer is yes these",
    "start": "1089919",
    "end": "1097799"
  },
  {
    "text": "are logarithmic scale so if you see a fixed difference between those that's actually the graphs like going off just",
    "start": "1097799",
    "end": "1103720"
  },
  {
    "text": "you know like a like a like a uh multiplier effect but I just wanted to",
    "start": "1103720",
    "end": "1109320"
  },
  {
    "text": "make it visible so it's 100 to 330 times faster and admittedly admittedly for",
    "start": "1109320",
    "end": "1114520"
  },
  {
    "text": "small n this isn't such a big deal because it's difference between like 25 Nan and 2.4 microsc right and who cares about microsc and nanc but for like",
    "start": "1114520",
    "end": "1122880"
  },
  {
    "text": "100,000 it's difference between like 4.7 microsc and 1.5 milliseconds and like milliseconds your users actually care",
    "start": "1122880",
    "end": "1128840"
  },
  {
    "text": "about that right you only got probably about 10 or 20 or 50 of those to work with before people start actually noticing that your computer's doing",
    "start": "1128840",
    "end": "1134679"
  },
  {
    "text": "something other than being completely responsive so um so you know even in this dumb simple case you can see that",
    "start": "1134679",
    "end": "1140320"
  },
  {
    "text": "it makes a difference I mean it seems crazy that it makes a difference but you know it does um and so then there's this",
    "start": "1140320",
    "end": "1146520"
  },
  {
    "start": "1143000",
    "end": "1143000"
  },
  {
    "text": "question of like well what's this specialized thing how many of you have heard of specialized or kind of know what specialized is or feel comfortable using it I guess I sort of increased",
    "start": "1146520",
    "end": "1153640"
  },
  {
    "text": "difficulty there so a lot of you have heard of it fewer of you are comfortable using it I think that that is consistent",
    "start": "1153640",
    "end": "1158760"
  },
  {
    "text": "with my sort of survey of the field um it's basically an incredibly subtle",
    "start": "1158760",
    "end": "1164480"
  },
  {
    "text": "difficult but necessary tool and I've done a lot of work with it and it's sort of a my tragic flaw that I'm stuck using",
    "start": "1164480",
    "end": "1171240"
  },
  {
    "text": "it and it fails me periodically and it's always disappointing but at the same time it's",
    "start": "1171240",
    "end": "1177360"
  },
  {
    "text": "good enough that I put up with it because I just have no alternative it's just so great it is really good um and",
    "start": "1177360",
    "end": "1184039"
  },
  {
    "text": "so here's sort of a quick example that taken from another talk Tom and I did to sort of show you how specialization",
    "start": "1184039",
    "end": "1189280"
  },
  {
    "text": "works like if you haven't worked with it or if you don't really have a good intuition so this is some code it's generic there's a type class instance of",
    "start": "1189280",
    "end": "1195760"
  },
  {
    "text": "ring that we use we call a plus method on it it's pretty simple we're just summing a list of A's you know nothing",
    "start": "1195760",
    "end": "1202360"
  },
  {
    "text": "fancy an a is generic it could be integers it could be anything that can be that has a ring that can be summed",
    "start": "1202360",
    "end": "1207640"
  },
  {
    "text": "you know from Tom's talk so then after specialization this is the monstrosity that we get instead",
    "start": "1207640",
    "end": "1213600"
  },
  {
    "text": "so we have all these crazy dollar signs and what that basically is saying is this is a specialized version of this",
    "start": "1213600",
    "end": "1218799"
  },
  {
    "text": "method it's not the same method that you wrote It's a copy that has been heavily modified by The Scholar compiler and so",
    "start": "1218799",
    "end": "1225159"
  },
  {
    "text": "what happened is all the A's got turned into ins so it's you know committed to using ins here and",
    "start": "1225159",
    "end": "1231960"
  },
  {
    "text": "not just that but whenever it works with any methods it calls on ring it makes",
    "start": "1231960",
    "end": "1237039"
  },
  {
    "text": "sure to call the int version because ring is also specialized so you as you can see we're instantiating a specialized Ring's Ops thing down here",
    "start": "1237039",
    "end": "1243960"
  },
  {
    "text": "right here and we're calling a specialized plus method and the the upshot of that is that normally with",
    "start": "1243960",
    "end": "1249720"
  },
  {
    "text": "generics you would be boxing on the way into that method but here we're not because the the the the the specialized",
    "start": "1249720",
    "end": "1255400"
  },
  {
    "text": "version has INT in the signature and so scholar compiler uses the Primitive int for it that's basically or go",
    "start": "1255400",
    "end": "1262960"
  },
  {
    "text": "ahead um it would yeah it would rarely be rarely or never be a virtual call I mean I I'm not going to say never but I",
    "start": "1266080",
    "end": "1272760"
  },
  {
    "text": "would not expect it to be a virtual call right it would expect it to be essentially invoke static which is going to be a lot better as you say um so this",
    "start": "1272760",
    "end": "1279600"
  },
  {
    "text": "is what specialization this is the specialization mechanism this is really just what it does it's it's essentially like C++ templates a little bit it's",
    "start": "1279600",
    "end": "1285440"
  },
  {
    "text": "just it's a little bit more complicated than templates and in some ways i' rather have templates at this point but",
    "start": "1285440",
    "end": "1290960"
  },
  {
    "text": "it still works and it's still great and it can still make your code fast but unfortunately there are a lot of gotas so these I can't go into all of these",
    "start": "1290960",
    "end": "1297360"
  },
  {
    "text": "and like why they're there but this is like a list of things that I think you have to kind of consider when you're when you're trying to write your own",
    "start": "1297360",
    "end": "1303000"
  },
  {
    "text": "specialized code if you're using someone else's specialized code you can assume that they've thought about this and it's probably fine but basically it kind of",
    "start": "1303000",
    "end": "1310080"
  },
  {
    "start": "1306000",
    "end": "1306000"
  },
  {
    "text": "breaks inheritance a little bit so you need to inherit from traits not classes if you have a specialized class and then you inherit from it you won't actually",
    "start": "1310080",
    "end": "1315960"
  },
  {
    "text": "inherit from the specialized version you'll inherit from the generic version which you know defeats the purpose um",
    "start": "1315960",
    "end": "1321000"
  },
  {
    "text": "and you get duplicated fields and this is really one of the worst ones so if you have if you have a thing that has six fields and you specialize it you're",
    "start": "1321000",
    "end": "1326440"
  },
  {
    "text": "actually going to have 12 fields in your specialized version you're going have the six generic ones that are still there which it inherits and you're going",
    "start": "1326440",
    "end": "1331520"
  },
  {
    "text": "to have six specialized ones with different types that are the actual ones you use these other ones are just vestigial like you know the hip bones of",
    "start": "1331520",
    "end": "1337000"
  },
  {
    "text": "a whale and just sit there doing nothing except for eating up your valuable memory um so that sort of sucks",
    "start": "1337000",
    "end": "1343840"
  },
  {
    "text": "um uh the other thing you have you have to do is if you're using specialization you have to be sure that you use it all the way through because if at any point",
    "start": "1343840",
    "end": "1349320"
  },
  {
    "text": "you have code that's not specialized it like forgets the type information and then when you call into stuff that is specialized it'll call into the generic",
    "start": "1349320",
    "end": "1355240"
  },
  {
    "text": "version because it no longer knows which version you're talking about what whether you're talking about ins or doubles or things um also there's this",
    "start": "1355240",
    "end": "1361799"
  },
  {
    "text": "problem down here which is that any ref if you mix like an INT and a string even if you're specialized it won't use the",
    "start": "1361799",
    "end": "1367919"
  },
  {
    "text": "int version because string is not you can't specialize on string it's in any ref type um if as people want to talk",
    "start": "1367919",
    "end": "1373760"
  },
  {
    "text": "about that later I can explain it more it's a little complicated but basically the advice I have for you is if you're trying to use this keep it very simple",
    "start": "1373760",
    "end": "1380279"
  },
  {
    "text": "don't do anything fancy I would say even avoid Fields if you can like the best case scenario you're writing type classes you're specializing those it'll",
    "start": "1380279",
    "end": "1386840"
  },
  {
    "text": "just work it's great if you're just specializing methods and you're taking things in as parameters and returning them as value specialization works",
    "start": "1386840",
    "end": "1392679"
  },
  {
    "text": "really well the moment you have like Constructor stuff going on and Fields and different crap like that and then",
    "start": "1392679",
    "end": "1398400"
  },
  {
    "text": "there are bugs and it doesn't work and it's not specialized and you're going to be chatting with um you know Vlad urei",
    "start": "1398400",
    "end": "1404440"
  },
  {
    "text": "and people like that and you know that's probably not how you want to spend your weekend um and then the last thing I would say",
    "start": "1404440",
    "end": "1410080"
  },
  {
    "text": "is if you really are trying if you're really invested in this you're going to have to invest in some time running Java p and just seeing what it happens it I",
    "start": "1410080",
    "end": "1415919"
  },
  {
    "text": "wanted to put in the slide it's just too complicated there's no way for me to actually communicate at all about it so",
    "start": "1415919",
    "end": "1422120"
  },
  {
    "text": "like I said very simple stuff basis is a cool Library he only specializes traits all of his implementations are concrete",
    "start": "1422120",
    "end": "1428400"
  },
  {
    "text": "that extend the trait so he's doing what I said he's only using it for methods he's not specializing Fields he's not doing anything tricky and I get the",
    "start": "1428400",
    "end": "1435159"
  },
  {
    "text": "sense that it works well for him I haven't really played with this Library too much but like I said when you write specialized code it will often end up",
    "start": "1435159",
    "end": "1440720"
  },
  {
    "text": "ugly that's just okay I there's just no way around it so um but here's an example that does",
    "start": "1440720",
    "end": "1447360"
  },
  {
    "start": "1446000",
    "end": "1446000"
  },
  {
    "text": "use list unlike the last one which I put it in erroneously so in this case um how",
    "start": "1447360",
    "end": "1452880"
  },
  {
    "text": "can how well can we do when we're when we need a cons likee structure so you're going to have a bunch of allocations so then here's the sort of naive example we",
    "start": "1452880",
    "end": "1460000"
  },
  {
    "text": "have a list we want to basically build a list of triples we're GNA someone's going to be giving us triples and we need to be building them into some sort",
    "start": "1460000",
    "end": "1466200"
  },
  {
    "text": "of like CU this is the example I thought I was talking about last time anyway as you can see in this little code snippet",
    "start": "1466200",
    "end": "1471520"
  },
  {
    "text": "I've got some arrays of numbers and I'm building them into a queue Ian this is just for benchmarking so we just see how fast it is and what it does um I think",
    "start": "1471520",
    "end": "1479000"
  },
  {
    "text": "it's pretty straightforward what's going on here um but so then one thing you can do easily to reduce this is Tuple 3 I",
    "start": "1479000",
    "end": "1486039"
  },
  {
    "text": "use tupal 3 specifically because it's not specialized Tuple 2 is you will not have this problem with Tuple two where Tuple 3 is not so you'll get three boxes",
    "start": "1486039",
    "end": "1492720"
  },
  {
    "text": "for every single one of those tupal an easy way to defeat this is if you know you're dealing with ins you just build your own little case class you know um",
    "start": "1492720",
    "end": "1499640"
  },
  {
    "text": "product I think is specialized but regardless the case class itself your accessors will be will be typed",
    "start": "1499640",
    "end": "1505919"
  },
  {
    "text": "correctly even if the product stuff isn't um so in this case we're only allocating one thing and we're not",
    "start": "1505919",
    "end": "1511600"
  },
  {
    "text": "boxing those ins instead of allocating one thing and then allocating three boxes inside of it otherwise the code is",
    "start": "1511600",
    "end": "1517120"
  },
  {
    "text": "you know very similar and then there's this natural question which like well can we even do better than this and it turns out that the answer is that you",
    "start": "1517120",
    "end": "1523320"
  },
  {
    "text": "can right so this is a little uglier but basically the observation here is that why alloc a tuple structure and a con",
    "start": "1523320",
    "end": "1529919"
  },
  {
    "text": "structure when you can make a tuple con structure that does both right so in this case we have you know an a a b a c",
    "start": "1529919",
    "end": "1535919"
  },
  {
    "text": "and a tail we've got this weird I I I cons down here that basically allocates",
    "start": "1535919",
    "end": "1541159"
  },
  {
    "text": "your cons structure but has enough room to put all three of the values in it right so now instead of allocating two things we're only allocating one um and",
    "start": "1541159",
    "end": "1548279"
  },
  {
    "text": "this is just sort of you know it's based on a very simplified version of scola's list you know you'd probably want to add",
    "start": "1548279",
    "end": "1553320"
  },
  {
    "text": "a bunch more methods and stuff which I didn't bother doing okay",
    "start": "1553320",
    "end": "1560240"
  },
  {
    "text": "how microphone how well is uh uh hotspots inlining and Escape analysis",
    "start": "1560480",
    "end": "1566080"
  },
  {
    "text": "going to be able to catch the II boxing case I mean obviously when you're passing over a a function boundary it",
    "start": "1566080",
    "end": "1571840"
  },
  {
    "text": "has to put it to box it to be able to pass it as a parameter but in other cases I mean if you're just living within a tight Loop is that going to be",
    "start": "1571840",
    "end": "1577679"
  },
  {
    "text": "okay or do we still have to do II list well the answer is I mean you're still going to have to",
    "start": "1577679",
    "end": "1584640"
  },
  {
    "text": "allocate those things for sure like it's going to it might stack allocate them in some cases like Escape analysis will never it's never going to like remove",
    "start": "1584640",
    "end": "1590799"
  },
  {
    "text": "those allocations entirely but it will but you're totally right your observation is a good one that it will often be able to reason about it a",
    "start": "1590799",
    "end": "1597200"
  },
  {
    "text": "little bit better because it's all right there so it can I think it can stack allocate in a lot of cases anyway then",
    "start": "1597200",
    "end": "1602640"
  },
  {
    "text": "there's this question which is can we do even better than this and then the answer is kind of so if you if you are",
    "start": "1602640",
    "end": "1609120"
  },
  {
    "text": "willing to make some compromises you can basically say okay well if if we can go two at a time instead of one at a time",
    "start": "1609120",
    "end": "1615039"
  },
  {
    "text": "we can build this weird mutant cons conson thing that has six Fields right and like this might be better it's going",
    "start": "1615039",
    "end": "1620080"
  },
  {
    "text": "to have half as many things in it so it's fewer allocations um but maybe it's a disaster I don't know let's see so um",
    "start": "1620080",
    "end": "1628080"
  },
  {
    "text": "uh you the downside with that like with Vector is that cons and uncons will be slower because you you're going to have to break potentially break apart these",
    "start": "1628080",
    "end": "1634000"
  },
  {
    "text": "things and reconstitute them but you'll have better memory usage which might be worth it for you I mean objects I think",
    "start": "1634000",
    "end": "1639720"
  },
  {
    "text": "it they have like 24 bits of overhead is that right or 32 bits of overhead it's like something like that it's a pretty",
    "start": "1639720",
    "end": "1644760"
  },
  {
    "text": "if you're storing a 32 bit integer that's like a lot of overhead for each one so anyway here's the graph again this is logarithmic so if you see these",
    "start": "1644760",
    "end": "1651559"
  },
  {
    "text": "things separated that that means that there is like a a m a significant multiplier there it's not just like a",
    "start": "1651559",
    "end": "1657600"
  },
  {
    "text": "constant shift so what you see is that um it's actually really significant I",
    "start": "1657600",
    "end": "1662840"
  },
  {
    "text": "mean if you go up to the the the large amounts I mean that's like a more than a 10 times difference the to give you a",
    "start": "1662840",
    "end": "1669000"
  },
  {
    "text": "context at that top point the yellow at the very top is 22 times slower than the green at the bottom so that's a that's",
    "start": "1669000",
    "end": "1675240"
  },
  {
    "text": "22 right there so half that distance would be like 11 times and then half that would be about five times um a damn",
    "start": "1675240",
    "end": "1683039"
  },
  {
    "text": "it all right so anyway here's sort of the results in a form that's a little easier to digest which is that um for",
    "start": "1683039",
    "end": "1689640"
  },
  {
    "text": "the 100,000 case your triple your list of triples takes 27 Mills 2.5",
    "start": "1689640",
    "end": "1695600"
  },
  {
    "text": "milliseconds just using II is three times faster already bam that's super easy there's it's like kind of a",
    "start": "1695600",
    "end": "1701480"
  },
  {
    "text": "no-brainer I list is ugly but it is 9.3 times faster so that's also pretty significant I mean you know if this is",
    "start": "1701480",
    "end": "1707799"
  },
  {
    "text": "something your is critical to your business if it's like a thing that you do once in a while who cares um and then I6 list is weird in that if you go back",
    "start": "1707799",
    "end": "1715120"
  },
  {
    "text": "to the graph it starts out being worse here this is It's the weird purple star",
    "start": "1715120",
    "end": "1720279"
  },
  {
    "text": "thing but then it kind of gets better than the one that's really near and what's happening there is that it's if",
    "start": "1720279",
    "end": "1725919"
  },
  {
    "text": "you have to build it element by element it's actually worse in a way for small amounts because you're constantly swapping out the head of the list for",
    "start": "1725919",
    "end": "1731519"
  },
  {
    "text": "like the one version and the two version then back to the one version then the two version but when you get really large the memory savings actually starts",
    "start": "1731519",
    "end": "1737559"
  },
  {
    "text": "to take effect which is that you're it's able to garbage collect instances as it's going faster there's less memory",
    "start": "1737559",
    "end": "1742600"
  },
  {
    "text": "pressure so it actually does do a little bit better and then the the faster version The Green version that's cheating that's going by two so that's",
    "start": "1742600",
    "end": "1748519"
  },
  {
    "text": "that's the version where you're only ever creating the cons cons and you're just con you know doing that and if you can proceed by two then obviously it's",
    "start": "1748519",
    "end": "1754240"
  },
  {
    "text": "it's better to do that and that's 22 times faster",
    "start": "1754240",
    "end": "1760039"
  },
  {
    "text": "Daniel yes so um there's a there's another alternative here that I'm curious if you benchmarked which is um",
    "start": "1760640",
    "end": "1766640"
  },
  {
    "text": "going by chunks so rather than having a list of Triple of in in in having a list of Triple of array an array an array an",
    "start": "1766640",
    "end": "1773200"
  },
  {
    "text": "and then having some particular chunk boundary which doesn't even need to be that large you're you're totally right I mean that I didn't I didn't do that",
    "start": "1773200",
    "end": "1779440"
  },
  {
    "text": "because I just knew that was going to be super fast I mean as soon as you put Ray in the picture you're basically like like list the only time list can ever",
    "start": "1779440",
    "end": "1786000"
  },
  {
    "text": "compete with array is when you're doing like a last in first out queue that isn't ever going to get very big and those are the cases where it wins it",
    "start": "1786000",
    "end": "1791399"
  },
  {
    "text": "just loses across the board so if I let array I just didn't even want it's like heavyweight and welterweight boxing you",
    "start": "1791399",
    "end": "1797480"
  },
  {
    "text": "know what I mean it's just not even but you're right I mean you're totally right that that's actually a great model and that's that's sort of what's being",
    "start": "1797480",
    "end": "1803440"
  },
  {
    "text": "gestured at um so sort of tying into this I mean cheating is good if if if we",
    "start": "1803440",
    "end": "1808720"
  },
  {
    "text": "can proceed by two instead of by one and it's better we should do it you know we should take advantage of whatever we have you know we shouldn't we shouldn't",
    "start": "1808720",
    "end": "1814480"
  },
  {
    "text": "force ourselves to stick with the most generic solution if there's a way that we can cut a corner and be a lot faster",
    "start": "1814480",
    "end": "1820399"
  },
  {
    "text": "um and I like type classes you know because they give you that flexibility that the ad hoc polymorphism means that",
    "start": "1820399",
    "end": "1826519"
  },
  {
    "text": "if you end up with a certain type and you know you can do something really sneaky you do it you know and that's great um it's a it's a way to be",
    "start": "1826519",
    "end": "1833640"
  },
  {
    "text": "functional and to do that and I need to proceed because I'm totally behind",
    "start": "1833640",
    "end": "1839000"
  },
  {
    "start": "1837000",
    "end": "1837000"
  },
  {
    "text": "anyway boxing allocations aren't always the only thing I sort of made it have made it seem like they are but they aren't and so cash cache coherence is",
    "start": "1839000",
    "end": "1845320"
  },
  {
    "text": "also really important and I have an example that kind of shows this off so here's three different collections of two dimensional points right the top one",
    "start": "1845320",
    "end": "1851159"
  },
  {
    "text": "is a naive array of points the middle one avoids allocating Point objects and",
    "start": "1851159",
    "end": "1856600"
  },
  {
    "text": "has an array of x coordinates array of y's and the bottom one in leaves actually the bottom one is totally is",
    "start": "1856600",
    "end": "1862120"
  },
  {
    "text": "the wrong code example crap it's supposed to be one array of X y's that's what I benchmarked I just copy paste air",
    "start": "1862120",
    "end": "1868240"
  },
  {
    "text": "anyway it's going to have one array where the X and Y coordinates are interleaved if you can imagine that right and the scaling operation I'm",
    "start": "1868240",
    "end": "1875399"
  },
  {
    "text": "doing is I'm basically um I'm taking the distance from the origin and then I'm scaling the X and Y coordinates by that",
    "start": "1875399",
    "end": "1881360"
  },
  {
    "text": "so I'm basically mapping the points into the unit circle somewhere along there it's it's a pretty dumb little thing but",
    "start": "1881360",
    "end": "1886919"
  },
  {
    "text": "you know it's enough work that it's actually significant um I didn't want to do something super trivial so um I'm not",
    "start": "1886919",
    "end": "1893559"
  },
  {
    "text": "going to show you the other instances they're not interesting the one thing to remember is that the array is twice as long for interleaf points and that it's",
    "start": "1893559",
    "end": "1899080"
  },
  {
    "text": "going to step by two not by one because it's going xyxy um and as you can see here uh the",
    "start": "1899080",
    "end": "1906279"
  },
  {
    "text": "inner Leaf points is three to six times faster but the other two are basically the same so the array of points and the",
    "start": "1906279",
    "end": "1911559"
  },
  {
    "text": "two arrays of x's and y's are basically identical until you get to a certain point where the array of points falls",
    "start": "1911559",
    "end": "1917360"
  },
  {
    "text": "off a cliff basically and what you can see there is that jvm is actually really good at doing garbage collection of very",
    "start": "1917360",
    "end": "1922600"
  },
  {
    "text": "short-lived objects um but at a certain point what's happening is or it's very",
    "start": "1922600",
    "end": "1928440"
  },
  {
    "text": "good at allocating a lot of objects and dealing with like massive allocation requirements but at a certain point it becomes too much and you actually start",
    "start": "1928440",
    "end": "1934279"
  },
  {
    "text": "you start hitting a wall a little bit and so um they're the same up until the last point but for the very last one the",
    "start": "1934279",
    "end": "1940279"
  },
  {
    "text": "array of points is 14 times slower so you really do just kind of fall off a cliff there um and that's the thing is",
    "start": "1940279",
    "end": "1945559"
  },
  {
    "text": "if you never hit that if you're never going to get that big don't bother doing anything fancy but if you are then it's",
    "start": "1945559",
    "end": "1952559"
  },
  {
    "text": "important um and and the lesson here really is that the cast uses is what was significant not the not the boxing or",
    "start": "1952559",
    "end": "1957880"
  },
  {
    "text": "not the allocation um anyway this is kind of the closing remark section I think I guess I'm kind",
    "start": "1957880",
    "end": "1963720"
  },
  {
    "start": "1962000",
    "end": "1962000"
  },
  {
    "text": "of going over a little bit two minutes great but um people would say well raise are mutable isn't that bad and it's like",
    "start": "1963720",
    "end": "1969880"
  },
  {
    "text": "well yes it is kind of bad but you know we sort of go to war with the Army we have and I like to consider a raise as",
    "start": "1969880",
    "end": "1975679"
  },
  {
    "text": "mutable only during a construction period so I like to think of a raise is like they're mutable when you're building them but once they're built you shouldn't mess with them and at that",
    "start": "1975679",
    "end": "1981760"
  },
  {
    "text": "point you should sort of treat them like an IM mutable data structure and if you need to make a copy and making copies of RA is actually super fast so that's",
    "start": "1981760",
    "end": "1987639"
  },
  {
    "text": "actually not a big problem um if you're someone who's a real hardliner like um",
    "start": "1987639",
    "end": "1992720"
  },
  {
    "text": "you know one of the scholar Z faction uh you might want to just make a wrapper so you can guarantee your array is not",
    "start": "1992720",
    "end": "1998679"
  },
  {
    "text": "going to be modified right you make an a mutable wrapper and then you only expose apply that works fine um so for an",
    "start": "1998679",
    "end": "2005039"
  },
  {
    "text": "example of how I kind of think arrays should be done in Scala I would point you to this um geotus project which is",
    "start": "2005039",
    "end": "2010440"
  },
  {
    "text": "one of the things I've worked on um basically it's all about arrays we have these giant grids of numbers we need to smash them together and do and we tile",
    "start": "2010440",
    "end": "2016639"
  },
  {
    "text": "them and do them in a distributed way and then resampling and all sorts of different junk but we at a high level it's all purely functional it's all",
    "start": "2016639",
    "end": "2022600"
  },
  {
    "text": "refly transparent at a high level there aren't there isn't a whole lot of shared mutable State and it does make copies",
    "start": "2022600",
    "end": "2028000"
  },
  {
    "text": "but at the same time at a low level it's able to be very fast because it doesn't it doesn't try to enforce that IM",
    "start": "2028000",
    "end": "2034360"
  },
  {
    "text": "immutability down to the cell level it only enforces it down to the chunk or the raster level at which point those",
    "start": "2034360",
    "end": "2039799"
  },
  {
    "text": "can have very fast implementations in terms of you know tail recursive stuff or wow Loops or whatever um and even in",
    "start": "2039799",
    "end": "2045639"
  },
  {
    "text": "that case we at a high level you can still call map on a raster and it will still do it like really fast we just have some tricks to um sort of work",
    "start": "2045639",
    "end": "2052720"
  },
  {
    "text": "smooth stuff out and and rers aren't generic they're specified to be either in or double or something like that so",
    "start": "2052720",
    "end": "2058118"
  },
  {
    "text": "there's a there's a lot of interesting stuff you could get there if you're interested in this kind of thing um what",
    "start": "2058119",
    "end": "2063158"
  },
  {
    "text": "about Vector I don't know for the kinds of stuff I'm talking about I really don't think vectors are that great I think for Mid high level code or shared",
    "start": "2063159",
    "end": "2068599"
  },
  {
    "text": "code they're really good but um amortized con you know effectively constant time access is not array access",
    "start": "2068599",
    "end": "2074960"
  },
  {
    "text": "and it's just a lot slower so also they box they're not specialized like I said",
    "start": "2074960",
    "end": "2080158"
  },
  {
    "text": "so you know you're going to have those issues these are really the only I think the in 210 these are the only",
    "start": "2080159",
    "end": "2085679"
  },
  {
    "start": "2084000",
    "end": "2084000"
  },
  {
    "text": "specialized types basically so if it's not one of these on this list you can assume you should just assume that it's",
    "start": "2085679",
    "end": "2090800"
  },
  {
    "text": "going to box all the time arrays are a special case arrays also don't box um because they're sort of like a primitive in a way um and I would encourage you to",
    "start": "2090800",
    "end": "2099000"
  },
  {
    "text": "use value classes that's another way of removing",
    "start": "2099000",
    "end": "2102839"
  },
  {
    "text": "allocations Java or Scola Scola uh this is 210 I mean yeah before 210 actually",
    "start": "2105640",
    "end": "2112480"
  },
  {
    "text": "function I mean I think Tuple function two was not specialized in 29 that was actually a big problem for a lot of",
    "start": "2112480",
    "end": "2117560"
  },
  {
    "text": "people so if you implemented generic binary operations two inputs one output it wasn't specialized um and a lot of",
    "start": "2117560",
    "end": "2123640"
  },
  {
    "text": "people would have to create their own manual function 2 to get around that which was super going um and then what",
    "start": "2123640",
    "end": "2131400"
  },
  {
    "text": "about the other collections well I don't know I mean for this again in the sort of Naros scope of premature optimization",
    "start": "2131400",
    "end": "2137640"
  },
  {
    "text": "if you know exactly what you need to do you can probably do something faster than the generic thing built for everyone I mean not always but I would",
    "start": "2137640",
    "end": "2142920"
  },
  {
    "text": "say often um I've I've done a lot of work in this and um when you have a",
    "start": "2142920",
    "end": "2147960"
  },
  {
    "text": "specific thing in mind if you don't need generic types you can skip them and you'll save a lot of time if you don't need you know whatever you don't need",
    "start": "2147960",
    "end": "2153680"
  },
  {
    "text": "just don't do and that'll be better um I sort of am in ADV a not invented here a little bit uh you're the best judge of",
    "start": "2153680",
    "end": "2160920"
  },
  {
    "text": "whether it really is worth doing or not but you know if you can get a 10 times speed up it seems like maybe it's worth",
    "start": "2160920",
    "end": "2165960"
  },
  {
    "text": "a little NIH to to get that you know um so that's kind of this is kind of my eth thoughts is I really I really",
    "start": "2165960",
    "end": "2172200"
  },
  {
    "text": "strongly believe that it's important to profile your code come up with a baseline because if you noticed all of",
    "start": "2172200",
    "end": "2177400"
  },
  {
    "text": "my graphs it wasn't just one thing it was like a bunch of things to get a sense of where your solution fits in the ecosystem of what other people are doing",
    "start": "2177400",
    "end": "2183520"
  },
  {
    "text": "or you know what the state ofthe art is um because otherwise you just don't know you might think your thing's fast and it's really slow or vice versa um and",
    "start": "2183520",
    "end": "2192839"
  },
  {
    "text": "you know pay attention to uh the versions of stuff you're using Java 7's a lot better than Java 6 for a lot of",
    "start": "2192839",
    "end": "2198040"
  },
  {
    "text": "things so that's worth knowing and finally make sure to test correctness I mean I've definitely done the thing where I think I've implemented some",
    "start": "2198040",
    "end": "2203680"
  },
  {
    "text": "insanely great data structure only to find out that it's actually not working properly so it seems so fast because it's not doing any work you know that's",
    "start": "2203680",
    "end": "2210359"
  },
  {
    "text": "that's pretty humiliating thing and the last thing you want to do is crow about it on Twitter or something and then find out that your thing is completely broken",
    "start": "2210359",
    "end": "2215920"
  },
  {
    "text": "so make sure to also actually test it you know not just Benchmark it um and",
    "start": "2215920",
    "end": "2221400"
  },
  {
    "text": "then again you know this is sort of what I've been saying I I think functional programming is great I would be reluctant to give it up but if you can",
    "start": "2221400",
    "end": "2228760"
  },
  {
    "start": "2222000",
    "end": "2222000"
  },
  {
    "text": "minimize the area where you need to do something unsavory you should have no compulsions about doing an unsavory thing to achieve your goal basically the",
    "start": "2228760",
    "end": "2235280"
  },
  {
    "text": "ends justify the means I've said it um and then there's a bunch of",
    "start": "2235280",
    "end": "2240440"
  },
  {
    "text": "awesome links there's people who are way smarter than me about this stuff that I've learned a lot from here's a bunch of different interesting links that talk",
    "start": "2240440",
    "end": "2246400"
  },
  {
    "text": "about various things I have either alluded to or mentioned um and if you look online you'll you'll find lots of",
    "start": "2246400",
    "end": "2252240"
  },
  {
    "text": "stuff so that's it [Applause]",
    "start": "2252240",
    "end": "2260859"
  },
  {
    "text": "[Music]",
    "start": "2261200",
    "end": "2268820"
  }
]