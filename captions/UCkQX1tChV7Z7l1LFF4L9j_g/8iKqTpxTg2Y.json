[
  {
    "text": "[Music]",
    "start": "3320",
    "end": "8769"
  },
  {
    "text": "cool thank you so much Alison um so thank you all for being here um I'm T garfinkle um I'm a",
    "start": "11000",
    "end": "17720"
  },
  {
    "text": "research scientist at UC San Diego um uh did my PhD at Stanford prior to that I",
    "start": "17720",
    "end": "23680"
  },
  {
    "text": "spent about or during during before after uh actually I guess during and after uh",
    "start": "23680",
    "end": "30920"
  },
  {
    "text": "I spent about a decade at VMware from the pretty early days when it just a couple hundred people till it was about",
    "start": "30920",
    "end": "36079"
  },
  {
    "text": "26,000 people so uh my kind of formative years were spent um seeing the impact",
    "start": "36079",
    "end": "41399"
  },
  {
    "text": "that virtualization had on the industry from uh you know the point at which it was kind of like laughable that",
    "start": "41399",
    "end": "47399"
  },
  {
    "text": "everything would be running in a virtual machine and and BM slowed things down by like 30% uh to you know the point where",
    "start": "47399",
    "end": "53559"
  },
  {
    "text": "it was a given that of course you're going to be running in a VM so so today I'm going to be talking",
    "start": "53559",
    "end": "61239"
  },
  {
    "text": "about a few different things and I kind of try to break this into two parts um first I'm going to talk about like what",
    "start": "61239",
    "end": "67479"
  },
  {
    "text": "what is web assembly um kind of as an isolation technology um and how is it",
    "start": "67479",
    "end": "73200"
  },
  {
    "text": "being used and and what I was hoping for here is that even if you're kind of not into the sort of you know gory details",
    "start": "73200",
    "end": "80040"
  },
  {
    "text": "of wasm or you haven't used it before you'll kind of Come Away with some idea oh this is where wasm might be useful in a project for me um for a security",
    "start": "80040",
    "end": "87560"
  },
  {
    "text": "project um for some extensive stability piece for some serverless piece some place where like oh okay this this fits",
    "start": "87560",
    "end": "94640"
  },
  {
    "text": "right because wasum is is kind of this distinct point in the design space it's not containers it's not VMS it's this",
    "start": "94640",
    "end": "100159"
  },
  {
    "text": "other thing that that you can use the second part um I'm going to talk about uh the research that I've been working",
    "start": "100159",
    "end": "106200"
  },
  {
    "text": "on recently and this is kind of how do we push Beyond wen's limitations right",
    "start": "106200",
    "end": "112040"
  },
  {
    "text": "um WM is kind of doing something fundamentally unnatural right it's where",
    "start": "112040",
    "end": "117880"
  },
  {
    "text": "we're taking software and we're using it to overcome the limitations of hardware and again this is kind of close to my heart because of my background in",
    "start": "117880",
    "end": "124360"
  },
  {
    "text": "virtualization so if you kind of know the history of virtual machines VMware when it started out right was",
    "start": "124360",
    "end": "130280"
  },
  {
    "text": "virtualizing the x86 which was something you could not do right the x86 as an architecture is not virtualize so",
    "start": "130280",
    "end": "136440"
  },
  {
    "text": "instead what VMware did was use a combination of low-level Hardware features and binary translation to make",
    "start": "136440",
    "end": "142000"
  },
  {
    "text": "the x86 virtual virtualize and this is how we were able to get virtual machines and and for you know first 5 years more",
    "start": "142000",
    "end": "149680"
  },
  {
    "text": "right there was there was no support from the hardware and this was the only way to do it and eventually um Hardware caught up and we got to this world where",
    "start": "149680",
    "end": "156519"
  },
  {
    "text": "you know writing a virtual machine monitor is a project for a graduate student um anyway so let's let's get",
    "start": "156519",
    "end": "163120"
  },
  {
    "text": "into it I think um I see this kind of nice parallel between wasm uh where",
    "start": "163120",
    "end": "168159"
  },
  {
    "text": "again we're using the compiler and and software to overcome limited of hardware and uh yeah so let's get into",
    "start": "168159",
    "end": "174040"
  },
  {
    "text": "it so isolation isolation is fundamental to how we organize systems um we have",
    "start": "174040",
    "end": "179159"
  },
  {
    "text": "kind of two different Technologies to do this we have Hardware based isolation um right which is relies on the page tables",
    "start": "179159",
    "end": "186440"
  },
  {
    "text": "and protection rings and this is what processes VMS and containers are built on right we are all familiar with this",
    "start": "186440",
    "end": "191599"
  },
  {
    "text": "uh it's language independent bare metal speed unfortunately it's designed to be relatively coar grain right",
    "start": "191599",
    "end": "197159"
  },
  {
    "text": "communication between different protection domains is quite slow um starting one of these things up is quite slow and it has a l relatively large",
    "start": "197159",
    "end": "204080"
  },
  {
    "text": "resource footprint right fundamentally uh Hardware based isolation today is not a about uh uh",
    "start": "204080",
    "end": "211879"
  },
  {
    "text": "doing fine grain things the other place where we see isolation we we kind of take it for granted I think often is",
    "start": "211879",
    "end": "218799"
  },
  {
    "text": "within um programming languages right so this could be modules functions or in uh",
    "start": "218799",
    "end": "225280"
  },
  {
    "text": "programming languages like lling and OTP right processes we have kind of soft processes right so these are language",
    "start": "225280",
    "end": "232239"
  },
  {
    "text": "dependent right and they impose rtime overheads but they can be very very fine grain right we can start and stop these",
    "start": "232239",
    "end": "237360"
  },
  {
    "text": "things in Nan um they have very small footprint so they're and they really kind of match how we think about",
    "start": "237360",
    "end": "244280"
  },
  {
    "text": "things web assembly um is based on a technology called software-based fault isolation so software-based fault",
    "start": "244280",
    "end": "250760"
  },
  {
    "text": "isolation is an idea that goes back to the 90s uh this was a few years before I got to Cals an undergrad um and folks",
    "start": "250760",
    "end": "257639"
  },
  {
    "text": "were this is kind of in the middle of or the let's say I'll say middle of the",
    "start": "257639",
    "end": "263080"
  },
  {
    "text": "time of or the kind of Heyday of extensible operating systems so people are thinking about microc kernels people",
    "start": "263080",
    "end": "268639"
  },
  {
    "text": "were thinking about um writing kernels and safe languages right there is this like how do we get um more flexibility",
    "start": "268639",
    "end": "275800"
  },
  {
    "text": "into our systems and one of the ideas that came out of this was well instead of using um Hardware uh to enforce",
    "start": "275800",
    "end": "283240"
  },
  {
    "text": "protection what if we use the compiler um so SFI you know sort of",
    "start": "283240",
    "end": "289240"
  },
  {
    "text": "exists in this limal space right it's it is relatively language neutral because it has this model of memory that looks",
    "start": "289240",
    "end": "295360"
  },
  {
    "text": "very much like the underlying machine but it lets us get these nice properties that we usually get from soft based isolation right orders and Orders of",
    "start": "295360",
    "end": "302960"
  },
  {
    "text": "magnitude faster contact switches uh than we're going to get from VMS or containers um orders of magnitude faster",
    "start": "302960",
    "end": "308960"
  },
  {
    "text": "startup time small resource preference um massive scalability right and and this is what makes um you know companies",
    "start": "308960",
    "end": "316800"
  },
  {
    "text": "like Cloud flare and uh um fastly able to do what they do",
    "start": "316800",
    "end": "322880"
  },
  {
    "text": "with this kind of like hyperscaling that they do with with Edge base CIS so uh",
    "start": "322880",
    "end": "331479"
  },
  {
    "text": "um so what is web assembly so right so it's a platform independent um IR um",
    "start": "331479",
    "end": "337880"
  },
  {
    "text": "that you can aot or Jet and right so it isolates components within a single address space um you know generally like",
    "start": "337880",
    "end": "344919"
  },
  {
    "text": "within a single OS process um and sort of you know how is this possible right well it takes a lot",
    "start": "344919",
    "end": "350319"
  },
  {
    "text": "of work so it started out as a web standard um right you have to get all these various languages to Target this",
    "start": "350319",
    "end": "355600"
  },
  {
    "text": "new VM um you have to grow the ecosystem of tools to support it and then build a community around it and this is kind of",
    "start": "355600",
    "end": "361560"
  },
  {
    "text": "where we are today right we're about let's see 2 six six years into",
    "start": "361560",
    "end": "368919"
  },
  {
    "text": "this journey from when this first emerged and all the major browsers supported it and now we're you know it's",
    "start": "368919",
    "end": "374240"
  },
  {
    "text": "um seeing adoption on the edge and um a lot of folks are starting to use it in different applications that I'm going to",
    "start": "374240",
    "end": "379400"
  },
  {
    "text": "talk about next right so how is wasn't being used so the first example I'm going to",
    "start": "379400",
    "end": "386520"
  },
  {
    "text": "talk about which is not the biggest example but it's the one that's close to my heart because it's the stuff that we've we've done is library",
    "start": "386520",
    "end": "393360"
  },
  {
    "text": "sandboxing right so Firefox uses web assimil to isolate buggy",
    "start": "393360",
    "end": "398479"
  },
  {
    "text": "libraries um and this was uh this has been a close I think like fiveyear project",
    "start": "398479",
    "end": "404759"
  },
  {
    "text": "now from talking to our friends at Mozilla and recognizing there's this",
    "start": "404759",
    "end": "410919"
  },
  {
    "text": "problem right when you're using your browser when you're going to a website um your browser is rendering all",
    "start": "410919",
    "end": "417280"
  },
  {
    "text": "sorts of different content right media XML um uh audio right like",
    "start": "417280",
    "end": "425960"
  },
  {
    "text": "uh all sorts of different formats there's dozens of library to do this it uses these libraries for spell checking",
    "start": "425960",
    "end": "431680"
  },
  {
    "text": "right tons and tons of third partyy code right dependencies and these are all written in C and when any one of these has a vulnerability right that can",
    "start": "431680",
    "end": "438400"
  },
  {
    "text": "compromise your renderer so for example let's say I send you uh an image file",
    "start": "438400",
    "end": "444520"
  },
  {
    "text": "that particular library has a buffer overflow in it right I pop that library now I have control of your run now I",
    "start": "444520",
    "end": "450000"
  },
  {
    "text": "have control of that application so I have control of your email client um I may also have control of like everything",
    "start": "450000",
    "end": "455039"
  },
  {
    "text": "else in that site because we do have site isolation in browsers so maybe I've you know got you know mail.google.com",
    "start": "455039",
    "end": "461240"
  },
  {
    "text": "but maybe I also have pay. google.com for you maybe I also have cloud.google.com for you right so it's a",
    "start": "461240",
    "end": "466759"
  },
  {
    "text": "very very serious class of attacks and so what we found is um that",
    "start": "466759",
    "end": "473560"
  },
  {
    "text": "it's it's actually not easy right we kind of had to build some tooling and uh infrastructure to enable this but that with the appropriate tools we could",
    "start": "473560",
    "end": "479919"
  },
  {
    "text": "start sandboxing these libraries and so this has been shipping in Firefox since 2020 so today if you're using Firefox",
    "start": "479919",
    "end": "486919"
  },
  {
    "text": "right a bunch of Li those libraries are actually sandboxed um and right this isn't",
    "start": "486919",
    "end": "494879"
  },
  {
    "text": "particular to oh sorry I've got the performance overhead is low slide that's mandatory um and right in this is not",
    "start": "494879",
    "end": "501800"
  },
  {
    "text": "particular to to Firefox right like every application out there um depends",
    "start": "501800",
    "end": "508720"
  },
  {
    "text": "on C C++ libraries um right this is where most of",
    "start": "508720",
    "end": "514159"
  },
  {
    "text": "your bugs live is in native code right a majority of our bugs are in these CN C++ libraries um and most of the self",
    "start": "514159",
    "end": "521159"
  },
  {
    "text": "languages that you use rely on these libraries right so you may be like oh I don't have to care about the same writing in you know rust or Java or",
    "start": "521159",
    "end": "528080"
  },
  {
    "text": "python like whatever language you depend on you probably have an like a large number of dependencies that are actually",
    "start": "528080",
    "end": "534320"
  },
  {
    "text": "just C libraries that have been wrapped by these languages um",
    "start": "534320",
    "end": "539560"
  },
  {
    "text": "and so uh what we're doing now and you know as part of our research is working on how do we get this out of you know we",
    "start": "539560",
    "end": "546920"
  },
  {
    "text": "built these tools for C++ for Firefox but how do we get this out there and actually into the ecosystem right how do",
    "start": "546920",
    "end": "552600"
  },
  {
    "text": "we build this as something that like you can opt into like when you uh pull a crate on cargo or you know when you pull",
    "start": "552600",
    "end": "558880"
  },
  {
    "text": "an NP on Ruby to say okay or sorry on um on node to say Okay I want to opt into",
    "start": "558880",
    "end": "564200"
  },
  {
    "text": "the the sandbox version of this Library um and if this is something that's interesting to you that could improve improve your uh security profile uh I'd",
    "start": "564200",
    "end": "572760"
  },
  {
    "text": "love to talk so again there's lots of other examples of how you can use WM um a big",
    "start": "572760",
    "end": "580880"
  },
  {
    "text": "one of these is serverless right so today again Edge platforms use this for hyperscaling um uh this allows them",
    "start": "580880",
    "end": "587240"
  },
  {
    "text": "right so every time these guys get a packet they spin up a new instance right and um because they can get low Conta",
    "start": "587240",
    "end": "594040"
  },
  {
    "text": "switch overheads right they can run many of these things concurrently without paying the contact switch tax uh they can start these up in",
    "start": "594040",
    "end": "600440"
  },
  {
    "text": "microsc um and they can use uh you know orders of magnitude less memory than they might end up if they're using a",
    "start": "600440",
    "end": "608079"
  },
  {
    "text": "VM um again uh plugins and extensibility and this is a huge area so if you're using a service mesh you know is like",
    "start": "608079",
    "end": "615399"
  },
  {
    "text": "Envoy and stu um Shopify has used this for uh running user code server side um",
    "start": "615399",
    "end": "624000"
  },
  {
    "text": "stored procedures that sort of way of using this and Kafka right there's also sorts of places where you're like I would like some safe extensibility I",
    "start": "624000",
    "end": "630600"
  },
  {
    "text": "want to put some code close to my data path and wasm is a great tool for that um another place that wasm is",
    "start": "630600",
    "end": "637320"
  },
  {
    "text": "really catching on is in the iot space because um right you have this whole uh",
    "start": "637320",
    "end": "644320"
  },
  {
    "text": "diversity of different devices and you have your developers that are writing your application code and you would't want them to have to worry about you",
    "start": "644320",
    "end": "650320"
  },
  {
    "text": "know all the fussy details of the different compilers different devices and so uh wm's platform Independence is",
    "start": "650320",
    "end": "656600"
  },
  {
    "text": "being used as this layer to kind of Shield people who are writing application logic from the particulars of the different iot devices um and this",
    "start": "656600",
    "end": "663680"
  },
  {
    "text": "I think this is going to be uh very big I think you know as we see more and more um intelligence embedded in different",
    "start": "663680",
    "end": "669880"
  },
  {
    "text": "devices uh this model where um you know some you know whether it's Microsoft or",
    "start": "669880",
    "end": "676120"
  },
  {
    "text": "Amazon or someone else is dealing with software updates and distribution all these things for you and you just build",
    "start": "676120",
    "end": "681360"
  },
  {
    "text": "your business l or your I guess it's business logic and wasm I think that this is going to be uh",
    "start": "681360",
    "end": "687839"
  },
  {
    "text": "sort of a really important model for using W them",
    "start": "687839",
    "end": "694000"
  },
  {
    "text": "so so this sounds great you've got this really lightweight",
    "start": "694000",
    "end": "699160"
  },
  {
    "text": "isolation technology um but how does this compare to running on bare metal um and the",
    "start": "699160",
    "end": "704800"
  },
  {
    "text": "reality today is right there's a lot of limitations um one of these is",
    "start": "704800",
    "end": "709880"
  },
  {
    "text": "performance overheads um right another of these is is scaling and again you",
    "start": "709880",
    "end": "715279"
  },
  {
    "text": "know out the gate wasm is still better at scaling than um kind of your traditional Hardware uh Solutions but uh",
    "start": "715279",
    "end": "723079"
  },
  {
    "text": "it has some some limitations as well I talk about uh Spector safety is uh a big",
    "start": "723079",
    "end": "729760"
  },
  {
    "text": "deal just out of curiosity uh who knows why the little ghost is carrying a",
    "start": "729760",
    "end": "737040"
  },
  {
    "text": "stick it's a it's a",
    "start": "737839",
    "end": "741519"
  },
  {
    "text": "branch I know I love it and finally um finally compatibility is",
    "start": "745440",
    "end": "753480"
  },
  {
    "text": "an issue right like um essentially wasm is is par virtualization right like back",
    "start": "753480",
    "end": "759440"
  },
  {
    "text": "back in the day before we had virtualization Hardware it was like let's change the operating system right this is what wasm is doing but it's like",
    "start": "759440",
    "end": "765160"
  },
  {
    "text": "let's change the compiler to Output this new IR um and uh some you know some of",
    "start": "765160",
    "end": "771079"
  },
  {
    "text": "that is like uh we're we're we're dealing with and and some of that's fundamental sorry so so just quick",
    "start": "771079",
    "end": "776880"
  },
  {
    "text": "review before I get into this um who all remembers uh undergrad operating",
    "start": "776880",
    "end": "782480"
  },
  {
    "text": "system just uh does everyone remember page tables and",
    "start": "782480",
    "end": "788000"
  },
  {
    "text": "tlvs yes okay um so right we've got our like we go",
    "start": "788000",
    "end": "796040"
  },
  {
    "text": "looking for memory so page tables are incredibly powerful they're like this amazing thing you can use them for",
    "start": "796040",
    "end": "801120"
  },
  {
    "text": "compression you can use them for live migration you can use them for uh overcommit right it's a really really",
    "start": "801120",
    "end": "806639"
  },
  {
    "text": "powerful abstraction um because you know as we know in computer science we can solve any problem with a level of induction and this is what page tables",
    "start": "806639",
    "end": "813240"
  },
  {
    "text": "are um the problem is that our tlb is um a bottleneck um it is a bottleneck in",
    "start": "813240",
    "end": "818480"
  },
  {
    "text": "terms of like how many things we can shove through there because if we have too much um concurrency it becomes a",
    "start": "818480",
    "end": "823760"
  },
  {
    "text": "point of contention um and if we want to modify our tlb quickly and dynamically things get",
    "start": "823760",
    "end": "830040"
  },
  {
    "text": "weird uh something you probably don't see every day but again you probably read about in an undergrad or who who",
    "start": "830040",
    "end": "836279"
  },
  {
    "text": "all remembers uh segmentation in x86 32 yes okay got a few tickers cool um I",
    "start": "836279",
    "end": "844720"
  },
  {
    "text": "do so right so the kind of other uh choice we generally have over architecting systems right is",
    "start": "844720",
    "end": "850120"
  },
  {
    "text": "segmentation there are other other forms of memory management out there but this is kind of a a big candidate and so",
    "start": "850120",
    "end": "855519"
  },
  {
    "text": "segmentation Works differently right it is one of the earliest forms of of memory management and here we have this notion of base and",
    "start": "855519",
    "end": "861560"
  },
  {
    "text": "Bounds um and it's it it doesn't have the the issues of the tlb or it has its own",
    "start": "861560",
    "end": "866759"
  },
  {
    "text": "limitations right but our model ISM we do dress lookup we do it like usually relative to uh the start of a a segment",
    "start": "866759",
    "end": "874040"
  },
  {
    "text": "um and the segment has permissions and and whatnot so it's kind of an alternative scheme why am I talking about this um a lot of the limitations",
    "start": "874040",
    "end": "881399"
  },
  {
    "text": "that VMS and containers have that are fundamental have to do with the fact they are dependent on page tables um",
    "start": "881399",
    "end": "886800"
  },
  {
    "text": "this limits scale and it limits dynamism right if you want to create these things if you want to destroy them if you want",
    "start": "886800",
    "end": "892120"
  },
  {
    "text": "to resize them you will shoot down your tlb uh this is expensive",
    "start": "892120",
    "end": "898040"
  },
  {
    "text": "um again if you end up with many of these things you'll end up contending for your tlb um I review papers and",
    "start": "898040",
    "end": "903639"
  },
  {
    "text": "sometimes I get these papers and they're like oh like we have like you know you know address space identifiers and so we",
    "start": "903639",
    "end": "908839"
  },
  {
    "text": "can you know tag things in our tlb and like this is how many of them are and I'm like the number you're telling me is",
    "start": "908839",
    "end": "914399"
  },
  {
    "text": "actually much larger than your tlb physically is so you are going to be flushing your tlb so um again tlbs are",
    "start": "914399",
    "end": "921199"
  },
  {
    "text": "incredibly powerful but they do have these kind of inherent limitations um the other limitation are context",
    "start": "921199",
    "end": "928079"
  },
  {
    "text": "switches right and um part of this is protection ring Crossings but protection",
    "start": "928079",
    "end": "933440"
  },
  {
    "text": "ring Crossings are actually not that bad right maybe they're in the tens of Nan seconds um but the scheduler is is",
    "start": "933440",
    "end": "939800"
  },
  {
    "text": "pretty expensive so you have to buy if you have to buy into the OS scheduler that's going to cost you doing a heavy rate so save and restore is going to",
    "start": "939800",
    "end": "945839"
  },
  {
    "text": "cost you right there's all these things that take us like well well beyond uh the realm of and there's also going to",
    "start": "945839",
    "end": "951160"
  },
  {
    "text": "be uh cash pollution or there's all these these futy things that if you have to go back and forth uh between the",
    "start": "951160",
    "end": "956600"
  },
  {
    "text": "operating system when you want to switch between preure it's going to get way way more expensive than uh if you can just basically do a",
    "start": "956600",
    "end": "963319"
  },
  {
    "text": "function call which is what's happening uh in something like WM you know when you like I make these",
    "start": "963319",
    "end": "969880"
  },
  {
    "text": "comparisons to Lambda sometimes you know you can spin up a wasm instance and you know a couple microseconds whatever um",
    "start": "969880",
    "end": "976920"
  },
  {
    "text": "and you know with the Lambda you're talking like 100 milliseconds um but really right I mean then there's like there's the OS overhead you know OS",
    "start": "976920",
    "end": "983600"
  },
  {
    "text": "overheads there's language runtime overheads um whatever funny thing they're doing in their virtual you know",
    "start": "983600",
    "end": "989040"
  },
  {
    "text": "virtualization layer um recently Microsoft has their kind of like hyperlight their very light hypervisor",
    "start": "989040",
    "end": "994680"
  },
  {
    "text": "that they're going to use to run wasm in and their start of signs are still like they're you know saying like 100 microsecond scale which is still um you",
    "start": "994680",
    "end": "1002399"
  },
  {
    "text": "know a couple orders of magnitude off of what um what we can get with with just kind of like straight up",
    "start": "1002399",
    "end": "1009399"
  },
  {
    "text": "bom so so what is the alternative um and the",
    "start": "1010199",
    "end": "1015720"
  },
  {
    "text": "alternative again is um again I I software BAS fault isolation and and to me software based fault isolation is",
    "start": "1015720",
    "end": "1021199"
  },
  {
    "text": "like is Poor Man segmentation we like we don't have Hardware segmentation so we're going to do this in software how",
    "start": "1021199",
    "end": "1026558"
  },
  {
    "text": "do you do this in software two ways right the simplest way that you could think of to do this is just add balance",
    "start": "1026559",
    "end": "1031959"
  },
  {
    "text": "checks to every load in store um the problem with this is that this is expensive right you're you're",
    "start": "1031959",
    "end": "1038880"
  },
  {
    "text": "adding iash pressure you're adding the cost of executing those checks you're um chewing up uh GP general purpose",
    "start": "1038880",
    "end": "1045760"
  },
  {
    "text": "registers to keep around those bounds um all right so this is you're easily looking at a 40 to 100% slow down um on",
    "start": "1045760",
    "end": "1052240"
  },
  {
    "text": "real benchmarks and of course you're you're you're not Spectre safe so that's mostly not what people do",
    "start": "1052240",
    "end": "1060280"
  },
  {
    "text": "um if you look at a production wasm implementation if you look at what's happening in your browser if you look what's happening server side what people",
    "start": "1060280",
    "end": "1067120"
  },
  {
    "text": "are doing is they break the address space up into guard regions and address spaces right so uh in WM I'm doing",
    "start": "1067120",
    "end": "1075799"
  },
  {
    "text": "32-bit memories and a 64-bit address space so I can break this up into these eight gig chunks the first four gigs is",
    "start": "1075799",
    "end": "1083159"
  },
  {
    "text": "my address space the second four G uh four gigs is a guard region and when I'm",
    "start": "1083159",
    "end": "1088240"
  },
  {
    "text": "doing addressing in WM so you know if I'm doing 32-bit on sign loads um I take that I add that to the beginning of my",
    "start": "1088240",
    "end": "1095480"
  },
  {
    "text": "uh memory Base address and now I've got a 33 bit value 8 gigs right so it's either going to land in my address bace",
    "start": "1095480",
    "end": "1101640"
  },
  {
    "text": "or it's going to land in my guard region so what did this do for me so this lets me get rid of my balance checks I still",
    "start": "1101640",
    "end": "1107520"
  },
  {
    "text": "have to do that base addition right so I'm still adding an instruction to every loader store every loader store is going to be base Edition and then the actual",
    "start": "1107520",
    "end": "1114280"
  },
  {
    "text": "loader store um but it helps it helps a lot right it helps like getting us down",
    "start": "1114280",
    "end": "1119760"
  },
  {
    "text": "to maybe like 15 20% range so it's a big win this also has limitations that it",
    "start": "1119760",
    "end": "1125240"
  },
  {
    "text": "brings though unfortunately um some of these are I'm still involved with the um bmu right",
    "start": "1125240",
    "end": "1133600"
  },
  {
    "text": "have not escaped right for uh you know setting up and tearing down memory um",
    "start": "1133600",
    "end": "1140720"
  },
  {
    "text": "um there are other limitations I get right one of these is the guard regions right they scale poorly right so on x86",
    "start": "1141000",
    "end": "1150200"
  },
  {
    "text": "in user space I've got 2 to the 47 address space um right like each of",
    "start": "1150200",
    "end": "1156919"
  },
  {
    "text": "these 8 gig regions is 2 to 33 I do my math I've got like 2 to the 14 or about like 16,000 instances that I can put in",
    "start": "1156919",
    "end": "1163960"
  },
  {
    "text": "here I can arrange things a little more cleverly and get about 20,000 instances um so this sounds",
    "start": "1163960",
    "end": "1170880"
  },
  {
    "text": "great uh the problem is is that when I'm using this in a serverless context again I'm I'm spinning up one of these right",
    "start": "1170880",
    "end": "1177320"
  },
  {
    "text": "in like every time I get an request and each of them is often running like under a millisecond right because I don't have",
    "start": "1177320",
    "end": "1182640"
  },
  {
    "text": "all those F funny overheads with Lambda anymore it's just running my code um so",
    "start": "1182640",
    "end": "1188080"
  },
  {
    "text": "filling up an address space is pretty easy so I fill up one process address",
    "start": "1188080",
    "end": "1193280"
  },
  {
    "text": "bace I can start another process another but then I've got contact switch overheads then I've got IPC overheads when I talk to them if I want to chain",
    "start": "1193280",
    "end": "1199280"
  },
  {
    "text": "functions I've kind of I'm getting back into the space that I was trying to get away from the other thing is the component",
    "start": "1199280",
    "end": "1206000"
  },
  {
    "text": "model right so a really really great thing about web assembly is right the component model it's this new thing",
    "start": "1206000",
    "end": "1212080"
  },
  {
    "text": "where instead of running your application in one address space you'll be running your application in multiple",
    "start": "1212080",
    "end": "1217559"
  },
  {
    "text": "address spaces so you know you can have components you can have your dependencies broken into separate isolated things could be one Library",
    "start": "1217559",
    "end": "1223919"
  },
  {
    "text": "could be multiple libraries but we're talking about potentially like an order of magnitude or more increase in the",
    "start": "1223919",
    "end": "1229039"
  },
  {
    "text": "number of address spaces per application right so we need to do something about the scaling",
    "start": "1229039",
    "end": "1234240"
  },
  {
    "text": "limit the other problem with is guard region scheme we can't use it with 64-bit",
    "start": "1234240",
    "end": "1239360"
  },
  {
    "text": "memories right we're back to conditional checks um and we can't use it with older processors right we can only play it",
    "start": "1239360",
    "end": "1245640"
  },
  {
    "text": "under these particular conditions and and finally um you know these these tricks that we're playing still have",
    "start": "1245640",
    "end": "1253080"
  },
  {
    "text": "overheads so the final limitation again is compatibility um",
    "start": "1253080",
    "end": "1258840"
  },
  {
    "text": "so this is a big one this is a big one today if you're going to be using WM for real projects and I can talk about like",
    "start": "1258840",
    "end": "1264080"
  },
  {
    "text": "what you can do now what you're going to be able to do in a year what you're going to be able to do in two years right because um right you're you have",
    "start": "1264080",
    "end": "1270720"
  },
  {
    "text": "you're presenting this interface to programming languages you know to compilers for them to Target so you need to provide a rich enough interface to",
    "start": "1270720",
    "end": "1276520"
  },
  {
    "text": "get them what they need and you also need to provide a rich enough interface that they can exploit all the functionality in the hardware um some of",
    "start": "1276520",
    "end": "1284440"
  },
  {
    "text": "this is getting better better standards um some of this is just fundamental to like how uh wasm works that we're not",
    "start": "1284440",
    "end": "1290679"
  },
  {
    "text": "going to overcome um for example like I don't think uh Dynamic code generation",
    "start": "1290679",
    "end": "1295720"
  },
  {
    "text": "is is is anywhere in the near future you're never going to be able to kind of do direct system calls although a lot of",
    "start": "1295720",
    "end": "1300760"
  },
  {
    "text": "this stuff can be supported by Wy um and you know you're never going to get your platform specific assembly to magically",
    "start": "1300760",
    "end": "1306080"
  },
  {
    "text": "run in WM although we have some tricks for dealing with intrinsics that I'd be happy to talk",
    "start": "1306080",
    "end": "1311720"
  },
  {
    "text": "about um so two things um how do we do better",
    "start": "1311720",
    "end": "1319799"
  },
  {
    "text": "with current hardware and then how can we extend Hardware to overcome these limitations U and by extend Hardware to",
    "start": "1319799",
    "end": "1326279"
  },
  {
    "text": "overcome these limitations I mean the limitations that wasm has but like all the way to how do we get these",
    "start": "1326279",
    "end": "1331600"
  },
  {
    "text": "properties that wasm has right super fast startup tear down communication like all this goodness without even having get get into wasm right just for",
    "start": "1331600",
    "end": "1338320"
  },
  {
    "text": "Native binaries for whatever code you run so first optimizations so I have two",
    "start": "1338320",
    "end": "1344960"
  },
  {
    "text": "things that I'm going to talk about that we're doing today kind of using Hardware in dirty ways uh to make things go faster first one is",
    "start": "1344960",
    "end": "1351039"
  },
  {
    "text": "an optimization called segue super simple and it takes about 25% of wm's total tax um uh",
    "start": "1351039",
    "end": "1359360"
  },
  {
    "text": "away the second one is one called color guard and this addresses that scalability problem I mention and lets",
    "start": "1359360",
    "end": "1365360"
  },
  {
    "text": "you go from yeah the 20K instance Max to about a quarter of a million",
    "start": "1365360",
    "end": "1371400"
  },
  {
    "text": "so um back to segmentation I I just love this topic I keep on coming back to",
    "start": "1371400",
    "end": "1377279"
  },
  {
    "text": "it right so segmentation was largely removed when we moved to x864 right intel was off doing",
    "start": "1377279",
    "end": "1384760"
  },
  {
    "text": "itanium and AMD was like never mind here's the new standard and as part of that they dropped",
    "start": "1384760",
    "end": "1391240"
  },
  {
    "text": "segmentation um I'm sure it simplifies some things at the microarchitectural level there was good reasons for doing",
    "start": "1391240",
    "end": "1397080"
  },
  {
    "text": "this um and what we were left with was segment relative addressing and two segment registers so at the rest of our",
    "start": "1397080",
    "end": "1402279"
  },
  {
    "text": "segment registers now don't do anything you can still use escs DS but they just are B based to zero",
    "start": "1402279",
    "end": "1409880"
  },
  {
    "text": "um we still use these segment registers right if you're using thread local storage right it is you're uh addressing",
    "start": "1409880",
    "end": "1416200"
  },
  {
    "text": "things using segment relative addressing with one of these registers it's going to be Fs in Linux and I believe it's going to be GS in in",
    "start": "1416200",
    "end": "1423799"
  },
  {
    "text": "Windows as it turns out we can use this amazing register for other things I mean to be honest you can actually use both",
    "start": "1423799",
    "end": "1429320"
  },
  {
    "text": "of these for other things because uh you know in like a was and run time uh you know when you're going to be hand to control back to something that's going",
    "start": "1429320",
    "end": "1435559"
  },
  {
    "text": "to be using third level storage so the trick is right we just take that that base Edition that we were doing",
    "start": "1435559",
    "end": "1441720"
  },
  {
    "text": "right again like with guard Regents we do a base Edition and then we do a loader store and we move that heat based",
    "start": "1441720",
    "end": "1447039"
  },
  {
    "text": "into a segment register and then we just do segment relative addressing so one instruction became two one general",
    "start": "1447039",
    "end": "1453919"
  },
  {
    "text": "purpose register that you were burning you can just use a segment register you weren't using anyway um and",
    "start": "1453919",
    "end": "1459760"
  },
  {
    "text": "you're getting rid of instruction cash pressure",
    "start": "1459760",
    "end": "1465440"
  },
  {
    "text": "um so you can see sort our exra instruction goes away uh frees up an extra register um",
    "start": "1466039",
    "end": "1474000"
  },
  {
    "text": "frees up some uh extra flexibility for the compiler um as it turns out we get this",
    "start": "1474000",
    "end": "1481480"
  },
  {
    "text": "big code size reduction which was kind of a pleasant surprise to us",
    "start": "1481480",
    "end": "1486679"
  },
  {
    "text": "um we get some nice performance reductions um on",
    "start": "1486679",
    "end": "1492960"
  },
  {
    "text": "spec um and on specific workloads we get even even bigger jumps uh that I'll mention a little bit later",
    "start": "1492960",
    "end": "1498919"
  },
  {
    "text": "um so this is actually landed in whammer which is Intel's uh was and runtime uh",
    "start": "1498919",
    "end": "1504000"
  },
  {
    "text": "compiler and runtime um just recently um and I I I flag that thing reduces",
    "start": "1504000",
    "end": "1509080"
  },
  {
    "text": "compilation time of jit and aot I have no idea why it makes it faster but it's like one of these things when people deployed it's like oh that was great I",
    "start": "1509080",
    "end": "1515520"
  },
  {
    "text": "didn't even know we were going to get that so the other trick that we came up with is called",
    "start": "1515520",
    "end": "1522039"
  },
  {
    "text": "color guard and color guard um sorry I'm doing Ma time math in",
    "start": "1522039",
    "end": "1529919"
  },
  {
    "text": "my head um card takes advantage of a a",
    "start": "1529919",
    "end": "1535200"
  },
  {
    "text": "capability on uh Intel and AMD processors uh called memory protection Keys um this is uh been in Intel",
    "start": "1535200",
    "end": "1543320"
  },
  {
    "text": "processors for quite a while and AMD processor since epic Milan so it's if you're on older AMD Hardware you might",
    "start": "1543320",
    "end": "1549559"
  },
  {
    "text": "be a little sad but this is relatively widespread the way that this works is for every page you associate a 4bit tag",
    "start": "1549559",
    "end": "1557000"
  },
  {
    "text": "and we usually think about those tag in terms of colors and then each core has a tag register and so if the color in the",
    "start": "1557000",
    "end": "1563799"
  },
  {
    "text": "register matches the color on that page right then you're allowed to access it and if it doesn't match then you're not",
    "start": "1563799",
    "end": "1569399"
  },
  {
    "text": "allowed to access it um so we have this kind of new cool production mechanism what I can do with this",
    "start": "1569399",
    "end": "1575520"
  },
  {
    "text": "mechanism is I can eliminate that waste that I had so going back to that picture that we had in our mind right we have 4",
    "start": "1575520",
    "end": "1582039"
  },
  {
    "text": "gig dress space and a 4 gig guard region so let's say we take that 8 gig region",
    "start": "1582039",
    "end": "1587279"
  },
  {
    "text": "and we break it into colors then we say 500 gigs is going to be red then the next or sorry 500 Megs is going to be red next 100 500 is yellow next 500 is",
    "start": "1587279",
    "end": "1594279"
  },
  {
    "text": "blue next 500 is green till we fill that out so now what we can do right is we're",
    "start": "1594279",
    "end": "1599919"
  },
  {
    "text": "using the address spaces of our other VMS as our guard regions and we want to contact switch we just switch the color",
    "start": "1599919",
    "end": "1605880"
  },
  {
    "text": "of that register um and all of a sudden we've eliminated that waste and now again we've kind of got",
    "start": "1605880",
    "end": "1612120"
  },
  {
    "text": "this big win and we can run you know order of 12x more instances uh in the same amount of space",
    "start": "1612120",
    "end": "1619720"
  },
  {
    "text": "so this is fun um this does not address all the performance imp you know",
    "start": "1620720",
    "end": "1625760"
  },
  {
    "text": "limitations it doesn't even address all the scaling limitations even with that cool trick because again we're we're restricted to you know our 15 colors and",
    "start": "1625760",
    "end": "1632679"
  },
  {
    "text": "our eight gigs um but it's it's",
    "start": "1632679",
    "end": "1636760"
  },
  {
    "text": "nice but how do we go further",
    "start": "1637799",
    "end": "1644520"
  },
  {
    "text": "um so after working with this stuff for a few years and kind of you know beating our head against the limitations of Wasa we're like we just we just really want",
    "start": "1645480",
    "end": "1652120"
  },
  {
    "text": "Hardware support and what do we want from that we want three things number one we",
    "start": "1652120",
    "end": "1657320"
  },
  {
    "text": "want um really simple micro architecture and the reason for this is that it's really really hard to get changes into",
    "start": "1657320",
    "end": "1662919"
  },
  {
    "text": "real processors um there you have a very very limited budget in terms of gates um",
    "start": "1662919",
    "end": "1668320"
  },
  {
    "text": "if you are kind of close to the critical path um and so we uh worked with Folks at Intel and we went back and forth a",
    "start": "1668320",
    "end": "1674519"
  },
  {
    "text": "lot in terms of like can we have this and they're like No And like okay let's figure figure out how to work around that um uh the other thing we wanted",
    "start": "1674519",
    "end": "1682440"
  },
  {
    "text": "another thing we wanted is minimal OS changes um it is really hard to get Linux uh to to do things it is really",
    "start": "1682440",
    "end": "1688559"
  },
  {
    "text": "hard to get Windows to do things for ex for example mpk has is is not supported in Windows and I don't think it's ever",
    "start": "1688559",
    "end": "1693880"
  },
  {
    "text": "going to be um there there are lots of like funny silly things that you like if",
    "start": "1693880",
    "end": "1700640"
  },
  {
    "text": "you like hang on the colonel mailing list you'll be like wow like that is really small I'm shocked that it is taking this long to get supported so",
    "start": "1700640",
    "end": "1706679"
  },
  {
    "text": "you're like oh man we don't want to be involved with that that the third thing we wanted was this ability to support um both wasm and",
    "start": "1706679",
    "end": "1714960"
  },
  {
    "text": "other sorts of software based fault isolation against other sorts of compiler en forced isolation um for example V8 now has its own custom way of",
    "start": "1714960",
    "end": "1722519"
  },
  {
    "text": "doing this because uh the V8 jit is a an area that has lots and lots of bugs um",
    "start": "1722519",
    "end": "1729760"
  },
  {
    "text": "and of course we want to be able to support um unmodified Native biners as well so kind of the whole spectrum of these",
    "start": "1729760",
    "end": "1735480"
  },
  {
    "text": "things and our solution to this um is a is an extension we call Hardware",
    "start": "1735480",
    "end": "1741080"
  },
  {
    "text": "assisted fault isolation so HFI um is a user space Isa",
    "start": "1741080",
    "end": "1748200"
  },
  {
    "text": "extension right that gives us a few key Primitives one it gives us um bases and Bounds right so this ability to say okay",
    "start": "1748200",
    "end": "1755440"
  },
  {
    "text": "like here's a set of data data regions um or here's a set of virtual address ranges that I can um Grant the sandbox",
    "start": "1755440",
    "end": "1763080"
  },
  {
    "text": "access to right so I I set up my mapping of virtual address regions I say okay I'm going to enter the sandbox once I'm",
    "start": "1763080",
    "end": "1768440"
  },
  {
    "text": "into the enter once I'm in the sandbox that's the only memory we can access I execute my guest code my sandbox code",
    "start": "1768440",
    "end": "1774399"
  },
  {
    "text": "and then when it calls exit it hands control back to a around time there's more details but that's the essential idea it's dead",
    "start": "1774399",
    "end": "1782440"
  },
  {
    "text": "simple what HFI provides for us right is super fast isolation right those bounce",
    "start": "1782440",
    "end": "1787760"
  },
  {
    "text": "checks are executed in parallel with your tlb lookups so they add no overhead to native code um which you know is what",
    "start": "1787760",
    "end": "1795600"
  },
  {
    "text": "you expect with like a page table as well um we get very very fast fysical interposition which I'll talk about a",
    "start": "1795600",
    "end": "1801000"
  },
  {
    "text": "little bit later um this gives us some forms of Spectre safety uh which I'll also talk about later",
    "start": "1801000",
    "end": "1807960"
  },
  {
    "text": "um it gives us unlimited scaling right it doesn't have any of those constraints that we had before right we have a small",
    "start": "1807960",
    "end": "1813039"
  },
  {
    "text": "amount of onip State we context which that State uh and then and we're done and we can set up tear down and resize",
    "start": "1813039",
    "end": "1818840"
  },
  {
    "text": "sandboxes very very quickly right this is just a change of registers um and finally of course it's",
    "start": "1818840",
    "end": "1824600"
  },
  {
    "text": "this is compatible with existing code we don't have to get into the whole huge that we're playing with",
    "start": "1824600",
    "end": "1830640"
  },
  {
    "text": "WM so one challenge so this sounds like a nice idea you're like great you know I",
    "start": "1830799",
    "end": "1836200"
  },
  {
    "text": "want to do like upper and lower balance check I'm going to implement regions this is just segmentation you know I'm just going to grab two 64bit comparators",
    "start": "1836200",
    "end": "1842840"
  },
  {
    "text": "I'm going to do an upper balance check I'm going to be a lower balance check amazing and if you go to an architect and you we went to an architect Andel",
    "start": "1842840",
    "end": "1850120"
  },
  {
    "text": "and we're like this is what we want to do they're like you know like like you they take away your lollipop and send you home um right",
    "start": "1850120",
    "end": "1859080"
  },
  {
    "text": "so right we've got a limited gate count we we cannot slow down existing pipeline stages because like that'll slow down",
    "start": "1859080",
    "end": "1864840"
  },
  {
    "text": "everything um we can't put complex circuits in there right this the we're right on the data path so this is going",
    "start": "1864840",
    "end": "1870799"
  },
  {
    "text": "to been described as the Manhattan of Chip real estate um so how do we how do we do these checks um in a way that",
    "start": "1870799",
    "end": "1877720"
  },
  {
    "text": "requires very very little silicon and our answer to this is that you specialize regions um to a few",
    "start": "1877720",
    "end": "1885000"
  },
  {
    "text": "different types um and we have two different types of regions and again kind of going back to the world of x86",
    "start": "1885000",
    "end": "1891039"
  },
  {
    "text": "segmentation remember we used to have segments that apply to all memory accesses and segments that apply that",
    "start": "1891039",
    "end": "1896880"
  },
  {
    "text": "use where you segment relative addressing and regions are the same way right so we have uh explicit regions",
    "start": "1896880",
    "end": "1902760"
  },
  {
    "text": "where you do relative addressing um and the nice thing about this is that we can do this with one 32-bit compare right",
    "start": "1902760",
    "end": "1908639"
  },
  {
    "text": "because it's always like one-sided I'm always just doing or sorry and so I've constrained",
    "start": "1908639",
    "end": "1915799"
  },
  {
    "text": "my I get all the expressive my x86 move instruction except right I'm going to constrain it to say that my index has to",
    "start": "1915799",
    "end": "1922559"
  },
  {
    "text": "be positive and doing that right I can just do a one-sided comparison um and so I can do this with very little Hardware",
    "start": "1922559",
    "end": "1929559"
  },
  {
    "text": "this only works though if I'm doing relative addressing but the other thing I want is to be able to do um just apply this to",
    "start": "1929559",
    "end": "1936639"
  },
  {
    "text": "everything so how I'm going to do that is I'm going to give up some granularity right with my explicit regions I can be",
    "start": "1936639",
    "end": "1943080"
  },
  {
    "text": "like well I have a large region and a small region with my small regions where I can you know address up to 4 gigs at a",
    "start": "1943080",
    "end": "1948519"
  },
  {
    "text": "time I'm going to have bik granular addressing and this is really important for doing sandboxing all right when we",
    "start": "1948519",
    "end": "1955360"
  },
  {
    "text": "sandbox lers in Firefox we do not want to change them somebody else maintains that code want to be able to say this is a data structure here is where it lives",
    "start": "1955360",
    "end": "1961799"
  },
  {
    "text": "in memory I'm going to map that into my sandbox without changing code for that I have to have bite granular addressing um",
    "start": "1961799",
    "end": "1970240"
  },
  {
    "text": "for larger things so again remember with wasm I'm doing things relative to the",
    "start": "1970240",
    "end": "1976320"
  },
  {
    "text": "base of linear memory and and actually I I want this because um with wasm I can have many linear memories and so I'm",
    "start": "1976320",
    "end": "1982880"
  },
  {
    "text": "going to use my uh um region relative addressing for that um but there I again",
    "start": "1982880",
    "end": "1990840"
  },
  {
    "text": "I only need to grow it in 64k chunks because right I'm growing growing my Heap and then with implicit regions I",
    "start": "1990840",
    "end": "1996919"
  },
  {
    "text": "can use this for code I can use this for static data I use this as for stack right it's um because I'm using masking",
    "start": "1996919",
    "end": "2003960"
  },
  {
    "text": "right I have to be power of to aligned uh and sized uh but you know often like I can deal with that extra slop and what",
    "start": "2003960",
    "end": "2011200"
  },
  {
    "text": "I get for that is is very very cheap imp",
    "start": "2011200",
    "end": "2015840"
  },
  {
    "text": "implementation so another thing that I really wanted early on with this was system call interposition and the reason",
    "start": "2016279",
    "end": "2022799"
  },
  {
    "text": "for this well it's just it makes the things a lot simpler um I've written like",
    "start": "2022799",
    "end": "2029240"
  },
  {
    "text": "probably six different systems that do system call interposition I've done Library interposition I've written a new process tracing mechanism for Linux I've",
    "start": "2029240",
    "end": "2035519"
  },
  {
    "text": "used Linux p trce and and and on all of those experiences were terrible um right",
    "start": "2035519",
    "end": "2041000"
  },
  {
    "text": "modifying the kernel is terrible using the existing thing is is is really kind of expensive and slow um and and library",
    "start": "2041000",
    "end": "2046919"
  },
  {
    "text": "in position is just really fragile um and right when you can change the",
    "start": "2046919",
    "end": "2053760"
  },
  {
    "text": "processor you can do something really really simple you can either just change micro code or implement this with conditional logic you can just say every",
    "start": "2053760",
    "end": "2060158"
  },
  {
    "text": "time I see a privilege instruction CIS call Sis enter and da whatever right turn that into a jump just just return",
    "start": "2060159",
    "end": "2066040"
  },
  {
    "text": "control back to my runtime um and it it's just yeah it's",
    "start": "2066040",
    "end": "2071839"
  },
  {
    "text": "just I really like it it just makes me really happy irrationally so or Mo rly",
    "start": "2071839",
    "end": "2077440"
  },
  {
    "text": "so I've got some scars anyway um another thing that we get from",
    "start": "2077440",
    "end": "2082960"
  },
  {
    "text": "this is really nice is that we get Spectra safe bounce checks right when we're doing bounce checks in software our processor does not know about this",
    "start": "2082960",
    "end": "2088480"
  },
  {
    "text": "so we'll happily speculate them pass them now that we're doing things in Hardware we can architect this so right",
    "start": "2088480",
    "end": "2095079"
  },
  {
    "text": "whether a memory access is speculative or non-speculative a bounce check will get get enforced so that means we're",
    "start": "2095079",
    "end": "2100960"
  },
  {
    "text": "never going to speculatively access something outside the bounds of our sandbox right so we've got our our",
    "start": "2100960",
    "end": "2107079"
  },
  {
    "text": "sandbox memory region and even if like I mistra the processor right like it will it will not speculate Beyond uh the",
    "start": "2107079",
    "end": "2113839"
  },
  {
    "text": "bounds that are being enforced by HFI um this does not solve all of",
    "start": "2113839",
    "end": "2119000"
  },
  {
    "text": "Spectre right Spectre is",
    "start": "2119000",
    "end": "2123079"
  },
  {
    "text": "fundamentally there is no easy solution to Spectre right the problem the Spectre is that it relies on right Branch",
    "start": "2124480",
    "end": "2130079"
  },
  {
    "text": "prediction uh is is and out out of order sorry out of order execution is like",
    "start": "2130079",
    "end": "2135440"
  },
  {
    "text": "deeply deeply ingrained in how we build processors and this relies on prediction structures right the PHD the RSB the btb",
    "start": "2135440",
    "end": "2141839"
  },
  {
    "text": "things that like you know is this Branch going to execute when is this Branch going to execute right and Branch",
    "start": "2141839",
    "end": "2146960"
  },
  {
    "text": "prediction is key to how you go fast right like you need to kind of keep on going keep on uh fetching into your your",
    "start": "2146960",
    "end": "2152119"
  },
  {
    "text": "pipeline um and like we like we can't just go and flesh those structures so like we can't solve this uh and nobody",
    "start": "2152119",
    "end": "2159880"
  },
  {
    "text": "else seems to have a great solution either okay um so we've got these",
    "start": "2159880",
    "end": "2165119"
  },
  {
    "text": "Primitives they work for um wasm and other ASI workloads and and for Native binaries um and we just use them",
    "start": "2165119",
    "end": "2171720"
  },
  {
    "text": "differently in in those different scenarios but uh two different use Cas sort of two different usage models but",
    "start": "2171720",
    "end": "2178839"
  },
  {
    "text": "essentially the same Primitives so how does it work in terms of performance um well in simulation and",
    "start": "2178839",
    "end": "2187359"
  },
  {
    "text": "in emulation and emulation we validate with our simulation um we get a huge speed up over uh doing bounce checks",
    "start": "2187359",
    "end": "2193839"
  },
  {
    "text": "which is great for 64-bit memories um over guard regions we get a little bit of a speed up which is nice but we also",
    "start": "2193839",
    "end": "2199200"
  },
  {
    "text": "get all these nice properties in terms of scaling Spectre resistance um largest small dress spaces um and on some",
    "start": "2199200",
    "end": "2206760"
  },
  {
    "text": "workloads uh right that you know reducing register pressure and uh iach",
    "start": "2206760",
    "end": "2212960"
  },
  {
    "text": "pressure and you know all the sort of good things I was talking about before get some really big wins right like here with image rendering and",
    "start": "2212960",
    "end": "2220640"
  },
  {
    "text": "Firefox so that is I think the end of my story I think I'm I'm good on time",
    "start": "2221960",
    "end": "2229839"
  },
  {
    "text": "um so I'd be happy to take questions um I'm happy to talk about wasm core technology and standards wasm for",
    "start": "2229839",
    "end": "2236359"
  },
  {
    "text": "security or or any application of wasm that you're",
    "start": "2236359",
    "end": "2240280"
  },
  {
    "text": "interested I don't really know much about a stupid question but uh no stupid",
    "start": "2244680",
    "end": "2250119"
  },
  {
    "text": "questions you talk about very light lightweightness switching contact",
    "start": "2250119",
    "end": "2255160"
  },
  {
    "text": "switching is yeah easy but uh the examples you have like s foxing and",
    "start": "2255160",
    "end": "2260400"
  },
  {
    "text": "Firefox that's a highly collaborative workflow right you're going to call the function anyway you sort of know how",
    "start": "2260400",
    "end": "2265960"
  },
  {
    "text": "much they call so essentially you're just really isolating them is there a scenario where you you will have a lot",
    "start": "2265960",
    "end": "2271599"
  },
  {
    "text": "of like different applications of that potentially some U",
    "start": "2271599",
    "end": "2277560"
  },
  {
    "text": "functioning so I guess my question is more about is there a need for some sort",
    "start": "2277560",
    "end": "2283319"
  },
  {
    "text": "of a scheduler how sophisticated does the schedule need to be because in a a real like Cal schedule it does all kind",
    "start": "2283319",
    "end": "2290160"
  },
  {
    "text": "of right um it will it will enforce certain kind kind of a resource",
    "start": "2290160",
    "end": "2295920"
  },
  {
    "text": "isolation if the if the process does not it can be interrupted so so things like that like is this a concern",
    "start": "2295920",
    "end": "2303200"
  },
  {
    "text": "for I so this is like this is a really great question um this is an area that I actively working on and interested in um",
    "start": "2303200",
    "end": "2309839"
  },
  {
    "text": "and it kind of gets into like right like how does user space thread scheduling work how does concurrency work so for",
    "start": "2309839",
    "end": "2315160"
  },
  {
    "text": "sure like um I mean wasm the kind of like the core mechanism is just like",
    "start": "2315160",
    "end": "2320560"
  },
  {
    "text": "gives you address baces it gives you isolation um and then you can you can put that into a context where you have",
    "start": "2320560",
    "end": "2326240"
  },
  {
    "text": "concurrency but that's like not part of the standard um so uh right the way that",
    "start": "2326240",
    "end": "2333079"
  },
  {
    "text": "like you know uh most folks do this today right like fastly or other folks f is right they're they're uh running",
    "start": "2333079",
    "end": "2340839"
  },
  {
    "text": "their was and runtime and then like Tokyo is running underneath I don't know if you're a rust person right but like you know so right so they're you know",
    "start": "2340839",
    "end": "2347160"
  },
  {
    "text": "they're using Tokyo underneath to like Multiplex this thing and wasm has it or and the wasm runtime will have its own",
    "start": "2347160",
    "end": "2352680"
  },
  {
    "text": "preemption mechanism built in um there are Performance challenges associated with that which is something I'm actively working on and I'm happy to",
    "start": "2352680",
    "end": "2359119"
  },
  {
    "text": "talk about more but yeah does that kind of get the answer the question cool",
    "start": "2359119",
    "end": "2367119"
  },
  {
    "text": "hi thank you for that talk um I wanted to ask about your thoughts on the recent WX um run time and what that might mean",
    "start": "2369560",
    "end": "2376520"
  },
  {
    "text": "for multi threed applications of was for for me in the past biger to get to usage",
    "start": "2376520",
    "end": "2383960"
  },
  {
    "text": "year wait sorry so the question is about threading support yeah yeah pretty much and and and uh the newly released WX",
    "start": "2383960",
    "end": "2392760"
  },
  {
    "text": "umun This Is The wasmer Stuff uh I",
    "start": "2392760",
    "end": "2398079"
  },
  {
    "text": "I think it's released by separate company I'm about to Google it but yeah essentially support um that so there's",
    "start": "2398079",
    "end": "2405839"
  },
  {
    "text": "two aspects of threading support one is like how do you do atomics and things like that and so the and there that's",
    "start": "2405839",
    "end": "2410960"
  },
  {
    "text": "the wasm thread standard and it's like pretty far along the other thing is like how do you create threads and the challenge around that has been right",
    "start": "2410960",
    "end": "2417000"
  },
  {
    "text": "that like there's a difference between like how do you do this in browsers and how do you do this on the host side browsers are like well we have web",
    "start": "2417000",
    "end": "2422760"
  },
  {
    "text": "workers right and and all of us who are like more focused on the non web case we're like that's great for you um but",
    "start": "2422760",
    "end": "2428760"
  },
  {
    "text": "we need some way to create threads um what's happened recently is the there's this Wy threads proposal which is out",
    "start": "2428760",
    "end": "2434920"
  },
  {
    "text": "and it's supported now in wasm time probably in some other places too a whammer's had its own kind of like ad",
    "start": "2434920",
    "end": "2440400"
  },
  {
    "text": "hoc support for threads for a while um there are things that I don't love about",
    "start": "2440400",
    "end": "2445640"
  },
  {
    "text": "the Wy threads proposal because it's you actually create a new kind of instance per thread um but it really lit a fire",
    "start": "2445640",
    "end": "2451440"
  },
  {
    "text": "under people's asses to like solve the problems we needed to solve to get the right threads proposal um",
    "start": "2451440",
    "end": "2458200"
  },
  {
    "text": "and this this has to do with kind of how how browsers do threads and like",
    "start": "2458200",
    "end": "2464400"
  },
  {
    "text": "saying okay like because a wasm context involves not just like right like the",
    "start": "2464400",
    "end": "2469520"
  },
  {
    "text": "the linear memory but also certain tables and you need to say this is what I can safely share this is what I canot safely share so the standard has to kind",
    "start": "2469520",
    "end": "2476480"
  },
  {
    "text": "of like make its way along so I would say so threading support is like coming along um wasi threads is something you",
    "start": "2476480",
    "end": "2483040"
  },
  {
    "text": "can use today if you have like a you know use case where you need threads like I think it it's doable but you're",
    "start": "2483040",
    "end": "2488720"
  },
  {
    "text": "like you're not totally unsupported but you're also like not I mean this is the thing about the ecosystem right there is",
    "start": "2488720",
    "end": "2495280"
  },
  {
    "text": "like there's the parts where you're like you're right on the path there's the part where it's a little bit Rocky but like you will be fine like you'll get",
    "start": "2495280",
    "end": "2500880"
  },
  {
    "text": "the support you need if you're doing a real application and there's like often the leads um yeah okay thank you very",
    "start": "2500880",
    "end": "2507160"
  },
  {
    "text": "much yeah",
    "start": "2507160",
    "end": "2510559"
  },
  {
    "text": "all questions are are good questions",
    "start": "2518319",
    "end": "2522920"
  },
  {
    "text": "so you know old examples were like apple silicon wasn't any of slides so was",
    "start": "2524200",
    "end": "2530960"
  },
  {
    "text": "there any specific differences or so oh in terms of like the optimizations or",
    "start": "2530960",
    "end": "2537480"
  },
  {
    "text": "the general idea like know was you know Simplicity put so um so arm doesn't have like",
    "start": "2537480",
    "end": "2545440"
  },
  {
    "text": "segmentation so that's not something we can um arm v9 will have two forms of um uh",
    "start": "2545440",
    "end": "2553480"
  },
  {
    "text": "memory tagging um arm v9 will have what's something called permission overlays which is kind of like mpk but a",
    "start": "2553480",
    "end": "2559000"
  },
  {
    "text": "little bit better because it gives us X permissions as well so it's a very cool primitive um and and it will also have",
    "start": "2559000",
    "end": "2564280"
  },
  {
    "text": "something called a memory tagging extensions where we can uh uh tag things that like",
    "start": "2564280",
    "end": "2570240"
  },
  {
    "text": "um collections of bite granularity so even finer granularity so we think that we can use both of those to to pull off",
    "start": "2570240",
    "end": "2576520"
  },
  {
    "text": "this trick but we you know we haven't written the code in the paper yet so but yeah um but um there is no rv9 Hardware",
    "start": "2576520",
    "end": "2584040"
  },
  {
    "text": "out there except for I think in Mobile phones right now um I think the new like the third generation Amper stuff will",
    "start": "2584040",
    "end": "2589359"
  },
  {
    "text": "have it but um I'm trying to get somebody at Amper to to give me one of those um so yeah if you know anybody who",
    "start": "2589359",
    "end": "2596079"
  },
  {
    "text": "has good connections at arm or at emper who wants to give us some some machines to to to build stuff for that' be great",
    "start": "2596079",
    "end": "2603880"
  },
  {
    "text": "thank you",
    "start": "2603880",
    "end": "2607039"
  },
  {
    "text": "there probably have another silly question yeah yeah please where to start like you know like someone wants to",
    "start": "2627359",
    "end": "2632520"
  },
  {
    "text": "start dipping toe like and start working with wat what would you suggest where to go",
    "start": "2632520",
    "end": "2638119"
  },
  {
    "text": "um I think the best supported uh tool CH I mean so I think that",
    "start": "2638119",
    "end": "2644079"
  },
  {
    "text": "there's there's two tool tool chains that I think are really solid um and then the third one that we work on that",
    "start": "2644079",
    "end": "2650559"
  },
  {
    "text": "we use for Firefox which actually is good for for specific things um so wasm time is is super well supported uh and I",
    "start": "2650559",
    "end": "2658119"
  },
  {
    "text": "think Rock Solid from a security standpoint that's what fastly Builds on that's what all the folks buil on so I would grab that um there's Wy Kang right",
    "start": "2658119",
    "end": "2665319"
  },
  {
    "text": "for doing CN C++ stuff R has really first class support so it depends on your language right so you need compiler",
    "start": "2665319",
    "end": "2670920"
  },
  {
    "text": "support you need uh uh something compile from so you know compile whatever your code is to wasam and then compile your",
    "start": "2670920",
    "end": "2677319"
  },
  {
    "text": "wasm to uh your local binary if you're aing or you can do your your jet thing",
    "start": "2677319",
    "end": "2682760"
  },
  {
    "text": "for whatever reason you want to do that once you've got those tools I mean I think just like you know if you've got",
    "start": "2682760",
    "end": "2688079"
  },
  {
    "text": "like I think it's always good if you have like a need already you have a project like something that is is cheering on you that like know that",
    "start": "2688079",
    "end": "2694280"
  },
  {
    "text": "you're like oh okay I need to solve this thing um um but yeah and so I mean the community",
    "start": "2694280",
    "end": "2701040"
  },
  {
    "text": "is really there's a like a bite C Alliance I like most of the communities on on zulip um kind of like you can ask",
    "start": "2701040",
    "end": "2707800"
  },
  {
    "text": "core technology questions there um it's a very like it's a pretty tight and pretty supportive Community um kind of",
    "start": "2707800",
    "end": "2713960"
  },
  {
    "text": "like the community around various programming languages so um yeah you know if you have an",
    "start": "2713960",
    "end": "2720319"
  },
  {
    "text": "application I think you'll you'll definitely find the support that you need around that um if you're interested in the secure like sandboxing stuff like",
    "start": "2720319",
    "end": "2726680"
  },
  {
    "text": "uh sandboxing uh native code uh you should talk to us",
    "start": "2726680",
    "end": "2733640"
  },
  {
    "text": "[Music]",
    "start": "2735350",
    "end": "2741640"
  }
]