[
  {
    "start": "0",
    "end": "123000"
  },
  {
    "text": "welcome everyone and thanks for coming this is a perfume the ultimate net performance tool and I just had to put",
    "start": "4500",
    "end": "12000"
  },
  {
    "text": "for free on this slide because you know as Windows and dotnet engineers we were probably used to a lot of commercial",
    "start": "12000",
    "end": "18570"
  },
  {
    "text": "tools which seemed kind of useful but then you figure with the licensing costs",
    "start": "18570",
    "end": "23610"
  },
  {
    "text": "you just can't use them in all of your environments so this is genuinely a very cool tool which I've been using for my",
    "start": "23610",
    "end": "29700"
  },
  {
    "text": "own production work for many years and it was originally built by Microsoft engineers used for diagnosing very",
    "start": "29700",
    "end": "36570"
  },
  {
    "text": "complex issues with their own applications and even though I'll be showing you lots of examples of dotnet",
    "start": "36570",
    "end": "42929"
  },
  {
    "text": "apps running on Windows and how you can diagnose issues with them using perfu it is also very relevant for other",
    "start": "42929",
    "end": "49710"
  },
  {
    "text": "languages on Windows as well so if you have a C++ app on Windows you can also profile it using perfu and in fact it",
    "start": "49710",
    "end": "56609"
  },
  {
    "text": "looks like perfu the the author is anyway they have these grand designs to",
    "start": "56609",
    "end": "61889"
  },
  {
    "text": "bring perfu to other platforms as well so there's work in progress and bring them perf you to linux for example and",
    "start": "61889",
    "end": "67290"
  },
  {
    "text": "all other crazy ideas like that so anyway just to introduce myself for a moment my name is Sasha",
    "start": "67290",
    "end": "73890"
  },
  {
    "text": "I work for an Israeli training and consulting company called Sela and so most of my work over the last 11 12",
    "start": "73890",
    "end": "81480"
  },
  {
    "text": "years at Sela has been around production performance investigations Diagnostics",
    "start": "81480",
    "end": "87210"
  },
  {
    "text": "debugging various issues so most of my work is either working on tools to",
    "start": "87210",
    "end": "92850"
  },
  {
    "text": "diagnose issues with applications or helping customers solve actual issues",
    "start": "92850",
    "end": "98070"
  },
  {
    "text": "and then you know once there's a there's a useful tool that I can apply to my",
    "start": "98070",
    "end": "103710"
  },
  {
    "text": "production work again and again it's it's an obvious fit for for me to tell people about so that's what we're gonna",
    "start": "103710",
    "end": "110400"
  },
  {
    "text": "do for the next 50 minutes or so if you have any questions feel free to just raise your hand or you can wait till the",
    "start": "110400",
    "end": "116430"
  },
  {
    "text": "end whatever you'd like I'll be here tomorrow as well I'm doing workshops so I'll be delighted to chat with you if",
    "start": "116430",
    "end": "122580"
  },
  {
    "text": "you'd like so just to sort of clarify where we are on the spectrum of different performance related things",
    "start": "122580",
    "end": "129200"
  },
  {
    "text": "that we'll be touching on in this talk so first on the top there's performance",
    "start": "129200",
    "end": "134520"
  },
  {
    "text": "metrics and simulations the sort of work you do when star a project or identifying issues with an",
    "start": "134520",
    "end": "140930"
  },
  {
    "text": "existing system when you're asked do performance work so will not be doing any of that I'm just gonna assume that",
    "start": "140930",
    "end": "147470"
  },
  {
    "text": "we know what kind of performance metrics are important to us could be very specific things like CPU usage or memory",
    "start": "147470",
    "end": "154250"
  },
  {
    "text": "usage or higher level stuff like response times from our web services but this is out of scope for us then we have",
    "start": "154250",
    "end": "161210"
  },
  {
    "text": "a profiling work done in development and this has already were per few can be useful so perfu is a tool that you can",
    "start": "161210",
    "end": "168140"
  },
  {
    "text": "use to do development time profiling so you know you write some code and then you run it and you measure and you",
    "start": "168140",
    "end": "173600"
  },
  {
    "text": "improve and you compare that sort of work per few can definitely help you with then we have performance and load",
    "start": "173600",
    "end": "180800"
  },
  {
    "text": "testing in perfu is not a load testing tool but it can definitely be used to analyze results from load tests and",
    "start": "180800",
    "end": "187580"
  },
  {
    "text": "performance tests and improve the things that you see then we have production time performance investigations which is",
    "start": "187580",
    "end": "193730"
  },
  {
    "text": "sort of what I like doing and perfu is very useful at this stage because it's",
    "start": "193730",
    "end": "199340"
  },
  {
    "text": "very lightweight it doesn't require any installations you can just copy a single executable to any production system and",
    "start": "199340",
    "end": "205850"
  },
  {
    "text": "you can start profiling monitoring the system and doing the analysis as well if you'd like and finally we have this sort",
    "start": "205850",
    "end": "213350"
  },
  {
    "text": "of continuous monitoring which per few can be used for even though there's a",
    "start": "213350",
    "end": "219020"
  },
  {
    "text": "lot of other frameworks which could be easier to integrate or more lightweight per few can still be used for this as",
    "start": "219020",
    "end": "224990"
  },
  {
    "text": "well so you can use it to run continuously in the background and record lots of stuff and then if there's",
    "start": "224990",
    "end": "230300"
  },
  {
    "text": "an issue you can go back and analyze the events that perfu emitted and try to",
    "start": "230300",
    "end": "235820"
  },
  {
    "text": "figure out what happened so this is where perf you can be helpful so just to",
    "start": "235820",
    "end": "241340"
  },
  {
    "text": "sort of put us all in perspective here's an example of a production investigation that I had about a couple",
    "start": "241340",
    "end": "248480"
  },
  {
    "start": "244000",
    "end": "308000"
  },
  {
    "text": "of years ago actually now and the issue was like the pain point introduced by",
    "start": "248480",
    "end": "253670"
  },
  {
    "text": "the customer was that sometimes user requests to load and save files in a",
    "start": "253670",
    "end": "258920"
  },
  {
    "text": "document management system were failing with some sort of timeout and we",
    "start": "258920",
    "end": "264590"
  },
  {
    "text": "suspected a lot of different components at some point with we suspected the storage system",
    "start": "264590",
    "end": "269730"
  },
  {
    "text": "network storage system was actually at fault and then it took us a while like a",
    "start": "269730",
    "end": "274860"
  },
  {
    "text": "full day to generate a performance monitoring report which said that the average storage latency is five",
    "start": "274860",
    "end": "281580"
  },
  {
    "text": "millisecond and then you know the customer just said it's five milliseconds so clearly there's no",
    "start": "281580",
    "end": "287190"
  },
  {
    "text": "problem but that was the average right and you all know whatever itches are worth so I asked for a little more",
    "start": "287190",
    "end": "294330"
  },
  {
    "text": "detail and it took us three more days to generate more specific per minute averages but the average of these",
    "start": "294330",
    "end": "301020"
  },
  {
    "text": "averages was five milliseconds so there were still apparently no reasons for to",
    "start": "301020",
    "end": "306450"
  },
  {
    "text": "suspect the storage array and so at this point you know my instinct is to just",
    "start": "306450",
    "end": "312330"
  },
  {
    "start": "308000",
    "end": "333000"
  },
  {
    "text": "use a profiler so sometimes you can just look at the metrics and you can look at the dashboards and you can figure out",
    "start": "312330",
    "end": "317370"
  },
  {
    "text": "what's happening but sometimes you really do need to bring the heavier tools in and you need to do some manual",
    "start": "317370",
    "end": "323580"
  },
  {
    "text": "analysis and you need to use your brain at some point to do the analysis and not just rely on automated tools and this is",
    "start": "323580",
    "end": "330780"
  },
  {
    "text": "where purview can help so two additional profilers and I mean I could just start",
    "start": "330780",
    "end": "338010"
  },
  {
    "start": "333000",
    "end": "462000"
  },
  {
    "text": "naming vendors there's a lot of them obviously for Windows in general and for dotnet applications in particular but",
    "start": "338010",
    "end": "344880"
  },
  {
    "text": "traditional profilers suffer generally from four key problems I think the first",
    "start": "344880",
    "end": "351270"
  },
  {
    "text": "one is invasiveness so there's a lot of profilers which rely on some sort of code injection or binary instrumentation",
    "start": "351270",
    "end": "358830"
  },
  {
    "text": "so you have to rebuild your code or you have to restart the system or you have to inject some stuff into the system and",
    "start": "358830",
    "end": "365370"
  },
  {
    "text": "that's hardly OK for a production system or it could slow you down a lot so",
    "start": "365370",
    "end": "371310"
  },
  {
    "text": "that's another issue in a lot of cases these profilers have a very significant overhead and it's like it's not it's not",
    "start": "371310",
    "end": "378720"
  },
  {
    "text": "like they try to deny it if you look at the documentation it could say something like this profiler could in some",
    "start": "378720",
    "end": "385260"
  },
  {
    "text": "pathological cases slow you down by 2,000 percent and that's fine it's a",
    "start": "385260",
    "end": "390630"
  },
  {
    "text": "profiler you're not supposed to use it in production but now I want to use profilers in production I have",
    "start": "390630",
    "end": "396720"
  },
  {
    "text": "production issues where a profiler seems to be the only option and so I do want to actually use tools we",
    "start": "396720",
    "end": "402900"
  },
  {
    "text": "a much lower overhead guaranteed we also have traced size issues if you need to",
    "start": "402900",
    "end": "409280"
  },
  {
    "text": "record events for let's say an hour until some anomaly appears you could get",
    "start": "409280",
    "end": "415919"
  },
  {
    "text": "multiple gigabytes of traces tens of gigabytes in some cases and then the",
    "start": "415919",
    "end": "421020"
  },
  {
    "text": "profiler would fail to open the trace and you start profiling the profiler to see why it fails to open the trace and",
    "start": "421020",
    "end": "426900"
  },
  {
    "text": "this is not you know very productive and finally there is licensing costs so a",
    "start": "426900",
    "end": "432360"
  },
  {
    "text": "lot of profilers they have some sort of model where you can use the profiler in production and then maybe collect the",
    "start": "432360",
    "end": "439440"
  },
  {
    "text": "data and open it on your development machine where you have the full license to the profiler but it's it again",
    "start": "439440",
    "end": "446039"
  },
  {
    "text": "complicates things and I like to be able to just you know Remote Desktop onto a production system run the profiler",
    "start": "446039",
    "end": "452430"
  },
  {
    "text": "analyze the results and in some cases there's really no other choice then to go through that approach so again",
    "start": "452430",
    "end": "459810"
  },
  {
    "text": "finally this is where perfu shines and comes in perfu is ninety percent a",
    "start": "459810",
    "end": "466380"
  },
  {
    "start": "462000",
    "end": "533000"
  },
  {
    "text": "wrapper on top of a Windows framework called etw event tracing for Windows how",
    "start": "466380",
    "end": "472590"
  },
  {
    "text": "many of you have heard of or used etw before ok so just about half I'll tell",
    "start": "472590",
    "end": "478440"
  },
  {
    "text": "the rest that etw is an extremely useful framework which was introduced as far",
    "start": "478440",
    "end": "483599"
  },
  {
    "text": "back as Windows 2000 so it's been around for almost 20 years and it was",
    "start": "483599",
    "end": "489240"
  },
  {
    "text": "originally designed to be a logging framework so it's something Microsoft put into Windows so they can trace",
    "start": "489240",
    "end": "495539"
  },
  {
    "text": "Windows drivers and the Windows kernel so that Windows engineer could turn on",
    "start": "495539",
    "end": "501120"
  },
  {
    "text": "some traces on a customer system record them then analyze them only for Windows",
    "start": "501120",
    "end": "506699"
  },
  {
    "text": "components and Windows drivers and then the whole thing just exploded in popularity because it's really really",
    "start": "506699",
    "end": "512310"
  },
  {
    "text": "cool it's a it's a high frequency very low overhead logging facility which is built into the operating system kernel",
    "start": "512310",
    "end": "518909"
  },
  {
    "text": "so it's not something you install or configure or have to enable is just part of the OS and it's hopefully as fast as",
    "start": "518909",
    "end": "526470"
  },
  {
    "text": "it can be so you can write huge amounts of data through this kernel subsystem",
    "start": "526470",
    "end": "532170"
  },
  {
    "text": "really really fast and generally the way etw works is that you have three kinds of",
    "start": "532170",
    "end": "538180"
  },
  {
    "start": "533000",
    "end": "686000"
  },
  {
    "text": "components around this central concept of an event tracing session so an event",
    "start": "538180",
    "end": "544310"
  },
  {
    "text": "tracing session is something a controller would create a controller",
    "start": "544310",
    "end": "549920"
  },
  {
    "text": "could be a piece of code could be an application could be some sort of scheduled task so the controller creates",
    "start": "549920",
    "end": "555830"
  },
  {
    "text": "an event tracing session and then enables specific providers so providers",
    "start": "555830",
    "end": "562070"
  },
  {
    "text": "are just pieces of code again around the system which write events which generate interesting events and there's thousands",
    "start": "562070",
    "end": "569690"
  },
  {
    "text": "of built-in providers in Windows plus the.net framework itself has a ton of",
    "start": "569690",
    "end": "575120"
  },
  {
    "text": "providers as well and the runtime the CLR also has a provider with a bunch of",
    "start": "575120",
    "end": "581240"
  },
  {
    "text": "interesting events so there's a ton of interesting things and we'll look at some examples so the controller creates",
    "start": "581240",
    "end": "586910"
  },
  {
    "text": "a session and enables certain providers to write into that session the session",
    "start": "586910",
    "end": "592670"
  },
  {
    "text": "can then go into files so you can have the session record into files or it can",
    "start": "592670",
    "end": "598100"
  },
  {
    "text": "just record into in memory buffers and if it goes into a buffer in memory with no files then of course you're gonna run",
    "start": "598100",
    "end": "604910"
  },
  {
    "text": "out of space at some point so it's a cyclic buffer usually so as soon as you run out of space you start discarding",
    "start": "604910",
    "end": "610730"
  },
  {
    "text": "old events and replace them with the new events so this is how it works and finally at the other end of the pipe",
    "start": "610730",
    "end": "617750"
  },
  {
    "text": "you have consumers which are again applications that can read events from",
    "start": "617750",
    "end": "622880"
  },
  {
    "text": "the session or from a file and you can do both so you can have a session that",
    "start": "622880",
    "end": "628070"
  },
  {
    "text": "writes to a file and someone is then reading events from the file but at the same time there's also a consumer which",
    "start": "628070",
    "end": "634250"
  },
  {
    "text": "reads events from the in-memory buffers and performs some kind of real time analysis aggregation alerting and so on",
    "start": "634250",
    "end": "640700"
  },
  {
    "text": "and by the way that last fact that you can do real-time analysis of etw events",
    "start": "640700",
    "end": "645860"
  },
  {
    "text": "is not extremely well known so a lot of people know that you can record atw",
    "start": "645860",
    "end": "651740"
  },
  {
    "text": "events to a file but not that you can build tools which analyze them in real time and I have a couple of open source",
    "start": "651740",
    "end": "658640"
  },
  {
    "text": "projects which are built around this idea of analyzing the traces in real time without going to disk and of course",
    "start": "658640",
    "end": "665150"
  },
  {
    "text": "for some production users it can be a lot more efficient you're not putting anything on disk you're just",
    "start": "665150",
    "end": "670330"
  },
  {
    "text": "analyzing events as they occur cool so perfu again is 90 percent a rapper on",
    "start": "670330",
    "end": "676360"
  },
  {
    "text": "top of this stuff and what kind of events could be interesting for doing",
    "start": "676360",
    "end": "681940"
  },
  {
    "text": "profiling for diagnosing actual issues with windows and dotted applications so here are some examples one very useful",
    "start": "681940",
    "end": "690160"
  },
  {
    "text": "provider which is part of the Windows kernel it's built in you don't have to do anything to enable it is called the",
    "start": "690160",
    "end": "696850"
  },
  {
    "text": "sample provider and it's basically designed to fire an event every one",
    "start": "696850",
    "end": "701890"
  },
  {
    "text": "millisecond of CPU time so whatever the system is doing you can have an event fire every millisecond and it tells you",
    "start": "701890",
    "end": "709210"
  },
  {
    "text": "what what's currently happening so which process is running which thread is running which function is running and",
    "start": "709210",
    "end": "714850"
  },
  {
    "text": "what the call stack is that's actually a feature shared across all the different",
    "start": "714850",
    "end": "719860"
  },
  {
    "text": "events so every etw event you can capture with a call stack that tells you where this event came from for this",
    "start": "719860",
    "end": "726910"
  },
  {
    "text": "specific example it's it's super useful because you know not only which process was running or which thread was running",
    "start": "726910",
    "end": "733030"
  },
  {
    "text": "but also what the full call stack was so you get a sample of what the system was",
    "start": "733030",
    "end": "738100"
  },
  {
    "text": "doing at that one millisecond interval if you collect a lot of these events you",
    "start": "738100",
    "end": "743230"
  },
  {
    "text": "get a general profile of what's happening on the system a CPU profile so that's a very standard approach in",
    "start": "743230",
    "end": "749830"
  },
  {
    "text": "general just taking samples of CPU work and then aggregating them but here we",
    "start": "749830",
    "end": "755320"
  },
  {
    "text": "have it actually built into the OS so again it's not like a third party driver that you need to install and it would do",
    "start": "755320",
    "end": "762010"
  },
  {
    "text": "the sampling for you it's just built into the kernel you turn it on you get the events so that's what what a really",
    "start": "762010",
    "end": "767830"
  },
  {
    "text": "important example another one is the CL r GC provider so the dotnet runtime has",
    "start": "767830",
    "end": "775450"
  },
  {
    "text": "events for garbage collections starting and ending for object allocations",
    "start": "775450",
    "end": "780700"
  },
  {
    "text": "happening for various other interesting GC related things like finalizer running",
    "start": "780700",
    "end": "786910"
  },
  {
    "text": "that sort of stuff so there's a ton of events in the CLR itself which can be used for interesting Diagnostics so for",
    "start": "786910",
    "end": "794170"
  },
  {
    "text": "example we'll see a demo of memory profiling so figuring out where the memory traffic in your code is coming",
    "start": "794170",
    "end": "800530"
  },
  {
    "text": "from and that's going to be based on these events then we have some other stuff in the kernel which is useful we",
    "start": "800530",
    "end": "806970"
  },
  {
    "text": "have the context switch provider which is an event that happens whenever there is a context switch so there's a switch",
    "start": "806970",
    "end": "813660"
  },
  {
    "text": "from one thread to another thread you can use that for blocked time analysis so that whenever you have a thread",
    "start": "813660",
    "end": "820230"
  },
  {
    "text": "entering some kind of wait state asleep wait for some lock and IO call you can",
    "start": "820230",
    "end": "827640"
  },
  {
    "text": "record that and then you can record the switch in and figure out how long that",
    "start": "827640",
    "end": "832650"
  },
  {
    "text": "wait took so you can profile the system not just for CPU work but also for IO",
    "start": "832650",
    "end": "838140"
  },
  {
    "text": "weights locks and that sort of thing and we also have a bunch of other stuff we have IO events for file accesses",
    "start": "838140",
    "end": "845339"
  },
  {
    "text": "registry accesses Network stuff it's all built in which is again one of the cool",
    "start": "845339",
    "end": "850740"
  },
  {
    "text": "things about ECW in general it's all built in and perfu again is just a tool",
    "start": "850740",
    "end": "856140"
  },
  {
    "text": "for recording and analyzing all of this stuff and in fact perfu itself I wish we",
    "start": "856140",
    "end": "862020"
  },
  {
    "text": "had time to go into that but perfu itself is built in a pretty modular fashion where the UI that you're gonna",
    "start": "862020",
    "end": "868950"
  },
  {
    "text": "see is again just the tip of the iceberg on top of a library that you can integrate into your own applications so",
    "start": "868950",
    "end": "875970"
  },
  {
    "text": "you can build your own perfume with a different UI or with no UI that would do",
    "start": "875970",
    "end": "881370"
  },
  {
    "text": "analysis and generate reports and push them somewhere else so you can build self-diagnosing apps you can build your",
    "start": "881370",
    "end": "887910"
  },
  {
    "text": "own profilers and it's all open source all right so let's take a look at what",
    "start": "887910",
    "end": "893820"
  },
  {
    "start": "893000",
    "end": "928000"
  },
  {
    "text": "it what's in an ECW recording and how purview can help so etw again is a tracing framework",
    "start": "893820",
    "end": "902220"
  },
  {
    "text": "so essentially you are recording a lot of events like log messages and then you",
    "start": "902220",
    "end": "908580"
  },
  {
    "text": "need to analyze them so you can let's say convert it to a CSV and then you can read that CSV or you can import it into",
    "start": "908580",
    "end": "915510"
  },
  {
    "text": "Excel or that sort of thing again not super productive so we need tools that would record the interesting stuff",
    "start": "915510",
    "end": "921600"
  },
  {
    "text": "aggregate the interesting stuff display the interesting things in appropriate ways and this is again where per few",
    "start": "921600",
    "end": "928650"
  },
  {
    "start": "928000",
    "end": "991000"
  },
  {
    "text": "issues is used so per view was born like I told you in the beginning as a",
    "start": "928650",
    "end": "934130"
  },
  {
    "text": "internal Microsoft Project by vance Morrison was an architect on the darknet team he's done a lot of work",
    "start": "934130",
    "end": "942269"
  },
  {
    "text": "on CLR performance on Windows performance and on the.net framework the c-sharp stuff performance as well and",
    "start": "942269",
    "end": "949529"
  },
  {
    "text": "this is more or less the tool they now use for for profiling and for improving",
    "start": "949529",
    "end": "954929"
  },
  {
    "text": "performance across across the board there's of course other profilers Microsoft uses internally but on the.net",
    "start": "954929",
    "end": "961529"
  },
  {
    "text": "team specifically this is this is a very very strong contender now perfu doesn't have a fancy UI it's",
    "start": "961529",
    "end": "969899"
  },
  {
    "text": "not pretty this is more or less what it looks like it's you know blue stuff on a grey background it's yeah and it's",
    "start": "969899",
    "end": "978149"
  },
  {
    "text": "improving a bit because it's now open source and there's contributions from people outside of Microsoft as well but",
    "start": "978149",
    "end": "983999"
  },
  {
    "text": "the general theme is that the UI sort of sucks but the functionality is what",
    "start": "983999",
    "end": "989129"
  },
  {
    "text": "matters so I'm going to show you some examples of course and let's start with a general profiling investigation to",
    "start": "989129",
    "end": "997709"
  },
  {
    "start": "997000",
    "end": "1048000"
  },
  {
    "text": "save us a bit of time I do have all the recordings prepared ahead of time but I",
    "start": "997709",
    "end": "1002899"
  },
  {
    "text": "will show you the general steps and if we don't have time to do everything live I'll just show you the pre-recorded stuff so this is the general per few",
    "start": "1002899",
    "end": "1011359"
  },
  {
    "text": "window the main window and so there's a ton of documentation kind of built in",
    "start": "1011359",
    "end": "1016429"
  },
  {
    "text": "where you know there's links and you can click them and it would open a documentation window or some videos",
    "start": "1016429",
    "end": "1023149"
  },
  {
    "text": "online Vance the author has a bunch of stuff on recorded with a bunch of videos",
    "start": "1023149",
    "end": "1029329"
  },
  {
    "text": "that you can if you can use the main collection features are under the",
    "start": "1029329",
    "end": "1034399"
  },
  {
    "text": "collect menu so you can either run an application and profile it or you can",
    "start": "1034399",
    "end": "1039709"
  },
  {
    "text": "collect events system-wide so you don't have to restart your system or anything",
    "start": "1039709",
    "end": "1044829"
  },
  {
    "text": "so let's take a look at the first scenario what I have here is this very",
    "start": "1044829",
    "end": "1050240"
  },
  {
    "start": "1048000",
    "end": "1132000"
  },
  {
    "text": "simple asp.net application running in IAS locally on this machine and it's",
    "start": "1050240",
    "end": "1057139"
  },
  {
    "text": "displaying a list of speakers at some conference and I'm refreshing the page",
    "start": "1057139",
    "end": "1062330"
  },
  {
    "text": "and there's an error but then it goes away the errors that don't worry about the error however if we do refresh the",
    "start": "1062330",
    "end": "1069559"
  },
  {
    "text": "page a lot of times then you'll notice that occasionally it is very slow to reload",
    "start": "1069559",
    "end": "1077830"
  },
  {
    "text": "so there's some random element in there so it doesn't look I mean I might be",
    "start": "1077830",
    "end": "1083770"
  },
  {
    "text": "making this up but yeah but occasionally",
    "start": "1083770",
    "end": "1088870"
  },
  {
    "text": "there is one very very slow who are very very slow requests now it's actually",
    "start": "1088870",
    "end": "1095380"
  },
  {
    "text": "good you know that it's not reproducing now because it's it's the perfect example of what can happen to you as",
    "start": "1095380",
    "end": "1100600"
  },
  {
    "text": "well so you know someone is complaining that this specific page is so slow but then there's no way you can reproduce it",
    "start": "1100600",
    "end": "1106990"
  },
  {
    "text": "here we go it's now it's now taking like five seconds or something to come back",
    "start": "1106990",
    "end": "1112110"
  },
  {
    "text": "so this is the sort of scenario of when a profile why is this page taking so long to load and if we can't reproduce",
    "start": "1112110",
    "end": "1119140"
  },
  {
    "text": "it easily then I might just say something like let's let's just enable collection in the background and come",
    "start": "1119140",
    "end": "1125380"
  },
  {
    "text": "back to me when you have actually reproduced this issue so here's what you do in this case I've actually again like",
    "start": "1125380",
    "end": "1134679"
  },
  {
    "start": "1132000",
    "end": "1236000"
  },
  {
    "text": "I told you have ran this in advance so we don't have to wait now but basically",
    "start": "1134679",
    "end": "1140559"
  },
  {
    "text": "what I did is just I launched perfu start and I told perfu that I would like",
    "start": "1140559",
    "end": "1146230"
  },
  {
    "text": "to record into a circular buffer 512 megabytes in size this is kind of",
    "start": "1146230",
    "end": "1152559"
  },
  {
    "text": "important because this is physical memory that you're not going to be able to use at all so it's reserved by the kernel for this",
    "start": "1152559",
    "end": "1160059"
  },
  {
    "text": "tracing session you've just lost 512 megabytes of memory for this purpose so",
    "start": "1160059",
    "end": "1165640"
  },
  {
    "text": "if you don't like this size you can pick another size but this is how many events we're going to retain and we're not",
    "start": "1165640",
    "end": "1171039"
  },
  {
    "text": "gonna flush anything to diskette and then there's a bunch of other flags and finally there's this no view switch with",
    "start": "1171039",
    "end": "1178510"
  },
  {
    "text": "just basically tells perf you start the recording but don't show any UI as soon as it representing you can run per view",
    "start": "1178510",
    "end": "1185320"
  },
  {
    "text": "stop like I did here however it's still a little manual it's like semi-automatic",
    "start": "1185320",
    "end": "1190809"
  },
  {
    "text": "but it can be improved because perfu has a bunch of triggers as well that can be",
    "start": "1190809",
    "end": "1195820"
  },
  {
    "text": "used to stop the recording for you automatically so for example I could set up per few so that as soon as we have a",
    "start": "1195820",
    "end": "1203890"
  },
  {
    "text": "request it would stop the recording but then what if it happens multiple times of an in I'm interested in all the",
    "start": "1203890",
    "end": "1210760"
  },
  {
    "text": "different occurrences so you can set that up as well essentially you can have",
    "start": "1210760",
    "end": "1215830"
  },
  {
    "text": "per few recording to this memory buffer but when an interesting thing happens it would flush the events in the buffer to",
    "start": "1215830",
    "end": "1222640"
  },
  {
    "text": "a file and then keep recording into that buffer so that whenever an interesting event occurs you have the last 512 Meg's",
    "start": "1222640",
    "end": "1230560"
  },
  {
    "text": "of events that you can analyze so again I've done all of that and here's what",
    "start": "1230560",
    "end": "1237490"
  },
  {
    "start": "1236000",
    "end": "1282000"
  },
  {
    "text": "the report looks like when you open it up in purview so perfu does a lot of unrelated things",
    "start": "1237490",
    "end": "1244990"
  },
  {
    "text": "for some reason for example it would seep up the file for you so you know you can copy it over to a different system",
    "start": "1244990",
    "end": "1250330"
  },
  {
    "text": "and analyze it there this is perfectly supported and it works but here we're just analyzing it on the same system so",
    "start": "1250330",
    "end": "1257200"
  },
  {
    "text": "I've opened that zip file and then there's a bunch of reports that we can open and I could show you some but we'll",
    "start": "1257200",
    "end": "1265090"
  },
  {
    "text": "focus on one specific report first which is called asp.net statistics and this is",
    "start": "1265090",
    "end": "1270820"
  },
  {
    "text": "something perfu just magically understands it knows about the asp.net events which are well specific to",
    "start": "1270820",
    "end": "1278650"
  },
  {
    "text": "asp.net and it has a special report just for those and here's what the asp.net",
    "start": "1278650",
    "end": "1284320"
  },
  {
    "start": "1282000",
    "end": "1308000"
  },
  {
    "text": "statistics looks like this is HTML so it just opens like a mini browser window",
    "start": "1284320",
    "end": "1290050"
  },
  {
    "text": "with the HTML report again UI is not the strong part of this tool but it says",
    "start": "1290050",
    "end": "1296740"
  },
  {
    "text": "here I had a total of 58 requests and you know an average I had one requests",
    "start": "1296740",
    "end": "1303190"
  },
  {
    "text": "per second which is not a lot but what's interesting is that if I scroll down a",
    "start": "1303190",
    "end": "1308320"
  },
  {
    "start": "1308000",
    "end": "1366000"
  },
  {
    "text": "bit here so it has like time intervals this isn't in milliseconds so each each",
    "start": "1308320",
    "end": "1316390"
  },
  {
    "text": "row in this table is a one-second interval and then it has the slowest",
    "start": "1316390",
    "end": "1322360"
  },
  {
    "text": "request in that interval so it has a max response millisecond column here and you",
    "start": "1322360",
    "end": "1329470"
  },
  {
    "text": "see over here we had like a five-second request we had a fight well a",
    "start": "1329470",
    "end": "1334990"
  },
  {
    "text": "five-second response actually so that's interesting another interesting table is down here which is",
    "start": "1334990",
    "end": "1342690"
  },
  {
    "text": "statistics per request URL so if you have a lot of different pages then of",
    "start": "1342690",
    "end": "1347910"
  },
  {
    "text": "course you can get a summary per page and here specifically I had 29 requests",
    "start": "1347910",
    "end": "1353130"
  },
  {
    "text": "to the main page and I had two of them take slower than five seconds I also had",
    "start": "1353130",
    "end": "1360780"
  },
  {
    "text": "to take slower than one second so it's basically the same two requests cool so",
    "start": "1360780",
    "end": "1366240"
  },
  {
    "start": "1366000",
    "end": "1451000"
  },
  {
    "text": "that's the statistics right and we know we're not making this up there really is a problem there are some slow requests",
    "start": "1366240",
    "end": "1371820"
  },
  {
    "text": "let's take a closer look so there's this extra report here called asp.net tread",
    "start": "1371820",
    "end": "1379260"
  },
  {
    "text": "time with tasks stacks right so what what does it even mean so the tread time",
    "start": "1379260",
    "end": "1386400"
  },
  {
    "text": "is a general term that per few uses for describing the full activity of a given",
    "start": "1386400",
    "end": "1392580"
  },
  {
    "text": "thread so it's not just CPU time it's also blocked time IO time anything the",
    "start": "1392580",
    "end": "1399090"
  },
  {
    "text": "thread was doing gets recorded and it's actually done by a combination of two",
    "start": "1399090",
    "end": "1404280"
  },
  {
    "text": "providers I mentioned earlier so it's the samples every millisecond we get a",
    "start": "1404280",
    "end": "1409679"
  },
  {
    "text": "sample of what the CPU was doing so we know what the thread was doing when it's running on the CPU but we also have the",
    "start": "1409679",
    "end": "1416280"
  },
  {
    "text": "context switch events so we know whenever the thread is switching out and coming back we know the duration of that",
    "start": "1416280",
    "end": "1422340"
  },
  {
    "text": "context switch so we know how long the thread spent off the CPU say sleeping or",
    "start": "1422340",
    "end": "1427860"
  },
  {
    "text": "waiting for i/o and so on so this is what thread time means with tasks this",
    "start": "1427860",
    "end": "1433050"
  },
  {
    "text": "refers to the task parallel library TPL which is a dotnet parallelism and",
    "start": "1433050",
    "end": "1438330"
  },
  {
    "text": "concurrency framework and finally stacks means we're actually gonna see not just statistics but actual call stacks so",
    "start": "1438330",
    "end": "1445320"
  },
  {
    "text": "which call stacks in the application are taking lots of time in these requests so",
    "start": "1445320",
    "end": "1450750"
  },
  {
    "text": "let's take a look at the report I have to pick a process here because the",
    "start": "1450750",
    "end": "1455850"
  },
  {
    "start": "1451000",
    "end": "1467000"
  },
  {
    "text": "recoiling was system-wide even though I only care about the IAS process that was",
    "start": "1455850",
    "end": "1461010"
  },
  {
    "text": "running this application so here it is w3 WP this is the is worker process",
    "start": "1461010",
    "end": "1467270"
  },
  {
    "start": "1467000",
    "end": "1667000"
  },
  {
    "text": "and then we get the following so we have this tree view here and it has two",
    "start": "1467270",
    "end": "1474740"
  },
  {
    "text": "fields for now so it has this not in request section and requests section so",
    "start": "1474740",
    "end": "1482420"
  },
  {
    "text": "you know the web server could be doing lots of background processing as well so we could look into that too we could see",
    "start": "1482420",
    "end": "1489080"
  },
  {
    "text": "what was the server doing when it's not actually working on requests but I only care about the requests here so I'm",
    "start": "1489080",
    "end": "1495200"
  },
  {
    "text": "gonna expand the tree and again this fantastic UI you have to click the",
    "start": "1495200",
    "end": "1500390"
  },
  {
    "text": "checkbox to expand the tree but anyway here's the request that took five",
    "start": "1500390",
    "end": "1507950"
  },
  {
    "text": "seconds so this column here is the duration and milliseconds we spent in",
    "start": "1507950",
    "end": "1513350"
  },
  {
    "text": "this node and it's children so this is a request that was made to SDP app web",
    "start": "1513350",
    "end": "1519470"
  },
  {
    "text": "this is the main page and it took five seconds so now let's see what happened in that request",
    "start": "1519470",
    "end": "1525890"
  },
  {
    "text": "so I expand here and it tells me okay so the thread handling that request was",
    "start": "1525890",
    "end": "1531740"
  },
  {
    "text": "thread four one three two and there was 158 milliseconds of CPU time in that",
    "start": "1531740",
    "end": "1539330"
  },
  {
    "text": "thread but the total is still five seconds so we know that most of the work was probably blocking for something",
    "start": "1539330",
    "end": "1545960"
  },
  {
    "text": "maybe a database maybe an external service but we only had 150 milliseconds",
    "start": "1545960",
    "end": "1551270"
  },
  {
    "text": "of actual CPU work now we can keep expanding this and in fact as you see it's it's basically a stack tree which",
    "start": "1551270",
    "end": "1558650"
  },
  {
    "text": "tells you what the thread was doing during the processing of that particular request and you can have multiple",
    "start": "1558650",
    "end": "1564770"
  },
  {
    "text": "threads involved in the processing of a single request and that is something perfu just magically understands it uses",
    "start": "1564770",
    "end": "1572780"
  },
  {
    "text": "some sort of activity identifier which flows across threads so if you have multiple threads involved they would all",
    "start": "1572780",
    "end": "1579920"
  },
  {
    "text": "be aggregated under the same request if I expand this a little it goes through a",
    "start": "1579920",
    "end": "1586940"
  },
  {
    "text": "lot of web system web methods and I can collapse this whole thing because this",
    "start": "1586940",
    "end": "1593450"
  },
  {
    "text": "is the framework I don't care about it so I can just go right click this and I can say fold this module",
    "start": "1593450",
    "end": "1601130"
  },
  {
    "text": "so it just goes away and oops actually want to go up here and so now",
    "start": "1601130",
    "end": "1608059"
  },
  {
    "text": "this is my code so home controller dot index this is me and then this is where",
    "start": "1608059",
    "end": "1616490"
  },
  {
    "text": "we spend five seconds almost conference service gets speakers and we can keep",
    "start": "1616490",
    "end": "1621500"
  },
  {
    "text": "drilling in so this is actually an external service or anyway it simulates an external service but this is where we",
    "start": "1621500",
    "end": "1629360"
  },
  {
    "text": "spent five seconds processing this request this is why we took five seconds to return a response so this is again it",
    "start": "1629360",
    "end": "1636950"
  },
  {
    "text": "was running in the background while the requests were happening it was recording into a memory buffer and then as soon as",
    "start": "1636950",
    "end": "1643010"
  },
  {
    "text": "something interesting occurred we just flushed the whole thing to disk and we could analyze it on the spot again it",
    "start": "1643010",
    "end": "1650090"
  },
  {
    "text": "includes both CPU time and blocked time so IO locks database accesses whatever",
    "start": "1650090",
    "end": "1656539"
  },
  {
    "text": "it was the threads were doing during that request so that's pretty nice and I",
    "start": "1656539",
    "end": "1661549"
  },
  {
    "text": "want to show you a bunch of similar examples with slightly different scenarios so I'm going to go back to the",
    "start": "1661549",
    "end": "1667190"
  },
  {
    "start": "1667000",
    "end": "1756000"
  },
  {
    "text": "slides for a moment the whole tree that you were looking at the you know alter",
    "start": "1667190",
    "end": "1674380"
  },
  {
    "text": "alternating white and yellow lines and the check boxes and everything it's it's",
    "start": "1674380",
    "end": "1681289"
  },
  {
    "text": "you know and it's debatable if this is the best way to visualize stack traces so perf you just recently got flame",
    "start": "1681289",
    "end": "1688909"
  },
  {
    "text": "graph support as well how many of you have seen or used flame graphs before fewer than etw so yeah on windows flame",
    "start": "1688909",
    "end": "1696409"
  },
  {
    "text": "graphs are kind of still making their baby steps but it's a super super useful way of visualizing stack traces instead",
    "start": "1696409",
    "end": "1704240"
  },
  {
    "text": "of looking at a tree which you have to keep expanding like this you just get a single interactive diagram which you can",
    "start": "1704240",
    "end": "1711169"
  },
  {
    "text": "drill in and out of as needed and so this is a very recent addition but per",
    "start": "1711169",
    "end": "1717169"
  },
  {
    "text": "view now has flame graphs I'm not even sure the official version on the",
    "start": "1717169",
    "end": "1722659"
  },
  {
    "text": "Microsoft Download Center has it but the release on github already has this feature so this is just a flame graph",
    "start": "1722659",
    "end": "1731179"
  },
  {
    "text": "visualization of the same thing and I'm not gonna go into what flame grafts are exactly but but some people",
    "start": "1731179",
    "end": "1737600"
  },
  {
    "text": "will definitely prefer flame grafts to the stack trees in terms of quickly figuring out which pieces of code are",
    "start": "1737600",
    "end": "1744500"
  },
  {
    "text": "taking lots of time in your profile and this can get can be compared as well and",
    "start": "1744500",
    "end": "1749870"
  },
  {
    "text": "there's a ton of additional features alright so that was a CPU profiling and",
    "start": "1749870",
    "end": "1755720"
  },
  {
    "text": "blocked time let's do something slightly different let's investigate application startup and the reason I'm going there",
    "start": "1755720",
    "end": "1762080"
  },
  {
    "start": "1756000",
    "end": "1794000"
  },
  {
    "text": "is that's you know it's a slightly different set of events you would be interested in so when looking at",
    "start": "1762080",
    "end": "1767300"
  },
  {
    "text": "application startup performance there's multiple factors which could be interesting one is of course just CPU",
    "start": "1767300",
    "end": "1774080"
  },
  {
    "text": "work but then there's also disk IO which often affects the profile very very",
    "start": "1774080",
    "end": "1779180"
  },
  {
    "text": "strongly and there's JIT compilation right whenever you launch your app there's a bunch of dotnet code that has",
    "start": "1779180",
    "end": "1785330"
  },
  {
    "text": "to be JIT compiled and that can take a lot of time so let's see what profiling",
    "start": "1785330",
    "end": "1790670"
  },
  {
    "text": "startup performance looks like so here I'm gonna use the collect mode and this",
    "start": "1790670",
    "end": "1800960"
  },
  {
    "start": "1794000",
    "end": "1863000"
  },
  {
    "text": "is what the collection window looks like so let's do startup two dot ETL and this",
    "start": "1800960",
    "end": "1806810"
  },
  {
    "text": "is the beautiful check boxes that you can check to specify which events you care about so for example there's this",
    "start": "1806810",
    "end": "1813470"
  },
  {
    "text": "file IO check box which is already checked and I can also do registry",
    "start": "1813470",
    "end": "1819020"
  },
  {
    "text": "accesses and there is Network as well and background JIT compilation and a bunch of other stuff so I'm gonna hit",
    "start": "1819020",
    "end": "1826160"
  },
  {
    "text": "start collection and now we need an app which is kind of slow to start and we",
    "start": "1826160",
    "end": "1831770"
  },
  {
    "text": "want to investigate that slow startup so I'm gonna launch Visual Studio and here",
    "start": "1831770",
    "end": "1838940"
  },
  {
    "text": "it goes this is warm startup right so I already have one Visual Studio instance running so it's not gonna be loading a",
    "start": "1838940",
    "end": "1845150"
  },
  {
    "text": "lot of stuff from disk very slowly but here it is took a few seconds to launch and as soon as I think it's kind of",
    "start": "1845150",
    "end": "1852260"
  },
  {
    "text": "ready I will just go back to perfume and I will click stop collection and then it",
    "start": "1852260",
    "end": "1858890"
  },
  {
    "text": "loses focus this is a bug that's been around for at least three years anyways",
    "start": "1858890",
    "end": "1866360"
  },
  {
    "start": "1863000",
    "end": "2033000"
  },
  {
    "text": "the results coming back you see a progress bar down here that says we actually collected",
    "start": "1866360",
    "end": "1873710"
  },
  {
    "text": "tons of events and we are now parsing the whole thing and analyzing them briefly so this should take a few more",
    "start": "1873710",
    "end": "1881180"
  },
  {
    "text": "seconds there we go and the results are down",
    "start": "1881180",
    "end": "1886760"
  },
  {
    "text": "here startup to dot ETL this is what I just recorded alright so again we have",
    "start": "1886760",
    "end": "1892910"
  },
  {
    "text": "the bunch of these reports we could look at so we could look at CPU time we could look at disk we could look at i/o let's",
    "start": "1892910",
    "end": "1899150"
  },
  {
    "text": "see let's maybe start from some statistics so under advanced here I have",
    "start": "1899150",
    "end": "1905990"
  },
  {
    "text": "JIT statistics so JIT compilation this is based on etw events right nothing new",
    "start": "1905990",
    "end": "1912980"
  },
  {
    "text": "here it's just the CLR generates events whenever a method is compiled and then",
    "start": "1912980",
    "end": "1919490"
  },
  {
    "text": "you can figure out how long JIT compilation is taking and perf you simply aggregates this information so",
    "start": "1919490",
    "end": "1926480"
  },
  {
    "text": "here's the report JIT statistics for the JIT for the dev end process and it says",
    "start": "1926480",
    "end": "1932510"
  },
  {
    "text": "here that the total CPU time for that process was 21 seconds and during",
    "start": "1932510",
    "end": "1939260"
  },
  {
    "text": "startup we compiled 8815 methods and",
    "start": "1939260",
    "end": "1944330"
  },
  {
    "text": "that took us 5.7 seconds so in other words 26.8% of the cpu time",
    "start": "1944330",
    "end": "1951830"
  },
  {
    "text": "we used during startup was for JIT compilation that's quite a lot and let's",
    "start": "1951830",
    "end": "1958790"
  },
  {
    "text": "see what exactly happened so there's a CSV that you can export from here and",
    "start": "1958790",
    "end": "1964940"
  },
  {
    "text": "open in Excel and start analyzing it but there's also a summary here and this",
    "start": "1964940",
    "end": "1970280"
  },
  {
    "text": "summary is by assembly by DLL and you",
    "start": "1970280",
    "end": "1975590"
  },
  {
    "text": "can see the number one after total is JetBrains platform shell and the one",
    "start": "1975590",
    "end": "1982730"
  },
  {
    "text": "after that is jetplane JetBrains platform core and I have resharper ultimate installed and",
    "start": "1982730",
    "end": "1990100"
  },
  {
    "text": "so yeah and there's also these two guys over here now let's take a look at",
    "start": "1990100",
    "end": "1995120"
  },
  {
    "text": "actual numbers so JetBrains platform shell had almost 1700 methods that had to be",
    "start": "1995120",
    "end": "2004540"
  },
  {
    "text": "compiled during startup and that took us just over a second to compile so this",
    "start": "2004540",
    "end": "2011110"
  },
  {
    "text": "already means that even if we ignore IO and loading this stuff from disk and any CPU work I can shave off at least two",
    "start": "2011110",
    "end": "2019060"
  },
  {
    "text": "seconds here by disabling well resharper or maybe not having it you know do the",
    "start": "2019060",
    "end": "2026380"
  },
  {
    "text": "JIT compilation on start you know this looks kind of weird anyway this is interesting another interesting",
    "start": "2026380",
    "end": "2034150"
  },
  {
    "start": "2033000",
    "end": "2194000"
  },
  {
    "text": "report we can get from the same place is IO stacks so this is based on again ATW",
    "start": "2034150",
    "end": "2042310"
  },
  {
    "text": "events but this time from the kernel so we have kernel events for reading writing opening files and we can see",
    "start": "2042310",
    "end": "2050290"
  },
  {
    "text": "which stacks in our code were doing that and which files were being accessed so",
    "start": "2050290",
    "end": "2055840"
  },
  {
    "text": "here's a quick way of looking at it here is visual studio process and here are",
    "start": "2055840",
    "end": "2062560"
  },
  {
    "text": "all the threads and they had different amounts of disk i/o performed but here's",
    "start": "2062560",
    "end": "2068590"
  },
  {
    "text": "the interesting thing I think I mostly care about the main thread because",
    "start": "2068590",
    "end": "2073898"
  },
  {
    "text": "that's the thread that's being you know that that's the thread responding to user input so if the main thread is",
    "start": "2073899",
    "end": "2079450"
  },
  {
    "text": "doing lots of i/o this is especially suspicious and in our case here's the",
    "start": "2079450",
    "end": "2086440"
  },
  {
    "text": "main thread that's the startup thread and this is the amount of bytes it",
    "start": "2086440",
    "end": "2092408"
  },
  {
    "text": "either read or read or wrote to disk during startup so that's just under 5",
    "start": "2092409",
    "end": "2098050"
  },
  {
    "text": "megabytes and you see most of the work was actually on a background thread but somehow inevitably five megabytes",
    "start": "2098050",
    "end": "2105550"
  },
  {
    "text": "were actually rather written by the startup thread now what were these files",
    "start": "2105550",
    "end": "2110650"
  },
  {
    "text": "which call stacks were making those accesses we can just start expanding and drill in this is going to be harder than",
    "start": "2110650",
    "end": "2117730"
  },
  {
    "text": "the other examples because visual studio is a complex application and the stack",
    "start": "2117730",
    "end": "2122800"
  },
  {
    "text": "traces are going to be quite elaborate",
    "start": "2122800",
    "end": "2128070"
  },
  {
    "text": "here's another example where a flame graph could be useful another way of looking at it is well",
    "start": "2128070",
    "end": "2134880"
  },
  {
    "text": "ignore the stock traces just show me the files like what files which files were was Visual Studio reading or writing",
    "start": "2134880",
    "end": "2141990"
  },
  {
    "text": "during startup and to get that I can just go to the by name tab and this",
    "start": "2141990",
    "end": "2147420"
  },
  {
    "text": "shows me the files and you can see that the biggest one the biggest one file was",
    "start": "2147420",
    "end": "2153869"
  },
  {
    "text": "image library cache I don't know what it is but 64 plus megabytes were accessed",
    "start": "2153869",
    "end": "2162480"
  },
  {
    "text": "in that file during startup next one is Visual Studio default catalogs config",
    "start": "2162480",
    "end": "2168690"
  },
  {
    "text": "CTM and so on and so forth so this is the i/o performed by Visual Studio during startup we could do the",
    "start": "2168690",
    "end": "2175170"
  },
  {
    "text": "same thing for CPU we could do the same thing for assembly loads so we have a ton of events which can help figure out",
    "start": "2175170",
    "end": "2181500"
  },
  {
    "text": "what's happening during startup let me show you a different scenario again just",
    "start": "2181500",
    "end": "2186809"
  },
  {
    "text": "based on the same sources of instrumentation but I think an interesting example nonetheless so",
    "start": "2186809",
    "end": "2194760"
  },
  {
    "start": "2194000",
    "end": "2273000"
  },
  {
    "text": "here's a c-sharp app a console based app",
    "start": "2194760",
    "end": "2200039"
  },
  {
    "text": "this time which is a compiler so it's reading an input program and it's",
    "start": "2200039",
    "end": "2205500"
  },
  {
    "text": "generating some machine code and the program is kind of big so let's see big",
    "start": "2205500",
    "end": "2211440"
  },
  {
    "text": "program Jack it's 500k almost and so the",
    "start": "2211440",
    "end": "2216960"
  },
  {
    "text": "compiler takes its sweet time and you know it takes minutes to actually get",
    "start": "2216960",
    "end": "2222690"
  },
  {
    "text": "through the whole thing so while this is running I can just quickly grab a recording so this is more",
    "start": "2222690",
    "end": "2230910"
  },
  {
    "text": "like a development time profiling session I just wrote some inefficient code let's get it go ahead and profile",
    "start": "2230910",
    "end": "2236700"
  },
  {
    "text": "it so compiler TTL and I will keep basically the same settings and I will",
    "start": "2236700",
    "end": "2244920"
  },
  {
    "text": "start collection and this is gonna go on for a while so I'm not gonna wait for it",
    "start": "2244920",
    "end": "2250470"
  },
  {
    "text": "to complete just let it run for a few seconds and then I'll stop collection",
    "start": "2250470",
    "end": "2256339"
  },
  {
    "text": "and this time I want to show you a report we haven't seen yet which has to",
    "start": "2256339",
    "end": "2261839"
  },
  {
    "text": "do with garbage collection events so what was happening in this app in terms",
    "start": "2261839",
    "end": "2266960"
  },
  {
    "text": "of memory activity so compiler ETL is up",
    "start": "2266960",
    "end": "2272390"
  },
  {
    "text": "here and in the memory group there's a report and then you can get the stacks",
    "start": "2272390",
    "end": "2279799"
  },
  {
    "start": "2273000",
    "end": "2521000"
  },
  {
    "text": "as well so same thing is with the JIT compilation so the report is called GC",
    "start": "2279799",
    "end": "2285109"
  },
  {
    "text": "stats let's open this one it takes a while to render because there's there",
    "start": "2285109",
    "end": "2291920"
  },
  {
    "text": "was a lot of memory stuff and lots of garbage collections here the process I'm interesting in I'm interested in is this",
    "start": "2291920",
    "end": "2299030"
  },
  {
    "text": "jak compiler but you can see I collected system-wide so I do have statistics for",
    "start": "2299030",
    "end": "2304549"
  },
  {
    "text": "all the processes I have to pick the one I care about and then here's what it looks like total CPU time was 13 seconds",
    "start": "2304549",
    "end": "2313400"
  },
  {
    "text": "total GC CPU time was 6 seconds so",
    "start": "2313400",
    "end": "2318530"
  },
  {
    "text": "that's you know I'm not good at that it's 46.7% there we go",
    "start": "2318530",
    "end": "2324680"
  },
  {
    "text": "and also it says here that we allocated like 12 gigabytes in 13 seconds right so",
    "start": "2324680",
    "end": "2335390"
  },
  {
    "text": "that's pretty impressive actually it is impressive just you know in in theory right it's kind of nice the the.net",
    "start": "2335390",
    "end": "2341630"
  },
  {
    "text": "runtime is so well optimized you can allocate like almost a gigabyte per second and everything is still working",
    "start": "2341630",
    "end": "2348160"
  },
  {
    "text": "anyway there's another interesting metric here which is GC CPU milliseconds",
    "start": "2348160",
    "end": "2355069"
  },
  {
    "text": "per megabytes allocated I'm not sure you'd come up with that yourself but it's an interesting metric it basically",
    "start": "2355069",
    "end": "2362059"
  },
  {
    "text": "says how long did it take the GC to take care of every megabyte we allocated and",
    "start": "2362059",
    "end": "2369410"
  },
  {
    "text": "the result is 0.5 milliseconds again I think it's not bad but anyway we have",
    "start": "2369410",
    "end": "2377029"
  },
  {
    "text": "tons of garbage collection we are spending almost half the time on garbage collection and another horrible",
    "start": "2377029",
    "end": "2383270"
  },
  {
    "text": "statistic is is this 21.2% of the time",
    "start": "2383270",
    "end": "2388819"
  },
  {
    "text": "my code was actually not running so not only was there a GC taking CPU cycles",
    "start": "2388819",
    "end": "2395000"
  },
  {
    "text": "but the GC had to pause my threads at stop the application completely in order",
    "start": "2395000",
    "end": "2401120"
  },
  {
    "text": "to do garbage collection and the dotnet GC you know in recent versions evolved",
    "start": "2401120",
    "end": "2406190"
  },
  {
    "text": "significantly and more and more parts of the garbage collection cycle can be done concurrently with the application but",
    "start": "2406190",
    "end": "2413000"
  },
  {
    "text": "still there's some parts that have to stop the world and stop all the threads and in our case it's 20% of the time so",
    "start": "2413000",
    "end": "2420620"
  },
  {
    "text": "20% of the time I'm not actually compiling anything I'm just reclaiming garbage and for a compiler which is kind",
    "start": "2420620",
    "end": "2427550"
  },
  {
    "text": "of a throughput oriented app maybe it's not such a big deal but for anything user facing 20% pause time is not great",
    "start": "2427550",
    "end": "2436930"
  },
  {
    "text": "and also we could maybe see what the longest pause was which is also",
    "start": "2436930",
    "end": "2442040"
  },
  {
    "text": "interesting so here are the more specific statistics this is GC roll-up",
    "start": "2442040",
    "end": "2448160"
  },
  {
    "text": "by generation so overall we had 3545",
    "start": "2448160",
    "end": "2453350"
  },
  {
    "text": "garbage collections in 13 seconds again it's really impressive the good news is",
    "start": "2453350",
    "end": "2460370"
  },
  {
    "text": "the maximum pause time was 14 point 7 milliseconds that's the longest time the",
    "start": "2460370",
    "end": "2466220"
  },
  {
    "text": "GC had to stop the threads for a GC cycle but we just had a lot of these",
    "start": "2466220",
    "end": "2471800"
  },
  {
    "text": "pauses so it does add up to a lot we also have more specific info on the",
    "start": "2471800",
    "end": "2478190"
  },
  {
    "text": "sizes of different things and there's also this table here which shows all the",
    "start": "2478190",
    "end": "2485510"
  },
  {
    "text": "garbage collection events in a table and you can see the duration of each GC and",
    "start": "2485510",
    "end": "2491150"
  },
  {
    "text": "how much memory was freed and so on and so forth and this is mostly interesting for very low level GC tuning which we're",
    "start": "2491150",
    "end": "2497840"
  },
  {
    "text": "not going to do now what I want to understand is why this jak compiler",
    "start": "2497840",
    "end": "2504590"
  },
  {
    "text": "process allocated 12 gigabytes of memory compiling that little program the",
    "start": "2504590",
    "end": "2510830"
  },
  {
    "text": "program is 500k and we already allocated 13 gigabytes so something's fishy here",
    "start": "2510830",
    "end": "2517300"
  },
  {
    "text": "I'm gonna close this report and open this one GC heap a local or a core",
    "start": "2517300",
    "end": "2525620"
  },
  {
    "start": "2521000",
    "end": "2588000"
  },
  {
    "text": "sampling stacks right so what that is",
    "start": "2525620",
    "end": "2531470"
  },
  {
    "text": "is a report showing you allocation call stacks so which parts of your code",
    "start": "2531470",
    "end": "2536900"
  },
  {
    "text": "allocated lots of objects and it's based on course sampling which is why it",
    "start": "2536900",
    "end": "2542090"
  },
  {
    "text": "appears there so basically if you record every single object allocated you're",
    "start": "2542090",
    "end": "2548030"
  },
  {
    "text": "gonna end up with huge traces which would be probably unopenable and it's gonna slow you down probably by a factor",
    "start": "2548030",
    "end": "2555380"
  },
  {
    "text": "of 10 at least so here we're not actually recording every single allocation we are sampling the",
    "start": "2555380",
    "end": "2561800"
  },
  {
    "text": "allocations basically what's per few is doing is it takes a an event every 100",
    "start": "2561800",
    "end": "2568520"
  },
  {
    "text": "kilobytes of allocated objects so every 100 kilobytes boom we have an event that",
    "start": "2568520",
    "end": "2573710"
  },
  {
    "text": "tells us what object we were allocating at that moment it's it's just built into",
    "start": "2573710",
    "end": "2579109"
  },
  {
    "text": "the CLR fu just has to turn it on so it's open the report JAC compiler is my",
    "start": "2579109",
    "end": "2586130"
  },
  {
    "text": "process here and it starts with this summary table showing what kinds of",
    "start": "2586130",
    "end": "2592700"
  },
  {
    "start": "2588000",
    "end": "2737000"
  },
  {
    "text": "things we were allocating so you know it says here large object is 99.9 percent",
    "start": "2592700",
    "end": "2599540"
  },
  {
    "text": "of what you allocated and it says large object and not the actual types because",
    "start": "2599540",
    "end": "2604849"
  },
  {
    "text": "you might remember that the CLR has this concept of a large object heap right so",
    "start": "2604849",
    "end": "2611480"
  },
  {
    "text": "the large object heap is reserved for objects greater than or equal to 85,000 bytes in sides so large object here is",
    "start": "2611480",
    "end": "2619310"
  },
  {
    "text": "just that it's anything greater than or equal to 85,000 bytes in size that's",
    "start": "2619310",
    "end": "2624770"
  },
  {
    "text": "large objects and if I click large object though it will give me this tree",
    "start": "2624770",
    "end": "2631130"
  },
  {
    "text": "view of where I allocated these large objects in my code and also it tells me",
    "start": "2631130",
    "end": "2637430"
  },
  {
    "text": "what the large objects were so we had strangle occasions basically again",
    "start": "2637430",
    "end": "2644180"
  },
  {
    "text": "that's 99.9% of all the allocations in my app and they're coming from string",
    "start": "2644180",
    "end": "2650180"
  },
  {
    "text": "concat so i'm concatenating strings but that's bad of course but where is that",
    "start": "2650180",
    "end": "2656390"
  },
  {
    "text": "coming from so we can just keep going up this reversed tree so this is coming",
    "start": "2656390",
    "end": "2662150"
  },
  {
    "text": "from here jack compiler compilation output text writer dot right so this is some",
    "start": "2662150",
    "end": "2668809"
  },
  {
    "text": "code in my compiler internals which is writing compilation output and I can",
    "start": "2668809",
    "end": "2675410"
  },
  {
    "text": "keep expanding this tree and you can see specific pieces of my code generator",
    "start": "2675410",
    "end": "2680569"
  },
  {
    "text": "which are calling that stuff and doing the allocations and so on and in some",
    "start": "2680569",
    "end": "2687200"
  },
  {
    "text": "cases when the stars align I can even go to source from here do you trust this",
    "start": "2687200",
    "end": "2694369"
  },
  {
    "text": "file I think I do yeah that didn't work",
    "start": "2694369",
    "end": "2699410"
  },
  {
    "text": "anyway it's it's supposed to show you the c-sharp source code and point to the",
    "start": "2699410",
    "end": "2705230"
  },
  {
    "text": "actual line but you know if your methods are small enough you don't need that so",
    "start": "2705230",
    "end": "2711109"
  },
  {
    "text": "you'll figure out that in this method you're doing extraneous string allocations and you should take care of",
    "start": "2711109",
    "end": "2717170"
  },
  {
    "text": "this right so we have allocation profiling as well I hope you noticed",
    "start": "2717170",
    "end": "2723410"
  },
  {
    "text": "that all my demos I wasn't actually restarting the application or changing",
    "start": "2723410",
    "end": "2728839"
  },
  {
    "text": "any configuration this is all happening in the background and you can perfectly use it alongside your actual running",
    "start": "2728839",
    "end": "2734660"
  },
  {
    "text": "process I want to talk about one last feature which is not really a profiling",
    "start": "2734660",
    "end": "2739849"
  },
  {
    "start": "2737000",
    "end": "2993000"
  },
  {
    "text": "feature but it's quite important I only have four minutes but I'll tell you the general picture perfu has a pretty cool",
    "start": "2739849",
    "end": "2748030"
  },
  {
    "text": "capability which is not strictly profiling and it's not based on atw which has to do with memory analysis",
    "start": "2748030",
    "end": "2755000"
  },
  {
    "text": "perf you can capture heap snapshots of your application and then show you what",
    "start": "2755000",
    "end": "2760670"
  },
  {
    "text": "kinds of objects you have on your heap and what keeps them alive so you can use it for memory leak analysis as well you",
    "start": "2760670",
    "end": "2767630"
  },
  {
    "text": "can ask perf you to capture a snapshot of the heap and then figure out what objects are taking lots of space now",
    "start": "2767630",
    "end": "2773750"
  },
  {
    "text": "this is pretty cool in itself because there's a bunch of commercial memory profilers where you have to pay for a",
    "start": "2773750",
    "end": "2780290"
  },
  {
    "text": "license to get basically the same functionality but it's even better than that because perfu has its own snapshot",
    "start": "2780290",
    "end": "2787369"
  },
  {
    "text": "format which in a lot of cases is like 1% of the size of what you'd get from",
    "start": "2787369",
    "end": "2794119"
  },
  {
    "text": "other tools because it has a lot of techniques for compressing the snapshot discarding specific objects discarding",
    "start": "2794119",
    "end": "2801580"
  },
  {
    "text": "object contents discarding garbage objects it has a bunch of optimizations for capturing a very very minimal amount",
    "start": "2801580",
    "end": "2808210"
  },
  {
    "text": "of information which still represents all the objects on your heap so just as",
    "start": "2808210",
    "end": "2814300"
  },
  {
    "text": "an example if I take my visual studio process and I just use task manager to",
    "start": "2814300",
    "end": "2822180"
  },
  {
    "text": "capture a dump file which is not exactly what other profilers would do but it's",
    "start": "2822180",
    "end": "2829780"
  },
  {
    "text": "sort of the general principle we just write out the process memory to a file that is time consuming and the output",
    "start": "2829780",
    "end": "2838860"
  },
  {
    "text": "see it's an old version of Windows so",
    "start": "2838860",
    "end": "2846190"
  },
  {
    "text": "I'd have to paste it manually like an animal so that's 600 megabytes a 600",
    "start": "2846190",
    "end": "2851920"
  },
  {
    "text": "megabyte dump file all right now if I use purview to take a heap snapshot find",
    "start": "2851920",
    "end": "2862090"
  },
  {
    "text": "that Visual Studio process to be fair let me make sure yes so it's this one",
    "start": "2862090",
    "end": "2868380"
  },
  {
    "text": "this one here dump GC heap so now to be",
    "start": "2868380",
    "end": "2873820"
  },
  {
    "text": "fair again it's gonna take longer actually I didn't tell you it's gonna be faster it is gonna be smaller though so",
    "start": "2873820",
    "end": "2882010"
  },
  {
    "text": "once it's done once it's done oh and by the way the process is still running the",
    "start": "2882010",
    "end": "2887020"
  },
  {
    "text": "process is perfectly responsive it's not frozen you can keep working the system",
    "start": "2887020",
    "end": "2892420"
  },
  {
    "text": "keeps sending responses to users it's all still happening in the background",
    "start": "2892420",
    "end": "2897490"
  },
  {
    "text": "and then we have the file and the file is is this from now yes",
    "start": "2897490",
    "end": "2908950"
  },
  {
    "text": "so it's 6.6 megabytes it's it's a factor of 100 smaller almost and it has all the",
    "start": "2908950",
    "end": "2916570"
  },
  {
    "text": "same information it has enough information to perfectly reconstruct what objects you have on your heap and",
    "start": "2916570",
    "end": "2922150"
  },
  {
    "text": "the references between them and so on I don't have time to show you the whole thing but I do have time to show you",
    "start": "2922150",
    "end": "2928270"
  },
  {
    "text": "just the very very basic screen shot just you know real quick so this",
    "start": "2928270",
    "end": "2935300"
  },
  {
    "text": "screenshot here shows the diff between two snapshots and perf you can tell you",
    "start": "2935300",
    "end": "2940760"
  },
  {
    "text": "which objects are growing in memory so essentially you capture multiple",
    "start": "2940760",
    "end": "2946250"
  },
  {
    "text": "snapshots and you can see which objects you are getting more and more references",
    "start": "2946250",
    "end": "2951350"
  },
  {
    "text": "to in memory so in our case it's these two guys memory leak response and memory leak request and then going back to my",
    "start": "2951350",
    "end": "2958820"
  },
  {
    "text": "last screen shot here you also get this nice reference tree that tells you what",
    "start": "2958820",
    "end": "2964400"
  },
  {
    "text": "kind of references you have to these objects so you can trace it back all the",
    "start": "2964400",
    "end": "2969980"
  },
  {
    "text": "way to something called response cache whatever which is like an unbounded",
    "start": "2969980",
    "end": "2978380"
  },
  {
    "text": "cache which is causing the memory leak in this example so you know I didn't show you the whole process but you can",
    "start": "2978380",
    "end": "2984860"
  },
  {
    "text": "capture memory snapshots you can compare them and you can get these reference trees all in this beautiful per view UI",
    "start": "2984860",
    "end": "2992960"
  },
  {
    "text": "but still so functionally it's all there so I'm at the end of my time and also of",
    "start": "2992960",
    "end": "2999830"
  },
  {
    "start": "2993000",
    "end": "3062000"
  },
  {
    "text": "the slides I wanted to show you that the foundation etw alongside with this nice",
    "start": "2999830",
    "end": "3005950"
  },
  {
    "text": "wrapper per view can be used for a variety of different scenarios for a variety of investigations you can",
    "start": "3005950",
    "end": "3011920"
  },
  {
    "text": "actually profile things in production on Windows today with a freely available tool that you just copy to a target",
    "start": "3011920",
    "end": "3019120"
  },
  {
    "text": "system run it record and analyze the results wherever you want I use perf you are almost on a daily basis for for my",
    "start": "3019120",
    "end": "3026410"
  },
  {
    "text": "work for development profiling for production profiling for recording stuff in the background and analyzing the",
    "start": "3026410",
    "end": "3032260"
  },
  {
    "text": "events later and it's also very interrupt cause it's all based on atw so you can",
    "start": "3032260",
    "end": "3037810"
  },
  {
    "text": "record with one tool and open and perfu you can record with perfu and export to another tool there's a whole ecosystem",
    "start": "3037810",
    "end": "3044560"
  },
  {
    "text": "of free tools based on atw that you can use today I don't have time for",
    "start": "3044560",
    "end": "3049780"
  },
  {
    "text": "questions right now but I will step off the podium to make room for the next speaker and then you can ask me whatever",
    "start": "3049780",
    "end": "3055300"
  },
  {
    "text": "you'd like and I'll be here the whole day and tomorrow as well thank you very very much for coming",
    "start": "3055300",
    "end": "3060570"
  },
  {
    "text": "you",
    "start": "3060570",
    "end": "3062630"
  }
]