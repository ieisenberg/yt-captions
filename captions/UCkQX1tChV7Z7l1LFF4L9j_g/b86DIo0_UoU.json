[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "hello everybody welcome Shawn Walsh on field t theo with flight bend previously",
    "start": "3930",
    "end": "11130"
  },
  {
    "text": "in my career I implemented reactive and distributed systems in energy and health and wellness and financial for the lasts",
    "start": "11130",
    "end": "18570"
  },
  {
    "text": "over three years I've been field CTO of light Bend where I've helped the help the global 5,000 do the same so a lot of",
    "start": "18570",
    "end": "25920"
  },
  {
    "text": "their challenges and I've had my own challenges over the years so I'd like to talk to you today about cloud state so",
    "start": "25920",
    "end": "33270"
  },
  {
    "text": "Berkeley recently said that they predict that serverless computing is going to grow and dominate the future of computing of cloud computing so I'd like",
    "start": "33270",
    "end": "40829"
  },
  {
    "start": "39000",
    "end": "58000"
  },
  {
    "text": "to talk about function as a service it was visionary and it paved the way for",
    "start": "40829",
    "end": "46020"
  },
  {
    "text": "some greater things but it was really just the first step how many of you have actually used function as a service okay",
    "start": "46020",
    "end": "53880"
  },
  {
    "text": "that's significant and everybody else have have you heard of it okay so it's",
    "start": "53880",
    "end": "59280"
  },
  {
    "start": "58000",
    "end": "64000"
  },
  {
    "text": "just the first step but it's important to understand that server list is not function as a service they're not equivalent so what are some",
    "start": "59280",
    "end": "66780"
  },
  {
    "start": "64000",
    "end": "93000"
  },
  {
    "text": "good use cases for function as a service we're through pita throughput is key short time windows of operations",
    "start": "66780",
    "end": "73880"
  },
  {
    "text": "embarrassingly parallel operations low traffic stateless typically stateless",
    "start": "73880",
    "end": "80460"
  },
  {
    "text": "web applications I still would argue that they're not a great fit there because the the function is a little bit",
    "start": "80460",
    "end": "86520"
  },
  {
    "text": "too granular orchestration chaining those cron jobs triggers job scheduling",
    "start": "86520",
    "end": "92640"
  },
  {
    "text": "things like that but it's hard to build general purpose applications so what do",
    "start": "92640",
    "end": "97830"
  },
  {
    "start": "93000",
    "end": "132000"
  },
  {
    "text": "I mean by a general purpose application one of the things I've practiced and many of us I'm sure have in building",
    "start": "97830",
    "end": "104250"
  },
  {
    "text": "applications is domain driven design and the bounded context and the bounded context dictates that there are these",
    "start": "104250",
    "end": "111390"
  },
  {
    "text": "bubbles of functionality in systems so subsystems we're inside of them nothing",
    "start": "111390",
    "end": "116640"
  },
  {
    "text": "is shared it's inside the bubble it's fine things are shared and known about but outside of that they're not really",
    "start": "116640",
    "end": "122130"
  },
  {
    "text": "shared they're not like they're they're that greater granularity I'd like to think about something as a function as a",
    "start": "122130",
    "end": "128759"
  },
  {
    "text": "service with that kind of a granularity so functions are stateless and",
    "start": "128759",
    "end": "135359"
  },
  {
    "start": "132000",
    "end": "190000"
  },
  {
    "text": "short-lived it expensive to lose this context and rehydrate you your state is never in",
    "start": "135359",
    "end": "141549"
  },
  {
    "text": "memory it's never in your application it's never in the function it's always in a database or somewhere like that",
    "start": "141549",
    "end": "147099"
  },
  {
    "text": "so it needs to be rehydrated before you can even think or do anything it's always somewhere else we've in lacking",
    "start": "147099",
    "end": "153310"
  },
  {
    "text": "this colocation of the state in the processing they're always separate in in some effect that each one is hobbled",
    "start": "153310",
    "end": "159930"
  },
  {
    "text": "there's no direct address ability on these functions there's no need for it in function as a serval stateless",
    "start": "159930",
    "end": "167079"
  },
  {
    "text": "because they're just anonymous functions without any state you could spin one up it goes that it does its thing whatever",
    "start": "167079",
    "end": "173230"
  },
  {
    "text": "that is and then return some data to the user there's limited options for",
    "start": "173230",
    "end": "178629"
  },
  {
    "text": "coordinated distributed state and modeling consistency guarantees we're missing a really big piece of a puzzle",
    "start": "178629",
    "end": "184329"
  },
  {
    "text": "here it's it's really the elephant in the room which is state so we need",
    "start": "184329",
    "end": "191620"
  },
  {
    "start": "190000",
    "end": "294000"
  },
  {
    "text": "server support for managing sessions things like shopping carts things like IOT devices and you know it's it's it's",
    "start": "191620",
    "end": "199989"
  },
  {
    "text": "not reasonable to have shopping carts or IOT devices or anything that you might model as a digital twin of something in",
    "start": "199989",
    "end": "206949"
  },
  {
    "text": "the real world and and have it be expected to to have that order of magnitude or really that that context",
    "start": "206949",
    "end": "214479"
  },
  {
    "text": "loss of having to connect to something and grab its data and then do its thinking and do its job it's really",
    "start": "214479",
    "end": "220120"
  },
  {
    "text": "gotta be co-located with its data so we want to have low latency serving of",
    "start": "220120",
    "end": "227560"
  },
  {
    "text": "machine learning models real-time stream processing distributed workflows so interestingly enough the technology",
    "start": "227560",
    "end": "234340"
  },
  {
    "text": "technology is behind cloud state as well as cloud state itself are going to now",
    "start": "234340",
    "end": "240280"
  },
  {
    "text": "real ow things like acid so acid 2.0 being able to now again think about how we can do",
    "start": "240280",
    "end": "246810"
  },
  {
    "text": "saga patterns that aren't really observer patterns from the outside integral with the application space with",
    "start": "246810",
    "end": "252879"
  },
  {
    "text": "the applications that are deployed so you can have true rollback in compensating actions and commits shared",
    "start": "252879",
    "end": "260769"
  },
  {
    "text": "collaborative workspaces you know shared blackboards chat rooms things where a lot of people are touching the same",
    "start": "260769",
    "end": "266529"
  },
  {
    "text": "thing at once and it needs to be very wizzy quick and we need to avoid impetus miss",
    "start": "266529",
    "end": "272300"
  },
  {
    "text": "impotence mismatch so pure domain is rarely in a viewing condition I don't know if you're familiar I'll",
    "start": "272300",
    "end": "278180"
  },
  {
    "text": "talk a little bit more about it but CQRS command query responsibility segregation solves that problem so your domain is",
    "start": "278180",
    "end": "284449"
  },
  {
    "text": "something that you you design you carefully think it out you craft it and then the UI people all tell you that's",
    "start": "284449",
    "end": "291409"
  },
  {
    "text": "not what they need so this this solves that technical requirements for for a",
    "start": "291409",
    "end": "297110"
  },
  {
    "start": "294000",
    "end": "384000"
  },
  {
    "text": "cloud state type endeavor stateful long live virtual components so actors we",
    "start": "297110",
    "end": "302569"
  },
  {
    "text": "already have actors it's over ten years old we have akka open-source it was really easy to lean on the capabilities",
    "start": "302569",
    "end": "309139"
  },
  {
    "text": "of that and abstract upon it options for coordination and communication patterns",
    "start": "309139",
    "end": "314900"
  },
  {
    "text": "we have point-to-point broadcast pub/sub using whatever you might like under the",
    "start": "314900",
    "end": "320689"
  },
  {
    "text": "covers could be Kafka today it could be something else later CRD teas which are conflict free replicated data types",
    "start": "320689",
    "end": "326919"
  },
  {
    "text": "which are an eventually consistent distributed view on things that coordinate amongst themselves sagas",
    "start": "326919",
    "end": "334339"
  },
  {
    "text": "which are transactions etc options for managing the state reliably its scale",
    "start": "334339",
    "end": "341050"
  },
  {
    "text": "providing strong to strong eventual consistency to eventual consistency",
    "start": "341050",
    "end": "346659"
  },
  {
    "text": "intelligent placement of these stateful functions so you get this colocation of state we need this colocation of state",
    "start": "347560",
    "end": "353539"
  },
  {
    "text": "and processing we need a clustered solution that removes this limitation of",
    "start": "353539",
    "end": "359870"
  },
  {
    "text": "not having the processing live where the data is and then as a byproduct of this",
    "start": "359870",
    "end": "367159"
  },
  {
    "text": "and as a requirement you also get predictable throughput latency and performance startup times storage",
    "start": "367159",
    "end": "374210"
  },
  {
    "text": "communication it's just a matter of figuring out what the constraints are to allow this so we get useful constraints",
    "start": "374210",
    "end": "381919"
  },
  {
    "text": "I'll talk about that a little bit more to function as a service is great and",
    "start": "381919",
    "end": "388159"
  },
  {
    "start": "384000",
    "end": "442000"
  },
  {
    "text": "abstracting over communications so it's it's always been great that's operational concerns you don't need to",
    "start": "388159",
    "end": "393259"
  },
  {
    "text": "worry about it you have your little function gets deployed messages come in thinking's done logics done in the user",
    "start": "393259",
    "end": "400339"
  },
  {
    "text": "function it probably retrieves some data from somewhere and then a message ow crud it's a little bit more difficult",
    "start": "400339",
    "end": "408349"
  },
  {
    "text": "if you'd like to create sort of a framework around it becomes a little bit more difficult to reason about what actually is going on here",
    "start": "408349",
    "end": "413899"
  },
  {
    "text": "you've got your message in you've got your user function doing something with a database who knows what how big is it how long is",
    "start": "413899",
    "end": "421339"
  },
  {
    "text": "it taking how many joins are there are there multiple databases it becomes really hard to actually abstract any",
    "start": "421339",
    "end": "427759"
  },
  {
    "text": "kind of guarantees around this kind of behavior so it's a leaky abstraction so",
    "start": "427759",
    "end": "434209"
  },
  {
    "text": "the problem is that the stateless server list is a big black box we don't know",
    "start": "434209",
    "end": "440360"
  },
  {
    "text": "what's really going on inside there's the wild west of the database really",
    "start": "440360",
    "end": "446779"
  },
  {
    "start": "442000",
    "end": "460000"
  },
  {
    "text": "hard to automate hard to have any kind of guarantees to be able to do interesting things like being elastic",
    "start": "446779",
    "end": "452599"
  },
  {
    "text": "scaling up and down provisioning all that becomes very difficult when you don't really don't know what's going on",
    "start": "452599",
    "end": "458569"
  },
  {
    "text": "inside those black boxes so there's an interesting quote this actually comes from a theologian somebody found that",
    "start": "458569",
    "end": "466549"
  },
  {
    "start": "460000",
    "end": "473000"
  },
  {
    "text": "freedom is not so much the absence of restrictions as finding the right ones the liberating restrictions that'll set us free so function as a service",
    "start": "466549",
    "end": "476539"
  },
  {
    "text": "abstract for us communication and it's got a deployment around it that's usually automated and as we know we get",
    "start": "476539",
    "end": "484129"
  },
  {
    "text": "the message in do some thinking and a message comes out so what happens when",
    "start": "484129",
    "end": "489289"
  },
  {
    "text": "we have we do something different what if that if we abstract over state so stateful serverless",
    "start": "489289",
    "end": "495199"
  },
  {
    "text": "does the same exact thing messages come in there's a function and and something",
    "start": "495199",
    "end": "500479"
  },
  {
    "text": "happens and messages go out but also what's happening is state is coming in",
    "start": "500479",
    "end": "505959"
  },
  {
    "text": "synchronously at different times then the user requests and state is going out",
    "start": "505959",
    "end": "511389"
  },
  {
    "text": "so what is state here we need to really think about what that is it's great that's a great idea but we're not going",
    "start": "511389",
    "end": "517370"
  },
  {
    "text": "to pass the entire dataset in we're not going to pass an entire database and that that's not efficient that's not going to work what is state so inter",
    "start": "517370",
    "end": "525559"
  },
  {
    "text": "cloud state so what is it",
    "start": "525559",
    "end": "531470"
  },
  {
    "start": "527000",
    "end": "563000"
  },
  {
    "text": "a lot of times we we build stuff and we talk about what it does and we don't really say what it is so I thought it",
    "start": "531470",
    "end": "537199"
  },
  {
    "text": "was important to have just clear sentence to say what it is don't read it so cloud state is distributed clustered and stateful cloud",
    "start": "537199",
    "end": "543890"
  },
  {
    "text": "runtime providing a zero ops development experience with polyglot client support essentially service on server list 2.0",
    "start": "543890",
    "end": "550700"
  },
  {
    "text": "so you can do it in JavaScript you could do it in Golan you've been doing in Scala whatever whatever language you",
    "start": "550700",
    "end": "557690"
  },
  {
    "text": "choose if it's not implemented you can implement it yourself it's just G RPC under the covers so also",
    "start": "557690",
    "end": "566149"
  },
  {
    "start": "563000",
    "end": "673000"
  },
  {
    "text": "it's an open source project to Apache 2.0 it makes building state stateful",
    "start": "566149",
    "end": "571640"
  },
  {
    "text": "server list we haven't talked about reactive applications yet people fill it familiar with reactive a lot of people",
    "start": "571640",
    "end": "578779"
  },
  {
    "text": "familiar so reactive applications mandate you know what are the four pillars of a distributed application and",
    "start": "578779",
    "end": "586450"
  },
  {
    "text": "they are to be resilient embrace failure to be elastic scale up and down with",
    "start": "586450",
    "end": "593209"
  },
  {
    "text": "need save cost when there isn't any need to be responsive in the face of load in",
    "start": "593209",
    "end": "598850"
  },
  {
    "text": "the face of user requests nobody's willing to wait for a page to load or anything like that anymore and that's",
    "start": "598850",
    "end": "604519"
  },
  {
    "text": "all made in May pastas possible by message passing a synchronous message",
    "start": "604519",
    "end": "609740"
  },
  {
    "text": "passing those are the four pillars of reactive so building a reactive application up until now has taking some",
    "start": "609740",
    "end": "616550"
  },
  {
    "text": "expertise it either requires help from a consulting company or or light Bend or",
    "start": "616550",
    "end": "621980"
  },
  {
    "text": "me or consultants or something it's it's not an easy tasks we set out to make",
    "start": "621980",
    "end": "627050"
  },
  {
    "text": "this easy we want everybody to be able to be comfortable to build an application to house a billion shopping",
    "start": "627050",
    "end": "633079"
  },
  {
    "text": "carts without being concerned that they're not going to fit in memory or you're limited to an individual node so",
    "start": "633079",
    "end": "641329"
  },
  {
    "text": "we've created the reference implementation for a standard and we created a protocol around it to back the",
    "start": "641329",
    "end": "647660"
  },
  {
    "text": "standard all this is at cloud state dot IO and it's also published in github we",
    "start": "647660",
    "end": "654649"
  },
  {
    "text": "want you to focus on your business problem just like serverless function as a service it's your function it your",
    "start": "654649",
    "end": "661699"
  },
  {
    "text": "you're concentrating on the function you're not worried about how it's being deployed when it's running how it gets started up all that stuff's extracted",
    "start": "661699",
    "end": "668630"
  },
  {
    "text": "away from you and you can just be a developer and leave the heavy lifting to your platform",
    "start": "668630",
    "end": "674290"
  },
  {
    "text": "so don't worry about the complexities of concurrency and distributed systems all",
    "start": "674650",
    "end": "679670"
  },
  {
    "text": "that's abstracted away for you no more synchronized no more locks no more things like that you the distributed",
    "start": "679670",
    "end": "688040"
  },
  {
    "text": "state and the replication the persistence store behind everything is managed for you we use kerbin Nettie's",
    "start": "688040",
    "end": "693830"
  },
  {
    "text": "very heavily for abstracting over persistence messaging pods all that",
    "start": "693830",
    "end": "700250"
  },
  {
    "text": "stuff we we use kubernetes first and then we integrate it into what a call",
    "start": "700250",
    "end": "705890"
  },
  {
    "text": "already has so we're using kubernetes for service messages is do any databases",
    "start": "705890",
    "end": "713660"
  },
  {
    "text": "that provided provides you know we're Pali DB here we don't really we don't care which way we go on databases and",
    "start": "713660",
    "end": "720110"
  },
  {
    "text": "other infrastructure message routing scalability failover recovery all's part",
    "start": "720110",
    "end": "725240"
  },
  {
    "text": "of the framework running operating your application quickly instantiating new",
    "start": "725240",
    "end": "730250"
  },
  {
    "text": "pods all that's just the the application framework cloud state so some technical",
    "start": "730250",
    "end": "737840"
  },
  {
    "start": "735000",
    "end": "915000"
  },
  {
    "text": "highlights so it is polyglot the the very first sample application we built",
    "start": "737840",
    "end": "743480"
  },
  {
    "text": "was Java Script just to show what it can do to show what you can actually do in",
    "start": "743480",
    "end": "748880"
  },
  {
    "text": "JavaScript and we feel that javascript is kind of the opposite of Scala which is a programming language that lie pen",
    "start": "748880",
    "end": "754970"
  },
  {
    "text": "is behind it it's it's typesafe it's it's functional it's it's actually",
    "start": "754970",
    "end": "761510"
  },
  {
    "text": "deemed a little bit complex by some where javascript is really a lot of people or helps you out there doing",
    "start": "761510",
    "end": "766580"
  },
  {
    "text": "JavaScript Java of course go and then upcoming support for Python net rust",
    "start": "766580",
    "end": "772100"
  },
  {
    "text": "Swift and Scala and the sky's the limit we're also Pali state so we use these",
    "start": "772100",
    "end": "780590"
  },
  {
    "text": "tried and true you know we were using these eight eight years ago we're building systems using event sourcing",
    "start": "780590",
    "end": "787070"
  },
  {
    "text": "and Ciardi tees also CQRS which I don't have looked at listed here because that",
    "start": "787070",
    "end": "792890"
  },
  {
    "text": "was the way we had to solve our problems we had I Oh T devices in energy in the millions and we needed to control them",
    "start": "792890",
    "end": "798800"
  },
  {
    "text": "and read them in real time you couldn't do that with a stateless application in spring or",
    "start": "798800",
    "end": "804649"
  },
  {
    "text": "or WebLogic or anything like that we needed new ways to do things now they've been embraced as part of akka and and",
    "start": "804649",
    "end": "812119"
  },
  {
    "text": "now they're embraced as part of Cloud State so Polly DB as I mentioned sequel",
    "start": "812119",
    "end": "818180"
  },
  {
    "text": "no sequel if it's supported by kubernetes we could support it as well so we're leveraging akka fully there are",
    "start": "818180",
    "end": "827029"
  },
  {
    "text": "there are no capabilities other than the abstractions in cloud state that don't",
    "start": "827029",
    "end": "832429"
  },
  {
    "text": "already exist in our tried and tested in akka so that is the event sourcing it's",
    "start": "832429",
    "end": "838639"
  },
  {
    "text": "the the CRD T's CQRS the actor interactions the clustering",
    "start": "838639",
    "end": "845809"
  },
  {
    "text": "cluster rebalancing failure all that stuff is is handled Knakal already we",
    "start": "845809",
    "end": "852230"
  },
  {
    "text": "just needed a way to put together in a really nice package way G RPC again also",
    "start": "852230",
    "end": "858499"
  },
  {
    "text": "offer by akka that's our that's our language of choice when you're interacting with cloud state with your",
    "start": "858499",
    "end": "865779"
  },
  {
    "text": "your your applications so we cloud States interesting because you've got a",
    "start": "865779",
    "end": "871129"
  },
  {
    "text": "clustered application with what we call distributed entities across your cluster so you can have billions of these things",
    "start": "871129",
    "end": "877779"
  },
  {
    "text": "but also your application code that is consuming it and interfacing with it is",
    "start": "877779",
    "end": "883249"
  },
  {
    "text": "also in the same cluster in the same sidecar kubernetes a potted sidecar and",
    "start": "883249",
    "end": "890439"
  },
  {
    "text": "therefore you have ready access to everything it's just it's it's really",
    "start": "890439",
    "end": "896809"
  },
  {
    "text": "fast you're deployed in the same environment so the G RPC is has very little expense associated with it we're embracing K",
    "start": "896809",
    "end": "903860"
  },
  {
    "text": "native for for nice kubernetes abstractions as they as they come out",
    "start": "903860",
    "end": "909319"
  },
  {
    "text": "growl VM because it's really fast to provision new instances of things and we're all and everything's kubernetes so",
    "start": "909319",
    "end": "916220"
  },
  {
    "start": "915000",
    "end": "921000"
  },
  {
    "text": "the Cloud State architecture so we utilize kubernetes pods and then what we",
    "start": "916220",
    "end": "922970"
  },
  {
    "start": "921000",
    "end": "1079000"
  },
  {
    "text": "have is user functions that are deployed on each of these pods so these are your",
    "start": "922970",
    "end": "929389"
  },
  {
    "text": "you can you can create them in your language of choice but they are highly",
    "start": "929389",
    "end": "934699"
  },
  {
    "text": "prescriptive in in how you do these things so this is one I said that sometimes constraints can be helpful the right",
    "start": "934699",
    "end": "940830"
  },
  {
    "text": "constraints these user functions are let's say for an example shopping cart it's very constrained as to how you",
    "start": "940830",
    "end": "947880"
  },
  {
    "text": "build it but you can build it in whatever language you want there are certain there's certain markups there's",
    "start": "947880",
    "end": "953730"
  },
  {
    "text": "certain functions that you need to that you need to actually implement to get it to work but once you get that working",
    "start": "953730",
    "end": "960810"
  },
  {
    "text": "you could freely interact with it with G RPC so Cloud State has a naka sidecar",
    "start": "960810",
    "end": "968960"
  },
  {
    "text": "also spread across these pods and in this sidecar it's actually hosting",
    "start": "968960",
    "end": "974670"
  },
  {
    "text": "actors to represent these user functions it's also host hosting your stateless application interaction framework the",
    "start": "974670",
    "end": "982830"
  },
  {
    "text": "things you write to actually call out with G RPC you might want to subscribe to changes on something and then when",
    "start": "982830",
    "end": "989670"
  },
  {
    "text": "you get the change you do something maybe you you pump data back out to a web page using WebSockets or something",
    "start": "989670",
    "end": "996089"
  },
  {
    "text": "like that so the user hits the the sidecar the the sidecar connects via G",
    "start": "996089",
    "end": "1002660"
  },
  {
    "text": "RPC to the actual deployed user functions and and then the resulting",
    "start": "1002660",
    "end": "1010400"
  },
  {
    "text": "data it goes into the datastore it could be read from the data store which is shared across the left on the right sides so the user functions as I",
    "start": "1010400",
    "end": "1018320"
  },
  {
    "text": "mentioned they're spread across these curve in ad pods and so are the ACK aside cart so you're a kkuk lustre is",
    "start": "1018320",
    "end": "1023350"
  },
  {
    "text": "represented on the left it's the same old active cluster we've had for quite a long time only we are coexisting with",
    "start": "1023350",
    "end": "1030170"
  },
  {
    "text": "kubernetes pods here so the HTTP or GRP see if the user wants to do Jeremy see",
    "start": "1030170",
    "end": "1036560"
  },
  {
    "text": "that could do that too comes directly into the cluster as a whole there are located okay term patterns that will",
    "start": "1036560",
    "end": "1043370"
  },
  {
    "text": "actually say hey where is this user function running where is it which pod and that's a we can actually make that",
    "start": "1043370",
    "end": "1049610"
  },
  {
    "text": "sticky so it's very performant that'll be translated to G RPC by your",
    "start": "1049610",
    "end": "1054740"
  },
  {
    "text": "user code that's on the left side it'll interact with the function and then return some data and then in between",
    "start": "1054740",
    "end": "1061460"
  },
  {
    "text": "you're getting typical cluster gossip routing replication rebalancing all this",
    "start": "1061460",
    "end": "1067760"
  },
  {
    "text": "kind of stuff happens in a cluster behind the scenes",
    "start": "1067760",
    "end": "1071799"
  },
  {
    "text": "and of course your data store behind abstracted by kubernetes so when being a",
    "start": "1072909",
    "end": "1081919"
  },
  {
    "start": "1079000",
    "end": "1167000"
  },
  {
    "text": "managed service with cloud state you get there are opportunities to do pay-as-you-go so cloud state is a kubernetes installed",
    "start": "1081919",
    "end": "1089900"
  },
  {
    "text": "so I think it's like three or four lines terminal command lines once you you provision like a Google cloud or or or",
    "start": "1089900",
    "end": "1097880"
  },
  {
    "text": "whatever cloud of your choice it takes something like after I've done it a few times takes like 10 minutes for",
    "start": "1097880",
    "end": "1103340"
  },
  {
    "text": "me to deploy cloud state with my application and so a lot of this stuff",
    "start": "1103340",
    "end": "1108590"
  },
  {
    "text": "you know it's relatively new we haven't fully developed everything that we want everything I'm talking about here it's",
    "start": "1108590",
    "end": "1115279"
  },
  {
    "text": "something that we're rapidly iterating on in and you'll see later on in my last slide we can actually use a little bit",
    "start": "1115279",
    "end": "1120799"
  },
  {
    "text": "help if you're interested but you get on-demand instance creation passivation failover auto scaling up and down you",
    "start": "1120799",
    "end": "1130159"
  },
  {
    "text": "don't to worry about if it's previously I was at Weight Watchers we did the digital transformation and the system",
    "start": "1130159",
    "end": "1136370"
  },
  {
    "text": "before I joined and we went micro services is when bathing-suit season",
    "start": "1136370",
    "end": "1141919"
  },
  {
    "text": "approached their systems went down when the holiday season approached their systems went down somebody would",
    "start": "1141919",
    "end": "1148100"
  },
  {
    "text": "painstakingly set up their diet across all the holidays and then the system",
    "start": "1148100",
    "end": "1153590"
  },
  {
    "text": "wasn't working during the holidays so in the times when Weight Watchers was to be most profitable their systems were",
    "start": "1153590",
    "end": "1159140"
  },
  {
    "text": "failing so this kind of auto scaling is going to prevent things like that what",
    "start": "1159140",
    "end": "1164210"
  },
  {
    "text": "will make home retail Black Friday scenarios and then zero ops I don't know",
    "start": "1164210",
    "end": "1170270"
  },
  {
    "start": "1167000",
    "end": "1226000"
  },
  {
    "text": "about you you know I've had to do ops but I really like to code I like to",
    "start": "1170270",
    "end": "1175399"
  },
  {
    "text": "create my business code I'd like to solve business problems I like to see it working the energy that we spent",
    "start": "1175399",
    "end": "1182779"
  },
  {
    "text": "previously getting these things into the cloud even with kubernetes even with docker was significant required a lot",
    "start": "1182779",
    "end": "1190220"
  },
  {
    "text": "more people than than just the business logic team so zero ops to me is really important I like I like a framework that",
    "start": "1190220",
    "end": "1197240"
  },
  {
    "text": "is going to make this push button where it just takes that heavy lifting off my shoulders",
    "start": "1197240",
    "end": "1202580"
  },
  {
    "text": "so automation of the mess routing delivery state management",
    "start": "1202580",
    "end": "1207850"
  },
  {
    "text": "cluster sharding the colocation of the data in the processing replication",
    "start": "1207850",
    "end": "1213140"
  },
  {
    "text": "consistency and automation of upgrades provisioning deployment canary",
    "start": "1213140",
    "end": "1218480"
  },
  {
    "text": "deployments things like that every single place I go they're different and and it's equally hard so akka cluster",
    "start": "1218480",
    "end": "1228080"
  },
  {
    "start": "1226000",
    "end": "1239000"
  },
  {
    "text": "state management so this is kind of what I have a really good picture at the end of shows what a reactive application",
    "start": "1228080",
    "end": "1233420"
  },
  {
    "text": "looks like but this is a little bit of a hint at it we've got all these akka side cars that form in akka cluster gossiping",
    "start": "1233420",
    "end": "1241940"
  },
  {
    "start": "1239000",
    "end": "1285000"
  },
  {
    "text": "and locating individual singleton entities among them its master list",
    "start": "1241940",
    "end": "1249830"
  },
  {
    "text": "decentralized self-healing akka at its",
    "start": "1249830",
    "end": "1255020"
  },
  {
    "text": "core is actor based actors are resilient because that's reactive every actor is",
    "start": "1255020",
    "end": "1261290"
  },
  {
    "text": "potentially the parent of another actor that it spawns the system has an ultimate parent actor and every actor",
    "start": "1261290",
    "end": "1268010"
  },
  {
    "text": "has what we call a supervisor strategy there's no try-catch there is no like hey I wonder if I'm gonna write some air",
    "start": "1268010",
    "end": "1274400"
  },
  {
    "text": "handling today your failure and success scenarios are first-class in different",
    "start": "1274400",
    "end": "1281450"
  },
  {
    "text": "spots so you're like a cluster state",
    "start": "1281450",
    "end": "1287630"
  },
  {
    "text": "management so we have the akka side cards that represent the akka cluster that aside card along with the kerbin",
    "start": "1287630",
    "end": "1294590"
  },
  {
    "text": "Nettie's pods all with their their gossip protocols self-healing I think I",
    "start": "1294590",
    "end": "1303800"
  },
  {
    "text": "talked about resilience at the core vodka at the actor level but it's also at the cluster level when something",
    "start": "1303800",
    "end": "1309020"
  },
  {
    "text": "fails or a node becomes unhealthy things are moved to healthier nodes new nodes or provisioned as needed then you get",
    "start": "1309020",
    "end": "1316130"
  },
  {
    "text": "that all with cloud state so the user functions are deployed alongside in the",
    "start": "1316130",
    "end": "1321470"
  },
  {
    "text": "same communities pods as the akka sidecars and the states charting your",
    "start": "1321470",
    "end": "1326510"
  },
  {
    "text": "your entities are sharding started according to their key the key is usually arbitrary you want to shard",
    "start": "1326510",
    "end": "1332890"
  },
  {
    "text": "uniformly and you route based upon an entity keys so if I'd like to interact with",
    "start": "1332890",
    "end": "1338870"
  },
  {
    "text": "a user function also called an entity I need to know it's key before I can set",
    "start": "1338870",
    "end": "1345080"
  },
  {
    "text": "it a command or do anything with it so any G RPC call that is associated",
    "start": "1345080",
    "end": "1350090"
  },
  {
    "text": "with any of these entities has to have that key so you you pass in your your",
    "start": "1350090",
    "end": "1357800"
  },
  {
    "text": "key and your command and it's forwarded well possibly",
    "start": "1357800",
    "end": "1362990"
  },
  {
    "text": "forwarded or it's routed to the correct density to handle it and of course we",
    "start": "1362990",
    "end": "1369890"
  },
  {
    "text": "have the collocation of state and processing backed by the event log now your database isn't really a database as",
    "start": "1369890",
    "end": "1375800"
  },
  {
    "text": "you understood it in the past it's an event log so this is one of our prescriptive prescriptions or",
    "start": "1375800",
    "end": "1381880"
  },
  {
    "text": "constraints we are using event sourcing I I know I know almost everyone must",
    "start": "1381880",
    "end": "1388550"
  },
  {
    "text": "have at least heard of that event sourcing if you're not using it in the age of analytics it became really important before we even used it for",
    "start": "1388550",
    "end": "1394430"
  },
  {
    "text": "what we thought we would which is just this immune event log around the domain instead of crud but once you go for",
    "start": "1394430",
    "end": "1401600"
  },
  {
    "text": "events events are a really a friendly way of being able to hydrate state they're there they have a good",
    "start": "1401600",
    "end": "1408290"
  },
  {
    "text": "granularity they are they're ordered they can be represented by snapshots or",
    "start": "1408290",
    "end": "1413720"
  },
  {
    "text": "an optimization if you've got so many events that hydrating would take too long you can start with a snapshot of",
    "start": "1413720",
    "end": "1419810"
  },
  {
    "text": "your current state and then overlay the events over them so that's one of the major constraints I think that makes as possible events and then you get this",
    "start": "1419810",
    "end": "1428540"
  },
  {
    "text": "automatic failover a failover rebalancing rehydration so this is the unhappy path what happens oh man the",
    "start": "1428540",
    "end": "1434240"
  },
  {
    "text": "whole node failed it's unhealthy there were user functions being hosted on that pod what do we do",
    "start": "1434240",
    "end": "1439900"
  },
  {
    "text": "akka already knows how to do this it shifts into a healthy a healthy pod healthy side healthy kubernetes pod",
    "start": "1439900",
    "end": "1448400"
  },
  {
    "text": "it is rehydrated from the event log and/or the snapshot log snapshot store",
    "start": "1448400",
    "end": "1454450"
  },
  {
    "text": "and then you can now return data back to the user so Cloud State uses better",
    "start": "1454450",
    "end": "1460040"
  },
  {
    "text": "models we're reactive you can't create a platform like this unless you're reactive I'm not saying that the",
    "start": "1460040",
    "end": "1466640"
  },
  {
    "text": "reactive semantically is the only way to build systems I'm saying tell me that resilience and elasticity",
    "start": "1466640",
    "end": "1474910"
  },
  {
    "text": "and responsiveness are not a good way to build a system we don't know how we do",
    "start": "1474910",
    "end": "1480160"
  },
  {
    "text": "it otherwise so these are battle tested yet constrained event sourcing we've",
    "start": "1480160",
    "end": "1486250"
  },
  {
    "text": "used it for a long time we knew it was an answer C Rd T's which are a way of getting distributed state in a way",
    "start": "1486250",
    "end": "1493780"
  },
  {
    "text": "that's highly accessible highly available yet coordinates without a central hub they all coordinate together",
    "start": "1493780",
    "end": "1500200"
  },
  {
    "text": "there's there's there's a lot of logic that was already dictated I think was a",
    "start": "1500200",
    "end": "1505780"
  },
  {
    "text": "2011 paper by a guy named something Shapiro that dictated what are the types of crv T's we just implemented the types",
    "start": "1505780",
    "end": "1513120"
  },
  {
    "text": "Devils in the details and then see care arrests soon I'm pushing really hard for getting this as soon as possible if",
    "start": "1513120",
    "end": "1519970"
  },
  {
    "text": "you're building an application and you're only using events and Ciardi T's it's a little bit imbalanced you the",
    "start": "1519970",
    "end": "1527350"
  },
  {
    "text": "read sides so important just as important as your domain is the projections that domain let's just so",
    "start": "1527350",
    "end": "1533050"
  },
  {
    "text": "again command query responsibility segregation it's simply separating your read concerns from your write concerns",
    "start": "1533050",
    "end": "1539350"
  },
  {
    "text": "of your system so your command side is covered by the event sourcing a command is sent into the domain hey do this",
    "start": "1539350",
    "end": "1546690"
  },
  {
    "text": "assign an internet device to a room and you determine the logic in the and the",
    "start": "1546690",
    "end": "1553179"
  },
  {
    "text": "user function says can I do it should I do it does it events it out and says room assigned returns the data back but the",
    "start": "1553179",
    "end": "1560679"
  },
  {
    "text": "actual consuming of that information happens so state I'd like to say state",
    "start": "1560679",
    "end": "1566020"
  },
  {
    "text": "is in the eye of the beholder so the state that's contained inside your user",
    "start": "1566020",
    "end": "1571720"
  },
  {
    "text": "function which is really your domain door and design entity that's not necessarily the state everybody's",
    "start": "1571720",
    "end": "1577780"
  },
  {
    "text": "interested in different different use uses or use cases have different needs",
    "start": "1577780",
    "end": "1582820"
  },
  {
    "text": "for state so you might have a really clean example is order to cache you've got customers orders inventory",
    "start": "1582820",
    "end": "1589179"
  },
  {
    "text": "receivables and you might have a dashboard that management looks at that looks across all these things if if",
    "start": "1589179",
    "end": "1595480"
  },
  {
    "text": "you're just using one micro service that contains orders you're not going to get the complete picture if you put the onus",
    "start": "1595480",
    "end": "1601420"
  },
  {
    "text": "on the order service to give you back this data to return this data now you're actually you're you're tying the system's",
    "start": "1601420",
    "end": "1609070"
  },
  {
    "text": "together you're coupling the systems I've seen it done it's really painful if you separate them completely you could",
    "start": "1609070",
    "end": "1614409"
  },
  {
    "text": "use CR C QRS and there are semantics around consuming events and a",
    "start": "1614409",
    "end": "1619690"
  },
  {
    "text": "synchronously updating read projections we call them so that's coming soon with with my weight behind it so event source",
    "start": "1619690",
    "end": "1627279"
  },
  {
    "start": "1625000",
    "end": "1689000"
  },
  {
    "text": "entities this is the happy path this is how they usually behave so you have your user that sends a command into the",
    "start": "1627279",
    "end": "1633759"
  },
  {
    "text": "domain it's bounded by mailbox every akha actor is bounded by mailbox that's",
    "start": "1633759",
    "end": "1639309"
  },
  {
    "text": "how you get your concurrency no concurrency concerns because you're only ever looking at one thing at a time",
    "start": "1639309",
    "end": "1645519"
  },
  {
    "text": "updating your state fully and then you're ready for the next thing the command is now thought about computed on",
    "start": "1645519",
    "end": "1652570"
  },
  {
    "text": "by the entity and then an event goes out to the event log which is conditionally",
    "start": "1652570",
    "end": "1658239"
  },
  {
    "text": "sent to an event bus and shared with to the ether you don't need to know who",
    "start": "1658239",
    "end": "1663369"
  },
  {
    "text": "your consumers are in most cases you shouldn't know you're completely decoupled this allows systems to",
    "start": "1663369",
    "end": "1669159"
  },
  {
    "text": "interact with each other via events not some construct that we as developers invented to try to communicate across",
    "start": "1669159",
    "end": "1675879"
  },
  {
    "text": "services events exist whether you're harnessing them or not they exist whether we're computing or not events",
    "start": "1675879",
    "end": "1681460"
  },
  {
    "text": "have always been there it's fully okay to use them across services that's your happy path unhappy path we've got a",
    "start": "1681460",
    "end": "1688599"
  },
  {
    "text": "problem how do we recover it's actually pretty simple you have your event log you reply",
    "start": "1688599",
    "end": "1695799"
  },
  {
    "start": "1689000",
    "end": "1703000"
  },
  {
    "text": "your events you bring up your current state your rehydrated ready for business command comes in you do your thing so",
    "start": "1695799",
    "end": "1704139"
  },
  {
    "start": "1703000",
    "end": "1802000"
  },
  {
    "text": "the benefits of event sourcing it's a single source of truth it's not somebody's idea of a source of truth",
    "start": "1704139",
    "end": "1709629"
  },
  {
    "text": "it's not a duplicated many ideas for a source of truth it's the source of truth",
    "start": "1709629",
    "end": "1716320"
  },
  {
    "text": "for certain domain it's got durable in-memory state that it allows for",
    "start": "1716320",
    "end": "1722139"
  },
  {
    "text": "memory image so your state is built up from these events in the state that's built up in one place from the events",
    "start": "1722139",
    "end": "1728469"
  },
  {
    "text": "could be look very different from the state built up another place an example I use is flight so let's just say we have an airliner you've got ground",
    "start": "1728469",
    "end": "1735639"
  },
  {
    "text": "control you've got flight control flight-control cares about great many things different from ground control",
    "start": "1735639",
    "end": "1741010"
  },
  {
    "text": "that is just interested in a winged vehicle on the ground let's get everything out of the way whereas you",
    "start": "1741010",
    "end": "1746740"
  },
  {
    "text": "need to know about weight heading altitude all kinds of other stuff in flight there's still the same flight though avoids object-relational mismatch",
    "start": "1746740",
    "end": "1755200"
  },
  {
    "text": "so this really is in tandem with ck RS you get your command side in your read",
    "start": "1755200",
    "end": "1761530"
  },
  {
    "text": "side fully fully separate so you won't send a command to me on customer and expect me to send you back things I",
    "start": "1761530",
    "end": "1768100"
  },
  {
    "text": "don't even have you get to subscribe to these state changes if you're interested",
    "start": "1768100",
    "end": "1775090"
  },
  {
    "text": "in the state in my in my in my entity in",
    "start": "1775090",
    "end": "1780340"
  },
  {
    "text": "my user function you can have the state great but you can also subscribe to the state changes via events because events",
    "start": "1780340",
    "end": "1785890"
  },
  {
    "text": "in to hydrate events out so your state changes are offer also represented via those events single writer print",
    "start": "1785890",
    "end": "1793390"
  },
  {
    "text": "principal you could use databases or optimizes for optimized for writes you can use networking that optimizes for",
    "start": "1793390",
    "end": "1800080"
  },
  {
    "text": "writes has great mechanical sympathy so event sourcing deployment you have your",
    "start": "1800080",
    "end": "1806080"
  },
  {
    "start": "1802000",
    "end": "1837000"
  },
  {
    "text": "user function entity you get your vet login as synchronously you get your",
    "start": "1806080",
    "end": "1811420"
  },
  {
    "text": "command in which is the user interaction and the reply out and then the event goes out to the event store so usually",
    "start": "1811420",
    "end": "1817750"
  },
  {
    "text": "when you do a state mutation the event happens first as a side effect you update your state and that's because if",
    "start": "1817750",
    "end": "1825010"
  },
  {
    "text": "you have a failure and you haven't fully written out at your event and you've updated your state that's a problem so",
    "start": "1825010",
    "end": "1831070"
  },
  {
    "text": "we really want to make sure that's a state that state is really the record of something happening you make sure that",
    "start": "1831070",
    "end": "1837100"
  },
  {
    "start": "1837000",
    "end": "1953000"
  },
  {
    "text": "happens first so see our DTS very quickly they provide strong eventual",
    "start": "1837100",
    "end": "1843190"
  },
  {
    "text": "consistency there are these methodologies in place that say we're a",
    "start": "1843190",
    "end": "1848260"
  },
  {
    "text": "reasonable surety that this is the answer however because we're talking eventual consistency you could be",
    "start": "1848260",
    "end": "1854920"
  },
  {
    "text": "looking at something over here that hasn't quite reflected what's happened over there yet this is a trade-off that can be tuned but it must be understood",
    "start": "1854920",
    "end": "1862000"
  },
  {
    "text": "we don't ever want to go with strong consistency because that'll break our scalability if you want to look up",
    "start": "1862000",
    "end": "1868330"
  },
  {
    "text": "something interesting look at the Universal scalability model by new Gunther it actually proves that it's",
    "start": "1868330",
    "end": "1875020"
  },
  {
    "text": "deterministic by design the data types contain their own resolution logic you",
    "start": "1875020",
    "end": "1880690"
  },
  {
    "text": "could have ones that are additive you could have you can have ones that are keyed state key value store types that",
    "start": "1880690",
    "end": "1889030"
  },
  {
    "text": "agree on what is the current state of a given thing and they have an impotent C built-in replicated according to the",
    "start": "1889030",
    "end": "1896680"
  },
  {
    "text": "needs of the cluster and the usage so you've got these I really think they're",
    "start": "1896680",
    "end": "1902110"
  },
  {
    "text": "a read operation I'd probably go to and see a Cacique RS reprojection first but they see our TTS are really optimized",
    "start": "1902110",
    "end": "1909040"
  },
  {
    "text": "for low latency so these are the some of the types that you get from CRT T's",
    "start": "1909040",
    "end": "1915400"
  },
  {
    "text": "counters register sets maps graphs and",
    "start": "1915400",
    "end": "1920800"
  },
  {
    "text": "there are associative it doesn't matter how they're grouped their communicative communitive sorry order insensitive",
    "start": "1920800",
    "end": "1928270"
  },
  {
    "text": "order doesn't matter doesn't matter if something came from here first and then came over there your end results the same idempotent so if you get state",
    "start": "1928270",
    "end": "1938050"
  },
  {
    "text": "change that's backed the underlying detail I bet uses uses an event ID that",
    "start": "1938050",
    "end": "1944380"
  },
  {
    "text": "has some time component in it when it updates itself it'll know that anyone that comes later that has an old ID is",
    "start": "1944380",
    "end": "1951760"
  },
  {
    "text": "not valid so TR d T's you have your user",
    "start": "1951760",
    "end": "1957310"
  },
  {
    "start": "1953000",
    "end": "2022000"
  },
  {
    "text": "function entity so in these user function entities I'll call them in eighties for now on they are backed by",
    "start": "1957310",
    "end": "1963010"
  },
  {
    "text": "either events you can have an event source entity or C R DT entity right now C R DT entity is fully non-durable only",
    "start": "1963010",
    "end": "1970090"
  },
  {
    "text": "in memory that won't be for much longer event source entities of course are backed by the event log in the database",
    "start": "1970090",
    "end": "1976050"
  },
  {
    "text": "so you get your state and Delta's in this happens among the CR DTS and you",
    "start": "1976050",
    "end": "1982480"
  },
  {
    "text": "get your messages in coming in from users interacting with the CR DT both of these things and you take the current",
    "start": "1982480",
    "end": "1988630"
  },
  {
    "text": "state inside that entity then you get your message out your response to the users you might have updated your status",
    "start": "1988630",
    "end": "1994480"
  },
  {
    "text": "as a result and the deltas in the state's go back out so the CR duties can",
    "start": "1994480",
    "end": "1999850"
  },
  {
    "text": "now coordinator monks each other so using key value for crud you get your",
    "start": "1999850",
    "end": "2008780"
  },
  {
    "text": "snapshot in by entity key you get your message in to retrieve that snapshot or change that snapshot and now you get",
    "start": "2008780",
    "end": "2015200"
  },
  {
    "text": "your your response back and now you've got your new snapshot which is now being distributed and agreed upon with all",
    "start": "2015200",
    "end": "2020810"
  },
  {
    "text": "these CRD T's so getting towards the end of the talk I'm going to look at a little bit of code after so I just want",
    "start": "2020810",
    "end": "2028520"
  },
  {
    "start": "2022000",
    "end": "2063000"
  },
  {
    "text": "to show you what a three-tier architecture looks like we're well familiar it's really noisy and it highly exercises the entire framework the",
    "start": "2028520",
    "end": "2035840"
  },
  {
    "text": "entire cloud infrastructure you have the application tier really isn't of that much value because you've got computing",
    "start": "2035840",
    "end": "2041960"
  },
  {
    "text": "logic but you've got all of your state over to the right side of the database you're constantly hitting that if",
    "start": "2041960",
    "end": "2047030"
  },
  {
    "text": "there's a failure anywhere you're gonna have problems also it's just it's just a",
    "start": "2047030",
    "end": "2052040"
  },
  {
    "text": "lot of complexity going on there in addition there's probably a lot of chatter between those nodes in the middle systems services calling other",
    "start": "2052040",
    "end": "2059090"
  },
  {
    "text": "services things like that that's to me as functionally blocking behavior when",
    "start": "2059090",
    "end": "2064190"
  },
  {
    "start": "2063000",
    "end": "2081000"
  },
  {
    "text": "you look at the reactive architecture you're seeing that the database is really a side effect of doing things it's not needed in real time so to me as",
    "start": "2064190",
    "end": "2070669"
  },
  {
    "text": "a user doing something with the system I'm not causing you to touch the database everything's in memory things",
    "start": "2070669",
    "end": "2077240"
  },
  {
    "text": "were all happening super super responsive and resilient so just a quick",
    "start": "2077240",
    "end": "2083360"
  },
  {
    "start": "2081000",
    "end": "2212000"
  },
  {
    "text": "CEO DT entity example this is one that was developed by Victor clang who's the",
    "start": "2083360",
    "end": "2089480"
  },
  {
    "text": "head architect on the cloud State team he's also called The Legend of clang works for like then this is just a",
    "start": "2089480",
    "end": "2097790"
  },
  {
    "text": "simple a simple chat app and this is a present CR DT that says simply is the",
    "start": "2097790",
    "end": "2103850"
  },
  {
    "text": "user online or not and this is an agreed upon value among all the nodes is is the",
    "start": "2103850",
    "end": "2108980"
  },
  {
    "text": "user online so you create this entity this is Java and you mark it you",
    "start": "2108980",
    "end": "2116240"
  },
  {
    "text": "annotated as CR DT entity and it's a vote type entity so you give it a vote parameter and then all of these CR DDT's",
    "start": "2116240",
    "end": "2124850"
  },
  {
    "text": "will have votes that interact with each other using that vote variable they're all going to determine whether or not",
    "start": "2124850",
    "end": "2130760"
  },
  {
    "text": "the user is online or not and so you instantiate your your CR DT",
    "start": "2130760",
    "end": "2136579"
  },
  {
    "text": "just saying hey new cloud state you register it and you start it and here's",
    "start": "2136579",
    "end": "2142280"
  },
  {
    "text": "our command handler so for this command that's annoying so the command handler for Connect so there's a G RPC interface",
    "start": "2142280",
    "end": "2148820"
  },
  {
    "text": "that is in the so this is in JavaScript if you look at the samples on cloud state this would be in Java JavaScript",
    "start": "2148820",
    "end": "2155420"
  },
  {
    "text": "there's a G RPC connect it's a streamed G RPC method and what",
    "start": "2155420",
    "end": "2161240"
  },
  {
    "text": "that does is it's just you connecting from from a web page and then the vote",
    "start": "2161240",
    "end": "2167180"
  },
  {
    "text": "is set to true here the users online as per this instance of the CR DT and then what happens is you now subscribe to",
    "start": "2167180",
    "end": "2174320"
  },
  {
    "text": "cancelled so when the stream is broken because the UI closes down or disconnects or whatever you now can vote",
    "start": "2174320",
    "end": "2180920"
  },
  {
    "text": "false on your own behalf and as long as the user is not online somewhere else and hasn't reconnected in the interim",
    "start": "2180920",
    "end": "2187099"
  },
  {
    "text": "the users no longer online and you could do a read from this entity and you can see that nobody's online sets of CR DT",
    "start": "2187099",
    "end": "2194210"
  },
  {
    "text": "and then you could also subscribe to online status so this is a subscription example you want to monitor it from a",
    "start": "2194210",
    "end": "2201079"
  },
  {
    "text": "JavaScript application you can register a callback here and on change of whether",
    "start": "2201079",
    "end": "2207890"
  },
  {
    "text": "or not you're online or not you could do something on the front end so this is",
    "start": "2207890",
    "end": "2214339"
  },
  {
    "start": "2212000",
    "end": "2232000"
  },
  {
    "text": "one I wrote which is an event source I try to keep it real simple I got the idea because I have arrows in my home I",
    "start": "2214339",
    "end": "2220040"
  },
  {
    "text": "love them and one of the things you can do with arrows is you can assign them to rooms and I start thinking about how",
    "start": "2220040",
    "end": "2225410"
  },
  {
    "text": "would I design a thing like that with Internet devices that I can buy and assign two rooms so that's my simple",
    "start": "2225410",
    "end": "2231349"
  },
  {
    "text": "example see like it's that so before I move on from the presentation I'd like to say join us please try this out we",
    "start": "2231349",
    "end": "2237290"
  },
  {
    "start": "2232000",
    "end": "2624000"
  },
  {
    "text": "could also use help on the open source side you know check it out reach out to somebody if we're interested in contributing ok see I have IntelliJ open",
    "start": "2237290",
    "end": "2247390"
  },
  {
    "text": "so this is a spring application it's spring first it's mostly spring spring Java it's supposed to be comfortable",
    "start": "2247390",
    "end": "2254300"
  },
  {
    "text": "supposed to be familiar for people that are doing spring if it was go Lang or JavaScript to be equally familiar for",
    "start": "2254300",
    "end": "2260089"
  },
  {
    "text": "them in their languages is this big ok",
    "start": "2260089",
    "end": "2265190"
  },
  {
    "text": "so it's like typical palm file from maven you'll see it's everything's very spring-like but then",
    "start": "2265190",
    "end": "2272300"
  },
  {
    "text": "you add your there's just an additional dependency and a couple of plugins for cloud state but it's very very spring if",
    "start": "2272300",
    "end": "2279170"
  },
  {
    "text": "I look into the source code I'd like to",
    "start": "2279170",
    "end": "2286640"
  },
  {
    "text": "show you the entity first domain so this",
    "start": "2286640",
    "end": "2293300"
  },
  {
    "text": "is my device entity I've modeled this looks a little small this is my device",
    "start": "2293300",
    "end": "2300620"
  },
  {
    "text": "that ID so this is an Internet router as part of a service a router mesh that you",
    "start": "2300620",
    "end": "2305900"
  },
  {
    "text": "could purchase an assign to a room very simple stuff it's got a device ID which is unique in the system you can't have",
    "start": "2305900",
    "end": "2312770"
  },
  {
    "text": "to these IOT devices that are the same ID that also happens to be the entity ID",
    "start": "2312770",
    "end": "2319220"
  },
  {
    "text": "I like purity so I don't really want to use entity ID as my device ID I liked them too actually they'll end up being",
    "start": "2319220",
    "end": "2324920"
  },
  {
    "text": "the same but I want them to be separate and and the user that the customer could",
    "start": "2324920",
    "end": "2330260"
  },
  {
    "text": "activate it and the customer can assign a room I would make this an option but",
    "start": "2330260",
    "end": "2339590"
  },
  {
    "text": "it's not really a user functional option this is just because this is really uninitialized in the beginning the user",
    "start": "2339590",
    "end": "2346070"
  },
  {
    "text": "will never see it as a blank string but possibly so the activate device is the",
    "start": "2346070",
    "end": "2353840"
  },
  {
    "text": "first thing you can do I buy the device I go to the store I got a Best Buy or wherever I buy one of these things and I",
    "start": "2353840",
    "end": "2359360"
  },
  {
    "text": "get on my phone or whatever and I activate the device so what I'm doing here is I'm actually saying hey if it if",
    "start": "2359360",
    "end": "2368360"
  },
  {
    "text": "I'm already activated because when I've been instantiated or hydrated as this entity it was done by a key if this key",
    "start": "2368360",
    "end": "2375140"
  },
  {
    "text": "already existed was activated I would fail it right away you can't activate the same device twice and then what I",
    "start": "2375140",
    "end": "2380990"
  },
  {
    "text": "would do is I would admit the the event and so what I'm doing is in my domain I",
    "start": "2380990",
    "end": "2386120"
  },
  {
    "text": "define the event in G RPC so it's easy to share I'll show you that after and then I'm just using a Builder pattern",
    "start": "2386120",
    "end": "2391940"
  },
  {
    "text": "and Java to actually instantiate this event and a minute so when I say emit",
    "start": "2391940",
    "end": "2397790"
  },
  {
    "text": "the framework in cloud state is actually going to save it to the event log it's going to pass",
    "start": "2397790",
    "end": "2403640"
  },
  {
    "text": "we put it into a bus to share it with others and then it's going to do another callback for me so this is just a",
    "start": "2403640",
    "end": "2409400"
  },
  {
    "text": "command handle or how to activate I also need to implement event handlers to now update my state so I I said earlier on I",
    "start": "2409400",
    "end": "2415700"
  },
  {
    "text": "have to side affect my state because if I update my stay at the same time and the event fails that's a problem now",
    "start": "2415700",
    "end": "2421880"
  },
  {
    "text": "I've got I've got a problem in memory I think I'm here but I'm really not there because I'm not backed by the events and",
    "start": "2421880",
    "end": "2427910"
  },
  {
    "text": "when I go out of memory or the system's restarted I'll lose it so here's one",
    "start": "2427910",
    "end": "2433190"
  },
  {
    "text": "I'll set my state so these are local variables in the entity private I'll say hey now I'm activated I've got a device",
    "start": "2433190",
    "end": "2440330"
  },
  {
    "text": "ID and I've got a custom ID because they were parameters when I when I got the assign the activate device command all",
    "start": "2440330",
    "end": "2448310"
  },
  {
    "text": "this is on github by the way I'll show you that slide one more time with with the github address",
    "start": "2448310",
    "end": "2453670"
  },
  {
    "text": "and then a sign room is very similar you have a command handler with a sign room",
    "start": "2453670",
    "end": "2458810"
  },
  {
    "text": "and this maps to the G RPC function which I'll show you and the command assigned room has the parameters that",
    "start": "2458810",
    "end": "2463970"
  },
  {
    "text": "are necessary the device ID in the room that you'd like to assign it to and you now omit that event and your callback",
    "start": "2463970",
    "end": "2470990"
  },
  {
    "text": "with that event handler now room assigned and you're setting the room equal to the room assigned in the event",
    "start": "2470990",
    "end": "2478300"
  },
  {
    "text": "so that's as simple as that for an entity I'll show you the G RPC so this",
    "start": "2478300",
    "end": "2489770"
  },
  {
    "text": "is the service so in share PC this I would define the service I've got the",
    "start": "2489770",
    "end": "2496370"
  },
  {
    "text": "activate device command I've got the assigned room command and in my service I've got on creating a stub here which",
    "start": "2496370",
    "end": "2504260"
  },
  {
    "text": "says activate and in the activation function I expect me provide an activate device",
    "start": "2504260",
    "end": "2510950"
  },
  {
    "text": "command which will have the device ID and the customer ID if you haven't seen",
    "start": "2510950",
    "end": "2515990"
  },
  {
    "text": "GRP C it looks a little funky at first where you see device ID equals one and",
    "start": "2515990",
    "end": "2521210"
  },
  {
    "text": "customer customer ID equals two you're really that's positional what",
    "start": "2521210",
    "end": "2527090"
  },
  {
    "text": "you're doing is you're you're saying the data type first and then you're saying the ordering over here that was kind of",
    "start": "2527090",
    "end": "2533480"
  },
  {
    "text": "weird to me when I first saw it the device ID your acts dictating here that that is the entity",
    "start": "2533480",
    "end": "2538710"
  },
  {
    "text": "key if it was customer ID I would have put it there but the customer ID is not the key device service can now sign the",
    "start": "2538710",
    "end": "2545940"
  },
  {
    "text": "room or activate that that's it for the gr PC part I also said that I was using",
    "start": "2545940",
    "end": "2552029"
  },
  {
    "text": "the events I modeled them also in Inchie RPC protocol",
    "start": "2552029",
    "end": "2558200"
  },
  {
    "text": "my device activated it's got a device ID and a customer ID in room assigned so the events in event sourcing you want to",
    "start": "2558200",
    "end": "2565200"
  },
  {
    "text": "have all the information that's applicable to that event you don't want any other stuff in there and then just",
    "start": "2565200",
    "end": "2571589"
  },
  {
    "text": "very quickly and finally I'll show you that it is truly in a spring application here's my spring application itself just",
    "start": "2571589",
    "end": "2579869"
  },
  {
    "text": "annotated a supreme Buddha application in start out I do a new a new Cloud State I register my event source entity",
    "start": "2579869",
    "end": "2585960"
  },
  {
    "text": "and I started and then I have a typical spring MVC controller and and here it's",
    "start": "2585960",
    "end": "2592829"
  },
  {
    "text": "just spring stuff and I'm saying register device and in a sign room and it does a G RPC call out using the stub",
    "start": "2592829",
    "end": "2602509"
  },
  {
    "text": "so these stubs are generated at compile time for you based upon the the G RPC",
    "start": "2602509",
    "end": "2607999"
  },
  {
    "text": "interface that you've that you've written in my previous screens I showed you so this thing was generated just",
    "start": "2607999",
    "end": "2614519"
  },
  {
    "text": "call them and you you call services with them okay so that's the code I'm trying to rush for you guys let me just show",
    "start": "2614519",
    "end": "2620219"
  },
  {
    "text": "you that slide one more time so this is",
    "start": "2620219",
    "end": "2626249"
  },
  {
    "start": "2624000",
    "end": "2725000"
  },
  {
    "text": "it github calm Sean walls Sean - Walsh Cloud State spring keep an eye on it",
    "start": "2626249",
    "end": "2631650"
  },
  {
    "text": "because I'm going to be integrating and doing other things too other languages are their ideas adding read capabilities",
    "start": "2631650",
    "end": "2637349"
  },
  {
    "text": "and things like that thank you for your time thank you for staying little bit over really appreciate it",
    "start": "2637349",
    "end": "2643369"
  },
  {
    "text": "we have time for a few questions all right",
    "start": "2646410",
    "end": "2653339"
  },
  {
    "text": "thanks for the talk I'm currently learning alcohol and even as a beginner",
    "start": "2661240",
    "end": "2666310"
  },
  {
    "text": "I kind of see lots of overlap between our Chi and our cap resistance and and the pattern you presented so could you",
    "start": "2666310",
    "end": "2672670"
  },
  {
    "text": "clarify the the future roadmap of a chi is it phased out or are they planned in",
    "start": "2672670",
    "end": "2679570"
  },
  {
    "text": "different sectors or their so this is cloud state is meant for the masses and",
    "start": "2679570",
    "end": "2685650"
  },
  {
    "text": "many people are just gonna continue to use a cup because you're going to get ultimate flexibility in akha we're gonna",
    "start": "2685650",
    "end": "2691390"
  },
  {
    "text": "create abstractions in cloud state for the things that are most common which is right now we have another framework or",
    "start": "2691390",
    "end": "2696970"
  },
  {
    "text": "you're familiar with log um Swedish word for not too bit just right not too big not too small well log M is the same thing it's an",
    "start": "2696970",
    "end": "2703900"
  },
  {
    "text": "opinionated framework using underpinnings to do a certain kind of thing cloud states the same thing a cos",
    "start": "2703900",
    "end": "2709120"
  },
  {
    "text": "never going anywhere if it wasn't an active in cloud state that that's our",
    "start": "2709120",
    "end": "2714310"
  },
  {
    "text": "philosophy so if I go and I'm building a system especially right now depending on",
    "start": "2714310",
    "end": "2719800"
  },
  {
    "text": "the developers I have on hand I may use a car I may use cloud state",
    "start": "2719800",
    "end": "2724710"
  }
]