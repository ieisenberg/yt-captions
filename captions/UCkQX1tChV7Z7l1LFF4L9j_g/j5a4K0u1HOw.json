[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "[Music]",
    "start": "3360",
    "end": "6550"
  },
  {
    "text": "hello welcome to the functional evolution of object-oriented programming i'm james ward a developer advocate on",
    "start": "9760",
    "end": "16240"
  },
  {
    "text": "google cloud hi i'm josh sturett i'm a staff engineer at google cloud let's talk about the cycle of learnings",
    "start": "16240",
    "end": "24960"
  },
  {
    "text": "so when we uh are using some paradigm let's say object runner programming or whatever",
    "start": "24960",
    "end": "31119"
  },
  {
    "text": "programming paradigm you want to pick oftentimes we'll find some limitations in that paradigm",
    "start": "31119",
    "end": "36800"
  },
  {
    "text": "for example i used to work with java ee and found some limitations with doing",
    "start": "36800",
    "end": "43040"
  },
  {
    "text": "things in the java ee ejb way josh what's the limitation that you",
    "start": "43040",
    "end": "49120"
  },
  {
    "text": "found with java e well it was actually quite hard to test the objects were",
    "start": "49120",
    "end": "54800"
  },
  {
    "text": "pretty heavyweight and had a lot of stuff associated with them so it was really hard to get a good isolated test",
    "start": "54800",
    "end": "60239"
  },
  {
    "text": "on anything so then what we did to deal with those kinds of limitations was to develop some",
    "start": "60239",
    "end": "66080"
  },
  {
    "text": "patterns and for example in this space we started using xml dependency injection and just",
    "start": "66080",
    "end": "72320"
  },
  {
    "text": "pojos instead of the things like ejbs where we had to extend interfaces and that sort",
    "start": "72320",
    "end": "77439"
  },
  {
    "text": "of thing and so that was great that we had some patterns to help us deal with this",
    "start": "77439",
    "end": "82560"
  },
  {
    "text": "but what is happening in programming what continues to happen is that when we develop these patterns",
    "start": "82560",
    "end": "88799"
  },
  {
    "text": "oftentimes these patterns will percolate into the underlying programming languages and frameworks",
    "start": "88799",
    "end": "94000"
  },
  {
    "text": "so for example with following on with xml dependency injection in that pattern was we developed a new pattern for doing",
    "start": "94000",
    "end": "100880"
  },
  {
    "text": "this with annotations and so that allowed us to evolve our programming language and our frameworks",
    "start": "100880",
    "end": "107520"
  },
  {
    "text": "to deal with some of those original limitations so let's dive into some of these ideas a little bit further",
    "start": "107520",
    "end": "113759"
  },
  {
    "start": "110000",
    "end": "220000"
  },
  {
    "text": "let's start first with an example where i'm going to call a function and josh we're going to play a little",
    "start": "113759",
    "end": "119200"
  },
  {
    "text": "game so i've got a function here called add 1 and you'll see i pass a integer here of",
    "start": "119200",
    "end": "125040"
  },
  {
    "text": "2 and get an integer back so let's run this thing and let's see what what happens here when i run this and",
    "start": "125040",
    "end": "131520"
  },
  {
    "text": "i'm going to have you guess what actually happens okay i've got a function it takes a parameter of 2. what do you",
    "start": "131520",
    "end": "138000"
  },
  {
    "text": "think the output's going to be here two plus one which is three let's try it",
    "start": "138000",
    "end": "146560"
  },
  {
    "text": "three you are correct okay now if we call that same function same inputs again what do you think is",
    "start": "146560",
    "end": "153680"
  },
  {
    "text": "going to happen this time well i mean it should be the same thing wrong it is four and what about now what",
    "start": "153680",
    "end": "162080"
  },
  {
    "text": "if i'd call it a third time what do you think it's gonna be uh i mean it should be three",
    "start": "162080",
    "end": "170000"
  },
  {
    "text": "but in this case i'm gonna guess it's four wrong it is not even an integer it is null oh",
    "start": "170000",
    "end": "176879"
  },
  {
    "text": "man okay and now one last chance what do you think it's gonna be this time uh it's gonna be null plus one which i",
    "start": "176879",
    "end": "184159"
  },
  {
    "text": "think is one actually it is an illegal state",
    "start": "184159",
    "end": "189440"
  },
  {
    "text": "exception oh man which is not even a value not even a return value on that one",
    "start": "189440",
    "end": "195120"
  },
  {
    "text": "okay so uh you let's go look at add1 to see what was actually happening",
    "start": "195120",
    "end": "201200"
  },
  {
    "text": "we have a function that's taking an integer but you'll see i've got this global mutable state here",
    "start": "201200",
    "end": "206720"
  },
  {
    "text": "which this function is mutating and so that's how we were getting different",
    "start": "206720",
    "end": "211760"
  },
  {
    "text": "behavior on each call to that thing okay so we're going to talk about some",
    "start": "211760",
    "end": "218080"
  },
  {
    "text": "ways to do this differently in a minute now let's look at a another example where",
    "start": "218080",
    "end": "225440"
  },
  {
    "start": "220000",
    "end": "260000"
  },
  {
    "text": "nothing nothing hidden underneath the covers here i've got my add one function and calling",
    "start": "225440",
    "end": "231920"
  },
  {
    "text": "it okay so let's play our game one more time and wait can you scroll down i just want",
    "start": "231920",
    "end": "237040"
  },
  {
    "text": "to make sure there's no funny business happening yep no funny business down there no imports yeah okay so i'm i'm",
    "start": "237040",
    "end": "244319"
  },
  {
    "text": "passing four to that add one what's it gonna return it should return four plus one which is five",
    "start": "244319",
    "end": "249680"
  },
  {
    "text": "yeah although we try again what's it gonna return five yay",
    "start": "249680",
    "end": "257680"
  },
  {
    "text": "it works okay all right so that's our example of referential transparency and pure",
    "start": "257680",
    "end": "264880"
  },
  {
    "text": "functions tell us a little bit more about those josh yeah so the idea here is you want the ability as a programmer",
    "start": "264880",
    "end": "272720"
  },
  {
    "text": "to look at a method call and be able to kind of mentally replace it with its value",
    "start": "272720",
    "end": "278000"
  },
  {
    "text": "everywhere you see it the exact same method call with the exact same value because it really helps you understand",
    "start": "278000",
    "end": "283040"
  },
  {
    "text": "what the heck is going on in your code and it really avoids some of those magical kind of confusion moments of",
    "start": "283040",
    "end": "289040"
  },
  {
    "text": "oh my gosh i didn't realize that i was bite code rewriting some information for logging over here",
    "start": "289040",
    "end": "295120"
  },
  {
    "text": "and i threw an exception and that totally crashed my program but i don't know when i look at this method",
    "start": "295120",
    "end": "300400"
  },
  {
    "text": "to look over there and see that um or when i'm using global immutable state i have no idea what the state of",
    "start": "300400",
    "end": "306000"
  },
  {
    "text": "the global mutable state is when i look through the method so debugging just becomes that much harder referential transparency as much",
    "start": "306000",
    "end": "312560"
  },
  {
    "text": "as you can preserve it can really make it easy as four plus one in terms of debugging what",
    "start": "312560",
    "end": "319520"
  },
  {
    "text": "happens yep yeah so pure functions like this add one function here",
    "start": "319520",
    "end": "324880"
  },
  {
    "start": "320000",
    "end": "571000"
  },
  {
    "text": "what they do is they they will always map a given input to an output so",
    "start": "324880",
    "end": "331120"
  },
  {
    "text": "what that means is that every time i call this function it's going to if i call it with four it's gonna",
    "start": "331120",
    "end": "337039"
  },
  {
    "text": "produce the same output every single time for that given input and so this makes it so we can",
    "start": "337039",
    "end": "344080"
  },
  {
    "text": "understand our programs much more easily we don't get into weird states where it's like how did i get into this state",
    "start": "344080",
    "end": "350560"
  },
  {
    "text": "is just it makes it a lot easier to deal with our programs in this way",
    "start": "350560",
    "end": "356880"
  },
  {
    "text": "so this is an important concept in functional programming and one that is in that cycle of",
    "start": "356880",
    "end": "364000"
  },
  {
    "text": "learnings it is one that is propagating much deeper into our object oriented programming and so",
    "start": "364000",
    "end": "370720"
  },
  {
    "text": "that we can have programs that are easier to grok easier to debug easier to understand",
    "start": "370720",
    "end": "377520"
  },
  {
    "text": "and don't get into weird states that we don't understand how so this is our first set of concepts",
    "start": "377520",
    "end": "384800"
  },
  {
    "text": "immutability pure functions and referential transparency this is really the evolution of the",
    "start": "384800",
    "end": "392400"
  },
  {
    "text": "prefer immutable objects from effective java which when was that written 2001",
    "start": "392400",
    "end": "399120"
  },
  {
    "text": "oh my god almost 20 years ago yeah uh i don't want to think about that but",
    "start": "399120",
    "end": "405120"
  },
  {
    "text": "let's let's move on let's move on to the next one so james i was thinking",
    "start": "405120",
    "end": "410800"
  },
  {
    "text": "we might start uh talking about the hardest problem in object going in programming uh how to construct an object you'd",
    "start": "410800",
    "end": "418479"
  },
  {
    "text": "think that that would be easy but let's go it let's go there all right uh so here we start with a vehicle class",
    "start": "418479",
    "end": "425440"
  },
  {
    "text": "that we want to build and our vehicle class has a lot of parameters here right like i'm not a vehicle guy so",
    "start": "425440",
    "end": "432319"
  },
  {
    "text": "james you might need to back me up on why some of these things are important apparently most vehicles have four wheels because that's our default",
    "start": "432319",
    "end": "438960"
  },
  {
    "text": "that's their default yeah and vehicles can have less than four wheels or more than four wheels",
    "start": "438960",
    "end": "445360"
  },
  {
    "text": "amazing man yeah okay i mean i haven't seen a vehicle in like years",
    "start": "445360",
    "end": "450400"
  },
  {
    "text": "uh or at least months um in any case uh what's interesting here is we have",
    "start": "450400",
    "end": "455520"
  },
  {
    "text": "different constructors to instantiate the vehicle with different you know set of parameters um and each time we have to instantiate",
    "start": "455520",
    "end": "462240"
  },
  {
    "text": "all these different fields so we have you know a vehicle can have a name and then it uses the defaults",
    "start": "462240",
    "end": "467759"
  },
  {
    "text": "or you can actually pass a value instead of a default and then we can use these optional values so like",
    "start": "467759",
    "end": "473440"
  },
  {
    "text": "if you wanted to have a six cylinder vehicle instead of an eight-cylinder vehicle or a no-cylinder electric vehicle you can do that",
    "start": "473440",
    "end": "481360"
  },
  {
    "text": "one of the great things in this example is that we are using immutability so our static class vehicle is immutable",
    "start": "481360",
    "end": "488160"
  },
  {
    "text": "but that does mean we need to have all these different instructors to assemble the different possible",
    "start": "488160",
    "end": "493520"
  },
  {
    "text": "ways to set those those immutable values yeah and now we have a lot of duplicate",
    "start": "493520",
    "end": "500879"
  },
  {
    "text": "code and it takes a little bit more to maintain this and every time we want to add a new optional parameter we",
    "start": "500879",
    "end": "506000"
  },
  {
    "text": "add a new entire constructor yep yeah so that's that's kind of the",
    "start": "506000",
    "end": "512880"
  },
  {
    "text": "the typical way that we do pojos in java but you can see it's cumbersome and so so what did we do",
    "start": "512880",
    "end": "520560"
  },
  {
    "text": "what was the pattern that we developed to help us with this i believe it's called the builder",
    "start": "520560",
    "end": "526320"
  },
  {
    "text": "pattern which we're hovering over there we can actually make another object that makes it easy to construct this object",
    "start": "526320",
    "end": "534880"
  },
  {
    "text": "yes so let's go down to our vehicle builder here it is",
    "start": "534880",
    "end": "540000"
  },
  {
    "text": "so what's happening in our builder so the vehicle builder stores all of the",
    "start": "540000",
    "end": "545920"
  },
  {
    "text": "possible state that you'd want to pass into the constructor effectively it allows you to call methods to apply",
    "start": "545920",
    "end": "552000"
  },
  {
    "text": "pieces of the state over time including optional ones and then it has a build method that finally calls a single constructor",
    "start": "552000",
    "end": "559279"
  },
  {
    "text": "with all the parameters at once so you end up with one single point of construction for the",
    "start": "559279",
    "end": "564880"
  },
  {
    "text": "class and the builder controls the flow through optional parameters and different ways to construct that class",
    "start": "564880",
    "end": "572160"
  },
  {
    "start": "571000",
    "end": "640000"
  },
  {
    "text": "yeah and so like this has worked for a while and it has helped improve us from where",
    "start": "572160",
    "end": "578320"
  },
  {
    "text": "we were with just all the constructors but i've had a lot of challenges with builders",
    "start": "578320",
    "end": "583680"
  },
  {
    "text": "for instance builders usually aren't very good at conveying some of the semantics about",
    "start": "583680",
    "end": "589360"
  },
  {
    "text": "what is actually needed by the underlying pojo data structure for instance if two fields are related",
    "start": "589360",
    "end": "596320"
  },
  {
    "text": "like i set one field and then i need to set another field that's usually something that is not",
    "start": "596320",
    "end": "601360"
  },
  {
    "text": "conveyed through a builder and what can happen is you call build on the thing and then it throws an",
    "start": "601360",
    "end": "606480"
  },
  {
    "text": "exception because you didn't you didn't do something right so that's one of the challenges that",
    "start": "606480",
    "end": "611600"
  },
  {
    "text": "i've had with with builders in particular is that it just usually doesn't convey the the",
    "start": "611600",
    "end": "617040"
  },
  {
    "text": "actual uh semantics of what the underlying thing means",
    "start": "617040",
    "end": "622240"
  },
  {
    "text": "what other challenges do we have with builders um you actually have to still maintain",
    "start": "622240",
    "end": "628720"
  },
  {
    "text": "both sections of code so you have to maintain the pojo and you have to maintain the builder so if i make changes to the pojo i have to make",
    "start": "628720",
    "end": "634959"
  },
  {
    "text": "changes to the builder at the same time so actually the cost of ownership is doubled",
    "start": "634959",
    "end": "640000"
  },
  {
    "start": "640000",
    "end": "700000"
  },
  {
    "text": "that's true and then also we with builders things can get pretty",
    "start": "640000",
    "end": "647120"
  },
  {
    "text": "crazy when we start having hierarchical things that we're building so let's say",
    "start": "647120",
    "end": "653680"
  },
  {
    "text": "we have our vehicles but let's say now we have owners and owners have vehicles and now",
    "start": "653680",
    "end": "659200"
  },
  {
    "text": "our syntax starts to get pretty gruesome here for how we uh will build a hierarchy of",
    "start": "659200",
    "end": "666880"
  },
  {
    "text": "objects so you can see just a lot of code here we oftentimes get to the place where we",
    "start": "666880",
    "end": "673680"
  },
  {
    "text": "have to be able to go from our immutable pojo back to a builder so that we can make",
    "start": "673680",
    "end": "679040"
  },
  {
    "text": "modifications and then rebuild it and so things get things get pretty",
    "start": "679040",
    "end": "684640"
  },
  {
    "text": "nasty pretty quick with hierarchical hierarchical objects this reminds me of trying to remove a uh",
    "start": "684640",
    "end": "691440"
  },
  {
    "text": "a member of a repeated field of a repeated field of a protocol buffer",
    "start": "691440",
    "end": "696959"
  },
  {
    "text": "fun huh yeah exciting times so what we are seeing with the kind of",
    "start": "697440",
    "end": "703360"
  },
  {
    "start": "700000",
    "end": "830000"
  },
  {
    "text": "functional evolution of our object-oriented languages are some different paradigms for",
    "start": "703360",
    "end": "708399"
  },
  {
    "text": "how we construct objects and so in scala we have something called case",
    "start": "708399",
    "end": "714079"
  },
  {
    "text": "classes and in java these are the what is it coming in jdk 15 or something like this",
    "start": "714079",
    "end": "720720"
  },
  {
    "text": "is something similar to case classes which are i think record types and kotlin has data classes and so",
    "start": "720720",
    "end": "728320"
  },
  {
    "text": "a lot of the object-oriented languages now are adding much easier ways much better syntax for constructing",
    "start": "728320",
    "end": "734639"
  },
  {
    "text": "objects so josh walk us through what's what's going on here in this case class so primarily i think i want to talk",
    "start": "734639",
    "end": "740800"
  },
  {
    "text": "about there's a philosophical change in terms of how you design and craft",
    "start": "740800",
    "end": "746560"
  },
  {
    "text": "your object where there's a few components here i want to call out one is the parameters can have default",
    "start": "746560",
    "end": "753839"
  },
  {
    "text": "values and then not be specified so you don't need a builder to be able to have",
    "start": "753839",
    "end": "759519"
  },
  {
    "text": "default values anymore because you can actually account for that in your constructor um the second thing is um these uh",
    "start": "759519",
    "end": "767920"
  },
  {
    "text": "you can actually have named parameters when you construct so you can provide if we look here with",
    "start": "767920",
    "end": "774079"
  },
  {
    "text": "this vehicle um you can use the name of the parameter so you can provide only the optional ones you know at the",
    "start": "774079",
    "end": "779760"
  },
  {
    "text": "far right of your your constructor so that helps a bit and the other thing is all of the",
    "start": "779760",
    "end": "786560"
  },
  {
    "text": "arguments to the constructor actually become members of the class so you don't have to make getters and centers if you look at case class owner",
    "start": "786560",
    "end": "793360"
  },
  {
    "text": "there it's quite simple it's just i have a name and age and vehicles those are the pieces of data i need to know about",
    "start": "793360",
    "end": "799440"
  },
  {
    "text": "and those are the pieces of data i construct and then the language builds in convenience mechanisms for you to",
    "start": "799440",
    "end": "805839"
  },
  {
    "text": "build these effectively and to modify them effectively if you look at that copy method before",
    "start": "805839",
    "end": "812800"
  },
  {
    "text": "we have to call dot two builder and then modify the parameters that we want in this case the copy method is",
    "start": "812800",
    "end": "819360"
  },
  {
    "text": "generated and gives us the same parameters as our constructor so we can actually construct a new copy",
    "start": "819360",
    "end": "826480"
  },
  {
    "text": "that has all the same data but with a few things different yeah yeah so this is i think definitely",
    "start": "826480",
    "end": "833920"
  },
  {
    "text": "indicating that cycle where where we made some pattern changes with builders",
    "start": "833920",
    "end": "839440"
  },
  {
    "text": "and now we're getting great language level support for constructing objects and making it much",
    "start": "839440",
    "end": "844480"
  },
  {
    "text": "easier all right so i think we're we're on to the next topic which is um you know we've we've created these nice",
    "start": "844480",
    "end": "851040"
  },
  {
    "text": "ways to construct objects and things but um what if i want to like you know take a",
    "start": "851040",
    "end": "856880"
  },
  {
    "text": "bunch of uh functions and put them together what do i do jane yeah so combining",
    "start": "856880",
    "end": "864320"
  },
  {
    "start": "862000",
    "end": "1015000"
  },
  {
    "text": "objects we can do through a variety of ways which we saw through case classes we're going to talk more",
    "start": "864320",
    "end": "869760"
  },
  {
    "text": "about in a little bit but what if we just have functionality that we want to combine together",
    "start": "869760",
    "end": "876480"
  },
  {
    "text": "we can actually use some of the things that we learned about in object creation to do this so for",
    "start": "876480",
    "end": "882720"
  },
  {
    "text": "instance let's say i have a function uh and i'm still working with my vehicles and my function is called",
    "start": "882720",
    "end": "888639"
  },
  {
    "text": "balanced and what it does is it basically just says like is this thing even so that's assembling my",
    "start": "888639",
    "end": "894399"
  },
  {
    "text": "function so this is now a predicate of integer and then we have another one called",
    "start": "894399",
    "end": "900480"
  },
  {
    "text": "beefy like is this thing does it have a lot of cylinders more than eight then it's beefy",
    "start": "900480",
    "end": "905680"
  },
  {
    "text": "so we've got two predicates for integers and we can apply those so we have on our maybe number of cylinders which",
    "start": "905680",
    "end": "914079"
  },
  {
    "text": "is our option we have a way to filter on that option with that function we can filter on our",
    "start": "914079",
    "end": "919279"
  },
  {
    "text": "option number of cylinders with our beefy function and that's all great but what we can do",
    "start": "919279",
    "end": "925519"
  },
  {
    "text": "is we can actually take these two predicates and combine them together and so the way",
    "start": "925519",
    "end": "930639"
  },
  {
    "text": "that we do that is that predicate actually has functionality on it called",
    "start": "930639",
    "end": "935680"
  },
  {
    "text": "a combinator has a number of combinators one of the combinators is or so because predicate has a",
    "start": "935680",
    "end": "942560"
  },
  {
    "text": "function on it called or that can combine with it another function now we could take these two functions",
    "start": "942560",
    "end": "948560"
  },
  {
    "text": "combine them together into a new predicate and then we can use that new predicate in our",
    "start": "948560",
    "end": "954320"
  },
  {
    "text": "our filter function like before so that or is just taking",
    "start": "954320",
    "end": "960480"
  },
  {
    "text": "a this is an immutable way to construct a new object and that new object is both of those",
    "start": "960480",
    "end": "966639"
  },
  {
    "text": "predicates combined with an ore is this is this kind of like a builder",
    "start": "966639",
    "end": "972720"
  },
  {
    "text": "from smaller components so i've i have had arguments about that with people",
    "start": "972720",
    "end": "977759"
  },
  {
    "text": "and people i think it looks and feels a little bit like a builder but you don't call that build on it",
    "start": "977759",
    "end": "983839"
  },
  {
    "text": "you're not doing this mutable state uh where you're mutating and then calling build",
    "start": "983839",
    "end": "989680"
  },
  {
    "text": "it so i wouldn't really say that this is this is the builder pattern i would say that this is",
    "start": "989680",
    "end": "994880"
  },
  {
    "text": "just a better built-in way through combinators to create new combined",
    "start": "994880",
    "end": "999920"
  },
  {
    "text": "things but you're still achieving the same goal of small classes",
    "start": "999920",
    "end": "1005120"
  },
  {
    "text": "with clear coherent responsibilities and then clear operations to join those together",
    "start": "1005120",
    "end": "1011120"
  },
  {
    "text": "to make complex behavior and doing it all immutably yeah so",
    "start": "1011120",
    "end": "1016399"
  },
  {
    "start": "1015000",
    "end": "1185000"
  },
  {
    "text": "one of the important evolutions that's happening in object-oriented programming is something called algebraic data types",
    "start": "1016399",
    "end": "1023360"
  },
  {
    "text": "adts adts allow us a better way to represent data structures",
    "start": "1023360",
    "end": "1028798"
  },
  {
    "text": "and there's primarily two different adts that we can work with there is a product type and a product",
    "start": "1028799",
    "end": "1036319"
  },
  {
    "text": "type allows us to combine together values so for example let's say that we want to combine",
    "start": "1036319",
    "end": "1042880"
  },
  {
    "text": "together two pair two two values into a pair well we can",
    "start": "1042880",
    "end": "1048000"
  },
  {
    "text": "create a pair object to do that or our language may have something like this built in",
    "start": "1048000",
    "end": "1053039"
  },
  {
    "text": "if we want to combine three different values together uh we can combine them into a triple",
    "start": "1053039",
    "end": "1058559"
  },
  {
    "text": "there is language support in many languages for doing these without having to give them",
    "start": "1058559",
    "end": "1063600"
  },
  {
    "text": "names and these are called tuples and so uh so this is just combining a bunch of",
    "start": "1063600",
    "end": "1069120"
  },
  {
    "text": "values together it sounds like those data objects we were looking at before right that's right",
    "start": "1069120",
    "end": "1075440"
  },
  {
    "text": "exactly and so this is called a product type it's also called you can call an and",
    "start": "1075440",
    "end": "1081120"
  },
  {
    "text": "because it's anding together values or you could also call it an intersection type so",
    "start": "1081120",
    "end": "1086320"
  },
  {
    "text": "different names for this there's another one which is an or so using those algebraic ideas of",
    "start": "1086320",
    "end": "1094720"
  },
  {
    "text": "and and or into our type system and how we combine values together so now on to the or we can do this",
    "start": "1094720",
    "end": "1102640"
  },
  {
    "text": "this represents something that is what's often called an ether so something that can either be an a",
    "start": "1102640",
    "end": "1110320"
  },
  {
    "text": "or a b for example but we don't just have to deal with two values we can have things that",
    "start": "1110320",
    "end": "1116000"
  },
  {
    "text": "have have let's say three values uh let's say it's a try there and a try there can have an a b or c",
    "start": "1116000",
    "end": "1122880"
  },
  {
    "text": "and so we combine these together and this is called a sum type or you could call it an or or a",
    "start": "1122880",
    "end": "1128480"
  },
  {
    "text": "union and so these data structures this way of representing",
    "start": "1128480",
    "end": "1133840"
  },
  {
    "text": "these types of values can be really useful for being able to have our type system convey the semantics",
    "start": "1133840",
    "end": "1140000"
  },
  {
    "text": "that are actually allowed oftentimes what we would do in the past was maybe just leave one of our values",
    "start": "1140000",
    "end": "1145840"
  },
  {
    "text": "as null and set another one but that doesn't actually encode into our types the actual the actual",
    "start": "1145840",
    "end": "1152799"
  },
  {
    "text": "legal values that are possible and so with adts we can much better",
    "start": "1152799",
    "end": "1157840"
  },
  {
    "text": "encode them uh so one of the ways to represent the or is with this this ether type there is also becoming",
    "start": "1157840",
    "end": "1165679"
  },
  {
    "text": "to there are languages that are adding uh direct support for some types into the languages with",
    "start": "1165679",
    "end": "1171760"
  },
  {
    "text": "special syntax and making it easier to construct and deal with with uh these sum types most",
    "start": "1171760",
    "end": "1179120"
  },
  {
    "text": "languages already have support for uh some some some types right like uh can't we just use inheritance we",
    "start": "1179120",
    "end": "1186960"
  },
  {
    "start": "1185000",
    "end": "1221000"
  },
  {
    "text": "certainly can so that's exactly what this example is doing because i'm in kotlin and kotlin does",
    "start": "1186960",
    "end": "1192400"
  },
  {
    "text": "not have actual direct support for some types and so what i've done is i've done this through a sealed class",
    "start": "1192400",
    "end": "1198880"
  },
  {
    "text": "this then because i've made it sealed you can't extend this anywhere else so only right here can we actually extend",
    "start": "1198880",
    "end": "1206799"
  },
  {
    "text": "this either type with our actual implementations left and right and you'll see that left has a",
    "start": "1206799",
    "end": "1212080"
  },
  {
    "text": "value left right has a value right and so both of those extend either",
    "start": "1212080",
    "end": "1217520"
  },
  {
    "text": "and then you can see the example for try they're there too pretty similar what is happened in a lot of modern",
    "start": "1217520",
    "end": "1224799"
  },
  {
    "start": "1221000",
    "end": "1359000"
  },
  {
    "text": "languages that are using adts and supporting adts is pattern matching pattern matching",
    "start": "1224799",
    "end": "1230960"
  },
  {
    "text": "that is able to look at the actual classes and be able to do",
    "start": "1230960",
    "end": "1236320"
  },
  {
    "text": "smart things with it so in this example we're back to our sum type our ether and you'll see i have i'm using a",
    "start": "1236320",
    "end": "1243760"
  },
  {
    "text": "left and a right some type here but now i'm going to do my pattern matching so i'm going to say when r and i'm just matching right now",
    "start": "1243760",
    "end": "1250480"
  },
  {
    "text": "on that r1 when it is and either left then i can do",
    "start": "1250480",
    "end": "1255600"
  },
  {
    "text": "something with it and kotlin has some nice syntax here where it does the smart cast it's like okay i know",
    "start": "1255600",
    "end": "1261520"
  },
  {
    "text": "that r is an ether.left and so i'm only going to allow you to access that left property i can't",
    "start": "1261520",
    "end": "1268400"
  },
  {
    "text": "access the right property remember left didn't even exist on on right so right has right and left has",
    "start": "1268400",
    "end": "1277039"
  },
  {
    "text": "left and so kotlin when we do that pattern match in our our function that we're going to",
    "start": "1277039",
    "end": "1283440"
  },
  {
    "text": "handle this with it does that smart cast for us but there's another nice thing with some",
    "start": "1283440",
    "end": "1288880"
  },
  {
    "text": "types and pattern matching is that if we don't handle all of the cases here so if i comment out this one",
    "start": "1288880",
    "end": "1295840"
  },
  {
    "text": "then kotlin gives us a compile warning and says hey you're not exhaustive you are pattern",
    "start": "1295840",
    "end": "1301039"
  },
  {
    "text": "matching on a sealed class and it knows that in that sealed class there are two things there's a",
    "start": "1301039",
    "end": "1306400"
  },
  {
    "text": "left and a right and it's not warning us it's not exhaustive i usually when i'm writing kotlin or",
    "start": "1306400",
    "end": "1312320"
  },
  {
    "text": "scala has a similar feature i actually turn this warning into an error if you're not actually explicitly handling all the",
    "start": "1312320",
    "end": "1320000"
  },
  {
    "text": "possible cases here in your pattern match then it should be a compiler so that's what i do",
    "start": "1320000",
    "end": "1325520"
  },
  {
    "text": "okay so pattern matching allows us to replace that visitor pattern with something that is much more concise",
    "start": "1325520",
    "end": "1331039"
  },
  {
    "text": "and easier to deal with aren't they discussing bringing that to",
    "start": "1331039",
    "end": "1336799"
  },
  {
    "text": "java after record types are out you are absolutely right i don't know if that's jdk 16 or something else but yes",
    "start": "1336799",
    "end": "1342960"
  },
  {
    "text": "so pattern matching in this way is and not direct adt support but as we",
    "start": "1342960",
    "end": "1348080"
  },
  {
    "text": "said we can do the adt part in other ways in languages today maybe at some point java will get actual",
    "start": "1348080",
    "end": "1354080"
  },
  {
    "text": "language support for adts but they are adding the pattern matching which will be really nice so one of the",
    "start": "1354080",
    "end": "1360320"
  },
  {
    "start": "1359000",
    "end": "1540000"
  },
  {
    "text": "great language features that we've seen started to be added to a lot of languages is extension functions extension",
    "start": "1360320",
    "end": "1366799"
  },
  {
    "text": "functions are a kind of different way to do polymorphism where we can add a functionality to",
    "start": "1366799",
    "end": "1373760"
  },
  {
    "text": "classes just by creating functions that add that functionality so",
    "start": "1373760",
    "end": "1379200"
  },
  {
    "text": "in kotlin the way that we do that is we create a function iterable and we can even use generic so an",
    "start": "1379200",
    "end": "1384799"
  },
  {
    "text": "interval of char we're going to add a new function available on that thing called sum and so when we want to sum up",
    "start": "1384799",
    "end": "1393039"
  },
  {
    "text": "chars for some reason we can do that with this extension function so now if we've got our list which is an",
    "start": "1393039",
    "end": "1399520"
  },
  {
    "text": "iterable of chars we can call dot sum on that and that'll just work and if we",
    "start": "1399520",
    "end": "1406320"
  },
  {
    "text": "uh continue with this example we'll see all right now we can add an interval of string and so that so we",
    "start": "1406320",
    "end": "1412240"
  },
  {
    "text": "can take strings as inputs in our iterable list and do that but we've done this all with concrete",
    "start": "1412240",
    "end": "1419679"
  },
  {
    "text": "types in that iterable of whatever what if we wanted to make this generic",
    "start": "1419679",
    "end": "1425039"
  },
  {
    "text": "well what we can do is we can have an abstract class two chart of t and then have this invoke operation on",
    "start": "1425039",
    "end": "1430880"
  },
  {
    "text": "it which is going to return a char and then we can do a string to char so now we take our we create a new",
    "start": "1430880",
    "end": "1437679"
  },
  {
    "text": "function that is going to be able to to take a string turn it to a char get",
    "start": "1437679",
    "end": "1444000"
  },
  {
    "text": "the first one and then chart a char so if we've got an iterable char",
    "start": "1444000",
    "end": "1449279"
  },
  {
    "text": "but now we can do an extension method that is on our interval of t and but it needs to actually take",
    "start": "1449279",
    "end": "1457200"
  },
  {
    "text": "this two char converter that knows how to take that t and convert it into something that",
    "start": "1457200",
    "end": "1462880"
  },
  {
    "text": "then we can do our fold on and so now we've got this new method some t that we can call",
    "start": "1462880",
    "end": "1468799"
  },
  {
    "text": "where so now we can say list of of chars some t but then we need to give it our",
    "start": "1468799",
    "end": "1474159"
  },
  {
    "text": "chart to char so that's great that we can do these these extension methods with",
    "start": "1474159",
    "end": "1479440"
  },
  {
    "text": "generics but things start to get a little bit weird here because we're having to pass into some",
    "start": "1479440",
    "end": "1486000"
  },
  {
    "text": "t the actual converter that we need so let's say we wanted to be able to do an iterable",
    "start": "1486000",
    "end": "1491919"
  },
  {
    "text": "to char so we've got an iterable of t then we need to define that one which we can do it's a",
    "start": "1491919",
    "end": "1498480"
  },
  {
    "text": "two char of iterable t but then that that one needs to know how",
    "start": "1498480",
    "end": "1504000"
  },
  {
    "text": "to convert the t to a char and so now we need to start let's say we've got a list",
    "start": "1504000",
    "end": "1509120"
  },
  {
    "text": "of a list of a of chars and we want to be able to sum t those now we have to provide the whole",
    "start": "1509120",
    "end": "1515600"
  },
  {
    "text": "chain of things that are needed to do all the conversions we need to to pass that all in",
    "start": "1515600",
    "end": "1521600"
  },
  {
    "text": "explicitly so the extension methods are great but using them in this way to do these",
    "start": "1521600",
    "end": "1527279"
  },
  {
    "text": "conversions requires us to be explicit about the the ways that we're going to do those conversions and we have to provide them",
    "start": "1527279",
    "end": "1534480"
  },
  {
    "text": "so let's look at rust which has a better way to handle this particular case yeah so",
    "start": "1534480",
    "end": "1542159"
  },
  {
    "start": "1540000",
    "end": "1748000"
  },
  {
    "text": "effectively in rust um it does uh what's called derivation where it",
    "start": "1542159",
    "end": "1548640"
  },
  {
    "text": "will attempt its best to kind of construct these generic types for you",
    "start": "1548640",
    "end": "1553679"
  },
  {
    "text": "from the specific type that you have so in rust we define our two car um as a as a uh you know a trait",
    "start": "1553679",
    "end": "1561679"
  },
  {
    "text": "which is it's equivalent of like a java interface um it has a single function two car that takes in",
    "start": "1561679",
    "end": "1566720"
  },
  {
    "text": "the existing instance of a type and then returns a character uh or char and so then we define",
    "start": "1566720",
    "end": "1574400"
  },
  {
    "text": "implementation so for a character it just returns itself for a string we just grab the first",
    "start": "1574400",
    "end": "1580799"
  },
  {
    "text": "character off and return that and then there's this nice implementation where we can take in an",
    "start": "1580799",
    "end": "1586640"
  },
  {
    "text": "abstract type and define it against any vector of any type and say okay if i want to define the implementation",
    "start": "1586640",
    "end": "1593760"
  },
  {
    "text": "for a vector of any type just give me the implementation for the type of the vector the t",
    "start": "1593760",
    "end": "1598799"
  },
  {
    "text": "and then i will continue to kind of unwind these things right um and so when we define sum we",
    "start": "1598799",
    "end": "1604880"
  },
  {
    "text": "just have to define one uh two-car interface for any possible vector of t that we",
    "start": "1604880",
    "end": "1611360"
  },
  {
    "text": "have and we can sum over this and it will kind of infer through things what we need so here if",
    "start": "1611360",
    "end": "1618640"
  },
  {
    "text": "you notice we only provided uh two car for generic vectors for characters and for strings and so in",
    "start": "1618640",
    "end": "1626000"
  },
  {
    "text": "this print line you see if we pass in a vector of characters in the first example that that",
    "start": "1626000",
    "end": "1631440"
  },
  {
    "text": "compiles and works if we pass in strings in the second example that compiles and works if we pass in a vector of vector of",
    "start": "1631440",
    "end": "1639120"
  },
  {
    "text": "strings that will work because it will recursively look through the vectors and infer that oh you know the two care",
    "start": "1639120",
    "end": "1646559"
  },
  {
    "text": "for a vector of string of or vector vector strings is is the vector strings passed in and yay it",
    "start": "1646559",
    "end": "1653200"
  },
  {
    "text": "does all that magic for you same if we do a vector vector of cars um so why don't we",
    "start": "1653200",
    "end": "1658480"
  },
  {
    "text": "you can you can run this to show an example failures look like so we can run this one and it'll work",
    "start": "1658480",
    "end": "1664480"
  },
  {
    "text": "but the important thing to to highlight is that this is like the kotlin extension methods that we saw",
    "start": "1664480",
    "end": "1670320"
  },
  {
    "text": "except for we don't have to do that explicit passing of the the types that are needed like we",
    "start": "1670320",
    "end": "1675760"
  },
  {
    "text": "did in kotlin so great that one works let's go back to here and let's go change one of these cars to",
    "start": "1675760",
    "end": "1683520"
  },
  {
    "text": "uh cars chars uh i don't know how i'm just gonna play different differently every single",
    "start": "1683520",
    "end": "1688960"
  },
  {
    "text": "time yeah we know integers don't work so let's let's call it an integer yeah so let's put an integer in there",
    "start": "1688960",
    "end": "1694799"
  },
  {
    "text": "and then let's try to run this compiler again and what happened so you're getting",
    "start": "1694799",
    "end": "1699919"
  },
  {
    "text": "you're getting two errors one is it says that you can't make a vector vector of integers if you pass characters",
    "start": "1699919",
    "end": "1706559"
  },
  {
    "text": "you're right thanks rust but also when it tries to find the trait to car it tells you it",
    "start": "1708000",
    "end": "1714480"
  },
  {
    "text": "doesn't have one for integer it doesn't tell you it doesn't have one for vector a vector of integer",
    "start": "1714480",
    "end": "1719600"
  },
  {
    "text": "because it knows it can follow vector vector and it just says oh i need one for integer go write one",
    "start": "1719600",
    "end": "1724960"
  },
  {
    "text": "that's it it's wonderful the compiler is doing all this work for us yeah and so this is a great evolution",
    "start": "1724960",
    "end": "1731440"
  },
  {
    "text": "for ooo and the name commonly used for this is type classes but i think rust actually calls",
    "start": "1731440",
    "end": "1737200"
  },
  {
    "text": "them something different from type classes what does rust call these uh i believe they're called traits uh",
    "start": "1737200",
    "end": "1743200"
  },
  {
    "text": "and type traits a c plus plus calls them titrates",
    "start": "1743200",
    "end": "1748320"
  },
  {
    "start": "1748000",
    "end": "1773000"
  },
  {
    "text": "so different names but this idea of being able to for the compiler to implicitly find what",
    "start": "1748480",
    "end": "1754960"
  },
  {
    "text": "it needs to to be able to fill in function arguments essentially because we've got our sum",
    "start": "1754960",
    "end": "1760720"
  },
  {
    "text": "method and it needs to it needs a two char",
    "start": "1760720",
    "end": "1766000"
  },
  {
    "text": "that can operate on that vector of t so see ad hoc polymorphism is also another",
    "start": "1766000",
    "end": "1772399"
  },
  {
    "text": "term for this okay so let's pull together a lot of these concepts that we've walked through",
    "start": "1772399",
    "end": "1777600"
  },
  {
    "start": "1773000",
    "end": "1934000"
  },
  {
    "text": "into something that will make sense of why we need these things and how they",
    "start": "1777600",
    "end": "1782960"
  },
  {
    "text": "can be useful so in this example we've got our vehicle so you saw our vehicle earlier it's our",
    "start": "1782960",
    "end": "1789279"
  },
  {
    "text": "case class it's immutable it has those default parameters we don't have any builders great",
    "start": "1789279",
    "end": "1795120"
  },
  {
    "text": "but let's say that we want to do json we want to go from json to a vehicle well and we want to have",
    "start": "1795120",
    "end": "1801520"
  },
  {
    "text": "some validation built into this as well so we're going to use combinators to build up some validators",
    "start": "1801520",
    "end": "1807120"
  },
  {
    "text": "to validate our json and so we're using something here called verifying we're going to verify of string",
    "start": "1807120",
    "end": "1814000"
  },
  {
    "text": "we're going to get the first the first letter in that string",
    "start": "1814000",
    "end": "1820240"
  },
  {
    "text": "and we're going to verify that it is uppercase and if it's not we're going to return an",
    "start": "1820240",
    "end": "1826080"
  },
  {
    "text": "error and so this is using some uh some functions this or else is using a combinator to do",
    "start": "1826080",
    "end": "1834080"
  },
  {
    "text": "our verification that a string starts with an uppercase letter then we're going to also do a different",
    "start": "1834080",
    "end": "1841919"
  },
  {
    "text": "validator which is we're going to validate that the minimum length is there that the length is at least two and we're going to",
    "start": "1841919",
    "end": "1849520"
  },
  {
    "text": "combine that using a combinator with our starts with upper function so",
    "start": "1849520",
    "end": "1854640"
  },
  {
    "text": "we're using combinators and we are building up a validator",
    "start": "1854640",
    "end": "1859679"
  },
  {
    "text": "now let's actually create a way to read our json object into a vehicle",
    "start": "1859679",
    "end": "1867039"
  },
  {
    "text": "so we're using again combinators this and is a combinator that's going to take something that reads a property name",
    "start": "1867039",
    "end": "1874000"
  },
  {
    "text": "name and uses the name validator on that thing we're going to do a read int but you'll",
    "start": "1874000",
    "end": "1880640"
  },
  {
    "text": "see that for read int i didn't actually tell it how to read an n",
    "start": "1880640",
    "end": "1886159"
  },
  {
    "text": "so this is where we actually see those type classes that ad hoc polymorphism comes in come in is that read actually takes a",
    "start": "1886159",
    "end": "1893440"
  },
  {
    "text": "reads of t so it's parameterized like we saw before this is in scala but you saw",
    "start": "1893440",
    "end": "1898480"
  },
  {
    "text": "something very similar in rust where there is something that knows how to read an int and",
    "start": "1898480",
    "end": "1904000"
  },
  {
    "text": "and handle that we can also read a nullable int which is going to be an option which is our adt or some",
    "start": "1904000",
    "end": "1910880"
  },
  {
    "text": "type for something that can have a value or not and so we're seeing a lot of these concepts",
    "start": "1910880",
    "end": "1916720"
  },
  {
    "text": "that we saw adt's combinators type classes all coming together so that we can create something",
    "start": "1916720",
    "end": "1923120"
  },
  {
    "text": "that knows how to read json knows how to validate that json and turn that into",
    "start": "1923120",
    "end": "1928159"
  },
  {
    "text": "our case class of a vehicle okay that was a lot of stuff there josh what do",
    "start": "1928159",
    "end": "1933200"
  },
  {
    "text": "you want to clarify uh so then i think the the most important thing is if you look at this",
    "start": "1933200",
    "end": "1938880"
  },
  {
    "text": "uh json that we take in you know if we take in name and num wheels we're not taking in cylinders we",
    "start": "1938880",
    "end": "1944320"
  },
  {
    "text": "can actually parse the json run our validation logic get our errors out and here you notice",
    "start": "1944320",
    "end": "1949919"
  },
  {
    "text": "that the response is a adt itself that we can pattern match on and say if we're in the error",
    "start": "1949919",
    "end": "1955519"
  },
  {
    "text": "state we do some errors if we're in the success state we print a value and you can really start to see these",
    "start": "1955519",
    "end": "1961760"
  },
  {
    "text": "things come together this notion of composing small bits of logic that are",
    "start": "1961760",
    "end": "1967120"
  },
  {
    "text": "easy to test easy to reason through uh making sure that my combinations",
    "start": "1967120",
    "end": "1972480"
  },
  {
    "text": "of that logic is easy to understand and reason through and then build a very complex program",
    "start": "1972480",
    "end": "1978799"
  },
  {
    "text": "from simpler components and that's really the focus of what we're going after here with functional program that's really",
    "start": "1978799",
    "end": "1984799"
  },
  {
    "text": "where we see huge benefits for java developers small simple components composed together and",
    "start": "1984799",
    "end": "1991440"
  },
  {
    "text": "we haven't even talked about the benefits of testability of this stuff but that's certainly a huge benefit of all of this is being able to test",
    "start": "1991440",
    "end": "1998559"
  },
  {
    "text": "these small pieces independently and validate that they are correct so yeah so that's uh",
    "start": "1998559",
    "end": "2006559"
  },
  {
    "text": "that is our example that brings it all together and um and shows you how you can use",
    "start": "2006559",
    "end": "2012320"
  },
  {
    "text": "immutability how you can use case classes adt's how you can use ad hoc polymorphism",
    "start": "2012320",
    "end": "2018720"
  },
  {
    "text": "and for a serialization example which is just one way that this all comes together well there are many others to explore as well",
    "start": "2018720",
    "end": "2026320"
  },
  {
    "start": "2026000",
    "end": "2071000"
  },
  {
    "text": "all right so hopefully that was useful for you to see how our programming is changing and evolving and",
    "start": "2026320",
    "end": "2032159"
  },
  {
    "text": "how our object-oriented programming is in some ways becoming more functional to allow us to more easily",
    "start": "2032159",
    "end": "2038559"
  },
  {
    "text": "test more easily understand our code all that kind of stuff so if you want to find the source code that we've been",
    "start": "2038559",
    "end": "2043679"
  },
  {
    "text": "walking through that is all up on my github github.com jamesward and then oop evolution",
    "start": "2043679",
    "end": "2051440"
  },
  {
    "text": "all right what else josh just want to thank everyone for listening and uh encourage you to take a look at",
    "start": "2051440",
    "end": "2057679"
  },
  {
    "text": "some of these languages coming down the pike and seeing what's coming in java because it'll make it there it'll make",
    "start": "2057679",
    "end": "2063839"
  },
  {
    "text": "it there that's right evolution happens thanks for watching",
    "start": "2063839",
    "end": "2073119"
  }
]