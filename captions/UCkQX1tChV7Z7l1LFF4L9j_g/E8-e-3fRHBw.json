[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "welcome to the Micra services patterns and practices track I am your track host Randy shout all day",
    "start": "3990",
    "end": "11559"
  },
  {
    "text": "if you want to stay our great lesson from people actually practicing micro-services very little theory lots",
    "start": "11559",
    "end": "19000"
  },
  {
    "text": "of practical advice so should be pretty good so I'd like to introduce the first",
    "start": "19000",
    "end": "24190"
  },
  {
    "text": "speaker who's the VP of engineering at  fix hi I'm Randy shell I'm the VP of engineering at stitch fix I'm going",
    "start": "24190",
    "end": "30699"
  },
  {
    "text": "to talk about micro services in particular managing data and micro services so here we go great so I like",
    "start": "30699",
    "end": "39159"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "to start with a little bit of background so that you kind of know where I'm coming from and know where some of these lessons direct from so right now I'm VP",
    "start": "39159",
    "end": "47949"
  },
  {
    "text": "of engineering at stitch fix in San Francisco we are a clothing retailer and we combine both art and science to give",
    "start": "47949",
    "end": "54579"
  },
  {
    "text": "people the clothes that they love I'm going to talk a little bit more about our business model and approach simply",
    "start": "54579",
    "end": "59589"
  },
  {
    "text": "because it motivates the need for data and the our use of micro services and in a little bit before that I was for about",
    "start": "59589",
    "end": "67270"
  },
  {
    "text": "a year and a half I was sort of a roving CTO as a service as my friends used to say I helped a bunch of startups in the",
    "start": "67270",
    "end": "73780"
  },
  {
    "text": "Bay Area larger companies in Europe and Asia sort through their engineering organizations and try to figure out how",
    "start": "73780",
    "end": "79270"
  },
  {
    "text": "to scale their technology earlier in my career I was director of engineering at Google for Google App Engine",
    "start": "79270",
    "end": "85240"
  },
  {
    "text": "that's Google's platform as a service like Heroku or some other platforms you might be familiar with and then earlier",
    "start": "85240",
    "end": "91509"
  },
  {
    "text": "I was chief engineer at eBay for about six and a half years where I worked on multiple generations of debased search",
    "start": "91509",
    "end": "97659"
  },
  {
    "text": "engine so very briefly about stitch fix and I'm not trying to tell you you",
    "start": "97659",
    "end": "103390"
  },
  {
    "text": "should buy your clothes from us but you should totally buy your clothes from us but I will tell you our model because it",
    "start": "103390",
    "end": "109090"
  },
  {
    "text": "is very data-driven so the model of stitch fix is kind of the reverse of a standing standard clothing retailer so",
    "start": "109090",
    "end": "115719"
  },
  {
    "text": "rather than going into a physical store or into an online shop and choosing your own clothes let's have an expert do it",
    "start": "115719",
    "end": "121960"
  },
  {
    "text": "for you so you fill out of what we call a style profile it's about a hundred questions very detailed information about the",
    "start": "121960",
    "end": "128920"
  },
  {
    "text": "styles you like your price preferences things you wear into where your age your parental status your occupation",
    "start": "128920",
    "end": "136780"
  },
  {
    "text": "everything that somebody would want to know to be able to choose the best clothes that you might enjoy you're going to get in the mail five",
    "start": "136780",
    "end": "141940"
  },
  {
    "text": "hand-picked items so actually chosen for you by a human you keep what you want",
    "start": "141940",
    "end": "146950"
  },
  {
    "text": "and you return what you don't in service of this we combined art and science in",
    "start": "146950",
    "end": "154930"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "particular the data science part of science so I believe this is unique in",
    "start": "154930",
    "end": "160090"
  },
  {
    "text": "our industry but we actually have a one-to-one ratio essentially between engineering and data science so we have",
    "start": "160090",
    "end": "165340"
  },
  {
    "text": "close to a hundred software engineers that work on the team that I'm on we have also close to 100 data scientists",
    "start": "165340",
    "end": "171580"
  },
  {
    "text": "and algorithm developers most of whom have PhDs and things like astrophysics and biochemistry and experimental",
    "start": "171580",
    "end": "177610"
  },
  {
    "text": "psychology and again like I say I'm very happy to be assertive and wrong and hear",
    "start": "177610",
    "end": "182739"
  },
  {
    "text": "the counter example but as far as I'm aware certainly at our scale there are no other companies in our industry that",
    "start": "182739",
    "end": "188200"
  },
  {
    "text": "have this this ratio so what do we do with all those data scientists right I mean they literally have developed",
    "start": "188200",
    "end": "194680"
  },
  {
    "text": "exoplanets and now they're trying to choose clothing so what do we do with them we apply intelligence to every",
    "start": "194680",
    "end": "200950"
  },
  {
    "text": "aspect of statistics as this and just like any physical business there's a whole supply chain so we apply it to the",
    "start": "200950",
    "end": "206980"
  },
  {
    "text": "buying area what inventory should we buy and what quantities when should we have",
    "start": "206980",
    "end": "212650"
  },
  {
    "text": "them arrive we apply it to inventory management so where should we ship where should we store store it how do we pick",
    "start": "212650",
    "end": "220780"
  },
  {
    "text": "things out of the inventory and get those five things in the box to you we think about it in terms of logistics",
    "start": "220780",
    "end": "226209"
  },
  {
    "text": "optimization what's the cheapest and fastest way of getting our stuff from one of our warehouses to your doorstep",
    "start": "226209",
    "end": "232650"
  },
  {
    "text": "and I will motivate this example a little bit more but styling recommendations so algorithmic",
    "start": "232650",
    "end": "238450"
  },
  {
    "text": "personalized recommendations for you as a client based on the millions of other customers that we have and then we also",
    "start": "238450",
    "end": "245200"
  },
  {
    "text": "do more standard things like demand prediction because we have a physical business so if we guess over if we guess",
    "start": "245200",
    "end": "251650"
  },
  {
    "text": "over or under on how many boxes were going to send how many clients we have that's a real problem right so there are",
    "start": "251650",
    "end": "258310"
  },
  {
    "text": "lots of virtual businesses where 2x more than you expect is a great thing for us that would be a disaster because it",
    "start": "258310",
    "end": "264400"
  },
  {
    "text": "would mean that half of our customers wouldn't be able to be served does it make sense great",
    "start": "264400",
    "end": "270770"
  },
  {
    "text": "okay all of these things are about humans and machines augmenting one another making each other better so the",
    "start": "270770",
    "end": "277550"
  },
  {
    "text": "humans are great the machines are great they are better together I'm going to",
    "start": "277550",
    "end": "283639"
  },
  {
    "start": "283000",
    "end": "283000"
  },
  {
    "text": "talk a little bit more a little bit in detail about the styling part so we say styling that's the humans choosing the",
    "start": "283639",
    "end": "289940"
  },
  {
    "text": "five items that go in the box so we have 3500 human stylists all around the United States that we use to help help",
    "start": "289940",
    "end": "297440"
  },
  {
    "text": "our clients send our clients things we're going to like so from the client perspective obviously you know stitch",
    "start": "297440",
    "end": "304699"
  },
  {
    "text": "fix has a bunch of inventory and then magically you know five items in a box show up and hopefully you like them all",
    "start": "304699",
    "end": "310479"
  },
  {
    "text": "there's a little more to it than that so breaking down that arrow there's a first",
    "start": "310479",
    "end": "316190"
  },
  {
    "start": "313000",
    "end": "313000"
  },
  {
    "text": "phase of personalized algorithmic recommendations so this is what we're doing with a bunch of those data",
    "start": "316190",
    "end": "321590"
  },
  {
    "text": "scientists we look at our inventory we do a ton of machine learned models come up with a sort of ensemble score that",
    "start": "321590",
    "end": "328610"
  },
  {
    "text": "predicts the likelihood that this particular client is going to keep this particular piece of inventory and we",
    "start": "328610",
    "end": "333889"
  },
  {
    "text": "produce those scores in a set of algorithmic recommendations we then show those algorithmic recommendations to one",
    "start": "333889",
    "end": "339949"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "of those 3500 human stylists and those human experts essentially curate a lot",
    "start": "339949",
    "end": "346279"
  },
  {
    "text": "the five items that are going to go in the box so the machines are really good at going through all the data and making them and coming up with those scores the",
    "start": "346279",
    "end": "353150"
  },
  {
    "text": "humans are good at putting together an outfit answering client requests like I need something sexy for date night with",
    "start": "353150",
    "end": "359750"
  },
  {
    "text": "my husband so far we don't have a machine that knows how to interpret that but maybe someday you know that's like",
    "start": "359750",
    "end": "366500"
  },
  {
    "text": "that type of thing the humans do what the humans are good at which is the pattern matching and understanding context and the machines do what the",
    "start": "366500",
    "end": "372979"
  },
  {
    "text": "machines are good at which is trolling through tons of data and making scores just make sense right and again just",
    "start": "372979",
    "end": "380029"
  },
  {
    "text": "like in chess by the way the humans are great by themselves the machines are great by themselves but they are even",
    "start": "380029",
    "end": "385370"
  },
  {
    "text": "better when combined together so how do we work at stitch fix and why does it work and I honestly blue I will talk",
    "start": "385370",
    "end": "393650"
  },
  {
    "text": "about micro-services but just in a moment so modern software developments in my mind that we practice at stitch",
    "start": "393650",
    "end": "399649"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "fix and Google where I used to work combines not just technology but organ is a processes and practices and culture in",
    "start": "399649",
    "end": "407210"
  },
  {
    "text": "addition to technology and so what I'm going to do is I'm going to set up those first three really quickly because they're kind of the background or the",
    "start": "407210",
    "end": "413270"
  },
  {
    "text": "foundation on which we're going to build the microsoft says approach and then I will leap into joins and transactions",
    "start": "413270",
    "end": "420470"
  },
  {
    "text": "and all the sexy stuff so but in particular just a telegraph where my",
    "start": "420470",
    "end": "425810"
  },
  {
    "text": "beliefs I believe that organizations are most effective when we build them out of small teams with well-defined areas of",
    "start": "425810",
    "end": "432890"
  },
  {
    "text": "responsibility processes and practices I believe those are best practice with test-driven development and continuous",
    "start": "432890",
    "end": "438680"
  },
  {
    "text": "delivery for culture I believe strongly in DevOps in the sense that you build it",
    "start": "438680",
    "end": "443870"
  },
  {
    "text": "you run it and for technology at least at our scale I strongly believe in micro services so again first talk about those",
    "start": "443870",
    "end": "451310"
  },
  {
    "text": "first three very quickly to give the kind of background and sort of the underpinnings or the prerequisites for",
    "start": "451310",
    "end": "457190"
  },
  {
    "text": "being successful with micro services and then we'll go and talk about the technology part so first I want to talk",
    "start": "457190",
    "end": "462710"
  },
  {
    "text": "about small teams we practice at stitch",
    "start": "462710",
    "end": "467990"
  },
  {
    "start": "465000",
    "end": "465000"
  },
  {
    "text": "fix and we also use to practice at Google this idea of small service teams so we have we have small teams that are",
    "start": "467990",
    "end": "474650"
  },
  {
    "text": "directly aligned with a particular domain in the business those teams have a clear well-defined area of",
    "start": "474650",
    "end": "479930"
  },
  {
    "text": "responsibility and they typically build and maintain a single service or application or a set of related services",
    "start": "479930",
    "end": "485960"
  },
  {
    "text": "and applications those teams are cross-functional so within the team boundary they have all the skill sets",
    "start": "485960",
    "end": "491600"
  },
  {
    "text": "that they need to do the job that doesn't mean they have all skill sets in life we don't build our own hardware we",
    "start": "491600",
    "end": "497450"
  },
  {
    "text": "don't write our own operating systems so we don't have those folks but all the skill sets that are needed to produce",
    "start": "497450",
    "end": "502490"
  },
  {
    "text": "the particular service are within within that same boundary and of course teams",
    "start": "502490",
    "end": "507590"
  },
  {
    "text": "depend on each other right so we depend on other teams within stitch fix we also depend on external third parties a cloud",
    "start": "507590",
    "end": "514250"
  },
  {
    "text": "providers etc for supporting services and libraries and tools this makes sense great ok this is a grief tour so that's",
    "start": "514250",
    "end": "524030"
  },
  {
    "text": "next I want to talk about our practices around test-driven development and continuous delivery so for test-driven development we don't",
    "start": "524030",
    "end": "530870"
  },
  {
    "text": "do this to slow things down we do this to speed ourselves up write tests help",
    "start": "530870",
    "end": "535910"
  },
  {
    "text": "us go faster why because tests have my back when I am",
    "start": "535910",
    "end": "541060"
  },
  {
    "text": "writing code or more precisely when I am changing code the tests make sure that I don't regress the thing that's the",
    "start": "541060",
    "end": "547269"
  },
  {
    "text": "things that already work and it actually increases our development velocity by making that investment upfront in",
    "start": "547269",
    "end": "552850"
  },
  {
    "text": "writing the tests rather than you know writing the code hoping it's going to work and then kind of testing manually",
    "start": "552850",
    "end": "559000"
  },
  {
    "text": "or not at all at the end of the process tests make better code so when I have a",
    "start": "559000",
    "end": "565269"
  },
  {
    "text": "large suite of automated tests it gives me the confidence to break things and it gives me the courage to sort of",
    "start": "565269",
    "end": "571230"
  },
  {
    "text": "mercilessly refactor areas of the code change cross-cutting concerns all across the codebase exactly because I know if I",
    "start": "571230",
    "end": "578829"
  },
  {
    "text": "make a mistake or I don't do things properly in one area the tests are going to are going to catch it to make sense",
    "start": "578829",
    "end": "586680"
  },
  {
    "text": "tests make better systems they obviously that having automated tests allow us to",
    "start": "586680",
    "end": "591970"
  },
  {
    "text": "catch but allows us to catch bugs earlier and it allows us to fail faster when it's a lot cheaper in the",
    "start": "591970",
    "end": "597040"
  },
  {
    "text": "development cycle rather than finding out only much later when we ship stuff the customers that the thing doesn't",
    "start": "597040",
    "end": "603220"
  },
  {
    "text": "work so I've been in the industry as a long time as you can imagine by looking",
    "start": "603220",
    "end": "609100"
  },
  {
    "text": "at me often I hear this is anybody else here desk we don't have time to do it right yeah maybe half of the people so",
    "start": "609100",
    "end": "617470"
  },
  {
    "text": "here's what I say do you have time to do it twice that is the choice you can do",
    "start": "617470",
    "end": "626620"
  },
  {
    "text": "it right the first time for some value of right or you can do it twice that's",
    "start": "626620",
    "end": "632140"
  },
  {
    "text": "it or it doesn't matter right I guess the step zero is does the thing we're doing actually matter in which case",
    "start": "632140",
    "end": "638079"
  },
  {
    "text": "doesn't matter where they do it right or wrong but if it matters do it properly so you don't have to do it again do it",
    "start": "638079",
    "end": "645940"
  },
  {
    "start": "644000",
    "end": "644000"
  },
  {
    "text": "right enough the first time in fact this is a bit counterintuitive but stay with",
    "start": "645940",
    "end": "650949"
  },
  {
    "text": "me the more constrained you are in time and resources the more important it is",
    "start": "650949",
    "end": "656890"
  },
  {
    "text": "to build this thing solidly does it make sense when I don't have a lot of time to come around and do it a second time",
    "start": "656890",
    "end": "662380"
  },
  {
    "text": "let's make sure that I do one thing really well and then I move on right I",
    "start": "662380",
    "end": "667540"
  },
  {
    "text": "would much rather as a start-up or a medium-sized company or a massive enterprise I would much",
    "start": "667540",
    "end": "672860"
  },
  {
    "text": "rather build one great thing than to half-finished things right okay right",
    "start": "672860",
    "end": "680319"
  },
  {
    "text": "doesn't mean perfect so there's an 8020 rule Pareto principle here you obviously went",
    "start": "680319",
    "end": "686720"
  },
  {
    "text": "you know the idea is that with 20% of the effort we can get 80% of the way there so what I am not suggesting is build a perfect system but I'm saying",
    "start": "686720",
    "end": "693170"
  },
  {
    "text": "build a just right enough system to get you going move on go to the next thing the",
    "start": "693170",
    "end": "700399"
  },
  {
    "text": "interesting implication that has at stitch fix it's basically we don't have a bug we don't have a global bug",
    "start": "700399",
    "end": "706279"
  },
  {
    "text": "tracking system now I don't say we don't have bugs we have lots of them but for the most part when we find a bug we just",
    "start": "706279",
    "end": "712819"
  },
  {
    "text": "fix it right we find something we find some issue write a test that demonstrates the bug we make the fix the",
    "start": "712819",
    "end": "720139"
  },
  {
    "text": "test verifies the fix all done closed move on to the next thing do we have",
    "start": "720139",
    "end": "726259"
  },
  {
    "text": "lots of other things we want to do of course we do we have a large backlog of stuff to do but that backlog is not a",
    "start": "726259",
    "end": "732019"
  },
  {
    "text": "list of half implemented things it's not a list of things that that we thought",
    "start": "732019",
    "end": "737779"
  },
  {
    "text": "were working and aren't it is a list of new things that we want to do right new features that we want to produce",
    "start": "737779",
    "end": "743769"
  },
  {
    "text": "technical debt which we absolutely have technical debts that we want to repay but what it isn't is a list of you know",
    "start": "743769",
    "end": "749899"
  },
  {
    "text": "the endless list of priority two priority three priority four issues that we know we're never going to fix and",
    "start": "749899",
    "end": "755809"
  },
  {
    "text": "this for me is unique in in my entire you know 27 year experience in this industry I have never worked at a place",
    "start": "755809",
    "end": "762290"
  },
  {
    "text": "that had this and this is exactly and directly comes from the test-driven development approach just make sense",
    "start": "762290",
    "end": "768790"
  },
  {
    "text": "does it sound pretty cool yeah it is okay continuous delivery we we build",
    "start": "768790",
    "end": "777559"
  },
  {
    "start": "774000",
    "end": "774000"
  },
  {
    "text": "stuff on Ruby on Rails for the most part rails really wants you to build a monolith and we really didn't so",
    "start": "777559",
    "end": "784399"
  },
  {
    "text": "thankfully we we avoided that siren song we've ended up building about 50 or 60",
    "start": "784399",
    "end": "789680"
  },
  {
    "text": "different individual applications and services most of which are deployed multiple times a day by having the",
    "start": "789680",
    "end": "798889"
  },
  {
    "text": "ability to deliver continuously we build more solid systems why the",
    "start": "798889",
    "end": "804140"
  },
  {
    "text": "because we release smaller units of work into smaller batch sizes to use the lean lean terminology it means we have",
    "start": "804140",
    "end": "811640"
  },
  {
    "text": "smaller changes to roll forward or roll back and if there's an issue it's faster to repair it's a lot easier to grok it's",
    "start": "811640",
    "end": "819020"
  },
  {
    "text": "a lot easier to understand and it's simpler to diagnose just make sense yeah",
    "start": "819020",
    "end": "824240"
  },
  {
    "text": "it also allows us as we will see going forward to rapidly experiment right our",
    "start": "824240",
    "end": "829730"
  },
  {
    "text": "ability to release small units of code multiple times a day allows us to make",
    "start": "829730",
    "end": "835100"
  },
  {
    "text": "rapid changes to the code rapid experimentation which we absolutely on the data science side take advantage of",
    "start": "835100",
    "end": "840740"
  },
  {
    "text": "so we experiment you know constantly and we rapidly iterate exactly because we've",
    "start": "840740",
    "end": "847100"
  },
  {
    "text": "made a chief for ourselves ok last thing I want to talk about is the cultural",
    "start": "847100",
    "end": "852260"
  },
  {
    "text": "aspect of DevOps so apparently there are lots of definitions of DevOps here's",
    "start": "852260",
    "end": "857960"
  },
  {
    "start": "854000",
    "end": "854000"
  },
  {
    "text": "mine it means end to end ownership of the thing that you are writing so unlike",
    "start": "857960",
    "end": "863510"
  },
  {
    "text": "when I started in the software industry and we built shrink-wrap software that we put on a CD and we ship physically to",
    "start": "863510",
    "end": "869120"
  },
  {
    "text": "customers our teams in the modern world when you're building a sort of an online",
    "start": "869120",
    "end": "874370"
  },
  {
    "text": "system like Citrix is the team is going to own the service all the way from the design through the development",
    "start": "874370",
    "end": "880820"
  },
  {
    "text": "deployment all the way care retirement so when I started my job was done when I sort of hit commit and my thing went",
    "start": "880820",
    "end": "887390"
  },
  {
    "text": "into the repository now I am only done when the service that I'm working on is",
    "start": "887390",
    "end": "892670"
  },
  {
    "text": "retired it stitch fix we just have engineers this is very similar to",
    "start": "892670",
    "end": "899690"
  },
  {
    "text": "Netflix to Google to Amazon lots of places that are really high performing those engineers that I have on my teams",
    "start": "899690",
    "end": "906890"
  },
  {
    "text": "are responsible for all aspects of the software development process they are responsible for the features they are",
    "start": "906890",
    "end": "912290"
  },
  {
    "text": "responsible for the quality of the features they are responsible for the things that they build performing well they are responsible for operating them",
    "start": "912290",
    "end": "919160"
  },
  {
    "text": "and they're responsible for maintaining them long term so we do not have a separate QA team a separate performance",
    "start": "919160",
    "end": "924650"
  },
  {
    "text": "team a separate operations team a separate maintenance group we have engineers they do it all and that has",
    "start": "924650",
    "end": "930320"
  },
  {
    "text": "wonderful properties because it means that the things that we learn operating and maintaining the software feed",
    "start": "930320",
    "end": "936290"
  },
  {
    "text": "directly back into the software that we're building it's basically a reification of the",
    "start": "936290",
    "end": "942220"
  },
  {
    "text": "burner Fogle's idea of you build it you run it just make sense okay so all of",
    "start": "942220",
    "end": "948760"
  },
  {
    "text": "this is backstory to getting to where you really wanted to hear about which is micro services so that's we're going to",
    "start": "948760",
    "end": "954670"
  },
  {
    "text": "talk about for the rest of for the rest of the session first I will talk a little bit about a show a little bit",
    "start": "954670",
    "end": "960430"
  },
  {
    "start": "958000",
    "end": "958000"
  },
  {
    "text": "about the evolution of companies you've heard ups and micro services so very briefly eBay is you would currently",
    "start": "960430",
    "end": "966940"
  },
  {
    "text": "characterize as a micro services architecture completely didn't start that way so famous it's depending on how you",
    "start": "966940",
    "end": "972910"
  },
  {
    "text": "count on it about its fifth generation of its architecture so a fifth complete rewrite from the ground up so it",
    "start": "972910",
    "end": "978550"
  },
  {
    "text": "famously started in 1995 when Pierre Omidyar the founder took a three-day Labor Day weekend and started playing",
    "start": "978550",
    "end": "984760"
  },
  {
    "text": "around with this new thing called the web and he decided to build an auction website took in three days it was",
    "start": "984760",
    "end": "991480"
  },
  {
    "text": "monolithic Perl application every item was an individual file on his machine that didn't scale but it was pretty cool",
    "start": "991480",
    "end": "997920"
  },
  {
    "text": "the next generation was a monolithic C++ application which at its worst because",
    "start": "997920",
    "end": "1004850"
  },
  {
    "text": "3.4 million lines of code in a single DLL don't do that you think you have a",
    "start": "1004850",
    "end": "1011700"
  },
  {
    "text": "monolith I laugh that's a monolith they were actually hitting compiler limits on",
    "start": "1011700",
    "end": "1017610"
  },
  {
    "text": "the number of methods per class which is 16 K yeah next generation the v3 was a",
    "start": "1017610",
    "end": "1026880"
  },
  {
    "text": "rewrite in Java that wouldn't fairly be characterized as microcircuit maybe many applications right so individual pages",
    "start": "1026880",
    "end": "1034260"
  },
  {
    "text": "of the site were served by you know the search application or the selling application or the buying application",
    "start": "1034260",
    "end": "1040860"
  },
  {
    "text": "something like that and now I think it's fair to characterize eBay as a polyglot set of micro services Twitter's gone through a similar",
    "start": "1040860",
    "end": "1047189"
  },
  {
    "text": "evolution there about on their third generation so they started famously as a monolithic rails app which the Twitter",
    "start": "1047190",
    "end": "1053310"
  },
  {
    "text": "people called the monorail very clever next generation of it was sort of",
    "start": "1053310",
    "end": "1058440"
  },
  {
    "text": "breaking out more of the front-end into JavaScript more of the backend into services mostly written in scala and",
    "start": "1058440",
    "end": "1063540"
  },
  {
    "text": "then now I think it's fair to characterize Twitter as a polyglot set of micro services Amazon has gone",
    "start": "1063540",
    "end": "1069120"
  },
  {
    "text": "through a similar evolu Amazon isn't so clean on their architecture generations but it started",
    "start": "1069120",
    "end": "1076240"
  },
  {
    "text": "out as a monolithic Perl and C++ application which you actually you can still see the history of in some of the",
    "start": "1076240",
    "end": "1082299"
  },
  {
    "text": "product detail pages so if you ever see in the URL obidos OB i-gos that was the",
    "start": "1082299",
    "end": "1088389"
  },
  {
    "text": "name of the original monolithic app in amazon the next year the next generation",
    "start": "1088389",
    "end": "1094149"
  },
  {
    "text": "after that was breaking out a bunch of back-end stuff into services motsu written in Java and Scala and then now",
    "start": "1094149",
    "end": "1100720"
  },
  {
    "text": "it's fair to characterize Amazon as a poly block set of micro services so there are two things to take away from",
    "start": "1100720",
    "end": "1106269"
  },
  {
    "text": "this which is why I show this slide number one no place you've ever heard of started with micro services and number",
    "start": "1106269",
    "end": "1112570"
  },
  {
    "text": "two no place that this scale has not ended up in micro services does it make",
    "start": "1112570",
    "end": "1117759"
  },
  {
    "text": "sense what I'm saying yeah okay so I want to super underline this because I'm",
    "start": "1117759",
    "end": "1124389"
  },
  {
    "text": "going to talk about micro services but I want to make sure that micro services are not for every company and are not",
    "start": "1124389",
    "end": "1130450"
  },
  {
    "text": "particularly not for every stage of company when you are at eBay scale or Google scale or Netflix scale you for",
    "start": "1130450",
    "end": "1136600"
  },
  {
    "text": "sure need to have something that looks like micro services when you are a tiny startup it is unclear that that is the",
    "start": "1136600",
    "end": "1141639"
  },
  {
    "text": "right way to go so I love the Martin Fowler thing where you know the first law of distributed object design is",
    "start": "1141639",
    "end": "1147159"
  },
  {
    "text": "don't distribute the objects right a monolith is perfect for when you can get away with it at some point you will no",
    "start": "1147159",
    "end": "1153009"
  },
  {
    "text": "longer be able to but it's great to start with we did that at stitch fix same at Netflix same at all these other",
    "start": "1153009",
    "end": "1159340"
  },
  {
    "text": "places there's no shame in that and there's everything right about starting in a monolithic approach so this is what",
    "start": "1159340",
    "end": "1165190"
  },
  {
    "text": "Martin Fowler says this is what I say if you don't end up regretting your early technology decisions you probably over",
    "start": "1165190",
    "end": "1171100"
  },
  {
    "text": "engineered right there might well have been an eBay competitor in 1995 that spent all their time building a",
    "start": "1171100",
    "end": "1177250"
  },
  {
    "text": "distributed system there is a reason why we have not heard of that company all",
    "start": "1177250",
    "end": "1183519"
  },
  {
    "text": "right microservices my definition it's not about how many lines of code or how long",
    "start": "1183519",
    "end": "1190000"
  },
  {
    "text": "it takes to write them it is about the scope of the interface Micra service is our single purpose they have a simple",
    "start": "1190000",
    "end": "1196149"
  },
  {
    "text": "well-defined interface and the critical aspect from an architectural perspective is that they are modular and independent",
    "start": "1196149",
    "end": "1202679"
  },
  {
    "text": "now these things sound like you could get them in other ways without microservices you would absolutely be right in fact as",
    "start": "1202679",
    "end": "1210490"
  },
  {
    "text": "I like to say microservices are nothing more than service oriented architecture done properly right",
    "start": "1210490",
    "end": "1216070"
  },
  {
    "text": "it is a service-oriented architecture where we actually think about bounding the context of the individual services",
    "start": "1216070",
    "end": "1222970"
  },
  {
    "text": "we think about doing one thing doing it very well and then moving on to another service but things but another thing",
    "start": "1222970",
    "end": "1229930"
  },
  {
    "text": "which is going to motivate some of the data stuff that I'm going to talk about going forward is in order for micro",
    "start": "1229930",
    "end": "1236050"
  },
  {
    "text": "services to be really effective they really have to have what I call isolated persistence and I am going to talk about",
    "start": "1236050",
    "end": "1241240"
  },
  {
    "text": "this on much more detail but the brief brief overview here is that an individual micro service in one of those",
    "start": "1241240",
    "end": "1247360"
  },
  {
    "text": "ecosystems really needs to have its own isolated database essentially there should not be any backdoor way for micro",
    "start": "1247360",
    "end": "1254050"
  },
  {
    "text": "services to kind of sneak in and look at the other guys data that's not going to work and I'll tell you why okay",
    "start": "1254050",
    "end": "1261490"
  },
  {
    "text": "so I'll tell you why now so let's talk a little bit about some options for how",
    "start": "1261490",
    "end": "1266740"
  },
  {
    "start": "1263000",
    "end": "1263000"
  },
  {
    "text": "you can get what I just said how can you make micro services sort of have isolated persistence from each other so",
    "start": "1266740",
    "end": "1274090"
  },
  {
    "text": "the first approach is that the same team that builds the micro service also operates its own data store right so we",
    "start": "1274090",
    "end": "1281020"
  },
  {
    "text": "use Postgres that stitch fix you might you know choose your own data store whether it's my sequel or Oracle or",
    "start": "1281020",
    "end": "1286600"
  },
  {
    "text": "Cassandra or something like that so the idea is that the team would you know store to their own instances and sort of",
    "start": "1286600",
    "end": "1293230"
  },
  {
    "text": "own and operate those data databases and we absolutely do in some teams you know at Citrix we absolutely do this model",
    "start": "1293230",
    "end": "1299200"
  },
  {
    "text": "the other model of course is to use a persistent service whether that service was provided by potentially another team",
    "start": "1299200",
    "end": "1304930"
  },
  {
    "text": "in your company or maybe a third party you know cloud provider or something like that so the idea there is you store",
    "start": "1304930",
    "end": "1310270"
  },
  {
    "text": "to your own little slice you store to your own schema in I don't know Amazon",
    "start": "1310270",
    "end": "1315430"
  },
  {
    "text": "dynamo or Google Cloud datastore or Google spanner or Microsoft sequel",
    "start": "1315430",
    "end": "1321490"
  },
  {
    "text": "server in the cloud something like that but it's operating the idea is that it's operated for assert a service for you by",
    "start": "1321490",
    "end": "1327250"
  },
  {
    "text": "you know somebody else and the key thing is that even though there might be a kind of multi tenant situation you are",
    "start": "1327250",
    "end": "1333280"
  },
  {
    "text": "isolated from all the other ten right all the other users of that service so you have your own little slice that as far as you're aware is is",
    "start": "1333280",
    "end": "1340640"
  },
  {
    "text": "alone this is making sense yeah the key thing to get here though is that the",
    "start": "1340640",
    "end": "1346040"
  },
  {
    "text": "only external access to your data store and your micro service is through your published service interface right if you",
    "start": "1346040",
    "end": "1351740"
  },
  {
    "text": "have any other way of getting there you know that way lies madness you really",
    "start": "1351740",
    "end": "1356870"
  },
  {
    "text": "don't want to have people reading and writing behind your back without your able your ability to execute business",
    "start": "1356870",
    "end": "1362090"
  },
  {
    "text": "logic and all that an ebay absolutely did do that in their first attempt to do",
    "start": "1362090",
    "end": "1367880"
  },
  {
    "text": "services and it was a massive failure exactly because the applications could talk to the shared databases directly",
    "start": "1367880",
    "end": "1373910"
  },
  {
    "text": "and didn't need to go through the service layer so nobody used it so don't",
    "start": "1373910",
    "end": "1379190"
  },
  {
    "text": "do that that's why I'm telling you this okay next thing I want to talk about and",
    "start": "1379190",
    "end": "1384650"
  },
  {
    "start": "1383000",
    "end": "1383000"
  },
  {
    "text": "these are all kind of architectural building blocks that we're going to build up to talking about joins and talking about transactions near the end",
    "start": "1384650",
    "end": "1390530"
  },
  {
    "text": "so I want to take a brief pause and make a pitch for having events as a",
    "start": "1390530",
    "end": "1396190"
  },
  {
    "text": "first-class construct in your in your design in your architecture so wikipedia",
    "start": "1396190",
    "end": "1402200"
  },
  {
    "text": "defines an event as a significant change in state I like to think of it as it's a statement that a thing happened like",
    "start": "1402200",
    "end": "1408770"
  },
  {
    "text": "something that nice something that I cared about happened in my system",
    "start": "1408770",
    "end": "1415130"
  },
  {
    "text": "typically these things are asynchronous so there might be nobody listening to the events that I produce there might be",
    "start": "1415130",
    "end": "1420559"
  },
  {
    "text": "one other consumer or there might be many other consumers for the events that I produce in a tradition we're all",
    "start": "1420559",
    "end": "1427700"
  },
  {
    "text": "pretty familiar with the traditional three-tier architecture a lot of us myself included sort of cut our teeth on building systems like that so there's a",
    "start": "1427700",
    "end": "1434419"
  },
  {
    "text": "presentation tier a sort of application or business logic tier and maybe a persistence tier which is often at least",
    "start": "1434419",
    "end": "1439970"
  },
  {
    "text": "traditionally a relational database I think we are missing something I think we are missing the fourth fundamental",
    "start": "1439970",
    "end": "1446630"
  },
  {
    "text": "building block of architecture which is state changes or events hopefully I will",
    "start": "1446630",
    "end": "1452179"
  },
  {
    "text": "motivate this in the next slide but I think not thinking about events as a first-class part of your architecture",
    "start": "1452179",
    "end": "1457880"
  },
  {
    "text": "you're missing a whole dimension of architectural flexibility that I use",
    "start": "1457880",
    "end": "1464360"
  },
  {
    "text": "that you have okay why should you do it this way well it turns out that events",
    "start": "1464360",
    "end": "1469460"
  },
  {
    "text": "represent how the real world actually works in finance Deutsche Bank and Bank",
    "start": "1469460",
    "end": "1475490"
  },
  {
    "text": "of America when they're trading currencies they don't do a distributed transaction they are firing events at",
    "start": "1475490",
    "end": "1480649"
  },
  {
    "text": "each other and then at the end of the trading day they kind of reconcile right I've sent you a million events you've",
    "start": "1480649",
    "end": "1486080"
  },
  {
    "text": "received you know a million and ten or whatever we figured out at the end of the day and reconcile I was looking for",
    "start": "1486080",
    "end": "1492470"
  },
  {
    "text": "another example that's sort of more visceral for people in this room think about it as the software development",
    "start": "1492470",
    "end": "1498380"
  },
  {
    "text": "process itself so raise your hand if when you hit return in your IDE that it gets deployed to production anyone yeah",
    "start": "1498380",
    "end": "1505850"
  },
  {
    "text": "one person great I'm all for continuous delivery but I strongly believe that",
    "start": "1505850",
    "end": "1512510"
  },
  {
    "text": "there are steps along the way and it's actually a workflow and with you know I finish building my code you know locally",
    "start": "1512510",
    "end": "1519500"
  },
  {
    "text": "and then I commit it to the repository and then you know CI happens and then it",
    "start": "1519500",
    "end": "1524899"
  },
  {
    "text": "gets deployed a cetera so they're actually events and a whole big chain great so now I want to talk about events",
    "start": "1524899",
    "end": "1531890"
  },
  {
    "start": "1529000",
    "end": "1529000"
  },
  {
    "text": "as applied to micro services so just like it should be a first-class part of our architecture events are a",
    "start": "1531890",
    "end": "1537289"
  },
  {
    "text": "first-class part of our service interface so the obvious part of my service interface as a micro service is",
    "start": "1537289",
    "end": "1544010"
  },
  {
    "text": "the synchronous part right so often that is you know rest and JSON or maybe it's",
    "start": "1544010",
    "end": "1549200"
  },
  {
    "text": "something like G RPC or thrift but typically people think of their interface as that synchronous request",
    "start": "1549200",
    "end": "1554870"
  },
  {
    "text": "response part in the front well there are lots of other parts of our interface as well if we if we kind of open our",
    "start": "1554870",
    "end": "1561830"
  },
  {
    "text": "eyes so the interface to my service also includes all the events my service",
    "start": "1561830",
    "end": "1567049"
  },
  {
    "text": "produces right it includes all the events my service consumes and also as",
    "start": "1567049",
    "end": "1573590"
  },
  {
    "text": "is often true when I'm communicating with analytic systems it also includes any bulk reads and writes like ETL jobs",
    "start": "1573590",
    "end": "1580390"
  },
  {
    "text": "to my database does this make sense great lots of nods okay the interface",
    "start": "1580390",
    "end": "1587600"
  },
  {
    "text": "includes any mechanism that gets data into or out of my service okay which",
    "start": "1587600",
    "end": "1595039"
  },
  {
    "text": "includes event all right now that we have all those building blocks I'm going",
    "start": "1595039",
    "end": "1600320"
  },
  {
    "start": "1597000",
    "end": "1597000"
  },
  {
    "text": "to talk first about how to extract micro services from a monolithic database then I'm",
    "start": "1600320",
    "end": "1605780"
  },
  {
    "text": "going to talk about some techniques for managing data from the design perspective in a micro services ecosystem so this is exactly the problem",
    "start": "1605780",
    "end": "1613400"
  },
  {
    "text": "that at stitch fix when I joined and we're still working through it so stitch fix as I mentioned avoided the siren",
    "start": "1613400",
    "end": "1620330"
  },
  {
    "text": "song of building the rails monolith but we did but we did I think for a very good reason we did build a monolithic",
    "start": "1620330",
    "end": "1627799"
  },
  {
    "text": "database so almost every even now even though we've been in at for a while almost every interesting entity and",
    "start": "1627799",
    "end": "1634370"
  },
  {
    "text": "stitch fix lives in this shared database right so all the information about clients the information about the the",
    "start": "1634370",
    "end": "1640429"
  },
  {
    "text": "shipments we've spent out the items that we have in inventory all the metadata about items so styles and SKUs all the",
    "start": "1640429",
    "end": "1648590"
  },
  {
    "text": "information about our warehouses etcetera etc etc at times 175 tables and we have a bunch of applications you know",
    "start": "1648590",
    "end": "1655549"
  },
  {
    "text": "I show 8 up here but we actually have about 50 or 60 and the vast majority of them are still talking to this shared",
    "start": "1655549",
    "end": "1660980"
  },
  {
    "text": "database so this is a real problem right it's a it's a single point of sort of contention and restriction on feature",
    "start": "1660980",
    "end": "1668900"
  },
  {
    "text": "velocity for my teams but it is also a single point of failure right so if this thing goes down or is slow all of stitch",
    "start": "1668900",
    "end": "1675230"
  },
  {
    "text": "fix has a bad day so let's make sure that doesn't happen anymore and I will tell you how we're doing it so the",
    "start": "1675230",
    "end": "1682100"
  },
  {
    "text": "solution is decoupling applications and services from the shared database so that's pretty obvious I'm going to tell",
    "start": "1682100",
    "end": "1687799"
  },
  {
    "text": "how we do that but I'm going to tell it in a slightly simplified form just so that there aren't so many boxes and lines on the on the on the slide so",
    "start": "1687799",
    "end": "1695360"
  },
  {
    "text": "let's imagine we only had two applications and we had three tables so step one is we're going to create a",
    "start": "1695360",
    "end": "1701150"
  },
  {
    "text": "service for one of those shared tables so we have a service at stitched fix which we call core client as you can",
    "start": "1701150",
    "end": "1707390"
  },
  {
    "text": "imagine it stores information about our clients so we create a client service now we instead of having the",
    "start": "1707390",
    "end": "1714049"
  },
  {
    "text": "applications talk directly to that database table we change the applications to talk to the service",
    "start": "1714049",
    "end": "1720080"
  },
  {
    "text": "instead that the table is still in the shared database but it is all the",
    "start": "1720080",
    "end": "1725360"
  },
  {
    "text": "interactions with that table come through the service interface rather than going directly against the table the next step is to move that table out",
    "start": "1725360",
    "end": "1732710"
  },
  {
    "text": "of the shared database into a private or local database owned by servus and then we say rinse and repeat",
    "start": "1732710",
    "end": "1741010"
  },
  {
    "text": "right so we do that for the next thing so we move the we create an item service and create a we move the core item table",
    "start": "1741010",
    "end": "1747730"
  },
  {
    "text": "out of the shared database into a private database owned by that service and we do the same thing we're with SKUs",
    "start": "1747730",
    "end": "1753730"
  },
  {
    "text": "or you know the metadata about our inventory so we create a style service and that that manages SKUs does this",
    "start": "1753730",
    "end": "1761260"
  },
  {
    "text": "kind of make sense what I'm saying does it seem super overly simplistic yes",
    "start": "1761260",
    "end": "1766650"
  },
  {
    "text": "it is except there's I've never seen anything any one of these extractions",
    "start": "1766650",
    "end": "1772870"
  },
  {
    "text": "work anyway other than this if you want to break up a monolithic application",
    "start": "1772870",
    "end": "1777940"
  },
  {
    "text": "there are other techniques but breaking up a monolithic database this is the way to do it it seems even to me even though",
    "start": "1777940",
    "end": "1783340"
  },
  {
    "text": "this is probably the 20th time I've said this in front of an audience it still seems overly simplistic so what it",
    "start": "1783340",
    "end": "1789130"
  },
  {
    "text": "elides is not that there are missing steps is that each step is actually pretty complicated does it make sense",
    "start": "1789130",
    "end": "1794590"
  },
  {
    "text": "what I'm saying creating that service like there's a lot of correctly there's a lot of negotiation and discussion about what that service interface should",
    "start": "1794590",
    "end": "1801010"
  },
  {
    "text": "be changing the code just is a little bit more than just pointing two lines from the table into you know into some",
    "start": "1801010",
    "end": "1808030"
  },
  {
    "text": "other place because there are lots of joins to unroll and lots of other dependencies to manage but that is the",
    "start": "1808030",
    "end": "1814090"
  },
  {
    "text": "next step you know having everything go through the service interface and only then can you remove you know that table",
    "start": "1814090",
    "end": "1819310"
  },
  {
    "text": "from the shared database and put it somewhere else anyway so as I mentioned you know this whole practice about",
    "start": "1819310",
    "end": "1824860"
  },
  {
    "text": "patterns and practices and people actually doing it we are actually in the process of doing all this at Citrix",
    "start": "1824860",
    "end": "1830350"
  },
  {
    "text": "right now ok and so here are the service boundaries right and I very",
    "start": "1830350",
    "end": "1835750"
  },
  {
    "text": "intentionally draw the boundaries around both the application parkour you know the sort of business logic be part of",
    "start": "1835750",
    "end": "1841210"
  },
  {
    "text": "the service and the database because nobody should be able to get into one of these bubbles except by going through",
    "start": "1841210",
    "end": "1846790"
  },
  {
    "text": "the published service interface make sense all right now we have started",
    "start": "1846790",
    "end": "1853810"
  },
  {
    "text": "extracting things into micro services let's talk about some of the techniques around managing data in this environment",
    "start": "1853810",
    "end": "1859420"
  },
  {
    "start": "1856000",
    "end": "1856000"
  },
  {
    "text": "and I'm we're going to talk about three of them I'm going to talk about shared data I'm going to talk about joins and",
    "start": "1859420",
    "end": "1864910"
  },
  {
    "text": "I'm going to talk about transactions all of these things are wonderfully trivially easy and powerful within a",
    "start": "1864910",
    "end": "1871620"
  },
  {
    "text": "monolithic environment and they are all made more challenging in a microservices environment so just as we have you know",
    "start": "1871620",
    "end": "1878220"
  },
  {
    "text": "discovered and rediscovered these techniques I want to share them with you so you don't have to rediscover them",
    "start": "1878220",
    "end": "1883740"
  },
  {
    "text": "from Volk loss as maybe we did okay so the first one I want to talk about is",
    "start": "1883740",
    "end": "1889380"
  },
  {
    "text": "shared data the problem here is simply stated in a monolithic database it's very easy to leverage shared data so you",
    "start": "1889380",
    "end": "1897690"
  },
  {
    "text": "know there's some table in there that represents I don't know some metadata or something that's shared I can just join",
    "start": "1897690",
    "end": "1903630"
  },
  {
    "text": "to it right the customer table is right there I need customer information I can go right in there let's add it to my from",
    "start": "1903630",
    "end": "1909690"
  },
  {
    "text": "clause and I'm good and that works fine in a monolithic environment that does not work at all in a micro service",
    "start": "1909690",
    "end": "1916110"
  },
  {
    "text": "environment where where each thing is behind a service interface so how do we do it there's a real problem here and we",
    "start": "1916110",
    "end": "1922590"
  },
  {
    "text": "can't define the problem away so how do we do it three techniques that I want to talk about before I do that there's a",
    "start": "1922590",
    "end": "1928350"
  },
  {
    "text": "principle here which is that every interesting piece of data that we have should be owned by a single service so",
    "start": "1928350",
    "end": "1937320"
  },
  {
    "text": "there is one place in the overall infrastructure of stitch fix or Google or Amazon or Netflix where that owns a",
    "start": "1937320",
    "end": "1944670"
  },
  {
    "text": "particular piece of data there is one service that owns the customer customer",
    "start": "1944670",
    "end": "1950130"
  },
  {
    "text": "information is also often used by lots of other places and sometimes even cached so every other copy in this",
    "start": "1950130",
    "end": "1958410"
  },
  {
    "text": "example of customer data in our infrastructure is a read-only non-authoritative cache we're going to",
    "start": "1958410",
    "end": "1965040"
  },
  {
    "text": "let that sink in a little bit this makes sense there is one place that owns",
    "start": "1965040",
    "end": "1971370"
  },
  {
    "text": "reading and writing this thing every other place that understands anything about customers the address in the you",
    "start": "1971370",
    "end": "1977940"
  },
  {
    "text": "know billing certain your billing information in the billing service all that stuff is just a read-only",
    "start": "1977940",
    "end": "1983450"
  },
  {
    "text": "non-authoritative cache of information that is actually owned by the customer service and this principle is going to",
    "start": "1983450",
    "end": "1989460"
  },
  {
    "text": "help us as we figure out what to do about when we make changes to customers and what does that do with caches and so",
    "start": "1989460",
    "end": "1995760"
  },
  {
    "text": "on this kind of making more sense nods okay nods and photographs",
    "start": "1995760",
    "end": "2002720"
  },
  {
    "text": "okay cool so this is the back this is the problem statement and the principle for the solution so approach one is just",
    "start": "2002720",
    "end": "2011179"
  },
  {
    "text": "synchronously look it up from the place that owns it right so in this particular example you know the customer service is",
    "start": "2011179",
    "end": "2017179"
  },
  {
    "text": "going to be the thing that owns customer data we have what's imagine we have a fulfillment service which is going to ship things to customers that",
    "start": "2017179",
    "end": "2023840"
  },
  {
    "text": "fulfillment service needs to know the address where the customer you know lives or wants us to ship a thing so you",
    "start": "2023840",
    "end": "2029720"
  },
  {
    "text": "want so one totally legitimate way to do it is the fulfillment service in real time calls the customer service and says",
    "start": "2029720",
    "end": "2035690"
  },
  {
    "text": "what is this person to address this makes sense pretty simple okay the",
    "start": "2035690",
    "end": "2041390"
  },
  {
    "text": "second event a second option is let's imagine that for whatever reason it's",
    "start": "2041390",
    "end": "2046580"
  },
  {
    "text": "too expensive for the fulfillment service to ask the customer service in real time instead because the",
    "start": "2046580",
    "end": "2052158"
  },
  {
    "text": "fulfillment service will maybe maintain a cache of the customer data that it cares about so again in this in this",
    "start": "2052159",
    "end": "2058638"
  },
  {
    "text": "example the customer service is the canonical system of record for the customer data the customer service",
    "start": "2058639",
    "end": "2064520"
  },
  {
    "text": "produces an event that says you know address updated or something like that the fulfillment service listens to that event and then updates its local cache",
    "start": "2064520",
    "end": "2071240"
  },
  {
    "text": "this makes that cool alright but there's",
    "start": "2071240",
    "end": "2077540"
  },
  {
    "text": "a third approach which is for things that are shared metadata that don't change very often so examples in stitch",
    "start": "2077540",
    "end": "2084800"
  },
  {
    "text": "fix are things like size schemas so that's like for women sizes you know two",
    "start": "2084800",
    "end": "2090230"
  },
  {
    "text": "four six eight a small medium large extra large so like one could certainly",
    "start": "2090230",
    "end": "2095990"
  },
  {
    "text": "imagine creating an extra extra extra extra extra large and maybe if current trends continue we might have that in",
    "start": "2095990",
    "end": "2101930"
  },
  {
    "text": "the united states but that doesn't happen very often similar things in",
    "start": "2101930",
    "end": "2107420"
  },
  {
    "text": "least in our domain are things like colors fabrics the US states so I hope",
    "start": "2107420",
    "end": "2113090"
  },
  {
    "text": "nobody has a u.s. state service that says you know what are the US states and it returns the 50 US states like it's",
    "start": "2113090",
    "end": "2120470"
  },
  {
    "text": "been the same for 60 years and maybe someday you know Puerto Rico will become the state that would be awesome but you",
    "start": "2120470",
    "end": "2126950"
  },
  {
    "text": "know until then that doesn't change very often so here's how we do it and I used you know we do Ruby on Rails for the",
    "start": "2126950",
    "end": "2132680"
  },
  {
    "text": "most part for our applications with stitch fix in addition to a bunch of back-end services and go so I use the",
    "start": "2132680",
    "end": "2138380"
  },
  {
    "text": "Ruby icons here just to show that so let's imagine that we have one of these pieces of shared metadata and we just",
    "start": "2138380",
    "end": "2146060"
  },
  {
    "text": "distribute you know the color schemas to all these different places this make sense so shared library is a totally",
    "start": "2146060",
    "end": "2152990"
  },
  {
    "text": "legitimate thing to do even though we also have services in our toolbox and I guess the meta point with all these",
    "start": "2152990",
    "end": "2158390"
  },
  {
    "text": "things is there are lots of different ways to do it and just because we're in a service world or a micro service world doesn't",
    "start": "2158390",
    "end": "2163730"
  },
  {
    "text": "mean that we have to forget about other techniques that we've been using for many years to solve problems that are",
    "start": "2163730",
    "end": "2168740"
  },
  {
    "text": "like this okay so that is shared data now I want to talk a little bit about joins so again",
    "start": "2168740",
    "end": "2175580"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "the problem statement in a monolithic database joins are super easy yeah that's one of the most wonderful things",
    "start": "2175580",
    "end": "2180740"
  },
  {
    "text": "about having a monolith if I need customer data I just joined to it and there it is and it's in there and great",
    "start": "2180740",
    "end": "2187330"
  },
  {
    "text": "once I have split my data over multiple services this kind of stuff isn't as",
    "start": "2187330",
    "end": "2192770"
  },
  {
    "text": "easy anymore but I still want to be able to combine you know customer data with order data or something like that so the",
    "start": "2192770",
    "end": "2199070"
  },
  {
    "text": "problem is still there I just need to solve it in a slightly different way so I'll give a couple of techniques for",
    "start": "2199070",
    "end": "2204080"
  },
  {
    "text": "that so approach one again this is pretty obvious approach one is simply joining in real time in the client",
    "start": "2204080",
    "end": "2210740"
  },
  {
    "text": "application right so let's imagine we have an order history page so we want to show to one of our customers here are",
    "start": "2210740",
    "end": "2216710"
  },
  {
    "text": "all the orders you know that we that we sent to you so one could certainly imagine that order history page going to",
    "start": "2216710",
    "end": "2223100"
  },
  {
    "text": "the customer service and saying get me the information about this customer and then separately going off to the order",
    "start": "2223100",
    "end": "2228260"
  },
  {
    "text": "service you know in parallel or in serial or whatever going off to the order service and asking for all the",
    "start": "2228260",
    "end": "2234050"
  },
  {
    "text": "matching orders for that customer this makes sense yeah if this doesn't seem",
    "start": "2234050",
    "end": "2239180"
  },
  {
    "text": "familiar it's oh sorry and this is this use case sorry this approach is best when it's a kind of one to end joint",
    "start": "2239180",
    "end": "2245540"
  },
  {
    "text": "right so there's one customer with many orders if this seems familiar it's every",
    "start": "2245540",
    "end": "2251690"
  },
  {
    "text": "web application you've ever built unless unless every aspect of your web page comes from one and only one data",
    "start": "2251690",
    "end": "2257690"
  },
  {
    "text": "source every web page is like the like go one place for the customer data another place for the order data and we",
    "start": "2257690",
    "end": "2264140"
  },
  {
    "text": "put it all together and we show it as one thing okay that is one very legitimate approach which we absolutely",
    "start": "2264140",
    "end": "2270530"
  },
  {
    "text": "use at stitch fix another approach which we also use is approach that I call",
    "start": "2270530",
    "end": "2276980"
  },
  {
    "text": "materializing the view so the idea here is that it might be that I can't join in",
    "start": "2276980",
    "end": "2282680"
  },
  {
    "text": "real time because there are lots of items and lots of pieces of feedback all",
    "start": "2282680",
    "end": "2287900"
  },
  {
    "text": "together like maybe there's just too many items and too many other things on the other side of the join and it's just",
    "start": "2287900",
    "end": "2293750"
  },
  {
    "text": "too expensive to join in real time so what I want to do is essentially maintain a cache of that join wherever",
    "start": "2293750",
    "end": "2299840"
  },
  {
    "text": "I'm using it so how does this work in practice let's imagine that there is whoops there",
    "start": "2299840",
    "end": "2305300"
  },
  {
    "text": "we go let's imagine that there is an item feedback service where we want to show all the feedback that our customers have",
    "start": "2305300",
    "end": "2311630"
  },
  {
    "text": "given about each item so we have a bunch of individual items and a lots of pieces lots of pieces of feedback about each",
    "start": "2311630",
    "end": "2318530"
  },
  {
    "text": "item so it's a many-to-many relationship or an m2n join so this item feedback",
    "start": "2318530",
    "end": "2324320"
  },
  {
    "text": "service might maintain a denormalized cache of items joined to order order",
    "start": "2324320",
    "end": "2329570"
  },
  {
    "text": "feedback by listening to events from the item service and then separately listening to events from the order",
    "start": "2329570",
    "end": "2336080"
  },
  {
    "text": "feedback service and then updating that join in real time does it make sense",
    "start": "2336080",
    "end": "2341470"
  },
  {
    "text": "yeah so I'm I'm using database terminology here a very advisedly so this is in oracle or sequel server or",
    "start": "2341470",
    "end": "2349190"
  },
  {
    "text": "some other you know commercial-grade relational databases there is an idea of materializing a view this is a join and",
    "start": "2349190",
    "end": "2355280"
  },
  {
    "text": "you just simply maintain a cache of it and it gets updated by when the",
    "start": "2355280",
    "end": "2361640"
  },
  {
    "text": "individual kind of elements of the join get changed okay if this seems a little bit weird or unfamiliar let me give you",
    "start": "2361640",
    "end": "2369530"
  },
  {
    "text": "some other examples of that common systems that you use every day that do this almost every no sequel approach",
    "start": "2369530",
    "end": "2375620"
  },
  {
    "text": "takes this tactic relational databases optimized for the right side you write",
    "start": "2375620",
    "end": "2380690"
  },
  {
    "text": "individual records and then at the read time you combine them all together most no sequel approaches the Cassandra is",
    "start": "2380690",
    "end": "2386990"
  },
  {
    "text": "the reacts of the world are mostly the other way where instead of writing individual things and joining at the end",
    "start": "2386990",
    "end": "2393700"
  },
  {
    "text": "you write in parallel a bunch of different you basically write all the queries you're going to ask in parallel",
    "start": "2393700",
    "end": "2400690"
  },
  {
    "text": "and then you ask the queries and the queries are fast again as I mentioned lots of commercial-grade",
    "start": "2400690",
    "end": "2406330"
  },
  {
    "text": "database systems have this concept of a materialized view search engines are like this right so if you have an",
    "start": "2406330",
    "end": "2411850"
  },
  {
    "text": "elastic search in your anywhere in your infrastructure probably you are doing a thing just like I mentioned every",
    "start": "2411850",
    "end": "2418510"
  },
  {
    "text": "analytic system in the world is combining together joining together data that comes from multiple data sources",
    "start": "2418510",
    "end": "2423760"
  },
  {
    "text": "and also log aggregators for operational logs so lots of use cases for this",
    "start": "2423760",
    "end": "2430000"
  },
  {
    "text": "particular pattern this makes sense ok",
    "start": "2430000",
    "end": "2435280"
  },
  {
    "text": "we're going to step it up a notch now we're going to talk about transactions the problem here or the wonderfulness in",
    "start": "2435280",
    "end": "2442720"
  },
  {
    "start": "2437000",
    "end": "2437000"
  },
  {
    "text": "the monolithic database is that transactions are super easy right I want to update atomically a thing and beefing",
    "start": "2442720",
    "end": "2450340"
  },
  {
    "text": "and see thing and D thing in one unit I want it to be acid all done or not done at all that is really easy in a",
    "start": "2450340",
    "end": "2457090"
  },
  {
    "text": "monolithic database and it is very hard to crossing across services what I do",
    "start": "2457090",
    "end": "2462130"
  },
  {
    "text": "not recommend is thinking about it as a multi like a distributed transaction",
    "start": "2462130",
    "end": "2468340"
  },
  {
    "text": "two-phase commit please do not do that that's a scalability killer and a performance killer but I will give you",
    "start": "2468340",
    "end": "2474730"
  },
  {
    "text": "some techniques to get most of what you want from the transactional world ok instead of thinking about it as a atomic",
    "start": "2474730",
    "end": "2482470"
  },
  {
    "text": "transaction think about it is what's called a saga this people have heard the term saga it's okay if you haven't wow",
    "start": "2482470",
    "end": "2488800"
  },
  {
    "text": "more than I expected maybe a quarter of the people great Katie McCaffrey from Twitter just left",
    "start": "2488800",
    "end": "2494320"
  },
  {
    "text": "Twitter given a wonderful set of talks specifically about sagas way more detail than I can give you in two seconds so",
    "start": "2494320",
    "end": "2500350"
  },
  {
    "text": "that's worth taking a look at if if this is unfamiliar but the general idea is take that transaction where I wanted to",
    "start": "2500350",
    "end": "2507820"
  },
  {
    "text": "update a and B and C and D together and think about it as a workflow think about",
    "start": "2507820",
    "end": "2513370"
  },
  {
    "text": "it as a state machine of first light update a then I produce an event and update B then I produce an event and",
    "start": "2513370",
    "end": "2520090"
  },
  {
    "text": "update C and then I produce an event and update so think about it again think about it as a saga or a workflow of individual",
    "start": "2520090",
    "end": "2527369"
  },
  {
    "text": "atomic transactions that are each within a service boundary but you connect them together with events and you maintain a",
    "start": "2527369",
    "end": "2533970"
  },
  {
    "text": "kind of state machine of where where you are is this kind of somewhat making sense yeah so how do you do roll back",
    "start": "2533970",
    "end": "2541440"
  },
  {
    "text": "Randy I'm glad you asked you just run the workflow back the other direction so",
    "start": "2541440",
    "end": "2546840"
  },
  {
    "text": "you apply what are called compensating operations that undo the thing that you had done in the forward direction so",
    "start": "2546840",
    "end": "2554480"
  },
  {
    "text": "let's imagine we got all the way to updating a and B and C and D and then we needed to rollback for some reason you",
    "start": "2554480",
    "end": "2560940"
  },
  {
    "text": "would remove the thing that you added to D or sort of undo that update it would produce some events it would update the",
    "start": "2560940",
    "end": "2567990"
  },
  {
    "text": "C it would update the B and then it would update the a so just in the same way as you know there's a forward",
    "start": "2567990",
    "end": "2574110"
  },
  {
    "text": "movement through your state machine in the like commit case there is a backward",
    "start": "2574110",
    "end": "2579360"
  },
  {
    "text": "movement for your state machine in the rollback case making sense yeah if this",
    "start": "2579360",
    "end": "2585630"
  },
  {
    "text": "does not seem familiar let me give you some ideas where this happens all the time every single payment processing",
    "start": "2585630",
    "end": "2591930"
  },
  {
    "text": "system that you could imagine works this way again financial systems do not do distributive transactions for the most",
    "start": "2591930",
    "end": "2598109"
  },
  {
    "text": "part so any type any time you interact with a third party payment provider like you know visa or Braintree or you know",
    "start": "2598109",
    "end": "2604800"
  },
  {
    "text": "something like that they are going through a workflow they first do this thing and then they you know acquire the",
    "start": "2604800",
    "end": "2610410"
  },
  {
    "text": "thing and then they go to the bank and I don't know this stuff but like they go to all the different banks and like do all the individual sets of things and at",
    "start": "2610410",
    "end": "2617340"
  },
  {
    "text": "the end of the at the end of which you know my money moves from you know my pocket into you know somebody else's pocket something like that",
    "start": "2617340",
    "end": "2623940"
  },
  {
    "text": "every approval workflow that you've ever seen in your company expenses you know",
    "start": "2623940",
    "end": "2629790"
  },
  {
    "text": "first it goes to this person then it gets approved or you know send out to the next person next person etc you know",
    "start": "2629790",
    "end": "2635910"
  },
  {
    "text": "Randi expense for the Jazz Club goes up and like gets rejected by the CEO unfortunately and back down and then I",
    "start": "2635910",
    "end": "2642690"
  },
  {
    "text": "try to but the Jazz Club was for work and yeah that didn't actually happen but I'd like you to yeah so any multi-step",
    "start": "2642690",
    "end": "2650790"
  },
  {
    "text": "workflow does this thing okay so the last thing I want to say about trends actually",
    "start": "2650790",
    "end": "2656010"
  },
  {
    "text": "because I we do have a whole serverless track which you should absolutely attend I sort of feel like I can't in fairness end a microservices talk",
    "start": "2656010",
    "end": "2663600"
  },
  {
    "text": "without giving a bit of a nod to the serverless techniques I would prefer to call them functions as a service instead",
    "start": "2663600",
    "end": "2669390"
  },
  {
    "text": "of serverless but that's just me serverless is a great way of",
    "start": "2669390",
    "end": "2674400"
  },
  {
    "text": "implementing what I just talked about why because those operations that I want",
    "start": "2674400",
    "end": "2681090"
  },
  {
    "text": "to take in these in this workflow are super small right it's very lightweight logic maybe you know when you get right",
    "start": "2681090",
    "end": "2687150"
  },
  {
    "text": "down to it 10 or 20 lines of code they are stateless right so I receive an event I do some computation and then I",
    "start": "2687150",
    "end": "2694500"
  },
  {
    "text": "you know produce an event and it's also again triggered by events so something like Amazon lambda or Google Cloud",
    "start": "2694500",
    "end": "2701160"
  },
  {
    "text": "functions or Azure functions are a perfect match for this thing does it",
    "start": "2701160",
    "end": "2706290"
  },
  {
    "text": "make sense it is super small targeted stateless logic that is triggered from",
    "start": "2706290",
    "end": "2712440"
  },
  {
    "text": "events and producing events so server list is a perfect technique for for this okay",
    "start": "2712440",
    "end": "2719130"
  },
  {
    "text": "so just to sort of sum up again as I mentioned you know I think to do micro service as well and to develop software",
    "start": "2719130",
    "end": "2725340"
  },
  {
    "text": "in a modern way you want to have organizations that are sort of built out of small teams you want to do practices",
    "start": "2725340",
    "end": "2731940"
  },
  {
    "text": "of sort of test-driven development and continuous delivery from a cultural perspective you really want a culture of",
    "start": "2731940",
    "end": "2737880"
  },
  {
    "text": "ownership where the same team that builds a thing also operates the thing and then again at particularly at the",
    "start": "2737880",
    "end": "2744780"
  },
  {
    "text": "kind of scale that we're talking about here the scale of team size scale and the sort of load scale or customer scale",
    "start": "2744780",
    "end": "2752850"
  },
  {
    "text": "web scale micro service those are a really great great way to go so I do",
    "start": "2752850",
    "end": "2758910"
  },
  {
    "text": "want to make sure that I leave a few moments for questions but I'll leave this up I would be remiss in our modern",
    "start": "2758910",
    "end": "2764310"
  },
  {
    "text": "you know world to not mention that stitch fix is hiring and in particular",
    "start": "2764310",
    "end": "2769380"
  },
  {
    "text": "so we're based in San Francisco but less than half of my engineers actually live there more than half of the engineers at",
    "start": "2769380",
    "end": "2776160"
  },
  {
    "text": "stitch fix are scattered all around the United States some in our regional offices in Austin and Pittsburgh but",
    "start": "2776160",
    "end": "2782520"
  },
  {
    "text": "also people from all over the country all the way from Hawaii to New York and",
    "start": "2782520",
    "end": "2788490"
  },
  {
    "text": "New Jersey down to the Carolinas like all over the place and you know we're hiring in",
    "start": "2788490",
    "end": "2794010"
  },
  {
    "text": "application development which are the kinds of things that you know the customers fee we're hiring in our",
    "start": "2794010",
    "end": "2799230"
  },
  {
    "text": "platform group that builds the underlying technologies that I'm talking about and then we're hiring in that data",
    "start": "2799230",
    "end": "2804810"
  },
  {
    "text": "science team that tells us how to be smart so if any of this sounds interesting I'm going to be around for the whole rest of the conference so",
    "start": "2804810",
    "end": "2810960"
  },
  {
    "text": "please see me in person physically or contact me virtually in one of these ways because yeah Citrix is a great",
    "start": "2810960",
    "end": "2818250"
  },
  {
    "text": "place to work and if this stuff sounds cool then come join us so now I think I have a few minutes for questions I can",
    "start": "2818250",
    "end": "2830190"
  },
  {
    "text": "repeat it if you yell it",
    "start": "2830190",
    "end": "2833150"
  },
  {
    "text": "exactly one event delivery yes one of the questions they've already had about",
    "start": "2846769",
    "end": "2853099"
  },
  {
    "text": "their second shared data example you gotta like you with it ends never",
    "start": "2853099",
    "end": "2858150"
  },
  {
    "text": "arrived or then awesome why yeah that's a very great question so just to replay the whole question distributed systems",
    "start": "2858150",
    "end": "2865769"
  },
  {
    "text": "do not do exactly once delivery true statements how do you deal with events not arriving coming out of order coming",
    "start": "2865769",
    "end": "2873150"
  },
  {
    "text": "to multiple times yeah that's the whole talk in itself I mean I will give you an answer and also it's the whole talk in",
    "start": "2873150",
    "end": "2878549"
  },
  {
    "text": "itself which hopefully I'll deliver at some point so the first point exactly once delivery that is a myth the FLP",
    "start": "2878549",
    "end": "2886799"
  },
  {
    "text": "result shows that it's actually impossible in practice to get that you can get maybe closed in lots of situations but you can't get in the same",
    "start": "2886799",
    "end": "2893249"
  },
  {
    "text": "ways you can't have perfect availability you can't have you can't have exactly ones delivery in all situations so true",
    "start": "2893249",
    "end": "2899400"
  },
  {
    "text": "statements don't rely on that okay what do you do so that means that you might get events out of order you might get",
    "start": "2899400",
    "end": "2906150"
  },
  {
    "text": "and you might get events multiple times does it make sense okay first two-step",
    "start": "2906150",
    "end": "2911249"
  },
  {
    "text": "so there are two ways to design an event system one is called at least once delivery and the other is",
    "start": "2911249",
    "end": "2917009"
  },
  {
    "text": "called at most once delivery you want the first part so at most once means",
    "start": "2917009",
    "end": "2922380"
  },
  {
    "text": "that you will receive an event either as 0 times or one time only do that",
    "start": "2922380",
    "end": "2927390"
  },
  {
    "text": "mechanism when you don't care about that thing right so actually logging is a great example there are lots of logging",
    "start": "2927390",
    "end": "2932999"
  },
  {
    "text": "systems that use UDP or unreliable protocols exactly because if that logging message didn't get there shrug",
    "start": "2932999",
    "end": "2940199"
  },
  {
    "text": "no big deal but any any time you use events for business stuff you want to use the at least one so if there is a",
    "start": "2940199",
    "end": "2947039"
  },
  {
    "text": "situation if something goes wrong or if the sender cannot does not know that it",
    "start": "2947039",
    "end": "2953059"
  },
  {
    "text": "was sent properly then the sender will try to send again so that is the at least once delivery okay we'll start",
    "start": "2953059",
    "end": "2960839"
  },
  {
    "text": "from that so now with at least once you have two problems I will I will get the same thing multiple times and I will get",
    "start": "2960839",
    "end": "2967259"
  },
  {
    "text": "them out of order the at least the multiple times is it forces your",
    "start": "2967259",
    "end": "2974880"
  },
  {
    "text": "consumer of the events to be what's called item potent so item potency is a mathematical term it means that f of X is the same as",
    "start": "2974880",
    "end": "2983070"
  },
  {
    "text": "f of f of X so for the non-math majors i was a math major for the non-math majors",
    "start": "2983070",
    "end": "2988200"
  },
  {
    "text": "in the room what that means is if I do a thing one time or I do it many times I have the same result does it make sense",
    "start": "2988200",
    "end": "2994170"
  },
  {
    "text": "idempotency so you need to write your consumers in order to be item potent so if I do a thing if I increment a counter",
    "start": "2994170",
    "end": "3001280"
  },
  {
    "text": "I need to make sure I don't implement it multiple times there's lots of good academic work about on techniques for",
    "start": "3001280",
    "end": "3008090"
  },
  {
    "text": "doing that they're a little complicated and please don't try to discover them from first principles but there are but",
    "start": "3008090",
    "end": "3013610"
  },
  {
    "text": "you should know there are lots of techniques in our computer science toolbox for doing item potent thing there's no matter what you're trying to",
    "start": "3013610",
    "end": "3019430"
  },
  {
    "text": "achieve that is the item potency part for the events received out of order if you care about the ordering of events",
    "start": "3019430",
    "end": "3026270"
  },
  {
    "text": "and first off I would try to say see if you can avoid caring about it because often times you can it doesn't matter",
    "start": "3026270",
    "end": "3032570"
  },
  {
    "text": "what order they come in for lots of use cases but when it does then you will",
    "start": "3032570",
    "end": "3038090"
  },
  {
    "text": "need to maintain some state on the server side on the consumer side does it make sense like let's imagine that I",
    "start": "3038090",
    "end": "3044810"
  },
  {
    "text": "have events that say I update a I create",
    "start": "3044810",
    "end": "3050030"
  },
  {
    "text": "a customer and I delete a customer let's imagine that most come out of order so I first get the delete customer and then I",
    "start": "3050030",
    "end": "3056660"
  },
  {
    "text": "get the update and I get the create customer oh the end of which if I didn't do it properly then the end of the end",
    "start": "3056660",
    "end": "3063350"
  },
  {
    "text": "result of that is that I have a customer when what I intended was what I didn't did the example make sense for people",
    "start": "3063350",
    "end": "3069640"
  },
  {
    "text": "nods yeah so again in the I'm gonna get a little fancy look up see our DTS",
    "start": "3069640",
    "end": "3076810"
  },
  {
    "text": "they are data types like what is it concurrent replicated data type something like that anyways there are",
    "start": "3076810",
    "end": "3083870"
  },
  {
    "text": "lots of sort of techniques in the literature about how to deal with all these things and including this exact example that I gave there there's a",
    "start": "3083870",
    "end": "3090800"
  },
  {
    "text": "thing called tombstones which is implemented in Cassandra and other distributed systems that have to deal with this where like if I received a",
    "start": "3090800",
    "end": "3097460"
  },
  {
    "text": "delete I kind of remember the delete for awhile just in case somebody comes along with a create the basic sense ish yes",
    "start": "3097460",
    "end": "3104810"
  },
  {
    "text": "the thing you should take away is not that you know the answer is that you know that there is an answer and you can go",
    "start": "3104810",
    "end": "3110730"
  },
  {
    "text": "I am being told to get off the stage and give you an opportunity to get some more",
    "start": "3110730",
    "end": "3115770"
  },
  {
    "text": "coffee but again I'm going to be around for the whole rest of the conference please enjoy it and I hope you stay in",
    "start": "3115770",
    "end": "3120870"
  },
  {
    "text": "micro-services we're going to have an awesome day thank you",
    "start": "3120870",
    "end": "3125240"
  }
]