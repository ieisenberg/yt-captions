[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "yeah I am uh I'm going to be talking",
    "start": "8160",
    "end": "10000"
  },
  {
    "text": "about uh schol Z stream today and uh got",
    "start": "10000",
    "end": "14440"
  },
  {
    "text": "a lot of stuff I want to get to so I'm",
    "start": "14440",
    "end": "16118"
  },
  {
    "text": "pretty much just gonna get right to it",
    "start": "16119",
    "end": "18680"
  },
  {
    "text": "so",
    "start": "18680",
    "end": "20119"
  },
  {
    "text": "um okay what is schaly Stream So scaly",
    "start": "20119",
    "end": "24680"
  },
  {
    "text": "stream is a library for doing uh stream",
    "start": "24680",
    "end": "28880"
  },
  {
    "text": "processing and and uh",
    "start": "28880",
    "end": "31520"
  },
  {
    "text": "IO and sort of the goal the goals of the",
    "start": "31520",
    "end": "34200"
  },
  {
    "text": "library are that we want uh we want to",
    "start": "34200",
    "end": "36120"
  },
  {
    "text": "write programs that do IO in a",
    "start": "36120",
    "end": "37800"
  },
  {
    "text": "compositional way uh so we want to be",
    "start": "37800",
    "end": "40399"
  },
  {
    "text": "able to assemble them from smaller",
    "start": "40399",
    "end": "42559"
  },
  {
    "text": "pieces and another sort of big goal of",
    "start": "42559",
    "end": "45160"
  },
  {
    "text": "the library is we want to make it really",
    "start": "45160",
    "end": "47360"
  },
  {
    "text": "easy to write code that is resource safe",
    "start": "47360",
    "end": "49600"
  },
  {
    "text": "so we want to make sure that file",
    "start": "49600",
    "end": "50840"
  },
  {
    "text": "handles get closed database connections",
    "start": "50840",
    "end": "53440"
  },
  {
    "text": "get closed when they're supposed to and",
    "start": "53440",
    "end": "55359"
  },
  {
    "text": "so",
    "start": "55359",
    "end": "56320"
  },
  {
    "start": "56000",
    "end": "477000"
  },
  {
    "text": "forth and um I guess sort of the origin",
    "start": "56320",
    "end": "60199"
  },
  {
    "text": "of the project is you know it sort of",
    "start": "60199",
    "end": "62519"
  },
  {
    "text": "started as uh you know some some work",
    "start": "62519",
    "end": "65640"
  },
  {
    "text": "that Runar and I did for the book and",
    "start": "65640",
    "end": "68400"
  },
  {
    "text": "you know last year when I was up here",
    "start": "68400",
    "end": "69880"
  },
  {
    "text": "talking about this stuff this was",
    "start": "69880",
    "end": "71759"
  },
  {
    "text": "somewhat theoretical vaporware uh or you",
    "start": "71759",
    "end": "74520"
  },
  {
    "text": "know prototype code that that we had",
    "start": "74520",
    "end": "76360"
  },
  {
    "text": "written for the book and uh but yeah now",
    "start": "76360",
    "end": "79479"
  },
  {
    "text": "it's actually a real library and and you",
    "start": "79479",
    "end": "81320"
  },
  {
    "text": "can use it for real things and uh you",
    "start": "81320",
    "end": "83280"
  },
  {
    "text": "know hopefully uh this will peque",
    "start": "83280",
    "end": "85880"
  },
  {
    "text": "people's interests and uh you know",
    "start": "85880",
    "end": "87960"
  },
  {
    "text": "they'll actually maybe try try using it",
    "start": "87960",
    "end": "89960"
  },
  {
    "text": "so by just by show of hands how many",
    "start": "89960",
    "end": "92000"
  },
  {
    "text": "people are using uh scaly stream",
    "start": "92000",
    "end": "96000"
  },
  {
    "text": "now okay not not too many all right well",
    "start": "96079",
    "end": "100159"
  },
  {
    "text": "uh all right we we'll we'll uh we'll see",
    "start": "100159",
    "end": "102000"
  },
  {
    "text": "how this goes so so scaly stream is it's",
    "start": "102000",
    "end": "105600"
  },
  {
    "text": "based on the core data type of the",
    "start": "105600",
    "end": "107880"
  },
  {
    "text": "library is this data type",
    "start": "107880",
    "end": "110040"
  },
  {
    "text": "process and so conceptually uh process",
    "start": "110040",
    "end": "113439"
  },
  {
    "text": "represents a stream of",
    "start": "113439",
    "end": "115960"
  },
  {
    "text": "values and but it's sort of a special",
    "start": "115960",
    "end": "118240"
  },
  {
    "text": "type of stream in that it may May",
    "start": "118240",
    "end": "121000"
  },
  {
    "text": "periodically uh sort of stop and wait",
    "start": "121000",
    "end": "124039"
  },
  {
    "text": "for some request external request to",
    "start": "124039",
    "end": "127079"
  },
  {
    "text": "come back before it continues emitting",
    "start": "127079",
    "end": "130160"
  },
  {
    "text": "values so uh I'll kind of talk more",
    "start": "130160",
    "end": "134560"
  },
  {
    "text": "about what that means in a minute but",
    "start": "134560",
    "end": "135920"
  },
  {
    "text": "sort of the simplest the simplest way of",
    "start": "135920",
    "end": "137680"
  },
  {
    "text": "creating a process is we can just create",
    "start": "137680",
    "end": "140599"
  },
  {
    "text": "a literal process that is going to emit",
    "start": "140599",
    "end": "142720"
  },
  {
    "text": "you know the values that we give it so I",
    "start": "142720",
    "end": "144720"
  },
  {
    "text": "can say uh process one two",
    "start": "144720",
    "end": "147000"
  },
  {
    "text": "three and you know we can see it's just",
    "start": "147000",
    "end": "150040"
  },
  {
    "text": "a process that's literally going to emit",
    "start": "150040",
    "end": "151840"
  },
  {
    "text": "the values one two three now process has",
    "start": "151840",
    "end": "154239"
  },
  {
    "text": "two type parameters here one is int so",
    "start": "154239",
    "end": "156800"
  },
  {
    "text": "that is the the output type the the type",
    "start": "156800",
    "end": "160000"
  },
  {
    "text": "of elements that the stream is going to",
    "start": "160000",
    "end": "161760"
  },
  {
    "text": "be emitting and this this first type",
    "start": "161760",
    "end": "164840"
  },
  {
    "text": "parameter is the request type so if this",
    "start": "164840",
    "end": "168560"
  },
  {
    "text": "were an effectful process that we're",
    "start": "168560",
    "end": "170440"
  },
  {
    "text": "making some external requests we would",
    "start": "170440",
    "end": "173080"
  },
  {
    "text": "see something else here besides nothing",
    "start": "173080",
    "end": "175440"
  },
  {
    "text": "the fact that it's nothing is just",
    "start": "175440",
    "end": "176840"
  },
  {
    "text": "saying that this is a pure just inmemory",
    "start": "176840",
    "end": "179360"
  },
  {
    "text": "sequence it's not executing any external",
    "start": "179360",
    "end": "182760"
  },
  {
    "text": "requests or or won't ever um asked to",
    "start": "182760",
    "end": "185959"
  },
  {
    "text": "execute those",
    "start": "185959",
    "end": "188440"
  },
  {
    "text": "requests so um just a little bit of I'm",
    "start": "188440",
    "end": "192799"
  },
  {
    "text": "just to make the slides a little shorter",
    "start": "192799",
    "end": "194360"
  },
  {
    "text": "I'm saying Val p is equal to process and",
    "start": "194360",
    "end": "197280"
  },
  {
    "text": "so a lot of the operations that are",
    "start": "197280",
    "end": "198560"
  },
  {
    "text": "defined on lists are also defined on uh",
    "start": "198560",
    "end": "202319"
  },
  {
    "text": "processes so I can uh append them append",
    "start": "202319",
    "end": "206200"
  },
  {
    "text": "one process to the next these are all",
    "start": "206200",
    "end": "208080"
  },
  {
    "text": "just different ways of kind of writing a",
    "start": "208080",
    "end": "211080"
  },
  {
    "text": "process that is just going to emit some",
    "start": "211080",
    "end": "212599"
  },
  {
    "text": "values to the output I can emit a single",
    "start": "212599",
    "end": "214400"
  },
  {
    "text": "value if I have a sequence I can just",
    "start": "214400",
    "end": "216680"
  },
  {
    "text": "emit uh you know all the elements of the",
    "start": "216680",
    "end": "219120"
  },
  {
    "text": "sequence to the output and you know you",
    "start": "219120",
    "end": "221720"
  },
  {
    "text": "can see the the result is pretty much",
    "start": "221720",
    "end": "223480"
  },
  {
    "text": "what you would",
    "start": "223480",
    "end": "225000"
  },
  {
    "text": "expect",
    "start": "225000",
    "end": "227080"
  },
  {
    "text": "okay and yeah just just to mention so",
    "start": "227080",
    "end": "230280"
  },
  {
    "text": "you know there's map filter fold so so I",
    "start": "230280",
    "end": "233200"
  },
  {
    "text": "mean all the operations you would expect",
    "start": "233200",
    "end": "236079"
  },
  {
    "text": "uh you know for lists are also defined",
    "start": "236079",
    "end": "237760"
  },
  {
    "text": "on process uh and yeah these are just a",
    "start": "237760",
    "end": "241360"
  },
  {
    "text": "few a few",
    "start": "241360",
    "end": "242959"
  },
  {
    "text": "examples uh if you you know are in the",
    "start": "242959",
    "end": "246079"
  },
  {
    "text": "reppel you you know have a process do",
    "start": "246079",
    "end": "248239"
  },
  {
    "text": "tab completion you can see there's a",
    "start": "248239",
    "end": "249400"
  },
  {
    "text": "whole bunch of functions I'm not going",
    "start": "249400",
    "end": "250599"
  },
  {
    "text": "to go over all of them here but I mean",
    "start": "250599",
    "end": "253000"
  },
  {
    "text": "you know the idea is if it if it makes",
    "start": "253000",
    "end": "254799"
  },
  {
    "text": "sense for a sequence it probably make",
    "start": "254799",
    "end": "256560"
  },
  {
    "text": "sense for a process as",
    "start": "256560",
    "end": "259239"
  },
  {
    "text": "well okay so uh so so far I've just been",
    "start": "259239",
    "end": "264040"
  },
  {
    "text": "talking about you know these pure pure",
    "start": "264040",
    "end": "266040"
  },
  {
    "text": "sequences which aren't there's no IO",
    "start": "266040",
    "end": "268320"
  },
  {
    "text": "involved so it's you know not very",
    "start": "268320",
    "end": "269919"
  },
  {
    "text": "interesting you're thinking well I could",
    "start": "269919",
    "end": "271880"
  },
  {
    "text": "I could have done all these things with",
    "start": "271880",
    "end": "273120"
  },
  {
    "text": "just regular Scola",
    "start": "273120",
    "end": "274800"
  },
  {
    "text": "collections so uh here's an example of",
    "start": "274800",
    "end": "277800"
  },
  {
    "text": "our first uh effectful",
    "start": "277800",
    "end": "280440"
  },
  {
    "text": "Stream So this process Fizz is going to",
    "start": "280440",
    "end": "284880"
  },
  {
    "text": "wake up every 3 seconds and emit the",
    "start": "284880",
    "end": "287160"
  },
  {
    "text": "value",
    "start": "287160",
    "end": "288600"
  },
  {
    "text": "Fizz and um so a couple things to notice",
    "start": "288600",
    "end": "291720"
  },
  {
    "text": "here so one is the okay the output type",
    "start": "291720",
    "end": "294039"
  },
  {
    "text": "is string so we're obviously emitting",
    "start": "294039",
    "end": "296720"
  },
  {
    "text": "you know the string",
    "start": "296720",
    "end": "298320"
  },
  {
    "text": "Fizz uh but now we can see this is no",
    "start": "298320",
    "end": "300600"
  },
  {
    "text": "longer nothing this is Task and task is",
    "start": "300600",
    "end": "304560"
  },
  {
    "text": "uh it's a data type from Scola Z it's",
    "start": "304560",
    "end": "308800"
  },
  {
    "text": "sort of a better IO that handles um",
    "start": "308800",
    "end": "312280"
  },
  {
    "text": "binding to asynchronous and parallel",
    "start": "312280",
    "end": "314960"
  },
  {
    "text": "computations and also has some good",
    "start": "314960",
    "end": "316800"
  },
  {
    "text": "support for exception handling I'm going",
    "start": "316800",
    "end": "318360"
  },
  {
    "text": "to show some examples of task a little",
    "start": "318360",
    "end": "320520"
  },
  {
    "text": "bit later but this is just saying that",
    "start": "320520",
    "end": "323600"
  },
  {
    "text": "okay waking up every 3 seconds that's",
    "start": "323600",
    "end": "326080"
  },
  {
    "text": "that's sort of it's going to be a series",
    "start": "326080",
    "end": "328280"
  },
  {
    "text": "of these asynchronous steps",
    "start": "328280",
    "end": "330440"
  },
  {
    "text": "we want to go to sleep not literally by",
    "start": "330440",
    "end": "333759"
  },
  {
    "text": "blocking the thread but we want to",
    "start": "333759",
    "end": "335400"
  },
  {
    "text": "schedule uh you know an asynchronous",
    "start": "335400",
    "end": "337560"
  },
  {
    "text": "task to be Run 3 seconds later and we",
    "start": "337560",
    "end": "339479"
  },
  {
    "text": "want to keep doing",
    "start": "339479",
    "end": "341240"
  },
  {
    "text": "that and we can see that the you know",
    "start": "341240",
    "end": "344400"
  },
  {
    "text": "just the representation of it is it's no",
    "start": "344400",
    "end": "346840"
  },
  {
    "text": "longer just you know emitting some",
    "start": "346840",
    "end": "348479"
  },
  {
    "text": "values it's this",
    "start": "348479",
    "end": "349919"
  },
  {
    "text": "await so a process is a state machine it",
    "start": "349919",
    "end": "352960"
  },
  {
    "text": "can be one of three states it can be",
    "start": "352960",
    "end": "354919"
  },
  {
    "text": "emitting values it can be awaiting for",
    "start": "354919",
    "end": "358080"
  },
  {
    "text": "the result of some request",
    "start": "358080",
    "end": "361000"
  },
  {
    "text": "or it could be halted so it's it's done",
    "start": "361000",
    "end": "363960"
  },
  {
    "text": "emitting",
    "start": "363960",
    "end": "366360"
  },
  {
    "text": "values uh and this is just to show that",
    "start": "366479",
    "end": "368919"
  },
  {
    "text": "you know that that effectful stream that",
    "start": "368919",
    "end": "370880"
  },
  {
    "text": "I that I just created I mean I can still",
    "start": "370880",
    "end": "372960"
  },
  {
    "text": "call take I can still call filter I can",
    "start": "372960",
    "end": "375720"
  },
  {
    "text": "still call drop I can still call those",
    "start": "375720",
    "end": "377400"
  },
  {
    "text": "same functions on it it doesn't matter",
    "start": "377400",
    "end": "379800"
  },
  {
    "text": "that it's this effectful",
    "start": "379800",
    "end": "382960"
  },
  {
    "text": "thing uh and then just to kind of",
    "start": "382960",
    "end": "385000"
  },
  {
    "text": "observe what's what's happening here so",
    "start": "385000",
    "end": "387240"
  },
  {
    "text": "here I'm using like an evil side effect",
    "start": "387240",
    "end": "389759"
  },
  {
    "text": "to just print out the the Val the values",
    "start": "389759",
    "end": "392599"
  },
  {
    "text": "that are emitted by the",
    "start": "392599",
    "end": "394280"
  },
  {
    "text": "stream and um if I want to actually you",
    "start": "394280",
    "end": "398840"
  },
  {
    "text": "know run this Stream So this this is a",
    "start": "398840",
    "end": "402039"
  },
  {
    "text": "conceptually you know it's it's a",
    "start": "402039",
    "end": "404840"
  },
  {
    "text": "program that is going to when it is run",
    "start": "404840",
    "end": "406759"
  },
  {
    "text": "it's going to emit some values so how do",
    "start": "406759",
    "end": "409160"
  },
  {
    "text": "I actually run that stream and and sort",
    "start": "409160",
    "end": "412479"
  },
  {
    "text": "of get get something out of it so uh",
    "start": "412479",
    "end": "415400"
  },
  {
    "text": "there's this function uh run log which",
    "start": "415400",
    "end": "418599"
  },
  {
    "text": "takes a",
    "start": "418599",
    "end": "420440"
  },
  {
    "text": "stream um a it it takes a stream and",
    "start": "420440",
    "end": "423919"
  },
  {
    "text": "it's going to sort of compile that down",
    "start": "423919",
    "end": "425840"
  },
  {
    "text": "to a single monolithic",
    "start": "425840",
    "end": "428560"
  },
  {
    "text": "task and um the task the value of the",
    "start": "428560",
    "end": "431919"
  },
  {
    "text": "task is just going to be the values that",
    "start": "431919",
    "end": "433560"
  },
  {
    "text": "are emitted by the",
    "start": "433560",
    "end": "435720"
  },
  {
    "text": "stream",
    "start": "435720",
    "end": "437240"
  },
  {
    "text": "and so nothing actually happens when I",
    "start": "437240",
    "end": "440800"
  },
  {
    "text": "call run log this is really just it's",
    "start": "440800",
    "end": "442759"
  },
  {
    "text": "more of a process of compilation it's",
    "start": "442759",
    "end": "445280"
  },
  {
    "text": "converting from a stream to just a",
    "start": "445280",
    "end": "446840"
  },
  {
    "text": "single monolithic uh task",
    "start": "446840",
    "end": "450120"
  },
  {
    "text": "and this is so far we haven't actually",
    "start": "450120",
    "end": "452039"
  },
  {
    "text": "done anything if we want to actually run",
    "start": "452039",
    "end": "455080"
  },
  {
    "text": "that task and actually have have that",
    "start": "455080",
    "end": "456879"
  },
  {
    "text": "effect of you know waking up every 3",
    "start": "456879",
    "end": "458599"
  },
  {
    "text": "seconds Printing and so forth then we",
    "start": "458599",
    "end": "460919"
  },
  {
    "text": "actually have to run the task so we can",
    "start": "460919",
    "end": "463919"
  },
  {
    "text": "call um that that task. run and it's",
    "start": "463919",
    "end": "467240"
  },
  {
    "text": "going to you know after 3 seconds print",
    "start": "467240",
    "end": "469560"
  },
  {
    "text": "Fizz then print fizz again and we've",
    "start": "469560",
    "end": "472680"
  },
  {
    "text": "only taken the first two elements of the",
    "start": "472680",
    "end": "474360"
  },
  {
    "text": "stream so it's going to stop at that",
    "start": "474360",
    "end": "476360"
  },
  {
    "text": "point so the interesting thing about",
    "start": "476360",
    "end": "478560"
  },
  {
    "start": "477000",
    "end": "706000"
  },
  {
    "text": "task uh is that there's no so task does",
    "start": "478560",
    "end": "483319"
  },
  {
    "text": "not represent a running",
    "start": "483319",
    "end": "485240"
  },
  {
    "text": "computation so task is a description of",
    "start": "485240",
    "end": "489039"
  },
  {
    "text": "that entire process uh you know once",
    "start": "489039",
    "end": "491680"
  },
  {
    "text": "we've compiled it it's it's just a",
    "start": "491680",
    "end": "493319"
  },
  {
    "text": "description of what needs to happen so",
    "start": "493319",
    "end": "495319"
  },
  {
    "text": "the task is not used up after you run it",
    "start": "495319",
    "end": "497759"
  },
  {
    "text": "the first time so this is sort of a",
    "start": "497759",
    "end": "499840"
  },
  {
    "text": "major difference between uh task and the",
    "start": "499840",
    "end": "503479"
  },
  {
    "text": "scolar concurrent future where you know",
    "start": "503479",
    "end": "505280"
  },
  {
    "text": "once it's computed it's you know that's",
    "start": "505280",
    "end": "507479"
  },
  {
    "text": "it the value is cached and and you if",
    "start": "507479",
    "end": "509840"
  },
  {
    "text": "you run it again you'll get the same",
    "start": "509840",
    "end": "511599"
  },
  {
    "text": "value",
    "start": "511599",
    "end": "513200"
  },
  {
    "text": "um and this I think is actually very",
    "start": "513200",
    "end": "515360"
  },
  {
    "text": "important for compositionality because",
    "start": "515360",
    "end": "518880"
  },
  {
    "text": "what it means is you can separate the",
    "start": "518880",
    "end": "521479"
  },
  {
    "text": "code that sort of produces the task from",
    "start": "521479",
    "end": "524959"
  },
  {
    "text": "the code that chooses how to evaluate it",
    "start": "524959",
    "end": "528240"
  },
  {
    "text": "so if you wanted to add some retry logic",
    "start": "528240",
    "end": "530600"
  },
  {
    "text": "after the fact to a task that's very",
    "start": "530600",
    "end": "533480"
  },
  {
    "text": "easy you just write a general purpose",
    "start": "533480",
    "end": "535080"
  },
  {
    "text": "function to do that you can't really do",
    "start": "535080",
    "end": "537160"
  },
  {
    "text": "that with the future you have to embed",
    "start": "537160",
    "end": "538920"
  },
  {
    "text": "sort of any retry logic uh into the",
    "start": "538920",
    "end": "541240"
  },
  {
    "text": "future itself so yeah in general it's",
    "start": "541240",
    "end": "545440"
  },
  {
    "text": "it's just much nicer to work with these",
    "start": "545440",
    "end": "547240"
  },
  {
    "text": "sort of pure uh first class descriptions",
    "start": "547240",
    "end": "549680"
  },
  {
    "text": "of what of what you want to",
    "start": "549680",
    "end": "552440"
  },
  {
    "text": "happen Okay",
    "start": "552440",
    "end": "554360"
  },
  {
    "text": "so uh there's a number of operations on",
    "start": "554360",
    "end": "559040"
  },
  {
    "text": "streams for combining combining streams",
    "start": "559040",
    "end": "561760"
  },
  {
    "text": "in different ways so obviously we can",
    "start": "561760",
    "end": "564600"
  },
  {
    "text": "operate on a stream with the usual sort",
    "start": "564600",
    "end": "566519"
  },
  {
    "text": "of uh you know list operations map",
    "start": "566519",
    "end": "569480"
  },
  {
    "text": "filter all those sorts of things but we",
    "start": "569480",
    "end": "572160"
  },
  {
    "text": "can also combine uh multiple streams in",
    "start": "572160",
    "end": "574760"
  },
  {
    "text": "various ways and here's just this is one",
    "start": "574760",
    "end": "577519"
  },
  {
    "text": "one example of how you can do that so",
    "start": "577519",
    "end": "579680"
  },
  {
    "text": "here we have Buzz which is going to wake",
    "start": "579680",
    "end": "581040"
  },
  {
    "text": "up every 5 seconds and emit buzz and I",
    "start": "581040",
    "end": "584200"
  },
  {
    "text": "can say Fizz Buzz which is Fizz merge",
    "start": "584200",
    "end": "586880"
  },
  {
    "text": "Buzz now what that so merge the merge",
    "start": "586880",
    "end": "590800"
  },
  {
    "text": "operation is conceptually what it's",
    "start": "590800",
    "end": "593440"
  },
  {
    "text": "going to do is when either of its inputs",
    "start": "593440",
    "end": "595880"
  },
  {
    "text": "has a value available it is going to",
    "start": "595880",
    "end": "598200"
  },
  {
    "text": "emit a value to the output",
    "start": "598200",
    "end": "600880"
  },
  {
    "text": "and uh you can see that if we actually",
    "start": "600880",
    "end": "603480"
  },
  {
    "text": "run Fizz Buzz it's going to you know at",
    "start": "603480",
    "end": "606560"
  },
  {
    "text": "3 seconds 6 seconds and 9 seconds it's",
    "start": "606560",
    "end": "609320"
  },
  {
    "text": "emitting Fizz but then it's interleaving",
    "start": "609320",
    "end": "611600"
  },
  {
    "text": "Buzz uh at 5 seconds and 10",
    "start": "611600",
    "end": "615079"
  },
  {
    "text": "seconds and um so this is sort of an you",
    "start": "615079",
    "end": "619079"
  },
  {
    "text": "know this is sort of arbitrary",
    "start": "619079",
    "end": "620440"
  },
  {
    "text": "non-determinism you're allowing sort of",
    "start": "620440",
    "end": "622200"
  },
  {
    "text": "arbitrary interleaving of these two uh",
    "start": "622200",
    "end": "625040"
  },
  {
    "text": "streams but you could very easily write",
    "start": "625040",
    "end": "628200"
  },
  {
    "text": "uh sort of a more bound did merge like",
    "start": "628200",
    "end": "630640"
  },
  {
    "text": "okay merge these two streams but make",
    "start": "630640",
    "end": "633279"
  },
  {
    "text": "sure that you know one does not get more",
    "start": "633279",
    "end": "635600"
  },
  {
    "text": "than say 10 elements ahead of the other",
    "start": "635600",
    "end": "638519"
  },
  {
    "text": "and uh it's very easy to write uh those",
    "start": "638519",
    "end": "642120"
  },
  {
    "text": "those sorts of policies in schol Z",
    "start": "642120",
    "end": "643880"
  },
  {
    "text": "stream itself and you know they're just",
    "start": "643880",
    "end": "646440"
  },
  {
    "text": "sort of these generic uh combinators",
    "start": "646440",
    "end": "648800"
  },
  {
    "text": "that you know you can reuse uh where",
    "start": "648800",
    "end": "651079"
  },
  {
    "text": "wherever you want to you know just like",
    "start": "651079",
    "end": "653000"
  },
  {
    "text": "if you write you know something that",
    "start": "653000",
    "end": "654959"
  },
  {
    "text": "does uh you know both a map and a filter",
    "start": "654959",
    "end": "657279"
  },
  {
    "text": "at the same time I mean that's just a",
    "start": "657279",
    "end": "659519"
  },
  {
    "text": "generic function that you can",
    "start": "659519",
    "end": "662320"
  },
  {
    "text": "reuse okay and if you want to see you",
    "start": "662320",
    "end": "666519"
  },
  {
    "text": "know a bunch of examples of of uh some",
    "start": "666519",
    "end": "669120"
  },
  {
    "text": "of the functions that are already in",
    "start": "669120",
    "end": "670600"
  },
  {
    "text": "schol Z",
    "start": "670600",
    "end": "671760"
  },
  {
    "text": "stream uh so there's various",
    "start": "671760",
    "end": "674600"
  },
  {
    "text": "deterministic functions for combining",
    "start": "674600",
    "end": "676360"
  },
  {
    "text": "two streams in uh the t uh module",
    "start": "676360",
    "end": "681240"
  },
  {
    "text": "there's various non-deterministic",
    "start": "681240",
    "end": "682760"
  },
  {
    "text": "functions for combining streams in the Y",
    "start": "682760",
    "end": "684760"
  },
  {
    "text": "module and there's various uh functions",
    "start": "684760",
    "end": "687880"
  },
  {
    "text": "for sort of transforming in some",
    "start": "687880",
    "end": "691240"
  },
  {
    "text": "stateful way possibly uh individual",
    "start": "691240",
    "end": "694160"
  },
  {
    "text": "stream in in process one and yeah I'm",
    "start": "694160",
    "end": "697440"
  },
  {
    "text": "not going to try to go over all these",
    "start": "697440",
    "end": "698959"
  },
  {
    "text": "but just lot lots of different functions",
    "start": "698959",
    "end": "702480"
  },
  {
    "text": "there okay",
    "start": "702480",
    "end": "705839"
  },
  {
    "text": "so that is the basic programming model I",
    "start": "706320",
    "end": "710680"
  },
  {
    "text": "guess of of the",
    "start": "710680",
    "end": "712519"
  },
  {
    "text": "library so it's you know it's a very",
    "start": "712519",
    "end": "715120"
  },
  {
    "text": "nice model it's I think it's familiar to",
    "start": "715120",
    "end": "717240"
  },
  {
    "text": "people from you know working with lists",
    "start": "717240",
    "end": "719399"
  },
  {
    "text": "and and sequences and so forth and so",
    "start": "719399",
    "end": "722959"
  },
  {
    "text": "the the next sort of question is like",
    "start": "722959",
    "end": "724560"
  },
  {
    "text": "okay this sounds great but how do I",
    "start": "724560",
    "end": "725920"
  },
  {
    "text": "actually bind this uh this API to talk",
    "start": "725920",
    "end": "729920"
  },
  {
    "text": "to you know external",
    "start": "729920",
    "end": "732040"
  },
  {
    "text": "sources and uh so scaly stream has a few",
    "start": "732040",
    "end": "735519"
  },
  {
    "text": "different ways of of doing that so I'm",
    "start": "735519",
    "end": "737240"
  },
  {
    "text": "going to try to show a few of them here",
    "start": "737240",
    "end": "739959"
  },
  {
    "text": "so one is um there's a few functions in",
    "start": "739959",
    "end": "743199"
  },
  {
    "text": "scy stream iio which have uh just",
    "start": "743199",
    "end": "747079"
  },
  {
    "text": "different ways of of creating stream",
    "start": "747079",
    "end": "749600"
  },
  {
    "text": "from IO based sources so um we can",
    "start": "749600",
    "end": "754680"
  },
  {
    "text": "create a stream from the lines of a",
    "start": "754680",
    "end": "758000"
  },
  {
    "text": "file and um you can see the the output",
    "start": "758000",
    "end": "761440"
  },
  {
    "text": "type is string and the effect type is",
    "start": "761440",
    "end": "765240"
  },
  {
    "text": "Task implying that this is going to be",
    "start": "765240",
    "end": "767000"
  },
  {
    "text": "doing some",
    "start": "767000",
    "end": "768480"
  },
  {
    "text": "IO uh we can again call you know take",
    "start": "768480",
    "end": "771680"
  },
  {
    "text": "and you know take while we can call the",
    "start": "771680",
    "end": "773480"
  },
  {
    "text": "same operations as as on you know pure",
    "start": "773480",
    "end": "777000"
  },
  {
    "text": "streams and you can see when I actually",
    "start": "777000",
    "end": "778920"
  },
  {
    "text": "run this um this is actually this is",
    "start": "778920",
    "end": "781639"
  },
  {
    "text": "actually going and fetching you know the",
    "start": "781639",
    "end": "783160"
  },
  {
    "text": "lines of this file and and returning",
    "start": "783160",
    "end": "785760"
  },
  {
    "text": "that as a vector now what's interesting",
    "start": "785760",
    "end": "788199"
  },
  {
    "text": "about this stream is that this is",
    "start": "788199",
    "end": "791160"
  },
  {
    "text": "actually encapsulating the",
    "start": "791160",
    "end": "792920"
  },
  {
    "text": "full life cycle of working with the file",
    "start": "792920",
    "end": "795720"
  },
  {
    "text": "so this is",
    "start": "795720",
    "end": "797120"
  },
  {
    "text": "not the the the consumer of the stream",
    "start": "797120",
    "end": "799880"
  },
  {
    "text": "is not responsible for making sure that",
    "start": "799880",
    "end": "801959"
  },
  {
    "text": "the file handle gets",
    "start": "801959",
    "end": "803839"
  },
  {
    "text": "closed when when the the consumer of the",
    "start": "803839",
    "end": "807839"
  },
  {
    "text": "stream is finished the file handle will",
    "start": "807839",
    "end": "809720"
  },
  {
    "text": "be closed even if that uh consumer ends",
    "start": "809720",
    "end": "812320"
  },
  {
    "text": "up throwing an",
    "start": "812320",
    "end": "813880"
  },
  {
    "text": "exception uh we we still are always",
    "start": "813880",
    "end": "817560"
  },
  {
    "text": "going to guarantee that that file is",
    "start": "817560",
    "end": "819079"
  },
  {
    "text": "closed so this is sort of a nicer model",
    "start": "819079",
    "end": "821760"
  },
  {
    "text": "than sort of traditional IO where it's",
    "start": "821760",
    "end": "824519"
  },
  {
    "text": "like every user of a resource is",
    "start": "824519",
    "end": "826760"
  },
  {
    "text": "responsible for you know ensuring",
    "start": "826760",
    "end": "829040"
  },
  {
    "text": "resource safety and you know the type",
    "start": "829040",
    "end": "831240"
  },
  {
    "text": "system doesn't really provide any help",
    "start": "831240",
    "end": "832959"
  },
  {
    "text": "you know if you forget to close a file I",
    "start": "832959",
    "end": "835560"
  },
  {
    "text": "mean it's just going to be you know",
    "start": "835560",
    "end": "837199"
  },
  {
    "text": "potentially a runtime error or a",
    "start": "837199",
    "end": "838519"
  },
  {
    "text": "resource Le",
    "start": "838519",
    "end": "839720"
  },
  {
    "text": "week this is sort of like we're",
    "start": "839720",
    "end": "841560"
  },
  {
    "text": "encapsulating all that logic in in one",
    "start": "841560",
    "end": "844560"
  },
  {
    "text": "uh one stream",
    "start": "844560",
    "end": "847639"
  },
  {
    "text": "object so just to give a sense for how",
    "start": "847639",
    "end": "850959"
  },
  {
    "text": "how this works and how you can kind of",
    "start": "850959",
    "end": "852600"
  },
  {
    "text": "build this type of resource safety into",
    "start": "852600",
    "end": "855880"
  },
  {
    "text": "uh the streams that you construct so",
    "start": "855880",
    "end": "858000"
  },
  {
    "text": "there's this function on process called",
    "start": "858000",
    "end": "860440"
  },
  {
    "text": "on complete and it takes it works a",
    "start": "860440",
    "end": "864079"
  },
  {
    "text": "little bit like a pend in that it's",
    "start": "864079",
    "end": "866480"
  },
  {
    "text": "going to run uh the first process and",
    "start": "866480",
    "end": "868759"
  },
  {
    "text": "then the second process but unlike a",
    "start": "868759",
    "end": "872519"
  },
  {
    "text": "pend it is guaranteed that you're going",
    "start": "872519",
    "end": "874880"
  },
  {
    "text": "to run that second process even if this",
    "start": "874880",
    "end": "876800"
  },
  {
    "text": "first one finishes with an error so here",
    "start": "876800",
    "end": "880320"
  },
  {
    "text": "I'm just using a side effect to I'm",
    "start": "880320",
    "end": "882560"
  },
  {
    "text": "printing cleanup but you know you could",
    "start": "882560",
    "end": "884480"
  },
  {
    "text": "imagine doing some some real real",
    "start": "884480",
    "end": "886560"
  },
  {
    "text": "Cleanup in there and you can see if I",
    "start": "886560",
    "end": "890480"
  },
  {
    "text": "say lines take two run log run and then",
    "start": "890480",
    "end": "893440"
  },
  {
    "text": "you can see that the that cleanup action",
    "start": "893440",
    "end": "895360"
  },
  {
    "text": "is is being run and notice this we get",
    "start": "895360",
    "end": "899120"
  },
  {
    "text": "that cleanup action even though we only",
    "start": "899120",
    "end": "900480"
  },
  {
    "text": "took the first two lines of the file so",
    "start": "900480",
    "end": "903120"
  },
  {
    "text": "we didn't have to Traverse to the the",
    "start": "903120",
    "end": "904959"
  },
  {
    "text": "end of the file and then have some magic",
    "start": "904959",
    "end": "907320"
  },
  {
    "text": "uh cleanup action get run as a side",
    "start": "907320",
    "end": "909160"
  },
  {
    "text": "effect uh you know we're we're allowed",
    "start": "909160",
    "end": "911399"
  },
  {
    "text": "to terminate early we we don't sort of",
    "start": "911399",
    "end": "913959"
  },
  {
    "text": "uh break resource safety if we terminate",
    "start": "913959",
    "end": "916680"
  },
  {
    "text": "early another thing is that if we have",
    "start": "916680",
    "end": "919759"
  },
  {
    "text": "exceptions that get thrown while we're",
    "start": "919759",
    "end": "921920"
  },
  {
    "text": "processing the stream we also still call",
    "start": "921920",
    "end": "924720"
  },
  {
    "text": "the cleanup action so here we're calling",
    "start": "924720",
    "end": "926920"
  },
  {
    "text": "um so let's go back to the input here so",
    "start": "926920",
    "end": "928959"
  },
  {
    "text": "you can see the first line of the file",
    "start": "928959",
    "end": "930759"
  },
  {
    "text": "is this comment so it's not actually a",
    "start": "930759",
    "end": "933279"
  },
  {
    "text": "double so if we if we're calling map to",
    "start": "933279",
    "end": "937519"
  },
  {
    "text": "double on all the lines of the file this",
    "start": "937519",
    "end": "940240"
  },
  {
    "text": "is going to bomb with an",
    "start": "940240",
    "end": "942639"
  },
  {
    "text": "exception and so you can see when we",
    "start": "942639",
    "end": "944839"
  },
  {
    "text": "actually run this the cleanup action",
    "start": "944839",
    "end": "947839"
  },
  {
    "text": "still gets",
    "start": "947839",
    "end": "949120"
  },
  {
    "text": "run and then we just rea the error so if",
    "start": "949120",
    "end": "953360"
  },
  {
    "text": "you want you can actually uh catch the",
    "start": "953360",
    "end": "955680"
  },
  {
    "text": "error within the stream and then you",
    "start": "955680",
    "end": "957399"
  },
  {
    "text": "know recover from it but uh yeah I mean",
    "start": "957399",
    "end": "961079"
  },
  {
    "text": "this is just to show that okay you can",
    "start": "961079",
    "end": "964319"
  },
  {
    "text": "sort of program as as if you didn't have",
    "start": "964319",
    "end": "966360"
  },
  {
    "text": "to worry about exceptions and unless you",
    "start": "966360",
    "end": "968680"
  },
  {
    "text": "need to do something different to handle",
    "start": "968680",
    "end": "970519"
  },
  {
    "text": "those",
    "start": "970519",
    "end": "971560"
  },
  {
    "text": "exceptions uh you know everything just",
    "start": "971560",
    "end": "974160"
  },
  {
    "text": "sort of works out which is I think is",
    "start": "974160",
    "end": "975920"
  },
  {
    "text": "very nice and a lot less error prone",
    "start": "975920",
    "end": "977839"
  },
  {
    "text": "than than doing these things",
    "start": "977839",
    "end": "980920"
  },
  {
    "text": "manually okay",
    "start": "980920",
    "end": "984319"
  },
  {
    "start": "981000",
    "end": "1266000"
  },
  {
    "text": "so that all sounds really good uh so",
    "start": "984639",
    "end": "987759"
  },
  {
    "text": "what about when you have to bind to some",
    "start": "987759",
    "end": "990759"
  },
  {
    "text": "asynchronous or side affecting sources",
    "start": "990759",
    "end": "994360"
  },
  {
    "text": "so this is very common I mean you",
    "start": "994360",
    "end": "996920"
  },
  {
    "text": "know when you when you use schol Z",
    "start": "996920",
    "end": "999279"
  },
  {
    "text": "stream or you know any sort of",
    "start": "999279",
    "end": "1000560"
  },
  {
    "text": "functional approach I mean you don't",
    "start": "1000560",
    "end": "1001880"
  },
  {
    "text": "control the entire universe you can't",
    "start": "1001880",
    "end": "1004519"
  },
  {
    "text": "really ensure that you know sometimes",
    "start": "1004519",
    "end": "1006839"
  },
  {
    "text": "you just have to you have to interface",
    "start": "1006839",
    "end": "1008759"
  },
  {
    "text": "with some API that is uh you know a",
    "start": "1008759",
    "end": "1012240"
  },
  {
    "text": "little bit more side effecting or just",
    "start": "1012240",
    "end": "1016000"
  },
  {
    "text": "has various nasty stuff that you just",
    "start": "1016000",
    "end": "1017839"
  },
  {
    "text": "kind of have to figure out a way to to",
    "start": "1017839",
    "end": "1019079"
  },
  {
    "text": "talk to so scaly stream has a number of",
    "start": "1019079",
    "end": "1022360"
  },
  {
    "text": "ways of binding to to those types of",
    "start": "1022360",
    "end": "1024918"
  },
  {
    "text": "apis so that you can you know you have",
    "start": "1024919",
    "end": "1027839"
  },
  {
    "text": "sort of the nasty uh you know imperative",
    "start": "1027839",
    "end": "1030880"
  },
  {
    "text": "API on one side and then on the other",
    "start": "1030880",
    "end": "1032918"
  },
  {
    "text": "side you get this nice stream",
    "start": "1032919",
    "end": "1034400"
  },
  {
    "text": "abstraction for working with",
    "start": "1034400",
    "end": "1036520"
  },
  {
    "text": "it so I'm going to go cover a few",
    "start": "1036520",
    "end": "1038918"
  },
  {
    "text": "different ways of doing that so one is",
    "start": "1038919",
    "end": "1042798"
  },
  {
    "text": "uh so task I mentioned has very good",
    "start": "1042799",
    "end": "1046400"
  },
  {
    "text": "support for binding to asynchronous",
    "start": "1046400",
    "end": "1049720"
  },
  {
    "text": "computations so kind of the simplest way",
    "start": "1049720",
    "end": "1052160"
  },
  {
    "text": "to to create a stream is by uh creating",
    "start": "1052160",
    "end": "1055559"
  },
  {
    "text": "a task and then wrapping that in a",
    "start": "1055559",
    "end": "1057280"
  },
  {
    "text": "stream so here's an example of a uh call",
    "start": "1057280",
    "end": "1061039"
  },
  {
    "text": "backy Api so we have this function read",
    "start": "1061039",
    "end": "1064200"
  },
  {
    "text": "so read is not going to return an array",
    "start": "1064200",
    "end": "1066360"
  },
  {
    "text": "of",
    "start": "1066360",
    "end": "1067200"
  },
  {
    "text": "bite Reed is taking this call back that",
    "start": "1067200",
    "end": "1070240"
  },
  {
    "text": "it will then invoke at some later time",
    "start": "1070240",
    "end": "1073520"
  },
  {
    "text": "uh with either the error or the array of",
    "start": "1073520",
    "end": "1076559"
  },
  {
    "text": "bytes that it that it read",
    "start": "1076559",
    "end": "1079600"
  },
  {
    "text": "now um then this is kind of a common",
    "start": "1079600",
    "end": "1082960"
  },
  {
    "text": "type of API and you know if maybe if",
    "start": "1082960",
    "end": "1086240"
  },
  {
    "text": "we're using no. JS we' we'd uh you know",
    "start": "1086240",
    "end": "1089039"
  },
  {
    "text": "call ourselves good and just go ahead",
    "start": "1089039",
    "end": "1090559"
  },
  {
    "text": "and and program directly with this model",
    "start": "1090559",
    "end": "1092960"
  },
  {
    "text": "but I I actually think this is a kind of",
    "start": "1092960",
    "end": "1094520"
  },
  {
    "text": "a horrible uh model to have to program",
    "start": "1094520",
    "end": "1096760"
  },
  {
    "text": "with directly we really want to have",
    "start": "1096760",
    "end": "1099440"
  },
  {
    "text": "this nicer abstraction of of having you",
    "start": "1099440",
    "end": "1103720"
  },
  {
    "text": "know this thing that sort of at least",
    "start": "1103720",
    "end": "1106480"
  },
  {
    "text": "the API feels like it's a blocking API",
    "start": "1106480",
    "end": "1109320"
  },
  {
    "text": "even if under the covers it's doing all",
    "start": "1109320",
    "end": "1111120"
  },
  {
    "text": "this asynchronous stuff so",
    "start": "1111120",
    "end": "1115720"
  },
  {
    "text": "um I can take this read function and I",
    "start": "1115720",
    "end": "1119440"
  },
  {
    "text": "can say task.",
    "start": "1119440",
    "end": "1121159"
  },
  {
    "text": "async and I pass in the read function",
    "start": "1121159",
    "end": "1124960"
  },
  {
    "text": "and sort of as if by Magic that becomes",
    "start": "1124960",
    "end": "1127600"
  },
  {
    "text": "a task array bite and you know this is a",
    "start": "1127600",
    "end": "1131360"
  },
  {
    "text": "monad I can map flat map um and sort of",
    "start": "1131360",
    "end": "1135799"
  },
  {
    "text": "do all the TP typical operations here",
    "start": "1135799",
    "end": "1139360"
  },
  {
    "text": "and yeah I mean the type if you just",
    "start": "1139360",
    "end": "1141440"
  },
  {
    "text": "sort of follow the types of of async it",
    "start": "1141440",
    "end": "1143640"
  },
  {
    "text": "just sort of works out it's a little bit",
    "start": "1143640",
    "end": "1145520"
  },
  {
    "text": "brain bending if you if you actually",
    "start": "1145520",
    "end": "1147039"
  },
  {
    "text": "look at it but uh yeah this this sort of",
    "start": "1147039",
    "end": "1150640"
  },
  {
    "text": "lets you sort of invert control and you",
    "start": "1150640",
    "end": "1152520"
  },
  {
    "text": "get this nice sort of straightforward",
    "start": "1152520",
    "end": "1154080"
  },
  {
    "text": "API from uh this call backy",
    "start": "1154080",
    "end": "1157240"
  },
  {
    "text": "one sometimes you have uh a callback a",
    "start": "1157240",
    "end": "1161240"
  },
  {
    "text": "call backy Api where you have sort of",
    "start": "1161240",
    "end": "1163360"
  },
  {
    "text": "two continuations a success one and a",
    "start": "1163360",
    "end": "1165799"
  },
  {
    "text": "failure one but it's uh you still just",
    "start": "1165799",
    "end": "1169080"
  },
  {
    "text": "use task async and you know Works a",
    "start": "1169080",
    "end": "1171440"
  },
  {
    "text": "little bit differently but it's the same",
    "start": "1171440",
    "end": "1173280"
  },
  {
    "text": "same sort of",
    "start": "1173280",
    "end": "1175159"
  },
  {
    "text": "idea um one interesting thing about task",
    "start": "1175159",
    "end": "1178240"
  },
  {
    "text": "is by default when you flat map a task",
    "start": "1178240",
    "end": "1181679"
  },
  {
    "text": "it is going to run the the flat mapped",
    "start": "1181679",
    "end": "1185520"
  },
  {
    "text": "uh function in the same thread as",
    "start": "1185520",
    "end": "1187760"
  },
  {
    "text": "whatever the sort of original uh",
    "start": "1187760",
    "end": "1191480"
  },
  {
    "text": "callback gets invoked in so if you want",
    "start": "1191480",
    "end": "1194840"
  },
  {
    "text": "to sort of if you don't want that",
    "start": "1194840",
    "end": "1196440"
  },
  {
    "text": "behavior you can Fork off a new",
    "start": "1196440",
    "end": "1199280"
  },
  {
    "text": "a new task for the rest of the",
    "start": "1199280",
    "end": "1200799"
  },
  {
    "text": "computation so by default task is not",
    "start": "1200799",
    "end": "1203919"
  },
  {
    "text": "going to be going through a thread pool",
    "start": "1203919",
    "end": "1206919"
  },
  {
    "text": "submit cycle every time you uh flat map",
    "start": "1206919",
    "end": "1209799"
  },
  {
    "text": "over it so that that can be very good",
    "start": "1209799",
    "end": "1212200"
  },
  {
    "text": "for for the",
    "start": "1212200",
    "end": "1214440"
  },
  {
    "text": "efficiency okay so now that I have this",
    "start": "1214440",
    "end": "1217480"
  },
  {
    "text": "task how do I actually promote that to a",
    "start": "1217480",
    "end": "1219840"
  },
  {
    "text": "stream so there's a a function on on",
    "start": "1219840",
    "end": "1222880"
  },
  {
    "text": "process the process object",
    "start": "1222880",
    "end": "1225320"
  },
  {
    "text": "eval uh it actually it's not even",
    "start": "1225320",
    "end": "1228280"
  },
  {
    "text": "specific to task you can promote any um",
    "start": "1228280",
    "end": "1231120"
  },
  {
    "text": "effect to to a stream and yeah I just I",
    "start": "1231120",
    "end": "1236000"
  },
  {
    "text": "take that task array bite I call a Val",
    "start": "1236000",
    "end": "1238840"
  },
  {
    "text": "and I get back a",
    "start": "1238840",
    "end": "1240320"
  },
  {
    "text": "process um of array bite and this is a",
    "start": "1240320",
    "end": "1244159"
  },
  {
    "text": "process that's just going to await the",
    "start": "1244159",
    "end": "1246640"
  },
  {
    "text": "result of that task and then emit it and",
    "start": "1246640",
    "end": "1248919"
  },
  {
    "text": "then stop if I wanted to run a task",
    "start": "1248919",
    "end": "1252840"
  },
  {
    "text": "repeatedly I could just call uh you know",
    "start": "1252840",
    "end": "1256039"
  },
  {
    "text": "that that stream. repeat repeat is just",
    "start": "1256039",
    "end": "1258280"
  },
  {
    "text": "another",
    "start": "1258280",
    "end": "1259159"
  },
  {
    "text": "generic function in schy stream that",
    "start": "1259159",
    "end": "1261559"
  },
  {
    "text": "just is going to run run that stream",
    "start": "1261559",
    "end": "1263919"
  },
  {
    "text": "over and over",
    "start": "1263919",
    "end": "1265679"
  },
  {
    "text": "again okay so that's kind of the most",
    "start": "1265679",
    "end": "1268720"
  },
  {
    "start": "1266000",
    "end": "1754000"
  },
  {
    "text": "idiomatic way of of binding to an",
    "start": "1268720",
    "end": "1271520"
  },
  {
    "text": "asynchronous",
    "start": "1271520",
    "end": "1273320"
  },
  {
    "text": "computation uh it's it's best if you can",
    "start": "1273320",
    "end": "1276400"
  },
  {
    "text": "bind at the sort of earliest possible",
    "start": "1276400",
    "end": "1279360"
  },
  {
    "text": "stage but uh sometimes that's not always",
    "start": "1279360",
    "end": "1282200"
  },
  {
    "text": "possible sometimes you have some process",
    "start": "1282200",
    "end": "1284520"
  },
  {
    "text": "that is just going to be pushing you",
    "start": "1284520",
    "end": "1286559"
  },
  {
    "text": "values a stream of them you don't have",
    "start": "1286559",
    "end": "1289440"
  },
  {
    "text": "access to the the asynchronous task",
    "start": "1289440",
    "end": "1291880"
  },
  {
    "text": "corresponding to a single element of the",
    "start": "1291880",
    "end": "1294159"
  },
  {
    "text": "stream so uh in that case you can use",
    "start": "1294159",
    "end": "1296919"
  },
  {
    "text": "something like uh these asynchronous",
    "start": "1296919",
    "end": "1299240"
  },
  {
    "text": "qes so here I'm declaring um I'm",
    "start": "1299240",
    "end": "1302760"
  },
  {
    "text": "importing scaly stream",
    "start": "1302760",
    "end": "1305720"
  },
  {
    "text": "async I can say uh Q of N and I actually",
    "start": "1305720",
    "end": "1309840"
  },
  {
    "text": "get back two things so Q is going to be",
    "start": "1309840",
    "end": "1312440"
  },
  {
    "text": "this mutable it's this very side",
    "start": "1312440",
    "end": "1315960"
  },
  {
    "text": "affecting uh mutable API",
    "start": "1315960",
    "end": "1319559"
  },
  {
    "text": "that thread one in the uh you know",
    "start": "1319559",
    "end": "1322200"
  },
  {
    "text": "imperative programming world can can go",
    "start": "1322200",
    "end": "1324640"
  },
  {
    "text": "ahead and populate by calling NQ",
    "start": "1324640",
    "end": "1327679"
  },
  {
    "text": "multiple times and by calling close it",
    "start": "1327679",
    "end": "1330440"
  },
  {
    "text": "can also call fail to like raise an",
    "start": "1330440",
    "end": "1332400"
  },
  {
    "text": "asynchronous",
    "start": "1332400",
    "end": "1333960"
  },
  {
    "text": "exception and then meanwhile on the",
    "start": "1333960",
    "end": "1336159"
  },
  {
    "text": "other side in sort of the the other side",
    "start": "1336159",
    "end": "1339200"
  },
  {
    "text": "of the universe the stream processing",
    "start": "1339200",
    "end": "1340679"
  },
  {
    "text": "World here source is going to be a just",
    "start": "1340679",
    "end": "1344520"
  },
  {
    "text": "a regular",
    "start": "1344520",
    "end": "1345960"
  },
  {
    "text": "process of the values in that um that",
    "start": "1345960",
    "end": "1349320"
  },
  {
    "text": "are put into that q a",
    "start": "1349320",
    "end": "1352000"
  },
  {
    "text": "asynchronously and this Q is not",
    "start": "1352000",
    "end": "1354760"
  },
  {
    "text": "blocking so there's no um yeah there's",
    "start": "1354760",
    "end": "1358559"
  },
  {
    "text": "no actual blocking reads anywhere it's",
    "start": "1358559",
    "end": "1360960"
  },
  {
    "text": "actually uh you know this process will",
    "start": "1360960",
    "end": "1364960"
  },
  {
    "text": "just be woken up essentially when",
    "start": "1364960",
    "end": "1368240"
  },
  {
    "text": "whenever thread one uh Ines a value to",
    "start": "1368240",
    "end": "1370679"
  },
  {
    "text": "it so it's all sort of non-blocking like",
    "start": "1370679",
    "end": "1373200"
  },
  {
    "text": "like you would",
    "start": "1373200",
    "end": "1375639"
  },
  {
    "text": "expect okay and then finally uh the last",
    "start": "1375840",
    "end": "1378880"
  },
  {
    "text": "way I'm going to mention is uh a lot of",
    "start": "1378880",
    "end": "1381760"
  },
  {
    "text": "times you have some asynchronous signal",
    "start": "1381760",
    "end": "1384400"
  },
  {
    "text": "so it's a continuous value that uh is is",
    "start": "1384400",
    "end": "1387840"
  },
  {
    "text": "being updated by some external",
    "start": "1387840",
    "end": "1390480"
  },
  {
    "text": "process",
    "start": "1390480",
    "end": "1392159"
  },
  {
    "text": "and the way that you can bind to that is",
    "start": "1392159",
    "end": "1394919"
  },
  {
    "text": "you can declare this async do signal",
    "start": "1394919",
    "end": "1398200"
  },
  {
    "text": "Boolean and you can get sort of get two",
    "start": "1398200",
    "end": "1401440"
  },
  {
    "text": "two different types of streams out of a",
    "start": "1401440",
    "end": "1402960"
  },
  {
    "text": "signal so one is you can just get the",
    "start": "1402960",
    "end": "1406000"
  },
  {
    "text": "sort of continuous version of the stream",
    "start": "1406000",
    "end": "1408200"
  },
  {
    "text": "which is it's always going to be defined",
    "start": "1408200",
    "end": "1410720"
  },
  {
    "text": "whatever the current value is it's going",
    "start": "1410720",
    "end": "1412240"
  },
  {
    "text": "to return that and the other option is",
    "start": "1412240",
    "end": "1414960"
  },
  {
    "text": "you can get a discrete stream which only",
    "start": "1414960",
    "end": "1419000"
  },
  {
    "text": "is going to emit a value when uh the",
    "start": "1419000",
    "end": "1422480"
  },
  {
    "text": "signal is",
    "start": "1422480",
    "end": "1423520"
  },
  {
    "text": "changed so using using this API you can",
    "start": "1423520",
    "end": "1427400"
  },
  {
    "text": "have thread one which is setting you",
    "start": "1427400",
    "end": "1430480"
  },
  {
    "text": "know setting the value of that signal",
    "start": "1430480",
    "end": "1432880"
  },
  {
    "text": "and then meanwhile in thread two you can",
    "start": "1432880",
    "end": "1435919"
  },
  {
    "text": "you know just react to any changes to",
    "start": "1435919",
    "end": "1438679"
  },
  {
    "text": "that to that signal and you get this",
    "start": "1438679",
    "end": "1440279"
  },
  {
    "text": "sort of nice stream stream processing",
    "start": "1440279",
    "end": "1444520"
  },
  {
    "text": "abstraction so and there's a there's a",
    "start": "1444520",
    "end": "1447799"
  },
  {
    "text": "few",
    "start": "1447799",
    "end": "1449000"
  },
  {
    "text": "um I was going to talk about binding to",
    "start": "1449000",
    "end": "1452679"
  },
  {
    "text": "actors but I'm actually I'm going to",
    "start": "1452679",
    "end": "1454240"
  },
  {
    "text": "skip this but I will uh you know",
    "start": "1454240",
    "end": "1456640"
  },
  {
    "text": "possibly come back to it during the",
    "start": "1456640",
    "end": "1458360"
  },
  {
    "text": "during the Q&A if if people are",
    "start": "1458360",
    "end": "1460640"
  },
  {
    "text": "interested but",
    "start": "1460640",
    "end": "1462600"
  },
  {
    "text": "uh yeah so those are all just different",
    "start": "1462600",
    "end": "1464919"
  },
  {
    "text": "ways of binding to some asynchronous uh",
    "start": "1464919",
    "end": "1467840"
  },
  {
    "text": "API",
    "start": "1467840",
    "end": "1469480"
  },
  {
    "text": "now",
    "start": "1469480",
    "end": "1470880"
  },
  {
    "text": "um yeah I just wanted to mention for for",
    "start": "1470880",
    "end": "1473360"
  },
  {
    "text": "credit so Runar and I we you know we're",
    "start": "1473360",
    "end": "1475919"
  },
  {
    "text": "obviously we worked on a lot of this",
    "start": "1475919",
    "end": "1478080"
  },
  {
    "text": "stuff for the book um a lot of this work",
    "start": "1478080",
    "end": "1481200"
  },
  {
    "text": "was based on some work that Ed KT did in",
    "start": "1481200",
    "end": "1484520"
  },
  {
    "text": "in Haskell this Library",
    "start": "1484520",
    "end": "1486360"
  },
  {
    "text": "machines um and then also wanted to give",
    "start": "1486360",
    "end": "1489679"
  },
  {
    "text": "a shout out to uh pavl who's he's at uh",
    "start": "1489679",
    "end": "1492760"
  },
  {
    "text": "this company spoco and they've been uh",
    "start": "1492760",
    "end": "1494880"
  },
  {
    "text": "actually helping sponsor some of the the",
    "start": "1494880",
    "end": "1496679"
  },
  {
    "text": "development on this and if you're",
    "start": "1496679",
    "end": "1499120"
  },
  {
    "text": "interested to learn more uh you can",
    "start": "1499120",
    "end": "1501320"
  },
  {
    "text": "check out uh chapters 13 and 15 of the",
    "start": "1501320",
    "end": "1503840"
  },
  {
    "text": "book which uh we're actually told by the",
    "start": "1503840",
    "end": "1506320"
  },
  {
    "text": "publisher it's looking like a June",
    "start": "1506320",
    "end": "1508760"
  },
  {
    "text": "publication date so it's actually",
    "start": "1508760",
    "end": "1510880"
  },
  {
    "text": "finally going to be uh on bookshelves",
    "start": "1510880",
    "end": "1512799"
  },
  {
    "text": "which is which is",
    "start": "1512799",
    "end": "1514640"
  },
  {
    "text": "good are those chapters the latest",
    "start": "1514640",
    "end": "1517559"
  },
  {
    "text": "downlo yep yeah uh so all all of the",
    "start": "1517559",
    "end": "1520120"
  },
  {
    "text": "book chapters are are in the Meep right",
    "start": "1520120",
    "end": "1522120"
  },
  {
    "text": "now so yeah all the content is there you",
    "start": "1522120",
    "end": "1527159"
  },
  {
    "text": "know and and yeah that's the this is the",
    "start": "1527159",
    "end": "1530640"
  },
  {
    "text": "the GitHub page if if you want to check",
    "start": "1530640",
    "end": "1532399"
  },
  {
    "text": "it out uh we've had",
    "start": "1532399",
    "end": "1534840"
  },
  {
    "text": "um a number of",
    "start": "1534840",
    "end": "1537399"
  },
  {
    "text": "people contributing to the library which",
    "start": "1537399",
    "end": "1539880"
  },
  {
    "text": "which I think is awesome and um yeah I'm",
    "start": "1539880",
    "end": "1543600"
  },
  {
    "text": "not going to try to mention all the",
    "start": "1543600",
    "end": "1544799"
  },
  {
    "text": "contributors but you know even stuff as",
    "start": "1544799",
    "end": "1547880"
  },
  {
    "text": "simple as just oh I added uh you know",
    "start": "1547880",
    "end": "1551240"
  },
  {
    "text": "this this little stream transducer for",
    "start": "1551240",
    "end": "1553960"
  },
  {
    "text": "for doing this little task that was",
    "start": "1553960",
    "end": "1555880"
  },
  {
    "text": "useful um there's just lots of little",
    "start": "1555880",
    "end": "1558559"
  },
  {
    "text": "functions that are very generic that you",
    "start": "1558559",
    "end": "1560320"
  },
  {
    "text": "can write that are that are",
    "start": "1560320",
    "end": "1562120"
  },
  {
    "text": "helpful so yeah that's uh that's all I",
    "start": "1562120",
    "end": "1565559"
  },
  {
    "text": "got so any any",
    "start": "1565559",
    "end": "1568399"
  },
  {
    "text": "questions yes so I see",
    "start": "1568399",
    "end": "1571840"
  },
  {
    "text": "some yeah a little bit so I guess I mean",
    "start": "1571840",
    "end": "1576399"
  },
  {
    "text": "a lot of these libraries are oh repeat",
    "start": "1576399",
    "end": "1579000"
  },
  {
    "text": "the question so contrast this with the",
    "start": "1579000",
    "end": "1581559"
  },
  {
    "text": "observable or RX Java uh stuff so yeah a",
    "start": "1581559",
    "end": "1586000"
  },
  {
    "text": "lot of these libraries are similar",
    "start": "1586000",
    "end": "1589320"
  },
  {
    "text": "uh I think it's one of these things",
    "start": "1589320",
    "end": "1591120"
  },
  {
    "text": "where the devil's in the details uh the",
    "start": "1591120",
    "end": "1593559"
  },
  {
    "text": "thing I don't like about RX like the the",
    "start": "1593559",
    "end": "1597080"
  },
  {
    "text": "RX Java",
    "start": "1597080",
    "end": "1598600"
  },
  {
    "text": "representation is um basically the",
    "start": "1598600",
    "end": "1601480"
  },
  {
    "text": "entire stream is asynchronous so it's",
    "start": "1601480",
    "end": "1603399"
  },
  {
    "text": "like a very push the entire stream is",
    "start": "1603399",
    "end": "1606480"
  },
  {
    "text": "push and that works out well when you're",
    "start": "1606480",
    "end": "1609159"
  },
  {
    "text": "just operating on one stream at a time",
    "start": "1609159",
    "end": "1611320"
  },
  {
    "text": "but as soon as you want to do some like",
    "start": "1611320",
    "end": "1614840"
  },
  {
    "text": "you know you want to do like a merge",
    "start": "1614840",
    "end": "1616720"
  },
  {
    "text": "where you're",
    "start": "1616720",
    "end": "1618520"
  },
  {
    "text": "yeah where you basically need that sort",
    "start": "1618520",
    "end": "1620399"
  },
  {
    "text": "of pull type of API and then that",
    "start": "1620399",
    "end": "1622960"
  },
  {
    "text": "representation doesn't work out as well",
    "start": "1622960",
    "end": "1624720"
  },
  {
    "text": "they do have",
    "start": "1624720",
    "end": "1625720"
  },
  {
    "text": "a three together yeah oh so yeah the the",
    "start": "1625720",
    "end": "1629360"
  },
  {
    "text": "question was could you combine all of",
    "start": "1629360",
    "end": "1631440"
  },
  {
    "text": "these different types of effects really",
    "start": "1631440",
    "end": "1634559"
  },
  {
    "text": "uh or ways of of getting data into a",
    "start": "1634559",
    "end": "1637080"
  },
  {
    "text": "single uh computation and yeah",
    "start": "1637080",
    "end": "1640159"
  },
  {
    "text": "definitely yeah there's nothing uh",
    "start": "1640159",
    "end": "1643120"
  },
  {
    "text": "nothing restricting you from from doing",
    "start": "1643120",
    "end": "1646760"
  },
  {
    "text": "that uh yeah",
    "start": "1646799",
    "end": "1649960"
  },
  {
    "text": "yeah it's basically that because task is",
    "start": "1649960",
    "end": "1652399"
  },
  {
    "text": "not a running computation uh you can",
    "start": "1652399",
    "end": "1655080"
  },
  {
    "text": "bind to it multiple times and it's just",
    "start": "1655080",
    "end": "1657039"
  },
  {
    "text": "going to rerun the",
    "start": "1657039",
    "end": "1659760"
  },
  {
    "text": "computation yeah so um so yeah the",
    "start": "1659760",
    "end": "1662880"
  },
  {
    "text": "question is how do you deal with uh sort",
    "start": "1662880",
    "end": "1665399"
  },
  {
    "text": "of Q sizes and and yeah and back",
    "start": "1665399",
    "end": "1668399"
  },
  {
    "text": "pressure and that sort of thing so I",
    "start": "1668399",
    "end": "1670480"
  },
  {
    "text": "guess the the general my general answer",
    "start": "1670480",
    "end": "1673480"
  },
  {
    "text": "is start with so the schol stream answer",
    "start": "1673480",
    "end": "1677159"
  },
  {
    "text": "is you start with a fully",
    "start": "1677159",
    "end": "1679000"
  },
  {
    "text": "deterministic computation model so if",
    "start": "1679000",
    "end": "1683000"
  },
  {
    "text": "you start with that it's very easy to",
    "start": "1683000",
    "end": "1685320"
  },
  {
    "text": "ensure uh you know ex deterministic",
    "start": "1685320",
    "end": "1688519"
  },
  {
    "text": "memory usage and then yeah when you when",
    "start": "1688519",
    "end": "1692320"
  },
  {
    "text": "you bind to something",
    "start": "1692320",
    "end": "1694080"
  },
  {
    "text": "external you know that's why I was",
    "start": "1694080",
    "end": "1696960"
  },
  {
    "text": "saying you you really want to bind to",
    "start": "1696960",
    "end": "1698640"
  },
  {
    "text": "the to the task that's fetching",
    "start": "1698640",
    "end": "1700480"
  },
  {
    "text": "individual",
    "start": "1700480",
    "end": "1701600"
  },
  {
    "text": "elements because that that's going to",
    "start": "1701600",
    "end": "1704240"
  },
  {
    "text": "that's what's going to give you complete",
    "start": "1704240",
    "end": "1705600"
  },
  {
    "text": "control over queuing and and memory",
    "start": "1705600",
    "end": "1707679"
  },
  {
    "text": "usage",
    "start": "1707679",
    "end": "1708840"
  },
  {
    "text": "and yeah if if you can't do that then",
    "start": "1708840",
    "end": "1712039"
  },
  {
    "text": "you know you have to implement some ad",
    "start": "1712039",
    "end": "1715360"
  },
  {
    "text": "hoc way of doing back pressure or",
    "start": "1715360",
    "end": "1717120"
  },
  {
    "text": "something and and there are um like the",
    "start": "1717120",
    "end": "1719799"
  },
  {
    "text": "the queue you you can um you know you",
    "start": "1719799",
    "end": "1722240"
  },
  {
    "text": "can get the current size and you can do",
    "start": "1722240",
    "end": "1724919"
  },
  {
    "text": "things like that but yeah it sort of",
    "start": "1724919",
    "end": "1726679"
  },
  {
    "text": "feels somewhat ad hoc to me and but I I",
    "start": "1726679",
    "end": "1729480"
  },
  {
    "text": "think it's sort of the best you can do",
    "start": "1729480",
    "end": "1731600"
  },
  {
    "text": "so but yeah feel free to come talk to me",
    "start": "1731600",
    "end": "1734360"
  },
  {
    "text": "uh after or I don't know should should I",
    "start": "1734360",
    "end": "1737480"
  },
  {
    "text": "just wrap up here",
    "start": "1737480",
    "end": "1739880"
  },
  {
    "text": "or all right thanks everybody",
    "start": "1739880",
    "end": "1744519"
  }
]