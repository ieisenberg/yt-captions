[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "text": "[Music]",
    "start": "680",
    "end": "8549"
  },
  {
    "text": "hi i'm lynn clark and i make code cartoons and i also work at fastly which is doing",
    "start": "15120",
    "end": "20640"
  },
  {
    "text": "a lot of really cool things with webassembly to make better edge compute possible",
    "start": "20640",
    "end": "26080"
  },
  {
    "text": "i'm also a co-founder of the bytecode alliance which is building a vision of a future webassembly ecosystem that",
    "start": "26080",
    "end": "32000"
  },
  {
    "text": "extends beyond the browser and if you haven't been keeping up with webassembly you might be thinking why",
    "start": "32000",
    "end": "37760"
  },
  {
    "text": "would you run want to run webassembly outside of the browser so first i want to explain how we got",
    "start": "37760",
    "end": "43280"
  },
  {
    "text": "here and i'm going to start at the beginning for that so the first question is",
    "start": "43280",
    "end": "49280"
  },
  {
    "start": "46000",
    "end": "430000"
  },
  {
    "text": "why was webassembly created in the first place the browsers wanted developers to be",
    "start": "49280",
    "end": "54800"
  },
  {
    "text": "able to compile code bases written in languages like c plus and rust to a single file and then have that file run",
    "start": "54800",
    "end": "62399"
  },
  {
    "text": "at near native speeds in the browser and they wanted it to run in a very secure way in a well isolated sandbox",
    "start": "62399",
    "end": "69600"
  },
  {
    "text": "because you really need that when you're running untrusted code that you've downloaded from somewhere on the internet",
    "start": "69600",
    "end": "76000"
  },
  {
    "text": "to get that near native speed the bytecode for these webassembly binaries need to be as close as possible to the",
    "start": "76000",
    "end": "81759"
  },
  {
    "text": "native instruction set architectures or isas like x86 or arm but without",
    "start": "81759",
    "end": "86799"
  },
  {
    "text": "specializing to any particular isa so this meant creating a really low",
    "start": "86799",
    "end": "92400"
  },
  {
    "text": "level abstraction over various isas this made it easy to run the same binary",
    "start": "92400",
    "end": "98799"
  },
  {
    "text": "across a bunch of different machines with different machine architectures and this got developers really excited",
    "start": "98799",
    "end": "104479"
  },
  {
    "text": "even those developers who were working completely outside of the browser but as these developers started bringing",
    "start": "104479",
    "end": "111280"
  },
  {
    "text": "webassembly to the server in other places they left some of the key properties of webassembly behind",
    "start": "111280",
    "end": "117680"
  },
  {
    "text": "they were giving these webassembly binaries full access to the operating systems system call library",
    "start": "117680",
    "end": "123920"
  },
  {
    "text": "that compromised security and also compromised portability since now the binary was tied to a",
    "start": "123920",
    "end": "129679"
  },
  {
    "text": "particular operating system given this we realized that we didn't",
    "start": "129679",
    "end": "134720"
  },
  {
    "text": "just need an abstract isa we also needed an abstract operating",
    "start": "134720",
    "end": "139840"
  },
  {
    "text": "system one that made it possible to run the same binary across a bunch of different operating systems while",
    "start": "139840",
    "end": "145440"
  },
  {
    "text": "preserving the effectiveness of the webassembly sandbox so we started work on wazi the",
    "start": "145440",
    "end": "151280"
  },
  {
    "text": "webassembly system interface the goal of wazzy is to create a very",
    "start": "151280",
    "end": "156480"
  },
  {
    "text": "modular set of system interfaces and these include all of the low-level",
    "start": "156480",
    "end": "161840"
  },
  {
    "text": "kinds of interfaces that you'd expect from a system interface layer it also includes some of the higher level ones too like neural networks and",
    "start": "161840",
    "end": "168560"
  },
  {
    "text": "crypto and we expect many more of these higher level apis to be added",
    "start": "168560",
    "end": "174239"
  },
  {
    "text": "these interfaces need to follow capability-based security principles to ensure that we maintain the integrity of",
    "start": "174319",
    "end": "180800"
  },
  {
    "text": "the sandbox and for the most part these interfaces also need to be portable across the major operating systems",
    "start": "180800",
    "end": "186640"
  },
  {
    "text": "although we are okay with system specific interfaces for some narrowly scoped use cases",
    "start": "186640",
    "end": "193360"
  },
  {
    "text": "it was when we started trying to make this portability work that we started getting into some problems",
    "start": "193360",
    "end": "199519"
  },
  {
    "text": "and these problems started coming to light when we were thinking about a pretty core concept in many operating",
    "start": "199519",
    "end": "204720"
  },
  {
    "text": "systems the file system a lot of code today depends on the file",
    "start": "204720",
    "end": "210959"
  },
  {
    "text": "system and that code uses the file system for lots of different tasks",
    "start": "210959",
    "end": "216080"
  },
  {
    "text": "it's where you persist data it's where you share data between two different programs running in different processes",
    "start": "216080",
    "end": "222560"
  },
  {
    "text": "it's where you put the code for executables it's where configuration lives and it's",
    "start": "222560",
    "end": "227599"
  },
  {
    "text": "where assets get stored files are like these swiss army knives that are used for all of these different",
    "start": "227599",
    "end": "233920"
  },
  {
    "text": "tasks but as we were thinking about it all of the places where we want wazzy to run we",
    "start": "233920",
    "end": "240480"
  },
  {
    "text": "started thinking whether this was really the right abstraction to use",
    "start": "240480",
    "end": "246640"
  },
  {
    "text": "the file achieved essential position in system interfaces during a very different time in software development",
    "start": "246799",
    "end": "254000"
  },
  {
    "text": "there were a few operating systems that really entrenched the file in this privileged position",
    "start": "254000",
    "end": "259199"
  },
  {
    "text": "and these operating systems were first being developed in the 1970s and 80s this was when you had the rise of many",
    "start": "259199",
    "end": "265919"
  },
  {
    "text": "computers and after that the personal computer mostly to help with office work which of course was organized in paper",
    "start": "265919",
    "end": "271600"
  },
  {
    "text": "files for those kinds of systems having a file system and having direct access to that",
    "start": "271600",
    "end": "277600"
  },
  {
    "text": "file system made a whole lot of sense if you look at the systems that we're building today the ones that we're",
    "start": "277600",
    "end": "284240"
  },
  {
    "text": "building applications for things look a bit different we're building applications for the",
    "start": "284240",
    "end": "290080"
  },
  {
    "text": "personal computer still that's true but with things like browsers we started running applications inside of other",
    "start": "290080",
    "end": "296560"
  },
  {
    "text": "applications places where you probably don't want that inner application to have direct access to the file system",
    "start": "296560",
    "end": "302880"
  },
  {
    "text": "and then as we started moving applications to the cloud and edge networks and as iot devices started proliferating we",
    "start": "302880",
    "end": "309120"
  },
  {
    "text": "suddenly had an entirely different landscape where direct access to a real file system was the exception not the",
    "start": "309120",
    "end": "315440"
  },
  {
    "text": "norm and on top of all of that as we've moved towards having modular ecosystems of",
    "start": "315440",
    "end": "321520"
  },
  {
    "text": "open source code that you just plug together like npm or pi pi these file systems are presenting maintainability",
    "start": "321520",
    "end": "327520"
  },
  {
    "text": "and security problems because the way that these file systems are used it's basically like having one",
    "start": "327520",
    "end": "333759"
  },
  {
    "text": "big pile of global shared mutable state given all of this",
    "start": "333759",
    "end": "339919"
  },
  {
    "text": "files don't really feel like the right kind of universal abstraction anymore",
    "start": "339919",
    "end": "345600"
  },
  {
    "text": "if we're going to try and break out of this file centric paradigm we need to think about what the file",
    "start": "345759",
    "end": "351520"
  },
  {
    "text": "actually is and what it does what exactly is a file",
    "start": "351520",
    "end": "357280"
  },
  {
    "text": "a file consists of two things some bytes that encode content and you can think of this as an array or a",
    "start": "357280",
    "end": "363360"
  },
  {
    "text": "stream and this is the data and then there are other bytes that contain metadata about that data",
    "start": "363360",
    "end": "370639"
  },
  {
    "text": "this includes things like the name of the file time stamps permissions and what underlying device the file is",
    "start": "370639",
    "end": "376400"
  },
  {
    "text": "stored on it's the second part here where we start to have problems",
    "start": "376400",
    "end": "382080"
  },
  {
    "text": "when you're working with this metadata that's when you need to know about the conventions of the host system that",
    "start": "382080",
    "end": "387360"
  },
  {
    "text": "you're running on but when you think about what most programs are actually doing what they",
    "start": "387360",
    "end": "393039"
  },
  {
    "text": "actually care about most of them only care about the data in those files they just want to get that",
    "start": "393039",
    "end": "398400"
  },
  {
    "text": "array or stream of bytes and start working on it they don't care about where this data",
    "start": "398400",
    "end": "403919"
  },
  {
    "text": "lives now of course there are some applications that do need to know the details about the metadata as well so",
    "start": "403919",
    "end": "410560"
  },
  {
    "text": "for example if you're building backup software then you want to know the file name and which directory each file is in",
    "start": "410560",
    "end": "418160"
  },
  {
    "text": "but most of the time that metadata is unnecessary for what the program is trying to do",
    "start": "418160",
    "end": "423759"
  },
  {
    "text": "my colleague in the architect of a lot of wassie dan gomen has called this distinction the difference between",
    "start": "423759",
    "end": "429680"
  },
  {
    "text": "compute and meta compute and he had the thought that what if we were to push as much of this meta",
    "start": "429680",
    "end": "435440"
  },
  {
    "start": "430000",
    "end": "605000"
  },
  {
    "text": "compute to the edges of the system as possible either up to an orchestrating module or",
    "start": "435440",
    "end": "441440"
  },
  {
    "text": "even better out to the host itself to see exactly what this means let's",
    "start": "441440",
    "end": "446720"
  },
  {
    "text": "walk through an example let's say that you're writing a utility that shrinks an image down to a",
    "start": "446720",
    "end": "452560"
  },
  {
    "text": "particular size and you want to run this utility from the command line",
    "start": "452560",
    "end": "457759"
  },
  {
    "text": "so how would this work in the file system centric paradigm well we have the host system that's",
    "start": "457759",
    "end": "463919"
  },
  {
    "text": "around the outside here the gray box and then the wasm module is running inside of the host as a guest in the",
    "start": "463919",
    "end": "470160"
  },
  {
    "text": "white box so the wasm module would be passed in an array of arguments which are all strings",
    "start": "470160",
    "end": "477680"
  },
  {
    "text": "and it would take the string that's at a particular index and use that as a file name",
    "start": "477680",
    "end": "483199"
  },
  {
    "text": "then that was module would call the open syscall with that string the operating system would give the wasa",
    "start": "483199",
    "end": "489360"
  },
  {
    "text": "module a handle to the file and then the wasm module would read the bytes from the file",
    "start": "489360",
    "end": "496879"
  },
  {
    "text": "and with this we're requiring the module to think about the file system we're requiring it",
    "start": "496879",
    "end": "501919"
  },
  {
    "text": "to think about the context that it's running in but this module wouldn't really need to know about any of these details all it",
    "start": "501919",
    "end": "509120"
  },
  {
    "text": "really needs is a stream of vice to come in so that it can operate on that stream",
    "start": "509120",
    "end": "514640"
  },
  {
    "text": "so now let's try moving this meta compute out of the module and over to the host",
    "start": "514640",
    "end": "520800"
  },
  {
    "text": "by convention a program's main function takes a very generic set of parameters",
    "start": "520800",
    "end": "525839"
  },
  {
    "text": "so for example in c it takes the r count and a pointer to the array of strings",
    "start": "525839",
    "end": "531040"
  },
  {
    "text": "that are the arcs but let's say that we introduced a convention and tooling support for more",
    "start": "531040",
    "end": "536800"
  },
  {
    "text": "application specific parameters so for example let's say that the main function for this application accepts",
    "start": "536800",
    "end": "543279"
  },
  {
    "text": "the stream and returns a result that contains either a stream or an error",
    "start": "543279",
    "end": "549839"
  },
  {
    "text": "when you run this on the command line the host will be able to look at that string and see that the type that was",
    "start": "549839",
    "end": "556240"
  },
  {
    "text": "being asked for is actually a stream and the host would know that it can convert a file to a stream",
    "start": "556240",
    "end": "563200"
  },
  {
    "text": "so instead of just passing in a string the host would instead open the file itself and get a handle",
    "start": "563200",
    "end": "569200"
  },
  {
    "text": "which the host can then use to stream bytes into the wasm module and with this we've moved all of the",
    "start": "569200",
    "end": "575360"
  },
  {
    "text": "meta compute over to the host so this module no longer has any concept bake into it",
    "start": "575360",
    "end": "581600"
  },
  {
    "text": "of whether or not there's a file system and this makes it more portable this architecture also makes things more",
    "start": "581600",
    "end": "588000"
  },
  {
    "text": "secure because this way we don't need to give the program access to that open syscall and that way even if the code in this",
    "start": "588000",
    "end": "594399"
  },
  {
    "text": "utility gets exploited or subject to a supply chain attack it doesn't have access to the open syscall so it can't",
    "start": "594399",
    "end": "600640"
  },
  {
    "text": "be opening files willy-nilly when you don't expect it to",
    "start": "600640",
    "end": "605839"
  },
  {
    "text": "but of course none of this matters if developers don't use it we need to have a gradual adoption path",
    "start": "606320",
    "end": "612880"
  },
  {
    "text": "we need a way for everyone in the community to transition to this new paradigm at their own pace so that the",
    "start": "612880",
    "end": "618480"
  },
  {
    "text": "whole community doesn't have to move in lockstep we're planning three different options",
    "start": "618480",
    "end": "624399"
  },
  {
    "text": "for how to compile a module to use wazzy in this way and these three options represent that",
    "start": "624399",
    "end": "629920"
  },
  {
    "text": "gradual adoption path let's say that you already have some legacy code that you want to compile",
    "start": "629920",
    "end": "636720"
  },
  {
    "text": "and this code makes extensive use of the some of the not so good parts of traditional file system apis",
    "start": "636720",
    "end": "643519"
  },
  {
    "text": "the parts that bake in expectations about the host environment",
    "start": "643519",
    "end": "648560"
  },
  {
    "text": "in that case you would signal to the compiler that you want to use the legacy file system",
    "start": "648560",
    "end": "653680"
  },
  {
    "text": "interface and this might be through a flag or through a target triple this would link your code against the",
    "start": "653680",
    "end": "659920"
  },
  {
    "text": "version of libc or whatever your language's standard library is that's implemented in terms of the wazi file",
    "start": "659920",
    "end": "665519"
  },
  {
    "text": "system interface and this is in many ways the same api as the file system api that's exposed by",
    "start": "665519",
    "end": "671600"
  },
  {
    "text": "pos-x so your code can act like it has direct access to a file system which it might have in some cases",
    "start": "671600",
    "end": "677920"
  },
  {
    "text": "or the host might provide a virtualized file system either way this looks pretty much like",
    "start": "677920",
    "end": "684240"
  },
  {
    "text": "the run-of-the-mill file system apis that most operating systems exposed your code",
    "start": "684240",
    "end": "690000"
  },
  {
    "text": "now this code would not work on hosts that didn't either provide direct access to the file system or provide a",
    "start": "690000",
    "end": "695440"
  },
  {
    "text": "virtualized file system so it wouldn't provide full portability but it would be an easy on-ramp to",
    "start": "695440",
    "end": "700880"
  },
  {
    "text": "moving code to using webassembly but what if you do want that portability",
    "start": "700880",
    "end": "706160"
  },
  {
    "text": "and you want the isolation between different modules that webassembly can give you where you aren't sharing the file system between the different",
    "start": "706160",
    "end": "712160"
  },
  {
    "text": "modules for that case we're providing a compatibility layer",
    "start": "712160",
    "end": "717440"
  },
  {
    "text": "that the developer would still write their code using their language's normal file apis but in this case what we're",
    "start": "717440",
    "end": "724000"
  },
  {
    "text": "currently thinking is that the host wouldn't actually be the one providing the file system instead the module itself would be",
    "start": "724000",
    "end": "730480"
  },
  {
    "text": "virtualizing its own file system then these quote-unquote files would be in the linear memory of the wasm module",
    "start": "730480",
    "end": "738399"
  },
  {
    "text": "this means that we don't have that global shared mutable state problem that the file system introduces even though these look like",
    "start": "738399",
    "end": "745279"
  },
  {
    "text": "files in the source code under the hood they would use wazio types things like streams and arrays",
    "start": "745279",
    "end": "751120"
  },
  {
    "text": "that would give them that full portability however this virtualization would introduce some inefficiencies including",
    "start": "751120",
    "end": "758079"
  },
  {
    "text": "larger file sizes for the wasm module in the case where you want full",
    "start": "758079",
    "end": "763519"
  },
  {
    "text": "portability and efficiency all at the same time you would have a different api in your source code the wazi io api",
    "start": "763519",
    "end": "770639"
  },
  {
    "text": "so that means that you would change the code so that instead of passing files around you'd be passing around those i o",
    "start": "770639",
    "end": "775760"
  },
  {
    "text": "types like streams and arrays of bytes around and with this the developer no longer even thinks in terms of files",
    "start": "775760",
    "end": "783760"
  },
  {
    "text": "it's all just these pure i o types the developer doesn't think that i have a file with this name in this directory",
    "start": "783760",
    "end": "790800"
  },
  {
    "text": "i'll open the file to get a stream of bytes from it they just think i have a stream of bytes",
    "start": "790800",
    "end": "797600"
  },
  {
    "text": "this means that the code really can run anywhere it doesn't matter what host system all systems can represent these basic",
    "start": "797600",
    "end": "804320"
  },
  {
    "text": "primitive types and we've completely gotten rid of the potential for global shared mutable",
    "start": "804320",
    "end": "809519"
  },
  {
    "text": "state while also eliminating the overhead of the per module virtualized file systems",
    "start": "809519",
    "end": "816000"
  },
  {
    "text": "this path also potentially opens up opportunities for further optimizations because the engine now has more detailed",
    "start": "816000",
    "end": "822639"
  },
  {
    "text": "type information now in talking through these three options there's something i want to be",
    "start": "822639",
    "end": "828560"
  },
  {
    "text": "clear about you don't need to make the same choice for all of the different modules that you have in your application",
    "start": "828560",
    "end": "835600"
  },
  {
    "text": "part of this gradual adoption path is having the ability to convert certain modules before others",
    "start": "835600",
    "end": "842079"
  },
  {
    "text": "with both the second and the third option that i just talked about you're using wazzy i o types either",
    "start": "842079",
    "end": "847680"
  },
  {
    "text": "explicitly or implicitly and in both cases you're not expecting to share the file system between these two modules",
    "start": "847680",
    "end": "855040"
  },
  {
    "text": "so this means that you can just use these two together and they can simply pass values back and forth between each other",
    "start": "855040",
    "end": "861920"
  },
  {
    "text": "now it's not quite as trivial to plug these modules up to ones that use wassie file system",
    "start": "861920",
    "end": "867360"
  },
  {
    "text": "but it's still pretty easy if you want a module that is using wazi file system to call something from",
    "start": "867360",
    "end": "873760"
  },
  {
    "text": "a module that uses wazi io then you just need to have some code in between to extract a stream or array of bytes from",
    "start": "873760",
    "end": "879760"
  },
  {
    "text": "the file's content and pass that into the washi i o module",
    "start": "879760",
    "end": "884800"
  },
  {
    "text": "there are some kinds of modules that will always require the full wazzy file system that can't use only the portable",
    "start": "884800",
    "end": "890880"
  },
  {
    "text": "parts but we expect this to represent a very small fraction of the modules that",
    "start": "890880",
    "end": "896000"
  },
  {
    "text": "developers are creating and we're hoping to see the rest of the ecosystem gradually migrate to only using wazio",
    "start": "896000",
    "end": "904399"
  },
  {
    "text": "so this is the kind of thinking that we're applying as we're building out this ecosystem",
    "start": "904480",
    "end": "909600"
  },
  {
    "text": "how can we move these details out to the edges so that orchestrating code or the host can take charge of them and",
    "start": "909600",
    "end": "916079"
  },
  {
    "text": "potentially optimize them and it's one of these potential host optimizations that i want to end with",
    "start": "916079",
    "end": "923519"
  },
  {
    "start": "918000",
    "end": "1293000"
  },
  {
    "text": "and this is one opportunity that we see that is specific to the cloud native space but we're sure that there are lots of",
    "start": "923519",
    "end": "930560"
  },
  {
    "text": "other ways that this kind of paradigm can help for different kinds of use cases and different kinds of communities",
    "start": "930560",
    "end": "935920"
  },
  {
    "text": "and we're excited to explore all of those more this opportunity has to do with requests",
    "start": "935920",
    "end": "941839"
  },
  {
    "text": "between containers and how to make those faster so let's walk through what happens when",
    "start": "941839",
    "end": "947600"
  },
  {
    "text": "you make a request and i want to be clear here uh this is just based on conversations that i've had i haven't actually set anything like this up",
    "start": "947600",
    "end": "954079"
  },
  {
    "text": "myself and walked through it stepping through it in a debugger or anything like that so there's a chance that i've gotten",
    "start": "954079",
    "end": "960480"
  },
  {
    "text": "some of the details wrong here but i think that this is at least directionally correct",
    "start": "960480",
    "end": "965600"
  },
  {
    "text": "and don't worry if you aren't familiar with the container world you should still be able to follow",
    "start": "965600",
    "end": "971680"
  },
  {
    "text": "exactly how we're making things more efficient here i'll just give you a quick rundown of the terms that i'll be using",
    "start": "971680",
    "end": "978240"
  },
  {
    "text": "so that you can understand a little bit better so while containers often are on",
    "start": "978240",
    "end": "983680"
  },
  {
    "text": "different machines you can also have multiple containers on the same machine in something called a",
    "start": "983680",
    "end": "989199"
  },
  {
    "text": "pod and sometimes a container in one of these pods needs to have some additional functionality bolted onto it so for that",
    "start": "989199",
    "end": "996399"
  },
  {
    "text": "you use another container which is called a sidecar container",
    "start": "996399",
    "end": "1001440"
  },
  {
    "text": "so let's say that you have your pod and in that pod you have a main container and a side car container that does some",
    "start": "1001600",
    "end": "1007680"
  },
  {
    "text": "kind of work before any request gets sent out to the network and a good example of this that's used",
    "start": "1007680",
    "end": "1013920"
  },
  {
    "text": "commonly is something called a service mesh so now you're sending a request to",
    "start": "1013920",
    "end": "1019360"
  },
  {
    "text": "another service across the network in another pod what does that look like",
    "start": "1019360",
    "end": "1025438"
  },
  {
    "text": "the data that you're sending over gets serialized using the format something like protobufs",
    "start": "1025439",
    "end": "1031038"
  },
  {
    "text": "and then this serialization is saved into the memory in user space",
    "start": "1031039",
    "end": "1037120"
  },
  {
    "text": "then the system makes a system call and the memory is copied over to kernel",
    "start": "1037120",
    "end": "1042160"
  },
  {
    "text": "space memory so that's already two copies of this data now let's say that you are using this",
    "start": "1042160",
    "end": "1048480"
  },
  {
    "text": "sidecar so the sidecar is another container in that pod the data gets sent over to the sidecar",
    "start": "1048480",
    "end": "1055039"
  },
  {
    "text": "container as an incoming packet and then the data gets copied over again into kernel space memory by the network",
    "start": "1055039",
    "end": "1061919"
  },
  {
    "text": "drivers then it's copied into user space in the sidecar proxy",
    "start": "1061919",
    "end": "1068559"
  },
  {
    "text": "and then the system deserializes the data into objects that it can use and only then does the service mesh",
    "start": "1068559",
    "end": "1076160"
  },
  {
    "text": "actually run on this data we haven't even gotten the data out of the pod yet",
    "start": "1076160",
    "end": "1081200"
  },
  {
    "text": "we have to go through steps one through four again to get the data out to the network and then i guess the other side there's",
    "start": "1081200",
    "end": "1087360"
  },
  {
    "text": "a very good chance that this whole process has to happen again two-thirds of the steps here were",
    "start": "1087360",
    "end": "1094080"
  },
  {
    "text": "actually to make a request that's on the same machine to pipe data through the sidecar",
    "start": "1094080",
    "end": "1100240"
  },
  {
    "text": "and you'll see that documentation about the sidecar pattern calls this out as a trade-off these docs suggest that you",
    "start": "1100240",
    "end": "1106720"
  },
  {
    "text": "ask yourself whether the isolation is really worth it whether it's worth that additional overhead for your use case",
    "start": "1106720",
    "end": "1114400"
  },
  {
    "text": "but this overhead isn't inherent to the problem we can actually eliminate this as a trade-off",
    "start": "1114400",
    "end": "1120080"
  },
  {
    "text": "since we can do fine-grained sandboxing with webassembly we can actually make this relationship between the container",
    "start": "1120080",
    "end": "1125760"
  },
  {
    "text": "and the sidecar much more efficient even running them in the same process but we still get all of the isolation",
    "start": "1125760",
    "end": "1131440"
  },
  {
    "text": "between the two and in fact even more if we're not sharing the file system",
    "start": "1131440",
    "end": "1136480"
  },
  {
    "text": "and because of this we don't need the socket to be our interface between the isolated units of code instead our",
    "start": "1136480",
    "end": "1143280"
  },
  {
    "text": "interface between these two is just typed function calls to communicate between these two we",
    "start": "1143280",
    "end": "1149919"
  },
  {
    "text": "simply do a synchronous function call on a single threaded stack we use direct copies for registers and",
    "start": "1149919",
    "end": "1157280"
  },
  {
    "text": "potentially direct memory copies if needed there are no intermediate serialization",
    "start": "1157280",
    "end": "1162480"
  },
  {
    "text": "and steps here and no heavyweight calls to the kernel or inter-process",
    "start": "1162480",
    "end": "1167679"
  },
  {
    "text": "communication this puts us into the nanosecond range for calls between the two",
    "start": "1167679",
    "end": "1173919"
  },
  {
    "text": "and this would be much faster than the call we just looked at from container to sidecar",
    "start": "1173919",
    "end": "1179840"
  },
  {
    "text": "however sometimes you actually do need things to be on different machines that are across the network and would be",
    "start": "1179840",
    "end": "1184960"
  },
  {
    "text": "inconvenient to have different apis for representing that and to have to change which api you're using based on whether",
    "start": "1184960",
    "end": "1190559"
  },
  {
    "text": "or not the other container is on the same machine or not but we actually don't have to in this",
    "start": "1190559",
    "end": "1195840"
  },
  {
    "text": "paradigm we've moved all of that decision making related to where the code's running out to the edges",
    "start": "1195840",
    "end": "1201600"
  },
  {
    "text": "the module you'd write imports the callee specifying a function signature that's appropriate for a cross network call so for example",
    "start": "1201600",
    "end": "1209679"
  },
  {
    "text": "allowing for various network failure modes and supporting non-blocking calls",
    "start": "1209679",
    "end": "1216080"
  },
  {
    "text": "in the case where the callee module is on a different machine the host could take care of serializing the data stream",
    "start": "1216159",
    "end": "1221840"
  },
  {
    "text": "and streaming it over the network over the socket but if a service mesh is being used the",
    "start": "1221840",
    "end": "1228240"
  },
  {
    "text": "host could instead supply just a proxy module that's on the same machine",
    "start": "1228240",
    "end": "1233280"
  },
  {
    "text": "that's using the much cheaper calling convention that i described just now",
    "start": "1233280",
    "end": "1238400"
  },
  {
    "text": "the important thing is that the host that handles is the host that handles this distinction not your code",
    "start": "1238400",
    "end": "1245760"
  },
  {
    "text": "and so in this way you can get the optimal performance when you're talking to a container on the same machine while not sacrificing the",
    "start": "1245760",
    "end": "1252559"
  },
  {
    "text": "ability to communicate with a container that's over the network we don't have all of these pieces in",
    "start": "1252559",
    "end": "1258559"
  },
  {
    "text": "place right now but once these foundational primitives are in place we think that somebody could build this",
    "start": "1258559",
    "end": "1263600"
  },
  {
    "text": "kind of efficiency into the existing cloud native ecosystem and we're excited to explore this further",
    "start": "1263600",
    "end": "1270880"
  },
  {
    "text": "we'll be writing about all of this more over the coming months as we push to move these standards forward",
    "start": "1270880",
    "end": "1276559"
  },
  {
    "text": "and we'd be interested in hearing from people coming from all different software communities about what they see",
    "start": "1276559",
    "end": "1281840"
  },
  {
    "text": "this kind of architecture opening up for their communities and use cases",
    "start": "1281840",
    "end": "1287360"
  },
  {
    "text": "i want to thank the organize organizers for inviting me and thank you all for listening",
    "start": "1287360",
    "end": "1293760"
  },
  {
    "start": "1293000",
    "end": "1349000"
  },
  {
    "text": "thanks for joining me and thoroughly enjoyed that presentation uh on on a sort of personal note i've",
    "start": "1295840",
    "end": "1302880"
  },
  {
    "text": "used wazzy just a little bit but certainly haven't been keeping up with the latest developments so i i learned a",
    "start": "1302880",
    "end": "1309760"
  },
  {
    "text": "lot in that talk it was it was fantastic i guess that probably brings me on to my first",
    "start": "1309760",
    "end": "1315840"
  },
  {
    "text": "question so within your talk you concentrated quite a bit on uh the next iteration of the file system",
    "start": "1315840",
    "end": "1323039"
  },
  {
    "text": "apis and i i i really like the sort of the historical context that that",
    "start": "1323039",
    "end": "1328640"
  },
  {
    "text": "revisiting the idea of do we really need to make the file system central so that was really interesting but it'd be great",
    "start": "1328640",
    "end": "1335039"
  },
  {
    "text": "if you could give a broad overview of of where do you think wazzy is at at the moment because when it first came out i",
    "start": "1335039",
    "end": "1341600"
  },
  {
    "text": "think it had file system console and maybe timer what what's it look like from 30 000 feet at",
    "start": "1341600",
    "end": "1348480"
  },
  {
    "text": "the moment yeah well so um i i think one thing is um",
    "start": "1348480",
    "end": "1353679"
  },
  {
    "text": "people i think didn't realize when we announced wazzy that we were announcing this beginning of the standardization",
    "start": "1353679",
    "end": "1360240"
  },
  {
    "text": "effort um and not necessarily that there was something that people should be using in production already",
    "start": "1360240",
    "end": "1367039"
  },
  {
    "text": "um so in the first day in the early days it you know uh the file system was there um",
    "start": "1367039",
    "end": "1375600"
  },
  {
    "text": "we had timer random a lot of the stuff that you would have and basically pos-x uh was there the there were only a",
    "start": "1375600",
    "end": "1382559"
  },
  {
    "text": "handful of things like sockets that we did not include in the first iteration",
    "start": "1382559",
    "end": "1388559"
  },
  {
    "text": "um but this is still i would say the first iteration of wazzy it you know",
    "start": "1388559",
    "end": "1396559"
  },
  {
    "text": "we're still in the early days we're still figuring out what that basic platform should be",
    "start": "1396559",
    "end": "1403120"
  },
  {
    "text": "um and i think that we are now just now getting to the point where we do have",
    "start": "1403120",
    "end": "1408159"
  },
  {
    "text": "that uh picture pretty clear and so this push that we're going to be doing around",
    "start": "1408159",
    "end": "1413840"
  },
  {
    "text": "was the iowa and around wassey file system is really to bring this first",
    "start": "1413840",
    "end": "1420400"
  },
  {
    "text": "iteration of wazzy to the production ready stage i see so that explains why",
    "start": "1420400",
    "end": "1426559"
  },
  {
    "text": "your presentation was focusing on quite a significant rethink of file system apis and you know",
    "start": "1426559",
    "end": "1433039"
  },
  {
    "text": "questioning the need for the file system api and what it means to washi so does that mean from a i don't know",
    "start": "1433039",
    "end": "1439760"
  },
  {
    "text": "from a versioning perspective do you consider wazzy to be a sort of zero dot product at the moment",
    "start": "1439760",
    "end": "1445919"
  },
  {
    "start": "1445000",
    "end": "1541000"
  },
  {
    "text": "very much so and and that's actually pretty explicit in the standardization process um nothing has actually reached",
    "start": "1445919",
    "end": "1451919"
  },
  {
    "text": "phase three yet um and so in order to",
    "start": "1451919",
    "end": "1456960"
  },
  {
    "text": "to so phase three is when it's ready for widespread implementation for people to",
    "start": "1456960",
    "end": "1462400"
  },
  {
    "text": "start finding the flaws in it um and we're pushing hwazi io and wazi file",
    "start": "1462400",
    "end": "1468799"
  },
  {
    "text": "system to phase three soon um wazio will probably be first",
    "start": "1468799",
    "end": "1473919"
  },
  {
    "text": "um [Music] because we are now starting to feel like it's actually ready for people to really",
    "start": "1473919",
    "end": "1480320"
  },
  {
    "text": "start playing with it really start um seeing whether or not it meets their use",
    "start": "1480320",
    "end": "1485520"
  },
  {
    "text": "cases and then after that i'll go to phase four which is where we're really putting finishing touches on it and then after",
    "start": "1485520",
    "end": "1492480"
  },
  {
    "text": "that it's uh phase five which is where the w3c basically rubber stamps it um but i would say that that you know um we",
    "start": "1492480",
    "end": "1500000"
  },
  {
    "text": "really haven't reached wazzy 1.0 until a lot of these things have reached phase four yep",
    "start": "1500000",
    "end": "1505440"
  },
  {
    "text": "i guess you mentioned that wazzy is at a stage where it's it's near",
    "start": "1505440",
    "end": "1511279"
  },
  {
    "text": "it's as a stage where it's ready for people to start using it i think looking at it from the flip side people are",
    "start": "1511279",
    "end": "1517440"
  },
  {
    "text": "ready for there to be a wazi i mean web assembly is taking off in a big way outside of the browser and",
    "start": "1517440",
    "end": "1524400"
  },
  {
    "text": "we need this standardization so that we don't keep reinventing the wheel on that particular notes",
    "start": "1524400",
    "end": "1531039"
  },
  {
    "text": "what are you most excited about any if you can't choose one by all means choose multiple",
    "start": "1531039",
    "end": "1536799"
  },
  {
    "text": "things what what excites you most about webassembly at the moment well uh there's some",
    "start": "1536799",
    "end": "1543919"
  },
  {
    "start": "1541000",
    "end": "1683000"
  },
  {
    "text": "really excellent foundational work going on right now in the community group around the component model and so",
    "start": "1543919",
    "end": "1550480"
  },
  {
    "text": "wazzy's part of this so are other proposals like interface types and",
    "start": "1550480",
    "end": "1555919"
  },
  {
    "text": "module linking and what the component model does you know if you look at the webassembly ecosystem today",
    "start": "1555919",
    "end": "1561520"
  },
  {
    "text": "you have ways of um taking modules and putting them together",
    "start": "1561520",
    "end": "1566640"
  },
  {
    "text": "into larger applications but in order to do that you have to do a lot of gluing yourself you have to do a lot of like",
    "start": "1566640",
    "end": "1572640"
  },
  {
    "text": "binding and all sorts of other things um with the component model a lot of that",
    "start": "1572640",
    "end": "1579360"
  },
  {
    "text": "additional work goes away and it's basically you can take these lego blocks that you didn't write yourself",
    "start": "1579360",
    "end": "1585840"
  },
  {
    "text": "and assemble them together uh really easily um in the same way that you do in",
    "start": "1585840",
    "end": "1593039"
  },
  {
    "text": "you know javascript with the npm ecosystem or rust with crates ecosystem",
    "start": "1593039",
    "end": "1598159"
  },
  {
    "text": "um and i think that that's going to unlock so much potential and one of the the neat",
    "start": "1598159",
    "end": "1604080"
  },
  {
    "text": "things about webassembly that goes above and beyond those existing existing ecosystems is the fact that these",
    "start": "1604080",
    "end": "1610240"
  },
  {
    "text": "components um they can be written in different languages but still interoperate really easily and",
    "start": "1610240",
    "end": "1616240"
  },
  {
    "text": "efficiently um they can't you know they are isolated from each other so you have the sandboxing around them which uh",
    "start": "1616240",
    "end": "1623360"
  },
  {
    "text": "does protect you from a lot of supply chain attacks yeah um and and so i think that that the kind of ecosystem this is",
    "start": "1623360",
    "end": "1629679"
  },
  {
    "text": "going to be a completely new kind of ecosystem um that",
    "start": "1629679",
    "end": "1634720"
  },
  {
    "text": "solves a lot of the problems that other ecosystems have faced historically",
    "start": "1634720",
    "end": "1639919"
  },
  {
    "text": "yeah i definitely want to get onto that in a little bit at this point i probably should backtrack a little bit we did",
    "start": "1639919",
    "end": "1645039"
  },
  {
    "text": "have a question in the chat which i guess relates to the current state of wazi uh there was a",
    "start": "1645039",
    "end": "1650880"
  },
  {
    "text": "question about um making network requests from wasm so",
    "start": "1650880",
    "end": "1656960"
  },
  {
    "text": "a lot of the early adopters of webassembly outside the browser things like um blockchain or",
    "start": "1656960",
    "end": "1662720"
  },
  {
    "text": "smart contract engines um where you work yourself at fastly edge networks almost all of them are relying",
    "start": "1662720",
    "end": "1669600"
  },
  {
    "text": "on some kind of network io rather than file system io",
    "start": "1669600",
    "end": "1674960"
  },
  {
    "text": "what's the current state of of io beyond file file system access within",
    "start": "1674960",
    "end": "1681679"
  },
  {
    "text": "wazi so um there was a a team pushing a wazi sockets proposal",
    "start": "1681679",
    "end": "1689919"
  },
  {
    "start": "1683000",
    "end": "1903000"
  },
  {
    "text": "um that's still open but we have been thinking that sockets might actually be a little bit too low level",
    "start": "1689919",
    "end": "1695840"
  },
  {
    "text": "for wassie you know somebody will probably push that across in the same way that was a file system",
    "start": "1695840",
    "end": "1702080"
  },
  {
    "text": "is being pushed across so that we can support these legacy applications but that's another case where",
    "start": "1702080",
    "end": "1708240"
  },
  {
    "text": "thinking about higher level like what can we do higher level that moves a lot of this meta compute out to the host so",
    "start": "1708240",
    "end": "1714640"
  },
  {
    "text": "that the application itself isn't having to think about the socket layer um",
    "start": "1714640",
    "end": "1720240"
  },
  {
    "text": "and that you know that that last bit that i where i was talking about containers talking to each other",
    "start": "1720240",
    "end": "1726399"
  },
  {
    "text": "um for that kind of use case we would have",
    "start": "1726399",
    "end": "1731520"
  },
  {
    "text": "a higher level api that allows for that kind of network connectivity so it's interesting it's a bit like file",
    "start": "1731520",
    "end": "1738000"
  },
  {
    "text": "system once again you're trying to work out exactly what level you need to pitch the wazi interface at",
    "start": "1738000",
    "end": "1745120"
  },
  {
    "text": "so i guess yeah getting that right is the difference between success and failure almost for wazi",
    "start": "1745120",
    "end": "1751120"
  },
  {
    "text": "exactly and so we have some really good partners who we're working with on that um the envoy team from google uh is",
    "start": "1751120",
    "end": "1758960"
  },
  {
    "text": "currently driving work through um the wazzy process uh and we're also",
    "start": "1758960",
    "end": "1764720"
  },
  {
    "text": "working with um the crosslit team from microsoft um and there are some other folks",
    "start": "1764720",
    "end": "1771120"
  },
  {
    "text": "working in this space that are also collaborating with us on that okay so i guess the the expectation is",
    "start": "1771120",
    "end": "1777039"
  },
  {
    "text": "that it's it's a common problem you have people partnering and collaborating to to try",
    "start": "1777039",
    "end": "1783200"
  },
  {
    "text": "to solve it but at the moment it sounds like you're still trying to work out again the level to set it up",
    "start": "1783200",
    "end": "1790320"
  },
  {
    "text": "exactly yeah but we expect that to progress pretty quickly so after um this push to get wazio to phase three um",
    "start": "1790320",
    "end": "1798320"
  },
  {
    "text": "we expect that to be basically the next chunk of work that we're pushing to phase three yeah because everyone is",
    "start": "1798320",
    "end": "1803600"
  },
  {
    "text": "going to be using their own custom implementation of of some kind of",
    "start": "1803600",
    "end": "1808880"
  },
  {
    "text": "networking layer on top of webassembly i mean the other day i saw um i don't know if you come across waggy which is a cgi",
    "start": "1808880",
    "end": "1815600"
  },
  {
    "text": "style interface which i i quite i quite like i just i love simple things i",
    "start": "1815600",
    "end": "1820799"
  },
  {
    "text": "really enjoyed the simplicity of that solution that's actually the chrysler team at uh microsoft that put that out so they're",
    "start": "1820799",
    "end": "1828000"
  },
  {
    "text": "the one one of the the teams that's collaborating on figuring out the ideal path",
    "start": "1828000",
    "end": "1833279"
  },
  {
    "text": "okay so getting back to nano processes i've got a sort of difficult question to ask",
    "start": "1833279",
    "end": "1839200"
  },
  {
    "text": "there because you've alluded to it a few times you know some of the things you mentioned about what excites you about",
    "start": "1839200",
    "end": "1844320"
  },
  {
    "text": "webassembly is is the way that it it makes it easier to plug things together it makes it easier to plug",
    "start": "1844320",
    "end": "1850000"
  },
  {
    "text": "things together written in different languages with interface types coming along that will become easier you've got",
    "start": "1850000",
    "end": "1855279"
  },
  {
    "text": "the the sort of inherent security model you've mentioned things like supply chain attacks i can see this",
    "start": "1855279",
    "end": "1862000"
  },
  {
    "text": "wonderful future where you know as i i'm predominantly a javascript developer",
    "start": "1862000",
    "end": "1867279"
  },
  {
    "text": "where i can pull down modules written in c plus plus and rust and not really care what language they're written in i'll",
    "start": "1867279",
    "end": "1873279"
  },
  {
    "text": "have the confidence that that i'm not giving them kind of unfettered access to my file system and network it sounds",
    "start": "1873279",
    "end": "1880159"
  },
  {
    "text": "wonderful but the thing that i struggle with is how do we actually get there um",
    "start": "1880159",
    "end": "1886960"
  },
  {
    "text": "take for example someone like myself who spends most of their time messing around with with javascript and",
    "start": "1886960",
    "end": "1892559"
  },
  {
    "text": "and node and npm what are the stepping stones how do you think that that webassembly could",
    "start": "1892559",
    "end": "1899840"
  },
  {
    "text": "initially be integrated into that tool chain well so um",
    "start": "1899840",
    "end": "1907360"
  },
  {
    "start": "1903000",
    "end": "2078000"
  },
  {
    "text": "i think that uh mostly the tool chain can stay the same",
    "start": "1907360",
    "end": "1912480"
  },
  {
    "text": "um one of the things that we really want to see is deep integration",
    "start": "1912480",
    "end": "1917600"
  },
  {
    "text": "with those tool chains and we've actually started prototyping some deep integrations with different tool chains",
    "start": "1917600",
    "end": "1923919"
  },
  {
    "text": "um nothing that you know is ready to to show off yet um",
    "start": "1923919",
    "end": "1930320"
  },
  {
    "text": "and the idea is that um developers would be able to just work in their own language uh and be",
    "start": "1930320",
    "end": "1937600"
  },
  {
    "text": "pulling in these modules from um the webassembly ecosystem as needed",
    "start": "1937600",
    "end": "1943600"
  },
  {
    "text": "um so for the javascript ecosystem uh we've actually",
    "start": "1943600",
    "end": "1949120"
  },
  {
    "text": "uh if you were at wasm summit about a month ago um one of my colleagues actually showed",
    "start": "1949120",
    "end": "1955279"
  },
  {
    "text": "a little bit of um this prototype we've been working on for how we can actually package up",
    "start": "1955279",
    "end": "1962240"
  },
  {
    "text": "javascript uh modules with a very quick startup time inside of webassembly modules",
    "start": "1962240",
    "end": "1969519"
  },
  {
    "text": "i'm assuming that it packages a javascript virtual machine within webassembly to achieve that exactly and so we um use a",
    "start": "1969519",
    "end": "1978000"
  },
  {
    "text": "snapshotting tool called wiser to get a very fast startup it's actually uh if i remember correctly faster than",
    "start": "1978000",
    "end": "1986080"
  },
  {
    "text": "um a javascript engine by itself starting up you already get to the application is completely",
    "start": "1986080",
    "end": "1992240"
  },
  {
    "text": "initialized i see yeah because you know what code you're going to be running within that virtual machine already",
    "start": "1992240",
    "end": "1997600"
  },
  {
    "text": "ahead of time exactly so you can basically like begin all of the",
    "start": "1997600",
    "end": "2003600"
  },
  {
    "text": "byte code that's already been parsed and everything into the linear memory and then set up uh the instance with that linear",
    "start": "2003600",
    "end": "2010480"
  },
  {
    "text": "memory ready to go when it's running yeah because it was the migration challenge of of the existing javascript",
    "start": "2010480",
    "end": "2017039"
  },
  {
    "text": "modules which is the thing that i got hung up on it's it's it's good to know you're exploring a migration path there",
    "start": "2017039",
    "end": "2023600"
  },
  {
    "text": "because i think i think that's necessary to you need you need an easy path for people to follow to get there and you",
    "start": "2023600",
    "end": "2030159"
  },
  {
    "text": "need to be able to provide a path where some of the popular tooling whether it's babel or webpack or whatever else can",
    "start": "2030159",
    "end": "2037840"
  },
  {
    "text": "relatively easily move across cool there was one other question on",
    "start": "2037840",
    "end": "2045200"
  },
  {
    "text": "interesting i'm not entirely sure what the question is but java had a similar migration from applets in in the browser",
    "start": "2045200",
    "end": "2051040"
  },
  {
    "text": "to servlets in the data center i'm not entirely sure that's correct um java",
    "start": "2051040",
    "end": "2056480"
  },
  {
    "text": "existed on this outside of the browser before it tried to it tried to penetrate the browser",
    "start": "2056480",
    "end": "2062878"
  },
  {
    "text": "ecosystem what have you learned from the from that experience in adapting web assembly to the pod sidecar model",
    "start": "2062879",
    "end": "2069679"
  },
  {
    "text": "interesting i think it's personally i think java took a very very different route um i don't know whether",
    "start": "2069679",
    "end": "2075679"
  },
  {
    "text": "you've got any particular comments on that one lynn well one thing is that you know with java um",
    "start": "2075679",
    "end": "2082320"
  },
  {
    "start": "2078000",
    "end": "2231000"
  },
  {
    "text": "we java has a lot of same goals it's kind of like this is another iteration of the same goals but yes taking a lot",
    "start": "2082320",
    "end": "2089040"
  },
  {
    "text": "of lessons from java and from other um things that were happening around the",
    "start": "2089040",
    "end": "2094638"
  },
  {
    "text": "same time one of the things is that like interface types is pretty close to the component models that you would have",
    "start": "2094639",
    "end": "2100000"
  },
  {
    "text": "seen around that time um i think with java what is the i forget what it is",
    "start": "2100000",
    "end": "2105680"
  },
  {
    "text": "with java but you know there's bcom all this stuff um and",
    "start": "2105680",
    "end": "2112000"
  },
  {
    "text": "we are taking a lot of lessons for example from the component model the idea is that um",
    "start": "2112000",
    "end": "2118000"
  },
  {
    "text": "you don't bake in the distribution the idea that it's distributed into the component model that's a layer above",
    "start": "2118000",
    "end": "2123839"
  },
  {
    "text": "um so yeah we're taking a lot of these lessons uh and and applying them to this next iteration on the same goals",
    "start": "2123839",
    "end": "2131119"
  },
  {
    "text": "yeah i mean i think when web assembly first came out there were obvious immediate compara uh comparisons to",
    "start": "2131119",
    "end": "2138240"
  },
  {
    "text": "java and the applet model but i think there are quite a lot of differences to me some of the things that have been um",
    "start": "2138240",
    "end": "2145119"
  },
  {
    "text": "really important to the success of webassembly has been the simplicity of it in the first instance",
    "start": "2145119",
    "end": "2150880"
  },
  {
    "text": "uh the the complete lack of io initially sounds like it's it's it's an inhibitor",
    "start": "2150880",
    "end": "2156560"
  },
  {
    "text": "i think actually that was quite an important decision to make also making it immediately multi-language",
    "start": "2156560",
    "end": "2162720"
  },
  {
    "text": "from from the the outset i know you can compile multiple languages to the java virtual machine but it's still kind of",
    "start": "2162720",
    "end": "2169440"
  },
  {
    "text": "cut it in half and it has java all all the way through i think there are exactly yeah many early design decisions",
    "start": "2169440",
    "end": "2175359"
  },
  {
    "text": "that each one of them was probably felt small but in composite when you look at",
    "start": "2175359",
    "end": "2181280"
  },
  {
    "text": "them all together i do think it it's that's weber stemly far apart from java and the jvm",
    "start": "2181280",
    "end": "2188560"
  },
  {
    "text": "anyway it looks like we're probably um heading out of time we don't have any more questions there so once again",
    "start": "2188560",
    "end": "2194800"
  },
  {
    "text": "thanks for a fantastic presentation thoroughly enjoyed it well thank you so much and thank you for inviting me yeah",
    "start": "2194800",
    "end": "2200480"
  },
  {
    "text": "no problem i think there's a spirit thing like that",
    "start": "2200480",
    "end": "2206000"
  },
  {
    "text": "i'll check i think in the schedule possibly a zoom hangout so um if you have time then it would be it'd be great",
    "start": "2206000",
    "end": "2212560"
  },
  {
    "text": "to see you in there but otherwise thanks again for your time much appreciated and i'll catch you later sometime",
    "start": "2212560",
    "end": "2217920"
  },
  {
    "text": "sounds great i'll see you over there bye [Music]",
    "start": "2217920",
    "end": "2229429"
  },
  {
    "text": "you",
    "start": "2231680",
    "end": "2233760"
  }
]