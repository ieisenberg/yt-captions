[
  {
    "start": "0",
    "end": "189000"
  },
  {
    "text": "first of all welcome I am Daniel Morrison and I when I'm not uh talking",
    "start": "14879",
    "end": "20199"
  },
  {
    "text": "about Ruby I'm leading a uh running a small Ruby consultancy out of",
    "start": "20199",
    "end": "25720"
  },
  {
    "text": "Michigan um we've been doing Ruby since about 2005 and mostly rails web apps a",
    "start": "25720",
    "end": "32880"
  },
  {
    "text": "little bit of mobile a few other things here and there um but lots and lots of Ruby and then I also do a lot of uh Ruby",
    "start": "32880",
    "end": "40960"
  },
  {
    "text": "and rails instruction for Americana and have been doing that for quite a while as well so I claim I I",
    "start": "40960",
    "end": "49120"
  },
  {
    "text": "think I know my Ruby but you're welcome to challenge me and tell me that I",
    "start": "49120",
    "end": "54600"
  },
  {
    "text": "don't um I'm going to talk a little bit about the language uh overview what's",
    "start": "54600",
    "end": "60039"
  },
  {
    "text": "different from maybe Java or PHP or whatever you might have used before um",
    "start": "60039",
    "end": "67159"
  },
  {
    "text": "but Ruby itself is a a very nice Dynamic language that was invented in 1993 by a",
    "start": "67159",
    "end": "74200"
  },
  {
    "text": "guy named yakura matoto in Japan he looked at Pearl Small Talk lisp",
    "start": "74200",
    "end": "82320"
  },
  {
    "text": "and he decided he liked bits of all these languages he liked the object orientation of small talk he liked how",
    "start": "82320",
    "end": "88920"
  },
  {
    "text": "quick Pearl was to get started and write a script he liked some of the more functional programming pieces from lisp",
    "start": "88920",
    "end": "96079"
  },
  {
    "text": "and scheme and so he made um this Ruby language for uh mainly for programmer",
    "start": "96079",
    "end": "104159"
  },
  {
    "text": "happiness and programmer productivity he wanted something that he would enjoy coding in was easy to read and made him",
    "start": "104159",
    "end": "110240"
  },
  {
    "text": "happy to use um Ruby didn't have much of a",
    "start": "110240",
    "end": "115640"
  },
  {
    "text": "following outside of Japan though until 2004 when a guy named David H David",
    "start": "115640",
    "end": "122399"
  },
  {
    "text": "hinam Hansen who now works and lives here in Chicago uh built the rails",
    "start": "122399",
    "end": "127479"
  },
  {
    "text": "framework rails is the a framework for building database backed web apps that",
    "start": "127479",
    "end": "133480"
  },
  {
    "text": "caught on like wildfire and uh really propelled Ruby into the mainstream um not only did it did rails",
    "start": "133480",
    "end": "141519"
  },
  {
    "text": "become very popular it also led to a lot of other Frameworks that followed the rails conventions and we'll talk a",
    "start": "141519",
    "end": "147640"
  },
  {
    "text": "little bit about those but it also just got more people excited about doing Ruby for other things for mobile apps for",
    "start": "147640",
    "end": "155640"
  },
  {
    "text": "just plain old scripting and for everything else the reason you're probably here is",
    "start": "155640",
    "end": "162519"
  },
  {
    "text": "for uh the RO Mobile Track um because it it relies heavily on Ruby",
    "start": "162519",
    "end": "170800"
  },
  {
    "text": "and can use Ruby in a lot of really cool ways um I'm not an expert in RO Mobile or roads though so you're going to have",
    "start": "170800",
    "end": "176879"
  },
  {
    "text": "to talk to the other guys about that but uh what I like about it is it's gives",
    "start": "176879",
    "end": "182560"
  },
  {
    "text": "you the flexibility with of Ruby it takes some cues from the rails structure and lets you do some really cool things",
    "start": "182560",
    "end": "188239"
  },
  {
    "text": "with it a little bit about core Ruby I'm",
    "start": "188239",
    "end": "194519"
  },
  {
    "start": "189000",
    "end": "350000"
  },
  {
    "text": "assuming all of you are coming from java C PHP something like that um show a",
    "start": "194519",
    "end": "201319"
  },
  {
    "text": "hands like Java C some C kind of something other",
    "start": "201319",
    "end": "207080"
  },
  {
    "text": "scripting languages Pearl PHP something cool um cool",
    "start": "207080",
    "end": "215080"
  },
  {
    "text": "well Ruby is similar to all of those um it's a you know a c style language a Java style language where you have",
    "start": "215080",
    "end": "221280"
  },
  {
    "text": "objects and classes um one thing really interesting in Ruby is that everything",
    "start": "221280",
    "end": "226799"
  },
  {
    "text": "under the sun is an object so our integers the number five I can ask what",
    "start": "226799",
    "end": "232680"
  },
  {
    "text": "its class is and it's a it's an object of fixed num we don't have any native",
    "start": "232680",
    "end": "238079"
  },
  {
    "text": "types we have objects and it knows enough to make a really big number a big num so you don't have to",
    "start": "238079",
    "end": "246000"
  },
  {
    "text": "you know instantiate numbers but you can see that there might be some power there because numbers are are objects and",
    "start": "246000",
    "end": "254640"
  },
  {
    "text": "everything in Ruby is an object um you know with numbers we have",
    "start": "254640",
    "end": "259880"
  },
  {
    "text": "all the standard arithmetic um the one weird one in Ruby is the exponent",
    "start": "259880",
    "end": "265000"
  },
  {
    "text": "operator which is star star so two star star 10 is 2 to the 10th right rather than the carrot I don't know why we can",
    "start": "265000",
    "end": "272440"
  },
  {
    "text": "probably blame Pearl or something for",
    "start": "272440",
    "end": "275840"
  },
  {
    "text": "that um strings in Ruby also very simple you just have a string a string hello",
    "start": "278240",
    "end": "285759"
  },
  {
    "text": "world double quotes that's a a string it's an object as well um we'll be able to call methods on this and do all kinds",
    "start": "285759",
    "end": "293199"
  },
  {
    "text": "of cool oby things and we can do uh use",
    "start": "293199",
    "end": "298600"
  },
  {
    "text": "single quotes double quotes we also have some weird syntaxes with like percent q",
    "start": "298600",
    "end": "304919"
  },
  {
    "text": "and other strange ways but uh really we have single quoted and double quoted strings as you might expect and we also",
    "start": "304919",
    "end": "312720"
  },
  {
    "text": "have string interpolation using okay I'll be honest the syntax is",
    "start": "312720",
    "end": "318039"
  },
  {
    "text": "a little ugly it's pound curly braces uh but using that we can insert something",
    "start": "318039",
    "end": "323639"
  },
  {
    "text": "into a string whether it's the result of an a math operation a variable an entire",
    "start": "323639",
    "end": "329560"
  },
  {
    "text": "Ruby expression whatever it needs to be the only thing about strings is that um",
    "start": "329560",
    "end": "336400"
  },
  {
    "text": "sing you can only do string interpolation with double quoted strings in Ruby so I tend to just use double quotes a",
    "start": "336400",
    "end": "343479"
  },
  {
    "text": "lot they're cool but you'll probably get bit by that once with single",
    "start": "343479",
    "end": "350440"
  },
  {
    "start": "350000",
    "end": "506000"
  },
  {
    "text": "quotes um we have SIMPLE methods in Ruby you know you might be used to",
    "start": "351280",
    "end": "357680"
  },
  {
    "text": "functions in any other language anguage but if you think of object oriented terms we call them",
    "start": "357680",
    "end": "364759"
  },
  {
    "text": "methods this is a very simple Ruby method can everyone see that okay it's kind of small up here",
    "start": "364759",
    "end": "372120"
  },
  {
    "text": "um one thing you'll probably notice right away is that there's very little punctuation in Ruby methods and in Ruby",
    "start": "372120",
    "end": "379560"
  },
  {
    "text": "in general we Define a method with deaf and end So Def my",
    "start": "379560",
    "end": "385759"
  },
  {
    "text": "addition and then we take two arguments value one value two and we add them",
    "start": "385759",
    "end": "391720"
  },
  {
    "text": "together we don't have curly braces to denote the the method we just use end to say that we're",
    "start": "391720",
    "end": "397199"
  },
  {
    "text": "done um I also don't have any return value which is really cool um in Ruby we",
    "start": "397199",
    "end": "405080"
  },
  {
    "text": "have what we call the implicit return whatever the last thing is in a method that gets evaluated will be the return",
    "start": "405080",
    "end": "411360"
  },
  {
    "text": "value so if I do 10 different things whatever that last line is gets returned",
    "start": "411360",
    "end": "417199"
  },
  {
    "text": "as though I said return value value 1 plus value two we do have a return",
    "start": "417199",
    "end": "422560"
  },
  {
    "text": "keyword you only need to use it in a situation where you want to Short Circuit what you're",
    "start": "422560",
    "end": "428879"
  },
  {
    "text": "doing but how can you control the flow inside",
    "start": "428879",
    "end": "436280"
  },
  {
    "text": "inside doing operation inside the me that is not the return",
    "start": "442479",
    "end": "447599"
  },
  {
    "text": "value use the last you so if I was doing some it'll always",
    "start": "447599",
    "end": "453080"
  },
  {
    "text": "be the last line you return or you could have an if statement you know if some condition is met return an explicit",
    "start": "453080",
    "end": "459479"
  },
  {
    "text": "value so in Ruby we'll we'll usually you know do whatever we do and then just if we set a variable maybe just have that",
    "start": "459479",
    "end": "468039"
  },
  {
    "text": "return below or as last thing if you don't need a return value you can you know it'll return something but it",
    "start": "468039",
    "end": "474759"
  },
  {
    "text": "doesn't matter you could also explicitly return nil just say nil on on the last line as",
    "start": "474759",
    "end": "482199"
  },
  {
    "text": "well um to call a method looks pretty familiar right you just call the method",
    "start": "484599",
    "end": "490080"
  },
  {
    "text": "and say uh here are my arguments and in this particular one it would give us back the number",
    "start": "490080",
    "end": "496960"
  },
  {
    "text": "15 um what about type safety yeah interesting there's no idea of type",
    "start": "496960",
    "end": "502720"
  },
  {
    "text": "safety here right um let me come back to that in a minute because I want to talk about",
    "start": "502720",
    "end": "508599"
  },
  {
    "start": "506000",
    "end": "731000"
  },
  {
    "text": "variables first um when we Define a variable we also",
    "start": "508599",
    "end": "515800"
  },
  {
    "text": "don't use a type we just say something like a a equals hello world really",
    "start": "515800",
    "end": "522640"
  },
  {
    "text": "simple um we don't we don't need to specify what type it is and we can also",
    "start": "522640",
    "end": "527959"
  },
  {
    "text": "redefine that variable to be something different at a later time so I can redefine a to be 15 and both variables",
    "start": "527959",
    "end": "537000"
  },
  {
    "text": "and methods we can Define them with any lowercase letters um and we saw before",
    "start": "537000",
    "end": "543560"
  },
  {
    "text": "we use underscores between words to separate them so I had my underscore",
    "start": "543560",
    "end": "548920"
  },
  {
    "text": "Edition or I might have first underscore name we typically use lowercase letters",
    "start": "548920",
    "end": "555320"
  },
  {
    "text": "rather than Java style um camel",
    "start": "555320",
    "end": "560920"
  },
  {
    "text": "case there is ISE sensitive the names yes everything is case",
    "start": "561440",
    "end": "568120"
  },
  {
    "text": "sensitive um so to your question about type safety Ruby has what we call strong Dynamic",
    "start": "568120",
    "end": "576079"
  },
  {
    "text": "typing um it's strong because every variable this variable a always knows what it's",
    "start": "576079",
    "end": "583560"
  },
  {
    "text": "holding at one point it's holding a string and it knows it's holding a string later it's holding an integer we",
    "start": "583560",
    "end": "590720"
  },
  {
    "text": "know that it's holding an integer so the unlike um like C where you have to you",
    "start": "590720",
    "end": "597360"
  },
  {
    "text": "know you're talking about just bites of memory Ruby always knows exactly what type of object it's",
    "start": "597360",
    "end": "602880"
  },
  {
    "text": "holding so that's what we mean by strong typing Dynamic typing means we can change it so",
    "start": "602880",
    "end": "609839"
  },
  {
    "text": "a can be a string in one minute a number the next some crazy object two minutes",
    "start": "609839",
    "end": "615720"
  },
  {
    "text": "later it doesn't matter but on that a hell World string uh you try to",
    "start": "615720",
    "end": "625360"
  },
  {
    "text": "add a value of three an integer",
    "start": "625360",
    "end": "631040"
  },
  {
    "text": "eror yep the uh there is so if you try to do something that you can't do so",
    "start": "632959",
    "end": "638920"
  },
  {
    "text": "going back to my my addition method if I called that with two strings well the",
    "start": "638920",
    "end": "645079"
  },
  {
    "text": "plus sign is used as a concatenation operator in Ruby so if I say uh my",
    "start": "645079",
    "end": "651120"
  },
  {
    "text": "addition I spelled it wrong but whatever and call it with hello and World it will concatenate those together this is what",
    "start": "651120",
    "end": "657880"
  },
  {
    "text": "we call uh duck typing if it looks like a duck and it sounds like a",
    "start": "657880",
    "end": "663200"
  },
  {
    "text": "duck if these two values can be added together I don't care what they are um so this is where we see that yeah if you",
    "start": "663200",
    "end": "669800"
  },
  {
    "text": "try to add a string and a person class or something that's when you get a runtime error of you know can't can't",
    "start": "669800",
    "end": "677760"
  },
  {
    "text": "coer um Ruby's pretty good at trying to figure out not trying to figure out it",
    "start": "677760",
    "end": "683200"
  },
  {
    "text": "will do some basic conversions for you if you try to add one and 1.0",
    "start": "683200",
    "end": "689600"
  },
  {
    "text": "it knows to return a float for you if you try to you know add a string and a",
    "start": "689600",
    "end": "695480"
  },
  {
    "text": "number it just will say I can't do",
    "start": "695480",
    "end": "700199"
  },
  {
    "text": "that yep um we we have uh we have methods we can convert between them um I",
    "start": "701120",
    "end": "708240"
  },
  {
    "text": "don't have them in here but you can convert at any time there's a 2i 2core i method you can call on a string to",
    "start": "708240",
    "end": "714839"
  },
  {
    "text": "convert it to an integer or 2f for float and and to convert to a string you can",
    "start": "714839",
    "end": "720320"
  },
  {
    "text": "say 2core s so 2core i fs to convert between",
    "start": "720320",
    "end": "726519"
  },
  {
    "text": "integer string and",
    "start": "726519",
    "end": "729399"
  },
  {
    "start": "731000",
    "end": "1021000"
  },
  {
    "text": "floats um those are the",
    "start": "733800",
    "end": "739839"
  },
  {
    "text": "basics um no they aren't but it's enough to keep moving forward because I want to talk about our collection types um",
    "start": "739839",
    "end": "747800"
  },
  {
    "text": "because this is what you're going to see no matter what kind of Ruby you're doing whether it's simple scripting",
    "start": "747800",
    "end": "753279"
  },
  {
    "text": "um simple scripting rails applications Road apps it's all going to use our",
    "start": "753279",
    "end": "759760"
  },
  {
    "text": "different collection types A Lot simplest one is an array um an array in Ruby is just very",
    "start": "759760",
    "end": "768360"
  },
  {
    "text": "simple here we have an array literal um I have two two ways we can",
    "start": "768360",
    "end": "775000"
  },
  {
    "text": "define a new array I can say array. new um that might make you feel better but I",
    "start": "775000",
    "end": "780800"
  },
  {
    "text": "don't need to the first line is exactly the same just square brackets some",
    "start": "780800",
    "end": "786480"
  },
  {
    "text": "values um I don't have to say how long the array is going to be and I don't have to Define what kind of types go",
    "start": "786480",
    "end": "794560"
  },
  {
    "text": "in to access an array this should look familiar to all of you we just use the",
    "start": "794880",
    "end": "801680"
  },
  {
    "text": "index index syntax so you know a of two gives me back the 0 one two the third",
    "start": "801680",
    "end": "809560"
  },
  {
    "text": "value of 45 and if I change I can change a value with that",
    "start": "809560",
    "end": "815920"
  },
  {
    "text": "same syntax I can say a square braet 0 is now 1,00 and now my array starts",
    "start": "815920",
    "end": "823360"
  },
  {
    "text": "with the value 1,00 very simple to grab and set values",
    "start": "823360",
    "end": "830680"
  },
  {
    "text": "in an array arrays can also be uh polyglot",
    "start": "830680",
    "end": "836320"
  },
  {
    "text": "arrays they can hold different values we don't have to have arrays of just a single typee um this might be scary but",
    "start": "836320",
    "end": "843800"
  },
  {
    "text": "it also is I mean you're not typically doing this it just you can if you need to it goes back to our not needing to",
    "start": "843800",
    "end": "850920"
  },
  {
    "text": "Define what the array can hold we can if we really want to put a string a float",
    "start": "850920",
    "end": "857160"
  },
  {
    "text": "an integer and another string in there we can and we can mix and match values",
    "start": "857160",
    "end": "862759"
  },
  {
    "text": "change them around it will I can change banana to be the number seven it's just a it's just a place in",
    "start": "862759",
    "end": "870240"
  },
  {
    "text": "the array um we can also have we can also",
    "start": "870240",
    "end": "876800"
  },
  {
    "text": "dynamically resize our arrays without having to do any thinking if I have an array of two",
    "start": "876800",
    "end": "883480"
  },
  {
    "text": "fruits and I set the second so 012 which doesn't",
    "start": "883480",
    "end": "890360"
  },
  {
    "text": "exist yet to be orange now my array has three objects we have lots of really",
    "start": "890360",
    "end": "895759"
  },
  {
    "text": "cool ways of um adding additional uh adding to the array removing from the",
    "start": "895759",
    "end": "903160"
  },
  {
    "text": "array from both sides and checking for how big an array is yes now with that",
    "start": "903160",
    "end": "908440"
  },
  {
    "text": "standard array of apple and banana two items in the array and if you add fruits 10 is orange then it fill all those with",
    "start": "908440",
    "end": "915920"
  },
  {
    "text": "nil it will fill them with nil so yeah it'll it'll fill all those back um it uh",
    "start": "915920",
    "end": "922320"
  },
  {
    "text": "it yeah lets you do that pretty easily and if you try to access an an array object that doesn't exist it will return",
    "start": "922320",
    "end": "928360"
  },
  {
    "text": "back nil so fruits of 12 will give you",
    "start": "928360",
    "end": "933519"
  },
  {
    "text": "nil it just it it doesn't uh it doesn't care how far you go in",
    "start": "933519",
    "end": "940399"
  },
  {
    "text": "there further that that length value would",
    "start": "940399",
    "end": "946399"
  },
  {
    "text": "now correct yeah so I can call fruits. length this is a method call in my",
    "start": "946399",
    "end": "952360"
  },
  {
    "text": "fruits array gives me back three objects or three uh the number three right now we",
    "start": "952360",
    "end": "957959"
  },
  {
    "text": "have three items in that array after inserting orange into there I also have handy ways of saying",
    "start": "957959",
    "end": "965279"
  },
  {
    "text": "fruits DOT first to give me the the zero the the first item in there or fruit.",
    "start": "965279",
    "end": "972040"
  },
  {
    "text": "last to give me the uh the last one I also can do negative indexing which is",
    "start": "972040",
    "end": "978319"
  },
  {
    "text": "really cool I can say fruits negative one and it will give me orange or -2",
    "start": "978319",
    "end": "984120"
  },
  {
    "text": "will give me banana so just accessing from the other end",
    "start": "984120",
    "end": "990519"
  },
  {
    "text": "no uh no truncating is there probably is something easy for that but I don't know what it is off",
    "start": "994720",
    "end": "1002759"
  },
  {
    "text": "hand delete pop p delete pop push you can you can also like slice an array or",
    "start": "1003079",
    "end": "1011720"
  },
  {
    "text": "just trim it down",
    "start": "1011720",
    "end": "1017480"
  },
  {
    "text": "yeah lots of fun stuff you can do with arrays the next and probably most",
    "start": "1017480",
    "end": "1022920"
  },
  {
    "start": "1021000",
    "end": "1304000"
  },
  {
    "text": "important uh collection type in Ruby is the",
    "start": "1022920",
    "end": "1028199"
  },
  {
    "text": "hash um also known as hash tables dictionaries associative arrays and",
    "start": "1028199",
    "end": "1033280"
  },
  {
    "text": "other languages um the hash is probably the most used and abused and loved data",
    "start": "1033280",
    "end": "1040280"
  },
  {
    "text": "type in Ruby um it's really just a key value pair where the key is",
    "start": "1040280",
    "end": "1046000"
  },
  {
    "text": "unique we create the similar to arrays we have an array literal syntax of curly",
    "start": "1046799",
    "end": "1053440"
  },
  {
    "text": "braces and then key equal greater than and value so here",
    "start": "1053440",
    "end": "1059840"
  },
  {
    "text": "I have a hash of two objects of a a key of name a value of",
    "start": "1059840",
    "end": "1065360"
  },
  {
    "text": "Daniel language is another key and a value of Ruby the little uh equal greater than",
    "start": "1065360",
    "end": "1073280"
  },
  {
    "text": "sign is a little weird um we we finally call it the hash rocket because it's used in hashes",
    "start": "1073280",
    "end": "1079039"
  },
  {
    "text": "to separate the key and value um but you know there with that we",
    "start": "1079039",
    "end": "1084720"
  },
  {
    "text": "have a simple hash literal we access them very similar",
    "start": "1084720",
    "end": "1092159"
  },
  {
    "text": "similarly to an array so we can say h and use the key name to get",
    "start": "1092159",
    "end": "1098200"
  },
  {
    "text": "out uh Daniel the value for name like an array if I try to grab",
    "start": "1098200",
    "end": "1104120"
  },
  {
    "text": "something that isn't in there so here age it just says Nope nil I don't know about that",
    "start": "1104120",
    "end": "1109200"
  },
  {
    "text": "key and the key can be anything the key can be anything yeah this is actually really interesting in in Ruby that your",
    "start": "1109200",
    "end": "1116520"
  },
  {
    "text": "keys and values can be any object so your key could be a string a number a another object if",
    "start": "1116520",
    "end": "1124960"
  },
  {
    "text": "you're making your key an object you might be doing it wrong but there are probably some situations where that's",
    "start": "1124960",
    "end": "1131720"
  },
  {
    "text": "valid um here I set a non-existent key to 10 or I could overwrite a key if I",
    "start": "1132480",
    "end": "1139080"
  },
  {
    "text": "set the name key it would override my my name and change it to something else so",
    "start": "1139080",
    "end": "1145000"
  },
  {
    "text": "now I have a new hash with well I've modified the hash with the age key and",
    "start": "1145000",
    "end": "1151360"
  },
  {
    "text": "added that in there um I want to mention briefly",
    "start": "1151360",
    "end": "1158559"
  },
  {
    "text": "symbols because they're the weird they're this weird strange thing in Ruby but you see them a lot in",
    "start": "1158559",
    "end": "1166080"
  },
  {
    "text": "hashes um a symbol in Ruby begins with a colon and nine times out",
    "start": "1166080",
    "end": "1172960"
  },
  {
    "text": "of 10 they're being used as just a key in a hash so I build a new hash with",
    "start": "1172960",
    "end": "1178880"
  },
  {
    "text": "colon name and colon age as my keys and I access them",
    "start": "1178880",
    "end": "1185280"
  },
  {
    "text": "using the colon age so this symbol colon age is not the same as a string you",
    "start": "1185280",
    "end": "1191600"
  },
  {
    "text": "could kind of think it think of it as a a finalized string or more of an",
    "start": "1191600",
    "end": "1197760"
  },
  {
    "text": "identifi fire I really don't know of a exact equivalent in any other language",
    "start": "1197760",
    "end": "1203600"
  },
  {
    "text": "um so if you want to just think them as think of them as oh that thing we use for hash Keys you can because you",
    "start": "1203600",
    "end": "1209679"
  },
  {
    "text": "probably will see them in the in the wild and wonder what they are it's not a variable it doesn't have a value it's",
    "start": "1209679",
    "end": "1214960"
  },
  {
    "text": "just an identifier we use most often in hashes and if that meant nothing just",
    "start": "1214960",
    "end": "1221080"
  },
  {
    "text": "ignore it it's almost like a on the-fly class",
    "start": "1221080",
    "end": "1226360"
  },
  {
    "text": "with properties yes uh the hashes the hashes yeah you could",
    "start": "1226360",
    "end": "1233600"
  },
  {
    "text": "think of these as just your your uh attributes but the the colon name itself",
    "start": "1233600",
    "end": "1240120"
  },
  {
    "text": "doesn't it in this hash it points to Alice but colon name outside of the hash has no",
    "start": "1240120",
    "end": "1247039"
  },
  {
    "text": "meaning um both hashes and arrays can you know",
    "start": "1248200",
    "end": "1254400"
  },
  {
    "text": "obviously contain each other hash values can be any anything and hash keys can",
    "start": "1254400",
    "end": "1259960"
  },
  {
    "text": "too that's a little weirder but of course we could insert an array into a hash and we could also have an array of",
    "start": "1259960",
    "end": "1268720"
  },
  {
    "text": "hashes this that will be very common so here I have an apple and",
    "start": "1268720",
    "end": "1274960"
  },
  {
    "text": "banana hash treating them like objects with properties and then I can build an array of the two of",
    "start": "1274960",
    "end": "1281640"
  },
  {
    "text": "those and I can even grab out the last one in there uh multi-dimensional arrays",
    "start": "1281640",
    "end": "1287440"
  },
  {
    "text": "are really just arrays of arrays so my Matrix is an array of three subarrays of",
    "start": "1287440",
    "end": "1296760"
  },
  {
    "text": "three values so that could be a 3X3 array simple",
    "start": "1296760",
    "end": "1304200"
  },
  {
    "start": "1304000",
    "end": "1398000"
  },
  {
    "text": "enough um the last type I want to talk about is the range type um I think this",
    "start": "1304200",
    "end": "1310240"
  },
  {
    "text": "is the coolest thing in Ruby um because it just is a really easy way to represent some range of values so so",
    "start": "1310240",
    "end": "1318240"
  },
  {
    "text": "here my range is the numbers between 10 and 100 and you define a range with dot",
    "start": "1318240",
    "end": "1326360"
  },
  {
    "text": "dot so 10 dot dot 100 is all the values between 10 and 100 it doesn't build that",
    "start": "1326360",
    "end": "1332640"
  },
  {
    "text": "out into an array you can say 2core a and and get that array but it's really",
    "start": "1332640",
    "end": "1338799"
  },
  {
    "text": "just a way of identifying the each uh each end very",
    "start": "1338799",
    "end": "1343960"
  },
  {
    "text": "quickly and you can ask if it includes a number if it overlaps another range um",
    "start": "1343960",
    "end": "1350400"
  },
  {
    "text": "it's nothing you couldn't do in a handful lines of code but it's a very fun data",
    "start": "1350400",
    "end": "1357080"
  },
  {
    "text": "type what I really like is using it with things like times so if I had a date for",
    "start": "1357559",
    "end": "1362640"
  },
  {
    "text": "January 1 a date for December 31 I can then see if you know today is",
    "start": "1362640",
    "end": "1369960"
  },
  {
    "text": "inside that range or you know some value from the",
    "start": "1369960",
    "end": "1376200"
  },
  {
    "text": "user so here I build a a range of those two dates I ask does it have today of",
    "start": "1376200",
    "end": "1382960"
  },
  {
    "text": "course the answer is true if I ask Does it include you know 365 days from now",
    "start": "1382960",
    "end": "1389039"
  },
  {
    "text": "the answer is false so really fun really fun type makes it easy to check against",
    "start": "1389039",
    "end": "1395279"
  },
  {
    "text": "uh sets of conditions Ruby has uh regular",
    "start": "1395279",
    "end": "1401120"
  },
  {
    "start": "1398000",
    "end": "1553000"
  },
  {
    "text": "Expressions as well um we create them either with Rex",
    "start": "1401120",
    "end": "1407559"
  },
  {
    "text": "new or just the literal syntax with forward",
    "start": "1407559",
    "end": "1412799"
  },
  {
    "text": "slashes so here I've built a simple regular expression with four digits Das two digits D two",
    "start": "1412799",
    "end": "1420400"
  },
  {
    "text": "digits kind of a date format and I can use that to match",
    "start": "1420400",
    "end": "1426880"
  },
  {
    "text": "against strings so if I have a string called info the conference runs from this date",
    "start": "1426880",
    "end": "1433480"
  },
  {
    "text": "to that date I can use equal till Day 2 as a simple match so info my variable",
    "start": "1433480",
    "end": "1440679"
  },
  {
    "text": "info equal till the that regular expression um what it actually returns",
    "start": "1440679",
    "end": "1447760"
  },
  {
    "text": "there is the first index that it matches at so in this particular one it matches",
    "start": "1447760",
    "end": "1453279"
  },
  {
    "text": "at character 21 um any non-nil value means it found a",
    "start": "1453279",
    "end": "1459159"
  },
  {
    "text": "match in there so if it found it at the beginning it would be zero but and if it didn't find it it",
    "start": "1459159",
    "end": "1464960"
  },
  {
    "text": "would be nil I can use match on that string instead",
    "start": "1464960",
    "end": "1470919"
  },
  {
    "text": "so info. match to get a value back and or to get a match data object back that",
    "start": "1470919",
    "end": "1476320"
  },
  {
    "text": "then I can uh call other methods on and get the data out um and there's a lot of",
    "start": "1476320",
    "end": "1483039"
  },
  {
    "text": "other ways we can you know do match groups and pull data out using regular",
    "start": "1483039",
    "end": "1489600"
  },
  {
    "text": "Expressions simple substitutions we have the sub and gsub methods um as you",
    "start": "1489600",
    "end": "1497880"
  },
  {
    "text": "probably expect sub substitutes the first one so if I replace in today it",
    "start": "1497880",
    "end": "1503480"
  },
  {
    "text": "replaces the first date with the word today and if I guub I can replace both dates with the",
    "start": "1503480",
    "end": "1509279"
  },
  {
    "text": "word today or do something more complex and tweak it in",
    "start": "1509279",
    "end": "1516200"
  },
  {
    "text": "there um I do want to mention this tool called rubular rub.com it is a regular",
    "start": "1517640",
    "end": "1524159"
  },
  {
    "text": "expression testing tool and it is fantastic um because it's it's built with the Ruby engine so you can put in a",
    "start": "1524159",
    "end": "1531279"
  },
  {
    "text": "regular expression test it out and it gives you all the different modifiers",
    "start": "1531279",
    "end": "1536480"
  },
  {
    "text": "below so if you're doing anything with regular Expressions rub.com is fantastic um and I recently saw",
    "start": "1536480",
    "end": "1543360"
  },
  {
    "text": "something similar for JavaScript uh regular Expressions called scrip deer or something like",
    "start": "1543360",
    "end": "1551360"
  },
  {
    "start": "1553000",
    "end": "2049000"
  },
  {
    "text": "that I want to talk briefly about uh conditionals in Ruby we have um the simple if",
    "start": "1554000",
    "end": "1563080"
  },
  {
    "text": "statement the first thing you'll notice about this if statement is probably that it uh has very little",
    "start": "1563080",
    "end": "1570679"
  },
  {
    "text": "punctuation um sorry if that's a little small in the back it has if input equal equal quit so if my input is equal to",
    "start": "1570679",
    "end": "1577960"
  },
  {
    "text": "quit uh I exit so the if and end are what denote",
    "start": "1577960",
    "end": "1584000"
  },
  {
    "text": "my if statement block whether however many lines are in there I don't need parentheses around the",
    "start": "1584000",
    "end": "1590320"
  },
  {
    "text": "condition you can put them there if it makes you feel better um but you don't need to Ruby really lets you leave off",
    "start": "1590320",
    "end": "1597520"
  },
  {
    "text": "as much punctuation as you want it it doesn't like it when the compiler knows",
    "start": "1597520",
    "end": "1605559"
  },
  {
    "text": "that it yes with a with a new line the statement ends with a new line so um you",
    "start": "1607760",
    "end": "1614960"
  },
  {
    "text": "can as long as it's a complete statement it will treat that as a complete",
    "start": "1614960",
    "end": "1620720"
  },
  {
    "text": "line you if you want to do multiple statements on the same line you can use a semicolon okay but it's you usually",
    "start": "1621240",
    "end": "1629360"
  },
  {
    "text": "don't need to semicolon is the end statement Mark",
    "start": "1629360",
    "end": "1636039"
  },
  {
    "text": "yep you could use them here too it's just not necessary how do you how do you split a",
    "start": "1636039",
    "end": "1641960"
  },
  {
    "text": "statement across multiple lines um if you you can use the a",
    "start": "1641960",
    "end": "1647919"
  },
  {
    "text": "backslash you use a backlash at the end of a line or you can do a kind of an",
    "start": "1647919",
    "end": "1654360"
  },
  {
    "text": "unbalanced statement so if I said one plus new line Ruby knows that",
    "start": "1654360",
    "end": "1660320"
  },
  {
    "text": "that's not a complete statement so it'll wait for the next line to complete that statement so I could do one plus and",
    "start": "1660320",
    "end": "1666519"
  },
  {
    "text": "then two on the next line and it will realize it's it's waiting for a",
    "start": "1666519",
    "end": "1672320"
  },
  {
    "text": "balance statement and find that",
    "start": "1672320",
    "end": "1678480"
  },
  {
    "text": "um one cool thing on if statements is you can do a single line if I can rewrite the the above as exit if input",
    "start": "1678480",
    "end": "1686000"
  },
  {
    "text": "equal equal quit that's great if you just do have a single line if",
    "start": "1686000",
    "end": "1691799"
  },
  {
    "text": "statement otherwise it can you know you might as well do the big form but the trailing if is kind of cool",
    "start": "1691799",
    "end": "1698679"
  },
  {
    "text": "works the same way can that exit be in like Curly braces if you had a code block right down um no you would have to",
    "start": "1698679",
    "end": "1708000"
  },
  {
    "text": "this doesn't work with code blocks quite that same way okay we also have the inverted if or the",
    "start": "1708000",
    "end": "1716880"
  },
  {
    "text": "unless statement unless is really just a anything you would say not in front of",
    "start": "1716880",
    "end": "1723440"
  },
  {
    "text": "so you know if not input equal equal quit um if you want to you can use",
    "start": "1723440",
    "end": "1728519"
  },
  {
    "text": "unless it's just the opposite so unless equal unless input equals quit we do",
    "start": "1728519",
    "end": "1734159"
  },
  {
    "text": "some work um and again we have the the single line form of that",
    "start": "1734159",
    "end": "1740000"
  },
  {
    "text": "too um I like unless for really simple statements if I if anything gets more",
    "start": "1740000",
    "end": "1745159"
  },
  {
    "text": "complex I usually go back to",
    "start": "1745159",
    "end": "1748519"
  },
  {
    "text": "if there is else um we to do multiple",
    "start": "1752519",
    "end": "1758159"
  },
  {
    "text": "conditions we have uh if else if and else so here if the input is quit we",
    "start": "1758159",
    "end": "1764960"
  },
  {
    "text": "exit if the input else if the input is pause we sleep for 20 seconds and else",
    "start": "1764960",
    "end": "1772000"
  },
  {
    "text": "we do some work pretty simple um the only thing",
    "start": "1772000",
    "end": "1777240"
  },
  {
    "text": "that you will get burned by is that you definitely not note the spelling of else if it is not else space if it is El",
    "start": "1777240",
    "end": "1786600"
  },
  {
    "text": "LS um you can definitely blame Pearl for that one that will that will burn you once",
    "start": "1786600",
    "end": "1792720"
  },
  {
    "text": "and then you will uh curse the the Pearl guys forever and the Ruby guys for copying them yeah any short Syntax for",
    "start": "1792720",
    "end": "1800640"
  },
  {
    "text": "that um for this particular one yes for exle how about",
    "start": "1800640",
    "end": "1808399"
  },
  {
    "text": "this it's not really so like well what yeah that's longer that's more",
    "start": "1808399",
    "end": "1815679"
  },
  {
    "text": "conditions um you do have the we do have the tary tary form right um and it's the",
    "start": "1815679",
    "end": "1822080"
  },
  {
    "text": "statement question mark positive case colon negative case",
    "start": "1822080",
    "end": "1827559"
  },
  {
    "text": "um that works the same as anything else um I do want to point out the case",
    "start": "1827559",
    "end": "1833360"
  },
  {
    "text": "statement in Ruby though um it's nothing you can't do with an if but it's a little bit it it can be more powerful",
    "start": "1833360",
    "end": "1839600"
  },
  {
    "text": "and interesting in cool ways um you give it some starting value so case input",
    "start": "1839600",
    "end": "1846679"
  },
  {
    "text": "here just some variable then you'd have a series of when so when quit you exit",
    "start": "1846679",
    "end": "1853000"
  },
  {
    "text": "when it's pause you sleep I can test against particular object so I can say",
    "start": "1853000",
    "end": "1858320"
  },
  {
    "text": "when it's a string and then do something cool or I can test against a range when it is",
    "start": "1858320",
    "end": "1865639"
  },
  {
    "text": "between 5 and 10 do something or test against a regular",
    "start": "1865639",
    "end": "1871120"
  },
  {
    "text": "expression um unlike some languages it will only match one of these one blocks it doesn't fall through to others so",
    "start": "1871120",
    "end": "1877639"
  },
  {
    "text": "it's just going to pick the first one that",
    "start": "1877639",
    "end": "1882240"
  },
  {
    "text": "matches it it won't it won't do it will never do multiple",
    "start": "1886159",
    "end": "1893440"
  },
  {
    "text": "no yep you can you can use a double bar Syntax for or and and and for and um you",
    "start": "1894919",
    "end": "1901880"
  },
  {
    "text": "can also use the words and and or in Ruby they have the same meaning same",
    "start": "1901880",
    "end": "1907440"
  },
  {
    "text": "meaning just less less",
    "start": "1907440",
    "end": "1911879"
  },
  {
    "text": "used to do Loop we have a simple while",
    "start": "1914279",
    "end": "1919159"
  },
  {
    "text": "here we have uh count equals zero while count is less than 10 I'm outputting it",
    "start": "1919440",
    "end": "1926360"
  },
  {
    "text": "and then doing count plus equals 1",
    "start": "1926360",
    "end": "1932320"
  },
  {
    "text": "the plus equal here is a is a really cool thing in Ruby but it also uh shows",
    "start": "1932320",
    "end": "1938200"
  },
  {
    "text": "us that we don't have a plus plus I don't have count plus plus or minus minus but we have the plus equal",
    "start": "1938200",
    "end": "1945840"
  },
  {
    "text": "operator um it's the same as saying count equals count plus one what's cool",
    "start": "1945840",
    "end": "1950880"
  },
  {
    "text": "about it is you can use it with any other arithmetic operation you can do count plus equals 10 or count minus",
    "start": "1950880",
    "end": "1958200"
  },
  {
    "text": "equal 5 they they all",
    "start": "1958200",
    "end": "1963440"
  },
  {
    "text": "work um we also have the inline while where you just use it at the end of a line like an if useful for single lines",
    "start": "1965279",
    "end": "1972600"
  },
  {
    "text": "and you can rewrite this version as a single line I output the count plus",
    "start": "1972600",
    "end": "1978159"
  },
  {
    "text": "equal 1 while count is less than 10 that'll actually go",
    "start": "1978159",
    "end": "1983320"
  },
  {
    "text": "from 1 to 9 I'd have to change my count to be exactly equal because I'm outputting it before",
    "start": "1983320",
    "end": "1993440"
  },
  {
    "text": "but um and then we also have unless which is the inverse form of while so it",
    "start": "1994039",
    "end": "2000080"
  },
  {
    "text": "just it works until the condition is true or wow this is a totally did wrong",
    "start": "2000080",
    "end": "2007840"
  },
  {
    "text": "there uh this is all until not unless until until count equals 10 or until",
    "start": "2007840",
    "end": "2015799"
  },
  {
    "text": "count is greater than or equal to 10 I will change my",
    "start": "2015799",
    "end": "2020360"
  },
  {
    "text": "slides um we do have a for Loop in Ruby for fruit and fruits or",
    "start": "2022799",
    "end": "2028080"
  },
  {
    "text": "for uh person and people uh we don't use it we do not have the uh syntax of four",
    "start": "2028080",
    "end": "2037799"
  },
  {
    "text": "I equal 0 semicolon i++ uh yeah you know what it is um and",
    "start": "2037799",
    "end": "2046519"
  },
  {
    "text": "this one that we have we don't use we're going to do iteration the Ruby",
    "start": "2046519",
    "end": "2051839"
  },
  {
    "start": "2049000",
    "end": "2138000"
  },
  {
    "text": "way um which is this syntax fruits.",
    "start": "2051839",
    "end": "2057240"
  },
  {
    "text": "each fruits. each do vertical pipes whatever my variable is inside my",
    "start": "2057240",
    "end": "2064919"
  },
  {
    "text": "iteration in this case fruit so if I have a list of fruits this will iterate over each one assign the variable fruit",
    "start": "2064919",
    "end": "2072200"
  },
  {
    "text": "and output I love Apple I love banana I love orange this syntax will look weird",
    "start": "2072200",
    "end": "2078200"
  },
  {
    "text": "to you and that's okay um but it is the Ruby way of iterating and you'll see it",
    "start": "2078200",
    "end": "2083960"
  },
  {
    "text": "all over even weirder we can replace the do and end with curly",
    "start": "2083960",
    "end": "2090358"
  },
  {
    "text": "braces so this is the same as above just with curly braces in place of the do and",
    "start": "2090359",
    "end": "2096200"
  },
  {
    "text": "end so we use this for multi-line or single line statements and we usually use the each or the do end version for",
    "start": "2096200",
    "end": "2105520"
  },
  {
    "text": "multi-line statements they're",
    "start": "2105520",
    "end": "2110760"
  },
  {
    "text": "interchangeable the reason that this syntax is really cool is that we have a whole bunch of other methods um that we",
    "start": "2111240",
    "end": "2117960"
  },
  {
    "text": "can call on an array a hash a range things like map um each with index to",
    "start": "2117960",
    "end": "2124119"
  },
  {
    "text": "pass in an index counter as well for each key to go through each key in a hash and we also have a lot of other um",
    "start": "2124119",
    "end": "2132280"
  },
  {
    "text": "syntax in Ruby that uses the same style we actually use the do end Syntax for opening files and it's really",
    "start": "2132280",
    "end": "2140359"
  },
  {
    "start": "2138000",
    "end": "2574000"
  },
  {
    "text": "cool so actually what I what I usually tell when I'm teaching a class is like just get to know the syntax you don't",
    "start": "2140520",
    "end": "2147760"
  },
  {
    "text": "have to understand it right now but get to recognize it because you will start to see it",
    "start": "2147760",
    "end": "2153440"
  },
  {
    "text": "everywhere um objects in Ruby we have um very simple class person",
    "start": "2153440",
    "end": "2161960"
  },
  {
    "text": "gives us a a person class um and we also have inheritance",
    "start": "2161960",
    "end": "2167640"
  },
  {
    "text": "using the uh less than operator so here programmer inherits from a person",
    "start": "2167640",
    "end": "2174079"
  },
  {
    "text": "everything inherits from object uh implicitly by default so I didn't have",
    "start": "2174079",
    "end": "2179200"
  },
  {
    "text": "to say person inherits from object but it it does by default and then uh something simple",
    "start": "2179200",
    "end": "2185880"
  },
  {
    "text": "like a Constructor um The Constructor is the only strange uh method in Ruby classes because you",
    "start": "2185880",
    "end": "2193040"
  },
  {
    "text": "use the initialize name to define a Constructor so now I would say uh",
    "start": "2193040",
    "end": "2199920"
  },
  {
    "text": "person. new and pass in a name and it would use my Constructor on my",
    "start": "2199920",
    "end": "2205160"
  },
  {
    "text": "class any other methods you deci Define in your class become instance methods",
    "start": "2205160",
    "end": "2210280"
  },
  {
    "text": "and you can also Define class methods and scoped methods and everything else you need",
    "start": "2210280",
    "end": "2218680"
  },
  {
    "text": "um I think I read that uh inheritance only works one level deep is that",
    "start": "2218839",
    "end": "2226040"
  },
  {
    "text": "true no uh no you do you can you can go extremely deep um we do only have single",
    "start": "2226040",
    "end": "2232319"
  },
  {
    "text": "inheritance though so we don't can't inherit from different sources okay but you can you know you",
    "start": "2232319",
    "end": "2238680"
  },
  {
    "text": "can have a minion that inherits from programmer and an intern that inherits",
    "start": "2238680",
    "end": "2244119"
  },
  {
    "text": "from Minion and that will get all the data and attributes that methods that",
    "start": "2244119",
    "end": "2249599"
  },
  {
    "text": "you would have on your person class what's",
    "start": "2249599",
    "end": "2254160"
  },
  {
    "text": "that um all the all the all the methods and all the",
    "start": "2255760",
    "end": "2261119"
  },
  {
    "text": "the yeah yeah you don't get data on a particular instance so you just get um like a",
    "start": "2261119",
    "end": "2270440"
  },
  {
    "text": "person might inherit from animal and so you have um you know what uh",
    "start": "2270440",
    "end": "2277520"
  },
  {
    "text": "what am I trying to say you don't know the name of the person or the animal but you have all the same attributes you",
    "start": "2277520",
    "end": "2283480"
  },
  {
    "text": "might have a name and a number of legs or something like that don't know that really might have confused you",
    "start": "2283480",
    "end": "2290480"
  },
  {
    "text": "more correct correct",
    "start": "2290480",
    "end": "2294680"
  },
  {
    "text": "yeah but there is no way to define",
    "start": "2295800",
    "end": "2301440"
  },
  {
    "text": "visibility we do we have um we have public methods private methods protect",
    "start": "2301440",
    "end": "2306839"
  },
  {
    "text": "methods um one interesting thing in Ruby is that uh there are ways of getting",
    "start": "2306839",
    "end": "2312760"
  },
  {
    "text": "around private methods which can be really useful if you're you know stuck using some library and you",
    "start": "2312760",
    "end": "2318880"
  },
  {
    "text": "can't like in Java if something's private it's private for good and Ruby you can actually dig it and get around",
    "start": "2318880",
    "end": "2325119"
  },
  {
    "text": "that if you have to so um we have a keyword that we say private and then any",
    "start": "2325119",
    "end": "2330880"
  },
  {
    "text": "methods defined below that in the class are private but we can still if we really need to we can get access to",
    "start": "2330880",
    "end": "2336240"
  },
  {
    "text": "those and it gives us the",
    "start": "2336240",
    "end": "2339480"
  },
  {
    "text": "flexibility um I wanted to do yeah sure um I wanted to do a quick",
    "start": "2341440",
    "end": "2347640"
  },
  {
    "text": "uh talk on Rails because I wanted to show you a really quick demo of what we can do with",
    "start": "2347640",
    "end": "2354760"
  },
  {
    "text": "rails um something like creating a new demo app I've done this before if I say like",
    "start": "2354920",
    "end": "2362200"
  },
  {
    "text": "rails new demo and create a new rails app and then uh it's taking",
    "start": "2362200",
    "end": "2369000"
  },
  {
    "text": "forever uh I can make a person class with a name String and an age of",
    "start": "2373599",
    "end": "2381880"
  },
  {
    "text": "integer oh CD demo um it's okay that I'm",
    "start": "2382440",
    "end": "2389280"
  },
  {
    "text": "just that you're not you might might not be following along because there's a lot of great info on Rails uh what I just",
    "start": "2389280",
    "end": "2395520"
  },
  {
    "text": "wanted to show quickly though is how we",
    "start": "2395520",
    "end": "2399319"
  },
  {
    "text": "can um you might want to use rails and dig into a little bit later because it",
    "start": "2401839",
    "end": "2406880"
  },
  {
    "text": "gives us a really easy way to create uh simple crud apps so I just created this",
    "start": "2406880",
    "end": "2413640"
  },
  {
    "text": "app uh SL people if I can't spell people",
    "start": "2413640",
    "end": "2419720"
  },
  {
    "text": "right that gives me a whole like crud interface for",
    "start": "2420160",
    "end": "2425240"
  },
  {
    "text": "creating for creating",
    "start": "2425359",
    "end": "2430160"
  },
  {
    "text": "people create person okay um new",
    "start": "2430800",
    "end": "2438359"
  },
  {
    "text": "person um and the really cool thing about the simple rails app",
    "start": "2442040",
    "end": "2447920"
  },
  {
    "text": "is we have Json representations of all our data so all my people that I just",
    "start": "2447920",
    "end": "2454359"
  },
  {
    "text": "created this little crud app for um I have a Json representation of all",
    "start": "2454359",
    "end": "2460319"
  },
  {
    "text": "that all that data there's Daniel with an age of five and Alice with an age of",
    "start": "2460319",
    "end": "2467240"
  },
  {
    "text": "45 um if I had more time I would show you how all that works I'll save that",
    "start": "2467240",
    "end": "2473319"
  },
  {
    "text": "for another day um what I do want to talk about though is using Json in",
    "start": "2473319",
    "end": "2478680"
  },
  {
    "text": "Ruby in rails we have uh this json.parse",
    "start": "2478680",
    "end": "2484440"
  },
  {
    "text": "object method call we can pass in some raw Json in roads it's rowon json.parse",
    "start": "2484440",
    "end": "2491640"
  },
  {
    "text": "they work the same way they have the exact same uh method calls and",
    "start": "2491640",
    "end": "2496680"
  },
  {
    "text": "interface um what's really cool about Json and Ruby is this lets us take some",
    "start": "2496680",
    "end": "2504640"
  },
  {
    "text": "some Json with keys and values so here is you know some Json name Bob age 20",
    "start": "2504640",
    "end": "2513520"
  },
  {
    "text": "friends of an array of strings it'll turn that into a hash that we can use in",
    "start": "2513520",
    "end": "2518640"
  },
  {
    "text": "our in our Ruby process or in our roads app or whatever so a lot of what we do",
    "start": "2518640",
    "end": "2524920"
  },
  {
    "text": "with Json and Ruby is converting Json into hashes and you can see they even look similar you know they're not",
    "start": "2524920",
    "end": "2531599"
  },
  {
    "text": "exactly a slight syntactic difference but um if you're dealing with Json it's",
    "start": "2531599",
    "end": "2537599"
  },
  {
    "text": "really easy to see how that'll turn into a hash of of data in Ruby so if I gave json.parse this first",
    "start": "2537599",
    "end": "2544960"
  },
  {
    "text": "chunk of code it would return back this as a hash um if you're using XML um it's just",
    "start": "2544960",
    "end": "2556400"
  },
  {
    "text": "as easy um it just assumes that you have a San XML",
    "start": "2556400",
    "end": "2562160"
  },
  {
    "text": "file um in both plain old Ruby and uh in roads you can call rexml document new",
    "start": "2562160",
    "end": "2569960"
  },
  {
    "text": "and give it an XML file and it'll work the same",
    "start": "2569960",
    "end": "2574359"
  },
  {
    "start": "2574000",
    "end": "2932000"
  },
  {
    "text": "way the last thing I want to demo is um a little tool that I want to want you to",
    "start": "2575160",
    "end": "2582760"
  },
  {
    "text": "try sometime later called IRB IRB is what we call Interactive Ruby",
    "start": "2582760",
    "end": "2591240"
  },
  {
    "text": "and once you once you have that installed you can do simple Ruby expressions like 5 + 3 or H equ or let's",
    "start": "2591240",
    "end": "2599760"
  },
  {
    "text": "see fruits equals banana",
    "start": "2599760",
    "end": "2607280"
  },
  {
    "text": "apple and banana you know play with arrays so you can start testing like can I call if I say fruits.",
    "start": "2607280",
    "end": "2614559"
  },
  {
    "text": "length what was the question can I said it to be equal to 10 nope I can't I get",
    "start": "2614559",
    "end": "2619680"
  },
  {
    "text": "a no method error undefined method length equals so I cannot set the length using that",
    "start": "2619680",
    "end": "2626160"
  },
  {
    "text": "syntax um IRB is really cool because it lets you play around with rubby right you know right in front of you and you",
    "start": "2626160",
    "end": "2633200"
  },
  {
    "text": "don't have to uh you can play around with methods see what you can do with it",
    "start": "2633200",
    "end": "2638520"
  },
  {
    "text": "um can you do fruit. class it's an",
    "start": "2638520",
    "end": "2643880"
  },
  {
    "text": "array can you go deeper into that um like into like reflection you",
    "start": "2643880",
    "end": "2651760"
  },
  {
    "text": "know class get get the methods on it and properties actually yeah you can say fruits. methods it'll give you a whole",
    "start": "2651760",
    "end": "2658680"
  },
  {
    "text": "it'll give you an array of all the methods you can call because it's an array you can say fruits. methods.",
    "start": "2658680",
    "end": "2665000"
  },
  {
    "text": "sort um and it will give you them sorted alphabetically you can even say okay",
    "start": "2665000",
    "end": "2671559"
  },
  {
    "text": "well that has a bunch of methods okay this is getting Advanced but whatever let's take that list of methods and sort",
    "start": "2671559",
    "end": "2679240"
  },
  {
    "text": "them but then subtract off anything that's on object. new.",
    "start": "2679240",
    "end": "2686839"
  },
  {
    "text": "methods okay really this will give me only the methods that are unique to the array",
    "start": "2687960",
    "end": "2694000"
  },
  {
    "text": "class right exactly so you can do all kinds of",
    "start": "2694000",
    "end": "2699440"
  },
  {
    "text": "really cool things about uh or with your classes and objects in in",
    "start": "2699440",
    "end": "2705559"
  },
  {
    "text": "Ruby so what's the best um there are for for Ruby ruby. org",
    "start": "2705559",
    "end": "2716839"
  },
  {
    "text": "is the official documentation and it's pretty good well it's it's uh their",
    "start": "2716839",
    "end": "2722839"
  },
  {
    "text": "interface is not the best but it it works it's the it's it's great um there are a handful of sites that",
    "start": "2722839",
    "end": "2729520"
  },
  {
    "text": "integrate both Ruby and other projects whether it's rails or roads or something",
    "start": "2729520",
    "end": "2734800"
  },
  {
    "text": "else and they try to integrate all the documentation in one place for that actually I like um things built into",
    "start": "2734800",
    "end": "2741480"
  },
  {
    "text": "editors whether it's uh one of the Ruby editors like Ruby mine or something more generic a lot of",
    "start": "2741480",
    "end": "2748280"
  },
  {
    "text": "them have built-in documentation and it it is okay it really depends on the type of",
    "start": "2748280",
    "end": "2754160"
  },
  {
    "text": "project you're building and what you're working on um with IRB I did want to mention rails",
    "start": "2754160",
    "end": "2761640"
  },
  {
    "text": "console um it is just like IRB but for rails it's for inspecting your objects",
    "start": "2761640",
    "end": "2767480"
  },
  {
    "text": "inside the rails environment it can be it's the same thing but with rails um also we have a couple ways we",
    "start": "2767480",
    "end": "2774920"
  },
  {
    "text": "can look at data we have the puts method uh",
    "start": "2774920",
    "end": "2780240"
  },
  {
    "text": "puts high and we also have um the Y method so if I have a half or",
    "start": "2780240",
    "end": "2788240"
  },
  {
    "text": "something the Y",
    "start": "2798160",
    "end": "2801960"
  },
  {
    "text": "method okay maybe they've removed that in my particular version uh that that's more in the rails",
    "start": "2809200",
    "end": "2815800"
  },
  {
    "text": "console it's a y as a way of uh dumping out your data as well just forget I",
    "start": "2815800",
    "end": "2821920"
  },
  {
    "text": "pulled that up we do have debugging in Ruby we have um two gems two libraries",
    "start": "2821920",
    "end": "2829040"
  },
  {
    "text": "that we can use for debugging um both work Sim similar to GDB or the Java",
    "start": "2829040",
    "end": "2835079"
  },
  {
    "text": "debuggers um if you're using an IDE there'll be something built into that as well and it will probably use one of",
    "start": "2835079",
    "end": "2841079"
  },
  {
    "text": "these under the hood um but I do want to show you how you can uh read these errors Ruby gives",
    "start": "2841079",
    "end": "2850720"
  },
  {
    "text": "you decent stack Trace errors that you can even without a debugger you can get a lot of data um like for instance this",
    "start": "2850720",
    "end": "2858760"
  },
  {
    "text": "error undefined local variable or method my method for some class isn't all that",
    "start": "2858760",
    "end": "2865440"
  },
  {
    "text": "helpful but if you wrote my method then hopefully you know where to look for that and if not you can start to look",
    "start": "2865440",
    "end": "2871119"
  },
  {
    "text": "down here and see okay well this is from a you know some kind of framework framework framework but down here there is one line of code that I wrote Because",
    "start": "2871119",
    "end": "2878880"
  },
  {
    "text": "I see that it's in my you know my projects directory wherever I store code and it's looking at sign. RB colon 16 so",
    "start": "2878880",
    "end": "2887960"
  },
  {
    "text": "that's actually telling me what file and what line and in what method in the import method that there's some method",
    "start": "2887960",
    "end": "2894000"
  },
  {
    "text": "I'm calling that doesn't exist um other weird errors you can get",
    "start": "2894000",
    "end": "2900559"
  },
  {
    "text": "this one's really common it's my favorite you try to call some method and you get a undefined method for",
    "start": "2900559",
    "end": "2907920"
  },
  {
    "text": "nil um this is my favorite method because you're you're tempted to think oh the first name is nil you know the",
    "start": "2907920",
    "end": "2915040"
  },
  {
    "text": "first name on this user is nil I don't know why what's really telling you is that no the user is nil and nil does not",
    "start": "2915040",
    "end": "2920960"
  },
  {
    "text": "have a method called first name so um when you're reading these errors",
    "start": "2920960",
    "end": "2926760"
  },
  {
    "text": "actually take the time to read what they're saying not what you think they're saying and um hopefully that will help you out",
    "start": "2926760",
    "end": "2936160"
  },
  {
    "text": "um I have a couple links to more info because we're kind of out of time the uh the official",
    "start": "2936160",
    "end": "2944640"
  },
  {
    "text": "documentation Ruby dasd.org is your best bet for finding more about Ruby also go",
    "start": "2944640",
    "end": "2950000"
  },
  {
    "text": "to the uh additional sessions on the RO Mobile Track um I do want to show you a",
    "start": "2950000",
    "end": "2955200"
  },
  {
    "text": "site called try Ruby it's the most cool thing in the world you can actually try Ruby in your browser and it gives you a little tutorial about lots of the",
    "start": "2955200",
    "end": "2961559"
  },
  {
    "text": "different language features so go to try rby.org and give it a shot it's a lot of",
    "start": "2961559",
    "end": "2966760"
  },
  {
    "text": "fun even if you'll never use it again so what's that great",
    "start": "2966760",
    "end": "2972960"
  },
  {
    "text": "character oh yeah great drawing so I'll be around uh the rest of the day I'll be in the expert section later thanks for",
    "start": "2972960",
    "end": "2979480"
  },
  {
    "text": "coming this presentation is also online if you want to copy down the URL and uh thanks for coming sorry that was a",
    "start": "2979480",
    "end": "2985119"
  },
  {
    "text": "little Whirlwind tour of",
    "start": "2985119",
    "end": "2988039"
  },
  {
    "text": "Ruby",
    "start": "2994520",
    "end": "2997520"
  }
]