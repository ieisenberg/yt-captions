[
  {
    "text": "[Music]",
    "start": "1860",
    "end": "14799"
  },
  {
    "text": "I'm going to be talking about JavaScript and unicode and how the two go together um so first let me introduce myself this",
    "start": "15839",
    "end": "22519"
  },
  {
    "text": "is me I'm a web developer from Belgium just like you guys well most of the audience anyway um I recently joined the",
    "start": "22519",
    "end": "28720"
  },
  {
    "text": "Opera developer relation Steam and it's funny that I got Chrome socks cuz Chrome",
    "start": "28720",
    "end": "33840"
  },
  {
    "text": "socks is actually our company's slogan no not",
    "start": "33840",
    "end": "41520"
  },
  {
    "text": "really so actually we do work on the chromium project as well soing CH yeah",
    "start": "44600",
    "end": "50719"
  },
  {
    "text": "exactly um anyway in my spare time I also like to collaborate on various open source projects uh one of which is jsb",
    "start": "50719",
    "end": "58359"
  },
  {
    "text": "which I made in 2010 Has anyone used jsb let's do show of hands okay some people uh well if you",
    "start": "58359",
    "end": "65080"
  },
  {
    "text": "don't know what it is it's basically it's just a website and you can go there and you get this form you can enter a",
    "start": "65080",
    "end": "71360"
  },
  {
    "text": "few JavaScript Snippets that are equivalent so they do the same thing but they're written in a different way and",
    "start": "71360",
    "end": "76920"
  },
  {
    "text": "then jper creates a test case for you that you can run in any browser that you care about and it will tell you which",
    "start": "76920",
    "end": "83400"
  },
  {
    "text": "snippet is faster and what the difference is so it's really useful for performance testing in JavaScript",
    "start": "83400",
    "end": "90520"
  },
  {
    "text": "I I'm also a member of the core Dev team for the HML 5 bortle parate project which is something you may have used uh",
    "start": "90520",
    "end": "97159"
  },
  {
    "text": "can you hear me properly because okay okay um so anyway my Twitter handle is",
    "start": "97159",
    "end": "103399"
  },
  {
    "text": "just my first name Matias so if you happen to have any questions and you're too shy to ask them afterwards U just",
    "start": "103399",
    "end": "108759"
  },
  {
    "text": "ping me on Twitter and I'll get back to you now does anyone know who this guy",
    "start": "108759",
    "end": "115119"
  },
  {
    "text": "is yeah it's Jay-Z of course the famous rapper uh but a little known fact about",
    "start": "115119",
    "end": "120200"
  },
  {
    "text": "him is that at some point he decided to write a JavaScript program so he installed node and mpm and he started",
    "start": "120200",
    "end": "126560"
  },
  {
    "text": "programming away but at the end of the day he had written a song about his frustrations with the language instead",
    "start": "126560",
    "end": "131599"
  },
  {
    "text": "of writing a program and actually you may have heard this song before it's called 99",
    "start": "131599",
    "end": "137680"
  },
  {
    "text": "problems now I'm making fun of JavaScript here but don't get me wrong I absolutely love the language I think",
    "start": "137680",
    "end": "144280"
  },
  {
    "text": "it's a great language but just like with any other programming language whenever you're writing code um you know it can",
    "start": "144280",
    "end": "151400"
  },
  {
    "text": "happen that you're confused sometimes by a specific feature or behavior of the language and this happens for all",
    "start": "151400",
    "end": "157319"
  },
  {
    "text": "languages for example for a PHP there's even a dedicated website to these kinds of things called PHP whatthe org",
    "start": "157319",
    "end": "164640"
  },
  {
    "text": "um and we have the same thing for JavaScript which is called what the JS and it it kind of collects these",
    "start": "164640",
    "end": "170280"
  },
  {
    "text": "strange little nuggets of weird and surprising behavior in the language now of course all these things on these",
    "start": "170280",
    "end": "176720"
  },
  {
    "text": "websites can perfectly be explained if you just look at the manual or read the specification or look at the",
    "start": "176720",
    "end": "182319"
  },
  {
    "text": "implementation but still if a behavior in the language is confusing to a lot of people then it's a bit of a problem",
    "start": "182319",
    "end": "189080"
  },
  {
    "text": "right so that's why I'm going to go ahead and say that JavaScript in my opinion has a bit of a Unicode problem",
    "start": "189080",
    "end": "196040"
  },
  {
    "text": "and I'll show you why in a second now why should you care about",
    "start": "196040",
    "end": "201599"
  },
  {
    "text": "this because at this point you may be thinking okay this is probably going be a talk about Edge case issues that I",
    "start": "201599",
    "end": "207920"
  },
  {
    "text": "will never have to deal with in my lifetime but that's not true um well let's do a quick show of hands have you",
    "start": "207920",
    "end": "214200"
  },
  {
    "text": "ever used JavaScript before okay almost everyone is raising their hands keep them up keep them up okay um drop your",
    "start": "214200",
    "end": "221920"
  },
  {
    "text": "hand if you have never used a string in JavaScript before okay nobody dropped their hands actually some hands went up",
    "start": "221920",
    "end": "228480"
  },
  {
    "text": "which is weird um okay um so have you ever used a",
    "start": "228480",
    "end": "234560"
  },
  {
    "text": "string in JavaScript that came from user input or from a third party API or any",
    "start": "234560",
    "end": "239799"
  },
  {
    "text": "other source that you do not directly control yeah well still the same amount",
    "start": "239799",
    "end": "244879"
  },
  {
    "text": "of hands you can drop them now um but the point has been made um whenever you want to support arbitrary input and",
    "start": "244879",
    "end": "251640"
  },
  {
    "text": "arbitrary strings in your JavaScript application there are some things that you need to do and that you need to keep in mind and most of these things are in",
    "start": "251640",
    "end": "258639"
  },
  {
    "text": "my opinion really surprising um so that's is what this presentation is going to be",
    "start": "258639",
    "end": "264800"
  },
  {
    "text": "about now I started looking into this Behavior a couple of years ago when I was working working on a Punic code.gs",
    "start": "264800",
    "end": "271479"
  },
  {
    "text": "Library um does anyone know what punicode is I'll give you a hint it has nothing",
    "start": "271479",
    "end": "277240"
  },
  {
    "text": "to do with the Hulk making fun of your lame programming skills or anything like that um Unicode actually um well",
    "start": "277240",
    "end": "285280"
  },
  {
    "text": "traditionally it was only possible to register domain names um that had asky",
    "start": "285280",
    "end": "290479"
  },
  {
    "text": "symbols in them like you all know that you cannot use certain symbols in your domain name directly and the entire web",
    "start": "290479",
    "end": "296960"
  },
  {
    "text": "in fact has been built around this fact um and technically even today it's not",
    "start": "296960",
    "end": "302000"
  },
  {
    "text": "possible to register a domain name that contains a special character like a special Unicode character for",
    "start": "302000",
    "end": "307800"
  },
  {
    "text": "example um but Punic code is kind of like a workaround for that so Punic code",
    "start": "307800",
    "end": "313479"
  },
  {
    "text": "is an algorithm that converts um an an internationalized domain name like the",
    "start": "313479",
    "end": "319479"
  },
  {
    "text": "one you see there mana.com to an asky only representation the same goes for cafe. be if you actually register the",
    "start": "319479",
    "end": "327080"
  },
  {
    "text": "domain name on the right hand side you will end up with the International domain name on the left hand side so",
    "start": "327080",
    "end": "333160"
  },
  {
    "text": "browsers automatically do this conversion for you yeah that's actually a real domain",
    "start": "333160",
    "end": "338360"
  },
  {
    "text": "name poop. La um I wouldn't suggest going there but it",
    "start": "338360",
    "end": "344160"
  },
  {
    "text": "exists anyway uh so all the browsers and all the other programs that need to deal with URLs have a Punic code encoder and",
    "start": "344160",
    "end": "351479"
  },
  {
    "text": "a decoder built in and basically they just implement this algorithm and that's what I wanted to write in JavaScript",
    "start": "351479",
    "end": "357000"
  },
  {
    "text": "just for fun so that's Punic code and uh I'm going to spare you the details of how",
    "start": "357000",
    "end": "362840"
  },
  {
    "text": "the algorithm works exactly but internally at some point I needed to Loop over the internationalized domain",
    "start": "362840",
    "end": "369680"
  },
  {
    "text": "name String and go over it character by character and that sounds really simple",
    "start": "369680",
    "end": "375199"
  },
  {
    "text": "that part but it's actually really hard especially in JavaScript and this presentation will explain why and it",
    "start": "375199",
    "end": "381880"
  },
  {
    "text": "will also explain how you do it properly so for me by working on this",
    "start": "381880",
    "end": "388240"
  },
  {
    "text": "Library that's when I started to all these issues in the JavaScript language but before I get into all that uh let's",
    "start": "388240",
    "end": "395000"
  },
  {
    "text": "talk about Unicode itself because there's a lot of U misinformation about Unicode and what it really is um so",
    "start": "395000",
    "end": "401840"
  },
  {
    "text": "first off Unicode is not an encoding it's actually much easier to think of Unicode as sort of a database that Maps",
    "start": "401840",
    "end": "409400"
  },
  {
    "text": "any symbol that you can think of to a number a unique number for that symbol and a unique canonical name for that",
    "start": "409400",
    "end": "416240"
  },
  {
    "text": "symbol so the whole point of this is that this way you can refer to any symbol without having to use the symbol",
    "start": "416240",
    "end": "423120"
  },
  {
    "text": "itself which is really useful so for example the Latin capital letter A",
    "start": "423120",
    "end": "428639"
  },
  {
    "text": "that's the canonical name for the symbol has the code point u+ 0041 and the code points is usually",
    "start": "428639",
    "end": "436199"
  },
  {
    "text": "formatted in this way it starts with the U plus prefix and then it's followed by some hexa decimal digits and these are",
    "start": "436199",
    "end": "442800"
  },
  {
    "text": "usually zero padded up to four digits at least four digits so another example is the Latin",
    "start": "442800",
    "end": "449560"
  },
  {
    "text": "small letter A of course this is a completely different symbol so it has its own unique canonical name and it has",
    "start": "449560",
    "end": "456199"
  },
  {
    "text": "a completely different code point so that's the basics of Unicode really I think you get the idea now each symbol",
    "start": "456199",
    "end": "463560"
  },
  {
    "text": "simply gets its own Unicode code point now there is a lot of weird symbols in Unicode like the Unicode snowman for",
    "start": "463560",
    "end": "470879"
  },
  {
    "text": "example this is a real character I'm not sure why you would ever need this in your English text documents but it's",
    "start": "470879",
    "end": "476319"
  },
  {
    "text": "there if you want to use it and the code point is U plus 2 603 and then there's",
    "start": "476319",
    "end": "481400"
  },
  {
    "text": "everyone's favorite um Unicode character the pile of poo um so I'm not making",
    "start": "481400",
    "end": "487240"
  },
  {
    "text": "this up this is actually the canonical name for a character in the Unicode standard it's pile of",
    "start": "487240",
    "end": "494280"
  },
  {
    "text": "poo um as you can see the code point is 1 F4 A9 which consists of five heximal",
    "start": "494280",
    "end": "501080"
  },
  {
    "text": "digits so at this point you may be wondering okay what how many code points are there or what's the highest possible",
    "start": "501080",
    "end": "506720"
  },
  {
    "text": "code point value well in unicode the code Point values range from 0 to 10 f f",
    "start": "506720",
    "end": "513240"
  },
  {
    "text": "FF so that's over 1.1 million possible symbols now not all of these code points",
    "start": "513240",
    "end": "519800"
  },
  {
    "text": "have been assigned a symbol yet in Unicode but this range has been reserved so that in the future whenever they want",
    "start": "519800",
    "end": "526000"
  },
  {
    "text": "to add a new symbol they can just pick any of the code points that haven't been already used and just assign the symbol",
    "start": "526000",
    "end": "533800"
  },
  {
    "text": "there now to keep things organized Unicode divides all these things all these code points into 17 planes that",
    "start": "533800",
    "end": "540839"
  },
  {
    "text": "consist of about 65,000 code points and there 65,000 symbols for each plane and",
    "start": "540839",
    "end": "547240"
  },
  {
    "text": "the first of these planes is probably the most important one it's called the basic multilingual plane or the BMP and",
    "start": "547240",
    "end": "553720"
  },
  {
    "text": "it contains all the most commonly used symbols so whenever you're writing a text document in English or even in",
    "start": "553720",
    "end": "559920"
  },
  {
    "text": "Spanish or French or whatever um chances are that you won't need any characters or any code points outside of the",
    "start": "559920",
    "end": "568040"
  },
  {
    "text": "BMP and just like any other plane as you can see it's about 65,000 symbols in",
    "start": "568040",
    "end": "573079"
  },
  {
    "text": "there and then there's a group name for all the other planes combined as well they're called the supplementary planes",
    "start": "573079",
    "end": "579440"
  },
  {
    "text": "or the astral planes so uh code points within that plane are called astral code",
    "start": "579440",
    "end": "584640"
  },
  {
    "text": "points or astral symbols you get the idea now these astral symbols are pretty easy to recognize because if you need",
    "start": "584640",
    "end": "591959"
  },
  {
    "text": "more than four heximal digits just to represent them that means it's an astral",
    "start": "591959",
    "end": "597760"
  },
  {
    "text": "symbol okay so that's all you need to know about Unicode to deal with um strings in JavaScript correctly so let's",
    "start": "597760",
    "end": "604360"
  },
  {
    "text": "move on to the JavaScript behavior that I was talking about so now that you have a basic",
    "start": "604360",
    "end": "610000"
  },
  {
    "text": "understanding of Unicode it's easy to see how it applies to JavaScript strings for example you may have seen stuff like",
    "start": "610000",
    "end": "616640"
  },
  {
    "text": "this before um it's in a string you can have a backslash followed by X and Then followed by two heximal digits and these",
    "start": "616640",
    "end": "623880"
  },
  {
    "text": "are is this is called heximal escape sequence um now in this case it gives",
    "start": "623880",
    "end": "629680"
  },
  {
    "text": "you an a way to refer to a unic good code Point that's what the digits refer to so it's a way to refer to a symbol",
    "start": "629680",
    "end": "636560"
  },
  {
    "text": "without using the symbol itself so in this case this is just a string ABC in caps um but represented",
    "start": "636560",
    "end": "643600"
  },
  {
    "text": "using Escape sequences now this is useful in some cases um but it's a bit",
    "start": "643600",
    "end": "650120"
  },
  {
    "text": "Limited in its use because we're limited to just two heximal digits so we can only use this for the code points in the",
    "start": "650120",
    "end": "656480"
  },
  {
    "text": "range from o to FF now what's a bit more useful is the",
    "start": "656480",
    "end": "661839"
  },
  {
    "text": "so-called Unicode escape sequence it starts with a backslash followed by U and Then followed by four heximal digits",
    "start": "661839",
    "end": "669320"
  },
  {
    "text": "instead of two so this gives you a a much bigger range of code points that",
    "start": "669320",
    "end": "674399"
  },
  {
    "text": "you can escape this way so again this is the same string ABC but now that you",
    "start": "674399",
    "end": "680200"
  },
  {
    "text": "have four heximal digits to use you can also Escape characters like U plus 2661",
    "start": "680200",
    "end": "685600"
  },
  {
    "text": "which is the Unicode white hard symbol which looks like this",
    "start": "685600",
    "end": "691240"
  },
  {
    "text": "so using this type of escape sequence you can actually Escape all the characters in The BMP in the basic",
    "start": "691279",
    "end": "697279"
  },
  {
    "text": "multilingual plane which is useful but as you know there's still these 16 other planes the",
    "start": "697279",
    "end": "704399"
  },
  {
    "text": "astral planes so what do we do about those we cannot represent them using just four heximal digits because we need",
    "start": "704399",
    "end": "711279"
  },
  {
    "text": "more than four digits so what about those asteral code points or another way to phrase the question what about the",
    "start": "711279",
    "end": "718560"
  },
  {
    "text": "pile of poo and other equally important astral symbols of course so remember there's over a",
    "start": "718560",
    "end": "725639"
  },
  {
    "text": "million of these astral symbols in total and the answer is well we can",
    "start": "725639",
    "end": "731040"
  },
  {
    "text": "actually represent them using Escape sequences but it's a bit complicated in ecmascript 6 the upcoming",
    "start": "731040",
    "end": "738040"
  },
  {
    "text": "version of JavaScript uh this will actually be really easy because you can just use the Unicode code Point escapes",
    "start": "738040",
    "end": "744920"
  },
  {
    "text": "these are new and they start with a backlash followed by U followed by braces and then between those braces you",
    "start": "744920",
    "end": "751399"
  },
  {
    "text": "can use up to six hexadecimal digits so that is enough to represent all possible Unicode code",
    "start": "751399",
    "end": "757600"
  },
  {
    "text": "points so this is really useful and like you as you can see you can just escape",
    "start": "757600",
    "end": "762920"
  },
  {
    "text": "the pile of poo by using its Cod points and then you get the correct string that you would expect sorry for the",
    "start": "762920",
    "end": "768720"
  },
  {
    "text": "beatboxing there now for backwards compatibility with EOS script 5 so for existing",
    "start": "768720",
    "end": "775519"
  },
  {
    "text": "implementations you actually need to use surrogate pairs so if you want to to represent a pile of poo using Escape",
    "start": "775519",
    "end": "780839"
  },
  {
    "text": "sequences today you actually need two separate Escape sequences which is a bit confusing especially because the code",
    "start": "780839",
    "end": "787680"
  },
  {
    "text": "points for these escap sequences are probably not what you would expect they don't look anything like the original",
    "start": "787680",
    "end": "793120"
  },
  {
    "text": "code point so in this case for these circuit pairs each ciruit represents the half of",
    "start": "793120",
    "end": "800079"
  },
  {
    "text": "the symbol and it's only when they're combined together they form a single",
    "start": "800079",
    "end": "805199"
  },
  {
    "text": "symbol and there are formulas that can be used to calculate the these surrogate Hales based on an astral code point and",
    "start": "805199",
    "end": "812120"
  },
  {
    "text": "the other way around you can go back too and this is a JavaScript implementation of those formulas you don't really need",
    "start": "812120",
    "end": "818160"
  },
  {
    "text": "to look into it too much but again this is something that you need to keep in mind whenever you're dealing with",
    "start": "818160",
    "end": "824000"
  },
  {
    "text": "strings in JavaScript because often you will need to use these surrogate pairs yourself and sometimes you will even",
    "start": "824000",
    "end": "829519"
  },
  {
    "text": "have to calculate them yourself using this code now this whole concept of using",
    "start": "829519",
    "end": "835720"
  },
  {
    "text": "just a single escape sequence for BMP symbols but then using two separate Escape sequences for Asal symbols is",
    "start": "835720",
    "end": "842320"
  },
  {
    "text": "really confusing um and it has lots of annoying consequences in the entire JavaScript language so let's say for",
    "start": "842320",
    "end": "848720"
  },
  {
    "text": "example that you want to count the number of characters in a string it sounds fairly simple right well my first",
    "start": "848720",
    "end": "854720"
  },
  {
    "text": "thought would be to use the length property that any string has so for example if you have a string with the capital letter A in there with the Cod",
    "start": "854720",
    "end": "861720"
  },
  {
    "text": "point 4 one you can tell that the length is be is just one right and this can be",
    "start": "861720",
    "end": "868639"
  },
  {
    "text": "explained by using Escape sequences if you represent a string using nothing but escapes you see that there's only a",
    "start": "868639",
    "end": "874600"
  },
  {
    "text": "single escape sequence needed to represent it so it makes sense that the result is one the same goes for the",
    "start": "874600",
    "end": "879920"
  },
  {
    "text": "capital letter B but what's important here is that this is not always the case the length property of a string does not",
    "start": "879920",
    "end": "886680"
  },
  {
    "text": "always reflect the number of symbols or code points in the string for example let's try some slightly different",
    "start": "886680",
    "end": "892720"
  },
  {
    "text": "characters they even look a bit similar these are the mathematical bolt capital a symbol in unic code with the code",
    "start": "892720",
    "end": "900000"
  },
  {
    "text": "Point 1D 40 and the mathematical bolt capital B and as you can see they have a length of two instead of one even though",
    "start": "900000",
    "end": "906519"
  },
  {
    "text": "there's only one symbol there in the string I thought it was really confusing Behavior but it can be explained because",
    "start": "906519",
    "end": "913680"
  },
  {
    "text": "if you need to represent it using nothing but Escape sequences you can see that there's two escapes needed for the",
    "start": "913680",
    "end": "919240"
  },
  {
    "text": "one symbol of course this is really really confusing because we're just humans and we generally think in terms",
    "start": "919240",
    "end": "925240"
  },
  {
    "text": "of Unicode characters rather than in surrogate halves or anything no one thinks like that only computers",
    "start": "925240",
    "end": "932240"
  },
  {
    "text": "do now similarly if you try to wrap the pile of poo in a string and then get its length you will get two the number two",
    "start": "932240",
    "end": "940000"
  },
  {
    "text": "and there's a very obvious joke to be made here but I'm just going to skip",
    "start": "940000",
    "end": "945399"
  },
  {
    "text": "ahead um so here's a practical example of where this causes issues this is a",
    "start": "945399",
    "end": "950560"
  },
  {
    "text": "screencast that I made on the Twitter website once upon a time as you can see they have this character counter at the",
    "start": "950560",
    "end": "955880"
  },
  {
    "text": "bottom that tells you how many characters you have left and in their back end they do the RH",
    "start": "955880",
    "end": "961040"
  },
  {
    "text": "thing and if you use an astral symbol or any other symbol they don't care it just counts as a single symbol however in",
    "start": "961040",
    "end": "967959"
  },
  {
    "text": "their front end they had a book they would just use the length of the string and do the calculation based on that so",
    "start": "967959",
    "end": "973759"
  },
  {
    "text": "as you can see here for each pile of poo you enter the number decreases by two instead of one so while this bug was",
    "start": "973759",
    "end": "980480"
  },
  {
    "text": "there you could only post tweets with 70 piles of poo in them instead of 140 yeah now uh luckily they fixed the",
    "start": "980480",
    "end": "989560"
  },
  {
    "text": "book in but another example is the countable GS Library which you may have seen",
    "start": "989560",
    "end": "995240"
  },
  {
    "text": "before um basically what it does is uh you hook it up to a text area or an input on an HTML page and then it will",
    "start": "995240",
    "end": "1002360"
  },
  {
    "text": "count the number of characters and paragraphs and words that you enter into there and uh then it will list those",
    "start": "1002360",
    "end": "1008399"
  },
  {
    "text": "numbers Elsewhere on the page that's all it does really so the first thing I did when I saw this demo page for the",
    "start": "1008399",
    "end": "1014480"
  },
  {
    "text": "project was to enter a pile of poo of course and unsurprisingly um it counted",
    "start": "1014480",
    "end": "1020800"
  },
  {
    "text": "as two characters rather than just one now I reported the book and it has since been fixed but uh the bottom line is",
    "start": "1020800",
    "end": "1027199"
  },
  {
    "text": "this is a really easy mistake to make but if you're writing a JavaScript library or you're doing anything in",
    "start": "1027199",
    "end": "1032480"
  },
  {
    "text": "JavaScript that involves strings especially when you don't control the input yourself um you have to make it",
    "start": "1032480",
    "end": "1038400"
  },
  {
    "text": "work with all kinds of symbols you just don't have a choice you have to um so consider astral symbols and not just the",
    "start": "1038400",
    "end": "1044959"
  },
  {
    "text": "symbols in the basic multilingual plane and really the easiest way to verify this is just to test it with some astral",
    "start": "1044959",
    "end": "1050880"
  },
  {
    "text": "symbols like I did here just throw some piles of poo in there and see what happens so getting back to our question",
    "start": "1050880",
    "end": "1057200"
  },
  {
    "text": "how can we accurately count the number of symbols in a JavaScript string you can use something like this um so",
    "start": "1057200",
    "end": "1064640"
  },
  {
    "text": "getting back to my puns Library uh this is not its main functionality the main functionality is to convert between the",
    "start": "1064640",
    "end": "1071160"
  },
  {
    "text": "different domain names but uh to iterate over the internationalized domain names",
    "start": "1071160",
    "end": "1077159"
  },
  {
    "text": "symbol by symbol I had to to implement some helper methods that would do this and that would account for surrogate",
    "start": "1077159",
    "end": "1082720"
  },
  {
    "text": "Pairs and I decided to expose those methods so that other people can use them in their own code so in this case",
    "start": "1082720",
    "end": "1089799"
  },
  {
    "text": "you can use Punic code. UCS 2. decode you pass in a string and it will return",
    "start": "1089799",
    "end": "1094880"
  },
  {
    "text": "an array of Unicode code points so it will have only one item for each code point in a string so then if you get the",
    "start": "1094880",
    "end": "1102039"
  },
  {
    "text": "length property of the resulting array instead of on the string directly it will get a more accurate result",
    "start": "1102039",
    "end": "1109720"
  },
  {
    "text": "um one more note uh the Punic JS library that I was talking about it's included",
    "start": "1109720",
    "end": "1115080"
  },
  {
    "text": "with nodejs by default so if you want to use it in node you don't have to install anything just require it require Punic",
    "start": "1115080",
    "end": "1121679"
  },
  {
    "text": "code and you get get going with it so in equin script 6 this will be",
    "start": "1121679",
    "end": "1128360"
  },
  {
    "text": "much easier and you won't need a library for it anymore you can just use array. from you pass in a string there and then",
    "start": "1128360",
    "end": "1135240"
  },
  {
    "text": "it will create an array containing a string for each symbol in the string so this is similar to the previous solution",
    "start": "1135240",
    "end": "1142760"
  },
  {
    "text": "u in the background this uses the string iterator that is also new in Aon script 6 and this string iterator is defined so",
    "start": "1142760",
    "end": "1149159"
  },
  {
    "text": "that it only Loops over whole symbols so it automatically takes care of these circuit pairs for",
    "start": "1149159",
    "end": "1154520"
  },
  {
    "text": "you and as you can see the result is much more accurate this way I've also created a tool that takes",
    "start": "1154520",
    "end": "1161840"
  },
  {
    "text": "a string as input and then shows the Escape sequences for any special characters within that string so it's a",
    "start": "1161840",
    "end": "1167520"
  },
  {
    "text": "bit similar to a hex dum except the output is valid JavaScript which is sometimes more useful and with this tool",
    "start": "1167520",
    "end": "1174000"
  },
  {
    "text": "it's really easy to tell what kind of Unicode symbols the string contains even if the symbols are non non printable or",
    "start": "1174000",
    "end": "1180799"
  },
  {
    "text": "just wides space symbols as you can see",
    "start": "1180799",
    "end": "1184919"
  },
  {
    "text": "here now if we're being pedantic and this depends on your use case of course",
    "start": "1186600",
    "end": "1192559"
  },
  {
    "text": "um it's actually a bit more complicated so now we know how to count",
    "start": "1192559",
    "end": "1197960"
  },
  {
    "text": "code points correctly but sometimes um you know a",
    "start": "1197960",
    "end": "1203240"
  },
  {
    "text": "string looks visually like it contains a number of symbols while in reality it contains more symbols so how can we",
    "start": "1203240",
    "end": "1210039"
  },
  {
    "text": "account for stuff like that for example in this case um JavaScript seems to be telling us that these strings are",
    "start": "1210039",
    "end": "1215480"
  },
  {
    "text": "different but they look the same to us right so what's going on here well I",
    "start": "1215480",
    "end": "1221000"
  },
  {
    "text": "tell you what I did I took these two strings and I pasted them into the tool that I just showed you and then it gave",
    "start": "1221000",
    "end": "1226360"
  },
  {
    "text": "me these results so as you can see the first string contains the character F1",
    "start": "1226360",
    "end": "1232559"
  },
  {
    "text": "which is an N with a Tilda on top of it and then the second string is different it has a separate n character and Then",
    "start": "1232559",
    "end": "1239159"
  },
  {
    "text": "followed by the character with code point 0303 which is a combining tiled",
    "start": "1239159",
    "end": "1244240"
  },
  {
    "text": "and a combining Mark always gets applied to the previous symbol so visually they",
    "start": "1244240",
    "end": "1249520"
  },
  {
    "text": "look exactly the same but if you look at it this way it's obvious that they're not the same string the first string has",
    "start": "1249520",
    "end": "1256000"
  },
  {
    "text": "a length of six the other has a length of seven and they use different Sy symbols so there's no way that they can be the",
    "start": "1256000",
    "end": "1261280"
  },
  {
    "text": "same so how can we fix our solution so that it even accounts for this sort of",
    "start": "1261280",
    "end": "1266880"
  },
  {
    "text": "thing for these look like symbols in this case if you want to get the length of the string we probably expect the",
    "start": "1266880",
    "end": "1272520"
  },
  {
    "text": "result of six for both strings right well in EOS script 6 this will be really",
    "start": "1272520",
    "end": "1277880"
  },
  {
    "text": "easy because it introduces Unicode normalization you can just call the normalized method on any string and then",
    "start": "1277880",
    "end": "1284159"
  },
  {
    "text": "pass the normalization form in there and uh the this as a result will take care of most lookalike symbols like the one",
    "start": "1284159",
    "end": "1291000"
  },
  {
    "text": "we've seen earlier and then after that of course you still have to account for astral symbols and circuit pairs like we",
    "start": "1291000",
    "end": "1296840"
  },
  {
    "text": "did before and you can actually use this today in Chrome and Opera this is",
    "start": "1296840",
    "end": "1302400"
  },
  {
    "text": "already landed um but if you want it to support other browsers as well which you should do uh you can use a polyfill",
    "start": "1302400",
    "end": "1309279"
  },
  {
    "text": "called un Norm the link is there at the bottom um I'll also put the slides online afterwards um and this is a",
    "start": "1309279",
    "end": "1316720"
  },
  {
    "text": "completely spec compliance polyfill for the normalized method now still this is",
    "start": "1316720",
    "end": "1322240"
  },
  {
    "text": "not exactly perfect um just like your",
    "start": "1322240",
    "end": "1327559"
  },
  {
    "text": "ringtone now for example if you have a string like this uh well I count nine",
    "start": "1328360",
    "end": "1333440"
  },
  {
    "text": "characters here but if you feed it to the function that we just created you'll still get a result of 116 even with our",
    "start": "1333440",
    "end": "1340840"
  },
  {
    "text": "pedantic version of the function so this is probably not what you expected but if you need to support",
    "start": "1340840",
    "end": "1346679"
  },
  {
    "text": "stuff like this you can solve it by us using a regular expression that takes care of all the um combining marks and",
    "start": "1346679",
    "end": "1352480"
  },
  {
    "text": "the graphine extenders you can basically just remove them from the string and then count the number of code points",
    "start": "1352480",
    "end": "1358039"
  },
  {
    "text": "just like we did before and that would give you a better result but I'm not going to show you the regular expression",
    "start": "1358039",
    "end": "1363559"
  },
  {
    "text": "here because it would scare you and you would start bleeding from your eyes and stuff like that I've seen it happen before it wasn't pretty now another",
    "start": "1363559",
    "end": "1371200"
  },
  {
    "text": "example is reversing a string in JavaScript it sounds really simple uh and in fact the most common solution to",
    "start": "1371200",
    "end": "1377720"
  },
  {
    "text": "this problem looks like this you just take a string you split it into an array of symbols then you reverse that array",
    "start": "1377720",
    "end": "1384520"
  },
  {
    "text": "and then you join it back together into a string and this works fine for a lot of",
    "start": "1384520",
    "end": "1390120"
  },
  {
    "text": "cases for example if you have a string ABC it reverses into CBA which makes",
    "start": "1390120",
    "end": "1395320"
  },
  {
    "text": "sense now let's try another one if you take the string Manana with the N with the Tilla on top of it it still reverses",
    "start": "1395320",
    "end": "1401919"
  },
  {
    "text": "correctly now let's try the other Manana where the n and the Tilla are two",
    "start": "1401919",
    "end": "1407520"
  },
  {
    "text": "separate characters in this case the combining til now gets applied to the wrong character it gets applied to the a",
    "start": "1407520",
    "end": "1413240"
  },
  {
    "text": "instead of the N which is probably not what you would expect and then finally let's try to reverse a pile of poo or",
    "start": "1413240",
    "end": "1420039"
  },
  {
    "text": "any other Asal symbol and the result here is um that you will get the ccate",
    "start": "1420039",
    "end": "1425480"
  },
  {
    "text": "halves but in the wrong order so the pair is now in the wrong order and this means that you basically lost some data",
    "start": "1425480",
    "end": "1431720"
  },
  {
    "text": "there the string won't be really usable so this is probably not what you would expect and you somehow need to",
    "start": "1431720",
    "end": "1438240"
  },
  {
    "text": "work work around these issues now luckily for us a brilliant computer scientist named Missy Elliot came up",
    "start": "1438240",
    "end": "1444000"
  },
  {
    "text": "with a bulletproof algorithm that accounts for these issues and the algorithm goes I put my thing down flip",
    "start": "1444000",
    "end": "1449640"
  },
  {
    "text": "it and reverse it and indeed by first swapping the position of the combining marks with",
    "start": "1449640",
    "end": "1455559"
  },
  {
    "text": "their original characters and then also uh reversing any surrogate pairs before further processing the string the issues",
    "start": "1455559",
    "end": "1462559"
  },
  {
    "text": "are avoided successfully so thank you Missy and I actually wrote a JavaScript",
    "start": "1462559",
    "end": "1467880"
  },
  {
    "text": "implementation of her algorithm called s rever so if you ever need to reverse a string in JavaScript you can just use",
    "start": "1467880",
    "end": "1473559"
  },
  {
    "text": "that and as you can see it will account for these issues um correctly now this Behavior affects",
    "start": "1473559",
    "end": "1481559"
  },
  {
    "text": "other string Methods too it's everywhere in the JavaScript language so for example if you try to use string from",
    "start": "1481559",
    "end": "1487320"
  },
  {
    "text": "character code this is a function you can pass in a Cod point and it will turn that code Point into a string containing",
    "start": "1487320",
    "end": "1493200"
  },
  {
    "text": "that symbol for that code point which is really useful but it only works the way it would expect it to for B andp code",
    "start": "1493200",
    "end": "1499840"
  },
  {
    "text": "points if you pass it an astral code point it will still give you a result but it probably is not going to be the",
    "start": "1499840",
    "end": "1505559"
  },
  {
    "text": "result that you would expect so this function is slightly broken it only works for BMP",
    "start": "1505559",
    "end": "1511360"
  },
  {
    "text": "characters now the solution here is uh to use surate Pairs and in this case you",
    "start": "1511360",
    "end": "1517399"
  },
  {
    "text": "would have to calculate the code points for the Surat yourself which is a pain of",
    "start": "1517399",
    "end": "1522559"
  },
  {
    "text": "course what you could also do is use another Library like for example Punic JS which has the helper method where you",
    "start": "1522559",
    "end": "1529799"
  },
  {
    "text": "can just pass in an array of code points and then it will do the conversion for you that's slightly easier because you",
    "start": "1529799",
    "end": "1535000"
  },
  {
    "text": "don't have to calculate it again anymore um but what would be even better is the",
    "start": "1535000",
    "end": "1540200"
  },
  {
    "text": "new function that is coming in equiscript 6 it's called string. from code point and it's it's pretty much",
    "start": "1540200",
    "end": "1546000"
  },
  {
    "text": "exactly the same as string. from character code except that this one actually works um not not just for code",
    "start": "1546000",
    "end": "1552760"
  },
  {
    "text": "points in the BMP but for any code point and you can actually use this today if you want to by using the F that I'm",
    "start": "1552760",
    "end": "1558799"
  },
  {
    "text": "linking to at the bottom now another method is string.",
    "start": "1558799",
    "end": "1564840"
  },
  {
    "text": "prototype. character ad U it is similarly affected by this Behavior so if you use character at to retrieve the",
    "start": "1564840",
    "end": "1570640"
  },
  {
    "text": "first symbol in the string containing the pile of poo symbol uh you won't get the entire pile of poo you just get the",
    "start": "1570640",
    "end": "1576720"
  },
  {
    "text": "first surrogate half so you get half the pile of poo which sounds like a good thing but actually it's not what you",
    "start": "1576720",
    "end": "1583840"
  },
  {
    "text": "want now this can be fixed in E script 7 uh not in e script 6 uh this is a",
    "start": "1583840",
    "end": "1589840"
  },
  {
    "text": "proposal that I wrote uh string. prototype. add and it would allow you to get the symbol at a given position and",
    "start": "1589840",
    "end": "1596720"
  },
  {
    "text": "it would automatically account for these um ccate halves and combine them together for",
    "start": "1596720",
    "end": "1603200"
  },
  {
    "text": "you another example is string. prototype. character code ad which has a similar problem if you use it to",
    "start": "1603279",
    "end": "1609240"
  },
  {
    "text": "retrieve the code point of the first character in the string with the pile of poo you would only get the code point",
    "start": "1609240",
    "end": "1615399"
  },
  {
    "text": "for the first cget half not the entire character again and this is really confusing now xos script 6 fixes this by",
    "start": "1615399",
    "end": "1622200"
  },
  {
    "text": "introducing yet another method which um magically does the same thing but it works correctly even for astral",
    "start": "1622200",
    "end": "1630000"
  },
  {
    "text": "symbols now another fun thought exercise is um how do you iterate over all",
    "start": "1630000",
    "end": "1635679"
  },
  {
    "text": "symbols in a string now you may remember that I needed to do this for the puno JS",
    "start": "1635679",
    "end": "1640919"
  },
  {
    "text": "Library so the thing to keep in mind here is that we need to account for astral",
    "start": "1640919",
    "end": "1645960"
  },
  {
    "text": "symbols and in eosp 5 this looks something like this and this is actually a simplified solution it's not perfect",
    "start": "1645960",
    "end": "1653080"
  },
  {
    "text": "um you actually need more code than this which is terrible enough already um so you need a lot of Border plate just to",
    "start": "1653080",
    "end": "1659200"
  },
  {
    "text": "account for those annoying surrogate Pairs and to combining back together into a single character now in osrp 6 it",
    "start": "1659200",
    "end": "1665559"
  },
  {
    "text": "will be much easier because you can just use the string iterator you can use four off to iterate over each symbol in the",
    "start": "1665559",
    "end": "1673039"
  },
  {
    "text": "string and it will automatically take care of the surrogate pairs for you it's much cleaner",
    "start": "1673039",
    "end": "1679720"
  },
  {
    "text": "now I didn't mention all the string Methods one by one but string.",
    "start": "1679720",
    "end": "1684960"
  },
  {
    "text": "prototype. substring or slice or basically anything else involving strings in JavaScript has similar issues",
    "start": "1684960",
    "end": "1691480"
  },
  {
    "text": "so look out when you're using them now another fun thing to think",
    "start": "1691480",
    "end": "1696760"
  },
  {
    "text": "about is regular expressions for example the dot operator and a regular expression only matches a",
    "start": "1696760",
    "end": "1703440"
  },
  {
    "text": "single character but because JavaScript considers Surs to be separate character s it would never match an astral symbol",
    "start": "1703440",
    "end": "1710840"
  },
  {
    "text": "so in this case you might expect the regular expression to match and the result to be true but instead it's false",
    "start": "1710840",
    "end": "1717279"
  },
  {
    "text": "because the pile of poo consists of two surrogate halves as far as JavaScript is concerned so let's think about this for",
    "start": "1717279",
    "end": "1724480"
  },
  {
    "text": "a second what kind of regular expression could we use to match any Unicode code points well we cannot use the dot",
    "start": "1724480",
    "end": "1732120"
  },
  {
    "text": "operator as we've demonstrated besides it wouldn't match line breakes either if you wanted to match line brakes uh we",
    "start": "1732120",
    "end": "1737919"
  },
  {
    "text": "can solve that problem by just using this sort of regular expression where we basically match all the wides space",
    "start": "1737919",
    "end": "1743960"
  },
  {
    "text": "characters and then match all the non-whitespace characters as well and then that matches any character but",
    "start": "1743960",
    "end": "1749240"
  },
  {
    "text": "still it would only match um characters in the in the JavaScript definition of the words so only surrogate halves it",
    "start": "1749240",
    "end": "1757200"
  },
  {
    "text": "wouldn't match astral symbols so does anyone know or have any idea what the regular expression to match any Unicode",
    "start": "1757200",
    "end": "1764120"
  },
  {
    "text": "symbol would look like okay okay it will look something",
    "start": "1764120",
    "end": "1769760"
  },
  {
    "text": "like this yeah my thoughts exactly um so",
    "start": "1769760",
    "end": "1775159"
  },
  {
    "text": "what's happening here is that the first part of the regular expression matches any BMP symbols that don't start the",
    "start": "1775159",
    "end": "1780880"
  },
  {
    "text": "surrogate pair then the second half of the regular expression matches a surrogate pair so an astral symbol now",
    "start": "1780880",
    "end": "1787320"
  },
  {
    "text": "of course this is not the type of regular expression that you want to be writing by hand let alone debugging it",
    "start": "1787320",
    "end": "1793000"
  },
  {
    "text": "that's that would be crazy so what I did is I used a JavaScript library called regenerate to to create this regular",
    "start": "1793000",
    "end": "1799679"
  },
  {
    "text": "expression for me dynamically and it looks something like this so uh you create a new regenerate instance you",
    "start": "1799679",
    "end": "1806440"
  },
  {
    "text": "define range in this case I just add the range of all Unicode code points and then I call the two string method on it",
    "start": "1806440",
    "end": "1813320"
  },
  {
    "text": "and then it will return a string that represents a part of a regular expression that I can use uh it returns",
    "start": "1813320",
    "end": "1818799"
  },
  {
    "text": "a string uh because it's supposed to be used as part of a build script so you can dynamically uh insert the resulting",
    "start": "1818799",
    "end": "1825679"
  },
  {
    "text": "regular expression into a Javascript file and use it from there now another slightly more advanced example would be",
    "start": "1825679",
    "end": "1831399"
  },
  {
    "text": "to create a new regenerate instance at all the possible unic code code points and then remove a range of symbols in",
    "start": "1831399",
    "end": "1838159"
  },
  {
    "text": "this case all symbols from A to Z then remove a single symbol in this case the pile of poo and then create a regular",
    "start": "1838159",
    "end": "1845120"
  },
  {
    "text": "expression that matches all those characters in The set and then it would look something like this so again this",
    "start": "1845120",
    "end": "1851000"
  },
  {
    "text": "is not the type of regular expression that I would like to write by hand let alone debug it so if I have the choice",
    "start": "1851000",
    "end": "1857639"
  },
  {
    "text": "between maintaining the regular expression directly or by just maintaining those five lines of code",
    "start": "1857639",
    "end": "1863799"
  },
  {
    "text": "right above there I definitely know what to choose so the whole point of this library is to just create a build script",
    "start": "1863799",
    "end": "1871200"
  },
  {
    "text": "that generates these complex regular expressions for you and that way it's much much more maintainable now getting back to our",
    "start": "1871200",
    "end": "1877919"
  },
  {
    "text": "problem uh it can also be solved in ospt 6 by using the new regular expression U",
    "start": "1877919",
    "end": "1884000"
  },
  {
    "text": "flag in that case if you use this U flag uh the dot operator will match match whole code points instead of just",
    "start": "1884000",
    "end": "1889799"
  },
  {
    "text": "surrogate halves so this magically fixes the behavior that you were after another example is character",
    "start": "1889799",
    "end": "1897039"
  },
  {
    "text": "classes in regular Expressions um for example if you do a to c in a character class you probably expect it to match a",
    "start": "1897039",
    "end": "1904200"
  },
  {
    "text": "b and c right well similarly if you create a character class with astral symbols you would expect it to match all",
    "start": "1904200",
    "end": "1911240"
  },
  {
    "text": "the symbols within that range but this is not exactly true this doesn't work the way it would expect it",
    "start": "1911240",
    "end": "1916840"
  },
  {
    "text": "to in fact as soon as you execute the first line of JavaScript there uh it will throw a syntax error because in",
    "start": "1916840",
    "end": "1923360"
  },
  {
    "text": "this case uh it will say the range is out of order in the character class so what is going on there well as far as",
    "start": "1923360",
    "end": "1930320"
  },
  {
    "text": "JavaScript is concerned this regular expression looks like this because each Asal symbol consists of two separate",
    "start": "1930320",
    "end": "1937000"
  },
  {
    "text": "characters right so what JavaScript is trying to do here is to create a range between those two characters between the",
    "start": "1937000",
    "end": "1944200"
  },
  {
    "text": "last surrogate for the first symbol and the first surrogate for the second symbol which is not what you want and",
    "start": "1944200",
    "end": "1950039"
  },
  {
    "text": "it's also impossible because the range is in the wrong order so even if it would work it wouldn't do what you",
    "start": "1950039",
    "end": "1955600"
  },
  {
    "text": "want so the way to fix this in Eon script 6 is again just introduce the U",
    "start": "1955600",
    "end": "1961240"
  },
  {
    "text": "flag and then it magically starts working the way it would expected to however if you need a solution that",
    "start": "1961240",
    "end": "1966519"
  },
  {
    "text": "works today um you're back to using a tool like regenerate for example so you",
    "start": "1966519",
    "end": "1972080"
  },
  {
    "text": "just say regenerate and then you add the range that you want and then you turn that into a regular expression and it",
    "start": "1972080",
    "end": "1978399"
  },
  {
    "text": "will look completely weird like the one here but it will work the way it would expect it to and it will match only the",
    "start": "1978399",
    "end": "1984080"
  },
  {
    "text": "symbols that you defined so in summary I think it's fair to say that JavaScript has a Unicode",
    "start": "1984080",
    "end": "1990519"
  },
  {
    "text": "problem but rather than complain about it like JayZ did I think we should be doing more of this",
    "start": "1990519",
    "end": "1997159"
  },
  {
    "text": "instead yeah we should just deal with it and really work around these issues cuz once you're aware of them which you all",
    "start": "2000760",
    "end": "2007200"
  },
  {
    "text": "are now it's not really that hard to work around them and remember the pile",
    "start": "2007200",
    "end": "2012600"
  },
  {
    "text": "of Po test I think this is really important so whenever you're working on a JavaScript library or you're using a",
    "start": "2012600",
    "end": "2018519"
  },
  {
    "text": "JavaScript library and you're looking through their unit test and you see that there's no pile of poo in there just",
    "start": "2018519",
    "end": "2023960"
  },
  {
    "text": "submit a poo request with a pile of poo and it will really help them so thanks that's it for me the",
    "start": "2023960",
    "end": "2032200"
  },
  {
    "text": "slides can be found there",
    "start": "2032200",
    "end": "2036039"
  },
  {
    "text": "so we have time for some questions we don't have another mic yeah you could create you could for",
    "start": "2042679",
    "end": "2049200"
  },
  {
    "text": "example use regenerate to create a regular expression um that only matches Asal symbols then you can apply that",
    "start": "2049200",
    "end": "2056520"
  },
  {
    "text": "regular expression to the string see if it matches if it matches then you know you have to do some extra",
    "start": "2056520",
    "end": "2062000"
  },
  {
    "text": "work that would work yes yeah exactly repat the question yeah",
    "start": "2062000",
    "end": "2068320"
  },
  {
    "text": "so the question was why do they introduce new methods in ecmascript six rather than wow that would be a fun",
    "start": "2068320",
    "end": "2075000"
  },
  {
    "text": "language um so rather than fixing the old ones that are broken um well the",
    "start": "2075000",
    "end": "2080800"
  },
  {
    "text": "problem is backwards compatibility there's a lot of existing code on the internet today that relies on the broken",
    "start": "2080800",
    "end": "2086440"
  },
  {
    "text": "behavior of these functions and if we were to magically fix them all those scripts would suddenly be broken and",
    "start": "2086440",
    "end": "2092440"
  },
  {
    "text": "that's something we just cannot do we cannot break the web so instead we have to introduce new methods",
    "start": "2092440",
    "end": "2098640"
  },
  {
    "text": "good question yeah uh no no for the same reason we're",
    "start": "2098640",
    "end": "2103800"
  },
  {
    "text": "practically stuck with them forever because there's so much existing content that just relies on these things yeah",
    "start": "2103800",
    "end": "2110599"
  },
  {
    "text": "his point was that the old functions could be useful if you want to know the exact amount of bytes that the string um",
    "start": "2110599",
    "end": "2117760"
  },
  {
    "text": "consists of and that really depends on the encoding that you're going to store the string in JavaScript uses ucs2",
    "start": "2117760",
    "end": "2124680"
  },
  {
    "text": "internally um which is also what Dum strings use so uh browsers use that internally too but",
    "start": "2124680",
    "end": "2130440"
  },
  {
    "text": "if you're going to save a string as utf8 for example it will be a different number of bytes for each string",
    "start": "2130440",
    "end": "2136320"
  },
  {
    "text": "depending on the characters that you use so it all depends I don't think the old functions are all that useful to be",
    "start": "2136320",
    "end": "2141800"
  },
  {
    "text": "honest but for long time we just didn't have anything else yes yeah so there's a lot of different",
    "start": "2141800",
    "end": "2148880"
  },
  {
    "text": "encodings uh utf8 utf16 ucs2 which is what JavaScript uses internally um which",
    "start": "2148880",
    "end": "2155920"
  },
  {
    "text": "is why we're having this Behavior well um for most purposes utf8 is probably",
    "start": "2155920",
    "end": "2161720"
  },
  {
    "text": "the best encoding to use because it's optimized uh for example if you use a",
    "start": "2161720",
    "end": "2166800"
  },
  {
    "text": "BMP symbol it will take uh one to three bytes only and only if you use an astral",
    "start": "2166800",
    "end": "2173599"
  },
  {
    "text": "symbol which are not that common honestly then it will take up four bytes so it's a variable length encoding which",
    "start": "2173599",
    "end": "2180000"
  },
  {
    "text": "is really useful uh on the other hand if you use UTF 16 as you can see here um",
    "start": "2180000",
    "end": "2186560"
  },
  {
    "text": "you have either um like two bytes or four bytes that are needed which is not",
    "start": "2186560",
    "end": "2192079"
  },
  {
    "text": "as useful because a lot of well the most common characters are BMP symbols um so",
    "start": "2192079",
    "end": "2198359"
  },
  {
    "text": "for BMP symbols they would take up twice as much size storage spage as utf8",
    "start": "2198359",
    "end": "2204560"
  },
  {
    "text": "would so it depends but for most things I would say use utf8 when you",
    "start": "2204560",
    "end": "2211040"
  },
  {
    "text": "can um actually I I have an entire blog post on that goes on between the difference between uh UCS and UTF 16 and",
    "start": "2211040",
    "end": "2218920"
  },
  {
    "text": "the end result is that JavaScript is more close to ucs2 than it is to utf16",
    "start": "2218920",
    "end": "2224119"
  },
  {
    "text": "because in UTF 16 you cannot have loan circuits and JavaScript allows those and there's some other reasons as well but",
    "start": "2224119",
    "end": "2230280"
  },
  {
    "text": "I'm happy to discuss this after yeah what over be or something",
    "start": "2230280",
    "end": "2236838"
  },
  {
    "text": "yeah um yeah well for the examples that I showed in my slides double equality",
    "start": "2237280",
    "end": "2242480"
  },
  {
    "text": "versus Triple equality didn't really matter um because they were always of the same type um um in general I tend to",
    "start": "2242480",
    "end": "2249960"
  },
  {
    "text": "use double equals rather than triple equals um I know that's an uncontroversial move in my end but um",
    "start": "2249960",
    "end": "2257480"
  },
  {
    "text": "I'm of the opinion that if you know that the types are going to be exactly the same there's just no point in using",
    "start": "2257480",
    "end": "2263200"
  },
  {
    "text": "triple equals like for example if you use type off and then a variable you know that it will always return a string",
    "start": "2263200",
    "end": "2269400"
  },
  {
    "text": "so in that case I think it's useless to add to use triple equals but that's personal preference",
    "start": "2269400",
    "end": "2275640"
  },
  {
    "text": "really yeah let's have some beers",
    "start": "2275640",
    "end": "2281920"
  }
]