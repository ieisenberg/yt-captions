[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "hi um thanks for coming this is my uh silly talk with all these cool",
    "start": "4560",
    "end": "11200"
  },
  {
    "text": "science pictures on it uh before you ask they don't mean anything um but i do feel like they give",
    "start": "11200",
    "end": "17039"
  },
  {
    "text": "my talk a little bit of gravitas so i hope you'll take that into consideration so this is going to be kind of like a",
    "start": "17039",
    "end": "24400"
  },
  {
    "text": "walk-through i guess of a system that i'm sort of researching and prototyping and building",
    "start": "24400",
    "end": "30000"
  },
  {
    "text": "and have been for a little while it's a sort of analysis of some of the unique",
    "start": "30000",
    "end": "37200"
  },
  {
    "text": "constraints that we encounter when we design systems of states that are supposed to",
    "start": "37200",
    "end": "43280"
  },
  {
    "text": "live at the edge and we'll talk about what the edge means and how it's different than i don't know in the data center let's",
    "start": "43280",
    "end": "49280"
  },
  {
    "text": "say um and it's an analysis of how those constraints kind of affect",
    "start": "49280",
    "end": "54559"
  },
  {
    "text": "the design of the systems that you build and how they shape the decisions that you make and i want",
    "start": "54559",
    "end": "61120"
  },
  {
    "text": "to just say up front that this is not certainly not the only way you could build a system like",
    "start": "61120",
    "end": "66880"
  },
  {
    "text": "this it's just kind of like one way and certainly there are equally",
    "start": "66880",
    "end": "72000"
  },
  {
    "text": "successful ways uh that take different considerations so uh just join me on this journey and",
    "start": "72000",
    "end": "77840"
  },
  {
    "text": "we'll see what we can learn uh here's sort of the table of content so to speak",
    "start": "77840",
    "end": "82960"
  },
  {
    "text": "first we're gonna establish a bit of context about what we're doing at fastly particularly but also maybe a little bit",
    "start": "82960",
    "end": "88560"
  },
  {
    "text": "in general for edge state systems uh then we'll move on to the architecture that we landed on which",
    "start": "88560",
    "end": "94320"
  },
  {
    "text": "is kind of like the boxes and lines um sort of system model we'll",
    "start": "94320",
    "end": "99680"
  },
  {
    "text": "dive down one layer deeper than that or higher than that where we talk about sort of the protocol",
    "start": "99680",
    "end": "104720"
  },
  {
    "text": "how information moves through the boxes and lines and then we'll talk about some complications uh",
    "start": "104720",
    "end": "111280"
  },
  {
    "text": "tricky parts of all of this and then draw some conclusions okay so i work for fastly has anyone",
    "start": "111280",
    "end": "119759"
  },
  {
    "start": "116000",
    "end": "262000"
  },
  {
    "text": "first of all heard of fastly excellent good does anyone use fastly cool so fastly is a",
    "start": "119759",
    "end": "126960"
  },
  {
    "text": "edge cloud network and a content delivery network and so uh in a in a few words we make",
    "start": "126960",
    "end": "133760"
  },
  {
    "text": "your websites fast but what that means and how we do that has sort of changed over time it used to",
    "start": "133760",
    "end": "139120"
  },
  {
    "text": "be we could be a pretty straightforward um like a a store of content right just kind of",
    "start": "139120",
    "end": "145280"
  },
  {
    "text": "static content but as time goes on that becomes uh sort of insufficient as applications",
    "start": "145280",
    "end": "151120"
  },
  {
    "text": "was your applications become more and more sophisticated you sort of demand more and more out of the",
    "start": "151120",
    "end": "156720"
  },
  {
    "text": "cdn layer of your overall system right and so to that end uh pretty recently uh",
    "start": "156720",
    "end": "162800"
  },
  {
    "text": "fastly has come out with this sort of prototype product called um compute edge right and so",
    "start": "162800",
    "end": "170080"
  },
  {
    "text": "what this is is a way for you to deploy software in theoretically any language to our",
    "start": "170080",
    "end": "176879"
  },
  {
    "text": "platform uh via webassembly which is a detail which is super interesting but",
    "start": "176879",
    "end": "182400"
  },
  {
    "text": "i won't really get into here so you can deploy that to our infrastructure and essentially run your",
    "start": "182400",
    "end": "188159"
  },
  {
    "text": "code in every http request that we serve right and so previously you could do",
    "start": "188159",
    "end": "194560"
  },
  {
    "text": "something like this with a language called vcl which we support",
    "start": "194560",
    "end": "199599"
  },
  {
    "text": "and you could do a lot with that but vcl is by design like not touring complete so you don't",
    "start": "199599",
    "end": "204799"
  },
  {
    "text": "explode our servers uh and it's a little bit restricted in that way and can be a little bit",
    "start": "204799",
    "end": "210480"
  },
  {
    "text": "uh let's say verbose but with webassembly you can in theory run anything and uh we've built a lot of",
    "start": "210480",
    "end": "217200"
  },
  {
    "text": "stuff to support that to be safe and isolated and that sort of stuff the most important thing that we've",
    "start": "217200",
    "end": "222560"
  },
  {
    "text": "built and the thing that's enabled us to offer this as a product is this sort of like runtime",
    "start": "222560",
    "end": "228319"
  },
  {
    "text": "which allows us to sort of cold boot your code on the order of like 30",
    "start": "228319",
    "end": "233920"
  },
  {
    "text": "microseconds right and this is orders of magnitude faster than anything else i'm aware of in the market right what's uh the leading cloud",
    "start": "233920",
    "end": "240560"
  },
  {
    "text": "platform like cold boot time can be up to like hundreds of milliseconds or something like this right so this enables it to run in every http",
    "start": "240560",
    "end": "246080"
  },
  {
    "text": "request which is super cool it opens up like all sorts of doors to interesting uh use cases right",
    "start": "246080",
    "end": "252319"
  },
  {
    "text": "so when i was at fastly i saw this being developed um years ago and i thought okay this is",
    "start": "252319",
    "end": "258400"
  },
  {
    "text": "very interesting right uh the question that immediately came up in my mind was uh if we provide compute at the edge",
    "start": "258400",
    "end": "266320"
  },
  {
    "start": "262000",
    "end": "613000"
  },
  {
    "text": "the next obvious question is like well what about state right as soon as you can run cpu cycles you want to be able to have",
    "start": "266320",
    "end": "272160"
  },
  {
    "text": "access to data and do stuff in that cpu cycle okay",
    "start": "272160",
    "end": "277280"
  },
  {
    "text": "and this is an interesting and hard question for reasons we'll explore so um i want to explore what that means and",
    "start": "277280",
    "end": "284160"
  },
  {
    "text": "some of the constraints that fall out of that question um and there are interesting properties of our architecture at fastly",
    "start": "284160",
    "end": "291199"
  },
  {
    "text": "that sort of influence significantly influence the answer to this question right so we run these like points of",
    "start": "291199",
    "end": "298160"
  },
  {
    "text": "presence all over the world uh in large part they're kind of isolated from each other right if we have a",
    "start": "298160",
    "end": "303280"
  },
  {
    "text": "network connectivity issue that takes japan off the map or something that doesn't really affect the other",
    "start": "303280",
    "end": "308720"
  },
  {
    "text": "points of presence in the world by design right and we have like a world-class network engineering team that makes sure this is true",
    "start": "308720",
    "end": "315600"
  },
  {
    "text": "but if we start offering a state product i guess it's important that the logical view of your state as a",
    "start": "315600",
    "end": "322240"
  },
  {
    "text": "customer can be somehow globally logical right it's like a single consistent view of the state",
    "start": "322240",
    "end": "328560"
  },
  {
    "text": "uh throughout the network at least you want to be able to have that option be able to opt into that",
    "start": "328560",
    "end": "333680"
  },
  {
    "text": "um so if this is true then the challenges here are actually like not only difficult in an",
    "start": "333680",
    "end": "339039"
  },
  {
    "text": "engineering sense but also in like a fundamental sense like a physical universe sense right because the speed of light",
    "start": "339039",
    "end": "344400"
  },
  {
    "text": "sets an upper bound on how fast information can move through space right and if you want to do a round trip basically from one",
    "start": "344400",
    "end": "350880"
  },
  {
    "text": "antipode on the earth to the other it takes about i think 133 milliseconds just like physical laws right and so in some sense",
    "start": "350880",
    "end": "358960"
  },
  {
    "text": "that is like completely incompatible with this number right so this already introduces a like fundamental constraint on our",
    "start": "358960",
    "end": "365600"
  },
  {
    "text": "state system how do we make this work okay so now we can begin to like",
    "start": "365600",
    "end": "370720"
  },
  {
    "text": "state some theses here what are we actually doing what are we building here well this isn't going to be a general purpose database right",
    "start": "370720",
    "end": "377680"
  },
  {
    "text": "we don't have the time the latency budget to be able to do that at large scale",
    "start": "377680",
    "end": "384400"
  },
  {
    "text": "if we want to operate in the request lifecycle we have to necessarily only do reads and writes",
    "start": "384400",
    "end": "392160"
  },
  {
    "text": "that are local to a given pop i think and if that's true then that necessarily",
    "start": "392160",
    "end": "397680"
  },
  {
    "text": "implies that we're building this eventually consistent system at the global scale",
    "start": "397680",
    "end": "402800"
  },
  {
    "text": "where state conflicts are normal so in my opinion we have to like narrow the scope of what",
    "start": "402800",
    "end": "408319"
  },
  {
    "text": "we're building narrow the scope of the design to in ways like this and sort of uh begin",
    "start": "408319",
    "end": "413360"
  },
  {
    "text": "to winnow in on on something that isn't a full database but is maybe one way to think of it as sort of",
    "start": "413360",
    "end": "419039"
  },
  {
    "text": "like a writable cache which you could then connect to your uh origin database if you so chose",
    "start": "419039",
    "end": "425120"
  },
  {
    "text": "maybe okay let's follow this trainer thought a little bit further um let's uh lean into",
    "start": "425120",
    "end": "433039"
  },
  {
    "text": "uh these physical constraints the speed of light stuff right and let's think about the data model in general as",
    "start": "433039",
    "end": "438960"
  },
  {
    "text": "application developers we really like this abstraction this concept of a single global truth like",
    "start": "438960",
    "end": "444319"
  },
  {
    "text": "if i put something in my shopping cart on a server in vancouver i want to see the same shopping cart with the same item in it",
    "start": "444319",
    "end": "450639"
  },
  {
    "text": "if i happen to connect from melbourne right this has always been a fiction right because we always have to do",
    "start": "450639",
    "end": "458560"
  },
  {
    "text": "engineering work to make this true but that fiction that abstraction really begins to leak when we get to large",
    "start": "458560",
    "end": "463919"
  },
  {
    "text": "physical scale right i think uh what we have to do is lean into the like physical truth of the fact that",
    "start": "463919",
    "end": "471120"
  },
  {
    "text": "we're uh having multiple simultaneous truths in all of these points of presence all over the world",
    "start": "471120",
    "end": "476720"
  },
  {
    "text": "that converge at some point to some sort of uh global consistent state eventually um",
    "start": "476720",
    "end": "483520"
  },
  {
    "text": "and so this whole project that i've been working on has been in some sense an experiment that if we accept these things as true",
    "start": "483520",
    "end": "489680"
  },
  {
    "text": "can we get a coherent system out of it can we actually make this work make it useful so i think we can",
    "start": "489680",
    "end": "496560"
  },
  {
    "text": "and i think the the thing that enables it is this state primitive called a crdt",
    "start": "496560",
    "end": "504319"
  },
  {
    "text": "so this isn't going to be us here to crdt talk but i it is important to like understand a little bit about them to like make sense",
    "start": "504319",
    "end": "510400"
  },
  {
    "text": "of the rest of what i'm going to say so we'll go through it a tiny bit um crdts are this uh class of data",
    "start": "510400",
    "end": "517200"
  },
  {
    "text": "structure actually i'm curious has anyone heard of these before okay so i'll do this quickly um",
    "start": "517200",
    "end": "522520"
  },
  {
    "text": "[Music] they're a type of data structure conflict-free replicated data type",
    "start": "522520",
    "end": "528800"
  },
  {
    "text": "um that you can think of as just like carefully constructed data structure paired with operations on",
    "start": "528800",
    "end": "534959"
  },
  {
    "text": "that data structure which are always associative commutative and idempotent",
    "start": "534959",
    "end": "540720"
  },
  {
    "text": "which means that the operations on the data structure can combine in any order including duplicates of the",
    "start": "540720",
    "end": "546560"
  },
  {
    "text": "same operation and as long as the number of operations are bounded like a finite set of",
    "start": "546560",
    "end": "552720"
  },
  {
    "text": "operations you're always going to land at the same end state no matter how you do it which is super important",
    "start": "552720",
    "end": "561040"
  },
  {
    "text": "but a little bit abstract so let's go through two really quick examples to kind of demonstrate",
    "start": "561040",
    "end": "566080"
  },
  {
    "text": "what i mean here so consider the uh the the data type of an integer and the",
    "start": "566080",
    "end": "571680"
  },
  {
    "text": "operation of addition okay we can see that addition is of course associative like this property is",
    "start": "571680",
    "end": "576720"
  },
  {
    "text": "true it is also commutative like that property is true but if you add two numbers together you",
    "start": "576720",
    "end": "582000"
  },
  {
    "text": "don't get the same number again right so it's not idempotent and so this doesn't work",
    "start": "582000",
    "end": "588320"
  },
  {
    "text": "uh not a crdt right but let's twist it just a tiny bit and instead of integers",
    "start": "588320",
    "end": "593680"
  },
  {
    "text": "let's think of sets of integers and instead of addition let's think of set union as the operation",
    "start": "593680",
    "end": "599360"
  },
  {
    "text": "and it turns out this actually works right set unions are associative in the same way they're commutative in the same way but",
    "start": "599360",
    "end": "605440"
  },
  {
    "text": "it turns out they're also idempotent like if you set union a set a with itself you get the same set out",
    "start": "605440",
    "end": "610640"
  },
  {
    "text": "of it again so this is a crdt and so let's consider a situation where",
    "start": "610640",
    "end": "616640"
  },
  {
    "start": "613000",
    "end": "736000"
  },
  {
    "text": "we have this set and we kind of split it into three data centers around",
    "start": "616640",
    "end": "623200"
  },
  {
    "text": "the world so we have three copies of what is initially the same set and then we independently make some",
    "start": "623200",
    "end": "629120"
  },
  {
    "text": "operations on each of them so we add two and three to this one three and four to this one four five six",
    "start": "629120",
    "end": "634800"
  },
  {
    "text": "and then this one and then at the end of this we have three divergent states right at some point we're going to merge",
    "start": "634800",
    "end": "640640"
  },
  {
    "text": "them back together but at the moment they are multiple parallel universes of state that are not the same",
    "start": "640640",
    "end": "646959"
  },
  {
    "text": "so what we're able to do with crdts is that we can merge those states together that is recombine them in sort of any",
    "start": "646959",
    "end": "653279"
  },
  {
    "text": "order or any combination and as long as we merge",
    "start": "653279",
    "end": "658560"
  },
  {
    "text": "everything together eventually like all of the divergent states end up in the same final sets at some point and of course",
    "start": "658560",
    "end": "666320"
  },
  {
    "text": "given bounded inputs to the whole system will eventually arrive at that deterministic input or",
    "start": "666320",
    "end": "672000"
  },
  {
    "text": "output this happens no matter how we recombine those states and extremely importantly even if",
    "start": "672000",
    "end": "679519"
  },
  {
    "text": "we duplicate the same merge operation together so set another way it's always safe to",
    "start": "679519",
    "end": "685200"
  },
  {
    "text": "merge two values of the same logical crdt object together",
    "start": "685200",
    "end": "690480"
  },
  {
    "text": "we don't have to do any coordination of order or of uh tracking what we've already",
    "start": "690480",
    "end": "696480"
  },
  {
    "text": "done the end result will always be correct it'll never like move backwards in time if that makes sense",
    "start": "696480",
    "end": "702640"
  },
  {
    "text": "so that idempotence will prove to be the most important thing of of this design uh this thing happens to be called a",
    "start": "702640",
    "end": "709200"
  },
  {
    "text": "join semi-lattice don't ask me any more questions about that because that is the extent of my knowledge yeah maybe you can use this in",
    "start": "709200",
    "end": "715200"
  },
  {
    "text": "pub trivia later no probably not um so a set of integers is like pretty trivial example you'll",
    "start": "715200",
    "end": "720399"
  },
  {
    "text": "just have to trust me that there are other crdts that give you more sophisticated things like",
    "start": "720399",
    "end": "726079"
  },
  {
    "text": "map operations or list or things like that and so we can construct more interesting",
    "start": "726079",
    "end": "732480"
  },
  {
    "text": "apis than just this out of crdts okay so that's um sort of",
    "start": "732480",
    "end": "740399"
  },
  {
    "start": "736000",
    "end": "1190000"
  },
  {
    "text": "stayed at the edge it fastly or at least my motivation for this project where that came from",
    "start": "740399",
    "end": "745519"
  },
  {
    "text": "we said this isn't going to be a database it's going to be more of sort of a writable cache we've talked about how the speed of",
    "start": "745519",
    "end": "751519"
  },
  {
    "text": "light necessarily constrains the design and we've talked about the state primitive of the crdt as the thing we're",
    "start": "751519",
    "end": "758240"
  },
  {
    "text": "going to kind of build on top of or try to and see if we can get a system out of it so now i'd like to talk a little bit",
    "start": "758240",
    "end": "764320"
  },
  {
    "text": "just at a high level about the physical architecture of how all these points of presence and state",
    "start": "764320",
    "end": "770839"
  },
  {
    "text": "replicas might interrelate to each other so let's return to our network map here",
    "start": "770839",
    "end": "777040"
  },
  {
    "text": "we've already talked about one constraint which was how the latency requirements of",
    "start": "777040",
    "end": "782639"
  },
  {
    "text": "running each computation within the request lifecycle establishes kind of like a hard upper",
    "start": "782639",
    "end": "789600"
  },
  {
    "text": "bound on how fast our operations need to be at the state layer but i'd like to introduce another",
    "start": "789600",
    "end": "796320"
  },
  {
    "text": "constraint actually which is influenced by the fact that our um data centers are not like the cloud",
    "start": "796320",
    "end": "803440"
  },
  {
    "text": "we don't have infinite disk or infinite cpu like the good folks at google do i don't know how they do that but they",
    "start": "803440",
    "end": "809440"
  },
  {
    "text": "do but we don't we don't have that luxury um we have physical machines in physical",
    "start": "809440",
    "end": "816800"
  },
  {
    "text": "data centers and they have finite resources um so",
    "start": "816800",
    "end": "822480"
  },
  {
    "text": "the access patterns that people use in say tokyo versus amsterdam are not going to be exactly",
    "start": "822480",
    "end": "828720"
  },
  {
    "text": "the same and it would be kind of silly to put the same put all the data",
    "start": "828720",
    "end": "834240"
  },
  {
    "text": "for all customers because it's a multi-tenant system in every point of presence right we can't really do that",
    "start": "834240",
    "end": "840160"
  },
  {
    "text": "so um we need to have data live in each of these points of presence",
    "start": "840160",
    "end": "845199"
  },
  {
    "text": "according to some usage according to some need um and therefore we need to have some",
    "start": "845199",
    "end": "850480"
  },
  {
    "text": "concept of how to populate data in a point of presence that it doesn't have right so this is all a bit hand-wavy but",
    "start": "850480",
    "end": "857199"
  },
  {
    "text": "the point is uh not every point of presence can have access to all the data all the time",
    "start": "857199",
    "end": "862399"
  },
  {
    "text": "there needs to be some kind of like distribution concept and in the old like cdn world",
    "start": "862399",
    "end": "870399"
  },
  {
    "text": "we had it pretty easy right because as a customer you always gave us your origin so we always had a source of",
    "start": "870399",
    "end": "876639"
  },
  {
    "text": "authority we knew we could go to you to get the information but in this world there is no like origin",
    "start": "876639",
    "end": "882079"
  },
  {
    "text": "necessarily because we are both the provider of the data and kind of the host of it fastly is um so we have to think about",
    "start": "882079",
    "end": "888560"
  },
  {
    "text": "this a little bit more carefully so um the obvious uh there's no obvious",
    "start": "888560",
    "end": "896160"
  },
  {
    "text": "solution here and when that's true i like to kind of map the space a little bit a little bit of lateral thinking so let's say that these are our some of",
    "start": "896160",
    "end": "902480"
  },
  {
    "text": "our points of presence how do we think about the relationship of each of these",
    "start": "902480",
    "end": "908079"
  },
  {
    "text": "with regards to where state lives right and so i don't know exactly the right answer but i do know like some",
    "start": "908079",
    "end": "914240"
  },
  {
    "text": "points on the spectrum of how we think about state and so let's maybe think about the extremes of that spectrum right and",
    "start": "914240",
    "end": "920800"
  },
  {
    "text": "one extreme might be again this might not be the only answer but this is something that many of us are familiar with",
    "start": "920800",
    "end": "926399"
  },
  {
    "text": "is in typical like database replication strategy lamp we will have sometimes this idea of like",
    "start": "926399",
    "end": "932079"
  },
  {
    "text": "a right primary through which all right operations are kind of like serialized",
    "start": "932079",
    "end": "937519"
  },
  {
    "text": "uh put into some sort of bin log maybe and then replicate it out to um uh read replicas",
    "start": "937519",
    "end": "944800"
  },
  {
    "text": "um also a lot of like leader-based consensus protocols work this way like graft for example",
    "start": "944800",
    "end": "950639"
  },
  {
    "text": "we would elect to write primary and proxy all our rights there and this does satisfy some criteria but not",
    "start": "950639",
    "end": "957759"
  },
  {
    "text": "important ones for us right it's just a point on the spectrum uh namely it doesn't satisfy the local read write",
    "start": "957759",
    "end": "964240"
  },
  {
    "text": "criteria right but it's one way many systems work so we",
    "start": "964240",
    "end": "969519"
  },
  {
    "text": "can think about putting this on the spectrum maybe if we could have a central right primary somewhere",
    "start": "969519",
    "end": "975600"
  },
  {
    "text": "like maybe in the cloud we could treat all of the um sites all the points of presence as in a",
    "start": "975600",
    "end": "982000"
  },
  {
    "text": "sense read replicas okay it doesn't quite work but it's a point in the space okay so that's one point maybe like we",
    "start": "982000",
    "end": "987680"
  },
  {
    "text": "consider as far away from that as possible what is the other way uh sites may relate what's another like",
    "start": "987680",
    "end": "994480"
  },
  {
    "text": "the furthest away from this concept of uh state replication and maybe that's something like a gossip network right",
    "start": "994480",
    "end": "1000560"
  },
  {
    "text": "where there is no single source of authority for data um where all of the replicas are kind of",
    "start": "1000560",
    "end": "1005759"
  },
  {
    "text": "like peers in a decentralized uh network and through some sort of gossip protocol swim or whatever",
    "start": "1005759",
    "end": "1012560"
  },
  {
    "text": "they would connect to everyone else and use some sort of strategy to communicate state updates",
    "start": "1012560",
    "end": "1019519"
  },
  {
    "text": "but that's very hand-wavy right and it raises some concerns in questions of its own",
    "start": "1019519",
    "end": "1024558"
  },
  {
    "text": "first of all it requires a lot of connections like every server and every point of presence would have to connect to",
    "start": "1024559",
    "end": "1029678"
  },
  {
    "text": "at least some and maybe all other servers in our network that maybe is wasteful and also it doesn't",
    "start": "1029679",
    "end": "1036000"
  },
  {
    "text": "give us a good answer to the question of where objects live right previously we knew objects always lived",
    "start": "1036000",
    "end": "1041438"
  },
  {
    "text": "in the right primary and so we could always just like go there conceptually if we needed information but here we",
    "start": "1041439",
    "end": "1046959"
  },
  {
    "text": "don't have those kind of guarantees kind of by design right so if somebody wanted to ask for",
    "start": "1046959",
    "end": "1052000"
  },
  {
    "text": "an object x and we didn't have it at one of our uh sites well we could like send a broadcast and",
    "start": "1052000",
    "end": "1058559"
  },
  {
    "text": "say can someone please give me x and then i mean gossip protocols guarantee at some point there's an",
    "start": "1058559",
    "end": "1064160"
  },
  {
    "text": "asymptotic upper bound to when you're going to get an answer but it's hard to communicate that in a",
    "start": "1064160",
    "end": "1069600"
  },
  {
    "text": "document to a customer it's like yeah you'll get your object eventually that's not wonderful",
    "start": "1069600",
    "end": "1075919"
  },
  {
    "text": "also it's not really clear how objects propagate through the system again there's like somehow a guarantee asymptotic upper",
    "start": "1075919",
    "end": "1081520"
  },
  {
    "text": "bound that you're gonna uh everything is gonna see all the state updates eventually but again not really what we're after",
    "start": "1081520",
    "end": "1088000"
  },
  {
    "text": "so these might be two extremes of the architectural spectrum like strictly hierarchical and kind of peer-to-peer decentralized",
    "start": "1088000",
    "end": "1095039"
  },
  {
    "text": "but now maybe we can think of is there something that's in between that might satisfy",
    "start": "1095039",
    "end": "1100320"
  },
  {
    "text": "what we're after and i think maybe something like this might work which is to say we'll have this kind of",
    "start": "1100320",
    "end": "1107440"
  },
  {
    "text": "central authority hierarchy sort of almost a hub",
    "start": "1107440",
    "end": "1112799"
  },
  {
    "text": "and spoke model but we'll keep all our reads and rights local so",
    "start": "1112799",
    "end": "1117840"
  },
  {
    "text": "all the reads and writes stay within the pop and then at some point we can maybe async forward",
    "start": "1117840",
    "end": "1124000"
  },
  {
    "text": "that information up to the hub up to the root here what i'm calling the upstream and in",
    "start": "1124000",
    "end": "1130320"
  },
  {
    "text": "that way it becomes a source of authority eventually for all the information and becomes the place that all the other",
    "start": "1130320",
    "end": "1136880"
  },
  {
    "text": "sites can ask eventually for their uh objects if they don't have them",
    "start": "1136880",
    "end": "1141919"
  },
  {
    "text": "um i'm waving my hands here because this is like not fully realized but maybe something like this can work and it sort of",
    "start": "1141919",
    "end": "1148320"
  },
  {
    "text": "produces this architecture where it's kind of like an lru cache right we do all our transactions locally",
    "start": "1148320",
    "end": "1154400"
  },
  {
    "text": "they eventually propagate up and if other things need it they know where to go",
    "start": "1154400",
    "end": "1160080"
  },
  {
    "text": "okay maybe this is enough to run with so let's see if we take this very hand wavy kind of",
    "start": "1160080",
    "end": "1167200"
  },
  {
    "text": "architecture and see if we can talk about a protocol that satisfies all our criteria like a communication protocol",
    "start": "1167200",
    "end": "1174000"
  },
  {
    "text": "so let's move on to that so we have our operating context right uh we have a tentative kind of like",
    "start": "1174000",
    "end": "1180160"
  },
  {
    "text": "high-level system architecture uh let's talk about how data moves through the system and here's where the",
    "start": "1180160",
    "end": "1185200"
  },
  {
    "text": "properties of the crdts become really useful so let's talk about the protocol here",
    "start": "1185200",
    "end": "1190559"
  },
  {
    "start": "1190000",
    "end": "1373000"
  },
  {
    "text": "and let's talk about it in the context of this really simplified system diagram uh in this model we have",
    "start": "1190559",
    "end": "1197760"
  },
  {
    "text": "a b and c where a and c are two like sites two points of presence in the",
    "start": "1197760",
    "end": "1202799"
  },
  {
    "text": "fastly architecture and then b is our like uh theoretical infinite cloud-backed upstream or",
    "start": "1202799",
    "end": "1208880"
  },
  {
    "text": "whatever okay so first question is how do objects move from a to b we assume that over",
    "start": "1208880",
    "end": "1216799"
  },
  {
    "text": "some period of time a site has received some operations read and write operations for objects",
    "start": "1216799",
    "end": "1222080"
  },
  {
    "text": "and at some point they need to move up move up to the upstream um so what we can do is think uh",
    "start": "1222080",
    "end": "1228960"
  },
  {
    "text": "think about chopping time up into little time epochs i don't know a second or five seconds or",
    "start": "1228960",
    "end": "1234400"
  },
  {
    "text": "a minute or whatever and in a given epoch we can track all the objects that have received any sort of operation",
    "start": "1234400",
    "end": "1241280"
  },
  {
    "text": "read or write um we're going to batch all those objects into sort of a batch and we're going to",
    "start": "1241280",
    "end": "1248080"
  },
  {
    "text": "emit it up to the upstream at the end of the e-block and then every epoch we're going to just",
    "start": "1248080",
    "end": "1253360"
  },
  {
    "text": "do this again and again and again and i think that covers our basis as long as we do that with some",
    "start": "1253360",
    "end": "1260720"
  },
  {
    "text": "regularity and with good faith all of the uh information in our site is going to get up",
    "start": "1260720",
    "end": "1266159"
  },
  {
    "text": "to the upstream okay that's kind of half of it",
    "start": "1266159",
    "end": "1271280"
  },
  {
    "text": "the other half of it is like how do objects get from the upstream to a different site and here we have to",
    "start": "1271280",
    "end": "1277120"
  },
  {
    "text": "keep in mind um only those objects which the site cares about in some sense should get",
    "start": "1277120",
    "end": "1283679"
  },
  {
    "text": "down there we shouldn't send everything down because that's wasteful right so i think the the wrong answer here",
    "start": "1283679",
    "end": "1289760"
  },
  {
    "text": "is for the upstream to push information down to the site because how does the",
    "start": "1289760",
    "end": "1294960"
  },
  {
    "text": "upstream know what the site needs it doesn't really not without some additional information",
    "start": "1294960",
    "end": "1301039"
  },
  {
    "text": "the key insight for me was that the sites themselves know which objects they want by",
    "start": "1301039",
    "end": "1307520"
  },
  {
    "text": "definition they will have received an operation for that object someone wants",
    "start": "1307520",
    "end": "1312799"
  },
  {
    "text": "to read an object it will ask for it and i may not have it right now but i know that i now have interest in",
    "start": "1312799",
    "end": "1319280"
  },
  {
    "text": "it and so rather than pushing objects from the upstream to the downstream",
    "start": "1319280",
    "end": "1324799"
  },
  {
    "text": "instead we can pull objects kind of from c uh c can ask for the objects it wants",
    "start": "1324799",
    "end": "1331520"
  },
  {
    "text": "from b right and so this operation uh pulling objects down but let's call",
    "start": "1331520",
    "end": "1337520"
  },
  {
    "text": "it sync and it turns out to be or it can be exactly the same operation that we use",
    "start": "1337520",
    "end": "1343520"
  },
  {
    "text": "to push objects up right in both cases we're sending a set of objects that have",
    "start": "1343520",
    "end": "1349039"
  },
  {
    "text": "recently been requested or have received interest and",
    "start": "1349039",
    "end": "1354080"
  },
  {
    "text": "in both cases we're receiving their in one case we're sending and another case we're receiving but that can be the",
    "start": "1354080",
    "end": "1360400"
  },
  {
    "text": "same thing we can do that in both cases the latest version of those objects and we kind of synchronize them between",
    "start": "1360400",
    "end": "1366880"
  },
  {
    "text": "us and the upstream and so i want to walk through what that looks like and we'll see how crdts",
    "start": "1366880",
    "end": "1372159"
  },
  {
    "text": "come into play here so here's a very simple example let's say this is our site",
    "start": "1372159",
    "end": "1377760"
  },
  {
    "start": "1373000",
    "end": "1591000"
  },
  {
    "text": "we have a set of objects that have received operations uh somebody has written key one equals",
    "start": "1377760",
    "end": "1383360"
  },
  {
    "text": "value one someone else maybe has requested key two we don't have that yet so that's a read miss and someone else",
    "start": "1383360",
    "end": "1390799"
  },
  {
    "text": "has written key 3 equals value 3. and so here's our empty state",
    "start": "1390799",
    "end": "1396240"
  },
  {
    "text": "and this is what our state looks like after these operations we have we know about three values",
    "start": "1396240",
    "end": "1402640"
  },
  {
    "text": "excuse me two values but in addition we have this other thing which i'm going to call an interest set which is not the values just the keys",
    "start": "1402640",
    "end": "1409360"
  },
  {
    "text": "and it's all the keys that have been requested in any way right okay",
    "start": "1409360",
    "end": "1415200"
  },
  {
    "text": "so here comes the end of our epoch it's time to do our little synchronized dance so what we'll do is",
    "start": "1415200",
    "end": "1420640"
  },
  {
    "text": "we'll combine the states and the interest sets and we'll create something called a sync request",
    "start": "1420640",
    "end": "1425679"
  },
  {
    "text": "and so every epoch we can generate one of these which contains all the keys and if there are values all the values",
    "start": "1425679",
    "end": "1432080"
  },
  {
    "text": "that have been transacted in that in that time epoch uh okay we do that and we ship it off to the",
    "start": "1432080",
    "end": "1439600"
  },
  {
    "text": "upstream and when the upstream gets it it's going to take it and sort of compare it with its own",
    "start": "1439600",
    "end": "1445919"
  },
  {
    "text": "state so let's say the upstream has been running a little while it already has a value for k1",
    "start": "1445919",
    "end": "1452000"
  },
  {
    "text": "let's say it's v5 it doesn't really matter what it is it just is something it also has a value for k2 that's",
    "start": "1452000",
    "end": "1458400"
  },
  {
    "text": "fortunate for us because we don't know about it yet uh and let's say it also has the upstream also has some other thing",
    "start": "1458400",
    "end": "1464720"
  },
  {
    "text": "k4 whatever it's not relevant to this discussion but there it is so what the upstream is going to do is",
    "start": "1464720",
    "end": "1470640"
  },
  {
    "text": "it's going to take its state and it's going to merge in remember crdt is always support this merge operation",
    "start": "1470640",
    "end": "1476080"
  },
  {
    "text": "and importantly merge is always safe as long as we're talking about merging the same logical object together and",
    "start": "1476080",
    "end": "1482559"
  },
  {
    "text": "it's going to merge all the sync requests all the state and the sync request into its",
    "start": "1482559",
    "end": "1487600"
  },
  {
    "text": "internal state and it's going to come up with this new state so k1 is going to be the merge the",
    "start": "1487600",
    "end": "1492640"
  },
  {
    "text": "result of the merge of v1 and v5 which is call it v8 it doesn't matter",
    "start": "1492640",
    "end": "1498799"
  },
  {
    "text": "it's just some new state k2 well it doesn't have any new information in the incoming request",
    "start": "1498799",
    "end": "1505120"
  },
  {
    "text": "so it's going to stay the same and k3 is brand new it's never seen k3 before so",
    "start": "1505120",
    "end": "1510640"
  },
  {
    "text": "it's going to merge it with you know the empty set and it's just going to take the incoming value directly and so now at",
    "start": "1510640",
    "end": "1517360"
  },
  {
    "text": "the end of this merge operation we have a new state in the upstream okay so now the upstream",
    "start": "1517360",
    "end": "1525440"
  },
  {
    "text": "is going to say okay thanks for those three uh keys",
    "start": "1525440",
    "end": "1530640"
  },
  {
    "text": "i'm going to now return to you uh the same three keys and what i think the latest state is for each of them",
    "start": "1530640",
    "end": "1536159"
  },
  {
    "text": "right and so it's going to send a sync response of exactly the same size three",
    "start": "1536159",
    "end": "1542240"
  },
  {
    "text": "keys this time three values back down to the uh to the site",
    "start": "1542240",
    "end": "1548240"
  },
  {
    "text": "and the site is going to do exactly the same sort of merge dance that the upstream did it's going to merge all the response",
    "start": "1548240",
    "end": "1553600"
  },
  {
    "text": "values into its local state and you can kind of track this and you can see that at the end of this",
    "start": "1553600",
    "end": "1560000"
  },
  {
    "text": "process the for all the keys that were part of this request response",
    "start": "1560000",
    "end": "1565760"
  },
  {
    "text": "we're guaranteed that their state is going to be identical in now the downstream in the",
    "start": "1565760",
    "end": "1571039"
  },
  {
    "text": "upstream right and it's crdts which give us this property we know that",
    "start": "1571039",
    "end": "1576080"
  },
  {
    "text": "if we have two versions of a value and we merge them together no matter",
    "start": "1576080",
    "end": "1581600"
  },
  {
    "text": "what else is going on the thing we get out of it is going to be deterministic and it's going to be the same on both sides idempotence",
    "start": "1581600",
    "end": "1587600"
  },
  {
    "text": "commutativity identity associativity so that's cool and at the end of all this",
    "start": "1587600",
    "end": "1594240"
  },
  {
    "start": "1591000",
    "end": "1846000"
  },
  {
    "text": "this data is kind of like synchronized between the two sites so what are some properties of this",
    "start": "1594240",
    "end": "1599520"
  },
  {
    "text": "operation which are nice first of all it's synchronous uh of course and by that i mean it's an",
    "start": "1599520",
    "end": "1605120"
  },
  {
    "text": "rpc it's literally like request response and we're waiting on both sides for everything to complete",
    "start": "1605120",
    "end": "1611600"
  },
  {
    "text": "uh this is super useful i don't know how many of you have designed like a number of distributed systems but uh",
    "start": "1611600",
    "end": "1618960"
  },
  {
    "text": "like async event source event driven stuff is like really tantalizing until you start getting into the weeds of it and",
    "start": "1618960",
    "end": "1626080"
  },
  {
    "text": "it becomes revealed at least in my opinion that it's much nicer to have synchronous calls",
    "start": "1626080",
    "end": "1631360"
  },
  {
    "text": "you can really reason about the state of the system a lot more easily and you eliminate huge",
    "start": "1631360",
    "end": "1637600"
  },
  {
    "text": "classes of failures just up front so that's really nice it turns out that uh this sort of synchronized operation",
    "start": "1637600",
    "end": "1645200"
  },
  {
    "text": "is robust enough that it's it can be the only way that data moves through the system and i won't get into all the details",
    "start": "1645200",
    "end": "1651279"
  },
  {
    "text": "here but it turns out that this is true we don't need any other operation besides the operations that users",
    "start": "1651279",
    "end": "1658240"
  },
  {
    "text": "request to move data between entities in any part of the system which is",
    "start": "1658240",
    "end": "1664000"
  },
  {
    "text": "really nice it turns out that it's bandwidth minimized and by this i mean if there is one key which is really hot",
    "start": "1664000",
    "end": "1671600"
  },
  {
    "text": "in a site and it receives a ton of operations then you're only going to send the",
    "start": "1671600",
    "end": "1676799"
  },
  {
    "text": "result of those operations at the end of the epoch you're going to send like one value right",
    "start": "1676799",
    "end": "1682399"
  },
  {
    "text": "it's whatever happens to be the end result of all the local ops right so you don't have to send a",
    "start": "1682399",
    "end": "1687760"
  },
  {
    "text": "thousand operations let's say you just send one value which can be quite nice it's also",
    "start": "1687760",
    "end": "1693360"
  },
  {
    "text": "data set minimized by which i mean if uh and a key doesn't receive any operations",
    "start": "1693360",
    "end": "1698960"
  },
  {
    "text": "in a given time epoch then it doesn't get sent up right we just assume everything's fine",
    "start": "1698960",
    "end": "1704080"
  },
  {
    "text": "which is also nice and we have this concept of an authoritative upstream so we always know where to go if we",
    "start": "1704080",
    "end": "1710960"
  },
  {
    "text": "don't have information every site is configured with an upstream and if i don't know if i don't know about a key then i know",
    "start": "1710960",
    "end": "1717520"
  },
  {
    "text": "at the end of the next time epoch if the upstream knows about it i will",
    "start": "1717520",
    "end": "1722720"
  },
  {
    "text": "too more properties this is actually quite interesting too the schedule is flexible meaning the time epochs can",
    "start": "1722840",
    "end": "1730320"
  },
  {
    "text": "be a second or a minute or a year and it doesn't impact the correctness of the",
    "start": "1730320",
    "end": "1736559"
  },
  {
    "text": "system it only impacts the liveness of the system meaning if i wait a really long time",
    "start": "1736559",
    "end": "1742960"
  },
  {
    "text": "to do a sync i'm going to be like out of sync with the rest of the world but when",
    "start": "1742960",
    "end": "1748799"
  },
  {
    "text": "that happens i'm going to be brought up to date because of dcrdt properties without any special accounting without any special",
    "start": "1748799",
    "end": "1755200"
  },
  {
    "text": "work it's just going to kind of do what it should and you know if my application isn't",
    "start": "1755200",
    "end": "1760880"
  },
  {
    "text": "resilient to that being out of sync for that long that may cause problems but if it is then i'm good",
    "start": "1760880",
    "end": "1767200"
  },
  {
    "text": "um importantly mist sinks in in like an in a similar way missing impact liveness",
    "start": "1767200",
    "end": "1772720"
  },
  {
    "text": "not correctness so if one of these sync calls fails due to a network partition or whatever",
    "start": "1772720",
    "end": "1777760"
  },
  {
    "text": "i don't really have to do anything i can just like say well okay uh next sync i'm gonna have a bit more data",
    "start": "1777760",
    "end": "1783520"
  },
  {
    "text": "because the previous one didn't work but otherwise i don't have to like go into some fallback mode i don't have to",
    "start": "1783520",
    "end": "1789279"
  },
  {
    "text": "enter some weird retry loop i can just like wait until the next one and it's all kind of fine and this is",
    "start": "1789279",
    "end": "1795039"
  },
  {
    "text": "like so so useful um in that like maybe the hardest part about this this is",
    "start": "1795039",
    "end": "1800480"
  },
  {
    "text": "fault management right fault recovery and crdts and this kind of like sync business give us a way to like not",
    "start": "1800480",
    "end": "1806960"
  },
  {
    "text": "really have to worry about it like we should know about it as operators we should say okay well this site hasn't synced with this upstream in like a week",
    "start": "1806960",
    "end": "1813360"
  },
  {
    "text": "this is a problem but i don't have to like do anything special aside from pester my network people to",
    "start": "1813360",
    "end": "1818799"
  },
  {
    "text": "like fix the problem uh it is eventually consistent as a property of all this and",
    "start": "1818799",
    "end": "1824960"
  },
  {
    "text": "quiet by default meaning if a site doesn't receive any operations it doesn't waste bandwidth uh sending stuff around",
    "start": "1824960",
    "end": "1833120"
  },
  {
    "text": "okay so that's all it's all really cool it sounds really nice uh i'm going to spend a little bit more time talking about how really nice it is",
    "start": "1833120",
    "end": "1838960"
  },
  {
    "text": "and then i'm going to peel back the curtain and show all the problems that i'm like papering over with my hands at the moment so let's",
    "start": "1838960",
    "end": "1844960"
  },
  {
    "text": "talk uh a little bit about other nice properties of this thing and in order to do that i'm going",
    "start": "1844960",
    "end": "1850480"
  },
  {
    "start": "1846000",
    "end": "1865000"
  },
  {
    "text": "to like uh uh take away some of the attractions a little bit we've uh papered over some details here",
    "start": "1850480",
    "end": "1857440"
  },
  {
    "text": "we've talked about like a site and an upstream as if it is just a single thing right",
    "start": "1857440",
    "end": "1862960"
  },
  {
    "text": "um but of course that's not true right uh each site is composed of many many many servers",
    "start": "1862960",
    "end": "1868399"
  },
  {
    "start": "1865000",
    "end": "2087000"
  },
  {
    "text": "um or instances or replicas there's lots of terms of art for this so first of all given a site is not just",
    "start": "1868399",
    "end": "1875360"
  },
  {
    "text": "a single machine how do user requests work when a user makes a read or",
    "start": "1875360",
    "end": "1880480"
  },
  {
    "text": "write what happens uh do we need things within the site like key affinity or a dynamo ring or any of these other",
    "start": "1880480",
    "end": "1888480"
  },
  {
    "text": "like typical tools of the trade of distributed systems uh",
    "start": "1888480",
    "end": "1895039"
  },
  {
    "text": "so interestingly i don't think so um each request to any replica is always",
    "start": "1895039",
    "end": "1901039"
  },
  {
    "text": "each user request is always dealing with a single object right so we can take that object's key and",
    "start": "1901039",
    "end": "1906480"
  },
  {
    "text": "consistently hash it to a certain number of replicas where n is",
    "start": "1906480",
    "end": "1911600"
  },
  {
    "text": "the replication factor and essentially n determines how many nodes we can allow to die",
    "start": "1911600",
    "end": "1917039"
  },
  {
    "text": "uh while still being able to serve requests but while still being able to operate",
    "start": "1917039",
    "end": "1922080"
  },
  {
    "text": "um so we do this hashing notably within the user-facing api of agents of each instance so",
    "start": "1922080",
    "end": "1928320"
  },
  {
    "text": "all instances in the cluster are essentially identical from the perspective of the user so the",
    "start": "1928320",
    "end": "1934240"
  },
  {
    "text": "request is proxy to those n replicas which should own that key",
    "start": "1934240",
    "end": "1939360"
  },
  {
    "text": "the replica applies the operation if it's a read it just reads the object out of its local state",
    "start": "1939360",
    "end": "1944399"
  },
  {
    "text": "if it's a write it performs the mutation and then returns the resulting object",
    "start": "1944399",
    "end": "1949919"
  },
  {
    "text": "importantly completely independently of all the other replicas that are doing this at the same time",
    "start": "1949919",
    "end": "1956000"
  },
  {
    "text": "and then the response which is a crdt gets sort of gathered back at the",
    "start": "1956000",
    "end": "1962880"
  },
  {
    "text": "node that received the user request and then merged together right because merge",
    "start": "1962880",
    "end": "1968480"
  },
  {
    "text": "is an operation we can do as many times as we want with no like negative consequence",
    "start": "1968480",
    "end": "1973519"
  },
  {
    "text": "we can merge them all together and then return the results to the user which then i don't know",
    "start": "1973519",
    "end": "1978799"
  },
  {
    "text": "interprets it if it's uh a values like a right of some arbitrary",
    "start": "1978799",
    "end": "1983840"
  },
  {
    "text": "value we just like extract the value out of the crdt and then return that so in the normal case this like",
    "start": "1983840",
    "end": "1990320"
  },
  {
    "text": "re-merging of all the discrete replicas uh is a no-op because ideally",
    "start": "1990320",
    "end": "1995919"
  },
  {
    "text": "all of the crdts are exactly the same because the network has been good and everyone's seen all the operations and",
    "start": "1995919",
    "end": "2001200"
  },
  {
    "text": "everything but if one replica has a more up-to-date version of the object for whatever reason",
    "start": "2001200",
    "end": "2006960"
  },
  {
    "text": "uh maybe because its peer was briefly out of service or had a long gc pause time or something",
    "start": "2006960",
    "end": "2014080"
  },
  {
    "text": "that version is going to win in the merge and so the user is always going to see the most up-to-date",
    "start": "2014080",
    "end": "2019919"
  },
  {
    "text": "version of its object as long as at least one node in the",
    "start": "2019919",
    "end": "2024960"
  },
  {
    "text": "cluster has that most up-to-date version which is nice but check it out knowing that the final",
    "start": "2024960",
    "end": "2030640"
  },
  {
    "text": "union crdt is definitely the most correct version of the for that request we can then compare that uh final merged",
    "start": "2030640",
    "end": "2037919"
  },
  {
    "text": "version with all of the other independent versions we got back from all the replicas",
    "start": "2037919",
    "end": "2043600"
  },
  {
    "text": "and if there's any discrepancy and we don't care about what the discrepancy is all we care about is is it exactly the same or not in",
    "start": "2043600",
    "end": "2050158"
  },
  {
    "text": "comparison then we know that for whatever one it was",
    "start": "2050159",
    "end": "2055440"
  },
  {
    "text": "it wasn't equal to we know that that replica is like out of date it's discrepant and",
    "start": "2055440",
    "end": "2061679"
  },
  {
    "text": "we can fix it very easily by sending a sync request with a single object in it",
    "start": "2061679",
    "end": "2067040"
  },
  {
    "text": "which is this merged version and we know that if you merge a version which is more up to date",
    "start": "2067040",
    "end": "2072158"
  },
  {
    "text": "with a version that is less up to date then you're just going to get the more up-to-date version again and so this is like automatic read",
    "start": "2072159",
    "end": "2078079"
  },
  {
    "text": "repair in each user request which falls automatically out of the",
    "start": "2078079",
    "end": "2083440"
  },
  {
    "text": "properties of crdt right so that's super cool that's user requests let's talk about",
    "start": "2083440",
    "end": "2089760"
  },
  {
    "start": "2087000",
    "end": "2098000"
  },
  {
    "text": "syncing a little bit uh so do these n replicas in a site have to do some kind of coordination",
    "start": "2089760",
    "end": "2095118"
  },
  {
    "text": "in order to sync to their upstream so again i don't think so observe that",
    "start": "2095119",
    "end": "2102000"
  },
  {
    "start": "2098000",
    "end": "2159000"
  },
  {
    "text": "each instance is gonna have a different set of objects just as a natural byproduct of this like",
    "start": "2102000",
    "end": "2107359"
  },
  {
    "text": "uh consistent hashing and ways um but also remember that crdts tolerate",
    "start": "2107359",
    "end": "2113280"
  },
  {
    "text": "over merging right so if i merge the same object repeatedly together into another target object it's going to",
    "start": "2113280",
    "end": "2120079"
  },
  {
    "text": "be fine right crdt's give us that property so it turns out that instances can just",
    "start": "2120079",
    "end": "2125920"
  },
  {
    "text": "sync whatever happens to be in their state whatever they have whatever objects they happen to have to their",
    "start": "2125920",
    "end": "2131680"
  },
  {
    "text": "upstream completely independently on whatever schedule they want it doesn't matter and the upstream will converge",
    "start": "2131680",
    "end": "2139280"
  },
  {
    "text": "their its state will converge to stability again just as a natural byproduct of all these properties",
    "start": "2139280",
    "end": "2144720"
  },
  {
    "text": "and so if we wanted to give each instance a totally different sync schedule like three seconds five seconds 20",
    "start": "2144720",
    "end": "2150480"
  },
  {
    "text": "seconds i mean it would be silly but we could do it and it wouldn't be wrong eventually the system would be",
    "start": "2150480",
    "end": "2156400"
  },
  {
    "text": "just fine so that's quite cool but again the upstream is just like any",
    "start": "2156400",
    "end": "2163440"
  },
  {
    "text": "other sites any other point of presence it is also comprised of all these",
    "start": "2163440",
    "end": "2168480"
  },
  {
    "text": "individual instances not just a single monolithic thing how does this mapping work like does uh",
    "start": "2168480",
    "end": "2174640"
  },
  {
    "text": "each downstream instance have to uh copy its syncs to all the upstream",
    "start": "2174640",
    "end": "2180160"
  },
  {
    "text": "instances well again i don't think so you can think of a user request as dealing with a single object and then",
    "start": "2180160",
    "end": "2186800"
  },
  {
    "start": "2182000",
    "end": "2250000"
  },
  {
    "text": "it's one of many operations read write bloom filter insert blah blah blah",
    "start": "2186800",
    "end": "2192079"
  },
  {
    "text": "but sync then is many objects with the same operation it's always",
    "start": "2192079",
    "end": "2198000"
  },
  {
    "text": "merge so we can model a sync call just like a user call",
    "start": "2198000",
    "end": "2203200"
  },
  {
    "text": "essentially except instead of scattering and gathering one crdt we're scattering and gathering many",
    "start": "2203200",
    "end": "2210400"
  },
  {
    "text": "crdts doing the same operation and so in this way the sync receiver",
    "start": "2210400",
    "end": "2216320"
  },
  {
    "text": "is just like a user request receiver every instance in the cluster is identical and calling",
    "start": "2216320",
    "end": "2222640"
  },
  {
    "text": "any of them will have the same effect as calling any of the other ones so it turns out that any downstream",
    "start": "2222640",
    "end": "2229200"
  },
  {
    "text": "instance can choose any upstream instance to do it syncs and the behavior will be the same um we",
    "start": "2229200",
    "end": "2236000"
  },
  {
    "text": "could even stick a load balancer in front of it and do it that way we don't need affinity uh we don't need any sort of like",
    "start": "2236000",
    "end": "2241359"
  },
  {
    "text": "ownership we don't need to rebalance anything at any point um we can just do whatever",
    "start": "2241359",
    "end": "2246800"
  },
  {
    "text": "we like here and it totally works still even cooler if an upstream is just like",
    "start": "2246800",
    "end": "2254800"
  },
  {
    "start": "2250000",
    "end": "2310000"
  },
  {
    "text": "a site then it seems reasonable to say it too could have an upstream and indeed this is true",
    "start": "2254800",
    "end": "2261520"
  },
  {
    "text": "we can sort of build this like fractal design this like enery tree where we could have a hierarchy of",
    "start": "2261520",
    "end": "2267599"
  },
  {
    "text": "upstreams and maybe we want to put an upstream in u.s central one and an upstream in eu",
    "start": "2267599",
    "end": "2273680"
  },
  {
    "text": "west 2 or something like that and then have a global upstream that sits on top of them and in this way maybe isolate",
    "start": "2273680",
    "end": "2279760"
  },
  {
    "text": "connectivity issues between regions in the world we would sort of be trading off um liveness and",
    "start": "2279760",
    "end": "2286000"
  },
  {
    "text": "capacity for like resilience so if this is true you can imagine rather than taking one epoch to get",
    "start": "2286000",
    "end": "2293119"
  },
  {
    "text": "information up and then another epoch to get it back down again it might take two epochs right one here one here",
    "start": "2293119",
    "end": "2299280"
  },
  {
    "text": "and then it would flow back down and down so maybe that's desirable maybe it's not but the system design allows it right",
    "start": "2299280",
    "end": "2306400"
  },
  {
    "text": "and that's quite interesting too um i could go on a bit more but just in the interest of time uh",
    "start": "2306400",
    "end": "2312800"
  },
  {
    "start": "2310000",
    "end": "2368000"
  },
  {
    "text": "i want to observe that all of this cool stuff is uh enabled by the smart primitive of",
    "start": "2312800",
    "end": "2319440"
  },
  {
    "text": "the crdt and uh the sort of design of the system that falls out of",
    "start": "2319440",
    "end": "2325680"
  },
  {
    "text": "it is really really simple to like think about i mean you have to understand crdts and how they work",
    "start": "2325680",
    "end": "2331920"
  },
  {
    "text": "but uh we get all this nice stuff this single operation for moving data around",
    "start": "2331920",
    "end": "2337119"
  },
  {
    "text": "the fact that we don't have to coordinate between anything to get this thing to work properly and",
    "start": "2337119",
    "end": "2343920"
  },
  {
    "text": "most importantly i think that faults require no special handling to to be resolved right they",
    "start": "2343920",
    "end": "2350320"
  },
  {
    "text": "they just need to be retried and then everything's fine all this from zero dt's um and none of it importantly that",
    "start": "2350320",
    "end": "2357200"
  },
  {
    "text": "requires any sort of sophisticated engineering really um it's just like uh the code that does all this is really",
    "start": "2357200",
    "end": "2364680"
  },
  {
    "text": "straightforward um okay so it sounds really nice right",
    "start": "2364680",
    "end": "2372400"
  },
  {
    "start": "2368000",
    "end": "2385000"
  },
  {
    "text": "uh it's not all that simple of course so let's talk about some of the uh complications here the things we have to",
    "start": "2372400",
    "end": "2377520"
  },
  {
    "text": "um think about uh that maybe uh require a bit more engineering effort a bit more",
    "start": "2377520",
    "end": "2382800"
  },
  {
    "text": "design thought um the first one is like the concept of the read miss right",
    "start": "2382800",
    "end": "2388400"
  },
  {
    "start": "2385000",
    "end": "2452000"
  },
  {
    "text": "so uh if you're in a site the first time you read an object even",
    "start": "2388400",
    "end": "2393839"
  },
  {
    "text": "if it exists somewhere else you're going to have a read miss it's likely going to miss right",
    "start": "2393839",
    "end": "2399920"
  },
  {
    "text": "and we sort of have this guarantee that it may appear later but as a user if you request something as so",
    "start": "2400000",
    "end": "2406560"
  },
  {
    "text": "far as i've described the system it's going to be like not found and then if you ask again in a few seconds it might be found then",
    "start": "2406560",
    "end": "2412560"
  },
  {
    "text": "so this is maybe not the best user experience uh depending on what the",
    "start": "2412560",
    "end": "2418160"
  },
  {
    "text": "application wants uh there is sort of a workaround an approach might be that if you have a read miss what you could",
    "start": "2418160",
    "end": "2424640"
  },
  {
    "text": "do is say uh within the request lifecycle block and make a sync request again to the",
    "start": "2424640",
    "end": "2431760"
  },
  {
    "text": "upstream for this single object and see if you get it back right and then for some use cases this might be",
    "start": "2431760",
    "end": "2437760"
  },
  {
    "text": "the right approach you're going to spend a bit of your latency budget to do that but maybe if preventing a readmiss is",
    "start": "2437760",
    "end": "2444560"
  },
  {
    "text": "important that might be worth it um i don't know we can do this i don't know if it's the right answer in all",
    "start": "2444560",
    "end": "2450839"
  },
  {
    "text": "cases another complication is api design i've sort of hand waved this a bit but",
    "start": "2450839",
    "end": "2456800"
  },
  {
    "start": "2452000",
    "end": "2527000"
  },
  {
    "text": "crdts can be non-intuitive to program against as an application person",
    "start": "2456800",
    "end": "2463599"
  },
  {
    "text": "it turns out that applications really like this fiction of a single global truth right you want to be able to make a globally",
    "start": "2463599",
    "end": "2469359"
  },
  {
    "text": "atomic transaction and just have it have it work and a great deal of engineering effort has been spent in many other products to",
    "start": "2469359",
    "end": "2476000"
  },
  {
    "text": "like prop up this fiction my claim is that it doesn't work and it like fundamentally",
    "start": "2476000",
    "end": "2481440"
  },
  {
    "text": "doesn't work and we need to kind of move beyond the model in a sort of like",
    "start": "2481440",
    "end": "2487040"
  },
  {
    "text": "uh newtonian physics to relativistic physics sense like the scale changes and our models need to change as",
    "start": "2487040",
    "end": "2493599"
  },
  {
    "text": "well this is my claim but it's not clear that that claim is going to work in the market or it's going to be like commercially viable",
    "start": "2493599",
    "end": "2500720"
  },
  {
    "text": "it turns out the general-purpose crdt-based state layers it's not obvious how to make these work",
    "start": "2500720",
    "end": "2506560"
  },
  {
    "text": "so i think the approach is we have to scope our apis pretty narrowly",
    "start": "2506560",
    "end": "2512400"
  },
  {
    "text": "at least to start and see what gets traction and see what people are comfortable with and then over time",
    "start": "2512400",
    "end": "2518319"
  },
  {
    "text": "make them a bit more general but this is a this is a guess by me um i think it's",
    "start": "2518319",
    "end": "2523839"
  },
  {
    "text": "necessary but we'll see if it's going to be sufficient another complication is resources and if",
    "start": "2523839",
    "end": "2530000"
  },
  {
    "start": "2527000",
    "end": "2602000"
  },
  {
    "text": "you have worked with cdt's at all before you'll know this is true um in our",
    "start": "2530000",
    "end": "2535200"
  },
  {
    "text": "system model as we've described it so far uh reliability we get it basically by",
    "start": "2535200",
    "end": "2541280"
  },
  {
    "text": "duplication of effort i've repeatedly said we can merge the same zero d together over and over and it's correct and that's true but",
    "start": "2541280",
    "end": "2547920"
  },
  {
    "text": "every time we do that we're burning a little bandwidth and a little cpu which",
    "start": "2547920",
    "end": "2553040"
  },
  {
    "text": "strictly speaking we don't need to do right so um maybe that is going to prove prohibitive",
    "start": "2553040",
    "end": "2558800"
  },
  {
    "text": "in some sense also crts aren't free if you're storing like 50 bytes or something you're going to",
    "start": "2558800",
    "end": "2565920"
  },
  {
    "text": "spend a lot more than 50 bytes in the crdt representation of that information",
    "start": "2565920",
    "end": "2571040"
  },
  {
    "text": "and again this is just like the cost of doing business in this highly physically distributed world but",
    "start": "2571040",
    "end": "2578319"
  },
  {
    "text": "it may be true that this is prohibitive as well so the approach here is just we have to pay careful attention to it we have to",
    "start": "2578319",
    "end": "2584720"
  },
  {
    "text": "cheat in intelligent ways when when we can and this is more art than science let's",
    "start": "2584720",
    "end": "2590480"
  },
  {
    "text": "say at the moment because i don't think although a lot of people are working really hard on this hard problem i don't think we have well-defined",
    "start": "2590480",
    "end": "2596960"
  },
  {
    "text": "answers to it yet so that's part of the cost of doing business at the bleeding edge here",
    "start": "2596960",
    "end": "2602880"
  },
  {
    "start": "2602000",
    "end": "2642000"
  },
  {
    "text": "finally we have this complication of quantum entanglement does anyone know quantum theory probably not yeah uh i read i read a",
    "start": "2602880",
    "end": "2611119"
  },
  {
    "text": "really short book about it so it turns out that quantum entanglement you know it's like you untangle two quantum bits and you spread",
    "start": "2611119",
    "end": "2616800"
  },
  {
    "text": "them apart and then a state change here is instantaneously visible over here this sort of renders all this irrelevant",
    "start": "2616800",
    "end": "2622000"
  },
  {
    "text": "if anyone figures out how to make quantum computers work then we pro we get instant easy",
    "start": "2622000",
    "end": "2628160"
  },
  {
    "text": "uh instantaneous communication of information invariant to distance kind of uh breaking the speed of light",
    "start": "2628160",
    "end": "2634079"
  },
  {
    "text": "rule the con is an amount of a job and the system's so relevant uh so if that happens you know great for",
    "start": "2634079",
    "end": "2639200"
  },
  {
    "text": "the world bad for me i don't know um okay there's plenty more",
    "start": "2639200",
    "end": "2644240"
  },
  {
    "text": "complications but those were the fun ones for me uh quick conclusions and really is just like one page of conclusions",
    "start": "2644240",
    "end": "2649920"
  },
  {
    "start": "2649000",
    "end": "2761000"
  },
  {
    "text": "um stayed at the edge right so that's where we started this whole sort of journey um in my opinion stayed at the",
    "start": "2649920",
    "end": "2656800"
  },
  {
    "text": "edge the way of thinking about it is starts with the foundational understanding that there are inescapable",
    "start": "2656800",
    "end": "2663920"
  },
  {
    "text": "constraints at large physical scale imposed by the speed of light right",
    "start": "2663920",
    "end": "2669280"
  },
  {
    "text": "and in this world our old abstractions namely the concept that there should be or is a single global",
    "start": "2669280",
    "end": "2675359"
  },
  {
    "text": "truth in our state system uh it just falls apart and what we need",
    "start": "2675359",
    "end": "2680400"
  },
  {
    "text": "is new abstractions we need to lean into these like invariants this concept of there being",
    "start": "2680400",
    "end": "2685440"
  },
  {
    "text": "multiple parallel truths in the different physical locations of our system and the only way in my opinion that we",
    "start": "2685440",
    "end": "2692720"
  },
  {
    "text": "can build systems that are coherent in this new kind of like model is by leveraging",
    "start": "2692720",
    "end": "2698079"
  },
  {
    "text": "much smarter primitives like crdts all this stuff i described is is not like due to some brilliance by me",
    "start": "2698079",
    "end": "2704640"
  },
  {
    "text": "or some like incredible engineering effort it's just like natural stuff that fell out of my decision to use this much more",
    "start": "2704640",
    "end": "2711280"
  },
  {
    "text": "sophisticated and smarter primitive and all these nice properties that we need at scale in my opinion",
    "start": "2711280",
    "end": "2716720"
  },
  {
    "text": "just became very easy in that sense so in my opinion reliable systems require more robust primitives",
    "start": "2716720",
    "end": "2723200"
  },
  {
    "text": "in my opinion the future of large-scale discus isn't about consensus rounds or leader",
    "start": "2723200",
    "end": "2728720"
  },
  {
    "text": "election or distributed locks or distributed transactions i think these are all like",
    "start": "2728720",
    "end": "2734079"
  },
  {
    "text": "dead ends essentially and i think what we need and what will prove to be true",
    "start": "2734079",
    "end": "2739280"
  },
  {
    "text": "is that all systems that are going to work at this scale are going to be simple redundant low",
    "start": "2739280",
    "end": "2745599"
  },
  {
    "text": "coordination communication systems all of which will not demonstrate an immediate global truth",
    "start": "2745599",
    "end": "2752960"
  },
  {
    "text": "but will converge towards that kind of outcome and so that's my belief that's my thesis that's my",
    "start": "2752960",
    "end": "2759280"
  },
  {
    "text": "argument and that's my talk thanks for coming and paying attention [Applause]",
    "start": "2759280",
    "end": "2765000"
  },
  {
    "text": "[Music] [Applause]",
    "start": "2765000",
    "end": "2770480"
  },
  {
    "text": "hi hi thanks for the talk um you mentioned that every node in the",
    "start": "2770480",
    "end": "2776560"
  },
  {
    "text": "system is equal to each other so does it mean that every node potentially holds wall data",
    "start": "2776560",
    "end": "2783760"
  },
  {
    "text": "of the system potentially holds what over the system all data of the system because they",
    "start": "2783760",
    "end": "2789520"
  },
  {
    "text": "are replicated from all other nodes so potentially especially the upstream",
    "start": "2789520",
    "end": "2795680"
  },
  {
    "text": "nodes will have all data of all other points of presence in the system",
    "start": "2795680",
    "end": "2801040"
  },
  {
    "text": "yeah so the right way to think about it is uh a given cluster of nodes will necessarily have",
    "start": "2801040",
    "end": "2807440"
  },
  {
    "text": "all of the data from all of the nodes that are downstream to it but a given instance in that cluster is",
    "start": "2807440",
    "end": "2814720"
  },
  {
    "text": "going to have only a fraction of the data so it'll have whatever the data is divided by",
    "start": "2814720",
    "end": "2820880"
  },
  {
    "text": "however many nodes are in the system multiplied by the replication factor okay so inside there's actually is",
    "start": "2820880",
    "end": "2828480"
  },
  {
    "text": "ownership all the data between instances yeah yeah yeah it's the import there is ownership the important part is that",
    "start": "2828480",
    "end": "2834000"
  },
  {
    "text": "there's no knowledge of ownership it's just a natural function of the hashing of the key if that makes sense",
    "start": "2834000",
    "end": "2839119"
  },
  {
    "text": "yeah thank you cheers",
    "start": "2839119",
    "end": "2845838"
  },
  {
    "start": "2848000",
    "end": "2910000"
  },
  {
    "text": "thank you very interesting talk tell me please in your experience what are the most surprising data types",
    "start": "2848319",
    "end": "2854640"
  },
  {
    "text": "and operations you've discovered you can model a crdts uh like what are the most interesting",
    "start": "2854640",
    "end": "2860559"
  },
  {
    "text": "crdts essentially that you're surprised that you can model them with you yeah um so a lot of interesting",
    "start": "2860559",
    "end": "2866079"
  },
  {
    "text": "um probabilistic data structures happen to be crdts almost by accident like bloom filters",
    "start": "2866079",
    "end": "2871119"
  },
  {
    "text": "and hyperloglog and countmen sketch it turns out these are actually just",
    "start": "2871119",
    "end": "2876160"
  },
  {
    "text": "natural crtts by the way they're constructed so that was very surprising to me one",
    "start": "2876160",
    "end": "2881200"
  },
  {
    "text": "area of like active research like crtts can be often difficult to program against and so we're",
    "start": "2881200",
    "end": "2886400"
  },
  {
    "text": "searching for the right general model like what we can build as a crdt that's",
    "start": "2886400",
    "end": "2891839"
  },
  {
    "text": "more intuitive and there's active research into making basically a json object into a crdt this is not",
    "start": "2891839",
    "end": "2899680"
  },
  {
    "text": "all the way there but martin klepman and the auto merge community are are doing work there which i think will be very interesting when it pans out",
    "start": "2899680",
    "end": "2908240"
  },
  {
    "start": "2910000",
    "end": "2969000"
  },
  {
    "text": "uh how do you make sure that when you gather the responses to service the request that at",
    "start": "2910240",
    "end": "2917520"
  },
  {
    "text": "least one of the nodes is up to date how do you make sure of that uh in terms of like how do i do it quickly or how do i ensure that it",
    "start": "2917520",
    "end": "2923920"
  },
  {
    "text": "is uh the data is correct how do you do it quickly yes quickly right so this is an interesting little",
    "start": "2923920",
    "end": "2930319"
  },
  {
    "text": "optimization uh every user request is essentially a scatter gather to all the nodes that own it",
    "start": "2930319",
    "end": "2936000"
  },
  {
    "text": "in order to serve a response we need to get at least one response back ideally we'll get all responses back so",
    "start": "2936000",
    "end": "2942000"
  },
  {
    "text": "the optimization is um you wait for the first response however long that takes you erase essentially all the nodes",
    "start": "2942000",
    "end": "2949119"
  },
  {
    "text": "which everyone responds first okay at that point you start a timer and the timer's very quick i don't know 50",
    "start": "2949119",
    "end": "2954240"
  },
  {
    "text": "milliseconds 100 milliseconds and every other response it comes back in that amount of time great",
    "start": "2954240",
    "end": "2960720"
  },
  {
    "text": "if it takes longer than that too bad right and so that's kind of how we establish a latency upper bound",
    "start": "2960720",
    "end": "2966960"
  },
  {
    "text": "we can talk more after if that's not intuitive yeah um you mentioned the sync work the sync",
    "start": "2966960",
    "end": "2973520"
  },
  {
    "start": "2969000",
    "end": "3032000"
  },
  {
    "text": "request is itself synchronous so the site will uh you know sync up to the upstream and",
    "start": "2973520",
    "end": "2980319"
  },
  {
    "text": "then the upstream and that'll happen synchronously but it seems to me that because we're using crdts it",
    "start": "2980319",
    "end": "2985520"
  },
  {
    "text": "doesn't like what would be the advantage of doing that synchronously as opposed to async so uh the point um gotcha",
    "start": "2985520",
    "end": "2993119"
  },
  {
    "text": "that'll be the last question just for timing reasons i'll hang around after for everyone else the point of saying it sync and not and",
    "start": "2993119",
    "end": "2998319"
  },
  {
    "text": "not async is simply that when i make the call it is like an rpc uh while that's happening other stuff is still happening",
    "start": "2998319",
    "end": "3005040"
  },
  {
    "text": "in the local state so it is like async in the broadest sense right um it's just that like in order to",
    "start": "3005040",
    "end": "3010079"
  },
  {
    "text": "reason about how sync calls work uh yeah they're just like rpcs rather than",
    "start": "3010079",
    "end": "3015599"
  },
  {
    "text": "event publishers or something like that okay so the but the site's not blocking it's still receiving updates yes correct okay i think that's all the",
    "start": "3015599",
    "end": "3023839"
  },
  {
    "text": "time we have i was just got the stop sign is there one more can we do one more you have a twenty five minute okay",
    "start": "3023839",
    "end": "3030319"
  },
  {
    "text": "thank you yeah um on one of your last slides you talked about some of the reliability compromises um i'm interested in when you talked",
    "start": "3031920",
    "end": "3039040"
  },
  {
    "start": "3032000",
    "end": "3087000"
  },
  {
    "text": "about those clever ways to cheat reliability issues if you could go into more detail on them specifically",
    "start": "3039040",
    "end": "3044559"
  },
  {
    "text": "like if you're using consistent hashing at the edge site clusters that can result in hot keys hot keys can",
    "start": "3044559",
    "end": "3050880"
  },
  {
    "text": "result in sort of a storm of sync events going upstream what are some strategies you're thinking about for mitigating the reliability impact on",
    "start": "3050880",
    "end": "3058559"
  },
  {
    "text": "the upstreams yeah um a lot of this is tbd because it's a lot of it's driven by",
    "start": "3058559",
    "end": "3064160"
  },
  {
    "text": "uh usage patterns which we don't have yet because we haven't like released a product yet um so i have ideas actually about",
    "start": "3064160",
    "end": "3071280"
  },
  {
    "text": "how to mitigate storms and like thundering herds and that sort of thing um but none of them that i can say are like",
    "start": "3071280",
    "end": "3077599"
  },
  {
    "text": "the answer so we can hash it out maybe afterwards if you're interested in learning more",
    "start": "3077599",
    "end": "3083838"
  },
  {
    "text": "cool uh any others maybe we can do one more okay i guess we have a break after this",
    "start": "3084640",
    "end": "3091280"
  },
  {
    "text": "so yeah it's all good uh don't worry about the quantum entanglement um",
    "start": "3091280",
    "end": "3097599"
  },
  {
    "text": "physics don't worry the information doesn't break the speed of light okay um so",
    "start": "3097839",
    "end": "3104800"
  },
  {
    "text": "so you're sort of playing in this interesting space that you've moved the problem up to a serializable problem on the business",
    "start": "3105200",
    "end": "3110240"
  },
  {
    "text": "logic that sits on top of this um where where is your thinking going in",
    "start": "3110240",
    "end": "3115599"
  },
  {
    "text": "that sort of space yeah yeah i mean that's a hard question right are our application builders who use us as a",
    "start": "3115599",
    "end": "3121839"
  },
  {
    "text": "platform are they willing to like uh adapt to this model right um and uh",
    "start": "3121839",
    "end": "3129680"
  },
  {
    "text": "it's it's not clear that the answer is yes right um so there are ways to kind of like ease",
    "start": "3129680",
    "end": "3135520"
  },
  {
    "text": "them into it and i guess the best example is the thing you want to build on this by default is a key value store everyone",
    "start": "3135520",
    "end": "3141680"
  },
  {
    "text": "wants a key value store right and so the easiest way to do a key value store is an api is like set and get",
    "start": "3141680",
    "end": "3147359"
  },
  {
    "text": "and we can provide that we can provide that but unless you give a little bit more",
    "start": "3147359",
    "end": "3152640"
  },
  {
    "text": "information the set function is going to have to make some simplifying assumptions if two people in japan",
    "start": "3152640",
    "end": "3158400"
  },
  {
    "text": "and uh and new york set exactly the same key at exactly the same time with different values",
    "start": "3158400",
    "end": "3163520"
  },
  {
    "text": "there's not enough information in that api request to make a safe uh sort of like merge in the crdt",
    "start": "3163520",
    "end": "3170480"
  },
  {
    "text": "sense right so what we have to do is automatically attach sort of a time stamp and we set in",
    "start": "3170480",
    "end": "3176480"
  },
  {
    "text": "what's known as the last router wins register and essentially we're gonna just decide for you which one wins right",
    "start": "3176480",
    "end": "3181920"
  },
  {
    "text": "it'll be deterministic it'll be safe but from the user point of view it'll be one of them and you don't",
    "start": "3181920",
    "end": "3186960"
  },
  {
    "text": "really know which one right so that's fine for some people but for other people this isn't right",
    "start": "3186960",
    "end": "3193200"
  },
  {
    "text": "and so if you need a more powerful more deterministic and more um if you want the control of",
    "start": "3193200",
    "end": "3199040"
  },
  {
    "text": "of which one wins then you have to move up to something called a multi-value register which uses dotted vector",
    "start": "3199040",
    "end": "3204960"
  },
  {
    "text": "clocks and yeah a vector vector exactly yeah but and and this complicates the api right you have to track this",
    "start": "3204960",
    "end": "3212079"
  },
  {
    "text": "opaque thing called called a causal context and the get doesn't return one value it returns multiple values and you",
    "start": "3212079",
    "end": "3217599"
  },
  {
    "text": "have to decide which one to wins and we can provide that too but for a lot of users that's going to be like",
    "start": "3217599",
    "end": "3222880"
  },
  {
    "text": "what is all this nonsense right so you are you sort of stepping into the lan port vector clock kind of space so",
    "start": "3222880",
    "end": "3230160"
  },
  {
    "text": "the system uh yeah there's like a number of different things that we implement already one of them is the lan a vector",
    "start": "3230160",
    "end": "3235920"
  },
  {
    "text": "clock-backed uh multi-value register but the way we expose it isn't we don't use the word",
    "start": "3235920",
    "end": "3240960"
  },
  {
    "text": "like you know lamport clocks you know it's it's just like this thing you have to receive from a get call and it's kind of",
    "start": "3240960",
    "end": "3246960"
  },
  {
    "text": "like how react worked if you're familiar with react right you just have some opaque causal context that goes with it um",
    "start": "3246960",
    "end": "3252960"
  },
  {
    "text": "yeah so maybe this will be useful for some people maybe they'll need it and i think as applications become more",
    "start": "3252960",
    "end": "3258079"
  },
  {
    "text": "sophisticated more and more people will realize this is necessary but at the moment many people don't i",
    "start": "3258079",
    "end": "3264079"
  },
  {
    "text": "don't think so we have to ease them into it is my kind of like approach start with the",
    "start": "3264079",
    "end": "3269200"
  },
  {
    "text": "simple one that loses information sometimes work your way up to the more advanced one if that answers the question",
    "start": "3269200",
    "end": "3275280"
  },
  {
    "text": "important cool thank you very much for your great questions and thank you peter for the excellent talk",
    "start": "3275280",
    "end": "3286000"
  }
]