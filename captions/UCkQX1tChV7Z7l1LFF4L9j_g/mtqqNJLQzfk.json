[
  {
    "start": "0",
    "end": "200000"
  },
  {
    "text": "[Music]",
    "start": "80",
    "end": "3240"
  },
  {
    "text": "[Music]",
    "start": "5370",
    "end": "24720"
  },
  {
    "text": "hi guys um like Alexa mentioned my name is Vitali um I'm a data scien at",
    "start": "24720",
    "end": "30880"
  },
  {
    "text": "LinkedIn I work on the product data science team at Linkin currently doing",
    "start": "30880",
    "end": "36719"
  },
  {
    "text": "some stuff around also profile understanding them better and extracting",
    "start": "36719",
    "end": "42640"
  },
  {
    "text": "more data out of them and getting more data into them like it appears every",
    "start": "42640",
    "end": "48800"
  },
  {
    "text": "other company in the world were also hiring so if you guys interested feel free to connect with me on",
    "start": "48800",
    "end": "56320"
  },
  {
    "text": "LinkedIn um we will do this stock uh kind of short and uh like you can see",
    "start": "56320",
    "end": "62760"
  },
  {
    "text": "it will be no presentation just us will be writing uh some",
    "start": "62760",
    "end": "68280"
  },
  {
    "text": "uh machine learning code um what we are trying to achieve and",
    "start": "68280",
    "end": "75520"
  },
  {
    "text": "we're doing it for the first time so kind of be patient with us hopefully we",
    "start": "75520",
    "end": "80720"
  },
  {
    "text": "will won't have any glitches and everything will work but uh we're trying to do um show how kind of machine",
    "start": "80720",
    "end": "89119"
  },
  {
    "text": "learning and big data has progressed so much that now we can do kind of pretty sophisticate stuff with very small",
    "start": "89119",
    "end": "97280"
  },
  {
    "text": "amount of codes so I will kind of in order to show show that I will do it online with you um I won't be using the",
    "start": "97280",
    "end": "105040"
  },
  {
    "text": "repple even though that's kind of one of the neatest features uh about scal the",
    "start": "105040",
    "end": "110439"
  },
  {
    "text": "problem is at least for scalding since you write your job and only when you",
    "start": "110439",
    "end": "116200"
  },
  {
    "text": "actually write the last line which is the right it's all kind of um",
    "start": "116200",
    "end": "121520"
  },
  {
    "text": "submitted and gets analyzed and optimized and stuff like that so it doesn't really work uh well with in a",
    "start": "121520",
    "end": "129360"
  },
  {
    "text": "rle mode as of now uh but still um you will be able to",
    "start": "129360",
    "end": "135040"
  },
  {
    "text": "see some neat stuff hopefully so I will start with U again basic stuff that we",
    "start": "135040",
    "end": "144360"
  },
  {
    "text": "and Yan mentioned it as data scientists do it's not just machine learning algorithm it's mostly about processing",
    "start": "144360",
    "end": "151080"
  },
  {
    "text": "data and as we all know with navad dup you know there are two different things",
    "start": "151080",
    "end": "157519"
  },
  {
    "text": "we do we we either map our data from one form uh to another transform but that is",
    "start": "157519",
    "end": "164920"
  },
  {
    "text": "actually not the most interesting part of the process because we do it kind of",
    "start": "164920",
    "end": "170680"
  },
  {
    "text": "you know we just it's transformation and it's pretty easy to do the what I learned the actually more interesting",
    "start": "170680",
    "end": "177400"
  },
  {
    "text": "stuff is how can we optimize what we do on the reduce stage where we get some",
    "start": "177400",
    "end": "183040"
  },
  {
    "text": "large amount of data and we need to reduce it to to one thing and then um",
    "start": "183040",
    "end": "188959"
  },
  {
    "text": "the working example for me during this talk will be uh just Wikipedia so just",
    "start": "188959",
    "end": "195239"
  },
  {
    "text": "to show you I have here so let's see more so I have this uh articles txt that",
    "start": "195239",
    "end": "203400"
  },
  {
    "start": "200000",
    "end": "235000"
  },
  {
    "text": "you can see is just for some reason the first thing is an anarchism and well",
    "start": "203400",
    "end": "210080"
  },
  {
    "text": "just text and it will be just a lot of uh kind of topples for the first one and",
    "start": "210080",
    "end": "218280"
  },
  {
    "text": "the first element of the topple is the article name and everything else is just",
    "start": "218280",
    "end": "223840"
  },
  {
    "text": "text so we use kind of some parsing Library it I don't know how well it Parts it but it it it will be fine for",
    "start": "223840",
    "end": "231760"
  },
  {
    "text": "our examples today um the other thing is I actually",
    "start": "231760",
    "end": "236799"
  },
  {
    "start": "235000",
    "end": "377000"
  },
  {
    "text": "prefer uh to work with uh object objects and classes uh but I will be working",
    "start": "236799",
    "end": "242599"
  },
  {
    "text": "mostly with Tel since I'll be working in local mode here without a cluster what's one thing about great about cascading",
    "start": "242599",
    "end": "249720"
  },
  {
    "text": "and scaling that is based on that it has a very good um local mode that you can",
    "start": "249720",
    "end": "255599"
  },
  {
    "text": "basically write your code run it locally and just sub with no modifications whatsoever to the code you can submit it",
    "start": "255599",
    "end": "261639"
  },
  {
    "text": "to the cluster and it will work um as well there but there is this one thing",
    "start": "261639",
    "end": "268360"
  },
  {
    "text": "uh that also Yan mentioned on PR stock increases here that is worked on the a stuff and unfortunately I realized just",
    "start": "268360",
    "end": "275840"
  },
  {
    "text": "today that AO also works now on local mode so we'll try it some other time but",
    "start": "275840",
    "end": "283400"
  },
  {
    "text": "as of now we'll work on top and the first thing you know let's start with um",
    "start": "283400",
    "end": "288639"
  },
  {
    "text": "something simple and it's a a basic worry that we we do sometime we want to get the top articles or the top uh um",
    "start": "288639",
    "end": "297800"
  },
  {
    "text": "elements in our data set for which Wikipedia you know a simple uh top thing can",
    "start": "297800",
    "end": "304360"
  },
  {
    "text": "be let's get the longest articles in our data set so let's just start writing the",
    "start": "304360",
    "end": "310759"
  },
  {
    "text": "code and top articles okay so",
    "start": "310759",
    "end": "318120"
  },
  {
    "text": "um well articles I think I have it so um",
    "start": "318120",
    "end": "323880"
  },
  {
    "text": "those of you who don't know um Cas sking it works with um there is a pipe and",
    "start": "323880",
    "end": "330400"
  },
  {
    "text": "there is also something called type pipe so um I prefer to work with type pipes um",
    "start": "330400",
    "end": "339360"
  },
  {
    "text": "it kind of look makes the code look cleaner I think and also I think one of",
    "start": "339360",
    "end": "346160"
  },
  {
    "text": "the great thing what kind of made me switch to Scala is the um the fact that it is strong type so kind of avoiding",
    "start": "346160",
    "end": "353479"
  },
  {
    "text": "using it will be just kind of a shame so we're basically getting it and it's can",
    "start": "353479",
    "end": "360360"
  },
  {
    "text": "here they have type tsv format and here we Define the type which is in my case",
    "start": "360360",
    "end": "365520"
  },
  {
    "text": "string and string and we get it from in my case and hopefully you can see that",
    "start": "365520",
    "end": "372599"
  },
  {
    "text": "Source main data articles. txt okay so now we have our",
    "start": "372599",
    "end": "379639"
  },
  {
    "start": "377000",
    "end": "486000"
  },
  {
    "text": "articles and like I said we want to find um the",
    "start": "379639",
    "end": "387199"
  },
  {
    "text": "longest the longest article uh on on Wikipedia so kind of there are many many",
    "start": "387199",
    "end": "395800"
  },
  {
    "text": "ways to do that um for example and again let's maybe complete the example of it",
    "start": "395800",
    "end": "401759"
  },
  {
    "text": "to show how basic War count in scalding Wars so if we want the war counts",
    "start": "401759",
    "end": "409800"
  },
  {
    "text": "and it will be articles do group by and it's kind of",
    "start": "409800",
    "end": "417520"
  },
  {
    "text": "very much similar to uh the scal we uh we want to group by uh the second and",
    "start": "417520",
    "end": "424400"
  },
  {
    "text": "we we kind of have the uh we have now a string but the string represents uh",
    "start": "424400",
    "end": "430919"
  },
  {
    "text": "represents uh the list so we we need to kind of um there is a map value that",
    "start": "430919",
    "end": "437720"
  },
  {
    "text": "takes every element and transform it to something else so we have the long string and we can just split",
    "start": "437720",
    "end": "443960"
  },
  {
    "text": "it so sorry it's let's take the second one and let's just split it according to",
    "start": "443960",
    "end": "452520"
  },
  {
    "text": "some re reix and now that",
    "start": "452520",
    "end": "458000"
  },
  {
    "text": "um let's see what we got here",
    "start": "458000",
    "end": "464560"
  },
  {
    "text": "um as you can see it's basically string an array of string and now we can also",
    "start": "465080",
    "end": "470800"
  },
  {
    "text": "if we do length or size on the string basically this is how we get uh the",
    "start": "470800",
    "end": "479560"
  },
  {
    "text": "because uh war war count um in SC in",
    "start": "479560",
    "end": "486080"
  },
  {
    "start": "486000",
    "end": "538000"
  },
  {
    "text": "scalding but like I said that's not um you know that's pretty basic stuff let's",
    "start": "486080",
    "end": "492159"
  },
  {
    "text": "try to get uh the top uh the top article any ideas about how what should I write",
    "start": "492159",
    "end": "498800"
  },
  {
    "text": "in order to get the the top articles by",
    "start": "498800",
    "end": "505199"
  },
  {
    "text": "length anyone okay okay Chris do you",
    "start": "505199",
    "end": "513198"
  },
  {
    "text": "know well so we can for one example we can take this war count and we can just",
    "start": "515159",
    "end": "522200"
  },
  {
    "text": "um order it um so it doesn't have or Buy in order to do or buy un scalding um we",
    "start": "522200",
    "end": "531640"
  },
  {
    "text": "can just do um f there is sorry has values it gives",
    "start": "531640",
    "end": "538120"
  },
  {
    "start": "538000",
    "end": "816000"
  },
  {
    "text": "me if we two type pipe it gives me back type pipe maybe I should write it in",
    "start": "538120",
    "end": "543240"
  },
  {
    "text": "this um scolar form which is",
    "start": "543240",
    "end": "549519"
  },
  {
    "text": "um kind of a two type pipe I get my type pip back so and here we can Group by it",
    "start": "549519",
    "end": "557000"
  },
  {
    "text": "again but there is a group all which basically groups on a unit so I get um",
    "start": "557000",
    "end": "565240"
  },
  {
    "text": "everything kind of group all what it does it sends the iner data from all all",
    "start": "565240",
    "end": "570440"
  },
  {
    "text": "the mappers um to a single reducer and that's very handy for sorting so here I",
    "start": "570440",
    "end": "578839"
  },
  {
    "text": "can do sore by and now if I sort by the second element and again and take the",
    "start": "578839",
    "end": "585519"
  },
  {
    "text": "top X then um kind of gives me what I",
    "start": "585519",
    "end": "591120"
  },
  {
    "text": "want um but it's kind of not the um not the cleanest way uh to do it because um",
    "start": "591120",
    "end": "600040"
  },
  {
    "text": "I think there um and there must be some other way and this other way is it call",
    "start": "600040",
    "end": "606839"
  },
  {
    "text": "involves something that is really cool about uh scalding and one of the things",
    "start": "606839",
    "end": "612720"
  },
  {
    "text": "I like kind of most about it is it um it's called aggregators they have",
    "start": "612720",
    "end": "619839"
  },
  {
    "text": "this um I don't know if we call it kind of dat design pattern but it's basically",
    "start": "619839",
    "end": "627040"
  },
  {
    "text": "implementing custom reducer in just three steps STS so let's look at um how",
    "start": "627040",
    "end": "632160"
  },
  {
    "text": "an aggregator looks like so",
    "start": "632160",
    "end": "638079"
  },
  {
    "text": "agregator no not this one aggregator is part for the algebra so one word about",
    "start": "638720",
    "end": "644560"
  },
  {
    "text": "algebra is something that is used a lot with um scalding but it's",
    "start": "644560",
    "end": "649720"
  },
  {
    "text": "actually not part um you can use it without scalding as",
    "start": "649720",
    "end": "655720"
  },
  {
    "text": "well it's just a library to do some kind of BAS basic algebra stuff and since",
    "start": "655720",
    "end": "660959"
  },
  {
    "text": "it's developed by Twitter then it has the word bird in it um and it it's a trait where you only",
    "start": "660959",
    "end": "667519"
  },
  {
    "text": "need to Define three things is the prepare prepare is again if you thinking",
    "start": "667519",
    "end": "672560"
  },
  {
    "text": "about it in terms of map ruce is like the first mapping on your data to prepare it for the reduce stage then a",
    "start": "672560",
    "end": "679519"
  },
  {
    "text": "reduce that gets a left element a right element and you combine it and uh",
    "start": "679519",
    "end": "686240"
  },
  {
    "text": "present is kind of a map after another map after the reduce it can be just",
    "start": "686240",
    "end": "691560"
  },
  {
    "text": "Identity or um it can be if you need to form your data from B to C to you want",
    "start": "691560",
    "end": "697519"
  },
  {
    "text": "to Output it in some other form then you also Implement uh the present so that's",
    "start": "697519",
    "end": "702600"
  },
  {
    "text": "the basic trait but as we will see it's actually a pretty powerful trade",
    "start": "702600",
    "end": "709519"
  },
  {
    "text": "so let's try to kind of and define a class here and top and",
    "start": "709519",
    "end": "720399"
  },
  {
    "text": "elements that gets Max which is will be an INT and it will",
    "start": "720399",
    "end": "726920"
  },
  {
    "text": "extend and aggregator so aggregator need to get free uh free types so first of",
    "start": "726920",
    "end": "734320"
  },
  {
    "text": "all what is the data that we will uh we will do it on so we will run on all all",
    "start": "734320",
    "end": "740959"
  },
  {
    "text": "the articles that we have and we will basically what uh our starting point will be will be a string",
    "start": "740959",
    "end": "750480"
  },
  {
    "text": "so we we want a string and but um the string of the text of uh sorry the",
    "start": "750519",
    "end": "758519"
  },
  {
    "text": "string of text the what we want to get back and what we want to reduce is a",
    "start": "758519",
    "end": "765880"
  },
  {
    "text": "list uh a list of all the elements um let's",
    "start": "765880",
    "end": "772399"
  },
  {
    "text": "say want a list of the type uh top counts so we will do it on let's see we",
    "start": "772399",
    "end": "781920"
  },
  {
    "text": "can do it here um yes let's go do it from here",
    "start": "781920",
    "end": "788160"
  },
  {
    "text": "because here we already uh kind of have the counts and um so let's start with ins",
    "start": "788160",
    "end": "796360"
  },
  {
    "text": "and group all what we have from group all sorry",
    "start": "796360",
    "end": "802560"
  },
  {
    "text": "about that I'm just need the type string and in yes string and",
    "start": "802560",
    "end": "809880"
  },
  {
    "text": "int okay and we want to return a list of the top string and inss and that's actually",
    "start": "809880",
    "end": "818040"
  },
  {
    "text": "enough so um I will list the third one as uh basically the same because in",
    "start": "818040",
    "end": "826320"
  },
  {
    "text": "my I'm not interested in getting getting this uh data in some other form I'm",
    "start": "826320",
    "end": "831399"
  },
  {
    "text": "actually pretty satisfied with getting it as a the top list so like I said I",
    "start": "831399",
    "end": "837320"
  },
  {
    "text": "need to implement uh free function the first one will be prepare so I somehow",
    "start": "837320",
    "end": "843480"
  },
  {
    "text": "need to take this input and um one element and to uh to transfer to",
    "start": "843480",
    "end": "851240"
  },
  {
    "text": "transform it to something that I can reduce so in that case it's just easy it's list of input that's is how I",
    "start": "851240",
    "end": "859800"
  },
  {
    "text": "prepare my data in order to be reduced the second one is the reduce itself um so here again uh what we need",
    "start": "859800",
    "end": "868480"
  },
  {
    "text": "to do this is the signature of the function as you can see it takes left it takes right",
    "start": "868480",
    "end": "874480"
  },
  {
    "text": "and we we want to uh to get the top list",
    "start": "874480",
    "end": "880560"
  },
  {
    "text": "according by this count so let's kind of Define an implicit ordering implicit",
    "start": "880560",
    "end": "887519"
  },
  {
    "text": "well order on",
    "start": "887519",
    "end": "893079"
  },
  {
    "text": "equals ordering do by",
    "start": "893079",
    "end": "899800"
  },
  {
    "text": "H which is this oring will be from what we have here string and int to",
    "start": "900519",
    "end": "906040"
  },
  {
    "text": "an INT right and we want to order it by uh by the second",
    "start": "906040",
    "end": "913120"
  },
  {
    "text": "element by the second element and we because we are interested in tab we want",
    "start": "913120",
    "end": "918680"
  },
  {
    "text": "uh want the ordering reversed so again we um we kind of uh Define the ordering",
    "start": "918680",
    "end": "926639"
  },
  {
    "text": "here so again now they hey remember I I have two lists and I need to get back",
    "start": "926639",
    "end": "934319"
  },
  {
    "text": "one list that will have the top a max if remember this class has um max elements",
    "start": "934319",
    "end": "941560"
  },
  {
    "text": "in it because I'm interested in the top n which Max is this n",
    "start": "941560",
    "end": "947040"
  },
  {
    "text": "um kind of one way to do it is just we can concatenate both strings we",
    "start": "947040",
    "end": "955959"
  },
  {
    "text": "can sort them now with Sor and since we have an implicit oring that will work",
    "start": "955959",
    "end": "962440"
  },
  {
    "text": "and we can just take the top Max element out of",
    "start": "962440",
    "end": "969000"
  },
  {
    "text": "it and um the last function will be the present which is in this case since I'm",
    "start": "969000",
    "end": "976440"
  },
  {
    "text": "interested in getting the same exact data it will be just um reduction which is the the parameter",
    "start": "976440",
    "end": "984040"
  },
  {
    "text": "to present so this is my um aggregator",
    "start": "984040",
    "end": "989639"
  },
  {
    "text": "pattern I prepare my data I somehow reduce it which is here that were all",
    "start": "989639",
    "end": "996800"
  },
  {
    "text": "the C went and present is just an identity function so now after I've done",
    "start": "996800",
    "end": "1001880"
  },
  {
    "text": "the group all and I get all my um war war counts",
    "start": "1001880",
    "end": "1007160"
  },
  {
    "text": "data um kind of single L I can just do the Aggregate and what aggregate expects",
    "start": "1007160",
    "end": "1013440"
  },
  {
    "text": "expects to get is an aggregator and we we have one one here so let's say top",
    "start": "1013440",
    "end": "1021720"
  },
  {
    "text": "and elements let's say in the top 100 Wikipedia articles and you can see here",
    "start": "1021720",
    "end": "1028520"
  },
  {
    "text": "that what I get as return is a a list of string of int which is exactly what I",
    "start": "1028520",
    "end": "1037760"
  },
  {
    "text": "wanted and now we can um sorry get get the values out of it",
    "start": "1037760",
    "end": "1046880"
  },
  {
    "text": "sorry do two pipe um values out of it and kind of to make",
    "start": "1046880",
    "end": "1053440"
  },
  {
    "text": "it um more to get not the list but every",
    "start": "1053440",
    "end": "1060120"
  },
  {
    "text": "element in a single row it's just a an identity flat map so the identity flat",
    "start": "1060120",
    "end": "1068760"
  },
  {
    "text": "map basically takes the list and break it down to a typ pipe of so up up to",
    "start": "1068760",
    "end": "1075600"
  },
  {
    "text": "here we have um typed pipe of something that looks basically",
    "start": "1075600",
    "end": "1081520"
  },
  {
    "text": "like that string and int and since type pipe is you can look",
    "start": "1081520",
    "end": "1087840"
  },
  {
    "text": "at it as every element is a will eventually be a line in your file",
    "start": "1087840",
    "end": "1095039"
  },
  {
    "text": "then yes scroll up",
    "start": "1095159",
    "end": "1100919"
  },
  {
    "text": "what oh oh sorry sorry yes okay yeah that I should look here and",
    "start": "1101799",
    "end": "1108840"
  },
  {
    "text": "what flap map on the list is how well you're kind of all know will just return",
    "start": "1108840",
    "end": "1116240"
  },
  {
    "text": "me string and an INT and now I can just write it to some",
    "start": "1116240",
    "end": "1124440"
  },
  {
    "text": "again tsv file which we'll call it the source main data longest.",
    "start": "1124440",
    "end": "1134840"
  },
  {
    "text": "txt okay so just let's here um just call this",
    "start": "1134840",
    "end": "1141200"
  },
  {
    "text": "function that we call to uh top articles and since I will be using",
    "start": "1141200",
    "end": "1148799"
  },
  {
    "text": "parameters and we be using some of this function no actually we can use it as",
    "start": "1148799",
    "end": "1155280"
  },
  {
    "text": "well top and sorry top",
    "start": "1155280",
    "end": "1160440"
  },
  {
    "text": "articles we can just now run it so let's see uh how it runs hopefully I didn't",
    "start": "1160440",
    "end": "1167200"
  },
  {
    "start": "1161000",
    "end": "1269000"
  },
  {
    "text": "make a lot of Mistake by by SC so the way to run uh so I'm a fan of",
    "start": "1167200",
    "end": "1175120"
  },
  {
    "text": "Maven I kind of didn't get to SBT um I",
    "start": "1175120",
    "end": "1180159"
  },
  {
    "text": "know it's like the nuon block but I've been using Maven for a while and still like Maven and Maven has a very nice",
    "start": "1180159",
    "end": "1186520"
  },
  {
    "text": "Scala plugin that just has scalar run and and Chris will show you its console",
    "start": "1186520",
    "end": "1195320"
  },
  {
    "text": "function and this is how you kind of ADD arguments to your code and well so I",
    "start": "1195320",
    "end": "1202559"
  },
  {
    "text": "kind of like it so now we just run",
    "start": "1202559",
    "end": "1209640"
  },
  {
    "text": "it and now it runs everything in a local",
    "start": "1209640",
    "end": "1216320"
  },
  {
    "text": "mode so let's see Now launcher agregate by",
    "start": "1217880",
    "end": "1224600"
  },
  {
    "text": "okay it's ended which is with successfully so",
    "start": "1224600",
    "end": "1231240"
  },
  {
    "text": "that's good let's see uh what we got here so I believe I kind of call it",
    "start": "1231240",
    "end": "1238360"
  },
  {
    "text": "longest and as you can see it's um I'm using only kind of a sample ass sample",
    "start": "1238360",
    "end": "1245000"
  },
  {
    "text": "of the Wikipedia data in order to um make it run fast enough and not",
    "start": "1245000",
    "end": "1251799"
  },
  {
    "text": "just wait for stuff but as you can see the symol kind of starts with uh the letter a and we got uh what we wanted",
    "start": "1251799",
    "end": "1258799"
  },
  {
    "text": "they kind of all sorted by their length and this is the top um top 100 articles",
    "start": "1258799",
    "end": "1265320"
  },
  {
    "text": "by length um in my sample so that's great but it's kind",
    "start": "1265320",
    "end": "1272520"
  },
  {
    "start": "1269000",
    "end": "1749000"
  },
  {
    "text": "of uh so selecting top elements is a very common pattern and even though you",
    "start": "1272520",
    "end": "1280000"
  },
  {
    "text": "know I didn't write um too much code there is still uh some cod involved um",
    "start": "1280000",
    "end": "1287880"
  },
  {
    "text": "in here and we surely we can make it we can do it better so again just to",
    "start": "1287880",
    "end": "1294640"
  },
  {
    "text": "remind you um let's see sorry just remind you this part is just getting the war counts and this part is aggregating",
    "start": "1294640",
    "end": "1303679"
  },
  {
    "text": "aggregating over uh over the war cons and getting the top element and this is",
    "start": "1303679",
    "end": "1309400"
  },
  {
    "text": "uh kind of uh what I need to write the logic to get the top element so actually Twitter the Twitter guys was very uh",
    "start": "1309400",
    "end": "1317880"
  },
  {
    "text": "nice and they realize that it's also a very common pattern and one thing I",
    "start": "1317880",
    "end": "1323559"
  },
  {
    "text": "didn't mention that uh also this reduce function I wrote is actually not that",
    "start": "1323559",
    "end": "1329000"
  },
  {
    "text": "um not that efficient I'm taking all the lists I'm actually summing them sorting",
    "start": "1329000",
    "end": "1334159"
  },
  {
    "text": "them all time again so for example the first time I sry I the second time it will heat reduce the the left element",
    "start": "1334159",
    "end": "1341240"
  },
  {
    "text": "will already be Sor so there is no way a need to sort them again so one thing I could do is just merge them that is one",
    "start": "1341240",
    "end": "1347960"
  },
  {
    "text": "thing but twiter is actually a a better way to do it and it's using a priority",
    "start": "1347960",
    "end": "1353039"
  },
  {
    "text": "que so what Twitter did they actually implemented um priority Q aggregator so",
    "start": "1353039",
    "end": "1360960"
  },
  {
    "text": "let's see new priority Q to list aggregator well",
    "start": "1360960",
    "end": "1367960"
  },
  {
    "text": "that's a mouthful yes and not",
    "start": "1367960",
    "end": "1373559"
  },
  {
    "text": "actually string int and that's the parameter if you can see it also gets",
    "start": "1373559",
    "end": "1379960"
  },
  {
    "text": "Max so it gets 100 and it's oh um let's",
    "start": "1379960",
    "end": "1386480"
  },
  {
    "text": "kind of look at it once one second so this is how priority Q aggregate looks",
    "start": "1386480",
    "end": "1392400"
  },
  {
    "text": "like it gets a Max and gets an implicit ordering so again one way is to Define",
    "start": "1392400",
    "end": "1397440"
  },
  {
    "text": "this implicit ordering if you already sorting ordering something that has an implicit order um you can just use it um",
    "start": "1397440",
    "end": "1406080"
  },
  {
    "text": "what one thing to notice here is itend some",
    "start": "1406080",
    "end": "1411480"
  },
  {
    "text": "prq aggregator which and implements only the function present which present basically takes the priority queue and",
    "start": "1411480",
    "end": "1417600"
  },
  {
    "text": "turns it into list because in most cases we're interested to get back the list of the top elements but let's look at this",
    "start": "1417600",
    "end": "1425760"
  },
  {
    "text": "the magic that happens in the priority Q aggregator is just here and actually priority Q aggregator extends something",
    "start": "1425760",
    "end": "1432520"
  },
  {
    "text": "El that's called a mono monoid aggregator so monoid is probably the",
    "start": "1432520",
    "end": "1439400"
  },
  {
    "text": "most useful element in kind of data science it's all we do can probably",
    "start": "1439400",
    "end": "1447360"
  },
  {
    "text": "explain in monoids and if you get the concept of monoids it's a very very simple trait it just has zero and it has",
    "start": "1447360",
    "end": "1454080"
  },
  {
    "text": "a plus and uh one of the creators of uh scalding from Twitter this guy his name",
    "start": "1454080",
    "end": "1461600"
  },
  {
    "text": "is Oscar boyin so he likes to walk around Twitter and ask people uh what",
    "start": "1461600",
    "end": "1467039"
  },
  {
    "text": "they do and explain them how it can be implemented using a monoid because and at least up until now he",
    "start": "1467039",
    "end": "1475440"
  },
  {
    "text": "hasn't failed in his task he could explain everything how can be so really if there is like one thing this whole",
    "start": "1475440",
    "end": "1482080"
  },
  {
    "text": "category theory has this you know this explosive funter monads which nice but",
    "start": "1482080",
    "end": "1488440"
  },
  {
    "text": "at least in my practice they're not extremely useful but mono is extremely useful and basically what I did here now",
    "start": "1488440",
    "end": "1496240"
  },
  {
    "text": "with the prepare and um reduce for those of you who kind of",
    "start": "1496240",
    "end": "1501600"
  },
  {
    "text": "know this is basically monoid so instead of instead",
    "start": "1501600",
    "end": "1506760"
  },
  {
    "text": "of doing a prepare um prepare and reduce you can just use am monoid if you have",
    "start": "1506760",
    "end": "1512240"
  },
  {
    "text": "one and you can Define one of your own and just give it a a monoid and then the",
    "start": "1512240",
    "end": "1517320"
  },
  {
    "text": "prepare is basically that's what they do here they're using a priority Q monoid",
    "start": "1517320",
    "end": "1522640"
  },
  {
    "text": "which is again kind of you can be it's very simple you kind of build it and",
    "start": "1522640",
    "end": "1528960"
  },
  {
    "text": "do stuff with it but and well it has the zero which is the minimum priority q and",
    "start": "1528960",
    "end": "1534760"
  },
  {
    "text": "has a plus which is pretty basic um",
    "start": "1534760",
    "end": "1541080"
  },
  {
    "text": "so the same code will run and now I don't need uh all this uh all this stuff",
    "start": "1541080",
    "end": "1546960"
  },
  {
    "text": "and actually it will run uh beautifully also with this PR Q to this agregator",
    "start": "1546960",
    "end": "1552399"
  },
  {
    "text": "and all the code will work the same and instead of just showing you the same results uh let me show you some other a",
    "start": "1552399",
    "end": "1558520"
  },
  {
    "text": "cool aggregators um sculling has so one they have is an averager is um basically",
    "start": "1558520",
    "end": "1566360"
  },
  {
    "text": "the way one of the ways to compute um um it's also mono one of the best the way",
    "start": "1566360",
    "end": "1572880"
  },
  {
    "text": "the way to compute an average um is to kind of sum and then count you know you",
    "start": "1572880",
    "end": "1578240"
  },
  {
    "text": "can do it in one pass you can do it in two passes but their averager is actually it's a streaming mean so it",
    "start": "1578240",
    "end": "1584640"
  },
  {
    "text": "just does one pass and it doesn't hold two values during the pass just hold a",
    "start": "1584640",
    "end": "1590279"
  },
  {
    "text": "single one and you get an average which is again extremely useful um in a lot of",
    "start": "1590279",
    "end": "1595880"
  },
  {
    "text": "cases if you need more than um than just the average there is",
    "start": "1595880",
    "end": "1602000"
  },
  {
    "text": "the moments uh aggregate which is not a monoid it's a group but for all things",
    "start": "1602000",
    "end": "1607399"
  },
  {
    "text": "it can be a monoid and here you can see that um where is or the moments sorry",
    "start": "1607399",
    "end": "1614240"
  },
  {
    "text": "here so again you just fire the moment h aggreg Ator and you get a tople of five",
    "start": "1614240",
    "end": "1621399"
  },
  {
    "text": "elements actually it will be six that gets you the count the mean the variance the standard deviation the skus and the",
    "start": "1621399",
    "end": "1626559"
  },
  {
    "text": "cortosis uh of your data set again extremely useful one line just switch",
    "start": "1626559",
    "end": "1631960"
  },
  {
    "text": "what I wrote there with the my aggregator with the with the uh moments",
    "start": "1631960",
    "end": "1637600"
  },
  {
    "text": "aggregator and you will uh you will get all this uh data at once other one um",
    "start": "1637600",
    "end": "1645640"
  },
  {
    "text": "very cool aggregator hyper log log so for you who don't know and you can see",
    "start": "1645640",
    "end": "1651039"
  },
  {
    "text": "here there's also hyper log log monoid hyper log log um also can be defined as",
    "start": "1651039",
    "end": "1657919"
  },
  {
    "text": "a monoid and for those those of you who haven't heard about Hy log log it's a way to probability probabilistically to",
    "start": "1657919",
    "end": "1665440"
  },
  {
    "text": "estimate a cardinality of a data set so if you have a huge data set and you want to count the",
    "start": "1665440",
    "end": "1672600"
  },
  {
    "text": "number of unique elements so actually like soaring them and doing it unique is a very very EXP expensive computation",
    "start": "1672600",
    "end": "1679240"
  },
  {
    "text": "and most of the time we don't we are not interested in the exact exact number of the units we have but with just 12 bits",
    "start": "1679240",
    "end": "1687320"
  },
  {
    "text": "of data um you can with Hyper log log you can get up to a 1% error in your",
    "start": "1687320",
    "end": "1694279"
  },
  {
    "text": "approximation which is extremely fast extremely useful and again it's a monoid",
    "start": "1694279",
    "end": "1699760"
  },
  {
    "text": "just plug it in um into your aggregate function which I've uh again written",
    "start": "1699760",
    "end": "1707200"
  },
  {
    "text": "here inside of the per very close hyper log log and it works and you so any",
    "start": "1707200",
    "end": "1713399"
  },
  {
    "text": "questions up until now and then I will crease yes is there a link in article",
    "start": "1713399",
    "end": "1718440"
  },
  {
    "text": "doing data science of monoids no but it's probably um a great idea for my",
    "start": "1718440",
    "end": "1726159"
  },
  {
    "text": "next blog post so maybe I'll write it and share the link uh with you uh I forgot to mention all the code will be",
    "start": "1726159",
    "end": "1732799"
  },
  {
    "text": "on GitHub later we'll also post it uh uh post the link um on the Meetup",
    "start": "1732799",
    "end": "1740840"
  },
  {
    "text": "page something else okay well then let's see",
    "start": "1740840",
    "end": "1746399"
  },
  {
    "text": "what chis will show us here I'm probably just going to burn through some stuff really",
    "start": "1746399",
    "end": "1751679"
  },
  {
    "start": "1749000",
    "end": "1779000"
  },
  {
    "text": "fast because we're running a little bit late um and I I'm going to kind of cheat a little bit because I type most of this",
    "start": "1751679",
    "end": "1758120"
  },
  {
    "text": "out and uh we'll we'll try it in the rippel though um so I I want to show you real fast um one of my absolutely",
    "start": "1758120",
    "end": "1765000"
  },
  {
    "text": "favorite tools if you use spt you probably don't care um if you're like Vali and I and you're",
    "start": "1765000",
    "end": "1770960"
  },
  {
    "text": "still stuck with Maven for reasons uh maybe beyond your control uh there's",
    "start": "1770960",
    "end": "1776159"
  },
  {
    "text": "this really nice Maven Scola console and the Fantastic thing about Maven Scola console is you have access",
    "start": "1776159",
    "end": "1784080"
  },
  {
    "start": "1779000",
    "end": "1909000"
  },
  {
    "text": "to and you can barely see that wow let me um basically you have access now to",
    "start": "1784080",
    "end": "1791679"
  },
  {
    "text": "to all the libraries that you depend on in your code um so I can do things like",
    "start": "1791679",
    "end": "1799880"
  },
  {
    "text": "uh you know I can import some algebra operators",
    "start": "1801799",
    "end": "1808000"
  },
  {
    "text": "and then we can wow you probably still can't see this sorry uh let's see is",
    "start": "1808000",
    "end": "1813200"
  },
  {
    "text": "there I know hang on let me actually just make the sky a little smaller and then I can shove him",
    "start": "1813200",
    "end": "1821320"
  },
  {
    "text": "up in the page",
    "start": "1821320",
    "end": "1824720"
  },
  {
    "text": "okay can you guys actually see that now does it need to go up anymore are we okay okay um so you can do pretty cool",
    "start": "1834240",
    "end": "1841240"
  },
  {
    "text": "stuff though actually uh so like vital said um algebra kind of came out of",
    "start": "1841240",
    "end": "1846559"
  },
  {
    "text": "scalding but it it was so useful that they split it apart um so you can do kind of amazing things with with algebra",
    "start": "1846559",
    "end": "1853000"
  },
  {
    "text": "by just importing operators",
    "start": "1853000",
    "end": "1856880"
  },
  {
    "text": "um and it turns out there's probably a monoid for just about everything you want um and it will get come into scope",
    "start": "1863240",
    "end": "1869360"
  },
  {
    "text": "automatically when you import operators um so I highly highly highly recommend that you try this out uh it's really",
    "start": "1869360",
    "end": "1876080"
  },
  {
    "text": "cool you just make anbt project or Maven project uh Maven Scola console or just runt console and you'll have access to",
    "start": "1876080",
    "end": "1882639"
  },
  {
    "text": "all this great stuff to play with um in fact the console so if I could it sort of digress for a second the repple is is",
    "start": "1882639",
    "end": "1889080"
  },
  {
    "text": "by far my favorite thing uh to sort of try stuff out with um uh so you know you",
    "start": "1889080",
    "end": "1896039"
  },
  {
    "text": "can there's something you want to learn some new API you want to play with pop it open in the repple Poke at it you",
    "start": "1896039",
    "end": "1901440"
  },
  {
    "text": "know see what the the edge cases are uh see how it works that sort of stuff um and in fact pretty much everything",
    "start": "1901440",
    "end": "1907159"
  },
  {
    "text": "you're going to see today I did over the course of playing with the repple okay so um so one really really important",
    "start": "1907159",
    "end": "1913240"
  },
  {
    "start": "1909000",
    "end": "1979000"
  },
  {
    "text": "question that I need to ask and get out of the way before uh I go on because it affects the rest of my talk um do you",
    "start": "1913240",
    "end": "1919919"
  },
  {
    "text": "pronounce this mahoot or mahout does anybody know does anybody have an opinion like",
    "start": "1919919",
    "end": "1927159"
  },
  {
    "text": "GIF GIF mahoot M suppos toout really okay so I'll say I'm",
    "start": "1927159",
    "end": "1934159"
  },
  {
    "text": "probably going to slip to mahoot a bunch of times but um I'll try with mahout okay so let me just grab some stuff out",
    "start": "1934159",
    "end": "1940039"
  },
  {
    "text": "of here um get it out of the way so we can whoops so what I'm going to show you is",
    "start": "1940039",
    "end": "1947200"
  },
  {
    "text": "a quick little example of uh essentially wrapping nasty Mout things with uh some",
    "start": "1947200",
    "end": "1952480"
  },
  {
    "text": "nice Scola stuff and in fact uh the original version I did this in was in scalding um but it's a little harder to",
    "start": "1952480",
    "end": "1958760"
  },
  {
    "text": "run scalding in the repple at the moment uh so I'm just going to do it with straight up Scola but you can see almost",
    "start": "1958760",
    "end": "1964679"
  },
  {
    "text": "uh line by line how it translates to scalding um so I'm I'm using the same data set that Vitali had so I just made",
    "start": "1964679",
    "end": "1970799"
  },
  {
    "text": "up this nice little case class to play with um so let's get that guy in there too okay so here's the kind of where it",
    "start": "1970799",
    "end": "1977399"
  },
  {
    "text": "gets excited exting um well it's not that exciting yet so basically I'm just",
    "start": "1977399",
    "end": "1982559"
  },
  {
    "start": "1979000",
    "end": "2077000"
  },
  {
    "text": "going to read up these articles they're in text format um you guys have all seen this before and I'm just going to split",
    "start": "1982559",
    "end": "1988600"
  },
  {
    "text": "each one out and make an article out of it so we've got a title and a body nothing too fancy we haven't done any really fancy text processing or anything",
    "start": "1988600",
    "end": "1995399"
  },
  {
    "text": "um if if I was going to do this for real I would probably probably go into one of the NLP",
    "start": "1995399",
    "end": "2001279"
  },
  {
    "text": "toolkits or um or use Lucine one of the tokenizers or something like that it would you know you get some nice",
    "start": "2001279",
    "end": "2007240"
  },
  {
    "text": "stemming and spell cheing and and all this fancy stuff that Yan was talking about before but for our purposes this",
    "start": "2007240",
    "end": "2012399"
  },
  {
    "text": "will work so let me paste this guy let's make sure it runs oh dear I probably need a past don't I oh no that's right I",
    "start": "2012399",
    "end": "2019600"
  },
  {
    "text": "screwed this up to um so live coding what did I do wrong let's try",
    "start": "2019600",
    "end": "2027360"
  },
  {
    "text": "this again did I mess up my",
    "start": "2027360",
    "end": "2034760"
  },
  {
    "text": "formatting there we go Okay cool so basically we have a sequence of Articles",
    "start": "2034760",
    "end": "2039880"
  },
  {
    "text": "um you know you can look at Art zero and it it's got some stuff it's exactly what Vitalia was showing you uh it starts",
    "start": "2039880",
    "end": "2046360"
  },
  {
    "text": "with anarchism of course uh okay so no big deal we got some data so what I want",
    "start": "2046360",
    "end": "2053158"
  },
  {
    "text": "to do is cluster this data um and I'm really lazy I don't want to write my own clustering implementation uh mahout 0.8",
    "start": "2053159",
    "end": "2060760"
  },
  {
    "text": "came out like today yesterday something like that I don't think they've even announced it yet uh it was on their mailing list but the jars are pushed up",
    "start": "2060760",
    "end": "2067040"
  },
  {
    "text": "in uh Maven Central so in there they they have this very cool streaming",
    "start": "2067040",
    "end": "2072358"
  },
  {
    "text": "clustering algorithm uh so it's a single pass K means clustering and it works pretty well um unfortunately somewhere",
    "start": "2072359",
    "end": "2080118"
  },
  {
    "text": "in there they they have this notion of dense vectors and sparse vectors and some of the stuff wants to use dense",
    "start": "2080119",
    "end": "2086919"
  },
  {
    "text": "vectors so if I was going to do this myself um probably what I would do is is",
    "start": "2086919",
    "end": "2092000"
  },
  {
    "text": "take all the text and use something like murmur has to to give it an INT um unfortunately the that makes the space",
    "start": "2092000",
    "end": "2098800"
  },
  {
    "text": "of you know Max in size sparse vectors and it tries to make them into dense vectors at some point and then",
    "start": "2098800",
    "end": "2104200"
  },
  {
    "text": "everything blows up it's pretty horrible so uh instead what I did really fast",
    "start": "2104200",
    "end": "2109720"
  },
  {
    "text": "this is easy to do though and you would probably do this anyway because instead of just doing word count you would probably uh get tfidf scores or",
    "start": "2109720",
    "end": "2116320"
  },
  {
    "text": "something um but basically I'm just going to pass through all the Articles real fast so let's look at this I'm basically going to pass through the",
    "start": "2116320",
    "end": "2121960"
  },
  {
    "text": "Articles uh I'm going to grab every single word and stick it into a set so I basically split this guy up um push all",
    "start": "2121960",
    "end": "2129079"
  },
  {
    "text": "the words make them lowercase that's my uh janky normalization um put them in",
    "start": "2129079",
    "end": "2134119"
  },
  {
    "text": "this set zip it with an index so now every word's just going to have some number associated with it now it's a little nicer for me to this is the the",
    "start": "2134119",
    "end": "2141440"
  },
  {
    "text": "cheap hash function okay um so again nothing too fancy so let me let's try this guy out I",
    "start": "2141440",
    "end": "2148599"
  },
  {
    "text": "better use paste again because nasty things happened last",
    "start": "2148599",
    "end": "2154160"
  },
  {
    "text": "time okay so you know we can see uh I'm I'm curious like how many",
    "start": "2154359",
    "end": "2161000"
  },
  {
    "text": "times the occurs probably a lot yeah so the occurs a lot um so if if we use some",
    "start": "2161000",
    "end": "2167520"
  },
  {
    "text": "of vali's nice stuff we could probably make some passes take out stop wordss do fan you know nice stuff like that okay",
    "start": "2167520",
    "end": "2174000"
  },
  {
    "text": "not super necessary for now though okay so let's keep going okay",
    "start": "2174000",
    "end": "2179640"
  },
  {
    "start": "2176000",
    "end": "2292000"
  },
  {
    "text": "um unfortunately I need some sort of rapper helper function um so what I'd really like to do is basically take one",
    "start": "2179640",
    "end": "2185960"
  },
  {
    "text": "of my articles I want to get out this sort of named vectors now now we're we're in mahland um and they have these",
    "start": "2185960",
    "end": "2191800"
  },
  {
    "text": "pretty nice Random Access Sparks vectors um so this particular guy is backed by a",
    "start": "2191800",
    "end": "2197319"
  },
  {
    "text": "a really efficient uh in to double hashmap um so for us it's essentially",
    "start": "2197319",
    "end": "2202839"
  },
  {
    "text": "just a uh you know we we say basically we saw um we have a one in you know",
    "start": "2202839",
    "end": "2208280"
  },
  {
    "text": "position five and we have a a a two in position you know 600 million and three",
    "start": "2208280",
    "end": "2214359"
  },
  {
    "text": "um and for us then it it's even though this Vector lives in in dimension 600 million and 3 uh we only use two things",
    "start": "2214359",
    "end": "2222800"
  },
  {
    "text": "so sparse vectors very nice um don't reinvent the wheel use mouts so",
    "start": "2222800",
    "end": "2228400"
  },
  {
    "text": "basically I'm just looking up where that guy actually what his actual index is um using this set quick so this is where uh",
    "start": "2228400",
    "end": "2235800"
  },
  {
    "text": "this is where the sort of reppel comes in handy a lot because basically what I can do is in I can go into the",
    "start": "2235800",
    "end": "2243200"
  },
  {
    "text": "repple and do something like this okay so now I've got this vector and uh",
    "start": "2245480",
    "end": "2251240"
  },
  {
    "text": "you know so you're doing this the first time and well how the hell do you set a vector and you go well ve um what can I",
    "start": "2251240",
    "end": "2257880"
  },
  {
    "text": "do oh okay I can do a lot of stuff um so you've got set you've got set quick you",
    "start": "2257880",
    "end": "2263680"
  },
  {
    "text": "try them both turns out set quick is the one you want okay so let's just get that whole function",
    "start": "2263680",
    "end": "2271040"
  },
  {
    "text": "in so this is basically the helper that's just going to pass through and convert",
    "start": "2272560",
    "end": "2278760"
  },
  {
    "text": "our articles into mahout vectors because Mout vectors is what everything operates",
    "start": "2278760",
    "end": "2284079"
  },
  {
    "text": "on um we better have them okay any questions so far this is",
    "start": "2284079",
    "end": "2289400"
  },
  {
    "text": "all pretty standard all right so since I'm not doing this in scalding um I",
    "start": "2289400",
    "end": "2296599"
  },
  {
    "start": "2292000",
    "end": "2344000"
  },
  {
    "text": "wanted to give you a flavor of sort of how this algorithm works so actually what I'm going to do is I think articles",
    "start": "2296599",
    "end": "2303119"
  },
  {
    "text": "there's about 4500 um in in the group I have so I'm just going to chunk them if",
    "start": "2303119",
    "end": "2309079"
  },
  {
    "text": "You' never seen this function it's pretty cool grouped um so you can call it on probably like gen traversible or something uh basically it groups it into",
    "start": "2309079",
    "end": "2316680"
  },
  {
    "text": "chunks of 400 and that truncates the last one um so this is essentially me saying that my data is located in",
    "start": "2316680",
    "end": "2322520"
  },
  {
    "text": "multiple places um why don't I operate on each one separately and then I'm going to pull all the stuff together so",
    "start": "2322520",
    "end": "2327680"
  },
  {
    "text": "this is the mappers if you like um so let's try this guy",
    "start": "2327680",
    "end": "2333040"
  },
  {
    "text": "out okay great um um it's actually hasn't done anything yet it's lazy okay",
    "start": "2334839",
    "end": "2341400"
  },
  {
    "text": "so that one's not so exciting okay so here's the exciting part um so this",
    "start": "2341400",
    "end": "2348319"
  },
  {
    "start": "2344000",
    "end": "2429000"
  },
  {
    "text": "streaming K means algorithm um basically has two parts to it so in the first part",
    "start": "2348319",
    "end": "2356280"
  },
  {
    "text": "pretend we have tons and tons of data say like n points where n is huge so the first thing that's going to",
    "start": "2356280",
    "end": "2362920"
  },
  {
    "text": "happen is we're basically going to draw a sketch of our data and the way we draw the sketch is we go through all the data",
    "start": "2362920",
    "end": "2369800"
  },
  {
    "text": "or each mapper the amount of data it has and it it basically grabs the first point and says hey you're a cluster or a",
    "start": "2369800",
    "end": "2377400"
  },
  {
    "text": "centroid if you like um and now it grabs the next one and it says are you close to a centroid I know about uh if you are",
    "start": "2377400",
    "end": "2385319"
  },
  {
    "text": "then you are part of that centroid or maybe you're a new centroid with a probability one over the distance that",
    "start": "2385319",
    "end": "2391040"
  },
  {
    "text": "you're actually away um if you are past some distance threshold it says you're a new centroid too um so it goes through",
    "start": "2391040",
    "end": "2398280"
  },
  {
    "text": "um the idea is that if you have end points and you have want K clusters in",
    "start": "2398280",
    "end": "2405560"
  },
  {
    "text": "the end you're going to get something like K log n uh uh sort of centroids in your sketch so these are like sloppy",
    "start": "2405560",
    "end": "2411800"
  },
  {
    "text": "clusters is what they call them um so basically it's a probabilistic uh summary of your data so let me go",
    "start": "2411800",
    "end": "2418240"
  },
  {
    "text": "through this is where the the nice wrapping comes in um so basically you need this guy he's a clusterer uh so",
    "start": "2418240",
    "end": "2425720"
  },
  {
    "text": "this is this you know nasty my package okay so so the cluster needs a Searcher",
    "start": "2425720",
    "end": "2432760"
  },
  {
    "start": "2429000",
    "end": "2502000"
  },
  {
    "text": "and it needs a distance measure and it needs an approximate size so note that this size is just sort of a suggestion",
    "start": "2432760",
    "end": "2439880"
  },
  {
    "text": "um and you'll see probably it's it's not a followed that uh that carefully um so",
    "start": "2439880",
    "end": "2447280"
  },
  {
    "text": "actually there's a whole lot of these nice um Searchers for this size of stuff and for the sort of giant vectors that",
    "start": "2447280",
    "end": "2453640"
  },
  {
    "text": "we're dealing with the brute search is actually going faster than the other ones um but so they have a they have a",
    "start": "2453640",
    "end": "2459839"
  },
  {
    "text": "locality sensitive hashing they know there's a bug somewhere in it so it's really inconsistent they have a couple",
    "start": "2459839",
    "end": "2465359"
  },
  {
    "text": "projection searches which are pretty cool um but in practice actually the brot Searcher is beating it for uh",
    "start": "2465359",
    "end": "2470800"
  },
  {
    "text": "beating them for me so which is kind of strange to me um it probably means that I don't have enough stuff going into it",
    "start": "2470800",
    "end": "2476880"
  },
  {
    "text": "um okay and then there's just a little side effect here so you can't have a Scola talk without slipping a VAR in um",
    "start": "2476880",
    "end": "2483760"
  },
  {
    "text": "so everybody can look down on you so so basically these centroids need like some key or uh",
    "start": "2483760",
    "end": "2490319"
  },
  {
    "text": "basically so I'm just going to increment up it doesn't matter at the end of the day but if they all have the same one it gets uh confused so notice then what I'm",
    "start": "2490319",
    "end": "2498680"
  },
  {
    "text": "doing so I've got my groups remember I chunk this guy into groups about size",
    "start": "2498680",
    "end": "2504040"
  },
  {
    "start": "2502000",
    "end": "2614000"
  },
  {
    "text": "400 um I turned it into iterable uh because because par doesn't work on the iterator um so this is where skull is",
    "start": "2504040",
    "end": "2512079"
  },
  {
    "text": "awesome um basically I'm calling par now so I'm turning this into a parallel collection uh and I'm calling map so",
    "start": "2512079",
    "end": "2518839"
  },
  {
    "text": "what's going to happen is this guy is actually going to Fork off a whole bunch",
    "start": "2518839",
    "end": "2524119"
  },
  {
    "text": "of uh processes and run these all separately right and then collect them",
    "start": "2524119",
    "end": "2529920"
  },
  {
    "text": "back together and this is all I had to do it's completely safe there's no way I",
    "start": "2529920",
    "end": "2534960"
  },
  {
    "text": "can screw it up um in this way and uh each one of these will get its own cluster just like you would have in M",
    "start": "2534960",
    "end": "2540920"
  },
  {
    "text": "produce the mappers will do all the stuff they need at the end it will put them all together into one big list so",
    "start": "2540920",
    "end": "2546559"
  },
  {
    "text": "let's give it a shot so then I'm all I'm doing then is basically just saying okay wrap this guy in this other thing that",
    "start": "2546559",
    "end": "2552480"
  },
  {
    "text": "it needs called a centroid um this is where it's it's kind of nice to to be able to do all this in scallet to be",
    "start": "2552480",
    "end": "2557599"
  },
  {
    "text": "honest um because there's always something that you have to wrap or use or whatever um and then just increment",
    "start": "2557599",
    "end": "2563440"
  },
  {
    "text": "the count so basically add this guy and then this reindex is just a kind of a last step that they recommend doing so",
    "start": "2563440",
    "end": "2569160"
  },
  {
    "text": "let's give it a shot and I'm gonna before I kick it off",
    "start": "2569160",
    "end": "2577880"
  },
  {
    "text": "where does this guy live three yeah okay so we can actually watch",
    "start": "2577880",
    "end": "2586119"
  },
  {
    "text": "it okay we ready so just to prove that it's actually going to do",
    "start": "2587880",
    "end": "2593040"
  },
  {
    "text": "something you should be able to see um did it",
    "start": "2593040",
    "end": "2599920"
  },
  {
    "text": "go no it did not go here we go let's try again there we go so you can see this",
    "start": "2600319",
    "end": "2607240"
  },
  {
    "text": "guy if you can see that basically it's I think I have eight cores it's using just about all of them um you basically get",
    "start": "2607240",
    "end": "2613839"
  },
  {
    "text": "all this for free it's amazing so if I were to do this without the parallel it it probably would have taken about eight",
    "start": "2613839",
    "end": "2618960"
  },
  {
    "start": "2614000",
    "end": "2679000"
  },
  {
    "text": "times as long to be honest it's almost linear in the number of cores you have here so this is pretty cool um so now",
    "start": "2618960",
    "end": "2624960"
  },
  {
    "text": "we've got all these guys and we could poke at them if we really want so we could say like sense do so I know what",
    "start": "2624960",
    "end": "2631160"
  },
  {
    "text": "to look for because I I've done this too many times today um but so and this is",
    "start": "2631160",
    "end": "2637160"
  },
  {
    "text": "where the the sort of Scola interrupt comes in really handy too cuz these these Searcher objects or these cluster",
    "start": "2637160",
    "end": "2642520"
  },
  {
    "text": "objects essentially have an iterator but if you want to feed another one in it has to be iterable um which is which",
    "start": "2642520",
    "end": "2651240"
  },
  {
    "text": "becomes a huge pain so it's actually you can just sort of do this uh fancy uh fancy dance here and uh do it like that",
    "start": "2651240",
    "end": "2660000"
  },
  {
    "text": "so uh we asked for 40 we got like 200ish on each of them um I'm not sure why to be honest it's it's brand new to me to",
    "start": "2660000",
    "end": "2666640"
  },
  {
    "text": "some of this so uh we'll probably figure it out in days to come Okay so we've got all our clusters we want to stick them",
    "start": "2666640",
    "end": "2672720"
  },
  {
    "text": "all together um so we basically just grab all those points out um so again",
    "start": "2672720",
    "end": "2679319"
  },
  {
    "start": "2679000",
    "end": "2809000"
  },
  {
    "text": "you can't have a functional top without flat map either so basically um all I'm",
    "start": "2679319",
    "end": "2684880"
  },
  {
    "text": "doing here is just saying well actually spit out all these lists into one giant list okay and then finally there's a so",
    "start": "2684880",
    "end": "2693839"
  },
  {
    "text": "the the end part of the algorithm then is we did this sloppy version so now we use a really fancy uh expensive version",
    "start": "2693839",
    "end": "2700200"
  },
  {
    "text": "like ball means if you can see this guy um and then",
    "start": "2700200",
    "end": "2705480"
  },
  {
    "text": "basically cluster the the sketch using an iterative process on one reducer so",
    "start": "2705480",
    "end": "2713480"
  },
  {
    "text": "the idea though is that your data is only about uh K log n so it actually fits no problem into memory uh unless",
    "start": "2713480",
    "end": "2719720"
  },
  {
    "text": "you're doing something really really strange so we can do this guy um we get our cluster and then we",
    "start": "2719720",
    "end": "2726680"
  },
  {
    "text": "can just say something like B",
    "start": "2726680",
    "end": "2729760"
  },
  {
    "text": "cluster just tell it to Cluster them up and this guy is kind of slow so while that's while you're watching that um any",
    "start": "2732880",
    "end": "2739720"
  },
  {
    "text": "questions so I'm going to hand it back off to Vali I I told you I'd be fast yes so how algebra",
    "start": "2739720",
    "end": "2749480"
  },
  {
    "text": "comp that's a good question I I think scaled has much much more stuff in it um",
    "start": "2749480",
    "end": "2755000"
  },
  {
    "text": "and I think alge is maybe a little easier to use so you know that's not the best",
    "start": "2755000",
    "end": "2760800"
  },
  {
    "text": "answer maybe um but they both have monoids um I think algeb bird is kind of",
    "start": "2760800",
    "end": "2766880"
  },
  {
    "text": "concerned itself mostly with just having uh some algebraic data structures like monoids and semi-groups and groups and",
    "start": "2766880",
    "end": "2773040"
  },
  {
    "text": "rings and Fields and Vector spaces and then they have this aggregator idea um I don't know what I to be honest I",
    "start": "2773040",
    "end": "2779960"
  },
  {
    "text": "haven't used sced that much so I mean do they have a lot of stuff predefined in there as well or do they just is it a do",
    "start": "2779960",
    "end": "2785240"
  },
  {
    "text": "they just have the framework we just",
    "start": "2785240",
    "end": "2792040"
  },
  {
    "text": "sure okay because I mean the things that algebra like Vitalia was saying has some amazing stuff in it for you already um I",
    "start": "2792280",
    "end": "2799079"
  },
  {
    "text": "mean it's basically got uh so Bloom filters is a monoid right you just keep slapping into the filter cman sketch is",
    "start": "2799079",
    "end": "2806000"
  },
  {
    "text": "a monoid hyper log logs a monoid stochastic gradient descent uh is a monoid like least common ancestor in",
    "start": "2806000",
    "end": "2812319"
  },
  {
    "start": "2809000",
    "end": "2924000"
  },
  {
    "text": "trees is a monoid um like valal said you could probably go through and ask any body what their project is and it's",
    "start": "2812319",
    "end": "2818160"
  },
  {
    "text": "probably a monoid underlying it um and there was actually a paper I think that was just uh came out of Twitter um from",
    "start": "2818160",
    "end": "2824880"
  },
  {
    "text": "Jimmy Lynn who's a professor at Maryland which was basically like everything you want to do is a monoid um the title's",
    "start": "2824880",
    "end": "2831359"
  },
  {
    "text": "something like that like I'm probably butchering it but it's pretty cool um so",
    "start": "2831359",
    "end": "2836640"
  },
  {
    "text": "a lot of that stuff's in there for you already which is pretty nice um and it's the API is super simple like the the",
    "start": "2836640",
    "end": "2842680"
  },
  {
    "text": "monoid API um you know you you basically just have to Define Plus and zero um and for most stuff you're",
    "start": "2842680",
    "end": "2849960"
  },
  {
    "text": "doing you're probably using a semi- group so you don't even need the zero um so you just have to Define plus and uh",
    "start": "2849960",
    "end": "2856040"
  },
  {
    "text": "you know they're not doing any actual validation you know I can say something's a monoid and it doesn't",
    "start": "2856040",
    "end": "2861480"
  },
  {
    "text": "necessarily have to be and I'll find out you know six hours down the line in my job um but for most part you you",
    "start": "2861480",
    "end": "2867000"
  },
  {
    "text": "probably have a monoid right so the only condition on the monoid is when you call plus you better end up back in the monoid um okay why I hand it back to",
    "start": "2867000",
    "end": "2875079"
  },
  {
    "text": "Vali uh this was was your uh mahoot mahout",
    "start": "2875079",
    "end": "2880960"
  },
  {
    "text": "break was say Okay so the next uh thing I would like to show is um how we can um",
    "start": "2881359",
    "end": "2889640"
  },
  {
    "text": "do similarity between Wikipedia articles for example you know find which articles",
    "start": "2889640",
    "end": "2895200"
  },
  {
    "text": "in Wikipedia are similar and in order to do this I will use a concept called",
    "start": "2895200",
    "end": "2901000"
  },
  {
    "text": "cosine similarity which is also Chris just us it cosine similarity",
    "start": "2901000",
    "end": "2906880"
  },
  {
    "text": "it's maybe it's best to show so I have here this",
    "start": "2906880",
    "end": "2912640"
  },
  {
    "text": "sorry this um uh War count U data so I",
    "start": "2912640",
    "end": "2918960"
  },
  {
    "text": "just took my um took the data set before and basically wrote it in this form",
    "start": "2918960",
    "end": "2926400"
  },
  {
    "text": "where I have the article name and then a word and how many times it appear so we",
    "start": "2926400",
    "end": "2933079"
  },
  {
    "text": "want to some similarity measure between the words of each",
    "start": "2933079",
    "end": "2938119"
  },
  {
    "text": "article and basically it's to take well if the word after shows up in the clock",
    "start": "2938119",
    "end": "2943720"
  },
  {
    "text": "Corin 10 times and it shows up in some other article also 10 times and maybe",
    "start": "2943720",
    "end": "2949000"
  },
  {
    "text": "those articles are similar um if you think about it it's",
    "start": "2949000",
    "end": "2954640"
  },
  {
    "text": "kind of not a simple problem especially if you're doing it on all of the Wikipedia article so we have to Loop",
    "start": "2954640",
    "end": "2962079"
  },
  {
    "text": "over Wikipedia article and then the second Loop over all the Wikipedia article and then we have after Loop for",
    "start": "2962079",
    "end": "2967359"
  },
  {
    "text": "all the words and we the way coant similarity works is that you multiply",
    "start": "2967359",
    "end": "2974880"
  },
  {
    "text": "the kind of multiply the workhound and then sum sum it up together kind of more",
    "start": "2974880",
    "end": "2981559"
  },
  {
    "text": "formal definition in Co similar is the square root um square root of the sum of",
    "start": "2981559",
    "end": "2989680"
  },
  {
    "text": "kind of the dot product so there is a long way um to do it but since we're",
    "start": "2989680",
    "end": "2995640"
  },
  {
    "text": "short time let's show you the very quick way to do it",
    "start": "2995640",
    "end": "3001480"
  },
  {
    "start": "2999000",
    "end": "3089000"
  },
  {
    "text": "and let's define similarity similar",
    "start": "3001480",
    "end": "3007880"
  },
  {
    "text": "no similarity yeah it's late sorry um so okay I have my data",
    "start": "3007880",
    "end": "3016359"
  },
  {
    "text": "here I read it and I'm now using uh I'm using the actually the pipe",
    "start": "3016359",
    "end": "3023640"
  },
  {
    "text": "format because what I'm about to do next is works better with uh this format and",
    "start": "3023640",
    "end": "3028839"
  },
  {
    "text": "not the type one um like explained taking elements um and",
    "start": "3028839",
    "end": "3037160"
  },
  {
    "text": "multiplying uh them together is also called do product and do product as a",
    "start": "3037160",
    "end": "3043520"
  },
  {
    "text": "basic linear algebra operation and sculling has this great linear algebra",
    "start": "3043520",
    "end": "3050200"
  },
  {
    "text": "um API that we're now H going to use so",
    "start": "3050200",
    "end": "3055520"
  },
  {
    "text": "let's take those words words and convert them to Matrix and you see there is we",
    "start": "3055520",
    "end": "3061559"
  },
  {
    "text": "can just convert to Matrix and we need to Define what what is the row what is the column and what is uh the value what",
    "start": "3061559",
    "end": "3068400"
  },
  {
    "text": "are the types so what's great about um again this API that unlike normal",
    "start": "3068400",
    "end": "3076160"
  },
  {
    "text": "matrices you don't have to be you know uh convert all of your data to some indexes they don't have to be the row in",
    "start": "3076160",
    "end": "3083160"
  },
  {
    "text": "the columns in the index don't have to be integers they can be strings",
    "start": "3083160",
    "end": "3088480"
  },
  {
    "text": "yes sorry way yes I think that's better",
    "start": "3088480",
    "end": "3094040"
  },
  {
    "start": "3089000",
    "end": "3399000"
  },
  {
    "text": "right um string string and our data will be double because well math works better",
    "start": "3094040",
    "end": "3101200"
  },
  {
    "text": "with doubles and let's take this stopple so it will",
    "start": "3101200",
    "end": "3107200"
  },
  {
    "text": "know how to use it so now what we have",
    "start": "3107200",
    "end": "3112920"
  },
  {
    "text": "is this very cool string string double Matrix and Matrix has a lot of operations on it",
    "start": "3112920",
    "end": "3121720"
  },
  {
    "text": "um one of them um kind of one thing that it's better to",
    "start": "3121720",
    "end": "3128839"
  },
  {
    "text": "do for custom similarity because if we just multiply we will get just the um uh",
    "start": "3128839",
    "end": "3135280"
  },
  {
    "text": "the articles that are the longest um are the most similar because you know they have a lot of the same words so the",
    "start": "3135280",
    "end": "3141520"
  },
  {
    "text": "multiplication will be large so we need to normalize it um so just let's do",
    "start": "3141520",
    "end": "3147240"
  },
  {
    "text": "normalize and well Twitter uh gives those two normalization L1 and L2 L1 is",
    "start": "3147240",
    "end": "3155040"
  },
  {
    "text": "basically having all um the sum of the row equal one L2 is having the square",
    "start": "3155040",
    "end": "3161440"
  },
  {
    "text": "root of the sum of uh squares to be two but since we're doing a DOT product we",
    "start": "3161440",
    "end": "3168319"
  },
  {
    "text": "would like um some article with itself to be equal uh the similarity to be",
    "start": "3168319",
    "end": "3174359"
  },
  {
    "text": "equal one so now again even the role just the alter normalization to write it",
    "start": "3174359",
    "end": "3179799"
  },
  {
    "text": "even in scalding which is a very very compact map reduce uh framework it's",
    "start": "3179799",
    "end": "3186160"
  },
  {
    "text": "probably will take you like five lines or something like that if you do it in Java God forbid um it will take you 500",
    "start": "3186160",
    "end": "3192839"
  },
  {
    "text": "um so you know one line it's extremely useful and now here come um instead of",
    "start": "3192839",
    "end": "3200599"
  },
  {
    "text": "it's just long to do everything with everything so let's just take a random article",
    "start": "3200599",
    "end": "3207119"
  },
  {
    "text": "which probably won't be random so um",
    "start": "3207119",
    "end": "3213160"
  },
  {
    "text": "words we can I think it's called get row no so row yeah what's the row stuff you",
    "start": "3213160",
    "end": "3220799"
  },
  {
    "text": "remember Chris get row row ass mat what I oh well",
    "start": "3220799",
    "end": "3229359"
  },
  {
    "text": "yeah that's that's the problem right sry um like I said slate",
    "start": "3229359",
    "end": "3237599"
  },
  {
    "text": "matt. get row okay so let's just get row and one of the articles I have there is",
    "start": "3237599",
    "end": "3243839"
  },
  {
    "text": "Audi and now in order to get Audi is similarity with the entire set of the",
    "start": "3243839",
    "end": "3251839"
  },
  {
    "text": "rest of Wikipedia which is the Matrix we just need to multiply it by matrix but",
    "start": "3251839",
    "end": "3257559"
  },
  {
    "text": "well not exactly they transpose um",
    "start": "3257559",
    "end": "3263880"
  },
  {
    "text": "and so now that we basically have a",
    "start": "3263880",
    "end": "3269359"
  },
  {
    "text": "transposed Matrix and again for those of you who are kind of rusty on linear",
    "start": "3269359",
    "end": "3275200"
  },
  {
    "text": "algebra or is just too late for you the reason why I so the row um is basically",
    "start": "3275200",
    "end": "3282599"
  },
  {
    "text": "is one by the amount of features I have which is I don't know how many words are there in Wikipedia and the when I do",
    "start": "3282599",
    "end": "3290920"
  },
  {
    "text": "transpose then all those Wars become the columns and all the rest of the",
    "start": "3290920",
    "end": "3296880"
  },
  {
    "text": "articles um will become um will become and sorry and I",
    "start": "3296880",
    "end": "3302240"
  },
  {
    "text": "will get basically an a score a constant similarity score",
    "start": "3302240",
    "end": "3307880"
  },
  {
    "text": "for Audi with every other article and the way it looks basically again I get a",
    "start": "3307880",
    "end": "3312920"
  },
  {
    "text": "row Vector with string which string will be a name of an article and a double and",
    "start": "3312920",
    "end": "3319319"
  },
  {
    "text": "that's it so we just need to write it now let's write it",
    "start": "3319319",
    "end": "3324880"
  },
  {
    "text": "tsv sour Source data um Source sorry",
    "start": "3324880",
    "end": "3332000"
  },
  {
    "text": "main data oh  data and Matrix do",
    "start": "3332000",
    "end": "3342280"
  },
  {
    "text": "text okay and let's just co sign change",
    "start": "3342280",
    "end": "3349559"
  },
  {
    "text": "it and run it",
    "start": "3349559",
    "end": "3354079"
  },
  {
    "text": "so yeah and one thing to remember while TR again you just take this code and",
    "start": "3366720",
    "end": "3373160"
  },
  {
    "text": "upload to it to your Hado cluster as is and it can run on so this metrix API",
    "start": "3373160",
    "end": "3380839"
  },
  {
    "text": "works extremely smart and it's also kind of sparse vector and as far Matrix",
    "start": "3380839",
    "end": "3387400"
  },
  {
    "text": "Library it's all kind of hashed distributed smartly between the",
    "start": "3387400",
    "end": "3392880"
  },
  {
    "text": "nodes and does all the operation it knows and okay here it took it 45",
    "start": "3392880",
    "end": "3398280"
  },
  {
    "text": "seconds to finish and let's look at the results what did I have there um called",
    "start": "3398280",
    "end": "3405799"
  },
  {
    "start": "3399000",
    "end": "3599000"
  },
  {
    "text": "Matrix right okay so we see actually um the Clockwork Orange is not that similar",
    "start": "3405799",
    "end": "3412880"
  },
  {
    "text": "to Audi um than thankfully and let's you",
    "start": "3412880",
    "end": "3418359"
  },
  {
    "text": "know let's just sort it and I think here is probably one of the best way to sort",
    "start": "3418359",
    "end": "3426559"
  },
  {
    "text": "it is maybe sort minus K2 minus",
    "start": "3426559",
    "end": "3434359"
  },
  {
    "text": "n no sorry no no that",
    "start": "3436599",
    "end": "3442119"
  },
  {
    "text": "what it is reverse but it's wasn't K2 no what why isn't it SW ah I",
    "start": "3442119",
    "end": "3451720"
  },
  {
    "text": "need the the limiter crap how do I do the delimiter",
    "start": "3451720",
    "end": "3458760"
  },
  {
    "text": "Ander what DH T",
    "start": "3458760",
    "end": "3464599"
  },
  {
    "text": "um yes field separator SLT no that's not it well never mind um",
    "start": "3464599",
    "end": "3475000"
  },
  {
    "text": "let's just yeah I don't know it's this unique stuff can I sort it",
    "start": "3475000",
    "end": "3481559"
  },
  {
    "text": "here group all two",
    "start": "3481559",
    "end": "3486720"
  },
  {
    "text": "pipe no okay let's just",
    "start": "3487200",
    "end": "3493280"
  },
  {
    "text": "sort oh my God I'm it's just too late Val again cosine",
    "start": "3493280",
    "end": "3501319"
  },
  {
    "text": "equals um type T type",
    "start": "3501319",
    "end": "3506960"
  },
  {
    "text": "pipe. from I really want to see the results",
    "start": "3506960",
    "end": "3513160"
  },
  {
    "text": "type so what did I have there it's a doubles it's strings and doubles right string",
    "start": "3513160",
    "end": "3520760"
  },
  {
    "text": "double um Source main data",
    "start": "3520760",
    "end": "3526160"
  },
  {
    "text": "that matrix.",
    "start": "3526160",
    "end": "3530920"
  },
  {
    "text": "txt okay what's wrong with double yes that's wrong",
    "start": "3531680",
    "end": "3539160"
  },
  {
    "text": "double and now cosign that group all",
    "start": "3539160",
    "end": "3544319"
  },
  {
    "text": "just kind of show you how to sort R sort",
    "start": "3544319",
    "end": "3549799"
  },
  {
    "text": "by the second one ah and uh if you remember I told you about this thing",
    "start": "3549799",
    "end": "3557280"
  },
  {
    "text": "that one of the reason why I can't show you it on repple because it's optimizing so what you can see it here so I do s by",
    "start": "3557280",
    "end": "3565400"
  },
  {
    "text": "in reverse which is doesn't actually sort sorts it and then reverse it it",
    "start": "3565400",
    "end": "3570599"
  },
  {
    "text": "just optimize for sorting by the reverse ordering which is smart of them to do",
    "start": "3570599",
    "end": "3576160"
  },
  {
    "text": "because otherwise it would be well not very smart yes sorry do",
    "start": "3576160",
    "end": "3586160"
  },
  {
    "text": "values do write and now we do this sorted",
    "start": "3586160",
    "end": "3593920"
  },
  {
    "text": "tsv source main data sorted not",
    "start": "3594520",
    "end": "3602640"
  },
  {
    "text": "txt",
    "start": "3603960",
    "end": "3606960"
  },
  {
    "text": "sort okay hopefully the sort the Unix sord wasn't working properly and it wasn't the right result and the right",
    "start": "3617240",
    "end": "3623599"
  },
  {
    "text": "results will look better but let's",
    "start": "3623599",
    "end": "3629480"
  },
  {
    "text": "see okay well that was fast um more",
    "start": "3631440",
    "end": "3638680"
  },
  {
    "text": "sorted okay so Audi we got one which is okay it's a good sign right um auto",
    "start": "3638680",
    "end": "3644599"
  },
  {
    "text": "racing armored car assem line anal do okay anyone knows who AUST TCH",
    "start": "3644599",
    "end": "3651480"
  },
  {
    "text": "is the second what race driver race uh",
    "start": "3651480",
    "end": "3656839"
  },
  {
    "text": "well good thing we have this we have Internet so let's use Wikipedia what was the name August herch",
    "start": "3656839",
    "end": "3664720"
  },
  {
    "text": "yes AUST herch okay and AUST herch is a German engineer and something",
    "start": "3664720",
    "end": "3673440"
  },
  {
    "text": "something what what did you do became Audi yes eventually became Audi which is",
    "start": "3673440",
    "end": "3679079"
  },
  {
    "text": "and that is from this article so probably just recognize the word Audi H one thing um one thing I kind of skipped",
    "start": "3679079",
    "end": "3686640"
  },
  {
    "text": "that helped me to actually achieve this result um I also did tfidf on the work",
    "start": "3686640",
    "end": "3691880"
  },
  {
    "text": "counts because otherwise I would get again a lot of u a lot of article that has the word a and the word v in them",
    "start": "3691880",
    "end": "3698280"
  },
  {
    "text": "which is not that interesting but once you do tfidf and again it's installing just a couple of lines you calculate the",
    "start": "3698280",
    "end": "3705200"
  },
  {
    "text": "TF well TF is the workout right the IDF is just the document count and you kind",
    "start": "3705200",
    "end": "3711400"
  },
  {
    "text": "of normalize by it then uh the word Ai and I probably you know Germany probably",
    "start": "3711400",
    "end": "3718319"
  },
  {
    "text": "also the years probably match and stuff like that and now it becomes and again um kind of bring you back to the code",
    "start": "3718319",
    "end": "3725720"
  },
  {
    "text": "where where was it that is well besides the road to normaliz that is all the",
    "start": "3725720",
    "end": "3731559"
  },
  {
    "text": "code necessary that's that thing is I think amazing you know that just take",
    "start": "3731559",
    "end": "3737200"
  },
  {
    "text": "the row multiply it's well linear algebra for all of those few folks who",
    "start": "3737200",
    "end": "3742440"
  },
  {
    "text": "haven't listened in their college uh during their college classes so now now you finally know what what is good for",
    "start": "3742440",
    "end": "3749680"
  },
  {
    "text": "and well that's that's kind of it so any",
    "start": "3749680",
    "end": "3755480"
  },
  {
    "text": "questions yeah I it's late okay thank you guys for coming yes",
    "start": "3756359",
    "end": "3763030"
  },
  {
    "text": "[Applause] [Music]",
    "start": "3763030",
    "end": "3774189"
  }
]