[
  {
    "text": "[Music]",
    "start": "1990",
    "end": "16880"
  },
  {
    "text": "uh so thanks very much for uh for coming here tonight uh it's Java 8 is the most",
    "start": "16880",
    "end": "22439"
  },
  {
    "text": "exciting release of java ever uh so anything that ever been",
    "start": "22439",
    "end": "27560"
  },
  {
    "text": "released in Java before is not as good as Java by definition of it being Java 8 right uh hopefully until Java 9 and the",
    "start": "27560",
    "end": "34200"
  },
  {
    "text": "and the rest of uh future releases will be just as good um So the plan tonight is is pretty simple we've got there's a",
    "start": "34200",
    "end": "40239"
  },
  {
    "text": "lot of topics to cover lambas and streams and what I've assumed about you guys is that you want to learn those",
    "start": "40239",
    "end": "45840"
  },
  {
    "text": "topics that you're familiar with the Java programming language but I don't assume that you've you're necessarily an",
    "start": "45840",
    "end": "51520"
  },
  {
    "text": "expert in lambdas or you've done a lot of Lambda programming with uh other languages uh so I've tried to keep the",
    "start": "51520",
    "end": "58920"
  },
  {
    "text": "presentation as clear as possible if your goal is to master those two topics",
    "start": "58920",
    "end": "64760"
  },
  {
    "text": "then at some point you're going to have to learn all of the concepts that are that I'm going to have on the slides and",
    "start": "64760",
    "end": "72119"
  },
  {
    "text": "so if you just pay attention tonight you'll walk out of here with a complete understanding of everything you need to know to go on to and say look he let me",
    "start": "72119",
    "end": "79000"
  },
  {
    "text": "look at the more advanced use cases that I can apply uh lambdas and streams in Java 84 uh having said that I'm going to",
    "start": "79000",
    "end": "86720"
  },
  {
    "text": "give you this little disclaimer some of the early slides are going to to provide incomplete definitions the reason why I",
    "start": "86720",
    "end": "92240"
  },
  {
    "text": "do that is just to keep things simple so it's easy to follow along by the end of the presentation um those incomplete",
    "start": "92240",
    "end": "99399"
  },
  {
    "text": "definitions will become more complete okay so don't get worried if you happen to know what's on some of the slides",
    "start": "99399",
    "end": "104640"
  },
  {
    "text": "you're like he's wrong that's intentional so",
    "start": "104640",
    "end": "110960"
  },
  {
    "text": "um um I welcome questions ask them as uh we go along and uh I don't promise to",
    "start": "110960",
    "end": "116880"
  },
  {
    "text": "know the answer to every question you might have but I'll do my best so just a quick survey here uh raise",
    "start": "116880",
    "end": "123520"
  },
  {
    "text": "your your hand if you've uh used Lambda expressions in the past in any programming language doesn't have to be",
    "start": "123520",
    "end": "129280"
  },
  {
    "text": "Java so that looks like about 40% of the room is what I'm guessing um raise your",
    "start": "129280",
    "end": "135200"
  },
  {
    "text": "hand if you've done programming with streams not just in Java but in any other language too K okay so a few",
    "start": "135200",
    "end": "141680"
  },
  {
    "text": "people so if you are um if you are new",
    "start": "141680",
    "end": "146720"
  },
  {
    "text": "to uh if you've done all of this stuff before what you're going to learn today is just how Java 8 does it very simple",
    "start": "146720",
    "end": "153280"
  },
  {
    "text": "there's not going to be any new Concepts for you to learn uh if you haven't done this stuff before then there's both",
    "start": "153280",
    "end": "158519"
  },
  {
    "text": "Concepts and also how Java 8 does things um so let's first start out talk a",
    "start": "158519",
    "end": "163879"
  },
  {
    "text": "little bit about the concept of Lambda Expressions syntax functional interfaces variable capture method references and",
    "start": "163879",
    "end": "169400"
  },
  {
    "text": "default methods these are all things that were added to the language which will allow you to build things like the",
    "start": "169400",
    "end": "175920"
  },
  {
    "text": "streams API and many many other things you know Java 8 brings uh functional programming to Java as much as that is",
    "start": "175920",
    "end": "182920"
  },
  {
    "text": "possible uh within the constraints of staying backwards compatible with previous versions um a little bit of history",
    "start": "182920",
    "end": "189599"
  },
  {
    "text": "about lambas they're actually very old they're ancient uh they're from the 1930s and uh they're they made their way",
    "start": "189599",
    "end": "196200"
  },
  {
    "text": "into programming languages in the 1960s and practically all programming languages have them C++ C JavaScript",
    "start": "196200",
    "end": "202360"
  },
  {
    "text": "python Ruby and now finally after many years of waiting so does Java so um",
    "start": "202360",
    "end": "209239"
  },
  {
    "text": "we're no longer lamb less um so what is a Lambda definition of it uh the typical thing that's given is this is probably",
    "start": "209239",
    "end": "215720"
  },
  {
    "text": "you've seen it even if you've never if if you type it into Google you get something that looks like this um it's",
    "start": "215720",
    "end": "221239"
  },
  {
    "text": "it's a way for defining Anonymous functions you can pass it to variables uh pass it to functions you can return",
    "start": "221239",
    "end": "226760"
  },
  {
    "text": "it and you're probably wondering so freaking what what if I could do all things what does that get me uh the",
    "start": "226760",
    "end": "232680"
  },
  {
    "text": "answer is there's a lot of things that it gets you but I'm not going to talk about those today uh so if you're",
    "start": "232680",
    "end": "238519"
  },
  {
    "text": "interested in uh but other than just what's on this slide here which is to say that it is the basis of the",
    "start": "238519",
    "end": "244280"
  },
  {
    "text": "functional programming Paradigm uh functional programming is a very rich Paradigm just as rich as object oriented",
    "start": "244280",
    "end": "250079"
  },
  {
    "text": "programming um if you are not familiar with the functional programming Paradigm who's who's new to that raise your hand",
    "start": "250079",
    "end": "255640"
  },
  {
    "text": "if you're new to that all right five brave souls thank you uh then at some point you're going",
    "start": "255640",
    "end": "262520"
  },
  {
    "text": "to have a functional programming birthday okay just like you had an objectoriented programming birthday your",
    "start": "262520",
    "end": "268320"
  },
  {
    "text": "object oriented programming birthday was the day that everything clicked in about classes objects inheritance polymorphism",
    "start": "268320",
    "end": "275240"
  },
  {
    "text": "and it all became really obvious why that was a good idea or became obvious why it wasn't a good idea so uh in the",
    "start": "275240",
    "end": "282880"
  },
  {
    "text": "same uh scheme of things with functional programming there there it just it has its own design patterns it has its own",
    "start": "282880",
    "end": "288800"
  },
  {
    "text": "techniques and uh and and you're going to have to learn those and those will be",
    "start": "288800",
    "end": "294280"
  },
  {
    "text": "possible to implement with Java 8 um so the big things is that it does make parallel programming enormously easier",
    "start": "294280",
    "end": "300520"
  },
  {
    "text": "so if you want to keep uh hundreds of cores busy it's a lot easier to do with functional programming than with objectoriented programming you're going",
    "start": "300520",
    "end": "306880"
  },
  {
    "text": "to write more compact code much richer data structures there's really interesting things you can do in that area and you can develop a lot cleaner",
    "start": "306880",
    "end": "313840"
  },
  {
    "text": "apis U and you'll you you'll start to see that when you look at things like streams and how they they clean up",
    "start": "313840",
    "end": "319400"
  },
  {
    "text": "working with uh with uh Java uh utils uh for collections uh so having said that",
    "start": "319400",
    "end": "326080"
  },
  {
    "text": "there are many presentations online a lot from the Java 1 that talk about why lambdas are useful and you can go watch",
    "start": "326080",
    "end": "332080"
  },
  {
    "text": "those um another key thing here for tonight for us is to understand that there is uh the concept versus the",
    "start": "332080",
    "end": "338520"
  },
  {
    "text": "implementation um we know this because we have things like maps and you have multiple implementations of that like",
    "start": "338520",
    "end": "343919"
  },
  {
    "text": "hashmap uh concurrent hashmap or lists and by the same token lambdas are a",
    "start": "343919",
    "end": "350199"
  },
  {
    "text": "concept and it has different implementations of different program in different programming languages so if a",
    "start": "350199",
    "end": "355680"
  },
  {
    "text": "programming language was built from day one to include lambdas those lambdas are are probably going to look a little bit",
    "start": "355680",
    "end": "361319"
  },
  {
    "text": "nicer than they do in Java 8 Java 8 lambdas are the Java way the the the way",
    "start": "361319",
    "end": "366639"
  },
  {
    "text": "that's Backward Compatible to do lambdas in Java uh so there's two distinct things",
    "start": "366639",
    "end": "373080"
  },
  {
    "text": "to focus on one is the general concept of Lambda expressions and then the Java 8 implementation and here's my learning",
    "start": "373080",
    "end": "378840"
  },
  {
    "text": "tip if you're if you're here is that if this is your first encounter with lambdas um then recognize that you've",
    "start": "378840",
    "end": "384720"
  },
  {
    "text": "got two things to learn both the concept and the implementation in Java 8 and that's going to a steeper learning curve",
    "start": "384720",
    "end": "390840"
  },
  {
    "text": "for you than it would be for somebody who is already familiar with Lambda expressions from a from a previous uh",
    "start": "390840",
    "end": "397120"
  },
  {
    "text": "programming language so that covers all the background now we can dig into how Java",
    "start": "397120",
    "end": "402160"
  },
  {
    "text": "8 does it so I'm going to keep the programs really simple in on the order",
    "start": "402160",
    "end": "407360"
  },
  {
    "text": "of let's make them so simple that if you can follow hello world you'll be able to follow those I want you to be able to",
    "start": "407360",
    "end": "413000"
  },
  {
    "text": "focus on the concepts and not get tripped up by how clever I've made the the programs appear to be um so here's a",
    "start": "413000",
    "end": "420560"
  },
  {
    "text": "list of integers and all I want to do is I want to print it but I don't want to write a for Loop to print it so I'm going to call the for each function and",
    "start": "420560",
    "end": "427120"
  },
  {
    "text": "I'm going to pass it a Lambda expression and the Lambda expression here you can see that um a it is this x Arrow system",
    "start": "427120",
    "end": "436680"
  },
  {
    "text": "out print Ln X and what that is it's a function which takes a parameter called",
    "start": "436680",
    "end": "442879"
  },
  {
    "text": "X and does something with it but unlike a typical function you write in Java hey what happened to my curly braces right",
    "start": "442879",
    "end": "449639"
  },
  {
    "text": "they're missing an action uh what happened to my types what's the type of X interesting question um so uh what I",
    "start": "449639",
    "end": "457400"
  },
  {
    "text": "want to do before I answer those questions with a lot of simple examples is to look at just a little bit more of the syntax so we can get that out of the",
    "start": "457400",
    "end": "463879"
  },
  {
    "text": "way any questions at this point right so oh here you go if you",
    "start": "463879",
    "end": "472080"
  },
  {
    "text": "want to put curly braces go ahead and do that you can uh make a 20 line 50 line a",
    "start": "472080",
    "end": "477520"
  },
  {
    "text": "million line Lambda expression Java Java won't complain uh so you can do that if",
    "start": "477520",
    "end": "482599"
  },
  {
    "text": "that makes you feel better however for what's really great about them is the the the notation on the previous page",
    "start": "482599",
    "end": "488159"
  },
  {
    "text": "which is the single line one it's quite Compact and you'll find yourself uh when you like really wanting to use that",
    "start": "488159",
    "end": "494840"
  },
  {
    "text": "rather than necessarily the the curly brace version uh just like any function you could Define local variables you could",
    "start": "494840",
    "end": "501360"
  },
  {
    "text": "do whatever you want in there nothing really fancy or interesting you can see here got this extra n yal",
    "start": "501360",
    "end": "507520"
  },
  {
    "text": "2x/2 um you can also specify the types optionally so if you are looking at hey",
    "start": "507520",
    "end": "514159"
  },
  {
    "text": "how does this look like um a function you can see that the for each now we've got the extra Open Bracket uh open paren",
    "start": "514159",
    "end": "521240"
  },
  {
    "text": "integer X so we told the for each function that what we're passing it is of type integer now you don't really",
    "start": "521240",
    "end": "528000"
  },
  {
    "text": "need to say that because Java Eight's compiler is able to do type inference so Java Eight's compiler says okay let me",
    "start": "528000",
    "end": "535000"
  },
  {
    "text": "look at integers what is the data type it's a list of integer so if I'm going for each over a list of integer well",
    "start": "535000",
    "end": "541560"
  },
  {
    "text": "what am I going to pass to the Lambda expression an integer that's why the the",
    "start": "541560",
    "end": "547200"
  },
  {
    "text": "the type is optional okay and if I'm going too fast like wave",
    "start": "547200",
    "end": "553720"
  },
  {
    "text": "at me there's a lot of slides I want to get through but uh going through too fast will not serve you or",
    "start": "553720",
    "end": "561480"
  },
  {
    "text": "me um so with that said let's think a little bit about the Lambda expression like has a life cycle in a way and the",
    "start": "561480",
    "end": "567800"
  },
  {
    "text": "Lambda expression life cycle is the compiler sees a Lambda expression and what it's going to do it's going to turn it into a function okay and once it",
    "start": "567800",
    "end": "575959"
  },
  {
    "text": "turns it into a function then the next uh thing it has to figure out how to call that function and so what I want",
    "start": "575959",
    "end": "583000"
  },
  {
    "text": "you to think about it is like this so take take a few seconds and read that while I drink some more",
    "start": "583000",
    "end": "588600"
  },
  {
    "text": "beer",
    "start": "598320",
    "end": "601320"
  },
  {
    "text": "all right who can in their mind now can say",
    "start": "605200",
    "end": "609519"
  },
  {
    "text": "question so the question is does it generate a static function uh that is the best way I found to think about it",
    "start": "614240",
    "end": "620560"
  },
  {
    "text": "yes it will and can generate a static function if it generates a static function that gives it a really fast",
    "start": "620560",
    "end": "626160"
  },
  {
    "text": "implementation because the invoke static bite code is super fast um and will like the the the specs don't",
    "start": "626160",
    "end": "634519"
  },
  {
    "text": "say anything about how the Lambda is implemented and what they've promised is",
    "start": "634519",
    "end": "639560"
  },
  {
    "text": "that for the initial release of java 8 they're doing the version the implementations that are the easiest for",
    "start": "639560",
    "end": "644839"
  },
  {
    "text": "them but they fully intend to optimize them enormously um and it also depends kind",
    "start": "644839",
    "end": "651040"
  },
  {
    "text": "of what you're doing in the Lambda so I don't want to get into too much detail about this I I'll I'll Circle back to",
    "start": "651040",
    "end": "656880"
  },
  {
    "text": "this when we cover variable capture because that will impact whether you generate a static or something",
    "start": "656880",
    "end": "664560"
  },
  {
    "text": "else okay great question thank you did they did did that answer your question",
    "start": "664560",
    "end": "670440"
  },
  {
    "text": "yes okay great anybody else right so uh takeaway point you see",
    "start": "670440",
    "end": "676880"
  },
  {
    "text": "a Lambda expression put curly braces copy whatever is outside the arrow stick parameters on there and think of it as a",
    "start": "676880",
    "end": "683760"
  },
  {
    "text": "static function okay always no matter what think of it as a static function so what is the type of this",
    "start": "683760",
    "end": "690839"
  },
  {
    "text": "Lambda is probably what you're thinking um if it's an expression it has to",
    "start": "690839",
    "end": "696240"
  },
  {
    "text": "evaluate to something if it evaluates to something it's got to have a type does it evaluate to A Primitive does it",
    "start": "696240",
    "end": "701959"
  },
  {
    "text": "evaluate to an object what exactly is it and the answer to this turned out to be",
    "start": "701959",
    "end": "707519"
  },
  {
    "text": "a very difficult one to answer for Java um many programming languages they Define a function data type as a native",
    "start": "707519",
    "end": "714279"
  },
  {
    "text": "function data type and uh that was considered by the Java a designers but they rejected it because if they defined",
    "start": "714279",
    "end": "721040"
  },
  {
    "text": "a function data type there are going to be a lot of problems with backward compatibility in particular type erer",
    "start": "721040",
    "end": "727800"
  },
  {
    "text": "was going to completely make it very very difficult to use and all of the details about why they implemented it",
    "start": "727800",
    "end": "734480"
  },
  {
    "text": "the way they did um is in this really fantastic presentation which is uh",
    "start": "734480",
    "end": "739800"
  },
  {
    "text": "Lambda a peak under the hood uh by Brian gets from last year's Java 1 has anybody here watched it no if you haven't watch",
    "start": "739800",
    "end": "747959"
  },
  {
    "text": "it it's gives you all of the background thinking that went into why is Lambda",
    "start": "747959",
    "end": "753000"
  },
  {
    "text": "the way it is in Java 8 how does it work how does the compiler generate stuff so",
    "start": "753000",
    "end": "758360"
  },
  {
    "text": "uh yeah so you can do that so in terms of this uh",
    "start": "758360",
    "end": "764880"
  },
  {
    "text": "implementation how does this thing get implemented so we saw we have take the simple um Lambda expression we generate",
    "start": "764880",
    "end": "771160"
  },
  {
    "text": "a static method from it well can you hang a static method just by itself in a class",
    "start": "771160",
    "end": "776440"
  },
  {
    "text": "file anybody no it's a class file it's got to have a class there's got to be something to hold that static method",
    "start": "776440",
    "end": "783680"
  },
  {
    "text": "well what is that class that holds that static method and uh how would you",
    "start": "783680",
    "end": "789399"
  },
  {
    "text": "create instances of that class and would a static method work on all situations",
    "start": "789399",
    "end": "794440"
  },
  {
    "text": "are the situations where you need instance methods again I don't want to get into all of those details those are really fascinating and interesting",
    "start": "794440",
    "end": "800399"
  },
  {
    "text": "details but they are probably for a future talk at this jug um uh but watch",
    "start": "800399",
    "end": "805440"
  },
  {
    "text": "watch that uh under the hood which answers all these questions for now please think of it as a as",
    "start": "805440",
    "end": "814120"
  },
  {
    "text": "that all right so now that uh we we've learned what that is the the syntax a",
    "start": "815240",
    "end": "823160"
  },
  {
    "text": "little bit let's take a look at a very important concept functional interfaces right so this is a a term that you'll uh",
    "start": "823160",
    "end": "829760"
  },
  {
    "text": "you'll get to uh to become quite familiar with so here's a functional interface is just a regular Java",
    "start": "829760",
    "end": "837440"
  },
  {
    "text": "interface which has a single method okay this is a common idiom in Java code so",
    "start": "837440",
    "end": "842920"
  },
  {
    "text": "let me prove that to you runnable right is a is an example of",
    "start": "842920",
    "end": "849320"
  },
  {
    "text": "a functional interface that has existed forever in Java it just does what it's supposed to do comparable right callable",
    "start": "849320",
    "end": "857000"
  },
  {
    "text": "so in and in your own code who's written interfaces with a single uh function in them raise your hand if you've done that",
    "start": "857000",
    "end": "864079"
  },
  {
    "text": "okay that's quite a lot of the room right and so one of the things they wanted to do is make sure that the",
    "start": "864079",
    "end": "869480"
  },
  {
    "text": "Lambda Expressions would work with all the code that you've already written without ever having to recompile it so",
    "start": "869480",
    "end": "875360"
  },
  {
    "text": "they said hm let's take what people do today without like like prior to land as",
    "start": "875360",
    "end": "881160"
  },
  {
    "text": "existing in Java they said what are people doing when they want to represent the idea of a function well people go",
    "start": "881160",
    "end": "886360"
  },
  {
    "text": "and they write an interface with a single function and that's how they represent the idea of a function type so",
    "start": "886360",
    "end": "891880"
  },
  {
    "text": "let's just formalize that into the language and we'll call that a functional",
    "start": "891880",
    "end": "897199"
  },
  {
    "text": "interface uh here's some stuff from from the popular spring uh framework uh like transaction call back um row mapper map",
    "start": "897199",
    "end": "904680"
  },
  {
    "text": "a result set to a row or the statement call back to execute something within a statement so if you look even at the",
    "start": "904680",
    "end": "911040"
  },
  {
    "text": "wider ecosystem of of popular Java libraries you're going to see this uh pattern over and over again so they",
    "start": "911040",
    "end": "917279"
  },
  {
    "text": "officially decided that they need to support it so let's take a look at an example of that so here's an interface",
    "start": "917279",
    "end": "923920"
  },
  {
    "text": "called consumer uh it's got a single method called accept and it's supposed to do something with",
    "start": "923920",
    "end": "930240"
  },
  {
    "text": "it uh here's how you could code a for each uh the method imagine that this for",
    "start": "930240",
    "end": "935480"
  },
  {
    "text": "each is inside of some sort of like array list container as an example in your mind so it's just going to have a",
    "start": "935480",
    "end": "942160"
  },
  {
    "text": "regular for Loop over some set of items and then it's going to call action. accept so from the point of view um of",
    "start": "942160",
    "end": "949560"
  },
  {
    "text": "the user of the end user of a Lambda expression it just looks like an interface let me actually show you the rest of the code so in this example here",
    "start": "949560",
    "end": "956639"
  },
  {
    "text": "I've got my uh list of five integers and I'm going to create a Lambda expression",
    "start": "956639",
    "end": "962040"
  },
  {
    "text": "and I'm going to assign it to an instance of consumer so when I called for each earlier right the for each didn't uh it",
    "start": "962040",
    "end": "970079"
  },
  {
    "text": "was just like we passed it the X Arrow system out print on on X in this example we're assigning it to this consumer",
    "start": "970079",
    "end": "978120"
  },
  {
    "text": "integer consumer so didn't I just tell you earlier that this was a static method how can you how can you attach a",
    "start": "978120",
    "end": "985120"
  },
  {
    "text": "static method to a an object uh kind of weird right this is where all the magic",
    "start": "985120",
    "end": "990519"
  },
  {
    "text": "of invoke Dynamic comes into the picture and what they do is is the basic idea is",
    "start": "990519",
    "end": "996560"
  },
  {
    "text": "that the the right hand side of it is the body of the function that is defined",
    "start": "996560",
    "end": "1003120"
  },
  {
    "text": "whose signature is defined in the functional interface since the functional interface has one method the",
    "start": "1003120",
    "end": "1011560"
  },
  {
    "text": "that one method in the functional interface is the signature of the body that you're",
    "start": "1011560",
    "end": "1018480"
  },
  {
    "text": "attaching to it there am I making any sense okay so when you when you write a",
    "start": "1018480",
    "end": "1024400"
  },
  {
    "text": "function in Java you start up by typing up the function uh signature right then you put a curly brace and then you type",
    "start": "1024400",
    "end": "1030360"
  },
  {
    "text": "in the body of the function so what we're doing is we're separating that out now so the body of the function is we're",
    "start": "1030360",
    "end": "1038558"
  },
  {
    "text": "putting that in a Lambda expression the name of the function is not important to",
    "start": "1038559",
    "end": "1044038"
  },
  {
    "text": "us because we're dealing with Anonymous functions what is important to us is the",
    "start": "1044039",
    "end": "1049360"
  },
  {
    "text": "signature what parameters does it take what does it return and what exceptions does it throw well if we look at the",
    "start": "1049360",
    "end": "1055960"
  },
  {
    "text": "consumer at this interface called consumer we can see that it has it takes",
    "start": "1055960",
    "end": "1061480"
  },
  {
    "text": "a parameter of type T in this case that's an integer because that's what the generic is pointing to and we can",
    "start": "1061480",
    "end": "1066960"
  },
  {
    "text": "see that it does not return anything and it throws no exceptions so it's like you're defining",
    "start": "1066960",
    "end": "1073240"
  },
  {
    "text": "the uh the function in two parts the signature is in the functional interface",
    "start": "1073240",
    "end": "1078960"
  },
  {
    "text": "the body is in the Lambda expression comments",
    "start": "1078960",
    "end": "1083919"
  },
  {
    "text": "questions yeah go ahead so if the",
    "start": "1084120",
    "end": "1088320"
  },
  {
    "text": "consumer that's a fantastic question just wait for the next slide anybody",
    "start": "1089360",
    "end": "1094440"
  },
  {
    "text": "else any other questions lamb can only have a single method single",
    "start": "1094440",
    "end": "1102919"
  },
  {
    "text": "arum return return okay so the question was uh does this mean that the lamb the",
    "start": "1102919",
    "end": "1108799"
  },
  {
    "text": "the Lambda expression can only have a single return accept a single parameter and return nothing in this case yes",
    "start": "1108799",
    "end": "1115480"
  },
  {
    "text": "that's what it means in if you had put this as a different interface let's say the method was returning something then",
    "start": "1115480",
    "end": "1122720"
  },
  {
    "text": "you could return something from the Lambda uh let's say it took five parameters then you would have x y z",
    "start": "1122720",
    "end": "1129000"
  },
  {
    "text": "blah blah blah blah blah a b CDE e f right so so that's yeah viate youate",
    "start": "1129000",
    "end": "1136000"
  },
  {
    "text": "comp yeah you'll get lots of compilation errors lots of new compilation errors to",
    "start": "1136000",
    "end": "1141400"
  },
  {
    "text": "decipher so and ponder over uh so this is the integers. for each I guess I",
    "start": "1141400",
    "end": "1147320"
  },
  {
    "text": "should have clicked the pr the things a couple more times okay",
    "start": "1147320",
    "end": "1154000"
  },
  {
    "text": "um so now you're probably wondering if you showed me that it's just an instance of an interface couldn't I have just put",
    "start": "1155120",
    "end": "1162039"
  },
  {
    "text": "an anonymous in our class on the other side who's who's thinking that bonus points you're ahead yay so you're",
    "start": "1162039",
    "end": "1168480"
  },
  {
    "text": "probably thinking isn't the Lambda expression just an anonymous inter class the answer is no it's not but I can't",
    "start": "1168480",
    "end": "1175080"
  },
  {
    "text": "tell you all the details yet because that will make things not as easy to understand so in a 20 minutes or so",
    "start": "1175080",
    "end": "1182159"
  },
  {
    "text": "you'll know why and how exactly they're different from anonomous inter classes so here is how you can get the",
    "start": "1182159",
    "end": "1189159"
  },
  {
    "text": "compiler to assist you the earlier question was hi can the compiler help me out if I make a mistake and Define more",
    "start": "1189159",
    "end": "1195559"
  },
  {
    "text": "than one thing the answer is just like there's at overrides in Java 5 and you can do that to catch your bad typing",
    "start": "1195559",
    "end": "1202679"
  },
  {
    "text": "mistakes there's an at functional interface annotation and what the compiler will do is if you have more",
    "start": "1202679",
    "end": "1208720"
  },
  {
    "text": "than one method on the interface it's going to tell you that the code doesn't compile so in this example here it's not",
    "start": "1208720",
    "end": "1214960"
  },
  {
    "text": "a functional interface because I have this extra do something else method and this is what the compiler will say you",
    "start": "1214960",
    "end": "1221440"
  },
  {
    "text": "can read the compiler error message right there in red while I drink more beer I hope I don't turn out a beer",
    "start": "1221440",
    "end": "1227640"
  },
  {
    "text": "while your reading slides correct so the ad functional interface only works on an interface it",
    "start": "1227640",
    "end": "1234559"
  },
  {
    "text": "does not work on a class so this is for for me as a",
    "start": "1234559",
    "end": "1239840"
  },
  {
    "text": "longtime Java user I'm really happy about how they did this because it means that all of the code that's ever been",
    "start": "1239840",
    "end": "1246240"
  },
  {
    "text": "written that is already using functional interfaces without even calling them functional interfaces all of a sudden",
    "start": "1246240",
    "end": "1252200"
  },
  {
    "text": "you can pass out a Lambda expression and we'll see some some nice examples of that so from a backward compatibility",
    "start": "1252200",
    "end": "1257720"
  },
  {
    "text": "perspective this is awesome from a is it as cool as other",
    "start": "1257720",
    "end": "1262880"
  },
  {
    "text": "languages that's not go there okay uh it's an optional annotation you don't",
    "start": "1262880",
    "end": "1269200"
  },
  {
    "text": "have to put it on there for something to be a functional interface the fact that it's a functional interface is just",
    "start": "1269200",
    "end": "1274880"
  },
  {
    "text": "purely what based on the count of things so what this means is any interface even",
    "start": "1274880",
    "end": "1280840"
  },
  {
    "text": "if you compile it with java1 compiler is still a functional interface if it has one method who's happy about the",
    "start": "1280840",
    "end": "1287400"
  },
  {
    "text": "backward compatibility other than me who's like no backward compatibility evil kill",
    "start": "1287400",
    "end": "1294000"
  },
  {
    "text": "it right um yeah kill backward compatibility is",
    "start": "1294000",
    "end": "1300480"
  },
  {
    "text": "is is very important I I have I have quite a few uh clients who uh are no",
    "start": "1300480",
    "end": "1305720"
  },
  {
    "text": "more fans of Microsoft because of the few times they've broken backward compatibility",
    "start": "1305720",
    "end": "1311080"
  },
  {
    "text": "so so Java 8 lambdas will work with all the libraries uh you don't even need to recompile the libraries they'll just",
    "start": "1311080",
    "end": "1317360"
  },
  {
    "text": "work um you can pass them lambdas I really love that so here's an example",
    "start": "1317360",
    "end": "1322720"
  },
  {
    "text": "okay here's something that you might see in a Java e application perhaps like something using uh using uh spring we've",
    "start": "1322720",
    "end": "1329600"
  },
  {
    "text": "got uh U uh we want to go to the database and read all our products and",
    "start": "1329600",
    "end": "1334919"
  },
  {
    "text": "we are needing a row mapper and the row mapper is being created via an anonymous",
    "start": "1334919",
    "end": "1340279"
  },
  {
    "text": "inner class so we're implementing the map row method and then just going through extracting the things from",
    "start": "1340279",
    "end": "1346760"
  },
  {
    "text": "jdbc uh creating uh uh like a pojo and returning it okay if you if you search",
    "start": "1346760",
    "end": "1352799"
  },
  {
    "text": "through Enterprise Java code you'll see a lot of stuff that looks like that so this is a situation if you took this",
    "start": "1352799",
    "end": "1358279"
  },
  {
    "text": "library and you didn't touch it you just you just compiled and linked against it",
    "start": "1358279",
    "end": "1363679"
  },
  {
    "text": "from a Java 8 you could do this yeah so the the the comment was you",
    "start": "1363679",
    "end": "1370840"
  },
  {
    "text": "don't need the at annot the at functional annotation functional interface annotation on an interface for",
    "start": "1370840",
    "end": "1375919"
  },
  {
    "text": "you to be able to pass a Lambda to it any that has one method you can pass L question",
    "start": "1375919",
    "end": "1381600"
  },
  {
    "text": "yes class what about an abstract class with one method it's not a functional",
    "start": "1381600",
    "end": "1386840"
  },
  {
    "text": "interface you can't do that you back up",
    "start": "1386840",
    "end": "1392240"
  },
  {
    "text": "result yeah so weap need that yeah so so",
    "start": "1392240",
    "end": "1398760"
  },
  {
    "text": "basically yeah so the the difference between the two pieces of code if you actually look at them all the code inside of the body is the same which is",
    "start": "1398760",
    "end": "1405799"
  },
  {
    "text": "your whatever business logic extract from the results set of the query the the",
    "start": "1405799",
    "end": "1411279"
  },
  {
    "text": "parameters and create a a product object and then return that and then the",
    "start": "1411279",
    "end": "1416480"
  },
  {
    "text": "template query method is the one that's actually taking as its first parameter in this case uh it's taking the SQL",
    "start": "1416480",
    "end": "1423960"
  },
  {
    "text": "query and the second parameter is an implementation of a row mapper and what",
    "start": "1423960",
    "end": "1429279"
  },
  {
    "text": "the row mapper does is it's given a result set and a row number and it returns an object and this thing",
    "start": "1429279",
    "end": "1434640"
  },
  {
    "text": "collects it and returns it all as a nice list so when you sit you type this like where what lambdas are doing for you in",
    "start": "1434640",
    "end": "1441240"
  },
  {
    "text": "this case for for this old library is it's just saving you a little bit of typing uh you don't have to use an",
    "start": "1441240",
    "end": "1446640"
  },
  {
    "text": "anonymous in class you uh you just can do it with a Lambda expression and the",
    "start": "1446640",
    "end": "1452240"
  },
  {
    "text": "Lambda expression you can see in this case the Lambda expression is taking two parameters I've put the data types on",
    "start": "1452240",
    "end": "1457760"
  },
  {
    "text": "there just to make it more readable comparable to the old one yes go ahead you don't need the throws clause",
    "start": "1457760",
    "end": "1464240"
  },
  {
    "text": "on here but if it didn't if the type signatures don't match uh um okay so the",
    "start": "1464240",
    "end": "1470440"
  },
  {
    "text": "question is uh where is the throws Clause what happened to it the previous code had uh throws SQL",
    "start": "1470440",
    "end": "1478840"
  },
  {
    "text": "exception so what happened to in the other side the other so in this case",
    "start": "1478840",
    "end": "1483960"
  },
  {
    "text": "because we're doing the uh Anonymous in our class we have to replicate by the rules of the compiler the actual",
    "start": "1483960",
    "end": "1489840"
  },
  {
    "text": "signature in Java 8 is all about inference so it's like look we know that",
    "start": "1489840",
    "end": "1495960"
  },
  {
    "text": "this body of the Lambda is the body of the uh that that like the signature that",
    "start": "1495960",
    "end": "1502159"
  },
  {
    "text": "this body is attached to is defined by the functional interface which is a parameter on the",
    "start": "1502159",
    "end": "1508240"
  },
  {
    "text": "query method therefore if that throws an SQL exception and your code from in here",
    "start": "1508240",
    "end": "1514039"
  },
  {
    "text": "throws an SQL exception no problem if you throw something other than an SQL",
    "start": "1514039",
    "end": "1519520"
  },
  {
    "text": "exception it's going to barf if you throw like an IO exception it's going to",
    "start": "1519520",
    "end": "1524720"
  },
  {
    "text": "say well the Lambda it doesn't work you can't even do it you have to modify the functional",
    "start": "1524720",
    "end": "1531279"
  },
  {
    "text": "interface does that answer your question I I does tempet query",
    "start": "1531279",
    "end": "1537720"
  },
  {
    "text": "okay that bubbles up yes yes because because the reason why you have to put",
    "start": "1537720",
    "end": "1543679"
  },
  {
    "text": "the this one here is because when you call like RS the get date that operation throws a SQL exception um who's who's",
    "start": "1543679",
    "end": "1551120"
  },
  {
    "text": "confused about that anybody here can I can quickly do some coding some life coding anybody want to see some life coding are you clear about it okay two",
    "start": "1551120",
    "end": "1559320"
  },
  {
    "text": "three four five okay let's let's just demonstrate that so let's go here to",
    "start": "1559320",
    "end": "1567639"
  },
  {
    "text": "eclipse",
    "start": "1587240",
    "end": "1590240"
  },
  {
    "text": "what",
    "start": "1647159",
    "end": "1650159"
  },
  {
    "text": "ah this is not my main Eclipse workspace with all of the I'm like why is this not",
    "start": "1655640",
    "end": "1661159"
  },
  {
    "text": "working I can I'm 10 times faster when I'm typing stuff all right uh we'll just do system we'll do it the hard",
    "start": "1661159",
    "end": "1669039"
  },
  {
    "text": "way what is the compiler saying",
    "start": "1677120",
    "end": "1683000"
  },
  {
    "text": "here yeah yeah that's right there's no parameter here so let's uh let's do it like this see I shouldn't be drinking beer",
    "start": "1685840",
    "end": "1692640"
  },
  {
    "text": "while I'm talking so we'll do three throw new IO",
    "start": "1692640",
    "end": "1697720"
  },
  {
    "text": "exception",
    "start": "1697720",
    "end": "1700240"
  },
  {
    "text": "here and now it's going to say unhand type of IO exception if you ask Eclipse",
    "start": "1705039",
    "end": "1711279"
  },
  {
    "text": "to quick fix it and you do add throws it's going to add throws on the",
    "start": "1711279",
    "end": "1716320"
  },
  {
    "text": "enclosing type not on the functional interface",
    "start": "1716320",
    "end": "1721919"
  },
  {
    "text": "itself does that clarify it for you so so basically the takeaway Point",
    "start": "1721919",
    "end": "1728440"
  },
  {
    "text": "kind of going back to the slides here is that what we're doing is we're doing two things one is we're defining uh the",
    "start": "1728440",
    "end": "1735159"
  },
  {
    "text": "signature of the uh uh Anonymous function in the functional interface the",
    "start": "1735159",
    "end": "1740200"
  },
  {
    "text": "body is in the Lambda",
    "start": "1740200",
    "end": "1743158"
  },
  {
    "text": "expression all right so I'm going to show you another example here and uh it's just a self check if you see if you",
    "start": "1745279",
    "end": "1751240"
  },
  {
    "text": "guys got any questions go ahead so is it possible",
    "start": "1751240",
    "end": "1755960"
  },
  {
    "text": "to yeah sorry say that again I",
    "start": "1759320",
    "end": "1767039"
  },
  {
    "text": "yeah you said there was no function right so",
    "start": "1767039",
    "end": "1772440"
  },
  {
    "text": "the question is is there a way for me to define something that's going to take a function uh that's going to take a",
    "start": "1772440",
    "end": "1778159"
  },
  {
    "text": "Lambda but I don't want to write the functional interface myself is your question the answer is use somebody",
    "start": "1778159",
    "end": "1784799"
  },
  {
    "text": "else's interface and in the Java 8 I'll show you later there's a new package called",
    "start": "1784799",
    "end": "1790399"
  },
  {
    "text": "java. ut. function which has I think about 43 separate commonly used uh",
    "start": "1790399",
    "end": "1796720"
  },
  {
    "text": "commonly occurring uh signatures okay yes",
    "start": "1796720",
    "end": "1803080"
  },
  {
    "text": "question figure out which one yeah can you have so say you have an overloaded",
    "start": "1805200",
    "end": "1810640"
  },
  {
    "text": "method right the same method name and in one it takes a paramet of one interface the other method separate interface you",
    "start": "1810640",
    "end": "1817640"
  },
  {
    "text": "just want to write a lamb yes it so long as the signatures are compatible it can derive them it will work so for example",
    "start": "1817640",
    "end": "1824960"
  },
  {
    "text": "um can I park that yeah that that's a really good question but uh we'll come",
    "start": "1824960",
    "end": "1831679"
  },
  {
    "text": "back to it okay so let's say you've got this password encoder which has a an encode method you have now a",
    "start": "1831679",
    "end": "1839600"
  },
  {
    "text": "function um please check what is this function returning in this",
    "start": "1839600",
    "end": "1845159"
  },
  {
    "text": "case it's returning an object or land expression who says it's returning an",
    "start": "1845159",
    "end": "1850600"
  },
  {
    "text": "object raise raise your hand if you say it's returning an object raise your hand if you say it's returning a Lambda",
    "start": "1850600",
    "end": "1856919"
  },
  {
    "text": "expression and raise your hand if you don't want to vote so I'm getting very little",
    "start": "1856919",
    "end": "1862360"
  },
  {
    "text": "participation here do I need some prize incentives uh so in this case you can see that what we're doing is again uh we",
    "start": "1862360",
    "end": "1870120"
  },
  {
    "text": "have the uh we're returning a we have a Lambda expression that we're using to actually make an instance of a password",
    "start": "1870120",
    "end": "1877720"
  },
  {
    "text": "encoder and that instance of the password encoder the body of the implementation of the one method in the",
    "start": "1877720",
    "end": "1884080"
  },
  {
    "text": "functional interface is going to be calling password to uppercase you see see how cool my encoder is this is way",
    "start": "1884080",
    "end": "1889679"
  },
  {
    "text": "better than hard bleed this is this compiles this works just",
    "start": "1889679",
    "end": "1896159"
  },
  {
    "text": "fine no uh go ahead for thepose of an",
    "start": "1897760",
    "end": "1902919"
  },
  {
    "text": "analogy would you be able to say what it's doing there like say it's boxing your lamb expression there to create",
    "start": "1902919",
    "end": "1910440"
  },
  {
    "text": "passwod um I wouldn't quite chuse okay so so the so the comment was",
    "start": "1910440",
    "end": "1916679"
  },
  {
    "text": "would you say that in this case it's boxing the Lambda I wouldn't use the term boxing because boxing to me implies",
    "start": "1916679",
    "end": "1923320"
  },
  {
    "text": "that there are two distinct different types like integer Like A Primitive and an object you're going from one to the",
    "start": "1923320",
    "end": "1929000"
  },
  {
    "text": "other with boxing and unboxing unless you have a different meaning of the term that's what it means to me in the that is what I mean it's just the stage So",
    "start": "1929000",
    "end": "1936360"
  },
  {
    "text": "when you say you're asking us a question is it returning a Lambda expression or is it returning the object yeah the same",
    "start": "1936360",
    "end": "1942559"
  },
  {
    "text": "way I would be wondering is it if you was doing something like you're returning",
    "start": "1942559",
    "end": "1949279"
  },
  {
    "text": "from a method that returns ah right okay I I get I get your comment now okay so",
    "start": "1949279",
    "end": "1954360"
  },
  {
    "text": "in in case like for example you had it was returning an INT and you returned an integer object and it did the",
    "start": "1954360",
    "end": "1959840"
  },
  {
    "text": "conversions yeah there's something the compiler is doing there uh the compiler here is is turning this into an object",
    "start": "1959840",
    "end": "1967279"
  },
  {
    "text": "that where the implementation of that is going to be uh a call to that password. to upper case uh question in the",
    "start": "1967279",
    "end": "1975399"
  },
  {
    "text": "back yes",
    "start": "1975559",
    "end": "1979840"
  },
  {
    "text": "yeah uh which the which where do you want to put final you want to put Final on the password or the",
    "start": "1983880",
    "end": "1990559"
  },
  {
    "text": "salt ah I see what you mean uh we'll see some slides on that okay",
    "start": "2000600",
    "end": "2009000"
  },
  {
    "text": "so here's uh so here's we saw an example in the in the make bad encoder of how to",
    "start": "2009000",
    "end": "2014039"
  },
  {
    "text": "use a Lambda expression as a as something that is being returned from a function and in this do something method",
    "start": "2014039",
    "end": "2020960"
  },
  {
    "text": "we're seeing how to use the Lambda expression and call it and that looks like every piece of java code you've",
    "start": "2020960",
    "end": "2027200"
  },
  {
    "text": "ever written there's no trace of Lambda here if you take this do something method and you show it to somebody who's",
    "start": "2027200",
    "end": "2033000"
  },
  {
    "text": "not here tonight today who doesn't know anything about Lambda expression but knows Java they'll say yeah that's just",
    "start": "2033000",
    "end": "2038360"
  },
  {
    "text": "a method that takes a type",
    "start": "2038360",
    "end": "2043919"
  },
  {
    "text": "okay and then you can just uh create it and and call it so anybody got any questions about this yeah in the",
    "start": "2043919",
    "end": "2052000"
  },
  {
    "text": "back the second one being this guy here what is this function called that's just",
    "start": "2053399",
    "end": "2059520"
  },
  {
    "text": "called a regular Java method that returns a password encoder but it's just",
    "start": "2059520",
    "end": "2065398"
  },
  {
    "text": "how we are generating the implementation if we didn't have Lambda Expressions",
    "start": "2065399",
    "end": "2070800"
  },
  {
    "text": "somewhere inside of here we probably would have had to do return new and then",
    "start": "2070800",
    "end": "2076040"
  },
  {
    "text": "some object right return new password encoder impul return new uh I don't know",
    "start": "2076040",
    "end": "2082398"
  },
  {
    "text": "what's a what's a popular one uh um sha 512 password encoder or something",
    "start": "2082399",
    "end": "2090560"
  },
  {
    "text": "right um so that's that's what you would do in in this case or return a bcrypt",
    "start": "2090560",
    "end": "2095760"
  },
  {
    "text": "new bcrypt and you pass it the in this case we're just actually returning the",
    "start": "2095760",
    "end": "2101000"
  },
  {
    "text": "body of the object method there comments questions is that clear",
    "start": "2101000",
    "end": "2107480"
  },
  {
    "text": "it up for you great thank you I love the questions by the way I really appreciate that anybody else got any questions",
    "start": "2107480",
    "end": "2113520"
  },
  {
    "text": "about this what's the output of this it's",
    "start": "2113520",
    "end": "2119599"
  },
  {
    "text": "going to be a b c all capital letters because what's going to happen is when we call do something okay so uh password",
    "start": "2119599",
    "end": "2127200"
  },
  {
    "text": "encoder here we called the make bad encoder which is going to return uh this",
    "start": "2127200",
    "end": "2132960"
  },
  {
    "text": "uh uh an object uh which has one function in it which is the encode and",
    "start": "2132960",
    "end": "2138040"
  },
  {
    "text": "that encode function the implementation of it just does password. two uppercase",
    "start": "2138040",
    "end": "2143160"
  },
  {
    "text": "since we're passing it uh uh in the do something method since we're passing we're calling encode with ABC it'll",
    "start": "2143160",
    "end": "2150480"
  },
  {
    "text": "print capital a capital b capital c does that answer your question yeah great yes",
    "start": "2150480",
    "end": "2155599"
  },
  {
    "text": "go ahead in this particular implementation uh does this have any performance",
    "start": "2155599",
    "end": "2161240"
  },
  {
    "text": "benefits or just doing a new password encod and writing that okay so the",
    "start": "2161240",
    "end": "2167000"
  },
  {
    "text": "question is does this have any uh any performance implications over doing calling new right can you mention the",
    "start": "2167000",
    "end": "2174440"
  },
  {
    "text": "Gage um okay um so I'm going to give you a a",
    "start": "2174440",
    "end": "2180720"
  },
  {
    "text": "very short answer watch Lambda under the peak under the hood okay I won't do it justice if we got into it right now the",
    "start": "2180720",
    "end": "2187640"
  },
  {
    "text": "slightly longer answer is if you use Anon Anonymous inner classes you're generating a lot more garbage if you",
    "start": "2187640",
    "end": "2194319"
  },
  {
    "text": "think of the Lambda as a static function then they're going to use invoke Dynamic to make an object that wires directly to",
    "start": "2194319",
    "end": "2201800"
  },
  {
    "text": "that static uh uh function call and that's going to be involve their little garbage collection it's going to be very",
    "start": "2201800",
    "end": "2207640"
  },
  {
    "text": "fast however since the spec doesn't say how this should be implemented uh a lazy",
    "start": "2207640",
    "end": "2213240"
  },
  {
    "text": "implementor of this of the java8 compiler could return an anonymous interclass at that",
    "start": "2213240",
    "end": "2219119"
  },
  {
    "text": "point so I don't know the performance amplifications that will to be",
    "start": "2219119",
    "end": "2225119"
  },
  {
    "text": "determined yeah but watch that under the hood talk yeah question yeah Oh you mean that okay okay so the",
    "start": "2225119",
    "end": "2233240"
  },
  {
    "text": "question is I have let's say I have another Lambda expression somewhere else that does password. to uppercase right",
    "start": "2233240",
    "end": "2240119"
  },
  {
    "text": "would it generate the same thing I have no idea you'd have to use Java P to look at the bite code I suspect that the",
    "start": "2240119",
    "end": "2246240"
  },
  {
    "text": "current compiler doesn't do anything that fancy okay",
    "start": "2246240",
    "end": "2252160"
  },
  {
    "text": "great uh so in summary please read this while I drink more beer and degrade my abilities to life",
    "start": "2252160",
    "end": "2260319"
  },
  {
    "text": "code yeah okay you asked me a great question",
    "start": "2262680",
    "end": "2267760"
  },
  {
    "text": "I'm going to do live coding and show you what the stack Trace looks like it doesn't look",
    "start": "2267760",
    "end": "2272800"
  },
  {
    "text": "pretty great question all right yeah",
    "start": "2272800",
    "end": "2278200"
  },
  {
    "text": "not very practical if I call equals on that function and GA second don't do",
    "start": "2278200",
    "end": "2287960"
  },
  {
    "text": "that think of it as a static function as a static method but the question is what",
    "start": "2287960",
    "end": "2293800"
  },
  {
    "text": "if I would start storing those functions in some hash table and all that stuff",
    "start": "2293800",
    "end": "2300200"
  },
  {
    "text": "then I need a good right that's what people right yeah you know what I haven't really thought very hard about",
    "start": "2300200",
    "end": "2306280"
  },
  {
    "text": "that so that's going to be one of those questions and going to say I don't have a good answer for you today right but",
    "start": "2306280",
    "end": "2312800"
  },
  {
    "text": "this is this it's great that you're asking that and yeah I I think the intention behind",
    "start": "2312800",
    "end": "2319839"
  },
  {
    "text": "them isn't to kind of do that with those with with those uh with those things you typically are going to pass them to a",
    "start": "2319839",
    "end": "2326200"
  },
  {
    "text": "function and just invoke it do something I can't think of a reason why you would put them in a hash table but that",
    "start": "2326200",
    "end": "2331680"
  },
  {
    "text": "doesn't mean that you may not want to maybe you stick them then in another object that just references it that does",
    "start": "2331680",
    "end": "2337319"
  },
  {
    "text": "have have equals and and hash code a rapper type of some kind okay anybody else any other",
    "start": "2337319",
    "end": "2343480"
  },
  {
    "text": "questions yeah go ahead yes the question is can I have something of type object",
    "start": "2343480",
    "end": "2349520"
  },
  {
    "text": "and then you want to invoke the Lambda expression and assign the result to that just so I just say object object",
    "start": "2349520",
    "end": "2357160"
  },
  {
    "text": "equals and then oh right right okay so you want to write object object equals to X Arrow no because there's no",
    "start": "2357160",
    "end": "2363880"
  },
  {
    "text": "function signature for the uh like because what the remember the Lambda expression defines the body of a",
    "start": "2363880",
    "end": "2369880"
  },
  {
    "text": "function and you need to attach that to its signature and if the left hand side",
    "start": "2369880",
    "end": "2375359"
  },
  {
    "text": "has more than one method the compiler will get confused and say what do I actually attach it to I have no",
    "start": "2375359",
    "end": "2382480"
  },
  {
    "text": "idea sorry yous would be able it right uh well in",
    "start": "2384720",
    "end": "2392200"
  },
  {
    "text": "so if you set object object make bad encoder like here you set object here that's fine but it wouldn't do you",
    "start": "2392200",
    "end": "2398200"
  },
  {
    "text": "anything yeah it's just you'd have to cast it back okay right like this is",
    "start": "2398200",
    "end": "2407240"
  },
  {
    "text": "uh okay all right so I'll assume that this",
    "start": "2407240",
    "end": "2412359"
  },
  {
    "text": "is uh we can kind of move on from here so we we've talked now hopefully you're",
    "start": "2412359",
    "end": "2417520"
  },
  {
    "text": "understanding the idea of a a functional interface uh it's how you interact with lambdas and call them and how you define",
    "start": "2417520",
    "end": "2423800"
  },
  {
    "text": "their signatures so let's take a look now at uh variable capture so the lambdas are",
    "start": "2423800",
    "end": "2430599"
  },
  {
    "text": "going to be useless if you can't if they can't see the things in the code surrounding them and uh so lambdas can interact with",
    "start": "2430599",
    "end": "2438800"
  },
  {
    "text": "variables defined outside of the body of the Lambda and using variables outside the body of the Lambda is typically",
    "start": "2438800",
    "end": "2444839"
  },
  {
    "text": "called variable capture so you'll start seeing this word floating around in the docs and stuff like that the capture word so here's an simple example from",
    "start": "2444839",
    "end": "2451760"
  },
  {
    "text": "that uh we'll stick with our our simple uh 1 2 3 4 5 list and what we're going to do now is just",
    "start": "2451760",
    "end": "2458079"
  },
  {
    "text": "say uh we want to print out X Plus VAR right everybody can see that totally",
    "start": "2458079",
    "end": "2463720"
  },
  {
    "text": "simple prints out 11 12 13 14 and 15 any questions about that see it just works",
    "start": "2463720",
    "end": "2470720"
  },
  {
    "text": "right now let's try changing the VAR inside so we go in",
    "start": "2470720",
    "end": "2477240"
  },
  {
    "text": "here and we say we want to do VAR Plus+ all right that's let's have a thing who says you're going to get a",
    "start": "2477240",
    "end": "2483079"
  },
  {
    "text": "compiler error all right few people who says this will work raise your hand who's like I",
    "start": "2483079",
    "end": "2489920"
  },
  {
    "text": "have no idea I need beer you will get this compiler error",
    "start": "2489920",
    "end": "2495359"
  },
  {
    "text": "please read the compiler error same for Anonymous in our class it",
    "start": "2495359",
    "end": "2501280"
  },
  {
    "text": "says the local variable VAR defined in an enclosing scope must be final or",
    "start": "2501280",
    "end": "2506760"
  },
  {
    "text": "effectively final so what the compiler was doing in this slide here is saying",
    "start": "2506760",
    "end": "2514079"
  },
  {
    "text": "hey nobody nobody changes the value of the VAR it's as if you had typed the word Final in front of it but since you",
    "start": "2514079",
    "end": "2520200"
  },
  {
    "text": "didn't I'm not going to make you go back and type it I'll just infer that it's actually",
    "start": "2520200",
    "end": "2526520"
  },
  {
    "text": "final yes is it still infer as final after the ex",
    "start": "2526520",
    "end": "2532400"
  },
  {
    "text": "of function you mean like that yes yes so in this example here and",
    "start": "2532400",
    "end": "2540000"
  },
  {
    "text": "I'll just go back say let's try to trick the compiler we'll set VAR equals to 50",
    "start": "2540000",
    "end": "2545079"
  },
  {
    "text": "here and the compiler will say say error local variable VAR defined an enclosing",
    "start": "2545079",
    "end": "2550440"
  },
  {
    "text": "uh uh scope must be final or effectively final",
    "start": "2550440",
    "end": "2555599"
  },
  {
    "text": "right comments",
    "start": "2555599",
    "end": "2559040"
  },
  {
    "text": "questions all right so how about static variables you can do that too so all I",
    "start": "2561359",
    "end": "2566839"
  },
  {
    "text": "did was just exactly the same code but I just moved the VAR out into a static variable comments questions about that",
    "start": "2566839",
    "end": "2575480"
  },
  {
    "text": "how about instance variables yes sorry there was question back",
    "start": "2575480",
    "end": "2580559"
  },
  {
    "text": "there right okay so let me try to repeat the the question if I I'm going to paraphrase it so the question is if we",
    "start": "2580559",
    "end": "2587880"
  },
  {
    "text": "go back to say this point here you're saying that if you are using spring or",
    "start": "2587880",
    "end": "2593599"
  },
  {
    "text": "some other tools you can try to you could write legal code and then go and try to change something right that's say",
    "start": "2593599",
    "end": "2599119"
  },
  {
    "text": "so remember what I said that you would uh take this code and what what what are",
    "start": "2599119",
    "end": "2604359"
  },
  {
    "text": "you supposed to think about the Lambda expression as a a static function okay so if you were to translate this into a",
    "start": "2604359",
    "end": "2611040"
  },
  {
    "text": "static function here how many parameters would you have on the static",
    "start": "2611040",
    "end": "2616200"
  },
  {
    "text": "function okay two okay what are those two parameters the X which is of type",
    "start": "2616200",
    "end": "2622440"
  },
  {
    "text": "integer because the list is an integer right and the second thing would be VAR",
    "start": "2622440",
    "end": "2627520"
  },
  {
    "text": "and it would be final so the signature that you would generate from this would be something",
    "start": "2627520",
    "end": "2634280"
  },
  {
    "text": "like the following just to to make it",
    "start": "2634280",
    "end": "2640280"
  },
  {
    "text": "concrete",
    "start": "2666040",
    "end": "2669040"
  },
  {
    "text": "right um I'm not sure I'm understanding your question here so you're saying if this is not being treated as effectively",
    "start": "2691200",
    "end": "2697680"
  },
  {
    "text": "final the value wouldn't be VAR equals to",
    "start": "2697680",
    "end": "2701880"
  },
  {
    "text": "10 right okay so so if in the case of a primitive it's it's harder but if it's",
    "start": "2703240",
    "end": "2708359"
  },
  {
    "text": "was an object type it's the reference that you can't change but you could call methods on that object and mutate",
    "start": "2708359",
    "end": "2716119"
  },
  {
    "text": "it like just like you can with an anonymous ner class so think of the rules here as the same as Anonymous in",
    "start": "2716119",
    "end": "2722119"
  },
  {
    "text": "our class question you know those are those are",
    "start": "2722119",
    "end": "2727359"
  },
  {
    "text": "all the edge cases let's leave them for another talk okay",
    "start": "2727359",
    "end": "2735200"
  },
  {
    "text": "um so we did that one okay so that leaves us the fun part here okay you need to be awake for this part everybody",
    "start": "2736000",
    "end": "2742000"
  },
  {
    "text": "if you're feeling sleepy tell the person next to you to punch you in the face or or spill your drink on your La your",
    "start": "2742000",
    "end": "2749000"
  },
  {
    "text": "neighbor's laptop that should wake you up uh oops right so what happens with the this pointer right what happens if",
    "start": "2749000",
    "end": "2755280"
  },
  {
    "text": "you go this dot something inside of a Lambda expression so let's say we've got a class called example and notice that",
    "start": "2755280",
    "end": "2761400"
  },
  {
    "text": "I've created an instance object there and this instance object now we've",
    "start": "2761400",
    "end": "2768240"
  },
  {
    "text": "got our a private int VAR and we've got a private list of integers so everybody",
    "start": "2768240",
    "end": "2773640"
  },
  {
    "text": "clear on this now we're going to have our method called do something and we",
    "start": "2773640",
    "end": "2778880"
  },
  {
    "text": "are going to have a main method and what our main method is going to do is just going to do instance. do something",
    "start": "2778880",
    "end": "2784280"
  },
  {
    "text": "everybody following the code so far okay good now we're going to call integers do for",
    "start": "2784280",
    "end": "2790640"
  },
  {
    "text": "each and inside of it what we're going to do is X arrow and we're going to do",
    "start": "2790640",
    "end": "2796240"
  },
  {
    "text": "this dot VAR all right so this code compiles so",
    "start": "2796240",
    "end": "2803559"
  },
  {
    "text": "what does that tell you about what does the this point to inside of the body of the Lambda",
    "start": "2803559",
    "end": "2810119"
  },
  {
    "text": "expression method oh there's no this inside of a static method but I could pass it as the",
    "start": "2815839",
    "end": "2821800"
  },
  {
    "text": "first parameter so remember the compiler is generating that",
    "start": "2821800",
    "end": "2828599"
  },
  {
    "text": "method um so that hopefully tells you that the this is actually the this of",
    "start": "2828599",
    "end": "2833720"
  },
  {
    "text": "the enclosing scope you're not unlike an anonymous inner class which would have its own",
    "start": "2833720",
    "end": "2840040"
  },
  {
    "text": "this the this inside of the Lambda is going to is going to actually point to the outside one so if you actually do if",
    "start": "2840040",
    "end": "2847079"
  },
  {
    "text": "this equals equals to instance this will actually print out that they are the",
    "start": "2847079",
    "end": "2852160"
  },
  {
    "text": "same right comments questions about that who's starting to see the difference between a Lambda and an anonymous",
    "start": "2852480",
    "end": "2859880"
  },
  {
    "text": "interclass all right I'm glad you were patient then let me actually wait till",
    "start": "2859880",
    "end": "2865520"
  },
  {
    "text": "this point to to explain that so if we now say okay let's take a",
    "start": "2865520",
    "end": "2872319"
  },
  {
    "text": "look at what happens if we did exactly the same thing remember the for each is expecting",
    "start": "2872319",
    "end": "2877400"
  },
  {
    "text": "a consumer interface so we could actually rewrite this code like that so now all I did was it's the same",
    "start": "2877400",
    "end": "2885440"
  },
  {
    "text": "outside structure but inside I've got a new consumer integer and I'm overwriting",
    "start": "2885440",
    "end": "2891319"
  },
  {
    "text": "the accept method and I'm calling int now if I say",
    "start": "2891319",
    "end": "2896960"
  },
  {
    "text": "in here I can't say uh if I want the VAR that's outside I have to say example.",
    "start": "2896960",
    "end": "2903520"
  },
  {
    "text": "this.v VAR right here example. this.v VAR I can't do that without uh like the",
    "start": "2903520",
    "end": "2911319"
  },
  {
    "text": "way I did with the Lambda expression who's had to write this kind of code to get the list on the outside",
    "start": "2911319",
    "end": "2918000"
  },
  {
    "text": "object yeah it's kind of fun right um in the other thing that you see",
    "start": "2918000",
    "end": "2923760"
  },
  {
    "text": "here is you see that I've got a private variable that's inside of the anonymous in in our class right you cannot have",
    "start": "2923760",
    "end": "2930599"
  },
  {
    "text": "that inside of a Lambda expression there's no ability for you because the Lambda expression is just the body of of",
    "start": "2930599",
    "end": "2937480"
  },
  {
    "text": "the signature defined in the functional interface that the Lambda expression will be assigned",
    "start": "2937480",
    "end": "2942640"
  },
  {
    "text": "to uh and that always happens because either you assign it to a variable or you pass it as a parameter or you return",
    "start": "2942640",
    "end": "2949599"
  },
  {
    "text": "it from something and in all those three cases there's a type okay comments questions about",
    "start": "2949599",
    "end": "2955559"
  },
  {
    "text": "this yes uh which",
    "start": "2955559",
    "end": "2964079"
  },
  {
    "text": "one this one works this is perfectly compilable runs and everything you put",
    "start": "2965720",
    "end": "2971240"
  },
  {
    "text": "exle oh could you put you know what I didn't try that so I haven't try",
    "start": "2971240",
    "end": "2977040"
  },
  {
    "text": "it yeah I haven't tried that one",
    "start": "2977040",
    "end": "2982760"
  },
  {
    "text": "right so lambas versus Anonymous inner classes now we can talk about why they're not the same first of all the",
    "start": "2982760",
    "end": "2988280"
  },
  {
    "text": "inner classes can have a state which you cannot have in in in uh in the lambdas",
    "start": "2988280",
    "end": "2993920"
  },
  {
    "text": "the they can have as many variables and objects inside them as you want the inner classes can have multiple methods right you can have five methods in your",
    "start": "2993920",
    "end": "3000559"
  },
  {
    "text": "Anonymous inner class no problem with the Lambda you have one um and finally",
    "start": "3000559",
    "end": "3006079"
  },
  {
    "text": "uh the this pointer is behaves differently uh between uh uh Anonymous",
    "start": "3006079",
    "end": "3011440"
  },
  {
    "text": "inter classes and lambdas which tells you that lambdas are not the same thing as Anonymous in our classes although the",
    "start": "3011440",
    "end": "3018640"
  },
  {
    "text": "compiler could choose to generate an anonymous inner class for every Lambda instance which would not be a very",
    "start": "3018640",
    "end": "3024880"
  },
  {
    "text": "efficient way to do things but it could comments",
    "start": "3024880",
    "end": "3030680"
  },
  {
    "text": "questions so that uh takes us back now to Java util function so you we now know these functional interfaces exist and",
    "start": "3040559",
    "end": "3046880"
  },
  {
    "text": "the question becomes um do I have to Define this interface like how many times do you have to Define I have a",
    "start": "3046880",
    "end": "3052760"
  },
  {
    "text": "something that uh like it takes I have a function that takes an argument ment of type T and returns nothing you don't",
    "start": "3052760",
    "end": "3059599"
  },
  {
    "text": "have to go and Define that interface you could just use the consumer interface that's part of the Java util do function",
    "start": "3059599",
    "end": "3065680"
  },
  {
    "text": "or maybe you have a function that takes no argument and returns something then you would use supplier or maybe you have",
    "start": "3065680",
    "end": "3073839"
  },
  {
    "text": "a function that takes an argument returns true or false then you would use predicate or maybe you have a function",
    "start": "3073839",
    "end": "3080400"
  },
  {
    "text": "that takes an argument and returns an argument then you would use function of T comma R right so for the most common",
    "start": "3080400",
    "end": "3086799"
  },
  {
    "text": "cases that you will run into for I need a Lambda that Tak something and return something look in Java util function",
    "start": "3086799",
    "end": "3092559"
  },
  {
    "text": "before you go off and code your own interface everybody clear about",
    "start": "3092559",
    "end": "3097680"
  },
  {
    "text": "that okay so that takes us through we we've",
    "start": "3097680",
    "end": "3104359"
  },
  {
    "text": "learned uh the syntax the fun what a functional interface is we learned how the Lambda interacts with the outside",
    "start": "3104359",
    "end": "3109559"
  },
  {
    "text": "world the next thing is Method references which is this problem here so the Lambda is a way to define an",
    "start": "3109559",
    "end": "3115720"
  },
  {
    "text": "anonymous inter function but hey what if I already have written the function somewhere",
    "start": "3115720",
    "end": "3120920"
  },
  {
    "text": "else do I have to rewrite the function just because I want to use it as a",
    "start": "3120920",
    "end": "3126240"
  },
  {
    "text": "Lambda I should there should be a way for me to be able to take an existing function and pass it to a place where a",
    "start": "3126240",
    "end": "3133559"
  },
  {
    "text": "Lambda could be passed and that's what method references do so let's see some simple examples again now I've got this",
    "start": "3133559",
    "end": "3140880"
  },
  {
    "text": "uh static do something method and uh",
    "start": "3140880",
    "end": "3147359"
  },
  {
    "text": "all right so here's what we have so what we we have this do something method and we want to call it so one way to call it",
    "start": "3147359",
    "end": "3153520"
  },
  {
    "text": "is I could define a consumer um and I can say x Arrow do something X and then",
    "start": "3153520",
    "end": "3160079"
  },
  {
    "text": "when you call consumer. accept and it's going to print one uh because we passed one to the accept function right who's",
    "start": "3160079",
    "end": "3166000"
  },
  {
    "text": "understanding how this code Works raise your hand everybody else is sleeping okay I",
    "start": "3166000",
    "end": "3171119"
  },
  {
    "text": "should all right um but that would be pretty boring and it's kind of a bit",
    "start": "3171119",
    "end": "3176880"
  },
  {
    "text": "redundant so instead what you can do is you can just say example colon colon do something and what that says is I would",
    "start": "3176880",
    "end": "3184960"
  },
  {
    "text": "like you to take this consumer interface take its functional um uh take the",
    "start": "3184960",
    "end": "3191440"
  },
  {
    "text": "method the single method that's in the in that consumer interface and I want you to use for the implementation of",
    "start": "3191440",
    "end": "3197680"
  },
  {
    "text": "that method use do something who's with me on that comments",
    "start": "3197680",
    "end": "3205440"
  },
  {
    "text": "questions Yeah question in the back yes in this case we are referencing",
    "start": "3205440",
    "end": "3213359"
  },
  {
    "text": "a static method and there are four different types of method references and I'll give you an example for each one",
    "start": "3213359",
    "end": "3219520"
  },
  {
    "text": "okay yes okay so the question was uh if the",
    "start": "3219520",
    "end": "3225200"
  },
  {
    "text": "do something accepted more than one parameter that's not the issue the issue is what it returns that's your question really yeah it doesn't matter if takes",
    "start": "3225200",
    "end": "3232480"
  },
  {
    "text": "two integers no it would it would definitely matter if it took two integers it wouldn't work because again",
    "start": "3232480",
    "end": "3239160"
  },
  {
    "text": "what you have here is the left hand side is the one that's specifying the method signature inside of the consumer has a",
    "start": "3239160",
    "end": "3245720"
  },
  {
    "text": "single method called accept which takes a parameter and returns nothing a single a single parameter therefore you can",
    "start": "3245720",
    "end": "3252760"
  },
  {
    "text": "method use a method reference for anything that has uh one parameter and",
    "start": "3252760",
    "end": "3258240"
  },
  {
    "text": "returns nothing and the parameter type must match this type right here so so",
    "start": "3258240",
    "end": "3264280"
  },
  {
    "text": "because we said it's a consumer of integer if we had actually changed to do something to take a string this would",
    "start": "3264280",
    "end": "3270400"
  },
  {
    "text": "not compile yeah uh good question uh the",
    "start": "3270400",
    "end": "3275920"
  },
  {
    "text": "answer is you got to still do the Wild Card business and all that stuff you can get really complicated looking",
    "start": "3275920",
    "end": "3282240"
  },
  {
    "text": "Expressions how about for overloads um sorry say that again how about for overloads of what argument",
    "start": "3282240",
    "end": "3289960"
  },
  {
    "text": "number of arguments so let's say oh uh well then",
    "start": "3289960",
    "end": "3295440"
  },
  {
    "text": "it would just pick the one that matches if it finds one that matches then it would be yeah I'm sure it handles it",
    "start": "3295440",
    "end": "3300640"
  },
  {
    "text": "it'll handle that case uh yes you can use I mean well",
    "start": "3300640",
    "end": "3305720"
  },
  {
    "text": "we're using generics right here right the method signatures can definitely have generics on them and you'll see",
    "start": "3305720",
    "end": "3311079"
  },
  {
    "text": "that if you actually look in the in the in the jdk code base you'll see that they do that a",
    "start": "3311079",
    "end": "3316559"
  },
  {
    "text": "lot uh so again the signature of the reference method needs to match the signature of the functional",
    "start": "3316559",
    "end": "3322039"
  },
  {
    "text": "interface so here's what about a Constructor what if you want to reference a Constructor",
    "start": "3322039",
    "end": "3327079"
  },
  {
    "text": "um so for example let's say you end up writing uh a function here we're using now a different interface uh it takes a",
    "start": "3327079",
    "end": "3333440"
  },
  {
    "text": "string it's a function that takes a string and returns an integer and what we're going to do is say x new integer",
    "start": "3333440",
    "end": "3338960"
  },
  {
    "text": "just pass a string to new integer and and that that should work and what we",
    "start": "3338960",
    "end": "3344039"
  },
  {
    "text": "can what we do here is we can then call mapper 1. apply pass number 11 and it's",
    "start": "3344039",
    "end": "3349680"
  },
  {
    "text": "going to return us an integer object of 11 so you could write it that way but again uh you could also write it this",
    "start": "3349680",
    "end": "3356880"
  },
  {
    "text": "way so you could say integer colon colon",
    "start": "3356880",
    "end": "3362039"
  },
  {
    "text": "new and what that's saying is that uh we would like you to create a function this",
    "start": "3362039",
    "end": "3368720"
  },
  {
    "text": "what you're telling the compiler Mr compiler please create me a function which has a method um and that method is",
    "start": "3368720",
    "end": "3377319"
  },
  {
    "text": "going to take a string and it's going to return an integer and in the body of that method uh invoke the new",
    "start": "3377319",
    "end": "3384280"
  },
  {
    "text": "Constructor on uh on Integer and pass it the p in",
    "start": "3384280",
    "end": "3391280"
  },
  {
    "text": "parameter so the first few times you see code like like this you're going to have to like okay let me write down on pen",
    "start": "3391720",
    "end": "3397240"
  },
  {
    "text": "and paper what is this code doing so until you get used to it okay",
    "start": "3397240",
    "end": "3404200"
  },
  {
    "text": "comments questions right um so where this is",
    "start": "3404200",
    "end": "3411079"
  },
  {
    "text": "quite useful is when you're working with streams you'll find that this becomes incredibly useful uh what about if you wanted a",
    "start": "3411079",
    "end": "3417640"
  },
  {
    "text": "specific method so let's say your Lambda expression now was a consumer that went",
    "start": "3417640",
    "end": "3422960"
  },
  {
    "text": "out to system.out now system.out is a as an object right it's a specific object",
    "start": "3422960",
    "end": "3428960"
  },
  {
    "text": "and you wanted to call the print alen method on that object can you replicate the same thing with a method reference",
    "start": "3428960",
    "end": "3435000"
  },
  {
    "text": "yes you can you could just do it this way system.out colon colon print",
    "start": "3435000",
    "end": "3441359"
  },
  {
    "text": "Ln so you're just putting the the actual object uh reference that you want to",
    "start": "3441359",
    "end": "3446599"
  },
  {
    "text": "invoke the methadon but you're doing double colons like you would in C++ but yeah that's",
    "start": "3446599",
    "end": "3453000"
  },
  {
    "text": "kind of okayy questions comments yeah in the previous slide you didn't you didn't",
    "start": "3453000",
    "end": "3461000"
  },
  {
    "text": "specify to that I don't need to do that because that's implied by the function",
    "start": "3461880",
    "end": "3468880"
  },
  {
    "text": "signature because when you look inside of the function interface and you look at the method that's defined there you",
    "start": "3468880",
    "end": "3474760"
  },
  {
    "text": "it it takes a string and returns an integer so it's implied that whatever parameter is being passed is going to be",
    "start": "3474760",
    "end": "3482039"
  },
  {
    "text": "passed to the Constructor",
    "start": "3482039",
    "end": "3486400"
  },
  {
    "text": "okay all right so that's how you do it for an object uh you can also uh",
    "start": "3487799",
    "end": "3493319"
  },
  {
    "text": "reference a specific method so let's say you had X and you wanted to call x. two",
    "start": "3493319",
    "end": "3499400"
  },
  {
    "text": "uppercase instead of writing X Arrow x. to uppercase you could say string colon colon. to uppercase and what that means",
    "start": "3499400",
    "end": "3507119"
  },
  {
    "text": "is invoke the two uppercase method on the parameter that's passed to the Lambda so when you call mapper 2. apply",
    "start": "3507119",
    "end": "3514400"
  },
  {
    "text": "with DF it's going to take the DF string and call the two uppercase method on",
    "start": "3514400",
    "end": "3520760"
  },
  {
    "text": "that so the whole idea of takeaway Point here is that the whole idea of method",
    "start": "3521240",
    "end": "3526440"
  },
  {
    "text": "references is if you already have a piece of code that you've already written you don't need to just ceremonially type A oneline Lambda",
    "start": "3526440",
    "end": "3533720"
  },
  {
    "text": "expression that just turns around and calls it you can just use method references to point at it and say the",
    "start": "3533720",
    "end": "3539240"
  },
  {
    "text": "body of this Lambda is really defined by this other method over there yeah",
    "start": "3539240",
    "end": "3546520"
  },
  {
    "text": "question it kind of has to yes yeah so the question does it type check that that method is there yes you can't just",
    "start": "3549319",
    "end": "3555640"
  },
  {
    "text": "go here and say string callon XXX to be like there's no XX over",
    "start": "3555640",
    "end": "3561880"
  },
  {
    "text": "there no under the class this cuz because it says this is the instance",
    "start": "3562839",
    "end": "3567920"
  },
  {
    "text": "method reference to arbitrary object of a particular type so if the type that",
    "start": "3567920",
    "end": "3573119"
  },
  {
    "text": "you pass into it has that method it calls the most specific implementation",
    "start": "3573119",
    "end": "3578720"
  },
  {
    "text": "of that and if that was from a base class or it was from a derived class it'll do the right thing just as if you",
    "start": "3578720",
    "end": "3585000"
  },
  {
    "text": "had written it by hand okay great question uh so here's a summary in the",
    "start": "3585000",
    "end": "3591880"
  },
  {
    "text": "interest of time I'm going to go like that right you you can look that up online so that brings us to the last uh",
    "start": "3591880",
    "end": "3599200"
  },
  {
    "text": "topic which is uh like involving new language features okay so start in terms",
    "start": "3599200",
    "end": "3604440"
  },
  {
    "text": "of new language features we saw the arrow notation for lambdas and we saw method references um which was new",
    "start": "3604440",
    "end": "3611280"
  },
  {
    "text": "language syntax so the next thing we want to look at is default methods and",
    "start": "3611280",
    "end": "3617160"
  },
  {
    "text": "those are awesome like that's my favorite feature in Java 8 forget lambdas that's great but default methods",
    "start": "3617160",
    "end": "3624640"
  },
  {
    "text": "are just freaking awesome here's why they're awesome because uh you know",
    "start": "3624640",
    "end": "3629920"
  },
  {
    "text": "because of the interface Evolution problem so what when they built the lambdas they're like okay we need to use",
    "start": "3629920",
    "end": "3635359"
  },
  {
    "text": "those with the existing Java util libraries right lists and Maps that's the natural place to use them with but",
    "start": "3635359",
    "end": "3641240"
  },
  {
    "text": "all of those things are defined with interfaces right we've got iterable collection and if we go and we add",
    "start": "3641240",
    "end": "3647440"
  },
  {
    "text": "methods like for each which I already showed you if we added uh for each method to one of those interfaces",
    "start": "3647440",
    "end": "3654200"
  },
  {
    "text": "everybody who's implemented that interface has to has to re has to provide an implementation of that method",
    "start": "3654200",
    "end": "3660079"
  },
  {
    "text": "right so old code that's already compiled will not work with new version",
    "start": "3660079",
    "end": "3665200"
  },
  {
    "text": "of java that's a no no so they're like it has to be binary Backward Compatible",
    "start": "3665200",
    "end": "3670240"
  },
  {
    "text": "which means there's got to be a way now to add a method to an interface and",
    "start": "3670240",
    "end": "3675480"
  },
  {
    "text": "provide the implementation of the method in the interface so as to provide the ability",
    "start": "3675480",
    "end": "3682559"
  },
  {
    "text": "to be Backward Compatible so the problem that they solve with the default method is how can published interfaces be",
    "start": "3682559",
    "end": "3689520"
  },
  {
    "text": "evolved without breaking existing implementation so I'm so excited about it because I have published interfaces",
    "start": "3689520",
    "end": "3694920"
  },
  {
    "text": "that where I could use this so let's see some examples of that",
    "start": "3694920",
    "end": "3699960"
  },
  {
    "text": "so a default method is uh on a Java interface uh provides an implementation",
    "start": "3699960",
    "end": "3706520"
  },
  {
    "text": "body that goes with it so let's say we take itable this is actually from the jdk now okay this is code copy and",
    "start": "3706520",
    "end": "3712160"
  },
  {
    "text": "pasted from the jdk so we know that itol you used to just have a single method called iterator right now it has this",
    "start": "3712160",
    "end": "3719880"
  },
  {
    "text": "extra method go ahead and read it which should make sense at this",
    "start": "3719880",
    "end": "3725000"
  },
  {
    "text": "point so who's who's now understands how for each is implemented there it is that's the code",
    "start": "3735880",
    "end": "3742319"
  },
  {
    "text": "for for each right from the jdk copy and paste it",
    "start": "3742319",
    "end": "3747839"
  },
  {
    "text": "um objects required. not just checks to see that the parameter that you're",
    "start": "3750839",
    "end": "3756520"
  },
  {
    "text": "passing has not is not null it throws null poter exception that's all it",
    "start": "3756520",
    "end": "3762880"
  },
  {
    "text": "does any",
    "start": "3762880",
    "end": "3766119"
  },
  {
    "text": "questions right who could write this code themselves without like so the only thing that's different here is you see",
    "start": "3768520",
    "end": "3774000"
  },
  {
    "text": "it's got the keyword default at the start of it",
    "start": "3774000",
    "end": "3781200"
  },
  {
    "text": "yes uh this class objects is something new in Java H just has a bunch of utility methods for working with objects",
    "start": "3782079",
    "end": "3788960"
  },
  {
    "text": "okay uh we don't need to get into it you can look it up uh here's another one that's there",
    "start": "3788960",
    "end": "3795480"
  },
  {
    "text": "spliterator okay so that's another thing that all",
    "start": "3795480",
    "end": "3801240"
  },
  {
    "text": "iterators are able to do they can they can split themselves up and have children",
    "start": "3801240",
    "end": "3806640"
  },
  {
    "text": "and the the the spliterator is pretty cool uh we um because it's a it's a it's",
    "start": "3806640",
    "end": "3812400"
  },
  {
    "text": "an iterator that's designed for parallelism so with the spliterator you can take uh something and say split it",
    "start": "3812400",
    "end": "3819200"
  },
  {
    "text": "up into different pieces so it can run on multiple threads uh it doesn't have data races like you know the problem",
    "start": "3819200",
    "end": "3824920"
  },
  {
    "text": "with iterator is you go uh has next and then you go next right because if has",
    "start": "3824920",
    "end": "3830039"
  },
  {
    "text": "next and what can happen between the if has next and the next piece synchronization data erases so we",
    "start": "3830039",
    "end": "3836880"
  },
  {
    "text": "don't want those therefore the this spliterator is is there to allow you to",
    "start": "3836880",
    "end": "3841960"
  },
  {
    "text": "create streams out of it we'll talk about that later okay so that's the default method so uh what about inheritance",
    "start": "3841960",
    "end": "3849559"
  },
  {
    "text": "right everybody is going like ah default methods this looks like an m++ multiple inheritance uh no it's not okay so uh so",
    "start": "3849559",
    "end": "3857680"
  },
  {
    "text": "let's say we have an interface test which has a default method do something and that prints out test so keep it",
    "start": "3857680",
    "end": "3863039"
  },
  {
    "text": "really simple read the code in the bottom please what do you guys think it will print",
    "start": "3863039",
    "end": "3869119"
  },
  {
    "text": "out now what is so special about this what is the test imput",
    "start": "3869119",
    "end": "3875200"
  },
  {
    "text": "implementing it's implementing the test interface right but is there an implementation of the do something",
    "start": "3875400",
    "end": "3881000"
  },
  {
    "text": "method in test impo that's the whole point of default",
    "start": "3881000",
    "end": "3886720"
  },
  {
    "text": "methods you can put the implementation in the interface and every class that implements that interface inherits that",
    "start": "3886720",
    "end": "3894640"
  },
  {
    "text": "implementation can you overwrite it wait till the next slide great question",
    "start": "3894640",
    "end": "3901799"
  },
  {
    "text": "already sorry yeah that would be a",
    "start": "3901799",
    "end": "3907480"
  },
  {
    "text": "typo that's because I I cut and pasted those examples from working Eclipse examples but then I started removing",
    "start": "3907480",
    "end": "3914240"
  },
  {
    "text": "like the little one and twos in there so that it would fit better on the slide and I I clearly missed that one there",
    "start": "3914240",
    "end": "3920200"
  },
  {
    "text": "thank you yes what about name Clash uh name Clash tell me more what do you mean",
    "start": "3920200",
    "end": "3925520"
  },
  {
    "text": "by that imagine",
    "start": "3925520",
    "end": "3929520"
  },
  {
    "text": "have ah wait for another slide let's let's move on then so uh how would you",
    "start": "3932319",
    "end": "3938039"
  },
  {
    "text": "overwrite it so that was the first question that was asked and the answer is you just override",
    "start": "3938039",
    "end": "3944039"
  },
  {
    "text": "it you just provide an implementation and if you do that it will use the implementation that comes with the class",
    "start": "3944039",
    "end": "3951200"
  },
  {
    "text": "rather than the one that comes from the interface just like you would with regular class inheritance yes question",
    "start": "3951200",
    "end": "3956680"
  },
  {
    "text": "and would that comp",
    "start": "3956680",
    "end": "3963799"
  },
  {
    "text": "you of ear of something yes yes yes that interface writers came along so the",
    "start": "3964760",
    "end": "3972440"
  },
  {
    "text": "question was uh what if I already had a class that had an implementation of do something and then I changed it to a B I",
    "start": "3972440",
    "end": "3978559"
  },
  {
    "text": "went and changed it to a default and no over and well the at override is just a",
    "start": "3978559",
    "end": "3984039"
  },
  {
    "text": "hint to the compiler right that doesn't really impact it's not in the bite code right the at override so so if you take",
    "start": "3984039",
    "end": "3989920"
  },
  {
    "text": "an existing class and you go and you change it to have a default implementation the existing people that",
    "start": "3989920",
    "end": "3996839"
  },
  {
    "text": "implemented it they would still use their implementation which is probably the behavior you would want okay great",
    "start": "3996839",
    "end": "4002960"
  },
  {
    "text": "question anybody else so we can call it and hey look I actually removed the ones",
    "start": "4002960",
    "end": "4008079"
  },
  {
    "text": "and twos from there",
    "start": "4008079",
    "end": "4011839"
  },
  {
    "text": "yes yeah you can still call the parent one just wait you're going to see one okay so um what if I have a hierarchy of",
    "start": "4014000",
    "end": "4022680"
  },
  {
    "text": "them so I've got my test and what if I have a test a which extends test which",
    "start": "4022680",
    "end": "4028880"
  },
  {
    "text": "is another interface which now is do something prints out test a and then I",
    "start": "4028880",
    "end": "4034079"
  },
  {
    "text": "do this what do you guys think it will print out now test a yeah because it's going to",
    "start": "4034079",
    "end": "4041680"
  },
  {
    "text": "basically just like inheritance you take the closest one so this was this default method was an override of a previous",
    "start": "4041680",
    "end": "4048559"
  },
  {
    "text": "default method who's with me so far still following along okay",
    "start": "4048559",
    "end": "4054799"
  },
  {
    "text": "great uh all right let's set up a conflict somebody was asking about that so what if we have test interface a",
    "start": "4054799",
    "end": "4060880"
  },
  {
    "text": "which has a do something and an interface B which has a do something and then what we're going to do is have an",
    "start": "4060880",
    "end": "4067240"
  },
  {
    "text": "AB impul that implements A and B which one is it going to pick anybody want to take a",
    "start": "4067240",
    "end": "4073400"
  },
  {
    "text": "guess compile error okay guys read the read the compile",
    "start": "4073400",
    "end": "4079799"
  },
  {
    "text": "error where I drink more",
    "start": "4079799",
    "end": "4082680"
  },
  {
    "text": "beer so you you don't get any unpredictable Behavior okay if there's a",
    "start": "4086039",
    "end": "4091119"
  },
  {
    "text": "potential for conflict the compiler will complain and you'll be forced to fix it so how do you fix",
    "start": "4091119",
    "end": "4097000"
  },
  {
    "text": "it well exactly override it and when you override it uh you'll see here that what",
    "start": "4097000",
    "end": "4104238"
  },
  {
    "text": "it's doing is I've got a in the in the overwritten do something I'm just calling my own system out print and ab",
    "start": "4104239",
    "end": "4110400"
  },
  {
    "text": "impul but also I'm saying a. super. do something somebody was asking can I call",
    "start": "4110400",
    "end": "4116758"
  },
  {
    "text": "up to the one in the previous interface the answer is yes you can yes I make that top one",
    "start": "4116759",
    "end": "4124600"
  },
  {
    "text": "final uh what do you mean which top one what do you mean",
    "start": "4124600",
    "end": "4131198"
  },
  {
    "text": "by well you doesn't make sense to make a default method final because it defeats the whole point of it",
    "start": "4132520",
    "end": "4138640"
  },
  {
    "text": "right because if you know I haven't thought about that I'm 90% sure it's going to basically say",
    "start": "4138640",
    "end": "4145960"
  },
  {
    "text": "that doesn't make any sense",
    "start": "4145960",
    "end": "4151600"
  },
  {
    "text": "yeah if I had more time i' type in that code right now and try it out see what happens you're going to have to try that",
    "start": "4151600",
    "end": "4157520"
  },
  {
    "text": "one out so the question was if I'd already have code where I've precompiled",
    "start": "4157520",
    "end": "4163440"
  },
  {
    "text": "it uh and they at that point there wouldn't have been default actually hold on if it's pre-compiled there wouldn't",
    "start": "4163440",
    "end": "4169238"
  },
  {
    "text": "have been default methods to begin with cuz those didn't exist in previous versions of java right right so you if you if you did",
    "start": "4169239",
    "end": "4177640"
  },
  {
    "text": "have that in Java 5 what would it do in just Java 7 you would you would you wouldn't have",
    "start": "4177640",
    "end": "4183758"
  },
  {
    "text": "inherited anything from they would have just been like do something and do something and I don't even know what the",
    "start": "4183759",
    "end": "4189199"
  },
  {
    "text": "compiler will do now then I've had some beer so that situation doesn't arise",
    "start": "4189199",
    "end": "4194360"
  },
  {
    "text": "because this is new feature yeah okay uh what about diamonds right",
    "start": "4194360",
    "end": "4202000"
  },
  {
    "text": "yeah was that your question go ahead my question was default methods looks like it doesn't really",
    "start": "4202000",
    "end": "4207800"
  },
  {
    "text": "have anything to do with lambas no it doesn't so you said like",
    "start": "4207800",
    "end": "4213080"
  },
  {
    "text": "it's a it's a new feature and it solves the general interface Evolution problem so if you have an interface at work that",
    "start": "4213080",
    "end": "4218920"
  },
  {
    "text": "you've been dying to add a method to when you go to Java H you can do",
    "start": "4218920",
    "end": "4224320"
  },
  {
    "text": "that yes um yes then you would have a problem",
    "start": "4224320",
    "end": "4230320"
  },
  {
    "text": "like that and then you would have to to change something in fact okay uh yes it wouldn't in fact",
    "start": "4230320",
    "end": "4238960"
  },
  {
    "text": "okay so let me see if I can repeat your question and I remember like seeing something on the Tomcat developers",
    "start": "4238960",
    "end": "4245280"
  },
  {
    "text": "mailing list a couple of days ago which was exactly that it was somebody saying",
    "start": "4245280",
    "end": "4251040"
  },
  {
    "text": "I can't build oh yeah it was one of the Debian package managers saying I can't build bu Tomcat 7 with with Java 8",
    "start": "4251040",
    "end": "4258480"
  },
  {
    "text": "because of uh um that situation which can you describe again cuz I've had too",
    "start": "4258480",
    "end": "4263840"
  },
  {
    "text": "much be already implemented something right that's that's exactly what it is",
    "start": "4263840",
    "end": "4269159"
  },
  {
    "text": "so so the the thing here is so to repeat it is I've already got a do something method here somebody comes along and in",
    "start": "4269159",
    "end": "4275360"
  },
  {
    "text": "one of the interfaces they Implement they add a default method called do something but it has a different type",
    "start": "4275360",
    "end": "4282120"
  },
  {
    "text": "signature well if it has a different type signature then and uh it's overloaded but you could get",
    "start": "4282440",
    "end": "4289560"
  },
  {
    "text": "maybe it has different return type or something yeah you can get into an incompatibility in a situation like that",
    "start": "4289560",
    "end": "4295719"
  },
  {
    "text": "yeah but that requires kind of hard to to do although I did see that on the",
    "start": "4295719",
    "end": "4301000"
  },
  {
    "text": "tonat mailing list so all right uh what about diamonds right so what if I have",
    "start": "4301000",
    "end": "4306360"
  },
  {
    "text": "an interface a that implements do something and I have an interface C which extends a notice that c just has",
    "start": "4306360",
    "end": "4312960"
  },
  {
    "text": "an extra method called other now I come along and I have an interface D which",
    "start": "4312960",
    "end": "4319320"
  },
  {
    "text": "extends a and provides an implementation of do something who's with me so far okay and now I'm going to do uh CD",
    "start": "4319320",
    "end": "4329080"
  },
  {
    "text": "impul which is going to implement CND D the question is which one does it pick which do something does it do you",
    "start": "4329080",
    "end": "4337040"
  },
  {
    "text": "get were there some shorts to give out would this would this be a worthy",
    "start": "4342960",
    "end": "4348239"
  },
  {
    "text": "question for a shirt all right so whoever gets this one",
    "start": "4348239",
    "end": "4354159"
  },
  {
    "text": "right gets a shirt all right so uh somebody shout out",
    "start": "4354159",
    "end": "4361679"
  },
  {
    "text": "an answer D he gets a shirt",
    "start": "4361679",
    "end": "4368400"
  },
  {
    "text": "so all right so one shirt has been given out uh so in this case what's happened",
    "start": "4368400",
    "end": "4373679"
  },
  {
    "text": "is it takes the one that's close in the graph so in this example here uh the D",
    "start": "4373679",
    "end": "4380159"
  },
  {
    "text": "is closer than the a implementation of do something if you're walking up the",
    "start": "4380159",
    "end": "4385320"
  },
  {
    "text": "inheritance Street okay questions about that and if they were at the same level",
    "start": "4385320",
    "end": "4391480"
  },
  {
    "text": "you'd get a conflict and the compiler will force you to override that so you don't really have these classic multiple",
    "start": "4391480",
    "end": "4398000"
  },
  {
    "text": "inheritance Diamond problem okay comments questions okay",
    "start": "4398000",
    "end": "4406000"
  },
  {
    "text": "okay please that read that while I drink more",
    "start": "4406000",
    "end": "4409600"
  },
  {
    "text": "beer no the the question was does a default method have access to this the answer is absolutely not",
    "start": "4418320",
    "end": "4425800"
  },
  {
    "text": "because well actually hold on does it have access to this yes because you can't",
    "start": "4425800",
    "end": "4435719"
  },
  {
    "text": "yeah okay let's okay it has to have access to this because you can you can call methods that are defined on the",
    "start": "4435719",
    "end": "4441960"
  },
  {
    "text": "interface so you can have one default method call another one if we go back in",
    "start": "4441960",
    "end": "4448159"
  },
  {
    "text": "time to the iterable here right",
    "start": "4448159",
    "end": "4455320"
  },
  {
    "text": "um in in this case like inside of the for each method you could have called another method like that was defined",
    "start": "4455320",
    "end": "4461960"
  },
  {
    "text": "here in fact you are because you having there is right there this right and it's",
    "start": "4461960",
    "end": "4467760"
  },
  {
    "text": "the this here the compiler is turning that to a call to the iterator cuz it it turns this into a regular for Loop",
    "start": "4467760",
    "end": "4474679"
  },
  {
    "text": "right um so so the Java the libraries the compiler it's all kind of mish",
    "start": "4474679",
    "end": "4480000"
  },
  {
    "text": "mashed together now it's like there's things in the language that are really in the",
    "start": "4480000",
    "end": "4485400"
  },
  {
    "text": "libraries and yeah it's going to be like that for a while it will never",
    "start": "4485400",
    "end": "4490440"
  },
  {
    "text": "change does that answer your question yeah partially so what if I have a",
    "start": "4490440",
    "end": "4496600"
  },
  {
    "text": "protected variable this well where would you define the variable if you try to Define like a private something there",
    "start": "4496600",
    "end": "4502639"
  },
  {
    "text": "it's the compiler will complain it's not a",
    "start": "4502639",
    "end": "4506639"
  },
  {
    "text": "class uh well but the compiler when it's compiling this code doesn't look at the implementation it just looks at that at",
    "start": "4507920",
    "end": "4514199"
  },
  {
    "text": "that interface so if you had like a like a public or a private static",
    "start": "4514199",
    "end": "4522199"
  },
  {
    "text": "public also well the interface doesn't have this it does because the interface",
    "start": "4523000",
    "end": "4528239"
  },
  {
    "text": "will have to be realized by a class you have to have something that implements the interface right now what if you have",
    "start": "4528239",
    "end": "4534280"
  },
  {
    "text": "an interface with all default methods I I haven't thought about that there's definitely edge cases here that",
    "start": "4534280",
    "end": "4540560"
  },
  {
    "text": "you're going to have to sit and think your way through okay",
    "start": "4540560",
    "end": "4547159"
  },
  {
    "text": "yes uh yes you'll have a problem that's a very just came up with a scenario that",
    "start": "4549520",
    "end": "4556400"
  },
  {
    "text": "sounded very complicated and very plausible and I had too much beer to really think it through so and a lot",
    "start": "4556400",
    "end": "4562360"
  },
  {
    "text": "more slides to go through so sorry okay yes I have a",
    "start": "4562360",
    "end": "4567679"
  },
  {
    "text": "question well the5 compiler would puke when it sees the default method well if",
    "start": "4567679",
    "end": "4573440"
  },
  {
    "text": "it's on if it's just in a library right if it's just in a library so you want to run a Java F compiler uh against code",
    "start": "4573440",
    "end": "4580719"
  },
  {
    "text": "which is going to link against the Java 8 Library I have no idea what will happen but that's a recipe for disaster",
    "start": "4580719",
    "end": "4586840"
  },
  {
    "text": "okay I don't know why you would do that so I I don't know the answer to that",
    "start": "4586840",
    "end": "4592639"
  },
  {
    "text": "sorry hey anybody else any other questions all right here's the complete",
    "start": "4592639",
    "end": "4599480"
  },
  {
    "text": "what is a functional interface which was incomplete a functional interface can only have one non deault method does",
    "start": "4599480",
    "end": "4605440"
  },
  {
    "text": "that make sense now so you can have as many methods as you want so long as only uh one of them was not a default method",
    "start": "4605440",
    "end": "4613360"
  },
  {
    "text": "uh the rest can be all default right and that takes that oh so question",
    "start": "4613360",
    "end": "4621760"
  },
  {
    "text": "are all these Concepts clear so Lambda expression functional interface method references default method that's the",
    "start": "4621760",
    "end": "4627960"
  },
  {
    "text": "story of the mechanics of how to do lambdas with Java 8 so if you're already an expert with lambdas from other",
    "start": "4627960",
    "end": "4634320"
  },
  {
    "text": "languages hopefully this has shown you how Java 8 does it and if you're new to it hopefully you've learned enough of",
    "start": "4634320",
    "end": "4639920"
  },
  {
    "text": "the syntax now that you're can happily go and and try this out at home at work",
    "start": "4639920",
    "end": "4647280"
  },
  {
    "text": "tomorrow all right uh I think we're supposed to go till 8:30 and there's only like 15 minutes left so we're going",
    "start": "4648280",
    "end": "4654040"
  },
  {
    "text": "to skip the break part we started a bit late I was planning a a 5 minute body",
    "start": "4654040",
    "end": "4659400"
  },
  {
    "text": "break now all right um all right so uh all",
    "start": "4659400",
    "end": "4666920"
  },
  {
    "text": "right so the collections framework so the the Java 8 uh uses Lambda Expressions uh and default",
    "start": "4666920",
    "end": "4673679"
  },
  {
    "text": "methods to take the existing collection framework and add lots of functions to it we already saw that for each",
    "start": "4673679",
    "end": "4679000"
  },
  {
    "text": "statement which is an example of internal iteration rather than writing a for Loop which is sequential you can use",
    "start": "4679000",
    "end": "4685080"
  },
  {
    "text": "for each and the for each could do things on multiple threads if it's so wished so that's one thing you can do uh",
    "start": "4685080",
    "end": "4692120"
  },
  {
    "text": "but let me highlight some new methods that are there for example we already saw that iterable anything that's an iterable has a for each method that you",
    "start": "4692120",
    "end": "4698520"
  },
  {
    "text": "can use now uh it also has a spliterator which is useful for for streams um you know how many people here",
    "start": "4698520",
    "end": "4706600"
  },
  {
    "text": "let's just skip here for sake of time a little bit and go and look at map who has who",
    "start": "4706600",
    "end": "4714280"
  },
  {
    "text": "is very happy to see put if absent clap for that",
    "start": "4714280",
    "end": "4719320"
  },
  {
    "text": "one finally put if absent right who's written that code a billion times before",
    "start": "4719320",
    "end": "4725840"
  },
  {
    "text": "right yes which",
    "start": "4725840",
    "end": "4732600"
  },
  {
    "text": "one uh put if absent has some threading issues yes but you still write a lot of it and it'd be nice not to have to write",
    "start": "4732600",
    "end": "4740040"
  },
  {
    "text": "it every time so you know we we've all done that it's not there add it yes yes it has",
    "start": "4740040",
    "end": "4745679"
  },
  {
    "text": "threading issues it still does so you still have to know what you're doing",
    "start": "4745679",
    "end": "4751960"
  },
  {
    "text": "there uh so there's like uh on the map interface there like about 20 new methods some of which are things that",
    "start": "4751960",
    "end": "4758120"
  },
  {
    "text": "should have been there from the beginning but weren't and uh some that are new and and fun just because lambas",
    "start": "4758120",
    "end": "4764239"
  },
  {
    "text": "are there um uh the stream related methods are um",
    "start": "4764239",
    "end": "4770080"
  },
  {
    "text": "these ones here and I want you to to point your attention to the fact that there's something called stream and parallel stream and I'll tell you what",
    "start": "4770080",
    "end": "4776400"
  },
  {
    "text": "that does later parallel stream will do it on multiple threads that's how easy it is so the question is what is a stream this is probably a New Concept to",
    "start": "4776400",
    "end": "4783120"
  },
  {
    "text": "most of you uh it's a functional programming design pattern just like strategy pattern and command object are",
    "start": "4783120",
    "end": "4790080"
  },
  {
    "text": "all like regular objectoriented patterns um and it's about a way of processing",
    "start": "4790080",
    "end": "4796400"
  },
  {
    "text": "elements sequentially or in parallel if you look at your code you typically do something like maybe you write a",
    "start": "4796400",
    "end": "4801480"
  },
  {
    "text": "database query you get a list of objects then you over iterate over that list you produce a single result or you iterate",
    "start": "4801480",
    "end": "4807639"
  },
  {
    "text": "over that list and produce a map or you iterate over the list and produce another list this type of uh uh looping",
    "start": "4807639",
    "end": "4814679"
  },
  {
    "text": "over data structures who's got lots of that in their Java application and what streams do is they",
    "start": "4814679",
    "end": "4820480"
  },
  {
    "text": "make that easier to do that kind of code is a lot easier to write with streams so uh streams are a concept and and",
    "start": "4820480",
    "end": "4827760"
  },
  {
    "text": "because they are a design pattern you can Implement streams in in C you can Implement them in C+ plus you could",
    "start": "4827760",
    "end": "4833120"
  },
  {
    "text": "Implement them in whatever language you want you wanted to to implement them in so let's look at what makes something a",
    "start": "4833120",
    "end": "4838679"
  },
  {
    "text": "stream this is uh um an example here let's say I've got uh a list of orders",
    "start": "4838679",
    "end": "4843840"
  },
  {
    "text": "and I want to calculate the total quantity of online orders of of a certain thing so what you do is you call",
    "start": "4843840",
    "end": "4851080"
  },
  {
    "text": "the collection orders. stream and what that does is you okay so",
    "start": "4851080",
    "end": "4857040"
  },
  {
    "text": "let's do it one with the bullet points so first you create a stream instance uh from a source which in this case is the",
    "start": "4857040",
    "end": "4863080"
  },
  {
    "text": "collection that's the orders. stream then we add a filter operation that checks to see we pass the Lambda",
    "start": "4863080",
    "end": "4869000"
  },
  {
    "text": "expression that says uh look at the incoming object uh get it type if it's",
    "start": "4869000",
    "end": "4874040"
  },
  {
    "text": "an online order then let it through if it's not an online order drop it on the",
    "start": "4874040",
    "end": "4879960"
  },
  {
    "text": "floor and then you can and that uh the streams always have a a pipeline of",
    "start": "4879960",
    "end": "4885760"
  },
  {
    "text": "intermediate operations that you can do uh then we're doing a map so we're taking the object and we're extracting",
    "start": "4885760",
    "end": "4892960"
  },
  {
    "text": "out of it o. get quantity so we're getting how many items were in the order and uh and then finally we're adding",
    "start": "4892960",
    "end": "4900280"
  },
  {
    "text": "them all up with the terminal operation called sum which will uh add it all up",
    "start": "4900280",
    "end": "4906040"
  },
  {
    "text": "so if you didn't have this in if you didn't have the streams how would you do this with regular Java code write a for",
    "start": "4906040",
    "end": "4913040"
  },
  {
    "text": "Loop right if statement inside the for Loop for the filter and then inside of the if statement uh call the get",
    "start": "4913040",
    "end": "4920199"
  },
  {
    "text": "quantity accumulate that and a variable define outside the loop and then return that that's you know more lines of code",
    "start": "4920199",
    "end": "4927000"
  },
  {
    "text": "so streams will make it very compact to do uh manipulations on data structures so here's a picture of how to visualize",
    "start": "4927000",
    "end": "4933719"
  },
  {
    "text": "every stream you got to have a source a pipeline and a terminal and because you have to have",
    "start": "4933719",
    "end": "4939840"
  },
  {
    "text": "the structure to the stream uh what you have to understand about it is it has a life cycle okay so with a stream you",
    "start": "4939840",
    "end": "4947920"
  },
  {
    "text": "have to first create it then you have to configure it as an configure what is the",
    "start": "4947920",
    "end": "4953480"
  },
  {
    "text": "pipeline what is the source what's the terminal operation and then you execute it and until you actually execute the",
    "start": "4953480",
    "end": "4960199"
  },
  {
    "text": "stream nothing happens so when you look at this code here it might look like you're looping over things twice you're",
    "start": "4960199",
    "end": "4966639"
  },
  {
    "text": "not it actually doesn't do anything until you invoke a terminal operation so",
    "start": "4966639",
    "end": "4973239"
  },
  {
    "text": "it's lazy and then finally the stream has to be cleaned up now streams are can only be",
    "start": "4973239",
    "end": "4979760"
  },
  {
    "text": "used once they get exhausted so once you execute and the stream does its thing",
    "start": "4979760",
    "end": "4984920"
  },
  {
    "text": "you can't just use it like invoke it again you'd have to go rebuild it reconfigure it reexecute it re clean it",
    "start": "4984920",
    "end": "4991679"
  },
  {
    "text": "up so um so let's take a look at some uh stream sources just to kind of give you",
    "start": "4991679",
    "end": "4997960"
  },
  {
    "text": "an idea of what is a stream Source uh here's a stream source that is a a range",
    "start": "4997960",
    "end": "5003320"
  },
  {
    "text": "from 0 to five and I we're just for each printing it out so it just prints out 0 1 2 3 4 just an integer stream streams",
    "start": "5003320",
    "end": "5011600"
  },
  {
    "text": "can be anything what a streams does is spits out",
    "start": "5011600",
    "end": "5017000"
  },
  {
    "text": "elements uh so that's not a very interesting stream right but it's a simple one here's a collection stream uh",
    "start": "5017480",
    "end": "5023800"
  },
  {
    "text": "this collection stream takes a a list and it turns it out as a stream and you can see that by calling cities. stream.",
    "start": "5023800",
    "end": "5031239"
  },
  {
    "text": "for each system out print Ln we're just printing out the cities that are in the Stream So any collection can act as a",
    "start": "5031239",
    "end": "5039239"
  },
  {
    "text": "stream why is this useful it's incredibly useful because when you start setting up a pipeline to manipulate the",
    "start": "5039239",
    "end": "5045120"
  },
  {
    "text": "collection you can do fancy things like filter it map it reduce it um uh do",
    "start": "5045120",
    "end": "5051000"
  },
  {
    "text": "computation on it calculate statistics uh sort it do all sorts of really fun stuff we'll see what some of those are",
    "start": "5051000",
    "end": "5058000"
  },
  {
    "text": "uh here's a nice little character stream okay so you just take a string",
    "start": "5058000",
    "end": "5063639"
  },
  {
    "text": "ABC call. charge and in this case the terminal operation is count so we're actually asking the stream terminal",
    "start": "5063639",
    "end": "5070679"
  },
  {
    "text": "operation to count how many things passed through it so that returns three hey that's not as F that's way slower",
    "start": "5070679",
    "end": "5077120"
  },
  {
    "text": "than calling string like length but hey you can do that um all right here's some fun",
    "start": "5077120",
    "end": "5084400"
  },
  {
    "text": "streams okay pay attention to those ones I know getting it's getting late here I got 10 minutes to get through the rest of the slides um so in this code here uh",
    "start": "5084400",
    "end": "5092920"
  },
  {
    "text": "I'm asking the process to figure out the current user directory right and then I'm turning that into a path object",
    "start": "5092920",
    "end": "5099159"
  },
  {
    "text": "which is from java 7 and then what I'm going to do is if I then call files. list and I give it a a",
    "start": "5099159",
    "end": "5106920"
  },
  {
    "text": "particular directory path what it gives me back is a stream of all the things in",
    "start": "5106920",
    "end": "5112400"
  },
  {
    "text": "that directory who's used the Java file uh Java file object to get all the files in",
    "start": "5112400",
    "end": "5118280"
  },
  {
    "text": "the directory right you get you get back an array then you have to Loop over it it's really annoying right I hate",
    "start": "5118280",
    "end": "5124360"
  },
  {
    "text": "working with that object and now you can just say well the files uh uh in a",
    "start": "5124360",
    "end": "5130080"
  },
  {
    "text": "directory are uh potential source for a stream so you should be able to just grab stuff from",
    "start": "5130080",
    "end": "5137280"
  },
  {
    "text": "there uh here's another one files. walk and what this does is uh it does a depth",
    "start": "5137280",
    "end": "5144960"
  },
  {
    "text": "first search starting from that directory all the way down and whatever",
    "start": "5144960",
    "end": "5150600"
  },
  {
    "text": "it finds it returns each item as a an AS something out of the",
    "start": "5150600",
    "end": "5156639"
  },
  {
    "text": "stream and then whatever whatever processing pipeline you could do you can",
    "start": "5156639",
    "end": "5161679"
  },
  {
    "text": "set that up so for example uh I I'm not putting anything in between here but inside of the for each perhaps you are",
    "start": "5161679",
    "end": "5168960"
  },
  {
    "text": "uh figuring out the size of the file or you could have a a map to an INT where you you take the file and then you",
    "start": "5168960",
    "end": "5175840"
  },
  {
    "text": "calculate its size and then you have a sum at the end and you calculate the size of all the files in a particular",
    "start": "5175840",
    "end": "5181400"
  },
  {
    "text": "directory as an example comments questions is that head up there are streams reproducibly ordered what do you",
    "start": "5181400",
    "end": "5189119"
  },
  {
    "text": "mean by that what well can I can I are they predictably are streams so the",
    "start": "5189119",
    "end": "5195440"
  },
  {
    "text": "question is are streams predictably ordered the answer is it depends on the source that you are using so for example",
    "start": "5195440",
    "end": "5201560"
  },
  {
    "text": "if you used a range source and the range Source was from 0 to 5 right it's going",
    "start": "5201560",
    "end": "5206760"
  },
  {
    "text": "to start from 0 1 to 3 4 five and it's going to run like that every time on the other hand if you're using this uh files",
    "start": "5206760",
    "end": "5213719"
  },
  {
    "text": "list stream it's going to depend on whatever is in that directory right but if I if I don't change the",
    "start": "5213719",
    "end": "5220440"
  },
  {
    "text": "directory the next time I that stream you'd have to read the definition of the source okay you'd have to read there's",
    "start": "5220440",
    "end": "5227880"
  },
  {
    "text": "nothing in the Stream that says there's a certain order on the things that come out of the Stream So the stream",
    "start": "5227880",
    "end": "5233040"
  },
  {
    "text": "interface doesn't say that there's an order but the implementation of the stream Source could imply an order such",
    "start": "5233040",
    "end": "5238960"
  },
  {
    "text": "as you know range stream it's not the stream contract itself it's no not that",
    "start": "5238960",
    "end": "5245600"
  },
  {
    "text": "I know of yeah all right so for another shirt we have another shirt to give away all",
    "start": "5245600",
    "end": "5251600"
  },
  {
    "text": "right for another shirt what does this code do if you understand this code you got",
    "start": "5251600",
    "end": "5257400"
  },
  {
    "text": "everything there to understand today you can pat yourself on the back all right don't don't scream out",
    "start": "5257400",
    "end": "5263080"
  },
  {
    "text": "the answer if you know it let's give everybody a chance here to to process this this",
    "start": "5263080",
    "end": "5268520"
  },
  {
    "text": "code all right so does anybody know raise your hand if you think you know what it does so I just want to see until",
    "start": "5268520",
    "end": "5274400"
  },
  {
    "text": "I got like 10 or so hands that that was enough time all right now whoever can shout",
    "start": "5274400",
    "end": "5280159"
  },
  {
    "text": "what it does first really fast gets the shirt Prince source code Prince source",
    "start": "5280159",
    "end": "5285440"
  },
  {
    "text": "code that's correct yes all right was that a question earlier or you knew what it",
    "start": "5285440",
    "end": "5291159"
  },
  {
    "text": "does okay so this is a program that prints itself out prints itself let's see how it works okay so we have our our",
    "start": "5291159",
    "end": "5298719"
  },
  {
    "text": "standard like method uh Main and uh uh this will only print itself out if you",
    "start": "5298719",
    "end": "5304199"
  },
  {
    "text": "run it from inside Eclipse okay cuz the the working directory in Eclipse is the project directory where where where the",
    "start": "5304199",
    "end": "5311320"
  },
  {
    "text": "code is so I'm assuming that if I get a handle on the process working directory",
    "start": "5311320",
    "end": "5317080"
  },
  {
    "text": "uh or the current um directory it's going to work okay um so what I'm doing",
    "start": "5317080",
    "end": "5323679"
  },
  {
    "text": "here is uh I'm basically taking the class name replacing all the dots with forward slashes and adding Java to find",
    "start": "5323679",
    "end": "5331000"
  },
  {
    "text": "the the name of the Java source file and then I uh kind of call the find method on the",
    "start": "5331000",
    "end": "5337719"
  },
  {
    "text": "files object and the find method is going to is a stream Source okay and",
    "start": "5337719",
    "end": "5343719"
  },
  {
    "text": "what it streams is a a list of files that match my criteria so I give it a",
    "start": "5343719",
    "end": "5349560"
  },
  {
    "text": "directory to look at I give it a maximum depth to walk and I need to give it a",
    "start": "5349560",
    "end": "5354960"
  },
  {
    "text": "predicate to decide whether something should be is considered found or not since I have to give it a predicate",
    "start": "5354960",
    "end": "5361560"
  },
  {
    "text": "what's a really good thing to express a predicate Lambda expression of course right so",
    "start": "5361560",
    "end": "5367880"
  },
  {
    "text": "that's the Lambda expression here that says now the Lambda expression takes two parameters in this case uh we're given",
    "start": "5367880",
    "end": "5374600"
  },
  {
    "text": "the name of the file and we're given the file system attributes like read only write and stuff like that so in this",
    "start": "5374600",
    "end": "5381239"
  },
  {
    "text": "example the only thing I care about is since the file name is a string is does the file name end with the class file",
    "start": "5381239",
    "end": "5388280"
  },
  {
    "text": "name that I competed earlier who's with me on that you have question in the back",
    "start": "5388280",
    "end": "5396040"
  },
  {
    "text": "yeah yeah I could but then that would take more more lines it wouldn't fit on the screen when you write code for",
    "start": "5401560",
    "end": "5407760"
  },
  {
    "text": "PowerPoint you you write things that just you hope that it doesn't spill over into multiple lines so um okay so now so",
    "start": "5407760",
    "end": "5416719"
  },
  {
    "text": "this this first Lambda expression here is picking up the making sure that I find my uh the the source code for this",
    "start": "5416719",
    "end": "5422920"
  },
  {
    "text": "file and then since it this the the defined method returns a stream I could put a for each",
    "start": "5422920",
    "end": "5428920"
  },
  {
    "text": "terminal on that and the for each terminal is going to do something for each thing that's found well the thing",
    "start": "5428920",
    "end": "5435159"
  },
  {
    "text": "that find returns are path objects so I take the path and then I go",
    "start": "5435159",
    "end": "5441320"
  },
  {
    "text": "back to files and files has a another stream called lines and what lines does",
    "start": "5441320",
    "end": "5448280"
  },
  {
    "text": "is it will uh take a text file and return to you all the lines as a stream",
    "start": "5448280",
    "end": "5453520"
  },
  {
    "text": "so each item coming out is the next line of things who's happy about that that's so much better than doing it",
    "start": "5453520",
    "end": "5462159"
  },
  {
    "text": "the all the way so one line so then all I'm doing here in this case is just calling dot for each and then printing",
    "start": "5462159",
    "end": "5467400"
  },
  {
    "text": "it out now notice that I have to use a TR catch here because this throws an IO",
    "start": "5467400",
    "end": "5473119"
  },
  {
    "text": "exception and I can't throw it out and filter it no so I just put the TR catch that does nothing again for the purpose",
    "start": "5473119",
    "end": "5480280"
  },
  {
    "text": "of PowerPoint it does nothing right who's who's now understanding what this program does",
    "start": "5480280",
    "end": "5486440"
  },
  {
    "text": "okay hopefully this is giving you an idea of a how lambdas work in Java 8 and B the kind of code you can start to see",
    "start": "5486440",
    "end": "5493679"
  },
  {
    "text": "yourself writing with Java 8 uh all right comments questions at this",
    "start": "5493679",
    "end": "5502320"
  },
  {
    "text": "point oops right so stream structure Source pipeline terminal we already talked about that um some of the",
    "start": "5502840",
    "end": "5509639"
  },
  {
    "text": "terminal operations that you can have reduction terminal operations mutable okay let's just look at some examples",
    "start": "5509639",
    "end": "5516040"
  },
  {
    "text": "important point in red nothing happens until uh the terminal operation is invoked so uh let's say you want to",
    "start": "5516040",
    "end": "5523199"
  },
  {
    "text": "count stuff you just go integer stream. count this is a stream that has a source",
    "start": "5523199",
    "end": "5528400"
  },
  {
    "text": "it has a terminal but it has no intermediate operations everybody clear about that you don't have to put any",
    "start": "5528400",
    "end": "5534600"
  },
  {
    "text": "intermediate operations it's great if you do but you don't have to um here's a stream that calculates",
    "start": "5534600",
    "end": "5541480"
  },
  {
    "text": "the minimum uh value in the Stream So in in here the the Lambda expression is a",
    "start": "5541480",
    "end": "5548679"
  },
  {
    "text": "comparable right so I just it returns minus1 01 so just subtract it to integer it works but that's kind of annoying to",
    "start": "5548679",
    "end": "5555639"
  },
  {
    "text": "write so instead you can just go to the comparator class and say I'm comparing",
    "start": "5555639",
    "end": "5560800"
  },
  {
    "text": "integers so there's all sorts of little utilities they put in there so the libraries have all sorts of things to",
    "start": "5560800",
    "end": "5566520"
  },
  {
    "text": "just make your life easier it's going to take some time to absorb all of those all of those details uh here's another one that does",
    "start": "5566520",
    "end": "5574199"
  },
  {
    "text": "a reduce and uh that means take uh everything and just in this case is just",
    "start": "5574199",
    "end": "5579800"
  },
  {
    "text": "adding up all the items in the Stream So reduce returns a single result out of a",
    "start": "5579800",
    "end": "5584960"
  },
  {
    "text": "sequence of results uh beable operations this is",
    "start": "5584960",
    "end": "5590000"
  },
  {
    "text": "important to understand and this might be the last thing I'm able to do today we'll see if people want to leave or",
    "start": "5590000",
    "end": "5595719"
  },
  {
    "text": "stay um so what if you wanted to process a stream and what you wanted to do is",
    "start": "5595719",
    "end": "5602080"
  },
  {
    "text": "collect all of the things that survive the stream Pipeline and you want to put them into a list or you want to put them",
    "start": "5602080",
    "end": "5608520"
  },
  {
    "text": "into a map or you want to put them into a set right who can see that that would be useful that's the job of the collect",
    "start": "5608520",
    "end": "5616679"
  },
  {
    "text": "method now you can see that the stream. collect terminal is being past an object",
    "start": "5616679",
    "end": "5622960"
  },
  {
    "text": "which is an implementation of a collector Now The Collector is like it's it's it's like there's a whole bunch of",
    "start": "5622960",
    "end": "5629360"
  },
  {
    "text": "them so you can go collectors. two set collectors. two list collectors dot I",
    "start": "5629360",
    "end": "5634800"
  },
  {
    "text": "probably have some here collectors list set map grouping buy partitioning there's all sorts of fancy collectors",
    "start": "5634800",
    "end": "5641159"
  },
  {
    "text": "that you can do so if you just had a data structure a list a map and you wanted to do some processing and send it",
    "start": "5641159",
    "end": "5646679"
  },
  {
    "text": "to a bunch of different places you can turn it into a stream and then use a collector to send it to those places and",
    "start": "5646679",
    "end": "5652360"
  },
  {
    "text": "you can pass predicates to the collectors and all sorts of fun stuff uh you could also turn something into an",
    "start": "5652360",
    "end": "5658280"
  },
  {
    "text": "array okay um as far as like some some there's some",
    "start": "5658280",
    "end": "5665440"
  },
  {
    "text": "search terminal operations like find first find me the first thing that the stream gives and then and then",
    "start": "5665440",
    "end": "5671239"
  },
  {
    "text": "stop uh maybe you're just looking for the first file in a directory that matches something uh find me something",
    "start": "5671239",
    "end": "5677199"
  },
  {
    "text": "anything that matches uh check the stream and is there anything that's uh",
    "start": "5677199",
    "end": "5682560"
  },
  {
    "text": "that matches the condition X is equal to five yes there is there is a value five in the",
    "start": "5682560",
    "end": "5687880"
  },
  {
    "text": "Stream uh check if every if any of them are greater than three uh find anything",
    "start": "5687880",
    "end": "5694600"
  },
  {
    "text": "find any is is completely unpredictable it can return anything just it says it doesn't matter just find me anything and",
    "start": "5694600",
    "end": "5700600"
  },
  {
    "text": "and the reason why it's an unpredictable result is if you have multiple threads streams can be parallel and if you have",
    "start": "5700600",
    "end": "5708080"
  },
  {
    "text": "uh three threads running and the first one that produces the result gets to deliver it so the next time you run it",
    "start": "5708080",
    "end": "5713840"
  },
  {
    "text": "different thread might win which",
    "start": "5713840",
    "end": "5720679"
  },
  {
    "text": "one because I made a type on that's not supposed to be any match that's supposed to be uh all",
    "start": "5721960",
    "end": "5731239"
  },
  {
    "text": "match I copy and paste it wrong sorry okay uh for each we already saw so",
    "start": "5731840",
    "end": "5740679"
  },
  {
    "text": "let's see if we can quickly uh in in two minutes uh talk about stream pipeline rules um you can process element",
    "start": "5740679",
    "end": "5747360"
  },
  {
    "text": "sequentially on un parallel and the rule is you cannot modify the source of the",
    "start": "5747360",
    "end": "5752440"
  },
  {
    "text": "stream while you are processing things on that stream otherwise all the bad things",
    "start": "5752440",
    "end": "5760360"
  },
  {
    "text": "happen so how exactly that works with like a file system stream which could be being modified while you're doing stuff",
    "start": "5760360",
    "end": "5766800"
  },
  {
    "text": "there's a lot of details in the docs that I haven't gotten around to fully comprehending um but you know that's uh",
    "start": "5766800",
    "end": "5773960"
  },
  {
    "text": "to be determined uh as far as the intermediate pipeline of operations go they fall into",
    "start": "5773960",
    "end": "5780000"
  },
  {
    "text": "two broad classes stateless and stateful uh the stateless operations don't really need to know anything about what's come",
    "start": "5780000",
    "end": "5786320"
  },
  {
    "text": "before the stateful operations need to know so for example if you wanted a stream that sorted the items obviously",
    "start": "5786320",
    "end": "5792000"
  },
  {
    "text": "you need all of them before you can sort them and if you have things like parallel operations then you have places",
    "start": "5792000",
    "end": "5798199"
  },
  {
    "text": "where the threads might need to wait on each other and all that other kind of great jazz uh again there's there's a",
    "start": "5798199",
    "end": "5803520"
  },
  {
    "text": "there's a really great uh presentation from java 1 uh uh called uh streams and",
    "start": "5803520",
    "end": "5809280"
  },
  {
    "text": "in Top Gear or something like that and it's really goes into all the Gory detail of this so I would I would",
    "start": "5809280",
    "end": "5815560"
  },
  {
    "text": "recommend you watch that on parlay um so let's look at some examples here uh filter so for example here I",
    "start": "5815560",
    "end": "5822360"
  },
  {
    "text": "just want to find all the things that are less than four so you pass it it's going to print out one two",
    "start": "5822360",
    "end": "5827719"
  },
  {
    "text": "three um if you want to map it like in this case increment each item by one you",
    "start": "5827719",
    "end": "5833159"
  },
  {
    "text": "just call that map pass in a Lambda expression that does that um and collect",
    "start": "5833159",
    "end": "5838280"
  },
  {
    "text": "it to a list and print it out uh you can do something fun like summary statistics which will calculate",
    "start": "5838280",
    "end": "5844760"
  },
  {
    "text": "average median mode standard stuff on the list that you pass it and in this case uh you know I'm mapping into an INT",
    "start": "5844760",
    "end": "5852400"
  },
  {
    "text": "and doing nothing there with a with a unit",
    "start": "5852400",
    "end": "5856880"
  },
  {
    "text": "mapping all this compiles yes yes this is all compiles and runs I I like the",
    "start": "5859040",
    "end": "5865400"
  },
  {
    "text": "stuff in green I cut and pasted from the eclipse console um except when I edit it in there you see my typos",
    "start": "5865400",
    "end": "5872159"
  },
  {
    "text": "right uh so intermediate other stuff okay so these are the stateful ones like for example I got two fives on the list",
    "start": "5872159",
    "end": "5878800"
  },
  {
    "text": "there in this stream and if I call distinct it's going to kill one of them right so distinct needs to know what it",
    "start": "5878800",
    "end": "5885440"
  },
  {
    "text": "has seen before how is distinct implemented internally it you know who knows I",
    "start": "5885440",
    "end": "5892520"
  },
  {
    "text": "haven't looked at the the details this is where uh thankfully we don't have to know those details just like do you",
    "start": "5892520",
    "end": "5898920"
  },
  {
    "text": "really want to know the Gory details of how concurrent hashmap works I've heard there's only like a few",
    "start": "5898920",
    "end": "5904679"
  },
  {
    "text": "people in the world that understand that so uh uh limit is uh is basically going",
    "start": "5904679",
    "end": "5910280"
  },
  {
    "text": "to say take the stream but I'm only interested in the results of the stream up to the first three results so in our",
    "start": "5910280",
    "end": "5916800"
  },
  {
    "text": "case that would be like 1 two three okay so you're limiting how much of the stream goes through uh skip is",
    "start": "5916800",
    "end": "5923920"
  },
  {
    "text": "going to say uh the first few results the first in this example skip the first three things that pass through the",
    "start": "5923920",
    "end": "5929320"
  },
  {
    "text": "stream and then give me everything after that uh sorted well that's what its name says",
    "start": "5929320",
    "end": "5936239"
  },
  {
    "text": "it sorts stuff uh okay so does this make sense",
    "start": "5936239",
    "end": "5942040"
  },
  {
    "text": "this is I think the last slide in the in in this yeah so so the details the",
    "start": "5942040",
    "end": "5948840"
  },
  {
    "text": "implementation details are all in the Java docs you got to have to write code test it out see what it does yeah",
    "start": "5948840",
    "end": "5954920"
  },
  {
    "text": "there's a lot of details that we're not covering I mean it's very ambitious to try to cover everything we've we've done",
    "start": "5954920",
    "end": "5961040"
  },
  {
    "text": "so far like both streams and lambas and like an hour and a half is is really a lot so hopefully I've somewhat succeeded",
    "start": "5961040",
    "end": "5968280"
  },
  {
    "text": "so who thinks they're understanding what this does right you're looking at it it's like yeah kind of makes sense right we're going through we go to our order",
    "start": "5968280",
    "end": "5974040"
  },
  {
    "text": "service notice that now you know your order service or typical Services now they they would return lists and data",
    "start": "5974040",
    "end": "5980080"
  },
  {
    "text": "structures in the future you'll probably find that it might be smarter to just return a stream who would like jdbc to",
    "start": "5980080",
    "end": "5986119"
  },
  {
    "text": "do that yeah the whole paging problem goes away",
    "start": "5986119",
    "end": "5991480"
  },
  {
    "text": "right or would be expressed in a different way uh so uh optional double",
    "start": "5991480",
    "end": "5998000"
  },
  {
    "text": "okay we we're filtering it give me all the orders where the order has more than two items in the order and uh find out",
    "start": "5998000",
    "end": "6005360"
  },
  {
    "text": "what the total for the order was and then uh terminal operation is giving an average of that so that would have been",
    "start": "6005360",
    "end": "6011719"
  },
  {
    "text": "probably 20 lines of java code with some intermediate collector data structures",
    "start": "6011719",
    "end": "6016760"
  },
  {
    "text": "uh here's one just the same thing just a little bit more complicated to make your eyes get confused um so uh uh see if that makes",
    "start": "6016760",
    "end": "6026400"
  },
  {
    "text": "sense sorry then it would be filtered out it",
    "start": "6026400",
    "end": "6033239"
  },
  {
    "text": "would be dropped it wouldn't be include it wouldn't go to the next stage in the pipeline so if the item size was one it",
    "start": "6033239",
    "end": "6039040"
  },
  {
    "text": "wouldn't make it out of the filter to the next stage",
    "start": "6039040",
    "end": "6045560"
  },
  {
    "text": "okay so in this case all I did was I just replaced the get to the order colon",
    "start": "6049920",
    "end": "6055239"
  },
  {
    "text": "colon total method with what the order total method does which is to say take an order get its items uh which is a",
    "start": "6055239",
    "end": "6062199"
  },
  {
    "text": "list turn that into a stream take each one map it to an integer and uh the way",
    "start": "6062199",
    "end": "6068000"
  },
  {
    "text": "we map it to an integer is we take the item we take its quantity uh uh we multiply it by get me the product that",
    "start": "6068000",
    "end": "6075119"
  },
  {
    "text": "the item is of then get the price of that product then take the whole thing and sum it so you will be able to write",
    "start": "6075119",
    "end": "6082320"
  },
  {
    "text": "really convolute looking code that will guarantee your job security for a long",
    "start": "6082320",
    "end": "6088360"
  },
  {
    "text": "time so with that said I think uh the last thing to say is parallel streams is",
    "start": "6089599",
    "end": "6095560"
  },
  {
    "text": "if you just say dot parallel stream at the top what what the Oracle says will happen is it will all happen on multiple",
    "start": "6095560",
    "end": "6102960"
  },
  {
    "text": "threads and you don't have to know anything it will just happen on multiple threads yes question",
    "start": "6102960",
    "end": "6109440"
  },
  {
    "text": "back so so the question so the question is you know in production code some stuff will be null and then you'll end",
    "start": "6109440",
    "end": "6115480"
  },
  {
    "text": "up with all sorts of stuff right so the answer is you might want to then put a filter to drop out the null",
    "start": "6115480",
    "end": "6122719"
  },
  {
    "text": "items you know and it's going to be fun putting break points in that kind of code I haven't really tried too much of",
    "start": "6122840",
    "end": "6128520"
  },
  {
    "text": "doing that I mean this is this is those are the kind of practical things that I",
    "start": "6128520",
    "end": "6133679"
  },
  {
    "text": "think will will become very obvious over the next few years of how well it works",
    "start": "6133679",
    "end": "6138880"
  },
  {
    "text": "in real life yes question I think that really depends all right so yes that's",
    "start": "6138880",
    "end": "6144840"
  },
  {
    "text": "I'm trying to find one of those here yeah here we go so if you look at this example here this is a really great comment thank you for that you see that",
    "start": "6144840",
    "end": "6151040"
  },
  {
    "text": "what's coming out of the stream find first is an optional because maybe the stream is empty and doesn't have",
    "start": "6151040",
    "end": "6156400"
  },
  {
    "text": "anything right and you don't want to return all because the next thing will crash now uh optional is a new interface",
    "start": "6156400",
    "end": "6164000"
  },
  {
    "text": "uh it's a new class and it just means that if something returns null instead return an optional and then you go",
    "start": "6164000",
    "end": "6170040"
  },
  {
    "text": "optional check if it's in there if it's not then return it but of course what do I do with my code I shouldn't say this",
    "start": "6170040",
    "end": "6175960"
  },
  {
    "text": "but if had a lot of beer I just go optional doget I still have I bring back the",
    "start": "6175960",
    "end": "6181320"
  },
  {
    "text": "problem again okay yes go ahead yeah I mean like like the patterns",
    "start": "6181320",
    "end": "6186400"
  },
  {
    "text": "for how to use Lambda well are going to emerge right I I don't know what those are I haven't written enough Java 8 code",
    "start": "6186400",
    "end": "6192560"
  },
  {
    "text": "to be able to tell you exactly what are the best practices yet so talk to me in",
    "start": "6192560",
    "end": "6198360"
  },
  {
    "text": "like three years uh let's go back to the last one I think streams so in summary here's what",
    "start": "6198360",
    "end": "6204760"
  },
  {
    "text": "I want you to remember about streams uh streams have a source Pipeline and a source a pipeline of operations uh and",
    "start": "6204760",
    "end": "6211920"
  },
  {
    "text": "then a terminal operation and then the stream life cycle is create config execute cleanup and that's it thank you",
    "start": "6211920",
    "end": "6217639"
  },
  {
    "text": "very [Applause]",
    "start": "6217639",
    "end": "6228750"
  },
  {
    "text": "much",
    "start": "6231040",
    "end": "6234040"
  }
]