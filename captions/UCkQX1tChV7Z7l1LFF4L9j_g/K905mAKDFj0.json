[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11000"
  },
  {
    "text": "this talk I'm going to investigate some of the techniques and other things that we've developed over time to uh handle",
    "start": "11000",
    "end": "18199"
  },
  {
    "text": "architecture and design Agy but I'm going to start with the",
    "start": "18199",
    "end": "24199"
  },
  {
    "text": "Poetry of Donald Rumsfeld who very famously at one point",
    "start": "24199",
    "end": "29279"
  },
  {
    "text": "said there are known unknowns that is to say there are things we now know we don't know but there are also unknown",
    "start": "29279",
    "end": "37680"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "unknowns there are things that we do not know that we don't know it turns out",
    "start": "37680",
    "end": "43760"
  },
  {
    "text": "this is the really hard part about software are the unknown unknowns the known unknowns are okay because when you",
    "start": "43760",
    "end": "50760"
  },
  {
    "text": "start a project you kind of know there's some things that are lurking it's like I don't really know the full details of",
    "start": "50760",
    "end": "56359"
  },
  {
    "text": "that but you know I can reserve some time for that in the project and we can handle that those are the known unknowns but the",
    "start": "56359",
    "end": "62640"
  },
  {
    "text": "unknown unknowns are the ones that always nail you because you don't even know that you're supposed to be looking for these and then all of a sudden they",
    "start": "62640",
    "end": "69240"
  },
  {
    "text": "pop up and you haven't had any planning whatsoever for them big big upfront architecture and design failed because",
    "start": "69240",
    "end": "75720"
  },
  {
    "text": "of unknown unknowns there's just no way to resolve those things because as it turns out the future is really hard to",
    "start": "75720",
    "end": "82759"
  },
  {
    "text": "predict and that's what you're trying to do if you do a whole lot of elaborate architecture and design work up front",
    "start": "82759",
    "end": "89479"
  },
  {
    "text": "you're trying trying to predict the future by saying here are the constraints that we know are going to",
    "start": "89479",
    "end": "94520"
  },
  {
    "text": "happen in the future but you're always wrong about that and so in the agile",
    "start": "94520",
    "end": "100079"
  },
  {
    "text": "world we said instead of trying to make our predictability better because predicting the future is just flat out",
    "start": "100079",
    "end": "106280"
  },
  {
    "text": "hard um my mother-in-law one point uh just turned to me with disgust and said",
    "start": "106280",
    "end": "112240"
  },
  {
    "text": "you know those lottery numbers I just can't figure out what that order is on any given day it's a really hard problem",
    "start": "112240",
    "end": "118360"
  },
  {
    "text": "predicting the future is really tough and so what we've done in the agile world is say well can we design some",
    "start": "118360",
    "end": "124560"
  },
  {
    "text": "techniques that allow us not to have to do all this work up front but instead add flexibility into our architecture",
    "start": "124560",
    "end": "131319"
  },
  {
    "text": "and our design and so let's talk about that for just a second this distinction between",
    "start": "131319",
    "end": "136920"
  },
  {
    "text": "architecture and design um Martin Fowler I think did a really good job of",
    "start": "136920",
    "end": "142560"
  },
  {
    "text": "defining this distinction in a white paper that he released uh probably more",
    "start": "142560",
    "end": "147680"
  },
  {
    "text": "than a decade ago now but is still available on his a website called who needs an architect which is about the",
    "start": "147680",
    "end": "152720"
  },
  {
    "text": "role of the architect in agile projects and in that white paper he identified or",
    "start": "152720",
    "end": "158800"
  },
  {
    "text": "gave my favorite uh definition of architecture and software which is the stuff that's hard to change",
    "start": "158800",
    "end": "165440"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "later and I like this definition because it's it's vague yet precise because you",
    "start": "165440",
    "end": "170480"
  },
  {
    "text": "can look at any element of your architecture and ask it are you going to be hard to change later that's an architectural element so your database",
    "start": "170480",
    "end": "177000"
  },
  {
    "text": "is an architectural element your web framework is an architect tal element because that's going to be hard to change later but the way you use that",
    "start": "177000",
    "end": "184239"
  },
  {
    "text": "web framework is designed the way you use their workflow class the way they're use their validation stuff that's all",
    "start": "184239",
    "end": "191280"
  },
  {
    "text": "part of design and that stuff is relatively easy to change later and this uh kind of abstract",
    "start": "191280",
    "end": "198360"
  },
  {
    "text": "picture captures this concept because the architectural elements here on the bottom and it's hard to shuffle those",
    "start": "198360",
    "end": "205120"
  },
  {
    "text": "gray boxes around without making the entire thing unstable whereas the red boxes on top you can move them around",
    "start": "205120",
    "end": "211120"
  },
  {
    "text": "and uh get a slightly different shape but not change the overall",
    "start": "211120",
    "end": "216000"
  },
  {
    "text": "structure I've written an article series about this topic for IBM developer Works",
    "start": "216519",
    "end": "221920"
  },
  {
    "text": "which is still available out there there are 19 installments in this series and the series is called evolutionary",
    "start": "221920",
    "end": "227360"
  },
  {
    "text": "architecture and emergent design and that's a really important distinction because you can't have emergent",
    "start": "227360",
    "end": "235280"
  },
  {
    "text": "architecture you have to have something for everything else to rest on before you can do anything else but you can",
    "start": "235280",
    "end": "242560"
  },
  {
    "text": "create an architecture that you can evolve over time design can be much more emergent because not as much rests on",
    "start": "242560",
    "end": "249920"
  },
  {
    "text": "design and so you can actually do less design and let more of it kind of reveal itself to you from code and I'll show",
    "start": "249920",
    "end": "255959"
  },
  {
    "text": "you some examples of that in just a second but notice that given this",
    "start": "255959",
    "end": "261519"
  },
  {
    "text": "definition of architecture architecture really represents constraints of the",
    "start": "261519",
    "end": "266560"
  },
  {
    "text": "things that we can do and we can't do and so as a Corel to this definition Martin also said that the architectural",
    "start": "266560",
    "end": "273639"
  },
  {
    "text": "elements are the are the things that are hard to change later but there should be as little of that stuff is",
    "start": "273639",
    "end": "279280"
  },
  {
    "text": "possible because it represents constraints and having architectural elements means it's hard to change those",
    "start": "279280",
    "end": "285000"
  },
  {
    "text": "things out later and you know what sometimes it's nice to be able to change out big chunks of a system later for",
    "start": "285000",
    "end": "290639"
  },
  {
    "text": "something else and I'm going to talk about some techniques for that including how those te techniques kind of dovetail",
    "start": "290639",
    "end": "295880"
  },
  {
    "text": "into a whole continuous delivery topic uh that's about uh architecture",
    "start": "295880",
    "end": "301639"
  },
  {
    "text": "and components first though I want to delve into design and spend a little bit",
    "start": "301639",
    "end": "307120"
  },
  {
    "text": "of time talking about design in the agile world and specifically I want to",
    "start": "307120",
    "end": "312360"
  },
  {
    "start": "309000",
    "end": "309000"
  },
  {
    "text": "talk about emergent design so I should probably give you some definitions here Webster says that",
    "start": "312360",
    "end": "319560"
  },
  {
    "text": "something that is emergent Rises or emerges out of something that conceals it it comes to light and there's another",
    "start": "319560",
    "end": "326080"
  },
  {
    "text": "definition from Webster that says something that suddenly appears it rises unexpectedly there are two definitions",
    "start": "326080",
    "end": "332759"
  },
  {
    "text": "here and they very Loosely correspond to the two different aspects of emergent design that I'm going to talk about in",
    "start": "332759",
    "end": "338160"
  },
  {
    "text": "this talk one of them has to do more with existing Brownfield projects that have",
    "start": "338160",
    "end": "343680"
  },
  {
    "text": "been around for a while emergent design techniques there the other has more to do with Green Field brand new projects",
    "start": "343680",
    "end": "349639"
  },
  {
    "text": "so let's talk about the existing Brownfield projects first one of the aspects of design that",
    "start": "349639",
    "end": "355280"
  },
  {
    "text": "you probably discovered is that in your application there's a problem that conceptually looks like this and you",
    "start": "355280",
    "end": "363240"
  },
  {
    "text": "think about this while you're at work and you think about it while you're driving home and you think about it while you're mowing the yard and when",
    "start": "363240",
    "end": "369160"
  },
  {
    "text": "your spouse is talking to you and you're supposed to be paying attention to them there's still some background threads running against this thing trying to",
    "start": "369160",
    "end": "375520"
  },
  {
    "text": "figure out what exactly this thing really is the representation of and you think about it and you think about it",
    "start": "375520",
    "end": "381199"
  },
  {
    "text": "until it finally resolves itself into some sort of structure that makes sense this whole process of looking at code",
    "start": "381199",
    "end": "387520"
  },
  {
    "text": "and deriving things out of it is really this exercise of finding abstractions and patterns that already live and exist",
    "start": "387520",
    "end": "394440"
  },
  {
    "text": "there inside your code let's talk about that for a second now when I'm talking about patterns here",
    "start": "394440",
    "end": "400199"
  },
  {
    "text": "I'm not talking about gang of four design patterns notice the subtitle of",
    "start": "400199",
    "end": "405440"
  },
  {
    "text": "that book elements of reusable object-oriented software what the gang of four guys did was say looked across a",
    "start": "405440",
    "end": "411880"
  },
  {
    "text": "vast swath of software projects and said you know what these problems show up in virtually every project so we're going",
    "start": "411880",
    "end": "417879"
  },
  {
    "text": "to create a giant catalog of them because this will be really useful for people building any kind of software",
    "start": "417879",
    "end": "423400"
  },
  {
    "text": "those are patterns with a capital P those are not the patterns I'm talking about here I'm talking about patterns",
    "start": "423400",
    "end": "428520"
  },
  {
    "text": "with a lowercase p and what I'm calling idiomatic patterns it's my contention",
    "start": "428520",
    "end": "433919"
  },
  {
    "text": "that every piece of software has idiomatic patterns in it which are just",
    "start": "433919",
    "end": "439000"
  },
  {
    "text": "useful abstractions you found or useful little ways that you found to solve a problem when that problem recurs again",
    "start": "439000",
    "end": "445319"
  },
  {
    "text": "you'd like to be able to use that same solution again so it really represents kind of a best of breed kind of I've",
    "start": "445319",
    "end": "451440"
  },
  {
    "text": "created an elegant solution to a problem and I want to be able to leverage and reuse that at some point in the future I",
    "start": "451440",
    "end": "457240"
  },
  {
    "text": "further subdivide these idiomatic patterns into two broad categories Technical and domain idiomatic patterns",
    "start": "457240",
    "end": "463919"
  },
  {
    "start": "458000",
    "end": "458000"
  },
  {
    "text": "where technical patterns are things like validation security or transactional data access um security is a good",
    "start": "463919",
    "end": "471400"
  },
  {
    "text": "example of one of these idiomatic patterns because you probably have a very specific way that you do authentication and authorization within",
    "start": "471400",
    "end": "477680"
  },
  {
    "text": "your company you probably do exactly the same way across an entire Suite of applications or You' like it to be the",
    "start": "477680",
    "end": "484639"
  },
  {
    "text": "exact same way across an entire Suite of applications you're working toward that most other companies don't really care",
    "start": "484639",
    "end": "489759"
  },
  {
    "text": "exactly what the details of how you do that are but that's a really important thing to your company because that's how",
    "start": "489759",
    "end": "495039"
  },
  {
    "text": "you're expected to to handle things within your applications domain idiomatic patterns",
    "start": "495039",
    "end": "500720"
  },
  {
    "text": "are things like business rules and shared functionality across divisions and companies that you discover uh",
    "start": "500720",
    "end": "507800"
  },
  {
    "text": "uh serendipit ly through code so when used in this way when I'm when I'm using",
    "start": "507800",
    "end": "514200"
  },
  {
    "text": "the term patterns what I'm really doing is describing really effective abstractions good Solutions of problems",
    "start": "514200",
    "end": "519839"
  },
  {
    "text": "that you've encountered before they're elegant you'd really like to reuse those guys and so this is the first aspect of",
    "start": "519839",
    "end": "525760"
  },
  {
    "text": "emergent design that I'm going to talk about is finding and harvesting idiomatic patterns that already live in",
    "start": "525760",
    "end": "531560"
  },
  {
    "text": "your code you just haven't found them yet and I'm going to show you some techniques for going and finding those things and harvesting",
    "start": "531560",
    "end": "538160"
  },
  {
    "text": "them and this this is primarily for Brownfield existing code bases the other aspect I want to talk about is ones for",
    "start": "538160",
    "end": "544959"
  },
  {
    "text": "brand new code bases which borrows from the lean manufacturing and lean software movement this concept of the last",
    "start": "544959",
    "end": "551720"
  },
  {
    "text": "responsible moment to make decisions about things not the last moment but the last responsible",
    "start": "551720",
    "end": "557480"
  },
  {
    "text": "moment the idea here is that the longer you can defer a decision about something",
    "start": "557480",
    "end": "563399"
  },
  {
    "start": "559000",
    "end": "559000"
  },
  {
    "text": "the better potential you have for a a better decision because you have more knowledge and context that you built up",
    "start": "563399",
    "end": "570279"
  },
  {
    "text": "over time over time when you attack a problem you build more knowledge and",
    "start": "570279",
    "end": "575320"
  },
  {
    "text": "context and the longer you can put off that decision the better potential exists for decision because you're",
    "start": "575320",
    "end": "581079"
  },
  {
    "text": "operating in a place with more knowledge and context this is one of the really nasty horrible hard things in software",
    "start": "581079",
    "end": "587560"
  },
  {
    "text": "projects is you're being asked to produce the most nuanced piece of of uh",
    "start": "587560",
    "end": "593760"
  },
  {
    "text": "information at exactly the time when you know the least about the project you need to come up with architecture and",
    "start": "593760",
    "end": "600079"
  },
  {
    "text": "design and estimates before you started working on it that is exactly the time when you know the least you're ever",
    "start": "600079",
    "end": "605680"
  },
  {
    "text": "going to know about that software project is then why try to maximize this",
    "start": "605680",
    "end": "611240"
  },
  {
    "text": "this relationship of the worst possible time to do it yet do those decisions there if you can defer those things of",
    "start": "611240",
    "end": "618120"
  },
  {
    "text": "course you don't want to defer them too long because then you put yourself into a hole so that's really this idea of",
    "start": "618120",
    "end": "623360"
  },
  {
    "text": "finding the last responsible moment to act on things and I can't tell you exactly when that is a lot of that is",
    "start": "623360",
    "end": "630120"
  },
  {
    "text": "experiential for agile uh uh tech leads and Architects but I can give you some",
    "start": "630120",
    "end": "635360"
  },
  {
    "text": "Clues as to when these things pop up and I'll give you a case study toward the end of a project that I think pretty",
    "start": "635360",
    "end": "640760"
  },
  {
    "text": "much nailed last responsible moment so one of the things you can look at is when you have a component of your piece",
    "start": "640760",
    "end": "647920"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "of software and uh in terms of components now let's just talk about kind of course grain chunk of",
    "start": "647920",
    "end": "654079"
  },
  {
    "text": "functionality the marketing piece of the your application or the sales or the inventory piece and over time that has a",
    "start": "654079",
    "end": "661079"
  },
  {
    "text": "certain complexity profile or the amount of work that it's doing or the the crowdedness of the work that it's doing",
    "start": "661079",
    "end": "667399"
  },
  {
    "text": "and as the requirements of this application changes over time you'll see inflection points of where it's going to",
    "start": "667399",
    "end": "673240"
  },
  {
    "text": "take on a lot new responsibility or it's going to take on some orthogonal responsibilities that it never had before but now needs to take on those",
    "start": "673240",
    "end": "680000"
  },
  {
    "text": "new behaviors we kind of look at the complexity over time and look for these little upticks you can see those in",
    "start": "680000",
    "end": "686839"
  },
  {
    "text": "requirements as they come through uh the business people build up requirements and whatever ways they capture those you",
    "start": "686839",
    "end": "692920"
  },
  {
    "text": "can kind of see some of these upticks and complexity and that's a good time to ask that component is there some part of",
    "start": "692920",
    "end": "698800"
  },
  {
    "text": "you that has reached this last responsible moment that I need to replace some infrastructure piece or some piece has been acting as a",
    "start": "698800",
    "end": "705760"
  },
  {
    "text": "placeholder for what the real Ultimate behavior is going to be and the case study I shows you really",
    "start": "705760",
    "end": "713360"
  },
  {
    "text": "took advantage of this looking at inflection points very nicely",
    "start": "713360",
    "end": "719079"
  },
  {
    "text": "part of the problem of doing design up front are the",
    "start": "719760",
    "end": "725680"
  },
  {
    "text": "the Rumsfeld in unknown unknowns in fact if you look at uh the classic book",
    "start": "725680",
    "end": "732000"
  },
  {
    "text": "Fred Brooks mythical man month one of the things he suggests if you want a really really killer piece of software",
    "start": "732000",
    "end": "739000"
  },
  {
    "text": "is to write it and then throw that one away and then write it a second time and",
    "start": "739000",
    "end": "744360"
  },
  {
    "text": "there are several interesting characteristics about the second version one is that it'll be really good all the",
    "start": "744360",
    "end": "749839"
  },
  {
    "text": "design flaws the architectural flaws you had in the first one will mostly be stripped away in the second one because",
    "start": "749839",
    "end": "755000"
  },
  {
    "text": "you're acting now against all known knowns there are no unknowns anymore the",
    "start": "755000",
    "end": "761440"
  },
  {
    "text": "second version you can estimate down to the day of how long it's going to take to write it because that's the thing",
    "start": "761440",
    "end": "767120"
  },
  {
    "text": "that makes estimation so hard are all these unknown variables that we have floating around all over the place so",
    "start": "767120",
    "end": "772519"
  },
  {
    "text": "one of the things that we're trying to combat here is making decisions when we don't have enough information to make",
    "start": "772519",
    "end": "778639"
  },
  {
    "text": "good decisions ision because then you have to speculate and guess so one of the techniques that we use a lot in the agile world are doing spikes to try to",
    "start": "778639",
    "end": "786240"
  },
  {
    "text": "get really quick knowledge acquisition about things the idea behind a spike this is very common in the agile U",
    "start": "786240",
    "end": "793320"
  },
  {
    "text": "nomenclature is a time box experimental coding exercise so let's say that you've",
    "start": "793320",
    "end": "798480"
  },
  {
    "text": "got a requirement on your application it needs to do geocoding and you've never done geocoding before in your life and",
    "start": "798480",
    "end": "804560"
  },
  {
    "text": "you are correctly reluctant to just make a wild ass guess as to how long it's going",
    "start": "804560",
    "end": "811560"
  },
  {
    "text": "to take you to do that because there a really well-known anti pattern it's on the C3 anti patterns wikii called the",
    "start": "811560",
    "end": "817519"
  },
  {
    "text": "give me estimates now anti pattern that says that no matter how many Waffle words you put in front of an estimate",
    "start": "817519",
    "end": "824160"
  },
  {
    "text": "like I don't really know this is a crazy guess this is just completely out of the blue no matter how many qualifiers you",
    "start": "824160",
    "end": "829839"
  },
  {
    "text": "put on it as soon as you say a number you've entered into an ironclad contract that you'll risk your life to make that",
    "start": "829839",
    "end": "835560"
  },
  {
    "text": "date come true and so you want to make sure that you don't commit to that too early that's the idea of a spike we've",
    "start": "835560",
    "end": "841600"
  },
  {
    "text": "got geocoding I don't know anything about geocoding but I need to learn more information and so I'll create a time",
    "start": "841600",
    "end": "846639"
  },
  {
    "text": "box maybe it's a two-hour time box maybe it's an eight hour time box and during that time box I do nothing but learn as",
    "start": "846639",
    "end": "853720"
  },
  {
    "text": "much as I can about geocoding these spikes are never meant to be prototypes these never grow into real code they are",
    "start": "853720",
    "end": "860519"
  },
  {
    "text": "designed to be thrown away meaning that you don't literally throw them away they're typically done on a branch",
    "start": "860519",
    "end": "866040"
  },
  {
    "text": "inversion control but you never merge them back into the trunk because if you're building as a prototype you're",
    "start": "866040",
    "end": "871440"
  },
  {
    "text": "going to do non-information Gathering activities like writing unit tests like writing variable names more than one",
    "start": "871440",
    "end": "878120"
  },
  {
    "text": "character like writing pretty code that doesn't suck in places that's not what a spike is about spike is about pure raw",
    "start": "878120",
    "end": "885560"
  },
  {
    "text": "knowledge acquisition as quickly as you can and so we do this a lot to chase away these uncertainties particularly",
    "start": "885560",
    "end": "891680"
  },
  {
    "text": "when you come into things like you need to estimate a part of the system that you're not super familiar with spikes are great ways to uh combat the unknown",
    "start": "891680",
    "end": "899680"
  },
  {
    "text": "of that the other thing you have to watch",
    "start": "899680",
    "end": "905519"
  },
  {
    "start": "904000",
    "end": "904000"
  },
  {
    "text": "out for is technical debt um and this manifests itself on software projects uh",
    "start": "905519",
    "end": "913560"
  },
  {
    "text": "in a lot of very interesting ways this is a ward Cunningham metaphor this idea",
    "start": "913560",
    "end": "919120"
  },
  {
    "text": "of technical debt is imagine what your codebase would look like if you could lavish all of your love and attention on",
    "start": "919120",
    "end": "925320"
  },
  {
    "text": "it no refactoring is too big or too small you want to craft the most perfect code base in the world uh the Delta",
    "start": "925320",
    "end": "932319"
  },
  {
    "text": "between that and what you left to come here is probably a lot of technical debt which are externally imposed ways that",
    "start": "932319",
    "end": "938720"
  },
  {
    "text": "you make compromises on design and architecture of projects uh there are a couple of really common drivers of",
    "start": "938720",
    "end": "944040"
  },
  {
    "text": "technical debt one of them is schedule pressure we don't have time to get it done so you need to to do it as quickly",
    "start": "944040",
    "end": "949759"
  },
  {
    "text": "as possible um the other Big Driver uh for technical debt is uh",
    "start": "949759",
    "end": "956920"
  },
  {
    "text": "another one of the anti patterns from the C3 anti pattern weaky called the boat anchor anti pattern uh the boat",
    "start": "956920",
    "end": "962360"
  },
  {
    "text": "anchor anti pattern says that we've we've bought this really expensive piece of infrastructure and you have to use",
    "start": "962360",
    "end": "967959"
  },
  {
    "text": "this on every project whether it makes sense to use it on this project or not because we spent a lot of money for this thing and a lot of times that ends up",
    "start": "967959",
    "end": "974319"
  },
  {
    "text": "driving technical debt because now you're stuck with a bunch of stuff that you don't actually need or don't actually want uh in fact I've started",
    "start": "974319",
    "end": "981519"
  },
  {
    "text": "characterizing uh technical debt in this way particularly with this kind of",
    "start": "981519",
    "end": "986680"
  },
  {
    "text": "common strategy that's out in the world of so if you need an infrastructure piece and the case study that I talk",
    "start": "986680",
    "end": "992199"
  },
  {
    "text": "about talks about asynchronous messaging so you need an asynchronous messaging framework but it's very early in the",
    "start": "992199",
    "end": "999160"
  },
  {
    "text": "project so you don't know exactly what capabilities you're going to need and so there's a this this attitude out in the",
    "start": "999160",
    "end": "1004560"
  },
  {
    "text": "software world of let's buy the really fancy expensive one and then we'll grow into all those capabilities that it",
    "start": "1004560",
    "end": "1010959"
  },
  {
    "text": "offers eventually a lot of software uh vendors sell Suites like that the",
    "start": "1010959",
    "end": "1016639"
  },
  {
    "text": "problem with that approach though is it ignor the negative impact adding that thing has with all those bills and",
    "start": "1016639",
    "end": "1022920"
  },
  {
    "text": "whistles they're not turned on yet I've started characterizing that as technical debt because technical debt are things",
    "start": "1022920",
    "end": "1029558"
  },
  {
    "text": "that are in your project that are not making things any easier they're just in your way of getting stuff done and a",
    "start": "1029559",
    "end": "1035079"
  },
  {
    "text": "bunch of bells and whistles and features on a piece of software that you're not using is technical debt because it's",
    "start": "1035079",
    "end": "1040480"
  },
  {
    "text": "just in your way of doing the stuff that you actually need to get done in fact I start categorizing that stuff as",
    "start": "1040480",
    "end": "1045640"
  },
  {
    "text": "technical debt as soon as you add it to the project and then start disc counting as technical debt when you start using",
    "start": "1045640",
    "end": "1051000"
  },
  {
    "text": "those those various features um and we'll see how this plays out um as I talk about my case study a",
    "start": "1051000",
    "end": "1058600"
  },
  {
    "text": "little bit later so that's all a bunch of stuff about last responsible moment I'll come",
    "start": "1058600",
    "end": "1065280"
  },
  {
    "text": "back to that toward the end as I talk about uh some architectural impacts but now I want to switch over to the other",
    "start": "1065280",
    "end": "1071960"
  },
  {
    "text": "aspect that I have of emergent design which is finding and harvesting idiomatic patterns that already exist in",
    "start": "1071960",
    "end": "1078559"
  },
  {
    "text": "your code and I want to talk about a couple of different uh approaches to this so first I want to talk about",
    "start": "1078559",
    "end": "1086039"
  },
  {
    "start": "1085000",
    "end": "1085000"
  },
  {
    "text": "refactoring toward design so here's a Java method what it",
    "start": "1086039",
    "end": "1093000"
  },
  {
    "text": "does is not important at all this is actually a little method from a a toy",
    "start": "1093000",
    "end": "1098080"
  },
  {
    "text": "e-commerce site that takes things out of a shopping cart and puts them in an order using low-level jdbc um the point of this is if I want",
    "start": "1098080",
    "end": "1106159"
  },
  {
    "text": "to really do some harvesting and design of this I've got to clean it up first CU I can't tell what's there it's just a",
    "start": "1106159",
    "end": "1112080"
  },
  {
    "text": "big lumpy pile of code as far as I'm concerned even an experienced J developer you'd have to read through",
    "start": "1112080",
    "end": "1118240"
  },
  {
    "text": "more or less every line of code to figure out what's really going on there you can't look at it and tell what it does so how are you going to look at it",
    "start": "1118240",
    "end": "1124799"
  },
  {
    "text": "and tell what design is there so what I want to do is refactor this code to get it to the point where I can actually",
    "start": "1124799",
    "end": "1130240"
  },
  {
    "text": "read it and understand what it does and so what I'm going to do is firstly I'll observe that a bunch of these lines are",
    "start": "1130240",
    "end": "1136679"
  },
  {
    "text": "really just things that kind of con ctually Belong Together here's a really good clue for you look at your Java code",
    "start": "1136679",
    "end": "1143400"
  },
  {
    "text": "and look at places where you've added blank lines in your methods that's a cry for help to make me my own method",
    "start": "1143400",
    "end": "1150760"
  },
  {
    "text": "because you've added that blank line there because you're saying these three or four lines conceptually go together",
    "start": "1150760",
    "end": "1156039"
  },
  {
    "text": "why not make that a method and so that's what I'm going to do is take the lines of code that I don't have any blanks in",
    "start": "1156039",
    "end": "1161799"
  },
  {
    "text": "here because of of tight spacing but take the lines that are kind of conceptually together and do an extract",
    "start": "1161799",
    "end": "1168440"
  },
  {
    "text": "method method on a bunch of those and get to hear it's a little bit better it's a",
    "start": "1168440",
    "end": "1174240"
  },
  {
    "text": "little bit better from an abstraction standpoint because now I'm kind of at an even level of abstraction uh but there's",
    "start": "1174240",
    "end": "1180400"
  },
  {
    "text": "a side effect of doing this in modern tools because your refactoring tool has a really strict contract with you it",
    "start": "1180400",
    "end": "1187880"
  },
  {
    "text": "says I guarantee that your code will still work exactly the same way it did before when I'm",
    "start": "1187880",
    "end": "1193559"
  },
  {
    "text": "done and a refactoring tool when faced with this a bunch of local variabl the",
    "start": "1193559",
    "end": "1199120"
  },
  {
    "text": "only thing that it can really do is convert those into parameters and so when you do a lot of refactoring like this you see an explosion of parameters",
    "start": "1199120",
    "end": "1205880"
  },
  {
    "text": "being passed that's because I mean certainly one of the ways to do this is to move those things to class level but that has",
    "start": "1205880",
    "end": "1212000"
  },
  {
    "text": "threading and visibility implications that are refactoring tools never going to take into consideration but as a",
    "start": "1212000",
    "end": "1217280"
  },
  {
    "text": "human developer you can so I'm going to do another refactoring run on this take some of this shared State and move it",
    "start": "1217280",
    "end": "1222919"
  },
  {
    "text": "out to the class level where it's safe to do in this particular application",
    "start": "1222919",
    "end": "1228240"
  },
  {
    "text": "and end up here now I'm getting somewhere because now I can tell what's actually going on",
    "start": "1228840",
    "end": "1234200"
  },
  {
    "text": "in this code it does some some sets up of infrastructure does a little bit of work it completes it it rolls it back if",
    "start": "1234200",
    "end": "1240640"
  },
  {
    "text": "something goes wrong and finally it cleans stuff up this is exactly the code that I had before only now I can",
    "start": "1240640",
    "end": "1246679"
  },
  {
    "text": "understand what it does this uh the inspiration for this style of refactoring actually comes from what may",
    "start": "1246679",
    "end": "1253039"
  },
  {
    "text": "be a surprising place for some of you this is basically Kent Beck's idea of composed method from Small Talk best",
    "start": "1253039",
    "end": "1259679"
  },
  {
    "start": "1254000",
    "end": "1254000"
  },
  {
    "text": "practice patterns which is a book that he wrote in the late 80s about or early 90s about small talk uh the idea behind",
    "start": "1259679",
    "end": "1266480"
  },
  {
    "text": "composed method is that every public method reads like an outline and the individual steps are private method or",
    "start": "1266480",
    "end": "1273360"
  },
  {
    "text": "methods that Implement those behaviors this is really nice and navigable in the Java world now because every major Java",
    "start": "1273360",
    "end": "1280320"
  },
  {
    "text": "ID if you hold down the control key a method name becomes a hyperlink to that method and so you can literally use this",
    "start": "1280320",
    "end": "1286080"
  },
  {
    "text": "to browse your code look at it a really high level of abstraction if you want to get to the individual details you just",
    "start": "1286080",
    "end": "1292039"
  },
  {
    "text": "control click on that method and drill into the details and find out what that method is actually doing but now that",
    "start": "1292039",
    "end": "1297480"
  },
  {
    "text": "I've got it here I can see what's going on and notice that I can very trivially now replace these two lines of code with",
    "start": "1297480",
    "end": "1304400"
  },
  {
    "text": "something else and what I've built is this little transactional data access method you couldn't see that before",
    "start": "1304400",
    "end": "1310720"
  },
  {
    "text": "because it was hidden in all that lumpy pile of code but once you get your code organized you can actually see it",
    "start": "1310720",
    "end": "1318440"
  },
  {
    "text": "and so let's talk about harvesting one of these patterns I'll come back to that one in a bit and convert it to an API",
    "start": "1319640",
    "end": "1325799"
  },
  {
    "text": "but let's talk about uh harvesting a deeper pattern before I go here though I",
    "start": "1325799",
    "end": "1331440"
  },
  {
    "text": "need a little bit of background I need a couple of metrics the first one I'll",
    "start": "1331440",
    "end": "1337080"
  },
  {
    "text": "talk about is cyclomatic complexity this is a metric that's been around for a really long time it's been around since",
    "start": "1337080",
    "end": "1342880"
  },
  {
    "start": "1338000",
    "end": "1338000"
  },
  {
    "text": "the 70s in uh the the SeaWorld the idea behind cytic complexity is it assigns a",
    "start": "1342880",
    "end": "1348159"
  },
  {
    "text": "numeric value to the complexity of a function or method here's the formula Thomas mccab",
    "start": "1348159",
    "end": "1354440"
  },
  {
    "text": "is the one who created this metric it is Edges minus nodes plus two where nodes are lines of code and edges are possible",
    "start": "1354440",
    "end": "1362200"
  },
  {
    "text": "paths through the code so if you have this little Java method like this if I",
    "start": "1362200",
    "end": "1367360"
  },
  {
    "text": "draw out this kind of nodes and edges view of the world and then count them up four minus 4 plus two so the cycla",
    "start": "1367360",
    "end": "1373880"
  },
  {
    "text": "complexity of that method is two it's kind of boring when the numbers cancel each other out like that though and so",
    "start": "1373880",
    "end": "1379480"
  },
  {
    "text": "let's look at a slightly more complex method in the Java World I'll draw it",
    "start": "1379480",
    "end": "1384640"
  },
  {
    "text": "out in this kind of edges and nodes view of the world and number them 8 - 7 + 2 so the cyclomatic",
    "start": "1384640",
    "end": "1392240"
  },
  {
    "text": "complexity of this method is three it's one more complex than the one that we saw",
    "start": "1392240",
    "end": "1397279"
  },
  {
    "text": "before so what I have now in my toolkit is a way of determining how complex a",
    "start": "1397279",
    "end": "1404200"
  },
  {
    "text": "particular method is so I can compare two methods against one another see which one's more comple complex all he's",
    "start": "1404200",
    "end": "1409799"
  },
  {
    "text": "really doing there is measuring loops and other kinds of decisions and adding those as complexity so that's one metric",
    "start": "1409799",
    "end": "1417039"
  },
  {
    "text": "the other metric I need is one called affrant coupling afren coupling if you were a",
    "start": "1417039",
    "end": "1423679"
  },
  {
    "start": "1420000",
    "end": "1420000"
  },
  {
    "text": "class your afer coupling number is how many other classes refer to you and so",
    "start": "1423679",
    "end": "1429520"
  },
  {
    "text": "in this particular case the affrant coupling for this class in the middle is six because six other classes refer to",
    "start": "1429520",
    "end": "1435039"
  },
  {
    "text": "this guy in some ways you can look at afren",
    "start": "1435039",
    "end": "1440480"
  },
  {
    "text": "coupling as a measure of importance because if a lot of classes linked to you you're probably pretty important and",
    "start": "1440480",
    "end": "1447760"
  },
  {
    "text": "with psychomatic complexity we have a tool that allows us to determine really complex things so we put those together",
    "start": "1447760",
    "end": "1455720"
  },
  {
    "text": "this allows us to go hunting for complex important things which is exactly the",
    "start": "1455720",
    "end": "1462279"
  },
  {
    "text": "category of things I want to be able to poke around and find in my software the really important things that are",
    "start": "1462279",
    "end": "1467399"
  },
  {
    "text": "probably overly compon F so that's what I wanted to do and I wanted to do this in a way that you could recreate this if",
    "start": "1467399",
    "end": "1473799"
  },
  {
    "text": "you wanted so there were some very specific characteristics I want to put on this little experiment that I was going to conduct it needed to be an open",
    "start": "1473799",
    "end": "1479880"
  },
  {
    "text": "source piece of software so that you could reconstruct this if you wanted to it needed to be around for a long time",
    "start": "1479880",
    "end": "1485440"
  },
  {
    "text": "because what I'm really trying to get at here is that my contention is that every piece of software has unharvested",
    "start": "1485440",
    "end": "1492240"
  },
  {
    "text": "idiomatic patterns in it in it even it's been around a really long time so I wanted a piece of software that's been",
    "start": "1492240",
    "end": "1497480"
  },
  {
    "text": "around for a really long time that's been used by a lot of developers to build a lot of stuff and so I chose",
    "start": "1497480",
    "end": "1503640"
  },
  {
    "text": "struts it's in its second major release it's been around more than a decade thousands of web applications have been",
    "start": "1503640",
    "end": "1509080"
  },
  {
    "text": "written in this thing it's in a second major release you would think that by now most of the major design El been",
    "start": "1509080",
    "end": "1514720"
  },
  {
    "text": "chased out of this guy let's see so I downloaded the strut source code and I",
    "start": "1514720",
    "end": "1520360"
  },
  {
    "text": "ran a tool on it that gives me my two metrics that I'm interested in the tool if you're interested is called CK JM",
    "start": "1520360",
    "end": "1526720"
  },
  {
    "text": "it's called that because it's running the the chiter and Kimmer objectoriented metric Suite that's the CK and JM means",
    "start": "1526720",
    "end": "1533120"
  },
  {
    "text": "for Java so CK JM is a little freeware tool that you can download and run against any Java codebase the way that",
    "start": "1533120",
    "end": "1540000"
  },
  {
    "text": "CK JM reports cyclomatic complexity because it reports everything at the class level is that it gives you the sum",
    "start": "1540000",
    "end": "1546159"
  },
  {
    "text": "of the cyclomatic complexity of all the methods in the class so here are the results for",
    "start": "1546159",
    "end": "1551679"
  },
  {
    "start": "1550000",
    "end": "1550000"
  },
  {
    "text": "struts and if I'm just hunting complexity the champion here is double list UI Bean which has a uh WMC is",
    "start": "1551679",
    "end": "1559480"
  },
  {
    "text": "weighted method complexity that's what ckgm call cyclomatic complexity that 66 means if you add up all the methods in",
    "start": "1559480",
    "end": "1565880"
  },
  {
    "text": "this class the cycl complexity equals 66 so that's what that is that's the sum of",
    "start": "1565880",
    "end": "1570960"
  },
  {
    "text": "cycl complexity of all the methods in the class so if I was just looking for complex stuff here I found it this is",
    "start": "1570960",
    "end": "1576919"
  },
  {
    "text": "the most complex class there but that's not all I'm looking for I'm looking for important stuff too",
    "start": "1576919",
    "end": "1583440"
  },
  {
    "text": "and if you look across the row it's afer coupling number is only three meaning that only three other classes rely on",
    "start": "1583440",
    "end": "1589600"
  },
  {
    "text": "this class to get something done what if I sort these instead by afer coupling clearly component is the most",
    "start": "1589600",
    "end": "1597240"
  },
  {
    "text": "important thing in the stretch universe as being a component-based web framework that's not surprising but what I'm really looking for here are high",
    "start": "1597240",
    "end": "1604120"
  },
  {
    "text": "combinations of numbers I'm looking for important complex stuff and UI Bean",
    "start": "1604120",
    "end": "1609960"
  },
  {
    "text": "immediately catches my eye because it's pretty high in both those categories so I start poking around in UI",
    "start": "1609960",
    "end": "1616240"
  },
  {
    "text": "beam I keep meaning to add add the Final Jeopardy music to this part of my presentation I keep forgetting so if you",
    "start": "1616240",
    "end": "1622480"
  },
  {
    "text": "would just hum the Final Jeopardy music to yourself as we look at the lovely eval evaluate pams method and uib beam",
    "start": "1622480",
    "end": "1629600"
  },
  {
    "text": "inst stru my favorite part of this method by far is the last line of the method which",
    "start": "1629600",
    "end": "1635720"
  },
  {
    "text": "is evaluate extra prams it's almost like the developer just got tired of typing it's like oh God I can't type anymore",
    "start": "1635720",
    "end": "1641799"
  },
  {
    "text": "evaluate extra PRS okay I'm done so if you start poking around in struts you'll find a whole bunch of",
    "start": "1641799",
    "end": "1648919"
  },
  {
    "text": "evaluate prams and evaluate extra prams methods and what those are there for",
    "start": "1648919",
    "end": "1653960"
  },
  {
    "text": "struts is a webbased uh component based web framework and it one of the things it does is auto Harvest some URI",
    "start": "1653960",
    "end": "1659840"
  },
  {
    "text": "parameters for you to fill in form fields and other things so you can intervene in that process if you want or",
    "start": "1659840",
    "end": "1664960"
  },
  {
    "text": "you could ignore some parameters that get sent in that's the the combined job of uh evaluate prams and evaluate extra",
    "start": "1664960",
    "end": "1671600"
  },
  {
    "text": "prams as I was poking around in the strutz code base I kept bumping into one",
    "start": "1671600",
    "end": "1676840"
  },
  {
    "text": "or uh one or the other of these two methods in a bunch of different places so I got really",
    "start": "1676840",
    "end": "1682679"
  },
  {
    "text": "curious how much of this evaluate pram stuff exists in struts so I did a little",
    "start": "1682679",
    "end": "1688559"
  },
  {
    "start": "1684000",
    "end": "1684000"
  },
  {
    "text": "bit of command line Judo starting in the root of struts showed me all the Java source files and in within each one of",
    "start": "1688559",
    "end": "1694440"
  },
  {
    "text": "those show me every one of these that has and evaluate prams and evaluate extra",
    "start": "1694440",
    "end": "1700559"
  },
  {
    "text": "prams and there they are I have found an idiomatic pattern in",
    "start": "1700760",
    "end": "1706679"
  },
  {
    "text": "struts and the way they handle U parameters and I think this is a great example of one of these little idiomatic",
    "start": "1706679",
    "end": "1712960"
  },
  {
    "text": "patterns because a decade ago when they started working on struts I'm sure nobody said you know what in 15 years",
    "start": "1712960",
    "end": "1720080"
  },
  {
    "text": "the most complex part of this code base is going to be how we handle URI parameters because it seems like such a",
    "start": "1720080",
    "end": "1726519"
  },
  {
    "text": "simple thing it's so simple they've solved it over and over and over and over and over again within the stret",
    "start": "1726519",
    "end": "1733360"
  },
  {
    "text": "code base so uh there's a little bit of an epilogue to this story",
    "start": "1733360",
    "end": "1738440"
  },
  {
    "text": "uh as I mentioned before I'm writing this article series for IBM developer works and I posted this about this",
    "start": "1738440",
    "end": "1745640"
  },
  {
    "text": "discovery i' made in struts and one of the struts committers contacted me and said that he had independently discovered the same thing that there was",
    "start": "1745640",
    "end": "1751559"
  },
  {
    "text": "a whole lot of complexity around this uh lurking around the strutz code base and so he undertook the refactoring that",
    "start": "1751559",
    "end": "1758200"
  },
  {
    "text": "should have fixed it by now basically extracting all of this evaluate parameter stuff is embedded framework",
    "start": "1758200",
    "end": "1764640"
  },
  {
    "text": "inside struts and by doing that removed hundreds thousands of lines of code and",
    "start": "1764640",
    "end": "1770200"
  },
  {
    "text": "hundreds of psychic complexity points because that was the most complex thing still in struts was that U parameter",
    "start": "1770200",
    "end": "1776240"
  },
  {
    "text": "handling stuff and by isolating that in one place he was able to vastly uh simplify",
    "start": "1776240",
    "end": "1782840"
  },
  {
    "text": "it so now that we've seen how to uh find them we need to talk about how to",
    "start": "1783679",
    "end": "1788919"
  },
  {
    "text": "harvest them uh and you can Harvest uh patterns these idiomatic patterns in",
    "start": "1788919",
    "end": "1794240"
  },
  {
    "text": "several different ways uh one of which is to just harest them is an API uh which is a a a nice",
    "start": "1794240",
    "end": "1801080"
  },
  {
    "text": "easy convenient way to do it that's the way you harvest most reusable code find a packaging mechanism and a discovery",
    "start": "1801080",
    "end": "1806159"
  },
  {
    "text": "mechanism with your organization where you can reuse that code uh you can also do things like annotations which uh for",
    "start": "1806159",
    "end": "1812919"
  },
  {
    "text": "some situations make really good kinds of ways to harvest these patterns uh",
    "start": "1812919",
    "end": "1818200"
  },
  {
    "text": "because they stick out from the code around them particularly things like validations and other kinds of locality",
    "start": "1818200",
    "end": "1823360"
  },
  {
    "text": "based characteristics you'd really like the validation characteristics to live really close to the domain classes not",
    "start": "1823360",
    "end": "1829679"
  },
  {
    "text": "be separated over here in a web framework somewhere by creating as an annotation in the class itself you have",
    "start": "1829679",
    "end": "1835320"
  },
  {
    "text": "good locality for that behavior and what it really applies to and so there are several different ways that you once you",
    "start": "1835320",
    "end": "1840519"
  },
  {
    "text": "found these things uh you can go Harvest",
    "start": "1840519",
    "end": "1844519"
  },
  {
    "text": "them which is all about design but let's go back for a second and talk about",
    "start": "1846240",
    "end": "1851640"
  },
  {
    "text": "architecture architecture is this big huge vague term in the software world",
    "start": "1851640",
    "end": "1856919"
  },
  {
    "text": "right now because when you talk about architecture you may actually be talking about several different kinds of architecture",
    "start": "1856919",
    "end": "1863760"
  },
  {
    "text": "one of the kinds of architecture you may be talking about is applicational architecture which is how applications get put",
    "start": "1863760",
    "end": "1869639"
  },
  {
    "text": "together but another kind of architecture you may be thinking about is Enterprise architecture and",
    "start": "1869639",
    "end": "1874919"
  },
  {
    "start": "1871000",
    "end": "1871000"
  },
  {
    "text": "Enterprise architecture if if application architecture is like the architect of a single building Enterprise Architects are like city",
    "start": "1874919",
    "end": "1881240"
  },
  {
    "text": "planners because as an application architect you can't come along in your organization and say hey I need 80% of",
    "start": "1881240",
    "end": "1887360"
  },
  {
    "text": "the bandwidth the entire organization because I'm doing this cool thing as my application your Enterprise Architects are going to say no you don't get 80% of",
    "start": "1887360",
    "end": "1894080"
  },
  {
    "text": "the band with the entire organization just like city planners won't let somebody build a building in the middle",
    "start": "1894080",
    "end": "1899279"
  },
  {
    "text": "of San Francisco that has a fountain on the top of a 50 story building and sucks up half the water in the city they're",
    "start": "1899279",
    "end": "1904919"
  },
  {
    "text": "not going to allow that to happen so a lot of times this is a policing uh function as much as anything else and if",
    "start": "1904919",
    "end": "1911480"
  },
  {
    "text": "you start looking at things like Enterprise architecture one of my colleagues actually put together this mind map of all the things that enter",
    "start": "1911480",
    "end": "1918159"
  },
  {
    "text": "Architects and have to think about in big Enterprises which is a huge big thing I'm not going to talk about any of",
    "start": "1918159",
    "end": "1924200"
  },
  {
    "text": "this stuff particularly all the political stuff that goes into this what I really want to talk about is how we",
    "start": "1924200",
    "end": "1930679"
  },
  {
    "text": "can actually merge this idea of Enterprise architecture and application",
    "start": "1930679",
    "end": "1936000"
  },
  {
    "text": "architecture in a way that solves some problems that we've had in the integration world in the",
    "start": "1936000",
    "end": "1941559"
  },
  {
    "text": "past and I'm going to do that on the back of some examples from this book uh",
    "start": "1941559",
    "end": "1947360"
  },
  {
    "text": "Brian was talking earlier this morning about uh rest and restful kinds of architecture uh and that's actually what",
    "start": "1947360",
    "end": "1953559"
  },
  {
    "text": "I'm exactly what I'm going to use here uh to solve this integration problem at",
    "start": "1953559",
    "end": "1958960"
  },
  {
    "text": "the Enterprise architecture level before I get into this though I need to talk for just a second about",
    "start": "1958960",
    "end": "1965080"
  },
  {
    "text": "Leonard Richardson's restful levels of maturity uh about two years ago maybe three years ago now at cucon London",
    "start": "1965080",
    "end": "1971279"
  },
  {
    "text": "Leonard Richardson uh came up with a scale at how to basically score",
    "start": "1971279",
    "end": "1976799"
  },
  {
    "text": "different architectural Styles as to how mature they were against the the restful scale so his scale here is rest so he's",
    "start": "1976799",
    "end": "1984120"
  },
  {
    "text": "definitely biased toward rest but he scores a bunch of these different architectural Styles and I'll highlight",
    "start": "1984120",
    "end": "1990120"
  },
  {
    "text": "some of these architectural Styles very briefly to point out how they've been deficient in solving some really",
    "start": "1990120",
    "end": "1995519"
  },
  {
    "text": "important problems that we've had so here are his restful levels of maturity where level zero there's actually four",
    "start": "1995519",
    "end": "2002919"
  },
  {
    "start": "1998000",
    "end": "1998000"
  },
  {
    "text": "levels level zero is a single URI and a single HTTP verb this this is uh how web",
    "start": "2002919",
    "end": "2008960"
  },
  {
    "text": "services and WS starb based endpoints work you have a single URI for an endpoint you do HTP post to transfer",
    "start": "2008960",
    "end": "2015320"
  },
  {
    "text": "soap documents back and forth ignoring the rest of the HTTP verbs and all the rest of the HTP metadata that's there",
    "start": "2015320",
    "end": "2021480"
  },
  {
    "text": "you're basically just using HTTP as a synchronous firewall friendly transport protocol for doing remote procedure",
    "start": "2021480",
    "end": "2029960"
  },
  {
    "text": "calls level one service you have many Uris with a single httv verb typically",
    "start": "2030000",
    "end": "2036080"
  },
  {
    "text": "what happens here is that a lot of tools support this kind of behavior where you can point it to a method and say hey",
    "start": "2036080",
    "end": "2041639"
  },
  {
    "text": "make this an endpoint for me and it basically just takes that method name creates an endpoint for it converts the",
    "start": "2041639",
    "end": "2047480"
  },
  {
    "text": "parameters into name value pairs that get sent in uh this uses uh a lot of uis",
    "start": "2047480",
    "end": "2052720"
  },
  {
    "text": "one URI per method name but typically only uses a single HTP verb get uh on",
    "start": "2052720",
    "end": "2058720"
  },
  {
    "text": "top of that here where you get to level two you have numerous Uris and addressable",
    "start": "2058720",
    "end": "2064919"
  },
  {
    "text": "resources and a lot of people get to hear and stop and say we're restful and you are in fact restful when you get to",
    "start": "2064919",
    "end": "2071720"
  },
  {
    "text": "there I'll show you some examples of that uh and then the last level of course is level three hados which is",
    "start": "2071720",
    "end": "2078079"
  },
  {
    "text": "hyper media is the engine of application State and I'll talk about what advantage that gives you over just the idea of",
    "start": "2078079",
    "end": "2083800"
  },
  {
    "text": "resource-based computing uh because there's been an evolution of the thinking of this over time and in fact",
    "start": "2083800",
    "end": "2089440"
  },
  {
    "start": "2085000",
    "end": "2085000"
  },
  {
    "text": "the rest in practice book talks about this evolution of these four levels on Richardson scale architecturally all",
    "start": "2089440",
    "end": "2096839"
  },
  {
    "text": "these guys pretty much fall in the level zero category URI tunneling goes in number one cred web services in two and",
    "start": "2096839",
    "end": "2103760"
  },
  {
    "text": "then hados in number three so let me show you uh brief examples of each one of these architectural Styles first one",
    "start": "2103760",
    "end": "2110000"
  },
  {
    "text": "I'll talk about is the level zero guys there which are different flavors of of remote procedure call or RPC this is",
    "start": "2110000",
    "end": "2117599"
  },
  {
    "start": "2113000",
    "end": "2113000"
  },
  {
    "text": "actually one of the things that that was a a a topic of discussion as we were talking about Cloud stuff yesterday is",
    "start": "2117599",
    "end": "2123079"
  },
  {
    "text": "that the idea of distributed objects is kind of a silly idea we don't have distributed objects we have distributed",
    "start": "2123079",
    "end": "2128839"
  },
  {
    "text": "data we don't have distributed objects you can't send methods you can't serialize a method send it along a wire",
    "start": "2128839",
    "end": "2134200"
  },
  {
    "text": "and execute it somewhere so a lot of the objectness of our objects get stripped away and they become just data",
    "start": "2134200",
    "end": "2140200"
  },
  {
    "text": "containers as we move them from place to place and so one of the easy ways to model this is just use remote procedure",
    "start": "2140200",
    "end": "2145960"
  },
  {
    "start": "2145000",
    "end": "2145000"
  },
  {
    "text": "calls and this is how all of soap works and xmlrpc and a bunch of other protocols basically the idea the client",
    "start": "2145960",
    "end": "2152839"
  },
  {
    "text": "application makes a local method call which gets translated into an ex uh um",
    "start": "2152839",
    "end": "2158200"
  },
  {
    "text": "XML document that gets posted over HTP which gets picked up deserialized some",
    "start": "2158200",
    "end": "2163960"
  },
  {
    "text": "some work happens serialize back back with a payload and a 200 okay and deserialize back and then the local",
    "start": "2163960",
    "end": "2170520"
  },
  {
    "text": "method return there does some useful work notice that in this case all the",
    "start": "2170520",
    "end": "2177079"
  },
  {
    "text": "application semantics reside inside this payload it is not uncommon to send back an entire XML document just to say okay",
    "start": "2177079",
    "end": "2186359"
  },
  {
    "text": "which is kind of a waste of when you think about it building all this structure just to say that everything went okay um but it basically ignores",
    "start": "2186359",
    "end": "2193839"
  },
  {
    "text": "all of the metadata that's already there in this pipe Long HTTP because one of the things that the soap was designed",
    "start": "2193839",
    "end": "2199400"
  },
  {
    "text": "for is transport independent so they actually built up their entire metadata stack around it because they're not",
    "start": "2199400",
    "end": "2204520"
  },
  {
    "text": "necessarily relying on the underlying transport mechanism to do that really the only difference between",
    "start": "2204520",
    "end": "2212760"
  },
  {
    "text": "xmlrpc and soap and traditional remote method calls is really just the wire protocol the wire protocol looks",
    "start": "2212760",
    "end": "2218960"
  },
  {
    "text": "different in all these cases but the underlying architecture is pretty much the same where you have XML documents that have things in them and they get",
    "start": "2218960",
    "end": "2225720"
  },
  {
    "text": "passed back and forth and of course their scheme is that Define what these guys look like but on the Richardson scale this",
    "start": "2225720",
    "end": "2232839"
  },
  {
    "start": "2231000",
    "end": "2231000"
  },
  {
    "text": "scores a zero uh this is a very lightweight way to make uh to do integration because you're basically",
    "start": "2232839",
    "end": "2239040"
  },
  {
    "text": "just making remote procedure calls that's exactly what the mechanism was designed for it's almost universally interoperable because all the tools now",
    "start": "2239040",
    "end": "2245680"
  },
  {
    "text": "support this easy way to say click make this a a web service call uh RPC",
    "start": "2245680",
    "end": "2250880"
  },
  {
    "text": "endpoint not particularly robust though particularly brittle in the face of changes over time which makes this not a",
    "start": "2250880",
    "end": "2257200"
  },
  {
    "text": "good choice for doing Enterprise Integration it also ignores the web as a platform because most of these protocols",
    "start": "2257200",
    "end": "2263119"
  },
  {
    "text": "were built with uh transport agnosticism in mind and so they build up their own",
    "start": "2263119",
    "end": "2268640"
  },
  {
    "text": "metadata stack and their own status codes and all that other stuff and so this is probably it's it's useful for",
    "start": "2268640",
    "end": "2274839"
  },
  {
    "text": "simpler integration problems when you really do have a remote procedure call shaped problem you should use this",
    "start": "2274839",
    "end": "2281280"
  },
  {
    "text": "approach the next one up on uh Richardson scale is this idea of URI tunneling a lot of tools make this",
    "start": "2281280",
    "end": "2288280"
  },
  {
    "start": "2288000",
    "end": "2288000"
  },
  {
    "text": "really easy just by having Wizards and other things basically it's using URI as a means of transferring information",
    "start": "2288280",
    "end": "2293920"
  },
  {
    "text": "across a system boundary by encoding it as a URI so here's the idea you have a method",
    "start": "2293920",
    "end": "2301319"
  },
  {
    "text": "call somewhere called place order uh that basically gets mapped to a method name the arguments are name value",
    "start": "2301319",
    "end": "2307720"
  },
  {
    "text": "Pairs and those get serialized into some sort of order guy and then you execute that",
    "start": "2307720",
    "end": "2314839"
  },
  {
    "text": "endpoint the only real difference between this and RPC is that you tend to have um an endpoint per method that",
    "start": "2315000",
    "end": "2323160"
  },
  {
    "text": "you've exposed here um which is not always the case in in",
    "start": "2323160",
    "end": "2328319"
  },
  {
    "text": "the RPC world uh URI tunneling does use Uris but only Uris doesn't use any of",
    "start": "2328319",
    "end": "2333920"
  },
  {
    "text": "the HTP verbs or any of the other metadata mechanism in that channel uh it's not a very sophisticated uh in fact",
    "start": "2333920",
    "end": "2339800"
  },
  {
    "text": "it's very tool friendly but not particularly uh architecturally friendly in terms of longevity and building",
    "start": "2339800",
    "end": "2346079"
  },
  {
    "text": "things that are not brittle uh this can be made web friendly in terms of caching and other sorts of desirable characteris",
    "start": "2346079",
    "end": "2353119"
  },
  {
    "text": "characteristics uh but the the problem here is really an abstraction a fundamental kind of abstraction problem",
    "start": "2353119",
    "end": "2358680"
  },
  {
    "text": "because the uis are encoding operations here not resources and if we're trying to get to the restful World we're trying",
    "start": "2358680",
    "end": "2365359"
  },
  {
    "text": "to represent those things as resources not operations um the other thing that this does is",
    "start": "2365359",
    "end": "2371760"
  },
  {
    "text": "violates one of the rules of the web because typically what happens in URI tunneling is that you do everything over",
    "start": "2371760",
    "end": "2377160"
  },
  {
    "text": "the top of get and doing something like place order over the top of get actually modifies server side state which",
    "start": "2377160",
    "end": "2383480"
  },
  {
    "text": "violates idempotence you're not supposed to do this uh gets are not supposed to modify server side state and so doing",
    "start": "2383480",
    "end": "2389599"
  },
  {
    "text": "this kind of violates part of the web as a platform concept so let's March up the next part",
    "start": "2389599",
    "end": "2396839"
  },
  {
    "start": "2393000",
    "end": "2393000"
  },
  {
    "text": "of the Richardson scale which are this idea of cred web services and starting to treat the world as resources uh in",
    "start": "2396839",
    "end": "2404400"
  },
  {
    "text": "the rest in practice book uh Jim Weber and Ian Robinson have created this mythical place called rest bucks which",
    "start": "2404400",
    "end": "2411240"
  },
  {
    "text": "is like a coffee shop but they're using that as their integration points integrating between the different roles",
    "start": "2411240",
    "end": "2416760"
  },
  {
    "text": "within the rest B world uh and here's some of the interactions that they have defined in the RBS world where you can",
    "start": "2416760",
    "end": "2423040"
  },
  {
    "text": "place an order uh you can update that order after a certain amount of time you can pay for it and you can pick it up",
    "start": "2423040",
    "end": "2429280"
  },
  {
    "text": "Etc uh you'll notice that uh that looks like a state machine that's actually really common in a lot of restful",
    "start": "2429280",
    "end": "2435960"
  },
  {
    "text": "systems is that you're building State machines and modeling States because resources move from one state to another",
    "start": "2435960",
    "end": "2441359"
  },
  {
    "text": "state so that's a very comfortable abstraction on top of",
    "start": "2441359",
    "end": "2446000"
  },
  {
    "start": "2446000",
    "end": "2446000"
  },
  {
    "text": "resources let's say that you are going to piece together what the integration apis look like for rest bucks here",
    "start": "2446640",
    "end": "2454280"
  },
  {
    "text": "notice we don't just have an endpoint we also have a verb because we're taking advantage now of uis and verbs in HTTP",
    "start": "2454280",
    "end": "2461800"
  },
  {
    "text": "and so you typically post against order which creates a new order and upon success it sets the location Header",
    "start": "2461800",
    "end": "2468760"
  },
  {
    "text": "information and the new orders URI notice that what you get back from here when you call this is a 2011 created",
    "start": "2468760",
    "end": "2476680"
  },
  {
    "text": "status code that has the location header set that points to the new resource you've created but no",
    "start": "2476680",
    "end": "2482200"
  },
  {
    "text": "body there's no reason to send back a body that says everything went okay or has the the location of this new water",
    "start": "2482200",
    "end": "2488680"
  },
  {
    "text": "in it because there's already a header in the in the metadata uh envelope in HTTP that handles that force and so rest",
    "start": "2488680",
    "end": "2496000"
  },
  {
    "text": "tries to take advantage of all those those facilities that are already there yet let you specify a specific",
    "start": "2496000",
    "end": "2502839"
  },
  {
    "text": "order and gets that value back put let you update an order at a given URI with",
    "start": "2502839",
    "end": "2508319"
  },
  {
    "text": "new impementation new uh new information and of course delete lets you logically",
    "start": "2508319",
    "end": "2513720"
  },
  {
    "text": "remove one of those U the idea here and this is what I was",
    "start": "2513720",
    "end": "2518760"
  },
  {
    "start": "2517000",
    "end": "2517000"
  },
  {
    "text": "going back to before is that when you actually do a post in this world to create a new order it doesn't create it",
    "start": "2518760",
    "end": "2524280"
  },
  {
    "text": "sends back a tool one created and since it's location header but no body comes back because there's no reason to send a",
    "start": "2524280",
    "end": "2530319"
  },
  {
    "text": "body back we sent the status back that said okay I created a new one for you and here it is but there's no reason to",
    "start": "2530319",
    "end": "2536280"
  },
  {
    "text": "send back uh a particular payload body you can also of course get error conditions here so we might get a bad",
    "start": "2536280",
    "end": "2543040"
  },
  {
    "text": "request or something like that there's an entire series of course of uh HTV status code you can use for",
    "start": "2543040",
    "end": "2549559"
  },
  {
    "text": "that so this is basically now the idea of starting to model uh things as",
    "start": "2549559",
    "end": "2554599"
  },
  {
    "start": "2550000",
    "end": "2550000"
  },
  {
    "text": "resources in our world uh and this really is what he calls crud web services this Embraces both HTTP and",
    "start": "2554599",
    "end": "2561800"
  },
  {
    "text": "Uris uh so it's using the the features of the platform that's running on taking advantage of leveraging those uh it",
    "start": "2561800",
    "end": "2568480"
  },
  {
    "text": "creates a really good solution to a lot of problems in fact anytime you got simple kind of credit operations against",
    "start": "2568480",
    "end": "2574760"
  },
  {
    "text": "resources is a perfect model because your model the resources you've got the verbs necessary to do operations on the",
    "start": "2574760",
    "end": "2580760"
  },
  {
    "text": "resources so it's best for these kind of crud applications and in fact a lot of people in the restful World get to here",
    "start": "2580760",
    "end": "2586800"
  },
  {
    "text": "and stop and that's that's perfectly fine you can absolutely say that you have a restful system if you stop here",
    "start": "2586800",
    "end": "2593359"
  },
  {
    "text": "because now what you're doing is modeling things as resources and letting those resources evolve over time as the",
    "start": "2593359",
    "end": "2598800"
  },
  {
    "text": "the real entity evolves over time but there's still one thing that we haven't really attacked that the last",
    "start": "2598800",
    "end": "2605599"
  },
  {
    "text": "thing that helps us attack which which is this shared tightly coupled understanding of resource life cycles",
    "start": "2605599",
    "end": "2612280"
  },
  {
    "text": "and this is a common problem when you're talking about integration we're talking about Enterprise Integration here here's",
    "start": "2612280",
    "end": "2618800"
  },
  {
    "start": "2615000",
    "end": "2615000"
  },
  {
    "text": "a fundamental problem in doing that think about for a second Enterprise",
    "start": "2618800",
    "end": "2625559"
  },
  {
    "text": "Integration almost as a model view controller view of the world so you're talking about Enterprise Integration so",
    "start": "2625559",
    "end": "2631200"
  },
  {
    "text": "the view part can be kind of thrown away that's going to be a portal or some application that Aggregates other stuff",
    "start": "2631200",
    "end": "2637079"
  },
  {
    "text": "we don't really care about that so let's talk about the controller and the model the model are things like data access",
    "start": "2637079",
    "end": "2644160"
  },
  {
    "text": "and business rules and other kinds of core things that should be facts about what your entities are and the",
    "start": "2644160",
    "end": "2650280"
  },
  {
    "text": "controllers are workflows the way you piece those models together so a controller says I need these pieces of",
    "start": "2650280",
    "end": "2655319"
  },
  {
    "text": "information from this uh model and this piece from this model and I'll tie them together and make them do some",
    "start": "2655319",
    "end": "2661359"
  },
  {
    "text": "work the problem with that though is when you're doing Enterprise Integration then your models are really applications",
    "start": "2661359",
    "end": "2667839"
  },
  {
    "text": "that contain some sort of data and logic and other stuff and now You' got a really fine grained workflow driven from",
    "start": "2667839",
    "end": "2674359"
  },
  {
    "text": "the client the client saying here are the resources that the things that I need here's what order to do them in",
    "start": "2674359",
    "end": "2679880"
  },
  {
    "text": "what methods to call on them and what that ends up doing is coupling the client and the server together forever",
    "start": "2679880",
    "end": "2685720"
  },
  {
    "text": "you can't really make a change to one of these guys if this guy is relying really heavily on the details of how that",
    "start": "2685720",
    "end": "2691960"
  },
  {
    "text": "workflow put is put together because for every one of these workflows even if the",
    "start": "2691960",
    "end": "2697119"
  },
  {
    "text": "application itself has a workflow in it they going to be multiple Branch points in that workflow as the user chooses different options or different things",
    "start": "2697119",
    "end": "2704119"
  },
  {
    "text": "there's no um the the client can't really uh in in our current world that's",
    "start": "2704119",
    "end": "2709480"
  },
  {
    "text": "not exposed to them so basically we're saying that applications can own their business logic but not their workflow",
    "start": "2709480",
    "end": "2715520"
  },
  {
    "text": "we're trying to extract the workflow up to the client because he has to be able to drive the decision-making process",
    "start": "2715520",
    "end": "2721160"
  },
  {
    "text": "with interactivity with a user or another system what a lot of vendors have tried",
    "start": "2721160",
    "end": "2727359"
  },
  {
    "text": "to do is look at this problem and say oh you know what that's a big problem we got a solution for you and the solution",
    "start": "2727359",
    "end": "2733440"
  },
  {
    "text": "is worse than the problem things like BPL and B uh BPM and basically any kind",
    "start": "2733440",
    "end": "2739800"
  },
  {
    "text": "of cartoons to code kind of scenario where you're supposed to draw a picture and then it's supposed to vomit out a bunch of code that does work these are",
    "start": "2739800",
    "end": "2746839"
  },
  {
    "text": "really dangerous because they demo really great and then you try to use them for real problem and you end up",
    "start": "2746839",
    "end": "2752160"
  },
  {
    "text": "with a giant hairball effect which is there's so many lines intersecting that you can't anything useful done with it",
    "start": "2752160",
    "end": "2758960"
  },
  {
    "text": "uh and now you've actually put yourself in a much worse situation because now",
    "start": "2758960",
    "end": "2764280"
  },
  {
    "text": "once you've got your workflow captured in this graphical tool it is no longer testable you can't write a unit test for",
    "start": "2764280",
    "end": "2769800"
  },
  {
    "text": "that stupid diagram that you got you can't really diff it either now underlying that stupid diagram is a",
    "start": "2769800",
    "end": "2775960"
  },
  {
    "text": "10,000 line XML document you can diff the 10,000 line XML document if you want but that's a job with a high suicide",
    "start": "2775960",
    "end": "2782280"
  },
  {
    "text": "rate nobody wants to do that there's no good way to see that diff graphically so now you're in this this XML kind of",
    "start": "2782280",
    "end": "2788520"
  },
  {
    "text": "world you can't easily refactor this stuff and so what happens if you have",
    "start": "2788520",
    "end": "2793559"
  },
  {
    "text": "one of these diagrams somewhere and there's another piece of behavior that's almost the same but a little bit",
    "start": "2793559",
    "end": "2799079"
  },
  {
    "text": "different over here there is no extract method and use commonality so you're left with copy and paste coding you copy",
    "start": "2799079",
    "end": "2806079"
  },
  {
    "text": "this workflow and then paste it over here and make a small change to it but now you get this proliferation of",
    "start": "2806079",
    "end": "2811800"
  },
  {
    "text": "different almost oneoff versions of these work processes so I don't think this is even",
    "start": "2811800",
    "end": "2817400"
  },
  {
    "text": "usable and it still doesn't attack this fundamental problem that applications own their business logic but not their",
    "start": "2817400",
    "end": "2823119"
  },
  {
    "text": "workflow that's where this hados idea comes in and I've uh I've said that anytime",
    "start": "2823119",
    "end": "2829960"
  },
  {
    "text": "you create an acronym with a word hate in it is probably not a great thing but this is just kind of a side effect it",
    "start": "2829960",
    "end": "2835160"
  },
  {
    "text": "really is an acronym that means hypermedia is the engine of application State here's the idea with uh",
    "start": "2835160",
    "end": "2842240"
  },
  {
    "text": "hados is that rather than doing integration at the method level",
    "start": "2842240",
    "end": "2847440"
  },
  {
    "text": "against our models against our server applications let's do it at the process",
    "start": "2847440",
    "end": "2852960"
  },
  {
    "text": "level instead the idea of hados is that when you send things back from the",
    "start": "2852960",
    "end": "2858079"
  },
  {
    "text": "server you send back still data because you care about data but the other thing",
    "start": "2858079",
    "end": "2863400"
  },
  {
    "text": "you send back are links and those links lead you to subsequent workflows within",
    "start": "2863400",
    "end": "2870319"
  },
  {
    "text": "this application so let's say this application does something about ordering when you place an order at R",
    "start": "2870319",
    "end": "2875839"
  },
  {
    "text": "Buck you've got two op options you can either pay by credit card or pay by cash those are two different branching",
    "start": "2875839",
    "end": "2881440"
  },
  {
    "text": "workflows that live in this application that models things about payments what hados is going to do is",
    "start": "2881440",
    "end": "2887880"
  },
  {
    "text": "say once you've placed an order there are two things you can do in my universe you can pay by cash or pay by credit",
    "start": "2887880",
    "end": "2894240"
  },
  {
    "text": "card I'm going to send you back two links if you follow one link you pay by credit card if you follow the other link",
    "start": "2894240",
    "end": "2899319"
  },
  {
    "text": "you pay by cash that's going to take you to a resource that handles the details of what that interaction is that's the",
    "start": "2899319",
    "end": "2905480"
  },
  {
    "text": "idea behind hyper media is that when you make a request to one of these resources what you get back is data but also a",
    "start": "2905480",
    "end": "2912240"
  },
  {
    "start": "2906000",
    "end": "2906000"
  },
  {
    "text": "bunch of links about subsequent steps within the workflow now all your client becomes is",
    "start": "2912240",
    "end": "2918680"
  },
  {
    "text": "the entry point to a workflow that is defined and lives forever on that server",
    "start": "2918680",
    "end": "2923880"
  },
  {
    "text": "application that knows the real details of that workflow the validations the data access all those other things what",
    "start": "2923880",
    "end": "2930799"
  },
  {
    "text": "it's doing what hados lets you do is expose that workflow to the rest of the world and a link based way so that now",
    "start": "2930799",
    "end": "2938599"
  },
  {
    "text": "the client can say okay I've placed the order now the option comes back to pay I'll take the payment option now that",
    "start": "2938599",
    "end": "2944480"
  },
  {
    "text": "comes back to well I don't there's no payment anymore but the state machine says okay now I can pick it up and so",
    "start": "2944480",
    "end": "2949559"
  },
  {
    "text": "you're just moving from state to state over time uh and the the next state that's possible comes back to you and",
    "start": "2949559",
    "end": "2956280"
  },
  {
    "text": "links every time you make a call to one of these resources what you're really doing here is establishing contracts",
    "start": "2956280",
    "end": "2961880"
  },
  {
    "start": "2960000",
    "end": "2960000"
  },
  {
    "text": "between things and so we're used to contracts looking a different way and other kinds of integration world but",
    "start": "2961880",
    "end": "2967440"
  },
  {
    "text": "contracts are really just combination of protocols a protocol in this world is",
    "start": "2967440",
    "end": "2972480"
  },
  {
    "text": "consists of HTTP edms like verbs and metadata uh entry point Uris that get",
    "start": "2972480",
    "end": "2978280"
  },
  {
    "text": "you to the beginning points of workflow processes and then the subsequent steps come back to you as links within that uh",
    "start": "2978280",
    "end": "2985160"
  },
  {
    "text": "as a hyperlink and then media types would Define what the shape of the data looks like this is what we use dtds and",
    "start": "2985160",
    "end": "2992400"
  },
  {
    "text": "XML schemas for in the kind of traditional integration world that's media types are used in the uh the hyper",
    "start": "2992400",
    "end": "2998520"
  },
  {
    "text": "media world uh and those media types really specify things like",
    "start": "2998520",
    "end": "3003680"
  },
  {
    "text": "schemas processing models and how link relationships work um but it's really",
    "start": "3003680",
    "end": "3009359"
  },
  {
    "text": "just the the same scheme of stuff that we're used to before cast in a different light and in fact you don't even have to use media types here you can use",
    "start": "3009359",
    "end": "3014880"
  },
  {
    "text": "traditional kinds of XML schema if you want which we end up doing a lot of cases excuse me but the point of this is",
    "start": "3014880",
    "end": "3021799"
  },
  {
    "text": "the the core of any contract are what formats do you accept what's the processing model and kind of controls",
    "start": "3021799",
    "end": "3027440"
  },
  {
    "text": "can I use so if you take this and apply it to the exact example from the rest in",
    "start": "3027440",
    "end": "3033760"
  },
  {
    "text": "practice book rest bucks what you see what ends up",
    "start": "3033760",
    "end": "3039160"
  },
  {
    "text": "happening is excuse me excuse me these U map onto business",
    "start": "3039160",
    "end": "3047480"
  },
  {
    "text": "processes these business processes are basically just a state machine because anytime you're dealing with resources",
    "start": "3047480",
    "end": "3053400"
  },
  {
    "text": "you're really talking about moving a resource from one state to another state which is a great model for a state",
    "start": "3053400",
    "end": "3059079"
  },
  {
    "text": "machine that's really all we're building when we build uh one of these these systems is building a state machine and",
    "start": "3059079",
    "end": "3065240"
  },
  {
    "text": "defining what possible States you can go to next this is actually really nice architecturally because building State",
    "start": "3065240",
    "end": "3071400"
  },
  {
    "text": "machines helps you think about all the states that you should accommodate for that resource because resources have a",
    "start": "3071400",
    "end": "3077119"
  },
  {
    "text": "certain number of valid States now you can start thinking about you know what is the delete state or this big",
    "start": "3077119",
    "end": "3083760"
  },
  {
    "text": "resource and so the links that come back Define the kind of interactions you can have with the application so for example",
    "start": "3083760",
    "end": "3089920"
  },
  {
    "start": "3084000",
    "end": "3084000"
  },
  {
    "text": "if I place an order what I'll get back is a way to make a payment or a way against this URI to either get the",
    "start": "3089920",
    "end": "3096799"
  },
  {
    "text": "current status on it do an update for it or delete that order so this is what a",
    "start": "3096799",
    "end": "3101880"
  },
  {
    "start": "3100000",
    "end": "3100000"
  },
  {
    "text": "snippet of that hyper media document looks like that comes back it has coffee information in it but it also has these",
    "start": "3101880",
    "end": "3107880"
  },
  {
    "text": "domain application protocol links uh what it's related to what the URI is and",
    "start": "3107880",
    "end": "3113559"
  },
  {
    "text": "what media type is expecting this tells you the details about what the thing's going to look like what shape it is from",
    "start": "3113559",
    "end": "3119640"
  },
  {
    "text": "an XML standpoint it's schema it's DTD or whatever that is which let you do validation at as you make calls these",
    "start": "3119640",
    "end": "3127480"
  },
  {
    "text": "resources one of the nice things about this as an Enterprise Integration architecture is because it relies",
    "start": "3127480",
    "end": "3133200"
  },
  {
    "start": "3133000",
    "end": "3133000"
  },
  {
    "text": "heavily on state machines it's usually if you have a well- constructed application just kind of lay this",
    "start": "3133200",
    "end": "3139280"
  },
  {
    "text": "integration logic as a facade over your existing system you basically take those uh resource uh concept that you want to",
    "start": "3139280",
    "end": "3147119"
  },
  {
    "text": "support Implement those internally for your code and then build a a state machine facade over the top of them and",
    "start": "3147119",
    "end": "3153040"
  },
  {
    "text": "call into those to uh to get it to do",
    "start": "3153040",
    "end": "3157079"
  },
  {
    "text": "work so what this gives you is evolvable application integration what",
    "start": "3159040",
    "end": "3165559"
  },
  {
    "text": "this allows you to do is say that I've decoupled now the life cycle from my",
    "start": "3165559",
    "end": "3171520"
  },
  {
    "text": "client and my server because let's say that you're in the rest books universe and we're using an internal credit card",
    "start": "3171520",
    "end": "3178160"
  },
  {
    "text": "payment processing service and when you make place a order in rest bucks what you get back is a link along with a",
    "start": "3178160",
    "end": "3184480"
  },
  {
    "text": "media type that says okay if you want to make a payment you follow this link with these data types and you can make a",
    "start": "3184480",
    "end": "3189559"
  },
  {
    "text": "payment we change at some point to use an external credit card processing facility we changed the server to now",
    "start": "3189559",
    "end": "3195760"
  },
  {
    "text": "send a new link and a new hyper media type back to the client but all the client knows is that when you want to",
    "start": "3195760",
    "end": "3201680"
  },
  {
    "text": "make payment you follow this link that it got changed is irrelevant to the client because the client knows I send",
    "start": "3201680",
    "end": "3207640"
  },
  {
    "text": "this link with this information and I get payment information back and so that allows you to decouple the evolution of",
    "start": "3207640",
    "end": "3214520"
  },
  {
    "text": "the server application and the client application so they can evolve independently and you can support",
    "start": "3214520",
    "end": "3219799"
  },
  {
    "text": "multiple versions against the server and some other nice tricks like",
    "start": "3219799",
    "end": "3224799"
  },
  {
    "text": "that so remember when I was talking about this diagram earlier I said that the architectural elements were the the",
    "start": "3227119",
    "end": "3233920"
  },
  {
    "text": "things that are hard to change later and you want to little of that stuff as",
    "start": "3233920",
    "end": "3239000"
  },
  {
    "text": "possible because architectural elements represent constraints so one of the ways that you can do this is try to isolate",
    "start": "3239000",
    "end": "3245799"
  },
  {
    "text": "orthogonal concerns and basically componentize them let me show you what I mean by that with this case",
    "start": "3245799",
    "end": "3251839"
  },
  {
    "text": "study this is a case study for a project that I've worked on variously for the last four or five years this is a",
    "start": "3251839",
    "end": "3257839"
  },
  {
    "text": "project that's running in uh our office in Atlanta right now for a company called o.com Online vehicle exchange.com",
    "start": "3257839",
    "end": "3264920"
  },
  {
    "text": "this is the whole s version of autotrader.com if you own a car dealership and you want to auction cars",
    "start": "3264920",
    "end": "3270880"
  },
  {
    "text": "to other car dealerships you can get a login on this site so they do car auctions is what they do here and",
    "start": "3270880",
    "end": "3276319"
  },
  {
    "text": "there's a really fascinating story about how the uh asynchronous messaging evolved in this",
    "start": "3276319",
    "end": "3281520"
  },
  {
    "text": "application so the very early days of this application the users wanted uh a",
    "start": "3281520",
    "end": "3286839"
  },
  {
    "start": "3283000",
    "end": "3283000"
  },
  {
    "text": "sense of progress this is an auto auction application and for car dealerships it's not atypical for them",
    "start": "3286839",
    "end": "3292760"
  },
  {
    "text": "to upload a 100 cars at a time with 50 photos each and nobody wants to look at an Ajax spinner for an hour and a half",
    "start": "3292760",
    "end": "3299119"
  },
  {
    "text": "so they wanted some sense of progress or the ability to start a job and then come back later and see if it's done that's",
    "start": "3299119",
    "end": "3304720"
  },
  {
    "text": "classical kind of asynchronous messaging and so the the tech lead met with the developers on the team it was suggested",
    "start": "3304720",
    "end": "3310160"
  },
  {
    "text": "that we should add a message CU but they did a couple of spikes somebody found this little thing called background RB",
    "start": "3310160",
    "end": "3316200"
  },
  {
    "text": "which basically sets up a very simple single message message CU backed by a relational database they said you know",
    "start": "3316200",
    "end": "3322000"
  },
  {
    "text": "what for the simple problem we have that's good enough but but this wasn't the tech",
    "start": "3322000",
    "end": "3327319"
  },
  {
    "text": "lead's first project he figured pretty definitively that we'll eventually need",
    "start": "3327319",
    "end": "3332799"
  },
  {
    "text": "to replace this simple mechanism with something else and so he was careful to put it behind the Ruby equivalent of an",
    "start": "3332799",
    "end": "3340798"
  },
  {
    "text": "interface about a year into the project a little over a year a second kind of asynchronous behavior popped up the",
    "start": "3340920",
    "end": "3347880"
  },
  {
    "text": "ability to do a timed events like Cron job kinds of things we built that on top of background RB after spiking to make",
    "start": "3347880",
    "end": "3354920"
  },
  {
    "text": "sure it would still handle that and did so that was fine then about the 2-year mark on the project a third requirement",
    "start": "3354920",
    "end": "3361960"
  },
  {
    "text": "popped up for asynchronous messaging which are constantly updated things like cash values and accounts and things like",
    "start": "3361960",
    "end": "3368760"
  },
  {
    "text": "that at the same time that came about our the background uh RB infrastructure",
    "start": "3368760",
    "end": "3374760"
  },
  {
    "text": "is starting to Creek a little bit in fact we've been using this simple message back by a database for a long",
    "start": "3374760",
    "end": "3380280"
  },
  {
    "text": "time our dbas though had caught when that were using one of their precious databases as a message cue and they",
    "start": "3380280",
    "end": "3385480"
  },
  {
    "text": "started making this face at us every time we pass him in the hall which we view is probably not a good thing for the Project's longevity uh and so that",
    "start": "3385480",
    "end": "3392079"
  },
  {
    "text": "was the impetus for us to switch to a real message Q Starling which is a message Que in the Ruby on Rails",
    "start": "3392079",
    "end": "3397720"
  },
  {
    "text": "world but notice what happened there a couple of things actually happened that were",
    "start": "3397720",
    "end": "3402920"
  },
  {
    "text": "V notice the very beginning of the project the main characteristic is you don't know what you don't know so a lot",
    "start": "3402920",
    "end": "3408920"
  },
  {
    "text": "of projects just in a kneejerk way say well let's buy the fanciest piece of infrastructure we can just in case we",
    "start": "3408920",
    "end": "3414240"
  },
  {
    "text": "need all that capability later but I talked about this before that when you do that you basically take on a bunch of",
    "start": "3414240",
    "end": "3421039"
  },
  {
    "text": "technical debt that you don't start paying back until you start using all those Advanced features the problem",
    "start": "3421039",
    "end": "3427000"
  },
  {
    "text": "though is you don't know which of those Advanced features you're eventually going to use and so in a lot of cases organizations end up paying money for",
    "start": "3427000",
    "end": "3434000"
  },
  {
    "text": "technical debt that they never justify they never end up using that advanced feature but they always end up working",
    "start": "3434000",
    "end": "3440359"
  },
  {
    "text": "around it every time they touch this tool which is just a the definition of technical debt",
    "start": "3440359",
    "end": "3447559"
  },
  {
    "text": "there's another observation I'll make here as well remember I said that architectural",
    "start": "3447559",
    "end": "3453160"
  },
  {
    "text": "elements were the things that were hard to change later and messaging infrastructure is definitely an architectural element something that is",
    "start": "3453160",
    "end": "3460200"
  },
  {
    "text": "traditionally hard to change later but the tech lead on this project",
    "start": "3460200",
    "end": "3465480"
  },
  {
    "text": "knew that background RB was not going to be the horse they rode into the sunset",
    "start": "3465480",
    "end": "3470599"
  },
  {
    "text": "he knew that it was a temporary it's good enough for right now so when he put that in place he was careful to put that",
    "start": "3470599",
    "end": "3477240"
  },
  {
    "text": "behind a facade behind an interface so that when it came time to switch this",
    "start": "3477240",
    "end": "3482280"
  },
  {
    "text": "out it took one pair of developers less than a week to swap out background RB with Starling by putting it behind an",
    "start": "3482280",
    "end": "3489880"
  },
  {
    "text": "interphase he basically converted it from an architectural element into a design element and that's exactly what",
    "start": "3489880",
    "end": "3496880"
  },
  {
    "text": "you want to do convert things that are hard to change later into things that are easier to change",
    "start": "3496880",
    "end": "3502440"
  },
  {
    "text": "later and that's exactly where uh The Continuous delivery guys are trying to go with a lot of things they're talking",
    "start": "3502440",
    "end": "3508920"
  },
  {
    "text": "about building component-based",
    "start": "3508920",
    "end": "3512280"
  },
  {
    "text": "architectures and so uh I will talk about this in great depth on my workshop on uh on whatever day I'm doing",
    "start": "3515280",
    "end": "3521760"
  },
  {
    "start": "3518000",
    "end": "3518000"
  },
  {
    "text": "workshops a couple of days from now on continuous delivery but this is the idea of the continuous delivery world of this",
    "start": "3521760",
    "end": "3527640"
  },
  {
    "text": "idea of doing automatic bills this is what we know of as continuous integration now but as we get further",
    "start": "3527640",
    "end": "3533520"
  },
  {
    "text": "and further along these bills we're going to do more and more sophistic ated kinds of tests and builds for things",
    "start": "3533520",
    "end": "3539079"
  },
  {
    "text": "what we'd eventually like to do though is stop doing hyperactive builds here stop building the entire application",
    "start": "3539079",
    "end": "3545240"
  },
  {
    "text": "every time and eventually get around to this idea of continuous integration at the component level if you can build",
    "start": "3545240",
    "end": "3551160"
  },
  {
    "start": "3546000",
    "end": "3546000"
  },
  {
    "text": "component based architectures what you do is make the architectural pieces relatively easy to swap out for other",
    "start": "3551160",
    "end": "3557720"
  },
  {
    "text": "ones and you make those architectural pieces easier to build independently of the rest of the application what we'",
    "start": "3557720",
    "end": "3564559"
  },
  {
    "text": "eventually like to do is get to this place place where your application consists of several coarse grain",
    "start": "3564559",
    "end": "3569880"
  },
  {
    "text": "components Each of which has its own life cycle it has its own build kind of semantics it has its own environmental",
    "start": "3569880",
    "end": "3576200"
  },
  {
    "text": "semantics and a build a change in this guy automatically triggers a build and a pipeline for this dependent application",
    "start": "3576200",
    "end": "3583680"
  },
  {
    "text": "you're actually cutting down on the amount of code that you're doing every time and isolating changes behind those",
    "start": "3583680",
    "end": "3588920"
  },
  {
    "text": "component barriers so that you have less coupling across the components of your",
    "start": "3588920",
    "end": "3594000"
  },
  {
    "text": "application uh which is obviously a desirable architectural",
    "start": "3594000",
    "end": "3599200"
  },
  {
    "text": "characteristic so I'll leave you with this actually let me back up one back in",
    "start": "3601640",
    "end": "3607240"
  },
  {
    "text": "2006 I kind of accidentally repop poize this term polyglot programming this idea",
    "start": "3607240",
    "end": "3612640"
  },
  {
    "text": "that when we have really super powerful runtimes like Java then you can start mixing and matching languages on that",
    "start": "3612640",
    "end": "3619280"
  },
  {
    "text": "runtime and my colleague Ola bin when I came out with my polygot programming post came out with a pyramid where he",
    "start": "3619280",
    "end": "3626520"
  },
  {
    "text": "suggested that maybe you want more statically verifiable languages in the bottom easier to use Dynamic languages",
    "start": "3626520",
    "end": "3632680"
  },
  {
    "text": "in the middle and then dsls kind of writing on top of all those I think this is a really really uh perceptive",
    "start": "3632680",
    "end": "3639160"
  },
  {
    "text": "observation but this was 2006 and I actually think this has changed in fact",
    "start": "3639160",
    "end": "3644319"
  },
  {
    "text": "my pyramid today I actually think the static versus Dynamic thing is kind of a red hearing my pyramid today would say",
    "start": "3644319",
    "end": "3650480"
  },
  {
    "text": "that you have functional code on the bottom because this is programmatically verifiable much more more rigorously",
    "start": "3650480",
    "end": "3656640"
  },
  {
    "text": "than any kind of static typing is so this is a closure or scolar or something like that imperative languages like",
    "start": "3656640",
    "end": "3662280"
  },
  {
    "text": "groovy or Ruby on the top to do things like user interfaces and the things that you don't need as much hardcore",
    "start": "3662280",
    "end": "3668000"
  },
  {
    "text": "verifiable accuracy but you need productivity and then dsl's riding on top of that still but actually I think",
    "start": "3668000",
    "end": "3674720"
  },
  {
    "text": "the dsls don't just write on top they actually pervade the entire stack now so you see a lot of DSL techniques in",
    "start": "3674720",
    "end": "3680960"
  },
  {
    "text": "functional programming languages things that like data access SQL libraries that are done very functionally",
    "start": "3680960",
    "end": "3686799"
  },
  {
    "text": "uh and so I think you're going to see dsls kind of leaking through all this stuff and the nice thing about functional code is that it tends to",
    "start": "3686799",
    "end": "3693920"
  },
  {
    "text": "encourage this idea of creating component-based architectures with good clean boundaries between them and so",
    "start": "3693920",
    "end": "3699760"
  },
  {
    "text": "ultimately I think my goal this is kind of my entire landscape of the world is that application architecture is going",
    "start": "3699760",
    "end": "3706920"
  },
  {
    "text": "toward functional in the bottom imperative in the Middle with dsls kind of pervading all those layers uh using",
    "start": "3706920",
    "end": "3714079"
  },
  {
    "text": "these emergent design techniques Enterprise application uses the web as a platform using component-based",
    "start": "3714079",
    "end": "3720440"
  },
  {
    "text": "development and this entire thing is wrapped in a big continuous integration feedback loop that's the kind of idea",
    "start": "3720440",
    "end": "3727760"
  },
  {
    "text": "that we got on what agile uh architecture and design looks like now",
    "start": "3727760",
    "end": "3732920"
  },
  {
    "text": "thanks very much for coming hope you enjoyed it thanks [Music]",
    "start": "3732920",
    "end": "3747800"
  }
]