[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "my name is Daniel Amir so I'm from the University of Quebec and I'm going to",
    "start": "4130",
    "end": "10070"
  },
  {
    "text": "talk to you about parsing JSON really quickly so I'm one of the authors of",
    "start": "10070",
    "end": "16580"
  },
  {
    "text": "what might be the fastest json parser in the world and so i'm going to try to",
    "start": "16580",
    "end": "23240"
  },
  {
    "text": "tell you about the strategies we've used and give you some examples of the tricks",
    "start": "23240",
    "end": "30019"
  },
  {
    "text": "that we've been building up to make this possible so i'm going to start with a",
    "start": "30019",
    "end": "40809"
  },
  {
    "start": "37000",
    "end": "81000"
  },
  {
    "text": "relatively simple and naive question so if i to motivate my talk so if I give",
    "start": "40809",
    "end": "47989"
  },
  {
    "text": "you a relatively large file and I ask you to read it in software and then I",
    "start": "47989",
    "end": "56510"
  },
  {
    "text": "ask you what is your limit right so are you limited by the performance of your disk or are you limited by the",
    "start": "56510",
    "end": "64339"
  },
  {
    "text": "performance of your processor so I'm not going to ask for a shelf and but I would",
    "start": "64340",
    "end": "69590"
  },
  {
    "text": "guess that most people would say that you're strictly limited by your disk and I could reframe the same question by",
    "start": "69590",
    "end": "77140"
  },
  {
    "text": "talking about network but I would argue",
    "start": "77140",
    "end": "82400"
  },
  {
    "start": "81000",
    "end": "121000"
  },
  {
    "text": "that the story is a little bit more computer than people sometimes think so",
    "start": "82400",
    "end": "89990"
  },
  {
    "text": "in preparing this talk I just benchmark to disk on my iMac which is just a basic",
    "start": "89990",
    "end": "97930"
  },
  {
    "text": "stupid iMac on my desk on campus and so",
    "start": "97930",
    "end": "104229"
  },
  {
    "text": "my desk it was rated at 2.2 gigabyte per",
    "start": "104229",
    "end": "110420"
  },
  {
    "text": "second it's a cloud put and and of course there are better discs out there and our network adapters that are much",
    "start": "110420",
    "end": "118490"
  },
  {
    "text": "for a sort of much faster also so let's",
    "start": "118490",
    "end": "123799"
  },
  {
    "start": "121000",
    "end": "264000"
  },
  {
    "text": "compare with how quickly we can do very very naive tasks using software so let's",
    "start": "123799",
    "end": "133760"
  },
  {
    "text": "say for example that I take relatively large file and I put it in memory now my",
    "start": "133760",
    "end": "141740"
  },
  {
    "text": "memory is probably not going to be much of a bottleneck because I can read tens",
    "start": "141740",
    "end": "147860"
  },
  {
    "text": "of tens of gigabytes per second and me",
    "start": "147860",
    "end": "154400"
  },
  {
    "text": "more easily so so let's not worry about memory and let's try to just go through",
    "start": "154400",
    "end": "163130"
  },
  {
    "text": "two lines in my file and just add up their length now this is a stupid",
    "start": "163130",
    "end": "168740"
  },
  {
    "text": "benchmark but the point is illustrate just about the simplest thing you could",
    "start": "168740",
    "end": "174410"
  },
  {
    "text": "do with this sort of data and so if a bench market using a fairly standard CPU",
    "start": "174410",
    "end": "183140"
  },
  {
    "text": "I get a fraction of a gigabyte per second in speed so I'm if I were to do",
    "start": "183140",
    "end": "191780"
  },
  {
    "text": "the same thing and my input was disk I would be entirely CPU bound in this case",
    "start": "191780",
    "end": "198680"
  },
  {
    "text": "if the disk is all mine and the file is large enough now you can switch to you",
    "start": "198680",
    "end": "207260"
  },
  {
    "text": "can switch to C++ and again I'm only using rather naively two standard api's",
    "start": "207260",
    "end": "216940"
  },
  {
    "text": "so in this case I get at least in my test I get slightly better so I break",
    "start": "216940",
    "end": "222860"
  },
  {
    "text": "the one gigabyte person barrier and it's",
    "start": "222860",
    "end": "230930"
  },
  {
    "text": "basically the same silly test now my point here is not so much that I",
    "start": "230930",
    "end": "236690"
  },
  {
    "text": "couldn't do these things much faster so certainly even whether you're in Java or",
    "start": "236690",
    "end": "242500"
  },
  {
    "text": "in C++ you can certainly beat these numbers but here I'm just trying to",
    "start": "242500",
    "end": "247880"
  },
  {
    "text": "illustrate that if you're writing code just standard code you're probably going",
    "start": "247880",
    "end": "254240"
  },
  {
    "text": "to have some trouble reaching gigabytes of data per second interesting files",
    "start": "254240",
    "end": "265090"
  },
  {
    "start": "264000",
    "end": "300000"
  },
  {
    "text": "now nobody here will say this but some",
    "start": "265449",
    "end": "270490"
  },
  {
    "text": "people could say well okay but it doesn't matter because your processor or",
    "start": "270490",
    "end": "276250"
  },
  {
    "text": "your core is going to get much faster next year in two years that's what people used to say in the 90s now of",
    "start": "276250",
    "end": "283240"
  },
  {
    "text": "course we all know that our course are not getting much faster with each",
    "start": "283240",
    "end": "288280"
  },
  {
    "text": "passing year so if we're going to reach",
    "start": "288280",
    "end": "293409"
  },
  {
    "text": "gigabytes per second processing data we better have good software to do it so of course nobody",
    "start": "293409",
    "end": "301779"
  },
  {
    "start": "300000",
    "end": "344000"
  },
  {
    "text": "cares about parsing lines of text and Counting their length in software that's",
    "start": "301779",
    "end": "308680"
  },
  {
    "text": "kind of a silly problem but people do care about things like JSON so I would",
    "start": "308680",
    "end": "315370"
  },
  {
    "text": "assume that most people hear word of JSON hopefully so it's fairly standard",
    "start": "315370",
    "end": "321129"
  },
  {
    "text": "thing it's well established it's fairly simple you have arrays strings numbers",
    "start": "321129",
    "end": "327930"
  },
  {
    "text": "it's all glued together with with some some text and it's over the the public",
    "start": "327930",
    "end": "338139"
  },
  {
    "text": "API is and so forth and if an entire systems are built around passing JSON",
    "start": "338139",
    "end": "345400"
  },
  {
    "start": "344000",
    "end": "373000"
  },
  {
    "text": "around so with here a lot not not from",
    "start": "345400",
    "end": "350469"
  },
  {
    "text": "everyone from from enough people is that they have all these say cool AI stuff",
    "start": "350469",
    "end": "358000"
  },
  {
    "text": "but their servers are just spending all their time producing reason and parsing",
    "start": "358000",
    "end": "364539"
  },
  {
    "text": "JSON and I see a few people laughing so maybe this happens to you it's kind of",
    "start": "364539",
    "end": "370539"
  },
  {
    "text": "silly if you think about it but that's life so here I'm going to focus on JSON",
    "start": "370539",
    "end": "377740"
  },
  {
    "start": "373000",
    "end": "416000"
  },
  {
    "text": "parsing that's maybe important to define what I mean by JSON parsing because it could mean different things to different",
    "start": "377740",
    "end": "383020"
  },
  {
    "text": "people so what I mean here is you read all of the content you check that is",
    "start": "383020",
    "end": "389080"
  },
  {
    "text": "valid as per the specification you check for example that the encoding is it's",
    "start": "389080",
    "end": "395649"
  },
  {
    "text": "correct so you have proper strings you two numbers and you build some kind of",
    "start": "395649",
    "end": "402030"
  },
  {
    "text": "tree that that structure so I document object model right now arguably this is",
    "start": "402030",
    "end": "409990"
  },
  {
    "text": "a little bit harder than parsing lines and take spot no you should be a little bit slower so I'll quickly can you go",
    "start": "409990",
    "end": "418060"
  },
  {
    "text": "well so if you pick what might be or it's certainly one of the very best json",
    "start": "418060",
    "end": "424810"
  },
  {
    "text": "library in java jackson and if i use a a",
    "start": "424810",
    "end": "430810"
  },
  {
    "text": "pretty good benchmark file that I've picked up somewhere on the web but that",
    "start": "430810",
    "end": "436240"
  },
  {
    "text": "i use that i'm going to use throughout this talk so it's twitter Jason was",
    "start": "436240",
    "end": "441960"
  },
  {
    "text": "what's collected from the Twitter API and contains like numbers and Unicode",
    "start": "441960",
    "end": "449919"
  },
  {
    "text": "string and so forth so it's a pretty good benchmark because it's an all-around typical jizan file I get that",
    "start": "449919",
    "end": "458219"
  },
  {
    "text": "Jackson can ingest the dissin file at a",
    "start": "458219",
    "end": "464889"
  },
  {
    "text": "fraction about a third in my case for of course the results will vary depending",
    "start": "464889",
    "end": "470199"
  },
  {
    "text": "on your hardware but and your software but I post my source code so at about a",
    "start": "470199",
    "end": "477190"
  },
  {
    "text": "fraction about third of a gigabyte per second so we're very far from maxing out",
    "start": "477190",
    "end": "484180"
  },
  {
    "text": "our disk with a single core so if we switch to C++ then a very very very good",
    "start": "484180",
    "end": "494169"
  },
  {
    "text": "library is rapid Jason so if you're few coding in C++ and processing Jason and",
    "start": "494169",
    "end": "500889"
  },
  {
    "text": "you want really really good performance and probably probably you know ever about rapid Jason so you do a little bit",
    "start": "500889",
    "end": "508900"
  },
  {
    "text": "better you reach in this benchmark you reach about 2/3 of a gigabyte per second",
    "start": "508900",
    "end": "516039"
  },
  {
    "text": "but again you're very far from maxing out the disk in this instance so the",
    "start": "516039",
    "end": "522219"
  },
  {
    "text": "question is can you do it that is can you parse Jason at gigabyte speed and of",
    "start": "522219",
    "end": "530620"
  },
  {
    "text": "course you can otherwise it wouldn't be much of",
    "start": "530620",
    "end": "536110"
  },
  {
    "text": "a talk so no I have a bit more to go",
    "start": "536110",
    "end": "544450"
  },
  {
    "text": "okay so so we built this library simply Juicin that can achieve on this",
    "start": "544450",
    "end": "552220"
  },
  {
    "text": "benchmark 2.4 gigabyte per second so",
    "start": "552220",
    "end": "557620"
  },
  {
    "text": "it's actually the the only library that I know of that they're gonna actually max out my disk and and so just just to",
    "start": "557620",
    "end": "568840"
  },
  {
    "start": "567000",
    "end": "623000"
  },
  {
    "text": "think about what this means this means that on my test machine roughly speaking",
    "start": "568840",
    "end": "574480"
  },
  {
    "text": "please don't do any math they're just just an order of magnitude it's about 1.5 cycles per input byte right so this",
    "start": "574480",
    "end": "584830"
  },
  {
    "text": "does not give you a lot of leeway you cannot take each byte and start to think deeply about what to do with this",
    "start": "584830",
    "end": "592900"
  },
  {
    "text": "byte and then switch to the next one you only have one point five cycles per input bite now it's a little bit better",
    "start": "592900",
    "end": "599290"
  },
  {
    "text": "in sound right because our superscalar processors can do many things in in one",
    "start": "599290",
    "end": "607780"
  },
  {
    "text": "in one cycle at least when they're not doing silly random access work in memory",
    "start": "607780",
    "end": "615130"
  },
  {
    "text": "or other limitation but when it's your CPU bound you can certainly beat one",
    "start": "615130",
    "end": "620800"
  },
  {
    "text": "instruction per cycle so this is a bit better than sound so how did we do it",
    "start": "620800",
    "end": "626680"
  },
  {
    "start": "623000",
    "end": "657000"
  },
  {
    "text": "now I'm going to cover a few basic strategies that probably most people",
    "start": "626680",
    "end": "632020"
  },
  {
    "text": "here know but I'm going to go a little bit more deeply in them and then I'm going to show we apply them so this was",
    "start": "632020",
    "end": "640480"
  },
  {
    "text": "mentioned today and several times people talk about measuring mispredicted branches and so on but I'm going to go",
    "start": "640480",
    "end": "648940"
  },
  {
    "text": "deeper into this and actually say that you should really work hard to avoid",
    "start": "648940",
    "end": "654610"
  },
  {
    "text": "hard to predict branches and I'm going to work from an example so let's say for",
    "start": "654610",
    "end": "662110"
  },
  {
    "start": "657000",
    "end": "688000"
  },
  {
    "text": "example you you're trying to write random integers to an array right so you do a",
    "start": "662110",
    "end": "669250"
  },
  {
    "text": "silly loop and if your random integers are generator using as a fast",
    "start": "669250",
    "end": "675790"
  },
  {
    "text": "state-of-the-art pseudo-random number generator you might be able to do this",
    "start": "675790",
    "end": "680860"
  },
  {
    "text": "task using about say three cycles per number generated okay now let's say you",
    "start": "680860",
    "end": "689590"
  },
  {
    "text": "modify this job and you say well ok I'm going and this code here is silly but",
    "start": "689590",
    "end": "696220"
  },
  {
    "text": "it's just to illustrate my point I'm going to do the same work but I only",
    "start": "696220",
    "end": "701530"
  },
  {
    "text": "want to write out odd numbers right and I do it in fully manner I generate my",
    "start": "701530",
    "end": "709720"
  },
  {
    "text": "random integer and then I check whether it's odd now this is very fast I only",
    "start": "709720",
    "end": "715120"
  },
  {
    "text": "have to check the least significant bit and if it is I'm going to write it up",
    "start": "715120",
    "end": "720300"
  },
  {
    "text": "now if if you're if you're a bit naive about it and if you're you're doing like",
    "start": "720300",
    "end": "727900"
  },
  {
    "text": "textbook computer science you might look at this and say well it's not",
    "start": "727900",
    "end": "733360"
  },
  {
    "text": "necessarily any slower and might even be faster than previous code because you're",
    "start": "733360",
    "end": "738850"
  },
  {
    "text": "not writing as much to to the the output array but actually it's massively slower",
    "start": "738850",
    "end": "747670"
  },
  {
    "start": "743000",
    "end": "806000"
  },
  {
    "text": "because what's happening here is that the we wrote a modern processor rely on",
    "start": "747670",
    "end": "755490"
  },
  {
    "text": "branch predictions right so each time each time the processor sees a branch it",
    "start": "755490",
    "end": "763120"
  },
  {
    "text": "tries to predict its output Civil cycles ahead of time and then it does the",
    "start": "763120",
    "end": "769690"
  },
  {
    "text": "computation based on this prediction now the prediction is false then it needs to",
    "start": "769690",
    "end": "776470"
  },
  {
    "text": "throw away all of this work and start sort of getting back at the point where",
    "start": "776470",
    "end": "782770"
  },
  {
    "text": "it miss predicted and so in I carefully",
    "start": "782770",
    "end": "788260"
  },
  {
    "text": "design my soui benchmark so that it would be clearly very difficult for the",
    "start": "788260",
    "end": "795090"
  },
  {
    "text": "processor to correctly predict the branch because it's got a random number and you know",
    "start": "795090",
    "end": "801639"
  },
  {
    "text": "how can it predict whether it's odd or not now",
    "start": "801639",
    "end": "806730"
  },
  {
    "start": "806000",
    "end": "860000"
  },
  {
    "text": "thankfully I can rewrite the same benchmark without a branch and typically",
    "start": "806730",
    "end": "813459"
  },
  {
    "text": "this is almost always possible so here's what I'm doing here is that",
    "start": "813459",
    "end": "820389"
  },
  {
    "text": "I'm always writing out this is a typical trick I'm always writing out to run a",
    "start": "820389",
    "end": "826480"
  },
  {
    "text": "random integer to the array but I only increment my index when the integer is",
    "start": "826480",
    "end": "834490"
  },
  {
    "text": "odd and in this code there's no more branch well actually there's a branch",
    "start": "834490",
    "end": "840639"
  },
  {
    "text": "due to the while loop okay but inside the while loop",
    "start": "840639",
    "end": "846309"
  },
  {
    "text": "there's no branch and I've really transform a problem with a branch into",
    "start": "846309",
    "end": "851439"
  },
  {
    "text": "one where it's just arithmetic and the performance is back to nearly what it",
    "start": "851439",
    "end": "857019"
  },
  {
    "text": "was originally now what happens what often is that when",
    "start": "857019",
    "end": "865660"
  },
  {
    "start": "860000",
    "end": "1032000"
  },
  {
    "text": "you make this point to people they read a little benchmark and then they say",
    "start": "865660",
    "end": "870699"
  },
  {
    "text": "well my my code with branch is actually faster than your branch less code okay",
    "start": "870699",
    "end": "877300"
  },
  {
    "text": "and here's one scenario with this that might explain what happens if i take my",
    "start": "877300",
    "end": "885399"
  },
  {
    "text": "code with the branch the one i showed you the silly one and by design i'm",
    "start": "885399",
    "end": "891970"
  },
  {
    "text": "using as a pseudo-random number generator so this means that I can repeat the benchmark many time but it's",
    "start": "891970",
    "end": "898540"
  },
  {
    "text": "always going to be the same random number now to try to fool the processor",
    "start": "898540",
    "end": "903610"
  },
  {
    "text": "I can say use a loop that has a 2,000 iteration and if I do that and I repeat",
    "start": "903610",
    "end": "911679"
  },
  {
    "text": "and repeat always the iteration and I plot the misprediction rate initially",
    "start": "911679",
    "end": "920429"
  },
  {
    "text": "during the first iteration I've got a 50% misprediction rate but very quickly",
    "start": "920429",
    "end": "926199"
  },
  {
    "text": "that the processor adapts and actually learn and I'm not kidding it learned",
    "start": "926199",
    "end": "932710"
  },
  {
    "text": "the 2000 prediction and it can learn them pretty well not this this example",
    "start": "932710",
    "end": "938560"
  },
  {
    "text": "with my relatively old skylake processor it takes a really long time before it",
    "start": "938560",
    "end": "944230"
  },
  {
    "text": "falls down to 1% but you see after 50 trials I'm down to 5% if you use the new",
    "start": "944230",
    "end": "953770"
  },
  {
    "text": "fancy AMD processors at the same time and it falls down to 0.1% perfectly",
    "start": "953770",
    "end": "961510"
  },
  {
    "text": "there's something about deep learning or whatever no neural networks it's not deep learning but in yeah it's a very",
    "start": "961510",
    "end": "968950"
  },
  {
    "text": "good branch predictor so that that's one",
    "start": "968950",
    "end": "974740"
  },
  {
    "text": "problem is that it's really hard to benchmark that was not very hard but it's really hard to branch mark code",
    "start": "974740",
    "end": "981700"
  },
  {
    "text": "with branches because processors do all sort of crazy things to fool you",
    "start": "981700",
    "end": "988300"
  },
  {
    "text": "another fact that I'm not documenting here that sometimes by adding a branch",
    "start": "988300",
    "end": "993550"
  },
  {
    "text": "you can worsen two branch predictions elsewhere because basically to the it",
    "start": "993550",
    "end": "1001140"
  },
  {
    "text": "can bend on your processor but lots of processes predict branches based on history and if you're adding the history",
    "start": "1001140",
    "end": "1010140"
  },
  {
    "text": "of the branch is taken and if you if you're adding a branch then it's this",
    "start": "1010140",
    "end": "1015240"
  },
  {
    "text": "history gets more complicated to learn and so it can worsen things even if the",
    "start": "1015240",
    "end": "1021450"
  },
  {
    "text": "new branch that you've introduced is predictable so basically branches can",
    "start": "1021450",
    "end": "1027630"
  },
  {
    "text": "have bad effect and these bad effects are not so easy to measure so I said",
    "start": "1027630",
    "end": "1035550"
  },
  {
    "start": "1032000",
    "end": "1053000"
  },
  {
    "text": "earlier that I only have about 1.5 cycles per byte so this means I cannot",
    "start": "1035550",
    "end": "1044040"
  },
  {
    "text": "go by by byte when I process my my input I need to go with wide words so maybe 64",
    "start": "1044040",
    "end": "1052440"
  },
  {
    "text": "bit boards or when possible I should be using Cindy instructions so Cindy",
    "start": "1052440",
    "end": "1059100"
  },
  {
    "start": "1053000",
    "end": "1109000"
  },
  {
    "text": "instructions are are I've been around for a long time they go",
    "start": "1059100",
    "end": "1065269"
  },
  {
    "text": "back to Pentium 4 they were first introduced for wear as a motivation",
    "start": "1065269",
    "end": "1070820"
  },
  {
    "text": "Mills media sound for example and now people people invoke machine learning",
    "start": "1070820",
    "end": "1079070"
  },
  {
    "text": "and deep learning sampling but it's the same story basically what they do is",
    "start": "1079070",
    "end": "1084080"
  },
  {
    "text": "that they add wider registers so the normal general-purpose registers are 64",
    "start": "1084080",
    "end": "1091100"
  },
  {
    "text": "bits on most processors but then they add 128 256 bit and even 512 bit",
    "start": "1091100",
    "end": "1099820"
  },
  {
    "text": "resistors they also add new fancy instructions like really quick really",
    "start": "1099820",
    "end": "1107090"
  },
  {
    "text": "fast look-up tables so basically the",
    "start": "1107090",
    "end": "1112220"
  },
  {
    "start": "1109000",
    "end": "1171000"
  },
  {
    "text": "story goes like this your mobile phone your iPhone for example as neon",
    "start": "1112220",
    "end": "1120619"
  },
  {
    "text": "instruction which are which is registered are span 128-bit legis the",
    "start": "1120619",
    "end": "1127879"
  },
  {
    "text": "same as legacy x64 processors the more recent processors you can buy now on",
    "start": "1127879",
    "end": "1135470"
  },
  {
    "text": "your servers use a they DX and if they x2 so they used 256 bit resistors and",
    "start": "1135470",
    "end": "1143419"
  },
  {
    "text": "our fancy the fancy new processors from Intel go up to 512 bit for my work for",
    "start": "1143419",
    "end": "1151909"
  },
  {
    "text": "for our workforce in addition we go up to we use the first three type of",
    "start": "1151909",
    "end": "1159919"
  },
  {
    "text": "systems we did not yet go to of X 512",
    "start": "1159919",
    "end": "1165519"
  },
  {
    "text": "part of it is that it's not very it's not widespread yet so how do you program",
    "start": "1165519",
    "end": "1172519"
  },
  {
    "start": "1171000",
    "end": "1237000"
  },
  {
    "text": "for similar instructions the approach that we've been using for Cindy jason is",
    "start": "1172519",
    "end": "1178609"
  },
  {
    "text": "to use intrinsic functions so this is these are special functions that call sometimes a very specific instruction",
    "start": "1178609",
    "end": "1185809"
  },
  {
    "text": "that is specific to the processor you using the Euler higher level and",
    "start": "1185809",
    "end": "1192320"
  },
  {
    "text": "api's I heard of a function so Swift as dem C++ you've got the Java vector API that is",
    "start": "1192320",
    "end": "1200059"
  },
  {
    "text": "along these lines we don't use that you can also rely on compiler magic so your",
    "start": "1200059",
    "end": "1207110"
  },
  {
    "text": "your compiler with our whether it's in Java or C can take a loop for example",
    "start": "1207110",
    "end": "1212909"
  },
  {
    "text": "and vectorize it it's like magic and you can use some hand and optimize",
    "start": "1212909",
    "end": "1219390"
  },
  {
    "text": "functions so Java is some of them or you can for example when you use an crypto",
    "start": "1219390",
    "end": "1225210"
  },
  {
    "text": "library then these guys typically they write all of the stuff of their code in",
    "start": "1225210",
    "end": "1231120"
  },
  {
    "text": "assembly which I don't recommend because it gets a little bit difficult so",
    "start": "1231120",
    "end": "1239700"
  },
  {
    "text": "another trick again nothing revolutionary that you should avoid",
    "start": "1239700",
    "end": "1245120"
  },
  {
    "text": "memory and object allocation as much as you can so in syndication we use what we",
    "start": "1245120",
    "end": "1251370"
  },
  {
    "start": "1249000",
    "end": "1275000"
  },
  {
    "text": "call a tape so basically when you're parsing the JSON document everything",
    "start": "1251370",
    "end": "1257610"
  },
  {
    "text": "gets written to one tape that's reusable so whenever we encounter",
    "start": "1257610",
    "end": "1264419"
  },
  {
    "text": "a string we don't I locate memory for the string whenever we encounter a number we don't allocate memory for the",
    "start": "1264419",
    "end": "1270960"
  },
  {
    "text": "number everything gets written consecutively and it's trying to do with",
    "start": "1270960",
    "end": "1276510"
  },
  {
    "start": "1275000",
    "end": "1340000"
  },
  {
    "text": "that we use is that we measure the performance so and we do what I would",
    "start": "1276510",
    "end": "1283289"
  },
  {
    "text": "call benchmark driven development so might not be practical but it's fun so",
    "start": "1283289",
    "end": "1291620"
  },
  {
    "text": "so so here's a plot of our performance on Twitter file on one may specifc",
    "start": "1291620",
    "end": "1298289"
  },
  {
    "text": "machine over time so in the x-axis you've got two commits and on y-axis",
    "start": "1298289",
    "end": "1304110"
  },
  {
    "text": "you've got through output now here I'm cheating a little bit because the y-axis",
    "start": "1304110",
    "end": "1309360"
  },
  {
    "text": "does not start at zero but I just wanted to show what it looks like and you can",
    "start": "1309360",
    "end": "1315240"
  },
  {
    "text": "see we have these big jumps when someone finds a new clever way to do things so",
    "start": "1315240",
    "end": "1321809"
  },
  {
    "text": "what's interesting is in our first public release we we reach to gigabyte per second and we",
    "start": "1321809",
    "end": "1329160"
  },
  {
    "text": "thought we were pretty clever but now we were at 2.4 and I think we're going to",
    "start": "1329160",
    "end": "1334260"
  },
  {
    "text": "go higher I'm planning to go to at least 2.5 it's not more and also we use a",
    "start": "1334260",
    "end": "1342440"
  },
  {
    "start": "1340000",
    "end": "1358000"
  },
  {
    "text": "performance test in our continuous integration now that's that's that's a kind of warm in itself but we try to",
    "start": "1342440",
    "end": "1350100"
  },
  {
    "text": "basically detect commits that cause a major major problem on one type of",
    "start": "1350100",
    "end": "1356220"
  },
  {
    "text": "system very quickly here's a this is",
    "start": "1356220",
    "end": "1361770"
  },
  {
    "start": "1358000",
    "end": "1415000"
  },
  {
    "text": "almost on the side but here is a point that I'm finding that I often have to do",
    "start": "1361770",
    "end": "1368280"
  },
  {
    "text": "so she doing CPU intensive work I'm not talking about accessing that in RAM or",
    "start": "1368280",
    "end": "1374700"
  },
  {
    "text": "something like that but if you're doing processor intensive work then you have to worry about the fact that your",
    "start": "1374700",
    "end": "1380880"
  },
  {
    "text": "processor no matter what you think the processor frequency it's probably not constant especially if you're working on",
    "start": "1380880",
    "end": "1388110"
  },
  {
    "text": "a nifty new laptop that's thin like this",
    "start": "1388110",
    "end": "1393620"
  },
  {
    "text": "it's probably not constant and and if you want to measure performance",
    "start": "1393620",
    "end": "1399270"
  },
  {
    "text": "seriously then you probably don't want to equate time with the number of CPU",
    "start": "1399270",
    "end": "1404610"
  },
  {
    "text": "cycles so you have to use and this was mentioned today you need probably need",
    "start": "1404610",
    "end": "1411090"
  },
  {
    "text": "to use performance counters from your CPU if you're serious about it",
    "start": "1411090",
    "end": "1416100"
  },
  {
    "start": "1415000",
    "end": "1421000"
  },
  {
    "text": "so let me go into specific examples of what we do so one problem that we have",
    "start": "1416100",
    "end": "1424200"
  },
  {
    "start": "1421000",
    "end": "1485000"
  },
  {
    "text": "when we want to parse Jason is that the input the input at least on the web",
    "start": "1424200",
    "end": "1433080"
  },
  {
    "text": "typically is unicode so you to get utf-8 and we under check that the bytes are",
    "start": "1433080",
    "end": "1440100"
  },
  {
    "text": "actually utf-8 so utf-8 is a an",
    "start": "1440100",
    "end": "1445320"
  },
  {
    "text": "extension of ASCII that this ASCII is valid utf-8 but it adds extra code",
    "start": "1445320",
    "end": "1452760"
  },
  {
    "text": "points that span to three or four bytes so clean it if you want to writing",
    "start": "1452760",
    "end": "1459480"
  },
  {
    "text": "Klingon for example you're going to as you use more than one bite but they're only about 1.1 million valid code points",
    "start": "1459480",
    "end": "1468450"
  },
  {
    "text": "everything else is garbage and of course you want to stop you don't want to",
    "start": "1468450",
    "end": "1473580"
  },
  {
    "text": "ingest strings are not valid because then it's going to end up in your database and maybe eventually in your",
    "start": "1473580",
    "end": "1480000"
  },
  {
    "text": "wet on your website and god knows what so you want to stop it right there now",
    "start": "1480000",
    "end": "1485610"
  },
  {
    "start": "1485000",
    "end": "1521000"
  },
  {
    "text": "typically the way people validate Unicode is with code like this not this",
    "start": "1485610",
    "end": "1491400"
  },
  {
    "text": "is not actual code I took I took real code and then I simplified it because",
    "start": "1491400",
    "end": "1497100"
  },
  {
    "text": "it's much longer but basically it's a bunch of branches now this works really fine if your input is ascii because",
    "start": "1497100",
    "end": "1504330"
  },
  {
    "text": "you've got one predictable branch and everything is fine but the minute you you start hitting unicode then you've",
    "start": "1504330",
    "end": "1512910"
  },
  {
    "text": "got branch mispredictions over you can avoid the branch misprediction by using",
    "start": "1512910",
    "end": "1518490"
  },
  {
    "text": "a finite state machine and so on it's complicated but you can do even better than this you can use simply",
    "start": "1518490",
    "end": "1524820"
  },
  {
    "start": "1521000",
    "end": "1539000"
  },
  {
    "text": "instructions so use you load 32 bytes of",
    "start": "1524820",
    "end": "1530070"
  },
  {
    "text": "data you use 20 magical instructions and then you've got no branch and no branch",
    "start": "1530070",
    "end": "1536610"
  },
  {
    "text": "misprediction i'm not going to I don't have time to go into what these twenty",
    "start": "1536610",
    "end": "1541950"
  },
  {
    "start": "1539000",
    "end": "1629000"
  },
  {
    "text": "something instructions are and actually I know of three different strategies that end up with the same instruction",
    "start": "1541950",
    "end": "1549180"
  },
  {
    "text": "count just just about but I'm just going to illustrate it so for example in an in",
    "start": "1549180",
    "end": "1556140"
  },
  {
    "text": "utf-8 a internal Unicode that we see on the web nobody can be larger than - no",
    "start": "1556140",
    "end": "1562620"
  },
  {
    "text": "but value can be larger than 244 right and the way we check this well you could",
    "start": "1562620",
    "end": "1570570"
  },
  {
    "text": "just do a comparison but for we like to just do a saturated subtraction so",
    "start": "1570570",
    "end": "1576990"
  },
  {
    "text": "basically we take two byte value and we subtract 244 and and obviously if it's",
    "start": "1576990",
    "end": "1584220"
  },
  {
    "text": "nonzero if the result is nonzero then you have a value that's greater than 244 otherwise because of the saturation bit",
    "start": "1584220",
    "end": "1592170"
  },
  {
    "text": "go to zero saturation just means that it doesn't wrap around it goes to zero if",
    "start": "1592170",
    "end": "1597330"
  },
  {
    "text": "it's too small and this can be written in code using one of these intrinsic",
    "start": "1597330",
    "end": "1603030"
  },
  {
    "text": "functions I was talking to you about so this one calls so this avoids assembly",
    "start": "1603030",
    "end": "1610710"
  },
  {
    "text": "but it's super ugly but in this case with this one function I can check 32",
    "start": "1610710",
    "end": "1619260"
  },
  {
    "text": "byte at once so it's really efficient really fast and then it could go on for",
    "start": "1619260",
    "end": "1625620"
  },
  {
    "text": "about an hour to explain everything else falls into place but let me jump to the",
    "start": "1625620",
    "end": "1630740"
  },
  {
    "start": "1629000",
    "end": "1648000"
  },
  {
    "text": "results so basically compared to branching if I have an input that's",
    "start": "1630740",
    "end": "1636929"
  },
  {
    "text": "random utf-8 I'm about 20 times faster using assembly instructions than I am",
    "start": "1636929",
    "end": "1644790"
  },
  {
    "text": "with using branching so much better so",
    "start": "1644790",
    "end": "1651480"
  },
  {
    "start": "1648000",
    "end": "1695000"
  },
  {
    "text": "let me work out here and a fun problem that's more closely really to Jason so",
    "start": "1651480",
    "end": "1659549"
  },
  {
    "text": "in Jason we have what they call search all characters I think the specification that calls in that so the coma the",
    "start": "1659549",
    "end": "1667410"
  },
  {
    "text": "column the concerts the key int values and in the braces that differentiates between objects and arrays and then you",
    "start": "1667410",
    "end": "1677070"
  },
  {
    "text": "have white space and basically outside the strings you cannot have much health",
    "start": "1677070",
    "end": "1682169"
  },
  {
    "text": "right if the numbers you have the atoms you have two numbers the mouse but the structure is given by these characters",
    "start": "1682169",
    "end": "1688890"
  },
  {
    "text": "so so you want to identify them but you don't want to defy them one by one it's",
    "start": "1688890",
    "end": "1694440"
  },
  {
    "text": "too slow so we're going to build a lookup table approach so what do we do",
    "start": "1694440",
    "end": "1699870"
  },
  {
    "start": "1695000",
    "end": "1719000"
  },
  {
    "text": "is we we take each byte each byte value and we decompose it into two nibbles so",
    "start": "1699870",
    "end": "1706679"
  },
  {
    "text": "a nibble is 4-bit so the least significant four bits I'm going to call",
    "start": "1706679",
    "end": "1713669"
  },
  {
    "text": "it the loanable and the most thing is insignificant four bits I'm going to",
    "start": "1713669",
    "end": "1718679"
  },
  {
    "text": "call high nibble now I'm going to use the fact that whether you using arm or",
    "start": "1718679",
    "end": "1724559"
  },
  {
    "start": "1719000",
    "end": "1736000"
  },
  {
    "text": "Intel or MD you have vast instructions that can't get that can do table lookups as long as",
    "start": "1724559",
    "end": "1732659"
  },
  {
    "text": "they're relatively small so let me let",
    "start": "1732659",
    "end": "1738239"
  },
  {
    "start": "1736000",
    "end": "1793000"
  },
  {
    "text": "me give you an example of what these instructions are capable of so if I start with an array of a 4-bit value so",
    "start": "1738239",
    "end": "1745469"
  },
  {
    "text": "nibbles I mean I create a lookup table now here for simplicity my lookup table",
    "start": "1745469",
    "end": "1752849"
  },
  {
    "text": "is just the numbers from 200 to 215 but this would be actually entirely random I",
    "start": "1752849",
    "end": "1760169"
  },
  {
    "text": "just I just used a simple because of course here I could just add 200 2 2 2 2",
    "start": "1760169",
    "end": "1769079"
  },
  {
    "text": "to do to look up but I wanted that something people could follow so what I",
    "start": "1769079",
    "end": "1774659"
  },
  {
    "text": "want to do here is a job as a task I went to map 0 to 200 1 2 to go and 1 and",
    "start": "1774659",
    "end": "1781499"
  },
  {
    "text": "so on and this this task a can be done",
    "start": "1781499",
    "end": "1786599"
  },
  {
    "text": "in one instruction it's a really fast instruction on most processors so that",
    "start": "1786599",
    "end": "1795479"
  },
  {
    "start": "1793000",
    "end": "1839000"
  },
  {
    "text": "doesn't give me the character classification I was talking about but",
    "start": "1795479",
    "end": "1800849"
  },
  {
    "text": "the recipe is actually quite simple I need to lookups so I take all my lowly",
    "start": "1800849",
    "end": "1808259"
  },
  {
    "text": "nibbles and I look them up in one table and then I take all my I nibble and I",
    "start": "1808259",
    "end": "1815459"
  },
  {
    "text": "look them up into an earth table and then I do the bitwise and between 2 2",
    "start": "1815459",
    "end": "1820499"
  },
  {
    "text": "and then I choose my lookup tables carefully so that the coma ends up",
    "start": "1820499",
    "end": "1826649"
  },
  {
    "text": "mapping to 1 to come to to the brackets 2 4 and the whitespace characters 2 8",
    "start": "1826649",
    "end": "1834509"
  },
  {
    "text": "and 16 I'm going again to show you turbo really ugly code so in this case it's",
    "start": "1834509",
    "end": "1841139"
  },
  {
    "start": "1839000",
    "end": "1884000"
  },
  {
    "text": "the implementation using arm neon with intrinsic functions it looks really",
    "start": "1841139",
    "end": "1847229"
  },
  {
    "text": "really scary but it's not so at the top I basically define my constants which",
    "start": "1847229",
    "end": "1852749"
  },
  {
    "text": "are my lookup table so I've got to look up tables and then my 5 instructions are",
    "start": "1852749",
    "end": "1858959"
  },
  {
    "text": "given below so first first two instructions identified two high end low nipples then",
    "start": "1858959",
    "end": "1865940"
  },
  {
    "text": "the instruction three and four are just lookups and then last instructions I do",
    "start": "1865940",
    "end": "1872789"
  },
  {
    "text": "a bitwise and so in five intra an instruction in this case I can classify",
    "start": "1872789",
    "end": "1878190"
  },
  {
    "text": "16 characters without any branches whatsoever it's super fast okay here's a",
    "start": "1878190",
    "end": "1888659"
  },
  {
    "start": "1884000",
    "end": "1917000"
  },
  {
    "text": "fun one so you all know that if you want to put like a quote inside a string you",
    "start": "1888659",
    "end": "1895980"
  },
  {
    "text": "need to escape it which means that you have to add a backspace before it now backspace itself also needs to be",
    "start": "1895980",
    "end": "1903809"
  },
  {
    "text": "escaped of course so it's back sit back skip backspace backspace now if I've got",
    "start": "1903809",
    "end": "1909389"
  },
  {
    "text": "backspace quote then it gets really confusing because its backspace backspace backspace quote and I could",
    "start": "1909389",
    "end": "1916289"
  },
  {
    "text": "keep going now in practice this means that you could get a JSON input that",
    "start": "1916289",
    "end": "1922169"
  },
  {
    "start": "1917000",
    "end": "1935000"
  },
  {
    "text": "looks like this right can you tell where where the string starts where the end",
    "start": "1922169",
    "end": "1929129"
  },
  {
    "text": "you don't know so it's really hard to figure out the structure from this but",
    "start": "1929129",
    "end": "1934679"
  },
  {
    "text": "there's a trick actually so if you've got an odd number of escape characters",
    "start": "1934679",
    "end": "1943559"
  },
  {
    "start": "1935000",
    "end": "1964000"
  },
  {
    "text": "additive backspace characters before a character then this character is this Kate if you've got an even number then",
    "start": "1943559",
    "end": "1952230"
  },
  {
    "text": "you don't need to worry because an even number of backs backslash characters are",
    "start": "1952230",
    "end": "1958740"
  },
  {
    "text": "just going to be mapped back to a series of back slashes so let me give you an",
    "start": "1958740",
    "end": "1967830"
  },
  {
    "start": "1964000",
    "end": "2112000"
  },
  {
    "text": "example of how we go about it so I've got this I go back to my input string I",
    "start": "1967830",
    "end": "1975950"
  },
  {
    "text": "identified two backslashes so I mapped them to a bit set right everywhere I've",
    "start": "1975950",
    "end": "1982500"
  },
  {
    "text": "got a backslash I put that one otherwise I've got zeros and then I'm going to",
    "start": "1982500",
    "end": "1987509"
  },
  {
    "text": "define two constants so the first one the first you'll see where I'm going",
    "start": "1987509",
    "end": "1992970"
  },
  {
    "text": "with this or maybe not but it will be fun so I've",
    "start": "1992970",
    "end": "1998340"
  },
  {
    "text": "got one constant where I put at one at every even index so 0 2 and so forth and",
    "start": "1998340",
    "end": "2007910"
  },
  {
    "text": "find out another concern we've got one at every odd counts and X so 1 3 and so",
    "start": "2007910",
    "end": "2016250"
  },
  {
    "text": "forth okay and then I plug in it is firmly at the very top ok I'm not going to explain it",
    "start": "2016250",
    "end": "2026060"
  },
  {
    "text": "okay so a student of mine asked me how did you get that so I said well lots of",
    "start": "2026060",
    "end": "2033620"
  },
  {
    "text": "hard work so say if you got this firm layer you",
    "start": "2033620",
    "end": "2039530"
  },
  {
    "text": "can just try it out at home it's fun but amia this actually does the right thing",
    "start": "2039530",
    "end": "2047470"
  },
  {
    "text": "it and in this case we'll identify the the fact that my quote character right",
    "start": "2047470",
    "end": "2053330"
  },
  {
    "text": "there okay is escape so it's not actually a string delimiter a quote",
    "start": "2053330",
    "end": "2060590"
  },
  {
    "text": "right and now it sounds really painful there's lots of instructions there but",
    "start": "2060590",
    "end": "2066110"
  },
  {
    "text": "again no branches whatsoever okay so if I remove the escape quotes then two",
    "start": "2066110",
    "end": "2073398"
  },
  {
    "text": "remaining quotes tell me where my strings are so I can just identify my",
    "start": "2073399",
    "end": "2079190"
  },
  {
    "text": "all my quotes so I put a 1 where I've got a quote and I we identify my it's",
    "start": "2079190",
    "end": "2085040"
  },
  {
    "text": "great escape quotes and then whatever remains are my string delimiter quotes",
    "start": "2085040",
    "end": "2090080"
  },
  {
    "text": "now it's important for me to identify where mice quotes quotes are when I'm arcing jism because if I want to the",
    "start": "2090080",
    "end": "2096560"
  },
  {
    "text": "structure of the document right I need to be sure that I remove all two braces",
    "start": "2096560",
    "end": "2102560"
  },
  {
    "text": "the columns and so on there are inside strings because they don't count so I",
    "start": "2102560",
    "end": "2109160"
  },
  {
    "text": "want to know where my strings are so again I do a little bit a little bit of",
    "start": "2109160",
    "end": "2116300"
  },
  {
    "start": "2112000",
    "end": "2179000"
  },
  {
    "text": "mathematical magic here so if I start with where my my quotes are and I want",
    "start": "2116300",
    "end": "2124340"
  },
  {
    "text": "to turn this into a bitmap that indicates the inside of my",
    "start": "2124340",
    "end": "2130460"
  },
  {
    "text": "quote I can do a prefix X or I'll show",
    "start": "2130460",
    "end": "2135800"
  },
  {
    "text": "you to code basically I shift by 1 by X or with the the original I take the",
    "start": "2135800",
    "end": "2142520"
  },
  {
    "text": "result I shifted by 2 and I XOR again and so forth and so forth now this looks",
    "start": "2142520",
    "end": "2148820"
  },
  {
    "text": "a little bit expensive but you can actually do this with one instruction on most processor so it's a curious",
    "start": "2148820",
    "end": "2155540"
  },
  {
    "text": "multiplication it's used for cryptography so probably those of you",
    "start": "2155540",
    "end": "2160820"
  },
  {
    "text": "don't do crypto don't know about this instruction but if this can actually be really cheap and if you do this you go",
    "start": "2160820",
    "end": "2167810"
  },
  {
    "text": "from the location of the quotes to two swing regions this means I can mask out anything in",
    "start": "2167810",
    "end": "2175070"
  },
  {
    "text": "instructional Carter does is inside of a quote again without any branching so if",
    "start": "2175070",
    "end": "2181940"
  },
  {
    "start": "2179000",
    "end": "2198000"
  },
  {
    "text": "you follow all of my example if you put them together in your mind you realize",
    "start": "2181940",
    "end": "2186950"
  },
  {
    "text": "that the entire structure of the JSON document can be in the identified it's--but set so with the ones and so",
    "start": "2186950",
    "end": "2193430"
  },
  {
    "text": "forth without any branch so at this",
    "start": "2193430",
    "end": "2205910"
  },
  {
    "start": "2198000",
    "end": "2324000"
  },
  {
    "text": "point you're going to have to go from the the bit set to the locations of the",
    "start": "2205910",
    "end": "2216500"
  },
  {
    "text": "ones okay and so I've got a nice trick to how to do this but let me let me jump",
    "start": "2216500",
    "end": "2224570"
  },
  {
    "text": "ahead because I'm running a little bit of the time is a bit short but maybe I can come back to it later so and there",
    "start": "2224570",
    "end": "2233560"
  },
  {
    "text": "another problem we have is that number parsing is surprisingly expensive so if",
    "start": "2233560",
    "end": "2241760"
  },
  {
    "text": "you take some Java code that as to ingest data does it in text form and you",
    "start": "2241760",
    "end": "2247970"
  },
  {
    "text": "tried to benchmark the time spend parsing the floating-point numbers it's",
    "start": "2247970",
    "end": "2254720"
  },
  {
    "text": "totally crazy so I I built a little benchmark so I heard that",
    "start": "2254720",
    "end": "2261319"
  },
  {
    "text": "random floating-point numbers and I just wrote them to us to a string in memory",
    "start": "2261319",
    "end": "2267650"
  },
  {
    "text": "and then I went back and I tried to Rebeck these T's floating-point numbers",
    "start": "2267650",
    "end": "2273680"
  },
  {
    "text": "using a really you know well optimized C function so string to D then I reach the",
    "start": "2273680",
    "end": "2282979"
  },
  {
    "text": "fantastic speed of 90 megabytes per second so this is this is slower than",
    "start": "2282979",
    "end": "2289789"
  },
  {
    "text": "not all discs but this certainly should be slower than your assist these would",
    "start": "2289789",
    "end": "2295099"
  },
  {
    "text": "hope so and I'm basically spending thirty eight cycles per byte and I have at all of ten",
    "start": "2295099",
    "end": "2302059"
  },
  {
    "text": "branch misses per floating-point number so this is not fun",
    "start": "2302059",
    "end": "2307160"
  },
  {
    "text": "and this is going to end up being a bottleneck so basically you have to use",
    "start": "2307160",
    "end": "2313249"
  },
  {
    "text": "either fast floating-point parsing library that someone wrote or like we",
    "start": "2313249",
    "end": "2321170"
  },
  {
    "text": "did you you write your own and you hope for the best so but I'm going to go back a little bit",
    "start": "2321170",
    "end": "2328819"
  },
  {
    "start": "2324000",
    "end": "2443000"
  },
  {
    "text": "on my original strategy which said well let's try to use wide words right so",
    "start": "2328819",
    "end": "2334190"
  },
  {
    "text": "because again you have the same problem if you look at most code that parses numbers they do it",
    "start": "2334190",
    "end": "2340279"
  },
  {
    "text": "byte by byte by byte and this is of course not going to ever be super fast",
    "start": "2340279",
    "end": "2347859"
  },
  {
    "text": "so what we do here again I'm going to do some mathematical magic and I'm not",
    "start": "2347859",
    "end": "2354349"
  },
  {
    "text": "going to explain formula but this is a formula actually came up with probably",
    "start": "2354349",
    "end": "2361549"
  },
  {
    "text": "working on late on a Saturday night I don't know so if you gave me eight ASCII",
    "start": "2361549",
    "end": "2369650"
  },
  {
    "text": "characters or eight characters I take it and I map it to an S 64-bit integer I",
    "start": "2369650",
    "end": "2378170"
  },
  {
    "text": "just copy it over and then I apply this little formula which is crazy then it's",
    "start": "2378170",
    "end": "2387559"
  },
  {
    "text": "going to give me true when my characters arcs are",
    "start": "2387559",
    "end": "2394829"
  },
  {
    "text": "eight digits right now why is that important because very often what the",
    "start": "2394829",
    "end": "2401609"
  },
  {
    "text": "numbers that are expensive to parse our numbers are made of lots of lots of",
    "start": "2401609",
    "end": "2407970"
  },
  {
    "text": "digits right so some people really like to throw in a lot of precision when they",
    "start": "2407970",
    "end": "2413460"
  },
  {
    "text": "want to one to one Wendy they write that it would be serialize their data and this is it",
    "start": "2413460",
    "end": "2418740"
  },
  {
    "text": "expensive to parse back so very often you want to speak like you say okay",
    "start": "2418740",
    "end": "2426210"
  },
  {
    "text": "maybe here I've got eight digits and I want to be able to check it really really quickly so in this case I'm able",
    "start": "2426210",
    "end": "2433140"
  },
  {
    "text": "to use this firm line it's really really cheap only a few extra instructions and I know right away whether I have a",
    "start": "2433140",
    "end": "2439559"
  },
  {
    "text": "digits and if I do and I've got a function to sell to you so so it's just",
    "start": "2439559",
    "end": "2447539"
  },
  {
    "start": "2443000",
    "end": "2497000"
  },
  {
    "text": "this one I did not invent so I picked that up on the web somewhere Stack",
    "start": "2447539",
    "end": "2454380"
  },
  {
    "text": "Overflow probably yeah yeah it's probably where I picked it up I don't know discredit for it into a source code",
    "start": "2454380",
    "end": "2462299"
  },
  {
    "text": "and then what do you want to do is you take these eight digits and you turn",
    "start": "2462299",
    "end": "2467339"
  },
  {
    "text": "them into an integer right but you don't do it character by character you",
    "start": "2467339",
    "end": "2473970"
  },
  {
    "text": "actually you actually do three multiplications and a few and a few a",
    "start": "2473970",
    "end": "2481069"
  },
  {
    "text": "few arithmetic functions and that's probably that that's that's a stole some",
    "start": "2481069",
    "end": "2487680"
  },
  {
    "text": "of it and so I'm not beginning to go into everything else we do for full",
    "start": "2487680",
    "end": "2492750"
  },
  {
    "text": "parsing but this gives you an idea of the strategy okay so when you when you",
    "start": "2492750",
    "end": "2500369"
  },
  {
    "start": "2497000",
    "end": "2569000"
  },
  {
    "text": "write Java code or use a JIT so forth you don't you often don't have a problem",
    "start": "2500369",
    "end": "2506730"
  },
  {
    "text": "where you don't know you don't know about the out where you're running on",
    "start": "2506730",
    "end": "2513410"
  },
  {
    "text": "but we are doing optimization that really low levels are specific to the",
    "start": "2513410",
    "end": "2519630"
  },
  {
    "text": "hardware so we are we do some optimizations for processors that have",
    "start": "2519630",
    "end": "2526700"
  },
  {
    "text": "200 256-bit resistors and then to support legacy hardware we need to also",
    "start": "2526700",
    "end": "2533869"
  },
  {
    "text": "have honor than 28 bit resistors so we basically need two functions for well",
    "start": "2533869",
    "end": "2541730"
  },
  {
    "text": "and then we we support also arm but that that's a little bit easier because it's the Iza is more a little bit more stable",
    "start": "2541730",
    "end": "2548900"
  },
  {
    "text": "but we have we have this support",
    "start": "2548900",
    "end": "2556000"
  },
  {
    "text": "basically to on Intel and in the process",
    "start": "2556000",
    "end": "2561500"
  },
  {
    "text": "we have to support to code path so the way we we do it is fairly standard so we",
    "start": "2561500",
    "end": "2570670"
  },
  {
    "start": "2569000",
    "end": "2702000"
  },
  {
    "text": "we basically build and compile two",
    "start": "2570670",
    "end": "2576470"
  },
  {
    "text": "functions and then we do what they call run time dispatch so the first time the",
    "start": "2576470",
    "end": "2582800"
  },
  {
    "text": "function the parsing function is called it's actually calling special function",
    "start": "2582800",
    "end": "2589730"
  },
  {
    "text": "that should be called only once this concurrence involved but I removed it",
    "start": "2589730",
    "end": "2596150"
  },
  {
    "text": "from the code for simplicity so you check the feature of the CPU and then",
    "start": "2596150",
    "end": "2601700"
  },
  {
    "text": "you branch depending on on the function you want to use and then you basically",
    "start": "2601700",
    "end": "2608240"
  },
  {
    "text": "reassign the pointer the function pointer so the next time there's there's",
    "start": "2608240",
    "end": "2613849"
  },
  {
    "text": "not going to be any CPU checking because you're assuming that the person running your program is not switching the CPU",
    "start": "2613849",
    "end": "2621020"
  },
  {
    "text": "under you and and so you're going to",
    "start": "2621020",
    "end": "2626240"
  },
  {
    "text": "call the write function right away now I've known about about one time dispatch",
    "start": "2626240",
    "end": "2634369"
  },
  {
    "text": "for a long time and everyone says it's super easy and but then when you ask",
    "start": "2634369",
    "end": "2640310"
  },
  {
    "text": "around you find out that few people have actually tried to implement it and when",
    "start": "2640310",
    "end": "2645530"
  },
  {
    "text": "you try to implement it using portable code as much as possible so it runs on",
    "start": "2645530",
    "end": "2651680"
  },
  {
    "text": "their visual studio clang and GCC we",
    "start": "2651680",
    "end": "2656900"
  },
  {
    "text": "found it really really hard to do in part because the bugs and in some of these compilers and",
    "start": "2656900",
    "end": "2663440"
  },
  {
    "text": "they weren't there were no good model on how to do it because after one of our",
    "start": "2663440",
    "end": "2670790"
  },
  {
    "text": "objective was to have a single header library so we don't want to depend we",
    "start": "2670790",
    "end": "2676640"
  },
  {
    "text": "don't know our people are going to build our code so we don't want to depend on a build system we really want to code to",
    "start": "2676640",
    "end": "2684109"
  },
  {
    "text": "do all of the work so for this reason this was a little bit a bit hard now",
    "start": "2684109",
    "end": "2691849"
  },
  {
    "text": "obviously if you if you're working in Java acid and you don't know don't have",
    "start": "2691849",
    "end": "2696920"
  },
  {
    "text": "to worry about that because someone else is worrying about it for you but so the",
    "start": "2696920",
    "end": "2705020"
  },
  {
    "start": "2702000",
    "end": "2812000"
  },
  {
    "text": "simple addition is a well it's a free library it's available on github wells",
    "start": "2705020",
    "end": "2713800"
  },
  {
    "text": "so it's a it's a single header library so it's really really easy to integrate",
    "start": "2713800",
    "end": "2720800"
  },
  {
    "text": "you can just plug it in your system it's relatively modern C++ one of my students",
    "start": "2720800",
    "end": "2727550"
  },
  {
    "text": "says that is its advanced C++ it's it we",
    "start": "2727550",
    "end": "2733520"
  },
  {
    "text": "we support different hardware so we support arm there's been someone who",
    "start": "2733520",
    "end": "2740920"
  },
  {
    "text": "there's a co-author that actually wrote a version for for Swift that that acts",
    "start": "2740920",
    "end": "2749930"
  },
  {
    "text": "as a wrapper for our stuff and it beats apples parser and then we support",
    "start": "2749930",
    "end": "2759740"
  },
  {
    "text": "relatively old Intel and AMD processors",
    "start": "2759740",
    "end": "2764829"
  },
  {
    "text": "it's under an apache license there's no patent because I'm I'm poor",
    "start": "2764829",
    "end": "2770480"
  },
  {
    "text": "and stupid and and it's used by reasonable people at Microsoft and",
    "start": "2770480",
    "end": "2777680"
  },
  {
    "text": "Yandex we have wrappers in Python PHP c-sharp rust JavaScript Ruby there are",
    "start": "2777680",
    "end": "2786920"
  },
  {
    "text": "ports also very exciting so there are ports to rust so there's a version that runs on tar it is written entirely in",
    "start": "2786920",
    "end": "2794329"
  },
  {
    "text": "but there's a bit of you know that apparently the keyword unsafe was used",
    "start": "2794329",
    "end": "2800589"
  },
  {
    "text": "the the the there's an ongoing port go and there's a c-sharp port also know",
    "start": "2800589",
    "end": "2808160"
  },
  {
    "text": "Java port tablet that's missing okay so",
    "start": "2808160",
    "end": "2813230"
  },
  {
    "start": "2812000",
    "end": "2823000"
  },
  {
    "text": "we have an academic academic reference so it was published and will reveal to",
    "start": "2813230",
    "end": "2818839"
  },
  {
    "text": "be journal and I'm I'm going to end with",
    "start": "2818839",
    "end": "2824510"
  },
  {
    "start": "2823000",
    "end": "2871000"
  },
  {
    "text": "some credits so a lot after really not all of them but a lot of the clever magical magical algorithms with really",
    "start": "2824510",
    "end": "2833660"
  },
  {
    "text": "hard to you know really crazy formulas were designed by Jeff Langdale who's my",
    "start": "2833660",
    "end": "2840470"
  },
  {
    "text": "primary co-author but also there's lots of contributors well this is this is",
    "start": "2840470",
    "end": "2845900"
  },
  {
    "text": "github this is we're in 2019 so when you post something on the web everyone comes",
    "start": "2845900",
    "end": "2852650"
  },
  {
    "text": "to help you sometimes and and also well",
    "start": "2852650",
    "end": "2858200"
  },
  {
    "text": "I'm going to conclude with the fact that I've got free stickers for people who want to want them and I'm going to end",
    "start": "2858200",
    "end": "2867500"
  },
  {
    "text": "there [Applause]",
    "start": "2867500",
    "end": "2872949"
  }
]