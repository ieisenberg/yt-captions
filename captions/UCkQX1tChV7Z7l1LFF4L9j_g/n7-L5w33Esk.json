[
  {
    "text": "my name is Justin Lee and I managed to spell my name right I couldn't see it quite right on the screen there so I",
    "start": "4150",
    "end": "10360"
  },
  {
    "text": "work at Red Hat now and it's a new it's newer for me so it's less than impressive than any sound but I work on",
    "start": "10360",
    "end": "16480"
  },
  {
    "text": "the server list team they're doing mostly go in Python and gamal programming these days so I don't get to",
    "start": "16480",
    "end": "22089"
  },
  {
    "text": "use cutland professionally as much as I like to but I stool it's one of my",
    "start": "22089",
    "end": "27609"
  },
  {
    "text": "favorite languages so how many before we get into all this how many I've heard of Kotlin before today how many of you've",
    "start": "27609",
    "end": "33760"
  },
  {
    "text": "used it a handful how many you're thinking about using it while you're",
    "start": "33760",
    "end": "39310"
  },
  {
    "text": "here so it's least probably on on your radar otherwise you're anyways so okay well",
    "start": "39310",
    "end": "45070"
  },
  {
    "text": "great just real quickly I hate I hate doing slides like this but I wrote it today after I saw a friend of mine",
    "start": "45070",
    "end": "52120"
  },
  {
    "text": "talking is that it helps us set some context right like Who am I and why should you care what I think in case it matters I've been known in",
    "start": "52120",
    "end": "59320"
  },
  {
    "text": "Java since 96 which I like to highlight simply because there's a lot of people who come like talk about different",
    "start": "59320",
    "end": "65170"
  },
  {
    "text": "languages and like you know I'm not here to promote Kotlin because I think Java sucks I love Java it's one of my goals on the",
    "start": "65170",
    "end": "72579"
  },
  {
    "text": "server list team at Red Hat to make sure that Java and the JVM is a viable option in the service world I'm not sure my",
    "start": "72579",
    "end": "79539"
  },
  {
    "text": "manager quite agrees with that but that's my personal goal so I love Java I'm not here to trash on it by any means",
    "start": "79539",
    "end": "86249"
  },
  {
    "text": "but you know if I'm in Red Hat I worked at Sun for a while in Oracle I was on",
    "start": "86249",
    "end": "91899"
  },
  {
    "text": "the WebSocket expert group I'm currently on the server for expert group which may",
    "start": "91899",
    "end": "97869"
  },
  {
    "text": "or may not ever finish depending on what Oracle decides to do with Jakarta ie I am a Java champion because I love Java",
    "start": "97869",
    "end": "105340"
  },
  {
    "text": "and more importantly I guess I've been using cotton I was trying figured out last year when",
    "start": "105340",
    "end": "111100"
  },
  {
    "text": "I went to Kotlin Khan turns out I've been using cotton since about 2011 2012 I was using beta",
    "start": "111100",
    "end": "118600"
  },
  {
    "text": "versions of it and I tried to find out what was the furthest back I could find a reference of me and Kotlin in the same",
    "start": "118600",
    "end": "125170"
  },
  {
    "text": "sentence and I found a blog a question at March in 2012 I was building a project and I had a question so I've",
    "start": "125170",
    "end": "132099"
  },
  {
    "text": "been using cotton for a long time and what's it kind of evolved and it's I mean if you can't tell I'm like really",
    "start": "132099",
    "end": "139700"
  },
  {
    "text": "excited about it it's one of the this is the first JVM language I've used in a while that makes me really excited all",
    "start": "139700",
    "end": "145220"
  },
  {
    "text": "my personal stuff is in Kotlin now is how much I believe in it and how much I enjoy it I don't get to use it",
    "start": "145220",
    "end": "151430"
  },
  {
    "text": "professionally yet but I'm trying so what I'm hoping this talk will do is give you a little bit of a taste of well",
    "start": "151430",
    "end": "157760"
  },
  {
    "text": "we're gonna look at some basic syntax just so you can know like how do I read what I'm looking at it's not complicated",
    "start": "157760",
    "end": "162980"
  },
  {
    "text": "the language which is one of the perks of it I'd like to describe it as somewhere between Java and Scala right",
    "start": "162980",
    "end": "169700"
  },
  {
    "text": "scholar brought all these great you know first-class functions in higher order blah but then it also came with like a",
    "start": "169700",
    "end": "176299"
  },
  {
    "text": "whole bag of complexity that you know it was hard to take small bites you had to kind of like swallow that whole and hope",
    "start": "176299",
    "end": "182390"
  },
  {
    "text": "it all digested Kotlin is the the guys",
    "start": "182390",
    "end": "188000"
  },
  {
    "text": "at JetBrains described it as a journeyman's language it was designed for programmers to just get their job",
    "start": "188000",
    "end": "194150"
  },
  {
    "text": "done you know it's not breaking new ground there's no like terribly exotic features everything every feature you",
    "start": "194150",
    "end": "201680"
  },
  {
    "text": "find in Kotlin you'll probably find in a different language you know they weren't trying to be creative they're trying to take all these known like productivity",
    "start": "201680",
    "end": "209269"
  },
  {
    "text": "aids and I hate the word best practices but you know all these things that are they're useful in other arenas and bring",
    "start": "209269",
    "end": "215060"
  },
  {
    "text": "them into the JVM and some sort of cohesive usable package I think that for the most part they have succeeded",
    "start": "215060",
    "end": "220910"
  },
  {
    "text": "hopefully by the end of this talk you'll at least have some opinion one way or",
    "start": "220910",
    "end": "226010"
  },
  {
    "text": "another on it and that's that's my hope so I don't like doing slides because",
    "start": "226010",
    "end": "232459"
  },
  {
    "text": "codes on code on slides is never fun so the first step which I meant to do",
    "start": "232459",
    "end": "239359"
  },
  {
    "text": "before everyone came in so I'm going to fix the font",
    "start": "239359",
    "end": "243880"
  },
  {
    "text": "that's true let's try that made it big",
    "start": "247470",
    "end": "254080"
  },
  {
    "text": "here in the back read all that I see a thumb I think that's a thumb so okay so",
    "start": "254080",
    "end": "263500"
  },
  {
    "text": "I have a script Mac and it's full its",
    "start": "263500",
    "end": "268780"
  },
  {
    "text": "concept of full screen is annoying so let me find out where my script win so",
    "start": "268780",
    "end": "275740"
  },
  {
    "text": "this is what we're gonna cover if you can see that I have this split I'll",
    "start": "275740",
    "end": "282580"
  },
  {
    "text": "regret closing this later but it'll be fine it'll be fine so this is what we're going to cover for what it matters",
    "start": "282580",
    "end": "291360"
  },
  {
    "text": "that's readable right I can bump it up somehow nope that just changed my screen",
    "start": "291360",
    "end": "298300"
  },
  {
    "text": "thing that's a bad suggestion okay so so we're gonna start with some basic stuff",
    "start": "298300",
    "end": "303550"
  },
  {
    "text": "the whole this is kind of an amalgam of two different talks I give one is",
    "start": "303550",
    "end": "308710"
  },
  {
    "text": "basically just an intro and other one is like all that like the interesting features this is a bit of a boat so",
    "start": "308710",
    "end": "314020"
  },
  {
    "text": "we're gonna start with some basic kind of introduction stuff look what the syntax looks like some of the more lower",
    "start": "314020",
    "end": "319660"
  },
  {
    "text": "level features and we're gonna kind of move into some more interesting things now since this is a combination talk I'm",
    "start": "319660",
    "end": "326289"
  },
  {
    "text": "not striking it through all of this so I'm gonna skip the stuff about the Java interact which is very fascinating if",
    "start": "326289",
    "end": "332500"
  },
  {
    "text": "you've ever tried to use a Scala library from Java anyone ever tried that remember how weird it felt they were",
    "start": "332500",
    "end": "338680"
  },
  {
    "text": "just it just you could tell it was Scala Colin at least has some nice like",
    "start": "338680",
    "end": "344110"
  },
  {
    "text": "annotations and features to make that it doesn't smooth it all away I don't think but it definitely makes it almost not",
    "start": "344110",
    "end": "350860"
  },
  {
    "text": "noticeable that it's a common library we can come back to that if you want it's interesting but maybe not as compelling",
    "start": "350860",
    "end": "356500"
  },
  {
    "text": "as some of the others yeah and then we'll work through so the the one",
    "start": "356500",
    "end": "362349"
  },
  {
    "text": "feature we're done no we're not done with that just yet the one feature I like most about Kotlin that not everyone",
    "start": "362349",
    "end": "369610"
  },
  {
    "text": "necessarily might agree with is null ability how many people know that Kotlin",
    "start": "369610",
    "end": "374800"
  },
  {
    "text": "has known this in the type system okay so here's what that looks like all",
    "start": "374800",
    "end": "380569"
  },
  {
    "text": "right so this is your basic class as you can tell it looks kinda like a Java class it's nothing terribly complicated",
    "start": "380569",
    "end": "386680"
  },
  {
    "text": "instead of public void it's just fun short for function Kotlin defaults to",
    "start": "386680",
    "end": "393169"
  },
  {
    "text": "public by default rather than package private like Scot like Java Java DES",
    "start": "393169",
    "end": "398539"
  },
  {
    "text": "they audited millions of lines of code on github and found out that most people",
    "start": "398539",
    "end": "404779"
  },
  {
    "text": "are declaring things as public so they went with the least boilerplate option and then if you want you know there's",
    "start": "404779",
    "end": "411020"
  },
  {
    "text": "private and there's internal and I think protected but anyways so this is a",
    "start": "411020",
    "end": "418490"
  },
  {
    "text": "function there's actually a unit test a j-unit so we can run it and to show you",
    "start": "418490",
    "end": "425749"
  },
  {
    "text": "what knowability looks like now Kotlin one of the things I like about common is it has type inference in a way that Java",
    "start": "425749",
    "end": "434949"
  },
  {
    "text": "sort of is getting with Java 10 with its bar keyword and various other bits Colin",
    "start": "434949",
    "end": "441979"
  },
  {
    "text": "goes all-in on type inference so for the most part you never have to declare a type unless you're doing something very",
    "start": "441979",
    "end": "447800"
  },
  {
    "text": "very specific like you're on collections like if you specifically want it to be an ArrayList you should declare it as an",
    "start": "447800",
    "end": "453740"
  },
  {
    "text": "ArrayList otherwise you can let the type inference to say it's a list because most the time list is all you need so in",
    "start": "453740",
    "end": "459319"
  },
  {
    "text": "this case we're declaring a simple variable called s like Scala if you used",
    "start": "459319",
    "end": "465499"
  },
  {
    "text": "it var versus Val VARs mutable Valis final so sort of like Java 10 has except",
    "start": "465499",
    "end": "472459"
  },
  {
    "text": "Java 10 didn't include Val unfortunately so in this case we're declaring a variable called s and it's",
    "start": "472459",
    "end": "478699"
  },
  {
    "text": "gonna be a type of string and you'll notice the question mark there the question mark tells the compiler this",
    "start": "478699",
    "end": "483949"
  },
  {
    "text": "value may or may not be null we just don't know yet the difference being if",
    "start": "483949",
    "end": "489919"
  },
  {
    "text": "you just declare that it's a string definitely definitely a string will",
    "start": "489919",
    "end": "496279"
  },
  {
    "text": "never ever be null now the perk of that is like you never have to check s if it's null in this case you can just use",
    "start": "496279",
    "end": "503149"
  },
  {
    "text": "it and you're guaranteed to never get a null pointer and there's some escape hatches where that's not entirely true",
    "start": "503149",
    "end": "509680"
  },
  {
    "text": "and you'll hit it everyone does but for the most part this is how it works so this might be",
    "start": "509680",
    "end": "516830"
  },
  {
    "text": "knowable and as you can tell it calls a function called maybe maybe it returns a",
    "start": "516830",
    "end": "521870"
  },
  {
    "text": "string maybe returns null we don't know we have to do some checks so there's a couple ways that this works so the first",
    "start": "521870",
    "end": "530060"
  },
  {
    "text": "one this little Elvis operator that I have to say I'm refactoring a large project now it's in Java I'm not quite",
    "start": "530060",
    "end": "537110"
  },
  {
    "text": "brave enough to convert it to Kotlin because it's not people use it right so it's not just my code otherwise I'd",
    "start": "537110",
    "end": "542630"
  },
  {
    "text": "convert it to cotton and I move on but you know there are costs to moving a project changing a project language",
    "start": "542630",
    "end": "549279"
  },
  {
    "text": "everyone who's ever contributed would suddenly stop because they don't want to learn Kotlin just to contribute anyways",
    "start": "549279",
    "end": "554980"
  },
  {
    "text": "but I wish this is the one thing I really miss in Java code and it's one of",
    "start": "554980",
    "end": "560630"
  },
  {
    "text": "kind of the smaller details that works all the time but this basically says I want to print an S unless it's null and",
    "start": "560630",
    "end": "566900"
  },
  {
    "text": "then I want to print never print a null right so that's the first way that we",
    "start": "566900",
    "end": "574850"
  },
  {
    "text": "can check a null so in this case you can",
    "start": "574850",
    "end": "583490"
  },
  {
    "text": "see you probably can't see in the bottom I've never gotten this bottom part to the font thing to change without really",
    "start": "583490",
    "end": "589220"
  },
  {
    "text": "screwing up the rest of the UI so I'm not going to do it but you can read the code at least so s is null and you can",
    "start": "589220",
    "end": "595400"
  },
  {
    "text": "see more importantly in the console that's a decent fun when we print it we get never print at all which is what we",
    "start": "595400",
    "end": "602660"
  },
  {
    "text": "kind of want right so it's a very succinct way to say use this value unless it's null otherwise use this",
    "start": "602660",
    "end": "607910"
  },
  {
    "text": "default value you could one of the things that's interesting about Kotlin",
    "start": "607910",
    "end": "614360"
  },
  {
    "text": "is that everything is an expression if try there's a win which is sort of like",
    "start": "614360",
    "end": "620480"
  },
  {
    "text": "a switch only nicer everything is an expression if so you can use them as",
    "start": "620480",
    "end": "625959"
  },
  {
    "text": "expressions in a line so you could you can even do something like this you're going to print s it's null else you're",
    "start": "625959",
    "end": "632930"
  },
  {
    "text": "going to throw a runtime exception of what are you doing",
    "start": "632930",
    "end": "638660"
  },
  {
    "text": "and that compiles now you may say that's weird because throw a runtime exception",
    "start": "638660",
    "end": "644930"
  },
  {
    "text": "doesn't have a tie right it just it unwinds a stack throw",
    "start": "644930",
    "end": "650900"
  },
  {
    "text": "there's a type called nothing everything essentially nothing extends everything so it's like the bottom type right in",
    "start": "650900",
    "end": "659480"
  },
  {
    "text": "Java everything extends object in Kotlin everything extends any technically any",
    "start": "659480",
    "end": "664490"
  },
  {
    "text": "question mark at the bottom is nothing which is useful for if you have error",
    "start": "664490",
    "end": "670310"
  },
  {
    "text": "handling and you're trying to use it in an expression normally if it's like it goes and does maybe null checks or range",
    "start": "670310",
    "end": "676850"
  },
  {
    "text": "checking and if it's outside the range the one exception but you still need that expression to return a value so",
    "start": "676850",
    "end": "681890"
  },
  {
    "text": "that you can infer the type what the nothing lets you do is the compiler knows this function will never return it",
    "start": "681890",
    "end": "687350"
  },
  {
    "text": "returns nothing doesn't return void or no or unit in the case of common it",
    "start": "687350",
    "end": "692450"
  },
  {
    "text": "never returns so you could use it an expression to say do this or other else",
    "start": "692450",
    "end": "699350"
  },
  {
    "text": "do this this one's going to throw an exception it'll never return ignore this part when it's looking at type inference",
    "start": "699350",
    "end": "705430"
  },
  {
    "text": "which lets you do these kind of nice little one-liners like this so that's what's happening here is that this",
    "start": "705430",
    "end": "711320"
  },
  {
    "text": "expression type returns the type of nothing but it can still infer that the",
    "start": "711320",
    "end": "716680"
  },
  {
    "text": "result of this expression is a string actually a string not question mark",
    "start": "716680",
    "end": "722000"
  },
  {
    "text": "because we're checking for an illness right so the other way you can check it",
    "start": "722000",
    "end": "731210"
  },
  {
    "text": "you can say you can do the standard Java version of it if it's not null then we come in here now what's interesting here",
    "start": "731210",
    "end": "738350"
  },
  {
    "text": "and whether you're not seeing in this code you'll see it here in a minute will do new new s is equal to s and it's",
    "start": "738350",
    "end": "751100"
  },
  {
    "text": "going to no idea if you've not you probably haven't used Kotlin inside idea",
    "start": "751100",
    "end": "756620"
  },
  {
    "text": "but what you can see here is that in the gray there that's not an actual code that's just a type hint that the IDE",
    "start": "756620",
    "end": "762770"
  },
  {
    "text": "pops up for you which is useful if you try to figure out like what the type of an expression is so it's a nice way of",
    "start": "762770",
    "end": "768380"
  },
  {
    "text": "not including that in your code but you can still kind of see it if you find it's too noisy you can turn it off I",
    "start": "768380",
    "end": "773960"
  },
  {
    "text": "find it's useful personally especially when you trying to figure out why is this not compiling why is the type inference weird you can",
    "start": "773960",
    "end": "781050"
  },
  {
    "text": "see right there in your IDE so but we'll come back to this one you can do the if check and say if it's not null print",
    "start": "781050",
    "end": "787530"
  },
  {
    "text": "something the other option is this guy here and now this says if s is not null",
    "start": "787530",
    "end": "796170"
  },
  {
    "text": "then we're going to call this function called lat now let is something we'll brief",
    "start": "796170",
    "end": "802980"
  },
  {
    "text": "divergence is a an extension function which we'll look at that is only called",
    "start": "802980",
    "end": "808320"
  },
  {
    "text": "if s is not null and then it takes a lambda as its only parameter and inside",
    "start": "808320",
    "end": "814800"
  },
  {
    "text": "that you can say now if we say value s is equal to let me see if it'll it'll",
    "start": "814800",
    "end": "822180"
  },
  {
    "text": "it'll be this good this local not unit",
    "start": "822180",
    "end": "827420"
  },
  {
    "text": "there so the if you don't declare a parameter to let the default name is it",
    "start": "829520",
    "end": "835140"
  },
  {
    "text": "right you can call it whatever you want but if you don't give the name you get it so in this case as you can see we de",
    "start": "835140",
    "end": "840660"
  },
  {
    "text": "put a new variable assign it to it and the type the inferred type as you can see is string with not with the not null",
    "start": "840660",
    "end": "847680"
  },
  {
    "text": "right so inside inside this block you can you can use technically you can use",
    "start": "847680",
    "end": "853710"
  },
  {
    "text": "s as well but you can definitely use new s and know that it's never going to be null because you're never going to get",
    "start": "853710",
    "end": "859740"
  },
  {
    "text": "into that block if s is no and that's two ways you can handle it so just to",
    "start": "859740",
    "end": "867120"
  },
  {
    "text": "illustrate the point more so here's our function maybe right now it returns at null we're gonna switch it to return an",
    "start": "867120",
    "end": "872700"
  },
  {
    "text": "actual string and then when we rerun so I let me get some different things you",
    "start": "872700",
    "end": "879390"
  },
  {
    "text": "can't see down here it says S has a value of how about now but the interesting thing is you can do still do",
    "start": "879390",
    "end": "887280"
  },
  {
    "text": "when you do the print line now you get how about now print it out because s is not null the null check you kind of get",
    "start": "887280",
    "end": "895320"
  },
  {
    "text": "the same thing you made it and then s didn't execute when when s was null but",
    "start": "895320",
    "end": "902820"
  },
  {
    "text": "now it does why did it skip yes question mark s is not no oh",
    "start": "902820",
    "end": "912150"
  },
  {
    "text": "because I hit f8 which stepped over the lambda sorry it was supposed to step into the block there threw me for a loop",
    "start": "912150",
    "end": "923550"
  },
  {
    "text": "s is now not and also it steps into your lambda right so this seems like a like a",
    "start": "923550",
    "end": "929940"
  },
  {
    "text": "minor thing right and it's sort of is once you get used to it but I converted a rather large project from Java to",
    "start": "929940",
    "end": "937560"
  },
  {
    "text": "Kotlin idea has a nice feature it says convert Java code to Collin it'll just go convert it all for you which is",
    "start": "937560",
    "end": "943380"
  },
  {
    "text": "really nice if you want to like play with it you can convert your project to Collin using the IDE and when you figure",
    "start": "943380",
    "end": "948390"
  },
  {
    "text": "out like oh it all broke you can just you know get revert and you're done but it'll convert it for you in bulk which",
    "start": "948390",
    "end": "954630"
  },
  {
    "text": "is nice but I did that for a project and I found an unbelievable number of places where I",
    "start": "954630",
    "end": "960150"
  },
  {
    "text": "had like null pointer vulnerabilities and I didn't know because I just used variables and didn't care",
    "start": "960150",
    "end": "965820"
  },
  {
    "text": "turns out it was sort of fine because this codes been in use for fifteen years and it hasn't crashed yet but it",
    "start": "965820",
    "end": "972720"
  },
  {
    "text": "highlighted for those places where I should have been doing proper null checking but I wasn't and in Kotlin you're forced to do that",
    "start": "972720",
    "end": "979430"
  },
  {
    "text": "because the type system and the compiler requires it so this is this is sort of a",
    "start": "979430",
    "end": "984990"
  },
  {
    "text": "big deal in practice now briefly I didn't start my timer that's okay we",
    "start": "984990",
    "end": "990660"
  },
  {
    "text": "have 30 minutes I mentioned extension functions now this is another feature this is I don't",
    "start": "990660",
    "end": "998510"
  },
  {
    "text": "that's probably a bad idea so an extension function how many of you have",
    "start": "998510",
    "end": "1003770"
  },
  {
    "text": "written a function like I wish I wished Java had this method on say string let's a simple example let's just write one so",
    "start": "1003770",
    "end": "1013310"
  },
  {
    "text": "what we want to do is we want to make us function called to title case right it",
    "start": "1013310",
    "end": "1022760"
  },
  {
    "text": "takes in a string if I can type strict",
    "start": "1022760",
    "end": "1029000"
  },
  {
    "text": "math wrong sometimes it's nice so it takes in a",
    "start": "1029000",
    "end": "1034640"
  },
  {
    "text": "string and it returns a string right and then the way you always have to use this is for example let's do you do this to",
    "start": "1034640",
    "end": "1046850"
  },
  {
    "text": "title case this won't make a whole lot of sense in context because whatever but",
    "start": "1046850",
    "end": "1052360"
  },
  {
    "text": "but this is how you'd call it and how many of you written these utility methods like this were you having to",
    "start": "1052360",
    "end": "1057470"
  },
  {
    "text": "like pass in the thing and somewhere you have a class it's a static whatever it's just awkward right it's not terrible but",
    "start": "1057470",
    "end": "1063290"
  },
  {
    "text": "it's cumbersome and it can be cumbersome with an extension function you can do",
    "start": "1063290",
    "end": "1069350"
  },
  {
    "text": "some very fun things so in this case we're going to say function and we're",
    "start": "1069350",
    "end": "1075230"
  },
  {
    "text": "gonna do that right now we've just defined a new function on string that we",
    "start": "1075230",
    "end": "1080360"
  },
  {
    "text": "can call on any string instance that we want or if you're so inclined any",
    "start": "1080360",
    "end": "1085400"
  },
  {
    "text": "nillable string instance that you might want so now whenever you have a string reference you can call to title case and",
    "start": "1085400",
    "end": "1091430"
  },
  {
    "text": "it just works so how does this work how does this look in practice you see this trend red because my function",
    "start": "1091430",
    "end": "1096950"
  },
  {
    "text": "disappeared you can do that oh we don't need this anymore",
    "start": "1096950",
    "end": "1103940"
  },
  {
    "text": "because now this is obviously is not what you want but you can return I",
    "start": "1103940",
    "end": "1112480"
  },
  {
    "text": "cheated I shouldn't do that",
    "start": "1112480",
    "end": "1118260"
  },
  {
    "text": "teaching bad habits alright so now this is an extension function on the type string and inside it you have this",
    "start": "1118260",
    "end": "1125100"
  },
  {
    "text": "reference which refers to whatever the instance that you called it on so in this case inside this function we can",
    "start": "1125100",
    "end": "1131250"
  },
  {
    "text": "get into let me see no you guys can't see it because this is too small the",
    "start": "1131250",
    "end": "1137430"
  },
  {
    "text": "disre burst too when you get into the function you'll see that this and the two string says how about now so it's",
    "start": "1137430",
    "end": "1143820"
  },
  {
    "text": "it's a nice succinct way to add functionality to classes that you don't necessarily own but you want to like add",
    "start": "1143820",
    "end": "1149760"
  },
  {
    "text": "a little bit of functionality to it that you can then kind of shuttle around it's a little trivial in this particular",
    "start": "1149760",
    "end": "1155490"
  },
  {
    "text": "example but it makes for some nicer code yeah you can access access it out",
    "start": "1155490",
    "end": "1162990"
  },
  {
    "text": "outside as well you have it you import it like you would like a static import in Java and that's actually one of the",
    "start": "1162990",
    "end": "1170010"
  },
  {
    "text": "nice things about it is you can actually scope it so if you only wanted this inside you can have local oh this is a",
    "start": "1170010",
    "end": "1176670"
  },
  {
    "text": "class so only inside this particular class now can I call to title case so",
    "start": "1176670",
    "end": "1183540"
  },
  {
    "text": "you can scope it to whatever lexical block that you want really or if you if",
    "start": "1183540",
    "end": "1188640"
  },
  {
    "text": "you're into local functions Kotlin supports local functions which is kind",
    "start": "1188640",
    "end": "1195180"
  },
  {
    "text": "of fun and local classes and local stuff whatever but these are extension functions and this is really great we'll",
    "start": "1195180",
    "end": "1201000"
  },
  {
    "text": "actually get into this a little bit more in when we start talking about writing DSL in Kotlin which is fun",
    "start": "1201000",
    "end": "1206600"
  },
  {
    "text": "so without belaboring that point too much that's null ability seems trivial",
    "start": "1206600",
    "end": "1213080"
  },
  {
    "text": "it's awesome once you get used to it it's hard to go back to just straight",
    "start": "1213080",
    "end": "1218700"
  },
  {
    "text": "Java but you've been doing so all right so the next thing I want to show is",
    "start": "1218700",
    "end": "1223880"
  },
  {
    "text": "delegation how many people have have spent their entire careers hearing favour composition over inheritance",
    "start": "1223880",
    "end": "1230900"
  },
  {
    "text": "everyone's heard that one and you're like but that's not fun it's a lot of work and so who does it fewer hands",
    "start": "1230900",
    "end": "1240600"
  },
  {
    "text": "exactly right I don't do it because it's so much work because ya know",
    "start": "1240600",
    "end": "1247280"
  },
  {
    "text": "that's cheating um this is this is actually nicer um he said Lompoc for those who couldn't hear him it's a lot",
    "start": "1247280",
    "end": "1254030"
  },
  {
    "text": "of work it's not a manual work it's not great so colin has delegation and has a number",
    "start": "1254030",
    "end": "1261050"
  },
  {
    "text": "of different forms of delegation that we'll take a look at we'll start with this simple version first let's look at",
    "start": "1261050",
    "end": "1268250"
  },
  {
    "text": "the delegation example so is that still readable so this is the class called",
    "start": "1268250",
    "end": "1275270"
  },
  {
    "text": "user it has a variable or property called name in Kotlin there are",
    "start": "1275270",
    "end": "1282470"
  },
  {
    "text": "properties and not fields in Java you declare a field and then you're responsible for running your getter and your setter if you want it to be",
    "start": "1282470",
    "end": "1289040"
  },
  {
    "text": "read-only you only write the getter and that's all like manual with Kotlin you just say var name and now that's a read",
    "start": "1289040",
    "end": "1295820"
  },
  {
    "text": "writable property so you get for free a getter and a setter but you still reference it and we'll see in a test you",
    "start": "1295820",
    "end": "1302540"
  },
  {
    "text": "still reference it as user name not user name so whether you're trying to pass",
    "start": "1302540",
    "end": "1307640"
  },
  {
    "text": "user that name to a function or you're trying to reassign it it's just user dot name and then the compiler takes care of",
    "start": "1307640",
    "end": "1312920"
  },
  {
    "text": "calling either the get or the set depending on the context so anyway so",
    "start": "1312920",
    "end": "1318440"
  },
  {
    "text": "what this one this particular example is doing is we're doing an observable property so every time this property",
    "start": "1318440",
    "end": "1324530"
  },
  {
    "text": "changes we want to fire off an event in this case we're printing out something and then this is actually kind of",
    "start": "1324530",
    "end": "1333020"
  },
  {
    "text": "interesting one of the problems with no ability is there are certain titles that you don't want fields to be or properties to be knowable but you don't",
    "start": "1333020",
    "end": "1339830"
  },
  {
    "text": "necessarily have them right up front thank-oo RMS where that's hibernate or the project I work on morphia you're",
    "start": "1339830",
    "end": "1345860"
  },
  {
    "text": "loading something out of the database and you know that that field is gonna be there but it's not handy when you",
    "start": "1345860",
    "end": "1351560"
  },
  {
    "text": "construct your class you know so typically if it feel is not a property is not null there's not knowable by the",
    "start": "1351560",
    "end": "1357980"
  },
  {
    "text": "time the constructor is done it has to have a value right otherwise the compiler just will fail there's a couple",
    "start": "1357980",
    "end": "1364670"
  },
  {
    "text": "of options to get around that in this case we're using delegates and this one says we're going to delegate this value",
    "start": "1364670",
    "end": "1370790"
  },
  {
    "text": "by this function called not null and it's basically through some compiler",
    "start": "1370790",
    "end": "1376790"
  },
  {
    "text": "magic and language magic it says we're delegating this value to this function going to return an INT and not a not a",
    "start": "1376790",
    "end": "1383360"
  },
  {
    "text": "null at some point in time so compiler don't freak out because we're going to",
    "start": "1383360",
    "end": "1388940"
  },
  {
    "text": "we're gonna initialize it sometime later and then we had this created value as a",
    "start": "1388940",
    "end": "1395240"
  },
  {
    "text": "type of local date/time but you can see here we're delegating by lazy if you ever have a property that's really",
    "start": "1395240",
    "end": "1401900"
  },
  {
    "text": "expensive to to populate whether you're doing a calculation or you're loading a",
    "start": "1401900",
    "end": "1408470"
  },
  {
    "text": "40 megabyte XML file from disk or across the network whatever it is it's a lot of",
    "start": "1408470",
    "end": "1414110"
  },
  {
    "text": "work to load and you don't want to create it every time you instantiate an instance of your class right so you can say this is a lazy property don't do",
    "start": "1414110",
    "end": "1421250"
  },
  {
    "text": "anything for this particular property until someone references it and then this lambda will get executed right so",
    "start": "1421250",
    "end": "1430300"
  },
  {
    "text": "we'll see that in action so if we look at the test here we're gonna create a",
    "start": "1430300",
    "end": "1435500"
  },
  {
    "text": "user named Pam Beesly office spans anyone yeah so we're gonna create a user",
    "start": "1435500",
    "end": "1442520"
  },
  {
    "text": "named Pam Beesly but as we all know at one point she gets married and now she is mrs. Jim Halpert so we're gonna",
    "start": "1442520",
    "end": "1449480"
  },
  {
    "text": "change their name to Pam Halpert and we're gonna see what that looks like so",
    "start": "1449480",
    "end": "1455080"
  },
  {
    "text": "bringing up that console good not you we're done with you I wanted you",
    "start": "1455800",
    "end": "1466750"
  },
  {
    "text": "and the console okay so now we have a user my debug point got deleted so we",
    "start": "1468640",
    "end": "1479410"
  },
  {
    "text": "have a user her name is Pam Beesly would you guys can't see because I can't change that font size but trust me her",
    "start": "1479410",
    "end": "1485560"
  },
  {
    "text": "name is Pam Beesly but now she got married so we're going to sign it using the property syntax - Pam Halpert and I",
    "start": "1485560",
    "end": "1493600"
  },
  {
    "text": "hit the wrong button again one day I'll learn to use my IDE no it's just hanging",
    "start": "1493600",
    "end": "1499870"
  },
  {
    "text": "in there there we go so we just step through it close you and you can see now",
    "start": "1499870",
    "end": "1506800"
  },
  {
    "text": "here you can see Kotlin string has changed from Pam Beesly to Pam Halpert",
    "start": "1506800",
    "end": "1512290"
  },
  {
    "text": "because it executed the delegate here that we had defined right there are a",
    "start": "1512290",
    "end": "1520720"
  },
  {
    "text": "bunch of different delegates you could use this one's observable you can do some interesting things with it but that's just one example so now how about",
    "start": "1520720",
    "end": "1527080"
  },
  {
    "text": "this age thing or the the lazy creation alright I wish you guys could see this",
    "start": "1527080",
    "end": "1534670"
  },
  {
    "text": "does this work no the spread finger thing doesn't work either inside user at least for you guys",
    "start": "1534670",
    "end": "1541150"
  },
  {
    "text": "up front I hit the wrong button it starts off as null and we're gonna call",
    "start": "1541150",
    "end": "1546420"
  },
  {
    "text": "local date time did I read fixed oh",
    "start": "1546420",
    "end": "1552850"
  },
  {
    "text": "that's why I don't know why that takes so long",
    "start": "1552850",
    "end": "1560290"
  },
  {
    "text": "today it shouldn't council debugger where's my",
    "start": "1560290",
    "end": "1568630"
  },
  {
    "text": "variable alright it says data is collecting it says collecting data oh I think the debuggers invoking the",
    "start": "1568630",
    "end": "1574210"
  },
  {
    "text": "property is why it's showing up isn't no no anyways it used to be null until the debugger tried to render it and then it called",
    "start": "1574210",
    "end": "1580090"
  },
  {
    "text": "the function sorry and now it has a value and you can see user created in",
    "start": "1580090",
    "end": "1587559"
  },
  {
    "text": "the console comes up now it has a time so that was the delegate not null so",
    "start": "1587559",
    "end": "1594130"
  },
  {
    "text": "with the age the age was lazy as you'll recall remember we hadn't initialized it with anything or it was the delegate not",
    "start": "1594130",
    "end": "1601390"
  },
  {
    "text": "null if we try to print it now we get an exception and then exception says property age should be initialized",
    "start": "1601390",
    "end": "1607720"
  },
  {
    "text": "before it yet right so this is what that delegate will do if you haven't assigned it but fortunately we can assign it a",
    "start": "1607720",
    "end": "1614380"
  },
  {
    "text": "value we can say Pam is now 29 years old happy birthday and if we print it again",
    "start": "1614380",
    "end": "1620520"
  },
  {
    "text": "now we get user a jiggle 29 so it's a nice little compiler workaround if",
    "start": "1620520",
    "end": "1627850"
  },
  {
    "text": "you're trying to load things off a disk deserializing on a JSON whatever might happen to be that you can say I know",
    "start": "1627850",
    "end": "1633010"
  },
  {
    "text": "it's not gonna be no I just don't have that value yet please compile this as not null and then you can use it",
    "start": "1633010",
    "end": "1638679"
  },
  {
    "text": "everywhere else as if it's always gonna have a value because by that point it should as long as your D serialization process is properly run so that is one",
    "start": "1638679",
    "end": "1647170"
  },
  {
    "text": "form of Delegates and that's kind of interesting the more interesting version",
    "start": "1647170",
    "end": "1652450"
  },
  {
    "text": "for me is delegate our inheritance by",
    "start": "1652450",
    "end": "1658630"
  },
  {
    "text": "delegation is what JetBrains calls it so who here has ever implemented Java util",
    "start": "1658630",
    "end": "1664090"
  },
  {
    "text": "list or really anything in Java util like map it's like a massive API right",
    "start": "1664090",
    "end": "1670690"
  },
  {
    "text": "and you you have to implement all these methods and delegate through it's a lot of work right so Kotlin has this thing",
    "start": "1670690",
    "end": "1681760"
  },
  {
    "text": "called delegation by inheritance by delegation so I created a lista Gramm",
    "start": "1681760",
    "end": "1688630"
  },
  {
    "text": "and this is a simple example it's a list that keeps that builds a histogram of its size over time right not terribly",
    "start": "1688630",
    "end": "1695740"
  },
  {
    "text": "useful but it is demonstrative at least so it is a normal list is what I want it",
    "start": "1695740",
    "end": "1701290"
  },
  {
    "text": "to be but I don't want to in I don't want to implement every single method in the java.util list API so what I do is I",
    "start": "1701290",
    "end": "1709510"
  },
  {
    "text": "take this is a constructor as you see right here this highlighted bit does it help when I highlight or does it make it",
    "start": "1709510",
    "end": "1715420"
  },
  {
    "text": "harder to read seems like it helps I hope it helps so this is a constructor",
    "start": "1715420",
    "end": "1720640"
  },
  {
    "text": "parameter to my lista gram of a type called mutable list which is technically ArrayList Kotlin makes a distinction",
    "start": "1720640",
    "end": "1727630"
  },
  {
    "text": "between list and mutable list map and mutable map and set and mutable set and it's it's exactly what it sounds like",
    "start": "1727630",
    "end": "1734919"
  },
  {
    "text": "one of them you can change one of them you can't so in this case we're gonna",
    "start": "1734919",
    "end": "1739929"
  },
  {
    "text": "take a list that's immutable list because we want to add things to it eventually right and just as an aside",
    "start": "1739929",
    "end": "1745530"
  },
  {
    "text": "Kotlin supports default parameters on on functions in general in this case it's a",
    "start": "1745530",
    "end": "1751809"
  },
  {
    "text": "constructor so I can create a lista grand with an existing list and pass in that instance or if I don't pass",
    "start": "1751809",
    "end": "1757450"
  },
  {
    "text": "anything in at all it will call mutable list of which is a convenience method",
    "start": "1757450",
    "end": "1762760"
  },
  {
    "text": "that returns an empty list or it returns a list of whatever parameters you pass but we're not passing anything so in",
    "start": "1762760",
    "end": "1768309"
  },
  {
    "text": "this case it's empty so it defaults to an empty list this list ax Graham now",
    "start": "1768309",
    "end": "1774010"
  },
  {
    "text": "here this colon mutable list we're saying that my list of Graham extends mutable list if I did not do this now suddenly",
    "start": "1774010",
    "end": "1784990"
  },
  {
    "text": "you can see the little red squiggly show up that's saying there are methods on mutable list that you haven't",
    "start": "1784990",
    "end": "1790150"
  },
  {
    "text": "implemented here and that's the standard thing that we've all seen before you extend the class and you haven't implemented those methods yet compiler",
    "start": "1790150",
    "end": "1796419"
  },
  {
    "text": "complains right so the magic comes in here when we do this delegation there at",
    "start": "1796419",
    "end": "1802419"
  },
  {
    "text": "the end we're gonna say we're gonna delegate by list so any method what this",
    "start": "1802419",
    "end": "1808299"
  },
  {
    "text": "is saying is any function on the mutable list interface that we have not implemented on lista Graham we're going",
    "start": "1808299",
    "end": "1815470"
  },
  {
    "text": "to delegate it by calling that same function on the list reference that we just passed in as a property to our list",
    "start": "1815470",
    "end": "1822820"
  },
  {
    "text": "does that make sense that every follow that it's awesome because now as",
    "start": "1822820",
    "end": "1828390"
  },
  {
    "text": "you can see I only really care about two functions on the interface add and remove right I should probably care",
    "start": "1828390",
    "end": "1834929"
  },
  {
    "text": "about more but for this these are the two things so every time we add something to the list we're going to take a time stamp with",
    "start": "1834929",
    "end": "1841290"
  },
  {
    "text": "account every time we remove we're gonna do the exact same thing and then I can",
    "start": "1841290",
    "end": "1846390"
  },
  {
    "text": "get down to the meat of it and I can draw my little histogram right it's just a bunch of stars showing the size of the",
    "start": "1846390",
    "end": "1853320"
  },
  {
    "text": "list it's not fancy but it works so",
    "start": "1853320",
    "end": "1858620"
  },
  {
    "text": "let's see this in action shall we so if we go to list of grand routes Lister",
    "start": "1858620",
    "end": "1865650"
  },
  {
    "text": "gram test this is what our test looks like there's a little bit here but it's",
    "start": "1865650",
    "end": "1871919"
  },
  {
    "text": "not terribly important all we're seeing here is we're adding a bunch of things to the list we're moving some things",
    "start": "1871919",
    "end": "1878160"
  },
  {
    "text": "from the list adding some more we're gonna sleep for a little while and because when with the clock to advance and then we're gonna add and remove a",
    "start": "1878160",
    "end": "1884190"
  },
  {
    "text": "whole bunch all at once and then we're going to print the list a gram right so",
    "start": "1884190",
    "end": "1889530"
  },
  {
    "text": "this is what it looks like when we run it oh yeah",
    "start": "1889530",
    "end": "1900060"
  },
  {
    "text": "it's gonna take I've tried that and",
    "start": "1900060",
    "end": "1905280"
  },
  {
    "text": "Elvis freaks out for me I keep going back to it though because everyone",
    "start": "1905280",
    "end": "1910830"
  },
  {
    "text": "someday I'm gonna get it figured out and it'll work properly but as you can see my list grew guru-guru we remove some",
    "start": "1910830",
    "end": "1918000"
  },
  {
    "text": "and there's the lista grin now this is all great to see the cotton version of",
    "start": "1918000",
    "end": "1924240"
  },
  {
    "text": "it that's what we're all here for right but just for comparison what I like to",
    "start": "1924240",
    "end": "1929850"
  },
  {
    "text": "show because there's two things I like to show here is the there I have a Java version of this as well and this is the",
    "start": "1929850",
    "end": "1936840"
  },
  {
    "text": "Java version because there's all those methods right and all they do is they",
    "start": "1936840",
    "end": "1943470"
  },
  {
    "text": "turn around and call that this wasn't it was not hard to write but it was definitely not fun to write it's just",
    "start": "1943470",
    "end": "1949590"
  },
  {
    "text": "tedious right yeah I knew someone was gonna say until a.j you'll do it for you",
    "start": "1949590",
    "end": "1955530"
  },
  {
    "text": "and you're absolutely right I might have actually done that one you could use yeah but see these these are all I'm",
    "start": "1955530",
    "end": "1961920"
  },
  {
    "text": "more complicated this is way better I think but yes you could use proxies",
    "start": "1961920",
    "end": "1969330"
  },
  {
    "text": "there are there are tips and tricks you can get around that but this is the this is the Java version of this and it's",
    "start": "1969330",
    "end": "1976050"
  },
  {
    "text": "hard to tell looking through all this code where the actual business logic of",
    "start": "1976050",
    "end": "1982980"
  },
  {
    "text": "it is right because everything else is lost in in the delegation code so delegation in Kotlin if there isn't if",
    "start": "1982980",
    "end": "1992700"
  },
  {
    "text": "there's an adapter yeah feel like all the swing stuff there's an adapter I chose list because there wasn't one",
    "start": "1992700",
    "end": "1998990"
  },
  {
    "text": "because I just knew someone's gonna say why didn't you use the adapter like shut up anyways I'm trying to make a point so",
    "start": "1998990",
    "end": "2011560"
  },
  {
    "text": "there's two things I want in the show when I first wrote this actually I always had to apologize because I",
    "start": "2011560",
    "end": "2017660"
  },
  {
    "text": "started using Kotlin the shop I was working we were stuck on Java 6 for a number of reasons",
    "start": "2017660",
    "end": "2023000"
  },
  {
    "text": "so I Kotlin and I learned to use the stream and the mapping and everything in Collin you know was lovely and I went to",
    "start": "2023000",
    "end": "2028790"
  },
  {
    "text": "go write the Java version then I got to this point is like I don't know how to do this with Java 8 stream and it was ugly and I was felt bad about",
    "start": "2028790",
    "end": "2035810"
  },
  {
    "text": "it because it was an unfair comparison so this is actually not so bad anymore but if we look at the histogram version",
    "start": "2035810",
    "end": "2044200"
  },
  {
    "text": "we're gonna collect everything in the history we're gonna group it by I had to",
    "start": "2044410",
    "end": "2050899"
  },
  {
    "text": "add a class of Java pair because Java doesn't have a pair class still I don't",
    "start": "2050900",
    "end": "2057710"
  },
  {
    "text": "know everyone tells me because it's hard to make generic and right and I can't figure out why but I might just be too dumb for them so anyways we're gonna",
    "start": "2057710",
    "end": "2065360"
  },
  {
    "text": "group into a pair so we're going to break it up into time and size and we're",
    "start": "2065360",
    "end": "2072080"
  },
  {
    "text": "gonna you know we get the entry set we're gonna call stream then we're gonna map it and we're gonna get what we want",
    "start": "2072080",
    "end": "2078350"
  },
  {
    "text": "because we do it's possible that the list changed multiple times in space of a given second so we want the very last",
    "start": "2078350",
    "end": "2084800"
  },
  {
    "text": "size in that list right because we keep adding for every every second boundary",
    "start": "2084800",
    "end": "2089810"
  },
  {
    "text": "we add size size size so one second span might have three sizes so we want to get the last one to",
    "start": "2089810",
    "end": "2095300"
  },
  {
    "text": "make sure we get the maximum size for that second and then we're going to create a new pair we're gonna map it to",
    "start": "2095300",
    "end": "2100880"
  },
  {
    "text": "a pair of we're gonna format the date so that doesn't suck and then we're gonna draw a plot and all the plot does is it",
    "start": "2100880",
    "end": "2108230"
  },
  {
    "text": "as you can come down here and see it creates a string with a bunch of stars for every for every whatever the count",
    "start": "2108230",
    "end": "2114380"
  },
  {
    "text": "is of creates that many stars and that builds our histogram and we're gonna map it to that pair and then at the very end",
    "start": "2114380",
    "end": "2121370"
  },
  {
    "text": "we're gonna come through and we're going to print out the time and whatever the plot was that's the Java version of it it could be better",
    "start": "2121370",
    "end": "2127520"
  },
  {
    "text": "almost certainly but not as bad as it used to be for sure the Kotlin version looks pretty similar",
    "start": "2127520",
    "end": "2133400"
  },
  {
    "text": "except Kotlin has a function called group by which is that was actually the thing that tripped me up on the job",
    "start": "2133400",
    "end": "2139040"
  },
  {
    "text": "eight one is grouping as a collection a collector at the end and it took me forever to find that it's because it",
    "start": "2139040",
    "end": "2146030"
  },
  {
    "text": "just wasn't intuitive for me colin has a group by as part of its thing automatically so it's clear I'm gonna",
    "start": "2146030",
    "end": "2152060"
  },
  {
    "text": "group it by the second of the day I'm not hiding behind a pair class which loses all semantic meaning you know",
    "start": "2152060",
    "end": "2158210"
  },
  {
    "text": "what's the second value in the pair I don't know how to the scroll back down so I'm gonna group it by the second I'm gonna map I'm gonna get the whatever the",
    "start": "2158210",
    "end": "2164510"
  },
  {
    "text": "value of that list is for that second I'm gonna pull the last one and then I'm gonna map it again",
    "start": "2164510",
    "end": "2170089"
  },
  {
    "text": "I'm gonna format the date to this particular format and then this is it's",
    "start": "2170089",
    "end": "2177289"
  },
  {
    "text": "an inline function you can believe that so Colin has an inline keyword so",
    "start": "2177289",
    "end": "2183859"
  },
  {
    "text": "whenever you use that function instead of saying two parenthesis and then value value or argument argument in this case",
    "start": "2183859",
    "end": "2191059"
  },
  {
    "text": "the arguments can be spread on either side of the function and you can use it as an operator essentially so this is a",
    "start": "2191059",
    "end": "2198019"
  },
  {
    "text": "shortcut it creates it actually creates a pair of whatever this type is to",
    "start": "2198019",
    "end": "2203720"
  },
  {
    "text": "whatever this type is and in this case I got fancy with my continent lambdas and",
    "start": "2203720",
    "end": "2209690"
  },
  {
    "text": "I just say for everything from 0 up to whatever the value is at a started",
    "start": "2209690",
    "end": "2215869"
  },
  {
    "text": "industry fold left creep I'm a string and then for each print it and then we",
    "start": "2215869",
    "end": "2223430"
  },
  {
    "text": "saw yeah we thought we saw the common version the Java version whenever it runs looks exactly the same as the",
    "start": "2223430",
    "end": "2230839"
  },
  {
    "text": "common version although I got more variants in the Java version and I can't quite figure out why but just to see it",
    "start": "2230839",
    "end": "2236630"
  },
  {
    "text": "run to know that it's ugly but it does",
    "start": "2236630",
    "end": "2241670"
  },
  {
    "text": "run and work I should have done for",
    "start": "2241670",
    "end": "2247789"
  },
  {
    "text": "smaller times I should I don't know now it takes like 15 seconds to run now 10",
    "start": "2247789",
    "end": "2252799"
  },
  {
    "text": "seconds as you can see the Java version also produces the lista gram a little bit",
    "start": "2252799",
    "end": "2258200"
  },
  {
    "text": "more work but it's there so so that's delegation all right it is 3:30",
    "start": "2258200",
    "end": "2264859"
  },
  {
    "text": "is it really 3:30 all right that's",
    "start": "2264859",
    "end": "2271460"
  },
  {
    "text": "delegation I'm gonna skip dsls because that's not quite as interesting it is interesting but it's kind of a nice",
    "start": "2271460",
    "end": "2276619"
  },
  {
    "text": "thing but I wanted to get to this other example two examples one will be a lot",
    "start": "2276619",
    "end": "2286359"
  },
  {
    "text": "one will be more immediately useful and other one might maybe stir your imagination so Kalin has co-routines",
    "start": "2286359",
    "end": "2293480"
  },
  {
    "text": "built-in anyone use rx Java rx whatever all the different async it's nice",
    "start": "2293480",
    "end": "2300830"
  },
  {
    "text": "right but there's a bit of ceremony when you have your observable of this or a single of that it works better than the",
    "start": "2300830",
    "end": "2308210"
  },
  {
    "text": "alternative I think Kaitlyn's version is better it supports what's called a KO routine so a",
    "start": "2308210",
    "end": "2316070"
  },
  {
    "text": "KO routine is it's just it's there's a key a new key word they added in 1.2 it's still experimental but you can mark",
    "start": "2316070",
    "end": "2322940"
  },
  {
    "text": "a function as suspend which that's the compiler know that it can be used inside of a KO routine and it's suspend Abul so",
    "start": "2322940",
    "end": "2329750"
  },
  {
    "text": "in this case just very very briefly we're running we're gonna execute this",
    "start": "2329750",
    "end": "2337370"
  },
  {
    "text": "function in a lambda called run blocking which means we're going to we're going",
    "start": "2337370",
    "end": "2343310"
  },
  {
    "text": "to run a KO routine but we're gonna wait for the return value because ultimately you want the value to come back out but",
    "start": "2343310",
    "end": "2350080"
  },
  {
    "text": "what this lets us do is we're going to fire up a thousand a hundred thousand co-routines",
    "start": "2350080",
    "end": "2355670"
  },
  {
    "text": "they're all going to do some work and in",
    "start": "2355670",
    "end": "2360680"
  },
  {
    "text": "return so in this case we're gonna create a list this launch says spawn a",
    "start": "2360680",
    "end": "2366620"
  },
  {
    "text": "KO routine and whatever it is whatever's inside this lambda go execute it by default it uses the fork/join pool but",
    "start": "2366620",
    "end": "2373580"
  },
  {
    "text": "that's customizable so we're going to fire off 100,000 days co-routines they are going to go do they're going to",
    "start": "2373580",
    "end": "2380560"
  },
  {
    "text": "sleep for a second and then they're going to increment an atomic integer so that way when we run it by the end we",
    "start": "2380560",
    "end": "2387770"
  },
  {
    "text": "can tell that num value should be a hundred thousand right to know that I'm not cheating so if we run this building",
    "start": "2387770",
    "end": "2400850"
  },
  {
    "text": "building building it runs amazingly fast I'm running out of time so I'm not gonna",
    "start": "2400850",
    "end": "2406250"
  },
  {
    "text": "run it but I want it for for comparison I wrote a Java version of it using threads I tried to like recreate like I",
    "start": "2406250",
    "end": "2413030"
  },
  {
    "text": "figured like what thread pool they're using and I'm gonna submit a runnable and we're gonna see how long it takes using standard Java threads to do a",
    "start": "2413030",
    "end": "2419030"
  },
  {
    "text": "similar sort of workload so this you can't read it but it says those hundred",
    "start": "2419030",
    "end": "2424790"
  },
  {
    "text": "thousand co-routines which as you can see counted up to a hundred thousand completed in two seconds and 140",
    "start": "2424790",
    "end": "2432890"
  },
  {
    "text": "milliseconds to do a hundred thousand threads essentially if I run them as actual",
    "start": "2432890",
    "end": "2438619"
  },
  {
    "text": "threads that number jumps up to over two minutes to run just for grins I ran a",
    "start": "2438619",
    "end": "2444440"
  },
  {
    "text": "million of these co-routines the other day and it took ten seconds to run the million co-routines and I crashed my JVM",
    "start": "2444440",
    "end": "2452210"
  },
  {
    "text": "trying to do one hundred and trying to do a million threads so they're really lightweight really fast and are built",
    "start": "2452210",
    "end": "2458570"
  },
  {
    "text": "into the language so if you do a lot of rx stuff this might be a nice option for you",
    "start": "2458570",
    "end": "2464599"
  },
  {
    "text": "I only started works only started to explore these this particular feature",
    "start": "2464599",
    "end": "2469609"
  },
  {
    "text": "but I'm terribly excited about it in some of the stuff that I do now in the last few remaining moments right so they",
    "start": "2469609",
    "end": "2480230"
  },
  {
    "text": "say never to upgrade before a presentation which I did not but what I",
    "start": "2480230",
    "end": "2485840"
  },
  {
    "text": "did do is I pulled in a completely new demo like two days ago I said I'm not",
    "start": "2485840",
    "end": "2492680"
  },
  {
    "text": "gonna do this one anymore I'm gonna pull in this other guy which might come back",
    "start": "2492680",
    "end": "2499010"
  },
  {
    "text": "to bite me everything worked yesterday when I ran it but we're gonna try it what's important is the code at this",
    "start": "2499010",
    "end": "2504770"
  },
  {
    "text": "point and not the execution right so",
    "start": "2504770",
    "end": "2510550"
  },
  {
    "text": "Kotlin targets not only the JVM but you can actually write Kotlin and have it",
    "start": "2510550",
    "end": "2515990"
  },
  {
    "text": "transpiled onto JavaScript so if anyone's running a react application",
    "start": "2515990",
    "end": "2521080"
  },
  {
    "text": "normally like you write your front-end and whatever then you're back into node and we're Java guys nobody likes to",
    "start": "2521080",
    "end": "2527300"
  },
  {
    "text": "write node code right I don't you can actually write your backing in Colin and your front-end in Thailand and still",
    "start": "2527300",
    "end": "2534170"
  },
  {
    "text": "build it and react there are libraries react cotton nsj or something like that to build react applications but all your",
    "start": "2534170",
    "end": "2541220"
  },
  {
    "text": "codes actually in Java in Kotlin and at compile time it gets compiled down to JavaScript so you never actually have to",
    "start": "2541220",
    "end": "2547700"
  },
  {
    "text": "write any JavaScript which is lovely so so it'll target in JavaScript hopefully",
    "start": "2547700",
    "end": "2556609"
  },
  {
    "text": "if you've heard of Colin you know that like Android developers love Caitlyn it's not like an official language on Google so that one should be no surprise",
    "start": "2556609",
    "end": "2563089"
  },
  {
    "text": "but what you might find interesting is you can actually write iOS apps in Kaplan",
    "start": "2563089",
    "end": "2568490"
  },
  {
    "text": "because Caitlyn supports compiling down to LLVM so you can write native code to",
    "start": "2568490",
    "end": "2573829"
  },
  {
    "text": "run on your desktop or on your iOS device or your Raspberry Pi wherever it",
    "start": "2573829",
    "end": "2579020"
  },
  {
    "text": "is you might want to run it you can come out on the native code so this particular project and we'll just go through the code because I want to blast",
    "start": "2579020",
    "end": "2585349"
  },
  {
    "text": "through this and have time for some questions we'll look at how that's set up so you can write a multi-platform project in Kotlin where everything is",
    "start": "2585349",
    "end": "2593540"
  },
  {
    "text": "separated up into modules right now you have to use Gradle because it's experimental and they've only done it with the Gradle system they haven't",
    "start": "2593540",
    "end": "2599540"
  },
  {
    "text": "fixed maven yet but you have certain types of modules and you may or may not",
    "start": "2599540",
    "end": "2606410"
  },
  {
    "text": "be able to see those side bars it's the worst part of prison thing I think but",
    "start": "2606410",
    "end": "2613390"
  },
  {
    "text": "now presentation mode gets rid of the the many things so what you can't",
    "start": "2613390",
    "end": "2618710"
  },
  {
    "text": "probably read back here is there's an ad your Android module there's a back-end module there's a common common j/s",
    "start": "2618710",
    "end": "2625760"
  },
  {
    "text": "common JVM iOS and web these are different modules now this at the",
    "start": "2625760",
    "end": "2630920"
  },
  {
    "text": "applications actually the conference application for a Kotlin conf from last fall and this was used I",
    "start": "2630920",
    "end": "2637640"
  },
  {
    "text": "actually used it as a user and as an attendee their entire conference was run",
    "start": "2637640",
    "end": "2642920"
  },
  {
    "text": "by Kotlin code life whether it's Android or iOS or whatever all of it was this is",
    "start": "2642920",
    "end": "2647930"
  },
  {
    "text": "this code actually works even though it doesn't on my laptop for a number reasons but we'll look and see why so",
    "start": "2647930",
    "end": "2653770"
  },
  {
    "text": "you have a common module and what it lets you do you can come down into here",
    "start": "2653770",
    "end": "2661220"
  },
  {
    "text": "there's a date class you can see the the key word up there on date called expect",
    "start": "2661220",
    "end": "2668500"
  },
  {
    "text": "it's sort of like defining an interface or if if anyone else is old enough to remember CORBA with IDL you know yeah I",
    "start": "2668500",
    "end": "2676490"
  },
  {
    "text": "heard some chuckles some groans it felt a little bit like this so what this says",
    "start": "2676490",
    "end": "2681920"
  },
  {
    "text": "is in this common module we're defining a common API and somewhere on the target platform you can expect a class called",
    "start": "2681920",
    "end": "2687829"
  },
  {
    "text": "date but we're not going to tell you what it is just look for it you'll you'll know it when you see it right",
    "start": "2687829",
    "end": "2693079"
  },
  {
    "text": "that's what that says and then we define or say we JetBrains defined there's an",
    "start": "2693079",
    "end": "2700160"
  },
  {
    "text": "operator you can define your operators sort of in Kotlin but there's a couple of extension functions on date",
    "start": "2700160",
    "end": "2705560"
  },
  {
    "text": "to make it a little bit easier but this is in the common module so it's sort of",
    "start": "2705560",
    "end": "2710810"
  },
  {
    "text": "like defining an interface but it's like cross-platform in and ever since of the word so if you go down and look at I",
    "start": "2710810",
    "end": "2716900"
  },
  {
    "text": "don't know why I opened that one date format it's a weird one if you go down to look at common JVM it's in a file",
    "start": "2716900",
    "end": "2724550"
  },
  {
    "text": "called JV and date there it is here you",
    "start": "2724550",
    "end": "2731270"
  },
  {
    "text": "can see there's a class called date but instead it uses actual now this tells the compiler the the",
    "start": "2731270",
    "end": "2738020"
  },
  {
    "text": "build system I should say that this is an actual implementation for that date that you were told to expect for the JVM",
    "start": "2738020",
    "end": "2744050"
  },
  {
    "text": "platform and the interesting thing about it is you can see actual actual actual",
    "start": "2744050",
    "end": "2749270"
  },
  {
    "text": "because it had we had told it over here here's all these functions that you should see on the class actual you can",
    "start": "2749270",
    "end": "2757880"
  },
  {
    "text": "think of actual like override in in that sense it serves the same purpose and but",
    "start": "2757880",
    "end": "2764150"
  },
  {
    "text": "if we were to rename this now you can see it's not only white now but it",
    "start": "2764150",
    "end": "2770600"
  },
  {
    "text": "houses the red squiggly because we were told to expect an actual function called date or get date and it's not here and",
    "start": "2770600",
    "end": "2776950"
  },
  {
    "text": "now you're telling me this is the actual get date too but I wasn't told to expect it so the ID can help guide you that",
    "start": "2776950",
    "end": "2783940"
  },
  {
    "text": "this is what's there so I would run it",
    "start": "2783940",
    "end": "2789230"
  },
  {
    "text": "for you but I got the Android app working but so just for comparison if",
    "start": "2789230",
    "end": "2795500"
  },
  {
    "text": "you go into the this is the JavaScript module this is the JavaScript date actual external date and it I'm not a",
    "start": "2795500",
    "end": "2804830"
  },
  {
    "text": "node guy so there's a lot of guesswork in this part for me this is telling it to use the JavaScript date that's built",
    "start": "2804830",
    "end": "2811670"
  },
  {
    "text": "in so there's no actual implementation here but all this is one big codebase",
    "start": "2811670",
    "end": "2816860"
  },
  {
    "text": "that they used to run everything and the nice thing about it is in the common in",
    "start": "2816860",
    "end": "2823040"
  },
  {
    "text": "the common directory they have all their business logic classes these are data",
    "start": "2823040",
    "end": "2828650"
  },
  {
    "text": "classes if you've used Scala it's very similar to I always read that skeleton for it now",
    "start": "2828650",
    "end": "2837330"
  },
  {
    "text": "type type classes case classes that's the word summer scholar case skating",
    "start": "2837330",
    "end": "2843430"
  },
  {
    "text": "case classes this basically says it's a data class you get a two string and equals and hashcode for free and if",
    "start": "2843430",
    "end": "2850480"
  },
  {
    "text": "that's all you care about then why write that stuff right just slap data on it the compiler will build it for you",
    "start": "2850480",
    "end": "2855550"
  },
  {
    "text": "you're done and then as you add properties or remove them those get updated for you you don't have to manage all that anyways but the nice",
    "start": "2855550",
    "end": "2862210"
  },
  {
    "text": "thing is you can build all your common data models your business logic as much",
    "start": "2862210",
    "end": "2867400"
  },
  {
    "text": "as you can in these common modules and then on on the target platforms whether it's the Android or the iOS you can just",
    "start": "2867400",
    "end": "2874180"
  },
  {
    "text": "worry about you know your view models and things like that so this is",
    "start": "2874180",
    "end": "2879280"
  },
  {
    "text": "something I'm gonna once I get past some of this conference stuff I want to start building an app on top of this because",
    "start": "2879280",
    "end": "2884830"
  },
  {
    "text": "this is really interesting because I want to write apps who doesn't right but",
    "start": "2884830",
    "end": "2890050"
  },
  {
    "text": "I don't want to learn objective-c maybe I'll learn Swift but with this you don't have to you can write it all in",
    "start": "2890050",
    "end": "2895660"
  },
  {
    "text": "one language right it's the promise of node right you can write JavaScript on the front end in the back end except I",
    "start": "2895660",
    "end": "2901480"
  },
  {
    "text": "hate JavaScript so I'm gonna use common so anyways it's now 343 I don't see",
    "start": "2901480",
    "end": "2907360"
  },
  {
    "text": "anyone wagging a finger at me two minutes all right I know that was a whirlwind and I'm sorry a little bit",
    "start": "2907360",
    "end": "2914320"
  },
  {
    "text": "about it but there's so much to say are there any questions I can answer yes",
    "start": "2914320",
    "end": "2920430"
  },
  {
    "text": "this is yeah this is from JetBrains so the question was about viability of the ecosystem because groobie is slowly",
    "start": "2932970",
    "end": "2939240"
  },
  {
    "text": "dying I mean even Gradle is moving you're wrong I mean even even Gradle has",
    "start": "2939240",
    "end": "2946230"
  },
  {
    "text": "like a Kotlin dialect now for their build file you know and Gradle is how why most people use groovy right you",
    "start": "2946230",
    "end": "2953880"
  },
  {
    "text": "know I'm not I'm not a wizard so I can't predict the future but it to me it seems",
    "start": "2953880",
    "end": "2959460"
  },
  {
    "text": "pretty promising and that it's gonna be around it's an officially supported language on the Android platform so there's all",
    "start": "2959460",
    "end": "2965400"
  },
  {
    "text": "sorts of stuff going on there both inside and out Google if you're into data science there's a lot of work in",
    "start": "2965400",
    "end": "2971340"
  },
  {
    "text": "the data science room about building up some common libraries based on this when",
    "start": "2971340",
    "end": "2976440"
  },
  {
    "text": "I first started using Kotlin it was a pretty small community because it was still a beta language and what kind of",
    "start": "2976440",
    "end": "2981720"
  },
  {
    "text": "idiot writes code on a beta language like I knew a lot of the people like",
    "start": "2981720",
    "end": "2987030"
  },
  {
    "text": "someone would say I just released it libraries like I know that guy I know that woman but now I'm happy to say I",
    "start": "2987030",
    "end": "2992760"
  },
  {
    "text": "went to Kotlin conf last year I didn't know anybody you know there's all these speakers I'd never heard of before which",
    "start": "2992760",
    "end": "2998220"
  },
  {
    "text": "was awesome you know because it says the the interest is wide and varied and some",
    "start": "2998220",
    "end": "3003530"
  },
  {
    "text": "very surprising places so I think viability this is a good bet JetBrains",
    "start": "3003530",
    "end": "3009470"
  },
  {
    "text": "is building more and more of their stuff on top of it so unless they have a change of heart and decide and maybe",
    "start": "3009470",
    "end": "3014570"
  },
  {
    "text": "groovy was good enough after all I think it's gonna be run for a long long time I hope there was a couple of other",
    "start": "3014570",
    "end": "3022070"
  },
  {
    "text": "questions I saw hands one second",
    "start": "3022070",
    "end": "3026290"
  },
  {
    "text": "it's okay so there's two questions one",
    "start": "3035460",
    "end": "3044260"
  },
  {
    "text": "about debugging on the JVM and one about debugging in chrome essentially so to",
    "start": "3044260",
    "end": "3050920"
  },
  {
    "text": "the first question it's seamless debugging on the JVM it just finals on the bytecode it's really nice I once",
    "start": "3050920",
    "end": "3057550"
  },
  {
    "text": "used a project that was written in closure and there was a bug it was in my code of course because libraries are",
    "start": "3057550",
    "end": "3064089"
  },
  {
    "text": "bulletproof but I have like Java stack trace and then I've hit like the closure bits and then there was like um there's",
    "start": "3064089",
    "end": "3070119"
  },
  {
    "text": "like a glitch in the matrix you know every one I break and then more stacktrace you know I'm like what happened in that",
    "start": "3070119",
    "end": "3076420"
  },
  {
    "text": "part you know I didn't know you don't have that with Kotlin it's all it's all",
    "start": "3076420",
    "end": "3081880"
  },
  {
    "text": "very clean I mean it's written by tools company right so when you're looking at stack traces it looks like a Java stack",
    "start": "3081880",
    "end": "3088089"
  },
  {
    "text": "trace you know that points to a line of code it's very readable so from in my",
    "start": "3088089",
    "end": "3093490"
  },
  {
    "text": "experience has been very seamless now iíve had Java and Kotlin projects I haven't had Scala and groovy all in the",
    "start": "3093490",
    "end": "3099700"
  },
  {
    "text": "mix so that your mileage may vary but I can't imagine any oddness from that would become would come from Scala or",
    "start": "3099700",
    "end": "3106420"
  },
  {
    "text": "groovy on the browser side you can debug it there the compiler generates source",
    "start": "3106420",
    "end": "3111579"
  },
  {
    "text": "maps so your JavaScript line code has links back into where it came from out of the Kotlin code so as you're",
    "start": "3111579",
    "end": "3117849"
  },
  {
    "text": "debugging you can see in your browser like this is a bug and then you can actually attach to a chrome debugger out",
    "start": "3117849",
    "end": "3123280"
  },
  {
    "text": "of idea which is sort of awesome and it can link back to your Kotlin code so you can kind of round-trip it rather",
    "start": "3123280",
    "end": "3128859"
  },
  {
    "text": "nicely",
    "start": "3128859",
    "end": "3131099"
  },
  {
    "text": "I've yet to run into a Java API that I cannot use from Carmen I know the the",
    "start": "3153460",
    "end": "3159190"
  },
  {
    "text": "pivotal team is doing a big push on spring boot in Kotlin I have a couple friends who literally go all around the",
    "start": "3159190",
    "end": "3165190"
  },
  {
    "text": "world talking about booty-ful Kotlin so if you like spring and you want to play",
    "start": "3165190",
    "end": "3170470"
  },
  {
    "text": "with Kotlin seamless oh nice all right",
    "start": "3170470",
    "end": "3177520"
  },
  {
    "text": "one last question it's a built on top of",
    "start": "3177520",
    "end": "3186819"
  },
  {
    "text": "the fork/join fork/join pool yeah as far",
    "start": "3186819",
    "end": "3195160"
  },
  {
    "text": "as I know I just started digging into it yesterday and the weeds get pretty thick but it's definitely for drawing pool",
    "start": "3195160",
    "end": "3201460"
  },
  {
    "text": "stuff in there they may pull stuff in from the side but I've never seen any quasar library come into the mix so okay",
    "start": "3201460",
    "end": "3209880"
  },
  {
    "text": "real quickly in case anyone wants them there are come back to me and there are",
    "start": "3209880",
    "end": "3220329"
  },
  {
    "text": "some resources patent link or --g there's a slack channel there's an IRC",
    "start": "3220329",
    "end": "3227140"
  },
  {
    "text": "channel if you're into that on freenode there's try that comment link where you",
    "start": "3227140",
    "end": "3232540"
  },
  {
    "text": "can actually type you can it's like a mini editor you can type in Kotlin code in the browser and run it and see what happens and then if you're new",
    "start": "3232540",
    "end": "3239799"
  },
  {
    "text": "york-based there's a meet-up we meet like every six weeks and we'd love to",
    "start": "3239799",
    "end": "3245079"
  },
  {
    "text": "see it so thank you [Applause]",
    "start": "3245079",
    "end": "3251239"
  }
]