[
  {
    "start": "0",
    "end": "193000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "11140"
  },
  {
    "text": "thank you can everyone hear me if I speak I'll keep talking until someone tells me otherwise okay",
    "start": "14440",
    "end": "20640"
  },
  {
    "text": "great uh",
    "start": "20640",
    "end": "25640"
  },
  {
    "text": "that okay so this is uh talk about Eddie um so the basic idea is that we are sick",
    "start": "26920",
    "end": "34399"
  },
  {
    "text": "of programming in sort of pedantic computer languages so you have this wonderful idea that you've dreamed up um",
    "start": "34399",
    "end": "41719"
  },
  {
    "text": "it's entirely on you to translate that idea into a language and the language is",
    "start": "41719",
    "end": "46800"
  },
  {
    "text": "designed pretty much for the computer um and then while you do that the computer sort of yells at you with error messages",
    "start": "46800",
    "end": "53160"
  },
  {
    "text": "and and bugs and all sorts of things so it's just it's it's not very helpful um so the problem here is that the input we",
    "start": "53160",
    "end": "59640"
  },
  {
    "text": "use sure go ahead so the the question was when is an error me is not helpful",
    "start": "59640",
    "end": "66159"
  },
  {
    "text": "and the best answer is undefined is not a function um another answer is syntax",
    "start": "66159",
    "end": "72240"
  },
  {
    "text": "error which is getting a little less common but still still occasionally cures um so the problem here is precise",
    "start": "72240",
    "end": "79280"
  },
  {
    "text": "input so we as humans are talking directly to a language that's been",
    "start": "79280",
    "end": "85280"
  },
  {
    "text": "designed for a certain kind of behavior so computer so it's it's great for a compiler it behaves deterministically",
    "start": "85280",
    "end": "92240"
  },
  {
    "text": "all the time if you run it it'll do the same thing barrowing asynchron and such it's good for debugging because again",
    "start": "92240",
    "end": "97960"
  },
  {
    "text": "it's repeatable and you can sort of understand its exact Behavior but it's not so good as an input mechanism so as",
    "start": "97960",
    "end": "103880"
  },
  {
    "text": "we're as you're trying to talk convey your IDs into a computer um we want the",
    "start": "103880",
    "end": "109079"
  },
  {
    "text": "computer to help with that translation process to go from sort of if there an obvious fix the computer has just figure",
    "start": "109079",
    "end": "115040"
  },
  {
    "text": "it out and give you the code and because it's interactive uh you then still get the benit of these sort of of this this",
    "start": "115040",
    "end": "121759"
  },
  {
    "text": "final deterministic syntax so again we want to make the computer help with the fuzzy part of",
    "start": "121759",
    "end": "127160"
  },
  {
    "text": "programming so accept broken input so sort of as you type typos missing syntax",
    "start": "127160",
    "end": "132800"
  },
  {
    "text": "all the skunk uh if the if the computer can understand what you mean just fix it",
    "start": "132800",
    "end": "138280"
  },
  {
    "text": "right away if it's less certain if there are few possibilities ask because we're doing this at s of the IDE time um so we",
    "start": "138280",
    "end": "145959"
  },
  {
    "text": "have the chance of asking the user for sort of for help and because we're again in an IDE be fast enough that we can run",
    "start": "145959",
    "end": "152519"
  },
  {
    "text": "it as user types so I need less than a second so the simplest version of this",
    "start": "152519",
    "end": "158879"
  },
  {
    "text": "idea that we sort of man it to boil it down to is uh fix one line of java at a",
    "start": "158879",
    "end": "164280"
  },
  {
    "text": "time so originally we had this grand plan of sort of you have this sort of fuzzy pseudo code on the on the left and",
    "start": "164280",
    "end": "170360"
  },
  {
    "text": "uh perfect Java on the right and it would sort of you could edit either side and be great and that's just really hard",
    "start": "170360",
    "end": "175519"
  },
  {
    "text": "to implement it sort of breaks programmer workflow what would you check in um so the simplest thing we've done",
    "start": "175519",
    "end": "181720"
  },
  {
    "text": "is just uh if you write one line of broken code and the rest it's inside a",
    "start": "181720",
    "end": "186879"
  },
  {
    "text": "normal Java file we'll replace it with the right one instead of fixing fixing bugs in that one line based on",
    "start": "186879",
    "end": "193640"
  },
  {
    "start": "193000",
    "end": "653000"
  },
  {
    "text": "context Martin will give a demo of what I mean all right so um so yeah so we",
    "start": "193640",
    "end": "199760"
  },
  {
    "text": "built this thing um and I'm just G to show",
    "start": "199760",
    "end": "206760"
  },
  {
    "text": "you what it looks like so I built a little like uh scaffold here so I have",
    "start": "206879",
    "end": "212239"
  },
  {
    "text": "something to work with um Eddie is a is a plugin for intellig his current",
    "start": "212239",
    "end": "217680"
  },
  {
    "text": "instanciation um and we haven't we haven't spent time on building for eclipse and you know you will um so",
    "start": "217680",
    "end": "224640"
  },
  {
    "text": "everybody has to use intellig which you know some may like and some don't but that's okay so Eddie runs in here and",
    "start": "224640",
    "end": "230879"
  },
  {
    "text": "it's basically this little hint that pops up so if I say for example um you",
    "start": "230879",
    "end": "236000"
  },
  {
    "text": "see there is a string in here and then there's also this this in parameter so",
    "start": "236000",
    "end": "241040"
  },
  {
    "text": "if I say n equals test it'll tell me oh you know you actually probably meant to",
    "start": "241040",
    "end": "247200"
  },
  {
    "text": "write this. n you didn't mean to to assign this this string to to an integer",
    "start": "247200",
    "end": "253239"
  },
  {
    "text": "um and that's kind of the simplest version of this where it's obvious what I meant in a way so you know I could",
    "start": "253239",
    "end": "260959"
  },
  {
    "text": "have so intellig would have you know intelligent does actually you know just",
    "start": "260959",
    "end": "266240"
  },
  {
    "text": "underscore that line red and just tell you oh this something wrong and it tells you oh incompatible types not actually",
    "start": "266240",
    "end": "273039"
  },
  {
    "text": "tell me what I what I meant to write it just tells me what the error is and then I have to have to guess so Eddie instead",
    "start": "273039",
    "end": "279800"
  },
  {
    "text": "will just fill in the right thing if I if I accept the suggestion sometimes it's not sure what to do and then it'll do something else it'll it'll give me",
    "start": "279800",
    "end": "286880"
  },
  {
    "text": "several options so we'll see that in a second and of course um there there are",
    "start": "286880",
    "end": "293280"
  },
  {
    "text": "cases where you know this is this gets more complicated so for example I could",
    "start": "293280",
    "end": "299120"
  },
  {
    "text": "say um list is array",
    "start": "299120",
    "end": "304320"
  },
  {
    "text": "list Eddie um and then yeah I you know I just",
    "start": "304320",
    "end": "312360"
  },
  {
    "text": "can save myself some time uh typing all that stuff out twice because that's what Java likes to do like likes to have very",
    "start": "312360",
    "end": "319840"
  },
  {
    "text": "specific and very like kind of plain language so to speak and you have to specify every type as often as it occurs",
    "start": "319840",
    "end": "327199"
  },
  {
    "text": "but um you know it's not necessary to understand what I mean like everybody every programmer will understand what I mean here um so and here it's not",
    "start": "327199",
    "end": "334800"
  },
  {
    "text": "entirely sure what I meant you know I I completely omitted the the parents in the end so I could have wanted to tell",
    "start": "334800",
    "end": "340639"
  },
  {
    "text": "it like oh you know look there's like this integer round uh so maybe you wanted a specific",
    "start": "340639",
    "end": "346680"
  },
  {
    "text": "size and then it's sometimes obviously yes I can see you're like you're amused",
    "start": "346680",
    "end": "351759"
  },
  {
    "text": "um of course you know some things don't make a lot of sense like yeah um and",
    "start": "351759",
    "end": "356840"
  },
  {
    "text": "we're working on that so this is it's it's set up to be a learning system and it hasn't learned a lot yet so uh it",
    "start": "356840",
    "end": "363120"
  },
  {
    "text": "will still come up with these things and you see more of them fortunately for us that's lower probability so um it it",
    "start": "363120",
    "end": "370680"
  },
  {
    "text": "doesn't it doesn't always make mistakes but sometimes it'll make mistakes and that's okay the thing is that in the end",
    "start": "370680",
    "end": "375919"
  },
  {
    "text": "what you end up with is Java so you know in the worst case you've lost nothing in the best case you've saved yourself from",
    "start": "375919",
    "end": "382000"
  },
  {
    "text": "time but in the worst case you know it suggested something unreasonable you're like oh well that wasn't what I meant",
    "start": "382000",
    "end": "387319"
  },
  {
    "text": "but that's okay okay and then I can obviously do um you know we did away",
    "start": "387319",
    "end": "392800"
  },
  {
    "text": "with most of the or we did away with with the need for most of the syntax so",
    "start": "392800",
    "end": "398400"
  },
  {
    "text": "if I do um something like this it'll be like oh yeah you know print line there's only",
    "start": "398400",
    "end": "405560"
  },
  {
    "text": "so many things you can mean um and this is the one that you probably meant and again you know it could be out or eror",
    "start": "405560",
    "end": "412919"
  },
  {
    "text": "or it could be this that probably nobody ever uses this and um and this probably",
    "start": "412919",
    "end": "418360"
  },
  {
    "text": "not even like com. Sun deploy really I mean so these are things that that are",
    "start": "418360",
    "end": "424400"
  },
  {
    "text": "still they're still there they're in my environment they're possible but they're low probability so um you could set",
    "start": "424400",
    "end": "431039"
  },
  {
    "text": "these different and you probably wouldn't see them but um yeah so um and this whole like trying to",
    "start": "431039",
    "end": "440360"
  },
  {
    "text": "make these things more um sort of do away with the syntax requirements that",
    "start": "440360",
    "end": "446520"
  },
  {
    "text": "are really well sometimes they're in the way and sometimes they're just unnecessary uh you can take that you",
    "start": "446520",
    "end": "453120"
  },
  {
    "text": "know to constructs obviously um and you can you",
    "start": "453120",
    "end": "461599"
  },
  {
    "text": "know type sort of pseudo code and it'll be okay let me add this",
    "start": "461639",
    "end": "470280"
  },
  {
    "text": "um actually let me write contain show you something else um",
    "start": "473319",
    "end": "481440"
  },
  {
    "text": "um we s we kind of implemented this mix fix infix notation for that kind of a",
    "start": "481879",
    "end": "489759"
  },
  {
    "text": "Scala thing that carried over to Java well like half of this written Scala so we we ended up actually mixing things up",
    "start": "489759",
    "end": "496319"
  },
  {
    "text": "so we're like okay well Ed should understand this so here it is um and",
    "start": "496319",
    "end": "501800"
  },
  {
    "text": "most of this grammar as it is right now is in a way crowdsourced by by as like",
    "start": "501800",
    "end": "507400"
  },
  {
    "text": "noticing you really should understand this why why don't understand this so um one of the main advantages apart",
    "start": "507400",
    "end": "513039"
  },
  {
    "text": "from syntax is Discovery so imagine you work in a fairly large system like like this",
    "start": "513039",
    "end": "519399"
  },
  {
    "text": "one this like whole file is full of code and um so you get confused and you don't",
    "start": "519399",
    "end": "525519"
  },
  {
    "text": "really know how to use every little function in every library that you have and but typically you know what you want",
    "start": "525519",
    "end": "530880"
  },
  {
    "text": "to do and typically functions are called in a way that are that are memorable so",
    "start": "530880",
    "end": "536160"
  },
  {
    "text": "um what you typically forget is okay what's the what's AR argument order which file is this defined in which",
    "start": "536160",
    "end": "542600"
  },
  {
    "text": "package was that in so um so for example I I know like if this is the case I",
    "start": "542600",
    "end": "547800"
  },
  {
    "text": "probably want to log uh what and it's a",
    "start": "547800",
    "end": "553360"
  },
  {
    "text": "warning and then it'll tell me oh you know you know there's some log things",
    "start": "553360",
    "end": "558720"
  },
  {
    "text": "and in particular you know this is the one I want and it it figured out okay first of",
    "start": "558720",
    "end": "564600"
  },
  {
    "text": "all you know okay so it's it's in utility it says class utility I didn't know if was util or utility whatever um",
    "start": "564600",
    "end": "571360"
  },
  {
    "text": "so this filled it in for me I had to actually give it this logger object that's a static thing that I had around",
    "start": "571360",
    "end": "577040"
  },
  {
    "text": "that's great um it's not actually Warr it's like level. War you know Java always makes you write the class name um",
    "start": "577040",
    "end": "584760"
  },
  {
    "text": "unless you statically imported which but you know intell doesn't go as far as to tell you these kind of things and then I",
    "start": "584760",
    "end": "590560"
  },
  {
    "text": "messed up the order of the arguments like it's a completely but it's in reality once I wrote log and then some",
    "start": "590560",
    "end": "596800"
  },
  {
    "text": "string and maybe so the log level it was pretty clear what I wanted to say like",
    "start": "596800",
    "end": "602120"
  },
  {
    "text": "no programmer would have said like oh I completely don't understand what you mean um most programmers probably would",
    "start": "602120",
    "end": "609440"
  },
  {
    "text": "have known what I said so we believe that you know system like Ed should do the same thing and it should just",
    "start": "609440",
    "end": "615760"
  },
  {
    "text": "understand you if it can and yeah so that that's what it that's what it looks",
    "start": "615760",
    "end": "621360"
  },
  {
    "text": "like looks like and um we can just you",
    "start": "621360",
    "end": "626880"
  },
  {
    "text": "know it it tries to be a little more clever about what it what it understands what it doesn't and it uh will will help",
    "start": "626880",
    "end": "633560"
  },
  {
    "text": "people um in the end be more productive and kind of can so they can rely on the computer to actually fill in stuff that",
    "start": "633560",
    "end": "640839"
  },
  {
    "text": "they don't remember or don't want to bother with you want to yeah go ahead I have two questions right uh first one is",
    "start": "640839",
    "end": "649880"
  },
  {
    "text": "that as we all know Java is another Val more so that's a great question so the",
    "start": "649880",
    "end": "655839"
  },
  {
    "start": "653000",
    "end": "1005000"
  },
  {
    "text": "question is and remember your second question um so the question is how hard is it to",
    "start": "655839",
    "end": "661959"
  },
  {
    "text": "teach uh Eddie about not only the basic system libraries but all of the libraries out there which is one of the",
    "start": "661959",
    "end": "667440"
  },
  {
    "text": "main main advantages of course of the Java ecosystem which is really large so the answer is uh Eddie as it is right",
    "start": "667440",
    "end": "673760"
  },
  {
    "text": "now um knows about all of the libraries that are it it it has two levels of",
    "start": "673760",
    "end": "680320"
  },
  {
    "text": "knowing about libraries one one it knows all the symbols that are in the project",
    "start": "680320",
    "end": "685680"
  },
  {
    "text": "so it will not as it as it currently is suggest you like if you write some log and log forj happens to not appear at",
    "start": "685680",
    "end": "693160"
  },
  {
    "text": "all in your in your uh project and and is not installed on your system which is",
    "start": "693160",
    "end": "698200"
  },
  {
    "text": "Ian kind of impossible but you know a different Library some some maybe spring right um it's not even there then Eddie",
    "start": "698200",
    "end": "706120"
  },
  {
    "text": "will not know about it but otherwise it knows about it and it'll it'll suggest it and there's a second level of knowing",
    "start": "706120",
    "end": "711800"
  },
  {
    "text": "about stuff which is to have good priors which symbols are very likely and which symbols are not very likely right so",
    "start": "711800",
    "end": "718320"
  },
  {
    "text": "there's there's two two ways you learn these and at the published version of Eddie is not very far down that road but",
    "start": "718320",
    "end": "725200"
  },
  {
    "text": "hopefully as we get more data that'll get better um there's you can learn this from input",
    "start": "725200",
    "end": "734440"
  },
  {
    "text": "and learning what people accept as the the choice they make so Eddie is",
    "start": "734440",
    "end": "739639"
  },
  {
    "text": "actually collecting data you can opt out of this but if you install it and you let us it'll actually collect what your",
    "start": "739639",
    "end": "745399"
  },
  {
    "text": "choices you make and we can analyze that and then feed it back and basically adjust the priors to see for example",
    "start": "745399",
    "end": "750959"
  },
  {
    "text": "that one of the priors that's in there is system. error is much less common than system.out so it'll even though",
    "start": "750959",
    "end": "757440"
  },
  {
    "text": "they're perfectly equivalent it'll first suggest system toe out and then System error right and so for these libraries",
    "start": "757440",
    "end": "764639"
  },
  {
    "text": "basically the user frequency is lower so it'll take longer to learn these things and what you can do to make that make",
    "start": "764639",
    "end": "769760"
  },
  {
    "text": "that easier is you can look at open source code and see symbol frequencies there and then feed that back in and we",
    "start": "769760",
    "end": "777279"
  },
  {
    "text": "have started the process but uh it's not none of that is published yet so if you",
    "start": "777279",
    "end": "782600"
  },
  {
    "text": "want to help out go ahead um yeah do you had another",
    "start": "782600",
    "end": "788000"
  },
  {
    "text": "question so so uh the question to repeat uh given that we like the oh yeah so the",
    "start": "788000",
    "end": "795560"
  },
  {
    "text": "question is how do how would we deal with with weaker weaker type languages and and the reason is that this",
    "start": "795560",
    "end": "801240"
  },
  {
    "text": "particular system relies fairly heavily on types uh that's why it's written for Java specifically and um the a is not so",
    "start": "801240",
    "end": "809680"
  },
  {
    "text": "much a problem but but basically our main constraint apart from the priors that you can learn the main constraint",
    "start": "809680",
    "end": "815199"
  },
  {
    "text": "is whatever you spit out has to type check and that's a very strong constraint in Java it's a much less",
    "start": "815199",
    "end": "821199"
  },
  {
    "text": "strong constraint in in say JavaScript so we are working on JavaScript and JavaScript will have like a a very",
    "start": "821199",
    "end": "827839"
  },
  {
    "text": "different kind of back end and we'll talk a little bit about it later so you can see what we do for this and it",
    "start": "827839",
    "end": "833920"
  },
  {
    "text": "relies pretty heavily on types for JavaScript you would do it differently there are approaches to do it in JavaScript they will be a little bit",
    "start": "833920",
    "end": "840360"
  },
  {
    "text": "more fuzzy and sometimes wrong but uh yeah so go",
    "start": "840360",
    "end": "847519"
  },
  {
    "text": "ahead so there there is in the end what we output is standard Java",
    "start": "847680",
    "end": "853759"
  },
  {
    "text": "huh oh sorry uh yes so do do we use the Java standard type system or do we did we build some inference on top of that",
    "start": "853759",
    "end": "860720"
  },
  {
    "text": "uh the answer is what we output is obviously has to be legal Java so uh",
    "start": "860720",
    "end": "866199"
  },
  {
    "text": "however our how yeah our type inference is is somewhat stronger than the one on",
    "start": "866199",
    "end": "873199"
  },
  {
    "text": "of java and but it's a little bit it's a little bit tricky to say that because we",
    "start": "873199",
    "end": "878399"
  },
  {
    "text": "actually don't necessarily assume that what the user typed is correct is what",
    "start": "878399",
    "end": "884480"
  },
  {
    "text": "what the user meant we always have this Pro probalistic process where we say like yeah you type this you know you put",
    "start": "884480",
    "end": "890639"
  },
  {
    "text": "this cast here but you probably didn't mean it because probably you meant something slightly different um so yeah",
    "start": "890639",
    "end": "897959"
  },
  {
    "text": "so um it's a it's a it's a little hard to say like where the inference stops",
    "start": "897959",
    "end": "903519"
  },
  {
    "text": "and where like just Corrections start but yeah it's a little bit stronger than what Java provides okay um okay I'll",
    "start": "903519",
    "end": "910399"
  },
  {
    "text": "I'll switch back to oh I totally you some of you may have seen this but I totally forgot my favorite line I want",
    "start": "910399",
    "end": "916519"
  },
  {
    "text": "to I want to to say this because I like it and again you know it's standard Java so everybody will know this but so let's",
    "start": "916519",
    "end": "922680"
  },
  {
    "text": "say I want to fill this list with stuff and I just have to say it because I I really like so I'm I'm originally a C++",
    "start": "922680",
    "end": "927800"
  },
  {
    "text": "programmer so so I always get really upset by Java's U um parametric method",
    "start": "927800",
    "end": "934880"
  },
  {
    "text": "call like type type parameter in a method call syntax you you'll see what I'm talking",
    "start": "934880",
    "end": "940079"
  },
  {
    "text": "about so let's say I want to add add some stuff to the list um and I want to add there I have",
    "start": "940079",
    "end": "947440"
  },
  {
    "text": "this method here it's it's a it's a it's a um prized method c as",
    "start": "947440",
    "end": "954120"
  },
  {
    "text": "array and um actually",
    "start": "954120",
    "end": "959519"
  },
  {
    "text": "yeah so here you go so this is what I would write as like a C+ obviously that's not legal and what is legal is",
    "start": "959519",
    "end": "967600"
  },
  {
    "text": "um uh this wonderful this wonderful expression here Contin to add all list",
    "start": "967600",
    "end": "973720"
  },
  {
    "text": "and then this dot you have to you have to follow him this and then put your your type parameters there so this is",
    "start": "973720",
    "end": "980440"
  },
  {
    "text": "correct Java which is wonderful I don't have to know this anymore so from now on I I'll just assume that it's C++ and is",
    "start": "980440",
    "end": "986680"
  },
  {
    "text": "right and it'll be fine which I do quite a a bit and then it's annoying because it doesn't actually work but now it",
    "start": "986680",
    "end": "992880"
  },
  {
    "text": "works so it's great thank",
    "start": "992880",
    "end": "996120"
  },
  {
    "text": "you thank you Martin oh we're not done not done that just the",
    "start": "997959",
    "end": "1004639"
  },
  {
    "start": "1005000",
    "end": "1043000"
  },
  {
    "text": "demo um so this is how it works uh to sort of follow up on your uh hypothesis",
    "start": "1005000",
    "end": "1010720"
  },
  {
    "text": "um so we're plugin for intell um it's about half and half schola and Java which really means that all of the logic",
    "start": "1010720",
    "end": "1017040"
  },
  {
    "text": "is in Scola and all of the boiler plate is in Java um it's the implementation is is sort of",
    "start": "1017040",
    "end": "1023560"
  },
  {
    "text": "Mo most of a a normal Java compiler um just the front end part but unlike a",
    "start": "1023560",
    "end": "1028600"
  },
  {
    "text": "normal Java compiler every piece of the compiler can say well it could be this or it could be this this is more likely",
    "start": "1028600",
    "end": "1034959"
  },
  {
    "text": "someone else decide and that sort of that amb will sort of that ambiguity will filter through the rest of the compiler and figure itself",
    "start": "1034959",
    "end": "1042918"
  },
  {
    "text": "out so the algorithm is we read the input um sort of parse it and we parse",
    "start": "1042919",
    "end": "1050200"
  },
  {
    "start": "1043000",
    "end": "1103000"
  },
  {
    "text": "it using a fairly sort of fuzzy flexible grammar so you could have a dozen parses that are possible um so we sort of",
    "start": "1050200",
    "end": "1056600"
  },
  {
    "text": "someone leaves out parentheses um you don't really know how what they meant to write",
    "start": "1056600",
    "end": "1062160"
  },
  {
    "text": "um but we're going to handle that later so we parse it into say a dozen possible possible parses and then for each one we",
    "start": "1062160",
    "end": "1068160"
  },
  {
    "text": "sort of it'll expand generate this tree of what it could mean so if there's a bunch of",
    "start": "1068160",
    "end": "1075159"
  },
  {
    "text": "parts of the of the line like this part could mean X Y and Z this part could mean ABC and we sort of explore that",
    "start": "1075159",
    "end": "1081400"
  },
  {
    "text": "tree using Brute Force search but while we do that we're constantly pruning away bits that aren't valid Java or are",
    "start": "1081400",
    "end": "1087760"
  },
  {
    "text": "unlikely unlikely according to the prior um so if we have two different choices",
    "start": "1087760",
    "end": "1093159"
  },
  {
    "text": "we'll pick the most likely one first and then only go to the less likely one if we have to and that lets us hide the",
    "start": "1093159",
    "end": "1099120"
  },
  {
    "text": "sort of exponential blow up in the search space behind sort of lazy evaluation so luckily parsing one line",
    "start": "1099120",
    "end": "1105640"
  },
  {
    "start": "1103000",
    "end": "1158000"
  },
  {
    "text": "of java is easy so intellig is lovely because it does everything all of the rest so we if you're writing a whole",
    "start": "1105640",
    "end": "1111960"
  },
  {
    "text": "file we let intellig do all of the work for the rest of the file except for the one line you're currently on and that",
    "start": "1111960",
    "end": "1117880"
  },
  {
    "text": "one we can use sort of slow cubic time dynamic programming and then again we",
    "start": "1117880",
    "end": "1122919"
  },
  {
    "text": "use that's important because we want to handle ambiguity so our parser is sort of the Java grammar simplified and",
    "start": "1122919",
    "end": "1130200"
  },
  {
    "text": "extended so you can be a little more LAX so there's several different ways of applying functions you can sort of you",
    "start": "1130200",
    "end": "1136559"
  },
  {
    "text": "can drop new or add it where it shouldn't be and it'll sort of ignore it um lots of choices like that and that",
    "start": "1136559",
    "end": "1145080"
  },
  {
    "text": "gives you sort of this this this large number of sort of possible parses which we'll search through later on and also",
    "start": "1145080",
    "end": "1150480"
  },
  {
    "text": "we can we can sort of add in mismatch parentheses so if you mix those up we'll try to stick them back in for you in the",
    "start": "1150480",
    "end": "1156720"
  },
  {
    "text": "most likely way we think the way we implement this um I think there was a fun talk a couple",
    "start": "1156720",
    "end": "1162960"
  },
  {
    "start": "1158000",
    "end": "1236000"
  },
  {
    "text": "months ago at this meetup on the Twitter people doing sort of the futures monad for how they sort of structure as",
    "start": "1162960",
    "end": "1168799"
  },
  {
    "text": "synchronous compositions or asynchronous uh computation in the jvm from Scola",
    "start": "1168799",
    "end": "1174679"
  },
  {
    "text": "we're also doing the sort of monatic structure where we're sort of using weird control flow so we have we have",
    "start": "1174679",
    "end": "1180960"
  },
  {
    "text": "our whole compiler inside this scored monad which represent sort of this lazy list of Alternatives so it's probably",
    "start": "1180960",
    "end": "1188240"
  },
  {
    "text": "this maybe it could be this then these these options are much less likely and it's it's ordered so that you don't",
    "start": "1188240",
    "end": "1194159"
  },
  {
    "text": "expand the the sort of the taale of unlikely options until you need to",
    "start": "1194159",
    "end": "1199400"
  },
  {
    "text": "these scores are sort of viewed as like zero and one probabilities and when you sort of if you do two things if I if I",
    "start": "1199400",
    "end": "1206320"
  },
  {
    "text": "say a comma B and the score of of a is uh 7 and score of B is go ahead so is",
    "start": "1206320",
    "end": "1213280"
  },
  {
    "text": "the number that was showing to each string was correct so those are those",
    "start": "1213280",
    "end": "1218880"
  },
  {
    "text": "are what you get when you multiply all of the scores together from all of the choices it made um so it Eddie can fix",
    "start": "1218880",
    "end": "1225559"
  },
  {
    "text": "multiple mistakes at the same time but as you do that the score gets lower and lower and will push it sort of below",
    "start": "1225559",
    "end": "1231760"
  },
  {
    "text": "other more likely more likely options so here's an example um so for",
    "start": "1231760",
    "end": "1239240"
  },
  {
    "start": "1236000",
    "end": "1296000"
  },
  {
    "text": "some reason Java and also nearly every other language like Scala and C++ and blah blah blah you can't put parentheses",
    "start": "1239240",
    "end": "1246200"
  },
  {
    "text": "in types um which is confusing because they can go everywhere else so we allow that but because it's not valid Java we",
    "start": "1246200",
    "end": "1253760"
  },
  {
    "text": "assume that it's less likely you're going to do that so if we see a some",
    "start": "1253760",
    "end": "1258880"
  },
  {
    "text": "parentheses around a type we'll say well that's fine but we're gonna we're going to reduce the score by a factor of 0",
    "start": "1258880",
    "end": "1264840"
  },
  {
    "text": "eight um and we'll because this is lazy we'll only evaluate it as a type if that",
    "start": "1264840",
    "end": "1271120"
  },
  {
    "text": "point8 isn't enough to make it unlikely so if someone else says oh I can beat 08 I can beat 0. n we'll completely ignore",
    "start": "1271120",
    "end": "1277600"
  },
  {
    "text": "this sort of type expansion and then sort of save save effort and again what what this lets us",
    "start": "1277600",
    "end": "1284559"
  },
  {
    "text": "do is sort of keep flexibility so we we do allow parentheses in but we don't allow them as much as we",
    "start": "1284559",
    "end": "1291799"
  },
  {
    "text": "allow something else we have this sort of fuzzy notion of what things are legal so because we have a monad there's",
    "start": "1291799",
    "end": "1299120"
  },
  {
    "start": "1296000",
    "end": "1339000"
  },
  {
    "text": "these various ways of combining different sort of compiler computations together so if you have one value that",
    "start": "1299120",
    "end": "1305400"
  },
  {
    "text": "you know that's um sort of a Singleton list if you have uh one computation say",
    "start": "1305400",
    "end": "1312000"
  },
  {
    "text": "a list of function arguments and if you once you've computed that you can compute a function call then that's like",
    "start": "1312000",
    "end": "1318200"
  },
  {
    "text": "flat map um if you use sort of monatic structure that you've seen this for Scola if you have two different",
    "start": "1318200",
    "end": "1324120"
  },
  {
    "text": "computations like you you say F of f ofx comma Y and there's sort of two different lists for X and Y those can",
    "start": "1324120",
    "end": "1330679"
  },
  {
    "text": "combine as sort of a cartisian product um and again this biased one is just a simple case of one thing but less",
    "start": "1330679",
    "end": "1339520"
  },
  {
    "text": "likely so here's an example to make this a little more conrete so say someone types print line X so this is almost",
    "start": "1339520",
    "end": "1346679"
  },
  {
    "text": "valid Java um it's almost the the thing on the left which is declaring a type a",
    "start": "1346679",
    "end": "1352320"
  },
  {
    "text": "variable of type of type print line um with name X but no one would think it",
    "start": "1352320",
    "end": "1358080"
  },
  {
    "text": "means that actually so but because it this this looks closer to Java we we'll",
    "start": "1358080",
    "end": "1363640"
  },
  {
    "text": "first do the thing on the left so we go over here and we say well let's see if print print line is a type so we look it",
    "start": "1363640",
    "end": "1370320"
  },
  {
    "text": "up in our environment and um so we first check if it's in scope no um we check if",
    "start": "1370320",
    "end": "1376200"
  },
  {
    "text": "it's sort of a variable that's um near nearby but not quite in scope no print line is not a type um and then maybe",
    "start": "1376200",
    "end": "1383840"
  },
  {
    "text": "it's a typo maybe it's some like it's print line with a capital P but because this bias has reduced the score to 0.",
    "start": "1383840",
    "end": "1390120"
  },
  {
    "text": "five we're going to stop there and go over to the other side where maybe print line is a function call um so we've left",
    "start": "1390120",
    "end": "1396960"
  },
  {
    "text": "out the parentheses so we'll bias that by 08 which is better than 0.5 so we'll do that next so is print line aable well",
    "start": "1396960",
    "end": "1404279"
  },
  {
    "text": "there's a couple things it could be uh it's not in scope um could be this weird",
    "start": "1404279",
    "end": "1409360"
  },
  {
    "text": "static function which is possible but unlikely because no one wants to call",
    "start": "1409360",
    "end": "1415240"
  },
  {
    "text": "really long static functions which aren't imported um so maybe it's a non-static thing um so we do this sort",
    "start": "1415240",
    "end": "1421360"
  },
  {
    "text": "of a flat map operation to find variables which might be objects that you can call Print line on and sure",
    "start": "1421360",
    "end": "1427679"
  },
  {
    "text": "enough we find one um and it's really great the prior says there's no penalty of using system that out good",
    "start": "1427679",
    "end": "1434760"
  },
  {
    "text": "choice so the result is we've sort of interpreted this line of code which looks more like a variable declaration",
    "start": "1434760",
    "end": "1440840"
  },
  {
    "text": "the Java into the thing that every programmer would assume it it means it's obviously called to print",
    "start": "1440840",
    "end": "1448559"
  },
  {
    "text": "X so the fun thing about this is that then if you've sort of set up this monad and these various ways of handling",
    "start": "1448559",
    "end": "1454159"
  },
  {
    "text": "ambiguity um the optimizations are about knowing what you need to know when and",
    "start": "1454159",
    "end": "1460120"
  },
  {
    "text": "sort of pushing as much laziness as you can so it so the expensive sort of exponential blowup which we have happens",
    "start": "1460120",
    "end": "1467679"
  },
  {
    "text": "later or not at all so for example if you have uh two computations that are totally independent that two separate",
    "start": "1467679",
    "end": "1474320"
  },
  {
    "text": "lists then that's a faster structure than if the second list depends on the first list because then you can do you",
    "start": "1474320",
    "end": "1481600"
  },
  {
    "text": "can evaluate each one independently and then combine them as opposed to doing sort of in in sequential sort of blow up",
    "start": "1481600",
    "end": "1486960"
  },
  {
    "text": "blowup fashion um I'll skip the next option if anyone happens to do hascal",
    "start": "1486960",
    "end": "1492120"
  },
  {
    "text": "this is sort of the same analog as applicative versus monad so sometime sometimes these weaker monad structures",
    "start": "1492120",
    "end": "1497640"
  },
  {
    "text": "give you faster code so the most of the compiler logic",
    "start": "1497640",
    "end": "1505480"
  },
  {
    "start": "1501000",
    "end": "1584000"
  },
  {
    "text": "is written in Scola and Scala is wonderful but it's very slow um so we have to we have to make it",
    "start": "1505480",
    "end": "1512720"
  },
  {
    "text": "faster so this we have this lovely functional sort of uh weird functional programing exraction called the scord",
    "start": "1512720",
    "end": "1519120"
  },
  {
    "text": "monad nearly all of which is written in Java because Java is is imperative it's fast it's really nice for writing sort",
    "start": "1519120",
    "end": "1525640"
  },
  {
    "text": "of bare metal which means jvm cont constructs so we the scor monad is",
    "start": "1525640",
    "end": "1530720"
  },
  {
    "text": "written in sort of Highly optimized Java but it looks functional to the outside so our compiler can behave as if it's",
    "start": "1530720",
    "end": "1536440"
  },
  {
    "text": "working in this sort of P purely functional environment um Scola also",
    "start": "1536440",
    "end": "1541720"
  },
  {
    "text": "loves to allocate memory which is terrible on the gvm um if you do it as fast as sort of are we end up doing so",
    "start": "1541720",
    "end": "1548320"
  },
  {
    "text": "we the the sort of the J the Java imidation of the of the scone ad tries to skip as many allocations as it can",
    "start": "1548320",
    "end": "1555960"
  },
  {
    "text": "and what that amounts to instead of intuitively is is if you start looking inside a computation you want to look as",
    "start": "1555960",
    "end": "1562600"
  },
  {
    "text": "far as you can before moving out to somewhere else because whenever you do a context switch you have to allocate some",
    "start": "1562600",
    "end": "1568399"
  },
  {
    "text": "memory to sort of preserve your state and this is this is sort of runtime strict strictness analysis so",
    "start": "1568399",
    "end": "1575399"
  },
  {
    "text": "knowing how much you can do how much work you know you have to do now before you move on to some other sort of lazy",
    "start": "1575399",
    "end": "1581880"
  },
  {
    "text": "lazy part so more uh see where I Det",
    "start": "1581880",
    "end": "1589200"
  },
  {
    "start": "1584000",
    "end": "1641000"
  },
  {
    "text": "so one of the things that we allow in terms of Errors is every name can be a typo so that includes includes variable",
    "start": "1589200",
    "end": "1596480"
  },
  {
    "text": "names functions types null or int so keywords in Java um all of those we look",
    "start": "1596480",
    "end": "1602360"
  },
  {
    "text": "up in some in this large tree um which with allow which allows errors and we",
    "start": "1602360",
    "end": "1607679"
  },
  {
    "text": "sort of rank those errors based on how far you are away at a distance-wise so this is an example of laziness so we",
    "start": "1607679",
    "end": "1615640"
  },
  {
    "text": "do a first fast computation to find sort of exact exact matches so because those are more likely and they're faster and",
    "start": "1615640",
    "end": "1623440"
  },
  {
    "text": "then if those fail um we reduce the probability to sort of hide this this",
    "start": "1623440",
    "end": "1628640"
  },
  {
    "text": "computation and then look for typos and then which means that we can always look for typos but we'll only",
    "start": "1628640",
    "end": "1634760"
  },
  {
    "text": "start looking for typos if this exact search has",
    "start": "1634760",
    "end": "1639640"
  },
  {
    "start": "1641000",
    "end": "1745000"
  },
  {
    "text": "failed um so the fun thing about monads which is sort of any application of monads is that you can separate some",
    "start": "1641320",
    "end": "1648679"
  },
  {
    "text": "weird kind of sort of control flow logic from your actual application logic so we",
    "start": "1648679",
    "end": "1654440"
  },
  {
    "text": "have a compiler the compiler does a bunch of stuff which looks just like a normal Java compiler front end and you",
    "start": "1654440",
    "end": "1661000"
  },
  {
    "text": "don't want to have to think about the fact that it's sort of jumping willy-nilly around the computation tree searching for different values of these",
    "start": "1661000",
    "end": "1668039"
  },
  {
    "text": "these lazy lists as it's doing the compiler logic so writing um writing the",
    "start": "1668039",
    "end": "1674600"
  },
  {
    "text": "compiler inside this mon ad lets us keep that separate and we can just one part of the code focuses on being a compiler",
    "start": "1674600",
    "end": "1681600"
  },
  {
    "text": "and sort of doing Java type inference and um dealing with the Java semantics",
    "start": "1681600",
    "end": "1687080"
  },
  {
    "text": "and as and so on and the other sort of other part handles this search the problem with this is that uh",
    "start": "1687080",
    "end": "1695880"
  },
  {
    "text": "we writing an interactive tool so it's as user types and the performance of the",
    "start": "1695880",
    "end": "1701760"
  },
  {
    "text": "of the whole tool depends on these scores so you can imagine that if you if",
    "start": "1701760",
    "end": "1707440"
  },
  {
    "text": "you increase one of the scores towards one um it's going to be more likely that",
    "start": "1707440",
    "end": "1713279"
  },
  {
    "text": "that lazy search will expand that part of the tree and then waste a bunch of time in possibly a useless Direction so",
    "start": "1713279",
    "end": "1720320"
  },
  {
    "text": "this this this unfortunate is a somewhat unfortunate balance where we um we have",
    "start": "1720320",
    "end": "1725440"
  },
  {
    "text": "to sort of adjust uh we can only sort of play with these scores so much before we",
    "start": "1725440",
    "end": "1731440"
  },
  {
    "text": "run into performance problems and then have to have to think about those somewhat carefully which is more of an",
    "start": "1731440",
    "end": "1737480"
  },
  {
    "text": "issue going forward right now our our we don't have a lot of sort of learning of these numbers and as we start to learn",
    "start": "1737480",
    "end": "1743440"
  },
  {
    "text": "them that will be more of an issue so Java is a complicated language",
    "start": "1743440",
    "end": "1748799"
  },
  {
    "start": "1745000",
    "end": "1926000"
  },
  {
    "text": "um it's the best language for this probably um but it's still complicated",
    "start": "1748799",
    "end": "1754200"
  },
  {
    "text": "so it has undecidable Type checking for example um sort of generics plus object",
    "start": "1754200",
    "end": "1761320"
  },
  {
    "text": "orientation just like Scola only a little less so we haven't yet handled all of java so we don't we don't handle",
    "start": "1761320",
    "end": "1767799"
  },
  {
    "text": "s of class declarations and field declarations we're focused entirely on statements um extending it to the the",
    "start": "1767799",
    "end": "1775200"
  },
  {
    "text": "fields is not very hard but it's sort of more work um Swit we do handle switch",
    "start": "1775200",
    "end": "1781559"
  },
  {
    "text": "and also inter classes actually yeah sorry no lambdas though this slide is obsolete so we don't handle lambdas yeah",
    "start": "1781559",
    "end": "1788519"
  },
  {
    "text": "but Anonymous classes we do we do yeah we're getting better um question yeah how about one",
    "start": "1788519",
    "end": "1797200"
  },
  {
    "text": "logical line that spans several ID lines like when you're doing",
    "start": "1797200",
    "end": "1802519"
  },
  {
    "text": "something so the question is uh what about one logical line which spans several ID lines this is a great",
    "start": "1802519",
    "end": "1809240"
  },
  {
    "text": "question and we do handle that so the way we currently do it is is only",
    "start": "1809240",
    "end": "1814799"
  },
  {
    "text": "halfway there for the fen reason we rely on intell's tokenizer to sort of eat up",
    "start": "1814799",
    "end": "1821000"
  },
  {
    "text": "a line and then we sort of have some idea of when it stops and this is not",
    "start": "1821000",
    "end": "1826440"
  },
  {
    "text": "always correct so when intell is correct it will we'll we'll soak in the whole line and then process it and we'll treat",
    "start": "1826440",
    "end": "1833080"
  },
  {
    "text": "it as a normal line but intellig is often confused and if you type part part of a line it'll be like oh and you mean",
    "start": "1833080",
    "end": "1839000"
  },
  {
    "text": "these next three lines as well which is not right so we have partial support for",
    "start": "1839000",
    "end": "1844519"
  },
  {
    "text": "that and to to get further we have to be more invasive in terms of like taking over intellig",
    "start": "1844519",
    "end": "1850320"
  },
  {
    "text": "tokenizer in in particular uh the pro the problem mostly occurs if you write mismatch parenthesis because intell",
    "start": "1850320",
    "end": "1857159"
  },
  {
    "text": "considers everything until it kind of gives up or finds a matching parenthesis the same statement so it'll just like",
    "start": "1857159",
    "end": "1864320"
  },
  {
    "text": "expand like until the end of the function most of the time and then we have this garble mess that we like okay",
    "start": "1864320",
    "end": "1870399"
  },
  {
    "text": "whatever I give so that that is the main problem and we kind of have to it's actually it's not a conceptually",
    "start": "1870399",
    "end": "1876159"
  },
  {
    "text": "difficult problem because the correct way to know is usually indentation like you don't want to keep searching if if",
    "start": "1876159",
    "end": "1882399"
  },
  {
    "text": "the user starts to unindent back to the original level so a fairly simple herisa captures that and we have not implemented just",
    "start": "1882399",
    "end": "1888480"
  },
  {
    "text": "yet but I like that question it's bothered us many times so intelligent is",
    "start": "1888480",
    "end": "1894080"
  },
  {
    "text": "a c of a hostile war zone um so all the data structures are imperative it's a",
    "start": "1894080",
    "end": "1899720"
  },
  {
    "text": "bunch of locks and all sorts of plugins and third party stuff competing for these locks it's very easy to create",
    "start": "1899720",
    "end": "1905760"
  },
  {
    "text": "Deadlocks we uh because we're so we want to sort of index the entire project we",
    "start": "1905760",
    "end": "1911320"
  },
  {
    "text": "want to index the whole world so we can search through it dynamically um those those indices have to be kept up to date",
    "start": "1911320",
    "end": "1917159"
  },
  {
    "text": "all the time um and intell doesn't like you storing pointers into which data structures it'll blow up and it's it's",
    "start": "1917159",
    "end": "1924000"
  },
  {
    "text": "the documentation is reasonable but it's limited um but on the other hand we could not have done this without",
    "start": "1924000",
    "end": "1929120"
  },
  {
    "start": "1926000",
    "end": "1956000"
  },
  {
    "text": "intellig so we are using so much of their infrastructure so you we can deal",
    "start": "1929120",
    "end": "1935320"
  },
  {
    "text": "with one line and let intellig do everything else including all of the other projects and the build system and",
    "start": "1935320",
    "end": "1940440"
  },
  {
    "text": "all and on on and on WE rely on intell for parsing and for building indices don't have to write an editor and of",
    "start": "1940440",
    "end": "1946519"
  },
  {
    "text": "course people are already using it so we don't have to convince them to switch editors which we would never be able to",
    "start": "1946519",
    "end": "1952440"
  },
  {
    "text": "do so intellig is great despite these flaws so the next steps are for us are",
    "start": "1952440",
    "end": "1959480"
  },
  {
    "start": "1956000",
    "end": "2052000"
  },
  {
    "text": "understanding the rest of java so non- statements which are pretty easy just more a little bit more grammar work",
    "start": "1959480",
    "end": "1965080"
  },
  {
    "text": "lambdas which are also pretty easy um we have most of the sort of the type inference there to do",
    "start": "1965080",
    "end": "1970960"
  },
  {
    "text": "lambdas the better part the the more intering part is our currently our this",
    "start": "1970960",
    "end": "1976159"
  },
  {
    "text": "this prior for which things are more less likely is handwritten By Us by Martin and I and that's not the right",
    "start": "1976159",
    "end": "1982120"
  },
  {
    "text": "thing to do the right thing to do is to train this this these numbers from all of the open source code and then other",
    "start": "1982120",
    "end": "1988559"
  },
  {
    "text": "code that people have written um in particular because that gives you what you were saying it gives you not only a",
    "start": "1988559",
    "end": "1995279"
  },
  {
    "text": "search through through open source through the these big Frameworks but also which parts of the Frameworks",
    "start": "1995279",
    "end": "2000600"
  },
  {
    "text": "people use and and and even more um if people use if you start using one part",
    "start": "2000600",
    "end": "2006840"
  },
  {
    "text": "of the framework in the first part of the line by the end you've unlikely to have switched Frameworks so you by there",
    "start": "2006840",
    "end": "2013559"
  },
  {
    "text": "sort of um over the whole line you can get a lot of information out of these sort of out of scanning code and there's",
    "start": "2013559",
    "end": "2020639"
  },
  {
    "text": "a lot of code to scan which is really great we haven't gotten there yet um and",
    "start": "2020639",
    "end": "2026399"
  },
  {
    "text": "again the one issue there technically which we're going to run into is that because we have this these crazy",
    "start": "2026399",
    "end": "2032320"
  },
  {
    "text": "optimizations that are based on when you can be lazy and when you cannot be lazy is you start training the prior that",
    "start": "2032320",
    "end": "2038720"
  },
  {
    "text": "will degrade it may also speed up because if you have better accuracy in terms of what people never do you don't",
    "start": "2038720",
    "end": "2045240"
  },
  {
    "text": "ever need to explore that until you have nothing else to do so maybe it could be either good or bad we will find",
    "start": "2045240",
    "end": "2052679"
  },
  {
    "start": "2052000",
    "end": "2102000"
  },
  {
    "text": "out um another important step is sort of clean error reporting and the there's",
    "start": "2052679",
    "end": "2058480"
  },
  {
    "text": "sort of two ways to do this one is you can the most interesting thing to do is if you have some large line it may be",
    "start": "2058480",
    "end": "2065480"
  },
  {
    "text": "that the user sort of kind of quotequote quotes meant an error message so what they they really meant some some",
    "start": "2065480",
    "end": "2071240"
  },
  {
    "text": "complicated thing and most of the line is correct but maybe one part is wrong",
    "start": "2071240",
    "end": "2076960"
  },
  {
    "text": "is right but wrong in context so the actual bug fix is somewhere else and as a as a single lined thing we can't",
    "start": "2076960",
    "end": "2083398"
  },
  {
    "text": "report that what we can say is look we've we've produced we' fixed bugs in most of the line we think you really",
    "start": "2083399",
    "end": "2089638"
  },
  {
    "text": "there's something fundamentally wrong with this last part can you help us um and sort of combining it up the tree so",
    "start": "2089639",
    "end": "2095440"
  },
  {
    "text": "that's another area for for future that can also make it sort of much easier and more useful to",
    "start": "2095440",
    "end": "2102599"
  },
  {
    "start": "2102000",
    "end": "2199000"
  },
  {
    "text": "use um and then we have our long-term fancy dreams um so one as you sort of as",
    "start": "2102640",
    "end": "2109640"
  },
  {
    "text": "we start to to apply these machine learning techniques to understand the shape of sort of real code that's out",
    "start": "2109640",
    "end": "2115119"
  },
  {
    "text": "there in the world um there are sort of there's starting to these very interesting techniques from",
    "start": "2115119",
    "end": "2120800"
  },
  {
    "text": "sort of deep neural networks for doing sort of natural language processing and a lot of sort of text text work and",
    "start": "2120800",
    "end": "2126599"
  },
  {
    "text": "images as well on building interesting priors about the structure of some space",
    "start": "2126599",
    "end": "2131920"
  },
  {
    "text": "so learn the learn the structure of images learn the structure of natural language and people are starting to",
    "start": "2131920",
    "end": "2138280"
  },
  {
    "text": "apply these now to code and to sort of learn idioms and usage patterns from",
    "start": "2138280",
    "end": "2143520"
  },
  {
    "text": "large databases of code and this can be exact like directly applied both to sort of autoc correct what we're doing now",
    "start": "2143520",
    "end": "2149560"
  },
  {
    "text": "and also to toine bugs and sort of do sort of automated code review and style fixing um and then there's really fancy",
    "start": "2149560",
    "end": "2156520"
  },
  {
    "text": "things like theor improving which I'm I get all excited by because I'm a",
    "start": "2156520",
    "end": "2161920"
  },
  {
    "text": "mathematician um one thing that's important is you this is sort of teaching machines to code but if you do it if you do only a mediocre job of",
    "start": "2161920",
    "end": "2168480"
  },
  {
    "text": "teaching a machine to code you can still get useful useful applications out of it you don't need to have a human level AI",
    "start": "2168480",
    "end": "2174480"
  },
  {
    "text": "before this is useful so this here is a relatively sort of simple rule based system it's already useful and a little",
    "start": "2174480",
    "end": "2181359"
  },
  {
    "text": "bit better will just keep being you can keep sort of filtering out garbage and um you sort of WI the Gap um from sort",
    "start": "2181359",
    "end": "2189599"
  },
  {
    "text": "of where you can sort of project pseudo code to real code AS sort of people type",
    "start": "2189599",
    "end": "2194760"
  },
  {
    "text": "so moving more and more of the the grunt work from the human to the computer so we love feedback um this is",
    "start": "2194760",
    "end": "2202680"
  },
  {
    "start": "2199000",
    "end": "2222000"
  },
  {
    "text": "uh open and uh open source and downloadable and it works in Android Studio as well so intellig or clones um",
    "start": "2202680",
    "end": "2212599"
  },
  {
    "text": "yeah that's the talk you raise your hand first mentioned",
    "start": "2212599",
    "end": "2218680"
  },
  {
    "text": "you know sort of lazy sech I'm going to show it so each",
    "start": "2218680",
    "end": "2225480"
  },
  {
    "start": "2222000",
    "end": "3599000"
  },
  {
    "text": "uh so the question is as we're sort of descending this La lazily evaluating tree how do we know when a branch has an",
    "start": "2225480",
    "end": "2234319"
  },
  {
    "text": "answer and we can we're done we can show it is that correct yeah um so the answer is that you expand the tree until you",
    "start": "2234319",
    "end": "2243079"
  },
  {
    "text": "find one that you know is the best one um so if if you have two options and",
    "start": "2243079",
    "end": "2248760"
  },
  {
    "text": "you have basically what what we have during this search are upper bounds on the score or once we hit an actual",
    "start": "2248760",
    "end": "2255920"
  },
  {
    "text": "answer then we have the score so if you've computed um a bunch of options",
    "start": "2255920",
    "end": "2261520"
  },
  {
    "text": "and one of them has score7 and the other ones have an upper bound of 6 you know you don't need to",
    "start": "2261520",
    "end": "2268000"
  },
  {
    "text": "expand them further and we expand uh basically we expand until we get the first option and show it and",
    "start": "2268000",
    "end": "2275640"
  },
  {
    "text": "then we keep working while that thing is on the screen until we either get too",
    "start": "2275640",
    "end": "2281160"
  },
  {
    "text": "low or sort of run out or or find new options and as we find new options we show them so we're sort of doing that",
    "start": "2281160",
    "end": "2287400"
  },
  {
    "text": "adaptively as the you as if if the user stops typing we start going to work and",
    "start": "2287400",
    "end": "2293480"
  },
  {
    "text": "showing them as we sort of produce answers basically then one question we do so for example we we do a",
    "start": "2293480",
    "end": "2300800"
  },
  {
    "text": "little bit of that so far so we sorry the question is do we update our priors",
    "start": "2300800",
    "end": "2306319"
  },
  {
    "text": "based on in indices for the current project um so an example we do now we",
    "start": "2306319",
    "end": "2311880"
  },
  {
    "text": "don't do a whole lot of that yet is we currently scan all of the Imports um and",
    "start": "2311880",
    "end": "2319920"
  },
  {
    "text": "sort of produce a few sort of summary statistics which say that uh if you've",
    "start": "2319920",
    "end": "2325000"
  },
  {
    "text": "imported this this Pro this this file um 10 times it's more likely that if you",
    "start": "2325000",
    "end": "2331680"
  },
  {
    "text": "forget the import we can sort of fill in the qualification for you so you're less likely to use a function that's brand",
    "start": "2331680",
    "end": "2338119"
  },
  {
    "text": "new um so we'll we score that lower than a function that has been imported say in other files a bunch of",
    "start": "2338119",
    "end": "2345520"
  },
  {
    "text": "times so the question is what about other editors so Eclipse net beans and then yeah IDs and editors um so there's",
    "start": "2346400",
    "end": "2354760"
  },
  {
    "text": "actually a distinction there so we because we take advantage of so much of the ide's infrastructure it would be",
    "start": "2354760",
    "end": "2362040"
  },
  {
    "text": "hard for us to port to them or um",
    "start": "2362040",
    "end": "2368240"
  },
  {
    "text": "Vim or emac I sorry I forgot the second one um but it is it is fairly easy for",
    "start": "2368240",
    "end": "2374119"
  },
  {
    "text": "us to port to Eclipse because we've we've done a fair amount of work to separate the the the compiler logic that",
    "start": "2374119",
    "end": "2380839"
  },
  {
    "text": "we've written from the the logic of um sort of exploring indices and sort of M",
    "start": "2380839",
    "end": "2388240"
  },
  {
    "text": "interfacing with the with the IDE so an eclipse Port is reasonable the because",
    "start": "2388240",
    "end": "2394280"
  },
  {
    "text": "we are a compute intensive um plugin we spent a lot of time wrangling threading",
    "start": "2394280",
    "end": "2400240"
  },
  {
    "text": "bugs in intellig so most of the work doing an eclipse Port is just getting",
    "start": "2400240",
    "end": "2405760"
  },
  {
    "text": "around the the the bugs in of the concurrency model which may not be bugs",
    "start": "2405760",
    "end": "2411040"
  },
  {
    "text": "in intellig some of their like some of the bugs we had most trouble with were in the Scola plugin and so it's a whole",
    "start": "2411040",
    "end": "2417520"
  },
  {
    "text": "third party thing which we're running at the same time and is a conflict but we do want to port to Eclipse um we we",
    "start": "2417520",
    "end": "2423440"
  },
  {
    "text": "haven't started it yet yeah say again",
    "start": "2423440",
    "end": "2429160"
  },
  {
    "text": "is that based on any acemic research um so not really so we uh this",
    "start": "2429160",
    "end": "2438560"
  },
  {
    "text": "last line is the key bit um the we oh yeah the question the question is",
    "start": "2438560",
    "end": "2445160"
  },
  {
    "text": "we are we basing um basing on on academic work and",
    "start": "2445160",
    "end": "2450640"
  },
  {
    "text": "actually I may have skipped this",
    "start": "2450640",
    "end": "2456119"
  },
  {
    "text": "slide how do I get to that slide okay I just show it in here um so",
    "start": "2456240",
    "end": "2464720"
  },
  {
    "text": "there is a lot of work in this area um and we are we sort of looked at the work and and learned from it and then did",
    "start": "2464720",
    "end": "2470119"
  },
  {
    "text": "something dumber um so we because we want to do want to fix",
    "start": "2470119",
    "end": "2476720"
  },
  {
    "text": "so many different kinds of errors that at the same time um a lot of these are really lovely work um but have sort of",
    "start": "2476720",
    "end": "2485440"
  },
  {
    "text": "it was UN it was unclear to us that we could do them in interactive interactive rates um so we intentionally pick",
    "start": "2485440",
    "end": "2491839"
  },
  {
    "text": "something that's that sort of simpler and um more P more flexible in certain ways and more limited in others um so",
    "start": "2491839",
    "end": "2498520"
  },
  {
    "text": "our we we're sort of inspired by some of these but um and I can these slides can",
    "start": "2498520",
    "end": "2504079"
  },
  {
    "text": "be up if you're curious to read through these these are some of these are pretty good papers um this the the one that's",
    "start": "2504079",
    "end": "2509920"
  },
  {
    "text": "sort of most similar to ours is this G one um which is doing pretty fancy auto",
    "start": "2509920",
    "end": "2516839"
  },
  {
    "text": "complete um not autocorrect for Scala so they can sort of autoc complete higher order",
    "start": "2516839",
    "end": "2523160"
  },
  {
    "text": "functions with um with type arguments and and fancy stuff whereas and so but",
    "start": "2523160",
    "end": "2528680"
  },
  {
    "text": "their their model is that if this autocomplete mode where you're extending a line which you believe is already",
    "start": "2528680",
    "end": "2534040"
  },
  {
    "text": "correct and we sort of think the right model is the human puts down some stuff",
    "start": "2534040",
    "end": "2539920"
  },
  {
    "text": "and then we think it's just kind of roughly what you mean because you made a mistake you're a human and we'll fix the",
    "start": "2539920",
    "end": "2545559"
  },
  {
    "text": "whole thing for you all at once um so we it does interact but we we've sort of had a different somewhat different Focus",
    "start": "2545559",
    "end": "2551359"
  },
  {
    "text": "from some of the previous",
    "start": "2551359",
    "end": "2554200"
  },
  {
    "text": "work right um so there's two there's two parts to that so the question is um Java",
    "start": "2557559",
    "end": "2563839"
  },
  {
    "text": "8 has introduced particular lambdas and lambdas let you do with reasonable cleanliness lines which have sort of",
    "start": "2563839",
    "end": "2570599"
  },
  {
    "text": "unbounded complexity um they they're you start out with with a line and then you have a whole function called there so",
    "start": "2570599",
    "end": "2577319"
  },
  {
    "text": "the first part of that is uh we're actually exponential time not cubic time just the pars is cubic time so the rest",
    "start": "2577319",
    "end": "2583960"
  },
  {
    "text": "of it is much worse um so that's the bad news the good news is that uh cubic time",
    "start": "2583960",
    "end": "2589400"
  },
  {
    "text": "is just because we were lazy there are better parsing Ali which are parsing algorithms which are roughly linear and",
    "start": "2589400",
    "end": "2596079"
  },
  {
    "text": "the real question is sort of how many errors are you willing to fix all at once that are sort of connected together",
    "start": "2596079",
    "end": "2601880"
  },
  {
    "text": "and so when we for example our current our current stuff doesn't do lambdas but it does do in classes Anonymous classes",
    "start": "2601880",
    "end": "2608880"
  },
  {
    "text": "and when we do those we sort of segment the we like segment the line so we kind",
    "start": "2608880",
    "end": "2614319"
  },
  {
    "text": "of take the whole body of an inclass function call and treat it as an atomic token for the purposes of doing bug",
    "start": "2614319",
    "end": "2622119"
  },
  {
    "text": "fixing on the rest of the line and so that approach extends to some of the applications of lambdas but of course",
    "start": "2622119",
    "end": "2628400"
  },
  {
    "text": "not in general like often you really would like the thing to fix the whole thing at once um and there is some there",
    "start": "2628400",
    "end": "2636200"
  },
  {
    "text": "is a certain there is a concern that obviously for certain kinds of code this approach um does not scale we think that",
    "start": "2636200",
    "end": "2643440"
  },
  {
    "text": "it it captures a fair like usually when that happens you",
    "start": "2643440",
    "end": "2649480"
  },
  {
    "text": "um there is a there if you start writing a bigger and bigger Lambda it does it will make sense to take bits of that and",
    "start": "2649480",
    "end": "2657319"
  },
  {
    "text": "treat it as a block and error fix the rest and then you can go in and fix that so you can sort of work at a you can s",
    "start": "2657319",
    "end": "2663599"
  },
  {
    "text": "of zoom out one level and um take bits and pieces of the line apply what we currently have um to to get through like",
    "start": "2663599",
    "end": "2671800"
  },
  {
    "text": "large bit large blocks of lambdas because even for our code we do have situations where we say oh function call",
    "start": "2671800",
    "end": "2677960"
  },
  {
    "text": "of new and then interclass and then a gigantic C of code and we of course",
    "start": "2677960",
    "end": "2683319"
  },
  {
    "text": "can't run even a cubic time algorithm on that line without stalling the ad the IDE",
    "start": "2683319",
    "end": "2691000"
  },
  {
    "text": "yep so the the answer the question is does does previous user in user Behavior",
    "start": "2691040",
    "end": "2698160"
  },
  {
    "text": "effect later priors it doesn't yet um what we've and we have the the only Serv",
    "start": "2698160",
    "end": "2705160"
  },
  {
    "text": "side component we have is this opt-in um sort of data collection which is an anonymized as much as you can reasonably",
    "start": "2705160",
    "end": "2713640"
  },
  {
    "text": "anonymize code which is is questionable but it's it's opin um",
    "start": "2713640",
    "end": "2720160"
  },
  {
    "text": "so we have we're currently collecting that data if you opt in but we are not we have not we've only gotten a little",
    "start": "2720160",
    "end": "2726520"
  },
  {
    "text": "ways through starting to parse it and we have not done uh the work of going further than that and doing say as you",
    "start": "2726520",
    "end": "2733760"
  },
  {
    "text": "as you type a project sort of what um as you sort of as you write code in a",
    "start": "2733760",
    "end": "2739400"
  },
  {
    "text": "project uh changing the priors except and we do parse the the project as I said to to a different question and make",
    "start": "2739400",
    "end": "2746319"
  },
  {
    "text": "some statistics and then go from there what we plan to do in future is what you there's sort of this you can sort of",
    "start": "2746319",
    "end": "2752440"
  },
  {
    "text": "structure these kind of hierarchical basian models where you look at all of the code on the web",
    "start": "2752440",
    "end": "2757839"
  },
  {
    "text": "and you you see that uh maybe there are a 100 types of projects and these",
    "start": "2757839",
    "end": "2763599"
  },
  {
    "text": "different projects have different sort of symbol distributions some projects are very sort of uh spring boot heavy",
    "start": "2763599",
    "end": "2770520"
  },
  {
    "text": "and they use these kind of spring boot behaviors and you can build up a a this",
    "start": "2770520",
    "end": "2776040"
  },
  {
    "text": "hierarchical model where if you see a little bit of user code you can snap into a a point in that space like oh",
    "start": "2776040",
    "end": "2782200"
  },
  {
    "text": "this is a spring boot project I'm going to use the priors from that kind of those frequency distributions and that I",
    "start": "2782200",
    "end": "2788960"
  },
  {
    "text": "think is the sort of the right way to approach that and does give you a lot more power in terms of what you think is",
    "start": "2788960",
    "end": "2795839"
  },
  {
    "text": "reasonable code than just just sort of than the first line of code that you type into a bar a new a new project I I",
    "start": "2795839",
    "end": "2802880"
  },
  {
    "text": "think there may have been a slight sorry there may have been a slightly different angle to this where it's like",
    "start": "2802880",
    "end": "2809440"
  },
  {
    "text": "um we don't do currently any kind of user um per",
    "start": "2809440",
    "end": "2815839"
  },
  {
    "text": "user uh personalization and and that's definitely possible but um going from",
    "start": "2815839",
    "end": "2823400"
  },
  {
    "text": "this type of offline learning to something that's really kind of online learning where as you type as you select",
    "start": "2823400",
    "end": "2830640"
  },
  {
    "text": "certain things it'll update your prior inactively that that's probably a bit further away and and the it's yeah it's",
    "start": "2830640",
    "end": "2838720"
  },
  {
    "text": "it's a question of trade of like how much additional quality of result will it give you and the the biggest chunk is",
    "start": "2838720",
    "end": "2844240"
  },
  {
    "text": "definitely like the embedding uh Bas an embedding of the of the projects basically where you like from the first",
    "start": "2844240",
    "end": "2850359"
  },
  {
    "text": "few lines you will be able to tell oh is that guy using you know this this framework or this is this is this is an",
    "start": "2850359",
    "end": "2856520"
  },
  {
    "text": "awt project or you know per project is also nice because if if a new programmer",
    "start": "2856520",
    "end": "2862240"
  },
  {
    "text": "joins a project they will immediately be using the priors that are according to the project style so you'll sort of",
    "start": "2862240",
    "end": "2868760"
  },
  {
    "text": "you'll naturally be sort of guided towards what people are already typing which is useful for large",
    "start": "2868760",
    "end": "2875839"
  },
  {
    "text": "projects other questions yep how did you come up with the initial like Factor",
    "start": "2875839",
    "end": "2885119"
  },
  {
    "text": "biases so the question is how did we come up with these numbers for the the biases and we made them up um and then",
    "start": "2886559",
    "end": "2892640"
  },
  {
    "text": "we tweaked them when we didn't like the result so uh yeah uh so this is we sort",
    "start": "2892640",
    "end": "2900400"
  },
  {
    "text": "of structured the system so that uh um they have a we have a big gigantic list",
    "start": "2900400",
    "end": "2905760"
  },
  {
    "text": "of these numbers and we hope to be learning these from data but right now we just made them up okay",
    "start": "2905760",
    "end": "2912760"
  },
  {
    "text": "question a little bit so we certainly so the question is did we take inspiration from languages which cross- compiled to",
    "start": "2912760",
    "end": "2919079"
  },
  {
    "text": "Java and as we edit this as we as we sort of write our grammar um I think",
    "start": "2919079",
    "end": "2924280"
  },
  {
    "text": "more generally we've taken inspiration from a lot of languages so we have for example we have a bunch of",
    "start": "2924280",
    "end": "2930799"
  },
  {
    "text": "stuff in there that sort of python e um we have sort of Scola Scola syntax um",
    "start": "2930799",
    "end": "2937359"
  },
  {
    "text": "o camel and hascal as syntax and C++ is syntax where you sort of put the say",
    "start": "2937359",
    "end": "2943200"
  },
  {
    "text": "when you put angle brackets on the wrong side and then we when we put it out there one of the first we got several",
    "start": "2943200",
    "end": "2948839"
  },
  {
    "text": "people asking for um I want the colons at the end of if statements from Python",
    "start": "2948839",
    "end": "2954400"
  },
  {
    "text": "and so that we added that um so we we have we've sort of we've kind of added bits and pieces of languages here and",
    "start": "2954400",
    "end": "2960640"
  },
  {
    "text": "there we the the disadvantage is that as we currently we're currently writing this grammar ourselves so we have not",
    "start": "2960640",
    "end": "2967079"
  },
  {
    "text": "you really want to move to a model where you start learning the grammar um and the challenge there is the data you'd",
    "start": "2967079",
    "end": "2973480"
  },
  {
    "text": "really like to learn that grammar is what people would love to type had if they had the perfect system like Eddie",
    "start": "2973480",
    "end": "2979720"
  },
  {
    "text": "and there's not a lot of code which is oh if you were if you were Java if you're typing in Java but you loved",
    "start": "2979720",
    "end": "2986040"
  },
  {
    "text": "python what would you type um there's only correct Java code so there's a bit of a sort of chicken and egg learning problem which we've solved by just",
    "start": "2986040",
    "end": "2992480"
  },
  {
    "text": "writing the grammar ourselves by hand yeah",
    "start": "2992480",
    "end": "2998640"
  },
  {
    "text": "we don't although that's a good that is a good idea currently we have very little um we have no state so um and",
    "start": "2999240",
    "end": "3008400"
  },
  {
    "text": "that's partially just for Simplicity so we uh if if you opt into to data",
    "start": "3008400",
    "end": "3014079"
  },
  {
    "text": "collection we just send data off into a server and it's one way but we don't maintain any current any current",
    "start": "3014079",
    "end": "3019640"
  },
  {
    "text": "statistics so it's all all of the say the the local knowledge is based on the project and we if we um it's pretty hard",
    "start": "3019640",
    "end": "3026880"
  },
  {
    "text": "to reliably so for example for indices which is unrelated um it's easier if we",
    "start": "3026880",
    "end": "3033160"
  },
  {
    "text": "can the fact that we can just blow away our knowledge and then reconstruct it is useful so we haven't maintained any state or do didn't user",
    "start": "3033160",
    "end": "3039079"
  },
  {
    "text": "reports but that's a good good idea somewhat more styish so that's a",
    "start": "3039079",
    "end": "3046920"
  },
  {
    "text": "great question the question is uh if Eddie learns from all the code on the internet which is all wonderful quality",
    "start": "3046920",
    "end": "3053280"
  },
  {
    "text": "will it learn how to will it learn to be a terrible programmer and the answer to that is is similar to the answer about",
    "start": "3053280",
    "end": "3058839"
  },
  {
    "text": "different project Styles so if you what you really want to do is look at all the code on the on the internet and learn uh",
    "start": "3058839",
    "end": "3064880"
  },
  {
    "text": "a topic model which says that code breaks down into these classes there are",
    "start": "3064880",
    "end": "3070200"
  },
  {
    "text": "various different kinds of projects and you may even you can you can start agnostic as to what projects are good",
    "start": "3070200",
    "end": "3076720"
  },
  {
    "text": "and bad um but then you get so you have these topics and some of the topics are",
    "start": "3076720",
    "end": "3082160"
  },
  {
    "text": "good code some of them are bad code and then there's two ways you can sort of figure out oh now I actually want Only",
    "start": "3082160",
    "end": "3088119"
  },
  {
    "text": "the Good code topics the one way is if you join a project and the project itself is good code and you're instead",
    "start": "3088119",
    "end": "3094559"
  },
  {
    "text": "of a novice programmer then it would naturally be projected into the space of good good code because the project is",
    "start": "3094559",
    "end": "3101119"
  },
  {
    "text": "already there and the second way is if you have um if you have a sort of historical data you can sort of discover",
    "start": "3101119",
    "end": "3108480"
  },
  {
    "text": "that if people write code that is in this one topic they immediately fix it into this other topic or the the commits",
    "start": "3108480",
    "end": "3115559"
  },
  {
    "text": "have a sort of a certain directionality to them across G history and that would again tell you that like these this",
    "start": "3115559",
    "end": "3121680"
  },
  {
    "text": "style of code is bad and should be avoided so as we start getting into this sort of learning process which you're",
    "start": "3121680",
    "end": "3127000"
  },
  {
    "text": "not there yet that's that's actually a very important like area to go in because that's where a lot of the value",
    "start": "3127000",
    "end": "3133319"
  },
  {
    "text": "is so you it's not enough to say the the the power of machine learning is that you can go beyond types and say oh these",
    "start": "3133319",
    "end": "3141079"
  },
  {
    "text": "are these are both perfectly valid Java but never write that one there's a there's a a a different um slightly",
    "start": "3141079",
    "end": "3148920"
  },
  {
    "text": "different angle to this which is if if you are allowed to scan a particular",
    "start": "3148920",
    "end": "3154680"
  },
  {
    "text": "organization's code you will adapt to whatever that organization tends to do",
    "start": "3154680",
    "end": "3160720"
  },
  {
    "text": "and so for example if an organization frowns upon the use of log for J you will not suggest that and so you know",
    "start": "3160720",
    "end": "3167000"
  },
  {
    "text": "that's really where maybe you know in in in the limit or when you when you think about Enterprise applications that's",
    "start": "3167000",
    "end": "3173119"
  },
  {
    "text": "maybe what what people actually want to do where they're like oh we have this stock and we have these these rules and",
    "start": "3173119",
    "end": "3178880"
  },
  {
    "text": "we'd like Eddie to understand and promote these rules and that'll automatically happen if you kind of let",
    "start": "3178880",
    "end": "3185040"
  },
  {
    "text": "Eddie like work through a particular organization's code and then what it learned from that uses use those things",
    "start": "3185040",
    "end": "3191400"
  },
  {
    "text": "in its models and that's again a way to do the projection so you could you could learn these topics from all the code in the world and then assume that like good",
    "start": "3191400",
    "end": "3199160"
  },
  {
    "text": "organizations are on the on the positive side of that scale so if you look more like organizations code then you sort of",
    "start": "3199160",
    "end": "3205559"
  },
  {
    "text": "Stripped Away a bunch of the Gunk from GitHub which there of which there's a",
    "start": "3205559",
    "end": "3211119"
  },
  {
    "text": "lot so the uh actually I I I'm not go ahead privac so I'll say the",
    "start": "3212240",
    "end": "3220400"
  },
  {
    "text": "question the question is have the have the folks who have installed that been accepting of the uh this log this",
    "start": "3220400",
    "end": "3226799"
  },
  {
    "text": "logging so so so we turned we turned this logging into an optional thing and we have three levels of logging and the",
    "start": "3226799",
    "end": "3235720"
  },
  {
    "text": "the the kind of the initial like initial release default was like log",
    "start": "3235720",
    "end": "3241000"
  },
  {
    "text": "everything and we had this on Reddit and people looked at it and and you know you",
    "start": "3241000",
    "end": "3246280"
  },
  {
    "text": "can count the comment likes or whatever and it's probably like a quarter of the",
    "start": "3246280",
    "end": "3254160"
  },
  {
    "text": "people probably didn't really like the idea of having their code logged like really didn't like the idea and but but",
    "start": "3254160",
    "end": "3260760"
  },
  {
    "text": "then again you know that only tells you so much so um the the problem that we're having is",
    "start": "3260760",
    "end": "3267480"
  },
  {
    "text": "we don't actually have if somebody turns off this data collection completely we we don't know they exist um we can",
    "start": "3267480",
    "end": "3273960"
  },
  {
    "text": "distinguish between the people who turned off the code logging and turned off and actually haven't analyzed the number so I can't tell you but um so we",
    "start": "3273960",
    "end": "3280520"
  },
  {
    "text": "know there's this amount of people and we we could know there's like 20% of",
    "start": "3280520",
    "end": "3285880"
  },
  {
    "text": "people have turned off code log you just made that number up though I totally made that number up that that could be that could be 80% but um but we don't",
    "start": "3285880",
    "end": "3293720"
  },
  {
    "text": "know how many people have turned off loging in time without even like that's sort of",
    "start": "3293720",
    "end": "3300000"
  },
  {
    "text": "disadvantage of being we we're deployed through the intellig plug-in repository so we are not the user doesn't download",
    "start": "3300000",
    "end": "3306720"
  },
  {
    "text": "Eddie from our website they download it from someone else and we don't really get detail statistics sub question is like",
    "start": "3306720",
    "end": "3314079"
  },
  {
    "text": "compromis so the question is how if we could if we did more logging we could learn a lot better how do we anonymize",
    "start": "3314079",
    "end": "3319599"
  },
  {
    "text": "that data and the answer is that we are in a space that is extremely difficult to anonymize so um so for example if",
    "start": "3319599",
    "end": "3329079"
  },
  {
    "text": "you we as we started learning from code one of the most powerful information",
    "start": "3329079",
    "end": "3334920"
  },
  {
    "text": "sources about code is the names of things like the names of functions names of variables classes Etc and so you",
    "start": "3334920",
    "end": "3343280"
  },
  {
    "text": "can't say Minify the code because then you'd lose the structure which is actually where the human information is",
    "start": "3343280",
    "end": "3349760"
  },
  {
    "text": "um so we don't really know how to anonymize that that stuff there are machine there's machine learning work where people have done really fancy",
    "start": "3349760",
    "end": "3356640"
  },
  {
    "text": "theoretical techniques it's called differential privacy where they can train machine learning models that can't",
    "start": "3356640",
    "end": "3361799"
  },
  {
    "text": "be reverse engineered um but those models are are lower quality and they're",
    "start": "3361799",
    "end": "3367280"
  },
  {
    "text": "harder to Trin and they're I think they're bigger um so it's not clear that there's they're easy ways to anonymize",
    "start": "3367280",
    "end": "3373520"
  },
  {
    "text": "this this process I think the real the real solution to this problem is for an organization to say okay we buy it we",
    "start": "3373520",
    "end": "3380720"
  },
  {
    "text": "want you to like install our custom version of it locally where you can scan",
    "start": "3380720",
    "end": "3386440"
  },
  {
    "text": "all our code and then work with our code and build whatever model you want and we don't have to fear that it leaks out",
    "start": "3386440",
    "end": "3392839"
  },
  {
    "text": "because it's actually on our servers and that's cool like that's that's a perfectly valid kind of model to work",
    "start": "3392839",
    "end": "3398640"
  },
  {
    "text": "with um and you can still use you know the open source knowledge base but you",
    "start": "3398640",
    "end": "3404599"
  },
  {
    "text": "know the extra knowledge that you build from that company's code cannot leak outside so I think that's the real like",
    "start": "3404599",
    "end": "3409960"
  },
  {
    "text": "for individuals that's obviously infusible but because they don't produce enough code to actually train something",
    "start": "3409960",
    "end": "3415359"
  },
  {
    "text": "on but for organizations that's perfectly reasonable to do but even an individual working on proprietary code",
    "start": "3415359",
    "end": "3420559"
  },
  {
    "text": "of their own their own proprietary code can use the open sourc trained model",
    "start": "3420559",
    "end": "3425960"
  },
  {
    "text": "which will sort of M mimic a lot of the structure of how they program hopefully if you remove the session",
    "start": "3425960",
    "end": "3433680"
  },
  {
    "text": "information so yeah I yes you can do that and you can like that's sort of",
    "start": "3436079",
    "end": "3441359"
  },
  {
    "text": "that's kind of the security theater approach to anonymization but it's trivial to reconstruct like yeah because",
    "start": "3441359",
    "end": "3446400"
  },
  {
    "text": "you can just do sort of string matching and you'll find out that oh these these",
    "start": "3446400",
    "end": "3451720"
  },
  {
    "text": "things move together so what like the only guarantee we can say there is like we our terms of service are like if you opt in we will not reconstruct your code",
    "start": "3451720",
    "end": "3460000"
  },
  {
    "text": "and then look at it um but all we can do is say that like it's really hard to guarantee that if we were as as",
    "start": "3460000",
    "end": "3467280"
  },
  {
    "text": "malicious so we're we're pretty upfront that there's I I don't know how to do that anization",
    "start": "3467280",
    "end": "3475119"
  },
  {
    "text": "technically solving so the question is um if the user ignores our suggestion on",
    "start": "3475119",
    "end": "3481480"
  },
  {
    "text": "one line do we save that work and use it later and we don't and that's that's",
    "start": "3481480",
    "end": "3487039"
  },
  {
    "text": "purely um a sort of an an a code complexity issue so Inc",
    "start": "3487039",
    "end": "3495200"
  },
  {
    "text": "[Music]",
    "start": "3499170",
    "end": "3502219"
  },
  {
    "text": "incrementalization scary place to be um as you start to write fancier and fancier code generating code generating",
    "start": "3505119",
    "end": "3511440"
  },
  {
    "text": "code um and I don't know how to do that well without writing a compiler in a very sort of declarative way um so we're",
    "start": "3511440",
    "end": "3518680"
  },
  {
    "text": "we have this happy meeting where we're using sort of reasonably nice features of schola to do this abstraction um to",
    "start": "3518680",
    "end": "3525240"
  },
  {
    "text": "build a compiler that can do search but to build a compiler that can do incremental search is another layer",
    "start": "3525240",
    "end": "3530720"
  },
  {
    "text": "which is just it's it's a performance hit or a lot of metaprogramming",
    "start": "3530720",
    "end": "3536599"
  },
  {
    "text": "Benchmark the question is are there yeah uh are there benchmarks on the size of the code base and how",
    "start": "3536599",
    "end": "3542079"
  },
  {
    "text": "performant it is um well we we do know so I mean we use it for our project",
    "start": "3542079",
    "end": "3548359"
  },
  {
    "text": "which includes all of intellig so if your if your project is smaller than intellig you're fine if if it is",
    "start": "3548359",
    "end": "3556839"
  },
  {
    "text": "um so it what happens is actually that the so we use intelligence indices and",
    "start": "3556839",
    "end": "3563799"
  },
  {
    "text": "they have a certain size and intellig VM has a certain size and it's 750 megabytes which is kind of ludicrous so",
    "start": "3563799",
    "end": "3570599"
  },
  {
    "text": "if if you if you have a large project you have probably increased that value already because we're not adding all",
    "start": "3570599",
    "end": "3576440"
  },
  {
    "text": "that much on top of it what we add on top of is a lot of um just running a lot",
    "start": "3576440",
    "end": "3582000"
  },
  {
    "text": "of code uh in on in the background so so we to expand we're we're very careful to",
    "start": "3582000",
    "end": "3588520"
  },
  {
    "text": "when we we do build our own indices but they're as lightweight as they as we can make them so we for example instead of",
    "start": "3588520",
    "end": "3594520"
  },
  {
    "text": "storing data structures like like types we just sore strings and then we expand the types on demand during the search",
    "start": "3594520",
    "end": "3600920"
  },
  {
    "text": "yeah so we we don't add a lot on top of intelligence memory footprint what we do",
    "start": "3600920",
    "end": "3606119"
  },
  {
    "text": "though is we basically run One processor full time um so if you have a spare processor most of us do then that",
    "start": "3606119",
    "end": "3612880"
  },
  {
    "text": "shouldn't be a problem um the the memory is actually the bigger problem because once you run out of memory the VM just",
    "start": "3612880",
    "end": "3619440"
  },
  {
    "text": "GC threshes the whole thing and everything is terrible and so if you run into that problem you probably have run",
    "start": "3619440",
    "end": "3624880"
  },
  {
    "text": "into that problem before and you probably have fiddled with intell's like memory settings and then you're probably",
    "start": "3624880",
    "end": "3630920"
  },
  {
    "text": "okay um but that said like the the standard standard uh jvm GC just also",
    "start": "3630920",
    "end": "3637799"
  },
  {
    "text": "kind of breaks after a few gigabytes of size and takes really long and um at",
    "start": "3637799",
    "end": "3644119"
  },
  {
    "text": "some point there's a limit but intell is is a fairly large project so that's actually you know most people are",
    "start": "3644119",
    "end": "3649520"
  },
  {
    "text": "probably",
    "start": "3649520",
    "end": "3651839"
  },
  {
    "text": "okay I think uh if I understand correctly so the question is are we using regular",
    "start": "3654920",
    "end": "3661920"
  },
  {
    "text": "Expressions to sort of search speed up or optimize or detect correlations across these indices of symbols in a",
    "start": "3661920",
    "end": "3668359"
  },
  {
    "text": "project um and we are not currently and the the the",
    "start": "3668359",
    "end": "3673960"
  },
  {
    "text": "difficulty is that um if you",
    "start": "3673960",
    "end": "3679160"
  },
  {
    "text": "build there's one of the one of the cases where we we need to be fairly low",
    "start": "3679160",
    "end": "3684200"
  },
  {
    "text": "linear time on the indices so we if you have a linear number of strings and they take up however many megabytes of memory",
    "start": "3684200",
    "end": "3692400"
  },
  {
    "text": "um if we if we start if we're any if if if we're at all super linear in that",
    "start": "3692400",
    "end": "3697640"
  },
  {
    "text": "performance then we will then thrash through intell's memory limits pretty fast for large projects um because we",
    "start": "3697640",
    "end": "3703880"
  },
  {
    "text": "need the whole we want the whole project indices available um there are there is",
    "start": "3703880",
    "end": "3710200"
  },
  {
    "text": "I think as we get if we if we if we push the prior further and then we have a better notion for a small number of sort",
    "start": "3710200",
    "end": "3717160"
  },
  {
    "text": "of hot symbols which are more likely searched then we can put more intelligence in searching those sort of",
    "start": "3717160",
    "end": "3722319"
  },
  {
    "text": "hot symbols and then do the slower sort of um more sort of low memory thing for",
    "start": "3722319",
    "end": "3728319"
  },
  {
    "text": "the rest but we haven't done that yet so um the question is what is the",
    "start": "3728319",
    "end": "3736400"
  },
  {
    "text": "best part of of this project um and for me the best part is uh so you sort of as",
    "start": "3736400",
    "end": "3743880"
  },
  {
    "text": "as you program in Java using this thing on on like I you sort of I'm sort of gradually getting used to it existing",
    "start": "3743880",
    "end": "3750720"
  },
  {
    "text": "and sometimes like there's one time where I sort of forgot and I was like oh I want to check if this file type is",
    "start": "3750720",
    "end": "3756880"
  },
  {
    "text": "Java like how do I do that like what crazy enam and some package and I then I just remember that oh I could just say",
    "start": "3756880",
    "end": "3763079"
  },
  {
    "text": "like is it equal to Java and then it sort of it just fixed it for me so it",
    "start": "3763079",
    "end": "3768440"
  },
  {
    "text": "found the Java symbol and fixes capitalization and sort of Chang equals equals to to the to dot equals and so",
    "start": "3768440",
    "end": "3776160"
  },
  {
    "text": "it's fun sort of kind of forgetting that that you have this ability to not work",
    "start": "3776160",
    "end": "3781200"
  },
  {
    "text": "think about stupid details um and I think it's if we sort of push this technology further the the hope is that",
    "start": "3781200",
    "end": "3787240"
  },
  {
    "text": "you can sort of programming is a little bit more of a human process where you're not sort of mired and pedantic nonsense",
    "start": "3787240",
    "end": "3793720"
  },
  {
    "text": "and you can just sort of write down what you want and it'll figure out the details for you so that's the long-term",
    "start": "3793720",
    "end": "3798920"
  },
  {
    "text": "hope and sometimes when it when it happens is a surprise it's that of particularly fun yeah so these these projects are the",
    "start": "3798920",
    "end": "3805160"
  },
  {
    "text": "most similar so the I think the coolest one for anyone who do Scala and Eclipse",
    "start": "3805160",
    "end": "3810359"
  },
  {
    "text": "I believe is this one and there may be I'm not sure if there's follow on work yet so this thing will do um so Mo I",
    "start": "3810359",
    "end": "3817880"
  },
  {
    "text": "think most of the especially the the either the current idees or um this gavo",
    "start": "3817880",
    "end": "3824520"
  },
  {
    "text": "paper are autoc complete which sort of say what that means autocomplete to us",
    "start": "3824520",
    "end": "3830119"
  },
  {
    "text": "is I have part of a correct line help me finish the line whereas autocorrect is",
    "start": "3830119",
    "end": "3836240"
  },
  {
    "text": "I've written some stuff project it into what I meant to write like I've I've made I've made some mistakes um but this",
    "start": "3836240",
    "end": "3843279"
  },
  {
    "text": "stuff is still pretty cool so gavo can you say you say something like uh um",
    "start": "3843279",
    "end": "3849920"
  },
  {
    "text": "type x equals like I think you would say question mark Or you make maybe you hit Tab and it will be able to fill in a a",
    "start": "3849920",
    "end": "3856480"
  },
  {
    "text": "complicated function call involving sort of several layers of calls through sort of higher order functions that are sort",
    "start": "3856480",
    "end": "3862960"
  },
  {
    "text": "of polymorphic um and the and again the the it's the goal is similar the goal is",
    "start": "3862960",
    "end": "3868720"
  },
  {
    "text": "to sort of reduce the amount of sort of Library noise the have to remember um so some of",
    "start": "3868720",
    "end": "3875760"
  },
  {
    "text": "that is interesting people are starting to add so I think xcode will do a little bit of this so especially sort of little",
    "start": "3875760",
    "end": "3882000"
  },
  {
    "text": "typo correction um and they're they're pushing that um I think they're not",
    "start": "3882000",
    "end": "3888279"
  },
  {
    "text": "they're not going far enough and I sort of I mean I hope that sort of this point",
    "start": "3888279",
    "end": "3895520"
  },
  {
    "text": "like oh we should we should we should destroy them maybe Apple will think that and they'll do a wonderful job and it'll be great um because I think that this",
    "start": "3895520",
    "end": "3903119"
  },
  {
    "text": "all ID should do this like there's no reason that we have all this sort of wonderful technology now for sort of",
    "start": "3903119",
    "end": "3908279"
  },
  {
    "text": "speech recognition and we can detect images and sort of hallucinate things and that that should be applied to",
    "start": "3908279",
    "end": "3914599"
  },
  {
    "text": "programming um just because it sort of will it can the computer can sit closer",
    "start": "3914599",
    "end": "3920880"
  },
  {
    "text": "to the the pedantic language details and also sort of understand human sort of syntactic ambiguities",
    "start": "3920880",
    "end": "3928960"
  },
  {
    "text": "so these are all papers but goo it all is an eclipse plugin which I believe you can",
    "start": "3930400",
    "end": "3937119"
  },
  {
    "text": "download I do not know that um there were they maybe an abandoned paper by",
    "start": "3938359",
    "end": "3943839"
  },
  {
    "text": "rest student I'm I'm very sure that sloppy programming is abandoned um the example Centric",
    "start": "3943839",
    "end": "3949079"
  },
  {
    "text": "programming is definitely abandoned um go Academia yeah I mean",
    "start": "3949079",
    "end": "3955000"
  },
  {
    "text": "that's how it is right like we know Joel BR and he's definitely not working on it anymore",
    "start": "3955000",
    "end": "3961079"
  },
  {
    "text": "that's well ours ours is yeah I mean depends on how you know we're not the",
    "start": "3962359",
    "end": "3968680"
  },
  {
    "text": "fastest people right but we're only two of us I mean it's open stores you know can of help us but um yeah it's it's an",
    "start": "3968680",
    "end": "3975599"
  },
  {
    "text": "active development yeah",
    "start": "3975599",
    "end": "3980799"
  },
  {
    "text": "H uh yeah so I mean uh we are a startup um and uh the the code is open source",
    "start": "3983799",
    "end": "3992039"
  },
  {
    "text": "and and online and uh you can you can contribute to it um but yeah it is a",
    "start": "3992039",
    "end": "4000760"
  },
  {
    "text": "startup which will be help more helpful for you in the long term more memory or",
    "start": "4000760",
    "end": "4006279"
  },
  {
    "text": "more faster CPUs or both so it doesn't I don't think we'll be limited by either",
    "start": "4006279",
    "end": "4013319"
  },
  {
    "text": "of those so much in the long run so the main thing is that um I mean you're going to get so sorry I just say the",
    "start": "4013319",
    "end": "4019279"
  },
  {
    "text": "question so the question is are we limited in the long run by CPUs or memory or help more we'll help more so I",
    "start": "4019279",
    "end": "4026039"
  },
  {
    "text": "think we're we're most limited by algorithms so that what we've currently done is is very limited by CPUs and a",
    "start": "4026039",
    "end": "4033920"
  },
  {
    "text": "bit by memory but if you go a little further than that um and you sort of",
    "start": "4033920",
    "end": "4039839"
  },
  {
    "text": "start to train these models from large amounts of data then probably um memory and latency are",
    "start": "4039839",
    "end": "4047440"
  },
  {
    "text": "the bigger issues so if you train a model on all of the code in the world um",
    "start": "4047440",
    "end": "4053680"
  },
  {
    "text": "and you so that's obviously something you would do not on everyone's computer so that's that would be a cloud thing um",
    "start": "4053680",
    "end": "4060000"
  },
  {
    "text": "you're going to have more rapid sort of talk talking back and forth the servers and you can either do it via latency",
    "start": "4060000",
    "end": "4066319"
  },
  {
    "text": "like either trying having um the search sort of asking your server but that's probably too much because it has to ask",
    "start": "4066319",
    "end": "4072720"
  },
  {
    "text": "a lot of questions so that's that that's probably out where you can do instead is you can modularize this model that",
    "start": "4072720",
    "end": "4078119"
  },
  {
    "text": "you've trained on sort of build a prior that a here's the prior for spring and here's the prior for um for other Java",
    "start": "4078119",
    "end": "4087559"
  },
  {
    "text": "libraries um and then you can as if the user starts starts their project and and",
    "start": "4087559",
    "end": "4093799"
  },
  {
    "text": "it appears to be using spring because it's in their project you can download that chunk of the model um and then then",
    "start": "4093799",
    "end": "4099880"
  },
  {
    "text": "you're down to memory um but again I I do I really don't think that it's a big",
    "start": "4099880",
    "end": "4105000"
  },
  {
    "text": "it's a big memory hit I think if you the only reason that we're memory troubled is that intellig has chosen a low number",
    "start": "4105000",
    "end": "4112838"
  },
  {
    "text": "for their default gvm size and once we're inside once you've launched intellig it's it's fixed at 750",
    "start": "4112839",
    "end": "4120440"
  },
  {
    "text": "megabytes you can't grow um don't allow it to grow The The J the Oracle jvm",
    "start": "4120440",
    "end": "4126640"
  },
  {
    "text": "can't grow from inside um so it's a stupid reason and it's in we could fix",
    "start": "4126640",
    "end": "4133400"
  },
  {
    "text": "that if we sort of had instru we we do have instructions on the web page like here's how you would increase your memory but we can't make that we don't",
    "start": "4133400",
    "end": "4140278"
  },
  {
    "text": "know how to make that an easy install process so there's no real fundamental reason why we should be Memory limited",
    "start": "4140279",
    "end": "4145719"
  },
  {
    "text": "um it's just the the current default settings of intellig having faster more",
    "start": "4145719",
    "end": "4151880"
  },
  {
    "text": "CPUs so yeah you can you can certainly parallelize this um",
    "start": "4151880",
    "end": "4156960"
  },
  {
    "text": "generally and that that speeds up um but typically the kinds of so I've done in",
    "start": "4156960",
    "end": "4164238"
  },
  {
    "text": "sort of for fun I've done other sort of like game like combinatoric game programming like say chess or or or",
    "start": "4164239",
    "end": "4171080"
  },
  {
    "text": "things and the speed that you get out of those paralyzing those algorithms sort of",
    "start": "4171080",
    "end": "4176440"
  },
  {
    "text": "these deep search algorithms is sublinear so you you you throw four cars at it and it gets twice as fast so um",
    "start": "4176440",
    "end": "4184719"
  },
  {
    "text": "because so much of the the the speed is pruning um which is similar to our",
    "start": "4184719",
    "end": "4189880"
  },
  {
    "text": "domain so we we want to do a deep search and then find a bound and use it to D",
    "start": "4189880",
    "end": "4195360"
  },
  {
    "text": "destroy another part of the tree whereas if you search both trees at the same time you'll you'll do the search and you",
    "start": "4195360",
    "end": "4200760"
  },
  {
    "text": "do a whole bunch of work and then you realize that this is the better one where you could have skipped work so",
    "start": "4200760",
    "end": "4206400"
  },
  {
    "text": "there because of that scaling it's um I think there are a lot of other algorithmic areas to focus on before",
    "start": "4206400",
    "end": "4213120"
  },
  {
    "text": "thinking about parall just getting better algorithm just better algorithms and better better machine learning",
    "start": "4213120",
    "end": "4219960"
  },
  {
    "text": "models questions but thanks a lot apprciate thank [Applause]",
    "start": "4224320",
    "end": "4235439"
  },
  {
    "text": "you",
    "start": "4239120",
    "end": "4242120"
  }
]