[
  {
    "start": "0",
    "end": "160000"
  },
  {
    "text": "the subject we're gonna talk about today is something I called Java at speed",
    "start": "4279",
    "end": "9700"
  },
  {
    "text": "it'll be self evidence why Java and speed are in there in a little while",
    "start": "9700",
    "end": "15980"
  },
  {
    "text": "I like to have this slide up in a lot of talks that I give just as background",
    "start": "15980",
    "end": "21130"
  },
  {
    "text": "start with anybody here recognize what that thing is I know you know so that is",
    "start": "21130",
    "end": "31480"
  },
  {
    "text": "the Apollo 13 co2 scrubber this is the",
    "start": "31480",
    "end": "38420"
  },
  {
    "text": "ultimate example of heroic duct tape engineering literally taking a square",
    "start": "38420",
    "end": "44840"
  },
  {
    "text": "peg getting it to fit in the round hole saving people's lives from hundreds of thousands of miles away this really",
    "start": "44840",
    "end": "51739"
  },
  {
    "text": "happened this is not the actual one because the actual one burnt in reentry",
    "start": "51739",
    "end": "56960"
  },
  {
    "text": "this is the one they had on the ground for the practice thing for the engineers to work on and and you know every once",
    "start": "56960",
    "end": "68060"
  },
  {
    "text": "in a while in a career you might get to do something that feels so amazing like",
    "start": "68060",
    "end": "74420"
  },
  {
    "text": "you save the day you hopefully not with people's lives on the line and you get",
    "start": "74420",
    "end": "80750"
  },
  {
    "text": "something heroic down something impossible on a deadline it's got to get done and you did it and you did it in",
    "start": "80750",
    "end": "86240"
  },
  {
    "text": "some really ingenious way there's this amazing feeling that comes with doing that I mean if you're lucky you get to",
    "start": "86240",
    "end": "92479"
  },
  {
    "text": "do that a few times in your career but right along with doing that comes the",
    "start": "92479",
    "end": "98300"
  },
  {
    "text": "realization that most of your job is to make sure that never needs to get done again that that the next time people",
    "start": "98300",
    "end": "105770"
  },
  {
    "text": "won't have to duct tape a co2 scrubber and to make it work you-you-you should study these things",
    "start": "105770",
    "end": "111140"
  },
  {
    "text": "you should learn from them you should learn hard like I'm assuming they",
    "start": "111140",
    "end": "116209"
  },
  {
    "text": "realize that next time all the co2 scrubbers in a spaceship need to be the same and use the same filters right and",
    "start": "116209",
    "end": "125209"
  },
  {
    "text": "and that part of you know duct tape engineering is an amazing exhilarating",
    "start": "125209",
    "end": "132320"
  },
  {
    "text": "thing to do having the skills to do it is probably important good practice but at the same time every time you see",
    "start": "132320",
    "end": "138620"
  },
  {
    "text": "a lot of duct tape on your code on your systems this is there's something wrong with them there's something you're putting duct",
    "start": "138620",
    "end": "144920"
  },
  {
    "text": "tape over there's something that you're going through viro-ex force so keep that in mind we might touch on it later in",
    "start": "144920",
    "end": "150470"
  },
  {
    "text": "the talk so today we're going to talk about Java at speed kind of getting the",
    "start": "150470",
    "end": "156800"
  },
  {
    "text": "most out of the systems you're running on and at a high level we're gonna cover",
    "start": "156800",
    "end": "163430"
  },
  {
    "start": "160000",
    "end": "160000"
  },
  {
    "text": "some introduction and motivation talk about some of the hardware trends and the features that we have now look at",
    "start": "163430",
    "end": "171440"
  },
  {
    "text": "some compiler stuff simple compiler things what compilers get you the code take a detour into some micro",
    "start": "171440",
    "end": "177860"
  },
  {
    "text": "benchmarking I'm not a lot but enough to scare people and then go back into",
    "start": "177860",
    "end": "183650"
  },
  {
    "text": "compiler stuff and talk about some cooler or speculative interesting compiler things then talk about how",
    "start": "183650",
    "end": "189890"
  },
  {
    "text": "warm-up works and how this sort of comes together in a running system and a little bit of what you can do about this",
    "start": "189890",
    "end": "196010"
  },
  {
    "text": "if you put it all together sort of the the rough agenda we're gonna go through a little about me I'm the co-founder of",
    "start": "196010",
    "end": "203480"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "Azul systems the CTO there that is all we make Java virtual machines that's all",
    "start": "203480",
    "end": "210110"
  },
  {
    "text": "that we do and one of the things I've worked on a lot that people know me for currently is garbage collection here's",
    "start": "210110",
    "end": "216350"
  },
  {
    "text": "some evidence of me working in garbage collection in my kitchen",
    "start": "216350",
    "end": "222220"
  },
  {
    "text": "this machine is a trash compactor in California we actually have those were really lazy and in what a trash",
    "start": "222220",
    "end": "228950"
  },
  {
    "text": "compactor does is it performs minor GC compactions during the week so you only have to do the full GC on the garbage",
    "start": "228950",
    "end": "236180"
  },
  {
    "text": "bag once a week on the weekend hopefully right and that's maybe why we have",
    "start": "236180",
    "end": "242239"
  },
  {
    "text": "generational GC and software because we learn from that in this case the compactor wasn't",
    "start": "242239",
    "end": "248300"
  },
  {
    "text": "working right I had a fragmentation problem you can see I had to go fix it",
    "start": "248300",
    "end": "254239"
  },
  {
    "text": "and manually defragment the heap of garbage in there and then you know I thought it would be really funny to take",
    "start": "254239",
    "end": "259459"
  },
  {
    "text": "a picture with the book and that was 14 years ago so it's been a while I've",
    "start": "259459",
    "end": "266000"
  },
  {
    "text": "built a lot of things and made a lot of mistakes we don't need to get into all of them I learned only from a few of them and then",
    "start": "266000",
    "end": "273189"
  },
  {
    "text": "a result we make Chavo virtual machines Java speed and latency and",
    "start": "273189",
    "end": "278949"
  },
  {
    "text": "responsiveness is sort of what we focus on so we we tend to know a little about",
    "start": "278949",
    "end": "284169"
  },
  {
    "text": "the field and we're proud about what we do but we also kind of see what everybody else is doing in Java and",
    "start": "284169",
    "end": "290439"
  },
  {
    "text": "could talk about it generically another subject I like to talk about which I won't cover here is how badly we all",
    "start": "290439",
    "end": "296770"
  },
  {
    "text": "measure things and how many mistakes we do when we make those you can find talks of mine called things like how not to",
    "start": "296770",
    "end": "303729"
  },
  {
    "text": "measure latency and you could enjoy those if you want so the subject is",
    "start": "303729",
    "end": "309069"
  },
  {
    "text": "speed what is it good for absolutely",
    "start": "309069",
    "end": "314110"
  },
  {
    "text": "nothing say it again yeah now but what is it",
    "start": "314110",
    "end": "319599"
  },
  {
    "text": "good for speed needs context there's a purpose when we talk about it for example are we fast when it matters are",
    "start": "319599",
    "end": "328149"
  },
  {
    "text": "we fast all the time or only between the times where we release code what if we",
    "start": "328149",
    "end": "334330"
  },
  {
    "text": "release code 27 times a day and every time we release code 10,000 slow transactions happen that's 270,000 slow",
    "start": "334330",
    "end": "342819"
  },
  {
    "text": "transactions on every server every day that's a lot of slow write fast and",
    "start": "342819",
    "end": "347830"
  },
  {
    "text": "between them is interesting are we fast at high loads at peak times when it",
    "start": "347830",
    "end": "353499"
  },
  {
    "text": "matters for whatever the system is doing or just in between now we fast when the",
    "start": "353499",
    "end": "358930"
  },
  {
    "text": "market opens if we're trading we fax when we actually do a trade for example",
    "start": "358930",
    "end": "365129"
  },
  {
    "text": "maybe I have an algo system and it listens to the market really really fast that it only trades 100 times a day at",
    "start": "365129",
    "end": "371529"
  },
  {
    "text": "running interpreted code when it does that that's not the may be like by the way if you're only trading a hundred",
    "start": "371529",
    "end": "377649"
  },
  {
    "text": "times a day that's probably what happening to you in Java and are you reliably fast so are you fast when you",
    "start": "377649",
    "end": "384279"
  },
  {
    "text": "measure it is it really that fast or if you run too long it's not gonna be that fast something bad will happen right so",
    "start": "384279",
    "end": "392830"
  },
  {
    "text": "these are all kinds of questions about you know qualities of speed or when it",
    "start": "392830",
    "end": "398259"
  },
  {
    "text": "matters or what you can use it for now we'd like speed to look like the it's just a number it's always the same",
    "start": "398259",
    "end": "406400"
  },
  {
    "text": "it's just fast how fast fast yeah but the reality especially for Java",
    "start": "406400",
    "end": "413419"
  },
  {
    "text": "looks more like this that's the actual behavior of speed over time in the JVM",
    "start": "413419",
    "end": "420759"
  },
  {
    "text": "so what is that about why what's going into this picture and I'll break it down",
    "start": "420759",
    "end": "426800"
  },
  {
    "text": "into pieces now the beginning part is that in the Java world we we generally",
    "start": "426800",
    "end": "434810"
  },
  {
    "text": "start with code that we haven't yet run and is not warm and is just loaded and",
    "start": "434810",
    "end": "440479"
  },
  {
    "text": "is running interpreted that's this yellow stuff on the left most of our code at the very beginning of our code",
    "start": "440479",
    "end": "446449"
  },
  {
    "text": "is interpreted now as the JVM see that interpreted code running they pay",
    "start": "446449",
    "end": "451520"
  },
  {
    "text": "attention to it they say oh I'm running this a lot let's make it faster and they spend energy on doing that the first",
    "start": "451520",
    "end": "458449"
  },
  {
    "text": "step is they'll compile it to something better than interpret it it's not really",
    "start": "458449",
    "end": "464750"
  },
  {
    "text": "fast it's faster its main purpose of this step of compilation is to gather information so it's gonna run faster and",
    "start": "464750",
    "end": "471589"
  },
  {
    "text": "it's also gonna collect a lot of useful information so that we can figure out how to make it fast and then with that",
    "start": "471589",
    "end": "478370"
  },
  {
    "text": "information the profiling information we then truly optimize the code which is what this blue stuff is to make it go",
    "start": "478370",
    "end": "485599"
  },
  {
    "text": "fast for the situation we're seeing for this profile for this behavior in JIT",
    "start": "485599",
    "end": "491120"
  },
  {
    "text": "compilers and JVMs are good at doing these transitions that's we've been doing this for 20 years now but this is",
    "start": "491120",
    "end": "497930"
  },
  {
    "text": "a learning process that starts every time you start running code and it's an evolving process it's done on a per",
    "start": "497930",
    "end": "505759"
  },
  {
    "text": "method basis every method that you run goes through this it only goes through",
    "start": "505759",
    "end": "510889"
  },
  {
    "text": "this if it has been run and run enough times or long enough okay so what does",
    "start": "510889",
    "end": "517578"
  },
  {
    "text": "this translate to in speed well let's start with response time if we look at",
    "start": "517579",
    "end": "522860"
  },
  {
    "text": "response time over time this is what it'll look like you start with the slow code so it takes a long time to respond",
    "start": "522860",
    "end": "529130"
  },
  {
    "text": "and then as that mix of code starts getting more and more of the green compiled not quite fast but faster",
    "start": "529130",
    "end": "535830"
  },
  {
    "text": "stuff it gets better and over time it gets eventually replaced with all blue stuff good fast code now in addition to",
    "start": "535830",
    "end": "545640"
  },
  {
    "text": "that transition you have all these spikes in the middle those red spikes are calm what you want stalls hiccups",
    "start": "545640",
    "end": "552330"
  },
  {
    "text": "pauses garbage collection pauses are one key example of what causes this but",
    "start": "552330",
    "end": "558390"
  },
  {
    "text": "there are other pauses that make things happen like this you know whatever your system happens to be doing so the",
    "start": "558390",
    "end": "564060"
  },
  {
    "text": "disruptions and they're much higher if we take this response time plot and invert it this is what speed looks like",
    "start": "564060",
    "end": "571170"
  },
  {
    "text": "over time we start slow we get faster and faster and faster faster because the",
    "start": "571170",
    "end": "577920"
  },
  {
    "text": "code gets replaced with faster and faster code eventually all we're running is optimized code and we're at this sort",
    "start": "577920",
    "end": "584760"
  },
  {
    "text": "of a plateau of speed in the common case but we still have these dips to an",
    "start": "584760",
    "end": "590520"
  },
  {
    "text": "absolute zero speed for a little while and then back to you really fast all over time like they say that Java is",
    "start": "590520",
    "end": "597090"
  },
  {
    "text": "really really fast eventually between terrible terrible stalls that's where we",
    "start": "597090",
    "end": "602910"
  },
  {
    "text": "are in most environments today so that's what this picture is about an evolving",
    "start": "602910",
    "end": "608910"
  },
  {
    "text": "thing going through now this evolving thing is not just a direct transition you can see that there's back-and-forth",
    "start": "608910",
    "end": "615330"
  },
  {
    "text": "in spikes and we'll talk about why those happen as well but that's context for",
    "start": "615330",
    "end": "621660"
  },
  {
    "text": "the shape of speed let's talk about the environments we're running on today so a modern server and I'm mostly looking at",
    "start": "621660",
    "end": "627840"
  },
  {
    "text": "servers it's probably applicable to other systems too looking at the Intel universe at least which is what we most",
    "start": "627840",
    "end": "635100"
  },
  {
    "text": "run on looks like this you can see the evolution of chips you can see the evolution of chips over time the number",
    "start": "635100",
    "end": "642150"
  },
  {
    "text": "of course we get the cool names we give them this second from the right column",
    "start": "642150",
    "end": "648120"
  },
  {
    "text": "is features and features are important in addition to just having more silk'n more speed and more room we also get",
    "start": "648120",
    "end": "655170"
  },
  {
    "text": "features that let us do richer things or more things with the same instruction",
    "start": "655170",
    "end": "660240"
  },
  {
    "text": "set or with new instructions right now we're right around here if you're",
    "start": "660240",
    "end": "665790"
  },
  {
    "text": "running on a cloud environment you're probably running one of the two architectures if you're buying a new server today it's the last one on the",
    "start": "665790",
    "end": "671900"
  },
  {
    "text": "list and if you have old servers you're probably a couple generations back so",
    "start": "671900",
    "end": "677240"
  },
  {
    "text": "these features these AV X and BMI and TSX and avx-512 are important because they let our",
    "start": "677240",
    "end": "684200"
  },
  {
    "text": "servers do new things if we know they can do them and if we actually make the code use them now those individual cores",
    "start": "684200",
    "end": "694279"
  },
  {
    "text": "also get better at other things implicitly for example the amount of stuff they could do at the same time",
    "start": "694279",
    "end": "700480"
  },
  {
    "text": "keeps getting better this shows you the number of out of order execution things",
    "start": "700480",
    "end": "706250"
  },
  {
    "text": "that could be done think of it as a juggling act with 224 balls up in there",
    "start": "706250",
    "end": "712330"
  },
  {
    "text": "when one comes back you send another one up that's what CPUs do today and in",
    "start": "712330",
    "end": "718130"
  },
  {
    "text": "those there could be 72 loads and 56 stores all at the same time we're just waiting for them to complete and the",
    "start": "718130",
    "end": "725900"
  },
  {
    "text": "CPUs are really good at figuring out how to move this forward so good that it's very hard for a human to model that well",
    "start": "725900",
    "end": "732350"
  },
  {
    "text": "like we can't just look at a piece of code and say that's what the CPU is gonna do with it exactly this is a nice",
    "start": "732350",
    "end": "741440"
  },
  {
    "text": "complex picture we're not gonna get into of how things flow through CPU through fetching things at the top and decoding",
    "start": "741440",
    "end": "748400"
  },
  {
    "text": "them and then executing them and eventually dealing with memory at the bottom we can look at the evolution of",
    "start": "748400",
    "end": "753920"
  },
  {
    "text": "these things across across versions of CPUs for example from Sandy Bridge 2000",
    "start": "753920",
    "end": "761000"
  },
  {
    "text": "of the width of the buses to the cache there's twice as many as much bandwidth",
    "start": "761000",
    "end": "767360"
  },
  {
    "text": "from the core to its cache to the memory system basically in one generation skip",
    "start": "767360",
    "end": "772880"
  },
  {
    "text": "that happened that's a lot here's the execution units they keep evolving from",
    "start": "772880",
    "end": "778300"
  },
  {
    "text": "Nehalem to Sandy Bridge and Haswell we're now passed abroad well it's kinda like we get more execution units that",
    "start": "778300",
    "end": "785450"
  },
  {
    "text": "you do things at the same time there's execution units can do new things for example we used to have vector",
    "start": "785450",
    "end": "791150"
  },
  {
    "text": "operations that are 128 bit wide then more of them then 256 bit and not 512",
    "start": "791150",
    "end": "797450"
  },
  {
    "text": "bits or wider vectors and richer vectors too and caches have evolved - this is what",
    "start": "797450",
    "end": "804310"
  },
  {
    "text": "we used to have for caches up until skylake skylake changed that an",
    "start": "804310",
    "end": "809380"
  },
  {
    "text": "important cache people don't talk about a lot is a TLB cache these this is the cache that holds the virtual to physical",
    "start": "809380",
    "end": "815440"
  },
  {
    "text": "translation in the CPU and it went through a huge evolution around the Haswell timeframe this is just a couple",
    "start": "815440",
    "end": "821890"
  },
  {
    "text": "generations ago where we went from being able to track only tens of two megabyte",
    "start": "821890",
    "end": "826960"
  },
  {
    "text": "page mappings to a thousand plus without having to thrash the cache so what used",
    "start": "826960",
    "end": "833050"
  },
  {
    "text": "to be mapped with 4k pages can now be completely mapped with to make pages which means we get a lot to our misses",
    "start": "833050",
    "end": "839170"
  },
  {
    "text": "in this cache layout wise servers tend to look like this they've looked like",
    "start": "839170",
    "end": "844300"
  },
  {
    "start": "840000",
    "end": "840000"
  },
  {
    "text": "this for more than 10 years they probably still look like this for a while a couple of chips memory",
    "start": "844300",
    "end": "849670"
  },
  {
    "text": "controllers on each chip and directly attached and some chip to chip interconnect this is the inside of a",
    "start": "849670",
    "end": "857110"
  },
  {
    "text": "chip a bunch of cores sitting on a with a shared cache some sort of a",
    "start": "857110",
    "end": "863110"
  },
  {
    "text": "communication mechanism between them a ring and this is what it used to look like four generations ago roughly but",
    "start": "863110",
    "end": "869890"
  },
  {
    "text": "then we got to a point where there's so many cores on the ship they don't really fit on a ring so we start having things",
    "start": "869890",
    "end": "875560"
  },
  {
    "text": "that look like this on one chip two rings with interconnects between them memory controls for each we could sort",
    "start": "875560",
    "end": "881830"
  },
  {
    "text": "of things this is one flat thing but you can actually configure it to act like two separate Numa nodes and separate it",
    "start": "881830",
    "end": "888490"
  },
  {
    "text": "or not depending on how you want the system to set up now this is a fully populated chip this is the one with all",
    "start": "888490",
    "end": "894910"
  },
  {
    "text": "the cores but a lot of people buy chips with not quite all the core so sometimes they're buying that one and a half rings",
    "start": "894910",
    "end": "901530"
  },
  {
    "text": "not all the cores are the same not all the distances from all the quartz to all",
    "start": "901530",
    "end": "906550"
  },
  {
    "text": "the caches even out there's some interesting mixes and then we have the",
    "start": "906550",
    "end": "912250"
  },
  {
    "text": "evolution to skylake which is a new system without rings more of a mesh it looks like this that's what we have in",
    "start": "912250",
    "end": "919180"
  },
  {
    "text": "the latest generation and these are smaller configurations okay so that's",
    "start": "919180",
    "end": "927130"
  },
  {
    "text": "what we're running on machines that look like that not a single CPU with a single cache in a single memory controller",
    "start": "927130",
    "end": "933460"
  },
  {
    "text": "it's important to keep those in mind now I'm gonna actually look at some machine",
    "start": "933460",
    "end": "938800"
  },
  {
    "text": "code next and and this is only gonna be a few minutes so those of you really don't like machine code just take a deep",
    "start": "938800",
    "end": "944500"
  },
  {
    "text": "breath it'll be over as promised for those who you like it enjoy the thing I used to zoom in to",
    "start": "944500",
    "end": "951400"
  },
  {
    "text": "machine code is a tool we call Zee vision a tassel there are other tools you could do the same way basically I",
    "start": "951400",
    "end": "957400"
  },
  {
    "text": "put my the code I want to look at into a hot loop fire up our web browser face profiler and zoom in and get stuff like",
    "start": "957400",
    "end": "964120"
  },
  {
    "text": "this and then I like to read it let's do that for a loop here's a really simple loop it adds all the numbers in an array",
    "start": "964120",
    "end": "972660"
  },
  {
    "text": "now I want to see what the machine code that does that looks like so here it is",
    "start": "972660",
    "end": "979570"
  },
  {
    "text": "it's very readable right now the tricking that I use to",
    "start": "979570",
    "end": "985840"
  },
  {
    "text": "read this machine code is the reason I put it into a hot loop in the profiler is it lets me figure out what I want to",
    "start": "985840",
    "end": "992080"
  },
  {
    "text": "read see our profiler tells us where we spend our time since I spent all my time",
    "start": "992080",
    "end": "997630"
  },
  {
    "text": "here I know that's the loop and I don't need to read any of the rest of the instructions now I could proudly read this okay here's the loop it actually",
    "start": "997630",
    "end": "1006090"
  },
  {
    "text": "has two moves into vector registers to add the vector registers and an add",
    "start": "1006090",
    "end": "1011550"
  },
  {
    "text": "around the loop it proudly laters takes all this stuff and adds it together but we could sort of see the read from",
    "start": "1011550",
    "end": "1017370"
  },
  {
    "text": "memory and the add operations on there so this is on a westby are pretty old CPU and it uses SSE instructions 128-bit",
    "start": "1017370",
    "end": "1026640"
  },
  {
    "text": "vectors to do an add that code is exactly what vectorizer x' were built to do right just go string this whole thing",
    "start": "1026640",
    "end": "1033209"
  },
  {
    "text": "and add it right now the cool thing about JIT compilers is they know what",
    "start": "1033209",
    "end": "1038850"
  },
  {
    "text": "machine they're running on and hopefully they understand the capabilities of that machine and use the right instructions",
    "start": "1038850",
    "end": "1044640"
  },
  {
    "text": "for that generation so for example this is what it looks like in an older machine here's what it looks like on a",
    "start": "1044640",
    "end": "1051630"
  },
  {
    "text": "Broadwell machine it uses different vector instructions they're twice as",
    "start": "1051630",
    "end": "1058080"
  },
  {
    "text": "wide for each and there's a load and add operation rather than a separate load",
    "start": "1058080",
    "end": "1063720"
  },
  {
    "text": "and a separate add operation so it's able to do a lot more for so avx2 just magically happens because",
    "start": "1063720",
    "end": "1070440"
  },
  {
    "text": "the dick compiler understands the CPU this by the way is with our Falcon JIT compiler which we're really proud of it",
    "start": "1070440",
    "end": "1076830"
  },
  {
    "text": "is all but generally I'm showing you what what you can do when you adapt to your machine now okay so far I was",
    "start": "1076830",
    "end": "1084300"
  },
  {
    "text": "looking at simple things this is exactly the demo anybody looking at vectorizing will show you but let's make it more",
    "start": "1084300",
    "end": "1090150"
  },
  {
    "text": "complicated let's take that cool loop and make it harder to deal with we'll",
    "start": "1090150",
    "end": "1095940"
  },
  {
    "text": "put a condition in there I want to add one array to another array but not for",
    "start": "1095940",
    "end": "1102750"
  },
  {
    "text": "every cell only for the cells that contain even numbers so I actually test",
    "start": "1102750",
    "end": "1107910"
  },
  {
    "text": "the number and if it's even on add if not I won't now this is exactly what",
    "start": "1107910",
    "end": "1113160"
  },
  {
    "text": "tends to break your Baker vectorizer if we go and look at the code for that we'll see that it becomes that it",
    "start": "1113160",
    "end": "1119940"
  },
  {
    "text": "actually unrolls the logic twice per loop so each loop is doing this two times those are the highlighted boxes",
    "start": "1119940",
    "end": "1125970"
  },
  {
    "text": "and you can directly see the operations there's a read of something from memory a test of it that's the is it even part",
    "start": "1125970",
    "end": "1133560"
  },
  {
    "text": "against one then a jump if you don't like the result then an add if you don't it's exactly what the code is doing one",
    "start": "1133560",
    "end": "1140340"
  },
  {
    "text": "by one right one instruction at a time for each value and yet unrolled it to do",
    "start": "1140340",
    "end": "1146220"
  },
  {
    "text": "two of them in a loop to sort of amortize the loop cost across it but we're not vectorizing here why because",
    "start": "1146220",
    "end": "1153570"
  },
  {
    "text": "we have to test whether or not we can do the operation for each one of them so this is a situation until recently but",
    "start": "1153570",
    "end": "1161240"
  },
  {
    "text": "CPUs have new features and those new features let you do cool stuff for example the avx2 instruction set",
    "start": "1161240",
    "end": "1168330"
  },
  {
    "text": "adds the ability to masked operations on vectors and this is what it the same",
    "start": "1168330",
    "end": "1175320"
  },
  {
    "text": "exact code ends up looking like now this is a little more to read but let me highlight a stripe through the loop this",
    "start": "1175320",
    "end": "1183270"
  },
  {
    "text": "loop actually does the same thing four times interleaved for scheduling but the",
    "start": "1183270",
    "end": "1189450"
  },
  {
    "text": "operations you see them are all vector operations the thing to highlight is not a single if not a single conditional",
    "start": "1189450",
    "end": "1195000"
  },
  {
    "text": "jump in the loop other than the loop itself what it's actually doing is it's reading eight",
    "start": "1195000",
    "end": "1201070"
  },
  {
    "text": "values into a vector register each one of those so 32 of them in the stripes then it's ending that row vector",
    "start": "1201070",
    "end": "1208480"
  },
  {
    "text": "register with something else probably the thing with all the ones and then it's testing whether that's equal to",
    "start": "1208480",
    "end": "1214570"
  },
  {
    "text": "some other register probably you think with all zeros and then the result of that is in ymm six so while I'm six has",
    "start": "1214570",
    "end": "1221710"
  },
  {
    "text": "the true/false value for each of the eight cells now it then does a masked",
    "start": "1221710",
    "end": "1227590"
  },
  {
    "text": "move from memory to another register masked with that true/false thing so",
    "start": "1227590",
    "end": "1232600"
  },
  {
    "text": "only the things for which we had a true result for the if I'm actually being loaded from memory it then performs an",
    "start": "1232600",
    "end": "1240250"
  },
  {
    "text": "ad of the vector register and stores back only the values that had a true on them so by using masked vector",
    "start": "1240250",
    "end": "1247840"
  },
  {
    "text": "operations we can now allow predicates and loops and still vectorize them that loop used to not be vectorizable on new",
    "start": "1247840",
    "end": "1254050"
  },
  {
    "text": "hardware it is well on new hardware if your JIT compiler understands what the hardware is able to do which Falcon",
    "start": "1254050",
    "end": "1260440"
  },
  {
    "text": "luckily does now that was broad well great now the cool thing about for us we",
    "start": "1260440",
    "end": "1268090"
  },
  {
    "text": "use our JIT basically uses LVM as a back in so we get to leverage this work lots",
    "start": "1268090",
    "end": "1273670"
  },
  {
    "text": "of other people do and some of those people or people work for Intel so they put in work even before the CPUs come",
    "start": "1273670",
    "end": "1280540"
  },
  {
    "text": "out and when the skylake CPUs came out we said I wonder what this code will",
    "start": "1280540",
    "end": "1287920"
  },
  {
    "text": "look like on that and without actually doing any work on our end we ran it and got this now it's using",
    "start": "1287920",
    "end": "1295690"
  },
  {
    "text": "vector registers that are twice as wide even yet so 512 bit registers I get 60",
    "start": "1295690",
    "end": "1304060"
  },
  {
    "text": "final operations per per loop because there's four stripes of this there's one",
    "start": "1304060",
    "end": "1309130"
  },
  {
    "text": "fewer instruction here because it uses an even newer predicated vector capability that I could Evi X 512 hasn't",
    "start": "1309130",
    "end": "1316120"
  },
  {
    "text": "it so even cooler and the coolest thing for us is we got this for free we didn't write a single line of code to get this",
    "start": "1316120",
    "end": "1322030"
  },
  {
    "text": "because we use LVM as a back-end it knows what a sky I can do and it generates the school code for it as long",
    "start": "1322030",
    "end": "1327670"
  },
  {
    "text": "as you the vector the looped it right form so",
    "start": "1327670",
    "end": "1333450"
  },
  {
    "text": "that was it for machine code I promised only five minutes right if you guys like",
    "start": "1333450",
    "end": "1339000"
  },
  {
    "text": "this sort of thing you could use either our tools or other tools out there to zoom in and see what your actual code",
    "start": "1339000",
    "end": "1344220"
  },
  {
    "text": "looks like I highly recommend putting your hot code into loops to be able to measure and see what they do okay so",
    "start": "1344220",
    "end": "1353130"
  },
  {
    "text": "what is better cheating about it's pretty simple it's about raising this this level right if you can get faster",
    "start": "1353130",
    "end": "1359100"
  },
  {
    "text": "code your speed will be better in the eventual semi stable state that's not a",
    "start": "1359100",
    "end": "1364610"
  },
  {
    "text": "surprise so let's talk a little about what compilers do to achieve this extra",
    "start": "1364610",
    "end": "1370380"
  },
  {
    "text": "speed or this speed in general I'm gonna",
    "start": "1370380",
    "end": "1375480"
  },
  {
    "text": "go through very simple step and build up from them you don't need any basic compiler knowledge for this or anything",
    "start": "1375480",
    "end": "1381690"
  },
  {
    "text": "like that hopefully it's not too slow for people but let's look at what compilers are allowed to do and what",
    "start": "1381690",
    "end": "1387660"
  },
  {
    "text": "they'll do here's some code not very smart or reasonable code just code and the compiler is allowed to take this",
    "start": "1387660",
    "end": "1394620"
  },
  {
    "text": "code and reorder what it does as long as it doesn't change the actual meaning of the results or the observable results so",
    "start": "1394620",
    "end": "1401790"
  },
  {
    "text": "for example I could change where in the order this line is executed it's okay to",
    "start": "1401790",
    "end": "1407400"
  },
  {
    "text": "do that compiler is also allowed to remove dead code so for example this",
    "start": "1407400",
    "end": "1413340"
  },
  {
    "start": "1410000",
    "end": "1410000"
  },
  {
    "text": "line actually doesn't do anything anybody can observe there's no result",
    "start": "1413340",
    "end": "1418680"
  },
  {
    "text": "that you can see outside of this function to running this line or not and I could say this is that code I can",
    "start": "1418680",
    "end": "1424440"
  },
  {
    "text": "remove it I can also basically say let's run this code really really fast nobody will know the difference right remember",
    "start": "1424440",
    "end": "1431580"
  },
  {
    "text": "every time we remove code that's like a sake acting like we did it but you don't know because you can't tell and if you",
    "start": "1431580",
    "end": "1437340"
  },
  {
    "text": "can't tell we're allowed to do it so that code could be eliminated we don't",
    "start": "1437340",
    "end": "1442680"
  },
  {
    "text": "actually have to run it we can propagate values directly we don't actually have",
    "start": "1442680",
    "end": "1447810"
  },
  {
    "text": "to go through all these intermediate temporary things that you wrote in the code we could figure out where they're",
    "start": "1447810",
    "end": "1453060"
  },
  {
    "text": "going to propagate to and it eliminate the middle steps so we can actually simplify that to that",
    "start": "1453060",
    "end": "1458890"
  },
  {
    "text": "and compilers obviously know how to do some simple math like plus y minus y",
    "start": "1458890",
    "end": "1464200"
  },
  {
    "text": "proudly cancels each other out so we can optimize it to this and there's a really",
    "start": "1464200",
    "end": "1469780"
  },
  {
    "text": "simple step pretty much any compiler on any language will be able to do this and simplify the code right okay more simple",
    "start": "1469780",
    "end": "1479620"
  },
  {
    "text": "tricks we can use the data that we propagate into flow control things like",
    "start": "1479620",
    "end": "1485890"
  },
  {
    "start": "1480000",
    "end": "1480000"
  },
  {
    "text": "ifs to effect what we do for example here's a piece of code that has two",
    "start": "1485890",
    "end": "1491230"
  },
  {
    "text": "possible things to do depending on the value on the range of the value some",
    "start": "1491230",
    "end": "1496780"
  },
  {
    "text": "complicated stuff or simple stuff but we can see that value equals five so we probably can propagate that through the",
    "start": "1496780",
    "end": "1503350"
  },
  {
    "text": "code and simplify them all method to this right we know value is five we know",
    "start": "1503350",
    "end": "1510070"
  },
  {
    "text": "that bias is one we know to return one just eliminate the part of the if that",
    "start": "1510070",
    "end": "1515590"
  },
  {
    "text": "we know won't right we can cash reads so simple way to look at that is here's",
    "start": "1515590",
    "end": "1522280"
  },
  {
    "text": "code that says I want to read from a dot X twice I'm allowed to read once and use",
    "start": "1522280",
    "end": "1528040"
  },
  {
    "text": "it twice you can put in some temporary value temporary register I don't have to read it again from that memory location",
    "start": "1528040",
    "end": "1534460"
  },
  {
    "text": "just because you wrote it right and I can do that as much as I want so not just two into one I could do a",
    "start": "1534460",
    "end": "1541270"
  },
  {
    "text": "lot into one for example here's a here's a piece of code that says loop as long",
    "start": "1541270",
    "end": "1546820"
  },
  {
    "text": "as nobody has set this flied and the compiler is allowed to optimize it to",
    "start": "1546820",
    "end": "1551919"
  },
  {
    "text": "read the flag put in a register and loop as long as the value of my register isn't changing which it won't this is an",
    "start": "1551919",
    "end": "1558549"
  },
  {
    "text": "infinite loop this is what the word volatile is for it's to say please don't",
    "start": "1558549",
    "end": "1565390"
  },
  {
    "text": "cash this read you have to read it again every time I say because I'm actually interested in what other people might have done to it if you don't save",
    "start": "1565390",
    "end": "1571750"
  },
  {
    "text": "volatile you don't mean read it again okay you can similarly eliminate",
    "start": "1571750",
    "end": "1579820"
  },
  {
    "text": "redundant writes so for example if I wrote to the same location multiple times I could say if I were really",
    "start": "1579820",
    "end": "1586960"
  },
  {
    "text": "really fast you will never see those other writes right so since it's possible that I ran so fast you'll never see it I",
    "start": "1586960",
    "end": "1593540"
  },
  {
    "text": "don't actually have to do the things that you might never see and I'll just do this so redundant rights can be",
    "start": "1593540",
    "end": "1600950"
  },
  {
    "text": "eliminated again doing this in force rather than running a loop with a",
    "start": "1600950",
    "end": "1606020"
  },
  {
    "text": "million stores we can just do the final store I just eliminated a million loop a",
    "start": "1606020",
    "end": "1612050"
  },
  {
    "text": "million iterations on a loop because I can read ently eliminate the rights in",
    "start": "1612050",
    "end": "1618740"
  },
  {
    "text": "lining most people know what inlining is it's taking a function and pulling the",
    "start": "1618740",
    "end": "1625100"
  },
  {
    "text": "code into the caller here's a method that is final we know it's the only",
    "start": "1625100",
    "end": "1631240"
  },
  {
    "text": "method that does this thing and we have someplace that there's thing get X I can",
    "start": "1631240",
    "end": "1637400"
  },
  {
    "text": "optimize this code to just read the field directly don't make a method call",
    "start": "1637400",
    "end": "1642429"
  },
  {
    "text": "now this is the simple meaning of inlining but this is not where the real",
    "start": "1642429",
    "end": "1647840"
  },
  {
    "text": "powerful learning comes from yes I eliminated some overhead of making a call but the real power of inlining",
    "start": "1647840",
    "end": "1653000"
  },
  {
    "text": "comes from propagating optimizations into that code for example here's a",
    "start": "1653000",
    "end": "1658370"
  },
  {
    "text": "variant of the previous code but now I don't know what value is it's a",
    "start": "1658370",
    "end": "1664940"
  },
  {
    "text": "parameter so I don't know which way to if is gonna go but if a caller that's calling this with a 5 if I can inline",
    "start": "1664940",
    "end": "1672770"
  },
  {
    "text": "that code I can propagate the find and I could optimize the entire method away",
    "start": "1672770",
    "end": "1678309"
  },
  {
    "text": "this goes to a very deep scope this is why je viens will in line 9 deep sometimes just to get more of the",
    "start": "1678309",
    "end": "1684590"
  },
  {
    "text": "optimizations to other optimizations in and applying to more of the code because you can now optimize across these",
    "start": "1684590",
    "end": "1690200"
  },
  {
    "text": "boundaries that's the real power of in lighting now those were the simple",
    "start": "1690200",
    "end": "1696170"
  },
  {
    "text": "things that most compilers do I'm gonna go and measure some stuff a little like that hot code loop thing that I talked",
    "start": "1696170",
    "end": "1701660"
  },
  {
    "text": "about but let's try to measure how fast things go and I'll show you some simple",
    "start": "1701660",
    "end": "1707270"
  },
  {
    "start": "1706000",
    "end": "1706000"
  },
  {
    "text": "problems so for example I want to see how quickly I could do plus plus so I'll",
    "start": "1707270",
    "end": "1713240"
  },
  {
    "text": "put a loop around some plus plus and measure how long it takes to do this loop there's some sort of framework and",
    "start": "1713240",
    "end": "1718970"
  },
  {
    "text": "if I measure it I'll find out that I can do this look really really fast like this fast",
    "start": "1718970",
    "end": "1724299"
  },
  {
    "text": "and that's so fast it's prolly not reasonable that this is really a good measurement right we don't have any",
    "start": "1724299",
    "end": "1730850"
  },
  {
    "text": "hardware that can do this fast it's just impossible result so something's going",
    "start": "1730850",
    "end": "1736730"
  },
  {
    "text": "on here probably the compiler is figuring out some trick it's too simple to to measure so let's make it a little",
    "start": "1736730",
    "end": "1743120"
  },
  {
    "text": "more complicated so we can actually measure it maybe if we do the math you",
    "start": "1743120",
    "end": "1748429"
  },
  {
    "text": "know something that accumulates different values like plus equals I and then it's more complicated maybe I can",
    "start": "1748429",
    "end": "1754370"
  },
  {
    "text": "make the compiler not optimize that away but that also is impossibly fast the",
    "start": "1754370",
    "end": "1759799"
  },
  {
    "text": "reason for it in this code is the entire method is that code this is a avoid",
    "start": "1759799",
    "end": "1766190"
  },
  {
    "text": "method with no memory side-effects whatever happens in it you're never going to see so I can just return we're",
    "start": "1766190",
    "end": "1775730"
  },
  {
    "text": "just measuring how fast we make a method call that's all we're doing when we're measuring this thing so what can we do",
    "start": "1775730",
    "end": "1782720"
  },
  {
    "text": "to defeat that because we're actually trying to measure how fast this thing is well we can propagate state out so that",
    "start": "1782720",
    "end": "1790850"
  },
  {
    "text": "the compiler can optimize it away so I'll return the sum now I've got",
    "start": "1790850",
    "end": "1795889"
  },
  {
    "text": "something somebody else can observe so I actually have to compute the result right so here's the loop we'll measure",
    "start": "1795889",
    "end": "1801799"
  },
  {
    "text": "that turns out you know unfortunately that's still impossibly fast because the compiler knows that the final value of",
    "start": "1801799",
    "end": "1808639"
  },
  {
    "text": "sum is going to be count so it eliminates the loop okay so let's try",
    "start": "1808639",
    "end": "1816350"
  },
  {
    "text": "and make it more complicated let's go back to the idea of okay something more complicated and we know the value is",
    "start": "1816350",
    "end": "1821840"
  },
  {
    "text": "going to be this at the end now we actually have to do math is this better well it is better so both regular",
    "start": "1821840",
    "end": "1829250"
  },
  {
    "text": "hotspot OpenJDK and our previous version of a JIT compiler on Xing looked at that",
    "start": "1829250",
    "end": "1836720"
  },
  {
    "text": "and actually ran it unfortunately with with with Falcon the compiler smart",
    "start": "1836720",
    "end": "1842419"
  },
  {
    "text": "enough to say that's an arithmetic series I know how to do count savings count minus 1 over 2 and I don't have to",
    "start": "1842419",
    "end": "1847970"
  },
  {
    "text": "run a loop again one of those things we didn't build LVM lots of people work on",
    "start": "1847970",
    "end": "1854419"
  },
  {
    "text": "it some academic person somewhere I don't know who you are but thank you proudly sat",
    "start": "1854419",
    "end": "1860930"
  },
  {
    "text": "there and thought it would be cute to recognize an arithmetic series and optimize it away I don't know what that's good for in the real world but",
    "start": "1860930",
    "end": "1867290"
  },
  {
    "text": "it's great for defeating benchmark measurements okay so it used to be good",
    "start": "1867290",
    "end": "1874700"
  },
  {
    "text": "enough to make the compilers not figure it out and now it isn't and that that's the lesson here things change okay so",
    "start": "1874700",
    "end": "1881020"
  },
  {
    "text": "how about this turns out you can prove the result is zero here's what I do",
    "start": "1881020",
    "end": "1887450"
  },
  {
    "text": "today today highlight on today to beat all the compilers I know of in Java today like if I do this on everything I",
    "start": "1887450",
    "end": "1896300"
  },
  {
    "text": "know of it doesn't know how to optimize it and actually measures it okay now notice that since I put a slide up here",
    "start": "1896300",
    "end": "1903170"
  },
  {
    "text": "some guy is gonna say hmm there are only eight possible ways for that to look I can optimize that",
    "start": "1903170",
    "end": "1910600"
  },
  {
    "text": "but for now they haven't figured it out right okay so those were some micro",
    "start": "1911180",
    "end": "1917210"
  },
  {
    "start": "1917000",
    "end": "1917000"
  },
  {
    "text": "benchmarks what are the takeaways here first of all it's hard to micro benchmark and figure out if you're actually measuring speed this is tricky",
    "start": "1917210",
    "end": "1924650"
  },
  {
    "text": "so you need to sanity check everything you do just sanity check and and figure",
    "start": "1924650",
    "end": "1931100"
  },
  {
    "text": "it out and not only sanity check of the code the way you wrote it put in sanity checking code because things that work",
    "start": "1931100",
    "end": "1937640"
  },
  {
    "text": "today might stop measuring in the next JVM version you get to run it so even",
    "start": "1937640",
    "end": "1943130"
  },
  {
    "text": "though it currently measured maybe it'll stop measuring tomorrow so sanity check",
    "start": "1943130",
    "end": "1948680"
  },
  {
    "text": "everything disbelieve everything if you give the thing that's twice as much work",
    "start": "1948680",
    "end": "1953930"
  },
  {
    "text": "and it doesn't take any more time something is wrong all right if I increase the loop count and it doesn't",
    "start": "1953930",
    "end": "1960110"
  },
  {
    "text": "get longer probably wrong that's an easy sanity check anybody here know what jmh",
    "start": "1960110",
    "end": "1965480"
  },
  {
    "text": "is good some more of you should too as well so use gah use gmh use gah it's a it's a",
    "start": "1965480",
    "end": "1973430"
  },
  {
    "text": "basically a framework for running micro benchmarks it's with open to decay it helps you say he'll help save you from a",
    "start": "1973430",
    "end": "1980000"
  },
  {
    "text": "lot of mistakes in building micro benchmarks however even with use jmh you",
    "start": "1980000",
    "end": "1986930"
  },
  {
    "text": "should sanity check everything why every single micro benchmark just showed you was run with jmh so",
    "start": "1986930",
    "end": "1994489"
  },
  {
    "text": "Jimmy CH doesn't magically make these problems not happen it makes other problems that happen",
    "start": "1994489",
    "end": "1999729"
  },
  {
    "text": "okay so that was our micro benchmarking detour let's get back to compiler stuff",
    "start": "1999729",
    "end": "2005009"
  },
  {
    "text": "we talked about simple compiler things JVMs get to do other compiler things",
    "start": "2005009",
    "end": "2012609"
  },
  {
    "text": "that are hard to do in static compilations they get to speculate they get to hope that something is true even",
    "start": "2012609",
    "end": "2019359"
  },
  {
    "text": "though we can't prove it's true because we can detect if it becomes untrue and throw away the code we can't do that on",
    "start": "2019359",
    "end": "2026649"
  },
  {
    "text": "the static compiler because we can't come back to in compile gonna ask given the other code and that gives us a lot",
    "start": "2026649",
    "end": "2034359"
  },
  {
    "start": "2033000",
    "end": "2033000"
  },
  {
    "text": "of power to optimize things even further based on that a lot of the speed and",
    "start": "2034359",
    "end": "2040509"
  },
  {
    "text": "current JVMs comes from the specular optimization capability probably more than half here's an example of",
    "start": "2040509",
    "end": "2048299"
  },
  {
    "text": "speculation I have this code I don't know which way it's gonna go but I've run it a hundred thousand times and it's",
    "start": "2048299",
    "end": "2055358"
  },
  {
    "text": "never seen a value bigger than ten so I can speculate that I'm not gonna see a",
    "start": "2055359",
    "end": "2061750"
  },
  {
    "text": "value bigger than ten a common term used by speculative compilers is on comment",
    "start": "2061750",
    "end": "2066970"
  },
  {
    "text": "rapid if this happens just I don't know give up go to the interpreter don't want this code it's not correct it's the get",
    "start": "2066970",
    "end": "2075099"
  },
  {
    "text": "out of here right but if that doesn't happen I know what what the result is now you could",
    "start": "2075099",
    "end": "2081520"
  },
  {
    "text": "look at this and say you could have put the slower code under that if and yes you could but this becomes combinatoric",
    "start": "2081520",
    "end": "2088720"
  },
  {
    "text": "lee complex and hard and creates really rigged code if you're in lining nine deep and doing every possible if in all",
    "start": "2088720",
    "end": "2096339"
  },
  {
    "text": "combinations that way so it becomes untenable very quickly so the ability to say I just don't want to deal with that",
    "start": "2096339",
    "end": "2102760"
  },
  {
    "text": "case just get out of here is very powerful a really simple speculative",
    "start": "2102760",
    "end": "2109329"
  },
  {
    "start": "2107000",
    "end": "2107000"
  },
  {
    "text": "optimization of JVM can do and you can't do in a static compiler is a null check elimination so every time you write Java",
    "start": "2109329",
    "end": "2117549"
  },
  {
    "text": "code that accesses a field or an element an array what you're actually writing is",
    "start": "2117549",
    "end": "2122680"
  },
  {
    "text": "equivalent to that statement not just access the field but first check that are not going through an all if that is",
    "start": "2122680",
    "end": "2128980"
  },
  {
    "text": "an Ultron I'll check nullpointerexception but otherwise let's do the thing you said every single field",
    "start": "2128980",
    "end": "2135640"
  },
  {
    "text": "access you do does this and if we actually executed that it'll be slow we don't want to do that every time what",
    "start": "2135640",
    "end": "2141670"
  },
  {
    "text": "the JVM will actually do is say I don't think you're gonna give me enough I'm",
    "start": "2141670",
    "end": "2146680"
  },
  {
    "text": "just an access through this thing what's the worst that'll happen well you gave me a no I'm gonna take a segue the JVM",
    "start": "2146680",
    "end": "2155230"
  },
  {
    "text": "will intercept default they'll say where were wait before I crash where did this happen oh it happened there and I",
    "start": "2155230",
    "end": "2161980"
  },
  {
    "text": "limited a null check there I probably should throw an exception and not",
    "start": "2161980",
    "end": "2167200"
  },
  {
    "text": "actually crash and that's exactly what it does and by doing that it eliminates all the null checks and all the field",
    "start": "2167200",
    "end": "2173770"
  },
  {
    "text": "accesses you do that are not actually seeing off which is hopefully most of them right now if you do see you know",
    "start": "2173770",
    "end": "2183780"
  },
  {
    "text": "that is expensive as in a hundred thousand times more expensive than the",
    "start": "2183780",
    "end": "2189100"
  },
  {
    "text": "if would have been so it better not happen a lot right you don't throw a lot of knowledge suit I hope but what the",
    "start": "2189100",
    "end": "2197650"
  },
  {
    "text": "JVM will do then is say ok I've got this really weird bad code and it's throwing all trick exceptions all over the place",
    "start": "2197650",
    "end": "2204100"
  },
  {
    "text": "if it doesn't too much right now too much is more than twice for that point in code it'll just the optimize the code",
    "start": "2204100",
    "end": "2211120"
  },
  {
    "text": "put the F in it and run it with it because it doesn't like taking selfies all the time but it'll assume that you",
    "start": "2211120",
    "end": "2217150"
  },
  {
    "text": "want throw seg fees if you do thrum then the code wall evolved to handle them fast right but then we get to throw away",
    "start": "2217150",
    "end": "2224320"
  },
  {
    "text": "all the other checks that are not necessary because we've got virtual memory hardware that does it force class",
    "start": "2224320",
    "end": "2231220"
  },
  {
    "start": "2230000",
    "end": "2230000"
  },
  {
    "text": "our key analysis is a really cool set of optimizations basically it relies on a",
    "start": "2231220",
    "end": "2236890"
  },
  {
    "text": "knowledge of the JVM of the entire code as it stands right now so we can see all the code we could analyze things about",
    "start": "2236890",
    "end": "2243790"
  },
  {
    "text": "it we can assume things based on an analysis and then if we later load a",
    "start": "2243790",
    "end": "2250870"
  },
  {
    "text": "class that breaks that assumption we can say that other code needs to disappear",
    "start": "2250870",
    "end": "2256060"
  },
  {
    "text": "before this class gets load so that linkage of I can register",
    "start": "2256060",
    "end": "2261680"
  },
  {
    "text": "assumptions I can check whether the assumptions are still true before I load the code I can blow way code that makes",
    "start": "2261680",
    "end": "2267260"
  },
  {
    "text": "wrong assumptions but I don't have to blow it away if the assumptions are still true it's very powerful here's an",
    "start": "2267260",
    "end": "2275750"
  },
  {
    "text": "actual example of how powerful it is and this is actually responsible for the fact that most people write clean",
    "start": "2275750",
    "end": "2282530"
  },
  {
    "start": "2276000",
    "end": "2276000"
  },
  {
    "text": "object-oriented code in Java if this optimization wasn't true we would be writing different remember this example",
    "start": "2282530",
    "end": "2290300"
  },
  {
    "text": "I gave you before of trying to inline a method well if the method is final we",
    "start": "2290300",
    "end": "2295430"
  },
  {
    "text": "know we can inline it but what if it's not final I mean if I make a method",
    "start": "2295430",
    "end": "2301400"
  },
  {
    "text": "final I've stopped the extensibility of I can't extend this method anymore right I can't override its its behavior I have",
    "start": "2301400",
    "end": "2308540"
  },
  {
    "text": "an animal here it's got some color may most animals are gonna return that color but maybe somebody someday will need to",
    "start": "2308540",
    "end": "2315380"
  },
  {
    "text": "override it I want to extend the code later so what can I do about this well",
    "start": "2315380",
    "end": "2321890"
  },
  {
    "text": "with class our key analysis we can actually sit there and say okay the code has a virtual method calling it but",
    "start": "2321890",
    "end": "2329780"
  },
  {
    "text": "right now in the known universe I have cats and dogs and birds and none of them",
    "start": "2329780",
    "end": "2335780"
  },
  {
    "text": "have overwritten yet color there's only one implementer of get color in the known universe that's it so I can",
    "start": "2335780",
    "end": "2341450"
  },
  {
    "text": "actually inline the code that is why getters and setters are free this is why",
    "start": "2341450",
    "end": "2348800"
  },
  {
    "text": "we don't have to expose fields to the outside world this is why we don't have to put finals and our getters and",
    "start": "2348800",
    "end": "2355640"
  },
  {
    "text": "setters this is why we get clean and capsulated object-oriented code it's all",
    "start": "2355640",
    "end": "2361460"
  },
  {
    "text": "because of class our key analysis this is true as long as only one implementer does this which is the case for most",
    "start": "2361460",
    "end": "2367430"
  },
  {
    "text": "getters and setters right so class our key analysis is very powerful but what",
    "start": "2367430",
    "end": "2375050"
  },
  {
    "text": "if we did override get color what if we had this thing and now we put a",
    "start": "2375050",
    "end": "2380990"
  },
  {
    "text": "chameleon in the universe and a chameleon derives its color from the branch that it sits on so we need to",
    "start": "2380990",
    "end": "2386630"
  },
  {
    "text": "override it and now it broke the assumption I throw away that nice up to mice code they still want to run this and I still want to run",
    "start": "2386630",
    "end": "2392369"
  },
  {
    "text": "it fast without a virtual call well I can't prove that that will work but if I",
    "start": "2392369",
    "end": "2398760"
  },
  {
    "text": "look at this code and for some reason this code is part of a dog kennel and dog kennels have only seen dogs they",
    "start": "2398760",
    "end": "2404670"
  },
  {
    "text": "don't see chameleons the optimizer could say based on our profile I'm gonna guess that this is a dog and if it's not a dog",
    "start": "2404670",
    "end": "2412260"
  },
  {
    "text": "uncommon trap I don't know what to do about this rent slow if it is a dog we know what to do",
    "start": "2412260",
    "end": "2417829"
  },
  {
    "text": "that's a guarded inlining or a guarded static call if you'd like with an",
    "start": "2417829",
    "end": "2423240"
  },
  {
    "text": "inlining after it that you can do again a speculation based on a profile now I",
    "start": "2423240",
    "end": "2434700"
  },
  {
    "text": "give you examples of speculation I think yeah we're good on time speculation",
    "start": "2434700",
    "end": "2442770"
  },
  {
    "text": "relies on the ability to be wrong on the fact that if we find out that the",
    "start": "2442770",
    "end": "2448049"
  },
  {
    "text": "speculation is incorrect we can blow away the code and that's what the optimization means we've optimized",
    "start": "2448049",
    "end": "2453980"
  },
  {
    "text": "speculatively the optimization means throw away that code without the optimization we're not allowed to do",
    "start": "2453980",
    "end": "2460500"
  },
  {
    "text": "these speculations so the optimization is a key feature we need to make all this code we're in fest and going back",
    "start": "2460500",
    "end": "2467789"
  },
  {
    "text": "to this picture the optimization is what these backwards spikes are about we",
    "start": "2467789",
    "end": "2474450"
  },
  {
    "text": "evolve the code it went into the blue stuff it made some guesses some of them",
    "start": "2474450",
    "end": "2479849"
  },
  {
    "text": "were wrong when it hit the wrong guesses at the optimize went back to the interpreter went through the cycle again",
    "start": "2479849",
    "end": "2486349"
  },
  {
    "text": "remembered the wrong thing so it's not going to do that again and optimized knowing that hey you are throwing null",
    "start": "2486349",
    "end": "2493200"
  },
  {
    "text": "pointer exceptions in that place or there sometimes our chameleons and in dog kennels or whatever it is it ran",
    "start": "2493200",
    "end": "2499619"
  },
  {
    "text": "into right that's why we get these spikes now these spikes happen not just",
    "start": "2499619",
    "end": "2506309"
  },
  {
    "text": "at the beginning they happen when reality changes when the behavior of a program evolves to new things that just",
    "start": "2506309",
    "end": "2513270"
  },
  {
    "text": "haven't been experienced before and that makes it a little bit difficult to know if you're done optimizing so you're",
    "start": "2513270",
    "end": "2520230"
  },
  {
    "text": "probably done optimizing if you see no more optimizations but you don't know that you're optimizing because you've run a hundred",
    "start": "2520230",
    "end": "2526230"
  },
  {
    "text": "thousand things through it or because you've warmed it up and it stopped compiling for now for example well I'll",
    "start": "2526230",
    "end": "2536790"
  },
  {
    "text": "give you an example in a second so micro benchmarking is hard but warming up is even harder because you really really",
    "start": "2536790",
    "end": "2544110"
  },
  {
    "text": "don't know when did the optimizations are done happening and there are many",
    "start": "2544110",
    "end": "2550050"
  },
  {
    "text": "many potential causes for the optimization including the initialization of classes or non",
    "start": "2550050",
    "end": "2556050"
  },
  {
    "text": "initialization of classes and any value that we might speculate on but let me",
    "start": "2556050",
    "end": "2561090"
  },
  {
    "text": "give you a practical example from financial services suppose you're trading and suppose you care about",
    "start": "2561090",
    "end": "2567420"
  },
  {
    "text": "running trades fast people care for some reason about that and you want to be",
    "start": "2567420",
    "end": "2573300"
  },
  {
    "text": "fast when the market opens right you don't want to run interpreted code for ten thousand operations and then go fast",
    "start": "2573300",
    "end": "2579450"
  },
  {
    "text": "other people make a lot of money on you if you do that so you're gonna train your system you're gonna warm it up",
    "start": "2579450",
    "end": "2585330"
  },
  {
    "text": "before you actually run the first real trade because you want to be fast how do you warm it up well you give it to fake",
    "start": "2585330",
    "end": "2591420"
  },
  {
    "text": "things to do you get yesterday's trades and you run them through or you make",
    "start": "2591420",
    "end": "2596640"
  },
  {
    "text": "stuff up whatever it is you give it twenty thousand a hundred thousand whatever enough is get the JIT compiler",
    "start": "2596640",
    "end": "2602280"
  },
  {
    "text": "to run warm it up see that all the compiles are done now I'm past that initial warm-up phase now I'm ready for",
    "start": "2602280",
    "end": "2608700"
  },
  {
    "text": "the trade well that sounds really good except that if you're doing fake stuff",
    "start": "2608700",
    "end": "2614190"
  },
  {
    "text": "it prolly goes through different code paths somewhere if you're not careful super super careful and for example if",
    "start": "2614190",
    "end": "2623340"
  },
  {
    "text": "it's a fake message maybe we don't really want to send it to the exchange or maybe we'll send it in a different",
    "start": "2623340",
    "end": "2629520"
  },
  {
    "text": "way or maybe we'll tag it in some other way anything you do different in code about the fact that it's fake is",
    "start": "2629520",
    "end": "2635670"
  },
  {
    "text": "different and guess what you just did a hundred thousand fake things what do you think that your compiler is assuming",
    "start": "2635670",
    "end": "2641430"
  },
  {
    "text": "you're gonna be doing fake things it's basic optimization is look they're never",
    "start": "2641430",
    "end": "2646860"
  },
  {
    "text": "trading let's optimize for not trading so what happens on the first trade give",
    "start": "2646860",
    "end": "2654450"
  },
  {
    "text": "the optimize your running interpreted code for a little while until you learn better that's what's hard about this stuff the",
    "start": "2654450",
    "end": "2661750"
  },
  {
    "text": "actual warm-up ended up looking like this you got this nice one right then you get hit with the actual reality and",
    "start": "2661750",
    "end": "2667540"
  },
  {
    "text": "you get to be slow for a little while or the evolution is all the lazy loading",
    "start": "2667540",
    "end": "2674050"
  },
  {
    "text": "and aggressive optimizations and evolution we showed before and then boom the optimization is this part so what",
    "start": "2674050",
    "end": "2682660"
  },
  {
    "text": "can we do about this well this is where you know and it's all we actually make G VMs that address some",
    "start": "2682660",
    "end": "2689350"
  },
  {
    "text": "real-world problems not all of them but some of them like this one and what you",
    "start": "2689350",
    "end": "2694690"
  },
  {
    "text": "can do about this for example is to log in replay optimizations across runs so",
    "start": "2694690",
    "end": "2700650"
  },
  {
    "start": "2695000",
    "end": "2695000"
  },
  {
    "text": "imagine that you can actually say while I'm running today's stuff let's just record all the",
    "start": "2700650",
    "end": "2705970"
  },
  {
    "text": "stuff we learned all the optimizations that happen all the inputs to them all the profiles eventually this thing will",
    "start": "2705970",
    "end": "2713680"
  },
  {
    "text": "stabilize at least enough to see the entire experience of the day or the week or whatever we did and then next time we",
    "start": "2713680",
    "end": "2719650"
  },
  {
    "text": "run we'll just say could you please start with that and we start with that and we just prime all the profiles to",
    "start": "2719650",
    "end": "2725830"
  },
  {
    "text": "then whatever we learned what the profiles are what to do what not to do so we don't the optimize if we do it and",
    "start": "2725830",
    "end": "2733000"
  },
  {
    "text": "then you just load the JVM and make it run through that stuff before you trade",
    "start": "2733000",
    "end": "2738850"
  },
  {
    "text": "or before you put it in the market or you before you put it on your load balancer for a web service you can even",
    "start": "2738850",
    "end": "2744400"
  },
  {
    "text": "work build a workflow that'll say can you please tell me if any of the optimizations that have been applied",
    "start": "2744400",
    "end": "2750460"
  },
  {
    "text": "yesterday have not yet been applied on this run and if so why for example maybe",
    "start": "2750460",
    "end": "2756850"
  },
  {
    "text": "there's these five optimizations that were done yesterday but not done yet and maybe the reason for that is you haven't",
    "start": "2756850",
    "end": "2763540"
  },
  {
    "text": "initialized those 15 classes that they depend on yet so if you initialize them then we'll get the optimization you can",
    "start": "2763540",
    "end": "2768760"
  },
  {
    "text": "work this so that the list will be 0 so you know that whatever that optimized yesterday is already optimized before",
    "start": "2768760",
    "end": "2774190"
  },
  {
    "text": "you turn on the first transaction that's a cool thing and that will basically",
    "start": "2774190",
    "end": "2779640"
  },
  {
    "text": "load this thing up and also flatten the warm up itself because you don't have to learn from doing 10,000 things you",
    "start": "2779640",
    "end": "2786850"
  },
  {
    "text": "already have the learning from the previous right what does that do to the picture well it",
    "start": "2786850",
    "end": "2793510"
  },
  {
    "text": "pulls it up to the left right all that warm-up experience could become not",
    "start": "2793510",
    "end": "2798520"
  },
  {
    "text": "entirely vertical but a lot more vertical than it is today so we've improved the speed by",
    "start": "2798520",
    "end": "2806410"
  },
  {
    "text": "optimizing more and we've improved how early and how quickly we get to that",
    "start": "2806410",
    "end": "2812050"
  },
  {
    "text": "speed what else is missing in this picture well we have these dips and even",
    "start": "2812050",
    "end": "2818260"
  },
  {
    "text": "though we're going fast and even though we go fast from early on we still slowed down to an absolute zero every once in a",
    "start": "2818260",
    "end": "2824680"
  },
  {
    "text": "while and that's where actually solving the GC problem comes in to make speed actually work consistently so this is",
    "start": "2824680",
    "end": "2833980"
  },
  {
    "text": "where I'm gonna brag a little bit we've got a few minutes for me to brag I think yeah tiny a few minutes the c-4",
    "start": "2833980",
    "end": "2842230"
  },
  {
    "text": "collector is a collector we have in xìng it basically eliminates GC problems it makes an application that behaves like",
    "start": "2842230",
    "end": "2847869"
  },
  {
    "start": "2846000",
    "end": "2846000"
  },
  {
    "text": "this behave like that I don't care what the application is if it behaves like that in garbage collection is involved",
    "start": "2847869",
    "end": "2853900"
  },
  {
    "text": "it'll behave like the thing on the right this is Cassandra by the way but a low latency app is just the same it also",
    "start": "2853900",
    "end": "2860589"
  },
  {
    "text": "makes tuning a lot less needed so for example some of you might recognize some of these flags okay yeah some of you",
    "start": "2860589",
    "end": "2869109"
  },
  {
    "start": "2861000",
    "end": "2861000"
  },
  {
    "text": "for example maybe on Monday you need this and on Tuesday you need that or maybe somebody change the code or maybe",
    "start": "2869109",
    "end": "2875950"
  },
  {
    "text": "just different applications who knows here's some more flags you can study about or you could just say I'm sick of",
    "start": "2875950",
    "end": "2884770"
  },
  {
    "text": "putting duct tape on my application what if we just use a modern collector that doesn't need tuning and let's just give",
    "start": "2884770",
    "end": "2891580"
  },
  {
    "text": "it a lot of heap but then that's a waste right so squeeze it and squeeze it and squeeze it and squeeze it do that until",
    "start": "2891580",
    "end": "2897730"
  },
  {
    "text": "it breaks then turn it back two notches go home you're done tuning that's the",
    "start": "2897730",
    "end": "2904359"
  },
  {
    "text": "real-world experience that you can have today by the way this is Cassandra running on a AWS cluster with no tuning",
    "start": "2904359",
    "end": "2913869"
  },
  {
    "text": "that's the 1 million second pause point this is not a low latency system",
    "start": "2913869",
    "end": "2920980"
  },
  {
    "text": "and things could become really really good if you do that for example if you",
    "start": "2920980",
    "end": "2926470"
  },
  {
    "start": "2923000",
    "end": "2923000"
  },
  {
    "text": "actually have workloads that have SSL lanes like these for example these are",
    "start": "2926470",
    "end": "2932140"
  },
  {
    "text": "not very aggressive and you want to know how many machines you need to carry that workload without making your customers",
    "start": "2932140",
    "end": "2939820"
  },
  {
    "text": "angry then you can measure that in this specific case from improved digital on",
    "start": "2939820",
    "end": "2946060"
  },
  {
    "text": "AWS was you know they got this many transactions out of a well-tuned hotspot with two months of consulting and they",
    "start": "2946060",
    "end": "2953950"
  },
  {
    "text": "put it on Singh and they got that out of the same AWS machines this is not because we get the compilers to run",
    "start": "2953950",
    "end": "2960190"
  },
  {
    "text": "faster or the code to run faster that's only 13% of this we are faster running",
    "start": "2960190",
    "end": "2965470"
  },
  {
    "text": "this but not that faster this is because you could just push the machine harder before it cracks because there's dips or",
    "start": "2965470",
    "end": "2972490"
  },
  {
    "text": "what makes this a leg break and you know you could basically take behaviors that",
    "start": "2972490",
    "end": "2978700"
  },
  {
    "text": "look like this with success rates the fall way slow to behavior that looks like what happens on the right there",
    "start": "2978700",
    "end": "2984130"
  },
  {
    "text": "when you convert to sing so what this really means is we have the features",
    "start": "2984130",
    "end": "2989140"
  },
  {
    "text": "that do all these three things we have Falcon it makes the speed bigger we make that ready now that brings it up into",
    "start": "2989140",
    "end": "2994960"
  },
  {
    "text": "the left and we have the garbage collection that flattens it out basically you get to start fast",
    "start": "2994960",
    "end": "3000599"
  },
  {
    "text": "go fast and stay fast or come closer to that flat ideal that we want to have so",
    "start": "3000599",
    "end": "3007319"
  },
  {
    "text": "that's the small commercial at then at this point I'll take you and I if",
    "start": "3007319",
    "end": "3013920"
  },
  {
    "text": "there's any time left I'm not sure if there is are we on time we got time for",
    "start": "3013920",
    "end": "3019170"
  },
  {
    "text": "one question I reckon okay good thanks [Applause]",
    "start": "3019170",
    "end": "3030250"
  },
  {
    "text": "hi so you said that you can optimize by replaying the scenarios how would this",
    "start": "3030250",
    "end": "3036590"
  },
  {
    "text": "work on an updated codebase so you're running the same application but with some updates it's a very good question",
    "start": "3036590",
    "end": "3042440"
  },
  {
    "text": "so the way we actually perform this",
    "start": "3042440",
    "end": "3047560"
  },
  {
    "text": "logging of optimizations as a Napper method basis we actually log the",
    "start": "3047560",
    "end": "3052580"
  },
  {
    "text": "optimization input to the compiler when it actually got triggered we check some",
    "start": "3052580",
    "end": "3057980"
  },
  {
    "text": "of the methods we've ref right they're the same if you changed a piece of code whatever we log for that piece of code",
    "start": "3057980",
    "end": "3063470"
  },
  {
    "text": "for that method won't apply anymore and it's done actually on the class basis so all the methods in the class are gonna blow away so for example if you're doing",
    "start": "3063470",
    "end": "3072320"
  },
  {
    "text": "continuous deployment and you're updating 20 times a day hopefully you didn't rewrite the whole code 20 times a",
    "start": "3072320",
    "end": "3077810"
  },
  {
    "text": "day so so the profile won't apply to that code and that code will go through the normal learning process none of the",
    "start": "3077810",
    "end": "3085160"
  },
  {
    "text": "learning process is gone it's just a priming exercise but the vast majority of your code will start really fast",
    "start": "3085160",
    "end": "3091370"
  },
  {
    "text": "which hopefully is thousands of different things that we saved you from going through what's the worst workload",
    "start": "3091370",
    "end": "3098930"
  },
  {
    "text": "for zinc what's the worst workload for zinc I write a lot of really really bad code",
    "start": "3098930",
    "end": "3106700"
  },
  {
    "text": "for things like I write you know torture tests for zinging for other JVMs you probably mean something",
    "start": "3106700",
    "end": "3113900"
  },
  {
    "text": "like what's the worst real-world stuff I would say the main thing that we don't",
    "start": "3113900",
    "end": "3121490"
  },
  {
    "text": "try to do is fit into tiny pieces of memory so we round the heap up to a gigabyte so things that try to work on",
    "start": "3121490",
    "end": "3128360"
  },
  {
    "text": "200 megan's stay there and may as well not using but above that if you're",
    "start": "3128360",
    "end": "3133790"
  },
  {
    "text": "running more than a gigabyte of heap you should expect good behavior now is it",
    "start": "3133790",
    "end": "3139580"
  },
  {
    "text": "better behavior that you care about I don't know it matters to you but darn things where we kind of we suck at that",
    "start": "3139580",
    "end": "3146420"
  },
  {
    "text": "right there isn't some big you pay big time for performance somewhere it's just a bunch of good stuff we are a server",
    "start": "3146420",
    "end": "3154150"
  },
  {
    "text": "focused JVM so we're not trying to run in clients we're not trying to run in desktops well we're not trying to run",
    "start": "3154150",
    "end": "3160760"
  },
  {
    "text": "tiny workloads we do run micro services very well because most of them don't",
    "start": "3160760",
    "end": "3166400"
  },
  {
    "text": "necessarily mean tiny size but tiny functionality so yeah does our",
    "start": "3166400",
    "end": "3176450"
  },
  {
    "text": "programming style war impacts the performers for example if I prefer a write more functional code like wonders",
    "start": "3176450",
    "end": "3182870"
  },
  {
    "text": "and collectors and things instead of pure cycles so there's programming style",
    "start": "3182870",
    "end": "3190850"
  },
  {
    "text": "effect performance to a degree it does but the thing I would warn you against",
    "start": "3190850",
    "end": "3196550"
  },
  {
    "text": "is to actually start writing in weird ways to to beat the compilers if you go",
    "start": "3196550",
    "end": "3203720"
  },
  {
    "text": "back in history you'll find all kinds of cool recommendations like make all your methods finals to make them fast and if",
    "start": "3203720",
    "end": "3210680"
  },
  {
    "text": "you google for performance tips or Java right now you'll probably find this because Google doesn't forget which is",
    "start": "3210680",
    "end": "3216950"
  },
  {
    "text": "sad right so at a point in time you find you might finding something that currently makes it faster but if it's",
    "start": "3216950",
    "end": "3223070"
  },
  {
    "text": "not easy o matic you're probably going the wrong way so writing clean code",
    "start": "3223070",
    "end": "3228620"
  },
  {
    "text": "using good code practices yes do that shifting to code practices that are also",
    "start": "3228620",
    "end": "3234200"
  },
  {
    "text": "do Matic for speed that probably makes sense too but starting to do things weirdly just to get the speed only if",
    "start": "3234200",
    "end": "3240830"
  },
  {
    "text": "you really care about that and you're willing to do it every two years again because what you do now might slow it",
    "start": "3240830",
    "end": "3245900"
  },
  {
    "text": "down in the future you asked about functional functional",
    "start": "3245900",
    "end": "3251930"
  },
  {
    "text": "coding practices are generally idiomatic in Java now with with Java 8 and lambda",
    "start": "3251930",
    "end": "3258860"
  },
  {
    "text": "functions we have languages like closure that in in Scala but closure strongly encourages as car",
    "start": "3258860",
    "end": "3265730"
  },
  {
    "text": "makes it if you want it like and they don't hurt in themselves they might",
    "start": "3265730",
    "end": "3271670"
  },
  {
    "text": "generate a little more allocation load on a system because you tend to create more immutable short-lived objects when",
    "start": "3271670",
    "end": "3278270"
  },
  {
    "text": "you do that but actually compilers and sorry both compilers and scape analysis",
    "start": "3278270",
    "end": "3283280"
  },
  {
    "text": "and collectors with generational collection are very well optimized to deal with those so I'd encourage you to",
    "start": "3283280",
    "end": "3289940"
  },
  {
    "text": "write good code first and then optimize that rather than right it from the start to to the speed",
    "start": "3289940",
    "end": "3298190"
  },
  {
    "text": "any other if I want to take deeper into",
    "start": "3299000",
    "end": "3306270"
  },
  {
    "text": "this topic are there any books that you can recommend deeper into the topic in",
    "start": "3306270",
    "end": "3313050"
  },
  {
    "text": "books well obviously if you want to uncompelled optimizations there's lots of material out there it's not specific",
    "start": "3313050",
    "end": "3319800"
  },
  {
    "text": "to Java but a lot of stuff that's not specific to Java is applicable here",
    "start": "3319800",
    "end": "3325609"
  },
  {
    "text": "outside of the compiler stuff I don't think there are a lot of books but there",
    "start": "3325609",
    "end": "3332220"
  },
  {
    "text": "are there's academic papers on these subjects so generally looking for",
    "start": "3332220",
    "end": "3337800"
  },
  {
    "text": "performance optimizations of Java and Google Scholar or something is probably a good idea yeah I think there was one",
    "start": "3337800",
    "end": "3346290"
  },
  {
    "text": "last one here and we're probably out of time at that point so last I read the",
    "start": "3346290",
    "end": "3351480"
  },
  {
    "text": "spec Zulu is demanding minimum spec of I think 32 gigs a memory in six cores",
    "start": "3351480",
    "end": "3358380"
  },
  {
    "text": "how old is this playing modern environments where people are looking at much much lighter weight deployment",
    "start": "3358380",
    "end": "3365190"
  },
  {
    "text": "space to entertain us so first correction there is that sing",
    "start": "3365190",
    "end": "3370440"
  },
  {
    "text": "not Zulu Zulu is our open JDK variant it's exactly open JDK runs everywhere",
    "start": "3370440",
    "end": "3375900"
  },
  {
    "text": "educators with sing unfortunately somebody has a really stale material if",
    "start": "3375900",
    "end": "3383040"
  },
  {
    "text": "that's what you read or maybe it's very dated zing will run well on one core in",
    "start": "3383040",
    "end": "3388619"
  },
  {
    "text": "one gigabyte if that's what you need that lesson is necessarily make it a great idea but when we first did that is",
    "start": "3388619",
    "end": "3396150"
  },
  {
    "text": "it was because we were trying to avoid all the I'm trying to run this in this tiny box please help me things",
    "start": "3396150",
    "end": "3402869"
  },
  {
    "text": "that was a few years ago now you can have the zing for a free tad trial and it tends to work pretty well runs well",
    "start": "3402869",
    "end": "3408900"
  },
  {
    "text": "in containers and others I would say that you know given that we have a concurrent collector for example you",
    "start": "3408900",
    "end": "3415350"
  },
  {
    "text": "usually want more than one cord just to let the collector run without you stopping because otherwise you can look",
    "start": "3415350",
    "end": "3420390"
  },
  {
    "text": "at these ten millisecond context switches things right but that's probably still much better",
    "start": "3420390",
    "end": "3425710"
  },
  {
    "text": "than the half second pause right so it's all relative statement right we act value to one core it's just you don't",
    "start": "3425710",
    "end": "3432730"
  },
  {
    "text": "want to run low-latency trading on that yeah and and I would say as I said",
    "start": "3432730",
    "end": "3439600"
  },
  {
    "text": "before there are sizes below one or two gig it just does it matter but above",
    "start": "3439600",
    "end": "3446440"
  },
  {
    "text": "that we've gotten to a point where we think we're pretty roundly applicable",
    "start": "3446440",
    "end": "3452760"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "3452760",
    "end": "3459140"
  }
]