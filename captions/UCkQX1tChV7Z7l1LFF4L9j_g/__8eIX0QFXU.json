[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "well uh welcome back from lunch I know that I get the uh honor of speaking to you while you're in your food coma so I",
    "start": "9200",
    "end": "16358"
  },
  {
    "text": "appreciate you showing up Kyle Simpson known as getify online thanks for being here and uh today we are going to go",
    "start": "16359",
    "end": "23800"
  },
  {
    "text": "through a little bit of heresy we are going to talk about ditching the JavaScript standard and making your own",
    "start": "23800",
    "end": "30199"
  },
  {
    "text": "JavaScript and that's going to be quite controversial but we're going to jump into that in just a moment uh real",
    "start": "30199",
    "end": "36879"
  },
  {
    "text": "briefly if my clicker will come on real briefly I am going to talk to you about this book series",
    "start": "36879",
    "end": "44039"
  },
  {
    "text": "that I've been writing it's you don't know JS um and it's a series of books this is the first in the series there'll",
    "start": "44039",
    "end": "50879"
  },
  {
    "text": "be five total this one's on scope enclosures the second one has just come out that's on this and object prototypes",
    "start": "50879",
    "end": "57440"
  },
  {
    "text": "and all of them are available for free that I'm writing up online at udono js. so you can check them out there and then",
    "start": "57440",
    "end": "63160"
  },
  {
    "text": "if they're useful you can uh purchase them that would be useful um I have about 10 of these up here at the podium",
    "start": "63160",
    "end": "69840"
  },
  {
    "text": "so afterwards the first 10 people that come and ask can get one for free and then I am also doing a workshop tomorrow",
    "start": "69840",
    "end": "76640"
  },
  {
    "text": "those of you that are attending my workshop there is a slim chance that the shipment of the newest book will be in",
    "start": "76640",
    "end": "81840"
  },
  {
    "text": "for those of you attending the workshop so we'll see about that no promises okay",
    "start": "81840",
    "end": "86960"
  },
  {
    "start": "86000",
    "end": "197000"
  },
  {
    "text": "so we are going to jump right in with this JavaScript Choose Your Own Adventure and hopefully those of you",
    "start": "86960",
    "end": "92720"
  },
  {
    "text": "many of you have sort of that recollection of those Choose Your Own Adventure books I certainly loved those so I just thought to be sort of silly to",
    "start": "92720",
    "end": "99680"
  },
  {
    "text": "start this off I would go through a simple little Choose Your Own Adventure so you are Brendan Ike employed at",
    "start": "99680",
    "end": "105159"
  },
  {
    "text": "Netscape in May of 1995 and your boss asks you to design a new language for the browser but gives you only 10 days",
    "start": "105159",
    "end": "112040"
  },
  {
    "text": "to complete it choose your next adventure to agree and give it your best shot turn to page 39 to laugh and walk",
    "start": "112040",
    "end": "119520"
  },
  {
    "text": "away turned to page 262 many of us maybe hoped that he had walked away and turned to page 262 but",
    "start": "119520",
    "end": "127439"
  },
  {
    "text": "in fact we see that Brendan did go ahead and give it his best shot it was a proof",
    "start": "127439",
    "end": "132640"
  },
  {
    "text": "of concept so I I just want to remind you of something that uh Brendan I has said I probably should have put this on",
    "start": "132640",
    "end": "138800"
  },
  {
    "text": "a slide but uh a very famous quote that he has about there is that he he said JavaScript had to look like Java only",
    "start": "138800",
    "end": "145440"
  },
  {
    "text": "less so be Java's dumb kid brother or boy hostage sidekick and worse it had to be done in 10 days or something worse",
    "start": "145440",
    "end": "152760"
  },
  {
    "text": "than JavaScript would have happened and that last phrase is sort of instructive so the next time you find yourself",
    "start": "152760",
    "end": "158000"
  },
  {
    "text": "wanting to complain about the language think about what it would have been had he chosen to go to page",
    "start": "158000",
    "end": "163239"
  },
  {
    "text": "262 all right let's try another one let's put ourselves in the place of here you you have learned the ins and outs of",
    "start": "163239",
    "end": "169720"
  },
  {
    "text": "JavaScript but there are lots of things that are still bugging you for example the fact that mty array is equal to the",
    "start": "169720",
    "end": "176000"
  },
  {
    "text": "negation of mty array and it's just too bearable to go on you can't handle it anymore so choose your next adventure to",
    "start": "176000",
    "end": "181599"
  },
  {
    "text": "give up on JavaScript and move on to the language go turn to page Nan otherwise",
    "start": "181599",
    "end": "186840"
  },
  {
    "text": "to explore your own custom JavaScript turn to page 2.01 e to the 2 okay so",
    "start": "186840",
    "end": "194720"
  },
  {
    "text": "enough of the silliness but seriously I am suggesting that I think it's time for us to at least consider",
    "start": "194720",
    "end": "203000"
  },
  {
    "start": "197000",
    "end": "422000"
  },
  {
    "text": "the idea that standards aren't the thing we should be pushing for there has been a lot of effort and I don't demean any",
    "start": "203000",
    "end": "208720"
  },
  {
    "text": "in any way shape or form people that have been on all the standards committees and all the efforts to standardize our technology the wild west",
    "start": "208720",
    "end": "215439"
  },
  {
    "text": "that we used to have that I I was definitely a party to was not good so I'm glad that we have had some",
    "start": "215439",
    "end": "220920"
  },
  {
    "text": "convergence but I think it might be a natural and healthy time for us to explore this idea that maybe we need",
    "start": "220920",
    "end": "226920"
  },
  {
    "text": "less standards and maybe we need better tools so the heresy today is going to suggest something along those lines I'm",
    "start": "226920",
    "end": "233760"
  },
  {
    "text": "going to start out with something very simple I'm going to invoke one of the most uh common religious B attles that",
    "start": "233760",
    "end": "240200"
  },
  {
    "text": "everyone has probably faced the Battle of spaces versus tabs and if you download this slid set you will see that",
    "start": "240200",
    "end": "246760"
  },
  {
    "text": "in one side there is spaces and in one side there's a tab and I'll let you decide from looking at my GitHub account",
    "start": "246760",
    "end": "252720"
  },
  {
    "text": "which one I choose but this religious battle about spaces versus tabs and and some people say there's only one answer",
    "start": "252720",
    "end": "259040"
  },
  {
    "text": "and some people say well it's just sort of a stylistic choice what about semicolons versus non- semicolons that's",
    "start": "259040",
    "end": "265280"
  },
  {
    "text": "a a big religious battle now just as a little bit of a side note let's understand what what is happening with",
    "start": "265280",
    "end": "271600"
  },
  {
    "text": "semicolons uh semicolons are being automatically inserted in JavaScript when you omit them in places that they",
    "start": "271600",
    "end": "278039"
  },
  {
    "text": "are required by the grammar in a sense ASI is an error correction routine so I",
    "start": "278039",
    "end": "285360"
  },
  {
    "text": "have this to say to those of you that are so fond of dropping all of the semicolons from your code essentially",
    "start": "285360",
    "end": "291199"
  },
  {
    "text": "what that tells me is you want to write the most error prone program possible that still correctly compiles in the",
    "start": "291199",
    "end": "297199"
  },
  {
    "text": "JavaScript engine I prefer to write correct programs and not try to stray as far from correctness as possible but",
    "start": "297199",
    "end": "303720"
  },
  {
    "text": "that's just my take on semicolons but what about these sorts of debates because they divide teams and they",
    "start": "303720",
    "end": "309520"
  },
  {
    "text": "divide Industries and I want to pose this question what if your team did not have to agree on such things what if it",
    "start": "309520",
    "end": "315759"
  },
  {
    "text": "was possible to use tools to solve this problem and you could go on Happily",
    "start": "315759",
    "end": "321120"
  },
  {
    "text": "about your day writing spaces and the guy next to you can write tabs and then the lady sitting next to you can decide",
    "start": "321120",
    "end": "326680"
  },
  {
    "text": "to do semicolons and the person next to her can decide not to do semicolons and all of you can collaborate on the exact",
    "start": "326680",
    "end": "332560"
  },
  {
    "text": "same code base what if that was possible would that be better than the arguments",
    "start": "332560",
    "end": "338080"
  },
  {
    "text": "that we currently have about these things and I think yes so I've said about this this uh uh this task to",
    "start": "338080",
    "end": "343800"
  },
  {
    "text": "create a tool that I call ezri I haven't actually written any code yet because I got derailed by the fact that",
    "start": "343800",
    "end": "349479"
  },
  {
    "text": "unfortunately there were some some problems with the standardized uh abex",
    "start": "349479",
    "end": "354600"
  },
  {
    "text": "syntax tree when you when you parse code and it wasn't keeping certain certain sorts of things so we're still working through that problem but the idea the",
    "start": "354600",
    "end": "361520"
  },
  {
    "text": "plan for this tool is that it's configurable two-way code formatting so there is one agreed upon standard that",
    "start": "361520",
    "end": "367680"
  },
  {
    "text": "you check into the repo and when you check out code from the repo you your",
    "start": "367680",
    "end": "373319"
  },
  {
    "text": "configured Styles transform the code before it shows up in your Editor to your preferred Styles removing",
    "start": "373319",
    "end": "379759"
  },
  {
    "text": "semicolons changing spaces to tabs whatever you feel and then when you're done writing code and you save it back",
    "start": "379759",
    "end": "385479"
  },
  {
    "text": "instead of having a linter complain at you and say ah you did the wrong thing why not just have the tool fix",
    "start": "385479",
    "end": "391599"
  },
  {
    "text": "it Smarter Tools make for better developers when you run into a problem in your development process and the",
    "start": "391599",
    "end": "398800"
  },
  {
    "text": "language and the team culture and things like that are the things that are getting in your way that's a sure sign",
    "start": "398800",
    "end": "403919"
  },
  {
    "text": "you need a better tool so this just a crazy hairbrain idea there are style",
    "start": "403919",
    "end": "409080"
  },
  {
    "text": "Checkers out there but all they do is just complain when you don't adhere to some particular style and I've never",
    "start": "409080",
    "end": "414400"
  },
  {
    "text": "understood why they don't just fix those problems but my suggestions here actually go much further than code",
    "start": "414400",
    "end": "422720"
  },
  {
    "start": "422000",
    "end": "470000"
  },
  {
    "text": "Styles how many of you have ever seen this movie anyone recognize a frame from",
    "start": "422720",
    "end": "428160"
  },
  {
    "text": "this movie it's an old old school movie the name of the movie was 12 Angry Men about a bunch of guys in this room",
    "start": "428160",
    "end": "434360"
  },
  {
    "text": "deliberating over some murder trial or as I like to call it the tc39 committee",
    "start": "434360",
    "end": "439680"
  },
  {
    "text": "meetings I'm it's a total joke I've never been to one but I know that they deal with lots and lots of problems and",
    "start": "439680",
    "end": "445919"
  },
  {
    "text": "they're always arguing back and forth about stuff and I see their notes uh afterwards and so I just imagine in my",
    "start": "445919",
    "end": "451639"
  },
  {
    "text": "mind that they're that they're getting together and sort of trying to agree upon these things now I tweeted out this slide as a joke some time back and",
    "start": "451639",
    "end": "458360"
  },
  {
    "text": "actually one of the main maintainers of the spec tweeted me back and he claimed that he was definitely the guy in the in",
    "start": "458360",
    "end": "464440"
  },
  {
    "text": "the pinstripe suit so that's Alan wors Brock in the pinstripe suit there in the",
    "start": "464440",
    "end": "469560"
  },
  {
    "text": "corner but what if you could customize the JavaScript language itself to your own liking what if it wasn't just about",
    "start": "469560",
    "end": "476440"
  },
  {
    "start": "470000",
    "end": "503000"
  },
  {
    "text": "code Styles but the actual structure of the code that you write could be made to conform more to the way you like to",
    "start": "476440",
    "end": "482319"
  },
  {
    "text": "think about things and the way that your brain likes to write code because I'm willing to bet that many of us have",
    "start": "482319",
    "end": "487680"
  },
  {
    "text": "idiosyncrasies that are different about the way we approach than some other member of our team and rather than",
    "start": "487680",
    "end": "493560"
  },
  {
    "text": "focusing so much on trying to train away all of those differences what if we Embrace those differences and let tools",
    "start": "493560",
    "end": "499120"
  },
  {
    "text": "smooth over the problem the first idea that I'm going to suggest along these lines is called sweet JS if you haven't",
    "start": "499120",
    "end": "506360"
  },
  {
    "start": "503000",
    "end": "557000"
  },
  {
    "text": "heard about sweet JS it's a set of JavaScript macros it's a system for JavaScript macros that was proposed a",
    "start": "506360",
    "end": "512880"
  },
  {
    "text": "few years ago and it's so awesome that Mozilla decided to adopt the project and",
    "start": "512880",
    "end": "518039"
  },
  {
    "text": "get behind it officially and it's even more awesome that the tc39 committee has all but basically said pretty sure that",
    "start": "518039",
    "end": "525600"
  },
  {
    "text": "in es7 es8 time range somewhere in there macros are going to show up in the language so whether you like macros or",
    "start": "525600",
    "end": "531839"
  },
  {
    "text": "not it's a fact that it's coming and macros can solve a lot of problems for us I wanted to show you just a couple of",
    "start": "531839",
    "end": "537279"
  },
  {
    "text": "quick examples of the sweet J s macros and I'm not going to fully explain all of their syntax you can go to the",
    "start": "537279",
    "end": "542920"
  },
  {
    "text": "sjs.org website if you'd like to understand a little bit more about how they do what they do but I just wanted",
    "start": "542920",
    "end": "548440"
  },
  {
    "text": "to kind of show you a quick example of how they you could decide as a team to fix certain parts of the language to",
    "start": "548440",
    "end": "554160"
  },
  {
    "text": "work in a different way and everybody can sort of agree on that so as an example if we had the the time honored",
    "start": "554160",
    "end": "560839"
  },
  {
    "start": "557000",
    "end": "628000"
  },
  {
    "text": "task of taking two variables and swapping their values and we didn't want to declare the temporary variables and",
    "start": "560839",
    "end": "566040"
  },
  {
    "text": "do all of that junk of course by the way es6 has an answer for for this it's called destructuring but setting that",
    "start": "566040",
    "end": "571640"
  },
  {
    "text": "one aside for just a minute if you wanted to solve this problem of swapping we can declare a macro as you see here a",
    "start": "571640",
    "end": "577640"
  },
  {
    "text": "macro called Swap and it takes the two variables and it assigns them and it uses a temporary variable inside now it",
    "start": "577640",
    "end": "583959"
  },
  {
    "text": "creates this in such a way when it transpiles your code to run in the engine it creates this in such a way",
    "start": "583959",
    "end": "589120"
  },
  {
    "text": "that it's totally safe that variable is renamed to something unique that won't collide with any other variables in the",
    "start": "589120",
    "end": "594440"
  },
  {
    "text": "program and it works exactly the way you want but the main key is down here on line 13 you don't have to worry about",
    "start": "594440",
    "end": "600360"
  },
  {
    "text": "those implementation details whenever you need to swap two values you just simply call",
    "start": "600360",
    "end": "605600"
  },
  {
    "text": "swap macro is a very powerful and important in a lot of other programming languages many would argue that it's",
    "start": "605600",
    "end": "611640"
  },
  {
    "text": "been sort of an Omission that JavaScript hasn't had something like this for a while I'm very excited about the fact I",
    "start": "611640",
    "end": "617880"
  },
  {
    "text": "I've got a lot of learning to do because I don't fully understand the syntax yet but I'm very excited about the fact that we're going to get macros in the",
    "start": "617880",
    "end": "623360"
  },
  {
    "text": "language another slightly more complex example but one that I've run into many times I want you to look down here it's",
    "start": "623360",
    "end": "629920"
  },
  {
    "start": "628000",
    "end": "700000"
  },
  {
    "text": "a little bit hard for you to read but look down here at the bottom have any of you ever done in your coding needing to test for something X and x.y and x.y doz",
    "start": "629920",
    "end": "639920"
  },
  {
    "text": "and we can't just do that third test because if x or y are undefined or no",
    "start": "639920",
    "end": "645480"
  },
  {
    "text": "then that property object access is going to throw an error so we end up having to do all three of those checks",
    "start": "645480",
    "end": "650839"
  },
  {
    "text": "and it's ridiculous and we we pollute our code with all kinds of ridiculous s like like that we can create a macro",
    "start": "650839",
    "end": "656639"
  },
  {
    "text": "called nullity This is directly from their site so I didn't even make this up it's a great example but nullity allows",
    "start": "656639",
    "end": "662880"
  },
  {
    "text": "you to specify that I want to nul nullity check X Y and Z and it will split out however many levels of object",
    "start": "662880",
    "end": "670000"
  },
  {
    "text": "property access you have there because it uses itself you know uses a loop in here so it will split those things out",
    "start": "670000",
    "end": "675560"
  },
  {
    "text": "and do the checks for you and all you need to do is write what you see down here on line 29 you just write the",
    "start": "675560",
    "end": "681160"
  },
  {
    "text": "nullity sorry I don't want that advance so quickly you just write the nullity like you see on line 20 and then it does",
    "start": "681160",
    "end": "687320"
  },
  {
    "text": "that check for you so macros are a very powerful solution to many of our",
    "start": "687320",
    "end": "692360"
  },
  {
    "text": "frustrating issues with coding and basically what I'm suggesting here is there are things that we hope someday",
    "start": "692360",
    "end": "698240"
  },
  {
    "text": "JavaScript will fix for us but we shouldn't necessarily think that we are handcuffed by just waiting around until",
    "start": "698240",
    "end": "704360"
  },
  {
    "start": "700000",
    "end": "745000"
  },
  {
    "text": "some magical future time when they get around to making that a priority and and even then there may be things that we",
    "start": "704360",
    "end": "710079"
  },
  {
    "text": "want to fix but they really can't fix them for the entire language for various reasons macros are a good sort of",
    "start": "710079",
    "end": "715760"
  },
  {
    "text": "pressure release valve for those sorts of concerns but I want to go even Beyond macros I",
    "start": "715760",
    "end": "721440"
  },
  {
    "text": "want to up the heresy even a little bit more and suggest that for instance you could decide your own individual self",
    "start": "721440",
    "end": "728440"
  },
  {
    "text": "that there's something about the code style the code mechanics that you don't like about the language and rather than",
    "start": "728440",
    "end": "734320"
  },
  {
    "text": "fighting that battle to sort of convince the tc39 committee and get somebody to agree to it and the changes and and how",
    "start": "734320",
    "end": "740320"
  },
  {
    "text": "unlikely that sort of thing is maybe you just need better tools so let's start with an example one of my favorite",
    "start": "740320",
    "end": "746639"
  },
  {
    "start": "745000",
    "end": "780000"
  },
  {
    "text": "examples block scoping if if you've never done a if You' never coded in a language that has block scoping the main",
    "start": "746639",
    "end": "753760"
  },
  {
    "text": "idea here is to be able to declare a variable inside of a block as Clos as possible to where the variable is going",
    "start": "753760",
    "end": "758880"
  },
  {
    "text": "to be used if you know how variable scoping works in the rest of JavaScript it hoists to the top of the function",
    "start": "758880",
    "end": "764560"
  },
  {
    "text": "which is fine but often times we do things like for VAR I because we want the I to belong only to the for Loop and",
    "start": "764560",
    "end": "773040"
  },
  {
    "text": "we've only had the ability to sort of stylistically suggest that up until now but coming as of es6 we're getting this",
    "start": "773040",
    "end": "779839"
  },
  {
    "text": "capability to swap out our VAR declarations in certain places with a let",
    "start": "779839",
    "end": "784920"
  },
  {
    "text": "declaration it's sort of a cousin to the VAR keyword but it will hijack whatever existing block that happens to be in and",
    "start": "784920",
    "end": "791360"
  },
  {
    "text": "attach the variable only there so in this case a will not be available outside of the loop so not only can we",
    "start": "791360",
    "end": "797760"
  },
  {
    "text": "stylistically signal block scoping like this variable belongs to this small part of our code but it will enforce it with",
    "start": "797760",
    "end": "803440"
  },
  {
    "text": "an error if somebody tried to use that variable in error outside they would actually get an early error the code",
    "start": "803440",
    "end": "809639"
  },
  {
    "text": "would throw an error when running your program so there's a lot of value I think to block scoping however as I've",
    "start": "809639",
    "end": "815839"
  },
  {
    "text": "played around with block scoping over the last couple of years sort of seeing the syntax and things like that I have been bothered by one particular thing",
    "start": "815839",
    "end": "822279"
  },
  {
    "text": "and that is the implicit nature of the hijacking of block scoping I tend to prefer more explicit",
    "start": "822279",
    "end": "829920"
  },
  {
    "text": "structures in my code I tend to prefer creating an explicit block that I'm going to declare some variables for so",
    "start": "829920",
    "end": "837279"
  },
  {
    "start": "837000",
    "end": "907000"
  },
  {
    "text": "let's take a look at an example of why this can sometimes be a problem here I have an if statement with several let",
    "start": "837279",
    "end": "843399"
  },
  {
    "text": "declarations in them and by the way as a side note let declarations don't hoist to the top of the block so if you put",
    "start": "843399",
    "end": "849519"
  },
  {
    "text": "them in the middle of the block and you accidentally reference them before you've put them you're going to get an error unlike variables in JavaScript the",
    "start": "849519",
    "end": "856720"
  },
  {
    "text": "VAR declarations which do hoist lets will not so you do have some extra mental tax here and you also have some",
    "start": "856720",
    "end": "863360"
  },
  {
    "text": "refactoring tax if you decided to take the if statement from lines 6 through 8 and move it out as I off of do now you",
    "start": "863360",
    "end": "870320"
  },
  {
    "text": "have to worry about the fact that you have variables that you're going to have to bring along because they've been implicitly hijacked by another block so",
    "start": "870320",
    "end": "877399"
  },
  {
    "text": "you have to be careful about these sorts of things it's not that you can't write code like this but it will create extra",
    "start": "877399",
    "end": "882600"
  },
  {
    "text": "mental tax as you refactor your code perhaps all of you write perfect code the first time but I usually will write",
    "start": "882600",
    "end": "888199"
  },
  {
    "text": "one piece of code and wrap an if statement around that and a for loop around that and a tri catch around that and then move some stuff around and",
    "start": "888199",
    "end": "893800"
  },
  {
    "text": "eventually accidentally my code starts working correctly and for me I'm a little bit worried that there will be",
    "start": "893800",
    "end": "899279"
  },
  {
    "text": "some extral tasks so wouldn't it be nice if we could get the benefits of block scoping with a more explicit structure",
    "start": "899279",
    "end": "906839"
  },
  {
    "text": "it turns out there is such a structure as you see here on line three the form the let block form allows us to create",
    "start": "906839",
    "end": "912839"
  },
  {
    "start": "907000",
    "end": "955000"
  },
  {
    "text": "an explicit block where we bind variables specifically to that block rather than hijacking another one now",
    "start": "912839",
    "end": "918920"
  },
  {
    "text": "there's some people that hate the extra indentation indentation to me isn't that big of a deal what I like about this is",
    "start": "918920",
    "end": "924680"
  },
  {
    "text": "that there's an explicit block for me to reason about and I don't have to separately reason about block scoping",
    "start": "924680",
    "end": "930360"
  },
  {
    "text": "along with the other behavior of that block like an if statement so I have these two nested let blocks and if I",
    "start": "930360",
    "end": "935800"
  },
  {
    "text": "were to do my refactoring those are sort of like visual Clues to me that I have blocks of scope that I need to worry",
    "start": "935800",
    "end": "940880"
  },
  {
    "text": "about and pay attention to rather than searching through hundreds of lines of code for those tiny little let keywords",
    "start": "940880",
    "end": "946839"
  },
  {
    "text": "so I think this is a superior syntax it gives you the same capability but it's more explicit and unfortunately in all",
    "start": "946839",
    "end": "953720"
  },
  {
    "text": "of their wisdom the es6 committee decided to reject that syntax from es6 they refer the other one the more",
    "start": "953720",
    "end": "959800"
  },
  {
    "start": "955000",
    "end": "968000"
  },
  {
    "text": "implicit syntax and this bummed me out for a while but then I got to realizing we can just fix that with better tools",
    "start": "959800",
    "end": "967639"
  },
  {
    "text": "so what exactly is it that I'm suggesting here is it democracy Anarchy oligarchy whatever that is heresy yes",
    "start": "967639",
    "end": "974839"
  },
  {
    "start": "968000",
    "end": "986000"
  },
  {
    "text": "all of the above I am suggesting that you just say to hell with the standards and create tools that let you write code",
    "start": "974839",
    "end": "981279"
  },
  {
    "text": "that doesn't get in your way that empowers you to write better code more quickly I've come up with a list of",
    "start": "981279",
    "end": "987199"
  },
  {
    "start": "986000",
    "end": "1082000"
  },
  {
    "text": "these ideas of things that I've run into in JavaScript that I don't like the mechanics of how the language works and",
    "start": "987199",
    "end": "992600"
  },
  {
    "text": "I decided to sort of um put them underneath this this code name of foil script I was eventually going to write a",
    "start": "992600",
    "end": "998759"
  },
  {
    "text": "language called foil script now it's just a list of things that I want to create tools to fix about",
    "start": "998759",
    "end": "1005160"
  },
  {
    "text": "JavaScript so you might start to wonder well how on Earth would I go about writing such a tool if you're suggesting",
    "start": "1005160",
    "end": "1010680"
  },
  {
    "text": "I write these tools how would I go about writing such a tool myself from scratch if you've ever done anything I'm sort of",
    "start": "1010680",
    "end": "1017279"
  },
  {
    "text": "a compiler nerd so I I understand some of these but if you've ever done anything where you've tried to parse",
    "start": "1017279",
    "end": "1022560"
  },
  {
    "text": "through a piece of code with regular expressions and you'll note very quickly that JavaScript is not a normal language",
    "start": "1022560",
    "end": "1028798"
  },
  {
    "text": "that a regular um grammar that can be parsed with regular Expressions because you have stateful things like strings",
    "start": "1028799",
    "end": "1035640"
  },
  {
    "text": "and you have stateful things like regular expression literals and things like that so you can't just easily put a",
    "start": "1035640",
    "end": "1040760"
  },
  {
    "text": "regular expression around an arbitrary piece of code so how would you go about instead of writing a full compiler how",
    "start": "1040760",
    "end": "1046038"
  },
  {
    "text": "would you go about it and I've run into this problem over and over again and I finally realized the real problem is",
    "start": "1046039",
    "end": "1051840"
  },
  {
    "text": "pre- identifying those sets of stateful literals like the string literals the line comments the multi-line comments",
    "start": "1051840",
    "end": "1059720"
  },
  {
    "text": "the regular expression literals the new template syntax coming in es6 those are the real problems if you could",
    "start": "1059720",
    "end": "1065520"
  },
  {
    "text": "pre-identify those in some way and sort of remove them or set them aside then you could parse through the code in a",
    "start": "1065520",
    "end": "1071440"
  },
  {
    "text": "much easier fashion because they're the real complication here and so I wrote a tool to do exactly that to parse non",
    "start": "1071440",
    "end": "1078919"
  },
  {
    "text": "standard or partial JavaScript and it's called literalizing it uses a set of what I call heuristic Lexing methods to",
    "start": "1078919",
    "end": "1086200"
  },
  {
    "text": "go through your code and find those literals based upon the rules of grammar and pre-identify those split them out",
    "start": "1086200",
    "end": "1093400"
  },
  {
    "text": "and then give you a set of tokens that you can parse through yourself in a much easier fashion so it's done a lot of that heavy lifting already and I already",
    "start": "1093400",
    "end": "1100039"
  },
  {
    "text": "am using this in a couple of my tools remember the block",
    "start": "1100039",
    "end": "1105520"
  },
  {
    "start": "1103000",
    "end": "1153000"
  },
  {
    "text": "scoping turns out that we can solve this and I did I wrote a to tool called letter it will parse through JavaScript",
    "start": "1105520",
    "end": "1111679"
  },
  {
    "text": "code looking only for this pattern using the explicit let block syntax that we see here and by the way I didn't invent",
    "start": "1111679",
    "end": "1118039"
  },
  {
    "text": "that syntax Firefox invented it over a decade ago I just think it's a great syntax and it just hasn't been",
    "start": "1118039",
    "end": "1124000"
  },
  {
    "text": "standardized but maybe someday it will so letter goes through and it finds those things and it transpiles your code",
    "start": "1124000",
    "end": "1130799"
  },
  {
    "text": "much like coffee script or some other tool would do it transpiles your code so that it will run in standard browser",
    "start": "1130799",
    "end": "1136799"
  },
  {
    "text": "engines so you already have build step that are doing your minification and your concatenation and your linting you",
    "start": "1136799",
    "end": "1142960"
  },
  {
    "text": "just simply insert another step in your build process that pre-processes your code and changes it from that code into",
    "start": "1142960",
    "end": "1148919"
  },
  {
    "text": "something that will work and you wonder how will it work what does it transpile here's what it writes you'll",
    "start": "1148919",
    "end": "1155960"
  },
  {
    "start": "1153000",
    "end": "1231000"
  },
  {
    "text": "notice it's quite ugly it's forcing a TR catch condition very little known fact",
    "start": "1155960",
    "end": "1161120"
  },
  {
    "text": "as of ES3 way back in December of 1999 we got block scoping in The Language by virtue of the catch block",
    "start": "1161120",
    "end": "1168840"
  },
  {
    "text": "variables declared as catch blocks are block scop to the catch block which means I can force a TR catch condition",
    "start": "1168840",
    "end": "1175480"
  },
  {
    "text": "and get actual true block scoping today in all JavaScript browsers and all",
    "start": "1175480",
    "end": "1180720"
  },
  {
    "text": "engines now you'd never write that sort of code that's Madness but you'd also never write the code that comes out of the coffe script compiler this is",
    "start": "1180720",
    "end": "1187760"
  },
  {
    "text": "compiled code now some of you may be saying well what what happens if I don't want to write that kind of crappy code",
    "start": "1187760",
    "end": "1192919"
  },
  {
    "text": "someday and I want to Target only es6 environments I've already got you fixed you just simply start passing a dash -",
    "start": "1192919",
    "end": "1199039"
  },
  {
    "text": "es6 flag to the tool and it transforms your let blocks into this totally valid",
    "start": "1199039",
    "end": "1204280"
  },
  {
    "text": "es6 syntax it creates an explicit block and it puts the let declaration at the",
    "start": "1204280",
    "end": "1210120"
  },
  {
    "text": "top this is the pattern for the suggestion of tools that I'm talking about creating these targeted tools to",
    "start": "1210120",
    "end": "1216000"
  },
  {
    "text": "fix problems that you have instead of being always banging your head against the wall until eventually you decide",
    "start": "1216000",
    "end": "1221240"
  },
  {
    "text": "well I'm just going to go to a different language we can make better and Smarter Tools and by the way as long you may",
    "start": "1221240",
    "end": "1227360"
  },
  {
    "text": "think that this is just some sort of crazy invention that I came up with this is the official tool from Google called",
    "start": "1227360",
    "end": "1234159"
  },
  {
    "start": "1231000",
    "end": "1267000"
  },
  {
    "text": "Tracer compiler it's endorsed by the es6 the tc39 committee as the way for you to",
    "start": "1234159",
    "end": "1240000"
  },
  {
    "text": "bridge from es5 into es6 and guess what happens when you use let declarations they create those Tri",
    "start": "1240000",
    "end": "1246679"
  },
  {
    "text": "catches it is the officially endorsed way to do it and the browsers are already working on making the performance of Tri catch not so high so",
    "start": "1246679",
    "end": "1254320"
  },
  {
    "text": "that this isn't a penalty in your code so that's just one example let's",
    "start": "1254320",
    "end": "1260720"
  },
  {
    "text": "talk about some other examples I won't show you tools for these things but let's talk about some other examples of things I'd like to fix if you've ever",
    "start": "1260720",
    "end": "1267559"
  },
  {
    "start": "1267000",
    "end": "1327000"
  },
  {
    "text": "written code like this where you needed to negate some sort of operator and you would like it to um not require you to",
    "start": "1267559",
    "end": "1274120"
  },
  {
    "text": "put the the negate symbol with a Op with a parenthesis pair around it perhaps",
    "start": "1274120",
    "end": "1279600"
  },
  {
    "text": "you've never wondered but I certainly have why couldn't I just put the negate right in front of the N keyword why",
    "start": "1279600",
    "end": "1284760"
  },
  {
    "text": "couldn't I just smush the two together because that's what I really mean that semantically what I'm saying is I want",
    "start": "1284760",
    "end": "1289799"
  },
  {
    "text": "to know if fu is not in bar and it's sort of this weird grammar syntax that I have to wrap parentheses",
    "start": "1289799",
    "end": "1296039"
  },
  {
    "text": "around it negate the whole thing so what if we could write a tool that would very simply take these unary operators and",
    "start": "1296039",
    "end": "1303200"
  },
  {
    "text": "smush them together with binary operators so we have not in not instance",
    "start": "1303200",
    "end": "1308600"
  },
  {
    "text": "of and not and instead of having to wrap those parentheses around things I think it would make my code better I don't",
    "start": "1308600",
    "end": "1313919"
  },
  {
    "text": "know if you like that syntax but it's just one of dozens of possible suggestions that we can make tools to",
    "start": "1313919",
    "end": "1319840"
  },
  {
    "text": "make the JavaScript work for us here's another example I actually do",
    "start": "1319840",
    "end": "1327120"
  },
  {
    "start": "1327000",
    "end": "1337000"
  },
  {
    "text": "this a lot in my code I don't know whether you do but I end up having a lot of situations where I have this optional",
    "start": "1327120",
    "end": "1334039"
  },
  {
    "text": "parameter or this optional clause on the end of my turn Aries where it's usually I just put in a placeholder like undefined or null because I'm I can't",
    "start": "1334039",
    "end": "1341760"
  },
  {
    "start": "1337000",
    "end": "1368000"
  },
  {
    "text": "really use the or guard because I don't want it to actually be the value of the test awesome greater than one I want it",
    "start": "1341760",
    "end": "1347600"
  },
  {
    "text": "to be this value and if it's not possible to assign it I just want the undefined or the null or",
    "start": "1347600",
    "end": "1352919"
  },
  {
    "text": "whatever but I got to thinking one day why do I have to write colon undefined all over the place why couldn't that be",
    "start": "1352919",
    "end": "1358480"
  },
  {
    "text": "an assumed Clause so I could clean up my code and it turns out you very simply can write a rewrite rule a transpilation",
    "start": "1358480",
    "end": "1365120"
  },
  {
    "text": "rule that changes that code into code like this and the code works exactly the same way and you'll notice those colon",
    "start": "1365120",
    "end": "1372520"
  },
  {
    "start": "1368000",
    "end": "1380000"
  },
  {
    "text": "undefined have just been removed from my code but it will still transpile to put those in another example slightly more complex",
    "start": "1372520",
    "end": "1380799"
  },
  {
    "start": "1380000",
    "end": "1397000"
  },
  {
    "text": "any of you that have ever done any studying about the this keyword and how the this keyword works I like to think of it or I like to call it promiscuous",
    "start": "1380799",
    "end": "1387360"
  },
  {
    "text": "this binding you have a function that has a this keyword and depending on how that function is called in various",
    "start": "1387360",
    "end": "1392840"
  },
  {
    "text": "different scenarios there's up to four different ways that the this keyword can get bound and it might work in one",
    "start": "1392840",
    "end": "1398120"
  },
  {
    "start": "1397000",
    "end": "1436000"
  },
  {
    "text": "scenario and then you pass it as an event handler to jQuery and all of a sudden you don't have the right this keyword so the traditional solution to",
    "start": "1398120",
    "end": "1404760"
  },
  {
    "text": "that is what we called hard binding the bind keyword that was added on the function prototype as a vs5 so we create",
    "start": "1404760",
    "end": "1411360"
  },
  {
    "text": "these functions that now are forced to be a particular this regardless of how they're called which is a decent",
    "start": "1411360",
    "end": "1418000"
  },
  {
    "text": "solution except I often find myself somewhere in the middle between the two I don't want the fully promiscuous this",
    "start": "1418000",
    "end": "1424200"
  },
  {
    "text": "binding but I do want the ability to override the hard binding when I need to use the function in a different way in",
    "start": "1424200",
    "end": "1429640"
  },
  {
    "text": "other words I want both the flexibility and the predictability I don't want to have to trade off well it turns out",
    "start": "1429640",
    "end": "1436200"
  },
  {
    "start": "1436000",
    "end": "1466000"
  },
  {
    "text": "there's a pattern for that and it's called Soft binding soft binding essentially creates a",
    "start": "1436200",
    "end": "1441600"
  },
  {
    "text": "separate or override default this binding when you don't have any other binding in play but if you do put in a",
    "start": "1441600",
    "end": "1447919"
  },
  {
    "text": "more explicit binding it allows you to overwrite it so it fixes that problem where the this keyword falls to the",
    "start": "1447919",
    "end": "1453480"
  },
  {
    "text": "window object but it doesn't prevent you from overwriting it soft binding is a is an important feature and there is a a a",
    "start": "1453480",
    "end": "1460960"
  },
  {
    "text": "a proposal to bring something like that eventually to the language I don't know if it'll ever happen but you can write a",
    "start": "1460960",
    "end": "1466159"
  },
  {
    "start": "1466000",
    "end": "1528000"
  },
  {
    "text": "utility for it which I have I call it soft find does exactly what it just said",
    "start": "1466159",
    "end": "1471600"
  },
  {
    "text": "it allows you to create a function that will test every time whether or not it's been the default binding and if so it",
    "start": "1471600",
    "end": "1477320"
  },
  {
    "text": "provides an alternate default otherwise it allows you to override so for example down here this Fu o obj and it's a",
    "start": "1477320",
    "end": "1483200"
  },
  {
    "text": "little small to see but you can check out the slides later Fu obj here is a softbound function so when I call it",
    "start": "1483200",
    "end": "1488360"
  },
  {
    "text": "normally it uses my override default in fact when I assign it into",
    "start": "1488360",
    "end": "1493679"
  },
  {
    "text": "another variable and then call it off of that object it uses the new one so I'm able to override that soft binding and",
    "start": "1493679",
    "end": "1500679"
  },
  {
    "text": "when I pass it into things like set timeout or jQuery event handlers it uses the soft binding as the default and",
    "start": "1500679",
    "end": "1507559"
  },
  {
    "text": "finally it allows me to explicitly override if I want to so the soft binding just prevents me from falling",
    "start": "1507559",
    "end": "1512720"
  },
  {
    "text": "through the window object which is almost never what you want now I use this sort of utility in",
    "start": "1512720",
    "end": "1519039"
  },
  {
    "text": "my programs but you can see it's kind of ugly and clunky having to create your own thing and stick it on the function",
    "start": "1519039",
    "end": "1524120"
  },
  {
    "text": "prototype we could fix this with syntax this is my own idea",
    "start": "1524120",
    "end": "1529480"
  },
  {
    "start": "1528000",
    "end": "1581000"
  },
  {
    "text": "using the pound symbol between an object and a function would signal go in and",
    "start": "1529480",
    "end": "1535919"
  },
  {
    "text": "make it so that it's soft bound so that the something function is soft bound to the awesome object and you use it",
    "start": "1535919",
    "end": "1542679"
  },
  {
    "text": "exactly the same as you do in the previous slide how about another example again this is not something I've",
    "start": "1542679",
    "end": "1549720"
  },
  {
    "text": "invented this is called try catches where you want to conditionally decide",
    "start": "1549720",
    "end": "1555200"
  },
  {
    "text": "if you are going to handle an error or not there are certain types of errors or certain error conditions that you want",
    "start": "1555200",
    "end": "1561159"
  },
  {
    "text": "to handle and other ones you want to allow to continue to propagate out so this is how we normally do it we put",
    "start": "1561159",
    "end": "1566320"
  },
  {
    "text": "these if statements inside of our catch block and then we have this ugly thing at the bottom where we have to throw we have to rethrow the error if we haven't",
    "start": "1566320",
    "end": "1573480"
  },
  {
    "text": "chosen to handle it explicitly through one of the other Clauses that sucks but I didn't invent this syntax",
    "start": "1573480",
    "end": "1580120"
  },
  {
    "text": "but there's a much better way of doing it it's called conditional catch Clauses again about a decade ago Firefox",
    "start": "1580120",
    "end": "1586480"
  },
  {
    "start": "1581000",
    "end": "1608000"
  },
  {
    "text": "invented this syntax I just think it's something that ought ought to have already been standardized and maybe someday it will but it's extremely easy",
    "start": "1586480",
    "end": "1593600"
  },
  {
    "text": "to write a tool that transforms your code from that into something that works in the browser I'd rather write that",
    "start": "1593600",
    "end": "1598679"
  },
  {
    "text": "code than the code on the previous slide so what this all comes down to",
    "start": "1598679",
    "end": "1605679"
  },
  {
    "text": "again sort of coming back to the silliness of it what it all comes down to is I want you to have JavaScript but",
    "start": "1605679",
    "end": "1612000"
  },
  {
    "start": "1608000",
    "end": "1634000"
  },
  {
    "text": "I want you to have it your way instead of being forced into some herd path that works for the entire global population",
    "start": "1612000",
    "end": "1618640"
  },
  {
    "text": "of all JavaScript developers I want to remove the things that are preventing you from being effective at your",
    "start": "1618640",
    "end": "1625039"
  },
  {
    "text": "job now at this point there's a really important question that you should be asking yourself how on Earth will I",
    "start": "1625039",
    "end": "1632279"
  },
  {
    "text": "possibly collaborate with other members of my team if everybody picks their own JavaScript there's no possible way for",
    "start": "1632279",
    "end": "1638600"
  },
  {
    "start": "1634000",
    "end": "1651000"
  },
  {
    "text": "me to have all of this stuff uh you know in the same repository it'll be total Anarchy won't it no it doesn't have to",
    "start": "1638600",
    "end": "1645799"
  },
  {
    "text": "be that way in the exact same mind ET is what I talked about with style checking we can create these rules that rewrite",
    "start": "1645799",
    "end": "1652880"
  },
  {
    "start": "1651000",
    "end": "1672000"
  },
  {
    "text": "our code using what I call invers transforms which means that it can transparently with the same rule sets we",
    "start": "1652880",
    "end": "1659600"
  },
  {
    "text": "talked about with code Styles it can transparently rewrite the code to something that looks the way you want it to look and when it's checked in it",
    "start": "1659600",
    "end": "1666880"
  },
  {
    "text": "rewrites it to the standard that will work in browsers and that everybody's agreed upon for the repository and it goes both directions",
    "start": "1666880",
    "end": "1673880"
  },
  {
    "start": "1672000",
    "end": "1701000"
  },
  {
    "text": "so it allows you to cooperate with other people you know the only thing that it doesn't really allow that very easily is",
    "start": "1673880",
    "end": "1679480"
  },
  {
    "text": "you can't really pair with somebody who writes a vastly different style than you but if you've ever tried to pair with",
    "start": "1679480",
    "end": "1684799"
  },
  {
    "text": "somebody that writes a vastly different style than you you've got bigger problems than whether or not you know the if statement looks a little weird to",
    "start": "1684799",
    "end": "1690880"
  },
  {
    "text": "them so I don't have a solution for that but I think in versible transforms can actually work and I've proven that with",
    "start": "1690880",
    "end": "1696640"
  },
  {
    "text": "some of the tools I've already built remember this example look at the two side by side all",
    "start": "1696640",
    "end": "1702480"
  },
  {
    "start": "1701000",
    "end": "1747000"
  },
  {
    "text": "we have to do is decide when we see this in the repo and you have that rule turned on in your tool that when you",
    "start": "1702480",
    "end": "1708279"
  },
  {
    "text": "check it out from the repo you don't want colon undefined it just simply takes those out and then the reverse of that the",
    "start": "1708279",
    "end": "1715200"
  },
  {
    "text": "inverse of that is whenever you check code in that doesn't have those if it's not grammatically correct it just adds them in it's as simple as that now the",
    "start": "1715200",
    "end": "1722760"
  },
  {
    "text": "tools can be even smarter they can allow you to sort of create you know layers on top of these things or decide that a",
    "start": "1722760",
    "end": "1728360"
  },
  {
    "text": "group of people want to share the same set of rules there's all kinds of possibilities this is research I don't",
    "start": "1728360",
    "end": "1734760"
  },
  {
    "text": "have fully baked solutions for a lot of these things but I've already proven in concept that we can create a a subset of",
    "start": "1734760",
    "end": "1742159"
  },
  {
    "text": "the things that you would want to rewrite about the language can be done as inversal transforms which means that we just need",
    "start": "1742159",
    "end": "1748600"
  },
  {
    "start": "1747000",
    "end": "1834000"
  },
  {
    "text": "to build the tools to do it let me give you some examples of",
    "start": "1748600",
    "end": "1753720"
  },
  {
    "text": "tools that are already out there that are going to Aid you in this process you don't have to invent all of this stuff",
    "start": "1753720",
    "end": "1758799"
  },
  {
    "text": "espra and acorn are two very popular JavaScript parsers so if you've already pre-identified and and removed things",
    "start": "1758799",
    "end": "1765279"
  },
  {
    "text": "from your code that aren't valid JavaScript like I talked about with literalize then you can parse the rest",
    "start": "1765279",
    "end": "1771039"
  },
  {
    "text": "of your JavaScript JavaScript your standard JavaScript using these tools es",
    "start": "1771039",
    "end": "1776240"
  },
  {
    "text": "code gen goes the other direction it takes parsed code and it regenerates code so you can modify the tree to",
    "start": "1776240",
    "end": "1782080"
  },
  {
    "text": "inject extra stuff put your extra code Styles in put your extra forms in and then simply pass it into es code gen and",
    "start": "1782080",
    "end": "1788480"
  },
  {
    "text": "it actually generates the string of code es scope and Es levels are",
    "start": "1788480",
    "end": "1793760"
  },
  {
    "text": "analyzers for your scope for example if any of you have ever had trouble where you're trying to figure out your",
    "start": "1793760",
    "end": "1799080"
  },
  {
    "text": "variables and your VAR self equals this and all that stuff these are tools that can go through your code specifically",
    "start": "1799080",
    "end": "1804240"
  },
  {
    "text": "and understand all the levels of scope including all the levels of block scope and they could for instance combine",
    "start": "1804240",
    "end": "1810440"
  },
  {
    "text": "Scopes together if you've declared something too low in a scope but you don't need it to necessarily be there",
    "start": "1810440",
    "end": "1815679"
  },
  {
    "text": "and it can figure out that it's okay to move it it can change where it's scoped or the reverse it can put things very low if they're only being used in one",
    "start": "1815679",
    "end": "1823799"
  },
  {
    "text": "location Istanbul great tool for looking at code coverage it can tell you if there are places in your code base that",
    "start": "1823799",
    "end": "1830039"
  },
  {
    "text": "aren't being covered right now by tests you should be testing everything by the way let me give you one other side note",
    "start": "1830039",
    "end": "1836240"
  },
  {
    "text": "all of this heresy about writing your own JavaScript I want to give you one sort of caveat here it is not an",
    "start": "1836240",
    "end": "1843080"
  },
  {
    "text": "excuse to not learn JavaScript and to not appreciate JavaScript I am not",
    "start": "1843080",
    "end": "1848200"
  },
  {
    "text": "suggesting that this is the right approach if you just hate JavaScript and you're banging your head against your desk every single day and you're not",
    "start": "1848200",
    "end": "1854640"
  },
  {
    "text": "interested in learning how it works you do need to understand the language first but if you invest that time and you run",
    "start": "1854640",
    "end": "1861159"
  },
  {
    "text": "up against things that are preventing you from getting your job done I think these tools can fix those sorts of",
    "start": "1861159",
    "end": "1866760"
  },
  {
    "text": "problems more tools es Traverse it will analyze your abstract syntax tree the",
    "start": "1866760",
    "end": "1872000"
  },
  {
    "text": "the result of your parsing it will analyze that allow you to put hooks in and rewrite things on the fly in a",
    "start": "1872000",
    "end": "1877320"
  },
  {
    "text": "streaming fashion eslint it's one of the linters out there there's other ones like JS hint of course but es lint is",
    "start": "1877320",
    "end": "1883919"
  },
  {
    "start": "1881000",
    "end": "1958000"
  },
  {
    "text": "incredibly configurable so you can actually use es lint to verify your code as you're running through these parsing",
    "start": "1883919",
    "end": "1890039"
  },
  {
    "text": "you can even write custom eslint tools for your non-standard",
    "start": "1890039",
    "end": "1895278"
  },
  {
    "text": "JavaScript finally Plato and JS complexity. org will actually analyze the cyclomatic complexity of your code",
    "start": "1895600",
    "end": "1902559"
  },
  {
    "text": "and suggest ways for you to undo some of that complexity if you've got too much nesting of your functions or you have",
    "start": "1902559",
    "end": "1908200"
  },
  {
    "text": "too many recursive function calls it can find that stuff out and help you identify it and fix",
    "start": "1908200",
    "end": "1913880"
  },
  {
    "text": "it there's a phenomenal amount of tools and I didn't even list all of them so this is not something you have to start",
    "start": "1913880",
    "end": "1919840"
  },
  {
    "text": "out completely from a blank slate with no idea what to do there's a lot of tools that you can build upon all you have to do is have the motivation that",
    "start": "1919840",
    "end": "1925919"
  },
  {
    "text": "it's worth it let me suggest to you some things that you might do to fix your",
    "start": "1925919",
    "end": "1932000"
  },
  {
    "text": "code what about autocorrecting misspellings of variable names how many of you have ever had you you struggle",
    "start": "1932000",
    "end": "1938240"
  },
  {
    "text": "with your tools and you're finding a place to do that what if a tool could figure out that you've misspelled a variable name in one place and used the",
    "start": "1938240",
    "end": "1944600"
  },
  {
    "text": "same name the correct name everywhere else and it just fixes it for you and alerts you so you can fix it in your source",
    "start": "1944600",
    "end": "1950679"
  },
  {
    "text": "code safely rearranging your scope consolidating your declarations we",
    "start": "1950679",
    "end": "1955919"
  },
  {
    "text": "talked about some of these things already automatically reducing the complexity of your code refactoring Boolean traps if you write apis that",
    "start": "1955919",
    "end": "1963080"
  },
  {
    "text": "have five different Boolean variables in the API of the method signature what if it could automatically rewrite those",
    "start": "1963080",
    "end": "1969440"
  },
  {
    "text": "things so that it wasn't falling into the Trap of a false being you know the same thing as an",
    "start": "1969440",
    "end": "1974919"
  },
  {
    "text": "undefined you can optimize the performance of your code on the fly and the list really does go on and on if",
    "start": "1974919",
    "end": "1981600"
  },
  {
    "text": "there's ever been a paino that you've run across in your JavaScript code there's a good possibility that a",
    "start": "1981600",
    "end": "1987080"
  },
  {
    "text": "smarter tool could help smooth out at least some if not all of those problems I think we've gotten so pigeon",
    "start": "1987080",
    "end": "1993159"
  },
  {
    "text": "hold into well you know whatever JavaScript is in the browser that's the only code I can write and the people",
    "start": "1993159",
    "end": "1998480"
  },
  {
    "text": "that went to Coffee script didn't think that way the people that jump script from JavaScript to Coffee script said",
    "start": "1998480",
    "end": "2004600"
  },
  {
    "text": "let's get a better language a better language for me to author I don't care what it runs in I just want to have a",
    "start": "2004600",
    "end": "2009720"
  },
  {
    "text": "better language to author here's a secret if you don't know the computer doesn't care about your source code at",
    "start": "2009720",
    "end": "2015240"
  },
  {
    "text": "all source code is not for computers it's for developers it's for human beings you need to find source code that",
    "start": "2015240",
    "end": "2022679"
  },
  {
    "text": "works the way your brain does so that you can be the most effective developer possible and if JavaScript is in that",
    "start": "2022679",
    "end": "2028639"
  },
  {
    "text": "language frankly that's not going to bother me if you jump ship and go to go or whatever but if JavaScript is that",
    "start": "2028639",
    "end": "2034080"
  },
  {
    "text": "language and you're just running across these issues maybe tools are a better way to solve it some other um talks that",
    "start": "2034080",
    "end": "2041960"
  },
  {
    "start": "2039000",
    "end": "2064000"
  },
  {
    "text": "you should definitely look at these links are too small for you to see but if you get these later this is a talk um",
    "start": "2041960",
    "end": "2047080"
  },
  {
    "text": "the future of JavaScript language tooling and another one is called building JavaScript tools both of these",
    "start": "2047080",
    "end": "2052800"
  },
  {
    "text": "talks are fantastic and some of the some of the ideas that I've got have come directly from there so check out those talks as",
    "start": "2052800",
    "end": "2059200"
  },
  {
    "text": "well let me give you one more thing to end with this is an example that somebody",
    "start": "2059200",
    "end": "2065919"
  },
  {
    "start": "2064000",
    "end": "2119000"
  },
  {
    "text": "just actually gave me earlier today on Twitter they were complaining about this coercion nature of JavaScript and they",
    "start": "2065919",
    "end": "2071280"
  },
  {
    "text": "were saying well I had this one problem where um if I called the function it worked properly but if I did a",
    "start": "2071280",
    "end": "2076599"
  },
  {
    "text": "comparison with the function and I had accidentally forgotten to put the parenthesis there then I got a false but",
    "start": "2076599",
    "end": "2082118"
  },
  {
    "text": "I wanted it to throw me an error and I'm mad about the fact that JavaScript coerces that function to a number and it",
    "start": "2082119",
    "end": "2088638"
  },
  {
    "text": "doesn't it doesn't throw me an error if you're having trouble with your coercion and your other things in your",
    "start": "2088639",
    "end": "2094960"
  },
  {
    "text": "program and I know it's very invogue to sort of blame that as a deep flaw of the language I don't think it's a flaw at all I think coercion is awesome the",
    "start": "2094960",
    "end": "2102040"
  },
  {
    "text": "third book in my series is all about type and coercion and I'm suggesting to you that I think it's a tool you can learn and use with every other tool in",
    "start": "2102040",
    "end": "2108680"
  },
  {
    "text": "the language I know I'm in the minority on that but if you look at this particular scenario and if this is",
    "start": "2108680",
    "end": "2113839"
  },
  {
    "text": "something you've ever had a problem with or if you had problems similar let me suggest to you another tool that can fix",
    "start": "2113839",
    "end": "2118880"
  },
  {
    "text": "this problem it's called restrict mode restrict mod.org it's a tool that goes",
    "start": "2118880",
    "end": "2125480"
  },
  {
    "start": "2119000",
    "end": "2164000"
  },
  {
    "text": "through it parses your code it wraps of your comparisons in type safe checks it",
    "start": "2125480",
    "end": "2131000"
  },
  {
    "text": "runs your code on the server so this is not stuff that gets deployed to the browser but it runs through your code",
    "start": "2131000",
    "end": "2136520"
  },
  {
    "text": "with sample input and then it reports out an error that shows you if you're doing unsafe checking like for instance",
    "start": "2136520",
    "end": "2143079"
  },
  {
    "text": "it's kind of small to see here but it'll do your checks with your less than and your greater than and it'll only allows",
    "start": "2143079",
    "end": "2148359"
  },
  {
    "text": "those with numbers and strings so if you ever have a value that gets to it that's not a number or a string it'll throw out an error and say you're doing something",
    "start": "2148359",
    "end": "2155680"
  },
  {
    "text": "unsafe tools can fix a a lot more problems than I think we've been willing to admit and if if nothing else I hope",
    "start": "2155680",
    "end": "2162200"
  },
  {
    "text": "that's what I've inspired you with in this talk today it's an honor to be here I appreciate your time very much it looks",
    "start": "2162200",
    "end": "2169119"
  },
  {
    "start": "2164000",
    "end": "2219000"
  },
  {
    "text": "like we might have like two or three minutes left for some questions if there are any yeah I",
    "start": "2169119",
    "end": "2176480"
  },
  {
    "text": "was yeah so the macros are often times the question was when do you use a",
    "start": "2176480",
    "end": "2182359"
  },
  {
    "text": "function call um that wraps up some code versus a macro often times the macro looks like aun function call but it",
    "start": "2182359",
    "end": "2188200"
  },
  {
    "text": "doesn't always so macros actually can rewrite the way your syntax looks it it can it can look like a function call but",
    "start": "2188200",
    "end": "2194359"
  },
  {
    "text": "it can actually change the way your operators are working so I would say macros are for fixing mechanics of the",
    "start": "2194359",
    "end": "2199599"
  },
  {
    "text": "language where functions are for abstracting logic good",
    "start": "2199599",
    "end": "2204680"
  },
  {
    "text": "question let's go out and build some better tools thanks for being here appreciate it",
    "start": "2204680",
    "end": "2211160"
  }
]