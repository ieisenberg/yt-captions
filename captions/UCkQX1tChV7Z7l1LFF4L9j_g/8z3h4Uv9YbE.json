[
  {
    "text": "[Music]",
    "start": "2330",
    "end": "8400"
  },
  {
    "text": "thank you everybody for coming this is a talk about the play framework at",
    "start": "8400",
    "end": "13679"
  },
  {
    "text": "LinkedIn and uh let me set the context a little bit here",
    "start": "13679",
    "end": "18960"
  },
  {
    "text": "so you're a developer and you're using Java to build web services uh this is your life you spent",
    "start": "18960",
    "end": "27519"
  },
  {
    "text": "an awful lot of time just waiting waiting for a service to redeploy there's numbers that show that uh some",
    "start": "27519",
    "end": "34440"
  },
  {
    "text": "Java developers spent a quarter of their time waiting for their server to redeploy you hire Four Guys three of",
    "start": "34440",
    "end": "39559"
  },
  {
    "text": "them are actually working it's mindboggling uh how many of you spend time tailing catalina.out or some other",
    "start": "39559",
    "end": "46199"
  },
  {
    "text": "log file digging through just enormous stack traces that are incredibly hard to",
    "start": "46199",
    "end": "52399"
  },
  {
    "text": "parse you know you think you use I know the Java language I know Scala I know JavaScript you have to speak uh stack",
    "start": "52399",
    "end": "58519"
  },
  {
    "text": "Trace as well to really be a effective at Java um you spent a lot of time in",
    "start": "58519",
    "end": "63760"
  },
  {
    "text": "XML soup probably not too visible from back there but spring files config files",
    "start": "63760",
    "end": "68840"
  },
  {
    "text": "and just mountains and mountains of XML without any really good tooling to make any sense of",
    "start": "68840",
    "end": "74119"
  },
  {
    "text": "it you deal with classes like this this is one of my all-time favorite classes I think ever it's part of the spring",
    "start": "74119",
    "end": "80880"
  },
  {
    "text": "framework it's called the abstract Singleton proxy Factory Bean and the",
    "start": "80880",
    "end": "86479"
  },
  {
    "text": "description makes it awesome it's a convenient proxy Factory Bean be super class for proxy Factory beans that",
    "start": "86479",
    "end": "93439"
  },
  {
    "text": "create only Singleton love it so awesome um you occasionally run into",
    "start": "93439",
    "end": "101399"
  },
  {
    "text": "thread pool Hill uh for some reason or another you start running out of threads the latency on your server goes",
    "start": "101399",
    "end": "108600"
  },
  {
    "text": "crazy uh and that's really what it's about that's what Java web development has been for a very long time it has",
    "start": "108600",
    "end": "116240"
  },
  {
    "text": "just been pain so there is a better way",
    "start": "116240",
    "end": "121320"
  },
  {
    "text": "and it's called Ruby on Rails no I'm just kidding um we have",
    "start": "121320",
    "end": "127520"
  },
  {
    "text": "some real work to do here so uh no it's called play framework um which is a modern web framework for Java and for",
    "start": "127520",
    "end": "134680"
  },
  {
    "text": "Scala that I think just lets you have all the stuff that you're used to with Java the type safety the IDE the",
    "start": "134680",
    "end": "141040"
  },
  {
    "text": "performance the jvm with far less pain um so I work at LinkedIn world's",
    "start": "141040",
    "end": "149239"
  },
  {
    "text": "largest professional Network we have 225 million members uh there's more than two people joining every second so by the",
    "start": "149239",
    "end": "156599"
  },
  {
    "text": "time I'm done rambling here 7,200 or so people will have joined um so it's",
    "start": "156599",
    "end": "162159"
  },
  {
    "text": "pretty good scale so we've been using play production for about six months so we're still pretty new to it we're learning a lot but we kind of are",
    "start": "162159",
    "end": "167800"
  },
  {
    "text": "excited about it and we want to share it with all of you guys and a few of the apps you may have seen from just a few",
    "start": "167800",
    "end": "172959"
  },
  {
    "text": "months of work uh we launched channels uh which is part of our influencer platform all sorts of important people",
    "start": "172959",
    "end": "179159"
  },
  {
    "text": "are blogging and sharing things on LinkedIn and this is a great way to kind of break it down by category and follow",
    "start": "179159",
    "end": "184280"
  },
  {
    "text": "the channels that you're interested in um one of our monetization products premium subscriptions is built on top of",
    "start": "184280",
    "end": "190519"
  },
  {
    "text": "play and they have all sorts of cool visualizations uh polls the front end and the back end polls and groups and a",
    "start": "190519",
    "end": "196799"
  },
  {
    "text": "few other places uh was built on top of play uh and we have a ton of internal tools that have just popped out of",
    "start": "196799",
    "end": "202920"
  },
  {
    "text": "nowhere just because it's so quick to get started and just get something up and running this is an internal tool to",
    "start": "202920",
    "end": "207959"
  },
  {
    "text": "search our internal restful search and figure out how to call them and get data from them and things of that",
    "start": "207959",
    "end": "213959"
  },
  {
    "text": "sort so that's just from a few months of work there'll be way more in the future",
    "start": "213959",
    "end": "219280"
  },
  {
    "text": "um I'm Yi Brickman or I go by the nickname Jim for people that have trouble pronouncing Yi uh and I'm part",
    "start": "219280",
    "end": "226080"
  },
  {
    "text": "of our service infrastructure team I'm leading the project that's bringing uh the play framework to LinkedIn and",
    "start": "226080",
    "end": "232680"
  },
  {
    "text": "really this talk it's going to be about building uh web services at massive scale using jav and Scola",
    "start": "232680",
    "end": "240640"
  },
  {
    "text": "while maintaining performance reliability and developer productivity",
    "start": "240640",
    "end": "245680"
  },
  {
    "text": "and this is a very tricky balance to kind of achieve very few Frameworks are really able to do it successfully um",
    "start": "245680",
    "end": "251480"
  },
  {
    "text": "usually they give you one or the other but rarely all three so this is kind of an outline of",
    "start": "251480",
    "end": "257040"
  },
  {
    "text": "what we'll do I'll give you guys a very quick kind of getting started with play um I'll do some live coding which should",
    "start": "257040",
    "end": "262680"
  },
  {
    "text": "be interesting uh show you what it looks like to actually use the framework uh error handling I'll talk a little bit",
    "start": "262680",
    "end": "268240"
  },
  {
    "text": "about plays uh kind of evented or reactive model for handling IO I'll talk",
    "start": "268240",
    "end": "274360"
  },
  {
    "text": "a bit about Scala talk a bit about performance and the community so a lot to get through uh let's get started so",
    "start": "274360",
    "end": "282400"
  },
  {
    "text": "those of you guys who want to try out play it's really easy grab it from playf framework. comom it's really easy to",
    "start": "282400",
    "end": "287880"
  },
  {
    "text": "install it uh to create a new app you just run play new and then give it the name of an app uh to set up your IDE",
    "start": "287880",
    "end": "296479"
  },
  {
    "text": "with all the dependencies and classes and jars and everything that you need there's just another command play IDE or",
    "start": "296479",
    "end": "301960"
  },
  {
    "text": "play Eclipse depending on what your IDE is and to actually run the app it's just play run and it'll fire up and by",
    "start": "301960",
    "end": "308479"
  },
  {
    "text": "default listen on Port 9,000 and if you hit a page you get this nice intro page if you've used rails if youve used a",
    "start": "308479",
    "end": "314120"
  },
  {
    "text": "bunch of other Frameworks it should feel like a very natural way to start a new app if you're used to other Frameworks",
    "start": "314120",
    "end": "319440"
  },
  {
    "text": "maybe not so much so this is actually very easy it takes just a few minutes and you're up and running so I did this",
    "start": "319440",
    "end": "324560"
  },
  {
    "text": "uh I have it running in the background here you can see I don't know some console stuff and the app is",
    "start": "324560",
    "end": "330880"
  },
  {
    "text": "running and I also have it loaded in my IDE so what I'm going to be able to do now is actually code for you guys a",
    "start": "330880",
    "end": "337199"
  },
  {
    "text": "little bit and if the demo gods are kind hopefully show you a little bit of what it's like to actually use play so play",
    "start": "337199",
    "end": "344280"
  },
  {
    "text": "is uh uses kind of an MVC pattern model view controller again many Frameworks do",
    "start": "344280",
    "end": "349680"
  },
  {
    "text": "the same thing if you've used anything like rails this should feel right at home so we'll create a",
    "start": "349680",
    "end": "355560"
  },
  {
    "text": "controller which is just a uh Java class we'll start with a basic hello world",
    "start": "355560",
    "end": "361600"
  },
  {
    "text": "example and to get some nice helper methods it can extend the controller class from",
    "start": "361600",
    "end": "367520"
  },
  {
    "text": "play and inside of your controllers you basically have actions that return some kind of a",
    "start": "367520",
    "end": "373479"
  },
  {
    "text": "result uh not the most original class name apparently and so in here we need to",
    "start": "373479",
    "end": "380160"
  },
  {
    "text": "return some sort of result the simplest one is a 200 okay and you can do that using this okay method that's in the",
    "start": "380160",
    "end": "386280"
  },
  {
    "text": "controller class so this actually is kind of the hello world example we can put some text in it just to make it a",
    "start": "386280",
    "end": "391759"
  },
  {
    "text": "little more interesting so the only thing we need to do uh besides this is just expose it at some kind of a URL so",
    "start": "391759",
    "end": "399680"
  },
  {
    "text": "there is a routes file in here and the Syntax for the routes file is the HTTP",
    "start": "399680",
    "end": "406479"
  },
  {
    "text": "method that you're interested in get put post Etc the URL pattern so we'll just put this at hello and then quite",
    "start": "406479",
    "end": "413400"
  },
  {
    "text": "literally the code to execute so in this case it's controllers. hello world do",
    "start": "413400",
    "end": "420440"
  },
  {
    "text": "index um that's it if you now go to your browser go to this guy SL hello hit",
    "start": "420440",
    "end": "427919"
  },
  {
    "text": "enter you can see in the background it well it's already done but if you scroll up a little bit it compiled all the",
    "start": "427919",
    "end": "434240"
  },
  {
    "text": "stuff on the Fly reloaded the server I have a bunch of plugins in here that I'll start it up but basically you get your hello world example um we can make",
    "start": "434240",
    "end": "442800"
  },
  {
    "text": "this more interesting let's read a parameter out of the query string so maybe we'll read the name out of the",
    "start": "442800",
    "end": "448680"
  },
  {
    "text": "query string just add it to the routes file and this just gets passed to your action as a function parameter or sorry",
    "start": "448680",
    "end": "456639"
  },
  {
    "text": "this should be called name and so now we can do something hello",
    "start": "456639",
    "end": "461840"
  },
  {
    "text": "plus name oops there we go so now I can just add",
    "start": "461840",
    "end": "469080"
  },
  {
    "text": "that guy onto here you can see I've tried this example before we hit enter",
    "start": "469080",
    "end": "474159"
  },
  {
    "text": "give it a second and now it says hello Gem and so now we have a slightly more Dynamic example and we can changes to",
    "start": "474159",
    "end": "479879"
  },
  {
    "text": "Bob or whatever we want um we can also play has some really cool routing stuff",
    "start": "479879",
    "end": "485360"
  },
  {
    "text": "if you like kind of SEO friendly URLs you can actually make the parameter part of the URL as opposed to part of the",
    "start": "485360",
    "end": "491960"
  },
  {
    "text": "query string so this is kind of this Syntax for saying the thing after hello slash call it name um so now instead of",
    "start": "491960",
    "end": "500360"
  },
  {
    "text": "doing it as a query string parameter I can do slash let's change it to Steve so you can actually see something happen um",
    "start": "500360",
    "end": "508560"
  },
  {
    "text": "so it reloads and now says hello Steve and it's reading it out of the URL um parameters have types um after",
    "start": "508560",
    "end": "516279"
  },
  {
    "text": "all we're using a type safe language we should take advantage of it so we can add another parameter maybe the age and",
    "start": "516279",
    "end": "521599"
  },
  {
    "text": "it's an integer so now we can say hello name you are age years",
    "start": "521599",
    "end": "529959"
  },
  {
    "text": "old and so now let's add another uh oops another part to our URL here fix the",
    "start": "529959",
    "end": "537640"
  },
  {
    "text": "spacing a bit and so I wrote here just name but this is really just shorthand",
    "start": "537640",
    "end": "543120"
  },
  {
    "text": "for something that is a string if you actually want these things to be to have different types you just specify the",
    "start": "543120",
    "end": "548720"
  },
  {
    "text": "type after the parameter this is you can see now it's all compiling and inj is happy uh technically the syntax on this",
    "start": "548720",
    "end": "555680"
  },
  {
    "text": "right side here is Scala but you don't really need to know much Scala to make use of it so we can now say that Steve",
    "start": "555680",
    "end": "563160"
  },
  {
    "text": "is 55 years old and it'll reload the changes and now it says hello Steve you are 55 years old",
    "start": "563160",
    "end": "571320"
  },
  {
    "text": "um and this has Type checking so if I put in some garbage in here that's not a number it instantly tells me it's not a",
    "start": "571320",
    "end": "576680"
  },
  {
    "text": "number which is very handy using our type safety um to our advantage um okay",
    "start": "576680",
    "end": "583079"
  },
  {
    "text": "let's uh oh one more thing we can do um I showed you guys the giant Blobs of XML all over the uh kind of serlet universe",
    "start": "583079",
    "end": "589880"
  },
  {
    "text": "play for its config system uses types safe configs which are in these Doon",
    "start": "589880",
    "end": "595240"
  },
  {
    "text": "files and essentially these boil down to Json but it just gives a couple extra features on top of it so you can include",
    "start": "595240",
    "end": "601760"
  },
  {
    "text": "other files you can reference other configs you can use this key almost this properties file syntax or you can just",
    "start": "601760",
    "end": "607880"
  },
  {
    "text": "put ja on in here it's kind of up to you so where am I I am at",
    "start": "607880",
    "end": "614200"
  },
  {
    "text": "jackc and so in here to this example I will read a config and you'll see that",
    "start": "614200",
    "end": "620000"
  },
  {
    "text": "it can hot reload config changes as well so my location",
    "start": "620000",
    "end": "626800"
  },
  {
    "text": "is get string location is the name of the config and you are",
    "start": "627200",
    "end": "635680"
  },
  {
    "text": "at location can you guys still see that hopefully you guys can read that refresh",
    "start": "635680",
    "end": "642079"
  },
  {
    "text": "the page it's going to reload the config changes when this thing comes up and there we go you are at Jacon so really",
    "start": "642079",
    "end": "649160"
  },
  {
    "text": "endtoend hot reload Java changes Scala changes config changes whatever you're working on yeah so uh first question I",
    "start": "649160",
    "end": "657240"
  },
  {
    "text": "knew you were going to ask it if you actually look at my slides don't worry about static t Okay",
    "start": "657240",
    "end": "665160"
  },
  {
    "text": "so uh play has a philosophy with uh controllers that the the actions should be static because there's really just",
    "start": "665160",
    "end": "670920"
  },
  {
    "text": "one controller it's kind of like a switchboard operator if you don't want to use it you can instantiate the controller on every request you can do",
    "start": "670920",
    "end": "677720"
  },
  {
    "text": "injection if you really want to you can use play with spring with Google juice whatever you want to using static here",
    "start": "677720",
    "end": "683160"
  },
  {
    "text": "is just the fastest way for me to give you guys a really quick demo so don't panic you can still have ioc and all the",
    "start": "683160",
    "end": "688760"
  },
  {
    "text": "kind of stuff that you're used to uh your other question was as annotations",
    "start": "688760",
    "end": "694920"
  },
  {
    "text": "right um I don't think so I think the default routing framework uses the",
    "start": "694920",
    "end": "700320"
  },
  {
    "text": "routes file that said removing the default routing framework is one line of code and then you can swap in your own",
    "start": "700320",
    "end": "706120"
  },
  {
    "text": "literally there's a method called on Route request it gives you the request the default implementation uses the",
    "start": "706120",
    "end": "711880"
  },
  {
    "text": "routes file if you want to do something else you absolutely can um and we actually did that for some of our backends we have custom uh restful",
    "start": "711880",
    "end": "719880"
  },
  {
    "text": "routing uh it's a framework called rley that's open source and so we actually",
    "start": "719880",
    "end": "724920"
  },
  {
    "text": "use that on top of play by doing exactly that so it's actually pretty easy to do uh to swap that out so configs are hot",
    "start": "724920",
    "end": "731440"
  },
  {
    "text": "reloaded which is awesome but let's let's render a view I'm tired of rendering things inside of my controller",
    "start": "731440",
    "end": "736839"
  },
  {
    "text": "this is kind of not so cool so let's create a view um play builtin has uh",
    "start": "736839",
    "end": "742240"
  },
  {
    "text": "these things called Scala templates um we all we use play at LinkedIn with uh",
    "start": "742240",
    "end": "747440"
  },
  {
    "text": "dust.js happy to follow up at after the talk if anyone wants to know how that works so we'll create a new template in",
    "start": "747440",
    "end": "755040"
  },
  {
    "text": "here and in here I mean just like any templating language you can put your usual",
    "start": "755040",
    "end": "760399"
  },
  {
    "text": "markup um the difference is play will actually compile these Scola templates",
    "start": "760399",
    "end": "765560"
  },
  {
    "text": "into a function so these are also actually type safe which is pretty interesting and you can take in",
    "start": "765560",
    "end": "770880"
  },
  {
    "text": "parameters in that function using this syntax at the top so let's say I want the same name and I want the same age",
    "start": "770880",
    "end": "778120"
  },
  {
    "text": "parameter um so now those are going to be parameters to this guy and now I can do something like",
    "start": "778120",
    "end": "783720"
  },
  {
    "text": "Hello uh let's put it make it bold name you have autocomplete in here as well",
    "start": "783720",
    "end": "790040"
  },
  {
    "text": "you are age uh years old and I don't know",
    "start": "790040",
    "end": "797519"
  },
  {
    "text": "let's put a picture in here as well just so we know it's really a view being rendered",
    "start": "797519",
    "end": "803880"
  },
  {
    "text": "um assets play has really nice uh types",
    "start": "803880",
    "end": "809199"
  },
  {
    "text": "save generation of uh URLs as well uh but I'll demo that if we have time at",
    "start": "809199",
    "end": "815279"
  },
  {
    "text": "the end okay so I have a view that's just going to have a logo and say hi you are at uh you are so many years old so",
    "start": "815279",
    "end": "821440"
  },
  {
    "text": "now we just have to actually render it from here so you do that by doing this",
    "start": "821440",
    "end": "828560"
  },
  {
    "text": "oops views render and you pass it the name and the age as parameters I haven't",
    "start": "828560",
    "end": "835320"
  },
  {
    "text": "compiled this view before so right now it looks like an error but as soon as I refresh uh intellig should pick that up",
    "start": "835320",
    "end": "842000"
  },
  {
    "text": "correctly and it should render in the browser if the demo gods are kind hey there we go so play logo hello Steve you",
    "start": "842000",
    "end": "848360"
  },
  {
    "text": "are 55 years old can obviously tweet these parameters Steve just got really old um and you can see in my IDE if it",
    "start": "848360",
    "end": "857000"
  },
  {
    "text": "updates there we go so now it recognized that everything is compiling you have type ahead everything is just very",
    "start": "857000",
    "end": "862279"
  },
  {
    "text": "nicely integrated um so that's a really basic intro to working with play I'll do a few",
    "start": "862279",
    "end": "867680"
  },
  {
    "text": "more Demos in a bit but this is kind of this MVC architecture um one of my favorite",
    "start": "867680",
    "end": "873120"
  },
  {
    "text": "things I showed you guys a really brief demo of it is play has amazing error handling so that I don't have to sit",
    "start": "873120",
    "end": "878279"
  },
  {
    "text": "there and tail logs all day long so let's say I forgot a semicolon I mean",
    "start": "878279",
    "end": "883759"
  },
  {
    "text": "obviously intelligence shows me but pretend you have some silly compil error if I refresh the page play shows me",
    "start": "883759",
    "end": "890079"
  },
  {
    "text": "immediately in the browser what the error was what file it's in what line and the actual busted source code right",
    "start": "890079",
    "end": "897120"
  },
  {
    "text": "here I don't have to go digging for it in some console it it's also by the way in the console if you do need the full",
    "start": "897120",
    "end": "902399"
  },
  {
    "text": "stack Tres but in most cases you just see the error in the browser and you go and fix it um so I can fix it and this",
    "start": "902399",
    "end": "908360"
  },
  {
    "text": "applies pretty much everywhere if I mess up the name of one of these variables in here again intellig is smart enough to",
    "start": "908360",
    "end": "915040"
  },
  {
    "text": "show me but if I miss that for some reason play will show me in the browser where that mistake is um and so this",
    "start": "915040",
    "end": "921560"
  },
  {
    "text": "applies to templates to Java to config again end to end the errors show up in the browser you do not have to",
    "start": "921560",
    "end": "927639"
  },
  {
    "text": "exclusively understand how to read mile long stack traces to know what's going on in your app really powerful",
    "start": "927639",
    "end": "934440"
  },
  {
    "text": "feature um okay so that's a really basic Intro by the way I had a bunch of slides here just in case the demo decided to",
    "start": "934440",
    "end": "940880"
  },
  {
    "text": "blow up in my face so I'll skip all of those guys and we'll go to the next topic",
    "start": "940880",
    "end": "947000"
  },
  {
    "text": "here so uh besides being very developer friendly uh play does something else",
    "start": "947000",
    "end": "953040"
  },
  {
    "text": "quite a bit different than most Java Frameworks that you're probably used to um most people are used to what would",
    "start": "953040",
    "end": "959279"
  },
  {
    "text": "call threaded servers by the way this is a very high level overview I'm obviously glossing over a lot of details but bear",
    "start": "959279",
    "end": "965319"
  },
  {
    "text": "with me um so most people are used to threaded servers uh what I mean by that is a request comes in and the server",
    "start": "965319",
    "end": "972639"
  },
  {
    "text": "will pick out of a thread pool a thread assign it to that request and it's going to process the request until it's done",
    "start": "972639",
    "end": "978319"
  },
  {
    "text": "ship the response and then put the thread back in the thread pool so one thread per request and it usually also",
    "start": "978319",
    "end": "984079"
  },
  {
    "text": "involves a lot of blocking IO and this is almost every common framework out there today so spring MVC Grails Jango",
    "start": "984079",
    "end": "990720"
  },
  {
    "text": "PHP rails did you guys know that was Tom cat's logo that weird cat looking thing",
    "start": "990720",
    "end": "996000"
  },
  {
    "text": "I've been using Tom Cat for years I had no idea that weird thing was a Flo anyway tom cat um all of these things",
    "start": "996000",
    "end": "1001360"
  },
  {
    "text": "are threaded blocking servers and so the code typically looks something like this",
    "start": "1001360",
    "end": "1006519"
  },
  {
    "text": "you have some kind of method do get and you have a for example the Apache HTTP",
    "start": "1006519",
    "end": "1011720"
  },
  {
    "text": "client and I'm going to make an HTTP request to example.com and when I call that execute method method",
    "start": "1011720",
    "end": "1019440"
  },
  {
    "text": "literally the thread is going to shoot out that request and it's just going to sit there blocking and idle until the",
    "start": "1019440",
    "end": "1025480"
  },
  {
    "text": "response comes back that thread doesn't do anything else until the response comes back and when it does then the next line of code executes um which has",
    "start": "1025480",
    "end": "1034038"
  },
  {
    "text": "some downsides that I'll discuss in a minute so um the alternative to threaded servers are evented or reactive or",
    "start": "1034039",
    "end": "1041880"
  },
  {
    "text": "there's many names for them non-blocking kind of server architectures uh that are they're not new they've been around",
    "start": "1041880",
    "end": "1047319"
  },
  {
    "text": "forever but they're gaining popular ity for kind of mainstream web services I'm sure all of you guys have heard of",
    "start": "1047319",
    "end": "1052440"
  },
  {
    "text": "node.js it's completely non-blocking uh play is built on top of AA and NTI",
    "start": "1052440",
    "end": "1058000"
  },
  {
    "text": "although you can use obviously those pieces uh by themselves both are kind of ways to do reactive uh non-blocking code",
    "start": "1058000",
    "end": "1064080"
  },
  {
    "text": "in Java um and an example so from like the node.js world here's a typical non-blocking case uh this line down here",
    "start": "1064080",
    "end": "1071640"
  },
  {
    "text": "HTTP do request that's kind of the equivalent of HTTP client you're going to fire uh HTTP requests to some server",
    "start": "1071640",
    "end": "1078440"
  },
  {
    "text": "but it's completely non-blocking that happens almost instantaneously in the next line of code executes before the",
    "start": "1078440",
    "end": "1084039"
  },
  {
    "text": "response has actually come back uh the response is not available until somewhere at some point that call back",
    "start": "1084039",
    "end": "1090400"
  },
  {
    "text": "function is executed so the code doesn't really read top to bottom but there's also no blocking so the thread can go",
    "start": "1090400",
    "end": "1096600"
  },
  {
    "text": "and do other stuff so why do we care why especially at LinkedIn do we really care about this",
    "start": "1096600",
    "end": "1103080"
  },
  {
    "text": "threaded versus evented tradeoff so the reason is we use a service oriented",
    "start": "1103080",
    "end": "1109240"
  },
  {
    "text": "architecture what that means is that our code our website is broken down into a bunch of Standalone Services you can",
    "start": "1109240",
    "end": "1116280"
  },
  {
    "text": "write the code for them separately they can deploy to separate Hardware you can scale them separately uh iterate on them",
    "start": "1116280",
    "end": "1123000"
  },
  {
    "text": "completely separately and they talk to each other through usually some kind of remote call to maybe a Json you know",
    "start": "1123000",
    "end": "1129280"
  },
  {
    "text": "restful endpoint um and so as you can see front ends talking to backends back ends talking to data stores there's",
    "start": "1129280",
    "end": "1134960"
  },
  {
    "text": "obviously an enormous amount of complexity that's being glossed over here with mid tiers caches and lots of other stuff um but at the end of the day",
    "start": "1134960",
    "end": "1141840"
  },
  {
    "text": "servers spend an awful lot of time just calling other servers so this is maybe a",
    "start": "1141840",
    "end": "1147000"
  },
  {
    "text": "typical front-end serlet we would have and most of what it's doing is it's going to call our profile service to",
    "start": "1147000",
    "end": "1153039"
  },
  {
    "text": "fetch profile data it'll call the company service to get company data the skills service to get skills data and",
    "start": "1153039",
    "end": "1158760"
  },
  {
    "text": "every time it does this it just sits there and waits for the response and that thread can do nothing else the",
    "start": "1158760",
    "end": "1163840"
  },
  {
    "text": "entire time um and of course you can do some of this a synchronously even in a",
    "start": "1163840",
    "end": "1170440"
  },
  {
    "text": "threaded server but to do that you have to set up another thread pool and you have to submit work to it and then you",
    "start": "1170440",
    "end": "1175799"
  },
  {
    "text": "have to block until that work is finished and you have to manage concurrency so again nothing that I'm saying here is impossible to do it's",
    "start": "1175799",
    "end": "1182080"
  },
  {
    "text": "just a lot harder um and here's the thing this is an awesome chart by the",
    "start": "1182080",
    "end": "1187679"
  },
  {
    "text": "way those numbers at the end the four uh these are references at the end of the slide deck which is on slides share if",
    "start": "1187679",
    "end": "1193159"
  },
  {
    "text": "you guys want to click through the links this is a great website latency numbers every programmer should know this gives",
    "start": "1193159",
    "end": "1198520"
  },
  {
    "text": "you kind of order of magnitude comparison between how long certain things take so something like an L1",
    "start": "1198520",
    "end": "1204280"
  },
  {
    "text": "cache reference versus reading from a hard drive are many many many many orders of magnitude different in how",
    "start": "1204280",
    "end": "1210280"
  },
  {
    "text": "long they take and what you'll find is almost every type of IO so for example a",
    "start": "1210280",
    "end": "1215880"
  },
  {
    "text": "round trip in the same data center that's that giant blob of green in the third column that's what is that 500,000",
    "start": "1215880",
    "end": "1222320"
  },
  {
    "text": "Nan seconds or a single disc seek you know the hard drive spinning is 4",
    "start": "1222320",
    "end": "1227760"
  },
  {
    "text": "million Nan any kind of IO is multiple orders of magnitude slower than anything",
    "start": "1227760",
    "end": "1234039"
  },
  {
    "text": "you're going to do inside of the service itself so any kind of memory lookup CPU",
    "start": "1234039",
    "end": "1239200"
  },
  {
    "text": "Branch anything of that sort it's many many many orders of magnitude bigger so",
    "start": "1239200",
    "end": "1244520"
  },
  {
    "text": "iio is really expensive and what it really comes down to is because IO is so",
    "start": "1244520",
    "end": "1249880"
  },
  {
    "text": "expensive in this massive concurrent service oriented archit architecture that we have this the threads spend most",
    "start": "1249880",
    "end": "1256720"
  },
  {
    "text": "of their time just waiting they're just Idol they're doing absolutely nothing but waiting on something to",
    "start": "1256720",
    "end": "1262600"
  },
  {
    "text": "respond um and that's problematic so you end up in this really weird dilemma with",
    "start": "1262600",
    "end": "1268120"
  },
  {
    "text": "threaded servers you don't want to create threads on the fly it depends on the jvm and the OS and all sorts of uh",
    "start": "1268120",
    "end": "1274679"
  },
  {
    "text": "other parameters but generally speaking just pumping out new threads is expensive there's a lot of overhead with",
    "start": "1274679",
    "end": "1280440"
  },
  {
    "text": "that so you usually use a fixed size thread pool okay so now you have to pick the size for your thread pool well if",
    "start": "1280440",
    "end": "1287520"
  },
  {
    "text": "you make it too big you run into a lot of overhead with memory I think the default stack size for a jvm thread is a",
    "start": "1287520",
    "end": "1293760"
  },
  {
    "text": "megabyte so every single thread you just lost a megabyte of memory it hasn't done anything yet um you also get a lot of",
    "start": "1293760",
    "end": "1299000"
  },
  {
    "text": "Contex switching overhead and a few other trade-offs okay but if you make it too small then if you have too many",
    "start": "1299000",
    "end": "1306279"
  },
  {
    "text": "requests that come in at the same time you run out of threads now all new requests just queue up and there's they",
    "start": "1306279",
    "end": "1312200"
  },
  {
    "text": "just wait and they're blocked and your latency goes up but even worse and this is a real nightmare is redded servers",
    "start": "1312200",
    "end": "1319679"
  },
  {
    "text": "are very sensitive to Downstream latency let me show you an example so we go back",
    "start": "1319679",
    "end": "1325520"
  },
  {
    "text": "to our architecture diagram and let's say we have a database all the way over there one of hundreds of data stores",
    "start": "1325520",
    "end": "1331400"
  },
  {
    "text": "that we have let's say the latency goes up somebody forgot to add an index on a query the traffic went up a little bit",
    "start": "1331400",
    "end": "1338279"
  },
  {
    "text": "latency went up appreciably now ideally the only consequence of this will be the",
    "start": "1338279",
    "end": "1344440"
  },
  {
    "text": "the requests that directly depend on that guy become a little slower not the end of the world in a threaded World",
    "start": "1344440",
    "end": "1351159"
  },
  {
    "text": "though it can actually become much much worse cuz here's what happens latency goes up in that guy well now the threads",
    "start": "1351159",
    "end": "1357799"
  },
  {
    "text": "that are just blocking and waiting on this guy they get backed up because they just have to wait longer and so as you",
    "start": "1357799",
    "end": "1364279"
  },
  {
    "text": "know especially if the traffic just took a little Spike now all of a sudden all the threads are eaten up and so now new",
    "start": "1364279",
    "end": "1370600"
  },
  {
    "text": "requests get queed and the latency goes up on this guy well now since his latency is higher",
    "start": "1370600",
    "end": "1376679"
  },
  {
    "text": "guess what threads start backing up on this guy as well as that guy maybe that",
    "start": "1376679",
    "end": "1382159"
  },
  {
    "text": "guy too cuz he calls him as well so now all of these guys are starting to have their thread pools kind of run out of threads latency is shooting up across",
    "start": "1382159",
    "end": "1389520"
  },
  {
    "text": "the whole site eventually everywhere latency goes up and before you know it's a minor increase in latency in one",
    "start": "1389520",
    "end": "1396039"
  },
  {
    "text": "database somewhere and your whole site's down and uh this is threadpool hell this",
    "start": "1396039",
    "end": "1402279"
  },
  {
    "text": "just sucks you're basically trying to determine the size for a fix siiz thread pool based on something that's very",
    "start": "1402279",
    "end": "1408880"
  },
  {
    "text": "Dynamic which is traffic patterns and IO patterns and concurrency patterns it's a really annoying problem and it's very",
    "start": "1408880",
    "end": "1415000"
  },
  {
    "text": "hard it's easy enough with one server talking to one other thing but when you have hundreds of servers talking to",
    "start": "1415000",
    "end": "1420080"
  },
  {
    "text": "hundreds of other servers it actually gets very very complicated so play is built on top of",
    "start": "1420080",
    "end": "1425799"
  },
  {
    "text": "netti and it avoids a lot of this these issues the io calls are completely",
    "start": "1425799",
    "end": "1431120"
  },
  {
    "text": "non-blocking the thread will fire the request and it'll go and start processing other things in the meantime",
    "start": "1431120",
    "end": "1437440"
  },
  {
    "text": "that request that isn't really done it doesn't really cost much it basically costs a socket and a tiny tiny bit of",
    "start": "1437440",
    "end": "1443600"
  },
  {
    "text": "memory but it just kind of puts it aside does other things when that response is available picks it up again keeps",
    "start": "1443600",
    "end": "1449320"
  },
  {
    "text": "processing it uh until it's finally done and so your threads aren't blocked if you write the code correctly which is",
    "start": "1449320",
    "end": "1455440"
  },
  {
    "text": "pretty important um and so you don't run into these issues where just because some Downstream service got a little",
    "start": "1455440",
    "end": "1460919"
  },
  {
    "text": "slower your whole site ends up with this crazy cascading latency effect um so as",
    "start": "1460919",
    "end": "1466760"
  },
  {
    "text": "I said much less sensitivity down downam slowness if something Downstream is slow well then anything that directly depends",
    "start": "1466760",
    "end": "1472600"
  },
  {
    "text": "on it just becomes a little slower but not everything um it also makes it much much",
    "start": "1472600",
    "end": "1478679"
  },
  {
    "text": "easier to do things in parallel so if we're making uh if we're Fanning out to 10 services to get our data uh with",
    "start": "1478679",
    "end": "1485919"
  },
  {
    "text": "blocking calls we have to do some magic to make that happen in parallel uh like I said you have to set up another thread",
    "start": "1485919",
    "end": "1492039"
  },
  {
    "text": "pool that you have to manage you have to submit work to it you have a lot of extra work to do with with non-blocking",
    "start": "1492039",
    "end": "1497600"
  },
  {
    "text": "Io if I put five calls in a row they all happen in parallel because none of them block it just goes to the next one",
    "start": "1497600",
    "end": "1503320"
  },
  {
    "text": "almost immediately so it's much easier to do things in parallel um and because it's so cheap to",
    "start": "1503320",
    "end": "1510360"
  },
  {
    "text": "keep connections open uh not just to Downstream services but also incoming connections from the browser now we can",
    "start": "1510360",
    "end": "1517039"
  },
  {
    "text": "support things like websockets Comet server sent events basically all of these things that are starting to power",
    "start": "1517039",
    "end": "1523159"
  },
  {
    "text": "the real time web they're very hard to do in a threaded like one thread per",
    "start": "1523159",
    "end": "1528880"
  },
  {
    "text": "request environment you really can't do it very effectively you can with non-blocking IO and this is coming in a",
    "start": "1528880",
    "end": "1534399"
  },
  {
    "text": "big way I think node more than any other framework is really bringing this up um being able to do this on the jvm is",
    "start": "1534399",
    "end": "1540760"
  },
  {
    "text": "pretty nice um okay so let me show you a quick example of some non-blocking IO in",
    "start": "1540760",
    "end": "1548320"
  },
  {
    "text": "the play world so uh let's create a new controller uh we'll call",
    "start": "1548320",
    "end": "1554440"
  },
  {
    "text": "it proxy and it'll extend uh oops",
    "start": "1554440",
    "end": "1560440"
  },
  {
    "text": "controller again just as before Let's uh",
    "start": "1560440",
    "end": "1566480"
  },
  {
    "text": "steal something from this guy we don't really need these parameters all we're going to do is take",
    "start": "1566480",
    "end": "1572360"
  },
  {
    "text": "in a URL and what we're going to do is we're going to make a non-blocking call to the",
    "start": "1572360",
    "end": "1577919"
  },
  {
    "text": "URL passed into this action and we're just going to proxy the result so we can do a non-blocking HTTP call in play",
    "start": "1577919",
    "end": "1585399"
  },
  {
    "text": "using a library called WS I didn't get apps ning HTTP client um you give it a",
    "start": "1585399",
    "end": "1592399"
  },
  {
    "text": "URL and you can call put post or in this case we just want to do a get and what",
    "start": "1592399",
    "end": "1598600"
  },
  {
    "text": "we're going to get back in this case is not just an HTTP response that's this",
    "start": "1598600",
    "end": "1604080"
  },
  {
    "text": "guy but we're actually going to get a promise of a response um if you've",
    "start": "1604080",
    "end": "1609720"
  },
  {
    "text": "worked with Java Futures this is a little bit similar this is an object that will eventually contain the result",
    "start": "1609720",
    "end": "1615840"
  },
  {
    "text": "you're looking for the difference from from java Futures is the pattern you use with Java Futures is at this point you",
    "start": "1615840",
    "end": "1621960"
  },
  {
    "text": "would just call you know you would do whatever request you want to and then you say get and at that point you're blocking until that future is available",
    "start": "1621960",
    "end": "1628559"
  },
  {
    "text": "here we're not going to call get you can if you really want to and you just want to do a blocking server and play you can just give it a bigger threadpool but if",
    "start": "1628559",
    "end": "1635120"
  },
  {
    "text": "you want to do something non-blocking you just tell it something to do when the data is available um and play inside",
    "start": "1635120",
    "end": "1643480"
  },
  {
    "text": "of play it knows how to deal with with promises so if you remember we need to return a result play has a class called",
    "start": "1643480",
    "end": "1653120"
  },
  {
    "text": "hopefully I have the source code loaded here we go uh a thing called async result which extend which implements",
    "start": "1653120",
    "end": "1659519"
  },
  {
    "text": "result and this is just something you can create by passing it a promise of a result so if instead of handing play",
    "start": "1659519",
    "end": "1666360"
  },
  {
    "text": "directly a 200 okay you hand it something that's the promise of a 200 okay it'll know what to do with it it'll",
    "start": "1666360",
    "end": "1673039"
  },
  {
    "text": "kind of take it put it aside and when that thing is ready it'll pick it up again and send the 200 okay uh to the",
    "start": "1673039",
    "end": "1678200"
  },
  {
    "text": "browser so that's what we want to do at the end of the day we want to produce an async result to do that uh there's a",
    "start": "1678200",
    "end": "1684679"
  },
  {
    "text": "nice method called async which you can see uh in the return type it'll give us an async result all I need to do is give",
    "start": "1684679",
    "end": "1691240"
  },
  {
    "text": "it a promise of a result that's it how do we get a promise of a result well we",
    "start": "1691240",
    "end": "1696679"
  },
  {
    "text": "have a promise of a response and we want to transform this into a promise of a result if any of you are familiar with",
    "start": "1696679",
    "end": "1703360"
  },
  {
    "text": "functional programming this is a bit this is something you would typically do with a method called map or flat map",
    "start": "1703360",
    "end": "1708559"
  },
  {
    "text": "there's a whole bunch of ways of doing it um if you want to learn more about that I wrote a whole blog post that",
    "start": "1708559",
    "end": "1713679"
  },
  {
    "text": "builds the intuition about why map and things like that makes sense but long story short we call map and we pass it",
    "start": "1713679",
    "end": "1720679"
  },
  {
    "text": "some code to execute um when the data is available and",
    "start": "1720679",
    "end": "1727720"
  },
  {
    "text": "intellig will generate most of that code for us yay okay so in here I have my response this is actually the HTTP",
    "start": "1727720",
    "end": "1734919"
  },
  {
    "text": "response uh to that call and at this point I just need to return a result from that and so we can do that by",
    "start": "1734919",
    "end": "1741080"
  },
  {
    "text": "returning a 200 okay uh putting the body of the HTTP response inside of our 200",
    "start": "1741080",
    "end": "1747200"
  },
  {
    "text": "okay and we'll set the content type correctly for this request so that's it",
    "start": "1747200",
    "end": "1752240"
  },
  {
    "text": "this is a fully non-blocking proxy in play in I don't 15 lines of code U most",
    "start": "1752240",
    "end": "1758240"
  },
  {
    "text": "of them are curly braces on the next line which are probably annoying a few of you uh so let's expose that thing at",
    "start": "1758240",
    "end": "1764440"
  },
  {
    "text": "a URL uh and and it's let's see",
    "start": "1764440",
    "end": "1770720"
  },
  {
    "text": "controllers. proxy do index and it needs a URL as a",
    "start": "1770720",
    "end": "1776159"
  },
  {
    "text": "parameter so if we now go here and we proxy",
    "start": "1776159",
    "end": "1781840"
  },
  {
    "text": "linkedin.com it'll reload all that stuff in the background it'll wait for LinkedIn to respond and Tada my Local",
    "start": "1781840",
    "end": "1788600"
  },
  {
    "text": "Host is now proxying linkedin.com um and this is fully non-blocking at no point",
    "start": "1788600",
    "end": "1794080"
  },
  {
    "text": "is this server blocking a thread waiting on that HTTP response so we can leave",
    "start": "1794080",
    "end": "1799480"
  },
  {
    "text": "these connections open and do all sorts of great stuff so it's actually pretty easy uh there's not a whole lot to it um",
    "start": "1799480",
    "end": "1804960"
  },
  {
    "text": "but I also mentioned that you can do things in parallel so let's build a slightly more interesting example um",
    "start": "1804960",
    "end": "1810519"
  },
  {
    "text": "we'll do one more controller call it parallel once again it'll extend",
    "start": "1810519",
    "end": "1817840"
  },
  {
    "text": "controller just to give us a few handy methods to use I'll steal this",
    "start": "1817840",
    "end": "1824279"
  },
  {
    "text": "guy and we don't need that okay so what do we want to do in parallel we want to",
    "start": "1824440",
    "end": "1830320"
  },
  {
    "text": "Now call several websites in parallel and in this case I kind of want to measure how long the websites take to",
    "start": "1830320",
    "end": "1836279"
  },
  {
    "text": "respond so I'm going to do a little race between a few websites so we'll use the Ws Library",
    "start": "1836279",
    "end": "1842080"
  },
  {
    "text": "again we'll pass it a URL so how about we'll race a few search engines against each other so we'll do",
    "start": "1842080",
    "end": "1849440"
  },
  {
    "text": "Yahoo get oops and if I just do this right here",
    "start": "1849440",
    "end": "1854960"
  },
  {
    "text": "this calls Yahoo in a non-blocking way if I add a couple more guys in here let's say Google and Bing this is three",
    "start": "1854960",
    "end": "1862320"
  },
  {
    "text": "non-blocking HTTP requests that happen in parallel but like I said I want to measure how long they took so let's set",
    "start": "1862320",
    "end": "1869320"
  },
  {
    "text": "up some code to do that so first I'll record when we started this whole thing",
    "start": "1869320",
    "end": "1874399"
  },
  {
    "text": "uh this will be a long okay and now what I'm going to do",
    "start": "1874399",
    "end": "1880120"
  },
  {
    "text": "is I'm going to create a function that transforms uh the HTTP response",
    "start": "1880120",
    "end": "1885240"
  },
  {
    "text": "basically throws it away and just records how long it took to get get that HTTP response so we create another",
    "start": "1885240",
    "end": "1893159"
  },
  {
    "text": "function uh oh boy which one of these that's the one um and it's going",
    "start": "1893159",
    "end": "1899320"
  },
  {
    "text": "to take one of those uh response guys and it's going to return just a long that says how long that thing took",
    "start": "1899320",
    "end": "1907360"
  },
  {
    "text": "um we need one of those oops and we'll store this in a variable",
    "start": "1907360",
    "end": "1915159"
  },
  {
    "text": "called uh timing okay and so in here the only code that we really need is just to",
    "start": "1915159",
    "end": "1921559"
  },
  {
    "text": "basically say uh this took that long to process so",
    "start": "1921559",
    "end": "1928159"
  },
  {
    "text": "whenever this thing is called take the current time subtract our original starting point so let's transform these",
    "start": "1928159",
    "end": "1934200"
  },
  {
    "text": "things so if I you know put these guys in a variable right now you can see I'm getting a a promise of a",
    "start": "1934200",
    "end": "1940000"
  },
  {
    "text": "response but I don't really want to response I just want the timing so to transform it I just give it that timing",
    "start": "1940000",
    "end": "1945639"
  },
  {
    "text": "function and if I do that uh this one's Yahoo now as you can see I",
    "start": "1945639",
    "end": "1951279"
  },
  {
    "text": "get a promise of a long this is something that will eventually contain how long it took to make the HTTP",
    "start": "1951279",
    "end": "1957039"
  },
  {
    "text": "request uh to Yahoo so do the same thing for each of these",
    "start": "1957039",
    "end": "1962720"
  },
  {
    "text": "guys um put them in some kind of a variable this one's Google this one is Bing okay almost home",
    "start": "1964639",
    "end": "1973679"
  },
  {
    "text": "the only thing we need to do now is actually do something useful with those numbers uh what we can do is we can compose these three promises into one",
    "start": "1973679",
    "end": "1980720"
  },
  {
    "text": "that will redeem when all three are available and there's a handy function to do that it's called Uh weight all",
    "start": "1980720",
    "end": "1987440"
  },
  {
    "text": "again it doesn't block it just it's another promise that will just redeem when everything inside of it redeems so",
    "start": "1987440",
    "end": "1993120"
  },
  {
    "text": "you just pass those guys to it and uh really what we want to do again is use that async function so we",
    "start": "1993120",
    "end": "1999880"
  },
  {
    "text": "get a async result out of it and let's let's build this as uh Json",
    "start": "1999880",
    "end": "2009760"
  },
  {
    "text": "so play has some nice built-in support for Json here's what we'll do we will put the data into a",
    "start": "2009960",
    "end": "2017679"
  },
  {
    "text": "hashmap from the name of the website to how long it",
    "start": "2020399",
    "end": "2025799"
  },
  {
    "text": "took and let's just put the data in there so yes missed one detail here Java",
    "start": "2028000",
    "end": "2034000"
  },
  {
    "text": "of course has interesting ideas about closures um so data. put uh Yahoo took",
    "start": "2034000",
    "end": "2042799"
  },
  {
    "text": "this long and I'm calling get here but since this is inside of uh basically this guy's map function we know it's",
    "start": "2042799",
    "end": "2049158"
  },
  {
    "text": "already redeemed this won't actually Block in any way so we'll add the other two in here here's Google here's Bing",
    "start": "2049159",
    "end": "2055320"
  },
  {
    "text": "let's give them the right labels and play has this nice uh",
    "start": "2055320",
    "end": "2061520"
  },
  {
    "text": "function or class I should say called Json that one that'll just convert",
    "start": "2061520",
    "end": "2066800"
  },
  {
    "text": "objects to Json on for you and it'll set the correct content type everything else so this is it this will fetch three",
    "start": "2066800",
    "end": "2073398"
  },
  {
    "text": "websites in parallel record how long it took to fetch them and return it as Json as usual we need to add a URL for",
    "start": "2073399",
    "end": "2082720"
  },
  {
    "text": "it get rid of all that",
    "start": "2083280",
    "end": "2088839"
  },
  {
    "text": "okay and now we hit this guy give it a second to reload to fetch the three",
    "start": "2088839",
    "end": "2095398"
  },
  {
    "text": "websites and hopefully spit back some on Addis if I did everything right hey there we go all right let's",
    "start": "2095399",
    "end": "2102200"
  },
  {
    "text": "refresh one more time because obviously this includes some hot reload overhead um ah actually no the overhead is I'm",
    "start": "2102200",
    "end": "2109000"
  },
  {
    "text": "connected to VPN sorry about that um so you can see Google seems to be by far the fastest followed by bing and a very",
    "start": "2109000",
    "end": "2115599"
  },
  {
    "text": "very distant third is in other company there um and this you'll see has the right content type this is Json did it",
    "start": "2115599",
    "end": "2122480"
  },
  {
    "text": "all in parallel didn't have to set up a thread pool didn't have to do anything terribly fancy to make this work so this",
    "start": "2122480",
    "end": "2127839"
  },
  {
    "text": "is kind of the non-blocking story in play um in a very very quick kind of",
    "start": "2127839",
    "end": "2133800"
  },
  {
    "text": "demo hopefully that made sense to some of you guys all right moving along let's",
    "start": "2133800",
    "end": "2139359"
  },
  {
    "text": "talk a little bit about Scala how many of you guys use Scala not too many cool",
    "start": "2139359",
    "end": "2146040"
  },
  {
    "text": "so play has native support for Scala built right in there's nothing you have",
    "start": "2146040",
    "end": "2151319"
  },
  {
    "text": "to do to you know make it work you just create a file with a Scala extension so",
    "start": "2151319",
    "end": "2156480"
  },
  {
    "text": "just very quickly we'll do a Hello World",
    "start": "2156480",
    "end": "2162200"
  },
  {
    "text": "Scala and just like the Java controllers it'll extend a controller class to get",
    "start": "2162760",
    "end": "2169480"
  },
  {
    "text": "some nice handy methods just like the Java version there will be actions in",
    "start": "2169480",
    "end": "2175359"
  },
  {
    "text": "here um and you also have an okay method you can call to say hello world",
    "start": "2175359",
    "end": "2182920"
  },
  {
    "text": "Scala um so this is your hello world Scola example add one",
    "start": "2182920",
    "end": "2188880"
  },
  {
    "text": "URL call it",
    "start": "2188880",
    "end": "2192240"
  },
  {
    "text": "Scala there we go so now if we go to Scala it should",
    "start": "2195599",
    "end": "2200880"
  },
  {
    "text": "reload that guy and you'll just see it say hello world Scola so there you go so there's nothing really to make it work",
    "start": "2200880",
    "end": "2206760"
  },
  {
    "text": "it just works if you put a Scola file in a play app it'll compile it Scola files interoperate with Java files Java files",
    "start": "2206760",
    "end": "2212960"
  },
  {
    "text": "interoperate with Scola files kind of a beautiful uh seamless experience",
    "start": "2212960",
    "end": "2219520"
  },
  {
    "text": "um there we go and maybe",
    "start": "2222480",
    "end": "2228920"
  },
  {
    "text": "not showed you that uh by the way I think I mentioned this earlier this whole slide deck is on slid share if you",
    "start": "2230280",
    "end": "2236480"
  },
  {
    "text": "guys want to pick it up just search for play framework at LinkedIn um so one of the really nice things about using Scala",
    "start": "2236480",
    "end": "2243200"
  },
  {
    "text": "inside of play is Scala has support for a lot of nice functional programming so",
    "start": "2243200",
    "end": "2248640"
  },
  {
    "text": "first class functions closures sequence comprehensions and a few other things that can actually result in a more",
    "start": "2248640",
    "end": "2255200"
  },
  {
    "text": "concise and more composable API um and this especially applies to async coding",
    "start": "2255200",
    "end": "2260400"
  },
  {
    "text": "so the async coding in play with Java as I showed you guys is pretty easy but you still end up with that syntactic overhead of an anonymous interclass and",
    "start": "2260400",
    "end": "2267880"
  },
  {
    "text": "the reason for it is simple to do something asynchronous you need to have a way to say execute this code later",
    "start": "2267880",
    "end": "2273760"
  },
  {
    "text": "execute this function later Java doesn't really have a way to pass around function you can really only pass around",
    "start": "2273760",
    "end": "2279280"
  },
  {
    "text": "a class so you usually do Anonymous inter classes Scala does have first class functions so the code becomes just",
    "start": "2279280",
    "end": "2285359"
  },
  {
    "text": "vastly simplified um which is pretty cool Java 8 may even things a little bit",
    "start": "2285359",
    "end": "2290440"
  },
  {
    "text": "here we'll see in about six months hopefully um but so the API can be nicer",
    "start": "2290440",
    "end": "2295640"
  },
  {
    "text": "on the Scala side um another really neat thing I can show you guys if you know",
    "start": "2295640",
    "end": "2301440"
  },
  {
    "text": "Scala is this is the app running in the background I can shut it down there's a interactive console for Scala which you",
    "start": "2301440",
    "end": "2308280"
  },
  {
    "text": "can fire up and so in here I can run you know commands like 2 plus two very exciting but much more interesting is I",
    "start": "2308280",
    "end": "2314720"
  },
  {
    "text": "can import any of the classes in my project so I can actually import my",
    "start": "2314720",
    "end": "2321520"
  },
  {
    "text": "uh my controller for example and I can execute it uh I forget what it needed",
    "start": "2321520",
    "end": "2327520"
  },
  {
    "text": "name and age and there we go and I get a 200 back",
    "start": "2327520",
    "end": "2332760"
  },
  {
    "text": "and there's a way to read the result out of it so I'm literally interacting with my server on the Fly",
    "start": "2332760",
    "end": "2338119"
  },
  {
    "text": "in the Scala console really useful I spent a lot of time here to learn how things work or to try something new but",
    "start": "2338119",
    "end": "2343720"
  },
  {
    "text": "you do need to know Scala how to use the uh you have to know Scala in order to be able to use this because this uses Scala",
    "start": "2343720",
    "end": "2350240"
  },
  {
    "text": "syntax um so oh boy here we go",
    "start": "2350240",
    "end": "2355359"
  },
  {
    "text": "again hopefully that's the last time I exit the",
    "start": "2355359",
    "end": "2359799"
  },
  {
    "text": "presentation note to self don't use Google Docs in the future not very good for big",
    "start": "2360760",
    "end": "2366359"
  },
  {
    "text": "presentations [Music] okay",
    "start": "2366359",
    "end": "2372400"
  },
  {
    "text": "um and you'll also find that at the core play is written in Scala this is from",
    "start": "2372400",
    "end": "2377640"
  },
  {
    "text": "their GitHub page more than half the code is Scala Java is only about 16% now",
    "start": "2377640",
    "end": "2383000"
  },
  {
    "text": "they have very nice idiomatic Java support for everything but you're going to keep bumping into Scala here and",
    "start": "2383000",
    "end": "2389480"
  },
  {
    "text": "there so it's really nice if you do know Scala so you saw the templates kind of use a Scola syntax the routes file uses",
    "start": "2389480",
    "end": "2395440"
  },
  {
    "text": "a Scola syntax one piece I have haven't talked about yet is SBT that's plays build system that's entirely in Scala so",
    "start": "2395440",
    "end": "2402599"
  },
  {
    "text": "it does help to know Scala you can be a little more a little closer to the core of",
    "start": "2402599",
    "end": "2408560"
  },
  {
    "text": "play the less good part about Scala um is really not so much Scala as it is one",
    "start": "2408560",
    "end": "2414880"
  },
  {
    "text": "particular usage of Scala and this is a thing called SBT this is plays build system uh it technically stands for",
    "start": "2414880",
    "end": "2421440"
  },
  {
    "text": "simple build tool but I think there's some kind of a rule where if something is simple in the name it isn't uh is",
    "start": "2421440",
    "end": "2428920"
  },
  {
    "text": "really powerful so to be fair tobt is probably the most powerful build system that by far",
    "start": "2428920",
    "end": "2436560"
  },
  {
    "text": "that I've seen it actually supports a lot of plays awesome features like hot reload uh that console a lot of other",
    "start": "2436560",
    "end": "2442400"
  },
  {
    "text": "things just come just because it's on SBT it has things you can't do with other build systems like introspect the",
    "start": "2442400",
    "end": "2447680"
  },
  {
    "text": "build itself and execute it on the Fly and other really cool stuff the problem is it's got a really really really steep",
    "start": "2447680",
    "end": "2454280"
  },
  {
    "text": "learning curve if you don't know Scola for first of all you're in a lot of trouble cuz the the code looks like this",
    "start": "2454280",
    "end": "2460960"
  },
  {
    "text": "which I don't know if abuse of Scola is the right way to put this but they use every possible trick in the book um to",
    "start": "2460960",
    "end": "2469040"
  },
  {
    "text": "really shorten things up I don't know how many of you can guess what any of these lines are actually doing but believe it or not these are like",
    "start": "2469040",
    "end": "2474839"
  },
  {
    "text": "function calls and you're passing higher order functions to them and there's operator overloading and there's I mean",
    "start": "2474839",
    "end": "2481920"
  },
  {
    "text": "implicits like crazy yeah why modern languages look more like Mach",
    "start": "2481920",
    "end": "2489240"
  },
  {
    "text": "it's a good quote very good question so good Scola does not look like this SBT in my opinion went a little bit off the",
    "start": "2489960",
    "end": "2496240"
  },
  {
    "text": "deep end with abusing the syntax so this is really hard to get started with again the stuff you can do here is awesome but",
    "start": "2496240",
    "end": "2503079"
  },
  {
    "text": "I mean honestly like what the hell is less than Plus+",
    "start": "2503079",
    "end": "2508560"
  },
  {
    "text": "equals some sort of fish rocket thingy I and you can't Google it you can't Google",
    "start": "2508560",
    "end": "2515119"
  },
  {
    "text": "less than Plus+ equals you're completely screwed um so this is really rough to get started with uh I if you're doing",
    "start": "2515119",
    "end": "2522400"
  },
  {
    "text": "simple things like I just need to add a dependency to my app some jar file I need name the app all of that is very",
    "start": "2522400",
    "end": "2528560"
  },
  {
    "text": "easy you can basically do it in a minute uh but when you need to do like serious build workor with play which we have to",
    "start": "2528560",
    "end": "2534520"
  },
  {
    "text": "do as an infrastructure team at LinkedIn uh you're going to dive into the bowels of spt and it's it's hard",
    "start": "2534520",
    "end": "2542319"
  },
  {
    "text": "um okay now let's chat about performance so I get a lot of questions of is play",
    "start": "2542319",
    "end": "2548760"
  },
  {
    "text": "web scale um and I think there's actually a few interesting ways to look",
    "start": "2548760",
    "end": "2553839"
  },
  {
    "text": "at scalability and I really do think you're going to miss the picture if you don't look at all of them so I think",
    "start": "2553839",
    "end": "2559960"
  },
  {
    "text": "there's kind of a graph of scalability for web Frameworks there's kind of raw",
    "start": "2559960",
    "end": "2565079"
  },
  {
    "text": "horsepower concurrent horsepower scaling for how fast a single developer can do things and then how fast a team of",
    "start": "2565079",
    "end": "2571960"
  },
  {
    "text": "developers can do things so here's what I mean by each of those raw horsepower that's like the theoretical maximum if I",
    "start": "2571960",
    "end": "2578480"
  },
  {
    "text": "set this framework up in ideal conditions and just hit it with requests how many QPS do I get what's the latency",
    "start": "2578480",
    "end": "2584200"
  },
  {
    "text": "how many errors um and this is largely a measure of the language and the framework overhead more than anything",
    "start": "2584200",
    "end": "2589800"
  },
  {
    "text": "else concurrent horsepower this is kind of a more real world scenario you have lots of IO you have latencies that vary",
    "start": "2589800",
    "end": "2596240"
  },
  {
    "text": "all over the place conditions are not ideal this is more of a measure of how does the framework approach concurrency",
    "start": "2596240",
    "end": "2602079"
  },
  {
    "text": "in general um and both of those matter by the way no one of these is necessarily more important than the others there's a",
    "start": "2602079",
    "end": "2608200"
  },
  {
    "text": "very strong tradeoff between them uh single developer one guy coding how fast can he get things done how quickly can",
    "start": "2608200",
    "end": "2614520"
  },
  {
    "text": "he get started a lot of Frameworks focus on this and get this right but a lot of them forget this one that most things",
    "start": "2614520",
    "end": "2621359"
  },
  {
    "text": "are built by teams of developers a bunch of people working together on the same code base the code base grows it gets",
    "start": "2621359",
    "end": "2628319"
  },
  {
    "text": "huge it ages how much code Rod is there how maintainable is the code doesn't matter if one guy can go fast if three",
    "start": "2628319",
    "end": "2634440"
  },
  {
    "text": "months later you're totally stuck so here are my ratings based on my",
    "start": "2634440",
    "end": "2640280"
  },
  {
    "text": "experience try not to get offended um your mileage will vary uh spring MBC if",
    "start": "2640280",
    "end": "2646680"
  },
  {
    "text": "you hit this guy with a bunch of requests in kind of like an inmemory scenario really fast many many many many",
    "start": "2646680",
    "end": "2652200"
  },
  {
    "text": "thousands of QPS without any without breaking a sweat type safety does help code reduce code rot for large old",
    "start": "2652200",
    "end": "2660880"
  },
  {
    "text": "projects but it's not developer friendly it's a real pain to get even the most basic thing done and as I discussed",
    "start": "2660880",
    "end": "2667640"
  },
  {
    "text": "before this kind of threaded approach to these large concurrent IO scenarios can",
    "start": "2667640",
    "end": "2672760"
  },
  {
    "text": "be problematic to scale so if we plot spring MBC on a chart represent it visually really good in one quadrant",
    "start": "2672760",
    "end": "2679960"
  },
  {
    "text": "less good in some of the others um how about Ruby on Rails this thing in my",
    "start": "2679960",
    "end": "2685280"
  },
  {
    "text": "opinion kind of set the standard for a single developer uh in terms of productivity just amazing how quick you",
    "start": "2685280",
    "end": "2691480"
  },
  {
    "text": "can get started get going and get things built the open source Community is incredible there's a plugin for anything you'd ever want to do with",
    "start": "2691480",
    "end": "2697760"
  },
  {
    "text": "rails but Ruby is really slow like really genuinely honestly slow and it",
    "start": "2697760",
    "end": "2705079"
  },
  {
    "text": "doesn't have real multi-threading it doesn't have a great evented architecture so it won't handle concurrent scenarios particularly well",
    "start": "2705079",
    "end": "2710920"
  },
  {
    "text": "and it's a dynamic language um which can make it harder to maintain a large code",
    "start": "2710920",
    "end": "2716079"
  },
  {
    "text": "base not impossible if you do enough tests you do enough work it's certainly possible to have a really nice Ruby on",
    "start": "2716079",
    "end": "2721160"
  },
  {
    "text": "Rails app that's big but it's harder it's just genuinely harder so if I were to plot this one it's a little bit of of",
    "start": "2721160",
    "end": "2727520"
  },
  {
    "text": "rotating spring MVC it gets really good in this quadrant really not so good in some of the others um how about node we",
    "start": "2727520",
    "end": "2735079"
  },
  {
    "text": "actually use nodejs at LinkedIn as well for our mobile servers so V8 if you throw a bunch of requests at it does",
    "start": "2735079",
    "end": "2740680"
  },
  {
    "text": "pretty well probably not quite as good as serot but pretty damn well uh it's non-blocking so the concurrent story is",
    "start": "2740680",
    "end": "2746720"
  },
  {
    "text": "really good in these heavy kind of Io Io bound scenarios uh the open source Community there is really good it starts",
    "start": "2746720",
    "end": "2753440"
  },
  {
    "text": "up really fast so you can get things done pretty quickly but it's a dynamic language and it's a very immature",
    "start": "2753440",
    "end": "2760079"
  },
  {
    "text": "framework or actually node itself is becoming more mature but all the plugins the ecosystem around it is constantly",
    "start": "2760079",
    "end": "2766040"
  },
  {
    "text": "making backwards and compatible changes almost every release and the result of it it's a dynamic language is you run",
    "start": "2766040",
    "end": "2771720"
  },
  {
    "text": "into this when you run your app which is a little bit too late you kind of want to know about it earlier on um but still",
    "start": "2771720",
    "end": "2777400"
  },
  {
    "text": "it does pretty darn well on this chart it does well in most areas maybe not so great for huge large projects that last",
    "start": "2777400",
    "end": "2784040"
  },
  {
    "text": "many years and so finally play if you bang on play with just kind of like your ideal scenario the hello world case I",
    "start": "2784040",
    "end": "2791720"
  },
  {
    "text": "did this on a laptop you can get like 60,000 QPS with absolutely no tuning nothing just run it and throw requests",
    "start": "2791720",
    "end": "2797839"
  },
  {
    "text": "at it not a very useful test but again it does fine for kind of the raw throughput non-blocking IO means for",
    "start": "2797839",
    "end": "2804720"
  },
  {
    "text": "concurrent scenarios again it does very very well not very sensitive to Downstream latencies hot reload means",
    "start": "2804720",
    "end": "2811079"
  },
  {
    "text": "one developer can get things done pretty quickly I was able to write Java code in front of you in a live talk that's",
    "start": "2811079",
    "end": "2817640"
  },
  {
    "text": "impressive I I've never been able to do that before play um and strong type safety I'd argue actually much stronger",
    "start": "2817640",
    "end": "2823760"
  },
  {
    "text": "type safety than even you get in like spring MVC because the templates are type checked the config is type checked the everything is just you really know",
    "start": "2823760",
    "end": "2830359"
  },
  {
    "text": "about errors very early on and in a very easy to read we downsides I'm not going to claim that it's quite as productive",
    "start": "2830359",
    "end": "2837079"
  },
  {
    "text": "for a single developer as something like rails interpreted language just inherently faster to reload and it's got",
    "start": "2837079",
    "end": "2842400"
  },
  {
    "text": "a rails has been around longer so much bigger open source Community yeah it's a fair question yeah that so for a large",
    "start": "2842400",
    "end": "2849079"
  },
  {
    "text": "project where somebody else drops something in on you and things blow up in your face rails can actually become",
    "start": "2849079",
    "end": "2854640"
  },
  {
    "text": "less productive for me working on my own project alone I'm still probably going",
    "start": "2854640",
    "end": "2860520"
  },
  {
    "text": "to go a little faster with rails and this one actually what I would say is play is just new and once its Community",
    "start": "2860520",
    "end": "2865800"
  },
  {
    "text": "gets bigger and you have plugins that do all the work for you it's actually going to just keep getting faster and faster but it it's a very fair tradeoff it",
    "start": "2865800",
    "end": "2872480"
  },
  {
    "text": "always is with Dynamic languages yeah I don't know if that applies to the jdk but if you're upgrading scholar versions",
    "start": "2872480",
    "end": "2877680"
  },
  {
    "text": "yes you need play to have upgraded first that said play uh type safe is kind of I",
    "start": "2877680",
    "end": "2883839"
  },
  {
    "text": "don't know if they own play or at least they provide all the commercial support um they're going to be the very first",
    "start": "2883839",
    "end": "2889599"
  },
  {
    "text": "folks to upgrade Scala long before you ever did and probably Java too they've been running Java 8 preview builds",
    "start": "2889599",
    "end": "2894839"
  },
  {
    "text": "forever now so that's not a concern yes you own it now thank",
    "start": "2894839",
    "end": "2901440"
  },
  {
    "text": "you there we go perfect answer so they're going to be first that that shouldn't be his concern that's said the",
    "start": "2901440",
    "end": "2907480"
  },
  {
    "text": "binary compatibility issue with Scala is a problem you upgrades are inherently harder but at least the play part is not",
    "start": "2907480",
    "end": "2914839"
  },
  {
    "text": "what's going to block you it's you're going to be your own code um so if we ploted on a chart this talk is about",
    "start": "2914839",
    "end": "2920280"
  },
  {
    "text": "play what did you expect it's obviously going to have the big the biggest Orange Box um it's probably not the best at any",
    "start": "2920280",
    "end": "2925800"
  },
  {
    "text": "one area but it's really good at just about all of them it's a pretty effective system yeah if it's not",
    "start": "2925800",
    "end": "2931839"
  },
  {
    "text": "obvious this doesn't take into account many things I can't possibly cover every aspect of how a system scales and",
    "start": "2931839",
    "end": "2938040"
  },
  {
    "text": "performs uh build system so there's trade-offs so as an app gets bigger uh",
    "start": "2938040",
    "end": "2943480"
  },
  {
    "text": "compiled languages like Java take or and especially Scala take longer and longer to build on the other hand you also get",
    "start": "2943480",
    "end": "2949480"
  },
  {
    "text": "something in return right it's actually checking and catching a tremendous an ember of errors that otherwise you would have to just manually write unit tests",
    "start": "2949480",
    "end": "2956119"
  },
  {
    "text": "for so I think there is a trade-off there for a large team I don't know who wins I really think it comes down to the",
    "start": "2956119",
    "end": "2962480"
  },
  {
    "text": "use case um but you do get something in return for the hard heavier Bill times",
    "start": "2962480",
    "end": "2968400"
  },
  {
    "text": "can we save questions just for the end I just want to make sure that I don't go over time so the folks that want to take off uh can take off I just have one",
    "start": "2968400",
    "end": "2974960"
  },
  {
    "text": "quick section left which is just a little chat about the play Community um",
    "start": "2974960",
    "end": "2980839"
  },
  {
    "text": "play is open source it's on GitHub all the code all the PLL requests all the bug tracking um very active project",
    "start": "2980839",
    "end": "2987520"
  },
  {
    "text": "they're updating it very quickly uh very responsive to PLL requests we've actually submitted quite a few of our",
    "start": "2987520",
    "end": "2993000"
  },
  {
    "text": "own from LinkedIn we'll be submitting many more um really active Google group so if you",
    "start": "2993000",
    "end": "2999400"
  },
  {
    "text": "have any questions this is the place to go and ask and it's got the mailing list behind it uh and all the links again at",
    "start": "2999400",
    "end": "3005400"
  },
  {
    "text": "the end of the slide deck popular on stack Overflow so you can actually Google things and find",
    "start": "3005400",
    "end": "3010559"
  },
  {
    "text": "answers uh there's a directory of Open Source modules there's actually more than one I found out today this is",
    "start": "3010559",
    "end": "3016880"
  },
  {
    "text": "growing it's not quite as big as it was for play one but growing we've contributed a few of our own um but we",
    "start": "3016880",
    "end": "3023480"
  },
  {
    "text": "have a whole bunch more coming that we'll be open sourcing in the next few months um and uh it's supported commercially by",
    "start": "3023480",
    "end": "3030960"
  },
  {
    "text": "typesafe we actually did work with typesafe to help bring uh play to Linked In so it kind of has the open source",
    "start": "3030960",
    "end": "3036160"
  },
  {
    "text": "part of the world and the commercially supported part of the world which is very helpful uh especially for large deployments and the types safe guys are",
    "start": "3036160",
    "end": "3043160"
  },
  {
    "text": "genuinely awesome um so that's the recap that is the story of uh play at LinkedIn",
    "start": "3043160",
    "end": "3050079"
  },
  {
    "text": "it's easy to get started it's easy to work with it really quickly the error handling is just phenomenal there's no",
    "start": "3050079",
    "end": "3056160"
  },
  {
    "text": "more C crazy stack traces um the evented the reactive pattern is extremely useful",
    "start": "3056160",
    "end": "3061960"
  },
  {
    "text": "for large deployments Scala can make your app just really nice the performance is great the community is",
    "start": "3061960",
    "end": "3068559"
  },
  {
    "text": "awesome um that's our story so far to be perfectly accurate as I said we're just",
    "start": "3068559",
    "end": "3074960"
  },
  {
    "text": "getting started we are also new to play but we're excited we want to hear feedback we want to see what other folks",
    "start": "3074960",
    "end": "3080280"
  },
  {
    "text": "are are thinking about um if you haven't tried play give it a shot and uh see if",
    "start": "3080280",
    "end": "3085359"
  },
  {
    "text": "it works for you um last piece our engineering blog we'll be blogging and talking about our open source code and",
    "start": "3085359",
    "end": "3091200"
  },
  {
    "text": "all of that engineering. lin.com and uh you can also follow LinkedIn on",
    "start": "3091200",
    "end": "3096559"
  },
  {
    "text": "Twitter for all the latest updates that's it thank you very",
    "start": "3096559",
    "end": "3102240"
  },
  {
    "text": "[Music] much",
    "start": "3106160",
    "end": "3113880"
  }
]