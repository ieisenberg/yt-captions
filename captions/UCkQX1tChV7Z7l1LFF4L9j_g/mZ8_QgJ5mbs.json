[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "[Music]",
    "start": "2330",
    "end": "7819"
  },
  {
    "text": "so I'm going to get started this uh this is a fairly uh in-depth presentation so there's a lot to cover so I'm probably",
    "start": "8480",
    "end": "14879"
  },
  {
    "text": "going to use you know a good chunk of the time I'll leave a little bit of time at the end for for questions um so a",
    "start": "14879",
    "end": "21400"
  },
  {
    "text": "little bit about me my name is Les Hazelwood I'm the storm path uh CTO we offer a identity and aess access",
    "start": "21400",
    "end": "28160"
  },
  {
    "text": "management and control API we're fundamentally a rest Json",
    "start": "28160",
    "end": "33440"
  },
  {
    "text": "API uh and we we operate as a cloud SAS provider we also have an un premis distribution as well um and we're",
    "start": "33440",
    "end": "40000"
  },
  {
    "text": "Security Guys um in addition to this I'm also the uh the PMC chair of Apache Shiro which is the Apache software",
    "start": "40000",
    "end": "46199"
  },
  {
    "text": "foundation's open source security framework so if you have any questions as it as it regards security",
    "start": "46199",
    "end": "51680"
  },
  {
    "text": "specifically with rest apis feel free to talk to me at the end of the show or at the end of the presentation and I'm happy to cover whatever I can so we have",
    "start": "51680",
    "end": "59559"
  },
  {
    "text": "a fairly detailed outline there's a lot to cover um but don't worry each one of",
    "start": "59559",
    "end": "65320"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "these things can be covered in a couple minutes each so it's uh it might look a little bit uh a little bit cluttered but",
    "start": "65320",
    "end": "71240"
  },
  {
    "text": "there's actually uh a lot of information that's really beneficial if you're developing a modern rest app um and and",
    "start": "71240",
    "end": "77640"
  },
  {
    "text": "we'll cover each one of these these bullet points as we move through so we're really here to talk",
    "start": "77640",
    "end": "83079"
  },
  {
    "text": "about apis and and when I say apis I mean something",
    "start": "83079",
    "end": "88759"
  },
  {
    "text": "that a develop veler can consume that to uh to leverage you know particular",
    "start": "88759",
    "end": "94399"
  },
  {
    "text": "Behavior outside of their system and so with that in mind I really want to focus",
    "start": "94399",
    "end": "99640"
  },
  {
    "text": "on pragmatic approaches that are convenient for developers so you're building applications you're a developer",
    "start": "99640",
    "end": "105240"
  },
  {
    "text": "building an application we want to make a rest API and and utilize design principles that",
    "start": "105240",
    "end": "111119"
  },
  {
    "text": "make it easy for developers to consume these apis so developers are primary customers whether they're internal or",
    "start": "111119",
    "end": "117920"
  },
  {
    "text": "external you want to make it easy for them to use Easy for them to understand and so um how many people here have",
    "start": "117920",
    "end": "124960"
  },
  {
    "text": "heard of the term rest aarian okay so for those that you if you",
    "start": "124960",
    "end": "131000"
  },
  {
    "text": "haven't heard the term arrest afarian is an ideologue there's somebody who um",
    "start": "131000",
    "end": "136599"
  },
  {
    "text": "really sticks to the letter of the law as as rest is prescribed by a certain Inner Circle of experts and if you do",
    "start": "136599",
    "end": "143959"
  },
  {
    "text": "anything outside of the that that inner circle's recommendations then you are I don't",
    "start": "143959",
    "end": "149440"
  },
  {
    "text": "know you're forbidden to interact with them at a human level I don't know they're they're just they're nuts about",
    "start": "149440",
    "end": "154640"
  },
  {
    "text": "rest and making sure you do things perfectly I'm not a rest saaran I am a pragmatist and so um there are some",
    "start": "154640",
    "end": "161519"
  },
  {
    "text": "things that I will talk about that kind of diverges away from things that rest",
    "start": "161519",
    "end": "166879"
  },
  {
    "text": "rest afarian really really care about that being said I am also um it's also very important to me to stay true to Dr",
    "start": "166879",
    "end": "173040"
  },
  {
    "text": "Roy fielding's thesis and some of the core principles of of why rest and restful architectures are really important so uh I'm not going to Veer",
    "start": "173040",
    "end": "180640"
  },
  {
    "text": "too far away from Best Practices um but we do want to focus on adoption making things easier for people to consume the API so you can that they can adopt your",
    "start": "180640",
    "end": "188000"
  },
  {
    "text": "service and we'll also focus on scale um you know how to do things to allow other",
    "start": "188000",
    "end": "193319"
  },
  {
    "text": "you know many different heterogeneous systems to consume your rest API um so it can be uh",
    "start": "193319",
    "end": "199720"
  },
  {
    "text": "ubiquitous so why rest why are we here talking about rest um Dr Roy Fielding when he wrote his PhD thesis on restful",
    "start": "199720",
    "end": "206879"
  },
  {
    "start": "202000",
    "end": "202000"
  },
  {
    "text": "architectures talks about these six bullet points specifically as the reasons why restful architectures exist",
    "start": "206879",
    "end": "213680"
  },
  {
    "text": "or why it's a good idea uh the first is scalability uh and and when I say scalability here I don't mean scale from",
    "start": "213680",
    "end": "221360"
  },
  {
    "text": "a performance perspective I mean scale from an internet scale perspective having things be ubiquitous so any",
    "start": "221360",
    "end": "226959"
  },
  {
    "text": "client technology any programming language can can leverage these things um that's the the internet scale that",
    "start": "226959",
    "end": "233519"
  },
  {
    "text": "that we're talking about here rest is also very general it can be used to satisfy many different requirements and",
    "start": "233519",
    "end": "239879"
  },
  {
    "text": "use cases so there there are a lot of really good benefits for generality um",
    "start": "239879",
    "end": "245680"
  },
  {
    "text": "in in the rest Paradigm it's independent I can have a server written in Java a server written in PHP or Ruby and they",
    "start": "245680",
    "end": "252680"
  },
  {
    "text": "can all communicate with each other using the same restful protocol um so you have independence from",
    "start": "252680",
    "end": "258919"
  },
  {
    "text": "implementation level semantics or details latency is also something really important that Fielding talks about in",
    "start": "258919",
    "end": "265240"
  },
  {
    "text": "his thesis specifically with regards to caching and HTP caching and it's often overlooked when people talk about",
    "start": "265240",
    "end": "271240"
  },
  {
    "text": "restful architectures so we'll we'll we'll cover some uh some some techniques",
    "start": "271240",
    "end": "276280"
  },
  {
    "text": "that are are beneficial to to caching a security is also built into the HTTP specification in the form of the",
    "start": "276280",
    "end": "282080"
  },
  {
    "text": "authorization header so you can leverage existing security mechanisms and encapsulation is",
    "start": "282080",
    "end": "288039"
  },
  {
    "text": "important I can have a restful API that exposes data in a particular way that I want to expose it but it doesn't have to",
    "start": "288039",
    "end": "293680"
  },
  {
    "text": "expose everything about my system or maybe some of the internal workings or details of of of data or some of the",
    "start": "293680",
    "end": "299039"
  },
  {
    "text": "resources so these six properties are why Fielding created his restful thesis",
    "start": "299039",
    "end": "305600"
  },
  {
    "text": "um and they're really important and we'll talk about all the properties that that kind of help these things come to",
    "start": "305600",
    "end": "311520"
  },
  {
    "text": "fruition why Json so this is a rest Json based presentation um why is Json so",
    "start": "311520",
    "end": "318199"
  },
  {
    "start": "314000",
    "end": "314000"
  },
  {
    "text": "popular it's ubiquitous something like 55 of all new application development includes some form of",
    "start": "318199",
    "end": "324880"
  },
  {
    "text": "JavaScript um it's simple the grammar actually for Json is very easy easy to",
    "start": "324880",
    "end": "330000"
  },
  {
    "text": "consume it's easy to parse for tools and it's easy for human beings to understand it so it's it's very readable um it is",
    "start": "330000",
    "end": "336280"
  },
  {
    "text": "also scalable in a use case sense you can have Json represent just about anything it's just a bucket of name",
    "start": "336280",
    "end": "341800"
  },
  {
    "text": "value pairs so it's very flexible in uh in providing you a a data",
    "start": "341800",
    "end": "347600"
  },
  {
    "text": "mechanism that allows you to represent almost anything you want so Json is really important these days and also one",
    "start": "347600",
    "end": "354560"
  },
  {
    "text": "of the things I want to stress on this this presentation is XML has sort of been the dominant language in the past",
    "start": "354560",
    "end": "361039"
  },
  {
    "text": "for kind of rest based apis uh and Json sort of taking over it's a little more simple uh a lot of people like to",
    "start": "361039",
    "end": "367599"
  },
  {
    "text": "consume it it's easier to understand for most people so that's that's why we see some of the shift to",
    "start": "367599",
    "end": "373039"
  },
  {
    "text": "Json how many people have heard of this term h a t OAS hados hados however you",
    "start": "373039",
    "end": "380160"
  },
  {
    "start": "374000",
    "end": "374000"
  },
  {
    "text": "want to say it um this is a convoluted",
    "start": "380160",
    "end": "385280"
  },
  {
    "text": "uh term you can call it an acronym I guess um it stands for hyper media the engine of application State and this is",
    "start": "385280",
    "end": "391880"
  },
  {
    "text": "what the rest of farian are really really uh keen on on on communicating",
    "start": "391880",
    "end": "397240"
  },
  {
    "text": "and it it is actually a very important concept and the idea is that if I interact with a rest API I",
    "start": "397240",
    "end": "404639"
  },
  {
    "text": "should be able to discover and and find out everything I need to about that API",
    "start": "404639",
    "end": "410080"
  },
  {
    "text": "just by interacting with the API server so if you picture yourself or think of yourself as a web browser when you go",
    "start": "410080",
    "end": "415199"
  },
  {
    "text": "visit a homepage for a particular website you can navigate to all different parts of that website you can",
    "start": "415199",
    "end": "421199"
  },
  {
    "text": "interact with functionality you can see many different resources the browser knows nothing about the format of of a lot of this",
    "start": "421199",
    "end": "427560"
  },
  {
    "text": "stuff but it does know how to consume data types that it understands and it knows how to Traverse links and so this is really important um for for restful",
    "start": "427560",
    "end": "435599"
  },
  {
    "text": "architectures linking and the ability to uh reference other resources so this is sort of more of a h",
    "start": "435599",
    "end": "443759"
  },
  {
    "text": "OAS hados is is more of a a restrict further restriction on restful architectures you can be you can be",
    "start": "443759",
    "end": "450240"
  },
  {
    "text": "restful without um strictly adhering to hados principles but um this is sort of",
    "start": "450240",
    "end": "455680"
  },
  {
    "text": "the the Purity the letter of the law kind of approach we'll talk about a little bit about how these things apply",
    "start": "455680",
    "end": "461800"
  },
  {
    "text": "later on so we're just talking about rest HTTP has been around for forever Json is very",
    "start": "461800",
    "end": "468759"
  },
  {
    "text": "simple it's an easy grammar people understand it therefore rest must be easy right Json is easy HTP is easy it's",
    "start": "468759",
    "end": "474800"
  },
  {
    "text": "got to be really simple um and that's mostly true for a consumer of a rest API",
    "start": "474800",
    "end": "481240"
  },
  {
    "text": "the problem is is that for providers rest is really freaking hard there's a",
    "start": "481240",
    "end": "486960"
  },
  {
    "text": "lot of intricacies a lot of details involved in producing a nice clean rest",
    "start": "486960",
    "end": "492159"
  },
  {
    "text": "API and the reason why is that rest is not a standard there's no RFC for rest",
    "start": "492159",
    "end": "498319"
  },
  {
    "text": "there's no w3c standard it's not there's no specification body behind it that's",
    "start": "498319",
    "end": "503479"
  },
  {
    "text": "formalizing how to approach it rest is fundamentally an architectural style it's it's a way of solving problems um",
    "start": "503479",
    "end": "510840"
  },
  {
    "text": "via patterns that is not formally codified and because that's the case you get a lot of people that interpret",
    "start": "510840",
    "end": "516959"
  },
  {
    "text": "things differently you know I might want to represent a link differently than the way you want to represent a link and",
    "start": "516959",
    "end": "522518"
  },
  {
    "text": "there's a lot of debate on the public internet about how things should be done because there is no standard um that",
    "start": "522519",
    "end": "529440"
  },
  {
    "text": "being the case we're here to talk about the things that make life easy so we're going to talk about guidelines or common",
    "start": "529440",
    "end": "535480"
  },
  {
    "text": "conventions or day facto standards that will make your lives really easy so",
    "start": "535480",
    "end": "540600"
  },
  {
    "text": "things that have been vetted and proven and tested by a lot of other companies are really going to be represented in",
    "start": "540600",
    "end": "546240"
  },
  {
    "text": "this presentation so where things must apply according to an HTTP specification",
    "start": "546240",
    "end": "553240"
  },
  {
    "text": "I will let you know everything else in this presentation is really a collection of best practices and standards it's",
    "start": "553240",
    "end": "559959"
  },
  {
    "text": "pretty opinionated so we might not have total agreement but this is really an accumulation of a lot of research that",
    "start": "559959",
    "end": "566000"
  },
  {
    "text": "that we've done over the last couple years um while we've developed our own rest API so that being said to I just",
    "start": "566000",
    "end": "572920"
  },
  {
    "text": "want to bring up Storm path's domain very very briefly if only to mention these things because the rest of the",
    "start": "572920",
    "end": "578200"
  },
  {
    "start": "573000",
    "end": "573000"
  },
  {
    "text": "code samples in this presentation are going to be based on actual code that we use that we uh we execute at stormpath",
    "start": "578200",
    "end": "585000"
  },
  {
    "text": "and so it's storm path you know we manage user identities groups you know mappings between these things uh the",
    "start": "585000",
    "end": "591760"
  },
  {
    "text": "associations between these various things applications have access or users have access to groups that which have",
    "start": "591760",
    "end": "597480"
  },
  {
    "text": "access to Applications these are all things I think most people in this audience understand and are comfortable with so we're going to see uh a lot of",
    "start": "597480",
    "end": "604480"
  },
  {
    "text": "examples using this stuff but let's let's just talk about some fundamentals first before we start talking about various design",
    "start": "604480",
    "end": "610440"
  },
  {
    "text": "issues we really want to focus in restful architectures on resources and a resource is a noun it's not a verb",
    "start": "610440",
    "end": "617200"
  },
  {
    "start": "615000",
    "end": "615000"
  },
  {
    "text": "something like an account or a directory or a document or a video you know these",
    "start": "617200",
    "end": "622800"
  },
  {
    "text": "are all things that you can represent via nouns um verbs or behavior are not",
    "start": "622800",
    "end": "628959"
  },
  {
    "text": "repres presented in in a resource um we also want to make sure that resources",
    "start": "628959",
    "end": "634320"
  },
  {
    "text": "are coar grained not fine grained so I might have an account resource but it",
    "start": "634320",
    "end": "640639"
  },
  {
    "text": "would probably be pretty silly to have an account password resource right the password is extremely specific it's a",
    "start": "640639",
    "end": "645959"
  },
  {
    "text": "single property um but the account resource is General it can be used in many different scenarios and the reason",
    "start": "645959",
    "end": "651279"
  },
  {
    "text": "why this is important is that people consuming your rest API will come up with use cases and and and uh and have",
    "start": "651279",
    "end": "659320"
  },
  {
    "text": "needs that you could have never have foreseen when you've written your rest API so by keeping your data objects core",
    "start": "659320",
    "end": "665160"
  },
  {
    "text": "grained you will satisfy a lot of conditions that you have never planned for and it will be easier for them to",
    "start": "665160",
    "end": "670399"
  },
  {
    "text": "use your service and it'll be easier for them to consume it and it really helps with longevity of your service over",
    "start": "670399",
    "end": "675600"
  },
  {
    "text": "time and so let's talk about um why we want to focus on resources instead of",
    "start": "675600",
    "end": "681040"
  },
  {
    "text": "just uh verbs what if I had an API with",
    "start": "681040",
    "end": "686519"
  },
  {
    "start": "684000",
    "end": "684000"
  },
  {
    "text": "URLs that did embed verbs in them maybe I had to get account or I wanted to access an endpoint called create",
    "start": "686519",
    "end": "693200"
  },
  {
    "text": "directory whenever I was creating a directory or I want to update a group or verify an account email",
    "start": "693200",
    "end": "698360"
  },
  {
    "text": "address this doesn't look so bad there's only four of these things up here but but the problem is this is that as",
    "start": "698360",
    "end": "705079"
  },
  {
    "text": "Behavior starts to accumulate you might end up with this or",
    "start": "705079",
    "end": "711839"
  },
  {
    "text": "much much worse you know maybe I can if I had URLs to get all accounts or update",
    "start": "711839",
    "end": "717160"
  },
  {
    "text": "a group's name or search groups by name or verify whatever the point is is that",
    "start": "717160",
    "end": "723680"
  },
  {
    "text": "as Behavior changes or as you add new features the number of end points that",
    "start": "723680",
    "end": "729240"
  },
  {
    "text": "you would have to support will explode if you use kind of a a pattern like this this Al this smells like the old you",
    "start": "729240",
    "end": "735839"
  },
  {
    "text": "know bad RPC from the late 90s don't do this this is not a good idea don't include this stuff in your API um there",
    "start": "735839",
    "end": "743000"
  },
  {
    "text": "is a cleaner way and so we'll talk about what that is we just want to keep it",
    "start": "743000",
    "end": "748199"
  },
  {
    "text": "simple there's really only only two things that we have to worry about or two ways of representing information in",
    "start": "748199",
    "end": "753839"
  },
  {
    "text": "a rest API there's fundamentally a collection of resource and an instance",
    "start": "753839",
    "end": "759279"
  },
  {
    "start": "759000",
    "end": "759000"
  },
  {
    "text": "resource and an instance is kind of what you would think it is this is a Java conference so if I had a class and I create many instances of it a resource",
    "start": "759279",
    "end": "766800"
  },
  {
    "text": "or instance resource represents the single properties of a single instance a collection resource is something that",
    "start": "766800",
    "end": "774040"
  },
  {
    "text": "represents multiple instances and and it's important to note here that I",
    "start": "774040",
    "end": "779639"
  },
  {
    "text": "didn't call it just a collection I'm calling it a collection resource because it itself is its own resource in a rest",
    "start": "779639",
    "end": "785440"
  },
  {
    "text": "API it can have its own properties in addition to the things that it contains and so if it has its own set of name",
    "start": "785440",
    "end": "790839"
  },
  {
    "text": "value pairs it's it is itself a first class resource Citizen and I'll show some examples of of this in in uh in a",
    "start": "790839",
    "end": "798680"
  },
  {
    "text": "little bit but these are really the only only the two things that we have to worry about so a collection resource kind of",
    "start": "798680",
    "end": "805440"
  },
  {
    "start": "805000",
    "end": "805000"
  },
  {
    "text": "looks like this um this is a URL endpoint that you know it says SL",
    "start": "805440",
    "end": "810920"
  },
  {
    "text": "applications it doesn't say SL application it's plural um so the the thing that we've seen that that makes we",
    "start": "810920",
    "end": "818680"
  },
  {
    "text": "think makes the most sense and that is easy to consume is that you name your endpoints in the plural because they do represent multiple things one or more",
    "start": "818680",
    "end": "825680"
  },
  {
    "text": "things it's not SL application because I'm not interacting with a singular entity I'm interacting with multiple",
    "start": "825680",
    "end": "831720"
  },
  {
    "text": "entities or multiple resources and typically um by a convention individual resources",
    "start": "831720",
    "end": "839160"
  },
  {
    "text": "usually hang off of the collection that they're a child of or that that that owned them so an instance resource might",
    "start": "839160",
    "end": "846440"
  },
  {
    "start": "840000",
    "end": "840000"
  },
  {
    "text": "be accessible in a URL like this SL application SL some ID",
    "start": "846440",
    "end": "853399"
  },
  {
    "text": "so trailing slash on the collection resource it's not necessary um there's there's no need for it because again and",
    "start": "853399",
    "end": "861759"
  },
  {
    "text": "this this is kind of important this is itself a first class citizen resource and so if it has its own properties its",
    "start": "861759",
    "end": "867440"
  },
  {
    "text": "own collection its own items array that we'll talk about in a little bit it is its own resource so um just as you",
    "start": "867440",
    "end": "875040"
  },
  {
    "text": "wouldn't this is a resource just as this is a resource so there's no need for a trailing slash at the end of it you can put it there it doesn't really hurt",
    "start": "875040",
    "end": "881040"
  },
  {
    "text": "anything but it's not required or at least I don't think it should be required so we've talked about resources",
    "start": "881040",
    "end": "886759"
  },
  {
    "text": "collections instances now we want to start talking about behavior and in the HTP specification there are five kind of",
    "start": "886759",
    "end": "893880"
  },
  {
    "start": "891000",
    "end": "891000"
  },
  {
    "text": "well-known behaviors attributed to the spec get put post Elite in head um head is is a metadata operation you know I",
    "start": "893880",
    "end": "900639"
  },
  {
    "text": "just want to get some information about a resource but don't actually give me the resource back itself the other uh",
    "start": "900639",
    "end": "906480"
  },
  {
    "text": "HTTP verbs are are the way that we can um perform behavior on those",
    "start": "906480",
    "end": "913839"
  },
  {
    "text": "resources but there is something important to note",
    "start": "913839",
    "end": "918959"
  },
  {
    "text": "here a lot of people think get put post and delete have a",
    "start": "918959",
    "end": "924519"
  },
  {
    "text": "onetoone correspondence with read update create and delete and that is not true",
    "start": "924519",
    "end": "931920"
  },
  {
    "text": "in the HTP specification at least it's not true according to uh the spec as far as how the verbs",
    "start": "931920",
    "end": "937440"
  },
  {
    "text": "operate there is not a onetoone correspondence between these things and",
    "start": "937440",
    "end": "942680"
  },
  {
    "text": "and I'll I'll explain where those differences lie um as you would expect however get",
    "start": "942680",
    "end": "949480"
  },
  {
    "text": "delete and head really do exactly what you think they do they have a one toone correspondence with the behavior you",
    "start": "949480",
    "end": "955120"
  },
  {
    "text": "would expect get is actually a read delete is actually a delete you know I want to remove a resource and head is as",
    "start": "955120",
    "end": "961600"
  },
  {
    "text": "I said give me some metadata about the the resource I don't want the actual resource back",
    "start": "961600",
    "end": "967000"
  },
  {
    "text": "itself but put and post aren't obvious they can be both used for create and",
    "start": "967000",
    "end": "972639"
  },
  {
    "text": "update both scenarios are possible with these two verbs but in very specific",
    "start": "972639",
    "end": "978240"
  },
  {
    "text": "under very specific conditions and I'll give an example some examples of of what they are so you can use put to create a",
    "start": "978240",
    "end": "987079"
  },
  {
    "start": "986000",
    "end": "986000"
  },
  {
    "text": "resource or you can allow your your clients rather arrest client to create a resource using put if the client knows",
    "start": "987079",
    "end": "995759"
  },
  {
    "text": "the ID that they want where they want this resource to be stored so if you",
    "start": "995759",
    "end": "1001240"
  },
  {
    "text": "allow your clients to generate their own identifiers maybe it's a property name maybe it's a username for example that",
    "start": "1001240",
    "end": "1007399"
  },
  {
    "text": "shouldn't change for an application um you can allow this um and and this is",
    "start": "1007399",
    "end": "1012959"
  },
  {
    "text": "totally legal and the idea is that the client knows where they want this resource to be stored and so you can use",
    "start": "1012959",
    "end": "1019079"
  },
  {
    "text": "put to do that put can also be used for",
    "start": "1019079",
    "end": "1026240"
  },
  {
    "text": "update if you specify all of the data when the put is executed when that",
    "start": "1026240",
    "end": "1033480"
  },
  {
    "text": "request is executed the issue with put is that it must contain all of the",
    "start": "1033480",
    "end": "1038558"
  },
  {
    "text": "properties puts cannot be used for partial updates and this is as I said I'd mentioned this is not a convention",
    "start": "1038559",
    "end": "1044918"
  },
  {
    "text": "this is actually mandatory by the HTTP specification and the reason why is that puts must be",
    "start": "1044919",
    "end": "1051640"
  },
  {
    "text": "idempotent and an idempotent operation is any operation that could be performed once or multiple times and result in the",
    "start": "1051640",
    "end": "1059200"
  },
  {
    "text": "same server State it's and it's really important to note here that idempotency",
    "start": "1059200",
    "end": "1064880"
  },
  {
    "text": "is a property of server State not necessarily client state so as long as the server state is diff is the same",
    "start": "1064880",
    "end": "1070640"
  },
  {
    "text": "between multiple requests then the property of of idempotency is maintained and so this is",
    "start": "1070640",
    "end": "1077120"
  },
  {
    "text": "really important because going back to this example let's say on request a i specify only the",
    "start": "1077120",
    "end": "1082679"
  },
  {
    "text": "name and then some other client specifies or no and on request b i",
    "start": "1082679",
    "end": "1088159"
  },
  {
    "text": "specify just the description you know just partial partial information in between request A and B there could be",
    "start": "1088159",
    "end": "1094520"
  },
  {
    "text": "another client that specifies the name and so at the end of request B now my",
    "start": "1094520",
    "end": "1100360"
  },
  {
    "text": "resource has the other client's name but my description so because the server State isn't the same after request A and",
    "start": "1100360",
    "end": "1107600"
  },
  {
    "text": "B that's not an idempotent operation you have to guarantee idempotency for HTTP",
    "start": "1107600",
    "end": "1113559"
  },
  {
    "text": "um and so that's why put must include all the data you have to you have to include all all the V all the attributes",
    "start": "1113559",
    "end": "1119480"
  },
  {
    "text": "or all the data for a put resource so again put must be a full",
    "start": "1119480",
    "end": "1125120"
  },
  {
    "text": "replacement operation um post however um can also be",
    "start": "1125120",
    "end": "1130960"
  },
  {
    "text": "used as create and this is typically done um on a collection resource and",
    "start": "1130960",
    "end": "1136200"
  },
  {
    "text": "you're going to sort of add a child to that collection resource and you're allowing the server to generate an identifier um because you",
    "start": "1136200",
    "end": "1143600"
  },
  {
    "text": "you you might not know what it is when you interact with the server and so in this case you know we're we're calling a",
    "start": "1143600",
    "end": "1149520"
  },
  {
    "text": "post with a payload on the applications endpoint and if this is successful we're",
    "start": "1149520",
    "end": "1155640"
  },
  {
    "text": "going to get a 2011 created not a 200 this should be a 201 again this isn't",
    "start": "1155640",
    "end": "1161280"
  },
  {
    "text": "mandatory but it should be a 2011 to let the client Know Not only was your request successful but I also created",
    "start": "1161280",
    "end": "1166919"
  },
  {
    "text": "something for you oh and here's the the location of where that thing resides by the way so you do want to set the location header as a response uh as a",
    "start": "1166919",
    "end": "1174400"
  },
  {
    "text": "response header when to create goes through successfully so they can see Not only was the request successful but I created something and here is the",
    "start": "1174400",
    "end": "1180480"
  },
  {
    "text": "location of where that thing resides and so um at least in storm paaths API we",
    "start": "1180480",
    "end": "1186120"
  },
  {
    "text": "always return the fully qualified canonical URL of where that thing resides so clients can just take that",
    "start": "1186120",
    "end": "1191760"
  },
  {
    "text": "URL and immediately execut a request for it if they wanted to so um",
    "start": "1191760",
    "end": "1198799"
  },
  {
    "text": "that is post as using post to create resources you can also use post as an update mechanism as well and here you",
    "start": "1198799",
    "end": "1206320"
  },
  {
    "text": "see that we're actually putting some data to an existing URI and we're specifying in this case just the name",
    "start": "1206320",
    "end": "1212679"
  },
  {
    "text": "property and we're getting back a 200 okay saying stating that the request went through successfully and the",
    "start": "1212679",
    "end": "1218559"
  },
  {
    "text": "interesting reason or the interesting thing here is that this is totally legal post does not have to be idempotent it's",
    "start": "1218559",
    "end": "1225280"
  },
  {
    "text": "the only HTTP verb in the HTTP specification that does not require idempotency so you can use post for",
    "start": "1225280",
    "end": "1231840"
  },
  {
    "text": "partial updates um puts must be full updates posts can be used for partial updates um there is an RFC RFC",
    "start": "1231840",
    "end": "1241000"
  },
  {
    "text": "5789 that is trying or at least trying to cover this notion of a patch verb to",
    "start": "1241000",
    "end": "1246480"
  },
  {
    "text": "be added to the HP specification it's sort of stagnated for a while I don't I don't know that it has a lot of Leverage",
    "start": "1246480",
    "end": "1252000"
  },
  {
    "text": "behind it because as I've just demonstrated you can do partial updates with post as well um and so because it's",
    "start": "1252000",
    "end": "1258080"
  },
  {
    "text": "possible to today there doesn't seem to be a whole lot of drive to get that out of out of the spec committee um but it's",
    "start": "1258080",
    "end": "1264280"
  },
  {
    "text": "out there if you want to go look at it it's RFC 5789 so verbs nouns the other thing that",
    "start": "1264280",
    "end": "1271679"
  },
  {
    "text": "I want to cover briefly is this notion of media types and this is really important in restful architectures um a",
    "start": "1271679",
    "end": "1279000"
  },
  {
    "start": "1276000",
    "end": "1276000"
  },
  {
    "text": "media type is basically a format specification associated with a set of parsing rules um so clients know how to",
    "start": "1279000",
    "end": "1287400"
  },
  {
    "text": "interpret or or respond to that the data format the clients can tell the server",
    "start": "1287400",
    "end": "1294360"
  },
  {
    "text": "um what they want using the accept header so if the client says hey my",
    "start": "1294360",
    "end": "1299440"
  },
  {
    "text": "accept header is application Json they're telling the server hey server when you process this respon this",
    "start": "1299440",
    "end": "1305200"
  },
  {
    "text": "request I would like you to give me Json back in response and the server will set the content type header on the response",
    "start": "1305200",
    "end": "1312320"
  },
  {
    "text": "to say I know what you requested but here's what I'm actually sending back most of the time we hope they're the",
    "start": "1312320",
    "end": "1317640"
  },
  {
    "text": "same you know if the client requests Json and the server responds with Json these two values should be the same but",
    "start": "1317640",
    "end": "1323720"
  },
  {
    "text": "you can also do um kind of preferential ordering ordering with uh accept headers so the client can specify not only do I",
    "start": "1323720",
    "end": "1330880"
  },
  {
    "text": "accept Json but I also accept XML and plain text and all sorts other things then the server can then leverage that",
    "start": "1330880",
    "end": "1337320"
  },
  {
    "text": "header to return a very specific resource type back to the client if if uh depending on the client's desires um",
    "start": "1337320",
    "end": "1344919"
  },
  {
    "text": "so here's some at the bottom some representations of typical resource or media types um application Json is the",
    "start": "1344919",
    "end": "1351799"
  },
  {
    "text": "one everybody's familiar with you can also start creating custom media types though and uh some here's just some",
    "start": "1351799",
    "end": "1357559"
  },
  {
    "text": "examples there's many ways to Define these um application Fu plus Json says not only is this a Json document but",
    "start": "1357559",
    "end": "1363960"
  },
  {
    "text": "it's also a Json document according to the fu specification and uh and you can also",
    "start": "1363960",
    "end": "1369240"
  },
  {
    "text": "provide kind of parameters you know via the semicolon and Amper Sands to provide",
    "start": "1369240",
    "end": "1374480"
  },
  {
    "text": "additional information about the content contained within within the body we'll talk more about media types and",
    "start": "1374480",
    "end": "1380720"
  },
  {
    "text": "how to leverage this in uh specifically for versioning in a little bit but this kind of gives you an idea of of media",
    "start": "1380720",
    "end": "1389000"
  },
  {
    "text": "types okay fundamentals are covered let's let's get into some design um now",
    "start": "1389000",
    "end": "1395120"
  },
  {
    "text": "it's really important to know in wrestful architectures what your URLs look like don't really matter a whole",
    "start": "1395120",
    "end": "1400200"
  },
  {
    "text": "lot and they shouldn't matter as far as clients and servers interacting with each other but they kind of matter to",
    "start": "1400200",
    "end": "1405760"
  },
  {
    "text": "people so it's often often one of the things that people talk about when they're designing their rest API what",
    "start": "1405760",
    "end": "1410799"
  },
  {
    "text": "does my base URL need to look like um so again while it's not really important for the technology it is kind of",
    "start": "1410799",
    "end": "1416559"
  },
  {
    "text": "important for people to kind of wrap their heads around how do I start and so if you're designing a rest",
    "start": "1416559",
    "end": "1422400"
  },
  {
    "text": "API which of these two things do you think you would prefer to consume if you're yourself a a",
    "start": "1422400",
    "end": "1428120"
  },
  {
    "text": "customer you know it's pretty obvious that everybody favors the top URL and and the reason why is that the bottom",
    "start": "1428120",
    "end": "1434320"
  },
  {
    "text": "one you don't really know if the rest API is an afterthought or is it supposed to be be you know some kind of location",
    "start": "1434320",
    "end": "1440960"
  },
  {
    "text": "that's buried within some website and it's just it doesn't look very clean it doesn't look like you're catering to my",
    "start": "1440960",
    "end": "1447679"
  },
  {
    "text": "needs um as a developer who wants to consume something userfriendly the top",
    "start": "1447679",
    "end": "1453159"
  },
  {
    "text": "one clearly communicates hey you know this is where you have to go for rest apis we got we have you covered and uh",
    "start": "1453159",
    "end": "1460200"
  },
  {
    "text": "we hope it's easy to use so of course apis don't matter that much but if developers are your customers you're",
    "start": "1460200",
    "end": "1465960"
  },
  {
    "text": "going to want to make them happy um and so you should support the smallest URL",
    "start": "1465960",
    "end": "1471080"
  },
  {
    "text": "possible it get it inspires confidence um some questions we receive",
    "start": "1471080",
    "end": "1477520"
  },
  {
    "text": "sometimes are if a browser versus a rest client visit the same exact URL what should happen so in some cases if it's a",
    "start": "1477520",
    "end": "1484679"
  },
  {
    "text": "rest client um I can return return back just Json but if it's a browser and the",
    "start": "1484679",
    "end": "1490200"
  },
  {
    "text": "other the client represents a human being maybe I can return a full full-blown htttp page or excuse me HTML",
    "start": "1490200",
    "end": "1497000"
  },
  {
    "text": "page that renders completely in the browser and shows images and all these really good things um that's a totally viable",
    "start": "1497000",
    "end": "1504240"
  },
  {
    "text": "approach um and you can do that via content negotiation you know the server knows what type of format to return back",
    "start": "1504240",
    "end": "1510720"
  },
  {
    "text": "um it seems to be though that the the convention is to not do this is to not show different types of format and and I",
    "start": "1510720",
    "end": "1517520"
  },
  {
    "text": "think the reason why is that sometimes when you're a developer and you're hacking around with a service and you just want to test things to get it to to",
    "start": "1517520",
    "end": "1523840"
  },
  {
    "text": "work you want to see the content that's coming back from the server so maybe my rest client doesn't work correctly and I",
    "start": "1523840",
    "end": "1530399"
  },
  {
    "text": "just want to open up a browser and just execute a request really quickly to see if I get back something that I can",
    "start": "1530399",
    "end": "1535520"
  },
  {
    "text": "visually parse and so uh you can negotiate different types of content um",
    "start": "1535520",
    "end": "1540880"
  },
  {
    "text": "in in the storm path API we've actually kept them the same because we we feel it helps developers while they're debugging",
    "start": "1540880",
    "end": "1546279"
  },
  {
    "text": "and and they they they feel comfortable knowing what they're understanding what they see what comes back from the server",
    "start": "1546279",
    "end": "1552720"
  },
  {
    "text": "so we recommend that you keep them the same but there's no strict mandate that you should do that",
    "start": "1552720",
    "end": "1559159"
  },
  {
    "text": "okay so with URLs how do I handle versioning um if I'm going to upgrade my API over time I don't want to break",
    "start": "1559159",
    "end": "1564760"
  },
  {
    "text": "existing clients and so how do I do that in a way that's going to make life easy for people so there seems to be two",
    "start": "1564760",
    "end": "1572159"
  },
  {
    "text": "dominant approaches um the first is that you actually embed the version number in the URL and this is by far the most",
    "start": "1572159",
    "end": "1578480"
  },
  {
    "text": "common approach uh on on the public internet especially with SAS services and the other one the other way",
    "start": "1578480",
    "end": "1584919"
  },
  {
    "text": "to do it is via a media type and I'll explain the two different I kind of I'll compare and contrast and",
    "start": "1584919",
    "end": "1590640"
  },
  {
    "text": "the top one is definitely easier to consume if you don't know much about rest or media types or HTP or all this",
    "start": "1590640",
    "end": "1596399"
  },
  {
    "text": "other stuff you know that if you at least put that thing in a browser address bar and hit enter you're going to see something or at least you should",
    "start": "1596399",
    "end": "1602200"
  },
  {
    "text": "um or you might be able to the bottom one um is probably much more correct",
    "start": "1602200",
    "end": "1607960"
  },
  {
    "text": "from a restful perspective and that everything that's needed to understand",
    "start": "1607960",
    "end": "1613360"
  },
  {
    "text": "the resource is encoded in the media type or the media type representation so the bottom one says",
    "start": "1613360",
    "end": "1619000"
  },
  {
    "text": "um this is an application this is the Json app actually I I got the the Json",
    "start": "1619000",
    "end": "1624200"
  },
  {
    "text": "and the fu tokens swapped by accident but if it was application Fu plus Json",
    "start": "1624200",
    "end": "1630360"
  },
  {
    "text": "that says this is a Fu Json document um that represents an application oh and",
    "start": "1630360",
    "end": "1636159"
  },
  {
    "text": "the version of this resource is at version one so the data that comes back can be parsed according to version one",
    "start": "1636159",
    "end": "1641919"
  },
  {
    "text": "rules version one semantics the reason why this is really nice is that everything that needs to be",
    "start": "1641919",
    "end": "1650279"
  },
  {
    "text": "negotiated between the client and server can be captured in the headers or is the media type and then the URLs for your",
    "start": "1650279",
    "end": "1655720"
  },
  {
    "text": "app actually never need to change which can be very nice depending on the client or depending on the code that you write",
    "start": "1655720",
    "end": "1661559"
  },
  {
    "text": "so if I visit a URL today in specify version one and then I do it a year from",
    "start": "1661559",
    "end": "1667480"
  },
  {
    "text": "now in specify version two none of my URLs need to change none of my code needs to change that's a really nice",
    "start": "1667480",
    "end": "1673279"
  },
  {
    "text": "benefit the trick or the difficulty with this approach is that not a lot of people know how to do not a lot of",
    "start": "1673279",
    "end": "1678880"
  },
  {
    "text": "people leverage it in their server side implementations of rest apis and it definitely requires some kind of solid",
    "start": "1678880",
    "end": "1685919"
  },
  {
    "text": "understanding of what media types are and how to leverage them and so if you have to support rest apis for people of",
    "start": "1685919",
    "end": "1691279"
  },
  {
    "text": "varying degrees of skill or education like maybe there's you know some of your customers coming right out of high",
    "start": "1691279",
    "end": "1696799"
  },
  {
    "text": "school and they need to consume this stuff they might not understand what this is nor how to formulate a request",
    "start": "1696799",
    "end": "1702919"
  },
  {
    "text": "so if this is really hard for them to build up when they're trying to interact with the arrest API they're just not",
    "start": "1702919",
    "end": "1708519"
  },
  {
    "text": "going to call it so if your business depends on people calling your API for customers it's really hard sell to go",
    "start": "1708519",
    "end": "1715840"
  },
  {
    "text": "the bottom albe it probably more correct approach um the top one is a lot easier to use and get running uh right off the",
    "start": "1715840",
    "end": "1722519"
  },
  {
    "text": "bat so storm path we actually use that that top URL as our base um and most",
    "start": "1722519",
    "end": "1728519"
  },
  {
    "text": "other SAS providers use that same technique for the same reasons so this is kind of where we're kind of diverging from ideology in favor of",
    "start": "1728519",
    "end": "1736679"
  },
  {
    "text": "pragmatism resour format um we we've talked about this already you can customize media types or media type",
    "start": "1736679",
    "end": "1743480"
  },
  {
    "text": "representations so the recommendation here is that start off with application Json that's what everybody understands",
    "start": "1743480",
    "end": "1750200"
  },
  {
    "text": "it's easy to use how do you parse custom data or media types and how do I specify version attributes or other things",
    "start": "1750200",
    "end": "1756240"
  },
  {
    "text": "that's a lot more complicated so we recommend that maybe you support this stuff when time allows you start with the top one and then you add these",
    "start": "1756240",
    "end": "1762679"
  },
  {
    "text": "custom media types as necessary um as as you have the ability to do so",
    "start": "1762679",
    "end": "1768200"
  },
  {
    "text": "okay media types done uh another thing I want to bring up is Campbell case um so",
    "start": "1768200",
    "end": "1774000"
  },
  {
    "start": "1771000",
    "end": "1771000"
  },
  {
    "text": "when you're returning Json documents or consuming Json documents from clients I just want to reiterate that the JS and",
    "start": "1774000",
    "end": "1780720"
  },
  {
    "text": "Json means JavaScript um and so you should see things like my a.4 each not",
    "start": "1780720",
    "end": "1786200"
  },
  {
    "text": "mya. 4ore right this is not rson it's not Ruby object notation or r n this is",
    "start": "1786200",
    "end": "1793000"
  },
  {
    "text": "Javascript so keep these things consistent and the reason why it's important to keep to maintain this",
    "start": "1793000",
    "end": "1798640"
  },
  {
    "text": "convention is that if you do have a JavaScript client a webbased client that's running in the browser for example maybe you know it's an ember",
    "start": "1798640",
    "end": "1804880"
  },
  {
    "text": "client or or angular or something like that they will be able to start consuming properties immediately off the",
    "start": "1804880",
    "end": "1810840"
  },
  {
    "text": "off the Json object because this is expected in Json they don't have to escape the property with quot by quoting",
    "start": "1810840",
    "end": "1817519"
  },
  {
    "text": "it for example so this facilitates integration it keeps things easy to",
    "start": "1817519",
    "end": "1822960"
  },
  {
    "text": "understand for people underscore or who understand Json so stay consistent",
    "start": "1822960",
    "end": "1829039"
  },
  {
    "text": "uh dates and times this is an interesting thing uh I've seen a lot of different apis represent time stamps and",
    "start": "1829039",
    "end": "1835840"
  },
  {
    "start": "1831000",
    "end": "1831000"
  },
  {
    "text": "dates in many different ways and really there's there's no reason to do that there is a standard it's been around for",
    "start": "1835840",
    "end": "1842880"
  },
  {
    "text": "a long time it's called ISO 8601 so you should you should use it this Tim stamp exists this the specification rather",
    "start": "1842880",
    "end": "1850399"
  },
  {
    "text": "exists to specifically represent text encoded times and dates and timestamps",
    "start": "1850399",
    "end": "1856159"
  },
  {
    "text": "so if you keep all of your time stamps in your API iso8601 formatted then any number of tools will",
    "start": "1856159",
    "end": "1863279"
  },
  {
    "text": "be able to consume this very easily basically every every client language that I know of knows how to consume an",
    "start": "1863279",
    "end": "1868600"
  },
  {
    "text": "iso8601 timestamp so um keep things consistent use the standards um and",
    "start": "1868600",
    "end": "1875519"
  },
  {
    "text": "integration will be a lot easier for your customers okay so media type camel case dates HS I just want to touch on",
    "start": "1875519",
    "end": "1883360"
  },
  {
    "text": "this briefly um one of the most important things about rful architectures is this notion of distributed hyper media um Fielding said",
    "start": "1883360",
    "end": "1890559"
  },
  {
    "text": "it's it's absolutely Paramount it's it's one of the most critical if not the most important part of restful architectures",
    "start": "1890559",
    "end": "1897360"
  },
  {
    "text": "and the idea is that you need resources need to be able to reference other resources this is what makes the web",
    "start": "1897360",
    "end": "1903360"
  },
  {
    "text": "work at a global scale I can reference a link on Google's website just as easily as I could on Yahoo's you know and I",
    "start": "1903360",
    "end": "1910399"
  },
  {
    "text": "have the ability to reference these links and then Traverse the links and maybe Traverse very large content graphs",
    "start": "1910399",
    "end": "1916799"
  },
  {
    "text": "and it's this notion of linkability or distributed hyper media that makes this possible and so you really want to retain this property or this behavior in",
    "start": "1916799",
    "end": "1923519"
  },
  {
    "text": "your rest API and so HFS are super important um you want them to exist in your body",
    "start": "1923519",
    "end": "1929559"
  },
  {
    "text": "content so clients can know how to interact with other resources and linking is is very critical as I just",
    "start": "1929559",
    "end": "1936720"
  },
  {
    "text": "said but there's there's it's it's kind of tricky in Json and I'll I'll cover that in a little bit it's really important though so um we'll we'll dive",
    "start": "1936720",
    "end": "1944000"
  },
  {
    "text": "into that in some detail but um in this case you'll see in storm path's example",
    "start": "1944000",
    "end": "1949880"
  },
  {
    "text": "every one of our resources that's returned from our server always has an HF property with a fully qualified URL",
    "start": "1949880",
    "end": "1955360"
  },
  {
    "text": "doesn't need to be fully qualified but ours is because we feel it's easier for clients they can um immediately consume",
    "start": "1955360",
    "end": "1962600"
  },
  {
    "text": "this string and immediately execute an HTP request without having to worry about how to construct the host and what",
    "start": "1962600",
    "end": "1968799"
  },
  {
    "text": "port to communicate with or any of that stuff so again the name of the game for us is make things easy for customers",
    "start": "1968799",
    "end": "1974679"
  },
  {
    "text": "easy for clients so all of our URLs are always fully qualified canonical URLs question in the back no okay awesome so",
    "start": "1974679",
    "end": "1984840"
  },
  {
    "text": "okay so response body some questions we've had is whenever I maybe like I",
    "start": "1984840",
    "end": "1990120"
  },
  {
    "text": "create something or and I update a resource I create a new resource in the server what should the response look like should I get that back should it be",
    "start": "1990120",
    "end": "1996639"
  },
  {
    "text": "empty should it be some sort of success message um one of the things well get is",
    "start": "1996639",
    "end": "2002440"
  },
  {
    "text": "obvious right if I'm executing HP get clearly I want something back so give it to me but what about post if if I do",
    "start": "2002440",
    "end": "2007880"
  },
  {
    "text": "post into the server should I get that same data back or some other status",
    "start": "2007880",
    "end": "2012919"
  },
  {
    "text": "um the thing that we believe is a best practice here that we've seen that works very well is that if I'm going to post",
    "start": "2012919",
    "end": "2019200"
  },
  {
    "text": "an account you should theoretically give me that account right back to me and the reason why is there might be some data",
    "start": "2019200",
    "end": "2026080"
  },
  {
    "text": "about it that the server changes maybe it applies a last updated timestamp or whatever um but if you get it if the",
    "start": "2026080",
    "end": "2033320"
  },
  {
    "text": "server regurgitates that right back to the customer the customer knows that when they consume it they always have the freshest most recent most accurate",
    "start": "2033320",
    "end": "2040679"
  },
  {
    "text": "version of that particular resource and then they can either cash it locally or they can use it for other things",
    "start": "2040679",
    "end": "2045840"
  },
  {
    "text": "immediately but we found that this this approach makes things easier for the customer or the client especi",
    "start": "2045840",
    "end": "2051800"
  },
  {
    "text": "specifically a rest SDK if you're ever building a rest SDK you know that whatever response comes back is",
    "start": "2051800",
    "end": "2057878"
  },
  {
    "text": "immediately available and can be used and consumed um or put into a cache so it keeps things consistent if you always",
    "start": "2057879",
    "end": "2064079"
  },
  {
    "text": "know to expect it um it makes client code specifically much more simple um",
    "start": "2064079",
    "end": "2070440"
  },
  {
    "text": "you can however specify control parameters query parameters to override this behavior and a good example of when",
    "start": "2070440",
    "end": "2076398"
  },
  {
    "text": "you might want to do this is what if I up upload via a post a 10 gigabyte video",
    "start": "2076399",
    "end": "2082760"
  },
  {
    "text": "file it'd be absurd for the server to spit that same video file right back out to me right and so if you want to allow",
    "start": "2082760",
    "end": "2088760"
  },
  {
    "text": "customers or clients control of this Behavior you can support these kind of override Flags like underscore body",
    "start": "2088760",
    "end": "2094839"
  },
  {
    "text": "equals false for the client to say I get it I know you usually give this stuff back to me but in this case I don't want",
    "start": "2094839",
    "end": "2100280"
  },
  {
    "text": "it so that's that's one approach uh why the underscore so the",
    "start": "2100280",
    "end": "2107760"
  },
  {
    "text": "reason why it um and this again is a convention um in our experience",
    "start": "2107760",
    "end": "2113880"
  },
  {
    "text": "typically things that start with underscore perhaps underscore underscore reflect meta operations or things that",
    "start": "2113880",
    "end": "2120520"
  },
  {
    "text": "are specific to the server the implementation about how to communicate with the with the server whereas things",
    "start": "2120520",
    "end": "2125640"
  },
  {
    "text": "without underscores typically represent fields or data that's actually part of the actual resource and so you want to",
    "start": "2125640",
    "end": "2131800"
  },
  {
    "text": "separate what's part of the resource versus what is a control parameter and you don't want to get them confused so",
    "start": "2131800",
    "end": "2137240"
  },
  {
    "text": "that's that's why we use an underscore in this case content negotiation I covered this",
    "start": "2137240",
    "end": "2143000"
  },
  {
    "text": "I don't have a whole lot of time left so I'm going to skip over it but again the client can tell the server what it wants and the server can spit back um the",
    "start": "2143000",
    "end": "2150520"
  },
  {
    "text": "content and and set the the content type header um I will mention that the con the client should represent what it can",
    "start": "2150520",
    "end": "2158280"
  },
  {
    "start": "2152000",
    "end": "2152000"
  },
  {
    "text": "consume as a comma delimited list in the order in which it prefers to receive the",
    "start": "2158280",
    "end": "2164040"
  },
  {
    "text": "the feedback so in this example the client saying I accept both Json and plain text but I prefer Json because",
    "start": "2164040",
    "end": "2170599"
  },
  {
    "text": "it's listed first so the server can look at that and then render content back according to uh what the server supports",
    "start": "2170599",
    "end": "2177599"
  },
  {
    "text": "based on the preference um we see resource extension sometimes on actual URLs and by",
    "start": "2177599",
    "end": "2183880"
  },
  {
    "start": "2182000",
    "end": "2182000"
  },
  {
    "text": "convention this conventionally overrides the accept he header so if a client says",
    "start": "2183880",
    "end": "2189200"
  },
  {
    "text": "hey give me application XML but you see Json on the on the resource URL you",
    "start": "2189200",
    "end": "2195839"
  },
  {
    "text": "should return Json back and the reason why is that the the URL is ultimately",
    "start": "2195839",
    "end": "2201800"
  },
  {
    "text": "the most important part of the overall request and so it trumps or it's more important than an accept header at least",
    "start": "2201800",
    "end": "2208560"
  },
  {
    "text": "by convention okay how do we do linking this is super important especially for",
    "start": "2208560",
    "end": "2215119"
  },
  {
    "text": "rest scalability said it's amount blah blah blah it's It's tricky in Json though um",
    "start": "2215119",
    "end": "2223240"
  },
  {
    "text": "the difficulty here is that there's no again there's no standard for this stuff there's no linking standard or",
    "start": "2223240",
    "end": "2229160"
  },
  {
    "text": "specification in the Json grammar um but there is an XML right XML has it these",
    "start": "2229160",
    "end": "2234520"
  },
  {
    "text": "things are known as xlinks um the w3c has a standard for anchors which is a",
    "start": "2234520",
    "end": "2240200"
  },
  {
    "text": "type of xlink um you know the the a element so we've seen this many times",
    "start": "2240200",
    "end": "2245440"
  },
  {
    "text": "before and there's existing standards so it's it's not an issue for people who do XML or HTML but Json does not have such",
    "start": "2245440",
    "end": "2251400"
  },
  {
    "text": "a standard so how do we do this so for example let's say I am I'm getting an",
    "start": "2251400",
    "end": "2257200"
  },
  {
    "start": "2256000",
    "end": "2256000"
  },
  {
    "text": "account and in in stormpath system all accounts reside in directories directories own accounts if you will so",
    "start": "2257200",
    "end": "2264240"
  },
  {
    "text": "what if I want to get back an account and I want to get back its Parent Directory these are two separate",
    "start": "2264240",
    "end": "2269440"
  },
  {
    "text": "resources um how do I represent this in Json and there's a lot of ways to do this by the",
    "start": "2269440",
    "end": "2275359"
  },
  {
    "text": "way there's I think how ha um is one of the Json specs or you know",
    "start": "2275359",
    "end": "2281319"
  },
  {
    "text": "supposed spec it's really a bunch of uh you know community members getting together to say hey this is how we like",
    "start": "2281319",
    "end": "2286680"
  },
  {
    "text": "to do links so there's how um I can't remember there's a there's a bunch of competing ways to do that to do this and",
    "start": "2286680",
    "end": "2294000"
  },
  {
    "text": "the one that we settled on that we feel is the best actually and I I'll give a reason why is that we simply have a link",
    "start": "2294000",
    "end": "2300880"
  },
  {
    "text": "be a complex object that has a single property called atref that reference the",
    "start": "2300880",
    "end": "2306720"
  },
  {
    "text": "that references the the fully qualified canonical URL and the interesting thing about this",
    "start": "2306720",
    "end": "2311800"
  },
  {
    "text": "is that if you look at it it's not complicated even if you don't know what links look like or other of these",
    "start": "2311800",
    "end": "2317520"
  },
  {
    "text": "specifications you can look at that and immediately know that oh I have to go somewhere else to get the directory um I have to go visit that",
    "start": "2317520",
    "end": "2325119"
  },
  {
    "text": "HF but what's kind of interesting about this is in the xlink specification there's this relationship attribute or R",
    "start": "2325119",
    "end": "2332040"
  },
  {
    "text": "you know a equals help you know the relationship indicates the type of link",
    "start": "2332040",
    "end": "2337760"
  },
  {
    "text": "or why that link link exists maybe to get some contextual information around why the link exists and the interesting",
    "start": "2337760",
    "end": "2344640"
  },
  {
    "text": "thing in Json is that's sort of implicit already by the fact that you have an attribute name directory so that the",
    "start": "2344640",
    "end": "2351720"
  },
  {
    "text": "actual Json attribute name itself can be used as the relation attribute that",
    "start": "2351720",
    "end": "2356880"
  },
  {
    "text": "might exist in the xlink OR w3c standard U for for XML for HTML so it's kind of",
    "start": "2356880",
    "end": "2363040"
  },
  {
    "text": "it's kind of cool in that now I have a relation and I have a URL this is fundamentally what what anchors present",
    "start": "2363040",
    "end": "2369400"
  },
  {
    "text": "um in HTML and so you can encapsulate everything um very trivially uh the",
    "start": "2369400",
    "end": "2374800"
  },
  {
    "text": "house specification for comparison by the way has a separate property in the Json document called links and it's an",
    "start": "2374800",
    "end": "2381400"
  },
  {
    "text": "array of links that have an actual ra attribute and an hre attribute and so there all the links for a particular",
    "start": "2381400",
    "end": "2388319"
  },
  {
    "text": "document would be collapsed into a single array property and we don't",
    "start": "2388319",
    "end": "2393480"
  },
  {
    "text": "really like that approach in in our opinion and you know a lot of the engineers I've talk to it requires you",
    "start": "2393480",
    "end": "2398720"
  },
  {
    "text": "to scan different parts of the document um it requires you to uh have to go and",
    "start": "2398720",
    "end": "2405119"
  },
  {
    "text": "switch context to understand where this information might go or might be might",
    "start": "2405119",
    "end": "2410359"
  },
  {
    "text": "be linked to um as opposed to uh being in line or being more contextual with",
    "start": "2410359",
    "end": "2415760"
  },
  {
    "text": "the data that's already there um and one of the really cool things about this particular technique is that it makes",
    "start": "2415760",
    "end": "2422319"
  },
  {
    "text": "things brilliant when it when we talk about resource expansion or entity expansion that I'm going to cover very briefly and I'll come back to this to",
    "start": "2422319",
    "end": "2428720"
  },
  {
    "text": "explain how that works collection resources can work the same way you can have in this case you",
    "start": "2428720",
    "end": "2435000"
  },
  {
    "start": "2431000",
    "end": "2431000"
  },
  {
    "text": "know show me all the groups that for that are assigned to that particular account and that's just a normal HF as",
    "start": "2435000",
    "end": "2440079"
  },
  {
    "text": "well you could provide additional metadata like a media type property that says not only is this a collection but",
    "start": "2440079",
    "end": "2446200"
  },
  {
    "text": "this collection contains elements that are of this type that would be really nice um and that would make things a",
    "start": "2446200",
    "end": "2452119"
  },
  {
    "text": "little easier for people to consume uh the S API or the rest API so okay let's talk about rest or reference",
    "start": "2452119",
    "end": "2458920"
  },
  {
    "text": "expansion this is also called entity expansion or link expansion um on the public internet you know all three",
    "start": "2458920",
    "end": "2466160"
  },
  {
    "text": "things mean the exact same thing so the the issue here is what if I",
    "start": "2466160",
    "end": "2471680"
  },
  {
    "text": "um what am I am I skipping through there we go so what if I want to get the account and its directory I want to",
    "start": "2471680",
    "end": "2477599"
  },
  {
    "text": "execute a single request and I want both of those resources to come back because I don't want to have to execute two",
    "start": "2477599",
    "end": "2483520"
  },
  {
    "text": "roundtrip requests it's it's inefficient and I already know the data that I wanted to display perhaps maybe I'm running a user interface and so you can",
    "start": "2483520",
    "end": "2491040"
  },
  {
    "text": "support this notion of an expand parameter that references um one or more",
    "start": "2491040",
    "end": "2497640"
  },
  {
    "text": "of the of the the the links or the attributes that should be expanded in line and returned or excuse me returned",
    "start": "2497640",
    "end": "2504960"
  },
  {
    "text": "back to the client and so in this case the client is saying yes I want the account but I also want you to give me",
    "start": "2504960",
    "end": "2511359"
  },
  {
    "text": "the directory fully expanded or materialized if you will in line so when I consume the dock I know that I have",
    "start": "2511359",
    "end": "2517040"
  },
  {
    "text": "both both both both resources and so the reason why this the linking technique",
    "start": "2517040",
    "end": "2522760"
  },
  {
    "text": "that I just mentioned is really elegant is that if you notice it's the exact same structure as what we looked at in",
    "start": "2522760",
    "end": "2529200"
  },
  {
    "text": "the link scenario the only difference is that it now has more properties and so the beauty of this approach is that the",
    "start": "2529200",
    "end": "2535200"
  },
  {
    "text": "client doesn't have to have special logic it doesn't need to say is this materialized yet or is it not",
    "start": "2535200",
    "end": "2540400"
  },
  {
    "text": "materialized or do I need to go to another part of the document to find a link a link array and then expand those",
    "start": "2540400",
    "end": "2545640"
  },
  {
    "text": "things as necessary and which one do I expand it's all self-contained in the",
    "start": "2545640",
    "end": "2551200"
  },
  {
    "text": "same location as as the uh the actual link was previously and it's very easy for a client to tell do you have a",
    "start": "2551200",
    "end": "2557440"
  },
  {
    "text": "single property if so you're a link if you have more than one property you've been materialized and I have all the data I need very simple coding wise for",
    "start": "2557440",
    "end": "2566119"
  },
  {
    "text": "clients to consume this information so anyway that's that's",
    "start": "2566119",
    "end": "2571599"
  },
  {
    "text": "entity expansion you can also do partial representations maybe if you do rate limiting or quota based limiting of rest",
    "start": "2571599",
    "end": "2578280"
  },
  {
    "text": "apis clients can maybe specify if if you want to support this you know I know",
    "start": "2578280",
    "end": "2583440"
  },
  {
    "text": "that there's this huge document but I only care about these four fields or three Fields because um these are the",
    "start": "2583440",
    "end": "2589040"
  },
  {
    "text": "only things I'm showing on my current UI screen that I'm building so this is a way that you can that allows you to",
    "start": "2589040",
    "end": "2594319"
  },
  {
    "text": "support customization for your clients if they want to you know engage or leverage this type of behavior um in",
    "start": "2594319",
    "end": "2601280"
  },
  {
    "text": "this example you see um the client wants an account but they only want the give",
    "start": "2601280",
    "end": "2607119"
  },
  {
    "text": "given name the surname and the directory's name to be returned in the response um and then you would just see",
    "start": "2607119",
    "end": "2613040"
  },
  {
    "text": "those those three things materialized in in the in the result whether or not you want to support this is totally up to",
    "start": "2613040",
    "end": "2618359"
  },
  {
    "text": "you um if if you have to support rate limiting or whatever it might be useful pagination how do you handle",
    "start": "2618359",
    "end": "2625079"
  },
  {
    "text": "pagination um there's a couple ways to do this the most common one seems to be",
    "start": "2625079",
    "end": "2630200"
  },
  {
    "text": "this notion of an offset and a limit parameter in most apis and so the idea is that I'm going to interact with an a",
    "start": "2630200",
    "end": "2636680"
  },
  {
    "text": "collection resource right we said SL applications was itself its own proper resource and so I will also specify",
    "start": "2636680",
    "end": "2643559"
  },
  {
    "text": "maybe an offset parameter and a limit parameter and what these two represent is offset is the position away from the",
    "start": "2643559",
    "end": "2650760"
  },
  {
    "text": "zero index of where you want the results to start and the limit",
    "start": "2650760",
    "end": "2656319"
  },
  {
    "text": "parameter restricts the number of results that are returned and so this says you know maybe if there's 25",
    "start": "2656319",
    "end": "2663400"
  },
  {
    "text": "elements per page I want to start consuming on the third page and give 25 records so I can show the third page so",
    "start": "2663400",
    "end": "2671160"
  },
  {
    "text": "this is great and you can support pagination techniques and the next result can say offset equals 75 and",
    "start": "2671160",
    "end": "2676640"
  },
  {
    "text": "limit equals 25 you can keep kind of consuming these different pages of the",
    "start": "2676640",
    "end": "2681920"
  },
  {
    "text": "collection um but it might also be nice in in in true hados you know fashion",
    "start": "2681920",
    "end": "2687920"
  },
  {
    "text": "where the client doesn't need to know how to calculate those or or build those URLs and and and do the math to figure",
    "start": "2687920",
    "end": "2694400"
  },
  {
    "text": "out what represents a page or not you can Prov provide um sort of nice convenient link um URLs so in this this",
    "start": "2694400",
    "end": "2703319"
  },
  {
    "text": "is an example of a collection resource of all the groups assigned to that particular account and as I said before",
    "start": "2703319",
    "end": "2709839"
  },
  {
    "text": "it's a first class citizen resource it's got its own properties offset limit and now it's have some additional properties",
    "start": "2709839",
    "end": "2715200"
  },
  {
    "text": "the first page there is no previous page because it's null the next page and maybe the last page in the collection um",
    "start": "2715200",
    "end": "2722200"
  },
  {
    "text": "oh and these are ellipses by the way just so I could save space they're not actual um dots or anything like that so",
    "start": "2722200",
    "end": "2728920"
  },
  {
    "text": "you would assume that these would be expanded and then finally the items array could either have a collection of",
    "start": "2728920",
    "end": "2734359"
  },
  {
    "text": "links that represent that the elements of that current page or they could be fully expanded you know to contain the",
    "start": "2734359",
    "end": "2740760"
  },
  {
    "text": "actual elements in the collection so that's why we call this a collection resource because it does have its own",
    "start": "2740760",
    "end": "2746839"
  },
  {
    "text": "properties in addition to the items that it contains okay so moving on many to many",
    "start": "2746839",
    "end": "2753880"
  },
  {
    "text": "I've got an account and it can have many groups but I can also have a group with many accounts so how do I represent this",
    "start": "2753880",
    "end": "2760559"
  },
  {
    "start": "2756000",
    "end": "2756000"
  },
  {
    "text": "many to many relationship in in a restful architecture and the idea is that again we want to work with",
    "start": "2760559",
    "end": "2766559"
  },
  {
    "text": "resources so if you create a resource that represents this mapping like in our case a group membership now you actually",
    "start": "2766559",
    "end": "2773400"
  },
  {
    "text": "have an entity that that represents these two individual things and so like every other resource it itself has its",
    "start": "2773400",
    "end": "2780040"
  },
  {
    "text": "own location its own fully qualified href um and then it's got links or at",
    "start": "2780040",
    "end": "2785079"
  },
  {
    "text": "least references to the account and the the group that for which the the relationship is",
    "start": "2785079",
    "end": "2790280"
  },
  {
    "text": "maintained and the reason why we've seen a lot of other people do this and we also did this in our API and we feel",
    "start": "2790280",
    "end": "2796440"
  },
  {
    "text": "it's a best practice is that the relationship itself might have in very",
    "start": "2796440",
    "end": "2801720"
  },
  {
    "text": "useful information depending on your your use cases so maybe I wanted to in",
    "start": "2801720",
    "end": "2807079"
  },
  {
    "text": "addition to these two links also store information like who created the association at what time was it created",
    "start": "2807079",
    "end": "2813720"
  },
  {
    "text": "um you know does it expire there's also sorts of other kind of metadata or meta information about the association itself",
    "start": "2813720",
    "end": "2821000"
  },
  {
    "text": "that you can Encompass or encapsulate in a resource to represent that information and so and also additionally because it",
    "start": "2821000",
    "end": "2828119"
  },
  {
    "text": "itself has its own identifying URL if you wanted to delete that Association you could execute an HTTP delete to to",
    "start": "2828119",
    "end": "2835160"
  },
  {
    "text": "that resources endpoint and it would delete just the relationship it doesn't delete the account or the group just the",
    "start": "2835160",
    "end": "2840880"
  },
  {
    "text": "connection between the two so it's very flexible very powerful way of associating things by representing them",
    "start": "2840880",
    "end": "2846960"
  },
  {
    "text": "as their own resources um sometimes I've gotten",
    "start": "2846960",
    "end": "2853319"
  },
  {
    "text": "questions you know what if I don't want the actual meta link res the the resource um relationship objects",
    "start": "2853319",
    "end": "2860280"
  },
  {
    "text": "themselves what if I just want the groups I don't care about the actual membership entities and so there you can",
    "start": "2860280",
    "end": "2866480"
  },
  {
    "text": "actually create two different properties one is the groups the other one is the actual group memberships and the client can choose what they want to consume",
    "start": "2866480",
    "end": "2872800"
  },
  {
    "text": "depending on their needs maybe they don't care about the metadata between the associations and they just want the",
    "start": "2872800",
    "end": "2877839"
  },
  {
    "text": "groups um errors how do I how do I represent an error something goes wrong when I execute a request the idea here",
    "start": "2877839",
    "end": "2884040"
  },
  {
    "text": "is that we want to be as descriptive as possible right we want to give the developer as much information as we can",
    "start": "2884040",
    "end": "2890079"
  },
  {
    "text": "so that they know how to debug maybe you know selfservice so they can take care of the problem and be on their way and",
    "start": "2890079",
    "end": "2895440"
  },
  {
    "text": "back on a developing application nobody likes having to wait for answers from a support team so they can move on with",
    "start": "2895440",
    "end": "2900960"
  },
  {
    "text": "the with their day so developers your customers we want to make things very very clean and easy to use for them so",
    "start": "2900960",
    "end": "2906839"
  },
  {
    "text": "um I got to give a shout out to the guys at twilio they kind of spearheaded this approach with their API and we've seen",
    "start": "2906839",
    "end": "2912160"
  },
  {
    "text": "other companies adopt it stormpath has also adopted it um but the idea here is that we're showing an error response",
    "start": "2912160",
    "end": "2918000"
  },
  {
    "text": "that contains a bit of information um in this case uh it's a 409 conflict like something can't be something cannot",
    "start": "2918000",
    "end": "2924559"
  },
  {
    "text": "occur on the server because something else already exists and so in this example we're returning a a resource",
    "start": "2924559",
    "end": "2930799"
  },
  {
    "text": "with the HP status code included within it and the reason why we do that is so that the client doesn't have to go to",
    "start": "2930799",
    "end": "2936319"
  },
  {
    "text": "two different places to get this information yes it'll be in the HTP headers but they can they can get",
    "start": "2936319",
    "end": "2941400"
  },
  {
    "text": "everything they need to just in the in the response body if they want to um we",
    "start": "2941400",
    "end": "2946559"
  },
  {
    "text": "have an internal code that is specific to storm path's API and the reason why we do that is because the HTP spec only",
    "start": "2946559",
    "end": "2954799"
  },
  {
    "text": "has I don't know something like 24 25 error codes from the 4xx range to the",
    "start": "2954799",
    "end": "2961960"
  },
  {
    "text": "5xx range and if you think about it that's not a whole lot of codes to accurately represent error conditions or",
    "start": "2961960",
    "end": "2968839"
  },
  {
    "text": "reasons why something failed so in addition to the HTTP status code we also provide an application specific code",
    "start": "2968839",
    "end": "2974559"
  },
  {
    "text": "that gives them a lot more information um of why that thing why the request failed so that they can uh go resolve",
    "start": "2974559",
    "end": "2981520"
  },
  {
    "text": "that problem themselves um property in this case represents the particular property that caused the problem so they",
    "start": "2981520",
    "end": "2987559"
  },
  {
    "text": "know that uh when I submitted this uh this new directory it's the property the name property is the reason why the",
    "start": "2987559",
    "end": "2993839"
  },
  {
    "text": "request uh failed and the message property or attribute is pretty",
    "start": "2993839",
    "end": "2999359"
  },
  {
    "text": "interesting it is it represents something that you can directly convey to your customer's application end user",
    "start": "2999359",
    "end": "3006280"
  },
  {
    "text": "so what I mean by that is if your devel if your customer is a developer and they call you this message they can take this",
    "start": "3006280",
    "end": "3012319"
  },
  {
    "text": "and immediately relay it like in a user interface to their own end user and that's really nice from a usability",
    "start": "3012319",
    "end": "3017960"
  },
  {
    "text": "perspective for your customers because that's just that much less work that they have to do in order to show their",
    "start": "3017960",
    "end": "3024040"
  },
  {
    "text": "users some meaningful information so by this if they just take that and relay",
    "start": "3024040",
    "end": "3029160"
  },
  {
    "text": "it to the user they don't have to translate this message or take this very developer specific message and convert",
    "start": "3029160",
    "end": "3034799"
  },
  {
    "text": "it to something that the user can understand you can you can give them meaningful information right away and",
    "start": "3034799",
    "end": "3040480"
  },
  {
    "text": "the developer message of course is something that that the developer customer would actually understand maybe",
    "start": "3040480",
    "end": "3045799"
  },
  {
    "text": "it's information that tells them how to fix that particular problem that's not relevant to the end user and you can provide a more info URL",
    "start": "3045799",
    "end": "3052880"
  },
  {
    "text": "this is nice because it's a normal HTML based web page and you can give them all sorts of good things links to support",
    "start": "3052880",
    "end": "3059079"
  },
  {
    "text": "forums and knowledge bases and you know help links and all this other good stuff um to give them more contextual",
    "start": "3059079",
    "end": "3065760"
  },
  {
    "text": "information about how to solve their problem uh I got a couple minutes left let me run through security really quick obviously we're a security company so I",
    "start": "3065760",
    "end": "3071839"
  },
  {
    "text": "want to I want to cover it um avoid sessions if you can you know rest",
    "start": "3071839",
    "end": "3076880"
  },
  {
    "text": "architectures are supposed to be stateless on purpose to help with performance and scalability so most",
    "start": "3076880",
    "end": "3083040"
  },
  {
    "text": "people authenticate every request that comes into the server and they do that with usually with with various different",
    "start": "3083040",
    "end": "3088880"
  },
  {
    "text": "standards um you should authorize um actions or behavior based on the content",
    "start": "3088880",
    "end": "3094760"
  },
  {
    "text": "in the resource not on the URL URLs can change right you can have redirects you can put them on different locations but",
    "start": "3094760",
    "end": "3101559"
  },
  {
    "text": "if you actually say that oh sorry you're not allowed to execute this Behavior because the specific account you're referencing is you know not accessible",
    "start": "3101559",
    "end": "3108520"
  },
  {
    "text": "to you that's a much cleaner Security check than just saying you can't go to slash accounts um because it's",
    "start": "3108520",
    "end": "3115040"
  },
  {
    "text": "contextual it's it's security it's based on real data not on how you access that",
    "start": "3115040",
    "end": "3120400"
  },
  {
    "text": "data that's a really important distinction for security um we recommend that you use an existing protocol so uh most rest apis",
    "start": "3120400",
    "end": "3128799"
  },
  {
    "text": "these days will use o 1.0a O2 um or even HTTP basic but only over SSL um it is",
    "start": "3128799",
    "end": "3136040"
  },
  {
    "text": "never secure it is never a good idea to use HTTP basic over plain HTP connections and that includes internet",
    "start": "3136040",
    "end": "3143079"
  },
  {
    "text": "corporate environments because these thing this data can be parsed via log",
    "start": "3143079",
    "end": "3148359"
  },
  {
    "text": "messages and maybe there's errors and they put the data in the logs that information then is now captured in the",
    "start": "3148359",
    "end": "3154000"
  },
  {
    "text": "logs um and it could be interpreted or intercepted so even in corporate environments always make sure you use",
    "start": "3154000",
    "end": "3159760"
  },
  {
    "text": "SSL to trans transmit this stuff um only use custom authentication schemes if you",
    "start": "3159760",
    "end": "3165799"
  },
  {
    "text": "really really really really know what you're doing um and only if you provide your own client SDK so as stormpath",
    "start": "3165799",
    "end": "3173040"
  },
  {
    "text": "we're crypto people we have our own custom uh Authentication Protocol it's",
    "start": "3173040",
    "end": "3178160"
  },
  {
    "text": "very similar in a lot of ways to O 1.0a but it's actually more secure because it guarantees authenticity of the request",
    "start": "3178160",
    "end": "3184319"
  },
  {
    "text": "payload which o1a does not unless it's a a form post so there are reasons why we",
    "start": "3184319",
    "end": "3190920"
  },
  {
    "text": "did that because the data the data is very secure and sensitive in nature um but we know how to design these kind of",
    "start": "3190920",
    "end": "3197240"
  },
  {
    "text": "algorithms we have crypto people on staff if you're not that comfortable with these things us use o 1.0a O2 is um",
    "start": "3197240",
    "end": "3206119"
  },
  {
    "text": "is Al a good approach it's not quite as secure as o 1.0a I can explain that to",
    "start": "3206119",
    "end": "3211440"
  },
  {
    "text": "you guys at if you want at the end of the presentation I'll give you all the breakdowns of why um oh and finally we",
    "start": "3211440",
    "end": "3216880"
  },
  {
    "text": "recommend that you use API keys to give to your customers that access your API and not usernames and passwords there's",
    "start": "3216880",
    "end": "3223920"
  },
  {
    "text": "a whole lot of security reasons you know around entropy and the complexity of password keys and and some really good",
    "start": "3223920",
    "end": "3229720"
  },
  {
    "text": "techniques or good reasons of why that's that's uh from a security perspective beneficial But ultimately the the most",
    "start": "3229720",
    "end": "3237520"
  },
  {
    "text": "kind of obvious one is that if your customer uses their username and password to configure their rest client",
    "start": "3237520",
    "end": "3242599"
  },
  {
    "text": "to talk to you and now they go into the web the user interface and they change their password now all their rest",
    "start": "3242599",
    "end": "3247720"
  },
  {
    "text": "clients break so you don't want that to happen that would be a really really bad side effect so use API keys to give to",
    "start": "3247720",
    "end": "3254760"
  },
  {
    "text": "your customer so they can authenticate with your rest API um uh very briefly",
    "start": "3254760",
    "end": "3260640"
  },
  {
    "text": "401 403 are um codes that mean unauthorized or rather",
    "start": "3260640",
    "end": "3266920"
  },
  {
    "text": "authenticated so 401 means you need to give me some valid information so I know who you are and a 403 is I know who you",
    "start": "3266920",
    "end": "3274559"
  },
  {
    "text": "are you've proven to me that you are who you say you are but you're still not allowed to access this particular",
    "start": "3274559",
    "end": "3279680"
  },
  {
    "text": "resource so make sure that when you return these status codes you get them correct um HP authentication schemes we",
    "start": "3279680",
    "end": "3287880"
  },
  {
    "text": "don't really have time to talk about that now I can talk to you guys uh if you want to come up afterwards and I can",
    "start": "3287880",
    "end": "3293000"
  },
  {
    "start": "3288000",
    "end": "3288000"
  },
  {
    "text": "talk about how this stuff works um IDs are opaque they should be the HF you",
    "start": "3293000",
    "end": "3299000"
  },
  {
    "text": "could support method overrides um maybe Legacy clients don't know how to interact with anything other than post",
    "start": "3299000",
    "end": "3305319"
  },
  {
    "text": "and get methods so if via a post Only You supported this underscore method equals delete or underscore method",
    "start": "3305319",
    "end": "3311119"
  },
  {
    "text": "equals put you can obtain or achieve the same results within the server but it's important that it has to be over post um",
    "start": "3311119",
    "end": "3318480"
  },
  {
    "text": "because post means it's a server processing directive there's no there should not be any caching of this um",
    "start": "3318480",
    "end": "3323559"
  },
  {
    "text": "caching and concurrency control this is important for optimistic blocking there is this notion of an eag header that",
    "start": "3323559",
    "end": "3329760"
  },
  {
    "text": "essentially represents a a version time or version stamp of that particular",
    "start": "3329760",
    "end": "3334960"
  },
  {
    "text": "resource and the client can then later request hey do you has anything changed for this particular resource and the",
    "start": "3334960",
    "end": "3341280"
  },
  {
    "text": "server can respond with a 304 and said nope the the the version of that particular resource has not changed",
    "start": "3341280",
    "end": "3347400"
  },
  {
    "text": "you're good you don't need to execute the full request this is really powerful and used by HP caching servers and this",
    "start": "3347400",
    "end": "3353880"
  },
  {
    "text": "is kind of what makes a lot of the the web stuff faster because they can leverage these caching",
    "start": "3353880",
    "end": "3360640"
  },
  {
    "text": "capabilities um almost done maintenance um if you need to maintain and change",
    "start": "3360640",
    "end": "3365880"
  },
  {
    "text": "yourp over time use HTTP redirects maybe you do want to change the url for a",
    "start": "3365880",
    "end": "3371160"
  },
  {
    "text": "particular resource and that will that's okay as long as the data format itself",
    "start": "3371160",
    "end": "3376200"
  },
  {
    "text": "doesn't change clients should be expected to know how to process 302 redirects and then access the new",
    "start": "3376200",
    "end": "3381720"
  },
  {
    "text": "resource location so if you need to do some API maintenance or change the location of worth reside that's okay",
    "start": "3381720",
    "end": "3387680"
  },
  {
    "text": "just make sure you don't lose that link so you can redirect your",
    "start": "3387680",
    "end": "3392760"
  },
  {
    "text": "customers that's everything okay thanks for your time take care enjoy the rest of your uh evening",
    "start": "3392760",
    "end": "3400920"
  },
  {
    "text": "[Music]",
    "start": "3401870",
    "end": "3404949"
  }
]