[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "can you hear me in the back okay y all right",
    "start": "1040",
    "end": "6480"
  },
  {
    "text": "awesome well good afternoon thank you for hanging in here till the end I'm the only thing between you and a drink right",
    "start": "6480",
    "end": "12519"
  },
  {
    "text": "now and I'm very aware of that uh and thank you also for venturing your way down to the basement this is a bit of an",
    "start": "12519",
    "end": "18359"
  },
  {
    "text": "odd room I wasn't sure if anyone would show up given the date and the weirdness",
    "start": "18359",
    "end": "23560"
  },
  {
    "text": "of the space but thank you for coming I'm Sarah may I am the chief",
    "start": "23560",
    "end": "29279"
  },
  {
    "text": "consultant at Dev mind I'm also the founder of railsbridge and a director of Ruby Central I live here this picture",
    "start": "29279",
    "end": "36960"
  },
  {
    "text": "was taken reasonably close to my apartment in the city um which looks really awesome Until you realize that",
    "start": "36960",
    "end": "43840"
  },
  {
    "text": "the other 364 days of the year a picture taken from that spot looks like",
    "start": "43840",
    "end": "49160"
  },
  {
    "text": "this so that was our one nice day thank you very much I'm a developer I do a lot of Ruby",
    "start": "49160",
    "end": "56280"
  },
  {
    "start": "50000",
    "end": "135000"
  },
  {
    "text": "and JavaScript I tend to work with teams that are manag in large code bases uh",
    "start": "56280",
    "end": "62039"
  },
  {
    "text": "that have become unwieldy and hard to change sorry there we go uh this is a common problem right now",
    "start": "62039",
    "end": "68439"
  },
  {
    "text": "among all types of developers I hear it from the Ruby and JavaScript folks but I've also heard it from the net people and the Java people and the PHP people",
    "start": "68439",
    "end": "74560"
  },
  {
    "text": "and the CSS people and the python people it's not a new problem in our industry necessarily IBM was having this problem",
    "start": "74560",
    "end": "80600"
  },
  {
    "text": "in the 70s there's lots of vaguely amusing uh academic literature you can read about that but it's interesting",
    "start": "80600",
    "end": "87640"
  },
  {
    "text": "that this is again at the Forefront of our colle Consciousness right now so one theory is that code is easier",
    "start": "87640",
    "end": "94759"
  },
  {
    "text": "to write than it used to be right there was an explosion of dynamic languages in the last 10 years but also new",
    "start": "94759",
    "end": "100000"
  },
  {
    "text": "Frameworks in the compiled languages uh usable functional languages all this has",
    "start": "100000",
    "end": "105360"
  },
  {
    "text": "made it easier to generate code at volume you can achieve a large unwieldy code base faster than ever",
    "start": "105360",
    "end": "111960"
  },
  {
    "text": "before and perhaps even when you're a small company right you don't have to be the size of IBM to have IBM's",
    "start": "111960",
    "end": "118399"
  },
  {
    "text": "problems and a big unwieldy code base that's hard to change doesn't necessarily mean that the teams failed",
    "start": "118399",
    "end": "123799"
  },
  {
    "text": "at planning right code that's hard to change is built up technical debt meaning they took faster feature",
    "start": "123799",
    "end": "129679"
  },
  {
    "text": "development today at the expense of code that's harder to work with later and some teams make that gamble",
    "start": "129679",
    "end": "137760"
  },
  {
    "start": "135000",
    "end": "205000"
  },
  {
    "text": "deliberately as a strategy to move faster particularly in the early days of a company competitors that put",
    "start": "137760",
    "end": "144480"
  },
  {
    "text": "structures in place to support a large codebase in the future couldn't iterate as quickly so sometimes",
    "start": "144480",
    "end": "150800"
  },
  {
    "text": "technical debt buys your continued existence as a company and sometimes not planning ahead",
    "start": "150800",
    "end": "157879"
  },
  {
    "text": "is the only way to survive long enough to wish you had so we should all be so lucky to have these problems but once",
    "start": "157879",
    "end": "164200"
  },
  {
    "text": "you've survived then you have to do something because working in these code bases really isn't a whole lot of fun",
    "start": "164200",
    "end": "169440"
  },
  {
    "text": "the vast majority of developers though do work in code bases like this we're not creating new repos all the time",
    "start": "169440",
    "end": "176560"
  },
  {
    "text": "we're working in code bases that have been around for a while we need to make working in these fun if",
    "start": "176560",
    "end": "183319"
  },
  {
    "text": "possible so some teams attempt this maneuver with microservices you may have heard that buzzword and that rant is",
    "start": "183319",
    "end": "189760"
  },
  {
    "text": "another talk entirely uh but I had to put it in two slides I will say one thing which is",
    "start": "189760",
    "end": "196319"
  },
  {
    "text": "that a lot of people that do microservices end up with something like",
    "start": "196319",
    "end": "201239"
  },
  {
    "text": "this this is Aaron Patterson he is a core contributor to rails and Ruby and he says to be honest the main reason I",
    "start": "204760",
    "end": "210920"
  },
  {
    "start": "205000",
    "end": "278000"
  },
  {
    "text": "like microsurfaces is that I feel like my method calls are too fast and I would prefer to throw in some",
    "start": "210920",
    "end": "217120"
  },
  {
    "text": "latency turns out carving Services out of a monolith and carving objects out of a large class with the same skill and if",
    "start": "217120",
    "end": "224480"
  },
  {
    "text": "you haven't been doing good object design in your main code base then you don't know yet what large scale",
    "start": "224480",
    "end": "229640"
  },
  {
    "text": "abstractions you need you have a guess but you'll be wrong that's part of the deal when",
    "start": "229640",
    "end": "236200"
  },
  {
    "text": "you're wrong inside of a single code base all you have to do is adjust object boundaries when you're wrong in a Services cluster",
    "start": "236200",
    "end": "241680"
  },
  {
    "text": "you have to adjust service boundaries which is a much more expensive way to learn this",
    "start": "241680",
    "end": "247079"
  },
  {
    "text": "skill so before making microsurfaces or doing a rewrite you have to get better at object oriented design and I don't",
    "start": "247079",
    "end": "253200"
  },
  {
    "text": "mean the top down figuring out everything in advance type design anyone can draw one of those",
    "start": "253200",
    "end": "258720"
  },
  {
    "text": "diagrams and it's usually a waste of time instead you need to learn how to refactor your way into good design and",
    "start": "258720",
    "end": "265240"
  },
  {
    "text": "if you don't develop that skill you'll just end up with the same mess you had before in different pack",
    "start": "265240",
    "end": "271600"
  },
  {
    "start": "278000",
    "end": "535000"
  },
  {
    "text": "so Aaron the previous tweet is actually serious well as serious as Aaron ever gets but this is a joke a joke account",
    "start": "278639",
    "end": "285280"
  },
  {
    "text": "um that nevertheless tweets things that are often more useful than actual thought",
    "start": "285280",
    "end": "290880"
  },
  {
    "text": "leaders so refactoring your way to good design is not as shiny as doing microservices but from a cost",
    "start": "290880",
    "end": "296120"
  },
  {
    "text": "perspective it's much more responsible plus you can still use find Place super",
    "start": "296120",
    "end": "301280"
  },
  {
    "text": "awesome so not coincidentally I suppose we've been seeing a Resurgence of interest in objectoriented programming",
    "start": "301280",
    "end": "307440"
  },
  {
    "text": "design in communities that weren't that interested a few years ago including the dynamic language communities there's now",
    "start": "307440",
    "end": "313400"
  },
  {
    "text": "lots of books blog posts conference talks like this one about software",
    "start": "313400",
    "end": "318520"
  },
  {
    "text": "design this is the best of the modern takes on object design Sandy Mets wrote this fantastic book uh on understanding",
    "start": "318520",
    "end": "325479"
  },
  {
    "text": "objects that I highly recommend you read even if you're not a ruby developer and do not intend to be",
    "start": "325479",
    "end": "331039"
  },
  {
    "text": "I love this book and all the blog posts and all the conference talks but for a long",
    "start": "331039",
    "end": "337840"
  },
  {
    "text": "time I thought about a problem which is that what I do in my client work doesn't really look like anything in",
    "start": "337840",
    "end": "345120"
  },
  {
    "text": "here sy's book uses example code being written from scratch to show you how to put the right boundaries around your",
    "start": "345120",
    "end": "350639"
  },
  {
    "text": "objects and going into a big large monolithic messy code base where no one",
    "start": "350639",
    "end": "356720"
  },
  {
    "text": "heed s's advice and moving things around doesn't seem a lot like that at first it",
    "start": "356720",
    "end": "362360"
  },
  {
    "text": "doesn't seem like objectoriented design for a long time I called it",
    "start": "362360",
    "end": "367560"
  },
  {
    "text": "refactoring turns out though software design and refactoring are not separate ideas so I know it seems a little odd",
    "start": "367560",
    "end": "374199"
  },
  {
    "text": "let's define some terms starting with software design now I'm not talking about architecture or systems just",
    "start": "374199",
    "end": "379599"
  },
  {
    "text": "within a single code base software design is really nothing more than deciding how code is",
    "start": "379599",
    "end": "386479"
  },
  {
    "text": "arranged many people think that software design is something completely separate from programming but in reality when",
    "start": "386479",
    "end": "392039"
  },
  {
    "text": "you're programming even if you're not consciously making any decisions you're still doing design every time you put a function in",
    "start": "392039",
    "end": "398479"
  },
  {
    "text": "this object and not that one you're doing design you can try to do it ahead of time some people do but the vast",
    "start": "398479",
    "end": "404639"
  },
  {
    "text": "majority of software design that's done by developers in our industry is in line and just like programming you'll be",
    "start": "404639",
    "end": "411479"
  },
  {
    "text": "bad at it at first but just like programming you get better at software design the more you practice so let's be a little more",
    "start": "411479",
    "end": "418240"
  },
  {
    "text": "specific and talk about object oriented design which is I'm going to give you a",
    "start": "418240",
    "end": "423360"
  },
  {
    "text": "somewhat unsatisfying answer it is deciding how the code will be arranged grouping related functionality in",
    "start": "423360",
    "end": "429199"
  },
  {
    "text": "objects this does not sound anything like the Wikipedia definition of object oriented design which is this planning a",
    "start": "429199",
    "end": "435720"
  },
  {
    "text": "system of interacting objects for the purpose of solving a software",
    "start": "435720",
    "end": "440960"
  },
  {
    "text": "problem there's nothing in my definition about planning and that's on",
    "start": "440960",
    "end": "448319"
  },
  {
    "text": "purpose I don't think of software design as a planning activity it's something we do in line in the process of programming",
    "start": "448319",
    "end": "454240"
  },
  {
    "text": "now this is not as you might have guessed a common definition of object oriented design but it's the difference",
    "start": "454240",
    "end": "459479"
  },
  {
    "text": "between how it's taught especially in Academia and how it actually works on the",
    "start": "459479",
    "end": "465720"
  },
  {
    "text": "ground so let's talk a little bit about what object Orient design is not object Orient design is not a language feature",
    "start": "465720",
    "end": "473360"
  },
  {
    "text": "it's a way of thinking you can write object-oriented code in CSS you can write it in C or in Java",
    "start": "473360",
    "end": "479479"
  },
  {
    "text": "JavaScript or in Java or in C languages that have explicit syntax support for",
    "start": "479479",
    "end": "484840"
  },
  {
    "text": "objects are what you'll hear people call objectoriented languages but this just means languages in which it is more convenient to make objects than other",
    "start": "484840",
    "end": "491599"
  },
  {
    "text": "languages uh that's too long for a Wikipedia page title so objectoriented languages it is objectoriented design is",
    "start": "491599",
    "end": "497960"
  },
  {
    "text": "a way of thinking about code arrangement in some languages it's easier to express than others but it's possible",
    "start": "497960",
    "end": "505280"
  },
  {
    "text": "anywhere you can buy me a beer and ask me about object design in Haso sometime",
    "start": "505280",
    "end": "510599"
  },
  {
    "text": "objectoriented code is not a destination it is a means to an end you don't write",
    "start": "510599",
    "end": "516320"
  },
  {
    "text": "object-oriented code for its own sake or because it's somehow morally or professionally better objectory design is not",
    "start": "516320",
    "end": "523320"
  },
  {
    "text": "inherently better than any other way of arranging code is a means a strategy that we use mindfully to move us towards",
    "start": "523320",
    "end": "529880"
  },
  {
    "text": "some larger goal and for most of us that goal is ease of change we build software for people who",
    "start": "529880",
    "end": "536959"
  },
  {
    "start": "535000",
    "end": "830000"
  },
  {
    "text": "don't really know what they want they imagine one thing then they change their mind when they actually see it in action",
    "start": "536959",
    "end": "544120"
  },
  {
    "text": "or the business shifts focused or a key person is replaced or it's Tuesday right the only constant in software development is that the end goal shifts",
    "start": "544120",
    "end": "551040"
  },
  {
    "text": "as we build it and it wouldn't do us any good to wait because the act of building is what causes it to",
    "start": "551040",
    "end": "557279"
  },
  {
    "text": "shift and in theory object Orient design makes it easier to respond to shifting",
    "start": "557279",
    "end": "563440"
  },
  {
    "text": "requirements and I can say that Sandy can say that but I've been on projects and I'll",
    "start": "563440",
    "end": "568760"
  },
  {
    "text": "bet most you in this room have been on projects where code was parceled out into objects and it made it harder to",
    "start": "568760",
    "end": "574399"
  },
  {
    "text": "understand rather than easier how does that happen does that mean theti concept of",
    "start": "574399",
    "end": "581640"
  },
  {
    "text": "objectoriented design is a sham to figure out how that happens we need to take a step back and look at our",
    "start": "581640",
    "end": "588279"
  },
  {
    "text": "goals that we have when we're designing software there are two useful axes to consider when we're looking at different",
    "start": "588279",
    "end": "593560"
  },
  {
    "text": "ways to design software on the bottom we have the cost of understanding the big picture of your code low or high how are",
    "start": "593560",
    "end": "599160"
  },
  {
    "text": "how hard is it to figure out what's going on and on the side we have the cost of changing the code low or high",
    "start": "599160",
    "end": "604800"
  },
  {
    "text": "and every choice about how you arrange code every choice about software design goes somewhere in one of these quadrants so let's place a few dots",
    "start": "604800",
    "end": "611200"
  },
  {
    "text": "let's start with writing long procedures someone does a get on SL calendar to see their calendar for the month and a procedure is executed a list of",
    "start": "611200",
    "end": "617120"
  },
  {
    "text": "instructions determines the date range fetches events within that range from the data store draws the right shaped",
    "start": "617120",
    "end": "622800"
  },
  {
    "text": "grid puts the events on the grid Returns the page to the user it's pretty easy to understand what",
    "start": "622800",
    "end": "628720"
  },
  {
    "text": "happens in a procedure cost of understanding is low everything that happens is right there",
    "start": "628720",
    "end": "634760"
  },
  {
    "text": "in an ordered list and the tradeoff in a large project with a lot of long procedures is that",
    "start": "634760",
    "end": "641200"
  },
  {
    "text": "the cost of change is high the biggest Devil in a code base like that is duplication right which",
    "start": "641200",
    "end": "648000"
  },
  {
    "text": "forces you to change multiple places in the code to make a single logical change so procedures belong up here in the",
    "start": "648000",
    "end": "653120"
  },
  {
    "text": "upper left so some projects have been burned by the high cost of procedures",
    "start": "653120",
    "end": "660120"
  },
  {
    "text": "go completely in the other direction everything's a tiny object that doesn't do much when you do that get on/ calendar a route receiver picks up the",
    "start": "660120",
    "end": "666800"
  },
  {
    "text": "call which then creates a route resolver to look at the URL figures out that it needs a calendar route resolver which it gets from the calendar route resolver",
    "start": "666800",
    "end": "673120"
  },
  {
    "text": "Factory and then the calendar route resolver looks at what you're requesting initiates a get calendar index object",
    "start": "673120",
    "end": "678240"
  },
  {
    "text": "which then sends your prams to a calendar pram manager and so forth so the sequence of",
    "start": "678240",
    "end": "685279"
  },
  {
    "text": "events isn't written down anywhere in the code you just have to trace through it to figure out what's going on little",
    "start": "685279",
    "end": "691079"
  },
  {
    "text": "pieces of functionality are spread across many",
    "start": "691079",
    "end": "696040"
  },
  {
    "text": "classes a system like this is harder to understand than a",
    "start": "696120",
    "end": "702040"
  },
  {
    "text": "procedure the cost of understanding is high a list of instructions will always be easier to understand than a set of",
    "start": "702040",
    "end": "709279"
  },
  {
    "text": "objects however once you understand the system the cost of change is",
    "start": "709279",
    "end": "714800"
  },
  {
    "text": "low assuming you've got the right abstractions which is the notion we'll deal with in a moment it's relatively easy to take for example one pram",
    "start": "714800",
    "end": "720800"
  },
  {
    "text": "manager out and swap it another so a set of small objects goes down here in the lower",
    "start": "720800",
    "end": "728040"
  },
  {
    "text": "right so let's talk now about code that has both a high cost of understanding and a high cost of",
    "start": "728040",
    "end": "734560"
  },
  {
    "text": "change worst of Both Worlds there are two types of code bases",
    "start": "734560",
    "end": "740160"
  },
  {
    "text": "here both of which are distressingly common and the first is a codebase made",
    "start": "740160",
    "end": "745519"
  },
  {
    "text": "up of really big objects maybe the framework ated in initial set of classes and all the",
    "start": "745519",
    "end": "750639"
  },
  {
    "text": "behavior just sort of acced onto them since then and the huge object all these seem to be ones that are core your",
    "start": "750639",
    "end": "756480"
  },
  {
    "text": "application right they change with almost every commit changes go wrong easily because all that functionality in one place means unintentional",
    "start": "756480",
    "end": "762639"
  },
  {
    "text": "interference is almost a given and the other type of code base you find up here is small objects gone",
    "start": "762639",
    "end": "770079"
  },
  {
    "text": "wrong which is what happens when you try to break down a big class or extract procedures but you don't get the object",
    "start": "770079",
    "end": "775480"
  },
  {
    "text": "boundaries quite right then it's both hard hard to understand because it's objects and hard",
    "start": "775480",
    "end": "781040"
  },
  {
    "text": "to change because for one logical change you still have to make changes in a bunch of different places so the wrong",
    "start": "781040",
    "end": "786160"
  },
  {
    "text": "set of objects really is the worst case scenario really big objects are bad but they're not that bad the wrong set of",
    "start": "786160",
    "end": "791240"
  },
  {
    "text": "objects is worse so there's two questions here the first is how can we get",
    "start": "791240",
    "end": "796720"
  },
  {
    "text": "here can we get here is this the perfect solution that doesn't exist and the second question is how do we move our",
    "start": "796720",
    "end": "801800"
  },
  {
    "text": "big lumbering code bases out of the upper right and into anywhere",
    "start": "801800",
    "end": "807160"
  },
  {
    "text": "else doesn't really matter where we go any direction will be an improvement from here but usually when code bases",
    "start": "807160",
    "end": "812519"
  },
  {
    "text": "are this size reducing the cost of change is worth increasing the cost of comprehension so people want to take it down to a set of small objects and this",
    "start": "812519",
    "end": "818880"
  },
  {
    "text": "is where they start reading about things like solid and design patterns hoping they can figure out how to make this",
    "start": "818880",
    "end": "824160"
  },
  {
    "text": "move so let's look at solid for a moment and then we'll take a brief look at design",
    "start": "824160",
    "end": "829360"
  },
  {
    "text": "patterns solid sounds super awesome right who doesn't want solid code or to",
    "start": "829360",
    "end": "835880"
  },
  {
    "text": "be a solid programmer right there are very there are many many objectoriented principles in the world Academia has",
    "start": "835880",
    "end": "843199"
  },
  {
    "text": "been studying object orientation for decades however academics tend not to deal in volume of code so most of the",
    "start": "843199",
    "end": "850920"
  },
  {
    "text": "principles are highly academic in the 90s Robert Martin took the five principles that seemed to him to be the",
    "start": "850920",
    "end": "856320"
  },
  {
    "text": "most relevant to working software developers and he put them into This Acronym so let's talk about what each",
    "start": "856320",
    "end": "863600"
  },
  {
    "text": "letter means we'll be filling in this chart as we go we have three columns name of the principal summary of what it",
    "start": "863600",
    "end": "869480"
  },
  {
    "text": "means not what it says but what it means and then a measure of how useful it will be in everyday development start with s single",
    "start": "869480",
    "end": "877600"
  },
  {
    "text": "responsibility principle which is usually stated as a class should have one responsibility or to put it in another",
    "start": "877600",
    "end": "883759"
  },
  {
    "text": "way one reason to change this was first articulated by Rebecca wors sprock in the 80s and it's",
    "start": "883759",
    "end": "889920"
  },
  {
    "text": "kind of a fancy way of saying smaller things are easier to understand and harder to mess up than larger",
    "start": "889920",
    "end": "895440"
  },
  {
    "text": "ones as far as utility goes it's sort of in the middle the difficulty here hinges on the definition of",
    "start": "895440",
    "end": "902320"
  },
  {
    "text": "responsibility if you've got a class that finds users persists users validates users allows access to related",
    "start": "902320",
    "end": "908199"
  },
  {
    "text": "objects for users and contains business Logic for users you could plausibly say it's got one responsibility it manages",
    "start": "908199",
    "end": "915040"
  },
  {
    "text": "the user however you could equally plausibly say that all of those things are separate responsibilities that all",
    "start": "915040",
    "end": "921079"
  },
  {
    "text": "belong in different classes and the principal doesn't give you any guidance on this because there is no Universal right answer sometimes it makes sense to",
    "start": "921079",
    "end": "927600"
  },
  {
    "text": "put all that stuff together sometimes it doesn't and that shifts over time even in the same code base the",
    "start": "927600",
    "end": "934720"
  },
  {
    "text": "answer to every question in software development is it depends O is for the open close",
    "start": "934720",
    "end": "940759"
  },
  {
    "text": "principle this is usually stated as a class should be open to extension but closed to",
    "start": "940759",
    "end": "946040"
  },
  {
    "text": "modification beram Meyer came up with this in the 80s is a fancy way of saying that editing existing code is more",
    "start": "946040",
    "end": "951759"
  },
  {
    "text": "difficult and more error prone than just adding new code right all right sure so you should",
    "start": "951759",
    "end": "957600"
  },
  {
    "text": "arrange your code base so so that you can add new functionality by just writing new code without editing",
    "start": "957600",
    "end": "963040"
  },
  {
    "text": "anything you already have so that sounds",
    "start": "963040",
    "end": "969560"
  },
  {
    "text": "great but it's pretty hard to conceive of how this could happen in a code base of significant size it's pretty easy to",
    "start": "969560",
    "end": "975399"
  },
  {
    "text": "think about how it could happen in sort of a test project a little bit of inheritance and magic fairy dust and so",
    "start": "975399",
    "end": "981360"
  },
  {
    "text": "on uh but in a code based of significant size hard to imagine hard to imagine not",
    "start": "981360",
    "end": "986800"
  },
  {
    "text": "super practical day-to-day L the lisov substitution principle this is probably the most academic of all the",
    "start": "986800",
    "end": "993519"
  },
  {
    "text": "solid principles it is a a precise mathematical statement here it is let Theta X be a property provable by",
    "start": "993519",
    "end": "999839"
  },
  {
    "text": "objects X of type T then Theta y should be true for objects y of Type S where s is a subtype of",
    "start": "999839",
    "end": "1005920"
  },
  {
    "text": "T crystal clear this is a fancy way of saying that anywhere you can use an instance of",
    "start": "1005920",
    "end": "1012160"
  },
  {
    "text": "class Fu you should be able to use an instance of class bar that is a subass of Fu nothing should go wrong so Lov",
    "start": "1012160",
    "end": "1018880"
  },
  {
    "text": "substitution principle was formulated by Barbara lisov in the 80s by the way when",
    "start": "1018880",
    "end": "1024400"
  },
  {
    "text": "she was in her late 40s don't ever let anyone tell you you're too old to do something awesome the lisov substitution principle",
    "start": "1024400",
    "end": "1031079"
  },
  {
    "text": "basically says inheritance this is a thing seems pretty obvious to us at this point isn't it but when it was first",
    "start": "1031079",
    "end": "1037880"
  },
  {
    "text": "articulated it wasn't really obvious at all it was such a good idea since that since it was introduced we have baked it",
    "start": "1037880",
    "end": "1042918"
  },
  {
    "text": "into our languages it's part of the air we breathe we don't notice it anymore the list substitution principles",
    "start": "1042919",
    "end": "1049919"
  },
  {
    "text": "had a huge impact on the way we write software which is I assume why Martin chose to include it in solid certainly",
    "start": "1049919",
    "end": "1057520"
  },
  {
    "text": "not because he just needed an L uh however while it's fundamental it's not really a good source of practical",
    "start": "1057520",
    "end": "1063200"
  },
  {
    "text": "help day-to-day utility is low let's look at I interface segregation says that classes should",
    "start": "1063200",
    "end": "1069520"
  },
  {
    "text": "only have to depend on the part of an interface they actually need this makes a lot of sense in",
    "start": "1069520",
    "end": "1074679"
  },
  {
    "text": "compiled languages let me show you how so let's let say you've got a class musician that has five methods record song edit song",
    "start": "1074679",
    "end": "1081520"
  },
  {
    "text": "Mix song play set list and sell merge so it has two classes that consume it an album Creator and a gig and these use",
    "start": "1081520",
    "end": "1088080"
  },
  {
    "text": "different sets of methods that are not related to each other so then you add another method drive the van that is",
    "start": "1088080",
    "end": "1093720"
  },
  {
    "text": "only used by gig and you'd expect at this point right that musician and gig have to be recompiled in a compiled",
    "start": "1093720",
    "end": "1098960"
  },
  {
    "text": "language however it turns out that all consumers of musician must be recompiled including album Creator which didn't",
    "start": "1098960",
    "end": "1105480"
  },
  {
    "text": "change at all so it was just too consumers who cares right but if musician had hundreds",
    "start": "1105480",
    "end": "1111520"
  },
  {
    "text": "of consumers that had to be recompiled every time you made any change you can see how it's a huge",
    "start": "1111520",
    "end": "1117480"
  },
  {
    "text": "pain makes rerunning a test for one thing a very long process to fix this inter interface",
    "start": "1117480",
    "end": "1124520"
  },
  {
    "text": "segregation suggests you break musician into two different parts Studio action venue action perhaps and that way when a",
    "start": "1124520",
    "end": "1130480"
  },
  {
    "text": "new ad new methods added to venue actions album Creator does not need to be recompiled so that's cool Dynamic",
    "start": "1130480",
    "end": "1137520"
  },
  {
    "text": "languages don't really have this problem the worst that has to happen is a Reload and it's a lot faster than any compilation process would",
    "start": "1137520",
    "end": "1144600"
  },
  {
    "text": "be however interface segregation does have one really useful core idea and that is that if different",
    "start": "1144600",
    "end": "1151520"
  },
  {
    "text": "consumers of a class use nonoverlapping sets of methods that's a sign that the class has multiple",
    "start": "1151520",
    "end": "1157559"
  },
  {
    "text": "responsibilities right remember in s we talked about the fact that very difficult to tell what granularity you need your responsibilities to be here's",
    "start": "1157559",
    "end": "1165039"
  },
  {
    "text": "a clue so I put his utility High relative the other principles we looked at so finally D the dependency inversion",
    "start": "1165039",
    "end": "1172200"
  },
  {
    "text": "principle not dependency injection although that is one uh implementation of the principle so",
    "start": "1172200",
    "end": "1177720"
  },
  {
    "text": "dependency inversion says depend on abstractions rather than concretions which I'm sure is Crystal Clear which is a fancy way of saying if you want to",
    "start": "1177720",
    "end": "1184280"
  },
  {
    "text": "make a new thing a new instance of something inside of a inside of another class you could either just make it",
    "start": "1184280",
    "end": "1190840"
  },
  {
    "text": "there or you could pass it in and these might not look like they're",
    "start": "1190840",
    "end": "1196960"
  },
  {
    "text": "very different but in in the first example the code has to know the name of",
    "start": "1196960",
    "end": "1202240"
  },
  {
    "text": "the Constructor function it wants to call it has a dependency on that name",
    "start": "1202240",
    "end": "1208120"
  },
  {
    "text": "and in the second case it doesn't you've moved the dependency to the caller to the creator of a student",
    "start": "1208120",
    "end": "1215880"
  },
  {
    "text": "object so it has the effect of moving all of your choices about Behavior to the edges of your",
    "start": "1215880",
    "end": "1222520"
  },
  {
    "text": "system which can be very useful so there's lots of dependency injection Frameworks",
    "start": "1222520",
    "end": "1229039"
  },
  {
    "text": "angular has one.net Java they make it easier to test classes and given that most of them have essentially become",
    "start": "1229039",
    "end": "1234240"
  },
  {
    "text": "gigantic Global State sometimes a bit difficult to tie them back to the principle but dependency inversion does",
    "start": "1234240",
    "end": "1240679"
  },
  {
    "text": "seem to be theoretically something a lot of people see so all right utility high so now that we filled in our",
    "start": "1240679",
    "end": "1246640"
  },
  {
    "text": "chart let's look at it for a moment the solid acronym has principles",
    "start": "1246640",
    "end": "1252400"
  },
  {
    "text": "of vastly varying degrees of utility or concreteness right utility or immediate",
    "start": "1252400",
    "end": "1257640"
  },
  {
    "text": "applicability code you're writing today is one end of a spectrum and the opposite end is abstraction which describes a general rule that sounds",
    "start": "1257640",
    "end": "1263760"
  },
  {
    "text": "like a good idea but it's hard to connect to code you're looking at in your editor so o and L are the most abstract",
    "start": "1263760",
    "end": "1270520"
  },
  {
    "text": "I and D are the most concrete and S sits in the middle so we've got at least three different levels of abstraction at work",
    "start": "1270520",
    "end": "1275880"
  },
  {
    "text": "here and none of them not even the I or the D seem actually useful in day-to-day",
    "start": "1275880",
    "end": "1282440"
  },
  {
    "text": "operations in refactoring code I mean it's nice to say I make the API in an object small but that ship is sailed for most",
    "start": "1282440",
    "end": "1289039"
  },
  {
    "text": "of us so we need some rules that are a little bit more concrete to guide our",
    "start": "1289039",
    "end": "1294559"
  },
  {
    "text": "everyday work in these code bases it's not clear how to find them so a lot of people turn to design",
    "start": "1294559",
    "end": "1302120"
  },
  {
    "text": "patterns let's talk about design patterns for a moment a design pattern is an example set of object boundaries",
    "start": "1302120",
    "end": "1308200"
  },
  {
    "start": "1305000",
    "end": "1441000"
  },
  {
    "text": "that seems to work well in many situations I'll give you an example of the pattern called The Observer let's say you have a user class",
    "start": "1308200",
    "end": "1315440"
  },
  {
    "text": "and when a new user is created it automatically sends sends them an email to get them to confirm their account now normally this is",
    "start": "1315440",
    "end": "1321679"
  },
  {
    "text": "fine if your user class is small your object graph is uncomplicated fine to leave this here",
    "start": "1321679",
    "end": "1327360"
  },
  {
    "text": "but a lot of times the user gets to be one of the biggest classes in the system",
    "start": "1327360",
    "end": "1332440"
  },
  {
    "text": "and it can be annoying to have it send email every time you want to make one because you have to find ways to turn it off when you're creating user in your",
    "start": "1332440",
    "end": "1338320"
  },
  {
    "text": "tests every test requires you to create a user so you want to separate user creation from email sending so that it's",
    "start": "1338320",
    "end": "1343520"
  },
  {
    "text": "easier to turn off so you create a new class called user Observer there we go user",
    "start": "1343520",
    "end": "1350159"
  },
  {
    "text": "Observer and you move the email functionality in there and you give it a set of creepy googly eyes so that it can",
    "start": "1350159",
    "end": "1356039"
  },
  {
    "text": "observe the user and now when a new user is",
    "start": "1356039",
    "end": "1363240"
  },
  {
    "text": "created the user Observer notices and it sends the email for you so that's cool",
    "start": "1363240",
    "end": "1368559"
  },
  {
    "text": "right you've reduced the size of your user class you've made it easier to turn off email sending by just deactivating",
    "start": "1368559",
    "end": "1373840"
  },
  {
    "text": "an observer you've made the code easier to change but you've also made it hard to",
    "start": "1373840",
    "end": "1381600"
  },
  {
    "text": "understand you used to only have to look one place to see everything that happened when a user was created it all happened in the user class now you've",
    "start": "1381600",
    "end": "1387760"
  },
  {
    "text": "got two places to look because it's in a separate class other people may not know it exists let",
    "start": "1387760",
    "end": "1393120"
  },
  {
    "text": "alone that they have to turn it off and then be unpleasantly surprised when the users they create get email if you start out with a code base",
    "start": "1393120",
    "end": "1400200"
  },
  {
    "text": "here and you apply the Observer pattern just like we talked about you move it down here that is the confounded face",
    "start": "1400200",
    "end": "1406080"
  },
  {
    "text": "emojji in case you were wondering uh you've made it easier to change but you've made it harder to",
    "start": "1406080",
    "end": "1413799"
  },
  {
    "text": "understand many people read about design patterns and start looking for opportunities to apply",
    "start": "1413799",
    "end": "1419000"
  },
  {
    "text": "them they assume that making less structured code into patterns is always a good idea but it's not patterns are",
    "start": "1419000",
    "end": "1425360"
  },
  {
    "text": "not a useful good everything has a cost that's the hard part right at what point does the lower cost of change",
    "start": "1425360",
    "end": "1431320"
  },
  {
    "text": "outweigh the higher cost of understanding and that again is not a question with a single answer it'll be different at different parts of your",
    "start": "1431320",
    "end": "1436799"
  },
  {
    "text": "code be different at different times in the same part of your code so the patterns give us more concrete ideas",
    "start": "1436799",
    "end": "1442919"
  },
  {
    "start": "1441000",
    "end": "1484000"
  },
  {
    "text": "about how to arrange code but they don't tell us when to do",
    "start": "1442919",
    "end": "1448360"
  },
  {
    "text": "it so we're still missing something we still need one more thing to help us figure out what to do like when we sat",
    "start": "1448360",
    "end": "1454840"
  },
  {
    "text": "down at a code base and we're trying to work on a feature what do we do to make it",
    "start": "1454840",
    "end": "1459880"
  },
  {
    "text": "better so here's an idea that might be useful strategy and tactics are military",
    "start": "1459880",
    "end": "1465039"
  },
  {
    "text": "Concepts I didn't grow up in a military family so for a long time I pretty much thought of these words as being the same thing but they're not a",
    "start": "1465039",
    "end": "1472919"
  },
  {
    "text": "strategy is a highlevel objective that will move us closer to some goal a tactic is something you do on the ground",
    "start": "1472919",
    "end": "1479039"
  },
  {
    "text": "to achieve that strategy so let me give you an example of how these are different your goal is to be a pr-",
    "start": "1479039",
    "end": "1484159"
  },
  {
    "text": "mountainer your strategy is to climb this mountain that not very many people have climbed before and you're starting from the bottom and you need to make it",
    "start": "1484159",
    "end": "1491240"
  },
  {
    "text": "up to the top so there's no Trails need to figure your own way up the strategy",
    "start": "1491240",
    "end": "1498640"
  },
  {
    "text": "is where you want to be at the end of the day on top of the mountain and your tactics are how you get",
    "start": "1498640",
    "end": "1504840"
  },
  {
    "text": "there tactics include planned route contingency plans and your tactics are Guided by and maybe Changed by the",
    "start": "1504840",
    "end": "1511480"
  },
  {
    "text": "strategy as you walk up the mountain so possible routes include walking along the tree line and going up the right",
    "start": "1511480",
    "end": "1516640"
  },
  {
    "text": "hand Ridge climbing this rock face and then going up the left hand Ridge there you know just straight going for it that",
    "start": "1516640",
    "end": "1523200"
  },
  {
    "text": "works too uh they all involve different tactics right walking versus climbing",
    "start": "1523200",
    "end": "1528360"
  },
  {
    "text": "versus repelling then the actual route you take will depend on the weather your skills your gear and many other things",
    "start": "1528360",
    "end": "1535840"
  },
  {
    "text": "once you do choose a route it's probably still not what's going to actually happen you get to the base of the ridge you discover the Avalanche has made it",
    "start": "1535840",
    "end": "1541080"
  },
  {
    "text": "too perilous to go up that way so you change tactics because your strategy of climbing the mountain is no longer in line with your original tactics so part",
    "start": "1541080",
    "end": "1547919"
  },
  {
    "text": "of your tactics include determining when to change tactics so what would happen if all we",
    "start": "1547919",
    "end": "1553880"
  },
  {
    "text": "had was a strategy all we know is okay there's a mountain I need to get to the top of",
    "start": "1553880",
    "end": "1560559"
  },
  {
    "text": "it if you set out to achieve this strategy without working on any of the Little Steps you could take to get there it's not likely to work out for you very",
    "start": "1560600",
    "end": "1568080"
  },
  {
    "text": "well you may get to the top accidentally but it's more likely that you'll try a few fruitless paths find",
    "start": "1568080",
    "end": "1575600"
  },
  {
    "text": "yourself in a valley you can't get out of and then have to Signal the park rangers to airlift you out so you need to have tactics in mind",
    "start": "1575600",
    "end": "1582600"
  },
  {
    "text": "or you probably won't achieve your strategy our actual goal is not being a PR mountainer it's changeable code",
    "start": "1582600",
    "end": "1589080"
  },
  {
    "start": "1587000",
    "end": "1724000"
  },
  {
    "text": "that's the promise of objects we want our code to be easy to change one way to think about strategies",
    "start": "1589080",
    "end": "1594720"
  },
  {
    "text": "and tactics for changeable code is to say that our strategy is obure in design",
    "start": "1594720",
    "end": "1600320"
  },
  {
    "text": "our tactics would then be things like solid and patterns and this is how objectoriented design is taught",
    "start": "1600320",
    "end": "1606559"
  },
  {
    "text": "particularly in Academia and this is how most developers look at it whether or not they can articulate that for most people solid and patterns are the",
    "start": "1606559",
    "end": "1613039"
  },
  {
    "text": "tactics we use to achieve object oriented design uh there's a problem though with",
    "start": "1613039",
    "end": "1618840"
  },
  {
    "text": "this picture of the world and that is that object oriented design isn't actually a",
    "start": "1618840",
    "end": "1624279"
  },
  {
    "text": "strategy remember our strategy describes what we want our world or in this case our code base to look like at the end of",
    "start": "1624279",
    "end": "1630320"
  },
  {
    "text": "the day and object oriented design doesn't really do that on the other hand",
    "start": "1630320",
    "end": "1636279"
  },
  {
    "text": "solid is reasonably good at describing what our code base should look like when it's",
    "start": "1636279",
    "end": "1641399"
  },
  {
    "text": "finished single responsibility principle for example would make a great strategy it describes a state of our codebase in",
    "start": "1641399",
    "end": "1647039"
  },
  {
    "text": "which there is one responsibility at the right gity per class and if we had that our code base would be more changeable",
    "start": "1647039",
    "end": "1653840"
  },
  {
    "text": "an open close describes this code-based Utopia where you never have to edit code to add features in fact all these",
    "start": "1653840",
    "end": "1659720"
  },
  {
    "text": "principles are at some level descriptions of when you know your code is right or done if your code were like",
    "start": "1659720",
    "end": "1666919"
  },
  {
    "text": "this it would be more changeable so solid is a great set of",
    "start": "1666919",
    "end": "1673200"
  },
  {
    "text": "strategies our problem is that we've been trying to use them like tactics",
    "start": "1673200",
    "end": "1678880"
  },
  {
    "text": "for example you can't just apply the single responsibility principle directly to a thousand line class right a class",
    "start": "1678880",
    "end": "1684480"
  },
  {
    "text": "like that has a muddy set of abstractions spread across multiple methods each that are hard to distinguish and when you squint at the",
    "start": "1684480",
    "end": "1689880"
  },
  {
    "text": "class and sort of Envision how you'd break it up you're most likely going to be wrong the abstractions are hard to",
    "start": "1689880",
    "end": "1695600"
  },
  {
    "text": "see by definition because if they weren't you'd have done something about it already so trying to eyeball large",
    "start": "1695600",
    "end": "1701320"
  },
  {
    "text": "class and sort of see what the right attractions are is like trying to head towards a summit without planning a route ahead of time but we do this a lot",
    "start": "1701320",
    "end": "1708519"
  },
  {
    "text": "I've been on many teams where some class some object gets too big too frustrating to work with so we'd schedule a week to",
    "start": "1708519",
    "end": "1714320"
  },
  {
    "text": "refactor it and we spend that week sort of just eyeballing the class trying to surface the right",
    "start": "1714320",
    "end": "1720679"
  },
  {
    "text": "abstractions I think about these as stop the world",
    "start": "1720679",
    "end": "1725518"
  },
  {
    "start": "1724000",
    "end": "1804000"
  },
  {
    "text": "refactorings and you shouldn't do them but what's wrong what's wrong with",
    "start": "1725840",
    "end": "1731000"
  },
  {
    "text": "this what's wrong with the stop the world refactoring right refactoring is part of being a good software engineer right taking time to to clean up and",
    "start": "1731000",
    "end": "1737880"
  },
  {
    "text": "make the code better is important",
    "start": "1737880",
    "end": "1742720"
  },
  {
    "text": "right two interesting things happen when you stop the world to refactor and the first one is that the product team is",
    "start": "1743440",
    "end": "1748640"
  },
  {
    "text": "really unhappy you're taking a whole week off from their perspective meaning",
    "start": "1748640",
    "end": "1753799"
  },
  {
    "text": "you're not working on anything they can see and the second thing is because you're time limited you feel pressure at",
    "start": "1753799",
    "end": "1759519"
  },
  {
    "text": "the end of the week to break that class up somehow even if you're not entirely sure yet what the right boundaries are",
    "start": "1759519",
    "end": "1764760"
  },
  {
    "text": "now both of these are bad maintaining trust with the product team is one of the most important parts of your job you",
    "start": "1764760",
    "end": "1771080"
  },
  {
    "text": "can only tell them good software engineering practice so many times before they start wondering why with all of this good software engineering",
    "start": "1771080",
    "end": "1777159"
  },
  {
    "text": "practice we aren't getting features done more quickly and rushing through a refactor",
    "start": "1777159",
    "end": "1782480"
  },
  {
    "text": "is exactly how you end up here the only way to make a stop the",
    "start": "1782480",
    "end": "1788559"
  },
  {
    "text": "world refactoring work is to not do it it's like global thermonuclear war right",
    "start": "1788559",
    "end": "1793679"
  },
  {
    "text": "the only winning move is not to play when we apply these strategies as though there were tactics we end up with these",
    "start": "1793679",
    "end": "1799519"
  },
  {
    "text": "ham-handed mostly unplanned unpopular changes that just leave us in a worse place than before we're doing this it's",
    "start": "1799519",
    "end": "1806720"
  },
  {
    "start": "1804000",
    "end": "1867000"
  },
  {
    "text": "frustrating you ever wonder why a lot of good developers who started out in an object oriented language are turning to",
    "start": "1806720",
    "end": "1812159"
  },
  {
    "text": "functional programming certainly novelty is part of",
    "start": "1812159",
    "end": "1817880"
  },
  {
    "text": "it uh but if you read some of the stuff that they write it's a there's a strong undercurrent of fundamental criticism of",
    "start": "1817880",
    "end": "1823720"
  },
  {
    "text": "oo right they say it just doesn't work what they're actually saying is there's a summit here and they can see it and it",
    "start": "1823720",
    "end": "1829960"
  },
  {
    "text": "seems like they should be able to get there but they can't so what we're missing is tactics",
    "start": "1829960",
    "end": "1835279"
  },
  {
    "text": "that get us up there in explicit small steps we need things we can do every day as we're doing Feature work to inline",
    "start": "1835279",
    "end": "1840799"
  },
  {
    "text": "that refactoring time and allow the right objects to emerge from the mess over time patterns are part of our tactics",
    "start": "1840799",
    "end": "1847279"
  },
  {
    "text": "but they're not everything we need right earlier we talked about the fact that patterns don't tell you when is the right time to apply them and if we set",
    "start": "1847279",
    "end": "1853360"
  },
  {
    "text": "off with only patterns as our tactics it's like telling the mountain near all right here's your tactics you climb an ice wall like this you scale a cliff",
    "start": "1853360",
    "end": "1859360"
  },
  {
    "text": "like this here's how you edge along a shelf right here's how you Scrabble over loose rock all right go have a good",
    "start": "1859360",
    "end": "1867399"
  },
  {
    "start": "1867000",
    "end": "1930000"
  },
  {
    "text": "time and there's a lot of skill involved in climbing an ice wall but the real skill lies in knowing when to do it and",
    "start": "1867399",
    "end": "1874559"
  },
  {
    "text": "when not to when you come to the ice wall should you climb it or should you look for a way around so when you see code you",
    "start": "1874559",
    "end": "1881080"
  },
  {
    "text": "could change should you change it this is our missing piece we have solid we",
    "start": "1881080",
    "end": "1888120"
  },
  {
    "text": "have patterns and now we need guidelines so I got six of them for you I made my own",
    "start": "1888120",
    "end": "1893960"
  },
  {
    "text": "acronym I figure if it worked for solid can work for me",
    "start": "1893960",
    "end": "1900720"
  },
  {
    "text": "stable this mountain is solid which is cool but when I'm trying to get up it what I actually need is stability right I want it to for example not be a",
    "start": "1900720",
    "end": "1907120"
  },
  {
    "text": "volcano not Avalanche out from under my feet not drop Boulders on me right I need it to be solid sure uh but at a",
    "start": "1907120",
    "end": "1913320"
  },
  {
    "text": "more immediate level when I'm making way my way on the ground I need stability and the same is true of my code base I want it to conform to all the solid",
    "start": "1913320",
    "end": "1919760"
  },
  {
    "text": "principles that would be great however what I really need is to know that if I make a change in one part of the code it won't cause an avalanche on the other",
    "start": "1919760",
    "end": "1925919"
  },
  {
    "text": "side of the mountain so let's go through these tactics s smell your code what this",
    "start": "1925919",
    "end": "1932440"
  },
  {
    "start": "1930000",
    "end": "2076000"
  },
  {
    "text": "means is to study code smells and other don'ts right we've got lots of don'ts code smells are a a list of common",
    "start": "1932440",
    "end": "1941120"
  },
  {
    "text": "problems in code Martin Fowler's book refactoring is fabulous for these uh worked with a team that would",
    "start": "1941120",
    "end": "1947880"
  },
  {
    "text": "pick one codee smell each week and spend one lunchtime sort of looking at it and trying to find examples in their code",
    "start": "1947880",
    "end": "1953200"
  },
  {
    "text": "and the reason you do this is because you want to start noticing and naming the problems in your code even though",
    "start": "1953200",
    "end": "1958279"
  },
  {
    "text": "you won't be fixing them all yet T is for tiny problems first in messy code there'll be a lot of smells",
    "start": "1958279",
    "end": "1965320"
  },
  {
    "text": "they'll overlap they'll intertwine they'll interfere with each other it'll be hard to see what you should make with all of this",
    "start": "1965320",
    "end": "1970360"
  },
  {
    "text": "mess so the best way to get started is pick a really small problem that you know how to solve in a very concrete way",
    "start": "1970360",
    "end": "1975760"
  },
  {
    "text": "and just fix that for example example rename a variable whose usage has diverged from its",
    "start": "1975760",
    "end": "1982039"
  },
  {
    "text": "name pick the smallest problem to fix even though you see enough of the bigger",
    "start": "1982039",
    "end": "1987080"
  },
  {
    "text": "problems to start guessing their answers your goal is to see the larger problems better by clearing away the",
    "start": "1987080",
    "end": "1993240"
  },
  {
    "text": "small problems that obscure them the more information you gather about these larger problems the more likely the your",
    "start": "1993240",
    "end": "1998840"
  },
  {
    "text": "eventual abstractions will be right proper abstractions are worth waiting for let them emerge from the",
    "start": "1998840",
    "end": "2005320"
  },
  {
    "text": "code you have by clearing away the easy craft a s where augment your tests you",
    "start": "2005320",
    "end": "2010760"
  },
  {
    "text": "will almost certainly have to do this to be able to refactor large classes you need integration tests one level higher",
    "start": "2010760",
    "end": "2016880"
  },
  {
    "text": "than the class you're working on and you need these in place before you start doing any of these right so if you were in a serers side MVC application if you",
    "start": "2016880",
    "end": "2022279"
  },
  {
    "text": "want to refactor a big controller you'll need view level integration tests if you want to refactor a big model you need",
    "start": "2022279",
    "end": "2027320"
  },
  {
    "text": "controller level integration tests because you want to test Behavior rather than implementation right that's why you go one level up you need tests that",
    "start": "2027320",
    "end": "2033600"
  },
  {
    "text": "describe the behavior you want to keep and this may mean getting getting rid of some lower down unit tests or writing",
    "start": "2033600",
    "end": "2039760"
  },
  {
    "text": "new tests the level you haven't had them before B back up when it's useful when",
    "start": "2039760",
    "end": "2046559"
  },
  {
    "text": "the code has an abstraction in it that is no longer serving you well when you have objects that don't seem like",
    "start": "2046559",
    "end": "2051800"
  },
  {
    "text": "they're quite the right thing sometimes the most useful thing to do is rewind the code put all that duplication back",
    "start": "2051800",
    "end": "2057158"
  },
  {
    "text": "make it back into a procedure and start looking at it again it is much much harder to move from a uh much easier",
    "start": "2057159",
    "end": "2063720"
  },
  {
    "text": "rather to move from a procedure to the right set of objects than it is to move from the wrong set to the right set so",
    "start": "2063720",
    "end": "2069919"
  },
  {
    "text": "don't get caught by the sunk cost fallacy don't Forge ahead with a set of objects that don't even fit now let alone in the future L is for leave it",
    "start": "2069919",
    "end": "2076960"
  },
  {
    "start": "2076000",
    "end": "2202000"
  },
  {
    "text": "better than you found it during any one Expedition into the code to add the feature fix a bug you won't be able to",
    "start": "2076960",
    "end": "2082398"
  },
  {
    "text": "fix all the problems you see can't hug every cat right and there is our meme from 2010",
    "start": "2082399",
    "end": "2089960"
  },
  {
    "text": "for today sometimes the only thing you can do alongside your stated goal is rename a method so it describes this",
    "start": "2089960",
    "end": "2095000"
  },
  {
    "text": "Behavior better and that action seems really small and our instinct is to save a bunch of those up and do them",
    "start": "2095000",
    "end": "2100839"
  },
  {
    "text": "once but don't give into that stop the world Temptation fix one thing the smallest thing while you're working on a",
    "start": "2100839",
    "end": "2106240"
  },
  {
    "text": "story that concerns that code I was a girl scout back in the day",
    "start": "2106240",
    "end": "2111320"
  },
  {
    "text": "uh one of our rules was when we were out camping that we would always leave a campsite in better shape than when we arrived and over time this made a better",
    "start": "2111320",
    "end": "2118880"
  },
  {
    "text": "experience for everyone including ourselves so partially selfish if you change that one method name you're",
    "start": "2118880",
    "end": "2125000"
  },
  {
    "text": "removing a little piece of cognitive dissonance from your code the next person to come through",
    "start": "2125000",
    "end": "2130640"
  },
  {
    "text": "this code will be able to understand it a little more easily maybe the big abstraction will suddenly be obvious or maybe they'll",
    "start": "2130640",
    "end": "2137280"
  },
  {
    "text": "just fix the next smallest thing the key inside is that little things add up over time finally e expect good reasons",
    "start": "2137280",
    "end": "2143960"
  },
  {
    "text": "assume past developers had good reasons to write the code they did some code looks so horrible and I think what idiot",
    "start": "2143960",
    "end": "2150319"
  },
  {
    "text": "wrote this why would anyone ever do it this way and then I run get blame and",
    "start": "2150319",
    "end": "2155599"
  },
  {
    "text": "find out it was me 6 months ago or it was one of the developers I really admire right there are forces that work",
    "start": "2155599",
    "end": "2161240"
  },
  {
    "text": "on the code Beyond developer experience and skill deadlines relationships other groups like product QA operations",
    "start": "2161240",
    "end": "2166880"
  },
  {
    "text": "company financial situation all of these and many others leave their fingerprints on the code",
    "start": "2166880",
    "end": "2172440"
  },
  {
    "text": "base so if you start thinking about the social pressures that affect your codebase many other things will make a lot more",
    "start": "2172440",
    "end": "2179040"
  },
  {
    "text": "sense so here we go these are tiny things you can do to inline refactor",
    "start": "2179040",
    "end": "2184280"
  },
  {
    "text": "large classes as you're making progress on features you don't have to stop the world you can rebuild trust with your",
    "start": "2184280",
    "end": "2189760"
  },
  {
    "text": "product team and as a bonus you're much more likely to end up with the the abstractions that you want now this is a cycle right it's not something you do",
    "start": "2189760",
    "end": "2196680"
  },
  {
    "text": "once you keep fixing the small problems and the solutions to the large ones become obvious so now that we've got",
    "start": "2196680",
    "end": "2204640"
  },
  {
    "text": "our our how our patterns right and we've got our when which is our stable oh",
    "start": "2204640",
    "end": "2213440"
  },
  {
    "text": "there we go this the wrong order and we've got our what which is solid",
    "start": "2213440",
    "end": "2220200"
  },
  {
    "text": "and we've got our why which is our changeable code and all we're missing is who the answer is everybody everyone on",
    "start": "2220200",
    "end": "2226560"
  },
  {
    "text": "your team should be doing this you might ask don't you still have to stop the world",
    "start": "2226560",
    "end": "2232838"
  },
  {
    "text": "sometimes oh no now I have to go through them again it's all right I like that transition I'll Zoom all",
    "start": "2233119",
    "end": "2240359"
  },
  {
    "text": "right uh don't you still have to stop the world sometimes because after all once you've cleaned up enough of the",
    "start": "2240359",
    "end": "2245520"
  },
  {
    "text": "small problems to see a solution to a larger problem you still do actually have to solve the larger",
    "start": "2245520",
    "end": "2252359"
  },
  {
    "text": "problem uh Kent Beck has a really interesting way of talking about this for each desired change make the change",
    "start": "2252359",
    "end": "2258920"
  },
  {
    "start": "2255000",
    "end": "2337000"
  },
  {
    "text": "easy warning this may be hard then make the easy",
    "start": "2258920",
    "end": "2264119"
  },
  {
    "text": "change when you remove the small problems the big problems become obvious and they become much easier because",
    "start": "2264119",
    "end": "2269760"
  },
  {
    "text": "you've amortized the cost spent fixing the big problems and as a result you end up with a higher quality solution that",
    "start": "2269760",
    "end": "2275160"
  },
  {
    "text": "when you see it will look in retrospect really really obvious Kent's warning is important here",
    "start": "2275160",
    "end": "2281079"
  },
  {
    "text": "though this may be hard the stable cycle won't always prevent you from extracting the wrong",
    "start": "2281079",
    "end": "2286359"
  },
  {
    "text": "objects or trying to fix it doesn't work you'll still have to go down some paths that lead to dead ends but on this process that's expected back up and try",
    "start": "2286359",
    "end": "2292839"
  },
  {
    "text": "another and that's why backup is one of the essential steps in this process but this time we aren't just",
    "start": "2292839",
    "end": "2299440"
  },
  {
    "text": "wandering aimlessly like we were back here we're moving tactically we're following steps that we know will get us",
    "start": "2299440",
    "end": "2305760"
  },
  {
    "text": "there even if the final shape of the journey doesn't look anything like what we thought it would when we",
    "start": "2305760",
    "end": "2313240"
  },
  {
    "text": "started work on making your code stable and it will eventually be solid you can get to the top you can be",
    "start": "2313760",
    "end": "2320240"
  },
  {
    "text": "the success story just make sure you head up with the plan thank you very",
    "start": "2320240",
    "end": "2325670"
  },
  {
    "text": "[Applause]",
    "start": "2325670",
    "end": "2335520"
  },
  {
    "text": "much",
    "start": "2335520",
    "end": "2338520"
  }
]