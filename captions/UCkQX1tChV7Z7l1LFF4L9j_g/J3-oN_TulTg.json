[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "7700",
    "end": "17439"
  },
  {
    "text": "I am Francis alet I work for Contin Continuum analytics and during my tutorial I would",
    "start": "17439",
    "end": "25039"
  },
  {
    "text": "like to introduce you to to to newx and syon as a libraries that can help you to",
    "start": "25039",
    "end": "31759"
  },
  {
    "text": "uh accelerate operations with numai okay can you everybody can hear me well",
    "start": "31759",
    "end": "40399"
  },
  {
    "start": "40000",
    "end": "40000"
  },
  {
    "text": "okay so for this tutorial you can you can grab the",
    "start": "40520",
    "end": "46120"
  },
  {
    "text": "exercises materials in this URL or this exercises has also been um put on the on",
    "start": "46120",
    "end": "55399"
  },
  {
    "text": "the USB key that you have okay so it's just a it's a t ball you have",
    "start": "55399",
    "end": "62359"
  },
  {
    "text": "to to extract everything but all the source quod is",
    "start": "62359",
    "end": "68479"
  },
  {
    "start": "65000",
    "end": "65000"
  },
  {
    "text": "there okay so first of all I will intro I will do some small introduction",
    "start": "68479",
    "end": "74880"
  },
  {
    "text": "about the the era of big data that we are then I will talk a little bit about",
    "start": "74880",
    "end": "81720"
  },
  {
    "text": "numai and its ecosystem then uh we will proceed with some uh exercises on newx which is a",
    "start": "81720",
    "end": "89560"
  },
  {
    "text": "library to accelerate uh to interpret and accelerate numai",
    "start": "89560",
    "end": "95119"
  },
  {
    "text": "Expressions then I will say u a few things about um syon which is a way to",
    "start": "95119",
    "end": "102640"
  },
  {
    "text": "compile which is a a language which is very similar to python but can be compiled and runs much faster than",
    "start": "102640",
    "end": "109759"
  },
  {
    "text": "python itself so uh of course we we are in the age of",
    "start": "109759",
    "end": "117799"
  },
  {
    "start": "112000",
    "end": "112000"
  },
  {
    "text": "Big Data this is apparently there is apparently too much hype on it",
    "start": "117799",
    "end": "123360"
  },
  {
    "text": "but the reality is that yeah it's true nobody said that so",
    "start": "123360",
    "end": "129560"
  },
  {
    "text": "far but uh the the truth is that uh we have in reality much more sensors uh",
    "start": "129560",
    "end": "137280"
  },
  {
    "text": "Computing devices are pervasive it is really amazing how many information you",
    "start": "137280",
    "end": "142440"
  },
  {
    "text": "can uh transmit You by using your smartphones and it is uh also true that",
    "start": "142440",
    "end": "149920"
  },
  {
    "text": "internet allows to grab data anywhere and um it is really easy to access and",
    "start": "149920",
    "end": "155280"
  },
  {
    "text": "to cumulate uh big data and of course uh meaning all that",
    "start": "155280",
    "end": "161720"
  },
  {
    "text": "big data has a lot of benefits uh because you can",
    "start": "161720",
    "end": "167120"
  },
  {
    "start": "165000",
    "end": "165000"
  },
  {
    "text": "extract a lot of value from meaning this this data but however the problem is",
    "start": "167120",
    "end": "173080"
  },
  {
    "text": "that the Bigg the data is of course the slower we can process it it's just",
    "start": "173080",
    "end": "178319"
  },
  {
    "text": "a a matter of of a matter of fact so processing uh this data faster give us",
    "start": "178319",
    "end": "185799"
  },
  {
    "text": "us more gives us more chances to get insight behind",
    "start": "185799",
    "end": "193080"
  },
  {
    "start": "191000",
    "end": "191000"
  },
  {
    "text": "it so our challenge is uh that you must we must use our computational resources",
    "start": "193080",
    "end": "199720"
  },
  {
    "text": "optimally in order to uh to be able to get the most out of big",
    "start": "199720",
    "end": "205879"
  },
  {
    "text": "data and numai uh plays a a very um a",
    "start": "205879",
    "end": "211480"
  },
  {
    "text": "central role in this uh in this aspect because it has become an defacto",
    "start": "211480",
    "end": "218439"
  },
  {
    "text": "container for Big Data applications in the in the python",
    "start": "218439",
    "end": "224000"
  },
  {
    "text": "Universe in fact numai has created a a a",
    "start": "224000",
    "end": "230680"
  },
  {
    "text": "very comprehensive ecosystems ecosystem around around it and there are many many",
    "start": "230680",
    "end": "238200"
  },
  {
    "text": "um libraries that uses npy in order to deal with this big big data okay there are",
    "start": "238200",
    "end": "245760"
  },
  {
    "text": "machine learning libraries uh scipi Library uh s kit",
    "start": "245760",
    "end": "252159"
  },
  {
    "text": "image packages for processing images uh stats models Sage",
    "start": "252159",
    "end": "258320"
  },
  {
    "text": "pandas many many things Puda and P opencl also relies on numai in order to",
    "start": "258320",
    "end": "265360"
  },
  {
    "text": "accelerate computations",
    "start": "265360",
    "end": "269240"
  },
  {
    "text": "and numai has become the the factor standard for good reasons",
    "start": "270720",
    "end": "276160"
  },
  {
    "text": "okay uh it provides a very handy multi-dimensional data container that",
    "start": "276160",
    "end": "282000"
  },
  {
    "start": "281000",
    "end": "281000"
  },
  {
    "text": "allows for efficient data access and also provides powerful weaponary for",
    "start": "282000",
    "end": "289120"
  },
  {
    "text": "data handling and most important is that it provides an efficienty memory uh",
    "start": "289120",
    "end": "295680"
  },
  {
    "text": "storage let me show you an example of how how numai is much more efficient",
    "start": "295680",
    "end": "301919"
  },
  {
    "start": "300000",
    "end": "300000"
  },
  {
    "text": "that the containers that normally provides um uh python for example if we are uh",
    "start": "301919",
    "end": "309520"
  },
  {
    "text": "retrieving data from from our relational database and we are using an native",
    "start": "309520",
    "end": "315520"
  },
  {
    "text": "python driver the way that python hand the driver will uh will handle the data",
    "start": "315520",
    "end": "322360"
  },
  {
    "text": "to you is that it will R you a list of topples on every uh every cell here it's",
    "start": "322360",
    "end": "330800"
  },
  {
    "text": "a every element here it's a cell of the table okay so in order to build all this",
    "start": "330800",
    "end": "337240"
  },
  {
    "text": "structure you need to build an object for every cell and that results in a lot of",
    "start": "337240",
    "end": "344880"
  },
  {
    "text": "overheat so the numai way is to create an structor array here and there you can",
    "start": "344880",
    "end": "351400"
  },
  {
    "text": "put the results all or your selections is Right In",
    "start": "351400",
    "end": "357479"
  },
  {
    "text": "memory so in uh as a result you have faster creation time because it is much",
    "start": "357479",
    "end": "363120"
  },
  {
    "text": "faster to create one one single object that creates many objects you don't have",
    "start": "363120",
    "end": "368800"
  },
  {
    "text": "memory fragmentation which is essential when you want to to optimize your your",
    "start": "368800",
    "end": "374120"
  },
  {
    "text": "access to to data and in this way you have only one",
    "start": "374120",
    "end": "380080"
  },
  {
    "text": "datab normally for uh one datab in your data means only one one",
    "start": "380080",
    "end": "387639"
  },
  {
    "text": "bite in memory okay while here we have sever many many objects and normally for",
    "start": "387639",
    "end": "395599"
  },
  {
    "text": "one databyte we need several bytes in memory okay so this is really",
    "start": "395599",
    "end": "405039"
  },
  {
    "text": "interesting but of course nothing is perfect and although numai is just great",
    "start": "405440",
    "end": "412240"
  },
  {
    "start": "407000",
    "end": "407000"
  },
  {
    "text": "for many many use cases uh it also comes with its own",
    "start": "412240",
    "end": "417360"
  },
  {
    "text": "different uh deficiencies the first one is that unfortunately",
    "start": "417360",
    "end": "422560"
  },
  {
    "text": "numai is forced is enforced to follow the python way to evaluate expressions",
    "start": "422560",
    "end": "429360"
  },
  {
    "text": "for example if you are evaluating I a by B plus C you first need a temporary okay",
    "start": "429360",
    "end": "438319"
  },
  {
    "text": "to to host this information and then um add the C the C array here I will",
    "start": "438319",
    "end": "445919"
  },
  {
    "text": "explain that why why this is a problem more in detail in a in in a few",
    "start": "445919",
    "end": "450960"
  },
  {
    "text": "minutes and the second thing is that numai doesn't have support for multiprocessors right off of the Box",
    "start": "450960",
    "end": "458039"
  },
  {
    "text": "except if you use uh blast computations and you link your npy with a with a",
    "start": "458039",
    "end": "465199"
  },
  {
    "text": "blast U that supports multiprocessing okay but in general numai doesn't",
    "start": "465199",
    "end": "471560"
  },
  {
    "text": "doesn't have this multiprocessor",
    "start": "471560",
    "end": "477120"
  },
  {
    "start": "477000",
    "end": "477000"
  },
  {
    "text": "support so here is where uh numex can help Okay because numex is a python",
    "start": "477440",
    "end": "485240"
  },
  {
    "text": "Library which is uh geared to deal with complex Expressions so what",
    "start": "485240",
    "end": "491240"
  },
  {
    "text": "numex has it's it comes with um specialized virtual",
    "start": "491240",
    "end": "496680"
  },
  {
    "text": "machine that evaluates Expressions okay is it also wears uh just in time",
    "start": "496680",
    "end": "503560"
  },
  {
    "text": "compiler that can compile these Expressions uh into for for the for this",
    "start": "503560",
    "end": "509720"
  },
  {
    "text": "virtual machine it accelerates computations mainly by making more me memory",
    "start": "509720",
    "end": "516240"
  },
  {
    "text": "efficient usage as we will see and it also has support for extremely easy to",
    "start": "516240",
    "end": "522080"
  },
  {
    "text": "use multi- threading as we will see which which way by the way is is",
    "start": "522080",
    "end": "528080"
  },
  {
    "text": "active by default so you don't have to do anything in order to to access this",
    "start": "528080",
    "end": "535720"
  },
  {
    "text": "capability so for example let's uh let's suppose just to make a simple example",
    "start": "535720",
    "end": "542040"
  },
  {
    "text": "that we want to evaluate this polinomial in uh in the range minus one",
    "start": "542040",
    "end": "547680"
  },
  {
    "text": "one with a step size of uh 2 by 10",
    "start": "547680",
    "end": "554320"
  },
  {
    "text": "uh 2us minus 7 using both num pi and num",
    "start": "554320",
    "end": "559360"
  },
  {
    "text": "X okay so if we do that and in order to",
    "start": "559360",
    "end": "565600"
  },
  {
    "text": "compare Pi with pi and um apples with app",
    "start": "565600",
    "end": "570640"
  },
  {
    "text": "we we should uh be sure that num X only use one thread because num only uses one",
    "start": "570640",
    "end": "575839"
  },
  {
    "text": "thread by default okay so the exercises must be carry out the exercise must be",
    "start": "575839",
    "end": "581360"
  },
  {
    "text": "carry out with with this okay",
    "start": "581360",
    "end": "586240"
  },
  {
    "text": "so let's enter into my python console",
    "start": "587600",
    "end": "595440"
  },
  {
    "text": "console and first of all let's create create the",
    "start": "596959",
    "end": "604120"
  },
  {
    "text": "x-axis the points for",
    "start": "604120",
    "end": "608079"
  },
  {
    "text": "evaluating the polinomial",
    "start": "621040",
    "end": "627200"
  },
  {
    "text": "oh I think sorry I need to enter in pyop",
    "start": "627200",
    "end": "636160"
  },
  {
    "text": "mode",
    "start": "643160",
    "end": "646160"
  },
  {
    "text": "yeah oh the comma yeah okay and now we just",
    "start": "648800",
    "end": "657720"
  },
  {
    "text": "uh evaluate",
    "start": "657720",
    "end": "661240"
  },
  {
    "text": "the polinomial so this is the way that can everybody see the the",
    "start": "664320",
    "end": "673160"
  },
  {
    "text": "text let me",
    "start": "673160",
    "end": "677319"
  },
  {
    "text": "oh okay so here we can uh we we already",
    "start": "697880",
    "end": "702920"
  },
  {
    "text": "done this computation using with n p or the",
    "start": "702920",
    "end": "709040"
  },
  {
    "text": "polinomial and uh we should if we measure the time that the",
    "start": "709040",
    "end": "715639"
  },
  {
    "text": "computations takes",
    "start": "715639",
    "end": "719360"
  },
  {
    "text": "we can see this uh 1 second and 18 milliseconds",
    "start": "721320",
    "end": "728240"
  },
  {
    "text": "okay so if we use uh let's try with",
    "start": "728240",
    "end": "733760"
  },
  {
    "text": "newx so just import the newex",
    "start": "733760",
    "end": "739240"
  },
  {
    "text": "library as NE and",
    "start": "739240",
    "end": "744959"
  },
  {
    "text": "then let's do the same computation using",
    "start": "748160",
    "end": "753680"
  },
  {
    "text": "numex evaluating this expression is as easy as convert the expression into a",
    "start": "753720",
    "end": "760320"
  },
  {
    "text": "string",
    "start": "760320",
    "end": "762760"
  },
  {
    "text": "form okay and just let's make sure that the",
    "start": "765560",
    "end": "771320"
  },
  {
    "text": "result is the same than in in numai so",
    "start": "771320",
    "end": "779199"
  },
  {
    "text": "let's makes use of all",
    "start": "779279",
    "end": "782800"
  },
  {
    "text": "close okay so all the results are the same we have evaluated the same Expressions exactly the same the same",
    "start": "785279",
    "end": "793519"
  },
  {
    "text": "thing and let me try let me show you the time",
    "start": "793519",
    "end": "800199"
  },
  {
    "text": "that newx takes for doing this that was with a single thread ah yeah exactly we",
    "start": "800199",
    "end": "808360"
  },
  {
    "text": "need to to make sure that we are only using one",
    "start": "808360",
    "end": "814399"
  },
  {
    "text": "thread thank you so here is two because it uh Returns the",
    "start": "821279",
    "end": "828440"
  },
  {
    "text": "number of threads that is that it was using by default before",
    "start": "828440",
    "end": "833639"
  },
  {
    "text": "Okay so",
    "start": "833639",
    "end": "837639"
  },
  {
    "text": "okay so newx takes only 20 cencs okay",
    "start": "844560",
    "end": "851920"
  },
  {
    "text": "and if we remember the time that it takes uh to numai to evaluate the same",
    "start": "851920",
    "end": "859199"
  },
  {
    "text": "thing it is almost um six times almost six times uh more than that",
    "start": "861600",
    "end": "869720"
  },
  {
    "text": "that numex so numex can can evaluate this sort of",
    "start": "869720",
    "end": "876800"
  },
  {
    "text": "things much faster than than nay can okay",
    "start": "876800",
    "end": "882959"
  },
  {
    "text": "so that's a nice thing but what happens if we respress this polinomial in a",
    "start": "884399",
    "end": "890959"
  },
  {
    "text": "better way this is the the factorized version of the same",
    "start": "890959",
    "end": "896040"
  },
  {
    "text": "polinomial and and and we the the the",
    "start": "896040",
    "end": "901720"
  },
  {
    "text": "computations so if we do",
    "start": "903120",
    "end": "908920"
  },
  {
    "text": "that this is the short version of the polinomial the factorized version",
    "start": "914440",
    "end": "923839"
  },
  {
    "text": "okay so it takes just half the time than",
    "start": "930480",
    "end": "936160"
  },
  {
    "text": "the original the original expression mhm can you can you can",
    "start": "936160",
    "end": "942959"
  },
  {
    "text": "anybody explain why this is so what do you think we are using just",
    "start": "942959",
    "end": "949519"
  },
  {
    "text": "numai here and here why this expression is is twice as slower than this",
    "start": "949519",
    "end": "956759"
  },
  {
    "text": "one less number of operations that's that's a possibility but this is not the",
    "start": "956759",
    "end": "963920"
  },
  {
    "text": "reason in fact this this operate with with less this this takes less less",
    "start": "964600",
    "end": "971319"
  },
  {
    "text": "operations to to carry out but this is not the reason another suggestion or at least not it's not the",
    "start": "971319",
    "end": "978480"
  },
  {
    "text": "main reason it's it's it's a it's a reason but it's not the main",
    "start": "978480",
    "end": "984399"
  },
  {
    "text": "one no",
    "start": "984399",
    "end": "988399"
  },
  {
    "text": "no these are possibilities that contributes but it's not the the main",
    "start": "991480",
    "end": "996920"
  },
  {
    "text": "reason the main reason is that in this expression you are using X power to three power to",
    "start": "996920",
    "end": "1005600"
  },
  {
    "text": "three okay and this is this is and this is um",
    "start": "1005600",
    "end": "1012199"
  },
  {
    "text": "executed uh calling the C pow uh function in in the C library okay the PO",
    "start": "1012199",
    "end": "1020600"
  },
  {
    "text": "function it's is called transcendental so it cannot it cannot be evaluated in",
    "start": "1020600",
    "end": "1026480"
  },
  {
    "text": "one single clock as for example a multiplication or a sum okay it takes tens of Cycles CPU Cycles in order to",
    "start": "1026480",
    "end": "1034520"
  },
  {
    "text": "evaluate that okay so one first thing that numex uh",
    "start": "1034520",
    "end": "1041280"
  },
  {
    "text": "does in order to optimize the evaluation of",
    "start": "1041280",
    "end": "1046000"
  },
  {
    "text": "Expressions well here it is the the time we can see the this",
    "start": "1047360",
    "end": "1054919"
  },
  {
    "text": "um this expression here the original version and what one measure that numex",
    "start": "1054919",
    "end": "1062280"
  },
  {
    "text": "does is that uh it anal numex analyze in the flight this expression and can",
    "start": "1062280",
    "end": "1069000"
  },
  {
    "start": "1063000",
    "end": "1063000"
  },
  {
    "text": "convert uh can expand this pole things into a series of multiplications okay so",
    "start": "1069000",
    "end": "1077280"
  },
  {
    "text": "this for ex in this example Le this multiplication only takes only three",
    "start": "1077280",
    "end": "1082960"
  },
  {
    "text": "clock Cycles or two two two clock Cycles okay because one multiplication can be done in one single clock cycle and in",
    "start": "1082960",
    "end": "1091240"
  },
  {
    "text": "this case numai is using is calling po that can take tens of more or more uh",
    "start": "1091240",
    "end": "1098840"
  },
  {
    "text": "clock Cycles so this is the first one of one of the reasons why uh newx is",
    "start": "1098840",
    "end": "1105080"
  },
  {
    "text": "performing much better in this case however in this case we have uh we",
    "start": "1105080",
    "end": "1110880"
  },
  {
    "text": "don't have this uh expansion and num X",
    "start": "1110880",
    "end": "1116200"
  },
  {
    "text": "and num Pi are executing exactly the same thing okay however num X can do",
    "start": "1116200",
    "end": "1123039"
  },
  {
    "text": "better much better than num pi and in this case you are right there",
    "start": "1123039",
    "end": "1129880"
  },
  {
    "text": "are some Temporaries things from temporary objects that are making this",
    "start": "1129880",
    "end": "1137000"
  },
  {
    "text": "evaluation slower so let me explain why numai is so slower so slow in this",
    "start": "1137000",
    "end": "1147799"
  },
  {
    "text": "case well n so numex is executing this expression",
    "start": "1147880",
    "end": "1155000"
  },
  {
    "text": "three times faster around three times faster than nump so this the single the",
    "start": "1155000",
    "end": "1161120"
  },
  {
    "text": "short answer is that it it can do that because it it makes a much more efficient use of memory resource",
    "start": "1161120",
    "end": "1170600"
  },
  {
    "start": "1171000",
    "end": "1171000"
  },
  {
    "text": "so this is the short answer but in order to explain the things in detail let me",
    "start": "1171320",
    "end": "1177280"
  },
  {
    "text": "uh tell you about the CPU starvation problem that most of our current CPUs are",
    "start": "1177280",
    "end": "1183280"
  },
  {
    "text": "suffering so the thing is that uh currently uh CPUs are typically stay",
    "start": "1183280",
    "end": "1188640"
  },
  {
    "text": "bored okay and doing nothing most of the time so this is because they are waiting",
    "start": "1188640",
    "end": "1196120"
  },
  {
    "text": "for data you may have the fastest CPU in the",
    "start": "1196120",
    "end": "1201720"
  },
  {
    "text": "world but if your memory subsystem is not fast enough to fit it they are",
    "start": "1201720",
    "end": "1207760"
  },
  {
    "text": "staying doing nothing so this is a graph on how the",
    "start": "1207760",
    "end": "1214960"
  },
  {
    "start": "1209000",
    "end": "1209000"
  },
  {
    "text": "speed of um of memory in red has been evolved evolving through the time in N",
    "start": "1214960",
    "end": "1223080"
  },
  {
    "text": "second okay from 1982 till uh 2007 okay and in green we",
    "start": "1223080",
    "end": "1232000"
  },
  {
    "text": "see the speed on how the CPUs the CPU speed has been",
    "start": "1232000",
    "end": "1238960"
  },
  {
    "text": "evolving so it is evident that uh the",
    "start": "1238960",
    "end": "1245679"
  },
  {
    "text": "the two speeds are are much are being drift a lot",
    "start": "1245679",
    "end": "1254039"
  },
  {
    "text": "through the time okay so this is uh",
    "start": "1254039",
    "end": "1259280"
  },
  {
    "text": "uh and with the with the age of multicore in blue this this difference",
    "start": "1259280",
    "end": "1267080"
  },
  {
    "text": "is still uh growing more the problem with the mismatch",
    "start": "1267080",
    "end": "1275240"
  },
  {
    "text": "between uh between memory cache between memory and CPU is is so apparent",
    "start": "1275240",
    "end": "1281279"
  },
  {
    "text": "nowadays that people is writing complete books about the problem",
    "start": "1281279",
    "end": "1286679"
  },
  {
    "text": "okay so this this book appeared uh three three years ago and I think the title is",
    "start": "1286679",
    "end": "1294000"
  },
  {
    "text": "is explic explicit enough is the memory system you can't avoid it you can't ignore it you can't fake it okay so in",
    "start": "1294000",
    "end": "1303240"
  },
  {
    "text": "order to get the most out of your computers you need to understand how this memory system",
    "start": "1303240",
    "end": "1310159"
  },
  {
    "start": "1309000",
    "end": "1309000"
  },
  {
    "text": "works so this is how things are now memory latencies are much slower between",
    "start": "1310159",
    "end": "1316159"
  },
  {
    "text": "250 times and and 500 times is slower than processors",
    "start": "1316159",
    "end": "1322559"
  },
  {
    "text": "that's a lot okay and memory bandwidth is improving",
    "start": "1322559",
    "end": "1328159"
  },
  {
    "text": "at a better rate than memory latency however it is it is still much slower",
    "start": "1328159",
    "end": "1335000"
  },
  {
    "text": "than processors and it's between 30 times and 100 times",
    "start": "1335000",
    "end": "1341480"
  },
  {
    "start": "1341000",
    "end": "1341000"
  },
  {
    "text": "slower so in order to to cope with this problem what vendors are doing that are",
    "start": "1342120",
    "end": "1348520"
  },
  {
    "text": "are doing is to introduce caches in CPUs",
    "start": "1348520",
    "end": "1354039"
  },
  {
    "text": "okay so the idea on the cach is the is the that the the the caches in CPUs has",
    "start": "1354039",
    "end": "1360120"
  },
  {
    "text": "much much less latency and throughput and are much better U the the the the",
    "start": "1360120",
    "end": "1367440"
  },
  {
    "text": "latency and throw put are much better than memory main memory however the faster this the the",
    "start": "1367440",
    "end": "1374200"
  },
  {
    "text": "caches run the smaller they must be this is why this is because of heat",
    "start": "1374200",
    "end": "1382960"
  },
  {
    "text": "dissipation Pro Power dissipation problems okay you cannot put uh a lot of",
    "start": "1382960",
    "end": "1388960"
  },
  {
    "text": "memory inside of of a CPU and make it run",
    "start": "1388960",
    "end": "1395960"
  },
  {
    "text": "uh very fast because they dissipate a lot of a a lot of",
    "start": "1395960",
    "end": "1402200"
  },
  {
    "start": "1401000",
    "end": "1401000"
  },
  {
    "text": "heat so this is the the evolution of the CPU cash through the years okay",
    "start": "1402200",
    "end": "1409320"
  },
  {
    "text": "originally we only had a CPU main memory and mechanical discs okay this this this",
    "start": "1409320",
    "end": "1416279"
  },
  {
    "text": "architecture architecture is very simple to understand and it's relatively easy",
    "start": "1416279",
    "end": "1422120"
  },
  {
    "text": "to to to to to make an efficient use of memory in the '90s and 2000s we have",
    "start": "1422120",
    "end": "1430760"
  },
  {
    "text": "seen the vendors were implementing this kind of architecture in the CPUs it",
    "start": "1430760",
    "end": "1436480"
  },
  {
    "text": "appear a level one cach and then then a second level cache okay then the main",
    "start": "1436480",
    "end": "1442000"
  },
  {
    "text": "memory and then the the Diss and we will we seen in in during",
    "start": "1442000",
    "end": "1448679"
  },
  {
    "text": "this decade is that in CPUs will wear three levels of cach main memory and",
    "start": "1448679",
    "end": "1456440"
  },
  {
    "text": "another layer which is solid state discs that in many in many cases will act as a",
    "start": "1456440",
    "end": "1461760"
  },
  {
    "text": "cache of mechanical discs okay so we must be aware of this kind of",
    "start": "1461760",
    "end": "1467840"
  },
  {
    "text": "architecture if we want to get the most of of our architectures of our computers now and",
    "start": "1467840",
    "end": "1476080"
  },
  {
    "text": "this is not easy so in order to to actually improve",
    "start": "1476080",
    "end": "1485200"
  },
  {
    "start": "1481000",
    "end": "1481000"
  },
  {
    "text": "the our U our speed uh we we need to understand in",
    "start": "1485200",
    "end": "1491640"
  },
  {
    "text": "which cases CPU cach caches are effective and they are effective mainly in a couple of scenarios for the first",
    "start": "1491640",
    "end": "1498120"
  },
  {
    "text": "one is when there is time locality so this is when the basically a data set or",
    "start": "1498120",
    "end": "1503320"
  },
  {
    "text": "a small part of a data set is being redused and the second one is when there is a spatial locality that means that uh",
    "start": "1503320",
    "end": "1511000"
  },
  {
    "text": "the data set is accessed",
    "start": "1511000",
    "end": "1514480"
  },
  {
    "start": "1516000",
    "end": "1516000"
  },
  {
    "text": "sequentially okay so uh for the time",
    "start": "1517320",
    "end": "1522960"
  },
  {
    "text": "locality realize that you have an aay in memory here and you are accessing these",
    "start": "1522960",
    "end": "1529360"
  },
  {
    "text": "four elements uh repeatedly through the time okay so the first time that the CPU",
    "start": "1529360",
    "end": "1536399"
  },
  {
    "text": "needs these elements the the system has to fetch the elements from the memory",
    "start": "1536399",
    "end": "1542120"
  },
  {
    "text": "but the second time the elements has been transmitted to the cache and the",
    "start": "1542120",
    "end": "1547320"
  },
  {
    "text": "CPU only needs to fetch them from the cache okay so this is the time",
    "start": "1547320",
    "end": "1554799"
  },
  {
    "text": "locality and the special locality is when when a data set is accessed",
    "start": "1554799",
    "end": "1560399"
  },
  {
    "start": "1555000",
    "end": "1555000"
  },
  {
    "text": "sequentially okay so in modern systems when you um have for example an array",
    "start": "1560399",
    "end": "1567520"
  },
  {
    "text": "there are directions where you can retrieve data much more uh faster than",
    "start": "1567520",
    "end": "1572600"
  },
  {
    "text": "the other directions and the direction that you can retrieve data faster is when the data is",
    "start": "1572600",
    "end": "1580279"
  },
  {
    "text": "continuous okay this is because of of how memory subsystems are designed",
    "start": "1580279",
    "end": "1588760"
  },
  {
    "text": "so in this case for example when the CPU needs um to fetch this row here the",
    "start": "1588760",
    "end": "1596399"
  },
  {
    "text": "first time that it it access this element the The Continuous elements are",
    "start": "1596399",
    "end": "1602000"
  },
  {
    "text": "being transferred automatically to the cach so the second time it will get this",
    "start": "1602000",
    "end": "1607200"
  },
  {
    "text": "the elements from the cach not from the from memory and also mod mod systems has a",
    "start": "1607200",
    "end": "1615360"
  },
  {
    "text": "special um Hardware to detect patter access patterns so if the CPUs detect",
    "start": "1615360",
    "end": "1622399"
  },
  {
    "text": "detects that you are you will be accessing uh elements in this direction",
    "start": "1622399",
    "end": "1628399"
  },
  {
    "text": "he will uh uh anticip um download or prefetch this these elements here into",
    "start": "1628399",
    "end": "1636399"
  },
  {
    "text": "the cach so the CPU will retrieve the elements from the from the cash okay not",
    "start": "1636399",
    "end": "1643120"
  },
  {
    "text": "from memory of course this doesn't work if you are accessing elements in this",
    "start": "1643120",
    "end": "1649039"
  },
  {
    "text": "direction for example this is a bad this is not a good",
    "start": "1649039",
    "end": "1654960"
  },
  {
    "text": "way to travel data or just in random in random",
    "start": "1654960",
    "end": "1662799"
  },
  {
    "text": "um order okay so these is are the two",
    "start": "1662799",
    "end": "1669120"
  },
  {
    "text": "ways time locality and space locality and there is a simple technique",
    "start": "1669120",
    "end": "1676200"
  },
  {
    "start": "1672000",
    "end": "1672000"
  },
  {
    "text": "that uh ensures you that um you can access uh you can uh make an efficient",
    "start": "1676200",
    "end": "1682480"
  },
  {
    "text": "use of your caches that is called The Blocking technique the blocking technique is very easy to understand",
    "start": "1682480",
    "end": "1689679"
  },
  {
    "text": "it's just for example if you have two data sets in memory and you want to to do an operation with the data sets the",
    "start": "1689679",
    "end": "1696960"
  },
  {
    "text": "blocking technique says well just transfer blocks continuous blocks okay",
    "start": "1696960",
    "end": "1703360"
  },
  {
    "text": "into your data sets transfer them to the caches do do all the operations in Cache",
    "start": "1703360",
    "end": "1710159"
  },
  {
    "text": "because it is faster and when you have the result copy the result to the uh",
    "start": "1710159",
    "end": "1716960"
  },
  {
    "text": "data set in memory after them okay and while these blocks are in are",
    "start": "1716960",
    "end": "1724080"
  },
  {
    "text": "in cash reduce them as much as you can in order to make advantage of the time",
    "start": "1724080",
    "end": "1731600"
  },
  {
    "text": "locality okay so this is basically this technique",
    "start": "1731600",
    "end": "1738120"
  },
  {
    "text": "is basically what uh numex does okay so",
    "start": "1738120",
    "end": "1743279"
  },
  {
    "text": "this this explains explains why num X is still faster in this",
    "start": "1743279",
    "end": "1750080"
  },
  {
    "text": "situation so for example for Num Pi we we have to compute this expression",
    "start": "1750679",
    "end": "1757559"
  },
  {
    "text": "here a by B plus c n numai will need to first uh compute",
    "start": "1757559",
    "end": "1766080"
  },
  {
    "text": "this multiplication and we'll need to create this temporary in memory completely in memory okay and",
    "start": "1766080",
    "end": "1773039"
  },
  {
    "text": "then use this temporary andum some to this one to",
    "start": "1773039",
    "end": "1778840"
  },
  {
    "text": "create the final result in memory so the thing is that numai needs to put much",
    "start": "1778840",
    "end": "1787559"
  },
  {
    "text": "more memory these Temporaries uh are going are traveling to memory and this takes a lot of time",
    "start": "1787559",
    "end": "1794320"
  },
  {
    "text": "in modern systems okay on his hand what numex does is to apply the",
    "start": "1794320",
    "end": "1802240"
  },
  {
    "text": "blocking technique okay it transfers blocks small blocks of the operants to",
    "start": "1802240",
    "end": "1809120"
  },
  {
    "text": "the cach it does all the operations in Cache of course with Temporaries with",
    "start": "1809120",
    "end": "1815320"
  },
  {
    "text": "everything but the Temporaries also fits in cash that's important and then put the result on the",
    "start": "1815320",
    "end": "1823840"
  },
  {
    "text": "Final Destination okay so you completely avoid the creation of big Temporaries in",
    "start": "1823840",
    "end": "1830200"
  },
  {
    "text": "memory which is slowing down many numai operations nowadays is that",
    "start": "1830200",
    "end": "1837159"
  },
  {
    "text": "clear okay so you don't need to use numex in",
    "start": "1837159",
    "end": "1844480"
  },
  {
    "text": "order to um to use um The Blocking technique and for",
    "start": "1844480",
    "end": "1851480"
  },
  {
    "text": "example this uh this is niip that has been contributed by Stefan uh it's using",
    "start": "1851480",
    "end": "1859039"
  },
  {
    "text": "also the blocking technique for evaluating the um the the",
    "start": "1859039",
    "end": "1865320"
  },
  {
    "text": "polinomial um but using pure numai okay it only uses it makes a a",
    "start": "1865320",
    "end": "1872840"
  },
  {
    "text": "loop and it fetches um blocks blocks from the from the X and",
    "start": "1872840",
    "end": "1880399"
  },
  {
    "text": "they then do all the operations in place okay so this is how to to do the same",
    "start": "1880399",
    "end": "1888159"
  },
  {
    "text": "thing in nump and you can see that uh if we",
    "start": "1888159",
    "end": "1893399"
  },
  {
    "text": "represent the block size here in terms of the the execution",
    "start": "1893399",
    "end": "1899639"
  },
  {
    "text": "time we can see here that we have a minimum time here",
    "start": "1899639",
    "end": "1905880"
  },
  {
    "text": "okay what do you think this minimum",
    "start": "1905880",
    "end": "1911919"
  },
  {
    "text": "represents the size of the cach okay so when the block size fits in the in",
    "start": "1914279",
    "end": "1921600"
  },
  {
    "text": "cach everything runs fast whenever the block size rounds out out of the cach",
    "start": "1921600",
    "end": "1929039"
  },
  {
    "text": "your time to take the computations increase because of of memory bandwidth",
    "start": "1929039",
    "end": "1936600"
  },
  {
    "text": "not not because of we are doing more computations okay the thing is that many",
    "start": "1936600",
    "end": "1942799"
  },
  {
    "text": "times implementing this this blocking in in numai is quite in convenient okay and",
    "start": "1942799",
    "end": "1949559"
  },
  {
    "start": "1945000",
    "end": "1945000"
  },
  {
    "text": "newx can do that for you automatically and the second the second",
    "start": "1949559",
    "end": "1954799"
  },
  {
    "text": "reason for not using this is that uh numex uh numai also have some overhead",
    "start": "1954799",
    "end": "1962120"
  },
  {
    "text": "uh from fetching views and doing all these kind of of things in Python space",
    "start": "1962120",
    "end": "1968840"
  },
  {
    "text": "numex is doing the same thing in in c space so it's running much",
    "start": "1968840",
    "end": "1974360"
  },
  {
    "text": "faster yeah this is because of the in the beginning there's over head so when the when the block size is very",
    "start": "1974360",
    "end": "1981440"
  },
  {
    "text": "small this Loop is is much is much longer okay so",
    "start": "1981440",
    "end": "1987360"
  },
  {
    "text": "you have to to do much more iterations and there is an overhead of creating views in",
    "start": "1987360",
    "end": "1994039"
  },
  {
    "text": "numai okay so this this part is just a",
    "start": "1994039",
    "end": "2000000"
  },
  {
    "text": "con a consequence of this overhead here there is a good balance between the overhead of numai and the",
    "start": "2000000",
    "end": "2007480"
  },
  {
    "text": "and the and the block sizes and here you have block sizes that exceeds the CPU the CPU",
    "start": "2007480",
    "end": "2014240"
  },
  {
    "text": "size the CPU cach size yeah okay one another interesting thing",
    "start": "2014240",
    "end": "2019559"
  },
  {
    "text": "of numex is that uh I don't know which time is",
    "start": "2019559",
    "end": "2025320"
  },
  {
    "text": "it okay is that it can make use of multip",
    "start": "2025320",
    "end": "2031600"
  },
  {
    "start": "2028000",
    "end": "2028000"
  },
  {
    "text": "multi course automatically that's a really a really interesting thing and",
    "start": "2031600",
    "end": "2037200"
  },
  {
    "text": "you can do that automatically and you can even select dynamically the number of threads that you want to run in order",
    "start": "2037200",
    "end": "2044159"
  },
  {
    "text": "to evaluate your Expressions so let's make",
    "start": "2044159",
    "end": "2049839"
  },
  {
    "text": "a an exercise let's put um the number of",
    "start": "2049879",
    "end": "2055960"
  },
  {
    "text": "threads for evaluating this expression to two which is the number of cores that I have in the in my laptop and just",
    "start": "2055960",
    "end": "2065919"
  },
  {
    "text": "redo the computation by",
    "start": "2066720",
    "end": "2072919"
  },
  {
    "text": "using new",
    "start": "2075800",
    "end": "2079800"
  },
  {
    "text": "okay so by using two threads let's switch to one just to see",
    "start": "2109560",
    "end": "2117760"
  },
  {
    "text": "the difference by using one threat the time is uh 17 ccs and by using two threads",
    "start": "2117760",
    "end": "2127960"
  },
  {
    "text": "it's 11 okay so the it's it's very easy to use so it's just a a matter to select",
    "start": "2127960",
    "end": "2134920"
  },
  {
    "text": "the number of threads that you want to run that number number",
    "start": "2134920",
    "end": "2141119"
  },
  {
    "text": "process by default this this number is the number of processors that you have in your system yes yes it detects",
    "start": "2141119",
    "end": "2149119"
  },
  {
    "text": "automatically the number of Cs that you have in your processor and it it use all of them but you can you can select uh",
    "start": "2149119",
    "end": "2157520"
  },
  {
    "text": "the the number you want",
    "start": "2157520",
    "end": "2160599"
  },
  {
    "text": "automatically okay so let's have a look at a machine that has 16 cores and just",
    "start": "2163760",
    "end": "2170240"
  },
  {
    "text": "to to see how the FCC scales uh in Blue uh there is the the",
    "start": "2170240",
    "end": "2178240"
  },
  {
    "text": "non-optimized version of the of the polinomial in red we we see the the",
    "start": "2178240",
    "end": "2184599"
  },
  {
    "text": "optimized version of the polinomial and in yellow there is an interesting thing there is also there is only the",
    "start": "2184599",
    "end": "2191119"
  },
  {
    "text": "polinomial is just an X that means that we are doing just a copy operation we",
    "start": "2191119",
    "end": "2196800"
  },
  {
    "text": "are not Computing every anything just we are doing a copy the of vector X to a",
    "start": "2196800",
    "end": "2203119"
  },
  {
    "text": "vector I why okay so we can see that um the the",
    "start": "2203119",
    "end": "2211800"
  },
  {
    "text": "performance um the the the speed up is quite is quite good it can it can reduce",
    "start": "2211800",
    "end": "2219359"
  },
  {
    "text": "it can be around four times faster to run on all the 16 CPUs",
    "start": "2219359",
    "end": "2227680"
  },
  {
    "text": "okay and for the optimized version of the polinomial the times are are better",
    "start": "2227680",
    "end": "2234520"
  },
  {
    "text": "but when we have many many CPUs the the difference of time is not that much that",
    "start": "2234520",
    "end": "2240880"
  },
  {
    "text": "means that for numex you don't really mind too much if you use an optimized",
    "start": "2240880",
    "end": "2246040"
  },
  {
    "text": "version of the PO of your or not it numex is normally able to manage your",
    "start": "2246040",
    "end": "2252680"
  },
  {
    "text": "complexity for you okay and an interesting thing is that",
    "start": "2252680",
    "end": "2258280"
  },
  {
    "text": "when when you're doing not operations at all numex is able to reach uh almost uh",
    "start": "2258280",
    "end": "2266440"
  },
  {
    "text": "the the performance than if you are not doing operations at all mhm that that is",
    "start": "2266440",
    "end": "2272520"
  },
  {
    "text": "because in this case the bottleneck is memory access it's not",
    "start": "2272520",
    "end": "2278520"
  },
  {
    "text": "CPU okay so numex allows you to get",
    "start": "2278520",
    "end": "2286480"
  },
  {
    "text": "uh almost perfect",
    "start": "2286480",
    "end": "2291640"
  },
  {
    "text": "um or allows you to reach performance uh that is uh limited by by",
    "start": "2291640",
    "end": "2300880"
  },
  {
    "text": "CPU by memory bandwidth operations this is a comparison of numex",
    "start": "2300880",
    "end": "2307640"
  },
  {
    "text": "with a very very well optimized C version of the same thing by using o Open MP open MP is a",
    "start": "2307640",
    "end": "2317200"
  },
  {
    "text": "specification that uh allows is that allows you to annotate",
    "start": "2317200",
    "end": "2322280"
  },
  {
    "text": "your C code in order to produce parallel code automatically and it is supported",
    "start": "2322280",
    "end": "2327960"
  },
  {
    "text": "by by most of the of the modern compilers okay let's have a look at how",
    "start": "2327960",
    "end": "2338280"
  },
  {
    "text": "this",
    "start": "2339040",
    "end": "2341280"
  },
  {
    "text": "works so this is the C version of the EV of the polinomial",
    "start": "2345640",
    "end": "2352560"
  },
  {
    "text": "evaluation this is the interesting thing this is the loop where the polinomial is",
    "start": "2354520",
    "end": "2359800"
  },
  {
    "text": "is been computed and open MP is just as easy using open MP is just as easy as",
    "start": "2359800",
    "end": "2368640"
  },
  {
    "text": "this um annotation here with the pragma O parallel and you declare that",
    "start": "2368640",
    "end": "2377000"
  },
  {
    "text": "the what the uh the I the index this Loop can be",
    "start": "2377000",
    "end": "2383960"
  },
  {
    "text": "paralyzed okay and you can also specify the schedule if the the the open MP will",
    "start": "2383960",
    "end": "2394640"
  },
  {
    "text": "do uh an an static partition of your job or we'll do an a dynamic",
    "start": "2394640",
    "end": "2401440"
  },
  {
    "text": "partition in this case we have used a static partition because it is the most efficient one so this is uh how the open",
    "start": "2401440",
    "end": "2409839"
  },
  {
    "text": "MP works and we can see here uh so this is",
    "start": "2409839",
    "end": "2417880"
  },
  {
    "text": "the the fastest um performance that you can get from this system you can see that",
    "start": "2417880",
    "end": "2425400"
  },
  {
    "text": "numex can it's around only twice as slower than",
    "start": "2425400",
    "end": "2431359"
  },
  {
    "text": "the best uh way to compute this uh this polinomial okay this is very interesting",
    "start": "2431359",
    "end": "2439760"
  },
  {
    "text": "thing because you know that numex is interpreted and this code is um is",
    "start": "2439760",
    "end": "2446040"
  },
  {
    "text": "compiled okay so without any effort or very little effort numex can help to you",
    "start": "2446040",
    "end": "2452359"
  },
  {
    "text": "to accelerate your computations",
    "start": "2452359",
    "end": "2456799"
  },
  {
    "text": "here is a a comparison with a version of C uh of open MP in C which is doing only",
    "start": "2459280",
    "end": "2466440"
  },
  {
    "text": "a memory copy okay and we can see that the performance is very similar than the",
    "start": "2466440",
    "end": "2473079"
  },
  {
    "text": "to that evaluating the polinomial this is because this problem is basically",
    "start": "2473079",
    "end": "2478520"
  },
  {
    "text": "memory bandwidth limited bounded for problems that that are not",
    "start": "2478520",
    "end": "2486599"
  },
  {
    "text": "me memory with bounded for example competing",
    "start": "2486599",
    "end": "2491640"
  },
  {
    "text": "transcendental functions like the s or or cosine the scalability of numex it's",
    "start": "2491640",
    "end": "2497920"
  },
  {
    "text": "is much better okay because you don't have this bandwidth limitation you are",
    "start": "2497920",
    "end": "2503040"
  },
  {
    "text": "using your course much more effectively MH but",
    "start": "2503040",
    "end": "2508838"
  },
  {
    "text": "still yes and you can see here also an interesting thing is that uh this uh",
    "start": "2509440",
    "end": "2516400"
  },
  {
    "text": "this machine doesn't have uh 16 physical cores it only has eight physical cores",
    "start": "2516400",
    "end": "2523119"
  },
  {
    "text": "and the rest of the cores are logical we this this machine is using Intel hyper",
    "start": "2523119",
    "end": "2528560"
  },
  {
    "text": "threading okay so this logical cores here are this hyper threaded hyper",
    "start": "2528560",
    "end": "2535560"
  },
  {
    "text": "threaded ones but we we can see that after the eight the speed that hyper",
    "start": "2535560",
    "end": "2542680"
  },
  {
    "text": "threading can uh give us is around um",
    "start": "2542680",
    "end": "2548200"
  },
  {
    "text": "30% can give us a 30% um better speed so",
    "start": "2548200",
    "end": "2553359"
  },
  {
    "text": "hyper threading is not only hype it works okay 30% is not is not that",
    "start": "2553359",
    "end": "2563359"
  },
  {
    "start": "2563000",
    "end": "2563000"
  },
  {
    "text": "bad okay so but numex also has uh",
    "start": "2564280",
    "end": "2569800"
  },
  {
    "text": "limitations and for example uh numex one of the limitations is that numex only",
    "start": "2569800",
    "end": "2576119"
  },
  {
    "text": "implements ele El wise operations okay so we can you can only deal with",
    "start": "2576119",
    "end": "2582240"
  },
  {
    "text": "Expressions that where you can do operations element by element but using",
    "start": "2582240",
    "end": "2588760"
  },
  {
    "text": "always the same index between the vectors okay or matrices in particular you cannot do",
    "start": "2588760",
    "end": "2595400"
  },
  {
    "text": "this sort of things by using numex for example we are using an",
    "start": "2595400",
    "end": "2602119"
  },
  {
    "text": "index a different index here than in in the same in the same um iteration of the",
    "start": "2602119",
    "end": "2609160"
  },
  {
    "text": "loop we're using index I index I but index IUS one so this cannot this sort",
    "start": "2609160",
    "end": "2616160"
  },
  {
    "text": "of things cannot be done with numex okay",
    "start": "2616160",
    "end": "2622400"
  },
  {
    "start": "2622000",
    "end": "2622000"
  },
  {
    "text": "so this is where syon can help",
    "start": "2622400",
    "end": "2628359"
  },
  {
    "text": "Okay and this is the second part of the tutorial and syon is a language that is",
    "start": "2628359",
    "end": "2635880"
  },
  {
    "text": "very similar in syntax with to python as we will see uh it generates C extensions so it's",
    "start": "2635880",
    "end": "2642559"
  },
  {
    "text": "compiled it is not interpreted but uh and the most",
    "start": "2642559",
    "end": "2649359"
  },
  {
    "text": "important capability of syon is that it is very easy to access both C and python",
    "start": "2649359",
    "end": "2655720"
  },
  {
    "text": "libraries uh from from it and it's very useful for gluing C C++ libraries with",
    "start": "2655720",
    "end": "2663599"
  },
  {
    "text": "cyon in addition it it integrates very well with pi as we will see too and also",
    "start": "2663599",
    "end": "2670000"
  },
  {
    "text": "has support for multicores right on the on the on the on the language this capability has been implemented in the",
    "start": "2670000",
    "end": "2677520"
  },
  {
    "text": "the past August it's it's really important and we are going to exercise",
    "start": "2677520",
    "end": "2682559"
  },
  {
    "text": "that to so uh if you want to go to the exercises",
    "start": "2682559",
    "end": "2691040"
  },
  {
    "text": "exercises scyon poly directory you will see",
    "start": "2691040",
    "end": "2697200"
  },
  {
    "text": "an example of",
    "start": "2702359",
    "end": "2705480"
  },
  {
    "text": "Performing okay I think I have problems",
    "start": "2721040",
    "end": "2726200"
  },
  {
    "text": "can you see the code yes so this is a a",
    "start": "2747599",
    "end": "2752720"
  },
  {
    "text": "sample an example of uh syon code the syntax is very similar to to python",
    "start": "2752720",
    "end": "2760800"
  },
  {
    "text": "okay you only have different uh things for example this cimport thing doesn't",
    "start": "2760800",
    "end": "2766240"
  },
  {
    "text": "doesn't exist in in Python but that means that uh this numai uh library has",
    "start": "2766240",
    "end": "2773960"
  },
  {
    "text": "to be imported in order um in CS space in order to get access to the c cap to",
    "start": "2773960",
    "end": "2780400"
  },
  {
    "text": "the C API of uh of numai then another difference is that",
    "start": "2780400",
    "end": "2786960"
  },
  {
    "text": "this C def uh function means",
    "start": "2786960",
    "end": "2792240"
  },
  {
    "text": "that it can be only called from CS space in in that case from syon space not not",
    "start": "2792240",
    "end": "2798720"
  },
  {
    "text": "from python space okay and you can you can also type the",
    "start": "2798720",
    "end": "2805680"
  },
  {
    "text": "result the outcome of your um of your functions and also the types",
    "start": "2805680",
    "end": "2812480"
  },
  {
    "text": "of the parameters so it's a kind of a mix of uh of",
    "start": "2812480",
    "end": "2817520"
  },
  {
    "text": "and with but with the syntax syntax of of syon in that case we evaluate the",
    "start": "2817520",
    "end": "2823040"
  },
  {
    "text": "polinomial here",
    "start": "2823040",
    "end": "2830000"
  },
  {
    "text": "and we declare another function which is called poly that takes a couple of",
    "start": "2833960",
    "end": "2840319"
  },
  {
    "text": "parameters here this is a function it is called it is Def is not CDE that means",
    "start": "2840319",
    "end": "2846240"
  },
  {
    "text": "that this function can be called stri from python directly",
    "start": "2846240",
    "end": "2852440"
  },
  {
    "text": "okay and this do these two parameters the types of the these two parameters",
    "start": "2852440",
    "end": "2857880"
  },
  {
    "text": "are pure uh ND arrays that means that from python you",
    "start": "2857880",
    "end": "2863760"
  },
  {
    "text": "can pass the this these arguments as um numai arrays and you can manipulate here",
    "start": "2863760",
    "end": "2871440"
  },
  {
    "text": "the arrays uh much more efficiently by declaring that they are and the",
    "start": "2871440",
    "end": "2878000"
  },
  {
    "text": "arrays okay so let me show you how this is",
    "start": "2878000",
    "end": "2883040"
  },
  {
    "text": "called from um from python",
    "start": "2883040",
    "end": "2889558"
  },
  {
    "text": "space from python space is just a matter of importing the poly which is the",
    "start": "2890480",
    "end": "2895559"
  },
  {
    "text": "extension that has been generated by the syon sources that we have",
    "start": "2895559",
    "end": "2901000"
  },
  {
    "text": "seen we generate this uh Vector X vector",
    "start": "2901000",
    "end": "2906240"
  },
  {
    "text": "and we generate a contain an empty container for the for the for the",
    "start": "2906240",
    "end": "2911440"
  },
  {
    "text": "outcome of the Pol of the polinomial computation okay and then the only thing",
    "start": "2911440",
    "end": "2917400"
  },
  {
    "text": "we we we need to do is to call the poly function that is um this part of the",
    "start": "2917400",
    "end": "2925720"
  },
  {
    "text": "poly C extension and we pass the X which is a",
    "start": "2925720",
    "end": "2932160"
  },
  {
    "text": "num um a NP array and the why it is another n array",
    "start": "2932160",
    "end": "2937480"
  },
  {
    "text": "that's all okay this is the way you can you can access to the C extension that",
    "start": "2937480",
    "end": "2944559"
  },
  {
    "text": "is created by by this code okay so let's uh run it and let's",
    "start": "2944559",
    "end": "2954440"
  },
  {
    "text": "see how it can accelerate this this sort of",
    "start": "2954440",
    "end": "2960078"
  },
  {
    "text": "computations so let me show you very very briefly",
    "start": "2960359",
    "end": "2967880"
  },
  {
    "text": "how to compile how to create a setup",
    "start": "2967880",
    "end": "2973520"
  },
  {
    "text": "Pi py in order to create the extension so the only thing is to import the these",
    "start": "2973520",
    "end": "2981319"
  },
  {
    "text": "two tals and then declare that we are going to build an extension",
    "start": "2981319",
    "end": "2987160"
  },
  {
    "text": "okay the source code is here poly. p p x",
    "start": "2987160",
    "end": "2992680"
  },
  {
    "text": "and we you can pass different compile arguments this is for the parallel version that we will be seeing",
    "start": "2992680",
    "end": "3000680"
  },
  {
    "text": "soon and then adding some meta information to to the to the package",
    "start": "3000680",
    "end": "3006400"
  },
  {
    "text": "that's uh very easy to create this and",
    "start": "3006400",
    "end": "3014000"
  },
  {
    "text": "then to create extension is just a matter of using the thiss package in",
    "start": "3017559",
    "end": "3025440"
  },
  {
    "text": "order to create set up the build extension in place this flag means that we want the",
    "start": "3025440",
    "end": "3032720"
  },
  {
    "text": "extension to be in the the directory in the working",
    "start": "3032720",
    "end": "3037559"
  },
  {
    "text": "directory okay cython has uh created a C file out",
    "start": "3039240",
    "end": "3047119"
  },
  {
    "text": "of the of the source file and then it pass it compiles the result with GCC mhm",
    "start": "3047119",
    "end": "3056400"
  },
  {
    "text": "and it creates a a a library here A C",
    "start": "3056400",
    "end": "3062720"
  },
  {
    "text": "extension so if we run the result using",
    "start": "3062720",
    "end": "3069240"
  },
  {
    "text": "the over script we can see the result here okay",
    "start": "3069280",
    "end": "3076760"
  },
  {
    "text": "so syon allows to to run this in uh 40s",
    "start": "3076760",
    "end": "3082920"
  },
  {
    "text": "45 cencs which curiously is much is much um",
    "start": "3082920",
    "end": "3089480"
  },
  {
    "text": "much more time than it takes um newx",
    "start": "3089480",
    "end": "3095280"
  },
  {
    "text": "so something is has been is is is going wrong because in general with syon you",
    "start": "3095280",
    "end": "3102079"
  },
  {
    "text": "can get much more speed than with new so let's have a look at how we can optimize",
    "start": "3102079",
    "end": "3109400"
  },
  {
    "text": "our our syon code for this syon provides a nice uh",
    "start": "3109400",
    "end": "3117599"
  },
  {
    "text": "tool which is a way to annotate your code so if you use scyon menus minus",
    "start": "3117599",
    "end": "3127640"
  },
  {
    "text": "a you have this will",
    "start": "3132359",
    "end": "3136720"
  },
  {
    "text": "produce an HTML file which is the notated version of this one let's open",
    "start": "3139720",
    "end": "3146160"
  },
  {
    "text": "this annotated version in our",
    "start": "3146160",
    "end": "3153960"
  },
  {
    "text": "browser okay it's here let me reload",
    "start": "3153960",
    "end": "3159000"
  },
  {
    "text": "this okay so in the not",
    "start": "3164799",
    "end": "3169880"
  },
  {
    "text": "version uh the yellow the the line is the the the darker the yellow is",
    "start": "3169880",
    "end": "3177160"
  },
  {
    "text": "the most operations needs to complete okay so we must focus on very dark",
    "start": "3177160",
    "end": "3184760"
  },
  {
    "text": "yellow lines in order to optimize over code",
    "start": "3184760",
    "end": "3190599"
  },
  {
    "text": "okay for example here we have",
    "start": "3190599",
    "end": "3196520"
  },
  {
    "text": "a if you click on on this line you can",
    "start": "3196520",
    "end": "3201640"
  },
  {
    "text": "see the output that syon is is um uh um",
    "start": "3201640",
    "end": "3207559"
  },
  {
    "text": "is creating for this line and this output is in C",
    "start": "3207559",
    "end": "3214119"
  },
  {
    "text": "okay so we have a lot of things here but",
    "start": "3214119",
    "end": "3219720"
  },
  {
    "text": "we cannot do very much about optimizing this okay but let's focus on this uh",
    "start": "3219720",
    "end": "3226799"
  },
  {
    "text": "this uh yellow lines here",
    "start": "3226799",
    "end": "3231400"
  },
  {
    "text": "okay this is a simple assignment here x x i equals the I element of uh the X",
    "start": "3237119",
    "end": "3246319"
  },
  {
    "text": "Vector okay and it is creating a lot of um uh overhead python uh python overhead",
    "start": "3246319",
    "end": "3255520"
  },
  {
    "text": "calling uh py flat from Noel conversions so this this thing is being executed",
    "start": "3255520",
    "end": "3262799"
  },
  {
    "text": "mostly in in Python space because it is calling cython uh python",
    "start": "3262799",
    "end": "3269640"
  },
  {
    "text": "AP python functions",
    "start": "3269640",
    "end": "3274720"
  },
  {
    "text": "so here's the same thing and here",
    "start": "3275799",
    "end": "3281240"
  },
  {
    "text": "too so how we can optimize that",
    "start": "3281240",
    "end": "3286520"
  },
  {
    "text": "well let's have a",
    "start": "3289000",
    "end": "3292599"
  },
  {
    "start": "3294000",
    "end": "3294000"
  },
  {
    "text": "look at um another version which is called poly",
    "start": "3294040",
    "end": "3299559"
  },
  {
    "text": "static and let's see how it differs from our current",
    "start": "3299559",
    "end": "3306079"
  },
  {
    "text": "version okay so these changes are are not important the important changes are",
    "start": "3315680",
    "end": "3323039"
  },
  {
    "text": "here okay this uh this version add um a static typing of several",
    "start": "3323039",
    "end": "3331160"
  },
  {
    "text": "variables in our Loops that's really critical if we want to get the the most",
    "start": "3331160",
    "end": "3337880"
  },
  {
    "text": "performance in our syon files so let's copy this file here",
    "start": "3337880",
    "end": "3346359"
  },
  {
    "text": "and let's have a",
    "start": "3358799",
    "end": "3361480"
  },
  {
    "text": "look no",
    "start": "3364160",
    "end": "3368160"
  },
  {
    "text": "okay so by declaring this variabl here I Ven and XY XI and Y A we can see that U",
    "start": "3386400",
    "end": "3397440"
  },
  {
    "text": "we are we are specifying to the to syon that these variables are Longs and are",
    "start": "3397440",
    "end": "3403000"
  },
  {
    "text": "doubles okay so syon with this information can create much more optimized C code let's have a look at",
    "start": "3403000",
    "end": "3410440"
  },
  {
    "text": "the new code that syon generates",
    "start": "3410440",
    "end": "3414920"
  },
  {
    "text": "we create the notated",
    "start": "3416760",
    "end": "3420280"
  },
  {
    "text": "version this is the the do version and with if I do",
    "start": "3428039",
    "end": "3433319"
  },
  {
    "text": "reload we can see how these two lines here that has been uh represented in",
    "start": "3433319",
    "end": "3440319"
  },
  {
    "text": "yellow now are turned to White okay that means that the this lines doesn't expand",
    "start": "3440319",
    "end": "3449079"
  },
  {
    "text": "to to python code it only expands to C code okay so they are much more",
    "start": "3449079",
    "end": "3455079"
  },
  {
    "text": "efficient as these lines are in the middle of a loop the the the the the Boost can",
    "start": "3455079",
    "end": "3464920"
  },
  {
    "text": "be not uh can be important so let's uh",
    "start": "3464920",
    "end": "3470200"
  },
  {
    "text": "compile again with a new version",
    "start": "3470200",
    "end": "3476359"
  },
  {
    "text": "and now run",
    "start": "3476359",
    "end": "3479880"
  },
  {
    "text": "it so from I think it was uh 45 before",
    "start": "3486319",
    "end": "3492039"
  },
  {
    "text": "just by by doing this this static static typing the time",
    "start": "3492039",
    "end": "3498000"
  },
  {
    "text": "has uh decreased by a factor of three which is",
    "start": "3498000",
    "end": "3503640"
  },
  {
    "text": "really really really interesting okay okay",
    "start": "3503640",
    "end": "3509000"
  },
  {
    "text": "so and in fact this number is very close to uh what um newx is doing in fact it's",
    "start": "3509000",
    "end": "3518480"
  },
  {
    "text": "it is it is it is better this this time than newx using only one CPU okay",
    "start": "3518480",
    "end": "3527558"
  },
  {
    "text": "so let's go with uh how to paraly this uh this code with syon tool",
    "start": "3528359",
    "end": "3537599"
  },
  {
    "text": "doing this in syon is",
    "start": "3538240",
    "end": "3544400"
  },
  {
    "text": "also quite",
    "start": "3544960",
    "end": "3548240"
  },
  {
    "text": "easy so this is the the parallel version of the of the same code and we import",
    "start": "3559440",
    "end": "3565880"
  },
  {
    "text": "here a special feature which is called P range P range is the standard way to",
    "start": "3565880",
    "end": "3571160"
  },
  {
    "text": "parallelize Loops in syon okay so and here we have we we have added",
    "start": "3571160",
    "end": "3579200"
  },
  {
    "text": "another um um flag to this uh to this function which is called No Gil how many",
    "start": "3579200",
    "end": "3587280"
  },
  {
    "text": "of you know knows about Gil what Gil is okay so most of you for those you you",
    "start": "3587280",
    "end": "3594799"
  },
  {
    "text": "don't know Gil means stands for Global interpreted log okay so it's a well some",
    "start": "3594799",
    "end": "3603000"
  },
  {
    "text": "some call it a feature some call it back but um it's",
    "start": "3603000",
    "end": "3608799"
  },
  {
    "text": "a it's a log that is implemented in in in Python that",
    "start": "3608799",
    "end": "3614599"
  },
  {
    "text": "prevents from several threads to run in parallel okay so this is a a common",
    "start": "3614599",
    "end": "3621319"
  },
  {
    "text": "limitation of python applications that they have to fight with the Gil in general",
    "start": "3621319",
    "end": "3626599"
  },
  {
    "text": "so the way that syon has to fight with Jill is uh with the Gil is that he can",
    "start": "3626599",
    "end": "3632839"
  },
  {
    "text": "release the the Gil the Gil can be released when when calculations are are",
    "start": "3632839",
    "end": "3638680"
  },
  {
    "text": "been done in CS space not in Python space so syon can generate syon C code",
    "start": "3638680",
    "end": "3645520"
  },
  {
    "text": "so this is one of the reasons syon can't get rid of the Gill so this is a way to",
    "start": "3645520",
    "end": "3651039"
  },
  {
    "text": "specify hey my function will not needit the Gill so",
    "start": "3651039",
    "end": "3657280"
  },
  {
    "text": "please U generates code that doesn't depend on",
    "start": "3657280",
    "end": "3663039"
  },
  {
    "text": "the Gil but here is just a declarative thing",
    "start": "3663039",
    "end": "3668520"
  },
  {
    "text": "where the hill is actually released is here so this was before for I in range",
    "start": "3668520",
    "end": "3676480"
  },
  {
    "text": "okay and now you by using p range we have to make sure that we put this nogil",
    "start": "3676480",
    "end": "3683319"
  },
  {
    "text": "parameter to true so we are telling he we're telling to to syon here that we want to release",
    "start": "3683319",
    "end": "3691280"
  },
  {
    "text": "the Gill when we are performing the loops in the in this",
    "start": "3691280",
    "end": "3698960"
  },
  {
    "text": "computation okay and also you can select the schedule to be dynamic or static",
    "start": "3698960",
    "end": "3705200"
  },
  {
    "text": "because this implementation of par of parallelism in syon is based on open MP",
    "start": "3705200",
    "end": "3711039"
  },
  {
    "text": "as we have seen before Okay so let's make use of this new",
    "start": "3711039",
    "end": "3718279"
  },
  {
    "text": "version of the",
    "start": "3718279",
    "end": "3721599"
  },
  {
    "text": "parallel let's copy",
    "start": "3723359",
    "end": "3727400"
  },
  {
    "text": "this and execute compile okay and then",
    "start": "3736359",
    "end": "3744279"
  },
  {
    "text": "run this way this this um this time we we will running the parallel version of",
    "start": "3744279",
    "end": "3751920"
  },
  {
    "text": "um of the of the of the polinomial of the",
    "start": "3751920",
    "end": "3757798"
  },
  {
    "text": "computation and we can see that well my laptop only has two two CPUs but we we",
    "start": "3758400",
    "end": "3766319"
  },
  {
    "text": "were able to see a good speed up from 12 to 9",
    "start": "3766319",
    "end": "3771960"
  },
  {
    "text": "CCS which is really nice so here we have a",
    "start": "3771960",
    "end": "3777838"
  },
  {
    "text": "uh a plot where we can see the speed apps that can be achieved by using the",
    "start": "3777920",
    "end": "3783079"
  },
  {
    "text": "parallel version of our code by using syon Okay curiously enough it is a bump",
    "start": "3783079",
    "end": "3790559"
  },
  {
    "text": "that when using hyper threading it seems that that um the performance degrades I",
    "start": "3790559",
    "end": "3797440"
  },
  {
    "text": "don't know exactly this is why this is but um well this is the results that I",
    "start": "3797440",
    "end": "3803440"
  },
  {
    "text": "get but in general this uh this performance seems",
    "start": "3803440",
    "end": "3811000"
  },
  {
    "text": "better well this is a comparison between I don't know if I have time to",
    "start": "3811000",
    "end": "3817160"
  },
  {
    "text": "explain it yeah maybe okay so we also have seen that",
    "start": "3817160",
    "end": "3825760"
  },
  {
    "text": "um syon provides a way to distribute the job",
    "start": "3825760",
    "end": "3833440"
  },
  {
    "text": "differently this is not",
    "start": "3833440",
    "end": "3837720"
  },
  {
    "text": "to distribute the job among the different CPUs okay by by",
    "start": "3847680",
    "end": "3852880"
  },
  {
    "text": "default it uses I think in fact the open MP doesn't specify what the default is",
    "start": "3852880",
    "end": "3859440"
  },
  {
    "text": "but most of the platforms use the static partition of of the jobs but you can",
    "start": "3859440",
    "end": "3864880"
  },
  {
    "text": "also specify Dynamic partition of the jobs Dynamic partition means that instead of splitting your your data",
    "start": "3864880",
    "end": "3872319"
  },
  {
    "text": "domain in even uh partitions the the the dynamic thing means that it splits uh",
    "start": "3872319",
    "end": "3880559"
  },
  {
    "text": "only it you only splits uh only uses a few partitions first send the partitions",
    "start": "3880559",
    "end": "3886680"
  },
  {
    "text": "to the to the CPUs get the results back and whenever uh when a a core has",
    "start": "3886680",
    "end": "3892640"
  },
  {
    "text": "finished with his job the the master will send another job to the CPU okay so",
    "start": "3892640",
    "end": "3898559"
  },
  {
    "text": "it has to wait until the the job has done and the static partition means that",
    "start": "3898559",
    "end": "3905480"
  },
  {
    "text": "it everything is is um has the same size the your your range",
    "start": "3905480",
    "end": "3911440"
  },
  {
    "text": "domain and it is sent to every to every CPU U one after the other okay so this",
    "start": "3911440",
    "end": "3920039"
  },
  {
    "text": "has more more um overhead because it implies some hunch take",
    "start": "3920039",
    "end": "3928559"
  },
  {
    "text": "but and we can see here that for the polinomial",
    "start": "3928559",
    "end": "3935520"
  },
  {
    "text": "computations uh the static the static uh partition is works much more efficiently",
    "start": "3935520",
    "end": "3941000"
  },
  {
    "text": "than using Dynamic one okay but it this is not always this",
    "start": "3941000",
    "end": "3948400"
  },
  {
    "text": "the the case because for example for doing a a computation of the Mandel BR",
    "start": "3948400",
    "end": "3954599"
  },
  {
    "text": "set as as many of you will know Computing this black uh pixels here",
    "start": "3954599",
    "end": "3960799"
  },
  {
    "text": "takes much more time than Computing the um the blue ones",
    "start": "3960799",
    "end": "3967039"
  },
  {
    "text": "okay so if we apply the different SCH",
    "start": "3967039",
    "end": "3972160"
  },
  {
    "text": "schedulers to this uh problem we can see that the dynamic a dynamic partition",
    "start": "3972160",
    "end": "3979520"
  },
  {
    "text": "Works scales much better than the static one okay",
    "start": "3979520",
    "end": "3986279"
  },
  {
    "text": "this is this is because the the time that it takes to",
    "start": "3986279",
    "end": "3992520"
  },
  {
    "text": "compute the pixels is not always the same so at a dynamic partition in",
    "start": "3992520",
    "end": "3998039"
  },
  {
    "text": "general it's uh is is is better you can see the the C code for",
    "start": "3998039",
    "end": "4005920"
  },
  {
    "text": "this uh for this evaluation also in in the exercises",
    "start": "4005920",
    "end": "4012559"
  },
  {
    "text": "tball Okay so to conclude let's see how the parallel",
    "start": "4013680",
    "end": "4022680"
  },
  {
    "text": "implementation of syon can compare with uh the pure C open andp uh version",
    "start": "4022680",
    "end": "4030599"
  },
  {
    "text": "okay so the parallel version of syon is in blue and the cop MP is in is in red",
    "start": "4030599",
    "end": "4037160"
  },
  {
    "text": "okay so for One processor syon has some overhead but this overhead reduces",
    "start": "4037160",
    "end": "4046319"
  },
  {
    "text": "as as we are using more processors as we are throwing more processors into the",
    "start": "4046319",
    "end": "4051799"
  },
  {
    "text": "into the computation okay and in fact for eight the time is more or less the",
    "start": "4051799",
    "end": "4058279"
  },
  {
    "text": "same even even for for seven the time is exactly the same than using the pure",
    "start": "4058279",
    "end": "4064760"
  },
  {
    "text": "open MP C version so that means that with syon you can actually get all the",
    "start": "4064760",
    "end": "4071880"
  },
  {
    "text": "performance from your from your applications okay that's really interesting and we just",
    "start": "4071880",
    "end": "4078880"
  },
  {
    "text": "for for curiosity uh the openmp version of doing",
    "start": "4078880",
    "end": "4085319"
  },
  {
    "text": "the copy doing this one the performance is exactly the same",
    "start": "4085319",
    "end": "4091880"
  },
  {
    "text": "than um than using well we we already have seen this this result okay that",
    "start": "4091880",
    "end": "4098719"
  },
  {
    "text": "evaluating the polinomial is the same thing it takes the same time than just copying the the X the Vector to",
    "start": "4098719",
    "end": "4108359"
  },
  {
    "text": "Y this is the same exactly the same plot but instead of representing times in",
    "start": "4111839",
    "end": "4117960"
  },
  {
    "text": "this uh in this axis I have represented memory bandwidth okay so this a really",
    "start": "4117960",
    "end": "4127440"
  },
  {
    "text": "interesting plot because we can we see that when we reach a number of of CPUs",
    "start": "4127440",
    "end": "4135199"
  },
  {
    "text": "we we are mainly limited",
    "start": "4135199",
    "end": "4141199"
  },
  {
    "text": "by by the memory bandwidth of this machine the memory bandwidth of this machine is around 16 GB per second okay",
    "start": "4141199",
    "end": "4150080"
  },
  {
    "text": "so we can see that adding more CPUs is not going to speed up our our",
    "start": "4150080",
    "end": "4156040"
  },
  {
    "text": "computations because this this for this particular problem this machine is",
    "start": "4156040",
    "end": "4162159"
  },
  {
    "text": "already um delivering all the band with it it can provide",
    "start": "4162159",
    "end": "4169318"
  },
  {
    "text": "mhm and uh yeah that's uh interesting yeah yeah",
    "start": "4169319",
    "end": "4176600"
  },
  {
    "text": "yeah I understand exactly you have here uh in in X there is 10 million Elements",
    "start": "4176600",
    "end": "4183758"
  },
  {
    "text": "which are double precision and here you have also 10 million so I sum the both",
    "start": "4183759",
    "end": "4189798"
  },
  {
    "text": "and I get the work set size and just uh divide by the time",
    "start": "4189799",
    "end": "4196880"
  },
  {
    "text": "and here is it is a final comparison among numex in blue scon parallel in red",
    "start": "4201679",
    "end": "4209400"
  },
  {
    "text": "and cop and P in yellow okay numex is the",
    "start": "4209400",
    "end": "4215520"
  },
  {
    "text": "lowest consistently the lowest that but the advantage of newx as as I said",
    "start": "4215520",
    "end": "4221560"
  },
  {
    "text": "before is that it is interpreted okay so you don't need the compile step in order",
    "start": "4221560",
    "end": "4227199"
  },
  {
    "text": "to to get this speeds then when you want absolutely want uh the highest speed the best thing",
    "start": "4227199",
    "end": "4235440"
  },
  {
    "text": "to use is syon parallel because you can reach more or less the same the same",
    "start": "4235440",
    "end": "4241719"
  },
  {
    "text": "speed than than using purec open and P application especially if you use a",
    "start": "4241719",
    "end": "4248920"
  },
  {
    "text": "sensible number of CPUs for example when you starting to use more than C Core four cores in this in this example",
    "start": "4248920",
    "end": "4256080"
  },
  {
    "text": "you are you are reaching more or less the same speed than than a pure c um",
    "start": "4256080",
    "end": "4266559"
  },
  {
    "text": "computation okay that would you restrict the number",
    "start": "4267520",
    "end": "4272719"
  },
  {
    "text": "of threads to maybe it's a good idea for example",
    "start": "4272719",
    "end": "4278280"
  },
  {
    "text": "here we can see that with with 10 threats we are getting worse worse results that using using for example",
    "start": "4278280",
    "end": "4286239"
  },
  {
    "text": "seven threads so yes it putting more cores to your application is not always",
    "start": "4286239",
    "end": "4291840"
  },
  {
    "text": "a good idea so it's always uh nice to to do some basem marks because maybe there",
    "start": "4291840",
    "end": "4297239"
  },
  {
    "text": "is an optimal number of CES that can execute your code more efficiently so",
    "start": "4297239",
    "end": "4302560"
  },
  {
    "text": "it's always a nice thing to uh to do some basem marks and explore which is",
    "start": "4302560",
    "end": "4308320"
  },
  {
    "text": "your ideal number of cores for your computations yeah good question",
    "start": "4308320",
    "end": "4316280"
  },
  {
    "text": "the reason is when you put you know most of uh mod computers are memory B with",
    "start": "4316679",
    "end": "4323400"
  },
  {
    "text": "limited when you put a lot of cores trying to access memory at the same time you are pushing a lot of pressure on",
    "start": "4323400",
    "end": "4329600"
  },
  {
    "text": "your memory system so memory system okay so in many in many use cases it is best",
    "start": "4329600",
    "end": "4337760"
  },
  {
    "text": "it is better to reduce the number of CES that are accessing are make are doing pressure on your memory subsystem okay",
    "start": "4337760",
    "end": "4345199"
  },
  {
    "text": "and this is why you you could get this sort the these sort of things another important thing that you may you may",
    "start": "4345199",
    "end": "4353040"
  },
  {
    "text": "want to see here is that this is just um a copy",
    "start": "4353040",
    "end": "4358639"
  },
  {
    "text": "okay um I I don't know exactly how this is um this is uh implemented in Hardware",
    "start": "4358639",
    "end": "4368000"
  },
  {
    "text": "at Hardware level but one interesting thing is that a single copy can be more",
    "start": "4368000",
    "end": "4374440"
  },
  {
    "text": "efficient if you use more CPUs this is a striking result because",
    "start": "4374440",
    "end": "4380080"
  },
  {
    "text": "you don't expect initially a m cpy going faster if you if you use more",
    "start": "4380080",
    "end": "4385800"
  },
  {
    "text": "more cores than than one in principle you expect what you expect is to reach",
    "start": "4385800",
    "end": "4392480"
  },
  {
    "text": "the highest performance by using one MIM cpy call okay you expect that but the",
    "start": "4392480",
    "end": "4399679"
  },
  {
    "text": "the TR the the reality is that I consistently get this kind of speed UPS",
    "start": "4399679",
    "end": "4405679"
  },
  {
    "text": "in in copy in in in copy uh operations when you use when I",
    "start": "4405679",
    "end": "4412719"
  },
  {
    "text": "use several CPUs I don't know the explanation of this if anyone can bring",
    "start": "4412719",
    "end": "4418800"
  },
  {
    "text": "some light here I would be Greatful you understand the the",
    "start": "4418800",
    "end": "4426679"
  },
  {
    "text": "problem I don't know anyway and of course I in my",
    "start": "4426679",
    "end": "4434159"
  },
  {
    "text": "opinion the this uh dependency of the number of cores uh in in doing the copy is the the",
    "start": "4434159",
    "end": "4442400"
  },
  {
    "text": "the most important reason why we see spaps when doing um memory bound with um",
    "start": "4442400",
    "end": "4450600"
  },
  {
    "text": "bounded uh operations these operations is basically",
    "start": "4450600",
    "end": "4457120"
  },
  {
    "text": "memory bandwidth bounded and this this kind of operations is Are Not Unusual",
    "start": "4457120",
    "end": "4464080"
  },
  {
    "text": "the usual operations nowadays are all all memory bandwidth okay memory",
    "start": "4464080",
    "end": "4470639"
  },
  {
    "text": "bandwidth",
    "start": "4470639",
    "end": "4473080"
  },
  {
    "text": "limited okay so that's all that I wanted to to",
    "start": "4477280",
    "end": "4483320"
  },
  {
    "text": "say just uh remind that uh nump is the factor container for for python in The",
    "start": "4483320",
    "end": "4490400"
  },
  {
    "text": "Big Data area era and that numai has performance Pro",
    "start": "4490400",
    "end": "4497159"
  },
  {
    "text": "problems when evaluated Com when evaluating complex expressions and that numex and syon can help to solve this",
    "start": "4497159",
    "end": "4504840"
  },
  {
    "text": "numex and and syon has um different uh",
    "start": "4504840",
    "end": "4509880"
  },
  {
    "text": "different uh areas of application but in in some areas they can they",
    "start": "4509880",
    "end": "4516480"
  },
  {
    "text": "can they can I don't know overlap yes thank",
    "start": "4516480",
    "end": "4521840"
  },
  {
    "text": "you so it's up to you which one you want want to use uh they are both very",
    "start": "4521840",
    "end": "4528400"
  },
  {
    "text": "interesting tools to to use okay see if you are more interested",
    "start": "4528400",
    "end": "4534639"
  },
  {
    "text": "in about the the CPU starving problem uh I've writeen a an article",
    "start": "4534639",
    "end": "4542400"
  },
  {
    "text": "about this why mod than CPUs are starving and what can be done about it",
    "start": "4542400",
    "end": "4547800"
  },
  {
    "text": "and for knowing more about newx uh there is a nice overview in the",
    "start": "4547800",
    "end": "4554639"
  },
  {
    "text": "on the website and using parallelism with syon is very well explained also",
    "start": "4554639",
    "end": "4560000"
  },
  {
    "text": "here [Applause]",
    "start": "4560000",
    "end": "4566570"
  },
  {
    "text": "[Music]",
    "start": "4566760",
    "end": "4569849"
  }
]