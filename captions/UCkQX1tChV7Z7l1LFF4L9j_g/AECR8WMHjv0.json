[
  {
    "text": "[Music]",
    "start": "3320",
    "end": "8769"
  },
  {
    "text": "[Applause] okay um it's working",
    "start": "10980",
    "end": "17199"
  },
  {
    "text": "right okay um let me grab my",
    "start": "17199",
    "end": "22800"
  },
  {
    "text": "thing okay welcome everyone thank you for joining today we talk about awsam",
    "start": "24439",
    "end": "31199"
  },
  {
    "text": "how it's built how it works and why it's so cool my name is Mike danielov I'm a",
    "start": "31199",
    "end": "36399"
  },
  {
    "text": "senior principal engineer at AWS serverless a decade ago I joined A2",
    "start": "36399",
    "end": "42039"
  },
  {
    "text": "networking team and it was a fantastic ride and then 5 years back I heard about",
    "start": "42039",
    "end": "48559"
  },
  {
    "text": "Lambda and I really like the Simplicity of the idea we run your We R your code",
    "start": "48559",
    "end": "54199"
  },
  {
    "text": "in the cloud no servers needed so I joined them today I'm excited to share",
    "start": "54199",
    "end": "60640"
  },
  {
    "text": "some of the great stuff I've learned along the way let's get",
    "start": "60640",
    "end": "66000"
  },
  {
    "text": "started so this is our agenda so first I will do introduction to the lamb itself so understand key",
    "start": "66000",
    "end": "73680"
  },
  {
    "text": "Concepts about the service and its fundamentals it will help us understand and deep dive then we'll talk about",
    "start": "73680",
    "end": "81200"
  },
  {
    "text": "inoke routing cayer it's super important part of the system which connects all the",
    "start": "81200",
    "end": "86799"
  },
  {
    "text": "microservices and make system work together then we'll talk about computer",
    "start": "86799",
    "end": "93000"
  },
  {
    "text": "infrastructure this is where your code run this is servers and serverless and then alongside our",
    "start": "93000",
    "end": "101040"
  },
  {
    "text": "conversation I will tell you a story about call so what is Lambda Lambda is",
    "start": "101040",
    "end": "108600"
  },
  {
    "text": "serverless computer system it allows you to execute your code on demand you don't",
    "start": "108600",
    "end": "114040"
  },
  {
    "text": "need to own provision or manage your servers Lambda has a set of buil-in",
    "start": "114040",
    "end": "119960"
  },
  {
    "text": "languages so you provide only your code and we execute it Lambda scales fast",
    "start": "119960",
    "end": "126039"
  },
  {
    "text": "with response to your traffic demand Lambda launched 9 years ago and",
    "start": "126039",
    "end": "132760"
  },
  {
    "text": "today million of users use it daily oh sorry monthly um and uh they together generate",
    "start": "132760",
    "end": "140120"
  },
  {
    "text": "trillion in works every month it's a big volume so let's see how it",
    "start": "140120",
    "end": "145640"
  },
  {
    "text": "works these are examples of very simple hello world functions you only write",
    "start": "145640",
    "end": "150879"
  },
  {
    "text": "your code you can pass your data in event and then context will provide you",
    "start": "150879",
    "end": "156319"
  },
  {
    "text": "some runtime information like request ID remaining execution time",
    "start": "156319",
    "end": "162959"
  },
  {
    "text": "Etc configuring Lambda is very simple you only pick preferred memory size all",
    "start": "162959",
    "end": "169480"
  },
  {
    "text": "the rest resources including compute CPU will be allocated",
    "start": "169480",
    "end": "175200"
  },
  {
    "text": "proportionally Lambda supports two invocation models first the synchronous in",
    "start": "176280",
    "end": "181360"
  },
  {
    "text": "work in that case you send a request it's get routed to your execution",
    "start": "181360",
    "end": "186799"
  },
  {
    "text": "environment your code get executed and you receive response synchronously on",
    "start": "186799",
    "end": "192120"
  },
  {
    "text": "the same timeline in asynchronous in work your request will be queued first and then it",
    "start": "192120",
    "end": "200080"
  },
  {
    "text": "will be executed at different timeline by Polar Systems it's important to highlight that",
    "start": "200080",
    "end": "207760"
  },
  {
    "text": "execution of syn as synchronous in work is no different from synchronous it's important because today we only talk",
    "start": "207760",
    "end": "214959"
  },
  {
    "text": "about synchronous in walks before we start it's also very",
    "start": "214959",
    "end": "220799"
  },
  {
    "text": "important to talk about Lambda tenets because they help us to make",
    "start": "220799",
    "end": "226360"
  },
  {
    "text": "technical trade-offs make technical choices and uh design decisions so first",
    "start": "226360",
    "end": "232920"
  },
  {
    "text": "is availability we want to ensure that our service is available and every time you send us a request you receive",
    "start": "232920",
    "end": "241239"
  },
  {
    "text": "reliable response efficiency is super important on on demand systems because they need",
    "start": "241239",
    "end": "248280"
  },
  {
    "text": "to be able to provide resources very quickly and release them very quickly as",
    "start": "248280",
    "end": "253920"
  },
  {
    "text": "well to avoid to avoid",
    "start": "253920",
    "end": "259079"
  },
  {
    "text": "wastage scale as I said Lambda scales very fast with response to your",
    "start": "259079",
    "end": "265280"
  },
  {
    "text": "demand and it also scales down very fast as well again to reduce wastage",
    "start": "265280",
    "end": "271360"
  },
  {
    "text": "security is job number one in AWS and Lambda is no exception we want to",
    "start": "271360",
    "end": "276639"
  },
  {
    "text": "provide you safe and secure execution environment where you can run and trust your",
    "start": "276639",
    "end": "284680"
  },
  {
    "text": "code and performance we're building compute system that means we want to provide",
    "start": "284680",
    "end": "291160"
  },
  {
    "text": "very little overhead on top of your application business logic we want our",
    "start": "291160",
    "end": "296680"
  },
  {
    "text": "system to be invisible",
    "start": "296680",
    "end": "301639"
  },
  {
    "text": "this is very high level overview of Lambda component and don't worry today we don't",
    "start": "301840",
    "end": "307720"
  },
  {
    "text": "have enough time to go over every block we'll only talk about in walk",
    "start": "307720",
    "end": "312919"
  },
  {
    "text": "routing and Compu infrastructure so let's start with",
    "start": "312919",
    "end": "319880"
  },
  {
    "text": "invoke request routing so this is the layer which",
    "start": "319880",
    "end": "325880"
  },
  {
    "text": "connects all the microservices together it provides availability scale and execution access to the",
    "start": "325880",
    "end": "333479"
  },
  {
    "text": "execution environments but let's start very simple let's build it",
    "start": "333479",
    "end": "339560"
  },
  {
    "text": "ourselves so we have analys and she ask us for help to run her Cod code in the",
    "start": "339960",
    "end": "346520"
  },
  {
    "text": "cloud so first we need to add a configuration service of some kind to store her code and Associated",
    "start": "346520",
    "end": "353960"
  },
  {
    "text": "config then we need to introduce a front end front end will take an work request",
    "start": "353960",
    "end": "360880"
  },
  {
    "text": "validated authorized and then look up stored configuration in the",
    "start": "360880",
    "end": "366080"
  },
  {
    "text": "database and now we need a worker with execution environment or sandbox how we",
    "start": "366080",
    "end": "372240"
  },
  {
    "text": "call them where actual L code will run sounds",
    "start": "372240",
    "end": "378080"
  },
  {
    "text": "simple but there is a problem remember we are building on demand computer system it means the time of the inv work",
    "start": "378080",
    "end": "385400"
  },
  {
    "text": "there may not be an available worker or execution enironment so front end doesn't know where to run code where to",
    "start": "385400",
    "end": "392199"
  },
  {
    "text": "send a request let's add a new system we call it",
    "start": "392199",
    "end": "398000"
  },
  {
    "text": "placement placement will be responsible to creating execution environment or",
    "start": "398000",
    "end": "403280"
  },
  {
    "text": "sand boxes on demand so now frontend needs to First Call placement to request",
    "start": "403280",
    "end": "408479"
  },
  {
    "text": "a send box and only after that it can send invoke request to the created",
    "start": "408479",
    "end": "415199"
  },
  {
    "text": "execution environment so now it's functionally complete",
    "start": "415199",
    "end": "421520"
  },
  {
    "text": "but there is a problem so we added on demand initialization in front of every",
    "start": "421800",
    "end": "427080"
  },
  {
    "text": "invoke request and this initialization takes this many",
    "start": "427080",
    "end": "432840"
  },
  {
    "text": "steps you need to create execution environment itself you need to download customer code you need to start up a",
    "start": "432840",
    "end": "439440"
  },
  {
    "text": "around time and you need to initialize the function itself it all can take several",
    "start": "439440",
    "end": "445599"
  },
  {
    "text": "seconds which is wouldn't be great customer experience this is latency distribution graph it",
    "start": "445599",
    "end": "453800"
  },
  {
    "text": "shows how often we see particular invoke duration over the period of",
    "start": "453800",
    "end": "462080"
  },
  {
    "text": "time the green invoke latency is our good work this is what our code does",
    "start": "462800",
    "end": "468639"
  },
  {
    "text": "it's our business logic it does some useful work and it takes some CPU time it's okay and uh we want our overhead to",
    "start": "468639",
    "end": "475680"
  },
  {
    "text": "be very minimal so that's why we want to be nearby in terms of observ",
    "start": "475680",
    "end": "481319"
  },
  {
    "text": "latency but what we see we're here this is because of all this",
    "start": "481319",
    "end": "487639"
  },
  {
    "text": "initialization steps we're taking in front of every invok it's not great customer experience",
    "start": "487639",
    "end": "494319"
  },
  {
    "text": "so let's fix it let's introduce a new system we call",
    "start": "494319",
    "end": "499560"
  },
  {
    "text": "it worker manager worker manager will be responsible to help us reuse previously",
    "start": "499560",
    "end": "505680"
  },
  {
    "text": "created sand boxes and use them instead of creating new one every",
    "start": "505680",
    "end": "512440"
  },
  {
    "text": "time so now we have two modes the first fast one when frontend",
    "start": "513120",
    "end": "520320"
  },
  {
    "text": "ask worker manager for a sand box and worker manager returns",
    "start": "520320",
    "end": "526000"
  },
  {
    "text": "one and then from 10 C and then walk without significant interruptions we call it warm and",
    "start": "526000",
    "end": "533600"
  },
  {
    "text": "walks still there are some cases where worker manager won't have a sandbox so",
    "start": "533600",
    "end": "539760"
  },
  {
    "text": "it has to call placement again to create new one this would be our initialization",
    "start": "539760",
    "end": "545600"
  },
  {
    "text": "path slow path this is how it's seen on the distribution graph we now see kind of",
    "start": "545600",
    "end": "553600"
  },
  {
    "text": "two bumps one we see that majority of enw walks now move to the right spot they",
    "start": "553600",
    "end": "559320"
  },
  {
    "text": "provide very little overhead they fast we call them warm enw walks and there is smaller number of the",
    "start": "559320",
    "end": "567000"
  },
  {
    "text": "golden walks still left a little spoiler by the end of this talk",
    "start": "567000",
    "end": "572600"
  },
  {
    "text": "will completely eliminate call starts but there is a lot of needs to be done so let's",
    "start": "572600",
    "end": "579839"
  },
  {
    "text": "continue this is more realistic representation of Lambda in synchronous work routing and",
    "start": "579839",
    "end": "586880"
  },
  {
    "text": "production we added multiple availability zones for resiliency we added front Lo balancer in",
    "start": "586880",
    "end": "593920"
  },
  {
    "text": "to distribute the load and we replaced worker manager with assignment service and I explain you why",
    "start": "593920",
    "end": "601240"
  },
  {
    "text": "in a bid but everything else looks very similar to what we just built for",
    "start": "601240",
    "end": "608360"
  },
  {
    "text": "Ellis so let's Deep dive into the worker manager worker manager was the original",
    "start": "608839",
    "end": "614680"
  },
  {
    "text": "system which was built when Lambda started in order to track send boxes it",
    "start": "614680",
    "end": "621079"
  },
  {
    "text": "keeps in memory database of all the created sandboxes and their state sandbox can be in busy",
    "start": "621079",
    "end": "628320"
  },
  {
    "text": "State meaning it's serving Canon walk or it can be in idle State meaning it doing",
    "start": "628320",
    "end": "634360"
  },
  {
    "text": "nothing so when it is your request from front end comes in worker manager will pick first",
    "start": "634360",
    "end": "640920"
  },
  {
    "text": "available idle sandbox and return it also your Market is busy and worker manager will",
    "start": "640920",
    "end": "649320"
  },
  {
    "text": "track the progress of invoke to Market is idle at the end of the",
    "start": "649320",
    "end": "655160"
  },
  {
    "text": "invoke this is how workare managers was deployed in to the production region",
    "start": "655800",
    "end": "661120"
  },
  {
    "text": "again we have multiple zones worker manager deplo deploys in every Zone and",
    "start": "661120",
    "end": "666839"
  },
  {
    "text": "because lamb is regional service worker manager was tracking sand boxes in every other a of liability",
    "start": "666839",
    "end": "673839"
  },
  {
    "text": "Zone and system works reasonably well it was",
    "start": "673839",
    "end": "679120"
  },
  {
    "text": "available it provided scale until it doesn't so remember every worker manager",
    "start": "679120",
    "end": "686440"
  },
  {
    "text": "holds sandbox state in memory which is durable storage is not replicated so if if whatever reason a",
    "start": "686440",
    "end": "694560"
  },
  {
    "text": "worker measure host goes down we lose all the and boxes which was created by",
    "start": "694560",
    "end": "699680"
  },
  {
    "text": "that instance let's look at the production",
    "start": "699680",
    "end": "706519"
  },
  {
    "text": "region in case of availability Zone event we generally expect that okay we",
    "start": "706519",
    "end": "713639"
  },
  {
    "text": "will lose 1/3 of capacity which resides in this availability Zone and the rest",
    "start": "713639",
    "end": "720440"
  },
  {
    "text": "availability zones will scale to",
    "start": "720440",
    "end": "726360"
  },
  {
    "text": "compensate because worker manager tracks sandboxes in multiple availability zones",
    "start": "726360",
    "end": "732639"
  },
  {
    "text": "the real impact would be worse we will lose capacity in healthy EAS as well because they was tracked by",
    "start": "732639",
    "end": "739839"
  },
  {
    "text": "unavailable worker managers the compound impact can be quite large and it's not",
    "start": "739839",
    "end": "748160"
  },
  {
    "text": "acceptable in addition to that worker managers they",
    "start": "748160",
    "end": "754880"
  },
  {
    "text": "run in isolation so all the remaining workare managers they will start calling placement service to",
    "start": "754880",
    "end": "762040"
  },
  {
    "text": "compensate for the losing capacity eating additional load and pressure on the system in a",
    "start": "762040",
    "end": "769320"
  },
  {
    "text": "case of availability event making it harder to",
    "start": "769320",
    "end": "774519"
  },
  {
    "text": "recover this is why a year ago we replaced",
    "start": "774519",
    "end": "779680"
  },
  {
    "text": "workare manager with a new service called assignment service functionally it look exactly the",
    "start": "779680",
    "end": "787399"
  },
  {
    "text": "same it runs in every availability Zone and tracks and",
    "start": "787399",
    "end": "792440"
  },
  {
    "text": "boxes but there is a difference we added reliable distributed and durable",
    "start": "792440",
    "end": "799680"
  },
  {
    "text": "storage we call it Journal log the storage tracks sandb States",
    "start": "799680",
    "end": "805880"
  },
  {
    "text": "across entire region and it's it's replicated across multiple availability zones and multiple",
    "start": "805880",
    "end": "812519"
  },
  {
    "text": "nodes so now we were able to organize assignment service in partitions usually",
    "start": "812519",
    "end": "819519"
  },
  {
    "text": "about three notes each they have one leader and two",
    "start": "819519",
    "end": "824720"
  },
  {
    "text": "followers and they coordinate their work based on the distributed state only",
    "start": "824720",
    "end": "831240"
  },
  {
    "text": "leader is allowed to write to a log and only leader is allowed to call",
    "start": "831240",
    "end": "836920"
  },
  {
    "text": "placement to create new s boxes followers they only read only replicas",
    "start": "836920",
    "end": "842800"
  },
  {
    "text": "so they just follow and U read this journal look in case of leader",
    "start": "842800",
    "end": "850880"
  },
  {
    "text": "failure a follower can be can easily take over and became a new",
    "start": "850880",
    "end": "856680"
  },
  {
    "text": "leader no and boxes will be lost and it will be able to",
    "start": "856680",
    "end": "862079"
  },
  {
    "text": "continue where the previous leader stopped thanks to the distributed state",
    "start": "862079",
    "end": "869720"
  },
  {
    "text": "we can easily introduce a new node and it will rebuild the state from",
    "start": "869720",
    "end": "876360"
  },
  {
    "text": "the log and now it continue easy to serve this change helped us to",
    "start": "876360",
    "end": "884199"
  },
  {
    "text": "significantly increase availability of the system it's became full tolerant to a",
    "start": "884199",
    "end": "889440"
  },
  {
    "text": "single host failure and it's and the an availability",
    "start": "889440",
    "end": "894800"
  },
  {
    "text": "Zone event we replaced in M state with the distribution Ed consistent sandbo",
    "start": "894800",
    "end": "900600"
  },
  {
    "text": "State regionally and uh we applied leader",
    "start": "900600",
    "end": "906360"
  },
  {
    "text": "follower architecture for the quickfill overs additional benefit that new",
    "start": "906360",
    "end": "912040"
  },
  {
    "text": "service was Rewritten in Rust and rust is awesome language it helped us to increase efficiency and performance of",
    "start": "912040",
    "end": "919079"
  },
  {
    "text": "every host improving processing volume and reducing overhead",
    "start": "919079",
    "end": "926399"
  },
  {
    "text": "latency so so this is the end of chapter one about in walk routing so we learned about cold and warm and walks and uh we",
    "start": "927800",
    "end": "936759"
  },
  {
    "text": "learned about how consistent State helped us to improve availability so now it's time to switch to compute",
    "start": "936759",
    "end": "944480"
  },
  {
    "text": "fabric compute fabric it owns all infrastructure required to actually run",
    "start": "944480",
    "end": "949959"
  },
  {
    "text": "your code this is the overview so first of all we have worker Fleet worker is in to",
    "start": "949959",
    "end": "957920"
  },
  {
    "text": "instance where we create execution environments and run your code we have a capacity manager which is",
    "start": "957920",
    "end": "965759"
  },
  {
    "text": "responsible to maintain an optimal worker Fleet size it can scale and scale",
    "start": "965759",
    "end": "971680"
  },
  {
    "text": "scale up and scale down depending on demand capacity manager is also",
    "start": "971680",
    "end": "979040"
  },
  {
    "text": "responsible for the worker Health it can proactively detect workers in unhealthy State and",
    "start": "979040",
    "end": "985839"
  },
  {
    "text": "replace them with the healthy ones to minimize traffic disruption you remember placement from inw routing",
    "start": "985839",
    "end": "993279"
  },
  {
    "text": "placement is responsible to creating execution environments but before it can actually",
    "start": "993279",
    "end": "998720"
  },
  {
    "text": "create it needs to pick a right worker worker in an optimal state to take a new",
    "start": "998720",
    "end": "1006920"
  },
  {
    "text": "work and our data science team helps both Services placement and capacity",
    "start": "1007560",
    "end": "1012680"
  },
  {
    "text": "manager to make smart decisions data science team takes a lot",
    "start": "1012680",
    "end": "1018279"
  },
  {
    "text": "of produ real time signals they built models and share them",
    "start": "1018279",
    "end": "1024760"
  },
  {
    "text": "with capacity and placement so both teams can forecast and make smarter decisions and it works really well all",
    "start": "1024760",
    "end": "1033959"
  },
  {
    "text": "together let's quickly look again on the routing remember we helped Ellis to run",
    "start": "1033959",
    "end": "1040480"
  },
  {
    "text": "her code in the cloud now Bobs Bob ask us to do the",
    "start": "1040480",
    "end": "1045558"
  },
  {
    "text": "same so question can we run Bob's code on the",
    "start": "1045559",
    "end": "1051400"
  },
  {
    "text": "same worker as Ellis the answer is maybe so let's Deep",
    "start": "1051400",
    "end": "1059320"
  },
  {
    "text": "D into the data isolation the most straightforward thing would be to load Bob's cod in the",
    "start": "1059320",
    "end": "1067280"
  },
  {
    "text": "same runtime process as Ellis but it would be disaster right",
    "start": "1067280",
    "end": "1072960"
  },
  {
    "text": "because now both functions can write to the same memory they can interfere with",
    "start": "1072960",
    "end": "1078159"
  },
  {
    "text": "each other we want to separate them operating system provid us a good",
    "start": "1078159",
    "end": "1085760"
  },
  {
    "text": "logical separation boundary process so we can launch multiple runtime",
    "start": "1085760",
    "end": "1091039"
  },
  {
    "text": "processes one for each function and in case they will be logically isolated we",
    "start": "1091039",
    "end": "1096840"
  },
  {
    "text": "can even put them in containers for the additional isolation but it's not sufficient",
    "start": "1096840",
    "end": "1103720"
  },
  {
    "text": "because we run arbitrary code in a multier system we don't know what this code is doing",
    "start": "1103720",
    "end": "1110000"
  },
  {
    "text": "and there are plenty of security threats which can escape process boundary this is why in ads Lambda we",
    "start": "1110000",
    "end": "1117919"
  },
  {
    "text": "believe that only virtual machine isolation provides sufficient guarantees to run an arbitrary code in a",
    "start": "1117919",
    "end": "1124039"
  },
  {
    "text": "multi-tenant computer",
    "start": "1124039",
    "end": "1127480"
  },
  {
    "text": "system when Lambda launched we were using ec2 instances E2 VMS as isolation",
    "start": "1129400",
    "end": "1135720"
  },
  {
    "text": "boundary it means single tenant worker in this world no you cannot put Bob's",
    "start": "1135720",
    "end": "1141760"
  },
  {
    "text": "Cod on the same worker as Ellis would create an execution",
    "start": "1141760",
    "end": "1147880"
  },
  {
    "text": "environment on such worker and then run code it works fine logically and provide",
    "start": "1147880",
    "end": "1154240"
  },
  {
    "text": "good latency but there was problem so first is waste even a smaller is2 instance is",
    "start": "1154240",
    "end": "1161159"
  },
  {
    "text": "much larger than a smallest Lambda function it means a lot of unused is2",
    "start": "1161159",
    "end": "1167720"
  },
  {
    "text": "resources we can fix it by creating multiple instances of the same",
    "start": "1167720",
    "end": "1175400"
  },
  {
    "text": "function on the same worker because they belong to the same account we not worry",
    "start": "1175480",
    "end": "1180559"
  },
  {
    "text": "about data isolation and it's help us with the resource utilization but there is a",
    "start": "1180559",
    "end": "1188400"
  },
  {
    "text": "problem it's very likely that multiple instances of the same function of the same code very likely will access system",
    "start": "1188400",
    "end": "1195320"
  },
  {
    "text": "resources at exactly same time they will do either compute work or",
    "start": "1195320",
    "end": "1200400"
  },
  {
    "text": "start doing networking or blog device iio at the same time causing overloading",
    "start": "1200400",
    "end": "1206400"
  },
  {
    "text": "of the instance it's very hard to uh control this instance and provide consistent uh execution performance to",
    "start": "1206400",
    "end": "1213720"
  },
  {
    "text": "our customers additionally because we now give every account every customer plenty",
    "start": "1213720",
    "end": "1221080"
  },
  {
    "text": "of workers the worker Fleet size became just too large to efficiently",
    "start": "1221080",
    "end": "1226840"
  },
  {
    "text": "manage networking C became very tricky because it's hitting standard",
    "start": "1226840",
    "end": "1232960"
  },
  {
    "text": "operating system limits deployments operation support all",
    "start": "1232960",
    "end": "1238360"
  },
  {
    "text": "become very tricky and this is why we came to2 team and ask okay how they can",
    "start": "1238360",
    "end": "1244480"
  },
  {
    "text": "help us and uh we work and uh this is how",
    "start": "1244480",
    "end": "1250880"
  },
  {
    "text": "firecracker was born firecracker is fast",
    "start": "1250880",
    "end": "1256000"
  },
  {
    "text": "vertiz technology it allows you to create secure and fast",
    "start": "1256000",
    "end": "1261799"
  },
  {
    "text": "micro it was specifically designed to meet serverless compute",
    "start": "1261799",
    "end": "1267240"
  },
  {
    "text": "needs so this is how Lambda adops firecracker so now in in every worker we",
    "start": "1269000",
    "end": "1275200"
  },
  {
    "text": "wrap every sand boox every execution environment into tiny virtual machine",
    "start": "1275200",
    "end": "1280760"
  },
  {
    "text": "this machine is completely independent it has its own Linux running its own its own operate kernel and it's it shares",
    "start": "1280760",
    "end": "1288240"
  },
  {
    "text": "nothing with the other with others processes it's secure in this",
    "start": "1288240",
    "end": "1295120"
  },
  {
    "text": "model we can safely put multiple different accounts on the same worker in",
    "start": "1295120",
    "end": "1300720"
  },
  {
    "text": "this model we can actually run Bob's code on the same worker as Ellis because firecracker virtualization will provide",
    "start": "1300720",
    "end": "1307400"
  },
  {
    "text": "strong data isolation this is comparison of the size",
    "start": "1307400",
    "end": "1313640"
  },
  {
    "text": "of2 metal instance which we use as a substrate for the firecracker VMS",
    "start": "1313640",
    "end": "1318720"
  },
  {
    "text": "they're really huge they have plenty of memory and this allows us to Multiplex",
    "start": "1318720",
    "end": "1326000"
  },
  {
    "text": "and place thousands of functions from different customers on the same worker",
    "start": "1326000",
    "end": "1331679"
  },
  {
    "text": "and still provide consistent performance because now they all different and it's",
    "start": "1331679",
    "end": "1337919"
  },
  {
    "text": "very it's very unlikely that they will request CPU at exactly the same time more likely it will be actually",
    "start": "1337919",
    "end": "1343480"
  },
  {
    "text": "distributed and decorrelated and placement using data model they can pick and combine group",
    "start": "1343480",
    "end": "1351880"
  },
  {
    "text": "together most optimal workloads let's summarize the benefits",
    "start": "1351880",
    "end": "1357559"
  },
  {
    "text": "of firecracker so it provides strong isolation boundaries it's very fast and provides",
    "start": "1357559",
    "end": "1363440"
  },
  {
    "text": "very little system overhead and it enable us to decorrelate demand to resources and and",
    "start": "1363440",
    "end": "1369679"
  },
  {
    "text": "better control heat of our worker Fleet let's take a look again in our",
    "start": "1369679",
    "end": "1375520"
  },
  {
    "text": "latency distribution diagram by switching from2 to firecracker we be able to significantly reduce the cost of",
    "start": "1375520",
    "end": "1383039"
  },
  {
    "text": "creating new execution envirment but we still have the middle",
    "start": "1383039",
    "end": "1388440"
  },
  {
    "text": "part and we don't control it it's size of the",
    "start": "1388440",
    "end": "1394240"
  },
  {
    "text": "code it's a startup time of the runtime",
    "start": "1394240",
    "end": "1399760"
  },
  {
    "text": "initialization time of the function how we can fix",
    "start": "1399760",
    "end": "1404399"
  },
  {
    "text": "it since we switch to the firecracker VMS we probably can use VM",
    "start": "1405080",
    "end": "1412960"
  },
  {
    "text": "snapshots this is the idea what if at the end of",
    "start": "1412960",
    "end": "1419279"
  },
  {
    "text": "initialization stage instead of serving and walk we will actually create a",
    "start": "1419279",
    "end": "1425480"
  },
  {
    "text": "snapshot of virtual machine and then next time we need to",
    "start": "1425480",
    "end": "1432640"
  },
  {
    "text": "create new VM to to Surf and and instead of initialization we'll resume",
    "start": "1432640",
    "end": "1438400"
  },
  {
    "text": "resume it from snapshot and if resume is fast",
    "start": "1438400",
    "end": "1443440"
  },
  {
    "text": "enough the total overhead won't be noticeable different from the Warman",
    "start": "1443440",
    "end": "1450080"
  },
  {
    "text": "walk let's try to build it so let's start with the rough design",
    "start": "1450480",
    "end": "1457000"
  },
  {
    "text": "sketch so first we need a worker where would will launch a VM and initialize the function run all insation steps at",
    "start": "1457000",
    "end": "1464600"
  },
  {
    "text": "the end we will create a snapshot we need to upload it to some distributed storage let's say",
    "start": "1464600",
    "end": "1472480"
  },
  {
    "text": "S3 and then a different worker would Download snapshot to create a local",
    "start": "1472600",
    "end": "1480039"
  },
  {
    "text": "copy and now we can create multiple VMS very",
    "start": "1480039",
    "end": "1486158"
  },
  {
    "text": "rapidly so this is definition of a snapshot it has multiple files on disk",
    "start": "1490760",
    "end": "1497799"
  },
  {
    "text": "so first is memory file it's the All State virtual machine accumulated during",
    "start": "1497799",
    "end": "1504399"
  },
  {
    "text": "initialization phase then there is a reference to the",
    "start": "1504399",
    "end": "1510279"
  },
  {
    "text": "source only image which contains operating system runtime and new",
    "start": "1510279",
    "end": "1519120"
  },
  {
    "text": "code there is also redite overlay which has all the date which was",
    "start": "1519360",
    "end": "1525360"
  },
  {
    "text": "written to the disk during initialization phase and then there is",
    "start": "1525360",
    "end": "1531799"
  },
  {
    "text": "smaller internal file which tracks the VM State",
    "start": "1531799",
    "end": "1538960"
  },
  {
    "text": "itself so let's summarize the ask to build s system so we need to find a way",
    "start": "1539120",
    "end": "1544480"
  },
  {
    "text": "how to distribute snapshots between workers we need to be able to resume",
    "start": "1544480",
    "end": "1550640"
  },
  {
    "text": "multiple VMS from the same snapshot file to avoid multiple downloads and it needs to be super fast",
    "start": "1550640",
    "end": "1560240"
  },
  {
    "text": "we will start with the resuming",
    "start": "1562600",
    "end": "1567720"
  },
  {
    "text": "VMS so firecracker resumes VM from snapshot by memory mapping a snapshot",
    "start": "1567880",
    "end": "1574559"
  },
  {
    "text": "memory file and then attaching diss via Vero interface so the dis is kind of",
    "start": "1574559",
    "end": "1581760"
  },
  {
    "text": "very standard it's not different from the on demand launched VM so this why let's Deep dive into the memory map we",
    "start": "1581760",
    "end": "1588840"
  },
  {
    "text": "need to understand how it works to decide if it's safe to use in our Lambda environment in our",
    "start": "1588840",
    "end": "1595399"
  },
  {
    "text": "multitenant compute system memory mapping allows",
    "start": "1595399",
    "end": "1601679"
  },
  {
    "text": "you to literally map a content of a file on the disk to a virtual private space",
    "start": "1601679",
    "end": "1607320"
  },
  {
    "text": "of the running process so when process access the",
    "start": "1607320",
    "end": "1613039"
  },
  {
    "text": "memory it doesn't know about file it thinks it works with the",
    "start": "1613039",
    "end": "1618559"
  },
  {
    "text": "memory operating system does all the magic when process wres to such memory",
    "start": "1618559",
    "end": "1627440"
  },
  {
    "text": "operating system will copy original pages to the private memory part and it",
    "start": "1627440",
    "end": "1634720"
  },
  {
    "text": "will hold the latest of written pages so this system works",
    "start": "1634720",
    "end": "1641279"
  },
  {
    "text": "well and for decades and it definitely support multiple",
    "start": "1641279",
    "end": "1646440"
  },
  {
    "text": "processes uh mapping the same file into their processes let's take a deeper take a",
    "start": "1646440",
    "end": "1654240"
  },
  {
    "text": "look deeper access to the file dis is slow slower than to the memory this is why",
    "start": "1654240",
    "end": "1660840"
  },
  {
    "text": "operating system adds a page cache it's in memory place which",
    "start": "1660840",
    "end": "1666760"
  },
  {
    "text": "holds content of the original file so when multiple processes map the same",
    "start": "1666760",
    "end": "1673640"
  },
  {
    "text": "file and try to read it they actually read from this page cach they're not going to",
    "start": "1673640",
    "end": "1680399"
  },
  {
    "text": "dis and this page cach means that multiple processes reference the exact same",
    "start": "1680399",
    "end": "1687360"
  },
  {
    "text": "physical memory Pages which is what open threads in the multi execution",
    "start": "1687360",
    "end": "1695960"
  },
  {
    "text": "environment specifically this kind of two papers really great examples of sophisticated side Channel attacks which",
    "start": "1695960",
    "end": "1702640"
  },
  {
    "text": "leverage shed memory so that one protess can influence",
    "start": "1702640",
    "end": "1707679"
  },
  {
    "text": "CPU cach and using timing in um private data of the other",
    "start": "1707679",
    "end": "1715559"
  },
  {
    "text": "process like for example encryption keys I will provide references at the",
    "start": "1715559",
    "end": "1720679"
  },
  {
    "text": "end of the talk for folks who wants to read on their own really great read but",
    "start": "1720679",
    "end": "1726480"
  },
  {
    "text": "that means that we cannot use this proven technology in our multi-tenant execution environment we need something",
    "start": "1726480",
    "end": "1733120"
  },
  {
    "text": "better so we introduced our own indirection layer",
    "start": "1733120",
    "end": "1739200"
  },
  {
    "text": "which enforces strict copy anytime a process",
    "start": "1739200",
    "end": "1744320"
  },
  {
    "text": "access the data we call it copy and read it guarantees that there is no",
    "start": "1744320",
    "end": "1750559"
  },
  {
    "text": "shared memory hence no security",
    "start": "1750559",
    "end": "1756799"
  },
  {
    "text": "threats but we're not done yet when we resie multiple VMS from the exact same",
    "start": "1757600",
    "end": "1763679"
  },
  {
    "text": "snapshot they identical every bit of this M identical",
    "start": "1763679",
    "end": "1769760"
  },
  {
    "text": "they have same random sequences they have same identifiers same time",
    "start": "1769760",
    "end": "1776519"
  },
  {
    "text": "stamps everything if we allow them to talk to the internet remote host won't",
    "start": "1776519",
    "end": "1782360"
  },
  {
    "text": "be able to distinguish them they will be confused who's talking to",
    "start": "1782360",
    "end": "1787480"
  },
  {
    "text": "them we need to fix this this is example of the quite real code which uses U ID",
    "start": "1787480",
    "end": "1794320"
  },
  {
    "text": "as a Sandbox ID to uniquely write to look",
    "start": "1794320",
    "end": "1800039"
  },
  {
    "text": "if we create multiple VMS with that code from the same snapshot they will all have the same exact sandbox",
    "start": "1800120",
    "end": "1807399"
  },
  {
    "text": "ID and logging will be very",
    "start": "1807399",
    "end": "1811679"
  },
  {
    "text": "confused in order to fix that we need to restore uniqueness of",
    "start": "1813200",
    "end": "1818919"
  },
  {
    "text": "every clone VM after the resume and it needs to be done at every",
    "start": "1818919",
    "end": "1825919"
  },
  {
    "text": "layer we need to resume Randomness in Linux",
    "start": "1825919",
    "end": "1831120"
  },
  {
    "text": "kernel we need to restore uniqueness in system libraries like open sell for",
    "start": "1831120",
    "end": "1837519"
  },
  {
    "text": "example run time and your own code all needs to be fixed it's a lot of",
    "start": "1837519",
    "end": "1844720"
  },
  {
    "text": "work and we start incrementally",
    "start": "1844720",
    "end": "1851200"
  },
  {
    "text": "so together with Java Community we",
    "start": "1851200",
    "end": "1856919"
  },
  {
    "text": "introduced callback interface you can use it in your code to subscribe to subscribe to the resume",
    "start": "1856919",
    "end": "1863320"
  },
  {
    "text": "notification and use it to restore uniquness of your code we also prepared PCH for the",
    "start": "1863320",
    "end": "1871200"
  },
  {
    "text": "openl to reset entropy pool in the event of",
    "start": "1871200",
    "end": "1877000"
  },
  {
    "text": "resume and we're working with Linux Community we have a PCH to reset Linux",
    "start": "1877000",
    "end": "1882880"
  },
  {
    "text": "kernel Randomness on resume there is a lot of work to be done",
    "start": "1882880",
    "end": "1889200"
  },
  {
    "text": "but we're moving in this direction so now we can safely resume",
    "start": "1889200",
    "end": "1894320"
  },
  {
    "text": "multiple VMS from the same snapshot and they will be",
    "start": "1894320",
    "end": "1900158"
  },
  {
    "text": "unique let's talk about snapshot distribution remember snapshots can be",
    "start": "1900399",
    "end": "1907039"
  },
  {
    "text": "quite large up to 30 GB M5 metal disc is to",
    "start": "1907039",
    "end": "1914639"
  },
  {
    "text": "instance has throughput of 25 gbits it means it will take at least 10",
    "start": "1914639",
    "end": "1921559"
  },
  {
    "text": "seconds to download entire snapshot it will be actually longer than",
    "start": "1921559",
    "end": "1927720"
  },
  {
    "text": "running on demand initialization so we need to do something",
    "start": "1927720",
    "end": "1934398"
  },
  {
    "text": "better when we start watching video we're not waiting for the entire",
    "start": "1935080",
    "end": "1941919"
  },
  {
    "text": "video file to be downloaded to our browser browser gets few initial bites",
    "start": "1941919",
    "end": "1949760"
  },
  {
    "text": "start playing and the rest is downloaded in background and we not not do not notice",
    "start": "1949760",
    "end": "1955679"
  },
  {
    "text": "it let's use this as an example and build similar",
    "start": "1955679",
    "end": "1961158"
  },
  {
    "text": "system so we have one large snapshot we will split it into the",
    "start": "1963120",
    "end": "1969279"
  },
  {
    "text": "multiple chunks we choose 512 kiloby as a Chun size so now we only need to download",
    "start": "1969279",
    "end": "1978039"
  },
  {
    "text": "minimal set of chunks to resume a VM and start the in",
    "start": "1978039",
    "end": "1983279"
  },
  {
    "text": "work and the rest will be downloaded on demand and it has two",
    "start": "1983279",
    "end": "1989919"
  },
  {
    "text": "benefits it allows us to amortise the download time for during the in work duration but",
    "start": "1989919",
    "end": "1997760"
  },
  {
    "text": "also we will be downloading only minimal needed working",
    "start": "1997760",
    "end": "2003919"
  },
  {
    "text": "set in most cases this data in snap file it's for reference only and it's not",
    "start": "2004440",
    "end": "2010760"
  },
  {
    "text": "actually used during the invoke a lot of date was written once during initialization time and never access",
    "start": "2010760",
    "end": "2016799"
  },
  {
    "text": "again so this on demand loading help us to only extract the working sites needed",
    "start": "2016799",
    "end": "2022360"
  },
  {
    "text": "for the in work so this is how it will work so",
    "start": "2022360",
    "end": "2027480"
  },
  {
    "text": "remember we have VM memory which is mapped to the snapshot file when procos access the memory and",
    "start": "2027480",
    "end": "2035639"
  },
  {
    "text": "its page is there it's just immed get the data if page is not in memory it",
    "start": "2035639",
    "end": "2042720"
  },
  {
    "text": "will fall back to the snapshot file and if snapshot file has the chunk data will",
    "start": "2042720",
    "end": "2048679"
  },
  {
    "text": "be returned if snapshot file doesn't have a chunk yet it will make a call to our IND",
    "start": "2048679",
    "end": "2055919"
  },
  {
    "text": "Direction layer and request for a chunk in Direction layer first we look",
    "start": "2055919",
    "end": "2061760"
  },
  {
    "text": "up in the local cash on the worker to see if sank is available if not it it",
    "start": "2061760",
    "end": "2067800"
  },
  {
    "text": "will ask a distributed cash and if Chun is not there as well it",
    "start": "2067800",
    "end": "2073440"
  },
  {
    "text": "will go to origin to three in our",
    "start": "2073440",
    "end": "2078358"
  },
  {
    "text": "case this is how on demand chunk loading Works efficiency of on the Chun",
    "start": "2079800",
    "end": "2087158"
  },
  {
    "text": "loading hugely depends on the success heat ratio of caches local cash is super fast",
    "start": "2087159",
    "end": "2094960"
  },
  {
    "text": "distributed cash fast as well and is slow for the consistent customer",
    "start": "2094960",
    "end": "2101760"
  },
  {
    "text": "experience and stable performance we want to ensure that we hit cash all the time or most of the time and",
    "start": "2101760",
    "end": "2110680"
  },
  {
    "text": "minimize calls to the origion in order to",
    "start": "2110760",
    "end": "2117839"
  },
  {
    "text": "maximize cash heat ratio it would be good to share common",
    "start": "2117839",
    "end": "2123160"
  },
  {
    "text": "chunks for example multiple Java functions that we all have Java and it's",
    "start": "2123160",
    "end": "2129839"
  },
  {
    "text": "very likely this these chunks holding Java bits will be common and we should",
    "start": "2129839",
    "end": "2135240"
  },
  {
    "text": "be able to dup them or multiple container images they're using the same",
    "start": "2135240",
    "end": "2141200"
  },
  {
    "text": "Linux we should be able to dedup these Linux chunks and share it between",
    "start": "2141200",
    "end": "2146680"
  },
  {
    "text": "multiple function and don't copy them but we need to be",
    "start": "2146680",
    "end": "2152359"
  },
  {
    "text": "careful because we don't want to share function data itself it's private it's",
    "start": "2152359",
    "end": "2160119"
  },
  {
    "text": "confidential we can leverage the fact that we know how we created these chunks because it was our system which",
    "start": "2161960",
    "end": "2170280"
  },
  {
    "text": "loads operating system first then loads run time and then function code so we",
    "start": "2170280",
    "end": "2176240"
  },
  {
    "text": "can create multiple layered incremental snapshots but first with the base",
    "start": "2176240",
    "end": "2181839"
  },
  {
    "text": "operating system snapshot which has no customer data it just Linux booted",
    "start": "2181839",
    "end": "2188839"
  },
  {
    "text": "then we can use this snapshot to resume VM and let's",
    "start": "2188839",
    "end": "2194640"
  },
  {
    "text": "say load Java or different VM and load not GS but",
    "start": "2194640",
    "end": "2202800"
  },
  {
    "text": "they still will have common operating system chunks then we can create next",
    "start": "2202800",
    "end": "2208520"
  },
  {
    "text": "incremental snapshot we call it runtime snapshot and now I can create multiple Java functions from the same Java",
    "start": "2208520",
    "end": "2215000"
  },
  {
    "text": "runtime snapshot they will have unique function data but also common operating",
    "start": "2215000",
    "end": "2220599"
  },
  {
    "text": "system and Java run time chunks as a result we can Mark entire",
    "start": "2220599",
    "end": "2226400"
  },
  {
    "text": "snapshot and tag them as operating system chunks runtime chunks and",
    "start": "2226400",
    "end": "2231839"
  },
  {
    "text": "function chunks and for every layer we will use different encryption key so",
    "start": "2231839",
    "end": "2236920"
  },
  {
    "text": "they don't share with each other and for the function chunks we",
    "start": "2236920",
    "end": "2244079"
  },
  {
    "text": "will be using customer manage key to make sure that only this particular customer has access to their chunks and",
    "start": "2244079",
    "end": "2252319"
  },
  {
    "text": "they never shared but we can share operating system and runtime channels this is super",
    "start": "2252319",
    "end": "2259880"
  },
  {
    "text": "helpful sometimes we don't know the origin of the file for",
    "start": "2260640",
    "end": "2265720"
  },
  {
    "text": "example readon disk we don't know what was written in a Java runtime",
    "start": "2265720",
    "end": "2271960"
  },
  {
    "text": "distribution or into the Linux distribution but still intuitively we",
    "start": "2271960",
    "end": "2277119"
  },
  {
    "text": "think there is some common chunks there some common bits there so we come up with the",
    "start": "2277119",
    "end": "2282800"
  },
  {
    "text": "convergent encryption idea it means that",
    "start": "2282800",
    "end": "2289560"
  },
  {
    "text": "if two chunks from two different files have the same content in a plain",
    "start": "2289560",
    "end": "2296280"
  },
  {
    "text": "text they will be equal in the encrypted form as",
    "start": "2296280",
    "end": "2301319"
  },
  {
    "text": "well in convergent encryption the key is",
    "start": "2301319",
    "end": "2307119"
  },
  {
    "text": "in from the content itself so now we can",
    "start": "2307119",
    "end": "2312240"
  },
  {
    "text": "take different Linux distributions ENC chunk them and encrypt",
    "start": "2312240",
    "end": "2317480"
  },
  {
    "text": "them and then compare encrypted chunks and be able still to duplicate common",
    "start": "2317480",
    "end": "2324200"
  },
  {
    "text": "bits and it allows us greatly reuse chunks across container",
    "start": "2324200",
    "end": "2330520"
  },
  {
    "text": "images it's all together increases cash",
    "start": "2330520",
    "end": "2335640"
  },
  {
    "text": "locality number of hits to the local distributed cash and reducing latency",
    "start": "2335640",
    "end": "2343599"
  },
  {
    "text": "overhead this is overview of the system in production the only big difference is",
    "start": "2343680",
    "end": "2351040"
  },
  {
    "text": "that I replaced work in Direction layer with a sparse file",
    "start": "2351040",
    "end": "2357960"
  },
  {
    "text": "system which actually do all this magic to request chunks and provide It On",
    "start": "2357960",
    "end": "2363640"
  },
  {
    "text": "Demand at a file system level so now we're able to distribute",
    "start": "2363640",
    "end": "2370599"
  },
  {
    "text": "snapshots and we're able to resume VMS everything should be good",
    "start": "2370599",
    "end": "2376040"
  },
  {
    "text": "right unfortunately we still see some delay in",
    "start": "2376040",
    "end": "2382359"
  },
  {
    "text": "some number of golden walks they're very close to the Target place but still we see",
    "start": "2382359",
    "end": "2387520"
  },
  {
    "text": "them let's understand what's going on here we need to go back to the page",
    "start": "2387520",
    "end": "2393400"
  },
  {
    "text": "caches and memory mapping post file on disk is slow to",
    "start": "2393400",
    "end": "2400640"
  },
  {
    "text": "read operating system makes another optimization when a process reads single",
    "start": "2400640",
    "end": "2406720"
  },
  {
    "text": "page in the memory operating system will actually read multiple",
    "start": "2406720",
    "end": "2412480"
  },
  {
    "text": "Pages it's called read ahead the expectation that in normal",
    "start": "2412480",
    "end": "2419040"
  },
  {
    "text": "files the read will be sequential so that means we read bunch",
    "start": "2419040",
    "end": "2425480"
  },
  {
    "text": "of pages from file once and then we just use memory because it's already there very fast and very",
    "start": "2425480",
    "end": "2431839"
  },
  {
    "text": "efficient remember we mapped memory instead of regular file and memory is random",
    "start": "2431839",
    "end": "2440760"
  },
  {
    "text": "access so in that case we won't hit the pages we load we will hit every time new",
    "start": "2441480",
    "end": "2448839"
  },
  {
    "text": "page and as a result in this example we randomly request four",
    "start": "2448839",
    "end": "2455319"
  },
  {
    "text": "pages but it forces a operating system to actually download the entire snapshot",
    "start": "2455319",
    "end": "2460880"
  },
  {
    "text": "file it's super inefficient it takes time to download this file decrypt",
    "start": "2460880",
    "end": "2467359"
  },
  {
    "text": "them check some of them and this is what we see on this latency distribution",
    "start": "2467359",
    "end": "2473640"
  },
  {
    "text": "graph we need to fix",
    "start": "2474160",
    "end": "2477880"
  },
  {
    "text": "it it's not a QR code so this is the memory access",
    "start": "2480079",
    "end": "2487839"
  },
  {
    "text": "between 100 VMS laid one on another you can see that",
    "start": "2487839",
    "end": "2494960"
  },
  {
    "text": "most of the pages they quite consistent exact the same",
    "start": "2494960",
    "end": "2500680"
  },
  {
    "text": "spot we can record this access pattern into a file page access",
    "start": "2500680",
    "end": "2507440"
  },
  {
    "text": "log and attach it to every snapshot and now when we resume snapshot we know",
    "start": "2507440",
    "end": "2513000"
  },
  {
    "text": "exact what pages will be needed and in which order",
    "start": "2513000",
    "end": "2519000"
  },
  {
    "text": "and it become fast so now we solved problem with call",
    "start": "2519000",
    "end": "2528559"
  },
  {
    "text": "starts and the best part you can try to today yourself simply enable Lambda snapart on",
    "start": "2529760",
    "end": "2537680"
  },
  {
    "text": "your jav function and see how VM snapshot",
    "start": "2537680",
    "end": "2542319"
  },
  {
    "text": "Works let's summarize so today we talked about inok routing",
    "start": "2545040",
    "end": "2551440"
  },
  {
    "text": "cayer in Lambda and we were able to improve availability of our system and",
    "start": "2551440",
    "end": "2559559"
  },
  {
    "text": "maintain its scale we talk about comput",
    "start": "2559559",
    "end": "2565160"
  },
  {
    "text": "infrastructure and we introduced firecracker to greatly increase",
    "start": "2565160",
    "end": "2570559"
  },
  {
    "text": "efficiency while preserving strong security posture we also",
    "start": "2570559",
    "end": "2578040"
  },
  {
    "text": "substantially increase performance of our system and completely eliminate the call",
    "start": "2578040",
    "end": "2585319"
  },
  {
    "text": "starts and all of this work is needed for a simple",
    "start": "2585319",
    "end": "2590359"
  },
  {
    "text": "idea we around your code in the cloud no service",
    "start": "2590359",
    "end": "2596160"
  },
  {
    "text": "required this is why we say Lambda is compression algorithm for our",
    "start": "2596640",
    "end": "2602960"
  },
  {
    "text": "experience thank you I collected additional materials on this",
    "start": "2605640",
    "end": "2610800"
  },
  {
    "text": "link take time to snap it uh and read on your own",
    "start": "2610800",
    "end": "2616960"
  },
  {
    "text": "time let's connect on LinkedIn I would love to stay in touch and I'm looking",
    "start": "2625079",
    "end": "2630680"
  },
  {
    "text": "forward to talk to all of you during the next three days at our conference and finally please vote and",
    "start": "2630680",
    "end": "2637960"
  },
  {
    "text": "leave feedback your importance super important for us it help us to make our sessions",
    "start": "2637960",
    "end": "2643960"
  },
  {
    "text": "better thank",
    "start": "2643960",
    "end": "2646800"
  },
  {
    "text": "you we got s minutes you want to ask any",
    "start": "2650720",
    "end": "2655559"
  },
  {
    "text": "questions hi for conver encryption you asking to identify the CHS uh how what",
    "start": "2658880",
    "end": "2666760"
  },
  {
    "text": "about collisions in this case",
    "start": "2666760",
    "end": "2673359"
  },
  {
    "text": "yeah so the question is um how we avoid hash collisions in the convergence encryption so we rely on the",
    "start": "2673359",
    "end": "2680280"
  },
  {
    "text": "cryptographic hash algorithms uh to provide us um reliable information and U I also",
    "start": "2680280",
    "end": "2687720"
  },
  {
    "text": "think that so yeah so I think we just rely on the cryptographic has algorithms to",
    "start": "2687720",
    "end": "2694640"
  },
  {
    "text": "solve it hello uh thank you for the presentation actually I have two",
    "start": "2694640",
    "end": "2700440"
  },
  {
    "text": "questions and the first one I think is out of scope the presentation but it's related to configuration how actually",
    "start": "2700440",
    "end": "2708200"
  },
  {
    "text": "you load configuration to your to your function because it's at least additional P configuration service do",
    "start": "2708200",
    "end": "2714319"
  },
  {
    "text": "you have kind of good optimization receipts for this part um okay the first",
    "start": "2714319",
    "end": "2720119"
  },
  {
    "text": "question is how we actually load function configuration because making an extra hope is inefficient it's",
    "start": "2720119",
    "end": "2727200"
  },
  {
    "text": "absolutely true it's inefficient so in fact front end maintains the coherent cache of the configuration database in",
    "start": "2727200",
    "end": "2736119"
  },
  {
    "text": "nearby uh it's distributed cash in multiple availability zones so it's basically become a fast cash look",
    "start": "2736119",
    "end": "2744559"
  },
  {
    "text": "up and now the second question uh currently now company trying to build",
    "start": "2744960",
    "end": "2751240"
  },
  {
    "text": "Lambda function in our own Data Center and trying to use can and when we go",
    "start": "2751240",
    "end": "2756559"
  },
  {
    "text": "inside and look how it work we just realize the same P the same micos service the same R time",
    "start": "2756559",
    "end": "2765319"
  },
  {
    "text": "and what is the benefit we can provide to our developers with d if they already",
    "start": "2765319",
    "end": "2770920"
  },
  {
    "text": "can WR it into microservices with um I think it's probably good follow up",
    "start": "2770920",
    "end": "2779240"
  },
  {
    "text": "talk after our uh in a wholeway because it's not directly relat to the my talk",
    "start": "2779240",
    "end": "2784559"
  },
  {
    "text": "here but I'm happy to follow up uh in a whole way oh this person",
    "start": "2784559",
    "end": "2792960"
  },
  {
    "text": "okay",
    "start": "2792960",
    "end": "2795960"
  },
  {
    "text": "ious teches you see the",
    "start": "2799040",
    "end": "2803040"
  },
  {
    "text": "samech uh so the question is if there is any resemblance or overlap with the EBS",
    "start": "2805520",
    "end": "2812400"
  },
  {
    "text": "snapshot technology I guess the question is like could you use the same techniques",
    "start": "2812400",
    "end": "2817720"
  },
  {
    "text": "to make yes logically so okay question was",
    "start": "2817720",
    "end": "2824079"
  },
  {
    "text": "actually can we use the same technology to uh boot faster logically yes but uh",
    "start": "2824079",
    "end": "2832640"
  },
  {
    "text": "they are more complicated in terms of hardware and virtualization layer is more complicated than firecracker so",
    "start": "2832640",
    "end": "2839760"
  },
  {
    "text": "this is why um but yeah logically it's possible it's just requires more",
    "start": "2839760",
    "end": "2845200"
  },
  {
    "text": "work yeah uh how do these different Services placement service availability service",
    "start": "2845200",
    "end": "2851400"
  },
  {
    "text": "talk each other like synchronous HP calls or asynchronous how do they communicate with each",
    "start": "2851400",
    "end": "2857079"
  },
  {
    "text": "other it's basically a mixture in some cases it's a synchronous request response Communication in some cases we",
    "start": "2857079",
    "end": "2864800"
  },
  {
    "text": "leverage um GPC and http2 streams uh to",
    "start": "2864800",
    "end": "2870400"
  },
  {
    "text": "stream data instead of a single request response so it's really mixture depending on the uh requirements of",
    "start": "2870400",
    "end": "2877599"
  },
  {
    "text": "particular communication and uh so yeah so just fit find one which fit the",
    "start": "2877599",
    "end": "2885000"
  },
  {
    "text": "best quick question you mentioned several times that you're using metal instances right why is it not regular",
    "start": "2885040",
    "end": "2892839"
  },
  {
    "text": "instances okay so why we use metal instances um the firecracker actually",
    "start": "2892839",
    "end": "2898280"
  },
  {
    "text": "requires either metal instances or nest viralization and unfortunately today the",
    "start": "2898280",
    "end": "2904839"
  },
  {
    "text": "nest virtualization doesn't provide um doesn't meet our requirements on",
    "start": "2904839",
    "end": "2910359"
  },
  {
    "text": "overhead and uh latency so that's why we use only metal because they basically",
    "start": "2910359",
    "end": "2915640"
  },
  {
    "text": "fits the need but again logically you can use Nest virtualization but it would",
    "start": "2915640",
    "end": "2920960"
  },
  {
    "text": "be much slower it would be 10 to 20x slower on every system",
    "start": "2920960",
    "end": "2927440"
  },
  {
    "text": "call andun uh sorry uh manage updates to as",
    "start": "2931400",
    "end": "2939640"
  },
  {
    "text": "as is being ex so how yeah how how the question is",
    "start": "2939640",
    "end": "2945160"
  },
  {
    "text": "how we handle uh Lambda function updates while snapshot is being executed so",
    "start": "2945160",
    "end": "2950400"
  },
  {
    "text": "basically on a creation of the function or function update we would kick off the",
    "start": "2950400",
    "end": "2955799"
  },
  {
    "text": "asynchronous background process to create a snapshot uh while it's not finished you",
    "start": "2955799",
    "end": "2961440"
  },
  {
    "text": "will be using previous function version once it's snapshot is finished we will switch to the",
    "start": "2961440",
    "end": "2968559"
  },
  {
    "text": "latest question last question um because",
    "start": "2968559",
    "end": "2973880"
  },
  {
    "text": "are bial work a customer does each time one US it can be really small uh assume",
    "start": "2973880",
    "end": "2979559"
  },
  {
    "text": "you have to make your data and control Point Sy is very efficient to keep margins how is",
    "start": "2979559",
    "end": "2985160"
  },
  {
    "text": "that Bor into the the Engineering Process how you design your",
    "start": "2985160",
    "end": "2990680"
  },
  {
    "text": "system okay so the question is how we handle efficiency into the engineering",
    "start": "2990680",
    "end": "2996440"
  },
  {
    "text": "Pro process um so we have three big pullers it's security efficiency and",
    "start": "2996440",
    "end": "3003960"
  },
  {
    "text": "latency and as Engineers you always kind of in attention you you want to be in the middle of this sport because they",
    "start": "3003960",
    "end": "3010920"
  },
  {
    "text": "all pull in different sides so it's it's really balancing C there is no magic no",
    "start": "3010920",
    "end": "3016400"
  },
  {
    "text": "silver ballet here so we always kind of try to do The Balancing Act and the only",
    "start": "3016400",
    "end": "3022400"
  },
  {
    "text": "thing you cannot sacrifice is security so sometimes um you can for example do this security",
    "start": "3022400",
    "end": "3030040"
  },
  {
    "text": "patch and then uh restore the efficiency but uh the only true kind of you cannot",
    "start": "3030040",
    "end": "3036040"
  },
  {
    "text": "do this with security so security always first but yes it's Balancing Act basically and every engineer doing this",
    "start": "3036040",
    "end": "3041640"
  },
  {
    "text": "Balancing Act and uh and trying to preserve all three okay and all the time for",
    "start": "3041640",
    "end": "3047880"
  },
  {
    "text": "questions we have the next to will be at 1145 that'll be the relation will date",
    "start": "3047880",
    "end": "3053000"
  },
  {
    "text": "at the edge talk Mike will be around about 20 minutes before the next time so thank you mik thank",
    "start": "3053000",
    "end": "3058830"
  },
  {
    "text": "[Applause]",
    "start": "3058830",
    "end": "3064159"
  },
  {
    "text": "[Music]",
    "start": "3064640",
    "end": "3070359"
  },
  {
    "text": "you",
    "start": "3070359",
    "end": "3073359"
  }
]