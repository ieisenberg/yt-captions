[
  {
    "start": "0",
    "end": "171000"
  },
  {
    "text": "so I'm Q Khan London is my favorite place to give a talk it's both my most",
    "start": "3970",
    "end": "10870"
  },
  {
    "text": "exciting and most terrifying talk because I almost always give the brand new shiny live demo first at this at",
    "start": "10870",
    "end": "18310"
  },
  {
    "text": "this conference so this is the place where it's either going to fail horribly or not fail quite so horribly there",
    "start": "18310",
    "end": "26230"
  },
  {
    "text": "really is no success at this so anyway but you are always an amazing audience she said setting expectations",
    "start": "26230",
    "end": "31630"
  },
  {
    "text": "accordingly so you're always extremely supportive of my trials and tribulations yes so yes so I'm Trisha I work for",
    "start": "31630",
    "end": "39280"
  },
  {
    "text": "JetBrains I'm a developer advocate working mostly with IntelliJ IDEA and also with up sources which is our code review tool",
    "start": "39280",
    "end": "44909"
  },
  {
    "text": "and this talk is basically Trish can you talk about Java 9ish so so I am I'm",
    "start": "44909",
    "end": "52600"
  },
  {
    "text": "going to talk about I'm gonna do a little bit about jigsaw in action even though I promised I wasn't going to do",
    "start": "52600",
    "end": "57639"
  },
  {
    "text": "anything about jigsaw and I'm going to look spend quite a bit of time looking at reactive programming in Java 9 and",
    "start": "57639",
    "end": "64210"
  },
  {
    "text": "that's because the reactive api's are built into Java the language so the thing is can be quite interesting to",
    "start": "64210",
    "end": "69940"
  },
  {
    "text": "understand how reactive programming works in in Java to get a feel for what this means for us and then I'm going to",
    "start": "69940",
    "end": "75430"
  },
  {
    "text": "spend some time depending on how long this takes and looking at some of the",
    "start": "75430",
    "end": "80560"
  },
  {
    "text": "other Java 9 features that we as developers are probably going to find reasonably interesting so first and",
    "start": "80560",
    "end": "86200"
  },
  {
    "text": "foremost I think it's really important to understand why we should care about Java 9 it's not just because it's the",
    "start": "86200",
    "end": "91630"
  },
  {
    "text": "latest and greatest in the shiniest and at some point you probably going to have to go to your bosses and say whether or not it's worth going to Java 9 given or",
    "start": "91630",
    "end": "98890"
  },
  {
    "text": "who's using Java 8 at the moment that's fantastic who isn't using Java 8 yet",
    "start": "98890",
    "end": "104820"
  },
  {
    "text": "who's an Android developer some of you okay that makes sense is anyone using",
    "start": "104820",
    "end": "110830"
  },
  {
    "text": "Java 9 yet really that's adventurous yes",
    "start": "110830",
    "end": "116860"
  },
  {
    "text": "okay so let's have a quick talk about why we want to know about Java 9 it's coming out this year probably July ish",
    "start": "116860",
    "end": "123159"
  },
  {
    "text": "they tell us we don't really know it's Brian in the room I hope not because then he can not tell me what's wrong",
    "start": "123159",
    "end": "129159"
  },
  {
    "text": "with my job and I talk and so we want to have a feel for why we might think about upgrading to Java 9 and we get freeze",
    "start": "129159",
    "end": "136650"
  },
  {
    "text": "with Java 9 if we upgrade to Japan iron just run our applications on Java 9",
    "start": "136650",
    "end": "142110"
  },
  {
    "text": "without doing anything without making use of any of the new features we get better use of memory better performance",
    "start": "142110",
    "end": "147720"
  },
  {
    "text": "of a bunch of different stuff we get better use of hardware we get better javadoc documentation it comes with a",
    "start": "147720",
    "end": "153659"
  },
  {
    "text": "new search field and you can do html5 Java doc which is terribly exciting and",
    "start": "153659",
    "end": "159409"
  },
  {
    "text": "some improvements around graphics and faster compilation so there are some there's some really nice changes which",
    "start": "159409",
    "end": "165180"
  },
  {
    "text": "have gone into Java 9 which you can take advantage of straight away just come kind of free out-of-the-box of course",
    "start": "165180",
    "end": "171629"
  },
  {
    "start": "171000",
    "end": "305000"
  },
  {
    "text": "whenever anyone talks about Java 9 they can't help but talk about jigsaw because this is the big thing and it's only been",
    "start": "171629",
    "end": "177480"
  },
  {
    "text": "sort of a work in progress for about you know 5 million years and we're eventually going to get it in Java 9",
    "start": "177480",
    "end": "184079"
  },
  {
    "text": "whatever that means so this is the big ticket item for Java 9 and a bunch of",
    "start": "184079",
    "end": "189659"
  },
  {
    "text": "people are talking about the repple who's heard of the Java 9 repple a few of you so read eval print loop so the",
    "start": "189659",
    "end": "196290"
  },
  {
    "text": "ability to kind of try out Java statements on the command line which is not really a way that we as Java",
    "start": "196290",
    "end": "201870"
  },
  {
    "text": "developers are used to working you have it with things like closure and a bunch of JavaScript ways of doing stuff and but it's not really a traditional Java",
    "start": "201870",
    "end": "208709"
  },
  {
    "text": "way of working so the repple is quite interesting and we are not going to have time to see it today I'm so sorry I'm",
    "start": "208709",
    "end": "214260"
  },
  {
    "text": "and then everyone's like ok so what else is there you get some free stuff and you get jigsaw and you get the repple but",
    "start": "214260",
    "end": "219959"
  },
  {
    "text": "what is there for me as a developer so we're going to look at some of the other things which came in which is coming in",
    "start": "219959",
    "end": "225569"
  },
  {
    "text": "to Java 9 it's now sort of feature complete so there's one or two things which are going to be available whenever",
    "start": "225569",
    "end": "231510"
  },
  {
    "text": "Java 9 is finally released now I usually especially given live demos slightly",
    "start": "231510",
    "end": "238889"
  },
  {
    "text": "fraught with danger so I do usually try and set expectations appropriately low",
    "start": "238889",
    "end": "244579"
  },
  {
    "text": "don't use Java 9 in production yet it's not out yet it's not ready yet it is it",
    "start": "244579",
    "end": "251340"
  },
  {
    "text": "is an early access release so you can download Java 9 it is being updated fairly regularly you can download an",
    "start": "251340",
    "end": "257099"
  },
  {
    "text": "early access and try it out in your applications or in a new application the other thing which is early access at the",
    "start": "257099",
    "end": "263520"
  },
  {
    "text": "moment is the IntelliJ IDEA version that I'm going to be using here is the one that's not quite yet as well so something will definitely",
    "start": "263520",
    "end": "270590"
  },
  {
    "text": "go wrong and I'm ready for this I can take it and of course we can't really",
    "start": "270590",
    "end": "276290"
  },
  {
    "text": "talk about best practice with a version of Java which isn't out yet so we don't",
    "start": "276290",
    "end": "281450"
  },
  {
    "text": "really know what best practice looks like yet for Java 9 we're only just starting to see some of these best",
    "start": "281450",
    "end": "286490"
  },
  {
    "text": "practice type things for Java 8 with lambdas and streams so all I can really give you as a kind of sneak peek on some",
    "start": "286490",
    "end": "292700"
  },
  {
    "text": "of the features of Java 9 how I found them reasonably useful for me to work with in a real live codebase and then",
    "start": "292700",
    "end": "301550"
  },
  {
    "text": "from there you can get a feel for perhaps what sorts of things are coming in Java 9 the case study two years ago I",
    "start": "301550",
    "end": "308570"
  },
  {
    "start": "305000",
    "end": "434000"
  },
  {
    "text": "did a live demo probably in this very room about Java 8 in anger frankly I",
    "start": "308570",
    "end": "313610"
  },
  {
    "text": "think I should have called this Java 9 in anger because jigsaw made me quite angry and the Java 8 in hangar talk was",
    "start": "313610",
    "end": "319310"
  },
  {
    "text": "about JavaFX real real-time dashboard which responds to tweets pauses tweets",
    "start": "319310",
    "end": "325190"
  },
  {
    "text": "and does some interesting stuff with them and shows them on on this dashboard and the point of that was to kind of",
    "start": "325190",
    "end": "331940"
  },
  {
    "text": "demonstrate a bunch of Java 8 features now what I wanted to do is just take the same application and migrate it to Java",
    "start": "331940",
    "end": "337790"
  },
  {
    "text": "9 make use of some of the Java 9 features particularly because this was always a kind of event-driven type",
    "start": "337790",
    "end": "344390"
  },
  {
    "text": "architecture which lends itself quite nicely to the sort of reactive api's the",
    "start": "344390",
    "end": "349550"
  },
  {
    "text": "architecture of this was it's kind of got some very tiny services I wouldn't say micro services because they're not reliable and they don't do",
    "start": "349550",
    "end": "355910"
  },
  {
    "text": "any reporting or anything that's useful for micro services but I have a bunch of independent services and so we'll have a",
    "start": "355910",
    "end": "361490"
  },
  {
    "text": "look at some of those independent services see how they work and see how the Java 9 features impact them I could",
    "start": "361490",
    "end": "369680"
  },
  {
    "text": "yeah let's do a fraught with danger and try and see if we can get it up and running so I can show you what it looks",
    "start": "369680",
    "end": "374780"
  },
  {
    "text": "like so the first place we can go wrong",
    "start": "374780",
    "end": "381050"
  },
  {
    "text": "and you know when you're like compiling stuff on your on your computer and someone looks over your shoulder and it",
    "start": "381050",
    "end": "386690"
  },
  {
    "text": "takes like about 500 times longer than it normally does that's what this",
    "start": "386690",
    "end": "391760"
  },
  {
    "text": "experience is like there's like 700 of you in this room all right so I've got",
    "start": "391760",
    "end": "397730"
  },
  {
    "text": "what I'm doing is I'm starting three independent services in the backend one is a sir which sends tweet like information one",
    "start": "397730",
    "end": "405379"
  },
  {
    "text": "is a service which parses the the usernames out of the tweet and one is a service which kind of get some idea of",
    "start": "405379",
    "end": "411469"
  },
  {
    "text": "what the mood of that tweet is is it's kind of vaguely happy is it kind of vaguely sad and then I have JavaFX",
    "start": "411469",
    "end": "416989"
  },
  {
    "text": "dashboard which kind of renders this on the screen so this is the application that we're going to be refactoring to",
    "start": "416989",
    "end": "422839"
  },
  {
    "text": "use some Java 9 features and architectures that's subtle that I'm",
    "start": "422839",
    "end": "428329"
  },
  {
    "text": "surprised that worked that's the first test passed excellent and so if you're",
    "start": "428329",
    "end": "435229"
  },
  {
    "start": "434000",
    "end": "572000"
  },
  {
    "text": "interested in the original use case I'm not going to go into the details of how that was built because I've already talked about that and it's available",
    "start": "435229",
    "end": "440689"
  },
  {
    "text": "online and I don't need to bore you with the details these slides are obviously available online so you don't have to like take",
    "start": "440689",
    "end": "447529"
  },
  {
    "text": "pictures of the thing so Java 9 I can't really go anywhere with Java 9 without talking about the elephant in the room",
    "start": "447529",
    "end": "453739"
  },
  {
    "text": "which is jigsaw and they really did want to get away without talking about jigsaw in a Java 9 talk but it turned out that",
    "start": "453739",
    "end": "460479"
  },
  {
    "text": "what my project was a multi module project using Gradle and Gradle the",
    "start": "460479",
    "end": "466969"
  },
  {
    "text": "current version of Gradle with the particular version of groovy in the particular version of Java 9 in IntelliJ",
    "start": "466969",
    "end": "472339"
  },
  {
    "text": "doesn't work so at the moment and they are working on it but it means that my multi module project which was so",
    "start": "472339",
    "end": "478669"
  },
  {
    "text": "amazing under Java 8 and doesn't work on the Java 9 so I decided why not just like port it to jigsaw just see what",
    "start": "478669",
    "end": "484039"
  },
  {
    "text": "happens and the one of the things I had to do is actually had to change I don't know if this is absolutely mandatory but",
    "start": "484039",
    "end": "490639"
  },
  {
    "text": "I had to change the directory structure of the project so what I had before was a kind of typical groovy like movie",
    "start": "490639",
    "end": "496999"
  },
  {
    "text": "in Gradle and maven style directory structure with my sort of source main Java source test Java type of directory",
    "start": "496999",
    "end": "504860"
  },
  {
    "text": "structure and in order to turn it into a jigsaw friendly modular system I ended",
    "start": "504860",
    "end": "511219"
  },
  {
    "text": "up having to have like a top-level source directory and then all of my modules under that and their top-level",
    "start": "511219",
    "end": "516948"
  },
  {
    "text": "test directory and all my test modules underneath that and this is much more in line with a sort of recommendations from",
    "start": "516949",
    "end": "523129"
  },
  {
    "text": "both the jigsaw QuickStart tutorial and this is what the the JDK",
    "start": "523129",
    "end": "528520"
  },
  {
    "text": "layout looks like if you look at the jdk code itself and so what you'll see with",
    "start": "528520",
    "end": "534130"
  },
  {
    "text": "that is now I have a module info file which is the kind of the configuration",
    "start": "534130",
    "end": "539950"
  },
  {
    "text": "of your Java 9 jigsaw module and for each of my production modules but I",
    "start": "539950",
    "end": "546460"
  },
  {
    "text": "don't have one for my test classes because the test classes are in the same modules the same package name and so",
    "start": "546460",
    "end": "553930"
  },
  {
    "text": "there's a package name clash and so the easiest way for me to get this to work something for demo purposes was to not",
    "start": "553930",
    "end": "559630"
  },
  {
    "text": "turn my test classes into real modules just have the IDE take care of the dependencies and so I run the tests",
    "start": "559630",
    "end": "565150"
  },
  {
    "text": "inside the IDE so this is not this is definitely not best practice but it does work more or less so one of the",
    "start": "565150",
    "end": "574090"
  },
  {
    "start": "572000",
    "end": "720000"
  },
  {
    "text": "interesting things about modularizing my code is I had a look at the dependencies between my modules and these are the",
    "start": "574090",
    "end": "580120"
  },
  {
    "text": "things which visited appendixes I already had I already had a modular structure in my code and then I thought",
    "start": "580120",
    "end": "586540"
  },
  {
    "text": "well let's have a look and see if my dependencies are right and it turned out that I had some weird conflicts of ideas",
    "start": "586540",
    "end": "592630"
  },
  {
    "text": "inside my head when I created my original modules for example my two back-end services my merge service and",
    "start": "592630",
    "end": "599380"
  },
  {
    "text": "my user service both depend upon code from my Twitter service and when I",
    "start": "599380",
    "end": "605320"
  },
  {
    "text": "thought about it I thought well that makes no sense I mean it can listen to the Twitter service but it shouldn't be sharing code from the Twitter service",
    "start": "605320",
    "end": "611110"
  },
  {
    "text": "that's kind of a bit weird I also see that my client code has access to the",
    "start": "611110",
    "end": "617710"
  },
  {
    "text": "web socket API library as well as the web socket implementation which I also didn't know why that was either and then",
    "start": "617710",
    "end": "625210"
  },
  {
    "text": "I have a separate module which is necessary at the moment which is going",
    "start": "625210",
    "end": "631210"
  },
  {
    "text": "to do the conversion between my Java eight reactives Java 9 react to streams API and the org reactive streams",
    "start": "631210",
    "end": "639090"
  },
  {
    "text": "reactive streams API which is called which is called flow and this module was",
    "start": "639090",
    "end": "645790"
  },
  {
    "text": "dependent upon reactor streams but also inexplicably so was my service module so by drawing out what my dependencies were",
    "start": "645790",
    "end": "652300"
  },
  {
    "text": "I could actually see that I had some weird dependencies that I didn't really",
    "start": "652300",
    "end": "657520"
  },
  {
    "text": "need and jigsaw kind of brought this to my attention because I had to think about what my dependencies were what were my",
    "start": "657520",
    "end": "663350"
  },
  {
    "text": "modules really using so I went away and rethought about it and I ended up with a much simpler structure and with this one",
    "start": "663350",
    "end": "668779"
  },
  {
    "text": "all of my independent services are now independent services they don't depend upon each other they do depend upon the",
    "start": "668779",
    "end": "675140"
  },
  {
    "text": "service class the service module which is all my infrastructure code for services so that seems correct which",
    "start": "675140",
    "end": "680660"
  },
  {
    "text": "depends upon WebSockets because my implementation is WebSockets and then my three back-end services my Twitter",
    "start": "680660",
    "end": "687200"
  },
  {
    "text": "service my user service and my mood service are all dependent upon our X Java because those are the only services",
    "start": "687200",
    "end": "692959"
  },
  {
    "text": "which use rxjava and then I also have and those ones also have to depend upon my adapter between reactor streams",
    "start": "692959",
    "end": "700040"
  },
  {
    "text": "implementation and the Java nine implementation so here I found jigsaw",
    "start": "700040",
    "end": "705170"
  },
  {
    "text": "really useful for kind of helping me to forcing me to look at the modular structure in my code to look at the",
    "start": "705170",
    "end": "712070"
  },
  {
    "text": "dependencies to see whether they made any sense at all which was kind of a bit tiresome because I really didn't want to",
    "start": "712070",
    "end": "717200"
  },
  {
    "text": "be looking at jigsaw at all I just wanted to get on with the code and let's have a let's take a quick look at what",
    "start": "717200",
    "end": "722449"
  },
  {
    "start": "720000",
    "end": "1094000"
  },
  {
    "text": "this means and all of this talk by the way is going to be sort of very each topic it's going to be quite high level",
    "start": "722449",
    "end": "728240"
  },
  {
    "text": "so if you're kind of interested in jigsaw for example there are lots of talks and documentation already",
    "start": "728240",
    "end": "733279"
  },
  {
    "text": "available on jigsaw and there will be more this year I'm sure so I'm not going to do like a deep dive onto each topic",
    "start": "733279",
    "end": "739550"
  },
  {
    "text": "I'm just going to do a sort of high-level oh look this is what it looks like in the code and then if you're interested you can go away and find out",
    "start": "739550",
    "end": "745160"
  },
  {
    "text": "more information later so let's look at trying to implement a jigsaw module",
    "start": "745160",
    "end": "750560"
  },
  {
    "text": "inside real code and let's check out the right branch",
    "start": "750560",
    "end": "757300"
  },
  {
    "text": "so mm-hm and what you've got you know I",
    "start": "765079",
    "end": "770730"
  },
  {
    "text": "really need to be able to see that the words there but and so this is one of my back-end modules it doesn't currently",
    "start": "770730",
    "end": "776100"
  },
  {
    "text": "have a module info my other modules have a module info so in order to turn this",
    "start": "776100",
    "end": "781769"
  },
  {
    "text": "into a module it needs to have the module info file so I'll create one of those new module info IntelliJ makes a",
    "start": "781769",
    "end": "790019"
  },
  {
    "text": "reasonable guess as to what the name of the module is but it's not quite right to kinda put some dots in here no doubt",
    "start": "790019",
    "end": "795420"
  },
  {
    "text": "this functionality will evolve over time and so now when I compile Java nyan is",
    "start": "795420",
    "end": "801329"
  },
  {
    "text": "going to say okay this needs to sort of conform to all the the jigsaw modularity way of doing stuff and so now I'm going",
    "start": "801329",
    "end": "806759"
  },
  {
    "text": "to give you loads of errors and warnings about what you've done wrong and so now I'm using a Java library class musing",
    "start": "806759",
    "end": "814290"
  },
  {
    "text": "the the Java logger but I need to declare that I'm going to use that module and I'm not going to get it by",
    "start": "814290",
    "end": "819420"
  },
  {
    "text": "default so if I enter onto that typically I the default it's not very",
    "start": "819420",
    "end": "825449"
  },
  {
    "text": "big but I can add requires Java logging to the module info so we have a look at",
    "start": "825449",
    "end": "833220"
  },
  {
    "text": "that then I can start to build up the dependencies that my module has and and",
    "start": "833220",
    "end": "838860"
  },
  {
    "text": "get those added into my module info file similarly I need to add reactive streams",
    "start": "838860",
    "end": "849439"
  },
  {
    "text": "so the class path and I need to add my dependency on reactive streams into my",
    "start": "849439",
    "end": "857249"
  },
  {
    "text": "into my module info so here I actually have two different types of dependency one is a module from inside the JDK",
    "start": "857249",
    "end": "864029"
  },
  {
    "text": "so that's part of Java but I have to declare that I want to use it because I don't get it by default and another is",
    "start": "864029",
    "end": "870120"
  },
  {
    "text": "me using an external library the reactive streams library and I have to declare both of those and the other",
    "start": "870120",
    "end": "877350"
  },
  {
    "text": "thing that I can do inside my module file is I don't just talk about the things that I use I can also talk about",
    "start": "877350",
    "end": "883529"
  },
  {
    "text": "the things that I'm going to let others use from my module otherwise there's not a lot of point in creating a module if",
    "start": "883529",
    "end": "888689"
  },
  {
    "text": "no one's going to use you so here what we see is this is code",
    "start": "888689",
    "end": "895120"
  },
  {
    "text": "from a different module so here this is inside the user module and the error",
    "start": "895120",
    "end": "901960"
  },
  {
    "text": "here is package comm countess and stop flow is not visible from inside this",
    "start": "901960",
    "end": "908529"
  },
  {
    "text": "module the the flow module needs to export it now there's no magic auto fix",
    "start": "908529",
    "end": "914890"
  },
  {
    "text": "for this and so I can say exports the package name I only have one package",
    "start": "914890",
    "end": "920980"
  },
  {
    "text": "name in that particular module so this is a very simple module which has a dependency on two other modules and",
    "start": "920980",
    "end": "928029"
  },
  {
    "text": "exports one module for other people to use there are some slightly more complicated ones for example here's my",
    "start": "928029",
    "end": "935670"
  },
  {
    "text": "module for the client and these these things I kind of figured out by kind of",
    "start": "935670",
    "end": "941500"
  },
  {
    "text": "trial and error because as you're running it it tells you you need to import your Java FX modules and then when you try and run it as well JavaFX I",
    "start": "941500",
    "end": "948520"
  },
  {
    "text": "assume uses uses reflectional users I don't know some sort of callback or",
    "start": "948520",
    "end": "953620"
  },
  {
    "text": "something you have to say that your that your packages are open to Java FX as",
    "start": "953620",
    "end": "959500"
  },
  {
    "text": "well so there are there are different things you do inside your depend inside your module configuration file you can",
    "start": "959500",
    "end": "964810"
  },
  {
    "text": "configure the the all the visibility of all of your packages now it's much more configurable than it used to be and I've",
    "start": "964810",
    "end": "971470"
  },
  {
    "text": "left that comment in there because it told me I needed to export two packages that I'm not sure I actually want to",
    "start": "971470",
    "end": "976870"
  },
  {
    "text": "export so again jigsaw is kind of making me think about the design is this really what I want to do with these things",
    "start": "976870",
    "end": "982150"
  },
  {
    "text": "really supposed to be visible or not is that what I want to do and there's another another one on my service side",
    "start": "982150",
    "end": "992230"
  },
  {
    "text": "and what I found was I did this by pure brute trial and error trying to figure",
    "start": "992230",
    "end": "998830"
  },
  {
    "text": "out which modules I have a dependency on and then when you have when you try and run it you get runtime exceptions where",
    "start": "998830",
    "end": "1004470"
  },
  {
    "text": "like you've got missing classes and things like that and because you don't get all the errors at compile time so I",
    "start": "1004470",
    "end": "1009660"
  },
  {
    "text": "highly recommend that you read the documentation understand how the jaidev's tool works so that you don't have to do this by a very difficult",
    "start": "1009660",
    "end": "1015720"
  },
  {
    "text": "trial and error way which is what I did so so yes there was a there was a",
    "start": "1015720",
    "end": "1023760"
  },
  {
    "text": "certain amount of pain in movie to an early access version of Java 9 for example Gradle wasn't working for me I",
    "start": "1023760",
    "end": "1029688"
  },
  {
    "text": "am reliably told they are working on it and I chose to reorganize the file",
    "start": "1029689",
    "end": "1035420"
  },
  {
    "text": "structure to be more in line with the jigsaw recommendations and of course reorganizing the file structure of your",
    "start": "1035420",
    "end": "1040490"
  },
  {
    "text": "project is a non-trivial thing to do and because the way I've chosen to put to my",
    "start": "1040490",
    "end": "1045829"
  },
  {
    "text": "production files in one put into the modules but my test classes are not in",
    "start": "1045829",
    "end": "1050960"
  },
  {
    "text": "the module system I currently have no command line build for this I can only run it through the IDE so this is not",
    "start": "1050960",
    "end": "1056450"
  },
  {
    "text": "production-ready the way it is right now I'm the IDE support for things like IntelliJ IDEA it is there for jigsaw you",
    "start": "1056450",
    "end": "1063800"
  },
  {
    "text": "saw that I can generate a module info I get a certain amount of Auto completion for some of the keywords but we don't",
    "start": "1063800",
    "end": "1069140"
  },
  {
    "text": "get all the magic auto fix things that we're used to inside Java what if using",
    "start": "1069140",
    "end": "1074210"
  },
  {
    "text": "Java 8 or whatever so the IDE support across all the IDE is definitely getting there for Java 9 but when you're",
    "start": "1074210",
    "end": "1080300"
  },
  {
    "text": "starting to adopt these new things there's going to be a certain amount of it's important to understand what's",
    "start": "1080300",
    "end": "1086030"
  },
  {
    "text": "happening under the covers because you might need to do some things manually and so yes so you really do need to go",
    "start": "1086030",
    "end": "1091250"
  },
  {
    "text": "away and read about stuff like jigsaw if you're going to do something like that so enough of that let's get on to the",
    "start": "1091250",
    "end": "1096650"
  },
  {
    "start": "1094000",
    "end": "1105000"
  },
  {
    "text": "interesting reactive thing because that's what I put into the abstract to get this accepted for the conference that's not true that's not very true so",
    "start": "1096650",
    "end": "1106940"
  },
  {
    "start": "1105000",
    "end": "1219000"
  },
  {
    "text": "my services are actually very quite dumb and this is intentional because I want my services to be very simple I want",
    "start": "1106940",
    "end": "1112550"
  },
  {
    "text": "them to be independent they happen to use web sockets and the WebSocket protocol you can choose to send strings",
    "start": "1112550",
    "end": "1117980"
  },
  {
    "text": "so all I'm really getting is like a string input and a string input output I could do more than that with my services",
    "start": "1117980",
    "end": "1124429"
  },
  {
    "text": "but I've just chosen I get like some series of string inputs and some series of string outputs so the what I do",
    "start": "1124429",
    "end": "1131510"
  },
  {
    "text": "obviously you plug the business logic in between those things but all I really needed for my application was a really",
    "start": "1131510",
    "end": "1136520"
  },
  {
    "text": "simple mapper so I get some string value I map it through some magic either into a username or into a mood or into",
    "start": "1136520",
    "end": "1143330"
  },
  {
    "text": "something fairly simple and end up with some sort of string output and so what I thought well this is what it looks like",
    "start": "1143330",
    "end": "1149240"
  },
  {
    "text": "so it takes a function of string to string and when you call it you give it like a lambda expression because you",
    "start": "1149240",
    "end": "1154280"
  },
  {
    "text": "know this is a Java eight demo so I was supposed to be injecting land expressions what I thought that would be",
    "start": "1154280",
    "end": "1159880"
  },
  {
    "text": "kind of more useful for the architecture of this particular application is really",
    "start": "1159880",
    "end": "1164890"
  },
  {
    "text": "what's happening is under the covers the input is a publisher so it's publishing strings to my business logic so I can",
    "start": "1164890",
    "end": "1171610"
  },
  {
    "text": "publish a stream of strings and the output subscribes to some set of outputs",
    "start": "1171610",
    "end": "1179200"
  },
  {
    "text": "from the business logic so my publisher is publishing a stream of strings my subscriber is listening to a stream of",
    "start": "1179200",
    "end": "1185980"
  },
  {
    "text": "strings that are probably a different shape to the original stream of strings and then again I have my business logic",
    "start": "1185980",
    "end": "1192130"
  },
  {
    "text": "somewhere in the middle doing something to those streams so I want to go ahead",
    "start": "1192130",
    "end": "1197830"
  },
  {
    "text": "and do this change because the publisher and subscriber interfaces are the things which should come in in Java 9 so Java 9",
    "start": "1197830",
    "end": "1204040"
  },
  {
    "text": "has the reactive streams API built in let's have a look at what that looks like",
    "start": "1204040",
    "end": "1210600"
  },
  {
    "start": "1219000",
    "end": "1305000"
  },
  {
    "text": "so my service in my service class is fairly stupid really simple so it's",
    "start": "1219610",
    "end": "1225350"
  },
  {
    "text": "simple to understand and I have the client input endpoint is the input to",
    "start": "1225350",
    "end": "1230750"
  },
  {
    "text": "the service and the broadcasting server end point end point is the output of the service so what I want to do is I'm",
    "start": "1230750",
    "end": "1237620"
  },
  {
    "text": "first going to change my output to be a subscriber and I'm going to cheat",
    "start": "1237620",
    "end": "1244580"
  },
  {
    "text": "slightly so I already had this idea of a message listener I already have an interface which was a message listener",
    "start": "1244580",
    "end": "1249860"
  },
  {
    "text": "which takes a string message and what I'm going to do is I'm going to cheat slightly by changing this to the same",
    "start": "1249860",
    "end": "1257030"
  },
  {
    "text": "signature as one of the methods on subscriber so I can much more easily migrate from my custom message listener",
    "start": "1257030",
    "end": "1264590"
  },
  {
    "text": "to the the reactive stream subscriber so",
    "start": "1264590",
    "end": "1269720"
  },
  {
    "text": "then what I'll do is I can now implement subscriber and that's going to text",
    "start": "1269720",
    "end": "1278270"
  },
  {
    "text": "string let's take a quick look at what this looks like so my sisters part of the Java 9 library",
    "start": "1278270",
    "end": "1286070"
  },
  {
    "text": "so I get a subscriber which has an unsubscribe and on next which is the",
    "start": "1286070",
    "end": "1291350"
  },
  {
    "text": "thing that gets called with every single message which gets passed in a non error and a non complete so those are the",
    "start": "1291350",
    "end": "1296780"
  },
  {
    "text": "things I need to implement in order to be a subscriber so I'll implement those",
    "start": "1296780",
    "end": "1304630"
  },
  {
    "text": "my unsubscribe is the thing that gets called when something so I'm a I am a",
    "start": "1304930",
    "end": "1311570"
  },
  {
    "start": "1305000",
    "end": "1361000"
  },
  {
    "text": "subscriber so when I subscribe to something I get given a subscription so what I want to do is I just want to do a",
    "start": "1311570",
    "end": "1318020"
  },
  {
    "text": "fairly simple thing I'm going to request from that subscription like everything it's got",
    "start": "1318020",
    "end": "1323480"
  },
  {
    "text": "so as the end point all I want to do is just listen to every single string at the string that you're going to pass me like forever for whatever that means my",
    "start": "1323480",
    "end": "1331250"
  },
  {
    "text": "on next I already have this is the sort of this is the logic of my endpoint it just says the like for every message I",
    "start": "1331250",
    "end": "1337010"
  },
  {
    "text": "get in I need to publish it to my WebSocket output that's what I do on error let's do some really cool error",
    "start": "1337010",
    "end": "1343700"
  },
  {
    "text": "handling",
    "start": "1343700",
    "end": "1346059"
  },
  {
    "text": "that's my amazing error handler and then I'm completely I'm gonna close it so I'm",
    "start": "1352680",
    "end": "1357940"
  },
  {
    "text": "just going to implement those in the simplest possible way but what I've done is I now have the subscriber part of my",
    "start": "1357940",
    "end": "1364870"
  },
  {
    "start": "1361000",
    "end": "1497000"
  },
  {
    "text": "service so I've just really simply just turned it into a reactive stream subscriber now obviously my service",
    "start": "1364870",
    "end": "1372490"
  },
  {
    "text": "isn't going to be compiling anymore so my client endpoints is let's rename this",
    "start": "1372490",
    "end": "1378370"
  },
  {
    "text": "so it's more useful this is going to be my publisher so before what I did is I added a listener to my publisher but",
    "start": "1378370",
    "end": "1385090"
  },
  {
    "text": "what I'm actually going to do is I'm going to subscribe to my publisher it's just again it just a different",
    "start": "1385090",
    "end": "1391810"
  },
  {
    "text": "terminology but it's the same sort of thing and what it used to do is it used to take a message listener and now I'm",
    "start": "1391810",
    "end": "1398020"
  },
  {
    "text": "gonna say I want you to want the SUBSCRIBE method font size on this is",
    "start": "1398020",
    "end": "1404830"
  },
  {
    "text": "not amazing and I want you to take a subscriber so let's say a subscriber",
    "start": "1404830",
    "end": "1411900"
  },
  {
    "text": "type string actually needs to be some",
    "start": "1411900",
    "end": "1417070"
  },
  {
    "text": "generics magic okay so now my service is responsible for gluing together my",
    "start": "1417070",
    "end": "1422860"
  },
  {
    "text": "subscriber and my publisher to make sure that they're actually talking to each other let's go quickly into the",
    "start": "1422860",
    "end": "1428140"
  },
  {
    "text": "publisher and turn that into a publisher so I this is the SUBSCRIBE method that I",
    "start": "1428140",
    "end": "1434410"
  },
  {
    "text": "just called and let's rename this so it's more sensible this is now a",
    "start": "1434410",
    "end": "1439600"
  },
  {
    "text": "subscriber so when I am a publisher when someone subscribes to me what do I want",
    "start": "1439600",
    "end": "1445060"
  },
  {
    "text": "to do well one of the things I need to do is my subscriber I need to call oops",
    "start": "1445060",
    "end": "1450160"
  },
  {
    "text": "on subscription unsubscribe where the subscription let's create that",
    "start": "1450160",
    "end": "1456190"
  },
  {
    "text": "subscription I'm going to create a class called subscription I'm going to create",
    "start": "1456190",
    "end": "1464230"
  },
  {
    "text": "an inner class for this",
    "start": "1464230",
    "end": "1467100"
  },
  {
    "text": "and I'm going to pass my subscriber into my subscription and I manage it there",
    "start": "1470930",
    "end": "1478620"
  },
  {
    "text": "and hopefully it will become clear what we're doing why we're doing it so let's",
    "start": "1478620",
    "end": "1483750"
  },
  {
    "text": "create a field for this so the reactive streams API has an idea of a",
    "start": "1483750",
    "end": "1490440"
  },
  {
    "text": "subscription so I'm going to implement subscription and implement the methods",
    "start": "1490440",
    "end": "1496590"
  },
  {
    "text": "from subscription and we've already seen the subscription method a little bit because what we did is we called request",
    "start": "1496590",
    "end": "1502410"
  },
  {
    "start": "1497000",
    "end": "1650000"
  },
  {
    "text": "to request all the items in that stream so now we need to implement our own subscription this is because I'm not",
    "start": "1502410",
    "end": "1508500"
  },
  {
    "text": "using any libraries this is me using the reactive streams API implementing the bare minimum required for me to sort of",
    "start": "1508500",
    "end": "1515400"
  },
  {
    "text": "be able to have a subscriber and a publisher so I'm gonna say something fairly simple I'm gonna say I'm going to",
    "start": "1515400",
    "end": "1525300"
  },
  {
    "text": "track this with a new atomic long great",
    "start": "1525300",
    "end": "1531030"
  },
  {
    "text": "field for this and then mmm in order to",
    "start": "1531030",
    "end": "1538470"
  },
  {
    "text": "cancel I just have to set that to zero and we'll we'll use this in a minute so",
    "start": "1538470",
    "end": "1546600"
  },
  {
    "text": "for now all we need to know is that our subscription has an idea of this of the subscriber and the number of things",
    "start": "1546600",
    "end": "1551670"
  },
  {
    "text": "they've asked for so let's go back to our SUBSCRIBE method now now I will need",
    "start": "1551670",
    "end": "1559679"
  },
  {
    "text": "to track all of these individual subscriptions that I've created because these subscriptions are going to allow me to send stuff to the people who are",
    "start": "1559679",
    "end": "1566429"
  },
  {
    "text": "subscribed to me so a subscription so",
    "start": "1566429",
    "end": "1572160"
  },
  {
    "text": "instead of listeners I'm going to have subscribe own oh yeah let's forget that",
    "start": "1572160",
    "end": "1577790"
  },
  {
    "text": "I'm going to change this so that instead of story message listeners which is what",
    "start": "1577790",
    "end": "1583080"
  },
  {
    "text": "I did before I'm now I now have a list of subscriptions and so I'm going to",
    "start": "1583080",
    "end": "1589020"
  },
  {
    "text": "rename this to be something more useful so basically what I'm doing I already had my message handler idea but I'm",
    "start": "1589020",
    "end": "1594990"
  },
  {
    "text": "basically formalizing instead of having a message listener I'm using the publisher and subscriber instead and",
    "start": "1594990",
    "end": "1601580"
  },
  {
    "text": "then what all I have to do is this is my method which takes a message off the",
    "start": "1601580",
    "end": "1607640"
  },
  {
    "text": "WebSockets and is going to publish it to whoever is listening whoever is whoever cares about that message and of course",
    "start": "1607640",
    "end": "1613970"
  },
  {
    "text": "who cares about it is all my subscriptions so every one of my subscriptions I'm going to tell them about this message so that's not called",
    "start": "1613970",
    "end": "1621470"
  },
  {
    "text": "message listener anymore it's called a subscription and let's just implement an on next method on there to make life a",
    "start": "1621470",
    "end": "1627680"
  },
  {
    "text": "little bit easier and then this is the bit which says look if decrement if I",
    "start": "1627680",
    "end": "1637730"
  },
  {
    "text": "still have outstanding requests that the subscriber wanted to wanted me to fulfill then I'm going to send the",
    "start": "1637730",
    "end": "1644920"
  },
  {
    "text": "subscriber then I'm going to send this message on to the subscriber so this is",
    "start": "1644920",
    "end": "1651140"
  },
  {
    "text": "just it's a really simple really mood rudimentary subscription okay so it meant that my subscriber was a little",
    "start": "1651140",
    "end": "1657530"
  },
  {
    "text": "bit more my publisher was a little bit more difficult to implement than my subscriber but at the end of the day",
    "start": "1657530",
    "end": "1667010"
  },
  {
    "text": "what I've done is I have let's compile everything and hope it works I have my",
    "start": "1667010",
    "end": "1672560"
  },
  {
    "text": "two ends I have a publisher which is listening to the WebSockets and then publishing stuff into anything that",
    "start": "1672560",
    "end": "1678290"
  },
  {
    "text": "cares and a subscriber which is subscribing to any output from the business logic and then writing that to",
    "start": "1678290",
    "end": "1684290"
  },
  {
    "text": "the WebSockets now I just need to do a quick and slightly boring fix to fix the",
    "start": "1684290",
    "end": "1690710"
  },
  {
    "text": "UI because the UI uses the same the it listens to those client endpoints so",
    "start": "1690710",
    "end": "1696680"
  },
  {
    "text": "tiny tiny cheat just to fix all this up",
    "start": "1696680",
    "end": "1702910"
  },
  {
    "text": "so instead of instead of implementing message listener all of these things have to implement subscriber and all of",
    "start": "1702910",
    "end": "1711620"
  },
  {
    "text": "these things will just basically ask for every single thing that that I could be sent then just send it to me and we'll",
    "start": "1711620",
    "end": "1722090"
  },
  {
    "text": "look at these UI ones a little bit later on but at the moment all I need to do is fix them so let's compile that I might",
    "start": "1722090",
    "end": "1731659"
  },
  {
    "text": "even go so far as to rerun everything just to make sure everything's doing exactly what it used to do before but",
    "start": "1731659",
    "end": "1739340"
  },
  {
    "text": "what we've done is we have the same infrastructure we had before more or",
    "start": "1739340",
    "end": "1744860"
  },
  {
    "text": "less but I'm using reactive streams instead so yes",
    "start": "1744860",
    "end": "1751340"
  },
  {
    "text": "so I plugged my publisher and subscribe it on to the ends and that's kind of fine and terribly interesting but I've just basically it's doing exactly the",
    "start": "1751340",
    "end": "1757880"
  },
  {
    "text": "same thing it did before but with slightly more code okay that's fun what",
    "start": "1757880",
    "end": "1762950"
  },
  {
    "text": "exactly did you do that for so the point is to be able to use these reactive",
    "start": "1762950",
    "end": "1769490"
  },
  {
    "start": "1765000",
    "end": "1906000"
  },
  {
    "text": "api's the idea about reactive streams is that these api's are usable across different libraries so you can use for",
    "start": "1769490",
    "end": "1776269"
  },
  {
    "text": "example rx Java which is what I'm going to use you can use reactor you can use echo I think you can use a bunch of",
    "start": "1776269",
    "end": "1782450"
  },
  {
    "text": "these different reactive libraries and frameworks but they all talk with the same API so that means that for something like maybe microservices type",
    "start": "1782450",
    "end": "1789440"
  },
  {
    "text": "architecture like mine or a modular system they can they can be using different implementations of reactive",
    "start": "1789440",
    "end": "1796730"
  },
  {
    "text": "libraries but be talking to each other over the same reactive API and they don't even need to be talking of talking",
    "start": "1796730",
    "end": "1802519"
  },
  {
    "text": "to other JVM things - because this is implemented in other languages so this is kind of this is where the power comes",
    "start": "1802519",
    "end": "1808070"
  },
  {
    "text": "from so this is what we did we implemented our publisher and L subscriber and so I'm going to take a",
    "start": "1808070",
    "end": "1813649"
  },
  {
    "text": "look at some individual uses of this like what can we do now that we are reactive what can we do now like what's",
    "start": "1813649",
    "end": "1820250"
  },
  {
    "text": "what's the point so I'm going to take a look at the tweet service to begin with because is at the end of the line it's a",
    "start": "1820250",
    "end": "1825440"
  },
  {
    "text": "little bit easier to manage let's shut",
    "start": "1825440",
    "end": "1831830"
  },
  {
    "text": "everything down",
    "start": "1831830",
    "end": "1834220"
  },
  {
    "text": "so what I did it perform is I had this really nice new feature in Java 8 which",
    "start": "1837950",
    "end": "1843560"
  },
  {
    "text": "is files dot lines and it gives you a stream of strings which represents every",
    "start": "1843560",
    "end": "1848570"
  },
  {
    "text": "single line in that file I'm going to show the sort of alternative using reactive streams instead of using Java 8",
    "start": "1848570",
    "end": "1854210"
  },
  {
    "text": "streams this to do by the way is intentional because I didn't really want anyone looking at this going",
    "start": "1854210",
    "end": "1860120"
  },
  {
    "text": "oh yeah that's a really good idea let's just do that sort of error handling in our micro-services no don't do that so",
    "start": "1860120",
    "end": "1866690"
  },
  {
    "text": "in so now I'm switching from using the reactive API is to using a wrap to",
    "start": "1866690",
    "end": "1871760"
  },
  {
    "text": "reactive implementation I'm using rx Java as my implementation for just",
    "start": "1871760",
    "end": "1877220"
  },
  {
    "text": "because it was the first one that occurred to me so I'm going to add our extraverts on my class path oh no we",
    "start": "1877220",
    "end": "1883100"
  },
  {
    "text": "don't have class paths in modules I'm going to add our extra to my dependencies I can create a flowable so",
    "start": "1883100",
    "end": "1893840"
  },
  {
    "text": "a flowable is is effectively a publisher but it's kind of it's a stream if you like but of reactive stream not a Java",
    "start": "1893840",
    "end": "1900590"
  },
  {
    "text": "eight stream which isn't at all confusing in any way shape or form so I do a flowable I'm going to do it",
    "start": "1900590",
    "end": "1905990"
  },
  {
    "text": "from iterable I can use a similar thing to the files dot lines values files dot read all lines which would give me an",
    "start": "1905990",
    "end": "1912470"
  },
  {
    "start": "1906000",
    "end": "2194000"
  },
  {
    "text": "iterable than the file path I'm and then I'm going to do pretty much the same",
    "start": "1912470",
    "end": "1918770"
  },
  {
    "text": "thing that I had in my java 8 streams but using reactive streams so we need to do a filter which is going to take an S",
    "start": "1918770",
    "end": "1926540"
  },
  {
    "text": "and I have to say equals ok and filtering out everything which is the",
    "start": "1926540",
    "end": "1932870"
  },
  {
    "text": "string ok Java 8 streams have has this feature peek which lets you do something",
    "start": "1932870",
    "end": "1938870"
  },
  {
    "text": "at that point in the operation enlistment you like to do something with the item reactive streams don't have",
    "start": "1938870",
    "end": "1944750"
  },
  {
    "text": "peek but I can do do on next instead which is the same sort of thing and what I was doing is at this point I was",
    "start": "1944750",
    "end": "1951830"
  },
  {
    "text": "inserting a delay of 100 milliseconds mostly for demo purposes because I needed to be able to show the tweets ticking at some sort of sensible tick so",
    "start": "1951830",
    "end": "1960050"
  },
  {
    "text": "I used peak to sort of inject a hundred millisecond delay into each one of those",
    "start": "1960050",
    "end": "1965390"
  },
  {
    "text": "tweets as it gets published if you like and then I can do for each",
    "start": "1965390",
    "end": "1970880"
  },
  {
    "text": "I can do the same thing so I'm due to its endpoint on next and so here we have",
    "start": "1970880",
    "end": "1978830"
  },
  {
    "text": "basically this is my reactive streams implementation of this it's it looks",
    "start": "1978830",
    "end": "1985100"
  },
  {
    "text": "exactly the same more or less be warned it's not exactly the same it doesn't do the same thing but we'll get onto that a",
    "start": "1985100",
    "end": "1992510"
  },
  {
    "text": "little bit later what we can actually do is not just do a like-for-like translation we can actually use some of",
    "start": "1992510",
    "end": "1997700"
  },
  {
    "text": "the power of reactive streams instead so let's take out my java 8 implementation",
    "start": "1997700",
    "end": "2003240"
  },
  {
    "text": "the first thing that we can do is instead of doing for each so for every element that I see send it to my",
    "start": "2003240",
    "end": "2011250"
  },
  {
    "text": "subscriber I actually just have to say subscribe my subscriber so my tweets",
    "start": "2011250",
    "end": "2018670"
  },
  {
    "text": "endpoint is a subscriber the only complication here and I've mentioned it a couple of times is that in Java 9 the",
    "start": "2018670",
    "end": "2024370"
  },
  {
    "text": "reactor streams API is under flow dot subscriber float publisher flow dot subscription",
    "start": "2024370",
    "end": "2030070"
  },
  {
    "text": "and the reactive streams API is is not",
    "start": "2030070",
    "end": "2036130"
  },
  {
    "text": "is a different set of classes and are extravagant Lee works with the reactive streams API because rx Java is not",
    "start": "2036130",
    "end": "2042490"
  },
  {
    "text": "currently compiled and built against Java 9 but it will be so I need to create an ad adapter which is going to",
    "start": "2042490",
    "end": "2048040"
  },
  {
    "text": "turn my Java 9 subscriber into an old-fashioned reactive streams thing",
    "start": "2048040",
    "end": "2053860"
  },
  {
    "text": "which is not complicated at all so I would just beg you to ignore it completely so all I'm gonna do is just",
    "start": "2053860",
    "end": "2064120"
  },
  {
    "text": "wrap it in an adapter ok so instead of doing for each I can just subscribe so I have a subscriber so just get it to",
    "start": "2064120",
    "end": "2070450"
  },
  {
    "text": "subscribe to the output of this stream that seems fair enough also this Duan next thing always kind of",
    "start": "2070450",
    "end": "2076628"
  },
  {
    "text": "bothered me it feels like a little bit of a hack but in terms of my functionality that I want I actually",
    "start": "2076629",
    "end": "2081669"
  },
  {
    "text": "really do want it to tick every hundred milliseconds that's like a business requirement of mine if you like",
    "start": "2081669",
    "end": "2086800"
  },
  {
    "text": "now with reactive streams you can actually work on two streams together Java eight streams you have like a",
    "start": "2086800",
    "end": "2093280"
  },
  {
    "text": "stream and that's it you use it once and then you throw it away you never use it again and reactive streams you can you",
    "start": "2093280",
    "end": "2098950"
  },
  {
    "text": "can actually merge two streams together so let's create a stream for a stream of ticks so I'll say a flyball",
    "start": "2098950",
    "end": "2107510"
  },
  {
    "text": "into warm 100 milliseconds let's call",
    "start": "2107510",
    "end": "2114109"
  },
  {
    "text": "this tick so this is going to let's fix this I need to add our Xterra to my",
    "start": "2114109",
    "end": "2120380"
  },
  {
    "text": "module info because you know Chickasaw likes to keep me up to date so this thing this emits it happens to",
    "start": "2120380",
    "end": "2127310"
  },
  {
    "text": "be along it doesn't really matter it emits a long every 100 milliseconds 300 milliseconds tick tick tick tick tick",
    "start": "2127310",
    "end": "2133280"
  },
  {
    "text": "what I'm going to do is I'm going to zip that together with my with my files so I",
    "start": "2133280",
    "end": "2140270"
  },
  {
    "text": "can say is it with my tick and so that will kind of force my this strings in my",
    "start": "2140270",
    "end": "2147530"
  },
  {
    "text": "file to be emitted every 100 milliseconds and then I just have to tell it like given that I've got two",
    "start": "2147530",
    "end": "2154070"
  },
  {
    "text": "streams I've got one which takes strings which is the strings from my file and one which is lungs which is my tick what",
    "start": "2154070",
    "end": "2159109"
  },
  {
    "text": "do you want me to do with those two things well I don't care about the long I only care about the I like the string value so just admit the string value so",
    "start": "2159109",
    "end": "2165650"
  },
  {
    "text": "I think this is quite a nice elegant way to sort of say okay and if I want this stream to be to be emitted every 100",
    "start": "2165650",
    "end": "2172550"
  },
  {
    "text": "milliseconds I just zip it with a stream which emits something every 100 milliseconds so this is kind of some of the power that you",
    "start": "2172550",
    "end": "2178369"
  },
  {
    "text": "can get from reactive streams that you can't do in for example Java 8 streams now let's see if that still runs",
    "start": "2178369",
    "end": "2185800"
  },
  {
    "text": "okay so now we're you can't really see that very well but we are basically admitting a tweet from the file every",
    "start": "2193710",
    "end": "2201609"
  },
  {
    "start": "2194000",
    "end": "2498000"
  },
  {
    "text": "hundred milliseconds so that's still working excellent that's a good start",
    "start": "2201609",
    "end": "2206620"
  },
  {
    "text": "[Music] what time did I start how long have I got you'll come back to me that wait so what",
    "start": "2206620",
    "end": "2215500"
  },
  {
    "text": "I want to do is apply this reactive streams thing with with all of my services because because I can basically",
    "start": "2215500",
    "end": "2222090"
  },
  {
    "text": "let's look at the user service I've got",
    "start": "2222090",
    "end": "2227230"
  },
  {
    "text": "13 minutes hmm hmm okay write some of this stuff I will",
    "start": "2227230",
    "end": "2236140"
  },
  {
    "text": "just do because it's boring and not necessarily cannot necessarily explain now remember I had a service class which",
    "start": "2236140",
    "end": "2241540"
  },
  {
    "text": "glues together the two ends the publisher and subscriber so instead of taking into that class a function which",
    "start": "2241540",
    "end": "2247060"
  },
  {
    "text": "takes a string and returns a string a mapping function what I'm going to do is I'm going to give to you the caller the",
    "start": "2247060",
    "end": "2252220"
  },
  {
    "text": "user service of the mood service a way to get hold of the publisher and the subscriber and you can do whatever you",
    "start": "2252220",
    "end": "2258310"
  },
  {
    "text": "want to do with those two things so I'm gonna have a by consumer which takes a publisher publisher of strings and a",
    "start": "2258310",
    "end": "2269100"
  },
  {
    "text": "subscriber of strings and I'm not going",
    "start": "2269100",
    "end": "2276400"
  },
  {
    "text": "to use this message handler anymore because we are going to get rid of the need for message Handler and just",
    "start": "2276400",
    "end": "2283030"
  },
  {
    "text": "refactor that it doesn't matter it's kind of break everything because we will fix that and I'm going to call this this",
    "start": "2283030",
    "end": "2289900"
  },
  {
    "text": "is going to be my business logic for my service so create that put up field for",
    "start": "2289900",
    "end": "2295750"
  },
  {
    "text": "that and then when I run my service instead of doing this instead of gluing the the client to that instead of gluing",
    "start": "2295750",
    "end": "2302380"
  },
  {
    "text": "the subscriber to the publisher I'm going to basically tell the business logic to do its thing so I'm going to",
    "start": "2302380",
    "end": "2307900"
  },
  {
    "text": "give it the client endpoint publisher and subscriber so that's all well and",
    "start": "2307900",
    "end": "2315280"
  },
  {
    "text": "good you say what's the point I go to my user service and what I'm going to do is now instead of giving it",
    "start": "2315280",
    "end": "2321730"
  },
  {
    "text": "a function I can now take I can now have a publisher and a",
    "start": "2321730",
    "end": "2326989"
  },
  {
    "text": "subscriber and I can do whatever I want to do to it so obviously I'm going to listen to the publisher and do something with the stream of events which comes",
    "start": "2326989",
    "end": "2332809"
  },
  {
    "text": "out of that and eventually at some point plug that into the end point subscriber",
    "start": "2332809",
    "end": "2338109"
  },
  {
    "text": "so again I'm using an RX Java I'm going",
    "start": "2338109",
    "end": "2344029"
  },
  {
    "text": "to create a flowable from a publisher",
    "start": "2344029",
    "end": "2348459"
  },
  {
    "text": "I'm going to run out of space publisher",
    "start": "2349239",
    "end": "2354549"
  },
  {
    "text": "okay and then I just need to do the same",
    "start": "2355690",
    "end": "2364609"
  },
  {
    "text": "thing I was doing before so I used the original function which was use a service get Twitter handle for a tweet",
    "start": "2364609",
    "end": "2370930"
  },
  {
    "text": "and then glue the subscriber onto the end of that I mean it's not super",
    "start": "2370930",
    "end": "2376489"
  },
  {
    "text": "exciting but the what ik when it gives me which I didn't have before is I can",
    "start": "2376489",
    "end": "2382670"
  },
  {
    "text": "now use the full power of reactive streams to do whatever I want with with the Twitter information that comes in so",
    "start": "2382670",
    "end": "2387890"
  },
  {
    "text": "before this this servers had to be really simple because all it did is it took the tweet and it just took the",
    "start": "2387890",
    "end": "2393140"
  },
  {
    "text": "username from it because I couldn't do anything much more complicated than that but now what I could do is I could have a look at that tweet information which",
    "start": "2393140",
    "end": "2399109"
  },
  {
    "text": "can be kind of small and and not very populated or big and very populated and",
    "start": "2399109",
    "end": "2404630"
  },
  {
    "text": "I can pull out various bits and pieces and create a fully-formed user if I want to rather than just omitting just a user",
    "start": "2404630",
    "end": "2411170"
  },
  {
    "text": "handle and so that this gives me a lot more capability inside my user service and I'll show you example inside the",
    "start": "2411170",
    "end": "2416869"
  },
  {
    "text": "mood service which is a bit more complicated so here in my mood service again we were going to have a publisher",
    "start": "2416869",
    "end": "2424640"
  },
  {
    "text": "and subscriber the create flowable from our publisher",
    "start": "2424640",
    "end": "2429279"
  },
  {
    "text": "mm-hm and then I can start by just doing the same thing I did before so I can",
    "start": "2442049",
    "end": "2448170"
  },
  {
    "text": "just do the mapping function like I did before the twos subscriber letter",
    "start": "2448170",
    "end": "2453700"
  },
  {
    "text": "subscriber okay and that's that works the same way it worked before just have",
    "start": "2453700",
    "end": "2460299"
  },
  {
    "text": "a horrible feeling yes my user service doesn't compile oh yes because I didn't",
    "start": "2460299",
    "end": "2467229"
  },
  {
    "text": "add rxjava to my module info file okay",
    "start": "2467229",
    "end": "2480160"
  },
  {
    "text": "now what I can do my mood service was reasonably complicated before it was an example of a Java eight stream which",
    "start": "2480160",
    "end": "2487650"
  },
  {
    "text": "uses a whole chain of operations to take a a tweet and turn it into some series",
    "start": "2487650",
    "end": "2496239"
  },
  {
    "text": "of moods so let me show you what I mean on the mood service so I take a tweet and if there's like a word in there",
    "start": "2496239",
    "end": "2502359"
  },
  {
    "start": "2498000",
    "end": "2659000"
  },
  {
    "text": "which is reasonably happy then I omit the string happy or i omit the string sad or if there's like a word which",
    "start": "2502359",
    "end": "2508690"
  },
  {
    "text": "corresponds to more than one mood then I can omit a CSV of mood so sad I'm happy and then if there's no mood associated",
    "start": "2508690",
    "end": "2515469"
  },
  {
    "text": "with the tweet I end up just emitting an empty string so there's a one to one relationship between the the tweet that comes in and some string value that",
    "start": "2515469",
    "end": "2522549"
  },
  {
    "text": "comes out the end which represents the mood now with reactive streams I can",
    "start": "2522549",
    "end": "2527799"
  },
  {
    "text": "actually change that so I can actually instead of thinking in terms of one to one thing between I get some input and I",
    "start": "2527799",
    "end": "2533019"
  },
  {
    "text": "can return an output I turn this stream of tweets into a stream of moods and",
    "start": "2533019",
    "end": "2538509"
  },
  {
    "text": "there's no correlation from the UI point of view that doesn't matter the UI or only cared about are people generally",
    "start": "2538509",
    "end": "2544749"
  },
  {
    "text": "happy are they generally sad that are generally not care so listening to a",
    "start": "2544749",
    "end": "2550779"
  },
  {
    "text": "stream of individual moods as they get admitted it doesn't matter to the UI whether they happen to correspond to an",
    "start": "2550779",
    "end": "2556599"
  },
  {
    "text": "individual tweet one or multiple tweets or there's like multiple moods from that so with reactive streams I can actually",
    "start": "2556599",
    "end": "2563650"
  },
  {
    "text": "think slightly differently about this problem let's just put this into another",
    "start": "2563650",
    "end": "2569710"
  },
  {
    "text": "method",
    "start": "2569710",
    "end": "2572190"
  },
  {
    "text": "and what I'm going to do is I'm going to lift almost all of the Java eight streams from here and chop them into my",
    "start": "2580150",
    "end": "2588559"
  },
  {
    "text": "reactive stream there's one slight difference my flat map needs to take needs to be a flowable not a stream from",
    "start": "2588559",
    "end": "2596509"
  },
  {
    "text": "array I have to do a magic incantation which thank goodness I don't have time",
    "start": "2596509",
    "end": "2602299"
  },
  {
    "text": "to talk about right now in order to make the flat map work I guess the moral of",
    "start": "2602299",
    "end": "2607309"
  },
  {
    "text": "the story is back pressure really does matter especially with reactive streams so go away and research about that if your",
    "start": "2607309",
    "end": "2613279"
  },
  {
    "text": "service falls over in a heap like minded and and then all I have to do is let's",
    "start": "2613279",
    "end": "2619249"
  },
  {
    "text": "get rid of the distinct so I'm doing the same operation but instead of what I was doing is I was collecting it into a CSV",
    "start": "2619249",
    "end": "2624799"
  },
  {
    "text": "into a single CSV for each tweet and instead of that I'm actually just going to omit each mood as I find it so I end",
    "start": "2624799",
    "end": "2631369"
  },
  {
    "text": "up with something like this where I just get individual moods emitted so this is something that reactor streams gives me I probably could have done this with the",
    "start": "2631369",
    "end": "2637789"
  },
  {
    "text": "Java eight staff but it didn't make me I wasn't thinking in those terms right so",
    "start": "2637789",
    "end": "2644599"
  },
  {
    "text": "I have five minutes left we're not going to go into the UI side",
    "start": "2644599",
    "end": "2649789"
  },
  {
    "text": "of stuff because it really doesn't it there's not that much interesting there I just had to change the mood service so that it understands that it's not CSV",
    "start": "2649789",
    "end": "2656420"
  },
  {
    "text": "anymore that it's an individual set of events it's not super exciting so Java eight versus reactive and they look the",
    "start": "2656420",
    "end": "2662359"
  },
  {
    "start": "2659000",
    "end": "2711000"
  },
  {
    "text": "same Java eight streams and react to streams and look the same but they're not the same they don't work the same way so reactive streams do are like",
    "start": "2662359",
    "end": "2669200"
  },
  {
    "text": "infinite streams of events that come in Java eight streams can be infinite streams as well but the idea is that",
    "start": "2669200",
    "end": "2675469"
  },
  {
    "text": "with Java eight streams are done with reactive streams I can have multiple subscribers to my individual stream for",
    "start": "2675469",
    "end": "2681859"
  },
  {
    "text": "example or I can zip multiple streams together I just basically work with them in a completely different way whereas Java",
    "start": "2681859",
    "end": "2687920"
  },
  {
    "text": "eight streams the way they are at the moment is more like nice syntax for querying collections it's not quite the",
    "start": "2687920",
    "end": "2694759"
  },
  {
    "text": "same thing so reactive stream is work with multiple streams you can have multiple consumers you can reuse them",
    "start": "2694759",
    "end": "2700880"
  },
  {
    "text": "back pressures extremely important you need to understand the back pressure on the system and it does have a very different concurrency",
    "start": "2700880",
    "end": "2706910"
  },
  {
    "text": "model which yes which is worth reading about right now the Java 9 features in",
    "start": "2706910",
    "end": "2713840"
  },
  {
    "start": "2711000",
    "end": "2867000"
  },
  {
    "text": "four and a half minutes fine convenience factory methods for collections this is a really it could be",
    "start": "2713840",
    "end": "2720080"
  },
  {
    "text": "arguably a really silly feature in Java 9 but it's a really nice feature in Java 9 so if I go to and what I can do now is",
    "start": "2720080",
    "end": "2728360"
  },
  {
    "text": "of having instead of having a raise I can say list of and give it some set of",
    "start": "2728360",
    "end": "2734630"
  },
  {
    "text": "values okay that's fine and not super exciting because before we could say we",
    "start": "2734630",
    "end": "2741470"
  },
  {
    "text": "could say ArrayList raised or as list and do the same thing but what is more interesting is that you can do this not",
    "start": "2741470",
    "end": "2747500"
  },
  {
    "text": "just with lists but you can also do it with sets for example so you can create yourself a nice unmodifiable set with",
    "start": "2747500",
    "end": "2754760"
  },
  {
    "text": "convenience factory methods this is kind of this is really useful particularly with things like testing where it is",
    "start": "2754760",
    "end": "2759980"
  },
  {
    "text": "really useful is I don't want as a setter well it's really useful in my",
    "start": "2759980",
    "end": "2766820"
  },
  {
    "text": "opinion is in its for maps so I needed",
    "start": "2766820",
    "end": "2773090"
  },
  {
    "text": "to initialize a map in this particular case and this is the one feature I miss most about groovy the ability to write",
    "start": "2773090",
    "end": "2778910"
  },
  {
    "text": "to nice maps now it's a little bit easier in Java 9 you can say map of entries you can create each one of these",
    "start": "2778910",
    "end": "2788090"
  },
  {
    "text": "things as an entry can't select",
    "start": "2788090",
    "end": "2793210"
  },
  {
    "text": "to find in a place on that",
    "start": "2800760",
    "end": "2804900"
  },
  {
    "text": "not that one honestly right so instead",
    "start": "2823000",
    "end": "2828290"
  },
  {
    "text": "of having a static block you just have some nice helper methods for doing a map of entries it's it's not as pretty as",
    "start": "2828290",
    "end": "2835040"
  },
  {
    "text": "the groovy way of doing stuff but it is a lot easier than what we were doing before you can also if you've got less than ten fewer than ten you can also say",
    "start": "2835040",
    "end": "2842690"
  },
  {
    "text": "map dot of and you can say something like and so on so you can just give if",
    "start": "2842690",
    "end": "2858200"
  },
  {
    "text": "you've got a small number you just give key value pairs in there in the map table so it's it's a little bit easier",
    "start": "2858200",
    "end": "2864320"
  },
  {
    "text": "for us to work with it's it's quite nice private methods aren't interfaces now",
    "start": "2864320",
    "end": "2869690"
  },
  {
    "start": "2867000",
    "end": "2923000"
  },
  {
    "text": "this might seem really silly because like why would you want a private method on an interface when an interface is",
    "start": "2869690",
    "end": "2874820"
  },
  {
    "text": "supposed to give you the interface to implement now of course interfaces in Java eight ended up with default methods",
    "start": "2874820",
    "end": "2880220"
  },
  {
    "text": "and static methods so you can start to have behavior inside your interfaces so then you end up with interfaces like",
    "start": "2880220",
    "end": "2886640"
  },
  {
    "text": "this sweet possible and which is a",
    "start": "2886640",
    "end": "2891710"
  },
  {
    "text": "genuine interface that I had from the from that demo where you have you have",
    "start": "2891710",
    "end": "2897140"
  },
  {
    "text": "copy/paste coding and there's no way to put that into something which is reusable unless you put it somewhere else and now you can do that in Java",
    "start": "2897140",
    "end": "2905150"
  },
  {
    "text": "eight in Java nine sorry we factor this into you get value for field and so now",
    "start": "2905150",
    "end": "2912410"
  },
  {
    "text": "I can reuse that obviously previously that would have to be public but now I can say I want it to be private so I can",
    "start": "2912410",
    "end": "2918620"
  },
  {
    "text": "reuse that functionality between individual methods or on my interfaces so that's quite nice what else new",
    "start": "2918620",
    "end": "2925370"
  },
  {
    "start": "2923000",
    "end": "2987000"
  },
  {
    "text": "methods on the streams API so the streams API especially when you're working with so this is the Java eight",
    "start": "2925370",
    "end": "2930560"
  },
  {
    "text": "streams API with the Java eight streams API but especially when you're working with infinite streams it was quite difficult to tell it stopped now you're",
    "start": "2930560",
    "end": "2936860"
  },
  {
    "text": "done please stop no more and that's a little bit easier now with Java nine so I can say what I had before is I have",
    "start": "2936860",
    "end": "2948650"
  },
  {
    "text": "here a feature which on my leaderboard I have to go down the list of the the Twitter",
    "start": "2948650",
    "end": "2954480"
  },
  {
    "text": "users and then find the place to insert them so what I did is I used filter to find in that place which was just kind",
    "start": "2954480",
    "end": "2960930"
  },
  {
    "text": "of relied a little bit on the fact that it was ordered and it's fine because I was only 15 entries but it's not great",
    "start": "2960930",
    "end": "2966480"
  },
  {
    "text": "so actually what I want to do instead is I can now use take while so while some condition is true then do this and then",
    "start": "2966480",
    "end": "2973410"
  },
  {
    "text": "after that finish or I can do the opposite I can do drop while so ignore all of these up until some condition is",
    "start": "2973410",
    "end": "2980130"
  },
  {
    "text": "true or I can use a combination of the two to get some things in the middle so that's great now I've been told to stop",
    "start": "2980130",
    "end": "2986520"
  },
  {
    "text": "like a minute ago the pain right so everyone's a little bit worried about Java 9 because they're worried about",
    "start": "2986520",
    "end": "2992400"
  },
  {
    "start": "2987000",
    "end": "3028000"
  },
  {
    "text": "things like modularity and so forth might break their code but you can try it out now to see if things will break",
    "start": "2992400",
    "end": "2998190"
  },
  {
    "text": "and and you might be surprised you might find there's not as much pain as you thought there are things going away in Java 9",
    "start": "2998190",
    "end": "3004760"
  },
  {
    "text": "lots of things are being removed deprecated things are being removed in Java this has never happened before it's",
    "start": "3004760",
    "end": "3011420"
  },
  {
    "text": "very exciting you can delete code and so lots of things are going away and there's also some changes to things like",
    "start": "3011420",
    "end": "3018050"
  },
  {
    "text": "logging for example and to the garbage collector so you might end up with some unexpected behavior if you're relying on",
    "start": "3018050",
    "end": "3024530"
  },
  {
    "text": "certain things that practice shouldn't have been relying on like errors in logs for example and the Java 9 is still",
    "start": "3024530",
    "end": "3030830"
  },
  {
    "start": "3028000",
    "end": "3064000"
  },
  {
    "text": "evolving it's not out yet so do download the early access thing but be aware that",
    "start": "3030830",
    "end": "3036020"
  },
  {
    "text": "things like Java 9 is evolving the tools we use are evolving and these things are still in flux at the moment I'm don't",
    "start": "3036020",
    "end": "3042980"
  },
  {
    "text": "necessarily rush to apply jig so you might not need to jigsaw eyes your whole",
    "start": "3042980",
    "end": "3048080"
  },
  {
    "text": "project but you can still use Java line without being modular that's fine and we actually streams are not the same as",
    "start": "3048080",
    "end": "3053840"
  },
  {
    "text": "Java 8 streams if you care about this then definitely read up about that and experiment and see what the performance",
    "start": "3053840",
    "end": "3059840"
  },
  {
    "text": "is like because they do different things there are they are for different use cases and the gain in terms of Java 9 it",
    "start": "3059840",
    "end": "3067640"
  },
  {
    "start": "3064000",
    "end": "3129000"
  },
  {
    "text": "does encourage good design I did find that modularity had me thinking about single responsibility about encapsulation and about these good",
    "start": "3067640",
    "end": "3074660"
  },
  {
    "text": "design practices and it also encourages new ways of working so the reactive streams API lets you think in terms of",
    "start": "3074660",
    "end": "3080480"
  },
  {
    "text": "like events and streams of streams of messages or streams of events and also the repple",
    "start": "3080480",
    "end": "3087570"
  },
  {
    "text": "which we didn't get a chance to cover the repple is a new way of working with Java as well and there are lots of",
    "start": "3087570",
    "end": "3093240"
  },
  {
    "text": "little things in there like private methods on interfaces collection factory methods new methods on the Java eight",
    "start": "3093240",
    "end": "3098880"
  },
  {
    "text": "streams which has just make code that a little bit nicer to work with I think it's gonna be a little bit like when",
    "start": "3098880",
    "end": "3104250"
  },
  {
    "text": "Java 7 got project coin and some of those syntax changes were just a little bit nicer for us to write code with and",
    "start": "3104250",
    "end": "3110040"
  },
  {
    "text": "I have less than zero time for questions and but come and grab me anytime throughout the day all of the code all",
    "start": "3110040",
    "end": "3116730"
  },
  {
    "text": "of the slides all of the all of my reference material is available at this link so please go and take a look and",
    "start": "3116730",
    "end": "3124080"
  },
  {
    "text": "see what's there and thank you very much [Applause]",
    "start": "3124080",
    "end": "3131059"
  }
]