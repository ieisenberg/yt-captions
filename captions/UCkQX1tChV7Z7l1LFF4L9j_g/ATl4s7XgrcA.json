[
  {
    "start": "0",
    "end": "81000"
  },
  {
    "text": "[Music]",
    "start": "1990",
    "end": "14320"
  },
  {
    "text": "it was good for me to write this talk um the the Scala macros project began when",
    "start": "14320",
    "end": "19840"
  },
  {
    "text": "I was still at epfl as a postto now a Scala Tech Le here at types saafe um and I guess I've been kind of",
    "start": "19840",
    "end": "26960"
  },
  {
    "text": "living in denial about macros um from a compiler writer perspective they're",
    "start": "26960",
    "end": "32439"
  },
  {
    "text": "really scary because you get to really poke around into the compiler never really thought about that in the last 10",
    "start": "32439",
    "end": "38360"
  },
  {
    "text": "years that might people might end up doing that um for those of you written a macro before um care to raise your hand",
    "start": "38360",
    "end": "45399"
  },
  {
    "text": "maybe you could start like a club later all right not too many people so",
    "start": "45399",
    "end": "50559"
  },
  {
    "text": "okay great it won't be too much repetition going on then anyway um oh",
    "start": "50559",
    "end": "55600"
  },
  {
    "text": "and there goes the microphone is it still on no okay that's weird okay well",
    "start": "55600",
    "end": "61960"
  },
  {
    "text": "so without further Ado scyla macros um so as I implied",
    "start": "61960",
    "end": "67880"
  },
  {
    "text": "macros are still experimental they're experimental for a good reason um I think you can do really cool",
    "start": "67880",
    "end": "72920"
  },
  {
    "text": "things with them and I definitely saw a lot of those examples while preparing this talk and reading bug reports during",
    "start": "72920",
    "end": "78240"
  },
  {
    "text": "the year um so yeah I I just really want to recommend to avoid",
    "start": "78240",
    "end": "86960"
  },
  {
    "start": "81000",
    "end": "95000"
  },
  {
    "text": "them does anyone have any questions about that which part of experimental wasn't clear",
    "start": "86960",
    "end": "94840"
  },
  {
    "text": "no okay well anyway I think there's a lot of really cool things to be said about macros but let's start with the beginning it's just a method it's a",
    "start": "94840",
    "end": "102720"
  },
  {
    "start": "95000",
    "end": "104000"
  },
  {
    "text": "method run by the typ cheer right so you're writing something that's running into compilers",
    "start": "102720",
    "end": "109840"
  },
  {
    "start": "104000",
    "end": "123000"
  },
  {
    "text": "domain um I first want to give credit where credit is due Eugene has a done an amazing job at building a macro",
    "start": "109840",
    "end": "116439"
  },
  {
    "text": "Community writing documentation turning something that wasn't meant to be uh programmed uh into",
    "start": "116439",
    "end": "123320"
  },
  {
    "start": "123000",
    "end": "137000"
  },
  {
    "text": "something that is now being programmed by a lot of people actually if you look around for Mac out there and and Dennis",
    "start": "123320",
    "end": "129200"
  },
  {
    "text": "who who made actually pattern matching and creating uh Scala ests uh something",
    "start": "129200",
    "end": "134400"
  },
  {
    "text": "that is doesn't make you want to pull your hair out so the source is there will be a lot",
    "start": "134400",
    "end": "139599"
  },
  {
    "start": "137000",
    "end": "148000"
  },
  {
    "text": "of links in this talk um they're all so this talk is available on GitHub um come",
    "start": "139599",
    "end": "144920"
  },
  {
    "text": "see me later if you can't read the URLs um I won't be clicking those links",
    "start": "144920",
    "end": "150120"
  },
  {
    "start": "148000",
    "end": "275000"
  },
  {
    "text": "during the talk except if you ask me so that being said feel free to interrupt I'll um be happy to take any questions",
    "start": "150120",
    "end": "156519"
  },
  {
    "text": "or heckling or whatever uh during the talk so macros I said are a method",
    "start": "156519",
    "end": "163319"
  },
  {
    "text": "they're really two um there's a macro definition which is what you see as the",
    "start": "163319",
    "end": "169120"
  },
  {
    "text": "user using the macro calling the macro it just looks like a normal method except that there's something funny",
    "start": "169120",
    "end": "174800"
  },
  {
    "text": "about its uh body it has this red keyword uh depending on your editor",
    "start": "174800",
    "end": "180640"
  },
  {
    "text": "um that says it's a macro and it says what the implementation is for this macro when a call is seen to this Fu",
    "start": "180640",
    "end": "186680"
  },
  {
    "text": "thingy um what actually happens is the compiler runs the food meta thingy passes in the context that lets the",
    "start": "186680",
    "end": "193879"
  },
  {
    "text": "macro call into the call back into the compiler uh both for analyzing what's around the macro and for emitting code",
    "start": "193879",
    "end": "201599"
  },
  {
    "text": "and the macro implementation will then emit code so um the first part here this is",
    "start": "201599",
    "end": "210120"
  },
  {
    "text": "this is you'll see this everywhere in your Macros you'll need you'll need that package I'll I'll talk some more about",
    "start": "210120",
    "end": "215799"
  },
  {
    "text": "what the blackbox context is for now just think about it as your hook into the compiler and this is the result of your",
    "start": "215799",
    "end": "222239"
  },
  {
    "text": "macro which is going to be a tree representation of a Scola program um this the universe here is um",
    "start": "222239",
    "end": "230239"
  },
  {
    "text": "the compiler itself and you're going to import all of it and then we're using a quasi quote to generate the Scala",
    "start": "230239",
    "end": "237599"
  },
  {
    "text": "program that consists of unit the empty block so um if I just run this and my",
    "start": "237599",
    "end": "244879"
  },
  {
    "text": "computer isn't having some kind of weird problem the rebel will start up and",
    "start": "244879",
    "end": "250280"
  },
  {
    "text": "it'll say yep I defined this fum meta thingy for you and oh yeah so as I told you macros",
    "start": "250280",
    "end": "257919"
  },
  {
    "text": "are experimental okay they're experimental but we can fix",
    "start": "257919",
    "end": "265680"
  },
  {
    "text": "that I just left this in to prove that it's actually a rebel",
    "start": "266320",
    "end": "271360"
  },
  {
    "text": "so there you go so now I've defined a Fu macro all this meta talk um I don't like",
    "start": "271360",
    "end": "280080"
  },
  {
    "start": "275000",
    "end": "293000"
  },
  {
    "text": "all this you know stuff about I mean I I I spent my whole academic career doing type Theory and all that but you don't",
    "start": "280080",
    "end": "286280"
  },
  {
    "text": "really need any of that to understand what's going on here we're just writing a program that's analyzing or generating another program that's",
    "start": "286280",
    "end": "293280"
  },
  {
    "start": "293000",
    "end": "403000"
  },
  {
    "text": "it okay so let's look a little closer at this meta program I already told you a lot about it so far so um it doesn't",
    "start": "293280",
    "end": "300080"
  },
  {
    "text": "matter what this argument is called of course you can call it context um you do have to return trees that are dependent",
    "start": "300080",
    "end": "306320"
  },
  {
    "text": "on this context and as I said the macro implementation will will give you an",
    "start": "306320",
    "end": "312479"
  },
  {
    "text": "will give you a representation of the program that you want your macro to expand to everybody with me so far this",
    "start": "312479",
    "end": "318639"
  },
  {
    "text": "is kind of the boring part I guess right so this is a this is a dependent type um context is the",
    "start": "318639",
    "end": "326319"
  },
  {
    "text": "argument here so it's a value and in actually all types depend on some value it might just be a",
    "start": "326319",
    "end": "333680"
  },
  {
    "text": "package or wow I really didn't sorry about that um so in this case it's it's",
    "start": "333680",
    "end": "340639"
  },
  {
    "text": "the first method argument does that make sense I think it'll become a little",
    "start": "340639",
    "end": "346880"
  },
  {
    "text": "clear during the talk so what we're really doing is making sure that you're not mixing up um it's not essential",
    "start": "346880",
    "end": "352840"
  },
  {
    "text": "actually for it to understand the talk um but it's part of how the compiler is designed it's it's the outer pointer to the cake essentially",
    "start": "352840",
    "end": "360560"
  },
  {
    "text": "okay any other questions or remarks no just yell if I don't see there's",
    "start": "360560",
    "end": "367080"
  },
  {
    "text": "these huge pillars in front of me so um so as I said already when we import",
    "start": "367080",
    "end": "373840"
  },
  {
    "text": "the universe that's called Global in the compiler implementation which is what I'm a little bit more familiar with in",
    "start": "373840",
    "end": "378880"
  },
  {
    "text": "the macro side of things um and we're just importing all the types that are defined in there so tree is an example",
    "start": "378880",
    "end": "385199"
  },
  {
    "text": "or a type or a symbol and this is a quasi quote this is your best friend when you're mider this let who",
    "start": "385199",
    "end": "391199"
  },
  {
    "text": "constructs coll trees um and since well I'll talk a little bit more about them later I don't want to tell you",
    "start": "391199",
    "end": "397319"
  },
  {
    "text": "everything at once because then you'll just go back and drink more beer um okay so now that we've defined",
    "start": "397319",
    "end": "404800"
  },
  {
    "start": "403000",
    "end": "1023000"
  },
  {
    "text": "this macro obviously we want to invoke it and see what happens so I have here our little friend",
    "start": "404800",
    "end": "410560"
  },
  {
    "text": "Fu um that we're calling in my typically named Class C with method M um and there",
    "start": "410560",
    "end": "416680"
  },
  {
    "text": "we go Define that class going to make some room on the screen and to really show you what's going on under the hood",
    "start": "416680",
    "end": "423520"
  },
  {
    "text": "I'll just run the Java P command so this is running a reel behind the scenes um",
    "start": "423520",
    "end": "428680"
  },
  {
    "text": "and it'll show you that the bite code for the method m is just return right",
    "start": "428680",
    "end": "434960"
  },
  {
    "text": "does that make sense to everybody would you like to experiment with different quasi quotes for Fu meta",
    "start": "434960",
    "end": "443000"
  },
  {
    "text": "we can don't have to you like to someone yell something yes yes I heard yes that's not",
    "start": "443000",
    "end": "450479"
  },
  {
    "text": "a valid scal expression though would you like to do something more specific so um I prepared print line but",
    "start": "450479",
    "end": "458440"
  },
  {
    "text": "you know there are other things you can doint L good print line is good always good all right so let's print",
    "start": "458440",
    "end": "465280"
  },
  {
    "text": "something well I could leave those curries but let's just um so what do you",
    "start": "466319",
    "end": "471720"
  },
  {
    "text": "want to print line hi hi no that's that's very [Laughter]",
    "start": "471720",
    "end": "476960"
  },
  {
    "text": "creative so oh sorry I keep for there is this microphone in my face I apologize",
    "start": "476960",
    "end": "482440"
  },
  {
    "text": "um so oh great quasi quotes you know as I said macros are",
    "start": "482440",
    "end": "487610"
  },
  {
    "text": "[Music] experimental um we can't do",
    "start": "487610",
    "end": "492639"
  },
  {
    "text": "high can we do low no we can do we can do high no problem I'll do high we'll",
    "start": "492639",
    "end": "497800"
  },
  {
    "text": "show you interpolation I'm pretty sure it how",
    "start": "497800",
    "end": "501960"
  },
  {
    "text": "works this is to to be fair this is because we're running into repple and there's all kinds of weird stuff going",
    "start": "503879",
    "end": "509159"
  },
  {
    "text": "on you make this run like interactively and as soon as you do as you all know the demo effect things break I tested",
    "start": "509159",
    "end": "516440"
  },
  {
    "text": "print line one I wasn't counting that someone wanting to print a stram to be honest um sorry yeah well it's okay just",
    "start": "516440",
    "end": "525640"
  },
  {
    "text": "buy me a beer later all right so now the compiler is happy we have our implementation of our",
    "start": "525640",
    "end": "531200"
  },
  {
    "text": "macro I promise you this will work when you're doing it in a real program the reppel isn't the greatest for this kind of stuff but I'll I'll I'll Tell Dennis",
    "start": "531200",
    "end": "537600"
  },
  {
    "text": "that he needs to fix this uh tonight um he's in Europe so he's almost awak",
    "start": "537600",
    "end": "543560"
  },
  {
    "text": "again it's not too bad um okay so where",
    "start": "543560",
    "end": "548600"
  },
  {
    "text": "was my there so let's redefine our",
    "start": "548600",
    "end": "554079"
  },
  {
    "text": "class and now of course we want to see our um extremely intelligent uh",
    "start": "554079",
    "end": "561360"
  },
  {
    "text": "Optimizer inline that thing so this is what you get when you call Print line on high you load the constant you invoke",
    "start": "561360",
    "end": "569959"
  },
  {
    "text": "well first of all you get the um the outer pointer for the prev call um you",
    "start": "569959",
    "end": "575200"
  },
  {
    "text": "invoke the virtual which is print line and then well you have to get this unit thingy because that's the result of your",
    "start": "575200",
    "end": "580519"
  },
  {
    "text": "method so that's going to be your boxed unit as I'm sure you've all come to love when you look at DVA bite code emitted",
    "start": "580519",
    "end": "587160"
  },
  {
    "text": "by schol this is not running under the optimizer by the way um okay so",
    "start": "587160",
    "end": "593120"
  },
  {
    "text": "basically what this is shown you is that approximately macros are just you know",
    "start": "593120",
    "end": "598800"
  },
  {
    "text": "handrolled in liners right that's that's what they are um ideally that's kind of",
    "start": "598800",
    "end": "604480"
  },
  {
    "text": "the use case I am comfortable with I find using that you guys are doing that kind of stuff that's",
    "start": "604480",
    "end": "609800"
  },
  {
    "text": "fine so now we'll look at all the crazy stuff you can do okay so um I I promised",
    "start": "609800",
    "end": "615959"
  },
  {
    "text": "I was going to uh explain some more about what the blackbox context is and I think of it as a benign context because",
    "start": "615959",
    "end": "622880"
  },
  {
    "text": "I have to fix the bugs that are you know behind the white box context which is you know just wild so there's no need to",
    "start": "622880",
    "end": "629160"
  },
  {
    "text": "look look inside um and what I mean by that is that someone who's reading your code and there's a macro invocation they",
    "start": "629160",
    "end": "635760"
  },
  {
    "text": "know what's going on it's just a method call they don't need to understand the implementation of the macro all they",
    "start": "635760",
    "end": "640920"
  },
  {
    "text": "need to know about it is the signature of that method of the fu method they don't need to look any further than that",
    "start": "640920",
    "end": "646680"
  },
  {
    "text": "so the same holds for the IDE same holds for any tooling that you've got uh",
    "start": "646680",
    "end": "651959"
  },
  {
    "text": "running on your code incremental compilation all that stuff blackbox macros are constrainted so that they",
    "start": "651959",
    "end": "658079"
  },
  {
    "text": "can't mess with the comp tyer modulo bugs um so that this this invariant is",
    "start": "658079",
    "end": "664920"
  },
  {
    "text": "invalidated so whenever you can write a black bugs macro if you're already writing a macro make it a black box",
    "start": "664920",
    "end": "671279"
  },
  {
    "text": "please so the nice thing about this is that you can do code generation which I've shown you um which is great for",
    "start": "671279",
    "end": "677040"
  },
  {
    "text": "eliminating a lot of boiler plate and you can emit better error messages because you're kind of writing a domain",
    "start": "677040",
    "end": "682200"
  },
  {
    "text": "specific language you know what error messages should look like it's not going to be some random overload that's not",
    "start": "682200",
    "end": "687440"
  },
  {
    "text": "being found so that's great too feel free to emit error messages and warnings I think that's a perfectly valid use of",
    "start": "687440",
    "end": "695279"
  },
  {
    "text": "macros any questions so far Y is it um is it is it possible to",
    "start": "695279",
    "end": "702680"
  },
  {
    "text": "get the name of the method that you're being invoked in yep it's called the prefix or you mean the enclosing method",
    "start": "702680",
    "end": "708920"
  },
  {
    "text": "or the target of your macro call both are available um so I mean and that's that's",
    "start": "708920",
    "end": "718000"
  },
  {
    "text": "that's basically excuse me my point of the night is that that's the real",
    "start": "718000",
    "end": "723240"
  },
  {
    "text": "challenge in writing your Macros figuring out what the IPI for the compiler is and what all those methods do I've been working on a compiler for",
    "start": "723240",
    "end": "730240"
  },
  {
    "text": "six years now um I'm still not entirely sure about all of them um",
    "start": "730240",
    "end": "736480"
  },
  {
    "text": "so there's a lot in there and we've done like we've done Eugene has done an epic",
    "start": "736480",
    "end": "741639"
  },
  {
    "text": "job of kind of carving out an API that exposes what you need to know but even",
    "start": "741639",
    "end": "746800"
  },
  {
    "text": "during writing this talk not everything is there yet that's why we're calling it experimental it's going to keep changing",
    "start": "746800",
    "end": "752040"
  },
  {
    "text": "during 211 um because we don't feel it's ready yet um but yeah we're we're",
    "start": "752040",
    "end": "758079"
  },
  {
    "text": "definitely working on improving that part pass parameters into macro uh you",
    "start": "758079",
    "end": "763279"
  },
  {
    "text": "can pass typ parameters you can't pass anything else because of the meta level um jump that you're making so whatever",
    "start": "763279",
    "end": "770519"
  },
  {
    "text": "your macro implementation is doing it needs to know it at compile time yeah constants are known at compile",
    "start": "770519",
    "end": "777320"
  },
  {
    "text": "time I I'll have a bigger example for you later where we pass in a constant um but that's about it it needs",
    "start": "777320",
    "end": "784959"
  },
  {
    "text": "to be tracked by the types and constants are actually we have types that say this is an INT one our types actually don't",
    "start": "784959",
    "end": "792000"
  },
  {
    "text": "know what constant it is they don't just say oh it's an INT and I don't care like Java I don't know if Java knows they",
    "start": "792000",
    "end": "797760"
  },
  {
    "text": "just don't tell you um so here we get to our white box context and this is where all the action",
    "start": "797760",
    "end": "803560"
  },
  {
    "text": "is really to be honest with you um um talking about bug fixing obviously um so",
    "start": "803560",
    "end": "810920"
  },
  {
    "text": "and and there's a couple of things that invalidate pretty deep and varians that I I consider pretty dear about",
    "start": "810920",
    "end": "818519"
  },
  {
    "text": "understanding programs so first and for all you need to run the macro just to",
    "start": "818519",
    "end": "823760"
  },
  {
    "text": "determine the type of the macro call so that means IDs that don't support macros they're out if you as a",
    "start": "823760",
    "end": "830839"
  },
  {
    "text": "human don't support macro execution you won't understand what's happening in the code because you don't know what the",
    "start": "830839",
    "end": "835880"
  },
  {
    "text": "type is for the next call on that macro so if you do bar you don't know if that's going to type check because you",
    "start": "835880",
    "end": "841800"
  },
  {
    "text": "don't know what what what food does in its in its implementation you don't know what the type is going to be right so",
    "start": "841800",
    "end": "847639"
  },
  {
    "text": "the regular blackbox macro you can look at the signature for food and say oh yeah it returns a string string doesn't",
    "start": "847639",
    "end": "852680"
  },
  {
    "text": "have a method bar well maybe there's an implicit in Cope but you know that's about it that's also why I don't like implicits that",
    "start": "852680",
    "end": "858279"
  },
  {
    "text": "much um so they can guide implicit search there's an API to to tell",
    "start": "858279",
    "end": "863680"
  },
  {
    "text": "implicit search hey don't consider this one do consider that one what are the implicits in scope and so on so your macro can all of that when it's a white",
    "start": "863680",
    "end": "870320"
  },
  {
    "text": "box macro and full type inference is delayed until after expansion which allows really neat tricks and I'll show you one",
    "start": "870320",
    "end": "877959"
  },
  {
    "text": "um but it again it also hinders uh understanding of your program and finally you can use them as",
    "start": "877959",
    "end": "884959"
  },
  {
    "text": "extractors you can use them to kind of on the Fly create extractors which is really cool because um what I did the",
    "start": "884959",
    "end": "890480"
  },
  {
    "text": "year before joining typ saap was rewrite the pattern matcher and it's really exciting to see this kind of stuff um",
    "start": "890480",
    "end": "896720"
  },
  {
    "text": "but yeah you can do pretty crazy things so as a as an example of something pretty wacky I think anyway is um you",
    "start": "896720",
    "end": "904959"
  },
  {
    "text": "look at the phase of the moon and um you're an INT or you're a",
    "start": "904959",
    "end": "910000"
  },
  {
    "text": "string um like as I was giving you the example of food up bar here moody moody",
    "start": "910000",
    "end": "916360"
  },
  {
    "text": "do I'm sorry moody. bar is is going to be pretty moody so um I'm defining the macro Moody",
    "start": "916360",
    "end": "924560"
  },
  {
    "text": "its implementation is given here and it says well if um one out of two return to",
    "start": "924560",
    "end": "931399"
  },
  {
    "text": "program one expand to the program one and the other half expand to the program one but it's spelled a little",
    "start": "931399",
    "end": "938040"
  },
  {
    "text": "differently okay so um does that make",
    "start": "938040",
    "end": "943800"
  },
  {
    "text": "sense good because I have a question about this for you next the extra quotes the extra quotes oh yeah that's a good",
    "start": "943800",
    "end": "949240"
  },
  {
    "text": "question that's how it would work for the previous slide I guess the extra quotes aren't necessary I can I'm pretty",
    "start": "949240",
    "end": "955199"
  },
  {
    "text": "sure they're not um let's try it yeah so defined it um the triple quotes",
    "start": "955199",
    "end": "962160"
  },
  {
    "text": "allow you to write anything inside those triple quotes um so you don't get Escape uh the normal escaping",
    "start": "962160",
    "end": "968839"
  },
  {
    "text": "behavior um but we don't need them here obviously because there's nothing funny about one okay so what this what this macro",
    "start": "968839",
    "end": "976040"
  },
  {
    "text": "will do when you call Moody the compiler will call Moody MAA through reflection Java Reflection actually and it'll ask",
    "start": "976040",
    "end": "984199"
  },
  {
    "text": "for a random float look at it and decide to expand into the",
    "start": "984199",
    "end": "989880"
  },
  {
    "text": "one the constant one or the constant o n",
    "start": "989880",
    "end": "995040"
  },
  {
    "text": "e right so depending on that it'll have a different type because all the",
    "start": "995040",
    "end": "1000600"
  },
  {
    "text": "implementation is saying I return a tree which is representation of a Scola program and I've kind of left off um the",
    "start": "1000600",
    "end": "1007560"
  },
  {
    "text": "implement the type here which is bador and Pad you have to write this always",
    "start": "1007560",
    "end": "1012839"
  },
  {
    "text": "okay this is actually super to next Milestone it it we won't let you anymore um so um just to be fair I'll I'll I'll",
    "start": "1012839",
    "end": "1020759"
  },
  {
    "text": "do it I'll play it by the same roles so Pop Quiz I mean I've given it away right",
    "start": "1020759",
    "end": "1025880"
  },
  {
    "start": "1023000",
    "end": "1337000"
  },
  {
    "text": "um so who thinks this is going to evaluate to",
    "start": "1025880",
    "end": "1032558"
  },
  {
    "text": "zero no one that's great okay so what what's going to",
    "start": "1032559",
    "end": "1037760"
  },
  {
    "text": "happen sometimes yeah that's that's exactly the right question when is this evoked well it's invoked when this",
    "start": "1037760",
    "end": "1044160"
  },
  {
    "text": "expression is being typ teched right so what you're really writing is call the method minus on the expression Moody and",
    "start": "1044160",
    "end": "1053000"
  },
  {
    "text": "that's what I've been harping on about is like if you want to understand this program you need to understand the type",
    "start": "1053000",
    "end": "1058120"
  },
  {
    "text": "of Moody and in order to understand the type of Moody you need to run the implementation of the",
    "start": "1058120",
    "end": "1064000"
  },
  {
    "text": "macro in order to do that you need to have a bite quod interpreter in your head or you know we can do some abstract",
    "start": "1064000",
    "end": "1070760"
  },
  {
    "text": "interpretation or something like that but you know the approximation is that this is not really going to work all the time I just run it and we'll see oh look",
    "start": "1070760",
    "end": "1078919"
  },
  {
    "text": "at zero that's great let me try that again oh not found value",
    "start": "1078919",
    "end": "1085960"
  },
  {
    "text": "one who saw that comic yeah so it's not even a string",
    "start": "1087320",
    "end": "1094880"
  },
  {
    "text": "it's just a random bleep in identifier yeah exactly yeah I",
    "start": "1094880",
    "end": "1102559"
  },
  {
    "text": "know so yeah so that means these macros are not hyic it's trying to capture them",
    "start": "1102559",
    "end": "1107880"
  },
  {
    "text": "well um yeah the core macros aren't hygienic there are mechanisms for Hygiene um but",
    "start": "1107880",
    "end": "1113880"
  },
  {
    "text": "I chose not to use them yeah good point um so quasi quotes",
    "start": "1113880",
    "end": "1119240"
  },
  {
    "text": "normally yep no no that also doesn't hold so",
    "start": "1119240",
    "end": "1124559"
  },
  {
    "text": "moody moody equals equals Moody um will type check sometimes you know",
    "start": "1124559",
    "end": "1133399"
  },
  {
    "text": "statistically I'll let you do the math I'm not really good at intuitions about statistics I know that much of",
    "start": "1134159",
    "end": "1140039"
  },
  {
    "text": "um but yeah about one and two or something right uh yeah in the back no I know it's",
    "start": "1140039",
    "end": "1146000"
  },
  {
    "text": "one and four but yeah I know yeah sorry I can't hear",
    "start": "1146000",
    "end": "1154200"
  },
  {
    "text": "you at runtime of the compiler",
    "start": "1154480",
    "end": "1158840"
  },
  {
    "text": "yes no so the Moody implementation is compiled to bite code it has has to be actually for the compiler to consider it",
    "start": "1164520",
    "end": "1170720"
  },
  {
    "text": "a macro implementation but every time the type Checker sees Moody it'll",
    "start": "1170720",
    "end": "1176360"
  },
  {
    "text": "reflectively invoke using the jvm because we're the scol compilers running on the jvm it will use Java Reflection",
    "start": "1176360",
    "end": "1182360"
  },
  {
    "text": "to call that implementation of the macro every time we don't do caching that's",
    "start": "1182360",
    "end": "1187400"
  },
  {
    "text": "why we're slow no you're not recompiling it it's been compiled to B code but we're",
    "start": "1187400",
    "end": "1193200"
  },
  {
    "text": "constantly reflectively invoking it so you're not actually this is kind",
    "start": "1193200",
    "end": "1199080"
  },
  {
    "text": "of tricking you into believing something that's not true the reppel goes through all kinds of trouble to let you Define",
    "start": "1199080",
    "end": "1205520"
  },
  {
    "text": "macros in the same compilation unit as that you're using them actually the macro is doing is stacking up a bunch of",
    "start": "1205520",
    "end": "1210799"
  },
  {
    "text": "objects uh that let you pretend you're living in this ideal Universe where you're really not so it needs to be",
    "start": "1210799",
    "end": "1217480"
  },
  {
    "text": "compiled first and then it'll be reflectively invoked using the jvm's reflection capabilities so the bite fi",
    "start": "1217480",
    "end": "1223080"
  },
  {
    "text": "will be written for the string return as well as for the integer return is that right no",
    "start": "1223080",
    "end": "1229640"
  },
  {
    "text": "there there will be by code for so let me show you",
    "start": "1229640",
    "end": "1235480"
  },
  {
    "text": "um I can think I can show you well I'd have to write a class I'm too lazy so um",
    "start": "1237200",
    "end": "1244360"
  },
  {
    "text": "if I were to run Java p on the outer class that the reppel has generated for this method it'll just it'll just be",
    "start": "1244360",
    "end": "1251600"
  },
  {
    "text": "regular scol right the compiler doesn't know anything doesn't need to know anything about this method that it's a",
    "start": "1251600",
    "end": "1256919"
  },
  {
    "text": "macro it's just a method that operates on Scala ests doesn't do anything",
    "start": "1256919",
    "end": "1262760"
  },
  {
    "text": "special you everything you know about Scala compilation still holds I'll I'll come back to your question in a second",
    "start": "1262760",
    "end": "1269240"
  },
  {
    "text": "so this is just compiled to bite code this is also compiled to B code but",
    "start": "1269240",
    "end": "1275000"
  },
  {
    "text": "the compiler remembers that it's a macro and it'll pickle it'll remember in a class file",
    "start": "1275000",
    "end": "1281120"
  },
  {
    "text": "annotation which implementation to reflectively invoke when typechecking Moody and since it's reflectively",
    "start": "1281120",
    "end": "1288080"
  },
  {
    "text": "invoking Mooda needs to have been compiled to bite code and it's compiled only once it doesn't need to be anymore",
    "start": "1288080",
    "end": "1294400"
  },
  {
    "text": "but its invocation is actually compilation right you can think of that as compilation it's like a mini compiler",
    "start": "1294400",
    "end": "1299440"
  },
  {
    "text": "running and saying the digit one identifier o digit one o depending on",
    "start": "1299440",
    "end": "1306720"
  },
  {
    "text": "phas and moon yeah sorry a question in the back you well so so the macro is",
    "start": "1306720",
    "end": "1314600"
  },
  {
    "text": "compiled to bite code right once and just a regular Java class with B code the compiler is",
    "start": "1314600",
    "end": "1322159"
  },
  {
    "text": "just a regular Java application and it invokes the method the macro implementation passing in on the stack a",
    "start": "1322159",
    "end": "1329120"
  },
  {
    "text": "pointer to itself so you're basically writing a compiler",
    "start": "1329120",
    "end": "1334399"
  },
  {
    "text": "plugin so we did our quiz so as as I kind of told you many times now to even",
    "start": "1335400",
    "end": "1343120"
  },
  {
    "start": "1337000",
    "end": "1541000"
  },
  {
    "text": "just autocomplete on a white box macro not on a black box macro the IDE must run it must run the macro",
    "start": "1343120",
    "end": "1351279"
  },
  {
    "text": "implementation and actually the Scala ID for Eclipse does this because it's running a real Scola",
    "start": "1351279",
    "end": "1356760"
  },
  {
    "text": "compiler um so it it does it does do that and it sees the expanded code which",
    "start": "1356760",
    "end": "1362000"
  },
  {
    "text": "then confuses it a little bit um so if you're writing a macro um",
    "start": "1362000",
    "end": "1368000"
  },
  {
    "text": "you might want to try detecting the ID and report your errors but don't expand",
    "start": "1368000",
    "end": "1373840"
  },
  {
    "text": "because it'll it'll not create an ideal experience for someone using your macro",
    "start": "1373840",
    "end": "1379000"
  },
  {
    "text": "I'll have more in that later so oh yeah there it is like I said later um so",
    "start": "1379000",
    "end": "1385080"
  },
  {
    "text": "we're currently working on actually supporting IDs in the macro API and giving you better tools for playing nice",
    "start": "1385080",
    "end": "1390960"
  },
  {
    "text": "with both jet brains and uh offerings and and our own so let me tell you a",
    "start": "1390960",
    "end": "1396640"
  },
  {
    "text": "little bit about a couple applications that are out there this is just a very select few apologize if your Mac wasn't",
    "start": "1396640",
    "end": "1402159"
  },
  {
    "text": "there please y out and I'll I'll list it as well um so as you've seen there a lot of code generation going on you can",
    "start": "1402159",
    "end": "1407799"
  },
  {
    "text": "generate your own range for each to be a while loop which is great you can do your own kind of specialization uh like",
    "start": "1407799",
    "end": "1414279"
  },
  {
    "text": "little islands of specialization so all those links are are worth a read I would say if you have some time later you can",
    "start": "1414279",
    "end": "1420039"
  },
  {
    "text": "write fast parallel collections Scala Blitz you can scrap some boiler plate um",
    "start": "1420039",
    "end": "1425840"
  },
  {
    "text": "to do uh Json formatting or or parsing to do fast pickling quasi quotes are",
    "start": "1425840",
    "end": "1431960"
  },
  {
    "text": "also just macros um so in order to generate um ASDS or or pattern match on",
    "start": "1431960",
    "end": "1438120"
  },
  {
    "text": "them to give you like the line number functionality that you miss from C++ um and do all kinds of testing and",
    "start": "1438120",
    "end": "1446039"
  },
  {
    "text": "tracing and asserting and lots of bells and whistles really nice useful stuff",
    "start": "1446039",
    "end": "1451799"
  },
  {
    "text": "most of these are blackbox macros you can do static checks like",
    "start": "1451799",
    "end": "1456919"
  },
  {
    "text": "spores that are closures that uh make sure that they don't capture anything accidentally which is great when you're writing a distributed",
    "start": "1456919",
    "end": "1462640"
  },
  {
    "text": "application or you know you can be something more mundane and make sure that your printf format are good um you",
    "start": "1462640",
    "end": "1470480"
  },
  {
    "text": "can write dsls like SBT 013 does um async um is a nicer way to work with",
    "start": "1470480",
    "end": "1478120"
  },
  {
    "text": "futures um also a macro it's really just a compiler plugin that we package as a macro because it's less of a pain um but",
    "start": "1478120",
    "end": "1485399"
  },
  {
    "text": "it's a macro language virtualization as you um may have heard of in other talks and there's lots more links in",
    "start": "1485399",
    "end": "1493200"
  },
  {
    "text": "these Behind these links so when you're implementing macros and after after this I'll I'll tell you",
    "start": "1493200",
    "end": "1499399"
  },
  {
    "text": "I'll give you an example of one use quasi quotes use quasi quotes they're great be hygenic um use fresh",
    "start": "1499399",
    "end": "1508120"
  },
  {
    "text": "names um and use fully qualified names starting at underscore root underscore",
    "start": "1508120",
    "end": "1513960"
  },
  {
    "text": "otherwise you might capture even Scala isn't as unique as you might think so in the Reel there's this great",
    "start": "1513960",
    "end": "1520559"
  },
  {
    "text": "power mode that lets you uh experiment with runtime reflection there's a toolbox compiler you can also use to do",
    "start": "1520559",
    "end": "1526720"
  },
  {
    "text": "unit testing of your Macros and avoid reset adders which is something that undoes type teing resets",
    "start": "1526720",
    "end": "1533440"
  },
  {
    "text": "your whole program as if it just been parsed and then red does type teing instead combin type trees this is very",
    "start": "1533440",
    "end": "1539000"
  },
  {
    "text": "technical stuff um so um I won't really go into in this talk so to give you a",
    "start": "1539000",
    "end": "1545399"
  },
  {
    "start": "1541000",
    "end": "1671000"
  },
  {
    "text": "quick example uh of runtime reflection maybe I should check how I'm doing on time here oh looks like I have some time",
    "start": "1545399",
    "end": "1552399"
  },
  {
    "text": "to go into this so there's a whole there's actually two universes of reflection there's the universe",
    "start": "1552399",
    "end": "1558919"
  },
  {
    "text": "well there's three really but we don't want to know about the third one so I won't tell you there's the two universes",
    "start": "1558919",
    "end": "1565640"
  },
  {
    "text": "are the runtime reflection uh and the macro reflection API and the third one",
    "start": "1565640",
    "end": "1570760"
  },
  {
    "text": "is the compiler so um here is an example of how you use the",
    "start": "1570760",
    "end": "1577520"
  },
  {
    "text": "runtime uh Universe which is great for for invoking the compiler at runtime",
    "start": "1577520",
    "end": "1582840"
  },
  {
    "text": "really and and then just having to do whatever so the first couple examples just how a print line that conveniently",
    "start": "1582840",
    "end": "1589679"
  },
  {
    "text": "has a number rather than a string um and you know you can you can",
    "start": "1589679",
    "end": "1595039"
  },
  {
    "text": "show that Tre to see what it looks like as as a text representation or you can do a show raw which you know that's",
    "start": "1595039",
    "end": "1601679"
  },
  {
    "text": "that's pretty cool uh let me run it in the meantime like and then the next thing is actually you run like a little mini compiler that is using Java",
    "start": "1601679",
    "end": "1608520"
  },
  {
    "text": "Reflection to load class files rather than reading them from disk I'll scroll down in a second um so you can do really",
    "start": "1608520",
    "end": "1614840"
  },
  {
    "text": "neat stuff with that um you basically have your own little scal so you can write a rebel with that or do",
    "start": "1614840",
    "end": "1620640"
  },
  {
    "text": "whatever and so the toolbx has an eval method that is like you know the eval you might know from those languages who",
    "start": "1620640",
    "end": "1627840"
  },
  {
    "text": "did Macos first so the one that you're seeing there that's the result of the eval so I",
    "start": "1627840",
    "end": "1634120"
  },
  {
    "text": "evaluated the tree um the ID is called identity because it'll just print whatever that",
    "start": "1634120",
    "end": "1640840"
  },
  {
    "text": "that program was but has actually gone through a round trip between ests and this shows you how you would",
    "start": "1640840",
    "end": "1646960"
  },
  {
    "text": "actually construct that tree using the the the API that the compiler uses internally so whenever you're writing",
    "start": "1646960",
    "end": "1653399"
  },
  {
    "text": "print line it's actually not just print line there's a whole lot of stuff going on there you're making a term name you're making an identifier out of that",
    "start": "1653399",
    "end": "1658880"
  },
  {
    "text": "and you're applying that to a list of arguments in this case the literal constant one this is invaluable when you're when",
    "start": "1658880",
    "end": "1665880"
  },
  {
    "text": "you're not using or when you can't use quasi quotes for certain reasons but most of the time you can just use quasi",
    "start": "1665880",
    "end": "1671279"
  },
  {
    "start": "1671000",
    "end": "1719000"
  },
  {
    "text": "quotes So this brings me to my my bigger example um I'm sure a lot of you have",
    "start": "1671279",
    "end": "1677799"
  },
  {
    "text": "wished in the past that they could just dupli FY that case class well I have good news for you you can it's amazing",
    "start": "1677799",
    "end": "1685519"
  },
  {
    "text": "so uh thanks to Dennis and and Jason for for helping me out with that um I'm I'm",
    "start": "1685519",
    "end": "1690760"
  },
  {
    "text": "bit of a macrob myself actually um so the use case is let's say you have a",
    "start": "1690760",
    "end": "1697679"
  },
  {
    "text": "bunch of case classes and you want to be able to kind of squash them down to their Essence",
    "start": "1697679",
    "end": "1702919"
  },
  {
    "text": "which is really a product or a tupal and so you want to be able to say you know",
    "start": "1702919",
    "end": "1708480"
  },
  {
    "text": "person tliy and you get a tupal that has all the case fields of your of your case",
    "start": "1708480",
    "end": "1714039"
  },
  {
    "text": "class I'm sure at some point you've wanted to do this you may not want to admit it but you",
    "start": "1714039",
    "end": "1720279"
  },
  {
    "start": "1719000",
    "end": "1869000"
  },
  {
    "text": "have so um I'm going to introduce some helpers here to show you that macro",
    "start": "1720279",
    "end": "1725880"
  },
  {
    "text": "implementations are just regular programs you write them using regular Scala",
    "start": "1725880",
    "end": "1731760"
  },
  {
    "text": "constructs so we're experimenting here so I'm importing language experimental macros we're in the um macro Universe",
    "start": "1731760",
    "end": "1739399"
  },
  {
    "text": "for reflection and we're writing a white white box macro so that's pretty",
    "start": "1739399",
    "end": "1744679"
  },
  {
    "text": "exciting um I ask you to please forgive my uh my crimes against indentation I",
    "start": "1744679",
    "end": "1750880"
  },
  {
    "text": "can fit in on a slide otherwise um so we have a couple helpers",
    "start": "1750880",
    "end": "1756120"
  },
  {
    "text": "here uh the first is an extractor for term symbols so a case field will match",
    "start": "1756120",
    "end": "1761919"
  },
  {
    "text": "a symbol that represents field of a case class and it will tell you if if it is",
    "start": "1761919",
    "end": "1768440"
  },
  {
    "text": "the case that it is a field it will tell you its term name I could also just point here",
    "start": "1768440",
    "end": "1774919"
  },
  {
    "text": "couldn't I um it will tell you its name and its type so the way it does that is",
    "start": "1774919",
    "end": "1782279"
  },
  {
    "text": "well it looks at the term symbol it says are you a value and are you a case class are case accessor if so I'm going to do",
    "start": "1782279",
    "end": "1790279"
  },
  {
    "text": "some really nasty stuff to your name um you can ask me why but I won't tell you",
    "start": "1790279",
    "end": "1795919"
  },
  {
    "text": "otherwise um and I will give you the name it will give you the type of that symbol right so this is just your",
    "start": "1795919",
    "end": "1802720"
  },
  {
    "text": "regular extractor definition look at a symbol give you its name and its type",
    "start": "1802720",
    "end": "1809240"
  },
  {
    "text": "okay and then the second thing would be your logic that says hey there's something wrong here's an error message",
    "start": "1809240",
    "end": "1815279"
  },
  {
    "text": "that will tell you what's wrong rather than some random vanilla scalac C error so in this case we're just going to tell",
    "start": "1815279",
    "end": "1821080"
  },
  {
    "text": "you H it's not a case class and it'll use the macro API so whenever you see uh",
    "start": "1821080",
    "end": "1826679"
  },
  {
    "text": "selected on C is part of the the macro API so in this case you'll have your",
    "start": "1826679",
    "end": "1831799"
  },
  {
    "text": "enclosing position um and you can import compilation not system exit please we",
    "start": "1831799",
    "end": "1840440"
  },
  {
    "text": "don't we don't we don't keep you from doing that but just it's not nice to your ID user um although probably osgi",
    "start": "1840440",
    "end": "1848600"
  },
  {
    "text": "will actually not let you do that I don't know I haven't tried um so any questions about like",
    "start": "1848600",
    "end": "1855120"
  },
  {
    "text": "setting the scene here this is just your arbitrary data processing happens to be scholar",
    "start": "1855120",
    "end": "1863200"
  },
  {
    "text": "programs totally not to ask um so um the way that Scala is",
    "start": "1865480",
    "end": "1872200"
  },
  {
    "text": "compiled uh we have multiple symbols for uh uh members of case classes for the",
    "start": "1872200",
    "end": "1878840"
  },
  {
    "text": "the the fields you got your private this field you got your getter you got your Setter and we do some sneaky name",
    "start": "1878840",
    "end": "1885919"
  },
  {
    "text": "mangling on those so you can call them from your scholar program and the name mangling we have to promise not to tell",
    "start": "1885919",
    "end": "1891519"
  },
  {
    "text": "anybody because otherwise people will start doing this um is the identifier is",
    "start": "1891519",
    "end": "1896840"
  },
  {
    "text": "suffix with a white space that's why I call and there's no",
    "start": "1896840",
    "end": "1902159"
  },
  {
    "text": "API method I looked I swear I looked for a long time um there is one in the",
    "start": "1902159",
    "end": "1907360"
  },
  {
    "text": "internal compiler uh API obviously we don't do like trims all over the place",
    "start": "1907360",
    "end": "1913120"
  },
  {
    "text": "while we're compiling your program my problems but there we hadn't thought to expose that one and official macro API",
    "start": "1913120",
    "end": "1919600"
  },
  {
    "text": "so um you can either do as a lot of macro I mean compiler plugins do like Asing to just cast the universe down to",
    "start": "1919600",
    "end": "1926039"
  },
  {
    "text": "the compiler universe and then just go wild or you can just reimplement the functionalities as I've done",
    "start": "1926039",
    "end": "1932639"
  },
  {
    "text": "here so yeah you just do a two string and a trim what could possibly go",
    "start": "1932639",
    "end": "1938440"
  },
  {
    "text": "wrong and now I forgot whether I run I haven't run this yet so let me run that I went to Great pains to make sure that",
    "start": "1938440",
    "end": "1944840"
  },
  {
    "text": "I could like you actually run that stuff all right great so now we get to the fun bit so what",
    "start": "1944840",
    "end": "1951799"
  },
  {
    "text": "we're going to do is uh and I'll use this screen so you don't feel too discriminated against on this side um",
    "start": "1951799",
    "end": "1957720"
  },
  {
    "text": "we're going to implement a t a case class actually so we're kind of doing like a poor men's deriving from",
    "start": "1957720",
    "end": "1964000"
  },
  {
    "text": "hasal so here's our case class and well Google says it's a Google but it's actually a",
    "start": "1964000",
    "end": "1970440"
  },
  {
    "text": "trait um as tle t view and it's an",
    "start": "1970440",
    "end": "1975559"
  },
  {
    "text": "isomorphism that only goes one way if there's anyone who knows the you can yell what that is I don't know maybe it's an injection or something um so you",
    "start": "1975559",
    "end": "1983799"
  },
  {
    "text": "know it'll just say I can tfy your t's and it'll be a u after it's been dupli",
    "start": "1983799",
    "end": "1989279"
  },
  {
    "text": "fied that's how I think about these things to be honest okay so we have materialize who",
    "start": "1989279",
    "end": "1995519"
  },
  {
    "text": "fits on a slide this way um which will give you an essence of this typ class",
    "start": "1995519",
    "end": "2001639"
  },
  {
    "text": "usually it'd be pretty tedious um because you have to write all those right you have to write it for every",
    "start": "2001639",
    "end": "2008559"
  },
  {
    "text": "case class that you write you'd have to do this unless you're using shapeless or something like that who's done that before like mes has done all this nasty",
    "start": "2008559",
    "end": "2015000"
  },
  {
    "text": " before you I mean stuff um so you know here's the macro",
    "start": "2015000",
    "end": "2020679"
  },
  {
    "text": "implementation we're using macro bundles which is nice for writing bigger macros as we're doing here you know as soon as",
    "start": "2020679",
    "end": "2026639"
  },
  {
    "text": "it crosses a slide you probably should consider macro bundles um they're essentially like U",
    "start": "2026639",
    "end": "2034120"
  },
  {
    "text": "methods uh except that they're that they're a whole trait so here I I designate a method of a",
    "start": "2034120",
    "end": "2042000"
  },
  {
    "text": "trait as my macro implementation and the whole trait will be instantiated with uh",
    "start": "2042000",
    "end": "2047880"
  },
  {
    "text": "it C member being bound to the context so you don't have to have the method dependent type in there dependent methot",
    "start": "2047880",
    "end": "2054560"
  },
  {
    "text": "type if you so uh if I go like what this extends from helpers and helpers extends from",
    "start": "2054560",
    "end": "2060638"
  },
  {
    "text": "White boox macros and white boox macros Has a Field context called C because",
    "start": "2060639",
    "end": "2066000"
  },
  {
    "text": "that fits on the slide and you know you write all the time even when you don't program in",
    "start": "2066000",
    "end": "2071839"
  },
  {
    "text": "slides so this is your implementation here we're going to take a t that is passed in from here that is passed in",
    "start": "2071839",
    "end": "2078158"
  },
  {
    "text": "from there and we actually want to reify this so we ask for a type tag and since we're",
    "start": "2078159",
    "end": "2085919"
  },
  {
    "text": "at macro implementation we need to return a Tre in the right Universe in the macro",
    "start": "2085919",
    "end": "2093280"
  },
  {
    "text": "universe so what we're going to do is actually reify this so that just means make an object out of something so we'll",
    "start": "2093320",
    "end": "2100880"
  },
  {
    "text": "have this T object here that is a representation of this T type argument",
    "start": "2100880",
    "end": "2106160"
  },
  {
    "text": "there type parameter and we're going to call our first helper method or our second one",
    "start": "2106160",
    "end": "2111960"
  },
  {
    "text": "actually that we Define to validate that t to check that it's actually a case class everybody with me so",
    "start": "2111960",
    "end": "2118599"
  },
  {
    "text": "far okay so what we're then going to do is look at that type which is this",
    "start": "2118599",
    "end": "2124839"
  },
  {
    "text": "object here this weak type tag",
    "start": "2124839",
    "end": "2129640"
  },
  {
    "text": "um then and we're going to ask for its declarations so that will include you",
    "start": "2130200",
    "end": "2136920"
  },
  {
    "text": "know whatever methods in there but also the case field the case class Fields we're going to do a collect just",
    "start": "2136920",
    "end": "2143800"
  },
  {
    "text": "a collection can do whatever and if it's a case field so this books are extractor that we defined",
    "start": "2143800",
    "end": "2150079"
  },
  {
    "text": "earlier excuse me so if the Declaration that we're collecting is actually a case field with",
    "start": "2150079",
    "end": "2158319"
  },
  {
    "text": "name f and type TP we will yield a pair which will be",
    "start": "2158319",
    "end": "2164599"
  },
  {
    "text": "the scholar program T.F where f is spliced into this program so it'll",
    "start": "2164599",
    "end": "2170319"
  },
  {
    "text": "actually be T do whatever name was for your for your case class field sorry",
    "start": "2170319",
    "end": "2175480"
  },
  {
    "text": "Case class field and DP whatever type you gave to your field when you declared your case class right so this is just",
    "start": "2175480",
    "end": "2183280"
  },
  {
    "text": "doing some data Ming on your declaration extracting the field accessors giving you their name and your",
    "start": "2183280",
    "end": "2188839"
  },
  {
    "text": "types unzip that and what we're going to do now and this is the important bit is",
    "start": "2188839",
    "end": "2194359"
  },
  {
    "text": "we'll need an instance of our type class here right we're just this is kind of the meta type class that knows how to",
    "start": "2194359",
    "end": "2199880"
  },
  {
    "text": "generate this for all case classes and so we generate an instance of this one so it's like as Tuple that's",
    "start": "2199880",
    "end": "2206400"
  },
  {
    "text": "our that's our type class right there the uh type uh parameter that we already",
    "start": "2206400",
    "end": "2211440"
  },
  {
    "text": "reified and this will splice in a list of things so um",
    "start": "2211440",
    "end": "2219160"
  },
  {
    "text": "this is the the Tuple type Constructor you might not see it because uh I kind of made it gray but uh these dot dot",
    "start": "2219160",
    "end": "2226240"
  },
  {
    "text": "types thingies are in parentheses so it'll make it into a tupal so a tupal of",
    "start": "2226240",
    "end": "2232440"
  },
  {
    "text": "cardinality n for n uh types in the argument types here because we made a",
    "start": "2232440",
    "end": "2237800"
  },
  {
    "text": "list right um and then it'll implement the the twole method the two Tuple method I'll",
    "start": "2237800",
    "end": "2245280"
  },
  {
    "text": "say okay well I'm converting a t and what I'm going to give you is n",
    "start": "2245280",
    "end": "2250760"
  },
  {
    "text": "selections that I've generated here so this T um belong corresponds to the T",
    "start": "2250760",
    "end": "2257720"
  },
  {
    "text": "and the argument here okay so I see a lot of people want to ask question",
    "start": "2257720",
    "end": "2264119"
  },
  {
    "text": "yeah it's a oh yeah um that's an excellent question not an object but a trait well",
    "start": "2264119",
    "end": "2271880"
  },
  {
    "text": "so as I as I kind of hinted at there's this abstract member C that is your context",
    "start": "2271880",
    "end": "2278319"
  },
  {
    "text": "and as part of the macro bundle translation you will instantiate this",
    "start": "2278319",
    "end": "2283760"
  },
  {
    "text": "class after mixing in that Val c um so it's an implementation detail of",
    "start": "2283760",
    "end": "2290240"
  },
  {
    "text": "the macro bundles approach so it's it's you're actually encoding um dependent",
    "start": "2290240",
    "end": "2295640"
  },
  {
    "text": "method types using traits and value members rather than pushing the value member down into your argument list and",
    "start": "2295640",
    "end": "2301839"
  },
  {
    "text": "then currying and using the the U depending on the earlier argument there",
    "start": "2301839",
    "end": "2306920"
  },
  {
    "text": "so just kind of flattens or pulls out if you will the argument list into the member okay more questions",
    "start": "2306920",
    "end": "2316079"
  },
  {
    "text": "remarks oh yeah there's a lot of ways to break",
    "start": "2316079",
    "end": "2323400"
  },
  {
    "text": "this um which is why I told you not to use macros remember that's just the typ save side",
    "start": "2323400",
    "end": "2330440"
  },
  {
    "text": "of things um okay well I don't mean the company so if we run this well have",
    "start": "2330440",
    "end": "2337680"
  },
  {
    "text": "completed our macro implementation very exciting so now I",
    "start": "2337680",
    "end": "2344280"
  },
  {
    "start": "2343000",
    "end": "2414000"
  },
  {
    "text": "can show you tfy which brings it all together so I have our good old person who doesn't",
    "start": "2344280",
    "end": "2350760"
  },
  {
    "text": "know he's going to be subjected to tfic yet but it's going to happen so maybe I'll step over to this side kind of",
    "start": "2350760",
    "end": "2356960"
  },
  {
    "text": "balance it out so case class um any questions about the case class no okay",
    "start": "2356960",
    "end": "2363400"
  },
  {
    "text": "um so we're going to tliy this thing um and will require evidence it is dupli",
    "start": "2363400",
    "end": "2368560"
  },
  {
    "text": "fiable indeed and this evidence will be supplied by our macro then when we get our hands on that",
    "start": "2368560",
    "end": "2375960"
  },
  {
    "text": "evidence we'll immediately use it to call the two Tuple method it's like oh you say you can tfy well then tliy and",
    "start": "2375960",
    "end": "2382359"
  },
  {
    "text": "we call that on the argument here so this is just your ordinary implicit it doesn't know anything about the macro it",
    "start": "2382359",
    "end": "2387480"
  },
  {
    "text": "doesn't care where it's instances come from it'll use them okay so if I did",
    "start": "2387480",
    "end": "2393880"
  },
  {
    "text": "everything right there you'll get you know a typed tub",
    "start": "2393880",
    "end": "2399160"
  },
  {
    "text": "that has it it first element of string second element of int and the values of your",
    "start": "2399160",
    "end": "2404440"
  },
  {
    "text": "person all right Tada I know amazing so any questions about that",
    "start": "2404440",
    "end": "2413560"
  },
  {
    "text": "aop um actually aop is we we've done some we actually recently done some fun stuff with aop um I don't really know",
    "start": "2413560",
    "end": "2421119"
  },
  {
    "start": "2414000",
    "end": "2710000"
  },
  {
    "text": "how to like do you mean in general macros or this example this example I I haven't used",
    "start": "2421119",
    "end": "2428119"
  },
  {
    "text": "aspect J in like a decade could you like I don't know do you have a sense of how you would do",
    "start": "2428119",
    "end": "2433560"
  },
  {
    "text": "it well you wouldn't no okay yeah me neither to be",
    "start": "2433560",
    "end": "2439599"
  },
  {
    "text": "honest I mean there's definitely I mean there's definitely use cases for for aop that are similar to what you do with a",
    "start": "2439599",
    "end": "2445280"
  },
  {
    "text": "macro I think as with anything that you're doing programming there's something that aop can do for you there",
    "start": "2445280",
    "end": "2450880"
  },
  {
    "text": "or mess up for you there but yeah it's it's kind of like that except it doesn't",
    "start": "2450880",
    "end": "2456560"
  },
  {
    "text": "really like get its it doesn't really get to do runtime interception right it's all compile time I think that's",
    "start": "2456560",
    "end": "2463720"
  },
  {
    "text": "that's I mean you could write aspect J with macros I guess but you'd have to in inject the macro everywhere in your",
    "start": "2463720",
    "end": "2470480"
  },
  {
    "text": "program explicitly we don't have the cross cutting right if I remember it was aop was defined by doing cross cutting",
    "start": "2470480",
    "end": "2478400"
  },
  {
    "text": "and point Cuts yes Point Cuts yes Point cuts and advice so you can do your advice but I don't see how you would",
    "start": "2478400",
    "end": "2484760"
  },
  {
    "text": "quantify over Point cuts and the weaving is I see how you would do that but the the cross cutting would be much harder I",
    "start": "2484760",
    "end": "2490880"
  },
  {
    "text": "mean besides we have traits for that if you want to do stuff like that which is kind of like a harness version of a yes",
    "start": "2490880",
    "end": "2496480"
  },
  {
    "text": "you could say yes so two questions one can you CH say don't do that at home though or",
    "start": "2496480",
    "end": "2504319"
  },
  {
    "text": "do only do that at home in the kitchen",
    "start": "2504319",
    "end": "2511520"
  },
  {
    "text": "right the bom code when you want to when you debug through and sorry I was I was",
    "start": "2511520",
    "end": "2517520"
  },
  {
    "text": "so blown away by your first question then here the second one so what happens to the source code yeah now you",
    "start": "2517520",
    "end": "2523640"
  },
  {
    "text": "debugging through yep U well you you want some Source Maps there won't you um",
    "start": "2523640",
    "end": "2530319"
  },
  {
    "text": "well ask Eugene maybe you'll implement it um you'd have to attach like some",
    "start": "2530319",
    "end": "2535760"
  },
  {
    "text": "kind of class file annotation or something reified and I'm sure they've been thinking about this",
    "start": "2535760",
    "end": "2542000"
  },
  {
    "text": "but um that's not our priority right now but yeah I mean you could do it it would",
    "start": "2542000",
    "end": "2547440"
  },
  {
    "text": "be painful you'd have to get the IDS to support that but it would be I mean I agree it would be very important to have",
    "start": "2547440",
    "end": "2552640"
  },
  {
    "text": "and actually that reminds me know back to your question after that um there's a Cool ID plugin that uh a student a",
    "start": "2552640",
    "end": "2559400"
  },
  {
    "text": "Google summer of code student is working on called Sprinter um it's a it's a fun acronym I",
    "start": "2559400",
    "end": "2566280"
  },
  {
    "text": "forgot it's like something with Scala printing or something um and it'll let you print the ests generated by macros",
    "start": "2566280",
    "end": "2573200"
  },
  {
    "text": "and expand them in line into IDE so you can you get a refact ing basically to tell you",
    "start": "2573200",
    "end": "2580119"
  },
  {
    "text": "deacy and or you know just like you get implicit expansion already in in skull ID same thing for macros um so that's so",
    "start": "2580119",
    "end": "2588640"
  },
  {
    "text": "far I think the best I've seen um but yes I agree once you start using this in production which is why we recommend you",
    "start": "2588640",
    "end": "2594200"
  },
  {
    "text": "don't you'll need something like that yes is there a road map for things that",
    "start": "2594200",
    "end": "2599920"
  },
  {
    "text": "you really want to do with the besides get rid of them no no",
    "start": "2599920",
    "end": "2605880"
  },
  {
    "text": "I'm just kidding I actually very impressed by macros I think they've made an amazing progress um you're talking",
    "start": "2605880",
    "end": "2611559"
  },
  {
    "text": "about features for macros well I mean is it just a cool tool or is it something that you know you have a whole list of",
    "start": "2611559",
    "end": "2617839"
  },
  {
    "text": "things that you do with macros typ saave isn't working on Macros um so it's all epfl um that's doing the heart work",
    "start": "2617839",
    "end": "2624800"
  },
  {
    "text": "we're using them um as a nicer way to write compiler plugins like the Scala acing stuff that we've done is a really",
    "start": "2624800",
    "end": "2631200"
  },
  {
    "text": "nice macro you should have a look at it if you're interested in really Advanced compiler plugin as macro thing does an",
    "start": "2631200",
    "end": "2637359"
  },
  {
    "text": "ANF transform and then does a whole state machine translation it's a lot of really cool computer science in there uh",
    "start": "2637359",
    "end": "2644160"
  },
  {
    "text": "and thank God we didn't have to write the macro machinery for it first because ifil the de for us um I don't really",
    "start": "2644160",
    "end": "2649920"
  },
  {
    "text": "foresee types saafe getting closely involved in macro development but we we are constantly working with epfl to make",
    "start": "2649920",
    "end": "2656880"
  },
  {
    "text": "sure that they they're able to do their work um you know get the pqu through and so on that most of the work that they're",
    "start": "2656880",
    "end": "2663559"
  },
  {
    "text": "doing is actually done ironically as a compiler plugin uh the macro Paradise compiler plugin that is kind of the",
    "start": "2663559",
    "end": "2669040"
  },
  {
    "text": "incubator for next next Generation macro apis like macro annotations and type macros and unyp macros and all that",
    "start": "2669040",
    "end": "2675440"
  },
  {
    "text": "crazy stuff um you can use that in the 210 compiler and he's tracking 211",
    "start": "2675440",
    "end": "2680520"
  },
  {
    "text": "Milestones as well um as far as that ending up in a real",
    "start": "2680520",
    "end": "2686040"
  },
  {
    "text": "release next question I don't know I mean it'll depend if we can get it really stable and I think our first",
    "start": "2686040",
    "end": "2692040"
  },
  {
    "text": "priority is going to be blackbox macros get those nice and solid good API documentation",
    "start": "2692040",
    "end": "2698040"
  },
  {
    "text": "tool support and then we'll talk about the next level ad okay um I think I'm almost done with",
    "start": "2698040",
    "end": "2706000"
  },
  {
    "text": "my slides actually um I just quickly wanted to tell you something about 211 um that's actually what that's my day",
    "start": "2706000",
    "end": "2712079"
  },
  {
    "text": "job now um so we slim down the library we're working on speeding up the compiler it's not we can't do Miracles",
    "start": "2712079",
    "end": "2719000"
  },
  {
    "text": "but it'll be faster and we're slowing down the change which kind of goes back to my previous",
    "start": "2719000",
    "end": "2724240"
  },
  {
    "text": "question because we want scy to be stable and usable in prodction not the crazy language that it used to be when I started working on it um and everybody",
    "start": "2724240",
    "end": "2732160"
  },
  {
    "text": "wants this cpfl is aligned with this vision and happy to work on their plugins so we've pretty aggressively",
    "start": "2732160",
    "end": "2738920"
  },
  {
    "text": "deprecated I think this is the first scholar release where we've deprecated as much I don't have statistics unfortunately um modular is",
    "start": "2738920",
    "end": "2745520"
  },
  {
    "text": "the standard Library so now you can roll your own scy XML support if you want it the compiler isn't married to the one",
    "start": "2745520",
    "end": "2750559"
  },
  {
    "text": "that we have um continuations are outside now and that let us show shave",
    "start": "2750559",
    "end": "2756359"
  },
  {
    "text": "off about 20% a megabyte off of Scala library to our",
    "start": "2756359",
    "end": "2761599"
  },
  {
    "text": "size so the main features to me of 211 are better in compiler by Jos",
    "start": "2761599",
    "end": "2766800"
  },
  {
    "text": "kovski uh optimizing the compiler itself ton Z and on the epfl side uh Migel M",
    "start": "2766800",
    "end": "2774640"
  },
  {
    "text": "Garcia has been working on a better new uh ASM B code back end and",
    "start": "2774640",
    "end": "2780480"
  },
  {
    "text": "Optimizer um that's all going to be experimental so the nest Milestone is",
    "start": "2780480",
    "end": "2786280"
  },
  {
    "text": "coming up next year um please start testing your uh projects I think it's where reasonably stable a lot of uh",
    "start": "2786280",
    "end": "2793680"
  },
  {
    "text": "uptake already for a milestone anyway a lot of artifacts out there already and RC",
    "start": "2793680",
    "end": "2798800"
  },
  {
    "text": "mid-February so um time permitting happy to take more questions now or later thank",
    "start": "2798800",
    "end": "2804620"
  },
  {
    "text": "[Applause]",
    "start": "2804620",
    "end": "2810559"
  },
  {
    "text": "you I guess we can do one more I just have one right because it's allowed to change the result type of",
    "start": "2810559",
    "end": "2818119"
  },
  {
    "text": "the materializer so you need to uh generate different um as Tuple for",
    "start": "2818119",
    "end": "2824599"
  },
  {
    "text": "example person to pair string of int or S Tuple some other case class and so on",
    "start": "2824599",
    "end": "2831359"
  },
  {
    "text": "excuse me is it also able to detect that the Quasi quotes back that second",
    "start": "2831359",
    "end": "2837319"
  },
  {
    "text": "example no it's it's more like um Let me let me show you real quick",
    "start": "2837319",
    "end": "2843400"
  },
  {
    "text": "um so let me get my",
    "start": "2843400",
    "end": "2849400"
  },
  {
    "text": "bearings if this was a blackbox macro um well actually this runs a file of the",
    "start": "2849400",
    "end": "2855800"
  },
  {
    "text": "type inference restriction when calling materialized in for if it was a blackbox macro we' infer tnu",
    "start": "2855800",
    "end": "2863319"
  },
  {
    "text": "fully before uh expanding the macro and what that would mean is T is equal to",
    "start": "2863319",
    "end": "2868359"
  },
  {
    "text": "person and U becomes nothing because we don't know anything about it to do the actual inference we need to do the",
    "start": "2868359",
    "end": "2873880"
  },
  {
    "text": "expansion and see the tle that comes out here and then we do type infants of that compare that to you and that's how you",
    "start": "2873880",
    "end": "2880720"
  },
  {
    "text": "infer you but in order to do that you need to expand first we don't let blackbox do that excellent question thank you I",
    "start": "2880720",
    "end": "2887640"
  },
  {
    "text": "should have explained that right all right that's a great way to end a question I'll be around thanks",
    "start": "2887640",
    "end": "2895980"
  },
  {
    "text": "[Applause]",
    "start": "2895980",
    "end": "2901859"
  }
]