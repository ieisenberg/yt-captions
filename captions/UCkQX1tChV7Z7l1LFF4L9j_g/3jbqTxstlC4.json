[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "19680"
  },
  {
    "text": "awesome so I have 25 minutes uh technically 30 but I know there's going",
    "start": "19680",
    "end": "26160"
  },
  {
    "text": "to be some questions so gonna do this fast so if uh I talk too fast somebody",
    "start": "26160",
    "end": "32119"
  },
  {
    "text": "could do some gesture or something uh I hope this will be uh this will be a ride",
    "start": "32119",
    "end": "37760"
  },
  {
    "text": "for you so uh I'm Victor Kang uh I work for typ safe anybody know who I am then",
    "start": "37760",
    "end": "45160"
  },
  {
    "text": "I don't need to do my bio yeah that's nice I'm the teaka and I'm going to talk to you about",
    "start": "45160",
    "end": "52160"
  },
  {
    "start": "48000",
    "end": "107000"
  },
  {
    "text": "scaling up and out with actors today uh but technically I'm going to talk about akuro because we released it earlier",
    "start": "52160",
    "end": "58840"
  },
  {
    "text": "this week so I'm might as well just upgrade things a bit so um AA comes from",
    "start": "58840",
    "end": "65560"
  },
  {
    "text": "uh the Sami language uh and it's the goddess of wisdom and and and and all",
    "start": "65560",
    "end": "71240"
  },
  {
    "text": "the good things in the world also happens to be a bad word in",
    "start": "71240",
    "end": "76479"
  },
  {
    "text": "Finnish um and that's the view from the summit so it's it's pretty",
    "start": "77040",
    "end": "82320"
  },
  {
    "text": "awesome so uh in case you didn't know the problem that really led us to to",
    "start": "82320",
    "end": "88520"
  },
  {
    "text": "build ARA was that it's it was just way too hard to build correct highly concurrent systems and to make truly",
    "start": "88520",
    "end": "96000"
  },
  {
    "text": "scalable systems and to actually make them fall tolerant and selfhealing without making everything feel like a",
    "start": "96000",
    "end": "101680"
  },
  {
    "text": "duct tape piece of junk so state-of-the-art tools right so the vision is to have",
    "start": "101680",
    "end": "109320"
  },
  {
    "start": "107000",
    "end": "180000"
  },
  {
    "text": "concurrency scalability and Fa tolerance made simpler it's easy to do it so how",
    "start": "109320",
    "end": "115159"
  },
  {
    "text": "do we do it well we want a manage system overload",
    "start": "115159",
    "end": "120360"
  },
  {
    "text": "because there's nothing as bad as you wanting to log onto your internet banking system because the stock market",
    "start": "120360",
    "end": "126399"
  },
  {
    "text": "crashed and everybody is just dying to get in there and nobody gets in there and we want to be able to scale",
    "start": "126399",
    "end": "133280"
  },
  {
    "text": "both up on one huge box or scale out on multiple boxes or even scale down so you",
    "start": "133280",
    "end": "139519"
  },
  {
    "text": "can run a on an Android phone or whatever so scaling in the sense of up and out and",
    "start": "139519",
    "end": "146720"
  },
  {
    "text": "elasticity and we want to replicate and distribute for fall tolerance because you can't really have fall tolerance",
    "start": "146800",
    "end": "152879"
  },
  {
    "text": "when you have a single single place of breakdown right",
    "start": "152879",
    "end": "158440"
  },
  {
    "text": "so this also leads it to be a good thing to have transparent load balancing because if you have a big system and you",
    "start": "158440",
    "end": "165800"
  },
  {
    "text": "want to be able to manage failure you want to be able to move things to where there is least traffic at the moment or",
    "start": "165800",
    "end": "172840"
  },
  {
    "text": "where there's more RAM available or more CPU",
    "start": "172840",
    "end": "177959"
  },
  {
    "text": "available so who uses AKO what is it good for and where can you use it so this is just",
    "start": "178360",
    "end": "184200"
  },
  {
    "text": "like a sample of things like a sample of of market segments or use cases but",
    "start": "184200",
    "end": "190000"
  },
  {
    "text": "mainly like Finance banking betting and gaming Telecom and TV Ecommerce",
    "start": "190000",
    "end": "196319"
  },
  {
    "text": "simulation social stuff which is essentially like a common denominator for where you have lots of transactions",
    "start": "196319",
    "end": "203120"
  },
  {
    "text": "happening and usually varying amounts of transactions so payday is probably going",
    "start": "203120",
    "end": "208159"
  },
  {
    "text": "to be more transactions at the bank or um I don't know social things pro",
    "start": "208159",
    "end": "215239"
  },
  {
    "text": "probably going to happen some some stuff at certain points of time so",
    "start": "215239",
    "end": "222640"
  },
  {
    "start": "220000",
    "end": "425000"
  },
  {
    "text": "AA um why did we make a 2.0 what what is it",
    "start": "222640",
    "end": "228200"
  },
  {
    "text": "and and what did guide us during the process of going from 1.x to 2.0 so to",
    "start": "228200",
    "end": "234280"
  },
  {
    "text": "really make a 2.0 you have to have some Vision on how you want to improve things",
    "start": "234280",
    "end": "239840"
  },
  {
    "text": "so one of our Visions was to design for distribution so if you design for distribution then in VM stuff becomes an",
    "start": "239840",
    "end": "247760"
  },
  {
    "text": "optimization opportunity so if you build it or designed it for distribution it's way",
    "start": "247760",
    "end": "254319"
  },
  {
    "text": "easier to do distributed computing and then optimize when things are",
    "start": "254319",
    "end": "259639"
  },
  {
    "text": "local we also wanted to take asynchronicity at heart which means even in the control things so creating things",
    "start": "259639",
    "end": "267040"
  },
  {
    "text": "destroying things because when you make it asynchron a heart it doesn't feel like some sort of hybrid thing that",
    "start": "267040",
    "end": "273160"
  },
  {
    "text": "works differently in different ways and it becomes really hard to reason about how it works so even for control things",
    "start": "273160",
    "end": "279680"
  },
  {
    "text": "you want things to be asynchronous locking and performance on",
    "start": "279680",
    "end": "286560"
  },
  {
    "text": "the jvm is really bad when you have contention uh so cass's mother and",
    "start": "286560",
    "end": "291720"
  },
  {
    "text": "cass's father so everything should be handled using like volatile reads and rights or or compare and swap",
    "start": "291720",
    "end": "298560"
  },
  {
    "text": "instructions this has led us to have zero locks in the hot path which the",
    "start": "298560",
    "end": "304360"
  },
  {
    "text": "difference in performance is astonishing also a problem with the w x",
    "start": "304360",
    "end": "311000"
  },
  {
    "text": "series was that fall torren was sort of a thing that you could choose the problem is that people normally don't",
    "start": "311000",
    "end": "316639"
  },
  {
    "text": "choose things they don't have to choose so you would write something and",
    "start": "316639",
    "end": "321680"
  },
  {
    "text": "then at the end it was like okay now we make it robust uh no you can't do that so we",
    "start": "321680",
    "end": "329280"
  },
  {
    "text": "want to have fall tolerance as the default so we introduced something called enforced parental supervision",
    "start": "329280",
    "end": "336120"
  },
  {
    "text": "which means that all actors have a parent and the parent is in charge of supervising the the",
    "start": "336120",
    "end": "342880"
  },
  {
    "text": "kid also one guiding vision is that there's always room for improvement so",
    "start": "343800",
    "end": "349360"
  },
  {
    "text": "simplify things refactor things replace things that that are bad there's always room for improvement of course you have",
    "start": "349360",
    "end": "355639"
  },
  {
    "text": "to pick and choose your fights but question everything and and try to see",
    "start": "355639",
    "end": "360720"
  },
  {
    "text": "what could be done better so would that be like a simple",
    "start": "360720",
    "end": "366560"
  },
  {
    "text": "version bump like one. three like yeah we just bumped the number and let's be over with it no technically we closed",
    "start": "366560",
    "end": "374360"
  },
  {
    "text": "700 tickets um we have changed over a",
    "start": "374360",
    "end": "379479"
  },
  {
    "text": "thousand files we've added approximately 100K lines of scolar code uh removed 57,000",
    "start": "379479",
    "end": "388400"
  },
  {
    "text": "lines so to get to like the scaling up and out",
    "start": "388400",
    "end": "394319"
  },
  {
    "text": "part of this presentation not making this like a list of new things added um how do you scale things up well AKA has",
    "start": "394319",
    "end": "402960"
  },
  {
    "text": "actors but it's only one tool in the toolbox so we have Futures we have data",
    "start": "402960",
    "end": "408160"
  },
  {
    "text": "flow we have uh typed actors we have agents but act actors is a good way of",
    "start": "408160",
    "end": "415199"
  },
  {
    "text": "scaling up so it's one tool in the toolbox but it's not necessarily the tool in the toolbox there are no golden",
    "start": "415199",
    "end": "422360"
  },
  {
    "text": "hammers not here anyway so in case you don't know what an",
    "start": "422360",
    "end": "427520"
  },
  {
    "start": "425000",
    "end": "496000"
  },
  {
    "text": "actor is I'm going to try to bring you up the speed within this within the time limit so uh how many of you know about",
    "start": "427520",
    "end": "435680"
  },
  {
    "text": "actors awesome so this will be like just refreshing you guys so an actor is just",
    "start": "435680",
    "end": "441400"
  },
  {
    "text": "an entity an encapsulation of some behavior and potentially some State and",
    "start": "441400",
    "end": "446879"
  },
  {
    "text": "it has a mailbox full with with messages and the the the the circles here are",
    "start": "446879",
    "end": "452160"
  },
  {
    "text": "messages so a thread gets allocated to the actor to take one message apply the behavior",
    "start": "452160",
    "end": "460720"
  },
  {
    "text": "of the actor to that message and then potentially updating some State creating",
    "start": "460720",
    "end": "466080"
  },
  {
    "text": "some new actors or sending messages to other actors or a combination of all of",
    "start": "466080",
    "end": "471479"
  },
  {
    "text": "those new messages can be added while this is happening concurrently since there is elasticity between the",
    "start": "471479",
    "end": "477680"
  },
  {
    "text": "processing of messages and the addition of new messages and then when the processing of",
    "start": "477680",
    "end": "483520"
  },
  {
    "text": "the message is done the thread gets deallocated from the actor and it can go on to process some other actor or even",
    "start": "483520",
    "end": "490960"
  },
  {
    "text": "go back to this actor to process the next message",
    "start": "490960",
    "end": "496599"
  },
  {
    "start": "496000",
    "end": "697000"
  },
  {
    "text": "so in akao we decided to take like remove all Global State there is no",
    "start": "496599",
    "end": "503039"
  },
  {
    "text": "Global State we want to be able to have multiple actor systems within one jvm without having to do all this nasty",
    "start": "503039",
    "end": "509759"
  },
  {
    "text": "class loader magic so we introduced something called an actor system which is the context of your actor",
    "start": "509759",
    "end": "517880"
  },
  {
    "text": "application so this is how we create it in in um in Scala you'll notice that it",
    "start": "517880",
    "end": "523599"
  },
  {
    "text": "will say Scala API everywhere because I filtered out the Java stuff because you're about as interested in that",
    "start": "523599",
    "end": "529839"
  },
  {
    "text": "as as no guy um no the thing is that the the the Java",
    "start": "529839",
    "end": "535640"
  },
  {
    "text": "API is really good uh sort of looks the similar as this uh but but we don't have time",
    "start": "535640",
    "end": "540720"
  },
  {
    "text": "today so what you do is that you specify a name for your actor system so what is",
    "start": "540720",
    "end": "546079"
  },
  {
    "text": "this what is the name of this actor system and then you can feed it an optional",
    "start": "546079",
    "end": "551200"
  },
  {
    "text": "configuration and this uses the the hocon library the type saave config Library um really nice embedded into",
    "start": "551200",
    "end": "559040"
  },
  {
    "text": "AA uh for your use uh all our defaults are in config files there are no default",
    "start": "559040",
    "end": "567399"
  },
  {
    "text": "inside code which means that if you want to you can override",
    "start": "567399",
    "end": "572440"
  },
  {
    "text": "anything um and we've tried to be really slick with choosing what goes into",
    "start": "572440",
    "end": "578040"
  },
  {
    "text": "configuration and what goes into code because it's really important that it doesn't become like a new thing where",
    "start": "578040",
    "end": "584680"
  },
  {
    "text": "you program in your configuration but you really want to have things that you would like to",
    "start": "584680",
    "end": "590320"
  },
  {
    "text": "change when you're deploying your application depending on what kind of Hardware you're deploying on or how you",
    "start": "590320",
    "end": "597000"
  },
  {
    "text": "have spread your logic out on a certain cluster of machines or whatever so things that you would like to change",
    "start": "597000",
    "end": "603120"
  },
  {
    "text": "when you have built the application should be changed in the config and not in the code make",
    "start": "603120",
    "end": "610480"
  },
  {
    "text": "sense so for for you that have used AA before this is very very similar like",
    "start": "611760",
    "end": "617800"
  },
  {
    "text": "line by line similar to AA 1.x and this is how you create an actor so you just extend the AA actor actor",
    "start": "617800",
    "end": "625440"
  },
  {
    "text": "thing and implement the receive method which is essentially just a partial function from any to",
    "start": "625440",
    "end": "631880"
  },
  {
    "text": "unit uh in this case we make an actor that just received tick messages update",
    "start": "631880",
    "end": "637519"
  },
  {
    "text": "some counter and print out the current value of the counter then to instantiate this actor",
    "start": "637519",
    "end": "645639"
  },
  {
    "text": "we have something called actor of and in 1X it was like a static Factory a global Factory now it's a property of the",
    "start": "645639",
    "end": "652360"
  },
  {
    "text": "system so this creates one instance of the counter actor in that system and",
    "start": "652360",
    "end": "659519"
  },
  {
    "text": "gives you a handle backback an actor reference and you can see the props thing there so an actor that doesn't",
    "start": "659519",
    "end": "666800"
  },
  {
    "text": "have any props is probably doing some sort of adult movies or something so an",
    "start": "666800",
    "end": "672320"
  },
  {
    "text": "actor in AA usually have props so this is like how you configure how this actor",
    "start": "672320",
    "end": "678040"
  },
  {
    "text": "should be created this is like the type of the actor what dispat it should use um there",
    "start": "678040",
    "end": "685079"
  },
  {
    "text": "is more configuration that we'll show later but this creates a top level actor and this is important because I'm going",
    "start": "685079",
    "end": "691959"
  },
  {
    "text": "to show you how the structure looks later when the actor is returned to you",
    "start": "691959",
    "end": "699040"
  },
  {
    "start": "697000",
    "end": "766000"
  },
  {
    "text": "it's already started or it's going to be started asynchronously so you send it messages and it will process those",
    "start": "699040",
    "end": "704560"
  },
  {
    "text": "messages after it has started you can also stop your actor and you just do",
    "start": "704560",
    "end": "709800"
  },
  {
    "text": "system stop and the reference of the actor and then the actor will be stopped asynchronously so you won't do any",
    "start": "709800",
    "end": "715240"
  },
  {
    "text": "blocking there either but it will also stop all these children so you can essentially",
    "start": "715240",
    "end": "720480"
  },
  {
    "text": "eliminate a sub Tree in your application so sending messages still",
    "start": "720480",
    "end": "727959"
  },
  {
    "text": "looks quite a bit the same so bang uh this is blatantly stoling from",
    "start": "727959",
    "end": "733760"
  },
  {
    "text": "llang uh it's the asynchronous send operation so it's just fire and forget uh move on uh it's like the tail pattern",
    "start": "733760",
    "end": "743880"
  },
  {
    "text": "so we have given you an alphabetic name for it as well for those those of you",
    "start": "743880",
    "end": "749240"
  },
  {
    "text": "who do not like symbols uh and it's a bit easier to use also when you want to explicitly say who",
    "start": "749240",
    "end": "756600"
  },
  {
    "text": "is the center of the message um and the Java API essentially",
    "start": "756600",
    "end": "762240"
  },
  {
    "text": "looks the same we have removed bang bang and bang",
    "start": "762240",
    "end": "770320"
  },
  {
    "text": "bang bang uh because at the end it sort of got silly right",
    "start": "770320",
    "end": "776959"
  },
  {
    "text": "uh so we only have have tell and this is ask but it also has the name of the",
    "start": "776959",
    "end": "782760"
  },
  {
    "text": "question mark so it's essentially a request reply pattern so you send an actor a message and then get a future",
    "start": "782760",
    "end": "789959"
  },
  {
    "text": "back with the response to this to this message um should be used with caution",
    "start": "789959",
    "end": "796399"
  },
  {
    "text": "because if you use this everywhere sort of get an RPC style",
    "start": "796399",
    "end": "803760"
  },
  {
    "text": "application um but you could also use ask like like this if you want to do",
    "start": "804800",
    "end": "810320"
  },
  {
    "text": "that it's sort of pimped on because we've added it to the AA patterns um this kind of reads better at",
    "start": "810320",
    "end": "818320"
  },
  {
    "text": "times when you want to spec specify different timeouts for these",
    "start": "818320",
    "end": "823560"
  },
  {
    "text": "things all right so in 1.x reply was like there was probably like three or",
    "start": "823680",
    "end": "829440"
  },
  {
    "text": "four different way to do replies getting channels out getting sender future options and sender options and now you",
    "start": "829440",
    "end": "835759"
  },
  {
    "text": "have sender uh that's that's it you have sender and you can send it messages it's",
    "start": "835759",
    "end": "840959"
  },
  {
    "text": "an actor so even if you used ask you have an actor representing that endpoint",
    "start": "840959",
    "end": "848320"
  },
  {
    "text": "that will get the response back we also still have the become",
    "start": "848320",
    "end": "854720"
  },
  {
    "text": "operation to have the actor change behavior and we have the Java API for",
    "start": "854720",
    "end": "860839"
  },
  {
    "text": "that which looks a bit more uh uh interesting unbecome to swap back to",
    "start": "860839",
    "end": "868920"
  },
  {
    "text": "previous uh behaviors because it's a behavior stack so you can choose when you replace your behavior you can stack",
    "start": "868920",
    "end": "875720"
  },
  {
    "text": "the new Behavior or you can just replace the behavior so you can also unbecome in",
    "start": "875720",
    "end": "881839"
  },
  {
    "text": "the stack a new thing in 2.0 is something",
    "start": "881839",
    "end": "888600"
  },
  {
    "start": "885000",
    "end": "939000"
  },
  {
    "text": "called routers and they essentially replace actor pools and load",
    "start": "888600",
    "end": "894000"
  },
  {
    "text": "balancers so we have round robing routers so it will when when you send a",
    "start": "894000",
    "end": "899160"
  },
  {
    "text": "message to a router it will just round robin over the children uh bypassing the",
    "start": "899160",
    "end": "904240"
  },
  {
    "text": "the mailbox of the router to have it highperformance thing so it doesn't go through one serialization endpoint we",
    "start": "904240",
    "end": "910360"
  },
  {
    "text": "have the random router which just sends to one random child smallest mailbox if you want to make sure that the the the",
    "start": "910360",
    "end": "916880"
  },
  {
    "text": "guy with least work queue it up gets the message there's broadcast if you want to send to all",
    "start": "916880",
    "end": "922480"
  },
  {
    "text": "children uh there's scatter G first completed which is essentially saying send to all your kids and the first guy",
    "start": "922480",
    "end": "929120"
  },
  {
    "text": "who responds give me the result there so it's good if you you have set up some sort of cluster and you want to have a",
    "start": "929120",
    "end": "934639"
  },
  {
    "text": "result of a quer and whoever responds first uh wins um you can also Implement",
    "start": "934639",
    "end": "940399"
  },
  {
    "text": "your own custom routers if you have like some special special",
    "start": "940399",
    "end": "945880"
  },
  {
    "text": "needs um and the way you use it is that you have your props as we talked about earlier you say with router you specify",
    "start": "945880",
    "end": "952720"
  },
  {
    "text": "your router and then you specify the configuration for that router and that's all and then you get an act back that",
    "start": "952720",
    "end": "959040"
  },
  {
    "text": "represents this thing abstracts over some actors five of them and it will",
    "start": "959040",
    "end": "964600"
  },
  {
    "text": "round R in over them you can also combine them with",
    "start": "964600",
    "end": "969800"
  },
  {
    "text": "resizes and we have one default implemented so you have the actpol the elasticity of the children so you can",
    "start": "969800",
    "end": "975440"
  },
  {
    "text": "grow and Shrink on demand and the way you do that is that you just specify a resizer to your round robing router or",
    "start": "975440",
    "end": "982399"
  },
  {
    "text": "whatever router you use",
    "start": "982399",
    "end": "987519"
  },
  {
    "text": "Simple so scaling up how does this scale up",
    "start": "987519",
    "end": "992839"
  },
  {
    "text": "well we uh did some performance benchmarks because we were using threadpool executor under the hood to",
    "start": "992839",
    "end": "998399"
  },
  {
    "text": "execute things and sort of a pattern emerges after after some messages there",
    "start": "998399",
    "end": "1004959"
  },
  {
    "text": "can you see the pattern uh that's not the scaleup",
    "start": "1004959",
    "end": "1011040"
  },
  {
    "text": "pattern uh so we scratched our heads and we uh we we elicited some advice from",
    "start": "1011040",
    "end": "1016639"
  },
  {
    "text": "from some people and uh we had a look and we saw that's an",
    "start": "1016639",
    "end": "1021880"
  },
  {
    "text": "incredible amount of context switches that's extreme that's essentially just thrashing your your",
    "start": "1021880",
    "end": "1028199"
  },
  {
    "text": "machine so we elicited the help of Doug Lee you might know him uh to improve the",
    "start": "1028199",
    "end": "1034558"
  },
  {
    "text": "fork joint pool for for Java 8 uh to be more scalable so this is the",
    "start": "1034559",
    "end": "1040240"
  },
  {
    "text": "results we had on our 48 core box compared to the threadpool",
    "start": "1040240",
    "end": "1045480"
  },
  {
    "text": "executor quite a big difference and uh Java 7 or Java it it it will probably be",
    "start": "1045480",
    "end": "1052919"
  },
  {
    "text": "in Java 8 but it's available from the jsr 166 y package but we've embedded",
    "start": "1052919",
    "end": "1058360"
  },
  {
    "text": "that into AKA so it's the default executor so around 20 million messages",
    "start": "1058360",
    "end": "1063880"
  },
  {
    "text": "on that 4g8 core box it will definitely uh be different how you use it uh what",
    "start": "1063880",
    "end": "1069120"
  },
  {
    "text": "type of messages and what the processing overhead is and whatever but it's still way better than the threadpool",
    "start": "1069120",
    "end": "1077400"
  },
  {
    "text": "executor and it looks way better in the context switch",
    "start": "1077400",
    "end": "1083039"
  },
  {
    "text": "departmentally so yeah so the question is whether this measurement is only for the message passing not for actual work",
    "start": "1090559",
    "end": "1096799"
  },
  {
    "start": "1091000",
    "end": "1110000"
  },
  {
    "text": "so yes it's only for message passing because otherwise we would just measure some adder in the CPU or whatever uh a",
    "start": "1096799",
    "end": "1103679"
  },
  {
    "text": "very very bad use case yeah it's a very bad use case it just measures what AKA can do",
    "start": "1103679",
    "end": "1110320"
  },
  {
    "start": "1110000",
    "end": "1254000"
  },
  {
    "text": "uh We've optimized things a bit so an actor is around 400 bytes so essentially",
    "start": "1110600",
    "end": "1116159"
  },
  {
    "text": "2.7 million actors per gigabyte of heap of course you will have to add extra memory for messages on top of that but",
    "start": "1116159",
    "end": "1123720"
  },
  {
    "text": "says how how many actors you can use uh now we come to the fall tolerance",
    "start": "1123720",
    "end": "1129919"
  },
  {
    "text": "part of the presentation and we have uh approach this from a leted crash perspective and that comes from ear",
    "start": "1129919",
    "end": "1137120"
  },
  {
    "text": "langang and essentially means that you shouldn't try to prevent things from going wrong you should only have good",
    "start": "1137120",
    "end": "1143120"
  },
  {
    "text": "decent procedures to handle failures so in a normal application o",
    "start": "1143120",
    "end": "1149280"
  },
  {
    "text": "applications you would like okay if I look at this applications which parts have critical important state and",
    "start": "1149280",
    "end": "1155200"
  },
  {
    "text": "explicit error handling and it usually looks really really bad because it's just scattered across all these objects",
    "start": "1155200",
    "end": "1160960"
  },
  {
    "text": "in this graph and there is no real order or responsibility here so there's",
    "start": "1160960",
    "end": "1166480"
  },
  {
    "text": "something called the error kernel pattern it's essentially like an onion so you have the core part that you need",
    "start": "1166480",
    "end": "1172600"
  },
  {
    "text": "to protect and then you have layers on top of that so if things go wrong at the very core then your application is host",
    "start": "1172600",
    "end": "1180200"
  },
  {
    "text": "anyway so you add layers of protection around the core and what what that means with",
    "start": "1180200",
    "end": "1186600"
  },
  {
    "text": "actors is you have actors being parents of other actors and supervisors for",
    "start": "1186600",
    "end": "1192080"
  },
  {
    "text": "other actors and they spawn children underneath to delegate the risk to somebody who is Expendable so",
    "start": "1192080",
    "end": "1200240"
  },
  {
    "text": "so if your kid if your kid sort of messes up it will signal its parent and",
    "start": "1200320",
    "end": "1206840"
  },
  {
    "text": "the parent will decide what happens to the kid",
    "start": "1206840",
    "end": "1213840"
  },
  {
    "text": "right uh you can also have so that when a kid fails it notifies the parent and",
    "start": "1213840",
    "end": "1220320"
  },
  {
    "text": "the parent can decide to say that all my kids they have some implicit thing that they have in common so they have to all",
    "start": "1220320",
    "end": "1227080"
  },
  {
    "text": "be restarted if something goes wrong they're they're couple in some way and",
    "start": "1227080",
    "end": "1232440"
  },
  {
    "text": "you can also escalate problems so the middle manager doesn't know what to do",
    "start": "1232440",
    "end": "1238640"
  },
  {
    "text": "so he fails and he escalates to his manager and his manager decides to just recreate whatever was",
    "start": "1238640",
    "end": "1245039"
  },
  {
    "text": "underneath so unless failures escalate to the actual kernel of the system you",
    "start": "1245039",
    "end": "1250520"
  },
  {
    "text": "can always deal with them so how do we do this in AA so we",
    "start": "1250520",
    "end": "1256960"
  },
  {
    "start": "1254000",
    "end": "1382000"
  },
  {
    "text": "have the parental aut aut atic Supervision in your actor you have access something called context and your",
    "start": "1256960",
    "end": "1263400"
  },
  {
    "text": "context can also create actors which essentially means create a child for me",
    "start": "1263400",
    "end": "1269120"
  },
  {
    "text": "so system actor of is create a top level actor EX in the error kernel and this is",
    "start": "1269120",
    "end": "1274880"
  },
  {
    "text": "create a child for me and you see the name afterwards this is the name of my kid I have to name my",
    "start": "1274880",
    "end": "1280640"
  },
  {
    "text": "kid otherwise AKA will name it for you and it won't be",
    "start": "1280640",
    "end": "1285720"
  },
  {
    "text": "pretty and also we've removed uu IDs from any output because uu IDs are horrible in output so only names and",
    "start": "1286000",
    "end": "1295080"
  },
  {
    "text": "paths so this parental automatic super supervision means that you have a top",
    "start": "1295080",
    "end": "1300960"
  },
  {
    "text": "level actor that's the guardian the system Guardian for this system and when you create a top level actor that will",
    "start": "1300960",
    "end": "1307559"
  },
  {
    "text": "be created underneath the guardian so you create a foo and he goes underneath the guardian and he creates a child",
    "start": "1307559",
    "end": "1313960"
  },
  {
    "text": "named a underneath him and he creates other Childs and",
    "start": "1313960",
    "end": "1319039"
  },
  {
    "text": "other children and do you see what this looks like looks like a tree",
    "start": "1319039",
    "end": "1326279"
  },
  {
    "text": "right so when you have a tree you have this really interesting thing in computer science called",
    "start": "1326279",
    "end": "1332480"
  },
  {
    "text": "path where you can like get to things through paths and we thought that was a",
    "start": "1332480",
    "end": "1338000"
  },
  {
    "text": "really smart thing so when you look up actors you do it by path so you can really reuse what you're",
    "start": "1338000",
    "end": "1345039"
  },
  {
    "text": "used to when you work with computers uh from the system level you can just look an actor up or within an actor itself",
    "start": "1345039",
    "end": "1353480"
  },
  {
    "text": "you can do relative lookups who is my parent I want to go to this who is my",
    "start": "1353480",
    "end": "1360039"
  },
  {
    "text": "sibling and you can also get to the actual path of the",
    "start": "1360039",
    "end": "1364960"
  },
  {
    "text": "actor this also means that we can do some really interesting things like doing selections on top of the tree so I",
    "start": "1365200",
    "end": "1371720"
  },
  {
    "text": "want to have something that represents all things under services and when I send it this message",
    "start": "1371720",
    "end": "1377559"
  },
  {
    "text": "it will go to all of them so for the supervision like how",
    "start": "1377559",
    "end": "1384799"
  },
  {
    "start": "1382000",
    "end": "1547000"
  },
  {
    "text": "does the parent decide what to do the kid so there are two different things that one for one strategy and all for",
    "start": "1384799",
    "end": "1390320"
  },
  {
    "text": "one which essentially means do all the kids suffer when one has done something wrong or is it just the kid itself and",
    "start": "1390320",
    "end": "1397679"
  },
  {
    "text": "this is the uh how you define like how it will handle failures so in this case",
    "start": "1397679",
    "end": "1403039"
  },
  {
    "text": "whenever a child has the actor kill exception you will stop it uh if there an arithmetic exception I will just",
    "start": "1403039",
    "end": "1409919"
  },
  {
    "text": "resume the actor because if he divided by Z bad guy but he can probably do",
    "start": "1409919",
    "end": "1415840"
  },
  {
    "text": "something else you can also decide to restart him which will essentially recreate him and repopulate him so",
    "start": "1415840",
    "end": "1423320"
  },
  {
    "text": "something could have gone wrong within him we need to create a new one of him and restart him or you can escalate to",
    "start": "1423320",
    "end": "1429120"
  },
  {
    "text": "say okay I don't know how to handle this uh let my parent decide yes does his",
    "start": "1429120",
    "end": "1435000"
  },
  {
    "text": "message CU get flushed no all the messages in the the mailbox are retained in",
    "start": "1435000",
    "end": "1440679"
  },
  {
    "text": "restart so if you're on multiple jvms the the supervisor de across them or uh",
    "start": "1440679",
    "end": "1448440"
  },
  {
    "text": "we can talk about that afterwards yeah I don't have it in the slides",
    "start": "1448440",
    "end": "1455279"
  },
  {
    "text": "um so uh and to switch between them it's fairly simple to just replace the",
    "start": "1455400",
    "end": "1461120"
  },
  {
    "text": "wording you can also specify like how many number of times it will actually try to do something about it uh and also",
    "start": "1461120",
    "end": "1468240"
  },
  {
    "text": "like the time window that things can occur within So within the first failure",
    "start": "1468240",
    "end": "1473679"
  },
  {
    "text": "like with within 5 minutes after the first failure I will accept you to restart 10 times if that if things go",
    "start": "1473679",
    "end": "1480159"
  },
  {
    "text": "wrong more than that something is terribly wrong and I want you to escalate this um and within restart you have two",
    "start": "1480159",
    "end": "1488880"
  },
  {
    "text": "hooks that you had back in the 1X series pre- restart is called on the old actor",
    "start": "1488880",
    "end": "1494080"
  },
  {
    "text": "and post restart is cre is called on the new one which thread are these method",
    "start": "1494080",
    "end": "1499640"
  },
  {
    "text": "called on uh so the question is which thread the the these messages are called on these are called on the actual",
    "start": "1499640",
    "end": "1506440"
  },
  {
    "text": "dispatcher so whatever dispatcher the the the guy is using so it it will",
    "start": "1506440",
    "end": "1512559"
  },
  {
    "text": "depend on how you configure up we have something new in akuro which is called death watch uh and since",
    "start": "1512559",
    "end": "1520200"
  },
  {
    "text": "supervision is only once you can only have one parent and the parent supervises but you want to be able to observe when somebody else dies so so if",
    "start": "1520200",
    "end": "1528880"
  },
  {
    "text": "if Buddy dies I want to know and you will get a terminated message with the",
    "start": "1528880",
    "end": "1534080"
  },
  {
    "text": "ref that died so then you can match here say if it was exactly buddy then I will",
    "start": "1534080",
    "end": "1539320"
  },
  {
    "text": "do this you can also unwatch to say that I'm no longer interested in buddy because he's a douche or",
    "start": "1539320",
    "end": "1546279"
  },
  {
    "text": "something so scaling out in five minutes uh we have new remote actors so sending",
    "start": "1546279",
    "end": "1553840"
  },
  {
    "start": "1547000",
    "end": "1697000"
  },
  {
    "text": "messages to actors that recite on other machines uh",
    "start": "1553840",
    "end": "1559080"
  },
  {
    "text": "this looks the same as before like we just created an actor with a name your code is agnostic to whatever like how it",
    "start": "1559080",
    "end": "1567080"
  },
  {
    "text": "is deployed so the actor name is virtual and it's decoupled from how it is",
    "start": "1567080",
    "end": "1572120"
  },
  {
    "text": "deployed if you don't have any configuration for a path or for a name then it just assumed to be",
    "start": "1572120",
    "end": "1579799"
  },
  {
    "text": "local so you can have the same system the same code deployed differently",
    "start": "1579799",
    "end": "1585399"
  },
  {
    "text": "depending on how you want to deploy it so you write your application as if it",
    "start": "1585399",
    "end": "1591640"
  },
  {
    "text": "were local and then you can deploy it like distribute",
    "start": "1591640",
    "end": "1597320"
  },
  {
    "text": "it this also will allow us in the future releases to dynamically and change the",
    "start": "1597919",
    "end": "1603440"
  },
  {
    "text": "typ the topology of your system to scale up and out on demand and this looks like this in the",
    "start": "1603440",
    "end": "1611080"
  },
  {
    "text": "configuration um this path has this configuration I want it to be have a be",
    "start": "1611080",
    "end": "1616440"
  },
  {
    "text": "a round robing router it will have three instances and I want them to be created on these",
    "start": "1616440",
    "end": "1621520"
  },
  {
    "text": "nodes in my topology this also means that you can",
    "start": "1621520",
    "end": "1628200"
  },
  {
    "text": "have remote supervision so one sub tree is on one machine and another sub tree",
    "start": "1628200",
    "end": "1634520"
  },
  {
    "text": "is on another machine and some more news in the two",
    "start": "1634520",
    "end": "1640919"
  },
  {
    "text": "those stuff is that we have an event bus API for making it dead simple to do Pub sub uh there is something called an",
    "start": "1640919",
    "end": "1647159"
  },
  {
    "text": "event stream within your system that is the the fire hose of your application you can publish messages to the event",
    "start": "1647159",
    "end": "1652799"
  },
  {
    "text": "stream and other actors can listen to the event stream if you want to decouple your actors from each other so that they",
    "start": "1652799",
    "end": "1658240"
  },
  {
    "text": "do not need to know about each other we have extensions you can extend AKA itself uh typed actors for example is an",
    "start": "1658240",
    "end": "1665840"
  },
  {
    "text": "a extension the serialization used for remoting is an extension uh essentially there is no limit in how you can",
    "start": "1665840",
    "end": "1672559"
  },
  {
    "text": "customize your o application ad functionality uh we have replaced uh the",
    "start": "1672559",
    "end": "1678080"
  },
  {
    "text": "use of stdm to the scull stdm so it's like a like an API standard so you can use whatever implementation that",
    "start": "1678080",
    "end": "1683880"
  },
  {
    "text": "implements scull stdm and we have reimplemented typed actors to use jdk Proxes instead of",
    "start": "1683880",
    "end": "1690159"
  },
  {
    "text": "weaving so there is they they are now in the AA actor jar there is no ex external",
    "start": "1690159",
    "end": "1695760"
  },
  {
    "text": "dependencies and they just work so what's happening after 2.0 so what we",
    "start": "1695760",
    "end": "1701519"
  },
  {
    "start": "1697000",
    "end": "2068000"
  },
  {
    "text": "want to release as soon as possible is our camel module and our amqp module and",
    "start": "1701519",
    "end": "1707480"
  },
  {
    "text": "our spring module uh we're going to wait until they are ready but they will hopefully be ready within a month or two",
    "start": "1707480",
    "end": "1714320"
  },
  {
    "text": "so that is what happening in 2.0 whatever they will probably be back relased to 2.0 so it was as if they were",
    "start": "1714320",
    "end": "1721840"
  },
  {
    "text": "there the entire time uh because they don't need any changes in AA itself they are extensions as well uh this is where",
    "start": "1721840",
    "end": "1730559"
  },
  {
    "text": "we're at we have a brand new website at AKA IO check it out uh check out typesafe decom and uh that's it for me",
    "start": "1730559",
    "end": "1738440"
  },
  {
    "text": "thank",
    "start": "1738440",
    "end": "1740600"
  },
  {
    "text": "you so you have six minutes for questions just awesome awesome yeah so",
    "start": "1746320",
    "end": "1751519"
  },
  {
    "text": "the question is in a multimachine environment how will AKA help me if I lose a machine so in in akao we don't do",
    "start": "1751519",
    "end": "1759519"
  },
  {
    "text": "any sort of trying to find out which node failed how because it's really hard",
    "start": "1759519",
    "end": "1764880"
  },
  {
    "text": "but in TI one we're going to have a brand new cluster which is based on uh on the Dynamo paper",
    "start": "1764880",
    "end": "1770399"
  },
  {
    "text": "on some thoughts behind react but we have adopted it because clustering is normally just trying to Cluster data and",
    "start": "1770399",
    "end": "1777200"
  },
  {
    "text": "we're trying to Cluster live objects here so there's going to be some differences but then we have a much",
    "start": "1777200",
    "end": "1783120"
  },
  {
    "text": "easier way to have consensus on failure because is it just not responding to you",
    "start": "1783120",
    "end": "1789360"
  },
  {
    "text": "is it responding to everybody but one or is there some other problem so that we will address in the 21 release when we",
    "start": "1789360",
    "end": "1795480"
  },
  {
    "text": "have a bigger picture of what's failing because if you only use remoting you have machines connected to each other",
    "start": "1795480",
    "end": "1802000"
  },
  {
    "text": "and then that's a nice Applause for that um",
    "start": "1802000",
    "end": "1807200"
  },
  {
    "text": "and and then it's it's hard to know like he is communicating with him but not me",
    "start": "1807200",
    "end": "1812559"
  },
  {
    "text": "anymore what happens if he sends a me message to him and then a message to me there is no consensus on who is alive or",
    "start": "1812559",
    "end": "1819080"
  },
  {
    "text": "dead yeah so so the question is if typ safe is going to have like a platform as a service collaboration with with some",
    "start": "1819080",
    "end": "1826039"
  },
  {
    "text": "of the I don't know it's it's time will tell it will be really",
    "start": "1826039",
    "end": "1832640"
  },
  {
    "text": "cool to see like ad hoc scaling of O applications absolutely okay so the question is when you're starting with AA",
    "start": "1832640",
    "end": "1839559"
  },
  {
    "text": "how do you choose between typed actors and untyped act actors so typed actors",
    "start": "1839559",
    "end": "1844880"
  },
  {
    "text": "see them like a doorway between normal request Response Code and asynchronous",
    "start": "1844880",
    "end": "1850320"
  },
  {
    "text": "code so they're more intended to be like the the interface between different",
    "start": "1850320",
    "end": "1856600"
  },
  {
    "text": "different uh kind of paradigms of programming I would try to avoid type actors because it",
    "start": "1856600",
    "end": "1863559"
  },
  {
    "text": "easily becomes you you try to have the same thinking but you're doing something completely different so they don't",
    "start": "1863559",
    "end": "1869960"
  },
  {
    "text": "really harmonize so pick and choose where it makes sense to have a static interface and always try to either have",
    "start": "1869960",
    "end": "1876200"
  },
  {
    "text": "like a void return type or return a future because that means you're not doing any blocking you're just",
    "start": "1876200",
    "end": "1881440"
  },
  {
    "text": "forwarding stuff uh so try to see if it makes sense to use typed actors or or",
    "start": "1881440",
    "end": "1887600"
  },
  {
    "text": "just go for untyped actors immediately so what so the question is what happened to the osgi support",
    "start": "1887600",
    "end": "1894200"
  },
  {
    "text": "um the thing is that osgi is something that you have to like continually test",
    "start": "1894200",
    "end": "1899880"
  },
  {
    "text": "and run and there hasn't been really that interested there hasn't been any parties that wanted to use OGG during",
    "start": "1899880",
    "end": "1907000"
  },
  {
    "text": "the test phase that really it didn't really make sense then",
    "start": "1907000",
    "end": "1912120"
  },
  {
    "text": "um also the AKA actor jar itself is really tiny so if you want to just deploy the AA actor jar I'm I'm sure",
    "start": "1912120",
    "end": "1918960"
  },
  {
    "text": "it's just like two or three lines of configuration to just use that bundle",
    "start": "1918960",
    "end": "1924240"
  },
  {
    "text": "could be harder because we're using sunk unsafe for example",
    "start": "1924240",
    "end": "1930039"
  },
  {
    "text": "um you will have to do some some stuff is really hard to do in an osdi World um",
    "start": "1930039",
    "end": "1936840"
  },
  {
    "text": "so hopefully it will be there I don't know if there is enough interest there will probably be there yes uh so the",
    "start": "1936840",
    "end": "1945279"
  },
  {
    "text": "question is if we have Benchmark on different JV M um technically yes but formally no uh we run on different",
    "start": "1945279",
    "end": "1952159"
  },
  {
    "text": "machines uh with different versions of jdks and uh for example the 48 core box",
    "start": "1952159",
    "end": "1957480"
  },
  {
    "text": "is running on Linux um so we do Benchmark testing but we don't really",
    "start": "1957480",
    "end": "1963080"
  },
  {
    "text": "have like a formal setup where we have like the exact same Hardware different operating systems because it's it's uh",
    "start": "1963080",
    "end": "1970760"
  },
  {
    "text": "way much overhead um but it it's always I I would love to see numbers so if you",
    "start": "1970760",
    "end": "1975840"
  },
  {
    "text": "guys put up numbers I'd love to see them yeah Al the question is if there is like buil-in support for versioning in AA so",
    "start": "1975840",
    "end": "1983080"
  },
  {
    "text": "you can have different versions of messages or actors when so so the thing is that for uh the",
    "start": "1983080",
    "end": "1990760"
  },
  {
    "text": "typ safe subscription you have the the atmos monitoring for your for a application and we also want to support",
    "start": "1990760",
    "end": "1997760"
  },
  {
    "text": "provisioning so you can roll out new releases uh technically you don't want to do that with with a live system you",
    "start": "1997760",
    "end": "2003679"
  },
  {
    "text": "always want to create some new nodes and take some notes down um because it's always sort of hard to do a compare and",
    "start": "2003679",
    "end": "2010120"
  },
  {
    "text": "swap on life code um but that's definitely something we're working",
    "start": "2010120",
    "end": "2015639"
  },
  {
    "text": "on okay so the question is uh if AA is mostly geared towards stateful architectures and how it handles",
    "start": "2015639",
    "end": "2022679"
  },
  {
    "text": "stateless architectures so there's nothing really that says that an actor needs to have internal state but since",
    "start": "2022679",
    "end": "2029440"
  },
  {
    "text": "you have messages you have state already and since you're sending and receiving messages you're actually side effecting",
    "start": "2029440",
    "end": "2034960"
  },
  {
    "text": "and you're actually sending States somewhere or receiving state from somewhere so you can do completely",
    "start": "2034960",
    "end": "2040840"
  },
  {
    "text": "stateless actors and just have your state in your messages and have your messages be on some some storage",
    "start": "2040840",
    "end": "2046440"
  },
  {
    "text": "somewhere so there is there is really no need to have stateful actors if you don't want to or whatever the",
    "start": "2046440",
    "end": "2053480"
  },
  {
    "text": "requirements are so yeah thank [Applause]",
    "start": "2053480",
    "end": "2062009"
  },
  {
    "text": "[Music] you [Music]",
    "start": "2062380",
    "end": "2069999"
  }
]