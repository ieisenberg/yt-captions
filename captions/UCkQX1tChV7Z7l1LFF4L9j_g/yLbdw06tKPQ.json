[
  {
    "start": "0",
    "end": "160000"
  },
  {
    "text": "thank you for you for having me do the keynote we're about to discover what a terrible terrible mistake that was but I",
    "start": "12910",
    "end": "20119"
  },
  {
    "text": "don't know hopefully hopefully it's good I wanted to talk about the cake pattern",
    "start": "20119",
    "end": "25189"
  },
  {
    "text": "okay now the cake pattern is something that was I believe named as a pattern by John",
    "start": "25189",
    "end": "32870"
  },
  {
    "text": "credi in a paper like I don't know seven years ago I mean this is a fairly old thing it's been around in Scala pretty",
    "start": "32870",
    "end": "38930"
  },
  {
    "text": "much as long as traits have but it wasn't really it wasn't really talked",
    "start": "38930",
    "end": "44660"
  },
  {
    "text": "about in the mainstream or really used in the mainstream until yonis poner is blog post on how you",
    "start": "44660",
    "end": "50840"
  },
  {
    "text": "could do dependency injection with a cake pattern and I thought it was a really good blog post and this was like four years ago now and just a quick show",
    "start": "50840",
    "end": "58489"
  },
  {
    "text": "of hands how many people have read Jonas's dependency injection blog post all right good good good it's it's a",
    "start": "58489",
    "end": "64280"
  },
  {
    "text": "good post old version of scallop but it's good I am here to tell you that that description of the cake pattern is",
    "start": "64280",
    "end": "71119"
  },
  {
    "text": "woefully inadequate because there's so many things that the cake pattern can do for you that are not really dependency",
    "start": "71119",
    "end": "77690"
  },
  {
    "text": "injection in fact using it for dependency injection is like this tiny little backwater of the cake pattern and",
    "start": "77690",
    "end": "83240"
  },
  {
    "text": "it's it's really only a very small part of the larger picture so what do I mean",
    "start": "83240",
    "end": "89119"
  },
  {
    "text": "when I talk about the cake pattern well I mean things like this okay so I apologize for those of you on this side",
    "start": "89119",
    "end": "95509"
  },
  {
    "text": "who maybe can't see the bottom of the screen I didn't realize there was gonna be a symmetries so yeah so we've got a",
    "start": "95509",
    "end": "102709"
  },
  {
    "text": "user module right and the user module has a function that allows you to load a user which is something and then there's",
    "start": "102709",
    "end": "108709"
  },
  {
    "text": "a tweet module that allows you to do things and then there's a MySQL user module that implements user module and",
    "start": "108709",
    "end": "114950"
  },
  {
    "text": "then a Twitter module because every social media startup will tell you there's more than just Twitter for tweeting and the the Twitter module uses",
    "start": "114950",
    "end": "122660"
  },
  {
    "text": "both the tweet module and user module and you notice said it's using user module in an abstract form it's not",
    "start": "122660",
    "end": "128270"
  },
  {
    "text": "using the it's not depending on the details of MySQL to do this and then",
    "start": "128270",
    "end": "133970"
  },
  {
    "text": "finally at the end of the universe we put everything together in in this this giant cake we call universe new MySQL",
    "start": "133970",
    "end": "140870"
  },
  {
    "text": "user module with Twitter module and everything goes together at the dependencies line up and the compiler will check to make sure",
    "start": "140870",
    "end": "146970"
  },
  {
    "text": "that we actually have an implementation of load user and an implementation of post because those are the things that",
    "start": "146970",
    "end": "152190"
  },
  {
    "text": "we need to be able to do stuff with this so this is kind of like the the essence",
    "start": "152190",
    "end": "158430"
  },
  {
    "text": "the essence taste of the cake pattern but there's a lot more to it and what we're going to talk about is basically",
    "start": "158430",
    "end": "164610"
  },
  {
    "start": "160000",
    "end": "232000"
  },
  {
    "text": "four different things here we're gonna talk about some of the type theory that goes just very very briefly that",
    "start": "164610",
    "end": "170640"
  },
  {
    "text": "underlies the cake pattern and makes all of this stuff come together and we're",
    "start": "170640",
    "end": "176250"
  },
  {
    "text": "gonna mostly we're just going to talk about modules modules are what the cake pattern is all about it's all about",
    "start": "176250",
    "end": "181769"
  },
  {
    "text": "modularity and modularity in a way that isn't really supported by any other",
    "start": "181769",
    "end": "187440"
  },
  {
    "text": "mainstream languages there are other languages that have modularity to this extent but nobody cares about them",
    "start": "187440",
    "end": "192750"
  },
  {
    "text": "because they're all sort of often esoterica somewhere and then the we're",
    "start": "192750",
    "end": "198090"
  },
  {
    "text": "going to talk about some of the problems that arise when you do this you know the",
    "start": "198090",
    "end": "203430"
  },
  {
    "text": "cake pattern is really amazing it's a very powerful way of doing abstraction and organizing your code base but",
    "start": "203430",
    "end": "209450"
  },
  {
    "text": "fundamentally we're taking something that's very very very powerful and very very extensively extensive in its",
    "start": "209450",
    "end": "216180"
  },
  {
    "text": "implications and we're applying it to a platform ie the JVM which is extremely limited and that gives rise to some",
    "start": "216180",
    "end": "222239"
  },
  {
    "text": "really really really weird quirks that will bite you hard every time you use the cake pattern and then finally some",
    "start": "222239",
    "end": "229290"
  },
  {
    "text": "best practices for keeping things sane so hopefully this is hopefully this is",
    "start": "229290",
    "end": "234329"
  },
  {
    "start": "232000",
    "end": "650000"
  },
  {
    "text": "interesting type theory here is a class",
    "start": "234329",
    "end": "239900"
  },
  {
    "text": "I'm sure this is a revelation to everyone this class has a field in it X",
    "start": "239900",
    "end": "245340"
  },
  {
    "text": "which is supplied in the constructor it's a private field which is significant and then it has a function",
    "start": "245340",
    "end": "250590"
  },
  {
    "text": "which takes a Y and it returns a new value using that X now stop and think",
    "start": "250590",
    "end": "257430"
  },
  {
    "text": "about that for a second we do this so much every day this seems extremely persik but if you think about it",
    "start": "257430",
    "end": "262500"
  },
  {
    "text": "something very odd is going on here you can give someone a foo okay they have a foo which means they have a function add",
    "start": "262500",
    "end": "269760"
  },
  {
    "text": "from int to int and that function add uses something that is inside foo",
    "start": "269760",
    "end": "276539"
  },
  {
    "text": "something that is not visible to you who gave them that function okay",
    "start": "276539",
    "end": "281570"
  },
  {
    "text": "this is really really interesting now you could call this partial application and in fact it is but what's",
    "start": "281570",
    "end": "287270"
  },
  {
    "text": "what's really significant about this is there's a piece of data there's a piece of state not mutable state but state",
    "start": "287270",
    "end": "292490"
  },
  {
    "text": "that is inside this object and hidden and passed implicitly to the add",
    "start": "292490",
    "end": "298460"
  },
  {
    "text": "function as a hidden first parameter that this pointer every time we call the",
    "start": "298460",
    "end": "304310"
  },
  {
    "text": "add function so this turns out to actually be very very interesting and it steps on an interesting core dichotomy",
    "start": "304310",
    "end": "311390"
  },
  {
    "text": "in the fundamentals of higher-order logic and of course higher-order logic is higher-order types so Universal types",
    "start": "311390",
    "end": "319040"
  },
  {
    "text": "everybody's familiar with the concept of a universal type or at least you know most of us are right these are standard",
    "start": "319040",
    "end": "325640"
  },
  {
    "text": "generics right you have a function that takes some type parameter a maybe it's inferred maybe not it actually doesn't",
    "start": "325640",
    "end": "331280"
  },
  {
    "text": "matter from a theoretical standpoint and that function is just defined for all a right so we've got this trait for all",
    "start": "331280",
    "end": "336710"
  },
  {
    "text": "apply you know apply to a give me an option of a obviously a couple different",
    "start": "336710",
    "end": "342110"
  },
  {
    "text": "ways you could implement this but it doesn't matter just like focus on the type signatures so this is a for all now",
    "start": "342110",
    "end": "348170"
  },
  {
    "text": "those of you who know logic know that in addition to Universal quantification there's this concept called existential",
    "start": "348170",
    "end": "354320"
  },
  {
    "text": "quantification so Universal quantification says for all a T of a is",
    "start": "354320",
    "end": "360110"
  },
  {
    "text": "true existential quantification says for some a we no doubt what T of a is true",
    "start": "360110",
    "end": "366860"
  },
  {
    "text": "not for all for some this is a really profound dual really really profound so",
    "start": "366860",
    "end": "373220"
  },
  {
    "text": "here's here's kind of what it looks like in Scala we've got an exist trait and then instead of a being a parameter on",
    "start": "373220",
    "end": "379970"
  },
  {
    "text": "apply a is actually a type inside of exists okay and so if we have something",
    "start": "379970",
    "end": "385550"
  },
  {
    "text": "of type exists inside our function bippy right then there's that apply method",
    "start": "385550",
    "end": "391820"
  },
  {
    "text": "that we could try to use but the problem is that it's not going to work so unlike for all we're we're free to",
    "start": "391820",
    "end": "397700"
  },
  {
    "text": "give any type any type instantiation to a and it's guaranteed to be correct because it says for all a here we have",
    "start": "397700",
    "end": "405050"
  },
  {
    "text": "for some for some we know not what we don't know what a is",
    "start": "405050",
    "end": "411639"
  },
  {
    "text": "for this can't be valid because we don't we the compiler can't prove that a is in fact an int so it turns out there's",
    "start": "411639",
    "end": "418479"
  },
  {
    "text": "actually no valid type that you can stick in here you cannot call the apply method on exists which is seems useless",
    "start": "418479",
    "end": "426180"
  },
  {
    "text": "the the core realization here the core thing that allows us to get this sort of",
    "start": "426180",
    "end": "432430"
  },
  {
    "text": "useless situation which is in fact very useful as I'll talk about in a second is is this sort of rule okay if we have a",
    "start": "432430",
    "end": "439419"
  },
  {
    "text": "type from t1 to t2 okay this is a function from t1 to t2 we can at any",
    "start": "439419",
    "end": "445689"
  },
  {
    "text": "time say okay there exists an X such that t2 we can this is this is kind of a",
    "start": "445689",
    "end": "453039"
  },
  {
    "text": "way of typing there a type by broadening rather okay exists in X such that t2",
    "start": "453039",
    "end": "458740"
  },
  {
    "text": "we've thrown away some information in this type signature and that's what we're doing with the exists type so",
    "start": "458740",
    "end": "464560"
  },
  {
    "text": "here's the question why on earth would it be useful to take information away from you the developer right why is it",
    "start": "464560",
    "end": "473620"
  },
  {
    "text": "useful to have our types hide more than they have to well what is the essence of",
    "start": "473620",
    "end": "478629"
  },
  {
    "text": "modularity information hiding all right this is what we do to manage complexity",
    "start": "478629",
    "end": "484449"
  },
  {
    "text": "in our code bases is we take information and we partition it off so that parts of the code base don't know about details",
    "start": "484449",
    "end": "490779"
  },
  {
    "text": "of the other part of the code base and we can evolve them independently this is modularity and what's very interesting",
    "start": "490779",
    "end": "496990"
  },
  {
    "text": "is this is stepping on the core principles of object orientation now I know this is Scala object-oriented is a",
    "start": "496990",
    "end": "504159"
  },
  {
    "text": "bit of a dirty word but stick with me for a little while imagine we have this trait thing okay",
    "start": "504159",
    "end": "510729"
  },
  {
    "text": "this is a somewhat general concept which is why I called it thing because that's",
    "start": "510729",
    "end": "515740"
  },
  {
    "text": "the formal word for it and so thing has two type parameters one is contravariant one is covariant whatever it doesn't",
    "start": "515740",
    "end": "522010"
  },
  {
    "text": "matter and it has some existential type X inside of it and X you can think of X",
    "start": "522010",
    "end": "527560"
  },
  {
    "text": "as being a representation of some state inside an object so you remember back to that first slide where I had foo",
    "start": "527560",
    "end": "533920"
  },
  {
    "text": "okay the class foo that had an X and then an add function that used the state inside of foo acts the type X here could",
    "start": "533920",
    "end": "542680"
  },
  {
    "text": "be that state right it could be an INT it could be something else we don't know we don't know from the outside but we'll",
    "start": "542680",
    "end": "549490"
  },
  {
    "text": "know on the inside which is what matters so we can create that state so people",
    "start": "549490",
    "end": "554680"
  },
  {
    "text": "can pass it around like a constructor and we can use that state using the sink method to produce some value and then",
    "start": "554680",
    "end": "562090"
  },
  {
    "text": "there's there's a morphism that we have you know from state to state so it's a you know it's not not too terribly",
    "start": "562090",
    "end": "569020"
  },
  {
    "text": "complex and the magic of Scala allows us to use this thing even though we don't",
    "start": "569020",
    "end": "575950"
  },
  {
    "text": "know what the type is okay so we can take and we can have a thing from int to string and remember even knowing that we",
    "start": "575950",
    "end": "582790"
  },
  {
    "text": "have a thing from interest ring we still don't know what X is it doesn't matter we don't need to know what X is we can get an X by giving source an int right",
    "start": "582790",
    "end": "591220"
  },
  {
    "text": "that's the input type and we can use that X and pass it along and then do things with that X and finally produce a",
    "start": "591220",
    "end": "597430"
  },
  {
    "text": "result okay even though we don't know what the type of X is this is very",
    "start": "597430",
    "end": "603070"
  },
  {
    "text": "analogous to what happens every time you use an object that has private members it has some stuff inside of it that you",
    "start": "603070",
    "end": "610150"
  },
  {
    "text": "know the JVM is sort of implicitly typing and carrying along with us this is the explicit version of what the",
    "start": "610150",
    "end": "616510"
  },
  {
    "text": "JVM does for us every time we do an object so this concept of information",
    "start": "616510",
    "end": "622600"
  },
  {
    "text": "hiding and and modularity via existential types is actually very familiar to all of us if you think about",
    "start": "622600",
    "end": "628390"
  },
  {
    "text": "it we're all doing it every day we just don't think about it too much and the",
    "start": "628390",
    "end": "633460"
  },
  {
    "text": "neat thing about the cake pattern is it allows us to exploit this concept in a",
    "start": "633460",
    "end": "638590"
  },
  {
    "text": "really interesting way okay it allows us to take this concept of information hiding by existential 'ti",
    "start": "638590",
    "end": "645070"
  },
  {
    "text": "and and use it to actually have more powerful modules than what you could",
    "start": "645070",
    "end": "650140"
  },
  {
    "start": "650000",
    "end": "825000"
  },
  {
    "text": "have otherwise and that's really what the cake pattern is about modularity so",
    "start": "650140",
    "end": "656610"
  },
  {
    "text": "modules the essence of a cake pattern is a module a trait is a module so for the",
    "start": "656610",
    "end": "662950"
  },
  {
    "text": "rest of the talk we're going to assume that we have transcended the realm of packages because packages are terrible",
    "start": "662950",
    "end": "668950"
  },
  {
    "text": "and nobody should be using them anymore traits are much much more powerful because they're composable and they're",
    "start": "668950",
    "end": "675310"
  },
  {
    "text": "controlled packages are just a fancy way of sticking prefixes on your names they're not really a very good tool for",
    "start": "675310",
    "end": "681149"
  },
  {
    "text": "programming so traits traits are true modules traits allow you",
    "start": "681149",
    "end": "688680"
  },
  {
    "text": "unlike packages to have explicit type checked dependencies okay we like to",
    "start": "688680",
    "end": "694199"
  },
  {
    "text": "think that packages give us type check dependencies because if we fail to import something we get an error but the",
    "start": "694199",
    "end": "699779"
  },
  {
    "text": "thing is that we can't look at the outside of a package and see all of the things that were imported",
    "start": "699779",
    "end": "705000"
  },
  {
    "text": "we can't compose the this package with some other package and change what was",
    "start": "705000",
    "end": "711149"
  },
  {
    "text": "imported inside of this original package if it was imported in a specific way we don't really have that option",
    "start": "711149",
    "end": "716670"
  },
  {
    "text": "having dependencies explicit with traits as modules gives us that kind of",
    "start": "716670",
    "end": "722100"
  },
  {
    "text": "flexibility gives us that kind of power traits also give us a complete encapsulation ok we can hide things",
    "start": "722100",
    "end": "729810"
  },
  {
    "text": "inside of traits not only method implementations but also type",
    "start": "729810",
    "end": "734850"
  },
  {
    "text": "implementations ok we don't have to expose even the details of the fact that",
    "start": "734850",
    "end": "740850"
  },
  {
    "text": "there is a valid type for this particular thing for this thing this X that we're working with and we're",
    "start": "740850",
    "end": "746279"
  },
  {
    "text": "passing through our bippy function right we don't need to expose those details to the consumer because the consumer of our",
    "start": "746279",
    "end": "752670"
  },
  {
    "text": "API doesn't need to know right if why would they care what our implementation type is if you know",
    "start": "752670",
    "end": "759329"
  },
  {
    "text": "they're they're not going to be looking at that implementation anyway so we can just hide it from them it allows us a far far far greater degree of",
    "start": "759329",
    "end": "766199"
  },
  {
    "text": "encapsulation than you can get with traditional packaged stuff and I really think that using using traits in this",
    "start": "766199",
    "end": "775589"
  },
  {
    "text": "way is how object-oriented programming was meant to be used in a language like",
    "start": "775589",
    "end": "780779"
  },
  {
    "text": "Scala ok now we all know the benefits of functional programming and I I tend to",
    "start": "780779",
    "end": "786149"
  },
  {
    "text": "program in a highly functional style using very you know sort of Haskell ish abstractions and whatnot that's great ok",
    "start": "786149",
    "end": "793709"
  },
  {
    "text": "and that's really important it has its place but for organizing big giant blocks for organizing things that are",
    "start": "793709",
    "end": "798870"
  },
  {
    "text": "logically modules I turn back 200 and from oh oh we can get the cake pattern",
    "start": "798870",
    "end": "804420"
  },
  {
    "text": "and it's really really really nice to work with in practice I've done it on too large code bases now and there have",
    "start": "804420",
    "end": "810059"
  },
  {
    "text": "been problems but overall it's been a phenomenal positive experience so I like to think",
    "start": "810059",
    "end": "815980"
  },
  {
    "text": "of the cake pattern or rather the the process of deploying the cake pattern as",
    "start": "815980",
    "end": "821020"
  },
  {
    "text": "it were in your code base in three stages okay so stage one this is sort of",
    "start": "821020",
    "end": "826720"
  },
  {
    "start": "825000",
    "end": "930000"
  },
  {
    "text": "the the intro baby steps into the cake pattern number one split your code base",
    "start": "826720",
    "end": "833770"
  },
  {
    "text": "into top-level traits okay the general rule for this is is every single file",
    "start": "833770",
    "end": "838840"
  },
  {
    "text": "should basically have its own trait but it's just everything in that file indent it one more level throw a trade around",
    "start": "838840",
    "end": "844270"
  },
  {
    "text": "it call it a day that's that's basically the first thing you do and this even",
    "start": "844270",
    "end": "850660"
  },
  {
    "text": "that simple step actually gives you a lot of benefits because in order to access the stuff that's in file a you",
    "start": "850660",
    "end": "857620"
  },
  {
    "text": "need to mix in it straight into file B so now you have an explicit documented",
    "start": "857620",
    "end": "864640"
  },
  {
    "text": "and type check dependency between a and B whereas previously that dependency was implicit so you've already gained a lot",
    "start": "864640",
    "end": "871900"
  },
  {
    "text": "just by doing that so if you think of traits in terms of modules then your import mechanism is extends and with",
    "start": "871900",
    "end": "879040"
  },
  {
    "text": "okay so it's the inheritance it's the inheritance hierarchy that you're using to do this one of the nice",
    "start": "879040",
    "end": "885100"
  },
  {
    "text": "things about this is unlike with a normal file you can actually use bare functions inside of a trait because",
    "start": "885100",
    "end": "891760"
  },
  {
    "text": "they're not really bare they're technically members but you don't think of them that way because you're always inside of your your cake so using Bare",
    "start": "891760",
    "end": "899200"
  },
  {
    "text": "functions is sometimes really nice because there are times where it just doesn't make any sense to put this",
    "start": "899200",
    "end": "904450"
  },
  {
    "text": "function inside of a class because all you would be doing is wrapping the function so you can get around this kind",
    "start": "904450",
    "end": "909580"
  },
  {
    "text": "of this weird quirk in the way that the JVM works and inner objects are very",
    "start": "909580",
    "end": "916900"
  },
  {
    "text": "important to remember and I'll point out why this is in a second but you shouldn't you shouldn't feel like you",
    "start": "916900",
    "end": "922120"
  },
  {
    "text": "have to have everything at the base scope of your trait all right sometimes name collision happens name",
    "start": "922120",
    "end": "928660"
  },
  {
    "text": "spacing still has its purpose and we'll go into that in a second so what does this look like okay user module",
    "start": "928660",
    "end": "934590"
  },
  {
    "text": "all right user module has two functions inside of it and the class we just",
    "start": "934590",
    "end": "940810"
  },
  {
    "text": "tossed it into the trait everything is inside here you could very easily imagine this have just",
    "start": "940810",
    "end": "946600"
  },
  {
    "text": "being inside of a file well I'm with the exception of the bear functions and you know that's how you might have organized",
    "start": "946600",
    "end": "952149"
  },
  {
    "text": "a code base without the cake pattern so we have our user module and everything is concrete despite the fact that it's a",
    "start": "952149",
    "end": "957399"
  },
  {
    "text": "trait we don't care traits traits allow us to do that sort of implementation thing and then we have a message module that uses user module",
    "start": "957399",
    "end": "964750"
  },
  {
    "text": "it imports user module and message module apparently does things with users",
    "start": "964750",
    "end": "971470"
  },
  {
    "text": "I guess as the the author of a message or something like that so that's that's kind of cool we've brought that in we",
    "start": "971470",
    "end": "978009"
  },
  {
    "text": "didn't have to use import or any sort of implicit dependencies it's all up there in the type signature and at the end of",
    "start": "978009",
    "end": "983470"
  },
  {
    "text": "the world when it comes to put these together we're guaranteed to have both of them but we're already running into problems specifically right there they",
    "start": "983470",
    "end": "991240"
  },
  {
    "text": "save function if you remember back to the previous slide user module also has a save function and the the compiler is",
    "start": "991240",
    "end": "999519"
  },
  {
    "text": "gonna be able to disambiguate them because the parameter type is different in this case message as opposed to user",
    "start": "999519",
    "end": "1005069"
  },
  {
    "text": "but that's overloading and that's weird and terrible and an awful holdover from",
    "start": "1005069",
    "end": "1010680"
  },
  {
    "text": "the days of C++ we shouldn't be doing that if we can avoid it right so rather",
    "start": "1010680",
    "end": "1015870"
  },
  {
    "text": "than overloading the save function which is really unnecessary and gratuitous what we can do is we can take these",
    "start": "1015870",
    "end": "1022230"
  },
  {
    "text": "functions inside of message module the things that are logically relating only",
    "start": "1022230",
    "end": "1028770"
  },
  {
    "text": "to message right so render message save message that sort of thing we could just push them into an inner object this is",
    "start": "1028770",
    "end": "1036089"
  },
  {
    "text": "namespacing now like five minutes ago I said that name spacing was really bad",
    "start": "1036089",
    "end": "1041428"
  },
  {
    "text": "because all you're doing is just adding prefixes to a name and that's true it's bad if you're using it to implement",
    "start": "1041429",
    "end": "1046678"
  },
  {
    "text": "modularity okay name spacing is not modules name spacing is avoiding name",
    "start": "1046679",
    "end": "1052470"
  },
  {
    "text": "collision and that's precisely what we're doing here we have a module we have a mechanism for doing modularity we're not using this inner object",
    "start": "1052470",
    "end": "1059130"
  },
  {
    "text": "message as a way of having a module instead we're just using it as a way to disambiguate this is the render function",
    "start": "1059130",
    "end": "1065450"
  },
  {
    "text": "specifically pertaining to messages so this is a really really really good use of object and one of the nice things",
    "start": "1065450",
    "end": "1071789"
  },
  {
    "text": "about this is that unlike packages objects are actual things okay they're",
    "start": "1071789",
    "end": "1077490"
  },
  {
    "text": "objects you can put them in vowels you can rename you can carry them around you can pass them along it's they behave just like",
    "start": "1077490",
    "end": "1084720"
  },
  {
    "text": "everything else in Scala so by using objects rather than packages we're actually getting away from one of the",
    "start": "1084720",
    "end": "1092190"
  },
  {
    "text": "more peculiar dichotomies inside of Scala held over from the JVM and the way",
    "start": "1092190",
    "end": "1097830"
  },
  {
    "text": "that the JVM works so that's stage one okay and the way that this the story",
    "start": "1097830",
    "end": "1104400"
  },
  {
    "text": "usually works is you go through your code base you implement things in this way life is wonderful and happy and then",
    "start": "1104400",
    "end": "1110820"
  },
  {
    "text": "you start running into problems okay one of the problems you might run into is testing a lot of people like to test",
    "start": "1110820",
    "end": "1118170"
  },
  {
    "text": "things apparently unit testing is good and it's as we all know it can be very difficult to test some sort of",
    "start": "1118170",
    "end": "1125070"
  },
  {
    "text": "high-level module that's using a couple of other modules underneath it where maybe one of those modules talks to some",
    "start": "1125070",
    "end": "1131460"
  },
  {
    "text": "remote service or does something really complicated and you don't want to test that module you want to test the higher-level module instead so we get",
    "start": "1131460",
    "end": "1138540"
  },
  {
    "text": "into mocking and things like that and anybody who's done mocking in a large-scale system with maybe spring or",
    "start": "1138540",
    "end": "1145290"
  },
  {
    "text": "some other dependency injection framework knows what a pain that can be the cake pattern gives us a really",
    "start": "1145290",
    "end": "1150420"
  },
  {
    "text": "really really nice way of doing this as you would expect remember we're working with traits our modules are traits we",
    "start": "1150420",
    "end": "1157290"
  },
  {
    "text": "can just as easily make our functions inside our traits abstract we can have",
    "start": "1157290",
    "end": "1163980"
  },
  {
    "text": "abstract functions inside our traits and then concrete implementations somewhere else and our modules that depend on the",
    "start": "1163980",
    "end": "1170490"
  },
  {
    "text": "module that we care about can depend on the trait that has the abstract form rather than the concrete form this",
    "start": "1170490",
    "end": "1176730"
  },
  {
    "text": "allows us to create multiple concrete forms not only one for our production system but also maybe one for our dev",
    "start": "1176730",
    "end": "1183330"
  },
  {
    "text": "system and one for our test suite and one for whatever it gives us all of that flexibility the Precog code base is",
    "start": "1183330",
    "end": "1190350"
  },
  {
    "text": "exploiting this to the enth degree it's it's crazy how much we're doing with this we can swap out our storage",
    "start": "1190350",
    "end": "1195960"
  },
  {
    "text": "back-end just at the drop of the Hat because it's very very very well modularized and it's done using this",
    "start": "1195960",
    "end": "1202350"
  },
  {
    "text": "trick so make your functions abstract okay um I still when I'm building a new",
    "start": "1202350",
    "end": "1208710"
  },
  {
    "text": "module I start with a concrete function but I very very very quickly move to the abstract form the",
    "start": "1208710",
    "end": "1214320"
  },
  {
    "text": "or interesting point on this slide is not refactor your functions to be abstract but refactor your types to be",
    "start": "1214320",
    "end": "1220769"
  },
  {
    "text": "abstract okay you don't have to settle for concrete types this is the beauty",
    "start": "1220769",
    "end": "1227759"
  },
  {
    "text": "the real real beauty of Scala's abstract type mechanism we can actually abstract",
    "start": "1227759",
    "end": "1233759"
  },
  {
    "text": "over our types in a way that you cannot do if all you have is a package okay and",
    "start": "1233759",
    "end": "1239549"
  },
  {
    "text": "this is a really really really interesting concept so all of you out there who are yearning for the good old",
    "start": "1239549",
    "end": "1246059"
  },
  {
    "text": "days of gee baby oh I know there's at least one of you this is how you get virtual classes in Scala and it is just",
    "start": "1246059",
    "end": "1253019"
  },
  {
    "text": "as powerful as you would expect it to be type bounds type bounds are really really powerful you can use them to",
    "start": "1253019",
    "end": "1259710"
  },
  {
    "text": "successively refine your abstract types and basically have virtual types where the definition is split across multiple",
    "start": "1259710",
    "end": "1265889"
  },
  {
    "text": "modules which is pretty cool lifecycle management this is a perennial problem",
    "start": "1265889",
    "end": "1272100"
  },
  {
    "text": "with the cake pattern okay you have a module more importantly you have several",
    "start": "1272100",
    "end": "1277860"
  },
  {
    "text": "modules and you know because we live in an impure universe those modules have to set things up okay when they start they",
    "start": "1277860",
    "end": "1285690"
  },
  {
    "text": "have to have some sort of startup routine they have to generally side effect it's terrible and when they're",
    "start": "1285690",
    "end": "1291990"
  },
  {
    "text": "done they have to shut themselves down okay this is a really really really important thing and people start out",
    "start": "1291990",
    "end": "1297360"
  },
  {
    "text": "with the cake pattern by throwing this set up logic inside the Constructors which is a disaster like do not ever put",
    "start": "1297360",
    "end": "1305100"
  },
  {
    "text": "side effects inside of trait constructors you will want to kill yourself it's terrible rather than putting it",
    "start": "1305100",
    "end": "1310649"
  },
  {
    "text": "into constructors there's a different way we can do this using what I believe our team are called the stackable traits",
    "start": "1310649",
    "end": "1317039"
  },
  {
    "text": "pattern okay which is basically the most misunderstood modifier in the entire Scala language and we'll get to what",
    "start": "1317039",
    "end": "1322649"
  },
  {
    "text": "that means in just a second so coming back to our user module let's see how we",
    "start": "1322649",
    "end": "1329399"
  },
  {
    "start": "1323000",
    "end": "1357000"
  },
  {
    "text": "would progress through this second stage okay so we've got our user module and what",
    "start": "1329399",
    "end": "1334799"
  },
  {
    "text": "we've done is we've made the login method and the save method abstract so",
    "start": "1334799",
    "end": "1340559"
  },
  {
    "text": "now we no longer have the details in this user module of how login works of how authentication or anything like that",
    "start": "1340559",
    "end": "1347039"
  },
  {
    "text": "works it's the abstract type signature it gives us the function we can work with it but we",
    "start": "1347039",
    "end": "1352470"
  },
  {
    "text": "don't know we're not tied to whatever details of you know the auth back-end or",
    "start": "1352470",
    "end": "1357480"
  },
  {
    "start": "1357000",
    "end": "1404000"
  },
  {
    "text": "any of that stuff okay and then we could have maybe an implementation on top of",
    "start": "1357480",
    "end": "1362850"
  },
  {
    "text": "MongoDB or something like that that actually does the authentication and our message module okay",
    "start": "1362850",
    "end": "1367950"
  },
  {
    "text": "the external module is bringing in the abstract user module we never ever ever",
    "start": "1367950",
    "end": "1374370"
  },
  {
    "text": "ever ever want to depend upon the user module we want to depend upon user",
    "start": "1374370",
    "end": "1380340"
  },
  {
    "text": "module because user module gives us only and exactly as much information as we want remember this comes back to the",
    "start": "1380340",
    "end": "1386280"
  },
  {
    "text": "essence of modularity information hiding we want to hide the details of MongoDB",
    "start": "1386280",
    "end": "1391350"
  },
  {
    "text": "and all of its stuff we want to hide that away because message module doesn't care it only cares about login and save",
    "start": "1391350",
    "end": "1400610"
  },
  {
    "text": "so I mean that's that's that's great but what if we wanted to have our save",
    "start": "1400610",
    "end": "1406140"
  },
  {
    "start": "1404000",
    "end": "1466000"
  },
  {
    "text": "function on the user object right we are technically in an object-oriented language rather than having a save",
    "start": "1406140",
    "end": "1412170"
  },
  {
    "text": "function that takes the user we could just have the save function be a no art function on user itself returning unit",
    "start": "1412170",
    "end": "1418770"
  },
  {
    "text": "because we side-effect like a boss so this is this is cool but unfortunately",
    "start": "1418770",
    "end": "1425610"
  },
  {
    "text": "it's not really it mates breaking our abstraction right user module here",
    "start": "1425610",
    "end": "1431130"
  },
  {
    "text": "remember is the abstract form if we had looked at the code that I alighted there it has a abstract login function okay",
    "start": "1431130",
    "end": "1438450"
  },
  {
    "text": "totally abstract the details of how to save a user are not in this module so we",
    "start": "1438450",
    "end": "1444240"
  },
  {
    "text": "could a do some absolutely terrible inversion of control thing and have like a protected abstract function that",
    "start": "1444240",
    "end": "1450810"
  },
  {
    "text": "actually does the saving work that we sort of stuff in user module and then we delegate to that from save that is a",
    "start": "1450810",
    "end": "1456060"
  },
  {
    "text": "terrible idea we don't have to do that rather than doing that what we can do is we can make the concept of a user",
    "start": "1456060",
    "end": "1462650"
  },
  {
    "text": "abstract so this is a really interesting thing it basically looks like this we",
    "start": "1462650",
    "end": "1469470"
  },
  {
    "start": "1466000",
    "end": "1605000"
  },
  {
    "text": "have an abstract type user which is constrained to extend user like and then",
    "start": "1469470",
    "end": "1475650"
  },
  {
    "text": "user like is a trait okay this is the abstract class that user that basically",
    "start": "1475650",
    "end": "1481410"
  },
  {
    "text": "defines the signature of user and apparently users have an ID and a name and they have this safe function and you'll also",
    "start": "1481410",
    "end": "1487440"
  },
  {
    "text": "notice user like has a self type it's constrained to be a user that doesn't",
    "start": "1487440",
    "end": "1492930"
  },
  {
    "text": "actually matter in this case because none of these functions are implemented but if any of these functions did something like return this then we would",
    "start": "1492930",
    "end": "1499770"
  },
  {
    "text": "really need this so just get yourself in the habit of doing this anytime you do virtual classes and then finally down at",
    "start": "1499770",
    "end": "1505230"
  },
  {
    "text": "the bottom we have an abstract constructor for user that takes an ID and a name and it returns something of",
    "start": "1505230",
    "end": "1510870"
  },
  {
    "text": "type user this is really interesting it returns something of type user user is",
    "start": "1510870",
    "end": "1516120"
  },
  {
    "text": "abstract so people can use this module they can bring in user module and they",
    "start": "1516120",
    "end": "1522210"
  },
  {
    "text": "can actually work with the user type without having any idea what its implementation is not only not knowing",
    "start": "1522210",
    "end": "1528510"
  },
  {
    "text": "what the implementation of its methods look like but not even knowing what the actual implementation type happens to be",
    "start": "1528510",
    "end": "1534890"
  },
  {
    "text": "all that is hidden we have abstraction at the method level we have abstraction",
    "start": "1534890",
    "end": "1540480"
  },
  {
    "text": "at the type level and this is so powerful very very very very very",
    "start": "1540480",
    "end": "1545580"
  },
  {
    "text": "powerful when we go to implement this it's pretty much what you would expect we have the user module and it",
    "start": "1545580",
    "end": "1552060"
  },
  {
    "text": "just defines a class user okay it extends user like does its thing defines",
    "start": "1552060",
    "end": "1558030"
  },
  {
    "text": "the constructor and away we go and this is sufficient to implement the",
    "start": "1558030",
    "end": "1563370"
  },
  {
    "text": "virtual class it actually finalizes the virtual class in the hierarchy so this is the implementation when you have a",
    "start": "1563370",
    "end": "1568920"
  },
  {
    "text": " user module but you never have a  user module all you have is a user module so you're working with user in an",
    "start": "1568920",
    "end": "1575310"
  },
  {
    "text": "abstract form so this is this is really a very very interesting bit and we start",
    "start": "1575310",
    "end": "1580320"
  },
  {
    "text": "to see how this is getting closer and closer to that existential type concept that I talked about at the beginning",
    "start": "1580320",
    "end": "1585660"
  },
  {
    "text": "where we're hiding information not just hiding it by you know shoving it over here or putting in a closure or",
    "start": "1585660",
    "end": "1591870"
  },
  {
    "text": "something like that we're actually hiding it at the type level in a way that is type constrained and we can talk about and we can reason",
    "start": "1591870",
    "end": "1598500"
  },
  {
    "text": "about very very very very powerful so I promised to talk about lifecycle",
    "start": "1598500",
    "end": "1603680"
  },
  {
    "text": "lifecycle you know you can start off by having this very simple concept here ok",
    "start": "1603680",
    "end": "1608790"
  },
  {
    "start": "1605000",
    "end": "1666000"
  },
  {
    "text": "we have the lifecycle module that has a start up in a shutdown method ok this",
    "start": "1608790",
    "end": "1615539"
  },
  {
    "text": "seems fairly reasonable and the concept that we're going to go for is any module",
    "start": "1615539",
    "end": "1622109"
  },
  {
    "text": "that needs to have a start up or shut down routine is going to have to implement these functions so rather than",
    "start": "1622109",
    "end": "1628710"
  },
  {
    "text": "putting that logic in something like the constructor or heaven forbid the finalizar we're actually going to put it",
    "start": "1628710",
    "end": "1634559"
  },
  {
    "text": "in these functions that we have some control over it the problem is we may have multiple modules that have set up",
    "start": "1634559",
    "end": "1643049"
  },
  {
    "text": "or teardown routines right we don't want each module to have to delegate to every other module because",
    "start": "1643049",
    "end": "1649320"
  },
  {
    "text": "that's a ridiculous amount of tangling what we really want is we want to somehow say hey I have a startup routine",
    "start": "1649320",
    "end": "1655499"
  },
  {
    "text": "I want to do some thingy but as part of the startup routine I want to start up everything else that wants to be started",
    "start": "1655499",
    "end": "1661409"
  },
  {
    "text": "and I don't care what that everything else is I just want to do it okay this is the purpose of the abstract override",
    "start": "1661409",
    "end": "1668279"
  },
  {
    "start": "1666000",
    "end": "1823000"
  },
  {
    "text": "modifier okay I don't know about you but when I when I was reading the Scala spec and I found the fact that you can use",
    "start": "1668279",
    "end": "1675059"
  },
  {
    "text": "abstract together with override I thought it was a typo this doesn't make even looking at it it",
    "start": "1675059",
    "end": "1681960"
  },
  {
    "text": "doesn't make any sense to me at all basically what abstract override allows you to do is access the super pointer",
    "start": "1681960",
    "end": "1689489"
  },
  {
    "text": "which is not really a pointer it's just a namespace thingy but whatever it allows you to access super inside of a",
    "start": "1689489",
    "end": "1695700"
  },
  {
    "text": "trait so this is this is our team is stackable traits pattern basically what",
    "start": "1695700",
    "end": "1701009"
  },
  {
    "text": "we're doing here is exactly what I described we have some init thingy function which is a you know hidden",
    "start": "1701009",
    "end": "1706289"
  },
  {
    "text": "inside of the trait hopefully hopefully private and that init",
    "start": "1706289",
    "end": "1712080"
  },
  {
    "text": "thingy function is going to happen as part of the startup cycle but the other thing that happens as part of the",
    "start": "1712080",
    "end": "1717749"
  },
  {
    "text": "startup cycle for this module is we delegate to the startup cycle for every other module in the known universe and",
    "start": "1717749",
    "end": "1725179"
  },
  {
    "text": "the same thing for shutdown so this ensures that we can compose together our",
    "start": "1725179",
    "end": "1730979"
  },
  {
    "text": "modules we can put them together and they can all have their own life cycle that gets started at the same time and",
    "start": "1730979",
    "end": "1737399"
  },
  {
    "text": "shutdown at the same time the only thing that is a little bit tricky about this is the exact order in which these things",
    "start": "1737399",
    "end": "1743730"
  },
  {
    "text": "is are run is not non-deterministic but you should treat it as such",
    "start": "1743730",
    "end": "1748920"
  },
  {
    "text": "okay it's basically going to depend on how the cake was put together whether  module came before message module",
    "start": "1748920",
    "end": "1756600"
  },
  {
    "text": "or after message module in your with clause right because that is actually order dependent so that is going to",
    "start": "1756600",
    "end": "1762810"
  },
  {
    "text": "determine the order your module started so it's very important to remember that you shouldn't have dependencies between",
    "start": "1762810",
    "end": "1769820"
  },
  {
    "text": "life cycles startup and teardown routines okay if you have a module that needs another module to be started",
    "start": "1769820",
    "end": "1776250"
  },
  {
    "text": "before it starts you have to start factoring things out in other ways you can't just stack them together and",
    "start": "1776250",
    "end": "1782040"
  },
  {
    "text": "hope that it's going to work but in general most modules tend to be fairly self-contained and this sort of",
    "start": "1782040",
    "end": "1789210"
  },
  {
    "text": "stackable life cycle pattern actually works really really really well so that's that's basically stage two",
    "start": "1789210",
    "end": "1795540"
  },
  {
    "text": "okay and once you get your codebase to this level things are actually in a really good place it it actually takes",
    "start": "1795540",
    "end": "1802980"
  },
  {
    "text": "you a really long time if ever to start running into problems with the cake pattern in this form okay this is this",
    "start": "1802980",
    "end": "1810840"
  },
  {
    "text": "is in general most of the tools that you need but some code bases are a little bit more advanced and/or have really",
    "start": "1810840",
    "end": "1817170"
  },
  {
    "text": "pathological needs and that's when you start getting into stage 3 of our cake evolution stage 3 is when you realize",
    "start": "1817170",
    "end": "1825180"
  },
  {
    "start": "1823000",
    "end": "1945000"
  },
  {
    "text": "that composition is actually pretty good after all and the age-old advice to favor composition over inheritance is",
    "start": "1825180",
    "end": "1832220"
  },
  {
    "text": "might be correct so inheritance is really convenient right our mechanism of",
    "start": "1832220",
    "end": "1839250"
  },
  {
    "text": "import by width and extends is really really nice and I'm not telling you to get away from that I'm not telling you that it has",
    "start": "1839250",
    "end": "1845460"
  },
  {
    "text": "problems because it really doesn't it doesn't have any limitations that you wouldn't expect but there are times",
    "start": "1845460",
    "end": "1851730"
  },
  {
    "text": "where you need to have composition basically whenever you have a module",
    "start": "1851730",
    "end": "1857280"
  },
  {
    "text": "that has some thing that it depends on but that thing has state which needs to be shared with other modules ok other",
    "start": "1857280",
    "end": "1864600"
  },
  {
    "text": "things that are outside your cake or other instances of that module whenever you find yourself in that situation you",
    "start": "1864600",
    "end": "1870300"
  },
  {
    "text": "cannot use inheritance anymore you have to use composition at some level there has to be a Val inside of your module",
    "start": "1870300",
    "end": "1877050"
  },
  {
    "text": "that is another module rather than bringing it in via width or extents that sort of thing happen",
    "start": "1877050",
    "end": "1882750"
  },
  {
    "text": "on occasion you also find yourself very quickly as soon as you hit that point you find yourself nesting modules within",
    "start": "1882750",
    "end": "1891080"
  },
  {
    "text": "modules and this is where things get really really mind-bending because think",
    "start": "1891080",
    "end": "1896700"
  },
  {
    "text": "about traits right traits are not like packages packages if you nest a package within another package it just adds to",
    "start": "1896700",
    "end": "1902909"
  },
  {
    "text": "the prefix that it's putting on the name traits on the other hand are modules they're true modules and you can still",
    "start": "1902909",
    "end": "1909539"
  },
  {
    "text": "nest them inside of each other and what you get is not just more pressing you actually get more polymorphism and axis",
    "start": "1909539",
    "end": "1916890"
  },
  {
    "text": "of polymorphism that you wouldn't otherwise have you can have things like independent life cycles this way so you",
    "start": "1916890",
    "end": "1922289"
  },
  {
    "text": "have an outer trait an outer module rather that has its own startup and shutdown thing and then inside of that",
    "start": "1922289",
    "end": "1928380"
  },
  {
    "text": "it has sub modules and those sub modules may live and die and live and die and live and die many times over the",
    "start": "1928380",
    "end": "1934409"
  },
  {
    "text": "lifetime of the outer module that's fine and you know sometimes you actually need that to happen in order to do that you",
    "start": "1934409",
    "end": "1941580"
  },
  {
    "text": "have to nest modules within modules and like I said this does get a little bit brain mind-melting so here's here's",
    "start": "1941580",
    "end": "1947940"
  },
  {
    "start": "1945000",
    "end": "2006000"
  },
  {
    "text": "where it can start where you can start to see what this looks like we have a system okay inside this system is a user",
    "start": "1947940",
    "end": "1954510"
  },
  {
    "text": "module and we're doing this because presumably user module is has a life",
    "start": "1954510",
    "end": "1961530"
  },
  {
    "text": "cycle that is separate from system module okay and one way to think about this one metaphor you can use is the",
    "start": "1961530",
    "end": "1968490"
  },
  {
    "text": "standard metaphor for determining whether or not to use composition or inheritance is a system a user well not",
    "start": "1968490",
    "end": "1977400"
  },
  {
    "text": "really so rather than having system module bring in user module via",
    "start": "1977400",
    "end": "1982980"
  },
  {
    "text": "inheritance we can bring it in via composition in this way so Val user module and this is going to be defined",
    "start": "1982980",
    "end": "1989280"
  },
  {
    "text": "at some point when we put the cake together we can also just do this via standard sort of function application",
    "start": "1989280",
    "end": "1995610"
  },
  {
    "text": "take it as a parameter it comes down to the same thing right it's just here we don't actually have a reference to it all over the place and continuing on",
    "start": "1995610",
    "end": "2004549"
  },
  {
    "text": "with this we to sort of see we might have a storage module okay and the",
    "start": "2004549",
    "end": "2012200"
  },
  {
    "start": "2006000",
    "end": "2066000"
  },
  {
    "text": "storage module is part of a system module right we're still using inheritance because inheritances it evil it's it's still",
    "start": "2012200",
    "end": "2018260"
  },
  {
    "text": "very nice and convenient so our storage module defines some abstract functions store and retrieve and presumably will",
    "start": "2018260",
    "end": "2024650"
  },
  {
    "text": "define a concrete implementation of this at some point the problem is that we",
    "start": "2024650",
    "end": "2030470"
  },
  {
    "text": "want user module to be able to access storage module okay if you remember one",
    "start": "2030470",
    "end": "2036890"
  },
  {
    "text": "of the things that user module has the ability to do is save a user it also has the ability to login I mean that really",
    "start": "2036890",
    "end": "2042830"
  },
  {
    "text": "implies that you have to have some access to the storage module well that's a problem if you want the system module",
    "start": "2042830",
    "end": "2050750"
  },
  {
    "text": "to be independent in terms of life cycles from the user module because if you cake them together if you just",
    "start": "2050750",
    "end": "2056810"
  },
  {
    "text": "naively make them all inherit together then you're tying their life cycles together and they can never be separated",
    "start": "2056810",
    "end": "2062270"
  },
  {
    "text": "again so what you do is we act er user module ok user module has now become",
    "start": "2062270",
    "end": "2069408"
  },
  {
    "start": "2066000",
    "end": "2149000"
  },
  {
    "text": "user module module because names are hard and user module module contains a",
    "start": "2069409",
    "end": "2076250"
  },
  {
    "text": "user module the interesting thing is that user module module is what extends storage module ok this is where you",
    "start": "2076250",
    "end": "2083300"
  },
  {
    "text": "bring the storage module into the cake so that user module can work with it and then user module itself is independent",
    "start": "2083300",
    "end": "2090169"
  },
  {
    "text": "you can start it up you can shut it down you can create any number of these modules just pass them around like",
    "start": "2090169",
    "end": "2095628"
  },
  {
    "text": "normal objects because that's what they are and all of that works the way you would expect so this is basically what",
    "start": "2095629",
    "end": "2102680"
  },
  {
    "text": "I'm talking about when I say that traits make modules first-class because they actually take modules and make them a",
    "start": "2102680",
    "end": "2109940"
  },
  {
    "text": "thing that you can get your hand around and you can create them and you can destroy them and you're gonna have parallel modules that live next to each",
    "start": "2109940",
    "end": "2116360"
  },
  {
    "text": "other inside your object hierarchy this is a really really really valuable property of the cake pattern and it's",
    "start": "2116360",
    "end": "2122900"
  },
  {
    "text": "something that is completely out of reach if all you're using our packages or objects so this is great this is",
    "start": "2122900",
    "end": "2130370"
  },
  {
    "text": "really really great the benefits of this are profound and and hopefully they're starting to become a little bit more",
    "start": "2130370",
    "end": "2135530"
  },
  {
    "text": "real the there are unfortunately some problems which arise when you do this",
    "start": "2135530",
    "end": "2142600"
  },
  {
    "text": "it's you know many of them are just artifacts of the fact that we are sitting on the JVM and it's it can be",
    "start": "2142600",
    "end": "2149210"
  },
  {
    "start": "2149000",
    "end": "2296000"
  },
  {
    "text": "annoying here is a classic example of a problem",
    "start": "2149210",
    "end": "2154220"
  },
  {
    "text": "which can arise how many people see the issue here okay what is this program",
    "start": "2154220",
    "end": "2159980"
  },
  {
    "text": "print no it doesn't it doesn't throw a",
    "start": "2159980",
    "end": "2165380"
  },
  {
    "text": "null pointer exception because any two string rath are actually does it does",
    "start": "2165380",
    "end": "2171440"
  },
  {
    "text": "null checking so this actually prints null world and bar the value of bar is",
    "start": "2171440",
    "end": "2179839"
  },
  {
    "text": "null world it's not hello world which is really really really strange and this is",
    "start": "2179839",
    "end": "2185570"
  },
  {
    "text": "just like very unintuitive because everything in here is a Val right nothing's being reassigned there's no point theoretically where we",
    "start": "2185570",
    "end": "2192770"
  },
  {
    "text": "should be able to observe a lack of value here the problem is we are sitting",
    "start": "2192770",
    "end": "2198260"
  },
  {
    "text": "on the JVM okay and Val is an eager construct",
    "start": "2198260",
    "end": "2204020"
  },
  {
    "text": "so basically Scala is making a hard guarantee that when it hits the Val in",
    "start": "2204020",
    "end": "2210140"
  },
  {
    "text": "its execution path okay and it's going to hit that Val in the constructor for the trait when it hits that Val it will",
    "start": "2210140",
    "end": "2217460"
  },
  {
    "text": "be executed regardless of the state of everything else in the universe regardless of what things that valve may",
    "start": "2217460",
    "end": "2223339"
  },
  {
    "text": "or may not be using and whether or not those things are available you can actually see this problem in Java as",
    "start": "2223339",
    "end": "2229339"
  },
  {
    "text": "well and it is the source of perennial threads on Stack Overflow because people",
    "start": "2229339",
    "end": "2234710"
  },
  {
    "text": "just find this very confusing basically what's happening is the constructor for C the class is running okay and the very",
    "start": "2234710",
    "end": "2242240"
  },
  {
    "text": "first thing that constructor does is it delegates two A's constructor all right delegates to a is constructor ace",
    "start": "2242240",
    "end": "2248540"
  },
  {
    "text": "constructor doesn't have anything so it delegates to Bea's constructor now Bea's constructor has bar and this",
    "start": "2248540",
    "end": "2256010"
  },
  {
    "text": "is where the problem is bar accesses foo and concatenate sit with the string",
    "start": "2256010",
    "end": "2261800"
  },
  {
    "text": "world foo has not yet been created because C's constructor hasn't run yet",
    "start": "2261800",
    "end": "2267490"
  },
  {
    "text": "C's constructors in the process of delegating - it's super constructors the super constructor delegated back down to",
    "start": "2267490",
    "end": "2273470"
  },
  {
    "text": "some state that's set up inside of the sub constructor and that's where you start having problems so this this",
    "start": "2273470",
    "end": "2280910"
  },
  {
    "text": "arises astoundingly frequently when you use traits and since the cake",
    "start": "2280910",
    "end": "2286310"
  },
  {
    "text": "pattern is all about traits yeah you're gonna see this a lot generally speaking whenever you have",
    "start": "2286310",
    "end": "2292370"
  },
  {
    "text": "side effects or eager evaluation which is another form of side effect so yeah this is an initialization order problem",
    "start": "2292370",
    "end": "2299150"
  },
  {
    "start": "2296000",
    "end": "2316000"
  },
  {
    "text": "in most often it shows up as a really strange nullpointerexception a nullpointerexception that's happening",
    "start": "2299150",
    "end": "2305930"
  },
  {
    "text": "in a part of the code which cannot possibly have a nullpointerexception when the laws of physics appear to",
    "start": "2305930",
    "end": "2312350"
  },
  {
    "text": "evaporate suspect initialization order that's that's really the general rule",
    "start": "2312350",
    "end": "2317930"
  },
  {
    "start": "2316000",
    "end": "2337000"
  },
  {
    "text": "that I can give you unexpected JVM zeros in general like it's not always know you could have",
    "start": "2317930",
    "end": "2323600"
  },
  {
    "text": "false or you could have zero right if it's an inter along those sorts of things just pop up and you have to deal",
    "start": "2323600",
    "end": "2329900"
  },
  {
    "text": "with them it's very strange and very difficult to debug and sometimes it can just tie you in knots trying to figure",
    "start": "2329900",
    "end": "2336230"
  },
  {
    "text": "out how to linearize your hierarchy in a sane way really just any time you see behavior that you can't explain so there",
    "start": "2336230",
    "end": "2343160"
  },
  {
    "start": "2337000",
    "end": "2387000"
  },
  {
    "text": "is a very interesting bug in the curl parser inside the Precog code base that",
    "start": "2343160",
    "end": "2348320"
  },
  {
    "text": "I have yet to explain and basically there is a vowel which is not abstract",
    "start": "2348320",
    "end": "2353870"
  },
  {
    "text": "it's inside of a trait but it's not abstract it's not inherited it's just a Val it could for all intensive purposes",
    "start": "2353870",
    "end": "2359900"
  },
  {
    "text": "be a private Val and I think it may actually be now if I keep that as a Val",
    "start": "2359900",
    "end": "2366730"
  },
  {
    "text": "even though it's never used in the constructor never access to the constructor hierarchy the parser doesn't",
    "start": "2366730",
    "end": "2373460"
  },
  {
    "text": "work it doesn't crash it just parses the wrong thing I have to make it a lazy Val",
    "start": "2373460",
    "end": "2378800"
  },
  {
    "text": "in order to make the parser function I have no idea why this would be the case absolutely not it doesn't make any sense",
    "start": "2378800",
    "end": "2385670"
  },
  {
    "text": "to me so basically just the solution to this in general is you throw up a death",
    "start": "2385670",
    "end": "2391820"
  },
  {
    "text": "instead of a Val or you use a lazy Val and lazy Val makes it late makes your",
    "start": "2391820",
    "end": "2397010"
  },
  {
    "text": "eager now evaluation a lazy evaluation and and kind of gets around that problem",
    "start": "2397010",
    "end": "2402740"
  },
  {
    "text": "you need to be very very careful with this so okay there's a there's an interesting problem hidden the Scala",
    "start": "2402740",
    "end": "2408650"
  },
  {
    "text": "compiler itself Scala sees source code where they're using the cake pattern okay they design their cake a long time",
    "start": "2408650",
    "end": "2415610"
  },
  {
    "text": "ago before the community kind of built up all this wisdom about the cake pattern but it's still you know the essence of it is the",
    "start": "2415610",
    "end": "2421609"
  },
  {
    "text": "cake pattern and they have a lot of symbols that our pointers that the compiler needs to know about the things",
    "start": "2421609",
    "end": "2427850"
  },
  {
    "text": "like what is the name of the class object what is the name of the class string what are the boxing classes for",
    "start": "2427850",
    "end": "2435140"
  },
  {
    "text": "integers and bullying's etc right the compiler needs to know about those symbols internally so it needs to have a",
    "start": "2435140",
    "end": "2441140"
  },
  {
    "text": "giant trait that has all of those symbols the problem is that the notion of a symbol is something that's defined",
    "start": "2441140",
    "end": "2446300"
  },
  {
    "text": "inside the scala c cake so you can't create those symbols without the cake",
    "start": "2446300",
    "end": "2452900"
  },
  {
    "text": "being set up so Scala C actually has a trait that has literally hundreds of lazy vowels inside",
    "start": "2452900",
    "end": "2458060"
  },
  {
    "text": "of it and until they made those lazy vowels eagerly eagerly populate",
    "start": "2458060",
    "end": "2463430"
  },
  {
    "start": "2459000",
    "end": "2505000"
  },
  {
    "text": "themselves by using a special function that they called the the initialization time amortized over all of those lazy",
    "start": "2463430",
    "end": "2470630"
  },
  {
    "text": "vowels was in the tens of seconds it was insane absolutely insane so lazy val is",
    "start": "2470630",
    "end": "2477830"
  },
  {
    "text": "a real performance problem if you care about performance at all don't use it in a hot path and if you care about your sanity don't use it if you can avoid it",
    "start": "2477830",
    "end": "2484520"
  },
  {
    "text": "the problem is that the cake pattern makes it really hard to avoid so use death if you can use lazy Val if you",
    "start": "2484520",
    "end": "2490940"
  },
  {
    "text": "have to yeah I don't know there's no good answer to this so this is basically",
    "start": "2490940",
    "end": "2498290"
  },
  {
    "text": "the modification that we make we make fool an abstract death we make bar a",
    "start": "2498290",
    "end": "2503359"
  },
  {
    "text": "lazy Val and this problem goes away here's another good one there's actually",
    "start": "2503359",
    "end": "2510050"
  },
  {
    "start": "2505000",
    "end": "2586000"
  },
  {
    "text": "no code on this screen so there's no real problem here and the reason is that I haven't been able to minimize this bug",
    "start": "2510050",
    "end": "2516020"
  },
  {
    "text": "at all but it seems to arise when I have situations like this basically what",
    "start": "2516020",
    "end": "2522680"
  },
  {
    "text": "happens in situations like this some of the time is you have initialization order for these constructors for like",
    "start": "2522680",
    "end": "2529280"
  },
  {
    "text": "the foo the more dot foo constructor and the more dot Baz constructor sometimes if they depend on each other or one",
    "start": "2529280",
    "end": "2536119"
  },
  {
    "text": "depends on the other you can actually get a deadlock in a single-threaded program initializing this code it's it's",
    "start": "2536119",
    "end": "2545240"
  },
  {
    "text": "mad insanity I have no idea what's going on here basically the problem is that objects stuff and",
    "start": "2545240",
    "end": "2551869"
  },
  {
    "text": "object more their objects so they have locks inside of them that are used to",
    "start": "2551869",
    "end": "2557900"
  },
  {
    "text": "linearize their construction right because objects are Singleton's so they have to have locks inside of them",
    "start": "2557900",
    "end": "2563720"
  },
  {
    "text": "otherwise if you create them concurrently you could end up with multiple instances so those locks can",
    "start": "2563720",
    "end": "2568970"
  },
  {
    "text": "sometimes get deadlocked with the locks of the inner objects inside of them depending on the order that things get accessed in and this can be a real real",
    "start": "2568970",
    "end": "2576529"
  },
  {
    "text": "hair raiser it happens a lot when you have objects within objects within objects between objects especially if there's a lazy",
    "start": "2576529",
    "end": "2582140"
  },
  {
    "text": "battle sitting at the top so this this has bitten us a few times basically the",
    "start": "2582140",
    "end": "2588859"
  },
  {
    "start": "2586000",
    "end": "2608000"
  },
  {
    "text": "way you recognize this problem deadlocks seems obvious just do a stack dump if",
    "start": "2588859",
    "end": "2596749"
  },
  {
    "text": "you see a deadly if you see a deadlock in your program initialization especially if it's a non-deterministic",
    "start": "2596749",
    "end": "2602089"
  },
  {
    "text": "deadlock in your program initialization you might have a lock order issue with",
    "start": "2602089",
    "end": "2607490"
  },
  {
    "text": "your objects very very very peculiar the solution Val instead of lazy Val yeh",
    "start": "2607490",
    "end": "2617420"
  },
  {
    "start": "2608000",
    "end": "2674000"
  },
  {
    "text": "Scala you just you just have to be really careful about which one of these",
    "start": "2617420",
    "end": "2622489"
  },
  {
    "text": "you're using in general lazy Val is the right thing to do because it avoids the omit order problems but it creates an in",
    "start": "2622489",
    "end": "2627799"
  },
  {
    "text": "order problems with the locking because lazy Val is just like object so base the the trend that we have followed in using",
    "start": "2627799",
    "end": "2635749"
  },
  {
    "text": "the cake pattern a Precog is we we start off with Def and then when we discover",
    "start": "2635749",
    "end": "2642079"
  },
  {
    "text": "that creating a bazillion of these things is a bad idea we move to lazy Val and then when we discover that things",
    "start": "2642079",
    "end": "2648200"
  },
  {
    "text": "are getting deadlocked on this particularly lazy Val we move to Val and then we discover that that val is null",
    "start": "2648200",
    "end": "2655009"
  },
  {
    "text": "sometimes in the initialization pattern and then we cry and generally move back to lazy val very carefully so it's this",
    "start": "2655009",
    "end": "2662359"
  },
  {
    "text": "it's this horrifying horrifying cycle be very careful of these two these two play",
    "start": "2662359",
    "end": "2668960"
  },
  {
    "text": "off each other in horrible ways basically they know the transformation is is trivial",
    "start": "2668960",
    "end": "2674440"
  },
  {
    "start": "2674000",
    "end": "2707000"
  },
  {
    "text": "other issues you're gonna run into using the cake pattern compilation time sucks this is true of Scala in general it's",
    "start": "2674440",
    "end": "2681499"
  },
  {
    "text": "more true if you're using the cake pattern the Quirrell compiler was at 1.9 source files that took three",
    "start": "2681499",
    "end": "2689680"
  },
  {
    "text": "and a half minutes to compile yeah SBT",
    "start": "2689680",
    "end": "2694780"
  },
  {
    "text": "is great okay if it were not for the incremental compiler I would have wasted man years but sometimes like even SBT",
    "start": "2694780",
    "end": "2702340"
  },
  {
    "text": "can't filter all of this stuff out and it has to recompile the universe and it can be terrible compilation bugs",
    "start": "2702340",
    "end": "2710400"
  },
  {
    "start": "2707000",
    "end": "2736000"
  },
  {
    "text": "surprise Scala see has bugs in it and you will hit a lot of these bugs when",
    "start": "2710400",
    "end": "2716020"
  },
  {
    "text": "doing really dodgy things with the type system where dodgy means more complicated and existential the",
    "start": "2716020",
    "end": "2722830"
  },
  {
    "text": "presentation compiler is a really big offender here presentation compiler still does not work correctly with the",
    "start": "2722830",
    "end": "2727990"
  },
  {
    "text": "cake pattern so if you're using enzyme put it on the shelf because the cake",
    "start": "2727990",
    "end": "2733090"
  },
  {
    "text": "pattern is going to destroy your type errors the not presentation compiler",
    "start": "2733090",
    "end": "2738460"
  },
  {
    "start": "2736000",
    "end": "2972000"
  },
  {
    "text": "isn't very much happier sometimes I've gotten type errors that are just utterly bizarre and and",
    "start": "2738460",
    "end": "2745090"
  },
  {
    "text": "sometimes you just have to work with it SBT also has some issues with this I",
    "start": "2745090",
    "end": "2750250"
  },
  {
    "text": "think they have been resolved in more recent versions of SBT but in SBT ODOT",
    "start": "2750250",
    "end": "2755590"
  },
  {
    "text": "11 there's this really hilarious problem where incremental recompilation of things that don't need to be pretty",
    "start": "2755590",
    "end": "2761380"
  },
  {
    "text": "compiled can sometimes cause them to change or can sometimes leave stale class files lying around that then get",
    "start": "2761380",
    "end": "2768340"
  },
  {
    "text": "caked together and don't break but cause your program to have the wrong semantics which is the best thing ever right you",
    "start": "2768340",
    "end": "2774910"
  },
  {
    "text": "you run your program and then you get the wrong answer and you're trying to figure out why and it just turns out that you had stale class files really",
    "start": "2774910",
    "end": "2780220"
  },
  {
    "text": "bizarre finally Scala doc is is yeah",
    "start": "2780220",
    "end": "2785980"
  },
  {
    "text": "Scala doc doesn't deal with the cake pattern very well so if you care at all about API documentation this is this is",
    "start": "2785980",
    "end": "2794650"
  },
  {
    "text": "something to be aware of so I have some slides that that dig into best practices",
    "start": "2794650",
    "end": "2800050"
  },
  {
    "text": "and things that I think are important but I think we're running short on time so I'd rather open it up for questions",
    "start": "2800050",
    "end": "2806320"
  },
  {
    "text": "at this point so the question is do we use packages at all or do we just have",
    "start": "2806320",
    "end": "2811960"
  },
  {
    "text": "one big flat one and the answer is yes we do use packages we use them as named prefixes so",
    "start": "2811960",
    "end": "2819309"
  },
  {
    "text": "it's just it's easier to organize things yeah you organize the modules themselves using packages because I don't know then",
    "start": "2819309",
    "end": "2826569"
  },
  {
    "text": "your namespace is a little cleaner when you're trying to take things together and I think we could very easily do",
    "start": "2826569",
    "end": "2832599"
  },
  {
    "text": "without packages and it wouldn't be too much of a big deal so I'm not using",
    "start": "2832599",
    "end": "2837699"
  },
  {
    "text": "self-types I'm using extends the reason for this is extends is a lot more controlled extends in with you actually",
    "start": "2837699",
    "end": "2844989"
  },
  {
    "text": "have a sane ordering you can actually put things together in whatever order you want I was talking with Roland about",
    "start": "2844989",
    "end": "2850659"
  },
  {
    "text": "this earlier today actually self-types cell types have a tendency to to put the thing you're extending first which can",
    "start": "2850659",
    "end": "2857829"
  },
  {
    "text": "mess up your linearization and can make things a little bit surprising sometimes in the order that they're put together there's also the fact that with",
    "start": "2857829",
    "end": "2865839"
  },
  {
    "text": "self-types you really can't have more than one so it'll self-types only make",
    "start": "2865839",
    "end": "2871150"
  },
  {
    "text": "sense when you are trying to say I am of this right I'm always going to be of this and this is the one thing I'm going",
    "start": "2871150",
    "end": "2876669"
  },
  {
    "text": "to be so I used them with virtual classes because I think with virtual",
    "start": "2876669",
    "end": "2881769"
  },
  {
    "text": "classes they semantically make sense but for actual caking of things together I think extends and with are more",
    "start": "2881769",
    "end": "2887229"
  },
  {
    "text": "powerful and more controlled so have we thought about using abstract classes and early initializers to to solve the",
    "start": "2887229",
    "end": "2893589"
  },
  {
    "text": "problems of initialization answer yes and we do and I didn't have time to talk about it yeah so that that's like the that's like",
    "start": "2893589",
    "end": "2900880"
  },
  {
    "text": "the nuclear option to this is take your trait and turn it into an abstract class",
    "start": "2900880",
    "end": "2906059"
  },
  {
    "text": "problems with Scala c29 or 210 right now the Precog code base is on 2 9 3 or",
    "start": "2906059",
    "end": "2911859"
  },
  {
    "text": "whatever the latest is we haven't upgraded to 210 yet I have seen a lot of",
    "start": "2911859",
    "end": "2918429"
  },
  {
    "text": "these issues with 210 when we find bugs what we try to do is we try to minimize them so that we can know what to do within our code base and then I 10 I try",
    "start": "2918429",
    "end": "2925509"
  },
  {
    "text": "to take it against the latest master of Scala C and reproduce it as well most of the bugs that we have run into have been",
    "start": "2925509",
    "end": "2931119"
  },
  {
    "text": "reproducible against Scala 210 though some of them under fix now the",
    "start": "2931119",
    "end": "2936640"
  },
  {
    "text": "initialization problems to performance problems the locking problems are identical between objects and lazy valves that is correct which is why that",
    "start": "2936640",
    "end": "2943299"
  },
  {
    "text": "slide is so hilarious so to get around the the earlier net problem you have to use lazy valor object but to get around",
    "start": "2943299",
    "end": "2949209"
  },
  {
    "text": "the locking problem you has to use valve so they are in conflict and sometimes that",
    "start": "2949209",
    "end": "2954330"
  },
  {
    "text": "really ties you in circles okay thank you very very very much for your time",
    "start": "2954330",
    "end": "2962100"
  }
]