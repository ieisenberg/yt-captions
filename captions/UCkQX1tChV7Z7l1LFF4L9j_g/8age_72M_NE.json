[
  {
    "start": "0",
    "end": "84000"
  },
  {
    "text": "I'm doggin and today I'm going to share with you how I see distributed systems",
    "start": "4270",
    "end": "11010"
  },
  {
    "text": "evolving on kubernetes why me because I",
    "start": "11010",
    "end": "17500"
  },
  {
    "text": "work for Red Hat and there I have been a consultant an arch deck working with",
    "start": "17500",
    "end": "23020"
  },
  {
    "text": "distributed systems using apache camel apache camo is a very popular framework",
    "start": "23020",
    "end": "28689"
  },
  {
    "text": "in the java ecosystem for doing integrations and i'm committer I have a book about patch camel and in the latest",
    "start": "28689",
    "end": "38109"
  },
  {
    "text": "years I've used kubernetes I also have talked about hate so I've been at the intersection of distributed systems and",
    "start": "38109",
    "end": "43539"
  },
  {
    "text": "cornetist first I want to start with quite a question what comes after",
    "start": "43539",
    "end": "49149"
  },
  {
    "text": "micro-services I'm sure you all have an answer to that and I have mine too and",
    "start": "49149",
    "end": "55210"
  },
  {
    "text": "you'll find out at the end what what I think and that will be to get there I",
    "start": "55210",
    "end": "61749"
  },
  {
    "text": "suggest we look at what are the needs of the distributed systems and how those",
    "start": "61749",
    "end": "67270"
  },
  {
    "text": "needs have been evolving over the year starting with monolithic applications through kubernetes and with more recent",
    "start": "67270",
    "end": "74290"
  },
  {
    "text": "projects such as dapper and East York a native how they are changing the way we",
    "start": "74290",
    "end": "79570"
  },
  {
    "text": "do distributed systems and we will try to do some predictions about the future and to set a little more context on on",
    "start": "79570",
    "end": "87520"
  },
  {
    "start": "84000",
    "end": "84000"
  },
  {
    "text": "this talk when I say distributed systems what I have in mind is systems composed of multiple components hundreds of those",
    "start": "87520",
    "end": "94810"
  },
  {
    "text": "these components can be stateful stateless they can be server less components created in different",
    "start": "94810",
    "end": "102039"
  },
  {
    "text": "languages running on different environments and components created",
    "start": "102039",
    "end": "107079"
  },
  {
    "text": "using open-source technologies open standards interoperable I'm sure you can create such systems using closed source",
    "start": "107079",
    "end": "113469"
  },
  {
    "text": "software you can create them on AWS and other places but for this talk specifically I am looking for the",
    "start": "113469",
    "end": "121299"
  },
  {
    "text": "kubernetes ecosystem and how you can create those on Coronets ecosystem so",
    "start": "121299",
    "end": "126640"
  },
  {
    "text": "let's start with the needs of a distributed systems and what I have in mind is let's say we want to create",
    "start": "126640",
    "end": "133390"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "an application or service we want to write some kind of business logic what else do we need from the platform from",
    "start": "133390",
    "end": "139420"
  },
  {
    "text": "our room time to create the distributed systems and I would say at the at the",
    "start": "139420",
    "end": "144790"
  },
  {
    "text": "foundation at the beginning is we want some kind of lifecycle lifecycle",
    "start": "144790",
    "end": "150700"
  },
  {
    "text": "capabilities and what I have in mind is when you write your application in any language then we want to have ability to",
    "start": "150700",
    "end": "157480"
  },
  {
    "text": "package to deploy that application reliably to do row backs health checks be able to place the application on",
    "start": "157480",
    "end": "164500"
  },
  {
    "text": "different nodes and be able to do resource isolation scaling configuration",
    "start": "164500",
    "end": "171370"
  },
  {
    "text": "management all of these needs these are the very first things you would need to create a distributed application the",
    "start": "171370",
    "end": "178060"
  },
  {
    "text": "second pillar I would say is around networking so once we have an application we want it to be reliably",
    "start": "178060",
    "end": "184710"
  },
  {
    "text": "connect to other services whether these are within the cluster or in the outside",
    "start": "184710",
    "end": "190750"
  },
  {
    "text": "world so we won't have the ability such as service discovery load balancing we",
    "start": "190750",
    "end": "196180"
  },
  {
    "text": "want to be able to do traffic shifting whether that's for different release strategies or for some other reasons and",
    "start": "196180",
    "end": "202830"
  },
  {
    "text": "then we won't have a ability to do a resilient communication with other systems whether that is to retries",
    "start": "202830",
    "end": "209650"
  },
  {
    "text": "timeout circuit breakers of course and have security in place and get good",
    "start": "209650",
    "end": "216760"
  },
  {
    "text": "monitoring tracing observability and all that once we have networking I would say",
    "start": "216760",
    "end": "222850"
  },
  {
    "text": "the next thing is we want to have ability to talk to different API",
    "start": "222850",
    "end": "228060"
  },
  {
    "text": "endpoints so binding resource binding be able to talk different protocols",
    "start": "228060",
    "end": "234670"
  },
  {
    "text": "different data formats maybe even able to do transforming from one data format",
    "start": "234670",
    "end": "240310"
  },
  {
    "text": "to another one I would include here also things such as light filtering so when",
    "start": "240310",
    "end": "245470"
  },
  {
    "text": "we subscribe to topic maybe we are interested only from certain events what",
    "start": "245470",
    "end": "251980"
  },
  {
    "text": "do you think is the last category it is state so you know when I say state and",
    "start": "251980",
    "end": "258489"
  },
  {
    "text": "stateful abstractions not talking about the actual management of states",
    "start": "258489",
    "end": "263580"
  },
  {
    "text": "as what the database does or a file system I'm talking more about developer",
    "start": "263580",
    "end": "269729"
  },
  {
    "text": "abstractions that behind-the-scene rely on state so probably you need to have",
    "start": "269729",
    "end": "275729"
  },
  {
    "text": "ability to do workflow management maybe you want to manage long-running processes you want to do temporal",
    "start": "275729",
    "end": "283050"
  },
  {
    "text": "scheduling so some kind of cron job to run your service periodically maybe you",
    "start": "283050",
    "end": "288120"
  },
  {
    "text": "want to do also distributed caching you want to have idempotency be able to do",
    "start": "288120",
    "end": "295530"
  },
  {
    "text": "row backs all of these are would say developer level primitives but behind the scene they rely on having some kind",
    "start": "295530",
    "end": "302250"
  },
  {
    "text": "of state so you want to have these kind of abstractions in Europe in your disposal to create a good distributed",
    "start": "302250",
    "end": "308580"
  },
  {
    "text": "systems and throughout this talk we will use these frameworks to evaluate how",
    "start": "308580",
    "end": "313770"
  },
  {
    "text": "these needs have been changing on kubernetes and with other projects if we",
    "start": "313770",
    "end": "320069"
  },
  {
    "text": "start with the monolithic architectures and how we get those capabilities the",
    "start": "320069",
    "end": "325080"
  },
  {
    "start": "323000",
    "end": "323000"
  },
  {
    "text": "very very first thing is when I say monolith I have in mind in the context",
    "start": "325080",
    "end": "332129"
  },
  {
    "text": "of distributed application that is the ESB so es bees are quite powerful and",
    "start": "332129",
    "end": "338159"
  },
  {
    "text": "when we check our list of needs we would say that is bees had a very good support",
    "start": "338159",
    "end": "343379"
  },
  {
    "text": "force all kind of stateful abstractions so you could do the orchestration of long chronic processes you can do",
    "start": "343379",
    "end": "349889"
  },
  {
    "text": "distributed transactions rollbacks at importancy they also have very good",
    "start": "349889",
    "end": "355259"
  },
  {
    "text": "resource binding capabilities so the nice be will have hundreds of connectors they can do all kind of transformation",
    "start": "355259",
    "end": "362009"
  },
  {
    "text": "orchestration and even networking capabilities so needs be can do service",
    "start": "362009",
    "end": "370020"
  },
  {
    "text": "discovery it can do load balancing it has all things around resiliency of the",
    "start": "370020",
    "end": "376050"
  },
  {
    "text": "networking connection so it can do retry etc probably because the by nature in",
    "start": "376050",
    "end": "381569"
  },
  {
    "text": "ESB is not very distributed it doesn't need very advanced networking and release capabilities but where is Bill",
    "start": "381569",
    "end": "389129"
  },
  {
    "start": "389000",
    "end": "389000"
  },
  {
    "text": "Lux is primarily primarily around our lifecycle management because it's a",
    "start": "389129",
    "end": "394649"
  },
  {
    "text": "single runtime the first thing is you are limited to using a single language and that's typically the language that the actual",
    "start": "394649",
    "end": "400940"
  },
  {
    "text": "runtime is created in whether that's like Java or.net or something else then",
    "start": "400940",
    "end": "406430"
  },
  {
    "text": "because it's a again because it's a single runtime that means we cannot do",
    "start": "406430",
    "end": "411830"
  },
  {
    "text": "easily the clarity of deployments we cannot do automatic placement the",
    "start": "411830",
    "end": "417800"
  },
  {
    "text": "deployments are quite big quite heavy so usually involve a human interaction another difficulty with such a",
    "start": "417800",
    "end": "424670"
  },
  {
    "text": "monolithic architecture is around scaling we cannot scale individual bits and last but not least around isolation",
    "start": "424670",
    "end": "430880"
  },
  {
    "text": "whether that's resource isolation fault isolation so none of these can be done with the monolithic architectures and",
    "start": "430880",
    "end": "436820"
  },
  {
    "text": "from our needs framework point of view I would say there has been small oolitic architectures don't qualify next I",
    "start": "436820",
    "end": "445580"
  },
  {
    "text": "suggest we look at cloud native architectures and how those needs have",
    "start": "445580",
    "end": "450710"
  },
  {
    "text": "been changing if you look at how it's very very high-level how those",
    "start": "450710",
    "end": "456140"
  },
  {
    "start": "452000",
    "end": "452000"
  },
  {
    "text": "architectures have been changing out say cloud native probably started with with",
    "start": "456140",
    "end": "462200"
  },
  {
    "text": "the micro services movement so micro services allow us to split the monolithic application by business",
    "start": "462200",
    "end": "468440"
  },
  {
    "text": "domain and it turned out that containers and kubernetes are actually a good",
    "start": "468440",
    "end": "473750"
  },
  {
    "text": "platform for managing those micro services let's see some of the concrete",
    "start": "473750",
    "end": "479050"
  },
  {
    "text": "features and capabilities that kubernetes becomes particularly attractive for micro services I would",
    "start": "479050",
    "end": "487700"
  },
  {
    "start": "487000",
    "end": "487000"
  },
  {
    "text": "say at the very beginning that is the ability to do health crops so that's something that kubernetes made popular",
    "start": "487700",
    "end": "494720"
  },
  {
    "text": "and in practice it means when you deploy a container in a pod kubernetes will",
    "start": "494720",
    "end": "500570"
  },
  {
    "text": "check the health of your process but typically that process model is not good enough so you still may have a process",
    "start": "500570",
    "end": "508280"
  },
  {
    "text": "that's up and running but it's not healthy so that's why there is also the option of using readiness and liveness",
    "start": "508280",
    "end": "514849"
  },
  {
    "text": "checks so kubernetes will do readiness check to decide when your application is ready to accept traffic during startup it will do",
    "start": "514849",
    "end": "521780"
  },
  {
    "text": "liveness check to continuously check the health of your now before kubernetes this wasn't very",
    "start": "521780",
    "end": "528959"
  },
  {
    "text": "popular but today almost all languages all frameworks tall runtimes have health",
    "start": "528959",
    "end": "534149"
  },
  {
    "text": "checking capabilities where you can easily start an endpoint the next thing",
    "start": "534149",
    "end": "540779"
  },
  {
    "start": "540000",
    "end": "540000"
  },
  {
    "text": "that kubernetes introduced is around managed lifecycle of your application",
    "start": "540779",
    "end": "546180"
  },
  {
    "text": "what I mean here is you are not any longer in control when your service will",
    "start": "546180",
    "end": "552149"
  },
  {
    "text": "start up and when it will shut down you kind of trust the platform to do that and kubernetes can start up your",
    "start": "552149",
    "end": "560339"
  },
  {
    "text": "application it can shut it down move it around on the different nodes and for that to work you have to implement",
    "start": "560339",
    "end": "566160"
  },
  {
    "text": "properly the events that the platform is telling you during startup and shutdown",
    "start": "566160",
    "end": "571910"
  },
  {
    "text": "another thing that and again kubernetes made popular is around deployments and",
    "start": "571910",
    "end": "577800"
  },
  {
    "start": "573000",
    "end": "573000"
  },
  {
    "text": "having those declaratively that means you don't have to anymore start the service check the logs but it has",
    "start": "577800",
    "end": "583800"
  },
  {
    "text": "started you don't have to manually upgrade instances kubernetes with",
    "start": "583800",
    "end": "589379"
  },
  {
    "text": "declarative deployments can do that for you it can depending on the strategy you",
    "start": "589379",
    "end": "594660"
  },
  {
    "text": "chose it can stop all the instance he start new ones if something goes wrong",
    "start": "594660",
    "end": "599699"
  },
  {
    "text": "it can roll back etc another thing is around declaring your resource demands",
    "start": "599699",
    "end": "608850"
  },
  {
    "start": "604000",
    "end": "604000"
  },
  {
    "text": "so when you create as a service you containerize it it is a good practice to",
    "start": "608850",
    "end": "614220"
  },
  {
    "text": "tell the platform how much CPU and memory that service will require and kubernetes uses that knowledge to find",
    "start": "614220",
    "end": "621779"
  },
  {
    "text": "best note for your workloads before kubernetes we kind of had to manually",
    "start": "621779",
    "end": "628889"
  },
  {
    "text": "place an instance to note based on our criteria but now we can guide kubernetes",
    "start": "628889",
    "end": "634620"
  },
  {
    "text": "with our preferences and it will make the best decision for us and at the very",
    "start": "634620",
    "end": "640649"
  },
  {
    "start": "640000",
    "end": "640000"
  },
  {
    "text": "end I would say configuration management nowadays on kubernetes you can do poly",
    "start": "640649",
    "end": "646889"
  },
  {
    "text": "poly cloud configuration management so you don't need in your application runtime anything to do configuration GU Capcom",
    "start": "646889",
    "end": "654270"
  },
  {
    "text": "kubernetes will make sure that the configurations are end up on the same",
    "start": "654270",
    "end": "659430"
  },
  {
    "text": "node where your workload is and the configurations are mapped as a volume or",
    "start": "659430",
    "end": "664680"
  },
  {
    "text": "environment variable ready for your application to use and it turns out",
    "start": "664680",
    "end": "670920"
  },
  {
    "start": "669000",
    "end": "669000"
  },
  {
    "text": "those specific capabilities I just talked about they are also related for example if you",
    "start": "670920",
    "end": "678960"
  },
  {
    "text": "want to do automatic placement you have to tell kubernetes what are the resource",
    "start": "678960",
    "end": "685830"
  },
  {
    "text": "requirements of your service then you have to tell it what are.what deployment strategy to use in order for the",
    "start": "685830",
    "end": "692250"
  },
  {
    "text": "strategy to work properly your application has to implement the events coming from the environment it has to",
    "start": "692250",
    "end": "697740"
  },
  {
    "text": "implement health checks but once you put all of these best practices once you use all these capabilities your application",
    "start": "697740",
    "end": "705090"
  },
  {
    "text": "becomes a good cloud native citizen and it's ready for automation on kubernetes",
    "start": "705090",
    "end": "710640"
  },
  {
    "text": "and in my view this represents the foundational patterns for running up",
    "start": "710640",
    "end": "717270"
  },
  {
    "text": "walls on kubernetes then there are other patterns such structuring the containers",
    "start": "717270",
    "end": "722640"
  },
  {
    "text": "in a pot doing configuration management and behavioral the next topic I want to",
    "start": "722640",
    "end": "731580"
  },
  {
    "start": "730000",
    "end": "730000"
  },
  {
    "text": "briefly cover is around workload so we said from lifecycle point of view we want to be able to run different kind of",
    "start": "731580",
    "end": "737760"
  },
  {
    "text": "workloads and we can do that on kubernetes too so running 12 factor apps",
    "start": "737760",
    "end": "743420"
  },
  {
    "text": "stateless microservices is it's pretty easy and kubernetes can do that but",
    "start": "743420",
    "end": "749130"
  },
  {
    "text": "that's not the only kind of workload you will have probably you will also have stateful workloads and you can do that",
    "start": "749130",
    "end": "754860"
  },
  {
    "text": "on kubernetes using a stateful set another kind of workers you may have is",
    "start": "754860",
    "end": "760740"
  },
  {
    "text": "a singleton maybe you want an instance of an app to be there to be only one",
    "start": "760740",
    "end": "766530"
  },
  {
    "text": "instance of your app throughout the whole cluster and you want it to be a reliable singleton so when it fails it",
    "start": "766530",
    "end": "772350"
  },
  {
    "text": "should be started up and you can choose between stateful set and replica sets",
    "start": "772350",
    "end": "777540"
  },
  {
    "text": "depending on your needs whether you want to single to have at least one or at most one",
    "start": "777540",
    "end": "783769"
  },
  {
    "text": "semantics another kind of work like you may have is round jobs and cron jobs so",
    "start": "783769",
    "end": "788779"
  },
  {
    "text": "with kubernetes you can do those as well if we map all of these kubernetes",
    "start": "788779",
    "end": "795769"
  },
  {
    "start": "794000",
    "end": "794000"
  },
  {
    "text": "features to our needs we've been talking about I will say kubernetes the satisfy",
    "start": "795769",
    "end": "802699"
  },
  {
    "text": "really well the life cycle needs we've been talking about and in fact the list of needs I created I primarily driven by",
    "start": "802699",
    "end": "809809"
  },
  {
    "text": "what kubernetes provides us today and these are kind of expected capabilities from any platform kubernetes can do for",
    "start": "809809",
    "end": "816410"
  },
  {
    "text": "you deployment placement configuration management resource our isolation failure isolation and it supports",
    "start": "816410",
    "end": "823790"
  },
  {
    "text": "different kind of workloads accept service on its own then if that's all",
    "start": "823790",
    "end": "833540"
  },
  {
    "text": "what Cooper natives gives for developers how do we extend kubernetes how can we",
    "start": "833540",
    "end": "840620"
  },
  {
    "text": "make it give us more features so I want to briefly talk about two main ways that",
    "start": "840620",
    "end": "846170"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "are used today the first thing is the concept of a pod so port is an abstraction used to deploy",
    "start": "846170",
    "end": "853370"
  },
  {
    "text": "containers on nodes and the pod gives us two set of guarantees the first set is",
    "start": "853370",
    "end": "859610"
  },
  {
    "text": "deployment guarantees so all containers in a pod always end up on the same node that means they can communicate with",
    "start": "859610",
    "end": "866180"
  },
  {
    "text": "each other over localhost or asynchronous using the file system or through some other IPC mechanism and the",
    "start": "866180",
    "end": "874069"
  },
  {
    "text": "other set of guarantees a pod gives us is around lifecycle not all containers",
    "start": "874069",
    "end": "879379"
  },
  {
    "text": "within a port are equal so depending if you are using in each containers or application containers you get different",
    "start": "879379",
    "end": "885410"
  },
  {
    "text": "guarantees for example you need containers are run at the beginning when",
    "start": "885410",
    "end": "890509"
  },
  {
    "text": "a poll stars they run sequentially one after another and they run only if the",
    "start": "890509",
    "end": "895730"
  },
  {
    "text": "previous container has completed successfully so they are good for implementing some kind of workflow logic",
    "start": "895730",
    "end": "901999"
  },
  {
    "text": "driven by containers and application containers then they run in parallel they run throughout the lifecycle of the",
    "start": "901999",
    "end": "908629"
  },
  {
    "text": "pod and this is where the sidecar pattern comes in the sidecar is the ability to run",
    "start": "908629",
    "end": "915510"
  },
  {
    "text": "multiple containers that cooperate with each other and jointly provide value to",
    "start": "915510",
    "end": "922590"
  },
  {
    "text": "the user that's one of the primary mechanisms we see nowadays for extending",
    "start": "922590",
    "end": "927960"
  },
  {
    "text": "kubernetes with additional capabilities in order to explain the next the next",
    "start": "927960",
    "end": "933330"
  },
  {
    "text": "capability I have to briefly tell you how cornetist works internally and it is based on the reconciliation loop so the",
    "start": "933330",
    "end": "941370"
  },
  {
    "text": "idea if the reconciliation loop is to drive the desired state to the actual state and within kubernetes there are",
    "start": "941370",
    "end": "948540"
  },
  {
    "text": "many bits that rely on that for example when you say I want two instances of a",
    "start": "948540",
    "end": "954900"
  },
  {
    "text": "port this is the desire state of your system and there is a control loop that",
    "start": "954900",
    "end": "961710"
  },
  {
    "text": "constantly around and check if there are two instances of your port and if there are not two instances if there is one or",
    "start": "961710",
    "end": "967350"
  },
  {
    "text": "more than two it will calculate the difference and it will make sure that there are two instances so this there",
    "start": "967350",
    "end": "974040"
  },
  {
    "text": "are many examples of this some are like replica set stateful set you can see the",
    "start": "974040",
    "end": "980220"
  },
  {
    "text": "resource definition maps to what the controller is so there is a controller for each resource definition and and",
    "start": "980220",
    "end": "988140"
  },
  {
    "text": "this controller makes sure that the real world matches the desired one and you can write your own custom controller",
    "start": "988140",
    "end": "994260"
  },
  {
    "text": "let's say you have an application that's running in a port and it cannot load",
    "start": "994260",
    "end": "999440"
  },
  {
    "text": "configuration file changes at run times so you can write the custom controller that the text every time a config map",
    "start": "999440",
    "end": "1006230"
  },
  {
    "text": "changes it restarts your pod so that your application is restarted and it can pick up configuration changes at startup",
    "start": "1006230",
    "end": "1014360"
  },
  {
    "text": "that would be an example of a custom controller now it turns out that even",
    "start": "1014360",
    "end": "1020360"
  },
  {
    "text": "though kubernetes have a good collection of resources that they are not enough for all the different needs you may have",
    "start": "1020360",
    "end": "1027410"
  },
  {
    "text": "so kubernetes introduced the concept of custom resource definitions that means",
    "start": "1027410",
    "end": "1032750"
  },
  {
    "text": "you can go in the model your requirements and define an API that",
    "start": "1032750",
    "end": "1037819"
  },
  {
    "text": "lives within kubernetes it lives next to other kubernetes native resources",
    "start": "1037820",
    "end": "1043230"
  },
  {
    "text": "and you can write your own controller in any language that understands your model so you can design something like a",
    "start": "1043230",
    "end": "1049950"
  },
  {
    "text": "config voter implemented in Java that describes what we described earlier and",
    "start": "1049950",
    "end": "1056490"
  },
  {
    "text": "that is what operator patterns is so Pareto pattern is a controller that",
    "start": "1056490",
    "end": "1062160"
  },
  {
    "text": "works with the custom resource definitions and today we see lots of operator coming up and that's the second",
    "start": "1062160",
    "end": "1068880"
  },
  {
    "text": "way for extending kubernetes with additional capabilities next I want to",
    "start": "1068880",
    "end": "1075809"
  },
  {
    "text": "briefly go over a few platforms that are built on top of kubernetes and they are",
    "start": "1075809",
    "end": "1080910"
  },
  {
    "text": "using heavily sidecars and operators to give additional capabilities to",
    "start": "1080910",
    "end": "1086250"
  },
  {
    "text": "developers around distributed systems and I want to start with the service mesh so what is a service mesh let's say",
    "start": "1086250",
    "end": "1093480"
  },
  {
    "start": "1089000",
    "end": "1089000"
  },
  {
    "text": "we have two services service a that wants to call service B it can be in any language that's basically our",
    "start": "1093480",
    "end": "1099470"
  },
  {
    "text": "application workload what service mesh does is using sidecar controllers a",
    "start": "1099470",
    "end": "1105600"
  },
  {
    "text": "service mesh injects proxy next to our service so you end up with two",
    "start": "1105600",
    "end": "1112260"
  },
  {
    "text": "containers in the pod and the proxy is a transparent one so your application is",
    "start": "1112260",
    "end": "1117630"
  },
  {
    "text": "completely unaware that there is a proxy that is intercepting all incoming and outgoing traffic and the proxy acts as",
    "start": "1117630",
    "end": "1127040"
  },
  {
    "text": "also as a data firewall the collection of these service proxies represent your",
    "start": "1127040",
    "end": "1133919"
  },
  {
    "text": "data plane now this proxies are small they're stateless and in order to get",
    "start": "1133919",
    "end": "1139500"
  },
  {
    "text": "all the state and configuration they they rely on the control plane the",
    "start": "1139500",
    "end": "1144570"
  },
  {
    "text": "control plane is the stateful part that keeps all the configurations it distributes it gathers metrics takes",
    "start": "1144570",
    "end": "1150179"
  },
  {
    "text": "decisions and interacts with the control with the data plane and you can see",
    "start": "1150179",
    "end": "1155370"
  },
  {
    "text": "they're a good choice for different control planes and data planes it turns",
    "start": "1155370",
    "end": "1162450"
  },
  {
    "text": "out we need one more component so we need an API gateway in order to get data into our cluster some service measures",
    "start": "1162450",
    "end": "1169260"
  },
  {
    "text": "have their own API gateway and some you third party but but all of these",
    "start": "1169260",
    "end": "1174600"
  },
  {
    "text": "components if we look into those they provide the capabilities we need so an",
    "start": "1174600",
    "end": "1181110"
  },
  {
    "start": "1180000",
    "end": "1180000"
  },
  {
    "text": "API gateway it is primarily focused to abstract the implementation of our",
    "start": "1181110",
    "end": "1187560"
  },
  {
    "text": "services so it hides the details and provides borderline capabilities service",
    "start": "1187560",
    "end": "1194520"
  },
  {
    "text": "mesh it's it does the opposite in a way it enhances the visibility and reliability within the cell within the",
    "start": "1194520",
    "end": "1200970"
  },
  {
    "text": "services but jointly we can say that API gateway and service mesh provides all",
    "start": "1200970",
    "end": "1207390"
  },
  {
    "text": "the networking needs we've been talking about so that today in order to get networking capabilities on top of",
    "start": "1207390",
    "end": "1214320"
  },
  {
    "text": "kubernetes using just those services is not enough you need some kind of a static mesh the next project I'm gonna",
    "start": "1214320",
    "end": "1220970"
  },
  {
    "text": "mention is Kay native it's a project started by Google a few years ago and is",
    "start": "1220970",
    "end": "1229170"
  },
  {
    "text": "getting very close to GA eat it is basically a layer on top of kubernetes that gives you service capabilities and",
    "start": "1229170",
    "end": "1237090"
  },
  {
    "text": "it has two main models serving and eventing serving is focused around",
    "start": "1237090",
    "end": "1242340"
  },
  {
    "text": "request reply interactions and eventing is more for event-driven interactions just to give you feel what he is serving",
    "start": "1242340",
    "end": "1250170"
  },
  {
    "start": "1248000",
    "end": "1248000"
  },
  {
    "text": "in serving you defy you define a service but that is different than a kubernetes",
    "start": "1250170",
    "end": "1255900"
  },
  {
    "text": "service - this is a que native service and once you define our workload with the service it you basically get",
    "start": "1255900",
    "end": "1262890"
  },
  {
    "text": "something like a deployment will put with the service characteristics so you don't need to have on instance up and",
    "start": "1262890",
    "end": "1269550"
  },
  {
    "text": "running it can be started from zero when a request arrives so you get several",
    "start": "1269550",
    "end": "1274920"
  },
  {
    "text": "less capabilities it can scale up through a rapidly it can scale down to zero",
    "start": "1274920",
    "end": "1280100"
  },
  {
    "text": "etc to look at the eventing eventing gives us a fully declarative event",
    "start": "1280100",
    "end": "1288600"
  },
  {
    "start": "1283000",
    "end": "1283000"
  },
  {
    "text": "management system so let's assume we have some external systems you want to",
    "start": "1288600",
    "end": "1294120"
  },
  {
    "text": "integrate with some external event producers and at the bottom we",
    "start": "1294120",
    "end": "1299760"
  },
  {
    "text": "have our application in a container that just have an HTTP endpoint with",
    "start": "1299760",
    "end": "1305790"
  },
  {
    "text": "connective eventing we can start a broker we can start the broker that's",
    "start": "1305790",
    "end": "1310980"
  },
  {
    "text": "mapped by let's say Kafka or it can be in memory or some kind of cloud service",
    "start": "1310980",
    "end": "1316050"
  },
  {
    "text": "we can start importers that connect to the external system and import the",
    "start": "1316050",
    "end": "1322290"
  },
  {
    "text": "events into our broker and those importers can be for example based on a",
    "start": "1322290",
    "end": "1327330"
  },
  {
    "text": "Patrick camel which has hundreds of connectors once we have our events going",
    "start": "1327330",
    "end": "1333090"
  },
  {
    "text": "to the broker then again declaratively with the UML file we can subscribe our container to those events and in our",
    "start": "1333090",
    "end": "1340380"
  },
  {
    "text": "container we don't need any kind of messaging client we don't need a Kafka client for example our container would",
    "start": "1340380",
    "end": "1347430"
  },
  {
    "text": "get the events through HTTP POST using cloud events so as you can see this is a",
    "start": "1347430",
    "end": "1352680"
  },
  {
    "text": "fully platform managed messaging infrastructure and you as a developer all you have to do is write your the",
    "start": "1352680",
    "end": "1359630"
  },
  {
    "text": "business code in a container and don't deal with any kind of messaging logic",
    "start": "1359630",
    "end": "1367340"
  },
  {
    "start": "1367000",
    "end": "1367000"
  },
  {
    "text": "from our nice point of view I would say a native satisfies few of those",
    "start": "1367370",
    "end": "1375360"
  },
  {
    "text": "so from lifecycle point of view it gives our workload service capabilities to ability to scale to 0 and scale up scale",
    "start": "1375360",
    "end": "1383900"
  },
  {
    "text": "activate from zero and go up from networking point of view if there is",
    "start": "1383900",
    "end": "1389820"
  },
  {
    "text": "some overlap with the service mesh though the que native can also do things",
    "start": "1389820",
    "end": "1395070"
  },
  {
    "text": "such as traffic shifting from binding point of view it has a pretty good",
    "start": "1395070",
    "end": "1400980"
  },
  {
    "text": "support for binding using K native importers it can gives us pops up or",
    "start": "1400980",
    "end": "1407820"
  },
  {
    "text": "point-to-point interaction or even some kind of sequencing so he eat it satisfied and it's in a few categories",
    "start": "1407820",
    "end": "1416540"
  },
  {
    "text": "the next project I that is again using sidecars",
    "start": "1416900",
    "end": "1423670"
  },
  {
    "text": "operators is dapper Dapper is started by",
    "start": "1423670",
    "end": "1429460"
  },
  {
    "text": "Microsoft only a few months ago but rapidly getting popular and it is basically a distributed systems toolkit",
    "start": "1429460",
    "end": "1436900"
  },
  {
    "text": "as a sidecar so everything in the pod is provided as a sidecar and it has a set",
    "start": "1436900",
    "end": "1443200"
  },
  {
    "text": "of what they call it building blocks all set of capabilities if you look briefly",
    "start": "1443200",
    "end": "1448450"
  },
  {
    "start": "1447000",
    "end": "1447000"
  },
  {
    "text": "what are those capabilities the first set of capabilities are around networking so the Birkin do service",
    "start": "1448450",
    "end": "1454780"
  },
  {
    "text": "discovery and point-to-point integration between services similarly to a service",
    "start": "1454780",
    "end": "1461170"
  },
  {
    "text": "mesh it can also do tracing it can do reliable communication so it can do",
    "start": "1461170",
    "end": "1466990"
  },
  {
    "text": "retries recovery etc the second set of capabilities are around resource binding",
    "start": "1466990",
    "end": "1472090"
  },
  {
    "text": "so it has lots of connectors to cloud api's the different systems and it can",
    "start": "1472090",
    "end": "1481120"
  },
  {
    "text": "also do messaging basically publish/subscribe and add logic but interesting the dapper also introduced",
    "start": "1481120",
    "end": "1488370"
  },
  {
    "text": "introduces the notion of state management so in addition to what Kay native and service Maj gives you that we",
    "start": "1488370",
    "end": "1496390"
  },
  {
    "text": "also have abstraction on top of the state store so you can have key value based interaction with the port that is",
    "start": "1496390",
    "end": "1503410"
  },
  {
    "text": "backed by by the actual storage mechanism so it at a high level at the",
    "start": "1503410",
    "end": "1510310"
  },
  {
    "start": "1508000",
    "end": "1508000"
  },
  {
    "text": "Hearst actuaries you have your application at the very top which can be in any language you can use the client",
    "start": "1510310",
    "end": "1517210"
  },
  {
    "text": "libraries provided by the upper but you don't have to you can just use your the language features to do HTTP and G RPC",
    "start": "1517210",
    "end": "1524920"
  },
  {
    "text": "called the sidecar now the difference to service mesh is that here this dapper",
    "start": "1524920",
    "end": "1530920"
  },
  {
    "text": "sidecar is not a transparent proxy it is an explicit proxy that from your",
    "start": "1530920",
    "end": "1537310"
  },
  {
    "text": "application you have to call and interact with over HTTP or G RPC and",
    "start": "1537310",
    "end": "1542910"
  },
  {
    "text": "depending on what capabilities you need dapper can talk to other systems such as",
    "start": "1542910",
    "end": "1550080"
  },
  {
    "text": "cloud services on kubernetes the tapper deploys as a",
    "start": "1550080",
    "end": "1558190"
  },
  {
    "text": "sidecar but you don't put a pro support outside of kubernetes so it's not only kubernetes and it also has an operator",
    "start": "1558190",
    "end": "1566290"
  },
  {
    "text": "we set sidecars and operators are the primarily extension mechanism and there are few other components to manage",
    "start": "1566290",
    "end": "1572410"
  },
  {
    "text": "certificates to deal with actor based modeling and for injecting the sidecars",
    "start": "1572410",
    "end": "1578140"
  },
  {
    "text": "but but as you can see your workload again interacts with the sidecar and the sidecar does all the magic to talk to",
    "start": "1578140",
    "end": "1585070"
  },
  {
    "text": "other services which can give you some kind of interoperability with different",
    "start": "1585070",
    "end": "1590680"
  },
  {
    "text": "cloud providers and it gives you additional distributed system capabilities if if I were to sum up what",
    "start": "1590680",
    "end": "1601510"
  },
  {
    "start": "1598000",
    "end": "1598000"
  },
  {
    "text": "these projects are giving you we can say that ESB is where the early incarnation",
    "start": "1601510",
    "end": "1609760"
  },
  {
    "text": "of distributed systems where we had centralized control plane we had centralized data plane so it didn't",
    "start": "1609760",
    "end": "1616180"
  },
  {
    "text": "scale really well with cloud native we are going towards there is still",
    "start": "1616180",
    "end": "1621220"
  },
  {
    "text": "centralized control plane but the data plane is decentralized it's highly scalable with good isolation so we",
    "start": "1621220",
    "end": "1629440"
  },
  {
    "text": "always would need kubernetes to do good lifecycle management then on top of that",
    "start": "1629440",
    "end": "1636130"
  },
  {
    "text": "you would need probably one or more add-ons well you mean it is to to do",
    "start": "1636130",
    "end": "1643110"
  },
  {
    "text": "advanced networking you may use K native to do service work loss or tap or to the",
    "start": "1643110",
    "end": "1649510"
  },
  {
    "text": "integration and those from frameworks play nicely with say in comm boy from",
    "start": "1649510",
    "end": "1657910"
  },
  {
    "text": "tapper and Kennedy point of view probably you have to pick one but jointly I would say they are providing",
    "start": "1657910",
    "end": "1665380"
  },
  {
    "text": "what we used to have an ESB in a cloud native way now for the next part I have",
    "start": "1665380",
    "end": "1673900"
  },
  {
    "text": "basically done opinionated list of few projects where I think interesting",
    "start": "1673900",
    "end": "1681670"
  },
  {
    "text": "developments are happening in these areas and I wanna start with a lifecycle so with",
    "start": "1681670",
    "end": "1689120"
  },
  {
    "start": "1686000",
    "end": "1686000"
  },
  {
    "text": "kubernetes you can do actually as we covered we can do good life cycle of",
    "start": "1689120",
    "end": "1694250"
  },
  {
    "text": "your application but that might not be enough for more complex life cycle management for example you may have",
    "start": "1694250",
    "end": "1700220"
  },
  {
    "text": "scenarios where the deployment primitives in kubernetes is not enough for your application if you have a more",
    "start": "1700220",
    "end": "1706100"
  },
  {
    "text": "complex stateful application and in these scenarios you can use the operator pattern so you can use an operator that",
    "start": "1706100",
    "end": "1712549"
  },
  {
    "text": "does a deployment and upgrade where it also backs up maybe the storage of your",
    "start": "1712549",
    "end": "1719559"
  },
  {
    "text": "service to SAS 3 another thing is that you may find out that the actual health",
    "start": "1719559",
    "end": "1726530"
  },
  {
    "text": "checking mechanism in kubernetes is not good enough so if like liveness check and readiness check is not good enough",
    "start": "1726530",
    "end": "1732650"
  },
  {
    "text": "you can use an operator to do more intelligent liveness and readiness check",
    "start": "1732650",
    "end": "1737990"
  },
  {
    "text": "of your application and based on that to do recovery a third area would be auto",
    "start": "1737990",
    "end": "1743480"
  },
  {
    "text": "scaling and tuning so you can have an operator to understand better your",
    "start": "1743480",
    "end": "1749000"
  },
  {
    "text": "application and do it are also tuning on the platform and today there are would",
    "start": "1749000",
    "end": "1755570"
  },
  {
    "text": "say primarily two frameworks for writing operators the coop builder from",
    "start": "1755570",
    "end": "1761260"
  },
  {
    "text": "kubernetes special interest group and the operator SDK which is part of",
    "start": "1761260",
    "end": "1766610"
  },
  {
    "text": "operator framework that I'm more familiar with so operator framework is",
    "start": "1766610",
    "end": "1771669"
  },
  {
    "text": "it's created by Red Hat and it has a few things so there is the operator SDK that lets you write operator there is",
    "start": "1771669",
    "end": "1778580"
  },
  {
    "text": "operator lifecycle manager which is about managing the lifecycle of the operator itself and operator hub where",
    "start": "1778580",
    "end": "1785840"
  },
  {
    "text": "you can publish your operator so if you go that way you'll see the over 100 operators that manage things such as",
    "start": "1785840",
    "end": "1793090"
  },
  {
    "text": "databases message queues monitoring tools etc and I would say from lifecycle",
    "start": "1793090",
    "end": "1800990"
  },
  {
    "text": "space probably operators are the area where most active development is happening right now on the clarinetist",
    "start": "1800990",
    "end": "1807470"
  },
  {
    "text": "ecosystem the next project I picked is Mumbai",
    "start": "1807470",
    "end": "1816579"
  },
  {
    "start": "1811000",
    "end": "1811000"
  },
  {
    "text": "and on the networking side I would say we seen this morning what's happening",
    "start": "1816579",
    "end": "1822789"
  },
  {
    "text": "with service machine sto so there is the introduction of service mesh interfaces specification that will make it easier",
    "start": "1822789",
    "end": "1830079"
  },
  {
    "text": "for you to switch different service mesh implementations there's been some",
    "start": "1830079",
    "end": "1835509"
  },
  {
    "text": "consolidation on East your architecture in the deployment so you don't have to",
    "start": "1835509",
    "end": "1841450"
  },
  {
    "text": "deploy seven ports for the control plane in now you can just deploy once but more",
    "start": "1841450",
    "end": "1847239"
  },
  {
    "text": "interesting Lee is what's happening at the data plane at the core and the end",
    "start": "1847239",
    "end": "1853209"
  },
  {
    "text": "boy project so we see that more and more layer 7 protocols are added to envoi so",
    "start": "1853209",
    "end": "1859619"
  },
  {
    "text": "service mesh is adding support for more protocols such as MongoDB zookeeper my",
    "start": "1859619",
    "end": "1866259"
  },
  {
    "text": "sequel Redis and the most recent one is Kafka and I see that the Kafka community",
    "start": "1866259",
    "end": "1872979"
  },
  {
    "text": "is now for the improving their protocol to make it friendly r4 service meshes so we can expect that there will be even",
    "start": "1872979",
    "end": "1879669"
  },
  {
    "text": "more tight integration more capabilities so most likely there will be some kind of bridging capability so in your",
    "start": "1879669",
    "end": "1886479"
  },
  {
    "text": "service you can do an HTTP call locally from your application and the proxy will",
    "start": "1886479",
    "end": "1892149"
  },
  {
    "text": "behind the scene can use Kafka so you can do things such as transformation",
    "start": "1892149",
    "end": "1897789"
  },
  {
    "text": "encryption outside of your application in a sidecar for the Kafka protocol",
    "start": "1897789",
    "end": "1904200"
  },
  {
    "text": "another interesting development has been the introduction of HTTP caching so now",
    "start": "1904200",
    "end": "1910320"
  },
  {
    "text": "envoi can do HTTP caching you don't have to use caching clients within your",
    "start": "1910320",
    "end": "1917109"
  },
  {
    "text": "applications all of that is done transparently in a sidecar there are top",
    "start": "1917109",
    "end": "1924309"
  },
  {
    "text": "filters so you can tap the traffic and get the copy of the traffic and most",
    "start": "1924309",
    "end": "1929469"
  },
  {
    "text": "recently the introduction of webassembly that means if you want to write some kind of custom filter for my you don't",
    "start": "1929469",
    "end": "1936579"
  },
  {
    "text": "have to write it in C++ and compile the whole my runtime",
    "start": "1936579",
    "end": "1941929"
  },
  {
    "text": "can write your filter in webassembly and deploy that at runtime and I would say",
    "start": "1941929",
    "end": "1949789"
  },
  {
    "text": "all of these most of these are still in progress they are not there but these give me an indication that the data",
    "start": "1949789",
    "end": "1956779"
  },
  {
    "text": "plane and service mesh have no intention at stopping just reporting HTTP and GRP",
    "start": "1956779",
    "end": "1963950"
  },
  {
    "text": "see they are interested in supporting application layer protocols to offer you more to enable more use cases especially",
    "start": "1963950",
    "end": "1973700"
  },
  {
    "text": "with the introduction of web assembly you can now write your custom logic in the sidecar and I guess that's fine as",
    "start": "1973700",
    "end": "1979879"
  },
  {
    "text": "long as you are not putting there some business logic next project I want to",
    "start": "1979879",
    "end": "1986629"
  },
  {
    "start": "1984000",
    "end": "1984000"
  },
  {
    "text": "talk about is apache camel that's a project I love it is a project for doing",
    "start": "1986629",
    "end": "1992509"
  },
  {
    "text": "integration so it has lots of connectors hundreds of connectors to different systems",
    "start": "1992509",
    "end": "1997610"
  },
  {
    "text": "it is using enterprise integration patterns but the way it's related to this talk is in the inter latest version",
    "start": "1997610",
    "end": "2005019"
  },
  {
    "text": "camel tree it is getting deeply integrated into kubernetes and it's using the same primitives with all so",
    "start": "2005019",
    "end": "2011740"
  },
  {
    "text": "far such as operators so in camel you can write your integration logic in",
    "start": "2011740",
    "end": "2017730"
  },
  {
    "text": "languages such as Java or JavaScript here the example is with using llamo and",
    "start": "2017730",
    "end": "2024240"
  },
  {
    "text": "in this in latest version they have introduced a camel operator so that's",
    "start": "2024240",
    "end": "2029559"
  },
  {
    "text": "something that runs in kubernetes that understands your integration so when you",
    "start": "2029559",
    "end": "2035860"
  },
  {
    "text": "did break your camel application deployed to custom resource the operator then knows how to build the container",
    "start": "2035860",
    "end": "2042999"
  },
  {
    "text": "how to find dependencies and depending on the capabilities of the platform whether that's kubernetes only whether",
    "start": "2042999",
    "end": "2048970"
  },
  {
    "text": "that's kubernetes with que native it can decide what services to use and how to",
    "start": "2048970",
    "end": "2054990"
  },
  {
    "text": "materialize your integration so there is quite a lot of intelligence that is",
    "start": "2054990",
    "end": "2060099"
  },
  {
    "text": "going outside of your runtime but into the operator and all that happens pretty",
    "start": "2060099",
    "end": "2065440"
  },
  {
    "text": "fast and why I would say it's a binding trend mainly because the capabilities of",
    "start": "2065440",
    "end": "2072700"
  },
  {
    "text": "apache camel with all the connector it provides but the interesting point here is how it integrates deeply with",
    "start": "2072700",
    "end": "2078540"
  },
  {
    "text": "kubernetes the next project I picked is",
    "start": "2078540",
    "end": "2085679"
  },
  {
    "start": "2082000",
    "end": "2082000"
  },
  {
    "text": "cloud state and it's around the state",
    "start": "2085679",
    "end": "2090750"
  },
  {
    "text": "related trends and cloud state is is a",
    "start": "2090750",
    "end": "2096089"
  },
  {
    "text": "project by things like land and it is primarily focused for service and",
    "start": "2096089",
    "end": "2103080"
  },
  {
    "text": "function driven development and again with here their latest releases they are",
    "start": "2103080",
    "end": "2109460"
  },
  {
    "text": "integrating deeply with kubernetes using sidecars and operators and I think they",
    "start": "2109460",
    "end": "2116369"
  },
  {
    "text": "also have integration with the perc a native and all of this and the idea is",
    "start": "2116369",
    "end": "2121950"
  },
  {
    "text": "when you write your function all you have to do in your function is use G RPC",
    "start": "2121950",
    "end": "2126990"
  },
  {
    "text": "to get state to interact with state and the whole state management happens in a",
    "start": "2126990",
    "end": "2133109"
  },
  {
    "text": "sidecar that is clustered with other side cars and it enables you to do",
    "start": "2133109",
    "end": "2139380"
  },
  {
    "text": "things such as event sourcing secure as key value lookups and messaging etc but",
    "start": "2139380",
    "end": "2147060"
  },
  {
    "text": "from your application point of view you are not aware of all of these complexities all you do is a call to",
    "start": "2147060",
    "end": "2152099"
  },
  {
    "text": "local sidecar and the sidecar handles the complexity and it can use behind the",
    "start": "2152099",
    "end": "2157800"
  },
  {
    "text": "scene to different data sources so it has all the stateful abstractions you would need as a developer no project",
    "start": "2157800",
    "end": "2165180"
  },
  {
    "text": "definitely to follow and see what's happening so we have seen what is the",
    "start": "2165180",
    "end": "2172170"
  },
  {
    "text": "current state of the art in the cloud native ecosystem and some of the recent",
    "start": "2172170",
    "end": "2178200"
  },
  {
    "text": "developments that are still in progress but how to make sense of all that if you",
    "start": "2178200",
    "end": "2186330"
  },
  {
    "start": "2182000",
    "end": "2182000"
  },
  {
    "text": "look at how microservice look like on kubernetes I would say you probably need",
    "start": "2186330",
    "end": "2195320"
  },
  {
    "text": "you will need to use some functionality from the platform you will need to ask",
    "start": "2195320",
    "end": "2200550"
  },
  {
    "text": "Burnett these features for for the lifecycle management primarily then",
    "start": "2200550",
    "end": "2205980"
  },
  {
    "text": "most likely transparently your service will use some kind of service mesh",
    "start": "2205980",
    "end": "2211170"
  },
  {
    "text": "something like an envoy tool to get enhanced networking capabilities whether",
    "start": "2211170",
    "end": "2216990"
  },
  {
    "text": "does a traffic routing resilience and has security or even if it is just for",
    "start": "2216990",
    "end": "2222900"
  },
  {
    "text": "monitoring purpose on top of that you depending on your use case you may need",
    "start": "2222900",
    "end": "2229470"
  },
  {
    "text": "something like dapper or Kay native depending on your workload and all of",
    "start": "2229470",
    "end": "2236220"
  },
  {
    "text": "this represents your out of process additional capabilities and what's left",
    "start": "2236220",
    "end": "2242040"
  },
  {
    "text": "to you is to write your business logic not on top but as a separate runtime so",
    "start": "2242040",
    "end": "2247680"
  },
  {
    "text": "most likely future micro services will be this kind of multi runtime composed",
    "start": "2247680",
    "end": "2252870"
  },
  {
    "text": "of multiple containers some of those are transparent some motors are very explicit in that you use if I look a",
    "start": "2252870",
    "end": "2261570"
  },
  {
    "start": "2261000",
    "end": "2261000"
  },
  {
    "text": "little bit deeper how that might look like I would say you write your business logic in some kind of high-level",
    "start": "2261570",
    "end": "2268830"
  },
  {
    "text": "language doesn't matter what it is it doesn't have to be any more Java only you can use any other language you",
    "start": "2268830",
    "end": "2274620"
  },
  {
    "text": "develop your custom logic in-house then all the interactions of your business",
    "start": "2274620",
    "end": "2281910"
  },
  {
    "text": "logic with the external world happens through a sidecar and that sidecar does",
    "start": "2281910",
    "end": "2287960"
  },
  {
    "text": "it integrates with the platform does the lifecycle management it does the networking abstractions for external",
    "start": "2287960",
    "end": "2294120"
  },
  {
    "text": "systems gives you advanced binding capabilities and state abstraction but",
    "start": "2294120",
    "end": "2300150"
  },
  {
    "text": "the sidecar is something you don't develop you get it off the shelf you configure it with a little bit of Yammer",
    "start": "2300150",
    "end": "2305700"
  },
  {
    "text": "or JSON and you use it and that means you can update sidecars easily because",
    "start": "2305700",
    "end": "2312060"
  },
  {
    "text": "it's not anymore embedded into your runtime so it makes patching the updating easier and it enables polyglot",
    "start": "2312060",
    "end": "2319640"
  },
  {
    "text": "runtime for our business logic and that",
    "start": "2319640",
    "end": "2326400"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "brings me back to original question I've asked at the beginning",
    "start": "2326400",
    "end": "2332370"
  },
  {
    "text": "what comes after microservices so if we see how the the architectures have been",
    "start": "2332370",
    "end": "2338940"
  },
  {
    "text": "evolving application architectures at a very high level this is a simplification but but",
    "start": "2338940",
    "end": "2345970"
  },
  {
    "text": "hopefully you get the idea we started with monolithic applications and micro-services",
    "start": "2345970",
    "end": "2352360"
  },
  {
    "text": "allow us to it gives us the guiding principles on how to split a monolithic application into separate business",
    "start": "2352360",
    "end": "2360190"
  },
  {
    "text": "domains and after that came several s and a function as a series where we said",
    "start": "2360190",
    "end": "2365770"
  },
  {
    "text": "okay we can split those further by operation and this gives us ability for",
    "start": "2365770",
    "end": "2371080"
  },
  {
    "text": "extreme scaling because we can scale each operation individually but I would argue that maybe fast is not the best",
    "start": "2371080",
    "end": "2378310"
  },
  {
    "text": "model and functions are not best model for implementing reasonably complex",
    "start": "2378310",
    "end": "2384700"
  },
  {
    "text": "services where you want multiple operations to reside together when they have to interact with the same data set",
    "start": "2384700",
    "end": "2391600"
  },
  {
    "text": "so probably something like multi the runtime I call it make architecture",
    "start": "2391600",
    "end": "2396880"
  },
  {
    "text": "where you have your business logic in one container and you have all the",
    "start": "2396880",
    "end": "2403150"
  },
  {
    "text": "infrastructure related concerns as a separate container and they jointly represent a multi runtime micro service",
    "start": "2403150",
    "end": "2410320"
  },
  {
    "text": "maybe that's a more suitable model because it has better properties you",
    "start": "2410320",
    "end": "2416080"
  },
  {
    "text": "give all the benefits of micro service so you still have all your domain all the bounded context in one place and you",
    "start": "2416080",
    "end": "2422860"
  },
  {
    "text": "have all the infrastructure and distributed application needs we talked",
    "start": "2422860",
    "end": "2427870"
  },
  {
    "text": "about in a separate container and you combine them at runtime probably the",
    "start": "2427870",
    "end": "2433120"
  },
  {
    "text": "closest thing that's getting to that right now is the opera I would say they're following that model and if you",
    "start": "2433120",
    "end": "2440410"
  },
  {
    "text": "are uninterested from networking aspect probably using angle is also good getting close to this model and last",
    "start": "2440410",
    "end": "2450610"
  },
  {
    "text": "part check out my book on this link you can get a free copy at the moment and",
    "start": "2450610",
    "end": "2457020"
  },
  {
    "text": "follow me on Twitter thank you you",
    "start": "2457020",
    "end": "2463370"
  }
]