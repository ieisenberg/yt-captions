[
  {
    "text": "[Music]",
    "start": "2630",
    "end": "10240"
  },
  {
    "text": "we'll Jump Right In Here uh talk a little bit about what invoke Dynamic is how it works uh get some kind of high",
    "start": "10800",
    "end": "16800"
  },
  {
    "text": "level points about the structure of it and what it's going to change for Java and the jvm uh so first of all me Charles Nutter",
    "start": "16800",
    "end": "25320"
  },
  {
    "text": "I'm headiest on pretty much all the services that are out there so it should be pretty easy to find I have been a j",
    "start": "25320",
    "end": "30800"
  },
  {
    "text": "Ruby guy for about the past six six and a half years or so working full-time on",
    "start": "30800",
    "end": "36160"
  },
  {
    "text": "J Ruby and in order to make J Ruby run well I also have kind of had to become a jvm guy and learn about how the jvm",
    "start": "36160",
    "end": "43039"
  },
  {
    "text": "works internally how it optimizes stuff uh how it's improving in the future for for various types of",
    "start": "43039",
    "end": "50120"
  },
  {
    "text": "languages and most recently spend a lot of time working on and under trying to get to know how invoke Dynamic Works",
    "start": "50120",
    "end": "57559"
  },
  {
    "text": "inside and out how to use it efficiently how to use it well uh I think we've done a pretty good job in J Ruby of taking",
    "start": "57559",
    "end": "63879"
  },
  {
    "text": "advantage of invoke Dynamic so what is this invoke Dynamic thing anyway that everyone's been hearing about probably",
    "start": "63879",
    "end": "69720"
  },
  {
    "text": "the biggest feature that came with Java with Java 7 with the Java 7 jvm uh and",
    "start": "69720",
    "end": "75000"
  },
  {
    "text": "the apis that come with it so is it about invoking it's what you might think",
    "start": "75000",
    "end": "80400"
  },
  {
    "text": "automatically that it has something to do with just invoking methods uh but that's really just one possible use",
    "start": "80400",
    "end": "86320"
  },
  {
    "text": "there's a lot of different ways that you can use invoke Dynamic use the the the capabilities that it gives you uh other",
    "start": "86320",
    "end": "92600"
  },
  {
    "text": "than just doing method calls so then it must be something about Dynamic it has a dynamic in the name so it must be about",
    "start": "92600",
    "end": "98759"
  },
  {
    "text": "Dynamic languages or dynamic typing or something like that nothing that's actually going to be useful for statically typed languages right well",
    "start": "98759",
    "end": "105040"
  },
  {
    "text": "it's it's a common use case for this and and dynamic invocation and dynamic typed languages are certainly uh a key use of",
    "start": "105040",
    "end": "114040"
  },
  {
    "text": "invoke Dynamic but they're not the only one and I think we'll see a lot more creative uses of invoke dynamic in the",
    "start": "114040",
    "end": "119079"
  },
  {
    "text": "future so what I've kind of been calling invoke Dynamic is a userdefined data endpoint",
    "start": "119079",
    "end": "126479"
  },
  {
    "text": "and of course that's kind of meaning list so we'll we'll break that down and say what figure out what we're actually talking about uh jbm 101 first of all to",
    "start": "126479",
    "end": "135080"
  },
  {
    "text": "give you a general idea of how the jvm works internally how its operations are structured so we got about 200 op codes",
    "start": "135080",
    "end": "141959"
  },
  {
    "text": "in the current jvm specification about 10 or depending on how you count it 16 of these are what I",
    "start": "141959",
    "end": "148920"
  },
  {
    "text": "would call data end points and this should make it a little bit more clear we have end points for invoking a method",
    "start": "148920",
    "end": "155879"
  },
  {
    "text": "where you're possibly passing in some arguments possibly getting something back but you're doing something you're making something happen by calling a",
    "start": "155879",
    "end": "162319"
  },
  {
    "text": "method uh and there are the four me four different types of invocation on the jvm right uh up up until invoke",
    "start": "162319",
    "end": "169720"
  },
  {
    "text": "Dynamic there's field access getting data to and from object fields or static",
    "start": "169720",
    "end": "176280"
  },
  {
    "text": "fields and then all the different ways of accessing arrays so the two primary",
    "start": "176280",
    "end": "182720"
  },
  {
    "text": "data structures that we have on the jvm are objects and arrays and accessing",
    "start": "182720",
    "end": "189200"
  },
  {
    "text": "Fields kind of has an analog in putting and getting things out of uh",
    "start": "189200",
    "end": "194799"
  },
  {
    "text": "arrays so pretty much all Java code revolves around these end points all the",
    "start": "194799",
    "end": "200239"
  },
  {
    "text": "other code is stack manipulation local variables uh flow control exception handling the the program flow but",
    "start": "200239",
    "end": "207519"
  },
  {
    "text": "everything revolves around getting data into and out of objects and calling methods so those are what I call the",
    "start": "207519",
    "end": "213640"
  },
  {
    "text": "data end points for the jvm and those are where this where we're going to focus a little bit on how the jvm works",
    "start": "213640",
    "end": "220760"
  },
  {
    "text": "so let's kind of batch this all up and we'll say we have an entire we have our pool of jvm operations we've got our endpoints in",
    "start": "220760",
    "end": "228319"
  },
  {
    "text": "here our data end points we've got all of our other little uh glue and plumbing",
    "start": "228319",
    "end": "233680"
  },
  {
    "text": "that goes along with those that really just try and get us from one method call to the next or from uh one field access",
    "start": "233680",
    "end": "240560"
  },
  {
    "text": "to the next and as long as we stay pretty much within these lines Within",
    "start": "240560",
    "end": "246079"
  },
  {
    "text": "These boundaries we're okay uh but we can't go outside the lines we can't",
    "start": "246079",
    "end": "251159"
  },
  {
    "text": "color outside the lines and do our own operations it has to be one of these specific available endpoints on the J at",
    "start": "251159",
    "end": "258239"
  },
  {
    "text": "the jvm level or we've got to you know compose it oursel and this is this is frustrating to a lot of people they look",
    "start": "258239",
    "end": "264400"
  },
  {
    "text": "at the jbm and they say well why isn't why doesn't it have my operation why doesn't it have my Dynamic invocation",
    "start": "264400",
    "end": "269759"
  },
  {
    "text": "why doesn't have my lazy constant support or my lazy finals uh and you know the truth is we can build all those",
    "start": "269759",
    "end": "276720"
  },
  {
    "text": "things on top of the available operations but it would be nice if we could really just re teach the teach the",
    "start": "276720",
    "end": "283960"
  },
  {
    "text": "jvm new ways of doing method calls new ways of finding these data endpoints let's look a little bit more",
    "start": "283960",
    "end": "290320"
  },
  {
    "text": "deep in how these endpoints actually work and you'll see why this ends up fitting very well into invoke into the",
    "start": "290320",
    "end": "296039"
  },
  {
    "text": "future of the jvm so for invocation we have a call site which is where we're",
    "start": "296039",
    "end": "302120"
  },
  {
    "text": "doing an invocation we've got a method call somewhere on an object or a static call within that call site we've got a",
    "start": "302120",
    "end": "308800"
  },
  {
    "text": "method name a signature which represents the the arguments that are coming in uh",
    "start": "308800",
    "end": "314759"
  },
  {
    "text": "possibly an object we're calling it against if it's not a static method and then return type possibly",
    "start": "314759",
    "end": "323039"
  },
  {
    "text": "void on the VM operations side what the jvm does in response to one of these",
    "start": "323039",
    "end": "328160"
  },
  {
    "text": "call sites is things like method lookup it goes and gets the actual piece of code in memory for the call to be uh",
    "start": "328160",
    "end": "335000"
  },
  {
    "text": "executed it does some type checking on arguments and on on the target to make sure we've got the right types",
    "start": "335000",
    "end": "340479"
  },
  {
    "text": "everywhere along the line we'll actually then branch and run that code and then",
    "start": "340479",
    "end": "345919"
  },
  {
    "text": "probably cach some of this so we don't have to look it up every single time these are kind of the base operations",
    "start": "345919",
    "end": "351199"
  },
  {
    "text": "that the jvm does in various ways uh we'll look at this a little bit more graphically we've got our VM operations",
    "start": "351199",
    "end": "356919"
  },
  {
    "text": "on our call site here we're calling a foo method on some object that call goes to the jvm the jvm",
    "start": "356919",
    "end": "365080"
  },
  {
    "text": "sees that we're doing an invocation of some Foo method that in this case takes no",
    "start": "365080",
    "end": "370800"
  },
  {
    "text": "arguments it will hop into the class for that object and find the foo method that",
    "start": "370800",
    "end": "375840"
  },
  {
    "text": "it needs to use to to link this call site to connect it to a piece of code so that it can execute grabs that method and has it in",
    "start": "375840",
    "end": "384039"
  },
  {
    "text": "hand do a little bit of type checking at this point now that we have the method and we know what the return types are we",
    "start": "384039",
    "end": "389280"
  },
  {
    "text": "know what the Target or what the argument types are supposed to be we can check make sure we've got all of the right types in the right places and do",
    "start": "389280",
    "end": "395800"
  },
  {
    "text": "whatever castings we need then we can do our Branch actually",
    "start": "395800",
    "end": "401280"
  },
  {
    "text": "invoke the code and call the foo method the body of the Foo method and then like I say probably cash",
    "start": "401280",
    "end": "408160"
  },
  {
    "text": "it somewhere store it away in the jvm however the jvm decides to do that sort of a transparent a sort of an opaque",
    "start": "408160",
    "end": "414680"
  },
  {
    "text": "process that we can't see into but it will cash this to avoid having to do it over again",
    "start": "414680",
    "end": "420400"
  },
  {
    "text": "so the different invocation types uh you saw all these in the chart for the the various jvm op codes first of all",
    "start": "420400",
    "end": "427560"
  },
  {
    "text": "virtual method invocation which is calling on a concrete object and interface invocation are largely the",
    "start": "427560",
    "end": "432960"
  },
  {
    "text": "same the operations are mostly the same set of operations a little bit different in the interface case but uh but for the",
    "start": "432960",
    "end": "439440"
  },
  {
    "text": "most part those two are very similar calling a method on an object static methods are a little bit different uh",
    "start": "439440",
    "end": "446000"
  },
  {
    "text": "they're not really called on any particular object uh like as in in groovy or in Ruby if you're calling what",
    "start": "446000",
    "end": "451560"
  },
  {
    "text": "looks like a static method you're kind of calling it on a meta class or a meta object at that point in Java static",
    "start": "451560",
    "end": "457599"
  },
  {
    "text": "calls are essentially just functions they're named functions that are happen to be namespaced within classes so",
    "start": "457599",
    "end": "463840"
  },
  {
    "text": "there's a little bit less complexity to this all we have to do is go find that function somewhere in memory under the",
    "start": "463840",
    "end": "469440"
  },
  {
    "text": "under the package class and Method name Branch to it make the call and then probably cach it again somewhere so we",
    "start": "469440",
    "end": "475199"
  },
  {
    "text": "didn't have to go looking for it again and then there's all the special indication invoke special which is used",
    "start": "475199",
    "end": "481360"
  },
  {
    "text": "for invoking Constructors and invoking super class methods uh and again this",
    "start": "481360",
    "end": "486560"
  },
  {
    "text": "has mostly the same sort of operations a few little bit of different act different ways of of uh of handling uh",
    "start": "486560",
    "end": "492960"
  },
  {
    "text": "type checking access checking making sure that you're only calling super from within the same class making sure that",
    "start": "492960",
    "end": "498840"
  },
  {
    "text": "you're calling the direct Constructor of a target class rather than some super class Constructor things like that but",
    "start": "498840",
    "end": "504599"
  },
  {
    "text": "again mostly the same set of core operations let's look at how field access work",
    "start": "504599",
    "end": "510680"
  },
  {
    "text": "works so with field access we have a call site essentially you don't think of fields as being a call but it really is",
    "start": "510680",
    "end": "517039"
  },
  {
    "text": "it's going off and it's it says on this object or on this static field get me",
    "start": "517039",
    "end": "522599"
  },
  {
    "text": "the value set the value do some operation that's very fairly simple but it's like a call site so we've got a",
    "start": "522599",
    "end": "528279"
  },
  {
    "text": "field name we have again a signature for it what the type of that field is and we",
    "start": "528279",
    "end": "534320"
  },
  {
    "text": "probably have a target class or a Target object that we're putting or getting that field from",
    "start": "534320",
    "end": "541399"
  },
  {
    "text": "on the VM side the VM is going to check figure out what the offset of that field",
    "start": "541399",
    "end": "546640"
  },
  {
    "text": "into the object is or where that field exists in in the static space where it keeps static Fields uh do some type",
    "start": "546640",
    "end": "553279"
  },
  {
    "text": "checking to make sure we've got the right values coming in we get the right values coming out and then access the",
    "start": "553279",
    "end": "558399"
  },
  {
    "text": "field and then again probably cash some of this information away somewhere so we don't have to constantly go and relook",
    "start": "558399",
    "end": "564200"
  },
  {
    "text": "up what this field is on a given class array access is is again similar",
    "start": "564200",
    "end": "571040"
  },
  {
    "text": "but even simpler than either of the other ones our call site in this case essentially is just a Target array",
    "start": "571040",
    "end": "577279"
  },
  {
    "text": "object uh an offset into that array which we provide as the index and then if we're setting a value into it we're",
    "start": "577279",
    "end": "583720"
  },
  {
    "text": "also giving it a value to to insert into the array at that index and the VM is going to do its type",
    "start": "583720",
    "end": "590399"
  },
  {
    "text": "check to make sure we're putting the right type of object in that array or the right type of primitive and then",
    "start": "590399",
    "end": "596240"
  },
  {
    "text": "access that element maybe do some caching to see that we know we've got the right access of the array and and of",
    "start": "596240",
    "end": "601360"
  },
  {
    "text": "course things like array balance checks will happen in here making sure we're not walking off the end of the array uh",
    "start": "601360",
    "end": "606600"
  },
  {
    "text": "but again mostly the same set of operations or same same core VM",
    "start": "606600",
    "end": "611720"
  },
  {
    "text": "operations as some of these other operations some of the other uh endpoints so you kind of have Deja Vu",
    "start": "611720",
    "end": "618519"
  },
  {
    "text": "after looking at all this stuff each of these different what we would normally consider very different operations at",
    "start": "618519",
    "end": "625079"
  },
  {
    "text": "the jvm level are based on the same common features the same common",
    "start": "625079",
    "end": "630800"
  },
  {
    "text": "operations that the VM has to perform now what if we just had those lower level operations available and could",
    "start": "630800",
    "end": "637800"
  },
  {
    "text": "wire up our own way of accessing data or our own way of doing method calls and of",
    "start": "637800",
    "end": "643000"
  },
  {
    "text": "course this is where invoke Dynamic comes in invoke Dynamic can kind of be split",
    "start": "643000",
    "end": "648160"
  },
  {
    "text": "up like this we have our call site which is the invoke side doesn't necessarily",
    "start": "648160",
    "end": "653279"
  },
  {
    "text": "mean that we're calling a method it could be accessing data on a field or an array somewhere but we have our call",
    "start": "653279",
    "end": "658720"
  },
  {
    "text": "site it's the invoke side and we have our VM operations which we can dynamically compose in any way we want",
    "start": "658720",
    "end": "666040"
  },
  {
    "text": "so all of the things that we do normally for doing method lookup field lookup accessing making method calls we can",
    "start": "666040",
    "end": "672880"
  },
  {
    "text": "stitch those together in any way we want and in jvm in the jvm terms in jsr 292",
    "start": "672880",
    "end": "679320"
  },
  {
    "text": "invoke Dynamic terms the invoke side is the bite code invoke Dynamic bik code",
    "start": "679320",
    "end": "685240"
  },
  {
    "text": "and a bootstrap method which we'll talk about a second and Method handles which are the core VM operations we can",
    "start": "685240",
    "end": "692160"
  },
  {
    "text": "compose in any way we want so first of all the bite code uh",
    "start": "692160",
    "end": "697720"
  },
  {
    "text": "it's a new invoke bite code at the jvm level invoke Dynamic like invoke virtual or invoke special and so on and it can",
    "start": "697720",
    "end": "704320"
  },
  {
    "text": "do all of what those other operations do uh it has a name and a signature just",
    "start": "704320",
    "end": "709959"
  },
  {
    "text": "like the others and then there's a bootstrap method that we attach to it so at the",
    "start": "709959",
    "end": "715279"
  },
  {
    "text": "bite code level it looks like a normal call but it also has a pointer to this",
    "start": "715279",
    "end": "720440"
  },
  {
    "text": "bootstrap method the bootstrap method is essentially a userdefined binding a",
    "start": "720440",
    "end": "726320"
  },
  {
    "text": "userdefined Linker for that in invocation we can say here's how here's",
    "start": "726320",
    "end": "731760"
  },
  {
    "text": "the instructions to the jvm how to wire up this call or how to wire up this data access and then the jvm will run with",
    "start": "731760",
    "end": "738680"
  },
  {
    "text": "that bind it into the call site and optimize it and this is all done with method",
    "start": "738680",
    "end": "744839"
  },
  {
    "text": "handles method handles have our our basic operations getting a function getting a field accessing an element of",
    "start": "744839",
    "end": "751399"
  },
  {
    "text": "an array uh but also let us do argument manipulation if we want to filter the arguments as they pass through or do a",
    "start": "751399",
    "end": "758680"
  },
  {
    "text": "calculation based on the arguments and pass an additional argument all sorts of ways that we can manipulate the argument",
    "start": "758680",
    "end": "763839"
  },
  {
    "text": "chain as it's going similarly we can manipulate the return values do casts uh",
    "start": "763839",
    "end": "769160"
  },
  {
    "text": "do conversions to a different language's type uh do type checks on those uh do",
    "start": "769160",
    "end": "775800"
  },
  {
    "text": "aspect-oriented programming sort of things that wrap around this but that optimiz at the jvm level rather than",
    "start": "775800",
    "end": "781279"
  },
  {
    "text": "being cute little class loader and jvm bite code tricks uh there's also some basic flow control so we can test some",
    "start": "781279",
    "end": "788560"
  },
  {
    "text": "value and then Branch to two different paths if that's part of our Logic for how a call is supposed to happen uh but",
    "start": "788560",
    "end": "794360"
  },
  {
    "text": "the most important aspect here is that these are core operations that the jvm",
    "start": "794360",
    "end": "799639"
  },
  {
    "text": "knows how to optimize so when we assemble all of our Logic for doing a method call or accessing some data the",
    "start": "799639",
    "end": "806120"
  },
  {
    "text": "jvm sticks that right back into the site where we've got invoke Dynamic right back into the the calling code and",
    "start": "806120",
    "end": "812600"
  },
  {
    "text": "optimizes it as if it always lived there as if it was always part of the",
    "start": "812600",
    "end": "817959"
  },
  {
    "text": "caller so this could be a little bit uh difficult to to conceptualize especially since there's no direct way to do invoke",
    "start": "817959",
    "end": "824480"
  },
  {
    "text": "Dynamic from java code itself you have to emit bite code for it so let's walk through what this looks like uh here",
    "start": "824480",
    "end": "831519"
  },
  {
    "text": "we've got a telephone switchboard and up at the top is our call coming in someone is making a call",
    "start": "831519",
    "end": "837680"
  },
  {
    "text": "to the jvm saying I need to to access this endpoint I need to call some method whatever it",
    "start": "837680",
    "end": "844440"
  },
  {
    "text": "is over on the left here we have our our lovely bootstrap method which we'll",
    "start": "844440",
    "end": "850279"
  },
  {
    "text": "receive that call in figure out what's necessary to fulfill that call find that",
    "start": "850279",
    "end": "855560"
  },
  {
    "text": "address find that method whatever it is all of these wires and plugs over on",
    "start": "855560",
    "end": "861079"
  },
  {
    "text": "the other side here this is basically our method handles we're figuring out how to plug this call through some",
    "start": "861079",
    "end": "867079"
  },
  {
    "text": "translator through some other board into a Target",
    "start": "867079",
    "end": "872320"
  },
  {
    "text": "method once we've got that we've got the entire circle all the way all the way wired through the entire call has been",
    "start": "872320",
    "end": "879480"
  },
  {
    "text": "routed at this point uh as far as the jvm is concerned then doesn't need to do",
    "start": "879480",
    "end": "884959"
  },
  {
    "text": "anything else it's just making that call directly to a Target method or to access some Target data and all of the rest of",
    "start": "884959",
    "end": "891079"
  },
  {
    "text": "that just disappears and the jvm optimizes it as if we were always calling this target method none of the",
    "start": "891079",
    "end": "897079"
  },
  {
    "text": "other stuff has to has to be called ever again and this allows us to decide how",
    "start": "897079",
    "end": "902759"
  },
  {
    "text": "to bind that Target method doesn't necessarily have to be a normal static Java method doesn't have to fit into a",
    "start": "902759",
    "end": "908160"
  },
  {
    "text": "normal Java type structure uh but it doesn't necessarily have to be dynamically typed either all we're doing",
    "start": "908160",
    "end": "913800"
  },
  {
    "text": "is giving the jvm new instructions on how to call some piece of code so you really decide how to reach",
    "start": "913800",
    "end": "920680"
  },
  {
    "text": "that end point you can decide how the arguments get translated and and adjusted and coerced and whatever else",
    "start": "920680",
    "end": "926240"
  },
  {
    "text": "along the way uh you can decide when the endpoint should change",
    "start": "926240",
    "end": "931519"
  },
  {
    "text": "if somebody decides to load new code or if you're doing a a language that has open classes where you can modify the",
    "start": "931519",
    "end": "938079"
  },
  {
    "text": "the method tables you can decide when that needs to change and when it needs to be",
    "start": "938079",
    "end": "943120"
  },
  {
    "text": "updated and you really get to decide how the jvm handles your language your call",
    "start": "943120",
    "end": "950279"
  },
  {
    "text": "whatever the logic is now for a little bit more concrete use cases the first one is obviously Dynamic",
    "start": "950279",
    "end": "957040"
  },
  {
    "text": "invocations probably the simplest one to understand uh we have some named method",
    "start": "957040",
    "end": "962440"
  },
  {
    "text": "we have some arguments in hand make a call how do we actually do that so we're",
    "start": "962440",
    "end": "967920"
  },
  {
    "text": "going to do a method lookup possibly based on the runtime types uh at the very least based on some some runtime",
    "start": "967920",
    "end": "974600"
  },
  {
    "text": "Target object that we're calling against uh and as in Ruby or groovy or some of the other Dynamic languages this is",
    "start": "974600",
    "end": "980480"
  },
  {
    "text": "potentially mutable these could change over time so we we need an efficient way of saying here's how you get this method",
    "start": "980480",
    "end": "987240"
  },
  {
    "text": "here's how you go look it up in some table and try and optimize it as well as possible um then possibly some type",
    "start": "987240",
    "end": "993759"
  },
  {
    "text": "checks that are specific to the language groovy at this point may do its uh its checks to make sure you're fulfilling",
    "start": "993759",
    "end": "1000759"
  },
  {
    "text": "the uh static casts that you've done to make sure that you're doing the right call calling the right method for the",
    "start": "1000759",
    "end": "1006600"
  },
  {
    "text": "type of arguments you're passing in we'll look at this in terms of our our little diagram here so again VM",
    "start": "1006600",
    "end": "1014079"
  },
  {
    "text": "operations and call site uh in this case we're just we're still doing a foo call but we don't know what method this binds",
    "start": "1014079",
    "end": "1020079"
  },
  {
    "text": "to until it's runtime until we've actually got the class in hand and we're doing our",
    "start": "1020079",
    "end": "1025558"
  },
  {
    "text": "invocation so we tell the jvm about it again the jvm is going to go to some",
    "start": "1025559",
    "end": "1030720"
  },
  {
    "text": "method table in this case not necessarily a class could be an arbitrary table that has just a list of",
    "start": "1030720",
    "end": "1036000"
  },
  {
    "text": "functions in it grabs that Fu method and has it in hand we're going to do our call get the",
    "start": "1036000",
    "end": "1043319"
  },
  {
    "text": "actual value out and now this is a little bit different we'll actually cach this in whatever way is appropriate for",
    "start": "1043319",
    "end": "1049799"
  },
  {
    "text": "for our code for our algorithms for our language uh if we know that we need to change it we've got the way of",
    "start": "1049799",
    "end": "1055760"
  },
  {
    "text": "invalidating it and flushing that out and getting a new function next",
    "start": "1055760",
    "end": "1060919"
  },
  {
    "text": "time now lazy constants are another uh kind of interesting unusual use of",
    "start": "1061200",
    "end": "1067320"
  },
  {
    "text": "invoke Dynamic uh in this case we're talking about for example a constant that you",
    "start": "1067320",
    "end": "1072640"
  },
  {
    "text": "that might require going up to the database or doing some expensive calculation against a a file on the file system something you want to do once but",
    "start": "1072640",
    "end": "1079919"
  },
  {
    "text": "maybe you don't want to do it right away at boot time you don't want to have all hundred of these constants get loaded immediately load them when they're",
    "start": "1079919",
    "end": "1087640"
  },
  {
    "text": "needed so in this case our call site is essentially accessing some named",
    "start": "1087640",
    "end": "1092880"
  },
  {
    "text": "constant uh in this case we'll call it lazy constant that we're going to out calculate it lazily but then forever",
    "start": "1092880",
    "end": "1098720"
  },
  {
    "text": "bind that value but we do this go becomes an invoked Dynamic down to the jvm",
    "start": "1098720",
    "end": "1104720"
  },
  {
    "text": "level we're going to hit our lazy computation code whatever that is uh make some calculation go call out to a",
    "start": "1104720",
    "end": "1111520"
  },
  {
    "text": "database hit a cache in memory somewhere and then the awesome part about this what makes it actually better",
    "start": "1111520",
    "end": "1118360"
  },
  {
    "text": "than final fields in a lot of cases is that then this value comes all the way back and lives at the call site lives at",
    "start": "1118360",
    "end": "1125080"
  },
  {
    "text": "the location where we're accessing it and it is truly constant to the jvm uh",
    "start": "1125080",
    "end": "1130200"
  },
  {
    "text": "one of the little known facts about the way the jvm optimizes uh finals for example is that if it isn't actually a",
    "start": "1130200",
    "end": "1136520"
  },
  {
    "text": "final constant value like a string or an integer it will not optimize away",
    "start": "1136520",
    "end": "1141640"
  },
  {
    "text": "multiple accesses to it if you access it 10 times it'll do all 10 accesses in this case the jvm we're telling it this",
    "start": "1141640",
    "end": "1148640"
  },
  {
    "text": "is really constant there is no way this is ever possibly going to change and it can optimize it actually better than",
    "start": "1148640",
    "end": "1154880"
  },
  {
    "text": "what you get out of finals in regular Java code so delegates are another one uh",
    "start": "1154880",
    "end": "1162240"
  },
  {
    "text": "this is kind of similar to what similar use case to how we do uh uh delegates or",
    "start": "1162240",
    "end": "1168000"
  },
  {
    "text": "function pointers in C for example uh we with the method handles we have our arbitrary function pointers that we can",
    "start": "1168000",
    "end": "1174840"
  },
  {
    "text": "pass around uh sort of like reflection but faster than reflection because again this is known to the jvm it's at the jvm",
    "start": "1174840",
    "end": "1181799"
  },
  {
    "text": "level we've got access to these pointers uh we don't have to have any of the typical Anonymous inter classes we don't",
    "start": "1181799",
    "end": "1187360"
  },
  {
    "text": "have to have any of the typical Bridge methods we can actually just have a a a direct pointer to a method to a piece of",
    "start": "1187360",
    "end": "1194559"
  },
  {
    "text": "code uh and this is actually how uh the Lambda support in Java 8 is going to work it uses invoke Dynamic to bind this",
    "start": "1194559",
    "end": "1202000"
  },
  {
    "text": "logic bind the Lambda code directly into a call site let's see how this looks so",
    "start": "1202000",
    "end": "1208760"
  },
  {
    "text": "we've got our call site here where we're actually setting up a closure setting up a a binding to two string that we want",
    "start": "1208760",
    "end": "1215280"
  },
  {
    "text": "to look like a Lambda as far as Java 8 logic is concerned so that goes into the jvm",
    "start": "1215280",
    "end": "1221679"
  },
  {
    "text": "again retrieve that Lambda from the target class from a Target",
    "start": "1221679",
    "end": "1226960"
  },
  {
    "text": "location build that structure around it like we would with an inner class and create that object but unlike an inner",
    "start": "1226960",
    "end": "1233480"
  },
  {
    "text": "class we can bring that all the way back bind it into the call site where we're",
    "start": "1233480",
    "end": "1240600"
  },
  {
    "text": "creating this Lambda and not have to pay that cost of creating the object every single time one of the biggest problems",
    "start": "1240600",
    "end": "1246840"
  },
  {
    "text": "with using inner classes as uh function pointers or in classes as uh a Lambda",
    "start": "1246840",
    "end": "1253960"
  },
  {
    "text": "like construct a closure type construct is that we create that object every single time voke Dynamic for this sort",
    "start": "1253960",
    "end": "1260720"
  },
  {
    "text": "of lazy case is just caching that structure once and then we don't have to recreate it every single time it can be",
    "start": "1260720",
    "end": "1266480"
  },
  {
    "text": "an optimized call from then on uh so multiple dispatch is another",
    "start": "1266480",
    "end": "1273120"
  },
  {
    "text": "one I don't have a direct example of this but it's dispatch essentially based on whatever the types of the arguments",
    "start": "1273120",
    "end": "1279039"
  },
  {
    "text": "are that come in so Java has a form of overloading based on method based on the",
    "start": "1279039",
    "end": "1285720"
  },
  {
    "text": "argument types uh but it Java itself is actually pretty much single dispatch you have to",
    "start": "1285720",
    "end": "1292919"
  },
  {
    "text": "Define you have to decide at compile time which of those many overloads you're actually going to call so doing",
    "start": "1292919",
    "end": "1298960"
  },
  {
    "text": "that at runtime has always been a challenge for folks uh if you're going to use reflection you need to be able to get the right method in hand at runtime",
    "start": "1298960",
    "end": "1305880"
  },
  {
    "text": "figure out what the arguments are that you're going to call with this is one of those cases that can be much easier to optimize with with uh invoke Dynamic but",
    "start": "1305880",
    "end": "1313559"
  },
  {
    "text": "call site again looks pretty much like a normal invocation maybe we're only passing in object arguments",
    "start": "1313559",
    "end": "1319559"
  },
  {
    "text": "but on the VM side on the bootstrap side for the invoked Dynamic logic we can look at all those arguments find the",
    "start": "1319559",
    "end": "1325559"
  },
  {
    "text": "target method that goes with it and then save that off cash it store it in in the call site and never have to do that",
    "start": "1325559",
    "end": "1331840"
  },
  {
    "text": "calculation again so what normally was an expensive walking of all of the arguments before we can do our call now",
    "start": "1331840",
    "end": "1339279"
  },
  {
    "text": "gets built in and optimized as if it was just part of the jvm to begin with so let's talk about a few ways that",
    "start": "1339279",
    "end": "1347000"
  },
  {
    "text": "that regular J Java developers might uh benefit from this or jvm users will",
    "start": "1347000",
    "end": "1352039"
  },
  {
    "text": "benefit from this so obviously coming up in the future we've got new language implementations uh d. JS and nasorn are",
    "start": "1352039",
    "end": "1360720"
  },
  {
    "text": "two implementations of JavaScript that are completely invoked Dynamic based uh",
    "start": "1360720",
    "end": "1365760"
  },
  {
    "text": "taking as much advantage of invoke dynamic as possible to optimize JavaScript because there's really no reason why we shouldn't be able to have",
    "start": "1365760",
    "end": "1371919"
  },
  {
    "text": "the fastest JavaScript implementation running on top of the jbm uh there's also other languages Small Talk actually",
    "start": "1371919",
    "end": "1377919"
  },
  {
    "text": "has two three implementations on the jvm now that use invoke Dynamic to",
    "start": "1377919",
    "end": "1383240"
  },
  {
    "text": "optimize u a little bit more interesting for me is taking existing languages like",
    "start": "1383240",
    "end": "1389080"
  },
  {
    "text": "Ruby and groovy and jython and finding ways to optimize them make them run",
    "start": "1389080",
    "end": "1394600"
  },
  {
    "text": "faster uh we've always believed that we could make J Ruby be the fastest Ruby implementation in the world and now with",
    "start": "1394600",
    "end": "1400840"
  },
  {
    "text": "invoke Dynamic it's actually starting to happen starting to happen in a a major way and of course show that off a little",
    "start": "1400840",
    "end": "1407919"
  },
  {
    "text": "bit so this is going to be a graph I've got four benchmarks here uh from uh left to",
    "start": "1407919",
    "end": "1414400"
  },
  {
    "text": "right we've got a Bas 64 encoding of a particular string we've got uh Richards",
    "start": "1414400",
    "end": "1420240"
  },
  {
    "text": "which is sort of a a VM simulator Benchmark it does multiple Target",
    "start": "1420240",
    "end": "1425520"
  },
  {
    "text": "methods it does polymorphic calls it does things that a lot of VMS would find difficult to optimize sort of a",
    "start": "1425520",
    "end": "1431440"
  },
  {
    "text": "benchmark of the worst case scenarios for a VM uh a simple CS 101 neural",
    "start": "1431440",
    "end": "1437039"
  },
  {
    "text": "network and a red black tree that will create a large tree Traverse it search",
    "start": "1437039",
    "end": "1442480"
  },
  {
    "text": "it delete elements out of it and do that multiple times try and see how fast we can do that purely implemented in Ruby",
    "start": "1442480",
    "end": "1449159"
  },
  {
    "text": "in every each one of these cases so if we look at at J Ruby running on Java",
    "start": "1449159",
    "end": "1455559"
  },
  {
    "text": "6 what we have here is uh pretty good numbers we're definitely faster than the",
    "start": "1455559",
    "end": "1461559"
  },
  {
    "text": "standard Ruby 193 which uh I believe is still in general uh the fastest Ruby",
    "start": "1461559",
    "end": "1467679"
  },
  {
    "text": "implementation other than J Ruby uh it it has a bite code VM but it is not a",
    "start": "1467679",
    "end": "1472760"
  },
  {
    "text": "jitted version so we want to be faster obviously we should be faster and these numbers are pretty good but not as good",
    "start": "1472760",
    "end": "1478480"
  },
  {
    "text": "as we'd like to see uh we can say that J is faster but we're only on the over the",
    "start": "1478480",
    "end": "1483559"
  },
  {
    "text": "edge now if we move to Java 7 we get invoke dynamic in there and the jvm actually understands how Ruby works then",
    "start": "1483559",
    "end": "1490200"
  },
  {
    "text": "the things change quite a bit just by moving our invocation logic our call",
    "start": "1490200",
    "end": "1495279"
  },
  {
    "text": "logic to invoke Dynamic getting the jvm to better understand how Ruby Works uh",
    "start": "1495279",
    "end": "1501080"
  },
  {
    "text": "two three five in some cases we've heard about 10 times Improvement in the",
    "start": "1501080",
    "end": "1506360"
  },
  {
    "text": "performance of Ruby code and there are cases where Ruby code now can actually run as fast as Java code for certain",
    "start": "1506360",
    "end": "1512880"
  },
  {
    "text": "types of algorithms uh and that's that's incredibly exciting it's something we've known we always could do but we just",
    "start": "1512880",
    "end": "1519159"
  },
  {
    "text": "needed a little bit more jvm help to do it and that's what we get with invoke",
    "start": "1519159",
    "end": "1524679"
  },
  {
    "text": "Dynamic all right so I I definitely believe in voke dynamic is the future of java it's already changing how the the",
    "start": "1524919",
    "end": "1531799"
  },
  {
    "text": "language evolves with the Java 8 Lambda stuff uh now at this point I could show",
    "start": "1531799",
    "end": "1537840"
  },
  {
    "text": "some examples of how invoke Dynamic Works uh some actual code uh in the form",
    "start": "1537840",
    "end": "1543600"
  },
  {
    "text": "of method handles and how they actually function uh if that would be interesting or if anybody has any questions right now we could do that too so let's take a",
    "start": "1543600",
    "end": "1551520"
  },
  {
    "text": "look a little bit probably the most interesting bit to look at is Method handles and how you can build them how",
    "start": "1551520",
    "end": "1557840"
  },
  {
    "text": "you can compos them together uh let's bring up the actual Java do form so you",
    "start": "1557840",
    "end": "1562960"
  },
  {
    "text": "can see whereabouts they are so again Java 7 uh the package that you'll be",
    "start": "1562960",
    "end": "1568679"
  },
  {
    "text": "looking at is Java Lang invoke a new package that came along with jsr 29",
    "start": "1568679",
    "end": "1574120"
  },
  {
    "text": "292 method handle is essentially that that function object that we've got in",
    "start": "1574120",
    "end": "1579240"
  },
  {
    "text": "hand uh the like I said there's various ways to compose them uh probably the most interesting aspect is then when you",
    "start": "1579240",
    "end": "1585559"
  },
  {
    "text": "finally go and invoke it let's take a look at what the method are here is that readable enough bump it up",
    "start": "1585559",
    "end": "1592760"
  },
  {
    "text": "a little bit all right so very much like uh a",
    "start": "1592760",
    "end": "1598240"
  },
  {
    "text": "reflected object a Java line reflect method works we can invoke against a method handle uh there's various ways of",
    "start": "1598240",
    "end": "1605799"
  },
  {
    "text": "doing this invocation invoking with the exact arguments like for example not doing any casts not doing any",
    "start": "1605799",
    "end": "1611080"
  },
  {
    "text": "conversions from one primitive to another uh or invoking with arguments allowing it to do some of those coercion",
    "start": "1611080",
    "end": "1617440"
  },
  {
    "text": "for us we get these from the method handles",
    "start": "1617440",
    "end": "1622640"
  },
  {
    "text": "object so method handles provides a couple different ways of getting access to those data endpoints uh several of",
    "start": "1622640",
    "end": "1630080"
  },
  {
    "text": "those are on the me the interclass method handles lookup take a look at the methods here",
    "start": "1630080",
    "end": "1636600"
  },
  {
    "text": "so the lookup object is essentially your like your Java Land class where you go",
    "start": "1636600",
    "end": "1642360"
  },
  {
    "text": "to get uh a method or a field or a Constructor uh in this case we're getting method handles out so get a",
    "start": "1642360",
    "end": "1648880"
  },
  {
    "text": "Constructor off of a target class with some method type and the method type is basically the signature some arguments",
    "start": "1648880",
    "end": "1656000"
  },
  {
    "text": "some return value that's all there is to it uh we can also get Getters and Setters for Fields regardless of whether",
    "start": "1656000",
    "end": "1663240"
  },
  {
    "text": "a method was defined as a getter or a Setter we can get essentially what would be like a field object in the reflection",
    "start": "1663240",
    "end": "1671320"
  },
  {
    "text": "apis again all of the all of the uh the typical invocation styles are here so we",
    "start": "1672679",
    "end": "1678519"
  },
  {
    "text": "have special we have static and we have virtual which covers both virtual invocations and interface",
    "start": "1678519",
    "end": "1686320"
  },
  {
    "text": "invocations there are also some convenience methods so if we have the existing reflected versions of these we",
    "start": "1688360",
    "end": "1694200"
  },
  {
    "text": "can unreflected handle or a field and turn",
    "start": "1694200",
    "end": "1700600"
  },
  {
    "text": "it into a getter or a Setter then we have those in hand faster than reflection and we can start wiring",
    "start": "1700600",
    "end": "1707080"
  },
  {
    "text": "them into uh invoke Dynamic",
    "start": "1707080",
    "end": "1710840"
  },
  {
    "text": "stuff so the question is is this meant to be a more modern replacement for reflection in a large way it is it's",
    "start": "1713679",
    "end": "1720080"
  },
  {
    "text": "meant to be reflection that the jbm understands in a in a large part there",
    "start": "1720080",
    "end": "1726880"
  },
  {
    "text": "are implications of the current reflection API the fact that no matter what you do it's going to box those",
    "start": "1726880",
    "end": "1732840"
  },
  {
    "text": "arguments into an array to pass them through uh no matter what you do it's going to try to cast them uh lots of",
    "start": "1732840",
    "end": "1739760"
  },
  {
    "text": "extra logic in there they've done very good job of optimizing reflection but still has all of this extra crft around",
    "start": "1739760",
    "end": "1747080"
  },
  {
    "text": "it and the method handle API was intended primarily to provide a VM level",
    "start": "1747080",
    "end": "1753039"
  },
  {
    "text": "way of getting a function pointer or a field pointer that has none of that overhead and you can go straight into",
    "start": "1753039",
    "end": "1758960"
  },
  {
    "text": "the method yes yeah exactly and intended to perform better because the VM can see it",
    "start": "1758960",
    "end": "1765559"
  },
  {
    "text": "and optimize it well all right let's take a look at some code",
    "start": "1765559",
    "end": "1772799"
  },
  {
    "text": "here I think this works look at",
    "start": "1773440",
    "end": "1778519"
  },
  {
    "text": "that Kell totally deserved that award um okay so let's take a look at a few",
    "start": "1778519",
    "end": "1784720"
  },
  {
    "text": "examples in actual Live code so here is the call that we're going to emulate we've got a get property java. home we",
    "start": "1784720",
    "end": "1791279"
  },
  {
    "text": "everyone's done something like this before if we want to do this with the standard uh jsr 292 apis we need a",
    "start": "1791279",
    "end": "1798080"
  },
  {
    "text": "lookup object which we can get through calling method handles. lookup uh now",
    "start": "1798080",
    "end": "1803159"
  },
  {
    "text": "the interesting thing about the lookup object is that it's basically like this is my view into the jvm into these",
    "start": "1803159",
    "end": "1810279"
  },
  {
    "text": "classes from this point to the code so if there's something that's private and I can't call it from here I can't look",
    "start": "1810279",
    "end": "1816440"
  },
  {
    "text": "it up from here either but if it's private I can look it up from here give that handle out and other people can",
    "start": "1816440",
    "end": "1822000"
  },
  {
    "text": "call Private method because I've explicitly given them access to it so in this case it's just a public method it's",
    "start": "1822000",
    "end": "1827720"
  },
  {
    "text": "also a static method so look up find static on the system class the method",
    "start": "1827720",
    "end": "1834640"
  },
  {
    "text": "name is get property and the method type over",
    "start": "1834640",
    "end": "1839399"
  },
  {
    "text": "here it receives it the first argument is return value so it returns string and",
    "start": "1840799",
    "end": "1846200"
  },
  {
    "text": "it takes one string argument simple enough very similar to the Java Lang reflect apis and how you get method",
    "start": "1846200",
    "end": "1852679"
  },
  {
    "text": "objects out of them uh this extra way this other way here is uh using an API",
    "start": "1852679",
    "end": "1857720"
  },
  {
    "text": "called invoke binder which is which is API wrote to kind of simplify some of this process uh you'll as you start",
    "start": "1857720",
    "end": "1864679"
  },
  {
    "text": "working with method handles you have to build backward from a Target endpoint to",
    "start": "1864679",
    "end": "1869799"
  },
  {
    "text": "do a lot of those translations and a lot of the argument manipulation whereas invoked binder let it kind of go the other direction so mostly the same at",
    "start": "1869799",
    "end": "1876320"
  },
  {
    "text": "this point here and then once we have this method handle in hand we can just invoke it we call invoke pass in our",
    "start": "1876320",
    "end": "1882840"
  },
  {
    "text": "arguments and it does the calls for us uh field get another example so we've",
    "start": "1882840",
    "end": "1889919"
  },
  {
    "text": "got our system Outfield again a static field just for Simplicity here with any",
    "start": "1889919",
    "end": "1895080"
  },
  {
    "text": "of these if you were doing this call against a virtual method or doing this call against an instance field all you",
    "start": "1895080",
    "end": "1902720"
  },
  {
    "text": "have to do is essentially pass that Target object as the first argument to the call it's it really doesn't care in",
    "start": "1902720",
    "end": "1909480"
  },
  {
    "text": "the jbm level similar to how the reflection stuff works you pass the argument that is the class that you want",
    "start": "1909480",
    "end": "1914559"
  },
  {
    "text": "the object you want to call against and then have the additional arguments if you need them so here we're on our",
    "start": "1914559",
    "end": "1920039"
  },
  {
    "text": "lookup object again find static getter on the system class the field is",
    "start": "1920039",
    "end": "1925360"
  },
  {
    "text": "named out and we looking for a print streak and this should be the exact type on the target class once we have that in",
    "start": "1925360",
    "end": "1932440"
  },
  {
    "text": "hand we can call that we're just doing a get here so just invoking it with no",
    "start": "1932440",
    "end": "1937880"
  },
  {
    "text": "arguments we'll go and get that static field and again if there was a Target object we'd have invoke against this",
    "start": "1937880",
    "end": "1943840"
  },
  {
    "text": "object and it would get the field from the object just like it would with reflection",
    "start": "1943840",
    "end": "1949679"
  },
  {
    "text": "here we create a little structure so here we're calling it against an instance of an object so we actually have an instance field here that we're",
    "start": "1951000",
    "end": "1957159"
  },
  {
    "text": "going to set we're going to set the name field we look up find Setter not a",
    "start": "1957159",
    "end": "1963039"
  },
  {
    "text": "static Setter or static getter in this case but a direct Setter on my struct the name is name and it's a string that",
    "start": "1963039",
    "end": "1970240"
  },
  {
    "text": "we're going to be getting out of or we're going to be setting into it here we'll skip the invoke binder bit",
    "start": "1970240",
    "end": "1978120"
  },
  {
    "text": "invoke it down here passing an instance of that struct in and setting the name",
    "start": "1978120",
    "end": "1983760"
  },
  {
    "text": "value now where it starts to get interesting is being able to combine these in different ways uh perhaps you",
    "start": "1983760",
    "end": "1989720"
  },
  {
    "text": "have an operation that always goes and gets a field calls some method and then calls another method with the result of",
    "start": "1989720",
    "end": "1995360"
  },
  {
    "text": "that one and you want to have that optimized at the jvm level rather than generating code for it every single",
    "start": "1995360",
    "end": "2001399"
  },
  {
    "text": "time if we want to insert an argument in here so we've got our we're doing set property this time so we get our set",
    "start": "2001399",
    "end": "2009840"
  },
  {
    "text": "property method which returns a string and takes two string arguments in this",
    "start": "2009840",
    "end": "2015600"
  },
  {
    "text": "case uh a name and a value now we want to actually insert one",
    "start": "2015600",
    "end": "2021760"
  },
  {
    "text": "of those values in there so it's always being used essentially currying a value into this handle we insert my value in",
    "start": "2021760",
    "end": "2029320"
  },
  {
    "text": "here at index one in the argument list and then from then on we can call it without passing any arguments into it",
    "start": "2029320",
    "end": "2036120"
  },
  {
    "text": "but it will still optimize at the J M level as if it was a direct method call it just knows that this value is bound",
    "start": "2036120",
    "end": "2042039"
  },
  {
    "text": "into this bound into this method handle curried into it and it can be passed",
    "start": "2042039",
    "end": "2048679"
  },
  {
    "text": "automatically can also drop arguments so we have a a demo one class",
    "start": "2049440",
    "end": "2055000"
  },
  {
    "text": "here with that's actually this one let's go to to",
    "start": "2055000",
    "end": "2060878"
  },
  {
    "text": "ARS so the two args method takes in two arguments uh and then just basically turns them into a a string form of the",
    "start": "2060879",
    "end": "2068599"
  },
  {
    "text": "array so we know what we've got okay let's go back to two args we're",
    "start": "2068599",
    "end": "2073679"
  },
  {
    "text": "getting an in getting a reference to that method it returns a string and takes two string",
    "start": "2073679",
    "end": "2079480"
  },
  {
    "text": "arguments now in this case we know that the targ the consumer of our method handle is going to be passing extra",
    "start": "2079480",
    "end": "2085679"
  },
  {
    "text": "arguments or passing in arguments that we don't need for this particular case we can drop that we drop a string",
    "start": "2085679",
    "end": "2092079"
  },
  {
    "text": "argument and the at the second or the two index so we're passing in three",
    "start": "2092079",
    "end": "2097200"
  },
  {
    "text": "strings we don't need all three of them we drop the last one and then we're able to invoke a method that takes two",
    "start": "2097200",
    "end": "2103400"
  },
  {
    "text": "arguments passing the three the third argument knowing that it just gets dropped so this is when you want to",
    "start": "2103400",
    "end": "2108440"
  },
  {
    "text": "compose the same argument list and maybe one of those methods takes two arguments one of those methods takes three you",
    "start": "2108440",
    "end": "2114720"
  },
  {
    "text": "just tell the jvm how to deal with that argument difference and you can have it all in one handle all in one function",
    "start": "2114720",
    "end": "2120280"
  },
  {
    "text": "that does it for you permuting is another one that's kind of interesting it's it's sort of a sort",
    "start": "2120280",
    "end": "2126400"
  },
  {
    "text": "of a uh an insert and a drop combined into combined into one in this case what we",
    "start": "2126400",
    "end": "2134119"
  },
  {
    "text": "pass for building this handle changing these arguments around is just what order and",
    "start": "2134119",
    "end": "2140079"
  },
  {
    "text": "we want we want those arguments reordered restructured permuted and you can do it multiple",
    "start": "2140079",
    "end": "2146200"
  },
  {
    "text": "times so we've got our two ARS method again and we're going to permute the arguments that come in um it's we've got",
    "start": "2146200",
    "end": "2153760"
  },
  {
    "text": "three in this case we're calling it with a two strings and an integer we don't",
    "start": "2153760",
    "end": "2158880"
  },
  {
    "text": "need the integer because we know that that Target method doesn't need it and then we're actually going to reverse the two the first two arguments so we pass",
    "start": "2158880",
    "end": "2165800"
  },
  {
    "text": "the indexes in reverse order the first the one argument and the zeroth argument",
    "start": "2165800",
    "end": "2171119"
  },
  {
    "text": "and then when we call it with one two and three the three gets dropped the one",
    "start": "2171119",
    "end": "2177160"
  },
  {
    "text": "and the two get reversed another way that we can compose these together and manipulate the",
    "start": "2177160",
    "end": "2183000"
  },
  {
    "text": "arguments as they pass through the system",
    "start": "2183000",
    "end": "2187280"
  },
  {
    "text": "now folding start to get a little bit more complicated a lot of these a lot of these terms come from uh functional",
    "start": "2188560",
    "end": "2193839"
  },
  {
    "text": "programming as well so if you're familiar with left and right folds we've got that essentially as part of our functional composition of these method",
    "start": "2193839",
    "end": "2202079"
  },
  {
    "text": "handles so now we got a three args method which let's take a look at it three",
    "start": "2202079",
    "end": "2207880"
  },
  {
    "text": "ARS again basically just takes them and turns them into an array form",
    "start": "2207880",
    "end": "2214000"
  },
  {
    "text": "string all right so we've got a reference to our three ARS method",
    "start": "2214359",
    "end": "2219520"
  },
  {
    "text": "um we're going to take each of the arguments get the first letter of each one and then pass that back in as as one",
    "start": "2221480",
    "end": "2229079"
  },
  {
    "text": "as the third argument so here we've got a an initials",
    "start": "2229079",
    "end": "2234680"
  },
  {
    "text": "method that takes two strings and essentially just combines the first two",
    "start": "2235319",
    "end": "2240760"
  },
  {
    "text": "initial characters into into a new string we got our three args reference",
    "start": "2240760",
    "end": "2247160"
  },
  {
    "text": "we've got our initials reference and now we actually do our fold fold arguments takes the arguments",
    "start": "2247160",
    "end": "2254119"
  },
  {
    "text": "that are coming in passes them to your your folder in our in our case it's the initials method and then whatever the",
    "start": "2254119",
    "end": "2261319"
  },
  {
    "text": "result is that's a new argument in the process now we have three arguments in place down at the bottom we call it with",
    "start": "2261319",
    "end": "2268240"
  },
  {
    "text": "these two arguments it takes the initials passes them in as again as the",
    "start": "2268240",
    "end": "2274119"
  },
  {
    "text": "first argument for the next call and we get the full three argument form here by calling just with the two",
    "start": "2274119",
    "end": "2280599"
  },
  {
    "text": "arguments so lots of ways you can combine this and again all of this optimizing at the jvm level rather than",
    "start": "2280599",
    "end": "2286400"
  },
  {
    "text": "having to generate the code to do this kind of a way of of",
    "start": "2286400",
    "end": "2291560"
  },
  {
    "text": "programmatically generating jvm level code without doing bike coding without",
    "start": "2291560",
    "end": "2296640"
  },
  {
    "text": "loading classes in at runtime time here",
    "start": "2296640",
    "end": "2303880"
  },
  {
    "text": "okay filter is similar to folding filter lets you take every argument that you're passing through this chain and make some",
    "start": "2303880",
    "end": "2310800"
  },
  {
    "text": "change to it make some modification to it in this case it's our two args method and our our filter in this case is going",
    "start": "2310800",
    "end": "2317920"
  },
  {
    "text": "to be upcase every argument that gets passed in we want to upcase it before we send it on down to the next level send",
    "start": "2317920",
    "end": "2323920"
  },
  {
    "text": "it on down to the function and as you expect we call that it does our UPC casing and then we get",
    "start": "2323920",
    "end": "2330440"
  },
  {
    "text": "our string out with the upcase versions of",
    "start": "2330440",
    "end": "2334680"
  },
  {
    "text": "those all right spreading I won't really go into right",
    "start": "2335520",
    "end": "2340599"
  },
  {
    "text": "here spreading and collecting are are essentially the equivalent of doing V variable argument lists we want to",
    "start": "2340599",
    "end": "2345839"
  },
  {
    "text": "spread a certain number of arguments out into actual parameters or take a certain number of incoming parameters and stuff",
    "start": "2345839",
    "end": "2352560"
  },
  {
    "text": "them into an array for the call uh again this is stuff that you could generate as your own code or that you could write",
    "start": "2352560",
    "end": "2359680"
  },
  {
    "text": "the Java code for in every single case but you can build it programmatically here and the jbm optimizes it as if you",
    "start": "2359680",
    "end": "2366359"
  },
  {
    "text": "did write that Java code or if you did generate that bite",
    "start": "2366359",
    "end": "2371039"
  },
  {
    "text": "code okay uh a branch this one's probably",
    "start": "2371920",
    "end": "2377560"
  },
  {
    "text": "worth looking at so here I'm using invoke binder in this case uh and what we actually are doing we have a test",
    "start": "2377560",
    "end": "2385640"
  },
  {
    "text": "method that takes all the arguments in and makes some decision about them returns a",
    "start": "2385640",
    "end": "2391200"
  },
  {
    "text": "Boolean in this case we're using the Upp or down method as our our",
    "start": "2391200",
    "end": "2398880"
  },
  {
    "text": "test so we're going to pass in either the up value or some other value so",
    "start": "2398880",
    "end": "2404000"
  },
  {
    "text": "we're passing in a one or a not one to decide whether we want to upcase or down",
    "start": "2404000",
    "end": "2409599"
  },
  {
    "text": "case this stuff let's go back so if this test returns",
    "start": "2409599",
    "end": "2416200"
  },
  {
    "text": "true this method handle that we we're giving to the branch if this returns",
    "start": "2416200",
    "end": "2421400"
  },
  {
    "text": "true we're going to call the upcase path if it does not we're going to call the",
    "start": "2421400",
    "end": "2426920"
  },
  {
    "text": "down case case path and so essentially now we've got a handle or like a Java",
    "start": "2426920",
    "end": "2432200"
  },
  {
    "text": "Lang reflect method that actually does a test a Boolean test on the incoming arguments before it branches from there",
    "start": "2432200",
    "end": "2439319"
  },
  {
    "text": "and it optimizes just like any other piece of java code or any piece of jvm bite code we call it with one in my",
    "start": "2439319",
    "end": "2445520"
  },
  {
    "text": "string it UPC cases it call it with zero in my string down cases it in this",
    "start": "2445520",
    "end": "2451640"
  },
  {
    "text": "case uh a switch point is a little bit different it's a test that essentially you can only turn off so if you want it",
    "start": "2452160",
    "end": "2459079"
  },
  {
    "text": "to be absolutely fast as possible always following the true",
    "start": "2459079",
    "end": "2464720"
  },
  {
    "text": "case switch point is an excellent way to do it and then when you turn it off it will follow the false case forever now",
    "start": "2464720",
    "end": "2471079"
  },
  {
    "text": "the magic of this is that the jvm since it doesn't it knows it doesn't have to do any calculation on that switch point",
    "start": "2471079",
    "end": "2476200"
  },
  {
    "text": "it doesn't have to call out to your code to make that decision it can optimize it as if the test isn't even there it'll",
    "start": "2476200",
    "end": "2483760"
  },
  {
    "text": "always follow the true path and once it does get turned off the jbm will say Okay anybody running this code needs to",
    "start": "2483760",
    "end": "2490599"
  },
  {
    "text": "reexamine what they're doing pause now you're going to follow the false case from now on so you can do these tests",
    "start": "2490599",
    "end": "2497560"
  },
  {
    "text": "that are extremely fast and optimize as if there was no test at all as if there was no logic for the guard before it for",
    "start": "2497560",
    "end": "2504680"
  },
  {
    "text": "the uh the branching so here in this case we've got our switch point that we're calling",
    "start": "2504680",
    "end": "2510440"
  },
  {
    "text": "against uh the first two times since it's true the switch point hasn't been flipped off we can we always call the",
    "start": "2510440",
    "end": "2517720"
  },
  {
    "text": "upcase every single time we invalidate that switch point we say this is now this this this case should always go",
    "start": "2517720",
    "end": "2524680"
  },
  {
    "text": "false from now on then from then on it will call the other",
    "start": "2524680",
    "end": "2529838"
  },
  {
    "text": "Branch exection hand is a little bit complicated but as you might expect if you wanted to be able to handle an",
    "start": "2530040",
    "end": "2535440"
  },
  {
    "text": "exception as part of one of these handles or as part of what's essentially a Java line reflect method you give it",
    "start": "2535440",
    "end": "2541760"
  },
  {
    "text": "another handle that does the exception handling logic so if an exception gets great when",
    "start": "2541760",
    "end": "2547520"
  },
  {
    "text": "you do this call it will call back to your code call back to this other handle and fix it up and be able to handle the",
    "start": "2547520",
    "end": "2553839"
  },
  {
    "text": "exception for you which could then rease it possibly or it could follow another exceptional path or do some different",
    "start": "2553839",
    "end": "2559599"
  },
  {
    "text": "calculation but you have it all in one box one handle that you can use for this",
    "start": "2559599",
    "end": "2566280"
  },
  {
    "text": "now okay so that is kind of the basics of the different method handles and how you throw them together uh let's take a",
    "start": "2566319",
    "end": "2573800"
  },
  {
    "text": "look at a at a a uh different project here that shows",
    "start": "2573800",
    "end": "2579960"
  },
  {
    "text": "actually using method handles with invoke Dynamic okay good on",
    "start": "2579960",
    "end": "2586838"
  },
  {
    "text": "time so what we're going to do is we're going to write a little piece of invoke Dynamic code that can take this car",
    "start": "2587359",
    "end": "2592720"
  },
  {
    "text": "class and call methods against it dynamically Based On A String based on uh some new language so we' got two",
    "start": "2592720",
    "end": "2600040"
  },
  {
    "text": "methods here honk and hello hello just throws these two things together and honk just prints something out",
    "start": "2600040",
    "end": "2608440"
  },
  {
    "text": "now our bootstrap here let's see if we can bring this up a",
    "start": "2610040",
    "end": "2616319"
  },
  {
    "text": "bit all right the bootstrap logic is let's",
    "start": "2617920",
    "end": "2624000"
  },
  {
    "text": "actually go hello [Music] here",
    "start": "2624000",
    "end": "2630599"
  },
  {
    "text": "okay so now the bootstrap you'll see it gets an actual instance of the method handles look up this is how it knows",
    "start": "2631800",
    "end": "2637960"
  },
  {
    "text": "where to go get the methods how to get whatever this is what you use to to bind that that call you've got an invoke",
    "start": "2637960",
    "end": "2643800"
  },
  {
    "text": "Dynamic that's coming in it's doing some call you need to be able to go get the the target for it um you'll have the",
    "start": "2643800",
    "end": "2650280"
  },
  {
    "text": "name from the call site so whatever that name was that was actually being passed in and the method type so very similar",
    "start": "2650280",
    "end": "2657079"
  },
  {
    "text": "to how you get the method handles what you get on the bootstrap side of invoke Dynamic is hopefully everything you need",
    "start": "2657079",
    "end": "2664240"
  },
  {
    "text": "to tell the jbm where to get this data from how to call this method so in this",
    "start": "2664240",
    "end": "2669319"
  },
  {
    "text": "case if our invoke Dynamic says that it needs to call the hello method we're",
    "start": "2669319",
    "end": "2674920"
  },
  {
    "text": "going to go we've got our lookup object we find static find the hello method here which is from the car",
    "start": "2674920",
    "end": "2683200"
  },
  {
    "text": "class uh and in this case we're actually going to add some parameter types to",
    "start": "2684520",
    "end": "2690480"
  },
  {
    "text": "it we're going to add an additional argument that says from invoke dynamic",
    "start": "2691680",
    "end": "2698839"
  },
  {
    "text": "so our prefix that gets attached on here is going to be from invoke Dynamic and we'll stick that on whatever the object",
    "start": "2698839",
    "end": "2704720"
  },
  {
    "text": "is it's passed in let's actually step through and you",
    "start": "2704720",
    "end": "2711280"
  },
  {
    "text": "can see how this works live I believe it's this",
    "start": "2711280",
    "end": "2717359"
  },
  {
    "text": "one okay I'll explain the other half of this because we're going to do the the honk side",
    "start": "2721599",
    "end": "2728559"
  },
  {
    "text": "so in this case we're we won't be using the the the the hello method we'll actually want to call dynamically the honk method we'll call the uh the honk",
    "start": "2728559",
    "end": "2735800"
  },
  {
    "text": "method on our car object we're going to basically split that name up this one is sort of a",
    "start": "2735800",
    "end": "2742000"
  },
  {
    "text": "specially encoded name you can have these names be pretty much anything they don't have to be standard Java method names you're encoding it to say this is",
    "start": "2742000",
    "end": "2748680"
  },
  {
    "text": "a dynamic call to honk in this case we'll split it up and we'll get that last element because this is the method",
    "start": "2748680",
    "end": "2754720"
  },
  {
    "text": "we actually want to call uh we'll look it up as a virtual method on the car class with the method type",
    "start": "2754720",
    "end": "2761040"
  },
  {
    "text": "we've got coming in just a standard uh call to this very simple I think it's just a yeah void takes no",
    "start": "2761040",
    "end": "2769040"
  },
  {
    "text": "arguments and then we're just going to bind that in directly constant call site basically tells the jvm this is never",
    "start": "2769040",
    "end": "2775440"
  },
  {
    "text": "going to change you can optimize it as if this code was basically written in line at the invoke Dynamic",
    "start": "2775440",
    "end": "2782319"
  },
  {
    "text": "site all right so let's go back here I'm going to",
    "start": "2782319",
    "end": "2788920"
  },
  {
    "text": "okay so we're actually generating a little method like I said you can't use inv can't do invoke Dynamic directly in",
    "start": "2795880",
    "end": "2801760"
  },
  {
    "text": "Java but we're going to emit some bite code here so this bite code for our call honk method creates a new instance of",
    "start": "2801760",
    "end": "2808280"
  },
  {
    "text": "the car and calls the Constructor on it and then dynamically",
    "start": "2808280",
    "end": "2813599"
  },
  {
    "text": "invokes we'll do the honk method here",
    "start": "2813599",
    "end": "2818800"
  },
  {
    "text": "now down at the bottom we actually get a reference to that we'll just use regular Java Lang reflection for this and we can",
    "start": "2821040",
    "end": "2826400"
  },
  {
    "text": "call it and watch what it actually does hopefully this will work properly let's",
    "start": "2826400",
    "end": "2833160"
  },
  {
    "text": "see all right let's give it a shot",
    "start": "2834640",
    "end": "2839318"
  },
  {
    "text": "okay I have a feeling this might freak out",
    "start": "2848480",
    "end": "2853559"
  },
  {
    "text": "here oops sure it works properly",
    "start": "2853559",
    "end": "2861400"
  },
  {
    "text": "okay right that's what I get for changing the demo while I'm doing",
    "start": "2861400",
    "end": "2868640"
  },
  {
    "text": "it okay instructor",
    "start": "2869599",
    "end": "2874040"
  },
  {
    "text": "let me try ring this all over again",
    "start": "2883240",
    "end": "2889240"
  },
  {
    "text": "okay all right it look like that demo is not going to work like I hope it",
    "start": "2897040",
    "end": "2903318"
  },
  {
    "text": "would all right well are there any other questions and I'll see if I can't fix this up while",
    "start": "2905359",
    "end": "2911640"
  },
  {
    "text": "we're talking through them it's a it's a kind of a difficult abstract thing to think about especially since you can't",
    "start": "2911640",
    "end": "2917440"
  },
  {
    "text": "do it in a normal Java code uh but if I can get this demo to",
    "start": "2917440",
    "end": "2924119"
  },
  {
    "text": "work should be a little bit easier Target",
    "start": "2924119",
    "end": "2929040"
  },
  {
    "text": "exception yeah go ahead",
    "start": "2933640",
    "end": "2937960"
  },
  {
    "text": "well so possible security risks uh that's actually a pretty good question the fact that you can get access to",
    "start": "2940960",
    "end": "2947480"
  },
  {
    "text": "private methods and can get access to Constructors that you normally wouldn't be able to call uh would make you think",
    "start": "2947480",
    "end": "2953400"
  },
  {
    "text": "that maybe there's a security poss a security problem there but you really can only give access to those private",
    "start": "2953400",
    "end": "2960319"
  },
  {
    "text": "methods if you would be able to call them from that point in the code anyway uh the lookup when you get it in hand",
    "start": "2960319",
    "end": "2967599"
  },
  {
    "text": "when you make that lookup Call",
    "start": "2967599",
    "end": "2972280"
  },
  {
    "text": "uh this one right here uh there's a bit of special jvm magic that's going to say",
    "start": "2972720",
    "end": "2978559"
  },
  {
    "text": "you only have access to what you normally could call from this point in the code if you can call Private methods",
    "start": "2978559",
    "end": "2983760"
  },
  {
    "text": "you can call Private methods and if you want to get those private methods and give those references out to somebody so",
    "start": "2983760",
    "end": "2990160"
  },
  {
    "text": "be it very similar to how if you were to create an inner class at this point it would be able to call those methods be",
    "start": "2990160",
    "end": "2996359"
  },
  {
    "text": "able to call all private methods and access private fields and that's up to you if you want to give out the keys to",
    "start": "2996359",
    "end": "3002200"
  },
  {
    "text": "your private code and your protected code so it's still you'd still have to",
    "start": "3002200",
    "end": "3007280"
  },
  {
    "text": "opt into any security issue that would come out of that but it does give you a way to access those private Fields",
    "start": "3007280",
    "end": "3014520"
  },
  {
    "text": "private methods uh without the overhead of an inner class or uh having some",
    "start": "3014520",
    "end": "3021160"
  },
  {
    "text": "other like little accessors that are generated like the J the Java C compiler does you can basically just give a",
    "start": "3021160",
    "end": "3026839"
  },
  {
    "text": "handle to a private method to someone that you trust all right well here's what I'll do I'll promise that I'm going",
    "start": "3026839",
    "end": "3032720"
  },
  {
    "text": "to have a blog post about this that walks through the whole thing and possibly a video to show it all",
    "start": "3032720",
    "end": "3037760"
  },
  {
    "text": "working uh but it is a difficult thing to kind of communicate because it is",
    "start": "3037760",
    "end": "3042960"
  },
  {
    "text": "very specific to new languages very specific to new language features like in like uh Java 8 lambdas uh but I'm",
    "start": "3042960",
    "end": "3050760"
  },
  {
    "text": "hoping that I can come up with a a couple good posts about more General cases General Uses of this",
    "start": "3050760",
    "end": "3057280"
  },
  {
    "text": "uh they'll help demonstrate why it's useful even if you're not a language implementor and uh that's about all I",
    "start": "3057280",
    "end": "3062440"
  },
  {
    "text": "have so thanks very much [Music]",
    "start": "3062440",
    "end": "3076519"
  }
]