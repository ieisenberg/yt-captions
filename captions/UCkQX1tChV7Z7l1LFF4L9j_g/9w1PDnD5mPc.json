[
  {
    "text": "good afternoon everybody I'm I'm painfully aware of the fact that I am the last thing standing in between you and beer so I will",
    "start": "13280",
    "end": "19760"
  },
  {
    "text": "uh try not to I will try and break the habit of Lifetime and not hopelessly overrun um but if I do which I'm sadly",
    "start": "19760",
    "end": "27240"
  },
  {
    "text": "is almost inevitable please start throwing things at me um so so one quick thing before I start um I I'm probably",
    "start": "27240",
    "end": "34200"
  },
  {
    "text": "more than usually technically challenged today because as ever I I punish myself by using insisting on using Linux and it",
    "start": "34200",
    "end": "40480"
  },
  {
    "text": "always means that every time I try and connect my laptop to a projector something goes horribly wrong so",
    "start": "40480",
    "end": "46559"
  },
  {
    "text": "thankfully um I've been able to borrow another Linux laptop from from L who's very kindly loaned it to me um but uh it",
    "start": "46559",
    "end": "53600"
  },
  {
    "text": "has a a a German keyboard uh plus plus plus plus it's not it's not my",
    "start": "53600",
    "end": "60480"
  },
  {
    "text": "usual setup and I've just I've just fortunat fortunately all my presentation was was a GitHub project so I've just been able to clone it and recompile it",
    "start": "60480",
    "end": "66880"
  },
  {
    "text": "so hopefully everything will be all right um but yes please if if if things are more than usually",
    "start": "66880",
    "end": "72880"
  },
  {
    "text": "fumbly um uh please bear with me okay so um my name is m Sabin um as some of you",
    "start": "72880",
    "end": "80880"
  },
  {
    "text": "may know uh I am uh yet another pre-or person as of around June of this year um",
    "start": "80880",
    "end": "88600"
  },
  {
    "text": "and I'm going to be talking about my my my ongoing project to um torture and",
    "start": "88600",
    "end": "94960"
  },
  {
    "text": "mutilate the Scara type Checker called shapeless and um what I'm going to show",
    "start": "94960",
    "end": "100799"
  },
  {
    "text": "you today is some new stuff that we can't do just yet um it is it is it is",
    "start": "100799",
    "end": "107240"
  },
  {
    "text": "uh exploiting our the new Hammer U which is macros um but it's a it's it's a it's",
    "start": "107240",
    "end": "113920"
  },
  {
    "text": "a newer it's an even newer bit of the new Hammer uh which is uh specifically uh implicit macros",
    "start": "113920",
    "end": "120360"
  },
  {
    "text": "and uh and type macros uh which currently only exist in um the uh macro",
    "start": "120360",
    "end": "126920"
  },
  {
    "text": "Paradise Fork of uh Eugene uh bum's uh Scala Kepler uh Fork uh which is",
    "start": "126920",
    "end": "134440"
  },
  {
    "text": "basically the testing ground for new features in in in in Scara macros in actual fact there's one crucial feature",
    "start": "134440",
    "end": "140000"
  },
  {
    "text": "that I've relied on that actually didn't work until Wednesday of this week um",
    "start": "140000",
    "end": "145080"
  },
  {
    "text": "because there was a kind of feature I was trying to use um uh it looked good to me uh everything seemed to be fine um",
    "start": "145080",
    "end": "152480"
  },
  {
    "text": "except uh I uh tried doing something which triggered the the the the macro that I the type macro that I defined uh",
    "start": "152480",
    "end": "159560"
  },
  {
    "text": "sorry the implicit macro that I defined and uh was faced with a a huge and ugly looking stack Trace uh on on the console",
    "start": "159560",
    "end": "166519"
  },
  {
    "text": "ending in a uh triple question mark not implemented error uh actually the bit of",
    "start": "166519",
    "end": "171720"
  },
  {
    "text": "the implicit macro API that that I needed to use to get this stuff to work um uh Eugene hadn't quite got around to",
    "start": "171720",
    "end": "177959"
  },
  {
    "text": "it so I sent him a A desperate email MA saying Hey Eugene any chance of you any chance of you actually implementing this",
    "start": "177959",
    "end": "183840"
  },
  {
    "text": "I could really I could really do with this before Friday uh because I need it for my talk",
    "start": "183840",
    "end": "189760"
  },
  {
    "text": "and um he was he was he he was back uh within within a couple of hours for a fix and it it's it's it's kind of a",
    "start": "189760",
    "end": "195200"
  },
  {
    "text": "relatively mind it's sort of just elaborating stuff but anyway the Big disclaimer is that none of this is",
    "start": "195200",
    "end": "200799"
  },
  {
    "text": "available in in in a a released Skylar compiler whatsoever not even 210 uh it's",
    "start": "200799",
    "end": "206000"
  },
  {
    "text": "not even on um it's not even on on the 211 snapshot yet it's macro Paradise only there is",
    "start": "206000",
    "end": "212840"
  },
  {
    "text": "absolutely no guarantee that uh implicit macros um will make their way into into",
    "start": "212840",
    "end": "218799"
  },
  {
    "text": "skyar ever in fact and I I I think possibly one of the things I really want to try and do is is get enough people",
    "start": "218799",
    "end": "224319"
  },
  {
    "text": "interested in implicit macros to that that there will be uh a riot if if they",
    "start": "224319",
    "end": "229920"
  },
  {
    "text": "don't get included in in in Scala in Scala proper um okay",
    "start": "229920",
    "end": "236799"
  },
  {
    "text": "so this this code is is almost entirely um uh going to be reppel sessions and and",
    "start": "236799",
    "end": "242640"
  },
  {
    "text": "and and code um I have uh one slide which is uh this one um so if anybody is",
    "start": "242640",
    "end": "250959"
  },
  {
    "text": "actually interested in just just cloning that get uh get repository if you want to actually have a look at a code on your own machine while I'm talking then",
    "start": "250959",
    "end": "256840"
  },
  {
    "text": "please do uh otherwise that's that's um that's useful info for for for later",
    "start": "256840",
    "end": "263120"
  },
  {
    "text": "okay so let's get going can",
    "start": "263120",
    "end": "271720"
  },
  {
    "text": "um right so um what I'm going to show you basically um is a way of uh",
    "start": "274080",
    "end": "284440"
  },
  {
    "text": "exploiting um implicit type and implicit macros to make some of the techniques",
    "start": "284440",
    "end": "290080"
  },
  {
    "text": "that I've been exploring uh in shapeless already uh just that little bit more uh",
    "start": "290080",
    "end": "295240"
  },
  {
    "text": "useful and tractable so in a sense nothing I'm going to show right now is",
    "start": "295240",
    "end": "300520"
  },
  {
    "text": "is entirely new uh most of the things I'm going to show you today are things which um have been possible to do uh in",
    "start": "300520",
    "end": "308000"
  },
  {
    "text": "shapeless using uh using the kind of the typ level programming stuff uh that it's known for for for quite some time now",
    "start": "308000",
    "end": "314720"
  },
  {
    "text": "but I'm just going to do a very very quick demonstration of um some of the uh",
    "start": "314720",
    "end": "320160"
  },
  {
    "text": "some of the infelicities of of of of that mechanism it's it's very nice in the sense that that that obviously it",
    "start": "320160",
    "end": "325400"
  },
  {
    "text": "cuts with the grain of the type system we have a nice interesting uh formal Theory of how of how of how the various",
    "start": "325400",
    "end": "331880"
  },
  {
    "text": "kinds of um tight level artifacts I'm I'm I'm working with interact with each other how they relate to each other so",
    "start": "331880",
    "end": "338080"
  },
  {
    "text": "that's that's great um so it's something that we can reason about very very straightforwardly um on the other hand",
    "start": "338080",
    "end": "345520"
  },
  {
    "text": "um uh macros they're kind of the sort of the imperative version of typ level",
    "start": "345520",
    "end": "351000"
  },
  {
    "text": "programming in a sense I mean they're full of loops and go-tos and sort of mutable State as opposed to the beautiful sort of declarative logic",
    "start": "351000",
    "end": "357639"
  },
  {
    "text": "programming style of of of type level programming which is the way it really should be done um um but the the flip",
    "start": "357639",
    "end": "365000"
  },
  {
    "text": "side is is is is the same flip side that in in a way perhaps even more so that we're used to which is that you know",
    "start": "365000",
    "end": "370400"
  },
  {
    "text": "sometimes you pay an abstraction and performance cost so there are there there are ways that you can you can you can um uh cut Corners uh using using",
    "start": "370400",
    "end": "378639"
  },
  {
    "text": "macros that um that that make for dramatic improvements so what I what I what I've been trying to do and what",
    "start": "378639",
    "end": "384680"
  },
  {
    "text": "I've been trying to explore in with in playing around with implicit macros is is see if there's some way that we can get the best of Both Worlds if we can",
    "start": "384680",
    "end": "390599"
  },
  {
    "text": "get the if we can get the the the the um the performance benefits of using macros",
    "start": "390599",
    "end": "396280"
  },
  {
    "text": "uh combined with the um uh the uh the",
    "start": "396280",
    "end": "402160"
  },
  {
    "text": "the the reason the reasoning kind of benefits that we get from from from using uh more um more straightforward",
    "start": "402160",
    "end": "408720"
  },
  {
    "text": "simpler tip level programming that that that I've been looking at before so okay I'm going to very very quickly show you",
    "start": "408720",
    "end": "414720"
  },
  {
    "text": "the problem or at least one of the problems um and I'm going to demonstrate this in the context of typ level",
    "start": "414720",
    "end": "420400"
  },
  {
    "text": "uh tip level arithmetic typ level tip level arithmetic uh kind of may seem a little bit obscure and obstru and",
    "start": "420400",
    "end": "427639"
  },
  {
    "text": "perhaps not incredibly useful but there are things that you can do with it um which I think are quite useful um and in",
    "start": "427639",
    "end": "434919"
  },
  {
    "text": "the sense this is one of the poster children of of the dependently type programming re Revolution the idea of having um uh vectors or collection types",
    "start": "434919",
    "end": "442800"
  },
  {
    "text": "which have their size statically encoded in their type um so this is this is",
    "start": "442800",
    "end": "448560"
  },
  {
    "text": "already present in shap this works on Scara 292 um uh but it's clunky and",
    "start": "448560",
    "end": "454240"
  },
  {
    "text": "we'll see in a second just how clunky it is um so let's let's do a couple of",
    "start": "454240",
    "end": "459800"
  },
  {
    "text": "quick Imports uh so shapeless um so let's",
    "start": "459800",
    "end": "467319"
  },
  {
    "text": "try lost underscore again I've got it there it",
    "start": "470120",
    "end": "475120"
  },
  {
    "text": "is well the problem with that is that then the uh the key it doesn't correspond to the to the to the code",
    "start": "476599",
    "end": "482680"
  },
  {
    "text": "anyway i' I've tried that already it doesn't help it's worse it's actually it's actually worse",
    "start": "482680",
    "end": "488479"
  },
  {
    "text": "um uh right okay sorry have I missed",
    "start": "488479",
    "end": "495520"
  },
  {
    "text": "something no",
    "start": "495520",
    "end": "501159"
  },
  {
    "text": "um so um so SK uh so um shapist has has Type level natural numbers these These are encoded as um a sort of piano",
    "start": "501159",
    "end": "508919"
  },
  {
    "text": "numeral so so it's it's we start with zero uh we have we we as well as as a type level form we we we we also have a",
    "start": "508919",
    "end": "515560"
  },
  {
    "text": "um a value level form as well um so this is this is this is the the value level form of of the natural number zero and",
    "start": "515560",
    "end": "523279"
  },
  {
    "text": "you can see its type is um uh shapeless uh shapeless netore Z and its value is",
    "start": "523279",
    "end": "529360"
  },
  {
    "text": "is some sort of anonymous value of of of the net type um so we can continue on",
    "start": "529360",
    "end": "536680"
  },
  {
    "text": "with with these underscore prefixed uh uh uh a natural number values uh up to I",
    "start": "536680",
    "end": "542040"
  },
  {
    "text": "think I go up to 22 for some obscure reason I can't imagine exactly sorry yes",
    "start": "542040",
    "end": "547800"
  },
  {
    "text": "you resizing the window up slightly yes what I can what I what I think I can",
    "start": "547800",
    "end": "554320"
  },
  {
    "text": "do is probably this does that help periodically I will do that and",
    "start": "554320",
    "end": "560519"
  },
  {
    "text": "hopefully uh yeah every time it sort of drops below the level of the chairs please somebody shout and I'll I'll try I'll try and head back to the top okay",
    "start": "560519",
    "end": "567680"
  },
  {
    "text": "so um so um we have this slightly clunky encoding of uh clunky encoding of of",
    "start": "567680",
    "end": "574680"
  },
  {
    "text": "natural numbers here um they have to be explicitly defined they're defined in terms of well zero zero is is is just",
    "start": "574680",
    "end": "580920"
  },
  {
    "text": "our initial value of of of of our net type but then everything else is encoded as uh successor of successor of",
    "start": "580920",
    "end": "587760"
  },
  {
    "text": "successor of so this is nested type Constructors um and then a corresponding value level uh representatives of those",
    "start": "587760",
    "end": "594360"
  },
  {
    "text": "things so if we actually look at uh value one you can see that it's successor of nat zero if we look at",
    "start": "594360",
    "end": "601279"
  },
  {
    "text": "Value two uh successor of successor etc etc I think well successor of of of nat",
    "start": "601279",
    "end": "607480"
  },
  {
    "text": "one which is um so Nat one is is successor of of nat zero so it's it's",
    "start": "607480",
    "end": "612920"
  },
  {
    "text": "it's a kind of a recursive piano uh arithmetic uh kind of definition of natural numbers okay so um um so these",
    "start": "612920",
    "end": "621680"
  },
  {
    "text": "these are just sort of type level and value level uh correlates of of natural numbers can we actually do anything useful with him well the answer that I I",
    "start": "621680",
    "end": "628760"
  },
  {
    "text": "I have already answered sorry I've already given uh is is that yes we can",
    "start": "628760",
    "end": "633920"
  },
  {
    "text": "we can use implicit resolution to effectively do uh do do proofs in simple",
    "start": "633920",
    "end": "639079"
  },
  {
    "text": "arithmetic sorry proofs uh arithmetic I there's something must be wrong the compiler is doing math that's not",
    "start": "639079",
    "end": "644880"
  },
  {
    "text": "allowed is it um um okay so let's let's see if we can",
    "start": "644880",
    "end": "651480"
  },
  {
    "text": "ask the compiler uh to do some where's",
    "start": "651480",
    "end": "657680"
  },
  {
    "text": "why um uh yes got it oh not quite almost got it",
    "start": "657680",
    "end": "667760"
  },
  {
    "text": "no sorry ah left yes no this one yes got it okay",
    "start": "668279",
    "end": "680800"
  },
  {
    "text": "cool um okay so we can do we can ask the compiler to prove for us um that um 3 +",
    "start": "680800",
    "end": "691120"
  },
  {
    "text": "5 is 8 it's an incredibly complex proof um like so so here we are",
    "start": "691120",
    "end": "701320"
  },
  {
    "text": "using uh a",
    "start": "701320",
    "end": "707399"
  },
  {
    "text": "comma so 3 five8 close close whoops wrong number of",
    "start": "708000",
    "end": "715639"
  },
  {
    "text": "oh yes indeed thank you so so nice when people use your code",
    "start": "715639",
    "end": "720839"
  },
  {
    "text": "and they actually know it better than you do that's great okay so um so what's",
    "start": "720839",
    "end": "726000"
  },
  {
    "text": "happened here is that uh on the basis of a whole bunch of implicit uh definitions actually recursively defined implicit",
    "start": "726000",
    "end": "732160"
  },
  {
    "text": "definitions um there there is available a um uh an implicit witness for the fact",
    "start": "732160",
    "end": "738440"
  },
  {
    "text": "that three and five makes eight if we were to try it with a different value like so",
    "start": "738440",
    "end": "744240"
  },
  {
    "text": "um that's not going to work there isn't there isn't a corresponding implicit value here now I'm not going to I'm not going to not going to go into too many",
    "start": "744240",
    "end": "750360"
  },
  {
    "text": "details as to exactly what the implementation of this is but if you anyone who's kind of familiar with the sort of the the recursive definition of",
    "start": "750360",
    "end": "756399"
  },
  {
    "text": "addition in piano arithmetic will'll probably get some idea that what we're doing is we're kind of like recursing down one value and kind of like counting",
    "start": "756399",
    "end": "763320"
  },
  {
    "text": "up another and and the first thing that should immediately hit you in terms of at least compile time um addition is",
    "start": "763320",
    "end": "770680"
  },
  {
    "text": "going to be what o n in the size of right okay now now the the the next",
    "start": "770680",
    "end": "777040"
  },
  {
    "text": "thing is of course is once we've got addition we probably want to have uh multiplication as well so let's try multiplying three by",
    "start": "777040",
    "end": "784680"
  },
  {
    "text": "four and that oops 4ore",
    "start": "784680",
    "end": "791480"
  },
  {
    "text": "4 um and that should beore 12 oops",
    "start": "791480",
    "end": "798399"
  },
  {
    "text": "sorry yeah yay cool okay so that works as well",
    "start": "798399",
    "end": "805720"
  },
  {
    "text": "now um the definition of um uh uh multiplication in in piano arithmetic is",
    "start": "805720",
    "end": "810880"
  },
  {
    "text": "kind of doubly recursive um so this is basically o n squ in the size of right so aside from the fact that",
    "start": "810880",
    "end": "817480"
  },
  {
    "text": "quite soon we're going to run out of explicit numerals I mean we could keep on going by just applying the successor type Constructor as long as we like",
    "start": "817480",
    "end": "823560"
  },
  {
    "text": "until we get bored but this is this is very very very irritating um ideally we would prefer to have a rather turer and",
    "start": "823560",
    "end": "829600"
  },
  {
    "text": "more natural form of expression aside from the fact we're going to run out of numerals quite soon we also have a little bit of a problem um if um well",
    "start": "829600",
    "end": "838720"
  },
  {
    "text": "let's see what can we do here let's just",
    "start": "838720",
    "end": "845120"
  },
  {
    "text": "um I'm actually Wonder okay well if I if I if I use if I use the prod type class",
    "start": "845120",
    "end": "851399"
  },
  {
    "text": "instead um that actually hides away the result types I was just checked that this I should have tested this before I",
    "start": "851399",
    "end": "857600"
  },
  {
    "text": "came on yeah that's that's fine okay so what was what this is saying is that it can find it's not actually going to tell",
    "start": "857600",
    "end": "862680"
  },
  {
    "text": "us I don't think in this context what the product is but it's it has at least produced a witness for that so let's",
    "start": "862680",
    "end": "869519"
  },
  {
    "text": "let's just try multiplying um well let's let's do keep keep doing squares and see",
    "start": "869519",
    "end": "875279"
  },
  {
    "text": "how long we can go before smoke starts coming out of the back of the laptop so",
    "start": "875279",
    "end": "881040"
  },
  {
    "text": "that's 7 by S I think it's kind of noticeably",
    "start": "881040",
    "end": "886480"
  },
  {
    "text": "getting a little bit slower with each one um yes I think it is isn't",
    "start": "886480",
    "end": "894199"
  },
  {
    "text": "it definitely well let's let's let's go a bit faster let's",
    "start": "896440",
    "end": "902079"
  },
  {
    "text": "try yes okay so a bit further let's try 20 squared I actually think this this is",
    "start": "903560",
    "end": "911360"
  },
  {
    "text": "this is this is this is quite good I can remember some someone else um was experimenting with Tye L encoding some",
    "start": "911360",
    "end": "916759"
  },
  {
    "text": "natural numbers and I I think I think their implementation only got up to you know eight8 squared or something like that so I think the fact that I could",
    "start": "916759",
    "end": "922800"
  },
  {
    "text": "actually do 40 well 20 squared in this is must be a pretty good laptop",
    "start": "922800",
    "end": "927959"
  },
  {
    "text": "this okay so this is this is I've run I've",
    "start": "927959",
    "end": "933399"
  },
  {
    "text": "now run out of integer literals after this one and that's as far as it goes but as you can see basically compile",
    "start": "933399",
    "end": "938800"
  },
  {
    "text": "times in this kind of setting they they just blow out horrendously so it's it's kind of it's kind of not very practical",
    "start": "938800",
    "end": "945399"
  },
  {
    "text": "um for for for for real uses um Okay so",
    "start": "945399",
    "end": "950560"
  },
  {
    "text": "we've got two problems that we've seen um and uh one of them is clunky literals",
    "start": "950560",
    "end": "956040"
  },
  {
    "text": "the other one is um um uh is is is just horrible horrible compile times for for",
    "start": "956040",
    "end": "962160"
  },
  {
    "text": "any kind of non-trivial uh type level arithmetic um so what I'm going to show you now is um",
    "start": "962160",
    "end": "970279"
  },
  {
    "text": "some Nifty Things I've been able to do with with a combination of um um of typ",
    "start": "970279",
    "end": "977839"
  },
  {
    "text": "macros and implicit macros which will fix both of these problems so um the first thing I want to do before I do",
    "start": "977839",
    "end": "983720"
  },
  {
    "text": "that is I just want to very briefly um uh introduce Singleton types um sorry",
    "start": "983720",
    "end": "989000"
  },
  {
    "text": "I'm being gestured at that I'm I'm not close enough to the microphone so Singleton types can I have a quick show of hands who here is familiar with",
    "start": "989000",
    "end": "995880"
  },
  {
    "text": "Singleton types in scalla that's a pretty good proportion actually that's great um okay so",
    "start": "995880",
    "end": "1002519"
  },
  {
    "text": "Singleton types are um basically types which have precisely one inhabitant so",
    "start": "1002519",
    "end": "1008880"
  },
  {
    "text": "rather than being say the type integer which contains all of the integers you might have the Singleton type of one uh",
    "start": "1008880",
    "end": "1016600"
  },
  {
    "text": "which contains precisely and only um the the the integer one so it would be a type error for example to ascribe the",
    "start": "1016600",
    "end": "1023240"
  },
  {
    "text": "type uh the Singleton type of one to the value two um so Scala actually uh has",
    "start": "1023240",
    "end": "1031280"
  },
  {
    "text": "Singleton types um unfortunately it doesn't have them uh well it it does",
    "start": "1031280",
    "end": "1036438"
  },
  {
    "text": "have them across the board it has them with respect to all types all types have corresponding Singleton types um unfortunately it doesn't have syntax to",
    "start": "1036439",
    "end": "1043000"
  },
  {
    "text": "express them with respect to uh to literal value so there there there's no way scol Checker represents internally",
    "start": "1043000",
    "end": "1051039"
  },
  {
    "text": "um uh Singleton types for integers but you you just can't you can't you can't just Express that in Scala surface syntax",
    "start": "1051039",
    "end": "1057480"
  },
  {
    "text": "um um but basically that's that they they are going to be very very useful for us um and we're going to use those",
    "start": "1057480",
    "end": "1063799"
  },
  {
    "text": "to to replace our our piano numerals I just want to do one very very very very quick um illustration of what what a",
    "start": "1063799",
    "end": "1072160"
  },
  {
    "text": "Singleton type will do for you so let's let's do something like uh Val food is",
    "start": "1072160",
    "end": "1079600"
  },
  {
    "text": "oops equals is",
    "start": "1079600",
    "end": "1086240"
  },
  {
    "text": "uh let's I I'll I'll do it with the string but for this is I'm kind of cheating a little bit with this",
    "start": "1086240",
    "end": "1093039"
  },
  {
    "text": "um so if I now do Val bar is of type Fu do type so this is the",
    "start": "1093039",
    "end": "1103159"
  },
  {
    "text": "Singleton type of of uh value Fu crucially it's not actually the",
    "start": "1103159",
    "end": "1108280"
  },
  {
    "text": "Singleton type of the literal string Fu um oops have if I assigned something to",
    "start": "1108280",
    "end": "1115760"
  },
  {
    "text": "it so that compiles but if I were to try to uh assign some other",
    "start": "1115760",
    "end": "1121640"
  },
  {
    "text": "string like that that doesn't compile anymore so you can see you can see the expected type here um is um is is the",
    "start": "1121640",
    "end": "1129120"
  },
  {
    "text": "Singleton type of Fu so fu. type uh and what it's actually found is is is is a string uh bar interestingly enough the",
    "start": "1129120",
    "end": "1136520"
  },
  {
    "text": "compiler is actually mentioning um a Singleton type of strings here so this this type string and then Open brackets",
    "start": "1136520",
    "end": "1143320"
  },
  {
    "text": "uh quotes bar Clos bracket is actually the type the compiler really does know that that string literal does have under",
    "start": "1143320",
    "end": "1149200"
  },
  {
    "text": "the hood um but it won't let you write that in any way I mean what you would really like to be able to do is is something like",
    "start": "1149200",
    "end": "1155520"
  },
  {
    "text": "um fu. type so this this is this is this is not allowed uh other than in um an",
    "start": "1155520",
    "end": "1163440"
  },
  {
    "text": "experimental branch of scaly um that uh Paul Phillips put together uh in",
    "start": "1163440",
    "end": "1168679"
  },
  {
    "text": "inspired by Jeffrey Washburn um which is great stuff I would love to I would love to see this this in in in the scalar",
    "start": "1168679",
    "end": "1174400"
  },
  {
    "text": "language proper but again this is this is something else which isn't there however however we can use type macros",
    "start": "1174400",
    "end": "1182000"
  },
  {
    "text": "to rectify this terrible emission so let's because okay so a type macro if",
    "start": "1182000",
    "end": "1189159"
  },
  {
    "text": "you've I mean most of the uses that that that people talk about for for type macros are things like type providers so the idea is is basically uh you've got a",
    "start": "1189159",
    "end": "1196360"
  },
  {
    "text": "type macro is is is like a like a like an orary def macro except that it can occur in locations where you would",
    "start": "1196360",
    "end": "1202280"
  },
  {
    "text": "normally expect a type to be um but type macros can also be parameterized they can be parameterized with types but they",
    "start": "1202280",
    "end": "1208280"
  },
  {
    "text": "can also be parameterized with values and the normal reason for doing that would be well at least perhaps the most",
    "start": "1208280",
    "end": "1214280"
  },
  {
    "text": "common reason I think most people are thinking of is that you might parameterize a type provider with a with",
    "start": "1214280",
    "end": "1219440"
  },
  {
    "text": "a with a with a file path or a URL or something um to or or some set of connection details for a database so",
    "start": "1219440",
    "end": "1225960"
  },
  {
    "text": "that the type macro can go scarring off to the file system or URL or database to extract some kind of schema information",
    "start": "1225960",
    "end": "1232760"
  },
  {
    "text": "to synthesize uh synthesize a type on the Fly um but we're not restricted to",
    "start": "1232760",
    "end": "1238080"
  },
  {
    "text": "doing that we can we can we can instead um use um type mecis to do other things",
    "start": "1238080",
    "end": "1243640"
  },
  {
    "text": "so let's let's just bring some of the stuff into scope",
    "start": "1243640",
    "end": "1250600"
  },
  {
    "text": "um um in what in what follows all of the S prefixes that you're going to see here are short for",
    "start": "1257000",
    "end": "1265799"
  },
  {
    "text": "um really uh that's",
    "start": "1266880",
    "end": "1272600"
  },
  {
    "text": "worrying did I check out the wrong Branch",
    "start": "1272760",
    "end": "1278360"
  },
  {
    "text": "crap yeah good point can I",
    "start": "1278360",
    "end": "1286760"
  },
  {
    "text": "have does it why do you",
    "start": "1287520",
    "end": "1292760"
  },
  {
    "text": "think this is a different machine because I couldn't get my machine to talk to",
    "start": "1292760",
    "end": "1298480"
  },
  {
    "text": "the ah right okay cool so uh I forgotten something what have I forgotten",
    "start": "1298480",
    "end": "1304120"
  },
  {
    "text": "um what have I forgotten oh sh this",
    "start": "1304120",
    "end": "1311520"
  },
  {
    "text": "examples that's tab completion is not working for",
    "start": "1311840",
    "end": "1317480"
  },
  {
    "text": "me why is this not working",
    "start": "1317480",
    "end": "1320520"
  },
  {
    "text": "damn",
    "start": "1331360",
    "end": "1334360"
  },
  {
    "text": "okay thank you so much is that okay I have got a problem",
    "start": "1341799",
    "end": "1350200"
  },
  {
    "text": "oh what never mind okay onward",
    "start": "1350200",
    "end": "1356760"
  },
  {
    "text": "um not good",
    "start": "1356760",
    "end": "1364120"
  },
  {
    "text": "point okay right so um I brought into scope um so the the the S prefixes and",
    "start": "1364159",
    "end": "1370080"
  },
  {
    "text": "everything you're going to see here are are are short for singl temp because I'm I'm playing around with Singleton types um so I we're going to have um a natural",
    "start": "1370080",
    "end": "1377559"
  },
  {
    "text": "number type which is based on integ single them types but before we get onto that I'm just going to show you something which is a sort of a useful",
    "start": "1377559",
    "end": "1383799"
  },
  {
    "text": "piece of of the puzzle namely a way of um cheating the Scara compiler into into",
    "start": "1383799",
    "end": "1389720"
  },
  {
    "text": "allowing us to work directly with Singleton types for integers and also booleans as well so um here we are going",
    "start": "1389720",
    "end": "1395679"
  },
  {
    "text": "to have a uh let's call it three um it's going to be of",
    "start": "1395679",
    "end": "1403760"
  },
  {
    "text": "type uh s int uh short for Singleton int",
    "start": "1403760",
    "end": "1409559"
  },
  {
    "text": "of three and this is a type remember but you know you'll notice that it's parameterized with a literal value with",
    "start": "1409559",
    "end": "1415600"
  },
  {
    "text": "an integer value and that is going to be assigned as three if on the other hand",
    "start": "1415600",
    "end": "1422679"
  },
  {
    "text": "we were to try and do this oops type error and notice the the interesting",
    "start": "1422679",
    "end": "1428080"
  },
  {
    "text": "form that the scolar compiler gives us the um uh the type mismatch back as the",
    "start": "1428080",
    "end": "1433159"
  },
  {
    "text": "requirement is int three and again I there's no magic here I haven't done anything to produce that that particular error message that is the the internal",
    "start": "1433159",
    "end": "1439640"
  },
  {
    "text": "um uh scalar compiler representation of the Singleton type of the integer 3 um what we found instead though was was was",
    "start": "1439640",
    "end": "1445799"
  },
  {
    "text": "um the Singleton uh integer four okay so what's going on here how how have we",
    "start": "1445799",
    "end": "1452120"
  },
  {
    "text": "managed um uh to do that well very little magic at all really there is there is a time I I'll show I'll show",
    "start": "1452120",
    "end": "1458480"
  },
  {
    "text": "some code uh a little bit later on uh if if there's time and if not we can look at it later um what we have is a type",
    "start": "1458480",
    "end": "1465320"
  },
  {
    "text": "macro um and the um uh uh the basically",
    "start": "1465320",
    "end": "1470360"
  },
  {
    "text": "the Scala type tracker itself is going to is going to enable um the uh sorry I",
    "start": "1470360",
    "end": "1476559"
  },
  {
    "text": "beg your pardon there is there is an implicit conversion from uh from vanilla non- Singleton integers um uh with the",
    "start": "1476559",
    "end": "1484559"
  },
  {
    "text": "Restriction that they are represented as as uh integer literals so this is this",
    "start": "1484559",
    "end": "1490200"
  },
  {
    "text": "is this is this is so the target is a type macro representing the um uh the",
    "start": "1490200",
    "end": "1496480"
  },
  {
    "text": "Singleton type of the integer three the conversion from the value three to of",
    "start": "1496480",
    "end": "1502320"
  },
  {
    "text": "which is of type plain vanilla int to um the uh Singleton type 3 is done via an",
    "start": "1502320",
    "end": "1508760"
  },
  {
    "text": "implicit conversion um which is able to inspect the tree representing the argument to the implicit conversion see",
    "start": "1508760",
    "end": "1515960"
  },
  {
    "text": "that that is of type um literal constant three and then turn that into a um uh",
    "start": "1515960",
    "end": "1523600"
  },
  {
    "text": "into a Singleton type which uses a constant three as as as uh um as as its",
    "start": "1523600",
    "end": "1528919"
  },
  {
    "text": "component um and that that just Maps directly into scala's type system so um",
    "start": "1528919",
    "end": "1534520"
  },
  {
    "text": "we have a first class representation here of um uh of uh integer Singleton we",
    "start": "1534520",
    "end": "1541919"
  },
  {
    "text": "can do we can do this with Bulls as well which will be useful a little bit later",
    "start": "1541919",
    "end": "1547240"
  },
  {
    "text": "um so bull of true is you SC oh good good point uh yes",
    "start": "1547240",
    "end": "1558039"
  },
  {
    "text": "okay okay so um well this is that's true rather than three and similarly",
    "start": "1558039",
    "end": "1566640"
  },
  {
    "text": "false again type mismatch um okay so that's inom BS um we've got our implicit",
    "start": "1566640",
    "end": "1574399"
  },
  {
    "text": "conversion between between um uh the the non- Singleton values and the Singleton values um so the next thing that uh we",
    "start": "1574399",
    "end": "1584360"
  },
  {
    "text": "want to see is so initially when I start great okay so um initially when I",
    "start": "1584360",
    "end": "1590320"
  },
  {
    "text": "started playing around this I I was actually very hopeful that I I would actually be able to just work with Singleton types um there is a problem",
    "start": "1590320",
    "end": "1595960"
  },
  {
    "text": "with that though and the problem is that um the scar compiler is is um very eager to widen Singleton types to",
    "start": "1595960",
    "end": "1602360"
  },
  {
    "text": "non-singleton types so you you can you can start off by um",
    "start": "1602360",
    "end": "1607440"
  },
  {
    "text": "um uh by um working with a with a I'll I'll do",
    "start": "1607440",
    "end": "1613159"
  },
  {
    "text": "a quick demo to show you that suppose I had def Fu of oops uh uh unfortunately quick demos are",
    "start": "1613159",
    "end": "1620760"
  },
  {
    "text": "getting right F of t uh",
    "start": "1620760",
    "end": "1627640"
  },
  {
    "text": "it",
    "start": "1627640",
    "end": "1630640"
  },
  {
    "text": "um right so this is this this is an identity function so let's let's apply it to whoops so F of",
    "start": "1638679",
    "end": "1646760"
  },
  {
    "text": "three you would hope would be oops Yeah you see what's",
    "start": "1646760",
    "end": "1652399"
  },
  {
    "text": "happened here is we've lost the Singleton typing um so even even though that the the explicit type of food",
    "start": "1652399",
    "end": "1659720"
  },
  {
    "text": "whoops three rather let's move that up again uh even",
    "start": "1659720",
    "end": "1665039"
  },
  {
    "text": "though the explicit type well in fact it's lost it even there so basically basically Singleton types Singleton types basically evaporate very very",
    "start": "1665039",
    "end": "1671240"
  },
  {
    "text": "quickly they they exist very very transiently um so we need we need some me mechanism for for keeping these",
    "start": "1671240",
    "end": "1676799"
  },
  {
    "text": "things hanging around um so Singleton types will evaluate when they're the if you like the top level the outermost",
    "start": "1676799",
    "end": "1683120"
  },
  {
    "text": "type um of a value but if they're actually embedded if they're wrapped in a type Constructor so if we're we're",
    "start": "1683120",
    "end": "1688320"
  },
  {
    "text": "kind of doing boxing here at the at the type level if we if we if we if we if we wrap our Singleton type in another type",
    "start": "1688320",
    "end": "1694640"
  },
  {
    "text": "Constructor um we will we will end up with something which um which which hangs around a little bit longer and",
    "start": "1694640",
    "end": "1699760"
  },
  {
    "text": "once we've got something which hangs around a little bit longer we can do something useful with it so let's so what we have is a is a um a snat type a",
    "start": "1699760",
    "end": "1706960"
  },
  {
    "text": "singlet to Gat type um which is basically the type level boxing of uh an integer value so let's",
    "start": "1706960",
    "end": "1713960"
  },
  {
    "text": "let's see what we can do with that so let's have Val three uh this time is going to be off uh",
    "start": "1713960",
    "end": "1722200"
  },
  {
    "text": "type uh snat of so this is our box at the",
    "start": "1722200",
    "end": "1728559"
  },
  {
    "text": "type level whoops uh our box and we'll use the Singleton",
    "start": "1728559",
    "end": "1735960"
  },
  {
    "text": "integ types because we need to obviously this is this is this is this is a a type level thing so we can't",
    "start": "1735960",
    "end": "1742640"
  },
  {
    "text": "mention um uh values here unless unless we use the the the um the type macro",
    "start": "1742640",
    "end": "1748840"
  },
  {
    "text": "that we've we've already prepared earlier um",
    "start": "1748840",
    "end": "1755000"
  },
  {
    "text": "so okay uh",
    "start": "1755000",
    "end": "1760240"
  },
  {
    "text": "equals three okay right so what's happened here is that um so this time",
    "start": "1760240",
    "end": "1767320"
  },
  {
    "text": "round um uh we have um a different implicit",
    "start": "1767320",
    "end": "1772559"
  },
  {
    "text": "conversion so this implicit conversion is taking a um uh an integer literal",
    "start": "1772559",
    "end": "1777960"
  },
  {
    "text": "three onto a value of type um snat of the Singleton type of three so this is",
    "start": "1777960",
    "end": "1785279"
  },
  {
    "text": "this is this is going to hang around for longer so this this this value three um you can see that we've we've still got",
    "start": "1785279",
    "end": "1791200"
  },
  {
    "text": "it we can we we could pass it through that identity function uh and and we'll get back out what we",
    "start": "1791200",
    "end": "1798600"
  },
  {
    "text": "put into it so that's fine so we've got something now which is sticky um so I guess I guess before I before I before I",
    "start": "1798600",
    "end": "1804519"
  },
  {
    "text": "move on to the next bit I just want to observe that we've actually solved part one of the problem uh we now actually",
    "start": "1804519",
    "end": "1809600"
  },
  {
    "text": "have um because we have a way of of of lifting integer literals to the type level um automatically VI implicit",
    "start": "1809600",
    "end": "1815559"
  },
  {
    "text": "conversions we we can now start expressing uh apis in terms of uh in terms of integer literals in in",
    "start": "1815559",
    "end": "1822000"
  },
  {
    "text": "situations where we might otherwise encode um an index uh via a type level",
    "start": "1822000",
    "end": "1827120"
  },
  {
    "text": "literal so there's a bunch of places in shapeless um where that's done so for example in uh in in h lists um there is",
    "start": "1827120",
    "end": "1834559"
  },
  {
    "text": "a there is an indexing um uh method to to pull out the nth the nth element of",
    "start": "1834559",
    "end": "1839960"
  },
  {
    "text": "of an hlist um this obviously has to be to to keep the typing lined up uh this obviously has to be an index which is",
    "start": "1839960",
    "end": "1846440"
  },
  {
    "text": "which is statically known compile time so consequently the the the shape as API",
    "start": "1846440",
    "end": "1852039"
  },
  {
    "text": "is is is defined in terms of tight level tight level natural numbers um using this technique we'll be able to just",
    "start": "1852039",
    "end": "1857240"
  },
  {
    "text": "replace that and just use integer literals for indexing so that that's that's kind of nice to start with um so",
    "start": "1857240",
    "end": "1862840"
  },
  {
    "text": "we kind of solved a bit of the problem the other bit of the problem is is we're not restricted to to 22 anymore um we can um uh we can let's do something else",
    "start": "1862840",
    "end": "1872480"
  },
  {
    "text": "let's have",
    "start": "1872480",
    "end": "1874919"
  },
  {
    "text": "33",
    "start": "1878039",
    "end": "1881039"
  },
  {
    "text": "why H so we're no longer limited to our Limited fixed budget of identifiers that",
    "start": "1884799",
    "end": "1891360"
  },
  {
    "text": "that um uh that we had defined uh before um okay so um as I'm rapidly running out",
    "start": "1891360",
    "end": "1900399"
  },
  {
    "text": "of time I'm gonna I'm going to get to the punch line which is I'm going to multiply some numbers that are bigger than 22",
    "start": "1900399",
    "end": "1908039"
  },
  {
    "text": "together so remember how long it took last time so uh let's I'm just doing",
    "start": "1912000",
    "end": "1917279"
  },
  {
    "text": "another import so we have uh corresponding to the to the to the the previous sum that we had uh there is a",
    "start": "1917279",
    "end": "1923200"
  },
  {
    "text": "Singleton sum so let's just let's just bring that into scope",
    "start": "1923200",
    "end": "1928200"
  },
  {
    "text": "um underscore it there it is right now this is this is set up",
    "start": "1929360",
    "end": "1936080"
  },
  {
    "text": "slightly differently um you're gonna this is this this is going to look exactly like a um a value level thing",
    "start": "1936080",
    "end": "1943159"
  },
  {
    "text": "but in actual fact what's happening is under the hood is that we are going to be inferring so let's I'll just do the the + 5 thing uh again um so this looks",
    "start": "1943159",
    "end": "1953120"
  },
  {
    "text": "like whoops oh I'll move I'll move it up again so",
    "start": "1953120",
    "end": "1958840"
  },
  {
    "text": "people can see okay so this um so this looks like a value level um uh operation",
    "start": "1958840",
    "end": "1964039"
  },
  {
    "text": "but what's actually happening is that those those uh literal value arguments are actually being used via the implicit",
    "start": "1964039",
    "end": "1970039"
  },
  {
    "text": "macro to drive type inference to infer the type level natural numbers so that we're inferring the Singleton int type",
    "start": "1970039",
    "end": "1977440"
  },
  {
    "text": "three and the Singleton int type five from those integer literals using using the",
    "start": "1977440",
    "end": "1983399"
  },
  {
    "text": "implicit macro um that is then being fed into the process of implicitly resol so",
    "start": "1983399",
    "end": "1989880"
  },
  {
    "text": "the the the sum um method has an implicit argument of type sum ABC so we",
    "start": "1989880",
    "end": "1997159"
  },
  {
    "text": "got we've got the first two values of those of that type so we got three and five and then it's uh the the implicit",
    "start": "1997159",
    "end": "2003799"
  },
  {
    "text": "macro is then uh summoning uh well it's it's kind of short cting the piano recursive arithmetic solution directly",
    "start": "2003799",
    "end": "2010960"
  },
  {
    "text": "extracting three and five doing some and stuffing in a representative of this",
    "start": "2010960",
    "end": "2017159"
  },
  {
    "text": "Singleton type of int in the process of implicit resolution so it's kind of completely short circuited all of all of",
    "start": "2017159",
    "end": "2022799"
  },
  {
    "text": "all of the the complex infrastructure that's that's all albeit very St you know piano arithmetic is is is is a",
    "start": "2022799",
    "end": "2029240"
  },
  {
    "text": "Wonder to behold but it's just not terribly efficient this on the other hand this on the other hand is okay so",
    "start": "2029240",
    "end": "2036200"
  },
  {
    "text": "that's that's that's that's addition so I'll just I'll just I'll just do a big multiplication just to prove that this is really working so let's just import",
    "start": "2036200",
    "end": "2042480"
  },
  {
    "text": "um Sr okay um so let's just do product",
    "start": "2042480",
    "end": "2054040"
  },
  {
    "text": "of big number okay this is this is huge isn't",
    "start": "2054040",
    "end": "2060000"
  },
  {
    "text": "it this is this is who needs big data when you can multiply 1024 by 1024 yes",
    "start": "2060000",
    "end": "2068398"
  },
  {
    "text": "look at that",
    "start": "2068399",
    "end": "2071280"
  },
  {
    "text": "awesome I think this is the first time I've ever been applauded for multiplying two four digit",
    "start": "2075879",
    "end": "2082000"
  },
  {
    "text": "integers okay right sort of uh joking aside so can we actually do something you I I have very very short amount of",
    "start": "2082560",
    "end": "2087960"
  },
  {
    "text": "time left so I'm gonna I'm very very quickly going to show you something interesting so let's have um two",
    "start": "2087960",
    "end": "2095118"
  },
  {
    "text": "lists uh one is going to be yeah oh come on of length three so one two three so",
    "start": "2095119",
    "end": "2104760"
  },
  {
    "text": "again this is this is stuff which exists in shapeless uh already using the the the piano arithmetic encoding so L2 so",
    "start": "2104760",
    "end": "2111520"
  },
  {
    "text": "these are ordinary Scala lists uh four five so what we're now",
    "start": "2111520",
    "end": "2119280"
  },
  {
    "text": "going to do is we're going to project this into into so we're going to basically wrap these values uh in a a",
    "start": "2119280",
    "end": "2127079"
  },
  {
    "text": "type which statically encodes their size um so we we do have to do um uh a little",
    "start": "2127079",
    "end": "2133079"
  },
  {
    "text": "bit of of if you like runtime jiggery poery at least initially just to bootstrappers into this because the compiler doesn't know anything about",
    "start": "2133079",
    "end": "2139240"
  },
  {
    "text": "these it just knows the lists but once we've established that they are lists of a given size then we can work with that so let's let's first",
    "start": "2139240",
    "end": "2146160"
  },
  {
    "text": "have uh sized list one so that is going to be",
    "start": "2146160",
    "end": "2153599"
  },
  {
    "text": "uh L1 uh sized and now we have to to say explicitly what the size",
    "start": "2154079",
    "end": "2161680"
  },
  {
    "text": "is z z size I may have to import something",
    "start": "2164880",
    "end": "2170560"
  },
  {
    "text": "else actually I'm just trying to remember uh yes",
    "start": "2170560",
    "end": "2176160"
  },
  {
    "text": "import Z Z come on right okay quick l right okay",
    "start": "2177200",
    "end": "2188720"
  },
  {
    "text": "so what we what we get back from this is a a is a is a a list type which has been stamped um can I just finish I have to",
    "start": "2188720",
    "end": "2196640"
  },
  {
    "text": "just show this example I'll be as quick as I possibly can okay so um it's it's it's it's a list which has been stamped",
    "start": "2196640",
    "end": "2202520"
  },
  {
    "text": "with its static size um we get back an option because obviously it might not actually be of that size so in this case",
    "start": "2202520",
    "end": "2208200"
  },
  {
    "text": "it is of length three so we get back we get back some of that list you'll notice crucially and this is a difference between this and and um uh non macro",
    "start": "2208200",
    "end": "2216000"
  },
  {
    "text": "shape this is we again we can use an literal here let's let's just get that because we know it's there let's do the",
    "start": "2216000",
    "end": "2222760"
  },
  {
    "text": "same thing with um with the uh the second list so list two which was of",
    "start": "2222760",
    "end": "2229760"
  },
  {
    "text": "length two right so you can see we've got first we've got a list of uh length three a",
    "start": "2229760",
    "end": "2235960"
  },
  {
    "text": "list of length two again encoding the type now what happens if we do",
    "start": "2235960",
    "end": "2241599"
  },
  {
    "text": "this plus where is it ah there shift",
    "start": "2241599",
    "end": "2248160"
  },
  {
    "text": "no control no just plus no where is it I can't find",
    "start": "2248160",
    "end": "2256960"
  },
  {
    "text": "it where is it help ah there",
    "start": "2256960",
    "end": "2263880"
  },
  {
    "text": "fantastic okay so length is",
    "start": "2264079",
    "end": "2271079"
  },
  {
    "text": "five F",
    "start": "2271079",
    "end": "2276440"
  },
  {
    "text": "okay I'm the the man with the uh the uh walking stick has dragged me off",
    "start": "2276440",
    "end": "2283560"
  },
  {
    "text": "stage",
    "start": "2290640",
    "end": "2293640"
  }
]