[
  {
    "start": "0",
    "end": "151000"
  },
  {
    "text": "thank you",
    "start": "13519",
    "end": "16580"
  },
  {
    "text": "I'm here to talk about ecmascript.next whatever that version number becomes",
    "start": "21980",
    "end": "27660"
  },
  {
    "text": "probably edition six but you never know Edition 4 never came to pass so uh",
    "start": "27660",
    "end": "34579"
  },
  {
    "text": "ecmascript.next is a long time uh is is the product of uh many years work",
    "start": "34579",
    "end": "40559"
  },
  {
    "text": "um but it's it's coming relatively soon as standards go so we actually have a",
    "start": "40559",
    "end": "45840"
  },
  {
    "text": "sort of uh a deadline coming up this spring where we won't be accepting new proposals",
    "start": "45840",
    "end": "51600"
  },
  {
    "text": "anymore so we're getting to a point where we're going to move into more of a refinement mode where we've got the proposals that we're working with and",
    "start": "51600",
    "end": "57780"
  },
  {
    "text": "we're going to start refining them and calling them uh we have a rough Target",
    "start": "57780",
    "end": "62879"
  },
  {
    "text": "of 2013 for actually shipping a new standard but 2013 may sound a long way",
    "start": "62879",
    "end": "69479"
  },
  {
    "text": "away that doesn't mean that browsers won't start implementing features as we go along in fact one of the features",
    "start": "69479",
    "end": "75540"
  },
  {
    "text": "that I'll be talking about later proxies is going to be already shipping with Firefox 4. so features are coming",
    "start": "75540",
    "end": "81840"
  },
  {
    "text": "browser vendors will keep working on these as we're refining and finally finalizing the spec",
    "start": "81840",
    "end": "88500"
  },
  {
    "text": "one other thing that's important to realize is that um this new version of JavaScript is",
    "start": "88500",
    "end": "94619"
  },
  {
    "text": "going to be opt-in so by default if you say script type equals application",
    "start": "94619",
    "end": "101400"
  },
  {
    "text": "JavaScript just as you would in the past you'll still get Edition 5 of JavaScript but if you want to opt into this new",
    "start": "101400",
    "end": "108240"
  },
  {
    "text": "language you can set the the version mime type I just put next here as a placeholder the exact syntax isn't",
    "start": "108240",
    "end": "114479"
  },
  {
    "text": "actually decided yet but by making this opt-in we're actually giving ourselves a little bit of leeway",
    "start": "114479",
    "end": "120299"
  },
  {
    "text": "in the design to be able to make some backwards incompatible changes we're not going to go wild with this we're not",
    "start": "120299",
    "end": "126780"
  },
  {
    "text": "going to make this a radically different language but it does give us a little bit of flexibility to make some",
    "start": "126780",
    "end": "132540"
  },
  {
    "text": "incompatible changes to make the language as a whole better",
    "start": "132540",
    "end": "137420"
  },
  {
    "text": "okay so tonight I want to talk about three broad themes uh that",
    "start": "137580",
    "end": "143520"
  },
  {
    "text": "um I would I would classify uh the next version of ecmascript into uh one of",
    "start": "143520",
    "end": "148920"
  },
  {
    "text": "these themes is is fixes this is uh uh trying to trying to fix some of the bad parts of JavaScript",
    "start": "148920",
    "end": "155520"
  },
  {
    "start": "151000",
    "end": "151000"
  },
  {
    "text": "um and this is where that opt-in is is really helpful some of these are expressiveness so they're making it",
    "start": "155520",
    "end": "162300"
  },
  {
    "text": "easier more convenient and more concise to write in the good patterns the good",
    "start": "162300",
    "end": "169440"
  },
  {
    "text": "idioms that have kind of shaken out over the years as people learn to write effective JavaScript and some of these",
    "start": "169440",
    "end": "176220"
  },
  {
    "text": "are just raw power they give you the ability to do things that maybe in the past you couldn't do at all or maybe you",
    "start": "176220",
    "end": "181319"
  },
  {
    "text": "could technically do but they were prohibitively expensive so I'll just talk about these in order",
    "start": "181319",
    "end": "186480"
  },
  {
    "text": "starting with some of the fixes um all right one of the pain points of",
    "start": "186480",
    "end": "192840"
  },
  {
    "text": "JavaScript has always been the implicit arguments object that's just Bound by",
    "start": "192840",
    "end": "198120"
  },
  {
    "text": "default uh it's a little clunky that it's got this big heavyweight name arguments and that you don't get to",
    "start": "198120",
    "end": "205379"
  },
  {
    "start": "200000",
    "end": "200000"
  },
  {
    "text": "control what the name is it's always called arguments but even more painful is the fact that it's like an array but",
    "start": "205379",
    "end": "211500"
  },
  {
    "text": "for whatever historical reasons it's not actually an array it doesn't inherit from array dot prototype it's also",
    "start": "211500",
    "end": "218220"
  },
  {
    "text": "annoying that oftentimes you find yourself writing a function that maybe takes two or more arguments like this",
    "start": "218220",
    "end": "223920"
  },
  {
    "text": "one does and what you all you really care about is the array of the remaining arguments but you end up having to slice",
    "start": "223920",
    "end": "231000"
  },
  {
    "text": "off the part of the entire array and of course because it's not actually an array you can't just call arguments.slice you have to do this",
    "start": "231000",
    "end": "237780"
  },
  {
    "text": "painful Jiu Jitsu where you pull out the slice method call that methods call",
    "start": "237780",
    "end": "243540"
  },
  {
    "text": "method and pass arguments is that this and this makes me really sympathize with",
    "start": "243540",
    "end": "250680"
  },
  {
    "text": "Doug who to explain this to newcomers to the language I mean this is just it's",
    "start": "250680",
    "end": "255959"
  },
  {
    "text": "it's tough on newbies but it's also tough on anybody trying to read this code it's distracting and then of course if you want to",
    "start": "255959",
    "end": "262139"
  },
  {
    "text": "actually call another method with that uh you know with with that resulting uh",
    "start": "262139",
    "end": "270060"
  },
  {
    "text": "rest array you have to call the apply method which is also kind of inconvenient so what we're planning on for the new language is just a concise",
    "start": "270060",
    "end": "277380"
  },
  {
    "text": "way of saying I want uh to bind a variable I can give it whatever name I want here I'm calling it rest to",
    "start": "277380",
    "end": "283860"
  },
  {
    "text": "whatever the remaining arguments are and I want that to be a real array this time we're going to get that right so it's",
    "start": "283860",
    "end": "289020"
  },
  {
    "text": "actually going to inherit from array.prototype so you can use all the the array methods you want but in fact",
    "start": "289020",
    "end": "295740"
  },
  {
    "text": "if all you want to do is splice that into another call the syntax here makes it easy to do that as well",
    "start": "295740",
    "end": "301860"
  },
  {
    "text": "so these are the kinds of things that are fixing some of the mistakes of the past and just making it a little less painful a little less inconvenient",
    "start": "301860",
    "end": "311180"
  },
  {
    "text": "we've recently been talking about fixing a past kind of",
    "start": "311300",
    "end": "318060"
  },
  {
    "start": "313000",
    "end": "313000"
  },
  {
    "text": "strange aspect of the language type of usually kind of makes sense but the",
    "start": "318060",
    "end": "323759"
  },
  {
    "text": "there's this one weird Corner case the type of null is object this is sort of surprising it also makes it a pain to",
    "start": "323759",
    "end": "331800"
  },
  {
    "text": "write type testing code because you have to do this extra level of check okay now I know it's an object sort of except now",
    "start": "331800",
    "end": "338039"
  },
  {
    "text": "I have to check if it's null as well so this is one of the places where we're really uh just",
    "start": "338039",
    "end": "344580"
  },
  {
    "text": "toying with the idea of breaking backwards compatibility and I think I think there's strong enough motivation to do this that I think it's quite",
    "start": "344580",
    "end": "350880"
  },
  {
    "text": "likely to happen I I should interject uh really quickly and say that uh nothing I",
    "start": "350880",
    "end": "356220"
  },
  {
    "text": "say here is absolute or set in stone it ain't over till the actual spec ships so",
    "start": "356220",
    "end": "362039"
  },
  {
    "text": "uh um I'm not here making any claim definite claims about the future I'm just sort of giving you the the current",
    "start": "362039",
    "end": "369000"
  },
  {
    "text": "state of the committee's thinking as I best interpret it uh I also also want to say people have",
    "start": "369000",
    "end": "375840"
  },
  {
    "text": "questions or comments at any point feel free to interject all right another pain point this is one",
    "start": "375840",
    "end": "382259"
  },
  {
    "text": "of my personal uh Crusades in in JavaScript uh is the the",
    "start": "382259",
    "end": "388800"
  },
  {
    "text": "fact that the global object lives in the lexical environment the scope chain of",
    "start": "388800",
    "end": "394080"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "JavaScript so if you have an Unbound variable that you write to or read from rather than that being an early error a",
    "start": "394080",
    "end": "400740"
  },
  {
    "text": "compile time error it uses the global object in a very Dynamic way so this is an example of a common very",
    "start": "400740",
    "end": "407940"
  },
  {
    "text": "easy to trip over bug in JavaScript where you assign to a variable and you forget to declare it with VAR at first",
    "start": "407940",
    "end": "416280"
  },
  {
    "text": "um and what happens well you don't get an error instead it just it just happily goes ahead and puts that in the global",
    "start": "416280",
    "end": "421919"
  },
  {
    "text": "object and Carries On merrily well this is even worse if you have a couple pieces of interacting code that both",
    "start": "421919",
    "end": "428220"
  },
  {
    "text": "happen to make this mistake so here we have two functions that both forget to locally declare the variable I and now",
    "start": "428220",
    "end": "435539"
  },
  {
    "text": "they're actually fighting with each other over that one single binding so this code is going to completely break",
    "start": "435539",
    "end": "441660"
  },
  {
    "text": "because as the outer one calls or the top one calls the bottom one the bottom one is modifying the state of the top",
    "start": "441660",
    "end": "448080"
  },
  {
    "text": "one this function is not going to do anything sensible so these two Undeclared uses of I really",
    "start": "448080",
    "end": "457560"
  },
  {
    "text": "ought to be an error that that was a mistake that I made as a programmer and I would like to be told as soon as possible and we know how to do this this",
    "start": "457560",
    "end": "464220"
  },
  {
    "text": "is lexical scope this is something that is a well understood feature of programming languages so another change",
    "start": "464220",
    "end": "472259"
  },
  {
    "text": "that we're planning on making for acmascript.next is to actually make this",
    "start": "472259",
    "end": "477599"
  },
  {
    "text": "be an early error so you would actually get a compile time error saying hey you used a variable that you never declared",
    "start": "477599",
    "end": "484860"
  },
  {
    "text": "uh this is also useful if you just fat finger a variable name you know you happen to spell it wrong and and now",
    "start": "484860",
    "end": "489960"
  },
  {
    "text": "you're referring to some variable that doesn't exist currently what happens is your program just goes insane and later",
    "start": "489960",
    "end": "495360"
  },
  {
    "text": "on you find out uh you know something's not working and you have to work your",
    "start": "495360",
    "end": "500699"
  },
  {
    "text": "way back till you finally find the place where the error came from often it",
    "start": "500699",
    "end": "506340"
  },
  {
    "text": "doesn't manifest for a while so it only shows up later on maybe you didn't even test that particular path through your",
    "start": "506340",
    "end": "512820"
  },
  {
    "text": "code and so it doesn't even show up until you've already shipped your code so this is something we can do at",
    "start": "512820",
    "end": "518099"
  },
  {
    "text": "compile time and it'll just help catch silly kind of",
    "start": "518099",
    "end": "524039"
  },
  {
    "text": "trivial bugs but bugs that can be a real a real pain in practice all right another pain Point uh the",
    "start": "524039",
    "end": "531300"
  },
  {
    "text": "hoisting semantics for variables in JavaScript this is another one that's uh I think it was actually originally",
    "start": "531300",
    "end": "536940"
  },
  {
    "text": "intended to be easier for beginners and ends up I think being more of a problem for beginners than anything else",
    "start": "536940",
    "end": "543899"
  },
  {
    "text": "um so here's a common bug that people trip on all the time in JavaScript we",
    "start": "543899",
    "end": "549420"
  },
  {
    "text": "have some while loop and we bind what we think is a local variable and we set",
    "start": "549420",
    "end": "555180"
  },
  {
    "text": "some callback say some event handler that refers to the variable else so so",
    "start": "555180",
    "end": "562019"
  },
  {
    "text": "here this function is is a closure it's it's got a lexical binding referring to the outer or electrical reference",
    "start": "562019",
    "end": "568500"
  },
  {
    "text": "referring to the outer binding out but the problem here as all you tried",
    "start": "568500",
    "end": "574560"
  },
  {
    "text": "and true JavaScript programmers surely know is that elt is in fact implicitly bound either in the global or the or the",
    "start": "574560",
    "end": "581399"
  },
  {
    "text": "nearest enclosing function scope so what we thought was a fresh variable binding each time through the loop was",
    "start": "581399",
    "end": "587880"
  },
  {
    "text": "not it's in fact one single binding that's getting updated each time we go through the loop and so each one of",
    "start": "587880",
    "end": "594300"
  },
  {
    "text": "these closures is actually pointing to one single binding and by the time you actually call that you're just going to",
    "start": "594300",
    "end": "600180"
  },
  {
    "text": "get the last value that it was set to and once again your program behaves erratically it's hard to track down what",
    "start": "600180",
    "end": "606420"
  },
  {
    "text": "went wrong so the the usual way people work around this is what I've heard recently",
    "start": "606420",
    "end": "611820"
  },
  {
    "text": "referred to as if he's immediately immediately invoked function Expressions where if you want to introduce another",
    "start": "611820",
    "end": "618660"
  },
  {
    "text": "local scope for your VAR bindings you just wrap it in a kind of useless Lambda a useless function that you immediately",
    "start": "618660",
    "end": "625260"
  },
  {
    "text": "apply and now you get the behavior the behavior that you want but your code is",
    "start": "625260",
    "end": "630720"
  },
  {
    "text": "a lot more confusing it's a lot uglier I was recently um uh teaching a class on",
    "start": "630720",
    "end": "636600"
  },
  {
    "text": "web game programming to undergrads and this this kind of thing uh undergrads",
    "start": "636600",
    "end": "643440"
  },
  {
    "text": "were running up against code like this in the wild and they were getting really confused this this really tripped them",
    "start": "643440",
    "end": "649019"
  },
  {
    "text": "up so when you kind of learn to be a good JavaScript programmer you learn to stop",
    "start": "649019",
    "end": "654839"
  },
  {
    "text": "focusing on those bits of noise and you filter out the parts that are that sort of have low information content but",
    "start": "654839",
    "end": "661440"
  },
  {
    "text": "that's not the way any of us wants to write code we'd rather our code said what we meant and didn't say anything other than that",
    "start": "661440",
    "end": "667680"
  },
  {
    "text": "so uh for uh for xmascript.next we're going to",
    "start": "667680",
    "end": "672839"
  },
  {
    "text": "introduce introduce a new kind of variable binding using the keyword let that simply gives you what you expected",
    "start": "672839",
    "end": "679019"
  },
  {
    "start": "677000",
    "end": "677000"
  },
  {
    "text": "in the first place it's block scoped instead of function scoped so now you don't have to use the immediately",
    "start": "679019",
    "end": "684779"
  },
  {
    "text": "invoked function expression you just kind of get what what you originally wanted in the first place",
    "start": "684779",
    "end": "690320"
  },
  {
    "text": "the slogan that we've had for years going back to the ecmascript Edition four days was let is the new VAR uh",
    "start": "690320",
    "end": "697560"
  },
  {
    "text": "where it's Our intention to make it such that you actually never need to use VAR ever again if you don't want to you can",
    "start": "697560",
    "end": "704160"
  },
  {
    "text": "just use let as a drop in replacement it'll work in the cases where it worked before and generally it's just going to work better",
    "start": "704160",
    "end": "710279"
  },
  {
    "text": "unless you were relying on on hoisting to the function level but but by and large let is just sort of a better way",
    "start": "710279",
    "end": "716519"
  },
  {
    "text": "of of doing bar I think I saw a question okay yeah I should make that clear what I'm describing here is ongoing work on a",
    "start": "716519",
    "end": "723660"
  },
  {
    "text": "standardization committee none of this is stuff that's necessarily shipping in any browsers yet but some of them come",
    "start": "723660",
    "end": "730860"
  },
  {
    "text": "from work that we did back in the ecmascript Edition four days and so some of this stuff in one form or another is",
    "start": "730860",
    "end": "737100"
  },
  {
    "text": "actually shipping in one browser or another uh primarily spider monkey and Firefox so let does exist and has",
    "start": "737100",
    "end": "744660"
  },
  {
    "text": "existed for years in spider monkey in a slightly different form than what we're probably going to end up with in the",
    "start": "744660",
    "end": "750540"
  },
  {
    "text": "spec but to a first approximation it's basically this feature that we're",
    "start": "750540",
    "end": "755880"
  },
  {
    "text": "talking about um but by and large most of the features I'm going to be talking about tonight do not exist in any in any browsers what",
    "start": "755880",
    "end": "763980"
  },
  {
    "text": "what features there are that that have been implemented I think are almost exclusively in Firefox but uh I can I'll",
    "start": "763980",
    "end": "771899"
  },
  {
    "text": "try to point them out as we go along so um yeah the uh the rest args that I talked",
    "start": "771899",
    "end": "778019"
  },
  {
    "text": "about is not implemented anywhere the change to type of is not implemented anywhere let is implemented in spider",
    "start": "778019",
    "end": "784620"
  },
  {
    "text": "monkey um but I'll try to make that clear as we go oh I'm sorry spider monkey is just",
    "start": "784620",
    "end": "790079"
  },
  {
    "text": "the name of the JavaScript engine that ships in Firefox so in Firefox let has been implemented",
    "start": "790079",
    "end": "797279"
  },
  {
    "text": "for several years okay so those are a few of the fixes to the language",
    "start": "797279",
    "end": "803880"
  },
  {
    "text": "um so let me talk about some uh nice idioms that we're going to make more concise in JavaScript",
    "start": "803880",
    "end": "810959"
  },
  {
    "text": "um here's one that's just I I think just really kind of sweet um uh people in JavaScript really enjoy",
    "start": "810959",
    "end": "818639"
  },
  {
    "text": "the fact that functions are first class values they get a lot of mileage out of that I mean especially with callbacks",
    "start": "818639",
    "end": "824160"
  },
  {
    "text": "for event handlers but we're starting to see some functional idioms like map for each and reduce that have been",
    "start": "824160",
    "end": "830820"
  },
  {
    "text": "introduced in in more recent browsers and the the Syntax for function literals",
    "start": "830820",
    "end": "837600"
  },
  {
    "text": "is just a little heavyweight in JavaScript you've got to write f u n c t i o n and for the return value you have",
    "start": "837600",
    "end": "843660"
  },
  {
    "text": "to add r-e-t-u-r-n so we're going to introduce a nice new very concise",
    "start": "843660",
    "end": "849300"
  },
  {
    "text": "literal syntax that um people have been toying with different",
    "start": "849300",
    "end": "854339"
  },
  {
    "text": "names for them hash functions except the hash function that's something else in computer science so maybe sharp functions uh Mike shaver wants to call",
    "start": "854339",
    "end": "861540"
  },
  {
    "text": "them Pounders because they're spelled with the pound sign whatever you end up wanting to call it there are two",
    "start": "861540",
    "end": "867120"
  },
  {
    "text": "benefits here one is that fun ction is now spelled sharp so you save a bunch of",
    "start": "867120",
    "end": "872820"
  },
  {
    "text": "characters there but the other is this nice fact that you don't have to say return anymore now you're just going to get the what's",
    "start": "872820",
    "end": "878700"
  },
  {
    "text": "known as the completion value in the ecmascript standard as the result of the function and we'll come back to that in",
    "start": "878700",
    "end": "886019"
  },
  {
    "text": "a couple other places in the talk you had a question uh the question was um uh for for minifiers um this this",
    "start": "886019",
    "end": "894480"
  },
  {
    "text": "could be really nice um but what about functions that actually do want to return a value and in fact that is what's going on here so",
    "start": "894480",
    "end": "900120"
  },
  {
    "text": "this function is returning the result of l.size now if you want a function that doesn't return anything but you want to",
    "start": "900120",
    "end": "906899"
  },
  {
    "text": "use this syntax you can wrap the result with the void operator or could put a",
    "start": "906899",
    "end": "913500"
  },
  {
    "text": "semicolon and some dummy value afterwards you can do early returns yes yes yeah so you can still use return but",
    "start": "913500",
    "end": "920940"
  },
  {
    "text": "the completion value is there's a sort of an implicit return around the whole thing",
    "start": "920940",
    "end": "926240"
  },
  {
    "text": "yeah yeah yeah um okay and this is actually a more recent feature so there's probably some",
    "start": "927600",
    "end": "933000"
  },
  {
    "text": "Corner cases we may still have to work out um",
    "start": "933000",
    "end": "938220"
  },
  {
    "text": "okay uh actually this goes back sort of to the fixes of the language one of the one of the continuous pain points of",
    "start": "938220",
    "end": "944040"
  },
  {
    "text": "JavaScript is uh the The Binding semantics for for this so this is sort",
    "start": "944040",
    "end": "950339"
  },
  {
    "start": "949000",
    "end": "949000"
  },
  {
    "text": "of the simplest example I could come up with of a really common bug that happens almost every time I write a Constructor",
    "start": "950339",
    "end": "956820"
  },
  {
    "text": "in JavaScript I mean I shockingly get this wrong almost every single time uh here we have some node type maybe it's a",
    "start": "956820",
    "end": "964320"
  },
  {
    "text": "node in an AST or it doesn't really matter and it's got a few fields and",
    "start": "964320",
    "end": "970139"
  },
  {
    "text": "maybe one of those fields is an array and we use the for each function on that array",
    "start": "970139",
    "end": "975600"
  },
  {
    "text": "for each takes a function as its argument that it's going to call on every single element of the array and I",
    "start": "975600",
    "end": "982380"
  },
  {
    "text": "want to refer to this DOT type of the node well that's not how this works in",
    "start": "982380",
    "end": "989339"
  },
  {
    "text": "JavaScript for each is actually going to call this function uh I believe in in",
    "start": "989339",
    "end": "995699"
  },
  {
    "text": "non-strict we'll get the global object in strict mode I believe we will get undefined for this but in either case",
    "start": "995699",
    "end": "1001579"
  },
  {
    "text": "that this is not the this that I expected it to be so we're not going to up and just change",
    "start": "1001579",
    "end": "1007519"
  },
  {
    "text": "the semantics of function literal of the existing function literals but for the new function literals we're",
    "start": "1007519",
    "end": "1015259"
  },
  {
    "text": "actually simply going to have this be lexically bound so we no longer have to do the varself equals this trick that",
    "start": "1015259",
    "end": "1021139"
  },
  {
    "text": "that every JavaScript programmer has to learn if you use these pound functions",
    "start": "1021139",
    "end": "1026600"
  },
  {
    "text": "uh this is simply lexically bound I don't I think I don't have an example on the slide but if you do want it to take",
    "start": "1026600",
    "end": "1033260"
  },
  {
    "text": "this as the sort of implicit parameter you actually make it explicit by saying",
    "start": "1033260",
    "end": "1038720"
  },
  {
    "text": "sharp open paren this comma and that's your way of saying I want the this that comes from the call site so you actually",
    "start": "1038720",
    "end": "1044900"
  },
  {
    "text": "get explicit control over which this you want but by default you actually get the lexical binding semantics which is half",
    "start": "1044900",
    "end": "1051679"
  },
  {
    "text": "the time what what you expect so that's another sort of fix that might might have fit in the first section as",
    "start": "1051679",
    "end": "1057620"
  },
  {
    "text": "well okay then the the next one is uh very near and dear to my heart this is",
    "start": "1057620",
    "end": "1063740"
  },
  {
    "text": "something I've been working on for quite some time uh I've been working with a",
    "start": "1063740",
    "end": "1068980"
  },
  {
    "text": "postdoc at Northeastern University in Boston on the design of a module system",
    "start": "1068980",
    "end": "1074299"
  },
  {
    "text": "for JavaScript so uh the design pattern the idiom that people have come to use",
    "start": "1074299",
    "end": "1082340"
  },
  {
    "text": "in JavaScript when they want to write modular code you can sort of to at least",
    "start": "1082340",
    "end": "1087860"
  },
  {
    "text": "at first just use objects as modules so if you want to share a bunch of functionality with somebody you can just",
    "start": "1087860",
    "end": "1093620"
  },
  {
    "text": "give them an object and maybe bind it in some standard location so my simple example here is I've invented a new",
    "start": "1093620",
    "end": "1099980"
  },
  {
    "text": "language or a new library for dealing with animations and so I'm calling it",
    "start": "1099980",
    "end": "1106100"
  },
  {
    "text": "Sprite core and one of the one of the constructors that I want to make available to users of this library is",
    "start": "1106100",
    "end": "1111860"
  },
  {
    "text": "the canvas Constructor you can imagine many more features in here but we just start with",
    "start": "1111860",
    "end": "1118100"
  },
  {
    "text": "this little object with a canvas Constructor well one of the first things that you have to do when you're writing a library",
    "start": "1118100",
    "end": "1124760"
  },
  {
    "text": "is make sure that you're not trashing the global object all over the place so once again you start using these",
    "start": "1124760",
    "end": "1130880"
  },
  {
    "text": "immediately invoked function Expressions the iffys you wrap your object Constructor with",
    "start": "1130880",
    "end": "1138559"
  },
  {
    "text": "this function that you apply immediately and maybe you just want to give it a standard name for the global object so",
    "start": "1138559",
    "end": "1144260"
  },
  {
    "text": "it always knows when I'm dealing with the global object this is where I'm touching the outside world everything else will be a local variable it's just",
    "start": "1144260",
    "end": "1150320"
  },
  {
    "text": "sort of good practice to keep separate the local from the global but we still just return this object",
    "start": "1150320",
    "end": "1157820"
  },
  {
    "text": "but when you really want to be a good citizen on the web you want to make sure that well maybe somebody else had a",
    "start": "1157820",
    "end": "1162980"
  },
  {
    "text": "library that they called Sprite core so if for example you study the the source of the jQuery Library you'll see that it",
    "start": "1162980",
    "end": "1169220"
  },
  {
    "text": "uses a pattern where they say let's just to be safe save the original definition if there",
    "start": "1169220",
    "end": "1176059"
  },
  {
    "text": "was one of sprite core and we'll create a local function called restore again to",
    "start": "1176059",
    "end": "1181820"
  },
  {
    "text": "be good citizens to make it possible to restore to the previous value of sprite core in case I happen to step on",
    "start": "1181820",
    "end": "1187460"
  },
  {
    "text": "somebody else's toes but then we have to make sure to share that restore function with the rest of the world via this",
    "start": "1187460",
    "end": "1194299"
  },
  {
    "text": "return object so we put it down there in the bottom and before we know it I've added all of the spoilerplate Just to",
    "start": "1194299",
    "end": "1200299"
  },
  {
    "text": "kind of have the standard functionality of a module but the only parts of this code that are actually relevant to the",
    "start": "1200299",
    "end": "1207620"
  },
  {
    "text": "functionality of this module are the parts in blue the rest is boilerplate it doesn't have to be this way but we need",
    "start": "1207620",
    "end": "1213860"
  },
  {
    "text": "a new functionality in the language to make it better so we're adding a new module form that kind",
    "start": "1213860",
    "end": "1219620"
  },
  {
    "text": "of sweeps all this extra work under the rug for you so now you can just declare your module",
    "start": "1219620",
    "end": "1225020"
  },
  {
    "text": "Sprite core and you say export for everything that you want to share and now people can",
    "start": "1225020",
    "end": "1231620"
  },
  {
    "text": "just use your module it's bound to the name Sprite core like it was before or better yet maybe you just put it in a",
    "start": "1231620",
    "end": "1238820"
  },
  {
    "text": "separate file now you don't even have to put the module declaration you can put it in a separate file and simply say what things you want to export and this",
    "start": "1238820",
    "end": "1244700"
  },
  {
    "text": "is about as minimal as you can imagine the code getting this is just saying what you mean which is what we always",
    "start": "1244700",
    "end": "1250340"
  },
  {
    "text": "strive for in language design so the next question is well if I put it in a separate file how somebody actually",
    "start": "1250340",
    "end": "1256460"
  },
  {
    "text": "going to use it what does the client see what's the client's interface to this module",
    "start": "1256460",
    "end": "1262100"
  },
  {
    "text": "well if you look at what people are forced to do right now in JavaScript uh any kind of i o requires that you use",
    "start": "1262100",
    "end": "1268400"
  },
  {
    "text": "callbacks so if you want to load a file over the web maybe you use XML HTTP",
    "start": "1268400",
    "end": "1275539"
  },
  {
    "text": "request or maybe you use a library like require.js but in any one of these cases you have to provide callbacks that are",
    "start": "1275539",
    "end": "1282500"
  },
  {
    "text": "going to be called by the event handler or by the event queue when the actual data has been loaded off the network",
    "start": "1282500",
    "end": "1288620"
  },
  {
    "text": "this is the asynchronous i o model of JavaScript that's just built in yeah sorry the question was why am I using",
    "start": "1288620",
    "end": "1295039"
  },
  {
    "text": "the future tense and the answer is poor use of English yes so so this is the bad old days here",
    "start": "1295039",
    "end": "1302480"
  },
  {
    "text": "which are actually now and the next slide is unfortunately you know probably a couple years into the future but uh",
    "start": "1302480",
    "end": "1309860"
  },
  {
    "text": "but it is coming and we're working hard so right so the the problem here is that uh whenever we have to use callbacks we",
    "start": "1309860",
    "end": "1317659"
  },
  {
    "text": "end up sort of inverting the the control flow of our program uh we end up with this very strange shape to the code",
    "start": "1317659",
    "end": "1323840"
  },
  {
    "text": "where the core of the program is actually buried somewhere in the middle uh and that's just an unfortunate way to",
    "start": "1323840",
    "end": "1330620"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "have to program especially if what we're dealing with is simply using a few modules I mean in most languages if you",
    "start": "1330620",
    "end": "1336320"
  },
  {
    "text": "want to just import a few modules you throw that at the top of your program and then you don't think about it ever again in the rest of the code just to",
    "start": "1336320",
    "end": "1342380"
  },
  {
    "text": "use modules if I have to wrap my entire program in a bunch of requires and then put the body somewhere off to the right",
    "start": "1342380",
    "end": "1348559"
  },
  {
    "text": "that's going to make every program difficult to read and there are people doing heroic",
    "start": "1348559",
    "end": "1354500"
  },
  {
    "text": "efforts right now to build libraries that do what they can to avoid this but they're sort of just stymied by the",
    "start": "1354500",
    "end": "1360620"
  },
  {
    "text": "basic i o model of JavaScript and this is where you actually need to change the language this is where Library authors",
    "start": "1360620",
    "end": "1366679"
  },
  {
    "text": "don't have the tools they need to make it better we actually need to improve the language so",
    "start": "1366679",
    "end": "1372020"
  },
  {
    "text": "with the module system that we've been designing you once again get to write in a direct style you simply get to the",
    "start": "1372020",
    "end": "1378559"
  },
  {
    "text": "client so this is what the client would see now the client simply gets the same module Sprite core is that source that",
    "start": "1378559",
    "end": "1385580"
  },
  {
    "text": "is located at that URL and the i o the reason why we can get",
    "start": "1385580",
    "end": "1391100"
  },
  {
    "text": "away with doing this is that the i o is going to be performed at compile time so there's no need for callbacks because",
    "start": "1391100",
    "end": "1396260"
  },
  {
    "text": "none of this corresponds to any sorts of runtime i o the other nice thing about this is that",
    "start": "1396260",
    "end": "1402260"
  },
  {
    "text": "we let the client actually come up with their name that they want for the library so when a couple slides ago I said we",
    "start": "1402260",
    "end": "1409640"
  },
  {
    "text": "could actually eliminate the module declaration entirely and put it in a separate file the library author is no longer naming",
    "start": "1409640",
    "end": "1416539"
  },
  {
    "text": "the module it's the client that gets to name the module and that I claim is the way it should be clients know best what",
    "start": "1416539",
    "end": "1423020"
  },
  {
    "text": "they want to give as the name for your library to make sure that it doesn't conflict with anybody else and when they",
    "start": "1423020",
    "end": "1428960"
  },
  {
    "text": "make sure that it doesn't conflict with anybody else that means that the module writer no longer has to do those crazy tricks to save the previous version of",
    "start": "1428960",
    "end": "1436039"
  },
  {
    "text": "this name and make sure and it doesn't rely on everybody being a good citizen so Library authors can just quickly ship",
    "start": "1436039",
    "end": "1442760"
  },
  {
    "text": "their their Library throw it in a file and the client gets to decide how to name it and that just immediately takes",
    "start": "1442760",
    "end": "1448820"
  },
  {
    "text": "care of the naming conflicts so I have a question here first I think the question was people use the terminology are these",
    "start": "1448820",
    "end": "1455059"
  },
  {
    "text": "modules Singletons meaning if you require the same module multiple times from the same URL do you get back a",
    "start": "1455059",
    "end": "1462500"
  },
  {
    "text": "single instance or does it reload separate instances and the trick here is",
    "start": "1462500",
    "end": "1469880"
  },
  {
    "text": "at the sort of basic language semantic level we're allowing for the fact we're allowing for the possibility of caching",
    "start": "1469880",
    "end": "1476539"
  },
  {
    "text": "the results but in the browser it actually doesn't make very much sense to",
    "start": "1476539",
    "end": "1482360"
  },
  {
    "text": "have multiple requests for the same URL give you the same instance and the",
    "start": "1482360",
    "end": "1488179"
  },
  {
    "text": "reason for that is that there's no really straightforward notion of are these two URLs the same",
    "start": "1488179",
    "end": "1494900"
  },
  {
    "text": "for example if I ask for mozilla.org dave.js versus",
    "start": "1494900",
    "end": "1500679"
  },
  {
    "text": "www.mozilla.org dave.js I might know that that's the same file and I might",
    "start": "1500679",
    "end": "1506539"
  },
  {
    "text": "expect them to be treated the same but there's no way for the language to know that in fact I could ask for the exact",
    "start": "1506539",
    "end": "1513020"
  },
  {
    "text": "same URL twice at two different times and the server could deliver arbitrarily different bits",
    "start": "1513020",
    "end": "1518659"
  },
  {
    "text": "servers can do whatever they want whenever you do a request so on the client side in the browser",
    "start": "1518659",
    "end": "1526539"
  },
  {
    "text": "what are what our design does is it actually gives you a separate instance each time and so generally speaking",
    "start": "1526539",
    "end": "1533960"
  },
  {
    "text": "you'd want to put these kinds of declarations further up in your program and those bindings the name bindings now",
    "start": "1533960",
    "end": "1541039"
  },
  {
    "text": "you can share those as much as you want but I'm just going to leave it at that for now because there's there's a lot",
    "start": "1541039",
    "end": "1547100"
  },
  {
    "text": "that goes into this and we could talk more offline so the question is uh are the modules always loaded in order is",
    "start": "1547100",
    "end": "1554000"
  },
  {
    "text": "there a way to say that you can load these in different orders and maybe in parallel uh this is the static portion",
    "start": "1554000",
    "end": "1561500"
  },
  {
    "text": "of the model system there's a whole another level of uh Dynamic module loading that I'll talk about just a tiny",
    "start": "1561500",
    "end": "1568100"
  },
  {
    "text": "bit towards the end um that gives you a lot more control over when you want to do things the",
    "start": "1568100",
    "end": "1573260"
  },
  {
    "text": "downside of that is that you have to work in callback Style again but with the static system they actually just get",
    "start": "1573260",
    "end": "1580520"
  },
  {
    "text": "loaded in order now that said there's nothing preventing the compiler from actually loading the bits and doing all",
    "start": "1580520",
    "end": "1586039"
  },
  {
    "text": "the compilation in parallel it's just that the actual evaluation of the code as it executes the body of each model",
    "start": "1586039",
    "end": "1592159"
  },
  {
    "text": "module has to happen in order and that's really important because uh first of all",
    "start": "1592159",
    "end": "1597440"
  },
  {
    "text": "JavaScript does not it has a run to completion model it has this notion that your code executes sequentially and if",
    "start": "1597440",
    "end": "1605419"
  },
  {
    "text": "and modules can have side effects they can they can save Global State they can they can share state if you start having",
    "start": "1605419",
    "end": "1612440"
  },
  {
    "text": "the language semantics kind of non-deterministically doing these things behind your back it's going to make it",
    "start": "1612440",
    "end": "1617659"
  },
  {
    "text": "very hard to understand the behavior of your program so we're trying to preserve that sequential nature of JavaScript but",
    "start": "1617659",
    "end": "1623600"
  },
  {
    "text": "if you want the more flexibility and the more power you get that with the dynamic API",
    "start": "1623600",
    "end": "1628960"
  },
  {
    "text": "uh let's see all right so the the last little piece I want to talk about here and again I I",
    "start": "1628960",
    "end": "1634940"
  },
  {
    "text": "could talk exclusively about modules uh this is this is something that I've put a lot of time into",
    "start": "1634940",
    "end": "1641059"
  },
  {
    "text": "um but I'm just going to give you highlights here uh so you you can import uh out of a out of a module because",
    "start": "1641059",
    "end": "1648980"
  },
  {
    "text": "these modules are known statically that means that we still have static lexical scope the the compiler understands everything about the the Bindings that",
    "start": "1648980",
    "end": "1655640"
  },
  {
    "text": "you get locally so here we have import Sprite core dot star that's going to import the canvas Constructor but if we",
    "start": "1655640",
    "end": "1662539"
  },
  {
    "text": "spell canvas wrong we still get our compile time errors so like I said uh in",
    "start": "1662539",
    "end": "1668480"
  },
  {
    "text": "the first section we want early errors for misspelled variable names or Unbound",
    "start": "1668480",
    "end": "1673880"
  },
  {
    "text": "variables we still get that with this module system uh so that's it for modules for now",
    "start": "1673880",
    "end": "1680720"
  },
  {
    "text": "happy to talk more later uh destructuring now this is one oh I should say modules are not yet",
    "start": "1680720",
    "end": "1685820"
  },
  {
    "text": "implemented anywhere I've been working on a prototype implementation in a a JavaScript interpreter that we use just",
    "start": "1685820",
    "end": "1691520"
  },
  {
    "text": "for experimentation called narcissus but it's not shipping in any browser",
    "start": "1691520",
    "end": "1696559"
  },
  {
    "text": "um we do have a Firefox add-on that lets you actually play with dropping that in as a replacement for the built-in engine",
    "start": "1696559",
    "end": "1701960"
  },
  {
    "text": "but that's just for experimentation it's not a production quality implementation so there are no there are no shipping",
    "start": "1701960",
    "end": "1708740"
  },
  {
    "text": "implementations of modules yet we're still working out some of the details of the design but it's it's coming into shape destructuring however has existed",
    "start": "1708740",
    "end": "1716480"
  },
  {
    "start": "1715000",
    "end": "1715000"
  },
  {
    "text": "for a number of years in Firefox I think it also exists in Opera I'm not sure",
    "start": "1716480",
    "end": "1722260"
  },
  {
    "text": "and I think that that's it destructuring just uh makes it really",
    "start": "1722260",
    "end": "1729020"
  },
  {
    "text": "easy to do a lot of things that you otherwise have to bloat your code with so a common pattern in JavaScript is to",
    "start": "1729020",
    "end": "1736220"
  },
  {
    "text": "take an options object as a single argument as a sort of lightweight way of",
    "start": "1736220",
    "end": "1741260"
  },
  {
    "text": "doing keyword arguments so maybe we have an element Constructor where you provide",
    "start": "1741260",
    "end": "1746900"
  },
  {
    "text": "a single object that has a width property a height property and a color property or maybe they're all optional",
    "start": "1746900",
    "end": "1753919"
  },
  {
    "text": "this code just lets you say that directly instead of having to write line after line after line of VAR W equals",
    "start": "1753919",
    "end": "1761299"
  },
  {
    "text": "options dot width VAR H equals options dot height just get to say that right in place or for example if you have a",
    "start": "1761299",
    "end": "1767899"
  },
  {
    "text": "function that returns uh always returns a two element array then you can just",
    "start": "1767899",
    "end": "1773480"
  },
  {
    "text": "directly in place bind the two elements of the array and it automatically destructures the result of the find",
    "start": "1773480",
    "end": "1780200"
  },
  {
    "text": "function so again this is just quick highlights but destructuring is fabulous once you",
    "start": "1780200",
    "end": "1786140"
  },
  {
    "text": "start using it you wonder how you ever lived without it yeah so the question is can you have nested destructuring and",
    "start": "1786140",
    "end": "1792380"
  },
  {
    "text": "you absolutely can so you could say like if you knew width was a pair you know it was was a two",
    "start": "1792380",
    "end": "1799039"
  },
  {
    "text": "element array you could say with colon Open Bracket X comma Y close bracket so",
    "start": "1799039",
    "end": "1805159"
  },
  {
    "text": "yeah destruction can be sort of arbitrarily recursively nested okay that's destructuring",
    "start": "1805159",
    "end": "1811700"
  },
  {
    "text": "um generators I don't have nearly enough time to go into the detail of these these are a bit of a high-powered",
    "start": "1811700",
    "end": "1817059"
  },
  {
    "text": "functionality but um uh generators are something that have",
    "start": "1817059",
    "end": "1822140"
  },
  {
    "start": "1818000",
    "end": "1818000"
  },
  {
    "text": "been the idea came from Python and in turn that came from sort of Decades of",
    "start": "1822140",
    "end": "1828799"
  },
  {
    "text": "of programming language history um there's sort of the idea of co-routines uh and and Firefox has had",
    "start": "1828799",
    "end": "1836539"
  },
  {
    "text": "them for several years the idea of the sort of main driving use case at least",
    "start": "1836539",
    "end": "1841940"
  },
  {
    "text": "in my mind for why generators are useful on the web is for dealing with this kind of an inversion of control that you get",
    "start": "1841940",
    "end": "1848779"
  },
  {
    "text": "especially in callback heavy code so uh kind of similar to before where we were",
    "start": "1848779",
    "end": "1854480"
  },
  {
    "text": "talking about modules here maybe we just have several different files that we want to load via XML HTTP request and",
    "start": "1854480",
    "end": "1861140"
  },
  {
    "text": "again we find this strange inversion where by the time we actually get all the results we want our code is way far",
    "start": "1861140",
    "end": "1866240"
  },
  {
    "text": "on the right embedded in the middle of this strange shaped code and this is another one of those big pain points",
    "start": "1866240",
    "end": "1872600"
  },
  {
    "text": "that people complain about in JavaScript all the time so generators without getting into too",
    "start": "1872600",
    "end": "1878000"
  },
  {
    "text": "much detail allow you to write code like this now I I'm using a little sleight of",
    "start": "1878000",
    "end": "1883039"
  },
  {
    "text": "hand here I'm I'm actually using a library that I've written called jstask",
    "start": "1883039",
    "end": "1888080"
  },
  {
    "text": "that library is less than a dozen lines of code so it's really not a very heavyweight abstraction but it just",
    "start": "1888080",
    "end": "1894980"
  },
  {
    "text": "makes this uh example a little bit easier to read so imagine we create a new task think of this sort of like a",
    "start": "1894980",
    "end": "1901760"
  },
  {
    "text": "thread but it's a Cooperative thread and I'll explain what that means in a sec so this task takes a thunk it takes a",
    "start": "1901760",
    "end": "1909080"
  },
  {
    "text": "function that it's supposed to run and that function is now going to do each one of these loads but before each",
    "start": "1909080",
    "end": "1916220"
  },
  {
    "text": "one of these loads you see this yield keyword what yield means is I want you to Halt what I was about to do and",
    "start": "1916220",
    "end": "1923179"
  },
  {
    "text": "suspend the rest of this function to be called later and",
    "start": "1923179",
    "end": "1930260"
  },
  {
    "text": "basically that gives us the ability to do this kind of back and forth Style with the i o and the callbacks again I",
    "start": "1930260",
    "end": "1937580"
  },
  {
    "text": "don't really have time to go into too much detail but the point is that the shape of this code looks a lot more like the shape that you want to write when",
    "start": "1937580",
    "end": "1944360"
  },
  {
    "text": "you're doing a whole bunch of sequenced i o operations in JavaScript so this is",
    "start": "1944360",
    "end": "1949580"
  },
  {
    "text": "another thing I'm happy to talk about more offline but I think we'll leave it at that",
    "start": "1949580",
    "end": "1955159"
  },
  {
    "text": "unless people want to ask questions sure so the w3c agonizes over these kinds of problems the the API design that you're",
    "start": "1955159",
    "end": "1961820"
  },
  {
    "text": "forced into with javascript's execution model whenever you're doing any kind of i o such as storage uh file file IO uh",
    "start": "1961820",
    "end": "1973220"
  },
  {
    "text": "this comes up all the time and what we're trying to do is give sort of one",
    "start": "1973240",
    "end": "1978500"
  },
  {
    "text": "solution that can make a lot of these things easier I think time will tell how it affects",
    "start": "1978500",
    "end": "1985100"
  },
  {
    "text": "people's actual API design but this has existed in JavaScript in in Firefox for",
    "start": "1985100",
    "end": "1990860"
  },
  {
    "text": "years and add-on Raiders for for Firefox use this a lot and find it find it a lot",
    "start": "1990860",
    "end": "1997519"
  },
  {
    "text": "more convenient so I'm very optimistic that this is going to make it into the standard and it's going to make a lot of",
    "start": "1997519",
    "end": "2003519"
  },
  {
    "text": "apis easier to use so uh in mongodb you find yourself inserting a bunch of",
    "start": "2003519",
    "end": "2009460"
  },
  {
    "text": "records and you don't care individually what order they get inserted in but you",
    "start": "2009460",
    "end": "2014500"
  },
  {
    "text": "do want to wait on eventually all of them getting entered into the database is there a way that you could use",
    "start": "2014500",
    "end": "2020740"
  },
  {
    "text": "something like generators to express that where you can still allow for non-determinism locally but then",
    "start": "2020740",
    "end": "2026080"
  },
  {
    "text": "deterministically wait on the whole thing just a first guess would be no that's",
    "start": "2026080",
    "end": "2032200"
  },
  {
    "text": "not possible but I am not going to swear to that because it's it's a fun problem",
    "start": "2032200",
    "end": "2037720"
  },
  {
    "text": "to think about offline we could talk about the parallels in Haskell which is which is really interesting but uh yeah at that I",
    "start": "2037720",
    "end": "2046419"
  },
  {
    "text": "think we'll offline it more questions on generators before I keep going I apologize that none of this",
    "start": "2046419",
    "end": "2052060"
  },
  {
    "text": "is is in depth enough I'm trying to give some sort of highlights of the language and and show just how much cool stuff",
    "start": "2052060",
    "end": "2057398"
  },
  {
    "text": "we've got coming in JavaScript okay uh that's fixes that's expressiveness uh we'll see how much of",
    "start": "2057399",
    "end": "2064179"
  },
  {
    "text": "the the power features we can get into that last one was kind of creeping towards power features",
    "start": "2064179",
    "end": "2069339"
  },
  {
    "text": "um all right but some of these are just straightforward things that uh are just",
    "start": "2069339",
    "end": "2074440"
  },
  {
    "text": "really hard to do hard to impossible to do uh if you want to create a a hash",
    "start": "2074440",
    "end": "2080560"
  },
  {
    "text": "table a map that uses arbitrary objects as its keys in JavaScript there's no way",
    "start": "2080560",
    "end": "2087280"
  },
  {
    "text": "to do this that is an order n that I know of unless you're smarter than I am because the only operation that we have",
    "start": "2087280",
    "end": "2094658"
  },
  {
    "text": "to compare objects is equality we don't even have ordering of object identity so you can't even do login you have to do",
    "start": "2094659",
    "end": "2100599"
  },
  {
    "text": "an order and scan every time you want to look something up in an object table in",
    "start": "2100599",
    "end": "2105820"
  },
  {
    "text": "existing JavaScript you have to do an order and scan so we're just going to give you Maps we're going to give you object keep maps",
    "start": "2105820",
    "end": "2111940"
  },
  {
    "start": "2110000",
    "end": "2110000"
  },
  {
    "text": "and they'll be efficient and that sort of ends that sets is the same basic idea except if you want a map where you don't",
    "start": "2111940",
    "end": "2117520"
  },
  {
    "text": "care about the values you could always Implement sets in terms of maps but it's a batteries included kind of thing it's",
    "start": "2117520",
    "end": "2123220"
  },
  {
    "text": "just nice to have out of the box um but on top of that sometimes you also",
    "start": "2123220",
    "end": "2129700"
  },
  {
    "text": "want Maps where the keys are actually held weekly uh and that's uh even more of a power",
    "start": "2129700",
    "end": "2136180"
  },
  {
    "text": "feature it's not something that you necessarily come up against all the time but infrastructure uh or sort of um yeah",
    "start": "2136180",
    "end": "2142839"
  },
  {
    "text": "infrastructure writers uh framework framework writers find the need for this they're also certain really interesting idioms you can do with this there's an",
    "start": "2142839",
    "end": "2148839"
  },
  {
    "text": "idiom called Soft Fields that's really nice it lets you take an existing object and pretend like you're adding another",
    "start": "2148839",
    "end": "2155079"
  },
  {
    "text": "field that no one else can see to it by storing it in a side table but you want it to be a weak reference because if",
    "start": "2155079",
    "end": "2160599"
  },
  {
    "text": "this object goes away you want that entry in the table to go away so that's another use of weak Maps again something",
    "start": "2160599",
    "end": "2166960"
  },
  {
    "text": "we're just going to put in out of the box and not implement it in any browsers",
    "start": "2166960",
    "end": "2172119"
  },
  {
    "text": "that I know of I think there's a patch waiting to land in Firefox that implements weak Maps already so that's",
    "start": "2172119",
    "end": "2177160"
  },
  {
    "text": "probably coming fairly soon but it's after Firefox 4. but uh",
    "start": "2177160",
    "end": "2183280"
  },
  {
    "text": "that's just something you can't do right now you can't Implement that yourself in JavaScript",
    "start": "2183280",
    "end": "2189520"
  },
  {
    "text": "proper tail calls this is what I'm very excited about it's one I've I've been trying to advocate for for years uh and",
    "start": "2189520",
    "end": "2196480"
  },
  {
    "start": "2196000",
    "end": "2196000"
  },
  {
    "text": "it looks like it has broad support from the committee so I'm feeling very optimistic about it uh so here's an",
    "start": "2196480",
    "end": "2203079"
  },
  {
    "text": "example where I think proper tail calls um could reasonably be called for there are different ways you could write a",
    "start": "2203079",
    "end": "2208660"
  },
  {
    "text": "function like this but let's imagine you're implementing some little bytecode interpreter in JavaScript you know maybe you are",
    "start": "2208660",
    "end": "2216760"
  },
  {
    "text": "implementing coffeescript and you're and you're compiling coffeescript to byte codes and then you have a bytecode interpreter well that by code",
    "start": "2216760",
    "end": "2222460"
  },
  {
    "text": "interpreter typically is going to have one big switch that goes over every possible bytecode that you could be",
    "start": "2222460",
    "end": "2228160"
  },
  {
    "text": "looking at and that code quickly gets out of hand it's a really big block of code this example is 10 000 lines of code",
    "start": "2228160",
    "end": "2235480"
  },
  {
    "text": "because I say so uh you'd really like to be able to factor this out into multiple helper functions",
    "start": "2235480",
    "end": "2242079"
  },
  {
    "text": "but the problem is you want to be able to do things like continue or break you want to be able to control the control",
    "start": "2242079",
    "end": "2248619"
  },
  {
    "text": "flow and if you put that code into separate functions you can't use continue or break anymore",
    "start": "2248619",
    "end": "2254160"
  },
  {
    "text": "there are tricks that you can do to kind of pervert the code to to do this tricks",
    "start": "2254160",
    "end": "2259780"
  },
  {
    "text": "known as trampolines but one way that you might actually want to write the code is using a jump table",
    "start": "2259780",
    "end": "2267040"
  },
  {
    "text": "so you write your VM function simply as a function you look up the next byte code in your",
    "start": "2267040",
    "end": "2275740"
  },
  {
    "text": "that your program counter is pointing to and that and you look up that byte code in a table that you stored on the side",
    "start": "2275740",
    "end": "2281800"
  },
  {
    "text": "that table just contains functions that you want to decide what to do next the",
    "start": "2281800",
    "end": "2287800"
  },
  {
    "text": "functions that want to continue in the loop when they're done simply call back",
    "start": "2287800",
    "end": "2293980"
  },
  {
    "text": "into the loop when they're done the functions that want to abort the loop simply don't call back into the",
    "start": "2293980",
    "end": "2300160"
  },
  {
    "text": "loop but if you try to write this code in existing JavaScript",
    "start": "2300160",
    "end": "2305920"
  },
  {
    "text": "it's going to run a lot faster than you expected it to because it's going to die almost right away with a stack overflow",
    "start": "2305920",
    "end": "2312760"
  },
  {
    "text": "and the problem is what you're trying to do is continuously call back into the VM is the last thing that you do",
    "start": "2312760",
    "end": "2319020"
  },
  {
    "text": "when when this op ad Handler calls into the VM it's saying I'm done I've got",
    "start": "2319020",
    "end": "2324820"
  },
  {
    "text": "nothing else that I need to do I just want to jump to the VM",
    "start": "2324820",
    "end": "2329859"
  },
  {
    "text": "but with improperly implemented tail calls it's going to hang on to this stack frame and you're going to hang on",
    "start": "2329859",
    "end": "2336640"
  },
  {
    "text": "to more and more stack frames as you keep going through the recursion and pretty soon you're going to blow up",
    "start": "2336640",
    "end": "2341740"
  },
  {
    "text": "so what proper tail call says is implementers of JavaScript are required not to hang on to that stack frame",
    "start": "2341740",
    "end": "2347980"
  },
  {
    "text": "unnecessarily and that makes this code work so I don't know how often people are",
    "start": "2347980",
    "end": "2355300"
  },
  {
    "text": "going to use this but it's there if they need it and there are certainly styles of programming that people use to good",
    "start": "2355300",
    "end": "2361000"
  },
  {
    "text": "effect this is one continuation passing style is another one it's the kind of thing where",
    "start": "2361000",
    "end": "2366040"
  },
  {
    "text": "it's a fairly Advanced style of programming it's not something you use every day but when you need it you",
    "start": "2366040",
    "end": "2371560"
  },
  {
    "text": "really find you need it and if you don't have proper tail calls you're just kind of stuck uh yeah this is a great question so the",
    "start": "2371560",
    "end": "2379000"
  },
  {
    "text": "question is why is this considered a change to the programming language instead of something that implementers can do and uh it's a good question it's",
    "start": "2379000",
    "end": "2387460"
  },
  {
    "text": "it's it's a a common question and the reason is that unless programmers can",
    "start": "2387460",
    "end": "2392980"
  },
  {
    "text": "rely on this sort of quality of implementation they simply can't use this style so if two out of three",
    "start": "2392980",
    "end": "2400000"
  },
  {
    "text": "browser vendors Implement proper tail calls and it's not mandated by the spec it's",
    "start": "2400000",
    "end": "2406300"
  },
  {
    "text": "just considered an optimization well you just can't use it because the code's not going to work it's going to blow up with",
    "start": "2406300",
    "end": "2411880"
  },
  {
    "text": "a stack Trace in that third browser that doesn't use it I shouldn't have said three there's many more than three browsers if n minus one out of the N",
    "start": "2411880",
    "end": "2419560"
  },
  {
    "text": "browsers but so by mandating this in the spec we're saying all implementations in",
    "start": "2419560",
    "end": "2426520"
  },
  {
    "text": "order to be considered valid implementations of the next version of ecmascript are required to provide this",
    "start": "2426520",
    "end": "2431619"
  },
  {
    "text": "level of quality of implementation then programmers can know that they can rely on this and if it doesn't work in one of",
    "start": "2431619",
    "end": "2438280"
  },
  {
    "text": "the browsers they can call up their browser vendor and say hey you're violating the spec and it's a little bit",
    "start": "2438280",
    "end": "2444339"
  },
  {
    "text": "hard to write test cases that demonstrate this but you can do it like you can do it with with eval you can",
    "start": "2444339",
    "end": "2449680"
  },
  {
    "text": "call a function and see if it blows up with a stack Trace so you can write test cases that show hey browser X is not",
    "start": "2449680",
    "end": "2455859"
  },
  {
    "text": "correctly implementing proper tail calls because it's blowing up with a stack trace and that's with the finger and say this is a an invalid implementation of",
    "start": "2455859",
    "end": "2463900"
  },
  {
    "text": "JavaScript but that's why it's a it it's necessary to standardize this because otherwise",
    "start": "2463900",
    "end": "2469599"
  },
  {
    "text": "people just can't rely on it so the question is why not have a an explicit operator that says Hey I want",
    "start": "2469599",
    "end": "2475900"
  },
  {
    "text": "to do a tail call here um that that sort of puts it more overtly in the language",
    "start": "2475900",
    "end": "2481420"
  },
  {
    "text": "um that's certainly a a possibility that we've talked about and uh there's a fairly wide design space",
    "start": "2481420",
    "end": "2487599"
  },
  {
    "text": "here um the the simplest answer is this is the",
    "start": "2487599",
    "end": "2493060"
  },
  {
    "text": "minimal amount of change required to the language without having to introduce new keywords or drastically change the",
    "start": "2493060",
    "end": "2499060"
  },
  {
    "text": "language it's also something where um there's there's trade-offs either way the implicitness means that it's easy to",
    "start": "2499060",
    "end": "2506740"
  },
  {
    "text": "miss when you're reading the code that oh this relied on being a tail call so it could be nice to have the explicit",
    "start": "2506740",
    "end": "2512619"
  },
  {
    "text": "operator but the explicitness if you go with the explicit operator the downside of that is that you miss a lot of",
    "start": "2512619",
    "end": "2518920"
  },
  {
    "text": "opportunities for tail calls where you just may have forgotten to put that in there um",
    "start": "2518920",
    "end": "2524980"
  },
  {
    "text": "this is one of those things where there's trade-offs no matter how you go traditionally languages with proper tail",
    "start": "2524980",
    "end": "2531220"
  },
  {
    "text": "calls have them implicit we're actually working on another language at Mozilla right now where we",
    "start": "2531220",
    "end": "2537820"
  },
  {
    "text": "have explicit tail calls and we're kind of forging new ground there but um yeah it's it's debatable I tend to prefer the",
    "start": "2537820",
    "end": "2545320"
  },
  {
    "text": "implicitness in scripting languages but um yeah we could we could certainly discuss",
    "start": "2545320",
    "end": "2551140"
  },
  {
    "text": "it so the question is do any existing implementations have property calls and no none of them do",
    "start": "2551140",
    "end": "2556660"
  },
  {
    "text": "um it's not always trivial to implement when the underlying language doesn't",
    "start": "2556660",
    "end": "2562359"
  },
  {
    "text": "have proper tail calls so C plus plus doesn't and all of the major browser vendors Implement JavaScript and C plus",
    "start": "2562359",
    "end": "2568000"
  },
  {
    "text": "plus so it's some extra implementation burden to do this but it's not impossible it is doable and and we will",
    "start": "2568000",
    "end": "2575140"
  },
  {
    "text": "be uh working on this very soon I think uh at Mozilla we've got a couple bugs on",
    "start": "2575140",
    "end": "2580480"
  },
  {
    "text": "file um we got a ways to go but we are we are planning on implementing this binary",
    "start": "2580480",
    "end": "2586119"
  },
  {
    "text": "data yeah um so there's there's no straightforward way of of representing binary data in",
    "start": "2586119",
    "end": "2592180"
  },
  {
    "text": "JavaScript usually people just encoded in strings and more and more people are wanting to do uh i o you know Network i",
    "start": "2592180",
    "end": "2598480"
  },
  {
    "start": "2593000",
    "end": "2593000"
  },
  {
    "text": "o file i o where they're manipulating binary data and um different libraries and different",
    "start": "2598480",
    "end": "2604540"
  },
  {
    "text": "JavaScript embeddings are designing their own apis but this should just be",
    "start": "2604540",
    "end": "2610420"
  },
  {
    "text": "built into the language so um I've worked on this a fair amount it's um uh",
    "start": "2610420",
    "end": "2616960"
  },
  {
    "text": "just to give you a quick flavor the binary data spec basically lets you introduce new types new binary data",
    "start": "2616960",
    "end": "2623740"
  },
  {
    "text": "types that are actually first class values so Point 2D here is is a value it's an object that represents a sort of",
    "start": "2623740",
    "end": "2630599"
  },
  {
    "text": "schema for binary data of a certain shape so here it's a struct type which",
    "start": "2630599",
    "end": "2635859"
  },
  {
    "text": "has two Fields X and Y they're ordered first X then Y and they're both U and 32s",
    "start": "2635859",
    "end": "2641859"
  },
  {
    "text": "and RGB is another struct type that's a triple RG and B of uh of unsigned 8-bit",
    "start": "2641859",
    "end": "2649000"
  },
  {
    "text": "integers and you can Nest these types inside of other types so we can create a segment that itself is a struct",
    "start": "2649000",
    "end": "2655660"
  },
  {
    "text": "containing 2.2 DS and an RGB but these uh these sort of schemas for",
    "start": "2655660",
    "end": "2663700"
  },
  {
    "text": "binary data can be used as Constructors so you can construct new instances of binary data and the nice thing about",
    "start": "2663700",
    "end": "2669400"
  },
  {
    "text": "having these schemas is that means that the VM can Implement them as dense packed binary data so they have very",
    "start": "2669400",
    "end": "2675880"
  },
  {
    "text": "space efficient representations so here we create this new segment and it's",
    "start": "2675880",
    "end": "2681339"
  },
  {
    "text": "given initial values for everything so you never have data in an indeterminate State the way you do in C this is",
    "start": "2681339",
    "end": "2686980"
  },
  {
    "text": "Javascript we don't want any non-determinism that's unnecessary here and we certainly don't want memory",
    "start": "2686980",
    "end": "2692319"
  },
  {
    "text": "safety issues so you always have to give default values for everything or I actually I",
    "start": "2692319",
    "end": "2699099"
  },
  {
    "text": "think in some cases we we have reasonable defaults defined in the language okay so this gives you the ability to",
    "start": "2699099",
    "end": "2704619"
  },
  {
    "text": "create binary data kind of similarly to the way you do in statically typed languages but in a dynamically typed Language by having these First Class",
    "start": "2704619",
    "end": "2710140"
  },
  {
    "text": "Type descriptors so this could be used for things like IO libraries like the w3c is working on a",
    "start": "2710140",
    "end": "2718180"
  },
  {
    "text": "file i o library and we're working as fast as we can to to provide this to them so that they can build on top of",
    "start": "2718180",
    "end": "2724660"
  },
  {
    "text": "that so maybe we have a record data type that describes some record in a in a",
    "start": "2724660",
    "end": "2730720"
  },
  {
    "text": "file format and then we might have some input stream that lets us read from a",
    "start": "2730720",
    "end": "2736119"
  },
  {
    "text": "file and by passing it the the type schema we get back a chunk of binary",
    "start": "2736119",
    "end": "2742900"
  },
  {
    "text": "data that is densely allocated so again you get really good space efficiency out of this this is one of",
    "start": "2742900",
    "end": "2749680"
  },
  {
    "text": "those things where you can do it in JavaScript using strings but it's clumsy it's Error prone and it's inefficient",
    "start": "2749680",
    "end": "2758160"
  },
  {
    "text": "uh I don't know how many of you have seen some of the amazing new things coming out of the Next Generation",
    "start": "2758160",
    "end": "2763240"
  },
  {
    "text": "browsers with webgl but people are doing 2D and 3D Graphics uh right in the web",
    "start": "2763240",
    "end": "2768339"
  },
  {
    "text": "not using Flash not using Silverlight but actually built in as uh core functionality of the web and those are",
    "start": "2768339",
    "end": "2774940"
  },
  {
    "text": "all built on having very efficient representations of binary data now webgl uses a simpler form of binary data",
    "start": "2774940",
    "end": "2782920"
  },
  {
    "text": "called typed arrays which are not quite as flexible and convenient as as what we're working on so we're working with",
    "start": "2782920",
    "end": "2788260"
  },
  {
    "text": "the webgl folks to try to be compatible with future versions of webgl so that",
    "start": "2788260",
    "end": "2793420"
  },
  {
    "text": "they can build on the libraries that we have um yeah so I'm not a graphics programmer",
    "start": "2793420",
    "end": "2798760"
  },
  {
    "text": "I throw words like texture up on the screen and hope that that makes sense to to people who do know about Graphics",
    "start": "2798760",
    "end": "2803819"
  },
  {
    "text": "proxies again a power feature that I'm I can't possibly do justice to in just one",
    "start": "2803819",
    "end": "2809380"
  },
  {
    "text": "slide in just a couple of minutes but proxies are a really neat new",
    "start": "2809380",
    "end": "2815339"
  },
  {
    "start": "2813000",
    "end": "2813000"
  },
  {
    "text": "reflective meta programming facility now this is one that actually is implemented",
    "start": "2815339",
    "end": "2821380"
  },
  {
    "text": "in the betas of Firefox 4 we're the only ones so far who have an implementation of it but by putting it in the standard",
    "start": "2821380",
    "end": "2827859"
  },
  {
    "text": "hopefully all the browsers will implement it so on the left hand side you have sort",
    "start": "2827859",
    "end": "2833319"
  },
  {
    "text": "of the typical view of objects in JavaScript you say object equals new C you're going to get a new object that",
    "start": "2833319",
    "end": "2840040"
  },
  {
    "text": "might have some properties of its own and it has an implicit link to C's prototype you know to the object point",
    "start": "2840040",
    "end": "2846460"
  },
  {
    "text": "of two by C's prototype and you get this prototype inheritance chain all the operations that you know we all know by",
    "start": "2846460",
    "end": "2853300"
  },
  {
    "text": "heart in JavaScript follow the same pattern well the proxy Library lets you create",
    "start": "2853300",
    "end": "2859300"
  },
  {
    "text": "your own kinds of objects that have their own kinds of semantics and you can kind of give them unlimited new ways of",
    "start": "2859300",
    "end": "2866140"
  },
  {
    "text": "doing the standard operations that usually follow this fixed pattern so the",
    "start": "2866140",
    "end": "2871420"
  },
  {
    "text": "way you do it is you create what's called a Handler object that describes callbacks for all of the basic semantic",
    "start": "2871420",
    "end": "2876940"
  },
  {
    "text": "operations on objects like getting a property setting a property querying a property's attributes",
    "start": "2876940",
    "end": "2884500"
  },
  {
    "text": "this Handler has all these callbacks and when you say property proxy.create of the Handler you get back this new object",
    "start": "2884500",
    "end": "2891339"
  },
  {
    "text": "that's called a proxy that's delegating to those callbacks that you gave it for",
    "start": "2891339",
    "end": "2896859"
  },
  {
    "text": "any one of those semantic operations this is a really powerful thing and it's so General that sometimes people's eyes",
    "start": "2896859",
    "end": "2902740"
  },
  {
    "text": "get crossed when they look at and they say well what am I going to do with this well the up the the possibilities are",
    "start": "2902740",
    "end": "2908740"
  },
  {
    "text": "Limitless but you know here's a few things to maybe get your imagination going um maybe you want to create an object",
    "start": "2908740",
    "end": "2914980"
  },
  {
    "text": "that's just like some other object except you want to log all of the property gets maybe for debugging's sake",
    "start": "2914980",
    "end": "2920260"
  },
  {
    "text": "you want to say I want to see every time that somebody is asking for a property",
    "start": "2920260",
    "end": "2925359"
  },
  {
    "text": "and I want to I want to just generate a trace that I can use for debugging afterwards so you create an object",
    "start": "2925359",
    "end": "2931180"
  },
  {
    "text": "that's just like the original object except it also logs all of the reads off to the side or you could do the same with logging rights you could sort of",
    "start": "2931180",
    "end": "2937359"
  },
  {
    "text": "log anything that you want uh one that I used recently in a library",
    "start": "2937359",
    "end": "2942460"
  },
  {
    "text": "that I was writing was a sort of mix-in object where you create an object that's actually delegating to two different objects for its properties so this is",
    "start": "2942460",
    "end": "2949720"
  },
  {
    "text": "sort of a completely different inheritance protocol than the one that you get by default with with prototype",
    "start": "2949720",
    "end": "2956319"
  },
  {
    "text": "inheritance you can also Implement catch-alls so maybe you have an object where you want",
    "start": "2956319",
    "end": "2962319"
  },
  {
    "text": "to be able to say if somebody asked for a property that it doesn't have I want you to call this other function and and",
    "start": "2962319",
    "end": "2968140"
  },
  {
    "text": "fill in for the the property not found operation so these are just a few",
    "start": "2968140",
    "end": "2973240"
  },
  {
    "text": "examples of the kinds of uh new semantic operations that you could Define for",
    "start": "2973240",
    "end": "2978760"
  },
  {
    "text": "yourself using proxies uh the question is is that valid syntax to make a call inside of a function yes",
    "start": "2978760",
    "end": "2984819"
  },
  {
    "text": "absolutely this is just a function call for an argument of another function proxy is is not new syntax it's just",
    "start": "2984819",
    "end": "2991000"
  },
  {
    "text": "it's just a an API so proxy is an object that has a create method",
    "start": "2991000",
    "end": "2996220"
  },
  {
    "text": "so I'm just saying proxy.create you know method call with an argument and you can always do function calls in an argument",
    "start": "2996220",
    "end": "3002760"
  },
  {
    "text": "context uh more questions on proxies again this is another one that I could I could",
    "start": "3002760",
    "end": "3009000"
  },
  {
    "text": "spend an entire talk talking about uh I think this is the last one so",
    "start": "3009000",
    "end": "3014220"
  },
  {
    "text": "module loaders and again it's a a power feature not when I have a lot of time for so module loaders are a reflective",
    "start": "3014220",
    "end": "3021900"
  },
  {
    "text": "API a dynamic API that let you define hooks that get called when somebody does",
    "start": "3021900",
    "end": "3028680"
  },
  {
    "text": "a module load so module loaders let you create new contexts where you can create",
    "start": "3028680",
    "end": "3034339"
  },
  {
    "start": "3032000",
    "end": "3032000"
  },
  {
    "text": "new semantics that you might want to use so one example is you could create a module",
    "start": "3034339",
    "end": "3041220"
  },
  {
    "text": "loader that recognizes URLs that end in dot JS as being JavaScript but recognize",
    "start": "3041220",
    "end": "3047040"
  },
  {
    "text": "URLs that end in dot coffee as being coffee script and actually compile The Source down to JavaScript before they",
    "start": "3047040",
    "end": "3053760"
  },
  {
    "text": "hand it back off to the JavaScript engine and similarly with python so you can create a module loader that actually",
    "start": "3053760",
    "end": "3060359"
  },
  {
    "text": "recognizes several different programming languages and mix those in one program",
    "start": "3060359",
    "end": "3065579"
  },
  {
    "text": "so this is just a simple example of a program that uses three modules from three different languages together",
    "start": "3065579",
    "end": "3071520"
  },
  {
    "text": "you could also create module loaders that do compile time checking when they",
    "start": "3071520",
    "end": "3077819"
  },
  {
    "text": "look at the source code when it comes in and say this violates some property that I want",
    "start": "3077819",
    "end": "3083579"
  },
  {
    "text": "all my programs to have and reject the program and you get a compile time error so for example if like Doug you don't",
    "start": "3083579",
    "end": "3089579"
  },
  {
    "text": "like the minus minus operator maybe you have a lint Checker that says I disallow",
    "start": "3089579",
    "end": "3096300"
  },
  {
    "text": "the use of minus minus so it looks at the source code before it gets sent off to the underlying compiler and rejects",
    "start": "3096300",
    "end": "3102839"
  },
  {
    "text": "it uh modulo loaders also give you the ability to create separate isolated",
    "start": "3102839",
    "end": "3108720"
  },
  {
    "text": "context separate isolated state where you're running different sets of code so it actually lets you do things like",
    "start": "3108720",
    "end": "3116160"
  },
  {
    "text": "security patterns where you're calling untrusted code and you want to make sure that that code can't trample on any of",
    "start": "3116160",
    "end": "3121319"
  },
  {
    "text": "your state you create a new separate module loader in which you're going to eval that code and it's given a new",
    "start": "3121319",
    "end": "3127559"
  },
  {
    "text": "separate State a new Global state so here we maybe have some code that Stomps on jQuery and Stomps on yui and you want",
    "start": "3127559",
    "end": "3134819"
  },
  {
    "text": "to make sure that it's not something on your jQuery on your yui so you create a separate isolated context to run that so",
    "start": "3134819",
    "end": "3141119"
  },
  {
    "text": "security is one reason but it's not just security uh there's a lot of uh new cloud-based code editors that people are",
    "start": "3141119",
    "end": "3147900"
  },
  {
    "text": "working on these days and one of the things you do when you implement a JavaScript editor in JavaScript is you",
    "start": "3147900",
    "end": "3153420"
  },
  {
    "text": "have to eval this other person's JavaScript code well you want to make sure when you're when you're running their code in your editor that their",
    "start": "3153420",
    "end": "3160680"
  },
  {
    "text": "code isn't trampling on the editor's code so you can create a separate isolated module loader in which you run",
    "start": "3160680",
    "end": "3167099"
  },
  {
    "text": "their code and that way you kind of protect the meta level from uh from the",
    "start": "3167099",
    "end": "3173040"
  },
  {
    "text": "program level so again modulars are a high-powered sort of low level feature but they they",
    "start": "3173040",
    "end": "3179099"
  },
  {
    "text": "add a lot of new power to the language I think yes we are at the end of my",
    "start": "3179099",
    "end": "3186960"
  },
  {
    "text": "little lightning tour of acmascript.next I just want to finish by saying that uh",
    "start": "3186960",
    "end": "3192960"
  },
  {
    "text": "you're in charge we're the committee here to serve you and your feedback is invaluable so we",
    "start": "3192960",
    "end": "3201359"
  },
  {
    "text": "have public forums where you can talk back to me obviously tonight I'll hang out as long as people want but we also",
    "start": "3201359",
    "end": "3207839"
  },
  {
    "text": "have a public mailing list es discuss at mozilla.org the whole committee hangs out on that it's up it's hosted at",
    "start": "3207839",
    "end": "3214260"
  },
  {
    "start": "3211000",
    "end": "3211000"
  },
  {
    "text": "Mozilla but it's the entire committee that's on that mailing list we also have a public website that's sort of",
    "start": "3214260",
    "end": "3220440"
  },
  {
    "text": "uh embarrassing web coding skills of myself uh working with a designer to",
    "start": "3220440",
    "end": "3225540"
  },
  {
    "text": "make it look not quite so ugly um ecmascript.org has some resources about the language",
    "start": "3225540",
    "end": "3230780"
  },
  {
    "text": "wiki.ecmascript.org is where we do the uh the committee design work so we have",
    "start": "3230780",
    "end": "3236040"
  },
  {
    "text": "all of our draft specifications up on that Wiki so you can look at everything that we're working on we're doing all of",
    "start": "3236040",
    "end": "3241319"
  },
  {
    "text": "our work in the open and then of course on the other side you've got me I'm open to anybody who wants to talk to me as",
    "start": "3241319",
    "end": "3246960"
  },
  {
    "text": "well so that's all of the ways that you can find me online and I'm happy to answer any questions people have so",
    "start": "3246960",
    "end": "3254160"
  },
  {
    "text": "don't be bashful please feel free to to talk back to us and let us know your",
    "start": "3254160",
    "end": "3259559"
  },
  {
    "text": "thoughts all right thanks very much for your time and attention I appreciate it",
    "start": "3259559",
    "end": "3264318"
  },
  {
    "text": "thank you",
    "start": "3273200",
    "end": "3276200"
  }
]