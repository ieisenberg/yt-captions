[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[Music]",
    "start": "5780",
    "end": "11960"
  },
  {
    "text": "so my name is Bill veners I'm going to talk about Simplicity in scholar design and what I want to do is give you 10",
    "start": "11960",
    "end": "17080"
  },
  {
    "text": "rules of thumb that you can uh hopefully take away and use and make your uh users",
    "start": "17080",
    "end": "22760"
  },
  {
    "text": "lives more simple and uh the focus is really not simplifying your library",
    "start": "22760",
    "end": "28039"
  },
  {
    "text": "design but simplifying your users's life when they use your library and um you can you can actually",
    "start": "28039",
    "end": "36399"
  },
  {
    "text": "make your library too simple and uh end up complicating your users lives but you",
    "start": "36399",
    "end": "42039"
  },
  {
    "text": "can of course also make your library way more complicated than needs to be and also complicate their lives so um so the",
    "start": "42039",
    "end": "48559"
  },
  {
    "text": "uh the main idea is that programmers are people and so when you design libraries",
    "start": "48559",
    "end": "54559"
  },
  {
    "text": "you're designing them for people and you have to consider human factors so um the first guideline is designed for busy",
    "start": "54559",
    "end": "60840"
  },
  {
    "start": "60000",
    "end": "160000"
  },
  {
    "text": "teams so the two key wordss there are busy and teams interesting software is written by teams not by individuals so",
    "start": "60840",
    "end": "66360"
  },
  {
    "text": "you uh it's not enough to just think about how the user is going to do something you need to think about how are people going to kind of gather",
    "start": "66360",
    "end": "73479"
  },
  {
    "text": "around your library and and use it together to do something so for example um there'll be different kinds of uh",
    "start": "73479",
    "end": "79680"
  },
  {
    "text": "different levels of uh of people and so how are they going to read each other's code that's the kind of thing you need",
    "start": "79680",
    "end": "85119"
  },
  {
    "text": "to think about and busy is um uh basically um you don't want to",
    "start": "85119",
    "end": "92040"
  },
  {
    "text": "assume that all your users are going to be experts in your library uh a lot of",
    "start": "92040",
    "end": "97079"
  },
  {
    "text": "them will be casual um they're focused on something else not you or your library and the way I like to think",
    "start": "97079",
    "end": "103399"
  },
  {
    "text": "about it is renting a car so when I go on a business trip a lot of times I'll rent a car and when I get in that car I",
    "start": "103399",
    "end": "109200"
  },
  {
    "text": "have never actually driven that kind of car before and um usually uh well there's always I think a manual in the",
    "start": "109200",
    "end": "115799"
  },
  {
    "text": "glove compartment but I've never read it I always can just kind of look around and figure out how to drive off the car and and and I go off to my hotel right",
    "start": "115799",
    "end": "123640"
  },
  {
    "text": "so um it's it's uh a lot of users",
    "start": "123640",
    "end": "129840"
  },
  {
    "text": "will actually it's good to have documentation but you want them to be able to use your Library without",
    "start": "129840",
    "end": "135040"
  },
  {
    "text": "actually reading the documentation that would actually make it simpler for them um and I think if when we bought a car I",
    "start": "135040",
    "end": "141879"
  },
  {
    "text": "actually did read the owner's manual but um I've never read one at a midle car and so this is SM of idea that not every",
    "start": "141879",
    "end": "147280"
  },
  {
    "text": "user wants to buy your library they just want to rent it for a while to do something and what they're really focused on is what they're trying to get",
    "start": "147280",
    "end": "153040"
  },
  {
    "text": "to using your library as a vehicle to get there um so uh I wanted to show some",
    "start": "153040",
    "end": "159280"
  },
  {
    "text": "counter examples of of bad or well design problems that are mistakes that I",
    "start": "159280",
    "end": "164319"
  },
  {
    "start": "160000",
    "end": "260000"
  },
  {
    "text": "made so uh this is something in scholar test that you can say both of these",
    "start": "164319",
    "end": "169720"
  },
  {
    "text": "things and they'll both compile so what um what happens if you say 21 should be",
    "start": "169720",
    "end": "175000"
  },
  {
    "text": "20 plus or minus 5 uh I will hit return there oops well let's try it again 21",
    "start": "175000",
    "end": "181159"
  },
  {
    "text": "should be 20 plus or minus 5 is it it accepts that if you change that to",
    "start": "181159",
    "end": "187319"
  },
  {
    "text": "equal basically by not throwing an exception it says that it is um it actually complains that uh 21 did not",
    "start": "187319",
    "end": "194560"
  },
  {
    "text": "equal intolerance 25 right so this I did that on purpose",
    "start": "194560",
    "end": "201239"
  },
  {
    "text": "uh because I thought it was important in in matchers to have a way to always call Double equals so I thought well B will",
    "start": "201239",
    "end": "207760"
  },
  {
    "text": "have these special cases if you pass this kind of type to will do something special equal always call Double equals",
    "start": "207760",
    "end": "213480"
  },
  {
    "text": "um but over the years a couple users reported this as a bug is this is not working right and uh I pointed them to",
    "start": "213480",
    "end": "221720"
  },
  {
    "text": "the documentation because in the documentation it says it works this way I mean this is working as specified so technically it's a user error but really",
    "start": "221720",
    "end": "228360"
  },
  {
    "text": "I think it's my fault and the reason it's my fault is not because um it isn't reasonable to actually do that",
    "start": "228360",
    "end": "235920"
  },
  {
    "text": "it's not unreasonable to say I want some matcher that always calls double equals and it was also documented right so that",
    "start": "235920",
    "end": "243560"
  },
  {
    "text": "wasn't the problem the problem is that because it looks like it should work to actually know that this won't work you",
    "start": "243560",
    "end": "249599"
  },
  {
    "text": "have to read the documentation so that's like if I get in a rental car I have to actually read the manual before I can",
    "start": "249599",
    "end": "255079"
  },
  {
    "text": "drive off right so that's an example um okay so um one of the things that Scala",
    "start": "255079",
    "end": "263040"
  },
  {
    "start": "260000",
    "end": "365000"
  },
  {
    "text": "is uh good at is you can really make client code look however you want so",
    "start": "263040",
    "end": "268120"
  },
  {
    "text": "it's very flexible very powerful and um to help teams work together what",
    "start": "268120",
    "end": "273280"
  },
  {
    "text": "I think is uh good to keep in mind is use it to make code clear so the way I",
    "start": "273280",
    "end": "278919"
  },
  {
    "text": "try to make code clear is first I try to make a drop dead stupid obvious so when someone looks at they know exactly what",
    "start": "278919",
    "end": "284039"
  },
  {
    "text": "it means they don't have to look it up right um sometimes that's hard to do so the second the fallback is make it",
    "start": "284039",
    "end": "289880"
  },
  {
    "text": "guessable so that when you look at it they'll say well I'm not sure what that means but I think it might mean this and",
    "start": "289880",
    "end": "295560"
  },
  {
    "text": "whatever that is that is what it means right so they can guess what it means and move on and then if sometimes that's",
    "start": "295560",
    "end": "301440"
  },
  {
    "text": "hard to do so the third fallback is to make it easy to remember so they're going to have to look it up the first",
    "start": "301440",
    "end": "306560"
  },
  {
    "text": "time they see it um but it's nice if they can actually look it up once and remember it after that um what you don't",
    "start": "306560",
    "end": "312400"
  },
  {
    "text": "want is every time they see it on the code they have to look it up again and again and again right okay ah yes sorry",
    "start": "312400",
    "end": "319199"
  },
  {
    "text": "this is um when I actually wrote plus or minus out long hand like that really long hand",
    "start": "319199",
    "end": "326720"
  },
  {
    "text": "uh the reason I did that was I wanted it to be obvious right so when you read plus or minus you",
    "start": "326720",
    "end": "331800"
  },
  {
    "text": "know it means plus or minus um I considered a couple different operators and I didn't choose them because I",
    "start": "331800",
    "end": "337759"
  },
  {
    "text": "weren't sure they were actually um going to be guessable but over the",
    "start": "337759",
    "end": "342960"
  },
  {
    "text": "years I did decide that you know I did some informal surveys and found that people would guess when you see a plus minus that it means plus or minus um so",
    "start": "342960",
    "end": "349960"
  },
  {
    "text": "I'm actually changing that to to the plus minus operator but um it's really it's I think",
    "start": "349960",
    "end": "357240"
  },
  {
    "text": "it's good to be very conservative about uh making code really obvious um okay so both readers and",
    "start": "357240",
    "end": "365160"
  },
  {
    "start": "365000",
    "end": "480000"
  },
  {
    "text": "writers are important code is read and written I think it's read more than it's written so what I think it's good to do",
    "start": "365160",
    "end": "371039"
  },
  {
    "text": "is try and um make both readers and writers happy if you can and sometimes",
    "start": "371039",
    "end": "377080"
  },
  {
    "text": "their intention like you know plus or minus is very long- winded it's really obvious to the reader but it's kind of pain to type right so it's good to try",
    "start": "377080",
    "end": "385000"
  },
  {
    "text": "and find something that solves that tension and makes them both happy but when you can't sometimes it's hard to do",
    "start": "385000",
    "end": "391560"
  },
  {
    "text": "uh I think it's good to favor the reader um so an example of that where I didn't",
    "start": "391560",
    "end": "396759"
  },
  {
    "text": "actually make this mistake but I considered it um there's a way in scholet test to invoke private methods",
    "start": "396759",
    "end": "403440"
  },
  {
    "text": "to test private methods I think it should be rare that you do that um most times you don't need to but occasionally",
    "start": "403440",
    "end": "409520"
  },
  {
    "text": "it's useful and so I put this syntax in there and the way it it looks if you said object. decorate one you'd get a compiler error because decorate is a",
    "start": "409520",
    "end": "416400"
  },
  {
    "text": "private method so you replace that dot with this this thing that says invoke private and um it's very long-winded but",
    "start": "416400",
    "end": "424440"
  },
  {
    "text": "I think it actually when you're reading the code and you don't know what it means it kind of says invoke private and then you see a method well it looks like",
    "start": "424440",
    "end": "429919"
  },
  {
    "text": "it's invoking a private method right the thing I considered was this you know it seems like a good good use uh for a",
    "start": "429919",
    "end": "435680"
  },
  {
    "text": "symbol right symbolic operator and the what I consider was this lightning bolt because it's kind of it's like lightning",
    "start": "435680",
    "end": "441800"
  },
  {
    "text": "strikes the object and a private method gets invoked right um so I considered it",
    "start": "441800",
    "end": "447919"
  },
  {
    "text": "but I I decided for readers it's too non obvious right um and and especially",
    "start": "447919",
    "end": "453319"
  },
  {
    "text": "because I'd expect it to be used rarely um the the the the method name is",
    "start": "453319",
    "end": "458440"
  },
  {
    "text": "very long-winded invoke private so another thing I could have done is make a shorthand for it like priv and the reason I didn't do that is simply",
    "start": "458440",
    "end": "464639"
  },
  {
    "text": "because this is rarely used or expected to be rarely used in fact I want to discourage it from being used a lot um",
    "start": "464639",
    "end": "470879"
  },
  {
    "text": "but if it was used a lot I would probably do something like C which is a Shand that it's easy to remember right",
    "start": "470879",
    "end": "476159"
  },
  {
    "text": "once you've learned looked it up okay um so the other thing about people is they",
    "start": "476159",
    "end": "482639"
  },
  {
    "start": "480000",
    "end": "675000"
  },
  {
    "text": "make mistakes right so uh one of the things that it's important to do I think is",
    "start": "482639",
    "end": "488360"
  },
  {
    "text": "to imagine or kind of figure out what you think what kind of mistakes people can make and make them either impossible",
    "start": "488360",
    "end": "494440"
  },
  {
    "text": "if if you can or if you can't make them impossible to make them difficult to make and",
    "start": "494440",
    "end": "500639"
  },
  {
    "text": "um so uh excuse",
    "start": "500639",
    "end": "506759"
  },
  {
    "text": "me most times your users aren't sitting in a a room with classical music playing",
    "start": "506759",
    "end": "512159"
  },
  {
    "text": "and and sipping tea and using your library you know they've got deadlines they're crawling through the mud they've got bullets whizzing past their heads",
    "start": "512159",
    "end": "518080"
  },
  {
    "text": "and they're going to screw up so if they can screw up they will over time um so",
    "start": "518080",
    "end": "523560"
  },
  {
    "text": "an example of of how I I think I did make something uh less well error",
    "start": "523560",
    "end": "529399"
  },
  {
    "text": "resistant let's call it is um the way tests this is test framework tests should be run in parallel because um",
    "start": "529399",
    "end": "536160"
  },
  {
    "text": "they're embarrassingly parallelizable CPU speeds aren't going uh up right you getting more cores and so on so but the",
    "start": "536160",
    "end": "542760"
  },
  {
    "text": "problem is that basically if you running your test and parallel it's a concurrent program and people don't have time to",
    "start": "542760",
    "end": "548880"
  },
  {
    "text": "make it work make it thread safe and make it uh uh you know make sure you don't have any concurrency bugs so the",
    "start": "548880",
    "end": "554760"
  },
  {
    "text": "first thing I did was made sequential the default so you only get parallel if you ask for it the second thing then if",
    "start": "554760",
    "end": "559880"
  },
  {
    "text": "you ask for it is it doesn't actually run tests in parallel in a class it just runs the test classes in parallel and",
    "start": "559880",
    "end": "565480"
  },
  {
    "text": "that's usually going to be enough speed up um but occasionally you do need to run test in parall and then you mix in this trait to get it and that's where I",
    "start": "565480",
    "end": "572480"
  },
  {
    "text": "think the the most of the danger is because even though I try to encourage people to not use shared mutable state in their test classes um with examples",
    "start": "572480",
    "end": "579560"
  },
  {
    "text": "and documentation and whatnot people will do it right and so now if you're running those tests in parallel and you've got shared M State you've got a",
    "start": "579560",
    "end": "585519"
  },
  {
    "text": "synchronize access to it right so what I did with parallel test execution is when you mix that in it runs each test in its",
    "start": "585519",
    "end": "591959"
  },
  {
    "text": "own instance so that each test gets its own copy of that potentially shared",
    "start": "591959",
    "end": "597040"
  },
  {
    "text": "mutable state so it is not impossible to screw up but it's hopefully difficult um",
    "start": "597040",
    "end": "603680"
  },
  {
    "text": "um that's just kind of the trying to prevent Errors By how you design it but the the other thing Scola has that uh is",
    "start": "603680",
    "end": "609040"
  },
  {
    "text": "this very rich type system and so a great way to prevent errors is to make it a type error right when they do it so",
    "start": "609040",
    "end": "614399"
  },
  {
    "text": "an example of that is um this parallel test execution is",
    "start": "614399",
    "end": "619720"
  },
  {
    "text": "um uh a a trait that you can mix into um",
    "start": "619720",
    "end": "626279"
  },
  {
    "text": "most Stell traits but not all so it actually doesn't work in j J unit Suite junit Suite it doesn't work in junit",
    "start": "626279",
    "end": "632000"
  },
  {
    "text": "Suite because um where's my scolar prompt there it is it doesn't work in junit Suite uh",
    "start": "632000",
    "end": "639240"
  },
  {
    "text": "because junit uh this this style trait actually delegates to junit to do",
    "start": "639240",
    "end": "644399"
  },
  {
    "text": "everything so you got to do a junits way so it just doesn't work but that's an easy mistake to make right I mean you wouldn't know that without looking at",
    "start": "644399",
    "end": "650120"
  },
  {
    "text": "the documentation um but when you try to mix parallel test execution into junit Suite you actually get a compiler error",
    "start": "650120",
    "end": "656079"
  },
  {
    "text": "and it's a type error because uh parallel test execution is not a valid subtype of junit Suite because it's",
    "start": "656079",
    "end": "662680"
  },
  {
    "text": "trying to overwrite a method that's final in junit Suite um so that I mean it's really a a great type system and",
    "start": "662680",
    "end": "669720"
  },
  {
    "text": "you can use it for preventing errors uh if you think about it that way so okay so another I think the main reason",
    "start": "669720",
    "end": "677120"
  },
  {
    "start": "675000",
    "end": "930000"
  },
  {
    "text": "I can get in a rental car and just drive off is because I'm familiar with cars",
    "start": "677120",
    "end": "682320"
  },
  {
    "text": "and so you can exploit that in your design to make it easy for people but um it's a two-edged sword because a lot of",
    "start": "682320",
    "end": "688240"
  },
  {
    "text": "times you you may actually be designing a library because you want people you think people doing things the wrong way",
    "start": "688240",
    "end": "694040"
  },
  {
    "text": "and you want to do them A Better Way right so if you only do what's familiar you can't do that right but what you can",
    "start": "694040",
    "end": "700120"
  },
  {
    "text": "do in that case is is leave the stuff that you don't care about that you think is okay that they're doing the same or",
    "start": "700120",
    "end": "706399"
  },
  {
    "text": "similar so that they're comfortable and then just change the things that you think they should do differently um so",
    "start": "706399",
    "end": "712600"
  },
  {
    "text": "an example of that is Java the Java language itself on several occasions I saw James Gosling uh say that um he he",
    "start": "712600",
    "end": "718880"
  },
  {
    "text": "kind of fooled C programmers by his design of java and one time he called it a Java a well orchestrated",
    "start": "718880",
    "end": "725200"
  },
  {
    "text": "fraud that's what he called it and what he thought his opinion was that c programmers are spending too much time",
    "start": "725200",
    "end": "731399"
  },
  {
    "text": "doing memory management right chasing down memory bugs and they should use a garbage collector but C programmers",
    "start": "731399",
    "end": "736600"
  },
  {
    "text": "myself included were we we didn't trust garbage collectors are going to take too long right there going to be too slow so",
    "start": "736600",
    "end": "742360"
  },
  {
    "text": "what he did is he made this language Java that looks a lot like C the while Loops the four Loops you know a lot of",
    "start": "742360",
    "end": "747760"
  },
  {
    "text": "it looks the same the semicolons the races um but there was no way to free memory right so he makes us feel",
    "start": "747760",
    "end": "753519"
  },
  {
    "text": "comfortable but he didn't give us a way to free memory so now we did change that behavior and that worked",
    "start": "753519",
    "end": "760760"
  },
  {
    "text": "um so uh so in uh when I first started writing",
    "start": "760760",
    "end": "767040"
  },
  {
    "text": "tests I wrote them like this and this was the way people wrote them this was way back when uh junit first came out um",
    "start": "767040",
    "end": "773399"
  },
  {
    "text": "what you would do is you'd write one test class per class under test I should have say extends test case up there and",
    "start": "773399",
    "end": "778880"
  },
  {
    "text": "then um then you write one test method per method you're testing so here I'm",
    "start": "778880",
    "end": "784000"
  },
  {
    "text": "testing the size method then I'm testing the head method right um",
    "start": "784000",
    "end": "789360"
  },
  {
    "text": "so Behavior development came out and there a lot of ideas kind of mixed in under that umbrella but one of them was that you should write you should focus",
    "start": "789360",
    "end": "796240"
  },
  {
    "text": "each test on one bit of behavior and write a descriptive test name and you a good way to do that is to make it sound",
    "start": "796240",
    "end": "802160"
  },
  {
    "text": "like you're specifying the behavior um so I thought that was a good idea and when I made this fun Suite class funu",
    "start": "802160",
    "end": "808920"
  },
  {
    "text": "looked looks a lot like xunit I mean everything is pretty much the same with xunit except it encourages Focus tests",
    "start": "808920",
    "end": "814760"
  },
  {
    "text": "with descriptive name so the one thing I changed was the way you you know the",
    "start": "814760",
    "end": "819920"
  },
  {
    "text": "test name is a string now so it says test test test just like junit 3 did just like you see at test in junit 4 um",
    "start": "819920",
    "end": "826560"
  },
  {
    "text": "so it's similar but that one thing has changed and uh so that that's an example",
    "start": "826560",
    "end": "832279"
  },
  {
    "text": "of just changing the one thing you think people should how you know change their behavior the other thing is there's a",
    "start": "832279",
    "end": "837560"
  },
  {
    "text": "lot of stuff in the scholar library that you can extend and then people will be",
    "start": "837560",
    "end": "843120"
  },
  {
    "text": "familiar with that Library construct in in sort of your incarnation of it so the",
    "start": "843120",
    "end": "848320"
  },
  {
    "text": "way for example you compose mattress is on top it's just function composition mat in scholar test is just a function",
    "start": "848320",
    "end": "853600"
  },
  {
    "text": "one it has a compose method so if you are familiar with function composition from Scala you know how to already",
    "start": "853600",
    "end": "859120"
  },
  {
    "text": "compose matchers and if you're not you actually have to learn something about Scala that's generally useful right so",
    "start": "859120",
    "end": "866839"
  },
  {
    "text": "um so I think that's uh that's sort of exploiting familiarity and the other thing is this table the way you do table",
    "start": "866839",
    "end": "873519"
  },
  {
    "text": "driven stuff in scholar test is um you make you say table and then you have a bunch of tupal the first one is a tupal",
    "start": "873519",
    "end": "879920"
  },
  {
    "text": "of strings and that's the column headings like this is column n and this is column D and you have the tupal of",
    "start": "879920",
    "end": "886000"
  },
  {
    "text": "the data um and then you can say for all examples n should not equal d That's a sort of contri stupid uh property check",
    "start": "886000",
    "end": "892480"
  },
  {
    "text": "but that's the syntax right but you can also say examples for each print line because what comes back when you say",
    "start": "892480",
    "end": "898160"
  },
  {
    "text": "table is in this in this case because there's two columns you get a table for two right and uh if you have three",
    "start": "898160",
    "end": "903800"
  },
  {
    "text": "columns you get a table for three and that extends table for two extends seek of tle two int INT in this case right so",
    "start": "903800",
    "end": "910839"
  },
  {
    "text": "it is a seek and you already know how to use a seek so if you want for examply let's say you got a bunch of columns in",
    "start": "910839",
    "end": "916680"
  },
  {
    "text": "the CSV file and you want to pull them in and put them into a table and then do a property check on it you already know",
    "start": "916680",
    "end": "922199"
  },
  {
    "text": "how to do that because you already know how to use a seek right um so anyway reusing things in the scholar library",
    "start": "922199",
    "end": "928319"
  },
  {
    "text": "because you know exploits familiarity in a good way um so I I think people do",
    "start": "928319",
    "end": "933600"
  },
  {
    "start": "930000",
    "end": "980000"
  },
  {
    "text": "want documentation definitely and they want documentation that actually matches what the thing",
    "start": "933600",
    "end": "938759"
  },
  {
    "text": "does um but they don't really want to read it because they're in a hurry right",
    "start": "938759",
    "end": "943839"
  },
  {
    "text": "uh but they really like examples and that's because they can do this um so uh",
    "start": "943839",
    "end": "948920"
  },
  {
    "text": "they can contrl C uh control V right and then I'll just",
    "start": "948920",
    "end": "955279"
  },
  {
    "text": "see new set spec execute basically people want to copy and paste CU it's fast so um when you do documentation I",
    "start": "955279",
    "end": "962920"
  },
  {
    "text": "think it's good to to try to include a lot of examples and that really helps people get get moving um and it's also",
    "start": "962920",
    "end": "968240"
  },
  {
    "text": "an opportunity to influence their behavior because if you think they're doing it the wrong way and they should do it a different way if all your",
    "start": "968240",
    "end": "973480"
  },
  {
    "text": "examples show that different way that's how they're going to do it because it's easier right",
    "start": "973480",
    "end": "979279"
  },
  {
    "text": "um okay so another thing I think you should do is get rid of sorry it was",
    "start": "979279",
    "end": "987240"
  },
  {
    "start": "980000",
    "end": "1166000"
  },
  {
    "text": "too easy so is to get rid of redundancy right um there's uh there's this notion",
    "start": "987240",
    "end": "993800"
  },
  {
    "text": "of surface area your design has a library has a surface area and Def find something you need the more stuff that's in there the more you got to trapes over",
    "start": "993800",
    "end": "999759"
  },
  {
    "text": "right um but there is a certain kind of redundancy I think is good and this is actually from the python Community I",
    "start": "999759",
    "end": "1006600"
  },
  {
    "text": "wanted to to to pull this up because there's something called pep 20 which is like a sip for for Python and it's the",
    "start": "1006600",
    "end": "1012120"
  },
  {
    "text": "Zen of python pep maybe we should have a Zen of Scala sip but um in there buried",
    "start": "1012120",
    "end": "1017480"
  },
  {
    "text": "in there says this sentence there should be one and preferably only one obvious way to do it I think that's actually a good idea right because then that's the",
    "start": "1017480",
    "end": "1025520"
  },
  {
    "text": "way to do it right but there is a kind of redundancy that I think is useful um",
    "start": "1025520",
    "end": "1031199"
  },
  {
    "text": "and that's this so this is the screw I took a picture of my screwdrivers and um what happened about",
    "start": "1031199",
    "end": "1037480"
  },
  {
    "text": "three years ago we had had some work done our house and all my tools disappeared so I had no tools and I",
    "start": "1037480",
    "end": "1043079"
  },
  {
    "text": "decided I would just only buy a tool when I needed one so this is how many screwdrivers I have so far would my",
    "start": "1043079",
    "end": "1049080"
  },
  {
    "text": "toolbox be simpler if I just had one screwdriver well actually it would be simpler right it' be easier to choose",
    "start": "1049080",
    "end": "1054960"
  },
  {
    "text": "which screwdriver I'm going to use um but my life would not necessarily be simpler my life might be more complicated right because if I if I need",
    "start": "1054960",
    "end": "1061600"
  },
  {
    "text": "to have a screw uh if I have a screwing job that doesn't really fit my my one",
    "start": "1061600",
    "end": "1067640"
  },
  {
    "text": "screwdriver then it's uh you know hard my life is more complicated right so",
    "start": "1067640",
    "end": "1073520"
  },
  {
    "text": "it's okay to have some Rundy like this where each one is focused on a different task so like there's a bunch of ctions",
    "start": "1073520",
    "end": "1079200"
  },
  {
    "text": "in Scola but each one has different performance characteristics right um what you want",
    "start": "1079200",
    "end": "1084799"
  },
  {
    "text": "to avoid is this kind where you got a bunch of bunch of choic where all you",
    "start": "1084799",
    "end": "1090159"
  },
  {
    "text": "get is like I feel like a blue handle today so I think in scholar test um",
    "start": "1090159",
    "end": "1097000"
  },
  {
    "text": "there is there is a lot of choice uh the the one that's like this there's really only one thing I think is like this",
    "start": "1097000",
    "end": "1102799"
  },
  {
    "text": "which is should versus must so I think it was a mistake in retrospect to have both of those I really should have picked one um but uh there is uh like",
    "start": "1102799",
    "end": "1110640"
  },
  {
    "text": "several style traits about about that many style traits to choose from they are actually each on focused on a",
    "start": "1110640",
    "end": "1115799"
  },
  {
    "text": "different uh job but what was what I learned that I made a the mistake I made was in explaining them I didn't really",
    "start": "1115799",
    "end": "1122520"
  },
  {
    "text": "summarize what each one was for so it was hard for people to figure out what they were for without reading all the the details um so if you do have",
    "start": "1122520",
    "end": "1130760"
  },
  {
    "text": "redundancy like this you should you should try to make it easy for people to figure out which one they need because a screwdriver I can just look at and",
    "start": "1130760",
    "end": "1136320"
  },
  {
    "text": "figure out which one I need right but um suet for funspec who knows what that means right so I added these little call",
    "start": "1136320",
    "end": "1142039"
  },
  {
    "text": "outs at the top of the Java doc or the scholar doc sorry um you know it says just real quick what each one is for",
    "start": "1142039",
    "end": "1149200"
  },
  {
    "text": "right and then I also added a table in the user guide that s of gives you a summary right so there's there's a table",
    "start": "1149200",
    "end": "1155440"
  },
  {
    "text": "in the scholar book and online that shows all the different collection types and what their performance characteristics are that helps people",
    "start": "1155440",
    "end": "1160679"
  },
  {
    "text": "pick um okay um all right so another thing that",
    "start": "1160679",
    "end": "1168840"
  },
  {
    "start": "1166000",
    "end": "1268000"
  },
  {
    "text": "useful for people is if you if things are consistent right so if they they're used to doing it this way and they've",
    "start": "1168840",
    "end": "1173880"
  },
  {
    "text": "learned to do it this way over here it should work that way over here and",
    "start": "1173880",
    "end": "1181679"
  },
  {
    "text": "um I have a phone call that's this is a really good time I should answer it should I no um I was hearing this",
    "start": "1181679",
    "end": "1187880"
  },
  {
    "text": "buzzing noise like what the heck is I was thinking somebody's phone's ringing I at least I had it on uh on Buzz but it",
    "start": "1187880",
    "end": "1195360"
  },
  {
    "text": "is somewhat distracting uh okay so um basically consistency so when I show you",
    "start": "1195360",
    "end": "1201000"
  },
  {
    "text": "the example of a mistake I made which was not my fault but I made this mistake so in in Scola set if you just say set",
    "start": "1201000",
    "end": "1208679"
  },
  {
    "text": "you get an immutable set if you just say map you get an immutable map but if you say seek you get a general one that",
    "start": "1208679",
    "end": "1215960"
  },
  {
    "text": "could be mutable or immutable and and at one point I wanted to change in 2.0 in",
    "start": "1215960",
    "end": "1221200"
  },
  {
    "text": "in 1.0 this was back in 2007 2008 and list was the rage right and so now",
    "start": "1221200",
    "end": "1226440"
  },
  {
    "text": "Vector is the New Black right so I thought it was wrong to have list being returned because uh because it's easy to",
    "start": "1226440",
    "end": "1235559"
  },
  {
    "text": "to actually uh use it in an inefficient way and I talked to Josh shth about it and he say and I didn't want to return",
    "start": "1235559",
    "end": "1242080"
  },
  {
    "text": "Vector I thought that was too specific he said you should return immutable index seek and I agreed right so that was my plan so what did I write in my",
    "start": "1242080",
    "end": "1248200"
  },
  {
    "text": "code I wrote index seek because doesn't that mean immutable index seek so actually released that in a milestone",
    "start": "1248200",
    "end": "1253679"
  },
  {
    "text": "release so I screwed that up and it's not a big deal but um I found out and I changed it but that because of that and",
    "start": "1253679",
    "end": "1259720"
  },
  {
    "text": "there's actually good reasons that it's like that but because that's inconsistent people will screw that up",
    "start": "1259720",
    "end": "1265280"
  },
  {
    "text": "um so you got to try to Stamp Out the inconsistency um so symbolic operators I",
    "start": "1265280",
    "end": "1270880"
  },
  {
    "start": "1268000",
    "end": "1509000"
  },
  {
    "text": "think is uh probably um one of the most important ones that I",
    "start": "1270880",
    "end": "1277760"
  },
  {
    "text": "have to talk about today so the guideline is use simples when your users are already experts in them so I I think",
    "start": "1277760",
    "end": "1283640"
  },
  {
    "text": "this is an example of what they're good for so uh the first line of code is when",
    "start": "1283640",
    "end": "1288720"
  },
  {
    "text": "you use Java math big integer from Scola and you say a squ plus b s the second line is schola math big integer a s + b",
    "start": "1288720",
    "end": "1295360"
  },
  {
    "text": "s and the second line is better and the reason I think it's better is because we're all experts in those operators",
    "start": "1295360",
    "end": "1301600"
  },
  {
    "text": "those symbols right so that's why it's better um but what happens is that this",
    "start": "1301600",
    "end": "1308440"
  },
  {
    "text": "is they're just very tempting to use and so I think when I look around at libraries in the in the community um I",
    "start": "1308440",
    "end": "1314960"
  },
  {
    "text": "think that's sort of like the biggest uh crime or not crime but you the biggest problem with them is they overuse",
    "start": "1314960",
    "end": "1320559"
  },
  {
    "text": "symbols and I myself am guilty of it um so uh way back uh when uh I I was trying",
    "start": "1320559",
    "end": "1329799"
  },
  {
    "text": "what I wanted to do was get rid of um uh make it so you can write anything",
    "start": "1329799",
    "end": "1336400"
  },
  {
    "text": "in a specification so if if uh Eric torbar who does Specs 2 he had the same goal so he and he and I did the same",
    "start": "1336400",
    "end": "1343000"
  },
  {
    "text": "thing we both made a bunch of non-obvious operators uh that you connect text with",
    "start": "1343000",
    "end": "1349159"
  },
  {
    "text": "right so I did this back in 2007 or8 and what it the way it worked is I put two",
    "start": "1349159",
    "end": "1355640"
  },
  {
    "text": "dashes after a stack and that means I'm opening a scope and I'm going to be talking about a stack and then one dash",
    "start": "1355640",
    "end": "1361320"
  },
  {
    "text": "after another string that means I'm introducing a test right or an example and um I actually put that in the you",
    "start": "1361320",
    "end": "1369760"
  },
  {
    "text": "know checked it in and I was going to do it then I realized later that probably is a bad idea but the problem is is I",
    "start": "1369760",
    "end": "1375039"
  },
  {
    "text": "had actually sent the uh the programming and scolar book to the printer in the meantime and it had one of these",
    "start": "1375039",
    "end": "1380799"
  },
  {
    "text": "examples in it so one of our goals was that every pie of code in that book would compile right so I was like oh man",
    "start": "1380799",
    "end": "1386039"
  },
  {
    "text": "I have to release this so I released it in 094 deprecated already and and I said",
    "start": "1386039",
    "end": "1392039"
  },
  {
    "text": "don't use this and in 095 I removed it right but the problem is is just just",
    "start": "1392039",
    "end": "1397760"
  },
  {
    "text": "too cryptic right I mean it's really going to be confusing what dash dash means and what single Dash means and it doesn't look like it so a couple years",
    "start": "1397760",
    "end": "1403960"
  },
  {
    "text": "later I did actually solve it by using in to introduce the test um so that's",
    "start": "1403960",
    "end": "1409080"
  },
  {
    "text": "consistent with word spec and flat spec and and specs one and specs two so everybody's used to seeing that to",
    "start": "1409080",
    "end": "1414440"
  },
  {
    "text": "introduce a test and then I can just use one dash up there and that's a non-obvious operator indeed but it I",
    "start": "1414440",
    "end": "1421440"
  },
  {
    "text": "think is guessable from the context right and when there's just one of them I think it works so",
    "start": "1421440",
    "end": "1427000"
  },
  {
    "text": "um so another thing that I wanted to talk about is that what sometimes people will do is when they make a non-obvious",
    "start": "1427000",
    "end": "1432880"
  },
  {
    "text": "operator they say well I know I'll make a word that's a an alternate that's more verbose but spells out what it is so",
    "start": "1432880",
    "end": "1439080"
  },
  {
    "text": "people have a choice right I think the problem with that is it's the writer that has a choice and the reader doesn't have a choice right so if you use SL",
    "start": "1439080",
    "end": "1446279"
  },
  {
    "text": "colon then I have to read that and remember what that means so to to so I don't think that actually is a good way",
    "start": "1446279",
    "end": "1452080"
  },
  {
    "text": "to do it and I'm I'm going to try to illustrate that with this so This Is A and B are ins I can now in in Scala 2.10",
    "start": "1452080",
    "end": "1458960"
  },
  {
    "text": "say a St B plus b St B A St a plus b start a to say A squ Plus b^ s but I",
    "start": "1458960",
    "end": "1465559"
  },
  {
    "text": "don't have a way to do it with words right should we add that in Scola 21 so",
    "start": "1465559",
    "end": "1471039"
  },
  {
    "text": "that people have a choice right they can either use the operator the symbols or if they don't like those they can use the word right",
    "start": "1471039",
    "end": "1477799"
  },
  {
    "text": "that seems pretty stupid um clearly the first one's better because we're already",
    "start": "1477799",
    "end": "1482960"
  },
  {
    "text": "experts so in that kind of situation you should use a symbol and not have a word otherwise maybe you should word use a",
    "start": "1482960",
    "end": "1488799"
  },
  {
    "text": "word and not have a symbol right um so the only other thing I would say about that is one of the reasons people use",
    "start": "1488799",
    "end": "1494960"
  },
  {
    "text": "symbols is to get rid of parentheses and and I like to get rid of parentheses too um but I think most users who are in a",
    "start": "1494960",
    "end": "1501520"
  },
  {
    "text": "hurry would rather have some parentheses around code that they they can actually guess what it means than no parentheses around code that's cryptic that they",
    "start": "1501520",
    "end": "1507520"
  },
  {
    "text": "have to look up what it means okay so the last one is minimize the magic and uh",
    "start": "1507520",
    "end": "1513640"
  },
  {
    "start": "1509000",
    "end": "1529000"
  },
  {
    "text": "the compared to like Java Scola gives you not just a magic wand it's like a magic baseball bat I mean it's you can",
    "start": "1513640",
    "end": "1520520"
  },
  {
    "text": "really slather on a lot of magic and uh I think definitely you should use",
    "start": "1520520",
    "end": "1526200"
  },
  {
    "text": "sufficient magic to to uh um to sort of make your users lives",
    "start": "1526200",
    "end": "1531720"
  },
  {
    "start": "1529000",
    "end": "1913000"
  },
  {
    "text": "better but then you got to stop because um I think the more magic that's in there that can actually made code harder",
    "start": "1531720",
    "end": "1536799"
  },
  {
    "text": "to reason about and also uh makes code slower to compile so I wanted to give you guys since this is a very touchy",
    "start": "1536799",
    "end": "1542520"
  },
  {
    "text": "feely talk I want to give you something that actually you can measure um so what uh we've been doing is measuring uh",
    "start": "1542520",
    "end": "1548200"
  },
  {
    "text": "compile time of different kinds of magic um so I'm going to show you a few",
    "start": "1548200",
    "end": "1554360"
  },
  {
    "text": "things of what we did and this is a a GitHub project called compile time that I actually want to look at tomorrow if",
    "start": "1554360",
    "end": "1559399"
  },
  {
    "text": "some people are interested it's uh it's basically a bunch of scripts that will generate different kinds of tests and",
    "start": "1559399",
    "end": "1565360"
  },
  {
    "text": "different kinds of styles and then just compile them and measure it measure compile time and then we do it over and",
    "start": "1565360",
    "end": "1571200"
  },
  {
    "text": "over over and you can graph it so the this first one is going to show the difference between assertions and matchers and matchers are more magical",
    "start": "1571200",
    "end": "1577960"
  },
  {
    "text": "than assertions which one compiles faster right and all it does is say a scol can increment one it says assert 1+",
    "start": "1577960",
    "end": "1583600"
  },
  {
    "text": "1al 2 scalon increment 2 assert 2 plus 1 equal 3 and it goes all the way down down to 100 than this one um and then",
    "start": "1583600",
    "end": "1591520"
  },
  {
    "text": "there's one where I mix in should matchers and I just do the same thing with matchers and then there's one where I import should matches right so uh when",
    "start": "1591520",
    "end": "1601760"
  },
  {
    "text": "you run that one it looks like this um what you can see here is like this is uh",
    "start": "1601760",
    "end": "1608520"
  },
  {
    "text": "this is like 10 tests 20 tests 30 tests in the file this is uh this one goes up to a thousand tests in one test class",
    "start": "1608520",
    "end": "1615039"
  },
  {
    "text": "just so you can kind of see what it does it's very consistently the assertions compiles faster than matchers and that's",
    "start": "1615039",
    "end": "1621399"
  },
  {
    "text": "a difference the difference there is how many implicits are in scope um this uh is also shows that it's",
    "start": "1621399",
    "end": "1630760"
  },
  {
    "text": "a 0 2 second Improvement if you import matches rather than mixing in so there",
    "start": "1630760",
    "end": "1636679"
  },
  {
    "text": "there is a cost of mixing in a trait because the scolar compiler has to stick a bunch of methods in that trait right",
    "start": "1636679",
    "end": "1642279"
  },
  {
    "text": "and it kind of uh depends on how many methods it has to do that with but um so what the reason we actually got",
    "start": "1642279",
    "end": "1649159"
  },
  {
    "text": "started on this was because I'd heard people complaining about uh specs 2 compiled time and and I wanted to",
    "start": "1649159",
    "end": "1656399"
  },
  {
    "text": "understand what the problem was and so this one actually Compares uh junit",
    "start": "1656399",
    "end": "1661799"
  },
  {
    "text": "here's junit it says um and J doesn't extend anything so you say test test",
    "start": "1661799",
    "end": "1667919"
  },
  {
    "text": "test um there's a test in G1 same kind of thing um and this is the fastest",
    "start": "1667919",
    "end": "1673159"
  },
  {
    "text": "Scola test that I can get um it's it's extends trait spec uh and tests are methods that you",
    "start": "1673159",
    "end": "1679799"
  },
  {
    "text": "use uh this little backtick notation and and it's a me test method if it has a space in it um but I'm using an",
    "start": "1679799",
    "end": "1685679"
  },
  {
    "text": "assertion there because that's fast it's the fastest I could get specs two to go um it it they don't have assertions and",
    "start": "1685679",
    "end": "1692000"
  },
  {
    "text": "he doesn't have test methods so um this is actually how it comes out if you look at this guy this is a thousand test one",
    "start": "1692000",
    "end": "1698120"
  },
  {
    "text": "test class junit is the fastest test and G is the second fastest it's almost the same um scal test spec is actually right",
    "start": "1698120",
    "end": "1705240"
  },
  {
    "text": "here and it is a half a second slower and I'm going to show you the only difference",
    "start": "1705240",
    "end": "1711200"
  },
  {
    "text": "is uh where is that one fastest scst is this thing right",
    "start": "1711200",
    "end": "1716880"
  },
  {
    "text": "here is that I'm extending spec um whereas the junit one doesn't extend anything so what's one of the things I",
    "start": "1716880",
    "end": "1722679"
  },
  {
    "text": "want to try to figure out uh or maybe get some help tomorrow with is why what is the compiler doing that",
    "start": "1722679",
    "end": "1728880"
  },
  {
    "text": "costs a half a second just to expend a class um this the specs 2 one is is slower",
    "start": "1728880",
    "end": "1735799"
  },
  {
    "text": "because it has more implicits and more B name so every test is a by name so every Lambda has a a uh a cost compil time",
    "start": "1735799",
    "end": "1744360"
  },
  {
    "text": "cost so this one is actually like seven times slower than junit test and G in this fast Scola test whoop so",
    "start": "1744360",
    "end": "1752440"
  },
  {
    "text": "um what the third one I want to show is is is uh you can what I try to do is",
    "start": "1752440",
    "end": "1758519"
  },
  {
    "text": "actually isolate the differences so this one here isn't very informative because it's got a bunch of differences so what",
    "start": "1758519",
    "end": "1763840"
  },
  {
    "text": "you can do with this guy this one is there's 100 classes in a directory",
    "start": "1763840",
    "end": "1768960"
  },
  {
    "text": "and each one is a test class and they look the same um they just have a different class name um here's where",
    "start": "1768960",
    "end": "1774679"
  },
  {
    "text": "there's 10 tests in each class here's where there's 20 tests in each class here's where there's 30 so this is actually 10 times 100 there's a thousand",
    "start": "1774679",
    "end": "1780360"
  },
  {
    "text": "tests here being compiled and all the way over here there's 100 tests in each of 100 classes that's 10,000 tests right",
    "start": "1780360",
    "end": "1786840"
  },
  {
    "text": "so the difference between this spec trait and the scholar test word spec trait um these both mix in matchers to",
    "start": "1786840",
    "end": "1794080"
  },
  {
    "text": "make it more of a a fair comparison to Specs 2 um the only difference between those two is the difference of there's",
    "start": "1794080",
    "end": "1800720"
  },
  {
    "text": "one uh test class per test I there's one um function per test there's one bind name per test in word speec whereas this",
    "start": "1800720",
    "end": "1807080"
  },
  {
    "text": "is methods so you can see test methods compile faster and you can see that down in how many files are generated um word",
    "start": "1807080",
    "end": "1813080"
  },
  {
    "text": "speec generates more the more test tests you have in it the more class files show up so it there",
    "start": "1813080",
    "end": "1820440"
  },
  {
    "text": "is a cost when you I mean you can actually see that it the the compile time follows the file class file",
    "start": "1820440",
    "end": "1826120"
  },
  {
    "text": "generation count but it's it's not uh writing the files it's actually doing something in memory uh that's causing",
    "start": "1826120",
    "end": "1833399"
  },
  {
    "text": "that but um this guy is so this is word spec so this is a I mean almost identical with this one and the",
    "start": "1833399",
    "end": "1839760"
  },
  {
    "text": "difference between these two is how many implicits are in scope so uh and how many bames are used so sex2 uses more",
    "start": "1839760",
    "end": "1845200"
  },
  {
    "text": "bames and more implicits so it just it compiles slower and then this one this is the the really interesting one it it",
    "start": "1845200",
    "end": "1850960"
  },
  {
    "text": "it goes out to lunch it goes way up here it doesn't scale it kind of goes exponential the compile time when you add a bunch of uh classes this is the",
    "start": "1850960",
    "end": "1857559"
  },
  {
    "text": "imut style in specs 2 and the reason is in this case is it's it's not the the",
    "start": "1857559",
    "end": "1864039"
  },
  {
    "text": "number of class files is linear but the size of them is not the size of the classile generated just starts going",
    "start": "1864039",
    "end": "1870720"
  },
  {
    "text": "exploding so if if you give it more memory you can get it to go farther but it actually takes that you know",
    "start": "1870720",
    "end": "1876159"
  },
  {
    "text": "exponentially longer so the the moral is so there there's a bunch of them here uh one of the things I learned by the way",
    "start": "1876159",
    "end": "1882720"
  },
  {
    "text": "is that test if you extend a class that compiles faster than if you extend a trait so I think actually",
    "start": "1882720",
    "end": "1888679"
  },
  {
    "text": "in scholar test I should change trait fun Suite to class fun suite and probably Eric should do the same thing",
    "start": "1888679",
    "end": "1894600"
  },
  {
    "text": "in specs too and so this is I did actually you can see the yellow and red one hopping down this one that's a",
    "start": "1894600",
    "end": "1900720"
  },
  {
    "text": "little faster is when you this extends specification and this is extending a",
    "start": "1900720",
    "end": "1906240"
  },
  {
    "text": "class that extends specifications so only have to pay the mixing cost once so anyway um I want to close with this uh",
    "start": "1906240",
    "end": "1914559"
  },
  {
    "text": "quote from dick Wall's father dick told me a story a couple weeks ago which fit in which uh he had run into uh walked",
    "start": "1914559",
    "end": "1921760"
  },
  {
    "text": "into the garage and his dad was uh using a hand drill to drill a hole in a piece of wood and he knew his dad had this",
    "start": "1921760",
    "end": "1927720"
  },
  {
    "text": "really fancy power drill um and so he asked his dad why are you drilling a hole with his hand drill when you have the fancy drill power drill and what he",
    "start": "1927720",
    "end": "1934279"
  },
  {
    "text": "said is remember what tools are for they're for solving problems not for finding problems to solve so I think uh",
    "start": "1934279",
    "end": "1939919"
  },
  {
    "text": "you know we're all early adopters and we're very excited about this language and we want to touch all the knobs and and twist them but um really I think the",
    "start": "1939919",
    "end": "1948159"
  },
  {
    "text": "uh what you want to do is minimize try to figure out how you can get the",
    "start": "1948159",
    "end": "1953320"
  },
  {
    "text": "maximum product user productivity out of the minimum magic okay that's it",
    "start": "1953320",
    "end": "1960398"
  },
  {
    "text": "[Music]",
    "start": "1963500",
    "end": "1971099"
  }
]