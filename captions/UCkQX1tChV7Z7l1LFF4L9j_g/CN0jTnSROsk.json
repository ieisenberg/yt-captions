[
  {
    "start": "0",
    "end": "268000"
  },
  {
    "text": "[Music]",
    "start": "2330",
    "end": "7819"
  },
  {
    "text": "so if you're like me then you're a Java developer who has never really liked",
    "start": "8000",
    "end": "14639"
  },
  {
    "text": "JavaScript it was just that weird quirky language that you had to use in order to",
    "start": "14639",
    "end": "20279"
  },
  {
    "text": "get stuff done in the browser I remember a few years ago probably 2005 like learning about",
    "start": "20279",
    "end": "28560"
  },
  {
    "text": "prototype and script Ulus and using a little bit of that inside my um web",
    "start": "28560",
    "end": "34360"
  },
  {
    "text": "pages and then back in 2008 uh 2009 when I was building the",
    "start": "34360",
    "end": "41320"
  },
  {
    "text": "original cloudfoundry decom we actually used Dojo as the toolkit to build the",
    "start": "41320",
    "end": "47039"
  },
  {
    "text": "the front end and I think it was pretty much you know it' be fair to say that whenever we said the words Dojo or um",
    "start": "47039",
    "end": "53840"
  },
  {
    "text": "JavaScript they were preceded by a by words that I can't actually use today we",
    "start": "53840",
    "end": "60160"
  },
  {
    "text": "didn't have much fun using them so it was sort of this Java thing the JavaScript thing was this sort of weird",
    "start": "60160",
    "end": "66320"
  },
  {
    "text": "language that we you know my my colleagues and myself we never really got into but then over the past year you",
    "start": "66320",
    "end": "74560"
  },
  {
    "text": "know I started playing around with this server side JavaScript technology node.js and even with that I thought",
    "start": "74560",
    "end": "81520"
  },
  {
    "text": "server side JavaScript was kind of a silly idea given that there's so many good choices available on the server but",
    "start": "81520",
    "end": "88960"
  },
  {
    "text": "strangely over the the past year I've developed somewhat of an appreciation for the technology it definitely has its",
    "start": "88960",
    "end": "95759"
  },
  {
    "text": "pros it also has quite a few cons as well and so my goal over the course of the next hour is just to share with you",
    "start": "95759",
    "end": "102920"
  },
  {
    "text": "my experiences not as someone who's a no JS um expert because I'm I'm really just",
    "start": "102920",
    "end": "110200"
  },
  {
    "text": "a beginner with this technology but really as someone who's coming from the jvm world who's really into Scala but",
    "start": "110200",
    "end": "117479"
  },
  {
    "text": "has also started to develop and appreciate ation for nodejs so before I get into that a",
    "start": "117479",
    "end": "124039"
  },
  {
    "text": "little bit about me so I actually grew up in England and then moved to the San Francisco Bay Area 23 years ago I got my",
    "start": "124039",
    "end": "132360"
  },
  {
    "text": "start programming in lisp back in the late 80s lisp of course being one of",
    "start": "132360",
    "end": "137879"
  },
  {
    "text": "those very early Dynamic functional and object oriented languages which you know",
    "start": "137879",
    "end": "144120"
  },
  {
    "text": "the mainstream World took quite had features that took quite a a while to become mainstream and then eventually I",
    "start": "144120",
    "end": "151000"
  },
  {
    "text": "ended up programming in Java and back in 2005 I wrote the book pojo's in action",
    "start": "151000",
    "end": "157120"
  },
  {
    "text": "which is all about how to build applications with spring and hibernate which back then were those radically new",
    "start": "157120",
    "end": "163959"
  },
  {
    "text": "technologies that were Prett you know changing the Java world today we pretty",
    "start": "163959",
    "end": "169760"
  },
  {
    "text": "much take them for granted and then back in 2007 I started playing around with this",
    "start": "169760",
    "end": "177120"
  },
  {
    "text": "obscure Little Thing Called Amazon EC too no one had really ever heard of it",
    "start": "177120",
    "end": "182800"
  },
  {
    "text": "just an evangelist came and spoke at my local Java users group and blew my mind this notion that you could rent servers",
    "start": "182800",
    "end": "189519"
  },
  {
    "text": "by the hour and just pay 10 back then 10 cents an hour per server and that got me",
    "start": "189519",
    "end": "195360"
  },
  {
    "text": "interested in cloud computing and led to my startup Cloud Foundry which was then acquired by Spring Source shortly before",
    "start": "195360",
    "end": "203239"
  },
  {
    "text": "spring Source was acquired by VMware and so today I'm sort of part of all of that I'm a develop Advocate and I",
    "start": "203239",
    "end": "211159"
  },
  {
    "text": "just sort of travel around give talks on architecture give talks on cloud computing and so on so here's the agenda",
    "start": "211159",
    "end": "219760"
  },
  {
    "text": "going to spend a whole chunk of time giving an overview of node.js look at the three main components of node.js and",
    "start": "219760",
    "end": "227920"
  },
  {
    "text": "look at the good parts and look at the bad parts and then I'm going to talk about what I think is a really",
    "start": "227920",
    "end": "234000"
  },
  {
    "text": "interesting use case for node.js using it as a frontend server sort of a a",
    "start": "234000",
    "end": "239959"
  },
  {
    "text": "mediator between the browser world and between the nice enterpris world that's written in languages that I much prefer",
    "start": "239959",
    "end": "247680"
  },
  {
    "text": "like Java and scalar and so on and then I'm going to finish up by talking about promises which is the JavaScript",
    "start": "247680",
    "end": "254439"
  },
  {
    "text": "community's term for futures which are a really nice concurrency abstraction for",
    "start": "254439",
    "end": "260600"
  },
  {
    "text": "simplifying the asynchronous code that you have to write when you when you're programming um with JavaScript and with",
    "start": "260600",
    "end": "267680"
  },
  {
    "text": "node okay so diving in so sort of first question is well what is node so node is a platform it's built on the Google",
    "start": "267680",
    "end": "275680"
  },
  {
    "start": "268000",
    "end": "268000"
  },
  {
    "text": "Chrome V8 JavaScript engine and its whole goal is to let you write Network",
    "start": "275680",
    "end": "281080"
  },
  {
    "text": "applications sort of these so-called dirty apps data intensive realtime applications which are really",
    "start": "281080",
    "end": "287479"
  },
  {
    "text": "applications that don't actually do anything other than just push bites around on the network or on the file",
    "start": "287479",
    "end": "294199"
  },
  {
    "text": "system and a distinguishing characteristic of it is that you write your code in this a synchronous",
    "start": "294199",
    "end": "300280"
  },
  {
    "text": "non-blocking style which has the benefit of being super scalable so node gets a lot of buzz but",
    "start": "300280",
    "end": "308759"
  },
  {
    "text": "it turns out that the community is actually quite small when you compare it with a more you know more mature um",
    "start": "308759",
    "end": "315800"
  },
  {
    "text": "Community such as the spring framework so you can see that node the line at the bottom is kind of growing but it's a lot",
    "start": "315800",
    "end": "322880"
  },
  {
    "text": "smaller than um than the spring framework Community though interestingly the community is very very big you can",
    "start": "322880",
    "end": "330000"
  },
  {
    "text": "see that like the number of downloads from the equivalent of the maven repo is",
    "start": "330000",
    "end": "336639"
  },
  {
    "text": "like 2 million a day though it's that's not exactly a sort of Apples to Apples",
    "start": "336639",
    "end": "342000"
  },
  {
    "text": "comparison but there's like a lot of a lot of activity within that community so",
    "start": "342000",
    "end": "347479"
  },
  {
    "text": "here's an examp here's an example node program that I just copied off the",
    "start": "347479",
    "end": "352520"
  },
  {
    "text": "nodejs website so it's a simple Hello World server so it sets up an HTTP",
    "start": "352520",
    "end": "358800"
  },
  {
    "text": "server that responds to every request with the words hello world so you know",
    "start": "358800",
    "end": "364360"
  },
  {
    "text": "step one you can see that it's loading the HTTP module so we need to do H we need an HTTP server so we then go and",
    "start": "364360",
    "end": "371800"
  },
  {
    "text": "create one and the argument to the create server function is a is the is",
    "start": "371800",
    "end": "378599"
  },
  {
    "text": "the request Handler that takes the that gets the request and the response as arguments and then just writes 200 and",
    "start": "378599",
    "end": "386240"
  },
  {
    "text": "the content type and writes hello world and we're done and then cool do listen on that saying telling it to listen on",
    "start": "386240",
    "end": "392960"
  },
  {
    "text": "Port 1337 so you know there's a really simple piece of code sort of you know no",
    "start": "392960",
    "end": "398240"
  },
  {
    "text": "ceremony you just kind of could edit that create that with VI put it in a file and you just run it and you have",
    "start": "398240",
    "end": "405400"
  },
  {
    "text": "this Mini apppp Server which you know if you were to do that in Java it would sort of take kind",
    "start": "405400",
    "end": "412240"
  },
  {
    "text": "of a lot more code to do that so that that's just the basic hello world so if",
    "start": "412240",
    "end": "417599"
  },
  {
    "text": "you actually look at node it's really comprised at least in my opinion of three main parts there's JavaScript the",
    "start": "417599",
    "end": "424800"
  },
  {
    "text": "language there's the reactor pattern that's the asynchronous event driven",
    "start": "424800",
    "end": "430199"
  },
  {
    "text": "programming model that it provides and then there's this really really interesting module system and there's",
    "start": "430199",
    "end": "435879"
  },
  {
    "text": "just thousands tens of thousands of publicly available modules so I just kind of want to talk about each one of",
    "start": "435879",
    "end": "442280"
  },
  {
    "text": "these components in turn kind of looking at the good parts and looking at the bad parts so I want to start off by talking",
    "start": "442280",
    "end": "449840"
  },
  {
    "text": "about JavaScript so first off who here uses JavaScript on a regular basis",
    "start": "449840",
    "end": "455360"
  },
  {
    "text": "anyone anyone like it yeah okay so I apologize for any you",
    "start": "455360",
    "end": "462400"
  },
  {
    "text": "know anything I say that might cause offense um okay so JavaScript so you",
    "start": "462400",
    "end": "469400"
  },
  {
    "start": "465000",
    "end": "465000"
  },
  {
    "text": "know first thing to note JavaScript is a dynamic language so dynamic in the sense",
    "start": "469400",
    "end": "474840"
  },
  {
    "text": "that types are associated with values and not variables and you can do things like to find new program elements at",
    "start": "474840",
    "end": "481479"
  },
  {
    "text": "runtime so you know it's in the same vein as Ruby or groovy or lisp or so on",
    "start": "481479",
    "end": "487599"
  },
  {
    "text": "but where it where it ends up being quite different in my my my opinion is that it's weakly typed you know you can",
    "start": "487599",
    "end": "495120"
  },
  {
    "text": "do things in JavaScript that you really can't do in other languages at least normally like leave out arguments when",
    "start": "495120",
    "end": "501759"
  },
  {
    "text": "you call methods or access non-existent object properties so it's all kind of",
    "start": "501759",
    "end": "507560"
  },
  {
    "text": "loose you know you don't get you don't get no such property exceptions thrown",
    "start": "507560",
    "end": "513760"
  },
  {
    "text": "when you try and access a non-exist non-existent property and you also have these weird implicit conversions that",
    "start": "513760",
    "end": "520000"
  },
  {
    "text": "mean that 99 is actually equal to the string 99 and it's notion of what's true",
    "start": "520000",
    "end": "526160"
  },
  {
    "text": "and false in terms of a Boolean value is quite quite weak as well so it's this",
    "start": "526160",
    "end": "531399"
  },
  {
    "start": "531000",
    "end": "531000"
  },
  {
    "text": "sort of strange weakly type language it's also",
    "start": "531399",
    "end": "536680"
  },
  {
    "text": "objectoriented um in an interesting way so an object is a collection of key",
    "start": "536680",
    "end": "541920"
  },
  {
    "text": "value pairs or properties so we can we can create one here um you know we can access we you",
    "start": "541920",
    "end": "549600"
  },
  {
    "text": "know we create an object we assign it to Fred we can go fred. name which is gives",
    "start": "549600",
    "end": "554880"
  },
  {
    "text": "us back their name we can also go fred. Ag and that just comes back as undefined once again that's because it's",
    "start": "554880",
    "end": "562000"
  },
  {
    "text": "weekly typed we can then give Fred a value that actually just adds a new",
    "start": "562000",
    "end": "567640"
  },
  {
    "text": "property to to that object we didn't have to Define it up front or anything like that and then if we want we can",
    "start": "567640",
    "end": "574240"
  },
  {
    "text": "delete a property so it's sort of very flexible very kind of loose JavaScript",
    "start": "574240",
    "end": "580760"
  },
  {
    "start": "579000",
    "end": "579000"
  },
  {
    "text": "kind of sort of has the notion of classes as well um so if you look at this code well",
    "start": "580760",
    "end": "587519"
  },
  {
    "text": "this is how you define a class so you have a f you have a Constructor function with a capitalized first name and then",
    "start": "587519",
    "end": "595000"
  },
  {
    "text": "you can go you know which is kind of weird right and then you can define a method by going um function name.",
    "start": "595000",
    "end": "602560"
  },
  {
    "text": "prototype. method name which is sort of kind of this really weird thing but then",
    "start": "602560",
    "end": "608160"
  },
  {
    "text": "it gets familiar you can create an instance of an object by going new",
    "start": "608160",
    "end": "613200"
  },
  {
    "text": "person name of the Constructor function and then passing in some arguments and then you can invoke a method in it sort",
    "start": "613200",
    "end": "620320"
  },
  {
    "text": "of usual kind of way but what's really interesting about this is that the reason it looks weird is because it it",
    "start": "620320",
    "end": "627519"
  },
  {
    "text": "was trying to appear to be like Java when in fact it actually isn't anything",
    "start": "627519",
    "end": "632720"
  },
  {
    "text": "like Java under the covers it's because Java JavaScript is not a pro is not a",
    "start": "632720",
    "end": "638240"
  },
  {
    "text": "class-based language it actually does not have classes in the same in the sense that Java does you know if you go",
    "start": "638240",
    "end": "645519"
  },
  {
    "text": "back to the beginning of time there's sort of two main objectoriented",
    "start": "645519",
    "end": "651040"
  },
  {
    "text": "paradigms you have the class-based approach which is kind of what we know and love but there's this alternative",
    "start": "651040",
    "end": "657680"
  },
  {
    "start": "656000",
    "end": "656000"
  },
  {
    "text": "model so known as the prototypal approach so whereas in the class-based",
    "start": "657680",
    "end": "663040"
  },
  {
    "text": "approach you have classes that Define the structure and behavior of objects in a prototypical model you don't have any",
    "start": "663040",
    "end": "671160"
  },
  {
    "text": "distinction between classes and objects you just have objects and one object can",
    "start": "671160",
    "end": "676360"
  },
  {
    "text": "inherit from another object which is known as its prototype so it's sort of a kind of this",
    "start": "676360",
    "end": "683399"
  },
  {
    "text": "very flat model and the proponents of it say that it actually has some advantages",
    "start": "683399",
    "end": "689320"
  },
  {
    "text": "even though I mean I think it's a very hasn't really been exp even though it's a very old model I remember reading",
    "start": "689320",
    "end": "694920"
  },
  {
    "text": "papers about this back 20 plus years ago it's never actually sort of caught on or",
    "start": "694920",
    "end": "701000"
  },
  {
    "text": "been fully embraced so in this example we've got two objects X and Y and X has",
    "start": "701000",
    "end": "706920"
  },
  {
    "text": "properties A and B and then y actually inherits from X and it and it overrides",
    "start": "706920",
    "end": "714120"
  },
  {
    "text": "the pro the property a so it actually inherits B from from its prototype type",
    "start": "714120",
    "end": "719760"
  },
  {
    "text": "but then defines its own value for property a and that's actually what's happening when you define object when",
    "start": "719760",
    "end": "726800"
  },
  {
    "text": "you define sort of these class-like things is this an instantiate objects",
    "start": "726800",
    "end": "732000"
  },
  {
    "text": "with new this is what's happening under under the covers so if you to access it sort of look at it kind of in the you",
    "start": "732000",
    "end": "739639"
  },
  {
    "start": "734000",
    "end": "734000"
  },
  {
    "text": "know in in a sort of a pure prototypal way you know first off we're going to Define this prototype person object so",
    "start": "739639",
    "end": "747120"
  },
  {
    "text": "we create an empty object and a assign it to the variable person we can then Define a method called say hello which",
    "start": "747120",
    "end": "754839"
  },
  {
    "text": "just prints out hello and then name except you can notice that name is not actually defined here it actually has to",
    "start": "754839",
    "end": "761360"
  },
  {
    "text": "be defined by one of the objects that inherits from this prototype and then we",
    "start": "761360",
    "end": "766839"
  },
  {
    "text": "can go and create some some objects so we to do that we use the object.create method so we're not actually using new",
    "start": "766839",
    "end": "774399"
  },
  {
    "text": "we're sort of doing it in the more pure prototypal fashion an object create",
    "start": "774399",
    "end": "779800"
  },
  {
    "text": "takes two two arguments the first is the Prototype that we want this new object",
    "start": "779800",
    "end": "784920"
  },
  {
    "text": "to inherit from and in this case it's person and then we can def then we then",
    "start": "784920",
    "end": "790360"
  },
  {
    "text": "we can supply values for some properties so in this case we have a one object",
    "start": "790360",
    "end": "795800"
  },
  {
    "text": "whose name is Chris and another object whose name is Sarah and then we can go object. say hello and the right thing",
    "start": "795800",
    "end": "803320"
  },
  {
    "text": "gets printed out so it's sort of you know so it's actually you know this is",
    "start": "803320",
    "end": "808639"
  },
  {
    "text": "more sort sort of Cl you know the kind of the right way of using JavaScript rather than pretending that we actually",
    "start": "808639",
    "end": "815079"
  },
  {
    "text": "have classes um and then we if we want because this is a dynamic language we",
    "start": "815079",
    "end": "821639"
  },
  {
    "text": "can actually at runtime just override the kind of give Chris its own",
    "start": "821639",
    "end": "827120"
  },
  {
    "text": "say hello method with totally different behavior and that actually overrides",
    "start": "827120",
    "end": "832279"
  },
  {
    "text": "what would otherwise be in be inherited from the Prototype so it's quite different from",
    "start": "832279",
    "end": "838560"
  },
  {
    "text": "java despite any kind of syntactic sugar that tries to make it familiar and and",
    "start": "838560",
    "end": "845399"
  },
  {
    "start": "845000",
    "end": "845000"
  },
  {
    "text": "kind of fails badly so JavaScript is also a functional language so you can",
    "start": "845399",
    "end": "850839"
  },
  {
    "text": "you can have function literals you can return them from methods and you can pass them as method arguments as well so",
    "start": "850839",
    "end": "858240"
  },
  {
    "text": "on this slide is an example of a of a make generator function that returns a function that's also a closure by the",
    "start": "858240",
    "end": "865440"
  },
  {
    "text": "way that then you can cool repeatedly to generate a sequence of values so the the The Returned closure",
    "start": "865440",
    "end": "873959"
  },
  {
    "text": "just repeatedly applies this next function which is passed in and in this case just adds one and keeps track of",
    "start": "873959",
    "end": "882079"
  },
  {
    "text": "this of the current value in in in a in a sort of local variable so it's",
    "start": "882079",
    "end": "887880"
  },
  {
    "text": "functional and it also actually supports partial function partial function application as",
    "start": "887880",
    "end": "894560"
  },
  {
    "start": "889000",
    "end": "889000"
  },
  {
    "text": "well so in this case join is a is from a module that's really for",
    "start": "894560",
    "end": "899880"
  },
  {
    "text": "constructing joining elements of together of file to make a file system path so you can think of it as taking a",
    "start": "899880",
    "end": "907120"
  },
  {
    "text": "a directory name and a file name and giving you the absolute path and it so",
    "start": "907120",
    "end": "912560"
  },
  {
    "text": "it takes at least two arguments and but what we can do because JavaScript supports partial function application is",
    "start": "912560",
    "end": "919759"
  },
  {
    "text": "partially apply it to just one argument so we're just applying it passing in X",
    "start": "919759",
    "end": "925639"
  },
  {
    "text": "and that gives us a new function that's called within X that we can then apply to other arguments and that's kind of a",
    "start": "925639",
    "end": "932480"
  },
  {
    "text": "nice trick and you you see the same kind of thing in other in other functional languages as well so we can sort of just",
    "start": "932480",
    "end": "938800"
  },
  {
    "text": "partially apply arguments and then Supply the rest of them later so okay so",
    "start": "938800",
    "end": "943880"
  },
  {
    "text": "it's this Dynamic object oriented prototypal um functional language so in",
    "start": "943880",
    "end": "950560"
  },
  {
    "text": "a way that's kind of nice that that if you really dig into it JavaScript was this language that was created in a",
    "start": "950560",
    "end": "956120"
  },
  {
    "text": "hurry and it tried to look like Java I mean it's even sort of named after Java",
    "start": "956120",
    "end": "961839"
  },
  {
    "text": "but fails very badly in behaving like Java because it really isn't you know",
    "start": "961839",
    "end": "966959"
  },
  {
    "text": "we've got sort of fake classes in there plus there's some truly horrible features like there's just a global name",
    "start": "966959",
    "end": "973399"
  },
  {
    "text": "space so there's no module system and then at a lower level there's just one",
    "start": "973399",
    "end": "978800"
  },
  {
    "text": "confusing feature after another like the scope of variables is confusing if you leave out even though it's a functional",
    "start": "978800",
    "end": "985360"
  },
  {
    "text": "language you still have to have a return statement there's no implicit return value which can you just get undefined",
    "start": "985360",
    "end": "992440"
  },
  {
    "text": "if you don't have a return statement the way you Define function literals is actually really verbose I mean function",
    "start": "992440",
    "end": "999199"
  },
  {
    "text": "is a really long word if you if you compare it with how you do the same thing in Scala it's pretty messy and",
    "start": "999199",
    "end": "1005519"
  },
  {
    "text": "there's a whole ton of confusing things about how this the this keyword behaves",
    "start": "1005519",
    "end": "1011079"
  },
  {
    "text": "it's actually dynamically scoped rather than lexically scoped so if you have a method that tries to use a an inner",
    "start": "1011079",
    "end": "1019639"
  },
  {
    "text": "function the value of this when the inner function is invoked is actually different than when the outer method is",
    "start": "1019639",
    "end": "1026480"
  },
  {
    "text": "invoked and it causes no source of program errors so it's really kind of a hideous language and it's got a few good",
    "start": "1026480",
    "end": "1033640"
  },
  {
    "text": "parts but then it's just a whole bunch of really nasty parts that you know you",
    "start": "1033640",
    "end": "1039038"
  },
  {
    "text": "could spend a whole talk going over so the problem with sort of have is that really because there's you know",
    "start": "1039039",
    "end": "1045798"
  },
  {
    "text": "JavaScript has been the only way of getting things done in the browser",
    "start": "1045799",
    "end": "1051360"
  },
  {
    "text": "because there for whatever reason no sort of viable alternative really",
    "start": "1051360",
    "end": "1056559"
  },
  {
    "text": "appeared right you know sort of flex came and went Sun tried to do something and failed ja you know Java didn't",
    "start": "1056559",
    "end": "1063240"
  },
  {
    "text": "really catch on in the browser so because of a whole bunch not because of the merits of JavaScript but because no",
    "start": "1063240",
    "end": "1069480"
  },
  {
    "text": "one else really succeeded was sort of stuck with this very weird language in",
    "start": "1069480",
    "end": "1074679"
  },
  {
    "text": "the in the browser you know which on the one hand okay well we can just sort of deal with that but then on the other",
    "start": "1074679",
    "end": "1080280"
  },
  {
    "text": "hand I mean there sort of people have started to accept the weirdness of java",
    "start": "1080280",
    "end": "1085640"
  },
  {
    "text": "um it's sort of being kind of normal so I like to think I mean know maybe this",
    "start": "1085640",
    "end": "1090960"
  },
  {
    "text": "is a little rude but I kind of think of it as the Stockholm syndrome um which came about when a bunch of people were",
    "start": "1090960",
    "end": "1097480"
  },
  {
    "text": "held hostage in a bank in in Stockholm for a number of days and they were kind of you know they ended up",
    "start": "1097480",
    "end": "1104640"
  },
  {
    "start": "1101000",
    "end": "1101000"
  },
  {
    "text": "identifying with their captors and actually defending them and I think they end end up not wanting to be",
    "start": "1104640",
    "end": "1110679"
  },
  {
    "text": "rescued and I kind of feel that there's a large element of that going on within the JavaScript Community apologies to",
    "start": "1110679",
    "end": "1117919"
  },
  {
    "text": "anyone who is offended by that but I but I think you know the human brain is very adaptable very very malleable and as a",
    "start": "1117919",
    "end": "1125600"
  },
  {
    "text": "result you can start to take JavaScript too seriously so you know so what what can",
    "start": "1125600",
    "end": "1131720"
  },
  {
    "text": "one do about it well I think Martin Fowler kind of I think it was a year ago put it really well you know he despars",
    "start": "1131720",
    "end": "1138320"
  },
  {
    "text": "that today in the 21st century after all the thought and all the effort that's gone into designing computer languages",
    "start": "1138320",
    "end": "1145360"
  },
  {
    "text": "we're stuck with this with this JavaScript language and so you know we really have",
    "start": "1145360",
    "end": "1151360"
  },
  {
    "text": "to work hard to actually do some kind of damage control and just try and sort of",
    "start": "1151360",
    "end": "1157480"
  },
  {
    "text": "you know minimize the impact and one strategy of course is just to use the good parts so you know Donald crockford",
    "start": "1157480",
    "end": "1164200"
  },
  {
    "text": "wrote that quite interesting book JavaScript the good parts on Define in a subset of the language that's quite good",
    "start": "1164200",
    "end": "1171799"
  },
  {
    "text": "he's also created JS lint that basically enforces a lot of those rules so I think",
    "start": "1171799",
    "end": "1177200"
  },
  {
    "text": "that's a very good strategy another approach is to actually use a better",
    "start": "1177200",
    "end": "1182240"
  },
  {
    "text": "language that then compiles to JavaScript so that it can run in the browser and there's quite a few of them",
    "start": "1182240",
    "end": "1188360"
  },
  {
    "text": "right so there's types typescript there's dot um there's also coffee",
    "start": "1188360",
    "end": "1194120"
  },
  {
    "start": "1193000",
    "end": "1193000"
  },
  {
    "text": "script um and you can see here's a coffee script example so it actually defines",
    "start": "1194120",
    "end": "1199159"
  },
  {
    "text": "classes and there's real classes in there with real methods and it's actually quite a lot more concise as",
    "start": "1199159",
    "end": "1206200"
  },
  {
    "text": "well and it's generally kind of it's sort of cleaned up this spe so so one you know there are actually other",
    "start": "1206200",
    "end": "1211880"
  },
  {
    "text": "languages that compile down to JavaScript as well so there's a few different things that we can do to make",
    "start": "1211880",
    "end": "1218120"
  },
  {
    "text": "sure that we sort of limit that you know we're stuck with JavaScript so you know what can we do to there a few things we",
    "start": "1218120",
    "end": "1224080"
  },
  {
    "text": "can do to minimize the damage so anyway so that that's mostly I think that's the most negative part of my talk is just",
    "start": "1224080",
    "end": "1230960"
  },
  {
    "text": "sort of bashing the language um so I want to move on and talk about the",
    "start": "1230960",
    "end": "1236080"
  },
  {
    "text": "reactor pattern which is the asynchronous non-blocking um model that that um node",
    "start": "1236080",
    "end": "1243000"
  },
  {
    "text": "uses for Io so the reactor pattern is actually very old it was defined by Doug",
    "start": "1243000",
    "end": "1248280"
  },
  {
    "start": "1244000",
    "end": "1244000"
  },
  {
    "text": "Schmidt back in 1995 back in the early days of the design pattern movement and",
    "start": "1248280",
    "end": "1254440"
  },
  {
    "text": "it's a pattern for writing scalable network servers and the the big idea here is is rather than using the",
    "start": "1254440",
    "end": "1260840"
  },
  {
    "text": "traditional model of having a a thread per request so like if you look at say",
    "start": "1260840",
    "end": "1266799"
  },
  {
    "text": "Tom Cat request comes in it gets allocated to a thread in the thread pool",
    "start": "1266799",
    "end": "1271880"
  },
  {
    "text": "you know which on the one hand is simple but then there's the over the overhead of context switching between all of",
    "start": "1271880",
    "end": "1277919"
  },
  {
    "text": "these different threads that seriously limit scalability so instead what the",
    "start": "1277919",
    "end": "1283080"
  },
  {
    "text": "reactor pattern is about is that you just have a single threaded event Loop so in other words one thread that waits",
    "start": "1283080",
    "end": "1290640"
  },
  {
    "text": "for it for an event to occur on a socket or a file descriptor and then dispatches",
    "start": "1290640",
    "end": "1296360"
  },
  {
    "text": "that event to all of the handlers that are interested in that event so when a",
    "start": "1296360",
    "end": "1301640"
  },
  {
    "text": "socket becomes ready for reading or becomes ready for writing you will call the the the interested event handler",
    "start": "1301640",
    "end": "1308640"
  },
  {
    "text": "which can then process that that event you know this is the structure so you",
    "start": "1308640",
    "end": "1315400"
  },
  {
    "start": "1312000",
    "end": "1312000"
  },
  {
    "text": "know this is how the original um patent was defined so there's an an initiation",
    "start": "1315400",
    "end": "1320919"
  },
  {
    "text": "dispatcher so that defines an interface for for registering event handlers each",
    "start": "1320919",
    "end": "1326799"
  },
  {
    "text": "event handler is interested in one particular handle a socket or a file",
    "start": "1326799",
    "end": "1332000"
  },
  {
    "text": "descriptor and it has a method called handle event that it gets cool to handle",
    "start": "1332000",
    "end": "1337159"
  },
  {
    "text": "the event and then there's an event Loop that just sits there waiting for events to occur on these handles and that's",
    "start": "1337159",
    "end": "1343919"
  },
  {
    "text": "usually that's handled by some low low you know the O OS level select or eole",
    "start": "1343919",
    "end": "1349159"
  },
  {
    "text": "or or the like and so when an event occurs on a handle the event the the",
    "start": "1349159",
    "end": "1354760"
  },
  {
    "text": "initiation dispatcher finds all of the interesting handles handlers and then",
    "start": "1354760",
    "end": "1360080"
  },
  {
    "text": "calls each one saying this event happened so it's a pretty straightforward pattern has some",
    "start": "1360080",
    "end": "1366919"
  },
  {
    "text": "benefits you know the event handlers are sort of insulated from the lower level concerns of like listening on handles",
    "start": "1366919",
    "end": "1373520"
  },
  {
    "start": "1367000",
    "end": "1367000"
  },
  {
    "text": "and and dispatching events it's actually quite efficient and scalable because there's no thread context switching",
    "start": "1373520",
    "end": "1380120"
  },
  {
    "text": "there's just one thread and you don't have the overhead of of switching between all these different OS threads",
    "start": "1380120",
    "end": "1386039"
  },
  {
    "text": "you don't have the memory overhead as well of the stack and so on and so forth and then it also gives you a simplified",
    "start": "1386039",
    "end": "1392880"
  },
  {
    "text": "concurrency model it's single threaded so you never have the risk of multiple threads accessing the same mutable state",
    "start": "1392880",
    "end": "1401960"
  },
  {
    "text": "so there's an argument that that's quite appealing as well trouble is there are some drawbacks so number one it's",
    "start": "1401960",
    "end": "1409360"
  },
  {
    "start": "1405000",
    "end": "1405000"
  },
  {
    "text": "it's a nonpreemptive model these event handlers cannot block or or can't take a",
    "start": "1409360",
    "end": "1415400"
  },
  {
    "text": "long time because that would mean that no other events can can hand can can can",
    "start": "1415400",
    "end": "1420720"
  },
  {
    "text": "be handled it also means that they have to work in a collaborative Cooperative fashion you know one faulty event",
    "start": "1420720",
    "end": "1428240"
  },
  {
    "text": "handler then that your entire server is down then another problem you run into",
    "start": "1428240",
    "end": "1433960"
  },
  {
    "text": "is that the the way that you've basically got an inverted flow of control so if you want to perform a",
    "start": "1433960",
    "end": "1439880"
  },
  {
    "text": "sequence of operations the the you you're sort of constantly having to go",
    "start": "1439880",
    "end": "1444919"
  },
  {
    "text": "back into the reactor wait for the next event then your application code gets run and so it's actually the code ends",
    "start": "1444919",
    "end": "1452279"
  },
  {
    "text": "up being quite difficult to debug and quite difficult to understand and I have",
    "start": "1452279",
    "end": "1458000"
  },
  {
    "text": "quite a bit to say about that in a minute so that that's kind of that that's the foundation for the um node",
    "start": "1458000",
    "end": "1465200"
  },
  {
    "text": "sort of event um processing structure and if you think about the the architecture of your node application at",
    "start": "1465200",
    "end": "1472480"
  },
  {
    "start": "1467000",
    "end": "1467000"
  },
  {
    "text": "the lowest level you've got the node event Loop basically implementing the reactor above that you have basic",
    "start": "1472480",
    "end": "1478600"
  },
  {
    "text": "components like networking and file system and so on and then above that you have higher level components like",
    "start": "1478600",
    "end": "1485440"
  },
  {
    "text": "database drivers HTTP um modules and so on and then above",
    "start": "1485440",
    "end": "1491000"
  },
  {
    "text": "that is your application code and at each level except for the bottommost",
    "start": "1491000",
    "end": "1497159"
  },
  {
    "text": "level the the code is listening is is basically waiting for events to occur at",
    "start": "1497159",
    "end": "1503440"
  },
  {
    "text": "a lower level and getting notified so the event Loop's going to notify the socket handling code that a socket's",
    "start": "1503440",
    "end": "1510360"
  },
  {
    "text": "ready for reading that's going to notify the um HTTP code that's going to start",
    "start": "1510360",
    "end": "1516919"
  },
  {
    "text": "reading the header of the request and then when it's got the header it's going to say call the application code saying",
    "start": "1516919",
    "end": "1523600"
  },
  {
    "text": "we've got a request and that's so that's sort of you got multiple levels of event notification going on and the way within",
    "start": "1523600",
    "end": "1531520"
  },
  {
    "text": "node you actually kind of process events there two different ways so one of them is to register a callback function so",
    "start": "1531520",
    "end": "1538919"
  },
  {
    "text": "you'll just get cooled when an event occurs and that's good for these onetime",
    "start": "1538919",
    "end": "1544279"
  },
  {
    "text": "events the other option is if you've got a recurring event like oh there's data to be read you can register this event",
    "start": "1544279",
    "end": "1551600"
  },
  {
    "text": "listener which will get Co potentially repeatedly so that's the",
    "start": "1551600",
    "end": "1557320"
  },
  {
    "text": "model you just having to write a lot of callback functions and event handlers in your",
    "start": "1557320",
    "end": "1562919"
  },
  {
    "text": "code so this is you know kind of here's an example so in node by convention an asynchronous function",
    "start": "1562919",
    "end": "1570440"
  },
  {
    "text": "takes a callback as the last argument so here we're actually statting a file you know find out whether it's a directory",
    "start": "1570440",
    "end": "1577360"
  },
  {
    "text": "or or a real file and it takes a callback and also by convention that",
    "start": "1577360",
    "end": "1582679"
  },
  {
    "text": "callback um the first argument to that callback is an error object so if an",
    "start": "1582679",
    "end": "1588679"
  },
  {
    "text": "error has occurred that that object will that value will be will will have it",
    "start": "1588679",
    "end": "1594720"
  },
  {
    "text": "well it will have a value which is some kind of error code and if it's undefined",
    "start": "1594720",
    "end": "1600600"
  },
  {
    "text": "then it's succeeded and in this case you can look the the Callback looks at the stat argument to see what kind of file",
    "start": "1600600",
    "end": "1607679"
  },
  {
    "text": "object and then there's also event listeners which as I said are good for these recurring events and there's an",
    "start": "1607679",
    "end": "1613679"
  },
  {
    "text": "event emitter class that you can use sort of basically as a base class so you can use it or you can extend it so a",
    "start": "1613679",
    "end": "1620559"
  },
  {
    "text": "large number of of objects that emit events use this event emit a class it",
    "start": "1620559",
    "end": "1626919"
  },
  {
    "text": "defines methods for registering event listeners so you can just say on event",
    "start": "1626919",
    "end": "1632399"
  },
  {
    "text": "name here's my listener function and then the code that needs to emit an",
    "start": "1632399",
    "end": "1637840"
  },
  {
    "text": "event calls emit with the event name and zero or more arguments that then get",
    "start": "1637840",
    "end": "1644240"
  },
  {
    "text": "passed to the event listener and so that that's that's kind of it so here's an example so here we're",
    "start": "1644240",
    "end": "1650600"
  },
  {
    "start": "1647000",
    "end": "1647000"
  },
  {
    "text": "reading a stream so we're creating a you know kind of like an input stream then I'm registering an event handler for the",
    "start": "1650600",
    "end": "1657399"
  },
  {
    "text": "open Event so that just says oh that gets coed with the file descriptor and",
    "start": "1657399",
    "end": "1662519"
  },
  {
    "text": "then I'm registering another event listener for the data event so that will get cooled when there's data so you can",
    "start": "1662519",
    "end": "1669679"
  },
  {
    "text": "imagine it gets cooled with chunks chunks of data so those are the two models and on the one hand this looks",
    "start": "1669679",
    "end": "1675640"
  },
  {
    "text": "quite simple right we just have event handlers just have cool backs and so on the trouble is is that you very quickly",
    "start": "1675640",
    "end": "1682200"
  },
  {
    "text": "in realistic applications that need to invoke lots of asynchronous services and",
    "start": "1682200",
    "end": "1688559"
  },
  {
    "text": "and kind of do fork and join style operations you very quickly end up in coolback",
    "start": "1688559",
    "end": "1694799"
  },
  {
    "text": "hell um and it's quite messy so here's an example so this is sort of a little",
    "start": "1694799",
    "end": "1700880"
  },
  {
    "text": "I've just kind of simplified it somewhat so imagine that we've got two functions times two that just takes an argument",
    "start": "1700880",
    "end": "1707760"
  },
  {
    "text": "multip IES it by two and plus three that takes an argument and adds three to it but to simulate an asynchronous",
    "start": "1707760",
    "end": "1714640"
  },
  {
    "text": "operation I'm actually using set timeout that only that only produces a value",
    "start": "1714640",
    "end": "1720399"
  },
  {
    "text": "after a 500 millisecond timeout so you could imagine you know this is sort of what a database if you you know try to",
    "start": "1720399",
    "end": "1727080"
  },
  {
    "text": "read from a file or try to access the database You' get eventually your coolback would get",
    "start": "1727080",
    "end": "1733440"
  },
  {
    "text": "invoked but then okay so then there's a scenario where we need to do plus three and then times two so we end up having",
    "start": "1733440",
    "end": "1740919"
  },
  {
    "text": "to write code that looks like this so we've got kind of cool backs within",
    "start": "1740919",
    "end": "1746200"
  },
  {
    "text": "coolback um down there so that that that's kind of pretty ugly and then even",
    "start": "1746200",
    "end": "1752039"
  },
  {
    "text": "worse is the scenario where we need to do it invoke a couple of asynchronous operations and then get the results from",
    "start": "1752039",
    "end": "1758960"
  },
  {
    "text": "both of them and then call a third asynchronous operations so sort of kind",
    "start": "1758960",
    "end": "1764000"
  },
  {
    "text": "of like a fork and then a join and you can see that you know if this was well up here is the synchronous version",
    "start": "1764000",
    "end": "1770799"
  },
  {
    "text": "simple right but here's like multiple lines of code to actually do all of that because you got to wait you know the",
    "start": "1770799",
    "end": "1777080"
  },
  {
    "text": "results can come back in in you know different order and you have to handle that scenario and so this is a you know",
    "start": "1777080",
    "end": "1784080"
  },
  {
    "text": "two trivial examples you can imagine that this you know more realistic code where you're calling lots of",
    "start": "1784080",
    "end": "1789600"
  },
  {
    "text": "asynchronous operations this gets pretty messy and to talking a little bit about ways that you can simplify that so then",
    "start": "1789600",
    "end": "1797480"
  },
  {
    "text": "another big problem is right so we're single threaded and that that means what",
    "start": "1797480",
    "end": "1802760"
  },
  {
    "text": "if we need to do a long running computation that's just going to block the event Loop and and no other requests",
    "start": "1802760",
    "end": "1809120"
  },
  {
    "text": "will get handled so what do you do so in order to do you know handle any long",
    "start": "1809120",
    "end": "1814760"
  },
  {
    "text": "running computational blocking IO you actually need to do that outside of the main event",
    "start": "1814760",
    "end": "1820720"
  },
  {
    "text": "Loop um and there's two options so one of them is you can use a community module that implements web worker",
    "start": "1820720",
    "end": "1828519"
  },
  {
    "text": "threads so kind of like implementing what you get in the browser so asynchronous background threads which I",
    "start": "1828519",
    "end": "1835200"
  },
  {
    "text": "guess is okay or you can use the built-in module that actually Forks off",
    "start": "1835200",
    "end": "1840679"
  },
  {
    "text": "a child process and that's kind of interesting because you could it it actually implements provides a messaging",
    "start": "1840679",
    "end": "1847679"
  },
  {
    "text": "API for the parent and child to send messages back and forth but you know and",
    "start": "1847679",
    "end": "1853039"
  },
  {
    "text": "it's sort of weird in the sense that well this is a multicore world and it's kind of weird that we're sort of",
    "start": "1853039",
    "end": "1858519"
  },
  {
    "text": "you know having to Fork off child processes because we these single threaded processes it's sort of it's",
    "start": "1858519",
    "end": "1865480"
  },
  {
    "text": "kind of a real mismatch there um so I don't I don't you know I don't know how",
    "start": "1865480",
    "end": "1870919"
  },
  {
    "text": "that's going to pan out over time it's quite likely that maybe worker threads will get sort of taken out of the web",
    "start": "1870919",
    "end": "1877760"
  },
  {
    "text": "browser level and become a standard part of java JavaScript but maybe not but",
    "start": "1877760",
    "end": "1883360"
  },
  {
    "text": "it's just kind of you know it's sort of weird having single-threaded run times as standard in a in a multi-threaded",
    "start": "1883360",
    "end": "1890880"
  },
  {
    "text": "world all right so that that's JavaScript we looked at that that's the reactor pattern we sort of saw that on",
    "start": "1890880",
    "end": "1897120"
  },
  {
    "text": "the one hand it's quite nice scalable but on the other hand we have coolback",
    "start": "1897120",
    "end": "1902159"
  },
  {
    "text": "hell um so I want to talk about the third part which is really interesting which I think is where a lot of the",
    "start": "1902159",
    "end": "1907480"
  },
  {
    "start": "1904000",
    "end": "1904000"
  },
  {
    "text": "power comes from namely the module system so node you download it you get a",
    "start": "1907480",
    "end": "1913600"
  },
  {
    "text": "bunch of cool modules for doing sort of low-level things like basic n working TCP I UDP HTTP accessing the file system",
    "start": "1913600",
    "end": "1923360"
  },
  {
    "text": "timers you know it's like I mean I didn't not count it but there's probably like 20 different built-in modules so",
    "start": "1923360",
    "end": "1929360"
  },
  {
    "text": "that's pretty good but what's really interesting is that there are thousands",
    "start": "1929360",
    "end": "1934519"
  },
  {
    "text": "well rough last time I checked there were 30,000 Community modules out there",
    "start": "1934519",
    "end": "1940919"
  },
  {
    "text": "for doing all kinds of things from just basic low-level utilities to web",
    "start": "1940919",
    "end": "1946120"
  },
  {
    "text": "Frameworks to database dri D messaging um you name it that there's likely to be",
    "start": "1946120",
    "end": "1952519"
  },
  {
    "text": "a module for it it's funny one of them on there is make mkd p and that the",
    "start": "1952519",
    "end": "1958279"
  },
  {
    "text": "whole purpose of that module is just to implement a function that's equivalent to make make deer - p on the command",
    "start": "1958279",
    "end": "1965320"
  },
  {
    "text": "line because the built-in one doesn't do it so it's a very Vibrant Community that",
    "start": "1965320",
    "end": "1971159"
  },
  {
    "text": "are just producing all of these modules so and know so what is a",
    "start": "1971159",
    "end": "1979080"
  },
  {
    "text": "module well basically it's a collection of JavaScript files it might also include some native code because",
    "start": "1979080",
    "end": "1986159"
  },
  {
    "start": "1981000",
    "end": "1981000"
  },
  {
    "text": "JavaScript unlike Java isn't a systems programming language and so you can't really write low-level code in it you",
    "start": "1986159",
    "end": "1992799"
  },
  {
    "text": "have to resort to C C++ plus there's a package file that um sort of gives you",
    "start": "1992799",
    "end": "1999039"
  },
  {
    "text": "metadata about the package um in installing a package is",
    "start": "1999039",
    "end": "2005120"
  },
  {
    "text": "quite interesting you know I kind of think like in the maven SBT world you have to go added edit a descriptive file",
    "start": "2005120",
    "end": "2011679"
  },
  {
    "text": "to say what version you have um here you just go um npm which is the node package",
    "start": "2011679",
    "end": "2018039"
  },
  {
    "text": "manager install package name it just gets downloaded and added into your project which is quite nice and then",
    "start": "2018039",
    "end": "2026120"
  },
  {
    "text": "once you have a module it's easy to use you load it using require that gives you an object whose",
    "start": "2026120",
    "end": "2033320"
  },
  {
    "text": "properties are the public exports of that module",
    "start": "2033320",
    "end": "2038399"
  },
  {
    "text": "so in this case it's the HT HTTP module and you just call create",
    "start": "2038399",
    "end": "2043639"
  },
  {
    "text": "server and and modules I think are very Central to the whole kind of node",
    "start": "2043639",
    "end": "2048720"
  },
  {
    "text": "development system so if you once again you look at the architecture of your application at the lowest level you've",
    "start": "2048720",
    "end": "2054240"
  },
  {
    "text": "got core modules above that you you'd use Community modules you'd also would",
    "start": "2054240",
    "end": "2059760"
  },
  {
    "text": "then write your own modules because you want to have modularity both within your project but also say with across your",
    "start": "2059760",
    "end": "2065960"
  },
  {
    "text": "organization as well and then at the top you've got your own application code so",
    "start": "2065960",
    "end": "2071040"
  },
  {
    "text": "it's sort of a very pervasive pattern so there's a lot of modules out there but",
    "start": "2071040",
    "end": "2077200"
  },
  {
    "text": "they tend to be of variable quality um you know I guess that's a consequence of",
    "start": "2077200",
    "end": "2082520"
  },
  {
    "text": "there just being so many and that you can very easily publish a module so a while back I was looking for mySQL",
    "start": "2082520",
    "end": "2089320"
  },
  {
    "text": "database driver and I found like 10 of them but none of them seemed to do connection pooling or there was some",
    "start": "2089320",
    "end": "2096480"
  },
  {
    "text": "other major feature written where so something that we as Java developers would take for granted as you know we've",
    "start": "2096480",
    "end": "2102520"
  },
  {
    "text": "had mature jdbc drivers for years H the node Community seems to be still working",
    "start": "2102520",
    "end": "2108760"
  },
  {
    "text": "on it um that's partly because many of them are using mongodb rather than just",
    "start": "2108760",
    "end": "2114880"
  },
  {
    "text": "sort of boring old MySQL so there's sort of issues we've got lots and lots of modules but then you know the actual you",
    "start": "2114880",
    "end": "2122839"
  },
  {
    "text": "know there's not as many useful modules as you may think so you know so do summarize sort of an interesting",
    "start": "2122839",
    "end": "2129240"
  },
  {
    "start": "2127000",
    "end": "2127000"
  },
  {
    "text": "situation right we've got JavaScript which is this flawed and misunderstood Lang kind of misunderstood language",
    "start": "2129240",
    "end": "2135720"
  },
  {
    "text": "we've got the reactor pattern which on the one hand is great it gives you scalable applications but quite a lot of",
    "start": "2135720",
    "end": "2141400"
  },
  {
    "text": "the time you don't need the scalability and it also results in coolback hell and",
    "start": "2141400",
    "end": "2146760"
  },
  {
    "text": "then you also have modules lots of modules but not not all of them are great so in the jvm world there's a",
    "start": "2146760",
    "end": "2153720"
  },
  {
    "text": "bunch of different options out there for for sort of as an alternative to this async programming model like netti",
    "start": "2153720",
    "end": "2161440"
  },
  {
    "start": "2154000",
    "end": "2154000"
  },
  {
    "text": "vertex springsource just introduced a reactor pattern a reactor projects so sort of why care well you know I found",
    "start": "2161440",
    "end": "2168119"
  },
  {
    "text": "that you know it's just easy to get stuff done easy to write some simple",
    "start": "2168119",
    "end": "2173280"
  },
  {
    "text": "Network Services easy to push events from the server to the browser using",
    "start": "2173280",
    "end": "2178960"
  },
  {
    "text": "node and that that was actually really what got me interested the ease at which I could you can use libraries like",
    "start": "2178960",
    "end": "2184680"
  },
  {
    "text": "socket.io that I'm going to talk about in a minute to to push events to the browser so it sort of got a role to play",
    "start": "2184680",
    "end": "2192119"
  },
  {
    "text": "in modern application architecture and I think there's sort of two reasons for that so you know number one if you look",
    "start": "2192119",
    "end": "2198280"
  },
  {
    "text": "at the structure of applications today they've kind of evolved like a while back we built these large monolithic",
    "start": "2198280",
    "end": "2205200"
  },
  {
    "text": "single War file applications and now they've evolved into this sort of quote",
    "start": "2205200",
    "end": "2210280"
  },
  {
    "text": "service oriented architecture where there's lots of microservices that are",
    "start": "2210280",
    "end": "2215960"
  },
  {
    "text": "collaborating either via or via rabid mq so we've sort of I hate the term SE",
    "start": "2215960",
    "end": "2222280"
  },
  {
    "text": "because it has so many hideous connotations but really that's we have we know we're moving towards this",
    "start": "2222280",
    "end": "2228079"
  },
  {
    "text": "microservice architecture and then at the same time the presentation layer of of our",
    "start": "2228079",
    "end": "2234640"
  },
  {
    "start": "2232000",
    "end": "2232000"
  },
  {
    "text": "applications has evolved as well so whereas before we wrote These web apps",
    "start": "2234640",
    "end": "2240720"
  },
  {
    "text": "that just um generated HTML and then we added some JavaScript",
    "start": "2240720",
    "end": "2246560"
  },
  {
    "text": "into that HTML and we had the model view controller pattern running inside the server with",
    "start": "2246560",
    "end": "2253040"
  },
  {
    "text": "these elaborate web Frameworks today what we have is the model view controller pattern running inside the",
    "start": "2253040",
    "end": "2260359"
  },
  {
    "text": "browser written you know and we've got a whole application written there using a modern framework like angular or",
    "start": "2260359",
    "end": "2267280"
  },
  {
    "text": "backbone or or one of the others and the role of the server has Chang to serving",
    "start": "2267280",
    "end": "2273160"
  },
  {
    "text": "up static content in other words serving up the HTML and JavaScript for the app that runs in the browser exposing",
    "start": "2273160",
    "end": "2280359"
  },
  {
    "text": "restful end points for that browser app to call and also pushing events to to",
    "start": "2280359",
    "end": "2286800"
  },
  {
    "text": "the browser and I I that's sort of kind of where I'm coming from and what I see",
    "start": "2286800",
    "end": "2292200"
  },
  {
    "text": "is node actually it plays a useful role as the frontend server so it's sort of",
    "start": "2292200",
    "end": "2298200"
  },
  {
    "text": "mediating between the browser World HTML 5 JavaScript appt in the browser and all",
    "start": "2298200",
    "end": "2304560"
  },
  {
    "text": "of the Enterprise services and message broker type stuff that's running on the back end so so it act it plays a very",
    "start": "2304560",
    "end": "2312319"
  },
  {
    "text": "useful role as an API Gateway or another term for that is a front-end server so",
    "start": "2312319",
    "end": "2318800"
  },
  {
    "text": "if you know if we look at that you know so you know one part one thing the front-end server needs to do is serve up",
    "start": "2318800",
    "end": "2324680"
  },
  {
    "text": "static content turns out that's really easy to do with um Java W with node it's a",
    "start": "2324680",
    "end": "2332160"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "couple of different we could use a l lowlevel API so here we creating an http",
    "start": "2332160",
    "end": "2337480"
  },
  {
    "text": "server that has a request Handler function that's using the file system lowlevel file system module so like",
    "start": "2337480",
    "end": "2345119"
  },
  {
    "text": "first check does it Maps the URL to a file then says well does the file exist",
    "start": "2345119",
    "end": "2351240"
  },
  {
    "text": "if it doesn't replies with a 44 if it does it writes a header with the right",
    "start": "2351240",
    "end": "2357240"
  },
  {
    "text": "content type and then it creates a read stream and then pipes that into the request so you can see just a few lines",
    "start": "2357240",
    "end": "2363839"
  },
  {
    "text": "of code we we we sort of serving up files from a tiny little HTTP server so",
    "start": "2363839",
    "end": "2369520"
  },
  {
    "text": "that's quite good and then we can we can actually even simpler than that if we",
    "start": "2369520",
    "end": "2374560"
  },
  {
    "start": "2371000",
    "end": "2371000"
  },
  {
    "text": "use the express web framework it's just a oneline configuration to say serve",
    "start": "2374560",
    "end": "2380160"
  },
  {
    "text": "static content from this directory so that's good you know we can serve up static",
    "start": "2380160",
    "end": "2386920"
  },
  {
    "text": "content so the next thing to think about is well what about restful web services once again that's quite",
    "start": "2386920",
    "end": "2395560"
  },
  {
    "text": "straightforward so there there's a few different options there but so one of them I've played with is Express and",
    "start": "2395599",
    "end": "2402400"
  },
  {
    "text": "that makes it easy to do patent matching against URLs and also destructuring to get IDs out of",
    "start": "2402400",
    "end": "2409680"
  },
  {
    "text": "URLs so here you know we're implementing a so we saying for a get request on SL",
    "start": "2409680",
    "end": "2416400"
  },
  {
    "text": "portfolio grab the user ID um and then go off and return their their portfolio",
    "start": "2416400",
    "end": "2423440"
  },
  {
    "text": "that that was you know once again that's quite straightforward and then there's also a a module called request that lets",
    "start": "2423440",
    "end": "2431560"
  },
  {
    "text": "it very lets you very easily proxy requests it's basically a a higher level",
    "start": "2431560",
    "end": "2437920"
  },
  {
    "text": "HTTP client library but using that it's quite straightforward for nodejs to act",
    "start": "2437920",
    "end": "2443560"
  },
  {
    "text": "as a proxy so arrest request comes in you can then route it to the the",
    "start": "2443560",
    "end": "2449480"
  },
  {
    "text": "appropriate backend server um over HTTP and so this is actually implement this",
    "start": "2449480",
    "end": "2456079"
  },
  {
    "text": "is a little bit of coffee script so what so the proxy to back end is a function",
    "start": "2456079",
    "end": "2463000"
  },
  {
    "text": "that takes a URL the base URL and returns a request Handler takes a",
    "start": "2463000",
    "end": "2469000"
  },
  {
    "text": "request a function that takes a request and response that then proxies that request to that specified base URL and",
    "start": "2469000",
    "end": "2478200"
  },
  {
    "text": "then down at the bottom I'm setting up various mappings so like SL restaurant gets proxy to the available restaurant",
    "start": "2478200",
    "end": "2485359"
  },
  {
    "text": "URL orders gets Pro routed to restaurant management and so on once again pretty",
    "start": "2485359",
    "end": "2492280"
  },
  {
    "text": "straightforward and then you know then there's the really interesting part of where how do we deliver events to the",
    "start": "2492280",
    "end": "2498079"
  },
  {
    "text": "browser today we want to build these real time apps where the server sending events to the browser and the browsers",
    "start": "2498079",
    "end": "2504480"
  },
  {
    "text": "updating dynamically and node has some great real great Technologies for doing",
    "start": "2504480",
    "end": "2510400"
  },
  {
    "text": "that so here's my here's my simple example with sort of a very state-of-the-art UI so so it's a simple",
    "start": "2510400",
    "end": "2518640"
  },
  {
    "text": "counter that increments once every second and what's interesting about this is the events are flowing from the",
    "start": "2518640",
    "end": "2526040"
  },
  {
    "start": "2526000",
    "end": "2526000"
  },
  {
    "text": "server and that's accomplished with this little bit of code using the",
    "start": "2526040",
    "end": "2531520"
  },
  {
    "text": "socket.io event delivery um module so",
    "start": "2531520",
    "end": "2536880"
  },
  {
    "text": "basically what's going on is like I'm initializing socket.io and then when the browser",
    "start": "2536880",
    "end": "2543040"
  },
  {
    "text": "connects I'm going to show the HTML for that in a second this connect this sort of new connection Handler just sets up a",
    "start": "2543040",
    "end": "2552480"
  },
  {
    "text": "uses the said interval um method to call the tick function every every thousand",
    "start": "2552480",
    "end": "2560559"
  },
  {
    "text": "milliseconds and so what tick is doing is incrementing the counter and then emitting a tick event which gets",
    "start": "2560559",
    "end": "2568000"
  },
  {
    "text": "delivered to that to the browser that's connecting so quite simple you know just",
    "start": "2568000",
    "end": "2574400"
  },
  {
    "text": "a few lines of code there and then here's the client side code so it's this is implemented using knockoutjs which is",
    "start": "2574400",
    "end": "2582160"
  },
  {
    "text": "a which implements a variant of the model view controller pattern so you can see that there's a span element with a",
    "start": "2582160",
    "end": "2589760"
  },
  {
    "text": "data bind attribute that binds that span element to an attribute of the model",
    "start": "2589760",
    "end": "2595480"
  },
  {
    "text": "that's defined in JavaScript it's then um connecting to socket.io so it's connecting to the",
    "start": "2595480",
    "end": "2603640"
  },
  {
    "text": "server um and then for for every tick event it's actually just updating the model",
    "start": "2603640",
    "end": "2610559"
  },
  {
    "text": "which because of the binding will then cause the span element to contain that new value so you know real simple",
    "start": "2610559",
    "end": "2618160"
  },
  {
    "text": "example but it was just a few lines of code in the on the server a few lines of code on the browser and you've got",
    "start": "2618160",
    "end": "2624359"
  },
  {
    "text": "events flowing so I sort of have a more enterpris version of that so this is",
    "start": "2624359",
    "end": "2631000"
  },
  {
    "start": "2628000",
    "end": "2628000"
  },
  {
    "text": "where the events are actually being produced by a server that publishes them to rabid mq",
    "start": "2631000",
    "end": "2637720"
  },
  {
    "text": "message broker and then there's a consumer that's then um subscribing to",
    "start": "2637720",
    "end": "2643359"
  },
  {
    "text": "those events and then republishing them to the browser using",
    "start": "2643359",
    "end": "2648640"
  },
  {
    "text": "socket.io and that that's quite straightforward as well so you know here's the here's the publisher so it's",
    "start": "2648640",
    "end": "2655680"
  },
  {
    "start": "2649000",
    "end": "2649000"
  },
  {
    "text": "it's publishing messages to amqp so we use the amqp module we connect to amqp",
    "start": "2655680",
    "end": "2662400"
  },
  {
    "text": "we then need to make sure that the exchange that we want to publish the messages to exists so we got we got to",
    "start": "2662400",
    "end": "2669359"
  },
  {
    "text": "write some asynchronous code to do that so and um and when the exchange is open",
    "start": "2669359",
    "end": "2675760"
  },
  {
    "text": "we then use the said interval to call Tick which then publishes the message",
    "start": "2675760",
    "end": "2682559"
  },
  {
    "text": "via amqp so we're P we're publishing the message to The Tick Tock",
    "start": "2682559",
    "end": "2689040"
  },
  {
    "text": "exchange you sort of that's the destination and then in the client then",
    "start": "2689040",
    "end": "2694680"
  },
  {
    "text": "in the intermediary that's that that's subscribing to the amqp messages and",
    "start": "2694680",
    "end": "2700440"
  },
  {
    "text": "then republishing them as socket.io events sort of doing some similar things so we're connecting to",
    "start": "2700440",
    "end": "2707480"
  },
  {
    "text": "amqp um then we're subscribing to the amqp Q and then for every event that every",
    "start": "2707480",
    "end": "2715680"
  },
  {
    "text": "message that comes in pausing that message and then emitting it as a tick",
    "start": "2715680",
    "end": "2720880"
  },
  {
    "text": "event which then gets picked up by the browser as as before so you know a few",
    "start": "2720880",
    "end": "2727480"
  },
  {
    "text": "details here but you can see that it's not really you know we're actually able to take these messages that are coming",
    "start": "2727480",
    "end": "2733640"
  },
  {
    "text": "from our backend systems and then deliver them very easily to the browser",
    "start": "2733640",
    "end": "2739400"
  },
  {
    "text": "and it was this kind of thing that got me interested in in in node.js in the",
    "start": "2739400",
    "end": "2745440"
  },
  {
    "text": "first place kind of what what started in infecting my brain um okay so that sort of you know",
    "start": "2745440",
    "end": "2752640"
  },
  {
    "text": "kind of went through that kind of quickly but that you know there's the essence of building a front end server an API Gateway using node.js and there",
    "start": "2752640",
    "end": "2760480"
  },
  {
    "text": "there's tons and tons of details that I glossed over but it's it really is quite straightforward which is really really",
    "start": "2760480",
    "end": "2768599"
  },
  {
    "text": "nice provided you can you know deal with all the quirks of um JavaScript and so",
    "start": "2768599",
    "end": "2773880"
  },
  {
    "text": "on so the final thing I wanted to talk about which I think is a really important topic is how to deal with",
    "start": "2773880",
    "end": "2779319"
  },
  {
    "text": "coolback hell how you know how can we write asynchronous coolback style code",
    "start": "2779319",
    "end": "2786240"
  },
  {
    "text": "in a way that we can understand and debug and maintain so if you think about it there's a couple of different scenarios",
    "start": "2786240",
    "end": "2792599"
  },
  {
    "start": "2789000",
    "end": "2789000"
  },
  {
    "text": "there really one of them is a sequential scenario where you you want to do a invoke some asynchronous operation a and",
    "start": "2792599",
    "end": "2799520"
  },
  {
    "text": "when that completes invoke B and then when that completes invoke C so that's one thing and then there's also the fork",
    "start": "2799520",
    "end": "2805640"
  },
  {
    "text": "join scenario where we want to do a and b in parallel when they've both completed then cool C with the results",
    "start": "2805640",
    "end": "2813680"
  },
  {
    "text": "and if without if you right you know right that by hand you know that kind of",
    "start": "2813680",
    "end": "2819319"
  },
  {
    "text": "code gets very very messy so there's this whole um idea of concurrency",
    "start": "2819319",
    "end": "2825920"
  },
  {
    "start": "2821000",
    "end": "2821000"
  },
  {
    "text": "abstraction which in the JavaScript world is called a promise and in",
    "start": "2825920",
    "end": "2831280"
  },
  {
    "text": "practically every other language is called a future um which can actually help",
    "start": "2831280",
    "end": "2836400"
  },
  {
    "text": "simplify um the code so the big idea here is is that rather than functions",
    "start": "2836400",
    "end": "2841559"
  },
  {
    "text": "taking callbacks which the that function will then ultimately invoke in instead",
    "start": "2841559",
    "end": "2847400"
  },
  {
    "text": "the function a an asynchronous function returns a promise so A promise is an object that",
    "start": "2847400",
    "end": "2855119"
  },
  {
    "text": "represents an eventual outcome um which is either a success a",
    "start": "2855119",
    "end": "2860520"
  },
  {
    "text": "value or or a failure and some kind of error code so you can think of a promise or a future as a little box that a value",
    "start": "2860520",
    "end": "2867960"
  },
  {
    "text": "will eventually appear in so I'm the client I call some asynchronous operation I get back this future and I",
    "start": "2867960",
    "end": "2874880"
  },
  {
    "text": "know that at some point something will appear here in in that box um you know Java has a sort of semi",
    "start": "2874880",
    "end": "2883319"
  },
  {
    "text": "lame implementation of Futures Scala has a really great implementation Java 8",
    "start": "2883319",
    "end": "2888599"
  },
  {
    "text": "will probably have a much better implementation it's a very common concept and then you use a library of",
    "start": "2888599",
    "end": "2894319"
  },
  {
    "text": "functions plus other with future methods to actually transform and compose",
    "start": "2894319",
    "end": "2899359"
  },
  {
    "text": "promises in a really really interesting way that actually ends up enabling you to write asynchronous code in a style",
    "start": "2899359",
    "end": "2907240"
  },
  {
    "text": "that almost sort of kind of looks like you wrote it synchronously a lot of the",
    "start": "2907240",
    "end": "2912280"
  },
  {
    "text": "messy the asynchronicity is hidden away from you and in the JavaScript Community",
    "start": "2912280",
    "end": "2918079"
  },
  {
    "text": "there's a spec that sort of defines an API promises aa+ spec and then there are",
    "start": "2918079",
    "end": "2924720"
  },
  {
    "text": "various implementations one of which is when when.js which is part of Kujo do JS",
    "start": "2924720",
    "end": "2931119"
  },
  {
    "text": "which is this whole kind of really really interesting JavaScript project from from Spring source",
    "start": "2931119",
    "end": "2937319"
  },
  {
    "text": "so let's look at how you use how you use these promises so here's the example I",
    "start": "2937319",
    "end": "2943119"
  },
  {
    "start": "2939000",
    "end": "2939000"
  },
  {
    "text": "used earlier except that I Rewritten it to return a promise so you see that there's no um coolback instead what this",
    "start": "2943119",
    "end": "2951160"
  },
  {
    "text": "code is doing it's creating a deferred which is Javascript terminology for this",
    "start": "2951160",
    "end": "2956280"
  },
  {
    "text": "object that represents this ongoing operation so we call when do",
    "start": "2956280",
    "end": "2961480"
  },
  {
    "text": "defer then we just return that function just Returns the promise of the",
    "start": "2961480",
    "end": "2968520"
  },
  {
    "text": "Deferred um so the Deferred makes when you make a deferred you it makes a",
    "start": "2968520",
    "end": "2973960"
  },
  {
    "text": "promise as well and then asynchronously when there's a value to be produced uh",
    "start": "2973960",
    "end": "2980760"
  },
  {
    "text": "that's ready um it actually call resolve on the Deferred which arranges for that",
    "start": "2980760",
    "end": "2987119"
  },
  {
    "text": "value to to sort of magically appear within that promise so you know so in one sense we",
    "start": "2987119",
    "end": "2994000"
  },
  {
    "text": "haven't changed things too much",
    "start": "2994000",
    "end": "2998200"
  },
  {
    "text": "oh dear so but when you look you know if you look at the plus three code you know",
    "start": "3000240",
    "end": "3007599"
  },
  {
    "text": "that's similar hasn't changed much but where things have got a lot simpler is in the higher level code where you can",
    "start": "3007599",
    "end": "3015119"
  },
  {
    "text": "see that we're just doing plus three you know calling plus three that gives us a",
    "start": "3015119",
    "end": "3020880"
  },
  {
    "text": "future and then we're using the Futures then method which arranges to call time",
    "start": "3020880",
    "end": "3026799"
  },
  {
    "text": "too with the value that eventually appears in that future of promise and then gives you back a promise that",
    "start": "3026799",
    "end": "3034400"
  },
  {
    "text": "contains the value that's returned by times two so we've sort of got rid of any of the callbacks within there and",
    "start": "3034400",
    "end": "3041240"
  },
  {
    "text": "the code's really simple um and you know it's kind of",
    "start": "3041240",
    "end": "3047240"
  },
  {
    "text": "almost synchronous in nature and if we actually look at this example where we're calling plus three",
    "start": "3047240",
    "end": "3053640"
  },
  {
    "text": "and time 2 and then and then adding together the results it's even simpler",
    "start": "3053640",
    "end": "3059280"
  },
  {
    "text": "again so we just call + three and we call * 2 that gives us two of these",
    "start": "3059280",
    "end": "3066359"
  },
  {
    "text": "promises and then we use the join function so that gives and that returns",
    "start": "3066359",
    "end": "3071920"
  },
  {
    "text": "a promise that that will eventually contain an an array of the values from",
    "start": "3071920",
    "end": "3078640"
  },
  {
    "text": "the Fe from the promises that you pass in so when joints that gives us an array",
    "start": "3078640",
    "end": "3084319"
  },
  {
    "text": "of those two values and then we the spread method that then calls sum with the",
    "start": "3084319",
    "end": "3092400"
  },
  {
    "text": "elements of that array as arguments to to that function so sum gets the two",
    "start": "3092400",
    "end": "3098280"
  },
  {
    "text": "values and then does the you know returns a promise that eventually has the result so you can see that you know",
    "start": "3098280",
    "end": "3104960"
  },
  {
    "text": "it's not quite as simple as as the synchronous code but this is before it",
    "start": "3104960",
    "end": "3110119"
  },
  {
    "text": "actually took kind of a whole screenful of code to synchronize on those two",
    "start": "3110119",
    "end": "3115280"
  },
  {
    "text": "asynchronous operations and then add the result together so you can see how how using promises really does simplify",
    "start": "3115280",
    "end": "3124040"
  },
  {
    "start": "3124000",
    "end": "3124000"
  },
  {
    "text": "things you know but then one question is well if you look at the raw node apis",
    "start": "3124040",
    "end": "3129200"
  },
  {
    "text": "they actually they they take callbacks right so how do we work with them so one",
    "start": "3129200",
    "end": "3135440"
  },
  {
    "text": "option is whenever we use a node a node module API we'd have to write code like",
    "start": "3135440",
    "end": "3141760"
  },
  {
    "text": "this create a deferred pass in a callback that resolves or rejects the Deferred",
    "start": "3141760",
    "end": "3147480"
  },
  {
    "text": "um and then get the promise from that but when has a really handy feature that lets you take the lets you call a node",
    "start": "3147480",
    "end": "3156440"
  },
  {
    "text": "function and it actually supplies the Callback and you just get back a promise so all of the boilerplate code",
    "start": "3156440",
    "end": "3164160"
  },
  {
    "text": "gets hidden we're just so we're just saying cool FS stat file system stat",
    "start": "3164160",
    "end": "3169520"
  },
  {
    "text": "with path as an argument and node fn. cool kind of does all of this coolback",
    "start": "3169520",
    "end": "3175200"
  },
  {
    "text": "stuff and just gives us back a promise so we've got this nice way of kind of integrating old style non promise code",
    "start": "3175200",
    "end": "3183160"
  },
  {
    "text": "into this nice simple promise world and I want to finish up with a file system",
    "start": "3183160",
    "end": "3188359"
  },
  {
    "start": "3187000",
    "end": "3187000"
  },
  {
    "text": "scanner example so you know all that does is read the contents of a directory figure",
    "start": "3188359",
    "end": "3194400"
  },
  {
    "text": "out use stat to determine which of those file which of those directory entries",
    "start": "3194400",
    "end": "3200000"
  },
  {
    "text": "are files which are directories if they're directories it needs to recurse and then you kind of want to combine the",
    "start": "3200000",
    "end": "3206079"
  },
  {
    "text": "results so that's like you know that that's trivial to do if you're just sort of",
    "start": "3206079",
    "end": "3211280"
  },
  {
    "text": "using synchronous apis but it's really really messy if you if you don't use",
    "start": "3211280",
    "end": "3216640"
  },
  {
    "text": "promises and you're using asynchronous apis so first thing we need to do is read the contents of the directory so we",
    "start": "3216640",
    "end": "3223599"
  },
  {
    "start": "3220000",
    "end": "3220000"
  },
  {
    "text": "do that with fil system. reader so that that's pretty simple because we're using",
    "start": "3223599",
    "end": "3228760"
  },
  {
    "text": "node FN cool to do that so that gives us a future or promise I kind of use those",
    "start": "3228760",
    "end": "3234559"
  },
  {
    "text": "two interchangeably that would will eventually contain an an array of file",
    "start": "3234559",
    "end": "3240160"
  },
  {
    "text": "names so that that's a good first step right next step is well stat actually",
    "start": "3240160",
    "end": "3246119"
  },
  {
    "start": "3245000",
    "end": "3245000"
  },
  {
    "text": "takes absolute path well th those are file names and they're relative to a",
    "start": "3246119",
    "end": "3251520"
  },
  {
    "text": "particular directory so we then have to take those those directory entry names",
    "start": "3251520",
    "end": "3257799"
  },
  {
    "text": "and turn them into absolute paths um you know which on the one hand it's not that big a deal right we can",
    "start": "3257799",
    "end": "3264280"
  },
  {
    "text": "use join to do that and we actually and and it's a future containing an array so",
    "start": "3264280",
    "end": "3269640"
  },
  {
    "text": "we actually need to do some kind of map operation and so what we're going to do is just partially apply join to the to",
    "start": "3269640",
    "end": "3276839"
  },
  {
    "text": "the root directory and then use when. map to map over the array that will",
    "start": "3276839",
    "end": "3282640"
  },
  {
    "text": "eventually be in that promise applying two absolute to each entry so we now get",
    "start": "3282640",
    "end": "3288760"
  },
  {
    "text": "back uh a promise containing an array of absolute",
    "start": "3288760",
    "end": "3294160"
  },
  {
    "text": "paths so you know this code still kind of look sequential we've just go to this extra kind of sort of fluff around it so",
    "start": "3294160",
    "end": "3304079"
  },
  {
    "text": "then the next step we have to do is actually invoke stat on each of those",
    "start": "3304079",
    "end": "3309880"
  },
  {
    "text": "paths to determine whether it's a file or to determine whether it's a directory so just for fun I thought well let's do",
    "start": "3309880",
    "end": "3316799"
  },
  {
    "text": "that in parallel so there's actually a parallel function that will just execute a whole bunch of asynchronous stuff and",
    "start": "3316799",
    "end": "3324160"
  },
  {
    "text": "give you back an an array whose elements correspond to the values",
    "start": "3324160",
    "end": "3329240"
  },
  {
    "text": "you you get back from each of those asynchronous things and the actual what you have to pass to parallel is is an an",
    "start": "3329240",
    "end": "3336359"
  },
  {
    "text": "array of functions zero Arc functions um that it will then cool so",
    "start": "3336359",
    "end": "3343680"
  },
  {
    "text": "we actually have to transform this array this future or promise containing an an",
    "start": "3343680",
    "end": "3349480"
  },
  {
    "text": "array of absolute file system paths into a promise containing an array of tasks",
    "start": "3349480",
    "end": "3358520"
  },
  {
    "text": "these task functions pass that to parallel which is going to execute all",
    "start": "3358520",
    "end": "3363680"
  },
  {
    "text": "of them and that gives us back a promise containing an an array of stat results",
    "start": "3363680",
    "end": "3370200"
  },
  {
    "text": "you know this is the path yes it's the directory no it's a file this is when it was",
    "start": "3370200",
    "end": "3376240"
  },
  {
    "text": "created um so you know it's not so bad and then the other thing we need to do",
    "start": "3376240",
    "end": "3382400"
  },
  {
    "text": "is well if it's a f if it's a directory we need to recurse right so we need to actually map over",
    "start": "3382400",
    "end": "3388440"
  },
  {
    "text": "the entries again if it's a directory we want to recurse and do everything we just I just described where if it's a",
    "start": "3388440",
    "end": "3395799"
  },
  {
    "text": "file we just want to um return the name return the path so that will return a",
    "start": "3395799",
    "end": "3402520"
  },
  {
    "text": "list of part list a list of files and so we need to balance it out by returning a",
    "start": "3402520",
    "end": "3408680"
  },
  {
    "text": "Singleton list there so that gives us uh basically a",
    "start": "3408680",
    "end": "3413880"
  },
  {
    "text": "list of list of files which we then need to flatten out or I should say a promise",
    "start": "3413880",
    "end": "3419119"
  },
  {
    "start": "3417000",
    "end": "3417000"
  },
  {
    "text": "containing a uh to be precise it's a promise containing an an array of array",
    "start": "3419119",
    "end": "3424920"
  },
  {
    "text": "of files um and then we need to like flatten it and to do that we can just",
    "start": "3424920",
    "end": "3430680"
  },
  {
    "text": "use when. reduce that takes that promise um containing all of the array",
    "start": "3430680",
    "end": "3438039"
  },
  {
    "text": "the arrays and concatenates them together and gives us back another promise containing the eventual list so",
    "start": "3438039",
    "end": "3444599"
  },
  {
    "text": "we do all of that and we we you can see that the code you know it's obviously more complicated than the than the",
    "start": "3444599",
    "end": "3451599"
  },
  {
    "text": "synchronous code yet at the same time because we're using promises we're not using having to do ugly nested callbacks",
    "start": "3451599",
    "end": "3459319"
  },
  {
    "text": "within callbacks I mean when I first wrote this the code was just positively horrendous and what we've got now is",
    "start": "3459319",
    "end": "3466240"
  },
  {
    "text": "we've got we're using this few weird functions like when. map when. parallel and when dot reduced but we've got",
    "start": "3466240",
    "end": "3472520"
  },
  {
    "text": "something that's kind of looks like it's doing things qu entially even though under the covers it's quite um",
    "start": "3472520",
    "end": "3480359"
  },
  {
    "text": "asynchronous so anyway hopefully that's given you a sense of how you can use promises to simplify your code so you",
    "start": "3480359",
    "end": "3488880"
  },
  {
    "text": "know that's pretty much my talk so I sort of you know in summary you know JavaScript is one very weird very flawed",
    "start": "3488880",
    "end": "3496480"
  },
  {
    "start": "3493000",
    "end": "3493000"
  },
  {
    "text": "language we have to be very careful as to how we use it and in some cases we should really just use some language",
    "start": "3496480",
    "end": "3503079"
  },
  {
    "text": "that compiles down to JavaScript like coffeescript and then the asynchronous model is",
    "start": "3503079",
    "end": "3508720"
  },
  {
    "text": "really interesting on the one hand it lets us build super scalable applications but it adds a lot of",
    "start": "3508720",
    "end": "3516319"
  },
  {
    "text": "complexity and then this single threaded runtime is really constraining when we actually need to do things that would",
    "start": "3516319",
    "end": "3524280"
  },
  {
    "text": "otherwise block the single threaded event Loop so there's some real challenges there but I I kind of feel",
    "start": "3524280",
    "end": "3530720"
  },
  {
    "text": "that you know despite all of these problems today right now um you know",
    "start": "3530720",
    "end": "3536359"
  },
  {
    "text": "nodejs is kind of has is potentially a very useful technology you know five two",
    "start": "3536359",
    "end": "3543319"
  },
  {
    "text": "years from now it's quite likely that say in the jvm world there will be some very robust very easy to things that are",
    "start": "3543319",
    "end": "3550680"
  },
  {
    "text": "comparable to n node.js in terms of power and ease of use I you might even",
    "start": "3550680",
    "end": "3555760"
  },
  {
    "text": "argue that sort of we're get we're going to get there a lot sooner than that but today I think it's worth looking at",
    "start": "3555760",
    "end": "3561880"
  },
  {
    "text": "node.js and just kind of kicking the tires on it so that's my talk so thanks",
    "start": "3561880",
    "end": "3567880"
  },
  {
    "text": "for listening um you know you can follow me on Twitter you can send me email you can um you'll be able to find some",
    "start": "3567880",
    "end": "3575200"
  },
  {
    "text": "example code on my blog plain old objects and you also find a copy of the slides so thanks for listening and I",
    "start": "3575200",
    "end": "3581880"
  },
  {
    "text": "hope that you found it useful [Applause]",
    "start": "3581880",
    "end": "3589820"
  },
  {
    "text": "[Music]",
    "start": "3590300",
    "end": "3593409"
  }
]