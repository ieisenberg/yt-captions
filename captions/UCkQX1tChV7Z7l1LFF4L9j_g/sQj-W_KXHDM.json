[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "my name is Peter and I work for cake solutions we are ya company focus on",
    "start": "0",
    "end": "7980"
  },
  {
    "text": "building reactive and data processing architectures using technologies such as color across park and many others and",
    "start": "7980",
    "end": "14929"
  },
  {
    "text": "this presentation I'm going to talk about to distribute it stream processing this area at X potential these days and",
    "start": "14929",
    "end": "22680"
  },
  {
    "text": "I believe you will find X 42 45 minutes interesting so what am I going to talk",
    "start": "22680",
    "end": "29580"
  },
  {
    "text": "about I will start with the motivations what are reasons behind is increasing demand of real-time data stream",
    "start": "29580",
    "end": "35940"
  },
  {
    "text": "processing and how to address it then I'm talk I'm going to talk about three",
    "start": "35940",
    "end": "41010"
  },
  {
    "text": "processing in jail why do we care why should we care wherever possible use cases and also provides of that after",
    "start": "41010",
    "end": "48539"
  },
  {
    "text": "that I like to talk about available fri works with other similarities and differences and also they're typically",
    "start": "48539",
    "end": "54600"
  },
  {
    "text": "use cases finally we will conclude some general guidelines and recommendations",
    "start": "54600",
    "end": "59960"
  },
  {
    "text": "I'd like to say this talk is based on my personal observation and opinions which I have made when investigating how to",
    "start": "59960",
    "end": "67080"
  },
  {
    "text": "deal with steam processing and I'm definitely biased in some way we are",
    "start": "67080",
    "end": "73380"
  },
  {
    "text": "facing huge increase in the amount of data we produce we have produced approximately eight data bytes of data",
    "start": "73380",
    "end": "79350"
  },
  {
    "text": "lies there so let's put it into context to a little bit to make it more descriptive every minute we create two",
    "start": "79350",
    "end": "85950"
  },
  {
    "text": "hundreds millions of emails 48 hours of YouTube videos and also we are able to",
    "start": "85950",
    "end": "91740"
  },
  {
    "text": "create Google two million times but a question is how can we make sense of all this data because most of data are not",
    "start": "91740",
    "end": "98790"
  },
  {
    "text": "interesting and also knew the new data supersedes the old",
    "start": "98790",
    "end": "104990"
  },
  {
    "text": "and how is it all possible many new sources of data became available for it",
    "start": "109920",
    "end": "115120"
  },
  {
    "start": "110000",
    "end": "110000"
  },
  {
    "text": "for example everyone has a smartphone and every smartphones for Sanders or the bad seeds also pages are created every",
    "start": "115120",
    "end": "121930"
  },
  {
    "text": "day or the social network to huge game changer years many everyone is exposed",
    "start": "121930",
    "end": "128220"
  },
  {
    "text": "I'm pretty sure we can find many other examples but these new data sources also",
    "start": "128220",
    "end": "133540"
  },
  {
    "text": "bring us new challenges for example of that social feed mining tremendous amount of useful information available",
    "start": "133540",
    "end": "139750"
  },
  {
    "text": "or written data as is in general we can go for detection we can analyze trends",
    "start": "139750",
    "end": "145360"
  },
  {
    "text": "or we can do some kind of processing and so on so as we can see there are so many",
    "start": "145360",
    "end": "150790"
  },
  {
    "text": "options and of course sleepers are saying is the answer or rescue they want",
    "start": "150790",
    "end": "157540"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "to process incoming data on fly without panel and storage the volume of data could be very high so we are going to",
    "start": "157540",
    "end": "163780"
  },
  {
    "text": "need a lot of resources for that and so we must be able to be must be able to scale accordingly and of course we want",
    "start": "163780",
    "end": "170890"
  },
  {
    "text": "to be able to react to events as they occur as late as light answering matters",
    "start": "170890",
    "end": "175900"
  },
  {
    "text": "here so let's briefly talk about typical examples of streaming applications",
    "start": "175900",
    "end": "181739"
  },
  {
    "start": "178000",
    "end": "178000"
  },
  {
    "text": "firstly a great example ETA operations like joining filtering or various",
    "start": "181739",
    "end": "186910"
  },
  {
    "text": "transformations of incoming data so basically taking data from the source to the operations we want and then set out",
    "start": "186910",
    "end": "194530"
  },
  {
    "text": "from the system a system to something like Kafka or how Google water we need are we doing typical operation winnowing",
    "start": "194530",
    "end": "202690"
  },
  {
    "text": "means we take an interval or window we want let's say five seconds or two",
    "start": "202690",
    "end": "207760"
  },
  {
    "text": "minutes and then we perform operations on it's like training to eat or turning sales and other great examples of",
    "start": "207760",
    "end": "215200"
  },
  {
    "text": "streaming applications can be like machine learning or pattern recognition machine learning is quite a trendy area",
    "start": "215200",
    "end": "221410"
  },
  {
    "text": "these days and of course we can apply it in the context of stream processing we",
    "start": "221410",
    "end": "226900"
  },
  {
    "text": "are able to do Custer in regression or classification on incoming data also",
    "start": "226900",
    "end": "232239"
  },
  {
    "text": "part of regulation my status as a rare example sure it is not as fancy as machine learning but its applications",
    "start": "232239",
    "end": "239260"
  },
  {
    "text": "like fraud or animal detection if we use for all last year's new",
    "start": "239260",
    "end": "246770"
  },
  {
    "text": "architectures were developed to address various problems we have had so let's have a look at the emotional processing",
    "start": "246770",
    "end": "252830"
  },
  {
    "text": "architecture match pipeline has a large scale it doubles such as HDFS and many",
    "start": "252830",
    "end": "258350"
  },
  {
    "start": "255000",
    "end": "255000"
  },
  {
    "text": "technologies to learn kinetic jobs over it it works well fine but it's participa",
    "start": "258350",
    "end": "264700"
  },
  {
    "text": "popular at them to address the slowness of batch pipeline in standard architecture it's adds a streamliner to",
    "start": "264700",
    "end": "272000"
  },
  {
    "text": "get a possibility everytime queries so basically we grew two different systems together trying to get best of both",
    "start": "272000",
    "end": "278630"
  },
  {
    "text": "worlds sloper accurate results from much later and fast but somehow approximated",
    "start": "278630",
    "end": "284120"
  },
  {
    "text": "results from stream where problem is we usually have to call it vice which is",
    "start": "284120",
    "end": "290180"
  },
  {
    "text": "pretty painful moreover writing distributed algorithms is complex and doing it for two different paradigms is",
    "start": "290180",
    "end": "296300"
  },
  {
    "text": "even worse there are a couple of tools trying to solve this allowing us to write coach as ones making things",
    "start": "296300",
    "end": "302330"
  },
  {
    "text": "definitely better but even if you can avoid code in your application files the",
    "start": "302330",
    "end": "308090"
  },
  {
    "text": "operational board of running and the back into system is going to be very high so I taken architectures a",
    "start": "308090",
    "end": "314300"
  },
  {
    "text": "reasonable solution from times we have no better tools available but I firmly believe we can do better these days so",
    "start": "314300",
    "end": "321169"
  },
  {
    "text": "let's talk more about streaming start thanking basic stand on design meaning we have an increment data from various",
    "start": "321169",
    "end": "326600"
  },
  {
    "text": "sources which we can plug in directly to our stemming systemic system our as it",
    "start": "326600",
    "end": "331850"
  },
  {
    "text": "has a little bit more common we can use some kind of broke like Kafka and then reprocessing or we can design our system",
    "start": "331850",
    "end": "339440"
  },
  {
    "text": "in ovine known as a cup architecture couple stores data in something fast that supports streaming the stream is an",
    "start": "339440",
    "end": "347000"
  },
  {
    "text": "immutable soul of truth and as well as a source for up data for the other systems the data can be processed queried or",
    "start": "347000",
    "end": "354080"
  },
  {
    "text": "replied and finally end up in a data store a datastore can be used as a source for separate queries where",
    "start": "354080",
    "end": "360500"
  },
  {
    "text": "different characteristics and guarantees",
    "start": "360500",
    "end": "364570"
  },
  {
    "start": "364000",
    "end": "364000"
  },
  {
    "text": "as you suspect is to pedestrian processing is continuous processing aggregation and analysis of angola data",
    "start": "365860",
    "end": "372410"
  },
  {
    "text": "as a general computational model Asmodeus but we explain latencies in malice or in seconds the systems are",
    "start": "372410",
    "end": "379670"
  },
  {
    "text": "usually model as directed acyclic graph da cheese or dogs jack is a graphic",
    "start": "379670",
    "end": "385220"
  },
  {
    "text": "representation of share of task and we use it in for description of the topology of streaming job I'll have",
    "start": "385220",
    "end": "391850"
  },
  {
    "text": "myself terminology from a customs a little bit but I think you'll be clean anyway so as you can see the picture",
    "start": "391850",
    "end": "397100"
  },
  {
    "text": "data flows through channel processors from sources to things and this represents the streaming task and",
    "start": "397100",
    "end": "404110"
  },
  {
    "text": "speaking about cut streams I think it's very important to emphasize the world stability because even local solutions",
    "start": "404110",
    "end": "410240"
  },
  {
    "text": "can create a hang tag but they are going focus only two solutions running on",
    "start": "410240",
    "end": "415250"
  },
  {
    "text": "multiple machines when choosing between",
    "start": "415250",
    "end": "422630"
  },
  {
    "text": "the Francis then there is a couple of points which you take care of so let's start with runtime and programming model",
    "start": "422630",
    "end": "428180"
  },
  {
    "text": "the programming model provide well apart from retirement or all of its features and it should be sufficient to handle",
    "start": "428180",
    "end": "434090"
  },
  {
    "text": "all possible use cases for application this is a really crucial topic and I will come back to it very soon the",
    "start": "434090",
    "end": "442250"
  },
  {
    "text": "frictional primitives exposed by pressing platform should be able to provide utage functionalities at interval message levels like map or",
    "start": "442250",
    "end": "449330"
  },
  {
    "text": "filter which are pretty easy to implement even if you want to scale a lot but another up with it should also",
    "start": "449330",
    "end": "456440"
  },
  {
    "text": "provide a code message functionality like aggregations and accurate stream operations like joint for example which",
    "start": "456440",
    "end": "462590"
  },
  {
    "text": "are much harder to scale for state management model application have a",
    "start": "462590",
    "end": "467750"
  },
  {
    "text": "stateful posting object that requires mental state the application should",
    "start": "467750",
    "end": "472820"
  },
  {
    "text": "allow us to maintain access and update estate information for message earlier grantees we have a couple of classes for",
    "start": "472820",
    "end": "479780"
  },
  {
    "text": "red like and most ones and these ones and exactly one's an important thing to consider fellows will can and will",
    "start": "479780",
    "end": "487520"
  },
  {
    "text": "happen at various levels like network partition disk failures or not going",
    "start": "487520",
    "end": "492800"
  },
  {
    "text": "down and so on platforms should be able to recover from all such failures risen from that process will stay before",
    "start": "492800",
    "end": "499520"
  },
  {
    "text": "harming the result and Jeremy have more performance related more performance",
    "start": "499520",
    "end": "507589"
  },
  {
    "text": "related requirements like latency throughput or scalability which are extremely important and streaming",
    "start": "507589",
    "end": "513979"
  },
  {
    "text": "applications which was to take care of maturity and adduction levels which this",
    "start": "513979",
    "end": "520399"
  },
  {
    "text": "information could help us or give us a clue about potential support available libraries or even stucco for answers and",
    "start": "520399",
    "end": "527510"
  },
  {
    "text": "so on and also all that release the ease of development and ease of probability",
    "start": "527510",
    "end": "533329"
  },
  {
    "text": "is gradual when we have super fancy system which covers all those cases but if we if we cannot write a program for",
    "start": "533329",
    "end": "539870"
  },
  {
    "text": "it or EV Cal deployed we are done anyway",
    "start": "539870",
    "end": "545290"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "let's talk about runtime and programming model which is probably the most important trait of the system because it",
    "start": "547269",
    "end": "552980"
  },
  {
    "text": "defines is expressive as possible operation and future annotations therefore we define system capabilities",
    "start": "552980",
    "end": "558470"
  },
  {
    "text": "and its use cases there are two distinctive approaches how to implement",
    "start": "558470",
    "end": "563949"
  },
  {
    "text": "streaming system first one the native streaming it means all incoming records",
    "start": "563949",
    "end": "568970"
  },
  {
    "text": "or events if you want our process as they arrive one by one second approach",
    "start": "568970",
    "end": "575480"
  },
  {
    "start": "575000",
    "end": "575000"
  },
  {
    "text": "is called micro batching show batches are creating or from income and I close",
    "start": "575480",
    "end": "580760"
  },
  {
    "text": "and go for the system these batches are created according to predefined time constant typically every couple of",
    "start": "580760",
    "end": "587360"
  },
  {
    "text": "seconds both approaches have advantages and disadvantages so let's start with",
    "start": "587360",
    "end": "594139"
  },
  {
    "start": "589000",
    "end": "589000"
  },
  {
    "text": "negative streaming the gradient the great advantage of native streaming is its expressiveness because it takes the",
    "start": "594139",
    "end": "600319"
  },
  {
    "text": "stream as a test is not limited by any amateur abstraction over it also as the records are processed immediately upon",
    "start": "600319",
    "end": "607100"
  },
  {
    "text": "arrival achievable latencies of these systems are always better than its micro batching companions apart from that",
    "start": "607100",
    "end": "614750"
  },
  {
    "text": "state flow operations are much easier to implement as you will see in the next couple minutes a native streaming system",
    "start": "614750",
    "end": "621350"
  },
  {
    "text": "have usually low throughput and fault runs as much more expensive as system",
    "start": "621350",
    "end": "626660"
  },
  {
    "text": "has to take care of every single record also balancing this kind of issue for",
    "start": "626660",
    "end": "632140"
  },
  {
    "text": "example I'd say we have a data partition by okie and we want to process it if the",
    "start": "632140",
    "end": "637390"
  },
  {
    "text": "processing of some cuter partition is more resource intensive for any reason this partition quickly becomes jobs both",
    "start": "637390",
    "end": "643480"
  },
  {
    "text": "like splitting stream into micro batches inevitably produces systems",
    "start": "643480",
    "end": "649720"
  },
  {
    "text": "expressiveness some operations like especially state management or joint ends plates I much harder to implement a",
    "start": "649720",
    "end": "656530"
  },
  {
    "text": "system has to manipulate the whole batch moreover the batch integral connects two",
    "start": "656530",
    "end": "662200"
  },
  {
    "text": "things which should never be connected and infrastructure property and a business oj under control a photo runs",
    "start": "662200",
    "end": "669190"
  },
  {
    "text": "and advancing my simpler as system just sense every batch to worker node and if",
    "start": "669190",
    "end": "674740"
  },
  {
    "text": "something goes wrong it just uses different one and lastly is good to remark we can build microbe etching",
    "start": "674740",
    "end": "681580"
  },
  {
    "text": "system atop native streaming quite easily and programming models can be",
    "start": "681580",
    "end": "687610"
  },
  {
    "text": "justified as composition and declarative compositional approach provides basic building blocks like sources or",
    "start": "687610",
    "end": "694990"
  },
  {
    "text": "predators and they must be tied together in order to create expected to poach a new components can be usually defined by",
    "start": "694990",
    "end": "701470"
  },
  {
    "text": "implementing some kind of interfaces on the contrary operators a ducati api i",
    "start": "701470",
    "end": "707170"
  },
  {
    "text": "define as higher order functions at all those to write function code with abstract types alone is fancy stuff and",
    "start": "707170",
    "end": "714010"
  },
  {
    "text": "the system creates optimizes to purge itself also the code baby is usually",
    "start": "714010",
    "end": "720910"
  },
  {
    "text": "provides more advanced operations like been doing or statement state management out of the box I'm going to show you",
    "start": "720910",
    "end": "728320"
  },
  {
    "text": "some cool samples very soon there is a number of diverse frameworks available",
    "start": "728320",
    "end": "734830"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "and is that are impossible to cover all of them in just one session so I have been forced limited somehow and I",
    "start": "734830",
    "end": "740680"
  },
  {
    "text": "decided go for popular streaming solutions from Apache on skype therefore we are going to focus on apache storm",
    "start": "740680",
    "end": "746890"
  },
  {
    "text": "and its sibling trident and on streaming module of very popular spark we are also",
    "start": "746890",
    "end": "752530"
  },
  {
    "text": "going to talk about steering system system the Harrington name Samsa and finally we will discuss promising Apache",
    "start": "752530",
    "end": "760300"
  },
  {
    "text": "project flank I believe is a great election because even if all of them are streaming",
    "start": "760300",
    "end": "766090"
  },
  {
    "text": "systems they approached various challenges very differently unfortunately i won't talk about",
    "start": "766090",
    "end": "771400"
  },
  {
    "text": "repertory systems like google million or a monkey noises and also we are going to",
    "start": "771400",
    "end": "777220"
  },
  {
    "text": "miss interesting but still a method update systems like interview pump or about GI packs so that's maybe for next",
    "start": "777220",
    "end": "784600"
  },
  {
    "text": "time i purchased almost origin created",
    "start": "784600",
    "end": "791080"
  },
  {
    "text": "by nine miles and his team at bag tied in 2010 later it was excited opus all by",
    "start": "791080",
    "end": "796150"
  },
  {
    "text": "twitter and it became de facto industrial standard and hence",
    "start": "796150",
    "end": "802120"
  },
  {
    "text": "reprocessing storm is a native steering system and provides provides over the IP I also stream uses for PG definition and",
    "start": "802120",
    "end": "810550"
  },
  {
    "text": "it also implements strong multi-language protocol this basically tells us to implement our solutions and large number",
    "start": "810550",
    "end": "817480"
  },
  {
    "text": "of languages which is pretty unique and color is of course one of them tryla is",
    "start": "817480",
    "end": "825010"
  },
  {
    "text": "high-level microbe etching system the top storm simplifies to pooja billing process and also adds high-level /",
    "start": "825010",
    "end": "831460"
  },
  {
    "text": "ations like with doing aggregation or state management which are not natively supported in storm addition to storm",
    "start": "831460",
    "end": "838750"
  },
  {
    "text": "planet provides exactly ones diverged semantics and try that has java closure and scholar AP is as we on own spark is",
    "start": "838750",
    "end": "849250"
  },
  {
    "text": "a very popular batch processing flavor these days with a couple of build libraries like sparks equal or mmm lab",
    "start": "849250",
    "end": "855040"
  },
  {
    "text": "and of course parks Deming Paris on time is built for batch processing and",
    "start": "855040",
    "end": "860670"
  },
  {
    "text": "therefore spark stemming as it was added a little bit lighter does microbe a",
    "start": "860670",
    "end": "865690"
  },
  {
    "text": " the stream of input data is adjustable receivers and which creates",
    "start": "865690",
    "end": "871960"
  },
  {
    "text": "micro batches and these micro batches are processed and similar way as other spark jobs spark streaming provides high",
    "start": "871960",
    "end": "878800"
  },
  {
    "text": "over the creative API and color java and piping",
    "start": "878800",
    "end": "883920"
  },
  {
    "text": "Sansa was originally developed in LinkedIn and as a proprietary streaming solution arif Kafka which is another",
    "start": "884600",
    "end": "890850"
  },
  {
    "text": "great linking contribution to our community became key part of their infrastructure as you was going to fill",
    "start": "890850",
    "end": "897360"
  },
  {
    "text": "the blighter sums up builds heavily of Kafka's log base for Sophie I both together integrates really well also",
    "start": "897360",
    "end": "904829"
  },
  {
    "text": "some that provides compositional API and",
    "start": "904829",
    "end": "910800"
  },
  {
    "text": "the husband at least flank fling this particular project it has its origin in 2008 and but right now is getting fight",
    "start": "910800",
    "end": "918029"
  },
  {
    "text": "a lot of attention Frank is negative steering system and provides high level API 3 also provides API for batch",
    "start": "918029",
    "end": "925769"
  },
  {
    "text": "processing a spark but there is a fundamental distinction between those two fling handles batch as a special",
    "start": "925769",
    "end": "932010"
  },
  {
    "text": "case of streaming so everything is a stream and this is definitely by the abstraction because this is how the",
    "start": "932010",
    "end": "937829"
  },
  {
    "text": "words that I looks like so they also pay",
    "start": "937829",
    "end": "949110"
  },
  {
    "start": "941000",
    "end": "941000"
  },
  {
    "text": "interaction over the systems and as you can see in a table that you have pretty different right so now let's have a look",
    "start": "949110",
    "end": "956010"
  },
  {
    "text": "at code samples and of course nothing is more important than counting the words you know what time is something like",
    "start": "956010",
    "end": "962070"
  },
  {
    "text": "hella worth of data processing so let's",
    "start": "962070",
    "end": "967649"
  },
  {
    "text": "type of storm and please note the example will simplify simplify it significantly first let's a howl at this",
    "start": "967649",
    "end": "977130"
  },
  {
    "text": "topology definition as you can see we have to define a spa or if you want a source and then there is a boat a",
    "start": "977130",
    "end": "983910"
  },
  {
    "text": "processing component which splits the tags into the world then I have to find",
    "start": "983910",
    "end": "989250"
  },
  {
    "text": "another board for actual world health world count word count calculation also",
    "start": "989250",
    "end": "994440"
  },
  {
    "text": "have a look at at the magic numbers 5 8 and 12 these are apparent hints and it",
    "start": "994440",
    "end": "1001220"
  },
  {
    "text": "and they defined how many independent friends Andrew Custer will be used for execution of every single component as",
    "start": "1001220",
    "end": "1008000"
  },
  {
    "text": "you can see always very manual and level now let's focus on how is the actual",
    "start": "1008000",
    "end": "1014660"
  },
  {
    "text": "work on both implemented as long as Tim does not have building support for vonage state so i have",
    "start": "1014660",
    "end": "1020360"
  },
  {
    "text": "defined a local state which is far from big idea but with example apart from",
    "start": "1020360",
    "end": "1025550"
  },
  {
    "text": "that is not very interesting it's just just a simple Java so let alone and have a look at trident as I mentioned before",
    "start": "1025550",
    "end": "1034069"
  },
  {
    "text": "try that a storm of micro batching extension and try that apart from any other goodies provides state management",
    "start": "1034069",
    "end": "1041000"
  },
  {
    "text": "which is pretty useful and implementing would count as you can see there i could",
    "start": "1041000",
    "end": "1046100"
  },
  {
    "text": "use high level / a shins like each and goodbye so it is a little bit better and",
    "start": "1046100",
    "end": "1052280"
  },
  {
    "text": "also i was able to straighten managed state for storing account and now it's a",
    "start": "1052280",
    "end": "1060170"
  },
  {
    "start": "1059000",
    "end": "1059000"
  },
  {
    "text": "time for a pretty declarative api provided by apache spark also keep in",
    "start": "1060170",
    "end": "1066920"
  },
  {
    "text": "mind when i come try the previous example which were all i simplified this is nearly on code you need to run this",
    "start": "1066920",
    "end": "1072200"
  },
  {
    "text": "simple streaming word count every sparks them in job requires streaming contact",
    "start": "1072200",
    "end": "1078620"
  },
  {
    "text": "which is basically the entry point to the swimming punctuality swimming context the configuration which is as",
    "start": "1078620",
    "end": "1085429"
  },
  {
    "text": "you can see in our case we're limited but more importantly it defines its batch integral which is set to one",
    "start": "1085429",
    "end": "1091970"
  },
  {
    "text": "second and now you can see what time computation you know quite a difference",
    "start": "1091970",
    "end": "1099160"
  },
  {
    "text": "the that's a reason why Sparky sometime called distribute its color as you can",
    "start": "1099160",
    "end": "1104570"
  },
  {
    "text": "see it's quite standard function code and spark this kind of topology definition and a distributed execution",
    "start": "1104570",
    "end": "1111429"
  },
  {
    "text": "and at last part of every super extending job start a new computation",
    "start": "1111429",
    "end": "1116860"
  },
  {
    "text": "just keep in mind one start the job cannot be unified and now let's look at",
    "start": "1116860",
    "end": "1125330"
  },
  {
    "text": "apache Samsung and I'll representative of compositional API the topology is defined in some such properties file so",
    "start": "1125330",
    "end": "1132020"
  },
  {
    "text": "you won't find it here but for us is important the task has defined its input",
    "start": "1132020",
    "end": "1137150"
  },
  {
    "text": "and output channels and communication goes through Kafka in our case whole tube or JSON don't ask which does all",
    "start": "1137150",
    "end": "1144110"
  },
  {
    "text": "the work and sometimes components are defined by implementing particle interface",
    "start": "1144110",
    "end": "1149389"
  },
  {
    "text": "in this case it's a the streaming task I have just over the method process its",
    "start": "1149389",
    "end": "1156139"
  },
  {
    "text": "permit release contains always need for connecting with the rest of the system",
    "start": "1156139",
    "end": "1161349"
  },
  {
    "text": "and the completion competition itself is just just a simple scale and now let's",
    "start": "1161349",
    "end": "1170929"
  },
  {
    "text": "look at link as you can see API is pretty similar to spark but notice we are not setting any batch interval",
    "start": "1170929",
    "end": "1179739"
  },
  {
    "text": "computation itself as pretty straightforward as you can see there's",
    "start": "1179739",
    "end": "1185089"
  },
  {
    "text": "just a couple of couple of lines of functional calls and fling takes care of",
    "start": "1185089",
    "end": "1190399"
  },
  {
    "text": "the rest surrendered knowledge of time",
    "start": "1190399",
    "end": "1196669"
  },
  {
    "start": "1193000",
    "end": "1193000"
  },
  {
    "text": "to have a look at more interesting problems of stream processing starting with photo runs for trans and streaming",
    "start": "1196669",
    "end": "1203419"
  },
  {
    "text": "systems is enhancing hardening batch when facing an error in batch processing system we can just restart failed part",
    "start": "1203419",
    "end": "1211039"
  },
  {
    "text": "of the computation and we are good but this is much harder in streaming scenarios because data are still in",
    "start": "1211039",
    "end": "1217549"
  },
  {
    "text": "coming and a lot of jobs can run 24 7 and another challenge we have to face a",
    "start": "1217549",
    "end": "1223279"
  },
  {
    "text": "state consistency because in the end of the day we have to start a plank events",
    "start": "1223279",
    "end": "1228499"
  },
  {
    "text": "and of course that all state operations are I'd important as you will see for drones can be pretty hard so let's look",
    "start": "1228499",
    "end": "1235879"
  },
  {
    "text": "how our systems will deliver that still uses a mechanism of upstream backup and",
    "start": "1235879",
    "end": "1242089"
  },
  {
    "text": "recovery acknowledgments to grantee the messages are reprocess after failure",
    "start": "1242089",
    "end": "1247179"
  },
  {
    "text": "acknowledgement works as follows and operators and back to the previous operator an acknowledgement for every",
    "start": "1247179",
    "end": "1252709"
  },
  {
    "text": "record has been processed the source of the topology keeps a backup of Oracle's it generates once receive",
    "start": "1252709",
    "end": "1259729"
  },
  {
    "text": "acknowledgement from or droid to the records and Angelo sings the backup can be discarded safely at failure if not",
    "start": "1259729",
    "end": "1267379"
  },
  {
    "text": "all acknowledgement have been received then the records are applied by the source this grant is no data loss but",
    "start": "1267379",
    "end": "1273289"
  },
  {
    "text": "just result in duplicate records passing through the system",
    "start": "1273289",
    "end": "1278559"
  },
  {
    "text": "it's basically elephant ivory stone implements this we have a kind of mechanism of upstream with michaela that",
    "start": "1278559",
    "end": "1291850"
  },
  {
    "text": "only requires a few bytes per storage parcels or equal to trigger acknowledgments and but in general",
    "start": "1291850",
    "end": "1298019"
  },
  {
    "text": "political acknowledgement architectures regardless of their performance value of",
    "start": "1298019",
    "end": "1303340"
  },
  {
    "text": "fighting exactly ones guarantees to the border link application developer with load application also stole my crimes in",
    "start": "1303340",
    "end": "1310090"
  },
  {
    "text": "Israel throughput and has problems at full control as the acknowledgment mechanism often hosted classifies",
    "start": "1310090",
    "end": "1317019"
  },
  {
    "text": "failures under big pressure spark",
    "start": "1317019",
    "end": "1322299"
  },
  {
    "text": "slimming and it's michael batching semantics for a different approach the idea is terrible simple spark process",
    "start": "1322299",
    "end": "1328690"
  },
  {
    "text": "micro batches on various volcanoes and each micro batch may either succeed or fail at a failure the micro batch can be",
    "start": "1328690",
    "end": "1335110"
  },
  {
    "text": "simply computed as they are possessed and and immutable so basic exactly",
    "start": "1335110",
    "end": "1340600"
  },
  {
    "text": "exactly once divert I made it very easy",
    "start": "1340600",
    "end": "1344638"
  },
  {
    "text": "some such a probe it is completely different it takes an advantage of the rebel offset based messaging system is",
    "start": "1345899",
    "end": "1352299"
  },
  {
    "text": "usually capco of course samsung monitors offset of this task and moves it when",
    "start": "1352299",
    "end": "1357869"
  },
  {
    "text": "message is processed also can be checkpoint in persistent storage and a restore in case of failure the problem",
    "start": "1357869",
    "end": "1365259"
  },
  {
    "text": "is when it restores offsets from the last checkpoint it does not know which upcoming messages where process and it",
    "start": "1365259",
    "end": "1372070"
  },
  {
    "text": "might do it twice so that's at least ones develop for us flags approach is",
    "start": "1372070",
    "end": "1379809"
  },
  {
    "text": "based on distributive slap shot which keeps the state of streaming job Flinx and chick boom barriers basically some",
    "start": "1379809",
    "end": "1386919"
  },
  {
    "text": "kind of markers through the system and when body reaches the operator operate",
    "start": "1386919",
    "end": "1392860"
  },
  {
    "text": "the checkpoint corresponding part of the stream so if you compare it to storm it's far more efficient as it does not",
    "start": "1392860",
    "end": "1399999"
  },
  {
    "text": "have too much acknowledgement every single record but does it in small batches but only confuse it's delayed",
    "start": "1399999",
    "end": "1407139"
  },
  {
    "text": "streaming it's conceptually it's very different from spark and so fling provides exactly once",
    "start": "1407139",
    "end": "1412730"
  },
  {
    "text": "delivery most of the non-trivial streaming application has some kind of",
    "start": "1412730",
    "end": "1419240"
  },
  {
    "start": "1414000",
    "end": "1414000"
  },
  {
    "text": "state on the contrary of the stateless operations then we have just an input processing and output we have an input",
    "start": "1419240",
    "end": "1425360"
  },
  {
    "text": "and a state then we do the processing and then we have output with a modified state we have to measure our state",
    "start": "1425360",
    "end": "1432470"
  },
  {
    "text": "pursues it and in case of failure big spider state to be recreated the",
    "start": "1432470",
    "end": "1437990"
  },
  {
    "text": "recreation of the state may be a problem little bit as we do not always exactly once grantee some of the records may be",
    "start": "1437990",
    "end": "1444799"
  },
  {
    "text": "replied multiple times and this is what not what you usually want as we know",
    "start": "1444799",
    "end": "1453799"
  },
  {
    "start": "1452000",
    "end": "1452000"
  },
  {
    "text": "stone provides at least one's delivery guarantees so how can we actually exactly one semantics provide by trident",
    "start": "1453799",
    "end": "1460510"
  },
  {
    "text": "conceptually it's quite simple you just start committing records but obviously",
    "start": "1460510",
    "end": "1466490"
  },
  {
    "text": "it is not very efficient so you start doing in small batches then we do some optimizations and here we are trying to",
    "start": "1466490",
    "end": "1473809"
  },
  {
    "text": "find a couple of abstractions which determines that when we can achieve exactly 1 guarantee and as you can see",
    "start": "1473809",
    "end": "1480440"
  },
  {
    "text": "the picture to have some limitations and take some time to dig into it when",
    "start": "1480440",
    "end": "1488750"
  },
  {
    "text": "thinking about state operations people think we usually have organic operator with a state and steep of Records",
    "start": "1488750",
    "end": "1494480"
  },
  {
    "text": "passing through it and as we know most parks timing is micro bashing and system",
    "start": "1494480",
    "end": "1499610"
  },
  {
    "text": "and its implemented differently basically spark streaming takes manages a state as another microbe extreme so",
    "start": "1499610",
    "end": "1506929"
  },
  {
    "text": "during the processing of each micro patch sparked a the current state and a function representing the operation and",
    "start": "1506929",
    "end": "1513200"
  },
  {
    "text": "result is a process micro batch with an updated state",
    "start": "1513200",
    "end": "1519250"
  },
  {
    "text": "sometimes solution for everything is just push it out to Caprica and problem solved and also works in the context of",
    "start": "1526919",
    "end": "1534640"
  },
  {
    "text": "state management Samsung has real estate for operators so any task and whole estate and the state's channel is pushed",
    "start": "1534640",
    "end": "1542020"
  },
  {
    "text": "to kafka if needed that can be easily recreated from Kafka's topics to make it",
    "start": "1542020",
    "end": "1549840"
  },
  {
    "text": "to make it a little bit faster sams allows us to plug in key value store and",
    "start": "1549840",
    "end": "1555700"
  },
  {
    "text": "so good storage so it doesn't have to go to Khafre all the time unfortunately",
    "start": "1555700",
    "end": "1561880"
  },
  {
    "text": "some sub provides at least one semantics only and it hurts hot but the implementation of exactly one's delivery",
    "start": "1561880",
    "end": "1567910"
  },
  {
    "text": "is planned flink provide state to",
    "start": "1567910",
    "end": "1576549"
  },
  {
    "text": "operators commute actually very similar to Sansa when working a flank we can use",
    "start": "1576549",
    "end": "1581980"
  },
  {
    "text": "two different types of State first one is local or task state it's in current",
    "start": "1581980",
    "end": "1588100"
  },
  {
    "text": "state of particle operator instance only and you know these guys do not interact between each other then we have",
    "start": "1588100",
    "end": "1595270"
  },
  {
    "text": "partitioned or you want a key state which maintain state of whole partition",
    "start": "1595270",
    "end": "1600880"
  },
  {
    "text": "and of course fling provides exact valence semantics so now let's have one",
    "start": "1600880",
    "end": "1607660"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "more look how to convert this time will be more stayed focused so let's start",
    "start": "1607660",
    "end": "1614950"
  },
  {
    "text": "with Trident you may have seen asleep at already as it is fairly similar as",
    "start": "1614950",
    "end": "1620110"
  },
  {
    "text": "before we can create state by calling President aggregate important argument",
    "start": "1620110",
    "end": "1626290"
  },
  {
    "text": "is the count which is built in component for storing numbers if you want to",
    "start": "1626290",
    "end": "1631540"
  },
  {
    "text": "process the data from it you have to create a stream for add as you can see is not very convenient it's part of the",
    "start": "1631540",
    "end": "1639700"
  },
  {
    "text": "collective approach is a little bit better firstly we had to create a DD",
    "start": "1639700",
    "end": "1645490"
  },
  {
    "text": "used as initial state then we do some information or whatever then we have to",
    "start": "1645490",
    "end": "1652380"
  },
  {
    "text": "define transition function which takes the word its count and a current state this function does the computations",
    "start": "1652380",
    "end": "1658500"
  },
  {
    "text": "update the state and returns the result and finally we can put all the bits",
    "start": "1658500",
    "end": "1664230"
  },
  {
    "text": "together and get a stage 3 which contains world count and now let's have",
    "start": "1664230",
    "end": "1672090"
  },
  {
    "text": "a look at Sam's ax firstly we need to define our state in this case it's given",
    "start": "1672090",
    "end": "1678149"
  },
  {
    "text": "store and also we have to define how it should be initialized and then we can",
    "start": "1678149",
    "end": "1686970"
  },
  {
    "text": "use a drink computation as you can see it's / this day forward just a few more points and finally let's have a look at",
    "start": "1686970",
    "end": "1694740"
  },
  {
    "text": "flank flink provides very neat API we",
    "start": "1694740",
    "end": "1700409"
  },
  {
    "text": "just call a function of state which takes as an argument function with two arguments first one is the word to",
    "start": "1700409",
    "end": "1707610"
  },
  {
    "text": "processed and second is a state function then returns process output and a new",
    "start": "1707610",
    "end": "1713580"
  },
  {
    "text": "state I didn't wanted to show you some nice",
    "start": "1713580",
    "end": "1726540"
  },
  {
    "text": "performance comparisons but i will not reason the comparison is a topic maybe",
    "start": "1726540",
    "end": "1732780"
  },
  {
    "text": "for all talk so i will do it here but a couple of guys did it already so i'm",
    "start": "1732780",
    "end": "1737970"
  },
  {
    "text": "really happy to reference them but for now just just in general when we talk",
    "start": "1737970",
    "end": "1744030"
  },
  {
    "text": "about performance in streaming we talk about latency and throughput it depends",
    "start": "1744030",
    "end": "1749730"
  },
  {
    "text": "on many variables but in general and for very simple task you are at 5k records per second panel is ok if you can reach",
    "start": "1749730",
    "end": "1757290"
  },
  {
    "text": "1 million it's nice over a million it's great and speaking about notes I mean",
    "start": "1757290",
    "end": "1763440"
  },
  {
    "text": "pretty standard knows like 24 course or an reasonable amount of memory like 24",
    "start": "1763440",
    "end": "1768660"
  },
  {
    "text": "or 48 gigabytes for identity in case of",
    "start": "1768660",
    "end": "1774030"
  },
  {
    "text": "micro batch we we are usually faking in seconds in case of native streaming we",
    "start": "1774030",
    "end": "1779130"
  },
  {
    "text": "can expect latencies in lower hundreds of millions for most of the systems but tombstone can operate in tens of malice",
    "start": "1779130",
    "end": "1786210"
  },
  {
    "text": "easily also it's important to keep in mind the cause of delivery guarantees",
    "start": "1786210",
    "end": "1791820"
  },
  {
    "start": "1788000",
    "end": "1788000"
  },
  {
    "text": "for trans and state management put for example turning on for trans men koze do",
    "start": "1791820",
    "end": "1797880"
  },
  {
    "text": "like ten to fifteen percent but in case of storm and it can be like seventy percent of your fruit so as always",
    "start": "1797880",
    "end": "1805080"
  },
  {
    "text": "nothing comes from free during the throat I've shown you safely and",
    "start": "1805080",
    "end": "1810930"
  },
  {
    "text": "stateless both count examples and of course taylor's would be faster in case you're wondering how much so in the",
    "start": "1810930",
    "end": "1817800"
  },
  {
    "text": "context of budget flank your friend was like twenty-five percent but in case of spark it was around fifty percent i'm",
    "start": "1817800",
    "end": "1825150"
  },
  {
    "text": "pretty sure this could be tuned but it could it could give us an idea it is",
    "start": "1825150",
    "end": "1830190"
  },
  {
    "text": "something we should have in mind and speaking about during all systems have",
    "start": "1830190",
    "end": "1835440"
  },
  {
    "text": "very rich tuning options which may lead to significant performance gains and you",
    "start": "1835440",
    "end": "1841050"
  },
  {
    "text": "should always find some time to have a look at it also is an important time in mind all purge all operations are",
    "start": "1841050",
    "end": "1847860"
  },
  {
    "text": "distributed and send the data through the neighbor rick is pretty expensive so try to take",
    "start": "1847860",
    "end": "1853700"
  },
  {
    "text": "a take an advantage of little card day and also trying to tune of your application sterilization just load of",
    "start": "1853700",
    "end": "1861980"
  },
  {
    "text": "to discuss the good performance so I hope I give you basic ideas what to expect but we have to move on when",
    "start": "1861980",
    "end": "1872000"
  },
  {
    "start": "1870000",
    "end": "1870000"
  },
  {
    "text": "picking of the framework for application you should always consider its maturity so let's have a quick look how does it",
    "start": "1872000",
    "end": "1877370"
  },
  {
    "text": "look like in our cases stone was the first mainstream mainstream stemming",
    "start": "1877370",
    "end": "1884150"
  },
  {
    "text": "system and is used by many companies like victory yahoo Spotify and many more",
    "start": "1884150",
    "end": "1889809"
  },
  {
    "text": "spark is the most telling Scott repository these days and one of the engine behind behind Scott's popularity",
    "start": "1889809",
    "end": "1898840"
  },
  {
    "text": "spice adoption grows every day it's used by companies like Netflix is curator",
    "start": "1899290",
    "end": "1904640"
  },
  {
    "text": "Starks Intel IBM and so on Samsa is used by Lincoln I like tens of other",
    "start": "1904640",
    "end": "1911000"
  },
  {
    "text": "companies as an example we can have like that flakes or where flink is still an",
    "start": "1911000",
    "end": "1917720"
  },
  {
    "text": "emerging project but we can see its first production deployments and I'm sure more will fall soon for example i",
    "start": "1917720",
    "end": "1924440"
  },
  {
    "text": "heard that amazon was avoiding it right now so we have just finished some basic",
    "start": "1924440",
    "end": "1932929"
  },
  {
    "start": "1929000",
    "end": "1929000"
  },
  {
    "text": "comparison of chosen systems and we discuss how we approach butter with",
    "start": "1932929",
    "end": "1938000"
  },
  {
    "text": "challenges which needs to be sorted out when implementing slimming distributed",
    "start": "1938000",
    "end": "1943400"
  },
  {
    "text": "stream processing system now you may have a quick look at a summary from an opinion dare to trade now is the time to",
    "start": "1943400",
    "end": "1952250"
  },
  {
    "text": "move on to last part of this talk rainbow recommendations i have to say",
    "start": "1952250",
    "end": "1957860"
  },
  {
    "text": "this part is the most opinion based by far but i was very trying to be fair so",
    "start": "1957860",
    "end": "1971179"
  },
  {
    "text": "as more the answer for typical question",
    "start": "1971179",
    "end": "1976190"
  },
  {
    "text": "which one is the best or which one should i use is as always it depends so",
    "start": "1976190",
    "end": "1982010"
  },
  {
    "text": "in general always try to avoid requirements of your application careful and be sure you fully understand the",
    "start": "1982010",
    "end": "1987919"
  },
  {
    "text": "consequences of choosing a particle framework i would also recommend you to pick framework we've hired a p.i as it",
    "start": "1987919",
    "end": "1996500"
  },
  {
    "text": "is little more again and more more importantly much more productive also",
    "start": "1996500",
    "end": "2003130"
  },
  {
    "start": "2003000",
    "end": "2003000"
  },
  {
    "text": "keep in mind the the most of streaming application are stable sort of state management of a particle framework",
    "start": "2003130",
    "end": "2009040"
  },
  {
    "text": "should be up on your evolution list i also recommend go for a framework with",
    "start": "2009040",
    "end": "2014260"
  },
  {
    "text": "exactly ones delivery semantics as it makes things definitely easier but of",
    "start": "2014260",
    "end": "2021100"
  },
  {
    "text": "course this really depends on particle requirements data files use cases when",
    "start": "2021100",
    "end": "2026230"
  },
  {
    "text": "at these ones or at most once semantics or guarantees are all you need we also",
    "start": "2026230",
    "end": "2032260"
  },
  {
    "text": "keep in mind system supporting exactly ones does not have to support weaker guarantees as to make sure your system",
    "start": "2032260",
    "end": "2040929"
  },
  {
    "text": "is able to recover quickly you can use cos Monki or similar tools for testing",
    "start": "2040929",
    "end": "2046409"
  },
  {
    "text": "because also discussed fast recovery is crucial and stream processing",
    "start": "2046409",
    "end": "2053520"
  },
  {
    "start": "2053000",
    "end": "2053000"
  },
  {
    "text": "so and now let's he'll look at particular frameworks storm is still a",
    "start": "2053750",
    "end": "2059270"
  },
  {
    "text": "great fit for for small and fast ask if you cram enable up late and say store",
    "start": "2059270",
    "end": "2066080"
  },
  {
    "text": "might be a good way to go but also keep in mind the photons or train instead",
    "start": "2066080",
    "end": "2071898"
  },
  {
    "text": "management how is the powerful magnet volts interesting option might be your potential update to Twitter's Iran which",
    "start": "2071899",
    "end": "2079100"
  },
  {
    "text": "is designed as a storm the placement and it should be better in every single point but it also gives the API problem",
    "start": "2079100",
    "end": "2087080"
  },
  {
    "text": "is there is no guarantee peter is going to open source it so who knows if this",
    "start": "2087080",
    "end": "2092929"
  },
  {
    "text": "is a really good idea for spark streaming and you should definitely at",
    "start": "2092929",
    "end": "2099200"
  },
  {
    "text": "least ripe if spark is already part of your infrastructure because in this case streaming comes basically for free and",
    "start": "2099200",
    "end": "2105590"
  },
  {
    "text": "you can also take advantage of values Park libraries also if you really want",
    "start": "2105590",
    "end": "2111350"
  },
  {
    "text": "to use on the architecture it is a pretty decent choice but you should",
    "start": "2111350",
    "end": "2117350"
  },
  {
    "text": "always keep it mind micro battery limitations and be sure latency is not critical for you when thinking about",
    "start": "2117350",
    "end": "2127070"
  },
  {
    "text": "editing some time Kafka should be poorest on over architecture I know it's what you do but nearly everyone and make",
    "start": "2127070",
    "end": "2133010"
  },
  {
    "text": "me everyone is using Kafka so I was too good at all so as mentioned before",
    "start": "2133010",
    "end": "2138770"
  },
  {
    "text": "sometimes shipping powerful local storage and it can hello States in tens of gigabytes easily which is pretty nice",
    "start": "2138770",
    "end": "2146060"
  },
  {
    "text": "but keep in mind sometimes at least once the limitation flank its contractual a",
    "start": "2146060",
    "end": "2152570"
  },
  {
    "text": "great living system which covers very most use cases and you often provides",
    "start": "2152570",
    "end": "2158480"
  },
  {
    "text": "progressive punctuality which might not be implemented by its by its competitors",
    "start": "2158480",
    "end": "2163990"
  },
  {
    "text": "so you should always come to the flank when you need a functionality which might be hard to implement spark or in",
    "start": "2163990",
    "end": "2170390"
  },
  {
    "text": "general in any other micro batching system and apart from that fling has an API for common batch processing and",
    "start": "2170390",
    "end": "2177980"
  },
  {
    "text": "which may be pretty useful but you need to have enough courage to adopt imagine",
    "start": "2177980",
    "end": "2185120"
  },
  {
    "text": "project and also don't have to check out its own map",
    "start": "2185120",
    "end": "2190260"
  },
  {
    "text": "and last thing I want to mention today is data flow and it's open source",
    "start": "2196500",
    "end": "2201720"
  },
  {
    "text": "initiative data flow is part of google form and copper form has all sorts of",
    "start": "2201720",
    "end": "2209160"
  },
  {
    "text": "things in it as a huge data store big fella called pops up some tools for data",
    "start": "2209160",
    "end": "2215100"
  },
  {
    "text": "analysis and so on and also aforementioned cover the flow as",
    "start": "2215100",
    "end": "2220220"
  },
  {
    "text": "Google's managed service for batch and stream processing with unified API and",
    "start": "2220220",
    "end": "2225470"
  },
  {
    "text": "it's built upon one on Google technologies such as MapReduce for back to the sink from jump from Java for",
    "start": "2225470",
    "end": "2232740"
  },
  {
    "text": "programming model definition and millville for still possessing and",
    "start": "2232740",
    "end": "2239510"
  },
  {
    "start": "2239000",
    "end": "2239000"
  },
  {
    "text": "ultimately good you may be asking why i'm talking about that as i said i will",
    "start": "2239510",
    "end": "2244620"
  },
  {
    "text": "be speaking about open source framework and this is clearly google proprietary solution but google decided to open",
    "start": "2244620",
    "end": "2250890"
  },
  {
    "text": "source data for sdk recently and guys board behind spark and flank and have",
    "start": "2250890",
    "end": "2258960"
  },
  {
    "text": "implemented a trainers so now we have an ability to run jobs define later for api",
    "start": "2258960",
    "end": "2264390"
  },
  {
    "text": "in google form in flank orange park it also possible that more engines will",
    "start": "2264390",
    "end": "2271680"
  },
  {
    "text": "fall soon data flow provides api in java and python implemented by google itself",
    "start": "2271680",
    "end": "2279140"
  },
  {
    "text": "but i have also found to do cells and in schow implemented by community apart",
    "start": "2279140",
    "end": "2288390"
  },
  {
    "text": "from that google and the number of partners submit that this as you approach a proposal named apache bean so",
    "start": "2288390",
    "end": "2296640"
  },
  {
    "text": "it seems as a pretty interesting option but it's very important to emphasize all",
    "start": "2296640",
    "end": "2302400"
  },
  {
    "text": "this is very recent and diplomat of some of the promised features might be",
    "start": "2302400",
    "end": "2309570"
  },
  {
    "text": "missing so now it's a type of question so we",
    "start": "2309570",
    "end": "2316589"
  },
  {
    "start": "2314000",
    "end": "2314000"
  },
  {
    "text": "have a name but I think I'm a little bit behind schedule so so just family",
    "start": "2316589",
    "end": "2323400"
  },
  {
    "text": "somewhere and we can discuss various things later so just find me so thank",
    "start": "2323400",
    "end": "2330150"
  },
  {
    "text": "you very much for attention I hope it was helpful for you and also we are hiring so if you if you like to join us",
    "start": "2330150",
    "end": "2336989"
  },
  {
    "text": "just so link we do a pretty interesting stuff in cake that's all from me thank",
    "start": "2336989",
    "end": "2342599"
  },
  {
    "text": "you very much",
    "start": "2342599",
    "end": "2345349"
  }
]